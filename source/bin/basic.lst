
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Fri Mar 12 10:29:12 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line.
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	1f 34						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 3a		lda #$3a			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 64 11	jsr $1164		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 a2 16	jsr $16a2		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 4b 36	jsr $364b		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.102d					assemblerHandler:
.102d	7c 30 10	jmp ($1030,x)			jmp 	(assemblerVectors,x)
.1030					assemblerVectors:

;******  Return to file: basic.asm

.1030					section_end_assembler:
.1030					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1030					X16Break:
.1030	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.1033	f0 01		beq $1036			beq 	_IsBreak
.1035	60		rts				rts
.1036					_IsBreak:
.1036	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1038	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.103b					ExternSave:
.103b	98		tya				tya
.103c	48		pha				pha
.103d	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.1040	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1043	a9 01		lda #$01			lda 	#1
.1045	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1047	a0 00		ldy #$00			ldy 	#0
.1049	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.104c	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.104e	85 2a		sta $2a				sta 	temp0
.1050	a5 51		lda $51				lda 	esInt1+1
.1052	85 2b		sta $2b				sta 	temp0+1
.1054	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.1056	a4 52		ldy $52				ldy 	esInt1+2
.1058	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.105a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.105d	b0 03		bcs $1062			bcs 	_ESSave
.105f	68		pla				pla
.1060	a8		tay				tay
.1061	60		rts				rts
.1062					_ESSave:
.1062	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.1064	20 85 11	jsr $1185		jsr	errorHandler
.1067					ExternLoad:
.1067	98		tya				tya
.1068	48		pha				pha
.1069	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.106c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.106f	a9 01		lda #$01			lda 	#1
.1071	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1073	a0 00		ldy #$00			ldy 	#0
.1075	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1078	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.107a	a4 51		ldy $51				ldy 	esInt1+1
.107c	a9 00		lda #$00			lda 	#0 							; load command
.107e	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1081	b0 03		bcs $1086			bcs 	_ESLoad
.1083	68		pla				pla
.1084	a8		tay				tay
.1085	60		rts				rts
.1086					_ESLoad:
.1086	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.1088	20 85 11	jsr $1185		jsr	errorHandler
.108b					ExternGetLength:
.108b	a5 48		lda $48				lda 	esInt0 						; length into A.
.108d	85 2a		sta $2a				sta 	temp0
.108f	a5 50		lda $50				lda 	esInt1
.1091	85 2b		sta $2b				sta 	temp0+1
.1093	a0 00		ldy #$00			ldy 	#0
.1095	b1 2a		lda ($2a),y			lda 	(temp0),y
.1097	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.1099	a4 50		ldy $50				ldy 	esInt1
.109b	e8		inx				inx 								; advance over the length pointer.
.109c	d0 01		bne $109f			bne 	_ESNoCarry
.109e	c8		iny				iny
.109f					_ESNoCarry:
.109f	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af2					bufferCount:
>0af2							.fill 	0
.0af2					bufferStorage:
>0af2							.fill 	MaxLineInputSize
.10a0					IOInitialise:
.10a0	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.10a2	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10a5	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.10a7	20 f7 10	jsr $10f7			jsr 	IOInk
.10aa	a9 00		lda #$00			lda 	#0
.10ac	20 0b 11	jsr $110b			jsr 	IOPaper
.10af	20 b3 10	jsr $10b3			jsr 	IOClearScreen
.10b2	60		rts				rts
.10b3					IOClearScreen:
.10b3	48		pha				pha
.10b4	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.10b6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					IONewLine:
.10bb	48		pha				pha
.10bc	a9 0d		lda #$0d			lda 	#13
.10be	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c1	68		pla				pla
.10c2	60		rts				rts
.10c3					IOTab:
.10c3	48		pha				pha
.10c4	a9 20		lda #$20			lda 	#32
.10c6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c9	68		pla				pla
.10ca	60		rts				rts
.10cb					IOPrintAscii:
.10cb					IOPrintChar:
.10cb	aa		tax				tax 								; save in X so we can save Y
.10cc	5a		phy				phy
.10cd	8a		txa				txa
.10ce	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.10d0	d0 02		bne $10d4			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.10d2	a9 14		lda #$14			lda 	#$14
.10d4					_IOPCNotBS:
.10d4	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.10d7	7a		ply				ply
.10d8	60		rts				rts
.10d9					IOInkey:
.10d9	98		tya				tya
.10da	48		pha				pha
.10db	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.10de	85 32		sta $32				sta 	tempShort
.10e0	68		pla				pla
.10e1	a8		tay				tay
.10e2	a5 32		lda $32				lda 	tempShort					; no key pressed.
.10e4	f0 10		beq $10f6			beq 	_IOIExit
.10e6	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.10e8	f0 0c		beq $10f6			beq 	_IOIExit
.10ea	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.10ec	f0 06		beq $10f4			beq 	_IOIBackspace
.10ee	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.10f0	90 e7		bcc $10d9			bcc 	IOInkey
.10f2	b0 02		bcs $10f6			bcs 	_IOIExit
.10f4					_IOIBackspace:
.10f4	a9 08		lda #$08			lda 	#8 							; return chr(8)
.10f6					_IOIExit:
.10f6	60		rts				rts
.10f7					IOInk:
.10f7	48		pha				pha
.10f8	29 07		and #$07			and 	#7 							; 8 primaries
.10fa	aa		tax				tax
.10fb	bd 03 11	lda $1103,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.10fe	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1101	68		pla				pla
.1102	60		rts				rts
.1103					_IOColourTable:
>1103	90						.byte 	$90 					; 0 Black
>1104	96						.byte 	$96 					; 1 Red
>1105	1e						.byte 	$1E 					; 2 Green
>1106	9e						.byte 	$9E 					; 3 Yellow
>1107	9a						.byte 	$9A 					; 4 Blue
>1108	9c						.byte 	$9C 					; 5 Magenta
>1109	9f						.byte 	$9F 					; 6 Cyan
>110a	05						.byte 	$05 					; 7 White
.110b					IOPaper:
.110b	48		pha				pha
.110c	48		pha				pha
.110d	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.110f	20 cb 10	jsr $10cb			jsr 	IOPrintChar 			; and then swap them again.
.1112	68		pla				pla
.1113	20 f7 10	jsr $10f7			jsr 	IOInk
.1116	a9 01		lda #$01			lda 	#1
.1118	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.111b	68		pla				pla
.111c	60		rts				rts
.111d					IOLocate:
.111d	48		pha				pha
.111e	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1120	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1123	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1125	20 2c 11	jsr $112c			jsr 	_IOLoc2
.1128	68		pla				pla
.1129	a8		tay				tay
.112a	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.112c					_IOLoc2:
.112c	c0 00		cpy #$00			cpy 	#0
.112e	f0 06		beq $1136			beq 	_IOLocExit
.1130	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1133	88		dey				dey
.1134	d0 f6		bne $112c			bne 	_IOLoc2
.1136					_IOLocExit:
.1136	60		rts				rts
.1137					IOInput:
.1137	a9 00		lda #$00			lda 	#0
.1139	8d f2 0a	sta $0af2			sta 	bufferCount
.113c					_IOILoop:
.113c	20 cf ff	jsr $ffcf			jsr 	$FFCF
.113f	c9 0d		cmp #$0d			cmp 	#13
.1141	f0 10		beq $1153			beq 	_IOIExit
.1143	ae f2 0a	ldx $0af2			ldx 	bufferCount
.1146	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.1148	f0 f2		beq $113c			beq 	_IOILoop
.114a	ee f2 0a	inc $0af2			inc 	bufferCount
.114d	9d f3 0a	sta $0af3,x			sta 	bufferStorage+1,x
.1150	4c 3c 11	jmp $113c			jmp 	_IOILoop
.1153					_IOIExit:
.1153	a9 f2		lda #$f2			lda 	#(bufferCount) & $FF
.1155	85 2a		sta $2a				sta 	temp0
.1157	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.1159	85 2b		sta $2b				sta 	1+(temp0)
.115b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.115c					IOReadTimer:
.115c	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.115f	48		pha				pha
.1160	8a		txa				txa
.1161	a8		tay				tay
.1162	68		pla				pla
.1163	60		rts				rts

;******  Return to file: device/device.asm

.1164					deviceHandler:
.1164	7c 67 11	jmp ($1167,x)			jmp 	(deviceVectors,x)
.1167					deviceVectors:
>1167	30 10					.word X16Break             ; index 0
>1169	b3 10					.word IOClearScreen        ; index 2
>116b	bb 10					.word IONewLine            ; index 4
>116d	a0 10					.word IOInitialise         ; index 6
>116f	f7 10					.word IOInk                ; index 8
>1171	d9 10					.word IOInkey              ; index 10
>1173	37 11					.word IOInput              ; index 12
>1175	67 10					.word ExternLoad           ; index 14
>1177	1d 11					.word IOLocate             ; index 16
>1179	0b 11					.word IOPaper              ; index 18
>117b	cb 10					.word IOPrintChar          ; index 20
>117d	cb 10					.word IOPrintAscii         ; index 22
>117f	3b 10					.word ExternSave           ; index 24
>1181	c3 10					.word IOTab                ; index 26
>1183	5c 11					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.1185					section_end_device:
.1185					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1185					ErrorHandler:
.1185	8a		txa				txa
.1186	48		pha				pha
.1187	a9 01		lda #$01			lda 	#1 							; red
.1189	a2 08		ldx #$08		ldx	#8
.118b	20 64 11	jsr $1164		jsr	deviceHandler
.118e	68		pla				pla
.118f	aa		tax				tax
.1190	a9 fb		lda #$fb			lda 	#(ErrorTextList) & $FF
.1192	85 2a		sta $2a				sta 	temp0
.1194	a9 11		lda #$11			lda 	#(ErrorTextList) >> 8
.1196	85 2b		sta $2b				sta 	1+(temp0)
.1198	ca		dex		_EHFind:dex									; errors start at 1
.1199	f0 10		beq $11ab			beq 	_EHFound
.119b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.119d	38		sec				sec
.119e	a5 2a		lda $2a				lda 	temp0
.11a0	71 2a		adc ($2a),y			adc 	(temp0),y
.11a2	85 2a		sta $2a				sta 	temp0
.11a4	90 f2		bcc $1198			bcc 	_EHFind
.11a6	e6 2b		inc $2b				inc 	temp0+1
.11a8	4c 98 11	jmp $1198			jmp 	_EHFind
.11ab					_EHFound:
.11ab	20 2c 14	jsr $142c			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.11ae	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.11b0	b1 28		lda ($28),y			lda 	(codePtr),y
.11b2	f0 39		beq $11ed			beq 	_EHNoLine
.11b4	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.11b6	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.11b9	90 32		bcc $11ed			bcc 	_EHNoLine
.11bb	a9 f7		lda #$f7			lda 	#(EHAtMsg) & $FF
.11bd	85 2a		sta $2a				sta 	temp0
.11bf	a9 11		lda #$11			lda 	#(EHAtMsg) >> 8
.11c1	85 2b		sta $2b				sta 	1+(temp0)
.11c3	20 2c 14	jsr $142c			jsr 	EHPrintAscii
.11c6	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.11c8	a2 00		ldx #$00			ldx 	#0
.11ca	b1 28		lda ($28),y			lda 	(codePtr),y
.11cc	95 48		sta $48,x			sta 	esInt0,x
.11ce	c8		iny				iny
.11cf	b1 28		lda ($28),y			lda 	(codePtr),y
.11d1	95 50		sta $50,x			sta 	esInt1,x
.11d3	a9 00		lda #$00			lda 	#0
.11d5	95 58		sta $58,x			sta 	esInt2,x
.11d7	95 60		sta $60,x			sta 	esInt3,x
.11d9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.11db	85 2a		sta $2a				sta 	temp0
.11dd	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11df	85 2b		sta $2b				sta 	1+(temp0)
.11e1	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.11e3	a9 00		lda #$00			lda 	#0							; stack position zero.
.11e5	a2 0c		ldx #$0c		ldx	#12
.11e7	20 af 2c	jsr $2caf		jsr	mainHandler
.11ea	20 2c 14	jsr $142c			jsr 	EHPrintAscii
.11ed					_EHNoLine:
.11ed	a2 04		ldx #$04		ldx	#4
.11ef	20 64 11	jsr $1164		jsr	deviceHandler
.11f2	a2 02		ldx #$02		ldx	#2
.11f4	20 a2 16	jsr $16a2		jsr	interactionHandler
.11f7					EHAtMsg:
>11f7	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.11fb					ErrorTextList:
>11fb	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1203	20 6e 6f 74 20 50 72 65 73 65 6e 74
>120f	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1217	45 72 72 6f 72
>121c	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>1224	64 69 73 61 62 6c 65 64
>122c	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>1234	6f 6e 20 66 61 69 6c 65 64
>123d	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>1245	42 79 20 5a 65 72 6f
>124c	04 53 74 6f 70				.text 4,"Stop"
>1251	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1259	73 6d 61 74 63 68
>125f	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1267	20 56 61 6c 75 65
>126d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1275	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1283	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>128b	20 63 6f 6d 6d 61
>1291	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1299	20 72 65 66 65 72 65 6e 63 65
>12a3	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>12ab	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>12b9	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>12c1	74 6f 6f 20 6c 6f 6e 67 2e
>12ca	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>12d2	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>12df	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>12e7	69 74 68 6f 75 74 20 52 45 50 45 41 54
>12f4	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>12fc	74 68 6f 75 74 20 46 4f 52
>1305	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>130d	74 68 6f 75 74 20 57 48 49 4c 45
>1318	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>1320	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>132d	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>1335	54 20 69 6e 64 65 78
>133c	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>1344	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>1354	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>135c	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>136b	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>1373	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1383	63 65 2e
>1386	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>138e	20 50 72 6f 63 65 64 75 72 65
>1398	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>13a0	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>13b0	2e
>13b1	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>13b9	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>13c7	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>13cf	75 69 72 65 73 20 61 72 72 61 79
>13da	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>13e2	61 79 20 69 6e 64 65 78 2e
>13eb	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>13f3	64 61 74 61
>13f7	15 43 61 6e 6e 6f 74 20			.text 21,"Cannot tokenise line."
>13ff	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65 2e
>140d	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1415	69 6c 65 64
>1419	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1421	69 6c 65 64
>1425	05 42 72 65 61 6b			.text 5,"Break"
>142b	00					.byte 0

;******  Return to file: error/errorhandler.asm

.142c					EHPrintAscii:
.142c	a0 00		ldy #$00			ldy 	#0
.142e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1430	aa		tax				tax
.1431	f0 0f		beq $1442			beq 	_EHPExit
.1433					_EHPLoop:
.1433	c8		iny				iny
.1434	8a		txa				txa
.1435	48		pha				pha
.1436	b1 2a		lda ($2a),y			lda 	(temp0),y
.1438	a2 16		ldx #$16		ldx	#22
.143a	20 64 11	jsr $1164		jsr	deviceHandler
.143d	68		pla				pla
.143e	aa		tax				tax
.143f	ca		dex				dex
.1440	d0 f1		bne $1433			bne 	_EHPLoop
.1442					_EHPExit:
.1442	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1443					section_end_error:
.1443					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1443					ExtensionHandler:
.1443	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1445	d0 08		bne $144f			bne 	_ExtensionUnary 			; is passed in A.
.1447	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1449	c8		iny				iny
.144a	0a		asl a				asl 	a
.144b	aa		tax				tax
.144c	7c 4d 14	jmp ($144d,x)			jmp 	(Group2Vectors-12,x)
.144f					_ExtensionUnary:
.144f	48		pha				pha 								; save stack pos in A
.1450	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1452	c8		iny				iny
.1453	0a		asl a				asl 	a
.1454	aa		tax				tax
.1455	68		pla				pla 								; restore stack pos and call group3 command.
.1456	7c 53 14	jmp ($1453,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1459					Group2Vectors:
>1459	6b 14					.word	Command_VPoke            ; $86 vpoke
>145b	6e 14					.word	Command_VDoke            ; $87 vdoke
>145d	1c 1e					.word	Unimplemented            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.145f					Group3Vectors:
>145f	af 14					.word	Command_VPeek            ; $86 vpeek(
>1461	b2 14					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1463					XEvaluateInteger:
.1463	8a		txa				txa
.1464	a2 06		ldx #$06		ldx	#6
.1466	20 af 2c	jsr $2caf		jsr	mainHandler
.1469	aa		tax				tax
.146a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.146b					Command_VPoke:
.146b	38		sec				sec 						; one byte , CS
.146c	b0 01		bcs $146f			bcs 	CmdVideoWrite
.146e					Command_VDoke:
.146e	18		clc				clc 						; two bytes, CC
.146f					CmdVideoWrite:
.146f	08		php				php 						; save one or two btes
.1470	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1472	20 63 14	jsr $1463			jsr 	XEvaluateInteger
.1475	20 cd 2b	jsr $2bcd			jsr 	CheckComma
.1478	e8		inx				inx
.1479	20 63 14	jsr $1463			jsr 	XEvaluateInteger
.147c	ca		dex				dex
.147d	20 8e 14	jsr $148e			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1480	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.1482	8d 23 9f	sta $9f23			sta 	$9F23
.1485	28		plp				plp 						; if it was Poke then exit
.1486	b0 05		bcs $148d			bcs 	_CVWExit
.1488	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.148a	8d 23 9f	sta $9f23			sta 	$9F23
.148d					_CVWExit:
.148d	60		rts				rts
.148e					SetUpTOSVRamAddress:
.148e	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1490	29 01		and #$01			and 	#1
.1492	15 60		ora $60,x			ora 	esInt3,x
.1494	d0 14		bne $14aa			bne 	CVWValue
.1496	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.1498	8d 20 9f	sta $9f20			sta 	$9F20
.149b	b5 50		lda $50,x			lda 	esInt1,x
.149d	8d 21 9f	sta $9f21			sta	 	$9F21
.14a0	b5 58		lda $58,x			lda 	esInt2,x
.14a2	29 01		and #$01			and 	#1
.14a4	09 10		ora #$10			ora 	#$10 				; step 1.
.14a6	8d 22 9f	sta $9f22			sta 	$9F22
.14a9	60		rts				rts
.14aa					CVWValue:
.14aa	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.14ac	20 85 11	jsr $1185		jsr	errorHandler
.14af					Command_VPeek:
.14af	38		sec				sec 						; one byte , CS
.14b0	b0 01		bcs $14b3			bcs 	CmdVideoRead
.14b2					Command_VDeek:
.14b2	18		clc				clc 						; two bytes, CC
.14b3					CmdVideoRead:
.14b3	08		php				php 						; save action on stack.
.14b4	aa		tax				tax 						; save stack position
.14b5	20 63 14	jsr $1463			jsr 	XEvaluateInteger 	; address
.14b8	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 	; closing right bracket.
.14bb	20 8e 14	jsr $148e			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.14be	20 4d 2b	jsr $2b4d			jsr 	MInt32False 		; zero return.
.14c1	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.14c4	95 48		sta $48,x			sta 	esInt0,x
.14c6	28		plp				plp 						; check if DOKE (carry was clear)
.14c7	b0 05		bcs $14ce			bcs 	_CVRExit
.14c9	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.14cc	95 50		sta $50,x			sta 	esInt1,x
.14ce					_CVRExit:
.14ce	8a		txa				txa 						; return X position.
.14cf	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.14d0					section_end_extension:
.14d0					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.14d0					floatingpointHandler:
.14d0	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.14d2	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: basic.asm

.14d5					section_end_floatingpoint:
.14d5					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.14d5					ColdStartEntry:
.14d5	a2 ff		ldx #$ff			ldx 	#$FF
.14d7	9a		txs				txs
.14d8	a2 02		ldx #$02		ldx	#2
.14da	20 64 11	jsr $1164		jsr	deviceHandler
.14dd	a0 ff		ldy #$ff			ldy 	#255
.14df					_CSBanner:
.14df	c8		iny				iny
.14e0	b9 06 15	lda $1506,y			lda 	Intro,y
.14e3	f0 14		beq $14f9			beq 	_CSStart
.14e5	c9 08		cmp #$08			cmp 	#8
.14e7	90 08		bcc $14f1			bcc 	_CSInk
.14e9	a2 16		ldx #$16		ldx	#22
.14eb	20 64 11	jsr $1164		jsr	deviceHandler
.14ee	4c df 14	jmp $14df			jmp 	_CSBanner
.14f1					_CSInk:
.14f1	a2 08		ldx #$08		ldx	#8
.14f3	20 64 11	jsr $1164		jsr	deviceHandler
.14f6	4c df 14	jmp $14df			jmp 	_CSBanner
.14f9					_CSStart:
.14f9	a2 10		ldx #$10		ldx	#16
.14fb	20 af 2c	jsr $2caf		jsr	mainHandler
.14fe	a2 02		ldx #$02		ldx	#2
.1500	20 af 2c	jsr $2caf		jsr	mainHandler
.1503	4c 1a 16	jmp $161a			jmp 	WarmStartEntry
>1506	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>150e	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>151e	20 2a 2a 2a 0d 0d
>1524	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>152c	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>153c	32 30 32 31 0d 0d
>1542	02 42 61 73 69 63 20				.text 	2,"Basic "
>1549	30 2e 31 34					.text "0.14"
>154d	20 28						.text 	" ("
>154f	31 32 2d 4d 61 72 2d 32				.text "12-Mar-21"
>1557	31
>1558	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.155c					DeleteLine:
.155c	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.155f	85 2a		sta $2a				sta 	temp0
.1561	ad c9 0a	lda $0ac9			lda 	basePage+1
.1564	85 2b		sta $2b				sta 	temp0+1
.1566	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1568	a5 48		lda $48				lda 	esInt0
.156a	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.156c	d0 07		bne $1575			bne 	_DLNext
.156e	c8		iny				iny
.156f	a5 50		lda $50				lda 	esInt1
.1571	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1573	f0 0a		beq $157f			beq 	_DLFound
.1575	20 9d 15	jsr $159d	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1578	d0 ec		bne $1566			bne 	_DLLoop
.157a	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.157c	b1 2a		lda ($2a),y			lda 	(temp0),y
.157e	60		rts				rts
.157f					_DLFound:
.157f	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.1581	b1 2a		lda ($2a),y			lda 	(temp0),y
.1583	a8		tay				tay
.1584	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1586					_DLCopyDown:
.1586	b1 2a		lda ($2a),y			lda 	(temp0),y
.1588	81 2a		sta ($2a,x)			sta 	(temp0,x)
.158a	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.158c	d0 02		bne $1590			bne 	_DLNoCarry
.158e	e6 2b		inc $2b				inc 	temp0+1
.1590					_DLNoCarry:
.1590	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1592	c5 35		cmp $35				cmp 	lowMemory
.1594	d0 f0		bne $1586			bne 	_DLCopyDown
.1596	a5 2b		lda $2b				lda 	temp0+1
.1598	c5 36		cmp $36				cmp 	lowMemory+1
.159a	d0 ea		bne $1586			bne 	_DLCopyDown
.159c	60		rts				rts
.159d					IAdvanceTemp0:
.159d	84 32		sty $32				sty 	tempShort
.159f	18		clc				clc
.15a0	a0 00		ldy #$00			ldy 	#0
.15a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.15a4	65 2a		adc $2a				adc 	temp0
.15a6	85 2a		sta $2a				sta 	temp0
.15a8	90 02		bcc $15ac			bcc 	_IATNoCarry
.15aa	e6 2b		inc $2b				inc 	temp0+1
.15ac					_IATNoCarry:
.15ac	b1 2a		lda ($2a),y			lda 	(temp0),y
.15ae	a4 32		ldy $32				ldy 	tempShort
.15b0	c9 00		cmp #$00			cmp		#0
.15b2	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.15b3					InsertLine:
.15b3	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.15b6	85 2a		sta $2a				sta 	temp0
.15b8	ad c9 0a	lda $0ac9			lda 	basePage+1
.15bb	85 2b		sta $2b				sta 	temp0+1
.15bd					_ILLoop:
.15bd	a0 01		ldy #$01			ldy 	#1
.15bf	b1 2a		lda ($2a),y			lda 	(temp0),y
.15c1	c5 48		cmp $48				cmp 	esInt0
.15c3	c8		iny				iny
.15c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.15c6	e5 50		sbc $50				sbc 	esInt1
.15c8	b0 05		bcs $15cf			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.15ca	20 9d 15	jsr $159d			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.15cd	d0 ee		bne $15bd			bne 	_ILLoop
.15cf					_ILFound:
.15cf	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.15d1	85 2c		sta $2c				sta 	temp1
.15d3	a5 36		lda $36				lda 	lowMemory+1
.15d5	85 2d		sta $2d				sta 	temp1+1
.15d7	ad 1d 0d	lda $0d1d			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.15da	18		clc				clc
.15db	69 03		adc #$03			adc 	#3
.15dd	a8		tay				tay
.15de	a2 00		ldx #$00			ldx 	#0
.15e0	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.15e2	91 2c		sta ($2c),y			sta 	(temp1),y
.15e4	a5 2c		lda $2c				lda 	temp1
.15e6	c5 2a		cmp $2a				cmp 	temp0
.15e8	d0 06		bne $15f0			bne 	_ILMNext
.15ea	a5 2d		lda $2d				lda 	temp1+1
.15ec	c5 2b		cmp $2b				cmp 	temp0+1
.15ee	f0 0b		beq $15fb			beq 	_ILMCopy
.15f0					_ILMNext:
.15f0	a5 2c		lda $2c				lda 	temp1
.15f2	d0 02		bne $15f6			bne 	_ILNoBorrow
.15f4	c6 2d		dec $2d				dec 	temp1+1
.15f6					_ILNoBorrow:
.15f6	c6 2c		dec $2c				dec 	temp1
.15f8	4c e0 15	jmp $15e0			jmp 	_ILMove
.15fb					_ILMCopy:
.15fb	98		tya				tya 								; Y is the offset of the new line.
.15fc	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.15fe	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1600	a5 48		lda $48				lda 	esInt0
.1602	91 2a		sta ($2a),y			sta 	(temp0),y
.1604	c8		iny				iny
.1605	a5 50		lda $50				lda 	esInt1
.1607	91 2a		sta ($2a),y			sta 	(temp0),y
.1609	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.160b					_ILMCopy2:
.160b	b1 28		lda ($28),y			lda 	(codePtr),y
.160d	c8		iny				iny
.160e	c8		iny				iny
.160f	c8		iny				iny
.1610	91 2a		sta ($2a),y			sta 	(temp0),y
.1612	88		dey				dey
.1613	88		dey				dey
.1614	cc 1d 0d	cpy $0d1d			cpy 	tokenBufferIndex
.1617	d0 f2		bne $160b			bne 	_ILMCopy2
.1619	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.161a					WarmStartEntry:
.161a	a2 ff		ldx #$ff			ldx 	#$FF
.161c	9a		txs				txs
.161d	a9 02		lda #$02			lda 	#2							; green text.
.161f	a2 08		ldx #$08		ldx	#8
.1621	20 64 11	jsr $1164		jsr	deviceHandler
.1624	a2 0c		ldx #$0c		ldx	#12
.1626	20 64 11	jsr $1164		jsr	deviceHandler
.1629	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.162b	85 28		sta $28				sta 	codePtr
.162d	a5 2b		lda $2b				lda 	temp0+1
.162f	85 29		sta $29				sta 	codePtr+1
.1631	a2 04		ldx #$04		ldx	#4
.1633	20 64 11	jsr $1164		jsr	deviceHandler
.1636	a2 06		ldx #$06		ldx	#6
.1638	20 4b 36	jsr $364b		jsr	tokeniserHandler
.163b	90 25		bcc $1662			bcc 	WSEError 					; failed.
.163d	a9 1a		lda #$1a			lda 	#(tokenHeader) & $FF
.163f	85 28		sta $28				sta 	codePtr
.1641	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1643	85 29		sta $29				sta 	1+(codePtr)
.1645	ad 1d 0c	lda $0c1d			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1648	c9 80		cmp #$80			cmp 	#$80
.164a	f0 ce		beq $161a			beq 	WarmStartEntry
.164c	29 c0		and #$c0			and 	#$C0						; does it start with a number
.164e	c9 40		cmp #$40			cmp 	#$40
.1650	f0 15		beq $1667			beq 	HasLineNumber
.1652	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1654	8d 1a 0c	sta $0c1a			sta 	tokenHeader 				; fake program line.
.1657	8d 1b 0c	sta $0c1b			sta 	tokenHeader+1
.165a	8d 1c 0c	sta $0c1c			sta 	tokenHeader+2
.165d	a2 12		ldx #$12		ldx	#18
.165f	20 af 2c	jsr $2caf		jsr	mainHandler
.1662					WSEError:
.1662	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1664	20 85 11	jsr $1185		jsr	errorHandler
.1667					HasLineNumber:
.1667	a0 03		ldy #$03			ldy 	#3 							; get line number
.1669	a9 00		lda #$00			lda 	#0
.166b	a2 06		ldx #$06		ldx	#6
.166d	20 af 2c	jsr $2caf		jsr	mainHandler
.1670	a5 58		lda $58				lda 	esInt2		 				; check in range.
.1672	05 60		ora $60				ora 	esInt3
.1674	d0 ec		bne $1662			bne 	WSEError
.1676	98		tya				tya 								; make codePtr point to code after the line number.
.1677	18		clc				clc
.1678	65 28		adc $28				adc 	codePtr
.167a	85 28		sta $28				sta 	codePtr
.167c	90 02		bcc $1680			bcc		_HLNNoCarry
.167e	e6 29		inc $29				inc 	codePtr+1
.1680					_HLNNoCarry:
.1680	98		tya				tya 								; subtract that offset from the code buffer index
.1681	38		sec				sec
.1682	49 ff		eor #$ff			eor 	#$FF
.1684	6d 1d 0d	adc $0d1d			adc 	tokenBufferIndex
.1687	18		clc				clc 								; add space allowing for header & $80 trailer
.1688	69 04		adc #$04			adc 	#4
.168a	8d 1d 0d	sta $0d1d			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.168d	20 5c 15	jsr $155c			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1690					_HLNNoDelete:
.1690	ad 1d 0d	lda $0d1d			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1693	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1695	f0 03		beq $169a			beq 	_HLMEditDone
.1697	20 b3 15	jsr $15b3			jsr 	InsertLine 					; insert the line in
.169a					_HLMEditDone:
.169a	a2 02		ldx #$02		ldx	#2
.169c	20 af 2c	jsr $2caf		jsr	mainHandler
.169f	4c 1a 16	jmp $161a			jmp 	WarmStartEntry

;******  Return to file: interaction/interaction.asm

.16a2					interactionHandler:
.16a2	7c a5 16	jmp ($16a5,x)			jmp 	(interactionVectors,x)
.16a5					interactionVectors:
>16a5	d5 14					.word ColdStartEntry       ; index 0
>16a7	1a 16					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.16a9					section_end_interaction:
.16a9					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.16a9					Command_Assert:
.16a9	20 be 25	jsr $25be			jsr 	EvaluateRootInteger 		; what is being asserted.
.16ac	20 74 2b	jsr $2b74			jsr 	MInt32Zero 					; is it true ?
.16af	f0 01		beq $16b2			beq 	_CAError
.16b1	60		rts				rts
.16b2					_CAError:
.16b2	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.16b4	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.16b7					CommandClear:
.16b7					XCommandClear:
.16b7	98		tya				tya
.16b8	48		pha				pha
.16b9	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.16bc	85 33		sta $33				sta 	highMemory
.16be	ad cd 0a	lda $0acd			lda 	endMemory+1
.16c1	85 34		sta $34				sta 	highMemory+1
.16c3	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.16c6	85 2a		sta $2a				sta 	temp0
.16c8	ad c9 0a	lda $0ac9			lda 	basePage+1
.16cb	85 2b		sta $2b				sta 	temp0+1
.16cd					_CCFindEnd:
.16cd	a0 00		ldy #$00			ldy 	#0
.16cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.16d1	f0 0c		beq $16df			beq 	_CCFoundEnd 				; offset zero is end.
.16d3	18		clc				clc
.16d4	65 2a		adc $2a				adc 	temp0 						; move to next line
.16d6	85 2a		sta $2a				sta 	temp0
.16d8	90 f3		bcc $16cd			bcc 	_CCFindEnd
.16da	e6 2b		inc $2b				inc 	temp0+1
.16dc	4c cd 16	jmp $16cd			jmp 	_CCFindEnd
.16df					_CCFoundEnd:
.16df	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.16e1	85 35		sta $35				sta 	lowMemory
.16e3	a5 2b		lda $2b				lda 	temp0+1
.16e5	85 36		sta $36				sta 	lowMemory+1
.16e7	18		clc				clc 								; put temp0+1 in endProgram
.16e8	a5 2a		lda $2a				lda 	temp0
.16ea	69 01		adc #$01			adc 	#1
.16ec	8d ca 0a	sta $0aca			sta 	endProgram
.16ef	a5 2b		lda $2b				lda 	temp0+1
.16f1	69 00		adc #$00			adc 	#0
.16f3	8d cb 0a	sta $0acb			sta 	endProgram+1
.16f6	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.16f8	20 0c 17	jsr $170c			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.16fb	20 4e 2c	jsr $2c4e			jsr 	RSReset 					; reset the return stack.
.16fe	a2 04		ldx #$04		ldx	#4
.1700	20 46 39	jsr $3946		jsr	variableHandler
.1703	20 74 1f	jsr $1f74			jsr 	ScanProc 					; scan for procedures
.1706	20 27 1d	jsr $1d27			jsr 	CommandRestore 				; do a restore
.1709	68		pla				pla
.170a	a8		tay				tay
.170b	60		rts				rts
.170c					AdvanceLowMemoryByte:
.170c	18		clc				clc
.170d	65 35		adc $35				adc 	lowMemory
.170f	85 35		sta $35				sta 	lowMemory
.1711	90 02		bcc $1715			bcc 	_ALMBExit
.1713	e6 36		inc $36				inc 	lowMemory+1
.1715					_ALMBExit:
.1715	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1716					Command_Dim:
.1716	a2 02		ldx #$02		ldx	#2
.1718	20 46 39	jsr $3946		jsr	variableHandler
.171b	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.171d	c8		iny				iny
.171e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1720	f0 f4		beq $1716			beq 	Command_Dim
.1722	88		dey				dey 								; unpick get
.1723	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.1724					Command_FOR:
.1724	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1726	a2 0b		ldx #$0b			ldx 	#11
.1728	20 5c 2c	jsr $2c5c			jsr 	RSClaim
.172b	20 25 19	jsr $1925			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.172e	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1730	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1732	d0 4c		bne $1780			bne 	_CFType
.1734	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1736	20 b5 2b	jsr $2bb5			jsr 	CheckToken
.1739	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.173b	20 c0 25	jsr $25c0			jsr 	EvaluateInteger				; get terminal value in stack 1
.173e	98		tya				tya
.173f	48		pha				pha
.1740	a0 04		ldy #$04			ldy 	#4
.1742	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1744	91 78		sta ($78),y			sta 	(rsPointer),y
.1746	c8		iny				iny
.1747	a5 50		lda $50				lda		esInt1
.1749	91 78		sta ($78),y			sta 	(rsPointer),y
.174b	c8		iny				iny
.174c	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.174e	91 78		sta ($78),y			sta 	(rsPointer),y
.1750	c8		iny				iny
.1751	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1753	91 78		sta ($78),y			sta 	(rsPointer),y
.1755	c8		iny				iny
.1756	a5 51		lda $51				lda		esInt1+1
.1758	91 78		sta ($78),y			sta 	(rsPointer),y
.175a	c8		iny				iny
.175b	a5 59		lda $59				lda		esInt2+1
.175d	91 78		sta ($78),y			sta 	(rsPointer),y
.175f	c8		iny				iny
.1760	a5 61		lda $61				lda		esInt3+1
.1762	91 78		sta ($78),y			sta 	(rsPointer),y
.1764	68		pla				pla
.1765	a8		tay				tay
.1766	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1768	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.176a	d0 0e		bne $177a			bne 	_CFDone
.176c	c8		iny				iny									; skip over step.
.176d	20 c0 25	jsr $25c0			jsr 	EvaluateInteger 			; get step
.1770	98		tya				tya
.1771	48		pha				pha
.1772	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1774	a0 06		ldy #$06			ldy 	#6
.1776	91 78		sta ($78),y			sta 	(rsPointer),y
.1778	68		pla				pla
.1779	a8		tay				tay
.177a					_CFDone:
.177a	a9 01		lda #$01			lda 	#1
.177c	20 88 2c	jsr $2c88			jsr 	RSSavePosition 				; save position.
.177f	60		rts				rts
.1780					_CFType:
.1780	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1782	20 85 11	jsr $1185		jsr	errorHandler
.1785					Command_NEXT:
.1785	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1787	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1789	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.178b	f0 05		beq $1792			beq 	_isok
.178d	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.178f	20 85 11	jsr $1185		jsr	errorHandler
.1792					_isok:
.1792	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1794	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1796	b0 18		bcs $17b0			bcs 	_CNNoIndex
.1798	a2 00		ldx #$00			ldx 	#0 							; start on stack
.179a	20 f3 25	jsr $25f3			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.179d	98		tya				tya
.179e	48		pha				pha
.179f	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.17a1	b1 78		lda ($78),y			lda 	(rsPointer),y
.17a3	d5 48		cmp $48,x			cmp 	esInt0,x
.17a5	d0 76		bne $181d			bne 	_CNBadIndex
.17a7	c8		iny				iny
.17a8	b1 78		lda ($78),y			lda 	(rsPointer),y
.17aa	d5 50		cmp $50,x			cmp 	esInt1,x
.17ac	d0 6f		bne $181d			bne 	_CNBadIndex
.17ae	68		pla				pla
.17af	a8		tay				tay
.17b0					_CNNoIndex:
.17b0	98		tya				tya
.17b1	48		pha				pha
.17b2	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.17b4	b1 78		lda ($78),y			lda 	(rsPointer),y
.17b6	85 2a		sta $2a				sta 	temp0
.17b8	c8		iny				iny
.17b9	b1 78		lda ($78),y			lda 	(rsPointer),y
.17bb	85 2b		sta $2b				sta 	temp0+1
.17bd	c8		iny				iny
.17be	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.17c0	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.17c2	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.17c4	10 01		bpl $17c7			bpl 	_CNSignX
.17c6	ca		dex				dex  								; X = $FF
.17c7					_CNSignX:
.17c7	18		clc				clc 								; add to the LSB
.17c8	a0 00		ldy #$00			ldy 	#0
.17ca	71 2a		adc ($2a),y			adc 	(temp0),y
.17cc	91 2a		sta ($2a),y			sta 	(temp0),y
.17ce					_CNPropogate:
.17ce	c8		iny				iny  								; add the sign extended in X to the rest.
.17cf	8a		txa				txa
.17d0	71 2a		adc ($2a),y			adc 	(temp0),y
.17d2	91 2a		sta ($2a),y			sta 	(temp0),y
.17d4	c8		iny				iny
.17d5	8a		txa				txa
.17d6	71 2a		adc ($2a),y			adc 	(temp0),y
.17d8	91 2a		sta ($2a),y			sta 	(temp0),y
.17da	c8		iny				iny
.17db	8a		txa				txa
.17dc	71 2a		adc ($2a),y			adc 	(temp0),y
.17de	91 2a		sta ($2a),y			sta 	(temp0),y
.17e0	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.17e1	a5 78		lda $78				lda 	rsPointer
.17e3	69 07		adc #$07			adc 	#7
.17e5	85 2c		sta $2c				sta 	temp1
.17e7	a9 00		lda #$00			lda 	#0
.17e9	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.17eb	a8		tay				tay 								; and clear the Y register again.
.17ec	65 79		adc $79				adc 	rsPointer+1
.17ee	85 2d		sta $2d				sta 	temp1+1
.17f0	38		sec				sec 								; calculate current - limit oring interim values.
.17f1	20 29 18	jsr $1829			jsr 	_CNCompare 					; each of these does a byte.
.17f4	20 29 18	jsr $1829			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.17f7	20 29 18	jsr $1829			jsr 	_CNCompare 					; and the carry of the subtraction.
.17fa	20 29 18	jsr $1829			jsr 	_CNCompare
.17fd	50 02		bvc $1801			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.17ff	49 80		eor #$80			eor 	#$80
.1801					_CNNoOverflow:
.1801	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.1803	30 1d		bmi $1822			bmi 	_CNCheckDownto
.1805	c9 00		cmp #$00			cmp 	#0
.1807	30 0c		bmi $1815			bmi 	_CNLoopRound 				; loop round if < =
.1809	a5 2e		lda $2e				lda 	temp2
.180b	f0 08		beq $1815			beq 	_CNLoopRound
.180d					_CNLoopExit:
.180d	68		pla				pla
.180e	a8		tay				tay
.180f	a9 0b		lda #$0b			lda 	#11
.1811	20 7e 2c	jsr $2c7e			jsr 	RSFree
.1814	60		rts				rts
.1815					_CNLoopRound:
.1815	68		pla				pla
.1816	a8		tay				tay
.1817	a9 01		lda #$01			lda 	#1
.1819	20 9b 2c	jsr $2c9b			jsr 	RSLoadPosition				; go back to the loop top
.181c	60		rts				rts
.181d					_CNBadIndex:
.181d	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.181f	20 85 11	jsr $1185		jsr	errorHandler
.1822					_CNCheckDownto:
.1822	c9 00		cmp #$00			cmp 	#0
.1824	10 ef		bpl $1815			bpl 	_CNLoopRound
.1826	4c 0d 18	jmp $180d			jmp 	_CNLoopExit
.1829					_CNCompare:
.1829	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.182b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.182d	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.182f	85 2e		sta $2e				sta 	temp2
.1831	c8		iny				iny
.1832	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1833					CommandIf:
.1833	20 be 25	jsr $25be			jsr 	EvaluateRootInteger 		; get what's being tested.
.1836	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1838	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.183a	f0 04		beq $1840			beq 	_IfSimple
.183c	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.183e	d0 1b		bne $185b			bne 	_IfComplex
.1840					_IfSimple:
.1840	20 74 2b	jsr $2b74			jsr 	MInt32Zero					; check if TOS zero
.1843	f0 10		beq $1855			beq 	_IfEOL 						; go to next line.
.1845	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1847	c8		iny				iny
.1848	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.184a	f0 0c		beq $1858			beq 	_IfGoto 					; do the Goto code
.184c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.184e	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1850	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1852	f0 04		beq $1858			beq 	_IfGoto
.1854	60		rts				rts 								; else continue on this line.
.1855					_IfEOL:
.1855	4c e9 1f	jmp $1fe9			jmp 	AdvanceNextLine 			; go to next line
.1858					_IfGoto:
.1858	4c 5e 20	jmp $205e			jmp 	CommandGoto
.185b					_IfComplex:
.185b	20 74 2b	jsr $2b74			jsr 	MInt32Zero 					; is it true ?
.185e	f0 01		beq $1861			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1860	60		rts				rts 								; else continue.
.1861					_IFSkip:
.1861	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1863	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1865	4c da 2b	jmp $2bda			jmp		ScanForward
.1868					Command_ELSE:
.1868	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.186a	8a		txa				txa
.186b	4c da 2b	jmp $2bda			jmp		ScanForward
.186e					Command_ENDIF:
.186e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be2					InputBuffer:
>0be2							.fill 	MaxInputSize+1
.186f					Command_Input:
.186f	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1871	c8		iny				iny
.1872	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1874	f0 f9		beq $186f			beq 	Command_Input
.1876	88		dey				dey 							; undo consume
.1877	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1879	f0 54		beq $18cf			beq 	_CIExit 				; : or EOL, exit
.187b	c9 80		cmp #$80			cmp 	#TOK_EOL
.187d	f0 50		beq $18cf			beq 	_CIExit
.187f	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1881	90 12		bcc $1895			bcc 	_CIVariable
.1883	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1885	d0 43		bne $18ca			bne 	_CISyntax
.1887	a2 00		ldx #$00			ldx 	#0
.1889	20 b5 25	jsr $25b5			jsr 	EvaluateString 			; evaluate and print string
.188c	20 9a 19	jsr $199a			jsr 	TOSToTemp0
.188f	20 49 1c	jsr $1c49			jsr 	PrintString
.1892	4c 6f 18	jmp $186f			jmp 	Command_Input
.1895					_CIVariable:
.1895	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1897	20 f3 25	jsr $25f3			jsr 	EvaluateReference  		; this is where its going
.189a					_CIRetry:
.189a	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.189c	a2 14		ldx #$14		ldx	#20
.189e	20 64 11	jsr $1164		jsr	deviceHandler
.18a1	98		tya				tya
.18a2	48		pha				pha
.18a3	20 e3 18	jsr $18e3			jsr 	InputString 			; input a string (manually)
.18a6	a2 01		ldx #$01			ldx 	#1
.18a8	20 d0 18	jsr $18d0			jsr 	BufferToStackX 			; make stack,x ref input string.
.18ab	a5 40		lda $40				lda 	esType 					; if target type numeric
.18ad	29 40		and #$40			and 	#$40 					; then convert to number
.18af	d0 11		bne $18c2			bne 	_CIWrite
.18b1	a2 01		ldx #$01			ldx 	#1
.18b3	20 9a 19	jsr $199a			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.18b6	a9 0a		lda #$0a			lda 	#10
.18b8	20 bb 29	jsr $29bb			jsr 	MInt32FromString 		; convert it back from a string.
.18bb	68		pla				pla
.18bc	a8		tay				tay
.18bd	b0 03		bcs $18c2			bcs 	_CIWrite 				; successfully converted.
.18bf	18		clc				clc 							; default fail FP conversion
.18c0	90 d8		bcc $189a			bcc		_CIRetry				; failed, try again.
.18c2					_CIWrite:
.18c2	a2 00		ldx #$00			ldx 	#0
.18c4	20 38 19	jsr $1938			jsr 	WriteValue
.18c7	4c 6f 18	jmp $186f			jmp 	Command_Input
.18ca					_CISyntax:
.18ca	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18cc	20 85 11	jsr $1185		jsr	errorHandler
.18cf					_CIExit:
.18cf	60		rts				rts
.18d0					BufferToStackX:
.18d0	a9 e2		lda #$e2			lda 	#InputBuffer & $FF
.18d2	95 48		sta $48,x			sta 	esInt0,x
.18d4	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.18d6	95 50		sta $50,x			sta 	esInt1,x
.18d8	a9 00		lda #$00			lda 	#0
.18da	95 58		sta $58,x			sta 	esInt2,x
.18dc	95 60		sta $60,x			sta 	esInt3,x
.18de	a9 40		lda #$40			lda 	#$40
.18e0	95 40		sta $40,x			sta 	esType,x
.18e2	60		rts				rts
.18e3					InputString:
.18e3	a9 00		lda #$00			lda 	#0
.18e5	8d e2 0b	sta $0be2			sta 	InputBuffer
.18e8					_InputLoop:
.18e8	a2 00		ldx #$00		ldx	#0
.18ea	20 64 11	jsr $1164		jsr	deviceHandler
.18ed	a2 0a		ldx #$0a		ldx	#10
.18ef	20 64 11	jsr $1164		jsr	deviceHandler
.18f2	c9 00		cmp #$00			cmp 	#0
.18f4	f0 f2		beq $18e8			beq 	_InputLoop
.18f6	c9 08		cmp #$08			cmp 	#8
.18f8	f0 19		beq $1913			beq 	_InputBackspace
.18fa	c9 0d		cmp #$0d			cmp 	#13
.18fc	f0 21		beq $191f			beq 	_InputExit
.18fe	ae e2 0b	ldx $0be2			ldx 	InputBuffer
.1901	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1903	f0 e3		beq $18e8			beq 	_InputLoop
.1905	9d e3 0b	sta $0be3,x			sta 	InputBuffer+1,x 		; write char
.1908	ee e2 0b	inc $0be2			inc 	InputBuffer 			; advance count.
.190b					_InputPrintLoop:
.190b	a2 14		ldx #$14		ldx	#20
.190d	20 64 11	jsr $1164		jsr	deviceHandler
.1910	4c e8 18	jmp $18e8			jmp	 	_InputLoop
.1913					_InputBackspace:
.1913	ad e2 0b	lda $0be2			lda 	InputBuffer 			; at start
.1916	f0 d0		beq $18e8			beq 	_InputLoop
.1918	ce e2 0b	dec $0be2			dec 	InputBuffer
.191b	a9 08		lda #$08			lda 	#8
.191d	d0 ec		bne $190b			bne 	_InputPrintLoop
.191f					_InputExit:
.191f	a2 04		ldx #$04		ldx	#4
.1921	20 64 11	jsr $1164		jsr	deviceHandler
.1924	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1925					CommandLet:
.1925	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1927	20 f3 25	jsr $25f3			jsr 	EvaluateReference
.192a	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.192c	20 b5 2b	jsr $2bb5			jsr 	CheckToken
.192f	e8		inx				inx 								; do RHS
.1930	20 a1 25	jsr $25a1			jsr 	Evaluate 					; evaluate and dereference
.1933	ca		dex				dex
.1934	20 38 19	jsr $1938			jsr 	WriteValue 					; write it out
.1937	60		rts				rts
.1938					WriteValue:
.1938	98		tya				tya
.1939	48		pha				pha
.193a	20 9a 19	jsr $199a			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.193d	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.193f	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1941	29 40		and #$40			and 	#$40
.1943	d0 50		bne $1995			bne		_WVType
.1945	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1947	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1949	29 40		and #$40			and 	#$40
.194b	d0 1f		bne $196c			bne 	_WVCopyString
.194d	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.194f	15 41		ora $41,x			ora 	esType+1,x
.1951	4a		lsr a				lsr 	a
.1952	90 22		bcc $1976			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1954	b5 40		lda $40,x			lda 	esType,x
.1956	4a		lsr a				lsr 	a
.1957	90 3c		bcc $1995			bcc 	_WVType
.1959	e8		inx				inx 								; force the value being written to be a float.
.195a	20 0b 21	jsr $210b			jsr 	BPMakeFloat
.195d	ca		dex				dex
.195e	20 9a 19	jsr $199a			jsr 	TOSToTemp0 					; set Temp0 to write address
.1961	e8		inx				inx
.1962	8a		txa				txa
.1963	a2 20		ldx #$20		ldx	#32
.1965	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.1968	aa		tax				tax
.1969	4c 92 19	jmp $1992			jmp 	_WVCopyExit
.196c					_WVCopyString:
.196c	8a		txa				txa
.196d	a2 0e		ldx #$0e		ldx	#14
.196f	20 65 2f	jsr $2f65		jsr	stringHandler
.1972	aa		tax				tax
.1973	4c 92 19	jmp $1992			jmp 	_WVCopyExit
.1976					_WVCopyData4:
.1976	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1978	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.197a	d0 10		bne $198c			bne 	_WVCopyData1
.197c	a0 03		ldy #$03			ldy 	#3
.197e	b5 61		lda $61,x			lda 	esInt3+1,x
.1980	91 2a		sta ($2a),y			sta 	(temp0),y
.1982	88		dey				dey
.1983	b5 59		lda $59,x			lda 	esInt2+1,x
.1985	91 2a		sta ($2a),y			sta 	(temp0),y
.1987	88		dey				dey
.1988	b5 51		lda $51,x			lda 	esInt1+1,x
.198a	91 2a		sta ($2a),y			sta 	(temp0),y
.198c					_WVCopyData1:
.198c	a0 00		ldy #$00			ldy 	#0
.198e	b5 49		lda $49,x			lda 	esInt0+1,x
.1990	91 2a		sta ($2a),y			sta 	(temp0),y
.1992					_WVCopyExit:
.1992	68		pla				pla
.1993	a8		tay				tay
.1994	60		rts				rts
.1995					_WVType:
.1995	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1997	20 85 11	jsr $1185		jsr	errorHandler
.199a					TOSToTemp0:
.199a	b5 48		lda $48,x			lda 	esInt0,x
.199c	85 2a		sta $2a				sta 	temp0
.199e	b5 50		lda $50,x			lda 	esInt1,x
.19a0	85 2b		sta $2b				sta 	temp0+1
.19a2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.19a3					CommandList:
.19a3	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.19a5	20 4d 2b	jsr $2b4d			jsr 	MInt32False
.19a8	e8		inx				inx
.19a9	20 49 2b	jsr $2b49			jsr 	MInt32True
.19ac	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.19ae	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.19b0	f0 15		beq $19c7			beq 	_CLEndLine
.19b2	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.19b4	30 1b		bmi $19d1			bmi 	_CLDoListing 				; do the whole lot.
.19b6	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.19b8	20 c0 25	jsr $25c0			jsr 	EvaluateInteger
.19bb	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.19bd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.19bf	f0 06		beq $19c7			beq 	_CLEndLine
.19c1	20 8b 2a	jsr $2a8b			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.19c4	4c d1 19	jmp $19d1			jmp 	_CLDoListing 				; own e.g. list 1100
.19c7					_CLEndLine:
.19c7	c8		iny				iny 								; skip comma
.19c8	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.19ca	30 05		bmi $19d1			bmi 	_CLDoListing
.19cc	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.19ce	20 c0 25	jsr $25c0			jsr 	EvaluateInteger				; get end
.19d1					_CLDoListing:
.19d1	20 0f 1e	jsr $1e0f			jsr 	ResetCodeAddress 			; back to the start.
.19d4					_CLCheckLoop:
.19d4	a2 00		ldx #$00		ldx	#0
.19d6	20 64 11	jsr $1164		jsr	deviceHandler
.19d9	a0 00		ldy #$00			ldy 	#0							; check end.
.19db	b1 28		lda ($28),y			lda 	(codePtr),y
.19dd	f0 26		beq $1a05			beq 	_CLEnd
.19df	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.19e1	20 08 1a	jsr $1a08			jsr 	CLCompareLineTOS
.19e4	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.19e6	f0 0d		beq $19f5			beq 	_CLNext
.19e8	e8		inx				inx
.19e9	20 08 1a	jsr $1a08			jsr 	CLCompareLineTOS 			; compare vs higher
.19ec	c9 01		cmp #$01			cmp 	#1
.19ee	f0 05		beq $19f5			beq 	_CLNext
.19f0	a2 02		ldx #$02		ldx	#2
.19f2	20 4b 36	jsr $364b		jsr	tokeniserHandler
.19f5					_CLNext:
.19f5	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.19f7	b1 28		lda ($28),y			lda 	(codePtr),y
.19f9	18		clc				clc
.19fa	65 28		adc $28				adc 	codePtr
.19fc	85 28		sta $28				sta 	codePtr
.19fe	90 d4		bcc $19d4			bcc 	_CLCheckLoop
.1a00	e6 29		inc $29				inc 	codePtr+1
.1a02	4c d4 19	jmp $19d4			jmp 	_CLCheckLoop
.1a05					_CLEnd:
.1a05	4c aa 2c	jmp $2caa			jmp 	WarmStart 					; warm start after list.
.1a08					CLCompareLineTOS:
.1a08	a0 01		ldy #$01			ldy 	#1
.1a0a	b1 28		lda ($28),y			lda 	(codePtr),y
.1a0c	55 48		eor $48,x			eor 	esInt0,x
.1a0e	85 2a		sta $2a				sta 	temp0
.1a10	c8		iny				iny
.1a11	b1 28		lda ($28),y			lda 	(codePtr),y
.1a13	55 50		eor $50,x			eor 	esInt1,x
.1a15	05 2a		ora $2a				ora 	temp0
.1a17	f0 10		beq $1a29			beq 	_CLCLTExit
.1a19	88		dey				dey
.1a1a	b1 28		lda ($28),y			lda 	(codePtr),y
.1a1c	d5 48		cmp $48,x			cmp 	esInt0,x
.1a1e	c8		iny				iny
.1a1f	b1 28		lda ($28),y			lda 	(codePtr),y
.1a21	f5 50		sbc $50,x			sbc 	esInt1,x
.1a23	a9 ff		lda #$ff			lda 	#255
.1a25	90 02		bcc $1a29			bcc 	_CLCLTExit
.1a27	a9 01		lda #$01			lda 	#1
.1a29					_CLCLTExit:
.1a29	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1a2a					CommandLoad:
.1a2a	20 52 1a	jsr $1a52			jsr 	CLSParameters 					; get parameters for load.
.1a2d	08		php				php
.1a2e	a2 0e		ldx #$0e		ldx	#14
.1a30	20 64 11	jsr $1164		jsr	deviceHandler
.1a33	28		plp				plp
.1a34	b0 08		bcs $1a3e			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1a36	20 b7 16	jsr $16b7			jsr 	CommandClear
.1a39	a2 02		ldx #$02		ldx	#2
.1a3b	20 a2 16	jsr $16a2		jsr	interactionHandler
.1a3e					_CLExit
.1a3e	60		rts				rts
.1a3f					CommandSave:
.1a3f	20 52 1a	jsr $1a52			jsr 	CLSParameters					; get parameters for save
.1a42	90 08		bcc $1a4c			bcc 	_CSNoOverrideAddress
.1a44	20 cd 2b	jsr $2bcd			jsr 	CheckComma 						; should be a comma.
.1a47	a2 02		ldx #$02			ldx 	#2
.1a49	20 c0 25	jsr $25c0			jsr 	EvaluateInteger 				; get save end address.
.1a4c					_CSNoOverrideAddress:
.1a4c	a2 18		ldx #$18		ldx	#24
.1a4e	20 64 11	jsr $1164		jsr	deviceHandler
.1a51	60		rts				rts
.1a52					CLSParameters:
.1a52	a2 00		ldx #$00			ldx 	#0 								; string
.1a54	20 b5 25	jsr $25b5			jsr 	EvaluateString
.1a57	e8		inx				inx 									; erase out +1 +2
.1a58	20 4d 2b	jsr $2b4d			jsr 	MInt32False
.1a5b	e8		inx				inx
.1a5c	20 4d 2b	jsr $2b4d			jsr 	MInt32False
.1a5f	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1a62	85 49		sta $49				sta 	esInt0+1
.1a64	ad c9 0a	lda $0ac9			lda 	basePage+1
.1a67	85 51		sta $51				sta 	esInt1+1
.1a69	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1a6c	85 4a		sta $4a				sta 	esInt0+2
.1a6e	ad cb 0a	lda $0acb			lda 	endProgram+1
.1a71	85 52		sta $52				sta 	esInt1+2
.1a73	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1a75	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1a77	d0 08		bne $1a81			bne 	_CLSDefault
.1a79	c8		iny				iny 									; skip comma
.1a7a	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1a7c	20 c0 25	jsr $25c0			jsr 	EvaluateInteger
.1a7f	38		sec				sec
.1a80	60		rts				rts
.1a81					_CLSDefault:
.1a81	18		clc				clc
.1a82	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c03					storeSize:
>0c03							.fill 	1
.1a83					CommandLocal:
.1a83	a2 00		ldx #$00			ldx 	#0
.1a85	20 a1 1a	jsr $1aa1			jsr 	LocaliseVariable 			; localise one.
.1a88					_CLCheckNext:
.1a88	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1a8a	c8		iny				iny
.1a8b	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1a8d	f0 06		beq $1a95			beq 	_CLAssignment
.1a8f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1a91	f0 f0		beq $1a83			beq 	CommandLocal
.1a93	88		dey				dey
.1a94	60		rts				rts
.1a95					_CLAssignment:
.1a95	a2 01		ldx #$01			ldx 	#1
.1a97	20 a1 25	jsr $25a1			jsr 	Evaluate 					; evaluate RHS
.1a9a	ca		dex				dex
.1a9b	20 38 19	jsr $1938			jsr 	WriteValue
.1a9e	4c 88 1a	jmp $1a88			jmp 	_CLCheckNext
.1aa1					LocaliseVariable:
.1aa1	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1aa3	c9 40		cmp #$40			cmp 	#$40
.1aa5	b0 67		bcs $1b0e			bcs 	_LVSyntax
.1aa7	8a		txa				txa 								; get the address of that variable.
.1aa8	a2 00		ldx #$00		ldx	#0
.1aaa	20 46 39	jsr $3946		jsr	variableHandler
.1aad	aa		tax				tax
.1aae	8a		txa				txa
.1aaf	48		pha				pha
.1ab0	98		tya				tya
.1ab1	48		pha				pha
.1ab2	20 9a 19	jsr $199a			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1ab5	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1ab7	0a		asl a				asl 	a
.1ab8	10 16		bpl $1ad0			bpl 	_LVPushNumber
.1aba	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1abc	b1 2a		lda ($2a),y			lda 	(temp0),y
.1abe	c8		iny				iny
.1abf	85 2c		sta $2c				sta 	temp1
.1ac1	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ac3	85 2d		sta $2d				sta 	temp1+1
.1ac5	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1ac7	b1 2c		lda ($2c),y			lda 	(temp1),y
.1ac9	aa		tax				tax 								; into X
.1aca	e8		inx				inx 								; +1 for length.
.1acb	a9 24		lda #$24			lda 	#markerString
.1acd	4c e5 1a	jmp $1ae5			jmp 	_LVWriteFrame
.1ad0					_LVPushNumber:
.1ad0	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1ad2	85 2c		sta $2c				sta 	temp1
.1ad4	a5 2b		lda $2b				lda 	temp0+1
.1ad6	85 2d		sta $2d				sta 	temp1+1
.1ad8	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1ada	4a		lsr a				lsr 	a
.1adb	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1add	a2 04		ldx #$04			ldx 	#VarISize
.1adf	90 04		bcc $1ae5			bcc 	_LVIsInteger
.1ae1	a9 23		lda #$23			lda 	#markerFloat
.1ae3	a2 06		ldx #$06			ldx 	#VarFSize
.1ae5					_LVIsInteger:
.1ae5					_LVWriteFrame:
.1ae5	8e 03 0c	stx $0c03			stx 	storeSize 					; number of bytes to copy from (temp0)
.1ae8	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1ae9	e8		inx				inx
.1aea	e8		inx				inx
.1aeb	20 5c 2c	jsr $2c5c			jsr 	RSClaim 					; create the stack frame.
.1aee	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1af0	a0 01		ldy #$01			ldy 	#1
.1af2	91 78		sta ($78),y			sta 	(rsPointer),y
.1af4	c8		iny				iny
.1af5	a5 2b		lda $2b				lda 	temp0+1
.1af7	91 78		sta ($78),y			sta 	(rsPointer),y
.1af9	a0 00		ldy #$00			ldy 	#0
.1afb					_LVCopyData:
.1afb	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1afd	c8		iny				iny 								; write allowing for the header bit.
.1afe	c8		iny				iny
.1aff	c8		iny				iny
.1b00	91 78		sta ($78),y			sta 	(rsPointer),y
.1b02	88		dey				dey
.1b03	88		dey				dey
.1b04	ce 03 0c	dec $0c03			dec 	storeSize 					; do it storesize times
.1b07	d0 f2		bne $1afb			bne 	_LVCopyData
.1b09	68		pla				pla
.1b0a	a8		tay				tay
.1b0b	68		pla				pla
.1b0c	aa		tax				tax
.1b0d	60		rts				rts
.1b0e					_LVSyntax:
.1b0e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b10	20 85 11	jsr $1185		jsr	errorHandler
.1b13					RestoreLocals:
.1b13	a2 00		ldx #$00			ldx 	#0
.1b15	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1b17	c9 40		cmp #$40			cmp	 	#64
.1b19	90 01		bcc $1b1c			bcc 	_RLocal
.1b1b	60		rts				rts
.1b1c					_RLocal:
.1b1c	8a		txa				txa
.1b1d	48		pha				pha
.1b1e	98		tya				tya
.1b1f	48		pha				pha
.1b20	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1b22	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b24	85 2a		sta $2a				sta 	temp0
.1b26	c8		iny				iny
.1b27	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b29	85 2b		sta $2b				sta 	temp0+1
.1b2b	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1b2d	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b2f	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1b31	f0 28		beq $1b5b			beq 	_RString
.1b33	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1b35	c9 25		cmp #$25			cmp 	#markerInt
.1b37	f0 02		beq $1b3b			beq 	_RIsInteger
.1b39	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1b3b					_RIsInteger:
.1b3b	8a		txa				txa
.1b3c	48		pha				pha
.1b3d	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1b3f					_RCopyBack:
.1b3f	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b41	88		dey				dey
.1b42	88		dey				dey
.1b43	88		dey				dey
.1b44	91 2a		sta ($2a),y			sta 	(temp0),y
.1b46	c8		iny				iny
.1b47	c8		iny				iny
.1b48	c8		iny				iny
.1b49	c8		iny				iny
.1b4a	ca		dex				dex
.1b4b	d0 f2		bne $1b3f			bne 	_RCopyBack
.1b4d	68		pla				pla 								; get size add 3
.1b4e	18		clc				clc
.1b4f	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1b51					_RRestoreAAndLoop:
.1b51	20 7e 2c	jsr $2c7e			jsr 	RSFree
.1b54	68		pla				pla
.1b55	a8		tay				tay
.1b56	68		pla				pla
.1b57	aa		tax				tax
.1b58	4c 13 1b	jmp $1b13			jmp 	RestoreLocals 				; go see if there are any more locals.
.1b5b					_RString:
.1b5b	a2 00		ldx #$00			ldx 	#0
.1b5d	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1b5f	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b61	95 48		sta $48,x			sta 	esInt0,x
.1b63	c8		iny				iny
.1b64	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b66	95 50		sta $50,x			sta 	esInt1,x
.1b68	18		clc				clc
.1b69	a5 78		lda $78				lda 	rsPointer
.1b6b	69 03		adc #$03			adc 	#3
.1b6d	95 49		sta $49,x			sta 	esInt0+1,x
.1b6f	a5 79		lda $79				lda 	rsPointer+1
.1b71	69 00		adc #$00			adc 	#0
.1b73	95 51		sta $51,x			sta 	esInt1+1,x
.1b75	8a		txa				txa
.1b76	a2 0e		ldx #$0e		ldx	#14
.1b78	20 65 2f	jsr $2f65		jsr	stringHandler
.1b7b	a0 03		ldy #$03			ldy 	#3 							; get string length
.1b7d	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b7f	18		clc				clc
.1b80	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1b82	4c 51 1b	jmp $1b51			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1b85					Command_New:
.1b85					Command_XNew:
.1b85	20 0f 1e	jsr $1e0f			jsr 	ResetCodeAddress 			; point to first line
.1b88	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1b8a	98		tya				tya
.1b8b	91 28		sta ($28),y			sta 	(codePtr),y
.1b8d	20 b7 16	jsr $16b7			jsr 	CommandClear 				; clear everything down.
.1b90	4c e3 1f	jmp $1fe3			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1b93					Command_Poke:
.1b93	a9 01		lda #$01			lda 	#1
.1b95	d0 06		bne $1b9d			bne 	PokeGeneral
.1b97					Command_Doke:
.1b97	a9 02		lda #$02			lda 	#2
.1b99	d0 02		bne $1b9d			bne 	PokeGeneral
.1b9b					Command_Loke:
.1b9b	a9 03		lda #$03			lda 	#3
.1b9d					PokeGeneral:
.1b9d	48		pha				pha 								; save id (PDL = 123)
.1b9e	20 be 25	jsr $25be			jsr 	EvaluateRootInteger 		; target address
.1ba1	20 cd 2b	jsr $2bcd			jsr	 	CheckComma
.1ba4	e8		inx				inx
.1ba5	20 c0 25	jsr $25c0			jsr 	EvaluateInteger 			; what value to POKE ?
.1ba8	ca		dex				dex
.1ba9	20 9a 19	jsr $199a			jsr 	TOSToTemp0 					; temp0 points to the target address
.1bac	84 32		sty $32				sty 	tempShort 					; save Y
.1bae	68		pla				pla 								; get copy type (1-3) and dispatch
.1baf	aa		tax				tax
.1bb0	ca		dex				dex
.1bb1	f0 14		beq $1bc7			beq 	_Poke1
.1bb3	ca		dex				dex
.1bb4	f0 0b		beq $1bc1			beq 	_Poke2
.1bb6	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1bb8	a5 61		lda $61				lda 	esInt3+1
.1bba	91 2a		sta ($2a),y			sta 	(temp0),y
.1bbc	88		dey				dey
.1bbd	a5 59		lda $59				lda 	esInt2+1
.1bbf	91 2a		sta ($2a),y			sta 	(temp0),y
.1bc1					_Poke2:
.1bc1	a0 01		ldy #$01			ldy 	#1
.1bc3	a5 51		lda $51				lda 	esInt1+1
.1bc5	91 2a		sta ($2a),y			sta 	(temp0),y
.1bc7					_Poke1:
.1bc7	a0 00		ldy #$00			ldy 	#0
.1bc9	a5 49		lda $49				lda 	esInt0+1
.1bcb	91 2a		sta ($2a),y			sta 	(temp0),y
.1bcd	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1bcf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c04					lastPrintToken:
>0c04							.fill 	1
.1bd0					Command_Print:
.1bd0	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1bd2	8d 04 0c	sta $0c04			sta 	lastPrintToken
.1bd5	88		dey				dey
.1bd6					_PrintLoopSkip:
.1bd6	c8		iny				iny
.1bd7					_PrintLoop:
.1bd7	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1bd9	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1bdb	f0 5b		beq $1c38			beq 	_PrintExit
.1bdd	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1bdf	f0 57		beq $1c38			beq 	_PrintExit
.1be1	8d 04 0c	sta $0c04			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1be4	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1be6	f0 ee		beq $1bd6			beq 	_PrintLoopSkip
.1be8	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1bea	f0 3c		beq $1c28			beq	 	_PrintNewLine
.1bec	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1bee	f0 40		beq $1c30			beq 	_PrintTab
.1bf0	20 9f 25	jsr $259f			jsr 	EvaluateRoot 				; evaluate something at the root
.1bf3	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1bf5	85 2a		sta $2a				sta 	temp0
.1bf7	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1bf9	85 2b		sta $2b				sta 	1+(temp0)
.1bfb	a5 40		lda $40				lda 	esType 						; get type
.1bfd	f0 15		beq $1c14			beq		_PrintInteger
.1bff	4a		lsr a				lsr 	a 							; check for floating point
.1c00	b0 08		bcs $1c0a			bcs 	_PrintFloat
.1c02					_PrintString:
.1c02	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1c04	20 9a 19	jsr $199a			jsr 	TOSToTemp0
.1c07	4c 22 1c	jmp $1c22			jmp 	_PrintTemp0 				; print no leading space.
.1c0a					_PrintFloat:
.1c0a	a9 00		lda #$00			lda 	#0 							; stack level.
.1c0c	a2 14		ldx #$14		ldx	#20
.1c0e	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.1c11	4c 1b 1c	jmp $1c1b			jmp 	_PrintSpaceTemp0
.1c14					_PrintInteger:
.1c14	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1c16	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1c18	20 a3 2a	jsr $2aa3			jsr 	MInt32ToString				; convert to text
.1c1b					_PrintSpaceTemp0:
.1c1b	a9 20		lda #$20			lda 	#32
.1c1d	a2 14		ldx #$14		ldx	#20
.1c1f	20 64 11	jsr $1164		jsr	deviceHandler
.1c22					_PrintTemp0:
.1c22	20 49 1c	jsr $1c49			jsr 	PrintString
.1c25	4c d7 1b	jmp $1bd7			jmp 	_PrintLoop
.1c28					_PrintNewLine:
.1c28	a2 04		ldx #$04		ldx	#4
.1c2a	20 64 11	jsr $1164		jsr	deviceHandler
.1c2d	4c d6 1b	jmp $1bd6			jmp 	_PrintLoopSkip
.1c30					_PrintTab:
.1c30	a2 1a		ldx #$1a		ldx	#26
.1c32	20 64 11	jsr $1164		jsr	deviceHandler
.1c35	4c d6 1b	jmp $1bd6			jmp 	_PrintLoopSkip
.1c38					_PrintExit:
.1c38	ad 04 0c	lda $0c04			lda		lastPrintToken 				; check last token
.1c3b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1c3d	f0 09		beq $1c48			beq 	_PrintExit2
.1c3f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1c41	f0 05		beq $1c48			beq 	_PrintExit2
.1c43	a2 04		ldx #$04		ldx	#4
.1c45	20 64 11	jsr $1164		jsr	deviceHandler
.1c48					_PrintExit2:
.1c48	60		rts				rts
.1c49					PrintString:
.1c49	8a		txa				txa
.1c4a	48		pha				pha
.1c4b	98		tya				tya
.1c4c	48		pha				pha
.1c4d	a0 00		ldy #$00			ldy 	#0							; get length
.1c4f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c51	aa		tax				tax 								; into X
.1c52	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1c54	f0 10		beq $1c66			beq 	_PSExit
.1c56	ca		dex				dex
.1c57	8a		txa				txa
.1c58	48		pha				pha
.1c59	c8		iny				iny
.1c5a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c5c	a2 14		ldx #$14		ldx	#20
.1c5e	20 64 11	jsr $1164		jsr	deviceHandler
.1c61	68		pla				pla
.1c62	aa		tax				tax
.1c63	4c 52 1c	jmp $1c52			jmp 	_PSLoop
.1c66					_PSExit:
.1c66	68		pla				pla
.1c67	a8		tay				tay
.1c68	68		pla				pla
.1c69	aa		tax				tax
.1c6a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c05					paramCount:
>0c05							.fill 	1
.1c6b					CallProc:
.1c6b	20 08 1f	jsr $1f08			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1c6e	48		pha				pha 								; save length on stack
.1c6f	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1c71	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1c73	48		pha				pha
.1c74	a5 2a		lda $2a				lda 	temp0
.1c76	48		pha				pha
.1c77	98		tya				tya 								; calculate Y + length
.1c78	18		clc				clc
.1c79	65 32		adc $32				adc 	tempShort
.1c7b	a8		tay				tay
.1c7c	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1c7e					_CallProcEvalParams:
.1c7e	e8		inx				inx
.1c7f	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1c81	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1c83	f0 0b		beq $1c90			beq 	_CPDoneParams
.1c85	20 a1 25	jsr $25a1			jsr 	Evaluate 					; evaluate a parameter
.1c88	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1c8a	c8		iny				iny
.1c8b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1c8d	f0 ef		beq $1c7e			beq 	_CallProcEvalParams
.1c8f	88		dey				dey 								; undo consumption.
.1c90					_CPDoneParams:
.1c90	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; check closing parenthesis.
.1c93	8e 05 0c	stx $0c05			stx 	paramCount 					; store parameter count+1
.1c96	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1c98	a9 50		lda #$50			lda 	#markerPROC
.1c9a	20 5c 2c	jsr $2c5c			jsr 	RSClaim
.1c9d	a9 01		lda #$01			lda 	#1 							; store return address.
.1c9f	20 88 2c	jsr $2c88			jsr 	RSSavePosition
.1ca2	68		pla				pla 								; get the new code Ptr
.1ca3	85 28		sta $28				sta 	codePtr
.1ca5	68		pla				pla
.1ca6	85 29		sta $29				sta 	codePtr+1
.1ca8	68		pla				pla 								; length of name + 4 is the param start.
.1ca9	18		clc				clc
.1caa	69 04		adc #$04			adc 	#4
.1cac	a8		tay				tay
.1cad	a2 ff		ldx #$ff			ldx 	#$FF
.1caf					_CPLoadParameters:
.1caf	e8		inx				inx 								; point to where the address should be loaded.
.1cb0	ec 05 0c	cpx $0c05			cpx 	paramCount 					; too many parameters in definition ?
.1cb3	f0 1e		beq $1cd3			beq 	_CPParamError
.1cb5	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1cb7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.1cb9	f0 0e		beq $1cc9			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1cbb	20 a1 1a	jsr $1aa1			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1cbe	20 38 19	jsr $1938			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1cc1	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1cc3	c8		iny				iny
.1cc4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1cc6	f0 e7		beq $1caf			beq 	_CPLoadParameters
.1cc8	88		dey				dey 								; no, unconsume and check for )
.1cc9					_CPParamComplete:
.1cc9	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; check )
.1ccc	e8		inx				inx 								; check right number of parameters have been consumed
.1ccd	ec 05 0c	cpx $0c05			cpx 	paramCount
.1cd0	d0 01		bne $1cd3			bne 	_CPParamError
.1cd2	60		rts				rts
.1cd3					_CPParamError:
.1cd3	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1cd5	20 85 11	jsr $1185		jsr	errorHandler
.1cd8					ReturnProc:
.1cd8	20 13 1b	jsr $1b13			jsr 	RestoreLocals 				; get the locals back.
.1cdb	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1cdd	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1cdf	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1ce1	f0 05		beq $1ce8			beq 	_isok
.1ce3	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1ce5	20 85 11	jsr $1185		jsr	errorHandler
.1ce8					_isok:
.1ce8	a9 01		lda #$01			lda 	#1
.1cea	20 9b 2c	jsr $2c9b			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1ced	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1cef	20 7e 2c	jsr $2c7e			jsr 	RSFree
.1cf2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c06					dataPtr:
>0c06							.fill 	2
.0c08					dataIndex:
>0c08							.fill 	1
.1cf3					CommandRead:
.1cf3	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1cf5	20 f3 25	jsr $25f3			jsr 	EvaluateReference
.1cf8	20 39 1d	jsr $1d39			jsr 	SwapDPCP 					; use the data pointer.
.1cfb	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1cfd	c8		iny				iny
.1cfe	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1d00	f0 07		beq $1d09			beq 	_CRInData
.1d02	88		dey				dey
.1d03	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1d05	aa		tax				tax
.1d06	20 da 2b	jsr $2bda			jsr 	ScanForward
.1d09					_CRInData:
.1d09	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1d0b	20 a1 25	jsr $25a1			jsr 	Evaluate
.1d0e	ca		dex				dex 								; and write the value.
.1d0f	20 38 19	jsr $1938			jsr 	WriteValue
.1d12	20 39 1d	jsr $1d39			jsr 	SwapDPCP 					; get the code pointer back.
.1d15	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1d17	c8		iny				iny
.1d18	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1d1a	f0 d7		beq $1cf3			beq 	CommandRead
.1d1c	88		dey				dey
.1d1d	60		rts				rts
.1d1e					CommandData:
.1d1e	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1d20	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1d22	20 da 2b	jsr $2bda			jsr 	ScanForward
.1d25	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1d26	60		rts				rts
.1d27					CommandRestore:
.1d27	ad c8 0a	lda $0ac8			lda 	basePage
.1d2a	8d 06 0c	sta $0c06			sta 	dataPtr
.1d2d	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d30	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1d33	a9 03		lda #$03			lda 	#3
.1d35	8d 08 0c	sta $0c08			sta 	dataIndex
.1d38	60		rts				rts
.1d39					SwapDPCP:
.1d39	8a		txa				txa
.1d3a	48		pha				pha
.1d3b	98		tya				tya 								; swap Y, DataIndex
.1d3c	ac 08 0c	ldy $0c08			ldy 	DataIndex
.1d3f	8d 08 0c	sta $0c08			sta 	DataIndex
.1d42	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1d44	ae 06 0c	ldx $0c06			ldx 	dataptr
.1d47	8d 06 0c	sta $0c06			sta 	dataPtr
.1d4a	86 28		stx $28				stx 	codePtr
.1d4c	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1d4e	ae 07 0c	ldx $0c07			ldx 	dataptr+1
.1d51	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1d54	86 29		stx $29				stx 	codePtr+1
.1d56	68		pla				pla
.1d57	aa		tax				tax
.1d58	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1d59					Command_Rem:
.1d59					Command_Rem2:
.1d59	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1d5b	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1d5d	d0 06		bne $1d65			bne 	_CRNotString
.1d5f	c8		iny				iny
.1d60	98		tya				tya
.1d61	38		sec				sec
.1d62	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1d64	a8		tay				tay
.1d65					_CRNotString:
.1d65	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.1d66					Command_Repeat:
.1d66	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1d68	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1d6a	20 5c 2c	jsr $2c5c			jsr 	RSClaim
.1d6d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1d6f	20 88 2c	jsr $2c88			jsr 	RSSavePosition
.1d72	60		rts				rts
.1d73					Command_Until:
.1d73	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1d75	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1d77	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1d79	f0 05		beq $1d80			beq 	_isok
.1d7b	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.1d7d	20 85 11	jsr $1185		jsr	errorHandler
.1d80					_isok:
.1d80	20 be 25	jsr $25be			jsr 	EvaluateRootInteger 		; at the bottom.
.1d83	20 74 2b	jsr $2b74			jsr 	MInt32Zero					; check if TOS zero
.1d86	d0 06		bne $1d8e			bne 	_CUExit
.1d88	a9 01		lda #$01			lda 	#1
.1d8a	20 9b 2c	jsr $2c9b			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1d8d	60		rts				rts
.1d8e					_CUExit:
.1d8e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1d90	20 7e 2c	jsr $2c7e			jsr 	RSFree
.1d93	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c09					breakCounter:
>0c09								.fill 	1
.0c0a					breakIncrement:
>0c0a								.fill 	1
.1d94					Command_Run:
.1d94					XCommand_Run:
.1d94	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.1d96	9a		txs				txs
.1d97	20 09 1e	jsr $1e09			jsr 	BreakOn 					; turn break on
.1d9a	20 b7 16	jsr $16b7			jsr 	CommandClear 				; clear everything.
.1d9d	20 0f 1e	jsr $1e0f			jsr 	ResetCodeAddress 			; back to the start.
.1da0					Command_RunFrom:
.1da0	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1da2					CRNextInstruction:
.1da2	64 7b		stz $7b				stz 	softMemAlloc+1
.1da4	ad 09 0c	lda $0c09			lda 	breakCounter 				; check for break.
.1da7	6d 0a 0c	adc $0c0a			adc 	breakIncrement
.1daa	8d 09 0c	sta $0c09			sta 	breakCounter
.1dad	90 05		bcc $1db4			bcc 	_CRNoChecks
.1daf	a2 00		ldx #$00		ldx	#0
.1db1	20 64 11	jsr $1164		jsr	deviceHandler
.1db4					_CRNoChecks
.1db4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.1db6	10 1c		bpl $1dd4			bpl 	_CRNotToken
.1db8	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1dba	b0 0c		bcs $1dc8			bcs 	_CRExecute
.1dbc	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1dbe	b0 5c		bcs $1e1c			bcs 	Unimplemented
.1dc0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1dc2	b0 04		bcs $1dc8			bcs 	_CRExecute
.1dc4	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1dc6	b0 16		bcs $1dde			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1dc8					_CRExecute:
.1dc8	c8		iny				iny 								; consume it.
.1dc9	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1dca	aa		tax				tax
.1dcb	20 d1 1d	jsr $1dd1			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1dce	4c a2 1d	jmp $1da2			jmp 	CRNextInstruction
.1dd1					_CRRunRoutine:
.1dd1	7c 26 1e	jmp ($1e26,x)			jmp 	(Group0Vectors,x)
.1dd4					_CRNotToken:
.1dd4	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1dd6	b0 44		bcs $1e1c			bcs 	Unimplemented
.1dd8					_CRDefaultLet:
.1dd8	20 25 19	jsr $1925			jsr 	CommandLet 					; do the default, LET
.1ddb	4c a2 1d	jmp $1da2			jmp 	CRNextInstruction
.1dde					_CRCheckIndirect:
.1dde	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1de0	f0 f6		beq $1dd8			beq 	_CRDefaultLet
.1de2	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1de4	f0 f2		beq $1dd8			beq 	_CRDefaultLet
.1de6	d0 34		bne $1e1c			bne 	Unimplemented
.1de8					CommandShift1:
.1de8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.1dea	10 30		bpl $1e1c			bpl 	Unimplemented 				; we have an error as this should not happen.
.1dec	0a		asl a				asl 	a 							; double into X
.1ded	aa		tax				tax
.1dee	c8		iny				iny 								; advance over it.
.1def	20 f5 1d	jsr $1df5			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1df2	4c a2 1d	jmp $1da2			jmp 	CRNextInstruction
.1df5					_RunIt:
.1df5	7c e6 1e	jmp ($1ee6,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1df8					CommandShift2:
.1df8	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1dfa	20 43 14	jsr $1443		jsr	extensionHandler
.1dfd	4c a2 1d	jmp $1da2			jmp 	CRNextInstruction
.1e00					CommandColon:
.1e00	60		rts				rts
.1e01					CommandBreak:
.1e01	20 be 25	jsr $25be			jsr 	EvaluateRootInteger
.1e04	20 74 2b	jsr $2b74			jsr 	MInt32Zero
.1e07	f0 02		beq $1e0b			beq 	BreakOff
.1e09					BreakOn:
.1e09	a2 08		ldx #$08			ldx 	#8
.1e0b					BreakOff:
.1e0b	8e 0a 0c	stx $0c0a			stx 	breakIncrement
.1e0e	60		rts				rts
.1e0f					ResetCodeAddress:
.1e0f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1e12	85 28		sta $28				sta 	codePtr
.1e14	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e17	85 29		sta $29				sta 	codePtr+1
.1e19	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1e1b	60		rts				rts
.1e1c					Unimplemented:
.1e1c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1e1e	20 85 11	jsr $1185		jsr	errorHandler
.1e21					TKErr01:
.1e21					TKErr02:
.1e21					TKErr03:
.1e21					TKErr04:
.1e21					TKErr05:
.1e21					TKErr06:
.1e21					TKErr07:
.1e21					TKErr08:
.1e21					TKErr09:
.1e21					TKErr10:
.1e21	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1e23	20 85 11	jsr $1185		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1e26					Group0Vectors:
>1e26	e9 1f					.word	AdvanceNextLine          ; $80 [[eol]]
>1e28	e8 1d					.word	CommandShift1            ; $81 [[sh1]]
>1e2a	f8 1d					.word	CommandShift2            ; $82 [[sh2]]
>1e2c	21 1e					.word	TKErr09                  ; $83 [[sh3]]
>1e2e	21 1e					.word	TKErr10                  ; $84 [[fpc]]
>1e30	21 1e					.word	TKErr08                  ; $85 [[str]]
>1e32	ad 21					.word	AndHandler               ; $86 and
>1e34	9a 21					.word	OrHandler                ; $87 or
>1e36	87 21					.word	XorHandler               ; $88 xor
>1e38	cf 22					.word	CompareGreaterEq         ; $89 >=
>1e3a	d9 22					.word	CompareLessEq            ; $8a <=
>1e3c	bb 22					.word	CompareGreater           ; $8b >
>1e3e	b1 22					.word	CompareLess              ; $8c <
>1e40	a7 22					.word	CompareEquals            ; $8d =
>1e42	c5 22					.word	CompareNotEquals         ; $8e <>
>1e44	18 21					.word	AddHandler               ; $8f +
>1e46	3b 21					.word	SubHandler               ; $90 -
>1e48	d3 21					.word	ShrHandler               ; $91 >>
>1e4a	c0 21					.word	ShlHandler               ; $92 <<
>1e4c	4e 21					.word	MulHandler               ; $93 *
>1e4e	61 21					.word	DivHandler               ; $94 /
>1e50	74 21					.word	ModHandler               ; $95 mod
>1e52	0c 22					.word	PowerHandler             ; $96 ^
>1e54	e6 21					.word	WordRefHandler           ; $97 !
>1e56	f9 21					.word	ByteRefHandler           ; $98 ?
>1e58	66 1d					.word	Command_Repeat           ; $99 repeat
>1e5a	b1 20					.word	Command_While            ; $9a while
>1e5c	24 17					.word	Command_FOR              ; $9b for
>1e5e	33 18					.word	CommandIf                ; $9c if
>1e60	21 1e					.word	TKErr04                  ; $9d defproc
>1e62	73 1d					.word	Command_Until            ; $9e until
>1e64	d4 20					.word	Command_Wend             ; $9f wend
>1e66	85 17					.word	Command_NEXT             ; $a0 next
>1e68	21 1e					.word	TKErr06                  ; $a1 then
>1e6a	6e 18					.word	Command_ENDIF            ; $a2 endif
>1e6c	d8 1c					.word	ReturnProc               ; $a3 endproc
>1e6e	a8 24					.word	UnaryParenthesis         ; $a4 (
>1e70	06 26					.word	UnaryLen                 ; $a5 len(
>1e72	4a 26					.word	UnarySgn                 ; $a6 sgn(
>1e74	33 26					.word	UnaryAbs                 ; $a7 abs(
>1e76	a3 26					.word	Unary_Random             ; $a8 random(
>1e78	ed 26					.word	Unary_Page               ; $a9 page
>1e7a	49 2b					.word	MInt32True               ; $aa true
>1e7c	4d 2b					.word	MInt32False              ; $ab false
>1e7e	b8 26					.word	Unary_Min                ; $ac min(
>1e80	bc 26					.word	Unary_Max                ; $ad max(
>1e82	c1 27					.word	UnarySys                 ; $ae sys(
>1e84	6a 27					.word	UnaryTimer               ; $af timer(
>1e86	fd 24					.word	EventFunction            ; $b0 event(
>1e88	93 27					.word	UnaryGet                 ; $b1 get(
>1e8a	83 27					.word	UnaryInkey               ; $b2 inkey(
>1e8c	3e 27					.word	UnaryAlloc               ; $b3 alloc(
>1e8e	fa 27					.word	ExecChr                  ; $b4 chr$(
>1e90	2a 28					.word	ExecLeft                 ; $b5 left$(
>1e92	47 28					.word	ExecMid                  ; $b6 mid$(
>1e94	6f 28					.word	ExecRight                ; $b7 right$(
>1e96	e9 22					.word	Event_Str                ; $b8 str$(
>1e98	18 23					.word	UnaryVal                 ; $b9 val(
>1e9a	61 26					.word	UnaryPeek                ; $ba peek(
>1e9c	67 26					.word	UnaryDeek                ; $bb deek(
>1e9e	6d 26					.word	UnaryLeek                ; $bc leek(
>1ea0	24 26					.word	UnaryAsc                 ; $bd asc(
>1ea2	18 27					.word	UnaryIntToFloat          ; $be int(
>1ea4	2b 27					.word	UnaryFloatToInt          ; $bf float(
>1ea6	1b 23					.word	UnaryIsVal               ; $c0 isval(
>1ea8	11 28					.word	ExecUpper                ; $c1 upper$(
>1eaa	0e 28					.word	ExecLower                ; $c2 lower$(
>1eac	fb 26					.word	UnaryReference           ; $c3 @
>1eae	11 27					.word	UnaryComplement          ; $c4 ~
>1eb0	0e 27					.word	UnaryHexMarker           ; $c5 &
>1eb2	ac 27					.word	UnaryGetString           ; $c6 get$(
>1eb4	b2 27					.word	UnaryInkeyString         ; $c7 inkey$(
>1eb6	e9 27					.word	UnaryMem                 ; $c8 mem
>1eb8	21 1e					.word	TKErr01                  ; $c9 )
>1eba	00 1e					.word	CommandColon             ; $ca :
>1ebc	21 1e					.word	TKErr02                  ; $cb ,
>1ebe	21 1e					.word	TKErr03                  ; $cc ;
>1ec0	59 1d					.word	Command_Rem2             ; $cd '
>1ec2	21 1e					.word	TKErr07                  ; $ce to
>1ec4	21 1e					.word	TKErr05                  ; $cf step
>1ec6	6b 1c					.word	CallProc                 ; $d0 proc
>1ec8	83 1a					.word	CommandLocal             ; $d1 local
>1eca	16 17					.word	Command_Dim              ; $d2 dim
>1ecc	59 1d					.word	Command_Rem              ; $d3 rem
>1ece	25 19					.word	CommandLet               ; $d4 let
>1ed0	6f 18					.word	Command_Input            ; $d5 input
>1ed2	68 18					.word	Command_ELSE             ; $d6 else
>1ed4	90 20					.word	Command_VDU              ; $d7 vdu
>1ed6	d0 1b					.word	Command_Print            ; $d8 print
>1ed8	5e 20					.word	CommandGOTO              ; $d9 goto
>1eda	33 20					.word	CommandGOSUB             ; $da gosub
>1edc	46 20					.word	CommandRETURN            ; $db return
>1ede	1e 1d					.word	CommandData              ; $dc data
>1ee0	a9 16					.word	Command_Assert           ; $dd assert
>1ee2	93 1b					.word	Command_Poke             ; $de poke
>1ee4	97 1b					.word	Command_Doke             ; $df doke
>1ee6	9b 1b					.word	Command_Loke             ; $e0 loke
>1ee8	03 20					.word	Command_Ink              ; $e1 ink
>1eea	0e 20					.word	Command_Paper            ; $e2 paper
>1eec	fd 1f					.word	Command_CLS              ; $e3 cls
>1eee	19 20					.word	Command_Locate           ; $e4 locate
>1ef0	01 1e					.word	CommandBreak             ; $e5 break

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1ef2					Group1Vectors:
>1ef2	b7 16					.word	CommandClear             ; $86 clear
>1ef4	2a 1a					.word	CommandLoad              ; $87 load
>1ef6	3f 1a					.word	CommandSave              ; $88 save
>1ef8	a3 19					.word	CommandList              ; $89 list
>1efa	85 1b					.word	Command_New              ; $8a new
>1efc	94 1d					.word	Command_Run              ; $8b run
>1efe	f3 1c					.word	CommandRead              ; $8c read
>1f00	27 1d					.word	CommandRestore           ; $8d restore
>1f02	e3 1f					.word	CommandEnd               ; $8e end
>1f04	de 1f					.word	CommandStop              ; $8f stop
>1f06	e6 1f					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c0b					procList:
>0c0b							.fill 	2		 					; terminated by name high being zero.
.0c0d					yInLine:
>0c0d							.fill 	1
.1f08					FindProcedure:
.1f08	8c 0d 0c	sty $0c0d			sty 	yInLine 					; save current position.
.1f0b	20 c6 1f	jsr $1fc6			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1f0e	85 2c		sta $2c				sta 	temp1
.1f10	ad 0b 0c	lda $0c0b			lda		procList 					; put procList address in temp2
.1f13	85 2e		sta $2e				sta 	temp2
.1f15	ad 0c 0c	lda $0c0c			lda 	procList+1
.1f18	85 2f		sta $2f				sta 	temp2+1
.1f1a	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1f1c					_FPLoop:
.1f1c	b1 2e		lda ($2e),y			lda 	(temp2),y
.1f1e	f0 4f		beq $1f6f			beq 	_FPError 					; if so, we don't know this procedure.
.1f20	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1f22	c8		iny				iny
.1f23	b1 2e		lda ($2e),y			lda 	(temp2),y
.1f25	85 2a		sta $2a				sta 	temp0
.1f27	c8		iny				iny
.1f28	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.1f2a	c5 2c		cmp $2c				cmp 	temp1
.1f2c	d0 2b		bne $1f59			bne 	_FPNext 					; hash is different, go to next.
.1f2e	38		sec				sec
.1f2f	ad 0d 0c	lda $0c0d			lda 	yInLine 					; position in line must be at least 4
.1f32	e9 04		sbc #$04			sbc 	#4
.1f34	18		clc				clc
.1f35	65 28		adc $28				adc 	codePtr
.1f37	85 30		sta $30				sta 	temp3
.1f39	a5 29		lda $29				lda 	codePtr+1
.1f3b	69 00		adc #$00			adc 	#0
.1f3d	85 31		sta $31				sta 	temp3+1
.1f3f	98		tya				tya
.1f40	48		pha				pha
.1f41	a0 04		ldy #$04			ldy 	#4
.1f43					_FPCName:
.1f43	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.1f45	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1f47	d0 0e		bne $1f57			bne 	_FPpulYNext 				; if different go to next one.
.1f49	c8		iny				iny
.1f4a	c9 3a		cmp #$3a			cmp 	#$3A
.1f4c	90 f5		bcc $1f43			bcc 	_FPCName 					; compare the whole lot....
.1f4e	68		pla				pla 								; throw away the saved Y
.1f4f	98		tya				tya 								; length of name is Y-4
.1f50	38		sec				sec
.1f51	e9 04		sbc #$04			sbc 	#4
.1f53	ac 0d 0c	ldy $0c0d			ldy 	yInLine  					; get the original Y back
.1f56	60		rts				rts
.1f57					_FPpulYNext:
.1f57	68		pla				pla
.1f58	a8		tay				tay
.1f59					_FPNext:
.1f59	c8		iny				iny 								; next procedure record.
.1f5a	10 c0		bpl $1f1c			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1f5c	98		tya				tya 								; subtract 128 from Y
.1f5d	38		sec				sec
.1f5e	e9 80		sbc #$80			sbc 	#128
.1f60	a8		tay				tay
.1f61	18		clc				clc 								; add 128 to temp2, so we can have more than
.1f62	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.1f64	69 80		adc #$80			adc 	#128
.1f66	85 2e		sta $2e				sta 	temp2
.1f68	90 b2		bcc $1f1c			bcc 	_FPLoop
.1f6a	e6 2f		inc $2f				inc 	temp2+1
.1f6c	4c 1c 1f	jmp $1f1c			jmp 	_FPLoop
.1f6f					_FPError:
.1f6f	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1f71	20 85 11	jsr $1185		jsr	errorHandler
.1f74					ScanProc:
.1f74	98		tya				tya
.1f75	48		pha				pha
.1f76	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.1f78	8d 0b 0c	sta $0c0b			sta 	procList
.1f7b	a5 36		lda $36				lda 	lowMemory+1
.1f7d	8d 0c 0c	sta $0c0c			sta 	procList+1
.1f80	20 0f 1e	jsr $1e0f			jsr 	ResetCodeAddress 			; back to the start.
.1f83					_ScanLoop:
.1f83	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1f85	b1 28		lda ($28),y			lda 	(codePtr),y
.1f87	f0 2a		beq $1fb3			beq 	_ScanExit
.1f89	a0 03		ldy #$03			ldy 	#3							; get first token
.1f8b	b1 28		lda ($28),y			lda 	(codePtr),y
.1f8d	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.1f8f	d0 12		bne $1fa3			bne 	_ScanNext
.1f91	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.1f93	20 bb 1f	jsr $1fbb			jsr 	_ScanWrite
.1f96	a5 28		lda $28				lda 	codePtr
.1f98	20 bb 1f	jsr $1fbb			jsr 	_ScanWrite
.1f9b	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1f9d	20 c6 1f	jsr $1fc6			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1fa0	20 bb 1f	jsr $1fbb			jsr 	_ScanWrite					; and write that
.1fa3					_ScanNext:
.1fa3	18		clc				clc
.1fa4	a0 00		ldy #$00			ldy 	#0
.1fa6	b1 28		lda ($28),y			lda 	(codePtr),y
.1fa8	65 28		adc $28				adc 	codePtr
.1faa	85 28		sta $28				sta 	codePtr
.1fac	90 d5		bcc $1f83			bcc 	_ScanLoop
.1fae	e6 29		inc $29				inc 	codePtr+1
.1fb0	4c 83 1f	jmp $1f83			jmp 	_ScanLoop
.1fb3					_ScanExit:
.1fb3	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1fb5	20 bb 1f	jsr $1fbb			jsr 	_ScanWrite
.1fb8	68		pla				pla
.1fb9	a8		tay				tay
.1fba	60		rts				rts
.1fbb					_ScanWrite:
.1fbb	a0 00		ldy #$00			ldy 	#0
.1fbd	91 35		sta ($35),y			sta 	(lowMemory),y
.1fbf	e6 35		inc $35				inc 	lowMemory
.1fc1	d0 02		bne $1fc5			bne 	_SWNoCarry
.1fc3	e6 36		inc $36				inc 	lowMemory+1
.1fc5					_SWNoCarry:
.1fc5	60		rts				rts
.1fc6					CalculateProcedureHash:
.1fc6	a9 00		lda #$00			lda 	#0 							; clear hash.
.1fc8	85 2a		sta $2a				sta 	temp0
.1fca					_CPHLoop:
.1fca	18		clc				clc 								; add character and rotate and add carry back in
.1fcb	b1 28		lda ($28),y			lda 	(codePtr),y
.1fcd	65 2a		adc $2a				adc 	temp0
.1fcf	6a		ror a				ror 	a
.1fd0	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1fd2	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.1fd4	b1 28		lda ($28),y			lda 	(codePtr),y
.1fd6	c8		iny				iny 								; advance incase we go round again.
.1fd7	c9 3a		cmp #$3a			cmp 	#$3A
.1fd9	90 ef		bcc $1fca			bcc 	_CPHLoop
.1fdb	a5 2a		lda $2a				lda 	temp0
.1fdd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1fde					CommandStop:
.1fde	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1fe0	20 85 11	jsr $1185		jsr	errorHandler
.1fe3					CommandEnd:
.1fe3	4c aa 2c	jmp $2caa			jmp 	WarmStart
.1fe6					CommandXemu:
.1fe6	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1fe9					AdvanceNextLine:
.1fe9	a0 00		ldy #$00			ldy 	#0 							; get offset
.1feb	b1 28		lda ($28),y			lda 	(codePtr),y
.1fed	18		clc				clc 								; add to codePtr
.1fee	65 28		adc $28				adc 	codePtr
.1ff0	85 28		sta $28				sta 	codePtr
.1ff2	90 02		bcc $1ff6			bcc 	_ANLNoCarry
.1ff4	e6 29		inc $29				inc 	codePtr+1
.1ff6					_ANLNoCarry:
.1ff6	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1ff8	f0 e9		beq $1fe3			beq 	CommandEnd 					; execute END
.1ffa	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1ffc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1ffd					Command_CLS:
.1ffd	a2 02		ldx #$02		ldx	#2
.1fff	20 64 11	jsr $1164		jsr	deviceHandler
.2002	60		rts				rts
.2003					Command_Ink:
.2003	a2 00		ldx #$00			ldx 	#0
.2005	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger
.2008	a2 08		ldx #$08		ldx	#8
.200a	20 64 11	jsr $1164		jsr	deviceHandler
.200d	60		rts				rts
.200e					Command_Paper:
.200e	a2 00		ldx #$00			ldx 	#0
.2010	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger
.2013	a2 12		ldx #$12		ldx	#18
.2015	20 64 11	jsr $1164		jsr	deviceHandler
.2018	60		rts				rts
.2019					Command_Locate:
.2019	a2 00		ldx #$00			ldx 	#0
.201b	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger
.201e	20 cd 2b	jsr $2bcd			jsr 	CheckComma
.2021	e8		inx				inx
.2022	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger
.2025	98		tya				tya
.2026	48		pha				pha
.2027	a4 49		ldy $49				ldy 	esInt0+1
.2029	a5 48		lda $48				lda 	esInt0
.202b	a2 10		ldx #$10		ldx	#16
.202d	20 64 11	jsr $1164		jsr	deviceHandler
.2030	68		pla				pla
.2031	a8		tay				tay
.2032	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.2033					CommandGOSUB:
.2033	20 be 25	jsr $25be			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2036	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2038	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.203a	20 5c 2c	jsr $2c5c			jsr 	RSClaim
.203d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.203f	20 88 2c	jsr $2c88			jsr 	RSSavePosition
.2042	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2044	f0 1b		beq $2061			beq 	GotoTOS 					; and do a GOTO there.
.2046					CommandRETURN:
.2046	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2048	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.204a	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.204c	f0 05		beq $2053			beq 	_isok
.204e	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2050	20 85 11	jsr $1185		jsr	errorHandler
.2053					_isok:
.2053	a9 01		lda #$01			lda 	#1
.2055	20 9b 2c	jsr $2c9b			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2058	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.205a	20 7e 2c	jsr $2c7e			jsr 	RSFree
.205d	60		rts				rts
.205e					CommandGOTO:
.205e	20 be 25	jsr $25be			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2061					GotoTOS:
.2061	20 0f 1e	jsr $1e0f			jsr 	ResetCodeAddress 			; simple search.
.2064					_GotoSearch:
.2064	a0 00		ldy #$00			ldy 	#0 							; get offset
.2066	b1 28		lda ($28),y			lda 	(codePtr),y
.2068	f0 21		beq $208b			beq 	_GotoError 					; not found.
.206a	c8		iny				iny									; check LSB match
.206b	b1 28		lda ($28),y			lda 	(codePtr),y
.206d	d5 48		cmp $48,x			cmp 	esInt0,x
.206f	d0 07		bne $2078			bne 	_GotoNext
.2071	c8		iny				iny
.2072	b1 28		lda ($28),y			lda 	(codePtr),y
.2074	d5 50		cmp $50,x			cmp 	esInt1,x
.2076	f0 10		beq $2088			beq 	_GotoFound
.2078					_GotoNext:
.2078	a0 00		ldy #$00			ldy 	#0 							; go next line
.207a	b1 28		lda ($28),y			lda 	(codePtr),y
.207c	18		clc				clc
.207d	65 28		adc $28				adc 	codePtr
.207f	85 28		sta $28				sta 	codePtr
.2081	90 e1		bcc $2064			bcc 	_GotoSearch
.2083	e6 29		inc $29				inc 	codePtr+1
.2085	4c 64 20	jmp $2064			jmp 	_GotoSearch
.2088					_GotoFound:
.2088	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.208a	60		rts				rts
.208b					_GotoError:
.208b	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.208d	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.2090					Command_VDU:
.2090	20 be 25	jsr $25be			jsr 	EvaluateRootInteger 			; get integer at root.
.2093	a5 48		lda $48				lda 	esInt0
.2095	a2 14		ldx #$14		ldx	#20
.2097	20 64 11	jsr $1164		jsr	deviceHandler
.209a					_CVNext:
.209a	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.209c	c8		iny				iny
.209d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.209f	f0 ef		beq $2090			beq 	Command_VDU
.20a1	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.20a3	d0 0a		bne $20af			bne 	_CVExit
.20a5	a5 50		lda $50				lda 	esInt1
.20a7	a2 14		ldx #$14		ldx	#20
.20a9	20 64 11	jsr $1164		jsr	deviceHandler
.20ac	4c 9a 20	jmp $209a			jmp 	_CVNext
.20af	88		dey		_CVExit:dey
.20b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.20b1					Command_While:
.20b1	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.20b3	a2 04		ldx #$04			ldx 	#4
.20b5	20 5c 2c	jsr $2c5c			jsr 	RSClaim 					; create on stack.
.20b8	88		dey				dey
.20b9	a9 01		lda #$01			lda 	#1
.20bb	20 88 2c	jsr $2c88			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.20be	c8		iny				iny
.20bf	20 c0 25	jsr $25c0			jsr 	EvaluateInteger				; get the conditional
.20c2	20 74 2b	jsr $2b74			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.20c5	f0 01		beq $20c8			beq 	_CWFail
.20c7	60		rts				rts
.20c8					_CWFail:
.20c8	a9 04		lda #$04			lda 	#4
.20ca	20 7e 2c	jsr $2c7e			jsr 	RSFree 						; close the just opened position.
.20cd	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.20cf	aa		tax				tax
.20d0	20 da 2b	jsr $2bda			jsr 	ScanForward
.20d3	60		rts				rts
.20d4					Command_Wend:
.20d4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.20d6	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.20d8	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.20da	f0 05		beq $20e1			beq 	_isok
.20dc	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.20de	20 85 11	jsr $1185		jsr	errorHandler
.20e1					_isok:
.20e1	a9 01		lda #$01			lda 	#1
.20e3	20 9b 2c	jsr $2c9b			jsr 	RSLoadPosition				; go back until true
.20e6	a9 04		lda #$04			lda 	#4
.20e8	20 7e 2c	jsr $2c7e			jsr 	RSFree 						; close the loop
.20eb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.20ec					BinaryProcess:
.20ec	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.20ee	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.20f0	0a		asl a				asl 	a
.20f1	30 0e		bmi $2101			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.20f3	18		clc				clc 								; return CC for integer
.20f4	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.20f6	f0 08		beq $2100			beq 	_BPExit 					; if both integer then return with CC.
.20f8	20 06 21	jsr $2106			jsr 	BPMakeBothFloat 			; make both float
.20fb	a9 01		lda #$01			lda 	#$01 						; set result type to float
.20fd	95 40		sta $40,x			sta 	esType,x
.20ff	38		sec				sec 								; and return with carry set.
.2100					_BPExit:
.2100	60		rts				rts
.2101					_BPStringType:
.2101	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2103	20 85 11	jsr $1185		jsr	errorHandler
.2106					BPMakeBothFloat:
.2106	e8		inx				inx
.2107	20 0b 21	jsr $210b			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.210a	ca		dex				dex
.210b					BPMakeFloat:
.210b	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.210d	4a		lsr a				lsr 	a
.210e	b0 07		bcs $2117			bcs 	_BPIsFloat 					; already a float if set.
.2110	8a		txa				txa
.2111	a2 1a		ldx #$1a		ldx	#26
.2113	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2116	aa		tax				tax
.2117					_BPIsFloat:
.2117	60		rts				rts
.2118					AddHandler:
.2118	20 67 23	jsr $2367			jsr 	DereferenceTwo 				; dereference top two on stack.
.211b	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.211d	35 41		and $41,x			and 	esType+1,x
.211f	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2121	d0 10		bne $2133			bne 	_AHStringConcat				; concatenate strings.
.2123	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.2126	b0 03		bcs $212b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2128	4c 31 2a	jmp $2a31			jmp 	MInt32Add 							; else do it as integer.
.212b					_IsFPOperation:
.212b	8a		txa				txa 								; call the relevant fp routine
.212c	a2 02		ldx #$02		ldx	#2
.212e	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2131	aa		tax				tax
.2132	60		rts				rts
.2133					_AHStringConcat:
.2133	8a		txa				txa 								; handled by the string module.
.2134	a2 04		ldx #$04		ldx	#4
.2136	20 65 2f	jsr $2f65		jsr	stringHandler
.2139	aa		tax				tax
.213a	60		rts				rts
.213b					SubHandler:
.213b	20 67 23	jsr $2367			jsr 	DereferenceTwo
.213e	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.2141	b0 03		bcs $2146			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2143	4c 4b 2a	jmp $2a4b			jmp 	MInt32Sub 							; else do it as integer.
.2146					_IsFPOperation:
.2146	8a		txa				txa 								; call the relevant fp routine
.2147	a2 10		ldx #$10		ldx	#16
.2149	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.214c	aa		tax				tax
.214d	60		rts				rts
.214e					MulHandler:
.214e	20 67 23	jsr $2367			jsr 	DereferenceTwo
.2151	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.2154	b0 03		bcs $2159			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2156	4c 65 2a	jmp $2a65			jmp 	MInt32Multiply 							; else do it as integer.
.2159					_IsFPOperation:
.2159	8a		txa				txa 								; call the relevant fp routine
.215a	a2 0a		ldx #$0a		ldx	#10
.215c	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.215f	aa		tax				tax
.2160	60		rts				rts
.2161					DivHandler:
.2161	20 67 23	jsr $2367			jsr 	DereferenceTwo
.2164	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.2167	b0 03		bcs $216c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2169	4c 22 29	jmp $2922			jmp 	MInt32SDivide 							; else do it as integer.
.216c					_IsFPOperation:
.216c	8a		txa				txa 								; call the relevant fp routine
.216d	a2 06		ldx #$06		ldx	#6
.216f	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2172	aa		tax				tax
.2173	60		rts				rts
.2174					ModHandler:
.2174	20 67 23	jsr $2367			jsr 	DereferenceTwo
.2177	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.217a	b0 03		bcs $217f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.217c	4c a0 29	jmp $29a0			jmp 	MInt32Modulus 							; else do it as integer.
.217f					_IsFPOperation:
.217f	8a		txa				txa 								; call the relevant fp routine
.2180	a2 08		ldx #$08		ldx	#8
.2182	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2185	aa		tax				tax
.2186	60		rts				rts
.2187					XorHandler:
.2187	20 67 23	jsr $2367			jsr 	DereferenceTwo
.218a	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.218d	b0 03		bcs $2192			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.218f	4c d4 28	jmp $28d4			jmp 	MInt32Xor 							; else do it as integer.
.2192					_IsFPOperation:
.2192	8a		txa				txa 								; call the relevant fp routine
.2193	a2 08		ldx #$08		ldx	#8
.2195	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2198	aa		tax				tax
.2199	60		rts				rts
.219a					OrHandler:
.219a	20 67 23	jsr $2367			jsr 	DereferenceTwo
.219d	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.21a0	b0 03		bcs $21a5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21a2	4c bb 28	jmp $28bb			jmp 	MInt32Or 							; else do it as integer.
.21a5					_IsFPOperation:
.21a5	8a		txa				txa 								; call the relevant fp routine
.21a6	a2 08		ldx #$08		ldx	#8
.21a8	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.21ab	aa		tax				tax
.21ac	60		rts				rts
.21ad					AndHandler:
.21ad	20 67 23	jsr $2367			jsr 	DereferenceTwo
.21b0	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.21b3	b0 03		bcs $21b8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21b5	4c a2 28	jmp $28a2			jmp 	MInt32And 							; else do it as integer.
.21b8					_IsFPOperation:
.21b8	8a		txa				txa 								; call the relevant fp routine
.21b9	a2 08		ldx #$08		ldx	#8
.21bb	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.21be	aa		tax				tax
.21bf	60		rts				rts
.21c0					ShlHandler:
.21c0	20 67 23	jsr $2367			jsr 	DereferenceTwo
.21c3	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.21c6	b0 03		bcs $21cb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21c8	4c 41 22	jmp $2241			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.21cb					_IsFPOperation:
.21cb	8a		txa				txa 								; call the relevant fp routine
.21cc	a2 08		ldx #$08		ldx	#8
.21ce	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.21d1	aa		tax				tax
.21d2	60		rts				rts
.21d3					ShrHandler:
.21d3	20 67 23	jsr $2367			jsr 	DereferenceTwo
.21d6	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.21d9	b0 03		bcs $21de			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21db	4c 44 22	jmp $2244			jmp 	MInt32ShiftRightX 							; else do it as integer.
.21de					_IsFPOperation:
.21de	8a		txa				txa 								; call the relevant fp routine
.21df	a2 08		ldx #$08		ldx	#8
.21e1	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.21e4	aa		tax				tax
.21e5	60		rts				rts
.21e6					WordRefHandler:
.21e6	20 67 23	jsr $2367			jsr 	DereferenceTwo
.21e9	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.21ec	b0 03		bcs $21f1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21ee	4c 33 22	jmp $2233			jmp 	MInt32WordIndirect 							; else do it as integer.
.21f1					_IsFPOperation:
.21f1	8a		txa				txa 								; call the relevant fp routine
.21f2	a2 08		ldx #$08		ldx	#8
.21f4	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.21f7	aa		tax				tax
.21f8	60		rts				rts
.21f9					ByteRefHandler:
.21f9	20 67 23	jsr $2367			jsr 	DereferenceTwo
.21fc	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.21ff	b0 03		bcs $2204			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2201	4c 37 22	jmp $2237			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2204					_IsFPOperation:
.2204	8a		txa				txa 								; call the relevant fp routine
.2205	a2 08		ldx #$08		ldx	#8
.2207	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.220a	aa		tax				tax
.220b	60		rts				rts
.220c					PowerHandler:
.220c	20 67 23	jsr $2367			jsr 	DereferenceTwo
.220f	20 ec 20	jsr $20ec			jsr 	BinaryProcess 				; check to see if either is float
.2212	b0 03		bcs $2217			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2214	4c 1f 22	jmp $221f			jmp 	PowerInteger 							; else do it as integer.
.2217					_IsFPOperation:
.2217	8a		txa				txa 								; call the relevant fp routine
.2218	a2 16		ldx #$16		ldx	#22
.221a	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.221d	aa		tax				tax
.221e	60		rts				rts
.221f					PowerInteger:
.221f	20 06 21	jsr $2106			jsr 	BPMakeBothFloat				; make them float.
.2222	8a		txa				txa
.2223	a2 16		ldx #$16		ldx	#22
.2225	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2228	a2 12		ldx #$12		ldx	#18
.222a	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.222d	aa		tax				tax
.222e	a9 00		lda #$00			lda 	#0 							; make type integer
.2230	95 40		sta $40,x			sta 	esType,x
.2232	60		rts				rts
.2233					Mint32WordIndirect:
.2233	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2235	d0 02		bne $2239			bne 	Min32Indirect
.2237					Mint32ByteIndirect:
.2237	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2239					Min32Indirect:
.2239	48		pha				pha 								; save the indirection
.223a	20 31 2a	jsr $2a31			jsr 	MInt32Add 					; add a!b a?b
.223d	68		pla				pla 								; and set the type to reference.
.223e	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2240	60		rts				rts
.2241					Mint32ShiftLeftX:
.2241	18		clc				clc 								; CC shift left
.2242	90 01		bcc $2245			bcc 	Mint32Shift
.2244					Mint32ShiftRightX:
.2244	38		sec				sec 								; CS shift right
.2245					Mint32Shift:
.2245	08		php				php 								; save carry flag on stack.
.2246	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2248	15 59		ora $59,x			ora 	esInt2+1,x
.224a	15 61		ora $61,x			ora 	esInt3+1,x
.224c	d0 1e		bne $226c			bne 	_MShiftZero
.224e	b5 49		lda $49,x			lda 	esInt0+1,x
.2250	c9 20		cmp #$20			cmp 	#32
.2252	b0 18		bcs $226c			bcs 	_MShiftZero
.2254					_MShiftLoop:
.2254	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.2256	f0 12		beq $226a			beq 	_MShiftExit
.2258	d6 49		dec $49,x			dec 	esInt0+1,x
.225a	28		plp				plp 								; restore and save carry
.225b	08		php				php
.225c	90 06		bcc $2264			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.225e	20 6b 2b	jsr $2b6b			jsr 	Mint32ShiftRight
.2261	4c 54 22	jmp $2254			jmp 	_MShiftLoop
.2264					_MShiftLeft:
.2264	20 62 2b	jsr $2b62			jsr 	Mint32ShiftLeft
.2267	4c 54 22	jmp $2254			jmp 	_MShiftLoop
.226a					_MShiftExit:
.226a	28		plp				plp	 								; throw saved carry and exit
.226b	60		rts				rts
.226c					_MShiftZero:
.226c	4c 4d 2b	jmp $2b4d			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.226f					PerformComparison:
.226f	20 67 23	jsr $2367			jsr 	DereferenceTwo 				; make both values.
.2272	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.2274	35 41		and $41,x			and 	esType+1,x
.2276	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2277	30 1d		bmi $2296			bmi 	_PCIsString
.2279	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.227b	15 41		ora $41,x			ora 	esType+1,x
.227d	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.227e	30 22		bmi $22a2			bmi 	_PCError
.2280	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2282	f0 0f		beq $2293			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2284	20 06 21	jsr $2106			jsr 	BPMakeBothFloat 			; make both float
.2287	8a		txa				txa
.2288	a2 04		ldx #$04		ldx	#4
.228a	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.228d	86 32		stx $32				stx 	tempShort 					; save result
.228f	aa		tax				tax
.2290	a5 32		lda $32				lda 	tempShort
.2292	60		rts				rts
.2293					_PCIsInteger:
.2293	4c ed 28	jmp $28ed			jmp 	MInt32Compare
.2296					_PCIsString:
.2296	8a		txa				txa 								; A has SP
.2297	a2 08		ldx #$08		ldx	#8
.2299	20 65 2f	jsr $2f65		jsr	stringHandler
.229c	86 32		stx $32				stx 	tempShort 					; save result
.229e	aa		tax				tax 								; put SP back in X and get result.
.229f	a5 32		lda $32				lda 	tempShort
.22a1	60		rts				rts
.22a2					_PCError:
.22a2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.22a4	20 85 11	jsr $1185		jsr	errorHandler
.22a7					CompareEquals:
.22a7	20 6f 22	jsr $226f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22aa	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.22ac	f0 35		beq $22e3			beq  	CompareTrue
.22ae	4c e6 22	jmp $22e6			jmp 	CompareFalse
.22b1					CompareLess:
.22b1	20 6f 22	jsr $226f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22b4	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.22b6	f0 2b		beq $22e3			beq  	CompareTrue
.22b8	4c e6 22	jmp $22e6			jmp 	CompareFalse
.22bb					CompareGreater:
.22bb	20 6f 22	jsr $226f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22be	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.22c0	f0 21		beq $22e3			beq  	CompareTrue
.22c2	4c e6 22	jmp $22e6			jmp 	CompareFalse
.22c5					CompareNotEquals:
.22c5	20 6f 22	jsr $226f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22c8	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.22ca	d0 17		bne $22e3			bne  	CompareTrue
.22cc	4c e6 22	jmp $22e6			jmp 	CompareFalse
.22cf					CompareGreaterEq:
.22cf	20 6f 22	jsr $226f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22d2	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.22d4	d0 0d		bne $22e3			bne  	CompareTrue
.22d6	4c e6 22	jmp $22e6			jmp 	CompareFalse
.22d9					CompareLessEq:
.22d9	20 6f 22	jsr $226f			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22dc	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.22de	d0 03		bne $22e3			bne  	CompareTrue
.22e0	4c e6 22	jmp $22e6			jmp 	CompareFalse
.22e3					CompareTrue:
.22e3	4c 49 2b	jmp $2b49			jmp 	MInt32True
.22e6					CompareFalse:
.22e6	4c 4d 2b	jmp $2b4d			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.22e9					Event_Str:
.22e9	20 aa 25	jsr $25aa			jsr 	EvaluateNumeric 			; get a number.
.22ec	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.22ee	d0 13		bne $2303			bne 	_ESFloat
.22f0	20 46 23	jsr $2346			jsr 	ConvertGetBase 				; get base, or default.
.22f3	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.22f5	85 2a		sta $2a				sta 	temp0
.22f7	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.22f9	85 2b		sta $2b				sta 	1+(temp0)
.22fb	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.22fd	20 a3 2a	jsr $2aa3			jsr 	MInt32ToString 				; convert to string.
.2300	4c 10 23	jmp $2310			jmp 	_ESCloneExit 				; clone and exit.
.2303					_ESFloat:
.2303	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; check closing )
.2306	20 9a 19	jsr $199a			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2309	8a		txa				txa
.230a	a2 14		ldx #$14		ldx	#20
.230c	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.230f	aa		tax				tax
.2310					_ESCloneExit:
.2310	8a		txa				txa
.2311	a2 02		ldx #$02		ldx	#2
.2313	20 65 2f	jsr $2f65		jsr	stringHandler
.2316	aa		tax				tax
.2317	60		rts				rts
.2318					UnaryVal:
.2318	38		sec				sec 								; Carry set to return value
.2319	b0 01		bcs $231c			bcs 	ValueMain
.231b					UnaryIsVal:
.231b	18		clc				clc									; Carry clear to return legitimacy
.231c					ValueMain:
.231c	08		php				php 								; save results (CS is value, CC is validation)
.231d	20 b5 25	jsr $25b5			jsr 	EvaluateString
.2320	20 46 23	jsr $2346			jsr 	ConvertGetBase 				; get base, if any.
.2323	98		tya				tya
.2324	48		pha				pha
.2325	20 9a 19	jsr $199a			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2328	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.232a	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.232c	20 bb 29	jsr $29bb			jsr 	MInt32FromString 			; convert it back from a string.
.232f	b0 0c		bcs $233d			bcs 	_VMSuccess 					; successfully converted.
.2331	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.2333	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2335	f0 00		beq $2337			beq 	_VMFailed 	 				; so we failed.
.2337					_VMFailed:
.2337	68		pla				pla
.2338	a8		tay				tay
.2339	28		plp				plp
.233a	4c 4d 2b	jmp $2b4d			jmp 	MInt32False 				; return 0 whatever.
.233d					_VMSuccess:
.233d	68		pla				pla
.233e	a8		tay				tay
.233f	28		plp				plp 								; if CS the it was val() so we want the value.
.2340	b0 03		bcs $2345			bcs 	_VMExit
.2342	4c 49 2b	jmp $2b49			jmp 	MInt32True 					; otherwise return true as successful.
.2345					_VMExit:
.2345	60		rts				rts
.2346					ConvertGetBase:
.2346	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2348	95 49		sta $49,x			sta 	esInt0+1,x
.234a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.234c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.234e	d0 0e		bne $235e			bne 	_CGBDone 					; not found, should be )
.2350	e8		inx				inx 								; next level
.2351	c8		iny				iny 								; skip comma.
.2352	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger		; evaluate the base.
.2355	ca		dex				dex
.2356	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2358	90 08		bcc $2362			bcc 	_CGBValue 					; (it should work as high as 37)
.235a	c9 11		cmp #$11			cmp 	#17
.235c	b0 04		bcs $2362			bcs 	_CGBValue
.235e					_CGBDone:
.235e	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.2361	60		rts				rts
.2362					_CGBValue:
.2362	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2364	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2367					DereferenceTwo:
.2367	e8		inx				inx
.2368	20 6c 23	jsr $236c			jsr 	DereferenceOne
.236b	ca		dex				dex
.236c					DereferenceOne:
.236c	b5 40		lda $40,x			lda 	esType,x
.236e	10 3d		bpl $23ad			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2370	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2371	b0 3b		bcs $23ae			bcs 	_DRFloatDeReference
.2373	98		tya				tya
.2374	48		pha				pha
.2375	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.2377	85 2a		sta $2a				sta 	temp0
.2379	b5 50		lda $50,x			lda 	esInt1,x
.237b	85 2b		sta $2b				sta 	temp0+1
.237d	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.237f	95 50		sta $50,x			sta 	esInt1,x
.2381	95 58		sta $58,x			sta 	esInt2,x
.2383	95 60		sta $60,x			sta 	esInt3,x
.2385	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.2387	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2389	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.238a	30 0d		bmi $2399			bmi 	_DeRefString 				; string, 2 bytes only
.238c	d0 11		bne $239f			bne 	_DeRefByte 					; byte 1 byte only
.238e					_DeRefLong:
.238e	a0 03		ldy #$03			ldy 	#3
.2390	b1 2a		lda ($2a),y			lda 	(temp0),y
.2392	95 60		sta $60,x			sta 	esInt3,x
.2394	88		dey				dey
.2395	b1 2a		lda ($2a),y			lda 	(temp0),y
.2397	95 58		sta $58,x			sta 	esInt2,x
.2399					_DeRefString:
.2399	a0 01		ldy #$01			ldy 	#1
.239b	b1 2a		lda ($2a),y			lda 	(temp0),y
.239d	95 50		sta $50,x			sta 	esInt1,x
.239f					_DeRefByte:
.239f	a0 00		ldy #$00			ldy 	#0
.23a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.23a3	95 48		sta $48,x			sta 	esInt0,x
.23a5	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.23a7	29 40		and #$40			and 	#$40
.23a9	95 40		sta $40,x			sta 	esType,x
.23ab	68		pla				pla
.23ac	a8		tay				tay
.23ad					_DRNotReference
.23ad	60		rts				rts
.23ae					_DRFloatDereference:
.23ae	20 9a 19	jsr $199a			jsr 	TOSToTemp0 					; address to deref in temp0
.23b1	8a		txa				txa
.23b2	a2 1c		ldx #$1c		ldx	#28
.23b4	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.23b7	aa		tax				tax
.23b8	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.23ba	95 40		sta $40,x			sta 	esType,x
.23bc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.23bd					EvaluateLevel:
.23bd	48		pha				pha 								; save precedence level.
.23be	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.23c0	95 48		sta $48,x			sta 	esInt0,x
.23c2	95 50		sta $50,x			sta 	esInt1,x
.23c4	95 58		sta $58,x			sta 	esInt2,x
.23c6	95 60		sta $60,x			sta 	esInt3,x
.23c8	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.23ca	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.23cc	30 21		bmi $23ef			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.23ce	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.23cf	30 0a		bmi $23db			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.23d1	8a		txa				txa 								; stack level in X
.23d2	a2 00		ldx #$00		ldx	#0
.23d4	20 46 39	jsr $3946		jsr	variableHandler
.23d7	aa		tax				tax
.23d8	4c 18 24	jmp $2418			jmp		_ELHasTerm
.23db					_ELIsConstant:
.23db	4a		lsr a				lsr 	a 							; get the value back
.23dc	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.23de	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.23e0					_ELCheckNext:
.23e0	c8		iny				iny 								; look at next
.23e1	b1 28		lda ($28),y			lda 	(codePtr),y
.23e3	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.23e5	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.23e7	b0 2f		bcs $2418			bcs 	_ELHasTerm 					; done getting the constant.
.23e9	20 b1 24	jsr $24b1			jsr 	ELShiftByteIn 				; shift byte into position.
.23ec	4c e0 23	jmp $23e0			jmp 	_ELCheckNext
.23ef					_ELIsToken:
.23ef	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.23f1	f0 0f		beq $2402			beq 	_ELIsString
.23f3	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.23f5	d0 5f		bne $2456			bne 	_ELCheckUnary
.23f7	8a		txa				txa 								; put X into A
.23f8	c8		iny				iny 								; skip over the float marker
.23f9	a2 18		ldx #$18		ldx	#24
.23fb	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.23fe	aa		tax				tax 								; restore X
.23ff	4c 18 24	jmp $2418			jmp 	_ELHasTerm
.2402					_ELIsString:
.2402	98		tya				tya 								; address of string is codePtr+y+1
.2403	38		sec				sec
.2404	65 28		adc $28				adc 	codePtr
.2406	95 48		sta $48,x			sta 	esInt0,x
.2408	a5 29		lda $29				lda 	codePtr+1
.240a	69 00		adc #$00			adc 	#0
.240c	95 50		sta $50,x			sta 	esInt1,x
.240e	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2410	95 40		sta $40,x			sta 	esType,x
.2412	c8		iny				iny 								; skip over string.
.2413	98		tya				tya
.2414	38		sec				sec									; +1 for the length itself.
.2415	71 28		adc ($28),y			adc 	(codePtr),y
.2417	a8		tay				tay 								; and fall through to term loop code.
.2418					_ELHasTerm:
.2418	b1 28		lda ($28),y			lda 	(codePtr),y
.241a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.241c	90 04		bcc $2422			bcc 	_ELPopExit
.241e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2420	90 02		bcc $2424			bcc 	_ELHasBinaryTerm
.2422					_ELPopExit:
.2422	68		pla				pla
.2423					_ELExit:
.2423	60		rts				rts
.2424					_ELHasBinaryTerm:
.2424	84 32		sty $32				sty 	tempShort 					; save position
.2426	a8		tay				tay 								; use token as an index and get the precedence.
.2427	b9 59 24	lda $2459,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.242a	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.242c	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.242e	68		pla				pla 								; restore current level.
.242f	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2431	b0 f0		bcs $2423			bcs 	_ELExit
.2433	48		pha				pha 								; save current level back on the stack.
.2434	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2436	48		pha				pha
.2437	c8		iny				iny
.2438	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2439	a5 32		lda $32				lda 	tempShort
.243b	20 bd 23	jsr $23bd			jsr 	EvaluateLevel
.243e	ca		dex				dex
.243f	68		pla				pla 								; get the operator back out.
.2440					_ELExecuteA:
.2440	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2442	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2443	aa		tax				tax
.2444	bd 26 1e	lda $1e26,x			lda 	Group0Vectors,x
.2447	85 2a		sta $2a				sta 	temp0
.2449	bd 27 1e	lda $1e27,x			lda 	Group0Vectors+1,x
.244c	85 2b		sta $2b				sta 	temp0+1
.244e	a6 32		ldx $32				ldx 	tempShort
.2450	20 9d 24	jsr $249d			jsr 	_ELCallTemp0
.2453	4c 18 24	jmp $2418			jmp 	_ELHasTerm 					; and loop back round.
.2456					_ELCheckUnary:
.2456	c8		iny				iny 								; skip over token.
.2457	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2459	f0 19		beq $2474			beq 	_ELMinus
.245b	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.245d	f0 2c		beq $248b			beq 	_ELIndirect
.245f	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2461	f0 28		beq $248b			beq 	_ELIndirect
.2463	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2465	f0 39		beq $24a0			beq 	_ELExtension
.2467	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2469	90 04		bcc $246f			bcc 	_ELUSyntax
.246b	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.246d	90 d1		bcc $2440			bcc 	_ELExecuteA 				; if so do that token.
.246f					_ELUSyntax:
.246f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2471	20 85 11	jsr $1185		jsr	errorHandler
.2474					_ELMinus:
.2474	20 89 25	jsr $2589			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2477	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.2479	f0 0a		beq $2485			beq 	_ELMinusInteger
.247b	8a		txa				txa
.247c	a2 0c		ldx #$0c		ldx	#12
.247e	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2481	aa		tax				tax
.2482	4c 18 24	jmp $2418			jmp 	_ELHasTerm
.2485					_ELMinusInteger:
.2485	20 07 2b	jsr $2b07			jsr 	MInt32Negate 				; do int negate
.2488	4c 18 24	jmp $2418			jmp 	_ELHasTerm
.248b					_ELIndirect:
.248b	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.248c	20 92 25	jsr $2592			jsr 	EvaluateIntegerTerm 		; integer address
.248f	68		pla				pla
.2490	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2492	f0 02		beq $2496			beq 	_ELHaveModifier
.2494	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2496					_ELHaveModifier:
.2496	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2498	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.249a	4c 18 24	jmp $2418			jmp 	_ELHasTerm
.249d					_ELCallTemp0:
.249d	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.24a0					_ELExtension:
.24a0	8a		txa				txa 								; stack pos in A
.24a1	20 43 14	jsr $1443		jsr	extensionHandler
.24a4	aa		tax				tax 								; restore stack
.24a5	4c 18 24	jmp $2418			jmp 	_ELHasTerm
.24a8					UnaryParenthesis:
.24a8	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.24aa	20 bd 23	jsr $23bd			jsr 	EvaluateLevel
.24ad	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; check for )
.24b0	60		rts				rts
.24b1					ELShiftByteIn:
.24b1	48		pha				pha 								; save bits to shift in.
.24b2	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.24b4	48		pha				pha
.24b5	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.24b7	95 60		sta $60,x			sta 	esInt3,x
.24b9	b5 50		lda $50,x			lda 	esInt1,x
.24bb	95 58		sta $58,x			sta 	esInt2,x
.24bd	b5 48		lda $48,x			lda 	esInt0,x
.24bf	95 50		sta $50,x			sta 	esInt1,x
.24c1	a9 00		lda #$00			lda 	#0
.24c3	95 48		sta $48,x			sta 	esInt0,x
.24c5	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.24c6	29 03		and #$03			and 	#3 							; only want lower 2 bits
.24c8	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.24ca					_ELShiftLoop:
.24ca	4a		lsr a				lsr 	a
.24cb	76 60		ror $60,x			ror 	esInt3,x
.24cd	76 58		ror $58,x			ror 	esInt2,x
.24cf	76 50		ror $50,x			ror 	esInt1,x
.24d1	76 48		ror $48,x			ror 	esInt0,x
.24d3	c9 01		cmp #$01			cmp 	#1
.24d5	d0 f3		bne $24ca			bne 	_ELShiftLoop
.24d7	68		pla				pla 								; get original 6 bit value and OR in.
.24d8	29 3f		and #$3f			and 	#$3F
.24da	15 48		ora $48,x			ora 	esInt0,x
.24dc	95 48		sta $48,x			sta 	esInt0,x
.24de	60		rts				rts
.24df					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>24df	01					.byte	$01			; $86 and
>24e0	01					.byte	$01			; $87 or
>24e1	01					.byte	$01			; $88 xor
>24e2	02					.byte	$02			; $89 >=
>24e3	02					.byte	$02			; $8a <=
>24e4	02					.byte	$02			; $8b >
>24e5	02					.byte	$02			; $8c <
>24e6	02					.byte	$02			; $8d =
>24e7	02					.byte	$02			; $8e <>
>24e8	03					.byte	$03			; $8f +
>24e9	03					.byte	$03			; $90 -
>24ea	04					.byte	$04			; $91 >>
>24eb	04					.byte	$04			; $92 <<
>24ec	04					.byte	$04			; $93 *
>24ed	04					.byte	$04			; $94 /
>24ee	04					.byte	$04			; $95 mod
>24ef	05					.byte	$05			; $96 ^
>24f0	06					.byte	$06			; $97 !
>24f1	06					.byte	$06			; $98 ?
>24f2	82					.byte	$82			; $99 repeat
>24f3	82					.byte	$82			; $9a while
>24f4	82					.byte	$82			; $9b for
>24f5	82					.byte	$82			; $9c if
>24f6	82					.byte	$82			; $9d defproc
>24f7	80					.byte	$80			; $9e until
>24f8	80					.byte	$80			; $9f wend
>24f9	80					.byte	$80			; $a0 next
>24fa	80					.byte	$80			; $a1 then
>24fb	80					.byte	$80			; $a2 endif
>24fc	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.24fd					EventFunction:
.24fd	20 f3 25	jsr $25f3			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2500	b5 40		lda $40,x			lda 	esType,x
.2502	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2504	d0 5b		bne $2561			bne 	_EFType
.2506	20 cd 2b	jsr $2bcd			jsr 	CheckComma
.2509	e8		inx				inx
.250a	20 c0 25	jsr $25c0			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.250d	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; finish off with the right bracket
.2510	ca		dex				dex
.2511	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2513	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2515	15 58		ora $58,x			ora 	esInt2,x
.2517	15 60		ora $60,x			ora 	esInt3,x
.2519	d0 41		bne $255c			bne 	_EFValue
.251b	98		tya				tya
.251c	48		pha				pha
.251d	8a		txa				txa
.251e	48		pha				pha
.251f	a2 1c		ldx #$1c		ldx	#28
.2521	20 64 11	jsr $1164		jsr	deviceHandler
.2524	84 2d		sty $2d				sty 	temp1+1
.2526	85 2c		sta $2c				sta 	temp1
.2528	68		pla				pla
.2529	aa		tax				tax
.252a	20 9a 19	jsr $199a			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.252d	a0 03		ldy #$03			ldy 	#3							; if -ve
.252f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2531	30 23		bmi $2556			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2533	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2535	b1 2a		lda ($2a),y			lda 	(temp0),y
.2537	c8		iny				iny
.2538	11 2a		ora ($2a),y			ora 	(temp0),y
.253a	f0 17		beq $2553			beq 	_EFInitialise 				; if so, initialise the value but return false.
.253c	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.253e	38		sec				sec
.253f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2541	e5 2c		sbc $2c				sbc 	temp1
.2543	c8		iny				iny
.2544	b1 2a		lda ($2a),y			lda 	(temp0),y
.2546	e5 2d		sbc $2d				sbc 	temp1+1
.2548	10 0c		bpl $2556			bpl 	_EFFail 					; if trigger >= timer then return False
.254a	20 66 25	jsr $2566			jsr 	SetEventTimer 				; reset the timer for next time.
.254d	20 49 2b	jsr $2b49			jsr	 	MInt32True 					; and treutn true as fired.
.2550	68		pla				pla
.2551	a8		tay				tay
.2552	60		rts				rts
.2553					_EFInitialise:
.2553	20 66 25	jsr $2566			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2556					_EFFail:
.2556	68		pla				pla
.2557	a8		tay				tay
.2558	20 4d 2b	jsr $2b4d			jsr 	MInt32False
.255b	60		rts				rts
.255c					_EFValue:
.255c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.255e	20 85 11	jsr $1185		jsr	errorHandler
.2561					_EFType:
.2561	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2563	20 85 11	jsr $1185		jsr	errorHandler
.2566					SetEventTimer:
.2566	a0 00		ldy #$00			ldy 	#0
.2568	18		clc				clc
.2569	a5 2c		lda $2c				lda 	temp1
.256b	75 49		adc $49,x			adc 	esInt0+1,x
.256d	91 2a		sta ($2a),y			sta		(temp0),y
.256f	c8		iny				iny
.2570	a5 2d		lda $2d				lda 	temp1+1
.2572	75 51		adc $51,x			adc 	esInt1+1,x
.2574	91 2a		sta ($2a),y			sta		(temp0),y
.2576	88		dey				dey
.2577	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2579	d0 04		bne $257f			bne 	_SETExit 					; zero means initialise.....
.257b	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.257d	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.257f					_SETExit:
.257f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2580					EvaluateTerm:
.2580	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2582	20 bd 23	jsr $23bd			jsr 	EvaluateLevel
.2585	20 6c 23	jsr $236c			jsr 	DereferenceOne
.2588	60		rts				rts
.2589					EvaluateNumericTerm:
.2589	20 80 25	jsr $2580			jsr 	EvaluateTerm
.258c	b5 40		lda $40,x			lda 	esType,x
.258e	0a		asl a				asl 	a 							; see if it's a string.
.258f	30 09		bmi $259a			bmi 	ENTType
.2591	60		rts				rts
.2592					EvaluateIntegerTerm:
.2592	20 80 25	jsr $2580			jsr 	EvaluateTerm
.2595	b5 40		lda $40,x			lda 	esType,x
.2597	d0 01		bne $259a			bne 	ENTType
.2599	60		rts				rts
.259a					ENTType:
.259a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.259c	20 85 11	jsr $1185		jsr	errorHandler
.259f					EvaluateRoot:
.259f	a2 00		ldx #$00			ldx 	#0
.25a1					Evaluate:
.25a1	a9 00		lda #$00			lda 	#0
.25a3	20 bd 23	jsr $23bd			jsr 	EvaluateLevel
.25a6	20 6c 23	jsr $236c			jsr 	DereferenceOne
.25a9	60		rts				rts
.25aa					EvaluateNumeric:
.25aa	20 a1 25	jsr $25a1			jsr 	Evaluate
.25ad	b5 40		lda $40,x			lda 	esType,x
.25af	0a		asl a				asl 	a 							; see if it's a string.
.25b0	30 e8		bmi $259a			bmi 	ENTType
.25b2	4a		lsr a				lsr 	a 							; shift float flag into carry.
.25b3	4a		lsr a				lsr 	a
.25b4	60		rts				rts
.25b5					EvaluateString:
.25b5	20 a1 25	jsr $25a1			jsr 	Evaluate
.25b8	b5 40		lda $40,x			lda 	esType,x
.25ba	0a		asl a				asl 	a 							; see if it's a string.
.25bb	10 dd		bpl $259a			bpl 	ENTType
.25bd	60		rts				rts
.25be					EvaluateRootInteger:
.25be	a2 00		ldx #$00			ldx 	#0
.25c0					EvaluateInteger:
.25c0	20 a1 25	jsr $25a1			jsr 	Evaluate
.25c3	b5 40		lda $40,x			lda 	esType,x
.25c5	d0 d3		bne $259a			bne 	ENTType
.25c7	60		rts				rts
.25c8					EvaluateSmallInteger:
.25c8	20 c0 25	jsr $25c0			jsr 	EvaluateInteger
.25cb	b5 50		lda $50,x			lda 	esInt1,x
.25cd	15 58		ora $58,x			ora 	esInt2,x
.25cf	15 60		ora $60,x			ora 	esInt3,x
.25d1	d0 03		bne $25d6			bne 	_ESIValue
.25d3	b5 48		lda $48,x			lda 	esInt0,x
.25d5	60		rts				rts
.25d6					_ESIValue:
.25d6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.25d8	20 85 11	jsr $1185		jsr	errorHandler
.25db					LinkEvaluate:
.25db	aa		tax				tax
.25dc	20 a1 25	jsr $25a1			jsr 	Evaluate
.25df	8a		txa				txa
.25e0	60		rts				rts
.25e1					LinkEvaluateTerm:
.25e1	aa		tax				tax
.25e2	20 80 25	jsr $2580			jsr 	EvaluateTerm
.25e5	8a		txa				txa
.25e6	60		rts				rts
.25e7					LinkEvaluateInteger:
.25e7	aa		tax				tax
.25e8	20 c0 25	jsr $25c0			jsr 	EvaluateInteger
.25eb	8a		txa				txa
.25ec	60		rts				rts
.25ed					LinkEvaluateSmallInt:
.25ed	aa		tax				tax
.25ee	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger
.25f1	8a		txa				txa
.25f2	60		rts				rts
.25f3					EvaluateReference:
.25f3	ad f0 24	lda $24f0			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.25f6	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.25f7	e9 01		sbc #$01			sbc 	#1
.25f9	20 bd 23	jsr $23bd			jsr 	EvaluateLevel
.25fc	b5 40		lda $40,x			lda 	esType,x
.25fe	10 01		bpl $2601			bpl 	_ERFail
.2600	60		rts				rts
.2601					_ERFail:
.2601	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2603	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2606					UnaryLen:
.2606	20 14 26	jsr $2614			jsr 	ULStart
.2609					ULFinish:
.2609	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.260b	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.260d	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit 				; write it out.
.2610	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.2613	60		rts				rts
.2614	20 b5 25	jsr $25b5	ULStart:jsr 	EvaluateString
.2617	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2619	85 2a		sta $2a				sta 	temp0
.261b	b5 50		lda $50,x			lda 	esInt1,x
.261d	85 2b		sta $2b				sta 	temp0+1
.261f	84 32		sty $32				sty 	tempShort 					; get length
.2621	a0 00		ldy #$00			ldy 	#0
.2623	60		rts				rts
.2624					UnaryAsc:
.2624	20 14 26	jsr $2614			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2627	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2629	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.262a	c9 00		cmp #$00			cmp 	#0
.262c	d0 db		bne $2609			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.262e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2630	20 85 11	jsr $1185		jsr	errorHandler
.2633					UnaryAbs:
.2633	20 aa 25	jsr $25aa			jsr 	EvaluateNumeric 			; some numeric value
.2636	b0 07		bcs $263f			bcs 	_UAFloat 					; CS then float, so use that function
.2638	20 02 2b	jsr $2b02			jsr 	MInt32Absolute 				; int version
.263b	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.263e	60		rts				rts
.263f					_UAFloat:
.263f	8a		txa				txa 								; float version
.2640	a2 00		ldx #$00		ldx	#0
.2642	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2645	aa		tax				tax
.2646	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.2649	60		rts				rts
.264a					UnarySgn:
.264a	20 aa 25	jsr $25aa			jsr 	EvaluateNumeric 			; same as above but sign of value
.264d	b0 07		bcs $2656			bcs 	_USFloat
.264f	20 3a 2b	jsr $2b3a			jsr 	MInt32Sign
.2652	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.2655	60		rts				rts
.2656					_USFloat:
.2656	8a		txa				txa
.2657	a2 0e		ldx #$0e		ldx	#14
.2659	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.265c	aa		tax				tax
.265d	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.2660	60		rts				rts
.2661					UnaryPeek:
.2661	20 8d 26	jsr $268d			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2664	4c 81 26	jmp $2681			jmp 	PDLByte0
.2667					UnaryDeek:
.2667	20 8d 26	jsr $268d			jsr 	PDLCode
.266a	4c 7b 26	jmp $267b			jmp 	PDLByte1
.266d					UnaryLeek:
.266d	20 8d 26	jsr $268d			jsr 	PDLCode
.2670	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2672	b1 2a		lda ($2a),y			lda 	(temp0),y
.2674	95 60		sta $60,x			sta 	esInt3,x
.2676	88		dey				dey
.2677	b1 2a		lda ($2a),y			lda 	(temp0),y
.2679	95 58		sta $58,x			sta 	esInt2,x
.267b					PDLByte1:
.267b	a0 01		ldy #$01			ldy 	#1
.267d	b1 2a		lda ($2a),y			lda 	(temp0),y
.267f	95 50		sta $50,x			sta 	esInt1,x
.2681					PDLByte0:
.2681	a0 00		ldy #$00			ldy 	#0
.2683	b1 2a		lda ($2a),y			lda 	(temp0),y
.2685	95 48		sta $48,x			sta 	esInt0,x
.2687	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2689	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; check right and return
.268c	60		rts				rts
.268d					PDLCode:
.268d	20 c0 25	jsr $25c0			jsr 	EvaluateInteger 			; some address
.2690	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2692	85 2a		sta $2a				sta 	temp0
.2694	b5 50		lda $50,x			lda 	esInt1,x
.2696	85 2b		sta $2b				sta 	temp0+1
.2698	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.269a	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.269c	95 58		sta $58,x			sta 	esInt2,x
.269e	95 60		sta $60,x			sta 	esInt3,x
.26a0	84 32		sty $32				sty 	tempShort 					; save Y
.26a2	60		rts				rts
.26a3					Unary_Random:
.26a3	20 7d 2b	jsr $2b7d			jsr 	MInt32Random 				; generate random number.
.26a6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.26a8	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.26aa	f0 08		beq $26b4			beq 	_URExit
.26ac	e8		inx				inx 								; load range 0..r-1 into +1
.26ad	20 c0 25	jsr $25c0			jsr 	EvaluateInteger
.26b0	ca		dex				dex
.26b1	20 a0 29	jsr $29a0			jsr 	MInt32Modulus 				; calculate random % modulus
.26b4					_URExit:
.26b4	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; check right and return
.26b7	60		rts				rts
.26b8					Unary_Min:
.26b8	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.26ba	d0 02		bne $26be			bne 	UnaryMBody
.26bc					Unary_Max:
.26bc	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.26be					UnaryMBody:
.26be	48		pha				pha 								; save comparator on stack, shows min or max
.26bf	20 a1 25	jsr $25a1			jsr 	Evaluate 					; get the first thing to check
.26c2					_UnaryMLoop:
.26c2	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.26c4	c8		iny				iny
.26c5	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.26c7	f0 09		beq $26d2			beq 	_UnaryMExit
.26c9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.26cb	f0 07		beq $26d4			beq 	_UnaryMCompare
.26cd	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.26cf	20 85 11	jsr $1185		jsr	errorHandler
.26d2					_UnaryMExit:
.26d2	68		pla				pla 								; done so throw comparator and return.
.26d3	60		rts				rts
.26d4					_UnaryMCompare:
.26d4	e8		inx				inx 								; get the 2nd thing to evaluate
.26d5	20 a1 25	jsr $25a1			jsr 	Evaluate
.26d8	ca		dex				dex
.26d9	20 6f 22	jsr $226f			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.26dc	85 32		sta $32				sta 	tempShort 					; save result
.26de	68		pla				pla 								; get what we need
.26df	48		pha				pha
.26e0	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.26e2	d0 de		bne $26c2			bne 	_UnaryMLoop 				; no, try another value.
.26e4	20 4d 2b	jsr $2b4d			jsr 	MInt32False 				; promote 2nd to 1st.
.26e7	20 31 2a	jsr $2a31			jsr 	MInt32Add
.26ea	4c c2 26	jmp $26c2			jmp 	_UnaryMLoop
.26ed					Unary_Page:
.26ed	20 4d 2b	jsr $2b4d			jsr 	MInt32False 				; zero
.26f0	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.26f3	95 48		sta $48,x			sta 	esInt0,x
.26f5	ad c9 0a	lda $0ac9			lda 	basePage+1
.26f8	95 50		sta $50,x			sta 	esInt1,x
.26fa	60		rts				rts
.26fb					UnaryReference:
.26fb	a9 0f		lda #$0f			lda 	#15
.26fd	20 bd 23	jsr $23bd			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2700	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2702	10 05		bpl $2709			bpl 	UType
.2704	a9 00		lda #$00			lda 	#0 							; make it an integer
.2706	95 40		sta $40,x			sta 	esType,x
.2708	60		rts				rts
.2709					UType:
.2709	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.270b	20 85 11	jsr $1185		jsr	errorHandler
.270e					UnaryHexMarker:
.270e	4c 92 25	jmp $2592			jmp 	EvaluateIntegerTerm
.2711					UnaryComplement:
.2711	20 92 25	jsr $2592			jsr 	EvaluateIntegerTerm
.2714	20 21 2b	jsr $2b21			jsr 	MInt32Not
.2717	60		rts				rts
.2718					UnaryIntToFloat:
.2718	20 aa 25	jsr $25aa			jsr 	EvaluateNumeric				; some number
.271b	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.271d	d0 0b		bne $272a			bne 	_UIFExit
.271f	8a		txa				txa 								; convert and set type
.2720	a2 1a		ldx #$1a		ldx	#26
.2722	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2725	aa		tax				tax
.2726	a9 01		lda #$01			lda 	#1
.2728	95 40		sta $40,x			sta 	esType,x
.272a					_UIFExit:
.272a	60		rts				rts
.272b					UnaryFloatToInt:
.272b	20 aa 25	jsr $25aa			jsr 	EvaluateNumeric 			; the number
.272e	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2730	f0 0b		beq $273d			beq 	_UFIExit
.2732	8a		txa				txa 								; convert to int
.2733	a2 12		ldx #$12		ldx	#18
.2735	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.2738	aa		tax				tax
.2739	a9 00		lda #$00			lda 	#0 							; set type
.273b	95 40		sta $40,x			sta 	esType,x
.273d					_UFIExit:
.273d	60		rts				rts
.273e					UnaryAlloc:
.273e	e8		inx				inx 								; evaluate memory required
.273f	20 c0 25	jsr $25c0			jsr 	EvaluateInteger
.2742	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.2745	ca		dex				dex
.2746	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2748	15 61		ora $61,x			ora 	esInt3+1,x
.274a	d0 19		bne $2765			bne 	_UABadValue
.274c	20 4d 2b	jsr $2b4d			jsr 	MInt32False					; zero return.
.274f	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2751	95 50		sta $50,x			sta 	esInt1,x
.2753	a5 35		lda $35				lda 	lowMemory
.2755	95 48		sta $48,x			sta 	esInt0,x
.2757	18		clc				clc 								; add alloc required.
.2758	75 49		adc $49,x			adc 	esInt0+1,x
.275a	85 35		sta $35				sta 	lowMemory
.275c	a5 36		lda $36				lda 	lowMemory+1
.275e	75 51		adc $51,x			adc 	esInt1+1,x
.2760	85 36		sta $36				sta 	lowMemory+1
.2762	b0 01		bcs $2765			bcs		_UABadValue 				; overflow definitely bad.
.2764	60		rts				rts
.2765					_UABadValue:
.2765	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2767	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.276a					UnaryTimer:
.276a	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; no parameters
.276d	98		tya				tya
.276e	48		pha				pha
.276f	20 74 2b	jsr $2b74			jsr 	MInt32Zero 					; zero result
.2772	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2774	a2 1c		ldx #$1c		ldx	#28
.2776	20 64 11	jsr $1164		jsr	deviceHandler
.2779	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.277b	95 48		sta $48,x			sta 	esInt0,x
.277d	98		tya				tya
.277e	95 50		sta $50,x			sta 	esInt1,x
.2780	68		pla				pla
.2781	a8		tay				tay
.2782	60		rts				rts
.2783					UnaryInkey:
.2783	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.2786	86 2a		stx $2a				stx 	temp0
.2788	a2 0a		ldx #$0a		ldx	#10
.278a	20 64 11	jsr $1164		jsr	deviceHandler
.278d	a6 2a		ldx $2a				ldx 	temp0
.278f	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit
.2792	60		rts				rts
.2793					UnaryGet:
.2793	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.2796	86 2a		stx $2a				stx 	temp0
.2798					_UGLoop:
.2798	a2 00		ldx #$00		ldx	#0
.279a	20 64 11	jsr $1164		jsr	deviceHandler
.279d	a2 0a		ldx #$0a		ldx	#10
.279f	20 64 11	jsr $1164		jsr	deviceHandler
.27a2	c9 00		cmp #$00			cmp 	#0
.27a4	f0 f2		beq $2798			beq 	_UGLoop
.27a6	a6 2a		ldx $2a				ldx 	temp0
.27a8	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit
.27ab	60		rts				rts
.27ac					UnaryGetString:
.27ac	20 93 27	jsr $2793			jsr 	UnaryGet
.27af					UGSDoChr:
.27af	4c 00 28	jmp $2800			jmp 	ChrCode
.27b2					UnaryInkeyString:
.27b2	20 83 27	jsr $2783			jsr 	UnaryInkey
.27b5	b5 48		lda $48,x			lda 	esInt0,x
.27b7	d0 f6		bne $27af			bne 	UGSDoChr
.27b9	8a		txa				txa
.27ba	a2 06		ldx #$06		ldx	#6
.27bc	20 65 2f	jsr $2f65		jsr	stringHandler
.27bf	aa		tax				tax
.27c0	60		rts				rts
.27c1					UnarySys:
.27c1	20 c0 25	jsr $25c0			jsr 	EvaluateInteger 				; get the address
.27c4	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen
.27c7	20 9a 19	jsr $199a			jsr 	TOSToTemp0 						; copy call address to temp0
.27ca	8a		txa				txa
.27cb	48		pha				pha
.27cc	98		tya				tya
.27cd	48		pha				pha
.27ce	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.27d1	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.27d4	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.27d7	20 e6 27	jsr $27e6			jsr 	_CallTemp0
.27da	85 32		sta $32				sta 	tempShort 						; restore YX
.27dc	68		pla				pla
.27dd	a8		tay				tay
.27de	68		pla				pla
.27df	aa		tax				tax
.27e0	a5 32		lda $32				lda 	tempShort
.27e2	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit 					; return result.
.27e5	60		rts				rts
.27e6					_CallTemp0:
.27e6	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.27e9					UnaryMem:
.27e9	20 4d 2b	jsr $2b4d			jsr 	MInt32False 					; set to false (e.g. 0)
.27ec	38		sec				sec
.27ed	a5 33		lda $33				lda 	highMemory 						; calculate value
.27ef	e5 35		sbc $35				sbc 	lowMemory
.27f1	95 48		sta $48,x			sta 	esInt0,x
.27f3	a5 34		lda $34				lda 	highMemory+1
.27f5	e5 36		sbc $36				sbc 	lowMemory+1
.27f7	95 50		sta $50,x			sta 	esInt1,x
.27f9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.27fa					ExecChr:
.27fa	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger		; character number 0-255
.27fd	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen				; right bracket
.2800					ChrCode:
.2800	98		tya				tya
.2801	48		pha				pha
.2802	8a		txa				txa 								; A = stack
.2803	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2805	a2 00		ldx #$00		ldx	#0
.2807	20 65 2f	jsr $2f65		jsr	stringHandler
.280a	aa		tax				tax 								; X = stack
.280b	68		pla				pla
.280c	a8		tay				tay
.280d	60		rts				rts
.280e					ExecLower:
.280e	38		sec				sec 								; set carry is lower
.280f	b0 01		bcs $2812			bcs 	ExecUpperLower
.2811					ExecUpper:
.2811	18		clc				clc 								; clear carry is upper
.2812					ExecUpperLower:
.2812	08		php				php 								; save carry
.2813	20 b5 25	jsr $25b5			jsr 	EvaluateString 				; string to stack,X
.2816	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; check closing right bracket.
.2819	28		plp				plp 								; restore carry, save Y
.281a	98		tya				tya
.281b	48		pha				pha
.281c	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.281e	2a		rol a				rol 	a
.281f	a8		tay				tay 								; now in Y
.2820	8a		txa				txa 								; do the substring and exit.
.2821	a2 0a		ldx #$0a		ldx	#10
.2823	20 65 2f	jsr $2f65		jsr	stringHandler
.2826	aa		tax				tax
.2827	68		pla				pla
.2828	a8		tay				tay
.2829	60		rts				rts
.282a					ExecLeft:
.282a	20 b5 25	jsr $25b5			jsr 	EvaluateString 				; string to stack,X
.282d	20 cd 2b	jsr $2bcd			jsr 	CheckComma
.2830	e8		inx				inx
.2831	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2833	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit
.2836	e8		inx				inx
.2837	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.283a					ExecSubstring:
.283a	ca		dex				dex 								; fix up X
.283b	ca		dex				dex
.283c	20 c0 2b	jsr $2bc0			jsr 	CheckRightParen 			; check closing right bracket.
.283f	8a		txa				txa 								; do the substring and exit.
.2840	a2 0c		ldx #$0c		ldx	#12
.2842	20 65 2f	jsr $2f65		jsr	stringHandler
.2845	aa		tax				tax
.2846	60		rts				rts
.2847					ExecMid:
.2847	20 b5 25	jsr $25b5			jsr 	EvaluateString 				; string to stack,X
.284a	20 cd 2b	jsr $2bcd			jsr 	CheckComma
.284d	e8		inx				inx
.284e	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2851	c9 00		cmp #$00			cmp 	#0
.2853	f0 15		beq $286a			beq 	_EMValue
.2855	e8		inx				inx
.2856	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2858	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit
.285b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.285d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.285f	f0 d9		beq $283a			beq 	ExecSubString
.2861	20 cd 2b	jsr $2bcd			jsr 	CheckComma
.2864	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2867	4c 3a 28	jmp $283a			jmp 	ExecSubString
.286a					_EMValue:
.286a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.286c	20 85 11	jsr $1185		jsr	errorHandler
.286f					ExecRight:
.286f	20 b5 25	jsr $25b5			jsr 	EvaluateString 				; string to stack,X
.2872	20 cd 2b	jsr $2bcd			jsr 	CheckComma
.2875	e8		inx				inx
.2876	20 c8 25	jsr $25c8			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2879	ca		dex				dex
.287a	98		tya				tya
.287b	48		pha				pha
.287c	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.287e	85 2a		sta $2a				sta 	temp0
.2880	b5 50		lda $50,x			lda 	esInt1,x
.2882	85 2b		sta $2b				sta 	temp0+1
.2884	a0 00		ldy #$00			ldy 	#0 							; point to length
.2886	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2888	18		clc				clc 								; add 1.
.2889	69 01		adc #$01			adc 	#1
.288b	38		sec				sec
.288c	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.288e	f0 02		beq $2892			beq		_ERMake1 					; if zero, make it 1.
.2890	b0 02		bcs $2894			bcs		_EROkay
.2892					_ERMake1:
.2892	a9 01		lda #$01			lda 	#1 							; start position.
.2894					_EROkay:
.2894	e8		inx				inx 								; set start pos.
.2895	95 48		sta $48,x			sta 	esInt0,x
.2897	e8		inx				inx
.2898	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.289a	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit
.289d	68		pla				pla
.289e	a8		tay				tay
.289f	4c 3a 28	jmp $283a			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.28a2					MInt32And:
.28a2	b5 48		lda $48,x			lda 	esInt0,x
.28a4	35 49		and $49,x			and 	esInt0+1,x
.28a6	95 48		sta $48,x			sta 	esInt0,x
.28a8	b5 50		lda $50,x			lda 	esInt1,x
.28aa	35 51		and $51,x			and 	esInt1+1,x
.28ac	95 50		sta $50,x			sta 	esInt1,x
.28ae	b5 58		lda $58,x			lda 	esInt2,x
.28b0	35 59		and $59,x			and 	esInt2+1,x
.28b2	95 58		sta $58,x			sta 	esInt2,x
.28b4	b5 60		lda $60,x			lda 	esInt3,x
.28b6	35 61		and $61,x			and 	esInt3+1,x
.28b8	95 60		sta $60,x			sta 	esInt3,x
.28ba	60		rts				rts
.28bb					MInt32Or:
.28bb	b5 48		lda $48,x			lda 	esInt0,x
.28bd	15 49		ora $49,x			ora 	esInt0+1,x
.28bf	95 48		sta $48,x			sta 	esInt0,x
.28c1	b5 50		lda $50,x			lda 	esInt1,x
.28c3	15 51		ora $51,x			ora 	esInt1+1,x
.28c5	95 50		sta $50,x			sta 	esInt1,x
.28c7	b5 58		lda $58,x			lda 	esInt2,x
.28c9	15 59		ora $59,x			ora 	esInt2+1,x
.28cb	95 58		sta $58,x			sta 	esInt2,x
.28cd	b5 60		lda $60,x			lda 	esInt3,x
.28cf	15 61		ora $61,x			ora 	esInt3+1,x
.28d1	95 60		sta $60,x			sta 	esInt3,x
.28d3	60		rts				rts
.28d4					MInt32Xor:
.28d4	b5 48		lda $48,x			lda 	esInt0,x
.28d6	55 49		eor $49,x			eor 	esInt0+1,x
.28d8	95 48		sta $48,x			sta 	esInt0,x
.28da	b5 50		lda $50,x			lda 	esInt1,x
.28dc	55 51		eor $51,x			eor 	esInt1+1,x
.28de	95 50		sta $50,x			sta 	esInt1,x
.28e0	b5 58		lda $58,x			lda 	esInt2,x
.28e2	55 59		eor $59,x			eor 	esInt2+1,x
.28e4	95 58		sta $58,x			sta 	esInt2,x
.28e6	b5 60		lda $60,x			lda 	esInt3,x
.28e8	55 61		eor $61,x			eor 	esInt3+1,x
.28ea	95 60		sta $60,x			sta 	esInt3,x
.28ec	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.28ed					MInt32Compare:
.28ed	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.28ef	d5 49		cmp $49,x			cmp 	esInt0+1,x
.28f1	d0 13		bne $2906			bne 	MInt32Compare2
.28f3	b5 50		lda $50,x			lda 	esInt1,x
.28f5	d5 51		cmp $51,x			cmp 	esInt1+1,x
.28f7	d0 0d		bne $2906			bne 	MInt32Compare2
.28f9	b5 58		lda $58,x			lda 	esInt2,x
.28fb	d5 59		cmp $59,x			cmp 	esInt2+1,x
.28fd	d0 07		bne $2906			bne 	MInt32Compare2
.28ff	b5 60		lda $60,x			lda 	esInt3,x
.2901	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2903	d0 01		bne $2906			bne 	MInt32Compare2
.2905	60		rts				rts
.2906					MInt32Compare2:
.2906	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2908	d5 49		cmp $49,x			cmp 	esInt0+1,x
.290a	b5 50		lda $50,x			lda		esInt1,x
.290c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.290e	b5 58		lda $58,x			lda		esInt2,x
.2910	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2912	b5 60		lda $60,x			lda		esInt3,x
.2914	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2916	50 02		bvc $291a			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2918	49 80		eor #$80			eor 	#$80
.291a					_I32LNoOverflow
.291a	30 03		bmi $291f			bmi 	MInt32CLess					; if -ve then return $FF
.291c	a9 01		lda #$01			lda 	#$01						; else return $01
.291e	60		rts				rts
.291f					MInt32CLess:
.291f	a9 ff		lda #$ff			lda 	#$FF
.2921	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2922					MInt32SDivide:
.2922	98		tya				tya  								; save Y, which is the count of negations
.2923	48		pha				pha
.2924	a0 00		ldy #$00			ldy 	#0 							; zero count
.2926	20 3e 29	jsr $293e			jsr 	_MInt32SRemSign 			; unsign TOS
.2929	e8		inx				inx 								; unsign TOS+1
.292a	20 3e 29	jsr $293e			jsr 	_MInt32SRemSign
.292d	ca		dex				dex
.292e	98		tya				tya 								; save sign count on stack
.292f	48		pha				pha
.2930	20 47 29	jsr $2947			jsr 	MInt32UDivide 				; unsigned division
.2933	68		pla				pla 								; get sign count back
.2934	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2936	f0 03		beq $293b			beq 	_I32SNoNeg
.2938	20 07 2b	jsr $2b07			jsr 	MInt32Negate
.293b					_I32SNoNeg:
.293b	68		pla				pla 								; restoe Y and exit
.293c	a8		tay				tay
.293d	60		rts				rts
.293e					_MInt32SRemSign:
.293e	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2940	10 04		bpl $2946			bpl 	_MInt32SRSExit
.2942	c8		iny				iny 								; increment the sign count
.2943	20 07 2b	jsr $2b07			jsr 	MInt32Negate 				; negate the value.
.2946					_MInt32SRSExit:
.2946	60		rts				rts
.2947					MInt32UDivide:
.2947	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2949	15 51		ora $51,x			ora 	esInt1+1,x
.294b	15 52		ora $52,x			ora 	esInt1+2,x
.294d	15 53		ora $53,x			ora 	esInt1+3,x
.294f	f0 4a		beq $299b			beq 	_MInt32DZero
.2951	e8		inx				inx 								; clear A
.2952	e8		inx				inx
.2953	20 4d 2b	jsr $2b4d			jsr 	MInt32False
.2956	ca		dex				dex
.2957	ca		dex				dex
.2958	98		tya				tya 								; save Y on the stack
.2959	48		pha				pha
.295a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.295c					_MInt32UDLoop:
.295c	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.295e	36 50		rol $50,x			rol 	esInt1,x
.2960	36 58		rol $58,x			rol 	esInt2,x
.2962	36 60		rol $60,x			rol 	esInt3,x
.2964	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2966	36 52		rol $52,x			rol 	esInt1+2,x
.2968	36 5a		rol $5a,x			rol 	esInt2+2,x
.296a	36 62		rol $62,x			rol 	esInt3+2,x
.296c	38		sec				sec 								; calculate A-M saving result on the stack
.296d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.296f	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2971	48		pha				pha
.2972	b5 52		lda $52,x			lda 	esInt1+2,x
.2974	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2976	48		pha				pha
.2977	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2979	f5 59		sbc $59,x			sbc 	esInt2+1,x
.297b	48		pha				pha
.297c	b5 62		lda $62,x			lda 	esInt3+2,x
.297e	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2980	90 10		bcc $2992			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2982	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2984	68		pla				pla
.2985	95 5a		sta $5a,x			sta 	esInt2+2,x
.2987	68		pla				pla
.2988	95 52		sta $52,x			sta 	esInt1+2,x
.298a	68		pla				pla
.298b	95 4a		sta $4a,x			sta 	esInt0+2,x
.298d	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.298f	4c 95 29	jmp $2995			jmp 	_MInt32Next 					; do the next iteration
.2992					_MInt32NoSubtract:
.2992	68		pla				pla
.2993	68		pla				pla
.2994	68		pla				pla
.2995					_MInt32Next:
.2995	88		dey				dey 								; do this 32 times.
.2996	d0 c4		bne $295c			bne 	_MInt32UDLoop
.2998	68		pla				pla 								; restore Y and exit
.2999	a8		tay				tay
.299a	60		rts				rts
.299b					_MInt32DZero:
.299b	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.299d	20 85 11	jsr $1185		jsr	errorHandler
.29a0					MInt32Modulus:
.29a0	20 47 29	jsr $2947			jsr 	MInt32UDivide 				; do the division.
.29a3	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.29a5	95 60		sta $60,x			sta 	esInt3,x
.29a7	b5 5a		lda $5a,x			lda 	esInt2+2,x
.29a9	95 58		sta $58,x			sta 	esInt2,x
.29ab	b5 52		lda $52,x			lda 	esInt1+2,x
.29ad	95 50		sta $50,x			sta 	esInt1,x
.29af	b5 4a		lda $4a,x			lda 	esInt0+2,x
.29b1	95 48		sta $48,x			sta 	esInt0,x
.29b3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c0e					fs32Length:
>0c0e							.fill 	1
.29b4					LinkInt32FromString:
.29b4	aa		tax				tax
.29b5	98		tya				tya
.29b6	20 bb 29	jsr $29bb			jsr 	MInt32FromString
.29b9	8a		txa				txa
.29ba	60		rts				rts
.29bb					MInt32FromString:
.29bb	85 32		sta $32				sta 	tempShort 					; save base
.29bd	98		tya				tya
.29be	48		pha				pha
.29bf	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.29c1	b1 2a		lda ($2a),y			lda 	(temp0),y
.29c3	8d 0e 0c	sta $0c0e			sta 	fs32Length
.29c6	f0 65		beq $2a2d			beq 	_I32FSFail2					; fail if length zero.
.29c8	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.29ca	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.29cc	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.29ce	d0 09		bne $29d9			bne 	_I32FSNotNegative
.29d0	ad 0e 0c	lda $0c0e			lda 	fs32Length 					; get length back.
.29d3	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.29d5	f0 56		beq $2a2d			beq 	_I32FSFail2
.29d7	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.29d9					_I32FSNotNegative:
.29d9	a5 32		lda $32				lda 	tempShort 					; get the base back.
.29db	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.29dd	d0 02		bne $29e1			bne 	_I32FSNN2
.29df	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.29e1					_I32FSNN2:
.29e1	48		pha				pha 								; save base + final sign on stack.
.29e2	20 4d 2b	jsr $2b4d			jsr 	MInt32False 				; zero the return value.
.29e5					_I32FSMainLoop:
.29e5	68		pla				pla 								; get the base back into tempShort
.29e6	48		pha				pha
.29e7	29 7f		and #$7f			and 	#$7F
.29e9	85 32		sta $32				sta 	tempShort
.29eb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.29ed	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.29ef	90 02		bcc $29f3			bcc 	_I32FSNotLC
.29f1	e9 20		sbc #$20			sbc 	#32
.29f3					_I32FSNotLC:
.29f3	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.29f4	e9 30		sbc #$30			sbc 	#"0"
.29f6	90 34		bcc $2a2c			bcc 	_I32FSFail 					; nothing more to do.
.29f8	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.29fa	90 06		bcc $2a02			bcc 	_I32FSValidate
.29fc	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.29fe	90 2c		bcc $2a2c			bcc 	_I32FSFail
.2a00	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2a02					_I32FSValidate:
.2a02	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2a04	b0 26		bcs $2a2c			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2a06	48		pha				pha 								; save the new digit value.
.2a07	e8		inx				inx 								; put base into next slot up on stack
.2a08	a5 32		lda $32				lda 	tempShort
.2a0a	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit
.2a0d	ca		dex				dex
.2a0e	20 65 2a	jsr $2a65			jsr 	MInt32Multiply 				; multiply current by the base
.2a11	e8		inx				inx
.2a12	68		pla				pla  								; put additive into next slot
.2a13	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit
.2a16	ca		dex				dex
.2a17	20 31 2a	jsr $2a31			jsr 	MInt32Add 					; and add it
.2a1a	c8		iny				iny 								; bump the character pointer
.2a1b	cc 0e 0c	cpy $0c0e			cpy 	fs32Length 					; until > length.
.2a1e	f0 c5		beq $29e5			beq 	_I32FSMainLoop
.2a20	90 c3		bcc $29e5			bcc 	_I32FSMainLoop
.2a22					_I32FSDone:
.2a22	68		pla				pla 								; get base/final sign back
.2a23	10 03		bpl $2a28			bpl 	_I32FSNN3
.2a25	20 07 2b	jsr $2b07			jsr 	MInt32Negate 				; negate the result.
.2a28					_I32FSNN3:
.2a28	68		pla				pla
.2a29	a8		tay				tay
.2a2a	38		sec				sec
.2a2b	60		rts				rts
.2a2c					_I32FSFail:
.2a2c	68		pla				pla
.2a2d					_I32FSFail2:
.2a2d	68		pla				pla
.2a2e	a8		tay				tay
.2a2f	18		clc				clc
.2a30	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2a31					MInt32Add:
.2a31	18		clc				clc
.2a32	b5 48		lda $48,x			lda 	esInt0,x
.2a34	75 49		adc $49,x			adc 	esInt0+1,x
.2a36	95 48		sta $48,x			sta 	esInt0,x
.2a38	b5 50		lda $50,x			lda 	esInt1,x
.2a3a	75 51		adc $51,x			adc 	esInt1+1,x
.2a3c	95 50		sta $50,x			sta 	esInt1,x
.2a3e	b5 58		lda $58,x			lda 	esInt2,x
.2a40	75 59		adc $59,x			adc 	esInt2+1,x
.2a42	95 58		sta $58,x			sta 	esInt2,x
.2a44	b5 60		lda $60,x			lda 	esInt3,x
.2a46	75 61		adc $61,x			adc 	esInt3+1,x
.2a48	95 60		sta $60,x			sta 	esInt3,x
.2a4a	60		rts				rts
.2a4b					MInt32Sub:
.2a4b	38		sec				sec
.2a4c	b5 48		lda $48,x			lda 	esInt0,x
.2a4e	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2a50	95 48		sta $48,x			sta 	esInt0,x
.2a52	b5 50		lda $50,x			lda 	esInt1,x
.2a54	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2a56	95 50		sta $50,x			sta 	esInt1,x
.2a58	b5 58		lda $58,x			lda 	esInt2,x
.2a5a	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2a5c	95 58		sta $58,x			sta 	esInt2,x
.2a5e	b5 60		lda $60,x			lda 	esInt3,x
.2a60	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2a62	95 60		sta $60,x			sta 	esInt3,x
.2a64	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2a65					MInt32Multiply:
.2a65	e8		inx				inx 								; copy 2nd -> 3rd
.2a66	20 8b 2a	jsr $2a8b			jsr 	MInt32CopyUp
.2a69	ca		dex				dex
.2a6a	20 8b 2a	jsr $2a8b			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2a6d	20 4d 2b	jsr $2b4d			jsr 	MInt32False 				; zero 1st.
.2a70					_I32Loop:
.2a70	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2a72	29 01		and #$01			and 	#1
.2a74	f0 03		beq $2a79			beq 	_I32NoAdd 					; if set
.2a76	20 31 2a	jsr $2a31			jsr 	MInt32Add 					; add 2nd to 1st.
.2a79					_I32NoAdd:
.2a79	e8		inx				inx 								; shift 2nd left
.2a7a	20 62 2b	jsr $2b62			jsr 	MInt32ShiftLeft
.2a7d	e8		inx				inx  								; shift 3rd right
.2a7e	20 6b 2b	jsr $2b6b			jsr 	MInt32ShiftRight
.2a81	20 74 2b	jsr $2b74			jsr 	MInt32Zero 					; check if zero.
.2a84	08		php				php 								; save status bits
.2a85	ca		dex				dex 	 							; point back to 1st
.2a86	ca		dex				dex
.2a87	28		plp				plp 								; get status bits
.2a88	d0 e6		bne $2a70			bne 	_I32Loop 					; if non-zero keep going.
.2a8a	60		rts				rts
.2a8b					MInt32CopyUp:
.2a8b	b5 48		lda $48,x			lda 	esInt0,x
.2a8d	95 49		sta $49,x			sta 	esInt0+1,x
.2a8f	b5 50		lda $50,x			lda 	esInt1,x
.2a91	95 51		sta $51,x			sta 	esInt1+1,x
.2a93	b5 58		lda $58,x			lda 	esInt2,x
.2a95	95 59		sta $59,x			sta 	esInt2+1,x
.2a97	b5 60		lda $60,x			lda 	esInt3,x
.2a99	95 61		sta $61,x			sta 	esInt3+1,x
.2a9b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c0f					MCharCount:	.fill 	1						; count of converted characters
.2a9c					MLInt32ToString:
.2a9c	aa		tax				tax									; module passes stack in A, base in Y
.2a9d	98		tya				tya
.2a9e	20 a3 2a	jsr $2aa3			jsr 	MInt32ToString
.2aa1	8a		txa				txa
.2aa2	60		rts				rts
.2aa3					MInt32ToString:
.2aa3	48		pha				pha 								; save base
.2aa4	85 32		sta $32				sta 	tempShort 					; save target base.
.2aa6	a9 00		lda #$00			lda 	#0
.2aa8	8d 0f 0c	sta $0c0f			sta 	MCharCount 					; clear character count to 0
.2aab	98		tya				tya
.2aac	48		pha				pha
.2aad	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2aaf	10 10		bpl $2ac1			bpl 	_I32TSUnsigned
.2ab1	48		pha				pha 								; save base on stack.
.2ab2	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2ab4	10 08		bpl $2abe			bpl 	_I32TSNoFlip
.2ab6	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2ab8	20 f4 2a	jsr $2af4			jsr 	MI32WriteCharacter
.2abb	20 07 2b	jsr $2b07			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2abe					_I32TSNoFlip:
.2abe	68		pla				pla 								; get the base back
.2abf	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2ac1					_I32TSUnsigned:
.2ac1	20 cf 2a	jsr $2acf			jsr 	MI32DivideWrite 			; recursive code to output string.
.2ac4	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2ac6	ad 0f 0c	lda $0c0f			lda 	MCharCount
.2ac9	91 2a		sta ($2a),y			sta 	(temp0),y
.2acb	68		pla				pla
.2acc	a8		tay				tay
.2acd	68		pla				pla
.2ace	60		rts				rts
.2acf					MI32DivideWrite:
.2acf	48		pha				pha 								; save the divisor/base
.2ad0	e8		inx				inx 								; write in the dividing position.
.2ad1	20 5c 2b	jsr $2b5c			jsr 	MInt32Set8Bit
.2ad4	ca		dex				dex
.2ad5	20 47 29	jsr $2947			jsr 	MInt32UDivide 				; divide number by base.
.2ad8	68		pla				pla 								; get the base into Y
.2ad9	a8		tay				tay
.2ada	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2adc	48		pha				pha
.2add	20 74 2b	jsr $2b74			jsr 	MInt32Zero 					; is the result zero ?
.2ae0	f0 04		beq $2ae6			beq 	_I32NoRecurse 				; if so, don't recurse.
.2ae2	98		tya				tya 								; put base into A
.2ae3	20 cf 2a	jsr $2acf			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2ae6					_I32NoRecurse:
.2ae6	68		pla				pla 								; get the remainder back
.2ae7	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2ae9	90 02		bcc $2aed			bcc 	_I32NotHex
.2aeb	69 06		adc #$06			adc 	#7-1
.2aed					_I32NotHex:
.2aed	18		clc				clc 								; make it ASCII
.2aee	69 30		adc #$30			adc 	#48
.2af0	20 f4 2a	jsr $2af4			jsr 	MI32WriteCharacter 			; write the character out
.2af3	60		rts				rts 								; and exit.
.2af4					MI32WriteCharacter:
.2af4	ee 0f 0c	inc $0c0f			inc 	MCharCount 					; bump count (space for leading count)
.2af7	ac 0f 0c	ldy $0c0f			ldy 	MCharCount 					; get position
.2afa	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2afc	c8		iny				iny
.2afd	a9 00		lda #$00			lda 	#0
.2aff	91 2a		sta ($2a),y			sta 	(temp0),y
.2b01	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c10					MSeed32:	.fill 	4							; random number seed.
.2b02					MInt32Absolute:
.2b02	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2b04	30 01		bmi $2b07			bmi 	MInt32Negate
.2b06	60		rts				rts
.2b07					MInt32Negate:
.2b07	38		sec				sec 								; subtract from zero.
.2b08	a9 00		lda #$00			lda 	#0
.2b0a	f5 48		sbc $48,x			sbc 	esInt0,x
.2b0c	95 48		sta $48,x			sta 	esInt0,x
.2b0e	a9 00		lda #$00			lda 	#0
.2b10	f5 50		sbc $50,x			sbc 	esInt1,x
.2b12	95 50		sta $50,x			sta 	esInt1,x
.2b14	a9 00		lda #$00			lda 	#0
.2b16	f5 58		sbc $58,x			sbc 	esInt2,x
.2b18	95 58		sta $58,x			sta 	esInt2,x
.2b1a	a9 00		lda #$00			lda 	#0
.2b1c	f5 60		sbc $60,x			sbc 	esInt3,x
.2b1e	95 60		sta $60,x			sta 	esInt3,x
.2b20	60		rts				rts
.2b21					MInt32Not:
.2b21	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2b23	49 ff		eor #$ff			eor 	#$FF
.2b25	95 48		sta $48,x			sta 	esInt0,x
.2b27	b5 50		lda $50,x			lda 	esInt1,x
.2b29	49 ff		eor #$ff			eor 	#$FF
.2b2b	95 50		sta $50,x			sta 	esInt1,x
.2b2d	b5 58		lda $58,x			lda 	esInt2,x
.2b2f	49 ff		eor #$ff			eor 	#$FF
.2b31	95 58		sta $58,x			sta 	esInt2,x
.2b33	b5 60		lda $60,x			lda 	esInt3,x
.2b35	49 ff		eor #$ff			eor 	#$FF
.2b37	95 60		sta $60,x			sta 	esInt3,x
.2b39	60		rts				rts
.2b3a					MInt32Sign:
.2b3a	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2b3c	30 0b		bmi $2b49			bmi 	MInt32True 					; if set return -1 (true)
.2b3e	20 74 2b	jsr $2b74			jsr 	MInt32Zero 					; is it zero ?
.2b41	f0 0a		beq $2b4d			beq 	MInt32False 				; if zero return 0 (false)
.2b43	20 4d 2b	jsr $2b4d			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2b46	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2b48	60		rts				rts
.2b49					MInt32True:
.2b49	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2b4b	d0 02		bne $2b4f			bne 	MInt32WriteAll
.2b4d					MInt32False:
.2b4d	a9 00		lda #$00			lda 	#0
.2b4f					MInt32WriteAll:
.2b4f	95 48		sta $48,x			sta 	esInt0,x
.2b51					MInt32Write123:
.2b51	95 50		sta $50,x			sta 	esInt1,x
.2b53	95 58		sta $58,x			sta 	esInt2,x
.2b55	95 60		sta $60,x			sta 	esInt3,x
.2b57	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2b59	95 40		sta $40,x			sta 	esType,x
.2b5b	60		rts				rts
.2b5c					MInt32Set8Bit:
.2b5c	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2b5e	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2b60	f0 ef		beq $2b51			beq		MInt32Write123
.2b62					MInt32ShiftLeft:
.2b62	16 48		asl $48,x			asl 	esInt0,x
.2b64	36 50		rol $50,x			rol	 	esInt1,x
.2b66	36 58		rol $58,x			rol	 	esInt2,x
.2b68	36 60		rol $60,x			rol	 	esInt3,x
.2b6a	60		rts				rts
.2b6b					MInt32ShiftRight:
.2b6b	56 60		lsr $60,x			lsr 	esInt3,x
.2b6d	76 58		ror $58,x			ror 	esInt2,x
.2b6f	76 50		ror $50,x			ror 	esInt1,x
.2b71	76 48		ror $48,x			ror 	esInt0,x
.2b73	60		rts				rts
.2b74					MInt32Zero:
.2b74	b5 48		lda $48,x			lda 	esInt0,x
.2b76	15 50		ora $50,x			ora 	esInt1,x
.2b78	15 58		ora $58,x			ora 	esInt2,x
.2b7a	15 60		ora $60,x			ora 	esInt3,x
.2b7c	60		rts				rts
.2b7d					MInt32Random:
.2b7d	98		tya				tya
.2b7e	48		pha				pha
.2b7f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2b81	ad 10 0c	lda $0c10			lda 	MSeed32+0 					; check the seed isn't zero
.2b84	d0 03		bne $2b89			bne 	_Random1
.2b86	a8		tay				tay 								; if so do it 256 times
.2b87	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2b89					_Random1:
.2b89	0a		asl a				asl 	a
.2b8a	2e 11 0c	rol $0c11			rol 	MSeed32+1
.2b8d	2e 12 0c	rol $0c12			rol 	MSeed32+2
.2b90	2e 13 0c	rol $0c13			rol 	MSeed32+3
.2b93	90 02		bcc $2b97			bcc 	_Random2
.2b95	49 c5		eor #$c5			eor 	#$C5
.2b97					_Random2:
.2b97	88		dey				dey
.2b98	d0 ef		bne $2b89			bne 	_Random1
.2b9a	8d 10 0c	sta $0c10			sta 	MSeed32+0 					; copy the seed in.
.2b9d	95 48		sta $48,x			sta 	esInt0,x
.2b9f	ad 11 0c	lda $0c11			lda 	MSeed32+1
.2ba2	95 50		sta $50,x			sta 	esInt1,x
.2ba4	ad 12 0c	lda $0c12			lda 	MSeed32+2
.2ba7	95 58		sta $58,x			sta 	esInt2,x
.2ba9	ad 13 0c	lda $0c13			lda 	MSeed32+3
.2bac	95 60		sta $60,x			sta 	esInt3,x
.2bae	68		pla				pla
.2baf	a8		tay				tay
.2bb0	a9 00		lda #$00			lda 	#0
.2bb2	95 40		sta $40,x			sta 	esType,x
.2bb4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2bb5					CheckToken:
.2bb5	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2bb7	d0 02		bne $2bbb			bne 	_CTError
.2bb9	c8		iny				iny
.2bba	60		rts				rts
.2bbb					_CTError:
.2bbb	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2bbd	20 85 11	jsr $1185		jsr	errorHandler
.2bc0					CheckRightParen:
.2bc0	b1 28		lda ($28),y			lda 	(codePtr),y
.2bc2	c8		iny				iny
.2bc3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2bc5	d0 01		bne $2bc8			bne 	_CRPError
.2bc7	60		rts				rts
.2bc8					_CRPError:
.2bc8	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2bca	20 85 11	jsr $1185		jsr	errorHandler
.2bcd					CheckComma:
.2bcd	b1 28		lda ($28),y			lda 	(codePtr),y
.2bcf	c8		iny				iny
.2bd0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2bd2	d0 01		bne $2bd5			bne 	_CCError
.2bd4	60		rts				rts
.2bd5					_CCError:
.2bd5	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2bd7	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2bda					ScanForward:
.2bda	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2bdc	86 2d		stx $2d				stx 	temp1+1
.2bde	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2be0	85 2e		sta $2e				sta 	temp2
.2be2	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2be4	c8		iny				iny
.2be5	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2be7	d0 08		bne $2bf1			bne 	_SFNoCheck 					; if so, check token against entered values.
.2be9	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2beb	f0 24		beq $2c11			beq 	_SFExit 					; at the same strcture depth.
.2bed	c5 2d		cmp $2d				cmp 	temp1+1
.2bef	f0 20		beq $2c11			beq 	_SFExit
.2bf1					_SFNoCheck:
.2bf1	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2bf3	90 ed		bcc $2be2			bcc 	_SFLoop
.2bf5	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2bf7	90 19		bcc $2c12			bcc 	_SFSpecials
.2bf9	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2bfb	90 e5		bcc $2be2			bcc 	_SFLoop
.2bfd	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2bff	b0 e1		bcs $2be2			bcs 	_SFLoop
.2c01	aa		tax				tax  								; token in X, and look up the adjuster.
.2c02	bd 59 24	lda $2459,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2c05	38		sec				sec 								; convert to an offset ($FF,$01)
.2c06	e9 81		sbc #$81			sbc 	#$81
.2c08	18		clc				clc 								; add to depth
.2c09	65 2e		adc $2e				adc 	temp2
.2c0b	85 2e		sta $2e				sta 	temp2
.2c0d	10 d3		bpl $2be2			bpl 	_SFLoop 					; +ve okay to continue
.2c0f	30 35		bmi $2c46			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2c11	60		rts		_SFExit:rts
.2c12					_SFSpecials:
.2c12	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2c14	f0 14		beq $2c2a			beq 	_SFNextLine
.2c16	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2c18	f0 31		beq $2c4b			beq 	_SFFloatSkip
.2c1a	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2c1c	f0 04		beq $2c22			beq 	_SFSkipString
.2c1e	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2c1f	4c e2 2b	jmp $2be2			jmp 	_SFLoop 					; token.
.2c22					_SFSkipString:
.2c22	98		tya				tya
.2c23	38		sec				sec
.2c24	71 28		adc ($28),y			adc 	(codePtr),y
.2c26	a8		tay				tay
.2c27	4c e2 2b	jmp $2be2			jmp 	_SFLoop
.2c2a					_SFNextLine:
.2c2a	a0 00		ldy #$00			ldy 	#0 							; get offset
.2c2c	b1 28		lda ($28),y			lda 	(codePtr),y
.2c2e	18		clc				clc 								; add to code pointer.
.2c2f	65 28		adc $28				adc 	codePtr
.2c31	85 28		sta $28				sta 	codePtr
.2c33	90 02		bcc $2c37			bcc		_SFNLNoCarry
.2c35	e6 29		inc $29				inc 	codePtr+1
.2c37					_SFNLNoCarry:
.2c37	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2c39	d0 a7		bne $2be2			bne		_SFLoop 					; no go round again
.2c3b	a5 2c		lda $2c				lda 	temp1
.2c3d	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.2c3f	d0 05		bne $2c46			bne 	_SFError 					; read uses this to search for data statements
.2c41	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2c43	20 85 11	jsr $1185		jsr	errorHandler
.2c46					_SFError:
.2c46	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2c48	20 85 11	jsr $1185		jsr	errorHandler
.2c4b					_SFFloatSkip:
.2c4b	4c 1c 1e	jmp $1e1c			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2c4e					RSReset:
.2c4e	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2c50	85 78		sta $78				sta 	rsPointer
.2c52	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2c54	85 79		sta $79				sta 	1+(rsPointer)
.2c56	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2c58	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2c5b	60		rts				rts
.2c5c					RSClaim:
.2c5c	84 32		sty $32				sty 	tempShort 					; preserve Y
.2c5e	48		pha				pha 								; save marker on stack.
.2c5f	8a		txa				txa 								; get bytes required.
.2c60	38		sec				sec
.2c61	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2c63	65 78		adc $78				adc 	rsPointer
.2c65	85 78		sta $78				sta 	rsPointer
.2c67	a5 79		lda $79				lda 	rsPointer+1
.2c69	69 ff		adc #$ff			adc 	#$FF
.2c6b	85 79		sta $79				sta 	rsPointer+1
.2c6d	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2c6f	90 08		bcc $2c79			bcc 	_RSCOverflow
.2c71	68		pla				pla 								; get marker back
.2c72	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2c74	91 78		sta ($78),y			sta 	(rsPointer),y
.2c76	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2c78	60		rts				rts
.2c79					_RSCOverflow:
.2c79	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2c7b	20 85 11	jsr $1185		jsr	errorHandler
.2c7e					RSFree:
.2c7e	18		clc				clc
.2c7f	65 78		adc $78				adc 	rsPointer
.2c81	85 78		sta $78				sta 	rsPointer
.2c83	90 02		bcc $2c87			bcc 	_RSFExit
.2c85	e6 79		inc $79				inc 	rsPointer+1
.2c87					_RSFExit:
.2c87	60		rts				rts
.2c88					RSSavePosition:
.2c88	84 32		sty $32				sty 	tempShort 					; save Y position
.2c8a	a8		tay				tay 								; this is where we write it.
.2c8b	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2c8d	91 78		sta ($78),y			sta 	(rsPointer),y
.2c8f	c8		iny				iny
.2c90	a5 29		lda $29				lda 	codePtr+1
.2c92	91 78		sta ($78),y			sta 	(rsPointer),y
.2c94	c8		iny				iny
.2c95	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2c97	91 78		sta ($78),y			sta 	(rsPointer),y
.2c99	a8		tay				tay 								; fix Y back again to original value
.2c9a	60		rts				rts
.2c9b					RSLoadPosition:
.2c9b	a8		tay				tay
.2c9c	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2c9e	85 28		sta $28				sta 	codePtr
.2ca0	c8		iny				iny
.2ca1	b1 78		lda ($78),y			lda 	(rsPointer),y
.2ca3	85 29		sta $29				sta 	codePtr+1
.2ca5	c8		iny				iny
.2ca6	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2ca8	a8		tay				tay 								; to Y
.2ca9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.2caa					WarmStart:
.2caa	a2 02		ldx #$02		ldx	#2
.2cac	20 a2 16	jsr $16a2		jsr	interactionHandler

;******  Return to file: main/main.asm

.2caf					mainHandler:
.2caf	7c b2 2c	jmp ($2cb2,x)			jmp 	(mainVectors,x)
.2cb2					mainVectors:
>2cb2	c0 2b					.word CheckRightParen      ; index 0
>2cb4	b7 16					.word XCommandClear        ; index 2
>2cb6	db 25					.word LinkEvaluate         ; index 4
>2cb8	e7 25					.word LinkEvaluateInteger  ; index 6
>2cba	ed 25					.word LinkEvaluateSmallInt ; index 8
>2cbc	e1 25					.word LinkEvaluateTerm     ; index 10
>2cbe	9c 2a					.word MLInt32ToString      ; index 12
>2cc0	85 1b					.word Command_XNew         ; index 14
>2cc2	94 1d					.word XCommand_Run         ; index 16
>2cc4	a0 1d					.word Command_RunFrom      ; index 18
>2cc6	b4 29					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.2cc8					section_end_main:
.2cc8					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2cc8					StringChrs:
.2cc8	aa		tax				tax 								; set up stack
.2cc9	a9 02		lda #$02			lda 	#2
.2ccb	20 8b 2d	jsr $2d8b			jsr 	AllocateSoftString
.2cce	98		tya				tya
.2ccf	20 b1 2d	jsr $2db1			jsr 	WriteSoftString
.2cd2					StringUpdate:
.2cd2	20 e0 2c	jsr $2ce0			jsr 	ReturnSoftString
.2cd5	8a		txa				txa
.2cd6	60		rts				rts
.2cd7					StringNull:
.2cd7	aa		tax				tax
.2cd8	a9 01		lda #$01			lda 	#1
.2cda	20 8b 2d	jsr $2d8b			jsr 	AllocateSoftString
.2cdd	4c d2 2c	jmp $2cd2			jmp 	StringUpdate
.2ce0					ReturnSoftString:
.2ce0	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.2ce2	95 48		sta $48,x			sta 	esInt0,x
.2ce4	a5 7b		lda $7b				lda 	softMemAlloc+1
.2ce6	95 50		sta $50,x			sta 	esInt1,x
.2ce8	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2cea	95 58		sta $58,x			sta 	esInt2,x
.2cec	95 60		sta $60,x			sta 	esInt3,x
.2cee	a9 40		lda #$40			lda 	#$40 						; type string.
.2cf0	95 40		sta $40,x			sta 	esType,x
.2cf2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2cf3					STRCompare:
.2cf3	48		pha				pha 								; save A
.2cf4	aa		tax				tax 								; put stack pos in X
.2cf5	98		tya				tya
.2cf6	48		pha				pha
.2cf7	20 2b 2d	jsr $2d2b			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2cfa	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2cfc	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cfe	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.2d00	90 02		bcc $2d04			bcc 	_SCNotSmaller
.2d02	b1 2c		lda ($2c),y			lda 	(temp1),y
.2d04					_SCNotSmaller:
.2d04	aa		tax				tax 								; put that in X. We compare this many chars first.
.2d05					_SCCompareLoop:
.2d05	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2d07	f0 0c		beq $2d15			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2d09	ca		dex				dex 								; decrement chars to compare.
.2d0a	c8		iny				iny 								; move to next character
.2d0b	38		sec				sec 								; calculate s1[y]-s2[y]
.2d0c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d0e	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2d10	d0 0a		bne $2d1c			bne 	_SCReturnResult 			; if different return sign of A
.2d12	4c 05 2d	jmp $2d05			jmp 	_SCCompareLoop
.2d15					_SCSameToEndShortest
.2d15	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2d17	38		sec				sec
.2d18	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d1a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2d1c					_SCReturnResult:
.2d1c	08		php				php 								; set return to zero preserving PSW.
.2d1d	a2 00		ldx #$00			ldx 	#0
.2d1f	28		plp				plp
.2d20	f0 05		beq $2d27			beq 	_SCExit 					; two values equal, then exit
.2d22	ca		dex				dex 								; X = $FF
.2d23	90 02		bcc $2d27			bcc 	_SCExit 					; if 1st < 2nd then -1
.2d25	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2d27					_SCExit:
.2d27	68		pla				pla
.2d28	a8		tay				tay
.2d29	68		pla				pla
.2d2a	60		rts				rts
.2d2b					CopyStringPair:
.2d2b	b5 49		lda $49,x			lda 	esInt0+1,x
.2d2d	85 2c		sta $2c				sta 	temp1
.2d2f	b5 51		lda $51,x			lda 	esInt1+1,x
.2d31	85 2d		sta $2d				sta 	temp1+1
.2d33					CopyStringTop:
.2d33	b5 48		lda $48,x			lda 	esInt0,x
.2d35	85 2a		sta $2a				sta 	temp0
.2d37	b5 50		lda $50,x			lda 	esInt1,x
.2d39	85 2b		sta $2b				sta 	temp0+1
.2d3b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2d3c					StringConcat:
.2d3c	aa		tax				tax									; stack pos in X
.2d3d	98		tya				tya
.2d3e	48		pha				pha
.2d3f	20 2b 2d	jsr $2d2b			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2d42	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2d43	a0 00		ldy #$00			ldy 	#0
.2d45	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d47	71 2c		adc ($2c),y			adc 	(temp1),y
.2d49	b0 1c		bcs $2d67			bcs 	_SCError 					; just too many characters here.
.2d4b	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2d4d	b0 18		bcs $2d67			bcs 	_SCError
.2d4f	20 8b 2d	jsr $2d8b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2d52	20 82 2d	jsr $2d82			jsr 	CopySoftToStack 			; copy that to the stack.
.2d55	20 6c 2d	jsr $2d6c			jsr 	SCCopyTemp0 				; copy temp0
.2d58	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2d5a	85 2a		sta $2a				sta 	temp0
.2d5c	a5 2d		lda $2d				lda 	temp1+1
.2d5e	85 2b		sta $2b				sta 	temp0+1
.2d60	20 6c 2d	jsr $2d6c			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2d63	68		pla				pla
.2d64	a8		tay				tay
.2d65	8a		txa				txa 								; and A
.2d66	60		rts				rts
.2d67					_SCError:
.2d67	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2d69	20 85 11	jsr $1185		jsr	errorHandler
.2d6c					SCCopyTemp0:
.2d6c	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2d6e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d70	85 2e		sta $2e				sta 	temp2
.2d72					_SCCopyLoop:
.2d72	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2d74	f0 0b		beq $2d81			beq 	_SCCopyExit
.2d76	c6 2e		dec $2e				dec 	temp2
.2d78	c8		iny				iny 								; get next char
.2d79	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d7b	20 b1 2d	jsr $2db1			jsr 	WriteSoftString 			; write to soft string.
.2d7e	4c 72 2d	jmp $2d72			jmp 	_SCCopyLoop
.2d81					_SCCopyExit:
.2d81	60		rts				rts
.2d82					CopySoftToStack:
.2d82	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2d84	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2d86	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2d88	95 50		sta $50,x			sta 	esInt1,x
.2d8a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2d8b					AllocateSoftString:
.2d8b	85 32		sta $32				sta 	tempShort 					; save count
.2d8d	98		tya				tya
.2d8e	48		pha				pha
.2d8f	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2d91	d0 09		bne $2d9c			bne 	_ASSDone
.2d93	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2d95	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2d97	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2d99	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2d9a	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2d9c					_ASSDone:
.2d9c	38		sec				sec 								; allocate downwards enough memory
.2d9d	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2d9f	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2da1	85 7a		sta $7a				sta 	softMemAlloc
.2da3	a5 7b		lda $7b				lda 	softMemAlloc+1
.2da5	e9 00		sbc #$00			sbc 	#0
.2da7	85 7b		sta $7b				sta 	softMemAlloc+1
.2da9	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2dab	a8		tay				tay
.2dac	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2dae	68		pla				pla
.2daf	a8		tay				tay
.2db0	60		rts				rts
.2db1					WriteSoftString:
.2db1	84 32		sty $32				sty 	tempShort 					; save Y
.2db3	48		pha				pha 								; save character on stack
.2db4	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2db6	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2db8	18		clc				clc
.2db9	69 01		adc #$01			adc 	#1
.2dbb	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2dbd	a8		tay				tay 								; offset in Y
.2dbe	68		pla				pla 								; get char and write.
.2dbf	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2dc1	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.2dc3	60		rts				rts
.2dc4					StrClone:
.2dc4	aa		tax				tax 								; set up stack.
.2dc5	98		tya				tya
.2dc6	48		pha				pha
.2dc7	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2dc9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.2dcb	18		clc				clc
.2dcc	69 01		adc #$01			adc 	#1
.2dce	20 8b 2d	jsr $2d8b			jsr 	AllocateSoftString 			; allocate soft memory
.2dd1	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2dd3	95 48		sta $48,x			sta 	esInt0,x
.2dd5	a5 7b		lda $7b				lda 	softMemAlloc+1
.2dd7	95 50		sta $50,x			sta 	esInt1,x
.2dd9	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2ddb	95 58		sta $58,x			sta 	esInt2,x
.2ddd	95 60		sta $60,x			sta 	esInt3,x
.2ddf	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2de1	95 40		sta $40,x			sta 	esType,x
.2de3	20 6c 2d	jsr $2d6c			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2de6	68		pla				pla
.2de7	a8		tay				tay
.2de8	8a		txa				txa
.2de9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2dea					CaseString:
.2dea	48		pha				pha 								; save A and copy to X
.2deb	aa		tax				tax
.2dec	98		tya				tya
.2ded	48		pha				pha
.2dee	20 33 2d	jsr $2d33			jsr 	CopyStringTop 				; target string -> temp0
.2df1	a0 00		ldy #$00			ldy 	#0
.2df3	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.2df5	18		clc				clc
.2df6	69 01		adc #$01			adc 	#1 							; one more for length byte
.2df8	20 8b 2d	jsr $2d8b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2dfb	20 82 2d	jsr $2d82			jsr 	CopySoftToStack 			; copy that to the stack.
.2dfe	a0 00		ldy #$00			ldy 	#0
.2e00	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.2e02	aa		tax				tax
.2e03					_CSCopy:
.2e03	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2e05	f0 24		beq $2e2b			beq 	_CSExit
.2e07	ca		dex				dex
.2e08	c8		iny				iny
.2e09	68		pla				pla 								; check direction
.2e0a	48		pha				pha
.2e0b	f0 0c		beq $2e19			beq 	_CSUpper
.2e0d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.2e0f	c9 41		cmp #$41			cmp 	#"A"
.2e11	90 12		bcc $2e25			bcc 	_CSWrite
.2e13	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2e15	b0 0e		bcs $2e25			bcs 	_CSWrite
.2e17	90 0a		bcc $2e23			bcc 	_CSFlipWrite
.2e19					_CSUpper:
.2e19	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.2e1b	c9 61		cmp #$61			cmp 	#"a"
.2e1d	90 06		bcc $2e25			bcc 	_CSWrite
.2e1f	c9 7b		cmp #$7b			cmp 	#"z"+1
.2e21	b0 02		bcs $2e25			bcs 	_CSWrite
.2e23					_CSFlipWrite:
.2e23	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2e25					_CSWrite:
.2e25	20 b1 2d	jsr $2db1			jsr 	WriteSoftString 			; add to soft string.
.2e28	4c 03 2e	jmp $2e03			jmp 	_CSCopy
.2e2b					_CSExit:
.2e2b	68		pla				pla
.2e2c	a8		tay				tay
.2e2d	68		pla				pla
.2e2e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2e2f					StringSubstring:
.2e2f	48		pha				pha
.2e30	aa		tax				tax 								; access stack.
.2e31	98		tya				tya
.2e32	48		pha				pha
.2e33	20 33 2d	jsr $2d33			jsr 	CopyStringTop 				; point temp0 to the string.
.2e36	a0 00		ldy #$00			ldy 	#0 							; get length.
.2e38	b1 2a		lda ($2a),y			lda 	(temp0),Y
.2e3a	85 2c		sta $2c				sta 	temp1
.2e3c	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2e3e	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.2e40	f0 02		beq $2e44			beq 	_SSBOkay
.2e42	b0 2a		bcs $2e6e			bcs 	_SSBReturnNull
.2e44					_SSBOkay:
.2e44	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.2e46	18		clc				clc
.2e47	69 01		adc #$01			adc 	#1
.2e49	38		sec				sec
.2e4a	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2e4c	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2e4e	90 02		bcc $2e52			bcc		_SSBTrunc
.2e50	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2e52					_SSBTrunc:
.2e52	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.2e54	18		clc				clc
.2e55	69 01		adc #$01			adc 	#1 							; add 1
.2e57	20 8b 2d	jsr $2d8b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2e5a	20 82 2d	jsr $2d82			jsr 	CopySoftToStack 			; copy that to the stack.
.2e5d	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2e5f					_SSBCopyLoop:
.2e5f	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.2e61	f0 0e		beq $2e71			beq 	_SSBExit
.2e63	c6 2d		dec $2d				dec 	temp1+1
.2e65	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.2e67	20 b1 2d	jsr $2db1			jsr 	WriteSoftString
.2e6a	c8		iny				iny
.2e6b	4c 5f 2e	jmp $2e5f			jmp 	_SSBCopyLoop
.2e6e					_SSBReturnNull:
.2e6e	20 75 2e	jsr $2e75			jsr 	ReturnNull
.2e71					_SSBExit:
.2e71	68		pla				pla
.2e72	a8		tay				tay
.2e73	68		pla				pla
.2e74	60		rts				rts
.2e75					ReturnNull:
.2e75	a9 00		lda #$00			lda 	#0 							; clear null string
.2e77	8d ce 0a	sta $0ace			sta 	NullString
.2e7a	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2e7c	95 48		sta $48,x			sta 	esInt0,x
.2e7e	a9 0a		lda #$0a			lda 	#NullString >> 8
.2e80	95 50		sta $50,x			sta 	esInt1,x
.2e82	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c14					srcStrLen:
>0c14							.fill 	1
.2e83					StringWrite:
.2e83	aa		tax				tax
.2e84	48		pha				pha
.2e85	98		tya				tya
.2e86	48		pha				pha
.2e87	20 ae 2e	jsr $2eae			jsr 	CheckOverwriteCurrent
.2e8a	b0 0d		bcs $2e99			bcs		_SWCopyCurrent
.2e8c	20 ec 2e	jsr $2eec			jsr 	RequiresConcretion
.2e8f	90 0e		bcc $2e9f			bcc 	_SWWriteReference
.2e91	20 4f 2f	jsr $2f4f			jsr 	CheckSpecialConcretion
.2e94	b0 09		bcs $2e9f			bcs 	_SWWriteReference
.2e96	20 00 2f	jsr $2f00			jsr 	AllocateHardMemory
.2e99					_SWCopyCurrent:
.2e99	20 33 2f	jsr $2f33			jsr 	CopyStringToHardMemory
.2e9c	4c aa 2e	jmp $2eaa			jmp 	_SWExit
.2e9f					_SWWriteReference
.2e9f	a0 00		ldy #$00			ldy 	#0
.2ea1	a5 2a		lda $2a				lda 	temp0
.2ea3	91 2c		sta ($2c),y			sta 	(temp1),y
.2ea5	c8		iny				iny
.2ea6	a5 2b		lda $2b				lda 	temp0+1
.2ea8	91 2c		sta ($2c),y			sta 	(temp1),y
.2eaa					_SWExit:
.2eaa	68		pla				pla
.2eab	a8		tay				tay
.2eac	68		pla				pla
.2ead	60		rts				rts
.2eae					CheckOverwriteCurrent:
.2eae	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2eb0	b5 51		lda $51,x			lda 	esInt1+1,x
.2eb2	85 2b		sta $2b				sta 	temp0+1
.2eb4	b5 49		lda $49,x			lda 	esInt0+1,x
.2eb6	85 2a		sta $2a				sta 	temp0
.2eb8	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2eba	8d 14 0c	sta $0c14			sta 	srcStrLen
.2ebd	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2ebf	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2ec1	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2ec3	85 2d		sta $2d				sta 	temp1+1
.2ec5	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2ec7	b1 2c		lda ($2c),y			lda 	(temp1),y
.2ec9	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2ecb	90 1b		bcc $2ee8			bcc 	_COCFail 				; in hard memory.
.2ecd	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2ecf	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2ed1	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2ed3	85 2e		sta $2e				sta 	temp2
.2ed5	c8		iny				iny
.2ed6	b1 2c		lda ($2c),y			lda 	(temp1),y
.2ed8	e9 00		sbc #$00			sbc 	#0
.2eda	85 2f		sta $2f				sta 	temp2+1
.2edc	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2ede	b1 2e		lda ($2e),y			lda 	(temp2),y
.2ee0	38		sec				sec  							; maximum character capacity.
.2ee1	e9 02		sbc #$02			sbc 	#2
.2ee3	cd 14 0c	cmp $0c14			cmp 	srcStrLen 				; if >= the required length
.2ee6	b0 02		bcs $2eea			bcs 	_COCCanReuse
.2ee8					_COCFail:
.2ee8	18		clc				clc
.2ee9	60		rts				rts
.2eea					_COCCanReuse:
.2eea	38		sec				sec
.2eeb	60		rts				rts
.2eec					RequiresConcretion:
.2eec	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2eee	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.2ef0	b0 0a		bcs $2efc			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2ef2	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2ef4	f0 08		beq $2efe			beq 	_RCFail 				; if not, this cannot be soft memory.
.2ef6	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2ef8	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2efa	90 02		bcc $2efe			bcc 	_RCFail 				; so concreting
.2efc					_RCSucceed:
.2efc	38		sec				sec
.2efd	60		rts				rts
.2efe					_RCFail:
.2efe	18		clc				clc
.2eff	60		rts				rts
.2f00					AllocateHardMemory:
.2f00	98		tya				tya
.2f01	48		pha				pha
.2f02	ad 14 0c	lda $0c14			lda 	srcStrLen 				; characters in string
.2f05	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2f07	b0 04		bcs $2f0d			bcs 	_AHMSetMax 				; max out that amount.
.2f09	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2f0b	90 02		bcc $2f0f			bcc 	_AHMIsOkay
.2f0d					_AHMSetMax:
.2f0d	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2f0f					_AHMIsOkay:
.2f0f	48		pha				pha	 							; save size to be allocated
.2f10	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2f12	38		sec				sec  							; and copy result to TOS as target address.
.2f13	65 33		adc $33				adc 	highMemory
.2f15	85 33		sta $33				sta 	highMemory
.2f17	a5 34		lda $34				lda 	highMemory+1
.2f19	69 ff		adc #$ff			adc 	#$FF
.2f1b	85 34		sta $34				sta 	highMemory+1
.2f1d	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2f1f	68		pla				pla 							; get the total size of the storage block
.2f20	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.2f22	18		clc				clc
.2f23	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.2f25	69 01		adc #$01			adc 	#1
.2f27	91 2c		sta ($2c),y			sta 	(temp1),y
.2f29	a5 34		lda $34				lda 	highMemory+1
.2f2b	69 00		adc #$00			adc 	#0
.2f2d	c8		iny				iny
.2f2e	91 2c		sta ($2c),y			sta 	(temp1),y
.2f30	68		pla				pla
.2f31	a8		tay				tay
.2f32	60		rts				rts
.2f33					CopyStringToHardMemory:
.2f33	98		tya				tya
.2f34	48		pha				pha
.2f35	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2f37	b1 2c		lda ($2c),y			lda 	(temp1),y
.2f39	85 2e		sta $2e				sta 	temp2
.2f3b	c8		iny				iny
.2f3c	b1 2c		lda ($2c),y			lda 	(temp1),y
.2f3e	85 2f		sta $2f				sta 	temp2+1
.2f40	ac 14 0c	ldy $0c14			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2f43					_CSTHMLoop:
.2f43	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f45	91 2e		sta ($2e),y			sta 	(temp2),y
.2f47	88		dey				dey
.2f48	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2f4a	d0 f7		bne $2f43			bne 	_CSTHMLoop
.2f4c	68		pla				pla
.2f4d	a8		tay				tay
.2f4e	60		rts				rts
.2f4f					CheckSpecialConcretion:
.2f4f	ad 14 0c	lda $0c14			lda 	srcStrLen 				; check string is null e.g. length = 0
.2f52	f0 02		beq $2f56			beq 	_CSCNullString
.2f54	18		clc				clc
.2f55	60		rts				rts
.2f56					_CSCNullString:
.2f56	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2f58	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.2f5b	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.2f5d	85 2a		sta $2a				sta 	temp0
.2f5f	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2f61	85 2b		sta $2b				sta 	1+(temp0)
.2f63	38		sec				sec
.2f64	60		rts				rts

;******  Return to file: string/string.asm

.2f65					stringHandler:
.2f65	7c 68 2f	jmp ($2f68,x)			jmp 	(stringVectors,x)
.2f68					stringVectors:
>2f68	c8 2c					.word StringChrs           ; index 0
>2f6a	c4 2d					.word StrClone             ; index 2
>2f6c	3c 2d					.word StringConcat         ; index 4
>2f6e	d7 2c					.word StringNull           ; index 6
>2f70	f3 2c					.word STRCompare           ; index 8
>2f72	ea 2d					.word CaseString           ; index 10
>2f74	2f 2e					.word StringSubstring      ; index 12
>2f76	83 2e					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.2f78					section_end_string:
.2f78					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c15					deTokeniseVector:
>0c15							.fill 	2
.0c17					lastCharacterClass:
>0c17							.fill 	1
.2f78					ListLine:
.2f78	a9 9d		lda #$9d			lda 	#(deTokenPrint) & $FF
.2f7a	8d 15 0c	sta $0c15			sta 	deTokeniseVector
.2f7d	a9 30		lda #$30			lda 	#(deTokenPrint) >> 8
.2f7f	8d 16 0c	sta $0c16			sta 	1+(deTokeniseVector)
.2f82					Detokenise:
.2f82	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2f84	8d 17 0c	sta $0c17			sta 	lastCharacterClass
.2f87	a2 02		ldx #$02			ldx 	#2
.2f89	20 4d 2b	jsr $2b4d			jsr 	MInt32False
.2f8c	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2f8e	b1 28		lda ($28),y			lda 	(codePtr),y
.2f90	95 48		sta $48,x			sta 	esInt0,x
.2f92	c8		iny				iny
.2f93	b1 28		lda ($28),y			lda 	(codePtr),y
.2f95	95 50		sta $50,x			sta 	esInt1,x
.2f97	a9 84		lda #$84			lda 	#LTYLineNumber
.2f99	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.2f9c	a9 0a		lda #$0a			lda 	#10 					; base 10
.2f9e	20 3c 30	jsr $303c			jsr 	DTPrintInteger 			; print as integer.
.2fa1	a0 00		ldy #$00			ldy 	#0 						; get length
.2fa3	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.2fa5	aa		tax				tax
.2fa6					_DTPadOut:
.2fa6	a9 20		lda #$20			lda 	#" "
.2fa8	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.2fab	e8		inx				inx
.2fac	e0 06		cpx #$06			cpx 	#6
.2fae	d0 f6		bne $2fa6			bne 	_DTPadOut
.2fb0	a0 03		ldy #$03			ldy 	#3 						; start position.
.2fb2					_DTListLoop
.2fb2	b1 28		lda ($28),y			lda 	(codePtr),y
.2fb4	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2fb6	f0 58		beq $3010			beq 	_DTIsString
.2fb8	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.2fba	f0 7c		beq $3038			beq 	_DTIsFloat
.2fbc	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.2fbe	f0 16		beq $2fd6			beq 	_DTHexConstant
.2fc0	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2fc2	d0 06		bne $2fca			bne 	_DTNotEnd
.2fc4	a9 ff		lda #$ff			lda 	#255 					; print CR
.2fc6	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.2fc9	60		rts				rts
.2fca					_DTNotEnd:
.2fca	c9 00		cmp #$00			cmp 	#0
.2fcc	30 36		bmi $3004			bmi 	_DTIsToken
.2fce	c9 40		cmp #$40			cmp 	#$40
.2fd0	90 38		bcc $300a			bcc 	_DTIsIdentifier
.2fd2	a9 0a		lda #$0a			lda 	#10 					; this is the base
.2fd4	d0 08		bne $2fde			bne 	_DTConstant
.2fd6					_DTHexConstant:
.2fd6	a9 26		lda #$26			lda 	#"&"
.2fd8	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.2fdb	c8		iny				iny
.2fdc	a9 10		lda #$10			lda 	#16
.2fde					_DTConstant:
.2fde	48		pha				pha
.2fdf	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.2fe1	20 b9 30	jsr $30b9			jsr 	DTSwitchMode
.2fe4	a9 86		lda #$86			lda 	#LTYConstant
.2fe6	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.2fe9	a2 02		ldx #$02			ldx 	#2
.2feb	8a		txa				txa
.2fec	a2 0a		ldx #$0a		ldx	#10
.2fee	20 af 2c	jsr $2caf		jsr	mainHandler
.2ff1	aa		tax				tax
.2ff2	20 9a 19	jsr $199a			jsr 	TOSToTemp0
.2ff5	68		pla				pla
.2ff6	85 32		sta $32				sta 	tempShort
.2ff8	98		tya				tya
.2ff9	48		pha				pha
.2ffa	a5 32		lda $32				lda 	tempShort
.2ffc	20 3c 30	jsr $303c			jsr 	DTPrintInteger
.2fff	68		pla				pla
.3000	a8		tay				tay
.3001	4c b2 2f	jmp $2fb2			jmp 	_DTListLoop
.3004					_DTIsToken:
.3004	20 12 31	jsr $3112			jsr 	DTDecodeToken
.3007	4c b2 2f	jmp $2fb2			jmp 	_DTListLoop
.300a					_DTIsIdentifier:
.300a	20 cb 30	jsr $30cb			jsr 	DTIdentifier
.300d	4c b2 2f	jmp $2fb2			jmp 	_DTListLoop
.3010					_DTIsString:
.3010	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3012	20 b9 30	jsr $30b9			jsr 	DTSwitchMode
.3015	a9 81		lda #$81			lda 	#LTYString
.3017	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.301a	a9 22		lda #$22			lda 	#'"'						; open quote
.301c	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.301f	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3021	8a		txa				txa
.3022	a2 0a		ldx #$0a		ldx	#10
.3024	20 af 2c	jsr $2caf		jsr	mainHandler
.3027	aa		tax				tax
.3028	20 9a 19	jsr $199a			jsr 	TOSToTemp0
.302b	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.302d	20 4e 30	jsr $304e			jsr 	DTPrintLengthPrefix
.3030	a9 22		lda #$22			lda 	#'"'
.3032	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.3035	4c b2 2f	jmp $2fb2			jmp 	_DTListLoop
.3038					_DTIsFloat:
>3038	db						.byte 	$DB
.3039	4c 38 30	jmp $3038			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c18					tPrintCount:
>0c18							.fill 	1
.303c					DTPrintInteger:
.303c	48		pha				pha
.303d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.303f	85 2a		sta $2a				sta 	temp0
.3041	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3043	85 2b		sta $2b				sta 	1+(temp0)
.3045	68		pla				pla
.3046	a8		tay				tay
.3047	8a		txa				txa
.3048	a2 0c		ldx #$0c		ldx	#12
.304a	20 af 2c	jsr $2caf		jsr	mainHandler
.304d	aa		tax				tax
.304e					DTPrintLengthPrefix:
.304e	aa		tax				tax
.304f	98		tya				tya
.3050	48		pha				pha
.3051	a0 00		ldy #$00			ldy 	#0
.3053	b1 2a		lda ($2a),y			lda 	(temp0),y
.3055	8d 18 0c	sta $0c18			sta 	tPrintCount
.3058	f0 1b		beq $3075			beq 	_DTPLPExit
.305a					_DTPLPLoop:
.305a	c8		iny				iny
.305b	b1 2a		lda ($2a),y			lda 	(temp0),y
.305d	29 7f		and #$7f			and 	#$7F
.305f	e0 00		cpx #$00			cpx 	#0
.3061	f0 0a		beq $306d			beq 	_DTPLPNoCase
.3063	c9 41		cmp #$41			cmp 	#"A"
.3065	90 06		bcc $306d			bcc 	_DTPLPNoCase
.3067	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3069	b0 02		bcs $306d			bcs 	_DTPLPNoCase
.306b	49 20		eor #$20			eor 	#"A"^"a"
.306d					_DTPLPNoCase
.306d	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.3070	ce 18 0c	dec $0c18			dec 	tPrintCount
.3073	d0 e5		bne $305a			bne 	_DTPLPLoop
.3075					_DTPLPExit:
.3075	68		pla				pla
.3076	a8		tay				tay
.3077	60		rts				rts
.3078					ListOutputCharacter:
.3078	85 32		sta $32				sta 	tempShort
.307a	48		pha				pha
.307b	8a		txa				txa
.307c	48		pha				pha
.307d	98		tya				tya
.307e	48		pha				pha
.307f	a5 32		lda $32				lda 	tempShort
.3081	c9 20		cmp #$20			cmp 	#32
.3083	b0 0c		bcs $3091			bcs		_LOCHiBit
.3085	09 40		ora #$40			ora 	#64
.3087	c9 40		cmp #$40			cmp 	#64
.3089	f0 06		beq $3091			beq 	_LOCHiBit
.308b	c9 5b		cmp #$5b			cmp 	#65+26
.308d	b0 02		bcs $3091			bcs 	_LOCHiBit
.308f	69 20		adc #$20			adc 	#32
.3091					_LOCHiBit:
.3091	20 9a 30	jsr $309a			jsr 	_LOCCallVector
.3094	68		pla				pla
.3095	a8		tay				tay
.3096	68		pla				pla
.3097	aa		tax				tax
.3098	68		pla				pla
.3099					_LOCExit:
.3099	60		rts				rts
.309a					_LOCCallVector:
.309a	6c 15 0c	jmp ($0c15)			jmp 	(deTokeniseVector)
.309d					deTokenPrint:
.309d	c9 00		cmp #$00			cmp 	#0
.309f	30 06		bmi $30a7			bmi 	_dtpInk
.30a1	a2 16		ldx #$16		ldx	#22
.30a3	20 64 11	jsr $1164		jsr	deviceHandler
.30a6	60		rts				rts
.30a7	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.30a9	f0 08		beq $30b3			beq 	_dtpCR
.30ab	29 07		and #$07			and 	#7
.30ad	a2 08		ldx #$08		ldx	#8
.30af	20 64 11	jsr $1164		jsr	deviceHandler
.30b2	60		rts				rts
.30b3					_dtpCR:
.30b3	a2 04		ldx #$04		ldx	#4
.30b5	20 64 11	jsr $1164		jsr	deviceHandler
.30b8	60		rts				rts
.30b9					DTSwitchMode:
.30b9	cd 17 0c	cmp $0c17			cmp 	LastCharacterClass
.30bc	f0 04		beq $30c2			beq 	_DTSMNoChange
.30be	8d 17 0c	sta $0c17			sta 	LastCharacterClass
.30c1					_DTSMExit:
.30c1	60		rts				rts
.30c2					_DTSMNoChange:
.30c2	c9 01		cmp #$01			cmp 	#1
.30c4	f0 fb		beq $30c1			beq 	_DTSMExit
.30c6	a9 20		lda #$20			lda 	#" "
.30c8	4c 78 30	jmp $3078			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.30cb					DTIdentifier:
.30cb	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.30cd	20 b9 30	jsr $30b9			jsr 	DTSwitchMode
.30d0	a9 87		lda #$87			lda 	#LTYIdentifier
.30d2	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.30d5					_DTILoop:
.30d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.30d7	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.30d9	d0 02		bne $30dd			bne 	_DTINotUS
.30db	a9 5f		lda #$5f			lda 	#"_"
.30dd					_DTINotUS:
.30dd	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.30e0	c8		iny				iny
.30e1	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.30e3	c9 3a		cmp #$3a			cmp 	#$3A
.30e5	90 ee		bcc $30d5			bcc 	_DTILoop
.30e7	c8		iny				iny
.30e8	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.30ea	f0 25		beq $3111			beq 	_DTIExit 					; no postfix.
.30ec	48		pha				pha
.30ed	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.30ef	8d 17 0c	sta $0c17			sta 	LastCharacterClass
.30f2	a9 82		lda #$82			lda 	#LTYPunctuation
.30f4	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.30f7	68		pla				pla
.30f8	c9 3b		cmp #$3b			cmp 	#$3B
.30fa	f0 10		beq $310c			beq 	_DTIArray
.30fc	4a		lsr a				lsr 	a 							; array flag in C
.30fd	08		php				php
.30fe	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3100	f0 02		beq $3104			beq 	_DTIDollar
.3102	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3104					_DTIDollar:
.3104	49 24		eor #$24			eor 	#"$"
.3106	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.3109	28		plp				plp
.310a	90 05		bcc $3111			bcc 	_DTIExit
.310c					_DTIArray:
.310c	a9 28		lda #$28			lda 	#"("
.310e	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.3111					_DTIExit:
.3111	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3112					DTDecodeToken:
.3112	a2 00		ldx #$00			ldx 	#0 							; table number to use
.3114	b1 28		lda ($28),y			lda 	(codePtr),y
.3116	c9 84		cmp #$84			cmp 	#$84
.3118	b0 05		bcs $311f			bcs 	_DTNotShift
.311a	29 03		and #$03			and 	#3 							; get the shift 1..3
.311c	0a		asl a				asl 	a 							; put 2 x in X
.311d	aa		tax				tax
.311e	c8		iny				iny
.311f					_DTNotShift:
.311f	bd 1f 34	lda $341f,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3122	85 2a		sta $2a				sta 	temp0 						; point into temp0
.3124	bd 20 34	lda $3420,x			lda 	TokenTableAddress+1,x
.3127	85 2b		sta $2b				sta 	temp0+1
.3129	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.312b	c8		iny				iny 								; consume it.
.312c	aa		tax				tax
.312d	98		tya				tya
.312e	48		pha				pha
.312f					_DTFindText:
.312f	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3131	f0 11		beq $3144			beq 	_DTFoundText
.3133	ca		dex				dex
.3134	a0 00		ldy #$00			ldy 	#0
.3136	38		sec				sec
.3137	b1 2a		lda ($2a),y			lda 	(temp0),y
.3139	65 2a		adc $2a				adc 	temp0
.313b	85 2a		sta $2a				sta 	temp0
.313d	90 f0		bcc $312f			bcc 	_DTFindText
.313f	e6 2b		inc $2b				inc 	temp0+1
.3141	4c 2f 31	jmp $312f			jmp 	_DTFindText
.3144					_DTFoundText:
.3144	a0 01		ldy #$01			ldy 	#1 							; get first character
.3146	b1 2a		lda ($2a),y			lda 	(temp0),y
.3148	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.314a	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.314c	90 11		bcc $315f			bcc 	_DTIsPunctuation
.314e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3150	b0 0d		bcs $315f			bcs 	_DTIsPunctuation
.3152	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3154	20 b9 30	jsr $30b9			jsr 	DTSwitchMode
.3157	a9 83		lda #$83			lda 	#LTYKeyword
.3159	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.315c	4c 69 31	jmp $3169			jmp 	_DTPrint
.315f					_DTIsPunctuation:
.315f	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3161	20 b9 30	jsr $30b9			jsr 	DTSwitchMode
.3164	a9 82		lda #$82			lda 	#LTYPunctuation
.3166	20 78 30	jsr $3078			jsr 	ListOutputCharacter
.3169					_DTPrint:
.3169	a9 01		lda #$01			lda 	#1 							; fix case.
.316b	20 4e 30	jsr $304e			jsr 	DTPrintLengthPrefix 		; print it out.
.316e	a0 00		ldy #$00			ldy 	#0
.3170	b1 2a		lda ($2a),y			lda 	(temp0),y
.3172	a8		tay				tay
.3173	b1 2a		lda ($2a),y			lda 	(temp0),y
.3175	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3177	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3179	90 04		bcc $317f			bcc 	_DTIsNowPunctuation
.317b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.317d	90 05		bcc $3184			bcc 	_DTPExit
.317f					_DTIsNowPunctuation:
.317f	a9 01		lda #$01			lda 	#1
.3181	8d 17 0c	sta $0c17			sta		LastCharacterClass
.3184					_DTPExit:
.3184	68		pla				pla
.3185	a8		tay				tay
.3186	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c19					currentSet:
>0c19							.fill 	1
.3187					TokenSearch:
.3187	8a		txa				txa
.3188	48		pha				pha
.3189	98		tya				tya
.318a	48		pha				pha
.318b	a9 00		lda #$00			lda 	#0
.318d	8d 19 0c	sta $0c19			sta 	currentSet
.3190					_TSLoop:
.3190	ad 19 0c	lda $0c19			lda 	currentSet 					; 2 x currentset in X
.3193	0a		asl a				asl 	a
.3194	aa		tax				tax
.3195	bd 1f 34	lda $341f,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3198	85 2a		sta $2a				sta 	temp0
.319a	bd 20 34	lda $3420,x			lda 	TokenTableAddress+1,x
.319d	85 2b		sta $2b				sta 	temp0+1
.319f	20 c6 31	jsr $31c6			jsr 	TokenSearchOne 				; search one table
.31a2	b0 0d		bcs $31b1			bcs 	_TSFound 					; found a token.
.31a4	ee 19 0c	inc $0c19			inc 	currentSet 					; next set
.31a7	ad 19 0c	lda $0c19			lda 	currentSet
.31aa	c9 04		cmp #$04			cmp 	#4
.31ac	d0 e2		bne $3190			bne 	_TSLoop 					; back if not done all four.
.31ae	18		clc				clc 								; clear carry and exit
.31af	90 10		bcc $31c1			bcc 	_TSExit
.31b1					_TSFound:
.31b1	48		pha				pha 								; save token
.31b2	ad 19 0c	lda $0c19			lda 	currentSet					; if set zero no shift
.31b5	f0 05		beq $31bc			beq 	_TSNoShift
.31b7	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.31b9	20 75 32	jsr $3275			jsr 	TokenWrite
.31bc					_TSNoShift:
.31bc	68		pla				pla 								; get token back
.31bd	20 75 32	jsr $3275			jsr 	TokenWrite 					; write it
.31c0	38		sec				sec 								; carry set indicating success
.31c1					_TSExit:
.31c1	68		pla				pla
.31c2	a8		tay				tay
.31c3	68		pla				pla
.31c4	aa		tax				tax
.31c5	60		rts				rts
.31c6					TokenSearchOne:
.31c6	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.31c8					_TSOLoop:
.31c8	a0 00		ldy #$00			ldy 	#0
.31ca	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.31cc	f0 26		beq $31f4			beq 	_TSOFail 					; if zero, end of table
.31ce	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.31d1	f0 11		beq $31e4			beq 	_TSOCheckText
.31d3					_TSONext:
.31d3	e8		inx				inx 								; bump token
.31d4	a0 00		ldy #$00			ldy 	#0							; get length
.31d6	b1 2a		lda ($2a),y			lda 	(temp0),y
.31d8	38		sec				sec
.31d9	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.31db	85 2a		sta $2a				sta 	temp0
.31dd	90 e9		bcc $31c8			bcc 	_TSOLoop
.31df	e6 2b		inc $2b				inc 	temp0+1
.31e1	4c c8 31	jmp $31c8			jmp 	_TSOLoop
.31e4					_TSOCheckText:
.31e4	a8		tay				tay 								; compare length downto 1.
.31e5					_TSOCheckLoop:
.31e5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.31e7	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.31ea	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.31ec	d0 e5		bne $31d3			bne 	_TSONext 					; different goto next.
.31ee	88		dey				dey 								; do all
.31ef	d0 f4		bne $31e5			bne 	_TSOCheckLoop
.31f1	8a		txa				txa 								; return token in A and carry set
.31f2	38		sec				sec
.31f3	60		rts				rts
.31f4					_TSOFail:
.31f4	18		clc				clc
.31f5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.31f6					TokTest:
.31f6	a2 ff		ldx #$ff				ldx 	#$FF
.31f8	9a		txs					txs
.31f9	a9 16		lda #$16			lda 	#(TokenText1) & $FF
.31fb	85 28		sta $28				sta 	codePtr
.31fd	a9 32		lda #$32			lda 	#(TokenText1) >> 8
.31ff	85 29		sta $29				sta 	1+(codePtr)
.3201	20 16 32	jsr $3216				jsr 	Tokenise
.3204	a2 00		ldx #$00	TokStop:	ldx 	#0
.3206	bd 16 32	lda $3216,x	_TokCheck:	lda 	TokenBytes1,x
.3209	dd 1d 0c	cmp $0c1d,x				cmp 	tokenBuffer,x
.320c	d0 fe		bne $320c	_TokFail:	bne 	_TokFail
.320e	e8		inx					inx
.320f	c9 80		cmp #$80				cmp 	#$80
.3211	d0 f3		bne $3206				bne 	_TokCheck
.3213	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3216					TokenText1:
.3216					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c1a					tokenHeader:
>0c1a							.fill 	3
.0c1d					tokenBuffer:
>0c1d							.fill 	256
.0d1d					tokenBufferIndex:
>0d1d							.fill 	1
.3216					Tokenise:
.3216	20 8e 32	jsr $328e			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3219					TokeniseASCIIZ:
.3219	20 9f 32	jsr $329f			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.321c	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.321e	8d 1d 0d	sta $0d1d			sta 	tokenBufferIndex
.3221	a8		tay				tay 								; start pointer
.3222	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3224	8d 1d 0c	sta $0c1d			sta 	tokenBuffer
.3227					_TokLoop:
.3227	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3229	f0 46		beq $3271			beq 	_TokExit 					; if zero, then exit.
.322b	c8		iny				iny 								; skip over spaces.
.322c	c9 20		cmp #$20			cmp 	#" "
.322e	f0 f7		beq $3227			beq 	_TokLoop
.3230	88		dey				dey 								; point back to character.
.3231	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3233	f0 18		beq $324d			beq 	_TokHexConst
.3235	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3237	f0 23		beq $325c			beq 	_TokQString
.3239	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.323b	b0 26		bcs $3263			bcs 	_TokPunctuation
.323d	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.323f	b0 29		bcs $326a			bcs 	_TokIdentifier
.3241	c9 3a		cmp #$3a			cmp 	#"9"+1
.3243	b0 1e		bcs $3263			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3245	c9 30		cmp #$30			cmp 	#"0"
.3247	90 1a		bcc $3263			bcc 	_TokPunctuation 			; < 0, punctuation.
.3249	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.324b	d0 08		bne $3255			bne 	_TokConst
.324d					_TokHexConst:
.324d	c8		iny				iny									; consume token.
.324e	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3250	20 75 32	jsr $3275			jsr 	TokenWrite
.3253	a9 10		lda #$10			lda 	#16
.3255					_TokConst:
.3255	20 5d 33	jsr $335d			jsr 	TokeniseInteger
.3258	b0 cd		bcs $3227			bcs 	_TokLoop
.325a	90 17		bcc $3273			bcc 	_TokFail
.325c					_TokQString:
.325c	20 f3 33	jsr $33f3			jsr 	TokeniseString
.325f	b0 c6		bcs $3227			bcs 	_TokLoop
.3261	90 10		bcc $3273			bcc 	_TokFail
.3263					_TokPunctuation:
.3263	20 d2 33	jsr $33d2			jsr 	TokenisePunctuation
.3266	b0 bf		bcs $3227			bcs 	_TokLoop
.3268	90 09		bcc $3273			bcc 	_TokFail
.326a					_TokIdentifier:
.326a	20 ce 32	jsr $32ce			jsr 	TokeniseIdentifier
.326d	b0 b8		bcs $3227			bcs 	_TokLoop
.326f	90 02		bcc $3273			bcc 	_TokFail
.3271					_TokExit:
.3271	38		sec				sec
.3272	60		rts				rts
.3273					_TokFail:
.3273	18		clc				clc
.3274	60		rts				rts
.3275					TokenWrite:
.3275	85 32		sta $32				sta 	tempShort 					; save XA
.3277	48		pha				pha
.3278	8a		txa				txa
.3279	48		pha				pha
.327a	a5 32		lda $32				lda 	tempShort
.327c	ae 1d 0d	ldx $0d1d			ldx 	tokenBufferIndex 			; geet index
.327f	9d 1d 0c	sta $0c1d,x			sta 	tokenBuffer,x 				; write byte to buffer
.3282	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3284	9d 1e 0c	sta $0c1e,x			sta 	tokenBuffer+1,x
.3287	ee 1d 0d	inc $0d1d			inc 	tokenBufferIndex 			; bump index
.328a	68		pla				pla
.328b	aa		tax				tax
.328c	68		pla				pla
.328d	60		rts				rts
.328e					TokeniseMakeASCIIZ:
.328e	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3290	b1 28		lda ($28),y			lda 	(codePtr),y
.3292	a8		tay				tay
.3293	c8		iny				iny 								; +1, the NULL goes here.
.3294	a9 00		lda #$00			lda 	#0
.3296	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3298	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.329a	d0 02		bne $329e			bne 	_TMKAExit
.329c	e6 29		inc $29				inc 	codePtr+1
.329e					_TMKAExit:
.329e	60		rts				rts
.329f					TokeniseFixCase:
.329f	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.32a1	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.32a3					_TFCFlipQ:
.32a3	8a		txa				txa
.32a4	49 01		eor #$01			eor 	#1
.32a6	aa		tax				tax
.32a7					_TFCLoop:
.32a7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.32a9	f0 22		beq $32cd			beq 	_TFCExit 					; if zero exit.
.32ab	c9 20		cmp #$20			cmp 	#32 						; if control
.32ad	90 1a		bcc $32c9			bcc 	_TFCControl
.32af	c8		iny				iny 								; preconsume
.32b0	c9 22		cmp #$22			cmp 	#'"'
.32b2	f0 ef		beq $32a3			beq 	_TFCFlipQ
.32b4	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.32b6	90 ef		bcc $32a7			bcc 	_TFCLoop
.32b8	c9 7b		cmp #$7b			cmp 	#"z"+1
.32ba	b0 eb		bcs $32a7			bcs 	_TFCLoop
.32bc	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.32be	d0 e7		bne $32a7			bne 	_TFCLoop
.32c0	88		dey				dey
.32c1	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.32c3					_TFCWrite:
.32c3	91 28		sta ($28),y			sta 	(codePtr),y
.32c5	c8		iny				iny
.32c6	4c a7 32	jmp $32a7			jmp 	_TFCLoop
.32c9					_TFCControl:
.32c9	a9 20		lda #$20			lda 	#" "
.32cb	d0 f6		bne $32c3			bne 	_TFCWrite
.32cd					_TFCExit:
.32cd	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.32ce					TokeniseIdentifier:
.32ce	a2 00		ldx #$00			ldx 	#0
.32d0					_TICopyID:
.32d0	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.32d2	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.32d4	f0 16		beq $32ec			beq 	_TICopyUnderscore
.32d6	c9 2e		cmp #$2e			cmp 	#"."
.32d8	f0 14		beq $32ee			beq 	_TICopyIn
.32da	c9 30		cmp #$30			cmp 	#"0"
.32dc	90 1b		bcc $32f9			bcc 	_TIEndCopy
.32de	c9 3a		cmp #$3a			cmp 	#"9"+1
.32e0	90 0c		bcc $32ee			bcc 	_TICopyIn
.32e2	c9 41		cmp #$41			cmp 	#"A"
.32e4	90 13		bcc $32f9			bcc 	_TIEndCopy
.32e6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32e8	b0 0f		bcs $32f9			bcs		_TIEndCopy
.32ea	90 02		bcc $32ee			bcc 	_TICopyIn
.32ec					_TICopyUnderScore:
.32ec	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.32ee					_TICopyIn:
.32ee	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.32ef	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.32f2	8e cf 0a	stx $0acf			stx 	convertBuffer
.32f5	c8		iny				iny 								; next character
.32f6	4c d0 32	jmp $32d0			jmp 	_TICopyID 					; loop round
.32f9					_TIEndCopy:
.32f9	a9 24		lda #$24			lda 	#"$"
.32fb	20 50 33	jsr $3350			jsr 	TIDCheckCopy
.32fe	a9 23		lda #$23			lda 	#"#"
.3300	20 50 33	jsr $3350			jsr 	TIDCheckCopy
.3303	a9 28		lda #$28			lda 	#"("
.3305	20 50 33	jsr $3350			jsr 	TIDCheckCopy
.3308	20 87 31	jsr $3187			jsr 	TokenSearch 				; is it a token
.330b	b0 41		bcs $334e			bcs 	_TIExit 					; if so, then exit.
.330d	98		tya				tya
.330e	48		pha				pha
.330f	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3311	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3314	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3317	c9 28		cmp #$28			cmp 	#"("
.3319	d0 02		bne $331d			bne 	_TINotArray
.331b	ca		dex				dex 								; yes, remove it and convert to array.
.331c	c8		iny				iny
.331d					_TINotArray:
.331d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3320	c9 24		cmp #$24			cmp 	#"$"
.3322	d0 03		bne $3327			bne 	_TINotString
.3324	ca		dex				dex
.3325	c8		iny				iny
.3326	c8		iny				iny
.3327					_TINotString:
.3327	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.332a	c9 23		cmp #$23			cmp 	#"#"
.332c	d0 05		bne $3333			bne 	_TINotFloat
.332e	ca		dex				dex
.332f	c8		iny				iny
.3330	c8		iny				iny
.3331	c8		iny				iny
.3332	c8		iny				iny
.3333					_TINotFloat:
.3333	e8		inx				inx 								; write end marker for identifier.
.3334	98		tya				tya
.3335	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3338	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.333b	a2 01		ldx #$01			ldx 	#1
.333d					_TIOutput:
.333d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3340	29 3f		and #$3f			and 	#$3F
.3342	48		pha				pha
.3343	20 75 32	jsr $3275			jsr 	TokenWrite
.3346	e8		inx				inx
.3347	68		pla				pla
.3348	c9 3a		cmp #$3a			cmp 	#$3A
.334a	90 f1		bcc $333d			bcc 	_TIOutput
.334c	68		pla				pla
.334d	a8		tay				tay
.334e					_TIExit:
.334e	38		sec				sec 								; this can't fail.
.334f	60		rts				rts
.3350					TIDCheckCopy:
.3350	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3352	d0 08		bne $335c			bne 	_TIDCCExit
.3354	e8		inx				inx
.3355	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3358	8e cf 0a	stx $0acf			stx 	convertBuffer
.335b	c8		iny				iny
.335c					_TIDCCExit:
.335c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.335d					TokeniseInteger:
.335d	85 2c		sta $2c				sta 	temp1 						; save base
.335f	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3361	8e cf 0a	stx $0acf			stx 	convertBuffer
.3364					_TIGetChars:
.3364	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3366	c9 30		cmp #$30			cmp 	#"0"
.3368	90 1f		bcc $3389			bcc 	_TIEndGet
.336a	c9 3a		cmp #$3a			cmp 	#"9"+1
.336c	90 10		bcc $337e			bcc 	_TIHaveChar
.336e	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3370	c9 0a		cmp #$0a			cmp 	#10
.3372	f0 15		beq $3389			beq 	_TIEndGet
.3374	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3376	c9 41		cmp #$41			cmp 	#"A"
.3378	90 0f		bcc $3389			bcc 	_TIEndGet
.337a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.337c	b0 0b		bcs $3389			bcs 	_TIEndGet
.337e					_TIHaveChar:
.337e	e8		inx				inx 								; write into buffer.
.337f	8e cf 0a	stx $0acf			stx 	convertBuffer
.3382	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3385	c8		iny				iny 								; next char
.3386	4c 64 33	jmp $3364			jmp 	_TIGetChars
.3389					_TIEndGet:
.3389	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.338b	f0 1c		beq $33a9			beq 	_TIFail
.338d	98		tya				tya
.338e	48		pha				pha
.338f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3391	85 2a		sta $2a				sta 	temp0
.3393	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3395	85 2b		sta $2b				sta 	1+(temp0)
.3397	a9 00		lda #$00			lda 	#0 							; stack 0
.3399	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.339b	a2 14		ldx #$14		ldx	#20
.339d	20 af 2c	jsr $2caf		jsr	mainHandler
.33a0	68		pla				pla
.33a1	a8		tay				tay
.33a2	90 05		bcc $33a9			bcc 	_TIFail 					; didn't convert.
.33a4	20 ab 33	jsr $33ab			jsr 	TIRecursiveOut 				; recursive output ?
.33a7	38		sec				sec
.33a8	60		rts				rts
.33a9					_TIFail:
.33a9	18		clc				clc
.33aa	60		rts				rts
.33ab					TIRecursiveOut:
.33ab	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.33ad	29 3f		and #$3f			and 	#$3F
.33af	09 40		ora #$40			ora 	#$40
.33b1	48		pha				pha
.33b2	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.33b4	29 c0		and #$c0			and 	#$C0
.33b6	05 50		ora $50				ora 	esInt1
.33b8	05 58		ora $58				ora 	esInt2
.33ba	05 60		ora $60				ora 	esInt3
.33bc	f0 10		beq $33ce			beq 	_TIRONoRecursion
.33be	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.33c0					_TIROShift:
.33c0	46 60		lsr $60				lsr 	esInt3
.33c2	66 58		ror $58				ror 	esInt2
.33c4	66 50		ror $50				ror 	esInt1
.33c6	66 48		ror $48				ror 	esInt0
.33c8	ca		dex				dex
.33c9	d0 f5		bne $33c0			bne 	_TIROShift
.33cb	20 ab 33	jsr $33ab			jsr 	TIRecursiveOut 				; call recursively
.33ce					_TIRONoRecursion:
.33ce	68		pla				pla 								; pull the old bit.
.33cf	4c 75 32	jmp $3275			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.33d2					TokenisePunctuation:
.33d2	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.33d4	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.33d7	c8		iny				iny
.33d8	b1 28		lda ($28),y			lda 	(codePtr),y
.33da	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.33dd	c8		iny				iny 								; Y is +2
.33de	a9 02		lda #$02			lda 	#2 							; 2 character string.
.33e0	8d cf 0a	sta $0acf			sta 	convertBuffer
.33e3	20 87 31	jsr $3187			jsr 	TokenSearch 				; search for that token.
.33e6	b0 0a		bcs $33f2			bcs 	_TIFound
.33e8	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.33eb	88		dey				dey 								; Y is now +1
.33ec	20 87 31	jsr $3187			jsr 	TokenSearch 				; search for that token.
.33ef	b0 01		bcs $33f2			bcs 	_TIFound
.33f1	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.33f2					_TIFound:
.33f2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.33f3					TokeniseString:
.33f3	c8		iny				iny 								; skip opening quote
.33f4	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.33f6	84 2a		sty $2a				sty 	temp0 						; save start.
.33f8					_TSGetLength:
.33f8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.33fa	f0 21		beq $341d			beq 	_TSFail						; end of line, fail
.33fc	c8		iny				iny
.33fd	e8		inx				inx
.33fe	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3400	d0 f6		bne $33f8			bne 	_TSGetLength
.3402	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3404	20 75 32	jsr $3275			jsr 	TokenWrite
.3407	8a		txa				txa 								; output length
.3408	20 75 32	jsr $3275			jsr 	TokenWrite
.340b	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.340d	e0 00		cpx #$00			cpx 	#0 							; check ended
.340f	f0 09		beq $341a			beq 	_TSExit
.3411					_TSOutput:
.3411	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3413	20 75 32	jsr $3275			jsr 	TokenWrite
.3416	c8		iny				iny
.3417	ca		dex				dex
.3418	d0 f7		bne $3411			bne 	_TSOutput
.341a					_TSExit:
.341a	c8		iny				iny 								; skip ending quote
.341b	38		sec				sec 								; return CS.
.341c	60		rts				rts
.341d					_TSFail:
.341d	18		clc				clc
.341e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.341f					TokenTableAddress:
>341f	27 34						.word 	Group0Text
>3421	f0 35						.word 	Group1Text
>3423	29 36						.word 	Group2Text
>3425	3c 36						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3427					Group0Text:
>3427	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>342b	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>342e	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3432	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3435	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3438	01 be					.byte $01,$be                          ; $8b >
>343a	01 bc					.byte $01,$bc                          ; $8c <
>343c	01 bd					.byte $01,$bd                          ; $8d =
>343e	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3441	01 ab					.byte $01,$ab                          ; $8f +
>3443	01 ad					.byte $01,$ad                          ; $90 -
>3445	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3448	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>344b	01 aa					.byte $01,$aa                          ; $93 *
>344d	01 af					.byte $01,$af                          ; $94 /
>344f	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3453	01 de					.byte $01,$de                          ; $96 ^
>3455	01 a1					.byte $01,$a1                          ; $97 !
>3457	01 bf					.byte $01,$bf                          ; $98 ?
>3459	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3460	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3466	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>346a	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>346d	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3475	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>347b	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3480	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3485	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>348a	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3490	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3498	01 a8					.byte $01,$a8                          ; $a4 (
>349a	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>349f	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>34a4	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>34a9	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>34b1	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>34b6	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>34bb	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>34c1	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>34c6	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>34cb	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>34d0	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>34d7	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>34de	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>34e3	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>34ea	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>34f1	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>34f7	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>34fe	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3504	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>350c	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3512	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3517	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>351d	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3523	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3529	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>352e	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3533	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>353a	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3541	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3549	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3551	01 c0					.byte $01,$c0                          ; $c3 @
>3553	01 fe					.byte $01,$fe                          ; $c4 ~
>3555	01 a6					.byte $01,$a6                          ; $c5 &
>3557	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>355d	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3565	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3569	01 a9					.byte $01,$a9                          ; $c9 )
>356b	01 ba					.byte $01,$ba                          ; $ca :
>356d	01 ac					.byte $01,$ac                          ; $cb ,
>356f	01 bb					.byte $01,$bb                          ; $cc ;
>3571	01 a7					.byte $01,$a7                          ; $cd '
>3573	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3576	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>357b	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3580	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3586	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>358a	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>358e	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3592	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3598	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>359d	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>35a1	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>35a7	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>35ac	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>35b2	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>35b9	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>35be	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>35c5	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>35ca	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>35cf	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>35d4	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>35d8	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>35de	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>35e2	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>35e9	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>35ef	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.35f0					Group1Text:
>35f0	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>35f6	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>35fb	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3600	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3605	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3609	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>360d	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3612	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>361a	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>361e	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3623	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3628	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3629					Group2Text:
>3629	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>362f	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3635	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>363b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.363c					Group3Text:
>363c	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3643	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>364a	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.364b					tokeniserHandler:
.364b	7c 4e 36	jmp ($364e,x)			jmp 	(tokeniserVectors,x)
.364e					tokeniserVectors:
>364e	82 2f					.word Detokenise           ; index 0
>3650	78 2f					.word ListLine             ; index 2
>3652	f6 31					.word TokTest              ; index 4
>3654	16 32					.word Tokenise             ; index 6
>3656	19 32					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3658					section_end_tokeniser:
.3658					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d1e					varHash:
>0d1e							.fill	1
.0d1f					varType:
>0d1f							.fill 	1
.0d20					varEnd:
>0d20							.fill 	1
.007c					hashList:
>007c							.fill 	2
.3658					AccessVariable:
.3658	aa		tax				tax 								; stack in X
.3659	c8		iny				iny									; look at second character
.365a	b1 28		lda ($28),y			lda 	(codePtr),y
.365c	88		dey				dey
.365d	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.365f	d0 15		bne $3676			bne 	_AVLong 					; no, always use the hash tables.
.3661	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3663	38		sec				sec 	 							; make it 0-25
.3664	e9 01		sbc #$01			sbc 	#1
.3666	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3667	0a		asl a				asl 	a
.3668	95 48		sta $48,x			sta 	esInt0,x
.366a	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.366c	95 50		sta $50,x			sta 	esInt1,x
.366e	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3670	95 40		sta $40,x			sta 	esType,x
.3672	c8		iny				iny 								; skip over the variable reference in the code.
.3673	c8		iny				iny  								; (1 letter, 1 type)
.3674	8a		txa				txa 								; stack in A to return.
.3675	60		rts				rts
.3676					_AVLong:
.3676	8a		txa				txa
.3677	48		pha				pha
.3678	20 bf 36	jsr $36bf			jsr 	AccessSetup 				; set up the basic information we need for later
.367b	20 ed 38	jsr $38ed			jsr 	FindVariable 				; does the variable exist already ?
.367e	b0 0e		bcs $368e			bcs 	_AVFound 					; yes, then its found
.3680	ad 1f 0d	lda $0d1f			lda 	varType 					; otherwise, is the variable type an array
.3683	4a		lsr a				lsr 	a
.3684	90 05		bcc $368b			bcc 	_AVCanCreate 				; if not, we can autocreate
.3686	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3688	20 85 11	jsr $1185		jsr	errorHandler
.368b					_AVCanCreate:
.368b	20 74 37	jsr $3774			jsr 	CreateVariable 				; variable does not exist, create it.
.368e					_AVFound:
.368e	68		pla				pla
.368f	aa		tax				tax
.3690	18		clc				clc 								; copy temp0 (variable record address)
.3691	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3693	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3695	95 48		sta $48,x			sta 	esInt0,x
.3697	a5 2b		lda $2b				lda 	temp0+1
.3699	69 00		adc #$00			adc 	#0
.369b	95 50		sta $50,x			sta 	esInt1,x
.369d	a9 00		lda #$00			lda 	#0
.369f	95 58		sta $58,x			sta 	esInt2,x
.36a1	95 60		sta $60,x			sta 	esInt3,x
.36a3	ac 1f 0d	ldy $0d1f			ldy 	varType 					; get the type ID from the type.
.36a6	b9 7f 36	lda $367f,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.36a9	95 40		sta $40,x			sta 	esType,x
.36ab	ac 20 0d	ldy $0d20			ldy 	varEnd 						; restore Y
.36ae	ad 1f 0d	lda $0d1f			lda 	VarType 					; get variable type, put LSB into C
.36b1	4a		lsr a				lsr 	a
.36b2	90 03		bcc $36b7			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.36b4	20 fc 36	jsr $36fc			jsr 	AccessArray 				; array lookup. if LSB was set.
.36b7					_AVNotArray:
.36b7	8a		txa				txa 								; return stack in A and return
.36b8	60		rts				rts
.36b9					_AVTypeTable:
>36b9	80 80						.byte 	$80,$80						; integer
>36bb	c0 c0						.byte 	$C0,$C0 					; string
>36bd	81 81						.byte 	$81,$81 					; float
.36bf					AccessSetup:
.36bf	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.36c1	8d 1e 0d	sta $0d1e			sta 	varHash
.36c4	98		tya				tya
.36c5	48		pha				pha
.36c6	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.36c8	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.36ca	b0 0b		bcs $36d7			bcs 	_ASComplete
.36cc	18		clc				clc 								; add to the hash. Might improve this.
.36cd	6d 1e 0d	adc $0d1e			adc 	varHash
.36d0	8d 1e 0d	sta $0d1e			sta 	varHash
.36d3	c8		iny				iny 								; next character
.36d4	4c c6 36	jmp $36c6			jmp 	_ASLoop
.36d7					_ASComplete:
.36d7	8d 1f 0d	sta $0d1f			sta 	varType 					; save variable type byte
.36da	c8		iny				iny
.36db	8c 20 0d	sty $0d20			sty 	varEnd 						; save the ending position.
.36de	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.36df	e9 3a		sbc #$3a			sbc 	#$3A
.36e1	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.36e2	0a		asl a				asl 	a
.36e3	0a		asl a				asl 	a
.36e4	0a		asl a				asl 	a 							; 2 bytes/word
.36e5	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.36e7	ad 1e 0d	lda $0d1e			lda 	varHash 					; get hash
.36ea	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.36ec	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.36ed	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.36ef	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.36f1	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.36f3	a9 0a		lda #$0a			lda 	#hashTables >> 8
.36f5	69 00		adc #$00			adc 	#0
.36f7	85 7d		sta $7d				sta 	hashList+1
.36f9	68		pla				pla
.36fa	a8		tay				tay
.36fb	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.36fc					AccessArray:
.36fc	e8		inx				inx
.36fd	8a		txa				txa
.36fe	a2 06		ldx #$06		ldx	#6
.3700	20 af 2c	jsr $2caf		jsr	mainHandler
.3703	48		pha				pha
.3704	a2 00		ldx #$00		ldx	#0
.3706	20 af 2c	jsr $2caf		jsr	mainHandler
.3709	68		pla				pla
.370a	aa		tax				tax
.370b	ca		dex				dex
.370c	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.370e	15 59		ora $59,x			ora 	esInt2+1,x
.3710	d0 33		bne $3745			bne 	_AABadIndex
.3712	98		tya				tya
.3713	48		pha				pha
.3714	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3716	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3718	b5 50		lda $50,x			lda 	esInt1,x
.371a	85 2b		sta $2b				sta 	temp0+1
.371c	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.371e	b5 49		lda $49,x			lda 	esInt0+1,x
.3720	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3722	c8		iny				iny
.3723	b5 51		lda $51,x			lda 	esInt1+1,x
.3725	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3727	b0 1c		bcs $3745			bcs 	_AABadIndex 				; if >= then fail.
.3729	e8		inx				inx 								; point to index
.372a	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.372c	b1 2a		lda ($2a),y			lda 	(temp0),y
.372e	20 4a 37	jsr $374a			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3731	ca		dex				dex
.3732	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3734	18		clc				clc
.3735	b5 49		lda $49,x			lda 	esInt0+1,x
.3737	71 2a		adc ($2a),y			adc 	(temp0),y
.3739	95 48		sta $48,x			sta 	esInt0,x
.373b	b5 51		lda $51,x			lda 	esInt1+1,x
.373d	c8		iny				iny
.373e	71 2a		adc ($2a),y			adc 	(temp0),y
.3740	95 50		sta $50,x			sta 	esInt1,x
.3742	68		pla				pla
.3743	a8		tay				tay
.3744	60		rts				rts
.3745					_AABadIndex:
.3745	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3747	20 85 11	jsr $1185		jsr	errorHandler
.374a					MultiplyTOSByA:
.374a	48		pha				pha
.374b	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.374d	85 2c		sta $2c				sta 	temp1
.374f	b5 50		lda $50,x			lda 	esInt1,x
.3751	85 2d		sta $2d				sta 	temp1+1
.3753	68		pla				pla
.3754	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3756	36 50		rol $50,x			rol 	esInt1,x
.3758	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.375a	f0 17		beq $3773			beq 	_MTBAExit
.375c	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.375e	d0 0f		bne $376f			bne 	_MTBANotFloat
.3760	48		pha				pha
.3761	18		clc				clc 								; so this will make it x 3
.3762	b5 48		lda $48,x			lda 	esInt0,x
.3764	65 2c		adc $2c				adc 	temp1
.3766	95 48		sta $48,x			sta 	esInt0,x
.3768	b5 50		lda $50,x			lda 	esInt1,x
.376a	65 2d		adc $2d				adc 	temp1+1
.376c	95 50		sta $50,x			sta 	esInt1,x
.376e	68		pla				pla
.376f					_MTBANotFloat:
.376f	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3771	36 50		rol $50,x			rol 	esInt1,x
.3773					_MTBAExit:
.3773	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3774					CreateVariable:
.3774	98		tya				tya 								; push Y on the stack twice.
.3775	48		pha				pha									; position in code of the new variable.
.3776	48		pha				pha
.3777	ae 1f 0d	ldx $0d1f			ldx 	varType 					; get var type 0-5 from the var type
.377a	bd 93 37	lda $3793,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.377d	48		pha				pha 								; save length
.377e	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3780	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3782	a5 36		lda $36				lda 	lowMemory+1
.3784	85 2b		sta $2b				sta 	temp0+1
.3786	68		pla				pla 								; get length
.3787	18		clc				clc 								; add to low memory.
.3788	65 35		adc $35				adc 	lowMemory
.378a	85 35		sta $35				sta 	lowMemory
.378c	90 02		bcc $3790			bcc 	_CVNoCarry
.378e	e6 36		inc $36				inc 	lowMemory+1
.3790					_CVNoCarry:
.3790	ad 1e 0d	lda $0d1e			lda 	varHash 					; store hash at offset 4.
.3793	a0 04		ldy #$04			ldy 	#4
.3795	91 2a		sta ($2a),y			sta 	(temp0),y
.3797	68		pla				pla 								; offset, work out where the variable name is.
.3798	18		clc				clc
.3799	65 28		adc $28				adc 	codePtr
.379b	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.379d	91 2a		sta ($2a),y			sta 	(temp0),y
.379f	a5 29		lda $29				lda 	codePtr+1
.37a1	69 00		adc #$00			adc 	#0
.37a3	c8		iny				iny
.37a4	91 2a		sta ($2a),y			sta 	(temp0),y
.37a6	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.37a9	b0 03		bcs $37ae			bcs 	_CVNotImmediate
.37ab	20 0b 38	jsr $380b			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.37ae					_CVNotImmediate:
.37ae	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.37b0	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.37b2	91 2a		sta ($2a),y			sta 	(temp0),y
.37b4	c8		iny				iny
.37b5	b1 7c		lda ($7c),y			lda 	(hashList),y
.37b7	91 2a		sta ($2a),y			sta 	(temp0),y
.37b9	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.37bb	91 7c		sta ($7c),y			sta 	(hashList),y
.37bd	88		dey				dey
.37be	a5 2a		lda $2a				lda 	temp0
.37c0	91 7c		sta ($7c),y			sta 	(hashList),y
.37c2	ad 1f 0d	lda $0d1f			lda 	varType 					; type in A
.37c5	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.37c7	20 d3 37	jsr $37d3			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.37ca	68		pla				pla
.37cb	a8		tay				tay
.37cc	60		rts				rts
>37cd	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>37cf	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>37d1	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.37d3					ZeroTemp0Y:
.37d3	4a		lsr a				lsr 	a 							; bit 0 in carry
.37d4	0a		asl a				asl 	a
.37d5	b0 19		bcs $37f0			bcs 	_ZTExit 					; we don't initialise arrays.
.37d7	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.37d9	f0 16		beq $37f1			beq 	_ZTWriteNullString 			; write "" string
.37db	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.37dd	f0 22		beq $3801			beq 	_ZTWriteFloat
.37df	98		tya				tya
.37e0	48		pha				pha
.37e1	a9 00		lda #$00			lda 	#0
.37e3	91 2a		sta ($2a),y			sta 	(temp0),y
.37e5	c8		iny				iny
.37e6	91 2a		sta ($2a),y			sta 	(temp0),y
.37e8	c8		iny				iny
.37e9	91 2a		sta ($2a),y			sta 	(temp0),y
.37eb	c8		iny				iny
.37ec	91 2a		sta ($2a),y			sta 	(temp0),y
.37ee	68		pla				pla
.37ef	a8		tay				tay
.37f0					_ZTExit:
.37f0	60		rts				rts
.37f1					_ZTWriteNullString:
.37f1	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.37f3	8d ce 0a	sta $0ace			sta 	NullString
.37f6	a9 ce		lda #$ce			lda 	#NullString & $FF
.37f8	91 2a		sta ($2a),y			sta 	(temp0),y
.37fa	a9 0a		lda #$0a			lda 	#NullString >> 8
.37fc	c8		iny				iny
.37fd	91 2a		sta ($2a),y			sta 	(temp0),y
.37ff	88		dey				dey
.3800	60		rts				rts
.3801					_ZTWriteFloat:
.3801	8a		txa				txa
.3802	48		pha				pha
.3803	a2 1e		ldx #$1e		ldx	#30
.3805	20 d0 14	jsr $14d0		jsr	floatingpointHandler
.3808	68		pla				pla
.3809	aa		tax				tax
.380a	60		rts				rts
.380b					CloneVariableName:
.380b	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.380d	b1 2a		lda ($2a),y			lda 	(temp0),y
.380f	85 2e		sta $2e				sta 	temp2
.3811	c8		iny				iny
.3812	b1 2a		lda ($2a),y			lda 	(temp0),y
.3814	85 2f		sta $2f				sta 	temp2+1
.3816	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3818	91 2a		sta ($2a),y			sta 	(temp0),y
.381a	88		dey				dey
.381b	a5 35		lda $35				lda 	lowMemory
.381d	91 2a		sta ($2a),y			sta 	(temp0),y
.381f	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3821					_CVNCopy:
.3821	b1 2e		lda ($2e),y			lda		(temp2),y
.3823	91 35		sta ($35),y			sta 	(lowMemory),y
.3825	c8		iny				iny
.3826	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3828	90 f7		bcc $3821			bcc 	_CVNCopy
.382a	98		tya				tya 								; add Y to low memory
.382b	18		clc				clc
.382c	65 35		adc $35				adc 	lowMemory
.382e	85 35		sta $35				sta 	lowMemory
.3830	90 02		bcc $3834			bcc 	_CVNNoCarry
.3832	e6 36		inc $36				inc 	lowMemory+1
.3834					_CVNNoCarry:
.3834	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3835					CreateArray:
.3835	20 bf 36	jsr $36bf			jsr 	AccessSetup 				; set up the basic stuff.
.3838	ad 1f 0d	lda $0d1f			lda 	varType 					; is the variable type an array
.383b	4a		lsr a				lsr 	a
.383c	90 3f		bcc $387d			bcc 	_CANotArray 				; no, cause an error.
.383e	20 ed 38	jsr $38ed			jsr 	FindVariable 				; does the variable exist already
.3841	b0 35		bcs $3878			bcs 	_CAFound 					; cannot redefine it.
.3843	20 74 37	jsr $3774			jsr 	CreateVariable 				; create the variable entry.
.3846	ac 20 0d	ldy $0d20			ldy 	varEnd 						; point Y to the end of the variable entry.
.3849	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.384b	48		pha				pha
.384c	a5 2b		lda $2b				lda 	temp0+1
.384e	48		pha				pha
.384f	ad 1f 0d	lda $0d1f			lda 	varType 					; push variable type on the stack.
.3852	48		pha				pha
.3853	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3855	a2 06		ldx #$06		ldx	#6
.3857	20 af 2c	jsr $2caf		jsr	mainHandler
.385a	a2 00		ldx #$00		ldx	#0
.385c	20 af 2c	jsr $2caf		jsr	mainHandler
.385f	68		pla				pla 		 						; restore type and position.
.3860	8d 1f 0d	sta $0d1f			sta 	varType
.3863	68		pla				pla
.3864	85 2b		sta $2b				sta 	temp0+1
.3866	68		pla				pla
.3867	85 2a		sta $2a				sta 	temp0
.3869	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.386b	29 e0		and #$e0			and 	#$E0
.386d	05 58		ora $58				ora 	esInt2
.386f	05 60		ora $60				ora 	esInt3
.3871	f0 0f		beq $3882			beq 	_CASizeOk
.3873					_CASize:
.3873	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3875	20 85 11	jsr $1185		jsr	errorHandler
.3878					_CAFound:
.3878	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.387a	20 85 11	jsr $1185		jsr	errorHandler
.387d					_CANotArray:
.387d	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.387f	20 85 11	jsr $1185		jsr	errorHandler
.3882					_CASizeOk:
.3882	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3884	d0 02		bne $3888			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3886	e6 49		inc $49				inc 	esInt0+1
.3888					_CANoCarry:
.3888	98		tya				tya
.3889	48		pha				pha
.388a	a0 05		ldy #$05			ldy 	#5
.388c	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.388e	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3890	c8		iny				iny
.3891	a5 36		lda $36				lda 	lowMemory+1
.3893	91 2a		sta ($2a),y			sta 	(temp0),y
.3895	c8		iny				iny
.3896	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3898	91 2a		sta ($2a),y			sta 	(temp0),y
.389a	c8		iny				iny
.389b	a5 50		lda $50				lda 	esInt1
.389d	91 2a		sta ($2a),y			sta 	(temp0),y
.389f	c8		iny				iny
.38a0	ae 1f 0d	ldx $0d1f			ldx 	varType 					; get the length per element
.38a3	bd ab 38	lda $38ab,x			lda 	_CAActualSize-$3A-1,x
.38a6	91 2a		sta ($2a),y			sta 	(temp0),y
.38a8	aa		tax				tax 								; save size in X
.38a9	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.38ab	85 2a		sta $2a				sta 	temp0
.38ad	a5 36		lda $36				lda 	lowMemory+1
.38af	85 2b		sta $2b				sta 	temp0+1
.38b1	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.38b3	85 2c		sta $2c				sta 	temp1
.38b5	85 2d		sta $2d				sta 	temp1+1
.38b7					_CAInitialiseArray:
.38b7	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.38b9	ad 1f 0d	lda $0d1f			lda 	varType 					; base type of array in A.
.38bc	29 fe		and #$fe			and 	#$FE
.38be	20 d3 37	jsr $37d3			jsr 	ZeroTemp0Y
.38c1	8a		txa				txa 								; add X to temp0, also updating lowMemory
.38c2	18		clc				clc
.38c3	65 2a		adc $2a				adc 	temp0
.38c5	85 2a		sta $2a				sta 	temp0
.38c7	85 35		sta $35				sta 	lowMemory
.38c9	a5 2b		lda $2b				lda 	temp0+1
.38cb	69 00		adc #$00			adc 	#0
.38cd	85 2b		sta $2b				sta 	temp0+1
.38cf	85 36		sta $36				sta 	lowMemory+1
.38d1	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.38d3	d0 02		bne $38d7			bne 	_CAIANoCarry
.38d5	e6 2d		inc $2d				inc 	temp1+1
.38d7					_CAIANoCarry:
.38d7	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.38d9	c5 2c		cmp $2c				cmp 	temp1
.38db	d0 da		bne $38b7			bne 	_CAInitialiseArray
.38dd	a5 50		lda $50				lda 	esInt1
.38df	c5 2d		cmp $2d				cmp 	temp1+1
.38e1	d0 d4		bne $38b7			bne 	_CAInitialiseArray
.38e3	68		pla				pla
.38e4	a8		tay				tay
.38e5	60		rts				rts
.38e6					_CAActualSize:
>38e6	04 00						.byte 	VarISize,0
>38e8	02 00						.byte 	VarSSize,0
>38ea	06 00						.byte 	VarFSize,0
>38ec	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.38ed					FindVariable:
.38ed	98		tya				tya
.38ee	48		pha				pha
.38ef	98		tya				tya 								; point temp2 to the actual name
.38f0	18		clc				clc 								; in memory of the variable being created
.38f1	65 28		adc $28				adc 	codePtr
.38f3	85 2e		sta $2e				sta 	temp2
.38f5	a5 29		lda $29				lda 	codePtr+1
.38f7	69 00		adc #$00			adc 	#0
.38f9	85 2f		sta $2f				sta 	temp2+1
.38fb	a0 00		ldy #$00			ldy 	#0
.38fd	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.38ff	85 2a		sta $2a				sta 	temp0
.3901	a5 7d		lda $7d				lda 	hashList+1
.3903	85 2b		sta $2b				sta 	temp0+1
.3905	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3907	b1 2a		lda ($2a),y			lda 	(temp0),y
.3909	f0 2c		beq $3937			beq 	_FVFail
.390b	aa		tax				tax
.390c	88		dey				dey		 							; get LSB
.390d	b1 2a		lda ($2a),y			lda 	(temp0),y
.390f	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3911	86 2b		stx $2b				stx 	temp0+1
.3913	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3915	b1 2a		lda ($2a),y			lda 	(temp0),y
.3917	cd 1e 0d	cmp $0d1e			cmp 	varHash
.391a	d0 e9		bne $3905			bne 	_FVNext 					; if not, no point in checking the name.
.391c	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.391d	b1 2a		lda ($2a),y			lda 	(temp0),y
.391f	85 2d		sta $2d				sta 	temp1+1
.3921	88		dey				dey
.3922	b1 2a		lda ($2a),y			lda 	(temp0),y
.3924	85 2c		sta $2c				sta 	temp1
.3926	a0 00		ldy #$00			ldy 	#0
.3928					_FVCheck:
.3928	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.392a	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.392c	d0 d7		bne $3905			bne 	_FVNext		 				; fail if different.
.392e	c8		iny				iny
.392f	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3931	90 f5		bcc $3928			bcc 	_FVCheck
.3933	68		pla				pla
.3934	a8		tay				tay
.3935	38		sec				sec
.3936	60		rts				rts
.3937					_FVFail:
.3937	68		pla				pla
.3938	a8		tay				tay
.3939	18		clc				clc
.393a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.393b					HashTableReset:
.393b	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.393d	a9 00		lda #$00			lda 	#0
.393f					_HTRClear:
.393f	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3942	ca		dex				dex
.3943	d0 fa		bne $393f			bne 	_HTRClear
.3945	60		rts				rts

;******  Return to file: variable/variable.asm

.3946					variableHandler:
.3946	7c 49 39	jmp ($3949,x)			jmp 	(variableVectors,x)
.3949					variableVectors:
>3949	58 36					.word AccessVariable       ; index 0
>394b	35 38					.word CreateArray          ; index 2
>394d	3b 39					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.394f					section_end_variable:
.394f					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

>394f							.align 	256
.3a00					programMemory:
>39ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3a00					section_end_footer:

;******  End of listing
