
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Sat Mar  6 15:56:21 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a2 02		ldx #$02		ldx	#2
.1005	20 dc 21	jsr $21dc		jsr	deviceHandler
.1008	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100a	8d c8 0a	sta $0ac8			sta 	basePage
.100d	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100f	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1012	a9 00		lda #$00			lda 	#($9800) & $FF
.1014	8d ca 0a	sta $0aca			sta 	endMemory
.1017	a9 98		lda #$98			lda 	#($9800) >> 8
.1019	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101c	4c dc 13	jmp $13dc			jmp 	Command_Run
.2a43					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	07 0a 00 d5 af c6 80 09			.byte 7,10,0,213,175,198,128,9,20,0,209,11,58,141,64,128,9,25,0,207,13,59,69,198,128,12,30,0,209,11,58,141,11,58,143,65,128,18,40,0,209,1,58,141,11,58,148,66,147,67,143,68,144,69,128,7,45,0,215,74,124,128,11,46,0,155,12,58,141,65,203,69,128,13,47,0,209,13,59,12,58,198,141,1,58,128,7,48,0,160,12,58,128,14,50,0,156,11,58,140,66,92,80,161,214,94,128,7,60,0,213,175,198,128,8,70,0,153,199,158,171,128,5,188,2,216,128,4,189,2,128,4,190,2,128,0
>5008	14 00 d1 0b 3a 8d 40 80 09 19 00 cf 0d 3b 45 c6
>5018	80 0c 1e 00 d1 0b 3a 8d 0b 3a 8f 41 80 12 28 00
>5028	d1 01 3a 8d 0b 3a 94 42 93 43 8f 44 90 45 80 07
>5038	2d 00 d7 4a 7c 80 0b 2e 00 9b 0c 3a 8d 41 cb 45
>5048	80 0d 2f 00 d1 0d 3b 0c 3a c6 8d 01 3a 80 07 30
>5058	00 a0 0c 3a 80 0e 32 00 9c 0b 3a 8c 42 5c 50 a1
>5068	d6 5e 80 07 3c 00 d5 af c6 80 08 46 00 99 c7 9e
>5078	ab 80 05 bc 02 d8 80 04 bd 02 80 04 be 02 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101f					Command_Assert:
.101f	20 92 1a	jsr $1a92			jsr 	EvaluateRootInteger 		; what is being asserted.
.1022	20 d6 20	jsr $20d6			jsr 	MInt32Zero 					; is it true ?
.1025	f0 01		beq $1028			beq 	_CAError
.1027	60		rts				rts
.1028					_CAError:
.1028	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.102a	20 eb 21	jsr $21eb		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.102d					CommandClear:
.102d	98		tya				tya
.102e	48		pha				pha
.102f	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.1032	85 0d		sta $0d				sta 	highMemory
.1034	ad cb 0a	lda $0acb			lda 	endMemory+1
.1037	85 0e		sta $0e				sta 	highMemory+1
.1039	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.103c	85 04		sta $04				sta 	temp0
.103e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1041	85 05		sta $05				sta 	temp0+1
.1043					_CCFindEnd:
.1043	a0 00		ldy #$00			ldy 	#0
.1045	b1 04		lda ($04),y			lda 	(temp0),y
.1047	f0 0c		beq $1055			beq 	_CCFoundEnd 				; offset zero is end.
.1049	18		clc				clc
.104a	65 04		adc $04				adc 	temp0 						; move to next line
.104c	85 04		sta $04				sta 	temp0
.104e	90 f3		bcc $1043			bcc 	_CCFindEnd
.1050	e6 05		inc $05				inc 	temp0+1
.1052	4c 43 10	jmp $1043			jmp 	_CCFindEnd
.1055					_CCFoundEnd:
.1055	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1057	85 0f		sta $0f				sta 	lowMemory
.1059	a5 05		lda $05				lda 	temp0+1
.105b	85 10		sta $10				sta 	lowMemory+1
.105d	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105f	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1062	20 3c 21	jsr $213c			jsr 	RSReset 					; reset the return stack.
.1065	a2 04		ldx #$04		ldx	#4
.1067	20 3a 2a	jsr $2a3a		jsr	variableHandler
.106a	20 89 15	jsr $1589			jsr 	ScanProc 					; scan for procedures
.106d	20 bd 13	jsr $13bd			jsr 	CommandRestore 				; do a restore
.1070	68		pla				pla
.1071	a8		tay				tay
.1072	60		rts				rts
.1073					AdvanceLowMemoryByte:
.1073	18		clc				clc
.1074	65 0f		adc $0f				adc 	lowMemory
.1076	85 0f		sta $0f				sta 	lowMemory
.1078	90 02		bcc $107c			bcc 	_ALMBExit
.107a	e6 10		inc $10				inc 	lowMemory+1
.107c					_ALMBExit:
.107c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.107d					Command_Dim:
.107d	a2 02		ldx #$02		ldx	#2
.107f	20 3a 2a	jsr $2a3a		jsr	variableHandler
.1082	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.1084	c8		iny				iny
.1085	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1087	f0 f4		beq $107d			beq 	Command_Dim
.1089	88		dey				dey 								; unpick get
.108a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2a43					Command_FOR:
.2a43	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2a45	a2 0b		ldx #$0b			ldx 	#11
.2a47	20 4a 21	jsr $214a			jsr 	RSClaim
.2a4a	20 c7 10	jsr $10c7			jsr 	CommandLET 					; do the same as LET.
.2a4d	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2a4f	c9 80		cmp #$80			cmp 	#$80
.2a51	d0 4c		bne $2a9f			bne 	_CFType
.2a53	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.2a55	20 17 21	jsr $2117			jsr 	CheckToken
.2a58	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2a5a	20 94 1a	jsr $1a94			jsr 	EvaluateInteger				; get terminal value in stack 1
.2a5d	98		tya				tya
.2a5e	48		pha				pha
.2a5f	a0 04		ldy #$04			ldy 	#4
.2a61	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.2a63	91 78		sta ($78),y			sta 	(rsPointer),y
.2a65	c8		iny				iny
.2a66	a5 50		lda $50				lda		esInt1
.2a68	91 78		sta ($78),y			sta 	(rsPointer),y
.2a6a	c8		iny				iny
.2a6b	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2a6d	91 78		sta ($78),y			sta 	(rsPointer),y
.2a6f	c8		iny				iny
.2a70	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.2a72	91 78		sta ($78),y			sta 	(rsPointer),y
.2a74	c8		iny				iny
.2a75	a5 51		lda $51				lda		esInt1+1
.2a77	91 78		sta ($78),y			sta 	(rsPointer),y
.2a79	c8		iny				iny
.2a7a	a5 59		lda $59				lda		esInt2+1
.2a7c	91 78		sta ($78),y			sta 	(rsPointer),y
.2a7e	c8		iny				iny
.2a7f	a5 61		lda $61				lda		esInt3+1
.2a81	91 78		sta ($78),y			sta 	(rsPointer),y
.2a83	68		pla				pla
.2a84	a8		tay				tay
.2a85	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.2a87	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.2a89	d0 0e		bne $2a99			bne 	_CFDone
.2a8b	c8		iny				iny									; skip over step.
.2a8c	20 94 1a	jsr $1a94			jsr 	EvaluateInteger 			; get step
.2a8f	98		tya				tya
.2a90	48		pha				pha
.2a91	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2a93	a0 06		ldy #$06			ldy 	#6
.2a95	91 78		sta ($78),y			sta 	(rsPointer),y
.2a97	68		pla				pla
.2a98	a8		tay				tay
.2a99					_CFDone:
.2a99	a9 01		lda #$01			lda 	#1
.2a9b	20 76 21	jsr $2176			jsr 	RSSavePosition 				; save position.
.2a9e	60		rts				rts
.2a9f					_CFType:
.2a9f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2aa1	20 eb 21	jsr $21eb		jsr	errorHandler
.2aa4					Command_NEXT:
.2aa4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2aa6	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2aa8	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2aaa	f0 05		beq $2ab1			beq 	_isok
.2aac	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2aae	20 eb 21	jsr $21eb		jsr	errorHandler
.2ab1					_isok:
.2ab1	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2ab3	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2ab5	b0 18		bcs $2acf			bcs 	_CNNoIndex
.2ab7	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2ab9	20 c1 1a	jsr $1ac1			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2abc	98		tya				tya
.2abd	48		pha				pha
.2abe	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2ac0	b1 78		lda ($78),y			lda 	(rsPointer),y
.2ac2	d5 48		cmp $48,x			cmp 	esInt0,x
.2ac4	d0 76		bne $2b3c			bne 	_CNBadIndex
.2ac6	c8		iny				iny
.2ac7	b1 78		lda ($78),y			lda 	(rsPointer),y
.2ac9	d5 50		cmp $50,x			cmp 	esInt1,x
.2acb	d0 6f		bne $2b3c			bne 	_CNBadIndex
.2acd	68		pla				pla
.2ace	a8		tay				tay
.2acf					_CNNoIndex:
.2acf	98		tya				tya
.2ad0	48		pha				pha
.2ad1	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2ad3	b1 78		lda ($78),y			lda 	(rsPointer),y
.2ad5	85 04		sta $04				sta 	temp0
.2ad7	c8		iny				iny
.2ad8	b1 78		lda ($78),y			lda 	(rsPointer),y
.2ada	85 05		sta $05				sta 	temp0+1
.2adc	c8		iny				iny
.2add	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2adf	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2ae1	85 09		sta $09				sta 	temp2+1 					; save for later.
.2ae3	10 01		bpl $2ae6			bpl 	_CNSignX
.2ae5	ca		dex				dex  								; X = $FF
.2ae6					_CNSignX:
.2ae6	18		clc				clc 								; add to the LSB
.2ae7	a0 00		ldy #$00			ldy 	#0
.2ae9	71 04		adc ($04),y			adc 	(temp0),y
.2aeb	91 04		sta ($04),y			sta 	(temp0),y
.2aed					_CNPropogate:
.2aed	c8		iny				iny  								; add the sign extended in X to the rest.
.2aee	8a		txa				txa
.2aef	71 04		adc ($04),y			adc 	(temp0),y
.2af1	91 04		sta ($04),y			sta 	(temp0),y
.2af3	c8		iny				iny
.2af4	8a		txa				txa
.2af5	71 04		adc ($04),y			adc 	(temp0),y
.2af7	91 04		sta ($04),y			sta 	(temp0),y
.2af9	c8		iny				iny
.2afa	8a		txa				txa
.2afb	71 04		adc ($04),y			adc 	(temp0),y
.2afd	91 04		sta ($04),y			sta 	(temp0),y
.2aff	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2b00	a5 78		lda $78				lda 	rsPointer
.2b02	69 07		adc #$07			adc 	#7
.2b04	85 06		sta $06				sta 	temp1
.2b06	a9 00		lda #$00			lda 	#0
.2b08	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2b0a	a8		tay				tay 								; and clear the Y register again.
.2b0b	65 79		adc $79				adc 	rsPointer+1
.2b0d	85 07		sta $07				sta 	temp1+1
.2b0f	38		sec				sec 								; calculate current - limit oring interim values.
.2b10	20 48 2b	jsr $2b48			jsr 	_CNCompare
.2b13	20 48 2b	jsr $2b48			jsr 	_CNCompare
.2b16	20 48 2b	jsr $2b48			jsr 	_CNCompare
.2b19	20 48 2b	jsr $2b48			jsr 	_CNCompare
.2b1c	50 02		bvc $2b20			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2b1e	49 80		eor #$80			eor 	#$80
.2b20					_CNNoOverflow:
.2b20	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2b22	30 1d		bmi $2b41			bmi 	_CNCheckDownto
.2b24	c9 00		cmp #$00			cmp 	#0
.2b26	30 0c		bmi $2b34			bmi 	_CNLoopRound 				; loop round if < =
.2b28	a5 08		lda $08				lda 	temp2
.2b2a	f0 08		beq $2b34			beq 	_CNLoopRound
.2b2c					_CNLoopExit:
.2b2c	68		pla				pla
.2b2d	a8		tay				tay
.2b2e	a9 0b		lda #$0b			lda 	#11
.2b30	20 6c 21	jsr $216c			jsr 	RSFree
.2b33	60		rts				rts
.2b34					_CNLoopRound:
.2b34	68		pla				pla
.2b35	a8		tay				tay
.2b36	a9 01		lda #$01			lda 	#1
.2b38	20 89 21	jsr $2189			jsr 	RSLoadPosition				; go back to the loop top
.2b3b	60		rts				rts
.2b3c					_CNBadIndex:
.2b3c	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2b3e	20 eb 21	jsr $21eb		jsr	errorHandler
.2b41					_CNCheckDownto:
.2b41	c9 00		cmp #$00			cmp 	#0
.2b43	10 ef		bpl $2b34			bpl 	_CNLoopRound
.2b45	4c 2c 2b	jmp $2b2c			jmp 	_CNLoopExit
.2b48					_CNCompare:
.2b48	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2b4a	f1 06		sbc ($06),y			sbc 	(temp1),y
.2b4c	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2b4e	85 08		sta $08				sta 	temp2
.2b50	c8		iny				iny
.2b51	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.108b					CommandIf:
.108b	20 92 1a	jsr $1a92			jsr 	EvaluateRootInteger 		; if what ?
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1090	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1092	f0 04		beq $1098			beq 	_IfSimple
.1094	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1096	d0 1b		bne $10b3			bne 	_IfComplex
.1098					_IfSimple:
.1098	20 d6 20	jsr $20d6			jsr 	MInt32Zero					; check if TOS zero
.109b	f0 10		beq $10ad			beq 	_IfEOL 						; go to next line.
.109d	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.109f	c8		iny				iny
.10a0	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.10a2	f0 0c		beq $10b0			beq 	_IfGoto 					; do the Goto code
.10a4	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10a6	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10a8	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10aa	f0 04		beq $10b0			beq 	_IfGoto
.10ac	60		rts				rts 								; else continue on this line.
.10ad					_IfEOL:
.10ad	4c fd 15	jmp $15fd			jmp 	AdvanceNextLine 			; go to next line
.10b0					_IfGoto:
.10b0	4c 3c 16	jmp $163c			jmp 	CommandGoto
.10b3					_IfComplex:
.10b3	20 d6 20	jsr $20d6			jsr 	MInt32Zero 					; is it true ?
.10b6	f0 01		beq $10b9			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10b8	60		rts				rts 								; else continue.
.10b9					_IFSkip:
.10b9	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10bb	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10bd	4c bb 2b	jmp $2bbb			jmp		ScanForward
.10c0					Command_ELSE:
.10c0	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10c2	8a		txa				txa
.10c3	4c bb 2b	jmp $2bbb			jmp		ScanForward
.10c6					Command_ENDIF:
.10c6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10c7					CommandLet:
.10c7	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10c9	20 c1 1a	jsr $1ac1			jsr 	EvaluateReference
.10cc	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10ce	20 17 21	jsr $2117			jsr 	CheckToken
.10d1	e8		inx				inx 								; do RHS
.10d2	20 75 1a	jsr $1a75			jsr 	Evaluate 					; evaluate and derefernce
.10d5	ca		dex				dex
.10d6	20 da 10	jsr $10da			jsr 	WriteValue 					; write it out
.10d9	60		rts				rts
.10da					WriteValue:
.10da	98		tya				tya
.10db	48		pha				pha
.10dc	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10df	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10e1	55 41		eor $41,x			eor 	esType+1,x
.10e3	29 40		and #$40			and 	#$40
.10e5	d0 50		bne $1137			bne		_WVType
.10e7	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10e9	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10eb	29 40		and #$40			and 	#$40
.10ed	d0 1f		bne $110e			bne 	_WVCopyString
.10ef	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10f1	15 41		ora $41,x			ora 	esType+1,x
.10f3	4a		lsr a				lsr 	a
.10f4	90 22		bcc $1118			bcc 	_WVCopyData4
.10f6	b5 40		lda $40,x			lda 	esType,x
.10f8	4a		lsr a				lsr 	a
.10f9	90 3c		bcc $1137			bcc 	_WVType
.10fb	e8		inx				inx 								; force the value being written to be a float.
.10fc	20 ae 16	jsr $16ae			jsr 	BPMakeFloat
.10ff	ca		dex				dex
.1100	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; set Temp0 to write address
.1103	e8		inx				inx
.1104	8a		txa				txa
.1105	a2 20		ldx #$20		ldx	#32
.1107	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.110a	aa		tax				tax
.110b	4c 34 11	jmp $1134			jmp 	_WVCopyExit
.110e					_WVCopyString:
.110e	8a		txa				txa
.110f	a2 0c		ldx #$0c		ldx	#12
.1111	20 72 27	jsr $2772		jsr	stringHandler
.1114	aa		tax				tax
.1115	4c 34 11	jmp $1134			jmp 	_WVCopyExit
.1118					_WVCopyData4:
.1118	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.111a	29 20		and #$20			and 	#$20
.111c	d0 10		bne $112e			bne 	_WVCopyData1
.111e	a0 03		ldy #$03			ldy 	#3
.1120	b5 61		lda $61,x			lda 	esInt3+1,x
.1122	91 04		sta ($04),y			sta 	(temp0),y
.1124	88		dey				dey
.1125	b5 59		lda $59,x			lda 	esInt2+1,x
.1127	91 04		sta ($04),y			sta 	(temp0),y
.1129	88		dey				dey
.112a	b5 51		lda $51,x			lda 	esInt1+1,x
.112c	91 04		sta ($04),y			sta 	(temp0),y
.112e					_WVCopyData1:
.112e	a0 00		ldy #$00			ldy 	#0
.1130	b5 49		lda $49,x			lda 	esInt0+1,x
.1132	91 04		sta ($04),y			sta 	(temp0),y
.1134					_WVCopyExit:
.1134	68		pla				pla
.1135	a8		tay				tay
.1136	60		rts				rts
.1137					_WVType:
.1137	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1139	20 eb 21	jsr $21eb		jsr	errorHandler
.113c					TOSToTemp0:
.113c	b5 48		lda $48,x			lda 	esInt0,x
.113e	85 04		sta $04				sta 	temp0
.1140	b5 50		lda $50,x			lda 	esInt1,x
.1142	85 05		sta $05				sta 	temp0+1
.1144	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.1145					CommandLocal:
.1145	a2 00		ldx #$00			ldx 	#0
.1147	20 63 11	jsr $1163			jsr 	LocaliseVariable 			; localise one.
.114a					_CLCheckNext:
.114a	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.114c	c8		iny				iny
.114d	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.114f	f0 06		beq $1157			beq 	_CLAssignment
.1151	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1153	f0 f0		beq $1145			beq 	CommandLocal
.1155	88		dey				dey
.1156	60		rts				rts
.1157					_CLAssignment:
.1157	a2 01		ldx #$01			ldx 	#1
.1159	20 75 1a	jsr $1a75			jsr 	Evaluate 					; evaluate RHS
.115c	ca		dex				dex
.115d	20 da 10	jsr $10da			jsr 	WriteValue
.1160	4c 4a 11	jmp $114a			jmp 	_CLCheckNext
.1163					LocaliseVariable:
.1163	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1165	c9 40		cmp #$40			cmp 	#$40
.1167	b0 67		bcs $11d0			bcs 	_LVSyntax
.1169	8a		txa				txa 								; get the address of that variable.
.116a	a2 00		ldx #$00		ldx	#0
.116c	20 3a 2a	jsr $2a3a		jsr	variableHandler
.116f	aa		tax				tax
.1170	8a		txa				txa
.1171	48		pha				pha
.1172	98		tya				tya
.1173	48		pha				pha
.1174	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1177	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1179	0a		asl a				asl 	a
.117a	10 16		bpl $1192			bpl 	_LVPushNumber
.117c	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.117e	b1 04		lda ($04),y			lda 	(temp0),y
.1180	c8		iny				iny
.1181	85 06		sta $06				sta 	temp1
.1183	b1 04		lda ($04),y			lda 	(temp0),y
.1185	85 07		sta $07				sta 	temp1+1
.1187	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1189	b1 06		lda ($06),y			lda 	(temp1),y
.118b	aa		tax				tax 								; into X
.118c	e8		inx				inx 								; +1 for length.
.118d	a9 24		lda #$24			lda 	#markerString
.118f	4c a7 11	jmp $11a7			jmp 	_LVWriteFrame
.1192					_LVPushNumber:
.1192	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1194	85 06		sta $06				sta 	temp1
.1196	a5 05		lda $05				lda 	temp0+1
.1198	85 07		sta $07				sta 	temp1+1
.119a	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.119c	4a		lsr a				lsr 	a
.119d	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.119f	a2 04		ldx #$04			ldx 	#VarISize
.11a1	90 04		bcc $11a7			bcc 	_LVIsInteger
.11a3	a9 23		lda #$23			lda 	#markerFloat
.11a5	a2 06		ldx #$06			ldx 	#VarFSize
.11a7					_LVIsInteger:
.11a7					_LVWriteFrame:
.11a7	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.11aa	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.11ab	e8		inx				inx
.11ac	e8		inx				inx
.11ad	20 4a 21	jsr $214a			jsr 	RSClaim 					; create the stack frame.
.11b0	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.11b2	a0 01		ldy #$01			ldy 	#1
.11b4	91 78		sta ($78),y			sta 	(rsPointer),y
.11b6	c8		iny				iny
.11b7	a5 05		lda $05				lda 	temp0+1
.11b9	91 78		sta ($78),y			sta 	(rsPointer),y
.11bb	a0 00		ldy #$00			ldy 	#0
.11bd					_LVCopyData:
.11bd	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.11bf	c8		iny				iny 								; write allowing for the header bit.
.11c0	c8		iny				iny
.11c1	c8		iny				iny
.11c2	91 78		sta ($78),y			sta 	(rsPointer),y
.11c4	88		dey				dey
.11c5	88		dey				dey
.11c6	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.11c9	d0 f2		bne $11bd			bne 	_LVCopyData
.11cb	68		pla				pla
.11cc	a8		tay				tay
.11cd	68		pla				pla
.11ce	aa		tax				tax
.11cf	60		rts				rts
.11d0					_LVSyntax:
.11d0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.11d2	20 eb 21	jsr $21eb		jsr	errorHandler
.11d5					RestoreLocals:
.11d5	a2 00		ldx #$00			ldx 	#0
.11d7	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11d9	c9 40		cmp #$40			cmp	 	#64
.11db	90 01		bcc $11de			bcc 	_RLocal
.11dd	60		rts				rts
.11de					_RLocal:
.11de	8a		txa				txa
.11df	48		pha				pha
.11e0	98		tya				tya
.11e1	48		pha				pha
.11e2	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11e4	b1 78		lda ($78),y			lda 	(rsPointer),y
.11e6	85 04		sta $04				sta 	temp0
.11e8	c8		iny				iny
.11e9	b1 78		lda ($78),y			lda 	(rsPointer),y
.11eb	85 05		sta $05				sta 	temp0+1
.11ed	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11ef	b1 78		lda ($78),y			lda 	(rsPointer),y
.11f1	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11f3	f0 28		beq $121d			beq 	_RString
.11f5	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11f7	c9 25		cmp #$25			cmp 	#markerInt
.11f9	f0 02		beq $11fd			beq 	_RIsInteger
.11fb	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11fd					_RIsInteger:
.11fd	8a		txa				txa
.11fe	48		pha				pha
.11ff	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1201					_RCopyBack:
.1201	b1 78		lda ($78),y			lda 	(rsPointer),y
.1203	88		dey				dey
.1204	88		dey				dey
.1205	88		dey				dey
.1206	91 04		sta ($04),y			sta 	(temp0),y
.1208	c8		iny				iny
.1209	c8		iny				iny
.120a	c8		iny				iny
.120b	c8		iny				iny
.120c	ca		dex				dex
.120d	d0 f2		bne $1201			bne 	_RCopyBack
.120f	68		pla				pla 								; get size add 3
.1210	18		clc				clc
.1211	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1213					_RRestoreAAndLoop:
.1213	20 6c 21	jsr $216c			jsr 	RSFree
.1216	68		pla				pla
.1217	a8		tay				tay
.1218	68		pla				pla
.1219	aa		tax				tax
.121a	4c d5 11	jmp $11d5			jmp 	RestoreLocals 				; go see if there are any more locals.
.121d					_RString:
.121d	a2 00		ldx #$00			ldx 	#0
.121f	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1221	b1 78		lda ($78),y			lda 	(rsPointer),y
.1223	95 48		sta $48,x			sta 	esInt0,x
.1225	c8		iny				iny
.1226	b1 78		lda ($78),y			lda 	(rsPointer),y
.1228	95 50		sta $50,x			sta 	esInt1,x
.122a	18		clc				clc
.122b	a5 78		lda $78				lda 	rsPointer
.122d	69 03		adc #$03			adc 	#3
.122f	95 49		sta $49,x			sta 	esInt0+1,x
.1231	a5 79		lda $79				lda 	rsPointer+1
.1233	69 00		adc #$00			adc 	#0
.1235	95 51		sta $51,x			sta 	esInt1+1,x
.1237	8a		txa				txa
.1238	a2 0c		ldx #$0c		ldx	#12
.123a	20 72 27	jsr $2772		jsr	stringHandler
.123d	a0 03		ldy #$03			ldy 	#3 							; get string length
.123f	b1 78		lda ($78),y			lda 	(rsPointer),y
.1241	18		clc				clc
.1242	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1244	4c 13 12	jmp $1213			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1247					Command_New:
.1247	20 36 14	jsr $1436			jsr 	ResetCodeAddress 			; point to first line
.124a	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.124c	98		tya				tya
.124d	91 02		sta ($02),y			sta 	(codePtr),y
.124f	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything down.
.1252	4c fa 15	jmp $15fa			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1255					Command_Poke:
.1255	a9 01		lda #$01			lda 	#1
.1257	d0 06		bne $125f			bne 	PokeGeneral
.1259					Command_Doke:
.1259	a9 02		lda #$02			lda 	#2
.125b	d0 02		bne $125f			bne 	PokeGeneral
.125d					Command_Loke:
.125d	a9 03		lda #$03			lda 	#3
.125f					PokeGeneral:
.125f	48		pha				pha 								; save size
.1260	20 92 1a	jsr $1a92			jsr 	EvaluateRootInteger 		; target address
.1263	20 2f 21	jsr $212f			jsr	 	CheckComma
.1266	e8		inx				inx
.1267	20 94 1a	jsr $1a94			jsr 	EvaluateInteger 			; what value to POKE ?
.126a	ca		dex				dex
.126b	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; temp0 points to the target address
.126e	84 0c		sty $0c				sty 	tempShort 					; save Y
.1270	68		pla				pla 								; get copy type and dispatch
.1271	aa		tax				tax
.1272	ca		dex				dex
.1273	f0 14		beq $1289			beq 	_Poke1
.1275	ca		dex				dex
.1276	f0 0b		beq $1283			beq 	_Poke2
.1278	a0 03		ldy #$03			ldy 	#3
.127a	a5 61		lda $61				lda 	esInt3+1
.127c	91 04		sta ($04),y			sta 	(temp0),y
.127e	88		dey				dey
.127f	a5 59		lda $59				lda 	esInt2+1
.1281	91 04		sta ($04),y			sta 	(temp0),y
.1283					_Poke2:
.1283	a0 01		ldy #$01			ldy 	#1
.1285	a5 51		lda $51				lda 	esInt1+1
.1287	91 04		sta ($04),y			sta 	(temp0),y
.1289					_Poke1:
.1289	a0 00		ldy #$00			ldy 	#0
.128b	a5 49		lda $49				lda 	esInt0+1
.128d	91 04		sta ($04),y			sta 	(temp0),y
.128f	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1291	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.1292					Command_Print:
.1292	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1294	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1297	88		dey				dey
.1298					_PrintLoopSkip:
.1298	c8		iny				iny
.1299					_PrintLoop:
.1299	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.129b	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.129d	f0 5b		beq $12fa			beq 	_PrintExit
.129f	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.12a1	f0 57		beq $12fa			beq 	_PrintExit
.12a3	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.12a6	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.12a8	f0 ee		beq $1298			beq 	_PrintLoopSkip
.12aa	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.12ac	f0 3c		beq $12ea			beq	 	_PrintNewLine
.12ae	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.12b0	f0 40		beq $12f2			beq 	_PrintTab
.12b2	20 73 1a	jsr $1a73			jsr 	EvaluateRoot 				; evaluate something at the root
.12b5	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.12b7	85 04		sta $04				sta 	temp0
.12b9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.12bb	85 05		sta $05				sta 	1+(temp0)
.12bd	a5 40		lda $40				lda 	esType 						; get type
.12bf	f0 15		beq $12d6			beq		_PrintInteger
.12c1	4a		lsr a				lsr 	a 							; check for floating point
.12c2	b0 08		bcs $12cc			bcs 	_PrintFloat
.12c4					_PrintString:
.12c4	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.12c6	20 3c 11	jsr $113c			jsr 	TOSToTemp0
.12c9	4c e4 12	jmp $12e4			jmp 	_PrintTemp0 				; print no leading space.
.12cc					_PrintFloat:
.12cc	a9 00		lda #$00			lda 	#0 							; stack level.
.12ce	a2 14		ldx #$14		ldx	#20
.12d0	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.12d3	4c dd 12	jmp $12dd			jmp 	_PrintSpaceTemp0
.12d6					_PrintInteger:
.12d6	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.12d8	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.12da	20 05 20	jsr $2005			jsr 	MInt32ToString				; convert to text
.12dd					_PrintSpaceTemp0:
.12dd	a9 20		lda #$20			lda 	#32
.12df	a2 06		ldx #$06		ldx	#6
.12e1	20 dc 21	jsr $21dc		jsr	deviceHandler
.12e4					_PrintTemp0:
.12e4	20 0b 13	jsr $130b			jsr 	PrintString
.12e7	4c 99 12	jmp $1299			jmp 	_PrintLoop
.12ea					_PrintNewLine:
.12ea	a2 00		ldx #$00		ldx	#0
.12ec	20 dc 21	jsr $21dc		jsr	deviceHandler
.12ef	4c 98 12	jmp $1298			jmp 	_PrintLoopSkip
.12f2					_PrintTab:
.12f2	a2 08		ldx #$08		ldx	#8
.12f4	20 dc 21	jsr $21dc		jsr	deviceHandler
.12f7	4c 98 12	jmp $1298			jmp 	_PrintLoopSkip
.12fa					_PrintExit:
.12fa	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12fd	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12ff	f0 09		beq $130a			beq 	_PrintExit2
.1301	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1303	f0 05		beq $130a			beq 	_PrintExit2
.1305	a2 00		ldx #$00		ldx	#0
.1307	20 dc 21	jsr $21dc		jsr	deviceHandler
.130a					_PrintExit2:
.130a	60		rts				rts
.130b					PrintString:
.130b	8a		txa				txa
.130c	48		pha				pha
.130d	98		tya				tya
.130e	48		pha				pha
.130f	a0 00		ldy #$00			ldy 	#0							; get length
.1311	b1 04		lda ($04),y			lda 	(temp0),y
.1313	aa		tax				tax 								; into X
.1314	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1316	f0 10		beq $1328			beq 	_PSExit
.1318	ca		dex				dex
.1319	8a		txa				txa
.131a	48		pha				pha
.131b	c8		iny				iny
.131c	b1 04		lda ($04),y			lda 	(temp0),y
.131e	a2 06		ldx #$06		ldx	#6
.1320	20 dc 21	jsr $21dc		jsr	deviceHandler
.1323	68		pla				pla
.1324	aa		tax				tax
.1325	4c 14 13	jmp $1314			jmp 	_PSLoop
.1328					_PSExit:
.1328	68		pla				pla
.1329	a8		tay				tay
.132a	68		pla				pla
.132b	aa		tax				tax
.132c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.132d					CallProc:
.132d	20 1d 15	jsr $151d			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1330	48		pha				pha 								; save length on stack
.1331	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.1333	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.1335	48		pha				pha
.1336	a5 04		lda $04				lda 	temp0
.1338	48		pha				pha
.1339	98		tya				tya 								; calculate Y + length
.133a	18		clc				clc
.133b	65 0c		adc $0c				adc 	tempShort
.133d	a8		tay				tay
.133e	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1340					_CallProcEvalParams:
.1340	e8		inx				inx
.1341	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.1343	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1345	f0 0b		beq $1352			beq 	_CPDoneParams
.1347	20 75 1a	jsr $1a75			jsr 	Evaluate 					; evaluate a parameter
.134a	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.134c	c8		iny				iny
.134d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.134f	f0 ef		beq $1340			beq 	_CallProcEvalParams
.1351	88		dey				dey 								; undo consumption.
.1352					_CPDoneParams:
.1352	20 22 21	jsr $2122			jsr 	CheckRightParen 			; check closing parenthesis.
.1355	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1358	a2 04		ldx #$04			ldx 	#4							; make space on stack
.135a	a9 50		lda #$50			lda 	#markerPROC
.135c	20 4a 21	jsr $214a			jsr 	RSClaim
.135f	a9 01		lda #$01			lda 	#1 							; store return address.
.1361	20 76 21	jsr $2176			jsr 	RSSavePosition
.1364	68		pla				pla 								; get the new code Ptr
.1365	85 02		sta $02				sta 	codePtr
.1367	68		pla				pla
.1368	85 03		sta $03				sta 	codePtr+1
.136a	68		pla				pla 								; length of name + 4 is the param start.
.136b	18		clc				clc
.136c	69 04		adc #$04			adc 	#4
.136e	a8		tay				tay
.136f	a2 ff		ldx #$ff			ldx 	#$FF
.1371					_CPLoadParameters:
.1371	e8		inx				inx 								; point to where the address should be loaded.
.1372	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.1375	f0 1e		beq $1395			beq 	_CPParamError
.1377	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1379	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.137b	f0 0e		beq $138b			beq 	_CPParamComplete 			; done all the parameters
.137d	20 63 11	jsr $1163			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1380	20 da 10	jsr $10da			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1383	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1385	c8		iny				iny
.1386	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1388	f0 e7		beq $1371			beq 	_CPLoadParameters
.138a	88		dey				dey 								; no, unconsume and check for )
.138b					_CPParamComplete:
.138b	20 22 21	jsr $2122			jsr 	CheckRightParen 			; check )
.138e	e8		inx				inx 								; check right number of parameters
.138f	ec f2 0a	cpx $0af2			cpx 	paramCount
.1392	d0 01		bne $1395			bne 	_CPParamError
.1394	60		rts				rts
.1395					_CPParamError:
.1395	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1397	20 eb 21	jsr $21eb		jsr	errorHandler
.139a					ReturnProc:
.139a	20 d5 11	jsr $11d5			jsr 	RestoreLocals 				; get the locals back.
.139d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.139f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.13a1	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.13a3	f0 05		beq $13aa			beq 	_isok
.13a5	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.13a7	20 eb 21	jsr $21eb		jsr	errorHandler
.13aa					_isok:
.13aa	a9 01		lda #$01			lda 	#1
.13ac	20 89 21	jsr $2189			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13af	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13b1	20 6c 21	jsr $216c			jsr 	RSFree
.13b4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0af3					dataPtr:
>0af3							.fill 	2
.0af5					dataIndex:
>0af5							.fill 	1
.13b5					CommandData:
.13b5	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.13b7	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.13b9	20 bb 2b	jsr $2bbb			jsr 	ScanForward
.13bc	60		rts				rts
.13bd					CommandRestore:
.13bd	ad c8 0a	lda $0ac8			lda 	basePage
.13c0	8d f3 0a	sta $0af3			sta 	dataPtr
.13c3	ad c9 0a	lda $0ac9			lda 	basePage+1
.13c6	8d f4 0a	sta $0af4			sta 	dataPtr+1
.13c9	a9 03		lda #$03			lda 	#3
.13cb	8d f5 0a	sta $0af5			sta 	dataIndex
.13ce	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.13cf					Command_Rem:
.13cf					Command_Rem2:
.13cf	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.13d1	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.13d3	d0 06		bne $13db			bne 	_CRNotString
.13d5	c8		iny				iny
.13d6	98		tya				tya
.13d7	38		sec				sec
.13d8	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.13da	a8		tay				tay
.13db					_CRNotString:
.13db	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2b52					Command_Repeat:
.2b52	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2b54	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2b56	20 4a 21	jsr $214a			jsr 	RSClaim
.2b59	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2b5b	20 76 21	jsr $2176			jsr 	RSSavePosition
.2b5e	60		rts				rts
.2b5f					Command_Until:
.2b5f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b61	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2b63	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2b65	f0 05		beq $2b6c			beq 	_isok
.2b67	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2b69	20 eb 21	jsr $21eb		jsr	errorHandler
.2b6c					_isok:
.2b6c	20 92 1a	jsr $1a92			jsr 	EvaluateRootInteger 		; at the bottom.
.2b6f	20 d6 20	jsr $20d6			jsr 	MInt32Zero					; check if TOS zero
.2b72	d0 06		bne $2b7a			bne 	_CUExit
.2b74	a9 01		lda #$01			lda 	#1
.2b76	20 89 21	jsr $2189			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2b79	60		rts				rts
.2b7a					_CUExit:
.2b7a	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2b7c	20 6c 21	jsr $216c			jsr 	RSFree
.2b7f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.13dc					Command_Run:
.13dc	a2 ff		ldx #$ff			ldx 	#$FF
.13de	9a		txs				txs
.13df	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything.
.13e2	20 36 14	jsr $1436			jsr 	ResetCodeAddress 			; back to the start.
.13e5	a0 03		ldy #$03			ldy 	#3
.13e7					CRNextInstruction:
.13e7	64 7b		stz $7b				stz 	softMemAlloc+1
.13e9	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.13eb	10 1c		bpl $1409			bpl 	_CRNotToken
.13ed	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.13ef	b0 0c		bcs $13fd			bcs 	_CRExecute
.13f1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.13f3	b0 4e		bcs $1443			bcs 	Unimplemented
.13f5	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.13f7	b0 04		bcs $13fd			bcs 	_CRExecute
.13f9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.13fb	b0 16		bcs $1413			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.13fd					_CRExecute:
.13fd	c8		iny				iny 								; consume it.
.13fe	0a		asl a				asl 	a 							; double it, losing most significant bit.
.13ff	aa		tax				tax
.1400	20 06 14	jsr $1406			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1403	4c e7 13	jmp $13e7			jmp 	CRNextInstruction
.1406					_CRRunRoutine:
.1406	7c 4d 14	jmp ($144d,x)			jmp 	(Group0Vectors,x)
.1409					_CRNotToken:
.1409	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.140b	b0 36		bcs $1443			bcs 	Unimplemented
.140d					_CRDefaultLet:
.140d	20 c7 10	jsr $10c7			jsr 	CommandLet 					; do the default, LET
.1410	4c e7 13	jmp $13e7			jmp 	CRNextInstruction
.1413					_CRCheckIndirect:
.1413	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1415	f0 f6		beq $140d			beq 	_CRDefaultLet
.1417	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1419	f0 f2		beq $140d			beq 	_CRDefaultLet
.141b	d0 26		bne $1443			bne 	Unimplemented
.141d					CommandShift1:
.141d	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.141f	10 22		bpl $1443			bpl 	Unimplemented 				; we have an error as this should not happen.
.1421	0a		asl a				asl 	a 							; double into X
.1422	aa		tax				tax
.1423	c8		iny				iny 								; advance over it.
.1424	20 2a 14	jsr $142a			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1427	4c e7 13	jmp $13e7			jmp 	CRNextInstruction
.142a					_RunIt:
.142a	7c fd 14	jmp ($14fd,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.142d					CommandShift2:
.142d	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.142f	20 45 24	jsr $2445		jsr	extensionHandler
.1432	4c e7 13	jmp $13e7			jmp 	CRNextInstruction
.1435					CommandColon:
.1435	60		rts				rts
.1436					ResetCodeAddress:
.1436	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1439	85 02		sta $02				sta 	codePtr
.143b	ad c9 0a	lda $0ac9			lda 	basePage+1
.143e	85 03		sta $03				sta 	codePtr+1
.1440	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1442	60		rts				rts
.1443					Unimplemented:
.1443	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1445	20 eb 21	jsr $21eb		jsr	errorHandler
.1448					TKErr01:
.1448					TKErr02:
.1448					TKErr03:
.1448					TKErr04:
.1448					TKErr05:
.1448					TKErr06:
.1448					TKErr07:
.1448					TKErr08:
.1448					TKErr09:
.1448					TKErr10:
.1448	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.144a	20 eb 21	jsr $21eb		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.144d					Group0Vectors:
>144d	fd 15					.word	AdvanceNextLine          ; $80 [[eol]]
>144f	1d 14					.word	CommandShift1            ; $81 [[sh1]]
>1451	2d 14					.word	CommandShift2            ; $82 [[sh2]]
>1453	48 14					.word	TKErr09                  ; $83 [[sh3]]
>1455	48 14					.word	TKErr10                  ; $84 [[fpc]]
>1457	48 14					.word	TKErr08                  ; $85 [[str]]
>1459	50 17					.word	AndHandler               ; $86 and
>145b	3d 17					.word	OrHandler                ; $87 or
>145d	2a 17					.word	XorHandler               ; $88 xor
>145f	72 18					.word	CompareGreaterEq         ; $89 >=
>1461	7c 18					.word	CompareLessEq            ; $8a <=
>1463	5e 18					.word	CompareGreater           ; $8b >
>1465	54 18					.word	CompareLess              ; $8c <
>1467	4a 18					.word	CompareEquals            ; $8d =
>1469	68 18					.word	CompareNotEquals         ; $8e <>
>146b	bb 16					.word	AddHandler               ; $8f +
>146d	de 16					.word	SubHandler               ; $90 -
>146f	76 17					.word	ShrHandler               ; $91 >>
>1471	63 17					.word	ShlHandler               ; $92 <<
>1473	f1 16					.word	MulHandler               ; $93 *
>1475	04 17					.word	DivHandler               ; $94 /
>1477	17 17					.word	ModHandler               ; $95 mod
>1479	af 17					.word	PowerHandler             ; $96 ^
>147b	89 17					.word	WordRefHandler           ; $97 !
>147d	9c 17					.word	ByteRefHandler           ; $98 ?
>147f	52 2b					.word	Command_Repeat           ; $99 repeat
>1481	80 2b					.word	Command_While            ; $9a while
>1483	43 2a					.word	Command_FOR              ; $9b for
>1485	8b 10					.word	CommandIf                ; $9c if
>1487	48 14					.word	TKErr04                  ; $9d defproc
>1489	5f 2b					.word	Command_Until            ; $9e until
>148b	a3 2b					.word	Command_Wend             ; $9f wend
>148d	a4 2a					.word	Command_NEXT             ; $a0 next
>148f	48 14					.word	TKErr06                  ; $a1 then
>1491	c6 10					.word	Command_ENDIF            ; $a2 endif
>1493	9a 13					.word	ReturnProc               ; $a3 endproc
>1495	4b 1a					.word	UnaryParenthesis         ; $a4 (
>1497	a3 1b					.word	UnaryLen                 ; $a5 len(
>1499	e7 1b					.word	UnarySgn                 ; $a6 sgn(
>149b	d0 1b					.word	UnaryAbs                 ; $a7 abs(
>149d	40 1c					.word	Unary_Random             ; $a8 random(
>149f	8a 1c					.word	Unary_Page               ; $a9 page
>14a1	ab 20					.word	MInt32True               ; $aa true
>14a3	af 20					.word	MInt32False              ; $ab false
>14a5	55 1c					.word	Unary_Min                ; $ac min(
>14a7	59 1c					.word	Unary_Max                ; $ad max(
>14a9	40 1d					.word	UnarySys                 ; $ae sys(
>14ab	03 1d					.word	UnaryTimer               ; $af timer(
>14ad	20 1b					.word	EventFunction            ; $b0 event(
>14af	2c 1d					.word	UnaryGet                 ; $b1 get(
>14b1	1c 1d					.word	UnaryInkey               ; $b2 inkey(
>14b3	d7 1c					.word	UnaryAlloc               ; $b3 alloc(
>14b5	68 1d					.word	ExecChr                  ; $b4 chr$(
>14b7	98 1d					.word	ExecLeft                 ; $b5 left$(
>14b9	b5 1d					.word	ExecMid                  ; $b6 mid$(
>14bb	dd 1d					.word	ExecRight                ; $b7 right$(
>14bd	8c 18					.word	Event_Str                ; $b8 str$(
>14bf	bb 18					.word	UnaryVal                 ; $b9 val(
>14c1	fe 1b					.word	UnaryPeek                ; $ba peek(
>14c3	04 1c					.word	UnaryDeek                ; $bb deek(
>14c5	0a 1c					.word	UnaryLeek                ; $bc leek(
>14c7	c1 1b					.word	UnaryAsc                 ; $bd asc(
>14c9	b5 1c					.word	UnaryIntToFloat          ; $be int(
>14cb	c8 1c					.word	UnaryFloatToInt          ; $bf float(
>14cd	be 18					.word	UnaryIsVal               ; $c0 isval(
>14cf	7f 1d					.word	ExecUpper                ; $c1 upper$(
>14d1	7c 1d					.word	ExecLower                ; $c2 lower$(
>14d3	98 1c					.word	UnaryReference           ; $c3 @
>14d5	ae 1c					.word	UnaryComplement          ; $c4 ~
>14d7	ab 1c					.word	UnaryHexMarker           ; $c5 &
>14d9	48 14					.word	TKErr01                  ; $c6 )
>14db	35 14					.word	CommandColon             ; $c7 :
>14dd	48 14					.word	TKErr02                  ; $c8 ,
>14df	48 14					.word	TKErr03                  ; $c9 ;
>14e1	cf 13					.word	Command_Rem2             ; $ca '
>14e3	48 14					.word	TKErr07                  ; $cb to
>14e5	48 14					.word	TKErr05                  ; $cc step
>14e7	2d 13					.word	CallProc                 ; $cd proc
>14e9	45 11					.word	CommandLocal             ; $ce local
>14eb	7d 10					.word	Command_Dim              ; $cf dim
>14ed	cf 13					.word	Command_Rem              ; $d0 rem
>14ef	c7 10					.word	CommandLet               ; $d1 let
>14f1	43 14					.word	Unimplemented            ; $d2 input
>14f3	c0 10					.word	Command_ELSE             ; $d3 else
>14f5	6e 16					.word	Command_VDU              ; $d4 vdu
>14f7	92 12					.word	Command_Print            ; $d5 print
>14f9	3c 16					.word	CommandGOTO              ; $d6 goto
>14fb	11 16					.word	CommandGOSUB             ; $d7 gosub
>14fd	24 16					.word	CommandRETURN            ; $d8 return
>14ff	b5 13					.word	CommandData              ; $d9 data
>1501	1f 10					.word	Command_Assert           ; $da assert
>1503	55 12					.word	Command_Poke             ; $db poke
>1505	59 12					.word	Command_Doke             ; $dc doke
>1507	5d 12					.word	Command_Loke             ; $dd loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1509					Group1Vectors:
>1509	2d 10					.word	CommandClear             ; $86 clear
>150b	43 14					.word	Unimplemented            ; $87 load
>150d	43 14					.word	Unimplemented            ; $88 save
>150f	43 14					.word	Unimplemented            ; $89 list
>1511	47 12					.word	Command_New              ; $8a new
>1513	dc 13					.word	Command_Run              ; $8b run
>1515	43 14					.word	Unimplemented            ; $8c read
>1517	bd 13					.word	CommandRestore           ; $8d restore
>1519	fa 15					.word	CommandEnd               ; $8e end
>151b	f5 15					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af6					procList:
>0af6							.fill 	2		 					; terminated by name high.
.0af8					yInLine:
>0af8							.fill 	1
.151d					FindProcedure:
.151d	8c f8 0a	sty $0af8			sty 	yInLine
.1520	20 db 15	jsr $15db			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1523	85 06		sta $06				sta 	temp1
.1525	ad f6 0a	lda $0af6			lda		procList 					; put procList address in temp2
.1528	85 08		sta $08				sta 	temp2
.152a	ad f7 0a	lda $0af7			lda 	procList+1
.152d	85 09		sta $09				sta 	temp2+1
.152f	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1531					_FPLoop:
.1531	b1 08		lda ($08),y			lda 	(temp2),y
.1533	f0 4f		beq $1584			beq 	_FPError 					; if so, we don't know this procedure.
.1535	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1537	c8		iny				iny
.1538	b1 08		lda ($08),y			lda 	(temp2),y
.153a	85 04		sta $04				sta 	temp0
.153c	c8		iny				iny
.153d	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.153f	c5 06		cmp $06				cmp 	temp1
.1541	d0 2b		bne $156e			bne 	_FPNext 					; hash is different, go to next.
.1543	38		sec				sec
.1544	ad f8 0a	lda $0af8			lda 	yInLine 					; position in line must be at least 4
.1547	e9 04		sbc #$04			sbc 	#4
.1549	18		clc				clc
.154a	65 02		adc $02				adc 	codePtr
.154c	85 0a		sta $0a				sta 	temp3
.154e	a5 03		lda $03				lda 	codePtr+1
.1550	69 00		adc #$00			adc 	#0
.1552	85 0b		sta $0b				sta 	temp3+1
.1554	98		tya				tya
.1555	48		pha				pha
.1556	a0 04		ldy #$04			ldy 	#4
.1558					_FPCName:
.1558	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.155a	d1 04		cmp ($04),y			cmp 	(temp0),y
.155c	d0 0e		bne $156c			bne 	_FPpulYNext 				; if different go to next one.
.155e	c8		iny				iny
.155f	c9 3a		cmp #$3a			cmp 	#$3A
.1561	90 f5		bcc $1558			bcc 	_FPCName 					; compare the whole lot....
.1563	68		pla				pla 								; throw away the saved Y
.1564	98		tya				tya 								; length of name is Y-4
.1565	38		sec				sec
.1566	e9 04		sbc #$04			sbc 	#4
.1568	ac f8 0a	ldy $0af8			ldy 	yInLine  					; get the original Y back
.156b	60		rts				rts
.156c					_FPpulYNext:
.156c	68		pla				pla
.156d	a8		tay				tay
.156e					_FPNext:
.156e	c8		iny				iny 								; next procedure record.
.156f	10 c0		bpl $1531			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1571	98		tya				tya 								; subtract 128 from Y
.1572	38		sec				sec
.1573	e9 80		sbc #$80			sbc 	#128
.1575	a8		tay				tay
.1576	18		clc				clc 								; add 128 to temp2, so we can have more than
.1577	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.1579	69 80		adc #$80			adc 	#128
.157b	85 08		sta $08				sta 	temp2
.157d	90 b2		bcc $1531			bcc 	_FPLoop
.157f	e6 09		inc $09				inc 	temp2+1
.1581	4c 31 15	jmp $1531			jmp 	_FPLoop
.1584					_FPError:
.1584	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1586	20 eb 21	jsr $21eb		jsr	errorHandler
.1589					ScanProc:
.1589	98		tya				tya
.158a	48		pha				pha
.158b	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.158d	8d f6 0a	sta $0af6			sta 	procList
.1590	a5 10		lda $10				lda 	lowMemory+1
.1592	8d f7 0a	sta $0af7			sta 	procList+1
.1595	20 36 14	jsr $1436			jsr 	ResetCodeAddress 			; back to the start.
.1598					_ScanLoop:
.1598	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.159a	b1 02		lda ($02),y			lda 	(codePtr),y
.159c	f0 2a		beq $15c8			beq 	_ScanExit
.159e	a0 03		ldy #$03			ldy 	#3							; get first token
.15a0	b1 02		lda ($02),y			lda 	(codePtr),y
.15a2	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.15a4	d0 12		bne $15b8			bne 	_ScanNext
.15a6	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.15a8	20 d0 15	jsr $15d0			jsr 	_ScanWrite
.15ab	a5 02		lda $02				lda 	codePtr
.15ad	20 d0 15	jsr $15d0			jsr 	_ScanWrite
.15b0	a0 04		ldy #$04			ldy 	#4 							; start of name part
.15b2	20 db 15	jsr $15db			jsr 	CalculateProcedureHash 		; calculate procedure hash
.15b5	20 d0 15	jsr $15d0			jsr 	_ScanWrite
.15b8					_ScanNext:
.15b8	18		clc				clc
.15b9	a0 00		ldy #$00			ldy 	#0
.15bb	b1 02		lda ($02),y			lda 	(codePtr),y
.15bd	65 02		adc $02				adc 	codePtr
.15bf	85 02		sta $02				sta 	codePtr
.15c1	90 d5		bcc $1598			bcc 	_ScanLoop
.15c3	e6 03		inc $03				inc 	codePtr+1
.15c5	4c 98 15	jmp $1598			jmp 	_ScanLoop
.15c8					_ScanExit:
.15c8	a9 00		lda #$00			lda 	#0 							; write ending zero.
.15ca	20 d0 15	jsr $15d0			jsr 	_ScanWrite
.15cd	68		pla				pla
.15ce	a8		tay				tay
.15cf	60		rts				rts
.15d0					_ScanWrite:
.15d0	a0 00		ldy #$00			ldy 	#0
.15d2	91 0f		sta ($0f),y			sta 	(lowMemory),y
.15d4	e6 0f		inc $0f				inc 	lowMemory
.15d6	d0 02		bne $15da			bne 	_SWNoCarry
.15d8	e6 10		inc $10				inc 	lowMemory+1
.15da					_SWNoCarry:
.15da	60		rts				rts
.15db					CalculateProcedureHash:
.15db	a9 00		lda #$00			lda 	#0 							; clear hash.
.15dd	85 04		sta $04				sta 	temp0
.15df					_CPHLoop:
.15df	18		clc				clc 								; add character and rotate and add carry back in
.15e0	b1 02		lda ($02),y			lda 	(codePtr),y
.15e2	65 04		adc $04				adc 	temp0
.15e4	6a		ror a				ror 	a
.15e5	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.15e7	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.15e9	b1 02		lda ($02),y			lda 	(codePtr),y
.15eb	c8		iny				iny 								; advance incase we go round again.
.15ec	c9 3a		cmp #$3a			cmp 	#$3A
.15ee	90 ef		bcc $15df			bcc 	_CPHLoop
.15f0	a5 04		lda $04				lda 	temp0
.15f2	a9 aa		lda #$aa			lda 	#$AA
.15f4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.15f5					CommandStop:
.15f5	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.15f7	20 eb 21	jsr $21eb		jsr	errorHandler
.15fa					CommandEnd:
.15fa	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.15fd					AdvanceNextLine:
.15fd	a0 00		ldy #$00			ldy 	#0 							; get offset
.15ff	b1 02		lda ($02),y			lda 	(codePtr),y
.1601	18		clc				clc 								; add to codePtr
.1602	65 02		adc $02				adc 	codePtr
.1604	85 02		sta $02				sta 	codePtr
.1606	90 02		bcc $160a			bcc 	_ANLNoCarry
.1608	e6 03		inc $03				inc 	codePtr+1
.160a					_ANLNoCarry:
.160a	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.160c	f0 ec		beq $15fa			beq 	CommandEnd 					; execute END
.160e	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1610	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1611					CommandGOSUB:
.1611	20 92 1a	jsr $1a92			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1614	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1616	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1618	20 4a 21	jsr $214a			jsr 	RSClaim
.161b	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.161d	20 76 21	jsr $2176			jsr 	RSSavePosition
.1620	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1622	f0 1b		beq $163f			beq 	GotoTOS 					; and do a GOTO there.
.1624					CommandRETURN:
.1624	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1626	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1628	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.162a	f0 05		beq $1631			beq 	_isok
.162c	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.162e	20 eb 21	jsr $21eb		jsr	errorHandler
.1631					_isok:
.1631	a9 01		lda #$01			lda 	#1
.1633	20 89 21	jsr $2189			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1636	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1638	20 6c 21	jsr $216c			jsr 	RSFree
.163b	60		rts				rts
.163c					CommandGOTO:
.163c	20 92 1a	jsr $1a92			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.163f					GotoTOS:
.163f	20 36 14	jsr $1436			jsr 	ResetCodeAddress 			; simple search.
.1642					_GotoSearch:
.1642	a0 00		ldy #$00			ldy 	#0 							; get offset
.1644	b1 02		lda ($02),y			lda 	(codePtr),y
.1646	f0 21		beq $1669			beq 	_GotoError 					; not found.
.1648	c8		iny				iny									; check LSB match
.1649	b1 02		lda ($02),y			lda 	(codePtr),y
.164b	d5 48		cmp $48,x			cmp 	esInt0,x
.164d	d0 07		bne $1656			bne 	_GotoNext
.164f	c8		iny				iny
.1650	b1 02		lda ($02),y			lda 	(codePtr),y
.1652	d5 50		cmp $50,x			cmp 	esInt1,x
.1654	f0 10		beq $1666			beq 	_GotoFound
.1656					_GotoNext:
.1656	a0 00		ldy #$00			ldy 	#0 							; go next line
.1658	b1 02		lda ($02),y			lda 	(codePtr),y
.165a	18		clc				clc
.165b	65 02		adc $02				adc 	codePtr
.165d	85 02		sta $02				sta 	codePtr
.165f	90 e1		bcc $1642			bcc 	_GotoSearch
.1661	e6 03		inc $03				inc 	codePtr+1
.1663	4c 42 16	jmp $1642			jmp 	_GotoSearch
.1666					_GotoFound:
.1666	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1668	60		rts				rts
.1669					_GotoError:
.1669	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.166b	20 eb 21	jsr $21eb		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.166e					Command_VDU:
.166e	20 92 1a	jsr $1a92			jsr 	EvaluateRootInteger 			; get integer at root.
.1671	a5 48		lda $48				lda 	esInt0
.1673	a2 06		ldx #$06		ldx	#6
.1675	20 dc 21	jsr $21dc		jsr	deviceHandler
.1678					_CVNext:
.1678	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.167a	c8		iny				iny
.167b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.167d	f0 ef		beq $166e			beq 	Command_VDU
.167f	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1681	d0 0a		bne $168d			bne 	_CVExit
.1683	a5 50		lda $50				lda 	esInt1
.1685	a2 06		ldx #$06		ldx	#6
.1687	20 dc 21	jsr $21dc		jsr	deviceHandler
.168a	4c 78 16	jmp $1678			jmp 	_CVNext
.168d	88		dey		_CVExit:dey
.168e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2b80					Command_While:
.2b80	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2b82	a2 04		ldx #$04			ldx 	#4
.2b84	20 4a 21	jsr $214a			jsr 	RSClaim 					; create on stack.
.2b87	88		dey				dey
.2b88	a9 01		lda #$01			lda 	#1
.2b8a	20 76 21	jsr $2176			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2b8d	c8		iny				iny
.2b8e	20 94 1a	jsr $1a94			jsr 	EvaluateInteger				; get the conditional
.2b91	20 d6 20	jsr $20d6			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2b94	f0 01		beq $2b97			beq 	_CWFail
.2b96	60		rts				rts
.2b97					_CWFail:
.2b97	a9 04		lda #$04			lda 	#4
.2b99	20 6c 21	jsr $216c			jsr 	RSFree 						; close the just opened position.
.2b9c	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2b9e	aa		tax				tax
.2b9f	20 bb 2b	jsr $2bbb			jsr 	ScanForward
.2ba2	60		rts				rts
.2ba3					Command_Wend:
.2ba3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2ba5	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2ba7	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2ba9	f0 05		beq $2bb0			beq 	_isok
.2bab	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2bad	20 eb 21	jsr $21eb		jsr	errorHandler
.2bb0					_isok:
.2bb0	a9 01		lda #$01			lda 	#1
.2bb2	20 89 21	jsr $2189			jsr 	RSLoadPosition				; go back until true
.2bb5	a9 04		lda #$04			lda 	#4
.2bb7	20 6c 21	jsr $216c			jsr 	RSFree 						; close the loop
.2bba	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.168f					BinaryProcess:
.168f	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1691	15 41		ora $41,x			ora 	esType+1,x
.1693	0a		asl a				asl 	a
.1694	30 0e		bmi $16a4			bmi 	_BPStringType 				; if one is set, then string type.
.1696	18		clc				clc 								; return CC for integer
.1697	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1699	f0 08		beq $16a3			beq 	_BPExit 					; if both integer then return with CC.
.169b	20 a9 16	jsr $16a9			jsr 	BPMakeBothFloat 			; make both float
.169e	a9 01		lda #$01			lda 	#$01 						; set result type to float
.16a0	95 40		sta $40,x			sta 	esType,x
.16a2	38		sec				sec 								; and return with carry set.
.16a3					_BPExit:
.16a3	60		rts				rts
.16a4					_BPStringType:
.16a4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.16a6	20 eb 21	jsr $21eb		jsr	errorHandler
.16a9					BPMakeBothFloat:
.16a9	e8		inx				inx
.16aa	20 ae 16	jsr $16ae			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.16ad	ca		dex				dex
.16ae					BPMakeFloat:
.16ae	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.16b0	4a		lsr a				lsr 	a
.16b1	b0 07		bcs $16ba			bcs 	_BPIsFloat
.16b3	8a		txa				txa
.16b4	a2 1a		ldx #$1a		ldx	#26
.16b6	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.16b9	aa		tax				tax
.16ba					_BPIsFloat:
.16ba	60		rts				rts
.16bb					AddHandler:
.16bb	20 0a 19	jsr $190a			jsr 	DereferenceTwo 				; dereference top two on stack.
.16be	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.16c0	35 41		and $41,x			and 	esType+1,x
.16c2	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.16c4	d0 10		bne $16d6			bne 	_AHStringConcat				; concatenate strings.
.16c6	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.16c9	b0 03		bcs $16ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16cb	4c 98 1f	jmp $1f98			jmp 	MInt32Add 							; else do it as integer.
.16ce					_IsFPOperation:
.16ce	8a		txa				txa 								; call the relevant fp routine
.16cf	a2 02		ldx #$02		ldx	#2
.16d1	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.16d4	aa		tax				tax
.16d5	60		rts				rts
.16d6					_AHStringConcat:
.16d6	8a		txa				txa
.16d7	a2 04		ldx #$04		ldx	#4
.16d9	20 72 27	jsr $2772		jsr	stringHandler
.16dc	aa		tax				tax
.16dd	60		rts				rts
.16de					SubHandler:
.16de	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.16e1	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.16e4	b0 03		bcs $16e9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16e6	4c b2 1f	jmp $1fb2			jmp 	MInt32Sub 							; else do it as integer.
.16e9					_IsFPOperation:
.16e9	8a		txa				txa 								; call the relevant fp routine
.16ea	a2 10		ldx #$10		ldx	#16
.16ec	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.16ef	aa		tax				tax
.16f0	60		rts				rts
.16f1					MulHandler:
.16f1	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.16f4	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.16f7	b0 03		bcs $16fc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16f9	4c cc 1f	jmp $1fcc			jmp 	MInt32Multiply 							; else do it as integer.
.16fc					_IsFPOperation:
.16fc	8a		txa				txa 								; call the relevant fp routine
.16fd	a2 0a		ldx #$0a		ldx	#10
.16ff	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1702	aa		tax				tax
.1703	60		rts				rts
.1704					DivHandler:
.1704	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.1707	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.170a	b0 03		bcs $170f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.170c	4c 90 1e	jmp $1e90			jmp 	MInt32SDivide 							; else do it as integer.
.170f					_IsFPOperation:
.170f	8a		txa				txa 								; call the relevant fp routine
.1710	a2 06		ldx #$06		ldx	#6
.1712	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1715	aa		tax				tax
.1716	60		rts				rts
.1717					ModHandler:
.1717	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.171a	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.171d	b0 03		bcs $1722			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.171f	4c 0e 1f	jmp $1f0e			jmp 	MInt32Modulus 							; else do it as integer.
.1722					_IsFPOperation:
.1722	8a		txa				txa 								; call the relevant fp routine
.1723	a2 08		ldx #$08		ldx	#8
.1725	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1728	aa		tax				tax
.1729	60		rts				rts
.172a					XorHandler:
.172a	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.172d	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.1730	b0 03		bcs $1735			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1732	4c 42 1e	jmp $1e42			jmp 	MInt32Xor 							; else do it as integer.
.1735					_IsFPOperation:
.1735	8a		txa				txa 								; call the relevant fp routine
.1736	a2 08		ldx #$08		ldx	#8
.1738	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.173b	aa		tax				tax
.173c	60		rts				rts
.173d					OrHandler:
.173d	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.1740	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.1743	b0 03		bcs $1748			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1745	4c 29 1e	jmp $1e29			jmp 	MInt32Or 							; else do it as integer.
.1748					_IsFPOperation:
.1748	8a		txa				txa 								; call the relevant fp routine
.1749	a2 08		ldx #$08		ldx	#8
.174b	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.174e	aa		tax				tax
.174f	60		rts				rts
.1750					AndHandler:
.1750	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.1753	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.1756	b0 03		bcs $175b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1758	4c 10 1e	jmp $1e10			jmp 	MInt32And 							; else do it as integer.
.175b					_IsFPOperation:
.175b	8a		txa				txa 								; call the relevant fp routine
.175c	a2 08		ldx #$08		ldx	#8
.175e	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1761	aa		tax				tax
.1762	60		rts				rts
.1763					ShlHandler:
.1763	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.1766	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.1769	b0 03		bcs $176e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.176b	4c e4 17	jmp $17e4			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.176e					_IsFPOperation:
.176e	8a		txa				txa 								; call the relevant fp routine
.176f	a2 08		ldx #$08		ldx	#8
.1771	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1774	aa		tax				tax
.1775	60		rts				rts
.1776					ShrHandler:
.1776	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.1779	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.177c	b0 03		bcs $1781			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.177e	4c e7 17	jmp $17e7			jmp 	MInt32ShiftRightX 							; else do it as integer.
.1781					_IsFPOperation:
.1781	8a		txa				txa 								; call the relevant fp routine
.1782	a2 08		ldx #$08		ldx	#8
.1784	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1787	aa		tax				tax
.1788	60		rts				rts
.1789					WordRefHandler:
.1789	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.178c	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.178f	b0 03		bcs $1794			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1791	4c d6 17	jmp $17d6			jmp 	MInt32WordIndirect 							; else do it as integer.
.1794					_IsFPOperation:
.1794	8a		txa				txa 								; call the relevant fp routine
.1795	a2 08		ldx #$08		ldx	#8
.1797	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.179a	aa		tax				tax
.179b	60		rts				rts
.179c					ByteRefHandler:
.179c	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.179f	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.17a2	b0 03		bcs $17a7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17a4	4c da 17	jmp $17da			jmp 	MInt32ByteIndirect 							; else do it as integer.
.17a7					_IsFPOperation:
.17a7	8a		txa				txa 								; call the relevant fp routine
.17a8	a2 08		ldx #$08		ldx	#8
.17aa	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.17ad	aa		tax				tax
.17ae	60		rts				rts
.17af					PowerHandler:
.17af	20 0a 19	jsr $190a			jsr 	DereferenceTwo
.17b2	20 8f 16	jsr $168f			jsr 	BinaryProcess 				; check to see if either is float
.17b5	b0 03		bcs $17ba			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.17b7	4c c2 17	jmp $17c2			jmp 	PowerInteger 							; else do it as integer.
.17ba					_IsFPOperation:
.17ba	8a		txa				txa 								; call the relevant fp routine
.17bb	a2 16		ldx #$16		ldx	#22
.17bd	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.17c0	aa		tax				tax
.17c1	60		rts				rts
.17c2					PowerInteger:
.17c2	20 a9 16	jsr $16a9			jsr 	BPMakeBothFloat				; make them float.
.17c5	8a		txa				txa
.17c6	a2 16		ldx #$16		ldx	#22
.17c8	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.17cb	a2 12		ldx #$12		ldx	#18
.17cd	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.17d0	aa		tax				tax
.17d1	a9 00		lda #$00			lda 	#0 							; make type integer
.17d3	95 40		sta $40,x			sta 	esType,x
.17d5	60		rts				rts
.17d6					Mint32WordIndirect:
.17d6	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.17d8	d0 02		bne $17dc			bne 	Min32Indirect
.17da					Mint32ByteIndirect:
.17da	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.17dc					Min32Indirect:
.17dc	48		pha				pha 								; save the indirection
.17dd	20 98 1f	jsr $1f98			jsr 	MInt32Add 					; add a!b a?b
.17e0	68		pla				pla 								; and set the type to reference.
.17e1	95 40		sta $40,x			sta 	esType,x
.17e3	60		rts				rts
.17e4					Mint32ShiftLeftX:
.17e4	18		clc				clc
.17e5	90 01		bcc $17e8			bcc 	Mint32Shift
.17e7					Mint32ShiftRightX:
.17e7	38		sec				sec
.17e8					Mint32Shift:
.17e8	08		php				php 								; save carry flag on stack.
.17e9	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.17eb	15 59		ora $59,x			ora 	esInt2+1,x
.17ed	15 61		ora $61,x			ora 	esInt3+1,x
.17ef	d0 1e		bne $180f			bne 	_MShiftZero
.17f1	b5 49		lda $49,x			lda 	esInt0+1,x
.17f3	c9 20		cmp #$20			cmp 	#32
.17f5	b0 18		bcs $180f			bcs 	_MShiftZero
.17f7					_MShiftLoop:
.17f7	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.17f9	f0 12		beq $180d			beq 	_MShiftExit
.17fb	d6 49		dec $49,x			dec 	esInt0+1,x
.17fd	28		plp				plp 								; restore and save carry
.17fe	08		php				php
.17ff	90 06		bcc $1807			bcc 	_MShiftLeft
.1801	20 cd 20	jsr $20cd			jsr 	Mint32ShiftRight
.1804	4c f7 17	jmp $17f7			jmp 	_MShiftLoop
.1807					_MShiftLeft:
.1807	20 c4 20	jsr $20c4			jsr 	Mint32ShiftLeft
.180a	4c f7 17	jmp $17f7			jmp 	_MShiftLoop
.180d					_MShiftExit:
.180d	28		plp				plp	 								; throw saved carry and exit
.180e	60		rts				rts
.180f					_MShiftZero:
.180f	4c af 20	jmp $20af			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1812					PerformComparison:
.1812	20 0a 19	jsr $190a			jsr 	DereferenceTwo 				; make both values.
.1815	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1817	35 41		and $41,x			and 	esType+1,x
.1819	0a		asl a				asl 	a
.181a	30 1d		bmi $1839			bmi 	_PCIsString
.181c	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.181e	15 41		ora $41,x			ora 	esType+1,x
.1820	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1821	30 22		bmi $1845			bmi 	_PCError
.1823	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1825	f0 0f		beq $1836			beq 	_PCIsInteger 				; if not two integers
.1827	20 a9 16	jsr $16a9			jsr 	BPMakeBothFloat 			; make both float
.182a	8a		txa				txa
.182b	a2 04		ldx #$04		ldx	#4
.182d	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1830	86 0c		stx $0c				stx 	tempShort 					; save result
.1832	aa		tax				tax
.1833	a5 0c		lda $0c				lda 	tempShort
.1835	60		rts				rts
.1836					_PCIsInteger:
.1836	4c 5b 1e	jmp $1e5b			jmp 	MInt32Compare
.1839					_PCIsString:
.1839	8a		txa				txa 								; A has SP
.183a	a2 06		ldx #$06		ldx	#6
.183c	20 72 27	jsr $2772		jsr	stringHandler
.183f	86 0c		stx $0c				stx 	tempShort 					; save result
.1841	aa		tax				tax 								; put SP back in X and get result.
.1842	a5 0c		lda $0c				lda 	tempShort
.1844	60		rts				rts
.1845					_PCError:
.1845	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1847	20 eb 21	jsr $21eb		jsr	errorHandler
.184a					CompareEquals:
.184a	20 12 18	jsr $1812			jsr 	PerformComparison
.184d	c9 00		cmp #$00			cmp 	#$00
.184f	f0 35		beq $1886			beq  	CompareTrue
.1851	4c 89 18	jmp $1889			jmp 	CompareFalse
.1854					CompareLess:
.1854	20 12 18	jsr $1812			jsr 	PerformComparison
.1857	c9 ff		cmp #$ff			cmp 	#$FF
.1859	f0 2b		beq $1886			beq  	CompareTrue
.185b	4c 89 18	jmp $1889			jmp 	CompareFalse
.185e					CompareGreater:
.185e	20 12 18	jsr $1812			jsr 	PerformComparison
.1861	c9 01		cmp #$01			cmp 	#$01
.1863	f0 21		beq $1886			beq  	CompareTrue
.1865	4c 89 18	jmp $1889			jmp 	CompareFalse
.1868					CompareNotEquals:
.1868	20 12 18	jsr $1812			jsr 	PerformComparison
.186b	c9 00		cmp #$00			cmp 	#$00
.186d	d0 17		bne $1886			bne  	CompareTrue
.186f	4c 89 18	jmp $1889			jmp 	CompareFalse
.1872					CompareGreaterEq:
.1872	20 12 18	jsr $1812			jsr 	PerformComparison
.1875	c9 ff		cmp #$ff			cmp 	#$FF
.1877	d0 0d		bne $1886			bne  	CompareTrue
.1879	4c 89 18	jmp $1889			jmp 	CompareFalse
.187c					CompareLessEq:
.187c	20 12 18	jsr $1812			jsr 	PerformComparison
.187f	c9 01		cmp #$01			cmp 	#$01
.1881	d0 03		bne $1886			bne  	CompareTrue
.1883	4c 89 18	jmp $1889			jmp 	CompareFalse
.1886					CompareTrue:
.1886	4c ab 20	jmp $20ab			jmp 	MInt32True
.1889					CompareFalse:
.1889	4c af 20	jmp $20af			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.188c					Event_Str:
.188c	20 7e 1a	jsr $1a7e			jsr 	EvaluateNumeric 			; get a number.
.188f	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.1891	d0 13		bne $18a6			bne 	_ESFloat
.1893	20 e9 18	jsr $18e9			jsr 	ConvertGetBase
.1896	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1898	85 04		sta $04				sta 	temp0
.189a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.189c	85 05		sta $05				sta 	1+(temp0)
.189e	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.18a0	20 05 20	jsr $2005			jsr 	MInt32ToString 				; convert to string.
.18a3	4c b3 18	jmp $18b3			jmp 	_ESCloneExit 				; clone and exit.
.18a6					_ESFloat:
.18a6	20 22 21	jsr $2122			jsr 	CheckRightParen 			; check closing )
.18a9	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.18ac	8a		txa				txa
.18ad	a2 14		ldx #$14		ldx	#20
.18af	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.18b2	aa		tax				tax
.18b3					_ESCloneExit:
.18b3	8a		txa				txa
.18b4	a2 02		ldx #$02		ldx	#2
.18b6	20 72 27	jsr $2772		jsr	stringHandler
.18b9	aa		tax				tax
.18ba	60		rts				rts
.18bb					UnaryVal:
.18bb	38		sec				sec
.18bc	b0 01		bcs $18bf			bcs 	ValueMain
.18be					UnaryIsVal:
.18be	18		clc				clc
.18bf					ValueMain:
.18bf	08		php				php 								; save results (CS is value, CC is validation)
.18c0	20 89 1a	jsr $1a89			jsr 	EvaluateString
.18c3	20 e9 18	jsr $18e9			jsr 	ConvertGetBase 				; get base, if any.
.18c6	98		tya				tya
.18c7	48		pha				pha
.18c8	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.18cb	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.18cd	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.18cf	20 22 1f	jsr $1f22			jsr 	MInt32FromString 			; convert it back from a string.
.18d2	b0 0c		bcs $18e0			bcs 	_VMSuccess 					; successfully converted.
.18d4	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.18d6	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.18d8	f0 00		beq $18da			beq 	_VMFailed 	 				; so we failed.
.18da					_VMFailed:
.18da	68		pla				pla
.18db	a8		tay				tay
.18dc	28		plp				plp
.18dd	4c af 20	jmp $20af			jmp 	MInt32False 				; return 0 whatever.
.18e0					_VMSuccess:
.18e0	68		pla				pla
.18e1	a8		tay				tay
.18e2	28		plp				plp 								; if CS the it was val() so we want the value.
.18e3	b0 03		bcs $18e8			bcs 	_VMExit
.18e5	4c ab 20	jmp $20ab			jmp 	MInt32True 					; otherwise return true as successful.
.18e8					_VMExit:
.18e8	60		rts				rts
.18e9					ConvertGetBase:
.18e9	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.18eb	95 49		sta $49,x			sta 	esInt0+1,x
.18ed	b1 02		lda ($02),y			lda 	(codePtr),y
.18ef	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.18f1	d0 0e		bne $1901			bne 	_CGBDone
.18f3	e8		inx				inx 								; next level
.18f4	c8		iny				iny 								; skip comma.
.18f5	20 9c 1a	jsr $1a9c			jsr 	EvaluateSmallInteger		; evaluate the base.
.18f8	ca		dex				dex
.18f9	c9 02		cmp #$02			cmp 	#2
.18fb	90 08		bcc $1905			bcc 	_CGBValue
.18fd	c9 11		cmp #$11			cmp 	#17
.18ff	b0 04		bcs $1905			bcs 	_CGBValue
.1901					_CGBDone:
.1901	20 22 21	jsr $2122			jsr 	CheckRightParen
.1904	60		rts				rts
.1905					_CGBValue:
.1905	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1907	20 eb 21	jsr $21eb		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.190a					DereferenceTwo:
.190a	e8		inx				inx
.190b	20 0f 19	jsr $190f			jsr 	DereferenceOne
.190e	ca		dex				dex
.190f					DereferenceOne:
.190f	b5 40		lda $40,x			lda 	esType,x
.1911	10 3d		bpl $1950			bpl 	_DRNotReference 			; is it a reference ?
.1913	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1914	b0 3b		bcs $1951			bcs 	_DRFloatDeReference
.1916	98		tya				tya
.1917	48		pha				pha
.1918	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.191a	85 04		sta $04				sta 	temp0
.191c	b5 50		lda $50,x			lda 	esInt1,x
.191e	85 05		sta $05				sta 	temp0+1
.1920	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1922	95 50		sta $50,x			sta 	esInt1,x
.1924	95 58		sta $58,x			sta 	esInt2,x
.1926	95 60		sta $60,x			sta 	esInt3,x
.1928	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.192a	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.192c	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.192d	30 0d		bmi $193c			bmi 	_DeRefString 				; string, 2 bytes only
.192f	d0 11		bne $1942			bne 	_DeRefByte 					; byte 1 byte only
.1931					_DeRefLong:
.1931	a0 03		ldy #$03			ldy 	#3
.1933	b1 04		lda ($04),y			lda 	(temp0),y
.1935	95 60		sta $60,x			sta 	esInt3,x
.1937	88		dey				dey
.1938	b1 04		lda ($04),y			lda 	(temp0),y
.193a	95 58		sta $58,x			sta 	esInt2,x
.193c					_DeRefString:
.193c	a0 01		ldy #$01			ldy 	#1
.193e	b1 04		lda ($04),y			lda 	(temp0),y
.1940	95 50		sta $50,x			sta 	esInt1,x
.1942					_DeRefByte:
.1942	a0 00		ldy #$00			ldy 	#0
.1944	b1 04		lda ($04),y			lda 	(temp0),y
.1946	95 48		sta $48,x			sta 	esInt0,x
.1948	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.194a	29 40		and #$40			and 	#$40
.194c	95 40		sta $40,x			sta 	esType,x
.194e	68		pla				pla
.194f	a8		tay				tay
.1950					_DRNotReference
.1950	60		rts				rts
.1951					_DRFloatDereference:
.1951	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; address to deref in temp0
.1954	8a		txa				txa
.1955	a2 1c		ldx #$1c		ldx	#28
.1957	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.195a	aa		tax				tax
.195b	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.195d	95 40		sta $40,x			sta 	esType,x
.195f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1960					EvaluateLevel:
.1960	48		pha				pha 								; save precedence level.
.1961	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1963	95 48		sta $48,x			sta 	esInt0,x
.1965	95 50		sta $50,x			sta 	esInt1,x
.1967	95 58		sta $58,x			sta 	esInt2,x
.1969	95 60		sta $60,x			sta 	esInt3,x
.196b	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.196d	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.196f	30 21		bmi $1992			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1971	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1972	30 0a		bmi $197e			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1974	8a		txa				txa 								; stack level in X
.1975	a2 00		ldx #$00		ldx	#0
.1977	20 3a 2a	jsr $2a3a		jsr	variableHandler
.197a	aa		tax				tax
.197b	4c bb 19	jmp $19bb			jmp		_ELHasTerm
.197e					_ELIsConstant:
.197e	4a		lsr a				lsr 	a 							; get the value back
.197f	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1981	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1983					_ELCheckNext:
.1983	c8		iny				iny 								; look at next
.1984	b1 02		lda ($02),y			lda 	(codePtr),y
.1986	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1988	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.198a	b0 2f		bcs $19bb			bcs 	_ELHasTerm 					; done getting the constant.
.198c	20 d4 1a	jsr $1ad4			jsr 	ELShiftByteIn 				; shift byte into position.
.198f	4c 83 19	jmp $1983			jmp 	_ELCheckNext
.1992					_ELIsToken:
.1992	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1994	f0 0f		beq $19a5			beq 	_ELIsString
.1996	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1998	d0 5f		bne $19f9			bne 	_ELCheckUnary
.199a	8a		txa				txa 								; put X into A
.199b	c8		iny				iny 								; skip over the float marker
.199c	a2 18		ldx #$18		ldx	#24
.199e	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.19a1	aa		tax				tax 								; restore X
.19a2	4c bb 19	jmp $19bb			jmp 	_ELHasTerm
.19a5					_ELIsString:
.19a5	98		tya				tya 								; address of string is codePtr+y+1
.19a6	38		sec				sec
.19a7	65 02		adc $02				adc 	codePtr
.19a9	95 48		sta $48,x			sta 	esInt0,x
.19ab	a5 03		lda $03				lda 	codePtr+1
.19ad	69 00		adc #$00			adc 	#0
.19af	95 50		sta $50,x			sta 	esInt1,x
.19b1	a9 40		lda #$40			lda 	#$40 						; set type to string value
.19b3	95 40		sta $40,x			sta 	esType,x
.19b5	c8		iny				iny 								; skip over string.
.19b6	98		tya				tya
.19b7	38		sec				sec									; +1 for the length itself.
.19b8	71 02		adc ($02),y			adc 	(codePtr),y
.19ba	a8		tay				tay 								; and fall through to term loop code.
.19bb					_ELHasTerm:
.19bb	b1 02		lda ($02),y			lda 	(codePtr),y
.19bd	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.19bf	90 04		bcc $19c5			bcc 	_ELPopExit
.19c1	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.19c3	90 02		bcc $19c7			bcc 	_ELHasBinaryTerm
.19c5					_ELPopExit:
.19c5	68		pla				pla
.19c6					_ELExit:
.19c6	60		rts				rts
.19c7					_ELHasBinaryTerm:
.19c7	84 0c		sty $0c				sty 	tempShort 					; save position
.19c9	a8		tay				tay 								; use token as an index and get the precedence.
.19ca	b9 7c 1a	lda $1a7c,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.19cd	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.19cf	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.19d1	68		pla				pla 								; restore current level.
.19d2	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.19d4	b0 f0		bcs $19c6			bcs 	_ELExit
.19d6	48		pha				pha 								; save current level back on the stack.
.19d7	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.19d9	48		pha				pha
.19da	c8		iny				iny
.19db	e8		inx				inx 								; calculate the RHS at the operator precedence.
.19dc	a5 0c		lda $0c				lda 	tempShort
.19de	20 60 19	jsr $1960			jsr 	EvaluateLevel
.19e1	ca		dex				dex
.19e2	68		pla				pla 								; get the operator back out.
.19e3					_ELExecuteA:
.19e3	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.19e5	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.19e6	aa		tax				tax
.19e7	bd 4d 14	lda $144d,x			lda 	Group0Vectors,x
.19ea	85 04		sta $04				sta 	temp0
.19ec	bd 4e 14	lda $144e,x			lda 	Group0Vectors+1,x
.19ef	85 05		sta $05				sta 	temp0+1
.19f1	a6 0c		ldx $0c				ldx 	tempShort
.19f3	20 40 1a	jsr $1a40			jsr 	_ELCallTemp0
.19f6	4c bb 19	jmp $19bb			jmp 	_ELHasTerm 					; and loop back round.
.19f9					_ELCheckUnary:
.19f9	c8		iny				iny 								; skip over token.
.19fa	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.19fc	f0 19		beq $1a17			beq 	_ELMinus
.19fe	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1a00	f0 2c		beq $1a2e			beq 	_ELIndirect
.1a02	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1a04	f0 28		beq $1a2e			beq 	_ELIndirect
.1a06	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1a08	f0 39		beq $1a43			beq 	_ELExtension
.1a0a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1a0c	90 04		bcc $1a12			bcc 	_ELUSyntax
.1a0e	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1a10	90 d1		bcc $19e3			bcc 	_ELExecuteA 				; if so do that token.
.1a12					_ELUSyntax:
.1a12	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1a14	20 eb 21	jsr $21eb		jsr	errorHandler
.1a17					_ELMinus:
.1a17	20 5d 1a	jsr $1a5d			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1a1a	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1a1c	f0 0a		beq $1a28			beq 	_ELMinusInteger
.1a1e	8a		txa				txa
.1a1f	a2 0c		ldx #$0c		ldx	#12
.1a21	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1a24	aa		tax				tax
.1a25	4c bb 19	jmp $19bb			jmp 	_ELHasTerm
.1a28					_ELMinusInteger:
.1a28	20 69 20	jsr $2069			jsr 	MInt32Negate 				; do int negate
.1a2b	4c bb 19	jmp $19bb			jmp 	_ELHasTerm
.1a2e					_ELIndirect:
.1a2e	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1a2f	20 66 1a	jsr $1a66			jsr 	EvaluateIntegerTerm 		; integer address
.1a32	68		pla				pla
.1a33	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1a35	f0 02		beq $1a39			beq 	_ELHaveModifier
.1a37	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1a39					_ELHaveModifier:
.1a39	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1a3b	95 40		sta $40,x			sta 	esType,x
.1a3d	4c bb 19	jmp $19bb			jmp 	_ELHasTerm
.1a40					_ELCallTemp0:
.1a40	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1a43					_ELExtension:
.1a43	8a		txa				txa 								; stack pos in A
.1a44	20 45 24	jsr $2445		jsr	extensionHandler
.1a47	aa		tax				tax 								; restore stack
.1a48	4c bb 19	jmp $19bb			jmp 	_ELHasTerm
.1a4b					UnaryParenthesis:
.1a4b	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1a4d	20 60 19	jsr $1960			jsr 	EvaluateLevel
.1a50	20 22 21	jsr $2122			jsr 	CheckRightParen 			; check for )
.1a53	60		rts				rts
.1a54					EvaluateTerm:
.1a54	a9 0f		lda #$0f			lda 	#15
.1a56	20 60 19	jsr $1960			jsr 	EvaluateLevel
.1a59	20 0f 19	jsr $190f			jsr 	DereferenceOne
.1a5c	60		rts				rts
.1a5d					EvaluateNumericTerm:
.1a5d	20 54 1a	jsr $1a54			jsr 	EvaluateTerm
.1a60	b5 40		lda $40,x			lda 	esType,x
.1a62	0a		asl a				asl 	a 							; see if it's a string.
.1a63	30 09		bmi $1a6e			bmi 	ENTType
.1a65	60		rts				rts
.1a66					EvaluateIntegerTerm:
.1a66	20 54 1a	jsr $1a54			jsr 	EvaluateTerm
.1a69	b5 40		lda $40,x			lda 	esType,x
.1a6b	d0 01		bne $1a6e			bne 	ENTType
.1a6d	60		rts				rts
.1a6e					ENTType:
.1a6e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a70	20 eb 21	jsr $21eb		jsr	errorHandler
.1a73					EvaluateRoot:
.1a73	a2 00		ldx #$00			ldx 	#0
.1a75					Evaluate:
.1a75	a9 00		lda #$00			lda 	#0
.1a77	20 60 19	jsr $1960			jsr 	EvaluateLevel
.1a7a	20 0f 19	jsr $190f			jsr 	DereferenceOne
.1a7d	60		rts				rts
.1a7e					EvaluateNumeric:
.1a7e	20 75 1a	jsr $1a75			jsr 	Evaluate
.1a81	b5 40		lda $40,x			lda 	esType,x
.1a83	0a		asl a				asl 	a 							; see if it's a string.
.1a84	30 e8		bmi $1a6e			bmi 	ENTType
.1a86	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1a87	4a		lsr a				lsr 	a
.1a88	60		rts				rts
.1a89					EvaluateString:
.1a89	20 75 1a	jsr $1a75			jsr 	Evaluate
.1a8c	b5 40		lda $40,x			lda 	esType,x
.1a8e	0a		asl a				asl 	a 							; see if it's a string.
.1a8f	10 dd		bpl $1a6e			bpl 	ENTType
.1a91	60		rts				rts
.1a92					EvaluateRootInteger:
.1a92	a2 00		ldx #$00			ldx 	#0
.1a94					EvaluateInteger:
.1a94	20 75 1a	jsr $1a75			jsr 	Evaluate
.1a97	b5 40		lda $40,x			lda 	esType,x
.1a99	d0 d3		bne $1a6e			bne 	ENTType
.1a9b	60		rts				rts
.1a9c					EvaluateSmallInteger:
.1a9c	20 94 1a	jsr $1a94			jsr 	EvaluateInteger
.1a9f	b5 50		lda $50,x			lda 	esInt1,x
.1aa1	15 58		ora $58,x			ora 	esInt2,x
.1aa3	15 60		ora $60,x			ora 	esInt3,x
.1aa5	d0 03		bne $1aaa			bne 	_ESIValue
.1aa7	b5 48		lda $48,x			lda 	esInt0,x
.1aa9	60		rts				rts
.1aaa					_ESIValue:
.1aaa	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1aac	20 eb 21	jsr $21eb		jsr	errorHandler
.1aaf					LinkEvaluate:
.1aaf	aa		tax				tax
.1ab0	20 75 1a	jsr $1a75			jsr 	Evaluate
.1ab3	8a		txa				txa
.1ab4	60		rts				rts
.1ab5					LinkEvaluateInteger:
.1ab5	aa		tax				tax
.1ab6	20 94 1a	jsr $1a94			jsr 	EvaluateInteger
.1ab9	8a		txa				txa
.1aba	60		rts				rts
.1abb					LinkEvaluateSmallInt:
.1abb	aa		tax				tax
.1abc	20 9c 1a	jsr $1a9c			jsr 	EvaluateSmallInteger
.1abf	8a		txa				txa
.1ac0	60		rts				rts
.1ac1					EvaluateReference:
.1ac1	ad 13 1b	lda $1b13			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1ac4	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1ac5	e9 01		sbc #$01			sbc 	#1
.1ac7	20 60 19	jsr $1960			jsr 	EvaluateLevel
.1aca	b5 40		lda $40,x			lda 	esType,x
.1acc	10 01		bpl $1acf			bpl 	_ERFail
.1ace	60		rts				rts
.1acf					_ERFail:
.1acf	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1ad1	20 eb 21	jsr $21eb		jsr	errorHandler
.1ad4					ELShiftByteIn:
.1ad4	48		pha				pha 								; save bits to shift in.
.1ad5	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1ad7	48		pha				pha
.1ad8	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1ada	95 60		sta $60,x			sta 	esInt3,x
.1adc	b5 50		lda $50,x			lda 	esInt1,x
.1ade	95 58		sta $58,x			sta 	esInt2,x
.1ae0	b5 48		lda $48,x			lda 	esInt0,x
.1ae2	95 50		sta $50,x			sta 	esInt1,x
.1ae4	a9 00		lda #$00			lda 	#0
.1ae6	95 48		sta $48,x			sta 	esInt0,x
.1ae8	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1ae9	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1aeb	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1aed					_ELShiftLoop:
.1aed	4a		lsr a				lsr 	a
.1aee	76 60		ror $60,x			ror 	esInt3,x
.1af0	76 58		ror $58,x			ror 	esInt2,x
.1af2	76 50		ror $50,x			ror 	esInt1,x
.1af4	76 48		ror $48,x			ror 	esInt0,x
.1af6	c9 01		cmp #$01			cmp 	#1
.1af8	d0 f3		bne $1aed			bne 	_ELShiftLoop
.1afa	68		pla				pla 								; get original 6 bit value and OR in.
.1afb	29 3f		and #$3f			and 	#$3F
.1afd	15 48		ora $48,x			ora 	esInt0,x
.1aff	95 48		sta $48,x			sta 	esInt0,x
.1b01	60		rts				rts
.1b02					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1b02	01					.byte	$01			; $86 and
>1b03	01					.byte	$01			; $87 or
>1b04	01					.byte	$01			; $88 xor
>1b05	02					.byte	$02			; $89 >=
>1b06	02					.byte	$02			; $8a <=
>1b07	02					.byte	$02			; $8b >
>1b08	02					.byte	$02			; $8c <
>1b09	02					.byte	$02			; $8d =
>1b0a	02					.byte	$02			; $8e <>
>1b0b	03					.byte	$03			; $8f +
>1b0c	03					.byte	$03			; $90 -
>1b0d	04					.byte	$04			; $91 >>
>1b0e	04					.byte	$04			; $92 <<
>1b0f	04					.byte	$04			; $93 *
>1b10	04					.byte	$04			; $94 /
>1b11	04					.byte	$04			; $95 mod
>1b12	05					.byte	$05			; $96 ^
>1b13	06					.byte	$06			; $97 !
>1b14	06					.byte	$06			; $98 ?
>1b15	82					.byte	$82			; $99 repeat
>1b16	82					.byte	$82			; $9a while
>1b17	82					.byte	$82			; $9b for
>1b18	82					.byte	$82			; $9c if
>1b19	82					.byte	$82			; $9d defproc
>1b1a	80					.byte	$80			; $9e until
>1b1b	80					.byte	$80			; $9f wend
>1b1c	80					.byte	$80			; $a0 next
>1b1d	80					.byte	$80			; $a1 then
>1b1e	80					.byte	$80			; $a2 endif
>1b1f	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1b20					EventFunction:
.1b20	20 c1 1a	jsr $1ac1			jsr 	EvaluateReference			; get the variable reference.
.1b23	b5 40		lda $40,x			lda 	esType,x
.1b25	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1b27	d0 5b		bne $1b84			bne 	_EFType
.1b29	20 2f 21	jsr $212f			jsr 	CheckComma
.1b2c	e8		inx				inx
.1b2d	20 94 1a	jsr $1a94			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1b30	20 22 21	jsr $2122			jsr 	CheckRightParen 			; finish off with the
.1b33	ca		dex				dex
.1b34	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1b36	29 80		and #$80			and 	#$80
.1b38	15 58		ora $58,x			ora 	esInt2,x
.1b3a	15 60		ora $60,x			ora 	esInt3,x
.1b3c	d0 41		bne $1b7f			bne 	_EFValue
.1b3e	98		tya				tya
.1b3f	48		pha				pha
.1b40	8a		txa				txa
.1b41	48		pha				pha
.1b42	a2 0a		ldx #$0a		ldx	#10
.1b44	20 dc 21	jsr $21dc		jsr	deviceHandler
.1b47	84 07		sty $07				sty 	temp1+1
.1b49	85 06		sta $06				sta 	temp1
.1b4b	68		pla				pla
.1b4c	aa		tax				tax
.1b4d	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1b50	a0 03		ldy #$03			ldy 	#3							; if -ve
.1b52	b1 04		lda ($04),y			lda 	(temp0),y
.1b54	30 23		bmi $1b79			bmi 	_EFFail 	 				; straight out with fail, means on pause.
.1b56	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1b58	b1 04		lda ($04),y			lda 	(temp0),y
.1b5a	c8		iny				iny
.1b5b	11 04		ora ($04),y			ora 	(temp0),y
.1b5d	f0 17		beq $1b76			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1b5f	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1b61	38		sec				sec
.1b62	b1 04		lda ($04),y			lda 	(temp0),y
.1b64	e5 06		sbc $06				sbc 	temp1
.1b66	c8		iny				iny
.1b67	b1 04		lda ($04),y			lda 	(temp0),y
.1b69	e5 07		sbc $07				sbc 	temp1+1
.1b6b	10 0c		bpl $1b79			bpl 	_EFFail 					; if trigger >= timer then return False
.1b6d	20 89 1b	jsr $1b89			jsr 	SetEventTimer 				; reset the timer for next time.
.1b70	20 ab 20	jsr $20ab			jsr	 	MInt32True 					; and treutn true as fired.
.1b73	68		pla				pla
.1b74	a8		tay				tay
.1b75	60		rts				rts
.1b76					_EFInitialise:
.1b76	20 89 1b	jsr $1b89			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1b79					_EFFail:
.1b79	68		pla				pla
.1b7a	a8		tay				tay
.1b7b	20 af 20	jsr $20af			jsr 	MInt32False
.1b7e	60		rts				rts
.1b7f					_EFValue:
.1b7f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b81	20 eb 21	jsr $21eb		jsr	errorHandler
.1b84					_EFType:
.1b84	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b86	20 eb 21	jsr $21eb		jsr	errorHandler
.1b89					SetEventTimer:
.1b89	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1b8b	18		clc				clc
.1b8c	a5 06		lda $06				lda 	temp1
.1b8e	75 49		adc $49,x			adc 	esInt0+1,x
.1b90	91 04		sta ($04),y			sta		(temp0),y
.1b92	c8		iny				iny
.1b93	a5 07		lda $07				lda 	temp1+1
.1b95	75 51		adc $51,x			adc 	esInt1+1,x
.1b97	91 04		sta ($04),y			sta		(temp0),y
.1b99	88		dey				dey
.1b9a	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1b9c	d0 04		bne $1ba2			bne 	_SETExit
.1b9e	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1ba0	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1ba2					_SETExit:
.1ba2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1ba3					UnaryLen:
.1ba3	20 b1 1b	jsr $1bb1			jsr 	ULStart
.1ba6					ULFinish:
.1ba6	b1 04		lda ($04),y			lda 	(temp0),y
.1ba8	a4 0c		ldy $0c				ldy 	tempShort
.1baa	20 be 20	jsr $20be			jsr 	MInt32Set8Bit
.1bad	20 22 21	jsr $2122			jsr 	CheckRightParen
.1bb0	60		rts				rts
.1bb1	20 89 1a	jsr $1a89	ULStart:jsr 	EvaluateString
.1bb4	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1bb6	85 04		sta $04				sta 	temp0
.1bb8	b5 50		lda $50,x			lda 	esInt1,x
.1bba	85 05		sta $05				sta 	temp0+1
.1bbc	84 0c		sty $0c				sty 	tempShort 					; get length
.1bbe	a0 00		ldy #$00			ldy 	#0
.1bc0	60		rts				rts
.1bc1					UnaryAsc:
.1bc1	20 b1 1b	jsr $1bb1			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1bc4	b1 04		lda ($04),y			lda 	(temp0),y
.1bc6	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1bc7	c9 00		cmp #$00			cmp 	#0
.1bc9	d0 db		bne $1ba6			bne 	ULFinish
.1bcb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1bcd	20 eb 21	jsr $21eb		jsr	errorHandler
.1bd0					UnaryAbs:
.1bd0	20 7e 1a	jsr $1a7e			jsr 	EvaluateNumeric
.1bd3	b0 07		bcs $1bdc			bcs 	_UAFloat
.1bd5	20 64 20	jsr $2064			jsr 	MInt32Absolute
.1bd8	20 22 21	jsr $2122			jsr 	CheckRightParen
.1bdb	60		rts				rts
.1bdc					_UAFloat:
.1bdc	8a		txa				txa
.1bdd	a2 00		ldx #$00		ldx	#0
.1bdf	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1be2	aa		tax				tax
.1be3	20 22 21	jsr $2122			jsr 	CheckRightParen
.1be6	60		rts				rts
.1be7					UnarySgn:
.1be7	20 7e 1a	jsr $1a7e			jsr 	EvaluateNumeric
.1bea	b0 07		bcs $1bf3			bcs 	_USFloat
.1bec	20 9c 20	jsr $209c			jsr 	MInt32Sign
.1bef	20 22 21	jsr $2122			jsr 	CheckRightParen
.1bf2	60		rts				rts
.1bf3					_USFloat:
.1bf3	8a		txa				txa
.1bf4	a2 0e		ldx #$0e		ldx	#14
.1bf6	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1bf9	aa		tax				tax
.1bfa	20 22 21	jsr $2122			jsr 	CheckRightParen
.1bfd	60		rts				rts
.1bfe					UnaryPeek:
.1bfe	20 2a 1c	jsr $1c2a			jsr 	PDLCode
.1c01	4c 1e 1c	jmp $1c1e			jmp 	PDLByte0
.1c04					UnaryDeek:
.1c04	20 2a 1c	jsr $1c2a			jsr 	PDLCode
.1c07	4c 18 1c	jmp $1c18			jmp 	PDLByte1
.1c0a					UnaryLeek:
.1c0a	20 2a 1c	jsr $1c2a			jsr 	PDLCode
.1c0d	a0 03		ldy #$03			ldy 	#3
.1c0f	b1 04		lda ($04),y			lda 	(temp0),y
.1c11	95 60		sta $60,x			sta 	esInt3,x
.1c13	88		dey				dey
.1c14	b1 04		lda ($04),y			lda 	(temp0),y
.1c16	95 58		sta $58,x			sta 	esInt2,x
.1c18					PDLByte1:
.1c18	a0 01		ldy #$01			ldy 	#1
.1c1a	b1 04		lda ($04),y			lda 	(temp0),y
.1c1c	95 50		sta $50,x			sta 	esInt1,x
.1c1e					PDLByte0:
.1c1e	a0 00		ldy #$00			ldy 	#0
.1c20	b1 04		lda ($04),y			lda 	(temp0),y
.1c22	95 48		sta $48,x			sta 	esInt0,x
.1c24	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1c26	20 22 21	jsr $2122			jsr 	CheckRightParen 			; check right and return
.1c29	60		rts				rts
.1c2a					PDLCode:
.1c2a	20 94 1a	jsr $1a94			jsr 	EvaluateInteger
.1c2d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1c2f	85 04		sta $04				sta 	temp0
.1c31	b5 50		lda $50,x			lda 	esInt1,x
.1c33	85 05		sta $05				sta 	temp0+1
.1c35	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1c37	95 50		sta $50,x			sta 	esInt1,x
.1c39	95 58		sta $58,x			sta 	esInt2,x
.1c3b	95 60		sta $60,x			sta 	esInt3,x
.1c3d	84 0c		sty $0c				sty 	tempShort 					; save Y
.1c3f	60		rts				rts
.1c40					Unary_Random:
.1c40	20 df 20	jsr $20df			jsr 	MInt32Random 				; generate random number.
.1c43	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1c45	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1c47	f0 08		beq $1c51			beq 	_URExit
.1c49	e8		inx				inx 								; load range 0..r-1 into +1
.1c4a	20 94 1a	jsr $1a94			jsr 	EvaluateInteger
.1c4d	ca		dex				dex
.1c4e	20 0e 1f	jsr $1f0e			jsr 	MInt32Modulus 				; calculate random % modulus
.1c51					_URExit:
.1c51	20 22 21	jsr $2122			jsr 	CheckRightParen 			; check right and return
.1c54	60		rts				rts
.1c55					Unary_Min:
.1c55	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1c57	d0 02		bne $1c5b			bne 	UnaryMBody
.1c59					Unary_Max:
.1c59	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1c5b					UnaryMBody:
.1c5b	48		pha				pha 								; save comparator on stack.
.1c5c	20 75 1a	jsr $1a75			jsr 	Evaluate 					; get the first thing to check
.1c5f					_UnaryMLoop:
.1c5f	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1c61	c8		iny				iny
.1c62	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1c64	f0 09		beq $1c6f			beq 	_UnaryMExit
.1c66	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1c68	f0 07		beq $1c71			beq 	_UnaryMCompare
.1c6a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c6c	20 eb 21	jsr $21eb		jsr	errorHandler
.1c6f					_UnaryMExit:
.1c6f	68		pla				pla 								; throw comparator and return.
.1c70	60		rts				rts
.1c71					_UnaryMCompare:
.1c71	e8		inx				inx 								; get the 2nd thing to evaluate
.1c72	20 75 1a	jsr $1a75			jsr 	Evaluate
.1c75	ca		dex				dex
.1c76	20 12 18	jsr $1812			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1c79	85 0c		sta $0c				sta 	tempShort 					; save result
.1c7b	68		pla				pla 								; get what we need
.1c7c	48		pha				pha
.1c7d	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1c7f	d0 de		bne $1c5f			bne 	_UnaryMLoop 				; no, try another value.
.1c81	20 af 20	jsr $20af			jsr 	MInt32False 				; promote 2nd to 1st.
.1c84	20 98 1f	jsr $1f98			jsr 	MInt32Add
.1c87	4c 5f 1c	jmp $1c5f			jmp 	_UnaryMLoop
.1c8a					Unary_Page:
.1c8a	20 af 20	jsr $20af			jsr 	MInt32False 				; zero
.1c8d	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1c90	95 48		sta $48,x			sta 	esInt0,x
.1c92	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c95	95 50		sta $50,x			sta 	esInt1,x
.1c97	60		rts				rts
.1c98					UnaryReference:
.1c98	a9 0f		lda #$0f			lda 	#15
.1c9a	20 60 19	jsr $1960			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1c9d	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1c9f	10 05		bpl $1ca6			bpl 	UType
.1ca1	a9 00		lda #$00			lda 	#0 							; make it an integer
.1ca3	95 40		sta $40,x			sta 	esType,x
.1ca5	60		rts				rts
.1ca6					UType:
.1ca6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1ca8	20 eb 21	jsr $21eb		jsr	errorHandler
.1cab					UnaryHexMarker:
.1cab	4c 66 1a	jmp $1a66			jmp 	EvaluateIntegerTerm
.1cae					UnaryComplement:
.1cae	20 66 1a	jsr $1a66			jsr 	EvaluateIntegerTerm
.1cb1	20 83 20	jsr $2083			jsr 	MInt32Not
.1cb4	60		rts				rts
.1cb5					UnaryIntToFloat:
.1cb5	20 7e 1a	jsr $1a7e			jsr 	EvaluateNumeric
.1cb8	b5 40		lda $40,x			lda 	esType,x
.1cba	d0 0b		bne $1cc7			bne 	_UIFExit
.1cbc	8a		txa				txa
.1cbd	a2 1a		ldx #$1a		ldx	#26
.1cbf	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1cc2	aa		tax				tax
.1cc3	a9 01		lda #$01			lda 	#1
.1cc5	95 40		sta $40,x			sta 	esType,x
.1cc7					_UIFExit:
.1cc7	60		rts				rts
.1cc8					UnaryFloatToInt:
.1cc8	20 7e 1a	jsr $1a7e			jsr 	EvaluateNumeric
.1ccb	b5 40		lda $40,x			lda 	esType,x
.1ccd	f0 07		beq $1cd6			beq 	_UFIExit
.1ccf	8a		txa				txa
.1cd0	a2 12		ldx #$12		ldx	#18
.1cd2	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.1cd5	aa		tax				tax
.1cd6					_UFIExit:
.1cd6	60		rts				rts
.1cd7					UnaryAlloc:
.1cd7	e8		inx				inx 								; evaluate memory required
.1cd8	20 94 1a	jsr $1a94			jsr 	EvaluateInteger
.1cdb	20 22 21	jsr $2122			jsr 	CheckRightParen
.1cde	ca		dex				dex
.1cdf	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1ce1	15 61		ora $61,x			ora 	esInt3+1,x
.1ce3	d0 19		bne $1cfe			bne 	_UABadValue
.1ce5	20 af 20	jsr $20af			jsr 	MInt32False					; zero return.
.1ce8	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1cea	95 50		sta $50,x			sta 	esInt1,x
.1cec	a5 0f		lda $0f				lda 	lowMemory
.1cee	95 48		sta $48,x			sta 	esInt0,x
.1cf0	18		clc				clc 								; add alloc required.
.1cf1	75 49		adc $49,x			adc 	esInt0+1,x
.1cf3	85 0f		sta $0f				sta 	lowMemory
.1cf5	a5 10		lda $10				lda 	lowMemory+1
.1cf7	75 51		adc $51,x			adc 	esInt1+1,x
.1cf9	85 10		sta $10				sta 	lowMemory+1
.1cfb	b0 01		bcs $1cfe			bcs		_UABadValue 				; overflow definitely bad.
.1cfd	60		rts				rts
.1cfe					_UABadValue:
.1cfe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d00	20 eb 21	jsr $21eb		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1d03					UnaryTimer:
.1d03	20 22 21	jsr $2122			jsr 	CheckRightParen
.1d06	98		tya				tya
.1d07	48		pha				pha
.1d08	20 d6 20	jsr $20d6			jsr 	MInt32Zero 					; zero result
.1d0b	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1d0d	a2 0a		ldx #$0a		ldx	#10
.1d0f	20 dc 21	jsr $21dc		jsr	deviceHandler
.1d12	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1d14	95 48		sta $48,x			sta 	esInt0,x
.1d16	98		tya				tya
.1d17	95 50		sta $50,x			sta 	esInt1,x
.1d19	68		pla				pla
.1d1a	a8		tay				tay
.1d1b	60		rts				rts
.1d1c					UnaryInkey:
.1d1c	20 22 21	jsr $2122			jsr 	CheckRightParen
.1d1f	86 04		stx $04				stx 	temp0
.1d21	a2 04		ldx #$04		ldx	#4
.1d23	20 dc 21	jsr $21dc		jsr	deviceHandler
.1d26	a6 04		ldx $04				ldx 	temp0
.1d28	20 be 20	jsr $20be			jsr 	MInt32Set8Bit
.1d2b	60		rts				rts
.1d2c					UnaryGet:
.1d2c	20 22 21	jsr $2122			jsr 	CheckRightParen
.1d2f	86 04		stx $04				stx 	temp0
.1d31					_UGLoop:
.1d31	a2 04		ldx #$04		ldx	#4
.1d33	20 dc 21	jsr $21dc		jsr	deviceHandler
.1d36	c9 00		cmp #$00			cmp 	#0
.1d38	f0 f7		beq $1d31			beq 	_UGLoop
.1d3a	a6 04		ldx $04				ldx 	temp0
.1d3c	20 be 20	jsr $20be			jsr 	MInt32Set8Bit
.1d3f	60		rts				rts
.1d40					UnarySys:
.1d40	20 94 1a	jsr $1a94			jsr 	EvaluateInteger 				; get the address
.1d43	20 22 21	jsr $2122			jsr 	CheckRightParen
.1d46	20 3c 11	jsr $113c			jsr 	TOSToTemp0 						; copy to temp0
.1d49	8a		txa				txa
.1d4a	48		pha				pha
.1d4b	98		tya				tya
.1d4c	48		pha				pha
.1d4d	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1d50	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1d53	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1d56	20 65 1d	jsr $1d65			jsr 	_CallTemp0
.1d59	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1d5b	68		pla				pla
.1d5c	a8		tay				tay
.1d5d	68		pla				pla
.1d5e	aa		tax				tax
.1d5f	a5 0c		lda $0c				lda 	tempShort
.1d61	20 be 20	jsr $20be			jsr 	MInt32Set8Bit 					; return result.
.1d64	60		rts				rts
.1d65					_CallTemp0:
.1d65	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1d68					ExecChr:
.1d68	20 9c 1a	jsr $1a9c			jsr 	EvaluateSmallInteger		; character number
.1d6b	20 22 21	jsr $2122			jsr 	CheckRightParen				; right bracket
.1d6e	98		tya				tya
.1d6f	48		pha				pha
.1d70	8a		txa				txa 								; A = stack
.1d71	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1d73	a2 00		ldx #$00		ldx	#0
.1d75	20 72 27	jsr $2772		jsr	stringHandler
.1d78	aa		tax				tax 								; X = stack
.1d79	68		pla				pla
.1d7a	a8		tay				tay
.1d7b	60		rts				rts
.1d7c					ExecLower:
.1d7c	38		sec				sec
.1d7d	b0 01		bcs $1d80			bcs 	ExecUpperLower
.1d7f					ExecUpper:
.1d7f	18		clc				clc
.1d80					ExecUpperLower:
.1d80	08		php				php 								; save carry
.1d81	20 89 1a	jsr $1a89			jsr 	EvaluateString 				; string to stack,X
.1d84	20 22 21	jsr $2122			jsr 	CheckRightParen 			; check closing right bracket.
.1d87	28		plp				plp 								; restore carry, save Y
.1d88	98		tya				tya
.1d89	48		pha				pha
.1d8a	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1d8c	2a		rol a				rol 	a
.1d8d	a8		tay				tay 								; now in Y
.1d8e	8a		txa				txa 								; do the substring and exit.
.1d8f	a2 08		ldx #$08		ldx	#8
.1d91	20 72 27	jsr $2772		jsr	stringHandler
.1d94	aa		tax				tax
.1d95	68		pla				pla
.1d96	a8		tay				tay
.1d97	60		rts				rts
.1d98					ExecLeft:
.1d98	20 89 1a	jsr $1a89			jsr 	EvaluateString 				; string to stack,X
.1d9b	20 2f 21	jsr $212f			jsr 	CheckComma
.1d9e	e8		inx				inx
.1d9f	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1da1	20 be 20	jsr $20be			jsr 	MInt32Set8Bit
.1da4	e8		inx				inx
.1da5	20 9c 1a	jsr $1a9c			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1da8					ExecSubstring:
.1da8	ca		dex				dex 								; fix up X
.1da9	ca		dex				dex
.1daa	20 22 21	jsr $2122			jsr 	CheckRightParen 			; check closing right bracket.
.1dad	8a		txa				txa 								; do the substring and exit.
.1dae	a2 0a		ldx #$0a		ldx	#10
.1db0	20 72 27	jsr $2772		jsr	stringHandler
.1db3	aa		tax				tax
.1db4	60		rts				rts
.1db5					ExecMid:
.1db5	20 89 1a	jsr $1a89			jsr 	EvaluateString 				; string to stack,X
.1db8	20 2f 21	jsr $212f			jsr 	CheckComma
.1dbb	e8		inx				inx
.1dbc	20 9c 1a	jsr $1a9c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1dbf	c9 00		cmp #$00			cmp 	#0
.1dc1	f0 15		beq $1dd8			beq 	_EMValue
.1dc3	e8		inx				inx
.1dc4	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1dc6	20 be 20	jsr $20be			jsr 	MInt32Set8Bit
.1dc9	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1dcb	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1dcd	f0 d9		beq $1da8			beq 	ExecSubString
.1dcf	20 2f 21	jsr $212f			jsr 	CheckComma
.1dd2	20 9c 1a	jsr $1a9c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1dd5	4c a8 1d	jmp $1da8			jmp 	ExecSubString
.1dd8					_EMValue:
.1dd8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1dda	20 eb 21	jsr $21eb		jsr	errorHandler
.1ddd					ExecRight:
.1ddd	20 89 1a	jsr $1a89			jsr 	EvaluateString 				; string to stack,X
.1de0	20 2f 21	jsr $212f			jsr 	CheckComma
.1de3	e8		inx				inx
.1de4	20 9c 1a	jsr $1a9c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1de7	ca		dex				dex
.1de8	98		tya				tya
.1de9	48		pha				pha
.1dea	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1dec	85 04		sta $04				sta 	temp0
.1dee	b5 50		lda $50,x			lda 	esInt1,x
.1df0	85 05		sta $05				sta 	temp0+1
.1df2	a0 00		ldy #$00			ldy 	#0 							; point to length
.1df4	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1df6	18		clc				clc 								; add 1.
.1df7	69 01		adc #$01			adc 	#1
.1df9	38		sec				sec
.1dfa	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1dfc	f0 02		beq $1e00			beq		_ERMake1 					; if zero, make it 1.
.1dfe	b0 02		bcs $1e02			bcs		_EROkay
.1e00					_ERMake1:
.1e00	a9 01		lda #$01			lda 	#1 							; start position.
.1e02					_EROkay:
.1e02	e8		inx				inx 								; set start pos.
.1e03	95 48		sta $48,x			sta 	esInt0,x
.1e05	e8		inx				inx
.1e06	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1e08	20 be 20	jsr $20be			jsr 	MInt32Set8Bit
.1e0b	68		pla				pla
.1e0c	a8		tay				tay
.1e0d	4c a8 1d	jmp $1da8			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1e10					MInt32And:
.1e10	b5 48		lda $48,x			lda 	esInt0,x
.1e12	35 49		and $49,x			and 	esInt0+1,x
.1e14	95 48		sta $48,x			sta 	esInt0,x
.1e16	b5 50		lda $50,x			lda 	esInt1,x
.1e18	35 51		and $51,x			and 	esInt1+1,x
.1e1a	95 50		sta $50,x			sta 	esInt1,x
.1e1c	b5 58		lda $58,x			lda 	esInt2,x
.1e1e	35 59		and $59,x			and 	esInt2+1,x
.1e20	95 58		sta $58,x			sta 	esInt2,x
.1e22	b5 60		lda $60,x			lda 	esInt3,x
.1e24	35 61		and $61,x			and 	esInt3+1,x
.1e26	95 60		sta $60,x			sta 	esInt3,x
.1e28	60		rts				rts
.1e29					MInt32Or:
.1e29	b5 48		lda $48,x			lda 	esInt0,x
.1e2b	15 49		ora $49,x			ora 	esInt0+1,x
.1e2d	95 48		sta $48,x			sta 	esInt0,x
.1e2f	b5 50		lda $50,x			lda 	esInt1,x
.1e31	15 51		ora $51,x			ora 	esInt1+1,x
.1e33	95 50		sta $50,x			sta 	esInt1,x
.1e35	b5 58		lda $58,x			lda 	esInt2,x
.1e37	15 59		ora $59,x			ora 	esInt2+1,x
.1e39	95 58		sta $58,x			sta 	esInt2,x
.1e3b	b5 60		lda $60,x			lda 	esInt3,x
.1e3d	15 61		ora $61,x			ora 	esInt3+1,x
.1e3f	95 60		sta $60,x			sta 	esInt3,x
.1e41	60		rts				rts
.1e42					MInt32Xor:
.1e42	b5 48		lda $48,x			lda 	esInt0,x
.1e44	55 49		eor $49,x			eor 	esInt0+1,x
.1e46	95 48		sta $48,x			sta 	esInt0,x
.1e48	b5 50		lda $50,x			lda 	esInt1,x
.1e4a	55 51		eor $51,x			eor 	esInt1+1,x
.1e4c	95 50		sta $50,x			sta 	esInt1,x
.1e4e	b5 58		lda $58,x			lda 	esInt2,x
.1e50	55 59		eor $59,x			eor 	esInt2+1,x
.1e52	95 58		sta $58,x			sta 	esInt2,x
.1e54	b5 60		lda $60,x			lda 	esInt3,x
.1e56	55 61		eor $61,x			eor 	esInt3+1,x
.1e58	95 60		sta $60,x			sta 	esInt3,x
.1e5a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1e5b					MInt32Compare:
.1e5b	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1e5d	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e5f	d0 13		bne $1e74			bne 	MInt32Compare2
.1e61	b5 50		lda $50,x			lda 	esInt1,x
.1e63	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1e65	d0 0d		bne $1e74			bne 	MInt32Compare2
.1e67	b5 58		lda $58,x			lda 	esInt2,x
.1e69	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1e6b	d0 07		bne $1e74			bne 	MInt32Compare2
.1e6d	b5 60		lda $60,x			lda 	esInt3,x
.1e6f	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1e71	d0 01		bne $1e74			bne 	MInt32Compare2
.1e73	60		rts				rts
.1e74					MInt32Compare2:
.1e74	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1e76	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e78	b5 50		lda $50,x			lda		esInt1,x
.1e7a	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e7c	b5 58		lda $58,x			lda		esInt2,x
.1e7e	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e80	b5 60		lda $60,x			lda		esInt3,x
.1e82	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e84	50 02		bvc $1e88			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1e86	49 80		eor #$80			eor 	#$80
.1e88					_I32LNoOverflow
.1e88	30 03		bmi $1e8d			bmi 	MInt32CLess					; if -ve then return $FF
.1e8a	a9 01		lda #$01			lda 	#$01						; else return $01
.1e8c	60		rts				rts
.1e8d					MInt32CLess:
.1e8d	a9 ff		lda #$ff			lda 	#$FF
.1e8f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1e90					MInt32SDivide:
.1e90	98		tya				tya  								; save Y, which is the count of negations
.1e91	48		pha				pha
.1e92	a0 00		ldy #$00			ldy 	#0 							; zero count
.1e94	20 ac 1e	jsr $1eac			jsr 	_MInt32SRemSign 			; unsign TOS
.1e97	e8		inx				inx 								; unsign TOS+1
.1e98	20 ac 1e	jsr $1eac			jsr 	_MInt32SRemSign
.1e9b	ca		dex				dex
.1e9c	98		tya				tya 								; save sign count on stack
.1e9d	48		pha				pha
.1e9e	20 b5 1e	jsr $1eb5			jsr 	MInt32UDivide 				; unsigned division
.1ea1	68		pla				pla 								; get sign count back
.1ea2	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1ea4	f0 03		beq $1ea9			beq 	_I32SNoNeg
.1ea6	20 69 20	jsr $2069			jsr 	MInt32Negate
.1ea9					_I32SNoNeg:
.1ea9	68		pla				pla 								; restoe Y and exit
.1eaa	a8		tay				tay
.1eab	60		rts				rts
.1eac					_MInt32SRemSign:
.1eac	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1eae	10 04		bpl $1eb4			bpl 	_MInt32SRSExit
.1eb0	c8		iny				iny 								; increment the sign count
.1eb1	20 69 20	jsr $2069			jsr 	MInt32Negate 				; negate the value.
.1eb4					_MInt32SRSExit:
.1eb4	60		rts				rts
.1eb5					MInt32UDivide:
.1eb5	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1eb7	15 51		ora $51,x			ora 	esInt1+1,x
.1eb9	15 52		ora $52,x			ora 	esInt1+2,x
.1ebb	15 53		ora $53,x			ora 	esInt1+3,x
.1ebd	f0 4a		beq $1f09			beq 	_MInt32DZero
.1ebf	e8		inx				inx 								; clear A
.1ec0	e8		inx				inx
.1ec1	20 af 20	jsr $20af			jsr 	MInt32False
.1ec4	ca		dex				dex
.1ec5	ca		dex				dex
.1ec6	98		tya				tya 								; save Y on the stack
.1ec7	48		pha				pha
.1ec8	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1eca					_MInt32UDLoop:
.1eca	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1ecc	36 50		rol $50,x			rol 	esInt1,x
.1ece	36 58		rol $58,x			rol 	esInt2,x
.1ed0	36 60		rol $60,x			rol 	esInt3,x
.1ed2	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1ed4	36 52		rol $52,x			rol 	esInt1+2,x
.1ed6	36 5a		rol $5a,x			rol 	esInt2+2,x
.1ed8	36 62		rol $62,x			rol 	esInt3+2,x
.1eda	38		sec				sec 								; calculate A-M saving result on the stack
.1edb	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1edd	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1edf	48		pha				pha
.1ee0	b5 52		lda $52,x			lda 	esInt1+2,x
.1ee2	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1ee4	48		pha				pha
.1ee5	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1ee7	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1ee9	48		pha				pha
.1eea	b5 62		lda $62,x			lda 	esInt3+2,x
.1eec	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1eee	90 10		bcc $1f00			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1ef0	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1ef2	68		pla				pla
.1ef3	95 5a		sta $5a,x			sta 	esInt2+2,x
.1ef5	68		pla				pla
.1ef6	95 52		sta $52,x			sta 	esInt1+2,x
.1ef8	68		pla				pla
.1ef9	95 4a		sta $4a,x			sta 	esInt0+2,x
.1efb	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1efd	4c 03 1f	jmp $1f03			jmp 	_MInt32Next 					; do the next iteration
.1f00					_MInt32NoSubtract:
.1f00	68		pla				pla
.1f01	68		pla				pla
.1f02	68		pla				pla
.1f03					_MInt32Next:
.1f03	88		dey				dey 								; do this 32 times.
.1f04	d0 c4		bne $1eca			bne 	_MInt32UDLoop
.1f06	68		pla				pla 								; restore Y and exit
.1f07	a8		tay				tay
.1f08	60		rts				rts
.1f09					_MInt32DZero:
.1f09	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1f0b	20 eb 21	jsr $21eb		jsr	errorHandler
.1f0e					MInt32Modulus:
.1f0e	20 b5 1e	jsr $1eb5			jsr 	MInt32UDivide 				; do the division.
.1f11	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1f13	95 60		sta $60,x			sta 	esInt3,x
.1f15	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1f17	95 58		sta $58,x			sta 	esInt2,x
.1f19	b5 52		lda $52,x			lda 	esInt1+2,x
.1f1b	95 50		sta $50,x			sta 	esInt1,x
.1f1d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1f1f	95 48		sta $48,x			sta 	esInt0,x
.1f21	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af9					fs32Length:
>0af9							.fill 	1
.1f22					MInt32FromString:
.1f22	85 0c		sta $0c				sta 	tempShort 					; save base
.1f24	98		tya				tya
.1f25	48		pha				pha
.1f26	a0 00		ldy #$00			ldy 	#0 							; get length
.1f28	b1 04		lda ($04),y			lda 	(temp0),y
.1f2a	8d f9 0a	sta $0af9			sta 	fs32Length
.1f2d	f0 65		beq $1f94			beq 	_I32FSFail2					; fail if length zero.
.1f2f	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1f31	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1f33	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1f35	d0 09		bne $1f40			bne 	_I32FSNotNegative
.1f37	ad f9 0a	lda $0af9			lda 	fs32Length 					; get length back.
.1f3a	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1f3c	f0 56		beq $1f94			beq 	_I32FSFail2
.1f3e	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1f40					_I32FSNotNegative:
.1f40	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1f42	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1f44	d0 02		bne $1f48			bne 	_I32FSNN2
.1f46	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1f48					_I32FSNN2:
.1f48	48		pha				pha 								; save base + final sign on stack.
.1f49	20 af 20	jsr $20af			jsr 	MInt32False 				; zero the return value.
.1f4c					_I32FSMainLoop:
.1f4c	68		pla				pla 								; get the base back into tempShort
.1f4d	48		pha				pha
.1f4e	29 7f		and #$7f			and 	#$7F
.1f50	85 0c		sta $0c				sta 	tempShort
.1f52	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1f54	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1f56	90 02		bcc $1f5a			bcc 	_I32FSNotLC
.1f58	e9 20		sbc #$20			sbc 	#32
.1f5a					_I32FSNotLC:
.1f5a	38		sec				sec 								; subtract 48 (ASCII "0")
.1f5b	e9 30		sbc #$30			sbc 	#"0"
.1f5d	90 34		bcc $1f93			bcc 	_I32FSFail 					; nothing more to do.
.1f5f	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1f61	90 06		bcc $1f69			bcc 	_I32FSValidate
.1f63	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1f65	90 2c		bcc $1f93			bcc 	_I32FSFail
.1f67	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1f69					_I32FSValidate:
.1f69	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1f6b	b0 26		bcs $1f93			bcs 	_I32FSFail 					; sorry, too large for this base.
.1f6d	48		pha				pha 								; save the new digit value.
.1f6e	e8		inx				inx 								; put base into next slot.
.1f6f	a5 0c		lda $0c				lda 	tempShort
.1f71	20 be 20	jsr $20be			jsr 	MInt32Set8Bit
.1f74	ca		dex				dex
.1f75	20 cc 1f	jsr $1fcc			jsr 	MInt32Multiply 				; multiply current by the base
.1f78	e8		inx				inx
.1f79	68		pla				pla  								; put additive into next slot
.1f7a	20 be 20	jsr $20be			jsr 	MInt32Set8Bit
.1f7d	ca		dex				dex
.1f7e	20 98 1f	jsr $1f98			jsr 	MInt32Add 					; and add it
.1f81	c8		iny				iny 								; look at next character
.1f82	cc f9 0a	cpy $0af9			cpy 	fs32Length 					; until > length.
.1f85	f0 c5		beq $1f4c			beq 	_I32FSMainLoop
.1f87	90 c3		bcc $1f4c			bcc 	_I32FSMainLoop
.1f89					_I32FSDone:
.1f89	68		pla				pla 								; get base/final sign back
.1f8a	10 03		bpl $1f8f			bpl 	_I32FSNN3
.1f8c	20 69 20	jsr $2069			jsr 	MInt32Negate 				; negate the result.
.1f8f					_I32FSNN3:
.1f8f	68		pla				pla
.1f90	a8		tay				tay
.1f91	38		sec				sec
.1f92	60		rts				rts
.1f93					_I32FSFail:
.1f93	68		pla				pla
.1f94					_I32FSFail2:
.1f94	68		pla				pla
.1f95	a8		tay				tay
.1f96	18		clc				clc
.1f97	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1f98					MInt32Add:
.1f98	18		clc				clc
.1f99	b5 48		lda $48,x			lda 	esInt0,x
.1f9b	75 49		adc $49,x			adc 	esInt0+1,x
.1f9d	95 48		sta $48,x			sta 	esInt0,x
.1f9f	b5 50		lda $50,x			lda 	esInt1,x
.1fa1	75 51		adc $51,x			adc 	esInt1+1,x
.1fa3	95 50		sta $50,x			sta 	esInt1,x
.1fa5	b5 58		lda $58,x			lda 	esInt2,x
.1fa7	75 59		adc $59,x			adc 	esInt2+1,x
.1fa9	95 58		sta $58,x			sta 	esInt2,x
.1fab	b5 60		lda $60,x			lda 	esInt3,x
.1fad	75 61		adc $61,x			adc 	esInt3+1,x
.1faf	95 60		sta $60,x			sta 	esInt3,x
.1fb1	60		rts				rts
.1fb2					MInt32Sub:
.1fb2	38		sec				sec
.1fb3	b5 48		lda $48,x			lda 	esInt0,x
.1fb5	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1fb7	95 48		sta $48,x			sta 	esInt0,x
.1fb9	b5 50		lda $50,x			lda 	esInt1,x
.1fbb	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1fbd	95 50		sta $50,x			sta 	esInt1,x
.1fbf	b5 58		lda $58,x			lda 	esInt2,x
.1fc1	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1fc3	95 58		sta $58,x			sta 	esInt2,x
.1fc5	b5 60		lda $60,x			lda 	esInt3,x
.1fc7	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1fc9	95 60		sta $60,x			sta 	esInt3,x
.1fcb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1fcc					MInt32Multiply:
.1fcc	e8		inx				inx 								; copy 2nd -> 3rd
.1fcd	20 f2 1f	jsr $1ff2			jsr 	MInt32CopyUp
.1fd0	ca		dex				dex
.1fd1	20 f2 1f	jsr $1ff2			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1fd4	20 af 20	jsr $20af			jsr 	MInt32False 					; zero 1st.
.1fd7					_I32Loop:
.1fd7	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1fd9	29 01		and #$01			and 	#1
.1fdb	f0 03		beq $1fe0			beq 	_I32NoAdd 					; if set
.1fdd	20 98 1f	jsr $1f98			jsr 	MInt32Add 					; add 2nd to 1st.
.1fe0					_I32NoAdd:
.1fe0	e8		inx				inx 								; shift 2nd left
.1fe1	20 c4 20	jsr $20c4			jsr 	MInt32ShiftLeft
.1fe4	e8		inx				inx  								; shift 3rd right
.1fe5	20 cd 20	jsr $20cd			jsr 	MInt32ShiftRight
.1fe8	20 d6 20	jsr $20d6			jsr 	MInt32Zero 					; check if zero.
.1feb	08		php				php 								; save status bits
.1fec	ca		dex				dex 	 							; point back to 1st
.1fed	ca		dex				dex
.1fee	28		plp				plp 								; get status bits
.1fef	d0 e6		bne $1fd7			bne 	_I32Loop 					; if non-zero keep going.
.1ff1	60		rts				rts
.1ff2					MInt32CopyUp:
.1ff2	b5 48		lda $48,x			lda 	esInt0,x
.1ff4	95 49		sta $49,x			sta 	esInt0+1,x
.1ff6	b5 50		lda $50,x			lda 	esInt1,x
.1ff8	95 51		sta $51,x			sta 	esInt1+1,x
.1ffa	b5 58		lda $58,x			lda 	esInt2,x
.1ffc	95 59		sta $59,x			sta 	esInt2+1,x
.1ffe	b5 60		lda $60,x			lda 	esInt3,x
.2000	95 61		sta $61,x			sta 	esInt3+1,x
.2002	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0afa					MCharCount:	.fill 	1						; count of converted characters
.2003					MLInt32ToString:
.2003	aa		tax				tax									; module passes stack in A, base in Y
.2004	98		tya				tya
.2005					MInt32ToString:
.2005	48		pha				pha 								; save base
.2006	85 0c		sta $0c				sta 	tempShort 					; save target base.
.2008	a9 00		lda #$00			lda 	#0
.200a	8d fa 0a	sta $0afa			sta 	MCharCount 					; clear character count to 0
.200d	98		tya				tya
.200e	48		pha				pha
.200f	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.2011	10 10		bpl $2023			bpl 	_I32TSUnsigned
.2013	48		pha				pha 								; save base on stack.
.2014	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2016	10 08		bpl $2020			bpl 	_I32TSNoFlip
.2018	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.201a	20 56 20	jsr $2056			jsr 	MI32WriteCharacter
.201d	20 69 20	jsr $2069			jsr 	MInt32Negate 				; negate the value.
.2020					_I32TSNoFlip:
.2020	68		pla				pla 								; get the base back
.2021	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2023					_I32TSUnsigned:
.2023	20 31 20	jsr $2031			jsr 	MI32DivideWrite 			; recursive code to output string.
.2026	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2028	ad fa 0a	lda $0afa			lda 	MCharCount
.202b	91 04		sta ($04),y			sta 	(temp0),y
.202d	68		pla				pla
.202e	a8		tay				tay
.202f	68		pla				pla
.2030	60		rts				rts
.2031					MI32DivideWrite:
.2031	48		pha				pha 								; save the divisor/base
.2032	e8		inx				inx 								; write in the dividing position.
.2033	20 be 20	jsr $20be			jsr 	MInt32Set8Bit
.2036	ca		dex				dex
.2037	20 b5 1e	jsr $1eb5			jsr 	MInt32UDivide 				; divide number by base.
.203a	68		pla				pla 								; get the base into Y
.203b	a8		tay				tay
.203c	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.203e	48		pha				pha
.203f	20 d6 20	jsr $20d6			jsr 	MInt32Zero 					; is the result zero ?
.2042	f0 04		beq $2048			beq 	_I32NoRecurse 				; if so, don't recurse.
.2044	98		tya				tya 								; put base into A
.2045	20 31 20	jsr $2031			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2048					_I32NoRecurse:
.2048	68		pla				pla 								; get the remainder back
.2049	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.204b	90 02		bcc $204f			bcc 	_I32NotHex
.204d	69 06		adc #$06			adc 	#7-1
.204f					_I32NotHex:
.204f	18		clc				clc 								; make it ASCII
.2050	69 30		adc #$30			adc 	#48
.2052	20 56 20	jsr $2056			jsr 	MI32WriteCharacter 			; write the character out
.2055	60		rts				rts 								; and exit.
.2056					MI32WriteCharacter:
.2056	ee fa 0a	inc $0afa			inc 	MCharCount 					; bump count (space for leading count)
.2059	ac fa 0a	ldy $0afa			ldy 	MCharCount 					; get position
.205c	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.205e	c8		iny				iny
.205f	a9 00		lda #$00			lda 	#0
.2061	91 04		sta ($04),y			sta 	(temp0),y
.2063	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0afb					MSeed32:	.fill 	4							; random number seed.
.2064					MInt32Absolute:
.2064	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2066	30 01		bmi $2069			bmi 	MInt32Negate
.2068	60		rts				rts
.2069					MInt32Negate:
.2069	38		sec				sec
.206a	a9 00		lda #$00			lda 	#0
.206c	f5 48		sbc $48,x			sbc 	esInt0,x
.206e	95 48		sta $48,x			sta 	esInt0,x
.2070	a9 00		lda #$00			lda 	#0
.2072	f5 50		sbc $50,x			sbc 	esInt1,x
.2074	95 50		sta $50,x			sta 	esInt1,x
.2076	a9 00		lda #$00			lda 	#0
.2078	f5 58		sbc $58,x			sbc 	esInt2,x
.207a	95 58		sta $58,x			sta 	esInt2,x
.207c	a9 00		lda #$00			lda 	#0
.207e	f5 60		sbc $60,x			sbc 	esInt3,x
.2080	95 60		sta $60,x			sta 	esInt3,x
.2082	60		rts				rts
.2083					MInt32Not:
.2083	b5 48		lda $48,x			lda 	esInt0,x
.2085	49 ff		eor #$ff			eor 	#$FF
.2087	95 48		sta $48,x			sta 	esInt0,x
.2089	b5 50		lda $50,x			lda 	esInt1,x
.208b	49 ff		eor #$ff			eor 	#$FF
.208d	95 50		sta $50,x			sta 	esInt1,x
.208f	b5 58		lda $58,x			lda 	esInt2,x
.2091	49 ff		eor #$ff			eor 	#$FF
.2093	95 58		sta $58,x			sta 	esInt2,x
.2095	b5 60		lda $60,x			lda 	esInt3,x
.2097	49 ff		eor #$ff			eor 	#$FF
.2099	95 60		sta $60,x			sta 	esInt3,x
.209b	60		rts				rts
.209c					MInt32Sign:
.209c	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.209e	30 0b		bmi $20ab			bmi 	MInt32True 					; if set return -1 (true)
.20a0	20 d6 20	jsr $20d6			jsr 	MInt32Zero 					; is it zero ?
.20a3	f0 0a		beq $20af			beq 	MInt32False 					; if zero return 0 (false)
.20a5	20 af 20	jsr $20af			jsr 	MInt32False 					; > 0 return 1
.20a8	f6 48		inc $48,x			inc 	esInt0,x
.20aa	60		rts				rts
.20ab					MInt32True:
.20ab	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.20ad	d0 02		bne $20b1			bne 	MInt32WriteAll
.20af					MInt32False:
.20af	a9 00		lda #$00			lda 	#0
.20b1					MInt32WriteAll:
.20b1	95 48		sta $48,x			sta 	esInt0,x
.20b3					MInt32Write123:
.20b3	95 50		sta $50,x			sta 	esInt1,x
.20b5	95 58		sta $58,x			sta 	esInt2,x
.20b7	95 60		sta $60,x			sta 	esInt3,x
.20b9	a9 00		lda #$00			lda 	#$00						; and make it an integer
.20bb	95 40		sta $40,x			sta 	esType,x
.20bd	60		rts				rts
.20be					MInt32Set8Bit:
.20be	95 48		sta $48,x			sta 	esInt0,x
.20c0	a9 00		lda #$00			lda 	#0
.20c2	f0 ef		beq $20b3			beq		MInt32Write123
.20c4					MInt32ShiftLeft:
.20c4	16 48		asl $48,x			asl 	esInt0,x
.20c6	36 50		rol $50,x			rol	 	esInt1,x
.20c8	36 58		rol $58,x			rol	 	esInt2,x
.20ca	36 60		rol $60,x			rol	 	esInt3,x
.20cc	60		rts				rts
.20cd					MInt32ShiftRight:
.20cd	56 60		lsr $60,x			lsr 	esInt3,x
.20cf	76 58		ror $58,x			ror 	esInt2,x
.20d1	76 50		ror $50,x			ror 	esInt1,x
.20d3	76 48		ror $48,x			ror 	esInt0,x
.20d5	60		rts				rts
.20d6					MInt32Zero:
.20d6	b5 48		lda $48,x			lda 	esInt0,x
.20d8	15 50		ora $50,x			ora 	esInt1,x
.20da	15 58		ora $58,x			ora 	esInt2,x
.20dc	15 60		ora $60,x			ora 	esInt3,x
.20de	60		rts				rts
.20df					MInt32Random:
.20df	98		tya				tya
.20e0	48		pha				pha
.20e1	a0 07		ldy #$07			ldy 	#7
.20e3	ad fb 0a	lda $0afb			lda 	MSeed32+0
.20e6	d0 03		bne $20eb			bne 	_Random1
.20e8	a8		tay				tay
.20e9	a9 aa		lda #$aa			lda		#$AA
.20eb					_Random1:
.20eb	0a		asl a				asl 	a
.20ec	2e fc 0a	rol $0afc			rol 	MSeed32+1
.20ef	2e fd 0a	rol $0afd			rol 	MSeed32+2
.20f2	2e fe 0a	rol $0afe			rol 	MSeed32+3
.20f5	90 02		bcc $20f9			bcc 	_Random2
.20f7	49 c5		eor #$c5			eor 	#$C5
.20f9					_Random2:
.20f9	88		dey				dey
.20fa	d0 ef		bne $20eb			bne 	_Random1
.20fc	8d fb 0a	sta $0afb			sta 	MSeed32+0
.20ff	95 48		sta $48,x			sta 	esInt0,x
.2101	ad fc 0a	lda $0afc			lda 	MSeed32+1
.2104	95 50		sta $50,x			sta 	esInt1,x
.2106	ad fd 0a	lda $0afd			lda 	MSeed32+2
.2109	95 58		sta $58,x			sta 	esInt2,x
.210b	ad fe 0a	lda $0afe			lda 	MSeed32+3
.210e	95 60		sta $60,x			sta 	esInt3,x
.2110	68		pla				pla
.2111	a8		tay				tay
.2112	a9 00		lda #$00			lda 	#0
.2114	95 40		sta $40,x			sta 	esType,x
.2116	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2117					CheckToken:
.2117	d1 02		cmp ($02),y			cmp 	(codePtr),y
.2119	d0 02		bne $211d			bne 	_CTError
.211b	c8		iny				iny
.211c	60		rts				rts
.211d					_CTError:
.211d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.211f	20 eb 21	jsr $21eb		jsr	errorHandler
.2122					CheckRightParen:
.2122	b1 02		lda ($02),y			lda 	(codePtr),y
.2124	c8		iny				iny
.2125	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2127	d0 01		bne $212a			bne 	_CRPError
.2129	60		rts				rts
.212a					_CRPError:
.212a	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.212c	20 eb 21	jsr $21eb		jsr	errorHandler
.212f					CheckComma:
.212f	b1 02		lda ($02),y			lda 	(codePtr),y
.2131	c8		iny				iny
.2132	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.2134	d0 01		bne $2137			bne 	_CCError
.2136	60		rts				rts
.2137					_CCError:
.2137	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2139	20 eb 21	jsr $21eb		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2bbb					ScanForward:
.2bbb	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2bbd	86 07		stx $07				stx 	temp1+1
.2bbf	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2bc1	85 08		sta $08				sta 	temp2
.2bc3	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2bc5	c8		iny				iny
.2bc6	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.2bc8	d0 08		bne $2bd2			bne 	_SFNoCheck 					; if so, check token against entered values.
.2bca	c5 06		cmp $06				cmp 	temp1
.2bcc	f0 24		beq $2bf2			beq 	_SFExit
.2bce	c5 07		cmp $07				cmp 	temp1+1
.2bd0	f0 20		beq $2bf2			beq 	_SFExit
.2bd2					_SFNoCheck:
.2bd2	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2bd4	90 ed		bcc $2bc3			bcc 	_SFLoop
.2bd6	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2bd8	90 19		bcc $2bf3			bcc 	_SFSpecials
.2bda	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2bdc	90 e5		bcc $2bc3			bcc 	_SFLoop
.2bde	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2be0	b0 e1		bcs $2bc3			bcs 	_SFLoop
.2be2	aa		tax				tax  								; token in X, and look up the adjuster.
.2be3	bd 7c 1a	lda $1a7c,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2be6	38		sec				sec 								; convert to an offset
.2be7	e9 81		sbc #$81			sbc 	#$81
.2be9	18		clc				clc 								; add to depth
.2bea	65 08		adc $08				adc 	temp2
.2bec	85 08		sta $08				sta 	temp2
.2bee	10 d3		bpl $2bc3			bpl 	_SFLoop 					; +ve okay to continue
.2bf0	30 2a		bmi $2c1c			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2bf2	60		rts		_SFExit:rts
.2bf3					_SFSpecials:
.2bf3	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2bf5	f0 14		beq $2c0b			beq 	_SFNextLine
.2bf7	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2bf9	f0 26		beq $2c21			beq 	_SFFloatSkip
.2bfb	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2bfd	f0 04		beq $2c03			beq 	_SFSkipString
.2bff	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2c00	4c c3 2b	jmp $2bc3			jmp 	_SFLoop 					; token.
.2c03					_SFSkipString:
.2c03	98		tya				tya
.2c04	38		sec				sec
.2c05	71 02		adc ($02),y			adc 	(codePtr),y
.2c07	a8		tay				tay
.2c08	4c c3 2b	jmp $2bc3			jmp 	_SFLoop
.2c0b					_SFNextLine:
.2c0b	a0 00		ldy #$00			ldy 	#0 							; get offset
.2c0d	b1 02		lda ($02),y			lda 	(codePtr),y
.2c0f	18		clc				clc 								; add to code pointer.
.2c10	65 02		adc $02				adc 	codePtr
.2c12	85 02		sta $02				sta 	codePtr
.2c14	90 02		bcc $2c18			bcc		_SFNLNoCarry
.2c16	e6 03		inc $03				inc 	codePtr+1
.2c18					_SFNLNoCarry:
.2c18	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2c1a	d0 a7		bne $2bc3			bne		_SFLoop 					; no go round again
.2c1c					_SFError:
.2c1c	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2c1e	20 eb 21	jsr $21eb		jsr	errorHandler
.2c21					_SFFloatSkip:
.2c21	4c 43 14	jmp $1443			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.213c					RSReset:
.213c	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.213e	85 78		sta $78				sta 	rsPointer
.2140	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2142	85 79		sta $79				sta 	1+(rsPointer)
.2144	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2146	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2149	60		rts				rts
.214a					RSClaim:
.214a	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.214c	48		pha				pha 								; save marker on stack.
.214d	8a		txa				txa 								; get bytes required.
.214e	38		sec				sec
.214f	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2151	65 78		adc $78				adc 	rsPointer
.2153	85 78		sta $78				sta 	rsPointer
.2155	a5 79		lda $79				lda 	rsPointer+1
.2157	69 ff		adc #$ff			adc 	#$FF
.2159	85 79		sta $79				sta 	rsPointer+1
.215b	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.215d	90 08		bcc $2167			bcc 	_RSCOverflow
.215f	68		pla				pla 								; get marker back
.2160	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2162	91 78		sta ($78),y			sta 	(rsPointer),y
.2164	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.2166	60		rts				rts
.2167					_RSCOverflow:
.2167	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2169	20 eb 21	jsr $21eb		jsr	errorHandler
.216c					RSFree:
.216c	18		clc				clc
.216d	65 78		adc $78				adc 	rsPointer
.216f	85 78		sta $78				sta 	rsPointer
.2171	90 02		bcc $2175			bcc 	_RSFExit
.2173	e6 79		inc $79				inc 	rsPointer+1
.2175					_RSFExit:
.2175	60		rts				rts
.2176					RSSavePosition:
.2176	84 0c		sty $0c				sty 	tempShort 					; save Y position
.2178	a8		tay				tay 								; this is where we write it.
.2179	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.217b	91 78		sta ($78),y			sta 	(rsPointer),y
.217d	c8		iny				iny
.217e	a5 03		lda $03				lda 	codePtr+1
.2180	91 78		sta ($78),y			sta 	(rsPointer),y
.2182	c8		iny				iny
.2183	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.2185	91 78		sta ($78),y			sta 	(rsPointer),y
.2187	a8		tay				tay 								; fix Y back again to original value
.2188	60		rts				rts
.2189					RSLoadPosition:
.2189	a8		tay				tay
.218a	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.218c	85 02		sta $02				sta 	codePtr
.218e	c8		iny				iny
.218f	b1 78		lda ($78),y			lda 	(rsPointer),y
.2191	85 03		sta $03				sta 	codePtr+1
.2193	c8		iny				iny
.2194	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2196	a8		tay				tay 								; to Y
.2197	60		rts				rts

;******  Return to file: main/main.asm

.2198					mainHandler:
.2198	7c 9b 21	jmp ($219b,x)			jmp 	(mainVectors,x)
.219b					mainVectors:
>219b	22 21					.word CheckRightParen      ; index 0
>219d	af 1a					.word LinkEvaluate         ; index 2
>219f	b5 1a					.word LinkEvaluateInteger  ; index 4
>21a1	bb 1a					.word LinkEvaluateSmallInt ; index 6
>21a3	03 20					.word MLInt32ToString      ; index 8
>21a5	0b 13					.word PrintString          ; index 10

;******  Return to file: basic.asm

.21a7					section_end_main:
.21a7					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.21a7					assemblerHandler:
.21a7	7c aa 21	jmp ($21aa,x)			jmp 	(assemblerVectors,x)
.21aa					assemblerVectors:

;******  Return to file: basic.asm

.21aa					section_end_assembler:
.21aa					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.21aa					IOInitialise:
.21aa	a9 0f		lda #$0f			lda 	#15
.21ac	20 c0 21	jsr $21c0			jsr 	IOPrintChar
.21af	60		rts				rts
.21b0					IONewLine:
.21b0	48		pha				pha
.21b1	a9 0d		lda #$0d			lda 	#13
.21b3	20 c0 21	jsr $21c0			jsr 	IOPrintChar
.21b6	68		pla				pla
.21b7	60		rts				rts
.21b8					IOTab:
.21b8	48		pha				pha
.21b9	a9 20		lda #$20			lda 	#32
.21bb	20 c0 21	jsr $21c0			jsr 	IOPrintChar
.21be	68		pla				pla
.21bf	60		rts				rts
.21c0					IOPrintChar:
.21c0	aa		tax				tax
.21c1	5a		phy				phy
.21c2	8a		txa				txa
.21c3	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.21c6	7a		ply				ply
.21c7	60		rts				rts
.21c8					IOInkey:
.21c8	98		tya				tya
.21c9	48		pha				pha
.21ca	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.21cd	85 0c		sta $0c				sta 	tempShort
.21cf	68		pla				pla
.21d0	a8		tay				tay
.21d1	a5 0c		lda $0c				lda 	tempShort
.21d3	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.21d4					IOReadTimer:
.21d4	20 de ff	jsr $ffde			jsr 	$FFDE
.21d7	48		pha				pha
.21d8	8a		txa				txa
.21d9	a8		tay				tay
.21da	68		pla				pla
.21db	60		rts				rts

;******  Return to file: device/device.asm

.21dc					deviceHandler:
.21dc	7c df 21	jmp ($21df,x)			jmp 	(deviceVectors,x)
.21df					deviceVectors:
>21df	b0 21					.word IONewLine            ; index 0
>21e1	aa 21					.word IOInitialise         ; index 2
>21e3	c8 21					.word IOInkey              ; index 4
>21e5	c0 21					.word IOPrintChar          ; index 6
>21e7	b8 21					.word IOTab                ; index 8
>21e9	d4 21					.word IOReadTimer          ; index 10

;******  Return to file: basic.asm

.21eb					section_end_device:
.21eb					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.21eb					ErrorHandler:
.21eb	a9 54		lda #$54			lda 	#(ErrorTextList) & $FF
.21ed	85 04		sta $04				sta 	temp0
.21ef	a9 22		lda #$22			lda 	#(ErrorTextList) >> 8
.21f1	85 05		sta $05				sta 	1+(temp0)
.21f3	ca		dex		_EHFind:dex
.21f4	f0 10		beq $2206			beq 	_EHFound
.21f6	a0 00		ldy #$00			ldy 	#0 							; goto next text message
.21f8	38		sec				sec
.21f9	a5 04		lda $04				lda 	temp0
.21fb	71 04		adc ($04),y			adc 	(temp0),y
.21fd	85 04		sta $04				sta 	temp0
.21ff	90 f2		bcc $21f3			bcc 	_EHFind
.2201	e6 05		inc $05				inc 	temp0+1
.2203	4c f3 21	jmp $21f3			jmp 	_EHFind
.2206					_EHFound:
.2206	a2 0a		ldx #$0a		ldx	#10
.2208	20 98 21	jsr $2198		jsr	mainHandler
.220b	a0 00		ldy #$00			ldy 	#0 							; in a line ?
.220d	b1 02		lda ($02),y			lda 	(codePtr),y
.220f	f0 0d		beq $221e			beq 	_EHNoLine
.2211	a9 4a		lda #$4a			lda 	#(EHAtMsg) & $FF
.2213	85 04		sta $04				sta 	temp0
.2215	a9 22		lda #$22			lda 	#(EHAtMsg) >> 8
.2217	85 05		sta $05				sta 	1+(temp0)
.2219	a2 0a		ldx #$0a		ldx	#10
.221b	20 98 21	jsr $2198		jsr	mainHandler
.221e					_EHNoLine:
.221e	a0 01		ldy #$01			ldy 	#1
.2220	a2 00		ldx #$00			ldx 	#0
.2222	b1 02		lda ($02),y			lda 	(codePtr),y
.2224	95 48		sta $48,x			sta 	esInt0,x
.2226	c8		iny				iny
.2227	b1 02		lda ($02),y			lda 	(codePtr),y
.2229	95 50		sta $50,x			sta 	esInt1,x
.222b	a9 00		lda #$00			lda 	#0
.222d	95 58		sta $58,x			sta 	esInt2,x
.222f	95 60		sta $60,x			sta 	esInt3,x
.2231	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2233	85 04		sta $04				sta 	temp0
.2235	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2237	85 05		sta $05				sta 	1+(temp0)
.2239	a0 0a		ldy #$0a			ldy 	#10
.223b	a9 00		lda #$00			lda 	#0
.223d	a2 08		ldx #$08		ldx	#8
.223f	20 98 21	jsr $2198		jsr	mainHandler
.2242	a2 0a		ldx #$0a		ldx	#10
.2244	20 98 21	jsr $2198		jsr	mainHandler
.2247	4c 47 22	jmp $2247	_EHHalt:jmp 	_EHHalt
.224a					EHAtMsg:
>224a	09 20 61 74 20 6c 69 6e				.text 	9," at line "
>2252	65 20

;******  Processing file: error/../generated/errortext.inc

.2254					ErrorTextList:
>2254	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>225c	20 6e 6f 74 20 50 72 65 73 65 6e 74
>2268	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>2270	45 72 72 6f 72
>2275	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>227d	64 69 73 61 62 6c 65 64
>2285	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>228d	6f 6e 20 66 61 69 6c 65 64
>2296	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>229e	42 79 20 5a 65 72 6f
>22a5	04 53 74 6f 70				.text 4,"Stop"
>22aa	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>22b2	73 6d 61 74 63 68
>22b8	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>22c0	20 56 61 6c 75 65
>22c6	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>22ce	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>22dc	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>22e4	20 63 6f 6d 6d 61
>22ea	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>22f2	20 72 65 66 65 72 65 6e 63 65
>22fc	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>2304	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>2312	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>231a	74 6f 6f 20 6c 6f 6e 67 2e
>2323	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>232b	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>2338	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>2340	69 74 68 6f 75 74 20 52 45 50 45 41 54
>234d	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>2355	74 68 6f 75 74 20 46 4f 52
>235e	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2366	74 68 6f 75 74 20 57 48 49 4c 45
>2371	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>2379	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>2386	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>238e	54 20 69 6e 64 65 78
>2395	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>239d	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>23ad	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>23b5	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>23c4	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>23cc	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>23dc	63 65 2e
>23df	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>23e7	20 50 72 6f 63 65 64 75 72 65
>23f1	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>23f9	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>2409	2e
>240a	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>2412	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>2420	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>2428	75 69 72 65 73 20 61 72 72 61 79
>2433	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>243b	61 79 20 69 6e 64 65 78 2e
>2444	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2445					section_end_error:
.2445					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2445					ExtensionHandler:
.2445	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.2447	d0 08		bne $2451			bne 	_ExtensionUnary
.2449	b1 02		lda ($02),y			lda 	(codePtr),y
.244b	c8		iny				iny
.244c	0a		asl a				asl 	a
.244d	aa		tax				tax
.244e	7c 4f 24	jmp ($244f,x)			jmp 	(Group2Vectors-12,X)
.2451					_ExtensionUnary:
.2451	48		pha				pha 								; save stack pos in A
.2452	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token
.2454	c8		iny				iny
.2455	0a		asl a				asl 	a
.2456	aa		tax				tax
.2457	68		pla				pla
.2458	7c 53 24	jmp ($2453,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.245b					Group2Vectors:
>245b	6b 24					.word	Command_VPoke            ; $86 vpoke
>245d	6e 24					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.245f					Group3Vectors:
>245f	af 24					.word	Command_VPeek            ; $86 vpeek(
>2461	b2 24					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.2463					XEvaluateInteger:
.2463	8a		txa				txa
.2464	a2 04		ldx #$04		ldx	#4
.2466	20 98 21	jsr $2198		jsr	mainHandler
.2469	aa		tax				tax
.246a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.246b					Command_VPoke:
.246b	38		sec				sec 						; one byte , CS
.246c	b0 01		bcs $246f			bcs 	CmdVideoWrite
.246e					Command_VDoke:
.246e	18		clc				clc 						; two bytes, CC
.246f					CmdVideoWrite:
.246f	08		php				php
.2470	a2 00		ldx #$00			ldx 	#0  				; get address into levels 0,1
.2472	20 63 24	jsr $2463			jsr 	XEvaluateInteger
.2475	20 2f 21	jsr $212f			jsr 	CheckComma
.2478	e8		inx				inx
.2479	20 63 24	jsr $2463			jsr 	XEvaluateInteger
.247c	ca		dex				dex
.247d	20 8e 24	jsr $248e			jsr 	SetUpTOSVRamAddress
.2480	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.2482	8d 23 9f	sta $9f23			sta 	$9F23
.2485	28		plp				plp 						; if it was Poke then exit
.2486	b0 05		bcs $248d			bcs 	_CVWExit
.2488	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.248a	8d 23 9f	sta $9f23			sta 	$9F23
.248d					_CVWExit:
.248d	60		rts				rts
.248e					SetUpTOSVRamAddress:
.248e	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2490	29 01		and #$01			and 	#1
.2492	15 60		ora $60,x			ora 	esInt3,x
.2494	d0 14		bne $24aa			bne 	CVWValue
.2496	b5 48		lda $48,x			lda 	esInt0,x				; set address up
.2498	8d 20 9f	sta $9f20			sta 	$9F20
.249b	b5 50		lda $50,x			lda 	esInt1,x
.249d	8d 21 9f	sta $9f21			sta	 	$9F21
.24a0	b5 58		lda $58,x			lda 	esInt2,x
.24a2	29 01		and #$01			and 	#1
.24a4	09 10		ora #$10			ora 	#$10 				; step 1.
.24a6	8d 22 9f	sta $9f22			sta 	$9F22
.24a9	60		rts				rts
.24aa					CVWValue:
.24aa	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.24ac	20 eb 21	jsr $21eb		jsr	errorHandler
.24af					Command_VPeek:
.24af	38		sec				sec 						; one byte , CS
.24b0	b0 01		bcs $24b3			bcs 	CmdVideoRead
.24b2					Command_VDeek:
.24b2	18		clc				clc 						; two bytes, CC
.24b3					CmdVideoRead:
>24b3	db						.byte 	$DB
.24b4	08		php				php 						; save action on stack.
.24b5	aa		tax				tax 						; save stack position
.24b6	20 63 24	jsr $2463			jsr 	XEvaluateInteger 	; address
.24b9	20 22 21	jsr $2122			jsr 	CheckRightParen 	; closing right bracket.
.24bc	20 8e 24	jsr $248e			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.24bf	a9 00		lda #$00			lda 	#0 					; zero the return value
.24c1	95 60		sta $60,x			sta 	esInt3,x
.24c3	95 58		sta $58,x			sta 	esInt2,x
.24c5	95 50		sta $50,x			sta 	esInt1,x
.24c7	ad 23 9f	lda $9f23			lda 	$9F23
.24ca	95 48		sta $48,x			sta 	esInt0,x
.24cc	28		plp				plp
.24cd	b0 05		bcs $24d4			bcs 	_CVRExit
.24cf	ad 23 9f	lda $9f23			lda 	$9F23
.24d2	95 50		sta $50,x			sta 	esInt1,x
.24d4					_CVRExit:
.24d4	8a		txa				txa 						; return X position.
.24d5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.24d6					section_end_extension:
.24d6					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.24d6					floatingpointHandler:
.24d6	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.24d8	20 eb 21	jsr $21eb		jsr	errorHandler

;******  Return to file: basic.asm

.24db					section_end_floatingpoint:
.24db					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.24db					interactionHandler:
.24db	7c de 24	jmp ($24de,x)			jmp 	(interactionVectors,x)
.24de					interactionVectors:

;******  Return to file: basic.asm

.24de					section_end_interaction:
.24de					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.24de					StringChrs:
.24de	aa		tax				tax 								; set up stack
.24df	a9 02		lda #$02			lda 	#2
.24e1	20 98 25	jsr $2598			jsr 	AllocateSoftString
.24e4	98		tya				tya
.24e5	20 be 25	jsr $25be			jsr 	WriteSoftString
.24e8	20 ed 24	jsr $24ed			jsr 	ReturnSoftString
.24eb	8a		txa				txa
.24ec	60		rts				rts
.24ed					ReturnSoftString:
.24ed	a5 7a		lda $7a				lda 	softMemAlloc
.24ef	95 48		sta $48,x			sta 	esInt0,x
.24f1	a5 7b		lda $7b				lda 	softMemAlloc+1
.24f3	95 50		sta $50,x			sta 	esInt1,x
.24f5	a9 00		lda #$00			lda 	#0
.24f7	95 58		sta $58,x			sta 	esInt2,x
.24f9	95 60		sta $60,x			sta 	esInt3,x
.24fb	a9 40		lda #$40			lda 	#$40
.24fd	95 40		sta $40,x			sta 	esType,x
.24ff	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2500					STRCompare:
.2500	48		pha				pha 								; save A
.2501	aa		tax				tax 								; put stack pos in X
.2502	98		tya				tya
.2503	48		pha				pha
.2504	20 38 25	jsr $2538			jsr 	CopyStringPair
.2507	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2509	b1 04		lda ($04),y			lda 	(temp0),y
.250b	d1 06		cmp ($06),y			cmp 	(temp1),y
.250d	90 02		bcc $2511			bcc 	_SCNotSmaller
.250f	b1 06		lda ($06),y			lda 	(temp1),y
.2511					_SCNotSmaller:
.2511	aa		tax				tax 								; put that in X. We compare this many chars first.
.2512					_SCCompareLoop:
.2512	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2514	f0 0c		beq $2522			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2516	ca		dex				dex 								; decrement chars to compare.
.2517	c8		iny				iny 								; move to next character
.2518	38		sec				sec 								; calculate s1[y]-s2[y]
.2519	b1 04		lda ($04),y			lda 	(temp0),y
.251b	f1 06		sbc ($06),y			sbc 	(temp1),y
.251d	d0 0a		bne $2529			bne 	_SCReturnResult 			; if different return sign of A
.251f	4c 12 25	jmp $2512			jmp 	_SCCompareLoop
.2522					_SCSameToEndShortest
.2522	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2524	38		sec				sec
.2525	b1 04		lda ($04),y			lda 	(temp0),y
.2527	f1 06		sbc ($06),y			sbc 	(temp1),y
.2529					_SCReturnResult:
.2529	08		php				php 								; set return to zero preserving PSW.
.252a	a2 00		ldx #$00			ldx 	#0
.252c	28		plp				plp
.252d	f0 05		beq $2534			beq 	_SCExit 					; two values equal, then exit
.252f	ca		dex				dex 								; X = $FF
.2530	90 02		bcc $2534			bcc 	_SCExit 					; if 1st < 2nd then -1
.2532	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2534					_SCExit:
.2534	68		pla				pla
.2535	a8		tay				tay
.2536	68		pla				pla
.2537	60		rts				rts
.2538					CopyStringPair:
.2538	b5 49		lda $49,x			lda 	esInt0+1,x
.253a	85 06		sta $06				sta 	temp1
.253c	b5 51		lda $51,x			lda 	esInt1+1,x
.253e	85 07		sta $07				sta 	temp1+1
.2540					CopyStringTop:
.2540	b5 48		lda $48,x			lda 	esInt0,x
.2542	85 04		sta $04				sta 	temp0
.2544	b5 50		lda $50,x			lda 	esInt1,x
.2546	85 05		sta $05				sta 	temp0+1
.2548	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2549					StringConcat:
.2549	aa		tax				tax									; stack pos in X
.254a	98		tya				tya
.254b	48		pha				pha
.254c	20 38 25	jsr $2538			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.254f	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2550	a0 00		ldy #$00			ldy 	#0
.2552	b1 04		lda ($04),y			lda 	(temp0),y
.2554	71 06		adc ($06),y			adc 	(temp1),y
.2556	b0 1c		bcs $2574			bcs 	_SCError 					; just too many characters here.
.2558	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.255a	b0 18		bcs $2574			bcs 	_SCError
.255c	20 98 25	jsr $2598			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.255f	20 8f 25	jsr $258f			jsr 	CopySoftToStack 			; copy that to the stack.
.2562	20 79 25	jsr $2579			jsr 	SCCopyTemp0 				; copy temp0
.2565	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.2567	85 04		sta $04				sta 	temp0
.2569	a5 07		lda $07				lda 	temp1+1
.256b	85 05		sta $05				sta 	temp0+1
.256d	20 79 25	jsr $2579			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2570	68		pla				pla
.2571	a8		tay				tay
.2572	8a		txa				txa 								; and A
.2573	60		rts				rts
.2574					_SCError:
.2574	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2576	20 eb 21	jsr $21eb		jsr	errorHandler
.2579					SCCopyTemp0:
.2579	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.257b	b1 04		lda ($04),y			lda 	(temp0),y
.257d	85 08		sta $08				sta 	temp2
.257f					_SCCopyLoop:
.257f	a5 08		lda $08				lda 	temp2 						; done the lot
.2581	f0 0b		beq $258e			beq 	_SCCopyExit
.2583	c6 08		dec $08				dec 	temp2
.2585	c8		iny				iny 								; get next char
.2586	b1 04		lda ($04),y			lda 	(temp0),y
.2588	20 be 25	jsr $25be			jsr 	WriteSoftString 			; write to soft string.
.258b	4c 7f 25	jmp $257f			jmp 	_SCCopyLoop
.258e					_SCCopyExit:
.258e	60		rts				rts
.258f					CopySoftToStack:
.258f	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2591	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2593	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2595	95 50		sta $50,x			sta 	esInt1,x
.2597	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2598					AllocateSoftString:
.2598	85 0c		sta $0c				sta 	tempShort 					; save count
.259a	98		tya				tya
.259b	48		pha				pha
.259c	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.259e	d0 09		bne $25a9			bne 	_ASSDone
.25a0	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.25a2	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.25a4	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.25a6	88		dey				dey
.25a7	84 7b		sty $7b				sty 	softMemAlloc+1
.25a9					_ASSDone:
.25a9	38		sec				sec 								; allocate downwards enough memory
.25aa	a5 7a		lda $7a				lda 	softMemAlloc
.25ac	e5 0c		sbc $0c				sbc 	tempShort
.25ae	85 7a		sta $7a				sta 	softMemAlloc
.25b0	a5 7b		lda $7b				lda 	softMemAlloc+1
.25b2	e9 00		sbc #$00			sbc 	#0
.25b4	85 7b		sta $7b				sta 	softMemAlloc+1
.25b6	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.25b8	a8		tay				tay
.25b9	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.25bb	68		pla				pla
.25bc	a8		tay				tay
.25bd	60		rts				rts
.25be					WriteSoftString:
.25be	84 0c		sty $0c				sty 	tempShort 					; save Y
.25c0	48		pha				pha
.25c1	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.25c3	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.25c5	18		clc				clc
.25c6	69 01		adc #$01			adc 	#1
.25c8	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.25ca	a8		tay				tay 								; pointer in Y
.25cb	68		pla				pla 								; get char and write.
.25cc	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.25ce	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.25d0	60		rts				rts
.25d1					StrClone:
.25d1	aa		tax				tax 								; set up stack.
.25d2	98		tya				tya
.25d3	48		pha				pha
.25d4	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.25d6	b1 04		lda ($04),y			lda 	(temp0),y
.25d8	18		clc				clc
.25d9	69 01		adc #$01			adc 	#1
.25db	20 98 25	jsr $2598			jsr 	AllocateSoftString 			; allocate soft memory
.25de	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.25e0	95 48		sta $48,x			sta 	esInt0,x
.25e2	a5 7b		lda $7b				lda 	softMemAlloc+1
.25e4	95 50		sta $50,x			sta 	esInt1,x
.25e6	a9 00		lda #$00			lda 	#0
.25e8	95 58		sta $58,x			sta 	esInt2,x
.25ea	95 60		sta $60,x			sta 	esInt3,x
.25ec	a9 40		lda #$40			lda 	#$40 						; set type to string.
.25ee	95 40		sta $40,x			sta 	esType,x
.25f0	20 79 25	jsr $2579			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.25f3	68		pla				pla
.25f4	a8		tay				tay
.25f5	8a		txa				txa
.25f6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.25f7					CaseString:
.25f7	48		pha				pha 								; save A and copy to X
.25f8	aa		tax				tax
.25f9	98		tya				tya
.25fa	48		pha				pha
.25fb	20 3c 11	jsr $113c			jsr 	TOSToTemp0 					; target string -> temp0
.25fe	a0 00		ldy #$00			ldy 	#0
.2600	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.2602	18		clc				clc
.2603	69 01		adc #$01			adc 	#1 							; one more for length byte
.2605	20 98 25	jsr $2598			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2608	20 8f 25	jsr $258f			jsr 	CopySoftToStack 			; copy that to the stack.
.260b	a0 00		ldy #$00			ldy 	#0
.260d	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.260f	aa		tax				tax
.2610					_CSCopy:
.2610	e0 00		cpx #$00			cpx 	#0
.2612	f0 24		beq $2638			beq 	_CSExit
.2614	ca		dex				dex
.2615	c8		iny				iny
.2616	68		pla				pla 								; check direction
.2617	48		pha				pha
.2618	f0 0c		beq $2626			beq 	_CSUpper
.261a	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.261c	c9 41		cmp #$41			cmp 	#"A"
.261e	90 12		bcc $2632			bcc 	_CSWrite
.2620	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2622	b0 0e		bcs $2632			bcs 	_CSWrite
.2624	90 0a		bcc $2630			bcc 	_CSFlipWrite
.2626					_CSUpper:
.2626	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.2628	c9 61		cmp #$61			cmp 	#"a"
.262a	90 06		bcc $2632			bcc 	_CSWrite
.262c	c9 7b		cmp #$7b			cmp 	#"z"+1
.262e	b0 02		bcs $2632			bcs 	_CSWrite
.2630					_CSFlipWrite:
.2630	49 20		eor #$20			eor 	#"A"^"a"
.2632					_CSWrite:
.2632	20 be 25	jsr $25be			jsr 	WriteSoftString
.2635	4c 10 26	jmp $2610			jmp 	_CSCopy
.2638					_CSExit:
.2638	68		pla				pla
.2639	a8		tay				tay
.263a	68		pla				pla
.263b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.263c					StringSubstring:
.263c	48		pha				pha
.263d	aa		tax				tax 								; access stack.
.263e	98		tya				tya
.263f	48		pha				pha
.2640	20 40 25	jsr $2540			jsr 	CopyStringTop 				; point temp0 to the string.
.2643	a0 00		ldy #$00			ldy 	#0 							; get length.
.2645	b1 04		lda ($04),y			lda 	(temp0),Y
.2647	85 06		sta $06				sta 	temp1
.2649	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.264b	c5 06		cmp $06				cmp 	temp1 						;
.264d	f0 02		beq $2651			beq 	_SSBOkay
.264f	b0 2a		bcs $267b			bcs 	_SSBReturnNull
.2651					_SSBOkay:
.2651	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2653	18		clc				clc
.2654	69 01		adc #$01			adc 	#1
.2656	38		sec				sec
.2657	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.2659	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.265b	90 02		bcc $265f			bcc		_SSBTrunc
.265d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.265f					_SSBTrunc:
.265f	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2661	18		clc				clc
.2662	69 01		adc #$01			adc 	#1 							; add 1
.2664	20 98 25	jsr $2598			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2667	20 8f 25	jsr $258f			jsr 	CopySoftToStack 			; copy that to the stack.
.266a	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.266c					_SSBCopyLoop:
.266c	a5 07		lda $07				lda 	temp1+1 					; done them all
.266e	f0 0e		beq $267e			beq 	_SSBExit
.2670	c6 07		dec $07				dec 	temp1+1
.2672	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2674	20 be 25	jsr $25be			jsr 	WriteSoftString
.2677	c8		iny				iny
.2678	4c 6c 26	jmp $266c			jmp 	_SSBCopyLoop
.267b					_SSBReturnNull:
.267b	20 82 26	jsr $2682			jsr 	ReturnNull
.267e					_SSBExit:
.267e	68		pla				pla
.267f	a8		tay				tay
.2680	68		pla				pla
.2681	60		rts				rts
.2682					ReturnNull:
.2682	a9 00		lda #$00			lda 	#0 							; clear null string
.2684	8d cc 0a	sta $0acc			sta 	NullString
.2687	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.2689	95 48		sta $48,x			sta 	esInt0,x
.268b	a9 0a		lda #$0a			lda 	#NullString >> 8
.268d	95 50		sta $50,x			sta 	esInt1,x
.268f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0aff					srcStrLen:
>0aff							.fill 	1
.2690					StringWrite:
.2690	aa		tax				tax
.2691	48		pha				pha
.2692	98		tya				tya
.2693	48		pha				pha
.2694	20 bb 26	jsr $26bb			jsr 	CheckOverwriteCurrent
.2697	b0 0d		bcs $26a6			bcs		_SWCopyCurrent
.2699	20 f9 26	jsr $26f9			jsr 	RequiresConcretion
.269c	90 0e		bcc $26ac			bcc 	_SWWriteReference
.269e	20 5c 27	jsr $275c			jsr 	CheckSpecialConcretion
.26a1	b0 09		bcs $26ac			bcs 	_SWWriteReference
.26a3	20 0d 27	jsr $270d			jsr 	AllocateHardMemory
.26a6					_SWCopyCurrent:
.26a6	20 40 27	jsr $2740			jsr 	CopyStringToHardMemory
.26a9	4c b7 26	jmp $26b7			jmp 	_SWExit
.26ac					_SWWriteReference
.26ac	a0 00		ldy #$00			ldy 	#0
.26ae	a5 04		lda $04				lda 	temp0
.26b0	91 06		sta ($06),y			sta 	(temp1),y
.26b2	c8		iny				iny
.26b3	a5 05		lda $05				lda 	temp0+1
.26b5	91 06		sta ($06),y			sta 	(temp1),y
.26b7					_SWExit:
.26b7	68		pla				pla
.26b8	a8		tay				tay
.26b9	68		pla				pla
.26ba	60		rts				rts
.26bb					CheckOverwriteCurrent:
.26bb	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.26bd	b5 51		lda $51,x			lda 	esInt1+1,x
.26bf	85 05		sta $05				sta 	temp0+1
.26c1	b5 49		lda $49,x			lda 	esInt0+1,x
.26c3	85 04		sta $04				sta 	temp0
.26c5	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.26c7	8d ff 0a	sta $0aff			sta 	srcStrLen
.26ca	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.26cc	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.26ce	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.26d0	85 07		sta $07				sta 	temp1+1
.26d2	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.26d4	b1 06		lda ($06),y			lda 	(temp1),y
.26d6	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.26d8	90 1b		bcc $26f5			bcc 	_COCFail 				; in hard memory.
.26da	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.26dc	b1 06		lda ($06),y			lda 	(temp1),y
.26de	e9 01		sbc #$01			sbc 	#1
.26e0	85 08		sta $08				sta 	temp2
.26e2	c8		iny				iny
.26e3	b1 06		lda ($06),y			lda 	(temp1),y
.26e5	e9 00		sbc #$00			sbc 	#0
.26e7	85 09		sta $09				sta 	temp2+1
.26e9	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.26eb	b1 08		lda ($08),y			lda 	(temp2),y
.26ed	38		sec				sec  							; maximum character capacity.
.26ee	e9 02		sbc #$02			sbc 	#2
.26f0	cd ff 0a	cmp $0aff			cmp 	srcStrLen 				; if >= the required length
.26f3	b0 02		bcs $26f7			bcs 	_COCCanReuse
.26f5					_COCFail:
.26f5	18		clc				clc
.26f6	60		rts				rts
.26f7					_COCCanReuse:
.26f7	38		sec				sec
.26f8	60		rts				rts
.26f9					RequiresConcretion:
.26f9	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.26fb	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.26fd	b0 0a		bcs $2709			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.26ff	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2701	f0 08		beq $270b			beq 	_RCFail 				; if not, this cannot be soft memory.
.2703	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2705	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2707	90 02		bcc $270b			bcc 	_RCFail 				; so concreting
.2709					_RCSucceed:
.2709	38		sec				sec
.270a	60		rts				rts
.270b					_RCFail:
.270b	18		clc				clc
.270c	60		rts				rts
.270d					AllocateHardMemory:
.270d	98		tya				tya
.270e	48		pha				pha
.270f	ad ff 0a	lda $0aff			lda 	srcStrLen 				; characters in string
.2712	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2714	b0 04		bcs $271a			bcs 	_AHMSetMax 				; max out that amount.
.2716	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2718	90 02		bcc $271c			bcc 	_AHMIsOkay
.271a					_AHMSetMax:
.271a	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.271c					_AHMIsOkay:
.271c	48		pha				pha
.271d	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.271f	38		sec				sec  							; and copy result to TOS as target address.
.2720	65 0d		adc $0d				adc 	highMemory
.2722	85 0d		sta $0d				sta 	highMemory
.2724	a5 0e		lda $0e				lda 	highMemory+1
.2726	69 ff		adc #$ff			adc 	#$FF
.2728	85 0e		sta $0e				sta 	highMemory+1
.272a	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.272c	68		pla				pla 							; get the total size of the storage block
.272d	91 0d		sta ($0d),y			sta 	(highMemory),y
.272f	18		clc				clc
.2730	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2732	69 01		adc #$01			adc 	#1
.2734	91 06		sta ($06),y			sta 	(temp1),y
.2736	a5 0e		lda $0e				lda 	highMemory+1
.2738	69 00		adc #$00			adc 	#0
.273a	c8		iny				iny
.273b	91 06		sta ($06),y			sta 	(temp1),y
.273d	68		pla				pla
.273e	a8		tay				tay
.273f	60		rts				rts
.2740					CopyStringToHardMemory:
.2740	98		tya				tya
.2741	48		pha				pha
.2742	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2744	b1 06		lda ($06),y			lda 	(temp1),y
.2746	85 08		sta $08				sta 	temp2
.2748	c8		iny				iny
.2749	b1 06		lda ($06),y			lda 	(temp1),y
.274b	85 09		sta $09				sta 	temp2+1
.274d	ac ff 0a	ldy $0aff			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2750					_CSTHMLoop:
.2750	b1 04		lda ($04),y			lda 	(temp0),y
.2752	91 08		sta ($08),y			sta 	(temp2),y
.2754	88		dey				dey
.2755	c0 ff		cpy #$ff			cpy 	#$FF
.2757	d0 f7		bne $2750			bne 	_CSTHMLoop
.2759	68		pla				pla
.275a	a8		tay				tay
.275b	60		rts				rts
.275c					CheckSpecialConcretion:
.275c	ad ff 0a	lda $0aff			lda 	srcStrLen 				; check string is null.
.275f	f0 02		beq $2763			beq 	_CSCNullString
.2761	18		clc				clc
.2762	60		rts				rts
.2763					_CSCNullString:
.2763	a9 00		lda #$00			lda 	#0
.2765	8d cc 0a	sta $0acc			sta 	NullString
.2768	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.276a	85 04		sta $04				sta 	temp0
.276c	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.276e	85 05		sta $05				sta 	1+(temp0)
.2770	38		sec				sec
.2771	60		rts				rts

;******  Return to file: string/string.asm

.2772					stringHandler:
.2772	7c 75 27	jmp ($2775,x)			jmp 	(stringVectors,x)
.2775					stringVectors:
>2775	de 24					.word StringChrs           ; index 0
>2777	d1 25					.word StrClone             ; index 2
>2779	49 25					.word StringConcat         ; index 4
>277b	00 25					.word STRCompare           ; index 6
>277d	f7 25					.word CaseString           ; index 8
>277f	3c 26					.word StringSubstring      ; index 10
>2781	90 26					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2783					section_end_string:
.2783					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.2783					tokeniserHandler:
.2783	7c 86 27	jmp ($2786,x)			jmp 	(tokeniserVectors,x)
.2786					tokeniserVectors:

;******  Return to file: basic.asm

.2786					section_end_tokeniser:
.2786					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0b00					varHash:
>0b00							.fill	1
.0b01					varType:
>0b01							.fill 	1
.0b02					varEnd:
>0b02							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2786					AccessVariable:
.2786	aa		tax				tax 								; stack in X
.2787	c8		iny				iny
.2788	b1 02		lda ($02),y			lda 	(codePtr),y
.278a	88		dey				dey
.278b	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.278d	d0 15		bne $27a4			bne 	_AVLong
.278f	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2791	38		sec				sec 	 							; make it 0-25
.2792	e9 01		sbc #$01			sbc 	#1
.2794	0a		asl a				asl 	a 							; x 4 is LSB of address
.2795	0a		asl a				asl 	a
.2796	95 48		sta $48,x			sta 	esInt0,x
.2798	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.279a	95 50		sta $50,x			sta 	esInt1,x
.279c	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.279e	95 40		sta $40,x			sta 	esType,x
.27a0	c8		iny				iny 								; skip over the variable reference in the code.
.27a1	c8		iny				iny
.27a2	8a		txa				txa 								; stack in A to return.
.27a3	60		rts				rts
.27a4					_AVLong:
.27a4	8a		txa				txa
.27a5	48		pha				pha
.27a6	20 ed 27	jsr $27ed			jsr 	AccessSetup 				; set up the basic stuff.
.27a9	20 e1 29	jsr $29e1			jsr 	FindVariable 				; does the variable exist already
.27ac	b0 0e		bcs $27bc			bcs 	_AVFound
.27ae	ad 01 0b	lda $0b01			lda 	varType 					; is the variable type an array
.27b1	4a		lsr a				lsr 	a
.27b2	90 05		bcc $27b9			bcc 	_AVCanCreate
.27b4	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.27b6	20 eb 21	jsr $21eb		jsr	errorHandler
.27b9					_AVCanCreate:
.27b9	20 a0 28	jsr $28a0			jsr 	CreateVariable 				; no, create it.
.27bc					_AVFound:
.27bc	68		pla				pla
.27bd	aa		tax				tax
.27be	18		clc				clc 								; copy temp0 (variable record address)
.27bf	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.27c1	69 05		adc #$05			adc 	#5
.27c3	95 48		sta $48,x			sta 	esInt0,x
.27c5	a5 05		lda $05				lda 	temp0+1
.27c7	69 00		adc #$00			adc 	#0
.27c9	95 50		sta $50,x			sta 	esInt1,x
.27cb	a9 00		lda #$00			lda 	#0
.27cd	95 58		sta $58,x			sta 	esInt2,x
.27cf	95 60		sta $60,x			sta 	esInt3,x
.27d1	ac 01 0b	ldy $0b01			ldy 	varType 					; get the type ID from the type.
.27d4	b9 ad 27	lda $27ad,y			lda 	_AVTypeTable-$3A,y
.27d7	95 40		sta $40,x			sta 	esType,x
.27d9	ac 02 0b	ldy $0b02			ldy 	varEnd 						; restore Y
.27dc	ad 01 0b	lda $0b01			lda 	VarType 					; get variable type, put LSB into C
.27df	4a		lsr a				lsr 	a
.27e0	90 03		bcc $27e5			bcc 	_AVNotArray
.27e2	20 2a 28	jsr $282a			jsr 	AccessArray 				; array lookup. if LSB was set.
.27e5					_AVNotArray:
.27e5	8a		txa				txa 								; return stack in A and return
.27e6	60		rts				rts
.27e7					_AVTypeTable:
>27e7	80 80						.byte 	$80,$80						; integer
>27e9	c0 c0						.byte 	$C0,$C0 					; string
>27eb	81 81						.byte 	$81,$81 					; float
.27ed					AccessSetup:
.27ed	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.27ef	8d 00 0b	sta $0b00			sta 	varHash
.27f2	98		tya				tya
.27f3	48		pha				pha
.27f4	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.27f6	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.27f8	b0 0b		bcs $2805			bcs 	_ASComplete
.27fa	18		clc				clc 								; add to the hash. Might improve this.
.27fb	6d 00 0b	adc $0b00			adc 	varHash
.27fe	8d 00 0b	sta $0b00			sta 	varHash
.2801	c8		iny				iny 								; next character
.2802	4c f4 27	jmp $27f4			jmp 	_ASLoop
.2805					_ASComplete:
.2805	8d 01 0b	sta $0b01			sta 	varType 					; save variable type byte
.2808	c8		iny				iny
.2809	8c 02 0b	sty $0b02			sty 	varEnd 						; save the ending position.
.280c	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.280d	e9 3a		sbc #$3a			sbc 	#$3A
.280f	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.2810	0a		asl a				asl 	a
.2811	0a		asl a				asl 	a
.2812	0a		asl a				asl 	a 							; 2 bytes/word
.2813	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2815	ad 00 0b	lda $0b00			lda 	varHash 					; get hash
.2818	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.281a	0a		asl a				asl  	a 							; x 2 (for word) and CC
.281b	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.281d	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.281f	85 7c		sta $7c				sta 	hashList
.2821	a9 0a		lda #$0a			lda 	#hashTables >> 8
.2823	69 00		adc #$00			adc 	#0
.2825	85 7d		sta $7d				sta 	hashList+1
.2827	68		pla				pla
.2828	a8		tay				tay
.2829	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.282a					AccessArray:
.282a	e8		inx				inx
.282b	8a		txa				txa
.282c	a2 04		ldx #$04		ldx	#4
.282e	20 98 21	jsr $2198		jsr	mainHandler
.2831	aa		tax				tax
.2832	ca		dex				dex
.2833	a2 00		ldx #$00		ldx	#0
.2835	20 98 21	jsr $2198		jsr	mainHandler
.2838	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.283a	15 59		ora $59,x			ora 	esInt2+1,x
.283c	d0 33		bne $2871			bne 	_AABadIndex
.283e	98		tya				tya
.283f	48		pha				pha
.2840	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.2842	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.2844	b5 50		lda $50,x			lda 	esInt1,x
.2846	85 05		sta $05				sta 	temp0+1
.2848	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.284a	b5 49		lda $49,x			lda 	esInt0+1,x
.284c	d1 04		cmp ($04),y			cmp 	(temp0),y
.284e	c8		iny				iny
.284f	b5 51		lda $51,x			lda 	esInt1+1,x
.2851	f1 04		sbc ($04),y			sbc 	(temp0),y
.2853	b0 1c		bcs $2871			bcs 	_AABadIndex 				; if >= then fail.
.2855	e8		inx				inx 								; point to index
.2856	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.2858	b1 04		lda ($04),y			lda 	(temp0),y
.285a	20 76 28	jsr $2876			jsr 	MultiplyTOSByA 				; specialist multiplier.
.285d	ca		dex				dex
.285e	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.2860	18		clc				clc
.2861	b5 49		lda $49,x			lda 	esInt0+1,x
.2863	71 04		adc ($04),y			adc 	(temp0),y
.2865	95 48		sta $48,x			sta 	esInt0,x
.2867	b5 51		lda $51,x			lda 	esInt1+1,x
.2869	c8		iny				iny
.286a	71 04		adc ($04),y			adc 	(temp0),y
.286c	95 50		sta $50,x			sta 	esInt1,x
.286e	68		pla				pla
.286f	a8		tay				tay
.2870	60		rts				rts
.2871					_AABadIndex:
.2871	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.2873	20 eb 21	jsr $21eb		jsr	errorHandler
.2876					MultiplyTOSByA:
.2876	48		pha				pha
.2877	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.2879	85 06		sta $06				sta 	temp1
.287b	b5 50		lda $50,x			lda 	esInt1,x
.287d	85 07		sta $07				sta 	temp1+1
.287f	68		pla				pla
.2880	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.2882	36 50		rol $50,x			rol 	esInt1,x
.2884	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.2886	f0 17		beq $289f			beq 	_MTBAExit
.2888	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.288a	d0 0f		bne $289b			bne 	_MTBANotFloat
.288c	48		pha				pha
.288d	18		clc				clc 								; so this will make it x 3
.288e	b5 48		lda $48,x			lda 	esInt0,x
.2890	65 06		adc $06				adc 	temp1
.2892	95 48		sta $48,x			sta 	esInt0,x
.2894	b5 50		lda $50,x			lda 	esInt1,x
.2896	65 07		adc $07				adc 	temp1+1
.2898	95 50		sta $50,x			sta 	esInt1,x
.289a	68		pla				pla
.289b					_MTBANotFloat:
.289b	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.289d	36 50		rol $50,x			rol 	esInt1,x
.289f					_MTBAExit:
.289f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.28a0					CreateVariable:
.28a0	98		tya				tya 								; push Y on the stack twice.
.28a1	48		pha				pha
.28a2	48		pha				pha
.28a3	ae 01 0b	ldx $0b01			ldx 	varType 					; get var type 0-5
.28a6	bd b1 28	lda $28b1,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.28a9	48		pha				pha 								; save length
.28aa	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.28ac	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.28ae	a5 10		lda $10				lda 	lowMemory+1
.28b0	85 05		sta $05				sta 	temp0+1
.28b2	68		pla				pla 								; get length
.28b3	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.28b6	ad 00 0b	lda $0b00			lda 	varHash 					; store hash at offset 4.
.28b9	a0 04		ldy #$04			ldy 	#4
.28bb	91 04		sta ($04),y			sta 	(temp0),y
.28bd	68		pla				pla 								; offset, work out where the variable name is.
.28be	18		clc				clc
.28bf	65 02		adc $02				adc 	codePtr
.28c1	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.28c3	91 04		sta ($04),y			sta 	(temp0),y
.28c5	a5 03		lda $03				lda 	codePtr+1
.28c7	69 00		adc #$00			adc 	#0
.28c9	c8		iny				iny
.28ca	91 04		sta ($04),y			sta 	(temp0),y
.28cc	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.28ce	b1 7c		lda ($7c),y			lda 	(hashList),y
.28d0	91 04		sta ($04),y			sta 	(temp0),y
.28d2	c8		iny				iny
.28d3	b1 7c		lda ($7c),y			lda 	(hashList),y
.28d5	91 04		sta ($04),y			sta 	(temp0),y
.28d7	a5 05		lda $05				lda 	temp0+1 					; set new link
.28d9	91 7c		sta ($7c),y			sta 	(hashList),y
.28db	88		dey				dey
.28dc	a5 04		lda $04				lda 	temp0
.28de	91 7c		sta ($7c),y			sta 	(hashList),y
.28e0	ad 01 0b	lda $0b01			lda 	varType 					; type in A
.28e3	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.28e5	20 f1 28	jsr $28f1			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.28e8	68		pla				pla
.28e9	a8		tay				tay
.28ea	60		rts				rts
>28eb	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>28ed	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>28ef	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.28f1					ZeroTemp0Y:
.28f1	4a		lsr a				lsr 	a 							; bit 0 in carry
.28f2	0a		asl a				asl 	a
.28f3	b0 19		bcs $290e			bcs 	_ZTExit 					; we don't initialise arrays.
.28f5	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.28f7	f0 16		beq $290f			beq 	_ZTWriteNullString 			; write "" string
.28f9	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.28fb	f0 22		beq $291f			beq 	_ZTWriteFloat
.28fd	98		tya				tya
.28fe	48		pha				pha
.28ff	a9 00		lda #$00			lda 	#0
.2901	91 04		sta ($04),y			sta 	(temp0),y
.2903	c8		iny				iny
.2904	91 04		sta ($04),y			sta 	(temp0),y
.2906	c8		iny				iny
.2907	91 04		sta ($04),y			sta 	(temp0),y
.2909	c8		iny				iny
.290a	91 04		sta ($04),y			sta 	(temp0),y
.290c	68		pla				pla
.290d	a8		tay				tay
.290e					_ZTExit:
.290e	60		rts				rts
.290f					_ZTWriteNullString:
.290f	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.2911	8d cc 0a	sta $0acc			sta 	NullString
.2914	a9 cc		lda #$cc			lda 	#NullString & $FF
.2916	91 04		sta ($04),y			sta 	(temp0),y
.2918	a9 0a		lda #$0a			lda 	#NullString >> 8
.291a	c8		iny				iny
.291b	91 04		sta ($04),y			sta 	(temp0),y
.291d	88		dey				dey
.291e	60		rts				rts
.291f					_ZTWriteFloat:
.291f	8a		txa				txa
.2920	48		pha				pha
.2921	a2 1e		ldx #$1e		ldx	#30
.2923	20 d6 24	jsr $24d6		jsr	floatingpointHandler
.2926	68		pla				pla
.2927	aa		tax				tax
.2928	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.2929					CreateArray:
.2929	20 ed 27	jsr $27ed			jsr 	AccessSetup 				; set up the basic stuff.
.292c	ad 01 0b	lda $0b01			lda 	varType 					; is the variable type an array
.292f	4a		lsr a				lsr 	a
.2930	90 3f		bcc $2971			bcc 	_CANotArray 				; no, cause an error.
.2932	20 e1 29	jsr $29e1			jsr 	FindVariable 				; does the variable exist already
.2935	b0 35		bcs $296c			bcs 	_CAFound 					; cannot redefine it.
.2937	20 a0 28	jsr $28a0			jsr 	CreateVariable 				; create the variable entry.
.293a	ac 02 0b	ldy $0b02			ldy 	varEnd 						; point Y to the end of the variable entry.
.293d	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.293f	48		pha				pha
.2940	a5 05		lda $05				lda 	temp0+1
.2942	48		pha				pha
.2943	ad 01 0b	lda $0b01			lda 	varType 					; push variable type on the stack.
.2946	48		pha				pha
.2947	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.2949	a2 04		ldx #$04		ldx	#4
.294b	20 98 21	jsr $2198		jsr	mainHandler
.294e	a2 00		ldx #$00		ldx	#0
.2950	20 98 21	jsr $2198		jsr	mainHandler
.2953	68		pla				pla 		 						; restore type and position.
.2954	8d 01 0b	sta $0b01			sta 	varType
.2957	68		pla				pla
.2958	85 05		sta $05				sta 	temp0+1
.295a	68		pla				pla
.295b	85 04		sta $04				sta 	temp0
.295d	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.295f	29 e0		and #$e0			and 	#$E0
.2961	05 58		ora $58				ora 	esInt2
.2963	05 60		ora $60				ora 	esInt3
.2965	f0 0f		beq $2976			beq 	_CASizeOk
.2967					_CASize:
.2967	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2969	20 eb 21	jsr $21eb		jsr	errorHandler
.296c					_CAFound:
.296c	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.296e	20 eb 21	jsr $21eb		jsr	errorHandler
.2971					_CANotArray:
.2971	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.2973	20 eb 21	jsr $21eb		jsr	errorHandler
.2976					_CASizeOk:
.2976	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.2978	d0 02		bne $297c			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.297a	e6 49		inc $49				inc 	esInt0+1
.297c					_CANoCarry:
.297c	98		tya				tya
.297d	48		pha				pha
.297e	a0 05		ldy #$05			ldy 	#5
.2980	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.2982	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.2984	c8		iny				iny
.2985	a5 10		lda $10				lda 	lowMemory+1
.2987	91 04		sta ($04),y			sta 	(temp0),y
.2989	c8		iny				iny
.298a	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.298c	91 04		sta ($04),y			sta 	(temp0),y
.298e	c8		iny				iny
.298f	a5 50		lda $50				lda 	esInt1
.2991	91 04		sta ($04),y			sta 	(temp0),y
.2993	c8		iny				iny
.2994	ae 01 0b	ldx $0b01			ldx 	varType 					; get the length per element
.2997	bd 9f 29	lda $299f,x			lda 	_CAActualSize-$3A-1,x
.299a	91 04		sta ($04),y			sta 	(temp0),y
.299c	aa		tax				tax 								; save size in X
.299d	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.299f	85 04		sta $04				sta 	temp0
.29a1	a5 10		lda $10				lda 	lowMemory+1
.29a3	85 05		sta $05				sta 	temp0+1
.29a5	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.29a7	85 06		sta $06				sta 	temp1
.29a9	85 07		sta $07				sta 	temp1+1
.29ab					_CAInitialiseArray:
.29ab	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.29ad	ad 01 0b	lda $0b01			lda 	varType 					; base type of array in A.
.29b0	29 fe		and #$fe			and 	#$FE
.29b2	20 f1 28	jsr $28f1			jsr 	ZeroTemp0Y
.29b5	8a		txa				txa 								; add X to temp0, also updating lowMemory
.29b6	18		clc				clc
.29b7	65 04		adc $04				adc 	temp0
.29b9	85 04		sta $04				sta 	temp0
.29bb	85 0f		sta $0f				sta 	lowMemory
.29bd	a5 05		lda $05				lda 	temp0+1
.29bf	69 00		adc #$00			adc 	#0
.29c1	85 05		sta $05				sta 	temp0+1
.29c3	85 10		sta $10				sta 	lowMemory+1
.29c5	e6 06		inc $06				inc 	temp1 						; bump the counter.
.29c7	d0 02		bne $29cb			bne 	_CAIANoCarry
.29c9	e6 07		inc $07				inc 	temp1+1
.29cb					_CAIANoCarry:
.29cb	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.29cd	c5 06		cmp $06				cmp 	temp1
.29cf	d0 da		bne $29ab			bne 	_CAInitialiseArray
.29d1	a5 50		lda $50				lda 	esInt1
.29d3	c5 07		cmp $07				cmp 	temp1+1
.29d5	d0 d4		bne $29ab			bne 	_CAInitialiseArray
.29d7	68		pla				pla
.29d8	a8		tay				tay
.29d9	60		rts				rts
.29da					_CAActualSize:
>29da	04 00						.byte 	VarISize,0
>29dc	02 00						.byte 	VarSSize,0
>29de	06 00						.byte 	VarFSize,0
>29e0	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.29e1					FindVariable:
.29e1	98		tya				tya
.29e2	48		pha				pha
.29e3	98		tya				tya 								; point temp2 to the actual name.
.29e4	18		clc				clc
.29e5	65 02		adc $02				adc 	codePtr
.29e7	85 08		sta $08				sta 	temp2
.29e9	a5 03		lda $03				lda 	codePtr+1
.29eb	69 00		adc #$00			adc 	#0
.29ed	85 09		sta $09				sta 	temp2+1
.29ef	a0 00		ldy #$00			ldy 	#0
.29f1	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.29f3	85 04		sta $04				sta 	temp0
.29f5	a5 7d		lda $7d				lda 	hashList+1
.29f7	85 05		sta $05				sta 	temp0+1
.29f9	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.29fb	b1 04		lda ($04),y			lda 	(temp0),y
.29fd	f0 2c		beq $2a2b			beq 	_FVFail
.29ff	aa		tax				tax
.2a00	88		dey				dey		 							; get LSB
.2a01	b1 04		lda ($04),y			lda 	(temp0),y
.2a03	85 04		sta $04				sta 	temp0 						; update pointer.
.2a05	86 05		stx $05				stx 	temp0+1
.2a07	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2a09	b1 04		lda ($04),y			lda 	(temp0),y
.2a0b	cd 00 0b	cmp $0b00			cmp 	varHash
.2a0e	d0 e9		bne $29f9			bne 	_FVNext 					; if not, no point in checking the name.
.2a10	88		dey				dey 								; copy name pointer to temp1.
.2a11	b1 04		lda ($04),y			lda 	(temp0),y
.2a13	85 07		sta $07				sta 	temp1+1
.2a15	88		dey				dey
.2a16	b1 04		lda ($04),y			lda 	(temp0),y
.2a18	85 06		sta $06				sta 	temp1
.2a1a	a0 00		ldy #$00			ldy 	#0
.2a1c					_FVCheck:
.2a1c	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2a1e	d1 08		cmp ($08),y			cmp 	(temp2),y
.2a20	d0 d7		bne $29f9			bne 	_FVNext		 				; fail if different.
.2a22	c8		iny				iny
.2a23	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2a25	90 f5		bcc $2a1c			bcc 	_FVCheck
.2a27	68		pla				pla
.2a28	a8		tay				tay
.2a29	38		sec				sec
.2a2a	60		rts				rts
.2a2b					_FVFail:
.2a2b	68		pla				pla
.2a2c	a8		tay				tay
.2a2d	18		clc				clc
.2a2e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2a2f					HashTableReset:
.2a2f	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2a31	a9 00		lda #$00			lda 	#0
.2a33					_HTRClear:
.2a33	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2a36	ca		dex				dex
.2a37	d0 fa		bne $2a33			bne 	_HTRClear
.2a39	60		rts				rts

;******  Return to file: variable/variable.asm

.2a3a					variableHandler:
.2a3a	7c 3d 2a	jmp ($2a3d,x)			jmp 	(variableVectors,x)
.2a3d					variableVectors:
>2a3d	86 27					.word AccessVariable       ; index 0
>2a3f	29 29					.word CreateArray          ; index 2
>2a41	2f 2a					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.2a43					section_end_variable:

;******  End of listing
