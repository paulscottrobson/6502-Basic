
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Apr  5 10:51:29 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_TEXT                     = $8f ; text
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	19 45						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4d		lda #$4d			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 ec 26	jsr $26ec		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 ec 26	jsr $26ec		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 47 40	jsr $4047		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 cb 48	jsr $48cb		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 9c 4c	jsr $4c9c		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 cb 48	jsr $48cb		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 8a 3d	jsr $3d8a		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 8a 3d	jsr $3d8a		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 8a 3d	jsr $3d8a		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 9c 4c	jsr $4c9c		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 8a 3d	jsr $3d8a		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 ec 26	jsr $26ec		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 94 18	jmp ($1894,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c 6b 22	jmp $226b			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	99 23					.word	Command_VPoke            ; $86 vpoke
>1888	9c 23					.word	Command_VDoke            ; $87 vdoke
>188a	71 23					.word	Command_VLoad            ; $88 vload
>188c	7d 22					.word	CommandMode              ; $89 mode
>188e	3a 23					.word	CommandPalette           ; $8a palette
>1890	b5 1f					.word	CommandSprite            ; $8b sprite
>1892	cb 1d					.word	CommandClg               ; $8c clg
>1894	c2 1a					.word	Command_Rect             ; $8d rect
>1896	ca 1a					.word	Command_Frame            ; $8e frame
>1898	30 31					.word	Unimplemented            ; $8f text
>189a	af 1a					.word	Command_Plot             ; $90 plot
>189c	89 19					.word	Command_Line             ; $91 line
>189e	00 21					.word	Command_Paint            ; $92 paint

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a0					Group3Vectors:
>18a0	e5 23					.word	Command_VPeek            ; $86 vpeek(
>18a2	e8 23					.word	Command_VDeek            ; $87 vdeek(
>18a4	3b 22					.word	Sprite_GetX              ; $88 sprite.x(
>18a6	3e 22					.word	Sprite_GetY              ; $89 sprite.y(
>18a8	f8 1e					.word	FunctionCollide          ; $8a hit(
>18aa	70 1e					.word	Unary_JoyX               ; $8b joy.x(
>18ac	73 1e					.word	Unary_JoyY               ; $8c joy.y(
>18ae	ae 1e					.word	Unary_JButton            ; $8d joy.b(
>18b0	43 1e					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b2					XEvaluateInteger:
.18b2	8a		txa				txa
.18b3	a2 0a		ldx #$0a		ldx	#10
.18b5	20 8a 3d	jsr $3d8a		jsr	mainHandler
.18b8	aa		tax				tax
.18b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gModifiers:
.0bfc					gdInk:
>0bfc							.fill 	1
.0bfd					gdPaper:
>0bfd							.fill 	1
.0bfe					gdSize:
>0bfe							.fill 	1
.0bff					gdImage:
>0bff							.fill 	1
.0c00					gdFlip:
>0c00							.fill 	1
.0c01					gdXLimit:
>0c01							.fill 	2
.0c03					gdYLimit:
>0c03							.fill 	2
.0c05					gEndStorage:
.18ba					GResetStorage:
.18ba	8a		txa				txa
.18bb	48		pha				pha
.18bc	a2 1e		ldx #$1e			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18be	a9 00		lda #$00			lda 	#0
.18c0					_GRSLoop:
.18c0	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c3	ca		dex				dex
.18c4	10 fa		bpl $18c0			bpl 	_GRSLoop
.18c6	a9 01		lda #$01			lda 	#1
.18c8	8d fc 0b	sta $0bfc			sta 	gdInk
.18cb	8d fe 0b	sta $0bfe			sta 	gdSize
.18ce	68		pla				pla
.18cf	aa		tax				tax
.18d0	60		rts				rts
.18d1					GHandler:
.18d1	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18d4	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18d7	88		dey				dey 								; predecrement
.18d8					_GHLoopNext:
.18d8	c8		iny				iny									; advance one character
.18d9					_GHLoop:
.18d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18db	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18dd	f0 f9		beq $18d8			beq 	_GHLoopNext
.18df	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18e1	f0 4c		beq $192f			beq 	_GHExit
.18e3	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18e5	f0 48		beq $192f			beq 	_GHExit
.18e7	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e9	f0 33		beq $191e			beq 	_GHCallHandler 				; update post & call the handler
.18eb	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18ed	f0 2f		beq $191e			beq 	_GHCallHandler
.18ef	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18f1	f0 10		beq $1903			beq 	_GHCPairSkip
.18f3	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18f5					_GHCheckTokens:
.18f5	b1 28		lda ($28),y			lda 	(codePtr),y
.18f7	dd 30 19	cmp $1930,x			cmp 	_GHTokenTable,x
.18fa	f0 0e		beq $190a			beq 	_GHFoundToken
.18fc	e8		inx				inx
.18fd	bd 30 19	lda $1930,x			lda 	_GHTokenTable,x
.1900	d0 f3		bne $18f5			bne 	_GHCheckTokens
.1902	88		dey				dey
.1903					_GHCPairSkip:
.1903	c8		iny				iny
.1904					_GHCPair:
.1904	20 36 19	jsr $1936			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1907	4c d9 18	jmp $18d9			jmp 	_GHLoop
.190a					_GHFoundToken:
.190a	c8		iny				iny 								; skip token (INK/PAPER etc.)
.190b	8a		txa				txa
.190c	48		pha				pha
.190d	a9 00		lda #$00			lda 	#0 							; evaluate byte
.190f	a2 0c		ldx #$0c		ldx	#12
.1911	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1914	68		pla				pla
.1915	aa		tax				tax
.1916	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1918	9d fc 0b	sta $0bfc,x			sta 	gModifiers,x 				; update the modifiers
.191b	4c d9 18	jmp $18d9			jmp 	_GHLoop 					; and loop back
.191e					_GHCallHandler:
.191e	c8		iny				iny 								; consume AT or TO.
.191f	20 36 19	jsr $1936			jsr 	GHMakeCurrent 				; update the coordinates.
.1922	98		tya				tya
.1923	48		pha				pha
.1924	20 2c 19	jsr $192c			jsr 	_GHCallHandlerCode 			; call the handler code
.1927	68		pla				pla
.1928	a8		tay				tay
.1929	4c d9 18	jmp $18d9			jmp 	_GHLoop 					; and loop round.
.192c					_GHCallHandlerCode:
.192c	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.192f					_GHExit:
.192f	60		rts				rts
.1930					_GHTokenTable:
>1930	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1935	00						.byte 	0
.1936					GHMakeCurrent:
.1936	8a		txa				txa
.1937	48		pha				pha
.1938	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.193a	20 4a 19	jsr $194a			jsr 	_GHMCDoIt
.193d	a2 02		ldx #$02		ldx	#2
.193f	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1942	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1944	20 4a 19	jsr $194a			jsr 	_GHMCDoIt
.1947	68		pla				pla
.1948	aa		tax				tax
.1949	60		rts				rts
.194a					_GHMCDoIt:
.194a	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.194d	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1950	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.1953	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.1956	8a		txa				txa
.1957	48		pha				pha
.1958	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.195a	a2 0a		ldx #$0a		ldx	#10
.195c	20 8a 3d	jsr $3d8a		jsr	mainHandler
.195f	68		pla				pla
.1960	aa		tax				tax
.1961	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.1963	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1966	a5 a0		lda $a0				lda 	esInt1
.1968	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.196b	b0 17		bcs $1984			bcs 	_GMHCRange
.196d	a5 a8		lda $a8				lda 	esInt2
.196f	05 b0		ora $b0				ora 	esInt3
.1971	d0 11		bne $1984			bne 	_GMHCRange
.1973	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.1975	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1978	9d ee 0b	sta $0bee,x			sta 	gX2,x
.197b	a5 a0		lda $a0				lda 	esInt1
.197d	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1980	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.1983	60		rts				rts
.1984					_GMHCRange:
.1984	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1986	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c05					gdySign:
>0c05							.fill 	1
.1989					Command_Line:
.1989	a9 91		lda #$91			lda 	#LineHandler & $FF
.198b	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.198d	20 d1 18	jsr $18d1			jsr 	GHandler
.1990	60		rts				rts
.1991					LineHandler:
.1991	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.1993	a0 04		ldy #$04			ldy 	#gX2-gX1
.1995	20 76 1c	jsr $1c76			jsr 	CompareCoordsEq
.1998	f0 09		beq $19a3			beq 	_LHRectCode
.199a	a2 02		ldx #$02			ldx 	#gY1-gX1
.199c	a0 06		ldy #$06			ldy 	#gY2-gX1
.199e	20 76 1c	jsr $1c76			jsr 	CompareCoordsEq
.19a1	d0 03		bne $19a6			bne 	_LHLineDrawer
.19a3					_LHRectCode:
.19a3	4c d6 1a	jmp $1ad6			jmp 	RectHandler
.19a6					_LHLineDrawer:
.19a6	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19a8	a0 04		ldy #$04			ldy 	#gX2-gX1
.19aa	20 61 1c	jsr $1c61			jsr 	CompareCoords
.19ad	90 0a		bcc $19b9			bcc 	_LHNoSwap
.19af	20 a9 1c	jsr $1ca9			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19b2	a2 02		ldx #$02			ldx 	#gY1-gX1
.19b4	a0 06		ldy #$06			ldy 	#gY2-gX1
.19b6	20 a9 1c	jsr $1ca9			jsr 	GSwapCoords
.19b9					_LHNoSwap:
.19b9	20 e2 19	jsr $19e2			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19bc	a0 00		ldy #$00			ldy 	#gX1-gX1
.19be	20 4b 1c	jsr $1c4b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19c1	b0 15		bcs $19d8			bcs 	_LHExit 					; line off screen.
.19c3					_LHDrawLoop:
.19c3	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19c5	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c7	20 76 1c	jsr $1c76			jsr 	CompareCoordsEq
.19ca	d0 0d		bne $19d9			bne 	_LHNextPixel
.19cc	a2 06		ldx #$06			ldx 	#gY2-gX1
.19ce	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d0	20 76 1c	jsr $1c76			jsr 	CompareCoordsEq
.19d3	d0 04		bne $19d9			bne 	_LHNextPixel
.19d5	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; plot the last pixel.
.19d8					_LHExit:
.19d8	60		rts				rts
.19d9					_LHNextPixel:
.19d9	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; plot the pixel.
.19dc	20 36 1a	jsr $1a36			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19df	4c c3 19	jmp $19c3			jmp  	_LHDrawLoop 				; and loop back if okay
.19e2					BresenhamInitialise:
.19e2	38		sec				sec
.19e3	ad ee 0b	lda $0bee			lda 	gX2
.19e6	ed ea 0b	sbc $0bea			sbc 	gX1
.19e9	8d f6 0b	sta $0bf6			sta 	gdX
.19ec	ad ef 0b	lda $0bef			lda 	gX2+1
.19ef	ed eb 0b	sbc $0beb			sbc 	gX1+1
.19f2	8d f7 0b	sta $0bf7			sta 	gdX+1
.19f5	38		sec				sec
.19f6	ad ec 0b	lda $0bec			lda 	gY1
.19f9	ed f0 0b	sbc $0bf0			sbc 	gY2
.19fc	8d f8 0b	sta $0bf8			sta 	gdy
.19ff	ad ed 0b	lda $0bed			lda 	gY1+1
.1a02	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a05	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a08	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a0b	8d 05 0c	sta $0c05			sta 	gdysign
.1a0e	30 12		bmi $1a22			bmi 	_BINormal
.1a10	38		sec				sec
.1a11	a9 00		lda #$00			lda 	#0
.1a13	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a16	8d f8 0b	sta $0bf8			sta 	gdy
.1a19	a9 00		lda #$00			lda 	#0
.1a1b	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a1e	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a21	60		rts				rts
.1a22					_BINormal:
.1a22	18		clc				clc
.1a23	ad f6 0b	lda $0bf6			lda 	gdx
.1a26	6d f8 0b	adc $0bf8			adc 	gdy
.1a29	8d f2 0b	sta $0bf2			sta 	gError
.1a2c	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a2f	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a32	8d f3 0b	sta $0bf3			sta 	gError+1
.1a35	60		rts				rts
.1a36					BresenhamIteration:
.1a36	ad f2 0b	lda $0bf2			lda 	gError
.1a39	0a		asl a				asl 	a
.1a3a	8d f4 0b	sta $0bf4			sta 	g2Error
.1a3d	ad f3 0b	lda $0bf3			lda 	gError+1
.1a40	2a		rol a				rol 	a
.1a41	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a44	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a46	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a48	20 6e 1c	jsr $1c6e			jsr 	CompareCoordsSigned
.1a4b	30 03		bmi $1a50			bmi 	_BINoE2DY
.1a4d	20 5d 1a	jsr $1a5d			jsr 	BresenhamE2GEDY
.1a50					_BINoE2DY:
.1a50	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a52	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a54	20 6e 1c	jsr $1c6e			jsr 	CompareCoordsSigned
.1a57	30 03		bmi $1a5c			bmi 	_BINoDXE2
.1a59	20 7c 1a	jsr $1a7c			jsr 	BresenhamDXGEE2
.1a5c					_BINoDXE2:
.1a5c	60		rts				rts
.1a5d					BresenhamE2GEDY:
.1a5d	18		clc				clc
.1a5e	ad f2 0b	lda $0bf2			lda 	gError
.1a61	6d f8 0b	adc $0bf8			adc 	gdy
.1a64	8d f2 0b	sta $0bf2			sta 	gError
.1a67	ad f3 0b	lda $0bf3			lda 	gError+1
.1a6a	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a6d	8d f3 0b	sta $0bf3			sta 	gError+1
.1a70	ee ea 0b	inc $0bea			inc 	gX1
.1a73	d0 03		bne $1a78			bne 	_BE2Skip
.1a75	ee eb 0b	inc $0beb			inc 	gX1+1
.1a78					_BE2Skip:
.1a78	20 c6 1c	jsr $1cc6			jsr 	gdMvRight
.1a7b	60		rts				rts
.1a7c					BresenhamDXGEE2:
.1a7c	18		clc				clc
.1a7d	ad f2 0b	lda $0bf2			lda 	gError
.1a80	6d f6 0b	adc $0bf6			adc 	gdx
.1a83	8d f2 0b	sta $0bf2			sta 	gError
.1a86	ad f3 0b	lda $0bf3			lda 	gError+1
.1a89	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a8c	8d f3 0b	sta $0bf3			sta 	gError+1
.1a8f	ad 05 0c	lda $0c05			lda 	gdySign
.1a92	10 0c		bpl $1aa0			bpl 	_BEDXInvertY
.1a94	ee ec 0b	inc $0bec			inc 	gY1
.1a97	d0 03		bne $1a9c			bne 	_BEDXSkip
.1a99	ee ed 0b	inc $0bed			inc 	gY1+1
.1a9c					_BEDXSkip:
.1a9c	20 01 1d	jsr $1d01			jsr 	gdMvDown
.1a9f	60		rts				rts
.1aa0					_BEDXInvertY:
.1aa0	ad ec 0b	lda $0bec			lda 	gY1
.1aa3	d0 03		bne $1aa8			bne 	_BEDXSkip2
.1aa5	ce ed 0b	dec $0bed			dec 	gY1+1
.1aa8					_BEDXSkip2:
.1aa8	ce ec 0b	dec $0bec			dec 	gY1
.1aab	20 dc 1c	jsr $1cdc			jsr 	gdMvUp
.1aae	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1aaf					Command_Plot:
.1aaf	a9 b7		lda #$b7			lda 	#PlotHandler & $FF
.1ab1	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1ab3	20 d1 18	jsr $18d1			jsr 	GHandler
.1ab6	60		rts				rts
.1ab7					PlotHandler:
.1ab7	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ab9	20 4b 1c	jsr $1c4b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1abc	b0 03		bcs $1ac1			bcs 	_PHExit 					; off screen, return with CS.
.1abe	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; pixel in Ink.
.1ac1	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c06					frameFlag:
>0c06							.fill 	1
.1ac2					Command_Rect:
.1ac2	a9 d6		lda #$d6			lda 	#RectHandler & $FF
.1ac4	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ac6	20 d1 18	jsr $18d1			jsr 	GHandler
.1ac9	60		rts				rts
.1aca					Command_Frame:
.1aca	a9 d2		lda #$d2			lda 	#FrameHandler & $FF
.1acc	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1ace	20 d1 18	jsr $18d1			jsr 	GHandler
.1ad1	60		rts				rts
.1ad2					FrameHandler:
.1ad2	a9 01		lda #$01			lda 	#1
.1ad4	d0 02		bne $1ad8			bne 	RectHandler+2
.1ad6					RectHandler:
.1ad6	a9 00		lda #$00			lda 	#0
.1ad8	8d 06 0c	sta $0c06			sta 	frameFlag
.1adb	20 85 1c	jsr $1c85			jsr 	BoxSort 					; sort so topleft/bottom right
.1ade	20 07 1b	jsr $1b07			jsr 	DrawBoxPart 				; solid first line
.1ae1					_FHLoop:
.1ae1	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1ae3	a0 06		ldy #$06			ldy 	#gY2-gX1
.1ae5	20 61 1c	jsr $1c61			jsr 	CompareCoords
.1ae8	b0 19		bcs $1b03			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1aea	ad 06 0c	lda $0c06			lda 	frameFlag 					; identify solid or frame ?
.1aed	f0 06		beq $1af5			beq 	_FHIsSolidRect
.1aef	20 20 1b	jsr $1b20			jsr 	DrawBoxEnds
.1af2	4c f8 1a	jmp $1af8			jmp 	_FHNext
.1af5					_FHIsSolidRect:
.1af5	20 07 1b	jsr $1b07			jsr 	DrawBoxPart
.1af8					_FHNext:
.1af8	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1afb	d0 e4		bne $1ae1			bne 	_FHLoop
.1afd	ee ed 0b	inc $0bed			inc 	gY1+1
.1b00	4c e1 1a	jmp $1ae1			jmp 	_FHLoop
.1b03					_FHLastLine:
.1b03	20 07 1b	jsr $1b07			jsr 	DrawBoxPart 				; solid last line whatever
.1b06					_FHExit:
.1b06	60		rts				rts
.1b07					DrawBoxPart:
.1b07	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b09	20 4b 1c	jsr $1c4b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b0c	38		sec				sec 								; calculate line length => temp0
.1b0d	ad ee 0b	lda $0bee			lda 	gX2
.1b10	ed ea 0b	sbc $0bea			sbc 	gX1
.1b13	48		pha				pha
.1b14	ad ef 0b	lda $0bef			lda 	gX2+1
.1b17	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b1a	aa		tax				tax
.1b1b	68		pla				pla 								; line length in XA.
.1b1c	20 38 1b	jsr $1b38			jsr 	DrawHorizontalLine
.1b1f	60		rts				rts
.1b20					DrawBoxEnds:
.1b20	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b22	20 4b 1c	jsr $1c4b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b25	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; LH end.
.1b28	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b2b	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b2e	20 1a 1e	jsr $1e1a			jsr 	gdSetX
.1b31	20 23 1d	jsr $1d23			jsr		gdSetDrawPosition 			; update position.
.1b34	20 65 1d	jsr $1d65			jsr 	gdPlotInk 					; RH end.
.1b37	60		rts				rts
.1b38					DrawHorizontalLine:
.1b38	86 32		stx $32				stx 	tempShort
.1b3a	aa		tax				tax
.1b3b	a4 32		ldy $32				ldy 	tempShort
.1b3d	ad fc 0b	lda $0bfc			lda 	gdInk
.1b40	4c 28 1e	jmp $1e28			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c07					RenderFunction:
>0c07							.fill 	2
.0c09					RenderWidth:
>0c09							.fill 	1
.0c0a					RenderHeight:
>0c0a							.fill 	1
.0c0b					RenderType:
>0c0b							.fill 	1
.0c0c					RenderCache:
>0c0c							.fill 	64
.1b43					ImageRenderer:
.1b43	8e 08 0c	stx $0c08			stx 	RenderFunction+1
.1b46	8d 07 0c	sta $0c07			sta 	RenderFunction
.1b49	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b4b	20 33 1c	jsr $1c33			jsr 	CallRenderFunction
.1b4e	8d 0b 0c	sta $0c0b			sta 	RenderType 					; and save it.
.1b51	8e 09 0c	stx $0c09			stx 	RenderWidth
.1b54	8c 0a 0c	sty $0c0a			sty 	RenderHeight
.1b57	8a		txa				txa 								; check X coordinate
.1b58	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b5a	20 fa 1b	jsr $1bfa			jsr 	RenderCheckRange
.1b5d	ad 0a 0c	lda $0c0a			lda 	RenderHeight 				; check Y coordinate
.1b60	a2 02		ldx #$02			ldx 	#2
.1b62	20 fa 1b	jsr $1bfa			jsr 	RenderCheckRange
.1b65	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b67					_IRLoop1:
.1b67	98		tya				tya
.1b68	48		pha				pha
.1b69	20 33 1c	jsr $1c33			jsr 	CallRenderFunction 			; fill the rendering cache.
.1b6c	68		pla				pla
.1b6d	a8		tay				tay
.1b6e	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; number of times to do the row.
.1b71					_IRLoop2:
.1b71	20 7e 1b	jsr $1b7e			jsr 	RenderDrawRow 				; draw one row.
.1b74	ca		dex				dex 								; scale # times.
.1b75	d0 fa		bne $1b71			bne 	_IRLoop2
.1b77	c8		iny				iny 								; next vertical row
.1b78	cc 0a 0c	cpy $0c0a			cpy 	RenderHeight 				; done the lot ?
.1b7b	d0 ea		bne $1b67			bne 	_IRLoop1
.1b7d	60		rts				rts
.1b7e					RenderDrawRow:
.1b7e	8a		txa				txa
.1b7f	48		pha				pha
.1b80	98		tya				tya
.1b81	48		pha				pha
.1b82	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1b84	20 4b 1c	jsr $1c4b			jsr 	SetupXY
.1b87	68		pla				pla
.1b88	a8		tay				tay
.1b89	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1b8b					_RDRLoop1:
.1b8b	20 9f 1b	jsr $1b9f			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1b8e	e8		inx				inx
.1b8f	ec 09 0c	cpx $0c09			cpx 	RenderWidth 				; until done the whole lot.
.1b92	d0 f7		bne $1b8b			bne 	_RDRLoop1
.1b94	ee f0 0b	inc $0bf0			inc 	gY2 						; next line down
.1b97	d0 03		bne $1b9c			bne 	_RDRNoCarry
.1b99	ee f1 0b	inc $0bf1			inc 	gY2+1
.1b9c					_RDRNoCarry:
.1b9c	68		pla				pla
.1b9d	aa		tax				tax
.1b9e	60		rts				rts
.1b9f					RenderDrawPixelSet:
.1b9f	8a		txa				txa
.1ba0	48		pha				pha
.1ba1	98		tya				tya
.1ba2	48		pha				pha
.1ba3	20 d6 1b	jsr $1bd6			jsr 	RenderFlipXY 				; flip positions as required.
.1ba6	20 c0 1b	jsr $1bc0			jsr 	RenderGetInk				; get colour to draw with.
.1ba9	ae fe 0b	ldx $0bfe			ldx 	gdSize 						; X counts the size.
.1bac					_RDPSLoop:
.1bac	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bae	f0 03		beq $1bb3			beq 	_RDPSNoDraw
.1bb0	20 68 1d	jsr $1d68			jsr 	gdPlotA 					; draw A otherwise
.1bb3					_RDPSNoDraw:
.1bb3	48		pha				pha 								; move right
.1bb4	20 c6 1c	jsr $1cc6			jsr 	gdMvRight
.1bb7	68		pla				pla
.1bb8	ca		dex				dex
.1bb9	d0 f1		bne $1bac			bne 	_RDPSLoop 					; do it size times.
.1bbb	68		pla				pla
.1bbc	a8		tay				tay
.1bbd	68		pla				pla
.1bbe	aa		tax				tax
.1bbf	60		rts				rts
.1bc0					RenderGetInk:
.1bc0	ad 0b 0c	lda $0c0b			lda 	RenderType 					; type, if 0 it's a bitmap
.1bc3	f0 04		beq $1bc9			beq 	_RGIBitmap
.1bc5	bd 0c 0c	lda $0c0c,x			lda 	RenderCache,x 				; read from the cache.
.1bc8	60		rts				rts
.1bc9					_RGIBitmap:
.1bc9	bd 0c 0c	lda $0c0c,x			lda 	RenderCache,x 				; read from the cache.
.1bcc	f0 04		beq $1bd2			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1bce	ad fc 0b	lda $0bfc			lda 	gdInk
.1bd1	60		rts				rts
.1bd2					_RGIBPaper:
.1bd2	ad fd 0b	lda $0bfd			lda 	gdPaper
.1bd5	60		rts				rts
.1bd6					RenderFlipXY:
.1bd6	ad 00 0c	lda $0c00			lda 	gdFlip 						; check any flip at all
.1bd9	29 03		and #$03			and 	#3
.1bdb	f0 1c		beq $1bf9			beq 	_RFExit
.1bdd	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1bde	90 09		bcc $1be9			bcc 	_RFNoHFlip
.1be0	ad 09 0c	lda $0c09			lda 	RenderWidth 				; X Flip
.1be3	86 32		stx $32				stx 	tempShort
.1be5	18		clc				clc
.1be6	e5 32		sbc $32				sbc 	tempShort
.1be8	aa		tax				tax
.1be9					_RFNoHFlip:
.1be9	ad 00 0c	lda $0c00			lda 	gdFlip
.1bec	29 02		and #$02			and 	#2 							; bit 1 check
.1bee	f0 09		beq $1bf9			beq 	_RFExit
.1bf0	ad 0a 0c	lda $0c0a			lda 	RenderHeight 				; Y Flip
.1bf3	84 32		sty $32				sty 	tempShort
.1bf5	18		clc				clc
.1bf6	e5 32		sbc $32				sbc 	tempShort
.1bf8	a8		tay				tay
.1bf9					_RFExit:
.1bf9	60		rts				rts
.1bfa					RenderCheckRange:
.1bfa	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1bfc	ac fe 0b	ldy $0bfe			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1bff	84 2a		sty $2a				sty 	temp0
.1c01	f0 2b		beq $1c2e			beq 	_RCRValue
.1c03	a9 00		lda #$00			lda 	#0 							; total
.1c05					_RCRMultiply:
.1c05	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c07	90 05		bcc $1c0e			bcc 	_RCRNoAdd 					; not adding this time.
.1c09	18		clc				clc
.1c0a	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c0c	b0 20		bcs $1c2e			bcs 	_RCRValue 					; overflow
.1c0e					_RCRNoAdd:
.1c0e	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c10	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c12	d0 f1		bne $1c05			bne 	_RCRMultiply
.1c14	18		clc				clc 								; add to x2 or y2, store in temp0
.1c15	7d ee 0b	adc $0bee,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c18	85 2a		sta $2a				sta 	temp0
.1c1a	bd ef 0b	lda $0bef,x			lda 	gX2+1,x
.1c1d	69 00		adc #$00			adc 	#0
.1c1f	85 2b		sta $2b				sta 	temp0+1
.1c21	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c23	dd 01 0c	cmp $0c01,x			cmp 	gdXLimit,x
.1c26	a5 2b		lda $2b				lda 	temp0+1
.1c28	fd 02 0c	sbc $0c02,x			sbc 	gdXLimit+1,x
.1c2b	b0 01		bcs $1c2e			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c2d	60		rts				rts
.1c2e					_RCRValue:
.1c2e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c30	20 18 15	jsr $1518		jsr	errorHandler
.1c33					CallRenderFunction:
.1c33	6c 07 0c	jmp ($0c07)			jmp 	(RenderFunction)
.1c36					TestImageAccess:
.1c36	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c38	f0 0a		beq $1c44			beq 	_TIAGetInfo
.1c3a	a0 3f		ldy #$3f			ldy 	#63
.1c3c					_TIACreate:
.1c3c	98		tya				tya
.1c3d	99 0c 0c	sta $0c0c,y			sta 	RenderCache,y
.1c40	88		dey				dey
.1c41	10 f9		bpl $1c3c			bpl 	_TIACreate
.1c43	60		rts				rts
.1c44					_TIAGetInfo:
.1c44	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c46	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c48	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c4a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c4b					SetupXY:
.1c4b	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1c4e	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1c51	20 1a 1e	jsr $1e1a			jsr 	gdSetX
.1c54	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1c57	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1c5a	20 21 1e	jsr $1e21			jsr 	gdSetY
.1c5d	20 23 1d	jsr $1d23			jsr 	gdSetDrawPosition
.1c60	60		rts				rts
.1c61					CompareCoords:
.1c61	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c64	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c67	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c6a	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1c6d	60		rts				rts
.1c6e					CompareCoordsSigned:
.1c6e	20 61 1c	jsr $1c61			jsr 	CompareCoords
.1c71	50 02		bvc $1c75			bvc 	_CCSExit
.1c73	49 80		eor #$80			eor 	#$80
.1c75					_CCSExit:
.1c75	60		rts				rts
.1c76					CompareCoordsEq:
.1c76	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c79	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c7c	d0 06		bne $1c84			bne 	_CCEExit
.1c7e	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c81	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1c84					_CCEExit:
.1c84	60		rts				rts
.1c85					BoxSort:
.1c85	a2 00		ldx #$00			ldx 	#gx1-gx1
.1c87	a0 04		ldy #$04			ldy 	#gx2-gx1
.1c89	20 9a 1c	jsr $1c9a			jsr 	GCompareCoords
.1c8c	20 a7 1c	jsr $1ca7			jsr 	GSortMinMaxCoords
.1c8f	a2 02		ldx #$02			ldx 	#gy1-gx1
.1c91	a0 06		ldy #$06			ldy 	#gy2-gx1
.1c93	20 9a 1c	jsr $1c9a			jsr 	GCompareCoords
.1c96	20 a7 1c	jsr $1ca7			jsr 	GSortMinMaxCoords
.1c99	60		rts				rts
.1c9a					GCompareCoords:
.1c9a	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1c9d	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1ca0	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1ca3	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1ca6	60		rts				rts
.1ca7					GSortMinMaxCoords:
.1ca7	90 1c		bcc $1cc5			bcc 	GSMMCExit
.1ca9					GSwapCoords:
.1ca9	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1cac	48		pha				pha
.1cad	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1cb0	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1cb3	68		pla				pla
.1cb4	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1cb7	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1cba	48		pha				pha
.1cbb	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1cbe	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1cc1	68		pla				pla
.1cc2	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1cc5					GSMMCExit:
.1cc5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1cc6					gdMvRight:
.1cc6	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1cc9	d0 08		bne $1cd3			bne 	_gdMR0
.1ccb	ee 21 9f	inc $9f21			inc 	$9F21
.1cce	d0 03		bne $1cd3			bne 	_gdMR0
.1cd0	ee 22 9f	inc $9f22			inc 	$9F22
.1cd3					_gdMR0:
.1cd3	ee 50 0c	inc $0c50			inc 	gdXPos
.1cd6	d0 03		bne $1cdb			bne 	_gdMR1
.1cd8	ee 51 0c	inc $0c51			inc 	gdXPos+1
.1cdb					_gdMR1:
.1cdb	60		rts				rts
.1cdc					gdMvUp:
.1cdc	ad 52 0c	lda $0c52			lda 	gdYPos 						; decrement Y Pos
.1cdf	d0 03		bne $1ce4			bne 	_gdMU1
.1ce1	ce 53 0c	dec $0c53			dec 	gdYPos+1
.1ce4	ce 52 0c	dec $0c52	_gdMU1:	dec 	gdYPos
.1ce7	38		sec				sec 								; adjust position by -320
.1ce8	ad 20 9f	lda $9f20			lda 	$9F20
.1ceb	e9 40		sbc #$40			sbc 	#64
.1ced	8d 20 9f	sta $9f20			sta 	$9F20
.1cf0	ad 21 9f	lda $9f21			lda 	$9F21
.1cf3	e9 01		sbc #$01			sbc 	#1
.1cf5	8d 21 9f	sta $9f21			sta 	$9F21
.1cf8	ad 22 9f	lda $9f22			lda 	$9F22
.1cfb	e9 00		sbc #$00			sbc 	#0
.1cfd	8d 22 9f	sta $9f22			sta 	$9F22
.1d00	60		rts				rts
.1d01					gdMvDown:
.1d01	ee 52 0c	inc $0c52			inc 	gdYPos 						; decrement Y Pos
.1d04	d0 03		bne $1d09			bne 	_gdMU1
.1d06	ee 53 0c	inc $0c53			inc 	gdYPos+1
.1d09					_gdMU1:
.1d09	18		clc				clc 								; adjust position by -320
.1d0a	ad 20 9f	lda $9f20			lda 	$9F20
.1d0d	69 40		adc #$40			adc 	#64
.1d0f	8d 20 9f	sta $9f20			sta 	$9F20
.1d12	ad 21 9f	lda $9f21			lda 	$9F21
.1d15	69 01		adc #$01			adc 	#1
.1d17	8d 21 9f	sta $9f21			sta 	$9F21
.1d1a	ad 22 9f	lda $9f22			lda 	$9F22
.1d1d	69 00		adc #$00			adc 	#0
.1d1f	8d 22 9f	sta $9f22			sta 	$9F22
.1d22	60		rts				rts
.1d23					gdSetDrawPosition:
.1d23	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d25	85 2a		sta $2a				sta 	temp0
.1d27	ad 52 0c	lda $0c52			lda 	gdYPos
.1d2a	85 2b		sta $2b				sta 	temp0+1
.1d2c	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d2e	66 2a		ror $2a				ror 	temp0
.1d30	46 2b		lsr $2b				lsr 	temp0+1
.1d32	66 2a		ror $2a				ror 	temp0
.1d34	ad 52 0c	lda $0c52			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d37	18		clc				clc
.1d38	65 2b		adc $2b				adc 	temp0+1
.1d3a	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d3c	18		clc				clc
.1d3d	a5 2a		lda $2a				lda 	temp0
.1d3f	6d 50 0c	adc $0c50			adc 	gdXPos
.1d42	85 2a		sta $2a				sta 	temp0
.1d44	a5 2b		lda $2b				lda 	temp0+1
.1d46	6d 51 0c	adc $0c51			adc 	gdXPos+1
.1d49	85 2b		sta $2b				sta 	temp0+1
.1d4b	18		clc				clc
.1d4c	ad 4d 0c	lda $0c4d			lda 	gdBitmapAddress
.1d4f	65 2a		adc $2a				adc 	temp0
.1d51	8d 20 9f	sta $9f20			sta 	$9F20
.1d54	ad 4e 0c	lda $0c4e			lda 	gdBitmapAddress+1
.1d57	65 2b		adc $2b				adc 	temp0+1
.1d59	8d 21 9f	sta $9f21			sta 	$9F21
.1d5c	ad 4f 0c	lda $0c4f			lda 	gdBitmapAddress+2
.1d5f	69 00		adc #$00			adc 	#0
.1d61	8d 22 9f	sta $9f22			sta 	$9F22
.1d64	60		rts				rts
.1d65					gdPlotInk:
.1d65	ad fc 0b	lda $0bfc			lda 	gdInk
.1d68					gdPlotA:
.1d68	8d 23 9f	sta $9f23			sta 	$9F23
.1d6b	60		rts				rts
.1d6c					gdPlotPaper:
.1d6c	ad fd 0b	lda $0bfd			lda 	gdPaper
.1d6f	c9 ff		cmp #$ff			cmp 	#$FF
.1d71	f0 03		beq $1d76			beq 	_gdPPSkip
.1d73	8d 23 9f	sta $9f23			sta 	$9F23
.1d76					_gdPPSkip:
.1d76	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c4c					gdEnabled:
>0c4c							.fill 	1
.0c4d					gdBitmapAddress:
>0c4d							.fill 	3
.0c50					gdXPos:
>0c50							.fill 	2
.0c52					gdYPos:
>0c52							.fill 	2
.1d77					gdModeChanged:
.1d77	8a		txa				txa
.1d78	48		pha				pha
.1d79	98		tya				tya
.1d7a	48		pha				pha
.1d7b	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d7d	8d 4c 0c	sta $0c4c			sta 	gdEnabled
.1d80	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1d83	c9 40		cmp #$40			cmp 	#$40
.1d85	d0 1f		bne $1da6			bne 	_gdExit
.1d87	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1d8a	c9 40		cmp #$40			cmp 	#$40
.1d8c	d0 18		bne $1da6			bne 	_gdExit
.1d8e	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1d91	0a		asl a				asl 	a 							;
.1d92	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1d93	10 09		bpl $1d9e			bpl 	_gdNotLayer1
.1d95	48		pha				pha 								; save A
.1d96	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1d98	20 ae 1d	jsr $1dae			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d9b	68		pla				pla 								; restore A
.1d9c	b0 08		bcs $1da6			bcs 	_gdExit 					; if successful then exit
.1d9e					_gdNotLayer1:
.1d9e	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1d9f	10 05		bpl $1da6			bpl 	_gdExit 					; if not enabled, exit
.1da1	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1da3	20 ae 1d	jsr $1dae			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1da6					_gdExit:
.1da6	20 e2 1d	jsr $1de2			jsr 	gdClearGraphics 			; clear graphics display.
.1da9	68		pla				pla
.1daa	a8		tay				tay
.1dab	68		pla				pla
.1dac	aa		tax				tax
.1dad	60		rts				rts
.1dae					gdCheckBitmap:
.1dae	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1db1	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1db3	d0 14		bne $1dc9			bne 	_gdCBFail
.1db5	ee 4c 0c	inc $0c4c			inc 	gdEnabled 					; set the enabled flag to non zero.
.1db8	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1dbb	0a		asl a				asl 	a
.1dbc	8d 4e 0c	sta $0c4e			sta 	gdBitmapAddress+1
.1dbf	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1dc1	8d 4f 0c	sta $0c4f			sta 	gdBitmapAddress+2
.1dc4	a9 00		lda #$00			lda 	#$00
.1dc6	8d 4d 0c	sta $0c4d			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dc9					_gdCBFail:
.1dc9	18		clc				clc
.1dca	60		rts				rts
.1dcb					CommandClg:
.1dcb	b1 28		lda ($28),y			lda 	(codePtr),y
.1dcd	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dcf	d0 0d		bne $1dde			bne 	_CCLClear
.1dd1	c8		iny				iny
.1dd2	a9 00		lda #$00			lda 	#0
.1dd4	a2 0c		ldx #$0c		ldx	#12
.1dd6	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1dd9	a5 98		lda $98				lda 	esInt0
.1ddb	8d fd 0b	sta $0bfd			sta 	gdPaper
.1dde					_CCLClear:
.1dde	20 e2 1d	jsr $1de2			jsr 	gdClearGraphics
.1de1	60		rts				rts
.1de2					gdClearGraphics:
.1de2	8a		txa				txa
.1de3	48		pha				pha
.1de4	98		tya				tya
.1de5	48		pha				pha
.1de6	ad 4c 0c	lda $0c4c			lda 	gdEnabled 					; screen enabled
.1de9	f0 2a		beq $1e15			beq 	_gdCGExit
.1deb	a9 00		lda #$00			lda 	#0 							; home cursor
.1ded	aa		tax				tax
.1dee	20 1a 1e	jsr $1e1a			jsr 	gdSetX
.1df1	20 21 1e	jsr $1e21			jsr 	gdSetY
.1df4	20 23 1d	jsr $1d23			jsr 	gdSetDrawPosition 			; set the draw position.
.1df7	a9 40		lda #$40			lda 	#(320) & $FF
.1df9	8d 01 0c	sta $0c01			sta 	gdXLimit
.1dfc	a9 01		lda #$01			lda 	#(320) >> 8
.1dfe	8d 02 0c	sta $0c02			sta 	1+(gdXLimit)
.1e01	a9 c8		lda #$c8			lda 	#(200) & $FF
.1e03	8d 03 0c	sta $0c03			sta 	gdYLimit
.1e06	a9 00		lda #$00			lda 	#(200) >> 8
.1e08	8d 04 0c	sta $0c04			sta 	1+(gdYLimit)
.1e0b	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e0d	a2 00		ldx #$00			ldx 	#0
.1e0f	ad fd 0b	lda $0bfd			lda 	gdPaper
.1e12	20 28 1e	jsr $1e28			jsr 	gdOptHorizontalWriter
.1e15					_gdCGExit:
.1e15	68		pla				pla
.1e16	a8		tay				tay
.1e17	68		pla				pla
.1e18	aa		tax				tax
.1e19	60		rts				rts
.1e1a					gdSetX:
.1e1a	8d 50 0c	sta $0c50			sta 	gdXPos
.1e1d	8e 51 0c	stx $0c51			stx 	gdXPos+1
.1e20	60		rts				rts
.1e21					gdSetY:
.1e21	8d 52 0c	sta $0c52			sta 	gdYPos
.1e24	8e 53 0c	stx $0c53			stx 	gdYPos+1
.1e27	60		rts				rts
.1e28					gdOptHorizontalWriter:
.1e28	48		pha				pha
.1e29	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e2c	09 10		ora #$10			ora 	#$10
.1e2e	8d 22 9f	sta $9f22			sta 	$9F22
.1e31	68		pla				pla
.1e32					_gdOLoop:
.1e32	8d 23 9f	sta $9f23			sta 	$9F23
.1e35	e0 00		cpx #$00			cpx 	#0
.1e37	d0 05		bne $1e3e			bne 	_gdNoBorrow
.1e39	c0 00		cpy #$00			cpy 	#0
.1e3b	f0 05		beq $1e42			beq 	_gdExit
.1e3d	88		dey				dey
.1e3e					_gdNoBorrow:
.1e3e	ca		dex				dex
.1e3f	4c 32 1e	jmp $1e32			jmp 	_gdOLoop
.1e42					_gdExit:
.1e42	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e43					Unary_Clock:
.1e43	a2 0c		ldx #$0c		ldx	#12
.1e45	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1e48	48		pha				pha 								; save stack pos
.1e49	a2 04		ldx #$04		ldx	#4
.1e4b	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1e4e	98		tya				tya
.1e4f	48		pha				pha
.1e50	20 50 ff	jsr $ff50			jsr 	$FF50
.1e53	68		pla				pla
.1e54	a8		tay				tay
.1e55	68		pla				pla 								; restore, repush, put into X to read offset
.1e56	48		pha				pha
.1e57	aa		tax				tax
.1e58	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e5a	c9 06		cmp #$06			cmp 	#6
.1e5c	b0 0d		bcs $1e6b			bcs 	_UCValue
.1e5e	aa		tax				tax 								; index in X and read RTC.
.1e5f	b5 02		lda $02,x			lda 	2,x
.1e61	85 32		sta $32				sta 	tempshort
.1e63	68		pla				pla 								; restore number stack index.
.1e64	aa		tax				tax
.1e65	a5 32		lda $32				lda 	tempShort
.1e67	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e69	8a		txa				txa
.1e6a	60		rts				rts
.1e6b					_UCValue:
.1e6b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e6d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e70					Unary_JoyX:
.1e70	38		sec				sec
.1e71	b0 01		bcs $1e74			bcs 	JoystickRead
.1e73					Unary_JoyY:
.1e73	18		clc				clc
.1e74					JoystickRead:
.1e74	48		pha				pha 								; save stack position
.1e75	08		php				php 								; save test flag.
.1e76	a2 04		ldx #$04		ldx	#4
.1e78	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1e7b	20 d5 1e	jsr $1ed5			jsr 	ReadJoystick 				; read it.
.1e7e	28		plp				plp
.1e7f	b0 02		bcs $1e83			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e81	4a		lsr a				lsr 	a
.1e82	4a		lsr a				lsr 	a
.1e83					_JRNoShift:
.1e83	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e85	f0 0d		beq $1e94			beq 	JoyReturnA 					; if nothing pressed, return A.
.1e87	c9 03		cmp #$03			cmp 	#3
.1e89	f0 07		beq $1e92			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1e8b	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1e8c	b0 16		bcs $1ea4			bcs 	JoyReturn1
.1e8e					JoyReturnTrue:
.1e8e	a9 ff		lda #$ff			lda 	#$FF
.1e90	d0 02		bne $1e94			bne 	JoyReturnA
.1e92					JoyReturnFalse:
.1e92	a9 00		lda #$00			lda 	#0
.1e94					JoyReturnA:
.1e94	85 32		sta $32				sta 	tempShort 					; return A
.1e96	68		pla				pla
.1e97	aa		tax				tax
.1e98	a5 32		lda $32				lda 	tempShort
.1e9a	95 98		sta $98,x			sta 	esInt0,x
.1e9c					JoyReturn13:
.1e9c	95 a0		sta $a0,x			sta 	esInt1,x
.1e9e	95 a8		sta $a8,x			sta 	esInt2,x
.1ea0	95 b0		sta $b0,x			sta 	esInt3,x
.1ea2	8a		txa				txa 								; return NSP in A
.1ea3	60		rts				rts
.1ea4					JoyReturn1:
.1ea4	68		pla				pla
.1ea5	aa		tax				tax
.1ea6	a9 01		lda #$01			lda 	#1
.1ea8	95 98		sta $98,x			sta 	esInt0,x
.1eaa	a9 00		lda #$00			lda 	#0
.1eac	f0 ee		beq $1e9c			beq 	JoyReturn13
.1eae					Unary_JButton:
.1eae	48		pha				pha 								; save X on stack, put in X
.1eaf	a2 0c		ldx #$0c		ldx	#12
.1eb1	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1eb4	aa		tax				tax 								; get value to check, push on stack.
.1eb5	b5 98		lda $98,x			lda 	esInt0,x
.1eb7	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1eb9	b0 15		bcs $1ed0			bcs 	_UJBadValue
.1ebb	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1ebd	48		pha				pha 								; save that shift count on the stack.
.1ebe	a2 04		ldx #$04		ldx	#4
.1ec0	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1ec3	68		pla				pla
.1ec4	aa		tax				tax
.1ec5	20 d5 1e	jsr $1ed5			jsr 	ReadJoystick 				; joystick read
.1ec8					_UJShift:
.1ec8	4a		lsr a				lsr 	a
.1ec9	ca		dex				dex
.1eca	d0 fc		bne $1ec8			bne 	_UJShift
.1ecc	b0 c0		bcs $1e8e			bcs 	JoyReturnTrue
.1ece	90 c2		bcc $1e92			bcc 	JoyReturnFalse
.1ed0					_UJBadValue:
.1ed0	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ed2	20 18 15	jsr $1518		jsr	errorHandler
.1ed5					ReadJoystick:
.1ed5	8a		txa				txa
.1ed6	48		pha				pha
.1ed7	98		tya				tya
.1ed8	48		pha				pha
.1ed9	a9 00		lda #$00			lda 	#0
.1edb	20 56 ff	jsr $ff56			jsr 	$FF56
.1ede	c0 00		cpy #$00			cpy 	#0
.1ee0	d0 11		bne $1ef3			bne 	_RJError
.1ee2	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ee4	d0 02		bne $1ee8			bne 	_RJNoBug
.1ee6	a9 ff		lda #$ff			lda 	#$FF
.1ee8					_RJNoBug:
.1ee8	85 32		sta $32				sta 	tempShort
.1eea	68		pla				pla
.1eeb	a8		tay				tay
.1eec	68		pla				pla
.1eed	aa		tax				tax
.1eee	a5 32		lda $32				lda 	tempShort
.1ef0	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1ef2	60		rts				rts
.1ef3					_RJError:
.1ef3	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ef5	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c54					hitSprite1:
>0c54							.fill 	1 							; this won't work ... if you nest HIT() which
.0c55					hitSprite2:
>0c55							.fill 	1
.0c56					hitRange:
>0c56							.fill 	1
.1ef8					FunctionCollide:
.1ef8	48		pha				pha 								; save and put index into X
.1ef9	aa		tax				tax
.1efa	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1efc	8d 56 0c	sta $0c56			sta 	hitRange
.1eff	20 a4 1f	jsr $1fa4			jsr 	_FCGetSpriteID
.1f02	8d 54 0c	sta $0c54			sta 	hitSprite1
.1f05	8a		txa				txa
.1f06	48		pha				pha
.1f07	a2 02		ldx #$02		ldx	#2
.1f09	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1f0c	68		pla				pla
.1f0d	aa		tax				tax
.1f0e	20 a4 1f	jsr $1fa4			jsr 	_FCGetSpriteID
.1f11	8d 55 0c	sta $0c55			sta 	hitSprite2
.1f14	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f16	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f18	f0 13		beq $1f2d			beq 	_FCParam2
.1f1a	8a		txa				txa
.1f1b	48		pha				pha
.1f1c	a2 02		ldx #$02		ldx	#2
.1f1e	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1f21	68		pla				pla
.1f22	a2 0c		ldx #$0c		ldx	#12
.1f24	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1f27	aa		tax				tax
.1f28	b5 98		lda $98,x			lda 	esInt0,x
.1f2a	8d 56 0c	sta $0c56			sta 	hitRange
.1f2d					_FCParam2:
.1f2d	a2 04		ldx #$04		ldx	#4
.1f2f	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1f32	68		pla				pla 								; set X to point to the stack again.
.1f33	48		pha				pha
.1f34	aa		tax				tax
.1f35	98		tya				tya
.1f36	48		pha				pha
.1f37	18		clc				clc 								; do it with the horizontal values.
.1f38	20 5a 1f	jsr $1f5a			jsr 	_FCCheck
.1f3b	90 0a		bcc $1f47			bcc 	_FCFail
.1f3d	38		sec				sec 								; do it with the vertical values.
.1f3e	20 5a 1f	jsr $1f5a			jsr 	_FCCheck
.1f41	90 04		bcc $1f47			bcc 	_FCFail
.1f43	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1f45	d0 02		bne $1f49			bne 	_FCReturnA
.1f47					_FCFail:
.1f47	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1f49					_FCReturnA:
.1f49	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1f4b	68		pla				pla
.1f4c	a8		tay				tay
.1f4d	68		pla				pla 								; restore stack, return result and exit.
.1f4e	aa		tax				tax
.1f4f	a5 32		lda $32				lda 	tempShort
.1f51	95 98		sta $98,x			sta 	esInt0,x
.1f53	95 a0		sta $a0,x			sta 	esInt1,x
.1f55	95 a8		sta $a8,x			sta 	esInt2,x
.1f57	95 b0		sta $b0,x			sta 	esInt3,x
.1f59	60		rts				rts
.1f5a					_FCCheck:
.1f5a	08		php				php 								; save the H/V flag twice
.1f5b	08		php				php
.1f5c	ad 54 0c	lda $0c54			lda 	hitSprite1 					; select sprite 1 and read its location
.1f5f	20 e2 20	jsr $20e2			jsr 	SelectSpriteA 				; into X
.1f62	28		plp				plp
.1f63	20 f7 21	jsr $21f7			jsr 	SpriteReadCoordinate
.1f66	ad 55 0c	lda $0c55			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1f69	20 e2 20	jsr $20e2			jsr 	SelectSpriteA
.1f6c	e8		inx				inx
.1f6d	28		plp				plp
.1f6e	20 f7 21	jsr $21f7			jsr 	SpriteReadCoordinate
.1f71	ca		dex				dex
.1f72	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1f73	b5 98		lda $98,x			lda 	esInt0,x
.1f75	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1f77	85 2a		sta $2a				sta 	temp0
.1f79	b5 a0		lda $a0,x			lda 	esInt1,x
.1f7b	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1f7d	85 2b		sta $2b				sta 	temp0+1
.1f7f	10 0d		bpl $1f8e			bpl 	_FCCIsPositive
.1f81	38		sec				sec 								; if -ve calculate |difference|
.1f82	a9 00		lda #$00			lda 	#0
.1f84	e5 2a		sbc $2a				sbc 	temp0
.1f86	85 2a		sta $2a				sta 	temp0
.1f88	a9 00		lda #$00			lda 	#0
.1f8a	e5 2b		sbc $2b				sbc 	temp0+1
.1f8c	85 2b		sta $2b				sta 	temp0+1
.1f8e					_FCCIsPositive:
.1f8e	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1f90	d0 10		bne $1fa2			bne 	_FCCFail
.1f92	18		clc				clc 								; work out required min distance which is
.1f93	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1f95	75 b1		adc $b1,x			adc 	esInt3+1,x
.1f97	ac 56 0c	ldy $0c56			ldy 	hitRange 					; get the hit range
.1f9a	f0 01		beq $1f9d			beq 	_FCCNoSetRange 				; override if non zero.
.1f9c	98		tya				tya
.1f9d					_FCCNoSetRange:
.1f9d	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1f9f	f0 01		beq $1fa2			beq 	_FCCFail
.1fa1	60		rts				rts
.1fa2					_FCCFail:
.1fa2	18		clc				clc
.1fa3	60		rts				rts
.1fa4					_FCGetSpriteID:
.1fa4	8a		txa				txa
.1fa5	a2 0c		ldx #$0c		ldx	#12
.1fa7	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1faa	aa		tax				tax
.1fab	b5 98		lda $98,x			lda 	esInt0,x
.1fad	30 01		bmi $1fb0			bmi 	_FCGSValue
.1faf	60		rts				rts
.1fb0					_FCGSValue:
.1fb0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fb2	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c57					currSprite:
>0c57							.fill 	2
.1fb5					CommandSprite:
.1fb5	20 b7 20	jsr $20b7			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1fb8	d0 0d		bne $1fc7			bne 	_CSCheckClear
.1fba	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1fbd	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1fbf	90 02		bcc $1fc3			bcc 	_CSNotOn 					; if CS turn on, so set it
.1fc1	09 40		ora #$40			ora 	#$40
.1fc3					_CSNotOn:
.1fc3	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1fc6	60		rts				rts
.1fc7					_CSCheckClear:
.1fc7	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1fc9	8d 58 0c	sta $0c58			sta 	currSprite+1
.1fcc	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1fce	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1fd0	d0 05		bne $1fd7			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1fd2	20 c8 20	jsr $20c8			jsr 	CSClearSprites 				; clear all the sprites
.1fd5	c8		iny				iny 								; consume CLEAR token and exit.
.1fd6	60		rts				rts
.1fd7					_CSCommandLoop:
.1fd7	20 b7 20	jsr $20b7			jsr 	CSCheckOnOff 				; check sprite on/off
.1fda	f0 2c		beq $2008			beq 	_CSSetVisibility
.1fdc	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1fde	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1fe0	f0 25		beq $2007			beq 	_CSExit
.1fe2	c8		iny				iny									; consume it
.1fe3	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1fe5	f0 20		beq $2007			beq 	_CSExit
.1fe7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1fe9	f0 ec		beq $1fd7			beq 	_CSCommandLoop
.1feb	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1fed	f0 69		beq $2058			beq 	_CSSetImage
.1fef	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1ff1	f0 2b		beq $201e			beq 	_CSSetFlip
.1ff3	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1ff5	f0 46		beq $203d			beq 	_CSSetPos
.1ff7	88		dey				dey 								; unpick DEY
.1ff8	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1ffa	a2 0c		ldx #$0c		ldx	#12
.1ffc	20 8a 3d	jsr $3d8a		jsr	mainHandler
.1fff	a5 98		lda $98				lda 	esInt0
.2001	20 e2 20	jsr $20e2			jsr 	SelectSpriteA
.2004	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.2007					_CSExit:
.2007	60		rts				rts
.2008					_CSSetVisibility:
.2008	08		php				php 								; save carry
.2009	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.200b	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.200e	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2011	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2013	28		plp				plp
.2014	90 02		bcc $2018			bcc 	_CSSetOff 					; check if carry was set
.2016	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2018					_CSSetOff:
.2018	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.201b	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.201e					_CSSetFlip:
.201e	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2020	a2 0c		ldx #$0c		ldx	#12
.2022	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2025	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2027	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.202a	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.202c	29 03		and #$03			and 	#3
.202e	85 2a		sta $2a				sta 	temp0
.2030	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.2033	29 fc		and #$fc			and 	#$FC
.2035	05 2a		ora $2a				ora 	temp0
.2037	8d 23 9f	sta $9f23			sta 	$9F23
.203a	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.203d					_CSSetPos:
.203d	a9 00		lda #$00			lda 	#0 							; X now at level 0
.203f	a2 0a		ldx #$0a		ldx	#10
.2041	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2044	a2 02		ldx #$02		ldx	#2
.2046	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2049	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.204b	a2 0a		ldx #$0a		ldx	#10
.204d	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2050	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2052	20 b3 21	jsr $21b3			jsr 	SpriteMove 					; move it.
.2055	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.2058					_CSSetImage:
.2058	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.205a	a2 0c		ldx #$0c		ldx	#12
.205c	20 8a 3d	jsr $3d8a		jsr	mainHandler
.205f	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.2061	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.2064	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.2066	bd 9e 0c	lda $0c9e,x			lda 	imageAddr32Low,x 			; copy low address in.
.2069	8d 23 9f	sta $9f23			sta 	$9F23
.206c	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.206f	bd 5e 0c	lda $0c5e,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2072	29 10		and #$10			and 	#$10
.2074	0a		asl a				asl 	a
.2075	0a		asl a				asl		a
.2076	0a		asl a				asl 	a 							; put into bit 7
.2077	1d de 0c	ora $0cde,x			ora 	imageAddr32High,x 			; or high address with it.
.207a	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.207d	a9 06		lda #$06			lda 	#6
.207f	20 9e 20	jsr $209e			jsr 	SpriteSetTarget 			; set sprite on.
.2082	ad 23 9f	lda $9f23			lda 	$9F23
.2085	09 0c		ora #$0c			ora 	#$0C
.2087	8d 23 9f	sta $9f23			sta 	$9F23
.208a	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.208d	bd 5e 0c	lda $0c5e,x			lda 	imageInfo,x 				; get image info
.2090	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.2091	0a		asl a				asl 	a
.2092	0a		asl a				asl 	a
.2093	0a		asl a				asl 	a
.2094	b0 02		bcs $2098			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.2096	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.2098					_CSNoOffset:
.2098	8d 23 9f	sta $9f23			sta 	$9F23
.209b	4c d7 1f	jmp $1fd7			jmp 	_CSCommandLoop
.209e					SpriteSetTarget:
.209e	0d 57 0c	ora $0c57			ora 	currSprite
.20a1	8d 20 9f	sta $9f20			sta 	$9F20
.20a4	ad 58 0c	lda $0c58			lda 	currSprite+1
.20a7	f0 09		beq $20b2			beq 	_SSTNoSet
.20a9	8d 21 9f	sta $9f21			sta 	$9F21
.20ac	a9 01		lda #$01			lda 	#$01
.20ae	8d 22 9f	sta $9f22			sta 	$9F22
.20b1	60		rts				rts
.20b2					_SSTNoSet:
.20b2	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.20b4	20 18 15	jsr $1518		jsr	errorHandler
.20b7					CSCheckOnOff:
.20b7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.20b9	c8		iny				iny
.20ba	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.20bc	18		clc				clc
.20bd	f0 08		beq $20c7			beq 	_CSCOExit
.20bf	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.20c1	38		sec				sec 								; return NE if neither.
.20c2	f0 03		beq $20c7			beq 	_CSCOExit
.20c4	88		dey				dey 								; undo consume
.20c5	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.20c7					_CSCOExit:
.20c7	60		rts				rts
.20c8					CSClearSprites:
.20c8	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.20ca	8d 22 9f	sta $9f22			sta 	$9F22
.20cd	a9 fc		lda #$fc			lda 	#$FC
.20cf	8d 21 9f	sta $9f21			sta 	$9F21
.20d2	a9 00		lda #$00			lda 	#0
.20d4	8d 20 9f	sta $9f20			sta 	$9F20
.20d7					_CSClear:
.20d7	a9 00		lda #$00			lda 	#0 							; set everything to $00
.20d9	8d 23 9f	sta $9f23			sta 	$9F23
.20dc	ad 21 9f	lda $9f21			lda 	$9F21
.20df	d0 f6		bne $20d7			bne 	_CSClear
.20e1	60		rts				rts
.20e2					SelectSpriteA:
.20e2	85 2a		sta $2a				sta 	temp0
.20e4	a9 00		lda #$00			lda 	#0
.20e6	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.20e8	b0 11		bcs $20fb			bcs 	_CSBadValue 				; sprites only 0-127
.20ea	06 2a		asl $2a				asl 	temp0
.20ec	2a		rol a				rol 	a
.20ed	06 2a		asl $2a				asl 	temp0
.20ef	2a		rol a				rol 	a
.20f0	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.20f2	8d 58 0c	sta $0c58			sta 	currSprite+1
.20f5	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.20f7	8d 57 0c	sta $0c57			sta 	currSprite+0
.20fa	60		rts				rts
.20fb					_CSBadValue
.20fb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.20fd	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.2100					Command_Paint:
.2100	a9 08		lda #$08			lda 	#ImageHandler & $FF
.2102	a2 21		ldx #$21			ldx 	#ImageHandler >> 8
.2104	20 d1 18	jsr $18d1			jsr 	GHandler
.2107	60		rts				rts
.2108					ImageHandler:
.2108	a9 36		lda #$36			lda 	#TestImageAccess & $FF
.210a	a2 1c		ldx #$1c			ldx 	#TestImageAccess >> 8
.210c	4c 43 1b	jmp $1b43			jmp 	ImageRenderer
.210f					SpriteImageAccess:
.210f	e0 ff		cpx #$ff			cpx 	#255
.2111	d0 1f		bne $2132			bne 	_SIAGetPixel
.2113	ae ff 0b	ldx $0bff			ldx 	gdImage 					; get the image #
.2116	bd 5e 0c	lda $0c5e,x			lda 	imageInfo,x 				; get the image information.
.2119	48		pha				pha
.211a	29 03		and #$03			and 	#3 							; LSB x 2 width
.211c	aa		tax				tax
.211d	bd 2e 21	lda $212e,x			lda 	_SIASizeTable,x
.2120	aa		tax				tax
.2121	68		pla				pla 								; get back next 2 bits are height
.2122	4a		lsr a				lsr 	a
.2123	4a		lsr a				lsr 	a
.2124	29 03		and #$03			and 	#3
.2126	a8		tay				tay
.2127	b9 2e 21	lda $212e,y			lda 	_SIASizeTable,y
.212a	a8		tay				tay
.212b	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.212d	60		rts				rts
.212e					_SIASizeTable:
>212e	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.2132					_SIAGetPixel:
.2132	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2134	a9 00		lda #$00			lda 	#0
.2136	85 2b		sta $2b				sta 	temp0+1
.2138	86 2d		stx $2d				stx 	temp1+1 					; save X into temp1+1
.213a	ac ff 0b	ldy $0bff			ldy 	gdImage 					; get image info into A
.213d	b9 5e 0c	lda $0c5e,y			lda 	imageInfo,y
.2140	48		pha				pha
.2141	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.2143	85 2c		sta $2c				sta 	temp1
.2145	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2146	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.2148	18		clc				clc
.2149	69 03		adc #$03			adc 	#3
.214b	a8		tay				tay
.214c					_SIAMultiply:
.214c	06 2a		asl $2a				asl 	temp0
.214e	26 2b		rol $2b				rol 	temp0+1
.2150	88		dey				dey
.2151	d0 f9		bne $214c			bne 	_SIAMultiply
.2153	8a		txa				txa 								; add X to it.
.2154	18		clc				clc
.2155	65 2a		adc $2a				adc 	temp0
.2157	85 2a		sta $2a				sta 	temp0
.2159	90 02		bcc $215d			bcc 	_SIANoCarry1
.215b	e6 2b		inc $2b				inc 	temp0+1
.215d					_SIANoCarry1:
.215d	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.215f	d0 04		bne $2165			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.2161	46 2b		lsr $2b				lsr 	temp0+1
.2163	66 2a		ror $2a				ror 	temp0
.2165					_SIANoHalf:
.2165	ae ff 0b	ldx $0bff			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.2168	bd 9e 0c	lda $0c9e,x			lda 	imageAddr32Low,x
.216b	85 2e		sta $2e				sta 	temp2
.216d	bd de 0c	lda $0cde,x			lda 	imageAddr32High,x
.2170	85 2f		sta $2f				sta 	temp2+1
.2172	a9 00		lda #$00			lda 	#0
.2174	85 30		sta $30				sta 	temp3
.2176	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.2178					_SIMult32:
.2178	06 2e		asl $2e				asl 	temp2
.217a	26 2f		rol $2f				rol 	temp2+1
.217c	26 30		rol $30				rol 	temp3
.217e	ca		dex				dex
.217f	d0 f7		bne $2178			bne 	_SIMult32
.2181	ee 25 9f	inc $9f25			inc 	$9F25 						; select alternate data port
.2184	18		clc				clc
.2185	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.2187	65 2e		adc $2e				adc 	temp2
.2189	8d 20 9f	sta $9f20			sta 	$9F20
.218c	a5 2b		lda $2b				lda 	temp0+1
.218e	65 2f		adc $2f				adc 	temp2+1
.2190	8d 21 9f	sta $9f21			sta 	$9F21
.2193	a9 00		lda #$00			lda 	#0
.2195	65 30		adc $30				adc 	temp3
.2197	8d 22 9f	sta $9f22			sta 	$9F22
.219a	ad 24 9f	lda $9f24			lda 	$9F24 						; read the sprite data port 1
.219d	ce 25 9f	dec $9f25			dec 	$9F25 						; select original data port.
.21a0	a6 2c		ldx $2c				ldx 	temp1 						; is it 8 bit ? if so, then exit
.21a2	d0 0e		bne $21b2			bne 	_SIExit
.21a4	46 2d		lsr $2d				lsr 	temp1+1 					; get even/odd X and shift A accordingly
.21a6	b0 04		bcs $21ac			bcs 	_SIHalf
.21a8	4a		lsr a				lsr 	a
.21a9	4a		lsr a				lsr 	a
.21aa	4a		lsr a				lsr 	a
.21ab	4a		lsr a				lsr 	a
.21ac					_SIHalf:
.21ac	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.21ae	f0 02		beq $21b2			beq 	_SIExit
.21b0	09 f0		ora #$f0			ora 	#$F0
.21b2					_SIExit:
.21b2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.21b3					SpriteMove:
.21b3	98		tya				tya
.21b4	48		pha				pha
.21b5	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.21b7	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.21ba	ad 23 9f	lda $9f23			lda 	$9F23
.21bd	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.21be	4a		lsr a				lsr 	a
.21bf	4a		lsr a				lsr 	a
.21c0	4a		lsr a				lsr 	a
.21c1	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.21c3	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.21c5	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.21c8	20 d7 21	jsr $21d7			jsr 	SMWritePosition 					; write X position out.
.21cb	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.21cd	46 2a		lsr $2a				lsr 	temp0
.21cf	e8		inx				inx 										; get the y position
.21d0	20 d7 21	jsr $21d7			jsr 	SMWritePosition 					; and write that out.
.21d3	ca		dex				dex 										; fix X and quit.
.21d4	68		pla				pla
.21d5	a8		tay				tay
.21d6	60		rts				rts
.21d7					SMWritePosition:
.21d7	a5 2a		lda $2a				lda 	temp0 								; get dim size
.21d9	29 03		and #$03			and 	#3 									; in range into Y
.21db	a8		tay				tay
.21dc	38		sec				sec
.21dd	b5 98		lda $98,x			lda 	esInt0,x
.21df	f9 f3 21	sbc $21f3,y			sbc 	SMHalfSize,y
.21e2	8d 23 9f	sta $9f23			sta 	$9F23
.21e5	ee 20 9f	inc $9f20			inc 	$9F20
.21e8	b5 a0		lda $a0,x			lda 	esInt1,x
.21ea	e9 00		sbc #$00			sbc 	#0
.21ec	8d 23 9f	sta $9f23			sta 	$9F23
.21ef	ee 20 9f	inc $9f20			inc 	$9F20
.21f2	60		rts				rts
.21f3					SMHalfSize:
>21f3	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.21f7					SpriteReadCoordinate:
.21f7	98		tya				tya
.21f8	48		pha				pha
.21f9	08		php				php 										; save CTR on stack
.21fa	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.21fc	20 9e 20	jsr $209e			jsr 	SpriteSetTarget
.21ff	ad 23 9f	lda $9f23			lda 	$9F23
.2202	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2203	4a		lsr a				lsr 	a
.2204	4a		lsr a				lsr 	a
.2205	4a		lsr a				lsr 	a
.2206	28		plp				plp 										; restore CTS
.2207	08		php				php
.2208	90 02		bcc $220c			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.220a	4a		lsr a				lsr 	a
.220b	4a		lsr a				lsr 	a
.220c					_SPRCNotY1:
.220c	29 03		and #$03			and 	#3 									; point into half width/height
.220e	a8		tay				tay
.220f	b9 f3 21	lda $21f3,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2212	95 b0		sta $b0,x			sta 	esInt3,x
.2214	28		plp				plp 										; CS Y CC X
.2215	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2217	2a		rol a				rol 	a
.2218	2a		rol a				rol 	a
.2219	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.221b	20 9e 20	jsr $209e			jsr 	SpriteSetTarget 					; set data pointer offset by that
.221e	18		clc				clc 										; read and unfix centre.
.221f	ad 23 9f	lda $9f23			lda 	$9F23
.2222	75 b0		adc $b0,x			adc 	esInt3,x
.2224	95 98		sta $98,x			sta 	esInt0,x
.2226	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2229	ad 23 9f	lda $9f23			lda 	$9F23
.222c	69 00		adc #$00			adc 	#0
.222e	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2230	c9 08		cmp #$08			cmp		#$08
.2232	90 02		bcc $2236			bcc 	_SPRCNoSX
.2234	09 f0		ora #$f0			ora 	#$F0
.2236					_SPRCNoSX:
.2236	95 a0		sta $a0,x			sta 	esInt1,x
.2238	68		pla				pla
.2239	a8		tay				tay
.223a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.223b					Sprite_GetX:
.223b	18		clc				clc
.223c	90 01		bcc $223f			bcc 	SpriteGetCode
.223e					Sprite_GetY:
.223e	38		sec				sec
.223f					SpriteGetCode:
.223f	08		php				php 								; CLC : X SEC: Y, save on stack.
.2240	48		pha				pha 								; save stack position
.2241	20 5d 22	jsr $225d			jsr 	GetSpriteNumber 			; get # of sprite.
.2244	a2 04		ldx #$04		ldx	#4
.2246	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2249	68		pla				pla
.224a	aa		tax				tax
.224b	28		plp				plp 								; which one ?
.224c	20 f7 21	jsr $21f7			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.224f	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.2251	29 80		and #$80			and 	#$80
.2253	f0 02		beq $2257			beq 	_SGXYPos
.2255	a9 ff		lda #$ff			lda 	#$FF
.2257					_SGXYPos:
.2257	95 a8		sta $a8,x			sta 	esInt2,x
.2259	95 b0		sta $b0,x			sta 	esInt3,x
.225b	8a		txa				txa 								; return NSP in A
.225c	60		rts				rts
.225d					GetSpriteNumber:
.225d	48		pha				pha
.225e	a2 0c		ldx #$0c		ldx	#12
.2260	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2263	68		pla				pla
.2264	aa		tax				tax
.2265	b5 98		lda $98,x			lda 	esInt0,x
.2267	20 e2 20	jsr $20e2			jsr 	SelectSpriteA
.226a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c59					currentMode:
>0c59							.fill 	4
.226b					ForceMode0:
.226b	a2 00		ldx #$00			ldx 	#0
.226d	86 98		stx $98				stx 	esInt0 						; in case we do it.
.226f					_FMCheck:
.226f	bd 02 23	lda $2302,x			lda 	CMModeList,x 				; do we need to switch ?
.2272	dd 59 0c	cmp $0c59,x			cmp 	currentMode,x
.2275	d0 13		bne $228a			bne 	CMSetMode 					; different so switch.
.2277	e8		inx				inx
.2278	e0 04		cpx #$04			cpx 	#4
.227a	d0 f3		bne $226f			bne 	_FMCheck
.227c	60		rts				rts
.227d					CommandMode:
.227d	a9 00		lda #$00			lda 	#0
.227f	a2 0a		ldx #$0a		ldx	#10
.2281	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2284	a5 b0		lda $b0				lda 	esInt3
.2286	29 70		and #$70			and 	#$70
.2288	d0 06		bne $2290			bne 	CMNoExpand
.228a					CMSetMode:
.228a	20 e1 22	jsr $22e1			jsr 	CMExpandMode
.228d	4c a4 22	jmp $22a4			jmp 	CMUpdateMode
.2290					CMNoExpand:
.2290	a5 98		lda $98				lda 	esInt0
.2292	8d 59 0c	sta $0c59			sta 	currentMode
.2295	a5 a0		lda $a0				lda 	esInt1
.2297	8d 5a 0c	sta $0c5a			sta 	currentMode+1
.229a	a5 a8		lda $a8				lda 	esInt2
.229c	8d 5b 0c	sta $0c5b			sta 	currentMode+2
.229f	a5 b0		lda $b0				lda 	esInt3
.22a1	8d 5c 0c	sta $0c5c			sta 	currentMode+3
.22a4					CMUpdateMode:
.22a4	a2 11		ldx #$11			ldx 	#$11
.22a6					_CMClear:
.22a6	a9 00		lda #$00			lda 	#0
.22a8	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.22ab	ca		dex				dex
.22ac	10 f8		bpl $22a6			bpl 	_CMClear
.22ae	ad 5c 0c	lda $0c5c			lda 	currentMode+3 				; get current mode
.22b1	48		pha				pha 								; stack twice.
.22b2	48		pha				pha
.22b3	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.22b5	09 01		ora #$01			ora 	#$01 						; turn the output on.
.22b7	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.22ba	68		pla				pla 								; get back
.22bb	20 12 23	jsr $2312			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22be	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.22c1	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.22c2	4a		lsr a				lsr 	a
.22c3	4a		lsr a				lsr 	a
.22c4	20 12 23	jsr $2312			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.22c7	8d 2b 9f	sta $9f2b			sta 	$9F2B
.22ca	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.22cc	ad 59 0c	lda $0c59			lda 	currentMode					; get L0 config byte
.22cf	20 1d 23	jsr $231d			jsr 	CMDecodeLayer 				; and decode layer 0
.22d2	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.22d4	ad 5a 0c	lda $0c5a			lda 	currentMode+1
.22d7	20 1d 23	jsr $231d			jsr 	CMDecodeLayer
.22da	20 77 1d	jsr $1d77			jsr 	gdModeChanged 				; check the bitmap status.
.22dd	20 ba 18	jsr $18ba			jsr 	GResetStorage 				; reset the graphics drawing storage.
.22e0	60		rts				rts
.22e1					CMExpandMode:
.22e1	a5 98		lda $98				lda 	esInt0 						; get mode number
.22e3	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.22e5	b0 16		bcs $22fd			bcs 	_CMModeError
.22e7	0a		asl a				asl 	a 							; x 4 into X
.22e8	0a		asl a				asl 	a
.22e9	aa		tax				tax
.22ea	98		tya				tya
.22eb	48		pha				pha
.22ec	a0 00		ldy #$00			ldy 	#0
.22ee					_CMEMCopy:
.22ee	bd 02 23	lda $2302,x			lda 	CMModeList,x
.22f1	99 59 0c	sta $0c59,y			sta 	currentMode,y
.22f4	e8		inx				inx
.22f5	c8		iny				iny
.22f6	c0 04		cpy #$04			cpy 	#4
.22f8	d0 f4		bne $22ee			bne 	_CMEMCopy
.22fa	68		pla				pla
.22fb	a8		tay				tay
.22fc	60		rts				rts
.22fd					_CMModeError:
.22fd	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.22ff	20 18 15	jsr $1518		jsr	errorHandler
.2302					CMModeList:
>2302	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2306	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>230a	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>230e	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2312					CMEndModeList:
.2312					CMToScale:
.2312	29 03		and #$03			and 	#3 							; lower 2 bits only
.2314	aa		tax				tax 								; put in X for counting
.2315	a9 00		lda #$00			lda 	#0 							; zero result
.2317	38		sec				sec 								; first time rotate CS in
.2318					_CMTSLoop:
.2318	6a		ror a				ror 	a
.2319	ca		dex				dex
.231a	10 fc		bpl $2318			bpl 	_CMTSLoop
.231c	60		rts				rts
.231d					CMDecodeLayer:
.231d	48		pha				pha 								; save it.
.231e	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2320	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2323	68		pla				pla 								; get it back
.2324	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2326	f0 02		beq $232a			beq 	_CMDLNotSet
.2328	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.232a					_CMDLNotSet:
.232a	e0 00		cpx #$00			cpx 	#0
.232c	f0 06		beq $2334			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.232e	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2330	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2333	60		rts				rts
.2334					_CMDLayer0:
.2334	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2336	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2339	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.233a					CommandPalette:
.233a	a9 00		lda #$00			lda 	#0
.233c	a2 0c		ldx #$0c		ldx	#12
.233e	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2341	a2 02		ldx #$02		ldx	#2
.2343	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2346	a9 01		lda #$01			lda 	#1
.2348	a2 08		ldx #$08		ldx	#8
.234a	20 8a 3d	jsr $3d8a		jsr	mainHandler
.234d	a5 98		lda $98				lda 	esInt0 					; get palette #
.234f	20 5f 23	jsr $235f			jsr 	PointToPaletteA			; point to palette register
.2352	a5 99		lda $99				lda 	esInt0+1
.2354	8d 23 9f	sta $9f23			sta 	$9F23
.2357	a5 a1		lda $a1				lda 	esInt1+1
.2359	29 0f		and #$0f			and 	#$0F
.235b	8d 23 9f	sta $9f23			sta 	$9F23
.235e	60		rts				rts
.235f					PointToPaletteA:
.235f	0a		asl a				asl 	a 							; x 2 -> LSB
.2360	8d 20 9f	sta $9f20			sta 	$9F20
.2363	a9 00		lda #$00			lda 	#0 							; carry into A
.2365	2a		rol a				rol 	a
.2366	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.2368	8d 21 9f	sta $9f21			sta 	$9F21
.236b	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.236d	8d 22 9f	sta $9f22			sta 	$9F22
.2370	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.2371					Command_VLoad:
.2371	a9 00		lda #$00			lda 	#0 								; string which is the file name
.2373	a2 0e		ldx #$0e		ldx	#14
.2375	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2378	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.237a	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.237c	95 98		sta $98,x			sta 	esInt0,x
.237e	a5 36		lda $36				lda 	lowMemory+1
.2380	95 a0		sta $a0,x			sta 	esInt1,x
.2382	a9 00		lda #$00			lda 	#0
.2384	95 a8		sta $a8,x			sta 	esInt2,x
.2386	95 b0		sta $b0,x			sta 	esInt3,x
.2388	a2 0e		ldx #$0e		ldx	#14
.238a	20 f6 14	jsr $14f6		jsr	deviceHandler
.238d	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.238f	85 2a		sta $2a				sta 	temp0
.2391	a5 a1		lda $a1				lda 	esInt1+1
.2393	85 2b		sta $2b				sta 	temp0+1
.2395	20 11 24	jsr $2411			jsr 	LoadVRAMFile 					; load the VRAM file in.
.2398	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2399					Command_VPoke:
.2399	38		sec				sec 						; one byte , CS
.239a	b0 01		bcs $239d			bcs 	CmdVideoWrite
.239c					Command_VDoke:
.239c	18		clc				clc 						; two bytes, CC
.239d					CmdVideoWrite:
.239d	08		php				php 						; save one or two btes
.239e	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.23a0	a2 0a		ldx #$0a		ldx	#10
.23a2	20 8a 3d	jsr $3d8a		jsr	mainHandler
.23a5	a2 02		ldx #$02		ldx	#2
.23a7	20 8a 3d	jsr $3d8a		jsr	mainHandler
.23aa	a9 01		lda #$01			lda 	#1
.23ac	a2 0a		ldx #$0a		ldx	#10
.23ae	20 8a 3d	jsr $3d8a		jsr	mainHandler
.23b1	a2 00		ldx #$00			ldx 	#0
.23b3	20 c4 23	jsr $23c4			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.23b6	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.23b8	8d 23 9f	sta $9f23			sta 	$9F23
.23bb	28		plp				plp 						; if it was Poke then exit
.23bc	b0 05		bcs $23c3			bcs 	_CVWExit
.23be	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.23c0	8d 23 9f	sta $9f23			sta 	$9F23
.23c3					_CVWExit:
.23c3	60		rts				rts
.23c4					SetUpTOSVRamAddress:
.23c4	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.23c6	29 fe		and #$fe			and 	#$FE
.23c8	15 b0		ora $b0,x			ora 	esInt3,x
.23ca	d0 14		bne $23e0			bne 	CVWValue
.23cc	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.23ce	8d 20 9f	sta $9f20			sta 	$9F20
.23d1	b5 a0		lda $a0,x			lda 	esInt1,x
.23d3	8d 21 9f	sta $9f21			sta	 	$9F21
.23d6	b5 a8		lda $a8,x			lda 	esInt2,x
.23d8	29 01		and #$01			and 	#1
.23da	09 10		ora #$10			ora 	#$10 				; step 1.
.23dc	8d 22 9f	sta $9f22			sta 	$9F22
.23df	60		rts				rts
.23e0					CVWValue:
.23e0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.23e2	20 18 15	jsr $1518		jsr	errorHandler
.23e5					Command_VPeek:
.23e5	38		sec				sec 						; one byte , CS
.23e6	b0 01		bcs $23e9			bcs 	CmdVideoRead
.23e8					Command_VDeek:
.23e8	18		clc				clc 						; two bytes, CC
.23e9					CmdVideoRead:
.23e9	08		php				php 						; save action on stack.
.23ea	48		pha				pha 						; save stack position
.23eb	a2 0a		ldx #$0a		ldx	#10
.23ed	20 8a 3d	jsr $3d8a		jsr	mainHandler
.23f0	a2 04		ldx #$04		ldx	#4
.23f2	20 8a 3d	jsr $3d8a		jsr	mainHandler
.23f5	68		pla				pla
.23f6	aa		tax				tax
.23f7	20 c4 23	jsr $23c4			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.23fa	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.23fc	95 a0		sta $a0,x			sta 	esInt1,x
.23fe	95 a8		sta $a8,x			sta 	esInt2,x
.2400	95 b0		sta $b0,x			sta 	esInt3,x
.2402	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2405	95 98		sta $98,x			sta 	esInt0,x
.2407	28		plp				plp 						; check if DOKE (carry was clear)
.2408	b0 05		bcs $240f			bcs 	_CVRExit
.240a	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.240d	95 a0		sta $a0,x			sta 	esInt1,x
.240f					_CVRExit:
.240f	8a		txa				txa 						; return X position.
.2410	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c5d					compressMode:
>0c5d							.fill 	1
.0c5e					imageInfo:
>0c5e							.fill 	X16MaxImages
.0c9e					imageAddr32Low:
>0c9e							.fill  	X16MaxImages
.0cde					imageAddr32High:
>0cde							.fill  	X16MaxImages
.2411					LoadVRAMFile:
.2411	8a		txa				txa
.2412	48		pha				pha
.2413	98		tya				tya
.2414	48		pha				pha
.2415					_LVRLoop:
.2415	20 f1 24	jsr $24f1			jsr 	LVFGet 						; get the next (never access direct)
.2418	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.241a	f0 42		beq $245e			beq 	_LVRExit
.241c	b0 5c		bcs $247a			bcs 	_LVRLoad 					; load data in ?
.241e	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2420	90 11		bcc $2433			bcc 	_LVRSetAddress
.2422	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2424	f0 3d		beq $2463			beq 	_LVRSetPalette
.2426	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2428	90 2d		bcc $2457			bcc 	_LVRSetCompress
.242a	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.242c	90 60		bcc $248e			bcc 	_LVRSetSprite
.242e	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2430	20 18 15	jsr $1518		jsr	errorHandler
.2433					_LVRSetAddress:
.2433	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2435	20 f1 24	jsr $24f1			jsr 	LVFGet
.2438	85 2c		sta $2c				sta 	temp1
.243a	a9 00		lda #$00			lda 	#0
.243c	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.243e	66 2c		ror $2c				ror 	temp1
.2440	6a		ror a				ror		a
.2441	46 2d		lsr $2d				lsr 	temp1+1
.2443	66 2c		ror $2c				ror 	temp1
.2445	6a		ror a				ror		a
.2446	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.2449	a5 2c		lda $2c				lda 	temp1
.244b	8d 21 9f	sta $9f21			sta 	$9F21
.244e	a5 2d		lda $2d				lda 	temp1+1
.2450	09 10		ora #$10			ora 	#$10
.2452	8d 22 9f	sta $9f22			sta 	$9F22
.2455	d0 be		bne $2415			bne 	_LVRLoop
.2457					_LVRSetCompress:
.2457	29 07		and #$07			and 	#7
.2459	8d 5d 0c	sta $0c5d			sta 	compressMode
.245c	10 b7		bpl $2415			bpl 	_LVRLoop
.245e					_LVRExit:
.245e	68		pla				pla
.245f	a8		tay				tay
.2460	68		pla				pla
.2461	aa		tax				tax
.2462	60		rts				rts
.2463					_LVRSetPalette:
.2463	20 f1 24	jsr $24f1			jsr 	LVFGet 						; get palette id.
.2466	20 5f 23	jsr $235f			jsr 	PointToPaletteA 			; in palette.asm
.2469	20 f1 24	jsr $24f1			jsr 	LVFGet 						; copy 12 bit palette data in.
.246c	8d 23 9f	sta $9f23			sta 	$9F23
.246f	20 f1 24	jsr $24f1			jsr 	LVFGet
.2472	29 0f		and #$0f			and 	#$0F
.2474	8d 23 9f	sta $9f23			sta 	$9F23
.2477	4c 15 24	jmp $2415			jmp 	_LVRLoop
.247a					_LVRLoad:
.247a	ae 5d 0c	ldx $0c5d			ldx 	compressMode
.247d	d0 55		bne $24d4			bne 	_LVRNotMode0
.247f	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.2481					_LVRLCopyX:
.2481	aa		tax				tax
.2482					_LVRLCopy:
.2482	20 f1 24	jsr $24f1			jsr 	LVFGet 						; write to data.
.2485	8d 23 9f	sta $9f23			sta 	$9F23
.2488	ca		dex				dex
.2489	d0 f7		bne $2482			bne 	_LVRLCopy
.248b	4c 15 24	jmp $2415			jmp 	_LVRLoop
.248e					_LVRSetSprite:
.248e	48		pha				pha 								; save on stack
.248f	20 f1 24	jsr $24f1			jsr 	LVFGet 						; get the sprite number into X
.2492	aa		tax				tax
.2493	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.2495	b0 38		bcs $24cf			bcs 	_LVRSSValue
.2497	68		pla				pla 								; restore the data held in the first byte
.2498	9d 5e 0c	sta $0c5e,x			sta 	imageInfo,x 				; and write into the sprite image table.
.249b					_LVRAlignVRAM:
.249b	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.249e	29 1f		and #$1f			and 	#$1F
.24a0	f0 07		beq $24a9			beq 	_LVRAligned
.24a2	a9 00		lda #$00			lda 	#$00
.24a4	8d 23 9f	sta $9f23			sta 	$9F23
.24a7	f0 f2		beq $249b			beq 	_LVRAlignVRAM
.24a9					_LVRAligned:
.24a9	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.24ac	4a		lsr a				lsr 	a 	 						; first halve into temp1
.24ad	ad 21 9f	lda $9f21			lda 	$9F21
.24b0	6a		ror a				ror 	a
.24b1	85 2d		sta $2d				sta 	temp1+1
.24b3	ad 20 9f	lda $9f20			lda 	$9F20
.24b6	6a		ror a				ror 	a
.24b7	85 2c		sta $2c				sta 	temp1
.24b9	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.24bb					_LVRShift:
.24bb	46 2d		lsr $2d				lsr 	temp1+1
.24bd	66 2c		ror $2c				ror 	temp1
.24bf	88		dey				dey
.24c0	d0 f9		bne $24bb			bne 	_LVRShift
.24c2	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.24c4	9d de 0c	sta $0cde,x			sta 	imageAddr32High,x
.24c7	a5 2c		lda $2c				lda 	temp1
.24c9	9d 9e 0c	sta $0c9e,x			sta 	imageAddr32Low,x
.24cc	4c 15 24	jmp $2415			jmp 	_LVRLoop
.24cf					_LVRSSValue:
.24cf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.24d1	20 18 15	jsr $1518		jsr	errorHandler
.24d4					_LVRNotMode0:
.24d4	e0 01		cpx #$01			cpx 	#1
.24d6	d0 15		bne $24ed			bne 	_LVRNotMode1
.24d8	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.24da	c9 40		cmp #$40			cmp 	#$40
.24dc	90 a3		bcc $2481			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.24de					_LVRRLEGroup:
.24de	29 3f		and #$3f			and 	#$3F
.24e0	aa		tax				tax
.24e1	20 f1 24	jsr $24f1			jsr 	LVFGet
.24e4					_LVRLEGroupLoop:
.24e4	8d 23 9f	sta $9f23			sta 	$9F23
.24e7	ca		dex				dex
.24e8	d0 fa		bne $24e4			bne 	_LVRLEGroupLoop
.24ea	4c 15 24	jmp $2415			jmp 	_LVRLoop
.24ed					_LVRNotMode1:
>24ed	db						.byte 	$DB
.24ee	4c ed 24	jmp $24ed			jmp 	_LVRNotMode1
.24f1	84 32		sty $32		LVFGet:	sty 	tempShort
.24f3	a0 00		ldy #$00			ldy 	#0
.24f5	b1 2a		lda ($2a),y			lda 	(temp0),y
.24f7	a4 32		ldy $32				ldy	 	tempShort
.24f9	e6 2a		inc $2a				inc 	temp0
.24fb	d0 02		bne $24ff			bne 	_LVFGExit
.24fd	e6 2b		inc $2b				inc 	temp0+1
.24ff					_LVFGExit:
.24ff	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2500					section_end_extension:
.2500					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2500					floatingpointHandler:
.2500	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2502	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2505					section_end_floatingpoint:
.2505					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2505					ColdStartEntry:
.2505	a2 ff		ldx #$ff			ldx 	#$FF
.2507	9a		txs				txs
.2508	20 91 25	jsr $2591			jsr 	ForceStandardMode
.250b	a2 04		ldx #$04		ldx	#4
.250d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2510	a0 ff		ldy #$ff			ldy 	#255
.2512					_CSBanner:
.2512	c8		iny				iny
.2513	b9 39 25	lda $2539,y			lda 	Intro,y
.2516	f0 14		beq $252c			beq 	_CSStart
.2518	c9 08		cmp #$08			cmp 	#8
.251a	90 08		bcc $2524			bcc 	_CSInk
.251c	a2 16		ldx #$16		ldx	#22
.251e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2521	4c 12 25	jmp $2512			jmp 	_CSBanner
.2524					_CSInk:
.2524	a2 08		ldx #$08		ldx	#8
.2526	20 f6 14	jsr $14f6		jsr	deviceHandler
.2529	4c 12 25	jmp $2512			jmp 	_CSBanner
.252c					_CSStart:
.252c	a2 16		ldx #$16		ldx	#22
.252e	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2531	a2 06		ldx #$06		ldx	#6
.2533	20 8a 3d	jsr $3d8a		jsr	mainHandler
.2536	4c 51 26	jmp $2651			jmp 	WarmStartEntry
>2539	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2541	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2551	20 2a 2a 2a 0d 0d
>2557	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>255f	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>256f	32 30 32 31 0d 0d
>2575	02 42 61 73 69 63 20				.text 	2,"Basic "
>257c	30 2e 32 30					.text "0.20"
>2580	20 28						.text 	" ("
>2582	30 33 2d 41 70 72 2d 32				.text "03-Apr-2021"
>258a	30 32 31
>258d	29 0d 0d 00					.text 	")",13,13,0
.2591					ForceStandardMode:
.2591	a9 fe		lda #$fe			lda 	#$FE
.2593	20 69 18	jsr $1869		jsr	extensionHandler
.2596	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.2597					DeleteLine:
.2597	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.259a	85 2a		sta $2a				sta 	temp0
.259c	ad c9 0a	lda $0ac9			lda 	basePage+1
.259f	85 2b		sta $2b				sta 	temp0+1
.25a1	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.25a3	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.25a5	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.25a7	d0 07		bne $25b0			bne 	_DLNext
.25a9	c8		iny				iny
.25aa	a5 a0		lda $a0				lda 	esInt1
.25ac	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.25ae	f0 06		beq $25b6			beq 	_DLFound
.25b0	20 d4 25	jsr $25d4	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.25b3	d0 ec		bne $25a1			bne 	_DLLoop
.25b5	60		rts				rts
.25b6					_DLFound:
.25b6	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.25b8	b1 2a		lda ($2a),y			lda 	(temp0),y
.25ba	a8		tay				tay 								; so we copy from (temp0),y
.25bb	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.25bd					_DLCopyDown:
.25bd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.25bf	81 2a		sta ($2a,x)			sta 	(temp0,x)
.25c1	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.25c3	d0 02		bne $25c7			bne 	_DLNoCarry
.25c5	e6 2b		inc $2b				inc 	temp0+1
.25c7					_DLNoCarry:
.25c7	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.25c9	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.25cb	d0 f0		bne $25bd			bne 	_DLCopyDown
.25cd	a5 2b		lda $2b				lda 	temp0+1
.25cf	c5 36		cmp $36				cmp 	lowMemory+1
.25d1	d0 ea		bne $25bd			bne 	_DLCopyDown
.25d3	60		rts				rts
.25d4					IAdvanceTemp0:
.25d4	84 32		sty $32				sty 	tempShort
.25d6	18		clc				clc
.25d7	a0 00		ldy #$00			ldy 	#0 							; get offset
.25d9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.25db	65 2a		adc $2a				adc 	temp0
.25dd	85 2a		sta $2a				sta 	temp0
.25df	90 02		bcc $25e3			bcc 	_IATNoCarry
.25e1	e6 2b		inc $2b				inc 	temp0+1
.25e3					_IATNoCarry:
.25e3	b1 2a		lda ($2a),y			lda 	(temp0),y
.25e5	a4 32		ldy $32				ldy 	tempShort
.25e7	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.25e9	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.25ea					InsertLine:
.25ea	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.25ed	85 2a		sta $2a				sta 	temp0
.25ef	ad c9 0a	lda $0ac9			lda 	basePage+1
.25f2	85 2b		sta $2b				sta 	temp0+1
.25f4					_ILLoop:
.25f4	a0 01		ldy #$01			ldy 	#1
.25f6	b1 2a		lda ($2a),y			lda 	(temp0),y
.25f8	c5 98		cmp $98				cmp 	esInt0
.25fa	c8		iny				iny
.25fb	b1 2a		lda ($2a),y			lda 	(temp0),y
.25fd	e5 a0		sbc $a0				sbc 	esInt1
.25ff	b0 05		bcs $2606			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2601	20 d4 25	jsr $25d4			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2604	d0 ee		bne $25f4			bne 	_ILLoop
.2606					_ILFound:
.2606	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2608	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.260a	a5 36		lda $36				lda 	lowMemory+1
.260c	85 2d		sta $2d				sta 	temp1+1
.260e	ad 5b 0e	lda $0e5b			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2611	18		clc				clc 								; add 3 for the line number and offset.
.2612	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2614	a8		tay				tay
.2615	a2 00		ldx #$00			ldx 	#0
.2617	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.2619	91 2c		sta ($2c),y			sta 	(temp1),y
.261b	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.261d	c5 2a		cmp $2a				cmp 	temp0
.261f	d0 06		bne $2627			bne 	_ILMNext
.2621	a5 2d		lda $2d				lda 	temp1+1
.2623	c5 2b		cmp $2b				cmp 	temp0+1
.2625	f0 0b		beq $2632			beq 	_ILMCopy
.2627					_ILMNext:
.2627	a5 2c		lda $2c				lda 	temp1
.2629	d0 02		bne $262d			bne 	_ILNoBorrow
.262b	c6 2d		dec $2d				dec 	temp1+1
.262d					_ILNoBorrow:
.262d	c6 2c		dec $2c				dec 	temp1
.262f	4c 17 26	jmp $2617			jmp 	_ILMove 					; and go round again
.2632					_ILMCopy:
.2632	98		tya				tya 								; Y is the offset of the new line.
.2633	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2635	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2637	a5 98		lda $98				lda 	esInt0
.2639	91 2a		sta ($2a),y			sta 	(temp0),y
.263b	c8		iny				iny
.263c	a5 a0		lda $a0				lda 	esInt1
.263e	91 2a		sta ($2a),y			sta 	(temp0),y
.2640	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2642					_ILMCopy2:
.2642	b1 28		lda ($28),y			lda 	(codePtr),y
.2644	c8		iny				iny
.2645	c8		iny				iny
.2646	c8		iny				iny
.2647	91 2a		sta ($2a),y			sta 	(temp0),y
.2649	88		dey				dey
.264a	88		dey				dey
.264b	cc 5b 0e	cpy $0e5b			cpy 	tokenBufferIndex
.264e	d0 f2		bne $2642			bne 	_ILMCopy2
.2650	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2651					WarmStartEntry:
.2651	a2 ff		ldx #$ff			ldx 	#$FF
.2653	9a		txs				txs
.2654	20 91 25	jsr $2591			jsr 	ForceStandardMode
.2657	a9 02		lda #$02			lda 	#2							; green text.
.2659	a2 08		ldx #$08		ldx	#8
.265b	20 f6 14	jsr $14f6		jsr	deviceHandler
.265e	a2 0c		ldx #$0c		ldx	#12
.2660	20 f6 14	jsr $14f6		jsr	deviceHandler
.2663	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.2665	85 28		sta $28				sta 	codePtr
.2667	a5 2b		lda $2b				lda 	temp0+1
.2669	85 29		sta $29				sta 	codePtr+1
.266b	a2 06		ldx #$06		ldx	#6
.266d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2670	a2 08		ldx #$08		ldx	#8
.2672	20 cb 48	jsr $48cb		jsr	tokeniserHandler
.2675	c9 00		cmp #$00			cmp 	#0
.2677	f0 25		beq $269e			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.2679	a9 58		lda #$58			lda 	#(tokenHeader) & $FF
.267b	85 28		sta $28				sta 	codePtr
.267d	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.267f	85 29		sta $29				sta 	1+(codePtr)
.2681	ad 5b 0d	lda $0d5b			lda 	tokenBuffer 				; is it a blank line, go get another line.
.2684	c9 80		cmp #$80			cmp 	#$80
.2686	f0 c9		beq $2651			beq 	WarmStartEntry
.2688	29 c0		and #$c0			and 	#$C0						; does it start with a number
.268a	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.268c	f0 15		beq $26a3			beq 	HasLineNumber
.268e	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.2690	8d 58 0d	sta $0d58			sta 	tokenHeader 				; fake program line.
.2693	8d 59 0d	sta $0d59			sta 	tokenHeader+1
.2696	8d 5a 0d	sta $0d5a			sta 	tokenHeader+2
.2699	a2 18		ldx #$18		ldx	#24
.269b	20 8a 3d	jsr $3d8a		jsr	mainHandler
.269e					WSEError:
.269e	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.26a0	20 18 15	jsr $1518		jsr	errorHandler
.26a3					HasLineNumber:
.26a3	a0 03		ldy #$03			ldy 	#3 							; get line number
.26a5	a9 00		lda #$00			lda 	#0
.26a7	a2 0a		ldx #$0a		ldx	#10
.26a9	20 8a 3d	jsr $3d8a		jsr	mainHandler
.26ac	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.26ae	05 b0		ora $b0				ora 	esInt3
.26b0	d0 ec		bne $269e			bne 	WSEError
.26b2	98		tya				tya 								; make codePtr point to code after the line number.
.26b3	18		clc				clc 								; by skipping over the tokenised number.
.26b4	65 28		adc $28				adc 	codePtr
.26b6	85 28		sta $28				sta 	codePtr
.26b8	90 02		bcc $26bc			bcc		_HLNNoCarry
.26ba	e6 29		inc $29				inc 	codePtr+1
.26bc					_HLNNoCarry:
.26bc	98		tya				tya 								; subtract that offset from the code buffer index
.26bd	38		sec				sec
.26be	49 ff		eor #$ff			eor 	#$FF
.26c0	6d 5b 0e	adc $0e5b			adc 	tokenBufferIndex
.26c3	18		clc				clc 								; add space allowing for header & $80 trailer
.26c4	69 04		adc #$04			adc 	#4
.26c6	8d 5b 0e	sta $0e5b			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.26c9	20 97 25	jsr $2597			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.26cc					_HLNNoDelete:
.26cc	ad 5b 0e	lda $0e5b			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.26cf	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.26d1	f0 0c		beq $26df			beq 	_HLMEditDone
.26d3	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.26d5	18		clc				clc 								; workspace (1k)
.26d6	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.26d8	c5 34		cmp $34				cmp 	highMemory+1
.26da	b0 0b		bcs $26e7			bcs 	_HLMMemory 					; nope, won't allowit.
.26dc	20 ea 25	jsr $25ea			jsr 	InsertLine 					; insert the line in
.26df					_HLMEditDone:
.26df	a2 06		ldx #$06		ldx	#6
.26e1	20 8a 3d	jsr $3d8a		jsr	mainHandler
.26e4	4c 51 26	jmp $2651			jmp 	WarmStartEntry
.26e7					_HLMMemory:
.26e7	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.26e9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.26ec					interactionHandler:
.26ec	7c ef 26	jmp ($26ef,x)			jmp 	(interactionVectors,x)
.26ef					interactionVectors:
>26ef	f5 26					.word _DummyControlHandler ; index 0
>26f1	05 25					.word ColdStartEntry       ; index 2
>26f3	51 26					.word WarmStartEntry       ; index 4
.26f5					_DummyControlHandler:
.26f5	60		rts			rts

;******  Return to file: basic.asm

.26f6					section_end_interaction:
.26f6					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d1e					dataPtr:
>0d1e							.fill 	2
.0d20					dataIndex:
>0d20							.fill 	1
.26f6					CommandRead:
.26f6	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.26f8	20 3d 36	jsr $363d			jsr 	EvaluateReference
.26fb	20 3c 27	jsr $273c			jsr 	SwapDPCP 					; use the data pointer.
.26fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2700	c8		iny				iny
.2701	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2703	f0 07		beq $270c			beq 	_CRInData
.2705	88		dey				dey
.2706	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2708	aa		tax				tax
.2709	20 3d 2e	jsr $2e3d			jsr 	ScanForward
.270c					_CRInData:
.270c	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.270e	20 e5 35	jsr $35e5			jsr 	Evaluate
.2711	ca		dex				dex 								; and write the value.
.2712	20 90 29	jsr $2990			jsr 	WriteValue
.2715	20 3c 27	jsr $273c			jsr 	SwapDPCP 					; get the code pointer back.
.2718	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.271a	c8		iny				iny
.271b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.271d	f0 d7		beq $26f6			beq 	CommandRead
.271f	88		dey				dey
.2720	60		rts				rts
.2721					CommandData:
.2721	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2723	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2725	20 3d 2e	jsr $2e3d			jsr 	ScanForward
.2728	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2729	60		rts				rts
.272a					CommandRestore:
.272a	ad c8 0a	lda $0ac8			lda 	basePage
.272d	8d 1e 0d	sta $0d1e			sta 	dataPtr
.2730	ad c9 0a	lda $0ac9			lda 	basePage+1
.2733	8d 1f 0d	sta $0d1f			sta 	dataPtr+1
.2736	a9 03		lda #$03			lda 	#3
.2738	8d 20 0d	sta $0d20			sta 	dataIndex
.273b	60		rts				rts
.273c					SwapDPCP:
.273c	8a		txa				txa
.273d	48		pha				pha
.273e	98		tya				tya 								; swap Y, DataIndex
.273f	ac 20 0d	ldy $0d20			ldy 	DataIndex
.2742	8d 20 0d	sta $0d20			sta 	DataIndex
.2745	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2747	ae 1e 0d	ldx $0d1e			ldx 	dataptr
.274a	8d 1e 0d	sta $0d1e			sta 	dataPtr
.274d	86 28		stx $28				stx 	codePtr
.274f	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2751	ae 1f 0d	ldx $0d1f			ldx 	dataptr+1
.2754	8d 1f 0d	sta $0d1f			sta 	dataPtr+1
.2757	86 29		stx $29				stx 	codePtr+1
.2759	68		pla				pla
.275a	aa		tax				tax
.275b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.275c					CommandGOSUB:
.275c	20 02 36	jsr $3602			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.275f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2761	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2763	20 37 3d	jsr $3d37			jsr 	RSClaim
.2766	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2768	20 63 3d	jsr $3d63			jsr 	RSSavePosition
.276b	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.276d	f0 1b		beq $278a			beq 	GotoTOS 					; and do a GOTO there.
.276f					CommandRETURN:
.276f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2771	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2773	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2775	f0 05		beq $277c			beq 	_isok
.2777	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2779	20 18 15	jsr $1518		jsr	errorHandler
.277c					_isok:
.277c	a9 01		lda #$01			lda 	#1
.277e	20 76 3d	jsr $3d76			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2781	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2783	20 59 3d	jsr $3d59			jsr 	RSFree
.2786	60		rts				rts
.2787					CommandGOTO:
.2787	20 02 36	jsr $3602			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.278a					GotoTOS:
.278a	20 23 31	jsr $3123			jsr 	ResetCodeAddress 			; simple search.
.278d					_GotoSearch:
.278d	a0 00		ldy #$00			ldy 	#0 							; get offset
.278f	b1 28		lda ($28),y			lda 	(codePtr),y
.2791	f0 21		beq $27b4			beq 	_GotoError 					; not found.
.2793	c8		iny				iny									; check LSB match
.2794	b1 28		lda ($28),y			lda 	(codePtr),y
.2796	d5 98		cmp $98,x			cmp 	esInt0,x
.2798	d0 07		bne $27a1			bne 	_GotoNext
.279a	c8		iny				iny
.279b	b1 28		lda ($28),y			lda 	(codePtr),y
.279d	d5 a0		cmp $a0,x			cmp 	esInt1,x
.279f	f0 10		beq $27b1			beq 	_GotoFound
.27a1					_GotoNext:
.27a1	a0 00		ldy #$00			ldy 	#0 							; go next line
.27a3	b1 28		lda ($28),y			lda 	(codePtr),y
.27a5	18		clc				clc
.27a6	65 28		adc $28				adc 	codePtr
.27a8	85 28		sta $28				sta 	codePtr
.27aa	90 e1		bcc $278d			bcc 	_GotoSearch
.27ac	e6 29		inc $29				inc 	codePtr+1
.27ae	4c 8d 27	jmp $278d			jmp 	_GotoSearch
.27b1					_GotoFound:
.27b1	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.27b3	60		rts				rts
.27b4					_GotoError:
.27b4	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.27b6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0d21					InputBuffer:
>0d21							.fill 	MaxInputSize+1
.27b9					Command_Input:
.27b9	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.27bb	c8		iny				iny
.27bc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.27be	f0 f9		beq $27b9			beq 	Command_Input
.27c0	88		dey				dey 							; undo consume
.27c1	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.27c3	f0 54		beq $2819			beq 	_CIExit 				; : or EOL, exit
.27c5	c9 80		cmp #$80			cmp 	#TOK_EOL
.27c7	f0 50		beq $2819			beq 	_CIExit
.27c9	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.27cb	90 12		bcc $27df			bcc 	_CIVariable
.27cd	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.27cf	d0 43		bne $2814			bne 	_CISyntax
.27d1	a2 00		ldx #$00			ldx 	#0
.27d3	20 f9 35	jsr $35f9			jsr 	EvaluateString 			; evaluate and print string
.27d6	20 f2 29	jsr $29f2			jsr 	TOSToTemp0
.27d9	20 e8 28	jsr $28e8			jsr 	PrintString
.27dc	4c b9 27	jmp $27b9			jmp 	Command_Input
.27df					_CIVariable:
.27df	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.27e1	20 3d 36	jsr $363d			jsr 	EvaluateReference  		; this is where its going
.27e4					_CIRetry:
.27e4	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.27e6	a2 14		ldx #$14		ldx	#20
.27e8	20 f6 14	jsr $14f6		jsr	deviceHandler
.27eb	98		tya				tya
.27ec	48		pha				pha
.27ed	20 2d 28	jsr $282d			jsr 	InputString 			; input a string (manually)
.27f0	a2 01		ldx #$01			ldx 	#1
.27f2	20 1a 28	jsr $281a			jsr 	BufferToStackX 			; make stack,x ref input string.
.27f5	a5 90		lda $90				lda 	esType 					; if target type numeric
.27f7	29 40		and #$40			and 	#$40 					; then convert to number
.27f9	d0 11		bne $280c			bne 	_CIWrite
.27fb	a2 01		ldx #$01			ldx 	#1
.27fd	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2800	a9 0a		lda #$0a			lda 	#10
.2802	20 0a 3b	jsr $3b0a			jsr 	MInt32FromString 		; convert it back from a string.
.2805	68		pla				pla
.2806	a8		tay				tay
.2807	b0 03		bcs $280c			bcs 	_CIWrite 				; successfully converted.
.2809	18		clc				clc 							; default fail FP conversion
.280a	90 d8		bcc $27e4			bcc		_CIRetry				; failed, try again.
.280c					_CIWrite:
.280c	a2 00		ldx #$00			ldx 	#0
.280e	20 90 29	jsr $2990			jsr 	WriteValue
.2811	4c b9 27	jmp $27b9			jmp 	Command_Input
.2814					_CISyntax:
.2814	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2816	20 18 15	jsr $1518		jsr	errorHandler
.2819					_CIExit:
.2819	60		rts				rts
.281a					BufferToStackX:
.281a	a9 21		lda #$21			lda 	#InputBuffer & $FF
.281c	95 98		sta $98,x			sta 	esInt0,x
.281e	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.2820	95 a0		sta $a0,x			sta 	esInt1,x
.2822	a9 00		lda #$00			lda 	#0
.2824	95 a8		sta $a8,x			sta 	esInt2,x
.2826	95 b0		sta $b0,x			sta 	esInt3,x
.2828	a9 40		lda #$40			lda 	#$40
.282a	95 90		sta $90,x			sta 	esType,x
.282c	60		rts				rts
.282d					InputString:
.282d	a9 00		lda #$00			lda 	#0
.282f	8d 21 0d	sta $0d21			sta 	InputBuffer
.2832					_InputLoop:
.2832	a2 02		ldx #$02		ldx	#2
.2834	20 f6 14	jsr $14f6		jsr	deviceHandler
.2837	a2 0a		ldx #$0a		ldx	#10
.2839	20 f6 14	jsr $14f6		jsr	deviceHandler
.283c	c9 00		cmp #$00			cmp 	#0
.283e	f0 f2		beq $2832			beq 	_InputLoop
.2840	c9 08		cmp #$08			cmp 	#8
.2842	f0 19		beq $285d			beq 	_InputBackspace
.2844	c9 0d		cmp #$0d			cmp 	#13
.2846	f0 21		beq $2869			beq 	_InputExit
.2848	ae 21 0d	ldx $0d21			ldx 	InputBuffer
.284b	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.284d	f0 e3		beq $2832			beq 	_InputLoop
.284f	9d 22 0d	sta $0d22,x			sta 	InputBuffer+1,x 		; write char
.2852	ee 21 0d	inc $0d21			inc 	InputBuffer 			; advance count.
.2855					_InputPrintLoop:
.2855	a2 14		ldx #$14		ldx	#20
.2857	20 f6 14	jsr $14f6		jsr	deviceHandler
.285a	4c 32 28	jmp $2832			jmp	 	_InputLoop
.285d					_InputBackspace:
.285d	ad 21 0d	lda $0d21			lda 	InputBuffer 			; at start
.2860	f0 d0		beq $2832			beq 	_InputLoop
.2862	ce 21 0d	dec $0d21			dec 	InputBuffer
.2865	a9 08		lda #$08			lda 	#8
.2867	d0 ec		bne $2855			bne 	_InputPrintLoop
.2869					_InputExit:
.2869	a2 06		ldx #$06		ldx	#6
.286b	20 f6 14	jsr $14f6		jsr	deviceHandler
.286e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d42					lastPrintToken:
>0d42							.fill 	1
.286f					Command_Print:
.286f	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2871	8d 42 0d	sta $0d42			sta 	lastPrintToken
.2874	88		dey				dey
.2875					_PrintLoopSkip:
.2875	c8		iny				iny
.2876					_PrintLoop:
.2876	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2878	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.287a	f0 5b		beq $28d7			beq 	_PrintExit
.287c	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.287e	f0 57		beq $28d7			beq 	_PrintExit
.2880	8d 42 0d	sta $0d42			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2883	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2885	f0 ee		beq $2875			beq 	_PrintLoopSkip
.2887	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2889	f0 3c		beq $28c7			beq	 	_PrintNewLine
.288b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.288d	f0 40		beq $28cf			beq 	_PrintTab
.288f	20 e3 35	jsr $35e3			jsr 	EvaluateRoot 				; evaluate something at the root
.2892	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2894	85 2a		sta $2a				sta 	temp0
.2896	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2898	85 2b		sta $2b				sta 	1+(temp0)
.289a	a5 90		lda $90				lda 	esType 						; get type
.289c	f0 15		beq $28b3			beq		_PrintInteger
.289e	4a		lsr a				lsr 	a 							; check for floating point
.289f	b0 08		bcs $28a9			bcs 	_PrintFloat
.28a1					_PrintString:
.28a1	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.28a3	20 f2 29	jsr $29f2			jsr 	TOSToTemp0
.28a6	4c c1 28	jmp $28c1			jmp 	_PrintTemp0 				; print no leading space.
.28a9					_PrintFloat:
.28a9	a9 00		lda #$00			lda 	#0 							; stack level.
.28ab	a2 16		ldx #$16		ldx	#22
.28ad	20 00 25	jsr $2500		jsr	floatingpointHandler
.28b0	4c ba 28	jmp $28ba			jmp 	_PrintSpaceTemp0
.28b3					_PrintInteger:
.28b3	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.28b5	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.28b7	20 f2 3b	jsr $3bf2			jsr 	MInt32ToString				; convert to text
.28ba					_PrintSpaceTemp0:
.28ba	a9 20		lda #$20			lda 	#32
.28bc	a2 14		ldx #$14		ldx	#20
.28be	20 f6 14	jsr $14f6		jsr	deviceHandler
.28c1					_PrintTemp0:
.28c1	20 e8 28	jsr $28e8			jsr 	PrintString
.28c4	4c 76 28	jmp $2876			jmp 	_PrintLoop
.28c7					_PrintNewLine:
.28c7	a2 06		ldx #$06		ldx	#6
.28c9	20 f6 14	jsr $14f6		jsr	deviceHandler
.28cc	4c 75 28	jmp $2875			jmp 	_PrintLoopSkip
.28cf					_PrintTab:
.28cf	a2 1a		ldx #$1a		ldx	#26
.28d1	20 f6 14	jsr $14f6		jsr	deviceHandler
.28d4	4c 75 28	jmp $2875			jmp 	_PrintLoopSkip
.28d7					_PrintExit:
.28d7	ad 42 0d	lda $0d42			lda		lastPrintToken 				; check last token
.28da	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.28dc	f0 09		beq $28e7			beq 	_PrintExit2
.28de	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.28e0	f0 05		beq $28e7			beq 	_PrintExit2
.28e2	a2 06		ldx #$06		ldx	#6
.28e4	20 f6 14	jsr $14f6		jsr	deviceHandler
.28e7					_PrintExit2:
.28e7	60		rts				rts
.28e8					PrintString:
.28e8	8a		txa				txa
.28e9	48		pha				pha
.28ea	98		tya				tya
.28eb	48		pha				pha
.28ec	a0 00		ldy #$00			ldy 	#0							; get length
.28ee	b1 2a		lda ($2a),y			lda 	(temp0),y
.28f0	aa		tax				tax 								; into X
.28f1	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.28f3	f0 10		beq $2905			beq 	_PSExit
.28f5	ca		dex				dex
.28f6	8a		txa				txa
.28f7	48		pha				pha
.28f8	c8		iny				iny
.28f9	b1 2a		lda ($2a),y			lda 	(temp0),y
.28fb	a2 14		ldx #$14		ldx	#20
.28fd	20 f6 14	jsr $14f6		jsr	deviceHandler
.2900	68		pla				pla
.2901	aa		tax				tax
.2902	4c f1 28	jmp $28f1			jmp 	_PSLoop
.2905					_PSExit:
.2905	68		pla				pla
.2906	a8		tay				tay
.2907	68		pla				pla
.2908	aa		tax				tax
.2909	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.290a					Command_CLS:
.290a	a2 04		ldx #$04		ldx	#4
.290c	20 f6 14	jsr $14f6		jsr	deviceHandler
.290f	60		rts				rts
.2910					Command_Ink:
.2910	a2 00		ldx #$00			ldx 	#0
.2912	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger
.2915	a2 08		ldx #$08		ldx	#8
.2917	20 f6 14	jsr $14f6		jsr	deviceHandler
.291a	60		rts				rts
.291b					Command_Paper:
.291b	a2 00		ldx #$00			ldx 	#0
.291d	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger
.2920	a2 12		ldx #$12		ldx	#18
.2922	20 f6 14	jsr $14f6		jsr	deviceHandler
.2925	60		rts				rts
.2926					Command_Locate:
.2926	a2 00		ldx #$00			ldx 	#0
.2928	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger
.292b	20 1c 3d	jsr $3d1c			jsr 	CheckComma
.292e	e8		inx				inx
.292f	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger
.2932	98		tya				tya
.2933	48		pha				pha
.2934	a4 99		ldy $99				ldy 	esInt0+1
.2936	a5 98		lda $98				lda 	esInt0
.2938	a2 10		ldx #$10		ldx	#16
.293a	20 f6 14	jsr $14f6		jsr	deviceHandler
.293d	68		pla				pla
.293e	a8		tay				tay
.293f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2940					Command_VDU:
.2940	20 02 36	jsr $3602			jsr 	EvaluateRootInteger 			; get integer at root.
.2943	a5 98		lda $98				lda 	esInt0
.2945	a2 14		ldx #$14		ldx	#20
.2947	20 f6 14	jsr $14f6		jsr	deviceHandler
.294a					_CVNext:
.294a	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.294c	c8		iny				iny
.294d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.294f	f0 ef		beq $2940			beq 	Command_VDU
.2951	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2953	d0 0a		bne $295f			bne 	_CVExit
.2955	a5 a0		lda $a0				lda 	esInt1
.2957	a2 14		ldx #$14		ldx	#20
.2959	20 f6 14	jsr $14f6		jsr	deviceHandler
.295c	4c 4a 29	jmp $294a			jmp 	_CVNext
.295f	88		dey		_CVExit:dey
.2960	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2961					Command_Assert:
.2961	20 02 36	jsr $3602			jsr 	EvaluateRootInteger 		; what is being asserted.
.2964	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero 					; is it true ?
.2967	f0 01		beq $296a			beq 	_CAError
.2969	60		rts				rts
.296a					_CAError:
.296a	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.296c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.296f					Command_Dim:
.296f	a2 04		ldx #$04		ldx	#4
.2971	20 9c 4c	jsr $4c9c		jsr	variableHandler
.2974	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2976	c8		iny				iny
.2977	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2979	f0 f4		beq $296f			beq 	Command_Dim
.297b	88		dey				dey 								; unpick get
.297c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.297d					CommandLet:
.297d	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.297f	20 3d 36	jsr $363d			jsr 	EvaluateReference
.2982	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2984	20 04 3d	jsr $3d04			jsr 	CheckToken
.2987	e8		inx				inx 								; do RHS
.2988	20 e5 35	jsr $35e5			jsr 	Evaluate 					; evaluate and dereference
.298b	ca		dex				dex
.298c	20 90 29	jsr $2990			jsr 	WriteValue 					; write it out
.298f	60		rts				rts
.2990					WriteValue:
.2990	98		tya				tya
.2991	48		pha				pha
.2992	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2995	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2997	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2999	29 40		and #$40			and 	#$40
.299b	d0 50		bne $29ed			bne		_WVType
.299d	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.299f	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.29a1	29 40		and #$40			and 	#$40
.29a3	d0 1f		bne $29c4			bne 	_WVCopyString
.29a5	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.29a7	15 91		ora $91,x			ora 	esType+1,x
.29a9	4a		lsr a				lsr 	a
.29aa	90 22		bcc $29ce			bcc 	_WVCopyData4 				; copy 4 data bytes.
.29ac	b5 90		lda $90,x			lda 	esType,x
.29ae	4a		lsr a				lsr 	a
.29af	90 3c		bcc $29ed			bcc 	_WVType
.29b1	e8		inx				inx 								; force the value being written to be a float.
.29b2	20 47 32	jsr $3247			jsr 	BPMakeFloat
.29b5	ca		dex				dex
.29b6	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 					; set Temp0 to write address
.29b9	e8		inx				inx
.29ba	8a		txa				txa
.29bb	a2 22		ldx #$22		ldx	#34
.29bd	20 00 25	jsr $2500		jsr	floatingpointHandler
.29c0	aa		tax				tax
.29c1	4c ea 29	jmp $29ea			jmp 	_WVCopyExit
.29c4					_WVCopyString:
.29c4	8a		txa				txa
.29c5	a2 10		ldx #$10		ldx	#16
.29c7	20 47 40	jsr $4047		jsr	stringHandler
.29ca	aa		tax				tax
.29cb	4c ea 29	jmp $29ea			jmp 	_WVCopyExit
.29ce					_WVCopyData4:
.29ce	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.29d0	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.29d2	d0 10		bne $29e4			bne 	_WVCopyData1
.29d4	a0 03		ldy #$03			ldy 	#3
.29d6	b5 b1		lda $b1,x			lda 	esInt3+1,x
.29d8	91 2a		sta ($2a),y			sta 	(temp0),y
.29da	88		dey				dey
.29db	b5 a9		lda $a9,x			lda 	esInt2+1,x
.29dd	91 2a		sta ($2a),y			sta 	(temp0),y
.29df	88		dey				dey
.29e0	b5 a1		lda $a1,x			lda 	esInt1+1,x
.29e2	91 2a		sta ($2a),y			sta 	(temp0),y
.29e4					_WVCopyData1:
.29e4	a0 00		ldy #$00			ldy 	#0
.29e6	b5 99		lda $99,x			lda 	esInt0+1,x
.29e8	91 2a		sta ($2a),y			sta 	(temp0),y
.29ea					_WVCopyExit:
.29ea	68		pla				pla
.29eb	a8		tay				tay
.29ec	60		rts				rts
.29ed					_WVType:
.29ed	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.29ef	20 18 15	jsr $1518		jsr	errorHandler
.29f2					TOSToTemp0:
.29f2	b5 98		lda $98,x			lda 	esInt0,x
.29f4	85 2a		sta $2a				sta 	temp0
.29f6	b5 a0		lda $a0,x			lda 	esInt1,x
.29f8	85 2b		sta $2b				sta 	temp0+1
.29fa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.29fb					Command_Poke:
.29fb	a9 01		lda #$01			lda 	#1
.29fd	d0 06		bne $2a05			bne 	PokeGeneral
.29ff					Command_Doke:
.29ff	a9 02		lda #$02			lda 	#2
.2a01	d0 02		bne $2a05			bne 	PokeGeneral
.2a03					Command_Loke:
.2a03	a9 03		lda #$03			lda 	#3
.2a05					PokeGeneral:
.2a05	48		pha				pha 								; save id (PDL = 123)
.2a06	20 02 36	jsr $3602			jsr 	EvaluateRootInteger 		; target address
.2a09	20 1c 3d	jsr $3d1c			jsr	 	CheckComma
.2a0c	e8		inx				inx
.2a0d	20 04 36	jsr $3604			jsr 	EvaluateInteger 			; what value to POKE ?
.2a10	ca		dex				dex
.2a11	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 					; temp0 points to the target address
.2a14	84 32		sty $32				sty 	tempShort 					; save Y
.2a16	68		pla				pla 								; get copy type (1-3) and dispatch
.2a17	aa		tax				tax
.2a18	ca		dex				dex
.2a19	f0 14		beq $2a2f			beq 	_Poke1
.2a1b	ca		dex				dex
.2a1c	f0 0b		beq $2a29			beq 	_Poke2
.2a1e	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2a20	a5 b1		lda $b1				lda 	esInt3+1
.2a22	91 2a		sta ($2a),y			sta 	(temp0),y
.2a24	88		dey				dey
.2a25	a5 a9		lda $a9				lda 	esInt2+1
.2a27	91 2a		sta ($2a),y			sta 	(temp0),y
.2a29					_Poke2:
.2a29	a0 01		ldy #$01			ldy 	#1
.2a2b	a5 a1		lda $a1				lda 	esInt1+1
.2a2d	91 2a		sta ($2a),y			sta 	(temp0),y
.2a2f					_Poke1:
.2a2f	a0 00		ldy #$00			ldy 	#0
.2a31	a5 99		lda $99				lda 	esInt0+1
.2a33	91 2a		sta ($2a),y			sta 	(temp0),y
.2a35	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2a37	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2a38					Command_Rem:
.2a38					Command_Rem2:
.2a38	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2a3a	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2a3c	d0 06		bne $2a44			bne 	_CRNotString
.2a3e	c8		iny				iny
.2a3f	98		tya				tya
.2a40	38		sec				sec
.2a41	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2a43	a8		tay				tay
.2a44					_CRNotString:
.2a44	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2a45					CommandStop:
.2a45	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2a47	20 18 15	jsr $1518		jsr	errorHandler
.2a4a					CommandEnd:
.2a4a	4c 85 3d	jmp $3d85			jmp 	WarmStart
.2a4d					CommandXemu:
.2a4d	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2a50					AdvanceNextLine:
.2a50	a0 00		ldy #$00			ldy 	#0 							; get offset
.2a52	b1 28		lda ($28),y			lda 	(codePtr),y
.2a54	18		clc				clc 								; add to codePtr
.2a55	65 28		adc $28				adc 	codePtr
.2a57	85 28		sta $28				sta 	codePtr
.2a59	90 02		bcc $2a5d			bcc 	_ANLNoCarry
.2a5b	e6 29		inc $29				inc 	codePtr+1
.2a5d					_ANLNoCarry:
.2a5d	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2a5f	f0 e9		beq $2a4a			beq 	CommandEnd 					; execute END
.2a61	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2a63	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2a64					Command_FOR:
.2a64	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2a66	a2 0b		ldx #$0b			ldx 	#11
.2a68	20 37 3d	jsr $3d37			jsr 	RSClaim
.2a6b	20 7d 29	jsr $297d			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2a6e	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2a70	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2a72	d0 4c		bne $2ac0			bne 	_CFType
.2a74	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2a76	20 04 3d	jsr $3d04			jsr 	CheckToken
.2a79	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2a7b	20 04 36	jsr $3604			jsr 	EvaluateInteger				; get terminal value in stack 1
.2a7e	98		tya				tya
.2a7f	48		pha				pha
.2a80	a0 04		ldy #$04			ldy 	#4
.2a82	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2a84	91 37		sta ($37),y			sta 	(rsPointer),y
.2a86	c8		iny				iny
.2a87	a5 a0		lda $a0				lda		esInt1
.2a89	91 37		sta ($37),y			sta 	(rsPointer),y
.2a8b	c8		iny				iny
.2a8c	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2a8e	91 37		sta ($37),y			sta 	(rsPointer),y
.2a90	c8		iny				iny
.2a91	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2a93	91 37		sta ($37),y			sta 	(rsPointer),y
.2a95	c8		iny				iny
.2a96	a5 a1		lda $a1				lda		esInt1+1
.2a98	91 37		sta ($37),y			sta 	(rsPointer),y
.2a9a	c8		iny				iny
.2a9b	a5 a9		lda $a9				lda		esInt2+1
.2a9d	91 37		sta ($37),y			sta 	(rsPointer),y
.2a9f	c8		iny				iny
.2aa0	a5 b1		lda $b1				lda		esInt3+1
.2aa2	91 37		sta ($37),y			sta 	(rsPointer),y
.2aa4	68		pla				pla
.2aa5	a8		tay				tay
.2aa6	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2aa8	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2aaa	d0 0e		bne $2aba			bne 	_CFDone
.2aac	c8		iny				iny									; skip over step.
.2aad	20 04 36	jsr $3604			jsr 	EvaluateInteger 			; get step
.2ab0	98		tya				tya
.2ab1	48		pha				pha
.2ab2	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2ab4	a0 06		ldy #$06			ldy 	#6
.2ab6	91 37		sta ($37),y			sta 	(rsPointer),y
.2ab8	68		pla				pla
.2ab9	a8		tay				tay
.2aba					_CFDone:
.2aba	a9 01		lda #$01			lda 	#1
.2abc	20 63 3d	jsr $3d63			jsr 	RSSavePosition 				; save position.
.2abf	60		rts				rts
.2ac0					_CFType:
.2ac0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ac2	20 18 15	jsr $1518		jsr	errorHandler
.2ac5					Command_NEXT:
.2ac5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2ac7	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ac9	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2acb	f0 05		beq $2ad2			beq 	_isok
.2acd	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2acf	20 18 15	jsr $1518		jsr	errorHandler
.2ad2					_isok:
.2ad2	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2ad4	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2ad6	b0 18		bcs $2af0			bcs 	_CNNoIndex
.2ad8	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2ada	20 3d 36	jsr $363d			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2add	98		tya				tya
.2ade	48		pha				pha
.2adf	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2ae1	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ae3	d5 98		cmp $98,x			cmp 	esInt0,x
.2ae5	d0 76		bne $2b5d			bne 	_CNBadIndex
.2ae7	c8		iny				iny
.2ae8	b1 37		lda ($37),y			lda 	(rsPointer),y
.2aea	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2aec	d0 6f		bne $2b5d			bne 	_CNBadIndex
.2aee	68		pla				pla
.2aef	a8		tay				tay
.2af0					_CNNoIndex:
.2af0	98		tya				tya
.2af1	48		pha				pha
.2af2	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2af4	b1 37		lda ($37),y			lda 	(rsPointer),y
.2af6	85 2a		sta $2a				sta 	temp0
.2af8	c8		iny				iny
.2af9	b1 37		lda ($37),y			lda 	(rsPointer),y
.2afb	85 2b		sta $2b				sta 	temp0+1
.2afd	c8		iny				iny
.2afe	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2b00	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2b02	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2b04	10 01		bpl $2b07			bpl 	_CNSignX
.2b06	ca		dex				dex  								; X = $FF
.2b07					_CNSignX:
.2b07	18		clc				clc 								; add to the LSB
.2b08	a0 00		ldy #$00			ldy 	#0
.2b0a	71 2a		adc ($2a),y			adc 	(temp0),y
.2b0c	91 2a		sta ($2a),y			sta 	(temp0),y
.2b0e					_CNPropogate:
.2b0e	c8		iny				iny  								; add the sign extended in X to the rest.
.2b0f	8a		txa				txa
.2b10	71 2a		adc ($2a),y			adc 	(temp0),y
.2b12	91 2a		sta ($2a),y			sta 	(temp0),y
.2b14	c8		iny				iny
.2b15	8a		txa				txa
.2b16	71 2a		adc ($2a),y			adc 	(temp0),y
.2b18	91 2a		sta ($2a),y			sta 	(temp0),y
.2b1a	c8		iny				iny
.2b1b	8a		txa				txa
.2b1c	71 2a		adc ($2a),y			adc 	(temp0),y
.2b1e	91 2a		sta ($2a),y			sta 	(temp0),y
.2b20	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2b21	a5 37		lda $37				lda 	rsPointer
.2b23	69 07		adc #$07			adc 	#7
.2b25	85 2c		sta $2c				sta 	temp1
.2b27	a9 00		lda #$00			lda 	#0
.2b29	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2b2b	a8		tay				tay 								; and clear the Y register again.
.2b2c	65 38		adc $38				adc 	rsPointer+1
.2b2e	85 2d		sta $2d				sta 	temp1+1
.2b30	38		sec				sec 								; calculate current - limit oring interim values.
.2b31	20 69 2b	jsr $2b69			jsr 	_CNCompare 					; each of these does a byte.
.2b34	20 69 2b	jsr $2b69			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2b37	20 69 2b	jsr $2b69			jsr 	_CNCompare 					; and the carry of the subtraction.
.2b3a	20 69 2b	jsr $2b69			jsr 	_CNCompare
.2b3d	50 02		bvc $2b41			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2b3f	49 80		eor #$80			eor 	#$80
.2b41					_CNNoOverflow:
.2b41	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2b43	30 1d		bmi $2b62			bmi 	_CNCheckDownto
.2b45	c9 00		cmp #$00			cmp 	#0
.2b47	30 0c		bmi $2b55			bmi 	_CNLoopRound 				; loop round if < =
.2b49	a5 2e		lda $2e				lda 	temp2
.2b4b	f0 08		beq $2b55			beq 	_CNLoopRound
.2b4d					_CNLoopExit:
.2b4d	68		pla				pla
.2b4e	a8		tay				tay
.2b4f	a9 0b		lda #$0b			lda 	#11
.2b51	20 59 3d	jsr $3d59			jsr 	RSFree
.2b54	60		rts				rts
.2b55					_CNLoopRound:
.2b55	68		pla				pla
.2b56	a8		tay				tay
.2b57	a9 01		lda #$01			lda 	#1
.2b59	20 76 3d	jsr $3d76			jsr 	RSLoadPosition				; go back to the loop top
.2b5c	60		rts				rts
.2b5d					_CNBadIndex:
.2b5d	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2b5f	20 18 15	jsr $1518		jsr	errorHandler
.2b62					_CNCheckDownto:
.2b62	c9 00		cmp #$00			cmp 	#0
.2b64	10 ef		bpl $2b55			bpl 	_CNLoopRound
.2b66	4c 4d 2b	jmp $2b4d			jmp 	_CNLoopExit
.2b69					_CNCompare:
.2b69	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2b6b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2b6d	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2b6f	85 2e		sta $2e				sta 	temp2
.2b71	c8		iny				iny
.2b72	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2b73					CommandIf:
.2b73	20 02 36	jsr $3602			jsr 	EvaluateRootInteger 		; get what's being tested.
.2b76	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2b78	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2b7a	f0 04		beq $2b80			beq 	_IfSimple
.2b7c	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2b7e	d0 1b		bne $2b9b			bne 	_IfComplex
.2b80					_IfSimple:
.2b80	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero					; check if TOS zero
.2b83	f0 10		beq $2b95			beq 	_IfEOL 						; go to next line.
.2b85	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2b87	c8		iny				iny
.2b88	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2b8a	f0 0c		beq $2b98			beq 	_IfGoto 					; do the Goto code
.2b8c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2b8e	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2b90	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2b92	f0 04		beq $2b98			beq 	_IfGoto
.2b94	60		rts				rts 								; else continue on this line.
.2b95					_IfEOL:
.2b95	4c 50 2a	jmp $2a50			jmp 	AdvanceNextLine 			; go to next line
.2b98					_IfGoto:
.2b98	4c 87 27	jmp $2787			jmp 	CommandGoto
.2b9b					_IfComplex:
.2b9b	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero 					; is it true ?
.2b9e	f0 01		beq $2ba1			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2ba0	60		rts				rts 								; else continue.
.2ba1					_IFSkip:
.2ba1	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2ba3	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2ba5	4c 3d 2e	jmp $2e3d			jmp		ScanForward
.2ba8					Command_ELSE:
.2ba8	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2baa	8a		txa				txa
.2bab	4c 3d 2e	jmp $2e3d			jmp		ScanForward
.2bae					Command_ENDIF:
.2bae	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d43					storeSize:
>0d43							.fill 	1
.2baf					CommandLocal:
.2baf	a2 00		ldx #$00			ldx 	#0
.2bb1	20 cd 2b	jsr $2bcd			jsr 	LocaliseVariable 			; localise one.
.2bb4					_CLCheckNext:
.2bb4	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2bb6	c8		iny				iny
.2bb7	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2bb9	f0 06		beq $2bc1			beq 	_CLAssignment
.2bbb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2bbd	f0 f0		beq $2baf			beq 	CommandLocal
.2bbf	88		dey				dey
.2bc0	60		rts				rts
.2bc1					_CLAssignment:
.2bc1	a2 01		ldx #$01			ldx 	#1
.2bc3	20 e5 35	jsr $35e5			jsr 	Evaluate 					; evaluate RHS
.2bc6	ca		dex				dex
.2bc7	20 90 29	jsr $2990			jsr 	WriteValue
.2bca	4c b4 2b	jmp $2bb4			jmp 	_CLCheckNext
.2bcd					LocaliseVariable:
.2bcd	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2bcf	c9 40		cmp #$40			cmp 	#$40
.2bd1	b0 67		bcs $2c3a			bcs 	_LVSyntax
.2bd3	8a		txa				txa 								; get the address of that variable.
.2bd4	a2 02		ldx #$02		ldx	#2
.2bd6	20 9c 4c	jsr $4c9c		jsr	variableHandler
.2bd9	aa		tax				tax
.2bda	8a		txa				txa
.2bdb	48		pha				pha
.2bdc	98		tya				tya
.2bdd	48		pha				pha
.2bde	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2be1	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2be3	0a		asl a				asl 	a
.2be4	10 16		bpl $2bfc			bpl 	_LVPushNumber
.2be6	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2be8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bea	c8		iny				iny
.2beb	85 2c		sta $2c				sta 	temp1
.2bed	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bef	85 2d		sta $2d				sta 	temp1+1
.2bf1	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2bf3	b1 2c		lda ($2c),y			lda 	(temp1),y
.2bf5	aa		tax				tax 								; into X
.2bf6	e8		inx				inx 								; +1 for length.
.2bf7	a9 24		lda #$24			lda 	#markerString
.2bf9	4c 11 2c	jmp $2c11			jmp 	_LVWriteFrame
.2bfc					_LVPushNumber:
.2bfc	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2bfe	85 2c		sta $2c				sta 	temp1
.2c00	a5 2b		lda $2b				lda 	temp0+1
.2c02	85 2d		sta $2d				sta 	temp1+1
.2c04	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2c06	4a		lsr a				lsr 	a
.2c07	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2c09	a2 04		ldx #$04			ldx 	#VarISize
.2c0b	90 04		bcc $2c11			bcc 	_LVIsInteger
.2c0d	a9 23		lda #$23			lda 	#markerFloat
.2c0f	a2 06		ldx #$06			ldx 	#VarFSize
.2c11					_LVIsInteger:
.2c11					_LVWriteFrame:
.2c11	8e 43 0d	stx $0d43			stx 	storeSize 					; number of bytes to copy from (temp0)
.2c14	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2c15	e8		inx				inx
.2c16	e8		inx				inx
.2c17	20 37 3d	jsr $3d37			jsr 	RSClaim 					; create the stack frame.
.2c1a	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2c1c	a0 01		ldy #$01			ldy 	#1
.2c1e	91 37		sta ($37),y			sta 	(rsPointer),y
.2c20	c8		iny				iny
.2c21	a5 2b		lda $2b				lda 	temp0+1
.2c23	91 37		sta ($37),y			sta 	(rsPointer),y
.2c25	a0 00		ldy #$00			ldy 	#0
.2c27					_LVCopyData:
.2c27	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2c29	c8		iny				iny 								; write allowing for the header bit.
.2c2a	c8		iny				iny
.2c2b	c8		iny				iny
.2c2c	91 37		sta ($37),y			sta 	(rsPointer),y
.2c2e	88		dey				dey
.2c2f	88		dey				dey
.2c30	ce 43 0d	dec $0d43			dec 	storeSize 					; do it storesize times
.2c33	d0 f2		bne $2c27			bne 	_LVCopyData
.2c35	68		pla				pla
.2c36	a8		tay				tay
.2c37	68		pla				pla
.2c38	aa		tax				tax
.2c39	60		rts				rts
.2c3a					_LVSyntax:
.2c3a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2c3c	20 18 15	jsr $1518		jsr	errorHandler
.2c3f					RestoreLocals:
.2c3f	a2 00		ldx #$00			ldx 	#0
.2c41	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c43	c9 40		cmp #$40			cmp	 	#64
.2c45	90 01		bcc $2c48			bcc 	_RLocal
.2c47	60		rts				rts
.2c48					_RLocal:
.2c48	8a		txa				txa
.2c49	48		pha				pha
.2c4a	98		tya				tya
.2c4b	48		pha				pha
.2c4c	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2c4e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c50	85 2a		sta $2a				sta 	temp0
.2c52	c8		iny				iny
.2c53	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c55	85 2b		sta $2b				sta 	temp0+1
.2c57	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2c59	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c5b	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2c5d	f0 28		beq $2c87			beq 	_RString
.2c5f	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2c61	c9 25		cmp #$25			cmp 	#markerInt
.2c63	f0 02		beq $2c67			beq 	_RIsInteger
.2c65	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2c67					_RIsInteger:
.2c67	8a		txa				txa
.2c68	48		pha				pha
.2c69	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2c6b					_RCopyBack:
.2c6b	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c6d	88		dey				dey
.2c6e	88		dey				dey
.2c6f	88		dey				dey
.2c70	91 2a		sta ($2a),y			sta 	(temp0),y
.2c72	c8		iny				iny
.2c73	c8		iny				iny
.2c74	c8		iny				iny
.2c75	c8		iny				iny
.2c76	ca		dex				dex
.2c77	d0 f2		bne $2c6b			bne 	_RCopyBack
.2c79	68		pla				pla 								; get size add 3
.2c7a	18		clc				clc
.2c7b	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2c7d					_RRestoreAAndLoop:
.2c7d	20 59 3d	jsr $3d59			jsr 	RSFree
.2c80	68		pla				pla
.2c81	a8		tay				tay
.2c82	68		pla				pla
.2c83	aa		tax				tax
.2c84	4c 3f 2c	jmp $2c3f			jmp 	RestoreLocals 				; go see if there are any more locals.
.2c87					_RString:
.2c87	a2 00		ldx #$00			ldx 	#0
.2c89	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2c8b	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c8d	95 98		sta $98,x			sta 	esInt0,x
.2c8f	c8		iny				iny
.2c90	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c92	95 a0		sta $a0,x			sta 	esInt1,x
.2c94	18		clc				clc
.2c95	a5 37		lda $37				lda 	rsPointer
.2c97	69 03		adc #$03			adc 	#3
.2c99	95 99		sta $99,x			sta 	esInt0+1,x
.2c9b	a5 38		lda $38				lda 	rsPointer+1
.2c9d	69 00		adc #$00			adc 	#0
.2c9f	95 a1		sta $a1,x			sta 	esInt1+1,x
.2ca1	8a		txa				txa
.2ca2	a2 10		ldx #$10		ldx	#16
.2ca4	20 47 40	jsr $4047		jsr	stringHandler
.2ca7	a0 03		ldy #$03			ldy 	#3 							; get string length
.2ca9	b1 37		lda ($37),y			lda 	(rsPointer),y
.2cab	18		clc				clc
.2cac	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2cae	4c 7d 2c	jmp $2c7d			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d44					paramCount:
>0d44							.fill 	1
.2cb1					CallProc:
.2cb1	20 39 2d	jsr $2d39			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2cb4	48		pha				pha 								; save length on stack
.2cb5	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2cb7	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2cb9	48		pha				pha
.2cba	a5 2a		lda $2a				lda 	temp0
.2cbc	48		pha				pha
.2cbd	98		tya				tya 								; calculate Y + length
.2cbe	18		clc				clc
.2cbf	65 32		adc $32				adc 	tempShort
.2cc1	a8		tay				tay
.2cc2	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2cc4					_CallProcEvalParams:
.2cc4	e8		inx				inx
.2cc5	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2cc7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2cc9	f0 0b		beq $2cd6			beq 	_CPDoneParams
.2ccb	20 e5 35	jsr $35e5			jsr 	Evaluate 					; evaluate a parameter
.2cce	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2cd0	c8		iny				iny
.2cd1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2cd3	f0 ef		beq $2cc4			beq 	_CallProcEvalParams
.2cd5	88		dey				dey 								; undo consumption.
.2cd6					_CPDoneParams:
.2cd6	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; check closing parenthesis.
.2cd9	8e 44 0d	stx $0d44			stx 	paramCount 					; store parameter count+1
.2cdc	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2cde	a9 50		lda #$50			lda 	#markerPROC
.2ce0	20 37 3d	jsr $3d37			jsr 	RSClaim
.2ce3	a9 01		lda #$01			lda 	#1 							; store return address.
.2ce5	20 63 3d	jsr $3d63			jsr 	RSSavePosition
.2ce8	68		pla				pla 								; get the new code Ptr
.2ce9	85 28		sta $28				sta 	codePtr
.2ceb	68		pla				pla
.2cec	85 29		sta $29				sta 	codePtr+1
.2cee	68		pla				pla 								; length of name + 4 is the param start.
.2cef	18		clc				clc
.2cf0	69 04		adc #$04			adc 	#4
.2cf2	a8		tay				tay
.2cf3	a2 ff		ldx #$ff			ldx 	#$FF
.2cf5					_CPLoadParameters:
.2cf5	e8		inx				inx 								; point to where the address should be loaded.
.2cf6	ec 44 0d	cpx $0d44			cpx 	paramCount 					; too many parameters in definition ?
.2cf9	f0 1e		beq $2d19			beq 	_CPParamError
.2cfb	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2cfd	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2cff	f0 0e		beq $2d0f			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2d01	20 cd 2b	jsr $2bcd			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2d04	20 90 29	jsr $2990			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2d07	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2d09	c8		iny				iny
.2d0a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2d0c	f0 e7		beq $2cf5			beq 	_CPLoadParameters
.2d0e	88		dey				dey 								; no, unconsume and check for )
.2d0f					_CPParamComplete:
.2d0f	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; check )
.2d12	e8		inx				inx 								; check right number of parameters have been consumed
.2d13	ec 44 0d	cpx $0d44			cpx 	paramCount
.2d16	d0 01		bne $2d19			bne 	_CPParamError
.2d18	60		rts				rts
.2d19					_CPParamError:
.2d19	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2d1b	20 18 15	jsr $1518		jsr	errorHandler
.2d1e					ReturnProc:
.2d1e	20 3f 2c	jsr $2c3f			jsr 	RestoreLocals 				; get the locals back.
.2d21	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d23	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d25	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2d27	f0 05		beq $2d2e			beq 	_isok
.2d29	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2d2b	20 18 15	jsr $1518		jsr	errorHandler
.2d2e					_isok:
.2d2e	a9 01		lda #$01			lda 	#1
.2d30	20 76 3d	jsr $3d76			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2d33	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2d35	20 59 3d	jsr $3d59			jsr 	RSFree
.2d38	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d45					procList:
>0d45							.fill 	2		 					; terminated by name high being zero.
.0d47					yInLine:
>0d47							.fill 	1
.2d39					FindProcedure:
.2d39	8c 47 0d	sty $0d47			sty 	yInLine 					; save current position.
.2d3c	20 f7 2d	jsr $2df7			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2d3f	85 2c		sta $2c				sta 	temp1
.2d41	ad 45 0d	lda $0d45			lda		procList 					; put procList address in temp2
.2d44	85 2e		sta $2e				sta 	temp2
.2d46	ad 46 0d	lda $0d46			lda 	procList+1
.2d49	85 2f		sta $2f				sta 	temp2+1
.2d4b	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2d4d					_FPLoop:
.2d4d	b1 2e		lda ($2e),y			lda 	(temp2),y
.2d4f	f0 4f		beq $2da0			beq 	_FPError 					; if so, we don't know this procedure.
.2d51	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2d53	c8		iny				iny
.2d54	b1 2e		lda ($2e),y			lda 	(temp2),y
.2d56	85 2a		sta $2a				sta 	temp0
.2d58	c8		iny				iny
.2d59	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2d5b	c5 2c		cmp $2c				cmp 	temp1
.2d5d	d0 2b		bne $2d8a			bne 	_FPNext 					; hash is different, go to next.
.2d5f	38		sec				sec
.2d60	ad 47 0d	lda $0d47			lda 	yInLine 					; position in line must be at least 4
.2d63	e9 04		sbc #$04			sbc 	#4
.2d65	18		clc				clc
.2d66	65 28		adc $28				adc 	codePtr
.2d68	85 30		sta $30				sta 	temp3
.2d6a	a5 29		lda $29				lda 	codePtr+1
.2d6c	69 00		adc #$00			adc 	#0
.2d6e	85 31		sta $31				sta 	temp3+1
.2d70	98		tya				tya
.2d71	48		pha				pha
.2d72	a0 04		ldy #$04			ldy 	#4
.2d74					_FPCName:
.2d74	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2d76	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2d78	d0 0e		bne $2d88			bne 	_FPpulYNext 				; if different go to next one.
.2d7a	c8		iny				iny
.2d7b	c9 3a		cmp #$3a			cmp 	#$3A
.2d7d	90 f5		bcc $2d74			bcc 	_FPCName 					; compare the whole lot....
.2d7f	68		pla				pla 								; throw away the saved Y
.2d80	98		tya				tya 								; length of name is Y-4
.2d81	38		sec				sec
.2d82	e9 04		sbc #$04			sbc 	#4
.2d84	ac 47 0d	ldy $0d47			ldy 	yInLine  					; get the original Y back
.2d87	60		rts				rts
.2d88					_FPpulYNext:
.2d88	68		pla				pla
.2d89	a8		tay				tay
.2d8a					_FPNext:
.2d8a	c8		iny				iny 								; next procedure record.
.2d8b	10 c0		bpl $2d4d			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2d8d	98		tya				tya 								; subtract 128 from Y
.2d8e	38		sec				sec
.2d8f	e9 80		sbc #$80			sbc 	#128
.2d91	a8		tay				tay
.2d92	18		clc				clc 								; add 128 to temp2, so we can have more than
.2d93	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2d95	69 80		adc #$80			adc 	#128
.2d97	85 2e		sta $2e				sta 	temp2
.2d99	90 b2		bcc $2d4d			bcc 	_FPLoop
.2d9b	e6 2f		inc $2f				inc 	temp2+1
.2d9d	4c 4d 2d	jmp $2d4d			jmp 	_FPLoop
.2da0					_FPError:
.2da0	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2da2	20 18 15	jsr $1518		jsr	errorHandler
.2da5					ScanProc:
.2da5	98		tya				tya
.2da6	48		pha				pha
.2da7	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2da9	8d 45 0d	sta $0d45			sta 	procList
.2dac	a5 36		lda $36				lda 	lowMemory+1
.2dae	8d 46 0d	sta $0d46			sta 	procList+1
.2db1	20 23 31	jsr $3123			jsr 	ResetCodeAddress 			; back to the start.
.2db4					_ScanLoop:
.2db4	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2db6	b1 28		lda ($28),y			lda 	(codePtr),y
.2db8	f0 2a		beq $2de4			beq 	_ScanExit
.2dba	a0 03		ldy #$03			ldy 	#3							; get first token
.2dbc	b1 28		lda ($28),y			lda 	(codePtr),y
.2dbe	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2dc0	d0 12		bne $2dd4			bne 	_ScanNext
.2dc2	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2dc4	20 ec 2d	jsr $2dec			jsr 	_ScanWrite
.2dc7	a5 28		lda $28				lda 	codePtr
.2dc9	20 ec 2d	jsr $2dec			jsr 	_ScanWrite
.2dcc	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2dce	20 f7 2d	jsr $2df7			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2dd1	20 ec 2d	jsr $2dec			jsr 	_ScanWrite					; and write that
.2dd4					_ScanNext:
.2dd4	18		clc				clc
.2dd5	a0 00		ldy #$00			ldy 	#0
.2dd7	b1 28		lda ($28),y			lda 	(codePtr),y
.2dd9	65 28		adc $28				adc 	codePtr
.2ddb	85 28		sta $28				sta 	codePtr
.2ddd	90 d5		bcc $2db4			bcc 	_ScanLoop
.2ddf	e6 29		inc $29				inc 	codePtr+1
.2de1	4c b4 2d	jmp $2db4			jmp 	_ScanLoop
.2de4					_ScanExit:
.2de4	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2de6	20 ec 2d	jsr $2dec			jsr 	_ScanWrite
.2de9	68		pla				pla
.2dea	a8		tay				tay
.2deb	60		rts				rts
.2dec					_ScanWrite:
.2dec	a0 00		ldy #$00			ldy 	#0
.2dee	91 35		sta ($35),y			sta 	(lowMemory),y
.2df0	e6 35		inc $35				inc 	lowMemory
.2df2	d0 02		bne $2df6			bne 	_SWNoCarry
.2df4	e6 36		inc $36				inc 	lowMemory+1
.2df6					_SWNoCarry:
.2df6	60		rts				rts
.2df7					CalculateProcedureHash:
.2df7	a9 00		lda #$00			lda 	#0 							; clear hash.
.2df9	85 2a		sta $2a				sta 	temp0
.2dfb					_CPHLoop:
.2dfb	18		clc				clc 								; add character and rotate and add carry back in
.2dfc	b1 28		lda ($28),y			lda 	(codePtr),y
.2dfe	65 2a		adc $2a				adc 	temp0
.2e00	6a		ror a				ror 	a
.2e01	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2e03	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2e05	b1 28		lda ($28),y			lda 	(codePtr),y
.2e07	c8		iny				iny 								; advance incase we go round again.
.2e08	c9 3a		cmp #$3a			cmp 	#$3A
.2e0a	90 ef		bcc $2dfb			bcc 	_CPHLoop
.2e0c	a5 2a		lda $2a				lda 	temp0
.2e0e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2e0f					Command_Repeat:
.2e0f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2e11	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2e13	20 37 3d	jsr $3d37			jsr 	RSClaim
.2e16	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2e18	20 63 3d	jsr $3d63			jsr 	RSSavePosition
.2e1b	60		rts				rts
.2e1c					Command_Until:
.2e1c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2e1e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2e20	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2e22	f0 05		beq $2e29			beq 	_isok
.2e24	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2e26	20 18 15	jsr $1518		jsr	errorHandler
.2e29					_isok:
.2e29	20 02 36	jsr $3602			jsr 	EvaluateRootInteger 		; at the bottom.
.2e2c	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero					; check if TOS zero
.2e2f	d0 06		bne $2e37			bne 	_CUExit
.2e31	a9 01		lda #$01			lda 	#1
.2e33	20 76 3d	jsr $3d76			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2e36	60		rts				rts
.2e37					_CUExit:
.2e37	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2e39	20 59 3d	jsr $3d59			jsr 	RSFree
.2e3c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2e3d					ScanForward:
.2e3d	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2e3f	86 2d		stx $2d				stx 	temp1+1
.2e41	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2e43	85 2e		sta $2e				sta 	temp2
.2e45	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2e47	c8		iny				iny
.2e48	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2e4a	d0 08		bne $2e54			bne 	_SFNoCheck 					; if so, check token against entered values.
.2e4c	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2e4e	f0 24		beq $2e74			beq 	_SFExit 					; at the same strcture depth.
.2e50	c5 2d		cmp $2d				cmp 	temp1+1
.2e52	f0 20		beq $2e74			beq 	_SFExit
.2e54					_SFNoCheck:
.2e54	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2e56	90 ed		bcc $2e45			bcc 	_SFLoop
.2e58	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2e5a	90 19		bcc $2e75			bcc 	_SFSpecials
.2e5c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2e5e	90 e5		bcc $2e45			bcc 	_SFLoop
.2e60	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2e62	b0 e1		bcs $2e45			bcs 	_SFLoop
.2e64	aa		tax				tax  								; token in X, and look up the adjuster.
.2e65	bd 20 35	lda $3520,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2e68	38		sec				sec 								; convert to an offset ($FF,$01)
.2e69	e9 81		sbc #$81			sbc 	#$81
.2e6b	18		clc				clc 								; add to depth
.2e6c	65 2e		adc $2e				adc 	temp2
.2e6e	85 2e		sta $2e				sta 	temp2
.2e70	10 d3		bpl $2e45			bpl 	_SFLoop 					; +ve okay to continue
.2e72	30 07		bmi $2e7b			bmi 	SFError 					; if gone -ve then we have a nesting error
.2e74	60		rts		_SFExit:rts
.2e75					_SFSpecials:
.2e75	20 80 2e	jsr $2e80			jsr 	ScannerSkipSpecial
.2e78	4c 45 2e	jmp $2e45			jmp 	_SFLoop
.2e7b					SFError:
.2e7b	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2e7d	20 18 15	jsr $1518		jsr	errorHandler
.2e80					ScannerSkipSpecial:
.2e80	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2e82	f0 10		beq $2e94			beq 	_SFNextLine
.2e84	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2e86	f0 2b		beq $2eb3			beq 	_SFFloatSkip
.2e88	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2e8a	f0 02		beq $2e8e			beq 	_SFSkipString
.2e8c	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2e8d	60		rts				rts 								; token.
.2e8e					_SFSkipString:
.2e8e	98		tya				tya
.2e8f	38		sec				sec
.2e90	71 28		adc ($28),y			adc 	(codePtr),y
.2e92	a8		tay				tay
.2e93	60		rts				rts
.2e94					_SFNextLine:
.2e94	a0 00		ldy #$00			ldy 	#0 							; get offset
.2e96	b1 28		lda ($28),y			lda 	(codePtr),y
.2e98	18		clc				clc 								; add to code pointer.
.2e99	65 28		adc $28				adc 	codePtr
.2e9b	85 28		sta $28				sta 	codePtr
.2e9d	90 02		bcc $2ea1			bcc		_SFNLNoCarry
.2e9f	e6 29		inc $29				inc 	codePtr+1
.2ea1					_SFNLNoCarry:
.2ea1	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2ea3	d0 0b		bne $2eb0			bne		_SFXNL 						; no go round again
.2ea5	a5 2c		lda $2c				lda 	temp1
.2ea7	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2ea9	d0 d0		bne $2e7b			bne 	SFError 					; read uses this to search for data statements
.2eab	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2ead	20 18 15	jsr $1518		jsr	errorHandler
.2eb0	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2eb2	60		rts				rts
.2eb3					_SFFloatSkip:
.2eb3	98		tya				tya 								; skip over an embedded float.
.2eb4	18		clc				clc
.2eb5	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2eb7	a8		tay				tay
.2eb8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2eb9					Command_While:
.2eb9	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2ebb	a2 04		ldx #$04			ldx 	#4
.2ebd	20 37 3d	jsr $3d37			jsr 	RSClaim 					; create on stack.
.2ec0	88		dey				dey
.2ec1	a9 01		lda #$01			lda 	#1
.2ec3	20 63 3d	jsr $3d63			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2ec6	c8		iny				iny
.2ec7	20 02 36	jsr $3602			jsr 	EvaluateRootInteger			; get the conditional
.2eca	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2ecd	f0 01		beq $2ed0			beq 	_CWFail
.2ecf	60		rts				rts
.2ed0					_CWFail:
.2ed0	a9 04		lda #$04			lda 	#4
.2ed2	20 59 3d	jsr $3d59			jsr 	RSFree 						; close the just opened position.
.2ed5	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2ed7	aa		tax				tax
.2ed8	20 3d 2e	jsr $2e3d			jsr 	ScanForward
.2edb	60		rts				rts
.2edc					Command_Wend:
.2edc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2ede	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2ee0	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2ee2	f0 05		beq $2ee9			beq 	_isok
.2ee4	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2ee6	20 18 15	jsr $1518		jsr	errorHandler
.2ee9					_isok:
.2ee9	a9 01		lda #$01			lda 	#1
.2eeb	20 76 3d	jsr $3d76			jsr 	RSLoadPosition				; go back until true
.2eee	a9 04		lda #$04			lda 	#4
.2ef0	20 59 3d	jsr $3d59			jsr 	RSFree 						; close the loop
.2ef3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2ef4					CommandClear:
.2ef4					XCommandClear:
.2ef4	98		tya				tya
.2ef5	48		pha				pha
.2ef6	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2ef9	85 33		sta $33				sta 	highMemory
.2efb	ad cd 0a	lda $0acd			lda 	endMemory+1
.2efe	85 34		sta $34				sta 	highMemory+1
.2f00	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2f03	85 2a		sta $2a				sta 	temp0
.2f05	ad c9 0a	lda $0ac9			lda 	basePage+1
.2f08	85 2b		sta $2b				sta 	temp0+1
.2f0a					_CCFindEnd:
.2f0a	a0 00		ldy #$00			ldy 	#0
.2f0c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f0e	f0 0c		beq $2f1c			beq 	_CCFoundEnd 				; offset zero is end.
.2f10	18		clc				clc
.2f11	65 2a		adc $2a				adc 	temp0 						; move to next line
.2f13	85 2a		sta $2a				sta 	temp0
.2f15	90 f3		bcc $2f0a			bcc 	_CCFindEnd
.2f17	e6 2b		inc $2b				inc 	temp0+1
.2f19	4c 0a 2f	jmp $2f0a			jmp 	_CCFindEnd
.2f1c					_CCFoundEnd:
.2f1c	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2f1e	85 35		sta $35				sta 	lowMemory
.2f20	a5 2b		lda $2b				lda 	temp0+1
.2f22	85 36		sta $36				sta 	lowMemory+1
.2f24	18		clc				clc 								; put temp0+1 in endProgram
.2f25	a5 2a		lda $2a				lda 	temp0
.2f27	69 01		adc #$01			adc 	#1
.2f29	8d ca 0a	sta $0aca			sta 	endProgram
.2f2c	a5 2b		lda $2b				lda 	temp0+1
.2f2e	69 00		adc #$00			adc 	#0
.2f30	8d cb 0a	sta $0acb			sta 	endProgram+1
.2f33	18		clc				clc 								; put a bit of space in.
.2f34	a5 35		lda $35				lda 	lowMemory
.2f36	69 04		adc #$04			adc 	#4
.2f38	85 35		sta $35				sta 	lowMemory
.2f3a	90 02		bcc $2f3e			bcc 	_CCNoCarry
.2f3c	e6 36		inc $36				inc 	lowMemory+1
.2f3e					_CCNoCarry:
.2f3e	20 29 3d	jsr $3d29			jsr 	RSReset 					; reset the return stack.
.2f41	a2 06		ldx #$06		ldx	#6
.2f43	20 9c 4c	jsr $4c9c		jsr	variableHandler
.2f46	20 a5 2d	jsr $2da5			jsr 	ScanProc 					; scan for procedures
.2f49	20 2a 27	jsr $272a			jsr 	CommandRestore 				; do a restore
.2f4c	68		pla				pla
.2f4d	a8		tay				tay
.2f4e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d48					structIndent:
>0d48							.fill 	1
.2f4f					CommandList:
.2f4f	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2f51	8e 48 0d	stx $0d48			stx 	structIndent
.2f54	20 9c 3c	jsr $3c9c			jsr 	MInt32False
.2f57	e8		inx				inx
.2f58	20 98 3c	jsr $3c98			jsr 	MInt32True
.2f5b	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2f5d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2f5f	f0 15		beq $2f76			beq 	_CLEndLine
.2f61	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2f63	30 1b		bmi $2f80			bmi 	_CLDoListing 				; do the whole lot.
.2f65	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2f67	20 04 36	jsr $3604			jsr 	EvaluateInteger
.2f6a	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2f6c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2f6e	f0 06		beq $2f76			beq 	_CLEndLine
.2f70	20 da 3b	jsr $3bda			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2f73	4c 80 2f	jmp $2f80			jmp 	_CLDoListing 				; own e.g. list 1100
.2f76					_CLEndLine:
.2f76	c8		iny				iny 								; skip comma
.2f77	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2f79	30 05		bmi $2f80			bmi 	_CLDoListing
.2f7b	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2f7d	20 04 36	jsr $3604			jsr 	EvaluateInteger				; get end
.2f80					_CLDoListing:
.2f80	20 23 31	jsr $3123			jsr 	ResetCodeAddress 			; back to the start.
.2f83					_CLCheckLoop:
.2f83	a2 02		ldx #$02		ldx	#2
.2f85	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f88	a0 00		ldy #$00			ldy 	#0							; check end.
.2f8a	b1 28		lda ($28),y			lda 	(codePtr),y
.2f8c	f0 41		beq $2fcf			beq 	_CLEnd
.2f8e	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2f90	20 d2 2f	jsr $2fd2			jsr 	CLCompareLineTOS
.2f93	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2f95	f0 28		beq $2fbf			beq 	_CLNext
.2f97	e8		inx				inx
.2f98	20 d2 2f	jsr $2fd2			jsr 	CLCompareLineTOS 			; compare vs higher
.2f9b	c9 01		cmp #$01			cmp 	#1
.2f9d	f0 20		beq $2fbf			beq 	_CLNext
.2f9f	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2fa1	20 f4 2f	jsr $2ff4			jsr 	CLStructureCheck
.2fa4	ad 48 0d	lda $0d48			lda 	structIndent 				; indent level.
.2fa7	10 02		bpl $2fab			bpl 	_CLPositive
.2fa9	a9 00		lda #$00			lda 	#0
.2fab					_CLPositive:
.2fab	a2 04		ldx #$04		ldx	#4
.2fad	20 cb 48	jsr $48cb		jsr	tokeniserHandler
.2fb0	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2fb2	20 f4 2f	jsr $2ff4			jsr 	CLStructureCheck
.2fb5	ad 48 0d	lda $0d48			lda 	structIndent
.2fb8	10 05		bpl $2fbf			bpl 	_CLNext
.2fba	a9 00		lda #$00			lda 	#0
.2fbc	8d 48 0d	sta $0d48			sta 	structIndent
.2fbf					_CLNext:
.2fbf	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2fc1	b1 28		lda ($28),y			lda 	(codePtr),y
.2fc3	18		clc				clc
.2fc4	65 28		adc $28				adc 	codePtr
.2fc6	85 28		sta $28				sta 	codePtr
.2fc8	90 b9		bcc $2f83			bcc 	_CLCheckLoop
.2fca	e6 29		inc $29				inc 	codePtr+1
.2fcc	4c 83 2f	jmp $2f83			jmp 	_CLCheckLoop
.2fcf					_CLEnd:
.2fcf	4c 85 3d	jmp $3d85			jmp 	WarmStart 					; warm start after list.
.2fd2					CLCompareLineTOS:
.2fd2	a0 01		ldy #$01			ldy 	#1
.2fd4	b1 28		lda ($28),y			lda 	(codePtr),y
.2fd6	55 98		eor $98,x			eor 	esInt0,x
.2fd8	85 2a		sta $2a				sta 	temp0
.2fda	c8		iny				iny
.2fdb	b1 28		lda ($28),y			lda 	(codePtr),y
.2fdd	55 a0		eor $a0,x			eor 	esInt1,x
.2fdf	05 2a		ora $2a				ora 	temp0
.2fe1	f0 10		beq $2ff3			beq 	_CLCLTExit
.2fe3	88		dey				dey
.2fe4	b1 28		lda ($28),y			lda 	(codePtr),y
.2fe6	d5 98		cmp $98,x			cmp 	esInt0,x
.2fe8	c8		iny				iny
.2fe9	b1 28		lda ($28),y			lda 	(codePtr),y
.2feb	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2fed	a9 ff		lda #$ff			lda 	#255
.2fef	90 02		bcc $2ff3			bcc 	_CLCLTExit
.2ff1	a9 01		lda #$01			lda 	#1
.2ff3					_CLCLTExit:
.2ff3	60		rts				rts
.2ff4					CLStructureCheck:
.2ff4	85 2a		sta $2a				sta 	temp0
.2ff6	a0 03		ldy #$03			ldy 	#3
.2ff8					_CLSCLoop:
.2ff8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2ffa	c8		iny				iny
.2ffb	c9 80		cmp #$80			cmp 	#$80
.2ffd	90 f9		bcc $2ff8			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2fff	f0 28		beq $3029			beq		_CLSCExit					; EOL return
.3001	c9 86		cmp #$86			cmp 	#$86 						; special handler
.3003	90 1e		bcc $3023			bcc 	_CLSCSpecial
.3005	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.3007	90 ef		bcc $2ff8			bcc 	_CLSCLoop
.3009	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.300b	b0 eb		bcs $2ff8			bcs 	_CLSCLoop
.300d	aa		tax				tax 								; get adjustment
.300e	bd 20 35	lda $3520,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3011	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.3013	d0 e3		bne $2ff8			bne 	_CLSCLoop
.3015	38		sec				sec
.3016	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.3018	0a		asl a				asl 	a 							; double indent step
.3019	18		clc				clc
.301a	6d 48 0d	adc $0d48			adc 	structIndent 				; add to structure indent
.301d	8d 48 0d	sta $0d48			sta 	structIndent
.3020	4c f8 2f	jmp $2ff8			jmp 	_CLSCLoop
.3023					_CLSCSpecial:
.3023	20 80 2e	jsr $2e80			jsr 	ScannerSkipSpecial
.3026	4c f8 2f	jmp $2ff8			jmp 	_CLSCLoop
.3029					_CLSCExit:
.3029	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.302a					CommandLoad:
.302a	20 52 30	jsr $3052			jsr 	CLSParameters 					; get parameters for load.
.302d	08		php				php
.302e	a2 0e		ldx #$0e		ldx	#14
.3030	20 f6 14	jsr $14f6		jsr	deviceHandler
.3033	28		plp				plp
.3034	b0 08		bcs $303e			bcs 	_CLExit 						; if CC then load a program, so warm start.
.3036	20 f4 2e	jsr $2ef4			jsr 	CommandClear
.3039	a2 04		ldx #$04		ldx	#4
.303b	20 ec 26	jsr $26ec		jsr	interactionHandler
.303e					_CLExit
.303e	60		rts				rts
.303f					CommandSave:
.303f	20 52 30	jsr $3052			jsr 	CLSParameters					; get parameters for save
.3042	90 08		bcc $304c			bcc 	_CSNoOverrideAddress
.3044	20 1c 3d	jsr $3d1c			jsr 	CheckComma 						; should be a comma.
.3047	a2 02		ldx #$02			ldx 	#2
.3049	20 04 36	jsr $3604			jsr 	EvaluateInteger 				; get save end address.
.304c					_CSNoOverrideAddress:
.304c	a2 18		ldx #$18		ldx	#24
.304e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3051	60		rts				rts
.3052					CLSParameters:
.3052	a2 00		ldx #$00			ldx 	#0 								; string
.3054	20 f9 35	jsr $35f9			jsr 	EvaluateString
.3057	e8		inx				inx 									; erase out +1 +2
.3058	20 9c 3c	jsr $3c9c			jsr 	MInt32False
.305b	e8		inx				inx
.305c	20 9c 3c	jsr $3c9c			jsr 	MInt32False
.305f	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.3062	85 99		sta $99				sta 	esInt0+1
.3064	ad c9 0a	lda $0ac9			lda 	basePage+1
.3067	85 a1		sta $a1				sta 	esInt1+1
.3069	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.306c	85 9a		sta $9a				sta 	esInt0+2
.306e	ad cb 0a	lda $0acb			lda 	endProgram+1
.3071	85 a2		sta $a2				sta 	esInt1+2
.3073	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.3075	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3077	d0 08		bne $3081			bne 	_CLSDefault
.3079	c8		iny				iny 									; skip comma
.307a	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.307c	20 04 36	jsr $3604			jsr 	EvaluateInteger
.307f	38		sec				sec
.3080	60		rts				rts
.3081					_CLSDefault:
.3081	18		clc				clc
.3082	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3083					Command_New:
.3083					Command_XNew:
.3083	20 23 31	jsr $3123			jsr 	ResetCodeAddress 			; point to first line
.3086	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3088	98		tya				tya
.3089	91 28		sta ($28),y			sta 	(codePtr),y
.308b	20 f4 2e	jsr $2ef4			jsr 	CommandClear 				; clear everything down.
.308e	4c 4a 2a	jmp $2a4a			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d49					breakCounter:
>0d49								.fill 	1
.0d4a					breakIncrement:
>0d4a								.fill 	1
.3091					Command_Run:
.3091					XCommand_Run:
.3091	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3093	9a		txs				txs
.3094	20 1d 31	jsr $311d			jsr 	BreakOn 					; turn break on
.3097	20 f4 2e	jsr $2ef4			jsr 	CommandClear 				; clear everything.
.309a	20 23 31	jsr $3123			jsr 	ResetCodeAddress 			; back to the start.
.309d					Command_RunFrom:
.309d	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.309f					CRNextInstruction:
.309f	a9 00		lda #$00			lda 	#0
.30a1	85 3a		sta $3a				sta 	softMemAlloc+1
.30a3	ad 49 0d	lda $0d49			lda 	breakCounter 				; check for break.
.30a6	6d 4a 0d	adc $0d4a			adc 	breakIncrement
.30a9	8d 49 0d	sta $0d49			sta 	breakCounter
.30ac	90 05		bcc $30b3			bcc 	_CRNoChecks
.30ae	a2 02		ldx #$02		ldx	#2
.30b0	20 f6 14	jsr $14f6		jsr	deviceHandler
.30b3					_CRNoChecks
.30b3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.30b5	10 1c		bpl $30d3			bpl 	_CRNotToken
.30b7	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.30b9	b0 0c		bcs $30c7			bcs 	_CRExecute
.30bb	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.30bd	b0 71		bcs $3130			bcs 	Unimplemented
.30bf	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.30c1	b0 04		bcs $30c7			bcs 	_CRExecute
.30c3	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.30c5	b0 16		bcs $30dd			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.30c7					_CRExecute:
.30c7	c8		iny				iny 								; consume it.
.30c8	0a		asl a				asl 	a 							; double it, losing most significant bit.
.30c9	aa		tax				tax
.30ca	20 d0 30	jsr $30d0			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.30cd	4c 9f 30	jmp $309f			jmp 	CRNextInstruction
.30d0					_CRRunRoutine:
.30d0	7c 3a 31	jmp ($313a,x)			jmp 	(Group0Vectors,x)
.30d3					_CRNotToken:
.30d3	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.30d5	b0 59		bcs $3130			bcs 	Unimplemented
.30d7					_CRDefaultLet:
.30d7	20 7d 29	jsr $297d			jsr 	CommandLet 					; do the default, LET
.30da	4c 9f 30	jmp $309f			jmp 	CRNextInstruction
.30dd					_CRCheckIndirect:
.30dd	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.30df	f0 0a		beq $30eb			beq 	_CRAndCommand
.30e1	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.30e3	f0 f2		beq $30d7			beq 	_CRDefaultLet
.30e5	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.30e7	f0 ee		beq $30d7			beq 	_CRDefaultLet
.30e9	d0 45		bne $3130			bne 	Unimplemented
.30eb					_CRAndCommand:
.30eb	c8		iny				iny 								; skip over the AND token
.30ec	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.30ee	20 08 31	jsr $3108			jsr 	CommandAssembler 			; do the assembler command
.30f1	4c 9f 30	jmp $309f			jmp 	CRNextInstruction 			; and loop round.
.30f4					CommandShift1:
.30f4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.30f6	10 38		bpl $3130			bpl 	Unimplemented 				; we have an error as this should not happen.
.30f8	c8		iny				iny 								; advance over it.
.30f9	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.30fb	b0 0b		bcs $3108			bcs 	CommandAssembler
.30fd	0a		asl a				asl 	a 							; double into X
.30fe	aa		tax				tax
.30ff	7c 00 32	jmp ($3200,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.3102					CommandShift2:
.3102	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.3104	20 69 18	jsr $1869		jsr	extensionHandler
.3107	60		rts				rts
.3108					CommandAssembler:
.3108	a2 02		ldx #$02		ldx	#2
.310a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.310d	60		rts				rts
.310e					CommandAssemblerLabel:
.310e	a2 04		ldx #$04		ldx	#4
.3110	20 b4 13	jsr $13b4		jsr	assemblerHandler
.3113	60		rts				rts
.3114					CommandColon:
.3114	60		rts				rts
.3115					CommandBreak:
.3115	20 02 36	jsr $3602			jsr 	EvaluateRootInteger
.3118	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero
.311b	f0 02		beq $311f			beq 	BreakOff
.311d					BreakOn:
.311d	a2 08		ldx #$08			ldx 	#8
.311f					BreakOff:
.311f	8e 4a 0d	stx $0d4a			stx 	breakIncrement
.3122	60		rts				rts
.3123					ResetCodeAddress:
.3123	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.3126	85 28		sta $28				sta 	codePtr
.3128	ad c9 0a	lda $0ac9			lda 	basePage+1
.312b	85 29		sta $29				sta 	codePtr+1
.312d	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.312f	60		rts				rts
.3130					Unimplemented:
.3130	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.3132	20 18 15	jsr $1518		jsr	errorHandler
.3135					TKErr01:
.3135					TKErr02:
.3135					TKErr03:
.3135					TKErr04:
.3135					TKErr05:
.3135					TKErr06:
.3135					TKErr07:
.3135					TKErr08:
.3135					TKErr09:
.3135					TKErr10:
.3135					TKErr11:
.3135					TKErr12:
.3135					TKErr13:
.3135					TKErr14:
.3135					TKErr15:
.3135	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3137	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.313a					Group0Vectors:
>313a	50 2a					.word	AdvanceNextLine          ; $80 [[eol]]
>313c	f4 30					.word	CommandShift1            ; $81 [[sh1]]
>313e	02 31					.word	CommandShift2            ; $82 [[sh2]]
>3140	35 31					.word	TKErr09                  ; $83 [[sh3]]
>3142	35 31					.word	TKErr10                  ; $84 [[fpc]]
>3144	35 31					.word	TKErr08                  ; $85 [[str]]
>3146	e9 32					.word	AndHandler               ; $86 and
>3148	d6 32					.word	OrHandler                ; $87 or
>314a	c3 32					.word	XorHandler               ; $88 xor
>314c	0b 34					.word	CompareGreaterEq         ; $89 >=
>314e	15 34					.word	CompareLessEq            ; $8a <=
>3150	f7 33					.word	CompareGreater           ; $8b >
>3152	ed 33					.word	CompareLess              ; $8c <
>3154	e3 33					.word	CompareEquals            ; $8d =
>3156	01 34					.word	CompareNotEquals         ; $8e <>
>3158	54 32					.word	AddHandler               ; $8f +
>315a	77 32					.word	SubHandler               ; $90 -
>315c	0f 33					.word	ShrHandler               ; $91 >>
>315e	fc 32					.word	ShlHandler               ; $92 <<
>3160	8a 32					.word	MulHandler               ; $93 *
>3162	9d 32					.word	DivHandler               ; $94 /
>3164	b0 32					.word	ModHandler               ; $95 mod
>3166	48 33					.word	PowerHandler             ; $96 ^
>3168	22 33					.word	WordRefHandler           ; $97 !
>316a	35 33					.word	ByteRefHandler           ; $98 ?
>316c	0f 2e					.word	Command_Repeat           ; $99 repeat
>316e	b9 2e					.word	Command_While            ; $9a while
>3170	64 2a					.word	Command_FOR              ; $9b for
>3172	73 2b					.word	CommandIf                ; $9c if
>3174	35 31					.word	TKErr04                  ; $9d defproc
>3176	1c 2e					.word	Command_Until            ; $9e until
>3178	dc 2e					.word	Command_Wend             ; $9f wend
>317a	c5 2a					.word	Command_NEXT             ; $a0 next
>317c	35 31					.word	TKErr06                  ; $a1 then
>317e	ae 2b					.word	Command_ENDIF            ; $a2 endif
>3180	1e 2d					.word	ReturnProc               ; $a3 endproc
>3182	6f 35					.word	UnaryParenthesis         ; $a4 (
>3184	51 37					.word	UnaryLen                 ; $a5 len(
>3186	95 37					.word	UnarySgn                 ; $a6 sgn(
>3188	7e 37					.word	UnaryAbs                 ; $a7 abs(
>318a	ee 37					.word	Unary_Random             ; $a8 random(
>318c	38 38					.word	Unary_Page               ; $a9 page
>318e	98 3c					.word	MInt32True               ; $aa true
>3190	9c 3c					.word	MInt32False              ; $ab false
>3192	03 38					.word	Unary_Min                ; $ac min(
>3194	07 38					.word	Unary_Max                ; $ad max(
>3196	10 39					.word	UnarySys                 ; $ae sys(
>3198	b9 38					.word	UnaryTimer               ; $af timer(
>319a	ce 36					.word	EventFunction            ; $b0 event(
>319c	e2 38					.word	UnaryGet                 ; $b1 get(
>319e	d2 38					.word	UnaryInkey               ; $b2 inkey(
>31a0	89 38					.word	UnaryAlloc               ; $b3 alloc(
>31a2	49 39					.word	ExecChr                  ; $b4 chr$(
>31a4	79 39					.word	ExecLeft                 ; $b5 left$(
>31a6	96 39					.word	ExecMid                  ; $b6 mid$(
>31a8	be 39					.word	ExecRight                ; $b7 right$(
>31aa	50 36					.word	Event_Str                ; $b8 str$(
>31ac	7f 36					.word	UnaryVal                 ; $b9 val(
>31ae	ac 37					.word	UnaryPeek                ; $ba peek(
>31b0	b2 37					.word	UnaryDeek                ; $bb deek(
>31b2	b8 37					.word	UnaryLeek                ; $bc leek(
>31b4	6f 37					.word	UnaryAsc                 ; $bd asc(
>31b6	63 38					.word	UnaryIntToFloat          ; $be int(
>31b8	76 38					.word	UnaryFloatToInt          ; $bf float(
>31ba	82 36					.word	UnaryIsVal               ; $c0 isval(
>31bc	60 39					.word	ExecUpper                ; $c1 upper$(
>31be	5d 39					.word	ExecLower                ; $c2 lower$(
>31c0	46 38					.word	UnaryReference           ; $c3 @
>31c2	5c 38					.word	UnaryComplement          ; $c4 ~
>31c4	59 38					.word	UnaryHexMarker           ; $c5 &
>31c6	fb 38					.word	UnaryGetString           ; $c6 get$(
>31c8	01 39					.word	UnaryInkeyString         ; $c7 inkey$(
>31ca	38 39					.word	UnaryMem                 ; $c8 mem
>31cc	35 31					.word	TKErr01                  ; $c9 )
>31ce	14 31					.word	CommandColon             ; $ca :
>31d0	35 31					.word	TKErr02                  ; $cb ,
>31d2	35 31					.word	TKErr03                  ; $cc ;
>31d4	38 2a					.word	Command_Rem2             ; $cd '
>31d6	35 31					.word	TKErr07                  ; $ce to
>31d8	35 31					.word	TKErr05                  ; $cf step
>31da	b1 2c					.word	CallProc                 ; $d0 proc
>31dc	af 2b					.word	CommandLocal             ; $d1 local
>31de	6f 29					.word	Command_Dim              ; $d2 dim
>31e0	38 2a					.word	Command_Rem              ; $d3 rem
>31e2	7d 29					.word	CommandLet               ; $d4 let
>31e4	b9 27					.word	Command_Input            ; $d5 input
>31e6	a8 2b					.word	Command_ELSE             ; $d6 else
>31e8	40 29					.word	Command_VDU              ; $d7 vdu
>31ea	6f 28					.word	Command_Print            ; $d8 print
>31ec	21 27					.word	CommandData              ; $d9 data
>31ee	35 31					.word	TKErr13                  ; $da image
>31f0	35 31					.word	TKErr12                  ; $db at
>31f2	35 31					.word	TKErr14                  ; $dc flip
>31f4	61 29					.word	Command_Assert           ; $dd assert
>31f6	fb 29					.word	Command_Poke             ; $de poke
>31f8	ff 29					.word	Command_Doke             ; $df doke
>31fa	03 2a					.word	Command_Loke             ; $e0 loke
>31fc	10 29					.word	Command_Ink              ; $e1 ink
>31fe	1b 29					.word	Command_Paper            ; $e2 paper
>3200	0a 29					.word	Command_CLS              ; $e3 cls
>3202	26 29					.word	Command_Locate           ; $e4 locate
>3204	0e 31					.word	CommandAssemblerLabel    ; $e5 .
>3206	35 31					.word	TKErr15                  ; $e6 from
>3208	35 31					.word	TKErr11                  ; $e7 #
>320a	f4 2e					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.320c					Group1Vectors:
>320c	2a 30					.word	CommandLoad              ; $86 load
>320e	3f 30					.word	CommandSave              ; $87 save
>3210	4f 2f					.word	CommandList              ; $88 list
>3212	83 30					.word	Command_New              ; $89 new
>3214	15 31					.word	CommandBreak             ; $8a break
>3216	91 30					.word	Command_Run              ; $8b run
>3218	f6 26					.word	CommandRead              ; $8c read
>321a	2a 27					.word	CommandRestore           ; $8d restore
>321c	4a 2a					.word	CommandEnd               ; $8e end
>321e	45 2a					.word	CommandStop              ; $8f stop
>3220	4d 2a					.word	CommandXemu              ; $90 xemu
>3222	87 27					.word	CommandGOTO              ; $91 goto
>3224	5c 27					.word	CommandGOSUB             ; $92 gosub
>3226	6f 27					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.3228					BinaryProcess:
.3228	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.322a	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.322c	0a		asl a				asl 	a
.322d	30 0e		bmi $323d			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.322f	18		clc				clc 								; return CC for integer
.3230	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3232	f0 08		beq $323c			beq 	_BPExit 					; if both integer then return with CC.
.3234	20 42 32	jsr $3242			jsr 	BPMakeBothFloat 			; make both float
.3237	a9 01		lda #$01			lda 	#$01 						; set result type to float
.3239	95 90		sta $90,x			sta 	esType,x
.323b	38		sec				sec 								; and return with carry set.
.323c					_BPExit:
.323c	60		rts				rts
.323d					_BPStringType:
.323d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.323f	20 18 15	jsr $1518		jsr	errorHandler
.3242					BPMakeBothFloat:
.3242	e8		inx				inx
.3243	20 47 32	jsr $3247			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.3246	ca		dex				dex
.3247					BPMakeFloat:
.3247	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.3249	4a		lsr a				lsr 	a
.324a	b0 07		bcs $3253			bcs 	_BPIsFloat 					; already a float if set.
.324c	8a		txa				txa
.324d	a2 1c		ldx #$1c		ldx	#28
.324f	20 00 25	jsr $2500		jsr	floatingpointHandler
.3252	aa		tax				tax
.3253					_BPIsFloat:
.3253	60		rts				rts
.3254					AddHandler:
.3254	20 25 34	jsr $3425			jsr 	DereferenceTwo 				; dereference top two on stack.
.3257	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.3259	35 91		and $91,x			and 	esType+1,x
.325b	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.325d	d0 10		bne $326f			bne 	_AHStringConcat				; concatenate strings.
.325f	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.3262	b0 03		bcs $3267			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3264	4c 80 3b	jmp $3b80			jmp 	MInt32Add 							; else do it as integer.
.3267					_IsFPOperation:
.3267	8a		txa				txa 								; call the relevant fp routine
.3268	a2 04		ldx #$04		ldx	#4
.326a	20 00 25	jsr $2500		jsr	floatingpointHandler
.326d	aa		tax				tax
.326e	60		rts				rts
.326f					_AHStringConcat:
.326f	8a		txa				txa 								; handled by the string module.
.3270	a2 06		ldx #$06		ldx	#6
.3272	20 47 40	jsr $4047		jsr	stringHandler
.3275	aa		tax				tax
.3276	60		rts				rts
.3277					SubHandler:
.3277	20 25 34	jsr $3425			jsr 	DereferenceTwo
.327a	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.327d	b0 03		bcs $3282			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.327f	4c 9a 3b	jmp $3b9a			jmp 	MInt32Sub 							; else do it as integer.
.3282					_IsFPOperation:
.3282	8a		txa				txa 								; call the relevant fp routine
.3283	a2 12		ldx #$12		ldx	#18
.3285	20 00 25	jsr $2500		jsr	floatingpointHandler
.3288	aa		tax				tax
.3289	60		rts				rts
.328a					MulHandler:
.328a	20 25 34	jsr $3425			jsr 	DereferenceTwo
.328d	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.3290	b0 03		bcs $3295			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3292	4c b4 3b	jmp $3bb4			jmp 	MInt32Multiply 							; else do it as integer.
.3295					_IsFPOperation:
.3295	8a		txa				txa 								; call the relevant fp routine
.3296	a2 0c		ldx #$0c		ldx	#12
.3298	20 00 25	jsr $2500		jsr	floatingpointHandler
.329b	aa		tax				tax
.329c	60		rts				rts
.329d					DivHandler:
.329d	20 25 34	jsr $3425			jsr 	DereferenceTwo
.32a0	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.32a3	b0 03		bcs $32a8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32a5	4c 71 3a	jmp $3a71			jmp 	MInt32SDivide 							; else do it as integer.
.32a8					_IsFPOperation:
.32a8	8a		txa				txa 								; call the relevant fp routine
.32a9	a2 08		ldx #$08		ldx	#8
.32ab	20 00 25	jsr $2500		jsr	floatingpointHandler
.32ae	aa		tax				tax
.32af	60		rts				rts
.32b0					ModHandler:
.32b0	20 25 34	jsr $3425			jsr 	DereferenceTwo
.32b3	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.32b6	b0 03		bcs $32bb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32b8	4c ef 3a	jmp $3aef			jmp 	MInt32Modulus 							; else do it as integer.
.32bb					_IsFPOperation:
.32bb	8a		txa				txa 								; call the relevant fp routine
.32bc	a2 0a		ldx #$0a		ldx	#10
.32be	20 00 25	jsr $2500		jsr	floatingpointHandler
.32c1	aa		tax				tax
.32c2	60		rts				rts
.32c3					XorHandler:
.32c3	20 25 34	jsr $3425			jsr 	DereferenceTwo
.32c6	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.32c9	b0 03		bcs $32ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32cb	4c 23 3a	jmp $3a23			jmp 	MInt32Xor 							; else do it as integer.
.32ce					_IsFPOperation:
.32ce	8a		txa				txa 								; call the relevant fp routine
.32cf	a2 0a		ldx #$0a		ldx	#10
.32d1	20 00 25	jsr $2500		jsr	floatingpointHandler
.32d4	aa		tax				tax
.32d5	60		rts				rts
.32d6					OrHandler:
.32d6	20 25 34	jsr $3425			jsr 	DereferenceTwo
.32d9	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.32dc	b0 03		bcs $32e1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32de	4c 0a 3a	jmp $3a0a			jmp 	MInt32Or 							; else do it as integer.
.32e1					_IsFPOperation:
.32e1	8a		txa				txa 								; call the relevant fp routine
.32e2	a2 0a		ldx #$0a		ldx	#10
.32e4	20 00 25	jsr $2500		jsr	floatingpointHandler
.32e7	aa		tax				tax
.32e8	60		rts				rts
.32e9					AndHandler:
.32e9	20 25 34	jsr $3425			jsr 	DereferenceTwo
.32ec	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.32ef	b0 03		bcs $32f4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32f1	4c f1 39	jmp $39f1			jmp 	MInt32And 							; else do it as integer.
.32f4					_IsFPOperation:
.32f4	8a		txa				txa 								; call the relevant fp routine
.32f5	a2 0a		ldx #$0a		ldx	#10
.32f7	20 00 25	jsr $2500		jsr	floatingpointHandler
.32fa	aa		tax				tax
.32fb	60		rts				rts
.32fc					ShlHandler:
.32fc	20 25 34	jsr $3425			jsr 	DereferenceTwo
.32ff	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.3302	b0 03		bcs $3307			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3304	4c 7d 33	jmp $337d			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3307					_IsFPOperation:
.3307	8a		txa				txa 								; call the relevant fp routine
.3308	a2 0a		ldx #$0a		ldx	#10
.330a	20 00 25	jsr $2500		jsr	floatingpointHandler
.330d	aa		tax				tax
.330e	60		rts				rts
.330f					ShrHandler:
.330f	20 25 34	jsr $3425			jsr 	DereferenceTwo
.3312	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.3315	b0 03		bcs $331a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3317	4c 80 33	jmp $3380			jmp 	MInt32ShiftRightX 							; else do it as integer.
.331a					_IsFPOperation:
.331a	8a		txa				txa 								; call the relevant fp routine
.331b	a2 0a		ldx #$0a		ldx	#10
.331d	20 00 25	jsr $2500		jsr	floatingpointHandler
.3320	aa		tax				tax
.3321	60		rts				rts
.3322					WordRefHandler:
.3322	20 25 34	jsr $3425			jsr 	DereferenceTwo
.3325	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.3328	b0 03		bcs $332d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.332a	4c 6f 33	jmp $336f			jmp 	MInt32WordIndirect 							; else do it as integer.
.332d					_IsFPOperation:
.332d	8a		txa				txa 								; call the relevant fp routine
.332e	a2 0a		ldx #$0a		ldx	#10
.3330	20 00 25	jsr $2500		jsr	floatingpointHandler
.3333	aa		tax				tax
.3334	60		rts				rts
.3335					ByteRefHandler:
.3335	20 25 34	jsr $3425			jsr 	DereferenceTwo
.3338	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.333b	b0 03		bcs $3340			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.333d	4c 73 33	jmp $3373			jmp 	MInt32ByteIndirect 							; else do it as integer.
.3340					_IsFPOperation:
.3340	8a		txa				txa 								; call the relevant fp routine
.3341	a2 0a		ldx #$0a		ldx	#10
.3343	20 00 25	jsr $2500		jsr	floatingpointHandler
.3346	aa		tax				tax
.3347	60		rts				rts
.3348					PowerHandler:
.3348	20 25 34	jsr $3425			jsr 	DereferenceTwo
.334b	20 28 32	jsr $3228			jsr 	BinaryProcess 				; check to see if either is float
.334e	b0 03		bcs $3353			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3350	4c 5b 33	jmp $335b			jmp 	PowerInteger 							; else do it as integer.
.3353					_IsFPOperation:
.3353	8a		txa				txa 								; call the relevant fp routine
.3354	a2 18		ldx #$18		ldx	#24
.3356	20 00 25	jsr $2500		jsr	floatingpointHandler
.3359	aa		tax				tax
.335a	60		rts				rts
.335b					PowerInteger:
.335b	20 42 32	jsr $3242			jsr 	BPMakeBothFloat				; make them float.
.335e	8a		txa				txa
.335f	a2 18		ldx #$18		ldx	#24
.3361	20 00 25	jsr $2500		jsr	floatingpointHandler
.3364	a2 14		ldx #$14		ldx	#20
.3366	20 00 25	jsr $2500		jsr	floatingpointHandler
.3369	aa		tax				tax
.336a	a9 00		lda #$00			lda 	#0 							; make type integer
.336c	95 90		sta $90,x			sta 	esType,x
.336e	60		rts				rts
.336f					Mint32WordIndirect:
.336f	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.3371	d0 02		bne $3375			bne 	Min32Indirect
.3373					Mint32ByteIndirect:
.3373	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.3375					Min32Indirect:
.3375	48		pha				pha 								; save the indirection
.3376	20 80 3b	jsr $3b80			jsr 	MInt32Add 					; add a!b a?b
.3379	68		pla				pla 								; and set the type to reference.
.337a	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.337c	60		rts				rts
.337d					Mint32ShiftLeftX:
.337d	18		clc				clc 								; CC shift left
.337e	90 01		bcc $3381			bcc 	Mint32Shift
.3380					Mint32ShiftRightX:
.3380	38		sec				sec 								; CS shift right
.3381					Mint32Shift:
.3381	08		php				php 								; save carry flag on stack.
.3382	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.3384	15 a9		ora $a9,x			ora 	esInt2+1,x
.3386	15 b1		ora $b1,x			ora 	esInt3+1,x
.3388	d0 1e		bne $33a8			bne 	_MShiftZero
.338a	b5 99		lda $99,x			lda 	esInt0+1,x
.338c	c9 20		cmp #$20			cmp 	#32
.338e	b0 18		bcs $33a8			bcs 	_MShiftZero
.3390					_MShiftLoop:
.3390	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3392	f0 12		beq $33a6			beq 	_MShiftExit
.3394	d6 99		dec $99,x			dec 	esInt0+1,x
.3396	28		plp				plp 								; restore and save carry
.3397	08		php				php
.3398	90 06		bcc $33a0			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.339a	20 ba 3c	jsr $3cba			jsr 	Mint32ShiftRight
.339d	4c 90 33	jmp $3390			jmp 	_MShiftLoop
.33a0					_MShiftLeft:
.33a0	20 b1 3c	jsr $3cb1			jsr 	Mint32ShiftLeft
.33a3	4c 90 33	jmp $3390			jmp 	_MShiftLoop
.33a6					_MShiftExit:
.33a6	28		plp				plp	 								; throw saved carry and exit
.33a7	60		rts				rts
.33a8					_MShiftZero:
.33a8	4c 9c 3c	jmp $3c9c			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.33ab					PerformComparison:
.33ab	20 25 34	jsr $3425			jsr 	DereferenceTwo 				; make both values.
.33ae	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.33b0	35 91		and $91,x			and 	esType+1,x
.33b2	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.33b3	30 1d		bmi $33d2			bmi 	_PCIsString
.33b5	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.33b7	15 91		ora $91,x			ora 	esType+1,x
.33b9	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.33ba	30 22		bmi $33de			bmi 	_PCError
.33bc	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.33be	f0 0f		beq $33cf			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.33c0	20 42 32	jsr $3242			jsr 	BPMakeBothFloat 			; make both float
.33c3	8a		txa				txa
.33c4	a2 06		ldx #$06		ldx	#6
.33c6	20 00 25	jsr $2500		jsr	floatingpointHandler
.33c9	86 32		stx $32				stx 	tempShort 					; save result
.33cb	aa		tax				tax
.33cc	a5 32		lda $32				lda 	tempShort
.33ce	60		rts				rts
.33cf					_PCIsInteger:
.33cf	4c 3c 3a	jmp $3a3c			jmp 	MInt32Compare
.33d2					_PCIsString:
.33d2	8a		txa				txa 								; A has SP
.33d3	a2 0a		ldx #$0a		ldx	#10
.33d5	20 47 40	jsr $4047		jsr	stringHandler
.33d8	86 32		stx $32				stx 	tempShort 					; save result
.33da	aa		tax				tax 								; put SP back in X and get result.
.33db	a5 32		lda $32				lda 	tempShort
.33dd	60		rts				rts
.33de					_PCError:
.33de	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.33e0	20 18 15	jsr $1518		jsr	errorHandler
.33e3					CompareEquals:
.33e3	20 ab 33	jsr $33ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.33e6	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.33e8	f0 35		beq $341f			beq  	CompareTrue
.33ea	4c 22 34	jmp $3422			jmp 	CompareFalse
.33ed					CompareLess:
.33ed	20 ab 33	jsr $33ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.33f0	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.33f2	f0 2b		beq $341f			beq  	CompareTrue
.33f4	4c 22 34	jmp $3422			jmp 	CompareFalse
.33f7					CompareGreater:
.33f7	20 ab 33	jsr $33ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.33fa	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.33fc	f0 21		beq $341f			beq  	CompareTrue
.33fe	4c 22 34	jmp $3422			jmp 	CompareFalse
.3401					CompareNotEquals:
.3401	20 ab 33	jsr $33ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3404	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3406	d0 17		bne $341f			bne  	CompareTrue
.3408	4c 22 34	jmp $3422			jmp 	CompareFalse
.340b					CompareGreaterEq:
.340b	20 ab 33	jsr $33ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.340e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3410	d0 0d		bne $341f			bne  	CompareTrue
.3412	4c 22 34	jmp $3422			jmp 	CompareFalse
.3415					CompareLessEq:
.3415	20 ab 33	jsr $33ab			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3418	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.341a	d0 03		bne $341f			bne  	CompareTrue
.341c	4c 22 34	jmp $3422			jmp 	CompareFalse
.341f					CompareTrue:
.341f	4c 98 3c	jmp $3c98			jmp 	MInt32True
.3422					CompareFalse:
.3422	4c 9c 3c	jmp $3c9c			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3425					DereferenceTwo:
.3425	e8		inx				inx
.3426	20 2a 34	jsr $342a			jsr 	DereferenceOne
.3429	ca		dex				dex
.342a					DereferenceOne:
.342a	b5 90		lda $90,x			lda 	esType,x
.342c	10 3d		bpl $346b			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.342e	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.342f	b0 3b		bcs $346c			bcs 	_DRFloatDeReference
.3431	98		tya				tya
.3432	48		pha				pha
.3433	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3435	85 2a		sta $2a				sta 	temp0
.3437	b5 a0		lda $a0,x			lda 	esInt1,x
.3439	85 2b		sta $2b				sta 	temp0+1
.343b	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.343d	95 a0		sta $a0,x			sta 	esInt1,x
.343f	95 a8		sta $a8,x			sta 	esInt2,x
.3441	95 b0		sta $b0,x			sta 	esInt3,x
.3443	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.3445	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.3447	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.3448	30 0d		bmi $3457			bmi 	_DeRefString 				; string, 2 bytes only
.344a	d0 11		bne $345d			bne 	_DeRefByte 					; byte 1 byte only
.344c					_DeRefLong:
.344c	a0 03		ldy #$03			ldy 	#3
.344e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3450	95 b0		sta $b0,x			sta 	esInt3,x
.3452	88		dey				dey
.3453	b1 2a		lda ($2a),y			lda 	(temp0),y
.3455	95 a8		sta $a8,x			sta 	esInt2,x
.3457					_DeRefString:
.3457	a0 01		ldy #$01			ldy 	#1
.3459	b1 2a		lda ($2a),y			lda 	(temp0),y
.345b	95 a0		sta $a0,x			sta 	esInt1,x
.345d					_DeRefByte:
.345d	a0 00		ldy #$00			ldy 	#0
.345f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3461	95 98		sta $98,x			sta 	esInt0,x
.3463	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.3465	29 40		and #$40			and 	#$40
.3467	95 90		sta $90,x			sta 	esType,x
.3469	68		pla				pla
.346a	a8		tay				tay
.346b					_DRNotReference
.346b	60		rts				rts
.346c					_DRFloatDereference:
.346c	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 					; address to deref in temp0
.346f	8a		txa				txa
.3470	a2 1e		ldx #$1e		ldx	#30
.3472	20 00 25	jsr $2500		jsr	floatingpointHandler
.3475	aa		tax				tax
.3476	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.3478	95 90		sta $90,x			sta 	esType,x
.347a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.347b					EvaluateLevel:
.347b	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.347d	b0 1e		bcs $349d			bcs 	_ELStack
.347f	48		pha				pha 								; save precedence level.
.3480	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3482	95 98		sta $98,x			sta 	esInt0,x
.3484	95 a0		sta $a0,x			sta 	esInt1,x
.3486	95 a8		sta $a8,x			sta 	esInt2,x
.3488	95 b0		sta $b0,x			sta 	esInt3,x
.348a	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.348c	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.348e	30 26		bmi $34b6			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3490	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3491	30 0f		bmi $34a2			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3493	8a		txa				txa 								; stack level in X
.3494	a2 02		ldx #$02		ldx	#2
.3496	20 9c 4c	jsr $4c9c		jsr	variableHandler
.3499	aa		tax				tax
.349a	4c df 34	jmp $34df			jmp		_ELHasTerm
.349d					_ELStack:
.349d	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.349f	20 18 15	jsr $1518		jsr	errorHandler
.34a2					_ELIsConstant:
.34a2	4a		lsr a				lsr 	a 							; get the value back
.34a3	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.34a5	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.34a7					_ELCheckNext:
.34a7	c8		iny				iny 								; look at next
.34a8	b1 28		lda ($28),y			lda 	(codePtr),y
.34aa	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.34ac	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.34ae	b0 2f		bcs $34df			bcs 	_ELHasTerm 					; done getting the constant.
.34b0	20 78 35	jsr $3578			jsr 	ELShiftByteIn 				; shift byte into position.
.34b3	4c a7 34	jmp $34a7			jmp 	_ELCheckNext
.34b6					_ELIsToken:
.34b6	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.34b8	f0 0f		beq $34c9			beq 	_ELIsString
.34ba	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.34bc	d0 5f		bne $351d			bne 	_ELCheckUnary
.34be	8a		txa				txa 								; put X into A
.34bf	c8		iny				iny 								; skip over the float marker
.34c0	a2 1a		ldx #$1a		ldx	#26
.34c2	20 00 25	jsr $2500		jsr	floatingpointHandler
.34c5	aa		tax				tax 								; restore X
.34c6	4c df 34	jmp $34df			jmp 	_ELHasTerm
.34c9					_ELIsString:
.34c9	98		tya				tya 								; address of string is codePtr+y+1
.34ca	38		sec				sec
.34cb	65 28		adc $28				adc 	codePtr
.34cd	95 98		sta $98,x			sta 	esInt0,x
.34cf	a5 29		lda $29				lda 	codePtr+1
.34d1	69 00		adc #$00			adc 	#0
.34d3	95 a0		sta $a0,x			sta 	esInt1,x
.34d5	a9 40		lda #$40			lda 	#$40 						; set type to string value
.34d7	95 90		sta $90,x			sta 	esType,x
.34d9	c8		iny				iny 								; skip over string.
.34da	98		tya				tya
.34db	38		sec				sec									; +1 for the length itself.
.34dc	71 28		adc ($28),y			adc 	(codePtr),y
.34de	a8		tay				tay 								; and fall through to term loop code.
.34df					_ELHasTerm:
.34df	b1 28		lda ($28),y			lda 	(codePtr),y
.34e1	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.34e3	90 04		bcc $34e9			bcc 	_ELPopExit
.34e5	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.34e7	90 02		bcc $34eb			bcc 	_ELHasBinaryTerm
.34e9					_ELPopExit:
.34e9	68		pla				pla
.34ea					_ELExit:
.34ea	60		rts				rts
.34eb					_ELHasBinaryTerm:
.34eb	84 32		sty $32				sty 	tempShort 					; save position
.34ed	a8		tay				tay 								; use token as an index and get the precedence.
.34ee	b9 20 35	lda $3520,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.34f1	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.34f3	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.34f5	68		pla				pla 								; restore current level.
.34f6	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.34f8	b0 f0		bcs $34ea			bcs 	_ELExit
.34fa	48		pha				pha 								; save current level back on the stack.
.34fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.34fd	48		pha				pha
.34fe	c8		iny				iny
.34ff	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3500	a5 32		lda $32				lda 	tempShort
.3502	20 7b 34	jsr $347b			jsr 	EvaluateLevel
.3505	ca		dex				dex
.3506	68		pla				pla 								; get the operator back out.
.3507					_ELExecuteA:
.3507	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3509	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.350a	aa		tax				tax
.350b	bd 3a 31	lda $313a,x			lda 	Group0Vectors,x
.350e	85 2a		sta $2a				sta 	temp0
.3510	bd 3b 31	lda $313b,x			lda 	Group0Vectors+1,x
.3513	85 2b		sta $2b				sta 	temp0+1
.3515	a6 32		ldx $32				ldx 	tempShort
.3517	20 64 35	jsr $3564			jsr 	_ELCallTemp0
.351a	4c df 34	jmp $34df			jmp 	_ELHasTerm 					; and loop back round.
.351d					_ELCheckUnary:
.351d	c8		iny				iny 								; skip over token.
.351e	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3520	f0 19		beq $353b			beq 	_ELMinus
.3522	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3524	f0 2c		beq $3552			beq 	_ELIndirect
.3526	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3528	f0 28		beq $3552			beq 	_ELIndirect
.352a	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.352c	f0 39		beq $3567			beq 	_ELExtension
.352e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3530	90 04		bcc $3536			bcc 	_ELUSyntax
.3532	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3534	90 d1		bcc $3507			bcc 	_ELExecuteA 				; if so do that token.
.3536					_ELUSyntax:
.3536	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3538	20 18 15	jsr $1518		jsr	errorHandler
.353b					_ELMinus:
.353b	20 cd 35	jsr $35cd			jsr 	EvaluateNumericTerm 		; get a number to negate.
.353e	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.3540	f0 0a		beq $354c			beq 	_ELMinusInteger
.3542	8a		txa				txa
.3543	a2 0e		ldx #$0e		ldx	#14
.3545	20 00 25	jsr $2500		jsr	floatingpointHandler
.3548	aa		tax				tax
.3549	4c df 34	jmp $34df			jmp 	_ELHasTerm
.354c					_ELMinusInteger:
.354c	20 56 3c	jsr $3c56			jsr 	MInt32Negate 				; do int negate
.354f	4c df 34	jmp $34df			jmp 	_ELHasTerm
.3552					_ELIndirect:
.3552	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3553	20 d6 35	jsr $35d6			jsr 	EvaluateIntegerTerm 		; integer address
.3556	68		pla				pla
.3557	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.3559	f0 02		beq $355d			beq 	_ELHaveModifier
.355b	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.355d					_ELHaveModifier:
.355d	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.355f	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.3561	4c df 34	jmp $34df			jmp 	_ELHasTerm
.3564					_ELCallTemp0:
.3564	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3567					_ELExtension:
.3567	8a		txa				txa 								; stack pos in A
.3568	20 69 18	jsr $1869		jsr	extensionHandler
.356b	aa		tax				tax 								; restore stack
.356c	4c df 34	jmp $34df			jmp 	_ELHasTerm
.356f					UnaryParenthesis:
.356f	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.3571	20 7b 34	jsr $347b			jsr 	EvaluateLevel
.3574	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; check for )
.3577	60		rts				rts
.3578					ELShiftByteIn:
.3578	48		pha				pha 								; save bits to shift in.
.3579	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.357b	48		pha				pha
.357c	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.357e	95 b0		sta $b0,x			sta 	esInt3,x
.3580	b5 a0		lda $a0,x			lda 	esInt1,x
.3582	95 a8		sta $a8,x			sta 	esInt2,x
.3584	b5 98		lda $98,x			lda 	esInt0,x
.3586	95 a0		sta $a0,x			sta 	esInt1,x
.3588	a9 00		lda #$00			lda 	#0
.358a	95 98		sta $98,x			sta 	esInt0,x
.358c	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.358d	29 03		and #$03			and 	#3 							; only want lower 2 bits
.358f	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3591					_ELShiftLoop:
.3591	4a		lsr a				lsr 	a
.3592	76 b0		ror $b0,x			ror 	esInt3,x
.3594	76 a8		ror $a8,x			ror 	esInt2,x
.3596	76 a0		ror $a0,x			ror 	esInt1,x
.3598	76 98		ror $98,x			ror 	esInt0,x
.359a	c9 01		cmp #$01			cmp 	#1
.359c	d0 f3		bne $3591			bne 	_ELShiftLoop
.359e	68		pla				pla 								; get original 6 bit value and OR in.
.359f	29 3f		and #$3f			and 	#$3F
.35a1	15 98		ora $98,x			ora 	esInt0,x
.35a3	95 98		sta $98,x			sta 	esInt0,x
.35a5	60		rts				rts
.35a6					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>35a6	01					.byte	$01			; $86 and
>35a7	01					.byte	$01			; $87 or
>35a8	01					.byte	$01			; $88 xor
>35a9	02					.byte	$02			; $89 >=
>35aa	02					.byte	$02			; $8a <=
>35ab	02					.byte	$02			; $8b >
>35ac	02					.byte	$02			; $8c <
>35ad	02					.byte	$02			; $8d =
>35ae	02					.byte	$02			; $8e <>
>35af	03					.byte	$03			; $8f +
>35b0	03					.byte	$03			; $90 -
>35b1	04					.byte	$04			; $91 >>
>35b2	04					.byte	$04			; $92 <<
>35b3	04					.byte	$04			; $93 *
>35b4	04					.byte	$04			; $94 /
>35b5	04					.byte	$04			; $95 mod
>35b6	05					.byte	$05			; $96 ^
>35b7	06					.byte	$06			; $97 !
>35b8	06					.byte	$06			; $98 ?
>35b9	82					.byte	$82			; $99 repeat
>35ba	82					.byte	$82			; $9a while
>35bb	82					.byte	$82			; $9b for
>35bc	82					.byte	$82			; $9c if
>35bd	82					.byte	$82			; $9d defproc
>35be	80					.byte	$80			; $9e until
>35bf	80					.byte	$80			; $9f wend
>35c0	80					.byte	$80			; $a0 next
>35c1	80					.byte	$80			; $a1 then
>35c2	80					.byte	$80			; $a2 endif
>35c3	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.35c4					EvaluateTerm:
.35c4	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.35c6	20 7b 34	jsr $347b			jsr 	EvaluateLevel
.35c9	20 2a 34	jsr $342a			jsr 	DereferenceOne
.35cc	60		rts				rts
.35cd					EvaluateNumericTerm:
.35cd	20 c4 35	jsr $35c4			jsr 	EvaluateTerm
.35d0	b5 90		lda $90,x			lda 	esType,x
.35d2	0a		asl a				asl 	a 							; see if it's a string.
.35d3	30 09		bmi $35de			bmi 	ENTType
.35d5	60		rts				rts
.35d6					EvaluateIntegerTerm:
.35d6	20 c4 35	jsr $35c4			jsr 	EvaluateTerm
.35d9	b5 90		lda $90,x			lda 	esType,x
.35db	d0 01		bne $35de			bne 	ENTType
.35dd	60		rts				rts
.35de					ENTType:
.35de	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.35e0	20 18 15	jsr $1518		jsr	errorHandler
.35e3					EvaluateRoot:
.35e3	a2 00		ldx #$00			ldx 	#0
.35e5					Evaluate:
.35e5	a9 00		lda #$00			lda 	#0
.35e7	20 7b 34	jsr $347b			jsr 	EvaluateLevel
.35ea	20 2a 34	jsr $342a			jsr 	DereferenceOne
.35ed	60		rts				rts
.35ee					EvaluateNumeric:
.35ee	20 e5 35	jsr $35e5			jsr 	Evaluate
.35f1	b5 90		lda $90,x			lda 	esType,x
.35f3	0a		asl a				asl 	a 							; see if it's a string.
.35f4	30 e8		bmi $35de			bmi 	ENTType
.35f6	4a		lsr a				lsr 	a 							; shift float flag into carry.
.35f7	4a		lsr a				lsr 	a
.35f8	60		rts				rts
.35f9					EvaluateString:
.35f9	20 e5 35	jsr $35e5			jsr 	Evaluate
.35fc	b5 90		lda $90,x			lda 	esType,x
.35fe	0a		asl a				asl 	a 							; see if it's a string.
.35ff	10 dd		bpl $35de			bpl 	ENTType
.3601	60		rts				rts
.3602					EvaluateRootInteger:
.3602	a2 00		ldx #$00			ldx 	#0
.3604					EvaluateInteger:
.3604	20 e5 35	jsr $35e5			jsr 	Evaluate
.3607	b5 90		lda $90,x			lda 	esType,x
.3609	d0 d3		bne $35de			bne 	ENTType
.360b	60		rts				rts
.360c					EvaluateSmallInteger:
.360c	20 04 36	jsr $3604			jsr 	EvaluateInteger
.360f	b5 a0		lda $a0,x			lda 	esInt1,x
.3611	15 a8		ora $a8,x			ora 	esInt2,x
.3613	15 b0		ora $b0,x			ora 	esInt3,x
.3615	d0 03		bne $361a			bne 	_ESIValue
.3617	b5 98		lda $98,x			lda 	esInt0,x
.3619	60		rts				rts
.361a					_ESIValue:
.361a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.361c	20 18 15	jsr $1518		jsr	errorHandler
.361f					LinkEvaluate:
.361f	aa		tax				tax
.3620	20 e5 35	jsr $35e5			jsr 	Evaluate
.3623	8a		txa				txa
.3624	60		rts				rts
.3625					LinkEvaluateTerm:
.3625	aa		tax				tax
.3626	20 c4 35	jsr $35c4			jsr 	EvaluateTerm
.3629	8a		txa				txa
.362a	60		rts				rts
.362b					LinkEvaluateInteger:
.362b	aa		tax				tax
.362c	20 04 36	jsr $3604			jsr 	EvaluateInteger
.362f	8a		txa				txa
.3630	60		rts				rts
.3631					LinkEvaluateString:
.3631	aa		tax				tax
.3632	20 f9 35	jsr $35f9			jsr 	EvaluateString
.3635	8a		txa				txa
.3636	60		rts				rts
.3637					LinkEvaluateSmallInt:
.3637	aa		tax				tax
.3638	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger
.363b	8a		txa				txa
.363c	60		rts				rts
.363d					EvaluateReference:
.363d	ad b7 35	lda $35b7			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.3640	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.3641	e9 01		sbc #$01			sbc 	#1
.3643	20 7b 34	jsr $347b			jsr 	EvaluateLevel
.3646	b5 90		lda $90,x			lda 	esType,x
.3648	10 01		bpl $364b			bpl 	_ERFail
.364a	60		rts				rts
.364b					_ERFail:
.364b	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.364d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.3650					Event_Str:
.3650	20 ee 35	jsr $35ee			jsr 	EvaluateNumeric 			; get a number.
.3653	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3655	d0 13		bne $366a			bne 	_ESFloat
.3657	20 ad 36	jsr $36ad			jsr 	ConvertGetBase 				; get base, or default.
.365a	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.365c	85 2a		sta $2a				sta 	temp0
.365e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3660	85 2b		sta $2b				sta 	1+(temp0)
.3662	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3664	20 f2 3b	jsr $3bf2			jsr 	MInt32ToString 				; convert to string.
.3667	4c 77 36	jmp $3677			jmp 	_ESCloneExit 				; clone and exit.
.366a					_ESFloat:
.366a	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; check closing )
.366d	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3670	8a		txa				txa
.3671	a2 16		ldx #$16		ldx	#22
.3673	20 00 25	jsr $2500		jsr	floatingpointHandler
.3676	aa		tax				tax
.3677					_ESCloneExit:
.3677	8a		txa				txa
.3678	a2 04		ldx #$04		ldx	#4
.367a	20 47 40	jsr $4047		jsr	stringHandler
.367d	aa		tax				tax
.367e	60		rts				rts
.367f					UnaryVal:
.367f	38		sec				sec 								; Carry set to return value
.3680	b0 01		bcs $3683			bcs 	ValueMain
.3682					UnaryIsVal:
.3682	18		clc				clc									; Carry clear to return legitimacy
.3683					ValueMain:
.3683	08		php				php 								; save results (CS is value, CC is validation)
.3684	20 f9 35	jsr $35f9			jsr 	EvaluateString
.3687	20 ad 36	jsr $36ad			jsr 	ConvertGetBase 				; get base, if any.
.368a	98		tya				tya
.368b	48		pha				pha
.368c	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.368f	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3691	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3693	20 0a 3b	jsr $3b0a			jsr 	MInt32FromString 			; convert it back from a string.
.3696	b0 0c		bcs $36a4			bcs 	_VMSuccess 					; successfully converted.
.3698	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.369a	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.369c	f0 00		beq $369e			beq 	_VMFailed 	 				; so we failed.
.369e					_VMFailed:
.369e	68		pla				pla
.369f	a8		tay				tay
.36a0	28		plp				plp
.36a1	4c 9c 3c	jmp $3c9c			jmp 	MInt32False 				; return 0 whatever.
.36a4					_VMSuccess:
.36a4	68		pla				pla
.36a5	a8		tay				tay
.36a6	28		plp				plp 								; if CS the it was val() so we want the value.
.36a7	b0 03		bcs $36ac			bcs 	_VMExit
.36a9	4c 98 3c	jmp $3c98			jmp 	MInt32True 					; otherwise return true as successful.
.36ac					_VMExit:
.36ac	60		rts				rts
.36ad					ConvertGetBase:
.36ad	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.36af	95 99		sta $99,x			sta 	esInt0+1,x
.36b1	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.36b3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.36b5	d0 0e		bne $36c5			bne 	_CGBDone 					; not found, should be )
.36b7	e8		inx				inx 								; next level
.36b8	c8		iny				iny 								; skip comma.
.36b9	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger		; evaluate the base.
.36bc	ca		dex				dex
.36bd	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.36bf	90 08		bcc $36c9			bcc 	_CGBValue 					; (it should work as high as 37)
.36c1	c9 11		cmp #$11			cmp 	#17
.36c3	b0 04		bcs $36c9			bcs 	_CGBValue
.36c5					_CGBDone:
.36c5	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.36c8	60		rts				rts
.36c9					_CGBValue:
.36c9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.36cb	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.36ce					EventFunction:
.36ce	20 3d 36	jsr $363d			jsr 	EvaluateReference			; get the variable reference that tracks the event
.36d1	b5 90		lda $90,x			lda 	esType,x
.36d3	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.36d5	d0 5b		bne $3732			bne 	_EFType
.36d7	20 1c 3d	jsr $3d1c			jsr 	CheckComma
.36da	e8		inx				inx
.36db	20 04 36	jsr $3604			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.36de	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; finish off with the right bracket
.36e1	ca		dex				dex
.36e2	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.36e4	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.36e6	15 a8		ora $a8,x			ora 	esInt2,x
.36e8	15 b0		ora $b0,x			ora 	esInt3,x
.36ea	d0 41		bne $372d			bne 	_EFValue
.36ec	98		tya				tya
.36ed	48		pha				pha
.36ee	8a		txa				txa
.36ef	48		pha				pha
.36f0	a2 1c		ldx #$1c		ldx	#28
.36f2	20 f6 14	jsr $14f6		jsr	deviceHandler
.36f5	84 2d		sty $2d				sty 	temp1+1
.36f7	85 2c		sta $2c				sta 	temp1
.36f9	68		pla				pla
.36fa	aa		tax				tax
.36fb	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.36fe	a0 03		ldy #$03			ldy 	#3							; if -ve
.3700	b1 2a		lda ($2a),y			lda 	(temp0),y
.3702	30 23		bmi $3727			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3704	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3706	b1 2a		lda ($2a),y			lda 	(temp0),y
.3708	c8		iny				iny
.3709	11 2a		ora ($2a),y			ora 	(temp0),y
.370b	f0 17		beq $3724			beq 	_EFInitialise 				; if so, initialise the value but return false.
.370d	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.370f	38		sec				sec
.3710	b1 2a		lda ($2a),y			lda 	(temp0),y
.3712	e5 2c		sbc $2c				sbc 	temp1
.3714	c8		iny				iny
.3715	b1 2a		lda ($2a),y			lda 	(temp0),y
.3717	e5 2d		sbc $2d				sbc 	temp1+1
.3719	10 0c		bpl $3727			bpl 	_EFFail 					; if trigger >= timer then return False
.371b	20 37 37	jsr $3737			jsr 	SetEventTimer 				; reset the timer for next time.
.371e	20 98 3c	jsr $3c98			jsr	 	MInt32True 					; and treutn true as fired.
.3721	68		pla				pla
.3722	a8		tay				tay
.3723	60		rts				rts
.3724					_EFInitialise:
.3724	20 37 37	jsr $3737			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3727					_EFFail:
.3727	68		pla				pla
.3728	a8		tay				tay
.3729	20 9c 3c	jsr $3c9c			jsr 	MInt32False
.372c	60		rts				rts
.372d					_EFValue:
.372d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.372f	20 18 15	jsr $1518		jsr	errorHandler
.3732					_EFType:
.3732	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3734	20 18 15	jsr $1518		jsr	errorHandler
.3737					SetEventTimer:
.3737	a0 00		ldy #$00			ldy 	#0
.3739	18		clc				clc
.373a	a5 2c		lda $2c				lda 	temp1
.373c	75 99		adc $99,x			adc 	esInt0+1,x
.373e	91 2a		sta ($2a),y			sta		(temp0),y
.3740	c8		iny				iny
.3741	a5 2d		lda $2d				lda 	temp1+1
.3743	75 a1		adc $a1,x			adc 	esInt1+1,x
.3745	91 2a		sta ($2a),y			sta		(temp0),y
.3747	88		dey				dey
.3748	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.374a	d0 04		bne $3750			bne 	_SETExit 					; zero means initialise.....
.374c	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.374e	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.3750					_SETExit:
.3750	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3751					UnaryLen:
.3751	20 5f 37	jsr $375f			jsr 	ULStart
.3754					ULFinish:
.3754	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3756	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3758	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit 				; write it out.
.375b	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.375e	60		rts				rts
.375f	20 f9 35	jsr $35f9	ULStart:jsr 	EvaluateString
.3762	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3764	85 2a		sta $2a				sta 	temp0
.3766	b5 a0		lda $a0,x			lda 	esInt1,x
.3768	85 2b		sta $2b				sta 	temp0+1
.376a	84 32		sty $32				sty 	tempShort 					; get length
.376c	a0 00		ldy #$00			ldy 	#0
.376e	60		rts				rts
.376f					UnaryAsc:
.376f	20 5f 37	jsr $375f			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3772	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3774	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3775	c9 00		cmp #$00			cmp 	#0
.3777	d0 db		bne $3754			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3779	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.377b	20 18 15	jsr $1518		jsr	errorHandler
.377e					UnaryAbs:
.377e	20 ee 35	jsr $35ee			jsr 	EvaluateNumeric 			; some numeric value
.3781	b0 07		bcs $378a			bcs 	_UAFloat 					; CS then float, so use that function
.3783	20 51 3c	jsr $3c51			jsr 	MInt32Absolute 				; int version
.3786	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.3789	60		rts				rts
.378a					_UAFloat:
.378a	8a		txa				txa 								; float version
.378b	a2 02		ldx #$02		ldx	#2
.378d	20 00 25	jsr $2500		jsr	floatingpointHandler
.3790	aa		tax				tax
.3791	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.3794	60		rts				rts
.3795					UnarySgn:
.3795	20 ee 35	jsr $35ee			jsr 	EvaluateNumeric 			; same as above but sign of value
.3798	b0 07		bcs $37a1			bcs 	_USFloat
.379a	20 89 3c	jsr $3c89			jsr 	MInt32Sign
.379d	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.37a0	60		rts				rts
.37a1					_USFloat:
.37a1	8a		txa				txa
.37a2	a2 10		ldx #$10		ldx	#16
.37a4	20 00 25	jsr $2500		jsr	floatingpointHandler
.37a7	aa		tax				tax
.37a8	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.37ab	60		rts				rts
.37ac					UnaryPeek:
.37ac	20 d8 37	jsr $37d8			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.37af	4c cc 37	jmp $37cc			jmp 	PDLByte0
.37b2					UnaryDeek:
.37b2	20 d8 37	jsr $37d8			jsr 	PDLCode
.37b5	4c c6 37	jmp $37c6			jmp 	PDLByte1
.37b8					UnaryLeek:
.37b8	20 d8 37	jsr $37d8			jsr 	PDLCode
.37bb	a0 03		ldy #$03			ldy 	#3							; read 3-2
.37bd	b1 2a		lda ($2a),y			lda 	(temp0),y
.37bf	95 b0		sta $b0,x			sta 	esInt3,x
.37c1	88		dey				dey
.37c2	b1 2a		lda ($2a),y			lda 	(temp0),y
.37c4	95 a8		sta $a8,x			sta 	esInt2,x
.37c6					PDLByte1:
.37c6	a0 01		ldy #$01			ldy 	#1
.37c8	b1 2a		lda ($2a),y			lda 	(temp0),y
.37ca	95 a0		sta $a0,x			sta 	esInt1,x
.37cc					PDLByte0:
.37cc	a0 00		ldy #$00			ldy 	#0
.37ce	b1 2a		lda ($2a),y			lda 	(temp0),y
.37d0	95 98		sta $98,x			sta 	esInt0,x
.37d2	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.37d4	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; check right and return
.37d7	60		rts				rts
.37d8					PDLCode:
.37d8	20 04 36	jsr $3604			jsr 	EvaluateInteger 			; some address
.37db	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.37dd	85 2a		sta $2a				sta 	temp0
.37df	b5 a0		lda $a0,x			lda 	esInt1,x
.37e1	85 2b		sta $2b				sta 	temp0+1
.37e3	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.37e5	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.37e7	95 a8		sta $a8,x			sta 	esInt2,x
.37e9	95 b0		sta $b0,x			sta 	esInt3,x
.37eb	84 32		sty $32				sty 	tempShort 					; save Y
.37ed	60		rts				rts
.37ee					Unary_Random:
.37ee	20 cc 3c	jsr $3ccc			jsr 	MInt32Random 				; generate random number.
.37f1	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.37f3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.37f5	f0 08		beq $37ff			beq 	_URExit
.37f7	e8		inx				inx 								; load range 0..r-1 into +1
.37f8	20 04 36	jsr $3604			jsr 	EvaluateInteger
.37fb	ca		dex				dex
.37fc	20 ef 3a	jsr $3aef			jsr 	MInt32Modulus 				; calculate random % modulus
.37ff					_URExit:
.37ff	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; check right and return
.3802	60		rts				rts
.3803					Unary_Min:
.3803	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3805	d0 02		bne $3809			bne 	UnaryMBody
.3807					Unary_Max:
.3807	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3809					UnaryMBody:
.3809	48		pha				pha 								; save comparator on stack, shows min or max
.380a	20 e5 35	jsr $35e5			jsr 	Evaluate 					; get the first thing to check
.380d					_UnaryMLoop:
.380d	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.380f	c8		iny				iny
.3810	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3812	f0 09		beq $381d			beq 	_UnaryMExit
.3814	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3816	f0 07		beq $381f			beq 	_UnaryMCompare
.3818	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.381a	20 18 15	jsr $1518		jsr	errorHandler
.381d					_UnaryMExit:
.381d	68		pla				pla 								; done so throw comparator and return.
.381e	60		rts				rts
.381f					_UnaryMCompare:
.381f	e8		inx				inx 								; get the 2nd thing to evaluate
.3820	20 e5 35	jsr $35e5			jsr 	Evaluate
.3823	ca		dex				dex
.3824	20 ab 33	jsr $33ab			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3827	85 32		sta $32				sta 	tempShort 					; save result
.3829	68		pla				pla 								; get what we need
.382a	48		pha				pha
.382b	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.382d	d0 de		bne $380d			bne 	_UnaryMLoop 				; no, try another value.
.382f	20 9c 3c	jsr $3c9c			jsr 	MInt32False 				; promote 2nd to 1st.
.3832	20 80 3b	jsr $3b80			jsr 	MInt32Add
.3835	4c 0d 38	jmp $380d			jmp 	_UnaryMLoop
.3838					Unary_Page:
.3838	20 9c 3c	jsr $3c9c			jsr 	MInt32False 				; zero
.383b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.383e	95 98		sta $98,x			sta 	esInt0,x
.3840	ad c9 0a	lda $0ac9			lda 	basePage+1
.3843	95 a0		sta $a0,x			sta 	esInt1,x
.3845	60		rts				rts
.3846					UnaryReference:
.3846	a9 0f		lda #$0f			lda 	#15
.3848	20 7b 34	jsr $347b			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.384b	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.384d	10 05		bpl $3854			bpl 	UType
.384f	a9 00		lda #$00			lda 	#0 							; make it an integer
.3851	95 90		sta $90,x			sta 	esType,x
.3853	60		rts				rts
.3854					UType:
.3854	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3856	20 18 15	jsr $1518		jsr	errorHandler
.3859					UnaryHexMarker:
.3859	4c d6 35	jmp $35d6			jmp 	EvaluateIntegerTerm
.385c					UnaryComplement:
.385c	20 d6 35	jsr $35d6			jsr 	EvaluateIntegerTerm
.385f	20 70 3c	jsr $3c70			jsr 	MInt32Not
.3862	60		rts				rts
.3863					UnaryIntToFloat:
.3863	20 ee 35	jsr $35ee			jsr 	EvaluateNumeric				; some number
.3866	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3868	d0 0b		bne $3875			bne 	_UIFExit
.386a	8a		txa				txa 								; convert and set type
.386b	a2 1c		ldx #$1c		ldx	#28
.386d	20 00 25	jsr $2500		jsr	floatingpointHandler
.3870	aa		tax				tax
.3871	a9 01		lda #$01			lda 	#1
.3873	95 90		sta $90,x			sta 	esType,x
.3875					_UIFExit:
.3875	60		rts				rts
.3876					UnaryFloatToInt:
.3876	20 ee 35	jsr $35ee			jsr 	EvaluateNumeric 			; the number
.3879	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.387b	f0 0b		beq $3888			beq 	_UFIExit
.387d	8a		txa				txa 								; convert to int
.387e	a2 14		ldx #$14		ldx	#20
.3880	20 00 25	jsr $2500		jsr	floatingpointHandler
.3883	aa		tax				tax
.3884	a9 00		lda #$00			lda 	#0 							; set type
.3886	95 90		sta $90,x			sta 	esType,x
.3888					_UFIExit:
.3888	60		rts				rts
.3889					UnaryAlloc:
.3889	e8		inx				inx 								; evaluate memory required
.388a	20 04 36	jsr $3604			jsr 	EvaluateInteger
.388d	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.3890	ca		dex				dex
.3891	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3893	15 b1		ora $b1,x			ora 	esInt3+1,x
.3895	d0 1d		bne $38b4			bne 	_UABadValue
.3897	20 9c 3c	jsr $3c9c			jsr 	MInt32False					; zero return.
.389a	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.389c	95 a0		sta $a0,x			sta 	esInt1,x
.389e	a5 35		lda $35				lda 	lowMemory
.38a0	95 98		sta $98,x			sta 	esInt0,x
.38a2	18		clc				clc 								; add alloc required.
.38a3	75 99		adc $99,x			adc 	esInt0+1,x
.38a5	85 35		sta $35				sta 	lowMemory
.38a7	a5 36		lda $36				lda 	lowMemory+1
.38a9	75 a1		adc $a1,x			adc 	esInt1+1,x
.38ab	85 36		sta $36				sta 	lowMemory+1
.38ad	b0 05		bcs $38b4			bcs		_UABadValue 				; overflow definitely bad.
.38af	c5 34		cmp $34				cmp 	highMemory+1
.38b1	b0 01		bcs $38b4			bcs 	_UABadValue 				; out of memory bad.
.38b3	60		rts				rts
.38b4					_UABadValue:
.38b4	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.38b6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.38b9					UnaryTimer:
.38b9	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; no parameters
.38bc	98		tya				tya
.38bd	48		pha				pha
.38be	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero 					; zero result
.38c1	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.38c3	a2 1c		ldx #$1c		ldx	#28
.38c5	20 f6 14	jsr $14f6		jsr	deviceHandler
.38c8	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.38ca	95 98		sta $98,x			sta 	esInt0,x
.38cc	98		tya				tya
.38cd	95 a0		sta $a0,x			sta 	esInt1,x
.38cf	68		pla				pla
.38d0	a8		tay				tay
.38d1	60		rts				rts
.38d2					UnaryInkey:
.38d2	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.38d5	86 2a		stx $2a				stx 	temp0
.38d7	a2 0a		ldx #$0a		ldx	#10
.38d9	20 f6 14	jsr $14f6		jsr	deviceHandler
.38dc	a6 2a		ldx $2a				ldx 	temp0
.38de	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit
.38e1	60		rts				rts
.38e2					UnaryGet:
.38e2	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.38e5	86 2a		stx $2a				stx 	temp0
.38e7					_UGLoop:
.38e7	a2 02		ldx #$02		ldx	#2
.38e9	20 f6 14	jsr $14f6		jsr	deviceHandler
.38ec	a2 0a		ldx #$0a		ldx	#10
.38ee	20 f6 14	jsr $14f6		jsr	deviceHandler
.38f1	c9 00		cmp #$00			cmp 	#0
.38f3	f0 f2		beq $38e7			beq 	_UGLoop
.38f5	a6 2a		ldx $2a				ldx 	temp0
.38f7	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit
.38fa	60		rts				rts
.38fb					UnaryGetString:
.38fb	20 e2 38	jsr $38e2			jsr 	UnaryGet
.38fe					UGSDoChr:
.38fe	4c 4f 39	jmp $394f			jmp 	ChrCode
.3901					UnaryInkeyString:
.3901	20 d2 38	jsr $38d2			jsr 	UnaryInkey
.3904	b5 98		lda $98,x			lda 	esInt0,x
.3906	d0 f6		bne $38fe			bne 	UGSDoChr
.3908	8a		txa				txa
.3909	a2 08		ldx #$08		ldx	#8
.390b	20 47 40	jsr $4047		jsr	stringHandler
.390e	aa		tax				tax
.390f	60		rts				rts
.3910					UnarySys:
.3910	20 04 36	jsr $3604			jsr 	EvaluateInteger 				; get the address
.3913	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen
.3916	20 f2 29	jsr $29f2			jsr 	TOSToTemp0 						; copy call address to temp0
.3919	8a		txa				txa
.391a	48		pha				pha
.391b	98		tya				tya
.391c	48		pha				pha
.391d	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3920	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3923	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3926	20 35 39	jsr $3935			jsr 	_CallTemp0
.3929	85 32		sta $32				sta 	tempShort 						; restore YX
.392b	68		pla				pla
.392c	a8		tay				tay
.392d	68		pla				pla
.392e	aa		tax				tax
.392f	a5 32		lda $32				lda 	tempShort
.3931	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit 					; return result.
.3934	60		rts				rts
.3935					_CallTemp0:
.3935	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3938					UnaryMem:
.3938	20 9c 3c	jsr $3c9c			jsr 	MInt32False 					; set to false (e.g. 0)
.393b	38		sec				sec
.393c	a5 33		lda $33				lda 	highMemory 						; calculate value
.393e	e5 35		sbc $35				sbc 	lowMemory
.3940	95 98		sta $98,x			sta 	esInt0,x
.3942	a5 34		lda $34				lda 	highMemory+1
.3944	e5 36		sbc $36				sbc 	lowMemory+1
.3946	95 a0		sta $a0,x			sta 	esInt1,x
.3948	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3949					ExecChr:
.3949	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger		; character number 0-255
.394c	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen				; right bracket
.394f					ChrCode:
.394f	98		tya				tya
.3950	48		pha				pha
.3951	8a		txa				txa 								; A = stack
.3952	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3954	a2 02		ldx #$02		ldx	#2
.3956	20 47 40	jsr $4047		jsr	stringHandler
.3959	aa		tax				tax 								; X = stack
.395a	68		pla				pla
.395b	a8		tay				tay
.395c	60		rts				rts
.395d					ExecLower:
.395d	38		sec				sec 								; set carry is lower
.395e	b0 01		bcs $3961			bcs 	ExecUpperLower
.3960					ExecUpper:
.3960	18		clc				clc 								; clear carry is upper
.3961					ExecUpperLower:
.3961	08		php				php 								; save carry
.3962	20 f9 35	jsr $35f9			jsr 	EvaluateString 				; string to stack,X
.3965	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; check closing right bracket.
.3968	28		plp				plp 								; restore carry, save Y
.3969	98		tya				tya
.396a	48		pha				pha
.396b	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.396d	2a		rol a				rol 	a
.396e	a8		tay				tay 								; now in Y
.396f	8a		txa				txa 								; do the substring and exit.
.3970	a2 0c		ldx #$0c		ldx	#12
.3972	20 47 40	jsr $4047		jsr	stringHandler
.3975	aa		tax				tax
.3976	68		pla				pla
.3977	a8		tay				tay
.3978	60		rts				rts
.3979					ExecLeft:
.3979	20 f9 35	jsr $35f9			jsr 	EvaluateString 				; string to stack,X
.397c	20 1c 3d	jsr $3d1c			jsr 	CheckComma
.397f	e8		inx				inx
.3980	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3982	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit
.3985	e8		inx				inx
.3986	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3989					ExecSubstring:
.3989	ca		dex				dex 								; fix up X
.398a	ca		dex				dex
.398b	20 0f 3d	jsr $3d0f			jsr 	CheckRightParen 			; check closing right bracket.
.398e	8a		txa				txa 								; do the substring and exit.
.398f	a2 0e		ldx #$0e		ldx	#14
.3991	20 47 40	jsr $4047		jsr	stringHandler
.3994	aa		tax				tax
.3995	60		rts				rts
.3996					ExecMid:
.3996	20 f9 35	jsr $35f9			jsr 	EvaluateString 				; string to stack,X
.3999	20 1c 3d	jsr $3d1c			jsr 	CheckComma
.399c	e8		inx				inx
.399d	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.39a0	c9 00		cmp #$00			cmp 	#0
.39a2	f0 15		beq $39b9			beq 	_EMValue
.39a4	e8		inx				inx
.39a5	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.39a7	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit
.39aa	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.39ac	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.39ae	f0 d9		beq $3989			beq 	ExecSubString
.39b0	20 1c 3d	jsr $3d1c			jsr 	CheckComma
.39b3	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.39b6	4c 89 39	jmp $3989			jmp 	ExecSubString
.39b9					_EMValue:
.39b9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.39bb	20 18 15	jsr $1518		jsr	errorHandler
.39be					ExecRight:
.39be	20 f9 35	jsr $35f9			jsr 	EvaluateString 				; string to stack,X
.39c1	20 1c 3d	jsr $3d1c			jsr 	CheckComma
.39c4	e8		inx				inx
.39c5	20 0c 36	jsr $360c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.39c8	ca		dex				dex
.39c9	98		tya				tya
.39ca	48		pha				pha
.39cb	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.39cd	85 2a		sta $2a				sta 	temp0
.39cf	b5 a0		lda $a0,x			lda 	esInt1,x
.39d1	85 2b		sta $2b				sta 	temp0+1
.39d3	a0 00		ldy #$00			ldy 	#0 							; point to length
.39d5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.39d7	18		clc				clc 								; add 1.
.39d8	69 01		adc #$01			adc 	#1
.39da	38		sec				sec
.39db	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.39dd	f0 02		beq $39e1			beq		_ERMake1 					; if zero, make it 1.
.39df	b0 02		bcs $39e3			bcs		_EROkay
.39e1					_ERMake1:
.39e1	a9 01		lda #$01			lda 	#1 							; start position.
.39e3					_EROkay:
.39e3	e8		inx				inx 								; set start pos.
.39e4	95 98		sta $98,x			sta 	esInt0,x
.39e6	e8		inx				inx
.39e7	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.39e9	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit
.39ec	68		pla				pla
.39ed	a8		tay				tay
.39ee	4c 89 39	jmp $3989			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.39f1					MInt32And:
.39f1	b5 98		lda $98,x			lda 	esInt0,x
.39f3	35 99		and $99,x			and 	esInt0+1,x
.39f5	95 98		sta $98,x			sta 	esInt0,x
.39f7	b5 a0		lda $a0,x			lda 	esInt1,x
.39f9	35 a1		and $a1,x			and 	esInt1+1,x
.39fb	95 a0		sta $a0,x			sta 	esInt1,x
.39fd	b5 a8		lda $a8,x			lda 	esInt2,x
.39ff	35 a9		and $a9,x			and 	esInt2+1,x
.3a01	95 a8		sta $a8,x			sta 	esInt2,x
.3a03	b5 b0		lda $b0,x			lda 	esInt3,x
.3a05	35 b1		and $b1,x			and 	esInt3+1,x
.3a07	95 b0		sta $b0,x			sta 	esInt3,x
.3a09	60		rts				rts
.3a0a					MInt32Or:
.3a0a	b5 98		lda $98,x			lda 	esInt0,x
.3a0c	15 99		ora $99,x			ora 	esInt0+1,x
.3a0e	95 98		sta $98,x			sta 	esInt0,x
.3a10	b5 a0		lda $a0,x			lda 	esInt1,x
.3a12	15 a1		ora $a1,x			ora 	esInt1+1,x
.3a14	95 a0		sta $a0,x			sta 	esInt1,x
.3a16	b5 a8		lda $a8,x			lda 	esInt2,x
.3a18	15 a9		ora $a9,x			ora 	esInt2+1,x
.3a1a	95 a8		sta $a8,x			sta 	esInt2,x
.3a1c	b5 b0		lda $b0,x			lda 	esInt3,x
.3a1e	15 b1		ora $b1,x			ora 	esInt3+1,x
.3a20	95 b0		sta $b0,x			sta 	esInt3,x
.3a22	60		rts				rts
.3a23					MInt32Xor:
.3a23	b5 98		lda $98,x			lda 	esInt0,x
.3a25	55 99		eor $99,x			eor 	esInt0+1,x
.3a27	95 98		sta $98,x			sta 	esInt0,x
.3a29	b5 a0		lda $a0,x			lda 	esInt1,x
.3a2b	55 a1		eor $a1,x			eor 	esInt1+1,x
.3a2d	95 a0		sta $a0,x			sta 	esInt1,x
.3a2f	b5 a8		lda $a8,x			lda 	esInt2,x
.3a31	55 a9		eor $a9,x			eor 	esInt2+1,x
.3a33	95 a8		sta $a8,x			sta 	esInt2,x
.3a35	b5 b0		lda $b0,x			lda 	esInt3,x
.3a37	55 b1		eor $b1,x			eor 	esInt3+1,x
.3a39	95 b0		sta $b0,x			sta 	esInt3,x
.3a3b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3a3c					MInt32Compare:
.3a3c	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3a3e	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3a40	d0 13		bne $3a55			bne 	MInt32Compare2
.3a42	b5 a0		lda $a0,x			lda 	esInt1,x
.3a44	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3a46	d0 0d		bne $3a55			bne 	MInt32Compare2
.3a48	b5 a8		lda $a8,x			lda 	esInt2,x
.3a4a	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3a4c	d0 07		bne $3a55			bne 	MInt32Compare2
.3a4e	b5 b0		lda $b0,x			lda 	esInt3,x
.3a50	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3a52	d0 01		bne $3a55			bne 	MInt32Compare2
.3a54	60		rts				rts
.3a55					MInt32Compare2:
.3a55	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3a57	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3a59	b5 a0		lda $a0,x			lda		esInt1,x
.3a5b	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3a5d	b5 a8		lda $a8,x			lda		esInt2,x
.3a5f	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3a61	b5 b0		lda $b0,x			lda		esInt3,x
.3a63	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3a65	50 02		bvc $3a69			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3a67	49 80		eor #$80			eor 	#$80
.3a69					_I32LNoOverflow
.3a69	30 03		bmi $3a6e			bmi 	MInt32CLess					; if -ve then return $FF
.3a6b	a9 01		lda #$01			lda 	#$01						; else return $01
.3a6d	60		rts				rts
.3a6e					MInt32CLess:
.3a6e	a9 ff		lda #$ff			lda 	#$FF
.3a70	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3a71					MInt32SDivide:
.3a71	98		tya				tya  								; save Y, which is the count of negations
.3a72	48		pha				pha
.3a73	a0 00		ldy #$00			ldy 	#0 							; zero count
.3a75	20 8d 3a	jsr $3a8d			jsr 	_MInt32SRemSign 			; unsign TOS
.3a78	e8		inx				inx 								; unsign TOS+1
.3a79	20 8d 3a	jsr $3a8d			jsr 	_MInt32SRemSign
.3a7c	ca		dex				dex
.3a7d	98		tya				tya 								; save sign count on stack
.3a7e	48		pha				pha
.3a7f	20 96 3a	jsr $3a96			jsr 	MInt32UDivide 				; unsigned division
.3a82	68		pla				pla 								; get sign count back
.3a83	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3a85	f0 03		beq $3a8a			beq 	_I32SNoNeg
.3a87	20 56 3c	jsr $3c56			jsr 	MInt32Negate
.3a8a					_I32SNoNeg:
.3a8a	68		pla				pla 								; restoe Y and exit
.3a8b	a8		tay				tay
.3a8c	60		rts				rts
.3a8d					_MInt32SRemSign:
.3a8d	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3a8f	10 04		bpl $3a95			bpl 	_MInt32SRSExit
.3a91	c8		iny				iny 								; increment the sign count
.3a92	20 56 3c	jsr $3c56			jsr 	MInt32Negate 				; negate the value.
.3a95					_MInt32SRSExit:
.3a95	60		rts				rts
.3a96					MInt32UDivide:
.3a96	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3a98	15 a1		ora $a1,x			ora 	esInt1+1,x
.3a9a	15 a2		ora $a2,x			ora 	esInt1+2,x
.3a9c	15 a3		ora $a3,x			ora 	esInt1+3,x
.3a9e	f0 4a		beq $3aea			beq 	_MInt32DZero
.3aa0	e8		inx				inx 								; clear A
.3aa1	e8		inx				inx
.3aa2	20 9c 3c	jsr $3c9c			jsr 	MInt32False
.3aa5	ca		dex				dex
.3aa6	ca		dex				dex
.3aa7	98		tya				tya 								; save Y on the stack
.3aa8	48		pha				pha
.3aa9	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3aab					_MInt32UDLoop:
.3aab	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3aad	36 a0		rol $a0,x			rol 	esInt1,x
.3aaf	36 a8		rol $a8,x			rol 	esInt2,x
.3ab1	36 b0		rol $b0,x			rol 	esInt3,x
.3ab3	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3ab5	36 a2		rol $a2,x			rol 	esInt1+2,x
.3ab7	36 aa		rol $aa,x			rol 	esInt2+2,x
.3ab9	36 b2		rol $b2,x			rol 	esInt3+2,x
.3abb	38		sec				sec 								; calculate A-M saving result on the stack
.3abc	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3abe	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3ac0	48		pha				pha
.3ac1	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3ac3	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ac5	48		pha				pha
.3ac6	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3ac8	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3aca	48		pha				pha
.3acb	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3acd	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3acf	90 10		bcc $3ae1			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3ad1	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3ad3	68		pla				pla
.3ad4	95 aa		sta $aa,x			sta 	esInt2+2,x
.3ad6	68		pla				pla
.3ad7	95 a2		sta $a2,x			sta 	esInt1+2,x
.3ad9	68		pla				pla
.3ada	95 9a		sta $9a,x			sta 	esInt0+2,x
.3adc	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3ade	4c e4 3a	jmp $3ae4			jmp 	_MInt32Next 					; do the next iteration
.3ae1					_MInt32NoSubtract:
.3ae1	68		pla				pla
.3ae2	68		pla				pla
.3ae3	68		pla				pla
.3ae4					_MInt32Next:
.3ae4	88		dey				dey 								; do this 32 times.
.3ae5	d0 c4		bne $3aab			bne 	_MInt32UDLoop
.3ae7	68		pla				pla 								; restore Y and exit
.3ae8	a8		tay				tay
.3ae9	60		rts				rts
.3aea					_MInt32DZero:
.3aea	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3aec	20 18 15	jsr $1518		jsr	errorHandler
.3aef					MInt32Modulus:
.3aef	20 96 3a	jsr $3a96			jsr 	MInt32UDivide 				; do the division.
.3af2	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3af4	95 b0		sta $b0,x			sta 	esInt3,x
.3af6	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3af8	95 a8		sta $a8,x			sta 	esInt2,x
.3afa	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3afc	95 a0		sta $a0,x			sta 	esInt1,x
.3afe	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3b00	95 98		sta $98,x			sta 	esInt0,x
.3b02	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d4b					fs32Length:
>0d4b							.fill 	1
.3b03					LinkInt32FromString:
.3b03	aa		tax				tax
.3b04	98		tya				tya
.3b05	20 0a 3b	jsr $3b0a			jsr 	MInt32FromString
.3b08	8a		txa				txa
.3b09	60		rts				rts
.3b0a					MInt32FromString:
.3b0a	85 32		sta $32				sta 	tempShort 					; save base
.3b0c	98		tya				tya
.3b0d	48		pha				pha
.3b0e	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3b10	b1 2a		lda ($2a),y			lda 	(temp0),y
.3b12	8d 4b 0d	sta $0d4b			sta 	fs32Length
.3b15	f0 65		beq $3b7c			beq 	_I32FSFail2					; fail if length zero.
.3b17	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3b19	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3b1b	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3b1d	d0 09		bne $3b28			bne 	_I32FSNotNegative
.3b1f	ad 4b 0d	lda $0d4b			lda 	fs32Length 					; get length back.
.3b22	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3b24	f0 56		beq $3b7c			beq 	_I32FSFail2
.3b26	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3b28					_I32FSNotNegative:
.3b28	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3b2a	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3b2c	d0 02		bne $3b30			bne 	_I32FSNN2
.3b2e	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3b30					_I32FSNN2:
.3b30	48		pha				pha 								; save base + final sign on stack.
.3b31	20 9c 3c	jsr $3c9c			jsr 	MInt32False 				; zero the return value.
.3b34					_I32FSMainLoop:
.3b34	68		pla				pla 								; get the base back into tempShort
.3b35	48		pha				pha
.3b36	29 7f		and #$7f			and 	#$7F
.3b38	85 32		sta $32				sta 	tempShort
.3b3a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3b3c	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3b3e	90 02		bcc $3b42			bcc 	_I32FSNotLC
.3b40	e9 20		sbc #$20			sbc 	#32
.3b42					_I32FSNotLC:
.3b42	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3b43	e9 30		sbc #$30			sbc 	#"0"
.3b45	90 34		bcc $3b7b			bcc 	_I32FSFail 					; nothing more to do.
.3b47	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3b49	90 06		bcc $3b51			bcc 	_I32FSValidate
.3b4b	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3b4d	90 2c		bcc $3b7b			bcc 	_I32FSFail
.3b4f	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3b51					_I32FSValidate:
.3b51	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3b53	b0 26		bcs $3b7b			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3b55	48		pha				pha 								; save the new digit value.
.3b56	e8		inx				inx 								; put base into next slot up on stack
.3b57	a5 32		lda $32				lda 	tempShort
.3b59	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit
.3b5c	ca		dex				dex
.3b5d	20 b4 3b	jsr $3bb4			jsr 	MInt32Multiply 				; multiply current by the base
.3b60	e8		inx				inx
.3b61	68		pla				pla  								; put additive into next slot
.3b62	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit
.3b65	ca		dex				dex
.3b66	20 80 3b	jsr $3b80			jsr 	MInt32Add 					; and add it
.3b69	c8		iny				iny 								; bump the character pointer
.3b6a	cc 4b 0d	cpy $0d4b			cpy 	fs32Length 					; until > length.
.3b6d	f0 c5		beq $3b34			beq 	_I32FSMainLoop
.3b6f	90 c3		bcc $3b34			bcc 	_I32FSMainLoop
.3b71					_I32FSDone:
.3b71	68		pla				pla 								; get base/final sign back
.3b72	10 03		bpl $3b77			bpl 	_I32FSNN3
.3b74	20 56 3c	jsr $3c56			jsr 	MInt32Negate 				; negate the result.
.3b77					_I32FSNN3:
.3b77	68		pla				pla
.3b78	a8		tay				tay
.3b79	38		sec				sec
.3b7a	60		rts				rts
.3b7b					_I32FSFail:
.3b7b	68		pla				pla
.3b7c					_I32FSFail2:
.3b7c	68		pla				pla
.3b7d	a8		tay				tay
.3b7e	18		clc				clc
.3b7f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3b80					MInt32Add:
.3b80	18		clc				clc
.3b81	b5 98		lda $98,x			lda 	esInt0,x
.3b83	75 99		adc $99,x			adc 	esInt0+1,x
.3b85	95 98		sta $98,x			sta 	esInt0,x
.3b87	b5 a0		lda $a0,x			lda 	esInt1,x
.3b89	75 a1		adc $a1,x			adc 	esInt1+1,x
.3b8b	95 a0		sta $a0,x			sta 	esInt1,x
.3b8d	b5 a8		lda $a8,x			lda 	esInt2,x
.3b8f	75 a9		adc $a9,x			adc 	esInt2+1,x
.3b91	95 a8		sta $a8,x			sta 	esInt2,x
.3b93	b5 b0		lda $b0,x			lda 	esInt3,x
.3b95	75 b1		adc $b1,x			adc 	esInt3+1,x
.3b97	95 b0		sta $b0,x			sta 	esInt3,x
.3b99	60		rts				rts
.3b9a					MInt32Sub:
.3b9a	38		sec				sec
.3b9b	b5 98		lda $98,x			lda 	esInt0,x
.3b9d	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3b9f	95 98		sta $98,x			sta 	esInt0,x
.3ba1	b5 a0		lda $a0,x			lda 	esInt1,x
.3ba3	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3ba5	95 a0		sta $a0,x			sta 	esInt1,x
.3ba7	b5 a8		lda $a8,x			lda 	esInt2,x
.3ba9	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3bab	95 a8		sta $a8,x			sta 	esInt2,x
.3bad	b5 b0		lda $b0,x			lda 	esInt3,x
.3baf	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3bb1	95 b0		sta $b0,x			sta 	esInt3,x
.3bb3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3bb4					MInt32Multiply:
.3bb4	e8		inx				inx 								; copy 2nd -> 3rd
.3bb5	20 da 3b	jsr $3bda			jsr 	MInt32CopyUp
.3bb8	ca		dex				dex
.3bb9	20 da 3b	jsr $3bda			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3bbc	20 9c 3c	jsr $3c9c			jsr 	MInt32False 				; zero 1st.
.3bbf					_I32Loop:
.3bbf	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3bc1	29 01		and #$01			and 	#1
.3bc3	f0 03		beq $3bc8			beq 	_I32NoAdd 					; if set
.3bc5	20 80 3b	jsr $3b80			jsr 	MInt32Add 					; add 2nd to 1st.
.3bc8					_I32NoAdd:
.3bc8	e8		inx				inx 								; shift 2nd left
.3bc9	20 b1 3c	jsr $3cb1			jsr 	MInt32ShiftLeft
.3bcc	e8		inx				inx  								; shift 3rd right
.3bcd	20 ba 3c	jsr $3cba			jsr 	MInt32ShiftRight
.3bd0	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero 					; check if zero.
.3bd3	08		php				php 								; save status bits
.3bd4	ca		dex				dex 	 							; point back to 1st
.3bd5	ca		dex				dex
.3bd6	28		plp				plp 								; get status bits
.3bd7	d0 e6		bne $3bbf			bne 	_I32Loop 					; if non-zero keep going.
.3bd9	60		rts				rts
.3bda					MInt32CopyUp:
.3bda	b5 98		lda $98,x			lda 	esInt0,x
.3bdc	95 99		sta $99,x			sta 	esInt0+1,x
.3bde	b5 a0		lda $a0,x			lda 	esInt1,x
.3be0	95 a1		sta $a1,x			sta 	esInt1+1,x
.3be2	b5 a8		lda $a8,x			lda 	esInt2,x
.3be4	95 a9		sta $a9,x			sta 	esInt2+1,x
.3be6	b5 b0		lda $b0,x			lda 	esInt3,x
.3be8	95 b1		sta $b1,x			sta 	esInt3+1,x
.3bea	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d4c					MCharCount:	.fill 	1						; count of converted characters
.3beb					MLInt32ToString:
.3beb	aa		tax				tax									; module passes stack in A, base in Y
.3bec	98		tya				tya
.3bed	20 f2 3b	jsr $3bf2			jsr 	MInt32ToString
.3bf0	8a		txa				txa
.3bf1	60		rts				rts
.3bf2					MInt32ToString:
.3bf2	48		pha				pha 								; save base
.3bf3	85 32		sta $32				sta 	tempShort 					; save target base.
.3bf5	a9 00		lda #$00			lda 	#0
.3bf7	8d 4c 0d	sta $0d4c			sta 	MCharCount 					; clear character count to 0
.3bfa	98		tya				tya
.3bfb	48		pha				pha
.3bfc	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3bfe	10 10		bpl $3c10			bpl 	_I32TSUnsigned
.3c00	48		pha				pha 								; save base on stack.
.3c01	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3c03	10 08		bpl $3c0d			bpl 	_I32TSNoFlip
.3c05	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3c07	20 43 3c	jsr $3c43			jsr 	MI32WriteCharacter
.3c0a	20 56 3c	jsr $3c56			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3c0d					_I32TSNoFlip:
.3c0d	68		pla				pla 								; get the base back
.3c0e	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3c10					_I32TSUnsigned:
.3c10	20 1e 3c	jsr $3c1e			jsr 	MI32DivideWrite 			; recursive code to output string.
.3c13	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3c15	ad 4c 0d	lda $0d4c			lda 	MCharCount
.3c18	91 2a		sta ($2a),y			sta 	(temp0),y
.3c1a	68		pla				pla
.3c1b	a8		tay				tay
.3c1c	68		pla				pla
.3c1d	60		rts				rts
.3c1e					MI32DivideWrite:
.3c1e	48		pha				pha 								; save the divisor/base
.3c1f	e8		inx				inx 								; write in the dividing position.
.3c20	20 ab 3c	jsr $3cab			jsr 	MInt32Set8Bit
.3c23	ca		dex				dex
.3c24	20 96 3a	jsr $3a96			jsr 	MInt32UDivide 				; divide number by base.
.3c27	68		pla				pla 								; get the base into Y
.3c28	a8		tay				tay
.3c29	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3c2b	48		pha				pha
.3c2c	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero 					; is the result zero ?
.3c2f	f0 04		beq $3c35			beq 	_I32NoRecurse 				; if so, don't recurse.
.3c31	98		tya				tya 								; put base into A
.3c32	20 1e 3c	jsr $3c1e			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3c35					_I32NoRecurse:
.3c35	68		pla				pla 								; get the remainder back
.3c36	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3c38	90 02		bcc $3c3c			bcc 	_I32NotHex
.3c3a	69 06		adc #$06			adc 	#7-1
.3c3c					_I32NotHex:
.3c3c	18		clc				clc 								; make it ASCII
.3c3d	69 30		adc #$30			adc 	#48
.3c3f	20 43 3c	jsr $3c43			jsr 	MI32WriteCharacter 			; write the character out
.3c42	60		rts				rts 								; and exit.
.3c43					MI32WriteCharacter:
.3c43	ee 4c 0d	inc $0d4c			inc 	MCharCount 					; bump count (space for leading count)
.3c46	ac 4c 0d	ldy $0d4c			ldy 	MCharCount 					; get position
.3c49	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3c4b	c8		iny				iny
.3c4c	a9 00		lda #$00			lda 	#0
.3c4e	91 2a		sta ($2a),y			sta 	(temp0),y
.3c50	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d4d					MSeed32:	.fill 	4							; random number seed.
.3c51					MInt32Absolute:
.3c51	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3c53	30 01		bmi $3c56			bmi 	MInt32Negate
.3c55	60		rts				rts
.3c56					MInt32Negate:
.3c56	38		sec				sec 								; subtract from zero.
.3c57	a9 00		lda #$00			lda 	#0
.3c59	f5 98		sbc $98,x			sbc 	esInt0,x
.3c5b	95 98		sta $98,x			sta 	esInt0,x
.3c5d	a9 00		lda #$00			lda 	#0
.3c5f	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3c61	95 a0		sta $a0,x			sta 	esInt1,x
.3c63	a9 00		lda #$00			lda 	#0
.3c65	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3c67	95 a8		sta $a8,x			sta 	esInt2,x
.3c69	a9 00		lda #$00			lda 	#0
.3c6b	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3c6d	95 b0		sta $b0,x			sta 	esInt3,x
.3c6f	60		rts				rts
.3c70					MInt32Not:
.3c70	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3c72	49 ff		eor #$ff			eor 	#$FF
.3c74	95 98		sta $98,x			sta 	esInt0,x
.3c76	b5 a0		lda $a0,x			lda 	esInt1,x
.3c78	49 ff		eor #$ff			eor 	#$FF
.3c7a	95 a0		sta $a0,x			sta 	esInt1,x
.3c7c	b5 a8		lda $a8,x			lda 	esInt2,x
.3c7e	49 ff		eor #$ff			eor 	#$FF
.3c80	95 a8		sta $a8,x			sta 	esInt2,x
.3c82	b5 b0		lda $b0,x			lda 	esInt3,x
.3c84	49 ff		eor #$ff			eor 	#$FF
.3c86	95 b0		sta $b0,x			sta 	esInt3,x
.3c88	60		rts				rts
.3c89					MInt32Sign:
.3c89	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3c8b	30 0b		bmi $3c98			bmi 	MInt32True 					; if set return -1 (true)
.3c8d	20 c3 3c	jsr $3cc3			jsr 	MInt32Zero 					; is it zero ?
.3c90	f0 0a		beq $3c9c			beq 	MInt32False 				; if zero return 0 (false)
.3c92	20 9c 3c	jsr $3c9c			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3c95	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3c97	60		rts				rts
.3c98					MInt32True:
.3c98	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3c9a	d0 02		bne $3c9e			bne 	MInt32WriteAll
.3c9c					MInt32False:
.3c9c	a9 00		lda #$00			lda 	#0
.3c9e					MInt32WriteAll:
.3c9e	95 98		sta $98,x			sta 	esInt0,x
.3ca0					MInt32Write123:
.3ca0	95 a0		sta $a0,x			sta 	esInt1,x
.3ca2	95 a8		sta $a8,x			sta 	esInt2,x
.3ca4	95 b0		sta $b0,x			sta 	esInt3,x
.3ca6	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3ca8	95 90		sta $90,x			sta 	esType,x
.3caa	60		rts				rts
.3cab					MInt32Set8Bit:
.3cab	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3cad	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3caf	f0 ef		beq $3ca0			beq		MInt32Write123
.3cb1					MInt32ShiftLeft:
.3cb1	16 98		asl $98,x			asl 	esInt0,x
.3cb3	36 a0		rol $a0,x			rol	 	esInt1,x
.3cb5	36 a8		rol $a8,x			rol	 	esInt2,x
.3cb7	36 b0		rol $b0,x			rol	 	esInt3,x
.3cb9	60		rts				rts
.3cba					MInt32ShiftRight:
.3cba	56 b0		lsr $b0,x			lsr 	esInt3,x
.3cbc	76 a8		ror $a8,x			ror 	esInt2,x
.3cbe	76 a0		ror $a0,x			ror 	esInt1,x
.3cc0	76 98		ror $98,x			ror 	esInt0,x
.3cc2	60		rts				rts
.3cc3					MInt32Zero:
.3cc3	b5 98		lda $98,x			lda 	esInt0,x
.3cc5	15 a0		ora $a0,x			ora 	esInt1,x
.3cc7	15 a8		ora $a8,x			ora 	esInt2,x
.3cc9	15 b0		ora $b0,x			ora 	esInt3,x
.3ccb	60		rts				rts
.3ccc					MInt32Random:
.3ccc	98		tya				tya
.3ccd	48		pha				pha
.3cce	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3cd0	ad 4d 0d	lda $0d4d			lda 	MSeed32+0 					; check the seed isn't zero
.3cd3	d0 03		bne $3cd8			bne 	_Random1
.3cd5	a8		tay				tay 								; if so do it 256 times
.3cd6	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3cd8					_Random1:
.3cd8	0a		asl a				asl 	a
.3cd9	2e 4e 0d	rol $0d4e			rol 	MSeed32+1
.3cdc	2e 4f 0d	rol $0d4f			rol 	MSeed32+2
.3cdf	2e 50 0d	rol $0d50			rol 	MSeed32+3
.3ce2	90 02		bcc $3ce6			bcc 	_Random2
.3ce4	49 c5		eor #$c5			eor 	#$C5
.3ce6					_Random2:
.3ce6	88		dey				dey
.3ce7	d0 ef		bne $3cd8			bne 	_Random1
.3ce9	8d 4d 0d	sta $0d4d			sta 	MSeed32+0 					; copy the seed in.
.3cec	95 98		sta $98,x			sta 	esInt0,x
.3cee	ad 4e 0d	lda $0d4e			lda 	MSeed32+1
.3cf1	95 a0		sta $a0,x			sta 	esInt1,x
.3cf3	ad 4f 0d	lda $0d4f			lda 	MSeed32+2
.3cf6	95 a8		sta $a8,x			sta 	esInt2,x
.3cf8	ad 50 0d	lda $0d50			lda 	MSeed32+3
.3cfb	95 b0		sta $b0,x			sta 	esInt3,x
.3cfd	68		pla				pla
.3cfe	a8		tay				tay
.3cff	a9 00		lda #$00			lda 	#0
.3d01	95 90		sta $90,x			sta 	esType,x
.3d03	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3d04					CheckToken:
.3d04	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3d06	d0 02		bne $3d0a			bne 	_CTError
.3d08	c8		iny				iny
.3d09	60		rts				rts
.3d0a					_CTError:
.3d0a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3d0c	20 18 15	jsr $1518		jsr	errorHandler
.3d0f					CheckRightParen:
.3d0f	b1 28		lda ($28),y			lda 	(codePtr),y
.3d11	c8		iny				iny
.3d12	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3d14	d0 01		bne $3d17			bne 	_CRPError
.3d16	60		rts				rts
.3d17					_CRPError:
.3d17	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3d19	20 18 15	jsr $1518		jsr	errorHandler
.3d1c					CheckComma:
.3d1c	b1 28		lda ($28),y			lda 	(codePtr),y
.3d1e	c8		iny				iny
.3d1f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3d21	d0 01		bne $3d24			bne 	_CCError
.3d23	60		rts				rts
.3d24					_CCError:
.3d24	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3d26	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3d29					RSReset:
.3d29	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3d2b	85 37		sta $37				sta 	rsPointer
.3d2d	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3d2f	85 38		sta $38				sta 	1+(rsPointer)
.3d31	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3d33	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3d36	60		rts				rts
.3d37					RSClaim:
.3d37	84 32		sty $32				sty 	tempShort 					; preserve Y
.3d39	48		pha				pha 								; save marker on stack.
.3d3a	8a		txa				txa 								; get bytes required.
.3d3b	38		sec				sec
.3d3c	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3d3e	65 37		adc $37				adc 	rsPointer
.3d40	85 37		sta $37				sta 	rsPointer
.3d42	a5 38		lda $38				lda 	rsPointer+1
.3d44	69 ff		adc #$ff			adc 	#$FF
.3d46	85 38		sta $38				sta 	rsPointer+1
.3d48	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3d4a	90 08		bcc $3d54			bcc 	_RSCOverflow
.3d4c	68		pla				pla 								; get marker back
.3d4d	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3d4f	91 37		sta ($37),y			sta 	(rsPointer),y
.3d51	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3d53	60		rts				rts
.3d54					_RSCOverflow:
.3d54	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3d56	20 18 15	jsr $1518		jsr	errorHandler
.3d59					RSFree:
.3d59	18		clc				clc
.3d5a	65 37		adc $37				adc 	rsPointer
.3d5c	85 37		sta $37				sta 	rsPointer
.3d5e	90 02		bcc $3d62			bcc 	_RSFExit
.3d60	e6 38		inc $38				inc 	rsPointer+1
.3d62					_RSFExit:
.3d62	60		rts				rts
.3d63					RSSavePosition:
.3d63	84 32		sty $32				sty 	tempShort 					; save Y position
.3d65	a8		tay				tay 								; this is where we write it.
.3d66	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3d68	91 37		sta ($37),y			sta 	(rsPointer),y
.3d6a	c8		iny				iny
.3d6b	a5 29		lda $29				lda 	codePtr+1
.3d6d	91 37		sta ($37),y			sta 	(rsPointer),y
.3d6f	c8		iny				iny
.3d70	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3d72	91 37		sta ($37),y			sta 	(rsPointer),y
.3d74	a8		tay				tay 								; fix Y back again to original value
.3d75	60		rts				rts
.3d76					RSLoadPosition:
.3d76	a8		tay				tay
.3d77	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3d79	85 28		sta $28				sta 	codePtr
.3d7b	c8		iny				iny
.3d7c	b1 37		lda ($37),y			lda 	(rsPointer),y
.3d7e	85 29		sta $29				sta 	codePtr+1
.3d80	c8		iny				iny
.3d81	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3d83	a8		tay				tay 								; to Y
.3d84	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3d85					WarmStart:
.3d85	a2 04		ldx #$04		ldx	#4
.3d87	20 ec 26	jsr $26ec		jsr	interactionHandler

;******  Return to file: main/main.asm

.3d8a					mainHandler:
.3d8a	7c 8d 3d	jmp ($3d8d,x)			jmp 	(mainVectors,x)
.3d8d					mainVectors:
>3d8d	a9 3d					.word _DummyControlHandler ; index 0
>3d8f	1c 3d					.word CheckComma           ; index 2
>3d91	0f 3d					.word CheckRightParen      ; index 4
>3d93	f4 2e					.word XCommandClear        ; index 6
>3d95	1f 36					.word LinkEvaluate         ; index 8
>3d97	2b 36					.word LinkEvaluateInteger  ; index 10
>3d99	37 36					.word LinkEvaluateSmallInt ; index 12
>3d9b	31 36					.word LinkEvaluateString   ; index 14
>3d9d	25 36					.word LinkEvaluateTerm     ; index 16
>3d9f	eb 3b					.word MLInt32ToString      ; index 18
>3da1	83 30					.word Command_XNew         ; index 20
>3da3	91 30					.word XCommand_Run         ; index 22
>3da5	9d 30					.word Command_RunFrom      ; index 24
>3da7	03 3b					.word LinkInt32FromString  ; index 26
.3da9					_DummyControlHandler:
.3da9	60		rts			rts

;******  Return to file: basic.asm

.3daa					section_end_main:
.3daa					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3daa					StringChrs:
.3daa	aa		tax				tax 								; set up stack
.3dab	a9 02		lda #$02			lda 	#2
.3dad	20 6d 3e	jsr $3e6d			jsr 	AllocateSoftString
.3db0	98		tya				tya
.3db1	20 93 3e	jsr $3e93			jsr 	WriteSoftString
.3db4					StringUpdate:
.3db4	20 c2 3d	jsr $3dc2			jsr 	ReturnSoftString
.3db7	8a		txa				txa
.3db8	60		rts				rts
.3db9					StringNull:
.3db9	aa		tax				tax
.3dba	a9 01		lda #$01			lda 	#1
.3dbc	20 6d 3e	jsr $3e6d			jsr 	AllocateSoftString
.3dbf	4c b4 3d	jmp $3db4			jmp 	StringUpdate
.3dc2					ReturnSoftString:
.3dc2	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3dc4	95 98		sta $98,x			sta 	esInt0,x
.3dc6	a5 3a		lda $3a				lda 	softMemAlloc+1
.3dc8	95 a0		sta $a0,x			sta 	esInt1,x
.3dca	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3dcc	95 a8		sta $a8,x			sta 	esInt2,x
.3dce	95 b0		sta $b0,x			sta 	esInt3,x
.3dd0	a9 40		lda #$40			lda 	#$40 						; type string.
.3dd2	95 90		sta $90,x			sta 	esType,x
.3dd4	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3dd5					STRCompare:
.3dd5	48		pha				pha 								; save A
.3dd6	aa		tax				tax 								; put stack pos in X
.3dd7	98		tya				tya
.3dd8	48		pha				pha
.3dd9	20 0d 3e	jsr $3e0d			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3ddc	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3dde	b1 2a		lda ($2a),y			lda 	(temp0),y
.3de0	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3de2	90 02		bcc $3de6			bcc 	_SCNotSmaller
.3de4	b1 2c		lda ($2c),y			lda 	(temp1),y
.3de6					_SCNotSmaller:
.3de6	aa		tax				tax 								; put that in X. We compare this many chars first.
.3de7					_SCCompareLoop:
.3de7	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3de9	f0 0c		beq $3df7			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3deb	ca		dex				dex 								; decrement chars to compare.
.3dec	c8		iny				iny 								; move to next character
.3ded	38		sec				sec 								; calculate s1[y]-s2[y]
.3dee	b1 2a		lda ($2a),y			lda 	(temp0),y
.3df0	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3df2	d0 0a		bne $3dfe			bne 	_SCReturnResult 			; if different return sign of A
.3df4	4c e7 3d	jmp $3de7			jmp 	_SCCompareLoop
.3df7					_SCSameToEndShortest
.3df7	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3df9	38		sec				sec
.3dfa	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dfc	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3dfe					_SCReturnResult:
.3dfe	08		php				php 								; set return to zero preserving PSW.
.3dff	a2 00		ldx #$00			ldx 	#0
.3e01	28		plp				plp
.3e02	f0 05		beq $3e09			beq 	_SCExit 					; two values equal, then exit
.3e04	ca		dex				dex 								; X = $FF
.3e05	90 02		bcc $3e09			bcc 	_SCExit 					; if 1st < 2nd then -1
.3e07	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3e09					_SCExit:
.3e09	68		pla				pla
.3e0a	a8		tay				tay
.3e0b	68		pla				pla
.3e0c	60		rts				rts
.3e0d					CopyStringPair:
.3e0d	b5 99		lda $99,x			lda 	esInt0+1,x
.3e0f	85 2c		sta $2c				sta 	temp1
.3e11	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3e13	85 2d		sta $2d				sta 	temp1+1
.3e15					CopyStringTop:
.3e15	b5 98		lda $98,x			lda 	esInt0,x
.3e17	85 2a		sta $2a				sta 	temp0
.3e19	b5 a0		lda $a0,x			lda 	esInt1,x
.3e1b	85 2b		sta $2b				sta 	temp0+1
.3e1d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3e1e					StringConcat:
.3e1e	aa		tax				tax									; stack pos in X
.3e1f	98		tya				tya
.3e20	48		pha				pha
.3e21	20 0d 3e	jsr $3e0d			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3e24	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3e25	a0 00		ldy #$00			ldy 	#0
.3e27	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e29	71 2c		adc ($2c),y			adc 	(temp1),y
.3e2b	b0 1c		bcs $3e49			bcs 	_SCError 					; just too many characters here.
.3e2d	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3e2f	b0 18		bcs $3e49			bcs 	_SCError
.3e31	20 6d 3e	jsr $3e6d			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3e34	20 64 3e	jsr $3e64			jsr 	CopySoftToStack 			; copy that to the stack.
.3e37	20 4e 3e	jsr $3e4e			jsr 	SCCopyTemp0 				; copy temp0
.3e3a	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3e3c	85 2a		sta $2a				sta 	temp0
.3e3e	a5 2d		lda $2d				lda 	temp1+1
.3e40	85 2b		sta $2b				sta 	temp0+1
.3e42	20 4e 3e	jsr $3e4e			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3e45	68		pla				pla
.3e46	a8		tay				tay
.3e47	8a		txa				txa 								; and A
.3e48	60		rts				rts
.3e49					_SCError:
.3e49	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3e4b	20 18 15	jsr $1518		jsr	errorHandler
.3e4e					SCCopyTemp0:
.3e4e	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3e50	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e52	85 2e		sta $2e				sta 	temp2
.3e54					_SCCopyLoop:
.3e54	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3e56	f0 0b		beq $3e63			beq 	_SCCopyExit
.3e58	c6 2e		dec $2e				dec 	temp2
.3e5a	c8		iny				iny 								; get next char
.3e5b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e5d	20 93 3e	jsr $3e93			jsr 	WriteSoftString 			; write to soft string.
.3e60	4c 54 3e	jmp $3e54			jmp 	_SCCopyLoop
.3e63					_SCCopyExit:
.3e63	60		rts				rts
.3e64					CopySoftToStack:
.3e64	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3e66	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3e68	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3e6a	95 a0		sta $a0,x			sta 	esInt1,x
.3e6c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3e6d					AllocateSoftString:
.3e6d	85 32		sta $32				sta 	tempShort 					; save count
.3e6f	98		tya				tya
.3e70	48		pha				pha
.3e71	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3e73	d0 09		bne $3e7e			bne 	_ASSDone
.3e75	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3e77	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3e79	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3e7b	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3e7c	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3e7e					_ASSDone:
.3e7e	38		sec				sec 								; allocate downwards enough memory
.3e7f	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3e81	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3e83	85 39		sta $39				sta 	softMemAlloc
.3e85	a5 3a		lda $3a				lda 	softMemAlloc+1
.3e87	e9 00		sbc #$00			sbc 	#0
.3e89	85 3a		sta $3a				sta 	softMemAlloc+1
.3e8b	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3e8d	a8		tay				tay
.3e8e	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3e90	68		pla				pla
.3e91	a8		tay				tay
.3e92	60		rts				rts
.3e93					WriteSoftString:
.3e93	84 32		sty $32				sty 	tempShort 					; save Y
.3e95	48		pha				pha 								; save character on stack
.3e96	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3e98	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3e9a	18		clc				clc
.3e9b	69 01		adc #$01			adc 	#1
.3e9d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3e9f	a8		tay				tay 								; offset in Y
.3ea0	68		pla				pla 								; get char and write.
.3ea1	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3ea3	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3ea5	60		rts				rts
.3ea6					StrClone:
.3ea6	aa		tax				tax 								; set up stack.
.3ea7	98		tya				tya
.3ea8	48		pha				pha
.3ea9	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3eab	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3ead	18		clc				clc
.3eae	69 01		adc #$01			adc 	#1
.3eb0	20 6d 3e	jsr $3e6d			jsr 	AllocateSoftString 			; allocate soft memory
.3eb3	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3eb5	95 98		sta $98,x			sta 	esInt0,x
.3eb7	a5 3a		lda $3a				lda 	softMemAlloc+1
.3eb9	95 a0		sta $a0,x			sta 	esInt1,x
.3ebb	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3ebd	95 a8		sta $a8,x			sta 	esInt2,x
.3ebf	95 b0		sta $b0,x			sta 	esInt3,x
.3ec1	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3ec3	95 90		sta $90,x			sta 	esType,x
.3ec5	20 4e 3e	jsr $3e4e			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3ec8	68		pla				pla
.3ec9	a8		tay				tay
.3eca	8a		txa				txa
.3ecb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3ecc					CaseString:
.3ecc	48		pha				pha 								; save A and copy to X
.3ecd	aa		tax				tax
.3ece	98		tya				tya
.3ecf	48		pha				pha
.3ed0	20 15 3e	jsr $3e15			jsr 	CopyStringTop 				; target string -> temp0
.3ed3	a0 00		ldy #$00			ldy 	#0
.3ed5	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3ed7	18		clc				clc
.3ed8	69 01		adc #$01			adc 	#1 							; one more for length byte
.3eda	20 6d 3e	jsr $3e6d			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3edd	20 64 3e	jsr $3e64			jsr 	CopySoftToStack 			; copy that to the stack.
.3ee0	a0 00		ldy #$00			ldy 	#0
.3ee2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3ee4	aa		tax				tax
.3ee5					_CSCopy:
.3ee5	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3ee7	f0 24		beq $3f0d			beq 	_CSExit
.3ee9	ca		dex				dex
.3eea	c8		iny				iny
.3eeb	68		pla				pla 								; check direction
.3eec	48		pha				pha
.3eed	f0 0c		beq $3efb			beq 	_CSUpper
.3eef	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3ef1	c9 41		cmp #$41			cmp 	#"A"
.3ef3	90 12		bcc $3f07			bcc 	_CSWrite
.3ef5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3ef7	b0 0e		bcs $3f07			bcs 	_CSWrite
.3ef9	90 0a		bcc $3f05			bcc 	_CSFlipWrite
.3efb					_CSUpper:
.3efb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3efd	c9 61		cmp #$61			cmp 	#"a"
.3eff	90 06		bcc $3f07			bcc 	_CSWrite
.3f01	c9 7b		cmp #$7b			cmp 	#"z"+1
.3f03	b0 02		bcs $3f07			bcs 	_CSWrite
.3f05					_CSFlipWrite:
.3f05	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3f07					_CSWrite:
.3f07	20 93 3e	jsr $3e93			jsr 	WriteSoftString 			; add to soft string.
.3f0a	4c e5 3e	jmp $3ee5			jmp 	_CSCopy
.3f0d					_CSExit:
.3f0d	68		pla				pla
.3f0e	a8		tay				tay
.3f0f	68		pla				pla
.3f10	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3f11					StringSubstring:
.3f11	48		pha				pha
.3f12	aa		tax				tax 								; access stack.
.3f13	98		tya				tya
.3f14	48		pha				pha
.3f15	20 15 3e	jsr $3e15			jsr 	CopyStringTop 				; point temp0 to the string.
.3f18	a0 00		ldy #$00			ldy 	#0 							; get length.
.3f1a	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3f1c	85 2c		sta $2c				sta 	temp1
.3f1e	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3f20	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3f22	f0 02		beq $3f26			beq 	_SSBOkay
.3f24	b0 2a		bcs $3f50			bcs 	_SSBReturnNull
.3f26					_SSBOkay:
.3f26	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3f28	18		clc				clc
.3f29	69 01		adc #$01			adc 	#1
.3f2b	38		sec				sec
.3f2c	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3f2e	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3f30	90 02		bcc $3f34			bcc		_SSBTrunc
.3f32	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3f34					_SSBTrunc:
.3f34	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3f36	18		clc				clc
.3f37	69 01		adc #$01			adc 	#1 							; add 1
.3f39	20 6d 3e	jsr $3e6d			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3f3c	20 64 3e	jsr $3e64			jsr 	CopySoftToStack 			; copy that to the stack.
.3f3f	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3f41					_SSBCopyLoop:
.3f41	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3f43	f0 0e		beq $3f53			beq 	_SSBExit
.3f45	c6 2d		dec $2d				dec 	temp1+1
.3f47	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3f49	20 93 3e	jsr $3e93			jsr 	WriteSoftString
.3f4c	c8		iny				iny
.3f4d	4c 41 3f	jmp $3f41			jmp 	_SSBCopyLoop
.3f50					_SSBReturnNull:
.3f50	20 57 3f	jsr $3f57			jsr 	ReturnNull
.3f53					_SSBExit:
.3f53	68		pla				pla
.3f54	a8		tay				tay
.3f55	68		pla				pla
.3f56	60		rts				rts
.3f57					ReturnNull:
.3f57	a9 00		lda #$00			lda 	#0 							; clear null string
.3f59	8d ce 0a	sta $0ace			sta 	NullString
.3f5c	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3f5e	95 98		sta $98,x			sta 	esInt0,x
.3f60	a9 0a		lda #$0a			lda 	#NullString >> 8
.3f62	95 a0		sta $a0,x			sta 	esInt1,x
.3f64	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d51					srcStrLen:
>0d51							.fill 	1
.3f65					StringWrite:
.3f65	aa		tax				tax
.3f66	48		pha				pha
.3f67	98		tya				tya
.3f68	48		pha				pha
.3f69	20 90 3f	jsr $3f90			jsr 	CheckOverwriteCurrent
.3f6c	b0 0d		bcs $3f7b			bcs		_SWCopyCurrent
.3f6e	20 ce 3f	jsr $3fce			jsr 	RequiresConcretion
.3f71	90 0e		bcc $3f81			bcc 	_SWWriteReference
.3f73	20 31 40	jsr $4031			jsr 	CheckSpecialConcretion
.3f76	b0 09		bcs $3f81			bcs 	_SWWriteReference
.3f78	20 e2 3f	jsr $3fe2			jsr 	AllocateHardMemory
.3f7b					_SWCopyCurrent:
.3f7b	20 15 40	jsr $4015			jsr 	CopyStringToHardMemory
.3f7e	4c 8c 3f	jmp $3f8c			jmp 	_SWExit
.3f81					_SWWriteReference
.3f81	a0 00		ldy #$00			ldy 	#0
.3f83	a5 2a		lda $2a				lda 	temp0
.3f85	91 2c		sta ($2c),y			sta 	(temp1),y
.3f87	c8		iny				iny
.3f88	a5 2b		lda $2b				lda 	temp0+1
.3f8a	91 2c		sta ($2c),y			sta 	(temp1),y
.3f8c					_SWExit:
.3f8c	68		pla				pla
.3f8d	a8		tay				tay
.3f8e	68		pla				pla
.3f8f	60		rts				rts
.3f90					CheckOverwriteCurrent:
.3f90	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3f92	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3f94	85 2b		sta $2b				sta 	temp0+1
.3f96	b5 99		lda $99,x			lda 	esInt0+1,x
.3f98	85 2a		sta $2a				sta 	temp0
.3f9a	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3f9c	8d 51 0d	sta $0d51			sta 	srcStrLen
.3f9f	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3fa1	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3fa3	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3fa5	85 2d		sta $2d				sta 	temp1+1
.3fa7	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3fa9	b1 2c		lda ($2c),y			lda 	(temp1),y
.3fab	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3fad	90 1b		bcc $3fca			bcc 	_COCFail 				; in hard memory.
.3faf	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3fb1	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3fb3	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3fb5	85 2e		sta $2e				sta 	temp2
.3fb7	c8		iny				iny
.3fb8	b1 2c		lda ($2c),y			lda 	(temp1),y
.3fba	e9 00		sbc #$00			sbc 	#0
.3fbc	85 2f		sta $2f				sta 	temp2+1
.3fbe	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3fc0	b1 2e		lda ($2e),y			lda 	(temp2),y
.3fc2	38		sec				sec  							; maximum character capacity.
.3fc3	e9 02		sbc #$02			sbc 	#2
.3fc5	cd 51 0d	cmp $0d51			cmp 	srcStrLen 				; if >= the required length
.3fc8	b0 02		bcs $3fcc			bcs 	_COCCanReuse
.3fca					_COCFail:
.3fca	18		clc				clc
.3fcb	60		rts				rts
.3fcc					_COCCanReuse:
.3fcc	38		sec				sec
.3fcd	60		rts				rts
.3fce					RequiresConcretion:
.3fce	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3fd0	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3fd2	b0 0a		bcs $3fde			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3fd4	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3fd6	f0 08		beq $3fe0			beq 	_RCFail 				; if not, this cannot be soft memory.
.3fd8	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3fda	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3fdc	90 02		bcc $3fe0			bcc 	_RCFail 				; so concreting
.3fde					_RCSucceed:
.3fde	38		sec				sec
.3fdf	60		rts				rts
.3fe0					_RCFail:
.3fe0	18		clc				clc
.3fe1	60		rts				rts
.3fe2					AllocateHardMemory:
.3fe2	98		tya				tya
.3fe3	48		pha				pha
.3fe4	ad 51 0d	lda $0d51			lda 	srcStrLen 				; characters in string
.3fe7	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3fe9	b0 04		bcs $3fef			bcs 	_AHMSetMax 				; max out that amount.
.3feb	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3fed	90 02		bcc $3ff1			bcc 	_AHMIsOkay
.3fef					_AHMSetMax:
.3fef	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3ff1					_AHMIsOkay:
.3ff1	48		pha				pha	 							; save size to be allocated
.3ff2	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3ff4	38		sec				sec  							; and copy result to TOS as target address.
.3ff5	65 33		adc $33				adc 	highMemory
.3ff7	85 33		sta $33				sta 	highMemory
.3ff9	a5 34		lda $34				lda 	highMemory+1
.3ffb	69 ff		adc #$ff			adc 	#$FF
.3ffd	85 34		sta $34				sta 	highMemory+1
.3fff	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.4001	68		pla				pla 							; get the total size of the storage block
.4002	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.4004	18		clc				clc
.4005	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.4007	69 01		adc #$01			adc 	#1
.4009	91 2c		sta ($2c),y			sta 	(temp1),y
.400b	a5 34		lda $34				lda 	highMemory+1
.400d	69 00		adc #$00			adc 	#0
.400f	c8		iny				iny
.4010	91 2c		sta ($2c),y			sta 	(temp1),y
.4012	68		pla				pla
.4013	a8		tay				tay
.4014	60		rts				rts
.4015					CopyStringToHardMemory:
.4015	98		tya				tya
.4016	48		pha				pha
.4017	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.4019	b1 2c		lda ($2c),y			lda 	(temp1),y
.401b	85 2e		sta $2e				sta 	temp2
.401d	c8		iny				iny
.401e	b1 2c		lda ($2c),y			lda 	(temp1),y
.4020	85 2f		sta $2f				sta 	temp2+1
.4022	ac 51 0d	ldy $0d51			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.4025					_CSTHMLoop:
.4025	b1 2a		lda ($2a),y			lda 	(temp0),y
.4027	91 2e		sta ($2e),y			sta 	(temp2),y
.4029	88		dey				dey
.402a	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.402c	d0 f7		bne $4025			bne 	_CSTHMLoop
.402e	68		pla				pla
.402f	a8		tay				tay
.4030	60		rts				rts
.4031					CheckSpecialConcretion:
.4031	ad 51 0d	lda $0d51			lda 	srcStrLen 				; check string is null e.g. length = 0
.4034	f0 02		beq $4038			beq 	_CSCNullString
.4036	18		clc				clc
.4037	60		rts				rts
.4038					_CSCNullString:
.4038	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.403a	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.403d	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.403f	85 2a		sta $2a				sta 	temp0
.4041	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.4043	85 2b		sta $2b				sta 	1+(temp0)
.4045	38		sec				sec
.4046	60		rts				rts

;******  Return to file: string/string.asm

.4047					stringHandler:
.4047	7c 4a 40	jmp ($404a,x)			jmp 	(stringVectors,x)
.404a					stringVectors:
>404a	5c 40					.word _DummyControlHandler ; index 0
>404c	aa 3d					.word StringChrs           ; index 2
>404e	a6 3e					.word StrClone             ; index 4
>4050	1e 3e					.word StringConcat         ; index 6
>4052	b9 3d					.word StringNull           ; index 8
>4054	d5 3d					.word STRCompare           ; index 10
>4056	cc 3e					.word CaseString           ; index 12
>4058	11 3f					.word StringSubstring      ; index 14
>405a	65 3f					.word StringWrite          ; index 16
.405c					_DummyControlHandler:
.405c	60		rts			rts

;******  Return to file: basic.asm

.405d					section_end_string:
.405d					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d52					deTokeniseVector:
>0d52							.fill 	2
.0d54					lastCharacterClass:
>0d54							.fill 	1
.0d55					indent:
>0d55							.fill 	1
.405d					ListLine:
.405d	48		pha				pha								; enter here to list to console. sets the output vector
.405e	a9 95		lda #$95			lda 	#(deTokenPrint) & $FF
.4060	8d 52 0d	sta $0d52			sta 	deTokeniseVector
.4063	a9 41		lda #$41			lda 	#(deTokenPrint) >> 8
.4065	8d 53 0d	sta $0d53			sta 	1+(deTokeniseVector)
.4068	68		pla				pla
.4069					Detokenise:
.4069	18		clc				clc 							; space required for line number.
.406a	69 06		adc #$06			adc 	#6
.406c	8d 55 0d	sta $0d55			sta 	indent
.406f	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.4071	8d 54 0d	sta $0d54			sta 	lastCharacterClass
.4074	a2 02		ldx #$02			ldx 	#2
.4076	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.4078	95 a8		sta $a8,x			sta 	esInt2,x
.407a	95 b0		sta $b0,x			sta 	esInt3,x
.407c	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.407e	b1 28		lda ($28),y			lda 	(codePtr),y
.4080	95 98		sta $98,x			sta 	esInt0,x
.4082	c8		iny				iny
.4083	b1 28		lda ($28),y			lda 	(codePtr),y
.4085	95 a0		sta $a0,x			sta 	esInt1,x
.4087	a9 84		lda #$84			lda 	#LTYLineNumber
.4089	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.408c	a9 0a		lda #$0a			lda 	#10 					; base 10
.408e	20 34 41	jsr $4134			jsr 	DTPrintInteger 			; print as integer.
.4091	a0 00		ldy #$00			ldy 	#0 						; get length
.4093	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.4095	aa		tax				tax
.4096					_DTPadOut:
.4096	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4098	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.409b	e8		inx				inx
.409c	ec 55 0d	cpx $0d55			cpx 	indent
.409f	d0 f5		bne $4096			bne 	_DTPadOut
.40a1	a0 03		ldy #$03			ldy 	#3 						; start position.
.40a3					_DTListLoop:
.40a3	b1 28		lda ($28),y			lda 	(codePtr),y
.40a5	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.40a7	f0 5e		beq $4107			beq 	_DTIsString
.40a9	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.40ab	f0 56		beq $4103			beq 	_DTIsFloat
.40ad	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.40af	f0 16		beq $40c7			beq 	_DTHexConstant
.40b1	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.40b3	d0 06		bne $40bb			bne 	_DTNotEnd
.40b5	a9 ff		lda #$ff			lda 	#255 					; print CR
.40b7	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.40ba	60		rts				rts
.40bb					_DTNotEnd:
.40bb	c9 00		cmp #$00			cmp 	#0
.40bd	30 38		bmi $40f7			bmi 	_DTIsToken
.40bf	c9 40		cmp #$40			cmp 	#$40
.40c1	90 3a		bcc $40fd			bcc 	_DTIsIdentifier
.40c3	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.40c5	d0 0d		bne $40d4			bne 	_DTConstant
.40c7					_DTHexConstant:
.40c7	a9 26		lda #$26			lda 	#"&"
.40c9	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.40cc	c8		iny				iny
.40cd	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.40cf	20 b1 41	jsr $41b1			jsr 	DTSwitchMode
.40d2	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.40d4					_DTConstant:
.40d4	48		pha				pha
.40d5	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.40d7	20 b1 41	jsr $41b1			jsr 	DTSwitchMode
.40da	a9 86		lda #$86			lda 	#LTYConstant
.40dc	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.40df	a2 02		ldx #$02			ldx 	#2 						; get its value
.40e1	8a		txa				txa
.40e2	a2 10		ldx #$10		ldx	#16
.40e4	20 8a 3d	jsr $3d8a		jsr	mainHandler
.40e7	aa		tax				tax
.40e8	68		pla				pla 							; get base back
.40e9	85 32		sta $32				sta 	tempShort
.40eb	98		tya				tya
.40ec	48		pha				pha
.40ed	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.40ef	20 34 41	jsr $4134			jsr 	DTPrintInteger
.40f2	68		pla				pla
.40f3	a8		tay				tay
.40f4	4c a3 40	jmp $40a3			jmp 	_DTListLoop
.40f7					_DTIsToken:
.40f7	20 0a 42	jsr $420a			jsr 	DTDecodeToken
.40fa	4c a3 40	jmp $40a3			jmp 	_DTListLoop
.40fd					_DTIsIdentifier:
.40fd	20 c3 41	jsr $41c3			jsr 	DTIdentifier
.4100	4c a3 40	jmp $40a3			jmp 	_DTListLoop
.4103					_DTIsFloat:
>4103	db						.byte 	$DB
.4104	4c 03 41	jmp $4103			jmp 	_DTIsFloat
.4107					_DTIsString:
.4107	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4109	20 b1 41	jsr $41b1			jsr 	DTSwitchMode
.410c	a9 81		lda #$81			lda 	#LTYString
.410e	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.4111	a9 22		lda #$22			lda 	#'"'						; open quote
.4113	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.4116	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.4118	8a		txa				txa
.4119	a2 10		ldx #$10		ldx	#16
.411b	20 8a 3d	jsr $3d8a		jsr	mainHandler
.411e	aa		tax				tax
.411f	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.4121	85 2a		sta $2a				sta 	temp0
.4123	b5 a0		lda $a0,x			lda 	esInt1,x
.4125	85 2b		sta $2b				sta 	temp0+1
.4127	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.4129	20 46 41	jsr $4146			jsr 	DTPrintLengthPrefix
.412c	a9 22		lda #$22			lda 	#'"'
.412e	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.4131	4c a3 40	jmp $40a3			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d56					tPrintCount:
>0d56							.fill 	1
.4134					DTPrintInteger:
.4134	48		pha				pha									; save base
.4135	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4137	85 2a		sta $2a				sta 	temp0
.4139	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.413b	85 2b		sta $2b				sta 	1+(temp0)
.413d	68		pla				pla
.413e	a8		tay				tay
.413f	8a		txa				txa
.4140	a2 12		ldx #$12		ldx	#18
.4142	20 8a 3d	jsr $3d8a		jsr	mainHandler
.4145	aa		tax				tax 								; then drop through here.
.4146					DTPrintLengthPrefix:
.4146	aa		tax				tax 								; A = 0 = don't case convert.
.4147	98		tya				tya
.4148	48		pha				pha
.4149	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.414b	b1 2a		lda ($2a),y			lda 	(temp0),y
.414d	8d 56 0d	sta $0d56			sta 	tPrintCount
.4150	f0 1b		beq $416d			beq 	_DTPLPExit 					; empty string
.4152					_DTPLPLoop:
.4152	c8		iny				iny 								; get next.
.4153	b1 2a		lda ($2a),y			lda 	(temp0),y
.4155	29 7f		and #$7f			and 	#$7F
.4157	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.4159	f0 0a		beq $4165			beq 	_DTPLPNoCase
.415b	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.415d	90 06		bcc $4165			bcc 	_DTPLPNoCase
.415f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4161	b0 02		bcs $4165			bcs 	_DTPLPNoCase
.4163	49 20		eor #$20			eor 	#"A"^"a"
.4165					_DTPLPNoCase
.4165	20 70 41	jsr $4170			jsr 	ListOutputCharacter 		; call handler
.4168	ce 56 0d	dec $0d56			dec 	tPrintCount 				; do all the characters
.416b	d0 e5		bne $4152			bne 	_DTPLPLoop
.416d					_DTPLPExit:
.416d	68		pla				pla
.416e	a8		tay				tay
.416f	60		rts				rts
.4170					ListOutputCharacter:
.4170	85 32		sta $32				sta 	tempShort
.4172	48		pha				pha
.4173	8a		txa				txa
.4174	48		pha				pha
.4175	98		tya				tya
.4176	48		pha				pha
.4177	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.4179	c9 20		cmp #$20			cmp 	#32
.417b	b0 0c		bcs $4189			bcs		_LOCHiBit
.417d	09 40		ora #$40			ora 	#64 						; conversion
.417f	c9 40		cmp #$40			cmp 	#64							; make l/c
.4181	f0 06		beq $4189			beq 	_LOCHiBit
.4183	c9 5b		cmp #$5b			cmp 	#65+26
.4185	b0 02		bcs $4189			bcs 	_LOCHiBit
.4187	69 20		adc #$20			adc 	#32
.4189					_LOCHiBit:
.4189	20 92 41	jsr $4192			jsr 	_LOCCallVector				; call o/p handler routine
.418c	68		pla				pla
.418d	a8		tay				tay
.418e	68		pla				pla
.418f	aa		tax				tax
.4190	68		pla				pla
.4191					_LOCExit:
.4191	60		rts				rts
.4192					_LOCCallVector:
.4192	6c 52 0d	jmp ($0d52)			jmp 	(deTokeniseVector)
.4195					deTokenPrint:
.4195	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.4197	30 06		bmi $419f			bmi 	_dtpInk
.4199	a2 16		ldx #$16		ldx	#22
.419b	20 f6 14	jsr $14f6		jsr	deviceHandler
.419e	60		rts				rts
.419f	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.41a1	f0 08		beq $41ab			beq 	_dtpCR						; except $FF => CRLF
.41a3	29 07		and #$07			and 	#7
.41a5	a2 08		ldx #$08		ldx	#8
.41a7	20 f6 14	jsr $14f6		jsr	deviceHandler
.41aa	60		rts				rts
.41ab					_dtpCR:
.41ab	a2 06		ldx #$06		ldx	#6
.41ad	20 f6 14	jsr $14f6		jsr	deviceHandler
.41b0	60		rts				rts
.41b1					DTSwitchMode:
.41b1	cd 54 0d	cmp $0d54			cmp 	LastCharacterClass 			; if changed, update character class
.41b4	f0 04		beq $41ba			beq 	_DTSMNoChange
.41b6	8d 54 0d	sta $0d54			sta 	LastCharacterClass
.41b9					_DTSMExit:
.41b9	60		rts				rts
.41ba					_DTSMNoChange:
.41ba	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.41bc	f0 fb		beq $41b9			beq 	_DTSMExit 					; need a space.
.41be	a9 20		lda #$20			lda 	#" "
.41c0	4c 70 41	jmp $4170			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.41c3					DTIdentifier:
.41c3	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.41c5	20 b1 41	jsr $41b1			jsr 	DTSwitchMode
.41c8	a9 87		lda #$87			lda 	#LTYIdentifier
.41ca	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.41cd					_DTILoop:
.41cd	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.41cf	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.41d1	d0 02		bne $41d5			bne 	_DTINotUS
.41d3	a9 5f		lda #$5f			lda 	#"_"
.41d5					_DTINotUS:
.41d5	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.41d8	c8		iny				iny
.41d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.41db	c9 3a		cmp #$3a			cmp 	#$3A
.41dd	90 ee		bcc $41cd			bcc 	_DTILoop
.41df	c8		iny				iny
.41e0	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.41e2	f0 25		beq $4209			beq 	_DTIExit 					; no postfix.
.41e4	48		pha				pha
.41e5	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.41e7	8d 54 0d	sta $0d54			sta 	LastCharacterClass
.41ea	a9 82		lda #$82			lda 	#LTYPunctuation
.41ec	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.41ef	68		pla				pla
.41f0	c9 3b		cmp #$3b			cmp 	#$3B
.41f2	f0 10		beq $4204			beq 	_DTIArray
.41f4	4a		lsr a				lsr 	a 							; array flag in C
.41f5	08		php				php
.41f6	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.41f8	f0 02		beq $41fc			beq 	_DTIDollar
.41fa	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.41fc					_DTIDollar:
.41fc	49 24		eor #$24			eor 	#"$"
.41fe	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.4201	28		plp				plp
.4202	90 05		bcc $4209			bcc 	_DTIExit
.4204					_DTIArray:
.4204	a9 28		lda #$28			lda 	#"("
.4206	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.4209					_DTIExit:
.4209	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.420a					DTDecodeToken:
.420a	a2 00		ldx #$00			ldx 	#0 							; table number to use
.420c	b1 28		lda ($28),y			lda 	(codePtr),y
.420e	c9 84		cmp #$84			cmp 	#$84
.4210	b0 05		bcs $4217			bcs 	_DTNotShift
.4212	29 03		and #$03			and 	#3 							; get the shift 1..3
.4214	0a		asl a				asl 	a 							; put 2 x in X
.4215	aa		tax				tax
.4216	c8		iny				iny
.4217					_DTNotShift:
.4217	bd 19 45	lda $4519,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.421a	85 2a		sta $2a				sta 	temp0 						; point into temp0
.421c	bd 1a 45	lda $451a,x			lda 	TokenTableAddress+1,x
.421f	85 2b		sta $2b				sta 	temp0+1
.4221	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4223	c8		iny				iny 								; consume it.
.4224	aa		tax				tax
.4225	98		tya				tya
.4226	48		pha				pha
.4227					_DTFindText:
.4227	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4229	f0 11		beq $423c			beq 	_DTFoundText
.422b	ca		dex				dex
.422c	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.422e	38		sec				sec
.422f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4231	65 2a		adc $2a				adc 	temp0
.4233	85 2a		sta $2a				sta 	temp0
.4235	90 f0		bcc $4227			bcc 	_DTFindText
.4237	e6 2b		inc $2b				inc 	temp0+1
.4239	4c 27 42	jmp $4227			jmp 	_DTFindText
.423c					_DTFoundText:
.423c	a0 01		ldy #$01			ldy 	#1 							; get first character
.423e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4240	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4242	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4244	90 11		bcc $4257			bcc 	_DTIsPunctuation
.4246	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4248	b0 0d		bcs $4257			bcs 	_DTIsPunctuation
.424a	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.424c	20 b1 41	jsr $41b1			jsr 	DTSwitchMode
.424f	a9 83		lda #$83			lda 	#LTYKeyword
.4251	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.4254	4c 61 42	jmp $4261			jmp 	_DTPrint
.4257					_DTIsPunctuation:
.4257	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4259	20 b1 41	jsr $41b1			jsr 	DTSwitchMode
.425c	a9 82		lda #$82			lda 	#LTYPunctuation
.425e	20 70 41	jsr $4170			jsr 	ListOutputCharacter
.4261					_DTPrint:
.4261	a9 01		lda #$01			lda 	#1 							; fix case.
.4263	20 46 41	jsr $4146			jsr 	DTPrintLengthPrefix 		; print it out.
.4266	a0 00		ldy #$00			ldy 	#0
.4268	b1 2a		lda ($2a),y			lda 	(temp0),y
.426a	a8		tay				tay
.426b	b1 2a		lda ($2a),y			lda 	(temp0),y
.426d	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.426f	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4271	90 04		bcc $4277			bcc 	_DTIsNowPunctuation
.4273	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4275	90 05		bcc $427c			bcc 	_DTPExit
.4277					_DTIsNowPunctuation:
.4277	a9 01		lda #$01			lda 	#1
.4279	8d 54 0d	sta $0d54			sta		LastCharacterClass
.427c					_DTPExit:
.427c	68		pla				pla
.427d	a8		tay				tay
.427e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d57					currentSet:
>0d57							.fill 	1
.427f					TokenSearch:
.427f	8a		txa				txa
.4280	48		pha				pha
.4281	98		tya				tya
.4282	48		pha				pha
.4283	a9 00		lda #$00			lda 	#0
.4285	8d 57 0d	sta $0d57			sta 	currentSet
.4288					_TSLoop:
.4288	ad 57 0d	lda $0d57			lda 	currentSet 					; 2 x currentset in X
.428b	0a		asl a				asl 	a
.428c	aa		tax				tax
.428d	bd 19 45	lda $4519,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.4290	85 2a		sta $2a				sta 	temp0
.4292	bd 1a 45	lda $451a,x			lda 	TokenTableAddress+1,x
.4295	85 2b		sta $2b				sta 	temp0+1
.4297	20 be 42	jsr $42be			jsr 	TokenSearchOne 				; search one table
.429a	b0 0d		bcs $42a9			bcs 	_TSFound 					; found a token.
.429c	ee 57 0d	inc $0d57			inc 	currentSet 					; next set
.429f	ad 57 0d	lda $0d57			lda 	currentSet
.42a2	c9 04		cmp #$04			cmp 	#4
.42a4	d0 e2		bne $4288			bne 	_TSLoop 					; back if not done all four.
.42a6	18		clc				clc 								; clear carry and exit
.42a7	90 10		bcc $42b9			bcc 	_TSExit
.42a9					_TSFound:
.42a9	48		pha				pha 								; save token
.42aa	ad 57 0d	lda $0d57			lda 	currentSet					; if set zero no shift
.42ad	f0 05		beq $42b4			beq 	_TSNoShift
.42af	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.42b1	20 6f 43	jsr $436f			jsr 	TokenWrite
.42b4					_TSNoShift:
.42b4	68		pla				pla 								; get token back
.42b5	20 6f 43	jsr $436f			jsr 	TokenWrite 					; write it
.42b8	38		sec				sec 								; carry set indicating success
.42b9					_TSExit:
.42b9	68		pla				pla
.42ba	a8		tay				tay
.42bb	68		pla				pla
.42bc	aa		tax				tax
.42bd	60		rts				rts
.42be					TokenSearchOne:
.42be	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.42c0					_TSOLoop:
.42c0	a0 00		ldy #$00			ldy 	#0
.42c2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.42c4	f0 26		beq $42ec			beq 	_TSOFail 					; if zero, end of table
.42c6	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.42c9	f0 11		beq $42dc			beq 	_TSOCheckText
.42cb					_TSONext:
.42cb	e8		inx				inx 								; bump token
.42cc	a0 00		ldy #$00			ldy 	#0							; get length
.42ce	b1 2a		lda ($2a),y			lda 	(temp0),y
.42d0	38		sec				sec
.42d1	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.42d3	85 2a		sta $2a				sta 	temp0
.42d5	90 e9		bcc $42c0			bcc 	_TSOLoop
.42d7	e6 2b		inc $2b				inc 	temp0+1
.42d9	4c c0 42	jmp $42c0			jmp 	_TSOLoop
.42dc					_TSOCheckText:
.42dc	a8		tay				tay 								; compare length downto 1.
.42dd					_TSOCheckLoop:
.42dd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.42df	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.42e2	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.42e4	d0 e5		bne $42cb			bne 	_TSONext 					; different goto next.
.42e6	88		dey				dey 								; do all
.42e7	d0 f4		bne $42dd			bne 	_TSOCheckLoop
.42e9	8a		txa				txa 								; return token in A and carry set
.42ea	38		sec				sec
.42eb	60		rts				rts
.42ec					_TSOFail:
.42ec	18		clc				clc
.42ed	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.42ee					TokTest:
.42ee	a2 ff		ldx #$ff				ldx 	#$FF
.42f0	9a		txs					txs
.42f1	a9 0e		lda #$0e			lda 	#(TokenText1) & $FF
.42f3	85 28		sta $28				sta 	codePtr
.42f5	a9 43		lda #$43			lda 	#(TokenText1) >> 8
.42f7	85 29		sta $29				sta 	1+(codePtr)
.42f9	20 0e 43	jsr $430e				jsr 	Tokenise
.42fc	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.42fe	bd 0e 43	lda $430e,x	_TokCheck:	lda 	TokenBytes1,x
.4301	dd 5b 0d	cmp $0d5b,x				cmp 	tokenBuffer,x
.4304	d0 fe		bne $4304	_TokFail:	bne 	_TokFail	 		; error.
.4306	e8		inx					inx
.4307	c9 80		cmp #$80				cmp 	#$80
.4309	d0 f3		bne $42fe				bne 	_TokCheck
.430b	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.430e					TokenText1:
.430e					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d58					tokenHeader:
>0d58							.fill 	3
.0d5b					tokenBuffer:
>0d5b							.fill 	256
.0e5b					tokenBufferIndex:
>0e5b							.fill 	1
.430e					Tokenise:
.430e	20 88 43	jsr $4388			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4311					TokeniseASCIIZ:
.4311	20 99 43	jsr $4399			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4314	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4316	8d 5b 0e	sta $0e5b			sta 	tokenBufferIndex
.4319	a8		tay				tay 								; start pointer
.431a	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.431c	8d 5b 0d	sta $0d5b			sta 	tokenBuffer
.431f					_TokLoop:
.431f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4321	f0 46		beq $4369			beq 	_TokExit 					; if zero, then exit.
.4323	c8		iny				iny 								; skip over spaces.
.4324	c9 20		cmp #$20			cmp 	#" "
.4326	f0 f7		beq $431f			beq 	_TokLoop
.4328	88		dey				dey 								; point back to character.
.4329	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.432b	f0 18		beq $4345			beq 	_TokHexConst
.432d	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.432f	f0 23		beq $4354			beq 	_TokQString
.4331	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.4333	b0 26		bcs $435b			bcs 	_TokPunctuation
.4335	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.4337	b0 29		bcs $4362			bcs 	_TokIdentifier
.4339	c9 3a		cmp #$3a			cmp 	#"9"+1
.433b	b0 1e		bcs $435b			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.433d	c9 30		cmp #$30			cmp 	#"0"
.433f	90 1a		bcc $435b			bcc 	_TokPunctuation 			; < 0, punctuation.
.4341	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.4343	d0 08		bne $434d			bne 	_TokConst
.4345					_TokHexConst:
.4345	c8		iny				iny									; consume token.
.4346	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.4348	20 6f 43	jsr $436f			jsr 	TokenWrite
.434b	a9 10		lda #$10			lda 	#16
.434d					_TokConst:
.434d	20 57 44	jsr $4457			jsr 	TokeniseInteger
.4350	b0 cd		bcs $431f			bcs 	_TokLoop
.4352	90 18		bcc $436c			bcc 	_TokFail
.4354					_TokQString:
.4354	20 ed 44	jsr $44ed			jsr 	TokeniseString
.4357	b0 c6		bcs $431f			bcs 	_TokLoop
.4359	90 11		bcc $436c			bcc 	_TokFail
.435b					_TokPunctuation:
.435b	20 cc 44	jsr $44cc			jsr 	TokenisePunctuation
.435e	b0 bf		bcs $431f			bcs 	_TokLoop
.4360	90 0a		bcc $436c			bcc 	_TokFail
.4362					_TokIdentifier:
.4362	20 c8 43	jsr $43c8			jsr 	TokeniseIdentifier
.4365	b0 b8		bcs $431f			bcs 	_TokLoop
.4367	90 03		bcc $436c			bcc 	_TokFail
.4369					_TokExit:
.4369	a9 01		lda #$01			lda 	#1
.436b	60		rts				rts
.436c					_TokFail:
.436c	a9 00		lda #$00			lda 	#0
.436e	60		rts				rts
.436f					TokenWrite:
.436f	85 32		sta $32				sta 	tempShort 					; save XA
.4371	48		pha				pha
.4372	8a		txa				txa
.4373	48		pha				pha
.4374	a5 32		lda $32				lda 	tempShort
.4376	ae 5b 0e	ldx $0e5b			ldx 	tokenBufferIndex 			; geet index
.4379	9d 5b 0d	sta $0d5b,x			sta 	tokenBuffer,x 				; write byte to buffer
.437c	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.437e	9d 5c 0d	sta $0d5c,x			sta 	tokenBuffer+1,x
.4381	ee 5b 0e	inc $0e5b			inc 	tokenBufferIndex 			; bump index
.4384	68		pla				pla
.4385	aa		tax				tax
.4386	68		pla				pla
.4387	60		rts				rts
.4388					TokeniseMakeASCIIZ:
.4388	a0 00		ldy #$00			ldy 	#0							; get length of string.
.438a	b1 28		lda ($28),y			lda 	(codePtr),y
.438c	a8		tay				tay
.438d	c8		iny				iny 								; +1, the NULL goes here.
.438e	a9 00		lda #$00			lda 	#0
.4390	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.4392	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.4394	d0 02		bne $4398			bne 	_TMKAExit
.4396	e6 29		inc $29				inc 	codePtr+1
.4398					_TMKAExit:
.4398	60		rts				rts
.4399					TokeniseFixCase:
.4399	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.439b	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.439d					_TFCFlipQ:
.439d	8a		txa				txa
.439e	49 01		eor #$01			eor 	#1
.43a0	aa		tax				tax
.43a1					_TFCLoop:
.43a1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.43a3	f0 22		beq $43c7			beq 	_TFCExit 					; if zero exit.
.43a5	c9 20		cmp #$20			cmp 	#32 						; if control
.43a7	90 1a		bcc $43c3			bcc 	_TFCControl
.43a9	c8		iny				iny 								; preconsume
.43aa	c9 22		cmp #$22			cmp 	#'"'
.43ac	f0 ef		beq $439d			beq 	_TFCFlipQ
.43ae	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.43b0	90 ef		bcc $43a1			bcc 	_TFCLoop
.43b2	c9 7b		cmp #$7b			cmp 	#"z"+1
.43b4	b0 eb		bcs $43a1			bcs 	_TFCLoop
.43b6	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.43b8	d0 e7		bne $43a1			bne 	_TFCLoop
.43ba	88		dey				dey
.43bb	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.43bd					_TFCWrite:
.43bd	91 28		sta ($28),y			sta 	(codePtr),y
.43bf	c8		iny				iny
.43c0	4c a1 43	jmp $43a1			jmp 	_TFCLoop
.43c3					_TFCControl:
.43c3	a9 20		lda #$20			lda 	#" "
.43c5	d0 f6		bne $43bd			bne 	_TFCWrite
.43c7					_TFCExit:
.43c7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.43c8					TokeniseIdentifier:
.43c8	a2 00		ldx #$00			ldx 	#0
.43ca					_TICopyID:
.43ca	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.43cc	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.43ce	f0 16		beq $43e6			beq 	_TICopyUnderscore
.43d0	c9 2e		cmp #$2e			cmp 	#"."
.43d2	f0 14		beq $43e8			beq 	_TICopyIn
.43d4	c9 30		cmp #$30			cmp 	#"0"
.43d6	90 1b		bcc $43f3			bcc 	_TIEndCopy
.43d8	c9 3a		cmp #$3a			cmp 	#"9"+1
.43da	90 0c		bcc $43e8			bcc 	_TICopyIn
.43dc	c9 41		cmp #$41			cmp 	#"A"
.43de	90 13		bcc $43f3			bcc 	_TIEndCopy
.43e0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43e2	b0 0f		bcs $43f3			bcs		_TIEndCopy
.43e4	90 02		bcc $43e8			bcc 	_TICopyIn
.43e6					_TICopyUnderScore:
.43e6	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.43e8					_TICopyIn:
.43e8	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.43e9	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.43ec	8e cf 0a	stx $0acf			stx 	convertBuffer
.43ef	c8		iny				iny 								; next character
.43f0	4c ca 43	jmp $43ca			jmp 	_TICopyID 					; loop round
.43f3					_TIEndCopy:
.43f3	a9 24		lda #$24			lda 	#"$"
.43f5	20 4a 44	jsr $444a			jsr 	TIDCheckCopy
.43f8	a9 23		lda #$23			lda 	#"#"
.43fa	20 4a 44	jsr $444a			jsr 	TIDCheckCopy
.43fd	a9 28		lda #$28			lda 	#"("
.43ff	20 4a 44	jsr $444a			jsr 	TIDCheckCopy
.4402	20 7f 42	jsr $427f			jsr 	TokenSearch 				; is it a token
.4405	b0 41		bcs $4448			bcs 	_TIExit 					; if so, then exit.
.4407	98		tya				tya
.4408	48		pha				pha
.4409	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.440b	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.440e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4411	c9 28		cmp #$28			cmp 	#"("
.4413	d0 02		bne $4417			bne 	_TINotArray
.4415	ca		dex				dex 								; yes, remove it and convert to array.
.4416	c8		iny				iny
.4417					_TINotArray:
.4417	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.441a	c9 24		cmp #$24			cmp 	#"$"
.441c	d0 03		bne $4421			bne 	_TINotString
.441e	ca		dex				dex
.441f	c8		iny				iny
.4420	c8		iny				iny
.4421					_TINotString:
.4421	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4424	c9 23		cmp #$23			cmp 	#"#"
.4426	d0 05		bne $442d			bne 	_TINotFloat
.4428	ca		dex				dex
.4429	c8		iny				iny
.442a	c8		iny				iny
.442b	c8		iny				iny
.442c	c8		iny				iny
.442d					_TINotFloat:
.442d	e8		inx				inx 								; write end marker for identifier.
.442e	98		tya				tya
.442f	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4432	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4435	a2 01		ldx #$01			ldx 	#1
.4437					_TIOutput:
.4437	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.443a	29 3f		and #$3f			and 	#$3F
.443c	48		pha				pha
.443d	20 6f 43	jsr $436f			jsr 	TokenWrite
.4440	e8		inx				inx
.4441	68		pla				pla
.4442	c9 3a		cmp #$3a			cmp 	#$3A
.4444	90 f1		bcc $4437			bcc 	_TIOutput
.4446	68		pla				pla
.4447	a8		tay				tay
.4448					_TIExit:
.4448	38		sec				sec 								; this can't fail.
.4449	60		rts				rts
.444a					TIDCheckCopy:
.444a	d1 28		cmp ($28),y			cmp 	(codePtr),y
.444c	d0 08		bne $4456			bne 	_TIDCCExit
.444e	e8		inx				inx
.444f	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4452	8e cf 0a	stx $0acf			stx 	convertBuffer
.4455	c8		iny				iny
.4456					_TIDCCExit:
.4456	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.4457					TokeniseInteger:
.4457	85 2c		sta $2c				sta 	temp1 						; save base
.4459	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.445b	8e cf 0a	stx $0acf			stx 	convertBuffer
.445e					_TIGetChars:
.445e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.4460	c9 30		cmp #$30			cmp 	#"0"
.4462	90 1f		bcc $4483			bcc 	_TIEndGet
.4464	c9 3a		cmp #$3a			cmp 	#"9"+1
.4466	90 10		bcc $4478			bcc 	_TIHaveChar
.4468	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.446a	c9 0a		cmp #$0a			cmp 	#10
.446c	f0 15		beq $4483			beq 	_TIEndGet
.446e	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.4470	c9 41		cmp #$41			cmp 	#"A"
.4472	90 0f		bcc $4483			bcc 	_TIEndGet
.4474	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4476	b0 0b		bcs $4483			bcs 	_TIEndGet
.4478					_TIHaveChar:
.4478	e8		inx				inx 								; write into buffer.
.4479	8e cf 0a	stx $0acf			stx 	convertBuffer
.447c	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.447f	c8		iny				iny 								; next char
.4480	4c 5e 44	jmp $445e			jmp 	_TIGetChars
.4483					_TIEndGet:
.4483	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.4485	f0 1c		beq $44a3			beq 	_TIFail
.4487	98		tya				tya
.4488	48		pha				pha
.4489	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.448b	85 2a		sta $2a				sta 	temp0
.448d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.448f	85 2b		sta $2b				sta 	1+(temp0)
.4491	a9 00		lda #$00			lda 	#0 							; stack level 0
.4493	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.4495	a2 1a		ldx #$1a		ldx	#26
.4497	20 8a 3d	jsr $3d8a		jsr	mainHandler
.449a	68		pla				pla
.449b	a8		tay				tay
.449c	90 05		bcc $44a3			bcc 	_TIFail 					; didn't convert.
.449e	20 a5 44	jsr $44a5			jsr 	TIRecursiveOut 				; recursive output ?
.44a1	38		sec				sec
.44a2	60		rts				rts
.44a3					_TIFail:
.44a3	18		clc				clc
.44a4	60		rts				rts
.44a5					TIRecursiveOut:
.44a5	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.44a7	29 3f		and #$3f			and 	#$3F
.44a9	09 40		ora #$40			ora 	#$40
.44ab	48		pha				pha
.44ac	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.44ae	29 c0		and #$c0			and 	#$C0
.44b0	05 a0		ora $a0				ora 	esInt1
.44b2	05 a8		ora $a8				ora 	esInt2
.44b4	05 b0		ora $b0				ora 	esInt3
.44b6	f0 10		beq $44c8			beq 	_TIRONoRecursion
.44b8	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.44ba					_TIROShift:
.44ba	46 b0		lsr $b0				lsr 	esInt3
.44bc	66 a8		ror $a8				ror 	esInt2
.44be	66 a0		ror $a0				ror 	esInt1
.44c0	66 98		ror $98				ror 	esInt0
.44c2	ca		dex				dex
.44c3	d0 f5		bne $44ba			bne 	_TIROShift
.44c5	20 a5 44	jsr $44a5			jsr 	TIRecursiveOut 				; call recursively
.44c8					_TIRONoRecursion:
.44c8	68		pla				pla 								; pull the old bit.
.44c9	4c 6f 43	jmp $436f			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.44cc					TokenisePunctuation:
.44cc	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.44ce	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.44d1	c8		iny				iny
.44d2	b1 28		lda ($28),y			lda 	(codePtr),y
.44d4	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.44d7	c8		iny				iny 								; Y is +2
.44d8	a9 02		lda #$02			lda 	#2 							; 2 character string.
.44da	8d cf 0a	sta $0acf			sta 	convertBuffer
.44dd	20 7f 42	jsr $427f			jsr 	TokenSearch 				; search for that token.
.44e0	b0 0a		bcs $44ec			bcs 	_TIFound
.44e2	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.44e5	88		dey				dey 								; Y is now +1
.44e6	20 7f 42	jsr $427f			jsr 	TokenSearch 				; search for that token.
.44e9	b0 01		bcs $44ec			bcs 	_TIFound
.44eb	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.44ec					_TIFound:
.44ec	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.44ed					TokeniseString:
.44ed	c8		iny				iny 								; skip opening quote
.44ee	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.44f0	84 2a		sty $2a				sty 	temp0 						; save start.
.44f2					_TSGetLength:
.44f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.44f4	f0 21		beq $4517			beq 	_TSFail						; end of line, fail
.44f6	c8		iny				iny
.44f7	e8		inx				inx
.44f8	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.44fa	d0 f6		bne $44f2			bne 	_TSGetLength
.44fc	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.44fe	20 6f 43	jsr $436f			jsr 	TokenWrite
.4501	8a		txa				txa 								; output length
.4502	20 6f 43	jsr $436f			jsr 	TokenWrite
.4505	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4507	e0 00		cpx #$00			cpx 	#0 							; check ended
.4509	f0 09		beq $4514			beq 	_TSExit
.450b					_TSOutput:
.450b	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.450d	20 6f 43	jsr $436f			jsr 	TokenWrite
.4510	c8		iny				iny
.4511	ca		dex				dex
.4512	d0 f7		bne $450b			bne 	_TSOutput
.4514					_TSExit:
.4514	c8		iny				iny 								; skip ending quote
.4515	38		sec				sec 								; return CS.
.4516	60		rts				rts
.4517					_TSFail:
.4517	18		clc				clc
.4518	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4519					TokenTableAddress:
>4519	21 45						.word 	Group0Text
>451b	ef 46						.word 	Group1Text
>451d	3c 48						.word 	Group2Text
>451f	87 48						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4521					Group0Text:
>4521	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4525	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4528	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>452c	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>452f	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4532	01 be					.byte $01,$be                          ; $8b >
>4534	01 bc					.byte $01,$bc                          ; $8c <
>4536	01 bd					.byte $01,$bd                          ; $8d =
>4538	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>453b	01 ab					.byte $01,$ab                          ; $8f +
>453d	01 ad					.byte $01,$ad                          ; $90 -
>453f	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>4542	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>4545	01 aa					.byte $01,$aa                          ; $93 *
>4547	01 af					.byte $01,$af                          ; $94 /
>4549	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>454d	01 de					.byte $01,$de                          ; $96 ^
>454f	01 a1					.byte $01,$a1                          ; $97 !
>4551	01 bf					.byte $01,$bf                          ; $98 ?
>4553	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>455a	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>4560	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>4564	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>4567	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>456f	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>4575	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>457a	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>457f	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4584	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>458a	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4592	01 a8					.byte $01,$a8                          ; $a4 (
>4594	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4599	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>459e	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>45a3	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>45ab	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>45b0	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>45b5	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>45bb	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>45c0	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>45c5	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>45ca	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>45d1	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>45d8	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>45dd	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>45e4	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>45eb	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>45f1	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>45f8	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>45fe	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4606	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>460c	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4611	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4617	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>461d	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4623	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4628	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>462d	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4634	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>463b	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>4643	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>464b	01 c0					.byte $01,$c0                          ; $c3 @
>464d	01 fe					.byte $01,$fe                          ; $c4 ~
>464f	01 a6					.byte $01,$a6                          ; $c5 &
>4651	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>4657	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>465f	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>4663	01 a9					.byte $01,$a9                          ; $c9 )
>4665	01 ba					.byte $01,$ba                          ; $ca :
>4667	01 ac					.byte $01,$ac                          ; $cb ,
>4669	01 bb					.byte $01,$bb                          ; $cc ;
>466b	01 a7					.byte $01,$a7                          ; $cd '
>466d	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>4670	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>4675	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>467a	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>4680	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4684	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>4688	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>468c	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4692	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>4697	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>469b	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>46a1	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>46a6	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>46ac	02 41 d4				.byte $02,$41,$d4                      ; $db at
>46af	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>46b4	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>46bb	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>46c0	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>46c5	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>46ca	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>46ce	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>46d4	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>46d8	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>46df	01 ae					.byte $01,$ae                          ; $e5 .
>46e1	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>46e6	01 a3					.byte $01,$a3                          ; $e7 #
>46e8	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>46ee	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.46ef					Group1Text:
>46ef	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>46f4	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>46f9	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>46fe	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4702	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4708	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>470c	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4711	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4719	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>471d	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4722	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>4727	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>472c	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4732	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4739	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>473d	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4743	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>4747	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>474b	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>474f	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4753	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>4757	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>475b	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>475f	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>4763	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>4767	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>476b	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>476f	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4773	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>4777	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>477b	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>477f	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4783	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4787	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>478b	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>478f	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4793	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4797	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>479b	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>479f	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>47a3	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>47a7	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>47ab	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>47af	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>47b3	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>47b7	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>47bb	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>47bf	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>47c3	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>47c7	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>47cb	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>47cf	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>47d3	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>47d7	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>47db	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>47df	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>47e3	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>47e7	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>47eb	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>47ef	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>47f3	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>47f7	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>47fb	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>47ff	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4803	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4807	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>480b	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>480f	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4813	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4817	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>481b	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>481f	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4823	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4827	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>482b	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>482f	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4833	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4837	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>483b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.483c					Group2Text:
>483c	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4842	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4848	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>484e	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4853	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>485b	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4862	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4866	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>486b	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4871	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $8f text
>4876	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>487b	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4880	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4886	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4887					Group3Text:
>4887	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>488e	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4895	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>489d	58 a8
>489f	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>48a7	59 a8
>48a9	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>48ae	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>48b5	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>48bc	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>48c3	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>48ca	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.48cb					tokeniserHandler:
.48cb	7c ce 48	jmp ($48ce,x)			jmp 	(tokeniserVectors,x)
.48ce					tokeniserVectors:
>48ce	da 48					.word _DummyControlHandler ; index 0
>48d0	69 40					.word Detokenise           ; index 2
>48d2	5d 40					.word ListLine             ; index 4
>48d4	ee 42					.word TokTest              ; index 6
>48d6	0e 43					.word Tokenise             ; index 8
>48d8	11 43					.word TokeniseASCIIZ       ; index 10
.48da					_DummyControlHandler:
.48da	60		rts			rts

;******  Return to file: basic.asm

.48db					section_end_tokeniser:
.48db					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.48db					AccessArray:
.48db	8a		txa				txa
.48dc	48		pha				pha
.48dd	e8		inx				inx
.48de	20 a7 49	jsr $49a7			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.48e1	68		pla				pla
.48e2	aa		tax				tax
.48e3	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.48e5	85 2a		sta $2a				sta 	temp0
.48e7	b5 a0		lda $a0,x			lda 	esInt1,x
.48e9	85 2b		sta $2b				sta 	temp0+1
.48eb	8a		txa				txa
.48ec	48		pha				pha
.48ed	98		tya				tya
.48ee	48		pha				pha
.48ef					_AAFollow:
.48ef	a0 00		ldy #$00			ldy 	#0
.48f1	b1 2a		lda ($2a),y			lda 	(temp0),y
.48f3	48		pha				pha
.48f4	c8		iny				iny
.48f5	b1 2a		lda ($2a),y			lda 	(temp0),y
.48f7	85 2b		sta $2b				sta 	temp0+1
.48f9	68		pla				pla
.48fa	85 2a		sta $2a				sta 	temp0
.48fc	e8		inx				inx 								; advance to next stack slot.
.48fd	a0 00		ldy #$00			ldy 	#0
.48ff	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4901	d5 98		cmp $98,x			cmp 	esInt0,x
.4903	c8		iny				iny
.4904	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4906	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4908	29 7f		and #$7f			and 	#$7F
.490a	f5 a0		sbc $a0,x			sbc 	esInt1,x
.490c	90 50		bcc $495e			bcc 	_AABadIndex 				; failed on index if max index < required.
.490e	18		clc				clc
.490f	a5 2a		lda $2a				lda 	temp0
.4911	69 02		adc #$02			adc 	#2
.4913	85 2a		sta $2a				sta 	temp0
.4915	90 02		bcc $4919			bcc 	_AANoCarry
.4917	e6 2b		inc $2b				inc 	temp0+1
.4919					_AANoCarry:
.4919	b5 98		lda $98,x			lda 	esInt0,x
.491b	85 2e		sta $2e				sta 	temp2
.491d	b5 a0		lda $a0,x			lda 	esInt1,x
.491f	85 2f		sta $2f				sta 	temp2+1
.4921	ac 5e 0e	ldy $0e5e			ldy 	varType
.4924	b9 01 4a	lda $4a01,y			lda 	CAActualSize-$3A,y
.4927	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4929	30 02		bmi $492d			bmi 	_AANotPointer
.492b	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.492d					_AANotPointer:
.492d	20 ab 4a	jsr $4aab			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4930	18		clc				clc
.4931	a5 2a		lda $2a				lda 	temp0
.4933	65 2e		adc $2e				adc 	temp2
.4935	85 2a		sta $2a				sta 	temp0
.4937	a5 2b		lda $2b				lda 	temp0+1
.4939	65 2f		adc $2f				adc 	temp2+1
.493b	85 2b		sta $2b				sta 	temp0+1
.493d	b5 91		lda $91,x			lda 	esType+1,x
.493f	30 07		bmi $4948			bmi 	_AAUsedAllIndices
.4941	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4943	10 14		bpl $4959			bpl 	_AABadDepth 				; no, too many indexes.
.4945	4c ef 48	jmp $48ef			jmp 	_AAFollow 					; otherwise follow them.
.4948					_AAUsedAllIndices:
.4948	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.494a	30 0d		bmi $4959			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.494c	68		pla				pla
.494d	a8		tay				tay
.494e	68		pla				pla
.494f	aa		tax				tax
.4950	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4952	95 98		sta $98,x			sta 	esInt0,x
.4954	a5 2b		lda $2b				lda 	temp0+1
.4956	95 a0		sta $a0,x			sta 	esInt1,x
.4958	60		rts				rts
.4959					_AABadDepth:
.4959	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.495b	20 18 15	jsr $1518		jsr	errorHandler
.495e					_AABadIndex:
.495e	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4960	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e5c					elementSize:
>0e5c							.fill	 1
.4963					CreateArray:
.4963	20 3a 4b	jsr $4b3a			jsr 	AccessSetup 				; set up the basic stuff.
.4966	ad 5e 0e	lda $0e5e			lda 	varType 					; is the variable type an array
.4969	4a		lsr a				lsr 	a
.496a	90 36		bcc $49a2			bcc 	CANotArray 					; no, cause an error.
.496c	20 43 4c	jsr $4c43			jsr 	FindVariable 				; does the variable exist already
.496f	b0 2c		bcs $499d			bcs 	CAFound 					; cannot redefine it.
.4971	20 77 4b	jsr $4b77			jsr 	CreateVariable 				; create the variable entry.
.4974	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4976	48		pha				pha
.4977	a5 2b		lda $2b				lda 	temp0+1
.4979	48		pha				pha
.497a	a2 00		ldx #$00			ldx 	#0
.497c	20 a7 49	jsr $49a7			jsr 	GetArrayDimensions 			; get the array dimensions
.497f	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4981	20 d7 49	jsr $49d7			jsr 	CreateArrayLevel 			; level to YA
.4984	aa		tax				tax 								; level now in YX
.4985	68		pla				pla 								; get address back to temp0 to write.
.4986	85 2b		sta $2b				sta 	temp0+1
.4988	68		pla				pla
.4989	85 2a		sta $2a				sta 	temp0
.498b	98		tya				tya 								; write YX there.
.498c	a0 06		ldy #$06			ldy 	#6
.498e	91 2a		sta ($2a),y			sta 	(temp0),y
.4990	88		dey				dey
.4991	8a		txa				txa
.4992	91 2a		sta ($2a),y			sta 	(temp0),y
.4994	ac 5f 0e	ldy $0e5f			ldy 	varEnd 						; restore Y and exit.
.4997	60		rts				rts
.4998					CASize:
.4998	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.499a	20 18 15	jsr $1518		jsr	errorHandler
.499d					CAFound:
.499d	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.499f	20 18 15	jsr $1518		jsr	errorHandler
.49a2					CANotArray:
.49a2	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.49a4	20 18 15	jsr $1518		jsr	errorHandler
.49a7					GetArrayDimensions:
.49a7	ad 5e 0e	lda $0e5e			lda 	varType 					; push variable type on the stack.
.49aa	48		pha				pha
.49ab	ac 5f 0e	ldy $0e5f			ldy 	varEnd
.49ae					_CAGetDimensions:
.49ae	8a		txa				txa 								; get the next level
.49af	a2 0a		ldx #$0a		ldx	#10
.49b1	20 8a 3d	jsr $3d8a		jsr	mainHandler
.49b4	aa		tax				tax
.49b5	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.49b7	29 e0		and #$e0			and 	#$E0
.49b9	15 a8		ora $a8,x			ora 	esInt2,x
.49bb	15 b0		ora $b0,x			ora 	esInt3,x
.49bd	d0 d9		bne $4998			bne 	CASize
.49bf	e8		inx				inx 								; next level.
.49c0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.49c2	c8		iny				iny
.49c3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.49c5	f0 e7		beq $49ae			beq 	_CAGetDimensions
.49c7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.49c9	d0 cd		bne $4998			bne 	CASize
.49cb	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.49cd	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.49cf	68		pla				pla 								; restore the variable type ($3A-$3F)
.49d0	8d 5e 0e	sta $0e5e			sta 	varType
.49d3	8c 5f 0e	sty $0e5f			sty 	varEnd 						; save exit Y value, after dimensions
.49d6	60		rts				rts
.49d7					CreateArrayLevel:
.49d7	ac 5e 0e	ldy $0e5e			ldy 	varType
.49da	b9 01 4a	lda $4a01,y			lda 	CAActualSize-$3A,y
.49dd	8d 5c 0e	sta $0e5c			sta 	elementSize 				; get element size this level.
.49e0	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.49e2	30 05		bmi $49e9			bmi 	_CANotPointer
.49e4	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.49e6	8d 5c 0e	sta $0e5c			sta 	elementSize
.49e9					_CANotPointer:
.49e9	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.49eb	85 2a		sta $2a				sta 	temp0
.49ed	48		pha				pha
.49ee	a5 36		lda $36				lda 	lowMemory+1
.49f0	85 2b		sta $2b				sta 	temp0+1
.49f2	48		pha				pha
.49f3	20 74 4a	jsr $4a74			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.49f6	a0 00		ldy #$00			ldy 	#0
.49f8	b5 98		lda $98,x			lda 	esInt0,x
.49fa	91 2a		sta ($2a),y			sta 	(temp0),y
.49fc	c8		iny				iny
.49fd	b5 a0		lda $a0,x			lda 	esInt1,x
.49ff	91 2a		sta ($2a),y			sta 	(temp0),y
.4a01	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4a03	30 06		bmi $4a0b			bmi 	_CALNotLast
.4a05	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4a07	09 80		ora #$80			ora 	#$80
.4a09	91 2a		sta ($2a),y			sta 	(temp0),y
.4a0b					_CALNotLast:
.4a0b	a9 02		lda #$02			lda 	#2
.4a0d	20 31 4a	jsr $4a31			jsr 	_CALAddTemp0
.4a10	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4a12	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4a14	b5 a0		lda $a0,x			lda 	esInt1,x
.4a16	95 b0		sta $b0,x			sta 	esInt3,x
.4a18					_CALClear:
.4a18	20 41 4a	jsr $4a41			jsr 	EraseOneElement
.4a1b	ad 5c 0e	lda $0e5c			lda 	elementSize 				; move to next element
.4a1e	20 31 4a	jsr $4a31			jsr 	_CALAddTemp0
.4a21	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4a23	d0 02		bne $4a27			bne 	_CALNoBorrow
.4a25	d6 b0		dec $b0,x			dec 	esInt3,x
.4a27					_CALNoBorrow:
.4a27	d6 a8		dec $a8,x			dec 	esInt2,x
.4a29	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4a2b	10 eb		bpl $4a18			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4a2d	68		pla				pla 								; restore the start of this into YA.
.4a2e	a8		tay				tay
.4a2f	68		pla				pla
.4a30	60		rts				rts
.4a31					_CALAddTemp0:
.4a31	18		clc				clc
.4a32	65 2a		adc $2a				adc 	temp0
.4a34	85 2a		sta $2a				sta 	temp0
.4a36	90 02		bcc $4a3a			bcc 	_CALANoCarry
.4a38	e6 2b		inc $2b				inc 	temp0+1
.4a3a					_CALANoCarry:
.4a3a	60		rts				rts
.4a3b					CAActualSize:
>4a3b	04 04						.byte 	VarISize,VarISize
>4a3d	02 02						.byte 	VarSSize,VarSSize
>4a3f	06 06						.byte 	VarFSize,VarFSize
.4a41					EraseOneElement:
.4a41	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4a43	10 09		bpl $4a4e			bpl 	_EOESubArray
.4a45	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4a47	ad 5e 0e	lda $0e5e			lda 	varType
.4a4a	20 e1 4b	jsr $4be1			jsr 	ZeroTemp0Y
.4a4d	60		rts				rts
.4a4e					_EOESubArray:
.4a4e	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4a50	48		pha				pha
.4a51	a5 2b		lda $2b				lda 	temp0+1
.4a53	48		pha				pha
.4a54	ad 5c 0e	lda $0e5c			lda 	elementSize 				; save element size
.4a57	48		pha				pha
.4a58	e8		inx				inx 								; create at next level
.4a59	20 d7 49	jsr $49d7			jsr 	CreateArrayLevel
.4a5c	ca		dex				dex
.4a5d	85 32		sta $32				sta 	tempShort 					; save A
.4a5f	68		pla				pla  								; restore element size.
.4a60	8d 5c 0e	sta $0e5c			sta 	elementSize
.4a63	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4a64	85 2b		sta $2b				sta 	temp0+1
.4a66	68		pla				pla
.4a67	85 2a		sta $2a				sta 	temp0
.4a69	98		tya				tya 								; store Y/A there
.4a6a	a0 01		ldy #$01			ldy 	#1
.4a6c	91 2a		sta ($2a),y			sta 	(temp0),y
.4a6e	a5 32		lda $32				lda 	tempShort
.4a70	88		dey				dey
.4a71	91 2a		sta ($2a),y			sta 	(temp0),y
.4a73	60		rts				rts
.4a74					AllocateArraySpace:
.4a74	18		clc				clc 								; element count + 1 => temp2.
.4a75	b5 98		lda $98,x			lda 	esInt0,x
.4a77	69 01		adc #$01			adc 	#1
.4a79	85 2e		sta $2e				sta 	temp2
.4a7b	b5 a0		lda $a0,x			lda 	esInt1,x
.4a7d	69 00		adc #$00			adc 	#0
.4a7f	85 2f		sta $2f				sta 	temp2+1
.4a81	ad 5c 0e	lda $0e5c			lda 	elementSize 				; bytes per element
.4a84	20 ab 4a	jsr $4aab			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4a87	18		clc				clc 								; add 2 for 'max element' byte.
.4a88	a5 2e		lda $2e				lda 	temp2
.4a8a	69 02		adc #$02			adc 	#2
.4a8c	85 2e		sta $2e				sta 	temp2
.4a8e	90 02		bcc $4a92			bcc 	_AASNoCarry
.4a90	e6 2f		inc $2f				inc 	temp2+1
.4a92					_AASNoCarry:
.4a92	18		clc				clc 								; add to low memory, allocating space.
.4a93	a5 35		lda $35				lda 	lowMemory
.4a95	65 2e		adc $2e				adc 	temp2
.4a97	85 35		sta $35				sta 	lowMemory
.4a99	a5 36		lda $36				lda 	lowMemory+1
.4a9b	65 2f		adc $2f				adc 	temp2+1
.4a9d	85 36		sta $36				sta 	lowMemory+1
.4a9f	b0 05		bcs $4aa6			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4aa1	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4aa3	b0 01		bcs $4aa6			bcs 	_AASFail
.4aa5	60		rts				rts
.4aa6					_AASFail:
.4aa6	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4aa8	20 18 15	jsr $1518		jsr	errorHandler
.4aab					MultiplyTemp2ByA:
.4aab	48		pha				pha
.4aac	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4aae	85 30		sta $30				sta 	temp3
.4ab0	a5 2f		lda $2f				lda 	temp2+1
.4ab2	85 31		sta $31				sta 	temp3+1
.4ab4	68		pla				pla
.4ab5	06 2e		asl $2e				asl 	temp2 						; double it.
.4ab7	26 2f		rol $2f				rol 	temp2+1
.4ab9	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4abb	f0 15		beq $4ad2			beq 	_MTBAExit
.4abd	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4abf	d0 0d		bne $4ace			bne 	_MTBANotFloat
.4ac1	18		clc				clc 								; so this will make it x 3
.4ac2	a5 2e		lda $2e				lda 	temp2
.4ac4	65 30		adc $30				adc 	temp3
.4ac6	85 2e		sta $2e				sta 	temp2
.4ac8	a5 2f		lda $2f				lda 	temp2+1
.4aca	65 31		adc $31				adc 	temp3+1
.4acc	85 2f		sta $2f				sta 	temp2+1
.4ace					_MTBANotFloat:
.4ace	06 2e		asl $2e				asl 	temp2 						; double it.
.4ad0	26 2f		rol $2f				rol 	temp2+1
.4ad2					_MTBAExit:
.4ad2	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e5d					varHash:
>0e5d							.fill	1
.0e5e					varType:
>0e5e							.fill 	1
.0e5f					varEnd:
>0e5f							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4ad3					AccessVariable:
.4ad3	aa		tax				tax 								; stack in X
.4ad4	c8		iny				iny									; look at second character
.4ad5	b1 28		lda ($28),y			lda 	(codePtr),y
.4ad7	88		dey				dey
.4ad8	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4ada	d0 15		bne $4af1			bne 	_AVLong 					; no, always use the hash tables.
.4adc	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4ade	38		sec				sec 	 							; make it 0-25
.4adf	e9 01		sbc #$01			sbc 	#1
.4ae1	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4ae2	0a		asl a				asl 	a
.4ae3	95 98		sta $98,x			sta 	esInt0,x
.4ae5	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4ae7	95 a0		sta $a0,x			sta 	esInt1,x
.4ae9	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4aeb	95 90		sta $90,x			sta 	esType,x
.4aed	c8		iny				iny 								; skip over the variable reference in the code.
.4aee	c8		iny				iny  								; (1 letter, 1 type)
.4aef	8a		txa				txa 								; stack in A to return.
.4af0	60		rts				rts
.4af1					_AVLong:
.4af1	8a		txa				txa
.4af2	48		pha				pha
.4af3	20 3a 4b	jsr $4b3a			jsr 	AccessSetup 				; set up the basic information we need for later
.4af6	20 43 4c	jsr $4c43			jsr 	FindVariable 				; does the variable exist already ?
.4af9	b0 0e		bcs $4b09			bcs 	_AVFound 					; yes, then its found
.4afb	ad 5e 0e	lda $0e5e			lda 	varType 					; otherwise, is the variable type an array
.4afe	4a		lsr a				lsr 	a
.4aff	90 05		bcc $4b06			bcc 	_AVCanCreate 				; if not, we can autocreate
.4b01	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4b03	20 18 15	jsr $1518		jsr	errorHandler
.4b06					_AVCanCreate:
.4b06	20 77 4b	jsr $4b77			jsr 	CreateVariable 				; variable does not exist, create it.
.4b09					_AVFound:
.4b09	68		pla				pla
.4b0a	aa		tax				tax
.4b0b	18		clc				clc 								; copy temp0 (variable record address)
.4b0c	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4b0e	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4b10	95 98		sta $98,x			sta 	esInt0,x
.4b12	a5 2b		lda $2b				lda 	temp0+1
.4b14	69 00		adc #$00			adc 	#0
.4b16	95 a0		sta $a0,x			sta 	esInt1,x
.4b18	a9 00		lda #$00			lda 	#0
.4b1a	95 a8		sta $a8,x			sta 	esInt2,x
.4b1c	95 b0		sta $b0,x			sta 	esInt3,x
.4b1e	ac 5e 0e	ldy $0e5e			ldy 	varType 					; get the type ID from the type.
.4b21	b9 fa 4a	lda $4afa,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4b24	95 90		sta $90,x			sta 	esType,x
.4b26	ac 5f 0e	ldy $0e5f			ldy 	varEnd 						; restore Y
.4b29	ad 5e 0e	lda $0e5e			lda 	VarType 					; get variable type, put LSB into C
.4b2c	4a		lsr a				lsr 	a
.4b2d	90 03		bcc $4b32			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4b2f	20 db 48	jsr $48db			jsr 	AccessArray 				; array lookup. if LSB was set.
.4b32					_AVNotArray:
.4b32	8a		txa				txa 								; return stack in A and return
.4b33	60		rts				rts
.4b34					_AVTypeTable:
>4b34	80 80						.byte 	$80,$80						; integer
>4b36	c0 c0						.byte 	$C0,$C0 					; string
>4b38	81 81						.byte 	$81,$81 					; float
.4b3a					AccessSetup:
.4b3a	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4b3c	8d 5d 0e	sta $0e5d			sta 	varHash
.4b3f	98		tya				tya
.4b40	48		pha				pha
.4b41	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4b43	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4b45	b0 0b		bcs $4b52			bcs 	_ASComplete
.4b47	18		clc				clc 								; add to the hash. Might improve this.
.4b48	6d 5d 0e	adc $0e5d			adc 	varHash
.4b4b	8d 5d 0e	sta $0e5d			sta 	varHash
.4b4e	c8		iny				iny 								; next character
.4b4f	4c 41 4b	jmp $4b41			jmp 	_ASLoop
.4b52					_ASComplete:
.4b52	8d 5e 0e	sta $0e5e			sta 	varType 					; save variable type byte
.4b55	c8		iny				iny
.4b56	8c 5f 0e	sty $0e5f			sty 	varEnd 						; save the ending position.
.4b59	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4b5a	e9 3a		sbc #$3a			sbc 	#$3A
.4b5c	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4b5d	0a		asl a				asl 	a
.4b5e	0a		asl a				asl 	a
.4b5f	0a		asl a				asl 	a 							; 2 bytes/word
.4b60	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4b62	ad 5d 0e	lda $0e5d			lda 	varHash 					; get hash
.4b65	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4b67	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4b68	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4b6a	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4b6c	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4b6e	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4b70	69 00		adc #$00			adc 	#0
.4b72	85 3c		sta $3c				sta 	hashList+1
.4b74	68		pla				pla
.4b75	a8		tay				tay
.4b76	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4b77					CreateVariable:
.4b77	98		tya				tya 								; push Y on the stack twice.
.4b78	48		pha				pha									; position in code of the new variable.
.4b79	48		pha				pha
.4b7a	ae 5e 0e	ldx $0e5e			ldx 	varType 					; get var type 0-5 from the var type
.4b7d	bd a1 4b	lda $4ba1,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4b80	48		pha				pha 								; save length
.4b81	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4b83	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4b85	a5 36		lda $36				lda 	lowMemory+1
.4b87	85 2b		sta $2b				sta 	temp0+1
.4b89	68		pla				pla 								; get length
.4b8a	18		clc				clc 								; add to low memory.
.4b8b	65 35		adc $35				adc 	lowMemory
.4b8d	85 35		sta $35				sta 	lowMemory
.4b8f	90 08		bcc $4b99			bcc 	_CVNoCarry
.4b91	e6 36		inc $36				inc 	lowMemory+1
.4b93	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4b95	c5 34		cmp $34				cmp 	highMemory+1
.4b97	b0 3d		bcs $4bd6			bcs 	_CVMemory
.4b99					_CVNoCarry:
.4b99	ad 5d 0e	lda $0e5d			lda 	varHash 					; store hash at offset 4.
.4b9c	a0 04		ldy #$04			ldy 	#4
.4b9e	91 2a		sta ($2a),y			sta 	(temp0),y
.4ba0	68		pla				pla 								; offset, work out where the variable name is.
.4ba1	18		clc				clc
.4ba2	65 28		adc $28				adc 	codePtr
.4ba4	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4ba6	91 2a		sta ($2a),y			sta 	(temp0),y
.4ba8	a5 29		lda $29				lda 	codePtr+1
.4baa	69 00		adc #$00			adc 	#0
.4bac	c8		iny				iny
.4bad	91 2a		sta ($2a),y			sta 	(temp0),y
.4baf	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4bb2	b0 03		bcs $4bb7			bcs 	_CVNotImmediate
.4bb4	20 19 4c	jsr $4c19			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4bb7					_CVNotImmediate:
.4bb7	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4bb9	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4bbb	91 2a		sta ($2a),y			sta 	(temp0),y
.4bbd	c8		iny				iny
.4bbe	b1 3b		lda ($3b),y			lda 	(hashList),y
.4bc0	91 2a		sta ($2a),y			sta 	(temp0),y
.4bc2	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4bc4	91 3b		sta ($3b),y			sta 	(hashList),y
.4bc6	88		dey				dey
.4bc7	a5 2a		lda $2a				lda 	temp0
.4bc9	91 3b		sta ($3b),y			sta 	(hashList),y
.4bcb	ad 5e 0e	lda $0e5e			lda 	varType 					; type in A
.4bce	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4bd0	20 e1 4b	jsr $4be1			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4bd3	68		pla				pla
.4bd4	a8		tay				tay
.4bd5	60		rts				rts
.4bd6					_CVMemory:
.4bd6	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4bd8	20 18 15	jsr $1518		jsr	errorHandler
>4bdb	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4bdd	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4bdf	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4be1					ZeroTemp0Y:
.4be1	4a		lsr a				lsr 	a 							; bit 0 in carry
.4be2	0a		asl a				asl 	a
.4be3	b0 19		bcs $4bfe			bcs 	_ZTExit 					; we don't initialise arrays.
.4be5	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4be7	f0 16		beq $4bff			beq 	_ZTWriteNullString 			; write "" string
.4be9	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4beb	f0 22		beq $4c0f			beq 	_ZTWriteFloat
.4bed	98		tya				tya
.4bee	48		pha				pha
.4bef	a9 00		lda #$00			lda 	#0
.4bf1	91 2a		sta ($2a),y			sta 	(temp0),y
.4bf3	c8		iny				iny
.4bf4	91 2a		sta ($2a),y			sta 	(temp0),y
.4bf6	c8		iny				iny
.4bf7	91 2a		sta ($2a),y			sta 	(temp0),y
.4bf9	c8		iny				iny
.4bfa	91 2a		sta ($2a),y			sta 	(temp0),y
.4bfc	68		pla				pla
.4bfd	a8		tay				tay
.4bfe					_ZTExit:
.4bfe	60		rts				rts
.4bff					_ZTWriteNullString:
.4bff	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4c01	8d ce 0a	sta $0ace			sta 	NullString
.4c04	a9 ce		lda #$ce			lda 	#NullString & $FF
.4c06	91 2a		sta ($2a),y			sta 	(temp0),y
.4c08	a9 0a		lda #$0a			lda 	#NullString >> 8
.4c0a	c8		iny				iny
.4c0b	91 2a		sta ($2a),y			sta 	(temp0),y
.4c0d	88		dey				dey
.4c0e	60		rts				rts
.4c0f					_ZTWriteFloat:
.4c0f	8a		txa				txa
.4c10	48		pha				pha
.4c11	a2 20		ldx #$20		ldx	#32
.4c13	20 00 25	jsr $2500		jsr	floatingpointHandler
.4c16	68		pla				pla
.4c17	aa		tax				tax
.4c18	60		rts				rts
.4c19					CloneVariableName:
.4c19	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4c1b	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c1d	85 2e		sta $2e				sta 	temp2
.4c1f	c8		iny				iny
.4c20	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c22	85 2f		sta $2f				sta 	temp2+1
.4c24	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4c26	91 2a		sta ($2a),y			sta 	(temp0),y
.4c28	88		dey				dey
.4c29	a5 35		lda $35				lda 	lowMemory
.4c2b	91 2a		sta ($2a),y			sta 	(temp0),y
.4c2d	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4c2f					_CVNCopy:
.4c2f	b1 2e		lda ($2e),y			lda		(temp2),y
.4c31	91 35		sta ($35),y			sta 	(lowMemory),y
.4c33	c8		iny				iny
.4c34	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4c36	90 f7		bcc $4c2f			bcc 	_CVNCopy
.4c38	98		tya				tya 								; add Y to low memory
.4c39	18		clc				clc
.4c3a	65 35		adc $35				adc 	lowMemory
.4c3c	85 35		sta $35				sta 	lowMemory
.4c3e	90 02		bcc $4c42			bcc 	_CVNNoCarry
.4c40	e6 36		inc $36				inc 	lowMemory+1
.4c42					_CVNNoCarry:
.4c42	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4c43					FindVariable:
.4c43	98		tya				tya
.4c44	48		pha				pha
.4c45	98		tya				tya 								; point temp2 to the actual name
.4c46	18		clc				clc 								; in memory of the variable being created
.4c47	65 28		adc $28				adc 	codePtr
.4c49	85 2e		sta $2e				sta 	temp2
.4c4b	a5 29		lda $29				lda 	codePtr+1
.4c4d	69 00		adc #$00			adc 	#0
.4c4f	85 2f		sta $2f				sta 	temp2+1
.4c51	a0 00		ldy #$00			ldy 	#0
.4c53	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4c55	85 2a		sta $2a				sta 	temp0
.4c57	a5 3c		lda $3c				lda 	hashList+1
.4c59	85 2b		sta $2b				sta 	temp0+1
.4c5b	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4c5d	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c5f	f0 2c		beq $4c8d			beq 	_FVFail
.4c61	aa		tax				tax
.4c62	88		dey				dey		 							; get LSB
.4c63	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c65	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4c67	86 2b		stx $2b				stx 	temp0+1
.4c69	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4c6b	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c6d	cd 5d 0e	cmp $0e5d			cmp 	varHash
.4c70	d0 e9		bne $4c5b			bne 	_FVNext 					; if not, no point in checking the name.
.4c72	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4c73	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c75	85 2d		sta $2d				sta 	temp1+1
.4c77	88		dey				dey
.4c78	b1 2a		lda ($2a),y			lda 	(temp0),y
.4c7a	85 2c		sta $2c				sta 	temp1
.4c7c	a0 00		ldy #$00			ldy 	#0
.4c7e					_FVCheck:
.4c7e	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4c80	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4c82	d0 d7		bne $4c5b			bne 	_FVNext		 				; fail if different.
.4c84	c8		iny				iny
.4c85	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4c87	90 f5		bcc $4c7e			bcc 	_FVCheck
.4c89	68		pla				pla
.4c8a	a8		tay				tay
.4c8b	38		sec				sec
.4c8c	60		rts				rts
.4c8d					_FVFail:
.4c8d	68		pla				pla
.4c8e	a8		tay				tay
.4c8f	18		clc				clc
.4c90	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4c91					HashTableReset:
.4c91	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4c93	a9 00		lda #$00			lda 	#0
.4c95					_HTRClear:
.4c95	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4c98	ca		dex				dex
.4c99	d0 fa		bne $4c95			bne 	_HTRClear
.4c9b	60		rts				rts

;******  Return to file: variable/variable.asm

.4c9c					variableHandler:
.4c9c	7c 9f 4c	jmp ($4c9f,x)			jmp 	(variableVectors,x)
.4c9f					variableVectors:
>4c9f	a7 4c					.word _DummyControlHandler ; index 0
>4ca1	d3 4a					.word AccessVariable       ; index 2
>4ca3	63 49					.word CreateArray          ; index 4
>4ca5	91 4c					.word HashTableReset       ; index 6
.4ca7					_DummyControlHandler:
.4ca7	60		rts			rts

;******  Return to file: basic.asm

.4ca8					section_end_variable:
.4ca8					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e60					endStorage:
>4ca8							.align 	256
.4d00					programMemory:
>4cff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4d00					section_end_footer:

;******  End of listing
