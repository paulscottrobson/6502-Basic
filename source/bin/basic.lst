
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Tue Mar 16 16:49:12 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$40					StackAddress = $40
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0078					endOfStack:
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex
=35					ErrorID_Assembler = 35 ; Bad Operand/Mode
=36					ErrorID_Branch = 36 ; Branch out of range
=37					ErrorID_Label = 37 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	ea 38						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 bf 14	jsr $14bf		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 e4 1a	jsr $1ae4		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 1c 3c	jsr $3c1c		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	8a		txa				txa
.1030	95 48		sta $48,x			sta 	esInt0,x
.1032	95 50		sta $50,x			sta 	esInt1,x
.1034	95 58		sta $58,x			sta 	esInt2,x
.1036	95 60		sta $60,x			sta 	esInt3,x
.1038	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.103a	aa		tax				tax
.103b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.103d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.103f	f0 41		beq $1082			beq 	_AGOExit
.1041	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1043	f0 3d		beq $1082			beq 	_AGOExit
.1045	c8		iny				iny 								; consume the token
.1046	a9 00		lda #$00			lda 	#AMD_IMM
.1048	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.104a	f0 2d		beq $1079			beq		_AGOEvalExit 				; with an operand.
.104c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.104e	f0 40		beq $1090			beq 	_AGOIndirect
.1050	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1052	d0 0b		bne $105f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1054	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1056	c8		iny				iny
.1057	aa		tax				tax
.1058	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.105a	e0 3a		cpx #$3a			cpx 	#$3A
.105c	f0 24		beq $1082			beq 	_AGOExit
.105e	88		dey				dey 								; unpick 2 iny
.105f					_AGOZeroPage1:
.105f	88		dey				dey
.1060	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1062	a2 06		ldx #$06		ldx	#6
.1064	20 6f 31	jsr $316f		jsr	mainHandler
.1067	20 bf 10	jsr $10bf			jsr 	AsmGetIndexing
.106a	a9 01		lda #$01			lda 	#AMD_ZERO
.106c	90 14		bcc $1082			bcc 	_AGOExit
.106e	a9 05		lda #$05			lda 	#AMD_ZEROX
.1070	e0 00		cpx #$00			cpx 	#0
.1072	f0 0e		beq $1082			beq 	_AGOExit
.1074	a9 09		lda #$09			lda 	#AMD_ZEROY
.1076	4c 82 10	jmp $1082			jmp 	_AGOExit
.1079					_AGOEvalExit:
.1079	48		pha				pha
.107a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.107c	a2 06		ldx #$06		ldx	#6
.107e	20 6f 31	jsr $316f		jsr	mainHandler
.1081	68		pla				pla
.1082					_AGOExit:
.1082	48		pha				pha 								; save the mode
.1083	a5 58		lda $58				lda 	esInt2 						; check the operand is zero.
.1085	05 60		ora $60				ora 	esInt3
.1087	d0 02		bne $108b			bne 	_AGOValue
.1089	68		pla				pla
.108a	60		rts				rts
.108b					_AGOValue:
.108b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.108d	20 e0 14	jsr $14e0		jsr	errorHandler
.1090					_AGOIndirect:
.1090	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1092	a2 06		ldx #$06		ldx	#6
.1094	20 6f 31	jsr $316f		jsr	mainHandler
.1097	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1099	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.109b	f0 11		beq $10ae			beq 	_AGOIndIndY
.109d	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; must be ,X)
.10a0	90 39		bcc $10db			bcc 	AGISyntax
.10a2	e0 00		cpx #$00			cpx 	#0
.10a4	d0 35		bne $10db			bne 	AGISyntax
.10a6	a2 00		ldx #$00		ldx	#0
.10a8	20 6f 31	jsr $316f		jsr	mainHandler
.10ab	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10ad	60		rts				rts
.10ae					_AGOIndIndY:
.10ae	c8		iny				iny
.10af	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; get indexing if any
.10b2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10b4	90 cc		bcc $1082			bcc 	_AGOExit 					; none then exit
.10b6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b8	f0 21		beq $10db			beq 	AGISyntax
.10ba	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10bc	4c 82 10	jmp $1082			jmp 	_AGOExit
.10bf					AsmGetIndexing:
.10bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10c1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10c3	18		clc				clc
.10c4	d0 14		bne $10da			bne 	_AGIExit 					; no comma, return with CC
.10c6	c8		iny				iny 								; get what SHOULD be X or Y
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c9	38		sec				sec 								; subtract 6 bit ASCII of X
.10ca	e9 18		sbc #$18			sbc 	#"X" & $3F
.10cc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10ce	b0 0b		bcs $10db			bcs 	AGISyntax
.10d0	aa		tax				tax 								; put in index
.10d1	c8		iny				iny 								; get what follows that, should be the $3A marker
.10d2	b1 28		lda ($28),y			lda 	(codePtr),y
.10d4	c8		iny				iny
.10d5	c9 3a		cmp #$3a			cmp 	#$3A
.10d7	d0 02		bne $10db			bne 	AGISyntax
.10d9	38		sec				sec 								; return CS and index mode in X
.10da					_AGIExit:
.10da	60		rts				rts
.10db					AGISyntax:
.10db	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10dd	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10e0					AsmWriteInstruction:
.10e0	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10e3	98		tya				tya
.10e4	48		pha				pha
.10e5	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e8	29 02		and #$02			and 	#2
.10ea	f0 2d		beq $1119			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10ec	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10ef	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f2	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10f5	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f8	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10fb	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.10fe	e0 00		cpx #$00			cpx 	#0
.1100	f0 0e		beq $1110			beq 	_ASMWEchoExit
.1102	a5 48		lda $48				lda 	esInt0
.1104	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1107	e0 01		cpx #$01			cpx 	#1
.1109	f0 05		beq $1110			beq 	_ASMWEchoExit
.110b	a5 50		lda $50				lda 	esInt1
.110d	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1110					_ASMWEchoExit:
.1110	8a		txa				txa
.1111	48		pha				pha
.1112	a2 04		ldx #$04		ldx	#4
.1114	20 bf 14	jsr $14bf		jsr	deviceHandler
.1117	68		pla				pla
.1118	aa		tax				tax
.1119					_ASMWNoEcho:
.1119	ad f2 0a	lda $0af2			lda 	finalOpcode
.111c	20 34 11	jsr $1134			jsr 	AsmWriteByte
.111f	e0 00		cpx #$00			cpx 	#0
.1121	f0 0e		beq $1131			beq 	_ASMWExit
.1123	a5 48		lda $48				lda 	esInt0
.1125	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1128	e0 01		cpx #$01			cpx 	#1
.112a	f0 05		beq $1131			beq 	_ASMWExit
.112c	a5 50		lda $50				lda 	esInt1
.112e	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1131					_ASMWExit:
.1131	68		pla				pla
.1132	a8		tay				tay
.1133	60		rts				rts
.1134					AsmWriteByte:
.1134	a0 00		ldy #$00			ldy 	#0
.1136	48		pha				pha
.1137	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.113a	85 2a		sta $2a				sta 	temp0
.113c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.113f	85 2b		sta $2b				sta 	temp0+1
.1141	68		pla				pla 								; write out the byte.
.1142	91 2a		sta ($2a),y			sta 	(temp0),y
.1144	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1147	d0 03		bne $114c			bne 	_AWBNoCarry
.1149	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.114c					_AWBNoCarry:
.114c	60		rts				rts
.114d					AWIWriteHexSpace:
.114d	48		pha				pha
.114e	a9 20		lda #$20			lda 	#" "
.1150	20 67 11	jsr $1167			jsr 	AWIPrintChar
.1153	68		pla				pla
.1154					AWIWriteHex:
.1154	48		pha				pha
.1155	4a		lsr a				lsr 	a
.1156	4a		lsr a				lsr 	a
.1157	4a		lsr a				lsr 	a
.1158	4a		lsr a				lsr 	a
.1159	20 5d 11	jsr $115d			jsr 	AWIPrintNibble
.115c	68		pla				pla
.115d					AWIPrintNibble:
.115d	29 0f		and #$0f			and 	#15
.115f	c9 0a		cmp #$0a			cmp 	#10
.1161	90 02		bcc $1165			bcc 	_AWIPNDigit
.1163	69 06		adc #$06			adc 	#6
.1165					_AWIPNDigit:
.1165	69 30		adc #$30			adc 	#48
.1167					AWIPrintChar:
.1167	85 32		sta $32				sta 	tempShort
.1169	8a		txa				txa
.116a	48		pha				pha
.116b	a5 32		lda $32				lda 	tempShort
.116d	a2 16		ldx #$16		ldx	#22
.116f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1172	68		pla				pla
.1173	aa		tax				tax
.1174	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.1175					AssembleOneInstruction:
.1175	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1178	aa		tax				tax
.1179	bd 45 11	lda $1145,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.117c	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.117f	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.1182	8d f4 0a	sta $0af4			sta 	asmMode
.1185	a5 50		lda $50				lda 	esInt1 						; check if this is a three byte operand.
.1187	d0 05		bne $118e			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1189	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.118c	b0 10		bcs $119e			bcs 	_AOISuccess 				; worked ok.
.118e					_AOIThreeBytes:
.118e	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.1191	bd c8 11	lda $11c8,x			lda 	AbsoluteVersionTable,x
.1194	30 09		bmi $119f			bmi 	_AOIError					; not possible, no equivalent.
.1196	8d f4 0a	sta $0af4			sta 	asmMode
.1199	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.119c	90 01		bcc $119f			bcc 	_AOIError 					; didn't work.
.119e					_AOISuccess:
.119e	60		rts				rts
.119f					_AOIError:
.119f	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.11a1	20 e0 14	jsr $14e0		jsr	errorHandler
.11a4					AssembleAttempt:
.11a4	20 ad 11	jsr $11ad			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a7	b0 03		bcs $11ac			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a9	20 57 13	jsr $1357			jsr 	AssembleSpecialCase
.11ac					_AAExit:
.11ac	60		rts				rts
.11ad					_AADispatch:
.11ad	ad f3 0a	lda $0af3			lda 	asmToken
.11b0	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11b2	b0 11		bcs $11c5			bcs 	_AAGroup4
.11b4	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b6	b0 0a		bcs $11c2			bcs 	_AAGroup3
.11b8	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11ba	b0 03		bcs $11bf			bcs 	_AAGroup2
.11bc	4c 9d 12	jmp $129d			jmp 	AssembleGroup1
.11bf					_AAGroup2:
.11bf	4c f8 12	jmp $12f8			jmp 	AssembleGroup2
.11c2					_AAGroup3:
.11c2	4c 19 13	jmp $1319			jmp 	AssembleGroup3
.11c5					_AAGroup4:
.11c5	4c 4d 13	jmp $134d			jmp 	AssembleGroup4
.11c8					AbsoluteVersionTable:
>11c8	ff						.byte	$FF 			; fail AMD_IMM
>11c9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11ca	ff						.byte	$FF 			; fail AMD_ACCIMP
>11cb	ff						.byte	$FF 			; fail AMD_ABS
>11cc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11cd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11ce	ff						.byte	$FF 			; fail AMD_ABSY
>11cf	ff						.byte	$FF 			; fail AMD_ABSX
>11d0	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11d1	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11d2	ff						.byte	$FF 			; fail AMD_ABSIND
>11d3	ff						.byte	$FF 			; fail AMD_ABSINDX
>11d4	ff						.byte	$FF 			; fail AMD_REL
>11d5	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d6					OpcodeTable:
>11d6	01					.byte	$01			; $91 ora
>11d7	21					.byte	$21			; $92 (and)
>11d8	41					.byte	$41			; $93 eor
>11d9	61					.byte	$61			; $94 adc
>11da	81					.byte	$81			; $95 sta
>11db	a1					.byte	$a1			; $96 lda
>11dc	c1					.byte	$c1			; $97 cmp
>11dd	e1					.byte	$e1			; $98 sbc
>11de	02					.byte	$02			; $99 asl
>11df	22					.byte	$22			; $9a rol
>11e0	42					.byte	$42			; $9b lsr
>11e1	62					.byte	$62			; $9c ror
>11e2	82					.byte	$82			; $9d stx
>11e3	a2					.byte	$a2			; $9e ldx
>11e4	c2					.byte	$c2			; $9f dec
>11e5	e2					.byte	$e2			; $a0 inc
>11e6	60					.byte	$60			; $a1 stz
>11e7	20					.byte	$20			; $a2 bit
>11e8	80					.byte	$80			; $a3 sty
>11e9	a0					.byte	$a0			; $a4 ldy
>11ea	c0					.byte	$c0			; $a5 cpy
>11eb	e0					.byte	$e0			; $a6 cpx
>11ec	00					.byte	$00			; $a7 tsb
>11ed	10					.byte	$10			; $a8 trb
>11ee	14					.byte	$14			; $a9 jsr
>11ef	40					.byte	$40			; $aa jmp
>11f0	10					.byte	$10			; $ab bpl
>11f1	30					.byte	$30			; $ac bmi
>11f2	50					.byte	$50			; $ad bvc
>11f3	70					.byte	$70			; $ae bvs
>11f4	90					.byte	$90			; $af bcc
>11f5	b0					.byte	$b0			; $b0 bcs
>11f6	d0					.byte	$d0			; $b1 bne
>11f7	f0					.byte	$f0			; $b2 beq
>11f8	80					.byte	$80			; $b3 bra
>11f9	00					.byte	$00			; $b4 brk
>11fa	08					.byte	$08			; $b5 php
>11fb	18					.byte	$18			; $b6 clc
>11fc	28					.byte	$28			; $b7 plp
>11fd	38					.byte	$38			; $b8 sec
>11fe	40					.byte	$40			; $b9 rti
>11ff	48					.byte	$48			; $ba pha
>1200	58					.byte	$58			; $bb cli
>1201	5a					.byte	$5a			; $bc phy
>1202	60					.byte	$60			; $bd rts
>1203	68					.byte	$68			; $be pla
>1204	78					.byte	$78			; $bf sei
>1205	7a					.byte	$7a			; $c0 ply
>1206	88					.byte	$88			; $c1 dey
>1207	8a					.byte	$8a			; $c2 txa
>1208	98					.byte	$98			; $c3 tya
>1209	9a					.byte	$9a			; $c4 txs
>120a	a8					.byte	$a8			; $c5 tay
>120b	aa					.byte	$aa			; $c6 tax
>120c	b8					.byte	$b8			; $c7 clv
>120d	ba					.byte	$ba			; $c8 tsx
>120e	c8					.byte	$c8			; $c9 iny
>120f	ca					.byte	$ca			; $ca dex
>1210	d8					.byte	$d8			; $cb cld
>1211	da					.byte	$da			; $cc phx
>1212	e8					.byte	$e8			; $cd inx
>1213	ea					.byte	$ea			; $ce nop
>1214	f8					.byte	$f8			; $cf sed
>1215	fa					.byte	$fa			; $d0 plx
.1216					Group2OpcodeAvailability:
>1216	ae					.byte	$ae			; $99 asl $02
>1217	ae					.byte	$ae			; $9a rol $22
>1218	ae					.byte	$ae			; $9b lsr $42
>1219	ae					.byte	$ae			; $9c ror $62
>121a	0a					.byte	$0a			; $9d stx $82
>121b	0b					.byte	$0b			; $9e ldx $a2
>121c	aa					.byte	$aa			; $9f dec $c2
>121d	aa					.byte	$aa			; $a0 inc $e2
>121e	22					.byte	$22			; $a1 stz $60
>121f	aa					.byte	$aa			; $a2 bit $20
>1220	2a					.byte	$2a			; $a3 sty $80
>1221	ab					.byte	$ab			; $a4 ldy $a0
>1222	2b					.byte	$2b			; $a5 cpy $c0
>1223	0b					.byte	$0b			; $a6 cpx $e0
>1224	0a					.byte	$0a			; $a7 tsb $00
>1225	0a					.byte	$0a			; $a8 trb $10
>1226	08					.byte	$08			; $a9 jsr $14
>1227	08					.byte	$08			; $aa jmp $40
.1228					AssemblerSpecialCases:
>1228	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>122b	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>122e	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>1231	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>1234	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1237	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>123a	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>123d	a2 00 89				.byte	$a2,0,$89		; bit #
>1240	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>1243	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1246	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1247					AssembleLabel:
.1247	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1249	c9 3a		cmp #$3a			cmp 	#$3A
.124b	b0 4b		bcs $1298			bcs 	_ALSyntax
.124d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.124f	a2 00		ldx #$00		ldx	#0
.1251	20 2b 3f	jsr $3f2b		jsr	variableHandler
.1254	a5 40		lda $40				lda 	esType 						; check integer reference
.1256	c9 80		cmp #$80			cmp 	#$80
.1258	d0 3e		bne $1298			bne 	_ALSyntax
.125a	a5 48		lda $48				lda 	esInt0 						; copy that reference address to temp0
.125c	85 2a		sta $2a				sta 	temp0
.125e	a5 50		lda $50				lda 	esInt1
.1260	85 2b		sta $2b				sta 	temp0+1
.1262	98		tya				tya
.1263	48		pha				pha
.1264	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1267	4a		lsr a				lsr 	a
.1268	90 11		bcc $127b			bcc 	_ALWrite
.126a	a0 00		ldy #$00			ldy 	#0
.126c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.126f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1271	d0 20		bne $1293			bne 	_ALChanged
.1273	c8		iny				iny
.1274	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1277	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1279	d0 18		bne $1293			bne 	_ALChanged
.127b					_ALWrite:
.127b	a0 00		ldy #$00			ldy 	#0
.127d	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.1280	91 2a		sta ($2a),y			sta 	(temp0),y
.1282	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1285	c8		iny				iny
.1286	91 2a		sta ($2a),y			sta 	(temp0),y
.1288	a9 00		lda #$00			lda 	#0
.128a	c8		iny				iny
.128b	91 2a		sta ($2a),y			sta 	(temp0),y
.128d	c8		iny				iny
.128e	91 2a		sta ($2a),y			sta 	(temp0),y
.1290	68		pla				pla
.1291	a8		tay				tay
.1292	60		rts				rts
.1293					_ALChanged:
.1293	a2 25		ldx #$25			ldx 	#ErrorID_Label
.1295	20 e0 14	jsr $14e0		jsr	errorHandler
.1298					_ALSyntax:
.1298	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.129a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.129d					AssembleGroup1:
.129d	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12a0	c9 95		cmp #$95			cmp 	#TKW_STA
.12a2	d0 07		bne $12ab			bne 	_AG1NotStoreImm
.12a4	ad f4 0a	lda $0af4			lda 	asmMode
.12a7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12a9	f0 2c		beq $12d7			beq 	AG1ModeError
.12ab					_AG1NotStoreImm:
.12ab	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12ae	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12b1	48		pha				pha
.12b2	f0 23		beq $12d7			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12b4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12b6	d0 02		bne $12ba			bne 	_AG1NotImmediate
.12b8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ba					_AG1NotImmediate:
.12ba	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12bc	d0 02		bne $12c0			bne 	_AG1NotZX
.12be	a2 00		ldx #$00			ldx 	#0
.12c0					_AG1NotZX:
.12c0	68		pla				pla 								; restore length
.12c1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12c3	b0 10		bcs $12d5			bcs 	AG1Fail
.12c5					AG1ReturnValue:
.12c5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12c7	18		clc				clc
.12c8	bd ea 12	lda $12ea,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12cb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12ce	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12d0	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.12d3	38		sec				sec
.12d4	60		rts				rts
.12d5					AG1Fail:
.12d5	18		clc				clc
.12d6	60		rts				rts
.12d7					AG1ModeError:
.12d7	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.12d9	20 e0 14	jsr $14e0		jsr	errorHandler
.12dc					AMDOperandSize:
>12dc	01 01 00 02					.byte 	1,1,0,2
>12e0	01 01 02 02					.byte 	1,1,2,2
>12e4	01 01 02 02					.byte 	1,1,2,2
>12e8	01 01						.byte 	1,1
.12ea					AMDOffsetFromBase:
>12ea	00 04 08 0c					.byte 	0,4,8,12
>12ee	10 14 18 1c					.byte	16,20,24,28
>12f2	11 00 00 00					.byte 	17,0,0,0
>12f6	00 00						.byte 	0,0
.12f8					AssembleGroup2:
.12f8	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.12fb	c9 08		cmp #$08			cmp 	#8
.12fd	b0 18		bcs $1317			bcs 	_AG2Fail
.12ff	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1301	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1304	bd 7d 11	lda $117d,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1307					_AG2Shift:
.1307	4a		lsr a				lsr 	a
.1308	c6 2a		dec $2a				dec 	temp0
.130a	10 fb		bpl $1307			bpl 	_AG2Shift
.130c	90 09		bcc $1317			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.130e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1311	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1314	4c c5 12	jmp $12c5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1317					_AG2Fail:
.1317	18		clc				clc
.1318	60		rts				rts
.1319					AssembleGroup3:
.1319	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.131c	4a		lsr a				lsr 	a
.131d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.131f	90 21		bcc $1342			bcc 	_AG3Default
.1321	38		sec				sec	 								; calculate branch offset
.1322	a5 48		lda $48				lda		esInt0
.1324	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1327	aa		tax				tax
.1328	a5 50		lda $50				lda		esInt1
.132a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.132d	85 50		sta $50				sta 	esInt1
.132f	8a		txa				txa 								; add 126, now 128 too many.
.1330	18		clc				clc 								; we can use this to check the range
.1331	69 7e		adc #$7e			adc 	#126
.1333	85 48		sta $48				sta 	esInt0
.1335	90 02		bcc $1339			bcc 	_AG3NoCarry
.1337	e6 50		inc $50				inc 	esInt1
.1339					_AG3NoCarry:
.1339	a5 50		lda $50				lda 	esInt1 						; check in range.
.133b	d0 0b		bne $1348			bne 	_AG3Range
.133d	a5 48		lda $48				lda 	esInt0 						; fix up branch distance
.133f	38		sec				sec
.1340	e9 80		sbc #$80			sbc 	#128
.1342					_AG3Default:
.1342	85 48		sta $48				sta 	esInt0
.1344					_AG3ExitOk:
.1344	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1346	d0 07		bne $134f			bne 	AG4Write
.1348					_AG3Range:
.1348	a2 24		ldx #$24			ldx 	#ErrorID_Branch
.134a	20 e0 14	jsr $14e0		jsr	errorHandler
.134d					AssembleGroup4:
.134d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.134f					AG4Write:
.134f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1352	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1355	38		sec				sec
.1356	60		rts				rts
.1357					AssembleSpecialCase:
.1357	a2 00		ldx #$00			ldx 	#0
.1359					_ASCScan:
.1359	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.135c	cd f3 0a	cmp $0af3			cmp 	asmToken
.135f	d0 08		bne $1369			bne 	_ASCNext
.1361	bd 29 12	lda $1229,x			lda 	AssemblerSpecialCases+1,x
.1364	cd f4 0a	cmp $0af4			cmp 	asmMode
.1367	f0 0a		beq $1373			beq 	_ASCFound
.1369					_ASCNext:
.1369	e8		inx				inx									; next entry
.136a	e8		inx				inx
.136b	e8		inx				inx
.136c	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; until table ends
.136f	d0 e8		bne $1359			bne 	_ASCScan
.1371	18		clc				clc
.1372	60		rts				rts
.1373					_ASCFound:
.1373	bd 2a 12	lda $122a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.1376	48		pha				pha
.1377	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.137a	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.137d	aa		tax				tax
.137e	68		pla				pla 								; opcode back
.137f	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1382	38		sec				sec
.1383	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1384					assemblerHandler:
.1384	7c 87 13	jmp ($1387,x)			jmp 	(assemblerVectors,x)
.1387					assemblerVectors:
>1387	75 11					.word AssembleOneInstruction ; index 0
>1389	47 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.138b					section_end_assembler:
.138b					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.138b					X16Break:
.138b	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.138e	f0 01		beq $1391			beq 	_IsBreak
.1390	60		rts				rts
.1391					_IsBreak:
.1391	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1393	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1396					ExternSave:
.1396	98		tya				tya
.1397	48		pha				pha
.1398	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.139b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.139e	a9 01		lda #$01			lda 	#1
.13a0	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13a2	a0 00		ldy #$00			ldy 	#0
.13a4	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13a7	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.13a9	85 2a		sta $2a				sta 	temp0
.13ab	a5 51		lda $51				lda 	esInt1+1
.13ad	85 2b		sta $2b				sta 	temp0+1
.13af	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.13b1	a4 52		ldy $52				ldy 	esInt1+2
.13b3	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13b5	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b8	b0 03		bcs $13bd			bcs 	_ESSave
.13ba	68		pla				pla
.13bb	a8		tay				tay
.13bc	60		rts				rts
.13bd					_ESSave:
.13bd	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.13bf	20 e0 14	jsr $14e0		jsr	errorHandler
.13c2					ExternLoad:
.13c2	98		tya				tya
.13c3	48		pha				pha
.13c4	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.13c7	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13ca	a9 01		lda #$01			lda 	#1
.13cc	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13ce	a0 00		ldy #$00			ldy 	#0
.13d0	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d3	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.13d5	a4 51		ldy $51				ldy 	esInt1+1
.13d7	a9 00		lda #$00			lda 	#0 							; load command
.13d9	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13dc	b0 03		bcs $13e1			bcs 	_ESLoad
.13de	68		pla				pla
.13df	a8		tay				tay
.13e0	60		rts				rts
.13e1					_ESLoad:
.13e1	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.13e3	20 e0 14	jsr $14e0		jsr	errorHandler
.13e6					ExternGetLength:
.13e6	a5 48		lda $48				lda 	esInt0 						; length into A.
.13e8	85 2a		sta $2a				sta 	temp0
.13ea	a5 50		lda $50				lda 	esInt1
.13ec	85 2b		sta $2b				sta 	temp0+1
.13ee	a0 00		ldy #$00			ldy 	#0
.13f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.13f2	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.13f4	a4 50		ldy $50				ldy 	esInt1
.13f6	e8		inx				inx 								; advance over the length pointer.
.13f7	d0 01		bne $13fa			bne 	_ESNoCarry
.13f9	c8		iny				iny
.13fa					_ESNoCarry:
.13fa	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.13fb					IOInitialise:
.13fb	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.13fd	20 26 14	jsr $1426			jsr 	IOPrintChar
.1400	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1402	20 52 14	jsr $1452			jsr 	IOInk
.1405	a9 00		lda #$00			lda 	#0
.1407	20 66 14	jsr $1466			jsr 	IOPaper
.140a	20 0e 14	jsr $140e			jsr 	IOClearScreen
.140d	60		rts				rts
.140e					IOClearScreen:
.140e	48		pha				pha
.140f	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1411	20 26 14	jsr $1426			jsr 	IOPrintChar
.1414	68		pla				pla
.1415	60		rts				rts
.1416					IONewLine:
.1416	48		pha				pha
.1417	a9 0d		lda #$0d			lda 	#13
.1419	20 26 14	jsr $1426			jsr 	IOPrintChar
.141c	68		pla				pla
.141d	60		rts				rts
.141e					IOTab:
.141e	48		pha				pha
.141f	a9 20		lda #$20			lda 	#32
.1421	20 26 14	jsr $1426			jsr 	IOPrintChar
.1424	68		pla				pla
.1425	60		rts				rts
.1426					IOPrintAscii:
.1426					IOPrintChar:
.1426	aa		tax				tax 								; save in X so we can save Y
.1427	5a		phy				phy
.1428	8a		txa				txa
.1429	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.142b	d0 02		bne $142f			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.142d	a9 14		lda #$14			lda 	#$14
.142f					_IOPCNotBS:
.142f	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1432	7a		ply				ply
.1433	60		rts				rts
.1434					IOInkey:
.1434	98		tya				tya
.1435	48		pha				pha
.1436	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1439	85 32		sta $32				sta 	tempShort
.143b	68		pla				pla
.143c	a8		tay				tay
.143d	a5 32		lda $32				lda 	tempShort					; no key pressed.
.143f	f0 10		beq $1451			beq 	_IOIExit
.1441	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.1443	f0 0c		beq $1451			beq 	_IOIExit
.1445	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1447	f0 06		beq $144f			beq 	_IOIBackspace
.1449	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.144b	90 e7		bcc $1434			bcc 	IOInkey
.144d	b0 02		bcs $1451			bcs 	_IOIExit
.144f					_IOIBackspace:
.144f	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1451					_IOIExit:
.1451	60		rts				rts
.1452					IOInk:
.1452	48		pha				pha
.1453	29 07		and #$07			and 	#7 							; 8 primaries
.1455	aa		tax				tax
.1456	bd 5e 14	lda $145e,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1459	20 26 14	jsr $1426			jsr 	IOPrintChar
.145c	68		pla				pla
.145d	60		rts				rts
.145e					_IOColourTable:
>145e	90						.byte 	$90 					; 0 Black
>145f	96						.byte 	$96 					; 1 Red
>1460	1e						.byte 	$1E 					; 2 Green
>1461	9e						.byte 	$9E 					; 3 Yellow
>1462	9a						.byte 	$9A 					; 4 Blue
>1463	9c						.byte 	$9C 					; 5 Magenta
>1464	9f						.byte 	$9F 					; 6 Cyan
>1465	05						.byte 	$05 					; 7 White
.1466					IOPaper:
.1466	48		pha				pha
.1467	48		pha				pha
.1468	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.146a	20 26 14	jsr $1426			jsr 	IOPrintChar 			; and then swap them again.
.146d	68		pla				pla
.146e	20 52 14	jsr $1452			jsr 	IOInk
.1471	a9 01		lda #$01			lda 	#1
.1473	20 26 14	jsr $1426			jsr 	IOPrintChar
.1476	68		pla				pla
.1477	60		rts				rts
.1478					IOLocate:
.1478	48		pha				pha
.1479	a9 13		lda #$13			lda 	#$13 					; home cursor code
.147b	20 26 14	jsr $1426			jsr 	IOPrintChar
.147e	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1480	20 87 14	jsr $1487			jsr 	_IOLoc2
.1483	68		pla				pla
.1484	a8		tay				tay
.1485	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1487					_IOLoc2:
.1487	c0 00		cpy #$00			cpy 	#0
.1489	f0 06		beq $1491			beq 	_IOLocExit
.148b	20 26 14	jsr $1426			jsr 	IOPrintChar
.148e	88		dey				dey
.148f	d0 f6		bne $1487			bne 	_IOLoc2
.1491					_IOLocExit:
.1491	60		rts				rts
.1492					IOInput:
.1492	a9 00		lda #$00			lda 	#0
.1494	8d f6 0a	sta $0af6			sta 	bufferCount
.1497					_IOILoop:
.1497	20 cf ff	jsr $ffcf			jsr 	$FFCF
.149a	c9 0d		cmp #$0d			cmp 	#13
.149c	f0 10		beq $14ae			beq 	_IOIExit
.149e	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14a1	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14a3	f0 f2		beq $1497			beq 	_IOILoop
.14a5	ee f6 0a	inc $0af6			inc 	bufferCount
.14a8	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14ab	4c 97 14	jmp $1497			jmp 	_IOILoop
.14ae					_IOIExit:
.14ae	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14b0	85 2a		sta $2a				sta 	temp0
.14b2	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14b4	85 2b		sta $2b				sta 	1+(temp0)
.14b6	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14b7					IOReadTimer:
.14b7	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14ba	48		pha				pha
.14bb	8a		txa				txa
.14bc	a8		tay				tay
.14bd	68		pla				pla
.14be	60		rts				rts

;******  Return to file: device/device.asm

.14bf					deviceHandler:
.14bf	7c c2 14	jmp ($14c2,x)			jmp 	(deviceVectors,x)
.14c2					deviceVectors:
>14c2	8b 13					.word X16Break             ; index 0
>14c4	0e 14					.word IOClearScreen        ; index 2
>14c6	16 14					.word IONewLine            ; index 4
>14c8	fb 13					.word IOInitialise         ; index 6
>14ca	52 14					.word IOInk                ; index 8
>14cc	34 14					.word IOInkey              ; index 10
>14ce	92 14					.word IOInput              ; index 12
>14d0	c2 13					.word ExternLoad           ; index 14
>14d2	78 14					.word IOLocate             ; index 16
>14d4	66 14					.word IOPaper              ; index 18
>14d6	26 14					.word IOPrintChar          ; index 20
>14d8	26 14					.word IOPrintAscii         ; index 22
>14da	96 13					.word ExternSave           ; index 24
>14dc	1e 14					.word IOTab                ; index 26
>14de	b7 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.14e0					section_end_device:
.14e0					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.14e0					ErrorHandler:
.14e0	8a		txa				txa
.14e1	48		pha				pha
.14e2	a9 01		lda #$01			lda 	#1 							; red
.14e4	a2 08		ldx #$08		ldx	#8
.14e6	20 bf 14	jsr $14bf		jsr	deviceHandler
.14e9	68		pla				pla
.14ea	aa		tax				tax
.14eb	a9 56		lda #$56			lda 	#(ErrorTextList) & $FF
.14ed	85 2a		sta $2a				sta 	temp0
.14ef	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.14f1	85 2b		sta $2b				sta 	1+(temp0)
.14f3	ca		dex		_EHFind:dex									; errors start at 1
.14f4	f0 10		beq $1506			beq 	_EHFound
.14f6	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.14f8	38		sec				sec
.14f9	a5 2a		lda $2a				lda 	temp0
.14fb	71 2a		adc ($2a),y			adc 	(temp0),y
.14fd	85 2a		sta $2a				sta 	temp0
.14ff	90 f2		bcc $14f3			bcc 	_EHFind
.1501	e6 2b		inc $2b				inc 	temp0+1
.1503	4c f3 14	jmp $14f3			jmp 	_EHFind
.1506					_EHFound:
.1506	20 e0 17	jsr $17e0			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1509	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.150b	b1 28		lda ($28),y			lda 	(codePtr),y
.150d	f0 39		beq $1548			beq 	_EHNoLine
.150f	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1511	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1514	90 32		bcc $1548			bcc 	_EHNoLine
.1516	a9 52		lda #$52			lda 	#(EHAtMsg) & $FF
.1518	85 2a		sta $2a				sta 	temp0
.151a	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.151c	85 2b		sta $2b				sta 	1+(temp0)
.151e	20 e0 17	jsr $17e0			jsr 	EHPrintAscii
.1521	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1523	a2 00		ldx #$00			ldx 	#0
.1525	b1 28		lda ($28),y			lda 	(codePtr),y
.1527	95 48		sta $48,x			sta 	esInt0,x
.1529	c8		iny				iny
.152a	b1 28		lda ($28),y			lda 	(codePtr),y
.152c	95 50		sta $50,x			sta 	esInt1,x
.152e	a9 00		lda #$00			lda 	#0
.1530	95 58		sta $58,x			sta 	esInt2,x
.1532	95 60		sta $60,x			sta 	esInt3,x
.1534	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1536	85 2a		sta $2a				sta 	temp0
.1538	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.153a	85 2b		sta $2b				sta 	1+(temp0)
.153c	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.153e	a9 00		lda #$00			lda 	#0							; stack position zero.
.1540	a2 0c		ldx #$0c		ldx	#12
.1542	20 6f 31	jsr $316f		jsr	mainHandler
.1545	20 e0 17	jsr $17e0			jsr 	EHPrintAscii
.1548					_EHNoLine:
.1548	a2 04		ldx #$04		ldx	#4
.154a	20 bf 14	jsr $14bf		jsr	deviceHandler
.154d	a2 02		ldx #$02		ldx	#2
.154f	20 e4 1a	jsr $1ae4		jsr	interactionHandler
.1552					EHAtMsg:
>1552	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1556					ErrorTextList:
>1556	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>155e	20 6e 6f 74 20 50 72 65 73 65 6e 74
>156a	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1572	45 72 72 6f 72
>1577	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>157f	64 69 73 61 62 6c 65 64
>1587	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>158f	6f 6e 20 66 61 69 6c 65 64
>1598	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15a0	42 79 20 5a 65 72 6f
>15a7	04 53 74 6f 70				.text 4,"Stop"
>15ac	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15b4	73 6d 61 74 63 68
>15ba	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15c2	20 56 61 6c 75 65
>15c8	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15d0	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>15de	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>15e6	20 63 6f 6d 6d 61
>15ec	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>15f4	20 72 65 66 65 72 65 6e 63 65
>15fe	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1606	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1614	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>161c	74 6f 6f 20 6c 6f 6e 67
>1624	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>162c	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1639	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1641	69 74 68 6f 75 74 20 52 45 50 45 41 54
>164e	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1656	74 68 6f 75 74 20 46 4f 52
>165f	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1667	74 68 6f 75 74 20 57 48 49 4c 45
>1672	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>167a	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1687	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>168f	54 20 69 6e 64 65 78
>1696	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>169e	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16ae	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16b6	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16c5	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16cd	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>16dd	63 65
>16df	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>16e7	20 50 72 6f 63 65 64 75 72 65
>16f1	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>16f9	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1709	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1711	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>171f	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1727	75 69 72 65 73 20 61 72 72 61 79
>1732	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>173a	61 79 20 69 6e 64 65 78
>1742	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>174a	64 61 74 61
>174e	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1756	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1763	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>176b	69 6c 65 64
>176f	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1777	69 6c 65 64
>177b	05 42 72 65 61 6b			.text 5,"Break"
>1781	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>1789	6d 65 6d 6f 72 79
>178f	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>1797	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17a6	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17ae	72 61 6e 64 2f 4d 6f 64 65
>17b7	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>17bf	6f 75 74 20 6f 66 20 72 61 6e 67 65
>17cb	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>17d3	68 61 6e 67 65 64 20 76 61 6c 75 65
>17df	00					.byte 0

;******  Return to file: error/errorhandler.asm

.17e0					EHPrintAscii:
.17e0	a0 00		ldy #$00			ldy 	#0
.17e2	b1 2a		lda ($2a),y			lda 	(temp0),y
.17e4	aa		tax				tax
.17e5	f0 0f		beq $17f6			beq 	_EHPExit
.17e7					_EHPLoop:
.17e7	c8		iny				iny
.17e8	8a		txa				txa
.17e9	48		pha				pha
.17ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.17ec	a2 16		ldx #$16		ldx	#22
.17ee	20 bf 14	jsr $14bf		jsr	deviceHandler
.17f1	68		pla				pla
.17f2	aa		tax				tax
.17f3	ca		dex				dex
.17f4	d0 f1		bne $17e7			bne 	_EHPLoop
.17f6					_EHPExit:
.17f6	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.17f7					section_end_error:
.17f7					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.17f7					ExtensionHandler:
.17f7	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.17f9	d0 08		bne $1803			bne 	_ExtensionUnary 			; is passed in A.
.17fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.17fd	c8		iny				iny
.17fe	0a		asl a				asl 	a
.17ff	aa		tax				tax
.1800	7c 01 18	jmp ($1801,x)			jmp 	(Group2Vectors-12,x)
.1803					_ExtensionUnary:
.1803	48		pha				pha 								; save stack pos in A
.1804	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1806	c8		iny				iny
.1807	0a		asl a				asl 	a
.1808	aa		tax				tax
.1809	68		pla				pla 								; restore stack pos and call group3 command.
.180a	7c 07 18	jmp ($1807,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.180d					Group2Vectors:
>180d	42 18					.word	Command_VPoke            ; $86 vpoke
>180f	45 18					.word	Command_VDoke            ; $87 vdoke
>1811	1f 18					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1813					Group3Vectors:
>1813	86 18					.word	Command_VPeek            ; $86 vpeek(
>1815	89 18					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1817					XEvaluateInteger:
.1817	8a		txa				txa
.1818	a2 06		ldx #$06		ldx	#6
.181a	20 6f 31	jsr $316f		jsr	mainHandler
.181d	aa		tax				tax
.181e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.181f					Command_VLoad:
.181f	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.1821	20 69 2a	jsr $2a69			jsr 	EvaluateString
.1824	e8		inx				inx
.1825	20 05 30	jsr $3005			jsr 	MInt32False
.1828	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.182a	95 48		sta $48,x			sta 	esInt0,x
.182c	a5 36		lda $36				lda 	lowMemory+1
.182e	95 50		sta $50,x			sta 	esInt1,x
.1830	ca		dex				dex
.1831	a2 0e		ldx #$0e		ldx	#14
.1833	20 bf 14	jsr $14bf		jsr	deviceHandler
.1836	a5 49		lda $49				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1838	85 2a		sta $2a				sta 	temp0
.183a	a5 51		lda $51				lda 	esInt1+1
.183c	85 2b		sta $2b				sta 	temp0+1
.183e	20 a7 18	jsr $18a7			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1841	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1842					Command_VPoke:
.1842	38		sec				sec 						; one byte , CS
.1843	b0 01		bcs $1846			bcs 	CmdVideoWrite
.1845					Command_VDoke:
.1845	18		clc				clc 						; two bytes, CC
.1846					CmdVideoWrite:
.1846	08		php				php 						; save one or two btes
.1847	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1849	20 17 18	jsr $1817			jsr 	XEvaluateInteger
.184c	20 85 30	jsr $3085			jsr 	CheckComma
.184f	e8		inx				inx
.1850	20 17 18	jsr $1817			jsr 	XEvaluateInteger
.1853	ca		dex				dex
.1854	20 65 18	jsr $1865			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1857	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.1859	8d 23 9f	sta $9f23			sta 	$9F23
.185c	28		plp				plp 						; if it was Poke then exit
.185d	b0 05		bcs $1864			bcs 	_CVWExit
.185f	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.1861	8d 23 9f	sta $9f23			sta 	$9F23
.1864					_CVWExit:
.1864	60		rts				rts
.1865					SetUpTOSVRamAddress:
.1865	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1867	29 01		and #$01			and 	#1
.1869	15 60		ora $60,x			ora 	esInt3,x
.186b	d0 14		bne $1881			bne 	CVWValue
.186d	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.186f	8d 20 9f	sta $9f20			sta 	$9F20
.1872	b5 50		lda $50,x			lda 	esInt1,x
.1874	8d 21 9f	sta $9f21			sta	 	$9F21
.1877	b5 58		lda $58,x			lda 	esInt2,x
.1879	29 01		and #$01			and 	#1
.187b	09 10		ora #$10			ora 	#$10 				; step 1.
.187d	8d 22 9f	sta $9f22			sta 	$9F22
.1880	60		rts				rts
.1881					CVWValue:
.1881	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1883	20 e0 14	jsr $14e0		jsr	errorHandler
.1886					Command_VPeek:
.1886	38		sec				sec 						; one byte , CS
.1887	b0 01		bcs $188a			bcs 	CmdVideoRead
.1889					Command_VDeek:
.1889	18		clc				clc 						; two bytes, CC
.188a					CmdVideoRead:
.188a	08		php				php 						; save action on stack.
.188b	aa		tax				tax 						; save stack position
.188c	20 17 18	jsr $1817			jsr 	XEvaluateInteger 	; address
.188f	20 78 30	jsr $3078			jsr 	CheckRightParen 	; closing right bracket.
.1892	20 65 18	jsr $1865			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1895	20 05 30	jsr $3005			jsr 	MInt32False 		; zero return.
.1898	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.189b	95 48		sta $48,x			sta 	esInt0,x
.189d	28		plp				plp 						; check if DOKE (carry was clear)
.189e	b0 05		bcs $18a5			bcs 	_CVRExit
.18a0	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.18a3	95 50		sta $50,x			sta 	esInt1,x
.18a5					_CVRExit:
.18a5	8a		txa				txa 						; return X position.
.18a6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be6					compressMode:
>0be6							.fill 	1
.18a7					LoadVRAMFile:
.18a7					_LVRLoop:
.18a7	20 f7 18	jsr $18f7			jsr 	LVFGet 						; get the next (never access direct)
.18aa	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.18ac	f0 3a		beq $18e8			beq 	_LVRExit
.18ae	b0 39		bcs $18e9			bcs 	_LVRLoad 					; load data in ?
.18b0	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.18b2	90 09		bcc $18bd			bcc 	_LVRSetAddress
.18b4	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.18b6	90 29		bcc $18e1			bcc 	_LVRSetCompress
.18b8	a2 01		ldx #$01			ldx 	#ErrorID_missing
.18ba	20 e0 14	jsr $14e0		jsr	errorHandler
.18bd					_LVRSetAddress:
.18bd	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.18bf	20 f7 18	jsr $18f7			jsr 	LVFGet
.18c2	85 2c		sta $2c				sta 	temp1
.18c4	a9 00		lda #$00			lda 	#0
.18c6	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.18c8	66 2c		ror $2c				ror 	temp1
.18ca	6a		ror a				ror		a
.18cb	46 2d		lsr $2d				lsr 	temp1+1
.18cd	66 2c		ror $2c				ror 	temp1
.18cf	6a		ror a				ror		a
.18d0	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.18d3	a5 2c		lda $2c				lda 	temp1
.18d5	8d 21 9f	sta $9f21			sta 	$9F21
.18d8	a5 2d		lda $2d				lda 	temp1+1
.18da	09 10		ora #$10			ora 	#$10
.18dc	8d 22 9f	sta $9f22			sta 	$9F22
.18df	d0 c6		bne $18a7			bne 	_LVRLoop
.18e1					_LVRSetCompress:
.18e1	29 07		and #$07			and 	#7
.18e3	8d e6 0b	sta $0be6			sta 	compressMode
.18e6	10 bf		bpl $18a7			bpl 	_LVRLoop
.18e8					_LVRExit:
.18e8	60		rts				rts
.18e9					_LVRLoad:
.18e9	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.18eb	aa		tax				tax
.18ec					_LVRLCopy:
.18ec	20 f7 18	jsr $18f7			jsr 	LVFGet 						; write to data.
.18ef	8d 23 9f	sta $9f23			sta 	$9F23
.18f2	ca		dex				dex
.18f3	d0 f7		bne $18ec			bne 	_LVRLCopy
.18f5	f0 b0		beq $18a7			beq 	_LVRLoop
.18f7	84 32		sty $32		LVFGet:	sty 	tempShort
.18f9	a0 00		ldy #$00			ldy 	#0
.18fb	b1 2a		lda ($2a),y			lda 	(temp0),y
.18fd	a4 32		ldy $32				ldy	 	tempShort
.18ff	e6 2a		inc $2a				inc 	temp0
.1901	d0 02		bne $1905			bne 	_LVFGExit
.1903	e6 2b		inc $2b				inc 	temp0+1
.1905					_LVFGExit:
.1905	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1906					section_end_extension:
.1906					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1906					floatingpointHandler:
.1906	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1908	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: basic.asm

.190b					section_end_floatingpoint:
.190b					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.190b					ColdStartEntry:
.190b	a2 ff		ldx #$ff			ldx 	#$FF
.190d	9a		txs				txs
.190e	a2 02		ldx #$02		ldx	#2
.1910	20 bf 14	jsr $14bf		jsr	deviceHandler
.1913	a0 ff		ldy #$ff			ldy 	#255
.1915					_CSBanner:
.1915	c8		iny				iny
.1916	b9 3c 19	lda $193c,y			lda 	Intro,y
.1919	f0 14		beq $192f			beq 	_CSStart
.191b	c9 08		cmp #$08			cmp 	#8
.191d	90 08		bcc $1927			bcc 	_CSInk
.191f	a2 16		ldx #$16		ldx	#22
.1921	20 bf 14	jsr $14bf		jsr	deviceHandler
.1924	4c 15 19	jmp $1915			jmp 	_CSBanner
.1927					_CSInk:
.1927	a2 08		ldx #$08		ldx	#8
.1929	20 bf 14	jsr $14bf		jsr	deviceHandler
.192c	4c 15 19	jmp $1915			jmp 	_CSBanner
.192f					_CSStart:
.192f	a2 10		ldx #$10		ldx	#16
.1931	20 6f 31	jsr $316f		jsr	mainHandler
.1934	a2 02		ldx #$02		ldx	#2
.1936	20 6f 31	jsr $316f		jsr	mainHandler
.1939	4c 4e 1a	jmp $1a4e			jmp 	WarmStartEntry
>193c	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1944	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1954	20 2a 2a 2a 0d 0d
>195a	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1962	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1972	32 30 32 31 0d 0d
>1978	02 42 61 73 69 63 20				.text 	2,"Basic "
>197f	30 2e 31 36					.text "0.16"
>1983	20 28						.text 	" ("
>1985	31 36 2d 4d 61 72 2d 32				.text "16-Mar-2021"
>198d	30 32 31
>1990	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1994					DeleteLine:
.1994	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1997	85 2a		sta $2a				sta 	temp0
.1999	ad c9 0a	lda $0ac9			lda 	basePage+1
.199c	85 2b		sta $2b				sta 	temp0+1
.199e	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.19a0	a5 48		lda $48				lda 	esInt0 						; e.g. the linenumbers match
.19a2	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.19a4	d0 07		bne $19ad			bne 	_DLNext
.19a6	c8		iny				iny
.19a7	a5 50		lda $50				lda 	esInt1
.19a9	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.19ab	f0 06		beq $19b3			beq 	_DLFound
.19ad	20 d1 19	jsr $19d1	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.19b0	d0 ec		bne $199e			bne 	_DLLoop
.19b2	60		rts				rts
.19b3					_DLFound:
.19b3	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.19b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.19b7	a8		tay				tay 								; so we copy from (temp0),y
.19b8	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.19ba					_DLCopyDown:
.19ba	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.19bc	81 2a		sta ($2a,x)			sta 	(temp0,x)
.19be	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.19c0	d0 02		bne $19c4			bne 	_DLNoCarry
.19c2	e6 2b		inc $2b				inc 	temp0+1
.19c4					_DLNoCarry:
.19c4	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.19c6	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.19c8	d0 f0		bne $19ba			bne 	_DLCopyDown
.19ca	a5 2b		lda $2b				lda 	temp0+1
.19cc	c5 36		cmp $36				cmp 	lowMemory+1
.19ce	d0 ea		bne $19ba			bne 	_DLCopyDown
.19d0	60		rts				rts
.19d1					IAdvanceTemp0:
.19d1	84 32		sty $32				sty 	tempShort
.19d3	18		clc				clc
.19d4	a0 00		ldy #$00			ldy 	#0 							; get offset
.19d6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.19d8	65 2a		adc $2a				adc 	temp0
.19da	85 2a		sta $2a				sta 	temp0
.19dc	90 02		bcc $19e0			bcc 	_IATNoCarry
.19de	e6 2b		inc $2b				inc 	temp0+1
.19e0					_IATNoCarry:
.19e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.19e2	a4 32		ldy $32				ldy 	tempShort
.19e4	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.19e6	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.19e7					InsertLine:
.19e7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.19ea	85 2a		sta $2a				sta 	temp0
.19ec	ad c9 0a	lda $0ac9			lda 	basePage+1
.19ef	85 2b		sta $2b				sta 	temp0+1
.19f1					_ILLoop:
.19f1	a0 01		ldy #$01			ldy 	#1
.19f3	b1 2a		lda ($2a),y			lda 	(temp0),y
.19f5	c5 48		cmp $48				cmp 	esInt0
.19f7	c8		iny				iny
.19f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.19fa	e5 50		sbc $50				sbc 	esInt1
.19fc	b0 05		bcs $1a03			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.19fe	20 d1 19	jsr $19d1			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1a01	d0 ee		bne $19f1			bne 	_ILLoop
.1a03					_ILFound:
.1a03	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1a05	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1a07	a5 36		lda $36				lda 	lowMemory+1
.1a09	85 2d		sta $2d				sta 	temp1+1
.1a0b	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1a0e	18		clc				clc 								; add 3 for the line number and offset.
.1a0f	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1a11	a8		tay				tay
.1a12	a2 00		ldx #$00			ldx 	#0
.1a14	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1a16	91 2c		sta ($2c),y			sta 	(temp1),y
.1a18	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1a1a	c5 2a		cmp $2a				cmp 	temp0
.1a1c	d0 06		bne $1a24			bne 	_ILMNext
.1a1e	a5 2d		lda $2d				lda 	temp1+1
.1a20	c5 2b		cmp $2b				cmp 	temp0+1
.1a22	f0 0b		beq $1a2f			beq 	_ILMCopy
.1a24					_ILMNext:
.1a24	a5 2c		lda $2c				lda 	temp1
.1a26	d0 02		bne $1a2a			bne 	_ILNoBorrow
.1a28	c6 2d		dec $2d				dec 	temp1+1
.1a2a					_ILNoBorrow:
.1a2a	c6 2c		dec $2c				dec 	temp1
.1a2c	4c 14 1a	jmp $1a14			jmp 	_ILMove 					; and go round again
.1a2f					_ILMCopy:
.1a2f	98		tya				tya 								; Y is the offset of the new line.
.1a30	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1a32	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1a34	a5 48		lda $48				lda 	esInt0
.1a36	91 2a		sta ($2a),y			sta 	(temp0),y
.1a38	c8		iny				iny
.1a39	a5 50		lda $50				lda 	esInt1
.1a3b	91 2a		sta ($2a),y			sta 	(temp0),y
.1a3d	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1a3f					_ILMCopy2:
.1a3f	b1 28		lda ($28),y			lda 	(codePtr),y
.1a41	c8		iny				iny
.1a42	c8		iny				iny
.1a43	c8		iny				iny
.1a44	91 2a		sta ($2a),y			sta 	(temp0),y
.1a46	88		dey				dey
.1a47	88		dey				dey
.1a48	cc 24 0d	cpy $0d24			cpy 	tokenBufferIndex
.1a4b	d0 f2		bne $1a3f			bne 	_ILMCopy2
.1a4d	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1a4e					WarmStartEntry:
.1a4e	a2 ff		ldx #$ff			ldx 	#$FF
.1a50	9a		txs				txs
.1a51	a9 02		lda #$02			lda 	#2							; green text.
.1a53	a2 08		ldx #$08		ldx	#8
.1a55	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a58	a2 0c		ldx #$0c		ldx	#12
.1a5a	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a5d	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1a5f	85 28		sta $28				sta 	codePtr
.1a61	a5 2b		lda $2b				lda 	temp0+1
.1a63	85 29		sta $29				sta 	codePtr+1
.1a65	a2 04		ldx #$04		ldx	#4
.1a67	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a6a	a2 06		ldx #$06		ldx	#6
.1a6c	20 1c 3c	jsr $3c1c		jsr	tokeniserHandler
.1a6f	90 25		bcc $1a96			bcc 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1a71	a9 21		lda #$21			lda 	#(tokenHeader) & $FF
.1a73	85 28		sta $28				sta 	codePtr
.1a75	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1a77	85 29		sta $29				sta 	1+(codePtr)
.1a79	ad 24 0c	lda $0c24			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1a7c	c9 80		cmp #$80			cmp 	#$80
.1a7e	f0 ce		beq $1a4e			beq 	WarmStartEntry
.1a80	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1a82	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1a84	f0 15		beq $1a9b			beq 	HasLineNumber
.1a86	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1a88	8d 21 0c	sta $0c21			sta 	tokenHeader 				; fake program line.
.1a8b	8d 22 0c	sta $0c22			sta 	tokenHeader+1
.1a8e	8d 23 0c	sta $0c23			sta 	tokenHeader+2
.1a91	a2 12		ldx #$12		ldx	#18
.1a93	20 6f 31	jsr $316f		jsr	mainHandler
.1a96					WSEError:
.1a96	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1a98	20 e0 14	jsr $14e0		jsr	errorHandler
.1a9b					HasLineNumber:
.1a9b	a0 03		ldy #$03			ldy 	#3 							; get line number
.1a9d	a9 00		lda #$00			lda 	#0
.1a9f	a2 06		ldx #$06		ldx	#6
.1aa1	20 6f 31	jsr $316f		jsr	mainHandler
.1aa4	a5 58		lda $58				lda 	esInt2		 				; check in range (only 2 bytes)
.1aa6	05 60		ora $60				ora 	esInt3
.1aa8	d0 ec		bne $1a96			bne 	WSEError
.1aaa	98		tya				tya 								; make codePtr point to code after the line number.
.1aab	18		clc				clc 								; by skipping over the tokenised number.
.1aac	65 28		adc $28				adc 	codePtr
.1aae	85 28		sta $28				sta 	codePtr
.1ab0	90 02		bcc $1ab4			bcc		_HLNNoCarry
.1ab2	e6 29		inc $29				inc 	codePtr+1
.1ab4					_HLNNoCarry:
.1ab4	98		tya				tya 								; subtract that offset from the code buffer index
.1ab5	38		sec				sec
.1ab6	49 ff		eor #$ff			eor 	#$FF
.1ab8	6d 24 0d	adc $0d24			adc 	tokenBufferIndex
.1abb	18		clc				clc 								; add space allowing for header & $80 trailer
.1abc	69 04		adc #$04			adc 	#4
.1abe	8d 24 0d	sta $0d24			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1ac1	20 94 19	jsr $1994			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1ac4					_HLNNoDelete:
.1ac4	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1ac7	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1ac9	f0 0c		beq $1ad7			beq 	_HLMEditDone
.1acb	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1acd	18		clc				clc 								; workspace (1k)
.1ace	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1ad0	c5 34		cmp $34				cmp 	highMemory+1
.1ad2	b0 0b		bcs $1adf			bcs 	_HLMMemory 					; nope, won't allowit.
.1ad4	20 e7 19	jsr $19e7			jsr 	InsertLine 					; insert the line in
.1ad7					_HLMEditDone:
.1ad7	a2 02		ldx #$02		ldx	#2
.1ad9	20 6f 31	jsr $316f		jsr	mainHandler
.1adc	4c 4e 1a	jmp $1a4e			jmp 	WarmStartEntry
.1adf					_HLMMemory:
.1adf	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.1ae1	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1ae4					interactionHandler:
.1ae4	7c e7 1a	jmp ($1ae7,x)			jmp 	(interactionVectors,x)
.1ae7					interactionVectors:
>1ae7	0b 19					.word ColdStartEntry       ; index 0
>1ae9	4e 1a					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1aeb					section_end_interaction:
.1aeb					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1aeb					Command_Assert:
.1aeb	20 72 2a	jsr $2a72			jsr 	EvaluateRootInteger 		; what is being asserted.
.1aee	20 2c 30	jsr $302c			jsr 	MInt32Zero 					; is it true ?
.1af1	f0 01		beq $1af4			beq 	_CAError
.1af3	60		rts				rts
.1af4					_CAError:
.1af4	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1af6	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1af9					CommandClear:
.1af9					XCommandClear:
.1af9	98		tya				tya
.1afa	48		pha				pha
.1afb	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.1afe	85 33		sta $33				sta 	highMemory
.1b00	ad cd 0a	lda $0acd			lda 	endMemory+1
.1b03	85 34		sta $34				sta 	highMemory+1
.1b05	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1b08	85 2a		sta $2a				sta 	temp0
.1b0a	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b0d	85 2b		sta $2b				sta 	temp0+1
.1b0f					_CCFindEnd:
.1b0f	a0 00		ldy #$00			ldy 	#0
.1b11	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b13	f0 0c		beq $1b21			beq 	_CCFoundEnd 				; offset zero is end.
.1b15	18		clc				clc
.1b16	65 2a		adc $2a				adc 	temp0 						; move to next line
.1b18	85 2a		sta $2a				sta 	temp0
.1b1a	90 f3		bcc $1b0f			bcc 	_CCFindEnd
.1b1c	e6 2b		inc $2b				inc 	temp0+1
.1b1e	4c 0f 1b	jmp $1b0f			jmp 	_CCFindEnd
.1b21					_CCFoundEnd:
.1b21	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.1b23	85 35		sta $35				sta 	lowMemory
.1b25	a5 2b		lda $2b				lda 	temp0+1
.1b27	85 36		sta $36				sta 	lowMemory+1
.1b29	18		clc				clc 								; put temp0+1 in endProgram
.1b2a	a5 2a		lda $2a				lda 	temp0
.1b2c	69 01		adc #$01			adc 	#1
.1b2e	8d ca 0a	sta $0aca			sta 	endProgram
.1b31	a5 2b		lda $2b				lda 	temp0+1
.1b33	69 00		adc #$00			adc 	#0
.1b35	8d cb 0a	sta $0acb			sta 	endProgram+1
.1b38	18		clc				clc 								; put a bit of space in.
.1b39	a5 35		lda $35				lda 	lowMemory
.1b3b	69 04		adc #$04			adc 	#4
.1b3d	85 35		sta $35				sta 	lowMemory
.1b3f	90 02		bcc $1b43			bcc 	_CCNoCarry
.1b41	e6 36		inc $36				inc 	lowMemory+1
.1b43					_CCNoCarry:
.1b43	20 0e 31	jsr $310e			jsr 	RSReset 					; reset the return stack.
.1b46	a2 04		ldx #$04		ldx	#4
.1b48	20 2b 3f	jsr $3f2b		jsr	variableHandler
.1b4b	20 1f 24	jsr $241f			jsr 	ScanProc 					; scan for procedures
.1b4e	20 b9 21	jsr $21b9			jsr 	CommandRestore 				; do a restore
.1b51	68		pla				pla
.1b52	a8		tay				tay
.1b53	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1b54					Command_Dim:
.1b54	a2 02		ldx #$02		ldx	#2
.1b56	20 2b 3f	jsr $3f2b		jsr	variableHandler
.1b59	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1b5b	c8		iny				iny
.1b5c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1b5e	f0 f4		beq $1b54			beq 	Command_Dim
.1b60	88		dey				dey 								; unpick get
.1b61	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.1b62					Command_FOR:
.1b62	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1b64	a2 0b		ldx #$0b			ldx 	#11
.1b66	20 1c 31	jsr $311c			jsr 	RSClaim
.1b69	20 63 1d	jsr $1d63			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1b6c	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1b6e	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1b70	d0 4c		bne $1bbe			bne 	_CFType
.1b72	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1b74	20 6d 30	jsr $306d			jsr 	CheckToken
.1b77	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1b79	20 74 2a	jsr $2a74			jsr 	EvaluateInteger				; get terminal value in stack 1
.1b7c	98		tya				tya
.1b7d	48		pha				pha
.1b7e	a0 04		ldy #$04			ldy 	#4
.1b80	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1b82	91 37		sta ($37),y			sta 	(rsPointer),y
.1b84	c8		iny				iny
.1b85	a5 50		lda $50				lda		esInt1
.1b87	91 37		sta ($37),y			sta 	(rsPointer),y
.1b89	c8		iny				iny
.1b8a	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1b8c	91 37		sta ($37),y			sta 	(rsPointer),y
.1b8e	c8		iny				iny
.1b8f	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1b91	91 37		sta ($37),y			sta 	(rsPointer),y
.1b93	c8		iny				iny
.1b94	a5 51		lda $51				lda		esInt1+1
.1b96	91 37		sta ($37),y			sta 	(rsPointer),y
.1b98	c8		iny				iny
.1b99	a5 59		lda $59				lda		esInt2+1
.1b9b	91 37		sta ($37),y			sta 	(rsPointer),y
.1b9d	c8		iny				iny
.1b9e	a5 61		lda $61				lda		esInt3+1
.1ba0	91 37		sta ($37),y			sta 	(rsPointer),y
.1ba2	68		pla				pla
.1ba3	a8		tay				tay
.1ba4	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1ba6	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1ba8	d0 0e		bne $1bb8			bne 	_CFDone
.1baa	c8		iny				iny									; skip over step.
.1bab	20 74 2a	jsr $2a74			jsr 	EvaluateInteger 			; get step
.1bae	98		tya				tya
.1baf	48		pha				pha
.1bb0	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1bb2	a0 06		ldy #$06			ldy 	#6
.1bb4	91 37		sta ($37),y			sta 	(rsPointer),y
.1bb6	68		pla				pla
.1bb7	a8		tay				tay
.1bb8					_CFDone:
.1bb8	a9 01		lda #$01			lda 	#1
.1bba	20 48 31	jsr $3148			jsr 	RSSavePosition 				; save position.
.1bbd	60		rts				rts
.1bbe					_CFType:
.1bbe	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1bc0	20 e0 14	jsr $14e0		jsr	errorHandler
.1bc3					Command_NEXT:
.1bc3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1bc5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1bc7	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1bc9	f0 05		beq $1bd0			beq 	_isok
.1bcb	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1bcd	20 e0 14	jsr $14e0		jsr	errorHandler
.1bd0					_isok:
.1bd0	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1bd2	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1bd4	b0 18		bcs $1bee			bcs 	_CNNoIndex
.1bd6	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1bd8	20 a7 2a	jsr $2aa7			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1bdb	98		tya				tya
.1bdc	48		pha				pha
.1bdd	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1bdf	b1 37		lda ($37),y			lda 	(rsPointer),y
.1be1	d5 48		cmp $48,x			cmp 	esInt0,x
.1be3	d0 76		bne $1c5b			bne 	_CNBadIndex
.1be5	c8		iny				iny
.1be6	b1 37		lda ($37),y			lda 	(rsPointer),y
.1be8	d5 50		cmp $50,x			cmp 	esInt1,x
.1bea	d0 6f		bne $1c5b			bne 	_CNBadIndex
.1bec	68		pla				pla
.1bed	a8		tay				tay
.1bee					_CNNoIndex:
.1bee	98		tya				tya
.1bef	48		pha				pha
.1bf0	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1bf2	b1 37		lda ($37),y			lda 	(rsPointer),y
.1bf4	85 2a		sta $2a				sta 	temp0
.1bf6	c8		iny				iny
.1bf7	b1 37		lda ($37),y			lda 	(rsPointer),y
.1bf9	85 2b		sta $2b				sta 	temp0+1
.1bfb	c8		iny				iny
.1bfc	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1bfe	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1c00	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1c02	10 01		bpl $1c05			bpl 	_CNSignX
.1c04	ca		dex				dex  								; X = $FF
.1c05					_CNSignX:
.1c05	18		clc				clc 								; add to the LSB
.1c06	a0 00		ldy #$00			ldy 	#0
.1c08	71 2a		adc ($2a),y			adc 	(temp0),y
.1c0a	91 2a		sta ($2a),y			sta 	(temp0),y
.1c0c					_CNPropogate:
.1c0c	c8		iny				iny  								; add the sign extended in X to the rest.
.1c0d	8a		txa				txa
.1c0e	71 2a		adc ($2a),y			adc 	(temp0),y
.1c10	91 2a		sta ($2a),y			sta 	(temp0),y
.1c12	c8		iny				iny
.1c13	8a		txa				txa
.1c14	71 2a		adc ($2a),y			adc 	(temp0),y
.1c16	91 2a		sta ($2a),y			sta 	(temp0),y
.1c18	c8		iny				iny
.1c19	8a		txa				txa
.1c1a	71 2a		adc ($2a),y			adc 	(temp0),y
.1c1c	91 2a		sta ($2a),y			sta 	(temp0),y
.1c1e	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1c1f	a5 37		lda $37				lda 	rsPointer
.1c21	69 07		adc #$07			adc 	#7
.1c23	85 2c		sta $2c				sta 	temp1
.1c25	a9 00		lda #$00			lda 	#0
.1c27	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1c29	a8		tay				tay 								; and clear the Y register again.
.1c2a	65 38		adc $38				adc 	rsPointer+1
.1c2c	85 2d		sta $2d				sta 	temp1+1
.1c2e	38		sec				sec 								; calculate current - limit oring interim values.
.1c2f	20 67 1c	jsr $1c67			jsr 	_CNCompare 					; each of these does a byte.
.1c32	20 67 1c	jsr $1c67			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.1c35	20 67 1c	jsr $1c67			jsr 	_CNCompare 					; and the carry of the subtraction.
.1c38	20 67 1c	jsr $1c67			jsr 	_CNCompare
.1c3b	50 02		bvc $1c3f			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1c3d	49 80		eor #$80			eor 	#$80
.1c3f					_CNNoOverflow:
.1c3f	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.1c41	30 1d		bmi $1c60			bmi 	_CNCheckDownto
.1c43	c9 00		cmp #$00			cmp 	#0
.1c45	30 0c		bmi $1c53			bmi 	_CNLoopRound 				; loop round if < =
.1c47	a5 2e		lda $2e				lda 	temp2
.1c49	f0 08		beq $1c53			beq 	_CNLoopRound
.1c4b					_CNLoopExit:
.1c4b	68		pla				pla
.1c4c	a8		tay				tay
.1c4d	a9 0b		lda #$0b			lda 	#11
.1c4f	20 3e 31	jsr $313e			jsr 	RSFree
.1c52	60		rts				rts
.1c53					_CNLoopRound:
.1c53	68		pla				pla
.1c54	a8		tay				tay
.1c55	a9 01		lda #$01			lda 	#1
.1c57	20 5b 31	jsr $315b			jsr 	RSLoadPosition				; go back to the loop top
.1c5a	60		rts				rts
.1c5b					_CNBadIndex:
.1c5b	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.1c5d	20 e0 14	jsr $14e0		jsr	errorHandler
.1c60					_CNCheckDownto:
.1c60	c9 00		cmp #$00			cmp 	#0
.1c62	10 ef		bpl $1c53			bpl 	_CNLoopRound
.1c64	4c 4b 1c	jmp $1c4b			jmp 	_CNLoopExit
.1c67					_CNCompare:
.1c67	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1c69	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1c6b	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1c6d	85 2e		sta $2e				sta 	temp2
.1c6f	c8		iny				iny
.1c70	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1c71					CommandIf:
.1c71	20 72 2a	jsr $2a72			jsr 	EvaluateRootInteger 		; get what's being tested.
.1c74	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1c76	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1c78	f0 04		beq $1c7e			beq 	_IfSimple
.1c7a	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1c7c	d0 1b		bne $1c99			bne 	_IfComplex
.1c7e					_IfSimple:
.1c7e	20 2c 30	jsr $302c			jsr 	MInt32Zero					; check if TOS zero
.1c81	f0 10		beq $1c93			beq 	_IfEOL 						; go to next line.
.1c83	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1c85	c8		iny				iny
.1c86	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1c88	f0 0c		beq $1c96			beq 	_IfGoto 					; do the Goto code
.1c8a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1c8c	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1c8e	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1c90	f0 04		beq $1c96			beq 	_IfGoto
.1c92	60		rts				rts 								; else continue on this line.
.1c93					_IfEOL:
.1c93	4c 94 24	jmp $2494			jmp 	AdvanceNextLine 			; go to next line
.1c96					_IfGoto:
.1c96	4c 09 25	jmp $2509			jmp 	CommandGoto
.1c99					_IfComplex:
.1c99	20 2c 30	jsr $302c			jsr 	MInt32Zero 					; is it true ?
.1c9c	f0 01		beq $1c9f			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1c9e	60		rts				rts 								; else continue.
.1c9f					_IFSkip:
.1c9f	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1ca1	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1ca3	4c 92 30	jmp $3092			jmp		ScanForward
.1ca6					Command_ELSE:
.1ca6	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1ca8	8a		txa				txa
.1ca9	4c 92 30	jmp $3092			jmp		ScanForward
.1cac					Command_ENDIF:
.1cac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be7					InputBuffer:
>0be7							.fill 	MaxInputSize+1
.1cad					Command_Input:
.1cad	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1caf	c8		iny				iny
.1cb0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1cb2	f0 f9		beq $1cad			beq 	Command_Input
.1cb4	88		dey				dey 							; undo consume
.1cb5	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1cb7	f0 54		beq $1d0d			beq 	_CIExit 				; : or EOL, exit
.1cb9	c9 80		cmp #$80			cmp 	#TOK_EOL
.1cbb	f0 50		beq $1d0d			beq 	_CIExit
.1cbd	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1cbf	90 12		bcc $1cd3			bcc 	_CIVariable
.1cc1	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1cc3	d0 43		bne $1d08			bne 	_CISyntax
.1cc5	a2 00		ldx #$00			ldx 	#0
.1cc7	20 69 2a	jsr $2a69			jsr 	EvaluateString 			; evaluate and print string
.1cca	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0
.1ccd	20 db 20	jsr $20db			jsr 	PrintString
.1cd0	4c ad 1c	jmp $1cad			jmp 	Command_Input
.1cd3					_CIVariable:
.1cd3	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1cd5	20 a7 2a	jsr $2aa7			jsr 	EvaluateReference  		; this is where its going
.1cd8					_CIRetry:
.1cd8	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1cda	a2 14		ldx #$14		ldx	#20
.1cdc	20 bf 14	jsr $14bf		jsr	deviceHandler
.1cdf	98		tya				tya
.1ce0	48		pha				pha
.1ce1	20 21 1d	jsr $1d21			jsr 	InputString 			; input a string (manually)
.1ce4	a2 01		ldx #$01			ldx 	#1
.1ce6	20 0e 1d	jsr $1d0e			jsr 	BufferToStackX 			; make stack,x ref input string.
.1ce9	a5 40		lda $40				lda 	esType 					; if target type numeric
.1ceb	29 40		and #$40			and 	#$40 					; then convert to number
.1ced	d0 11		bne $1d00			bne 	_CIWrite
.1cef	a2 01		ldx #$01			ldx 	#1
.1cf1	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1cf4	a9 0a		lda #$0a			lda 	#10
.1cf6	20 73 2e	jsr $2e73			jsr 	MInt32FromString 		; convert it back from a string.
.1cf9	68		pla				pla
.1cfa	a8		tay				tay
.1cfb	b0 03		bcs $1d00			bcs 	_CIWrite 				; successfully converted.
.1cfd	18		clc				clc 							; default fail FP conversion
.1cfe	90 d8		bcc $1cd8			bcc		_CIRetry				; failed, try again.
.1d00					_CIWrite:
.1d00	a2 00		ldx #$00			ldx 	#0
.1d02	20 76 1d	jsr $1d76			jsr 	WriteValue
.1d05	4c ad 1c	jmp $1cad			jmp 	Command_Input
.1d08					_CISyntax:
.1d08	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d0a	20 e0 14	jsr $14e0		jsr	errorHandler
.1d0d					_CIExit:
.1d0d	60		rts				rts
.1d0e					BufferToStackX:
.1d0e	a9 e7		lda #$e7			lda 	#InputBuffer & $FF
.1d10	95 48		sta $48,x			sta 	esInt0,x
.1d12	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1d14	95 50		sta $50,x			sta 	esInt1,x
.1d16	a9 00		lda #$00			lda 	#0
.1d18	95 58		sta $58,x			sta 	esInt2,x
.1d1a	95 60		sta $60,x			sta 	esInt3,x
.1d1c	a9 40		lda #$40			lda 	#$40
.1d1e	95 40		sta $40,x			sta 	esType,x
.1d20	60		rts				rts
.1d21					InputString:
.1d21	a9 00		lda #$00			lda 	#0
.1d23	8d e7 0b	sta $0be7			sta 	InputBuffer
.1d26					_InputLoop:
.1d26	a2 00		ldx #$00		ldx	#0
.1d28	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d2b	a2 0a		ldx #$0a		ldx	#10
.1d2d	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d30	c9 00		cmp #$00			cmp 	#0
.1d32	f0 f2		beq $1d26			beq 	_InputLoop
.1d34	c9 08		cmp #$08			cmp 	#8
.1d36	f0 19		beq $1d51			beq 	_InputBackspace
.1d38	c9 0d		cmp #$0d			cmp 	#13
.1d3a	f0 21		beq $1d5d			beq 	_InputExit
.1d3c	ae e7 0b	ldx $0be7			ldx 	InputBuffer
.1d3f	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1d41	f0 e3		beq $1d26			beq 	_InputLoop
.1d43	9d e8 0b	sta $0be8,x			sta 	InputBuffer+1,x 		; write char
.1d46	ee e7 0b	inc $0be7			inc 	InputBuffer 			; advance count.
.1d49					_InputPrintLoop:
.1d49	a2 14		ldx #$14		ldx	#20
.1d4b	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d4e	4c 26 1d	jmp $1d26			jmp	 	_InputLoop
.1d51					_InputBackspace:
.1d51	ad e7 0b	lda $0be7			lda 	InputBuffer 			; at start
.1d54	f0 d0		beq $1d26			beq 	_InputLoop
.1d56	ce e7 0b	dec $0be7			dec 	InputBuffer
.1d59	a9 08		lda #$08			lda 	#8
.1d5b	d0 ec		bne $1d49			bne 	_InputPrintLoop
.1d5d					_InputExit:
.1d5d	a2 04		ldx #$04		ldx	#4
.1d5f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d62	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1d63					CommandLet:
.1d63	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1d65	20 a7 2a	jsr $2aa7			jsr 	EvaluateReference
.1d68	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1d6a	20 6d 30	jsr $306d			jsr 	CheckToken
.1d6d	e8		inx				inx 								; do RHS
.1d6e	20 55 2a	jsr $2a55			jsr 	Evaluate 					; evaluate and dereference
.1d71	ca		dex				dex
.1d72	20 76 1d	jsr $1d76			jsr 	WriteValue 					; write it out
.1d75	60		rts				rts
.1d76					WriteValue:
.1d76	98		tya				tya
.1d77	48		pha				pha
.1d78	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1d7b	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1d7d	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1d7f	29 40		and #$40			and 	#$40
.1d81	d0 50		bne $1dd3			bne		_WVType
.1d83	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1d85	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1d87	29 40		and #$40			and 	#$40
.1d89	d0 1f		bne $1daa			bne 	_WVCopyString
.1d8b	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1d8d	15 41		ora $41,x			ora 	esType+1,x
.1d8f	4a		lsr a				lsr 	a
.1d90	90 22		bcc $1db4			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1d92	b5 40		lda $40,x			lda 	esType,x
.1d94	4a		lsr a				lsr 	a
.1d95	90 3c		bcc $1dd3			bcc 	_WVType
.1d97	e8		inx				inx 								; force the value being written to be a float.
.1d98	20 b6 25	jsr $25b6			jsr 	BPMakeFloat
.1d9b	ca		dex				dex
.1d9c	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 					; set Temp0 to write address
.1d9f	e8		inx				inx
.1da0	8a		txa				txa
.1da1	a2 20		ldx #$20		ldx	#32
.1da3	20 06 19	jsr $1906		jsr	floatingpointHandler
.1da6	aa		tax				tax
.1da7	4c d0 1d	jmp $1dd0			jmp 	_WVCopyExit
.1daa					_WVCopyString:
.1daa	8a		txa				txa
.1dab	a2 0e		ldx #$0e		ldx	#14
.1dad	20 25 34	jsr $3425		jsr	stringHandler
.1db0	aa		tax				tax
.1db1	4c d0 1d	jmp $1dd0			jmp 	_WVCopyExit
.1db4					_WVCopyData4:
.1db4	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1db6	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1db8	d0 10		bne $1dca			bne 	_WVCopyData1
.1dba	a0 03		ldy #$03			ldy 	#3
.1dbc	b5 61		lda $61,x			lda 	esInt3+1,x
.1dbe	91 2a		sta ($2a),y			sta 	(temp0),y
.1dc0	88		dey				dey
.1dc1	b5 59		lda $59,x			lda 	esInt2+1,x
.1dc3	91 2a		sta ($2a),y			sta 	(temp0),y
.1dc5	88		dey				dey
.1dc6	b5 51		lda $51,x			lda 	esInt1+1,x
.1dc8	91 2a		sta ($2a),y			sta 	(temp0),y
.1dca					_WVCopyData1:
.1dca	a0 00		ldy #$00			ldy 	#0
.1dcc	b5 49		lda $49,x			lda 	esInt0+1,x
.1dce	91 2a		sta ($2a),y			sta 	(temp0),y
.1dd0					_WVCopyExit:
.1dd0	68		pla				pla
.1dd1	a8		tay				tay
.1dd2	60		rts				rts
.1dd3					_WVType:
.1dd3	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1dd5	20 e0 14	jsr $14e0		jsr	errorHandler
.1dd8					TOSToTemp0:
.1dd8	b5 48		lda $48,x			lda 	esInt0,x
.1dda	85 2a		sta $2a				sta 	temp0
.1ddc	b5 50		lda $50,x			lda 	esInt1,x
.1dde	85 2b		sta $2b				sta 	temp0+1
.1de0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.0c08					structIndent:
>0c08							.fill 	1
.1de1					CommandList:
.1de1	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1de3	8e 08 0c	stx $0c08			stx 	structIndent
.1de6	20 05 30	jsr $3005			jsr 	MInt32False
.1de9	e8		inx				inx
.1dea	20 01 30	jsr $3001			jsr 	MInt32True
.1ded	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1def	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.1df1	f0 15		beq $1e08			beq 	_CLEndLine
.1df3	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1df5	30 1b		bmi $1e12			bmi 	_CLDoListing 				; do the whole lot.
.1df7	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.1df9	20 74 2a	jsr $2a74			jsr 	EvaluateInteger
.1dfc	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.1dfe	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1e00	f0 06		beq $1e08			beq 	_CLEndLine
.1e02	20 43 2f	jsr $2f43			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1e05	4c 12 1e	jmp $1e12			jmp 	_CLDoListing 				; own e.g. list 1100
.1e08					_CLEndLine:
.1e08	c8		iny				iny 								; skip comma
.1e09	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.1e0b	30 05		bmi $1e12			bmi 	_CLDoListing
.1e0d	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.1e0f	20 74 2a	jsr $2a74			jsr 	EvaluateInteger				; get end
.1e12					_CLDoListing:
.1e12	20 b6 22	jsr $22b6			jsr 	ResetCodeAddress 			; back to the start.
.1e15					_CLCheckLoop:
.1e15	a2 00		ldx #$00		ldx	#0
.1e17	20 bf 14	jsr $14bf		jsr	deviceHandler
.1e1a	a0 00		ldy #$00			ldy 	#0							; check end.
.1e1c	b1 28		lda ($28),y			lda 	(codePtr),y
.1e1e	f0 41		beq $1e61			beq 	_CLEnd
.1e20	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1e22	20 64 1e	jsr $1e64			jsr 	CLCompareLineTOS
.1e25	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1e27	f0 28		beq $1e51			beq 	_CLNext
.1e29	e8		inx				inx
.1e2a	20 64 1e	jsr $1e64			jsr 	CLCompareLineTOS 			; compare vs higher
.1e2d	c9 01		cmp #$01			cmp 	#1
.1e2f	f0 20		beq $1e51			beq 	_CLNext
.1e31	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.1e33	20 86 1e	jsr $1e86			jsr 	CLStructureCheck
.1e36	ad 08 0c	lda $0c08			lda 	structIndent 				; indent level.
.1e39	10 02		bpl $1e3d			bpl 	_CLPositive
.1e3b	a9 00		lda #$00			lda 	#0
.1e3d					_CLPositive:
.1e3d	a2 02		ldx #$02		ldx	#2
.1e3f	20 1c 3c	jsr $3c1c		jsr	tokeniserHandler
.1e42	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.1e44	20 86 1e	jsr $1e86			jsr 	CLStructureCheck
.1e47	ad 08 0c	lda $0c08			lda 	structIndent
.1e4a	10 05		bpl $1e51			bpl 	_CLNext
.1e4c	a9 00		lda #$00			lda 	#0
.1e4e	8d 08 0c	sta $0c08			sta 	structIndent
.1e51					_CLNext:
.1e51	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1e53	b1 28		lda ($28),y			lda 	(codePtr),y
.1e55	18		clc				clc
.1e56	65 28		adc $28				adc 	codePtr
.1e58	85 28		sta $28				sta 	codePtr
.1e5a	90 b9		bcc $1e15			bcc 	_CLCheckLoop
.1e5c	e6 29		inc $29				inc 	codePtr+1
.1e5e	4c 15 1e	jmp $1e15			jmp 	_CLCheckLoop
.1e61					_CLEnd:
.1e61	4c 6a 31	jmp $316a			jmp 	WarmStart 					; warm start after list.
.1e64					CLCompareLineTOS:
.1e64	a0 01		ldy #$01			ldy 	#1
.1e66	b1 28		lda ($28),y			lda 	(codePtr),y
.1e68	55 48		eor $48,x			eor 	esInt0,x
.1e6a	85 2a		sta $2a				sta 	temp0
.1e6c	c8		iny				iny
.1e6d	b1 28		lda ($28),y			lda 	(codePtr),y
.1e6f	55 50		eor $50,x			eor 	esInt1,x
.1e71	05 2a		ora $2a				ora 	temp0
.1e73	f0 10		beq $1e85			beq 	_CLCLTExit
.1e75	88		dey				dey
.1e76	b1 28		lda ($28),y			lda 	(codePtr),y
.1e78	d5 48		cmp $48,x			cmp 	esInt0,x
.1e7a	c8		iny				iny
.1e7b	b1 28		lda ($28),y			lda 	(codePtr),y
.1e7d	f5 50		sbc $50,x			sbc 	esInt1,x
.1e7f	a9 ff		lda #$ff			lda 	#255
.1e81	90 02		bcc $1e85			bcc 	_CLCLTExit
.1e83	a9 01		lda #$01			lda 	#1
.1e85					_CLCLTExit:
.1e85	60		rts				rts
.1e86					CLStructureCheck:
.1e86	85 2a		sta $2a				sta 	temp0
.1e88	a0 03		ldy #$03			ldy 	#3
.1e8a					_CLSCLoop:
.1e8a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.1e8c	c8		iny				iny
.1e8d	c9 80		cmp #$80			cmp 	#$80
.1e8f	90 f9		bcc $1e8a			bcc 	_CLSCLoop 					; $00-$7F just step over.
.1e91	f0 28		beq $1ebb			beq		_CLSCExit					; EOL return
.1e93	c9 86		cmp #$86			cmp 	#$86 						; special handler
.1e95	90 1e		bcc $1eb5			bcc 	_CLSCSpecial
.1e97	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.1e99	90 ef		bcc $1e8a			bcc 	_CLSCLoop
.1e9b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.1e9d	b0 eb		bcs $1e8a			bcs 	_CLSCLoop
.1e9f	aa		tax				tax 								; get adjustment
.1ea0	bd 0d 29	lda $290d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.1ea3	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.1ea5	d0 e3		bne $1e8a			bne 	_CLSCLoop
.1ea7	38		sec				sec
.1ea8	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.1eaa	0a		asl a				asl 	a 							; double indent step
.1eab	18		clc				clc
.1eac	6d 08 0c	adc $0c08			adc 	structIndent 				; add to structure indent
.1eaf	8d 08 0c	sta $0c08			sta 	structIndent
.1eb2	4c 8a 1e	jmp $1e8a			jmp 	_CLSCLoop
.1eb5					_CLSCSpecial:
.1eb5	20 d5 30	jsr $30d5			jsr 	ScannerSkipSpecial
.1eb8	4c 8a 1e	jmp $1e8a			jmp 	_CLSCLoop
.1ebb					_CLSCExit:
.1ebb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1ebc					CommandLoad:
.1ebc	20 e4 1e	jsr $1ee4			jsr 	CLSParameters 					; get parameters for load.
.1ebf	08		php				php
.1ec0	a2 0e		ldx #$0e		ldx	#14
.1ec2	20 bf 14	jsr $14bf		jsr	deviceHandler
.1ec5	28		plp				plp
.1ec6	b0 08		bcs $1ed0			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1ec8	20 f9 1a	jsr $1af9			jsr 	CommandClear
.1ecb	a2 02		ldx #$02		ldx	#2
.1ecd	20 e4 1a	jsr $1ae4		jsr	interactionHandler
.1ed0					_CLExit
.1ed0	60		rts				rts
.1ed1					CommandSave:
.1ed1	20 e4 1e	jsr $1ee4			jsr 	CLSParameters					; get parameters for save
.1ed4	90 08		bcc $1ede			bcc 	_CSNoOverrideAddress
.1ed6	20 85 30	jsr $3085			jsr 	CheckComma 						; should be a comma.
.1ed9	a2 02		ldx #$02			ldx 	#2
.1edb	20 74 2a	jsr $2a74			jsr 	EvaluateInteger 				; get save end address.
.1ede					_CSNoOverrideAddress:
.1ede	a2 18		ldx #$18		ldx	#24
.1ee0	20 bf 14	jsr $14bf		jsr	deviceHandler
.1ee3	60		rts				rts
.1ee4					CLSParameters:
.1ee4	a2 00		ldx #$00			ldx 	#0 								; string
.1ee6	20 69 2a	jsr $2a69			jsr 	EvaluateString
.1ee9	e8		inx				inx 									; erase out +1 +2
.1eea	20 05 30	jsr $3005			jsr 	MInt32False
.1eed	e8		inx				inx
.1eee	20 05 30	jsr $3005			jsr 	MInt32False
.1ef1	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1ef4	85 49		sta $49				sta 	esInt0+1
.1ef6	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ef9	85 51		sta $51				sta 	esInt1+1
.1efb	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1efe	85 4a		sta $4a				sta 	esInt0+2
.1f00	ad cb 0a	lda $0acb			lda 	endProgram+1
.1f03	85 52		sta $52				sta 	esInt1+2
.1f05	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1f07	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1f09	d0 08		bne $1f13			bne 	_CLSDefault
.1f0b	c8		iny				iny 									; skip comma
.1f0c	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1f0e	20 74 2a	jsr $2a74			jsr 	EvaluateInteger
.1f11	38		sec				sec
.1f12	60		rts				rts
.1f13					_CLSDefault:
.1f13	18		clc				clc
.1f14	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c09					storeSize:
>0c09							.fill 	1
.1f15					CommandLocal:
.1f15	a2 00		ldx #$00			ldx 	#0
.1f17	20 33 1f	jsr $1f33			jsr 	LocaliseVariable 			; localise one.
.1f1a					_CLCheckNext:
.1f1a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1f1c	c8		iny				iny
.1f1d	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1f1f	f0 06		beq $1f27			beq 	_CLAssignment
.1f21	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1f23	f0 f0		beq $1f15			beq 	CommandLocal
.1f25	88		dey				dey
.1f26	60		rts				rts
.1f27					_CLAssignment:
.1f27	a2 01		ldx #$01			ldx 	#1
.1f29	20 55 2a	jsr $2a55			jsr 	Evaluate 					; evaluate RHS
.1f2c	ca		dex				dex
.1f2d	20 76 1d	jsr $1d76			jsr 	WriteValue
.1f30	4c 1a 1f	jmp $1f1a			jmp 	_CLCheckNext
.1f33					LocaliseVariable:
.1f33	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1f35	c9 40		cmp #$40			cmp 	#$40
.1f37	b0 67		bcs $1fa0			bcs 	_LVSyntax
.1f39	8a		txa				txa 								; get the address of that variable.
.1f3a	a2 00		ldx #$00		ldx	#0
.1f3c	20 2b 3f	jsr $3f2b		jsr	variableHandler
.1f3f	aa		tax				tax
.1f40	8a		txa				txa
.1f41	48		pha				pha
.1f42	98		tya				tya
.1f43	48		pha				pha
.1f44	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1f47	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1f49	0a		asl a				asl 	a
.1f4a	10 16		bpl $1f62			bpl 	_LVPushNumber
.1f4c	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1f4e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f50	c8		iny				iny
.1f51	85 2c		sta $2c				sta 	temp1
.1f53	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f55	85 2d		sta $2d				sta 	temp1+1
.1f57	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1f59	b1 2c		lda ($2c),y			lda 	(temp1),y
.1f5b	aa		tax				tax 								; into X
.1f5c	e8		inx				inx 								; +1 for length.
.1f5d	a9 24		lda #$24			lda 	#markerString
.1f5f	4c 77 1f	jmp $1f77			jmp 	_LVWriteFrame
.1f62					_LVPushNumber:
.1f62	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1f64	85 2c		sta $2c				sta 	temp1
.1f66	a5 2b		lda $2b				lda 	temp0+1
.1f68	85 2d		sta $2d				sta 	temp1+1
.1f6a	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1f6c	4a		lsr a				lsr 	a
.1f6d	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1f6f	a2 04		ldx #$04			ldx 	#VarISize
.1f71	90 04		bcc $1f77			bcc 	_LVIsInteger
.1f73	a9 23		lda #$23			lda 	#markerFloat
.1f75	a2 06		ldx #$06			ldx 	#VarFSize
.1f77					_LVIsInteger:
.1f77					_LVWriteFrame:
.1f77	8e 09 0c	stx $0c09			stx 	storeSize 					; number of bytes to copy from (temp0)
.1f7a	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1f7b	e8		inx				inx
.1f7c	e8		inx				inx
.1f7d	20 1c 31	jsr $311c			jsr 	RSClaim 					; create the stack frame.
.1f80	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1f82	a0 01		ldy #$01			ldy 	#1
.1f84	91 37		sta ($37),y			sta 	(rsPointer),y
.1f86	c8		iny				iny
.1f87	a5 2b		lda $2b				lda 	temp0+1
.1f89	91 37		sta ($37),y			sta 	(rsPointer),y
.1f8b	a0 00		ldy #$00			ldy 	#0
.1f8d					_LVCopyData:
.1f8d	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1f8f	c8		iny				iny 								; write allowing for the header bit.
.1f90	c8		iny				iny
.1f91	c8		iny				iny
.1f92	91 37		sta ($37),y			sta 	(rsPointer),y
.1f94	88		dey				dey
.1f95	88		dey				dey
.1f96	ce 09 0c	dec $0c09			dec 	storeSize 					; do it storesize times
.1f99	d0 f2		bne $1f8d			bne 	_LVCopyData
.1f9b	68		pla				pla
.1f9c	a8		tay				tay
.1f9d	68		pla				pla
.1f9e	aa		tax				tax
.1f9f	60		rts				rts
.1fa0					_LVSyntax:
.1fa0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1fa2	20 e0 14	jsr $14e0		jsr	errorHandler
.1fa5					RestoreLocals:
.1fa5	a2 00		ldx #$00			ldx 	#0
.1fa7	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1fa9	c9 40		cmp #$40			cmp	 	#64
.1fab	90 01		bcc $1fae			bcc 	_RLocal
.1fad	60		rts				rts
.1fae					_RLocal:
.1fae	8a		txa				txa
.1faf	48		pha				pha
.1fb0	98		tya				tya
.1fb1	48		pha				pha
.1fb2	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1fb4	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fb6	85 2a		sta $2a				sta 	temp0
.1fb8	c8		iny				iny
.1fb9	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fbb	85 2b		sta $2b				sta 	temp0+1
.1fbd	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1fbf	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fc1	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1fc3	f0 28		beq $1fed			beq 	_RString
.1fc5	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1fc7	c9 25		cmp #$25			cmp 	#markerInt
.1fc9	f0 02		beq $1fcd			beq 	_RIsInteger
.1fcb	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1fcd					_RIsInteger:
.1fcd	8a		txa				txa
.1fce	48		pha				pha
.1fcf	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1fd1					_RCopyBack:
.1fd1	b1 37		lda ($37),y			lda 	(rsPointer),y
.1fd3	88		dey				dey
.1fd4	88		dey				dey
.1fd5	88		dey				dey
.1fd6	91 2a		sta ($2a),y			sta 	(temp0),y
.1fd8	c8		iny				iny
.1fd9	c8		iny				iny
.1fda	c8		iny				iny
.1fdb	c8		iny				iny
.1fdc	ca		dex				dex
.1fdd	d0 f2		bne $1fd1			bne 	_RCopyBack
.1fdf	68		pla				pla 								; get size add 3
.1fe0	18		clc				clc
.1fe1	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1fe3					_RRestoreAAndLoop:
.1fe3	20 3e 31	jsr $313e			jsr 	RSFree
.1fe6	68		pla				pla
.1fe7	a8		tay				tay
.1fe8	68		pla				pla
.1fe9	aa		tax				tax
.1fea	4c a5 1f	jmp $1fa5			jmp 	RestoreLocals 				; go see if there are any more locals.
.1fed					_RString:
.1fed	a2 00		ldx #$00			ldx 	#0
.1fef	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1ff1	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ff3	95 48		sta $48,x			sta 	esInt0,x
.1ff5	c8		iny				iny
.1ff6	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ff8	95 50		sta $50,x			sta 	esInt1,x
.1ffa	18		clc				clc
.1ffb	a5 37		lda $37				lda 	rsPointer
.1ffd	69 03		adc #$03			adc 	#3
.1fff	95 49		sta $49,x			sta 	esInt0+1,x
.2001	a5 38		lda $38				lda 	rsPointer+1
.2003	69 00		adc #$00			adc 	#0
.2005	95 51		sta $51,x			sta 	esInt1+1,x
.2007	8a		txa				txa
.2008	a2 0e		ldx #$0e		ldx	#14
.200a	20 25 34	jsr $3425		jsr	stringHandler
.200d	a0 03		ldy #$03			ldy 	#3 							; get string length
.200f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2011	18		clc				clc
.2012	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2014	4c e3 1f	jmp $1fe3			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.2017					Command_New:
.2017					Command_XNew:
.2017	20 b6 22	jsr $22b6			jsr 	ResetCodeAddress 			; point to first line
.201a	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.201c	98		tya				tya
.201d	91 28		sta ($28),y			sta 	(codePtr),y
.201f	20 f9 1a	jsr $1af9			jsr 	CommandClear 				; clear everything down.
.2022	4c 8e 24	jmp $248e			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.2025					Command_Poke:
.2025	a9 01		lda #$01			lda 	#1
.2027	d0 06		bne $202f			bne 	PokeGeneral
.2029					Command_Doke:
.2029	a9 02		lda #$02			lda 	#2
.202b	d0 02		bne $202f			bne 	PokeGeneral
.202d					Command_Loke:
.202d	a9 03		lda #$03			lda 	#3
.202f					PokeGeneral:
.202f	48		pha				pha 								; save id (PDL = 123)
.2030	20 72 2a	jsr $2a72			jsr 	EvaluateRootInteger 		; target address
.2033	20 85 30	jsr $3085			jsr	 	CheckComma
.2036	e8		inx				inx
.2037	20 74 2a	jsr $2a74			jsr 	EvaluateInteger 			; what value to POKE ?
.203a	ca		dex				dex
.203b	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 					; temp0 points to the target address
.203e	84 32		sty $32				sty 	tempShort 					; save Y
.2040	68		pla				pla 								; get copy type (1-3) and dispatch
.2041	aa		tax				tax
.2042	ca		dex				dex
.2043	f0 14		beq $2059			beq 	_Poke1
.2045	ca		dex				dex
.2046	f0 0b		beq $2053			beq 	_Poke2
.2048	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.204a	a5 61		lda $61				lda 	esInt3+1
.204c	91 2a		sta ($2a),y			sta 	(temp0),y
.204e	88		dey				dey
.204f	a5 59		lda $59				lda 	esInt2+1
.2051	91 2a		sta ($2a),y			sta 	(temp0),y
.2053					_Poke2:
.2053	a0 01		ldy #$01			ldy 	#1
.2055	a5 51		lda $51				lda 	esInt1+1
.2057	91 2a		sta ($2a),y			sta 	(temp0),y
.2059					_Poke1:
.2059	a0 00		ldy #$00			ldy 	#0
.205b	a5 49		lda $49				lda 	esInt0+1
.205d	91 2a		sta ($2a),y			sta 	(temp0),y
.205f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2061	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c0a					lastPrintToken:
>0c0a							.fill 	1
.2062					Command_Print:
.2062	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2064	8d 0a 0c	sta $0c0a			sta 	lastPrintToken
.2067	88		dey				dey
.2068					_PrintLoopSkip:
.2068	c8		iny				iny
.2069					_PrintLoop:
.2069	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.206b	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.206d	f0 5b		beq $20ca			beq 	_PrintExit
.206f	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2071	f0 57		beq $20ca			beq 	_PrintExit
.2073	8d 0a 0c	sta $0c0a			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2076	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2078	f0 ee		beq $2068			beq 	_PrintLoopSkip
.207a	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.207c	f0 3c		beq $20ba			beq	 	_PrintNewLine
.207e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2080	f0 40		beq $20c2			beq 	_PrintTab
.2082	20 53 2a	jsr $2a53			jsr 	EvaluateRoot 				; evaluate something at the root
.2085	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2087	85 2a		sta $2a				sta 	temp0
.2089	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.208b	85 2b		sta $2b				sta 	1+(temp0)
.208d	a5 40		lda $40				lda 	esType 						; get type
.208f	f0 15		beq $20a6			beq		_PrintInteger
.2091	4a		lsr a				lsr 	a 							; check for floating point
.2092	b0 08		bcs $209c			bcs 	_PrintFloat
.2094					_PrintString:
.2094	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2096	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0
.2099	4c b4 20	jmp $20b4			jmp 	_PrintTemp0 				; print no leading space.
.209c					_PrintFloat:
.209c	a9 00		lda #$00			lda 	#0 							; stack level.
.209e	a2 14		ldx #$14		ldx	#20
.20a0	20 06 19	jsr $1906		jsr	floatingpointHandler
.20a3	4c ad 20	jmp $20ad			jmp 	_PrintSpaceTemp0
.20a6					_PrintInteger:
.20a6	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.20a8	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.20aa	20 5b 2f	jsr $2f5b			jsr 	MInt32ToString				; convert to text
.20ad					_PrintSpaceTemp0:
.20ad	a9 20		lda #$20			lda 	#32
.20af	a2 14		ldx #$14		ldx	#20
.20b1	20 bf 14	jsr $14bf		jsr	deviceHandler
.20b4					_PrintTemp0:
.20b4	20 db 20	jsr $20db			jsr 	PrintString
.20b7	4c 69 20	jmp $2069			jmp 	_PrintLoop
.20ba					_PrintNewLine:
.20ba	a2 04		ldx #$04		ldx	#4
.20bc	20 bf 14	jsr $14bf		jsr	deviceHandler
.20bf	4c 68 20	jmp $2068			jmp 	_PrintLoopSkip
.20c2					_PrintTab:
.20c2	a2 1a		ldx #$1a		ldx	#26
.20c4	20 bf 14	jsr $14bf		jsr	deviceHandler
.20c7	4c 68 20	jmp $2068			jmp 	_PrintLoopSkip
.20ca					_PrintExit:
.20ca	ad 0a 0c	lda $0c0a			lda		lastPrintToken 				; check last token
.20cd	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.20cf	f0 09		beq $20da			beq 	_PrintExit2
.20d1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.20d3	f0 05		beq $20da			beq 	_PrintExit2
.20d5	a2 04		ldx #$04		ldx	#4
.20d7	20 bf 14	jsr $14bf		jsr	deviceHandler
.20da					_PrintExit2:
.20da	60		rts				rts
.20db					PrintString:
.20db	8a		txa				txa
.20dc	48		pha				pha
.20dd	98		tya				tya
.20de	48		pha				pha
.20df	a0 00		ldy #$00			ldy 	#0							; get length
.20e1	b1 2a		lda ($2a),y			lda 	(temp0),y
.20e3	aa		tax				tax 								; into X
.20e4	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.20e6	f0 10		beq $20f8			beq 	_PSExit
.20e8	ca		dex				dex
.20e9	8a		txa				txa
.20ea	48		pha				pha
.20eb	c8		iny				iny
.20ec	b1 2a		lda ($2a),y			lda 	(temp0),y
.20ee	a2 14		ldx #$14		ldx	#20
.20f0	20 bf 14	jsr $14bf		jsr	deviceHandler
.20f3	68		pla				pla
.20f4	aa		tax				tax
.20f5	4c e4 20	jmp $20e4			jmp 	_PSLoop
.20f8					_PSExit:
.20f8	68		pla				pla
.20f9	a8		tay				tay
.20fa	68		pla				pla
.20fb	aa		tax				tax
.20fc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c0b					paramCount:
>0c0b							.fill 	1
.20fd					CallProc:
.20fd	20 b3 23	jsr $23b3			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2100	48		pha				pha 								; save length on stack
.2101	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2103	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2105	48		pha				pha
.2106	a5 2a		lda $2a				lda 	temp0
.2108	48		pha				pha
.2109	98		tya				tya 								; calculate Y + length
.210a	18		clc				clc
.210b	65 32		adc $32				adc 	tempShort
.210d	a8		tay				tay
.210e	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2110					_CallProcEvalParams:
.2110	e8		inx				inx
.2111	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2113	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2115	f0 0b		beq $2122			beq 	_CPDoneParams
.2117	20 55 2a	jsr $2a55			jsr 	Evaluate 					; evaluate a parameter
.211a	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.211c	c8		iny				iny
.211d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.211f	f0 ef		beq $2110			beq 	_CallProcEvalParams
.2121	88		dey				dey 								; undo consumption.
.2122					_CPDoneParams:
.2122	20 78 30	jsr $3078			jsr 	CheckRightParen 			; check closing parenthesis.
.2125	8e 0b 0c	stx $0c0b			stx 	paramCount 					; store parameter count+1
.2128	a2 04		ldx #$04			ldx 	#4							; make space on stack
.212a	a9 50		lda #$50			lda 	#markerPROC
.212c	20 1c 31	jsr $311c			jsr 	RSClaim
.212f	a9 01		lda #$01			lda 	#1 							; store return address.
.2131	20 48 31	jsr $3148			jsr 	RSSavePosition
.2134	68		pla				pla 								; get the new code Ptr
.2135	85 28		sta $28				sta 	codePtr
.2137	68		pla				pla
.2138	85 29		sta $29				sta 	codePtr+1
.213a	68		pla				pla 								; length of name + 4 is the param start.
.213b	18		clc				clc
.213c	69 04		adc #$04			adc 	#4
.213e	a8		tay				tay
.213f	a2 ff		ldx #$ff			ldx 	#$FF
.2141					_CPLoadParameters:
.2141	e8		inx				inx 								; point to where the address should be loaded.
.2142	ec 0b 0c	cpx $0c0b			cpx 	paramCount 					; too many parameters in definition ?
.2145	f0 1e		beq $2165			beq 	_CPParamError
.2147	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2149	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.214b	f0 0e		beq $215b			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.214d	20 33 1f	jsr $1f33			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2150	20 76 1d	jsr $1d76			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2153	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2155	c8		iny				iny
.2156	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2158	f0 e7		beq $2141			beq 	_CPLoadParameters
.215a	88		dey				dey 								; no, unconsume and check for )
.215b					_CPParamComplete:
.215b	20 78 30	jsr $3078			jsr 	CheckRightParen 			; check )
.215e	e8		inx				inx 								; check right number of parameters have been consumed
.215f	ec 0b 0c	cpx $0c0b			cpx 	paramCount
.2162	d0 01		bne $2165			bne 	_CPParamError
.2164	60		rts				rts
.2165					_CPParamError:
.2165	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2167	20 e0 14	jsr $14e0		jsr	errorHandler
.216a					ReturnProc:
.216a	20 a5 1f	jsr $1fa5			jsr 	RestoreLocals 				; get the locals back.
.216d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.216f	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2171	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2173	f0 05		beq $217a			beq 	_isok
.2175	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2177	20 e0 14	jsr $14e0		jsr	errorHandler
.217a					_isok:
.217a	a9 01		lda #$01			lda 	#1
.217c	20 5b 31	jsr $315b			jsr 	RSLoadPosition 				; reload the position from offset 1.
.217f	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2181	20 3e 31	jsr $313e			jsr 	RSFree
.2184	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c0c					dataPtr:
>0c0c							.fill 	2
.0c0e					dataIndex:
>0c0e							.fill 	1
.2185					CommandRead:
.2185	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2187	20 a7 2a	jsr $2aa7			jsr 	EvaluateReference
.218a	20 cb 21	jsr $21cb			jsr 	SwapDPCP 					; use the data pointer.
.218d	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.218f	c8		iny				iny
.2190	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2192	f0 07		beq $219b			beq 	_CRInData
.2194	88		dey				dey
.2195	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2197	aa		tax				tax
.2198	20 92 30	jsr $3092			jsr 	ScanForward
.219b					_CRInData:
.219b	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.219d	20 55 2a	jsr $2a55			jsr 	Evaluate
.21a0	ca		dex				dex 								; and write the value.
.21a1	20 76 1d	jsr $1d76			jsr 	WriteValue
.21a4	20 cb 21	jsr $21cb			jsr 	SwapDPCP 					; get the code pointer back.
.21a7	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.21a9	c8		iny				iny
.21aa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.21ac	f0 d7		beq $2185			beq 	CommandRead
.21ae	88		dey				dey
.21af	60		rts				rts
.21b0					CommandData:
.21b0	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.21b2	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.21b4	20 92 30	jsr $3092			jsr 	ScanForward
.21b7	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.21b8	60		rts				rts
.21b9					CommandRestore:
.21b9	ad c8 0a	lda $0ac8			lda 	basePage
.21bc	8d 0c 0c	sta $0c0c			sta 	dataPtr
.21bf	ad c9 0a	lda $0ac9			lda 	basePage+1
.21c2	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.21c5	a9 03		lda #$03			lda 	#3
.21c7	8d 0e 0c	sta $0c0e			sta 	dataIndex
.21ca	60		rts				rts
.21cb					SwapDPCP:
.21cb	8a		txa				txa
.21cc	48		pha				pha
.21cd	98		tya				tya 								; swap Y, DataIndex
.21ce	ac 0e 0c	ldy $0c0e			ldy 	DataIndex
.21d1	8d 0e 0c	sta $0c0e			sta 	DataIndex
.21d4	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.21d6	ae 0c 0c	ldx $0c0c			ldx 	dataptr
.21d9	8d 0c 0c	sta $0c0c			sta 	dataPtr
.21dc	86 28		stx $28				stx 	codePtr
.21de	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.21e0	ae 0d 0c	ldx $0c0d			ldx 	dataptr+1
.21e3	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.21e6	86 29		stx $29				stx 	codePtr+1
.21e8	68		pla				pla
.21e9	aa		tax				tax
.21ea	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.21eb					Command_Rem:
.21eb					Command_Rem2:
.21eb	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.21ed	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.21ef	d0 06		bne $21f7			bne 	_CRNotString
.21f1	c8		iny				iny
.21f2	98		tya				tya
.21f3	38		sec				sec
.21f4	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.21f6	a8		tay				tay
.21f7					_CRNotString:
.21f7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.21f8					Command_Repeat:
.21f8	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.21fa	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.21fc	20 1c 31	jsr $311c			jsr 	RSClaim
.21ff	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2201	20 48 31	jsr $3148			jsr 	RSSavePosition
.2204	60		rts				rts
.2205					Command_Until:
.2205	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2207	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2209	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.220b	f0 05		beq $2212			beq 	_isok
.220d	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.220f	20 e0 14	jsr $14e0		jsr	errorHandler
.2212					_isok:
.2212	20 72 2a	jsr $2a72			jsr 	EvaluateRootInteger 		; at the bottom.
.2215	20 2c 30	jsr $302c			jsr 	MInt32Zero					; check if TOS zero
.2218	d0 06		bne $2220			bne 	_CUExit
.221a	a9 01		lda #$01			lda 	#1
.221c	20 5b 31	jsr $315b			jsr 	RSLoadPosition 				; reload the position from offset 1.
.221f	60		rts				rts
.2220					_CUExit:
.2220	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2222	20 3e 31	jsr $313e			jsr 	RSFree
.2225	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c0f					breakCounter:
>0c0f								.fill 	1
.0c10					breakIncrement:
>0c10								.fill 	1
.2226					Command_Run:
.2226					XCommand_Run:
.2226	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2228	9a		txs				txs
.2229	20 b0 22	jsr $22b0			jsr 	BreakOn 					; turn break on
.222c	20 f9 1a	jsr $1af9			jsr 	CommandClear 				; clear everything.
.222f	20 b6 22	jsr $22b6			jsr 	ResetCodeAddress 			; back to the start.
.2232					Command_RunFrom:
.2232	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2234					CRNextInstruction:
.2234	64 3a		stz $3a				stz 	softMemAlloc+1
.2236	ad 0f 0c	lda $0c0f			lda 	breakCounter 				; check for break.
.2239	6d 10 0c	adc $0c10			adc 	breakIncrement
.223c	8d 0f 0c	sta $0c0f			sta 	breakCounter
.223f	90 05		bcc $2246			bcc 	_CRNoChecks
.2241	a2 00		ldx #$00		ldx	#0
.2243	20 bf 14	jsr $14bf		jsr	deviceHandler
.2246					_CRNoChecks
.2246	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2248	10 1c		bpl $2266			bpl 	_CRNotToken
.224a	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.224c	b0 0c		bcs $225a			bcs 	_CRExecute
.224e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2250	b0 71		bcs $22c3			bcs 	Unimplemented
.2252	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2254	b0 04		bcs $225a			bcs 	_CRExecute
.2256	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2258	b0 16		bcs $2270			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.225a					_CRExecute:
.225a	c8		iny				iny 								; consume it.
.225b	0a		asl a				asl 	a 							; double it, losing most significant bit.
.225c	aa		tax				tax
.225d	20 63 22	jsr $2263			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2260	4c 34 22	jmp $2234			jmp 	CRNextInstruction
.2263					_CRRunRoutine:
.2263	7c cd 22	jmp ($22cd,x)			jmp 	(Group0Vectors,x)
.2266					_CRNotToken:
.2266	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2268	b0 59		bcs $22c3			bcs 	Unimplemented
.226a					_CRDefaultLet:
.226a	20 63 1d	jsr $1d63			jsr 	CommandLet 					; do the default, LET
.226d	4c 34 22	jmp $2234			jmp 	CRNextInstruction
.2270					_CRCheckIndirect:
.2270	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2272	f0 0a		beq $227e			beq 	_CRAndCommand
.2274	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2276	f0 f2		beq $226a			beq 	_CRDefaultLet
.2278	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.227a	f0 ee		beq $226a			beq 	_CRDefaultLet
.227c	d0 45		bne $22c3			bne 	Unimplemented
.227e					_CRAndCommand:
.227e	c8		iny				iny 								; skip over the AND token
.227f	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2281	20 9b 22	jsr $229b			jsr 	CommandAssembler 			; do the assembler command
.2284	4c 34 22	jmp $2234			jmp 	CRNextInstruction 			; and loop round.
.2287					CommandShift1:
.2287	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2289	10 38		bpl $22c3			bpl 	Unimplemented 				; we have an error as this should not happen.
.228b	c8		iny				iny 								; advance over it.
.228c	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.228e	b0 0b		bcs $229b			bcs 	CommandAssembler
.2290	0a		asl a				asl 	a 							; double into X
.2291	aa		tax				tax
.2292	7c 91 23	jmp ($2391,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2295					CommandShift2:
.2295	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2297	20 f7 17	jsr $17f7		jsr	extensionHandler
.229a	60		rts				rts
.229b					CommandAssembler:
.229b	a2 00		ldx #$00		ldx	#0
.229d	20 84 13	jsr $1384		jsr	assemblerHandler
.22a0	60		rts				rts
.22a1					CommandAssemblerLabel:
.22a1	a2 02		ldx #$02		ldx	#2
.22a3	20 84 13	jsr $1384		jsr	assemblerHandler
.22a6	60		rts				rts
.22a7					CommandColon:
.22a7	60		rts				rts
.22a8					CommandBreak:
.22a8	20 72 2a	jsr $2a72			jsr 	EvaluateRootInteger
.22ab	20 2c 30	jsr $302c			jsr 	MInt32Zero
.22ae	f0 02		beq $22b2			beq 	BreakOff
.22b0					BreakOn:
.22b0	a2 08		ldx #$08			ldx 	#8
.22b2					BreakOff:
.22b2	8e 10 0c	stx $0c10			stx 	breakIncrement
.22b5	60		rts				rts
.22b6					ResetCodeAddress:
.22b6	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.22b9	85 28		sta $28				sta 	codePtr
.22bb	ad c9 0a	lda $0ac9			lda 	basePage+1
.22be	85 29		sta $29				sta 	codePtr+1
.22c0	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.22c2	60		rts				rts
.22c3					Unimplemented:
.22c3	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.22c5	20 e0 14	jsr $14e0		jsr	errorHandler
.22c8					TKErr01:
.22c8					TKErr02:
.22c8					TKErr03:
.22c8					TKErr04:
.22c8					TKErr05:
.22c8					TKErr06:
.22c8					TKErr07:
.22c8					TKErr08:
.22c8					TKErr09:
.22c8					TKErr10:
.22c8					TKErr11:
.22c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.22ca	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.22cd					Group0Vectors:
>22cd	94 24					.word	AdvanceNextLine          ; $80 [[eol]]
>22cf	87 22					.word	CommandShift1            ; $81 [[sh1]]
>22d1	95 22					.word	CommandShift2            ; $82 [[sh2]]
>22d3	c8 22					.word	TKErr09                  ; $83 [[sh3]]
>22d5	c8 22					.word	TKErr10                  ; $84 [[fpc]]
>22d7	c8 22					.word	TKErr08                  ; $85 [[str]]
>22d9	58 26					.word	AndHandler               ; $86 and
>22db	45 26					.word	OrHandler                ; $87 or
>22dd	32 26					.word	XorHandler               ; $88 xor
>22df	7a 27					.word	CompareGreaterEq         ; $89 >=
>22e1	84 27					.word	CompareLessEq            ; $8a <=
>22e3	66 27					.word	CompareGreater           ; $8b >
>22e5	5c 27					.word	CompareLess              ; $8c <
>22e7	52 27					.word	CompareEquals            ; $8d =
>22e9	70 27					.word	CompareNotEquals         ; $8e <>
>22eb	c3 25					.word	AddHandler               ; $8f +
>22ed	e6 25					.word	SubHandler               ; $90 -
>22ef	7e 26					.word	ShrHandler               ; $91 >>
>22f1	6b 26					.word	ShlHandler               ; $92 <<
>22f3	f9 25					.word	MulHandler               ; $93 *
>22f5	0c 26					.word	DivHandler               ; $94 /
>22f7	1f 26					.word	ModHandler               ; $95 mod
>22f9	b7 26					.word	PowerHandler             ; $96 ^
>22fb	91 26					.word	WordRefHandler           ; $97 !
>22fd	a4 26					.word	ByteRefHandler           ; $98 ?
>22ff	f8 21					.word	Command_Repeat           ; $99 repeat
>2301	5c 25					.word	Command_While            ; $9a while
>2303	62 1b					.word	Command_FOR              ; $9b for
>2305	71 1c					.word	CommandIf                ; $9c if
>2307	c8 22					.word	TKErr04                  ; $9d defproc
>2309	05 22					.word	Command_Until            ; $9e until
>230b	7f 25					.word	Command_Wend             ; $9f wend
>230d	c3 1b					.word	Command_NEXT             ; $a0 next
>230f	c8 22					.word	TKErr06                  ; $a1 then
>2311	ac 1c					.word	Command_ENDIF            ; $a2 endif
>2313	6a 21					.word	ReturnProc               ; $a3 endproc
>2315	5c 29					.word	UnaryParenthesis         ; $a4 (
>2317	ba 2a					.word	UnaryLen                 ; $a5 len(
>2319	fe 2a					.word	UnarySgn                 ; $a6 sgn(
>231b	e7 2a					.word	UnaryAbs                 ; $a7 abs(
>231d	57 2b					.word	Unary_Random             ; $a8 random(
>231f	a1 2b					.word	Unary_Page               ; $a9 page
>2321	01 30					.word	MInt32True               ; $aa true
>2323	05 30					.word	MInt32False              ; $ab false
>2325	6c 2b					.word	Unary_Min                ; $ac min(
>2327	70 2b					.word	Unary_Max                ; $ad max(
>2329	79 2c					.word	UnarySys                 ; $ae sys(
>232b	22 2c					.word	UnaryTimer               ; $af timer(
>232d	b1 29					.word	EventFunction            ; $b0 event(
>232f	4b 2c					.word	UnaryGet                 ; $b1 get(
>2331	3b 2c					.word	UnaryInkey               ; $b2 inkey(
>2333	f2 2b					.word	UnaryAlloc               ; $b3 alloc(
>2335	b2 2c					.word	ExecChr                  ; $b4 chr$(
>2337	e2 2c					.word	ExecLeft                 ; $b5 left$(
>2339	ff 2c					.word	ExecMid                  ; $b6 mid$(
>233b	27 2d					.word	ExecRight                ; $b7 right$(
>233d	94 27					.word	Event_Str                ; $b8 str$(
>233f	c3 27					.word	UnaryVal                 ; $b9 val(
>2341	15 2b					.word	UnaryPeek                ; $ba peek(
>2343	1b 2b					.word	UnaryDeek                ; $bb deek(
>2345	21 2b					.word	UnaryLeek                ; $bc leek(
>2347	d8 2a					.word	UnaryAsc                 ; $bd asc(
>2349	cc 2b					.word	UnaryIntToFloat          ; $be int(
>234b	df 2b					.word	UnaryFloatToInt          ; $bf float(
>234d	c6 27					.word	UnaryIsVal               ; $c0 isval(
>234f	c9 2c					.word	ExecUpper                ; $c1 upper$(
>2351	c6 2c					.word	ExecLower                ; $c2 lower$(
>2353	af 2b					.word	UnaryReference           ; $c3 @
>2355	c5 2b					.word	UnaryComplement          ; $c4 ~
>2357	c2 2b					.word	UnaryHexMarker           ; $c5 &
>2359	64 2c					.word	UnaryGetString           ; $c6 get$(
>235b	6a 2c					.word	UnaryInkeyString         ; $c7 inkey$(
>235d	a1 2c					.word	UnaryMem                 ; $c8 mem
>235f	c8 22					.word	TKErr01                  ; $c9 )
>2361	a7 22					.word	CommandColon             ; $ca :
>2363	c8 22					.word	TKErr02                  ; $cb ,
>2365	c8 22					.word	TKErr03                  ; $cc ;
>2367	eb 21					.word	Command_Rem2             ; $cd '
>2369	c8 22					.word	TKErr07                  ; $ce to
>236b	c8 22					.word	TKErr05                  ; $cf step
>236d	fd 20					.word	CallProc                 ; $d0 proc
>236f	15 1f					.word	CommandLocal             ; $d1 local
>2371	54 1b					.word	Command_Dim              ; $d2 dim
>2373	eb 21					.word	Command_Rem              ; $d3 rem
>2375	63 1d					.word	CommandLet               ; $d4 let
>2377	ad 1c					.word	Command_Input            ; $d5 input
>2379	a6 1c					.word	Command_ELSE             ; $d6 else
>237b	3b 25					.word	Command_VDU              ; $d7 vdu
>237d	62 20					.word	Command_Print            ; $d8 print
>237f	09 25					.word	CommandGOTO              ; $d9 goto
>2381	de 24					.word	CommandGOSUB             ; $da gosub
>2383	f1 24					.word	CommandRETURN            ; $db return
>2385	b0 21					.word	CommandData              ; $dc data
>2387	eb 1a					.word	Command_Assert           ; $dd assert
>2389	25 20					.word	Command_Poke             ; $de poke
>238b	29 20					.word	Command_Doke             ; $df doke
>238d	2d 20					.word	Command_Loke             ; $e0 loke
>238f	ae 24					.word	Command_Ink              ; $e1 ink
>2391	b9 24					.word	Command_Paper            ; $e2 paper
>2393	a8 24					.word	Command_CLS              ; $e3 cls
>2395	c4 24					.word	Command_Locate           ; $e4 locate
>2397	a8 22					.word	CommandBreak             ; $e5 break
>2399	a1 22					.word	CommandAssemblerLabel    ; $e6 .
>239b	c8 22					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.239d					Group1Vectors:
>239d	f9 1a					.word	CommandClear             ; $86 clear
>239f	bc 1e					.word	CommandLoad              ; $87 load
>23a1	d1 1e					.word	CommandSave              ; $88 save
>23a3	e1 1d					.word	CommandList              ; $89 list
>23a5	17 20					.word	Command_New              ; $8a new
>23a7	26 22					.word	Command_Run              ; $8b run
>23a9	85 21					.word	CommandRead              ; $8c read
>23ab	b9 21					.word	CommandRestore           ; $8d restore
>23ad	8e 24					.word	CommandEnd               ; $8e end
>23af	89 24					.word	CommandStop              ; $8f stop
>23b1	91 24					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c11					procList:
>0c11							.fill 	2		 					; terminated by name high being zero.
.0c13					yInLine:
>0c13							.fill 	1
.23b3					FindProcedure:
.23b3	8c 13 0c	sty $0c13			sty 	yInLine 					; save current position.
.23b6	20 71 24	jsr $2471			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.23b9	85 2c		sta $2c				sta 	temp1
.23bb	ad 11 0c	lda $0c11			lda		procList 					; put procList address in temp2
.23be	85 2e		sta $2e				sta 	temp2
.23c0	ad 12 0c	lda $0c12			lda 	procList+1
.23c3	85 2f		sta $2f				sta 	temp2+1
.23c5	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.23c7					_FPLoop:
.23c7	b1 2e		lda ($2e),y			lda 	(temp2),y
.23c9	f0 4f		beq $241a			beq 	_FPError 					; if so, we don't know this procedure.
.23cb	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.23cd	c8		iny				iny
.23ce	b1 2e		lda ($2e),y			lda 	(temp2),y
.23d0	85 2a		sta $2a				sta 	temp0
.23d2	c8		iny				iny
.23d3	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.23d5	c5 2c		cmp $2c				cmp 	temp1
.23d7	d0 2b		bne $2404			bne 	_FPNext 					; hash is different, go to next.
.23d9	38		sec				sec
.23da	ad 13 0c	lda $0c13			lda 	yInLine 					; position in line must be at least 4
.23dd	e9 04		sbc #$04			sbc 	#4
.23df	18		clc				clc
.23e0	65 28		adc $28				adc 	codePtr
.23e2	85 30		sta $30				sta 	temp3
.23e4	a5 29		lda $29				lda 	codePtr+1
.23e6	69 00		adc #$00			adc 	#0
.23e8	85 31		sta $31				sta 	temp3+1
.23ea	98		tya				tya
.23eb	48		pha				pha
.23ec	a0 04		ldy #$04			ldy 	#4
.23ee					_FPCName:
.23ee	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.23f0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23f2	d0 0e		bne $2402			bne 	_FPpulYNext 				; if different go to next one.
.23f4	c8		iny				iny
.23f5	c9 3a		cmp #$3a			cmp 	#$3A
.23f7	90 f5		bcc $23ee			bcc 	_FPCName 					; compare the whole lot....
.23f9	68		pla				pla 								; throw away the saved Y
.23fa	98		tya				tya 								; length of name is Y-4
.23fb	38		sec				sec
.23fc	e9 04		sbc #$04			sbc 	#4
.23fe	ac 13 0c	ldy $0c13			ldy 	yInLine  					; get the original Y back
.2401	60		rts				rts
.2402					_FPpulYNext:
.2402	68		pla				pla
.2403	a8		tay				tay
.2404					_FPNext:
.2404	c8		iny				iny 								; next procedure record.
.2405	10 c0		bpl $23c7			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2407	98		tya				tya 								; subtract 128 from Y
.2408	38		sec				sec
.2409	e9 80		sbc #$80			sbc 	#128
.240b	a8		tay				tay
.240c	18		clc				clc 								; add 128 to temp2, so we can have more than
.240d	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.240f	69 80		adc #$80			adc 	#128
.2411	85 2e		sta $2e				sta 	temp2
.2413	90 b2		bcc $23c7			bcc 	_FPLoop
.2415	e6 2f		inc $2f				inc 	temp2+1
.2417	4c c7 23	jmp $23c7			jmp 	_FPLoop
.241a					_FPError:
.241a	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.241c	20 e0 14	jsr $14e0		jsr	errorHandler
.241f					ScanProc:
.241f	98		tya				tya
.2420	48		pha				pha
.2421	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2423	8d 11 0c	sta $0c11			sta 	procList
.2426	a5 36		lda $36				lda 	lowMemory+1
.2428	8d 12 0c	sta $0c12			sta 	procList+1
.242b	20 b6 22	jsr $22b6			jsr 	ResetCodeAddress 			; back to the start.
.242e					_ScanLoop:
.242e	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2430	b1 28		lda ($28),y			lda 	(codePtr),y
.2432	f0 2a		beq $245e			beq 	_ScanExit
.2434	a0 03		ldy #$03			ldy 	#3							; get first token
.2436	b1 28		lda ($28),y			lda 	(codePtr),y
.2438	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.243a	d0 12		bne $244e			bne 	_ScanNext
.243c	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.243e	20 66 24	jsr $2466			jsr 	_ScanWrite
.2441	a5 28		lda $28				lda 	codePtr
.2443	20 66 24	jsr $2466			jsr 	_ScanWrite
.2446	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2448	20 71 24	jsr $2471			jsr 	CalculateProcedureHash 		; calculate procedure hash
.244b	20 66 24	jsr $2466			jsr 	_ScanWrite					; and write that
.244e					_ScanNext:
.244e	18		clc				clc
.244f	a0 00		ldy #$00			ldy 	#0
.2451	b1 28		lda ($28),y			lda 	(codePtr),y
.2453	65 28		adc $28				adc 	codePtr
.2455	85 28		sta $28				sta 	codePtr
.2457	90 d5		bcc $242e			bcc 	_ScanLoop
.2459	e6 29		inc $29				inc 	codePtr+1
.245b	4c 2e 24	jmp $242e			jmp 	_ScanLoop
.245e					_ScanExit:
.245e	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2460	20 66 24	jsr $2466			jsr 	_ScanWrite
.2463	68		pla				pla
.2464	a8		tay				tay
.2465	60		rts				rts
.2466					_ScanWrite:
.2466	a0 00		ldy #$00			ldy 	#0
.2468	91 35		sta ($35),y			sta 	(lowMemory),y
.246a	e6 35		inc $35				inc 	lowMemory
.246c	d0 02		bne $2470			bne 	_SWNoCarry
.246e	e6 36		inc $36				inc 	lowMemory+1
.2470					_SWNoCarry:
.2470	60		rts				rts
.2471					CalculateProcedureHash:
.2471	a9 00		lda #$00			lda 	#0 							; clear hash.
.2473	85 2a		sta $2a				sta 	temp0
.2475					_CPHLoop:
.2475	18		clc				clc 								; add character and rotate and add carry back in
.2476	b1 28		lda ($28),y			lda 	(codePtr),y
.2478	65 2a		adc $2a				adc 	temp0
.247a	6a		ror a				ror 	a
.247b	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.247d	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.247f	b1 28		lda ($28),y			lda 	(codePtr),y
.2481	c8		iny				iny 								; advance incase we go round again.
.2482	c9 3a		cmp #$3a			cmp 	#$3A
.2484	90 ef		bcc $2475			bcc 	_CPHLoop
.2486	a5 2a		lda $2a				lda 	temp0
.2488	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.2489					CommandStop:
.2489	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.248b	20 e0 14	jsr $14e0		jsr	errorHandler
.248e					CommandEnd:
.248e	4c 6a 31	jmp $316a			jmp 	WarmStart
.2491					CommandXemu:
.2491	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2494					AdvanceNextLine:
.2494	a0 00		ldy #$00			ldy 	#0 							; get offset
.2496	b1 28		lda ($28),y			lda 	(codePtr),y
.2498	18		clc				clc 								; add to codePtr
.2499	65 28		adc $28				adc 	codePtr
.249b	85 28		sta $28				sta 	codePtr
.249d	90 02		bcc $24a1			bcc 	_ANLNoCarry
.249f	e6 29		inc $29				inc 	codePtr+1
.24a1					_ANLNoCarry:
.24a1	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.24a3	f0 e9		beq $248e			beq 	CommandEnd 					; execute END
.24a5	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.24a7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.24a8					Command_CLS:
.24a8	a2 02		ldx #$02		ldx	#2
.24aa	20 bf 14	jsr $14bf		jsr	deviceHandler
.24ad	60		rts				rts
.24ae					Command_Ink:
.24ae	a2 00		ldx #$00			ldx 	#0
.24b0	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger
.24b3	a2 08		ldx #$08		ldx	#8
.24b5	20 bf 14	jsr $14bf		jsr	deviceHandler
.24b8	60		rts				rts
.24b9					Command_Paper:
.24b9	a2 00		ldx #$00			ldx 	#0
.24bb	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger
.24be	a2 12		ldx #$12		ldx	#18
.24c0	20 bf 14	jsr $14bf		jsr	deviceHandler
.24c3	60		rts				rts
.24c4					Command_Locate:
.24c4	a2 00		ldx #$00			ldx 	#0
.24c6	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger
.24c9	20 85 30	jsr $3085			jsr 	CheckComma
.24cc	e8		inx				inx
.24cd	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger
.24d0	98		tya				tya
.24d1	48		pha				pha
.24d2	a4 49		ldy $49				ldy 	esInt0+1
.24d4	a5 48		lda $48				lda 	esInt0
.24d6	a2 10		ldx #$10		ldx	#16
.24d8	20 bf 14	jsr $14bf		jsr	deviceHandler
.24db	68		pla				pla
.24dc	a8		tay				tay
.24dd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.24de					CommandGOSUB:
.24de	20 72 2a	jsr $2a72			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.24e1	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.24e3	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.24e5	20 1c 31	jsr $311c			jsr 	RSClaim
.24e8	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.24ea	20 48 31	jsr $3148			jsr 	RSSavePosition
.24ed	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.24ef	f0 1b		beq $250c			beq 	GotoTOS 					; and do a GOTO there.
.24f1					CommandRETURN:
.24f1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.24f3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.24f5	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.24f7	f0 05		beq $24fe			beq 	_isok
.24f9	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.24fb	20 e0 14	jsr $14e0		jsr	errorHandler
.24fe					_isok:
.24fe	a9 01		lda #$01			lda 	#1
.2500	20 5b 31	jsr $315b			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2503	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2505	20 3e 31	jsr $313e			jsr 	RSFree
.2508	60		rts				rts
.2509					CommandGOTO:
.2509	20 72 2a	jsr $2a72			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.250c					GotoTOS:
.250c	20 b6 22	jsr $22b6			jsr 	ResetCodeAddress 			; simple search.
.250f					_GotoSearch:
.250f	a0 00		ldy #$00			ldy 	#0 							; get offset
.2511	b1 28		lda ($28),y			lda 	(codePtr),y
.2513	f0 21		beq $2536			beq 	_GotoError 					; not found.
.2515	c8		iny				iny									; check LSB match
.2516	b1 28		lda ($28),y			lda 	(codePtr),y
.2518	d5 48		cmp $48,x			cmp 	esInt0,x
.251a	d0 07		bne $2523			bne 	_GotoNext
.251c	c8		iny				iny
.251d	b1 28		lda ($28),y			lda 	(codePtr),y
.251f	d5 50		cmp $50,x			cmp 	esInt1,x
.2521	f0 10		beq $2533			beq 	_GotoFound
.2523					_GotoNext:
.2523	a0 00		ldy #$00			ldy 	#0 							; go next line
.2525	b1 28		lda ($28),y			lda 	(codePtr),y
.2527	18		clc				clc
.2528	65 28		adc $28				adc 	codePtr
.252a	85 28		sta $28				sta 	codePtr
.252c	90 e1		bcc $250f			bcc 	_GotoSearch
.252e	e6 29		inc $29				inc 	codePtr+1
.2530	4c 0f 25	jmp $250f			jmp 	_GotoSearch
.2533					_GotoFound:
.2533	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2535	60		rts				rts
.2536					_GotoError:
.2536	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2538	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.253b					Command_VDU:
.253b	20 72 2a	jsr $2a72			jsr 	EvaluateRootInteger 			; get integer at root.
.253e	a5 48		lda $48				lda 	esInt0
.2540	a2 14		ldx #$14		ldx	#20
.2542	20 bf 14	jsr $14bf		jsr	deviceHandler
.2545					_CVNext:
.2545	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2547	c8		iny				iny
.2548	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.254a	f0 ef		beq $253b			beq 	Command_VDU
.254c	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.254e	d0 0a		bne $255a			bne 	_CVExit
.2550	a5 50		lda $50				lda 	esInt1
.2552	a2 14		ldx #$14		ldx	#20
.2554	20 bf 14	jsr $14bf		jsr	deviceHandler
.2557	4c 45 25	jmp $2545			jmp 	_CVNext
.255a	88		dey		_CVExit:dey
.255b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.255c					Command_While:
.255c	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.255e	a2 04		ldx #$04			ldx 	#4
.2560	20 1c 31	jsr $311c			jsr 	RSClaim 					; create on stack.
.2563	88		dey				dey
.2564	a9 01		lda #$01			lda 	#1
.2566	20 48 31	jsr $3148			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2569	c8		iny				iny
.256a	20 74 2a	jsr $2a74			jsr 	EvaluateInteger				; get the conditional
.256d	20 2c 30	jsr $302c			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2570	f0 01		beq $2573			beq 	_CWFail
.2572	60		rts				rts
.2573					_CWFail:
.2573	a9 04		lda #$04			lda 	#4
.2575	20 3e 31	jsr $313e			jsr 	RSFree 						; close the just opened position.
.2578	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.257a	aa		tax				tax
.257b	20 92 30	jsr $3092			jsr 	ScanForward
.257e	60		rts				rts
.257f					Command_Wend:
.257f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2581	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2583	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2585	f0 05		beq $258c			beq 	_isok
.2587	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2589	20 e0 14	jsr $14e0		jsr	errorHandler
.258c					_isok:
.258c	a9 01		lda #$01			lda 	#1
.258e	20 5b 31	jsr $315b			jsr 	RSLoadPosition				; go back until true
.2591	a9 04		lda #$04			lda 	#4
.2593	20 3e 31	jsr $313e			jsr 	RSFree 						; close the loop
.2596	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.2597					BinaryProcess:
.2597	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2599	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.259b	0a		asl a				asl 	a
.259c	30 0e		bmi $25ac			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.259e	18		clc				clc 								; return CC for integer
.259f	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.25a1	f0 08		beq $25ab			beq 	_BPExit 					; if both integer then return with CC.
.25a3	20 b1 25	jsr $25b1			jsr 	BPMakeBothFloat 			; make both float
.25a6	a9 01		lda #$01			lda 	#$01 						; set result type to float
.25a8	95 40		sta $40,x			sta 	esType,x
.25aa	38		sec				sec 								; and return with carry set.
.25ab					_BPExit:
.25ab	60		rts				rts
.25ac					_BPStringType:
.25ac	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.25ae	20 e0 14	jsr $14e0		jsr	errorHandler
.25b1					BPMakeBothFloat:
.25b1	e8		inx				inx
.25b2	20 b6 25	jsr $25b6			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.25b5	ca		dex				dex
.25b6					BPMakeFloat:
.25b6	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.25b8	4a		lsr a				lsr 	a
.25b9	b0 07		bcs $25c2			bcs 	_BPIsFloat 					; already a float if set.
.25bb	8a		txa				txa
.25bc	a2 1a		ldx #$1a		ldx	#26
.25be	20 06 19	jsr $1906		jsr	floatingpointHandler
.25c1	aa		tax				tax
.25c2					_BPIsFloat:
.25c2	60		rts				rts
.25c3					AddHandler:
.25c3	20 12 28	jsr $2812			jsr 	DereferenceTwo 				; dereference top two on stack.
.25c6	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.25c8	35 41		and $41,x			and 	esType+1,x
.25ca	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.25cc	d0 10		bne $25de			bne 	_AHStringConcat				; concatenate strings.
.25ce	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.25d1	b0 03		bcs $25d6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25d3	4c e9 2e	jmp $2ee9			jmp 	MInt32Add 							; else do it as integer.
.25d6					_IsFPOperation:
.25d6	8a		txa				txa 								; call the relevant fp routine
.25d7	a2 02		ldx #$02		ldx	#2
.25d9	20 06 19	jsr $1906		jsr	floatingpointHandler
.25dc	aa		tax				tax
.25dd	60		rts				rts
.25de					_AHStringConcat:
.25de	8a		txa				txa 								; handled by the string module.
.25df	a2 04		ldx #$04		ldx	#4
.25e1	20 25 34	jsr $3425		jsr	stringHandler
.25e4	aa		tax				tax
.25e5	60		rts				rts
.25e6					SubHandler:
.25e6	20 12 28	jsr $2812			jsr 	DereferenceTwo
.25e9	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.25ec	b0 03		bcs $25f1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25ee	4c 03 2f	jmp $2f03			jmp 	MInt32Sub 							; else do it as integer.
.25f1					_IsFPOperation:
.25f1	8a		txa				txa 								; call the relevant fp routine
.25f2	a2 10		ldx #$10		ldx	#16
.25f4	20 06 19	jsr $1906		jsr	floatingpointHandler
.25f7	aa		tax				tax
.25f8	60		rts				rts
.25f9					MulHandler:
.25f9	20 12 28	jsr $2812			jsr 	DereferenceTwo
.25fc	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.25ff	b0 03		bcs $2604			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2601	4c 1d 2f	jmp $2f1d			jmp 	MInt32Multiply 							; else do it as integer.
.2604					_IsFPOperation:
.2604	8a		txa				txa 								; call the relevant fp routine
.2605	a2 0a		ldx #$0a		ldx	#10
.2607	20 06 19	jsr $1906		jsr	floatingpointHandler
.260a	aa		tax				tax
.260b	60		rts				rts
.260c					DivHandler:
.260c	20 12 28	jsr $2812			jsr 	DereferenceTwo
.260f	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.2612	b0 03		bcs $2617			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2614	4c da 2d	jmp $2dda			jmp 	MInt32SDivide 							; else do it as integer.
.2617					_IsFPOperation:
.2617	8a		txa				txa 								; call the relevant fp routine
.2618	a2 06		ldx #$06		ldx	#6
.261a	20 06 19	jsr $1906		jsr	floatingpointHandler
.261d	aa		tax				tax
.261e	60		rts				rts
.261f					ModHandler:
.261f	20 12 28	jsr $2812			jsr 	DereferenceTwo
.2622	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.2625	b0 03		bcs $262a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2627	4c 58 2e	jmp $2e58			jmp 	MInt32Modulus 							; else do it as integer.
.262a					_IsFPOperation:
.262a	8a		txa				txa 								; call the relevant fp routine
.262b	a2 08		ldx #$08		ldx	#8
.262d	20 06 19	jsr $1906		jsr	floatingpointHandler
.2630	aa		tax				tax
.2631	60		rts				rts
.2632					XorHandler:
.2632	20 12 28	jsr $2812			jsr 	DereferenceTwo
.2635	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.2638	b0 03		bcs $263d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.263a	4c 8c 2d	jmp $2d8c			jmp 	MInt32Xor 							; else do it as integer.
.263d					_IsFPOperation:
.263d	8a		txa				txa 								; call the relevant fp routine
.263e	a2 08		ldx #$08		ldx	#8
.2640	20 06 19	jsr $1906		jsr	floatingpointHandler
.2643	aa		tax				tax
.2644	60		rts				rts
.2645					OrHandler:
.2645	20 12 28	jsr $2812			jsr 	DereferenceTwo
.2648	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.264b	b0 03		bcs $2650			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.264d	4c 73 2d	jmp $2d73			jmp 	MInt32Or 							; else do it as integer.
.2650					_IsFPOperation:
.2650	8a		txa				txa 								; call the relevant fp routine
.2651	a2 08		ldx #$08		ldx	#8
.2653	20 06 19	jsr $1906		jsr	floatingpointHandler
.2656	aa		tax				tax
.2657	60		rts				rts
.2658					AndHandler:
.2658	20 12 28	jsr $2812			jsr 	DereferenceTwo
.265b	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.265e	b0 03		bcs $2663			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2660	4c 5a 2d	jmp $2d5a			jmp 	MInt32And 							; else do it as integer.
.2663					_IsFPOperation:
.2663	8a		txa				txa 								; call the relevant fp routine
.2664	a2 08		ldx #$08		ldx	#8
.2666	20 06 19	jsr $1906		jsr	floatingpointHandler
.2669	aa		tax				tax
.266a	60		rts				rts
.266b					ShlHandler:
.266b	20 12 28	jsr $2812			jsr 	DereferenceTwo
.266e	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.2671	b0 03		bcs $2676			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2673	4c ec 26	jmp $26ec			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2676					_IsFPOperation:
.2676	8a		txa				txa 								; call the relevant fp routine
.2677	a2 08		ldx #$08		ldx	#8
.2679	20 06 19	jsr $1906		jsr	floatingpointHandler
.267c	aa		tax				tax
.267d	60		rts				rts
.267e					ShrHandler:
.267e	20 12 28	jsr $2812			jsr 	DereferenceTwo
.2681	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.2684	b0 03		bcs $2689			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2686	4c ef 26	jmp $26ef			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2689					_IsFPOperation:
.2689	8a		txa				txa 								; call the relevant fp routine
.268a	a2 08		ldx #$08		ldx	#8
.268c	20 06 19	jsr $1906		jsr	floatingpointHandler
.268f	aa		tax				tax
.2690	60		rts				rts
.2691					WordRefHandler:
.2691	20 12 28	jsr $2812			jsr 	DereferenceTwo
.2694	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.2697	b0 03		bcs $269c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2699	4c de 26	jmp $26de			jmp 	MInt32WordIndirect 							; else do it as integer.
.269c					_IsFPOperation:
.269c	8a		txa				txa 								; call the relevant fp routine
.269d	a2 08		ldx #$08		ldx	#8
.269f	20 06 19	jsr $1906		jsr	floatingpointHandler
.26a2	aa		tax				tax
.26a3	60		rts				rts
.26a4					ByteRefHandler:
.26a4	20 12 28	jsr $2812			jsr 	DereferenceTwo
.26a7	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.26aa	b0 03		bcs $26af			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26ac	4c e2 26	jmp $26e2			jmp 	MInt32ByteIndirect 							; else do it as integer.
.26af					_IsFPOperation:
.26af	8a		txa				txa 								; call the relevant fp routine
.26b0	a2 08		ldx #$08		ldx	#8
.26b2	20 06 19	jsr $1906		jsr	floatingpointHandler
.26b5	aa		tax				tax
.26b6	60		rts				rts
.26b7					PowerHandler:
.26b7	20 12 28	jsr $2812			jsr 	DereferenceTwo
.26ba	20 97 25	jsr $2597			jsr 	BinaryProcess 				; check to see if either is float
.26bd	b0 03		bcs $26c2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26bf	4c ca 26	jmp $26ca			jmp 	PowerInteger 							; else do it as integer.
.26c2					_IsFPOperation:
.26c2	8a		txa				txa 								; call the relevant fp routine
.26c3	a2 16		ldx #$16		ldx	#22
.26c5	20 06 19	jsr $1906		jsr	floatingpointHandler
.26c8	aa		tax				tax
.26c9	60		rts				rts
.26ca					PowerInteger:
.26ca	20 b1 25	jsr $25b1			jsr 	BPMakeBothFloat				; make them float.
.26cd	8a		txa				txa
.26ce	a2 16		ldx #$16		ldx	#22
.26d0	20 06 19	jsr $1906		jsr	floatingpointHandler
.26d3	a2 12		ldx #$12		ldx	#18
.26d5	20 06 19	jsr $1906		jsr	floatingpointHandler
.26d8	aa		tax				tax
.26d9	a9 00		lda #$00			lda 	#0 							; make type integer
.26db	95 40		sta $40,x			sta 	esType,x
.26dd	60		rts				rts
.26de					Mint32WordIndirect:
.26de	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.26e0	d0 02		bne $26e4			bne 	Min32Indirect
.26e2					Mint32ByteIndirect:
.26e2	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.26e4					Min32Indirect:
.26e4	48		pha				pha 								; save the indirection
.26e5	20 e9 2e	jsr $2ee9			jsr 	MInt32Add 					; add a!b a?b
.26e8	68		pla				pla 								; and set the type to reference.
.26e9	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.26eb	60		rts				rts
.26ec					Mint32ShiftLeftX:
.26ec	18		clc				clc 								; CC shift left
.26ed	90 01		bcc $26f0			bcc 	Mint32Shift
.26ef					Mint32ShiftRightX:
.26ef	38		sec				sec 								; CS shift right
.26f0					Mint32Shift:
.26f0	08		php				php 								; save carry flag on stack.
.26f1	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.26f3	15 59		ora $59,x			ora 	esInt2+1,x
.26f5	15 61		ora $61,x			ora 	esInt3+1,x
.26f7	d0 1e		bne $2717			bne 	_MShiftZero
.26f9	b5 49		lda $49,x			lda 	esInt0+1,x
.26fb	c9 20		cmp #$20			cmp 	#32
.26fd	b0 18		bcs $2717			bcs 	_MShiftZero
.26ff					_MShiftLoop:
.26ff	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.2701	f0 12		beq $2715			beq 	_MShiftExit
.2703	d6 49		dec $49,x			dec 	esInt0+1,x
.2705	28		plp				plp 								; restore and save carry
.2706	08		php				php
.2707	90 06		bcc $270f			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2709	20 23 30	jsr $3023			jsr 	Mint32ShiftRight
.270c	4c ff 26	jmp $26ff			jmp 	_MShiftLoop
.270f					_MShiftLeft:
.270f	20 1a 30	jsr $301a			jsr 	Mint32ShiftLeft
.2712	4c ff 26	jmp $26ff			jmp 	_MShiftLoop
.2715					_MShiftExit:
.2715	28		plp				plp	 								; throw saved carry and exit
.2716	60		rts				rts
.2717					_MShiftZero:
.2717	4c 05 30	jmp $3005			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.271a					PerformComparison:
.271a	20 12 28	jsr $2812			jsr 	DereferenceTwo 				; make both values.
.271d	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.271f	35 41		and $41,x			and 	esType+1,x
.2721	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2722	30 1d		bmi $2741			bmi 	_PCIsString
.2724	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.2726	15 41		ora $41,x			ora 	esType+1,x
.2728	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2729	30 22		bmi $274d			bmi 	_PCError
.272b	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.272d	f0 0f		beq $273e			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.272f	20 b1 25	jsr $25b1			jsr 	BPMakeBothFloat 			; make both float
.2732	8a		txa				txa
.2733	a2 04		ldx #$04		ldx	#4
.2735	20 06 19	jsr $1906		jsr	floatingpointHandler
.2738	86 32		stx $32				stx 	tempShort 					; save result
.273a	aa		tax				tax
.273b	a5 32		lda $32				lda 	tempShort
.273d	60		rts				rts
.273e					_PCIsInteger:
.273e	4c a5 2d	jmp $2da5			jmp 	MInt32Compare
.2741					_PCIsString:
.2741	8a		txa				txa 								; A has SP
.2742	a2 08		ldx #$08		ldx	#8
.2744	20 25 34	jsr $3425		jsr	stringHandler
.2747	86 32		stx $32				stx 	tempShort 					; save result
.2749	aa		tax				tax 								; put SP back in X and get result.
.274a	a5 32		lda $32				lda 	tempShort
.274c	60		rts				rts
.274d					_PCError:
.274d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.274f	20 e0 14	jsr $14e0		jsr	errorHandler
.2752					CompareEquals:
.2752	20 1a 27	jsr $271a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2755	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2757	f0 35		beq $278e			beq  	CompareTrue
.2759	4c 91 27	jmp $2791			jmp 	CompareFalse
.275c					CompareLess:
.275c	20 1a 27	jsr $271a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.275f	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2761	f0 2b		beq $278e			beq  	CompareTrue
.2763	4c 91 27	jmp $2791			jmp 	CompareFalse
.2766					CompareGreater:
.2766	20 1a 27	jsr $271a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2769	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.276b	f0 21		beq $278e			beq  	CompareTrue
.276d	4c 91 27	jmp $2791			jmp 	CompareFalse
.2770					CompareNotEquals:
.2770	20 1a 27	jsr $271a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2773	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2775	d0 17		bne $278e			bne  	CompareTrue
.2777	4c 91 27	jmp $2791			jmp 	CompareFalse
.277a					CompareGreaterEq:
.277a	20 1a 27	jsr $271a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.277d	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.277f	d0 0d		bne $278e			bne  	CompareTrue
.2781	4c 91 27	jmp $2791			jmp 	CompareFalse
.2784					CompareLessEq:
.2784	20 1a 27	jsr $271a			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2787	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2789	d0 03		bne $278e			bne  	CompareTrue
.278b	4c 91 27	jmp $2791			jmp 	CompareFalse
.278e					CompareTrue:
.278e	4c 01 30	jmp $3001			jmp 	MInt32True
.2791					CompareFalse:
.2791	4c 05 30	jmp $3005			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.2794					Event_Str:
.2794	20 5e 2a	jsr $2a5e			jsr 	EvaluateNumeric 			; get a number.
.2797	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2799	d0 13		bne $27ae			bne 	_ESFloat
.279b	20 f1 27	jsr $27f1			jsr 	ConvertGetBase 				; get base, or default.
.279e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.27a0	85 2a		sta $2a				sta 	temp0
.27a2	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.27a4	85 2b		sta $2b				sta 	1+(temp0)
.27a6	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.27a8	20 5b 2f	jsr $2f5b			jsr 	MInt32ToString 				; convert to string.
.27ab	4c bb 27	jmp $27bb			jmp 	_ESCloneExit 				; clone and exit.
.27ae					_ESFloat:
.27ae	20 78 30	jsr $3078			jsr 	CheckRightParen 			; check closing )
.27b1	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.27b4	8a		txa				txa
.27b5	a2 14		ldx #$14		ldx	#20
.27b7	20 06 19	jsr $1906		jsr	floatingpointHandler
.27ba	aa		tax				tax
.27bb					_ESCloneExit:
.27bb	8a		txa				txa
.27bc	a2 02		ldx #$02		ldx	#2
.27be	20 25 34	jsr $3425		jsr	stringHandler
.27c1	aa		tax				tax
.27c2	60		rts				rts
.27c3					UnaryVal:
.27c3	38		sec				sec 								; Carry set to return value
.27c4	b0 01		bcs $27c7			bcs 	ValueMain
.27c6					UnaryIsVal:
.27c6	18		clc				clc									; Carry clear to return legitimacy
.27c7					ValueMain:
.27c7	08		php				php 								; save results (CS is value, CC is validation)
.27c8	20 69 2a	jsr $2a69			jsr 	EvaluateString
.27cb	20 f1 27	jsr $27f1			jsr 	ConvertGetBase 				; get base, if any.
.27ce	98		tya				tya
.27cf	48		pha				pha
.27d0	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.27d3	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.27d5	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.27d7	20 73 2e	jsr $2e73			jsr 	MInt32FromString 			; convert it back from a string.
.27da	b0 0c		bcs $27e8			bcs 	_VMSuccess 					; successfully converted.
.27dc	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.27de	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.27e0	f0 00		beq $27e2			beq 	_VMFailed 	 				; so we failed.
.27e2					_VMFailed:
.27e2	68		pla				pla
.27e3	a8		tay				tay
.27e4	28		plp				plp
.27e5	4c 05 30	jmp $3005			jmp 	MInt32False 				; return 0 whatever.
.27e8					_VMSuccess:
.27e8	68		pla				pla
.27e9	a8		tay				tay
.27ea	28		plp				plp 								; if CS the it was val() so we want the value.
.27eb	b0 03		bcs $27f0			bcs 	_VMExit
.27ed	4c 01 30	jmp $3001			jmp 	MInt32True 					; otherwise return true as successful.
.27f0					_VMExit:
.27f0	60		rts				rts
.27f1					ConvertGetBase:
.27f1	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.27f3	95 49		sta $49,x			sta 	esInt0+1,x
.27f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.27f7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.27f9	d0 0e		bne $2809			bne 	_CGBDone 					; not found, should be )
.27fb	e8		inx				inx 								; next level
.27fc	c8		iny				iny 								; skip comma.
.27fd	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger		; evaluate the base.
.2800	ca		dex				dex
.2801	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2803	90 08		bcc $280d			bcc 	_CGBValue 					; (it should work as high as 37)
.2805	c9 11		cmp #$11			cmp 	#17
.2807	b0 04		bcs $280d			bcs 	_CGBValue
.2809					_CGBDone:
.2809	20 78 30	jsr $3078			jsr 	CheckRightParen
.280c	60		rts				rts
.280d					_CGBValue:
.280d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.280f	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2812					DereferenceTwo:
.2812	e8		inx				inx
.2813	20 17 28	jsr $2817			jsr 	DereferenceOne
.2816	ca		dex				dex
.2817					DereferenceOne:
.2817	b5 40		lda $40,x			lda 	esType,x
.2819	10 3d		bpl $2858			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.281b	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.281c	b0 3b		bcs $2859			bcs 	_DRFloatDeReference
.281e	98		tya				tya
.281f	48		pha				pha
.2820	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.2822	85 2a		sta $2a				sta 	temp0
.2824	b5 50		lda $50,x			lda 	esInt1,x
.2826	85 2b		sta $2b				sta 	temp0+1
.2828	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.282a	95 50		sta $50,x			sta 	esInt1,x
.282c	95 58		sta $58,x			sta 	esInt2,x
.282e	95 60		sta $60,x			sta 	esInt3,x
.2830	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.2832	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2834	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2835	30 0d		bmi $2844			bmi 	_DeRefString 				; string, 2 bytes only
.2837	d0 11		bne $284a			bne 	_DeRefByte 					; byte 1 byte only
.2839					_DeRefLong:
.2839	a0 03		ldy #$03			ldy 	#3
.283b	b1 2a		lda ($2a),y			lda 	(temp0),y
.283d	95 60		sta $60,x			sta 	esInt3,x
.283f	88		dey				dey
.2840	b1 2a		lda ($2a),y			lda 	(temp0),y
.2842	95 58		sta $58,x			sta 	esInt2,x
.2844					_DeRefString:
.2844	a0 01		ldy #$01			ldy 	#1
.2846	b1 2a		lda ($2a),y			lda 	(temp0),y
.2848	95 50		sta $50,x			sta 	esInt1,x
.284a					_DeRefByte:
.284a	a0 00		ldy #$00			ldy 	#0
.284c	b1 2a		lda ($2a),y			lda 	(temp0),y
.284e	95 48		sta $48,x			sta 	esInt0,x
.2850	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.2852	29 40		and #$40			and 	#$40
.2854	95 40		sta $40,x			sta 	esType,x
.2856	68		pla				pla
.2857	a8		tay				tay
.2858					_DRNotReference
.2858	60		rts				rts
.2859					_DRFloatDereference:
.2859	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 					; address to deref in temp0
.285c	8a		txa				txa
.285d	a2 1c		ldx #$1c		ldx	#28
.285f	20 06 19	jsr $1906		jsr	floatingpointHandler
.2862	aa		tax				tax
.2863	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2865	95 40		sta $40,x			sta 	esType,x
.2867	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2868					EvaluateLevel:
.2868	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.286a	b0 1e		bcs $288a			bcs 	_ELStack
.286c	48		pha				pha 								; save precedence level.
.286d	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.286f	95 48		sta $48,x			sta 	esInt0,x
.2871	95 50		sta $50,x			sta 	esInt1,x
.2873	95 58		sta $58,x			sta 	esInt2,x
.2875	95 60		sta $60,x			sta 	esInt3,x
.2877	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.2879	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.287b	30 26		bmi $28a3			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.287d	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.287e	30 0f		bmi $288f			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2880	8a		txa				txa 								; stack level in X
.2881	a2 00		ldx #$00		ldx	#0
.2883	20 2b 3f	jsr $3f2b		jsr	variableHandler
.2886	aa		tax				tax
.2887	4c cc 28	jmp $28cc			jmp		_ELHasTerm
.288a					_ELStack:
.288a	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.288c	20 e0 14	jsr $14e0		jsr	errorHandler
.288f					_ELIsConstant:
.288f	4a		lsr a				lsr 	a 							; get the value back
.2890	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2892	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.2894					_ELCheckNext:
.2894	c8		iny				iny 								; look at next
.2895	b1 28		lda ($28),y			lda 	(codePtr),y
.2897	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2899	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.289b	b0 2f		bcs $28cc			bcs 	_ELHasTerm 					; done getting the constant.
.289d	20 65 29	jsr $2965			jsr 	ELShiftByteIn 				; shift byte into position.
.28a0	4c 94 28	jmp $2894			jmp 	_ELCheckNext
.28a3					_ELIsToken:
.28a3	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.28a5	f0 0f		beq $28b6			beq 	_ELIsString
.28a7	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.28a9	d0 5f		bne $290a			bne 	_ELCheckUnary
.28ab	8a		txa				txa 								; put X into A
.28ac	c8		iny				iny 								; skip over the float marker
.28ad	a2 18		ldx #$18		ldx	#24
.28af	20 06 19	jsr $1906		jsr	floatingpointHandler
.28b2	aa		tax				tax 								; restore X
.28b3	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.28b6					_ELIsString:
.28b6	98		tya				tya 								; address of string is codePtr+y+1
.28b7	38		sec				sec
.28b8	65 28		adc $28				adc 	codePtr
.28ba	95 48		sta $48,x			sta 	esInt0,x
.28bc	a5 29		lda $29				lda 	codePtr+1
.28be	69 00		adc #$00			adc 	#0
.28c0	95 50		sta $50,x			sta 	esInt1,x
.28c2	a9 40		lda #$40			lda 	#$40 						; set type to string value
.28c4	95 40		sta $40,x			sta 	esType,x
.28c6	c8		iny				iny 								; skip over string.
.28c7	98		tya				tya
.28c8	38		sec				sec									; +1 for the length itself.
.28c9	71 28		adc ($28),y			adc 	(codePtr),y
.28cb	a8		tay				tay 								; and fall through to term loop code.
.28cc					_ELHasTerm:
.28cc	b1 28		lda ($28),y			lda 	(codePtr),y
.28ce	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.28d0	90 04		bcc $28d6			bcc 	_ELPopExit
.28d2	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.28d4	90 02		bcc $28d8			bcc 	_ELHasBinaryTerm
.28d6					_ELPopExit:
.28d6	68		pla				pla
.28d7					_ELExit:
.28d7	60		rts				rts
.28d8					_ELHasBinaryTerm:
.28d8	84 32		sty $32				sty 	tempShort 					; save position
.28da	a8		tay				tay 								; use token as an index and get the precedence.
.28db	b9 0d 29	lda $290d,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.28de	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.28e0	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.28e2	68		pla				pla 								; restore current level.
.28e3	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.28e5	b0 f0		bcs $28d7			bcs 	_ELExit
.28e7	48		pha				pha 								; save current level back on the stack.
.28e8	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.28ea	48		pha				pha
.28eb	c8		iny				iny
.28ec	e8		inx				inx 								; calculate the RHS at the operator precedence.
.28ed	a5 32		lda $32				lda 	tempShort
.28ef	20 68 28	jsr $2868			jsr 	EvaluateLevel
.28f2	ca		dex				dex
.28f3	68		pla				pla 								; get the operator back out.
.28f4					_ELExecuteA:
.28f4	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.28f6	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.28f7	aa		tax				tax
.28f8	bd cd 22	lda $22cd,x			lda 	Group0Vectors,x
.28fb	85 2a		sta $2a				sta 	temp0
.28fd	bd ce 22	lda $22ce,x			lda 	Group0Vectors+1,x
.2900	85 2b		sta $2b				sta 	temp0+1
.2902	a6 32		ldx $32				ldx 	tempShort
.2904	20 51 29	jsr $2951			jsr 	_ELCallTemp0
.2907	4c cc 28	jmp $28cc			jmp 	_ELHasTerm 					; and loop back round.
.290a					_ELCheckUnary:
.290a	c8		iny				iny 								; skip over token.
.290b	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.290d	f0 19		beq $2928			beq 	_ELMinus
.290f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2911	f0 2c		beq $293f			beq 	_ELIndirect
.2913	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2915	f0 28		beq $293f			beq 	_ELIndirect
.2917	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2919	f0 39		beq $2954			beq 	_ELExtension
.291b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.291d	90 04		bcc $2923			bcc 	_ELUSyntax
.291f	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2921	90 d1		bcc $28f4			bcc 	_ELExecuteA 				; if so do that token.
.2923					_ELUSyntax:
.2923	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2925	20 e0 14	jsr $14e0		jsr	errorHandler
.2928					_ELMinus:
.2928	20 3d 2a	jsr $2a3d			jsr 	EvaluateNumericTerm 		; get a number to negate.
.292b	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.292d	f0 0a		beq $2939			beq 	_ELMinusInteger
.292f	8a		txa				txa
.2930	a2 0c		ldx #$0c		ldx	#12
.2932	20 06 19	jsr $1906		jsr	floatingpointHandler
.2935	aa		tax				tax
.2936	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.2939					_ELMinusInteger:
.2939	20 bf 2f	jsr $2fbf			jsr 	MInt32Negate 				; do int negate
.293c	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.293f					_ELIndirect:
.293f	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2940	20 46 2a	jsr $2a46			jsr 	EvaluateIntegerTerm 		; integer address
.2943	68		pla				pla
.2944	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2946	f0 02		beq $294a			beq 	_ELHaveModifier
.2948	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.294a					_ELHaveModifier:
.294a	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.294c	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.294e	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.2951					_ELCallTemp0:
.2951	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2954					_ELExtension:
.2954	8a		txa				txa 								; stack pos in A
.2955	20 f7 17	jsr $17f7		jsr	extensionHandler
.2958	aa		tax				tax 								; restore stack
.2959	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.295c					UnaryParenthesis:
.295c	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.295e	20 68 28	jsr $2868			jsr 	EvaluateLevel
.2961	20 78 30	jsr $3078			jsr 	CheckRightParen 			; check for )
.2964	60		rts				rts
.2965					ELShiftByteIn:
.2965	48		pha				pha 								; save bits to shift in.
.2966	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2968	48		pha				pha
.2969	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.296b	95 60		sta $60,x			sta 	esInt3,x
.296d	b5 50		lda $50,x			lda 	esInt1,x
.296f	95 58		sta $58,x			sta 	esInt2,x
.2971	b5 48		lda $48,x			lda 	esInt0,x
.2973	95 50		sta $50,x			sta 	esInt1,x
.2975	a9 00		lda #$00			lda 	#0
.2977	95 48		sta $48,x			sta 	esInt0,x
.2979	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.297a	29 03		and #$03			and 	#3 							; only want lower 2 bits
.297c	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.297e					_ELShiftLoop:
.297e	4a		lsr a				lsr 	a
.297f	76 60		ror $60,x			ror 	esInt3,x
.2981	76 58		ror $58,x			ror 	esInt2,x
.2983	76 50		ror $50,x			ror 	esInt1,x
.2985	76 48		ror $48,x			ror 	esInt0,x
.2987	c9 01		cmp #$01			cmp 	#1
.2989	d0 f3		bne $297e			bne 	_ELShiftLoop
.298b	68		pla				pla 								; get original 6 bit value and OR in.
.298c	29 3f		and #$3f			and 	#$3F
.298e	15 48		ora $48,x			ora 	esInt0,x
.2990	95 48		sta $48,x			sta 	esInt0,x
.2992	60		rts				rts
.2993					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2993	01					.byte	$01			; $86 and
>2994	01					.byte	$01			; $87 or
>2995	01					.byte	$01			; $88 xor
>2996	02					.byte	$02			; $89 >=
>2997	02					.byte	$02			; $8a <=
>2998	02					.byte	$02			; $8b >
>2999	02					.byte	$02			; $8c <
>299a	02					.byte	$02			; $8d =
>299b	02					.byte	$02			; $8e <>
>299c	03					.byte	$03			; $8f +
>299d	03					.byte	$03			; $90 -
>299e	04					.byte	$04			; $91 >>
>299f	04					.byte	$04			; $92 <<
>29a0	04					.byte	$04			; $93 *
>29a1	04					.byte	$04			; $94 /
>29a2	04					.byte	$04			; $95 mod
>29a3	05					.byte	$05			; $96 ^
>29a4	06					.byte	$06			; $97 !
>29a5	06					.byte	$06			; $98 ?
>29a6	82					.byte	$82			; $99 repeat
>29a7	82					.byte	$82			; $9a while
>29a8	82					.byte	$82			; $9b for
>29a9	82					.byte	$82			; $9c if
>29aa	82					.byte	$82			; $9d defproc
>29ab	80					.byte	$80			; $9e until
>29ac	80					.byte	$80			; $9f wend
>29ad	80					.byte	$80			; $a0 next
>29ae	80					.byte	$80			; $a1 then
>29af	80					.byte	$80			; $a2 endif
>29b0	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.29b1					EventFunction:
.29b1	20 a7 2a	jsr $2aa7			jsr 	EvaluateReference			; get the variable reference that tracks the event
.29b4	b5 40		lda $40,x			lda 	esType,x
.29b6	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.29b8	d0 5b		bne $2a15			bne 	_EFType
.29ba	20 85 30	jsr $3085			jsr 	CheckComma
.29bd	e8		inx				inx
.29be	20 74 2a	jsr $2a74			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.29c1	20 78 30	jsr $3078			jsr 	CheckRightParen 			; finish off with the right bracket
.29c4	ca		dex				dex
.29c5	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.29c7	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.29c9	15 58		ora $58,x			ora 	esInt2,x
.29cb	15 60		ora $60,x			ora 	esInt3,x
.29cd	d0 41		bne $2a10			bne 	_EFValue
.29cf	98		tya				tya
.29d0	48		pha				pha
.29d1	8a		txa				txa
.29d2	48		pha				pha
.29d3	a2 1c		ldx #$1c		ldx	#28
.29d5	20 bf 14	jsr $14bf		jsr	deviceHandler
.29d8	84 2d		sty $2d				sty 	temp1+1
.29da	85 2c		sta $2c				sta 	temp1
.29dc	68		pla				pla
.29dd	aa		tax				tax
.29de	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.29e1	a0 03		ldy #$03			ldy 	#3							; if -ve
.29e3	b1 2a		lda ($2a),y			lda 	(temp0),y
.29e5	30 23		bmi $2a0a			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.29e7	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.29e9	b1 2a		lda ($2a),y			lda 	(temp0),y
.29eb	c8		iny				iny
.29ec	11 2a		ora ($2a),y			ora 	(temp0),y
.29ee	f0 17		beq $2a07			beq 	_EFInitialise 				; if so, initialise the value but return false.
.29f0	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.29f2	38		sec				sec
.29f3	b1 2a		lda ($2a),y			lda 	(temp0),y
.29f5	e5 2c		sbc $2c				sbc 	temp1
.29f7	c8		iny				iny
.29f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.29fa	e5 2d		sbc $2d				sbc 	temp1+1
.29fc	10 0c		bpl $2a0a			bpl 	_EFFail 					; if trigger >= timer then return False
.29fe	20 1a 2a	jsr $2a1a			jsr 	SetEventTimer 				; reset the timer for next time.
.2a01	20 01 30	jsr $3001			jsr	 	MInt32True 					; and treutn true as fired.
.2a04	68		pla				pla
.2a05	a8		tay				tay
.2a06	60		rts				rts
.2a07					_EFInitialise:
.2a07	20 1a 2a	jsr $2a1a			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2a0a					_EFFail:
.2a0a	68		pla				pla
.2a0b	a8		tay				tay
.2a0c	20 05 30	jsr $3005			jsr 	MInt32False
.2a0f	60		rts				rts
.2a10					_EFValue:
.2a10	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a12	20 e0 14	jsr $14e0		jsr	errorHandler
.2a15					_EFType:
.2a15	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a17	20 e0 14	jsr $14e0		jsr	errorHandler
.2a1a					SetEventTimer:
.2a1a	a0 00		ldy #$00			ldy 	#0
.2a1c	18		clc				clc
.2a1d	a5 2c		lda $2c				lda 	temp1
.2a1f	75 49		adc $49,x			adc 	esInt0+1,x
.2a21	91 2a		sta ($2a),y			sta		(temp0),y
.2a23	c8		iny				iny
.2a24	a5 2d		lda $2d				lda 	temp1+1
.2a26	75 51		adc $51,x			adc 	esInt1+1,x
.2a28	91 2a		sta ($2a),y			sta		(temp0),y
.2a2a	88		dey				dey
.2a2b	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2a2d	d0 04		bne $2a33			bne 	_SETExit 					; zero means initialise.....
.2a2f	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2a31	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2a33					_SETExit:
.2a33	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2a34					EvaluateTerm:
.2a34	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2a36	20 68 28	jsr $2868			jsr 	EvaluateLevel
.2a39	20 17 28	jsr $2817			jsr 	DereferenceOne
.2a3c	60		rts				rts
.2a3d					EvaluateNumericTerm:
.2a3d	20 34 2a	jsr $2a34			jsr 	EvaluateTerm
.2a40	b5 40		lda $40,x			lda 	esType,x
.2a42	0a		asl a				asl 	a 							; see if it's a string.
.2a43	30 09		bmi $2a4e			bmi 	ENTType
.2a45	60		rts				rts
.2a46					EvaluateIntegerTerm:
.2a46	20 34 2a	jsr $2a34			jsr 	EvaluateTerm
.2a49	b5 40		lda $40,x			lda 	esType,x
.2a4b	d0 01		bne $2a4e			bne 	ENTType
.2a4d	60		rts				rts
.2a4e					ENTType:
.2a4e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a50	20 e0 14	jsr $14e0		jsr	errorHandler
.2a53					EvaluateRoot:
.2a53	a2 00		ldx #$00			ldx 	#0
.2a55					Evaluate:
.2a55	a9 00		lda #$00			lda 	#0
.2a57	20 68 28	jsr $2868			jsr 	EvaluateLevel
.2a5a	20 17 28	jsr $2817			jsr 	DereferenceOne
.2a5d	60		rts				rts
.2a5e					EvaluateNumeric:
.2a5e	20 55 2a	jsr $2a55			jsr 	Evaluate
.2a61	b5 40		lda $40,x			lda 	esType,x
.2a63	0a		asl a				asl 	a 							; see if it's a string.
.2a64	30 e8		bmi $2a4e			bmi 	ENTType
.2a66	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2a67	4a		lsr a				lsr 	a
.2a68	60		rts				rts
.2a69					EvaluateString:
.2a69	20 55 2a	jsr $2a55			jsr 	Evaluate
.2a6c	b5 40		lda $40,x			lda 	esType,x
.2a6e	0a		asl a				asl 	a 							; see if it's a string.
.2a6f	10 dd		bpl $2a4e			bpl 	ENTType
.2a71	60		rts				rts
.2a72					EvaluateRootInteger:
.2a72	a2 00		ldx #$00			ldx 	#0
.2a74					EvaluateInteger:
.2a74	20 55 2a	jsr $2a55			jsr 	Evaluate
.2a77	b5 40		lda $40,x			lda 	esType,x
.2a79	d0 d3		bne $2a4e			bne 	ENTType
.2a7b	60		rts				rts
.2a7c					EvaluateSmallInteger:
.2a7c	20 74 2a	jsr $2a74			jsr 	EvaluateInteger
.2a7f	b5 50		lda $50,x			lda 	esInt1,x
.2a81	15 58		ora $58,x			ora 	esInt2,x
.2a83	15 60		ora $60,x			ora 	esInt3,x
.2a85	d0 03		bne $2a8a			bne 	_ESIValue
.2a87	b5 48		lda $48,x			lda 	esInt0,x
.2a89	60		rts				rts
.2a8a					_ESIValue:
.2a8a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a8c	20 e0 14	jsr $14e0		jsr	errorHandler
.2a8f					LinkEvaluate:
.2a8f	aa		tax				tax
.2a90	20 55 2a	jsr $2a55			jsr 	Evaluate
.2a93	8a		txa				txa
.2a94	60		rts				rts
.2a95					LinkEvaluateTerm:
.2a95	aa		tax				tax
.2a96	20 34 2a	jsr $2a34			jsr 	EvaluateTerm
.2a99	8a		txa				txa
.2a9a	60		rts				rts
.2a9b					LinkEvaluateInteger:
.2a9b	aa		tax				tax
.2a9c	20 74 2a	jsr $2a74			jsr 	EvaluateInteger
.2a9f	8a		txa				txa
.2aa0	60		rts				rts
.2aa1					LinkEvaluateSmallInt:
.2aa1	aa		tax				tax
.2aa2	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger
.2aa5	8a		txa				txa
.2aa6	60		rts				rts
.2aa7					EvaluateReference:
.2aa7	ad a4 29	lda $29a4			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2aaa	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2aab	e9 01		sbc #$01			sbc 	#1
.2aad	20 68 28	jsr $2868			jsr 	EvaluateLevel
.2ab0	b5 40		lda $40,x			lda 	esType,x
.2ab2	10 01		bpl $2ab5			bpl 	_ERFail
.2ab4	60		rts				rts
.2ab5					_ERFail:
.2ab5	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2ab7	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2aba					UnaryLen:
.2aba	20 c8 2a	jsr $2ac8			jsr 	ULStart
.2abd					ULFinish:
.2abd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2abf	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2ac1	20 14 30	jsr $3014			jsr 	MInt32Set8Bit 				; write it out.
.2ac4	20 78 30	jsr $3078			jsr 	CheckRightParen
.2ac7	60		rts				rts
.2ac8	20 69 2a	jsr $2a69	ULStart:jsr 	EvaluateString
.2acb	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2acd	85 2a		sta $2a				sta 	temp0
.2acf	b5 50		lda $50,x			lda 	esInt1,x
.2ad1	85 2b		sta $2b				sta 	temp0+1
.2ad3	84 32		sty $32				sty 	tempShort 					; get length
.2ad5	a0 00		ldy #$00			ldy 	#0
.2ad7	60		rts				rts
.2ad8					UnaryAsc:
.2ad8	20 c8 2a	jsr $2ac8			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2adb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2add	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2ade	c9 00		cmp #$00			cmp 	#0
.2ae0	d0 db		bne $2abd			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2ae2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ae4	20 e0 14	jsr $14e0		jsr	errorHandler
.2ae7					UnaryAbs:
.2ae7	20 5e 2a	jsr $2a5e			jsr 	EvaluateNumeric 			; some numeric value
.2aea	b0 07		bcs $2af3			bcs 	_UAFloat 					; CS then float, so use that function
.2aec	20 ba 2f	jsr $2fba			jsr 	MInt32Absolute 				; int version
.2aef	20 78 30	jsr $3078			jsr 	CheckRightParen
.2af2	60		rts				rts
.2af3					_UAFloat:
.2af3	8a		txa				txa 								; float version
.2af4	a2 00		ldx #$00		ldx	#0
.2af6	20 06 19	jsr $1906		jsr	floatingpointHandler
.2af9	aa		tax				tax
.2afa	20 78 30	jsr $3078			jsr 	CheckRightParen
.2afd	60		rts				rts
.2afe					UnarySgn:
.2afe	20 5e 2a	jsr $2a5e			jsr 	EvaluateNumeric 			; same as above but sign of value
.2b01	b0 07		bcs $2b0a			bcs 	_USFloat
.2b03	20 f2 2f	jsr $2ff2			jsr 	MInt32Sign
.2b06	20 78 30	jsr $3078			jsr 	CheckRightParen
.2b09	60		rts				rts
.2b0a					_USFloat:
.2b0a	8a		txa				txa
.2b0b	a2 0e		ldx #$0e		ldx	#14
.2b0d	20 06 19	jsr $1906		jsr	floatingpointHandler
.2b10	aa		tax				tax
.2b11	20 78 30	jsr $3078			jsr 	CheckRightParen
.2b14	60		rts				rts
.2b15					UnaryPeek:
.2b15	20 41 2b	jsr $2b41			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2b18	4c 35 2b	jmp $2b35			jmp 	PDLByte0
.2b1b					UnaryDeek:
.2b1b	20 41 2b	jsr $2b41			jsr 	PDLCode
.2b1e	4c 2f 2b	jmp $2b2f			jmp 	PDLByte1
.2b21					UnaryLeek:
.2b21	20 41 2b	jsr $2b41			jsr 	PDLCode
.2b24	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2b26	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b28	95 60		sta $60,x			sta 	esInt3,x
.2b2a	88		dey				dey
.2b2b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b2d	95 58		sta $58,x			sta 	esInt2,x
.2b2f					PDLByte1:
.2b2f	a0 01		ldy #$01			ldy 	#1
.2b31	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b33	95 50		sta $50,x			sta 	esInt1,x
.2b35					PDLByte0:
.2b35	a0 00		ldy #$00			ldy 	#0
.2b37	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b39	95 48		sta $48,x			sta 	esInt0,x
.2b3b	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2b3d	20 78 30	jsr $3078			jsr 	CheckRightParen 			; check right and return
.2b40	60		rts				rts
.2b41					PDLCode:
.2b41	20 74 2a	jsr $2a74			jsr 	EvaluateInteger 			; some address
.2b44	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2b46	85 2a		sta $2a				sta 	temp0
.2b48	b5 50		lda $50,x			lda 	esInt1,x
.2b4a	85 2b		sta $2b				sta 	temp0+1
.2b4c	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2b4e	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2b50	95 58		sta $58,x			sta 	esInt2,x
.2b52	95 60		sta $60,x			sta 	esInt3,x
.2b54	84 32		sty $32				sty 	tempShort 					; save Y
.2b56	60		rts				rts
.2b57					Unary_Random:
.2b57	20 35 30	jsr $3035			jsr 	MInt32Random 				; generate random number.
.2b5a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2b5c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b5e	f0 08		beq $2b68			beq 	_URExit
.2b60	e8		inx				inx 								; load range 0..r-1 into +1
.2b61	20 74 2a	jsr $2a74			jsr 	EvaluateInteger
.2b64	ca		dex				dex
.2b65	20 58 2e	jsr $2e58			jsr 	MInt32Modulus 				; calculate random % modulus
.2b68					_URExit:
.2b68	20 78 30	jsr $3078			jsr 	CheckRightParen 			; check right and return
.2b6b	60		rts				rts
.2b6c					Unary_Min:
.2b6c	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2b6e	d0 02		bne $2b72			bne 	UnaryMBody
.2b70					Unary_Max:
.2b70	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2b72					UnaryMBody:
.2b72	48		pha				pha 								; save comparator on stack, shows min or max
.2b73	20 55 2a	jsr $2a55			jsr 	Evaluate 					; get the first thing to check
.2b76					_UnaryMLoop:
.2b76	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2b78	c8		iny				iny
.2b79	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b7b	f0 09		beq $2b86			beq 	_UnaryMExit
.2b7d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2b7f	f0 07		beq $2b88			beq 	_UnaryMCompare
.2b81	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b83	20 e0 14	jsr $14e0		jsr	errorHandler
.2b86					_UnaryMExit:
.2b86	68		pla				pla 								; done so throw comparator and return.
.2b87	60		rts				rts
.2b88					_UnaryMCompare:
.2b88	e8		inx				inx 								; get the 2nd thing to evaluate
.2b89	20 55 2a	jsr $2a55			jsr 	Evaluate
.2b8c	ca		dex				dex
.2b8d	20 1a 27	jsr $271a			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2b90	85 32		sta $32				sta 	tempShort 					; save result
.2b92	68		pla				pla 								; get what we need
.2b93	48		pha				pha
.2b94	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2b96	d0 de		bne $2b76			bne 	_UnaryMLoop 				; no, try another value.
.2b98	20 05 30	jsr $3005			jsr 	MInt32False 				; promote 2nd to 1st.
.2b9b	20 e9 2e	jsr $2ee9			jsr 	MInt32Add
.2b9e	4c 76 2b	jmp $2b76			jmp 	_UnaryMLoop
.2ba1					Unary_Page:
.2ba1	20 05 30	jsr $3005			jsr 	MInt32False 				; zero
.2ba4	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2ba7	95 48		sta $48,x			sta 	esInt0,x
.2ba9	ad c9 0a	lda $0ac9			lda 	basePage+1
.2bac	95 50		sta $50,x			sta 	esInt1,x
.2bae	60		rts				rts
.2baf					UnaryReference:
.2baf	a9 0f		lda #$0f			lda 	#15
.2bb1	20 68 28	jsr $2868			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2bb4	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2bb6	10 05		bpl $2bbd			bpl 	UType
.2bb8	a9 00		lda #$00			lda 	#0 							; make it an integer
.2bba	95 40		sta $40,x			sta 	esType,x
.2bbc	60		rts				rts
.2bbd					UType:
.2bbd	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2bbf	20 e0 14	jsr $14e0		jsr	errorHandler
.2bc2					UnaryHexMarker:
.2bc2	4c 46 2a	jmp $2a46			jmp 	EvaluateIntegerTerm
.2bc5					UnaryComplement:
.2bc5	20 46 2a	jsr $2a46			jsr 	EvaluateIntegerTerm
.2bc8	20 d9 2f	jsr $2fd9			jsr 	MInt32Not
.2bcb	60		rts				rts
.2bcc					UnaryIntToFloat:
.2bcc	20 5e 2a	jsr $2a5e			jsr 	EvaluateNumeric				; some number
.2bcf	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.2bd1	d0 0b		bne $2bde			bne 	_UIFExit
.2bd3	8a		txa				txa 								; convert and set type
.2bd4	a2 1a		ldx #$1a		ldx	#26
.2bd6	20 06 19	jsr $1906		jsr	floatingpointHandler
.2bd9	aa		tax				tax
.2bda	a9 01		lda #$01			lda 	#1
.2bdc	95 40		sta $40,x			sta 	esType,x
.2bde					_UIFExit:
.2bde	60		rts				rts
.2bdf					UnaryFloatToInt:
.2bdf	20 5e 2a	jsr $2a5e			jsr 	EvaluateNumeric 			; the number
.2be2	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2be4	f0 0b		beq $2bf1			beq 	_UFIExit
.2be6	8a		txa				txa 								; convert to int
.2be7	a2 12		ldx #$12		ldx	#18
.2be9	20 06 19	jsr $1906		jsr	floatingpointHandler
.2bec	aa		tax				tax
.2bed	a9 00		lda #$00			lda 	#0 							; set type
.2bef	95 40		sta $40,x			sta 	esType,x
.2bf1					_UFIExit:
.2bf1	60		rts				rts
.2bf2					UnaryAlloc:
.2bf2	e8		inx				inx 								; evaluate memory required
.2bf3	20 74 2a	jsr $2a74			jsr 	EvaluateInteger
.2bf6	20 78 30	jsr $3078			jsr 	CheckRightParen
.2bf9	ca		dex				dex
.2bfa	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2bfc	15 61		ora $61,x			ora 	esInt3+1,x
.2bfe	d0 1d		bne $2c1d			bne 	_UABadValue
.2c00	20 05 30	jsr $3005			jsr 	MInt32False					; zero return.
.2c03	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2c05	95 50		sta $50,x			sta 	esInt1,x
.2c07	a5 35		lda $35				lda 	lowMemory
.2c09	95 48		sta $48,x			sta 	esInt0,x
.2c0b	18		clc				clc 								; add alloc required.
.2c0c	75 49		adc $49,x			adc 	esInt0+1,x
.2c0e	85 35		sta $35				sta 	lowMemory
.2c10	a5 36		lda $36				lda 	lowMemory+1
.2c12	75 51		adc $51,x			adc 	esInt1+1,x
.2c14	85 36		sta $36				sta 	lowMemory+1
.2c16	b0 05		bcs $2c1d			bcs		_UABadValue 				; overflow definitely bad.
.2c18	c5 34		cmp $34				cmp 	highMemory+1
.2c1a	b0 01		bcs $2c1d			bcs 	_UABadValue 				; out of memory bad.
.2c1c	60		rts				rts
.2c1d					_UABadValue:
.2c1d	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.2c1f	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.2c22					UnaryTimer:
.2c22	20 78 30	jsr $3078			jsr 	CheckRightParen 			; no parameters
.2c25	98		tya				tya
.2c26	48		pha				pha
.2c27	20 2c 30	jsr $302c			jsr 	MInt32Zero 					; zero result
.2c2a	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2c2c	a2 1c		ldx #$1c		ldx	#28
.2c2e	20 bf 14	jsr $14bf		jsr	deviceHandler
.2c31	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2c33	95 48		sta $48,x			sta 	esInt0,x
.2c35	98		tya				tya
.2c36	95 50		sta $50,x			sta 	esInt1,x
.2c38	68		pla				pla
.2c39	a8		tay				tay
.2c3a	60		rts				rts
.2c3b					UnaryInkey:
.2c3b	20 78 30	jsr $3078			jsr 	CheckRightParen
.2c3e	86 2a		stx $2a				stx 	temp0
.2c40	a2 0a		ldx #$0a		ldx	#10
.2c42	20 bf 14	jsr $14bf		jsr	deviceHandler
.2c45	a6 2a		ldx $2a				ldx 	temp0
.2c47	20 14 30	jsr $3014			jsr 	MInt32Set8Bit
.2c4a	60		rts				rts
.2c4b					UnaryGet:
.2c4b	20 78 30	jsr $3078			jsr 	CheckRightParen
.2c4e	86 2a		stx $2a				stx 	temp0
.2c50					_UGLoop:
.2c50	a2 00		ldx #$00		ldx	#0
.2c52	20 bf 14	jsr $14bf		jsr	deviceHandler
.2c55	a2 0a		ldx #$0a		ldx	#10
.2c57	20 bf 14	jsr $14bf		jsr	deviceHandler
.2c5a	c9 00		cmp #$00			cmp 	#0
.2c5c	f0 f2		beq $2c50			beq 	_UGLoop
.2c5e	a6 2a		ldx $2a				ldx 	temp0
.2c60	20 14 30	jsr $3014			jsr 	MInt32Set8Bit
.2c63	60		rts				rts
.2c64					UnaryGetString:
.2c64	20 4b 2c	jsr $2c4b			jsr 	UnaryGet
.2c67					UGSDoChr:
.2c67	4c b8 2c	jmp $2cb8			jmp 	ChrCode
.2c6a					UnaryInkeyString:
.2c6a	20 3b 2c	jsr $2c3b			jsr 	UnaryInkey
.2c6d	b5 48		lda $48,x			lda 	esInt0,x
.2c6f	d0 f6		bne $2c67			bne 	UGSDoChr
.2c71	8a		txa				txa
.2c72	a2 06		ldx #$06		ldx	#6
.2c74	20 25 34	jsr $3425		jsr	stringHandler
.2c77	aa		tax				tax
.2c78	60		rts				rts
.2c79					UnarySys:
.2c79	20 74 2a	jsr $2a74			jsr 	EvaluateInteger 				; get the address
.2c7c	20 78 30	jsr $3078			jsr 	CheckRightParen
.2c7f	20 d8 1d	jsr $1dd8			jsr 	TOSToTemp0 						; copy call address to temp0
.2c82	8a		txa				txa
.2c83	48		pha				pha
.2c84	98		tya				tya
.2c85	48		pha				pha
.2c86	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2c89	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2c8c	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2c8f	20 9e 2c	jsr $2c9e			jsr 	_CallTemp0
.2c92	85 32		sta $32				sta 	tempShort 						; restore YX
.2c94	68		pla				pla
.2c95	a8		tay				tay
.2c96	68		pla				pla
.2c97	aa		tax				tax
.2c98	a5 32		lda $32				lda 	tempShort
.2c9a	20 14 30	jsr $3014			jsr 	MInt32Set8Bit 					; return result.
.2c9d	60		rts				rts
.2c9e					_CallTemp0:
.2c9e	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2ca1					UnaryMem:
.2ca1	20 05 30	jsr $3005			jsr 	MInt32False 					; set to false (e.g. 0)
.2ca4	38		sec				sec
.2ca5	a5 33		lda $33				lda 	highMemory 						; calculate value
.2ca7	e5 35		sbc $35				sbc 	lowMemory
.2ca9	95 48		sta $48,x			sta 	esInt0,x
.2cab	a5 34		lda $34				lda 	highMemory+1
.2cad	e5 36		sbc $36				sbc 	lowMemory+1
.2caf	95 50		sta $50,x			sta 	esInt1,x
.2cb1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.2cb2					ExecChr:
.2cb2	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger		; character number 0-255
.2cb5	20 78 30	jsr $3078			jsr 	CheckRightParen				; right bracket
.2cb8					ChrCode:
.2cb8	98		tya				tya
.2cb9	48		pha				pha
.2cba	8a		txa				txa 								; A = stack
.2cbb	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2cbd	a2 00		ldx #$00		ldx	#0
.2cbf	20 25 34	jsr $3425		jsr	stringHandler
.2cc2	aa		tax				tax 								; X = stack
.2cc3	68		pla				pla
.2cc4	a8		tay				tay
.2cc5	60		rts				rts
.2cc6					ExecLower:
.2cc6	38		sec				sec 								; set carry is lower
.2cc7	b0 01		bcs $2cca			bcs 	ExecUpperLower
.2cc9					ExecUpper:
.2cc9	18		clc				clc 								; clear carry is upper
.2cca					ExecUpperLower:
.2cca	08		php				php 								; save carry
.2ccb	20 69 2a	jsr $2a69			jsr 	EvaluateString 				; string to stack,X
.2cce	20 78 30	jsr $3078			jsr 	CheckRightParen 			; check closing right bracket.
.2cd1	28		plp				plp 								; restore carry, save Y
.2cd2	98		tya				tya
.2cd3	48		pha				pha
.2cd4	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2cd6	2a		rol a				rol 	a
.2cd7	a8		tay				tay 								; now in Y
.2cd8	8a		txa				txa 								; do the substring and exit.
.2cd9	a2 0a		ldx #$0a		ldx	#10
.2cdb	20 25 34	jsr $3425		jsr	stringHandler
.2cde	aa		tax				tax
.2cdf	68		pla				pla
.2ce0	a8		tay				tay
.2ce1	60		rts				rts
.2ce2					ExecLeft:
.2ce2	20 69 2a	jsr $2a69			jsr 	EvaluateString 				; string to stack,X
.2ce5	20 85 30	jsr $3085			jsr 	CheckComma
.2ce8	e8		inx				inx
.2ce9	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2ceb	20 14 30	jsr $3014			jsr 	MInt32Set8Bit
.2cee	e8		inx				inx
.2cef	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2cf2					ExecSubstring:
.2cf2	ca		dex				dex 								; fix up X
.2cf3	ca		dex				dex
.2cf4	20 78 30	jsr $3078			jsr 	CheckRightParen 			; check closing right bracket.
.2cf7	8a		txa				txa 								; do the substring and exit.
.2cf8	a2 0c		ldx #$0c		ldx	#12
.2cfa	20 25 34	jsr $3425		jsr	stringHandler
.2cfd	aa		tax				tax
.2cfe	60		rts				rts
.2cff					ExecMid:
.2cff	20 69 2a	jsr $2a69			jsr 	EvaluateString 				; string to stack,X
.2d02	20 85 30	jsr $3085			jsr 	CheckComma
.2d05	e8		inx				inx
.2d06	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2d09	c9 00		cmp #$00			cmp 	#0
.2d0b	f0 15		beq $2d22			beq 	_EMValue
.2d0d	e8		inx				inx
.2d0e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2d10	20 14 30	jsr $3014			jsr 	MInt32Set8Bit
.2d13	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2d15	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2d17	f0 d9		beq $2cf2			beq 	ExecSubString
.2d19	20 85 30	jsr $3085			jsr 	CheckComma
.2d1c	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2d1f	4c f2 2c	jmp $2cf2			jmp 	ExecSubString
.2d22					_EMValue:
.2d22	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2d24	20 e0 14	jsr $14e0		jsr	errorHandler
.2d27					ExecRight:
.2d27	20 69 2a	jsr $2a69			jsr 	EvaluateString 				; string to stack,X
.2d2a	20 85 30	jsr $3085			jsr 	CheckComma
.2d2d	e8		inx				inx
.2d2e	20 7c 2a	jsr $2a7c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2d31	ca		dex				dex
.2d32	98		tya				tya
.2d33	48		pha				pha
.2d34	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2d36	85 2a		sta $2a				sta 	temp0
.2d38	b5 50		lda $50,x			lda 	esInt1,x
.2d3a	85 2b		sta $2b				sta 	temp0+1
.2d3c	a0 00		ldy #$00			ldy 	#0 							; point to length
.2d3e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2d40	18		clc				clc 								; add 1.
.2d41	69 01		adc #$01			adc 	#1
.2d43	38		sec				sec
.2d44	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2d46	f0 02		beq $2d4a			beq		_ERMake1 					; if zero, make it 1.
.2d48	b0 02		bcs $2d4c			bcs		_EROkay
.2d4a					_ERMake1:
.2d4a	a9 01		lda #$01			lda 	#1 							; start position.
.2d4c					_EROkay:
.2d4c	e8		inx				inx 								; set start pos.
.2d4d	95 48		sta $48,x			sta 	esInt0,x
.2d4f	e8		inx				inx
.2d50	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2d52	20 14 30	jsr $3014			jsr 	MInt32Set8Bit
.2d55	68		pla				pla
.2d56	a8		tay				tay
.2d57	4c f2 2c	jmp $2cf2			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2d5a					MInt32And:
.2d5a	b5 48		lda $48,x			lda 	esInt0,x
.2d5c	35 49		and $49,x			and 	esInt0+1,x
.2d5e	95 48		sta $48,x			sta 	esInt0,x
.2d60	b5 50		lda $50,x			lda 	esInt1,x
.2d62	35 51		and $51,x			and 	esInt1+1,x
.2d64	95 50		sta $50,x			sta 	esInt1,x
.2d66	b5 58		lda $58,x			lda 	esInt2,x
.2d68	35 59		and $59,x			and 	esInt2+1,x
.2d6a	95 58		sta $58,x			sta 	esInt2,x
.2d6c	b5 60		lda $60,x			lda 	esInt3,x
.2d6e	35 61		and $61,x			and 	esInt3+1,x
.2d70	95 60		sta $60,x			sta 	esInt3,x
.2d72	60		rts				rts
.2d73					MInt32Or:
.2d73	b5 48		lda $48,x			lda 	esInt0,x
.2d75	15 49		ora $49,x			ora 	esInt0+1,x
.2d77	95 48		sta $48,x			sta 	esInt0,x
.2d79	b5 50		lda $50,x			lda 	esInt1,x
.2d7b	15 51		ora $51,x			ora 	esInt1+1,x
.2d7d	95 50		sta $50,x			sta 	esInt1,x
.2d7f	b5 58		lda $58,x			lda 	esInt2,x
.2d81	15 59		ora $59,x			ora 	esInt2+1,x
.2d83	95 58		sta $58,x			sta 	esInt2,x
.2d85	b5 60		lda $60,x			lda 	esInt3,x
.2d87	15 61		ora $61,x			ora 	esInt3+1,x
.2d89	95 60		sta $60,x			sta 	esInt3,x
.2d8b	60		rts				rts
.2d8c					MInt32Xor:
.2d8c	b5 48		lda $48,x			lda 	esInt0,x
.2d8e	55 49		eor $49,x			eor 	esInt0+1,x
.2d90	95 48		sta $48,x			sta 	esInt0,x
.2d92	b5 50		lda $50,x			lda 	esInt1,x
.2d94	55 51		eor $51,x			eor 	esInt1+1,x
.2d96	95 50		sta $50,x			sta 	esInt1,x
.2d98	b5 58		lda $58,x			lda 	esInt2,x
.2d9a	55 59		eor $59,x			eor 	esInt2+1,x
.2d9c	95 58		sta $58,x			sta 	esInt2,x
.2d9e	b5 60		lda $60,x			lda 	esInt3,x
.2da0	55 61		eor $61,x			eor 	esInt3+1,x
.2da2	95 60		sta $60,x			sta 	esInt3,x
.2da4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2da5					MInt32Compare:
.2da5	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2da7	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2da9	d0 13		bne $2dbe			bne 	MInt32Compare2
.2dab	b5 50		lda $50,x			lda 	esInt1,x
.2dad	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2daf	d0 0d		bne $2dbe			bne 	MInt32Compare2
.2db1	b5 58		lda $58,x			lda 	esInt2,x
.2db3	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2db5	d0 07		bne $2dbe			bne 	MInt32Compare2
.2db7	b5 60		lda $60,x			lda 	esInt3,x
.2db9	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2dbb	d0 01		bne $2dbe			bne 	MInt32Compare2
.2dbd	60		rts				rts
.2dbe					MInt32Compare2:
.2dbe	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2dc0	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2dc2	b5 50		lda $50,x			lda		esInt1,x
.2dc4	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2dc6	b5 58		lda $58,x			lda		esInt2,x
.2dc8	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2dca	b5 60		lda $60,x			lda		esInt3,x
.2dcc	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2dce	50 02		bvc $2dd2			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2dd0	49 80		eor #$80			eor 	#$80
.2dd2					_I32LNoOverflow
.2dd2	30 03		bmi $2dd7			bmi 	MInt32CLess					; if -ve then return $FF
.2dd4	a9 01		lda #$01			lda 	#$01						; else return $01
.2dd6	60		rts				rts
.2dd7					MInt32CLess:
.2dd7	a9 ff		lda #$ff			lda 	#$FF
.2dd9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2dda					MInt32SDivide:
.2dda	98		tya				tya  								; save Y, which is the count of negations
.2ddb	48		pha				pha
.2ddc	a0 00		ldy #$00			ldy 	#0 							; zero count
.2dde	20 f6 2d	jsr $2df6			jsr 	_MInt32SRemSign 			; unsign TOS
.2de1	e8		inx				inx 								; unsign TOS+1
.2de2	20 f6 2d	jsr $2df6			jsr 	_MInt32SRemSign
.2de5	ca		dex				dex
.2de6	98		tya				tya 								; save sign count on stack
.2de7	48		pha				pha
.2de8	20 ff 2d	jsr $2dff			jsr 	MInt32UDivide 				; unsigned division
.2deb	68		pla				pla 								; get sign count back
.2dec	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2dee	f0 03		beq $2df3			beq 	_I32SNoNeg
.2df0	20 bf 2f	jsr $2fbf			jsr 	MInt32Negate
.2df3					_I32SNoNeg:
.2df3	68		pla				pla 								; restoe Y and exit
.2df4	a8		tay				tay
.2df5	60		rts				rts
.2df6					_MInt32SRemSign:
.2df6	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2df8	10 04		bpl $2dfe			bpl 	_MInt32SRSExit
.2dfa	c8		iny				iny 								; increment the sign count
.2dfb	20 bf 2f	jsr $2fbf			jsr 	MInt32Negate 				; negate the value.
.2dfe					_MInt32SRSExit:
.2dfe	60		rts				rts
.2dff					MInt32UDivide:
.2dff	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2e01	15 51		ora $51,x			ora 	esInt1+1,x
.2e03	15 52		ora $52,x			ora 	esInt1+2,x
.2e05	15 53		ora $53,x			ora 	esInt1+3,x
.2e07	f0 4a		beq $2e53			beq 	_MInt32DZero
.2e09	e8		inx				inx 								; clear A
.2e0a	e8		inx				inx
.2e0b	20 05 30	jsr $3005			jsr 	MInt32False
.2e0e	ca		dex				dex
.2e0f	ca		dex				dex
.2e10	98		tya				tya 								; save Y on the stack
.2e11	48		pha				pha
.2e12	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2e14					_MInt32UDLoop:
.2e14	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2e16	36 50		rol $50,x			rol 	esInt1,x
.2e18	36 58		rol $58,x			rol 	esInt2,x
.2e1a	36 60		rol $60,x			rol 	esInt3,x
.2e1c	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2e1e	36 52		rol $52,x			rol 	esInt1+2,x
.2e20	36 5a		rol $5a,x			rol 	esInt2+2,x
.2e22	36 62		rol $62,x			rol 	esInt3+2,x
.2e24	38		sec				sec 								; calculate A-M saving result on the stack
.2e25	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2e27	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2e29	48		pha				pha
.2e2a	b5 52		lda $52,x			lda 	esInt1+2,x
.2e2c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2e2e	48		pha				pha
.2e2f	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2e31	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2e33	48		pha				pha
.2e34	b5 62		lda $62,x			lda 	esInt3+2,x
.2e36	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2e38	90 10		bcc $2e4a			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2e3a	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2e3c	68		pla				pla
.2e3d	95 5a		sta $5a,x			sta 	esInt2+2,x
.2e3f	68		pla				pla
.2e40	95 52		sta $52,x			sta 	esInt1+2,x
.2e42	68		pla				pla
.2e43	95 4a		sta $4a,x			sta 	esInt0+2,x
.2e45	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2e47	4c 4d 2e	jmp $2e4d			jmp 	_MInt32Next 					; do the next iteration
.2e4a					_MInt32NoSubtract:
.2e4a	68		pla				pla
.2e4b	68		pla				pla
.2e4c	68		pla				pla
.2e4d					_MInt32Next:
.2e4d	88		dey				dey 								; do this 32 times.
.2e4e	d0 c4		bne $2e14			bne 	_MInt32UDLoop
.2e50	68		pla				pla 								; restore Y and exit
.2e51	a8		tay				tay
.2e52	60		rts				rts
.2e53					_MInt32DZero:
.2e53	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2e55	20 e0 14	jsr $14e0		jsr	errorHandler
.2e58					MInt32Modulus:
.2e58	20 ff 2d	jsr $2dff			jsr 	MInt32UDivide 				; do the division.
.2e5b	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2e5d	95 60		sta $60,x			sta 	esInt3,x
.2e5f	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2e61	95 58		sta $58,x			sta 	esInt2,x
.2e63	b5 52		lda $52,x			lda 	esInt1+2,x
.2e65	95 50		sta $50,x			sta 	esInt1,x
.2e67	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2e69	95 48		sta $48,x			sta 	esInt0,x
.2e6b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c14					fs32Length:
>0c14							.fill 	1
.2e6c					LinkInt32FromString:
.2e6c	aa		tax				tax
.2e6d	98		tya				tya
.2e6e	20 73 2e	jsr $2e73			jsr 	MInt32FromString
.2e71	8a		txa				txa
.2e72	60		rts				rts
.2e73					MInt32FromString:
.2e73	85 32		sta $32				sta 	tempShort 					; save base
.2e75	98		tya				tya
.2e76	48		pha				pha
.2e77	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2e79	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e7b	8d 14 0c	sta $0c14			sta 	fs32Length
.2e7e	f0 65		beq $2ee5			beq 	_I32FSFail2					; fail if length zero.
.2e80	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2e82	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2e84	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2e86	d0 09		bne $2e91			bne 	_I32FSNotNegative
.2e88	ad 14 0c	lda $0c14			lda 	fs32Length 					; get length back.
.2e8b	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2e8d	f0 56		beq $2ee5			beq 	_I32FSFail2
.2e8f	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2e91					_I32FSNotNegative:
.2e91	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2e93	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2e95	d0 02		bne $2e99			bne 	_I32FSNN2
.2e97	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2e99					_I32FSNN2:
.2e99	48		pha				pha 								; save base + final sign on stack.
.2e9a	20 05 30	jsr $3005			jsr 	MInt32False 				; zero the return value.
.2e9d					_I32FSMainLoop:
.2e9d	68		pla				pla 								; get the base back into tempShort
.2e9e	48		pha				pha
.2e9f	29 7f		and #$7f			and 	#$7F
.2ea1	85 32		sta $32				sta 	tempShort
.2ea3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2ea5	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2ea7	90 02		bcc $2eab			bcc 	_I32FSNotLC
.2ea9	e9 20		sbc #$20			sbc 	#32
.2eab					_I32FSNotLC:
.2eab	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2eac	e9 30		sbc #$30			sbc 	#"0"
.2eae	90 34		bcc $2ee4			bcc 	_I32FSFail 					; nothing more to do.
.2eb0	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2eb2	90 06		bcc $2eba			bcc 	_I32FSValidate
.2eb4	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2eb6	90 2c		bcc $2ee4			bcc 	_I32FSFail
.2eb8	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2eba					_I32FSValidate:
.2eba	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2ebc	b0 26		bcs $2ee4			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2ebe	48		pha				pha 								; save the new digit value.
.2ebf	e8		inx				inx 								; put base into next slot up on stack
.2ec0	a5 32		lda $32				lda 	tempShort
.2ec2	20 14 30	jsr $3014			jsr 	MInt32Set8Bit
.2ec5	ca		dex				dex
.2ec6	20 1d 2f	jsr $2f1d			jsr 	MInt32Multiply 				; multiply current by the base
.2ec9	e8		inx				inx
.2eca	68		pla				pla  								; put additive into next slot
.2ecb	20 14 30	jsr $3014			jsr 	MInt32Set8Bit
.2ece	ca		dex				dex
.2ecf	20 e9 2e	jsr $2ee9			jsr 	MInt32Add 					; and add it
.2ed2	c8		iny				iny 								; bump the character pointer
.2ed3	cc 14 0c	cpy $0c14			cpy 	fs32Length 					; until > length.
.2ed6	f0 c5		beq $2e9d			beq 	_I32FSMainLoop
.2ed8	90 c3		bcc $2e9d			bcc 	_I32FSMainLoop
.2eda					_I32FSDone:
.2eda	68		pla				pla 								; get base/final sign back
.2edb	10 03		bpl $2ee0			bpl 	_I32FSNN3
.2edd	20 bf 2f	jsr $2fbf			jsr 	MInt32Negate 				; negate the result.
.2ee0					_I32FSNN3:
.2ee0	68		pla				pla
.2ee1	a8		tay				tay
.2ee2	38		sec				sec
.2ee3	60		rts				rts
.2ee4					_I32FSFail:
.2ee4	68		pla				pla
.2ee5					_I32FSFail2:
.2ee5	68		pla				pla
.2ee6	a8		tay				tay
.2ee7	18		clc				clc
.2ee8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2ee9					MInt32Add:
.2ee9	18		clc				clc
.2eea	b5 48		lda $48,x			lda 	esInt0,x
.2eec	75 49		adc $49,x			adc 	esInt0+1,x
.2eee	95 48		sta $48,x			sta 	esInt0,x
.2ef0	b5 50		lda $50,x			lda 	esInt1,x
.2ef2	75 51		adc $51,x			adc 	esInt1+1,x
.2ef4	95 50		sta $50,x			sta 	esInt1,x
.2ef6	b5 58		lda $58,x			lda 	esInt2,x
.2ef8	75 59		adc $59,x			adc 	esInt2+1,x
.2efa	95 58		sta $58,x			sta 	esInt2,x
.2efc	b5 60		lda $60,x			lda 	esInt3,x
.2efe	75 61		adc $61,x			adc 	esInt3+1,x
.2f00	95 60		sta $60,x			sta 	esInt3,x
.2f02	60		rts				rts
.2f03					MInt32Sub:
.2f03	38		sec				sec
.2f04	b5 48		lda $48,x			lda 	esInt0,x
.2f06	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2f08	95 48		sta $48,x			sta 	esInt0,x
.2f0a	b5 50		lda $50,x			lda 	esInt1,x
.2f0c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2f0e	95 50		sta $50,x			sta 	esInt1,x
.2f10	b5 58		lda $58,x			lda 	esInt2,x
.2f12	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2f14	95 58		sta $58,x			sta 	esInt2,x
.2f16	b5 60		lda $60,x			lda 	esInt3,x
.2f18	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2f1a	95 60		sta $60,x			sta 	esInt3,x
.2f1c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2f1d					MInt32Multiply:
.2f1d	e8		inx				inx 								; copy 2nd -> 3rd
.2f1e	20 43 2f	jsr $2f43			jsr 	MInt32CopyUp
.2f21	ca		dex				dex
.2f22	20 43 2f	jsr $2f43			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2f25	20 05 30	jsr $3005			jsr 	MInt32False 				; zero 1st.
.2f28					_I32Loop:
.2f28	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2f2a	29 01		and #$01			and 	#1
.2f2c	f0 03		beq $2f31			beq 	_I32NoAdd 					; if set
.2f2e	20 e9 2e	jsr $2ee9			jsr 	MInt32Add 					; add 2nd to 1st.
.2f31					_I32NoAdd:
.2f31	e8		inx				inx 								; shift 2nd left
.2f32	20 1a 30	jsr $301a			jsr 	MInt32ShiftLeft
.2f35	e8		inx				inx  								; shift 3rd right
.2f36	20 23 30	jsr $3023			jsr 	MInt32ShiftRight
.2f39	20 2c 30	jsr $302c			jsr 	MInt32Zero 					; check if zero.
.2f3c	08		php				php 								; save status bits
.2f3d	ca		dex				dex 	 							; point back to 1st
.2f3e	ca		dex				dex
.2f3f	28		plp				plp 								; get status bits
.2f40	d0 e6		bne $2f28			bne 	_I32Loop 					; if non-zero keep going.
.2f42	60		rts				rts
.2f43					MInt32CopyUp:
.2f43	b5 48		lda $48,x			lda 	esInt0,x
.2f45	95 49		sta $49,x			sta 	esInt0+1,x
.2f47	b5 50		lda $50,x			lda 	esInt1,x
.2f49	95 51		sta $51,x			sta 	esInt1+1,x
.2f4b	b5 58		lda $58,x			lda 	esInt2,x
.2f4d	95 59		sta $59,x			sta 	esInt2+1,x
.2f4f	b5 60		lda $60,x			lda 	esInt3,x
.2f51	95 61		sta $61,x			sta 	esInt3+1,x
.2f53	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c15					MCharCount:	.fill 	1						; count of converted characters
.2f54					MLInt32ToString:
.2f54	aa		tax				tax									; module passes stack in A, base in Y
.2f55	98		tya				tya
.2f56	20 5b 2f	jsr $2f5b			jsr 	MInt32ToString
.2f59	8a		txa				txa
.2f5a	60		rts				rts
.2f5b					MInt32ToString:
.2f5b	48		pha				pha 								; save base
.2f5c	85 32		sta $32				sta 	tempShort 					; save target base.
.2f5e	a9 00		lda #$00			lda 	#0
.2f60	8d 15 0c	sta $0c15			sta 	MCharCount 					; clear character count to 0
.2f63	98		tya				tya
.2f64	48		pha				pha
.2f65	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2f67	10 10		bpl $2f79			bpl 	_I32TSUnsigned
.2f69	48		pha				pha 								; save base on stack.
.2f6a	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2f6c	10 08		bpl $2f76			bpl 	_I32TSNoFlip
.2f6e	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2f70	20 ac 2f	jsr $2fac			jsr 	MI32WriteCharacter
.2f73	20 bf 2f	jsr $2fbf			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2f76					_I32TSNoFlip:
.2f76	68		pla				pla 								; get the base back
.2f77	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2f79					_I32TSUnsigned:
.2f79	20 87 2f	jsr $2f87			jsr 	MI32DivideWrite 			; recursive code to output string.
.2f7c	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2f7e	ad 15 0c	lda $0c15			lda 	MCharCount
.2f81	91 2a		sta ($2a),y			sta 	(temp0),y
.2f83	68		pla				pla
.2f84	a8		tay				tay
.2f85	68		pla				pla
.2f86	60		rts				rts
.2f87					MI32DivideWrite:
.2f87	48		pha				pha 								; save the divisor/base
.2f88	e8		inx				inx 								; write in the dividing position.
.2f89	20 14 30	jsr $3014			jsr 	MInt32Set8Bit
.2f8c	ca		dex				dex
.2f8d	20 ff 2d	jsr $2dff			jsr 	MInt32UDivide 				; divide number by base.
.2f90	68		pla				pla 								; get the base into Y
.2f91	a8		tay				tay
.2f92	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2f94	48		pha				pha
.2f95	20 2c 30	jsr $302c			jsr 	MInt32Zero 					; is the result zero ?
.2f98	f0 04		beq $2f9e			beq 	_I32NoRecurse 				; if so, don't recurse.
.2f9a	98		tya				tya 								; put base into A
.2f9b	20 87 2f	jsr $2f87			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2f9e					_I32NoRecurse:
.2f9e	68		pla				pla 								; get the remainder back
.2f9f	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2fa1	90 02		bcc $2fa5			bcc 	_I32NotHex
.2fa3	69 06		adc #$06			adc 	#7-1
.2fa5					_I32NotHex:
.2fa5	18		clc				clc 								; make it ASCII
.2fa6	69 30		adc #$30			adc 	#48
.2fa8	20 ac 2f	jsr $2fac			jsr 	MI32WriteCharacter 			; write the character out
.2fab	60		rts				rts 								; and exit.
.2fac					MI32WriteCharacter:
.2fac	ee 15 0c	inc $0c15			inc 	MCharCount 					; bump count (space for leading count)
.2faf	ac 15 0c	ldy $0c15			ldy 	MCharCount 					; get position
.2fb2	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2fb4	c8		iny				iny
.2fb5	a9 00		lda #$00			lda 	#0
.2fb7	91 2a		sta ($2a),y			sta 	(temp0),y
.2fb9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c16					MSeed32:	.fill 	4							; random number seed.
.2fba					MInt32Absolute:
.2fba	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2fbc	30 01		bmi $2fbf			bmi 	MInt32Negate
.2fbe	60		rts				rts
.2fbf					MInt32Negate:
.2fbf	38		sec				sec 								; subtract from zero.
.2fc0	a9 00		lda #$00			lda 	#0
.2fc2	f5 48		sbc $48,x			sbc 	esInt0,x
.2fc4	95 48		sta $48,x			sta 	esInt0,x
.2fc6	a9 00		lda #$00			lda 	#0
.2fc8	f5 50		sbc $50,x			sbc 	esInt1,x
.2fca	95 50		sta $50,x			sta 	esInt1,x
.2fcc	a9 00		lda #$00			lda 	#0
.2fce	f5 58		sbc $58,x			sbc 	esInt2,x
.2fd0	95 58		sta $58,x			sta 	esInt2,x
.2fd2	a9 00		lda #$00			lda 	#0
.2fd4	f5 60		sbc $60,x			sbc 	esInt3,x
.2fd6	95 60		sta $60,x			sta 	esInt3,x
.2fd8	60		rts				rts
.2fd9					MInt32Not:
.2fd9	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2fdb	49 ff		eor #$ff			eor 	#$FF
.2fdd	95 48		sta $48,x			sta 	esInt0,x
.2fdf	b5 50		lda $50,x			lda 	esInt1,x
.2fe1	49 ff		eor #$ff			eor 	#$FF
.2fe3	95 50		sta $50,x			sta 	esInt1,x
.2fe5	b5 58		lda $58,x			lda 	esInt2,x
.2fe7	49 ff		eor #$ff			eor 	#$FF
.2fe9	95 58		sta $58,x			sta 	esInt2,x
.2feb	b5 60		lda $60,x			lda 	esInt3,x
.2fed	49 ff		eor #$ff			eor 	#$FF
.2fef	95 60		sta $60,x			sta 	esInt3,x
.2ff1	60		rts				rts
.2ff2					MInt32Sign:
.2ff2	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2ff4	30 0b		bmi $3001			bmi 	MInt32True 					; if set return -1 (true)
.2ff6	20 2c 30	jsr $302c			jsr 	MInt32Zero 					; is it zero ?
.2ff9	f0 0a		beq $3005			beq 	MInt32False 				; if zero return 0 (false)
.2ffb	20 05 30	jsr $3005			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2ffe	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.3000	60		rts				rts
.3001					MInt32True:
.3001	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3003	d0 02		bne $3007			bne 	MInt32WriteAll
.3005					MInt32False:
.3005	a9 00		lda #$00			lda 	#0
.3007					MInt32WriteAll:
.3007	95 48		sta $48,x			sta 	esInt0,x
.3009					MInt32Write123:
.3009	95 50		sta $50,x			sta 	esInt1,x
.300b	95 58		sta $58,x			sta 	esInt2,x
.300d	95 60		sta $60,x			sta 	esInt3,x
.300f	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3011	95 40		sta $40,x			sta 	esType,x
.3013	60		rts				rts
.3014					MInt32Set8Bit:
.3014	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.3016	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3018	f0 ef		beq $3009			beq		MInt32Write123
.301a					MInt32ShiftLeft:
.301a	16 48		asl $48,x			asl 	esInt0,x
.301c	36 50		rol $50,x			rol	 	esInt1,x
.301e	36 58		rol $58,x			rol	 	esInt2,x
.3020	36 60		rol $60,x			rol	 	esInt3,x
.3022	60		rts				rts
.3023					MInt32ShiftRight:
.3023	56 60		lsr $60,x			lsr 	esInt3,x
.3025	76 58		ror $58,x			ror 	esInt2,x
.3027	76 50		ror $50,x			ror 	esInt1,x
.3029	76 48		ror $48,x			ror 	esInt0,x
.302b	60		rts				rts
.302c					MInt32Zero:
.302c	b5 48		lda $48,x			lda 	esInt0,x
.302e	15 50		ora $50,x			ora 	esInt1,x
.3030	15 58		ora $58,x			ora 	esInt2,x
.3032	15 60		ora $60,x			ora 	esInt3,x
.3034	60		rts				rts
.3035					MInt32Random:
.3035	98		tya				tya
.3036	48		pha				pha
.3037	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3039	ad 16 0c	lda $0c16			lda 	MSeed32+0 					; check the seed isn't zero
.303c	d0 03		bne $3041			bne 	_Random1
.303e	a8		tay				tay 								; if so do it 256 times
.303f	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3041					_Random1:
.3041	0a		asl a				asl 	a
.3042	2e 17 0c	rol $0c17			rol 	MSeed32+1
.3045	2e 18 0c	rol $0c18			rol 	MSeed32+2
.3048	2e 19 0c	rol $0c19			rol 	MSeed32+3
.304b	90 02		bcc $304f			bcc 	_Random2
.304d	49 c5		eor #$c5			eor 	#$C5
.304f					_Random2:
.304f	88		dey				dey
.3050	d0 ef		bne $3041			bne 	_Random1
.3052	8d 16 0c	sta $0c16			sta 	MSeed32+0 					; copy the seed in.
.3055	95 48		sta $48,x			sta 	esInt0,x
.3057	ad 17 0c	lda $0c17			lda 	MSeed32+1
.305a	95 50		sta $50,x			sta 	esInt1,x
.305c	ad 18 0c	lda $0c18			lda 	MSeed32+2
.305f	95 58		sta $58,x			sta 	esInt2,x
.3061	ad 19 0c	lda $0c19			lda 	MSeed32+3
.3064	95 60		sta $60,x			sta 	esInt3,x
.3066	68		pla				pla
.3067	a8		tay				tay
.3068	a9 00		lda #$00			lda 	#0
.306a	95 40		sta $40,x			sta 	esType,x
.306c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.306d					CheckToken:
.306d	d1 28		cmp ($28),y			cmp 	(codePtr),y
.306f	d0 02		bne $3073			bne 	_CTError
.3071	c8		iny				iny
.3072	60		rts				rts
.3073					_CTError:
.3073	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3075	20 e0 14	jsr $14e0		jsr	errorHandler
.3078					CheckRightParen:
.3078	b1 28		lda ($28),y			lda 	(codePtr),y
.307a	c8		iny				iny
.307b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.307d	d0 01		bne $3080			bne 	_CRPError
.307f	60		rts				rts
.3080					_CRPError:
.3080	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3082	20 e0 14	jsr $14e0		jsr	errorHandler
.3085					CheckComma:
.3085	b1 28		lda ($28),y			lda 	(codePtr),y
.3087	c8		iny				iny
.3088	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.308a	d0 01		bne $308d			bne 	_CCError
.308c	60		rts				rts
.308d					_CCError:
.308d	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.308f	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.3092					ScanForward:
.3092	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.3094	86 2d		stx $2d				stx 	temp1+1
.3096	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.3098	85 2e		sta $2e				sta 	temp2
.309a	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.309c	c8		iny				iny
.309d	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.309f	d0 08		bne $30a9			bne 	_SFNoCheck 					; if so, check token against entered values.
.30a1	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.30a3	f0 24		beq $30c9			beq 	_SFExit 					; at the same strcture depth.
.30a5	c5 2d		cmp $2d				cmp 	temp1+1
.30a7	f0 20		beq $30c9			beq 	_SFExit
.30a9					_SFNoCheck:
.30a9	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.30ab	90 ed		bcc $309a			bcc 	_SFLoop
.30ad	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.30af	90 19		bcc $30ca			bcc 	_SFSpecials
.30b1	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.30b3	90 e5		bcc $309a			bcc 	_SFLoop
.30b5	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.30b7	b0 e1		bcs $309a			bcs 	_SFLoop
.30b9	aa		tax				tax  								; token in X, and look up the adjuster.
.30ba	bd 0d 29	lda $290d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.30bd	38		sec				sec 								; convert to an offset ($FF,$01)
.30be	e9 81		sbc #$81			sbc 	#$81
.30c0	18		clc				clc 								; add to depth
.30c1	65 2e		adc $2e				adc 	temp2
.30c3	85 2e		sta $2e				sta 	temp2
.30c5	10 d3		bpl $309a			bpl 	_SFLoop 					; +ve okay to continue
.30c7	30 07		bmi $30d0			bmi 	SFError 					; if gone -ve then we have a nesting error
.30c9	60		rts		_SFExit:rts
.30ca					_SFSpecials:
.30ca	20 d5 30	jsr $30d5			jsr 	ScannerSkipSpecial
.30cd	4c 9a 30	jmp $309a			jmp 	_SFLoop
.30d0					SFError:
.30d0	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.30d2	20 e0 14	jsr $14e0		jsr	errorHandler
.30d5					ScannerSkipSpecial:
.30d5	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.30d7	f0 10		beq $30e9			beq 	_SFNextLine
.30d9	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.30db	f0 2b		beq $3108			beq 	_SFFloatSkip
.30dd	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.30df	f0 02		beq $30e3			beq 	_SFSkipString
.30e1	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.30e2	60		rts				rts 								; token.
.30e3					_SFSkipString:
.30e3	98		tya				tya
.30e4	38		sec				sec
.30e5	71 28		adc ($28),y			adc 	(codePtr),y
.30e7	a8		tay				tay
.30e8	60		rts				rts
.30e9					_SFNextLine:
.30e9	a0 00		ldy #$00			ldy 	#0 							; get offset
.30eb	b1 28		lda ($28),y			lda 	(codePtr),y
.30ed	18		clc				clc 								; add to code pointer.
.30ee	65 28		adc $28				adc 	codePtr
.30f0	85 28		sta $28				sta 	codePtr
.30f2	90 02		bcc $30f6			bcc		_SFNLNoCarry
.30f4	e6 29		inc $29				inc 	codePtr+1
.30f6					_SFNLNoCarry:
.30f6	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.30f8	d0 0b		bne $3105			bne		_SFXNL 						; no go round again
.30fa	a5 2c		lda $2c				lda 	temp1
.30fc	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.30fe	d0 d0		bne $30d0			bne 	SFError 					; read uses this to search for data statements
.3100	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.3102	20 e0 14	jsr $14e0		jsr	errorHandler
.3105	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.3107	60		rts				rts
.3108					_SFFloatSkip:
.3108	98		tya				tya 								; skip over an embedded float.
.3109	18		clc				clc
.310a	69 05		adc #$05			adc 	#FloatEmbeddedSize
.310c	a8		tay				tay
.310d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.310e					RSReset:
.310e	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3110	85 37		sta $37				sta 	rsPointer
.3112	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3114	85 38		sta $38				sta 	1+(rsPointer)
.3116	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3118	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.311b	60		rts				rts
.311c					RSClaim:
.311c	84 32		sty $32				sty 	tempShort 					; preserve Y
.311e	48		pha				pha 								; save marker on stack.
.311f	8a		txa				txa 								; get bytes required.
.3120	38		sec				sec
.3121	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3123	65 37		adc $37				adc 	rsPointer
.3125	85 37		sta $37				sta 	rsPointer
.3127	a5 38		lda $38				lda 	rsPointer+1
.3129	69 ff		adc #$ff			adc 	#$FF
.312b	85 38		sta $38				sta 	rsPointer+1
.312d	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.312f	90 08		bcc $3139			bcc 	_RSCOverflow
.3131	68		pla				pla 								; get marker back
.3132	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3134	91 37		sta ($37),y			sta 	(rsPointer),y
.3136	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3138	60		rts				rts
.3139					_RSCOverflow:
.3139	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.313b	20 e0 14	jsr $14e0		jsr	errorHandler
.313e					RSFree:
.313e	18		clc				clc
.313f	65 37		adc $37				adc 	rsPointer
.3141	85 37		sta $37				sta 	rsPointer
.3143	90 02		bcc $3147			bcc 	_RSFExit
.3145	e6 38		inc $38				inc 	rsPointer+1
.3147					_RSFExit:
.3147	60		rts				rts
.3148					RSSavePosition:
.3148	84 32		sty $32				sty 	tempShort 					; save Y position
.314a	a8		tay				tay 								; this is where we write it.
.314b	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.314d	91 37		sta ($37),y			sta 	(rsPointer),y
.314f	c8		iny				iny
.3150	a5 29		lda $29				lda 	codePtr+1
.3152	91 37		sta ($37),y			sta 	(rsPointer),y
.3154	c8		iny				iny
.3155	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3157	91 37		sta ($37),y			sta 	(rsPointer),y
.3159	a8		tay				tay 								; fix Y back again to original value
.315a	60		rts				rts
.315b					RSLoadPosition:
.315b	a8		tay				tay
.315c	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.315e	85 28		sta $28				sta 	codePtr
.3160	c8		iny				iny
.3161	b1 37		lda ($37),y			lda 	(rsPointer),y
.3163	85 29		sta $29				sta 	codePtr+1
.3165	c8		iny				iny
.3166	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3168	a8		tay				tay 								; to Y
.3169	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.316a					WarmStart:
.316a	a2 02		ldx #$02		ldx	#2
.316c	20 e4 1a	jsr $1ae4		jsr	interactionHandler

;******  Return to file: main/main.asm

.316f					mainHandler:
.316f	7c 72 31	jmp ($3172,x)			jmp 	(mainVectors,x)
.3172					mainVectors:
>3172	78 30					.word CheckRightParen      ; index 0
>3174	f9 1a					.word XCommandClear        ; index 2
>3176	8f 2a					.word LinkEvaluate         ; index 4
>3178	9b 2a					.word LinkEvaluateInteger  ; index 6
>317a	a1 2a					.word LinkEvaluateSmallInt ; index 8
>317c	95 2a					.word LinkEvaluateTerm     ; index 10
>317e	54 2f					.word MLInt32ToString      ; index 12
>3180	17 20					.word Command_XNew         ; index 14
>3182	26 22					.word XCommand_Run         ; index 16
>3184	32 22					.word Command_RunFrom      ; index 18
>3186	6c 2e					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.3188					section_end_main:
.3188					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.3188					StringChrs:
.3188	aa		tax				tax 								; set up stack
.3189	a9 02		lda #$02			lda 	#2
.318b	20 4b 32	jsr $324b			jsr 	AllocateSoftString
.318e	98		tya				tya
.318f	20 71 32	jsr $3271			jsr 	WriteSoftString
.3192					StringUpdate:
.3192	20 a0 31	jsr $31a0			jsr 	ReturnSoftString
.3195	8a		txa				txa
.3196	60		rts				rts
.3197					StringNull:
.3197	aa		tax				tax
.3198	a9 01		lda #$01			lda 	#1
.319a	20 4b 32	jsr $324b			jsr 	AllocateSoftString
.319d	4c 92 31	jmp $3192			jmp 	StringUpdate
.31a0					ReturnSoftString:
.31a0	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.31a2	95 48		sta $48,x			sta 	esInt0,x
.31a4	a5 3a		lda $3a				lda 	softMemAlloc+1
.31a6	95 50		sta $50,x			sta 	esInt1,x
.31a8	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.31aa	95 58		sta $58,x			sta 	esInt2,x
.31ac	95 60		sta $60,x			sta 	esInt3,x
.31ae	a9 40		lda #$40			lda 	#$40 						; type string.
.31b0	95 40		sta $40,x			sta 	esType,x
.31b2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.31b3					STRCompare:
.31b3	48		pha				pha 								; save A
.31b4	aa		tax				tax 								; put stack pos in X
.31b5	98		tya				tya
.31b6	48		pha				pha
.31b7	20 eb 31	jsr $31eb			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.31ba	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.31bc	b1 2a		lda ($2a),y			lda 	(temp0),y
.31be	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.31c0	90 02		bcc $31c4			bcc 	_SCNotSmaller
.31c2	b1 2c		lda ($2c),y			lda 	(temp1),y
.31c4					_SCNotSmaller:
.31c4	aa		tax				tax 								; put that in X. We compare this many chars first.
.31c5					_SCCompareLoop:
.31c5	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.31c7	f0 0c		beq $31d5			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.31c9	ca		dex				dex 								; decrement chars to compare.
.31ca	c8		iny				iny 								; move to next character
.31cb	38		sec				sec 								; calculate s1[y]-s2[y]
.31cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.31ce	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31d0	d0 0a		bne $31dc			bne 	_SCReturnResult 			; if different return sign of A
.31d2	4c c5 31	jmp $31c5			jmp 	_SCCompareLoop
.31d5					_SCSameToEndShortest
.31d5	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.31d7	38		sec				sec
.31d8	b1 2a		lda ($2a),y			lda 	(temp0),y
.31da	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31dc					_SCReturnResult:
.31dc	08		php				php 								; set return to zero preserving PSW.
.31dd	a2 00		ldx #$00			ldx 	#0
.31df	28		plp				plp
.31e0	f0 05		beq $31e7			beq 	_SCExit 					; two values equal, then exit
.31e2	ca		dex				dex 								; X = $FF
.31e3	90 02		bcc $31e7			bcc 	_SCExit 					; if 1st < 2nd then -1
.31e5	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.31e7					_SCExit:
.31e7	68		pla				pla
.31e8	a8		tay				tay
.31e9	68		pla				pla
.31ea	60		rts				rts
.31eb					CopyStringPair:
.31eb	b5 49		lda $49,x			lda 	esInt0+1,x
.31ed	85 2c		sta $2c				sta 	temp1
.31ef	b5 51		lda $51,x			lda 	esInt1+1,x
.31f1	85 2d		sta $2d				sta 	temp1+1
.31f3					CopyStringTop:
.31f3	b5 48		lda $48,x			lda 	esInt0,x
.31f5	85 2a		sta $2a				sta 	temp0
.31f7	b5 50		lda $50,x			lda 	esInt1,x
.31f9	85 2b		sta $2b				sta 	temp0+1
.31fb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.31fc					StringConcat:
.31fc	aa		tax				tax									; stack pos in X
.31fd	98		tya				tya
.31fe	48		pha				pha
.31ff	20 eb 31	jsr $31eb			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3202	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3203	a0 00		ldy #$00			ldy 	#0
.3205	b1 2a		lda ($2a),y			lda 	(temp0),y
.3207	71 2c		adc ($2c),y			adc 	(temp1),y
.3209	b0 1c		bcs $3227			bcs 	_SCError 					; just too many characters here.
.320b	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.320d	b0 18		bcs $3227			bcs 	_SCError
.320f	20 4b 32	jsr $324b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3212	20 42 32	jsr $3242			jsr 	CopySoftToStack 			; copy that to the stack.
.3215	20 2c 32	jsr $322c			jsr 	SCCopyTemp0 				; copy temp0
.3218	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.321a	85 2a		sta $2a				sta 	temp0
.321c	a5 2d		lda $2d				lda 	temp1+1
.321e	85 2b		sta $2b				sta 	temp0+1
.3220	20 2c 32	jsr $322c			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3223	68		pla				pla
.3224	a8		tay				tay
.3225	8a		txa				txa 								; and A
.3226	60		rts				rts
.3227					_SCError:
.3227	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3229	20 e0 14	jsr $14e0		jsr	errorHandler
.322c					SCCopyTemp0:
.322c	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.322e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3230	85 2e		sta $2e				sta 	temp2
.3232					_SCCopyLoop:
.3232	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3234	f0 0b		beq $3241			beq 	_SCCopyExit
.3236	c6 2e		dec $2e				dec 	temp2
.3238	c8		iny				iny 								; get next char
.3239	b1 2a		lda ($2a),y			lda 	(temp0),y
.323b	20 71 32	jsr $3271			jsr 	WriteSoftString 			; write to soft string.
.323e	4c 32 32	jmp $3232			jmp 	_SCCopyLoop
.3241					_SCCopyExit:
.3241	60		rts				rts
.3242					CopySoftToStack:
.3242	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3244	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.3246	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3248	95 50		sta $50,x			sta 	esInt1,x
.324a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.324b					AllocateSoftString:
.324b	85 32		sta $32				sta 	tempShort 					; save count
.324d	98		tya				tya
.324e	48		pha				pha
.324f	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3251	d0 09		bne $325c			bne 	_ASSDone
.3253	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3255	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3257	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3259	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.325a	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.325c					_ASSDone:
.325c	38		sec				sec 								; allocate downwards enough memory
.325d	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.325f	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3261	85 39		sta $39				sta 	softMemAlloc
.3263	a5 3a		lda $3a				lda 	softMemAlloc+1
.3265	e9 00		sbc #$00			sbc 	#0
.3267	85 3a		sta $3a				sta 	softMemAlloc+1
.3269	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.326b	a8		tay				tay
.326c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.326e	68		pla				pla
.326f	a8		tay				tay
.3270	60		rts				rts
.3271					WriteSoftString:
.3271	84 32		sty $32				sty 	tempShort 					; save Y
.3273	48		pha				pha 								; save character on stack
.3274	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3276	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3278	18		clc				clc
.3279	69 01		adc #$01			adc 	#1
.327b	91 39		sta ($39),y			sta 	(softMemAlloc),y
.327d	a8		tay				tay 								; offset in Y
.327e	68		pla				pla 								; get char and write.
.327f	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3281	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3283	60		rts				rts
.3284					StrClone:
.3284	aa		tax				tax 								; set up stack.
.3285	98		tya				tya
.3286	48		pha				pha
.3287	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3289	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.328b	18		clc				clc
.328c	69 01		adc #$01			adc 	#1
.328e	20 4b 32	jsr $324b			jsr 	AllocateSoftString 			; allocate soft memory
.3291	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3293	95 48		sta $48,x			sta 	esInt0,x
.3295	a5 3a		lda $3a				lda 	softMemAlloc+1
.3297	95 50		sta $50,x			sta 	esInt1,x
.3299	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.329b	95 58		sta $58,x			sta 	esInt2,x
.329d	95 60		sta $60,x			sta 	esInt3,x
.329f	a9 40		lda #$40			lda 	#$40 						; set type to string.
.32a1	95 40		sta $40,x			sta 	esType,x
.32a3	20 2c 32	jsr $322c			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.32a6	68		pla				pla
.32a7	a8		tay				tay
.32a8	8a		txa				txa
.32a9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.32aa					CaseString:
.32aa	48		pha				pha 								; save A and copy to X
.32ab	aa		tax				tax
.32ac	98		tya				tya
.32ad	48		pha				pha
.32ae	20 f3 31	jsr $31f3			jsr 	CopyStringTop 				; target string -> temp0
.32b1	a0 00		ldy #$00			ldy 	#0
.32b3	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.32b5	18		clc				clc
.32b6	69 01		adc #$01			adc 	#1 							; one more for length byte
.32b8	20 4b 32	jsr $324b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.32bb	20 42 32	jsr $3242			jsr 	CopySoftToStack 			; copy that to the stack.
.32be	a0 00		ldy #$00			ldy 	#0
.32c0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.32c2	aa		tax				tax
.32c3					_CSCopy:
.32c3	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.32c5	f0 24		beq $32eb			beq 	_CSExit
.32c7	ca		dex				dex
.32c8	c8		iny				iny
.32c9	68		pla				pla 								; check direction
.32ca	48		pha				pha
.32cb	f0 0c		beq $32d9			beq 	_CSUpper
.32cd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.32cf	c9 41		cmp #$41			cmp 	#"A"
.32d1	90 12		bcc $32e5			bcc 	_CSWrite
.32d3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32d5	b0 0e		bcs $32e5			bcs 	_CSWrite
.32d7	90 0a		bcc $32e3			bcc 	_CSFlipWrite
.32d9					_CSUpper:
.32d9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.32db	c9 61		cmp #$61			cmp 	#"a"
.32dd	90 06		bcc $32e5			bcc 	_CSWrite
.32df	c9 7b		cmp #$7b			cmp 	#"z"+1
.32e1	b0 02		bcs $32e5			bcs 	_CSWrite
.32e3					_CSFlipWrite:
.32e3	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.32e5					_CSWrite:
.32e5	20 71 32	jsr $3271			jsr 	WriteSoftString 			; add to soft string.
.32e8	4c c3 32	jmp $32c3			jmp 	_CSCopy
.32eb					_CSExit:
.32eb	68		pla				pla
.32ec	a8		tay				tay
.32ed	68		pla				pla
.32ee	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.32ef					StringSubstring:
.32ef	48		pha				pha
.32f0	aa		tax				tax 								; access stack.
.32f1	98		tya				tya
.32f2	48		pha				pha
.32f3	20 f3 31	jsr $31f3			jsr 	CopyStringTop 				; point temp0 to the string.
.32f6	a0 00		ldy #$00			ldy 	#0 							; get length.
.32f8	b1 2a		lda ($2a),y			lda 	(temp0),Y
.32fa	85 2c		sta $2c				sta 	temp1
.32fc	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.32fe	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3300	f0 02		beq $3304			beq 	_SSBOkay
.3302	b0 2a		bcs $332e			bcs 	_SSBReturnNull
.3304					_SSBOkay:
.3304	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3306	18		clc				clc
.3307	69 01		adc #$01			adc 	#1
.3309	38		sec				sec
.330a	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.330c	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.330e	90 02		bcc $3312			bcc		_SSBTrunc
.3310	b5 4a		lda $4a,x			lda 	esInt0+2,x
.3312					_SSBTrunc:
.3312	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3314	18		clc				clc
.3315	69 01		adc #$01			adc 	#1 							; add 1
.3317	20 4b 32	jsr $324b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.331a	20 42 32	jsr $3242			jsr 	CopySoftToStack 			; copy that to the stack.
.331d	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.331f					_SSBCopyLoop:
.331f	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3321	f0 0e		beq $3331			beq 	_SSBExit
.3323	c6 2d		dec $2d				dec 	temp1+1
.3325	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3327	20 71 32	jsr $3271			jsr 	WriteSoftString
.332a	c8		iny				iny
.332b	4c 1f 33	jmp $331f			jmp 	_SSBCopyLoop
.332e					_SSBReturnNull:
.332e	20 35 33	jsr $3335			jsr 	ReturnNull
.3331					_SSBExit:
.3331	68		pla				pla
.3332	a8		tay				tay
.3333	68		pla				pla
.3334	60		rts				rts
.3335					ReturnNull:
.3335	a9 00		lda #$00			lda 	#0 							; clear null string
.3337	8d ce 0a	sta $0ace			sta 	NullString
.333a	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.333c	95 48		sta $48,x			sta 	esInt0,x
.333e	a9 0a		lda #$0a			lda 	#NullString >> 8
.3340	95 50		sta $50,x			sta 	esInt1,x
.3342	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c1a					srcStrLen:
>0c1a							.fill 	1
.3343					StringWrite:
.3343	aa		tax				tax
.3344	48		pha				pha
.3345	98		tya				tya
.3346	48		pha				pha
.3347	20 6e 33	jsr $336e			jsr 	CheckOverwriteCurrent
.334a	b0 0d		bcs $3359			bcs		_SWCopyCurrent
.334c	20 ac 33	jsr $33ac			jsr 	RequiresConcretion
.334f	90 0e		bcc $335f			bcc 	_SWWriteReference
.3351	20 0f 34	jsr $340f			jsr 	CheckSpecialConcretion
.3354	b0 09		bcs $335f			bcs 	_SWWriteReference
.3356	20 c0 33	jsr $33c0			jsr 	AllocateHardMemory
.3359					_SWCopyCurrent:
.3359	20 f3 33	jsr $33f3			jsr 	CopyStringToHardMemory
.335c	4c 6a 33	jmp $336a			jmp 	_SWExit
.335f					_SWWriteReference
.335f	a0 00		ldy #$00			ldy 	#0
.3361	a5 2a		lda $2a				lda 	temp0
.3363	91 2c		sta ($2c),y			sta 	(temp1),y
.3365	c8		iny				iny
.3366	a5 2b		lda $2b				lda 	temp0+1
.3368	91 2c		sta ($2c),y			sta 	(temp1),y
.336a					_SWExit:
.336a	68		pla				pla
.336b	a8		tay				tay
.336c	68		pla				pla
.336d	60		rts				rts
.336e					CheckOverwriteCurrent:
.336e	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3370	b5 51		lda $51,x			lda 	esInt1+1,x
.3372	85 2b		sta $2b				sta 	temp0+1
.3374	b5 49		lda $49,x			lda 	esInt0+1,x
.3376	85 2a		sta $2a				sta 	temp0
.3378	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.337a	8d 1a 0c	sta $0c1a			sta 	srcStrLen
.337d	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.337f	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3381	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.3383	85 2d		sta $2d				sta 	temp1+1
.3385	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3387	b1 2c		lda ($2c),y			lda 	(temp1),y
.3389	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.338b	90 1b		bcc $33a8			bcc 	_COCFail 				; in hard memory.
.338d	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.338f	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3391	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3393	85 2e		sta $2e				sta 	temp2
.3395	c8		iny				iny
.3396	b1 2c		lda ($2c),y			lda 	(temp1),y
.3398	e9 00		sbc #$00			sbc 	#0
.339a	85 2f		sta $2f				sta 	temp2+1
.339c	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.339e	b1 2e		lda ($2e),y			lda 	(temp2),y
.33a0	38		sec				sec  							; maximum character capacity.
.33a1	e9 02		sbc #$02			sbc 	#2
.33a3	cd 1a 0c	cmp $0c1a			cmp 	srcStrLen 				; if >= the required length
.33a6	b0 02		bcs $33aa			bcs 	_COCCanReuse
.33a8					_COCFail:
.33a8	18		clc				clc
.33a9	60		rts				rts
.33aa					_COCCanReuse:
.33aa	38		sec				sec
.33ab	60		rts				rts
.33ac					RequiresConcretion:
.33ac	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33ae	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.33b0	b0 0a		bcs $33bc			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.33b2	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.33b4	f0 08		beq $33be			beq 	_RCFail 				; if not, this cannot be soft memory.
.33b6	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33b8	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.33ba	90 02		bcc $33be			bcc 	_RCFail 				; so concreting
.33bc					_RCSucceed:
.33bc	38		sec				sec
.33bd	60		rts				rts
.33be					_RCFail:
.33be	18		clc				clc
.33bf	60		rts				rts
.33c0					AllocateHardMemory:
.33c0	98		tya				tya
.33c1	48		pha				pha
.33c2	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; characters in string
.33c5	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.33c7	b0 04		bcs $33cd			bcs 	_AHMSetMax 				; max out that amount.
.33c9	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.33cb	90 02		bcc $33cf			bcc 	_AHMIsOkay
.33cd					_AHMSetMax:
.33cd	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.33cf					_AHMIsOkay:
.33cf	48		pha				pha	 							; save size to be allocated
.33d0	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.33d2	38		sec				sec  							; and copy result to TOS as target address.
.33d3	65 33		adc $33				adc 	highMemory
.33d5	85 33		sta $33				sta 	highMemory
.33d7	a5 34		lda $34				lda 	highMemory+1
.33d9	69 ff		adc #$ff			adc 	#$FF
.33db	85 34		sta $34				sta 	highMemory+1
.33dd	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.33df	68		pla				pla 							; get the total size of the storage block
.33e0	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.33e2	18		clc				clc
.33e3	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.33e5	69 01		adc #$01			adc 	#1
.33e7	91 2c		sta ($2c),y			sta 	(temp1),y
.33e9	a5 34		lda $34				lda 	highMemory+1
.33eb	69 00		adc #$00			adc 	#0
.33ed	c8		iny				iny
.33ee	91 2c		sta ($2c),y			sta 	(temp1),y
.33f0	68		pla				pla
.33f1	a8		tay				tay
.33f2	60		rts				rts
.33f3					CopyStringToHardMemory:
.33f3	98		tya				tya
.33f4	48		pha				pha
.33f5	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.33f7	b1 2c		lda ($2c),y			lda 	(temp1),y
.33f9	85 2e		sta $2e				sta 	temp2
.33fb	c8		iny				iny
.33fc	b1 2c		lda ($2c),y			lda 	(temp1),y
.33fe	85 2f		sta $2f				sta 	temp2+1
.3400	ac 1a 0c	ldy $0c1a			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3403					_CSTHMLoop:
.3403	b1 2a		lda ($2a),y			lda 	(temp0),y
.3405	91 2e		sta ($2e),y			sta 	(temp2),y
.3407	88		dey				dey
.3408	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.340a	d0 f7		bne $3403			bne 	_CSTHMLoop
.340c	68		pla				pla
.340d	a8		tay				tay
.340e	60		rts				rts
.340f					CheckSpecialConcretion:
.340f	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; check string is null e.g. length = 0
.3412	f0 02		beq $3416			beq 	_CSCNullString
.3414	18		clc				clc
.3415	60		rts				rts
.3416					_CSCNullString:
.3416	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3418	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.341b	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.341d	85 2a		sta $2a				sta 	temp0
.341f	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3421	85 2b		sta $2b				sta 	1+(temp0)
.3423	38		sec				sec
.3424	60		rts				rts

;******  Return to file: string/string.asm

.3425					stringHandler:
.3425	7c 28 34	jmp ($3428,x)			jmp 	(stringVectors,x)
.3428					stringVectors:
>3428	88 31					.word StringChrs           ; index 0
>342a	84 32					.word StrClone             ; index 2
>342c	fc 31					.word StringConcat         ; index 4
>342e	97 31					.word StringNull           ; index 6
>3430	b3 31					.word STRCompare           ; index 8
>3432	aa 32					.word CaseString           ; index 10
>3434	ef 32					.word StringSubstring      ; index 12
>3436	43 33					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3438					section_end_string:
.3438					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1b					deTokeniseVector:
>0c1b							.fill 	2
.0c1d					lastCharacterClass:
>0c1d							.fill 	1
.0c1e					indent:
>0c1e							.fill 	1
.3438					ListLine:
.3438	48		pha				pha								; enter here to list to console. sets the output vector
.3439	a9 68		lda #$68			lda 	#(deTokenPrint) & $FF
.343b	8d 1b 0c	sta $0c1b			sta 	deTokeniseVector
.343e	a9 35		lda #$35			lda 	#(deTokenPrint) >> 8
.3440	8d 1c 0c	sta $0c1c			sta 	1+(deTokeniseVector)
.3443	68		pla				pla
.3444					Detokenise:
.3444	18		clc				clc 							; space required for line number.
.3445	69 06		adc #$06			adc 	#6
.3447	8d 1e 0c	sta $0c1e			sta 	indent
.344a	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.344c	8d 1d 0c	sta $0c1d			sta 	lastCharacterClass
.344f	a2 02		ldx #$02			ldx 	#2
.3451	20 05 30	jsr $3005			jsr 	MInt32False
.3454	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3456	b1 28		lda ($28),y			lda 	(codePtr),y
.3458	95 48		sta $48,x			sta 	esInt0,x
.345a	c8		iny				iny
.345b	b1 28		lda ($28),y			lda 	(codePtr),y
.345d	95 50		sta $50,x			sta 	esInt1,x
.345f	a9 84		lda #$84			lda 	#LTYLineNumber
.3461	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.3464	a9 0a		lda #$0a			lda 	#10 					; base 10
.3466	20 07 35	jsr $3507			jsr 	DTPrintInteger 			; print as integer.
.3469	a0 00		ldy #$00			ldy 	#0 						; get length
.346b	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.346d	aa		tax				tax
.346e					_DTPadOut:
.346e	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3470	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.3473	e8		inx				inx
.3474	ec 1e 0c	cpx $0c1e			cpx 	indent
.3477	d0 f5		bne $346e			bne 	_DTPadOut
.3479	a0 03		ldy #$03			ldy 	#3 						; start position.
.347b					_DTListLoop
.347b	b1 28		lda ($28),y			lda 	(codePtr),y
.347d	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.347f	f0 55		beq $34d6			beq 	_DTIsString
.3481	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3483	f0 7e		beq $3503			beq 	_DTIsFloat
.3485	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3487	f0 16		beq $349f			beq 	_DTHexConstant
.3489	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.348b	d0 06		bne $3493			bne 	_DTNotEnd
.348d	a9 ff		lda #$ff			lda 	#255 					; print CR
.348f	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.3492	60		rts				rts
.3493					_DTNotEnd:
.3493	c9 00		cmp #$00			cmp 	#0
.3495	30 33		bmi $34ca			bmi 	_DTIsToken
.3497	c9 40		cmp #$40			cmp 	#$40
.3499	90 35		bcc $34d0			bcc 	_DTIsIdentifier
.349b	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.349d	d0 08		bne $34a7			bne 	_DTConstant
.349f					_DTHexConstant:
.349f	a9 26		lda #$26			lda 	#"&"
.34a1	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.34a4	c8		iny				iny
.34a5	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.34a7					_DTConstant:
.34a7	48		pha				pha
.34a8	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.34aa	20 84 35	jsr $3584			jsr 	DTSwitchMode
.34ad	a9 86		lda #$86			lda 	#LTYConstant
.34af	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.34b2	a2 02		ldx #$02			ldx 	#2 						; get its value
.34b4	8a		txa				txa
.34b5	a2 0a		ldx #$0a		ldx	#10
.34b7	20 6f 31	jsr $316f		jsr	mainHandler
.34ba	aa		tax				tax
.34bb	68		pla				pla 							; get base back
.34bc	85 32		sta $32				sta 	tempShort
.34be	98		tya				tya
.34bf	48		pha				pha
.34c0	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.34c2	20 07 35	jsr $3507			jsr 	DTPrintInteger
.34c5	68		pla				pla
.34c6	a8		tay				tay
.34c7	4c 7b 34	jmp $347b			jmp 	_DTListLoop
.34ca					_DTIsToken:
.34ca	20 dd 35	jsr $35dd			jsr 	DTDecodeToken
.34cd	4c 7b 34	jmp $347b			jmp 	_DTListLoop
.34d0					_DTIsIdentifier:
.34d0	20 96 35	jsr $3596			jsr 	DTIdentifier
.34d3	4c 7b 34	jmp $347b			jmp 	_DTListLoop
.34d6					_DTIsString:
.34d6	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.34d8	20 84 35	jsr $3584			jsr 	DTSwitchMode
.34db	a9 81		lda #$81			lda 	#LTYString
.34dd	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.34e0	a9 22		lda #$22			lda 	#'"'						; open quote
.34e2	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.34e5	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.34e7	8a		txa				txa
.34e8	a2 0a		ldx #$0a		ldx	#10
.34ea	20 6f 31	jsr $316f		jsr	mainHandler
.34ed	aa		tax				tax
.34ee	b5 48		lda $48,x			lda 	esInt0,x 					; copy string address to temp0
.34f0	85 2a		sta $2a				sta 	temp0
.34f2	b5 50		lda $50,x			lda 	esInt1,x
.34f4	85 2b		sta $2b				sta 	temp0+1
.34f6	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.34f8	20 19 35	jsr $3519			jsr 	DTPrintLengthPrefix
.34fb	a9 22		lda #$22			lda 	#'"'
.34fd	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.3500	4c 7b 34	jmp $347b			jmp 	_DTListLoop
.3503					_DTIsFloat:
>3503	db						.byte 	$DB
.3504	4c 03 35	jmp $3503			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1f					tPrintCount:
>0c1f							.fill 	1
.3507					DTPrintInteger:
.3507	48		pha				pha									; save base
.3508	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.350a	85 2a		sta $2a				sta 	temp0
.350c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.350e	85 2b		sta $2b				sta 	1+(temp0)
.3510	68		pla				pla
.3511	a8		tay				tay
.3512	8a		txa				txa
.3513	a2 0c		ldx #$0c		ldx	#12
.3515	20 6f 31	jsr $316f		jsr	mainHandler
.3518	aa		tax				tax 								; then drop through here.
.3519					DTPrintLengthPrefix:
.3519	aa		tax				tax 								; A = 0 = don't case convert.
.351a	98		tya				tya
.351b	48		pha				pha
.351c	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.351e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3520	8d 1f 0c	sta $0c1f			sta 	tPrintCount
.3523	f0 1b		beq $3540			beq 	_DTPLPExit 					; empty string
.3525					_DTPLPLoop:
.3525	c8		iny				iny 								; get next.
.3526	b1 2a		lda ($2a),y			lda 	(temp0),y
.3528	29 7f		and #$7f			and 	#$7F
.352a	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.352c	f0 0a		beq $3538			beq 	_DTPLPNoCase
.352e	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3530	90 06		bcc $3538			bcc 	_DTPLPNoCase
.3532	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3534	b0 02		bcs $3538			bcs 	_DTPLPNoCase
.3536	49 20		eor #$20			eor 	#"A"^"a"
.3538					_DTPLPNoCase
.3538	20 43 35	jsr $3543			jsr 	ListOutputCharacter 		; call handler
.353b	ce 1f 0c	dec $0c1f			dec 	tPrintCount 				; do all the characters
.353e	d0 e5		bne $3525			bne 	_DTPLPLoop
.3540					_DTPLPExit:
.3540	68		pla				pla
.3541	a8		tay				tay
.3542	60		rts				rts
.3543					ListOutputCharacter:
.3543	85 32		sta $32				sta 	tempShort
.3545	48		pha				pha
.3546	8a		txa				txa
.3547	48		pha				pha
.3548	98		tya				tya
.3549	48		pha				pha
.354a	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.354c	c9 20		cmp #$20			cmp 	#32
.354e	b0 0c		bcs $355c			bcs		_LOCHiBit
.3550	09 40		ora #$40			ora 	#64 						; conversion
.3552	c9 40		cmp #$40			cmp 	#64							; make l/c
.3554	f0 06		beq $355c			beq 	_LOCHiBit
.3556	c9 5b		cmp #$5b			cmp 	#65+26
.3558	b0 02		bcs $355c			bcs 	_LOCHiBit
.355a	69 20		adc #$20			adc 	#32
.355c					_LOCHiBit:
.355c	20 65 35	jsr $3565			jsr 	_LOCCallVector				; call o/p handler routine
.355f	68		pla				pla
.3560	a8		tay				tay
.3561	68		pla				pla
.3562	aa		tax				tax
.3563	68		pla				pla
.3564					_LOCExit:
.3564	60		rts				rts
.3565					_LOCCallVector:
.3565	6c 1b 0c	jmp ($0c1b)			jmp 	(deTokeniseVector)
.3568					deTokenPrint:
.3568	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.356a	30 06		bmi $3572			bmi 	_dtpInk
.356c	a2 16		ldx #$16		ldx	#22
.356e	20 bf 14	jsr $14bf		jsr	deviceHandler
.3571	60		rts				rts
.3572	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3574	f0 08		beq $357e			beq 	_dtpCR						; except $FF => CRLF
.3576	29 07		and #$07			and 	#7
.3578	a2 08		ldx #$08		ldx	#8
.357a	20 bf 14	jsr $14bf		jsr	deviceHandler
.357d	60		rts				rts
.357e					_dtpCR:
.357e	a2 04		ldx #$04		ldx	#4
.3580	20 bf 14	jsr $14bf		jsr	deviceHandler
.3583	60		rts				rts
.3584					DTSwitchMode:
.3584	cd 1d 0c	cmp $0c1d			cmp 	LastCharacterClass 			; if changed, update character class
.3587	f0 04		beq $358d			beq 	_DTSMNoChange
.3589	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.358c					_DTSMExit:
.358c	60		rts				rts
.358d					_DTSMNoChange:
.358d	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.358f	f0 fb		beq $358c			beq 	_DTSMExit 					; need a space.
.3591	a9 20		lda #$20			lda 	#" "
.3593	4c 43 35	jmp $3543			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3596					DTIdentifier:
.3596	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3598	20 84 35	jsr $3584			jsr 	DTSwitchMode
.359b	a9 87		lda #$87			lda 	#LTYIdentifier
.359d	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.35a0					_DTILoop:
.35a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.35a2	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.35a4	d0 02		bne $35a8			bne 	_DTINotUS
.35a6	a9 5f		lda #$5f			lda 	#"_"
.35a8					_DTINotUS:
.35a8	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.35ab	c8		iny				iny
.35ac	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.35ae	c9 3a		cmp #$3a			cmp 	#$3A
.35b0	90 ee		bcc $35a0			bcc 	_DTILoop
.35b2	c8		iny				iny
.35b3	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.35b5	f0 25		beq $35dc			beq 	_DTIExit 					; no postfix.
.35b7	48		pha				pha
.35b8	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.35ba	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.35bd	a9 82		lda #$82			lda 	#LTYPunctuation
.35bf	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.35c2	68		pla				pla
.35c3	c9 3b		cmp #$3b			cmp 	#$3B
.35c5	f0 10		beq $35d7			beq 	_DTIArray
.35c7	4a		lsr a				lsr 	a 							; array flag in C
.35c8	08		php				php
.35c9	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.35cb	f0 02		beq $35cf			beq 	_DTIDollar
.35cd	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.35cf					_DTIDollar:
.35cf	49 24		eor #$24			eor 	#"$"
.35d1	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.35d4	28		plp				plp
.35d5	90 05		bcc $35dc			bcc 	_DTIExit
.35d7					_DTIArray:
.35d7	a9 28		lda #$28			lda 	#"("
.35d9	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.35dc					_DTIExit:
.35dc	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.35dd					DTDecodeToken:
.35dd	a2 00		ldx #$00			ldx 	#0 							; table number to use
.35df	b1 28		lda ($28),y			lda 	(codePtr),y
.35e1	c9 84		cmp #$84			cmp 	#$84
.35e3	b0 05		bcs $35ea			bcs 	_DTNotShift
.35e5	29 03		and #$03			and 	#3 							; get the shift 1..3
.35e7	0a		asl a				asl 	a 							; put 2 x in X
.35e8	aa		tax				tax
.35e9	c8		iny				iny
.35ea					_DTNotShift:
.35ea	bd ea 38	lda $38ea,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.35ed	85 2a		sta $2a				sta 	temp0 						; point into temp0
.35ef	bd eb 38	lda $38eb,x			lda 	TokenTableAddress+1,x
.35f2	85 2b		sta $2b				sta 	temp0+1
.35f4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.35f6	c8		iny				iny 								; consume it.
.35f7	aa		tax				tax
.35f8	98		tya				tya
.35f9	48		pha				pha
.35fa					_DTFindText:
.35fa	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.35fc	f0 11		beq $360f			beq 	_DTFoundText
.35fe	ca		dex				dex
.35ff	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3601	38		sec				sec
.3602	b1 2a		lda ($2a),y			lda 	(temp0),y
.3604	65 2a		adc $2a				adc 	temp0
.3606	85 2a		sta $2a				sta 	temp0
.3608	90 f0		bcc $35fa			bcc 	_DTFindText
.360a	e6 2b		inc $2b				inc 	temp0+1
.360c	4c fa 35	jmp $35fa			jmp 	_DTFindText
.360f					_DTFoundText:
.360f	a0 01		ldy #$01			ldy 	#1 							; get first character
.3611	b1 2a		lda ($2a),y			lda 	(temp0),y
.3613	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3615	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3617	90 11		bcc $362a			bcc 	_DTIsPunctuation
.3619	c9 5b		cmp #$5b			cmp 	#"Z"+1
.361b	b0 0d		bcs $362a			bcs 	_DTIsPunctuation
.361d	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.361f	20 84 35	jsr $3584			jsr 	DTSwitchMode
.3622	a9 83		lda #$83			lda 	#LTYKeyword
.3624	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.3627	4c 34 36	jmp $3634			jmp 	_DTPrint
.362a					_DTIsPunctuation:
.362a	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.362c	20 84 35	jsr $3584			jsr 	DTSwitchMode
.362f	a9 82		lda #$82			lda 	#LTYPunctuation
.3631	20 43 35	jsr $3543			jsr 	ListOutputCharacter
.3634					_DTPrint:
.3634	a9 01		lda #$01			lda 	#1 							; fix case.
.3636	20 19 35	jsr $3519			jsr 	DTPrintLengthPrefix 		; print it out.
.3639	a0 00		ldy #$00			ldy 	#0
.363b	b1 2a		lda ($2a),y			lda 	(temp0),y
.363d	a8		tay				tay
.363e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3640	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3642	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3644	90 04		bcc $364a			bcc 	_DTIsNowPunctuation
.3646	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3648	90 05		bcc $364f			bcc 	_DTPExit
.364a					_DTIsNowPunctuation:
.364a	a9 01		lda #$01			lda 	#1
.364c	8d 1d 0c	sta $0c1d			sta		LastCharacterClass
.364f					_DTPExit:
.364f	68		pla				pla
.3650	a8		tay				tay
.3651	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c20					currentSet:
>0c20							.fill 	1
.3652					TokenSearch:
.3652	8a		txa				txa
.3653	48		pha				pha
.3654	98		tya				tya
.3655	48		pha				pha
.3656	a9 00		lda #$00			lda 	#0
.3658	8d 20 0c	sta $0c20			sta 	currentSet
.365b					_TSLoop:
.365b	ad 20 0c	lda $0c20			lda 	currentSet 					; 2 x currentset in X
.365e	0a		asl a				asl 	a
.365f	aa		tax				tax
.3660	bd ea 38	lda $38ea,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3663	85 2a		sta $2a				sta 	temp0
.3665	bd eb 38	lda $38eb,x			lda 	TokenTableAddress+1,x
.3668	85 2b		sta $2b				sta 	temp0+1
.366a	20 91 36	jsr $3691			jsr 	TokenSearchOne 				; search one table
.366d	b0 0d		bcs $367c			bcs 	_TSFound 					; found a token.
.366f	ee 20 0c	inc $0c20			inc 	currentSet 					; next set
.3672	ad 20 0c	lda $0c20			lda 	currentSet
.3675	c9 04		cmp #$04			cmp 	#4
.3677	d0 e2		bne $365b			bne 	_TSLoop 					; back if not done all four.
.3679	18		clc				clc 								; clear carry and exit
.367a	90 10		bcc $368c			bcc 	_TSExit
.367c					_TSFound:
.367c	48		pha				pha 								; save token
.367d	ad 20 0c	lda $0c20			lda 	currentSet					; if set zero no shift
.3680	f0 05		beq $3687			beq 	_TSNoShift
.3682	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3684	20 40 37	jsr $3740			jsr 	TokenWrite
.3687					_TSNoShift:
.3687	68		pla				pla 								; get token back
.3688	20 40 37	jsr $3740			jsr 	TokenWrite 					; write it
.368b	38		sec				sec 								; carry set indicating success
.368c					_TSExit:
.368c	68		pla				pla
.368d	a8		tay				tay
.368e	68		pla				pla
.368f	aa		tax				tax
.3690	60		rts				rts
.3691					TokenSearchOne:
.3691	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3693					_TSOLoop:
.3693	a0 00		ldy #$00			ldy 	#0
.3695	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3697	f0 26		beq $36bf			beq 	_TSOFail 					; if zero, end of table
.3699	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.369c	f0 11		beq $36af			beq 	_TSOCheckText
.369e					_TSONext:
.369e	e8		inx				inx 								; bump token
.369f	a0 00		ldy #$00			ldy 	#0							; get length
.36a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.36a3	38		sec				sec
.36a4	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.36a6	85 2a		sta $2a				sta 	temp0
.36a8	90 e9		bcc $3693			bcc 	_TSOLoop
.36aa	e6 2b		inc $2b				inc 	temp0+1
.36ac	4c 93 36	jmp $3693			jmp 	_TSOLoop
.36af					_TSOCheckText:
.36af	a8		tay				tay 								; compare length downto 1.
.36b0					_TSOCheckLoop:
.36b0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.36b2	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.36b5	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.36b7	d0 e5		bne $369e			bne 	_TSONext 					; different goto next.
.36b9	88		dey				dey 								; do all
.36ba	d0 f4		bne $36b0			bne 	_TSOCheckLoop
.36bc	8a		txa				txa 								; return token in A and carry set
.36bd	38		sec				sec
.36be	60		rts				rts
.36bf					_TSOFail:
.36bf	18		clc				clc
.36c0	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.36c1					TokTest:
.36c1	a2 ff		ldx #$ff				ldx 	#$FF
.36c3	9a		txs					txs
.36c4	a9 e1		lda #$e1			lda 	#(TokenText1) & $FF
.36c6	85 28		sta $28				sta 	codePtr
.36c8	a9 36		lda #$36			lda 	#(TokenText1) >> 8
.36ca	85 29		sta $29				sta 	1+(codePtr)
.36cc	20 e1 36	jsr $36e1				jsr 	Tokenise
.36cf	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.36d1	bd e1 36	lda $36e1,x	_TokCheck:	lda 	TokenBytes1,x
.36d4	dd 24 0c	cmp $0c24,x				cmp 	tokenBuffer,x
.36d7	d0 fe		bne $36d7	_TokFail:	bne 	_TokFail	 		; error.
.36d9	e8		inx					inx
.36da	c9 80		cmp #$80				cmp 	#$80
.36dc	d0 f3		bne $36d1				bne 	_TokCheck
.36de	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.36e1					TokenText1:
.36e1					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c21					tokenHeader:
>0c21							.fill 	3
.0c24					tokenBuffer:
>0c24							.fill 	256
.0d24					tokenBufferIndex:
>0d24							.fill 	1
.36e1					Tokenise:
.36e1	20 59 37	jsr $3759			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.36e4					TokeniseASCIIZ:
.36e4	20 6a 37	jsr $376a			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.36e7	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.36e9	8d 24 0d	sta $0d24			sta 	tokenBufferIndex
.36ec	a8		tay				tay 								; start pointer
.36ed	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.36ef	8d 24 0c	sta $0c24			sta 	tokenBuffer
.36f2					_TokLoop:
.36f2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.36f4	f0 46		beq $373c			beq 	_TokExit 					; if zero, then exit.
.36f6	c8		iny				iny 								; skip over spaces.
.36f7	c9 20		cmp #$20			cmp 	#" "
.36f9	f0 f7		beq $36f2			beq 	_TokLoop
.36fb	88		dey				dey 								; point back to character.
.36fc	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.36fe	f0 18		beq $3718			beq 	_TokHexConst
.3700	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3702	f0 23		beq $3727			beq 	_TokQString
.3704	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3706	b0 26		bcs $372e			bcs 	_TokPunctuation
.3708	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.370a	b0 29		bcs $3735			bcs 	_TokIdentifier
.370c	c9 3a		cmp #$3a			cmp 	#"9"+1
.370e	b0 1e		bcs $372e			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3710	c9 30		cmp #$30			cmp 	#"0"
.3712	90 1a		bcc $372e			bcc 	_TokPunctuation 			; < 0, punctuation.
.3714	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3716	d0 08		bne $3720			bne 	_TokConst
.3718					_TokHexConst:
.3718	c8		iny				iny									; consume token.
.3719	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.371b	20 40 37	jsr $3740			jsr 	TokenWrite
.371e	a9 10		lda #$10			lda 	#16
.3720					_TokConst:
.3720	20 28 38	jsr $3828			jsr 	TokeniseInteger
.3723	b0 cd		bcs $36f2			bcs 	_TokLoop
.3725	90 17		bcc $373e			bcc 	_TokFail
.3727					_TokQString:
.3727	20 be 38	jsr $38be			jsr 	TokeniseString
.372a	b0 c6		bcs $36f2			bcs 	_TokLoop
.372c	90 10		bcc $373e			bcc 	_TokFail
.372e					_TokPunctuation:
.372e	20 9d 38	jsr $389d			jsr 	TokenisePunctuation
.3731	b0 bf		bcs $36f2			bcs 	_TokLoop
.3733	90 09		bcc $373e			bcc 	_TokFail
.3735					_TokIdentifier:
.3735	20 99 37	jsr $3799			jsr 	TokeniseIdentifier
.3738	b0 b8		bcs $36f2			bcs 	_TokLoop
.373a	90 02		bcc $373e			bcc 	_TokFail
.373c					_TokExit:
.373c	38		sec				sec
.373d	60		rts				rts
.373e					_TokFail:
.373e	18		clc				clc
.373f	60		rts				rts
.3740					TokenWrite:
.3740	85 32		sta $32				sta 	tempShort 					; save XA
.3742	48		pha				pha
.3743	8a		txa				txa
.3744	48		pha				pha
.3745	a5 32		lda $32				lda 	tempShort
.3747	ae 24 0d	ldx $0d24			ldx 	tokenBufferIndex 			; geet index
.374a	9d 24 0c	sta $0c24,x			sta 	tokenBuffer,x 				; write byte to buffer
.374d	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.374f	9d 25 0c	sta $0c25,x			sta 	tokenBuffer+1,x
.3752	ee 24 0d	inc $0d24			inc 	tokenBufferIndex 			; bump index
.3755	68		pla				pla
.3756	aa		tax				tax
.3757	68		pla				pla
.3758	60		rts				rts
.3759					TokeniseMakeASCIIZ:
.3759	a0 00		ldy #$00			ldy 	#0							; get length of string.
.375b	b1 28		lda ($28),y			lda 	(codePtr),y
.375d	a8		tay				tay
.375e	c8		iny				iny 								; +1, the NULL goes here.
.375f	a9 00		lda #$00			lda 	#0
.3761	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3763	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3765	d0 02		bne $3769			bne 	_TMKAExit
.3767	e6 29		inc $29				inc 	codePtr+1
.3769					_TMKAExit:
.3769	60		rts				rts
.376a					TokeniseFixCase:
.376a	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.376c	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.376e					_TFCFlipQ:
.376e	8a		txa				txa
.376f	49 01		eor #$01			eor 	#1
.3771	aa		tax				tax
.3772					_TFCLoop:
.3772	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3774	f0 22		beq $3798			beq 	_TFCExit 					; if zero exit.
.3776	c9 20		cmp #$20			cmp 	#32 						; if control
.3778	90 1a		bcc $3794			bcc 	_TFCControl
.377a	c8		iny				iny 								; preconsume
.377b	c9 22		cmp #$22			cmp 	#'"'
.377d	f0 ef		beq $376e			beq 	_TFCFlipQ
.377f	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3781	90 ef		bcc $3772			bcc 	_TFCLoop
.3783	c9 7b		cmp #$7b			cmp 	#"z"+1
.3785	b0 eb		bcs $3772			bcs 	_TFCLoop
.3787	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3789	d0 e7		bne $3772			bne 	_TFCLoop
.378b	88		dey				dey
.378c	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.378e					_TFCWrite:
.378e	91 28		sta ($28),y			sta 	(codePtr),y
.3790	c8		iny				iny
.3791	4c 72 37	jmp $3772			jmp 	_TFCLoop
.3794					_TFCControl:
.3794	a9 20		lda #$20			lda 	#" "
.3796	d0 f6		bne $378e			bne 	_TFCWrite
.3798					_TFCExit:
.3798	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3799					TokeniseIdentifier:
.3799	a2 00		ldx #$00			ldx 	#0
.379b					_TICopyID:
.379b	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.379d	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.379f	f0 16		beq $37b7			beq 	_TICopyUnderscore
.37a1	c9 2e		cmp #$2e			cmp 	#"."
.37a3	f0 14		beq $37b9			beq 	_TICopyIn
.37a5	c9 30		cmp #$30			cmp 	#"0"
.37a7	90 1b		bcc $37c4			bcc 	_TIEndCopy
.37a9	c9 3a		cmp #$3a			cmp 	#"9"+1
.37ab	90 0c		bcc $37b9			bcc 	_TICopyIn
.37ad	c9 41		cmp #$41			cmp 	#"A"
.37af	90 13		bcc $37c4			bcc 	_TIEndCopy
.37b1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.37b3	b0 0f		bcs $37c4			bcs		_TIEndCopy
.37b5	90 02		bcc $37b9			bcc 	_TICopyIn
.37b7					_TICopyUnderScore:
.37b7	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.37b9					_TICopyIn:
.37b9	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.37ba	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.37bd	8e cf 0a	stx $0acf			stx 	convertBuffer
.37c0	c8		iny				iny 								; next character
.37c1	4c 9b 37	jmp $379b			jmp 	_TICopyID 					; loop round
.37c4					_TIEndCopy:
.37c4	a9 24		lda #$24			lda 	#"$"
.37c6	20 1b 38	jsr $381b			jsr 	TIDCheckCopy
.37c9	a9 23		lda #$23			lda 	#"#"
.37cb	20 1b 38	jsr $381b			jsr 	TIDCheckCopy
.37ce	a9 28		lda #$28			lda 	#"("
.37d0	20 1b 38	jsr $381b			jsr 	TIDCheckCopy
.37d3	20 52 36	jsr $3652			jsr 	TokenSearch 				; is it a token
.37d6	b0 41		bcs $3819			bcs 	_TIExit 					; if so, then exit.
.37d8	98		tya				tya
.37d9	48		pha				pha
.37da	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.37dc	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.37df	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.37e2	c9 28		cmp #$28			cmp 	#"("
.37e4	d0 02		bne $37e8			bne 	_TINotArray
.37e6	ca		dex				dex 								; yes, remove it and convert to array.
.37e7	c8		iny				iny
.37e8					_TINotArray:
.37e8	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.37eb	c9 24		cmp #$24			cmp 	#"$"
.37ed	d0 03		bne $37f2			bne 	_TINotString
.37ef	ca		dex				dex
.37f0	c8		iny				iny
.37f1	c8		iny				iny
.37f2					_TINotString:
.37f2	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.37f5	c9 23		cmp #$23			cmp 	#"#"
.37f7	d0 05		bne $37fe			bne 	_TINotFloat
.37f9	ca		dex				dex
.37fa	c8		iny				iny
.37fb	c8		iny				iny
.37fc	c8		iny				iny
.37fd	c8		iny				iny
.37fe					_TINotFloat:
.37fe	e8		inx				inx 								; write end marker for identifier.
.37ff	98		tya				tya
.3800	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3803	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3806	a2 01		ldx #$01			ldx 	#1
.3808					_TIOutput:
.3808	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.380b	29 3f		and #$3f			and 	#$3F
.380d	48		pha				pha
.380e	20 40 37	jsr $3740			jsr 	TokenWrite
.3811	e8		inx				inx
.3812	68		pla				pla
.3813	c9 3a		cmp #$3a			cmp 	#$3A
.3815	90 f1		bcc $3808			bcc 	_TIOutput
.3817	68		pla				pla
.3818	a8		tay				tay
.3819					_TIExit:
.3819	38		sec				sec 								; this can't fail.
.381a	60		rts				rts
.381b					TIDCheckCopy:
.381b	d1 28		cmp ($28),y			cmp 	(codePtr),y
.381d	d0 08		bne $3827			bne 	_TIDCCExit
.381f	e8		inx				inx
.3820	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3823	8e cf 0a	stx $0acf			stx 	convertBuffer
.3826	c8		iny				iny
.3827					_TIDCCExit:
.3827	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3828					TokeniseInteger:
.3828	85 2c		sta $2c				sta 	temp1 						; save base
.382a	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.382c	8e cf 0a	stx $0acf			stx 	convertBuffer
.382f					_TIGetChars:
.382f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3831	c9 30		cmp #$30			cmp 	#"0"
.3833	90 1f		bcc $3854			bcc 	_TIEndGet
.3835	c9 3a		cmp #$3a			cmp 	#"9"+1
.3837	90 10		bcc $3849			bcc 	_TIHaveChar
.3839	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.383b	c9 0a		cmp #$0a			cmp 	#10
.383d	f0 15		beq $3854			beq 	_TIEndGet
.383f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3841	c9 41		cmp #$41			cmp 	#"A"
.3843	90 0f		bcc $3854			bcc 	_TIEndGet
.3845	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3847	b0 0b		bcs $3854			bcs 	_TIEndGet
.3849					_TIHaveChar:
.3849	e8		inx				inx 								; write into buffer.
.384a	8e cf 0a	stx $0acf			stx 	convertBuffer
.384d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3850	c8		iny				iny 								; next char
.3851	4c 2f 38	jmp $382f			jmp 	_TIGetChars
.3854					_TIEndGet:
.3854	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3856	f0 1c		beq $3874			beq 	_TIFail
.3858	98		tya				tya
.3859	48		pha				pha
.385a	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.385c	85 2a		sta $2a				sta 	temp0
.385e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3860	85 2b		sta $2b				sta 	1+(temp0)
.3862	a9 00		lda #$00			lda 	#0 							; stack level 0
.3864	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3866	a2 14		ldx #$14		ldx	#20
.3868	20 6f 31	jsr $316f		jsr	mainHandler
.386b	68		pla				pla
.386c	a8		tay				tay
.386d	90 05		bcc $3874			bcc 	_TIFail 					; didn't convert.
.386f	20 76 38	jsr $3876			jsr 	TIRecursiveOut 				; recursive output ?
.3872	38		sec				sec
.3873	60		rts				rts
.3874					_TIFail:
.3874	18		clc				clc
.3875	60		rts				rts
.3876					TIRecursiveOut:
.3876	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.3878	29 3f		and #$3f			and 	#$3F
.387a	09 40		ora #$40			ora 	#$40
.387c	48		pha				pha
.387d	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.387f	29 c0		and #$c0			and 	#$C0
.3881	05 50		ora $50				ora 	esInt1
.3883	05 58		ora $58				ora 	esInt2
.3885	05 60		ora $60				ora 	esInt3
.3887	f0 10		beq $3899			beq 	_TIRONoRecursion
.3889	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.388b					_TIROShift:
.388b	46 60		lsr $60				lsr 	esInt3
.388d	66 58		ror $58				ror 	esInt2
.388f	66 50		ror $50				ror 	esInt1
.3891	66 48		ror $48				ror 	esInt0
.3893	ca		dex				dex
.3894	d0 f5		bne $388b			bne 	_TIROShift
.3896	20 76 38	jsr $3876			jsr 	TIRecursiveOut 				; call recursively
.3899					_TIRONoRecursion:
.3899	68		pla				pla 								; pull the old bit.
.389a	4c 40 37	jmp $3740			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.389d					TokenisePunctuation:
.389d	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.389f	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.38a2	c8		iny				iny
.38a3	b1 28		lda ($28),y			lda 	(codePtr),y
.38a5	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.38a8	c8		iny				iny 								; Y is +2
.38a9	a9 02		lda #$02			lda 	#2 							; 2 character string.
.38ab	8d cf 0a	sta $0acf			sta 	convertBuffer
.38ae	20 52 36	jsr $3652			jsr 	TokenSearch 				; search for that token.
.38b1	b0 0a		bcs $38bd			bcs 	_TIFound
.38b3	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.38b6	88		dey				dey 								; Y is now +1
.38b7	20 52 36	jsr $3652			jsr 	TokenSearch 				; search for that token.
.38ba	b0 01		bcs $38bd			bcs 	_TIFound
.38bc	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.38bd					_TIFound:
.38bd	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.38be					TokeniseString:
.38be	c8		iny				iny 								; skip opening quote
.38bf	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.38c1	84 2a		sty $2a				sty 	temp0 						; save start.
.38c3					_TSGetLength:
.38c3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.38c5	f0 21		beq $38e8			beq 	_TSFail						; end of line, fail
.38c7	c8		iny				iny
.38c8	e8		inx				inx
.38c9	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.38cb	d0 f6		bne $38c3			bne 	_TSGetLength
.38cd	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.38cf	20 40 37	jsr $3740			jsr 	TokenWrite
.38d2	8a		txa				txa 								; output length
.38d3	20 40 37	jsr $3740			jsr 	TokenWrite
.38d6	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.38d8	e0 00		cpx #$00			cpx 	#0 							; check ended
.38da	f0 09		beq $38e5			beq 	_TSExit
.38dc					_TSOutput:
.38dc	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.38de	20 40 37	jsr $3740			jsr 	TokenWrite
.38e1	c8		iny				iny
.38e2	ca		dex				dex
.38e3	d0 f7		bne $38dc			bne 	_TSOutput
.38e5					_TSExit:
.38e5	c8		iny				iny 								; skip ending quote
.38e6	38		sec				sec 								; return CS.
.38e7	60		rts				rts
.38e8					_TSFail:
.38e8	18		clc				clc
.38e9	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.38ea					TokenTableAddress:
>38ea	f2 38						.word 	Group0Text
>38ec	bf 3a						.word 	Group1Text
>38ee	fa 3b						.word 	Group2Text
>38f0	0d 3c						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.38f2					Group0Text:
>38f2	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>38f6	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>38f9	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>38fd	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3900	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3903	01 be					.byte $01,$be                          ; $8b >
>3905	01 bc					.byte $01,$bc                          ; $8c <
>3907	01 bd					.byte $01,$bd                          ; $8d =
>3909	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>390c	01 ab					.byte $01,$ab                          ; $8f +
>390e	01 ad					.byte $01,$ad                          ; $90 -
>3910	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3913	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3916	01 aa					.byte $01,$aa                          ; $93 *
>3918	01 af					.byte $01,$af                          ; $94 /
>391a	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>391e	01 de					.byte $01,$de                          ; $96 ^
>3920	01 a1					.byte $01,$a1                          ; $97 !
>3922	01 bf					.byte $01,$bf                          ; $98 ?
>3924	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>392b	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3931	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3935	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3938	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3940	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3946	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>394b	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3950	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3955	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>395b	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3963	01 a8					.byte $01,$a8                          ; $a4 (
>3965	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>396a	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>396f	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3974	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>397c	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3981	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3986	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>398c	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3991	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3996	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>399b	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>39a2	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>39a9	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>39ae	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>39b5	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>39bc	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>39c2	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>39c9	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>39cf	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>39d7	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>39dd	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>39e2	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>39e8	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>39ee	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>39f4	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>39f9	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>39fe	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3a05	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3a0c	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3a14	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3a1c	01 c0					.byte $01,$c0                          ; $c3 @
>3a1e	01 fe					.byte $01,$fe                          ; $c4 ~
>3a20	01 a6					.byte $01,$a6                          ; $c5 &
>3a22	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3a28	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3a30	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3a34	01 a9					.byte $01,$a9                          ; $c9 )
>3a36	01 ba					.byte $01,$ba                          ; $ca :
>3a38	01 ac					.byte $01,$ac                          ; $cb ,
>3a3a	01 bb					.byte $01,$bb                          ; $cc ;
>3a3c	01 a7					.byte $01,$a7                          ; $cd '
>3a3e	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3a41	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3a46	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3a4b	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3a51	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3a55	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3a59	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3a5d	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3a63	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3a68	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3a6c	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3a72	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3a77	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3a7d	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3a84	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3a89	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3a90	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3a95	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3a9a	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3a9f	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3aa3	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3aa9	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3aad	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3ab4	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3aba	01 ae					.byte $01,$ae                          ; $e6 .
>3abc	01 a3					.byte $01,$a3                          ; $e7 #
>3abe	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3abf					Group1Text:
>3abf	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3ac5	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3aca	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3acf	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3ad4	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3ad8	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3adc	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3ae1	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3ae9	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3aed	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3af2	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3af7	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3afb	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3b01	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>3b05	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3b09	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3b0d	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3b11	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>3b15	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3b19	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3b1d	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3b21	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>3b25	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3b29	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3b2d	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3b31	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>3b35	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3b39	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3b3d	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3b41	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>3b45	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>3b49	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>3b4d	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>3b51	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3b55	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3b59	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3b5d	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3b61	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3b65	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3b69	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3b6d	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3b71	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3b75	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3b79	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3b7d	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3b81	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3b85	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3b89	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3b8d	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3b91	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3b95	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3b99	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3b9d	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3ba1	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3ba5	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3ba9	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3bad	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3bb1	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3bb5	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3bb9	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3bbd	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3bc1	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3bc5	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3bc9	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3bcd	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3bd1	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3bd5	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3bd9	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3bdd	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3be1	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3be5	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3be9	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3bed	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3bf1	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3bf5	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3bf9	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3bfa					Group2Text:
>3bfa	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3c00	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3c06	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3c0c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3c0d					Group3Text:
>3c0d	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3c14	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3c1b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3c1c					tokeniserHandler:
.3c1c	7c 1f 3c	jmp ($3c1f,x)			jmp 	(tokeniserVectors,x)
.3c1f					tokeniserVectors:
>3c1f	44 34					.word Detokenise           ; index 0
>3c21	38 34					.word ListLine             ; index 2
>3c23	c1 36					.word TokTest              ; index 4
>3c25	e1 36					.word Tokenise             ; index 6
>3c27	e4 36					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3c29					section_end_tokeniser:
.3c29					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d25					varHash:
>0d25							.fill	1
.0d26					varType:
>0d26							.fill 	1
.0d27					varEnd:
>0d27							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3c29					AccessVariable:
.3c29	aa		tax				tax 								; stack in X
.3c2a	c8		iny				iny									; look at second character
.3c2b	b1 28		lda ($28),y			lda 	(codePtr),y
.3c2d	88		dey				dey
.3c2e	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3c30	d0 15		bne $3c47			bne 	_AVLong 					; no, always use the hash tables.
.3c32	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3c34	38		sec				sec 	 							; make it 0-25
.3c35	e9 01		sbc #$01			sbc 	#1
.3c37	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3c38	0a		asl a				asl 	a
.3c39	95 48		sta $48,x			sta 	esInt0,x
.3c3b	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3c3d	95 50		sta $50,x			sta 	esInt1,x
.3c3f	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3c41	95 40		sta $40,x			sta 	esType,x
.3c43	c8		iny				iny 								; skip over the variable reference in the code.
.3c44	c8		iny				iny  								; (1 letter, 1 type)
.3c45	8a		txa				txa 								; stack in A to return.
.3c46	60		rts				rts
.3c47					_AVLong:
.3c47	8a		txa				txa
.3c48	48		pha				pha
.3c49	20 90 3c	jsr $3c90			jsr 	AccessSetup 				; set up the basic information we need for later
.3c4c	20 d2 3e	jsr $3ed2			jsr 	FindVariable 				; does the variable exist already ?
.3c4f	b0 0e		bcs $3c5f			bcs 	_AVFound 					; yes, then its found
.3c51	ad 26 0d	lda $0d26			lda 	varType 					; otherwise, is the variable type an array
.3c54	4a		lsr a				lsr 	a
.3c55	90 05		bcc $3c5c			bcc 	_AVCanCreate 				; if not, we can autocreate
.3c57	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3c59	20 e0 14	jsr $14e0		jsr	errorHandler
.3c5c					_AVCanCreate:
.3c5c	20 45 3d	jsr $3d45			jsr 	CreateVariable 				; variable does not exist, create it.
.3c5f					_AVFound:
.3c5f	68		pla				pla
.3c60	aa		tax				tax
.3c61	18		clc				clc 								; copy temp0 (variable record address)
.3c62	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3c64	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3c66	95 48		sta $48,x			sta 	esInt0,x
.3c68	a5 2b		lda $2b				lda 	temp0+1
.3c6a	69 00		adc #$00			adc 	#0
.3c6c	95 50		sta $50,x			sta 	esInt1,x
.3c6e	a9 00		lda #$00			lda 	#0
.3c70	95 58		sta $58,x			sta 	esInt2,x
.3c72	95 60		sta $60,x			sta 	esInt3,x
.3c74	ac 26 0d	ldy $0d26			ldy 	varType 					; get the type ID from the type.
.3c77	b9 50 3c	lda $3c50,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3c7a	95 40		sta $40,x			sta 	esType,x
.3c7c	ac 27 0d	ldy $0d27			ldy 	varEnd 						; restore Y
.3c7f	ad 26 0d	lda $0d26			lda 	VarType 					; get variable type, put LSB into C
.3c82	4a		lsr a				lsr 	a
.3c83	90 03		bcc $3c88			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3c85	20 cd 3c	jsr $3ccd			jsr 	AccessArray 				; array lookup. if LSB was set.
.3c88					_AVNotArray:
.3c88	8a		txa				txa 								; return stack in A and return
.3c89	60		rts				rts
.3c8a					_AVTypeTable:
>3c8a	80 80						.byte 	$80,$80						; integer
>3c8c	c0 c0						.byte 	$C0,$C0 					; string
>3c8e	81 81						.byte 	$81,$81 					; float
.3c90					AccessSetup:
.3c90	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3c92	8d 25 0d	sta $0d25			sta 	varHash
.3c95	98		tya				tya
.3c96	48		pha				pha
.3c97	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3c99	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3c9b	b0 0b		bcs $3ca8			bcs 	_ASComplete
.3c9d	18		clc				clc 								; add to the hash. Might improve this.
.3c9e	6d 25 0d	adc $0d25			adc 	varHash
.3ca1	8d 25 0d	sta $0d25			sta 	varHash
.3ca4	c8		iny				iny 								; next character
.3ca5	4c 97 3c	jmp $3c97			jmp 	_ASLoop
.3ca8					_ASComplete:
.3ca8	8d 26 0d	sta $0d26			sta 	varType 					; save variable type byte
.3cab	c8		iny				iny
.3cac	8c 27 0d	sty $0d27			sty 	varEnd 						; save the ending position.
.3caf	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3cb0	e9 3a		sbc #$3a			sbc 	#$3A
.3cb2	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3cb3	0a		asl a				asl 	a
.3cb4	0a		asl a				asl 	a
.3cb5	0a		asl a				asl 	a 							; 2 bytes/word
.3cb6	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3cb8	ad 25 0d	lda $0d25			lda 	varHash 					; get hash
.3cbb	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3cbd	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3cbe	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3cc0	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3cc2	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3cc4	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3cc6	69 00		adc #$00			adc 	#0
.3cc8	85 3c		sta $3c				sta 	hashList+1
.3cca	68		pla				pla
.3ccb	a8		tay				tay
.3ccc	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3ccd					AccessArray:
.3ccd	e8		inx				inx
.3cce	8a		txa				txa
.3ccf	a2 06		ldx #$06		ldx	#6
.3cd1	20 6f 31	jsr $316f		jsr	mainHandler
.3cd4	48		pha				pha
.3cd5	a2 00		ldx #$00		ldx	#0
.3cd7	20 6f 31	jsr $316f		jsr	mainHandler
.3cda	68		pla				pla
.3cdb	aa		tax				tax
.3cdc	ca		dex				dex
.3cdd	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3cdf	15 59		ora $59,x			ora 	esInt2+1,x
.3ce1	d0 33		bne $3d16			bne 	_AABadIndex
.3ce3	98		tya				tya
.3ce4	48		pha				pha
.3ce5	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3ce7	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3ce9	b5 50		lda $50,x			lda 	esInt1,x
.3ceb	85 2b		sta $2b				sta 	temp0+1
.3ced	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3cef	b5 49		lda $49,x			lda 	esInt0+1,x
.3cf1	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3cf3	c8		iny				iny
.3cf4	b5 51		lda $51,x			lda 	esInt1+1,x
.3cf6	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3cf8	b0 1c		bcs $3d16			bcs 	_AABadIndex 				; if >= then fail.
.3cfa	e8		inx				inx 								; point to index
.3cfb	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3cfd	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cff	20 1b 3d	jsr $3d1b			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3d02	ca		dex				dex
.3d03	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3d05	18		clc				clc
.3d06	b5 49		lda $49,x			lda 	esInt0+1,x
.3d08	71 2a		adc ($2a),y			adc 	(temp0),y
.3d0a	95 48		sta $48,x			sta 	esInt0,x
.3d0c	b5 51		lda $51,x			lda 	esInt1+1,x
.3d0e	c8		iny				iny
.3d0f	71 2a		adc ($2a),y			adc 	(temp0),y
.3d11	95 50		sta $50,x			sta 	esInt1,x
.3d13	68		pla				pla
.3d14	a8		tay				tay
.3d15	60		rts				rts
.3d16					_AABadIndex:
.3d16	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3d18	20 e0 14	jsr $14e0		jsr	errorHandler
.3d1b					MultiplyTOSByA:
.3d1b	48		pha				pha
.3d1c	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3d1e	85 2c		sta $2c				sta 	temp1
.3d20	b5 50		lda $50,x			lda 	esInt1,x
.3d22	85 2d		sta $2d				sta 	temp1+1
.3d24	68		pla				pla
.3d25	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3d27	36 50		rol $50,x			rol 	esInt1,x
.3d29	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3d2b	f0 17		beq $3d44			beq 	_MTBAExit
.3d2d	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3d2f	d0 0f		bne $3d40			bne 	_MTBANotFloat
.3d31	48		pha				pha
.3d32	18		clc				clc 								; so this will make it x 3
.3d33	b5 48		lda $48,x			lda 	esInt0,x
.3d35	65 2c		adc $2c				adc 	temp1
.3d37	95 48		sta $48,x			sta 	esInt0,x
.3d39	b5 50		lda $50,x			lda 	esInt1,x
.3d3b	65 2d		adc $2d				adc 	temp1+1
.3d3d	95 50		sta $50,x			sta 	esInt1,x
.3d3f	68		pla				pla
.3d40					_MTBANotFloat:
.3d40	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3d42	36 50		rol $50,x			rol 	esInt1,x
.3d44					_MTBAExit:
.3d44	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3d45					CreateVariable:
.3d45	98		tya				tya 								; push Y on the stack twice.
.3d46	48		pha				pha									; position in code of the new variable.
.3d47	48		pha				pha
.3d48	ae 26 0d	ldx $0d26			ldx 	varType 					; get var type 0-5 from the var type
.3d4b	bd 6f 3d	lda $3d6f,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3d4e	48		pha				pha 								; save length
.3d4f	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3d51	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3d53	a5 36		lda $36				lda 	lowMemory+1
.3d55	85 2b		sta $2b				sta 	temp0+1
.3d57	68		pla				pla 								; get length
.3d58	18		clc				clc 								; add to low memory.
.3d59	65 35		adc $35				adc 	lowMemory
.3d5b	85 35		sta $35				sta 	lowMemory
.3d5d	90 08		bcc $3d67			bcc 	_CVNoCarry
.3d5f	e6 36		inc $36				inc 	lowMemory+1
.3d61	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3d63	c5 34		cmp $34				cmp 	highMemory+1
.3d65	b0 3d		bcs $3da4			bcs 	_CVMemory
.3d67					_CVNoCarry:
.3d67	ad 25 0d	lda $0d25			lda 	varHash 					; store hash at offset 4.
.3d6a	a0 04		ldy #$04			ldy 	#4
.3d6c	91 2a		sta ($2a),y			sta 	(temp0),y
.3d6e	68		pla				pla 								; offset, work out where the variable name is.
.3d6f	18		clc				clc
.3d70	65 28		adc $28				adc 	codePtr
.3d72	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3d74	91 2a		sta ($2a),y			sta 	(temp0),y
.3d76	a5 29		lda $29				lda 	codePtr+1
.3d78	69 00		adc #$00			adc 	#0
.3d7a	c8		iny				iny
.3d7b	91 2a		sta ($2a),y			sta 	(temp0),y
.3d7d	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3d80	b0 03		bcs $3d85			bcs 	_CVNotImmediate
.3d82	20 e7 3d	jsr $3de7			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3d85					_CVNotImmediate:
.3d85	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3d87	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3d89	91 2a		sta ($2a),y			sta 	(temp0),y
.3d8b	c8		iny				iny
.3d8c	b1 3b		lda ($3b),y			lda 	(hashList),y
.3d8e	91 2a		sta ($2a),y			sta 	(temp0),y
.3d90	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3d92	91 3b		sta ($3b),y			sta 	(hashList),y
.3d94	88		dey				dey
.3d95	a5 2a		lda $2a				lda 	temp0
.3d97	91 3b		sta ($3b),y			sta 	(hashList),y
.3d99	ad 26 0d	lda $0d26			lda 	varType 					; type in A
.3d9c	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3d9e	20 af 3d	jsr $3daf			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3da1	68		pla				pla
.3da2	a8		tay				tay
.3da3	60		rts				rts
.3da4					_CVMemory:
.3da4	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3da6	20 e0 14	jsr $14e0		jsr	errorHandler
>3da9	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3dab	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3dad	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3daf					ZeroTemp0Y:
.3daf	4a		lsr a				lsr 	a 							; bit 0 in carry
.3db0	0a		asl a				asl 	a
.3db1	b0 19		bcs $3dcc			bcs 	_ZTExit 					; we don't initialise arrays.
.3db3	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3db5	f0 16		beq $3dcd			beq 	_ZTWriteNullString 			; write "" string
.3db7	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3db9	f0 22		beq $3ddd			beq 	_ZTWriteFloat
.3dbb	98		tya				tya
.3dbc	48		pha				pha
.3dbd	a9 00		lda #$00			lda 	#0
.3dbf	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc1	c8		iny				iny
.3dc2	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc4	c8		iny				iny
.3dc5	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc7	c8		iny				iny
.3dc8	91 2a		sta ($2a),y			sta 	(temp0),y
.3dca	68		pla				pla
.3dcb	a8		tay				tay
.3dcc					_ZTExit:
.3dcc	60		rts				rts
.3dcd					_ZTWriteNullString:
.3dcd	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3dcf	8d ce 0a	sta $0ace			sta 	NullString
.3dd2	a9 ce		lda #$ce			lda 	#NullString & $FF
.3dd4	91 2a		sta ($2a),y			sta 	(temp0),y
.3dd6	a9 0a		lda #$0a			lda 	#NullString >> 8
.3dd8	c8		iny				iny
.3dd9	91 2a		sta ($2a),y			sta 	(temp0),y
.3ddb	88		dey				dey
.3ddc	60		rts				rts
.3ddd					_ZTWriteFloat:
.3ddd	8a		txa				txa
.3dde	48		pha				pha
.3ddf	a2 1e		ldx #$1e		ldx	#30
.3de1	20 06 19	jsr $1906		jsr	floatingpointHandler
.3de4	68		pla				pla
.3de5	aa		tax				tax
.3de6	60		rts				rts
.3de7					CloneVariableName:
.3de7	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3de9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3deb	85 2e		sta $2e				sta 	temp2
.3ded	c8		iny				iny
.3dee	b1 2a		lda ($2a),y			lda 	(temp0),y
.3df0	85 2f		sta $2f				sta 	temp2+1
.3df2	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3df4	91 2a		sta ($2a),y			sta 	(temp0),y
.3df6	88		dey				dey
.3df7	a5 35		lda $35				lda 	lowMemory
.3df9	91 2a		sta ($2a),y			sta 	(temp0),y
.3dfb	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3dfd					_CVNCopy:
.3dfd	b1 2e		lda ($2e),y			lda		(temp2),y
.3dff	91 35		sta ($35),y			sta 	(lowMemory),y
.3e01	c8		iny				iny
.3e02	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3e04	90 f7		bcc $3dfd			bcc 	_CVNCopy
.3e06	98		tya				tya 								; add Y to low memory
.3e07	18		clc				clc
.3e08	65 35		adc $35				adc 	lowMemory
.3e0a	85 35		sta $35				sta 	lowMemory
.3e0c	90 02		bcc $3e10			bcc 	_CVNNoCarry
.3e0e	e6 36		inc $36				inc 	lowMemory+1
.3e10					_CVNNoCarry:
.3e10	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3e11					CreateArray:
.3e11	20 90 3c	jsr $3c90			jsr 	AccessSetup 				; set up the basic stuff.
.3e14	ad 26 0d	lda $0d26			lda 	varType 					; is the variable type an array
.3e17	4a		lsr a				lsr 	a
.3e18	90 3f		bcc $3e59			bcc 	_CANotArray 				; no, cause an error.
.3e1a	20 d2 3e	jsr $3ed2			jsr 	FindVariable 				; does the variable exist already
.3e1d	b0 35		bcs $3e54			bcs 	_CAFound 					; cannot redefine it.
.3e1f	20 45 3d	jsr $3d45			jsr 	CreateVariable 				; create the variable entry.
.3e22	ac 27 0d	ldy $0d27			ldy 	varEnd 						; point Y to the end of the variable entry.
.3e25	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3e27	48		pha				pha
.3e28	a5 2b		lda $2b				lda 	temp0+1
.3e2a	48		pha				pha
.3e2b	ad 26 0d	lda $0d26			lda 	varType 					; push variable type on the stack.
.3e2e	48		pha				pha
.3e2f	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3e31	a2 06		ldx #$06		ldx	#6
.3e33	20 6f 31	jsr $316f		jsr	mainHandler
.3e36	a2 00		ldx #$00		ldx	#0
.3e38	20 6f 31	jsr $316f		jsr	mainHandler
.3e3b	68		pla				pla 		 						; restore type and position.
.3e3c	8d 26 0d	sta $0d26			sta 	varType
.3e3f	68		pla				pla
.3e40	85 2b		sta $2b				sta 	temp0+1
.3e42	68		pla				pla
.3e43	85 2a		sta $2a				sta 	temp0
.3e45	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3e47	29 e0		and #$e0			and 	#$E0
.3e49	05 58		ora $58				ora 	esInt2
.3e4b	05 60		ora $60				ora 	esInt3
.3e4d	f0 0f		beq $3e5e			beq 	_CASizeOk
.3e4f					_CASize:
.3e4f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3e51	20 e0 14	jsr $14e0		jsr	errorHandler
.3e54					_CAFound:
.3e54	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3e56	20 e0 14	jsr $14e0		jsr	errorHandler
.3e59					_CANotArray:
.3e59	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3e5b	20 e0 14	jsr $14e0		jsr	errorHandler
.3e5e					_CASizeOk:
.3e5e	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3e60	d0 02		bne $3e64			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3e62	e6 49		inc $49				inc 	esInt0+1
.3e64					_CANoCarry:
.3e64	98		tya				tya
.3e65	48		pha				pha
.3e66	a0 05		ldy #$05			ldy 	#5
.3e68	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3e6a	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3e6c	c8		iny				iny
.3e6d	a5 36		lda $36				lda 	lowMemory+1
.3e6f	91 2a		sta ($2a),y			sta 	(temp0),y
.3e71	c8		iny				iny
.3e72	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3e74	91 2a		sta ($2a),y			sta 	(temp0),y
.3e76	c8		iny				iny
.3e77	a5 50		lda $50				lda 	esInt1
.3e79	91 2a		sta ($2a),y			sta 	(temp0),y
.3e7b	c8		iny				iny
.3e7c	ae 26 0d	ldx $0d26			ldx 	varType 					; get the length per element
.3e7f	bd 8b 3e	lda $3e8b,x			lda 	_CAActualSize-$3A-1,x
.3e82	91 2a		sta ($2a),y			sta 	(temp0),y
.3e84	aa		tax				tax 								; save size in X
.3e85	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3e87	85 2a		sta $2a				sta 	temp0
.3e89	a5 36		lda $36				lda 	lowMemory+1
.3e8b	85 2b		sta $2b				sta 	temp0+1
.3e8d	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3e8f	85 2c		sta $2c				sta 	temp1
.3e91	85 2d		sta $2d				sta 	temp1+1
.3e93					_CAInitialiseArray:
.3e93	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3e95	ad 26 0d	lda $0d26			lda 	varType 					; base type of array in A.
.3e98	29 fe		and #$fe			and 	#$FE
.3e9a	20 af 3d	jsr $3daf			jsr 	ZeroTemp0Y
.3e9d	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3e9e	18		clc				clc
.3e9f	65 2a		adc $2a				adc 	temp0
.3ea1	85 2a		sta $2a				sta 	temp0
.3ea3	85 35		sta $35				sta 	lowMemory
.3ea5	a5 2b		lda $2b				lda 	temp0+1
.3ea7	69 00		adc #$00			adc 	#0
.3ea9	85 2b		sta $2b				sta 	temp0+1
.3eab	85 36		sta $36				sta 	lowMemory+1
.3ead	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3eaf	b0 1c		bcs $3ecd			bcs 	_CAMemory
.3eb1	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3eb3	d0 02		bne $3eb7			bne 	_CAIANoCarry
.3eb5	e6 2d		inc $2d				inc 	temp1+1
.3eb7					_CAIANoCarry:
.3eb7	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3eb9	c5 2c		cmp $2c				cmp 	temp1
.3ebb	d0 d6		bne $3e93			bne 	_CAInitialiseArray
.3ebd	a5 50		lda $50				lda 	esInt1
.3ebf	c5 2d		cmp $2d				cmp 	temp1+1
.3ec1	d0 d0		bne $3e93			bne 	_CAInitialiseArray
.3ec3	68		pla				pla
.3ec4	a8		tay				tay
.3ec5	60		rts				rts
.3ec6					_CAActualSize:
>3ec6	04 00						.byte 	VarISize,0
>3ec8	02 00						.byte 	VarSSize,0
>3eca	06 00						.byte 	VarFSize,0
>3ecc	db						.byte 	$DB
.3ecd					_CAMemory:
.3ecd	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3ecf	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3ed2					FindVariable:
.3ed2	98		tya				tya
.3ed3	48		pha				pha
.3ed4	98		tya				tya 								; point temp2 to the actual name
.3ed5	18		clc				clc 								; in memory of the variable being created
.3ed6	65 28		adc $28				adc 	codePtr
.3ed8	85 2e		sta $2e				sta 	temp2
.3eda	a5 29		lda $29				lda 	codePtr+1
.3edc	69 00		adc #$00			adc 	#0
.3ede	85 2f		sta $2f				sta 	temp2+1
.3ee0	a0 00		ldy #$00			ldy 	#0
.3ee2	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3ee4	85 2a		sta $2a				sta 	temp0
.3ee6	a5 3c		lda $3c				lda 	hashList+1
.3ee8	85 2b		sta $2b				sta 	temp0+1
.3eea	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3eec	b1 2a		lda ($2a),y			lda 	(temp0),y
.3eee	f0 2c		beq $3f1c			beq 	_FVFail
.3ef0	aa		tax				tax
.3ef1	88		dey				dey		 							; get LSB
.3ef2	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ef4	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3ef6	86 2b		stx $2b				stx 	temp0+1
.3ef8	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3efa	b1 2a		lda ($2a),y			lda 	(temp0),y
.3efc	cd 25 0d	cmp $0d25			cmp 	varHash
.3eff	d0 e9		bne $3eea			bne 	_FVNext 					; if not, no point in checking the name.
.3f01	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3f02	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f04	85 2d		sta $2d				sta 	temp1+1
.3f06	88		dey				dey
.3f07	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f09	85 2c		sta $2c				sta 	temp1
.3f0b	a0 00		ldy #$00			ldy 	#0
.3f0d					_FVCheck:
.3f0d	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3f0f	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3f11	d0 d7		bne $3eea			bne 	_FVNext		 				; fail if different.
.3f13	c8		iny				iny
.3f14	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3f16	90 f5		bcc $3f0d			bcc 	_FVCheck
.3f18	68		pla				pla
.3f19	a8		tay				tay
.3f1a	38		sec				sec
.3f1b	60		rts				rts
.3f1c					_FVFail:
.3f1c	68		pla				pla
.3f1d	a8		tay				tay
.3f1e	18		clc				clc
.3f1f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3f20					HashTableReset:
.3f20	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3f22	a9 00		lda #$00			lda 	#0
.3f24					_HTRClear:
.3f24	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3f27	ca		dex				dex
.3f28	d0 fa		bne $3f24			bne 	_HTRClear
.3f2a	60		rts				rts

;******  Return to file: variable/variable.asm

.3f2b					variableHandler:
.3f2b	7c 2e 3f	jmp ($3f2e,x)			jmp 	(variableVectors,x)
.3f2e					variableVectors:
>3f2e	29 3c					.word AccessVariable       ; index 0
>3f30	11 3e					.word CreateArray          ; index 2
>3f32	20 3f					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3f34					section_end_variable:
.3f34					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d28					endStorage:
>3f34							.align 	256
.4000					programMemory:
>3fff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4000					section_end_footer:

;******  End of listing
