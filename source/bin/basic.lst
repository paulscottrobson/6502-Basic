
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Sat Apr 03 07:21:15 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=0					cputype = 0
=1					autorun=1
=0					coldstartnew=0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$91					TKW_PLOT                     = $91 ; plot
=$92					TKW_LINE                     = $92 ; line
=$93					TKW_PAINT                    = $93 ; paint
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	80 44						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4d		lda #$4d			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 53 26	jsr $2653		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 53 26	jsr $2653		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 ae 3f	jsr $3fae		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 37 48	jsr $4837		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 08 4c	jsr $4c08		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 37 48	jsr $4837		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 f1 3c	jsr $3cf1		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 f1 3c	jsr $3cf1		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 f1 3c	jsr $3cf1		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 08 4c	jsr $4c08		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 f1 3c	jsr $3cf1		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 53 26	jsr $2653		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 96 18	jmp ($1896,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c d2 21	jmp $21d2			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	00 23					.word	Command_VPoke            ; $86 vpoke
>1888	03 23					.word	Command_VDoke            ; $87 vdoke
>188a	d8 22					.word	Command_VLoad            ; $88 vload
>188c	e4 21					.word	CommandMode              ; $89 mode
>188e	a1 22					.word	CommandPalette           ; $8a palette
>1890	a9 1f					.word	CommandSprite            ; $8b sprite
>1892	d3 1d					.word	CommandClg               ; $8c clg
>1894	bc 1a					.word	Command_Rect             ; $8d rect
>1896	c4 1a					.word	Command_Frame            ; $8e frame
>1898	97 30					.word	Unimplemented            ; $8f draw
>189a	97 30					.word	Unimplemented            ; $90 text
>189c	a9 1a					.word	Command_Plot             ; $91 plot
>189e	83 19					.word	Command_Line             ; $92 line
>18a0	f4 20					.word	Command_Paint            ; $93 paint

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a2					Group3Vectors:
>18a2	4c 23					.word	Command_VPeek            ; $86 vpeek(
>18a4	4f 23					.word	Command_VDeek            ; $87 vdeek(
>18a6	a2 21					.word	Sprite_GetX              ; $88 sprite.x(
>18a8	a5 21					.word	Sprite_GetY              ; $89 sprite.y(
>18aa	ec 1e					.word	FunctionCollide          ; $8a hit(
>18ac	64 1e					.word	Unary_JoyX               ; $8b joy.x(
>18ae	67 1e					.word	Unary_JoyY               ; $8c joy.y(
>18b0	a2 1e					.word	Unary_JButton            ; $8d joy.b(
>18b2	37 1e					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b4					XEvaluateInteger:
.18b4	8a		txa				txa
.18b5	a2 0a		ldx #$0a		ldx	#10
.18b7	20 f1 3c	jsr $3cf1		jsr	mainHandler
.18ba	aa		tax				tax
.18bb	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gEndStorage:
.18bc					GResetStorage:
.18bc	8a		txa				txa
.18bd	48		pha				pha
.18be	a2 15		ldx #$15			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18c0	a9 00		lda #$00			lda 	#0
.18c2					_GRSLoop:
.18c2	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c5	ca		dex				dex
.18c6	10 fa		bpl $18c2			bpl 	_GRSLoop
.18c8	68		pla				pla
.18c9	aa		tax				tax
.18ca	60		rts				rts
.18cb					GHandler:
.18cb	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18ce	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18d1	88		dey				dey 								; predecrement
.18d2					_GHLoopNext:
.18d2	c8		iny				iny									; advance one character
.18d3					_GHLoop:
.18d3	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18d5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d7	f0 f9		beq $18d2			beq 	_GHLoopNext
.18d9	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18db	f0 4c		beq $1929			beq 	_GHExit
.18dd	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18df	f0 48		beq $1929			beq 	_GHExit
.18e1	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e3	f0 33		beq $1918			beq 	_GHCallHandler 				; update post & call the handler
.18e5	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e7	f0 2f		beq $1918			beq 	_GHCallHandler
.18e9	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18eb	f0 10		beq $18fd			beq 	_GHCPairSkip
.18ed	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18ef					_GHCheckTokens:
.18ef	b1 28		lda ($28),y			lda 	(codePtr),y
.18f1	dd 2a 19	cmp $192a,x			cmp 	_GHTokenTable,x
.18f4	f0 0e		beq $1904			beq 	_GHFoundToken
.18f6	e8		inx				inx
.18f7	bd 2a 19	lda $192a,x			lda 	_GHTokenTable,x
.18fa	d0 f3		bne $18ef			bne 	_GHCheckTokens
.18fc	88		dey				dey
.18fd					_GHCPairSkip:
.18fd	c8		iny				iny
.18fe					_GHCPair:
.18fe	20 30 19	jsr $1930			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1901	4c d3 18	jmp $18d3			jmp 	_GHLoop
.1904					_GHFoundToken:
.1904	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1905	8a		txa				txa
.1906	48		pha				pha
.1907	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1909	a2 0c		ldx #$0c		ldx	#12
.190b	20 f1 3c	jsr $3cf1		jsr	mainHandler
.190e	68		pla				pla
.190f	aa		tax				tax
.1910	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1912	9d 0b 0c	sta $0c0b,x			sta 	gModifiers,x 				; update the modifiers
.1915	4c d3 18	jmp $18d3			jmp 	_GHLoop 					; and loop back
.1918					_GHCallHandler:
.1918	c8		iny				iny 								; consume AT or TO.
.1919	20 30 19	jsr $1930			jsr 	GHMakeCurrent 				; update the coordinates.
.191c	98		tya				tya
.191d	48		pha				pha
.191e	20 26 19	jsr $1926			jsr 	_GHCallHandlerCode 			; call the handler code
.1921	68		pla				pla
.1922	a8		tay				tay
.1923	4c d3 18	jmp $18d3			jmp 	_GHLoop 					; and loop round.
.1926					_GHCallHandlerCode:
.1926	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.1929					_GHExit:
.1929	60		rts				rts
.192a					_GHTokenTable:
>192a	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>192f	00						.byte 	0
.1930					GHMakeCurrent:
.1930	8a		txa				txa
.1931	48		pha				pha
.1932	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1934	20 44 19	jsr $1944			jsr 	_GHMCDoIt
.1937	a2 02		ldx #$02		ldx	#2
.1939	20 f1 3c	jsr $3cf1		jsr	mainHandler
.193c	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.193e	20 44 19	jsr $1944			jsr 	_GHMCDoIt
.1941	68		pla				pla
.1942	aa		tax				tax
.1943	60		rts				rts
.1944					_GHMCDoIt:
.1944	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1947	9d ea 0b	sta $0bea,x			sta 	gX1,x
.194a	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.194d	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.1950	8a		txa				txa
.1951	48		pha				pha
.1952	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1954	a2 0a		ldx #$0a		ldx	#10
.1956	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1959	68		pla				pla
.195a	aa		tax				tax
.195b	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.195d	dd 10 0c	cmp $0c10,x			cmp 	gdXLimit,x
.1960	a5 a0		lda $a0				lda 	esInt1
.1962	fd 11 0c	sbc $0c11,x			sbc 	gdXLimit+1,x
.1965	b0 17		bcs $197e			bcs 	_GMHCRange
.1967	a5 a8		lda $a8				lda 	esInt2
.1969	05 b0		ora $b0				ora 	esInt3
.196b	d0 11		bne $197e			bne 	_GMHCRange
.196d	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.196f	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1972	9d ee 0b	sta $0bee,x			sta 	gX2,x
.1975	a5 a0		lda $a0				lda 	esInt1
.1977	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.197a	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.197d	60		rts				rts
.197e					_GMHCRange:
.197e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1980	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0bfc					gdySign:
>0bfc							.fill 	1
.1983					Command_Line:
.1983	a9 8b		lda #$8b			lda 	#LineHandler & $FF
.1985	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.1987	20 cb 18	jsr $18cb			jsr 	GHandler
.198a	60		rts				rts
.198b					LineHandler:
.198b	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.198d	a0 04		ldy #$04			ldy 	#gX2-gX1
.198f	20 57 1c	jsr $1c57			jsr 	CompareCoordsEq
.1992	f0 09		beq $199d			beq 	_LHRectCode
.1994	a2 02		ldx #$02			ldx 	#gY1-gX1
.1996	a0 06		ldy #$06			ldy 	#gY2-gX1
.1998	20 57 1c	jsr $1c57			jsr 	CompareCoordsEq
.199b	d0 03		bne $19a0			bne 	_LHLineDrawer
.199d					_LHRectCode:
.199d	4c d0 1a	jmp $1ad0			jmp 	RectHandler
.19a0					_LHLineDrawer:
.19a0	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19a2	a0 04		ldy #$04			ldy 	#gX2-gX1
.19a4	20 42 1c	jsr $1c42			jsr 	CompareCoords
.19a7	90 0a		bcc $19b3			bcc 	_LHNoSwap
.19a9	20 8a 1c	jsr $1c8a			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19ac	a2 02		ldx #$02			ldx 	#gY1-gX1
.19ae	a0 06		ldy #$06			ldy 	#gY2-gX1
.19b0	20 8a 1c	jsr $1c8a			jsr 	GSwapCoords
.19b3					_LHNoSwap:
.19b3	20 dc 19	jsr $19dc			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19b6	a0 00		ldy #$00			ldy 	#gX1-gX1
.19b8	20 2c 1c	jsr $1c2c			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19bb	b0 15		bcs $19d2			bcs 	_LHExit 					; line off screen.
.19bd					_LHDrawLoop:
.19bd	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19bf	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c1	20 57 1c	jsr $1c57			jsr 	CompareCoordsEq
.19c4	d0 0d		bne $19d3			bne 	_LHNextPixel
.19c6	a2 06		ldx #$06			ldx 	#gY2-gX1
.19c8	a0 06		ldy #$06			ldy 	#gY2-gX1
.19ca	20 57 1c	jsr $1c57			jsr 	CompareCoordsEq
.19cd	d0 04		bne $19d3			bne 	_LHNextPixel
.19cf	20 46 1d	jsr $1d46			jsr 	gdPlotInk 					; plot the last pixel.
.19d2					_LHExit:
.19d2	60		rts				rts
.19d3					_LHNextPixel:
.19d3	20 46 1d	jsr $1d46			jsr 	gdPlotInk 					; plot the pixel.
.19d6	20 30 1a	jsr $1a30			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19d9	4c bd 19	jmp $19bd			jmp  	_LHDrawLoop 				; and loop back if okay
.19dc					BresenhamInitialise:
.19dc	38		sec				sec
.19dd	ad ee 0b	lda $0bee			lda 	gX2
.19e0	ed ea 0b	sbc $0bea			sbc 	gX1
.19e3	8d f6 0b	sta $0bf6			sta 	gdX
.19e6	ad ef 0b	lda $0bef			lda 	gX2+1
.19e9	ed eb 0b	sbc $0beb			sbc 	gX1+1
.19ec	8d f7 0b	sta $0bf7			sta 	gdX+1
.19ef	38		sec				sec
.19f0	ad ec 0b	lda $0bec			lda 	gY1
.19f3	ed f0 0b	sbc $0bf0			sbc 	gY2
.19f6	8d f8 0b	sta $0bf8			sta 	gdy
.19f9	ad ed 0b	lda $0bed			lda 	gY1+1
.19fc	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.19ff	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a02	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a05	8d fc 0b	sta $0bfc			sta 	gdysign
.1a08	30 12		bmi $1a1c			bmi 	_BINormal
.1a0a	38		sec				sec
.1a0b	a9 00		lda #$00			lda 	#0
.1a0d	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a10	8d f8 0b	sta $0bf8			sta 	gdy
.1a13	a9 00		lda #$00			lda 	#0
.1a15	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a18	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a1b	60		rts				rts
.1a1c					_BINormal:
.1a1c	18		clc				clc
.1a1d	ad f6 0b	lda $0bf6			lda 	gdx
.1a20	6d f8 0b	adc $0bf8			adc 	gdy
.1a23	8d f2 0b	sta $0bf2			sta 	gError
.1a26	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a29	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a2c	8d f3 0b	sta $0bf3			sta 	gError+1
.1a2f	60		rts				rts
.1a30					BresenhamIteration:
.1a30	ad f2 0b	lda $0bf2			lda 	gError
.1a33	0a		asl a				asl 	a
.1a34	8d f4 0b	sta $0bf4			sta 	g2Error
.1a37	ad f3 0b	lda $0bf3			lda 	gError+1
.1a3a	2a		rol a				rol 	a
.1a3b	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a3e	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a40	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a42	20 4f 1c	jsr $1c4f			jsr 	CompareCoordsSigned
.1a45	30 03		bmi $1a4a			bmi 	_BINoE2DY
.1a47	20 57 1a	jsr $1a57			jsr 	BresenhamE2GEDY
.1a4a					_BINoE2DY:
.1a4a	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a4c	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a4e	20 4f 1c	jsr $1c4f			jsr 	CompareCoordsSigned
.1a51	30 03		bmi $1a56			bmi 	_BINoDXE2
.1a53	20 76 1a	jsr $1a76			jsr 	BresenhamDXGEE2
.1a56					_BINoDXE2:
.1a56	60		rts				rts
.1a57					BresenhamE2GEDY:
.1a57	18		clc				clc
.1a58	ad f2 0b	lda $0bf2			lda 	gError
.1a5b	6d f8 0b	adc $0bf8			adc 	gdy
.1a5e	8d f2 0b	sta $0bf2			sta 	gError
.1a61	ad f3 0b	lda $0bf3			lda 	gError+1
.1a64	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a67	8d f3 0b	sta $0bf3			sta 	gError+1
.1a6a	ee ea 0b	inc $0bea			inc 	gX1
.1a6d	d0 03		bne $1a72			bne 	_BE2Skip
.1a6f	ee eb 0b	inc $0beb			inc 	gX1+1
.1a72					_BE2Skip:
.1a72	20 a7 1c	jsr $1ca7			jsr 	gdMvRight
.1a75	60		rts				rts
.1a76					BresenhamDXGEE2:
.1a76	18		clc				clc
.1a77	ad f2 0b	lda $0bf2			lda 	gError
.1a7a	6d f6 0b	adc $0bf6			adc 	gdx
.1a7d	8d f2 0b	sta $0bf2			sta 	gError
.1a80	ad f3 0b	lda $0bf3			lda 	gError+1
.1a83	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a86	8d f3 0b	sta $0bf3			sta 	gError+1
.1a89	ad fc 0b	lda $0bfc			lda 	gdySign
.1a8c	10 0c		bpl $1a9a			bpl 	_BEDXInvertY
.1a8e	ee ec 0b	inc $0bec			inc 	gY1
.1a91	d0 03		bne $1a96			bne 	_BEDXSkip
.1a93	ee ed 0b	inc $0bed			inc 	gY1+1
.1a96					_BEDXSkip:
.1a96	20 e2 1c	jsr $1ce2			jsr 	gdMvDown
.1a99	60		rts				rts
.1a9a					_BEDXInvertY:
.1a9a	ad ec 0b	lda $0bec			lda 	gY1
.1a9d	d0 03		bne $1aa2			bne 	_BEDXSkip2
.1a9f	ce ed 0b	dec $0bed			dec 	gY1+1
.1aa2					_BEDXSkip2:
.1aa2	ce ec 0b	dec $0bec			dec 	gY1
.1aa5	20 bd 1c	jsr $1cbd			jsr 	gdMvUp
.1aa8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1aa9					Command_Plot:
.1aa9	a9 b1		lda #$b1			lda 	#PlotHandler & $FF
.1aab	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1aad	20 cb 18	jsr $18cb			jsr 	GHandler
.1ab0	60		rts				rts
.1ab1					PlotHandler:
.1ab1	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ab3	20 2c 1c	jsr $1c2c			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ab6	b0 03		bcs $1abb			bcs 	_PHExit 					; off screen, return with CS.
.1ab8	20 46 1d	jsr $1d46			jsr 	gdPlotInk 					; pixel in Ink.
.1abb	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0bfd					frameFlag:
>0bfd							.fill 	1
.1abc					Command_Rect:
.1abc	a9 d0		lda #$d0			lda 	#RectHandler & $FF
.1abe	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1ac0	20 cb 18	jsr $18cb			jsr 	GHandler
.1ac3	60		rts				rts
.1ac4					Command_Frame:
.1ac4	a9 cc		lda #$cc			lda 	#FrameHandler & $FF
.1ac6	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1ac8	20 cb 18	jsr $18cb			jsr 	GHandler
.1acb	60		rts				rts
.1acc					FrameHandler:
.1acc	a9 01		lda #$01			lda 	#1
.1ace	d0 02		bne $1ad2			bne 	RectHandler+2
.1ad0					RectHandler:
.1ad0	a9 00		lda #$00			lda 	#0
.1ad2	8d fd 0b	sta $0bfd			sta 	frameFlag
.1ad5	20 66 1c	jsr $1c66			jsr 	BoxSort 					; sort so topleft/bottom right
.1ad8	20 01 1b	jsr $1b01			jsr 	DrawBoxPart 				; solid first line
.1adb					_FHLoop:
.1adb	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1add	a0 06		ldy #$06			ldy 	#gY2-gX1
.1adf	20 42 1c	jsr $1c42			jsr 	CompareCoords
.1ae2	b0 19		bcs $1afd			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1ae4	ad fd 0b	lda $0bfd			lda 	frameFlag 					; identify solid or frame ?
.1ae7	f0 06		beq $1aef			beq 	_FHIsSolidRect
.1ae9	20 1a 1b	jsr $1b1a			jsr 	DrawBoxEnds
.1aec	4c f2 1a	jmp $1af2			jmp 	_FHNext
.1aef					_FHIsSolidRect:
.1aef	20 01 1b	jsr $1b01			jsr 	DrawBoxPart
.1af2					_FHNext:
.1af2	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1af5	d0 e4		bne $1adb			bne 	_FHLoop
.1af7	ee ed 0b	inc $0bed			inc 	gY1+1
.1afa	4c db 1a	jmp $1adb			jmp 	_FHLoop
.1afd					_FHLastLine:
.1afd	20 01 1b	jsr $1b01			jsr 	DrawBoxPart 				; solid last line whatever
.1b00					_FHExit:
.1b00	60		rts				rts
.1b01					DrawBoxPart:
.1b01	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b03	20 2c 1c	jsr $1c2c			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b06	38		sec				sec 								; calculate line length => temp0
.1b07	ad ee 0b	lda $0bee			lda 	gX2
.1b0a	ed ea 0b	sbc $0bea			sbc 	gX1
.1b0d	48		pha				pha
.1b0e	ad ef 0b	lda $0bef			lda 	gX2+1
.1b11	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b14	aa		tax				tax
.1b15	68		pla				pla 								; line length in XA.
.1b16	20 32 1b	jsr $1b32			jsr 	DrawHorizontalLine
.1b19	60		rts				rts
.1b1a					DrawBoxEnds:
.1b1a	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b1c	20 2c 1c	jsr $1c2c			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b1f	20 46 1d	jsr $1d46			jsr 	gdPlotInk 					; LH end.
.1b22	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b25	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b28	20 0e 1e	jsr $1e0e			jsr 	gdSetX
.1b2b	20 04 1d	jsr $1d04			jsr		gdSetDrawPosition 			; update position.
.1b2e	20 46 1d	jsr $1d46			jsr 	gdPlotInk 					; RH end.
.1b31	60		rts				rts
.1b32					DrawHorizontalLine:
.1b32	86 32		stx $32				stx 	tempShort
.1b34	aa		tax				tax
.1b35	a4 32		ldy $32				ldy 	tempShort
.1b37	ad 0b 0c	lda $0c0b			lda 	gdInk
.1b3a	4c 1c 1e	jmp $1e1c			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0bfe					RenderFunction:
>0bfe							.fill 	2
.0c00					RenderWidth:
>0c00							.fill 	1
.0c01					RenderHeight:
>0c01							.fill 	1
.0c02					RenderType:
>0c02							.fill 	1
.1b3d					ImageRenderer:
.1b3d	8e ff 0b	stx $0bff			stx 	RenderFunction+1
.1b40	8d fe 0b	sta $0bfe			sta 	RenderFunction
.1b43	a2 ff		ldx #$ff			ldx 	#255 						; get information.
.1b45	20 29 1c	jsr $1c29			jsr 	CallRenderFunction
.1b48	8d 02 0c	sta $0c02			sta 	RenderType 					; and save it.
.1b4b	8e 00 0c	stx $0c00			stx 	RenderWidth
.1b4e	8c 01 0c	sty $0c01			sty 	RenderHeight
.1b51	8a		txa				txa 								; check X coordinate
.1b52	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1b54	20 f0 1b	jsr $1bf0			jsr 	RenderCheckRange
.1b57	ad 01 0c	lda $0c01			lda 	RenderHeight 				; check Y coordinate
.1b5a	a2 02		ldx #$02			ldx 	#2
.1b5c	20 f0 1b	jsr $1bf0			jsr 	RenderCheckRange
.1b5f	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1b61					_IRLoop1:
.1b61	ae 0d 0c	ldx $0c0d			ldx 	gdSize 						; number of times to do the row.
.1b64					_IRLoop2:
.1b64	20 71 1b	jsr $1b71			jsr 	RenderDrawRow 				; draw one row.
.1b67	ca		dex				dex 								; scale # times.
.1b68	d0 fa		bne $1b64			bne 	_IRLoop2
.1b6a	c8		iny				iny 								; next vertical row
.1b6b	cc 01 0c	cpy $0c01			cpy 	RenderHeight 				; done the lot ?
.1b6e	d0 f1		bne $1b61			bne 	_IRLoop1
.1b70	60		rts				rts
.1b71					RenderDrawRow:
.1b71	8a		txa				txa
.1b72	48		pha				pha
.1b73	98		tya				tya
.1b74	48		pha				pha
.1b75	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1b77	20 2c 1c	jsr $1c2c			jsr 	SetupXY
.1b7a	68		pla				pla
.1b7b	a8		tay				tay
.1b7c	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1b7e					_RDRLoop1:
.1b7e	20 92 1b	jsr $1b92			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1b81	e8		inx				inx
.1b82	ec 00 0c	cpx $0c00			cpx 	RenderWidth 				; until done the whole lot.
.1b85	d0 f7		bne $1b7e			bne 	_RDRLoop1
.1b87	ee f0 0b	inc $0bf0			inc 	gY2 						; next line down
.1b8a	d0 03		bne $1b8f			bne 	_RDRNoCarry
.1b8c	ee f1 0b	inc $0bf1			inc 	gY2+1
.1b8f					_RDRNoCarry:
.1b8f	68		pla				pla
.1b90	aa		tax				tax
.1b91	60		rts				rts
.1b92					RenderDrawPixelSet:
.1b92	8a		txa				txa
.1b93	48		pha				pha
.1b94	98		tya				tya
.1b95	48		pha				pha
.1b96	20 cc 1b	jsr $1bcc			jsr 	RenderFlipXY 				; flip positions as required.
.1b99	20 b3 1b	jsr $1bb3			jsr 	RenderGetInk				; get colour to draw with.
.1b9c	ae 0d 0c	ldx $0c0d			ldx 	gdSize 						; X counts the size.
.1b9f					_RDPSLoop:
.1b9f	c9 ff		cmp #$ff			cmp 	#255 						; don't draw if $FF
.1ba1	f0 03		beq $1ba6			beq 	_RDPSNoDraw
.1ba3	20 49 1d	jsr $1d49			jsr 	gdPlotA 					; draw A otherwise
.1ba6					_RDPSNoDraw:
.1ba6	48		pha				pha 								; move right
.1ba7	20 a7 1c	jsr $1ca7			jsr 	gdMvRight
.1baa	68		pla				pla
.1bab	ca		dex				dex
.1bac	d0 f1		bne $1b9f			bne 	_RDPSLoop 					; do it size times.
.1bae	68		pla				pla
.1baf	a8		tay				tay
.1bb0	68		pla				pla
.1bb1	aa		tax				tax
.1bb2	60		rts				rts
.1bb3					RenderGetInk:
.1bb3	ad 02 0c	lda $0c02			lda 	RenderType 					; type, if 0 it's a bitmap
.1bb6	f0 04		beq $1bbc			beq 	_RGIBitmap
.1bb8	20 29 1c	jsr $1c29			jsr 	CallRenderFunction 			; ask the rendering function.
.1bbb	60		rts				rts
.1bbc					_RGIBitmap:
.1bbc	20 29 1c	jsr $1c29			jsr 	CallRenderFunction 			; ask the rendering function.
.1bbf	c9 00		cmp #$00			cmp 	#0
.1bc1	f0 04		beq $1bc7			beq 	_RGIUsePaper
.1bc3	ad 0b 0c	lda $0c0b			lda 	gdInk
.1bc6	60		rts				rts
.1bc7					_RGIUsePaper:
.1bc7	ad 0c 0c	lda $0c0c			lda 	gdPaper
.1bca	60		rts				rts
>1bcb	db						.byte 	$DB
.1bcc					RenderFlipXY:
.1bcc	ad 0f 0c	lda $0c0f			lda 	gdFlip 						; check any flip at all
.1bcf	29 03		and #$03			and 	#3
.1bd1	f0 1c		beq $1bef			beq 	_RFExit
.1bd3	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1bd4	90 09		bcc $1bdf			bcc 	_RFNoHFlip
.1bd6	ad 00 0c	lda $0c00			lda 	RenderWidth 				; X Flip
.1bd9	86 32		stx $32				stx 	tempShort
.1bdb	18		clc				clc
.1bdc	e5 32		sbc $32				sbc 	tempShort
.1bde	aa		tax				tax
.1bdf					_RFNoHFlip:
.1bdf	ad 0f 0c	lda $0c0f			lda 	gdFlip
.1be2	29 02		and #$02			and 	#2 							; bit 1 check
.1be4	f0 09		beq $1bef			beq 	_RFExit
.1be6	ad 01 0c	lda $0c01			lda 	RenderHeight 				; Y Flip
.1be9	84 32		sty $32				sty 	tempShort
.1beb	18		clc				clc
.1bec	e5 32		sbc $32				sbc 	tempShort
.1bee	a8		tay				tay
.1bef					_RFExit:
.1bef	60		rts				rts
.1bf0					RenderCheckRange:
.1bf0	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1bf2	ac 0d 0c	ldy $0c0d			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1bf5	84 2a		sty $2a				sty 	temp0
.1bf7	f0 2b		beq $1c24			beq 	_RCRValue
.1bf9	a9 00		lda #$00			lda 	#0 							; total
.1bfb					_RCRMultiply:
.1bfb	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1bfd	90 05		bcc $1c04			bcc 	_RCRNoAdd 					; not adding this time.
.1bff	18		clc				clc
.1c00	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c02	b0 20		bcs $1c24			bcs 	_RCRValue 					; overflow
.1c04					_RCRNoAdd:
.1c04	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c06	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c08	d0 f1		bne $1bfb			bne 	_RCRMultiply
.1c0a	18		clc				clc 								; add to x2 or y2, store in temp0
.1c0b	7d ee 0b	adc $0bee,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c0e	85 2a		sta $2a				sta 	temp0
.1c10	bd ef 0b	lda $0bef,x			lda 	gX2+1,x
.1c13	69 00		adc #$00			adc 	#0
.1c15	85 2b		sta $2b				sta 	temp0+1
.1c17	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c19	dd 10 0c	cmp $0c10,x			cmp 	gdXLimit,x
.1c1c	a5 2b		lda $2b				lda 	temp0+1
.1c1e	fd 11 0c	sbc $0c11,x			sbc 	gdXLimit+1,x
.1c21	b0 01		bcs $1c24			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c23	60		rts				rts
.1c24					_RCRValue:
.1c24	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c26	20 18 15	jsr $1518		jsr	errorHandler
.1c29					CallRenderFunction:
.1c29	6c fe 0b	jmp ($0bfe)			jmp 	(RenderFunction)

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c2c					SetupXY:
.1c2c	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1c2f	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1c32	20 0e 1e	jsr $1e0e			jsr 	gdSetX
.1c35	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1c38	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1c3b	20 15 1e	jsr $1e15			jsr 	gdSetY
.1c3e	20 04 1d	jsr $1d04			jsr 	gdSetDrawPosition
.1c41	60		rts				rts
.1c42					CompareCoords:
.1c42	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c45	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c48	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c4b	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1c4e	60		rts				rts
.1c4f					CompareCoordsSigned:
.1c4f	20 42 1c	jsr $1c42			jsr 	CompareCoords
.1c52	50 02		bvc $1c56			bvc 	_CCSExit
.1c54	49 80		eor #$80			eor 	#$80
.1c56					_CCSExit:
.1c56	60		rts				rts
.1c57					CompareCoordsEq:
.1c57	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1c5a	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1c5d	d0 06		bne $1c65			bne 	_CCEExit
.1c5f	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1c62	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1c65					_CCEExit:
.1c65	60		rts				rts
.1c66					BoxSort:
.1c66	a2 00		ldx #$00			ldx 	#gx1-gx1
.1c68	a0 04		ldy #$04			ldy 	#gx2-gx1
.1c6a	20 7b 1c	jsr $1c7b			jsr 	GCompareCoords
.1c6d	20 88 1c	jsr $1c88			jsr 	GSortMinMaxCoords
.1c70	a2 02		ldx #$02			ldx 	#gy1-gx1
.1c72	a0 06		ldy #$06			ldy 	#gy2-gx1
.1c74	20 7b 1c	jsr $1c7b			jsr 	GCompareCoords
.1c77	20 88 1c	jsr $1c88			jsr 	GSortMinMaxCoords
.1c7a	60		rts				rts
.1c7b					GCompareCoords:
.1c7b	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1c7e	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1c81	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1c84	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1c87	60		rts				rts
.1c88					GSortMinMaxCoords:
.1c88	90 1c		bcc $1ca6			bcc 	GSMMCExit
.1c8a					GSwapCoords:
.1c8a	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1c8d	48		pha				pha
.1c8e	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1c91	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1c94	68		pla				pla
.1c95	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1c98	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1c9b	48		pha				pha
.1c9c	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1c9f	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1ca2	68		pla				pla
.1ca3	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1ca6					GSMMCExit:
.1ca6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1ca7					gdMvRight:
.1ca7	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1caa	d0 08		bne $1cb4			bne 	_gdMR0
.1cac	ee 21 9f	inc $9f21			inc 	$9F21
.1caf	d0 03		bne $1cb4			bne 	_gdMR0
.1cb1	ee 22 9f	inc $9f22			inc 	$9F22
.1cb4					_gdMR0:
.1cb4	ee 07 0c	inc $0c07			inc 	gdXPos
.1cb7	d0 03		bne $1cbc			bne 	_gdMR1
.1cb9	ee 08 0c	inc $0c08			inc 	gdXPos+1
.1cbc					_gdMR1:
.1cbc	60		rts				rts
.1cbd					gdMvUp:
.1cbd	ad 09 0c	lda $0c09			lda 	gdYPos 						; decrement Y Pos
.1cc0	d0 03		bne $1cc5			bne 	_gdMU1
.1cc2	ce 0a 0c	dec $0c0a			dec 	gdYPos+1
.1cc5	ce 09 0c	dec $0c09	_gdMU1:	dec 	gdYPos
.1cc8	38		sec				sec 								; adjust position by -320
.1cc9	ad 20 9f	lda $9f20			lda 	$9F20
.1ccc	e9 40		sbc #$40			sbc 	#64
.1cce	8d 20 9f	sta $9f20			sta 	$9F20
.1cd1	ad 21 9f	lda $9f21			lda 	$9F21
.1cd4	e9 01		sbc #$01			sbc 	#1
.1cd6	8d 21 9f	sta $9f21			sta 	$9F21
.1cd9	ad 22 9f	lda $9f22			lda 	$9F22
.1cdc	e9 00		sbc #$00			sbc 	#0
.1cde	8d 22 9f	sta $9f22			sta 	$9F22
.1ce1	60		rts				rts
.1ce2					gdMvDown:
.1ce2	ee 09 0c	inc $0c09			inc 	gdYPos 						; decrement Y Pos
.1ce5	d0 03		bne $1cea			bne 	_gdMU1
.1ce7	ee 0a 0c	inc $0c0a			inc 	gdYPos+1
.1cea					_gdMU1:
.1cea	18		clc				clc 								; adjust position by -320
.1ceb	ad 20 9f	lda $9f20			lda 	$9F20
.1cee	69 40		adc #$40			adc 	#64
.1cf0	8d 20 9f	sta $9f20			sta 	$9F20
.1cf3	ad 21 9f	lda $9f21			lda 	$9F21
.1cf6	69 01		adc #$01			adc 	#1
.1cf8	8d 21 9f	sta $9f21			sta 	$9F21
.1cfb	ad 22 9f	lda $9f22			lda 	$9F22
.1cfe	69 00		adc #$00			adc 	#0
.1d00	8d 22 9f	sta $9f22			sta 	$9F22
.1d03	60		rts				rts
.1d04					gdSetDrawPosition:
.1d04	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d06	85 2a		sta $2a				sta 	temp0
.1d08	ad 09 0c	lda $0c09			lda 	gdYPos
.1d0b	85 2b		sta $2b				sta 	temp0+1
.1d0d	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d0f	66 2a		ror $2a				ror 	temp0
.1d11	46 2b		lsr $2b				lsr 	temp0+1
.1d13	66 2a		ror $2a				ror 	temp0
.1d15	ad 09 0c	lda $0c09			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d18	18		clc				clc
.1d19	65 2b		adc $2b				adc 	temp0+1
.1d1b	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d1d	18		clc				clc
.1d1e	a5 2a		lda $2a				lda 	temp0
.1d20	6d 07 0c	adc $0c07			adc 	gdXPos
.1d23	85 2a		sta $2a				sta 	temp0
.1d25	a5 2b		lda $2b				lda 	temp0+1
.1d27	6d 08 0c	adc $0c08			adc 	gdXPos+1
.1d2a	85 2b		sta $2b				sta 	temp0+1
.1d2c	18		clc				clc
.1d2d	ad 04 0c	lda $0c04			lda 	gdBitmapAddress
.1d30	65 2a		adc $2a				adc 	temp0
.1d32	8d 20 9f	sta $9f20			sta 	$9F20
.1d35	ad 05 0c	lda $0c05			lda 	gdBitmapAddress+1
.1d38	65 2b		adc $2b				adc 	temp0+1
.1d3a	8d 21 9f	sta $9f21			sta 	$9F21
.1d3d	ad 06 0c	lda $0c06			lda 	gdBitmapAddress+2
.1d40	69 00		adc #$00			adc 	#0
.1d42	8d 22 9f	sta $9f22			sta 	$9F22
.1d45	60		rts				rts
.1d46					gdPlotInk:
.1d46	ad 0b 0c	lda $0c0b			lda 	gdInk
.1d49					gdPlotA:
.1d49	8d 23 9f	sta $9f23			sta 	$9F23
.1d4c	60		rts				rts
.1d4d					gdPlotPaper:
.1d4d	ad 0c 0c	lda $0c0c			lda 	gdPaper
.1d50	c9 ff		cmp #$ff			cmp 	#$FF
.1d52	f0 03		beq $1d57			beq 	_gdPPSkip
.1d54	8d 23 9f	sta $9f23			sta 	$9F23
.1d57					_gdPPSkip:
.1d57	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c03					gdEnabled:
>0c03							.fill 	1
.0c04					gdBitmapAddress:
>0c04							.fill 	3
.0c07					gdXPos:
>0c07							.fill 	2
.0c09					gdYPos:
>0c09							.fill 	2
.0c0b					gModifiers:
.0c0b					gdInk:
>0c0b							.fill 	1
.0c0c					gdPaper:
>0c0c							.fill 	1
.0c0d					gdSize:
>0c0d							.fill 	1
.0c0e					gdImage:
>0c0e							.fill 	1
.0c0f					gdFlip:
>0c0f							.fill 	1
.0c10					gdXLimit:
>0c10							.fill 	2
.0c12					gdYLimit:
>0c12							.fill 	2
.1d58					gdModeChanged:
.1d58	8a		txa				txa
.1d59	48		pha				pha
.1d5a	98		tya				tya
.1d5b	48		pha				pha
.1d5c	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1d5e	8d 03 0c	sta $0c03			sta 	gdEnabled
.1d61	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1d64	c9 40		cmp #$40			cmp 	#$40
.1d66	d0 1f		bne $1d87			bne 	_gdExit
.1d68	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1d6b	c9 40		cmp #$40			cmp 	#$40
.1d6d	d0 18		bne $1d87			bne 	_gdExit
.1d6f	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1d72	0a		asl a				asl 	a 							;
.1d73	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1d74	10 09		bpl $1d7f			bpl 	_gdNotLayer1
.1d76	48		pha				pha 								; save A
.1d77	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1d79	20 a2 1d	jsr $1da2			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d7c	68		pla				pla 								; restore A
.1d7d	b0 08		bcs $1d87			bcs 	_gdExit 					; if successful then exit
.1d7f					_gdNotLayer1:
.1d7f	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1d80	10 05		bpl $1d87			bpl 	_gdExit 					; if not enabled, exit
.1d82	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1d84	20 a2 1d	jsr $1da2			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1d87					_gdExit:
.1d87	a9 00		lda #$00			lda 	#0 							; initialise modifiers.
.1d89	8d 0c 0c	sta $0c0c			sta 	gdPaper
.1d8c	8d 0f 0c	sta $0c0f			sta 	gdFlip
.1d8f	8d 0e 0c	sta $0c0e			sta 	gdImage
.1d92	a9 01		lda #$01			lda 	#1
.1d94	8d 0b 0c	sta $0c0b			sta 	gdInk
.1d97	8d 0d 0c	sta $0c0d			sta 	gdSize
.1d9a	20 ea 1d	jsr $1dea			jsr 	gdClearGraphics 			; clear graphics display.
.1d9d	68		pla				pla
.1d9e	a8		tay				tay
.1d9f	68		pla				pla
.1da0	aa		tax				tax
.1da1	60		rts				rts
.1da2					gdCheckBitmap:
.1da2	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1da5	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1da7	d0 28		bne $1dd1			bne 	_gdCBFail
.1da9	ee 03 0c	inc $0c03			inc 	gdEnabled 					; set the enabled flag to non zero.
.1dac	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1daf	0a		asl a				asl 	a
.1db0	8d 05 0c	sta $0c05			sta 	gdBitmapAddress+1
.1db3	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1db5	8d 06 0c	sta $0c06			sta 	gdBitmapAddress+2
.1db8	a9 00		lda #$00			lda 	#$00
.1dba	8d 04 0c	sta $0c04			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1dbd	a9 40		lda #$40			lda 	#(320) & $FF
.1dbf	8d 10 0c	sta $0c10			sta 	gdXLimit
.1dc2	a9 01		lda #$01			lda 	#(320) >> 8
.1dc4	8d 11 0c	sta $0c11			sta 	1+(gdXLimit)
.1dc7	a9 c8		lda #$c8			lda 	#(200) & $FF
.1dc9	8d 12 0c	sta $0c12			sta 	gdYLimit
.1dcc	a9 00		lda #$00			lda 	#(200) >> 8
.1dce	8d 13 0c	sta $0c13			sta 	1+(gdYLimit)
.1dd1					_gdCBFail:
.1dd1	18		clc				clc
.1dd2	60		rts				rts
.1dd3					CommandClg:
.1dd3	b1 28		lda ($28),y			lda 	(codePtr),y
.1dd5	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1dd7	d0 0d		bne $1de6			bne 	_CCLClear
.1dd9	c8		iny				iny
.1dda	a9 00		lda #$00			lda 	#0
.1ddc	a2 0c		ldx #$0c		ldx	#12
.1dde	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1de1	a5 98		lda $98				lda 	esInt0
.1de3	8d 0c 0c	sta $0c0c			sta 	gdPaper
.1de6					_CCLClear:
.1de6	20 ea 1d	jsr $1dea			jsr 	gdClearGraphics
.1de9	60		rts				rts
.1dea					gdClearGraphics:
.1dea	8a		txa				txa
.1deb	48		pha				pha
.1dec	98		tya				tya
.1ded	48		pha				pha
.1dee	ad 03 0c	lda $0c03			lda 	gdEnabled 					; screen enabled
.1df1	f0 16		beq $1e09			beq 	_gdCGExit
.1df3	a9 00		lda #$00			lda 	#0 							; home cursor
.1df5	aa		tax				tax
.1df6	20 0e 1e	jsr $1e0e			jsr 	gdSetX
.1df9	20 15 1e	jsr $1e15			jsr 	gdSetY
.1dfc	20 04 1d	jsr $1d04			jsr 	gdSetDrawPosition 			; set the draw position.
.1dff	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e01	a2 00		ldx #$00			ldx 	#0
.1e03	ad 0c 0c	lda $0c0c			lda 	gdPaper
.1e06	20 1c 1e	jsr $1e1c			jsr 	gdOptHorizontalWriter
.1e09					_gdCGExit:
.1e09	68		pla				pla
.1e0a	a8		tay				tay
.1e0b	68		pla				pla
.1e0c	aa		tax				tax
.1e0d	60		rts				rts
.1e0e					gdSetX:
.1e0e	8d 07 0c	sta $0c07			sta 	gdXPos
.1e11	8e 08 0c	stx $0c08			stx 	gdXPos+1
.1e14	60		rts				rts
.1e15					gdSetY:
.1e15	8d 09 0c	sta $0c09			sta 	gdYPos
.1e18	8e 0a 0c	stx $0c0a			stx 	gdYPos+1
.1e1b	60		rts				rts
.1e1c					gdOptHorizontalWriter:
.1e1c	48		pha				pha
.1e1d	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1e20	09 10		ora #$10			ora 	#$10
.1e22	8d 22 9f	sta $9f22			sta 	$9F22
.1e25	68		pla				pla
.1e26					_gdOLoop:
.1e26	8d 23 9f	sta $9f23			sta 	$9F23
.1e29	e0 00		cpx #$00			cpx 	#0
.1e2b	d0 05		bne $1e32			bne 	_gdNoBorrow
.1e2d	c0 00		cpy #$00			cpy 	#0
.1e2f	f0 05		beq $1e36			beq 	_gdExit
.1e31	88		dey				dey
.1e32					_gdNoBorrow:
.1e32	ca		dex				dex
.1e33	4c 26 1e	jmp $1e26			jmp 	_gdOLoop
.1e36					_gdExit:
.1e36	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e37					Unary_Clock:
.1e37	a2 0c		ldx #$0c		ldx	#12
.1e39	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1e3c	48		pha				pha 								; save stack pos
.1e3d	a2 04		ldx #$04		ldx	#4
.1e3f	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1e42	98		tya				tya
.1e43	48		pha				pha
.1e44	20 50 ff	jsr $ff50			jsr 	$FF50
.1e47	68		pla				pla
.1e48	a8		tay				tay
.1e49	68		pla				pla 								; restore, repush, put into X to read offset
.1e4a	48		pha				pha
.1e4b	aa		tax				tax
.1e4c	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e4e	c9 06		cmp #$06			cmp 	#6
.1e50	b0 0d		bcs $1e5f			bcs 	_UCValue
.1e52	aa		tax				tax 								; index in X and read RTC.
.1e53	b5 02		lda $02,x			lda 	2,x
.1e55	85 32		sta $32				sta 	tempshort
.1e57	68		pla				pla 								; restore number stack index.
.1e58	aa		tax				tax
.1e59	a5 32		lda $32				lda 	tempShort
.1e5b	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1e5d	8a		txa				txa
.1e5e	60		rts				rts
.1e5f					_UCValue:
.1e5f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e61	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1e64					Unary_JoyX:
.1e64	38		sec				sec
.1e65	b0 01		bcs $1e68			bcs 	JoystickRead
.1e67					Unary_JoyY:
.1e67	18		clc				clc
.1e68					JoystickRead:
.1e68	48		pha				pha 								; save stack position
.1e69	08		php				php 								; save test flag.
.1e6a	a2 04		ldx #$04		ldx	#4
.1e6c	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1e6f	20 c9 1e	jsr $1ec9			jsr 	ReadJoystick 				; read it.
.1e72	28		plp				plp
.1e73	b0 02		bcs $1e77			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1e75	4a		lsr a				lsr 	a
.1e76	4a		lsr a				lsr 	a
.1e77					_JRNoShift:
.1e77	29 03		and #$03			and 	#3 							; isolate the test bits.
.1e79	f0 0d		beq $1e88			beq 	JoyReturnA 					; if nothing pressed, return A.
.1e7b	c9 03		cmp #$03			cmp 	#3
.1e7d	f0 07		beq $1e86			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1e7f	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1e80	b0 16		bcs $1e98			bcs 	JoyReturn1
.1e82					JoyReturnTrue:
.1e82	a9 ff		lda #$ff			lda 	#$FF
.1e84	d0 02		bne $1e88			bne 	JoyReturnA
.1e86					JoyReturnFalse:
.1e86	a9 00		lda #$00			lda 	#0
.1e88					JoyReturnA:
.1e88	85 32		sta $32				sta 	tempShort 					; return A
.1e8a	68		pla				pla
.1e8b	aa		tax				tax
.1e8c	a5 32		lda $32				lda 	tempShort
.1e8e	95 98		sta $98,x			sta 	esInt0,x
.1e90					JoyReturn13:
.1e90	95 a0		sta $a0,x			sta 	esInt1,x
.1e92	95 a8		sta $a8,x			sta 	esInt2,x
.1e94	95 b0		sta $b0,x			sta 	esInt3,x
.1e96	8a		txa				txa 								; return NSP in A
.1e97	60		rts				rts
.1e98					JoyReturn1:
.1e98	68		pla				pla
.1e99	aa		tax				tax
.1e9a	a9 01		lda #$01			lda 	#1
.1e9c	95 98		sta $98,x			sta 	esInt0,x
.1e9e	a9 00		lda #$00			lda 	#0
.1ea0	f0 ee		beq $1e90			beq 	JoyReturn13
.1ea2					Unary_JButton:
.1ea2	48		pha				pha 								; save X on stack, put in X
.1ea3	a2 0c		ldx #$0c		ldx	#12
.1ea5	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1ea8	aa		tax				tax 								; get value to check, push on stack.
.1ea9	b5 98		lda $98,x			lda 	esInt0,x
.1eab	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1ead	b0 15		bcs $1ec4			bcs 	_UJBadValue
.1eaf	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1eb1	48		pha				pha 								; save that shift count on the stack.
.1eb2	a2 04		ldx #$04		ldx	#4
.1eb4	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1eb7	68		pla				pla
.1eb8	aa		tax				tax
.1eb9	20 c9 1e	jsr $1ec9			jsr 	ReadJoystick 				; joystick read
.1ebc					_UJShift:
.1ebc	4a		lsr a				lsr 	a
.1ebd	ca		dex				dex
.1ebe	d0 fc		bne $1ebc			bne 	_UJShift
.1ec0	b0 c0		bcs $1e82			bcs 	JoyReturnTrue
.1ec2	90 c2		bcc $1e86			bcc 	JoyReturnFalse
.1ec4					_UJBadValue:
.1ec4	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ec6	20 18 15	jsr $1518		jsr	errorHandler
.1ec9					ReadJoystick:
.1ec9	8a		txa				txa
.1eca	48		pha				pha
.1ecb	98		tya				tya
.1ecc	48		pha				pha
.1ecd	a9 00		lda #$00			lda 	#0
.1ecf	20 56 ff	jsr $ff56			jsr 	$FF56
.1ed2	c0 00		cpy #$00			cpy 	#0
.1ed4	d0 11		bne $1ee7			bne 	_RJError
.1ed6	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1ed8	d0 02		bne $1edc			bne 	_RJNoBug
.1eda	a9 ff		lda #$ff			lda 	#$FF
.1edc					_RJNoBug:
.1edc	85 32		sta $32				sta 	tempShort
.1ede	68		pla				pla
.1edf	a8		tay				tay
.1ee0	68		pla				pla
.1ee1	aa		tax				tax
.1ee2	a5 32		lda $32				lda 	tempShort
.1ee4	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1ee6	60		rts				rts
.1ee7					_RJError:
.1ee7	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1ee9	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c14					hitSprite1:
>0c14							.fill 	1 							; this won't work ... if you nest HIT() which
.0c15					hitSprite2:
>0c15							.fill 	1
.0c16					hitRange:
>0c16							.fill 	1
.1eec					FunctionCollide:
.1eec	48		pha				pha 								; save and put index into X
.1eed	aa		tax				tax
.1eee	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1ef0	8d 16 0c	sta $0c16			sta 	hitRange
.1ef3	20 98 1f	jsr $1f98			jsr 	_FCGetSpriteID
.1ef6	8d 14 0c	sta $0c14			sta 	hitSprite1
.1ef9	8a		txa				txa
.1efa	48		pha				pha
.1efb	a2 02		ldx #$02		ldx	#2
.1efd	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1f00	68		pla				pla
.1f01	aa		tax				tax
.1f02	20 98 1f	jsr $1f98			jsr 	_FCGetSpriteID
.1f05	8d 15 0c	sta $0c15			sta 	hitSprite2
.1f08	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1f0a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1f0c	f0 13		beq $1f21			beq 	_FCParam2
.1f0e	8a		txa				txa
.1f0f	48		pha				pha
.1f10	a2 02		ldx #$02		ldx	#2
.1f12	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1f15	68		pla				pla
.1f16	a2 0c		ldx #$0c		ldx	#12
.1f18	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1f1b	aa		tax				tax
.1f1c	b5 98		lda $98,x			lda 	esInt0,x
.1f1e	8d 16 0c	sta $0c16			sta 	hitRange
.1f21					_FCParam2:
.1f21	a2 04		ldx #$04		ldx	#4
.1f23	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1f26	68		pla				pla 								; set X to point to the stack again.
.1f27	48		pha				pha
.1f28	aa		tax				tax
.1f29	98		tya				tya
.1f2a	48		pha				pha
.1f2b	18		clc				clc 								; do it with the horizontal values.
.1f2c	20 4e 1f	jsr $1f4e			jsr 	_FCCheck
.1f2f	90 0a		bcc $1f3b			bcc 	_FCFail
.1f31	38		sec				sec 								; do it with the vertical values.
.1f32	20 4e 1f	jsr $1f4e			jsr 	_FCCheck
.1f35	90 04		bcc $1f3b			bcc 	_FCFail
.1f37	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1f39	d0 02		bne $1f3d			bne 	_FCReturnA
.1f3b					_FCFail:
.1f3b	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1f3d					_FCReturnA:
.1f3d	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1f3f	68		pla				pla
.1f40	a8		tay				tay
.1f41	68		pla				pla 								; restore stack, return result and exit.
.1f42	aa		tax				tax
.1f43	a5 32		lda $32				lda 	tempShort
.1f45	95 98		sta $98,x			sta 	esInt0,x
.1f47	95 a0		sta $a0,x			sta 	esInt1,x
.1f49	95 a8		sta $a8,x			sta 	esInt2,x
.1f4b	95 b0		sta $b0,x			sta 	esInt3,x
.1f4d	60		rts				rts
.1f4e					_FCCheck:
.1f4e	08		php				php 								; save the H/V flag twice
.1f4f	08		php				php
.1f50	ad 14 0c	lda $0c14			lda 	hitSprite1 					; select sprite 1 and read its location
.1f53	20 d6 20	jsr $20d6			jsr 	SelectSpriteA 				; into X
.1f56	28		plp				plp
.1f57	20 5e 21	jsr $215e			jsr 	SpriteReadCoordinate
.1f5a	ad 15 0c	lda $0c15			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1f5d	20 d6 20	jsr $20d6			jsr 	SelectSpriteA
.1f60	e8		inx				inx
.1f61	28		plp				plp
.1f62	20 5e 21	jsr $215e			jsr 	SpriteReadCoordinate
.1f65	ca		dex				dex
.1f66	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1f67	b5 98		lda $98,x			lda 	esInt0,x
.1f69	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1f6b	85 2a		sta $2a				sta 	temp0
.1f6d	b5 a0		lda $a0,x			lda 	esInt1,x
.1f6f	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1f71	85 2b		sta $2b				sta 	temp0+1
.1f73	10 0d		bpl $1f82			bpl 	_FCCIsPositive
.1f75	38		sec				sec 								; if -ve calculate |difference|
.1f76	a9 00		lda #$00			lda 	#0
.1f78	e5 2a		sbc $2a				sbc 	temp0
.1f7a	85 2a		sta $2a				sta 	temp0
.1f7c	a9 00		lda #$00			lda 	#0
.1f7e	e5 2b		sbc $2b				sbc 	temp0+1
.1f80	85 2b		sta $2b				sta 	temp0+1
.1f82					_FCCIsPositive:
.1f82	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1f84	d0 10		bne $1f96			bne 	_FCCFail
.1f86	18		clc				clc 								; work out required min distance which is
.1f87	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1f89	75 b1		adc $b1,x			adc 	esInt3+1,x
.1f8b	ac 16 0c	ldy $0c16			ldy 	hitRange 					; get the hit range
.1f8e	f0 01		beq $1f91			beq 	_FCCNoSetRange 				; override if non zero.
.1f90	98		tya				tya
.1f91					_FCCNoSetRange:
.1f91	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1f93	f0 01		beq $1f96			beq 	_FCCFail
.1f95	60		rts				rts
.1f96					_FCCFail:
.1f96	18		clc				clc
.1f97	60		rts				rts
.1f98					_FCGetSpriteID:
.1f98	8a		txa				txa
.1f99	a2 0c		ldx #$0c		ldx	#12
.1f9b	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1f9e	aa		tax				tax
.1f9f	b5 98		lda $98,x			lda 	esInt0,x
.1fa1	30 01		bmi $1fa4			bmi 	_FCGSValue
.1fa3	60		rts				rts
.1fa4					_FCGSValue:
.1fa4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1fa6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c17					currSprite:
>0c17							.fill 	2
.1fa9					CommandSprite:
.1fa9	20 ab 20	jsr $20ab			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1fac	d0 0d		bne $1fbb			bne 	_CSCheckClear
.1fae	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1fb1	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1fb3	90 02		bcc $1fb7			bcc 	_CSNotOn 					; if CS turn on, so set it
.1fb5	09 40		ora #$40			ora 	#$40
.1fb7					_CSNotOn:
.1fb7	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1fba	60		rts				rts
.1fbb					_CSCheckClear:
.1fbb	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1fbd	8d 18 0c	sta $0c18			sta 	currSprite+1
.1fc0	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1fc2	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1fc4	d0 05		bne $1fcb			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1fc6	20 bc 20	jsr $20bc			jsr 	CSClearSprites 				; clear all the sprites
.1fc9	c8		iny				iny 								; consume CLEAR token and exit.
.1fca	60		rts				rts
.1fcb					_CSCommandLoop:
.1fcb	20 ab 20	jsr $20ab			jsr 	CSCheckOnOff 				; check sprite on/off
.1fce	f0 2c		beq $1ffc			beq 	_CSSetVisibility
.1fd0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1fd2	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1fd4	f0 25		beq $1ffb			beq 	_CSExit
.1fd6	c8		iny				iny									; consume it
.1fd7	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1fd9	f0 20		beq $1ffb			beq 	_CSExit
.1fdb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1fdd	f0 ec		beq $1fcb			beq 	_CSCommandLoop
.1fdf	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1fe1	f0 69		beq $204c			beq 	_CSSetImage
.1fe3	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1fe5	f0 2b		beq $2012			beq 	_CSSetFlip
.1fe7	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1fe9	f0 46		beq $2031			beq 	_CSSetPos
.1feb	88		dey				dey 								; unpick DEY
.1fec	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1fee	a2 0c		ldx #$0c		ldx	#12
.1ff0	20 f1 3c	jsr $3cf1		jsr	mainHandler
.1ff3	a5 98		lda $98				lda 	esInt0
.1ff5	20 d6 20	jsr $20d6			jsr 	SelectSpriteA
.1ff8	4c cb 1f	jmp $1fcb			jmp 	_CSCommandLoop
.1ffb					_CSExit:
.1ffb	60		rts				rts
.1ffc					_CSSetVisibility:
.1ffc	08		php				php 								; save carry
.1ffd	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1fff	20 92 20	jsr $2092			jsr 	SpriteSetTarget
.2002	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.2005	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.2007	28		plp				plp
.2008	90 02		bcc $200c			bcc 	_CSSetOff 					; check if carry was set
.200a	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.200c					_CSSetOff:
.200c	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.200f	4c cb 1f	jmp $1fcb			jmp 	_CSCommandLoop
.2012					_CSSetFlip:
.2012	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2014	a2 0c		ldx #$0c		ldx	#12
.2016	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2019	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.201b	20 92 20	jsr $2092			jsr 	SpriteSetTarget
.201e	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.2020	29 03		and #$03			and 	#3
.2022	85 2a		sta $2a				sta 	temp0
.2024	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.2027	29 fc		and #$fc			and 	#$FC
.2029	05 2a		ora $2a				ora 	temp0
.202b	8d 23 9f	sta $9f23			sta 	$9F23
.202e	4c cb 1f	jmp $1fcb			jmp 	_CSCommandLoop
.2031					_CSSetPos:
.2031	a9 00		lda #$00			lda 	#0 							; X now at level 0
.2033	a2 0a		ldx #$0a		ldx	#10
.2035	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2038	a2 02		ldx #$02		ldx	#2
.203a	20 f1 3c	jsr $3cf1		jsr	mainHandler
.203d	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.203f	a2 0a		ldx #$0a		ldx	#10
.2041	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2044	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.2046	20 1a 21	jsr $211a			jsr 	SpriteMove 					; move it.
.2049	4c cb 1f	jmp $1fcb			jmp 	_CSCommandLoop
.204c					_CSSetImage:
.204c	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.204e	a2 0c		ldx #$0c		ldx	#12
.2050	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2053	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.2055	20 92 20	jsr $2092			jsr 	SpriteSetTarget
.2058	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.205a	bd 5e 0c	lda $0c5e,x			lda 	imageAddr2Low,x 			; copy low address in.
.205d	8d 23 9f	sta $9f23			sta 	$9F23
.2060	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.2063	bd 1e 0c	lda $0c1e,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.2066	29 10		and #$10			and 	#$10
.2068	0a		asl a				asl 	a
.2069	0a		asl a				asl		a
.206a	0a		asl a				asl 	a 							; put into bit 7
.206b	1d 9e 0c	ora $0c9e,x			ora 	imageAddr2High,x 			; or high address with it.
.206e	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.2071	a9 06		lda #$06			lda 	#6
.2073	20 92 20	jsr $2092			jsr 	SpriteSetTarget 			; set sprite on.
.2076	ad 23 9f	lda $9f23			lda 	$9F23
.2079	09 0c		ora #$0c			ora 	#$0C
.207b	8d 23 9f	sta $9f23			sta 	$9F23
.207e	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.2081	bd 1e 0c	lda $0c1e,x			lda 	imageInfo,x 				; get image info
.2084	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.2085	0a		asl a				asl 	a
.2086	0a		asl a				asl 	a
.2087	0a		asl a				asl 	a
.2088	b0 02		bcs $208c			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.208a	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.208c					_CSNoOffset:
.208c	8d 23 9f	sta $9f23			sta 	$9F23
.208f	4c cb 1f	jmp $1fcb			jmp 	_CSCommandLoop
.2092					SpriteSetTarget:
.2092	0d 17 0c	ora $0c17			ora 	currSprite
.2095	8d 20 9f	sta $9f20			sta 	$9F20
.2098	ad 18 0c	lda $0c18			lda 	currSprite+1
.209b	f0 09		beq $20a6			beq 	_SSTNoSet
.209d	8d 21 9f	sta $9f21			sta 	$9F21
.20a0	a9 01		lda #$01			lda 	#$01
.20a2	8d 22 9f	sta $9f22			sta 	$9F22
.20a5	60		rts				rts
.20a6					_SSTNoSet:
.20a6	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.20a8	20 18 15	jsr $1518		jsr	errorHandler
.20ab					CSCheckOnOff:
.20ab	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.20ad	c8		iny				iny
.20ae	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.20b0	18		clc				clc
.20b1	f0 08		beq $20bb			beq 	_CSCOExit
.20b3	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.20b5	38		sec				sec 								; return NE if neither.
.20b6	f0 03		beq $20bb			beq 	_CSCOExit
.20b8	88		dey				dey 								; undo consume
.20b9	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.20bb					_CSCOExit:
.20bb	60		rts				rts
.20bc					CSClearSprites:
.20bc	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.20be	8d 22 9f	sta $9f22			sta 	$9F22
.20c1	a9 fc		lda #$fc			lda 	#$FC
.20c3	8d 21 9f	sta $9f21			sta 	$9F21
.20c6	a9 00		lda #$00			lda 	#0
.20c8	8d 20 9f	sta $9f20			sta 	$9F20
.20cb					_CSClear:
.20cb	a9 00		lda #$00			lda 	#0 							; set everything to $00
.20cd	8d 23 9f	sta $9f23			sta 	$9F23
.20d0	ad 21 9f	lda $9f21			lda 	$9F21
.20d3	d0 f6		bne $20cb			bne 	_CSClear
.20d5	60		rts				rts
.20d6					SelectSpriteA:
.20d6	85 2a		sta $2a				sta 	temp0
.20d8	a9 00		lda #$00			lda 	#0
.20da	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.20dc	b0 11		bcs $20ef			bcs 	_CSBadValue 				; sprites only 0-127
.20de	06 2a		asl $2a				asl 	temp0
.20e0	2a		rol a				rol 	a
.20e1	06 2a		asl $2a				asl 	temp0
.20e3	2a		rol a				rol 	a
.20e4	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.20e6	8d 18 0c	sta $0c18			sta 	currSprite+1
.20e9	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.20eb	8d 17 0c	sta $0c17			sta 	currSprite+0
.20ee	60		rts				rts
.20ef					_CSBadValue
.20ef	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.20f1	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.20f4					Command_Paint:
.20f4	a9 fc		lda #$fc			lda 	#ImageHandler & $FF
.20f6	a2 20		ldx #$20			ldx 	#ImageHandler >> 8
.20f8	20 cb 18	jsr $18cb			jsr 	GHandler
.20fb	60		rts				rts
.20fc					ImageHandler:
.20fc	a9 03		lda #$03			lda 	#TestImageAccess & $FF
.20fe	a2 21		ldx #$21			ldx 	#TestImageAccess >> 8
.2100	4c 3d 1b	jmp $1b3d			jmp 	ImageRenderer
.2103					TestImageAccess:
.2103	e0 ff		cpx #$ff			cpx 	#255 						; get information
.2105	f0 0c		beq $2113			beq 	_TIAGetInfo
.2107	8a		txa				txa 								; fake up a pattern using the X/Y coordinates.
.2108	4a		lsr a				lsr 	a
.2109	4a		lsr a				lsr 	a
.210a	85 32		sta $32				sta 	tempShort
.210c	98		tya				tya
.210d	4a		lsr a				lsr 	a
.210e	4a		lsr a				lsr 	a
.210f	18		clc				clc
.2110	65 32		adc $32				adc 	tempShort
.2112	60		rts				rts
.2113					_TIAGetInfo:
.2113	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.2115	a2 10		ldx #$10			ldx 	#16 						; pixel width
.2117	a0 20		ldy #$20			ldy 	#32							; pixel height
.2119	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.211a					SpriteMove:
.211a	98		tya				tya
.211b	48		pha				pha
.211c	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.211e	20 92 20	jsr $2092			jsr 	SpriteSetTarget
.2121	ad 23 9f	lda $9f23			lda 	$9F23
.2124	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2125	4a		lsr a				lsr 	a
.2126	4a		lsr a				lsr 	a
.2127	4a		lsr a				lsr 	a
.2128	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.212a	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.212c	20 92 20	jsr $2092			jsr 	SpriteSetTarget
.212f	20 3e 21	jsr $213e			jsr 	SMWritePosition 					; write X position out.
.2132	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.2134	46 2a		lsr $2a				lsr 	temp0
.2136	e8		inx				inx 										; get the y position
.2137	20 3e 21	jsr $213e			jsr 	SMWritePosition 					; and write that out.
.213a	ca		dex				dex 										; fix X and quit.
.213b	68		pla				pla
.213c	a8		tay				tay
.213d	60		rts				rts
.213e					SMWritePosition:
.213e	a5 2a		lda $2a				lda 	temp0 								; get dim size
.2140	29 03		and #$03			and 	#3 									; in range into Y
.2142	a8		tay				tay
.2143	38		sec				sec
.2144	b5 98		lda $98,x			lda 	esInt0,x
.2146	f9 5a 21	sbc $215a,y			sbc 	SMHalfSize,y
.2149	8d 23 9f	sta $9f23			sta 	$9F23
.214c	ee 20 9f	inc $9f20			inc 	$9F20
.214f	b5 a0		lda $a0,x			lda 	esInt1,x
.2151	e9 00		sbc #$00			sbc 	#0
.2153	8d 23 9f	sta $9f23			sta 	$9F23
.2156	ee 20 9f	inc $9f20			inc 	$9F20
.2159	60		rts				rts
.215a					SMHalfSize:
>215a	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.215e					SpriteReadCoordinate:
.215e	98		tya				tya
.215f	48		pha				pha
.2160	08		php				php 										; save CTR on stack
.2161	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2163	20 92 20	jsr $2092			jsr 	SpriteSetTarget
.2166	ad 23 9f	lda $9f23			lda 	$9F23
.2169	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.216a	4a		lsr a				lsr 	a
.216b	4a		lsr a				lsr 	a
.216c	4a		lsr a				lsr 	a
.216d	28		plp				plp 										; restore CTS
.216e	08		php				php
.216f	90 02		bcc $2173			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2171	4a		lsr a				lsr 	a
.2172	4a		lsr a				lsr 	a
.2173					_SPRCNotY1:
.2173	29 03		and #$03			and 	#3 									; point into half width/height
.2175	a8		tay				tay
.2176	b9 5a 21	lda $215a,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2179	95 b0		sta $b0,x			sta 	esInt3,x
.217b	28		plp				plp 										; CS Y CC X
.217c	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.217e	2a		rol a				rol 	a
.217f	2a		rol a				rol 	a
.2180	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2182	20 92 20	jsr $2092			jsr 	SpriteSetTarget 					; set data pointer offset by that
.2185	18		clc				clc 										; read and unfix centre.
.2186	ad 23 9f	lda $9f23			lda 	$9F23
.2189	75 b0		adc $b0,x			adc 	esInt3,x
.218b	95 98		sta $98,x			sta 	esInt0,x
.218d	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2190	ad 23 9f	lda $9f23			lda 	$9F23
.2193	69 00		adc #$00			adc 	#0
.2195	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2197	c9 08		cmp #$08			cmp		#$08
.2199	90 02		bcc $219d			bcc 	_SPRCNoSX
.219b	09 f0		ora #$f0			ora 	#$F0
.219d					_SPRCNoSX:
.219d	95 a0		sta $a0,x			sta 	esInt1,x
.219f	68		pla				pla
.21a0	a8		tay				tay
.21a1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.21a2					Sprite_GetX:
.21a2	18		clc				clc
.21a3	90 01		bcc $21a6			bcc 	SpriteGetCode
.21a5					Sprite_GetY:
.21a5	38		sec				sec
.21a6					SpriteGetCode:
.21a6	08		php				php 								; CLC : X SEC: Y, save on stack.
.21a7	48		pha				pha 								; save stack position
.21a8	20 c4 21	jsr $21c4			jsr 	GetSpriteNumber 			; get # of sprite.
.21ab	a2 04		ldx #$04		ldx	#4
.21ad	20 f1 3c	jsr $3cf1		jsr	mainHandler
.21b0	68		pla				pla
.21b1	aa		tax				tax
.21b2	28		plp				plp 								; which one ?
.21b3	20 5e 21	jsr $215e			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.21b6	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.21b8	29 80		and #$80			and 	#$80
.21ba	f0 02		beq $21be			beq 	_SGXYPos
.21bc	a9 ff		lda #$ff			lda 	#$FF
.21be					_SGXYPos:
.21be	95 a8		sta $a8,x			sta 	esInt2,x
.21c0	95 b0		sta $b0,x			sta 	esInt3,x
.21c2	8a		txa				txa 								; return NSP in A
.21c3	60		rts				rts
.21c4					GetSpriteNumber:
.21c4	48		pha				pha
.21c5	a2 0c		ldx #$0c		ldx	#12
.21c7	20 f1 3c	jsr $3cf1		jsr	mainHandler
.21ca	68		pla				pla
.21cb	aa		tax				tax
.21cc	b5 98		lda $98,x			lda 	esInt0,x
.21ce	20 d6 20	jsr $20d6			jsr 	SelectSpriteA
.21d1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c19					currentMode:
>0c19							.fill 	4
.21d2					ForceMode0:
.21d2	a2 00		ldx #$00			ldx 	#0
.21d4	86 98		stx $98				stx 	esInt0 						; in case we do it.
.21d6					_FMCheck:
.21d6	bd 69 22	lda $2269,x			lda 	CMModeList,x 				; do we need to switch ?
.21d9	dd 19 0c	cmp $0c19,x			cmp 	currentMode,x
.21dc	d0 13		bne $21f1			bne 	CMSetMode 					; different so switch.
.21de	e8		inx				inx
.21df	e0 04		cpx #$04			cpx 	#4
.21e1	d0 f3		bne $21d6			bne 	_FMCheck
.21e3	60		rts				rts
.21e4					CommandMode:
.21e4	a9 00		lda #$00			lda 	#0
.21e6	a2 0a		ldx #$0a		ldx	#10
.21e8	20 f1 3c	jsr $3cf1		jsr	mainHandler
.21eb	a5 b0		lda $b0				lda 	esInt3
.21ed	29 70		and #$70			and 	#$70
.21ef	d0 06		bne $21f7			bne 	CMNoExpand
.21f1					CMSetMode:
.21f1	20 48 22	jsr $2248			jsr 	CMExpandMode
.21f4	4c 0b 22	jmp $220b			jmp 	CMUpdateMode
.21f7					CMNoExpand:
.21f7	a5 98		lda $98				lda 	esInt0
.21f9	8d 19 0c	sta $0c19			sta 	currentMode
.21fc	a5 a0		lda $a0				lda 	esInt1
.21fe	8d 1a 0c	sta $0c1a			sta 	currentMode+1
.2201	a5 a8		lda $a8				lda 	esInt2
.2203	8d 1b 0c	sta $0c1b			sta 	currentMode+2
.2206	a5 b0		lda $b0				lda 	esInt3
.2208	8d 1c 0c	sta $0c1c			sta 	currentMode+3
.220b					CMUpdateMode:
.220b	a2 11		ldx #$11			ldx 	#$11
.220d					_CMClear:
.220d	a9 00		lda #$00			lda 	#0
.220f	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.2212	ca		dex				dex
.2213	10 f8		bpl $220d			bpl 	_CMClear
.2215	ad 1c 0c	lda $0c1c			lda 	currentMode+3 				; get current mode
.2218	48		pha				pha 								; stack twice.
.2219	48		pha				pha
.221a	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.221c	09 01		ora #$01			ora 	#$01 						; turn the output on.
.221e	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.2221	68		pla				pla 								; get back
.2222	20 79 22	jsr $2279			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2225	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.2228	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.2229	4a		lsr a				lsr 	a
.222a	4a		lsr a				lsr 	a
.222b	20 79 22	jsr $2279			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.222e	8d 2b 9f	sta $9f2b			sta 	$9F2B
.2231	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.2233	ad 19 0c	lda $0c19			lda 	currentMode					; get L0 config byte
.2236	20 84 22	jsr $2284			jsr 	CMDecodeLayer 				; and decode layer 0
.2239	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.223b	ad 1a 0c	lda $0c1a			lda 	currentMode+1
.223e	20 84 22	jsr $2284			jsr 	CMDecodeLayer
.2241	20 58 1d	jsr $1d58			jsr 	gdModeChanged 				; check the bitmap status.
.2244	20 bc 18	jsr $18bc			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2247	60		rts				rts
.2248					CMExpandMode:
.2248	a5 98		lda $98				lda 	esInt0 						; get mode number
.224a	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.224c	b0 16		bcs $2264			bcs 	_CMModeError
.224e	0a		asl a				asl 	a 							; x 4 into X
.224f	0a		asl a				asl 	a
.2250	aa		tax				tax
.2251	98		tya				tya
.2252	48		pha				pha
.2253	a0 00		ldy #$00			ldy 	#0
.2255					_CMEMCopy:
.2255	bd 69 22	lda $2269,x			lda 	CMModeList,x
.2258	99 19 0c	sta $0c19,y			sta 	currentMode,y
.225b	e8		inx				inx
.225c	c8		iny				iny
.225d	c0 04		cpy #$04			cpy 	#4
.225f	d0 f4		bne $2255			bne 	_CMEMCopy
.2261	68		pla				pla
.2262	a8		tay				tay
.2263	60		rts				rts
.2264					_CMModeError:
.2264	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2266	20 18 15	jsr $1518		jsr	errorHandler
.2269					CMModeList:
>2269	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>226d	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2271	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>2275	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2279					CMEndModeList:
.2279					CMToScale:
.2279	29 03		and #$03			and 	#3 							; lower 2 bits only
.227b	aa		tax				tax 								; put in X for counting
.227c	a9 00		lda #$00			lda 	#0 							; zero result
.227e	38		sec				sec 								; first time rotate CS in
.227f					_CMTSLoop:
.227f	6a		ror a				ror 	a
.2280	ca		dex				dex
.2281	10 fc		bpl $227f			bpl 	_CMTSLoop
.2283	60		rts				rts
.2284					CMDecodeLayer:
.2284	48		pha				pha 								; save it.
.2285	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2287	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.228a	68		pla				pla 								; get it back
.228b	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.228d	f0 02		beq $2291			beq 	_CMDLNotSet
.228f	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2291					_CMDLNotSet:
.2291	e0 00		cpx #$00			cpx 	#0
.2293	f0 06		beq $229b			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.2295	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2297	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.229a	60		rts				rts
.229b					_CMDLayer0:
.229b	09 80		ora #$80			ora 	#$80 						; tile base is $80
.229d	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.22a0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.22a1					CommandPalette:
.22a1	a9 00		lda #$00			lda 	#0
.22a3	a2 0c		ldx #$0c		ldx	#12
.22a5	20 f1 3c	jsr $3cf1		jsr	mainHandler
.22a8	a2 02		ldx #$02		ldx	#2
.22aa	20 f1 3c	jsr $3cf1		jsr	mainHandler
.22ad	a9 01		lda #$01			lda 	#1
.22af	a2 08		ldx #$08		ldx	#8
.22b1	20 f1 3c	jsr $3cf1		jsr	mainHandler
.22b4	a5 98		lda $98				lda 	esInt0 					; get palette #
.22b6	20 c6 22	jsr $22c6			jsr 	PointToPaletteA			; point to palette register
.22b9	a5 99		lda $99				lda 	esInt0+1
.22bb	8d 23 9f	sta $9f23			sta 	$9F23
.22be	a5 a1		lda $a1				lda 	esInt1+1
.22c0	29 0f		and #$0f			and 	#$0F
.22c2	8d 23 9f	sta $9f23			sta 	$9F23
.22c5	60		rts				rts
.22c6					PointToPaletteA:
.22c6	0a		asl a				asl 	a 							; x 2 -> LSB
.22c7	8d 20 9f	sta $9f20			sta 	$9F20
.22ca	a9 00		lda #$00			lda 	#0 							; carry into A
.22cc	2a		rol a				rol 	a
.22cd	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.22cf	8d 21 9f	sta $9f21			sta 	$9F21
.22d2	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.22d4	8d 22 9f	sta $9f22			sta 	$9F22
.22d7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.22d8					Command_VLoad:
.22d8	a9 00		lda #$00			lda 	#0 								; string which is the file name
.22da	a2 0e		ldx #$0e		ldx	#14
.22dc	20 f1 3c	jsr $3cf1		jsr	mainHandler
.22df	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.22e1	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.22e3	95 98		sta $98,x			sta 	esInt0,x
.22e5	a5 36		lda $36				lda 	lowMemory+1
.22e7	95 a0		sta $a0,x			sta 	esInt1,x
.22e9	a9 00		lda #$00			lda 	#0
.22eb	95 a8		sta $a8,x			sta 	esInt2,x
.22ed	95 b0		sta $b0,x			sta 	esInt3,x
.22ef	a2 0e		ldx #$0e		ldx	#14
.22f1	20 f6 14	jsr $14f6		jsr	deviceHandler
.22f4	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.22f6	85 2a		sta $2a				sta 	temp0
.22f8	a5 a1		lda $a1				lda 	esInt1+1
.22fa	85 2b		sta $2b				sta 	temp0+1
.22fc	20 78 23	jsr $2378			jsr 	LoadVRAMFile 					; load the VRAM file in.
.22ff	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.2300					Command_VPoke:
.2300	38		sec				sec 						; one byte , CS
.2301	b0 01		bcs $2304			bcs 	CmdVideoWrite
.2303					Command_VDoke:
.2303	18		clc				clc 						; two bytes, CC
.2304					CmdVideoWrite:
.2304	08		php				php 						; save one or two btes
.2305	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.2307	a2 0a		ldx #$0a		ldx	#10
.2309	20 f1 3c	jsr $3cf1		jsr	mainHandler
.230c	a2 02		ldx #$02		ldx	#2
.230e	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2311	a9 01		lda #$01			lda 	#1
.2313	a2 0a		ldx #$0a		ldx	#10
.2315	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2318	a2 00		ldx #$00			ldx 	#0
.231a	20 2b 23	jsr $232b			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.231d	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.231f	8d 23 9f	sta $9f23			sta 	$9F23
.2322	28		plp				plp 						; if it was Poke then exit
.2323	b0 05		bcs $232a			bcs 	_CVWExit
.2325	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2327	8d 23 9f	sta $9f23			sta 	$9F23
.232a					_CVWExit:
.232a	60		rts				rts
.232b					SetUpTOSVRamAddress:
.232b	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.232d	29 fe		and #$fe			and 	#$FE
.232f	15 b0		ora $b0,x			ora 	esInt3,x
.2331	d0 14		bne $2347			bne 	CVWValue
.2333	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.2335	8d 20 9f	sta $9f20			sta 	$9F20
.2338	b5 a0		lda $a0,x			lda 	esInt1,x
.233a	8d 21 9f	sta $9f21			sta	 	$9F21
.233d	b5 a8		lda $a8,x			lda 	esInt2,x
.233f	29 01		and #$01			and 	#1
.2341	09 10		ora #$10			ora 	#$10 				; step 1.
.2343	8d 22 9f	sta $9f22			sta 	$9F22
.2346	60		rts				rts
.2347					CVWValue:
.2347	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2349	20 18 15	jsr $1518		jsr	errorHandler
.234c					Command_VPeek:
.234c	38		sec				sec 						; one byte , CS
.234d	b0 01		bcs $2350			bcs 	CmdVideoRead
.234f					Command_VDeek:
.234f	18		clc				clc 						; two bytes, CC
.2350					CmdVideoRead:
.2350	08		php				php 						; save action on stack.
.2351	48		pha				pha 						; save stack position
.2352	a2 0a		ldx #$0a		ldx	#10
.2354	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2357	a2 04		ldx #$04		ldx	#4
.2359	20 f1 3c	jsr $3cf1		jsr	mainHandler
.235c	68		pla				pla
.235d	aa		tax				tax
.235e	20 2b 23	jsr $232b			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2361	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2363	95 a0		sta $a0,x			sta 	esInt1,x
.2365	95 a8		sta $a8,x			sta 	esInt2,x
.2367	95 b0		sta $b0,x			sta 	esInt3,x
.2369	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.236c	95 98		sta $98,x			sta 	esInt0,x
.236e	28		plp				plp 						; check if DOKE (carry was clear)
.236f	b0 05		bcs $2376			bcs 	_CVRExit
.2371	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.2374	95 a0		sta $a0,x			sta 	esInt1,x
.2376					_CVRExit:
.2376	8a		txa				txa 						; return X position.
.2377	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c1d					compressMode:
>0c1d							.fill 	1
.0c1e					imageInfo:
>0c1e							.fill 	X16MaxImages
.0c5e					imageAddr2Low:
>0c5e							.fill  	X16MaxImages
.0c9e					imageAddr2High:
>0c9e							.fill  	X16MaxImages
.2378					LoadVRAMFile:
.2378	8a		txa				txa
.2379	48		pha				pha
.237a	98		tya				tya
.237b	48		pha				pha
.237c					_LVRLoop:
.237c	20 58 24	jsr $2458			jsr 	LVFGet 						; get the next (never access direct)
.237f	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.2381	f0 42		beq $23c5			beq 	_LVRExit
.2383	b0 5c		bcs $23e1			bcs 	_LVRLoad 					; load data in ?
.2385	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2387	90 11		bcc $239a			bcc 	_LVRSetAddress
.2389	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.238b	f0 3d		beq $23ca			beq 	_LVRSetPalette
.238d	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.238f	90 2d		bcc $23be			bcc 	_LVRSetCompress
.2391	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2393	90 60		bcc $23f5			bcc 	_LVRSetSprite
.2395	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2397	20 18 15	jsr $1518		jsr	errorHandler
.239a					_LVRSetAddress:
.239a	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.239c	20 58 24	jsr $2458			jsr 	LVFGet
.239f	85 2c		sta $2c				sta 	temp1
.23a1	a9 00		lda #$00			lda 	#0
.23a3	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.23a5	66 2c		ror $2c				ror 	temp1
.23a7	6a		ror a				ror		a
.23a8	46 2d		lsr $2d				lsr 	temp1+1
.23aa	66 2c		ror $2c				ror 	temp1
.23ac	6a		ror a				ror		a
.23ad	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.23b0	a5 2c		lda $2c				lda 	temp1
.23b2	8d 21 9f	sta $9f21			sta 	$9F21
.23b5	a5 2d		lda $2d				lda 	temp1+1
.23b7	09 10		ora #$10			ora 	#$10
.23b9	8d 22 9f	sta $9f22			sta 	$9F22
.23bc	d0 be		bne $237c			bne 	_LVRLoop
.23be					_LVRSetCompress:
.23be	29 07		and #$07			and 	#7
.23c0	8d 1d 0c	sta $0c1d			sta 	compressMode
.23c3	10 b7		bpl $237c			bpl 	_LVRLoop
.23c5					_LVRExit:
.23c5	68		pla				pla
.23c6	a8		tay				tay
.23c7	68		pla				pla
.23c8	aa		tax				tax
.23c9	60		rts				rts
.23ca					_LVRSetPalette:
.23ca	20 58 24	jsr $2458			jsr 	LVFGet 						; get palette id.
.23cd	20 c6 22	jsr $22c6			jsr 	PointToPaletteA 			; in palette.asm
.23d0	20 58 24	jsr $2458			jsr 	LVFGet 						; copy 12 bit palette data in.
.23d3	8d 23 9f	sta $9f23			sta 	$9F23
.23d6	20 58 24	jsr $2458			jsr 	LVFGet
.23d9	29 0f		and #$0f			and 	#$0F
.23db	8d 23 9f	sta $9f23			sta 	$9F23
.23de	4c 7c 23	jmp $237c			jmp 	_LVRLoop
.23e1					_LVRLoad:
.23e1	ae 1d 0c	ldx $0c1d			ldx 	compressMode
.23e4	d0 55		bne $243b			bne 	_LVRNotMode0
.23e6	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.23e8					_LVRLCopyX:
.23e8	aa		tax				tax
.23e9					_LVRLCopy:
.23e9	20 58 24	jsr $2458			jsr 	LVFGet 						; write to data.
.23ec	8d 23 9f	sta $9f23			sta 	$9F23
.23ef	ca		dex				dex
.23f0	d0 f7		bne $23e9			bne 	_LVRLCopy
.23f2	4c 7c 23	jmp $237c			jmp 	_LVRLoop
.23f5					_LVRSetSprite:
.23f5	48		pha				pha 								; save on stack
.23f6	20 58 24	jsr $2458			jsr 	LVFGet 						; get the sprite number into X
.23f9	aa		tax				tax
.23fa	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.23fc	b0 38		bcs $2436			bcs 	_LVRSSValue
.23fe	68		pla				pla 								; restore the data held in the first byte
.23ff	9d 1e 0c	sta $0c1e,x			sta 	imageInfo,x 				; and write into the sprite image table.
.2402					_LVRAlignVRAM:
.2402	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.2405	29 1f		and #$1f			and 	#$1F
.2407	f0 07		beq $2410			beq 	_LVRAligned
.2409	a9 00		lda #$00			lda 	#$00
.240b	8d 23 9f	sta $9f23			sta 	$9F23
.240e	f0 f2		beq $2402			beq 	_LVRAlignVRAM
.2410					_LVRAligned:
.2410	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.2413	4a		lsr a				lsr 	a 	 						; first halve into temp1
.2414	ad 21 9f	lda $9f21			lda 	$9F21
.2417	6a		ror a				ror 	a
.2418	85 2d		sta $2d				sta 	temp1+1
.241a	ad 20 9f	lda $9f20			lda 	$9F20
.241d	6a		ror a				ror 	a
.241e	85 2c		sta $2c				sta 	temp1
.2420	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.2422					_LVRShift:
.2422	46 2d		lsr $2d				lsr 	temp1+1
.2424	66 2c		ror $2c				ror 	temp1
.2426	88		dey				dey
.2427	d0 f9		bne $2422			bne 	_LVRShift
.2429	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.242b	9d 9e 0c	sta $0c9e,x			sta 	imageAddr2High,x
.242e	a5 2c		lda $2c				lda 	temp1
.2430	9d 5e 0c	sta $0c5e,x			sta 	imageAddr2Low,x
.2433	4c 7c 23	jmp $237c			jmp 	_LVRLoop
.2436					_LVRSSValue:
.2436	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2438	20 18 15	jsr $1518		jsr	errorHandler
.243b					_LVRNotMode0:
.243b	e0 01		cpx #$01			cpx 	#1
.243d	d0 15		bne $2454			bne 	_LVRNotMode1
.243f	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.2441	c9 40		cmp #$40			cmp 	#$40
.2443	90 a3		bcc $23e8			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2445					_LVRRLEGroup:
.2445	29 3f		and #$3f			and 	#$3F
.2447	aa		tax				tax
.2448	20 58 24	jsr $2458			jsr 	LVFGet
.244b					_LVRLEGroupLoop:
.244b	8d 23 9f	sta $9f23			sta 	$9F23
.244e	ca		dex				dex
.244f	d0 fa		bne $244b			bne 	_LVRLEGroupLoop
.2451	4c 7c 23	jmp $237c			jmp 	_LVRLoop
.2454					_LVRNotMode1:
>2454	db						.byte 	$DB
.2455	4c 54 24	jmp $2454			jmp 	_LVRNotMode1
.2458	84 32		sty $32		LVFGet:	sty 	tempShort
.245a	a0 00		ldy #$00			ldy 	#0
.245c	b1 2a		lda ($2a),y			lda 	(temp0),y
.245e	a4 32		ldy $32				ldy	 	tempShort
.2460	e6 2a		inc $2a				inc 	temp0
.2462	d0 02		bne $2466			bne 	_LVFGExit
.2464	e6 2b		inc $2b				inc 	temp0+1
.2466					_LVFGExit:
.2466	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2467					section_end_extension:
.2467					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2467					floatingpointHandler:
.2467	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2469	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.246c					section_end_floatingpoint:
.246c					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.246c					ColdStartEntry:
.246c	a2 ff		ldx #$ff			ldx 	#$FF
.246e	9a		txs				txs
.246f	20 f8 24	jsr $24f8			jsr 	ForceStandardMode
.2472	a2 04		ldx #$04		ldx	#4
.2474	20 f6 14	jsr $14f6		jsr	deviceHandler
.2477	a0 ff		ldy #$ff			ldy 	#255
.2479					_CSBanner:
.2479	c8		iny				iny
.247a	b9 a0 24	lda $24a0,y			lda 	Intro,y
.247d	f0 14		beq $2493			beq 	_CSStart
.247f	c9 08		cmp #$08			cmp 	#8
.2481	90 08		bcc $248b			bcc 	_CSInk
.2483	a2 16		ldx #$16		ldx	#22
.2485	20 f6 14	jsr $14f6		jsr	deviceHandler
.2488	4c 79 24	jmp $2479			jmp 	_CSBanner
.248b					_CSInk:
.248b	a2 08		ldx #$08		ldx	#8
.248d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2490	4c 79 24	jmp $2479			jmp 	_CSBanner
.2493					_CSStart:
.2493	a2 16		ldx #$16		ldx	#22
.2495	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2498	a2 06		ldx #$06		ldx	#6
.249a	20 f1 3c	jsr $3cf1		jsr	mainHandler
.249d	4c b8 25	jmp $25b8			jmp 	WarmStartEntry
>24a0	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>24a8	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>24b8	20 2a 2a 2a 0d 0d
>24be	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>24c6	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>24d6	32 30 32 31 0d 0d
>24dc	02 42 61 73 69 63 20				.text 	2,"Basic "
>24e3	30 2e 32 30					.text "0.20"
>24e7	20 28						.text 	" ("
>24e9	30 33 2d 41 70 72 2d 32				.text "03-Apr-2021"
>24f1	30 32 31
>24f4	29 0d 0d 00					.text 	")",13,13,0
.24f8					ForceStandardMode:
.24f8	a9 fe		lda #$fe			lda 	#$FE
.24fa	20 69 18	jsr $1869		jsr	extensionHandler
.24fd	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.24fe					DeleteLine:
.24fe	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2501	85 2a		sta $2a				sta 	temp0
.2503	ad c9 0a	lda $0ac9			lda 	basePage+1
.2506	85 2b		sta $2b				sta 	temp0+1
.2508	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.250a	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.250c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.250e	d0 07		bne $2517			bne 	_DLNext
.2510	c8		iny				iny
.2511	a5 a0		lda $a0				lda 	esInt1
.2513	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2515	f0 06		beq $251d			beq 	_DLFound
.2517	20 3b 25	jsr $253b	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.251a	d0 ec		bne $2508			bne 	_DLLoop
.251c	60		rts				rts
.251d					_DLFound:
.251d	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.251f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2521	a8		tay				tay 								; so we copy from (temp0),y
.2522	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.2524					_DLCopyDown:
.2524	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2526	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2528	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.252a	d0 02		bne $252e			bne 	_DLNoCarry
.252c	e6 2b		inc $2b				inc 	temp0+1
.252e					_DLNoCarry:
.252e	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2530	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.2532	d0 f0		bne $2524			bne 	_DLCopyDown
.2534	a5 2b		lda $2b				lda 	temp0+1
.2536	c5 36		cmp $36				cmp 	lowMemory+1
.2538	d0 ea		bne $2524			bne 	_DLCopyDown
.253a	60		rts				rts
.253b					IAdvanceTemp0:
.253b	84 32		sty $32				sty 	tempShort
.253d	18		clc				clc
.253e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2540	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.2542	65 2a		adc $2a				adc 	temp0
.2544	85 2a		sta $2a				sta 	temp0
.2546	90 02		bcc $254a			bcc 	_IATNoCarry
.2548	e6 2b		inc $2b				inc 	temp0+1
.254a					_IATNoCarry:
.254a	b1 2a		lda ($2a),y			lda 	(temp0),y
.254c	a4 32		ldy $32				ldy 	tempShort
.254e	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2550	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.2551					InsertLine:
.2551	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2554	85 2a		sta $2a				sta 	temp0
.2556	ad c9 0a	lda $0ac9			lda 	basePage+1
.2559	85 2b		sta $2b				sta 	temp0+1
.255b					_ILLoop:
.255b	a0 01		ldy #$01			ldy 	#1
.255d	b1 2a		lda ($2a),y			lda 	(temp0),y
.255f	c5 98		cmp $98				cmp 	esInt0
.2561	c8		iny				iny
.2562	b1 2a		lda ($2a),y			lda 	(temp0),y
.2564	e5 a0		sbc $a0				sbc 	esInt1
.2566	b0 05		bcs $256d			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2568	20 3b 25	jsr $253b			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.256b	d0 ee		bne $255b			bne 	_ILLoop
.256d					_ILFound:
.256d	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.256f	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.2571	a5 36		lda $36				lda 	lowMemory+1
.2573	85 2d		sta $2d				sta 	temp1+1
.2575	ad 1b 0e	lda $0e1b			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2578	18		clc				clc 								; add 3 for the line number and offset.
.2579	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.257b	a8		tay				tay
.257c	a2 00		ldx #$00			ldx 	#0
.257e	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.2580	91 2c		sta ($2c),y			sta 	(temp1),y
.2582	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.2584	c5 2a		cmp $2a				cmp 	temp0
.2586	d0 06		bne $258e			bne 	_ILMNext
.2588	a5 2d		lda $2d				lda 	temp1+1
.258a	c5 2b		cmp $2b				cmp 	temp0+1
.258c	f0 0b		beq $2599			beq 	_ILMCopy
.258e					_ILMNext:
.258e	a5 2c		lda $2c				lda 	temp1
.2590	d0 02		bne $2594			bne 	_ILNoBorrow
.2592	c6 2d		dec $2d				dec 	temp1+1
.2594					_ILNoBorrow:
.2594	c6 2c		dec $2c				dec 	temp1
.2596	4c 7e 25	jmp $257e			jmp 	_ILMove 					; and go round again
.2599					_ILMCopy:
.2599	98		tya				tya 								; Y is the offset of the new line.
.259a	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.259c	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.259e	a5 98		lda $98				lda 	esInt0
.25a0	91 2a		sta ($2a),y			sta 	(temp0),y
.25a2	c8		iny				iny
.25a3	a5 a0		lda $a0				lda 	esInt1
.25a5	91 2a		sta ($2a),y			sta 	(temp0),y
.25a7	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.25a9					_ILMCopy2:
.25a9	b1 28		lda ($28),y			lda 	(codePtr),y
.25ab	c8		iny				iny
.25ac	c8		iny				iny
.25ad	c8		iny				iny
.25ae	91 2a		sta ($2a),y			sta 	(temp0),y
.25b0	88		dey				dey
.25b1	88		dey				dey
.25b2	cc 1b 0e	cpy $0e1b			cpy 	tokenBufferIndex
.25b5	d0 f2		bne $25a9			bne 	_ILMCopy2
.25b7	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.25b8					WarmStartEntry:
.25b8	a2 ff		ldx #$ff			ldx 	#$FF
.25ba	9a		txs				txs
.25bb	20 f8 24	jsr $24f8			jsr 	ForceStandardMode
.25be	a9 02		lda #$02			lda 	#2							; green text.
.25c0	a2 08		ldx #$08		ldx	#8
.25c2	20 f6 14	jsr $14f6		jsr	deviceHandler
.25c5	a2 0c		ldx #$0c		ldx	#12
.25c7	20 f6 14	jsr $14f6		jsr	deviceHandler
.25ca	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.25cc	85 28		sta $28				sta 	codePtr
.25ce	a5 2b		lda $2b				lda 	temp0+1
.25d0	85 29		sta $29				sta 	codePtr+1
.25d2	a2 06		ldx #$06		ldx	#6
.25d4	20 f6 14	jsr $14f6		jsr	deviceHandler
.25d7	a2 08		ldx #$08		ldx	#8
.25d9	20 37 48	jsr $4837		jsr	tokeniserHandler
.25dc	c9 00		cmp #$00			cmp 	#0
.25de	f0 25		beq $2605			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.25e0	a9 18		lda #$18			lda 	#(tokenHeader) & $FF
.25e2	85 28		sta $28				sta 	codePtr
.25e4	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.25e6	85 29		sta $29				sta 	1+(codePtr)
.25e8	ad 1b 0d	lda $0d1b			lda 	tokenBuffer 				; is it a blank line, go get another line.
.25eb	c9 80		cmp #$80			cmp 	#$80
.25ed	f0 c9		beq $25b8			beq 	WarmStartEntry
.25ef	29 c0		and #$c0			and 	#$C0						; does it start with a number
.25f1	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.25f3	f0 15		beq $260a			beq 	HasLineNumber
.25f5	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.25f7	8d 18 0d	sta $0d18			sta 	tokenHeader 				; fake program line.
.25fa	8d 19 0d	sta $0d19			sta 	tokenHeader+1
.25fd	8d 1a 0d	sta $0d1a			sta 	tokenHeader+2
.2600	a2 18		ldx #$18		ldx	#24
.2602	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2605					WSEError:
.2605	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2607	20 18 15	jsr $1518		jsr	errorHandler
.260a					HasLineNumber:
.260a	a0 03		ldy #$03			ldy 	#3 							; get line number
.260c	a9 00		lda #$00			lda 	#0
.260e	a2 0a		ldx #$0a		ldx	#10
.2610	20 f1 3c	jsr $3cf1		jsr	mainHandler
.2613	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.2615	05 b0		ora $b0				ora 	esInt3
.2617	d0 ec		bne $2605			bne 	WSEError
.2619	98		tya				tya 								; make codePtr point to code after the line number.
.261a	18		clc				clc 								; by skipping over the tokenised number.
.261b	65 28		adc $28				adc 	codePtr
.261d	85 28		sta $28				sta 	codePtr
.261f	90 02		bcc $2623			bcc		_HLNNoCarry
.2621	e6 29		inc $29				inc 	codePtr+1
.2623					_HLNNoCarry:
.2623	98		tya				tya 								; subtract that offset from the code buffer index
.2624	38		sec				sec
.2625	49 ff		eor #$ff			eor 	#$FF
.2627	6d 1b 0e	adc $0e1b			adc 	tokenBufferIndex
.262a	18		clc				clc 								; add space allowing for header & $80 trailer
.262b	69 04		adc #$04			adc 	#4
.262d	8d 1b 0e	sta $0e1b			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2630	20 fe 24	jsr $24fe			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.2633					_HLNNoDelete:
.2633	ad 1b 0e	lda $0e1b			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2636	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2638	f0 0c		beq $2646			beq 	_HLMEditDone
.263a	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.263c	18		clc				clc 								; workspace (1k)
.263d	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.263f	c5 34		cmp $34				cmp 	highMemory+1
.2641	b0 0b		bcs $264e			bcs 	_HLMMemory 					; nope, won't allowit.
.2643	20 51 25	jsr $2551			jsr 	InsertLine 					; insert the line in
.2646					_HLMEditDone:
.2646	a2 06		ldx #$06		ldx	#6
.2648	20 f1 3c	jsr $3cf1		jsr	mainHandler
.264b	4c b8 25	jmp $25b8			jmp 	WarmStartEntry
.264e					_HLMMemory:
.264e	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2650	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2653					interactionHandler:
.2653	7c 56 26	jmp ($2656,x)			jmp 	(interactionVectors,x)
.2656					interactionVectors:
>2656	5c 26					.word _DummyControlHandler ; index 0
>2658	6c 24					.word ColdStartEntry       ; index 2
>265a	b8 25					.word WarmStartEntry       ; index 4
.265c					_DummyControlHandler:
.265c	60		rts			rts

;******  Return to file: basic.asm

.265d					section_end_interaction:
.265d					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cde					dataPtr:
>0cde							.fill 	2
.0ce0					dataIndex:
>0ce0							.fill 	1
.265d					CommandRead:
.265d	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.265f	20 a4 35	jsr $35a4			jsr 	EvaluateReference
.2662	20 a3 26	jsr $26a3			jsr 	SwapDPCP 					; use the data pointer.
.2665	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2667	c8		iny				iny
.2668	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.266a	f0 07		beq $2673			beq 	_CRInData
.266c	88		dey				dey
.266d	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.266f	aa		tax				tax
.2670	20 a4 2d	jsr $2da4			jsr 	ScanForward
.2673					_CRInData:
.2673	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2675	20 4c 35	jsr $354c			jsr 	Evaluate
.2678	ca		dex				dex 								; and write the value.
.2679	20 f7 28	jsr $28f7			jsr 	WriteValue
.267c	20 a3 26	jsr $26a3			jsr 	SwapDPCP 					; get the code pointer back.
.267f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2681	c8		iny				iny
.2682	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2684	f0 d7		beq $265d			beq 	CommandRead
.2686	88		dey				dey
.2687	60		rts				rts
.2688					CommandData:
.2688	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.268a	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.268c	20 a4 2d	jsr $2da4			jsr 	ScanForward
.268f	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2690	60		rts				rts
.2691					CommandRestore:
.2691	ad c8 0a	lda $0ac8			lda 	basePage
.2694	8d de 0c	sta $0cde			sta 	dataPtr
.2697	ad c9 0a	lda $0ac9			lda 	basePage+1
.269a	8d df 0c	sta $0cdf			sta 	dataPtr+1
.269d	a9 03		lda #$03			lda 	#3
.269f	8d e0 0c	sta $0ce0			sta 	dataIndex
.26a2	60		rts				rts
.26a3					SwapDPCP:
.26a3	8a		txa				txa
.26a4	48		pha				pha
.26a5	98		tya				tya 								; swap Y, DataIndex
.26a6	ac e0 0c	ldy $0ce0			ldy 	DataIndex
.26a9	8d e0 0c	sta $0ce0			sta 	DataIndex
.26ac	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.26ae	ae de 0c	ldx $0cde			ldx 	dataptr
.26b1	8d de 0c	sta $0cde			sta 	dataPtr
.26b4	86 28		stx $28				stx 	codePtr
.26b6	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.26b8	ae df 0c	ldx $0cdf			ldx 	dataptr+1
.26bb	8d df 0c	sta $0cdf			sta 	dataPtr+1
.26be	86 29		stx $29				stx 	codePtr+1
.26c0	68		pla				pla
.26c1	aa		tax				tax
.26c2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.26c3					CommandGOSUB:
.26c3	20 69 35	jsr $3569			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.26c6	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.26c8	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.26ca	20 9e 3c	jsr $3c9e			jsr 	RSClaim
.26cd	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.26cf	20 ca 3c	jsr $3cca			jsr 	RSSavePosition
.26d2	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.26d4	f0 1b		beq $26f1			beq 	GotoTOS 					; and do a GOTO there.
.26d6					CommandRETURN:
.26d6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.26d8	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.26da	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.26dc	f0 05		beq $26e3			beq 	_isok
.26de	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.26e0	20 18 15	jsr $1518		jsr	errorHandler
.26e3					_isok:
.26e3	a9 01		lda #$01			lda 	#1
.26e5	20 dd 3c	jsr $3cdd			jsr 	RSLoadPosition 				; reload the position from offset 1.
.26e8	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.26ea	20 c0 3c	jsr $3cc0			jsr 	RSFree
.26ed	60		rts				rts
.26ee					CommandGOTO:
.26ee	20 69 35	jsr $3569			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.26f1					GotoTOS:
.26f1	20 8a 30	jsr $308a			jsr 	ResetCodeAddress 			; simple search.
.26f4					_GotoSearch:
.26f4	a0 00		ldy #$00			ldy 	#0 							; get offset
.26f6	b1 28		lda ($28),y			lda 	(codePtr),y
.26f8	f0 21		beq $271b			beq 	_GotoError 					; not found.
.26fa	c8		iny				iny									; check LSB match
.26fb	b1 28		lda ($28),y			lda 	(codePtr),y
.26fd	d5 98		cmp $98,x			cmp 	esInt0,x
.26ff	d0 07		bne $2708			bne 	_GotoNext
.2701	c8		iny				iny
.2702	b1 28		lda ($28),y			lda 	(codePtr),y
.2704	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2706	f0 10		beq $2718			beq 	_GotoFound
.2708					_GotoNext:
.2708	a0 00		ldy #$00			ldy 	#0 							; go next line
.270a	b1 28		lda ($28),y			lda 	(codePtr),y
.270c	18		clc				clc
.270d	65 28		adc $28				adc 	codePtr
.270f	85 28		sta $28				sta 	codePtr
.2711	90 e1		bcc $26f4			bcc 	_GotoSearch
.2713	e6 29		inc $29				inc 	codePtr+1
.2715	4c f4 26	jmp $26f4			jmp 	_GotoSearch
.2718					_GotoFound:
.2718	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.271a	60		rts				rts
.271b					_GotoError:
.271b	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.271d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0ce1					InputBuffer:
>0ce1							.fill 	MaxInputSize+1
.2720					Command_Input:
.2720	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2722	c8		iny				iny
.2723	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2725	f0 f9		beq $2720			beq 	Command_Input
.2727	88		dey				dey 							; undo consume
.2728	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.272a	f0 54		beq $2780			beq 	_CIExit 				; : or EOL, exit
.272c	c9 80		cmp #$80			cmp 	#TOK_EOL
.272e	f0 50		beq $2780			beq 	_CIExit
.2730	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2732	90 12		bcc $2746			bcc 	_CIVariable
.2734	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2736	d0 43		bne $277b			bne 	_CISyntax
.2738	a2 00		ldx #$00			ldx 	#0
.273a	20 60 35	jsr $3560			jsr 	EvaluateString 			; evaluate and print string
.273d	20 59 29	jsr $2959			jsr 	TOSToTemp0
.2740	20 4f 28	jsr $284f			jsr 	PrintString
.2743	4c 20 27	jmp $2720			jmp 	Command_Input
.2746					_CIVariable:
.2746	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2748	20 a4 35	jsr $35a4			jsr 	EvaluateReference  		; this is where its going
.274b					_CIRetry:
.274b	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.274d	a2 14		ldx #$14		ldx	#20
.274f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2752	98		tya				tya
.2753	48		pha				pha
.2754	20 94 27	jsr $2794			jsr 	InputString 			; input a string (manually)
.2757	a2 01		ldx #$01			ldx 	#1
.2759	20 81 27	jsr $2781			jsr 	BufferToStackX 			; make stack,x ref input string.
.275c	a5 90		lda $90				lda 	esType 					; if target type numeric
.275e	29 40		and #$40			and 	#$40 					; then convert to number
.2760	d0 11		bne $2773			bne 	_CIWrite
.2762	a2 01		ldx #$01			ldx 	#1
.2764	20 59 29	jsr $2959			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2767	a9 0a		lda #$0a			lda 	#10
.2769	20 71 3a	jsr $3a71			jsr 	MInt32FromString 		; convert it back from a string.
.276c	68		pla				pla
.276d	a8		tay				tay
.276e	b0 03		bcs $2773			bcs 	_CIWrite 				; successfully converted.
.2770	18		clc				clc 							; default fail FP conversion
.2771	90 d8		bcc $274b			bcc		_CIRetry				; failed, try again.
.2773					_CIWrite:
.2773	a2 00		ldx #$00			ldx 	#0
.2775	20 f7 28	jsr $28f7			jsr 	WriteValue
.2778	4c 20 27	jmp $2720			jmp 	Command_Input
.277b					_CISyntax:
.277b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.277d	20 18 15	jsr $1518		jsr	errorHandler
.2780					_CIExit:
.2780	60		rts				rts
.2781					BufferToStackX:
.2781	a9 e1		lda #$e1			lda 	#InputBuffer & $FF
.2783	95 98		sta $98,x			sta 	esInt0,x
.2785	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.2787	95 a0		sta $a0,x			sta 	esInt1,x
.2789	a9 00		lda #$00			lda 	#0
.278b	95 a8		sta $a8,x			sta 	esInt2,x
.278d	95 b0		sta $b0,x			sta 	esInt3,x
.278f	a9 40		lda #$40			lda 	#$40
.2791	95 90		sta $90,x			sta 	esType,x
.2793	60		rts				rts
.2794					InputString:
.2794	a9 00		lda #$00			lda 	#0
.2796	8d e1 0c	sta $0ce1			sta 	InputBuffer
.2799					_InputLoop:
.2799	a2 02		ldx #$02		ldx	#2
.279b	20 f6 14	jsr $14f6		jsr	deviceHandler
.279e	a2 0a		ldx #$0a		ldx	#10
.27a0	20 f6 14	jsr $14f6		jsr	deviceHandler
.27a3	c9 00		cmp #$00			cmp 	#0
.27a5	f0 f2		beq $2799			beq 	_InputLoop
.27a7	c9 08		cmp #$08			cmp 	#8
.27a9	f0 19		beq $27c4			beq 	_InputBackspace
.27ab	c9 0d		cmp #$0d			cmp 	#13
.27ad	f0 21		beq $27d0			beq 	_InputExit
.27af	ae e1 0c	ldx $0ce1			ldx 	InputBuffer
.27b2	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.27b4	f0 e3		beq $2799			beq 	_InputLoop
.27b6	9d e2 0c	sta $0ce2,x			sta 	InputBuffer+1,x 		; write char
.27b9	ee e1 0c	inc $0ce1			inc 	InputBuffer 			; advance count.
.27bc					_InputPrintLoop:
.27bc	a2 14		ldx #$14		ldx	#20
.27be	20 f6 14	jsr $14f6		jsr	deviceHandler
.27c1	4c 99 27	jmp $2799			jmp	 	_InputLoop
.27c4					_InputBackspace:
.27c4	ad e1 0c	lda $0ce1			lda 	InputBuffer 			; at start
.27c7	f0 d0		beq $2799			beq 	_InputLoop
.27c9	ce e1 0c	dec $0ce1			dec 	InputBuffer
.27cc	a9 08		lda #$08			lda 	#8
.27ce	d0 ec		bne $27bc			bne 	_InputPrintLoop
.27d0					_InputExit:
.27d0	a2 06		ldx #$06		ldx	#6
.27d2	20 f6 14	jsr $14f6		jsr	deviceHandler
.27d5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0d02					lastPrintToken:
>0d02							.fill 	1
.27d6					Command_Print:
.27d6	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.27d8	8d 02 0d	sta $0d02			sta 	lastPrintToken
.27db	88		dey				dey
.27dc					_PrintLoopSkip:
.27dc	c8		iny				iny
.27dd					_PrintLoop:
.27dd	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.27df	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.27e1	f0 5b		beq $283e			beq 	_PrintExit
.27e3	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.27e5	f0 57		beq $283e			beq 	_PrintExit
.27e7	8d 02 0d	sta $0d02			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.27ea	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.27ec	f0 ee		beq $27dc			beq 	_PrintLoopSkip
.27ee	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.27f0	f0 3c		beq $282e			beq	 	_PrintNewLine
.27f2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.27f4	f0 40		beq $2836			beq 	_PrintTab
.27f6	20 4a 35	jsr $354a			jsr 	EvaluateRoot 				; evaluate something at the root
.27f9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.27fb	85 2a		sta $2a				sta 	temp0
.27fd	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.27ff	85 2b		sta $2b				sta 	1+(temp0)
.2801	a5 90		lda $90				lda 	esType 						; get type
.2803	f0 15		beq $281a			beq		_PrintInteger
.2805	4a		lsr a				lsr 	a 							; check for floating point
.2806	b0 08		bcs $2810			bcs 	_PrintFloat
.2808					_PrintString:
.2808	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.280a	20 59 29	jsr $2959			jsr 	TOSToTemp0
.280d	4c 28 28	jmp $2828			jmp 	_PrintTemp0 				; print no leading space.
.2810					_PrintFloat:
.2810	a9 00		lda #$00			lda 	#0 							; stack level.
.2812	a2 16		ldx #$16		ldx	#22
.2814	20 67 24	jsr $2467		jsr	floatingpointHandler
.2817	4c 21 28	jmp $2821			jmp 	_PrintSpaceTemp0
.281a					_PrintInteger:
.281a	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.281c	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.281e	20 59 3b	jsr $3b59			jsr 	MInt32ToString				; convert to text
.2821					_PrintSpaceTemp0:
.2821	a9 20		lda #$20			lda 	#32
.2823	a2 14		ldx #$14		ldx	#20
.2825	20 f6 14	jsr $14f6		jsr	deviceHandler
.2828					_PrintTemp0:
.2828	20 4f 28	jsr $284f			jsr 	PrintString
.282b	4c dd 27	jmp $27dd			jmp 	_PrintLoop
.282e					_PrintNewLine:
.282e	a2 06		ldx #$06		ldx	#6
.2830	20 f6 14	jsr $14f6		jsr	deviceHandler
.2833	4c dc 27	jmp $27dc			jmp 	_PrintLoopSkip
.2836					_PrintTab:
.2836	a2 1a		ldx #$1a		ldx	#26
.2838	20 f6 14	jsr $14f6		jsr	deviceHandler
.283b	4c dc 27	jmp $27dc			jmp 	_PrintLoopSkip
.283e					_PrintExit:
.283e	ad 02 0d	lda $0d02			lda		lastPrintToken 				; check last token
.2841	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2843	f0 09		beq $284e			beq 	_PrintExit2
.2845	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2847	f0 05		beq $284e			beq 	_PrintExit2
.2849	a2 06		ldx #$06		ldx	#6
.284b	20 f6 14	jsr $14f6		jsr	deviceHandler
.284e					_PrintExit2:
.284e	60		rts				rts
.284f					PrintString:
.284f	8a		txa				txa
.2850	48		pha				pha
.2851	98		tya				tya
.2852	48		pha				pha
.2853	a0 00		ldy #$00			ldy 	#0							; get length
.2855	b1 2a		lda ($2a),y			lda 	(temp0),y
.2857	aa		tax				tax 								; into X
.2858	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.285a	f0 10		beq $286c			beq 	_PSExit
.285c	ca		dex				dex
.285d	8a		txa				txa
.285e	48		pha				pha
.285f	c8		iny				iny
.2860	b1 2a		lda ($2a),y			lda 	(temp0),y
.2862	a2 14		ldx #$14		ldx	#20
.2864	20 f6 14	jsr $14f6		jsr	deviceHandler
.2867	68		pla				pla
.2868	aa		tax				tax
.2869	4c 58 28	jmp $2858			jmp 	_PSLoop
.286c					_PSExit:
.286c	68		pla				pla
.286d	a8		tay				tay
.286e	68		pla				pla
.286f	aa		tax				tax
.2870	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2871					Command_CLS:
.2871	a2 04		ldx #$04		ldx	#4
.2873	20 f6 14	jsr $14f6		jsr	deviceHandler
.2876	60		rts				rts
.2877					Command_Ink:
.2877	a2 00		ldx #$00			ldx 	#0
.2879	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger
.287c	a2 08		ldx #$08		ldx	#8
.287e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2881	60		rts				rts
.2882					Command_Paper:
.2882	a2 00		ldx #$00			ldx 	#0
.2884	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger
.2887	a2 12		ldx #$12		ldx	#18
.2889	20 f6 14	jsr $14f6		jsr	deviceHandler
.288c	60		rts				rts
.288d					Command_Locate:
.288d	a2 00		ldx #$00			ldx 	#0
.288f	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger
.2892	20 83 3c	jsr $3c83			jsr 	CheckComma
.2895	e8		inx				inx
.2896	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger
.2899	98		tya				tya
.289a	48		pha				pha
.289b	a4 99		ldy $99				ldy 	esInt0+1
.289d	a5 98		lda $98				lda 	esInt0
.289f	a2 10		ldx #$10		ldx	#16
.28a1	20 f6 14	jsr $14f6		jsr	deviceHandler
.28a4	68		pla				pla
.28a5	a8		tay				tay
.28a6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.28a7					Command_VDU:
.28a7	20 69 35	jsr $3569			jsr 	EvaluateRootInteger 			; get integer at root.
.28aa	a5 98		lda $98				lda 	esInt0
.28ac	a2 14		ldx #$14		ldx	#20
.28ae	20 f6 14	jsr $14f6		jsr	deviceHandler
.28b1					_CVNext:
.28b1	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.28b3	c8		iny				iny
.28b4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.28b6	f0 ef		beq $28a7			beq 	Command_VDU
.28b8	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.28ba	d0 0a		bne $28c6			bne 	_CVExit
.28bc	a5 a0		lda $a0				lda 	esInt1
.28be	a2 14		ldx #$14		ldx	#20
.28c0	20 f6 14	jsr $14f6		jsr	deviceHandler
.28c3	4c b1 28	jmp $28b1			jmp 	_CVNext
.28c6	88		dey		_CVExit:dey
.28c7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.28c8					Command_Assert:
.28c8	20 69 35	jsr $3569			jsr 	EvaluateRootInteger 		; what is being asserted.
.28cb	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero 					; is it true ?
.28ce	f0 01		beq $28d1			beq 	_CAError
.28d0	60		rts				rts
.28d1					_CAError:
.28d1	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.28d3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.28d6					Command_Dim:
.28d6	a2 04		ldx #$04		ldx	#4
.28d8	20 08 4c	jsr $4c08		jsr	variableHandler
.28db	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.28dd	c8		iny				iny
.28de	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.28e0	f0 f4		beq $28d6			beq 	Command_Dim
.28e2	88		dey				dey 								; unpick get
.28e3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.28e4					CommandLet:
.28e4	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.28e6	20 a4 35	jsr $35a4			jsr 	EvaluateReference
.28e9	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.28eb	20 6b 3c	jsr $3c6b			jsr 	CheckToken
.28ee	e8		inx				inx 								; do RHS
.28ef	20 4c 35	jsr $354c			jsr 	Evaluate 					; evaluate and dereference
.28f2	ca		dex				dex
.28f3	20 f7 28	jsr $28f7			jsr 	WriteValue 					; write it out
.28f6	60		rts				rts
.28f7					WriteValue:
.28f7	98		tya				tya
.28f8	48		pha				pha
.28f9	20 59 29	jsr $2959			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.28fc	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.28fe	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2900	29 40		and #$40			and 	#$40
.2902	d0 50		bne $2954			bne		_WVType
.2904	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2906	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2908	29 40		and #$40			and 	#$40
.290a	d0 1f		bne $292b			bne 	_WVCopyString
.290c	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.290e	15 91		ora $91,x			ora 	esType+1,x
.2910	4a		lsr a				lsr 	a
.2911	90 22		bcc $2935			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2913	b5 90		lda $90,x			lda 	esType,x
.2915	4a		lsr a				lsr 	a
.2916	90 3c		bcc $2954			bcc 	_WVType
.2918	e8		inx				inx 								; force the value being written to be a float.
.2919	20 ae 31	jsr $31ae			jsr 	BPMakeFloat
.291c	ca		dex				dex
.291d	20 59 29	jsr $2959			jsr 	TOSToTemp0 					; set Temp0 to write address
.2920	e8		inx				inx
.2921	8a		txa				txa
.2922	a2 22		ldx #$22		ldx	#34
.2924	20 67 24	jsr $2467		jsr	floatingpointHandler
.2927	aa		tax				tax
.2928	4c 51 29	jmp $2951			jmp 	_WVCopyExit
.292b					_WVCopyString:
.292b	8a		txa				txa
.292c	a2 10		ldx #$10		ldx	#16
.292e	20 ae 3f	jsr $3fae		jsr	stringHandler
.2931	aa		tax				tax
.2932	4c 51 29	jmp $2951			jmp 	_WVCopyExit
.2935					_WVCopyData4:
.2935	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2937	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2939	d0 10		bne $294b			bne 	_WVCopyData1
.293b	a0 03		ldy #$03			ldy 	#3
.293d	b5 b1		lda $b1,x			lda 	esInt3+1,x
.293f	91 2a		sta ($2a),y			sta 	(temp0),y
.2941	88		dey				dey
.2942	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2944	91 2a		sta ($2a),y			sta 	(temp0),y
.2946	88		dey				dey
.2947	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2949	91 2a		sta ($2a),y			sta 	(temp0),y
.294b					_WVCopyData1:
.294b	a0 00		ldy #$00			ldy 	#0
.294d	b5 99		lda $99,x			lda 	esInt0+1,x
.294f	91 2a		sta ($2a),y			sta 	(temp0),y
.2951					_WVCopyExit:
.2951	68		pla				pla
.2952	a8		tay				tay
.2953	60		rts				rts
.2954					_WVType:
.2954	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2956	20 18 15	jsr $1518		jsr	errorHandler
.2959					TOSToTemp0:
.2959	b5 98		lda $98,x			lda 	esInt0,x
.295b	85 2a		sta $2a				sta 	temp0
.295d	b5 a0		lda $a0,x			lda 	esInt1,x
.295f	85 2b		sta $2b				sta 	temp0+1
.2961	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2962					Command_Poke:
.2962	a9 01		lda #$01			lda 	#1
.2964	d0 06		bne $296c			bne 	PokeGeneral
.2966					Command_Doke:
.2966	a9 02		lda #$02			lda 	#2
.2968	d0 02		bne $296c			bne 	PokeGeneral
.296a					Command_Loke:
.296a	a9 03		lda #$03			lda 	#3
.296c					PokeGeneral:
.296c	48		pha				pha 								; save id (PDL = 123)
.296d	20 69 35	jsr $3569			jsr 	EvaluateRootInteger 		; target address
.2970	20 83 3c	jsr $3c83			jsr	 	CheckComma
.2973	e8		inx				inx
.2974	20 6b 35	jsr $356b			jsr 	EvaluateInteger 			; what value to POKE ?
.2977	ca		dex				dex
.2978	20 59 29	jsr $2959			jsr 	TOSToTemp0 					; temp0 points to the target address
.297b	84 32		sty $32				sty 	tempShort 					; save Y
.297d	68		pla				pla 								; get copy type (1-3) and dispatch
.297e	aa		tax				tax
.297f	ca		dex				dex
.2980	f0 14		beq $2996			beq 	_Poke1
.2982	ca		dex				dex
.2983	f0 0b		beq $2990			beq 	_Poke2
.2985	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2987	a5 b1		lda $b1				lda 	esInt3+1
.2989	91 2a		sta ($2a),y			sta 	(temp0),y
.298b	88		dey				dey
.298c	a5 a9		lda $a9				lda 	esInt2+1
.298e	91 2a		sta ($2a),y			sta 	(temp0),y
.2990					_Poke2:
.2990	a0 01		ldy #$01			ldy 	#1
.2992	a5 a1		lda $a1				lda 	esInt1+1
.2994	91 2a		sta ($2a),y			sta 	(temp0),y
.2996					_Poke1:
.2996	a0 00		ldy #$00			ldy 	#0
.2998	a5 99		lda $99				lda 	esInt0+1
.299a	91 2a		sta ($2a),y			sta 	(temp0),y
.299c	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.299e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.299f					Command_Rem:
.299f					Command_Rem2:
.299f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.29a1	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.29a3	d0 06		bne $29ab			bne 	_CRNotString
.29a5	c8		iny				iny
.29a6	98		tya				tya
.29a7	38		sec				sec
.29a8	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.29aa	a8		tay				tay
.29ab					_CRNotString:
.29ab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.29ac					CommandStop:
.29ac	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.29ae	20 18 15	jsr $1518		jsr	errorHandler
.29b1					CommandEnd:
.29b1	4c ec 3c	jmp $3cec			jmp 	WarmStart
.29b4					CommandXemu:
.29b4	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.29b7					AdvanceNextLine:
.29b7	a0 00		ldy #$00			ldy 	#0 							; get offset
.29b9	b1 28		lda ($28),y			lda 	(codePtr),y
.29bb	18		clc				clc 								; add to codePtr
.29bc	65 28		adc $28				adc 	codePtr
.29be	85 28		sta $28				sta 	codePtr
.29c0	90 02		bcc $29c4			bcc 	_ANLNoCarry
.29c2	e6 29		inc $29				inc 	codePtr+1
.29c4					_ANLNoCarry:
.29c4	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.29c6	f0 e9		beq $29b1			beq 	CommandEnd 					; execute END
.29c8	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.29ca	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.29cb					Command_FOR:
.29cb	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.29cd	a2 0b		ldx #$0b			ldx 	#11
.29cf	20 9e 3c	jsr $3c9e			jsr 	RSClaim
.29d2	20 e4 28	jsr $28e4			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.29d5	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.29d7	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.29d9	d0 4c		bne $2a27			bne 	_CFType
.29db	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.29dd	20 6b 3c	jsr $3c6b			jsr 	CheckToken
.29e0	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.29e2	20 6b 35	jsr $356b			jsr 	EvaluateInteger				; get terminal value in stack 1
.29e5	98		tya				tya
.29e6	48		pha				pha
.29e7	a0 04		ldy #$04			ldy 	#4
.29e9	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.29eb	91 37		sta ($37),y			sta 	(rsPointer),y
.29ed	c8		iny				iny
.29ee	a5 a0		lda $a0				lda		esInt1
.29f0	91 37		sta ($37),y			sta 	(rsPointer),y
.29f2	c8		iny				iny
.29f3	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.29f5	91 37		sta ($37),y			sta 	(rsPointer),y
.29f7	c8		iny				iny
.29f8	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.29fa	91 37		sta ($37),y			sta 	(rsPointer),y
.29fc	c8		iny				iny
.29fd	a5 a1		lda $a1				lda		esInt1+1
.29ff	91 37		sta ($37),y			sta 	(rsPointer),y
.2a01	c8		iny				iny
.2a02	a5 a9		lda $a9				lda		esInt2+1
.2a04	91 37		sta ($37),y			sta 	(rsPointer),y
.2a06	c8		iny				iny
.2a07	a5 b1		lda $b1				lda		esInt3+1
.2a09	91 37		sta ($37),y			sta 	(rsPointer),y
.2a0b	68		pla				pla
.2a0c	a8		tay				tay
.2a0d	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2a0f	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2a11	d0 0e		bne $2a21			bne 	_CFDone
.2a13	c8		iny				iny									; skip over step.
.2a14	20 6b 35	jsr $356b			jsr 	EvaluateInteger 			; get step
.2a17	98		tya				tya
.2a18	48		pha				pha
.2a19	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2a1b	a0 06		ldy #$06			ldy 	#6
.2a1d	91 37		sta ($37),y			sta 	(rsPointer),y
.2a1f	68		pla				pla
.2a20	a8		tay				tay
.2a21					_CFDone:
.2a21	a9 01		lda #$01			lda 	#1
.2a23	20 ca 3c	jsr $3cca			jsr 	RSSavePosition 				; save position.
.2a26	60		rts				rts
.2a27					_CFType:
.2a27	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a29	20 18 15	jsr $1518		jsr	errorHandler
.2a2c					Command_NEXT:
.2a2c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a2e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a30	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2a32	f0 05		beq $2a39			beq 	_isok
.2a34	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2a36	20 18 15	jsr $1518		jsr	errorHandler
.2a39					_isok:
.2a39	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2a3b	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2a3d	b0 18		bcs $2a57			bcs 	_CNNoIndex
.2a3f	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2a41	20 a4 35	jsr $35a4			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2a44	98		tya				tya
.2a45	48		pha				pha
.2a46	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2a48	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a4a	d5 98		cmp $98,x			cmp 	esInt0,x
.2a4c	d0 76		bne $2ac4			bne 	_CNBadIndex
.2a4e	c8		iny				iny
.2a4f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a51	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2a53	d0 6f		bne $2ac4			bne 	_CNBadIndex
.2a55	68		pla				pla
.2a56	a8		tay				tay
.2a57					_CNNoIndex:
.2a57	98		tya				tya
.2a58	48		pha				pha
.2a59	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2a5b	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a5d	85 2a		sta $2a				sta 	temp0
.2a5f	c8		iny				iny
.2a60	b1 37		lda ($37),y			lda 	(rsPointer),y
.2a62	85 2b		sta $2b				sta 	temp0+1
.2a64	c8		iny				iny
.2a65	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2a67	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2a69	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2a6b	10 01		bpl $2a6e			bpl 	_CNSignX
.2a6d	ca		dex				dex  								; X = $FF
.2a6e					_CNSignX:
.2a6e	18		clc				clc 								; add to the LSB
.2a6f	a0 00		ldy #$00			ldy 	#0
.2a71	71 2a		adc ($2a),y			adc 	(temp0),y
.2a73	91 2a		sta ($2a),y			sta 	(temp0),y
.2a75					_CNPropogate:
.2a75	c8		iny				iny  								; add the sign extended in X to the rest.
.2a76	8a		txa				txa
.2a77	71 2a		adc ($2a),y			adc 	(temp0),y
.2a79	91 2a		sta ($2a),y			sta 	(temp0),y
.2a7b	c8		iny				iny
.2a7c	8a		txa				txa
.2a7d	71 2a		adc ($2a),y			adc 	(temp0),y
.2a7f	91 2a		sta ($2a),y			sta 	(temp0),y
.2a81	c8		iny				iny
.2a82	8a		txa				txa
.2a83	71 2a		adc ($2a),y			adc 	(temp0),y
.2a85	91 2a		sta ($2a),y			sta 	(temp0),y
.2a87	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2a88	a5 37		lda $37				lda 	rsPointer
.2a8a	69 07		adc #$07			adc 	#7
.2a8c	85 2c		sta $2c				sta 	temp1
.2a8e	a9 00		lda #$00			lda 	#0
.2a90	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2a92	a8		tay				tay 								; and clear the Y register again.
.2a93	65 38		adc $38				adc 	rsPointer+1
.2a95	85 2d		sta $2d				sta 	temp1+1
.2a97	38		sec				sec 								; calculate current - limit oring interim values.
.2a98	20 d0 2a	jsr $2ad0			jsr 	_CNCompare 					; each of these does a byte.
.2a9b	20 d0 2a	jsr $2ad0			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2a9e	20 d0 2a	jsr $2ad0			jsr 	_CNCompare 					; and the carry of the subtraction.
.2aa1	20 d0 2a	jsr $2ad0			jsr 	_CNCompare
.2aa4	50 02		bvc $2aa8			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2aa6	49 80		eor #$80			eor 	#$80
.2aa8					_CNNoOverflow:
.2aa8	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2aaa	30 1d		bmi $2ac9			bmi 	_CNCheckDownto
.2aac	c9 00		cmp #$00			cmp 	#0
.2aae	30 0c		bmi $2abc			bmi 	_CNLoopRound 				; loop round if < =
.2ab0	a5 2e		lda $2e				lda 	temp2
.2ab2	f0 08		beq $2abc			beq 	_CNLoopRound
.2ab4					_CNLoopExit:
.2ab4	68		pla				pla
.2ab5	a8		tay				tay
.2ab6	a9 0b		lda #$0b			lda 	#11
.2ab8	20 c0 3c	jsr $3cc0			jsr 	RSFree
.2abb	60		rts				rts
.2abc					_CNLoopRound:
.2abc	68		pla				pla
.2abd	a8		tay				tay
.2abe	a9 01		lda #$01			lda 	#1
.2ac0	20 dd 3c	jsr $3cdd			jsr 	RSLoadPosition				; go back to the loop top
.2ac3	60		rts				rts
.2ac4					_CNBadIndex:
.2ac4	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2ac6	20 18 15	jsr $1518		jsr	errorHandler
.2ac9					_CNCheckDownto:
.2ac9	c9 00		cmp #$00			cmp 	#0
.2acb	10 ef		bpl $2abc			bpl 	_CNLoopRound
.2acd	4c b4 2a	jmp $2ab4			jmp 	_CNLoopExit
.2ad0					_CNCompare:
.2ad0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2ad2	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2ad4	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2ad6	85 2e		sta $2e				sta 	temp2
.2ad8	c8		iny				iny
.2ad9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2ada					CommandIf:
.2ada	20 69 35	jsr $3569			jsr 	EvaluateRootInteger 		; get what's being tested.
.2add	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2adf	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2ae1	f0 04		beq $2ae7			beq 	_IfSimple
.2ae3	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2ae5	d0 1b		bne $2b02			bne 	_IfComplex
.2ae7					_IfSimple:
.2ae7	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero					; check if TOS zero
.2aea	f0 10		beq $2afc			beq 	_IfEOL 						; go to next line.
.2aec	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2aee	c8		iny				iny
.2aef	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2af1	f0 0c		beq $2aff			beq 	_IfGoto 					; do the Goto code
.2af3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2af5	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2af7	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2af9	f0 04		beq $2aff			beq 	_IfGoto
.2afb	60		rts				rts 								; else continue on this line.
.2afc					_IfEOL:
.2afc	4c b7 29	jmp $29b7			jmp 	AdvanceNextLine 			; go to next line
.2aff					_IfGoto:
.2aff	4c ee 26	jmp $26ee			jmp 	CommandGoto
.2b02					_IfComplex:
.2b02	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero 					; is it true ?
.2b05	f0 01		beq $2b08			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2b07	60		rts				rts 								; else continue.
.2b08					_IFSkip:
.2b08	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2b0a	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2b0c	4c a4 2d	jmp $2da4			jmp		ScanForward
.2b0f					Command_ELSE:
.2b0f	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2b11	8a		txa				txa
.2b12	4c a4 2d	jmp $2da4			jmp		ScanForward
.2b15					Command_ENDIF:
.2b15	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0d03					storeSize:
>0d03							.fill 	1
.2b16					CommandLocal:
.2b16	a2 00		ldx #$00			ldx 	#0
.2b18	20 34 2b	jsr $2b34			jsr 	LocaliseVariable 			; localise one.
.2b1b					_CLCheckNext:
.2b1b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2b1d	c8		iny				iny
.2b1e	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2b20	f0 06		beq $2b28			beq 	_CLAssignment
.2b22	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2b24	f0 f0		beq $2b16			beq 	CommandLocal
.2b26	88		dey				dey
.2b27	60		rts				rts
.2b28					_CLAssignment:
.2b28	a2 01		ldx #$01			ldx 	#1
.2b2a	20 4c 35	jsr $354c			jsr 	Evaluate 					; evaluate RHS
.2b2d	ca		dex				dex
.2b2e	20 f7 28	jsr $28f7			jsr 	WriteValue
.2b31	4c 1b 2b	jmp $2b1b			jmp 	_CLCheckNext
.2b34					LocaliseVariable:
.2b34	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2b36	c9 40		cmp #$40			cmp 	#$40
.2b38	b0 67		bcs $2ba1			bcs 	_LVSyntax
.2b3a	8a		txa				txa 								; get the address of that variable.
.2b3b	a2 02		ldx #$02		ldx	#2
.2b3d	20 08 4c	jsr $4c08		jsr	variableHandler
.2b40	aa		tax				tax
.2b41	8a		txa				txa
.2b42	48		pha				pha
.2b43	98		tya				tya
.2b44	48		pha				pha
.2b45	20 59 29	jsr $2959			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2b48	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2b4a	0a		asl a				asl 	a
.2b4b	10 16		bpl $2b63			bpl 	_LVPushNumber
.2b4d	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2b4f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b51	c8		iny				iny
.2b52	85 2c		sta $2c				sta 	temp1
.2b54	b1 2a		lda ($2a),y			lda 	(temp0),y
.2b56	85 2d		sta $2d				sta 	temp1+1
.2b58	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2b5a	b1 2c		lda ($2c),y			lda 	(temp1),y
.2b5c	aa		tax				tax 								; into X
.2b5d	e8		inx				inx 								; +1 for length.
.2b5e	a9 24		lda #$24			lda 	#markerString
.2b60	4c 78 2b	jmp $2b78			jmp 	_LVWriteFrame
.2b63					_LVPushNumber:
.2b63	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2b65	85 2c		sta $2c				sta 	temp1
.2b67	a5 2b		lda $2b				lda 	temp0+1
.2b69	85 2d		sta $2d				sta 	temp1+1
.2b6b	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2b6d	4a		lsr a				lsr 	a
.2b6e	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2b70	a2 04		ldx #$04			ldx 	#VarISize
.2b72	90 04		bcc $2b78			bcc 	_LVIsInteger
.2b74	a9 23		lda #$23			lda 	#markerFloat
.2b76	a2 06		ldx #$06			ldx 	#VarFSize
.2b78					_LVIsInteger:
.2b78					_LVWriteFrame:
.2b78	8e 03 0d	stx $0d03			stx 	storeSize 					; number of bytes to copy from (temp0)
.2b7b	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2b7c	e8		inx				inx
.2b7d	e8		inx				inx
.2b7e	20 9e 3c	jsr $3c9e			jsr 	RSClaim 					; create the stack frame.
.2b81	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2b83	a0 01		ldy #$01			ldy 	#1
.2b85	91 37		sta ($37),y			sta 	(rsPointer),y
.2b87	c8		iny				iny
.2b88	a5 2b		lda $2b				lda 	temp0+1
.2b8a	91 37		sta ($37),y			sta 	(rsPointer),y
.2b8c	a0 00		ldy #$00			ldy 	#0
.2b8e					_LVCopyData:
.2b8e	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2b90	c8		iny				iny 								; write allowing for the header bit.
.2b91	c8		iny				iny
.2b92	c8		iny				iny
.2b93	91 37		sta ($37),y			sta 	(rsPointer),y
.2b95	88		dey				dey
.2b96	88		dey				dey
.2b97	ce 03 0d	dec $0d03			dec 	storeSize 					; do it storesize times
.2b9a	d0 f2		bne $2b8e			bne 	_LVCopyData
.2b9c	68		pla				pla
.2b9d	a8		tay				tay
.2b9e	68		pla				pla
.2b9f	aa		tax				tax
.2ba0	60		rts				rts
.2ba1					_LVSyntax:
.2ba1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ba3	20 18 15	jsr $1518		jsr	errorHandler
.2ba6					RestoreLocals:
.2ba6	a2 00		ldx #$00			ldx 	#0
.2ba8	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2baa	c9 40		cmp #$40			cmp	 	#64
.2bac	90 01		bcc $2baf			bcc 	_RLocal
.2bae	60		rts				rts
.2baf					_RLocal:
.2baf	8a		txa				txa
.2bb0	48		pha				pha
.2bb1	98		tya				tya
.2bb2	48		pha				pha
.2bb3	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2bb5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bb7	85 2a		sta $2a				sta 	temp0
.2bb9	c8		iny				iny
.2bba	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bbc	85 2b		sta $2b				sta 	temp0+1
.2bbe	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2bc0	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bc2	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2bc4	f0 28		beq $2bee			beq 	_RString
.2bc6	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2bc8	c9 25		cmp #$25			cmp 	#markerInt
.2bca	f0 02		beq $2bce			beq 	_RIsInteger
.2bcc	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2bce					_RIsInteger:
.2bce	8a		txa				txa
.2bcf	48		pha				pha
.2bd0	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2bd2					_RCopyBack:
.2bd2	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bd4	88		dey				dey
.2bd5	88		dey				dey
.2bd6	88		dey				dey
.2bd7	91 2a		sta ($2a),y			sta 	(temp0),y
.2bd9	c8		iny				iny
.2bda	c8		iny				iny
.2bdb	c8		iny				iny
.2bdc	c8		iny				iny
.2bdd	ca		dex				dex
.2bde	d0 f2		bne $2bd2			bne 	_RCopyBack
.2be0	68		pla				pla 								; get size add 3
.2be1	18		clc				clc
.2be2	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2be4					_RRestoreAAndLoop:
.2be4	20 c0 3c	jsr $3cc0			jsr 	RSFree
.2be7	68		pla				pla
.2be8	a8		tay				tay
.2be9	68		pla				pla
.2bea	aa		tax				tax
.2beb	4c a6 2b	jmp $2ba6			jmp 	RestoreLocals 				; go see if there are any more locals.
.2bee					_RString:
.2bee	a2 00		ldx #$00			ldx 	#0
.2bf0	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2bf2	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bf4	95 98		sta $98,x			sta 	esInt0,x
.2bf6	c8		iny				iny
.2bf7	b1 37		lda ($37),y			lda 	(rsPointer),y
.2bf9	95 a0		sta $a0,x			sta 	esInt1,x
.2bfb	18		clc				clc
.2bfc	a5 37		lda $37				lda 	rsPointer
.2bfe	69 03		adc #$03			adc 	#3
.2c00	95 99		sta $99,x			sta 	esInt0+1,x
.2c02	a5 38		lda $38				lda 	rsPointer+1
.2c04	69 00		adc #$00			adc 	#0
.2c06	95 a1		sta $a1,x			sta 	esInt1+1,x
.2c08	8a		txa				txa
.2c09	a2 10		ldx #$10		ldx	#16
.2c0b	20 ae 3f	jsr $3fae		jsr	stringHandler
.2c0e	a0 03		ldy #$03			ldy 	#3 							; get string length
.2c10	b1 37		lda ($37),y			lda 	(rsPointer),y
.2c12	18		clc				clc
.2c13	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2c15	4c e4 2b	jmp $2be4			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d04					paramCount:
>0d04							.fill 	1
.2c18					CallProc:
.2c18	20 a0 2c	jsr $2ca0			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2c1b	48		pha				pha 								; save length on stack
.2c1c	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2c1e	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2c20	48		pha				pha
.2c21	a5 2a		lda $2a				lda 	temp0
.2c23	48		pha				pha
.2c24	98		tya				tya 								; calculate Y + length
.2c25	18		clc				clc
.2c26	65 32		adc $32				adc 	tempShort
.2c28	a8		tay				tay
.2c29	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2c2b					_CallProcEvalParams:
.2c2b	e8		inx				inx
.2c2c	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2c2e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2c30	f0 0b		beq $2c3d			beq 	_CPDoneParams
.2c32	20 4c 35	jsr $354c			jsr 	Evaluate 					; evaluate a parameter
.2c35	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2c37	c8		iny				iny
.2c38	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2c3a	f0 ef		beq $2c2b			beq 	_CallProcEvalParams
.2c3c	88		dey				dey 								; undo consumption.
.2c3d					_CPDoneParams:
.2c3d	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; check closing parenthesis.
.2c40	8e 04 0d	stx $0d04			stx 	paramCount 					; store parameter count+1
.2c43	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2c45	a9 50		lda #$50			lda 	#markerPROC
.2c47	20 9e 3c	jsr $3c9e			jsr 	RSClaim
.2c4a	a9 01		lda #$01			lda 	#1 							; store return address.
.2c4c	20 ca 3c	jsr $3cca			jsr 	RSSavePosition
.2c4f	68		pla				pla 								; get the new code Ptr
.2c50	85 28		sta $28				sta 	codePtr
.2c52	68		pla				pla
.2c53	85 29		sta $29				sta 	codePtr+1
.2c55	68		pla				pla 								; length of name + 4 is the param start.
.2c56	18		clc				clc
.2c57	69 04		adc #$04			adc 	#4
.2c59	a8		tay				tay
.2c5a	a2 ff		ldx #$ff			ldx 	#$FF
.2c5c					_CPLoadParameters:
.2c5c	e8		inx				inx 								; point to where the address should be loaded.
.2c5d	ec 04 0d	cpx $0d04			cpx 	paramCount 					; too many parameters in definition ?
.2c60	f0 1e		beq $2c80			beq 	_CPParamError
.2c62	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2c64	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2c66	f0 0e		beq $2c76			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2c68	20 34 2b	jsr $2b34			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2c6b	20 f7 28	jsr $28f7			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2c6e	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2c70	c8		iny				iny
.2c71	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2c73	f0 e7		beq $2c5c			beq 	_CPLoadParameters
.2c75	88		dey				dey 								; no, unconsume and check for )
.2c76					_CPParamComplete:
.2c76	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; check )
.2c79	e8		inx				inx 								; check right number of parameters have been consumed
.2c7a	ec 04 0d	cpx $0d04			cpx 	paramCount
.2c7d	d0 01		bne $2c80			bne 	_CPParamError
.2c7f	60		rts				rts
.2c80					_CPParamError:
.2c80	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2c82	20 18 15	jsr $1518		jsr	errorHandler
.2c85					ReturnProc:
.2c85	20 a6 2b	jsr $2ba6			jsr 	RestoreLocals 				; get the locals back.
.2c88	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c8a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c8c	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2c8e	f0 05		beq $2c95			beq 	_isok
.2c90	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2c92	20 18 15	jsr $1518		jsr	errorHandler
.2c95					_isok:
.2c95	a9 01		lda #$01			lda 	#1
.2c97	20 dd 3c	jsr $3cdd			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2c9a	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2c9c	20 c0 3c	jsr $3cc0			jsr 	RSFree
.2c9f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d05					procList:
>0d05							.fill 	2		 					; terminated by name high being zero.
.0d07					yInLine:
>0d07							.fill 	1
.2ca0					FindProcedure:
.2ca0	8c 07 0d	sty $0d07			sty 	yInLine 					; save current position.
.2ca3	20 5e 2d	jsr $2d5e			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2ca6	85 2c		sta $2c				sta 	temp1
.2ca8	ad 05 0d	lda $0d05			lda		procList 					; put procList address in temp2
.2cab	85 2e		sta $2e				sta 	temp2
.2cad	ad 06 0d	lda $0d06			lda 	procList+1
.2cb0	85 2f		sta $2f				sta 	temp2+1
.2cb2	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2cb4					_FPLoop:
.2cb4	b1 2e		lda ($2e),y			lda 	(temp2),y
.2cb6	f0 4f		beq $2d07			beq 	_FPError 					; if so, we don't know this procedure.
.2cb8	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2cba	c8		iny				iny
.2cbb	b1 2e		lda ($2e),y			lda 	(temp2),y
.2cbd	85 2a		sta $2a				sta 	temp0
.2cbf	c8		iny				iny
.2cc0	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2cc2	c5 2c		cmp $2c				cmp 	temp1
.2cc4	d0 2b		bne $2cf1			bne 	_FPNext 					; hash is different, go to next.
.2cc6	38		sec				sec
.2cc7	ad 07 0d	lda $0d07			lda 	yInLine 					; position in line must be at least 4
.2cca	e9 04		sbc #$04			sbc 	#4
.2ccc	18		clc				clc
.2ccd	65 28		adc $28				adc 	codePtr
.2ccf	85 30		sta $30				sta 	temp3
.2cd1	a5 29		lda $29				lda 	codePtr+1
.2cd3	69 00		adc #$00			adc 	#0
.2cd5	85 31		sta $31				sta 	temp3+1
.2cd7	98		tya				tya
.2cd8	48		pha				pha
.2cd9	a0 04		ldy #$04			ldy 	#4
.2cdb					_FPCName:
.2cdb	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2cdd	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2cdf	d0 0e		bne $2cef			bne 	_FPpulYNext 				; if different go to next one.
.2ce1	c8		iny				iny
.2ce2	c9 3a		cmp #$3a			cmp 	#$3A
.2ce4	90 f5		bcc $2cdb			bcc 	_FPCName 					; compare the whole lot....
.2ce6	68		pla				pla 								; throw away the saved Y
.2ce7	98		tya				tya 								; length of name is Y-4
.2ce8	38		sec				sec
.2ce9	e9 04		sbc #$04			sbc 	#4
.2ceb	ac 07 0d	ldy $0d07			ldy 	yInLine  					; get the original Y back
.2cee	60		rts				rts
.2cef					_FPpulYNext:
.2cef	68		pla				pla
.2cf0	a8		tay				tay
.2cf1					_FPNext:
.2cf1	c8		iny				iny 								; next procedure record.
.2cf2	10 c0		bpl $2cb4			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2cf4	98		tya				tya 								; subtract 128 from Y
.2cf5	38		sec				sec
.2cf6	e9 80		sbc #$80			sbc 	#128
.2cf8	a8		tay				tay
.2cf9	18		clc				clc 								; add 128 to temp2, so we can have more than
.2cfa	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2cfc	69 80		adc #$80			adc 	#128
.2cfe	85 2e		sta $2e				sta 	temp2
.2d00	90 b2		bcc $2cb4			bcc 	_FPLoop
.2d02	e6 2f		inc $2f				inc 	temp2+1
.2d04	4c b4 2c	jmp $2cb4			jmp 	_FPLoop
.2d07					_FPError:
.2d07	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2d09	20 18 15	jsr $1518		jsr	errorHandler
.2d0c					ScanProc:
.2d0c	98		tya				tya
.2d0d	48		pha				pha
.2d0e	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2d10	8d 05 0d	sta $0d05			sta 	procList
.2d13	a5 36		lda $36				lda 	lowMemory+1
.2d15	8d 06 0d	sta $0d06			sta 	procList+1
.2d18	20 8a 30	jsr $308a			jsr 	ResetCodeAddress 			; back to the start.
.2d1b					_ScanLoop:
.2d1b	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2d1d	b1 28		lda ($28),y			lda 	(codePtr),y
.2d1f	f0 2a		beq $2d4b			beq 	_ScanExit
.2d21	a0 03		ldy #$03			ldy 	#3							; get first token
.2d23	b1 28		lda ($28),y			lda 	(codePtr),y
.2d25	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2d27	d0 12		bne $2d3b			bne 	_ScanNext
.2d29	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2d2b	20 53 2d	jsr $2d53			jsr 	_ScanWrite
.2d2e	a5 28		lda $28				lda 	codePtr
.2d30	20 53 2d	jsr $2d53			jsr 	_ScanWrite
.2d33	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2d35	20 5e 2d	jsr $2d5e			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2d38	20 53 2d	jsr $2d53			jsr 	_ScanWrite					; and write that
.2d3b					_ScanNext:
.2d3b	18		clc				clc
.2d3c	a0 00		ldy #$00			ldy 	#0
.2d3e	b1 28		lda ($28),y			lda 	(codePtr),y
.2d40	65 28		adc $28				adc 	codePtr
.2d42	85 28		sta $28				sta 	codePtr
.2d44	90 d5		bcc $2d1b			bcc 	_ScanLoop
.2d46	e6 29		inc $29				inc 	codePtr+1
.2d48	4c 1b 2d	jmp $2d1b			jmp 	_ScanLoop
.2d4b					_ScanExit:
.2d4b	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2d4d	20 53 2d	jsr $2d53			jsr 	_ScanWrite
.2d50	68		pla				pla
.2d51	a8		tay				tay
.2d52	60		rts				rts
.2d53					_ScanWrite:
.2d53	a0 00		ldy #$00			ldy 	#0
.2d55	91 35		sta ($35),y			sta 	(lowMemory),y
.2d57	e6 35		inc $35				inc 	lowMemory
.2d59	d0 02		bne $2d5d			bne 	_SWNoCarry
.2d5b	e6 36		inc $36				inc 	lowMemory+1
.2d5d					_SWNoCarry:
.2d5d	60		rts				rts
.2d5e					CalculateProcedureHash:
.2d5e	a9 00		lda #$00			lda 	#0 							; clear hash.
.2d60	85 2a		sta $2a				sta 	temp0
.2d62					_CPHLoop:
.2d62	18		clc				clc 								; add character and rotate and add carry back in
.2d63	b1 28		lda ($28),y			lda 	(codePtr),y
.2d65	65 2a		adc $2a				adc 	temp0
.2d67	6a		ror a				ror 	a
.2d68	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2d6a	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2d6c	b1 28		lda ($28),y			lda 	(codePtr),y
.2d6e	c8		iny				iny 								; advance incase we go round again.
.2d6f	c9 3a		cmp #$3a			cmp 	#$3A
.2d71	90 ef		bcc $2d62			bcc 	_CPHLoop
.2d73	a5 2a		lda $2a				lda 	temp0
.2d75	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2d76					Command_Repeat:
.2d76	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2d78	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2d7a	20 9e 3c	jsr $3c9e			jsr 	RSClaim
.2d7d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2d7f	20 ca 3c	jsr $3cca			jsr 	RSSavePosition
.2d82	60		rts				rts
.2d83					Command_Until:
.2d83	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d85	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d87	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2d89	f0 05		beq $2d90			beq 	_isok
.2d8b	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2d8d	20 18 15	jsr $1518		jsr	errorHandler
.2d90					_isok:
.2d90	20 69 35	jsr $3569			jsr 	EvaluateRootInteger 		; at the bottom.
.2d93	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero					; check if TOS zero
.2d96	d0 06		bne $2d9e			bne 	_CUExit
.2d98	a9 01		lda #$01			lda 	#1
.2d9a	20 dd 3c	jsr $3cdd			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2d9d	60		rts				rts
.2d9e					_CUExit:
.2d9e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2da0	20 c0 3c	jsr $3cc0			jsr 	RSFree
.2da3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2da4					ScanForward:
.2da4	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2da6	86 2d		stx $2d				stx 	temp1+1
.2da8	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2daa	85 2e		sta $2e				sta 	temp2
.2dac	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2dae	c8		iny				iny
.2daf	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2db1	d0 08		bne $2dbb			bne 	_SFNoCheck 					; if so, check token against entered values.
.2db3	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2db5	f0 24		beq $2ddb			beq 	_SFExit 					; at the same strcture depth.
.2db7	c5 2d		cmp $2d				cmp 	temp1+1
.2db9	f0 20		beq $2ddb			beq 	_SFExit
.2dbb					_SFNoCheck:
.2dbb	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2dbd	90 ed		bcc $2dac			bcc 	_SFLoop
.2dbf	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2dc1	90 19		bcc $2ddc			bcc 	_SFSpecials
.2dc3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2dc5	90 e5		bcc $2dac			bcc 	_SFLoop
.2dc7	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2dc9	b0 e1		bcs $2dac			bcs 	_SFLoop
.2dcb	aa		tax				tax  								; token in X, and look up the adjuster.
.2dcc	bd 87 34	lda $3487,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2dcf	38		sec				sec 								; convert to an offset ($FF,$01)
.2dd0	e9 81		sbc #$81			sbc 	#$81
.2dd2	18		clc				clc 								; add to depth
.2dd3	65 2e		adc $2e				adc 	temp2
.2dd5	85 2e		sta $2e				sta 	temp2
.2dd7	10 d3		bpl $2dac			bpl 	_SFLoop 					; +ve okay to continue
.2dd9	30 07		bmi $2de2			bmi 	SFError 					; if gone -ve then we have a nesting error
.2ddb	60		rts		_SFExit:rts
.2ddc					_SFSpecials:
.2ddc	20 e7 2d	jsr $2de7			jsr 	ScannerSkipSpecial
.2ddf	4c ac 2d	jmp $2dac			jmp 	_SFLoop
.2de2					SFError:
.2de2	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2de4	20 18 15	jsr $1518		jsr	errorHandler
.2de7					ScannerSkipSpecial:
.2de7	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2de9	f0 10		beq $2dfb			beq 	_SFNextLine
.2deb	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2ded	f0 2b		beq $2e1a			beq 	_SFFloatSkip
.2def	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2df1	f0 02		beq $2df5			beq 	_SFSkipString
.2df3	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2df4	60		rts				rts 								; token.
.2df5					_SFSkipString:
.2df5	98		tya				tya
.2df6	38		sec				sec
.2df7	71 28		adc ($28),y			adc 	(codePtr),y
.2df9	a8		tay				tay
.2dfa	60		rts				rts
.2dfb					_SFNextLine:
.2dfb	a0 00		ldy #$00			ldy 	#0 							; get offset
.2dfd	b1 28		lda ($28),y			lda 	(codePtr),y
.2dff	18		clc				clc 								; add to code pointer.
.2e00	65 28		adc $28				adc 	codePtr
.2e02	85 28		sta $28				sta 	codePtr
.2e04	90 02		bcc $2e08			bcc		_SFNLNoCarry
.2e06	e6 29		inc $29				inc 	codePtr+1
.2e08					_SFNLNoCarry:
.2e08	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2e0a	d0 0b		bne $2e17			bne		_SFXNL 						; no go round again
.2e0c	a5 2c		lda $2c				lda 	temp1
.2e0e	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2e10	d0 d0		bne $2de2			bne 	SFError 					; read uses this to search for data statements
.2e12	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2e14	20 18 15	jsr $1518		jsr	errorHandler
.2e17	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2e19	60		rts				rts
.2e1a					_SFFloatSkip:
.2e1a	98		tya				tya 								; skip over an embedded float.
.2e1b	18		clc				clc
.2e1c	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2e1e	a8		tay				tay
.2e1f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2e20					Command_While:
.2e20	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2e22	a2 04		ldx #$04			ldx 	#4
.2e24	20 9e 3c	jsr $3c9e			jsr 	RSClaim 					; create on stack.
.2e27	88		dey				dey
.2e28	a9 01		lda #$01			lda 	#1
.2e2a	20 ca 3c	jsr $3cca			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2e2d	c8		iny				iny
.2e2e	20 69 35	jsr $3569			jsr 	EvaluateRootInteger			; get the conditional
.2e31	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2e34	f0 01		beq $2e37			beq 	_CWFail
.2e36	60		rts				rts
.2e37					_CWFail:
.2e37	a9 04		lda #$04			lda 	#4
.2e39	20 c0 3c	jsr $3cc0			jsr 	RSFree 						; close the just opened position.
.2e3c	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2e3e	aa		tax				tax
.2e3f	20 a4 2d	jsr $2da4			jsr 	ScanForward
.2e42	60		rts				rts
.2e43					Command_Wend:
.2e43	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2e45	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2e47	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2e49	f0 05		beq $2e50			beq 	_isok
.2e4b	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2e4d	20 18 15	jsr $1518		jsr	errorHandler
.2e50					_isok:
.2e50	a9 01		lda #$01			lda 	#1
.2e52	20 dd 3c	jsr $3cdd			jsr 	RSLoadPosition				; go back until true
.2e55	a9 04		lda #$04			lda 	#4
.2e57	20 c0 3c	jsr $3cc0			jsr 	RSFree 						; close the loop
.2e5a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2e5b					CommandClear:
.2e5b					XCommandClear:
.2e5b	98		tya				tya
.2e5c	48		pha				pha
.2e5d	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2e60	85 33		sta $33				sta 	highMemory
.2e62	ad cd 0a	lda $0acd			lda 	endMemory+1
.2e65	85 34		sta $34				sta 	highMemory+1
.2e67	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2e6a	85 2a		sta $2a				sta 	temp0
.2e6c	ad c9 0a	lda $0ac9			lda 	basePage+1
.2e6f	85 2b		sta $2b				sta 	temp0+1
.2e71					_CCFindEnd:
.2e71	a0 00		ldy #$00			ldy 	#0
.2e73	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e75	f0 0c		beq $2e83			beq 	_CCFoundEnd 				; offset zero is end.
.2e77	18		clc				clc
.2e78	65 2a		adc $2a				adc 	temp0 						; move to next line
.2e7a	85 2a		sta $2a				sta 	temp0
.2e7c	90 f3		bcc $2e71			bcc 	_CCFindEnd
.2e7e	e6 2b		inc $2b				inc 	temp0+1
.2e80	4c 71 2e	jmp $2e71			jmp 	_CCFindEnd
.2e83					_CCFoundEnd:
.2e83	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2e85	85 35		sta $35				sta 	lowMemory
.2e87	a5 2b		lda $2b				lda 	temp0+1
.2e89	85 36		sta $36				sta 	lowMemory+1
.2e8b	18		clc				clc 								; put temp0+1 in endProgram
.2e8c	a5 2a		lda $2a				lda 	temp0
.2e8e	69 01		adc #$01			adc 	#1
.2e90	8d ca 0a	sta $0aca			sta 	endProgram
.2e93	a5 2b		lda $2b				lda 	temp0+1
.2e95	69 00		adc #$00			adc 	#0
.2e97	8d cb 0a	sta $0acb			sta 	endProgram+1
.2e9a	18		clc				clc 								; put a bit of space in.
.2e9b	a5 35		lda $35				lda 	lowMemory
.2e9d	69 04		adc #$04			adc 	#4
.2e9f	85 35		sta $35				sta 	lowMemory
.2ea1	90 02		bcc $2ea5			bcc 	_CCNoCarry
.2ea3	e6 36		inc $36				inc 	lowMemory+1
.2ea5					_CCNoCarry:
.2ea5	20 90 3c	jsr $3c90			jsr 	RSReset 					; reset the return stack.
.2ea8	a2 06		ldx #$06		ldx	#6
.2eaa	20 08 4c	jsr $4c08		jsr	variableHandler
.2ead	20 0c 2d	jsr $2d0c			jsr 	ScanProc 					; scan for procedures
.2eb0	20 91 26	jsr $2691			jsr 	CommandRestore 				; do a restore
.2eb3	68		pla				pla
.2eb4	a8		tay				tay
.2eb5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d08					structIndent:
>0d08							.fill 	1
.2eb6					CommandList:
.2eb6	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2eb8	8e 08 0d	stx $0d08			stx 	structIndent
.2ebb	20 03 3c	jsr $3c03			jsr 	MInt32False
.2ebe	e8		inx				inx
.2ebf	20 ff 3b	jsr $3bff			jsr 	MInt32True
.2ec2	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2ec4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2ec6	f0 15		beq $2edd			beq 	_CLEndLine
.2ec8	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2eca	30 1b		bmi $2ee7			bmi 	_CLDoListing 				; do the whole lot.
.2ecc	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2ece	20 6b 35	jsr $356b			jsr 	EvaluateInteger
.2ed1	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2ed3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ed5	f0 06		beq $2edd			beq 	_CLEndLine
.2ed7	20 41 3b	jsr $3b41			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2eda	4c e7 2e	jmp $2ee7			jmp 	_CLDoListing 				; own e.g. list 1100
.2edd					_CLEndLine:
.2edd	c8		iny				iny 								; skip comma
.2ede	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2ee0	30 05		bmi $2ee7			bmi 	_CLDoListing
.2ee2	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2ee4	20 6b 35	jsr $356b			jsr 	EvaluateInteger				; get end
.2ee7					_CLDoListing:
.2ee7	20 8a 30	jsr $308a			jsr 	ResetCodeAddress 			; back to the start.
.2eea					_CLCheckLoop:
.2eea	a2 02		ldx #$02		ldx	#2
.2eec	20 f6 14	jsr $14f6		jsr	deviceHandler
.2eef	a0 00		ldy #$00			ldy 	#0							; check end.
.2ef1	b1 28		lda ($28),y			lda 	(codePtr),y
.2ef3	f0 41		beq $2f36			beq 	_CLEnd
.2ef5	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2ef7	20 39 2f	jsr $2f39			jsr 	CLCompareLineTOS
.2efa	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2efc	f0 28		beq $2f26			beq 	_CLNext
.2efe	e8		inx				inx
.2eff	20 39 2f	jsr $2f39			jsr 	CLCompareLineTOS 			; compare vs higher
.2f02	c9 01		cmp #$01			cmp 	#1
.2f04	f0 20		beq $2f26			beq 	_CLNext
.2f06	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2f08	20 5b 2f	jsr $2f5b			jsr 	CLStructureCheck
.2f0b	ad 08 0d	lda $0d08			lda 	structIndent 				; indent level.
.2f0e	10 02		bpl $2f12			bpl 	_CLPositive
.2f10	a9 00		lda #$00			lda 	#0
.2f12					_CLPositive:
.2f12	a2 04		ldx #$04		ldx	#4
.2f14	20 37 48	jsr $4837		jsr	tokeniserHandler
.2f17	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2f19	20 5b 2f	jsr $2f5b			jsr 	CLStructureCheck
.2f1c	ad 08 0d	lda $0d08			lda 	structIndent
.2f1f	10 05		bpl $2f26			bpl 	_CLNext
.2f21	a9 00		lda #$00			lda 	#0
.2f23	8d 08 0d	sta $0d08			sta 	structIndent
.2f26					_CLNext:
.2f26	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2f28	b1 28		lda ($28),y			lda 	(codePtr),y
.2f2a	18		clc				clc
.2f2b	65 28		adc $28				adc 	codePtr
.2f2d	85 28		sta $28				sta 	codePtr
.2f2f	90 b9		bcc $2eea			bcc 	_CLCheckLoop
.2f31	e6 29		inc $29				inc 	codePtr+1
.2f33	4c ea 2e	jmp $2eea			jmp 	_CLCheckLoop
.2f36					_CLEnd:
.2f36	4c ec 3c	jmp $3cec			jmp 	WarmStart 					; warm start after list.
.2f39					CLCompareLineTOS:
.2f39	a0 01		ldy #$01			ldy 	#1
.2f3b	b1 28		lda ($28),y			lda 	(codePtr),y
.2f3d	55 98		eor $98,x			eor 	esInt0,x
.2f3f	85 2a		sta $2a				sta 	temp0
.2f41	c8		iny				iny
.2f42	b1 28		lda ($28),y			lda 	(codePtr),y
.2f44	55 a0		eor $a0,x			eor 	esInt1,x
.2f46	05 2a		ora $2a				ora 	temp0
.2f48	f0 10		beq $2f5a			beq 	_CLCLTExit
.2f4a	88		dey				dey
.2f4b	b1 28		lda ($28),y			lda 	(codePtr),y
.2f4d	d5 98		cmp $98,x			cmp 	esInt0,x
.2f4f	c8		iny				iny
.2f50	b1 28		lda ($28),y			lda 	(codePtr),y
.2f52	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2f54	a9 ff		lda #$ff			lda 	#255
.2f56	90 02		bcc $2f5a			bcc 	_CLCLTExit
.2f58	a9 01		lda #$01			lda 	#1
.2f5a					_CLCLTExit:
.2f5a	60		rts				rts
.2f5b					CLStructureCheck:
.2f5b	85 2a		sta $2a				sta 	temp0
.2f5d	a0 03		ldy #$03			ldy 	#3
.2f5f					_CLSCLoop:
.2f5f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2f61	c8		iny				iny
.2f62	c9 80		cmp #$80			cmp 	#$80
.2f64	90 f9		bcc $2f5f			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2f66	f0 28		beq $2f90			beq		_CLSCExit					; EOL return
.2f68	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2f6a	90 1e		bcc $2f8a			bcc 	_CLSCSpecial
.2f6c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2f6e	90 ef		bcc $2f5f			bcc 	_CLSCLoop
.2f70	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2f72	b0 eb		bcs $2f5f			bcs 	_CLSCLoop
.2f74	aa		tax				tax 								; get adjustment
.2f75	bd 87 34	lda $3487,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2f78	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2f7a	d0 e3		bne $2f5f			bne 	_CLSCLoop
.2f7c	38		sec				sec
.2f7d	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2f7f	0a		asl a				asl 	a 							; double indent step
.2f80	18		clc				clc
.2f81	6d 08 0d	adc $0d08			adc 	structIndent 				; add to structure indent
.2f84	8d 08 0d	sta $0d08			sta 	structIndent
.2f87	4c 5f 2f	jmp $2f5f			jmp 	_CLSCLoop
.2f8a					_CLSCSpecial:
.2f8a	20 e7 2d	jsr $2de7			jsr 	ScannerSkipSpecial
.2f8d	4c 5f 2f	jmp $2f5f			jmp 	_CLSCLoop
.2f90					_CLSCExit:
.2f90	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2f91					CommandLoad:
.2f91	20 b9 2f	jsr $2fb9			jsr 	CLSParameters 					; get parameters for load.
.2f94	08		php				php
.2f95	a2 0e		ldx #$0e		ldx	#14
.2f97	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f9a	28		plp				plp
.2f9b	b0 08		bcs $2fa5			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2f9d	20 5b 2e	jsr $2e5b			jsr 	CommandClear
.2fa0	a2 04		ldx #$04		ldx	#4
.2fa2	20 53 26	jsr $2653		jsr	interactionHandler
.2fa5					_CLExit
.2fa5	60		rts				rts
.2fa6					CommandSave:
.2fa6	20 b9 2f	jsr $2fb9			jsr 	CLSParameters					; get parameters for save
.2fa9	90 08		bcc $2fb3			bcc 	_CSNoOverrideAddress
.2fab	20 83 3c	jsr $3c83			jsr 	CheckComma 						; should be a comma.
.2fae	a2 02		ldx #$02			ldx 	#2
.2fb0	20 6b 35	jsr $356b			jsr 	EvaluateInteger 				; get save end address.
.2fb3					_CSNoOverrideAddress:
.2fb3	a2 18		ldx #$18		ldx	#24
.2fb5	20 f6 14	jsr $14f6		jsr	deviceHandler
.2fb8	60		rts				rts
.2fb9					CLSParameters:
.2fb9	a2 00		ldx #$00			ldx 	#0 								; string
.2fbb	20 60 35	jsr $3560			jsr 	EvaluateString
.2fbe	e8		inx				inx 									; erase out +1 +2
.2fbf	20 03 3c	jsr $3c03			jsr 	MInt32False
.2fc2	e8		inx				inx
.2fc3	20 03 3c	jsr $3c03			jsr 	MInt32False
.2fc6	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2fc9	85 99		sta $99				sta 	esInt0+1
.2fcb	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fce	85 a1		sta $a1				sta 	esInt1+1
.2fd0	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2fd3	85 9a		sta $9a				sta 	esInt0+2
.2fd5	ad cb 0a	lda $0acb			lda 	endProgram+1
.2fd8	85 a2		sta $a2				sta 	esInt1+2
.2fda	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2fdc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2fde	d0 08		bne $2fe8			bne 	_CLSDefault
.2fe0	c8		iny				iny 									; skip comma
.2fe1	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2fe3	20 6b 35	jsr $356b			jsr 	EvaluateInteger
.2fe6	38		sec				sec
.2fe7	60		rts				rts
.2fe8					_CLSDefault:
.2fe8	18		clc				clc
.2fe9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2fea					Command_New:
.2fea					Command_XNew:
.2fea	20 8a 30	jsr $308a			jsr 	ResetCodeAddress 			; point to first line
.2fed	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2fef	98		tya				tya
.2ff0	91 28		sta ($28),y			sta 	(codePtr),y
.2ff2	20 5b 2e	jsr $2e5b			jsr 	CommandClear 				; clear everything down.
.2ff5	4c b1 29	jmp $29b1			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d09					breakCounter:
>0d09								.fill 	1
.0d0a					breakIncrement:
>0d0a								.fill 	1
.2ff8					Command_Run:
.2ff8					XCommand_Run:
.2ff8	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2ffa	9a		txs				txs
.2ffb	20 84 30	jsr $3084			jsr 	BreakOn 					; turn break on
.2ffe	20 5b 2e	jsr $2e5b			jsr 	CommandClear 				; clear everything.
.3001	20 8a 30	jsr $308a			jsr 	ResetCodeAddress 			; back to the start.
.3004					Command_RunFrom:
.3004	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.3006					CRNextInstruction:
.3006	a9 00		lda #$00			lda 	#0
.3008	85 3a		sta $3a				sta 	softMemAlloc+1
.300a	ad 09 0d	lda $0d09			lda 	breakCounter 				; check for break.
.300d	6d 0a 0d	adc $0d0a			adc 	breakIncrement
.3010	8d 09 0d	sta $0d09			sta 	breakCounter
.3013	90 05		bcc $301a			bcc 	_CRNoChecks
.3015	a2 02		ldx #$02		ldx	#2
.3017	20 f6 14	jsr $14f6		jsr	deviceHandler
.301a					_CRNoChecks
.301a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.301c	10 1c		bpl $303a			bpl 	_CRNotToken
.301e	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.3020	b0 0c		bcs $302e			bcs 	_CRExecute
.3022	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.3024	b0 71		bcs $3097			bcs 	Unimplemented
.3026	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.3028	b0 04		bcs $302e			bcs 	_CRExecute
.302a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.302c	b0 16		bcs $3044			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.302e					_CRExecute:
.302e	c8		iny				iny 								; consume it.
.302f	0a		asl a				asl 	a 							; double it, losing most significant bit.
.3030	aa		tax				tax
.3031	20 37 30	jsr $3037			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.3034	4c 06 30	jmp $3006			jmp 	CRNextInstruction
.3037					_CRRunRoutine:
.3037	7c a1 30	jmp ($30a1,x)			jmp 	(Group0Vectors,x)
.303a					_CRNotToken:
.303a	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.303c	b0 59		bcs $3097			bcs 	Unimplemented
.303e					_CRDefaultLet:
.303e	20 e4 28	jsr $28e4			jsr 	CommandLet 					; do the default, LET
.3041	4c 06 30	jmp $3006			jmp 	CRNextInstruction
.3044					_CRCheckIndirect:
.3044	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.3046	f0 0a		beq $3052			beq 	_CRAndCommand
.3048	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.304a	f0 f2		beq $303e			beq 	_CRDefaultLet
.304c	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.304e	f0 ee		beq $303e			beq 	_CRDefaultLet
.3050	d0 45		bne $3097			bne 	Unimplemented
.3052					_CRAndCommand:
.3052	c8		iny				iny 								; skip over the AND token
.3053	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.3055	20 6f 30	jsr $306f			jsr 	CommandAssembler 			; do the assembler command
.3058	4c 06 30	jmp $3006			jmp 	CRNextInstruction 			; and loop round.
.305b					CommandShift1:
.305b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.305d	10 38		bpl $3097			bpl 	Unimplemented 				; we have an error as this should not happen.
.305f	c8		iny				iny 								; advance over it.
.3060	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.3062	b0 0b		bcs $306f			bcs 	CommandAssembler
.3064	0a		asl a				asl 	a 							; double into X
.3065	aa		tax				tax
.3066	7c 67 31	jmp ($3167,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.3069					CommandShift2:
.3069	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.306b	20 69 18	jsr $1869		jsr	extensionHandler
.306e	60		rts				rts
.306f					CommandAssembler:
.306f	a2 02		ldx #$02		ldx	#2
.3071	20 b4 13	jsr $13b4		jsr	assemblerHandler
.3074	60		rts				rts
.3075					CommandAssemblerLabel:
.3075	a2 04		ldx #$04		ldx	#4
.3077	20 b4 13	jsr $13b4		jsr	assemblerHandler
.307a	60		rts				rts
.307b					CommandColon:
.307b	60		rts				rts
.307c					CommandBreak:
.307c	20 69 35	jsr $3569			jsr 	EvaluateRootInteger
.307f	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero
.3082	f0 02		beq $3086			beq 	BreakOff
.3084					BreakOn:
.3084	a2 08		ldx #$08			ldx 	#8
.3086					BreakOff:
.3086	8e 0a 0d	stx $0d0a			stx 	breakIncrement
.3089	60		rts				rts
.308a					ResetCodeAddress:
.308a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.308d	85 28		sta $28				sta 	codePtr
.308f	ad c9 0a	lda $0ac9			lda 	basePage+1
.3092	85 29		sta $29				sta 	codePtr+1
.3094	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.3096	60		rts				rts
.3097					Unimplemented:
.3097	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.3099	20 18 15	jsr $1518		jsr	errorHandler
.309c					TKErr01:
.309c					TKErr02:
.309c					TKErr03:
.309c					TKErr04:
.309c					TKErr05:
.309c					TKErr06:
.309c					TKErr07:
.309c					TKErr08:
.309c					TKErr09:
.309c					TKErr10:
.309c					TKErr11:
.309c					TKErr12:
.309c					TKErr13:
.309c					TKErr14:
.309c					TKErr15:
.309c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.309e	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.30a1					Group0Vectors:
>30a1	b7 29					.word	AdvanceNextLine          ; $80 [[eol]]
>30a3	5b 30					.word	CommandShift1            ; $81 [[sh1]]
>30a5	69 30					.word	CommandShift2            ; $82 [[sh2]]
>30a7	9c 30					.word	TKErr09                  ; $83 [[sh3]]
>30a9	9c 30					.word	TKErr10                  ; $84 [[fpc]]
>30ab	9c 30					.word	TKErr08                  ; $85 [[str]]
>30ad	50 32					.word	AndHandler               ; $86 and
>30af	3d 32					.word	OrHandler                ; $87 or
>30b1	2a 32					.word	XorHandler               ; $88 xor
>30b3	72 33					.word	CompareGreaterEq         ; $89 >=
>30b5	7c 33					.word	CompareLessEq            ; $8a <=
>30b7	5e 33					.word	CompareGreater           ; $8b >
>30b9	54 33					.word	CompareLess              ; $8c <
>30bb	4a 33					.word	CompareEquals            ; $8d =
>30bd	68 33					.word	CompareNotEquals         ; $8e <>
>30bf	bb 31					.word	AddHandler               ; $8f +
>30c1	de 31					.word	SubHandler               ; $90 -
>30c3	76 32					.word	ShrHandler               ; $91 >>
>30c5	63 32					.word	ShlHandler               ; $92 <<
>30c7	f1 31					.word	MulHandler               ; $93 *
>30c9	04 32					.word	DivHandler               ; $94 /
>30cb	17 32					.word	ModHandler               ; $95 mod
>30cd	af 32					.word	PowerHandler             ; $96 ^
>30cf	89 32					.word	WordRefHandler           ; $97 !
>30d1	9c 32					.word	ByteRefHandler           ; $98 ?
>30d3	76 2d					.word	Command_Repeat           ; $99 repeat
>30d5	20 2e					.word	Command_While            ; $9a while
>30d7	cb 29					.word	Command_FOR              ; $9b for
>30d9	da 2a					.word	CommandIf                ; $9c if
>30db	9c 30					.word	TKErr04                  ; $9d defproc
>30dd	83 2d					.word	Command_Until            ; $9e until
>30df	43 2e					.word	Command_Wend             ; $9f wend
>30e1	2c 2a					.word	Command_NEXT             ; $a0 next
>30e3	9c 30					.word	TKErr06                  ; $a1 then
>30e5	15 2b					.word	Command_ENDIF            ; $a2 endif
>30e7	85 2c					.word	ReturnProc               ; $a3 endproc
>30e9	d6 34					.word	UnaryParenthesis         ; $a4 (
>30eb	b8 36					.word	UnaryLen                 ; $a5 len(
>30ed	fc 36					.word	UnarySgn                 ; $a6 sgn(
>30ef	e5 36					.word	UnaryAbs                 ; $a7 abs(
>30f1	55 37					.word	Unary_Random             ; $a8 random(
>30f3	9f 37					.word	Unary_Page               ; $a9 page
>30f5	ff 3b					.word	MInt32True               ; $aa true
>30f7	03 3c					.word	MInt32False              ; $ab false
>30f9	6a 37					.word	Unary_Min                ; $ac min(
>30fb	6e 37					.word	Unary_Max                ; $ad max(
>30fd	77 38					.word	UnarySys                 ; $ae sys(
>30ff	20 38					.word	UnaryTimer               ; $af timer(
>3101	35 36					.word	EventFunction            ; $b0 event(
>3103	49 38					.word	UnaryGet                 ; $b1 get(
>3105	39 38					.word	UnaryInkey               ; $b2 inkey(
>3107	f0 37					.word	UnaryAlloc               ; $b3 alloc(
>3109	b0 38					.word	ExecChr                  ; $b4 chr$(
>310b	e0 38					.word	ExecLeft                 ; $b5 left$(
>310d	fd 38					.word	ExecMid                  ; $b6 mid$(
>310f	25 39					.word	ExecRight                ; $b7 right$(
>3111	b7 35					.word	Event_Str                ; $b8 str$(
>3113	e6 35					.word	UnaryVal                 ; $b9 val(
>3115	13 37					.word	UnaryPeek                ; $ba peek(
>3117	19 37					.word	UnaryDeek                ; $bb deek(
>3119	1f 37					.word	UnaryLeek                ; $bc leek(
>311b	d6 36					.word	UnaryAsc                 ; $bd asc(
>311d	ca 37					.word	UnaryIntToFloat          ; $be int(
>311f	dd 37					.word	UnaryFloatToInt          ; $bf float(
>3121	e9 35					.word	UnaryIsVal               ; $c0 isval(
>3123	c7 38					.word	ExecUpper                ; $c1 upper$(
>3125	c4 38					.word	ExecLower                ; $c2 lower$(
>3127	ad 37					.word	UnaryReference           ; $c3 @
>3129	c3 37					.word	UnaryComplement          ; $c4 ~
>312b	c0 37					.word	UnaryHexMarker           ; $c5 &
>312d	62 38					.word	UnaryGetString           ; $c6 get$(
>312f	68 38					.word	UnaryInkeyString         ; $c7 inkey$(
>3131	9f 38					.word	UnaryMem                 ; $c8 mem
>3133	9c 30					.word	TKErr01                  ; $c9 )
>3135	7b 30					.word	CommandColon             ; $ca :
>3137	9c 30					.word	TKErr02                  ; $cb ,
>3139	9c 30					.word	TKErr03                  ; $cc ;
>313b	9f 29					.word	Command_Rem2             ; $cd '
>313d	9c 30					.word	TKErr07                  ; $ce to
>313f	9c 30					.word	TKErr05                  ; $cf step
>3141	18 2c					.word	CallProc                 ; $d0 proc
>3143	16 2b					.word	CommandLocal             ; $d1 local
>3145	d6 28					.word	Command_Dim              ; $d2 dim
>3147	9f 29					.word	Command_Rem              ; $d3 rem
>3149	e4 28					.word	CommandLet               ; $d4 let
>314b	20 27					.word	Command_Input            ; $d5 input
>314d	0f 2b					.word	Command_ELSE             ; $d6 else
>314f	a7 28					.word	Command_VDU              ; $d7 vdu
>3151	d6 27					.word	Command_Print            ; $d8 print
>3153	88 26					.word	CommandData              ; $d9 data
>3155	9c 30					.word	TKErr13                  ; $da image
>3157	9c 30					.word	TKErr12                  ; $db at
>3159	9c 30					.word	TKErr14                  ; $dc flip
>315b	c8 28					.word	Command_Assert           ; $dd assert
>315d	62 29					.word	Command_Poke             ; $de poke
>315f	66 29					.word	Command_Doke             ; $df doke
>3161	6a 29					.word	Command_Loke             ; $e0 loke
>3163	77 28					.word	Command_Ink              ; $e1 ink
>3165	82 28					.word	Command_Paper            ; $e2 paper
>3167	71 28					.word	Command_CLS              ; $e3 cls
>3169	8d 28					.word	Command_Locate           ; $e4 locate
>316b	75 30					.word	CommandAssemblerLabel    ; $e5 .
>316d	9c 30					.word	TKErr15                  ; $e6 from
>316f	9c 30					.word	TKErr11                  ; $e7 #
>3171	5b 2e					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.3173					Group1Vectors:
>3173	91 2f					.word	CommandLoad              ; $86 load
>3175	a6 2f					.word	CommandSave              ; $87 save
>3177	b6 2e					.word	CommandList              ; $88 list
>3179	ea 2f					.word	Command_New              ; $89 new
>317b	7c 30					.word	CommandBreak             ; $8a break
>317d	f8 2f					.word	Command_Run              ; $8b run
>317f	5d 26					.word	CommandRead              ; $8c read
>3181	91 26					.word	CommandRestore           ; $8d restore
>3183	b1 29					.word	CommandEnd               ; $8e end
>3185	ac 29					.word	CommandStop              ; $8f stop
>3187	b4 29					.word	CommandXemu              ; $90 xemu
>3189	ee 26					.word	CommandGOTO              ; $91 goto
>318b	c3 26					.word	CommandGOSUB             ; $92 gosub
>318d	d6 26					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.318f					BinaryProcess:
.318f	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.3191	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.3193	0a		asl a				asl 	a
.3194	30 0e		bmi $31a4			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.3196	18		clc				clc 								; return CC for integer
.3197	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3199	f0 08		beq $31a3			beq 	_BPExit 					; if both integer then return with CC.
.319b	20 a9 31	jsr $31a9			jsr 	BPMakeBothFloat 			; make both float
.319e	a9 01		lda #$01			lda 	#$01 						; set result type to float
.31a0	95 90		sta $90,x			sta 	esType,x
.31a2	38		sec				sec 								; and return with carry set.
.31a3					_BPExit:
.31a3	60		rts				rts
.31a4					_BPStringType:
.31a4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.31a6	20 18 15	jsr $1518		jsr	errorHandler
.31a9					BPMakeBothFloat:
.31a9	e8		inx				inx
.31aa	20 ae 31	jsr $31ae			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.31ad	ca		dex				dex
.31ae					BPMakeFloat:
.31ae	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.31b0	4a		lsr a				lsr 	a
.31b1	b0 07		bcs $31ba			bcs 	_BPIsFloat 					; already a float if set.
.31b3	8a		txa				txa
.31b4	a2 1c		ldx #$1c		ldx	#28
.31b6	20 67 24	jsr $2467		jsr	floatingpointHandler
.31b9	aa		tax				tax
.31ba					_BPIsFloat:
.31ba	60		rts				rts
.31bb					AddHandler:
.31bb	20 8c 33	jsr $338c			jsr 	DereferenceTwo 				; dereference top two on stack.
.31be	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.31c0	35 91		and $91,x			and 	esType+1,x
.31c2	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.31c4	d0 10		bne $31d6			bne 	_AHStringConcat				; concatenate strings.
.31c6	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.31c9	b0 03		bcs $31ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31cb	4c e7 3a	jmp $3ae7			jmp 	MInt32Add 							; else do it as integer.
.31ce					_IsFPOperation:
.31ce	8a		txa				txa 								; call the relevant fp routine
.31cf	a2 04		ldx #$04		ldx	#4
.31d1	20 67 24	jsr $2467		jsr	floatingpointHandler
.31d4	aa		tax				tax
.31d5	60		rts				rts
.31d6					_AHStringConcat:
.31d6	8a		txa				txa 								; handled by the string module.
.31d7	a2 06		ldx #$06		ldx	#6
.31d9	20 ae 3f	jsr $3fae		jsr	stringHandler
.31dc	aa		tax				tax
.31dd	60		rts				rts
.31de					SubHandler:
.31de	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.31e1	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.31e4	b0 03		bcs $31e9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31e6	4c 01 3b	jmp $3b01			jmp 	MInt32Sub 							; else do it as integer.
.31e9					_IsFPOperation:
.31e9	8a		txa				txa 								; call the relevant fp routine
.31ea	a2 12		ldx #$12		ldx	#18
.31ec	20 67 24	jsr $2467		jsr	floatingpointHandler
.31ef	aa		tax				tax
.31f0	60		rts				rts
.31f1					MulHandler:
.31f1	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.31f4	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.31f7	b0 03		bcs $31fc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31f9	4c 1b 3b	jmp $3b1b			jmp 	MInt32Multiply 							; else do it as integer.
.31fc					_IsFPOperation:
.31fc	8a		txa				txa 								; call the relevant fp routine
.31fd	a2 0c		ldx #$0c		ldx	#12
.31ff	20 67 24	jsr $2467		jsr	floatingpointHandler
.3202	aa		tax				tax
.3203	60		rts				rts
.3204					DivHandler:
.3204	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.3207	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.320a	b0 03		bcs $320f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.320c	4c d8 39	jmp $39d8			jmp 	MInt32SDivide 							; else do it as integer.
.320f					_IsFPOperation:
.320f	8a		txa				txa 								; call the relevant fp routine
.3210	a2 08		ldx #$08		ldx	#8
.3212	20 67 24	jsr $2467		jsr	floatingpointHandler
.3215	aa		tax				tax
.3216	60		rts				rts
.3217					ModHandler:
.3217	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.321a	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.321d	b0 03		bcs $3222			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.321f	4c 56 3a	jmp $3a56			jmp 	MInt32Modulus 							; else do it as integer.
.3222					_IsFPOperation:
.3222	8a		txa				txa 								; call the relevant fp routine
.3223	a2 0a		ldx #$0a		ldx	#10
.3225	20 67 24	jsr $2467		jsr	floatingpointHandler
.3228	aa		tax				tax
.3229	60		rts				rts
.322a					XorHandler:
.322a	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.322d	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.3230	b0 03		bcs $3235			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3232	4c 8a 39	jmp $398a			jmp 	MInt32Xor 							; else do it as integer.
.3235					_IsFPOperation:
.3235	8a		txa				txa 								; call the relevant fp routine
.3236	a2 0a		ldx #$0a		ldx	#10
.3238	20 67 24	jsr $2467		jsr	floatingpointHandler
.323b	aa		tax				tax
.323c	60		rts				rts
.323d					OrHandler:
.323d	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.3240	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.3243	b0 03		bcs $3248			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3245	4c 71 39	jmp $3971			jmp 	MInt32Or 							; else do it as integer.
.3248					_IsFPOperation:
.3248	8a		txa				txa 								; call the relevant fp routine
.3249	a2 0a		ldx #$0a		ldx	#10
.324b	20 67 24	jsr $2467		jsr	floatingpointHandler
.324e	aa		tax				tax
.324f	60		rts				rts
.3250					AndHandler:
.3250	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.3253	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.3256	b0 03		bcs $325b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3258	4c 58 39	jmp $3958			jmp 	MInt32And 							; else do it as integer.
.325b					_IsFPOperation:
.325b	8a		txa				txa 								; call the relevant fp routine
.325c	a2 0a		ldx #$0a		ldx	#10
.325e	20 67 24	jsr $2467		jsr	floatingpointHandler
.3261	aa		tax				tax
.3262	60		rts				rts
.3263					ShlHandler:
.3263	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.3266	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.3269	b0 03		bcs $326e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.326b	4c e4 32	jmp $32e4			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.326e					_IsFPOperation:
.326e	8a		txa				txa 								; call the relevant fp routine
.326f	a2 0a		ldx #$0a		ldx	#10
.3271	20 67 24	jsr $2467		jsr	floatingpointHandler
.3274	aa		tax				tax
.3275	60		rts				rts
.3276					ShrHandler:
.3276	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.3279	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.327c	b0 03		bcs $3281			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.327e	4c e7 32	jmp $32e7			jmp 	MInt32ShiftRightX 							; else do it as integer.
.3281					_IsFPOperation:
.3281	8a		txa				txa 								; call the relevant fp routine
.3282	a2 0a		ldx #$0a		ldx	#10
.3284	20 67 24	jsr $2467		jsr	floatingpointHandler
.3287	aa		tax				tax
.3288	60		rts				rts
.3289					WordRefHandler:
.3289	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.328c	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.328f	b0 03		bcs $3294			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3291	4c d6 32	jmp $32d6			jmp 	MInt32WordIndirect 							; else do it as integer.
.3294					_IsFPOperation:
.3294	8a		txa				txa 								; call the relevant fp routine
.3295	a2 0a		ldx #$0a		ldx	#10
.3297	20 67 24	jsr $2467		jsr	floatingpointHandler
.329a	aa		tax				tax
.329b	60		rts				rts
.329c					ByteRefHandler:
.329c	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.329f	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.32a2	b0 03		bcs $32a7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32a4	4c da 32	jmp $32da			jmp 	MInt32ByteIndirect 							; else do it as integer.
.32a7					_IsFPOperation:
.32a7	8a		txa				txa 								; call the relevant fp routine
.32a8	a2 0a		ldx #$0a		ldx	#10
.32aa	20 67 24	jsr $2467		jsr	floatingpointHandler
.32ad	aa		tax				tax
.32ae	60		rts				rts
.32af					PowerHandler:
.32af	20 8c 33	jsr $338c			jsr 	DereferenceTwo
.32b2	20 8f 31	jsr $318f			jsr 	BinaryProcess 				; check to see if either is float
.32b5	b0 03		bcs $32ba			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.32b7	4c c2 32	jmp $32c2			jmp 	PowerInteger 							; else do it as integer.
.32ba					_IsFPOperation:
.32ba	8a		txa				txa 								; call the relevant fp routine
.32bb	a2 18		ldx #$18		ldx	#24
.32bd	20 67 24	jsr $2467		jsr	floatingpointHandler
.32c0	aa		tax				tax
.32c1	60		rts				rts
.32c2					PowerInteger:
.32c2	20 a9 31	jsr $31a9			jsr 	BPMakeBothFloat				; make them float.
.32c5	8a		txa				txa
.32c6	a2 18		ldx #$18		ldx	#24
.32c8	20 67 24	jsr $2467		jsr	floatingpointHandler
.32cb	a2 14		ldx #$14		ldx	#20
.32cd	20 67 24	jsr $2467		jsr	floatingpointHandler
.32d0	aa		tax				tax
.32d1	a9 00		lda #$00			lda 	#0 							; make type integer
.32d3	95 90		sta $90,x			sta 	esType,x
.32d5	60		rts				rts
.32d6					Mint32WordIndirect:
.32d6	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.32d8	d0 02		bne $32dc			bne 	Min32Indirect
.32da					Mint32ByteIndirect:
.32da	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.32dc					Min32Indirect:
.32dc	48		pha				pha 								; save the indirection
.32dd	20 e7 3a	jsr $3ae7			jsr 	MInt32Add 					; add a!b a?b
.32e0	68		pla				pla 								; and set the type to reference.
.32e1	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.32e3	60		rts				rts
.32e4					Mint32ShiftLeftX:
.32e4	18		clc				clc 								; CC shift left
.32e5	90 01		bcc $32e8			bcc 	Mint32Shift
.32e7					Mint32ShiftRightX:
.32e7	38		sec				sec 								; CS shift right
.32e8					Mint32Shift:
.32e8	08		php				php 								; save carry flag on stack.
.32e9	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.32eb	15 a9		ora $a9,x			ora 	esInt2+1,x
.32ed	15 b1		ora $b1,x			ora 	esInt3+1,x
.32ef	d0 1e		bne $330f			bne 	_MShiftZero
.32f1	b5 99		lda $99,x			lda 	esInt0+1,x
.32f3	c9 20		cmp #$20			cmp 	#32
.32f5	b0 18		bcs $330f			bcs 	_MShiftZero
.32f7					_MShiftLoop:
.32f7	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.32f9	f0 12		beq $330d			beq 	_MShiftExit
.32fb	d6 99		dec $99,x			dec 	esInt0+1,x
.32fd	28		plp				plp 								; restore and save carry
.32fe	08		php				php
.32ff	90 06		bcc $3307			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3301	20 21 3c	jsr $3c21			jsr 	Mint32ShiftRight
.3304	4c f7 32	jmp $32f7			jmp 	_MShiftLoop
.3307					_MShiftLeft:
.3307	20 18 3c	jsr $3c18			jsr 	Mint32ShiftLeft
.330a	4c f7 32	jmp $32f7			jmp 	_MShiftLoop
.330d					_MShiftExit:
.330d	28		plp				plp	 								; throw saved carry and exit
.330e	60		rts				rts
.330f					_MShiftZero:
.330f	4c 03 3c	jmp $3c03			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.3312					PerformComparison:
.3312	20 8c 33	jsr $338c			jsr 	DereferenceTwo 				; make both values.
.3315	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3317	35 91		and $91,x			and 	esType+1,x
.3319	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.331a	30 1d		bmi $3339			bmi 	_PCIsString
.331c	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.331e	15 91		ora $91,x			ora 	esType+1,x
.3320	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3321	30 22		bmi $3345			bmi 	_PCError
.3323	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.3325	f0 0f		beq $3336			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3327	20 a9 31	jsr $31a9			jsr 	BPMakeBothFloat 			; make both float
.332a	8a		txa				txa
.332b	a2 06		ldx #$06		ldx	#6
.332d	20 67 24	jsr $2467		jsr	floatingpointHandler
.3330	86 32		stx $32				stx 	tempShort 					; save result
.3332	aa		tax				tax
.3333	a5 32		lda $32				lda 	tempShort
.3335	60		rts				rts
.3336					_PCIsInteger:
.3336	4c a3 39	jmp $39a3			jmp 	MInt32Compare
.3339					_PCIsString:
.3339	8a		txa				txa 								; A has SP
.333a	a2 0a		ldx #$0a		ldx	#10
.333c	20 ae 3f	jsr $3fae		jsr	stringHandler
.333f	86 32		stx $32				stx 	tempShort 					; save result
.3341	aa		tax				tax 								; put SP back in X and get result.
.3342	a5 32		lda $32				lda 	tempShort
.3344	60		rts				rts
.3345					_PCError:
.3345	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3347	20 18 15	jsr $1518		jsr	errorHandler
.334a					CompareEquals:
.334a	20 12 33	jsr $3312			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.334d	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.334f	f0 35		beq $3386			beq  	CompareTrue
.3351	4c 89 33	jmp $3389			jmp 	CompareFalse
.3354					CompareLess:
.3354	20 12 33	jsr $3312			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3357	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3359	f0 2b		beq $3386			beq  	CompareTrue
.335b	4c 89 33	jmp $3389			jmp 	CompareFalse
.335e					CompareGreater:
.335e	20 12 33	jsr $3312			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3361	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3363	f0 21		beq $3386			beq  	CompareTrue
.3365	4c 89 33	jmp $3389			jmp 	CompareFalse
.3368					CompareNotEquals:
.3368	20 12 33	jsr $3312			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.336b	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.336d	d0 17		bne $3386			bne  	CompareTrue
.336f	4c 89 33	jmp $3389			jmp 	CompareFalse
.3372					CompareGreaterEq:
.3372	20 12 33	jsr $3312			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3375	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3377	d0 0d		bne $3386			bne  	CompareTrue
.3379	4c 89 33	jmp $3389			jmp 	CompareFalse
.337c					CompareLessEq:
.337c	20 12 33	jsr $3312			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.337f	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3381	d0 03		bne $3386			bne  	CompareTrue
.3383	4c 89 33	jmp $3389			jmp 	CompareFalse
.3386					CompareTrue:
.3386	4c ff 3b	jmp $3bff			jmp 	MInt32True
.3389					CompareFalse:
.3389	4c 03 3c	jmp $3c03			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.338c					DereferenceTwo:
.338c	e8		inx				inx
.338d	20 91 33	jsr $3391			jsr 	DereferenceOne
.3390	ca		dex				dex
.3391					DereferenceOne:
.3391	b5 90		lda $90,x			lda 	esType,x
.3393	10 3d		bpl $33d2			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.3395	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.3396	b0 3b		bcs $33d3			bcs 	_DRFloatDeReference
.3398	98		tya				tya
.3399	48		pha				pha
.339a	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.339c	85 2a		sta $2a				sta 	temp0
.339e	b5 a0		lda $a0,x			lda 	esInt1,x
.33a0	85 2b		sta $2b				sta 	temp0+1
.33a2	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.33a4	95 a0		sta $a0,x			sta 	esInt1,x
.33a6	95 a8		sta $a8,x			sta 	esInt2,x
.33a8	95 b0		sta $b0,x			sta 	esInt3,x
.33aa	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.33ac	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.33ae	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.33af	30 0d		bmi $33be			bmi 	_DeRefString 				; string, 2 bytes only
.33b1	d0 11		bne $33c4			bne 	_DeRefByte 					; byte 1 byte only
.33b3					_DeRefLong:
.33b3	a0 03		ldy #$03			ldy 	#3
.33b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.33b7	95 b0		sta $b0,x			sta 	esInt3,x
.33b9	88		dey				dey
.33ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.33bc	95 a8		sta $a8,x			sta 	esInt2,x
.33be					_DeRefString:
.33be	a0 01		ldy #$01			ldy 	#1
.33c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.33c2	95 a0		sta $a0,x			sta 	esInt1,x
.33c4					_DeRefByte:
.33c4	a0 00		ldy #$00			ldy 	#0
.33c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.33c8	95 98		sta $98,x			sta 	esInt0,x
.33ca	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.33cc	29 40		and #$40			and 	#$40
.33ce	95 90		sta $90,x			sta 	esType,x
.33d0	68		pla				pla
.33d1	a8		tay				tay
.33d2					_DRNotReference
.33d2	60		rts				rts
.33d3					_DRFloatDereference:
.33d3	20 59 29	jsr $2959			jsr 	TOSToTemp0 					; address to deref in temp0
.33d6	8a		txa				txa
.33d7	a2 1e		ldx #$1e		ldx	#30
.33d9	20 67 24	jsr $2467		jsr	floatingpointHandler
.33dc	aa		tax				tax
.33dd	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.33df	95 90		sta $90,x			sta 	esType,x
.33e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.33e2					EvaluateLevel:
.33e2	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.33e4	b0 1e		bcs $3404			bcs 	_ELStack
.33e6	48		pha				pha 								; save precedence level.
.33e7	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.33e9	95 98		sta $98,x			sta 	esInt0,x
.33eb	95 a0		sta $a0,x			sta 	esInt1,x
.33ed	95 a8		sta $a8,x			sta 	esInt2,x
.33ef	95 b0		sta $b0,x			sta 	esInt3,x
.33f1	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.33f3	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.33f5	30 26		bmi $341d			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.33f7	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.33f8	30 0f		bmi $3409			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.33fa	8a		txa				txa 								; stack level in X
.33fb	a2 02		ldx #$02		ldx	#2
.33fd	20 08 4c	jsr $4c08		jsr	variableHandler
.3400	aa		tax				tax
.3401	4c 46 34	jmp $3446			jmp		_ELHasTerm
.3404					_ELStack:
.3404	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3406	20 18 15	jsr $1518		jsr	errorHandler
.3409					_ELIsConstant:
.3409	4a		lsr a				lsr 	a 							; get the value back
.340a	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.340c	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.340e					_ELCheckNext:
.340e	c8		iny				iny 								; look at next
.340f	b1 28		lda ($28),y			lda 	(codePtr),y
.3411	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.3413	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.3415	b0 2f		bcs $3446			bcs 	_ELHasTerm 					; done getting the constant.
.3417	20 df 34	jsr $34df			jsr 	ELShiftByteIn 				; shift byte into position.
.341a	4c 0e 34	jmp $340e			jmp 	_ELCheckNext
.341d					_ELIsToken:
.341d	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.341f	f0 0f		beq $3430			beq 	_ELIsString
.3421	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.3423	d0 5f		bne $3484			bne 	_ELCheckUnary
.3425	8a		txa				txa 								; put X into A
.3426	c8		iny				iny 								; skip over the float marker
.3427	a2 1a		ldx #$1a		ldx	#26
.3429	20 67 24	jsr $2467		jsr	floatingpointHandler
.342c	aa		tax				tax 								; restore X
.342d	4c 46 34	jmp $3446			jmp 	_ELHasTerm
.3430					_ELIsString:
.3430	98		tya				tya 								; address of string is codePtr+y+1
.3431	38		sec				sec
.3432	65 28		adc $28				adc 	codePtr
.3434	95 98		sta $98,x			sta 	esInt0,x
.3436	a5 29		lda $29				lda 	codePtr+1
.3438	69 00		adc #$00			adc 	#0
.343a	95 a0		sta $a0,x			sta 	esInt1,x
.343c	a9 40		lda #$40			lda 	#$40 						; set type to string value
.343e	95 90		sta $90,x			sta 	esType,x
.3440	c8		iny				iny 								; skip over string.
.3441	98		tya				tya
.3442	38		sec				sec									; +1 for the length itself.
.3443	71 28		adc ($28),y			adc 	(codePtr),y
.3445	a8		tay				tay 								; and fall through to term loop code.
.3446					_ELHasTerm:
.3446	b1 28		lda ($28),y			lda 	(codePtr),y
.3448	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.344a	90 04		bcc $3450			bcc 	_ELPopExit
.344c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.344e	90 02		bcc $3452			bcc 	_ELHasBinaryTerm
.3450					_ELPopExit:
.3450	68		pla				pla
.3451					_ELExit:
.3451	60		rts				rts
.3452					_ELHasBinaryTerm:
.3452	84 32		sty $32				sty 	tempShort 					; save position
.3454	a8		tay				tay 								; use token as an index and get the precedence.
.3455	b9 87 34	lda $3487,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3458	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.345a	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.345c	68		pla				pla 								; restore current level.
.345d	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.345f	b0 f0		bcs $3451			bcs 	_ELExit
.3461	48		pha				pha 								; save current level back on the stack.
.3462	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.3464	48		pha				pha
.3465	c8		iny				iny
.3466	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3467	a5 32		lda $32				lda 	tempShort
.3469	20 e2 33	jsr $33e2			jsr 	EvaluateLevel
.346c	ca		dex				dex
.346d	68		pla				pla 								; get the operator back out.
.346e					_ELExecuteA:
.346e	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3470	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3471	aa		tax				tax
.3472	bd a1 30	lda $30a1,x			lda 	Group0Vectors,x
.3475	85 2a		sta $2a				sta 	temp0
.3477	bd a2 30	lda $30a2,x			lda 	Group0Vectors+1,x
.347a	85 2b		sta $2b				sta 	temp0+1
.347c	a6 32		ldx $32				ldx 	tempShort
.347e	20 cb 34	jsr $34cb			jsr 	_ELCallTemp0
.3481	4c 46 34	jmp $3446			jmp 	_ELHasTerm 					; and loop back round.
.3484					_ELCheckUnary:
.3484	c8		iny				iny 								; skip over token.
.3485	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3487	f0 19		beq $34a2			beq 	_ELMinus
.3489	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.348b	f0 2c		beq $34b9			beq 	_ELIndirect
.348d	c9 98		cmp #$98			cmp 	#TKW_QMARK
.348f	f0 28		beq $34b9			beq 	_ELIndirect
.3491	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.3493	f0 39		beq $34ce			beq 	_ELExtension
.3495	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3497	90 04		bcc $349d			bcc 	_ELUSyntax
.3499	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.349b	90 d1		bcc $346e			bcc 	_ELExecuteA 				; if so do that token.
.349d					_ELUSyntax:
.349d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.349f	20 18 15	jsr $1518		jsr	errorHandler
.34a2					_ELMinus:
.34a2	20 34 35	jsr $3534			jsr 	EvaluateNumericTerm 		; get a number to negate.
.34a5	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.34a7	f0 0a		beq $34b3			beq 	_ELMinusInteger
.34a9	8a		txa				txa
.34aa	a2 0e		ldx #$0e		ldx	#14
.34ac	20 67 24	jsr $2467		jsr	floatingpointHandler
.34af	aa		tax				tax
.34b0	4c 46 34	jmp $3446			jmp 	_ELHasTerm
.34b3					_ELMinusInteger:
.34b3	20 bd 3b	jsr $3bbd			jsr 	MInt32Negate 				; do int negate
.34b6	4c 46 34	jmp $3446			jmp 	_ELHasTerm
.34b9					_ELIndirect:
.34b9	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.34ba	20 3d 35	jsr $353d			jsr 	EvaluateIntegerTerm 		; integer address
.34bd	68		pla				pla
.34be	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.34c0	f0 02		beq $34c4			beq 	_ELHaveModifier
.34c2	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.34c4					_ELHaveModifier:
.34c4	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.34c6	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.34c8	4c 46 34	jmp $3446			jmp 	_ELHasTerm
.34cb					_ELCallTemp0:
.34cb	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.34ce					_ELExtension:
.34ce	8a		txa				txa 								; stack pos in A
.34cf	20 69 18	jsr $1869		jsr	extensionHandler
.34d2	aa		tax				tax 								; restore stack
.34d3	4c 46 34	jmp $3446			jmp 	_ELHasTerm
.34d6					UnaryParenthesis:
.34d6	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.34d8	20 e2 33	jsr $33e2			jsr 	EvaluateLevel
.34db	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; check for )
.34de	60		rts				rts
.34df					ELShiftByteIn:
.34df	48		pha				pha 								; save bits to shift in.
.34e0	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.34e2	48		pha				pha
.34e3	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.34e5	95 b0		sta $b0,x			sta 	esInt3,x
.34e7	b5 a0		lda $a0,x			lda 	esInt1,x
.34e9	95 a8		sta $a8,x			sta 	esInt2,x
.34eb	b5 98		lda $98,x			lda 	esInt0,x
.34ed	95 a0		sta $a0,x			sta 	esInt1,x
.34ef	a9 00		lda #$00			lda 	#0
.34f1	95 98		sta $98,x			sta 	esInt0,x
.34f3	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.34f4	29 03		and #$03			and 	#3 							; only want lower 2 bits
.34f6	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.34f8					_ELShiftLoop:
.34f8	4a		lsr a				lsr 	a
.34f9	76 b0		ror $b0,x			ror 	esInt3,x
.34fb	76 a8		ror $a8,x			ror 	esInt2,x
.34fd	76 a0		ror $a0,x			ror 	esInt1,x
.34ff	76 98		ror $98,x			ror 	esInt0,x
.3501	c9 01		cmp #$01			cmp 	#1
.3503	d0 f3		bne $34f8			bne 	_ELShiftLoop
.3505	68		pla				pla 								; get original 6 bit value and OR in.
.3506	29 3f		and #$3f			and 	#$3F
.3508	15 98		ora $98,x			ora 	esInt0,x
.350a	95 98		sta $98,x			sta 	esInt0,x
.350c	60		rts				rts
.350d					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>350d	01					.byte	$01			; $86 and
>350e	01					.byte	$01			; $87 or
>350f	01					.byte	$01			; $88 xor
>3510	02					.byte	$02			; $89 >=
>3511	02					.byte	$02			; $8a <=
>3512	02					.byte	$02			; $8b >
>3513	02					.byte	$02			; $8c <
>3514	02					.byte	$02			; $8d =
>3515	02					.byte	$02			; $8e <>
>3516	03					.byte	$03			; $8f +
>3517	03					.byte	$03			; $90 -
>3518	04					.byte	$04			; $91 >>
>3519	04					.byte	$04			; $92 <<
>351a	04					.byte	$04			; $93 *
>351b	04					.byte	$04			; $94 /
>351c	04					.byte	$04			; $95 mod
>351d	05					.byte	$05			; $96 ^
>351e	06					.byte	$06			; $97 !
>351f	06					.byte	$06			; $98 ?
>3520	82					.byte	$82			; $99 repeat
>3521	82					.byte	$82			; $9a while
>3522	82					.byte	$82			; $9b for
>3523	82					.byte	$82			; $9c if
>3524	82					.byte	$82			; $9d defproc
>3525	80					.byte	$80			; $9e until
>3526	80					.byte	$80			; $9f wend
>3527	80					.byte	$80			; $a0 next
>3528	80					.byte	$80			; $a1 then
>3529	80					.byte	$80			; $a2 endif
>352a	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.352b					EvaluateTerm:
.352b	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.352d	20 e2 33	jsr $33e2			jsr 	EvaluateLevel
.3530	20 91 33	jsr $3391			jsr 	DereferenceOne
.3533	60		rts				rts
.3534					EvaluateNumericTerm:
.3534	20 2b 35	jsr $352b			jsr 	EvaluateTerm
.3537	b5 90		lda $90,x			lda 	esType,x
.3539	0a		asl a				asl 	a 							; see if it's a string.
.353a	30 09		bmi $3545			bmi 	ENTType
.353c	60		rts				rts
.353d					EvaluateIntegerTerm:
.353d	20 2b 35	jsr $352b			jsr 	EvaluateTerm
.3540	b5 90		lda $90,x			lda 	esType,x
.3542	d0 01		bne $3545			bne 	ENTType
.3544	60		rts				rts
.3545					ENTType:
.3545	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3547	20 18 15	jsr $1518		jsr	errorHandler
.354a					EvaluateRoot:
.354a	a2 00		ldx #$00			ldx 	#0
.354c					Evaluate:
.354c	a9 00		lda #$00			lda 	#0
.354e	20 e2 33	jsr $33e2			jsr 	EvaluateLevel
.3551	20 91 33	jsr $3391			jsr 	DereferenceOne
.3554	60		rts				rts
.3555					EvaluateNumeric:
.3555	20 4c 35	jsr $354c			jsr 	Evaluate
.3558	b5 90		lda $90,x			lda 	esType,x
.355a	0a		asl a				asl 	a 							; see if it's a string.
.355b	30 e8		bmi $3545			bmi 	ENTType
.355d	4a		lsr a				lsr 	a 							; shift float flag into carry.
.355e	4a		lsr a				lsr 	a
.355f	60		rts				rts
.3560					EvaluateString:
.3560	20 4c 35	jsr $354c			jsr 	Evaluate
.3563	b5 90		lda $90,x			lda 	esType,x
.3565	0a		asl a				asl 	a 							; see if it's a string.
.3566	10 dd		bpl $3545			bpl 	ENTType
.3568	60		rts				rts
.3569					EvaluateRootInteger:
.3569	a2 00		ldx #$00			ldx 	#0
.356b					EvaluateInteger:
.356b	20 4c 35	jsr $354c			jsr 	Evaluate
.356e	b5 90		lda $90,x			lda 	esType,x
.3570	d0 d3		bne $3545			bne 	ENTType
.3572	60		rts				rts
.3573					EvaluateSmallInteger:
.3573	20 6b 35	jsr $356b			jsr 	EvaluateInteger
.3576	b5 a0		lda $a0,x			lda 	esInt1,x
.3578	15 a8		ora $a8,x			ora 	esInt2,x
.357a	15 b0		ora $b0,x			ora 	esInt3,x
.357c	d0 03		bne $3581			bne 	_ESIValue
.357e	b5 98		lda $98,x			lda 	esInt0,x
.3580	60		rts				rts
.3581					_ESIValue:
.3581	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3583	20 18 15	jsr $1518		jsr	errorHandler
.3586					LinkEvaluate:
.3586	aa		tax				tax
.3587	20 4c 35	jsr $354c			jsr 	Evaluate
.358a	8a		txa				txa
.358b	60		rts				rts
.358c					LinkEvaluateTerm:
.358c	aa		tax				tax
.358d	20 2b 35	jsr $352b			jsr 	EvaluateTerm
.3590	8a		txa				txa
.3591	60		rts				rts
.3592					LinkEvaluateInteger:
.3592	aa		tax				tax
.3593	20 6b 35	jsr $356b			jsr 	EvaluateInteger
.3596	8a		txa				txa
.3597	60		rts				rts
.3598					LinkEvaluateString:
.3598	aa		tax				tax
.3599	20 60 35	jsr $3560			jsr 	EvaluateString
.359c	8a		txa				txa
.359d	60		rts				rts
.359e					LinkEvaluateSmallInt:
.359e	aa		tax				tax
.359f	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger
.35a2	8a		txa				txa
.35a3	60		rts				rts
.35a4					EvaluateReference:
.35a4	ad 1e 35	lda $351e			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.35a7	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.35a8	e9 01		sbc #$01			sbc 	#1
.35aa	20 e2 33	jsr $33e2			jsr 	EvaluateLevel
.35ad	b5 90		lda $90,x			lda 	esType,x
.35af	10 01		bpl $35b2			bpl 	_ERFail
.35b1	60		rts				rts
.35b2					_ERFail:
.35b2	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.35b4	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.35b7					Event_Str:
.35b7	20 55 35	jsr $3555			jsr 	EvaluateNumeric 			; get a number.
.35ba	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.35bc	d0 13		bne $35d1			bne 	_ESFloat
.35be	20 14 36	jsr $3614			jsr 	ConvertGetBase 				; get base, or default.
.35c1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.35c3	85 2a		sta $2a				sta 	temp0
.35c5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.35c7	85 2b		sta $2b				sta 	1+(temp0)
.35c9	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.35cb	20 59 3b	jsr $3b59			jsr 	MInt32ToString 				; convert to string.
.35ce	4c de 35	jmp $35de			jmp 	_ESCloneExit 				; clone and exit.
.35d1					_ESFloat:
.35d1	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; check closing )
.35d4	20 59 29	jsr $2959			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.35d7	8a		txa				txa
.35d8	a2 16		ldx #$16		ldx	#22
.35da	20 67 24	jsr $2467		jsr	floatingpointHandler
.35dd	aa		tax				tax
.35de					_ESCloneExit:
.35de	8a		txa				txa
.35df	a2 04		ldx #$04		ldx	#4
.35e1	20 ae 3f	jsr $3fae		jsr	stringHandler
.35e4	aa		tax				tax
.35e5	60		rts				rts
.35e6					UnaryVal:
.35e6	38		sec				sec 								; Carry set to return value
.35e7	b0 01		bcs $35ea			bcs 	ValueMain
.35e9					UnaryIsVal:
.35e9	18		clc				clc									; Carry clear to return legitimacy
.35ea					ValueMain:
.35ea	08		php				php 								; save results (CS is value, CC is validation)
.35eb	20 60 35	jsr $3560			jsr 	EvaluateString
.35ee	20 14 36	jsr $3614			jsr 	ConvertGetBase 				; get base, if any.
.35f1	98		tya				tya
.35f2	48		pha				pha
.35f3	20 59 29	jsr $2959			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.35f6	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.35f8	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.35fa	20 71 3a	jsr $3a71			jsr 	MInt32FromString 			; convert it back from a string.
.35fd	b0 0c		bcs $360b			bcs 	_VMSuccess 					; successfully converted.
.35ff	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.3601	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.3603	f0 00		beq $3605			beq 	_VMFailed 	 				; so we failed.
.3605					_VMFailed:
.3605	68		pla				pla
.3606	a8		tay				tay
.3607	28		plp				plp
.3608	4c 03 3c	jmp $3c03			jmp 	MInt32False 				; return 0 whatever.
.360b					_VMSuccess:
.360b	68		pla				pla
.360c	a8		tay				tay
.360d	28		plp				plp 								; if CS the it was val() so we want the value.
.360e	b0 03		bcs $3613			bcs 	_VMExit
.3610	4c ff 3b	jmp $3bff			jmp 	MInt32True 					; otherwise return true as successful.
.3613					_VMExit:
.3613	60		rts				rts
.3614					ConvertGetBase:
.3614	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.3616	95 99		sta $99,x			sta 	esInt0+1,x
.3618	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.361a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.361c	d0 0e		bne $362c			bne 	_CGBDone 					; not found, should be )
.361e	e8		inx				inx 								; next level
.361f	c8		iny				iny 								; skip comma.
.3620	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger		; evaluate the base.
.3623	ca		dex				dex
.3624	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.3626	90 08		bcc $3630			bcc 	_CGBValue 					; (it should work as high as 37)
.3628	c9 11		cmp #$11			cmp 	#17
.362a	b0 04		bcs $3630			bcs 	_CGBValue
.362c					_CGBDone:
.362c	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.362f	60		rts				rts
.3630					_CGBValue:
.3630	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3632	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.3635					EventFunction:
.3635	20 a4 35	jsr $35a4			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3638	b5 90		lda $90,x			lda 	esType,x
.363a	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.363c	d0 5b		bne $3699			bne 	_EFType
.363e	20 83 3c	jsr $3c83			jsr 	CheckComma
.3641	e8		inx				inx
.3642	20 6b 35	jsr $356b			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.3645	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; finish off with the right bracket
.3648	ca		dex				dex
.3649	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.364b	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.364d	15 a8		ora $a8,x			ora 	esInt2,x
.364f	15 b0		ora $b0,x			ora 	esInt3,x
.3651	d0 41		bne $3694			bne 	_EFValue
.3653	98		tya				tya
.3654	48		pha				pha
.3655	8a		txa				txa
.3656	48		pha				pha
.3657	a2 1c		ldx #$1c		ldx	#28
.3659	20 f6 14	jsr $14f6		jsr	deviceHandler
.365c	84 2d		sty $2d				sty 	temp1+1
.365e	85 2c		sta $2c				sta 	temp1
.3660	68		pla				pla
.3661	aa		tax				tax
.3662	20 59 29	jsr $2959			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.3665	a0 03		ldy #$03			ldy 	#3							; if -ve
.3667	b1 2a		lda ($2a),y			lda 	(temp0),y
.3669	30 23		bmi $368e			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.366b	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.366d	b1 2a		lda ($2a),y			lda 	(temp0),y
.366f	c8		iny				iny
.3670	11 2a		ora ($2a),y			ora 	(temp0),y
.3672	f0 17		beq $368b			beq 	_EFInitialise 				; if so, initialise the value but return false.
.3674	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.3676	38		sec				sec
.3677	b1 2a		lda ($2a),y			lda 	(temp0),y
.3679	e5 2c		sbc $2c				sbc 	temp1
.367b	c8		iny				iny
.367c	b1 2a		lda ($2a),y			lda 	(temp0),y
.367e	e5 2d		sbc $2d				sbc 	temp1+1
.3680	10 0c		bpl $368e			bpl 	_EFFail 					; if trigger >= timer then return False
.3682	20 9e 36	jsr $369e			jsr 	SetEventTimer 				; reset the timer for next time.
.3685	20 ff 3b	jsr $3bff			jsr	 	MInt32True 					; and treutn true as fired.
.3688	68		pla				pla
.3689	a8		tay				tay
.368a	60		rts				rts
.368b					_EFInitialise:
.368b	20 9e 36	jsr $369e			jsr		SetEventTimer 				; set trigger time to time + elapsed
.368e					_EFFail:
.368e	68		pla				pla
.368f	a8		tay				tay
.3690	20 03 3c	jsr $3c03			jsr 	MInt32False
.3693	60		rts				rts
.3694					_EFValue:
.3694	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3696	20 18 15	jsr $1518		jsr	errorHandler
.3699					_EFType:
.3699	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.369b	20 18 15	jsr $1518		jsr	errorHandler
.369e					SetEventTimer:
.369e	a0 00		ldy #$00			ldy 	#0
.36a0	18		clc				clc
.36a1	a5 2c		lda $2c				lda 	temp1
.36a3	75 99		adc $99,x			adc 	esInt0+1,x
.36a5	91 2a		sta ($2a),y			sta		(temp0),y
.36a7	c8		iny				iny
.36a8	a5 2d		lda $2d				lda 	temp1+1
.36aa	75 a1		adc $a1,x			adc 	esInt1+1,x
.36ac	91 2a		sta ($2a),y			sta		(temp0),y
.36ae	88		dey				dey
.36af	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.36b1	d0 04		bne $36b7			bne 	_SETExit 					; zero means initialise.....
.36b3	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.36b5	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.36b7					_SETExit:
.36b7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.36b8					UnaryLen:
.36b8	20 c6 36	jsr $36c6			jsr 	ULStart
.36bb					ULFinish:
.36bb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.36bd	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.36bf	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit 				; write it out.
.36c2	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.36c5	60		rts				rts
.36c6	20 60 35	jsr $3560	ULStart:jsr 	EvaluateString
.36c9	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.36cb	85 2a		sta $2a				sta 	temp0
.36cd	b5 a0		lda $a0,x			lda 	esInt1,x
.36cf	85 2b		sta $2b				sta 	temp0+1
.36d1	84 32		sty $32				sty 	tempShort 					; get length
.36d3	a0 00		ldy #$00			ldy 	#0
.36d5	60		rts				rts
.36d6					UnaryAsc:
.36d6	20 c6 36	jsr $36c6			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.36d9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.36db	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.36dc	c9 00		cmp #$00			cmp 	#0
.36de	d0 db		bne $36bb			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.36e0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.36e2	20 18 15	jsr $1518		jsr	errorHandler
.36e5					UnaryAbs:
.36e5	20 55 35	jsr $3555			jsr 	EvaluateNumeric 			; some numeric value
.36e8	b0 07		bcs $36f1			bcs 	_UAFloat 					; CS then float, so use that function
.36ea	20 b8 3b	jsr $3bb8			jsr 	MInt32Absolute 				; int version
.36ed	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.36f0	60		rts				rts
.36f1					_UAFloat:
.36f1	8a		txa				txa 								; float version
.36f2	a2 02		ldx #$02		ldx	#2
.36f4	20 67 24	jsr $2467		jsr	floatingpointHandler
.36f7	aa		tax				tax
.36f8	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.36fb	60		rts				rts
.36fc					UnarySgn:
.36fc	20 55 35	jsr $3555			jsr 	EvaluateNumeric 			; same as above but sign of value
.36ff	b0 07		bcs $3708			bcs 	_USFloat
.3701	20 f0 3b	jsr $3bf0			jsr 	MInt32Sign
.3704	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.3707	60		rts				rts
.3708					_USFloat:
.3708	8a		txa				txa
.3709	a2 10		ldx #$10		ldx	#16
.370b	20 67 24	jsr $2467		jsr	floatingpointHandler
.370e	aa		tax				tax
.370f	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.3712	60		rts				rts
.3713					UnaryPeek:
.3713	20 3f 37	jsr $373f			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3716	4c 33 37	jmp $3733			jmp 	PDLByte0
.3719					UnaryDeek:
.3719	20 3f 37	jsr $373f			jsr 	PDLCode
.371c	4c 2d 37	jmp $372d			jmp 	PDLByte1
.371f					UnaryLeek:
.371f	20 3f 37	jsr $373f			jsr 	PDLCode
.3722	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3724	b1 2a		lda ($2a),y			lda 	(temp0),y
.3726	95 b0		sta $b0,x			sta 	esInt3,x
.3728	88		dey				dey
.3729	b1 2a		lda ($2a),y			lda 	(temp0),y
.372b	95 a8		sta $a8,x			sta 	esInt2,x
.372d					PDLByte1:
.372d	a0 01		ldy #$01			ldy 	#1
.372f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3731	95 a0		sta $a0,x			sta 	esInt1,x
.3733					PDLByte0:
.3733	a0 00		ldy #$00			ldy 	#0
.3735	b1 2a		lda ($2a),y			lda 	(temp0),y
.3737	95 98		sta $98,x			sta 	esInt0,x
.3739	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.373b	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; check right and return
.373e	60		rts				rts
.373f					PDLCode:
.373f	20 6b 35	jsr $356b			jsr 	EvaluateInteger 			; some address
.3742	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3744	85 2a		sta $2a				sta 	temp0
.3746	b5 a0		lda $a0,x			lda 	esInt1,x
.3748	85 2b		sta $2b				sta 	temp0+1
.374a	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.374c	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.374e	95 a8		sta $a8,x			sta 	esInt2,x
.3750	95 b0		sta $b0,x			sta 	esInt3,x
.3752	84 32		sty $32				sty 	tempShort 					; save Y
.3754	60		rts				rts
.3755					Unary_Random:
.3755	20 33 3c	jsr $3c33			jsr 	MInt32Random 				; generate random number.
.3758	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.375a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.375c	f0 08		beq $3766			beq 	_URExit
.375e	e8		inx				inx 								; load range 0..r-1 into +1
.375f	20 6b 35	jsr $356b			jsr 	EvaluateInteger
.3762	ca		dex				dex
.3763	20 56 3a	jsr $3a56			jsr 	MInt32Modulus 				; calculate random % modulus
.3766					_URExit:
.3766	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; check right and return
.3769	60		rts				rts
.376a					Unary_Min:
.376a	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.376c	d0 02		bne $3770			bne 	UnaryMBody
.376e					Unary_Max:
.376e	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3770					UnaryMBody:
.3770	48		pha				pha 								; save comparator on stack, shows min or max
.3771	20 4c 35	jsr $354c			jsr 	Evaluate 					; get the first thing to check
.3774					_UnaryMLoop:
.3774	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3776	c8		iny				iny
.3777	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3779	f0 09		beq $3784			beq 	_UnaryMExit
.377b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.377d	f0 07		beq $3786			beq 	_UnaryMCompare
.377f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3781	20 18 15	jsr $1518		jsr	errorHandler
.3784					_UnaryMExit:
.3784	68		pla				pla 								; done so throw comparator and return.
.3785	60		rts				rts
.3786					_UnaryMCompare:
.3786	e8		inx				inx 								; get the 2nd thing to evaluate
.3787	20 4c 35	jsr $354c			jsr 	Evaluate
.378a	ca		dex				dex
.378b	20 12 33	jsr $3312			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.378e	85 32		sta $32				sta 	tempShort 					; save result
.3790	68		pla				pla 								; get what we need
.3791	48		pha				pha
.3792	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3794	d0 de		bne $3774			bne 	_UnaryMLoop 				; no, try another value.
.3796	20 03 3c	jsr $3c03			jsr 	MInt32False 				; promote 2nd to 1st.
.3799	20 e7 3a	jsr $3ae7			jsr 	MInt32Add
.379c	4c 74 37	jmp $3774			jmp 	_UnaryMLoop
.379f					Unary_Page:
.379f	20 03 3c	jsr $3c03			jsr 	MInt32False 				; zero
.37a2	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.37a5	95 98		sta $98,x			sta 	esInt0,x
.37a7	ad c9 0a	lda $0ac9			lda 	basePage+1
.37aa	95 a0		sta $a0,x			sta 	esInt1,x
.37ac	60		rts				rts
.37ad					UnaryReference:
.37ad	a9 0f		lda #$0f			lda 	#15
.37af	20 e2 33	jsr $33e2			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.37b2	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.37b4	10 05		bpl $37bb			bpl 	UType
.37b6	a9 00		lda #$00			lda 	#0 							; make it an integer
.37b8	95 90		sta $90,x			sta 	esType,x
.37ba	60		rts				rts
.37bb					UType:
.37bb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.37bd	20 18 15	jsr $1518		jsr	errorHandler
.37c0					UnaryHexMarker:
.37c0	4c 3d 35	jmp $353d			jmp 	EvaluateIntegerTerm
.37c3					UnaryComplement:
.37c3	20 3d 35	jsr $353d			jsr 	EvaluateIntegerTerm
.37c6	20 d7 3b	jsr $3bd7			jsr 	MInt32Not
.37c9	60		rts				rts
.37ca					UnaryIntToFloat:
.37ca	20 55 35	jsr $3555			jsr 	EvaluateNumeric				; some number
.37cd	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.37cf	d0 0b		bne $37dc			bne 	_UIFExit
.37d1	8a		txa				txa 								; convert and set type
.37d2	a2 1c		ldx #$1c		ldx	#28
.37d4	20 67 24	jsr $2467		jsr	floatingpointHandler
.37d7	aa		tax				tax
.37d8	a9 01		lda #$01			lda 	#1
.37da	95 90		sta $90,x			sta 	esType,x
.37dc					_UIFExit:
.37dc	60		rts				rts
.37dd					UnaryFloatToInt:
.37dd	20 55 35	jsr $3555			jsr 	EvaluateNumeric 			; the number
.37e0	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.37e2	f0 0b		beq $37ef			beq 	_UFIExit
.37e4	8a		txa				txa 								; convert to int
.37e5	a2 14		ldx #$14		ldx	#20
.37e7	20 67 24	jsr $2467		jsr	floatingpointHandler
.37ea	aa		tax				tax
.37eb	a9 00		lda #$00			lda 	#0 							; set type
.37ed	95 90		sta $90,x			sta 	esType,x
.37ef					_UFIExit:
.37ef	60		rts				rts
.37f0					UnaryAlloc:
.37f0	e8		inx				inx 								; evaluate memory required
.37f1	20 6b 35	jsr $356b			jsr 	EvaluateInteger
.37f4	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.37f7	ca		dex				dex
.37f8	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.37fa	15 b1		ora $b1,x			ora 	esInt3+1,x
.37fc	d0 1d		bne $381b			bne 	_UABadValue
.37fe	20 03 3c	jsr $3c03			jsr 	MInt32False					; zero return.
.3801	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3803	95 a0		sta $a0,x			sta 	esInt1,x
.3805	a5 35		lda $35				lda 	lowMemory
.3807	95 98		sta $98,x			sta 	esInt0,x
.3809	18		clc				clc 								; add alloc required.
.380a	75 99		adc $99,x			adc 	esInt0+1,x
.380c	85 35		sta $35				sta 	lowMemory
.380e	a5 36		lda $36				lda 	lowMemory+1
.3810	75 a1		adc $a1,x			adc 	esInt1+1,x
.3812	85 36		sta $36				sta 	lowMemory+1
.3814	b0 05		bcs $381b			bcs		_UABadValue 				; overflow definitely bad.
.3816	c5 34		cmp $34				cmp 	highMemory+1
.3818	b0 01		bcs $381b			bcs 	_UABadValue 				; out of memory bad.
.381a	60		rts				rts
.381b					_UABadValue:
.381b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.381d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3820					UnaryTimer:
.3820	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; no parameters
.3823	98		tya				tya
.3824	48		pha				pha
.3825	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero 					; zero result
.3828	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.382a	a2 1c		ldx #$1c		ldx	#28
.382c	20 f6 14	jsr $14f6		jsr	deviceHandler
.382f	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3831	95 98		sta $98,x			sta 	esInt0,x
.3833	98		tya				tya
.3834	95 a0		sta $a0,x			sta 	esInt1,x
.3836	68		pla				pla
.3837	a8		tay				tay
.3838	60		rts				rts
.3839					UnaryInkey:
.3839	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.383c	86 2a		stx $2a				stx 	temp0
.383e	a2 0a		ldx #$0a		ldx	#10
.3840	20 f6 14	jsr $14f6		jsr	deviceHandler
.3843	a6 2a		ldx $2a				ldx 	temp0
.3845	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit
.3848	60		rts				rts
.3849					UnaryGet:
.3849	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.384c	86 2a		stx $2a				stx 	temp0
.384e					_UGLoop:
.384e	a2 02		ldx #$02		ldx	#2
.3850	20 f6 14	jsr $14f6		jsr	deviceHandler
.3853	a2 0a		ldx #$0a		ldx	#10
.3855	20 f6 14	jsr $14f6		jsr	deviceHandler
.3858	c9 00		cmp #$00			cmp 	#0
.385a	f0 f2		beq $384e			beq 	_UGLoop
.385c	a6 2a		ldx $2a				ldx 	temp0
.385e	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit
.3861	60		rts				rts
.3862					UnaryGetString:
.3862	20 49 38	jsr $3849			jsr 	UnaryGet
.3865					UGSDoChr:
.3865	4c b6 38	jmp $38b6			jmp 	ChrCode
.3868					UnaryInkeyString:
.3868	20 39 38	jsr $3839			jsr 	UnaryInkey
.386b	b5 98		lda $98,x			lda 	esInt0,x
.386d	d0 f6		bne $3865			bne 	UGSDoChr
.386f	8a		txa				txa
.3870	a2 08		ldx #$08		ldx	#8
.3872	20 ae 3f	jsr $3fae		jsr	stringHandler
.3875	aa		tax				tax
.3876	60		rts				rts
.3877					UnarySys:
.3877	20 6b 35	jsr $356b			jsr 	EvaluateInteger 				; get the address
.387a	20 76 3c	jsr $3c76			jsr 	CheckRightParen
.387d	20 59 29	jsr $2959			jsr 	TOSToTemp0 						; copy call address to temp0
.3880	8a		txa				txa
.3881	48		pha				pha
.3882	98		tya				tya
.3883	48		pha				pha
.3884	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3887	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.388a	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.388d	20 9c 38	jsr $389c			jsr 	_CallTemp0
.3890	85 32		sta $32				sta 	tempShort 						; restore YX
.3892	68		pla				pla
.3893	a8		tay				tay
.3894	68		pla				pla
.3895	aa		tax				tax
.3896	a5 32		lda $32				lda 	tempShort
.3898	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit 					; return result.
.389b	60		rts				rts
.389c					_CallTemp0:
.389c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.389f					UnaryMem:
.389f	20 03 3c	jsr $3c03			jsr 	MInt32False 					; set to false (e.g. 0)
.38a2	38		sec				sec
.38a3	a5 33		lda $33				lda 	highMemory 						; calculate value
.38a5	e5 35		sbc $35				sbc 	lowMemory
.38a7	95 98		sta $98,x			sta 	esInt0,x
.38a9	a5 34		lda $34				lda 	highMemory+1
.38ab	e5 36		sbc $36				sbc 	lowMemory+1
.38ad	95 a0		sta $a0,x			sta 	esInt1,x
.38af	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.38b0					ExecChr:
.38b0	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger		; character number 0-255
.38b3	20 76 3c	jsr $3c76			jsr 	CheckRightParen				; right bracket
.38b6					ChrCode:
.38b6	98		tya				tya
.38b7	48		pha				pha
.38b8	8a		txa				txa 								; A = stack
.38b9	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.38bb	a2 02		ldx #$02		ldx	#2
.38bd	20 ae 3f	jsr $3fae		jsr	stringHandler
.38c0	aa		tax				tax 								; X = stack
.38c1	68		pla				pla
.38c2	a8		tay				tay
.38c3	60		rts				rts
.38c4					ExecLower:
.38c4	38		sec				sec 								; set carry is lower
.38c5	b0 01		bcs $38c8			bcs 	ExecUpperLower
.38c7					ExecUpper:
.38c7	18		clc				clc 								; clear carry is upper
.38c8					ExecUpperLower:
.38c8	08		php				php 								; save carry
.38c9	20 60 35	jsr $3560			jsr 	EvaluateString 				; string to stack,X
.38cc	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; check closing right bracket.
.38cf	28		plp				plp 								; restore carry, save Y
.38d0	98		tya				tya
.38d1	48		pha				pha
.38d2	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.38d4	2a		rol a				rol 	a
.38d5	a8		tay				tay 								; now in Y
.38d6	8a		txa				txa 								; do the substring and exit.
.38d7	a2 0c		ldx #$0c		ldx	#12
.38d9	20 ae 3f	jsr $3fae		jsr	stringHandler
.38dc	aa		tax				tax
.38dd	68		pla				pla
.38de	a8		tay				tay
.38df	60		rts				rts
.38e0					ExecLeft:
.38e0	20 60 35	jsr $3560			jsr 	EvaluateString 				; string to stack,X
.38e3	20 83 3c	jsr $3c83			jsr 	CheckComma
.38e6	e8		inx				inx
.38e7	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.38e9	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit
.38ec	e8		inx				inx
.38ed	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.38f0					ExecSubstring:
.38f0	ca		dex				dex 								; fix up X
.38f1	ca		dex				dex
.38f2	20 76 3c	jsr $3c76			jsr 	CheckRightParen 			; check closing right bracket.
.38f5	8a		txa				txa 								; do the substring and exit.
.38f6	a2 0e		ldx #$0e		ldx	#14
.38f8	20 ae 3f	jsr $3fae		jsr	stringHandler
.38fb	aa		tax				tax
.38fc	60		rts				rts
.38fd					ExecMid:
.38fd	20 60 35	jsr $3560			jsr 	EvaluateString 				; string to stack,X
.3900	20 83 3c	jsr $3c83			jsr 	CheckComma
.3903	e8		inx				inx
.3904	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3907	c9 00		cmp #$00			cmp 	#0
.3909	f0 15		beq $3920			beq 	_EMValue
.390b	e8		inx				inx
.390c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.390e	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit
.3911	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3913	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3915	f0 d9		beq $38f0			beq 	ExecSubString
.3917	20 83 3c	jsr $3c83			jsr 	CheckComma
.391a	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.391d	4c f0 38	jmp $38f0			jmp 	ExecSubString
.3920					_EMValue:
.3920	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3922	20 18 15	jsr $1518		jsr	errorHandler
.3925					ExecRight:
.3925	20 60 35	jsr $3560			jsr 	EvaluateString 				; string to stack,X
.3928	20 83 3c	jsr $3c83			jsr 	CheckComma
.392b	e8		inx				inx
.392c	20 73 35	jsr $3573			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.392f	ca		dex				dex
.3930	98		tya				tya
.3931	48		pha				pha
.3932	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3934	85 2a		sta $2a				sta 	temp0
.3936	b5 a0		lda $a0,x			lda 	esInt1,x
.3938	85 2b		sta $2b				sta 	temp0+1
.393a	a0 00		ldy #$00			ldy 	#0 							; point to length
.393c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.393e	18		clc				clc 								; add 1.
.393f	69 01		adc #$01			adc 	#1
.3941	38		sec				sec
.3942	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3944	f0 02		beq $3948			beq		_ERMake1 					; if zero, make it 1.
.3946	b0 02		bcs $394a			bcs		_EROkay
.3948					_ERMake1:
.3948	a9 01		lda #$01			lda 	#1 							; start position.
.394a					_EROkay:
.394a	e8		inx				inx 								; set start pos.
.394b	95 98		sta $98,x			sta 	esInt0,x
.394d	e8		inx				inx
.394e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3950	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit
.3953	68		pla				pla
.3954	a8		tay				tay
.3955	4c f0 38	jmp $38f0			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3958					MInt32And:
.3958	b5 98		lda $98,x			lda 	esInt0,x
.395a	35 99		and $99,x			and 	esInt0+1,x
.395c	95 98		sta $98,x			sta 	esInt0,x
.395e	b5 a0		lda $a0,x			lda 	esInt1,x
.3960	35 a1		and $a1,x			and 	esInt1+1,x
.3962	95 a0		sta $a0,x			sta 	esInt1,x
.3964	b5 a8		lda $a8,x			lda 	esInt2,x
.3966	35 a9		and $a9,x			and 	esInt2+1,x
.3968	95 a8		sta $a8,x			sta 	esInt2,x
.396a	b5 b0		lda $b0,x			lda 	esInt3,x
.396c	35 b1		and $b1,x			and 	esInt3+1,x
.396e	95 b0		sta $b0,x			sta 	esInt3,x
.3970	60		rts				rts
.3971					MInt32Or:
.3971	b5 98		lda $98,x			lda 	esInt0,x
.3973	15 99		ora $99,x			ora 	esInt0+1,x
.3975	95 98		sta $98,x			sta 	esInt0,x
.3977	b5 a0		lda $a0,x			lda 	esInt1,x
.3979	15 a1		ora $a1,x			ora 	esInt1+1,x
.397b	95 a0		sta $a0,x			sta 	esInt1,x
.397d	b5 a8		lda $a8,x			lda 	esInt2,x
.397f	15 a9		ora $a9,x			ora 	esInt2+1,x
.3981	95 a8		sta $a8,x			sta 	esInt2,x
.3983	b5 b0		lda $b0,x			lda 	esInt3,x
.3985	15 b1		ora $b1,x			ora 	esInt3+1,x
.3987	95 b0		sta $b0,x			sta 	esInt3,x
.3989	60		rts				rts
.398a					MInt32Xor:
.398a	b5 98		lda $98,x			lda 	esInt0,x
.398c	55 99		eor $99,x			eor 	esInt0+1,x
.398e	95 98		sta $98,x			sta 	esInt0,x
.3990	b5 a0		lda $a0,x			lda 	esInt1,x
.3992	55 a1		eor $a1,x			eor 	esInt1+1,x
.3994	95 a0		sta $a0,x			sta 	esInt1,x
.3996	b5 a8		lda $a8,x			lda 	esInt2,x
.3998	55 a9		eor $a9,x			eor 	esInt2+1,x
.399a	95 a8		sta $a8,x			sta 	esInt2,x
.399c	b5 b0		lda $b0,x			lda 	esInt3,x
.399e	55 b1		eor $b1,x			eor 	esInt3+1,x
.39a0	95 b0		sta $b0,x			sta 	esInt3,x
.39a2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.39a3					MInt32Compare:
.39a3	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.39a5	d5 99		cmp $99,x			cmp 	esInt0+1,x
.39a7	d0 13		bne $39bc			bne 	MInt32Compare2
.39a9	b5 a0		lda $a0,x			lda 	esInt1,x
.39ab	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.39ad	d0 0d		bne $39bc			bne 	MInt32Compare2
.39af	b5 a8		lda $a8,x			lda 	esInt2,x
.39b1	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.39b3	d0 07		bne $39bc			bne 	MInt32Compare2
.39b5	b5 b0		lda $b0,x			lda 	esInt3,x
.39b7	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.39b9	d0 01		bne $39bc			bne 	MInt32Compare2
.39bb	60		rts				rts
.39bc					MInt32Compare2:
.39bc	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.39be	d5 99		cmp $99,x			cmp 	esInt0+1,x
.39c0	b5 a0		lda $a0,x			lda		esInt1,x
.39c2	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.39c4	b5 a8		lda $a8,x			lda		esInt2,x
.39c6	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.39c8	b5 b0		lda $b0,x			lda		esInt3,x
.39ca	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.39cc	50 02		bvc $39d0			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.39ce	49 80		eor #$80			eor 	#$80
.39d0					_I32LNoOverflow
.39d0	30 03		bmi $39d5			bmi 	MInt32CLess					; if -ve then return $FF
.39d2	a9 01		lda #$01			lda 	#$01						; else return $01
.39d4	60		rts				rts
.39d5					MInt32CLess:
.39d5	a9 ff		lda #$ff			lda 	#$FF
.39d7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.39d8					MInt32SDivide:
.39d8	98		tya				tya  								; save Y, which is the count of negations
.39d9	48		pha				pha
.39da	a0 00		ldy #$00			ldy 	#0 							; zero count
.39dc	20 f4 39	jsr $39f4			jsr 	_MInt32SRemSign 			; unsign TOS
.39df	e8		inx				inx 								; unsign TOS+1
.39e0	20 f4 39	jsr $39f4			jsr 	_MInt32SRemSign
.39e3	ca		dex				dex
.39e4	98		tya				tya 								; save sign count on stack
.39e5	48		pha				pha
.39e6	20 fd 39	jsr $39fd			jsr 	MInt32UDivide 				; unsigned division
.39e9	68		pla				pla 								; get sign count back
.39ea	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.39ec	f0 03		beq $39f1			beq 	_I32SNoNeg
.39ee	20 bd 3b	jsr $3bbd			jsr 	MInt32Negate
.39f1					_I32SNoNeg:
.39f1	68		pla				pla 								; restoe Y and exit
.39f2	a8		tay				tay
.39f3	60		rts				rts
.39f4					_MInt32SRemSign:
.39f4	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.39f6	10 04		bpl $39fc			bpl 	_MInt32SRSExit
.39f8	c8		iny				iny 								; increment the sign count
.39f9	20 bd 3b	jsr $3bbd			jsr 	MInt32Negate 				; negate the value.
.39fc					_MInt32SRSExit:
.39fc	60		rts				rts
.39fd					MInt32UDivide:
.39fd	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.39ff	15 a1		ora $a1,x			ora 	esInt1+1,x
.3a01	15 a2		ora $a2,x			ora 	esInt1+2,x
.3a03	15 a3		ora $a3,x			ora 	esInt1+3,x
.3a05	f0 4a		beq $3a51			beq 	_MInt32DZero
.3a07	e8		inx				inx 								; clear A
.3a08	e8		inx				inx
.3a09	20 03 3c	jsr $3c03			jsr 	MInt32False
.3a0c	ca		dex				dex
.3a0d	ca		dex				dex
.3a0e	98		tya				tya 								; save Y on the stack
.3a0f	48		pha				pha
.3a10	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3a12					_MInt32UDLoop:
.3a12	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3a14	36 a0		rol $a0,x			rol 	esInt1,x
.3a16	36 a8		rol $a8,x			rol 	esInt2,x
.3a18	36 b0		rol $b0,x			rol 	esInt3,x
.3a1a	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3a1c	36 a2		rol $a2,x			rol 	esInt1+2,x
.3a1e	36 aa		rol $aa,x			rol 	esInt2+2,x
.3a20	36 b2		rol $b2,x			rol 	esInt3+2,x
.3a22	38		sec				sec 								; calculate A-M saving result on the stack
.3a23	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3a25	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3a27	48		pha				pha
.3a28	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3a2a	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3a2c	48		pha				pha
.3a2d	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3a2f	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3a31	48		pha				pha
.3a32	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3a34	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3a36	90 10		bcc $3a48			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3a38	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3a3a	68		pla				pla
.3a3b	95 aa		sta $aa,x			sta 	esInt2+2,x
.3a3d	68		pla				pla
.3a3e	95 a2		sta $a2,x			sta 	esInt1+2,x
.3a40	68		pla				pla
.3a41	95 9a		sta $9a,x			sta 	esInt0+2,x
.3a43	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3a45	4c 4b 3a	jmp $3a4b			jmp 	_MInt32Next 					; do the next iteration
.3a48					_MInt32NoSubtract:
.3a48	68		pla				pla
.3a49	68		pla				pla
.3a4a	68		pla				pla
.3a4b					_MInt32Next:
.3a4b	88		dey				dey 								; do this 32 times.
.3a4c	d0 c4		bne $3a12			bne 	_MInt32UDLoop
.3a4e	68		pla				pla 								; restore Y and exit
.3a4f	a8		tay				tay
.3a50	60		rts				rts
.3a51					_MInt32DZero:
.3a51	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3a53	20 18 15	jsr $1518		jsr	errorHandler
.3a56					MInt32Modulus:
.3a56	20 fd 39	jsr $39fd			jsr 	MInt32UDivide 				; do the division.
.3a59	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3a5b	95 b0		sta $b0,x			sta 	esInt3,x
.3a5d	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3a5f	95 a8		sta $a8,x			sta 	esInt2,x
.3a61	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3a63	95 a0		sta $a0,x			sta 	esInt1,x
.3a65	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3a67	95 98		sta $98,x			sta 	esInt0,x
.3a69	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d0b					fs32Length:
>0d0b							.fill 	1
.3a6a					LinkInt32FromString:
.3a6a	aa		tax				tax
.3a6b	98		tya				tya
.3a6c	20 71 3a	jsr $3a71			jsr 	MInt32FromString
.3a6f	8a		txa				txa
.3a70	60		rts				rts
.3a71					MInt32FromString:
.3a71	85 32		sta $32				sta 	tempShort 					; save base
.3a73	98		tya				tya
.3a74	48		pha				pha
.3a75	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3a77	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a79	8d 0b 0d	sta $0d0b			sta 	fs32Length
.3a7c	f0 65		beq $3ae3			beq 	_I32FSFail2					; fail if length zero.
.3a7e	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3a80	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3a82	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3a84	d0 09		bne $3a8f			bne 	_I32FSNotNegative
.3a86	ad 0b 0d	lda $0d0b			lda 	fs32Length 					; get length back.
.3a89	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3a8b	f0 56		beq $3ae3			beq 	_I32FSFail2
.3a8d	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3a8f					_I32FSNotNegative:
.3a8f	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3a91	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3a93	d0 02		bne $3a97			bne 	_I32FSNN2
.3a95	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3a97					_I32FSNN2:
.3a97	48		pha				pha 								; save base + final sign on stack.
.3a98	20 03 3c	jsr $3c03			jsr 	MInt32False 				; zero the return value.
.3a9b					_I32FSMainLoop:
.3a9b	68		pla				pla 								; get the base back into tempShort
.3a9c	48		pha				pha
.3a9d	29 7f		and #$7f			and 	#$7F
.3a9f	85 32		sta $32				sta 	tempShort
.3aa1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3aa3	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3aa5	90 02		bcc $3aa9			bcc 	_I32FSNotLC
.3aa7	e9 20		sbc #$20			sbc 	#32
.3aa9					_I32FSNotLC:
.3aa9	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3aaa	e9 30		sbc #$30			sbc 	#"0"
.3aac	90 34		bcc $3ae2			bcc 	_I32FSFail 					; nothing more to do.
.3aae	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3ab0	90 06		bcc $3ab8			bcc 	_I32FSValidate
.3ab2	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3ab4	90 2c		bcc $3ae2			bcc 	_I32FSFail
.3ab6	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3ab8					_I32FSValidate:
.3ab8	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3aba	b0 26		bcs $3ae2			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3abc	48		pha				pha 								; save the new digit value.
.3abd	e8		inx				inx 								; put base into next slot up on stack
.3abe	a5 32		lda $32				lda 	tempShort
.3ac0	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit
.3ac3	ca		dex				dex
.3ac4	20 1b 3b	jsr $3b1b			jsr 	MInt32Multiply 				; multiply current by the base
.3ac7	e8		inx				inx
.3ac8	68		pla				pla  								; put additive into next slot
.3ac9	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit
.3acc	ca		dex				dex
.3acd	20 e7 3a	jsr $3ae7			jsr 	MInt32Add 					; and add it
.3ad0	c8		iny				iny 								; bump the character pointer
.3ad1	cc 0b 0d	cpy $0d0b			cpy 	fs32Length 					; until > length.
.3ad4	f0 c5		beq $3a9b			beq 	_I32FSMainLoop
.3ad6	90 c3		bcc $3a9b			bcc 	_I32FSMainLoop
.3ad8					_I32FSDone:
.3ad8	68		pla				pla 								; get base/final sign back
.3ad9	10 03		bpl $3ade			bpl 	_I32FSNN3
.3adb	20 bd 3b	jsr $3bbd			jsr 	MInt32Negate 				; negate the result.
.3ade					_I32FSNN3:
.3ade	68		pla				pla
.3adf	a8		tay				tay
.3ae0	38		sec				sec
.3ae1	60		rts				rts
.3ae2					_I32FSFail:
.3ae2	68		pla				pla
.3ae3					_I32FSFail2:
.3ae3	68		pla				pla
.3ae4	a8		tay				tay
.3ae5	18		clc				clc
.3ae6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3ae7					MInt32Add:
.3ae7	18		clc				clc
.3ae8	b5 98		lda $98,x			lda 	esInt0,x
.3aea	75 99		adc $99,x			adc 	esInt0+1,x
.3aec	95 98		sta $98,x			sta 	esInt0,x
.3aee	b5 a0		lda $a0,x			lda 	esInt1,x
.3af0	75 a1		adc $a1,x			adc 	esInt1+1,x
.3af2	95 a0		sta $a0,x			sta 	esInt1,x
.3af4	b5 a8		lda $a8,x			lda 	esInt2,x
.3af6	75 a9		adc $a9,x			adc 	esInt2+1,x
.3af8	95 a8		sta $a8,x			sta 	esInt2,x
.3afa	b5 b0		lda $b0,x			lda 	esInt3,x
.3afc	75 b1		adc $b1,x			adc 	esInt3+1,x
.3afe	95 b0		sta $b0,x			sta 	esInt3,x
.3b00	60		rts				rts
.3b01					MInt32Sub:
.3b01	38		sec				sec
.3b02	b5 98		lda $98,x			lda 	esInt0,x
.3b04	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3b06	95 98		sta $98,x			sta 	esInt0,x
.3b08	b5 a0		lda $a0,x			lda 	esInt1,x
.3b0a	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3b0c	95 a0		sta $a0,x			sta 	esInt1,x
.3b0e	b5 a8		lda $a8,x			lda 	esInt2,x
.3b10	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3b12	95 a8		sta $a8,x			sta 	esInt2,x
.3b14	b5 b0		lda $b0,x			lda 	esInt3,x
.3b16	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3b18	95 b0		sta $b0,x			sta 	esInt3,x
.3b1a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3b1b					MInt32Multiply:
.3b1b	e8		inx				inx 								; copy 2nd -> 3rd
.3b1c	20 41 3b	jsr $3b41			jsr 	MInt32CopyUp
.3b1f	ca		dex				dex
.3b20	20 41 3b	jsr $3b41			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3b23	20 03 3c	jsr $3c03			jsr 	MInt32False 				; zero 1st.
.3b26					_I32Loop:
.3b26	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3b28	29 01		and #$01			and 	#1
.3b2a	f0 03		beq $3b2f			beq 	_I32NoAdd 					; if set
.3b2c	20 e7 3a	jsr $3ae7			jsr 	MInt32Add 					; add 2nd to 1st.
.3b2f					_I32NoAdd:
.3b2f	e8		inx				inx 								; shift 2nd left
.3b30	20 18 3c	jsr $3c18			jsr 	MInt32ShiftLeft
.3b33	e8		inx				inx  								; shift 3rd right
.3b34	20 21 3c	jsr $3c21			jsr 	MInt32ShiftRight
.3b37	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero 					; check if zero.
.3b3a	08		php				php 								; save status bits
.3b3b	ca		dex				dex 	 							; point back to 1st
.3b3c	ca		dex				dex
.3b3d	28		plp				plp 								; get status bits
.3b3e	d0 e6		bne $3b26			bne 	_I32Loop 					; if non-zero keep going.
.3b40	60		rts				rts
.3b41					MInt32CopyUp:
.3b41	b5 98		lda $98,x			lda 	esInt0,x
.3b43	95 99		sta $99,x			sta 	esInt0+1,x
.3b45	b5 a0		lda $a0,x			lda 	esInt1,x
.3b47	95 a1		sta $a1,x			sta 	esInt1+1,x
.3b49	b5 a8		lda $a8,x			lda 	esInt2,x
.3b4b	95 a9		sta $a9,x			sta 	esInt2+1,x
.3b4d	b5 b0		lda $b0,x			lda 	esInt3,x
.3b4f	95 b1		sta $b1,x			sta 	esInt3+1,x
.3b51	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d0c					MCharCount:	.fill 	1						; count of converted characters
.3b52					MLInt32ToString:
.3b52	aa		tax				tax									; module passes stack in A, base in Y
.3b53	98		tya				tya
.3b54	20 59 3b	jsr $3b59			jsr 	MInt32ToString
.3b57	8a		txa				txa
.3b58	60		rts				rts
.3b59					MInt32ToString:
.3b59	48		pha				pha 								; save base
.3b5a	85 32		sta $32				sta 	tempShort 					; save target base.
.3b5c	a9 00		lda #$00			lda 	#0
.3b5e	8d 0c 0d	sta $0d0c			sta 	MCharCount 					; clear character count to 0
.3b61	98		tya				tya
.3b62	48		pha				pha
.3b63	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3b65	10 10		bpl $3b77			bpl 	_I32TSUnsigned
.3b67	48		pha				pha 								; save base on stack.
.3b68	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3b6a	10 08		bpl $3b74			bpl 	_I32TSNoFlip
.3b6c	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3b6e	20 aa 3b	jsr $3baa			jsr 	MI32WriteCharacter
.3b71	20 bd 3b	jsr $3bbd			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3b74					_I32TSNoFlip:
.3b74	68		pla				pla 								; get the base back
.3b75	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3b77					_I32TSUnsigned:
.3b77	20 85 3b	jsr $3b85			jsr 	MI32DivideWrite 			; recursive code to output string.
.3b7a	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3b7c	ad 0c 0d	lda $0d0c			lda 	MCharCount
.3b7f	91 2a		sta ($2a),y			sta 	(temp0),y
.3b81	68		pla				pla
.3b82	a8		tay				tay
.3b83	68		pla				pla
.3b84	60		rts				rts
.3b85					MI32DivideWrite:
.3b85	48		pha				pha 								; save the divisor/base
.3b86	e8		inx				inx 								; write in the dividing position.
.3b87	20 12 3c	jsr $3c12			jsr 	MInt32Set8Bit
.3b8a	ca		dex				dex
.3b8b	20 fd 39	jsr $39fd			jsr 	MInt32UDivide 				; divide number by base.
.3b8e	68		pla				pla 								; get the base into Y
.3b8f	a8		tay				tay
.3b90	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3b92	48		pha				pha
.3b93	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero 					; is the result zero ?
.3b96	f0 04		beq $3b9c			beq 	_I32NoRecurse 				; if so, don't recurse.
.3b98	98		tya				tya 								; put base into A
.3b99	20 85 3b	jsr $3b85			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3b9c					_I32NoRecurse:
.3b9c	68		pla				pla 								; get the remainder back
.3b9d	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3b9f	90 02		bcc $3ba3			bcc 	_I32NotHex
.3ba1	69 06		adc #$06			adc 	#7-1
.3ba3					_I32NotHex:
.3ba3	18		clc				clc 								; make it ASCII
.3ba4	69 30		adc #$30			adc 	#48
.3ba6	20 aa 3b	jsr $3baa			jsr 	MI32WriteCharacter 			; write the character out
.3ba9	60		rts				rts 								; and exit.
.3baa					MI32WriteCharacter:
.3baa	ee 0c 0d	inc $0d0c			inc 	MCharCount 					; bump count (space for leading count)
.3bad	ac 0c 0d	ldy $0d0c			ldy 	MCharCount 					; get position
.3bb0	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3bb2	c8		iny				iny
.3bb3	a9 00		lda #$00			lda 	#0
.3bb5	91 2a		sta ($2a),y			sta 	(temp0),y
.3bb7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d0d					MSeed32:	.fill 	4							; random number seed.
.3bb8					MInt32Absolute:
.3bb8	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3bba	30 01		bmi $3bbd			bmi 	MInt32Negate
.3bbc	60		rts				rts
.3bbd					MInt32Negate:
.3bbd	38		sec				sec 								; subtract from zero.
.3bbe	a9 00		lda #$00			lda 	#0
.3bc0	f5 98		sbc $98,x			sbc 	esInt0,x
.3bc2	95 98		sta $98,x			sta 	esInt0,x
.3bc4	a9 00		lda #$00			lda 	#0
.3bc6	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3bc8	95 a0		sta $a0,x			sta 	esInt1,x
.3bca	a9 00		lda #$00			lda 	#0
.3bcc	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3bce	95 a8		sta $a8,x			sta 	esInt2,x
.3bd0	a9 00		lda #$00			lda 	#0
.3bd2	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3bd4	95 b0		sta $b0,x			sta 	esInt3,x
.3bd6	60		rts				rts
.3bd7					MInt32Not:
.3bd7	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3bd9	49 ff		eor #$ff			eor 	#$FF
.3bdb	95 98		sta $98,x			sta 	esInt0,x
.3bdd	b5 a0		lda $a0,x			lda 	esInt1,x
.3bdf	49 ff		eor #$ff			eor 	#$FF
.3be1	95 a0		sta $a0,x			sta 	esInt1,x
.3be3	b5 a8		lda $a8,x			lda 	esInt2,x
.3be5	49 ff		eor #$ff			eor 	#$FF
.3be7	95 a8		sta $a8,x			sta 	esInt2,x
.3be9	b5 b0		lda $b0,x			lda 	esInt3,x
.3beb	49 ff		eor #$ff			eor 	#$FF
.3bed	95 b0		sta $b0,x			sta 	esInt3,x
.3bef	60		rts				rts
.3bf0					MInt32Sign:
.3bf0	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3bf2	30 0b		bmi $3bff			bmi 	MInt32True 					; if set return -1 (true)
.3bf4	20 2a 3c	jsr $3c2a			jsr 	MInt32Zero 					; is it zero ?
.3bf7	f0 0a		beq $3c03			beq 	MInt32False 				; if zero return 0 (false)
.3bf9	20 03 3c	jsr $3c03			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3bfc	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3bfe	60		rts				rts
.3bff					MInt32True:
.3bff	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3c01	d0 02		bne $3c05			bne 	MInt32WriteAll
.3c03					MInt32False:
.3c03	a9 00		lda #$00			lda 	#0
.3c05					MInt32WriteAll:
.3c05	95 98		sta $98,x			sta 	esInt0,x
.3c07					MInt32Write123:
.3c07	95 a0		sta $a0,x			sta 	esInt1,x
.3c09	95 a8		sta $a8,x			sta 	esInt2,x
.3c0b	95 b0		sta $b0,x			sta 	esInt3,x
.3c0d	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3c0f	95 90		sta $90,x			sta 	esType,x
.3c11	60		rts				rts
.3c12					MInt32Set8Bit:
.3c12	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3c14	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3c16	f0 ef		beq $3c07			beq		MInt32Write123
.3c18					MInt32ShiftLeft:
.3c18	16 98		asl $98,x			asl 	esInt0,x
.3c1a	36 a0		rol $a0,x			rol	 	esInt1,x
.3c1c	36 a8		rol $a8,x			rol	 	esInt2,x
.3c1e	36 b0		rol $b0,x			rol	 	esInt3,x
.3c20	60		rts				rts
.3c21					MInt32ShiftRight:
.3c21	56 b0		lsr $b0,x			lsr 	esInt3,x
.3c23	76 a8		ror $a8,x			ror 	esInt2,x
.3c25	76 a0		ror $a0,x			ror 	esInt1,x
.3c27	76 98		ror $98,x			ror 	esInt0,x
.3c29	60		rts				rts
.3c2a					MInt32Zero:
.3c2a	b5 98		lda $98,x			lda 	esInt0,x
.3c2c	15 a0		ora $a0,x			ora 	esInt1,x
.3c2e	15 a8		ora $a8,x			ora 	esInt2,x
.3c30	15 b0		ora $b0,x			ora 	esInt3,x
.3c32	60		rts				rts
.3c33					MInt32Random:
.3c33	98		tya				tya
.3c34	48		pha				pha
.3c35	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3c37	ad 0d 0d	lda $0d0d			lda 	MSeed32+0 					; check the seed isn't zero
.3c3a	d0 03		bne $3c3f			bne 	_Random1
.3c3c	a8		tay				tay 								; if so do it 256 times
.3c3d	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3c3f					_Random1:
.3c3f	0a		asl a				asl 	a
.3c40	2e 0e 0d	rol $0d0e			rol 	MSeed32+1
.3c43	2e 0f 0d	rol $0d0f			rol 	MSeed32+2
.3c46	2e 10 0d	rol $0d10			rol 	MSeed32+3
.3c49	90 02		bcc $3c4d			bcc 	_Random2
.3c4b	49 c5		eor #$c5			eor 	#$C5
.3c4d					_Random2:
.3c4d	88		dey				dey
.3c4e	d0 ef		bne $3c3f			bne 	_Random1
.3c50	8d 0d 0d	sta $0d0d			sta 	MSeed32+0 					; copy the seed in.
.3c53	95 98		sta $98,x			sta 	esInt0,x
.3c55	ad 0e 0d	lda $0d0e			lda 	MSeed32+1
.3c58	95 a0		sta $a0,x			sta 	esInt1,x
.3c5a	ad 0f 0d	lda $0d0f			lda 	MSeed32+2
.3c5d	95 a8		sta $a8,x			sta 	esInt2,x
.3c5f	ad 10 0d	lda $0d10			lda 	MSeed32+3
.3c62	95 b0		sta $b0,x			sta 	esInt3,x
.3c64	68		pla				pla
.3c65	a8		tay				tay
.3c66	a9 00		lda #$00			lda 	#0
.3c68	95 90		sta $90,x			sta 	esType,x
.3c6a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3c6b					CheckToken:
.3c6b	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3c6d	d0 02		bne $3c71			bne 	_CTError
.3c6f	c8		iny				iny
.3c70	60		rts				rts
.3c71					_CTError:
.3c71	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3c73	20 18 15	jsr $1518		jsr	errorHandler
.3c76					CheckRightParen:
.3c76	b1 28		lda ($28),y			lda 	(codePtr),y
.3c78	c8		iny				iny
.3c79	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3c7b	d0 01		bne $3c7e			bne 	_CRPError
.3c7d	60		rts				rts
.3c7e					_CRPError:
.3c7e	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3c80	20 18 15	jsr $1518		jsr	errorHandler
.3c83					CheckComma:
.3c83	b1 28		lda ($28),y			lda 	(codePtr),y
.3c85	c8		iny				iny
.3c86	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3c88	d0 01		bne $3c8b			bne 	_CCError
.3c8a	60		rts				rts
.3c8b					_CCError:
.3c8b	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3c8d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3c90					RSReset:
.3c90	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3c92	85 37		sta $37				sta 	rsPointer
.3c94	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3c96	85 38		sta $38				sta 	1+(rsPointer)
.3c98	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3c9a	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3c9d	60		rts				rts
.3c9e					RSClaim:
.3c9e	84 32		sty $32				sty 	tempShort 					; preserve Y
.3ca0	48		pha				pha 								; save marker on stack.
.3ca1	8a		txa				txa 								; get bytes required.
.3ca2	38		sec				sec
.3ca3	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3ca5	65 37		adc $37				adc 	rsPointer
.3ca7	85 37		sta $37				sta 	rsPointer
.3ca9	a5 38		lda $38				lda 	rsPointer+1
.3cab	69 ff		adc #$ff			adc 	#$FF
.3cad	85 38		sta $38				sta 	rsPointer+1
.3caf	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3cb1	90 08		bcc $3cbb			bcc 	_RSCOverflow
.3cb3	68		pla				pla 								; get marker back
.3cb4	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3cb6	91 37		sta ($37),y			sta 	(rsPointer),y
.3cb8	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3cba	60		rts				rts
.3cbb					_RSCOverflow:
.3cbb	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3cbd	20 18 15	jsr $1518		jsr	errorHandler
.3cc0					RSFree:
.3cc0	18		clc				clc
.3cc1	65 37		adc $37				adc 	rsPointer
.3cc3	85 37		sta $37				sta 	rsPointer
.3cc5	90 02		bcc $3cc9			bcc 	_RSFExit
.3cc7	e6 38		inc $38				inc 	rsPointer+1
.3cc9					_RSFExit:
.3cc9	60		rts				rts
.3cca					RSSavePosition:
.3cca	84 32		sty $32				sty 	tempShort 					; save Y position
.3ccc	a8		tay				tay 								; this is where we write it.
.3ccd	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3ccf	91 37		sta ($37),y			sta 	(rsPointer),y
.3cd1	c8		iny				iny
.3cd2	a5 29		lda $29				lda 	codePtr+1
.3cd4	91 37		sta ($37),y			sta 	(rsPointer),y
.3cd6	c8		iny				iny
.3cd7	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3cd9	91 37		sta ($37),y			sta 	(rsPointer),y
.3cdb	a8		tay				tay 								; fix Y back again to original value
.3cdc	60		rts				rts
.3cdd					RSLoadPosition:
.3cdd	a8		tay				tay
.3cde	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3ce0	85 28		sta $28				sta 	codePtr
.3ce2	c8		iny				iny
.3ce3	b1 37		lda ($37),y			lda 	(rsPointer),y
.3ce5	85 29		sta $29				sta 	codePtr+1
.3ce7	c8		iny				iny
.3ce8	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3cea	a8		tay				tay 								; to Y
.3ceb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3cec					WarmStart:
.3cec	a2 04		ldx #$04		ldx	#4
.3cee	20 53 26	jsr $2653		jsr	interactionHandler

;******  Return to file: main/main.asm

.3cf1					mainHandler:
.3cf1	7c f4 3c	jmp ($3cf4,x)			jmp 	(mainVectors,x)
.3cf4					mainVectors:
>3cf4	10 3d					.word _DummyControlHandler ; index 0
>3cf6	83 3c					.word CheckComma           ; index 2
>3cf8	76 3c					.word CheckRightParen      ; index 4
>3cfa	5b 2e					.word XCommandClear        ; index 6
>3cfc	86 35					.word LinkEvaluate         ; index 8
>3cfe	92 35					.word LinkEvaluateInteger  ; index 10
>3d00	9e 35					.word LinkEvaluateSmallInt ; index 12
>3d02	98 35					.word LinkEvaluateString   ; index 14
>3d04	8c 35					.word LinkEvaluateTerm     ; index 16
>3d06	52 3b					.word MLInt32ToString      ; index 18
>3d08	ea 2f					.word Command_XNew         ; index 20
>3d0a	f8 2f					.word XCommand_Run         ; index 22
>3d0c	04 30					.word Command_RunFrom      ; index 24
>3d0e	6a 3a					.word LinkInt32FromString  ; index 26
.3d10					_DummyControlHandler:
.3d10	60		rts			rts

;******  Return to file: basic.asm

.3d11					section_end_main:
.3d11					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3d11					StringChrs:
.3d11	aa		tax				tax 								; set up stack
.3d12	a9 02		lda #$02			lda 	#2
.3d14	20 d4 3d	jsr $3dd4			jsr 	AllocateSoftString
.3d17	98		tya				tya
.3d18	20 fa 3d	jsr $3dfa			jsr 	WriteSoftString
.3d1b					StringUpdate:
.3d1b	20 29 3d	jsr $3d29			jsr 	ReturnSoftString
.3d1e	8a		txa				txa
.3d1f	60		rts				rts
.3d20					StringNull:
.3d20	aa		tax				tax
.3d21	a9 01		lda #$01			lda 	#1
.3d23	20 d4 3d	jsr $3dd4			jsr 	AllocateSoftString
.3d26	4c 1b 3d	jmp $3d1b			jmp 	StringUpdate
.3d29					ReturnSoftString:
.3d29	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3d2b	95 98		sta $98,x			sta 	esInt0,x
.3d2d	a5 3a		lda $3a				lda 	softMemAlloc+1
.3d2f	95 a0		sta $a0,x			sta 	esInt1,x
.3d31	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3d33	95 a8		sta $a8,x			sta 	esInt2,x
.3d35	95 b0		sta $b0,x			sta 	esInt3,x
.3d37	a9 40		lda #$40			lda 	#$40 						; type string.
.3d39	95 90		sta $90,x			sta 	esType,x
.3d3b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3d3c					STRCompare:
.3d3c	48		pha				pha 								; save A
.3d3d	aa		tax				tax 								; put stack pos in X
.3d3e	98		tya				tya
.3d3f	48		pha				pha
.3d40	20 74 3d	jsr $3d74			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3d43	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3d45	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d47	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3d49	90 02		bcc $3d4d			bcc 	_SCNotSmaller
.3d4b	b1 2c		lda ($2c),y			lda 	(temp1),y
.3d4d					_SCNotSmaller:
.3d4d	aa		tax				tax 								; put that in X. We compare this many chars first.
.3d4e					_SCCompareLoop:
.3d4e	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3d50	f0 0c		beq $3d5e			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3d52	ca		dex				dex 								; decrement chars to compare.
.3d53	c8		iny				iny 								; move to next character
.3d54	38		sec				sec 								; calculate s1[y]-s2[y]
.3d55	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d57	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3d59	d0 0a		bne $3d65			bne 	_SCReturnResult 			; if different return sign of A
.3d5b	4c 4e 3d	jmp $3d4e			jmp 	_SCCompareLoop
.3d5e					_SCSameToEndShortest
.3d5e	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3d60	38		sec				sec
.3d61	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d63	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3d65					_SCReturnResult:
.3d65	08		php				php 								; set return to zero preserving PSW.
.3d66	a2 00		ldx #$00			ldx 	#0
.3d68	28		plp				plp
.3d69	f0 05		beq $3d70			beq 	_SCExit 					; two values equal, then exit
.3d6b	ca		dex				dex 								; X = $FF
.3d6c	90 02		bcc $3d70			bcc 	_SCExit 					; if 1st < 2nd then -1
.3d6e	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3d70					_SCExit:
.3d70	68		pla				pla
.3d71	a8		tay				tay
.3d72	68		pla				pla
.3d73	60		rts				rts
.3d74					CopyStringPair:
.3d74	b5 99		lda $99,x			lda 	esInt0+1,x
.3d76	85 2c		sta $2c				sta 	temp1
.3d78	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3d7a	85 2d		sta $2d				sta 	temp1+1
.3d7c					CopyStringTop:
.3d7c	b5 98		lda $98,x			lda 	esInt0,x
.3d7e	85 2a		sta $2a				sta 	temp0
.3d80	b5 a0		lda $a0,x			lda 	esInt1,x
.3d82	85 2b		sta $2b				sta 	temp0+1
.3d84	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3d85					StringConcat:
.3d85	aa		tax				tax									; stack pos in X
.3d86	98		tya				tya
.3d87	48		pha				pha
.3d88	20 74 3d	jsr $3d74			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3d8b	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3d8c	a0 00		ldy #$00			ldy 	#0
.3d8e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d90	71 2c		adc ($2c),y			adc 	(temp1),y
.3d92	b0 1c		bcs $3db0			bcs 	_SCError 					; just too many characters here.
.3d94	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3d96	b0 18		bcs $3db0			bcs 	_SCError
.3d98	20 d4 3d	jsr $3dd4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d9b	20 cb 3d	jsr $3dcb			jsr 	CopySoftToStack 			; copy that to the stack.
.3d9e	20 b5 3d	jsr $3db5			jsr 	SCCopyTemp0 				; copy temp0
.3da1	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3da3	85 2a		sta $2a				sta 	temp0
.3da5	a5 2d		lda $2d				lda 	temp1+1
.3da7	85 2b		sta $2b				sta 	temp0+1
.3da9	20 b5 3d	jsr $3db5			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3dac	68		pla				pla
.3dad	a8		tay				tay
.3dae	8a		txa				txa 								; and A
.3daf	60		rts				rts
.3db0					_SCError:
.3db0	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3db2	20 18 15	jsr $1518		jsr	errorHandler
.3db5					SCCopyTemp0:
.3db5	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3db7	b1 2a		lda ($2a),y			lda 	(temp0),y
.3db9	85 2e		sta $2e				sta 	temp2
.3dbb					_SCCopyLoop:
.3dbb	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3dbd	f0 0b		beq $3dca			beq 	_SCCopyExit
.3dbf	c6 2e		dec $2e				dec 	temp2
.3dc1	c8		iny				iny 								; get next char
.3dc2	b1 2a		lda ($2a),y			lda 	(temp0),y
.3dc4	20 fa 3d	jsr $3dfa			jsr 	WriteSoftString 			; write to soft string.
.3dc7	4c bb 3d	jmp $3dbb			jmp 	_SCCopyLoop
.3dca					_SCCopyExit:
.3dca	60		rts				rts
.3dcb					CopySoftToStack:
.3dcb	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3dcd	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3dcf	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3dd1	95 a0		sta $a0,x			sta 	esInt1,x
.3dd3	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3dd4					AllocateSoftString:
.3dd4	85 32		sta $32				sta 	tempShort 					; save count
.3dd6	98		tya				tya
.3dd7	48		pha				pha
.3dd8	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3dda	d0 09		bne $3de5			bne 	_ASSDone
.3ddc	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3dde	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3de0	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3de2	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3de3	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3de5					_ASSDone:
.3de5	38		sec				sec 								; allocate downwards enough memory
.3de6	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3de8	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3dea	85 39		sta $39				sta 	softMemAlloc
.3dec	a5 3a		lda $3a				lda 	softMemAlloc+1
.3dee	e9 00		sbc #$00			sbc 	#0
.3df0	85 3a		sta $3a				sta 	softMemAlloc+1
.3df2	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3df4	a8		tay				tay
.3df5	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3df7	68		pla				pla
.3df8	a8		tay				tay
.3df9	60		rts				rts
.3dfa					WriteSoftString:
.3dfa	84 32		sty $32				sty 	tempShort 					; save Y
.3dfc	48		pha				pha 								; save character on stack
.3dfd	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3dff	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3e01	18		clc				clc
.3e02	69 01		adc #$01			adc 	#1
.3e04	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3e06	a8		tay				tay 								; offset in Y
.3e07	68		pla				pla 								; get char and write.
.3e08	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3e0a	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3e0c	60		rts				rts
.3e0d					StrClone:
.3e0d	aa		tax				tax 								; set up stack.
.3e0e	98		tya				tya
.3e0f	48		pha				pha
.3e10	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3e12	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3e14	18		clc				clc
.3e15	69 01		adc #$01			adc 	#1
.3e17	20 d4 3d	jsr $3dd4			jsr 	AllocateSoftString 			; allocate soft memory
.3e1a	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3e1c	95 98		sta $98,x			sta 	esInt0,x
.3e1e	a5 3a		lda $3a				lda 	softMemAlloc+1
.3e20	95 a0		sta $a0,x			sta 	esInt1,x
.3e22	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3e24	95 a8		sta $a8,x			sta 	esInt2,x
.3e26	95 b0		sta $b0,x			sta 	esInt3,x
.3e28	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3e2a	95 90		sta $90,x			sta 	esType,x
.3e2c	20 b5 3d	jsr $3db5			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3e2f	68		pla				pla
.3e30	a8		tay				tay
.3e31	8a		txa				txa
.3e32	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3e33					CaseString:
.3e33	48		pha				pha 								; save A and copy to X
.3e34	aa		tax				tax
.3e35	98		tya				tya
.3e36	48		pha				pha
.3e37	20 7c 3d	jsr $3d7c			jsr 	CopyStringTop 				; target string -> temp0
.3e3a	a0 00		ldy #$00			ldy 	#0
.3e3c	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3e3e	18		clc				clc
.3e3f	69 01		adc #$01			adc 	#1 							; one more for length byte
.3e41	20 d4 3d	jsr $3dd4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3e44	20 cb 3d	jsr $3dcb			jsr 	CopySoftToStack 			; copy that to the stack.
.3e47	a0 00		ldy #$00			ldy 	#0
.3e49	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3e4b	aa		tax				tax
.3e4c					_CSCopy:
.3e4c	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3e4e	f0 24		beq $3e74			beq 	_CSExit
.3e50	ca		dex				dex
.3e51	c8		iny				iny
.3e52	68		pla				pla 								; check direction
.3e53	48		pha				pha
.3e54	f0 0c		beq $3e62			beq 	_CSUpper
.3e56	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3e58	c9 41		cmp #$41			cmp 	#"A"
.3e5a	90 12		bcc $3e6e			bcc 	_CSWrite
.3e5c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3e5e	b0 0e		bcs $3e6e			bcs 	_CSWrite
.3e60	90 0a		bcc $3e6c			bcc 	_CSFlipWrite
.3e62					_CSUpper:
.3e62	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3e64	c9 61		cmp #$61			cmp 	#"a"
.3e66	90 06		bcc $3e6e			bcc 	_CSWrite
.3e68	c9 7b		cmp #$7b			cmp 	#"z"+1
.3e6a	b0 02		bcs $3e6e			bcs 	_CSWrite
.3e6c					_CSFlipWrite:
.3e6c	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3e6e					_CSWrite:
.3e6e	20 fa 3d	jsr $3dfa			jsr 	WriteSoftString 			; add to soft string.
.3e71	4c 4c 3e	jmp $3e4c			jmp 	_CSCopy
.3e74					_CSExit:
.3e74	68		pla				pla
.3e75	a8		tay				tay
.3e76	68		pla				pla
.3e77	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3e78					StringSubstring:
.3e78	48		pha				pha
.3e79	aa		tax				tax 								; access stack.
.3e7a	98		tya				tya
.3e7b	48		pha				pha
.3e7c	20 7c 3d	jsr $3d7c			jsr 	CopyStringTop 				; point temp0 to the string.
.3e7f	a0 00		ldy #$00			ldy 	#0 							; get length.
.3e81	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3e83	85 2c		sta $2c				sta 	temp1
.3e85	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3e87	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3e89	f0 02		beq $3e8d			beq 	_SSBOkay
.3e8b	b0 2a		bcs $3eb7			bcs 	_SSBReturnNull
.3e8d					_SSBOkay:
.3e8d	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3e8f	18		clc				clc
.3e90	69 01		adc #$01			adc 	#1
.3e92	38		sec				sec
.3e93	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3e95	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3e97	90 02		bcc $3e9b			bcc		_SSBTrunc
.3e99	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3e9b					_SSBTrunc:
.3e9b	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3e9d	18		clc				clc
.3e9e	69 01		adc #$01			adc 	#1 							; add 1
.3ea0	20 d4 3d	jsr $3dd4			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3ea3	20 cb 3d	jsr $3dcb			jsr 	CopySoftToStack 			; copy that to the stack.
.3ea6	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3ea8					_SSBCopyLoop:
.3ea8	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3eaa	f0 0e		beq $3eba			beq 	_SSBExit
.3eac	c6 2d		dec $2d				dec 	temp1+1
.3eae	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3eb0	20 fa 3d	jsr $3dfa			jsr 	WriteSoftString
.3eb3	c8		iny				iny
.3eb4	4c a8 3e	jmp $3ea8			jmp 	_SSBCopyLoop
.3eb7					_SSBReturnNull:
.3eb7	20 be 3e	jsr $3ebe			jsr 	ReturnNull
.3eba					_SSBExit:
.3eba	68		pla				pla
.3ebb	a8		tay				tay
.3ebc	68		pla				pla
.3ebd	60		rts				rts
.3ebe					ReturnNull:
.3ebe	a9 00		lda #$00			lda 	#0 							; clear null string
.3ec0	8d ce 0a	sta $0ace			sta 	NullString
.3ec3	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3ec5	95 98		sta $98,x			sta 	esInt0,x
.3ec7	a9 0a		lda #$0a			lda 	#NullString >> 8
.3ec9	95 a0		sta $a0,x			sta 	esInt1,x
.3ecb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d11					srcStrLen:
>0d11							.fill 	1
.3ecc					StringWrite:
.3ecc	aa		tax				tax
.3ecd	48		pha				pha
.3ece	98		tya				tya
.3ecf	48		pha				pha
.3ed0	20 f7 3e	jsr $3ef7			jsr 	CheckOverwriteCurrent
.3ed3	b0 0d		bcs $3ee2			bcs		_SWCopyCurrent
.3ed5	20 35 3f	jsr $3f35			jsr 	RequiresConcretion
.3ed8	90 0e		bcc $3ee8			bcc 	_SWWriteReference
.3eda	20 98 3f	jsr $3f98			jsr 	CheckSpecialConcretion
.3edd	b0 09		bcs $3ee8			bcs 	_SWWriteReference
.3edf	20 49 3f	jsr $3f49			jsr 	AllocateHardMemory
.3ee2					_SWCopyCurrent:
.3ee2	20 7c 3f	jsr $3f7c			jsr 	CopyStringToHardMemory
.3ee5	4c f3 3e	jmp $3ef3			jmp 	_SWExit
.3ee8					_SWWriteReference
.3ee8	a0 00		ldy #$00			ldy 	#0
.3eea	a5 2a		lda $2a				lda 	temp0
.3eec	91 2c		sta ($2c),y			sta 	(temp1),y
.3eee	c8		iny				iny
.3eef	a5 2b		lda $2b				lda 	temp0+1
.3ef1	91 2c		sta ($2c),y			sta 	(temp1),y
.3ef3					_SWExit:
.3ef3	68		pla				pla
.3ef4	a8		tay				tay
.3ef5	68		pla				pla
.3ef6	60		rts				rts
.3ef7					CheckOverwriteCurrent:
.3ef7	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3ef9	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3efb	85 2b		sta $2b				sta 	temp0+1
.3efd	b5 99		lda $99,x			lda 	esInt0+1,x
.3eff	85 2a		sta $2a				sta 	temp0
.3f01	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3f03	8d 11 0d	sta $0d11			sta 	srcStrLen
.3f06	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3f08	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3f0a	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3f0c	85 2d		sta $2d				sta 	temp1+1
.3f0e	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3f10	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f12	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3f14	90 1b		bcc $3f31			bcc 	_COCFail 				; in hard memory.
.3f16	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3f18	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3f1a	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3f1c	85 2e		sta $2e				sta 	temp2
.3f1e	c8		iny				iny
.3f1f	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f21	e9 00		sbc #$00			sbc 	#0
.3f23	85 2f		sta $2f				sta 	temp2+1
.3f25	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3f27	b1 2e		lda ($2e),y			lda 	(temp2),y
.3f29	38		sec				sec  							; maximum character capacity.
.3f2a	e9 02		sbc #$02			sbc 	#2
.3f2c	cd 11 0d	cmp $0d11			cmp 	srcStrLen 				; if >= the required length
.3f2f	b0 02		bcs $3f33			bcs 	_COCCanReuse
.3f31					_COCFail:
.3f31	18		clc				clc
.3f32	60		rts				rts
.3f33					_COCCanReuse:
.3f33	38		sec				sec
.3f34	60		rts				rts
.3f35					RequiresConcretion:
.3f35	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3f37	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3f39	b0 0a		bcs $3f45			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3f3b	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3f3d	f0 08		beq $3f47			beq 	_RCFail 				; if not, this cannot be soft memory.
.3f3f	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3f41	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3f43	90 02		bcc $3f47			bcc 	_RCFail 				; so concreting
.3f45					_RCSucceed:
.3f45	38		sec				sec
.3f46	60		rts				rts
.3f47					_RCFail:
.3f47	18		clc				clc
.3f48	60		rts				rts
.3f49					AllocateHardMemory:
.3f49	98		tya				tya
.3f4a	48		pha				pha
.3f4b	ad 11 0d	lda $0d11			lda 	srcStrLen 				; characters in string
.3f4e	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3f50	b0 04		bcs $3f56			bcs 	_AHMSetMax 				; max out that amount.
.3f52	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3f54	90 02		bcc $3f58			bcc 	_AHMIsOkay
.3f56					_AHMSetMax:
.3f56	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3f58					_AHMIsOkay:
.3f58	48		pha				pha	 							; save size to be allocated
.3f59	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3f5b	38		sec				sec  							; and copy result to TOS as target address.
.3f5c	65 33		adc $33				adc 	highMemory
.3f5e	85 33		sta $33				sta 	highMemory
.3f60	a5 34		lda $34				lda 	highMemory+1
.3f62	69 ff		adc #$ff			adc 	#$FF
.3f64	85 34		sta $34				sta 	highMemory+1
.3f66	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3f68	68		pla				pla 							; get the total size of the storage block
.3f69	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3f6b	18		clc				clc
.3f6c	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3f6e	69 01		adc #$01			adc 	#1
.3f70	91 2c		sta ($2c),y			sta 	(temp1),y
.3f72	a5 34		lda $34				lda 	highMemory+1
.3f74	69 00		adc #$00			adc 	#0
.3f76	c8		iny				iny
.3f77	91 2c		sta ($2c),y			sta 	(temp1),y
.3f79	68		pla				pla
.3f7a	a8		tay				tay
.3f7b	60		rts				rts
.3f7c					CopyStringToHardMemory:
.3f7c	98		tya				tya
.3f7d	48		pha				pha
.3f7e	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3f80	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f82	85 2e		sta $2e				sta 	temp2
.3f84	c8		iny				iny
.3f85	b1 2c		lda ($2c),y			lda 	(temp1),y
.3f87	85 2f		sta $2f				sta 	temp2+1
.3f89	ac 11 0d	ldy $0d11			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3f8c					_CSTHMLoop:
.3f8c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f8e	91 2e		sta ($2e),y			sta 	(temp2),y
.3f90	88		dey				dey
.3f91	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3f93	d0 f7		bne $3f8c			bne 	_CSTHMLoop
.3f95	68		pla				pla
.3f96	a8		tay				tay
.3f97	60		rts				rts
.3f98					CheckSpecialConcretion:
.3f98	ad 11 0d	lda $0d11			lda 	srcStrLen 				; check string is null e.g. length = 0
.3f9b	f0 02		beq $3f9f			beq 	_CSCNullString
.3f9d	18		clc				clc
.3f9e	60		rts				rts
.3f9f					_CSCNullString:
.3f9f	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3fa1	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3fa4	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3fa6	85 2a		sta $2a				sta 	temp0
.3fa8	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3faa	85 2b		sta $2b				sta 	1+(temp0)
.3fac	38		sec				sec
.3fad	60		rts				rts

;******  Return to file: string/string.asm

.3fae					stringHandler:
.3fae	7c b1 3f	jmp ($3fb1,x)			jmp 	(stringVectors,x)
.3fb1					stringVectors:
>3fb1	c3 3f					.word _DummyControlHandler ; index 0
>3fb3	11 3d					.word StringChrs           ; index 2
>3fb5	0d 3e					.word StrClone             ; index 4
>3fb7	85 3d					.word StringConcat         ; index 6
>3fb9	20 3d					.word StringNull           ; index 8
>3fbb	3c 3d					.word STRCompare           ; index 10
>3fbd	33 3e					.word CaseString           ; index 12
>3fbf	78 3e					.word StringSubstring      ; index 14
>3fc1	cc 3e					.word StringWrite          ; index 16
.3fc3					_DummyControlHandler:
.3fc3	60		rts			rts

;******  Return to file: basic.asm

.3fc4					section_end_string:
.3fc4					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d12					deTokeniseVector:
>0d12							.fill 	2
.0d14					lastCharacterClass:
>0d14							.fill 	1
.0d15					indent:
>0d15							.fill 	1
.3fc4					ListLine:
.3fc4	48		pha				pha								; enter here to list to console. sets the output vector
.3fc5	a9 fc		lda #$fc			lda 	#(deTokenPrint) & $FF
.3fc7	8d 12 0d	sta $0d12			sta 	deTokeniseVector
.3fca	a9 40		lda #$40			lda 	#(deTokenPrint) >> 8
.3fcc	8d 13 0d	sta $0d13			sta 	1+(deTokeniseVector)
.3fcf	68		pla				pla
.3fd0					Detokenise:
.3fd0	18		clc				clc 							; space required for line number.
.3fd1	69 06		adc #$06			adc 	#6
.3fd3	8d 15 0d	sta $0d15			sta 	indent
.3fd6	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3fd8	8d 14 0d	sta $0d14			sta 	lastCharacterClass
.3fdb	a2 02		ldx #$02			ldx 	#2
.3fdd	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3fdf	95 a8		sta $a8,x			sta 	esInt2,x
.3fe1	95 b0		sta $b0,x			sta 	esInt3,x
.3fe3	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3fe5	b1 28		lda ($28),y			lda 	(codePtr),y
.3fe7	95 98		sta $98,x			sta 	esInt0,x
.3fe9	c8		iny				iny
.3fea	b1 28		lda ($28),y			lda 	(codePtr),y
.3fec	95 a0		sta $a0,x			sta 	esInt1,x
.3fee	a9 84		lda #$84			lda 	#LTYLineNumber
.3ff0	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.3ff3	a9 0a		lda #$0a			lda 	#10 					; base 10
.3ff5	20 9b 40	jsr $409b			jsr 	DTPrintInteger 			; print as integer.
.3ff8	a0 00		ldy #$00			ldy 	#0 						; get length
.3ffa	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3ffc	aa		tax				tax
.3ffd					_DTPadOut:
.3ffd	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3fff	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4002	e8		inx				inx
.4003	ec 15 0d	cpx $0d15			cpx 	indent
.4006	d0 f5		bne $3ffd			bne 	_DTPadOut
.4008	a0 03		ldy #$03			ldy 	#3 						; start position.
.400a					_DTListLoop:
.400a	b1 28		lda ($28),y			lda 	(codePtr),y
.400c	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.400e	f0 5e		beq $406e			beq 	_DTIsString
.4010	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.4012	f0 56		beq $406a			beq 	_DTIsFloat
.4014	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.4016	f0 16		beq $402e			beq 	_DTHexConstant
.4018	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.401a	d0 06		bne $4022			bne 	_DTNotEnd
.401c	a9 ff		lda #$ff			lda 	#255 					; print CR
.401e	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4021	60		rts				rts
.4022					_DTNotEnd:
.4022	c9 00		cmp #$00			cmp 	#0
.4024	30 38		bmi $405e			bmi 	_DTIsToken
.4026	c9 40		cmp #$40			cmp 	#$40
.4028	90 3a		bcc $4064			bcc 	_DTIsIdentifier
.402a	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.402c	d0 0d		bne $403b			bne 	_DTConstant
.402e					_DTHexConstant:
.402e	a9 26		lda #$26			lda 	#"&"
.4030	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4033	c8		iny				iny
.4034	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.4036	20 18 41	jsr $4118			jsr 	DTSwitchMode
.4039	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.403b					_DTConstant:
.403b	48		pha				pha
.403c	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.403e	20 18 41	jsr $4118			jsr 	DTSwitchMode
.4041	a9 86		lda #$86			lda 	#LTYConstant
.4043	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4046	a2 02		ldx #$02			ldx 	#2 						; get its value
.4048	8a		txa				txa
.4049	a2 10		ldx #$10		ldx	#16
.404b	20 f1 3c	jsr $3cf1		jsr	mainHandler
.404e	aa		tax				tax
.404f	68		pla				pla 							; get base back
.4050	85 32		sta $32				sta 	tempShort
.4052	98		tya				tya
.4053	48		pha				pha
.4054	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.4056	20 9b 40	jsr $409b			jsr 	DTPrintInteger
.4059	68		pla				pla
.405a	a8		tay				tay
.405b	4c 0a 40	jmp $400a			jmp 	_DTListLoop
.405e					_DTIsToken:
.405e	20 71 41	jsr $4171			jsr 	DTDecodeToken
.4061	4c 0a 40	jmp $400a			jmp 	_DTListLoop
.4064					_DTIsIdentifier:
.4064	20 2a 41	jsr $412a			jsr 	DTIdentifier
.4067	4c 0a 40	jmp $400a			jmp 	_DTListLoop
.406a					_DTIsFloat:
>406a	db						.byte 	$DB
.406b	4c 6a 40	jmp $406a			jmp 	_DTIsFloat
.406e					_DTIsString:
.406e	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4070	20 18 41	jsr $4118			jsr 	DTSwitchMode
.4073	a9 81		lda #$81			lda 	#LTYString
.4075	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4078	a9 22		lda #$22			lda 	#'"'						; open quote
.407a	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.407d	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.407f	8a		txa				txa
.4080	a2 10		ldx #$10		ldx	#16
.4082	20 f1 3c	jsr $3cf1		jsr	mainHandler
.4085	aa		tax				tax
.4086	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.4088	85 2a		sta $2a				sta 	temp0
.408a	b5 a0		lda $a0,x			lda 	esInt1,x
.408c	85 2b		sta $2b				sta 	temp0+1
.408e	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.4090	20 ad 40	jsr $40ad			jsr 	DTPrintLengthPrefix
.4093	a9 22		lda #$22			lda 	#'"'
.4095	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4098	4c 0a 40	jmp $400a			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d16					tPrintCount:
>0d16							.fill 	1
.409b					DTPrintInteger:
.409b	48		pha				pha									; save base
.409c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.409e	85 2a		sta $2a				sta 	temp0
.40a0	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.40a2	85 2b		sta $2b				sta 	1+(temp0)
.40a4	68		pla				pla
.40a5	a8		tay				tay
.40a6	8a		txa				txa
.40a7	a2 12		ldx #$12		ldx	#18
.40a9	20 f1 3c	jsr $3cf1		jsr	mainHandler
.40ac	aa		tax				tax 								; then drop through here.
.40ad					DTPrintLengthPrefix:
.40ad	aa		tax				tax 								; A = 0 = don't case convert.
.40ae	98		tya				tya
.40af	48		pha				pha
.40b0	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.40b2	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b4	8d 16 0d	sta $0d16			sta 	tPrintCount
.40b7	f0 1b		beq $40d4			beq 	_DTPLPExit 					; empty string
.40b9					_DTPLPLoop:
.40b9	c8		iny				iny 								; get next.
.40ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.40bc	29 7f		and #$7f			and 	#$7F
.40be	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.40c0	f0 0a		beq $40cc			beq 	_DTPLPNoCase
.40c2	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.40c4	90 06		bcc $40cc			bcc 	_DTPLPNoCase
.40c6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40c8	b0 02		bcs $40cc			bcs 	_DTPLPNoCase
.40ca	49 20		eor #$20			eor 	#"A"^"a"
.40cc					_DTPLPNoCase
.40cc	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter 		; call handler
.40cf	ce 16 0d	dec $0d16			dec 	tPrintCount 				; do all the characters
.40d2	d0 e5		bne $40b9			bne 	_DTPLPLoop
.40d4					_DTPLPExit:
.40d4	68		pla				pla
.40d5	a8		tay				tay
.40d6	60		rts				rts
.40d7					ListOutputCharacter:
.40d7	85 32		sta $32				sta 	tempShort
.40d9	48		pha				pha
.40da	8a		txa				txa
.40db	48		pha				pha
.40dc	98		tya				tya
.40dd	48		pha				pha
.40de	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.40e0	c9 20		cmp #$20			cmp 	#32
.40e2	b0 0c		bcs $40f0			bcs		_LOCHiBit
.40e4	09 40		ora #$40			ora 	#64 						; conversion
.40e6	c9 40		cmp #$40			cmp 	#64							; make l/c
.40e8	f0 06		beq $40f0			beq 	_LOCHiBit
.40ea	c9 5b		cmp #$5b			cmp 	#65+26
.40ec	b0 02		bcs $40f0			bcs 	_LOCHiBit
.40ee	69 20		adc #$20			adc 	#32
.40f0					_LOCHiBit:
.40f0	20 f9 40	jsr $40f9			jsr 	_LOCCallVector				; call o/p handler routine
.40f3	68		pla				pla
.40f4	a8		tay				tay
.40f5	68		pla				pla
.40f6	aa		tax				tax
.40f7	68		pla				pla
.40f8					_LOCExit:
.40f8	60		rts				rts
.40f9					_LOCCallVector:
.40f9	6c 12 0d	jmp ($0d12)			jmp 	(deTokeniseVector)
.40fc					deTokenPrint:
.40fc	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.40fe	30 06		bmi $4106			bmi 	_dtpInk
.4100	a2 16		ldx #$16		ldx	#22
.4102	20 f6 14	jsr $14f6		jsr	deviceHandler
.4105	60		rts				rts
.4106	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4108	f0 08		beq $4112			beq 	_dtpCR						; except $FF => CRLF
.410a	29 07		and #$07			and 	#7
.410c	a2 08		ldx #$08		ldx	#8
.410e	20 f6 14	jsr $14f6		jsr	deviceHandler
.4111	60		rts				rts
.4112					_dtpCR:
.4112	a2 06		ldx #$06		ldx	#6
.4114	20 f6 14	jsr $14f6		jsr	deviceHandler
.4117	60		rts				rts
.4118					DTSwitchMode:
.4118	cd 14 0d	cmp $0d14			cmp 	LastCharacterClass 			; if changed, update character class
.411b	f0 04		beq $4121			beq 	_DTSMNoChange
.411d	8d 14 0d	sta $0d14			sta 	LastCharacterClass
.4120					_DTSMExit:
.4120	60		rts				rts
.4121					_DTSMNoChange:
.4121	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.4123	f0 fb		beq $4120			beq 	_DTSMExit 					; need a space.
.4125	a9 20		lda #$20			lda 	#" "
.4127	4c d7 40	jmp $40d7			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.412a					DTIdentifier:
.412a	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.412c	20 18 41	jsr $4118			jsr 	DTSwitchMode
.412f	a9 87		lda #$87			lda 	#LTYIdentifier
.4131	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4134					_DTILoop:
.4134	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.4136	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4138	d0 02		bne $413c			bne 	_DTINotUS
.413a	a9 5f		lda #$5f			lda 	#"_"
.413c					_DTINotUS:
.413c	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.413f	c8		iny				iny
.4140	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4142	c9 3a		cmp #$3a			cmp 	#$3A
.4144	90 ee		bcc $4134			bcc 	_DTILoop
.4146	c8		iny				iny
.4147	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4149	f0 25		beq $4170			beq 	_DTIExit 					; no postfix.
.414b	48		pha				pha
.414c	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.414e	8d 14 0d	sta $0d14			sta 	LastCharacterClass
.4151	a9 82		lda #$82			lda 	#LTYPunctuation
.4153	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4156	68		pla				pla
.4157	c9 3b		cmp #$3b			cmp 	#$3B
.4159	f0 10		beq $416b			beq 	_DTIArray
.415b	4a		lsr a				lsr 	a 							; array flag in C
.415c	08		php				php
.415d	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.415f	f0 02		beq $4163			beq 	_DTIDollar
.4161	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.4163					_DTIDollar:
.4163	49 24		eor #$24			eor 	#"$"
.4165	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4168	28		plp				plp
.4169	90 05		bcc $4170			bcc 	_DTIExit
.416b					_DTIArray:
.416b	a9 28		lda #$28			lda 	#"("
.416d	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.4170					_DTIExit:
.4170	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4171					DTDecodeToken:
.4171	a2 00		ldx #$00			ldx 	#0 							; table number to use
.4173	b1 28		lda ($28),y			lda 	(codePtr),y
.4175	c9 84		cmp #$84			cmp 	#$84
.4177	b0 05		bcs $417e			bcs 	_DTNotShift
.4179	29 03		and #$03			and 	#3 							; get the shift 1..3
.417b	0a		asl a				asl 	a 							; put 2 x in X
.417c	aa		tax				tax
.417d	c8		iny				iny
.417e					_DTNotShift:
.417e	bd 80 44	lda $4480,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.4181	85 2a		sta $2a				sta 	temp0 						; point into temp0
.4183	bd 81 44	lda $4481,x			lda 	TokenTableAddress+1,x
.4186	85 2b		sta $2b				sta 	temp0+1
.4188	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.418a	c8		iny				iny 								; consume it.
.418b	aa		tax				tax
.418c	98		tya				tya
.418d	48		pha				pha
.418e					_DTFindText:
.418e	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4190	f0 11		beq $41a3			beq 	_DTFoundText
.4192	ca		dex				dex
.4193	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.4195	38		sec				sec
.4196	b1 2a		lda ($2a),y			lda 	(temp0),y
.4198	65 2a		adc $2a				adc 	temp0
.419a	85 2a		sta $2a				sta 	temp0
.419c	90 f0		bcc $418e			bcc 	_DTFindText
.419e	e6 2b		inc $2b				inc 	temp0+1
.41a0	4c 8e 41	jmp $418e			jmp 	_DTFindText
.41a3					_DTFoundText:
.41a3	a0 01		ldy #$01			ldy 	#1 							; get first character
.41a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.41a7	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.41a9	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.41ab	90 11		bcc $41be			bcc 	_DTIsPunctuation
.41ad	c9 5b		cmp #$5b			cmp 	#"Z"+1
.41af	b0 0d		bcs $41be			bcs 	_DTIsPunctuation
.41b1	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.41b3	20 18 41	jsr $4118			jsr 	DTSwitchMode
.41b6	a9 83		lda #$83			lda 	#LTYKeyword
.41b8	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.41bb	4c c8 41	jmp $41c8			jmp 	_DTPrint
.41be					_DTIsPunctuation:
.41be	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.41c0	20 18 41	jsr $4118			jsr 	DTSwitchMode
.41c3	a9 82		lda #$82			lda 	#LTYPunctuation
.41c5	20 d7 40	jsr $40d7			jsr 	ListOutputCharacter
.41c8					_DTPrint:
.41c8	a9 01		lda #$01			lda 	#1 							; fix case.
.41ca	20 ad 40	jsr $40ad			jsr 	DTPrintLengthPrefix 		; print it out.
.41cd	a0 00		ldy #$00			ldy 	#0
.41cf	b1 2a		lda ($2a),y			lda 	(temp0),y
.41d1	a8		tay				tay
.41d2	b1 2a		lda ($2a),y			lda 	(temp0),y
.41d4	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.41d6	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.41d8	90 04		bcc $41de			bcc 	_DTIsNowPunctuation
.41da	c9 5b		cmp #$5b			cmp 	#"Z"+1
.41dc	90 05		bcc $41e3			bcc 	_DTPExit
.41de					_DTIsNowPunctuation:
.41de	a9 01		lda #$01			lda 	#1
.41e0	8d 14 0d	sta $0d14			sta		LastCharacterClass
.41e3					_DTPExit:
.41e3	68		pla				pla
.41e4	a8		tay				tay
.41e5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d17					currentSet:
>0d17							.fill 	1
.41e6					TokenSearch:
.41e6	8a		txa				txa
.41e7	48		pha				pha
.41e8	98		tya				tya
.41e9	48		pha				pha
.41ea	a9 00		lda #$00			lda 	#0
.41ec	8d 17 0d	sta $0d17			sta 	currentSet
.41ef					_TSLoop:
.41ef	ad 17 0d	lda $0d17			lda 	currentSet 					; 2 x currentset in X
.41f2	0a		asl a				asl 	a
.41f3	aa		tax				tax
.41f4	bd 80 44	lda $4480,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.41f7	85 2a		sta $2a				sta 	temp0
.41f9	bd 81 44	lda $4481,x			lda 	TokenTableAddress+1,x
.41fc	85 2b		sta $2b				sta 	temp0+1
.41fe	20 25 42	jsr $4225			jsr 	TokenSearchOne 				; search one table
.4201	b0 0d		bcs $4210			bcs 	_TSFound 					; found a token.
.4203	ee 17 0d	inc $0d17			inc 	currentSet 					; next set
.4206	ad 17 0d	lda $0d17			lda 	currentSet
.4209	c9 04		cmp #$04			cmp 	#4
.420b	d0 e2		bne $41ef			bne 	_TSLoop 					; back if not done all four.
.420d	18		clc				clc 								; clear carry and exit
.420e	90 10		bcc $4220			bcc 	_TSExit
.4210					_TSFound:
.4210	48		pha				pha 								; save token
.4211	ad 17 0d	lda $0d17			lda 	currentSet					; if set zero no shift
.4214	f0 05		beq $421b			beq 	_TSNoShift
.4216	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4218	20 d6 42	jsr $42d6			jsr 	TokenWrite
.421b					_TSNoShift:
.421b	68		pla				pla 								; get token back
.421c	20 d6 42	jsr $42d6			jsr 	TokenWrite 					; write it
.421f	38		sec				sec 								; carry set indicating success
.4220					_TSExit:
.4220	68		pla				pla
.4221	a8		tay				tay
.4222	68		pla				pla
.4223	aa		tax				tax
.4224	60		rts				rts
.4225					TokenSearchOne:
.4225	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4227					_TSOLoop:
.4227	a0 00		ldy #$00			ldy 	#0
.4229	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.422b	f0 26		beq $4253			beq 	_TSOFail 					; if zero, end of table
.422d	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4230	f0 11		beq $4243			beq 	_TSOCheckText
.4232					_TSONext:
.4232	e8		inx				inx 								; bump token
.4233	a0 00		ldy #$00			ldy 	#0							; get length
.4235	b1 2a		lda ($2a),y			lda 	(temp0),y
.4237	38		sec				sec
.4238	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.423a	85 2a		sta $2a				sta 	temp0
.423c	90 e9		bcc $4227			bcc 	_TSOLoop
.423e	e6 2b		inc $2b				inc 	temp0+1
.4240	4c 27 42	jmp $4227			jmp 	_TSOLoop
.4243					_TSOCheckText:
.4243	a8		tay				tay 								; compare length downto 1.
.4244					_TSOCheckLoop:
.4244	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.4246	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4249	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.424b	d0 e5		bne $4232			bne 	_TSONext 					; different goto next.
.424d	88		dey				dey 								; do all
.424e	d0 f4		bne $4244			bne 	_TSOCheckLoop
.4250	8a		txa				txa 								; return token in A and carry set
.4251	38		sec				sec
.4252	60		rts				rts
.4253					_TSOFail:
.4253	18		clc				clc
.4254	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.4255					TokTest:
.4255	a2 ff		ldx #$ff				ldx 	#$FF
.4257	9a		txs					txs
.4258	a9 75		lda #$75			lda 	#(TokenText1) & $FF
.425a	85 28		sta $28				sta 	codePtr
.425c	a9 42		lda #$42			lda 	#(TokenText1) >> 8
.425e	85 29		sta $29				sta 	1+(codePtr)
.4260	20 75 42	jsr $4275				jsr 	Tokenise
.4263	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.4265	bd 75 42	lda $4275,x	_TokCheck:	lda 	TokenBytes1,x
.4268	dd 1b 0d	cmp $0d1b,x				cmp 	tokenBuffer,x
.426b	d0 fe		bne $426b	_TokFail:	bne 	_TokFail	 		; error.
.426d	e8		inx					inx
.426e	c9 80		cmp #$80				cmp 	#$80
.4270	d0 f3		bne $4265				bne 	_TokCheck
.4272	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.4275					TokenText1:
.4275					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d18					tokenHeader:
>0d18							.fill 	3
.0d1b					tokenBuffer:
>0d1b							.fill 	256
.0e1b					tokenBufferIndex:
>0e1b							.fill 	1
.4275					Tokenise:
.4275	20 ef 42	jsr $42ef			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4278					TokeniseASCIIZ:
.4278	20 00 43	jsr $4300			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.427b	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.427d	8d 1b 0e	sta $0e1b			sta 	tokenBufferIndex
.4280	a8		tay				tay 								; start pointer
.4281	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.4283	8d 1b 0d	sta $0d1b			sta 	tokenBuffer
.4286					_TokLoop:
.4286	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4288	f0 46		beq $42d0			beq 	_TokExit 					; if zero, then exit.
.428a	c8		iny				iny 								; skip over spaces.
.428b	c9 20		cmp #$20			cmp 	#" "
.428d	f0 f7		beq $4286			beq 	_TokLoop
.428f	88		dey				dey 								; point back to character.
.4290	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.4292	f0 18		beq $42ac			beq 	_TokHexConst
.4294	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.4296	f0 23		beq $42bb			beq 	_TokQString
.4298	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.429a	b0 26		bcs $42c2			bcs 	_TokPunctuation
.429c	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.429e	b0 29		bcs $42c9			bcs 	_TokIdentifier
.42a0	c9 3a		cmp #$3a			cmp 	#"9"+1
.42a2	b0 1e		bcs $42c2			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.42a4	c9 30		cmp #$30			cmp 	#"0"
.42a6	90 1a		bcc $42c2			bcc 	_TokPunctuation 			; < 0, punctuation.
.42a8	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.42aa	d0 08		bne $42b4			bne 	_TokConst
.42ac					_TokHexConst:
.42ac	c8		iny				iny									; consume token.
.42ad	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.42af	20 d6 42	jsr $42d6			jsr 	TokenWrite
.42b2	a9 10		lda #$10			lda 	#16
.42b4					_TokConst:
.42b4	20 be 43	jsr $43be			jsr 	TokeniseInteger
.42b7	b0 cd		bcs $4286			bcs 	_TokLoop
.42b9	90 18		bcc $42d3			bcc 	_TokFail
.42bb					_TokQString:
.42bb	20 54 44	jsr $4454			jsr 	TokeniseString
.42be	b0 c6		bcs $4286			bcs 	_TokLoop
.42c0	90 11		bcc $42d3			bcc 	_TokFail
.42c2					_TokPunctuation:
.42c2	20 33 44	jsr $4433			jsr 	TokenisePunctuation
.42c5	b0 bf		bcs $4286			bcs 	_TokLoop
.42c7	90 0a		bcc $42d3			bcc 	_TokFail
.42c9					_TokIdentifier:
.42c9	20 2f 43	jsr $432f			jsr 	TokeniseIdentifier
.42cc	b0 b8		bcs $4286			bcs 	_TokLoop
.42ce	90 03		bcc $42d3			bcc 	_TokFail
.42d0					_TokExit:
.42d0	a9 01		lda #$01			lda 	#1
.42d2	60		rts				rts
.42d3					_TokFail:
.42d3	a9 00		lda #$00			lda 	#0
.42d5	60		rts				rts
.42d6					TokenWrite:
.42d6	85 32		sta $32				sta 	tempShort 					; save XA
.42d8	48		pha				pha
.42d9	8a		txa				txa
.42da	48		pha				pha
.42db	a5 32		lda $32				lda 	tempShort
.42dd	ae 1b 0e	ldx $0e1b			ldx 	tokenBufferIndex 			; geet index
.42e0	9d 1b 0d	sta $0d1b,x			sta 	tokenBuffer,x 				; write byte to buffer
.42e3	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.42e5	9d 1c 0d	sta $0d1c,x			sta 	tokenBuffer+1,x
.42e8	ee 1b 0e	inc $0e1b			inc 	tokenBufferIndex 			; bump index
.42eb	68		pla				pla
.42ec	aa		tax				tax
.42ed	68		pla				pla
.42ee	60		rts				rts
.42ef					TokeniseMakeASCIIZ:
.42ef	a0 00		ldy #$00			ldy 	#0							; get length of string.
.42f1	b1 28		lda ($28),y			lda 	(codePtr),y
.42f3	a8		tay				tay
.42f4	c8		iny				iny 								; +1, the NULL goes here.
.42f5	a9 00		lda #$00			lda 	#0
.42f7	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.42f9	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.42fb	d0 02		bne $42ff			bne 	_TMKAExit
.42fd	e6 29		inc $29				inc 	codePtr+1
.42ff					_TMKAExit:
.42ff	60		rts				rts
.4300					TokeniseFixCase:
.4300	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4302	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.4304					_TFCFlipQ:
.4304	8a		txa				txa
.4305	49 01		eor #$01			eor 	#1
.4307	aa		tax				tax
.4308					_TFCLoop:
.4308	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.430a	f0 22		beq $432e			beq 	_TFCExit 					; if zero exit.
.430c	c9 20		cmp #$20			cmp 	#32 						; if control
.430e	90 1a		bcc $432a			bcc 	_TFCControl
.4310	c8		iny				iny 								; preconsume
.4311	c9 22		cmp #$22			cmp 	#'"'
.4313	f0 ef		beq $4304			beq 	_TFCFlipQ
.4315	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4317	90 ef		bcc $4308			bcc 	_TFCLoop
.4319	c9 7b		cmp #$7b			cmp 	#"z"+1
.431b	b0 eb		bcs $4308			bcs 	_TFCLoop
.431d	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.431f	d0 e7		bne $4308			bne 	_TFCLoop
.4321	88		dey				dey
.4322	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4324					_TFCWrite:
.4324	91 28		sta ($28),y			sta 	(codePtr),y
.4326	c8		iny				iny
.4327	4c 08 43	jmp $4308			jmp 	_TFCLoop
.432a					_TFCControl:
.432a	a9 20		lda #$20			lda 	#" "
.432c	d0 f6		bne $4324			bne 	_TFCWrite
.432e					_TFCExit:
.432e	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.432f					TokeniseIdentifier:
.432f	a2 00		ldx #$00			ldx 	#0
.4331					_TICopyID:
.4331	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4333	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.4335	f0 16		beq $434d			beq 	_TICopyUnderscore
.4337	c9 2e		cmp #$2e			cmp 	#"."
.4339	f0 14		beq $434f			beq 	_TICopyIn
.433b	c9 30		cmp #$30			cmp 	#"0"
.433d	90 1b		bcc $435a			bcc 	_TIEndCopy
.433f	c9 3a		cmp #$3a			cmp 	#"9"+1
.4341	90 0c		bcc $434f			bcc 	_TICopyIn
.4343	c9 41		cmp #$41			cmp 	#"A"
.4345	90 13		bcc $435a			bcc 	_TIEndCopy
.4347	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4349	b0 0f		bcs $435a			bcs		_TIEndCopy
.434b	90 02		bcc $434f			bcc 	_TICopyIn
.434d					_TICopyUnderScore:
.434d	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.434f					_TICopyIn:
.434f	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4350	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4353	8e cf 0a	stx $0acf			stx 	convertBuffer
.4356	c8		iny				iny 								; next character
.4357	4c 31 43	jmp $4331			jmp 	_TICopyID 					; loop round
.435a					_TIEndCopy:
.435a	a9 24		lda #$24			lda 	#"$"
.435c	20 b1 43	jsr $43b1			jsr 	TIDCheckCopy
.435f	a9 23		lda #$23			lda 	#"#"
.4361	20 b1 43	jsr $43b1			jsr 	TIDCheckCopy
.4364	a9 28		lda #$28			lda 	#"("
.4366	20 b1 43	jsr $43b1			jsr 	TIDCheckCopy
.4369	20 e6 41	jsr $41e6			jsr 	TokenSearch 				; is it a token
.436c	b0 41		bcs $43af			bcs 	_TIExit 					; if so, then exit.
.436e	98		tya				tya
.436f	48		pha				pha
.4370	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4372	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.4375	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4378	c9 28		cmp #$28			cmp 	#"("
.437a	d0 02		bne $437e			bne 	_TINotArray
.437c	ca		dex				dex 								; yes, remove it and convert to array.
.437d	c8		iny				iny
.437e					_TINotArray:
.437e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4381	c9 24		cmp #$24			cmp 	#"$"
.4383	d0 03		bne $4388			bne 	_TINotString
.4385	ca		dex				dex
.4386	c8		iny				iny
.4387	c8		iny				iny
.4388					_TINotString:
.4388	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.438b	c9 23		cmp #$23			cmp 	#"#"
.438d	d0 05		bne $4394			bne 	_TINotFloat
.438f	ca		dex				dex
.4390	c8		iny				iny
.4391	c8		iny				iny
.4392	c8		iny				iny
.4393	c8		iny				iny
.4394					_TINotFloat:
.4394	e8		inx				inx 								; write end marker for identifier.
.4395	98		tya				tya
.4396	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4399	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.439c	a2 01		ldx #$01			ldx 	#1
.439e					_TIOutput:
.439e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.43a1	29 3f		and #$3f			and 	#$3F
.43a3	48		pha				pha
.43a4	20 d6 42	jsr $42d6			jsr 	TokenWrite
.43a7	e8		inx				inx
.43a8	68		pla				pla
.43a9	c9 3a		cmp #$3a			cmp 	#$3A
.43ab	90 f1		bcc $439e			bcc 	_TIOutput
.43ad	68		pla				pla
.43ae	a8		tay				tay
.43af					_TIExit:
.43af	38		sec				sec 								; this can't fail.
.43b0	60		rts				rts
.43b1					TIDCheckCopy:
.43b1	d1 28		cmp ($28),y			cmp 	(codePtr),y
.43b3	d0 08		bne $43bd			bne 	_TIDCCExit
.43b5	e8		inx				inx
.43b6	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.43b9	8e cf 0a	stx $0acf			stx 	convertBuffer
.43bc	c8		iny				iny
.43bd					_TIDCCExit:
.43bd	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.43be					TokeniseInteger:
.43be	85 2c		sta $2c				sta 	temp1 						; save base
.43c0	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.43c2	8e cf 0a	stx $0acf			stx 	convertBuffer
.43c5					_TIGetChars:
.43c5	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.43c7	c9 30		cmp #$30			cmp 	#"0"
.43c9	90 1f		bcc $43ea			bcc 	_TIEndGet
.43cb	c9 3a		cmp #$3a			cmp 	#"9"+1
.43cd	90 10		bcc $43df			bcc 	_TIHaveChar
.43cf	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.43d1	c9 0a		cmp #$0a			cmp 	#10
.43d3	f0 15		beq $43ea			beq 	_TIEndGet
.43d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.43d7	c9 41		cmp #$41			cmp 	#"A"
.43d9	90 0f		bcc $43ea			bcc 	_TIEndGet
.43db	c9 5b		cmp #$5b			cmp 	#"Z"+1
.43dd	b0 0b		bcs $43ea			bcs 	_TIEndGet
.43df					_TIHaveChar:
.43df	e8		inx				inx 								; write into buffer.
.43e0	8e cf 0a	stx $0acf			stx 	convertBuffer
.43e3	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.43e6	c8		iny				iny 								; next char
.43e7	4c c5 43	jmp $43c5			jmp 	_TIGetChars
.43ea					_TIEndGet:
.43ea	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.43ec	f0 1c		beq $440a			beq 	_TIFail
.43ee	98		tya				tya
.43ef	48		pha				pha
.43f0	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.43f2	85 2a		sta $2a				sta 	temp0
.43f4	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.43f6	85 2b		sta $2b				sta 	1+(temp0)
.43f8	a9 00		lda #$00			lda 	#0 							; stack level 0
.43fa	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.43fc	a2 1a		ldx #$1a		ldx	#26
.43fe	20 f1 3c	jsr $3cf1		jsr	mainHandler
.4401	68		pla				pla
.4402	a8		tay				tay
.4403	90 05		bcc $440a			bcc 	_TIFail 					; didn't convert.
.4405	20 0c 44	jsr $440c			jsr 	TIRecursiveOut 				; recursive output ?
.4408	38		sec				sec
.4409	60		rts				rts
.440a					_TIFail:
.440a	18		clc				clc
.440b	60		rts				rts
.440c					TIRecursiveOut:
.440c	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.440e	29 3f		and #$3f			and 	#$3F
.4410	09 40		ora #$40			ora 	#$40
.4412	48		pha				pha
.4413	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4415	29 c0		and #$c0			and 	#$C0
.4417	05 a0		ora $a0				ora 	esInt1
.4419	05 a8		ora $a8				ora 	esInt2
.441b	05 b0		ora $b0				ora 	esInt3
.441d	f0 10		beq $442f			beq 	_TIRONoRecursion
.441f	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4421					_TIROShift:
.4421	46 b0		lsr $b0				lsr 	esInt3
.4423	66 a8		ror $a8				ror 	esInt2
.4425	66 a0		ror $a0				ror 	esInt1
.4427	66 98		ror $98				ror 	esInt0
.4429	ca		dex				dex
.442a	d0 f5		bne $4421			bne 	_TIROShift
.442c	20 0c 44	jsr $440c			jsr 	TIRecursiveOut 				; call recursively
.442f					_TIRONoRecursion:
.442f	68		pla				pla 								; pull the old bit.
.4430	4c d6 42	jmp $42d6			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4433					TokenisePunctuation:
.4433	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4435	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4438	c8		iny				iny
.4439	b1 28		lda ($28),y			lda 	(codePtr),y
.443b	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.443e	c8		iny				iny 								; Y is +2
.443f	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4441	8d cf 0a	sta $0acf			sta 	convertBuffer
.4444	20 e6 41	jsr $41e6			jsr 	TokenSearch 				; search for that token.
.4447	b0 0a		bcs $4453			bcs 	_TIFound
.4449	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.444c	88		dey				dey 								; Y is now +1
.444d	20 e6 41	jsr $41e6			jsr 	TokenSearch 				; search for that token.
.4450	b0 01		bcs $4453			bcs 	_TIFound
.4452	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.4453					_TIFound:
.4453	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.4454					TokeniseString:
.4454	c8		iny				iny 								; skip opening quote
.4455	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4457	84 2a		sty $2a				sty 	temp0 						; save start.
.4459					_TSGetLength:
.4459	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.445b	f0 21		beq $447e			beq 	_TSFail						; end of line, fail
.445d	c8		iny				iny
.445e	e8		inx				inx
.445f	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4461	d0 f6		bne $4459			bne 	_TSGetLength
.4463	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.4465	20 d6 42	jsr $42d6			jsr 	TokenWrite
.4468	8a		txa				txa 								; output length
.4469	20 d6 42	jsr $42d6			jsr 	TokenWrite
.446c	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.446e	e0 00		cpx #$00			cpx 	#0 							; check ended
.4470	f0 09		beq $447b			beq 	_TSExit
.4472					_TSOutput:
.4472	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.4474	20 d6 42	jsr $42d6			jsr 	TokenWrite
.4477	c8		iny				iny
.4478	ca		dex				dex
.4479	d0 f7		bne $4472			bne 	_TSOutput
.447b					_TSExit:
.447b	c8		iny				iny 								; skip ending quote
.447c	38		sec				sec 								; return CS.
.447d	60		rts				rts
.447e					_TSFail:
.447e	18		clc				clc
.447f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4480					TokenTableAddress:
>4480	88 44						.word 	Group0Text
>4482	56 46						.word 	Group1Text
>4484	a3 47						.word 	Group2Text
>4486	f3 47						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4488					Group0Text:
>4488	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>448c	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>448f	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>4493	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>4496	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4499	01 be					.byte $01,$be                          ; $8b >
>449b	01 bc					.byte $01,$bc                          ; $8c <
>449d	01 bd					.byte $01,$bd                          ; $8d =
>449f	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>44a2	01 ab					.byte $01,$ab                          ; $8f +
>44a4	01 ad					.byte $01,$ad                          ; $90 -
>44a6	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>44a9	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>44ac	01 aa					.byte $01,$aa                          ; $93 *
>44ae	01 af					.byte $01,$af                          ; $94 /
>44b0	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>44b4	01 de					.byte $01,$de                          ; $96 ^
>44b6	01 a1					.byte $01,$a1                          ; $97 !
>44b8	01 bf					.byte $01,$bf                          ; $98 ?
>44ba	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>44c1	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>44c7	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>44cb	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>44ce	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>44d6	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>44dc	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>44e1	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>44e6	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>44eb	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>44f1	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>44f9	01 a8					.byte $01,$a8                          ; $a4 (
>44fb	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>4500	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>4505	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>450a	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>4512	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4517	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>451c	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4522	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4527	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>452c	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4531	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4538	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>453f	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4544	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>454b	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4552	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4558	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>455f	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>4565	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>456d	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>4573	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4578	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>457e	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>4584	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>458a	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>458f	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>4594	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>459b	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>45a2	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>45aa	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>45b2	01 c0					.byte $01,$c0                          ; $c3 @
>45b4	01 fe					.byte $01,$fe                          ; $c4 ~
>45b6	01 a6					.byte $01,$a6                          ; $c5 &
>45b8	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>45be	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>45c6	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>45ca	01 a9					.byte $01,$a9                          ; $c9 )
>45cc	01 ba					.byte $01,$ba                          ; $ca :
>45ce	01 ac					.byte $01,$ac                          ; $cb ,
>45d0	01 bb					.byte $01,$bb                          ; $cc ;
>45d2	01 a7					.byte $01,$a7                          ; $cd '
>45d4	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>45d7	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>45dc	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>45e1	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>45e7	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>45eb	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>45ef	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>45f3	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>45f9	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>45fe	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>4602	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4608	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>460d	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4613	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4616	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>461b	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4622	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4627	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>462c	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4631	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4635	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>463b	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>463f	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4646	01 ae					.byte $01,$ae                          ; $e5 .
>4648	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>464d	01 a3					.byte $01,$a3                          ; $e7 #
>464f	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>4655	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.4656					Group1Text:
>4656	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>465b	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4660	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>4665	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4669	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>466f	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>4673	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4678	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4680	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>4684	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4689	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>468e	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>4693	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4699	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>46a0	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>46a4	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>46aa	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>46ae	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>46b2	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>46b6	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>46ba	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>46be	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>46c2	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>46c6	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>46ca	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>46ce	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>46d2	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>46d6	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>46da	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>46de	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>46e2	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>46e6	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>46ea	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>46ee	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>46f2	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>46f6	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>46fa	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>46fe	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4702	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4706	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>470a	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>470e	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4712	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4716	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>471a	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>471e	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4722	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4726	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>472a	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>472e	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4732	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4736	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>473a	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>473e	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4742	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4746	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>474a	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>474e	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4752	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4756	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>475a	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>475e	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4762	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4766	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>476a	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>476e	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4772	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4776	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>477a	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>477e	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4782	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4786	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>478a	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>478e	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4792	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4796	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>479a	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>479e	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>47a2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.47a3					Group2Text:
>47a3	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>47a9	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>47af	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>47b5	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>47ba	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>47c2	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>47c9	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>47cd	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>47d2	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>47d8	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>47dd	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>47e2	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $91 plot
>47e7	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $92 line
>47ec	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $93 paint
>47f2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.47f3					Group3Text:
>47f3	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>47fa	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4801	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4809	58 a8
>480b	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4813	59 a8
>4815	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>481a	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4821	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4828	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>482f	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4836	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4837					tokeniserHandler:
.4837	7c 3a 48	jmp ($483a,x)			jmp 	(tokeniserVectors,x)
.483a					tokeniserVectors:
>483a	46 48					.word _DummyControlHandler ; index 0
>483c	d0 3f					.word Detokenise           ; index 2
>483e	c4 3f					.word ListLine             ; index 4
>4840	55 42					.word TokTest              ; index 6
>4842	75 42					.word Tokenise             ; index 8
>4844	78 42					.word TokeniseASCIIZ       ; index 10
.4846					_DummyControlHandler:
.4846	60		rts			rts

;******  Return to file: basic.asm

.4847					section_end_tokeniser:
.4847					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4847					AccessArray:
.4847	8a		txa				txa
.4848	48		pha				pha
.4849	e8		inx				inx
.484a	20 13 49	jsr $4913			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.484d	68		pla				pla
.484e	aa		tax				tax
.484f	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4851	85 2a		sta $2a				sta 	temp0
.4853	b5 a0		lda $a0,x			lda 	esInt1,x
.4855	85 2b		sta $2b				sta 	temp0+1
.4857	8a		txa				txa
.4858	48		pha				pha
.4859	98		tya				tya
.485a	48		pha				pha
.485b					_AAFollow:
.485b	a0 00		ldy #$00			ldy 	#0
.485d	b1 2a		lda ($2a),y			lda 	(temp0),y
.485f	48		pha				pha
.4860	c8		iny				iny
.4861	b1 2a		lda ($2a),y			lda 	(temp0),y
.4863	85 2b		sta $2b				sta 	temp0+1
.4865	68		pla				pla
.4866	85 2a		sta $2a				sta 	temp0
.4868	e8		inx				inx 								; advance to next stack slot.
.4869	a0 00		ldy #$00			ldy 	#0
.486b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.486d	d5 98		cmp $98,x			cmp 	esInt0,x
.486f	c8		iny				iny
.4870	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4872	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4874	29 7f		and #$7f			and 	#$7F
.4876	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4878	90 50		bcc $48ca			bcc 	_AABadIndex 				; failed on index if max index < required.
.487a	18		clc				clc
.487b	a5 2a		lda $2a				lda 	temp0
.487d	69 02		adc #$02			adc 	#2
.487f	85 2a		sta $2a				sta 	temp0
.4881	90 02		bcc $4885			bcc 	_AANoCarry
.4883	e6 2b		inc $2b				inc 	temp0+1
.4885					_AANoCarry:
.4885	b5 98		lda $98,x			lda 	esInt0,x
.4887	85 2e		sta $2e				sta 	temp2
.4889	b5 a0		lda $a0,x			lda 	esInt1,x
.488b	85 2f		sta $2f				sta 	temp2+1
.488d	ac 1e 0e	ldy $0e1e			ldy 	varType
.4890	b9 6d 49	lda $496d,y			lda 	CAActualSize-$3A,y
.4893	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4895	30 02		bmi $4899			bmi 	_AANotPointer
.4897	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4899					_AANotPointer:
.4899	20 17 4a	jsr $4a17			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.489c	18		clc				clc
.489d	a5 2a		lda $2a				lda 	temp0
.489f	65 2e		adc $2e				adc 	temp2
.48a1	85 2a		sta $2a				sta 	temp0
.48a3	a5 2b		lda $2b				lda 	temp0+1
.48a5	65 2f		adc $2f				adc 	temp2+1
.48a7	85 2b		sta $2b				sta 	temp0+1
.48a9	b5 91		lda $91,x			lda 	esType+1,x
.48ab	30 07		bmi $48b4			bmi 	_AAUsedAllIndices
.48ad	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.48af	10 14		bpl $48c5			bpl 	_AABadDepth 				; no, too many indexes.
.48b1	4c 5b 48	jmp $485b			jmp 	_AAFollow 					; otherwise follow them.
.48b4					_AAUsedAllIndices:
.48b4	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.48b6	30 0d		bmi $48c5			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.48b8	68		pla				pla
.48b9	a8		tay				tay
.48ba	68		pla				pla
.48bb	aa		tax				tax
.48bc	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.48be	95 98		sta $98,x			sta 	esInt0,x
.48c0	a5 2b		lda $2b				lda 	temp0+1
.48c2	95 a0		sta $a0,x			sta 	esInt1,x
.48c4	60		rts				rts
.48c5					_AABadDepth:
.48c5	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.48c7	20 18 15	jsr $1518		jsr	errorHandler
.48ca					_AABadIndex:
.48ca	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.48cc	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e1c					elementSize:
>0e1c							.fill	 1
.48cf					CreateArray:
.48cf	20 a6 4a	jsr $4aa6			jsr 	AccessSetup 				; set up the basic stuff.
.48d2	ad 1e 0e	lda $0e1e			lda 	varType 					; is the variable type an array
.48d5	4a		lsr a				lsr 	a
.48d6	90 36		bcc $490e			bcc 	CANotArray 					; no, cause an error.
.48d8	20 af 4b	jsr $4baf			jsr 	FindVariable 				; does the variable exist already
.48db	b0 2c		bcs $4909			bcs 	CAFound 					; cannot redefine it.
.48dd	20 e3 4a	jsr $4ae3			jsr 	CreateVariable 				; create the variable entry.
.48e0	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.48e2	48		pha				pha
.48e3	a5 2b		lda $2b				lda 	temp0+1
.48e5	48		pha				pha
.48e6	a2 00		ldx #$00			ldx 	#0
.48e8	20 13 49	jsr $4913			jsr 	GetArrayDimensions 			; get the array dimensions
.48eb	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.48ed	20 43 49	jsr $4943			jsr 	CreateArrayLevel 			; level to YA
.48f0	aa		tax				tax 								; level now in YX
.48f1	68		pla				pla 								; get address back to temp0 to write.
.48f2	85 2b		sta $2b				sta 	temp0+1
.48f4	68		pla				pla
.48f5	85 2a		sta $2a				sta 	temp0
.48f7	98		tya				tya 								; write YX there.
.48f8	a0 06		ldy #$06			ldy 	#6
.48fa	91 2a		sta ($2a),y			sta 	(temp0),y
.48fc	88		dey				dey
.48fd	8a		txa				txa
.48fe	91 2a		sta ($2a),y			sta 	(temp0),y
.4900	ac 1f 0e	ldy $0e1f			ldy 	varEnd 						; restore Y and exit.
.4903	60		rts				rts
.4904					CASize:
.4904	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4906	20 18 15	jsr $1518		jsr	errorHandler
.4909					CAFound:
.4909	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.490b	20 18 15	jsr $1518		jsr	errorHandler
.490e					CANotArray:
.490e	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4910	20 18 15	jsr $1518		jsr	errorHandler
.4913					GetArrayDimensions:
.4913	ad 1e 0e	lda $0e1e			lda 	varType 					; push variable type on the stack.
.4916	48		pha				pha
.4917	ac 1f 0e	ldy $0e1f			ldy 	varEnd
.491a					_CAGetDimensions:
.491a	8a		txa				txa 								; get the next level
.491b	a2 0a		ldx #$0a		ldx	#10
.491d	20 f1 3c	jsr $3cf1		jsr	mainHandler
.4920	aa		tax				tax
.4921	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4923	29 e0		and #$e0			and 	#$E0
.4925	15 a8		ora $a8,x			ora 	esInt2,x
.4927	15 b0		ora $b0,x			ora 	esInt3,x
.4929	d0 d9		bne $4904			bne 	CASize
.492b	e8		inx				inx 								; next level.
.492c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.492e	c8		iny				iny
.492f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4931	f0 e7		beq $491a			beq 	_CAGetDimensions
.4933	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4935	d0 cd		bne $4904			bne 	CASize
.4937	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4939	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.493b	68		pla				pla 								; restore the variable type ($3A-$3F)
.493c	8d 1e 0e	sta $0e1e			sta 	varType
.493f	8c 1f 0e	sty $0e1f			sty 	varEnd 						; save exit Y value, after dimensions
.4942	60		rts				rts
.4943					CreateArrayLevel:
.4943	ac 1e 0e	ldy $0e1e			ldy 	varType
.4946	b9 6d 49	lda $496d,y			lda 	CAActualSize-$3A,y
.4949	8d 1c 0e	sta $0e1c			sta 	elementSize 				; get element size this level.
.494c	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.494e	30 05		bmi $4955			bmi 	_CANotPointer
.4950	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4952	8d 1c 0e	sta $0e1c			sta 	elementSize
.4955					_CANotPointer:
.4955	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4957	85 2a		sta $2a				sta 	temp0
.4959	48		pha				pha
.495a	a5 36		lda $36				lda 	lowMemory+1
.495c	85 2b		sta $2b				sta 	temp0+1
.495e	48		pha				pha
.495f	20 e0 49	jsr $49e0			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4962	a0 00		ldy #$00			ldy 	#0
.4964	b5 98		lda $98,x			lda 	esInt0,x
.4966	91 2a		sta ($2a),y			sta 	(temp0),y
.4968	c8		iny				iny
.4969	b5 a0		lda $a0,x			lda 	esInt1,x
.496b	91 2a		sta ($2a),y			sta 	(temp0),y
.496d	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.496f	30 06		bmi $4977			bmi 	_CALNotLast
.4971	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4973	09 80		ora #$80			ora 	#$80
.4975	91 2a		sta ($2a),y			sta 	(temp0),y
.4977					_CALNotLast:
.4977	a9 02		lda #$02			lda 	#2
.4979	20 9d 49	jsr $499d			jsr 	_CALAddTemp0
.497c	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.497e	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4980	b5 a0		lda $a0,x			lda 	esInt1,x
.4982	95 b0		sta $b0,x			sta 	esInt3,x
.4984					_CALClear:
.4984	20 ad 49	jsr $49ad			jsr 	EraseOneElement
.4987	ad 1c 0e	lda $0e1c			lda 	elementSize 				; move to next element
.498a	20 9d 49	jsr $499d			jsr 	_CALAddTemp0
.498d	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.498f	d0 02		bne $4993			bne 	_CALNoBorrow
.4991	d6 b0		dec $b0,x			dec 	esInt3,x
.4993					_CALNoBorrow:
.4993	d6 a8		dec $a8,x			dec 	esInt2,x
.4995	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4997	10 eb		bpl $4984			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4999	68		pla				pla 								; restore the start of this into YA.
.499a	a8		tay				tay
.499b	68		pla				pla
.499c	60		rts				rts
.499d					_CALAddTemp0:
.499d	18		clc				clc
.499e	65 2a		adc $2a				adc 	temp0
.49a0	85 2a		sta $2a				sta 	temp0
.49a2	90 02		bcc $49a6			bcc 	_CALANoCarry
.49a4	e6 2b		inc $2b				inc 	temp0+1
.49a6					_CALANoCarry:
.49a6	60		rts				rts
.49a7					CAActualSize:
>49a7	04 04						.byte 	VarISize,VarISize
>49a9	02 02						.byte 	VarSSize,VarSSize
>49ab	06 06						.byte 	VarFSize,VarFSize
.49ad					EraseOneElement:
.49ad	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.49af	10 09		bpl $49ba			bpl 	_EOESubArray
.49b1	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.49b3	ad 1e 0e	lda $0e1e			lda 	varType
.49b6	20 4d 4b	jsr $4b4d			jsr 	ZeroTemp0Y
.49b9	60		rts				rts
.49ba					_EOESubArray:
.49ba	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.49bc	48		pha				pha
.49bd	a5 2b		lda $2b				lda 	temp0+1
.49bf	48		pha				pha
.49c0	ad 1c 0e	lda $0e1c			lda 	elementSize 				; save element size
.49c3	48		pha				pha
.49c4	e8		inx				inx 								; create at next level
.49c5	20 43 49	jsr $4943			jsr 	CreateArrayLevel
.49c8	ca		dex				dex
.49c9	85 32		sta $32				sta 	tempShort 					; save A
.49cb	68		pla				pla  								; restore element size.
.49cc	8d 1c 0e	sta $0e1c			sta 	elementSize
.49cf	68		pla				pla 								; restore temp0, which is where this new array level goes.
.49d0	85 2b		sta $2b				sta 	temp0+1
.49d2	68		pla				pla
.49d3	85 2a		sta $2a				sta 	temp0
.49d5	98		tya				tya 								; store Y/A there
.49d6	a0 01		ldy #$01			ldy 	#1
.49d8	91 2a		sta ($2a),y			sta 	(temp0),y
.49da	a5 32		lda $32				lda 	tempShort
.49dc	88		dey				dey
.49dd	91 2a		sta ($2a),y			sta 	(temp0),y
.49df	60		rts				rts
.49e0					AllocateArraySpace:
.49e0	18		clc				clc 								; element count + 1 => temp2.
.49e1	b5 98		lda $98,x			lda 	esInt0,x
.49e3	69 01		adc #$01			adc 	#1
.49e5	85 2e		sta $2e				sta 	temp2
.49e7	b5 a0		lda $a0,x			lda 	esInt1,x
.49e9	69 00		adc #$00			adc 	#0
.49eb	85 2f		sta $2f				sta 	temp2+1
.49ed	ad 1c 0e	lda $0e1c			lda 	elementSize 				; bytes per element
.49f0	20 17 4a	jsr $4a17			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.49f3	18		clc				clc 								; add 2 for 'max element' byte.
.49f4	a5 2e		lda $2e				lda 	temp2
.49f6	69 02		adc #$02			adc 	#2
.49f8	85 2e		sta $2e				sta 	temp2
.49fa	90 02		bcc $49fe			bcc 	_AASNoCarry
.49fc	e6 2f		inc $2f				inc 	temp2+1
.49fe					_AASNoCarry:
.49fe	18		clc				clc 								; add to low memory, allocating space.
.49ff	a5 35		lda $35				lda 	lowMemory
.4a01	65 2e		adc $2e				adc 	temp2
.4a03	85 35		sta $35				sta 	lowMemory
.4a05	a5 36		lda $36				lda 	lowMemory+1
.4a07	65 2f		adc $2f				adc 	temp2+1
.4a09	85 36		sta $36				sta 	lowMemory+1
.4a0b	b0 05		bcs $4a12			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4a0d	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4a0f	b0 01		bcs $4a12			bcs 	_AASFail
.4a11	60		rts				rts
.4a12					_AASFail:
.4a12	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4a14	20 18 15	jsr $1518		jsr	errorHandler
.4a17					MultiplyTemp2ByA:
.4a17	48		pha				pha
.4a18	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4a1a	85 30		sta $30				sta 	temp3
.4a1c	a5 2f		lda $2f				lda 	temp2+1
.4a1e	85 31		sta $31				sta 	temp3+1
.4a20	68		pla				pla
.4a21	06 2e		asl $2e				asl 	temp2 						; double it.
.4a23	26 2f		rol $2f				rol 	temp2+1
.4a25	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4a27	f0 15		beq $4a3e			beq 	_MTBAExit
.4a29	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4a2b	d0 0d		bne $4a3a			bne 	_MTBANotFloat
.4a2d	18		clc				clc 								; so this will make it x 3
.4a2e	a5 2e		lda $2e				lda 	temp2
.4a30	65 30		adc $30				adc 	temp3
.4a32	85 2e		sta $2e				sta 	temp2
.4a34	a5 2f		lda $2f				lda 	temp2+1
.4a36	65 31		adc $31				adc 	temp3+1
.4a38	85 2f		sta $2f				sta 	temp2+1
.4a3a					_MTBANotFloat:
.4a3a	06 2e		asl $2e				asl 	temp2 						; double it.
.4a3c	26 2f		rol $2f				rol 	temp2+1
.4a3e					_MTBAExit:
.4a3e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e1d					varHash:
>0e1d							.fill	1
.0e1e					varType:
>0e1e							.fill 	1
.0e1f					varEnd:
>0e1f							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4a3f					AccessVariable:
.4a3f	aa		tax				tax 								; stack in X
.4a40	c8		iny				iny									; look at second character
.4a41	b1 28		lda ($28),y			lda 	(codePtr),y
.4a43	88		dey				dey
.4a44	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4a46	d0 15		bne $4a5d			bne 	_AVLong 					; no, always use the hash tables.
.4a48	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4a4a	38		sec				sec 	 							; make it 0-25
.4a4b	e9 01		sbc #$01			sbc 	#1
.4a4d	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4a4e	0a		asl a				asl 	a
.4a4f	95 98		sta $98,x			sta 	esInt0,x
.4a51	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4a53	95 a0		sta $a0,x			sta 	esInt1,x
.4a55	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4a57	95 90		sta $90,x			sta 	esType,x
.4a59	c8		iny				iny 								; skip over the variable reference in the code.
.4a5a	c8		iny				iny  								; (1 letter, 1 type)
.4a5b	8a		txa				txa 								; stack in A to return.
.4a5c	60		rts				rts
.4a5d					_AVLong:
.4a5d	8a		txa				txa
.4a5e	48		pha				pha
.4a5f	20 a6 4a	jsr $4aa6			jsr 	AccessSetup 				; set up the basic information we need for later
.4a62	20 af 4b	jsr $4baf			jsr 	FindVariable 				; does the variable exist already ?
.4a65	b0 0e		bcs $4a75			bcs 	_AVFound 					; yes, then its found
.4a67	ad 1e 0e	lda $0e1e			lda 	varType 					; otherwise, is the variable type an array
.4a6a	4a		lsr a				lsr 	a
.4a6b	90 05		bcc $4a72			bcc 	_AVCanCreate 				; if not, we can autocreate
.4a6d	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4a6f	20 18 15	jsr $1518		jsr	errorHandler
.4a72					_AVCanCreate:
.4a72	20 e3 4a	jsr $4ae3			jsr 	CreateVariable 				; variable does not exist, create it.
.4a75					_AVFound:
.4a75	68		pla				pla
.4a76	aa		tax				tax
.4a77	18		clc				clc 								; copy temp0 (variable record address)
.4a78	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4a7a	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4a7c	95 98		sta $98,x			sta 	esInt0,x
.4a7e	a5 2b		lda $2b				lda 	temp0+1
.4a80	69 00		adc #$00			adc 	#0
.4a82	95 a0		sta $a0,x			sta 	esInt1,x
.4a84	a9 00		lda #$00			lda 	#0
.4a86	95 a8		sta $a8,x			sta 	esInt2,x
.4a88	95 b0		sta $b0,x			sta 	esInt3,x
.4a8a	ac 1e 0e	ldy $0e1e			ldy 	varType 					; get the type ID from the type.
.4a8d	b9 66 4a	lda $4a66,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4a90	95 90		sta $90,x			sta 	esType,x
.4a92	ac 1f 0e	ldy $0e1f			ldy 	varEnd 						; restore Y
.4a95	ad 1e 0e	lda $0e1e			lda 	VarType 					; get variable type, put LSB into C
.4a98	4a		lsr a				lsr 	a
.4a99	90 03		bcc $4a9e			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4a9b	20 47 48	jsr $4847			jsr 	AccessArray 				; array lookup. if LSB was set.
.4a9e					_AVNotArray:
.4a9e	8a		txa				txa 								; return stack in A and return
.4a9f	60		rts				rts
.4aa0					_AVTypeTable:
>4aa0	80 80						.byte 	$80,$80						; integer
>4aa2	c0 c0						.byte 	$C0,$C0 					; string
>4aa4	81 81						.byte 	$81,$81 					; float
.4aa6					AccessSetup:
.4aa6	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4aa8	8d 1d 0e	sta $0e1d			sta 	varHash
.4aab	98		tya				tya
.4aac	48		pha				pha
.4aad	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4aaf	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4ab1	b0 0b		bcs $4abe			bcs 	_ASComplete
.4ab3	18		clc				clc 								; add to the hash. Might improve this.
.4ab4	6d 1d 0e	adc $0e1d			adc 	varHash
.4ab7	8d 1d 0e	sta $0e1d			sta 	varHash
.4aba	c8		iny				iny 								; next character
.4abb	4c ad 4a	jmp $4aad			jmp 	_ASLoop
.4abe					_ASComplete:
.4abe	8d 1e 0e	sta $0e1e			sta 	varType 					; save variable type byte
.4ac1	c8		iny				iny
.4ac2	8c 1f 0e	sty $0e1f			sty 	varEnd 						; save the ending position.
.4ac5	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4ac6	e9 3a		sbc #$3a			sbc 	#$3A
.4ac8	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4ac9	0a		asl a				asl 	a
.4aca	0a		asl a				asl 	a
.4acb	0a		asl a				asl 	a 							; 2 bytes/word
.4acc	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4ace	ad 1d 0e	lda $0e1d			lda 	varHash 					; get hash
.4ad1	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4ad3	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4ad4	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4ad6	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4ad8	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4ada	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4adc	69 00		adc #$00			adc 	#0
.4ade	85 3c		sta $3c				sta 	hashList+1
.4ae0	68		pla				pla
.4ae1	a8		tay				tay
.4ae2	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4ae3					CreateVariable:
.4ae3	98		tya				tya 								; push Y on the stack twice.
.4ae4	48		pha				pha									; position in code of the new variable.
.4ae5	48		pha				pha
.4ae6	ae 1e 0e	ldx $0e1e			ldx 	varType 					; get var type 0-5 from the var type
.4ae9	bd 0d 4b	lda $4b0d,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4aec	48		pha				pha 								; save length
.4aed	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4aef	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4af1	a5 36		lda $36				lda 	lowMemory+1
.4af3	85 2b		sta $2b				sta 	temp0+1
.4af5	68		pla				pla 								; get length
.4af6	18		clc				clc 								; add to low memory.
.4af7	65 35		adc $35				adc 	lowMemory
.4af9	85 35		sta $35				sta 	lowMemory
.4afb	90 08		bcc $4b05			bcc 	_CVNoCarry
.4afd	e6 36		inc $36				inc 	lowMemory+1
.4aff	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4b01	c5 34		cmp $34				cmp 	highMemory+1
.4b03	b0 3d		bcs $4b42			bcs 	_CVMemory
.4b05					_CVNoCarry:
.4b05	ad 1d 0e	lda $0e1d			lda 	varHash 					; store hash at offset 4.
.4b08	a0 04		ldy #$04			ldy 	#4
.4b0a	91 2a		sta ($2a),y			sta 	(temp0),y
.4b0c	68		pla				pla 								; offset, work out where the variable name is.
.4b0d	18		clc				clc
.4b0e	65 28		adc $28				adc 	codePtr
.4b10	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4b12	91 2a		sta ($2a),y			sta 	(temp0),y
.4b14	a5 29		lda $29				lda 	codePtr+1
.4b16	69 00		adc #$00			adc 	#0
.4b18	c8		iny				iny
.4b19	91 2a		sta ($2a),y			sta 	(temp0),y
.4b1b	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4b1e	b0 03		bcs $4b23			bcs 	_CVNotImmediate
.4b20	20 85 4b	jsr $4b85			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4b23					_CVNotImmediate:
.4b23	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4b25	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4b27	91 2a		sta ($2a),y			sta 	(temp0),y
.4b29	c8		iny				iny
.4b2a	b1 3b		lda ($3b),y			lda 	(hashList),y
.4b2c	91 2a		sta ($2a),y			sta 	(temp0),y
.4b2e	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4b30	91 3b		sta ($3b),y			sta 	(hashList),y
.4b32	88		dey				dey
.4b33	a5 2a		lda $2a				lda 	temp0
.4b35	91 3b		sta ($3b),y			sta 	(hashList),y
.4b37	ad 1e 0e	lda $0e1e			lda 	varType 					; type in A
.4b3a	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4b3c	20 4d 4b	jsr $4b4d			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4b3f	68		pla				pla
.4b40	a8		tay				tay
.4b41	60		rts				rts
.4b42					_CVMemory:
.4b42	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4b44	20 18 15	jsr $1518		jsr	errorHandler
>4b47	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4b49	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4b4b	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4b4d					ZeroTemp0Y:
.4b4d	4a		lsr a				lsr 	a 							; bit 0 in carry
.4b4e	0a		asl a				asl 	a
.4b4f	b0 19		bcs $4b6a			bcs 	_ZTExit 					; we don't initialise arrays.
.4b51	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4b53	f0 16		beq $4b6b			beq 	_ZTWriteNullString 			; write "" string
.4b55	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4b57	f0 22		beq $4b7b			beq 	_ZTWriteFloat
.4b59	98		tya				tya
.4b5a	48		pha				pha
.4b5b	a9 00		lda #$00			lda 	#0
.4b5d	91 2a		sta ($2a),y			sta 	(temp0),y
.4b5f	c8		iny				iny
.4b60	91 2a		sta ($2a),y			sta 	(temp0),y
.4b62	c8		iny				iny
.4b63	91 2a		sta ($2a),y			sta 	(temp0),y
.4b65	c8		iny				iny
.4b66	91 2a		sta ($2a),y			sta 	(temp0),y
.4b68	68		pla				pla
.4b69	a8		tay				tay
.4b6a					_ZTExit:
.4b6a	60		rts				rts
.4b6b					_ZTWriteNullString:
.4b6b	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4b6d	8d ce 0a	sta $0ace			sta 	NullString
.4b70	a9 ce		lda #$ce			lda 	#NullString & $FF
.4b72	91 2a		sta ($2a),y			sta 	(temp0),y
.4b74	a9 0a		lda #$0a			lda 	#NullString >> 8
.4b76	c8		iny				iny
.4b77	91 2a		sta ($2a),y			sta 	(temp0),y
.4b79	88		dey				dey
.4b7a	60		rts				rts
.4b7b					_ZTWriteFloat:
.4b7b	8a		txa				txa
.4b7c	48		pha				pha
.4b7d	a2 20		ldx #$20		ldx	#32
.4b7f	20 67 24	jsr $2467		jsr	floatingpointHandler
.4b82	68		pla				pla
.4b83	aa		tax				tax
.4b84	60		rts				rts
.4b85					CloneVariableName:
.4b85	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4b87	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b89	85 2e		sta $2e				sta 	temp2
.4b8b	c8		iny				iny
.4b8c	b1 2a		lda ($2a),y			lda 	(temp0),y
.4b8e	85 2f		sta $2f				sta 	temp2+1
.4b90	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4b92	91 2a		sta ($2a),y			sta 	(temp0),y
.4b94	88		dey				dey
.4b95	a5 35		lda $35				lda 	lowMemory
.4b97	91 2a		sta ($2a),y			sta 	(temp0),y
.4b99	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4b9b					_CVNCopy:
.4b9b	b1 2e		lda ($2e),y			lda		(temp2),y
.4b9d	91 35		sta ($35),y			sta 	(lowMemory),y
.4b9f	c8		iny				iny
.4ba0	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4ba2	90 f7		bcc $4b9b			bcc 	_CVNCopy
.4ba4	98		tya				tya 								; add Y to low memory
.4ba5	18		clc				clc
.4ba6	65 35		adc $35				adc 	lowMemory
.4ba8	85 35		sta $35				sta 	lowMemory
.4baa	90 02		bcc $4bae			bcc 	_CVNNoCarry
.4bac	e6 36		inc $36				inc 	lowMemory+1
.4bae					_CVNNoCarry:
.4bae	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4baf					FindVariable:
.4baf	98		tya				tya
.4bb0	48		pha				pha
.4bb1	98		tya				tya 								; point temp2 to the actual name
.4bb2	18		clc				clc 								; in memory of the variable being created
.4bb3	65 28		adc $28				adc 	codePtr
.4bb5	85 2e		sta $2e				sta 	temp2
.4bb7	a5 29		lda $29				lda 	codePtr+1
.4bb9	69 00		adc #$00			adc 	#0
.4bbb	85 2f		sta $2f				sta 	temp2+1
.4bbd	a0 00		ldy #$00			ldy 	#0
.4bbf	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4bc1	85 2a		sta $2a				sta 	temp0
.4bc3	a5 3c		lda $3c				lda 	hashList+1
.4bc5	85 2b		sta $2b				sta 	temp0+1
.4bc7	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4bc9	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bcb	f0 2c		beq $4bf9			beq 	_FVFail
.4bcd	aa		tax				tax
.4bce	88		dey				dey		 							; get LSB
.4bcf	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bd1	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4bd3	86 2b		stx $2b				stx 	temp0+1
.4bd5	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4bd7	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bd9	cd 1d 0e	cmp $0e1d			cmp 	varHash
.4bdc	d0 e9		bne $4bc7			bne 	_FVNext 					; if not, no point in checking the name.
.4bde	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4bdf	b1 2a		lda ($2a),y			lda 	(temp0),y
.4be1	85 2d		sta $2d				sta 	temp1+1
.4be3	88		dey				dey
.4be4	b1 2a		lda ($2a),y			lda 	(temp0),y
.4be6	85 2c		sta $2c				sta 	temp1
.4be8	a0 00		ldy #$00			ldy 	#0
.4bea					_FVCheck:
.4bea	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4bec	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4bee	d0 d7		bne $4bc7			bne 	_FVNext		 				; fail if different.
.4bf0	c8		iny				iny
.4bf1	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4bf3	90 f5		bcc $4bea			bcc 	_FVCheck
.4bf5	68		pla				pla
.4bf6	a8		tay				tay
.4bf7	38		sec				sec
.4bf8	60		rts				rts
.4bf9					_FVFail:
.4bf9	68		pla				pla
.4bfa	a8		tay				tay
.4bfb	18		clc				clc
.4bfc	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4bfd					HashTableReset:
.4bfd	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4bff	a9 00		lda #$00			lda 	#0
.4c01					_HTRClear:
.4c01	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4c04	ca		dex				dex
.4c05	d0 fa		bne $4c01			bne 	_HTRClear
.4c07	60		rts				rts

;******  Return to file: variable/variable.asm

.4c08					variableHandler:
.4c08	7c 0b 4c	jmp ($4c0b,x)			jmp 	(variableVectors,x)
.4c0b					variableVectors:
>4c0b	13 4c					.word _DummyControlHandler ; index 0
>4c0d	3f 4a					.word AccessVariable       ; index 2
>4c0f	cf 48					.word CreateArray          ; index 4
>4c11	fd 4b					.word HashTableReset       ; index 6
.4c13					_DummyControlHandler:
.4c13	60		rts			rts

;******  Return to file: basic.asm

.4c14					section_end_variable:
.4c14					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e20					endStorage:
>4c14							.align 	256
.4d00					programMemory:
>4cff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4d00					section_end_footer:

;******  End of listing
