
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Thu Apr 29 16:47:22 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

=1					cputype = 1
=1					autorun = 1
=0					coldstartnew = 0
=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2

;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35
.0af2					jumpVector:
>0af2							.fill 	2

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$e9					TKW_TEXT                     = $e9 ; text
=$ea					TKW_TYPE                     = $ea ; type
=$eb					TKW_TIME                     = $eb ; time
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_PLOT                     = $90 ; plot
=$91					TKW_LINE                     = $91 ; line
=$92					TKW_PAINT                    = $92 ; paint
=$93					TKW_SOUND                    = $93 ; sound
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(
=$8f					TKW_PLAYINGLPAREN            = $8f ; playing(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: device/option_x16/x16const.inc

=$ffde					KNLReadTimer = $FFDE
=$ffd2					KNLPrintChar = $FFD2
=$ffe4					KNLCheckKeyboarBuffer = $FFE4
=$ffcf					KNLInputLine = $FFCF
=$ffe1					KNLCheckBreak = $FFE1
=$ffbd					KNLFileSetName = $FFBD
=$ffba					KNLFileSetLFS = $FFBA
=$ffd5					KNLFileLoad = $FFD5
=$ffd8					KNLFileSave = $FFD8

;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware
=41					ErrorID_NoGfx = 41 ; No graphics available

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.
=$9f20					X16VeraAddLow = $9F20
=$9f21					X16VeraAddMed = $9F21
=$9f22					X16VeraAddHigh = $9F22
=$9f23					X16VeraData0 = $9F23
=$9f24					X16VeraData1 = $9F24
=$9f25					X16VeraControl = $9F25
=$9f29					X16VeraDCVideo = $9F29
=$9f2a					X16VeraHScale = $9F2A
=$9f2b					X16VeraVScale = $9F2B
=$9f2d					X16VeraLayerConfig = $9F2D
=$9f2e					X16VeraLayerMapBase = $9F2E
=$9f2f					X16VeraLayerTileBase = $9F2F
=$ff56					X16KReadJoystick = $FF56
=$ff50					X16KReadRTC = $FF50
=$1f9c0					X16VeraSound = $1F9C0
=$1fa00					X16VeraPalette = $1FA00
=320					GrWidth = 320 								; gfx mode size.
=200					GrHeight = 200
=$f800					VeraDefaultFont = $F800 					; where font is in Vera

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	cd 47						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 50		lda #$50			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 02 2a	jsr $2a02		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 ac 13	jsr $13ac		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 05 15	jsr $1505		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 02 2a	jsr $2a02		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 65 40	jsr $4065		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 10 43	jsr $4310		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 9d 4b	jsr $4b9d		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 5c 4f	jsr $4f5c		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 9d 4b	jsr $4b9d		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first character into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit 					; e.g. "INX"
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ? so it is lda (something
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A on its own. This is for ASL A
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it - this should be $3A
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1 (it may of course be absolute)
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 65 40	jsr $4065		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing 				; get ,X or ,Y if present
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit 					; neither present
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX 					; decide if ,X or ,Y
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 65 40	jsr $4065		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 27 15	jsr $1527		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 65 40	jsr $4065		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X) so get the ending and error on anything else.
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 65 40	jsr $4065		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma (e.g. ,X ,Y)
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af4					finalOpcode:
>0af4							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f4 0a	sta $0af4			sta 	finalOpcode					; save opcode.
.1113	5a		phy				phy
.1114	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O (e.g. what do we display/check.)
.1117	29 02		and #$02			and 	#2
.1119	f0 2b		beq $1146			beq 	_ASMWNoEcho 				; if bit 2 zero then don't echo.
.111b	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111e	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1121	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1124	20 80 11	jsr $1180			jsr 	AWIWriteHex
.1127	ad f4 0a	lda $0af4			lda 	finalOpcode 				; write opcode
.112a	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.112d	e0 00		cpx #$00			cpx 	#0
.112f	f0 0e		beq $113f			beq 	_ASMWEchoExit
.1131	a5 98		lda $98				lda 	esInt0
.1133	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.1136	e0 01		cpx #$01			cpx 	#1
.1138	f0 05		beq $113f			beq 	_ASMWEchoExit
.113a	a5 a0		lda $a0				lda 	esInt1
.113c	20 79 11	jsr $1179			jsr 	AWIWriteHexSpace
.113f					_ASMWEchoExit:
.113f	da		phx				phx
.1140	a2 04		ldx #$04		ldx	#4
.1142	20 05 15	jsr $1505		jsr	deviceHandler
.1145	fa		plx				plx
.1146					_ASMWNoEcho:
.1146	ad f4 0a	lda $0af4			lda 	finalOpcode 				; opcode
.1149	20 60 11	jsr $1160			jsr 	AsmWriteByte
.114c	e0 00		cpx #$00			cpx 	#0	 						; exit if no operands
.114e	f0 0e		beq $115e			beq 	_ASMWExit
.1150	a5 98		lda $98				lda 	esInt0	 					; low byte
.1152	20 60 11	jsr $1160			jsr 	AsmWriteByte
.1155	e0 01		cpx #$01			cpx 	#1
.1157	f0 05		beq $115e			beq 	_ASMWExit
.1159	a5 a0		lda $a0				lda 	esInt1 						; high byte
.115b	20 60 11	jsr $1160			jsr 	AsmWriteByte
.115e					_ASMWExit:
.115e	7a		ply				ply
.115f	60		rts				rts
.1160					AsmWriteByte:
.1160	a0 00		ldy #$00			ldy 	#0
.1162	48		pha				pha
.1163	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1166	85 2a		sta $2a				sta 	temp0
.1168	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116b	85 2b		sta $2b				sta 	temp0+1
.116d	68		pla				pla 								; write out the byte.
.116e	91 2a		sta ($2a),y			sta 	(temp0),y
.1170	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1173	d0 03		bne $1178			bne 	_AWBNoCarry
.1175	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1178					_AWBNoCarry:
.1178	60		rts				rts
.1179					AWIWriteHexSpace:
.1179	48		pha				pha
.117a	a9 20		lda #$20			lda 	#" "
.117c	20 93 11	jsr $1193			jsr 	AWIPrintChar
.117f	68		pla				pla
.1180					AWIWriteHex:
.1180	48		pha				pha
.1181	4a		lsr a				lsr 	a
.1182	4a		lsr a				lsr 	a
.1183	4a		lsr a				lsr 	a
.1184	4a		lsr a				lsr 	a
.1185	20 89 11	jsr $1189			jsr 	AWIPrintNibble
.1188	68		pla				pla
.1189					AWIPrintNibble:
.1189	29 0f		and #$0f			and 	#15
.118b	c9 0a		cmp #$0a			cmp 	#10
.118d	90 02		bcc $1191			bcc 	_AWIPNDigit
.118f	69 06		adc #$06			adc 	#6
.1191					_AWIPNDigit:
.1191	69 30		adc #$30			adc 	#48
.1193					AWIPrintChar:
.1193	85 32		sta $32				sta 	tempShort
.1195	da		phx				phx
.1196	a5 32		lda $32				lda 	tempShort
.1198	a2 14		ldx #$14		ldx	#20
.119a	20 05 15	jsr $1505		jsr	deviceHandler
.119d	fa		plx				plx
.119e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af5					asmToken:
>0af5							.fill 	1
.0af6					asmMode:
>0af6							.fill 	1 							; esInt0/1
.0af7					asmBaseOpcode:
>0af7							.fill 	1
.119f					AssembleOneInstruction:
.119f	8d f5 0a	sta $0af5			sta 	asmToken 					; save the token
.11a2	aa		tax				tax
.11a3	bd 6c 11	lda $116c,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11a6	8d f7 0a	sta $0af7			sta 	asmBaseOpcode
.11a9	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11ac	8d f6 0a	sta $0af6			sta 	asmMode
.11af	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b1	d0 05		bne $11b8			bne 	_AOIThreeBytes 				; if so, we have to use three byte, can't try zp before abs
.11b3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11b6	b0 10		bcs $11c8			bcs 	_AOISuccess 				; worked ok.
.11b8					_AOIThreeBytes:
.11b8	ae f6 0a	ldx $0af6			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11bb	bd f2 11	lda $11f2,x			lda 	AbsoluteVersionTable,x
.11be	30 09		bmi $11c9			bmi 	_AOIError					; not possible, no equivalent.
.11c0	8d f6 0a	sta $0af6			sta 	asmMode
.11c3	20 ce 11	jsr $11ce			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11c6	90 01		bcc $11c9			bcc 	_AOIError 					; didn't work.
.11c8					_AOISuccess:
.11c8	60		rts				rts
.11c9					_AOIError:
.11c9	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11cb	20 27 15	jsr $1527		jsr	errorHandler
.11ce					AssembleAttempt:
.11ce	20 d7 11	jsr $11d7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d1	b0 03		bcs $11d6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d3	20 7f 13	jsr $137f			jsr 	AssembleSpecialCase
.11d6					_AAExit:
.11d6	60		rts				rts
.11d7					_AADispatch:
.11d7	ad f5 0a	lda $0af5			lda 	asmToken
.11da	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11dc	b0 11		bcs $11ef			bcs 	_AAGroup4
.11de	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e0	b0 0a		bcs $11ec			bcs 	_AAGroup3
.11e2	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11e4	b0 03		bcs $11e9			bcs 	_AAGroup2
.11e6	4c c5 12	jmp $12c5			jmp 	AssembleGroup1
.11e9					_AAGroup2:
.11e9	4c 20 13	jmp $1320			jmp 	AssembleGroup2
.11ec					_AAGroup3:
.11ec	4c 41 13	jmp $1341			jmp 	AssembleGroup3
.11ef					_AAGroup4:
.11ef	4c 75 13	jmp $1375			jmp 	AssembleGroup4
.11f2					AbsoluteVersionTable:
>11f2	ff						.byte	$FF 			; fail AMD_IMM
>11f3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11f4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11f5	ff						.byte	$FF 			; fail AMD_ABS
>11f6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11f7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11f8	ff						.byte	$FF 			; fail AMD_ABSY
>11f9	ff						.byte	$FF 			; fail AMD_ABSX
>11fa	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11fb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11fc	ff						.byte	$FF 			; fail AMD_ABSIND
>11fd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11fe	ff						.byte	$FF 			; fail AMD_REL
>11ff	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1200					OpcodeTable:
>1200	01					.byte	$01			; $94 ora
>1201	21					.byte	$21			; $95 (and)
>1202	41					.byte	$41			; $96 eor
>1203	61					.byte	$61			; $97 adc
>1204	81					.byte	$81			; $98 sta
>1205	a1					.byte	$a1			; $99 lda
>1206	c1					.byte	$c1			; $9a cmp
>1207	e1					.byte	$e1			; $9b sbc
>1208	02					.byte	$02			; $9c asl
>1209	22					.byte	$22			; $9d rol
>120a	42					.byte	$42			; $9e lsr
>120b	62					.byte	$62			; $9f ror
>120c	82					.byte	$82			; $a0 stx
>120d	a2					.byte	$a2			; $a1 ldx
>120e	c2					.byte	$c2			; $a2 dec
>120f	e2					.byte	$e2			; $a3 inc
>1210	60					.byte	$60			; $a4 stz
>1211	20					.byte	$20			; $a5 bit
>1212	80					.byte	$80			; $a6 sty
>1213	a0					.byte	$a0			; $a7 ldy
>1214	c0					.byte	$c0			; $a8 cpy
>1215	e0					.byte	$e0			; $a9 cpx
>1216	00					.byte	$00			; $aa tsb
>1217	10					.byte	$10			; $ab trb
>1218	14					.byte	$14			; $ac jsr
>1219	40					.byte	$40			; $ad jmp
>121a	10					.byte	$10			; $ae bpl
>121b	30					.byte	$30			; $af bmi
>121c	50					.byte	$50			; $b0 bvc
>121d	70					.byte	$70			; $b1 bvs
>121e	90					.byte	$90			; $b2 bcc
>121f	b0					.byte	$b0			; $b3 bcs
>1220	d0					.byte	$d0			; $b4 bne
>1221	f0					.byte	$f0			; $b5 beq
>1222	80					.byte	$80			; $b6 bra
>1223	00					.byte	$00			; $b7 brk
>1224	08					.byte	$08			; $b8 php
>1225	18					.byte	$18			; $b9 clc
>1226	28					.byte	$28			; $ba plp
>1227	38					.byte	$38			; $bb sec
>1228	40					.byte	$40			; $bc rti
>1229	48					.byte	$48			; $bd pha
>122a	58					.byte	$58			; $be cli
>122b	5a					.byte	$5a			; $bf phy
>122c	60					.byte	$60			; $c0 rts
>122d	68					.byte	$68			; $c1 pla
>122e	78					.byte	$78			; $c2 sei
>122f	7a					.byte	$7a			; $c3 ply
>1230	88					.byte	$88			; $c4 dey
>1231	8a					.byte	$8a			; $c5 txa
>1232	98					.byte	$98			; $c6 tya
>1233	9a					.byte	$9a			; $c7 txs
>1234	a8					.byte	$a8			; $c8 tay
>1235	aa					.byte	$aa			; $c9 tax
>1236	b8					.byte	$b8			; $ca clv
>1237	ba					.byte	$ba			; $cb tsx
>1238	c8					.byte	$c8			; $cc iny
>1239	ca					.byte	$ca			; $cd dex
>123a	d8					.byte	$d8			; $ce cld
>123b	da					.byte	$da			; $cf phx
>123c	e8					.byte	$e8			; $d0 inx
>123d	ea					.byte	$ea			; $d1 nop
>123e	f8					.byte	$f8			; $d2 sed
>123f	fa					.byte	$fa			; $d3 plx
.1240					Group2OpcodeAvailability:
>1240	ae					.byte	$ae			; $9c asl $02
>1241	ae					.byte	$ae			; $9d rol $22
>1242	ae					.byte	$ae			; $9e lsr $42
>1243	ae					.byte	$ae			; $9f ror $62
>1244	0a					.byte	$0a			; $a0 stx $82
>1245	0b					.byte	$0b			; $a1 ldx $a2
>1246	aa					.byte	$aa			; $a2 dec $c2
>1247	aa					.byte	$aa			; $a3 inc $e2
>1248	22					.byte	$22			; $a4 stz $60
>1249	aa					.byte	$aa			; $a5 bit $20
>124a	2a					.byte	$2a			; $a6 sty $80
>124b	ab					.byte	$ab			; $a7 ldy $a0
>124c	2b					.byte	$2b			; $a8 cpy $c0
>124d	0b					.byte	$0b			; $a9 cpx $e0
>124e	0a					.byte	$0a			; $aa tsb $00
>124f	0a					.byte	$0a			; $ab trb $10
>1250	08					.byte	$08			; $ac jsr $14
>1251	08					.byte	$08			; $ad jmp $40
.1252					AssemblerSpecialCases:
>1252	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>1255	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>1258	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>125b	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>125e	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1261	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>1264	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>1267	a5 00 89				.byte	$a5,0,$89		; bit #
>126a	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>126d	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1270	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1271					AssembleLabel:
.1271	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1273	c9 3a		cmp #$3a			cmp 	#$3A 						; e.g. it isn't just '.'
.1275	b0 49		bcs $12c0			bcs 	_ALSyntax
.1277	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.1279	a2 02		ldx #$02		ldx	#2
.127b	20 5c 4f	jsr $4f5c		jsr	variableHandler
.127e	a5 90		lda $90				lda 	esType 						; check integer reference
.1280	c9 80		cmp #$80			cmp 	#$80
.1282	d0 3c		bne $12c0			bne 	_ALSyntax
.1284	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.1286	85 2a		sta $2a				sta 	temp0
.1288	a5 a0		lda $a0				lda 	esInt1
.128a	85 2b		sta $2b				sta 	temp0+1
.128c	5a		phy				phy
.128d	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2 ?
.1290	4a		lsr a				lsr 	a
.1291	90 11		bcc $12a4			bcc 	_ALWrite
.1293	a0 00		ldy #$00			ldy 	#0
.1295	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.1298	d1 2a		cmp ($2a),y			cmp 	(temp0),y 					; labels cannot change value, usually means address mode has changed.
.129a	d0 1f		bne $12bb			bne 	_ALChanged
.129c	c8		iny				iny
.129d	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a0	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a2	d0 17		bne $12bb			bne 	_ALChanged
.12a4					_ALWrite:
.12a4	a0 00		ldy #$00			ldy 	#0
.12a6	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12a9	91 2a		sta ($2a),y			sta 	(temp0),y
.12ab	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12ae	c8		iny				iny
.12af	91 2a		sta ($2a),y			sta 	(temp0),y
.12b1	a9 00		lda #$00			lda 	#0
.12b3	c8		iny				iny
.12b4	91 2a		sta ($2a),y			sta 	(temp0),y
.12b6	c8		iny				iny
.12b7	91 2a		sta ($2a),y			sta 	(temp0),y
.12b9	7a		ply				ply
.12ba	60		rts				rts
.12bb					_ALChanged:
.12bb	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12bd	20 27 15	jsr $1527		jsr	errorHandler
.12c0					_ALSyntax:
.12c0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12c2	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12c5					AssembleGroup1:
.12c5	ad f5 0a	lda $0af5			lda 	asmToken 					; firstly, we throw out STA immediate
.12c8	c9 98		cmp #$98			cmp 	#TKW_STA
.12ca	d0 07		bne $12d3			bne 	_AG1NotStoreImm
.12cc	ad f6 0a	lda $0af6			lda 	asmMode
.12cf	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d1	f0 2c		beq $12ff			beq 	AG1ModeError
.12d3					_AG1NotStoreImm:
.12d3	ae f6 0a	ldx $0af6			ldx 	asmMode						; get mode into X.
.12d6	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12d9	48		pha				pha
.12da	f0 23		beq $12ff			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12dc	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12de	d0 02		bne $12e2			bne 	_AG1NotImmediate
.12e0	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12e2					_AG1NotImmediate:
.12e2	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12e4	d0 02		bne $12e8			bne 	_AG1NotZX
.12e6	a2 00		ldx #$00			ldx 	#0
.12e8					_AG1NotZX:
.12e8	68		pla				pla 								; restore length
.12e9	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12eb	b0 10		bcs $12fd			bcs 	AG1Fail
.12ed					AG1ReturnValue:
.12ed	85 32		sta $32				sta 	tempShort 					; save size of operand
.12ef	18		clc				clc
.12f0	bd 12 13	lda $1312,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12f3	6d f7 0a	adc $0af7			adc 	asmBaseOpcode 				; add the base opcode.
.12f6	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12f8	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.12fb	38		sec				sec
.12fc	60		rts				rts
.12fd					AG1Fail:
.12fd	18		clc				clc
.12fe	60		rts				rts
.12ff					AG1ModeError:
.12ff	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1301	20 27 15	jsr $1527		jsr	errorHandler
.1304					AMDOperandSize:
>1304	01 01 00 02					.byte 	1,1,0,2
>1308	01 01 02 02					.byte 	1,1,2,2
>130c	01 01 02 02					.byte 	1,1,2,2
>1310	01 01						.byte 	1,1
.1312					AMDOffsetFromBase:
>1312	00 04 08 0c					.byte 	0,4,8,12
>1316	10 14 18 1c					.byte	16,20,24,28
>131a	11 00 00 00					.byte 	17,0,0,0
>131e	00 00						.byte 	0,0
.1320					AssembleGroup2:
.1320	ad f6 0a	lda $0af6			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.1323	c9 08		cmp #$08			cmp 	#8
.1325	b0 18		bcs $133f			bcs 	_AG2Fail
.1327	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1329	ae f5 0a	ldx $0af5			ldx 	asmToken					; get token in X, then get the availability flags for it
.132c	bd a4 11	lda $11a4,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.132f					_AG2Shift:
.132f	4a		lsr a				lsr 	a
.1330	c6 2a		dec $2a				dec 	temp0
.1332	10 fb		bpl $132f			bpl 	_AG2Shift
.1334	90 09		bcc $133f			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.1336	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.1339	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.133c	4c ed 12	jmp $12ed			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.133f					_AG2Fail:
.133f	18		clc				clc
.1340	60		rts				rts
.1341					AssembleGroup3:
.1341	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.1344	4a		lsr a				lsr 	a
.1345	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.1347	90 21		bcc $136a			bcc 	_AG3Default
.1349	38		sec				sec	 								; calculate branch offset
.134a	a5 98		lda $98				lda		esInt0
.134c	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.134f	aa		tax				tax
.1350	a5 a0		lda $a0				lda		esInt1
.1352	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.1355	85 a0		sta $a0				sta 	esInt1
.1357	8a		txa				txa 								; add 126, now 128 too many.
.1358	18		clc				clc 								; we can use this to check the range
.1359	69 7e		adc #$7e			adc 	#126
.135b	85 98		sta $98				sta 	esInt0
.135d	90 02		bcc $1361			bcc 	_AG3NoCarry
.135f	e6 a0		inc $a0				inc 	esInt1
.1361					_AG3NoCarry:
.1361	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.1363	d0 0b		bne $1370			bne 	_AG3Range
.1365	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.1367	38		sec				sec
.1368	e9 80		sbc #$80			sbc 	#128
.136a					_AG3Default:
.136a	85 98		sta $98				sta 	esInt0
.136c					_AG3ExitOk:
.136c	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.136e	d0 07		bne $1377			bne 	AG4Write
.1370					_AG3Range:
.1370	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.1372	20 27 15	jsr $1527		jsr	errorHandler
.1375					AssembleGroup4:
.1375	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1377					AG4Write:
.1377	ad f7 0a	lda $0af7			lda 	asmBaseOpcode				; the opcode is the opcode base.
.137a	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.137d	38		sec				sec
.137e	60		rts				rts
.137f					AssembleSpecialCase:
.137f	a2 00		ldx #$00			ldx 	#0
.1381					_ASCScan:
.1381	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.1384	cd f5 0a	cmp $0af5			cmp 	asmToken
.1387	d0 08		bne $1391			bne 	_ASCNext
.1389	bd 53 12	lda $1253,x			lda 	AssemblerSpecialCases+1,x
.138c	cd f6 0a	cmp $0af6			cmp 	asmMode
.138f	f0 0a		beq $139b			beq 	_ASCFound
.1391					_ASCNext:
.1391	e8		inx				inx									; next entry
.1392	e8		inx				inx
.1393	e8		inx				inx
.1394	bd 52 12	lda $1252,x			lda 	AssemblerSpecialCases,x 	; until table ends
.1397	d0 e8		bne $1381			bne 	_ASCScan
.1399	18		clc				clc
.139a	60		rts				rts
.139b					_ASCFound:
.139b	bd 54 12	lda $1254,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.139e	48		pha				pha
.139f	ae f6 0a	ldx $0af6			ldx  	asmMode 					; mode in X
.13a2	bd 04 13	lda $1304,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13a5	aa		tax				tax
.13a6	68		pla				pla 								; opcode back
.13a7	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13aa	38		sec				sec
.13ab	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13ac					assemblerHandler:
.13ac	7c af 13	jmp ($13af,x)			jmp 	(assemblerVectors,x)
.13af					assemblerVectors:
>13af	b5 13					.word _DummyControlHandler ; index 0
>13b1	9f 11					.word AssembleOneInstruction ; index 2
>13b3	71 12					.word AssembleLabel        ; index 4
.13b5					_DummyControlHandler:
.13b5	60		rts			rts

;******  Return to file: basic.asm

.13b6					section_end_assembler:
.13b6					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13b6					X16SyncBreak:
.13b6	5a		phy				phy
.13b7	20 de ff	jsr $ffde			jsr 	KNLReadTimer
.13ba	ac e8 0b	ldy $0be8			ldy 	nextSyncTick 				; if NST = 0 then always sync
.13bd	a8		tay				tay 								; save tick in Y
.13be	38		sec				sec
.13bf	ed e8 0b	sbc $0be8			sbc 	nextSyncTick 				; calculate timer - next tick
.13c2	30 0c		bmi $13d0			bmi 	_X16NoSync 					; if -ve then no sync.
.13c4					_X16Sync:
.13c4	98		tya				tya 								; get current time back
.13c5	18		clc				clc 								; work out time of next tick.
.13c6	69 06		adc #$06			adc 	#6 							; at 60Hz that is six ticks.
.13c8	8d e8 0b	sta $0be8			sta 	nextSyncTick
.13cb	a9 fd		lda #$fd			lda 	#$FD 						; call the extension update code.
.13cd	20 8a 18	jsr $188a		jsr	extensionHandler
.13d0					_X16NoSync:
.13d0	7a		ply				ply
.13d1	20 e1 ff	jsr $ffe1			jsr 	KNLCheckBreak
.13d4	f0 01		beq $13d7			beq 	_IsBreak
.13d6	60		rts				rts
.13d7					_IsBreak:
.13d7	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13d9	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13dc					ExternSave:
.13dc	5a		phy				phy
.13dd	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.13e0	20 bd ff	jsr $ffbd			jsr 	KNLFileSetName 				; set name
.13e3	a9 01		lda #$01			lda 	#1
.13e5	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13e7	a0 00		ldy #$00			ldy 	#0
.13e9	20 ba ff	jsr $ffba			jsr 	KNLFileSetLFS 				; set LFS
.13ec	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13ee	85 2a		sta $2a				sta 	temp0
.13f0	a5 a1		lda $a1				lda 	esInt1+1
.13f2	85 2b		sta $2b				sta 	temp0+1
.13f4	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13f6	a4 a2		ldy $a2				ldy 	esInt1+2
.13f8	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13fa	20 d8 ff	jsr $ffd8			jsr 	KNLFileSave 				; save
.13fd	b0 02		bcs $1401			bcs 	_ESSave
.13ff	7a		ply				ply
.1400	60		rts				rts
.1401					_ESSave:
.1401	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.1403	20 27 15	jsr $1527		jsr	errorHandler
.1406					ExternLoad:
.1406	5a		phy				phy
.1407	20 28 14	jsr $1428			jsr 	ExternGetLength 			; get length of file into A name YX
.140a	20 bd ff	jsr $ffbd			jsr 	KNLFileSetName 				; set name
.140d	a9 01		lda #$01			lda 	#1
.140f	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1411	a0 00		ldy #$00			ldy 	#0
.1413	20 ba ff	jsr $ffba			jsr 	KNLFileSetLFS 				; set LFS
.1416	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1418	a4 a1		ldy $a1				ldy 	esInt1+1
.141a	a9 00		lda #$00			lda 	#0 							; load command
.141c	20 d5 ff	jsr $ffd5			jsr 	KNLFileLoad
.141f	b0 02		bcs $1423			bcs 	_ESLoad
.1421	7a		ply				ply
.1422	60		rts				rts
.1423					_ESLoad:
.1423	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1425	20 27 15	jsr $1527		jsr	errorHandler
.1428					ExternGetLength:
.1428	a5 98		lda $98				lda 	esInt0 						; length into A.
.142a	85 2a		sta $2a				sta 	temp0
.142c	a5 a0		lda $a0				lda 	esInt1
.142e	85 2b		sta $2b				sta 	temp0+1
.1430	a0 00		ldy #$00			ldy 	#0
.1432	b1 2a		lda ($2a),y			lda 	(temp0),y
.1434	a6 98		ldx $98				ldx 	esInt0 						; name string address into YX
.1436	a4 a0		ldy $a0				ldy 	esInt1
.1438	e8		inx				inx 								; advance over the length byte.
.1439	d0 01		bne $143c			bne 	_ESNoCarry
.143b	c8		iny				iny
.143c					_ESNoCarry:
.143c	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af8					bufferCount:
>0af8							.fill 	0
.0af8					bufferStorage:
>0af8							.fill 	MaxLineInputSize
.0be8					nextSyncTick:
>0be8							.fill 	0
.143d					IOControlHandler:
.143d	c9 00		cmp #$00			cmp 	#0
.143f	d0 15		bne $1456			bne		_CHExit
.1441	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1443	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1446	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1448	20 99 14	jsr $1499			jsr 	IOInk
.144b	a9 00		lda #$00			lda 	#0
.144d	8d e8 0b	sta $0be8			sta 	nextSyncTick
.1450	20 ad 14	jsr $14ad			jsr 	IOPaper
.1453	20 57 14	jsr $1457			jsr 	IOClearScreen
.1456					_CHExit:
.1456	60		rts				rts
.1457					IOClearScreen:
.1457	48		pha				pha
.1458	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.145a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.145d	68		pla				pla
.145e	60		rts				rts
.145f					IONewLine:
.145f	48		pha				pha
.1460	a9 0d		lda #$0d			lda 	#13
.1462	20 6f 14	jsr $146f			jsr 	IOPrintChar
.1465	68		pla				pla
.1466	60		rts				rts
.1467					IOTab:
.1467	48		pha				pha
.1468	a9 20		lda #$20			lda 	#32
.146a	20 6f 14	jsr $146f			jsr 	IOPrintChar
.146d	68		pla				pla
.146e	60		rts				rts
.146f					IOPrintAscii:
.146f					IOPrintChar:
.146f	aa		tax				tax 								; save in X so we can save Y
.1470	5a		phy				phy
.1471	8a		txa				txa
.1472	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1474	d0 02		bne $1478			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1476	a9 14		lda #$14			lda 	#$14
.1478					_IOPCNotBS:
.1478	20 d2 ff	jsr $ffd2			jsr 	KNLPrintChar 				; CBM OS Call.
.147b	7a		ply				ply
.147c	60		rts				rts
.147d					IOInkey:
.147d	5a		phy				phy
.147e	20 e4 ff	jsr $ffe4			jsr 	KNLCheckKeyboarBuffer
.1481	85 32		sta $32				sta 	tempShort
.1483	7a		ply				ply
.1484	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1486	f0 10		beq $1498			beq 	_IOIExit
.1488	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.148a	f0 0c		beq $1498			beq 	_IOIExit
.148c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.148e	f0 06		beq $1496			beq 	_IOIBackspace
.1490	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1492	90 e9		bcc $147d			bcc 	IOInkey
.1494	b0 02		bcs $1498			bcs 	_IOIExit
.1496					_IOIBackspace:
.1496	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1498					_IOIExit:
.1498	60		rts				rts
.1499					IOInk:
.1499	48		pha				pha
.149a	29 07		and #$07			and 	#7 							; 8 primaries
.149c	aa		tax				tax
.149d	bd a5 14	lda $14a5,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.14a0	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14a3	68		pla				pla
.14a4	60		rts				rts
.14a5					_IOColourTable:
>14a5	90						.byte 	$90 					; 0 Black
>14a6	96						.byte 	$96 					; 1 Red
>14a7	1e						.byte 	$1E 					; 2 Green
>14a8	9e						.byte 	$9E 					; 3 Yellow
>14a9	9a						.byte 	$9A 					; 4 Blue
>14aa	9c						.byte 	$9C 					; 5 Magenta
>14ab	9f						.byte 	$9F 					; 6 Cyan
>14ac	05						.byte 	$05 					; 7 White
.14ad					IOPaper:
.14ad	48		pha				pha
.14ae	48		pha				pha
.14af	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14b1	20 6f 14	jsr $146f			jsr 	IOPrintChar 			; and then swap them again.
.14b4	68		pla				pla
.14b5	20 99 14	jsr $1499			jsr 	IOInk
.14b8	a9 01		lda #$01			lda 	#1
.14ba	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14bd	68		pla				pla
.14be	60		rts				rts
.14bf					IOLocate:
.14bf	48		pha				pha
.14c0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14c2	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14c5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14c7	20 cd 14	jsr $14cd			jsr 	_IOLoc2
.14ca	7a		ply				ply
.14cb	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14cd					_IOLoc2:
.14cd	c0 00		cpy #$00			cpy 	#0
.14cf	f0 06		beq $14d7			beq 	_IOLocExit
.14d1	20 6f 14	jsr $146f			jsr 	IOPrintChar
.14d4	88		dey				dey
.14d5	d0 f6		bne $14cd			bne 	_IOLoc2
.14d7					_IOLocExit:
.14d7	60		rts				rts
.14d8					IOInput:
.14d8	a9 00		lda #$00			lda 	#0
.14da	8d f8 0a	sta $0af8			sta 	bufferCount
.14dd					_IOILoop:
.14dd	20 cf ff	jsr $ffcf			jsr 	KNLInputLine
.14e0	c9 0d		cmp #$0d			cmp 	#13
.14e2	f0 10		beq $14f4			beq 	_IOIExit
.14e4	ae f8 0a	ldx $0af8			ldx 	bufferCount
.14e7	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14e9	f0 f2		beq $14dd			beq 	_IOILoop
.14eb	ee f8 0a	inc $0af8			inc 	bufferCount
.14ee	9d f9 0a	sta $0af9,x			sta 	bufferStorage+1,x
.14f1	4c dd 14	jmp $14dd			jmp 	_IOILoop
.14f4					_IOIExit:
.14f4	a9 f8		lda #$f8			lda 	#(bufferCount) & $FF
.14f6	85 2a		sta $2a				sta 	temp0
.14f8	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14fa	85 2b		sta $2b				sta 	1+(temp0)
.14fc	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14fd					IOReadTimer:
.14fd	20 de ff	jsr $ffde			jsr 	KNLReadTimer 				; reads timer into YXA so we want only YA
.1500	48		pha				pha
.1501	8a		txa				txa
.1502	a8		tay				tay
.1503	68		pla				pla
.1504	60		rts				rts

;******  Return to file: device/device.asm

.1505					deviceHandler:
.1505	7c 08 15	jmp ($1508,x)			jmp 	(deviceVectors,x)
.1508					deviceVectors:
>1508	3d 14					.word IOControlHandler     ; index 0
>150a	57 14					.word IOClearScreen        ; index 2
>150c	5f 14					.word IONewLine            ; index 4
>150e	99 14					.word IOInk                ; index 6
>1510	7d 14					.word IOInkey              ; index 8
>1512	d8 14					.word IOInput              ; index 10
>1514	06 14					.word ExternLoad           ; index 12
>1516	bf 14					.word IOLocate             ; index 14
>1518	ad 14					.word IOPaper              ; index 16
>151a	6f 14					.word IOPrintChar          ; index 18
>151c	6f 14					.word IOPrintAscii         ; index 20
>151e	dc 13					.word ExternSave           ; index 22
>1520	b6 13					.word X16SyncBreak         ; index 24
>1522	67 14					.word IOTab                ; index 26
>1524	fd 14					.word IOReadTimer          ; index 28
.1526					_DummyControlHandler:
.1526	60		rts			rts

;******  Return to file: basic.asm

.1527					section_end_device:
.1527					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1527					ErrorHandler:
.1527	da		phx				phx
.1528	a9 01		lda #$01			lda 	#1 							; red
.152a	a2 06		ldx #$06		ldx	#6
.152c	20 05 15	jsr $1505		jsr	deviceHandler
.152f	fa		plx				plx
.1530	a9 9b		lda #$9b			lda 	#(ErrorTextList) & $FF
.1532	85 2a		sta $2a				sta 	temp0
.1534	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1536	85 2b		sta $2b				sta 	1+(temp0)
.1538	ca		dex		_EHFind:dex									; errors start at 1
.1539	f0 10		beq $154b			beq 	_EHFound
.153b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.153d	38		sec				sec
.153e	a5 2a		lda $2a				lda 	temp0
.1540	71 2a		adc ($2a),y			adc 	(temp0),y
.1542	85 2a		sta $2a				sta 	temp0
.1544	90 f2		bcc $1538			bcc 	_EHFind
.1546	e6 2b		inc $2b				inc 	temp0+1
.1548	4c 38 15	jmp $1538			jmp 	_EHFind
.154b					_EHFound:
.154b	20 75 18	jsr $1875			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.154e	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1550	b1 28		lda ($28),y			lda 	(codePtr),y
.1552	f0 39		beq $158d			beq 	_EHNoLine
.1554	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1556	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1559	90 32		bcc $158d			bcc 	_EHNoLine
.155b	a9 97		lda #$97			lda 	#(EHAtMsg) & $FF
.155d	85 2a		sta $2a				sta 	temp0
.155f	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1561	85 2b		sta $2b				sta 	1+(temp0)
.1563	20 75 18	jsr $1875			jsr 	EHPrintAscii
.1566	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1568	a2 00		ldx #$00			ldx 	#0
.156a	b1 28		lda ($28),y			lda 	(codePtr),y
.156c	95 98		sta $98,x			sta 	esInt0,x
.156e	c8		iny				iny
.156f	b1 28		lda ($28),y			lda 	(codePtr),y
.1571	95 a0		sta $a0,x			sta 	esInt1,x
.1573	a9 00		lda #$00			lda 	#0
.1575	95 a8		sta $a8,x			sta 	esInt2,x
.1577	95 b0		sta $b0,x			sta 	esInt3,x
.1579	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.157b	85 2a		sta $2a				sta 	temp0
.157d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.157f	85 2b		sta $2b				sta 	1+(temp0)
.1581	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1583	a9 00		lda #$00			lda 	#0							; stack position zero.
.1585	a2 12		ldx #$12		ldx	#18
.1587	20 65 40	jsr $4065		jsr	mainHandler
.158a	20 75 18	jsr $1875			jsr 	EHPrintAscii
.158d					_EHNoLine:
.158d	a2 04		ldx #$04		ldx	#4
.158f	20 05 15	jsr $1505		jsr	deviceHandler
.1592	a2 04		ldx #$04		ldx	#4
.1594	20 02 2a	jsr $2a02		jsr	interactionHandler
.1597					EHAtMsg:
>1597	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.159b					ErrorTextList:
>159b	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>15a3	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15af	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15b7	45 72 72 6f 72
>15bc	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15c4	64 69 73 61 62 6c 65 64
>15cc	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15d4	6f 6e 20 66 61 69 6c 65 64
>15dd	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15e5	42 79 20 5a 65 72 6f
>15ec	04 53 74 6f 70				.text 4,"Stop"
>15f1	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15f9	73 6d 61 74 63 68
>15ff	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1607	20 56 61 6c 75 65
>160d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1615	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1623	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>162b	20 63 6f 6d 6d 61
>1631	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1639	20 72 65 66 65 72 65 6e 63 65
>1643	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>164b	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1659	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1661	74 6f 6f 20 6c 6f 6e 67
>1669	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1671	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>167e	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1686	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1693	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>169b	74 68 6f 75 74 20 46 4f 52
>16a4	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>16ac	74 68 6f 75 74 20 57 48 49 4c 45
>16b7	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16bf	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16cc	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16d4	54 20 69 6e 64 65 78
>16db	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16e3	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16f3	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16fb	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>170a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1712	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1722	63 65
>1724	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>172c	20 50 72 6f 63 65 64 75 72 65
>1736	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>173e	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>174e	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1756	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1764	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>176c	75 69 72 65 73 20 61 72 72 61 79
>1777	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>177f	61 79 20 69 6e 64 65 78
>1787	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>178f	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>179f	6e 64 69 63 65 73
>17a5	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17ad	64 61 74 61
>17b1	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17b9	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17c6	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17ce	69 6c 65 64
>17d2	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17da	69 6c 65 64
>17de	05 42 72 65 61 6b			.text 5,"Break"
>17e4	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17ec	6d 65 6d 6f 72 79
>17f2	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17fa	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>1809	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1811	72 61 6e 64 2f 4d 6f 64 65
>181a	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1822	6f 75 74 20 6f 66 20 72 61 6e 67 65
>182e	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1836	68 61 6e 67 65 64 20 76 61 6c 75 65
>1842	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>184a	74 65 20 53 65 6c 65 63 74 65 64
>1855	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>185d	65
>185e	15 4e 6f 20 67 72 61 70			.text 21,"No graphics available"
>1866	68 69 63 73 20 61 76 61 69 6c 61 62 6c 65
>1874	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1875					EHPrintAscii:
.1875	a0 00		ldy #$00			ldy 	#0
.1877	b1 2a		lda ($2a),y			lda 	(temp0),y
.1879	aa		tax				tax
.187a	f0 0d		beq $1889			beq 	_EHPExit
.187c					_EHPLoop:
.187c	c8		iny				iny
.187d	da		phx				phx
.187e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1880	a2 14		ldx #$14		ldx	#20
.1882	20 05 15	jsr $1505		jsr	deviceHandler
.1885	fa		plx				plx
.1886	ca		dex				dex
.1887	d0 f3		bne $187c			bne 	_EHPLoop
.1889					_EHPExit:
.1889	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.188a					section_end_error:
.188a					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.188a					ExtensionHandler:
.188a	c9 fd		cmp #$fd			cmp 	#$FD 						; check for sync
.188c	f0 21		beq $18af			beq 	_ExtensionSync
.188e	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1890	f0 16		beq $18a8			beq 	_ExtensionForce
.1892	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1894	d0 08		bne $189e			bne 	_ExtensionUnary 			; is passed in A.
.1896	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1898	c8		iny				iny
.1899	0a		asl a				asl 	a
.189a	aa		tax				tax
.189b	7c a6 18	jmp ($18a6,x)			jmp 	(Group2Vectors-12,x)
.189e					_ExtensionUnary:
.189e	48		pha				pha 								; save stack pos in A
.189f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.18a1	c8		iny				iny
.18a2	0a		asl a				asl 	a
.18a3	aa		tax				tax
.18a4	68		pla				pla 								; restore stack pos and call group3 command.
.18a5	7c c2 18	jmp ($18c2,x)			jmp 	(Group3Vectors-12,x)
.18a8					_ExtensionForce:
.18a8	20 1c 20	jsr $201c			jsr 	SoundReset 					; all sound off as not updated
.18ab	20 d7 24	jsr $24d7			jsr 	ForceMode0 					; switch to mode 0 perhaps
.18ae	60		rts				rts
.18af					_ExtensionSync:
.18af	4c 06 21	jmp $2106			jmp 	SoundInterrupt

;******  Processing file: extension/../generated/tokenvectors2.inc

.18b2					Group2Vectors:
>18b2	b4 26					.word	Command_VPoke            ; $86 vpoke
>18b4	b7 26					.word	Command_VDoke            ; $87 vdoke
>18b6	8c 26					.word	Command_VLoad            ; $88 vload
>18b8	e9 24					.word	CommandMode              ; $89 mode
>18ba	a8 25					.word	CommandPalette           ; $8a palette
>18bc	ef 21					.word	CommandSprite            ; $8b sprite
>18be	0e 1e					.word	CommandClg               ; $8c clg
>18c0	10 1b					.word	Command_Rect             ; $8d rect
>18c2	18 1b					.word	Command_Frame            ; $8e frame
>18c4	df 25					.word	Command_Draw             ; $8f draw
>18c6	fd 1a					.word	Command_Plot             ; $90 plot
>18c8	d7 19					.word	Command_Line             ; $91 line
>18ca	3a 23					.word	Command_Paint            ; $92 paint
>18cc	4b 20					.word	CommandSound             ; $93 sound

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18ce					Group3Vectors:
>18ce	00 27					.word	Command_VPeek            ; $86 vpeek(
>18d0	03 27					.word	Command_VDeek            ; $87 vdeek(
>18d2	82 24					.word	Sprite_GetX              ; $88 sprite.x(
>18d4	85 24					.word	Sprite_GetY              ; $89 sprite.y(
>18d6	37 21					.word	FunctionCollide          ; $8a hit(
>18d8	ad 1e					.word	Unary_JoyX               ; $8b joy.x(
>18da	b0 1e					.word	Unary_JoyY               ; $8c joy.y(
>18dc	f2 1e					.word	Unary_JButton            ; $8d joy.b(
>18de	82 1e					.word	Unary_Clock              ; $8e clock(
>18e0	cb 1f					.word	Unary_Playing            ; $8f playing(

;******  Return to file: extension/extensionhandler.asm

.18e2					XEvaluateInteger:
.18e2	8a		txa				txa
.18e3	a2 0a		ldx #$0a		ldx	#10
.18e5	20 65 40	jsr $4065		jsr	mainHandler
.18e8	aa		tax				tax
.18e9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be8					gStartStorage:
.0be8					gCurrentXPos:
>0be8							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0bea					gCurrentYPos:
>0bea							.fill 	2
.0bec					gX1:
>0bec							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bee					gY1:
>0bee							.fill 	2
.0bf0					gX2:
>0bf0							.fill 	2
.0bf2					gY2:
>0bf2							.fill 	2
.0bf4					gError:
>0bf4							.fill 	2
.0bf6					g2Error:
>0bf6							.fill 	2
.0bf8					gdx:
>0bf8							.fill 	2
.0bfa					gdy:
>0bfa							.fill 	2
.0bfc					gWordHandler:
>0bfc							.fill 	2
.0bfe					gModifiers:
.0bfe					gdInk:
>0bfe							.fill 	1
.0bff					gdPaper:
>0bff							.fill 	1
.0c00					gdSize:
>0c00							.fill 	1
.0c01					gdImage:
>0c01							.fill 	1
.0c02					gdFlip:
>0c02							.fill 	1
.0c03					gEndStorage:
.0c03					gdXLimit:
>0c03							.fill 	2
.0c05					gdYLimit:
>0c05							.fill 	2
.0c07					gdText:
>0c07							.fill 	2
.18ea					GResetStorage:
.18ea	da		phx				phx
.18eb	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18ed	a9 00		lda #$00			lda 	#0
.18ef					_GRSLoop:
.18ef	9d e8 0b	sta $0be8,x			sta 	gStartStorage,x
.18f2	ca		dex				dex
.18f3	10 fa		bpl $18ef			bpl 	_GRSLoop
.18f5	a9 01		lda #$01			lda 	#1 	 						; ink and size both 1, sensible defaults.
.18f7	8d fe 0b	sta $0bfe			sta 	gdInk
.18fa	8d 00 0c	sta $0c00			sta 	gdSize
.18fd	fa		plx				plx
.18fe	60		rts				rts
.18ff					GHandler:
.18ff	8e fd 0b	stx $0bfd			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.1902	8d fc 0b	sta $0bfc			sta 	gWordHandler
.1905	ad 50 0c	lda $0c50			lda 	gdEnabled 					; check graphics available
.1908	f0 73		beq $197d			beq 	_GHNoGraphics
.190a	a9 00		lda #$00			lda 	#0							; default no text.
.190c	8d 08 0c	sta $0c08			sta 	gdText+1
.190f	88		dey				dey 								; predecrement
.1910					_GHLoopNext:
.1910	c8		iny				iny									; advance one character
.1911					_GHLoop:
.1911	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.1913	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.1915	f0 f9		beq $1910			beq 	_GHLoopNext
.1917	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.1919	f0 4c		beq $1967			beq 	_GHExit
.191b	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.191d	f0 48		beq $1967			beq 	_GHExit
.191f	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.1921	f0 35		beq $1958			beq 	_GHCallHandler 				; update post & call the handler
.1923	c9 ce		cmp #$ce			cmp 	#TKW_TO
.1925	f0 31		beq $1958			beq 	_GHCallHandler
.1927	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.1929	f0 14		beq $193f			beq 	_GHCPairSkip
.192b	c9 e9		cmp #$e9			cmp 	#TKW_TEXT
.192d	f0 39		beq $1968			beq 	_GHText
.192f	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.1931					_GHCheckTokens:
.1931	b1 28		lda ($28),y			lda 	(codePtr),y
.1933	dd 82 19	cmp $1982,x			cmp 	_GHTokenTable,x
.1936	f0 0e		beq $1946			beq 	_GHFoundToken
.1938	e8		inx				inx
.1939	bd 82 19	lda $1982,x			lda 	_GHTokenTable,x
.193c	d0 f3		bne $1931			bne 	_GHCheckTokens
.193e	88		dey				dey
.193f					_GHCPairSkip:
.193f	c8		iny				iny
.1940					_GHCPair:
.1940	20 88 19	jsr $1988			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1943	4c 11 19	jmp $1911			jmp 	_GHLoop
.1946					_GHFoundToken:
.1946	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1947	da		phx				phx
.1948	a9 00		lda #$00			lda 	#0 							; evaluate byte
.194a	a2 0c		ldx #$0c		ldx	#12
.194c	20 65 40	jsr $4065		jsr	mainHandler
.194f	fa		plx				plx
.1950	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1952	9d fe 0b	sta $0bfe,x			sta 	gModifiers,x 				; update the modifiers
.1955	4c 11 19	jmp $1911			jmp 	_GHLoop 					; and loop back
.1958					_GHCallHandler:
.1958	c8		iny				iny 								; consume AT or TO.
.1959	20 88 19	jsr $1988			jsr 	GHMakeCurrent 				; update the coordinates.
.195c	5a		phy				phy
.195d	20 64 19	jsr $1964			jsr 	_GHCallHandlerCode 			; call the handler code
.1960	7a		ply				ply
.1961	4c 11 19	jmp $1911			jmp 	_GHLoop 					; and loop round.
.1964					_GHCallHandlerCode:
.1964	6c fc 0b	jmp ($0bfc)			jmp 	(gWordHandler)
.1967					_GHExit:
.1967	60		rts				rts
.1968					_GHText:
.1968	c8		iny				iny 								; skip token
.1969	a9 00		lda #$00			lda 	#0 							; get string.
.196b	a2 0e		ldx #$0e		ldx	#14
.196d	20 65 40	jsr $4065		jsr	mainHandler
.1970	a5 98		lda $98				lda 	esInt0 						; copy address of string.
.1972	8d 07 0c	sta $0c07			sta 	gdText
.1975	a5 a0		lda $a0				lda 	esInt1
.1977	8d 08 0c	sta $0c08			sta 	gdText+1
.197a	4c 11 19	jmp $1911			jmp 	_GHLoop
.197d					_GHNoGraphics:
.197d	a2 29		ldx #$29			ldx 	#ErrorID_NoGfx
.197f	20 27 15	jsr $1527		jsr	errorHandler
.1982					_GHTokenTable:
>1982	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>1987	00						.byte 	0
.1988					GHMakeCurrent:
.1988	da		phx				phx
.1989	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.198b	20 9a 19	jsr $199a			jsr 	_GHMCDoIt
.198e	a2 02		ldx #$02		ldx	#2
.1990	20 65 40	jsr $4065		jsr	mainHandler
.1993	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.1995	20 9a 19	jsr $199a			jsr 	_GHMCDoIt
.1998	fa		plx				plx
.1999	60		rts				rts
.199a					_GHMCDoIt:
.199a	bd e8 0b	lda $0be8,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.199d	9d ec 0b	sta $0bec,x			sta 	gX1,x
.19a0	bd e9 0b	lda $0be9,x			lda 	gCurrentXPos+1,x
.19a3	9d ed 0b	sta $0bed,x			sta 	gX1+1,x
.19a6	da		phx				phx
.19a7	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.19a9	a2 0a		ldx #$0a		ldx	#10
.19ab	20 65 40	jsr $4065		jsr	mainHandler
.19ae	fa		plx				plx
.19af	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.19b1	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.19b4	a5 a0		lda $a0				lda 	esInt1
.19b6	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.19b9	b0 17		bcs $19d2			bcs 	_GMHCRange
.19bb	a5 a8		lda $a8				lda 	esInt2
.19bd	05 b0		ora $b0				ora 	esInt3
.19bf	d0 11		bne $19d2			bne 	_GMHCRange
.19c1	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.19c3	9d e8 0b	sta $0be8,x			sta 	gCurrentXPos,x
.19c6	9d f0 0b	sta $0bf0,x			sta 	gX2,x
.19c9	a5 a0		lda $a0				lda 	esInt1
.19cb	9d e9 0b	sta $0be9,x			sta 	gCurrentXPos+1,x
.19ce	9d f1 0b	sta $0bf1,x			sta 	gX2+1,x
.19d1	60		rts				rts
.19d2					_GMHCRange:
.19d2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19d4	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c09					gdySign:
>0c09							.fill 	1
.19d7					Command_Line:
.19d7	a9 df		lda #$df			lda 	#LineHandler & $FF
.19d9	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.19db	20 ff 18	jsr $18ff			jsr 	GHandler
.19de	60		rts				rts
.19df					LineHandler:
.19df	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.19e1	a0 04		ldy #$04			ldy 	#gX2-gX1
.19e3	20 bd 1c	jsr $1cbd			jsr 	CompareCoordsEq
.19e6	f0 09		beq $19f1			beq 	_LHRectCode
.19e8	a2 02		ldx #$02			ldx 	#gY1-gX1
.19ea	a0 06		ldy #$06			ldy 	#gY2-gX1
.19ec	20 bd 1c	jsr $1cbd			jsr 	CompareCoordsEq
.19ef	d0 03		bne $19f4			bne 	_LHLineDrawer
.19f1					_LHRectCode:
.19f1	4c 24 1b	jmp $1b24			jmp 	RectHandler
.19f4					_LHLineDrawer:
.19f4	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19f6	a0 04		ldy #$04			ldy 	#gX2-gX1
.19f8	20 a8 1c	jsr $1ca8			jsr 	CompareCoords
.19fb	90 0a		bcc $1a07			bcc 	_LHNoSwap
.19fd	20 f0 1c	jsr $1cf0			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.1a00	a2 02		ldx #$02			ldx 	#gY1-gX1
.1a02	a0 06		ldy #$06			ldy 	#gY2-gX1
.1a04	20 f0 1c	jsr $1cf0			jsr 	GSwapCoords
.1a07					_LHNoSwap:
.1a07	20 30 1a	jsr $1a30			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.1a0a	a0 00		ldy #$00			ldy 	#gX1-gX1
.1a0c	20 92 1c	jsr $1c92			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1a0f	b0 15		bcs $1a26			bcs 	_LHExit 					; line off screen.
.1a11					_LHDrawLoop:
.1a11	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.1a13	a0 04		ldy #$04			ldy 	#gX2-gX1
.1a15	20 bd 1c	jsr $1cbd			jsr 	CompareCoordsEq
.1a18	d0 0d		bne $1a27			bne 	_LHNextPixel
.1a1a	a2 06		ldx #$06			ldx 	#gY2-gX1
.1a1c	a0 06		ldy #$06			ldy 	#gY2-gX1
.1a1e	20 bd 1c	jsr $1cbd			jsr 	CompareCoordsEq
.1a21	d0 04		bne $1a27			bne 	_LHNextPixel
.1a23	20 6a 1d	jsr $1d6a			jsr 	gdPlotInk 					; plot the last pixel.
.1a26					_LHExit:
.1a26	60		rts				rts
.1a27					_LHNextPixel:
.1a27	20 6a 1d	jsr $1d6a			jsr 	gdPlotInk 					; plot the pixel.
.1a2a	20 84 1a	jsr $1a84			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.1a2d	4c 11 1a	jmp $1a11			jmp  	_LHDrawLoop 				; and loop back if okay
.1a30					BresenhamInitialise:
.1a30	38		sec				sec
.1a31	ad f0 0b	lda $0bf0			lda 	gX2
.1a34	ed ec 0b	sbc $0bec			sbc 	gX1
.1a37	8d f8 0b	sta $0bf8			sta 	gdX
.1a3a	ad f1 0b	lda $0bf1			lda 	gX2+1
.1a3d	ed ed 0b	sbc $0bed			sbc 	gX1+1
.1a40	8d f9 0b	sta $0bf9			sta 	gdX+1
.1a43	38		sec				sec
.1a44	ad ee 0b	lda $0bee			lda 	gY1
.1a47	ed f2 0b	sbc $0bf2			sbc 	gY2
.1a4a	8d fa 0b	sta $0bfa			sta 	gdy
.1a4d	ad ef 0b	lda $0bef			lda 	gY1+1
.1a50	ed f3 0b	sbc $0bf3			sbc 	gY2+1
.1a53	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a56	ad fb 0b	lda $0bfb			lda 	gdy+1 						; save sign of dy
.1a59	8d 09 0c	sta $0c09			sta 	gdysign
.1a5c	30 12		bmi $1a70			bmi 	_BINormal
.1a5e	38		sec				sec
.1a5f	a9 00		lda #$00			lda 	#0
.1a61	ed fa 0b	sbc $0bfa			sbc 	gdy
.1a64	8d fa 0b	sta $0bfa			sta 	gdy
.1a67	a9 00		lda #$00			lda 	#0
.1a69	ed fb 0b	sbc $0bfb			sbc 	gdy+1
.1a6c	8d fb 0b	sta $0bfb			sta 	gdy+1
.1a6f	60		rts				rts
.1a70					_BINormal:
.1a70	18		clc				clc
.1a71	ad f8 0b	lda $0bf8			lda 	gdx
.1a74	6d fa 0b	adc $0bfa			adc 	gdy
.1a77	8d f4 0b	sta $0bf4			sta 	gError
.1a7a	ad f9 0b	lda $0bf9			lda 	gdx+1
.1a7d	6d fb 0b	adc $0bfb			adc 	gdy+1
.1a80	8d f5 0b	sta $0bf5			sta 	gError+1
.1a83	60		rts				rts
.1a84					BresenhamIteration:
.1a84	ad f4 0b	lda $0bf4			lda 	gError
.1a87	0a		asl a				asl 	a
.1a88	8d f6 0b	sta $0bf6			sta 	g2Error
.1a8b	ad f5 0b	lda $0bf5			lda 	gError+1
.1a8e	2a		rol a				rol 	a
.1a8f	8d f7 0b	sta $0bf7			sta 	g2Error+1
.1a92	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a94	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a96	20 b5 1c	jsr $1cb5			jsr 	CompareCoordsSigned
.1a99	30 03		bmi $1a9e			bmi 	_BINoE2DY
.1a9b	20 ab 1a	jsr $1aab			jsr 	BresenhamE2GEDY
.1a9e					_BINoE2DY:
.1a9e	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1aa0	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1aa2	20 b5 1c	jsr $1cb5			jsr 	CompareCoordsSigned
.1aa5	30 03		bmi $1aaa			bmi 	_BINoDXE2
.1aa7	20 ca 1a	jsr $1aca			jsr 	BresenhamDXGEE2
.1aaa					_BINoDXE2:
.1aaa	60		rts				rts
.1aab					BresenhamE2GEDY:
.1aab	18		clc				clc
.1aac	ad f4 0b	lda $0bf4			lda 	gError
.1aaf	6d fa 0b	adc $0bfa			adc 	gdy
.1ab2	8d f4 0b	sta $0bf4			sta 	gError
.1ab5	ad f5 0b	lda $0bf5			lda 	gError+1
.1ab8	6d fb 0b	adc $0bfb			adc 	gdy+1
.1abb	8d f5 0b	sta $0bf5			sta 	gError+1
.1abe	ee ec 0b	inc $0bec			inc 	gX1
.1ac1	d0 03		bne $1ac6			bne 	_BE2Skip
.1ac3	ee ed 0b	inc $0bed			inc 	gX1+1
.1ac6					_BE2Skip:
.1ac6	20 0d 1d	jsr $1d0d			jsr 	gdMvRight
.1ac9	60		rts				rts
.1aca					BresenhamDXGEE2:
.1aca	18		clc				clc
.1acb	ad f4 0b	lda $0bf4			lda 	gError
.1ace	6d f8 0b	adc $0bf8			adc 	gdx
.1ad1	8d f4 0b	sta $0bf4			sta 	gError
.1ad4	ad f5 0b	lda $0bf5			lda 	gError+1
.1ad7	6d f9 0b	adc $0bf9			adc 	gdx+1
.1ada	8d f5 0b	sta $0bf5			sta 	gError+1
.1add	ad 09 0c	lda $0c09			lda 	gdySign
.1ae0	10 0c		bpl $1aee			bpl 	_BEDXInvertY
.1ae2	ee ee 0b	inc $0bee			inc 	gY1
.1ae5	d0 03		bne $1aea			bne 	_BEDXSkip
.1ae7	ee ef 0b	inc $0bef			inc 	gY1+1
.1aea					_BEDXSkip:
.1aea	20 48 1d	jsr $1d48			jsr 	gdMvDown
.1aed	60		rts				rts
.1aee					_BEDXInvertY:
.1aee	ad ee 0b	lda $0bee			lda 	gY1
.1af1	d0 03		bne $1af6			bne 	_BEDXSkip2
.1af3	ce ef 0b	dec $0bef			dec 	gY1+1
.1af6					_BEDXSkip2:
.1af6	ce ee 0b	dec $0bee			dec 	gY1
.1af9	20 23 1d	jsr $1d23			jsr 	gdMvUp
.1afc	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1afd					Command_Plot:
.1afd	a9 05		lda #$05			lda 	#PlotHandler & $FF
.1aff	a2 1b		ldx #$1b			ldx 	#PlotHandler >> 8
.1b01	20 ff 18	jsr $18ff			jsr 	GHandler
.1b04	60		rts				rts
.1b05					PlotHandler:
.1b05	a0 04		ldy #$04			ldy 	#gX2-gX1
.1b07	20 92 1c	jsr $1c92			jsr 	SetupXY 					; set up X2,Y2 to draw e.g. plot to 100,100
.1b0a	b0 03		bcs $1b0f			bcs 	_PHExit 					; off screen, return with CS.
.1b0c	20 6a 1d	jsr $1d6a			jsr 	gdPlotInk 					; pixel in Ink.
.1b0f	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c0a					frameFlag:
>0c0a							.fill 	1
.1b10					Command_Rect:
.1b10	a9 24		lda #$24			lda 	#RectHandler & $FF
.1b12	a2 1b		ldx #$1b			ldx 	#RectHandler >> 8
.1b14	20 ff 18	jsr $18ff			jsr 	GHandler
.1b17	60		rts				rts
.1b18					Command_Frame:
.1b18	a9 20		lda #$20			lda 	#FrameHandler & $FF
.1b1a	a2 1b		ldx #$1b			ldx 	#FrameHandler >> 8
.1b1c	20 ff 18	jsr $18ff			jsr 	GHandler
.1b1f	60		rts				rts
.1b20					FrameHandler:
.1b20	a9 01		lda #$01			lda 	#1 							; set frame flag to 1/0 on entry.
.1b22	d0 02		bne $1b26			bne 	FRHandlerMain
.1b24					RectHandler:
.1b24	a9 00		lda #$00			lda 	#0
.1b26					FRHandlerMain:
.1b26	8d 0a 0c	sta $0c0a			sta 	frameFlag
.1b29	20 cc 1c	jsr $1ccc			jsr 	BoxSort 					; sort so topleft/bottom right
.1b2c	20 55 1b	jsr $1b55			jsr 	DrawBoxPart 				; solid first line
.1b2f					_FHLoop:
.1b2f	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1b31	a0 06		ldy #$06			ldy 	#gY2-gX1
.1b33	20 a8 1c	jsr $1ca8			jsr 	CompareCoords
.1b36	b0 19		bcs $1b51			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1b38	ad 0a 0c	lda $0c0a			lda 	frameFlag 					; identify solid or frame ?
.1b3b	f0 06		beq $1b43			beq 	_FHIsSolidRect 				; if solid, draw the solid line.
.1b3d	20 6e 1b	jsr $1b6e			jsr 	DrawBoxEnds					; otherwise draw just the start and end
.1b40	4c 46 1b	jmp $1b46			jmp 	_FHNext
.1b43					_FHIsSolidRect:
.1b43	20 55 1b	jsr $1b55			jsr 	DrawBoxPart
.1b46					_FHNext:
.1b46	ee ee 0b	inc $0bee			inc 	gY1 						; bump Y1 and loop back.
.1b49	d0 e4		bne $1b2f			bne 	_FHLoop
.1b4b	ee ef 0b	inc $0bef			inc 	gY1+1
.1b4e	4c 2f 1b	jmp $1b2f			jmp 	_FHLoop
.1b51					_FHLastLine:
.1b51	20 55 1b	jsr $1b55			jsr 	DrawBoxPart 				; solid last line whatever
.1b54					_FHExit:
.1b54	60		rts				rts
.1b55					DrawBoxPart:
.1b55	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b57	20 92 1c	jsr $1c92			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b5a	38		sec				sec 								; calculate line length => temp0
.1b5b	ad f0 0b	lda $0bf0			lda 	gX2
.1b5e	ed ec 0b	sbc $0bec			sbc 	gX1
.1b61	48		pha				pha
.1b62	ad f1 0b	lda $0bf1			lda 	gX2+1
.1b65	ed ed 0b	sbc $0bed			sbc 	gx1+1
.1b68	aa		tax				tax
.1b69	68		pla				pla 								; line length in XA.
.1b6a	20 86 1b	jsr $1b86			jsr 	DrawHorizontalLine
.1b6d	60		rts				rts
.1b6e					DrawBoxEnds:
.1b6e	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b70	20 92 1c	jsr $1c92			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b73	20 6a 1d	jsr $1d6a			jsr 	gdPlotInk 					; LH end.
.1b76	ad f0 0b	lda $0bf0			lda 	gX2 						; set position to X2,Y1
.1b79	ae f1 0b	ldx $0bf1			ldx 	gX2+1
.1b7c	20 59 1e	jsr $1e59			jsr 	gdSetX
.1b7f	20 7c 1d	jsr $1d7c			jsr		gdSetDrawPosition 			; update position.
.1b82	20 6a 1d	jsr $1d6a			jsr 	gdPlotInk 					; RH end.
.1b85	60		rts				rts
.1b86					DrawHorizontalLine:
.1b86	86 32		stx $32				stx 	tempShort
.1b88	aa		tax				tax
.1b89	a4 32		ldy $32				ldy 	tempShort
.1b8b	ad fe 0b	lda $0bfe			lda 	gdInk
.1b8e	4c 67 1e	jmp $1e67			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/renderer.asm

.0c0b					RenderFunction:
>0c0b							.fill 	2
.0c0d					RenderWidth:
>0c0d							.fill 	1
.0c0e					RenderHeight:
>0c0e							.fill 	1
.0c0f					RenderType:
>0c0f							.fill 	1
.0c10					RenderCache:
>0c10							.fill 	64
.1b91					ImageRenderer:
.1b91	8e 0c 0c	stx $0c0c			stx 	RenderFunction+1
.1b94	8d 0b 0c	sta $0c0b			sta 	RenderFunction
.1b97	a0 ff		ldy #$ff			ldy 	#255 						; get information.
.1b99	20 7a 1c	jsr $1c7a			jsr 	CallRenderFunction
.1b9c	8d 0f 0c	sta $0c0f			sta 	RenderType 					; and save it.
.1b9f	8e 0d 0c	stx $0c0d			stx 	RenderWidth
.1ba2	8c 0e 0c	sty $0c0e			sty 	RenderHeight
.1ba5	8a		txa				txa 								; check X coordinate
.1ba6	a2 00		ldx #$00			ldx 	#0 							; offset to check position/limit.
.1ba8	20 41 1c	jsr $1c41			jsr 	RenderCheckRange 			; this checks and throws error if off screen.
.1bab	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; check Y coordinate
.1bae	a2 02		ldx #$02			ldx 	#2
.1bb0	20 41 1c	jsr $1c41			jsr 	RenderCheckRange
.1bb3	a0 00		ldy #$00			ldy 	#0 							; Y is the current line #
.1bb5					_IRLoop1:
.1bb5	5a		phy				phy
.1bb6	20 1d 1c	jsr $1c1d			jsr 	RenderFlipXY 				; flip X/Y for the correct vertical row.
.1bb9	20 7a 1c	jsr $1c7a			jsr 	CallRenderFunction 			; fill the rendering cache for this row.
.1bbc	7a		ply				ply
.1bbd	ae 00 0c	ldx $0c00			ldx 	gdSize 						; number of times to do the row is the scale value
.1bc0					_IRLoop2:
.1bc0	20 cd 1b	jsr $1bcd			jsr 	RenderDrawRow 				; draw one row.
.1bc3	ca		dex				dex 								; scale # times.
.1bc4	d0 fa		bne $1bc0			bne 	_IRLoop2
.1bc6	c8		iny				iny 								; next vertical row
.1bc7	cc 0e 0c	cpy $0c0e			cpy 	RenderHeight 				; done the lot ?
.1bca	d0 e9		bne $1bb5			bne 	_IRLoop1
.1bcc	60		rts				rts
.1bcd					RenderDrawRow:
.1bcd	da		phx				phx
.1bce	5a		phy				phy
.1bcf	a0 04		ldy #$04			ldy 	#gX2-gX1 					; set the position at (x,y)
.1bd1	20 92 1c	jsr $1c92			jsr 	SetupXY
.1bd4	7a		ply				ply
.1bd5	a2 00		ldx #$00			ldx 	#0 							; X is the current pixel.
.1bd7					_RDRLoop1:
.1bd7	20 ea 1b	jsr $1bea			jsr 	RenderDrawPixelSet 			; draw a block of pixels of the correct size.
.1bda	e8		inx				inx
.1bdb	ec 0d 0c	cpx $0c0d			cpx 	RenderWidth 				; until done the whole lot.
.1bde	d0 f7		bne $1bd7			bne 	_RDRLoop1
.1be0	ee f2 0b	inc $0bf2			inc 	gY2 						; next line down
.1be3	d0 03		bne $1be8			bne 	_RDRNoCarry
.1be5	ee f3 0b	inc $0bf3			inc 	gY2+1
.1be8					_RDRNoCarry:
.1be8	fa		plx				plx
.1be9	60		rts				rts
.1bea					RenderDrawPixelSet:
.1bea	da		phx				phx
.1beb	5a		phy				phy
.1bec	20 1d 1c	jsr $1c1d			jsr 	RenderFlipXY 				; flip positions as required.
.1bef	20 07 1c	jsr $1c07			jsr 	RenderGetInk				; get colour to draw with.
.1bf2	ae 00 0c	ldx $0c00			ldx 	gdSize 						; X counts the size.
.1bf5					_RDPSLoop:
.1bf5	c9 00		cmp #$00			cmp 	#0							; don't draw if $00
.1bf7	f0 03		beq $1bfc			beq 	_RDPSNoDraw
.1bf9	20 6d 1d	jsr $1d6d			jsr 	gdPlotA 					; draw A otherwise
.1bfc					_RDPSNoDraw:
.1bfc	48		pha				pha 								; move right
.1bfd	20 0d 1d	jsr $1d0d			jsr 	gdMvRight
.1c00	68		pla				pla
.1c01	ca		dex				dex
.1c02	d0 f1		bne $1bf5			bne 	_RDPSLoop 					; do it size times.
.1c04	7a		ply				ply
.1c05	fa		plx				plx
.1c06	60		rts				rts
.1c07					RenderGetInk:
.1c07	ad 0f 0c	lda $0c0f			lda 	RenderType 					; type, if 0 it's a bitmap
.1c0a	f0 04		beq $1c10			beq 	_RGIBitmap
.1c0c	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1c0f	60		rts				rts
.1c10					_RGIBitmap:
.1c10	bd 10 0c	lda $0c10,x			lda 	RenderCache,x 				; read from the cache.
.1c13	f0 04		beq $1c19			beq 	_RGIBPaper 					; return ink if #0, paper if =0
.1c15	ad fe 0b	lda $0bfe			lda 	gdInk
.1c18	60		rts				rts
.1c19					_RGIBPaper:
.1c19	ad ff 0b	lda $0bff			lda 	gdPaper
.1c1c	60		rts				rts
.1c1d					RenderFlipXY:
.1c1d	ad 02 0c	lda $0c02			lda 	gdFlip 						; check any flip at all
.1c20	29 03		and #$03			and 	#3
.1c22	f0 1c		beq $1c40			beq 	_RFExit
.1c24	4a		lsr a				lsr 	a 							; bit 0 in carry flag
.1c25	90 09		bcc $1c30			bcc 	_RFNoHFlip
.1c27	ad 0d 0c	lda $0c0d			lda 	RenderWidth 				; X Flip
.1c2a	86 32		stx $32				stx 	tempShort
.1c2c	18		clc				clc
.1c2d	e5 32		sbc $32				sbc 	tempShort
.1c2f	aa		tax				tax
.1c30					_RFNoHFlip:
.1c30	ad 02 0c	lda $0c02			lda 	gdFlip
.1c33	29 02		and #$02			and 	#2 							; bit 1 check
.1c35	f0 09		beq $1c40			beq 	_RFExit
.1c37	ad 0e 0c	lda $0c0e			lda 	RenderHeight 				; Y Flip
.1c3a	84 32		sty $32				sty 	tempShort
.1c3c	18		clc				clc
.1c3d	e5 32		sbc $32				sbc 	tempShort
.1c3f	a8		tay				tay
.1c40					_RFExit:
.1c40	60		rts				rts
.1c41					RenderCheckRange:
.1c41	85 2b		sta $2b				sta 	temp0+1 					; save multiplier => temp0+1
.1c43	ac 00 0c	ldy $0c00			ldy 	gdSize 						; multiplicand (size) => temp0, must be non zero
.1c46	84 2a		sty $2a				sty 	temp0
.1c48	f0 2b		beq $1c75			beq 	_RCRValue
.1c4a	a9 00		lda #$00			lda 	#0 							; total
.1c4c					_RCRMultiply:
.1c4c	46 2a		lsr $2a				lsr 	temp0 						; shift LSB size into carry
.1c4e	90 05		bcc $1c55			bcc 	_RCRNoAdd 					; not adding this time.
.1c50	18		clc				clc
.1c51	65 2b		adc $2b				adc 	temp0+1 					; add the size.
.1c53	b0 20		bcs $1c75			bcs 	_RCRValue 					; overflow
.1c55					_RCRNoAdd:
.1c55	06 2b		asl $2b				asl 	temp0+1 					; double multiplier
.1c57	a4 2a		ldy $2a				ldy 	temp0 						; until adder is zero
.1c59	d0 f1		bne $1c4c			bne 	_RCRMultiply
.1c5b	18		clc				clc 								; add to x2 or y2, store in temp0
.1c5c	7d f0 0b	adc $0bf0,x			adc 	gX2,x 						; this is the Right/Bottom coordinate of the image
.1c5f	85 2a		sta $2a				sta 	temp0
.1c61	bd f1 0b	lda $0bf1,x			lda 	gX2+1,x
.1c64	69 00		adc #$00			adc 	#0
.1c66	85 2b		sta $2b				sta 	temp0+1
.1c68	a5 2a		lda $2a				lda 	temp0 						; check right vs edge of screen.
.1c6a	dd 03 0c	cmp $0c03,x			cmp 	gdXLimit,x
.1c6d	a5 2b		lda $2b				lda 	temp0+1
.1c6f	fd 04 0c	sbc $0c04,x			sbc 	gdXLimit+1,x
.1c72	b0 01		bcs $1c75			bcs 	_RCRValue 					; does not fit, so don't draw.
.1c74	60		rts				rts
.1c75					_RCRValue:
.1c75	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c77	20 27 15	jsr $1527		jsr	errorHandler
.1c7a					CallRenderFunction:
.1c7a	6c 0b 0c	jmp ($0c0b)			jmp 	(RenderFunction)
.1c7d					TestImageAccess:
.1c7d	c0 ff		cpy #$ff			cpy 	#255 						; get information
.1c7f	f0 0a		beq $1c8b			beq 	_TIAGetInfo
.1c81	a0 3f		ldy #$3f			ldy 	#63
.1c83					_TIACreate:
.1c83	98		tya				tya
.1c84	99 10 0c	sta $0c10,y			sta 	RenderCache,y
.1c87	88		dey				dey
.1c88	10 f9		bpl $1c83			bpl 	_TIACreate
.1c8a	60		rts				rts
.1c8b					_TIAGetInfo:
.1c8b	a9 01		lda #$01			lda 	#1 							; image (1) bitmap (0)
.1c8d	a2 20		ldx #$20			ldx 	#32 						; pixel width
.1c8f	a0 20		ldy #$20			ldy 	#32							; pixel height
.1c91	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1c92					SetupXY:
.1c92	b9 ec 0b	lda $0bec,y			lda 	gX1,y 						; set the X position
.1c95	be ed 0b	ldx $0bed,y			ldx 	gX1+1,y
.1c98	20 59 1e	jsr $1e59			jsr 	gdSetX
.1c9b	b9 ee 0b	lda $0bee,y			lda 	gY1,y 						; set the Y position
.1c9e	be ef 0b	ldx $0bef,y			ldx 	gY1+1,y
.1ca1	20 60 1e	jsr $1e60			jsr 	gdSetY
.1ca4	20 7c 1d	jsr $1d7c			jsr 	gdSetDrawPosition 			; recalculate and set up Vera.
.1ca7	60		rts				rts
.1ca8					CompareCoords:
.1ca8	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1cab	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1cae	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1cb1	f9 ed 0b	sbc $0bed,y			sbc 	gX1+1,y
.1cb4	60		rts				rts
.1cb5					CompareCoordsSigned:
.1cb5	20 a8 1c	jsr $1ca8			jsr 	CompareCoords
.1cb8	50 02		bvc $1cbc			bvc 	_CCSExit
.1cba	49 80		eor #$80			eor 	#$80
.1cbc					_CCSExit:
.1cbc	60		rts				rts
.1cbd					CompareCoordsEq:
.1cbd	bd ec 0b	lda $0bec,x			lda 	gX1,x
.1cc0	d9 ec 0b	cmp $0bec,y			cmp 	gX1,y
.1cc3	d0 06		bne $1ccb			bne 	_CCEExit
.1cc5	bd ed 0b	lda $0bed,x			lda 	gX1+1,x
.1cc8	d9 ed 0b	cmp $0bed,y			cmp 	gX1+1,y
.1ccb					_CCEExit:
.1ccb	60		rts				rts
.1ccc					BoxSort:
.1ccc	a2 00		ldx #$00			ldx 	#gx1-gx1
.1cce	a0 04		ldy #$04			ldy 	#gx2-gx1
.1cd0	20 e1 1c	jsr $1ce1			jsr 	GCompareCoords
.1cd3	20 ee 1c	jsr $1cee			jsr 	GSortMinMaxCoords
.1cd6	a2 02		ldx #$02			ldx 	#gy1-gx1
.1cd8	a0 06		ldy #$06			ldy 	#gy2-gx1
.1cda	20 e1 1c	jsr $1ce1			jsr 	GCompareCoords
.1cdd	20 ee 1c	jsr $1cee			jsr 	GSortMinMaxCoords
.1ce0	60		rts				rts
.1ce1					GCompareCoords:
.1ce1	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1ce4	d9 ec 0b	cmp $0bec,y			cmp 	gx1,y
.1ce7	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1cea	f9 ed 0b	sbc $0bed,y			sbc 	gx1+1,y
.1ced	60		rts				rts
.1cee					GSortMinMaxCoords:
.1cee	90 1c		bcc $1d0c			bcc 	GSMMCExit
.1cf0					GSwapCoords:
.1cf0	bd ec 0b	lda $0bec,x			lda 	gx1,x
.1cf3	48		pha				pha
.1cf4	b9 ec 0b	lda $0bec,y			lda 	gx1,y
.1cf7	9d ec 0b	sta $0bec,x			sta 	gx1,x
.1cfa	68		pla				pla
.1cfb	99 ec 0b	sta $0bec,y			sta 	gx1,y
.1cfe	bd ed 0b	lda $0bed,x			lda 	gx1+1,x
.1d01	48		pha				pha
.1d02	b9 ed 0b	lda $0bed,y			lda 	gx1+1,y
.1d05	9d ed 0b	sta $0bed,x			sta 	gx1+1,x
.1d08	68		pla				pla
.1d09	99 ed 0b	sta $0bed,y			sta 	gx1+1,y
.1d0c					GSMMCExit:
.1d0c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1d0d					gdMvRight:
.1d0d	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; bump X16VeraAddLow
.1d10	d0 08		bne $1d1a			bne 	_gdMR0
.1d12	ee 21 9f	inc $9f21			inc 	X16VeraAddMed
.1d15	d0 03		bne $1d1a			bne 	_gdMR0
.1d17	ee 22 9f	inc $9f22			inc 	X16VeraAddHigh
.1d1a					_gdMR0:
.1d1a	ee 54 0c	inc $0c54			inc 	gdXPos
.1d1d	d0 03		bne $1d22			bne 	_gdMR1
.1d1f	ee 55 0c	inc $0c55			inc 	gdXPos+1
.1d22					_gdMR1:
.1d22	60		rts				rts
.1d23					gdMvUp:
.1d23	ad 56 0c	lda $0c56			lda 	gdYPos 						; decrement Y Pos
.1d26	d0 03		bne $1d2b			bne 	_gdMU1
.1d28	ce 57 0c	dec $0c57			dec 	gdYPos+1
.1d2b	ce 56 0c	dec $0c56	_gdMU1:	dec 	gdYPos
.1d2e	38		sec				sec 								; adjust position by -320
.1d2f	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.1d32	e9 40		sbc #$40			sbc 	#GrWidth & $FF
.1d34	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d37	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.1d3a	e9 01		sbc #$01			sbc 	#GrWidth >> 8
.1d3c	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d3f	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh
.1d42	e9 00		sbc #$00			sbc 	#0
.1d44	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d47	60		rts				rts
.1d48					gdMvDown:
.1d48	ee 56 0c	inc $0c56			inc 	gdYPos 						; decrement Y Pos
.1d4b	d0 03		bne $1d50			bne 	_gdMU1
.1d4d	ee 57 0c	inc $0c57			inc 	gdYPos+1
.1d50					_gdMU1:
.1d50	18		clc				clc 								; adjust position by -320
.1d51	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.1d54	69 40		adc #$40			adc 	#GrWidth & $FF
.1d56	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1d59	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.1d5c	69 01		adc #$01			adc 	#GrWidth >> 8
.1d5e	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1d61	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh
.1d64	69 00		adc #$00			adc 	#0
.1d66	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1d69	60		rts				rts
.1d6a					gdPlotInk:
.1d6a	ad fe 0b	lda $0bfe			lda 	gdInk
.1d6d					gdPlotA:
.1d6d	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1d70	60		rts				rts
.1d71					gdPlotPaper:
.1d71	ad ff 0b	lda $0bff			lda 	gdPaper
.1d74	c9 ff		cmp #$ff			cmp 	#$FF
.1d76	f0 03		beq $1d7b			beq 	_gdPPSkip
.1d78	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1d7b					_gdPPSkip:
.1d7b	60		rts				rts
.1d7c					gdSetDrawPosition:
.1d7c	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1d7e	85 2a		sta $2a				sta 	temp0
.1d80	ad 56 0c	lda $0c56			lda 	gdYPos
.1d83	85 2b		sta $2b				sta 	temp0+1
.1d85	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1d87	66 2a		ror $2a				ror 	temp0
.1d89	46 2b		lsr $2b				lsr 	temp0+1
.1d8b	66 2a		ror $2a				ror 	temp0
.1d8d	ad 56 0c	lda $0c56			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1d90	18		clc				clc
.1d91	65 2b		adc $2b				adc 	temp0+1
.1d93	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1d95	18		clc				clc
.1d96	a5 2a		lda $2a				lda 	temp0
.1d98	6d 54 0c	adc $0c54			adc 	gdXPos
.1d9b	85 2a		sta $2a				sta 	temp0
.1d9d	a5 2b		lda $2b				lda 	temp0+1
.1d9f	6d 55 0c	adc $0c55			adc 	gdXPos+1
.1da2	85 2b		sta $2b				sta 	temp0+1
.1da4	18		clc				clc 								; write bitmapaddress + temp0 to the vera address register
.1da5	ad 51 0c	lda $0c51			lda 	gdBitmapAddress
.1da8	65 2a		adc $2a				adc 	temp0
.1daa	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.1dad	ad 52 0c	lda $0c52			lda 	gdBitmapAddress+1
.1db0	65 2b		adc $2b				adc 	temp0+1
.1db2	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.1db5	ad 53 0c	lda $0c53			lda 	gdBitmapAddress+2
.1db8	69 00		adc #$00			adc 	#0
.1dba	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1dbd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c50					gdEnabled:
>0c50							.fill 	1
.0c51					gdBitmapAddress:
>0c51							.fill 	3
.0c54					gdXPos:
>0c54							.fill 	2
.0c56					gdYPos:
>0c56							.fill 	2
.1dbe					gdModeChanged:
.1dbe	da		phx				phx
.1dbf	5a		phy				phy
.1dc0	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1dc2	8d 50 0c	sta $0c50			sta 	gdEnabled
.1dc5	ad 2a 9f	lda $9f2a			lda 	X16VeraHScale 				; requires $40 for H/V Scale
.1dc8	c9 40		cmp #$40			cmp 	#$40
.1dca	d0 1f		bne $1deb			bne 	_gdExit
.1dcc	ad 2b 9f	lda $9f2b			lda 	X16VeraVScale
.1dcf	c9 40		cmp #$40			cmp 	#$40
.1dd1	d0 18		bne $1deb			bne 	_gdExit
.1dd3	ad 29 9f	lda $9f29			lda 	X16VeraDCVideo 				; read DC_Video, see which layers are enabled.
.1dd6	0a		asl a				asl 	a 							;
.1dd7	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1dd8	10 09		bpl $1de3			bpl 	_gdNotLayer1
.1dda	48		pha				pha 								; save A
.1ddb	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1ddd	20 f1 1d	jsr $1df1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1de0	68		pla				pla 								; restore A
.1de1	b0 08		bcs $1deb			bcs 	_gdExit 					; if successful then exit
.1de3					_gdNotLayer1:
.1de3	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1de4	10 05		bpl $1deb			bpl 	_gdExit 					; if not enabled, exit
.1de6	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at X16VeraLayerConfig)
.1de8	20 f1 1d	jsr $1df1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1deb					_gdExit:
.1deb	20 25 1e	jsr $1e25			jsr 	gdClearGraphics 			; clear graphics display.
.1dee	7a		ply				ply
.1def	fa		plx				plx
.1df0	60		rts				rts
.1df1					gdCheckBitmap:
.1df1	bd 2d 9f	lda $9f2d,x			lda 	X16VeraLayerConfig,x 		; look at bitmap bit.
.1df4	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1df6	d0 14		bne $1e0c			bne 	_gdCBFail
.1df8	ee 50 0c	inc $0c50			inc 	gdEnabled 					; set the enabled flag to non zero.
.1dfb	bd 2f 9f	lda $9f2f,x			lda 	X16VeraLayerTileBase,x 		; this is the bitmap address / 2
.1dfe	0a		asl a				asl 	a
.1dff	8d 52 0c	sta $0c52			sta 	gdBitmapAddress+1
.1e02	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1e04	8d 53 0c	sta $0c53			sta 	gdBitmapAddress+2
.1e07	a9 00		lda #$00			lda 	#$00
.1e09	8d 51 0c	sta $0c51			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1e0c					_gdCBFail:
.1e0c	18		clc				clc
.1e0d	60		rts				rts
.1e0e					CommandClg:
.1e0e	b1 28		lda ($28),y			lda 	(codePtr),y 				; CLG PAPER x
.1e10	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1e12	d0 0d		bne $1e21			bne 	_CCLClear
.1e14	c8		iny				iny 								; skip paper
.1e15	a9 00		lda #$00			lda 	#0 							; get paper and update
.1e17	a2 0c		ldx #$0c		ldx	#12
.1e19	20 65 40	jsr $4065		jsr	mainHandler
.1e1c	a5 98		lda $98				lda 	esInt0
.1e1e	8d ff 0b	sta $0bff			sta 	gdPaper
.1e21					_CCLClear:
.1e21	20 25 1e	jsr $1e25			jsr 	gdClearGraphics 			; call graphics clear code.
.1e24	60		rts				rts
.1e25					gdClearGraphics:
.1e25	da		phx				phx
.1e26	5a		phy				phy
.1e27	ad 50 0c	lda $0c50			lda 	gdEnabled 					; bitmap screen enabled ?
.1e2a	f0 2a		beq $1e56			beq 	_gdCGExit 					; no, then can't clear
.1e2c	a9 40		lda #$40			lda 	#(GrWidth) & $FF
.1e2e	8d 03 0c	sta $0c03			sta 	gdXLimit
.1e31	a9 01		lda #$01			lda 	#(GrWidth) >> 8
.1e33	8d 04 0c	sta $0c04			sta 	1+(gdXLimit)
.1e36	a9 c8		lda #$c8			lda 	#(GrHeight) & $FF
.1e38	8d 05 0c	sta $0c05			sta 	gdYLimit
.1e3b	a9 00		lda #$00			lda 	#(GrHeight) >> 8
.1e3d	8d 06 0c	sta $0c06			sta 	1+(gdYLimit)
.1e40	a9 00		lda #$00			lda 	#0 							; home cursor
.1e42	aa		tax				tax
.1e43	20 59 1e	jsr $1e59			jsr 	gdSetX
.1e46	20 60 1e	jsr $1e60			jsr 	gdSetY
.1e49	20 7c 1d	jsr $1d7c			jsr 	gdSetDrawPosition 			; set the draw position.
.1e4c	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1e4e	a2 00		ldx #$00			ldx 	#0
.1e50	ad ff 0b	lda $0bff			lda 	gdPaper
.1e53	20 67 1e	jsr $1e67			jsr 	gdOptHorizontalWriter		; call the optimised horizontal writer to do $FA00 of A
.1e56					_gdCGExit:
.1e56	7a		ply				ply
.1e57	fa		plx				plx
.1e58	60		rts				rts
.1e59					gdSetX:
.1e59	8d 54 0c	sta $0c54			sta 	gdXPos
.1e5c	8e 55 0c	stx $0c55			stx 	gdXPos+1
.1e5f	60		rts				rts
.1e60					gdSetY:
.1e60	8d 56 0c	sta $0c56			sta 	gdYPos
.1e63	8e 57 0c	stx $0c57			stx 	gdYPos+1
.1e66	60		rts				rts
.1e67					gdOptHorizontalWriter:
.1e67	48		pha				pha
.1e68	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh 						; make it autoincrement.
.1e6b	09 10		ora #$10			ora 	#$10
.1e6d	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.1e70	68		pla				pla
.1e71					_gdOLoop:
.1e71	8d 23 9f	sta $9f23			sta 	X16VeraData0						; write colour out.
.1e74	e0 00		cpx #$00			cpx 	#0 									; exit if X = Y = 0
.1e76	d0 05		bne $1e7d			bne 	_gdNoBorrow 						; decrement YX in here.
.1e78	c0 00		cpy #$00			cpy 	#0
.1e7a	f0 05		beq $1e81			beq 	_gdExit
.1e7c	88		dey				dey 			 							; X 0 so borrow from Y
.1e7d					_gdNoBorrow:
.1e7d	ca		dex				dex
.1e7e	4c 71 1e	jmp $1e71			jmp 	_gdOLoop
.1e81					_gdExit:
.1e81	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1e82					Unary_Clock:
.1e82	a2 0c		ldx #$0c		ldx	#12
.1e84	20 65 40	jsr $4065		jsr	mainHandler
.1e87	48		pha				pha 								; save stack pos
.1e88	a2 04		ldx #$04		ldx	#4
.1e8a	20 65 40	jsr $4065		jsr	mainHandler
.1e8d	5a		phy				phy
.1e8e	20 50 ff	jsr $ff50			jsr 	X16KReadRTC
.1e91	7a		ply				ply
.1e92	68		pla				pla 								; restore, repush, put into X to read offset
.1e93	48		pha				pha
.1e94	aa		tax				tax
.1e95	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1e97	c9 06		cmp #$06			cmp 	#6
.1e99	b0 0d		bcs $1ea8			bcs 	_UCValue
.1e9b	aa		tax				tax 								; index in X and read RTC.
.1e9c	b5 02		lda $02,x			lda 	2,x
.1e9e	85 32		sta $32				sta 	tempshort
.1ea0	68		pla				pla 								; restore number stack index.
.1ea1	aa		tax				tax
.1ea2	a5 32		lda $32				lda 	tempShort
.1ea4	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1ea6	8a		txa				txa
.1ea7	60		rts				rts
.1ea8					_UCValue:
.1ea8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1eaa	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1ead					Unary_JoyX:
.1ead	38		sec				sec
.1eae	b0 01		bcs $1eb1			bcs 	JoystickRead
.1eb0					Unary_JoyY:
.1eb0	18		clc				clc
.1eb1					JoystickRead:
.1eb1	48		pha				pha 								; save stack position
.1eb2	08		php				php 								; save test flag.
.1eb3	a2 0c		ldx #$0c		ldx	#12
.1eb5	20 65 40	jsr $4065		jsr	mainHandler
.1eb8	48		pha				pha
.1eb9	a2 04		ldx #$04		ldx	#4
.1ebb	20 65 40	jsr $4065		jsr	mainHandler
.1ebe	fa		plx				plx
.1ebf	b5 98		lda $98,x			lda 	esInt0,x
.1ec1	20 2a 1f	jsr $1f2a			jsr 	ReadJoystick 				; read it.
.1ec4	28		plp				plp 								; get back axis
.1ec5	b0 02		bcs $1ec9			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y axis buttons
.1ec7	4a		lsr a				lsr 	a
.1ec8	4a		lsr a				lsr 	a
.1ec9					_JRNoShift:
.1ec9	29 03		and #$03			and 	#3 							; isolate the test bits.
.1ecb	f0 0d		beq $1eda			beq 	JoyReturnA 					; if nothing pressed, return A.
.1ecd	c9 03		cmp #$03			cmp 	#3
.1ecf	f0 07		beq $1ed8			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1ed1	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1ed2	b0 15		bcs $1ee9			bcs 	JoyReturn1
.1ed4					JoyReturnTrue:
.1ed4	a9 ff		lda #$ff			lda 	#$FF
.1ed6	d0 02		bne $1eda			bne 	JoyReturnA
.1ed8					JoyReturnFalse:
.1ed8	a9 00		lda #$00			lda 	#0
.1eda					JoyReturnA:
.1eda	85 32		sta $32				sta 	tempShort 					; return A
.1edc	fa		plx				plx
.1edd	a5 32		lda $32				lda 	tempShort
.1edf	95 98		sta $98,x			sta 	esInt0,x
.1ee1					JoyReturn13:
.1ee1	95 a0		sta $a0,x			sta 	esInt1,x
.1ee3	95 a8		sta $a8,x			sta 	esInt2,x
.1ee5	95 b0		sta $b0,x			sta 	esInt3,x
.1ee7	8a		txa				txa 								; return NSP in A
.1ee8	60		rts				rts
.1ee9					JoyReturn1:
.1ee9	fa		plx				plx
.1eea	a9 01		lda #$01			lda 	#1
.1eec	95 98		sta $98,x			sta 	esInt0,x
.1eee	a9 00		lda #$00			lda 	#0
.1ef0	f0 ef		beq $1ee1			beq 	JoyReturn13
.1ef2					Unary_JButton:
.1ef2	48		pha				pha 								; save X on stack, put in X
.1ef3	a2 0c		ldx #$0c		ldx	#12
.1ef5	20 65 40	jsr $4065		jsr	mainHandler
.1ef8	aa		tax				tax
.1ef9	b5 98		lda $98,x			lda 	esInt0,x
.1efb	48		pha				pha
.1efc	8a		txa				txa
.1efd	48		pha				pha
.1efe	a2 02		ldx #$02		ldx	#2
.1f00	20 65 40	jsr $4065		jsr	mainHandler
.1f03	68		pla				pla
.1f04	a2 0c		ldx #$0c		ldx	#12
.1f06	20 65 40	jsr $4065		jsr	mainHandler
.1f09	aa		tax				tax 								; get value to check, push on stack.
.1f0a	b5 98		lda $98,x			lda 	esInt0,x
.1f0c	c9 04		cmp #$04			cmp 	#4 							; check button # 0-3
.1f0e	b0 15		bcs $1f25			bcs 	_UJBadValue
.1f10	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1f12	48		pha				pha 								; save that shift count on the stack.
.1f13	a2 04		ldx #$04		ldx	#4
.1f15	20 65 40	jsr $4065		jsr	mainHandler
.1f18	fa		plx				plx
.1f19	68		pla				pla 								; get device # into A
.1f1a	20 2a 1f	jsr $1f2a			jsr 	ReadJoystick 				; joystick read
.1f1d					_UJShift:
.1f1d	4a		lsr a				lsr 	a
.1f1e	ca		dex				dex
.1f1f	d0 fc		bne $1f1d			bne 	_UJShift
.1f21	b0 b1		bcs $1ed4			bcs 	JoyReturnTrue
.1f23	90 b3		bcc $1ed8			bcc 	JoyReturnFalse
.1f25					_UJBadValue:
.1f25	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f27	20 27 15	jsr $1527		jsr	errorHandler
.1f2a					ReadJoystick:
.1f2a	85 32		sta $32				sta 	tempShort
.1f2c	da		phx				phx
.1f2d	5a		phy				phy
.1f2e	a5 32		lda $32				lda 	tempShort
.1f30	20 56 ff	jsr $ff56			jsr 	X16KReadJoystick
.1f33	c0 00		cpy #$00			cpy 	#0
.1f35	d0 0f		bne $1f46			bne 	_RJError
.1f37	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially, which means all the
.1f39	d0 02		bne $1f3d			bne 	_RJNoBug 					; buttons are pressed, so we assume you haven't actually
.1f3b	a9 ff		lda #$ff			lda 	#$FF 						; done this !
.1f3d					_RJNoBug:
.1f3d	85 32		sta $32				sta 	tempShort
.1f3f	7a		ply				ply
.1f40	fa		plx				plx
.1f41	a5 32		lda $32				lda 	tempShort
.1f43	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1f45	60		rts				rts
.1f46					_RJError:
.1f46	a9 00		lda #$00			lda 	#0
.1f48	f0 f3		beq $1f3d			beq 	_RJNoBug

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndqueue.asm

.1f4a					SoundAddQueue:
.1f4a	86 2a		stx $2a				stx 	temp0 						; save XY in temp0
.1f4c	84 2b		sty $2b				sty 	temp0+1
.1f4e	a2 00		ldx #$00			ldx 	#0 							; look for empty spot.
.1f50					_SAQFind:
.1f50	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; check if first byte (time) zero means clear.
.1f53	f0 0e		beq $1f63			beq 	_SAQFound
.1f55	8a		txa				txa 								; forward 6
.1f56	18		clc				clc
.1f57	69 06		adc #$06			adc 	#6
.1f59	aa		tax				tax
.1f5a	e0 60		cpx #$60			cpx 	#sndQueueSize*6 			; queue is full ?
.1f5c	90 f2		bcc $1f50			bcc 	_SAQFind
.1f5e	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1f60	20 27 15	jsr $1527		jsr	errorHandler
.1f63					_SAQFound:
.1f63	a0 05		ldy #$05			ldy 	#5 							; get and save time
.1f65	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f67	9d 71 0c	sta $0c71,x			sta 	sndQueue+0,x
.1f6a	88		dey				dey 								; get and save the channel.
.1f6b	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f6d	9d 72 0c	sta $0c72,x			sta 	sndQueue+1,x
.1f70	a0 00		ldy #$00			ldy 	#0
.1f72					_SAQCopy1:
.1f72	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy 4 bytes of PSG data in.
.1f74	9d 73 0c	sta $0c73,x			sta 	sndQueue+2,x
.1f77	c8		iny				iny
.1f78	e8		inx				inx
.1f79	c0 04		cpy #$04			cpy 	#4
.1f7b	d0 f5		bne $1f72			bne		 _SAQCopy1
.1f7d	60		rts				rts
.1f7e					SoundCheckQueue:
.1f7e	85 2a		sta $2a				sta 	temp0 						; save channel #
.1f80	da		phx				phx
.1f81	5a		phy				phy
.1f82	a6 2a		ldx $2a				ldx 	temp0 						; is the channel in use, if so we cannot play.
.1f84	bd 59 0c	lda $0c59,x			lda 	channelTime,x
.1f87	d0 3f		bne $1fc8			bne 	_SCQExit
.1f89	a2 00		ldx #$00			ldx 	#0 							; work through queue.
.1f8b					_SCQSearch:
.1f8b	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; reached the end, e.g. time = 0
.1f8e	f0 38		beq $1fc8			beq 	_SCQExit
.1f90	bd 72 0c	lda $0c72,x			lda 	sndQueue+1,x 				; compare channel #
.1f93	c5 2a		cmp $2a				cmp 	temp0
.1f95	f0 08		beq $1f9f			beq 	_SCQFound
.1f97	8a		txa				txa
.1f98	18		clc				clc
.1f99	69 06		adc #$06			adc 	#6
.1f9b	8a		txa				txa
.1f9c	4c 8b 1f	jmp $1f8b			jmp 	_SCQSearch
.1f9f					_SCQFound:
.1f9f	a4 2a		ldy $2a				ldy 	temp0 						; Y = channel #
.1fa1	bd 71 0c	lda $0c71,x			lda 	sndQueue,x 					; get time
.1fa4	99 59 0c	sta $0c59,y			sta 	channelTime,y 				; write that in the time channel slot
.1fa7	ee 58 0c	inc $0c58			inc 	LiveChannels 				; one more playing.
.1faa	da		phx				phx
.1fab	a5 2a		lda $2a				lda 	temp0 						; get channel #
.1fad	20 0a 20	jsr $200a			jsr 	CSPointChannel  			; point VRAM pointer to it.
.1fb0	a0 04		ldy #$04			ldy 	#4 							; counter
.1fb2					_SCQCopy:
.1fb2	bd 73 0c	lda $0c73,x			lda 	sndQueue+2,x 				; copy the sound production data to the PSG
.1fb5	8d 23 9f	sta $9f23			sta 	X16VeraData0
.1fb8	e8		inx				inx
.1fb9	88		dey				dey
.1fba	d0 f6		bne $1fb2			bne 	_SCQCopy
.1fbc	fa		plx				plx
.1fbd					_SCQDelete:
.1fbd	bd 77 0c	lda $0c77,x			lda 	sndQueue+6,x 				; delete the queue entry
.1fc0	9d 71 0c	sta $0c71,x			sta 	sndQueue,x
.1fc3	e8		inx				inx
.1fc4	e0 61		cpx #$61			cpx 	#sndQueueSize*6+1
.1fc6	d0 f5		bne $1fbd			bne 	_SCQDelete
.1fc8					_SCQExit:
.1fc8	7a		ply				ply
.1fc9	fa		plx				plx
.1fca	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndunary.asm

.1fcb					Unary_Playing:
.1fcb	48		pha				pha 						; save stack position
.1fcc	b1 28		lda ($28),y			lda 	(codePtr),y 		; check for playing()
.1fce	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1fd0	f0 2d		beq $1fff			beq 	_UPCount
.1fd2	68		pla				pla 						; get SP back.
.1fd3	48		pha				pha
.1fd4	a2 0c		ldx #$0c		ldx	#12
.1fd6	20 65 40	jsr $4065		jsr	mainHandler
.1fd9	a2 04		ldx #$04		ldx	#4
.1fdb	20 65 40	jsr $4065		jsr	mainHandler
.1fde	fa		plx				plx
.1fdf	86 32		stx $32				stx 	tempShort 			; save X
.1fe1	b5 98		lda $98,x			lda 	esInt0,x 			; check level, must be < 16
.1fe3	c9 10		cmp #$10			cmp 	#16
.1fe5	b0 13		bcs $1ffa			bcs 	_UPValue
.1fe7	aa		tax				tax 						; get the time
.1fe8	bd 59 0c	lda $0c59,x			lda 	ChannelTime,x 		; 0 if zero, 255 if non-zero.
.1feb	f0 02		beq $1fef			beq 	_UPZero
.1fed	a9 ff		lda #$ff			lda 	#255
.1fef					_UPZero:
.1fef	a6 32		ldx $32				ldx 	tempShort 			; stack pointer back
.1ff1	95 98		sta $98,x			sta 	esInt0,x 			; return value
.1ff3					_UPSet13:
.1ff3	95 a0		sta $a0,x			sta 	esInt1,x
.1ff5	95 a8		sta $a8,x			sta 	esInt2,x
.1ff7	95 b0		sta $b0,x			sta 	esInt3,x
.1ff9	60		rts				rts
.1ffa					_UPValue:
.1ffa	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ffc	20 27 15	jsr $1527		jsr	errorHandler
.1fff					_UPCount:
.1fff	c8		iny				iny 						; skip )
.2000	fa		plx				plx
.2001	ad 58 0c	lda $0c58			lda 	LiveChannels
.2004	95 98		sta $98,x			sta 	esInt0,x
.2006	a9 00		lda #$00			lda 	#0
.2008	f0 e9		beq $1ff3			beq 	_UPSet13

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sndutils.asm

.200a					CSPointChannel:
.200a	0a		asl a				asl 	a 							; 4 bytes / channel
.200b	0a		asl a				asl 	a
.200c	09 c0		ora #$c0			ora 	#X16VeraSound & $FF			; at $1F9C0
.200e	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.2011	a9 f9		lda #$f9			lda 	#(X16VeraSound >> 8) & $FF
.2013	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.2016	a9 11		lda #$11			lda 	#(X16VeraSound >> 16) | $10
.2018	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.201b	60		rts				rts
.201c					SoundReset:
.201c	a9 00		lda #$00			lda 	#0							; no channels playing
.201e	8d 58 0c	sta $0c58			sta 	LiveChannels
.2021	a2 0f		ldx #$0f			ldx 	#Channels-1
.2023					_SCClear:
.2023	9d 59 0c	sta $0c59,x			sta 	ChannelTime,x
.2026	ca		dex				dex
.2027	10 fa		bpl $2023			bpl 	_SCClear
.2029	a2 61		ldx #$61			ldx 	#sndQueueSize*6+1 			; zero the sound queue.
.202b					_SCClear2:
.202b	9d 70 0c	sta $0c70,x			sta 	sndQueue-1,x
.202e	ca		dex				dex
.202f	d0 fa		bne $202b			bne 	_SCClear2
.2031	a9 c0		lda #$c0			lda 	#X16VeraSound & $FF			; point VRAM data pointer to $1F9C0 increment
.2033	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.2036	a9 f9		lda #$f9			lda 	#(X16VeraSound >> 8) & $FF
.2038	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.203b	a9 11		lda #$11			lda 	#(X16VeraSound >> 16) | $10
.203d	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2040					_SCClear3:
.2040	a9 00		lda #$00			lda 	#0
.2042	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2045	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.2048	d0 f6		bne $2040			bne 	_SCClear3
.204a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/sound.asm

=16					Channels = 16 								; # of sound channels.
.0c58					LiveChannels:
>0c58							.fill 	1
.0c59					ChannelTime:
>0c59							.fill 	Channels 					; # of ticks until channels goes silent if non-zero
.0c69					sndPitch:
>0c69							.fill 	2
.0c6b					sndExtra:
>0c6b							.fill 	2
.0c6d					sndChannel:
>0c6d							.fill 	1
.0c6e					sndTime:
>0c6e							.fill 	1
.0c6f					sndType:
>0c6f							.fill 	1
.0c70					sndVolume:
>0c70							.fill 	1
=16					sndQueueSize = 16
.0c71					sndQueue:
>0c71							.fill	6*sndQueueSize+1 			; extra byte is so copy zero when deleting last element.
.204b					CommandSound:
.204b	a9 00		lda #$00			lda 	#0 							; clear the default sound options
.204d	8d 69 0c	sta $0c69			sta 	sndPitch
.2050	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.2053	8d 6f 0c	sta $0c6f			sta 	sndType
.2056	a9 ff		lda #$ff			lda 	#$FF 						; values are 255,63 are masked.
.2058	8d 6d 0c	sta $0c6d			sta 	sndChannel
.205b	8d 70 0c	sta $0c70			sta 	sndVolume
.205e	a9 05		lda #$05			lda 	#5 							; default time is 0.5s
.2060	8d 6e 0c	sta $0c6e			sta 	sndTime
.2063					_ComSoundLoop:
.2063	b1 28		lda ($28),y			lda 	(codePtr),y 				; next token
.2065	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line/colon do the sound
.2067	f0 55		beq $20be			beq 	_CSDoSound
.2069	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.206b	f0 51		beq $20be			beq 	_CSDoSound
.206d	c9 db		cmp #$db			cmp 	#TKW_AT 					; is it AT pitch ?
.206f	f0 29		beq $209a			beq 	_CSSetPitch
.2071	a2 03		ldx #$03			ldx 	#3 							; look up in the tokens table
.2073					_CSCheck:
.2073	dd ba 20	cmp $20ba,x			cmp 	_ComSoundTokens,x 			; if found token update value.
.2076	f0 10		beq $2088			beq 	_CSFoundToken
.2078	ca		dex				dex
.2079	10 f8		bpl $2073			bpl 	_CSCheck
.207b	c8		iny				iny
.207c	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR 					; was it sound CLEAR
.207e	d0 03		bne $2083			bne 	_CSSyntax
.2080	4c 1c 20	jmp $201c			jmp 	SoundReset
.2083					_CSSyntax:
.2083	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2085	20 27 15	jsr $1527		jsr	errorHandler
.2088					_CSFoundToken:
.2088	da		phx				phx
.2089	c8		iny				iny 								; skip it
.208a	a9 00		lda #$00			lda 	#0 							; get a small int
.208c	a2 0c		ldx #$0c		ldx	#12
.208e	20 65 40	jsr $4065		jsr	mainHandler
.2091	fa		plx				plx
.2092	a5 98		lda $98				lda 	esInt0 						; copy value to setup memory
.2094	9d 6d 0c	sta $0c6d,x			sta 	sndChannel,x
.2097	4c 63 20	jmp $2063			jmp 	_ComSoundLoop
.209a					_CSSetPitch:
.209a	c8		iny				iny 								; skip AT
.209b	a9 00		lda #$00			lda 	#0 							; get an integer.
.209d	a2 0a		ldx #$0a		ldx	#10
.209f	20 65 40	jsr $4065		jsr	mainHandler
.20a2	a5 a8		lda $a8				lda 	esInt2 						; check range
.20a4	05 b0		ora $b0				ora 	esInt3
.20a6	d0 0d		bne $20b5			bne 	_CSBadValue
.20a8	a5 98		lda $98				lda 	esInt0	 					; copy into pitch and loop back
.20aa	8d 69 0c	sta $0c69			sta 	sndPitch
.20ad	a5 a0		lda $a0				lda 	esInt1
.20af	8d 6a 0c	sta $0c6a			sta 	sndPitch+1
.20b2	4c 63 20	jmp $2063			jmp 	_ComSoundLoop
.20b5					_CSBadValue:
.20b5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.20b7	20 27 15	jsr $1527		jsr	errorHandler
.20ba					_ComSoundTokens:
>20ba	ce eb ea cf					.byte 	TKW_TO,TKW_TIME,TKW_TYPE,TKW_STEP
.20be					_CSDoSound:
.20be	ae 6d 0c	ldx $0c6d			ldx 	sndChannel 					; if channel >= 16 look for channel unused.
.20c1	e0 10		cpx #$10			cpx 	#16
.20c3	90 0f		bcc $20d4			bcc 	_CSHaveChannel
.20c5	a2 0f		ldx #$0f			ldx 	#15
.20c7					_CSFindChannel:
.20c7	bd 59 0c	lda $0c59,x			lda 	channelTime,x 				; time is zero e.g. sound off.
.20ca	f0 08		beq $20d4			beq 	_CSHaveChannel
.20cc	ca		dex				dex
.20cd	10 f8		bpl $20c7			bpl 	_CSFindChannel 				; try all of them
.20cf	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.20d1	20 27 15	jsr $1527		jsr	errorHandler
.20d4					_CSHaveChannel:
.20d4	8e 6d 0c	stx $0c6d			stx 	sndChannel 					; update channel.
.20d7	ad 6e 0c	lda $0c6e			lda 	sndTime 					; get how long
.20da	f0 29		beq $2105			beq 	_CSExit 					; if zero then exit
.20dc	ad 70 0c	lda $0c70			lda 	sndVolume 					; get volume, max out at 63.
.20df	c9 40		cmp #$40			cmp 	#64
.20e1	90 02		bcc $20e5			bcc 	_CSHaveVolume
.20e3	a9 3f		lda #$3f			lda 	#63
.20e5					_CSHaveVolume:
.20e5	09 c0		ora #$c0			ora 	#$C0 						; both channels
.20e7	8d 6b 0c	sta $0c6b			sta 	sndExtra 					; write out.
.20ea	ad 6f 0c	lda $0c6f			lda 	sndType 					; get waveform (bits 0-1 Pulse, Sawtooth, Triangle Noise)
.20ed	6a		ror a				ror 	a 							; rotate into position 7,6
.20ee	6a		ror a				ror 	a
.20ef	6a		ror a				ror 	a
.20f0	29 c0		and #$c0			and 	#$C0 						; mask other bits
.20f2	09 3f		ora #$3f			ora 	#63 						; 50% duty cycle.
.20f4	8d 6c 0c	sta $0c6c			sta 	sndExtra+1
.20f7	5a		phy				phy
.20f8	da		phx				phx
.20f9	a2 69		ldx #$69			ldx 	#sndPitch & 255 			; XY = sound data
.20fb	a0 0c		ldy #$0c			ldy 	#sndPitch >> 8
.20fd	20 4a 1f	jsr $1f4a			jsr 	SoundAddQueue 				; add it to the queue.
.2100	68		pla				pla 								; get channel #
.2101	20 7e 1f	jsr $1f7e			jsr 	SoundCheckQueue 			; check if we can play this one now, e.g. the queue was empty.
.2104	7a		ply				ply
.2105					_CSExit:
.2105	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sound/soundsync.asm

.2106					SoundInterrupt:
.2106	ad 58 0c	lda $0c58			lda 	LiveChannels 		; anything playing ?
.2109	f0 2b		beq $2136			beq 	_SIExit
.210b	a2 0f		ldx #$0f			ldx 	#15 				; check each channel ?
.210d	bd 59 0c	lda $0c59,x	_SILoop:lda 	channelTime,x 		; time left ?
.2110	f0 21		beq $2133			beq 	_SINext 	 		; if zero not playing
.2112	38		sec				sec 						; subtract one from time
.2113	e9 01		sbc #$01			sbc 	#1
.2115	9d 59 0c	sta $0c59,x			sta 	channelTime,x
.2118	d0 19		bne $2133			bne 	_SINext 			; if non zero, time for sound off.
.211a	ce 58 0c	dec $0c58			dec 	LiveChannels 		; one fewer channels.
.211d	8a		txa				txa 						; point to sound PSG
.211e	20 0a 20	jsr $200a			jsr 	CSPointChannel
.2121	a9 00		lda #$00			lda 	#0 					; zero it all out
.2123	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2126	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2129	8d 23 9f	sta $9f23			sta 	X16VeraData0
.212c	8d 23 9f	sta $9f23			sta 	X16VeraData0
.212f	8a		txa				txa 						; check the queue for this for more notes.
.2130	20 7e 1f	jsr $1f7e			jsr 	SoundCheckQueue
.2133	ca		dex		_SINext:dex
.2134	10 d7		bpl $210d			bpl 	_SILoop
.2136					_SIExit:
.2136	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0cd2					hitSprite1:
>0cd2							.fill 	1 							; this won't work ... if you nest HIT() which
.0cd3					hitSprite2:
>0cd3							.fill 	1
.0cd4					hitRange:
>0cd4							.fill 	1
.2137					FunctionCollide:
.2137	48		pha				pha 								; save and put index into X
.2138	aa		tax				tax
.2139	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.213b	8d d4 0c	sta $0cd4			sta 	hitRange
.213e	20 de 21	jsr $21de			jsr 	_FCGetSpriteID
.2141	8d d2 0c	sta $0cd2			sta 	hitSprite1
.2144	da		phx				phx
.2145	a2 02		ldx #$02		ldx	#2
.2147	20 65 40	jsr $4065		jsr	mainHandler
.214a	fa		plx				plx
.214b	20 de 21	jsr $21de			jsr 	_FCGetSpriteID
.214e	8d d3 0c	sta $0cd3			sta 	hitSprite2
.2151	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.2153	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2155	f0 12		beq $2169			beq 	_FCParam2
.2157	da		phx				phx
.2158	a2 02		ldx #$02		ldx	#2
.215a	20 65 40	jsr $4065		jsr	mainHandler
.215d	68		pla				pla
.215e	a2 0c		ldx #$0c		ldx	#12
.2160	20 65 40	jsr $4065		jsr	mainHandler
.2163	aa		tax				tax
.2164	b5 98		lda $98,x			lda 	esInt0,x
.2166	8d d4 0c	sta $0cd4			sta 	hitRange
.2169					_FCParam2:
.2169	a2 04		ldx #$04		ldx	#4
.216b	20 65 40	jsr $4065		jsr	mainHandler
.216e	68		pla				pla 								; set X to point to the stack again.
.216f	48		pha				pha
.2170	aa		tax				tax
.2171	5a		phy				phy
.2172	18		clc				clc 								; do it with the horizontal values.
.2173	20 94 21	jsr $2194			jsr 	_FCCheck
.2176	90 0a		bcc $2182			bcc 	_FCFail
.2178	38		sec				sec 								; do it with the vertical values.
.2179	20 94 21	jsr $2194			jsr 	_FCCheck
.217c	90 04		bcc $2182			bcc 	_FCFail
.217e	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.2180	d0 02		bne $2184			bne 	_FCReturnA
.2182					_FCFail:
.2182	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.2184					_FCReturnA:
.2184	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.2186	7a		ply				ply
.2187	68		pla				pla 								; restore stack, return result and exit.
.2188	aa		tax				tax
.2189	a5 32		lda $32				lda 	tempShort
.218b	95 98		sta $98,x			sta 	esInt0,x
.218d	95 a0		sta $a0,x			sta 	esInt1,x
.218f	95 a8		sta $a8,x			sta 	esInt2,x
.2191	95 b0		sta $b0,x			sta 	esInt3,x
.2193	60		rts				rts
.2194					_FCCheck:
.2194	08		php				php 								; save the H/V flag twice
.2195	08		php				php
.2196	ad d2 0c	lda $0cd2			lda 	hitSprite1 					; select sprite 1 and read its location
.2199	20 1c 23	jsr $231c			jsr 	SelectSpriteA 				; into X
.219c	28		plp				plp
.219d	20 40 24	jsr $2440			jsr 	SpriteReadCoordinate
.21a0	ad d3 0c	lda $0cd3			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.21a3	20 1c 23	jsr $231c			jsr 	SelectSpriteA
.21a6	e8		inx				inx
.21a7	28		plp				plp
.21a8	20 40 24	jsr $2440			jsr 	SpriteReadCoordinate
.21ab	ca		dex				dex
.21ac	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.21ad	b5 98		lda $98,x			lda 	esInt0,x
.21af	f5 99		sbc $99,x			sbc 	esInt0+1,x
.21b1	85 2a		sta $2a				sta 	temp0
.21b3	b5 a0		lda $a0,x			lda 	esInt1,x
.21b5	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.21b7	85 2b		sta $2b				sta 	temp0+1
.21b9	10 0d		bpl $21c8			bpl 	_FCCIsPositive
.21bb	38		sec				sec 								; if -ve calculate |difference|
.21bc	a9 00		lda #$00			lda 	#0
.21be	e5 2a		sbc $2a				sbc 	temp0
.21c0	85 2a		sta $2a				sta 	temp0
.21c2	a9 00		lda #$00			lda 	#0
.21c4	e5 2b		sbc $2b				sbc 	temp0+1
.21c6	85 2b		sta $2b				sta 	temp0+1
.21c8					_FCCIsPositive:
.21c8	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.21ca	d0 10		bne $21dc			bne 	_FCCFail
.21cc	18		clc				clc 								; work out required min distance which is
.21cd	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.21cf	75 b1		adc $b1,x			adc 	esInt3+1,x
.21d1	ac d4 0c	ldy $0cd4			ldy 	hitRange 					; get the hit range
.21d4	f0 01		beq $21d7			beq 	_FCCNoSetRange 				; override if non zero.
.21d6	98		tya				tya
.21d7					_FCCNoSetRange:
.21d7	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.21d9	f0 01		beq $21dc			beq 	_FCCFail
.21db	60		rts				rts
.21dc					_FCCFail:
.21dc	18		clc				clc
.21dd	60		rts				rts
.21de					_FCGetSpriteID:
.21de	8a		txa				txa
.21df	a2 0c		ldx #$0c		ldx	#12
.21e1	20 65 40	jsr $4065		jsr	mainHandler
.21e4	aa		tax				tax
.21e5	b5 98		lda $98,x			lda 	esInt0,x
.21e7	30 01		bmi $21ea			bmi 	_FCGSValue
.21e9	60		rts				rts
.21ea					_FCGSValue:
.21ea	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.21ec	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0cd5					currSprite:
>0cd5							.fill 	2
.21ef					CommandSprite:
.21ef	20 f1 22	jsr $22f1			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.21f2	d0 0d		bne $2201			bne 	_CSCheckClear
.21f4	ad 29 9f	lda $9f29			lda 	X16VeraDCVideo 				; sprite enable is bit 6.
.21f7	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.21f9	90 02		bcc $21fd			bcc 	_CSNotOn 					; if CS turn on, so set it
.21fb	09 40		ora #$40			ora 	#$40
.21fd					_CSNotOn:
.21fd	8d 29 9f	sta $9f29			sta 	X16VeraDCVideo 						; write it back in new state and exit
.2200	60		rts				rts
.2201					_CSCheckClear:
.2201	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.2203	8d d6 0c	sta $0cd6			sta 	currSprite+1
.2206	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.2208	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.220a	d0 05		bne $2211			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.220c	20 02 23	jsr $2302			jsr 	CSClearSprites 				; clear all the sprites
.220f	c8		iny				iny 								; consume CLEAR token and exit.
.2210	60		rts				rts
.2211					_CSCommandLoop:
.2211	20 f1 22	jsr $22f1			jsr 	CSCheckOnOff 				; check sprite on/off
.2214	f0 2c		beq $2242			beq 	_CSSetVisibility
.2216	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.2218	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.221a	f0 25		beq $2241			beq 	_CSExit
.221c	c8		iny				iny									; consume it
.221d	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.221f	f0 20		beq $2241			beq 	_CSExit
.2221	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.2223	f0 ec		beq $2211			beq 	_CSCommandLoop
.2225	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.2227	f0 69		beq $2292			beq 	_CSSetImage
.2229	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.222b	f0 2b		beq $2258			beq 	_CSSetFlip
.222d	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.222f	f0 46		beq $2277			beq 	_CSSetPos
.2231	88		dey				dey 								; unpick DEY
.2232	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.2234	a2 0c		ldx #$0c		ldx	#12
.2236	20 65 40	jsr $4065		jsr	mainHandler
.2239	a5 98		lda $98				lda 	esInt0
.223b	20 1c 23	jsr $231c			jsr 	SelectSpriteA
.223e	4c 11 22	jmp $2211			jmp 	_CSCommandLoop
.2241					_CSExit:
.2241	60		rts				rts
.2242					_CSSetVisibility:
.2242	08		php				php 								; save carry
.2243	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.2245	20 d8 22	jsr $22d8			jsr 	SpriteSetTarget
.2248	ad 23 9f	lda $9f23			lda 	X16VeraData0 						; read it.
.224b	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.224d	28		plp				plp
.224e	90 02		bcc $2252			bcc 	_CSSetOff 					; check if carry was set
.2250	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.2252					_CSSetOff:
.2252	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; update and loop back
.2255	4c 11 22	jmp $2211			jmp 	_CSCommandLoop
.2258					_CSSetFlip:
.2258	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.225a	a2 0c		ldx #$0c		ldx	#12
.225c	20 65 40	jsr $4065		jsr	mainHandler
.225f	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.2261	20 d8 22	jsr $22d8			jsr 	SpriteSetTarget
.2264	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.2266	29 03		and #$03			and 	#3
.2268	85 2a		sta $2a				sta 	temp0
.226a	ad 23 9f	lda $9f23			lda 	X16VeraData0 				; update the flip.
.226d	29 fc		and #$fc			and 	#$FC
.226f	05 2a		ora $2a				ora 	temp0
.2271	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2274	4c 11 22	jmp $2211			jmp 	_CSCommandLoop
.2277					_CSSetPos:
.2277	a9 00		lda #$00			lda 	#0 							; X now at level 0
.2279	a2 0a		ldx #$0a		ldx	#10
.227b	20 65 40	jsr $4065		jsr	mainHandler
.227e	a2 02		ldx #$02		ldx	#2
.2280	20 65 40	jsr $4065		jsr	mainHandler
.2283	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.2285	a2 0a		ldx #$0a		ldx	#10
.2287	20 65 40	jsr $4065		jsr	mainHandler
.228a	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.228c	20 fe 23	jsr $23fe			jsr 	SpriteMove 					; move it.
.228f	4c 11 22	jmp $2211			jmp 	_CSCommandLoop
.2292					_CSSetImage:
.2292	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.2294	a2 0c		ldx #$0c		ldx	#12
.2296	20 65 40	jsr $4065		jsr	mainHandler
.2299	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.229b	20 d8 22	jsr $22d8			jsr 	SpriteSetTarget
.229e	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.22a0	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x 			; copy low address in.
.22a3	8d 23 9f	sta $9f23			sta 	X16VeraData0
.22a6	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; bump to offset 1.
.22a9	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.22ac	29 10		and #$10			and 	#$10
.22ae	0a		asl a				asl 	a
.22af	0a		asl a				asl		a
.22b0	0a		asl a				asl 	a 							; put into bit 7
.22b1	1d 5d 0d	ora $0d5d,x			ora 	imageAddr32High,x 			; or high address with it.
.22b4	8d 23 9f	sta $9f23			sta 	X16VeraData0 						; write the high byte.
.22b7	a9 06		lda #$06			lda 	#6
.22b9	20 d8 22	jsr $22d8			jsr 	SpriteSetTarget 			; set sprite on.
.22bc	ad 23 9f	lda $9f23			lda 	X16VeraData0
.22bf	09 0c		ora #$0c			ora 	#$0C
.22c1	8d 23 9f	sta $9f23			sta 	X16VeraData0
.22c4	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 				; point to byte 7 : height/width/palette offset
.22c7	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get image info
.22ca	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.22cb	0a		asl a				asl 	a
.22cc	0a		asl a				asl 	a
.22cd	0a		asl a				asl 	a
.22ce	b0 02		bcs $22d2			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.22d0	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.22d2					_CSNoOffset:
.22d2	8d 23 9f	sta $9f23			sta 	X16VeraData0
.22d5	4c 11 22	jmp $2211			jmp 	_CSCommandLoop
.22d8					SpriteSetTarget:
.22d8	0d d5 0c	ora $0cd5			ora 	currSprite
.22db	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.22de	ad d6 0c	lda $0cd6			lda 	currSprite+1
.22e1	f0 09		beq $22ec			beq 	_SSTNoSet
.22e3	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.22e6	a9 01		lda #$01			lda 	#$01
.22e8	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.22eb	60		rts				rts
.22ec					_SSTNoSet:
.22ec	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.22ee	20 27 15	jsr $1527		jsr	errorHandler
.22f1					CSCheckOnOff:
.22f1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.22f3	c8		iny				iny
.22f4	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.22f6	18		clc				clc
.22f7	f0 08		beq $2301			beq 	_CSCOExit
.22f9	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.22fb	38		sec				sec 								; return NE if neither.
.22fc	f0 03		beq $2301			beq 	_CSCOExit
.22fe	88		dey				dey 								; undo consume
.22ff	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.2301					_CSCOExit:
.2301	60		rts				rts
.2302					CSClearSprites:
.2302	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.2304	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2307	a9 fc		lda #$fc			lda 	#$FC
.2309	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.230c	a9 00		lda #$00			lda 	#0
.230e	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.2311					_CSClear:
.2311	a9 00		lda #$00			lda 	#0 							; set everything to $00
.2313	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2316	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.2319	d0 f6		bne $2311			bne 	_CSClear
.231b	60		rts				rts
.231c					SelectSpriteA:
.231c	85 2a		sta $2a				sta 	temp0
.231e	a9 00		lda #$00			lda 	#0
.2320	06 2a		asl $2a				asl		temp0 						; multiply A:temp0 by 8
.2322	b0 11		bcs $2335			bcs 	_CSBadValue 				; sprites only 0-127
.2324	06 2a		asl $2a				asl 	temp0
.2326	2a		rol a				rol 	a
.2327	06 2a		asl $2a				asl 	temp0
.2329	2a		rol a				rol 	a
.232a	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.232c	8d d6 0c	sta $0cd6			sta 	currSprite+1
.232f	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.2331	8d d5 0c	sta $0cd5			sta 	currSprite+0
.2334	60		rts				rts
.2335					_CSBadValue
.2335	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2337	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritedraw.asm

.0cd7					srenderWidth:
>0cd7							.fill 	1
.233a					Command_Paint:
.233a	a9 42		lda #$42			lda 	#ImageHandler & $FF
.233c	a2 23		ldx #$23			ldx 	#ImageHandler >> 8
.233e	20 ff 18	jsr $18ff			jsr 	GHandler
.2341	60		rts				rts
.2342					ImageHandler:
.2342	a9 49		lda #$49			lda 	#SpriteImageAccess & $FF
.2344	a2 23		ldx #$23			ldx 	#SpriteImageAccess >> 8
.2346	4c 91 1b	jmp $1b91			jmp 	ImageRenderer
.2349					SpriteImageAccess:
.2349	c0 ff		cpy #$ff			cpy 	#255
.234b	d0 22		bne $236f			bne 	_SIAGetPixel
.234d	ae 01 0c	ldx $0c01			ldx 	gdImage 					; get the image #
.2350	bd dd 0c	lda $0cdd,x			lda 	imageInfo,x 				; get the image information.
.2353	48		pha				pha
.2354	29 03		and #$03			and 	#3 							; LSB x 2 width
.2356	aa		tax				tax
.2357	bd 6b 23	lda $236b,x			lda 	_SIASizeTable,x
.235a	8d d7 0c	sta $0cd7			sta 	sRenderWidth 				; save rendering width.
.235d	aa		tax				tax
.235e	68		pla				pla 								; get back next 2 bits are height
.235f	4a		lsr a				lsr 	a
.2360	4a		lsr a				lsr 	a
.2361	29 03		and #$03			and 	#3
.2363	a8		tay				tay
.2364	b9 6b 23	lda $236b,y			lda 	_SIASizeTable,y
.2367	a8		tay				tay
.2368	a9 01		lda #$01			lda 	#1 							; image is type 1, e.g. colour.
.236a	60		rts				rts
.236b					_SIASizeTable:
>236b	08 10 20 40					.byte 	8,16,32,64 					; size of sprites from 2 bits,
.236f					_SIAGetPixel:
.236f	84 2a		sty $2a				sty 	temp0 						; this is the Y size 8,16,32,64 => temp0
.2371	a9 00		lda #$00			lda 	#0
.2373	85 2b		sta $2b				sta 	temp0+1
.2375	ac 01 0c	ldy $0c01			ldy 	gdImage 					; get image info into A
.2378	b9 dd 0c	lda $0cdd,y			lda 	imageInfo,y
.237b	48		pha				pha
.237c	29 10		and #$10			and 	#$10 						; save the 4 bit flag part in temp1
.237e	85 2c		sta $2c				sta 	temp1
.2380	68		pla				pla 								; get width of sprite as 00-11 (8-64)
.2381	29 03		and #$03			and 	#3 							; we shift left +3 e.g. 2^(A+3)
.2383	18		clc				clc
.2384	69 03		adc #$03			adc 	#3
.2386	a8		tay				tay
.2387					_SIAMultiply:
.2387	06 2a		asl $2a				asl 	temp0
.2389	26 2b		rol $2b				rol 	temp0+1
.238b	88		dey				dey
.238c	d0 f9		bne $2387			bne 	_SIAMultiply
.238e	a5 2c		lda $2c				lda 	temp1 						; if the mode bit is 0 then halve this value
.2390	d0 04		bne $2396			bne 	_SIANoHalf 					; because we pack 2 pixels in every byte.
.2392	46 2b		lsr $2b				lsr 	temp0+1
.2394	66 2a		ror $2a				ror 	temp0
.2396					_SIANoHalf:
.2396	ae 01 0c	ldx $0c01			ldx 	gdImage 					; copy the image address / 32 into temp2/temp3
.2399	bd 1d 0d	lda $0d1d,x			lda 	imageAddr32Low,x
.239c	85 2e		sta $2e				sta 	temp2
.239e	bd 5d 0d	lda $0d5d,x			lda 	imageAddr32High,x
.23a1	85 2f		sta $2f				sta 	temp2+1
.23a3	a9 00		lda #$00			lda 	#0
.23a5	85 30		sta $30				sta 	temp3
.23a7	a2 05		ldx #$05			ldx 	#5 							; multiply by 32 e.g. 2^5
.23a9					_SIMult32:
.23a9	06 2e		asl $2e				asl 	temp2
.23ab	26 2f		rol $2f				rol 	temp2+1
.23ad	26 30		rol $30				rol 	temp3
.23af	ca		dex				dex
.23b0	d0 f7		bne $23a9			bne 	_SIMult32
.23b2	ee 25 9f	inc $9f25			inc 	X16VeraControl 				; select alternate data port
.23b5	18		clc				clc
.23b6	a5 2a		lda $2a				lda 	temp0 						; add offset to sprite address x 32 and write to address
.23b8	65 2e		adc $2e				adc 	temp2
.23ba	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.23bd	a5 2b		lda $2b				lda 	temp0+1
.23bf	65 2f		adc $2f				adc 	temp2+1
.23c1	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.23c4	a9 10		lda #$10			lda 	#$10
.23c6	65 30		adc $30				adc 	temp3
.23c8	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.23cb	a2 00		ldx #$00			ldx 	#0 							; index into Render Cache.
.23cd					_SIFillCacheLoop:
.23cd	a5 2c		lda $2c				lda 	temp1 						; is it 8 bit ? if so, then exit
.23cf	d0 12		bne $23e3			bne 	_SI8Bit
.23d1	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; get data
.23d4	48		pha				pha 								; save it
.23d5	4a		lsr a				lsr 	a 							; MSB first
.23d6	4a		lsr a				lsr 	a
.23d7	4a		lsr a				lsr 	a
.23d8	4a		lsr a				lsr 	a
.23d9	20 f3 23	jsr $23f3			jsr 	_SIWrite4Bit
.23dc	68		pla				pla
.23dd	20 f3 23	jsr $23f3			jsr 	_SIWrite4Bit
.23e0	4c ea 23	jmp $23ea			jmp 	_SIAdvance
.23e3					_SI8Bit:
.23e3	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; copy data into render cache
.23e6	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23e9	e8		inx				inx
.23ea					_SIAdvance:
.23ea	ec d7 0c	cpx $0cd7			cpx 	sRenderWidth 				; filled the cache to required width ?
.23ed	d0 de		bne $23cd			bne 	_SIFillCacheLoop
.23ef	ce 25 9f	dec $9f25			dec 	X16VeraControl 				; select original data port.
.23f2	60		rts				rts
.23f3					_SIWrite4Bit:
.23f3	29 0f		and #$0f			and 	#15 						; if 0 (e.g. would paint 240, return 0 transparent)
.23f5	f0 02		beq $23f9			beq 	_SIW4Skip
.23f7	09 f0		ora #$f0			ora 	#$F0
.23f9					_SIW4Skip:
.23f9	9d 10 0c	sta $0c10,x			sta 	RenderCache,x
.23fc	e8		inx				inx
.23fd	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.23fe					SpriteMove:
.23fe	5a		phy				phy
.23ff	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2401	20 d8 22	jsr $22d8			jsr 	SpriteSetTarget
.2404	ad 23 9f	lda $9f23			lda 	X16VeraData0
.2407	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2408	4a		lsr a				lsr 	a
.2409	4a		lsr a				lsr 	a
.240a	4a		lsr a				lsr 	a
.240b	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.240d	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.240f	20 d8 22	jsr $22d8			jsr 	SpriteSetTarget
.2412	20 20 24	jsr $2420			jsr 	SMWritePosition 					; write X position out.
.2415	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.2417	46 2a		lsr $2a				lsr 	temp0
.2419	e8		inx				inx 										; get the y position
.241a	20 20 24	jsr $2420			jsr 	SMWritePosition 					; and write that out.
.241d	ca		dex				dex 										; fix X and quit.
.241e	7a		ply				ply
.241f	60		rts				rts
.2420					SMWritePosition:
.2420	a5 2a		lda $2a				lda 	temp0 								; get dim size
.2422	29 03		and #$03			and 	#3 									; in range into Y
.2424	a8		tay				tay
.2425	38		sec				sec
.2426	b5 98		lda $98,x			lda 	esInt0,x
.2428	f9 3c 24	sbc $243c,y			sbc 	SMHalfSize,y
.242b	8d 23 9f	sta $9f23			sta 	X16VeraData0
.242e	ee 20 9f	inc $9f20			inc 	X16VeraAddLow
.2431	b5 a0		lda $a0,x			lda 	esInt1,x
.2433	e9 00		sbc #$00			sbc 	#0
.2435	8d 23 9f	sta $9f23			sta 	X16VeraData0
.2438	ee 20 9f	inc $9f20			inc 	X16VeraAddLow
.243b	60		rts				rts
.243c					SMHalfSize:
>243c	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2440					SpriteReadCoordinate:
.2440	5a		phy				phy
.2441	08		php				php 										; save CTR on stack
.2442	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2444	20 d8 22	jsr $22d8			jsr 	SpriteSetTarget
.2447	ad 23 9f	lda $9f23			lda 	X16VeraData0
.244a	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.244b	4a		lsr a				lsr 	a
.244c	4a		lsr a				lsr 	a
.244d	4a		lsr a				lsr 	a
.244e	28		plp				plp 										; restore CTS
.244f	08		php				php
.2450	90 02		bcc $2454			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2452	4a		lsr a				lsr 	a
.2453	4a		lsr a				lsr 	a
.2454					_SPRCNotY1:
.2454	29 03		and #$03			and 	#3 									; point into half width/height
.2456	a8		tay				tay
.2457	b9 3c 24	lda $243c,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.245a	95 b0		sta $b0,x			sta 	esInt3,x
.245c	28		plp				plp 										; CS Y CC X
.245d	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.245f	2a		rol a				rol 	a
.2460	2a		rol a				rol 	a
.2461	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2463	20 d8 22	jsr $22d8			jsr 	SpriteSetTarget 					; set data pointer offset by that
.2466	18		clc				clc 										; read and unfix centre.
.2467	ad 23 9f	lda $9f23			lda 	X16VeraData0
.246a	75 b0		adc $b0,x			adc 	esInt3,x
.246c	95 98		sta $98,x			sta 	esInt0,x
.246e	ee 20 9f	inc $9f20			inc 	X16VeraAddLow 						; do MSB
.2471	ad 23 9f	lda $9f23			lda 	X16VeraData0
.2474	69 00		adc #$00			adc 	#0
.2476	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2478	c9 08		cmp #$08			cmp		#$08
.247a	90 02		bcc $247e			bcc 	_SPRCNoSX
.247c	09 f0		ora #$f0			ora 	#$F0
.247e					_SPRCNoSX:
.247e	95 a0		sta $a0,x			sta 	esInt1,x
.2480	7a		ply				ply
.2481	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2482					Sprite_GetX:
.2482	18		clc				clc
.2483	90 01		bcc $2486			bcc 	SpriteGetCode
.2485					Sprite_GetY:
.2485	38		sec				sec
.2486					SpriteGetCode:
.2486	08		php				php 								; CLC : X SEC: Y, save on stack.
.2487	48		pha				pha 								; save stack position
.2488	20 a3 24	jsr $24a3			jsr 	GetSpriteNumber 			; get # of sprite.
.248b	a2 04		ldx #$04		ldx	#4
.248d	20 65 40	jsr $4065		jsr	mainHandler
.2490	fa		plx				plx
.2491	28		plp				plp 								; which one ?
.2492	20 40 24	jsr $2440			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.2495	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.2497	29 80		and #$80			and 	#$80
.2499	f0 02		beq $249d			beq 	_SGXYPos
.249b	a9 ff		lda #$ff			lda 	#$FF
.249d					_SGXYPos:
.249d	95 a8		sta $a8,x			sta 	esInt2,x
.249f	95 b0		sta $b0,x			sta 	esInt3,x
.24a1	8a		txa				txa 								; return NSP in A
.24a2	60		rts				rts
.24a3					GetSpriteNumber:
.24a3	48		pha				pha
.24a4	a2 0c		ldx #$0c		ldx	#12
.24a6	20 65 40	jsr $4065		jsr	mainHandler
.24a9	fa		plx				plx
.24aa	b5 98		lda $98,x			lda 	esInt0,x
.24ac	20 1c 23	jsr $231c			jsr 	SelectSpriteA
.24af	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/imagedef.asm

.24b0					Command_Image:
.24b0	a9 00		lda #$00			lda 	#0 							; get a small int
.24b2	a2 0c		ldx #$0c		ldx	#12
.24b4	20 65 40	jsr $4065		jsr	mainHandler
.24b7	5a		phy				phy
.24b8	a5 98		lda $98				lda 	esInt0 						; get character #
.24ba	a0 00		ldy #$00			ldy 	#0 							; offset 0
.24bc	20 6b 26	jsr $266b			jsr 	PointVeraCharacterA 		; routine in textdraw that points to character A
.24bf	7a		ply				ply
.24c0					_CILoop:
.24c0	b1 28		lda ($28),y			lda 	(codePtr),Y 				; followed by ,
.24c2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.24c4	d0 10		bne $24d6			bne 	_CIExit 					; no, then done.
.24c6	c8		iny				iny 								; skip comma
.24c7	a9 00		lda #$00			lda 	#0 							; get a small int
.24c9	a2 0c		ldx #$0c		ldx	#12
.24cb	20 65 40	jsr $4065		jsr	mainHandler
.24ce	a5 98		lda $98				lda 	esInt0
.24d0	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; write to vera
.24d3	4c c0 24	jmp $24c0			jmp 	_CILoop
.24d6					_CIExit:
.24d6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0cd8					currentMode:
>0cd8							.fill 	4
.24d7					ForceMode0:
.24d7	a2 00		ldx #$00			ldx 	#0
.24d9	86 98		stx $98				stx 	esInt0 						; in case we do it, like mode n command, set +0
.24db					_FMCheck:
.24db	bd 70 25	lda $2570,x			lda 	CMModeList,x 				; do we need to switch ?
.24de	dd d8 0c	cmp $0cd8,x			cmp 	currentMode,x
.24e1	d0 17		bne $24fa			bne 	CMSetMode 					; different so switch.
.24e3	e8		inx				inx
.24e4	e0 04		cpx #$04			cpx 	#4 							; compared all four bytes.
.24e6	d0 f3		bne $24db			bne 	_FMCheck
.24e8	60		rts				rts
.24e9					CommandMode:
.24e9	a9 00		lda #$00			lda 	#0 							; get mode number
.24eb	a2 0a		ldx #$0a		ldx	#10
.24ed	20 65 40	jsr $4065		jsr	mainHandler
.24f0	20 f4 24	jsr $24f4			jsr 	SetModeTOS
.24f3	60		rts				rts
.24f4					SetModeTOS:
.24f4	a5 b0		lda $b0				lda 	esInt3 						; these 3 bits goto $9F29 as Sprites/Layer enable
.24f6	29 70		and #$70			and 	#$70 						; so if they are all zero then this is likely a mode number
.24f8	d0 06		bne $2500			bne 	CMNoExpand 					; otherwise it is a user defined 32 bit one.
.24fa					CMSetMode:
.24fa	20 51 25	jsr $2551			jsr 	CMExpandMode 				; mode number -> mode definition
.24fd	4c 14 25	jmp $2514			jmp 	CMUpdateMode
.2500					CMNoExpand:
.2500	a5 98		lda $98				lda 	esInt0 						; copy 32 bit data to current mode.
.2502	8d d8 0c	sta $0cd8			sta 	currentMode
.2505	a5 a0		lda $a0				lda 	esInt1
.2507	8d d9 0c	sta $0cd9			sta 	currentMode+1
.250a	a5 a8		lda $a8				lda 	esInt2
.250c	8d da 0c	sta $0cda			sta 	currentMode+2
.250f	a5 b0		lda $b0				lda 	esInt3
.2511	8d db 0c	sta $0cdb			sta 	currentMode+3
.2514					CMUpdateMode:
.2514	a2 11		ldx #$11			ldx 	#$11
.2516					_CMClear:
.2516	a9 00		lda #$00			lda 	#0
.2518	9d 29 9f	sta $9f29,x			sta 	X16VeraDCVideo,X
.251b	ca		dex				dex
.251c	10 f8		bpl $2516			bpl 	_CMClear
.251e	ad db 0c	lda $0cdb			lda 	currentMode+3 				; get current mode
.2521	48		pha				pha 								; stack twice.
.2522	48		pha				pha
.2523	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.2525	09 01		ora #$01			ora 	#$01 						; turn the output on.
.2527	8d 29 9f	sta $9f29			sta 	X16VeraDCVideo 				; write to DC_VIDEO
.252a	68		pla				pla 								; get back
.252b	20 80 25	jsr $2580			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.252e	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.2531	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.2532	4a		lsr a				lsr 	a
.2533	4a		lsr a				lsr 	a
.2534	20 80 25	jsr $2580			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2537	8d 2b 9f	sta $9f2b			sta 	X16VeraVScale
.253a	a2 00		ldx #$00			ldx 	#0 							; this is offset from X16VeraLayerConfig to do L0
.253c	ad d8 0c	lda $0cd8			lda 	currentMode					; get L0 config byte
.253f	20 8b 25	jsr $258b			jsr 	CMDecodeLayer 				; and decode layer 0
.2542	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2544	ad d9 0c	lda $0cd9			lda 	currentMode+1
.2547	20 8b 25	jsr $258b			jsr 	CMDecodeLayer
.254a	20 be 1d	jsr $1dbe			jsr 	gdModeChanged 				; check the bitmap status.
.254d	20 ea 18	jsr $18ea			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2550	60		rts				rts
.2551					CMExpandMode:
.2551	a5 98		lda $98				lda 	esInt0 						; get mode number, check it is valid.
.2553	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2555	b0 14		bcs $256b			bcs 	_CMModeError
.2557	0a		asl a				asl 	a 							; x 4 into X
.2558	0a		asl a				asl 	a
.2559	aa		tax				tax
.255a	5a		phy				phy
.255b	a0 00		ldy #$00			ldy 	#0
.255d					_CMEMCopy:
.255d	bd 70 25	lda $2570,x			lda 	CMModeList,x 				; copy defined mode data in , 4 bytes
.2560	99 d8 0c	sta $0cd8,y			sta 	currentMode,y
.2563	e8		inx				inx
.2564	c8		iny				iny
.2565	c0 04		cpy #$04			cpy 	#4
.2567	d0 f4		bne $255d			bne 	_CMEMCopy
.2569	7a		ply				ply
.256a	60		rts				rts
.256b					_CMModeError:
.256b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.256d	20 27 15	jsr $1527		jsr	errorHandler
.2570					CMModeList:
>2570	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2574	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2578	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>257c	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2580					CMEndModeList:
.2580					CMToScale:
.2580	29 03		and #$03			and 	#3 							; lower 2 bits only
.2582	aa		tax				tax 								; put in X for counting
.2583	a9 00		lda #$00			lda 	#0 							; zero result
.2585	38		sec				sec 								; first time rotate CS in
.2586					_CMTSLoop:
.2586	6a		ror a				ror 	a
.2587	ca		dex				dex
.2588	10 fc		bpl $2586			bpl 	_CMTSLoop
.258a	60		rts				rts
.258b					CMDecodeLayer:
.258b	48		pha				pha 								; save it.
.258c	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.258e	9d 2d 9f	sta $9f2d,x			sta 	X16VeraLayerConfig,X
.2591	68		pla				pla 								; get it back
.2592	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2594	f0 02		beq $2598			beq 	_CMDLNotSet
.2596	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2598					_CMDLNotSet:
.2598	e0 00		cpx #$00			cpx 	#0
.259a	f0 06		beq $25a2			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.259c	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.259e	9d 2f 9f	sta $9f2f,x			sta 	X16VeraLayerTileBase,X
.25a1	60		rts				rts
.25a2					_CMDLayer0:
.25a2	09 80		ora #$80			ora 	#$80 						; tile base is $80
.25a4	9d 2f 9f	sta $9f2f,x			sta 	X16VeraLayerTileBase,X
.25a7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.25a8					CommandPalette:
.25a8	a9 00		lda #$00			lda 	#0
.25aa	a2 0c		ldx #$0c		ldx	#12
.25ac	20 65 40	jsr $4065		jsr	mainHandler
.25af	a2 02		ldx #$02		ldx	#2
.25b1	20 65 40	jsr $4065		jsr	mainHandler
.25b4	a9 01		lda #$01			lda 	#1 						; palette RGB -> 1
.25b6	a2 08		ldx #$08		ldx	#8
.25b8	20 65 40	jsr $4065		jsr	mainHandler
.25bb	a5 98		lda $98				lda 	esInt0 					; get palette #
.25bd	20 cd 25	jsr $25cd			jsr 	PointToPaletteA			; point to palette register
.25c0	a5 99		lda $99				lda 	esInt0+1				; copy 12 bits of palette data to vera
.25c2	8d 23 9f	sta $9f23			sta 	X16VeraData0
.25c5	a5 a1		lda $a1				lda 	esInt1+1
.25c7	29 0f		and #$0f			and 	#$0F
.25c9	8d 23 9f	sta $9f23			sta 	X16VeraData0
.25cc	60		rts				rts
.25cd					PointToPaletteA:
.25cd	0a		asl a				asl 	a 							; x 2 -> LSB
.25ce	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.25d1	a9 00		lda #$00			lda 	#0 							; carry into A
.25d3	2a		rol a				rol 	a
.25d4	09 fa		ora #$fa			ora 	#(X16VeraPalette >> 8)&$FF	; make correct address
.25d6	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.25d9	a9 11		lda #$11			lda 	#(X16VeraPalette >> 16)|$10	; $01 and single step => X16VeraAddHigh
.25db	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.25de	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/textdraw.asm

.25df					Command_Draw:
.25df	a9 e7		lda #$e7			lda 	#TextHandler & $FF
.25e1	a2 25		ldx #$25			ldx 	#TextHandler >> 8
.25e3	20 ff 18	jsr $18ff			jsr 	GHandler
.25e6	60		rts				rts
.25e7					TextHandler:
.25e7	ad 08 0c	lda $0c08			lda 	gdText+1 					; do we have a string
.25ea	d0 1a		bne $2606			bne 	_THHasString
.25ec					_THCallRenderer:
.25ec	da		phx				phx
.25ed	ad f2 0b	lda $0bf2			lda 	gy2
.25f0	48		pha				pha
.25f1	ad f3 0b	lda $0bf3			lda 	gy2+1
.25f4	48		pha				pha
.25f5	a9 3a		lda #$3a			lda 	#BitmapTextAccess & $FF 	; render current image (gdImage)
.25f7	a2 26		ldx #$26			ldx 	#BitmapTextAccess >> 8
.25f9	20 91 1b	jsr $1b91			jsr 	ImageRenderer
.25fc	68		pla				pla 								; restore y position and x register
.25fd	8d f3 0b	sta $0bf3			sta 	gy2+1
.2600	68		pla				pla
.2601	8d f2 0b	sta $0bf2			sta 	gy2
.2604	fa		plx				plx
.2605	60		rts				rts
.2606					_THHasString:
.2606	a2 00		ldx #$00			ldx 	#0 							; position in string
.2608					_THStringLoop:
.2608	ad 07 0c	lda $0c07			lda 	gdText 						; text => temp0
.260b	85 2a		sta $2a				sta 	temp0
.260d	ad 08 0c	lda $0c08			lda 	gdText+1
.2610	85 2b		sta $2b				sta 	temp0+1
.2612	8a		txa				txa 								; length = string length.
.2613	a0 00		ldy #$00			ldy 	#0
.2615	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2617	f0 20		beq $2639			beq 	_THExit 					; if so exit.
.2619	e8		inx				inx 								; next character, put in Y
.261a	8a		txa				txa
.261b	a8		tay				tay
.261c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; char to print, override image
.261e	8d 01 0c	sta $0c01			sta 	gdImage
.2621	20 ec 25	jsr $25ec			jsr 	_THCallRenderer 			; render the text
.2624	ad 00 0c	lda $0c00			lda 	gdSize	 					; get size, need to x by 8 as 8x8 font.
.2627	0a		asl a				asl		a
.2628	0a		asl a				asl 	a
.2629	0a		asl a				asl 	a
.262a	18		clc				clc
.262b	6d f0 0b	adc $0bf0			adc 	gX2 						; add to horizontal position
.262e	8d f0 0b	sta $0bf0			sta 	gx2
.2631	90 d5		bcc $2608			bcc 	_THStringLoop
.2633	ee f1 0b	inc $0bf1			inc 	gx2+1
.2636	4c 08 26	jmp $2608			jmp 	_THStringLoop 				; do the whole lot.
.2639					_THExit:
.2639	60		rts				rts
.263a					BitmapTextAccess:
.263a	c0 ff		cpy #$ff			cpy 	#$FF 						; get information
.263c	d0 07		bne $2645			bne 	_BTABitmap
.263e	a9 00		lda #$00			lda 	#0 							; bitmap 8x8
.2640	a2 08		ldx #$08			ldx 	#8
.2642	a0 08		ldy #$08			ldy 	#8
.2644	60		rts				rts
.2645					_BTABitmap:
.2645	ad 01 0c	lda $0c01			lda 	gdImage 					; Image => temp0:A
.2648	20 4c 26	jsr $264c			jsr 	GetRenderCharacterA
.264b	60		rts				rts
.264c					GetRenderCharacterA:
.264c	ee 25 9f	inc $9f25			inc 	X16VeraControl 				; alternate port set.
.264f	20 6b 26	jsr $266b			jsr 	PointVeraCharacterA
.2652	ad 24 9f	lda $9f24			lda 	X16VeraData1 				; get bitmap
.2655	ce 25 9f	dec $9f25			dec 	X16VeraControl 				; original port set back
.2658	a2 07		ldx #$07			ldx 	#7 							; index into rendercache
.265a	85 2a		sta $2a				sta 	temp0 						; bitmap in temp 0
.265c					_BTADoCache:
.265c	a9 00		lda #$00			lda 	#0
.265e	46 2a		lsr $2a				lsr 	temp0
.2660	90 02		bcc $2664			bcc 	_BTANotSet
.2662	a9 ff		lda #$ff			lda 	#255
.2664					_BTANotSet:
.2664	9d 10 0c	sta $0c10,x			sta 	renderCache,x
.2667	ca		dex				dex
.2668	10 f2		bpl $265c			bpl 	_BTADoCache
.266a	60		rts				rts
.266b					PointVeraCharacterA:
.266b	85 2a		sta $2a				sta 	temp0
.266d	a9 00		lda #$00			lda 	#0
.266f	06 2a		asl $2a				asl 	temp0	 					; x temp0:A x 8
.2671	2a		rol a				rol 	a
.2672	06 2a		asl $2a				asl 	temp0
.2674	2a		rol a				rol 	a
.2675	06 2a		asl $2a				asl 	temp0
.2677	2a		rol a				rol 	a
.2678	09 f8		ora #$f8			ora 	#(VeraDefaultFont >> 8)&$FF ; A now points into font table.
.267a	8d 21 9f	sta $9f21			sta 	X16VeraAddMed 				; set up address
.267d	a9 10		lda #$10			lda 	#$10+(VeraDefaultFont >> 16)
.267f	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.2682	84 32		sty $32				sty 	tempShort
.2684	a5 2a		lda $2a				lda 	temp0 						; or Y (vertical line) into temp0
.2686	05 32		ora $32				ora 	tempShort
.2688	8d 20 9f	sta $9f20			sta 	X16VeraAddLow 				; address set up.
.268b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.268c					Command_VLoad:
.268c	a9 00		lda #$00			lda 	#0 								; string which is the file name
.268e	a2 0e		ldx #$0e		ldx	#14
.2690	20 65 40	jsr $4065		jsr	mainHandler
.2693	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.2695	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.2697	95 98		sta $98,x			sta 	esInt0,x
.2699	a5 36		lda $36				lda 	lowMemory+1
.269b	95 a0		sta $a0,x			sta 	esInt1,x
.269d	a9 00		lda #$00			lda 	#0
.269f	95 a8		sta $a8,x			sta 	esInt2,x
.26a1	95 b0		sta $b0,x			sta 	esInt3,x
.26a3	a2 0c		ldx #$0c		ldx	#12
.26a5	20 05 15	jsr $1505		jsr	deviceHandler
.26a8	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.26aa	85 2a		sta $2a				sta 	temp0
.26ac	a5 a1		lda $a1				lda 	esInt1+1
.26ae	85 2b		sta $2b				sta 	temp0+1
.26b0	20 2b 27	jsr $272b			jsr 	LoadVRAMFile 					; load the VRAM file in.
.26b3	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.26b4					Command_VPoke:
.26b4	38		sec				sec 						; one byte , CS
.26b5	b0 01		bcs $26b8			bcs 	CmdVideoWrite
.26b7					Command_VDoke:
.26b7	18		clc				clc 						; two bytes, CC
.26b8					CmdVideoWrite:
.26b8	08		php				php 						; save one or two btes
.26b9	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.26bb	a2 0a		ldx #$0a		ldx	#10
.26bd	20 65 40	jsr $4065		jsr	mainHandler
.26c0	a2 02		ldx #$02		ldx	#2
.26c2	20 65 40	jsr $4065		jsr	mainHandler
.26c5	a9 01		lda #$01			lda 	#1
.26c7	a2 0a		ldx #$0a		ldx	#10
.26c9	20 65 40	jsr $4065		jsr	mainHandler
.26cc	a2 00		ldx #$00			ldx 	#0
.26ce	20 df 26	jsr $26df			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.26d1	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.26d3	8d 23 9f	sta $9f23			sta 	X16VeraData0
.26d6	28		plp				plp 						; if it was Poke then exit
.26d7	b0 05		bcs $26de			bcs 	_CVWExit
.26d9	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.26db	8d 23 9f	sta $9f23			sta 	X16VeraData0
.26de					_CVWExit:
.26de	60		rts				rts
.26df					SetUpTOSVRamAddress:
.26df	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.26e1	29 fe		and #$fe			and 	#$FE
.26e3	15 b0		ora $b0,x			ora 	esInt3,x
.26e5	d0 14		bne $26fb			bne 	CVWValue
.26e7	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.26e9	8d 20 9f	sta $9f20			sta 	X16VeraAddLow
.26ec	b5 a0		lda $a0,x			lda 	esInt1,x
.26ee	8d 21 9f	sta $9f21			sta	 	X16VeraAddMed
.26f1	b5 a8		lda $a8,x			lda 	esInt2,x
.26f3	29 01		and #$01			and 	#1
.26f5	09 10		ora #$10			ora 	#$10 				; step 1.
.26f7	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.26fa	60		rts				rts
.26fb					CVWValue:
.26fb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.26fd	20 27 15	jsr $1527		jsr	errorHandler
.2700					Command_VPeek:
.2700	38		sec				sec 						; one byte , CS
.2701	b0 01		bcs $2704			bcs 	CmdVideoRead
.2703					Command_VDeek:
.2703	18		clc				clc 						; two bytes, CC
.2704					CmdVideoRead:
.2704	08		php				php 						; save action on stack.
.2705	48		pha				pha 						; save stack position
.2706	a2 0a		ldx #$0a		ldx	#10
.2708	20 65 40	jsr $4065		jsr	mainHandler
.270b	a2 04		ldx #$04		ldx	#4
.270d	20 65 40	jsr $4065		jsr	mainHandler
.2710	fa		plx				plx
.2711	20 df 26	jsr $26df			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2714	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.2716	95 a0		sta $a0,x			sta 	esInt1,x
.2718	95 a8		sta $a8,x			sta 	esInt2,x
.271a	95 b0		sta $b0,x			sta 	esInt3,x
.271c	ad 23 9f	lda $9f23			lda 	X16VeraData0				; copy 1st byte
.271f	95 98		sta $98,x			sta 	esInt0,x
.2721	28		plp				plp 						; check if DOKE (carry was clear)
.2722	b0 05		bcs $2729			bcs 	_CVRExit
.2724	ad 23 9f	lda $9f23			lda 	X16VeraData0 				; copy 2nd byte
.2727	95 a0		sta $a0,x			sta 	esInt1,x
.2729					_CVRExit:
.2729	8a		txa				txa 						; return X position.
.272a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0cdc					compressMode:
>0cdc							.fill 	1
.0cdd					imageInfo:
>0cdd							.fill 	X16MaxImages
.0d1d					imageAddr32Low:
>0d1d							.fill  	X16MaxImages
.0d5d					imageAddr32High:
>0d5d							.fill  	X16MaxImages
.272b					LoadVRAMFile:
.272b	da		phx				phx
.272c	5a		phy				phy
.272d					_LVRLoop:
.272d	20 07 28	jsr $2807			jsr 	LVFGet 						; get the next (never access direct)
.2730	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.2732	f0 42		beq $2776			beq 	_LVRExit
.2734	b0 5a		bcs $2790			bcs 	_LVRLoad 					; load data in ?
.2736	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2738	90 11		bcc $274b			bcc 	_LVRSetAddress
.273a	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.273c	f0 3b		beq $2779			beq 	_LVRSetPalette
.273e	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2740	90 2d		bcc $276f			bcc 	_LVRSetCompress
.2742	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.2744	90 5e		bcc $27a4			bcc 	_LVRSetSprite
.2746	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2748	20 27 15	jsr $1527		jsr	errorHandler
.274b					_LVRSetAddress:
.274b	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.274d	20 07 28	jsr $2807			jsr 	LVFGet
.2750	85 2c		sta $2c				sta 	temp1
.2752	a9 00		lda #$00			lda 	#0
.2754	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.2756	66 2c		ror $2c				ror 	temp1
.2758	6a		ror a				ror		a
.2759	46 2d		lsr $2d				lsr 	temp1+1
.275b	66 2c		ror $2c				ror 	temp1
.275d	6a		ror a				ror		a
.275e	8d 20 9f	sta $9f20			sta 	X16VeraAddLow 						; set write address with +1 increment
.2761	a5 2c		lda $2c				lda 	temp1
.2763	8d 21 9f	sta $9f21			sta 	X16VeraAddMed
.2766	a5 2d		lda $2d				lda 	temp1+1
.2768	09 10		ora #$10			ora 	#$10
.276a	8d 22 9f	sta $9f22			sta 	X16VeraAddHigh
.276d	d0 be		bne $272d			bne 	_LVRLoop
.276f					_LVRSetCompress:
.276f	29 07		and #$07			and 	#7
.2771	8d dc 0c	sta $0cdc			sta 	compressMode
.2774	10 b7		bpl $272d			bpl 	_LVRLoop
.2776					_LVRExit:
.2776	7a		ply				ply
.2777	fa		plx				plx
.2778	60		rts				rts
.2779					_LVRSetPalette:
.2779	20 07 28	jsr $2807			jsr 	LVFGet 						; get palette id.
.277c	20 cd 25	jsr $25cd			jsr 	PointToPaletteA 			; in palette.asm
.277f	20 07 28	jsr $2807			jsr 	LVFGet 						; copy 12 bit palette data in.
.2782	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; and send to Vera
.2785	20 07 28	jsr $2807			jsr 	LVFGet
.2788	29 0f		and #$0f			and 	#$0F
.278a	8d 23 9f	sta $9f23			sta 	X16VeraData0
.278d	4c 2d 27	jmp $272d			jmp 	_LVRLoop
.2790					_LVRLoad:
.2790	ae dc 0c	ldx $0cdc			ldx 	compressMode
.2793	d0 55		bne $27ea			bne 	_LVRNotMode0
.2795	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.2797					_LVRLCopyX:
.2797	aa		tax				tax
.2798					_LVRLCopy:
.2798	20 07 28	jsr $2807			jsr 	LVFGet 						; write to data.
.279b	8d 23 9f	sta $9f23			sta 	X16VeraData0
.279e	ca		dex				dex
.279f	d0 f7		bne $2798			bne 	_LVRLCopy
.27a1	4c 2d 27	jmp $272d			jmp 	_LVRLoop
.27a4					_LVRSetSprite:
.27a4	48		pha				pha 								; save on stack
.27a5	20 07 28	jsr $2807			jsr 	LVFGet 						; get the sprite number into X
.27a8	aa		tax				tax
.27a9	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.27ab	b0 38		bcs $27e5			bcs 	_LVRSSValue
.27ad	68		pla				pla 								; restore the data held in the first byte
.27ae	9d dd 0c	sta $0cdd,x			sta 	imageInfo,x 				; and write into the sprite image table.
.27b1					_LVRAlignVRAM:
.27b1	ad 20 9f	lda $9f20			lda 	X16VeraAddLow 				; check VRAM on 32 byte boundary
.27b4	29 1f		and #$1f			and 	#$1F 						; sprite image addresses are limited to this.
.27b6	f0 07		beq $27bf			beq 	_LVRAligned
.27b8	a9 00		lda #$00			lda 	#$00
.27ba	8d 23 9f	sta $9f23			sta 	X16VeraData0
.27bd	f0 f2		beq $27b1			beq 	_LVRAlignVRAM
.27bf					_LVRAligned:
.27bf	ad 22 9f	lda $9f22			lda 	X16VeraAddHigh 				; put address/32 in sprite image table
.27c2	4a		lsr a				lsr 	a 	 						; first halve into temp1
.27c3	ad 21 9f	lda $9f21			lda 	X16VeraAddMed
.27c6	6a		ror a				ror 	a
.27c7	85 2d		sta $2d				sta 	temp1+1
.27c9	ad 20 9f	lda $9f20			lda 	X16VeraAddLow
.27cc	6a		ror a				ror 	a
.27cd	85 2c		sta $2c				sta 	temp1
.27cf	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.27d1					_LVRShift:
.27d1	46 2d		lsr $2d				lsr 	temp1+1
.27d3	66 2c		ror $2c				ror 	temp1
.27d5	88		dey				dey
.27d6	d0 f9		bne $27d1			bne 	_LVRShift
.27d8	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.27da	9d 5d 0d	sta $0d5d,x			sta 	imageAddr32High,x
.27dd	a5 2c		lda $2c				lda 	temp1
.27df	9d 1d 0d	sta $0d1d,x			sta 	imageAddr32Low,x
.27e2	4c 2d 27	jmp $272d			jmp 	_LVRLoop
.27e5					_LVRSSValue:
.27e5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.27e7	20 27 15	jsr $1527		jsr	errorHandler
.27ea					_LVRNotMode0:
.27ea	e0 01		cpx #$01			cpx 	#1
.27ec	d0 15		bne $2803			bne 	_LVRNotMode1
.27ee	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.27f0	c9 40		cmp #$40			cmp 	#$40
.27f2	90 a3		bcc $2797			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.27f4					_LVRRLEGroup:
.27f4	29 3f		and #$3f			and 	#$3F 						; the number of copies of the following byte.
.27f6	aa		tax				tax
.27f7	20 07 28	jsr $2807			jsr 	LVFGet 						; get the byte to copy
.27fa					_LVRLEGroupLoop:
.27fa	8d 23 9f	sta $9f23			sta 	X16VeraData0 				; write it out X times
.27fd	ca		dex				dex
.27fe	d0 fa		bne $27fa			bne 	_LVRLEGroupLoop
.2800	4c 2d 27	jmp $272d			jmp 	_LVRLoop
.2803					_LVRNotMode1:
>2803	db						.byte 	$DB
.2804	4c 03 28	jmp $2803			jmp 	_LVRNotMode1
.2807	84 32		sty $32		LVFGet:	sty 	tempShort
.2809	a0 00		ldy #$00			ldy 	#0
.280b	b1 2a		lda ($2a),y			lda 	(temp0),y
.280d	a4 32		ldy $32				ldy	 	tempShort
.280f	e6 2a		inc $2a				inc 	temp0
.2811	d0 02		bne $2815			bne 	_LVFGExit
.2813	e6 2b		inc $2b				inc 	temp0+1
.2815					_LVFGExit:
.2815	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2816					section_end_extension:
.2816					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2816					floatingpointHandler:
.2816	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2818	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: basic.asm

.281b					section_end_floatingpoint:
.281b					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.281b					ColdStartEntry:
.281b	a2 ff		ldx #$ff			ldx 	#$FF
.281d	9a		txs				txs
.281e	20 a7 28	jsr $28a7			jsr 	ForceStandardMode
.2821	a2 02		ldx #$02		ldx	#2
.2823	20 05 15	jsr $1505		jsr	deviceHandler
.2826	a0 ff		ldy #$ff			ldy 	#255
.2828					_CSBanner:
.2828	c8		iny				iny
.2829	b9 4f 28	lda $284f,y			lda 	Intro,y
.282c	f0 14		beq $2842			beq 	_CSStart
.282e	c9 08		cmp #$08			cmp 	#8
.2830	90 08		bcc $283a			bcc 	_CSInk
.2832	a2 14		ldx #$14		ldx	#20
.2834	20 05 15	jsr $1505		jsr	deviceHandler
.2837	4c 28 28	jmp $2828			jmp 	_CSBanner
.283a					_CSInk:
.283a	a2 06		ldx #$06		ldx	#6
.283c	20 05 15	jsr $1505		jsr	deviceHandler
.283f	4c 28 28	jmp $2828			jmp 	_CSBanner
.2842					_CSStart:
.2842	a2 16		ldx #$16		ldx	#22
.2844	20 65 40	jsr $4065		jsr	mainHandler
.2847	a2 06		ldx #$06		ldx	#6
.2849	20 65 40	jsr $4065		jsr	mainHandler
.284c	4c 67 29	jmp $2967			jmp 	WarmStartEntry
>284f	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2857	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>2867	20 2a 2a 2a 0d 0d
>286d	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>2875	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>2885	32 30 32 31 0d 0d
>288b	02 42 61 73 69 63 20				.text 	2,"Basic "
>2892	30 2e 33 32					.text "0.32"
>2896	20 28						.text 	" ("
>2898	32 37 2d 41 70 72 2d 32				.text "27-Apr-2021"
>28a0	30 32 31
>28a3	29 0d 0d 00					.text 	")",13,13,0
.28a7					ForceStandardMode:
.28a7	a9 fe		lda #$fe			lda 	#$FE
.28a9	20 8a 18	jsr $188a		jsr	extensionHandler
.28ac	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.28ad					DeleteLine:
.28ad	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.28b0	85 2a		sta $2a				sta 	temp0
.28b2	ad c9 0a	lda $0ac9			lda 	basePage+1
.28b5	85 2b		sta $2b				sta 	temp0+1
.28b7	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.28b9	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.28bb	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.28bd	d0 07		bne $28c6			bne 	_DLNext
.28bf	c8		iny				iny
.28c0	a5 a0		lda $a0				lda 	esInt1
.28c2	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.28c4	f0 06		beq $28cc			beq 	_DLFound
.28c6	20 ea 28	jsr $28ea	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.28c9	d0 ec		bne $28b7			bne 	_DLLoop
.28cb	60		rts				rts
.28cc					_DLFound:
.28cc	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.28ce	b1 2a		lda ($2a),y			lda 	(temp0),y
.28d0	a8		tay				tay 								; so we copy from (temp0),y
.28d1	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.28d3					_DLCopyDown:
.28d3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.28d5	81 2a		sta ($2a,x)			sta 	(temp0,x)
.28d7	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.28d9	d0 02		bne $28dd			bne 	_DLNoCarry
.28db	e6 2b		inc $2b				inc 	temp0+1
.28dd					_DLNoCarry:
.28dd	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.28df	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.28e1	d0 f0		bne $28d3			bne 	_DLCopyDown
.28e3	a5 2b		lda $2b				lda 	temp0+1
.28e5	c5 36		cmp $36				cmp 	lowMemory+1
.28e7	d0 ea		bne $28d3			bne 	_DLCopyDown
.28e9	60		rts				rts
.28ea					IAdvanceTemp0:
.28ea	84 32		sty $32				sty 	tempShort
.28ec	18		clc				clc
.28ed	a0 00		ldy #$00			ldy 	#0 							; get offset
.28ef	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.28f1	65 2a		adc $2a				adc 	temp0
.28f3	85 2a		sta $2a				sta 	temp0
.28f5	90 02		bcc $28f9			bcc 	_IATNoCarry
.28f7	e6 2b		inc $2b				inc 	temp0+1
.28f9					_IATNoCarry:
.28f9	b1 2a		lda ($2a),y			lda 	(temp0),y
.28fb	a4 32		ldy $32				ldy 	tempShort
.28fd	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.28ff	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.2900					InsertLine:
.2900	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.2903	85 2a		sta $2a				sta 	temp0
.2905	ad c9 0a	lda $0ac9			lda 	basePage+1
.2908	85 2b		sta $2b				sta 	temp0+1
.290a					_ILLoop:
.290a	a0 01		ldy #$01			ldy 	#1
.290c	b1 2a		lda ($2a),y			lda 	(temp0),y
.290e	c5 98		cmp $98				cmp 	esInt0
.2910	c8		iny				iny
.2911	b1 2a		lda ($2a),y			lda 	(temp0),y
.2913	e5 a0		sbc $a0				sbc 	esInt1
.2915	b0 05		bcs $291c			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2917	20 ea 28	jsr $28ea			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.291a	d0 ee		bne $290a			bne 	_ILLoop
.291c					_ILFound:
.291c	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.291e	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.2920	a5 36		lda $36				lda 	lowMemory+1
.2922	85 2d		sta $2d				sta 	temp1+1
.2924	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2927	18		clc				clc 								; add 3 for the line number and offset.
.2928	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.292a	a8		tay				tay
.292b	a2 00		ldx #$00			ldx 	#0
.292d	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.292f	91 2c		sta ($2c),y			sta 	(temp1),y
.2931	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.2933	c5 2a		cmp $2a				cmp 	temp0
.2935	d0 06		bne $293d			bne 	_ILMNext
.2937	a5 2d		lda $2d				lda 	temp1+1
.2939	c5 2b		cmp $2b				cmp 	temp0+1
.293b	f0 0b		beq $2948			beq 	_ILMCopy
.293d					_ILMNext:
.293d	a5 2c		lda $2c				lda 	temp1
.293f	d0 02		bne $2943			bne 	_ILNoBorrow
.2941	c6 2d		dec $2d				dec 	temp1+1
.2943					_ILNoBorrow:
.2943	c6 2c		dec $2c				dec 	temp1
.2945	4c 2d 29	jmp $292d			jmp 	_ILMove 					; and go round again
.2948					_ILMCopy:
.2948	98		tya				tya 								; Y is the offset of the new line.
.2949	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.294b	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.294d	a5 98		lda $98				lda 	esInt0
.294f	91 2a		sta ($2a),y			sta 	(temp0),y
.2951	c8		iny				iny
.2952	a5 a0		lda $a0				lda 	esInt1
.2954	91 2a		sta ($2a),y			sta 	(temp0),y
.2956	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2958					_ILMCopy2:
.2958	b1 28		lda ($28),y			lda 	(codePtr),y
.295a	c8		iny				iny
.295b	c8		iny				iny
.295c	c8		iny				iny
.295d	91 2a		sta ($2a),y			sta 	(temp0),y
.295f	88		dey				dey
.2960	88		dey				dey
.2961	cc da 0e	cpy $0eda			cpy 	tokenBufferIndex
.2964	d0 f2		bne $2958			bne 	_ILMCopy2
.2966	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.2967					WarmStartEntry:
.2967	a2 ff		ldx #$ff			ldx 	#$FF
.2969	9a		txs				txs
.296a	20 a7 28	jsr $28a7			jsr 	ForceStandardMode
.296d	a9 02		lda #$02			lda 	#2							; green text.
.296f	a2 06		ldx #$06		ldx	#6
.2971	20 05 15	jsr $1505		jsr	deviceHandler
.2974	a2 0a		ldx #$0a		ldx	#10
.2976	20 05 15	jsr $1505		jsr	deviceHandler
.2979	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.297b	85 28		sta $28				sta 	codePtr
.297d	a5 2b		lda $2b				lda 	temp0+1
.297f	85 29		sta $29				sta 	codePtr+1
.2981	a2 04		ldx #$04		ldx	#4
.2983	20 05 15	jsr $1505		jsr	deviceHandler
.2986	a2 08		ldx #$08		ldx	#8
.2988	20 9d 4b	jsr $4b9d		jsr	tokeniserHandler
.298b	c9 00		cmp #$00			cmp 	#0
.298d	f0 25		beq $29b4			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.298f	a9 d7		lda #$d7			lda 	#(tokenHeader) & $FF
.2991	85 28		sta $28				sta 	codePtr
.2993	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.2995	85 29		sta $29				sta 	1+(codePtr)
.2997	ad da 0d	lda $0dda			lda 	tokenBuffer 				; is it a blank line, go get another line.
.299a	c9 80		cmp #$80			cmp 	#$80
.299c	f0 c9		beq $2967			beq 	WarmStartEntry
.299e	29 c0		and #$c0			and 	#$C0						; does it start with a number
.29a0	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.29a2	f0 15		beq $29b9			beq 	HasLineNumber
.29a4	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.29a6	8d d7 0d	sta $0dd7			sta 	tokenHeader 				; fake program line.
.29a9	8d d8 0d	sta $0dd8			sta 	tokenHeader+1
.29ac	8d d9 0d	sta $0dd9			sta 	tokenHeader+2
.29af	a2 18		ldx #$18		ldx	#24
.29b1	20 65 40	jsr $4065		jsr	mainHandler
.29b4					WSEError:
.29b4	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.29b6	20 27 15	jsr $1527		jsr	errorHandler
.29b9					HasLineNumber:
.29b9	a0 03		ldy #$03			ldy 	#3 							; get line number
.29bb	a9 00		lda #$00			lda 	#0
.29bd	a2 0a		ldx #$0a		ldx	#10
.29bf	20 65 40	jsr $4065		jsr	mainHandler
.29c2	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.29c4	05 b0		ora $b0				ora 	esInt3
.29c6	d0 ec		bne $29b4			bne 	WSEError
.29c8	98		tya				tya 								; make codePtr point to code after the line number.
.29c9	18		clc				clc 								; by skipping over the tokenised number.
.29ca	65 28		adc $28				adc 	codePtr
.29cc	85 28		sta $28				sta 	codePtr
.29ce	90 02		bcc $29d2			bcc		_HLNNoCarry
.29d0	e6 29		inc $29				inc 	codePtr+1
.29d2					_HLNNoCarry:
.29d2	98		tya				tya 								; subtract that offset from the code buffer index
.29d3	38		sec				sec
.29d4	49 ff		eor #$ff			eor 	#$FF
.29d6	6d da 0e	adc $0eda			adc 	tokenBufferIndex
.29d9	18		clc				clc 								; add space allowing for header & $80 trailer
.29da	69 04		adc #$04			adc 	#4
.29dc	8d da 0e	sta $0eda			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.29df	20 ad 28	jsr $28ad			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.29e2					_HLNNoDelete:
.29e2	ad da 0e	lda $0eda			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.29e5	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.29e7	f0 0c		beq $29f5			beq 	_HLMEditDone
.29e9	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.29eb	18		clc				clc 								; workspace (1k)
.29ec	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.29ee	c5 34		cmp $34				cmp 	highMemory+1
.29f0	b0 0b		bcs $29fd			bcs 	_HLMMemory 					; nope, won't allowit.
.29f2	20 00 29	jsr $2900			jsr 	InsertLine 					; insert the line in
.29f5					_HLMEditDone:
.29f5	a2 06		ldx #$06		ldx	#6
.29f7	20 65 40	jsr $4065		jsr	mainHandler
.29fa	4c 67 29	jmp $2967			jmp 	WarmStartEntry
.29fd					_HLMMemory:
.29fd	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.29ff	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.2a02					interactionHandler:
.2a02	7c 05 2a	jmp ($2a05,x)			jmp 	(interactionVectors,x)
.2a05					interactionVectors:
>2a05	0b 2a					.word _DummyControlHandler ; index 0
>2a07	1b 28					.word ColdStartEntry       ; index 2
>2a09	67 29					.word WarmStartEntry       ; index 4
.2a0b					_DummyControlHandler:
.2a0b	60		rts			rts

;******  Return to file: basic.asm

.2a0c					section_end_interaction:
.2a0c					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0d9d					dataPtr:
>0d9d							.fill 	2
.0d9f					dataIndex:
>0d9f							.fill 	1
.2a0c					CommandRead:
.2a0c	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2a0e	20 31 39	jsr $3931			jsr 	EvaluateReference
.2a11	20 52 2a	jsr $2a52			jsr 	SwapDPCP 					; use the data pointer.
.2a14	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2a16	c8		iny				iny
.2a17	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2a19	f0 07		beq $2a22			beq 	_CRInData
.2a1b	88		dey				dey
.2a1c	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2a1e	aa		tax				tax
.2a1f	20 2f 31	jsr $312f			jsr 	ScanForward
.2a22					_CRInData:
.2a22	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2a24	20 d9 38	jsr $38d9			jsr 	Evaluate
.2a27	ca		dex				dex 								; and write the value.
.2a28	20 9a 2c	jsr $2c9a			jsr 	WriteValue
.2a2b	20 52 2a	jsr $2a52			jsr 	SwapDPCP 					; get the code pointer back.
.2a2e	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2a30	c8		iny				iny
.2a31	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.2a33	f0 d7		beq $2a0c			beq 	CommandRead
.2a35	88		dey				dey
.2a36	60		rts				rts
.2a37					CommandData:
.2a37	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2a39	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2a3b	20 2f 31	jsr $312f			jsr 	ScanForward
.2a3e	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2a3f	60		rts				rts
.2a40					CommandRestore:
.2a40	ad c8 0a	lda $0ac8			lda 	basePage
.2a43	8d 9d 0d	sta $0d9d			sta 	dataPtr
.2a46	ad c9 0a	lda $0ac9			lda 	basePage+1
.2a49	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.2a4c	a9 03		lda #$03			lda 	#3
.2a4e	8d 9f 0d	sta $0d9f			sta 	dataIndex
.2a51	60		rts				rts
.2a52					SwapDPCP:
.2a52	da		phx				phx
.2a53	98		tya				tya 								; swap Y, DataIndex
.2a54	ac 9f 0d	ldy $0d9f			ldy 	DataIndex
.2a57	8d 9f 0d	sta $0d9f			sta 	DataIndex
.2a5a	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2a5c	ae 9d 0d	ldx $0d9d			ldx 	dataptr
.2a5f	8d 9d 0d	sta $0d9d			sta 	dataPtr
.2a62	86 28		stx $28				stx 	codePtr
.2a64	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.2a66	ae 9e 0d	ldx $0d9e			ldx 	dataptr+1
.2a69	8d 9e 0d	sta $0d9e			sta 	dataPtr+1
.2a6c	86 29		stx $29				stx 	codePtr+1
.2a6e	fa		plx				plx
.2a6f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.2a70					CommandGOSUB:
.2a70	20 f6 38	jsr $38f6			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2a73	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2a75	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2a77	20 12 40	jsr $4012			jsr 	RSClaim
.2a7a	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2a7c	20 3e 40	jsr $403e			jsr 	RSSavePosition
.2a7f	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.2a81	f0 1b		beq $2a9e			beq 	GotoTOS 					; and do a GOTO there.
.2a83					CommandRETURN:
.2a83	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a85	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a87	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2a89	f0 05		beq $2a90			beq 	_isok
.2a8b	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2a8d	20 27 15	jsr $1527		jsr	errorHandler
.2a90					_isok:
.2a90	a9 01		lda #$01			lda 	#1
.2a92	20 51 40	jsr $4051			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2a95	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2a97	20 34 40	jsr $4034			jsr 	RSFree
.2a9a	60		rts				rts
.2a9b					CommandGOTO:
.2a9b	20 f6 38	jsr $38f6			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2a9e					GotoTOS:
.2a9e	20 18 34	jsr $3418			jsr 	ResetCodeAddress 			; simple search.
.2aa1					_GotoSearch:
.2aa1	a0 00		ldy #$00			ldy 	#0 							; get offset
.2aa3	b1 28		lda ($28),y			lda 	(codePtr),y
.2aa5	f0 21		beq $2ac8			beq 	_GotoError 					; not found.
.2aa7	c8		iny				iny									; check LSB match
.2aa8	b1 28		lda ($28),y			lda 	(codePtr),y
.2aaa	d5 98		cmp $98,x			cmp 	esInt0,x
.2aac	d0 07		bne $2ab5			bne 	_GotoNext
.2aae	c8		iny				iny
.2aaf	b1 28		lda ($28),y			lda 	(codePtr),y
.2ab1	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2ab3	f0 10		beq $2ac5			beq 	_GotoFound
.2ab5					_GotoNext:
.2ab5	a0 00		ldy #$00			ldy 	#0 							; go next line
.2ab7	b1 28		lda ($28),y			lda 	(codePtr),y
.2ab9	18		clc				clc
.2aba	65 28		adc $28				adc 	codePtr
.2abc	85 28		sta $28				sta 	codePtr
.2abe	90 e1		bcc $2aa1			bcc 	_GotoSearch
.2ac0	e6 29		inc $29				inc 	codePtr+1
.2ac2	4c a1 2a	jmp $2aa1			jmp 	_GotoSearch
.2ac5					_GotoFound:
.2ac5	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2ac7	60		rts				rts
.2ac8					_GotoError:
.2ac8	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2aca	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0da0					InputBuffer:
>0da0							.fill 	MaxInputSize+1
.2acd					Command_Input:
.2acd	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.2acf	c8		iny				iny
.2ad0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2ad2	f0 f9		beq $2acd			beq 	Command_Input
.2ad4	88		dey				dey 							; undo consume
.2ad5	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2ad7	f0 52		beq $2b2b			beq 	_CIExit 				; : or EOL, exit
.2ad9	c9 80		cmp #$80			cmp 	#TOK_EOL
.2adb	f0 4e		beq $2b2b			beq 	_CIExit
.2add	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.2adf	90 12		bcc $2af3			bcc 	_CIVariable
.2ae1	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2ae3	d0 41		bne $2b26			bne 	_CISyntax
.2ae5	a2 00		ldx #$00			ldx 	#0
.2ae7	20 ed 38	jsr $38ed			jsr 	EvaluateString 			; evaluate and print string
.2aea	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0
.2aed	20 fa 2b	jsr $2bfa			jsr 	PrintString
.2af0	4c cd 2a	jmp $2acd			jmp 	Command_Input
.2af3					_CIVariable:
.2af3	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2af5	20 31 39	jsr $3931			jsr 	EvaluateReference  		; this is where its going
.2af8					_CIRetry:
.2af8	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2afa	a2 12		ldx #$12		ldx	#18
.2afc	20 05 15	jsr $1505		jsr	deviceHandler
.2aff	5a		phy				phy
.2b00	20 3f 2b	jsr $2b3f			jsr 	InputString 			; input a string (manually)
.2b03	a2 01		ldx #$01			ldx 	#1
.2b05	20 2c 2b	jsr $2b2c			jsr 	BufferToStackX 			; make stack,x ref input string.
.2b08	a5 90		lda $90				lda 	esType 					; if target type numeric
.2b0a	29 40		and #$40			and 	#$40 					; then convert to number
.2b0c	d0 10		bne $2b1e			bne 	_CIWrite
.2b0e	a2 01		ldx #$01			ldx 	#1
.2b10	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2b13	a9 0a		lda #$0a			lda 	#10
.2b15	20 ec 3d	jsr $3dec			jsr 	MInt32FromString 		; convert it back from a string.
.2b18	7a		ply				ply
.2b19	b0 03		bcs $2b1e			bcs 	_CIWrite 				; successfully converted.
.2b1b	18		clc				clc 							; default fail FP conversion
.2b1c	90 da		bcc $2af8			bcc		_CIRetry				; failed, try again.
.2b1e					_CIWrite:
.2b1e	a2 00		ldx #$00			ldx 	#0
.2b20	20 9a 2c	jsr $2c9a			jsr 	WriteValue
.2b23	4c cd 2a	jmp $2acd			jmp 	Command_Input
.2b26					_CISyntax:
.2b26	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2b28	20 27 15	jsr $1527		jsr	errorHandler
.2b2b					_CIExit:
.2b2b	60		rts				rts
.2b2c					BufferToStackX:
.2b2c	a9 a0		lda #$a0			lda 	#InputBuffer & $FF
.2b2e	95 98		sta $98,x			sta 	esInt0,x
.2b30	a9 0d		lda #$0d			lda 	#InputBuffer >> 8
.2b32	95 a0		sta $a0,x			sta 	esInt1,x
.2b34	a9 00		lda #$00			lda 	#0
.2b36	95 a8		sta $a8,x			sta 	esInt2,x
.2b38	95 b0		sta $b0,x			sta 	esInt3,x
.2b3a	a9 40		lda #$40			lda 	#$40
.2b3c	95 90		sta $90,x			sta 	esType,x
.2b3e	60		rts				rts
.2b3f					InputString:
.2b3f	a9 00		lda #$00			lda 	#0
.2b41	8d a0 0d	sta $0da0			sta 	InputBuffer
.2b44					_InputLoop:
.2b44	a2 18		ldx #$18		ldx	#24
.2b46	20 05 15	jsr $1505		jsr	deviceHandler
.2b49	a2 08		ldx #$08		ldx	#8
.2b4b	20 05 15	jsr $1505		jsr	deviceHandler
.2b4e	c9 00		cmp #$00			cmp 	#0
.2b50	f0 f2		beq $2b44			beq 	_InputLoop
.2b52	c9 08		cmp #$08			cmp 	#8
.2b54	f0 19		beq $2b6f			beq 	_InputBackspace
.2b56	c9 0d		cmp #$0d			cmp 	#13
.2b58	f0 21		beq $2b7b			beq 	_InputExit
.2b5a	ae a0 0d	ldx $0da0			ldx 	InputBuffer
.2b5d	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.2b5f	f0 e3		beq $2b44			beq 	_InputLoop
.2b61	9d a1 0d	sta $0da1,x			sta 	InputBuffer+1,x 		; write char
.2b64	ee a0 0d	inc $0da0			inc 	InputBuffer 			; advance count.
.2b67					_InputPrintLoop:
.2b67	a2 12		ldx #$12		ldx	#18
.2b69	20 05 15	jsr $1505		jsr	deviceHandler
.2b6c	4c 44 2b	jmp $2b44			jmp	 	_InputLoop
.2b6f					_InputBackspace:
.2b6f	ad a0 0d	lda $0da0			lda 	InputBuffer 			; at start
.2b72	f0 d0		beq $2b44			beq 	_InputLoop
.2b74	ce a0 0d	dec $0da0			dec 	InputBuffer
.2b77	a9 08		lda #$08			lda 	#8
.2b79	d0 ec		bne $2b67			bne 	_InputPrintLoop
.2b7b					_InputExit:
.2b7b	a2 04		ldx #$04		ldx	#4
.2b7d	20 05 15	jsr $1505		jsr	deviceHandler
.2b80	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0dc1					lastPrintToken:
>0dc1							.fill 	1
.2b81					Command_Print:
.2b81	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.2b83	8d c1 0d	sta $0dc1			sta 	lastPrintToken
.2b86	88		dey				dey
.2b87					_PrintLoopSkip:
.2b87	c8		iny				iny
.2b88					_PrintLoop:
.2b88	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2b8a	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2b8c	f0 5b		beq $2be9			beq 	_PrintExit
.2b8e	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2b90	f0 57		beq $2be9			beq 	_PrintExit
.2b92	8d c1 0d	sta $0dc1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2b95	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2b97	f0 ee		beq $2b87			beq 	_PrintLoopSkip
.2b99	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2b9b	f0 3c		beq $2bd9			beq	 	_PrintNewLine
.2b9d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2b9f	f0 40		beq $2be1			beq 	_PrintTab
.2ba1	20 d7 38	jsr $38d7			jsr 	EvaluateRoot 				; evaluate something at the root
.2ba4	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2ba6	85 2a		sta $2a				sta 	temp0
.2ba8	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2baa	85 2b		sta $2b				sta 	1+(temp0)
.2bac	a5 90		lda $90				lda 	esType 						; get type
.2bae	f0 15		beq $2bc5			beq		_PrintInteger
.2bb0	4a		lsr a				lsr 	a 							; check for floating point
.2bb1	b0 08		bcs $2bbb			bcs 	_PrintFloat
.2bb3					_PrintString:
.2bb3	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2bb5	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0
.2bb8	4c d3 2b	jmp $2bd3			jmp 	_PrintTemp0 				; print no leading space.
.2bbb					_PrintFloat:
.2bbb	a9 00		lda #$00			lda 	#0 							; stack level.
.2bbd	a2 16		ldx #$16		ldx	#22
.2bbf	20 16 28	jsr $2816		jsr	floatingpointHandler
.2bc2	4c cc 2b	jmp $2bcc			jmp 	_PrintSpaceTemp0
.2bc5					_PrintInteger:
.2bc5	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2bc7	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2bc9	20 d1 3e	jsr $3ed1			jsr 	MInt32ToString				; convert to text
.2bcc					_PrintSpaceTemp0:
.2bcc	a9 20		lda #$20			lda 	#32
.2bce	a2 12		ldx #$12		ldx	#18
.2bd0	20 05 15	jsr $1505		jsr	deviceHandler
.2bd3					_PrintTemp0:
.2bd3	20 fa 2b	jsr $2bfa			jsr 	PrintString
.2bd6	4c 88 2b	jmp $2b88			jmp 	_PrintLoop
.2bd9					_PrintNewLine:
.2bd9	a2 04		ldx #$04		ldx	#4
.2bdb	20 05 15	jsr $1505		jsr	deviceHandler
.2bde	4c 87 2b	jmp $2b87			jmp 	_PrintLoopSkip
.2be1					_PrintTab:
.2be1	a2 1a		ldx #$1a		ldx	#26
.2be3	20 05 15	jsr $1505		jsr	deviceHandler
.2be6	4c 87 2b	jmp $2b87			jmp 	_PrintLoopSkip
.2be9					_PrintExit:
.2be9	ad c1 0d	lda $0dc1			lda		lastPrintToken 				; check last token
.2bec	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2bee	f0 09		beq $2bf9			beq 	_PrintExit2
.2bf0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2bf2	f0 05		beq $2bf9			beq 	_PrintExit2
.2bf4	a2 04		ldx #$04		ldx	#4
.2bf6	20 05 15	jsr $1505		jsr	deviceHandler
.2bf9					_PrintExit2:
.2bf9	60		rts				rts
.2bfa					PrintString:
.2bfa	da		phx				phx
.2bfb	5a		phy				phy
.2bfc	a0 00		ldy #$00			ldy 	#0							; get length
.2bfe	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c00	aa		tax				tax 								; into X
.2c01	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2c03	f0 0e		beq $2c13			beq 	_PSExit
.2c05	ca		dex				dex
.2c06	da		phx				phx
.2c07	c8		iny				iny
.2c08	b1 2a		lda ($2a),y			lda 	(temp0),y
.2c0a	a2 12		ldx #$12		ldx	#18
.2c0c	20 05 15	jsr $1505		jsr	deviceHandler
.2c0f	fa		plx				plx
.2c10	4c 01 2c	jmp $2c01			jmp 	_PSLoop
.2c13					_PSExit:
.2c13	7a		ply				ply
.2c14	fa		plx				plx
.2c15	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.2c16					Command_CLS:
.2c16	a2 02		ldx #$02		ldx	#2
.2c18	20 05 15	jsr $1505		jsr	deviceHandler
.2c1b	60		rts				rts
.2c1c					Command_Ink:
.2c1c	a2 00		ldx #$00			ldx 	#0
.2c1e	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger
.2c21	a2 06		ldx #$06		ldx	#6
.2c23	20 05 15	jsr $1505		jsr	deviceHandler
.2c26	60		rts				rts
.2c27					Command_Paper:
.2c27	a2 00		ldx #$00			ldx 	#0
.2c29	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger
.2c2c	a2 10		ldx #$10		ldx	#16
.2c2e	20 05 15	jsr $1505		jsr	deviceHandler
.2c31	60		rts				rts
.2c32					Command_Locate:
.2c32	a2 00		ldx #$00			ldx 	#0
.2c34	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger
.2c37	20 f7 3f	jsr $3ff7			jsr 	CheckComma
.2c3a	e8		inx				inx
.2c3b	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger
.2c3e	5a		phy				phy
.2c3f	a4 99		ldy $99				ldy 	esInt0+1
.2c41	a5 98		lda $98				lda 	esInt0
.2c43	a2 0e		ldx #$0e		ldx	#14
.2c45	20 05 15	jsr $1505		jsr	deviceHandler
.2c48	7a		ply				ply
.2c49	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2c4a					Command_VDU:
.2c4a	20 f6 38	jsr $38f6			jsr 	EvaluateRootInteger 			; get integer at root.
.2c4d	a5 98		lda $98				lda 	esInt0
.2c4f	a2 12		ldx #$12		ldx	#18
.2c51	20 05 15	jsr $1505		jsr	deviceHandler
.2c54					_CVNext:
.2c54	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2c56	c8		iny				iny
.2c57	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2c59	f0 ef		beq $2c4a			beq 	Command_VDU
.2c5b	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.2c5d	d0 0a		bne $2c69			bne 	_CVExit
.2c5f	a5 a0		lda $a0				lda 	esInt1
.2c61	a2 12		ldx #$12		ldx	#18
.2c63	20 05 15	jsr $1505		jsr	deviceHandler
.2c66	4c 54 2c	jmp $2c54			jmp 	_CVNext
.2c69	88		dey		_CVExit:dey
.2c6a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.2c6b					Command_Assert:
.2c6b	20 f6 38	jsr $38f6			jsr 	EvaluateRootInteger 		; what is being asserted.
.2c6e	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero 					; is it true ?
.2c71	f0 01		beq $2c74			beq 	_CAError
.2c73	60		rts				rts
.2c74					_CAError:
.2c74	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2c76	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.2c79					Command_Dim:
.2c79	a2 04		ldx #$04		ldx	#4
.2c7b	20 5c 4f	jsr $4f5c		jsr	variableHandler
.2c7e	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2c80	c8		iny				iny
.2c81	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2c83	f0 f4		beq $2c79			beq 	Command_Dim
.2c85	88		dey				dey 								; unpick get
.2c86	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2c87					CommandLet:
.2c87	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2c89	20 31 39	jsr $3931			jsr 	EvaluateReference
.2c8c	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2c8e	20 df 3f	jsr $3fdf			jsr 	CheckToken
.2c91	e8		inx				inx 								; do RHS
.2c92	20 d9 38	jsr $38d9			jsr 	Evaluate 					; evaluate and dereference
.2c95	ca		dex				dex
.2c96	20 9a 2c	jsr $2c9a			jsr 	WriteValue 					; write it out
.2c99	60		rts				rts
.2c9a					WriteValue:
.2c9a	5a		phy				phy
.2c9b	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2c9e	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.2ca0	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.2ca2	29 40		and #$40			and 	#$40
.2ca4	d0 4f		bne $2cf5			bne		_WVType
.2ca6	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2ca8	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2caa	29 40		and #$40			and 	#$40
.2cac	d0 1f		bne $2ccd			bne 	_WVCopyString
.2cae	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2cb0	15 91		ora $91,x			ora 	esType+1,x
.2cb2	4a		lsr a				lsr 	a
.2cb3	90 22		bcc $2cd7			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2cb5	b5 90		lda $90,x			lda 	esType,x
.2cb7	4a		lsr a				lsr 	a
.2cb8	90 3b		bcc $2cf5			bcc 	_WVType
.2cba	e8		inx				inx 								; force the value being written to be a float.
.2cbb	20 3d 35	jsr $353d			jsr 	BPMakeFloat
.2cbe	ca		dex				dex
.2cbf	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 					; set Temp0 to write address
.2cc2	e8		inx				inx
.2cc3	8a		txa				txa
.2cc4	a2 22		ldx #$22		ldx	#34
.2cc6	20 16 28	jsr $2816		jsr	floatingpointHandler
.2cc9	aa		tax				tax
.2cca	4c f3 2c	jmp $2cf3			jmp 	_WVCopyExit
.2ccd					_WVCopyString:
.2ccd	8a		txa				txa
.2cce	a2 10		ldx #$10		ldx	#16
.2cd0	20 10 43	jsr $4310		jsr	stringHandler
.2cd3	aa		tax				tax
.2cd4	4c f3 2c	jmp $2cf3			jmp 	_WVCopyExit
.2cd7					_WVCopyData4:
.2cd7	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2cd9	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2cdb	d0 10		bne $2ced			bne 	_WVCopyData1
.2cdd	a0 03		ldy #$03			ldy 	#3
.2cdf	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2ce1	91 2a		sta ($2a),y			sta 	(temp0),y
.2ce3	88		dey				dey
.2ce4	b5 a9		lda $a9,x			lda 	esInt2+1,x
.2ce6	91 2a		sta ($2a),y			sta 	(temp0),y
.2ce8	88		dey				dey
.2ce9	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2ceb	91 2a		sta ($2a),y			sta 	(temp0),y
.2ced					_WVCopyData1:
.2ced	a0 00		ldy #$00			ldy 	#0
.2cef	b5 99		lda $99,x			lda 	esInt0+1,x
.2cf1	91 2a		sta ($2a),y			sta 	(temp0),y
.2cf3					_WVCopyExit:
.2cf3	7a		ply				ply
.2cf4	60		rts				rts
.2cf5					_WVType:
.2cf5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2cf7	20 27 15	jsr $1527		jsr	errorHandler
.2cfa					TOSToTemp0:
.2cfa	b5 98		lda $98,x			lda 	esInt0,x
.2cfc	85 2a		sta $2a				sta 	temp0
.2cfe	b5 a0		lda $a0,x			lda 	esInt1,x
.2d00	85 2b		sta $2b				sta 	temp0+1
.2d02	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2d03					Command_Poke:
.2d03	a9 01		lda #$01			lda 	#1
.2d05	d0 06		bne $2d0d			bne 	PokeGeneral
.2d07					Command_Doke:
.2d07	a9 02		lda #$02			lda 	#2
.2d09	d0 02		bne $2d0d			bne 	PokeGeneral
.2d0b					Command_Loke:
.2d0b	a9 03		lda #$03			lda 	#3
.2d0d					PokeGeneral:
.2d0d	48		pha				pha 								; save id (PDL = 123)
.2d0e	20 f6 38	jsr $38f6			jsr 	EvaluateRootInteger 		; target address
.2d11	20 f7 3f	jsr $3ff7			jsr	 	CheckComma
.2d14	e8		inx				inx
.2d15	20 f8 38	jsr $38f8			jsr 	EvaluateInteger 			; what value to POKE ?
.2d18	ca		dex				dex
.2d19	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 					; temp0 points to the target address
.2d1c	84 32		sty $32				sty 	tempShort 					; save Y
.2d1e	68		pla				pla 								; get copy type (1-3) and dispatch
.2d1f	aa		tax				tax
.2d20	ca		dex				dex
.2d21	f0 14		beq $2d37			beq 	_Poke1
.2d23	ca		dex				dex
.2d24	f0 0b		beq $2d31			beq 	_Poke2
.2d26	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2d28	a5 b1		lda $b1				lda 	esInt3+1
.2d2a	91 2a		sta ($2a),y			sta 	(temp0),y
.2d2c	88		dey				dey
.2d2d	a5 a9		lda $a9				lda 	esInt2+1
.2d2f	91 2a		sta ($2a),y			sta 	(temp0),y
.2d31					_Poke2:
.2d31	a0 01		ldy #$01			ldy 	#1
.2d33	a5 a1		lda $a1				lda 	esInt1+1
.2d35	91 2a		sta ($2a),y			sta 	(temp0),y
.2d37					_Poke1:
.2d37	a0 00		ldy #$00			ldy 	#0
.2d39	a5 99		lda $99				lda 	esInt0+1
.2d3b	91 2a		sta ($2a),y			sta 	(temp0),y
.2d3d	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2d3f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2d40					Command_Rem:
.2d40					Command_Rem2:
.2d40	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2d42	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.2d44	d0 06		bne $2d4c			bne 	_CRNotString
.2d46	c8		iny				iny
.2d47	98		tya				tya
.2d48	38		sec				sec
.2d49	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2d4b	a8		tay				tay
.2d4c					_CRNotString:
.2d4c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2d4d					CommandStop:
.2d4d	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2d4f	20 27 15	jsr $1527		jsr	errorHandler
.2d52					CommandEnd:
.2d52	4c 60 40	jmp $4060			jmp 	WarmStart
.2d55					CommandXemu:
.2d55	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2d58					AdvanceNextLine:
.2d58	a0 00		ldy #$00			ldy 	#0 							; get offset
.2d5a	b1 28		lda ($28),y			lda 	(codePtr),y
.2d5c	18		clc				clc 								; add to codePtr
.2d5d	65 28		adc $28				adc 	codePtr
.2d5f	85 28		sta $28				sta 	codePtr
.2d61	90 02		bcc $2d65			bcc 	_ANLNoCarry
.2d63	e6 29		inc $29				inc 	codePtr+1
.2d65					_ANLNoCarry:
.2d65	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2d67	f0 e9		beq $2d52			beq 	CommandEnd 					; execute END
.2d69	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2d6b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2d6c					Command_FOR:
.2d6c	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2d6e	a2 0b		ldx #$0b			ldx 	#11
.2d70	20 12 40	jsr $4012			jsr 	RSClaim
.2d73	20 87 2c	jsr $2c87			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2d76	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.2d78	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.2d7a	d0 48		bne $2dc4			bne 	_CFType
.2d7c	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2d7e	20 df 3f	jsr $3fdf			jsr 	CheckToken
.2d81	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2d83	20 f8 38	jsr $38f8			jsr 	EvaluateInteger				; get terminal value in stack 1
.2d86	5a		phy				phy
.2d87	a0 04		ldy #$04			ldy 	#4
.2d89	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2d8b	91 37		sta ($37),y			sta 	(rsPointer),y
.2d8d	c8		iny				iny
.2d8e	a5 a0		lda $a0				lda		esInt1
.2d90	91 37		sta ($37),y			sta 	(rsPointer),y
.2d92	c8		iny				iny
.2d93	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2d95	91 37		sta ($37),y			sta 	(rsPointer),y
.2d97	c8		iny				iny
.2d98	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.2d9a	91 37		sta ($37),y			sta 	(rsPointer),y
.2d9c	c8		iny				iny
.2d9d	a5 a1		lda $a1				lda		esInt1+1
.2d9f	91 37		sta ($37),y			sta 	(rsPointer),y
.2da1	c8		iny				iny
.2da2	a5 a9		lda $a9				lda		esInt2+1
.2da4	91 37		sta ($37),y			sta 	(rsPointer),y
.2da6	c8		iny				iny
.2da7	a5 b1		lda $b1				lda		esInt3+1
.2da9	91 37		sta ($37),y			sta 	(rsPointer),y
.2dab	7a		ply				ply
.2dac	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2dae	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2db0	d0 0c		bne $2dbe			bne 	_CFDone
.2db2	c8		iny				iny									; skip over step.
.2db3	20 f8 38	jsr $38f8			jsr 	EvaluateInteger 			; get step
.2db6	5a		phy				phy
.2db7	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2db9	a0 06		ldy #$06			ldy 	#6
.2dbb	91 37		sta ($37),y			sta 	(rsPointer),y
.2dbd	7a		ply				ply
.2dbe					_CFDone:
.2dbe	a9 01		lda #$01			lda 	#1
.2dc0	20 3e 40	jsr $403e			jsr 	RSSavePosition 				; save position.
.2dc3	60		rts				rts
.2dc4					_CFType:
.2dc4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2dc6	20 27 15	jsr $1527		jsr	errorHandler
.2dc9					Command_NEXT:
.2dc9	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2dcb	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2dcd	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2dcf	f0 05		beq $2dd6			beq 	_isok
.2dd1	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2dd3	20 27 15	jsr $1527		jsr	errorHandler
.2dd6					_isok:
.2dd6	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2dd8	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2dda	b0 16		bcs $2df2			bcs 	_CNNoIndex
.2ddc	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2dde	20 31 39	jsr $3931			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2de1	5a		phy				phy
.2de2	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2de4	b1 37		lda ($37),y			lda 	(rsPointer),y
.2de6	d5 98		cmp $98,x			cmp 	esInt0,x
.2de8	d0 72		bne $2e5c			bne 	_CNBadIndex
.2dea	c8		iny				iny
.2deb	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ded	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2def	d0 6b		bne $2e5c			bne 	_CNBadIndex
.2df1	7a		ply				ply
.2df2					_CNNoIndex:
.2df2	5a		phy				phy
.2df3	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2df5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2df7	85 2a		sta $2a				sta 	temp0
.2df9	c8		iny				iny
.2dfa	b1 37		lda ($37),y			lda 	(rsPointer),y
.2dfc	85 2b		sta $2b				sta 	temp0+1
.2dfe	c8		iny				iny
.2dff	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2e01	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2e03	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2e05	10 01		bpl $2e08			bpl 	_CNSignX
.2e07	ca		dex				dex  								; X = $FF
.2e08					_CNSignX:
.2e08	18		clc				clc 								; add to the LSB
.2e09	a0 00		ldy #$00			ldy 	#0
.2e0b	71 2a		adc ($2a),y			adc 	(temp0),y
.2e0d	91 2a		sta ($2a),y			sta 	(temp0),y
.2e0f					_CNPropogate:
.2e0f	c8		iny				iny  								; add the sign extended in X to the rest.
.2e10	8a		txa				txa
.2e11	71 2a		adc ($2a),y			adc 	(temp0),y
.2e13	91 2a		sta ($2a),y			sta 	(temp0),y
.2e15	c8		iny				iny
.2e16	8a		txa				txa
.2e17	71 2a		adc ($2a),y			adc 	(temp0),y
.2e19	91 2a		sta ($2a),y			sta 	(temp0),y
.2e1b	c8		iny				iny
.2e1c	8a		txa				txa
.2e1d	71 2a		adc ($2a),y			adc 	(temp0),y
.2e1f	91 2a		sta ($2a),y			sta 	(temp0),y
.2e21	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2e22	a5 37		lda $37				lda 	rsPointer
.2e24	69 07		adc #$07			adc 	#7
.2e26	85 2c		sta $2c				sta 	temp1
.2e28	a9 00		lda #$00			lda 	#0
.2e2a	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2e2c	a8		tay				tay 								; and clear the Y register again.
.2e2d	65 38		adc $38				adc 	rsPointer+1
.2e2f	85 2d		sta $2d				sta 	temp1+1
.2e31	38		sec				sec 								; calculate current - limit oring interim values.
.2e32	20 68 2e	jsr $2e68			jsr 	_CNCompare 					; each of these does a byte.
.2e35	20 68 2e	jsr $2e68			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2e38	20 68 2e	jsr $2e68			jsr 	_CNCompare 					; and the carry of the subtraction.
.2e3b	20 68 2e	jsr $2e68			jsr 	_CNCompare
.2e3e	50 02		bvc $2e42			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2e40	49 80		eor #$80			eor 	#$80
.2e42					_CNNoOverflow:
.2e42	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2e44	30 1b		bmi $2e61			bmi 	_CNCheckDownto
.2e46	c9 00		cmp #$00			cmp 	#0
.2e48	30 0b		bmi $2e55			bmi 	_CNLoopRound 				; loop round if < =
.2e4a	a5 2e		lda $2e				lda 	temp2
.2e4c	f0 07		beq $2e55			beq 	_CNLoopRound
.2e4e					_CNLoopExit:
.2e4e	7a		ply				ply
.2e4f	a9 0b		lda #$0b			lda 	#11
.2e51	20 34 40	jsr $4034			jsr 	RSFree
.2e54	60		rts				rts
.2e55					_CNLoopRound:
.2e55	7a		ply				ply
.2e56	a9 01		lda #$01			lda 	#1
.2e58	20 51 40	jsr $4051			jsr 	RSLoadPosition				; go back to the loop top
.2e5b	60		rts				rts
.2e5c					_CNBadIndex:
.2e5c	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2e5e	20 27 15	jsr $1527		jsr	errorHandler
.2e61					_CNCheckDownto:
.2e61	c9 00		cmp #$00			cmp 	#0
.2e63	10 f0		bpl $2e55			bpl 	_CNLoopRound
.2e65	4c 4e 2e	jmp $2e4e			jmp 	_CNLoopExit
.2e68					_CNCompare:
.2e68	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2e6a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2e6c	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.2e6e	85 2e		sta $2e				sta 	temp2
.2e70	c8		iny				iny
.2e71	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2e72					CommandIf:
.2e72	20 f6 38	jsr $38f6			jsr 	EvaluateRootInteger 		; get what's being tested.
.2e75	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2e77	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2e79	f0 04		beq $2e7f			beq 	_IfSimple
.2e7b	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2e7d	d0 1b		bne $2e9a			bne 	_IfComplex
.2e7f					_IfSimple:
.2e7f	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero					; check if TOS zero
.2e82	f0 10		beq $2e94			beq 	_IfEOL 						; go to next line.
.2e84	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2e86	c8		iny				iny
.2e87	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2e89	f0 0c		beq $2e97			beq 	_IfGoto 					; do the Goto code
.2e8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2e8d	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2e8f	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2e91	f0 04		beq $2e97			beq 	_IfGoto
.2e93	60		rts				rts 								; else continue on this line.
.2e94					_IfEOL:
.2e94	4c 58 2d	jmp $2d58			jmp 	AdvanceNextLine 			; go to next line
.2e97					_IfGoto:
.2e97	4c 9b 2a	jmp $2a9b			jmp 	CommandGoto
.2e9a					_IfComplex:
.2e9a	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero 					; is it true ?
.2e9d	f0 01		beq $2ea0			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2e9f	60		rts				rts 								; else continue.
.2ea0					_IFSkip:
.2ea0	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2ea2	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2ea4	4c 2f 31	jmp $312f			jmp		ScanForward
.2ea7					Command_ELSE:
.2ea7	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2ea9	8a		txa				txa
.2eaa	4c 2f 31	jmp $312f			jmp		ScanForward
.2ead					Command_ENDIF:
.2ead	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0dc2					storeSize:
>0dc2							.fill 	1
.2eae					CommandLocal:
.2eae	a2 00		ldx #$00			ldx 	#0
.2eb0	20 cc 2e	jsr $2ecc			jsr 	LocaliseVariable 			; localise one.
.2eb3					_CLCheckNext:
.2eb3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2eb5	c8		iny				iny
.2eb6	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2eb8	f0 06		beq $2ec0			beq 	_CLAssignment
.2eba	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2ebc	f0 f0		beq $2eae			beq 	CommandLocal
.2ebe	88		dey				dey
.2ebf	60		rts				rts
.2ec0					_CLAssignment:
.2ec0	a2 01		ldx #$01			ldx 	#1
.2ec2	20 d9 38	jsr $38d9			jsr 	Evaluate 					; evaluate RHS
.2ec5	ca		dex				dex
.2ec6	20 9a 2c	jsr $2c9a			jsr 	WriteValue
.2ec9	4c b3 2e	jmp $2eb3			jmp 	_CLCheckNext
.2ecc					LocaliseVariable:
.2ecc	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2ece	c9 40		cmp #$40			cmp 	#$40
.2ed0	b0 63		bcs $2f35			bcs 	_LVSyntax
.2ed2	8a		txa				txa 								; get the address of that variable.
.2ed3	a2 02		ldx #$02		ldx	#2
.2ed5	20 5c 4f	jsr $4f5c		jsr	variableHandler
.2ed8	aa		tax				tax
.2ed9	da		phx				phx
.2eda	5a		phy				phy
.2edb	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2ede	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2ee0	0a		asl a				asl 	a
.2ee1	10 16		bpl $2ef9			bpl 	_LVPushNumber
.2ee3	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2ee5	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ee7	c8		iny				iny
.2ee8	85 2c		sta $2c				sta 	temp1
.2eea	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eec	85 2d		sta $2d				sta 	temp1+1
.2eee	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2ef0	b1 2c		lda ($2c),y			lda 	(temp1),y
.2ef2	aa		tax				tax 								; into X
.2ef3	e8		inx				inx 								; +1 for length.
.2ef4	a9 24		lda #$24			lda 	#markerString
.2ef6	4c 0e 2f	jmp $2f0e			jmp 	_LVWriteFrame
.2ef9					_LVPushNumber:
.2ef9	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2efb	85 2c		sta $2c				sta 	temp1
.2efd	a5 2b		lda $2b				lda 	temp0+1
.2eff	85 2d		sta $2d				sta 	temp1+1
.2f01	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2f03	4a		lsr a				lsr 	a
.2f04	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2f06	a2 04		ldx #$04			ldx 	#VarISize
.2f08	90 04		bcc $2f0e			bcc 	_LVIsInteger
.2f0a	a9 23		lda #$23			lda 	#markerFloat
.2f0c	a2 06		ldx #$06			ldx 	#VarFSize
.2f0e					_LVIsInteger:
.2f0e					_LVWriteFrame:
.2f0e	8e c2 0d	stx $0dc2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2f11	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2f12	e8		inx				inx
.2f13	e8		inx				inx
.2f14	20 12 40	jsr $4012			jsr 	RSClaim 					; create the stack frame.
.2f17	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2f19	a0 01		ldy #$01			ldy 	#1
.2f1b	91 37		sta ($37),y			sta 	(rsPointer),y
.2f1d	c8		iny				iny
.2f1e	a5 2b		lda $2b				lda 	temp0+1
.2f20	91 37		sta ($37),y			sta 	(rsPointer),y
.2f22	a0 00		ldy #$00			ldy 	#0
.2f24					_LVCopyData:
.2f24	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2f26	c8		iny				iny 								; write allowing for the header bit.
.2f27	c8		iny				iny
.2f28	c8		iny				iny
.2f29	91 37		sta ($37),y			sta 	(rsPointer),y
.2f2b	88		dey				dey
.2f2c	88		dey				dey
.2f2d	ce c2 0d	dec $0dc2			dec 	storeSize 					; do it storesize times
.2f30	d0 f2		bne $2f24			bne 	_LVCopyData
.2f32	7a		ply				ply
.2f33	fa		plx				plx
.2f34	60		rts				rts
.2f35					_LVSyntax:
.2f35	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2f37	20 27 15	jsr $1527		jsr	errorHandler
.2f3a					RestoreLocals:
.2f3a	a2 00		ldx #$00			ldx 	#0
.2f3c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2f3e	c9 40		cmp #$40			cmp	 	#64
.2f40	90 01		bcc $2f43			bcc 	_RLocal
.2f42	60		rts				rts
.2f43					_RLocal:
.2f43	da		phx				phx
.2f44	5a		phy				phy
.2f45	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2f47	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f49	85 2a		sta $2a				sta 	temp0
.2f4b	c8		iny				iny
.2f4c	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f4e	85 2b		sta $2b				sta 	temp0+1
.2f50	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2f52	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f54	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2f56	f0 25		beq $2f7d			beq 	_RString
.2f58	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2f5a	c9 25		cmp #$25			cmp 	#markerInt
.2f5c	f0 02		beq $2f60			beq 	_RIsInteger
.2f5e	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2f60					_RIsInteger:
.2f60	da		phx				phx
.2f61	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2f63					_RCopyBack:
.2f63	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f65	88		dey				dey
.2f66	88		dey				dey
.2f67	88		dey				dey
.2f68	91 2a		sta ($2a),y			sta 	(temp0),y
.2f6a	c8		iny				iny
.2f6b	c8		iny				iny
.2f6c	c8		iny				iny
.2f6d	c8		iny				iny
.2f6e	ca		dex				dex
.2f6f	d0 f2		bne $2f63			bne 	_RCopyBack
.2f71	68		pla				pla 								; get size add 3
.2f72	18		clc				clc
.2f73	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2f75					_RRestoreAAndLoop:
.2f75	20 34 40	jsr $4034			jsr 	RSFree
.2f78	7a		ply				ply
.2f79	fa		plx				plx
.2f7a	4c 3a 2f	jmp $2f3a			jmp 	RestoreLocals 				; go see if there are any more locals.
.2f7d					_RString:
.2f7d	a2 00		ldx #$00			ldx 	#0
.2f7f	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2f81	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f83	95 98		sta $98,x			sta 	esInt0,x
.2f85	c8		iny				iny
.2f86	b1 37		lda ($37),y			lda 	(rsPointer),y
.2f88	95 a0		sta $a0,x			sta 	esInt1,x
.2f8a	18		clc				clc
.2f8b	a5 37		lda $37				lda 	rsPointer
.2f8d	69 03		adc #$03			adc 	#3
.2f8f	95 99		sta $99,x			sta 	esInt0+1,x
.2f91	a5 38		lda $38				lda 	rsPointer+1
.2f93	69 00		adc #$00			adc 	#0
.2f95	95 a1		sta $a1,x			sta 	esInt1+1,x
.2f97	8a		txa				txa
.2f98	a2 10		ldx #$10		ldx	#16
.2f9a	20 10 43	jsr $4310		jsr	stringHandler
.2f9d	a0 03		ldy #$03			ldy 	#3 							; get string length
.2f9f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2fa1	18		clc				clc
.2fa2	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2fa4	4c 75 2f	jmp $2f75			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0dc3					paramCount:
>0dc3							.fill 	1
.2fa7					CallProc:
.2fa7	20 2f 30	jsr $302f			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2faa	48		pha				pha 								; save length on stack
.2fab	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2fad	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2faf	48		pha				pha
.2fb0	a5 2a		lda $2a				lda 	temp0
.2fb2	48		pha				pha
.2fb3	98		tya				tya 								; calculate Y + length
.2fb4	18		clc				clc
.2fb5	65 32		adc $32				adc 	tempShort
.2fb7	a8		tay				tay
.2fb8	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2fba					_CallProcEvalParams:
.2fba	e8		inx				inx
.2fbb	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2fbd	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2fbf	f0 0b		beq $2fcc			beq 	_CPDoneParams
.2fc1	20 d9 38	jsr $38d9			jsr 	Evaluate 					; evaluate a parameter
.2fc4	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2fc6	c8		iny				iny
.2fc7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2fc9	f0 ef		beq $2fba			beq 	_CallProcEvalParams
.2fcb	88		dey				dey 								; undo consumption.
.2fcc					_CPDoneParams:
.2fcc	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; check closing parenthesis.
.2fcf	8e c3 0d	stx $0dc3			stx 	paramCount 					; store parameter count+1
.2fd2	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2fd4	a9 50		lda #$50			lda 	#markerPROC
.2fd6	20 12 40	jsr $4012			jsr 	RSClaim
.2fd9	a9 01		lda #$01			lda 	#1 							; store return address.
.2fdb	20 3e 40	jsr $403e			jsr 	RSSavePosition
.2fde	68		pla				pla 								; get the new code Ptr
.2fdf	85 28		sta $28				sta 	codePtr
.2fe1	68		pla				pla
.2fe2	85 29		sta $29				sta 	codePtr+1
.2fe4	68		pla				pla 								; length of name + 4 is the param start.
.2fe5	18		clc				clc
.2fe6	69 04		adc #$04			adc 	#4
.2fe8	a8		tay				tay
.2fe9	a2 ff		ldx #$ff			ldx 	#$FF
.2feb					_CPLoadParameters:
.2feb	e8		inx				inx 								; point to where the address should be loaded.
.2fec	ec c3 0d	cpx $0dc3			cpx 	paramCount 					; too many parameters in definition ?
.2fef	f0 1e		beq $300f			beq 	_CPParamError
.2ff1	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2ff3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2ff5	f0 0e		beq $3005			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2ff7	20 cc 2e	jsr $2ecc			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2ffa	20 9a 2c	jsr $2c9a			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2ffd	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2fff	c8		iny				iny
.3000	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3002	f0 e7		beq $2feb			beq 	_CPLoadParameters
.3004	88		dey				dey 								; no, unconsume and check for )
.3005					_CPParamComplete:
.3005	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; check )
.3008	e8		inx				inx 								; check right number of parameters have been consumed
.3009	ec c3 0d	cpx $0dc3			cpx 	paramCount
.300c	d0 01		bne $300f			bne 	_CPParamError
.300e	60		rts				rts
.300f					_CPParamError:
.300f	a2 18		ldx #$18			ldx 	#ErrorID_Params
.3011	20 27 15	jsr $1527		jsr	errorHandler
.3014					ReturnProc:
.3014	20 3a 2f	jsr $2f3a			jsr 	RestoreLocals 				; get the locals back.
.3017	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3019	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.301b	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.301d	f0 05		beq $3024			beq 	_isok
.301f	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.3021	20 27 15	jsr $1527		jsr	errorHandler
.3024					_isok:
.3024	a9 01		lda #$01			lda 	#1
.3026	20 51 40	jsr $4051			jsr 	RSLoadPosition 				; reload the position from offset 1.
.3029	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.302b	20 34 40	jsr $4034			jsr 	RSFree
.302e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0dc4					procList:
>0dc4							.fill 	2		 					; terminated by name high being zero.
.0dc6					yInLine:
>0dc6							.fill 	1
.302f					FindProcedure:
.302f	8c c6 0d	sty $0dc6			sty 	yInLine 					; save current position.
.3032	20 e9 30	jsr $30e9			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.3035	85 2c		sta $2c				sta 	temp1
.3037	ad c4 0d	lda $0dc4			lda		procList 					; put procList address in temp2
.303a	85 2e		sta $2e				sta 	temp2
.303c	ad c5 0d	lda $0dc5			lda 	procList+1
.303f	85 2f		sta $2f				sta 	temp2+1
.3041	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.3043					_FPLoop:
.3043	b1 2e		lda ($2e),y			lda 	(temp2),y
.3045	f0 4d		beq $3094			beq 	_FPError 					; if so, we don't know this procedure.
.3047	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.3049	c8		iny				iny
.304a	b1 2e		lda ($2e),y			lda 	(temp2),y
.304c	85 2a		sta $2a				sta 	temp0
.304e	c8		iny				iny
.304f	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.3051	c5 2c		cmp $2c				cmp 	temp1
.3053	d0 29		bne $307e			bne 	_FPNext 					; hash is different, go to next.
.3055	38		sec				sec
.3056	ad c6 0d	lda $0dc6			lda 	yInLine 					; position in line must be at least 4
.3059	e9 04		sbc #$04			sbc 	#4
.305b	18		clc				clc
.305c	65 28		adc $28				adc 	codePtr
.305e	85 30		sta $30				sta 	temp3
.3060	a5 29		lda $29				lda 	codePtr+1
.3062	69 00		adc #$00			adc 	#0
.3064	85 31		sta $31				sta 	temp3+1
.3066	5a		phy				phy
.3067	a0 04		ldy #$04			ldy 	#4
.3069					_FPCName:
.3069	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.306b	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.306d	d0 0e		bne $307d			bne 	_FPpulYNext 				; if different go to next one.
.306f	c8		iny				iny
.3070	c9 3a		cmp #$3a			cmp 	#$3A
.3072	90 f5		bcc $3069			bcc 	_FPCName 					; compare the whole lot....
.3074	68		pla				pla 								; throw away the saved Y
.3075	98		tya				tya 								; length of name is Y-4
.3076	38		sec				sec
.3077	e9 04		sbc #$04			sbc 	#4
.3079	ac c6 0d	ldy $0dc6			ldy 	yInLine  					; get the original Y back
.307c	60		rts				rts
.307d					_FPpulYNext:
.307d	7a		ply				ply
.307e					_FPNext:
.307e	c8		iny				iny 								; next procedure record.
.307f	10 c2		bpl $3043			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.3081	98		tya				tya 								; subtract 128 from Y
.3082	38		sec				sec
.3083	e9 80		sbc #$80			sbc 	#128
.3085	a8		tay				tay
.3086	18		clc				clc 								; add 128 to temp2, so we can have more than
.3087	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.3089	69 80		adc #$80			adc 	#128
.308b	85 2e		sta $2e				sta 	temp2
.308d	90 b4		bcc $3043			bcc 	_FPLoop
.308f	e6 2f		inc $2f				inc 	temp2+1
.3091	4c 43 30	jmp $3043			jmp 	_FPLoop
.3094					_FPError:
.3094	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.3096	20 27 15	jsr $1527		jsr	errorHandler
.3099					ScanProc:
.3099	5a		phy				phy
.309a	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.309c	8d c4 0d	sta $0dc4			sta 	procList
.309f	a5 36		lda $36				lda 	lowMemory+1
.30a1	8d c5 0d	sta $0dc5			sta 	procList+1
.30a4	20 18 34	jsr $3418			jsr 	ResetCodeAddress 			; back to the start.
.30a7					_ScanLoop:
.30a7	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.30a9	b1 28		lda ($28),y			lda 	(codePtr),y
.30ab	f0 2a		beq $30d7			beq 	_ScanExit
.30ad	a0 03		ldy #$03			ldy 	#3							; get first token
.30af	b1 28		lda ($28),y			lda 	(codePtr),y
.30b1	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.30b3	d0 12		bne $30c7			bne 	_ScanNext
.30b5	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.30b7	20 de 30	jsr $30de			jsr 	_ScanWrite
.30ba	a5 28		lda $28				lda 	codePtr
.30bc	20 de 30	jsr $30de			jsr 	_ScanWrite
.30bf	a0 04		ldy #$04			ldy 	#4 							; start of name part
.30c1	20 e9 30	jsr $30e9			jsr 	CalculateProcedureHash 		; calculate procedure hash
.30c4	20 de 30	jsr $30de			jsr 	_ScanWrite					; and write that
.30c7					_ScanNext:
.30c7	18		clc				clc
.30c8	a0 00		ldy #$00			ldy 	#0
.30ca	b1 28		lda ($28),y			lda 	(codePtr),y
.30cc	65 28		adc $28				adc 	codePtr
.30ce	85 28		sta $28				sta 	codePtr
.30d0	90 d5		bcc $30a7			bcc 	_ScanLoop
.30d2	e6 29		inc $29				inc 	codePtr+1
.30d4	4c a7 30	jmp $30a7			jmp 	_ScanLoop
.30d7					_ScanExit:
.30d7	a9 00		lda #$00			lda 	#0 							; write ending zero.
.30d9	20 de 30	jsr $30de			jsr 	_ScanWrite
.30dc	7a		ply				ply
.30dd	60		rts				rts
.30de					_ScanWrite:
.30de	a0 00		ldy #$00			ldy 	#0
.30e0	91 35		sta ($35),y			sta 	(lowMemory),y
.30e2	e6 35		inc $35				inc 	lowMemory
.30e4	d0 02		bne $30e8			bne 	_SWNoCarry
.30e6	e6 36		inc $36				inc 	lowMemory+1
.30e8					_SWNoCarry:
.30e8	60		rts				rts
.30e9					CalculateProcedureHash:
.30e9	a9 00		lda #$00			lda 	#0 							; clear hash.
.30eb	85 2a		sta $2a				sta 	temp0
.30ed					_CPHLoop:
.30ed	18		clc				clc 								; add character and rotate and add carry back in
.30ee	b1 28		lda ($28),y			lda 	(codePtr),y
.30f0	65 2a		adc $2a				adc 	temp0
.30f2	6a		ror a				ror 	a
.30f3	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.30f5	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.30f7	b1 28		lda ($28),y			lda 	(codePtr),y
.30f9	c8		iny				iny 								; advance incase we go round again.
.30fa	c9 3a		cmp #$3a			cmp 	#$3A
.30fc	90 ef		bcc $30ed			bcc 	_CPHLoop
.30fe	a5 2a		lda $2a				lda 	temp0
.3100	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.3101					Command_Repeat:
.3101	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.3103	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.3105	20 12 40	jsr $4012			jsr 	RSClaim
.3108	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.310a	20 3e 40	jsr $403e			jsr 	RSSavePosition
.310d	60		rts				rts
.310e					Command_Until:
.310e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3110	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.3112	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.3114	f0 05		beq $311b			beq 	_isok
.3116	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.3118	20 27 15	jsr $1527		jsr	errorHandler
.311b					_isok:
.311b	20 f6 38	jsr $38f6			jsr 	EvaluateRootInteger 		; at the bottom.
.311e	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero					; check if TOS zero
.3121	d0 06		bne $3129			bne 	_CUExit
.3123	a9 01		lda #$01			lda 	#1
.3125	20 51 40	jsr $4051			jsr 	RSLoadPosition 				; reload the position from offset 1.
.3128	60		rts				rts
.3129					_CUExit:
.3129	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.312b	20 34 40	jsr $4034			jsr 	RSFree
.312e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.312f					ScanForward:
.312f	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.3131	86 2d		stx $2d				stx 	temp1+1
.3133	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.3135	85 2e		sta $2e				sta 	temp2
.3137	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.3139	c8		iny				iny
.313a	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.313c	d0 08		bne $3146			bne 	_SFNoCheck 					; if so, check token against entered values.
.313e	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.3140	f0 24		beq $3166			beq 	_SFExit 					; at the same strcture depth.
.3142	c5 2d		cmp $2d				cmp 	temp1+1
.3144	f0 20		beq $3166			beq 	_SFExit
.3146					_SFNoCheck:
.3146	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.3148	90 ed		bcc $3137			bcc 	_SFLoop
.314a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.314c	90 19		bcc $3167			bcc 	_SFSpecials
.314e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.3150	90 e5		bcc $3137			bcc 	_SFLoop
.3152	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.3154	b0 e1		bcs $3137			bcs 	_SFLoop
.3156	aa		tax				tax  								; token in X, and look up the adjuster.
.3157	bd 14 38	lda $3814,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.315a	38		sec				sec 								; convert to an offset ($FF,$01)
.315b	e9 81		sbc #$81			sbc 	#$81
.315d	18		clc				clc 								; add to depth
.315e	65 2e		adc $2e				adc 	temp2
.3160	85 2e		sta $2e				sta 	temp2
.3162	10 d3		bpl $3137			bpl 	_SFLoop 					; +ve okay to continue
.3164	30 07		bmi $316d			bmi 	SFError 					; if gone -ve then we have a nesting error
.3166	60		rts		_SFExit:rts
.3167					_SFSpecials:
.3167	20 72 31	jsr $3172			jsr 	ScannerSkipSpecial
.316a	4c 37 31	jmp $3137			jmp 	_SFLoop
.316d					SFError:
.316d	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.316f	20 27 15	jsr $1527		jsr	errorHandler
.3172					ScannerSkipSpecial:
.3172	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.3174	f0 10		beq $3186			beq 	_SFNextLine
.3176	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.3178	f0 2b		beq $31a5			beq 	_SFFloatSkip
.317a	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.317c	f0 02		beq $3180			beq 	_SFSkipString
.317e	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.317f	60		rts				rts 								; token.
.3180					_SFSkipString:
.3180	98		tya				tya
.3181	38		sec				sec
.3182	71 28		adc ($28),y			adc 	(codePtr),y
.3184	a8		tay				tay
.3185	60		rts				rts
.3186					_SFNextLine:
.3186	a0 00		ldy #$00			ldy 	#0 							; get offset
.3188	b1 28		lda ($28),y			lda 	(codePtr),y
.318a	18		clc				clc 								; add to code pointer.
.318b	65 28		adc $28				adc 	codePtr
.318d	85 28		sta $28				sta 	codePtr
.318f	90 02		bcc $3193			bcc		_SFNLNoCarry
.3191	e6 29		inc $29				inc 	codePtr+1
.3193					_SFNLNoCarry:
.3193	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.3195	d0 0b		bne $31a2			bne		_SFXNL 						; no go round again
.3197	a5 2c		lda $2c				lda 	temp1
.3199	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.319b	d0 d0		bne $316d			bne 	SFError 					; read uses this to search for data statements
.319d	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.319f	20 27 15	jsr $1527		jsr	errorHandler
.31a2	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.31a4	60		rts				rts
.31a5					_SFFloatSkip:
.31a5	98		tya				tya 								; skip over an embedded float.
.31a6	18		clc				clc
.31a7	69 05		adc #$05			adc 	#FloatEmbeddedSize
.31a9	a8		tay				tay
.31aa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.31ab					Command_While:
.31ab	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.31ad	a2 04		ldx #$04			ldx 	#4
.31af	20 12 40	jsr $4012			jsr 	RSClaim 					; create on stack.
.31b2	88		dey				dey
.31b3	a9 01		lda #$01			lda 	#1
.31b5	20 3e 40	jsr $403e			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.31b8	c8		iny				iny
.31b9	20 f6 38	jsr $38f6			jsr 	EvaluateRootInteger			; get the conditional
.31bc	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.31bf	f0 01		beq $31c2			beq 	_CWFail
.31c1	60		rts				rts
.31c2					_CWFail:
.31c2	a9 04		lda #$04			lda 	#4
.31c4	20 34 40	jsr $4034			jsr 	RSFree 						; close the just opened position.
.31c7	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.31c9	aa		tax				tax
.31ca	20 2f 31	jsr $312f			jsr 	ScanForward
.31cd	60		rts				rts
.31ce					Command_Wend:
.31ce	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.31d0	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.31d2	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.31d4	f0 05		beq $31db			beq 	_isok
.31d6	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.31d8	20 27 15	jsr $1527		jsr	errorHandler
.31db					_isok:
.31db	a9 01		lda #$01			lda 	#1
.31dd	20 51 40	jsr $4051			jsr 	RSLoadPosition				; go back until true
.31e0	a9 04		lda #$04			lda 	#4
.31e2	20 34 40	jsr $4034			jsr 	RSFree 						; close the loop
.31e5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.31e6					CommandClear:
.31e6					XCommandClear:
.31e6	5a		phy				phy
.31e7	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.31ea	85 33		sta $33				sta 	highMemory
.31ec	ad cd 0a	lda $0acd			lda 	endMemory+1
.31ef	85 34		sta $34				sta 	highMemory+1
.31f1	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.31f4	85 2a		sta $2a				sta 	temp0
.31f6	ad c9 0a	lda $0ac9			lda 	basePage+1
.31f9	85 2b		sta $2b				sta 	temp0+1
.31fb					_CCFindEnd:
.31fb	a0 00		ldy #$00			ldy 	#0
.31fd	b1 2a		lda ($2a),y			lda 	(temp0),y
.31ff	f0 0c		beq $320d			beq 	_CCFoundEnd 				; offset zero is end.
.3201	18		clc				clc
.3202	65 2a		adc $2a				adc 	temp0 						; move to next line
.3204	85 2a		sta $2a				sta 	temp0
.3206	90 f3		bcc $31fb			bcc 	_CCFindEnd
.3208	e6 2b		inc $2b				inc 	temp0+1
.320a	4c fb 31	jmp $31fb			jmp 	_CCFindEnd
.320d					_CCFoundEnd:
.320d	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.320f	85 35		sta $35				sta 	lowMemory
.3211	a5 2b		lda $2b				lda 	temp0+1
.3213	85 36		sta $36				sta 	lowMemory+1
.3215	18		clc				clc 								; put temp0+1 in endProgram
.3216	a5 2a		lda $2a				lda 	temp0
.3218	69 01		adc #$01			adc 	#1
.321a	8d ca 0a	sta $0aca			sta 	endProgram
.321d	a5 2b		lda $2b				lda 	temp0+1
.321f	69 00		adc #$00			adc 	#0
.3221	8d cb 0a	sta $0acb			sta 	endProgram+1
.3224	18		clc				clc 								; put a bit of space in.
.3225	a5 35		lda $35				lda 	lowMemory
.3227	69 04		adc #$04			adc 	#4
.3229	85 35		sta $35				sta 	lowMemory
.322b	90 02		bcc $322f			bcc 	_CCNoCarry
.322d	e6 36		inc $36				inc 	lowMemory+1
.322f					_CCNoCarry:
.322f	20 04 40	jsr $4004			jsr 	RSReset 					; reset the return stack.
.3232	a2 06		ldx #$06		ldx	#6
.3234	20 5c 4f	jsr $4f5c		jsr	variableHandler
.3237	20 99 30	jsr $3099			jsr 	ScanProc 					; scan for procedures
.323a	20 40 2a	jsr $2a40			jsr 	CommandRestore 				; do a restore
.323d	7a		ply				ply
.323e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0dc7					structIndent:
>0dc7							.fill 	1
.323f					CommandList:
.323f	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.3241	8e c7 0d	stx $0dc7			stx 	structIndent
.3244	20 79 3f	jsr $3f79			jsr 	MInt32False
.3247	e8		inx				inx
.3248	20 75 3f	jsr $3f75			jsr 	MInt32True
.324b	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.324d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.324f	f0 15		beq $3266			beq 	_CLEndLine
.3251	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.3253	30 1b		bmi $3270			bmi 	_CLDoListing 				; do the whole lot.
.3255	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.3257	20 f8 38	jsr $38f8			jsr 	EvaluateInteger
.325a	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.325c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.325e	f0 06		beq $3266			beq 	_CLEndLine
.3260	20 b9 3e	jsr $3eb9			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.3263	4c 70 32	jmp $3270			jmp 	_CLDoListing 				; own e.g. list 1100
.3266					_CLEndLine:
.3266	c8		iny				iny 								; skip comma
.3267	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.3269	30 05		bmi $3270			bmi 	_CLDoListing
.326b	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.326d	20 f8 38	jsr $38f8			jsr 	EvaluateInteger				; get end
.3270					_CLDoListing:
.3270	20 18 34	jsr $3418			jsr 	ResetCodeAddress 			; back to the start.
.3273					_CLCheckLoop:
.3273	a2 18		ldx #$18		ldx	#24
.3275	20 05 15	jsr $1505		jsr	deviceHandler
.3278	a0 00		ldy #$00			ldy 	#0							; check end.
.327a	b1 28		lda ($28),y			lda 	(codePtr),y
.327c	f0 41		beq $32bf			beq 	_CLEnd
.327e	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3280	20 c2 32	jsr $32c2			jsr 	CLCompareLineTOS
.3283	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.3285	f0 28		beq $32af			beq 	_CLNext
.3287	e8		inx				inx
.3288	20 c2 32	jsr $32c2			jsr 	CLCompareLineTOS 			; compare vs higher
.328b	c9 01		cmp #$01			cmp 	#1
.328d	f0 20		beq $32af			beq 	_CLNext
.328f	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.3291	20 e4 32	jsr $32e4			jsr 	CLStructureCheck
.3294	ad c7 0d	lda $0dc7			lda 	structIndent 				; indent level.
.3297	10 02		bpl $329b			bpl 	_CLPositive
.3299	a9 00		lda #$00			lda 	#0
.329b					_CLPositive:
.329b	a2 04		ldx #$04		ldx	#4
.329d	20 9d 4b	jsr $4b9d		jsr	tokeniserHandler
.32a0	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.32a2	20 e4 32	jsr $32e4			jsr 	CLStructureCheck
.32a5	ad c7 0d	lda $0dc7			lda 	structIndent
.32a8	10 05		bpl $32af			bpl 	_CLNext
.32aa	a9 00		lda #$00			lda 	#0
.32ac	8d c7 0d	sta $0dc7			sta 	structIndent
.32af					_CLNext:
.32af	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.32b1	b1 28		lda ($28),y			lda 	(codePtr),y
.32b3	18		clc				clc
.32b4	65 28		adc $28				adc 	codePtr
.32b6	85 28		sta $28				sta 	codePtr
.32b8	90 b9		bcc $3273			bcc 	_CLCheckLoop
.32ba	e6 29		inc $29				inc 	codePtr+1
.32bc	4c 73 32	jmp $3273			jmp 	_CLCheckLoop
.32bf					_CLEnd:
.32bf	4c 60 40	jmp $4060			jmp 	WarmStart 					; warm start after list.
.32c2					CLCompareLineTOS:
.32c2	a0 01		ldy #$01			ldy 	#1
.32c4	b1 28		lda ($28),y			lda 	(codePtr),y
.32c6	55 98		eor $98,x			eor 	esInt0,x
.32c8	85 2a		sta $2a				sta 	temp0
.32ca	c8		iny				iny
.32cb	b1 28		lda ($28),y			lda 	(codePtr),y
.32cd	55 a0		eor $a0,x			eor 	esInt1,x
.32cf	05 2a		ora $2a				ora 	temp0
.32d1	f0 10		beq $32e3			beq 	_CLCLTExit
.32d3	88		dey				dey
.32d4	b1 28		lda ($28),y			lda 	(codePtr),y
.32d6	d5 98		cmp $98,x			cmp 	esInt0,x
.32d8	c8		iny				iny
.32d9	b1 28		lda ($28),y			lda 	(codePtr),y
.32db	f5 a0		sbc $a0,x			sbc 	esInt1,x
.32dd	a9 ff		lda #$ff			lda 	#255
.32df	90 02		bcc $32e3			bcc 	_CLCLTExit
.32e1	a9 01		lda #$01			lda 	#1
.32e3					_CLCLTExit:
.32e3	60		rts				rts
.32e4					CLStructureCheck:
.32e4	85 2a		sta $2a				sta 	temp0
.32e6	a0 03		ldy #$03			ldy 	#3
.32e8					_CLSCLoop:
.32e8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.32ea	c8		iny				iny
.32eb	c9 80		cmp #$80			cmp 	#$80
.32ed	90 f9		bcc $32e8			bcc 	_CLSCLoop 					; $00-$7F just step over.
.32ef	f0 28		beq $3319			beq		_CLSCExit					; EOL return
.32f1	c9 86		cmp #$86			cmp 	#$86 						; special handler
.32f3	90 1e		bcc $3313			bcc 	_CLSCSpecial
.32f5	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.32f7	90 ef		bcc $32e8			bcc 	_CLSCLoop
.32f9	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.32fb	b0 eb		bcs $32e8			bcs 	_CLSCLoop
.32fd	aa		tax				tax 								; get adjustment
.32fe	bd 14 38	lda $3814,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.3301	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.3303	d0 e3		bne $32e8			bne 	_CLSCLoop
.3305	38		sec				sec
.3306	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.3308	0a		asl a				asl 	a 							; double indent step
.3309	18		clc				clc
.330a	6d c7 0d	adc $0dc7			adc 	structIndent 				; add to structure indent
.330d	8d c7 0d	sta $0dc7			sta 	structIndent
.3310	4c e8 32	jmp $32e8			jmp 	_CLSCLoop
.3313					_CLSCSpecial:
.3313	20 72 31	jsr $3172			jsr 	ScannerSkipSpecial
.3316	4c e8 32	jmp $32e8			jmp 	_CLSCLoop
.3319					_CLSCExit:
.3319	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.331a					CommandLoad:
.331a	20 42 33	jsr $3342			jsr 	CLSParameters 					; get parameters for load.
.331d	08		php				php
.331e	a2 0c		ldx #$0c		ldx	#12
.3320	20 05 15	jsr $1505		jsr	deviceHandler
.3323	28		plp				plp
.3324	b0 08		bcs $332e			bcs 	_CLExit 						; if CC then load a program, so warm start.
.3326	20 e6 31	jsr $31e6			jsr 	CommandClear
.3329	a2 04		ldx #$04		ldx	#4
.332b	20 02 2a	jsr $2a02		jsr	interactionHandler
.332e					_CLExit
.332e	60		rts				rts
.332f					CommandSave:
.332f	20 42 33	jsr $3342			jsr 	CLSParameters					; get parameters for save
.3332	90 08		bcc $333c			bcc 	_CSNoOverrideAddress
.3334	20 f7 3f	jsr $3ff7			jsr 	CheckComma 						; should be a comma.
.3337	a2 02		ldx #$02			ldx 	#2
.3339	20 f8 38	jsr $38f8			jsr 	EvaluateInteger 				; get save end address.
.333c					_CSNoOverrideAddress:
.333c	a2 16		ldx #$16		ldx	#22
.333e	20 05 15	jsr $1505		jsr	deviceHandler
.3341	60		rts				rts
.3342					CLSParameters:
.3342	a2 00		ldx #$00			ldx 	#0 								; string at +0
.3344	20 ed 38	jsr $38ed			jsr 	EvaluateString
.3347	e8		inx				inx 									; erase out +1 (start) +2 (end, for save)
.3348	20 79 3f	jsr $3f79			jsr 	MInt32False
.334b	e8		inx				inx
.334c	20 79 3f	jsr $3f79			jsr 	MInt32False
.334f	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.3352	85 99		sta $99				sta 	esInt0+1
.3354	ad c9 0a	lda $0ac9			lda 	basePage+1
.3357	85 a1		sta $a1				sta 	esInt1+1
.3359	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.335c	85 9a		sta $9a				sta 	esInt0+2
.335e	ad cb 0a	lda $0acb			lda 	endProgram+1
.3361	85 a2		sta $a2				sta 	esInt1+2
.3363	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.3365	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3367	d0 08		bne $3371			bne 	_CLSDefault
.3369	c8		iny				iny 									; skip comma
.336a	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.336c	20 f8 38	jsr $38f8			jsr 	EvaluateInteger 				; the load or start save address
.336f	38		sec				sec 									; return CS indicating override
.3370	60		rts				rts
.3371					_CLSDefault:
.3371	18		clc				clc
.3372	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.3373					Command_New:
.3373					Command_XNew:
.3373	20 18 34	jsr $3418			jsr 	ResetCodeAddress 			; point to first line
.3376	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.3378	98		tya				tya
.3379	91 28		sta ($28),y			sta 	(codePtr),y
.337b	20 e6 31	jsr $31e6			jsr 	CommandClear 				; clear everything down.
.337e	4c 52 2d	jmp $2d52			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0dc8					breakCounter:
>0dc8								.fill 	1
.0dc9					breakIncrement:
>0dc9								.fill 	1
.3381					Command_Run:
.3381					XCommand_Run:
.3381	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.3383	9a		txs				txs
.3384	20 12 34	jsr $3412			jsr 	BreakOn 					; turn break on
.3387	20 e6 31	jsr $31e6			jsr 	CommandClear 				; clear everything.
.338a	20 18 34	jsr $3418			jsr 	ResetCodeAddress 			; back to the start.
.338d					Command_RunFrom:
.338d	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.338f					CRNextInstruction:
.338f	a9 00		lda #$00			lda 	#0
.3391	85 3a		sta $3a				sta 	softMemAlloc+1
.3393	ad c8 0d	lda $0dc8			lda 	breakCounter 				; check for break.
.3396	6d c9 0d	adc $0dc9			adc 	breakIncrement
.3399	8d c8 0d	sta $0dc8			sta 	breakCounter
.339c	90 05		bcc $33a3			bcc 	_CRNoChecks
.339e	a2 18		ldx #$18		ldx	#24
.33a0	20 05 15	jsr $1505		jsr	deviceHandler
.33a3					_CRNoChecks
.33a3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.33a5	10 1c		bpl $33c3			bpl 	_CRNotToken
.33a7	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.33a9	b0 0c		bcs $33b7			bcs 	_CRExecute
.33ab	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.33ad	b0 55		bcs $3404			bcs 	Unimplemented
.33af	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.33b1	b0 04		bcs $33b7			bcs 	_CRExecute
.33b3	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.33b5	b0 16		bcs $33cd			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.33b7					_CRExecute:
.33b7	c8		iny				iny 								; consume it.
.33b8	0a		asl a				asl 	a 							; double it, losing most significant bit.
.33b9	aa		tax				tax
.33ba	20 c0 33	jsr $33c0			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.33bd	4c 8f 33	jmp $338f			jmp 	CRNextInstruction
.33c0					_CRRunRoutine:
.33c0	7c 2a 34	jmp ($342a,x)			jmp 	(Group0Vectors,x)
.33c3					_CRNotToken:
.33c3	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.33c5	b0 3d		bcs $3404			bcs 	Unimplemented
.33c7					_CRDefaultLet:
.33c7	20 87 2c	jsr $2c87			jsr 	CommandLet 					; do the default, LET
.33ca	4c 8f 33	jmp $338f			jmp 	CRNextInstruction
.33cd					_CRCheckIndirect:
.33cd	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.33cf	f0 0a		beq $33db			beq 	_CRAndCommand
.33d1	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.33d3	f0 f2		beq $33c7			beq 	_CRDefaultLet
.33d5	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.33d7	f0 ee		beq $33c7			beq 	_CRDefaultLet
.33d9	d0 29		bne $3404			bne 	Unimplemented
.33db					_CRAndCommand:
.33db	c8		iny				iny 								; skip over the AND token
.33dc	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.33de	20 f8 33	jsr $33f8			jsr 	CommandAssembler 			; do the assembler command
.33e1	4c 8f 33	jmp $338f			jmp 	CRNextInstruction 			; and loop round.
.33e4					CommandShift1:
.33e4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.33e6	10 1c		bpl $3404			bpl 	Unimplemented 				; we have an error as this should not happen.
.33e8	c8		iny				iny 								; advance over it.
.33e9	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.33eb	b0 0b		bcs $33f8			bcs 	CommandAssembler
.33ed	0a		asl a				asl 	a 							; double into X
.33ee	aa		tax				tax
.33ef	7c f6 34	jmp ($34f6,x)			jmp 	(Group1Vectors-12,x)
.33f2					CommandShift2:
.33f2	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.33f4	20 8a 18	jsr $188a		jsr	extensionHandler
.33f7	60		rts				rts
.33f8					CommandAssembler:
.33f8	a2 02		ldx #$02		ldx	#2
.33fa	20 ac 13	jsr $13ac		jsr	assemblerHandler
.33fd	60		rts				rts
.33fe					CommandAssemblerLabel:
.33fe	a2 04		ldx #$04		ldx	#4
.3400	20 ac 13	jsr $13ac		jsr	assemblerHandler
.3403	60		rts				rts
.3404					Unimplemented:
.3404	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.3406	20 27 15	jsr $1527		jsr	errorHandler
.3409					CommandColon:
.3409	60		rts				rts
.340a					CommandBreak:
.340a	20 f6 38	jsr $38f6			jsr 	EvaluateRootInteger
.340d	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero
.3410	f0 02		beq $3414			beq 	BreakOff
.3412					BreakOn:
.3412	a2 04		ldx #$04			ldx 	#4 							; checks 1 in 256/X instructions.
.3414					BreakOff:
.3414	8e c9 0d	stx $0dc9			stx 	breakIncrement
.3417	60		rts				rts
.3418					ResetCodeAddress:
.3418	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.341b	85 28		sta $28				sta 	codePtr
.341d	ad c9 0a	lda $0ac9			lda 	basePage+1
.3420	85 29		sta $29				sta 	codePtr+1
.3422	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.3424	60		rts				rts
.3425					TKErr01:
.3425					TKErr02:
.3425					TKErr03:
.3425					TKErr04:
.3425					TKErr05:
.3425					TKErr06:
.3425					TKErr07:
.3425					TKErr08:
.3425					TKErr09:
.3425					TKErr10:
.3425					TKErr11:
.3425					TKErr12:
.3425					TKErr13:
.3425					TKErr14:
.3425					TKErr15:
.3425					TKErr16:
.3425					TKErr17:
.3425	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3427	20 27 15	jsr $1527		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.342a					Group0Vectors:
>342a	58 2d					.word	AdvanceNextLine          ; $80 [[eol]]
>342c	e4 33					.word	CommandShift1            ; $81 [[sh1]]
>342e	f2 33					.word	CommandShift2            ; $82 [[sh2]]
>3430	25 34					.word	TKErr09                  ; $83 [[sh3]]
>3432	25 34					.word	TKErr10                  ; $84 [[fpc]]
>3434	25 34					.word	TKErr08                  ; $85 [[str]]
>3436	df 35					.word	AndHandler               ; $86 and
>3438	cc 35					.word	OrHandler                ; $87 or
>343a	b9 35					.word	XorHandler               ; $88 xor
>343c	01 37					.word	CompareGreaterEq         ; $89 >=
>343e	0b 37					.word	CompareLessEq            ; $8a <=
>3440	ed 36					.word	CompareGreater           ; $8b >
>3442	e3 36					.word	CompareLess              ; $8c <
>3444	d9 36					.word	CompareEquals            ; $8d =
>3446	f7 36					.word	CompareNotEquals         ; $8e <>
>3448	4a 35					.word	AddHandler               ; $8f +
>344a	6d 35					.word	SubHandler               ; $90 -
>344c	05 36					.word	ShrHandler               ; $91 >>
>344e	f2 35					.word	ShlHandler               ; $92 <<
>3450	80 35					.word	MulHandler               ; $93 *
>3452	93 35					.word	DivHandler               ; $94 /
>3454	a6 35					.word	ModHandler               ; $95 mod
>3456	3e 36					.word	PowerHandler             ; $96 ^
>3458	18 36					.word	WordRefHandler           ; $97 !
>345a	2b 36					.word	ByteRefHandler           ; $98 ?
>345c	01 31					.word	Command_Repeat           ; $99 repeat
>345e	ab 31					.word	Command_While            ; $9a while
>3460	6c 2d					.word	Command_FOR              ; $9b for
>3462	72 2e					.word	CommandIf                ; $9c if
>3464	25 34					.word	TKErr04                  ; $9d defproc
>3466	0e 31					.word	Command_Until            ; $9e until
>3468	ce 31					.word	Command_Wend             ; $9f wend
>346a	c9 2d					.word	Command_NEXT             ; $a0 next
>346c	25 34					.word	TKErr06                  ; $a1 then
>346e	ad 2e					.word	Command_ENDIF            ; $a2 endif
>3470	14 30					.word	ReturnProc               ; $a3 endproc
>3472	63 38					.word	UnaryParenthesis         ; $a4 (
>3474	3d 3a					.word	UnaryLen                 ; $a5 len(
>3476	81 3a					.word	UnarySgn                 ; $a6 sgn(
>3478	6a 3a					.word	UnaryAbs                 ; $a7 abs(
>347a	da 3a					.word	Unary_Random             ; $a8 random(
>347c	24 3b					.word	Unary_Page               ; $a9 page
>347e	75 3f					.word	MInt32True               ; $aa true
>3480	79 3f					.word	MInt32False              ; $ab false
>3482	ef 3a					.word	Unary_Min                ; $ac min(
>3484	f3 3a					.word	Unary_Max                ; $ad max(
>3486	fc 3b					.word	UnarySys                 ; $ae sys(
>3488	a5 3b					.word	UnaryTimer               ; $af timer(
>348a	bf 39					.word	EventFunction            ; $b0 event(
>348c	cc 3b					.word	UnaryGet                 ; $b1 get(
>348e	bc 3b					.word	UnaryInkey               ; $b2 inkey(
>3490	75 3b					.word	UnaryAlloc               ; $b3 alloc(
>3492	31 3c					.word	ExecChr                  ; $b4 chr$(
>3494	5d 3c					.word	ExecLeft                 ; $b5 left$(
>3496	7a 3c					.word	ExecMid                  ; $b6 mid$(
>3498	a2 3c					.word	ExecRight                ; $b7 right$(
>349a	44 39					.word	Event_Str                ; $b8 str$(
>349c	73 39					.word	UnaryVal                 ; $b9 val(
>349e	98 3a					.word	UnaryPeek                ; $ba peek(
>34a0	9e 3a					.word	UnaryDeek                ; $bb deek(
>34a2	a4 3a					.word	UnaryLeek                ; $bc leek(
>34a4	5b 3a					.word	UnaryAsc                 ; $bd asc(
>34a6	4f 3b					.word	UnaryIntToFloat          ; $be int(
>34a8	62 3b					.word	UnaryFloatToInt          ; $bf float(
>34aa	76 39					.word	UnaryIsVal               ; $c0 isval(
>34ac	46 3c					.word	ExecUpper                ; $c1 upper$(
>34ae	43 3c					.word	ExecLower                ; $c2 lower$(
>34b0	32 3b					.word	UnaryReference           ; $c3 @
>34b2	48 3b					.word	UnaryComplement          ; $c4 ~
>34b4	45 3b					.word	UnaryHexMarker           ; $c5 &
>34b6	e7 3b					.word	UnaryGetString           ; $c6 get$(
>34b8	ed 3b					.word	UnaryInkeyString         ; $c7 inkey$(
>34ba	20 3c					.word	UnaryMem                 ; $c8 mem
>34bc	25 34					.word	TKErr01                  ; $c9 )
>34be	09 34					.word	CommandColon             ; $ca :
>34c0	25 34					.word	TKErr02                  ; $cb ,
>34c2	25 34					.word	TKErr03                  ; $cc ;
>34c4	40 2d					.word	Command_Rem2             ; $cd '
>34c6	25 34					.word	TKErr07                  ; $ce to
>34c8	25 34					.word	TKErr05                  ; $cf step
>34ca	a7 2f					.word	CallProc                 ; $d0 proc
>34cc	ae 2e					.word	CommandLocal             ; $d1 local
>34ce	79 2c					.word	Command_Dim              ; $d2 dim
>34d0	40 2d					.word	Command_Rem              ; $d3 rem
>34d2	87 2c					.word	CommandLet               ; $d4 let
>34d4	cd 2a					.word	Command_Input            ; $d5 input
>34d6	a7 2e					.word	Command_ELSE             ; $d6 else
>34d8	4a 2c					.word	Command_VDU              ; $d7 vdu
>34da	81 2b					.word	Command_Print            ; $d8 print
>34dc	37 2a					.word	CommandData              ; $d9 data
>34de	b0 24					.word	Command_Image            ; $da image
>34e0	25 34					.word	TKErr12                  ; $db at
>34e2	25 34					.word	TKErr14                  ; $dc flip
>34e4	6b 2c					.word	Command_Assert           ; $dd assert
>34e6	03 2d					.word	Command_Poke             ; $de poke
>34e8	07 2d					.word	Command_Doke             ; $df doke
>34ea	0b 2d					.word	Command_Loke             ; $e0 loke
>34ec	1c 2c					.word	Command_Ink              ; $e1 ink
>34ee	27 2c					.word	Command_Paper            ; $e2 paper
>34f0	16 2c					.word	Command_CLS              ; $e3 cls
>34f2	32 2c					.word	Command_Locate           ; $e4 locate
>34f4	fe 33					.word	CommandAssemblerLabel    ; $e5 .
>34f6	25 34					.word	TKErr15                  ; $e6 from
>34f8	25 34					.word	TKErr11                  ; $e7 #
>34fa	e6 31					.word	CommandClear             ; $e8 clear
>34fc	25 34					.word	TKErr16                  ; $e9 text
>34fe	25 34					.word	TKErr17                  ; $ea type
>3500	25 34					.word	TKErr13                  ; $eb time

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.3502					Group1Vectors:
>3502	1a 33					.word	CommandLoad              ; $86 load
>3504	2f 33					.word	CommandSave              ; $87 save
>3506	3f 32					.word	CommandList              ; $88 list
>3508	73 33					.word	Command_New              ; $89 new
>350a	0a 34					.word	CommandBreak             ; $8a break
>350c	81 33					.word	Command_Run              ; $8b run
>350e	0c 2a					.word	CommandRead              ; $8c read
>3510	40 2a					.word	CommandRestore           ; $8d restore
>3512	52 2d					.word	CommandEnd               ; $8e end
>3514	4d 2d					.word	CommandStop              ; $8f stop
>3516	55 2d					.word	CommandXemu              ; $90 xemu
>3518	9b 2a					.word	CommandGOTO              ; $91 goto
>351a	70 2a					.word	CommandGOSUB             ; $92 gosub
>351c	83 2a					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.351e					BinaryProcess:
.351e	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.3520	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.3522	0a		asl a				asl 	a
.3523	30 0e		bmi $3533			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.3525	18		clc				clc 								; return CC for integer
.3526	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3528	f0 08		beq $3532			beq 	_BPExit 					; if both integer then return with CC.
.352a	20 38 35	jsr $3538			jsr 	BPMakeBothFloat 			; make both float
.352d	a9 01		lda #$01			lda 	#$01 						; set result type to float
.352f	95 90		sta $90,x			sta 	esType,x
.3531	38		sec				sec 								; and return with carry set.
.3532					_BPExit:
.3532	60		rts				rts
.3533					_BPStringType:
.3533	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3535	20 27 15	jsr $1527		jsr	errorHandler
.3538					BPMakeBothFloat:
.3538	e8		inx				inx
.3539	20 3d 35	jsr $353d			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.353c	ca		dex				dex
.353d					BPMakeFloat:
.353d	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.353f	4a		lsr a				lsr 	a
.3540	b0 07		bcs $3549			bcs 	_BPIsFloat 					; already a float if set.
.3542	8a		txa				txa
.3543	a2 1c		ldx #$1c		ldx	#28
.3545	20 16 28	jsr $2816		jsr	floatingpointHandler
.3548	aa		tax				tax
.3549					_BPIsFloat:
.3549	60		rts				rts
.354a					AddHandler:
.354a	20 1b 37	jsr $371b			jsr 	DereferenceTwo 				; dereference top two on stack.
.354d	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.354f	35 91		and $91,x			and 	esType+1,x
.3551	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.3553	d0 10		bne $3565			bne 	_AHStringConcat				; concatenate strings.
.3555	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.3558	b0 03		bcs $355d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.355a	4c 5f 3e	jmp $3e5f			jmp 	MInt32Add 							; else do it as integer.
.355d					_IsFPOperation:
.355d	8a		txa				txa 								; call the relevant fp routine
.355e	a2 04		ldx #$04		ldx	#4
.3560	20 16 28	jsr $2816		jsr	floatingpointHandler
.3563	aa		tax				tax
.3564	60		rts				rts
.3565					_AHStringConcat:
.3565	8a		txa				txa 								; handled by the string module.
.3566	a2 06		ldx #$06		ldx	#6
.3568	20 10 43	jsr $4310		jsr	stringHandler
.356b	aa		tax				tax
.356c	60		rts				rts
.356d					SubHandler:
.356d	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.3570	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.3573	b0 03		bcs $3578			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3575	4c 79 3e	jmp $3e79			jmp 	MInt32Sub 							; else do it as integer.
.3578					_IsFPOperation:
.3578	8a		txa				txa 								; call the relevant fp routine
.3579	a2 12		ldx #$12		ldx	#18
.357b	20 16 28	jsr $2816		jsr	floatingpointHandler
.357e	aa		tax				tax
.357f	60		rts				rts
.3580					MulHandler:
.3580	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.3583	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.3586	b0 03		bcs $358b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3588	4c 93 3e	jmp $3e93			jmp 	MInt32Multiply 							; else do it as integer.
.358b					_IsFPOperation:
.358b	8a		txa				txa 								; call the relevant fp routine
.358c	a2 0c		ldx #$0c		ldx	#12
.358e	20 16 28	jsr $2816		jsr	floatingpointHandler
.3591	aa		tax				tax
.3592	60		rts				rts
.3593					DivHandler:
.3593	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.3596	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.3599	b0 03		bcs $359e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.359b	4c 53 3d	jmp $3d53			jmp 	MInt32SDivide 							; else do it as integer.
.359e					_IsFPOperation:
.359e	8a		txa				txa 								; call the relevant fp routine
.359f	a2 08		ldx #$08		ldx	#8
.35a1	20 16 28	jsr $2816		jsr	floatingpointHandler
.35a4	aa		tax				tax
.35a5	60		rts				rts
.35a6					ModHandler:
.35a6	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.35a9	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.35ac	b0 03		bcs $35b1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35ae	4c d1 3d	jmp $3dd1			jmp 	MInt32Modulus 							; else do it as integer.
.35b1					_IsFPOperation:
.35b1	8a		txa				txa 								; call the relevant fp routine
.35b2	a2 0a		ldx #$0a		ldx	#10
.35b4	20 16 28	jsr $2816		jsr	floatingpointHandler
.35b7	aa		tax				tax
.35b8	60		rts				rts
.35b9					XorHandler:
.35b9	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.35bc	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.35bf	b0 03		bcs $35c4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35c1	4c 05 3d	jmp $3d05			jmp 	MInt32Xor 							; else do it as integer.
.35c4					_IsFPOperation:
.35c4	8a		txa				txa 								; call the relevant fp routine
.35c5	a2 0a		ldx #$0a		ldx	#10
.35c7	20 16 28	jsr $2816		jsr	floatingpointHandler
.35ca	aa		tax				tax
.35cb	60		rts				rts
.35cc					OrHandler:
.35cc	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.35cf	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.35d2	b0 03		bcs $35d7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35d4	4c ec 3c	jmp $3cec			jmp 	MInt32Or 							; else do it as integer.
.35d7					_IsFPOperation:
.35d7	8a		txa				txa 								; call the relevant fp routine
.35d8	a2 0a		ldx #$0a		ldx	#10
.35da	20 16 28	jsr $2816		jsr	floatingpointHandler
.35dd	aa		tax				tax
.35de	60		rts				rts
.35df					AndHandler:
.35df	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.35e2	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.35e5	b0 03		bcs $35ea			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35e7	4c d3 3c	jmp $3cd3			jmp 	MInt32And 							; else do it as integer.
.35ea					_IsFPOperation:
.35ea	8a		txa				txa 								; call the relevant fp routine
.35eb	a2 0a		ldx #$0a		ldx	#10
.35ed	20 16 28	jsr $2816		jsr	floatingpointHandler
.35f0	aa		tax				tax
.35f1	60		rts				rts
.35f2					ShlHandler:
.35f2	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.35f5	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.35f8	b0 03		bcs $35fd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.35fa	4c 73 36	jmp $3673			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.35fd					_IsFPOperation:
.35fd	8a		txa				txa 								; call the relevant fp routine
.35fe	a2 0a		ldx #$0a		ldx	#10
.3600	20 16 28	jsr $2816		jsr	floatingpointHandler
.3603	aa		tax				tax
.3604	60		rts				rts
.3605					ShrHandler:
.3605	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.3608	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.360b	b0 03		bcs $3610			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.360d	4c 76 36	jmp $3676			jmp 	MInt32ShiftRightX 							; else do it as integer.
.3610					_IsFPOperation:
.3610	8a		txa				txa 								; call the relevant fp routine
.3611	a2 0a		ldx #$0a		ldx	#10
.3613	20 16 28	jsr $2816		jsr	floatingpointHandler
.3616	aa		tax				tax
.3617	60		rts				rts
.3618					WordRefHandler:
.3618	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.361b	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.361e	b0 03		bcs $3623			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3620	4c 65 36	jmp $3665			jmp 	MInt32WordIndirect 							; else do it as integer.
.3623					_IsFPOperation:
.3623	8a		txa				txa 								; call the relevant fp routine
.3624	a2 0a		ldx #$0a		ldx	#10
.3626	20 16 28	jsr $2816		jsr	floatingpointHandler
.3629	aa		tax				tax
.362a	60		rts				rts
.362b					ByteRefHandler:
.362b	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.362e	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.3631	b0 03		bcs $3636			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3633	4c 69 36	jmp $3669			jmp 	MInt32ByteIndirect 							; else do it as integer.
.3636					_IsFPOperation:
.3636	8a		txa				txa 								; call the relevant fp routine
.3637	a2 0a		ldx #$0a		ldx	#10
.3639	20 16 28	jsr $2816		jsr	floatingpointHandler
.363c	aa		tax				tax
.363d	60		rts				rts
.363e					PowerHandler:
.363e	20 1b 37	jsr $371b			jsr 	DereferenceTwo
.3641	20 1e 35	jsr $351e			jsr 	BinaryProcess 				; check to see if either is float
.3644	b0 03		bcs $3649			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3646	4c 51 36	jmp $3651			jmp 	PowerInteger 							; else do it as integer.
.3649					_IsFPOperation:
.3649	8a		txa				txa 								; call the relevant fp routine
.364a	a2 18		ldx #$18		ldx	#24
.364c	20 16 28	jsr $2816		jsr	floatingpointHandler
.364f	aa		tax				tax
.3650	60		rts				rts
.3651					PowerInteger:
.3651	20 38 35	jsr $3538			jsr 	BPMakeBothFloat				; make them float.
.3654	8a		txa				txa
.3655	a2 18		ldx #$18		ldx	#24
.3657	20 16 28	jsr $2816		jsr	floatingpointHandler
.365a	a2 14		ldx #$14		ldx	#20
.365c	20 16 28	jsr $2816		jsr	floatingpointHandler
.365f	aa		tax				tax
.3660	a9 00		lda #$00			lda 	#0 							; make type integer
.3662	95 90		sta $90,x			sta 	esType,x
.3664	60		rts				rts
.3665					Mint32WordIndirect:
.3665	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.3667	d0 02		bne $366b			bne 	Min32Indirect
.3669					Mint32ByteIndirect:
.3669	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.366b					Min32Indirect:
.366b	48		pha				pha 								; save the indirection
.366c	20 5f 3e	jsr $3e5f			jsr 	MInt32Add 					; add a!b a?b
.366f	68		pla				pla 								; and set the type to reference.
.3670	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.3672	60		rts				rts
.3673					Mint32ShiftLeftX:
.3673	18		clc				clc 								; CC shift left
.3674	90 01		bcc $3677			bcc 	Mint32Shift
.3676					Mint32ShiftRightX:
.3676	38		sec				sec 								; CS shift right
.3677					Mint32Shift:
.3677	08		php				php 								; save carry flag on stack.
.3678	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.367a	15 a9		ora $a9,x			ora 	esInt2+1,x
.367c	15 b1		ora $b1,x			ora 	esInt3+1,x
.367e	d0 1e		bne $369e			bne 	_MShiftZero
.3680	b5 99		lda $99,x			lda 	esInt0+1,x
.3682	c9 20		cmp #$20			cmp 	#32
.3684	b0 18		bcs $369e			bcs 	_MShiftZero
.3686					_MShiftLoop:
.3686	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.3688	f0 12		beq $369c			beq 	_MShiftExit
.368a	d6 99		dec $99,x			dec 	esInt0+1,x
.368c	28		plp				plp 								; restore and save carry
.368d	08		php				php
.368e	90 06		bcc $3696			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.3690	20 97 3f	jsr $3f97			jsr 	Mint32ShiftRight
.3693	4c 86 36	jmp $3686			jmp 	_MShiftLoop
.3696					_MShiftLeft:
.3696	20 8e 3f	jsr $3f8e			jsr 	Mint32ShiftLeft
.3699	4c 86 36	jmp $3686			jmp 	_MShiftLoop
.369c					_MShiftExit:
.369c	28		plp				plp	 								; throw saved carry and exit
.369d	60		rts				rts
.369e					_MShiftZero:
.369e	4c 79 3f	jmp $3f79			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.36a1					PerformComparison:
.36a1	20 1b 37	jsr $371b			jsr 	DereferenceTwo 				; make both values.
.36a4	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.36a6	35 91		and $91,x			and 	esType+1,x
.36a8	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.36a9	30 1d		bmi $36c8			bmi 	_PCIsString
.36ab	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.36ad	15 91		ora $91,x			ora 	esType+1,x
.36af	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.36b0	30 22		bmi $36d4			bmi 	_PCError
.36b2	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.36b4	f0 0f		beq $36c5			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.36b6	20 38 35	jsr $3538			jsr 	BPMakeBothFloat 			; make both float
.36b9	8a		txa				txa
.36ba	a2 06		ldx #$06		ldx	#6
.36bc	20 16 28	jsr $2816		jsr	floatingpointHandler
.36bf	86 32		stx $32				stx 	tempShort 					; save result
.36c1	aa		tax				tax
.36c2	a5 32		lda $32				lda 	tempShort
.36c4	60		rts				rts
.36c5					_PCIsInteger:
.36c5	4c 1e 3d	jmp $3d1e			jmp 	MInt32Compare
.36c8					_PCIsString:
.36c8	8a		txa				txa 								; A has SP
.36c9	a2 0a		ldx #$0a		ldx	#10
.36cb	20 10 43	jsr $4310		jsr	stringHandler
.36ce	86 32		stx $32				stx 	tempShort 					; save result
.36d0	aa		tax				tax 								; put SP back in X and get result.
.36d1	a5 32		lda $32				lda 	tempShort
.36d3	60		rts				rts
.36d4					_PCError:
.36d4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.36d6	20 27 15	jsr $1527		jsr	errorHandler
.36d9					CompareEquals:
.36d9	20 a1 36	jsr $36a1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36dc	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.36de	f0 35		beq $3715			beq  	CompareTrue
.36e0	4c 18 37	jmp $3718			jmp 	CompareFalse
.36e3					CompareLess:
.36e3	20 a1 36	jsr $36a1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36e6	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.36e8	f0 2b		beq $3715			beq  	CompareTrue
.36ea	4c 18 37	jmp $3718			jmp 	CompareFalse
.36ed					CompareGreater:
.36ed	20 a1 36	jsr $36a1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36f0	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.36f2	f0 21		beq $3715			beq  	CompareTrue
.36f4	4c 18 37	jmp $3718			jmp 	CompareFalse
.36f7					CompareNotEquals:
.36f7	20 a1 36	jsr $36a1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.36fa	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.36fc	d0 17		bne $3715			bne  	CompareTrue
.36fe	4c 18 37	jmp $3718			jmp 	CompareFalse
.3701					CompareGreaterEq:
.3701	20 a1 36	jsr $36a1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3704	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3706	d0 0d		bne $3715			bne  	CompareTrue
.3708	4c 18 37	jmp $3718			jmp 	CompareFalse
.370b					CompareLessEq:
.370b	20 a1 36	jsr $36a1			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.370e	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3710	d0 03		bne $3715			bne  	CompareTrue
.3712	4c 18 37	jmp $3718			jmp 	CompareFalse
.3715					CompareTrue:
.3715	4c 75 3f	jmp $3f75			jmp 	MInt32True
.3718					CompareFalse:
.3718	4c 79 3f	jmp $3f79			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.371b					DereferenceTwo:
.371b	e8		inx				inx
.371c	20 20 37	jsr $3720			jsr 	DereferenceOne
.371f	ca		dex				dex
.3720					DereferenceOne:
.3720	b5 90		lda $90,x			lda 	esType,x
.3722	10 3b		bpl $375f			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.3724	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.3725	b0 39		bcs $3760			bcs 	_DRFloatDeReference
.3727	5a		phy				phy
.3728	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.372a	85 2a		sta $2a				sta 	temp0
.372c	b5 a0		lda $a0,x			lda 	esInt1,x
.372e	85 2b		sta $2b				sta 	temp0+1
.3730	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.3732	95 a0		sta $a0,x			sta 	esInt1,x
.3734	95 a8		sta $a8,x			sta 	esInt2,x
.3736	95 b0		sta $b0,x			sta 	esInt3,x
.3738	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.373a	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.373c	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.373d	30 0d		bmi $374c			bmi 	_DeRefString 				; string, 2 bytes only
.373f	d0 11		bne $3752			bne 	_DeRefByte 					; byte 1 byte only
.3741					_DeRefLong:
.3741	a0 03		ldy #$03			ldy 	#3
.3743	b1 2a		lda ($2a),y			lda 	(temp0),y
.3745	95 b0		sta $b0,x			sta 	esInt3,x
.3747	88		dey				dey
.3748	b1 2a		lda ($2a),y			lda 	(temp0),y
.374a	95 a8		sta $a8,x			sta 	esInt2,x
.374c					_DeRefString:
.374c	a0 01		ldy #$01			ldy 	#1
.374e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3750	95 a0		sta $a0,x			sta 	esInt1,x
.3752					_DeRefByte:
.3752	a0 00		ldy #$00			ldy 	#0
.3754	b1 2a		lda ($2a),y			lda 	(temp0),y
.3756	95 98		sta $98,x			sta 	esInt0,x
.3758	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.375a	29 40		and #$40			and 	#$40
.375c	95 90		sta $90,x			sta 	esType,x
.375e	7a		ply				ply
.375f					_DRNotReference
.375f	60		rts				rts
.3760					_DRFloatDereference:
.3760	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 					; address to deref in temp0
.3763	8a		txa				txa
.3764	a2 1e		ldx #$1e		ldx	#30
.3766	20 16 28	jsr $2816		jsr	floatingpointHandler
.3769	aa		tax				tax
.376a	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.376c	95 90		sta $90,x			sta 	esType,x
.376e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.376f					EvaluateLevel:
.376f	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.3771	b0 1e		bcs $3791			bcs 	_ELStack
.3773	48		pha				pha 								; save precedence level.
.3774	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.3776	95 98		sta $98,x			sta 	esInt0,x
.3778	95 a0		sta $a0,x			sta 	esInt1,x
.377a	95 a8		sta $a8,x			sta 	esInt2,x
.377c	95 b0		sta $b0,x			sta 	esInt3,x
.377e	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.3780	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.3782	30 26		bmi $37aa			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.3784	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.3785	30 0f		bmi $3796			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.3787	8a		txa				txa 								; stack level in X
.3788	a2 02		ldx #$02		ldx	#2
.378a	20 5c 4f	jsr $4f5c		jsr	variableHandler
.378d	aa		tax				tax
.378e	4c d3 37	jmp $37d3			jmp		_ELHasTerm
.3791					_ELStack:
.3791	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.3793	20 27 15	jsr $1527		jsr	errorHandler
.3796					_ELIsConstant:
.3796	4a		lsr a				lsr 	a 							; get the value back
.3797	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3799	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.379b					_ELCheckNext:
.379b	c8		iny				iny 								; look at next
.379c	b1 28		lda ($28),y			lda 	(codePtr),y
.379e	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.37a0	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.37a2	b0 2f		bcs $37d3			bcs 	_ELHasTerm 					; done getting the constant.
.37a4	20 6c 38	jsr $386c			jsr 	ELShiftByteIn 				; shift byte into position.
.37a7	4c 9b 37	jmp $379b			jmp 	_ELCheckNext
.37aa					_ELIsToken:
.37aa	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.37ac	f0 0f		beq $37bd			beq 	_ELIsString
.37ae	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.37b0	d0 5f		bne $3811			bne 	_ELCheckUnary
.37b2	8a		txa				txa 								; put X into A
.37b3	c8		iny				iny 								; skip over the float marker
.37b4	a2 1a		ldx #$1a		ldx	#26
.37b6	20 16 28	jsr $2816		jsr	floatingpointHandler
.37b9	aa		tax				tax 								; restore X
.37ba	4c d3 37	jmp $37d3			jmp 	_ELHasTerm
.37bd					_ELIsString:
.37bd	98		tya				tya 								; address of string is codePtr+y+1
.37be	38		sec				sec
.37bf	65 28		adc $28				adc 	codePtr
.37c1	95 98		sta $98,x			sta 	esInt0,x
.37c3	a5 29		lda $29				lda 	codePtr+1
.37c5	69 00		adc #$00			adc 	#0
.37c7	95 a0		sta $a0,x			sta 	esInt1,x
.37c9	a9 40		lda #$40			lda 	#$40 						; set type to string value
.37cb	95 90		sta $90,x			sta 	esType,x
.37cd	c8		iny				iny 								; skip over string.
.37ce	98		tya				tya
.37cf	38		sec				sec									; +1 for the length itself.
.37d0	71 28		adc ($28),y			adc 	(codePtr),y
.37d2	a8		tay				tay 								; and fall through to term loop code.
.37d3					_ELHasTerm:
.37d3	b1 28		lda ($28),y			lda 	(codePtr),y
.37d5	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.37d7	90 04		bcc $37dd			bcc 	_ELPopExit
.37d9	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.37db	90 02		bcc $37df			bcc 	_ELHasBinaryTerm
.37dd					_ELPopExit:
.37dd	68		pla				pla
.37de					_ELExit:
.37de	60		rts				rts
.37df					_ELHasBinaryTerm:
.37df	84 32		sty $32				sty 	tempShort 					; save position
.37e1	a8		tay				tay 								; use token as an index and get the precedence.
.37e2	b9 14 38	lda $3814,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.37e5	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.37e7	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.37e9	68		pla				pla 								; restore current level.
.37ea	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.37ec	b0 f0		bcs $37de			bcs 	_ELExit
.37ee	48		pha				pha 								; save current level back on the stack.
.37ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.37f1	48		pha				pha
.37f2	c8		iny				iny
.37f3	e8		inx				inx 								; calculate the RHS at the operator precedence.
.37f4	a5 32		lda $32				lda 	tempShort
.37f6	20 6f 37	jsr $376f			jsr 	EvaluateLevel
.37f9	ca		dex				dex
.37fa	68		pla				pla 								; get the operator back out.
.37fb					_ELExecuteA:
.37fb	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.37fd	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.37fe	aa		tax				tax
.37ff	bd 2a 34	lda $342a,x			lda 	Group0Vectors,x
.3802	85 2a		sta $2a				sta 	temp0
.3804	bd 2b 34	lda $342b,x			lda 	Group0Vectors+1,x
.3807	85 2b		sta $2b				sta 	temp0+1
.3809	a6 32		ldx $32				ldx 	tempShort
.380b	20 58 38	jsr $3858			jsr 	_ELCallTemp0
.380e	4c d3 37	jmp $37d3			jmp 	_ELHasTerm 					; and loop back round.
.3811					_ELCheckUnary:
.3811	c8		iny				iny 								; skip over token.
.3812	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3814	f0 19		beq $382f			beq 	_ELMinus
.3816	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3818	f0 2c		beq $3846			beq 	_ELIndirect
.381a	c9 98		cmp #$98			cmp 	#TKW_QMARK
.381c	f0 28		beq $3846			beq 	_ELIndirect
.381e	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.3820	f0 39		beq $385b			beq 	_ELExtension
.3822	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3824	90 04		bcc $382a			bcc 	_ELUSyntax
.3826	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3828	90 d1		bcc $37fb			bcc 	_ELExecuteA 				; if so do that token.
.382a					_ELUSyntax:
.382a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.382c	20 27 15	jsr $1527		jsr	errorHandler
.382f					_ELMinus:
.382f	20 c1 38	jsr $38c1			jsr 	EvaluateNumericTerm 		; get a number to negate.
.3832	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.3834	f0 0a		beq $3840			beq 	_ELMinusInteger
.3836	8a		txa				txa
.3837	a2 0e		ldx #$0e		ldx	#14
.3839	20 16 28	jsr $2816		jsr	floatingpointHandler
.383c	aa		tax				tax
.383d	4c d3 37	jmp $37d3			jmp 	_ELHasTerm
.3840					_ELMinusInteger:
.3840	20 33 3f	jsr $3f33			jsr 	MInt32Negate 				; do int negate
.3843	4c d3 37	jmp $37d3			jmp 	_ELHasTerm
.3846					_ELIndirect:
.3846	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.3847	20 ca 38	jsr $38ca			jsr 	EvaluateIntegerTerm 		; integer address
.384a	68		pla				pla
.384b	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.384d	f0 02		beq $3851			beq 	_ELHaveModifier
.384f	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.3851					_ELHaveModifier:
.3851	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.3853	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.3855	4c d3 37	jmp $37d3			jmp 	_ELHasTerm
.3858					_ELCallTemp0:
.3858	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.385b					_ELExtension:
.385b	8a		txa				txa 								; stack pos in A
.385c	20 8a 18	jsr $188a		jsr	extensionHandler
.385f	aa		tax				tax 								; restore stack
.3860	4c d3 37	jmp $37d3			jmp 	_ELHasTerm
.3863					UnaryParenthesis:
.3863	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.3865	20 6f 37	jsr $376f			jsr 	EvaluateLevel
.3868	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; check for )
.386b	60		rts				rts
.386c					ELShiftByteIn:
.386c	48		pha				pha 								; save bits to shift in.
.386d	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.386f	48		pha				pha
.3870	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.3872	95 b0		sta $b0,x			sta 	esInt3,x
.3874	b5 a0		lda $a0,x			lda 	esInt1,x
.3876	95 a8		sta $a8,x			sta 	esInt2,x
.3878	b5 98		lda $98,x			lda 	esInt0,x
.387a	95 a0		sta $a0,x			sta 	esInt1,x
.387c	a9 00		lda #$00			lda 	#0
.387e	95 98		sta $98,x			sta 	esInt0,x
.3880	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.3881	29 03		and #$03			and 	#3 							; only want lower 2 bits
.3883	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.3885					_ELShiftLoop:
.3885	4a		lsr a				lsr 	a
.3886	76 b0		ror $b0,x			ror 	esInt3,x
.3888	76 a8		ror $a8,x			ror 	esInt2,x
.388a	76 a0		ror $a0,x			ror 	esInt1,x
.388c	76 98		ror $98,x			ror 	esInt0,x
.388e	c9 01		cmp #$01			cmp 	#1
.3890	d0 f3		bne $3885			bne 	_ELShiftLoop
.3892	68		pla				pla 								; get original 6 bit value and OR in.
.3893	29 3f		and #$3f			and 	#$3F
.3895	15 98		ora $98,x			ora 	esInt0,x
.3897	95 98		sta $98,x			sta 	esInt0,x
.3899	60		rts				rts
.389a					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>389a	01					.byte	$01			; $86 and
>389b	01					.byte	$01			; $87 or
>389c	01					.byte	$01			; $88 xor
>389d	02					.byte	$02			; $89 >=
>389e	02					.byte	$02			; $8a <=
>389f	02					.byte	$02			; $8b >
>38a0	02					.byte	$02			; $8c <
>38a1	02					.byte	$02			; $8d =
>38a2	02					.byte	$02			; $8e <>
>38a3	03					.byte	$03			; $8f +
>38a4	03					.byte	$03			; $90 -
>38a5	04					.byte	$04			; $91 >>
>38a6	04					.byte	$04			; $92 <<
>38a7	04					.byte	$04			; $93 *
>38a8	04					.byte	$04			; $94 /
>38a9	04					.byte	$04			; $95 mod
>38aa	05					.byte	$05			; $96 ^
>38ab	06					.byte	$06			; $97 !
>38ac	06					.byte	$06			; $98 ?
>38ad	82					.byte	$82			; $99 repeat
>38ae	82					.byte	$82			; $9a while
>38af	82					.byte	$82			; $9b for
>38b0	82					.byte	$82			; $9c if
>38b1	82					.byte	$82			; $9d defproc
>38b2	80					.byte	$80			; $9e until
>38b3	80					.byte	$80			; $9f wend
>38b4	80					.byte	$80			; $a0 next
>38b5	80					.byte	$80			; $a1 then
>38b6	80					.byte	$80			; $a2 endif
>38b7	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.38b8					EvaluateTerm:
.38b8	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.38ba	20 6f 37	jsr $376f			jsr 	EvaluateLevel
.38bd	20 20 37	jsr $3720			jsr 	DereferenceOne
.38c0	60		rts				rts
.38c1					EvaluateNumericTerm:
.38c1	20 b8 38	jsr $38b8			jsr 	EvaluateTerm
.38c4	b5 90		lda $90,x			lda 	esType,x
.38c6	0a		asl a				asl 	a 							; see if it's a string.
.38c7	30 09		bmi $38d2			bmi 	ENTType
.38c9	60		rts				rts
.38ca					EvaluateIntegerTerm:
.38ca	20 b8 38	jsr $38b8			jsr 	EvaluateTerm
.38cd	b5 90		lda $90,x			lda 	esType,x
.38cf	d0 01		bne $38d2			bne 	ENTType
.38d1	60		rts				rts
.38d2					ENTType:
.38d2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.38d4	20 27 15	jsr $1527		jsr	errorHandler
.38d7					EvaluateRoot:
.38d7	a2 00		ldx #$00			ldx 	#0
.38d9					Evaluate:
.38d9	a9 00		lda #$00			lda 	#0
.38db	20 6f 37	jsr $376f			jsr 	EvaluateLevel
.38de	20 20 37	jsr $3720			jsr 	DereferenceOne
.38e1	60		rts				rts
.38e2					EvaluateNumeric:
.38e2	20 d9 38	jsr $38d9			jsr 	Evaluate
.38e5	b5 90		lda $90,x			lda 	esType,x
.38e7	0a		asl a				asl 	a 							; see if it's a string.
.38e8	30 e8		bmi $38d2			bmi 	ENTType
.38ea	4a		lsr a				lsr 	a 							; shift float flag into carry.
.38eb	4a		lsr a				lsr 	a
.38ec	60		rts				rts
.38ed					EvaluateString:
.38ed	20 d9 38	jsr $38d9			jsr 	Evaluate
.38f0	b5 90		lda $90,x			lda 	esType,x
.38f2	0a		asl a				asl 	a 							; see if it's a string.
.38f3	10 dd		bpl $38d2			bpl 	ENTType
.38f5	60		rts				rts
.38f6					EvaluateRootInteger:
.38f6	a2 00		ldx #$00			ldx 	#0
.38f8					EvaluateInteger:
.38f8	20 d9 38	jsr $38d9			jsr 	Evaluate
.38fb	b5 90		lda $90,x			lda 	esType,x
.38fd	d0 d3		bne $38d2			bne 	ENTType
.38ff	60		rts				rts
.3900					EvaluateSmallInteger:
.3900	20 f8 38	jsr $38f8			jsr 	EvaluateInteger
.3903	b5 a0		lda $a0,x			lda 	esInt1,x
.3905	15 a8		ora $a8,x			ora 	esInt2,x
.3907	15 b0		ora $b0,x			ora 	esInt3,x
.3909	d0 03		bne $390e			bne 	_ESIValue
.390b	b5 98		lda $98,x			lda 	esInt0,x
.390d	60		rts				rts
.390e					_ESIValue:
.390e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3910	20 27 15	jsr $1527		jsr	errorHandler
.3913					LinkEvaluate:
.3913	aa		tax				tax
.3914	20 d9 38	jsr $38d9			jsr 	Evaluate
.3917	8a		txa				txa
.3918	60		rts				rts
.3919					LinkEvaluateTerm:
.3919	aa		tax				tax
.391a	20 b8 38	jsr $38b8			jsr 	EvaluateTerm
.391d	8a		txa				txa
.391e	60		rts				rts
.391f					LinkEvaluateInteger:
.391f	aa		tax				tax
.3920	20 f8 38	jsr $38f8			jsr 	EvaluateInteger
.3923	8a		txa				txa
.3924	60		rts				rts
.3925					LinkEvaluateString:
.3925	aa		tax				tax
.3926	20 ed 38	jsr $38ed			jsr 	EvaluateString
.3929	8a		txa				txa
.392a	60		rts				rts
.392b					LinkEvaluateSmallInt:
.392b	aa		tax				tax
.392c	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger
.392f	8a		txa				txa
.3930	60		rts				rts
.3931					EvaluateReference:
.3931	ad ab 38	lda $38ab			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.3934	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.3935	e9 01		sbc #$01			sbc 	#1
.3937	20 6f 37	jsr $376f			jsr 	EvaluateLevel
.393a	b5 90		lda $90,x			lda 	esType,x
.393c	10 01		bpl $393f			bpl 	_ERFail
.393e	60		rts				rts
.393f					_ERFail:
.393f	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.3941	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.3944					Event_Str:
.3944	20 e2 38	jsr $38e2			jsr 	EvaluateNumeric 			; get a number.
.3947	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.3949	d0 13		bne $395e			bne 	_ESFloat
.394b	20 9e 39	jsr $399e			jsr 	ConvertGetBase 				; get base, or default.
.394e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3950	85 2a		sta $2a				sta 	temp0
.3952	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3954	85 2b		sta $2b				sta 	1+(temp0)
.3956	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3958	20 d1 3e	jsr $3ed1			jsr 	MInt32ToString 				; convert to string.
.395b	4c 6b 39	jmp $396b			jmp 	_ESCloneExit 				; clone and exit.
.395e					_ESFloat:
.395e	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; check closing )
.3961	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3964	8a		txa				txa
.3965	a2 16		ldx #$16		ldx	#22
.3967	20 16 28	jsr $2816		jsr	floatingpointHandler
.396a	aa		tax				tax
.396b					_ESCloneExit:
.396b	8a		txa				txa
.396c	a2 04		ldx #$04		ldx	#4
.396e	20 10 43	jsr $4310		jsr	stringHandler
.3971	aa		tax				tax
.3972	60		rts				rts
.3973					UnaryVal:
.3973	38		sec				sec 								; Carry set to return value
.3974	b0 01		bcs $3977			bcs 	ValueMain
.3976					UnaryIsVal:
.3976	18		clc				clc									; Carry clear to return legitimacy
.3977					ValueMain:
.3977	08		php				php 								; save results (CS is value, CC is validation)
.3978	20 ed 38	jsr $38ed			jsr 	EvaluateString
.397b	20 9e 39	jsr $399e			jsr 	ConvertGetBase 				; get base, if any.
.397e	5a		phy				phy
.397f	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.3982	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.3984	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.3986	20 ec 3d	jsr $3dec			jsr 	MInt32FromString 			; convert it back from a string.
.3989	b0 0b		bcs $3996			bcs 	_VMSuccess 					; successfully converted.
.398b	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.398d	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.398f	f0 00		beq $3991			beq 	_VMFailed 	 				; so we failed.
.3991					_VMFailed:
.3991	7a		ply				ply
.3992	28		plp				plp
.3993	4c 79 3f	jmp $3f79			jmp 	MInt32False 				; return 0 whatever.
.3996					_VMSuccess:
.3996	7a		ply				ply
.3997	28		plp				plp 								; if CS the it was val() so we want the value.
.3998	b0 03		bcs $399d			bcs 	_VMExit
.399a	4c 75 3f	jmp $3f75			jmp 	MInt32True 					; otherwise return true as successful.
.399d					_VMExit:
.399d	60		rts				rts
.399e					ConvertGetBase:
.399e	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.39a0	95 99		sta $99,x			sta 	esInt0+1,x
.39a2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.39a4	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.39a6	d0 0e		bne $39b6			bne 	_CGBDone 					; not found, should be )
.39a8	e8		inx				inx 								; next level
.39a9	c8		iny				iny 								; skip comma.
.39aa	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger		; evaluate the base.
.39ad	ca		dex				dex
.39ae	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.39b0	90 08		bcc $39ba			bcc 	_CGBValue 					; (it should work as high as 37)
.39b2	c9 11		cmp #$11			cmp 	#17
.39b4	b0 04		bcs $39ba			bcs 	_CGBValue
.39b6					_CGBDone:
.39b6	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.39b9	60		rts				rts
.39ba					_CGBValue:
.39ba	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.39bc	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.39bf					EventFunction:
.39bf	20 31 39	jsr $3931			jsr 	EvaluateReference			; get the variable reference that tracks the event
.39c2	b5 90		lda $90,x			lda 	esType,x
.39c4	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.39c6	d0 56		bne $3a1e			bne 	_EFType
.39c8	20 f7 3f	jsr $3ff7			jsr 	CheckComma
.39cb	e8		inx				inx
.39cc	20 f8 38	jsr $38f8			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.39cf	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; finish off with the right bracket
.39d2	ca		dex				dex
.39d3	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.39d5	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.39d7	15 a8		ora $a8,x			ora 	esInt2,x
.39d9	15 b0		ora $b0,x			ora 	esInt3,x
.39db	d0 3c		bne $3a19			bne 	_EFValue
.39dd	5a		phy				phy
.39de	da		phx				phx
.39df	a2 1c		ldx #$1c		ldx	#28
.39e1	20 05 15	jsr $1505		jsr	deviceHandler
.39e4	84 2d		sty $2d				sty 	temp1+1
.39e6	85 2c		sta $2c				sta 	temp1
.39e8	fa		plx				plx
.39e9	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.39ec	a0 03		ldy #$03			ldy 	#3							; if -ve
.39ee	b1 2a		lda ($2a),y			lda 	(temp0),y
.39f0	30 22		bmi $3a14			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.39f2	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.39f4	b1 2a		lda ($2a),y			lda 	(temp0),y
.39f6	c8		iny				iny
.39f7	11 2a		ora ($2a),y			ora 	(temp0),y
.39f9	f0 16		beq $3a11			beq 	_EFInitialise 				; if so, initialise the value but return false.
.39fb	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.39fd	38		sec				sec
.39fe	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a00	e5 2c		sbc $2c				sbc 	temp1
.3a02	c8		iny				iny
.3a03	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a05	e5 2d		sbc $2d				sbc 	temp1+1
.3a07	10 0b		bpl $3a14			bpl 	_EFFail 					; if trigger >= timer then return False
.3a09	20 23 3a	jsr $3a23			jsr 	SetEventTimer 				; reset the timer for next time.
.3a0c	20 75 3f	jsr $3f75			jsr	 	MInt32True 					; and treutn true as fired.
.3a0f	7a		ply				ply
.3a10	60		rts				rts
.3a11					_EFInitialise:
.3a11	20 23 3a	jsr $3a23			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3a14					_EFFail:
.3a14	7a		ply				ply
.3a15	20 79 3f	jsr $3f79			jsr 	MInt32False
.3a18	60		rts				rts
.3a19					_EFValue:
.3a19	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3a1b	20 27 15	jsr $1527		jsr	errorHandler
.3a1e					_EFType:
.3a1e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3a20	20 27 15	jsr $1527		jsr	errorHandler
.3a23					SetEventTimer:
.3a23	a0 00		ldy #$00			ldy 	#0
.3a25	18		clc				clc
.3a26	a5 2c		lda $2c				lda 	temp1
.3a28	75 99		adc $99,x			adc 	esInt0+1,x
.3a2a	91 2a		sta ($2a),y			sta		(temp0),y
.3a2c	c8		iny				iny
.3a2d	a5 2d		lda $2d				lda 	temp1+1
.3a2f	75 a1		adc $a1,x			adc 	esInt1+1,x
.3a31	91 2a		sta ($2a),y			sta		(temp0),y
.3a33	88		dey				dey
.3a34	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3a36	d0 04		bne $3a3c			bne 	_SETExit 					; zero means initialise.....
.3a38	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.3a3a	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.3a3c					_SETExit:
.3a3c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.3a3d					UnaryLen:
.3a3d	20 4b 3a	jsr $3a4b			jsr 	ULStart
.3a40					ULFinish:
.3a40	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.3a42	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.3a44	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit 				; write it out.
.3a47	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.3a4a	60		rts				rts
.3a4b	20 ed 38	jsr $38ed	ULStart:jsr 	EvaluateString
.3a4e	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3a50	85 2a		sta $2a				sta 	temp0
.3a52	b5 a0		lda $a0,x			lda 	esInt1,x
.3a54	85 2b		sta $2b				sta 	temp0+1
.3a56	84 32		sty $32				sty 	tempShort 					; get length
.3a58	a0 00		ldy #$00			ldy 	#0
.3a5a	60		rts				rts
.3a5b					UnaryAsc:
.3a5b	20 4b 3a	jsr $3a4b			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.3a5e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.3a60	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.3a61	c9 00		cmp #$00			cmp 	#0
.3a63	d0 db		bne $3a40			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.3a65	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3a67	20 27 15	jsr $1527		jsr	errorHandler
.3a6a					UnaryAbs:
.3a6a	20 e2 38	jsr $38e2			jsr 	EvaluateNumeric 			; some numeric value
.3a6d	b0 07		bcs $3a76			bcs 	_UAFloat 					; CS then float, so use that function
.3a6f	20 2e 3f	jsr $3f2e			jsr 	MInt32Absolute 				; int version
.3a72	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.3a75	60		rts				rts
.3a76					_UAFloat:
.3a76	8a		txa				txa 								; float version
.3a77	a2 02		ldx #$02		ldx	#2
.3a79	20 16 28	jsr $2816		jsr	floatingpointHandler
.3a7c	aa		tax				tax
.3a7d	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.3a80	60		rts				rts
.3a81					UnarySgn:
.3a81	20 e2 38	jsr $38e2			jsr 	EvaluateNumeric 			; same as above but sign of value
.3a84	b0 07		bcs $3a8d			bcs 	_USFloat
.3a86	20 66 3f	jsr $3f66			jsr 	MInt32Sign
.3a89	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.3a8c	60		rts				rts
.3a8d					_USFloat:
.3a8d	8a		txa				txa
.3a8e	a2 10		ldx #$10		ldx	#16
.3a90	20 16 28	jsr $2816		jsr	floatingpointHandler
.3a93	aa		tax				tax
.3a94	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.3a97	60		rts				rts
.3a98					UnaryPeek:
.3a98	20 c4 3a	jsr $3ac4			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.3a9b	4c b8 3a	jmp $3ab8			jmp 	PDLByte0
.3a9e					UnaryDeek:
.3a9e	20 c4 3a	jsr $3ac4			jsr 	PDLCode
.3aa1	4c b2 3a	jmp $3ab2			jmp 	PDLByte1
.3aa4					UnaryLeek:
.3aa4	20 c4 3a	jsr $3ac4			jsr 	PDLCode
.3aa7	a0 03		ldy #$03			ldy 	#3							; read 3-2
.3aa9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3aab	95 b0		sta $b0,x			sta 	esInt3,x
.3aad	88		dey				dey
.3aae	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ab0	95 a8		sta $a8,x			sta 	esInt2,x
.3ab2					PDLByte1:
.3ab2	a0 01		ldy #$01			ldy 	#1
.3ab4	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ab6	95 a0		sta $a0,x			sta 	esInt1,x
.3ab8					PDLByte0:
.3ab8	a0 00		ldy #$00			ldy 	#0
.3aba	b1 2a		lda ($2a),y			lda 	(temp0),y
.3abc	95 98		sta $98,x			sta 	esInt0,x
.3abe	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3ac0	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; check right and return
.3ac3	60		rts				rts
.3ac4					PDLCode:
.3ac4	20 f8 38	jsr $38f8			jsr 	EvaluateInteger 			; some address
.3ac7	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3ac9	85 2a		sta $2a				sta 	temp0
.3acb	b5 a0		lda $a0,x			lda 	esInt1,x
.3acd	85 2b		sta $2b				sta 	temp0+1
.3acf	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3ad1	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3ad3	95 a8		sta $a8,x			sta 	esInt2,x
.3ad5	95 b0		sta $b0,x			sta 	esInt3,x
.3ad7	84 32		sty $32				sty 	tempShort 					; save Y
.3ad9	60		rts				rts
.3ada					Unary_Random:
.3ada	20 a9 3f	jsr $3fa9			jsr 	MInt32Random 				; generate random number.
.3add	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3adf	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3ae1	f0 08		beq $3aeb			beq 	_URExit
.3ae3	e8		inx				inx 								; load range 0..r-1 into +1
.3ae4	20 f8 38	jsr $38f8			jsr 	EvaluateInteger
.3ae7	ca		dex				dex
.3ae8	20 d1 3d	jsr $3dd1			jsr 	MInt32Modulus 				; calculate random % modulus
.3aeb					_URExit:
.3aeb	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; check right and return
.3aee	60		rts				rts
.3aef					Unary_Min:
.3aef	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3af1	d0 02		bne $3af5			bne 	UnaryMBody
.3af3					Unary_Max:
.3af3	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3af5					UnaryMBody:
.3af5	48		pha				pha 								; save comparator on stack, shows min or max
.3af6	20 d9 38	jsr $38d9			jsr 	Evaluate 					; get the first thing to check
.3af9					_UnaryMLoop:
.3af9	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.3afb	c8		iny				iny
.3afc	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3afe	f0 09		beq $3b09			beq 	_UnaryMExit
.3b00	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3b02	f0 07		beq $3b0b			beq 	_UnaryMCompare
.3b04	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3b06	20 27 15	jsr $1527		jsr	errorHandler
.3b09					_UnaryMExit:
.3b09	68		pla				pla 								; done so throw comparator and return.
.3b0a	60		rts				rts
.3b0b					_UnaryMCompare:
.3b0b	e8		inx				inx 								; get the 2nd thing to evaluate
.3b0c	20 d9 38	jsr $38d9			jsr 	Evaluate
.3b0f	ca		dex				dex
.3b10	20 a1 36	jsr $36a1			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3b13	85 32		sta $32				sta 	tempShort 					; save result
.3b15	68		pla				pla 								; get what we need
.3b16	48		pha				pha
.3b17	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.3b19	d0 de		bne $3af9			bne 	_UnaryMLoop 				; no, try another value.
.3b1b	20 79 3f	jsr $3f79			jsr 	MInt32False 				; promote 2nd to 1st.
.3b1e	20 5f 3e	jsr $3e5f			jsr 	MInt32Add
.3b21	4c f9 3a	jmp $3af9			jmp 	_UnaryMLoop
.3b24					Unary_Page:
.3b24	20 79 3f	jsr $3f79			jsr 	MInt32False 				; zero
.3b27	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.3b2a	95 98		sta $98,x			sta 	esInt0,x
.3b2c	ad c9 0a	lda $0ac9			lda 	basePage+1
.3b2f	95 a0		sta $a0,x			sta 	esInt1,x
.3b31	60		rts				rts
.3b32					UnaryReference:
.3b32	a9 0f		lda #$0f			lda 	#15
.3b34	20 6f 37	jsr $376f			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3b37	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.3b39	10 05		bpl $3b40			bpl 	UType
.3b3b	a9 00		lda #$00			lda 	#0 							; make it an integer
.3b3d	95 90		sta $90,x			sta 	esType,x
.3b3f	60		rts				rts
.3b40					UType:
.3b40	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3b42	20 27 15	jsr $1527		jsr	errorHandler
.3b45					UnaryHexMarker:
.3b45	4c ca 38	jmp $38ca			jmp 	EvaluateIntegerTerm
.3b48					UnaryComplement:
.3b48	20 ca 38	jsr $38ca			jsr 	EvaluateIntegerTerm
.3b4b	20 4d 3f	jsr $3f4d			jsr 	MInt32Not
.3b4e	60		rts				rts
.3b4f					UnaryIntToFloat:
.3b4f	20 e2 38	jsr $38e2			jsr 	EvaluateNumeric				; some number
.3b52	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.3b54	d0 0b		bne $3b61			bne 	_UIFExit
.3b56	8a		txa				txa 								; convert and set type
.3b57	a2 1c		ldx #$1c		ldx	#28
.3b59	20 16 28	jsr $2816		jsr	floatingpointHandler
.3b5c	aa		tax				tax
.3b5d	a9 01		lda #$01			lda 	#1
.3b5f	95 90		sta $90,x			sta 	esType,x
.3b61					_UIFExit:
.3b61	60		rts				rts
.3b62					UnaryFloatToInt:
.3b62	20 e2 38	jsr $38e2			jsr 	EvaluateNumeric 			; the number
.3b65	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.3b67	f0 0b		beq $3b74			beq 	_UFIExit
.3b69	8a		txa				txa 								; convert to int
.3b6a	a2 14		ldx #$14		ldx	#20
.3b6c	20 16 28	jsr $2816		jsr	floatingpointHandler
.3b6f	aa		tax				tax
.3b70	a9 00		lda #$00			lda 	#0 							; set type
.3b72	95 90		sta $90,x			sta 	esType,x
.3b74					_UFIExit:
.3b74	60		rts				rts
.3b75					UnaryAlloc:
.3b75	e8		inx				inx 								; evaluate memory required
.3b76	20 f8 38	jsr $38f8			jsr 	EvaluateInteger
.3b79	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.3b7c	ca		dex				dex
.3b7d	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3b7f	15 b1		ora $b1,x			ora 	esInt3+1,x
.3b81	d0 1d		bne $3ba0			bne 	_UABadValue
.3b83	20 79 3f	jsr $3f79			jsr 	MInt32False					; zero return.
.3b86	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3b88	95 a0		sta $a0,x			sta 	esInt1,x
.3b8a	a5 35		lda $35				lda 	lowMemory
.3b8c	95 98		sta $98,x			sta 	esInt0,x
.3b8e	18		clc				clc 								; add alloc required.
.3b8f	75 99		adc $99,x			adc 	esInt0+1,x
.3b91	85 35		sta $35				sta 	lowMemory
.3b93	a5 36		lda $36				lda 	lowMemory+1
.3b95	75 a1		adc $a1,x			adc 	esInt1+1,x
.3b97	85 36		sta $36				sta 	lowMemory+1
.3b99	b0 05		bcs $3ba0			bcs		_UABadValue 				; overflow definitely bad.
.3b9b	c5 34		cmp $34				cmp 	highMemory+1
.3b9d	b0 01		bcs $3ba0			bcs 	_UABadValue 				; out of memory bad.
.3b9f	60		rts				rts
.3ba0					_UABadValue:
.3ba0	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3ba2	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3ba5					UnaryTimer:
.3ba5	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; no parameters
.3ba8	5a		phy				phy
.3ba9	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero 					; zero result
.3bac	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3bae	a2 1c		ldx #$1c		ldx	#28
.3bb0	20 05 15	jsr $1505		jsr	deviceHandler
.3bb3	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3bb5	95 98		sta $98,x			sta 	esInt0,x
.3bb7	98		tya				tya
.3bb8	95 a0		sta $a0,x			sta 	esInt1,x
.3bba	7a		ply				ply
.3bbb	60		rts				rts
.3bbc					UnaryInkey:
.3bbc	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.3bbf	86 2a		stx $2a				stx 	temp0
.3bc1	a2 08		ldx #$08		ldx	#8
.3bc3	20 05 15	jsr $1505		jsr	deviceHandler
.3bc6	a6 2a		ldx $2a				ldx 	temp0
.3bc8	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit
.3bcb	60		rts				rts
.3bcc					UnaryGet:
.3bcc	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.3bcf	da		phx				phx
.3bd0					_UGLoop:
.3bd0	a2 18		ldx #$18		ldx	#24
.3bd2	20 05 15	jsr $1505		jsr	deviceHandler
.3bd5	a2 08		ldx #$08		ldx	#8
.3bd7	20 05 15	jsr $1505		jsr	deviceHandler
.3bda	c9 00		cmp #$00			cmp 	#0
.3bdc	f0 f2		beq $3bd0			beq 	_UGLoop
.3bde	85 32		sta $32				sta 	tempShort
.3be0	fa		plx				plx
.3be1	a5 32		lda $32				lda 	tempShort
.3be3	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit
.3be6	60		rts				rts
.3be7					UnaryGetString:
.3be7	20 cc 3b	jsr $3bcc			jsr 	UnaryGet
.3bea					UGSDoChr:
.3bea	4c 37 3c	jmp $3c37			jmp 	ChrCode
.3bed					UnaryInkeyString:
.3bed	20 bc 3b	jsr $3bbc			jsr 	UnaryInkey
.3bf0	b5 98		lda $98,x			lda 	esInt0,x
.3bf2	d0 f6		bne $3bea			bne 	UGSDoChr
.3bf4	8a		txa				txa
.3bf5	a2 08		ldx #$08		ldx	#8
.3bf7	20 10 43	jsr $4310		jsr	stringHandler
.3bfa	aa		tax				tax
.3bfb	60		rts				rts
.3bfc					UnarySys:
.3bfc	20 f8 38	jsr $38f8			jsr 	EvaluateInteger 				; get the address
.3bff	20 ea 3f	jsr $3fea			jsr 	CheckRightParen
.3c02	20 fa 2c	jsr $2cfa			jsr 	TOSToTemp0 						; copy call address to temp0
.3c05	da		phx				phx
.3c06	5a		phy				phy
.3c07	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3c0a	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3c0d	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3c10	20 1d 3c	jsr $3c1d			jsr 	_CallTemp0
.3c13	85 32		sta $32				sta 	tempShort 						; restore YX
.3c15	7a		ply				ply
.3c16	fa		plx				plx
.3c17	a5 32		lda $32				lda 	tempShort
.3c19	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit 					; return result.
.3c1c	60		rts				rts
.3c1d					_CallTemp0:
.3c1d	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3c20					UnaryMem:
.3c20	20 79 3f	jsr $3f79			jsr 	MInt32False 					; set to false (e.g. 0)
.3c23	38		sec				sec
.3c24	a5 33		lda $33				lda 	highMemory 						; calculate value
.3c26	e5 35		sbc $35				sbc 	lowMemory
.3c28	95 98		sta $98,x			sta 	esInt0,x
.3c2a	a5 34		lda $34				lda 	highMemory+1
.3c2c	e5 36		sbc $36				sbc 	lowMemory+1
.3c2e	95 a0		sta $a0,x			sta 	esInt1,x
.3c30	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3c31					ExecChr:
.3c31	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger		; character number 0-255
.3c34	20 ea 3f	jsr $3fea			jsr 	CheckRightParen				; right bracket
.3c37					ChrCode:
.3c37	5a		phy				phy
.3c38	8a		txa				txa 								; A = stack
.3c39	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.3c3b	a2 02		ldx #$02		ldx	#2
.3c3d	20 10 43	jsr $4310		jsr	stringHandler
.3c40	aa		tax				tax 								; X = stack
.3c41	7a		ply				ply
.3c42	60		rts				rts
.3c43					ExecLower:
.3c43	38		sec				sec 								; set carry is lower
.3c44	b0 01		bcs $3c47			bcs 	ExecUpperLower
.3c46					ExecUpper:
.3c46	18		clc				clc 								; clear carry is upper
.3c47					ExecUpperLower:
.3c47	08		php				php 								; save carry
.3c48	20 ed 38	jsr $38ed			jsr 	EvaluateString 				; string to stack,X
.3c4b	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; check closing right bracket.
.3c4e	28		plp				plp 								; restore carry, save Y
.3c4f	5a		phy				phy
.3c50	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3c52	2a		rol a				rol 	a
.3c53	a8		tay				tay 								; now in Y
.3c54	8a		txa				txa 								; do the substring and exit.
.3c55	a2 0c		ldx #$0c		ldx	#12
.3c57	20 10 43	jsr $4310		jsr	stringHandler
.3c5a	aa		tax				tax
.3c5b	7a		ply				ply
.3c5c	60		rts				rts
.3c5d					ExecLeft:
.3c5d	20 ed 38	jsr $38ed			jsr 	EvaluateString 				; string to stack,X
.3c60	20 f7 3f	jsr $3ff7			jsr 	CheckComma
.3c63	e8		inx				inx
.3c64	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3c66	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit
.3c69	e8		inx				inx
.3c6a	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3c6d					ExecSubstring:
.3c6d	ca		dex				dex 								; fix up X
.3c6e	ca		dex				dex
.3c6f	20 ea 3f	jsr $3fea			jsr 	CheckRightParen 			; check closing right bracket.
.3c72	8a		txa				txa 								; do the substring and exit.
.3c73	a2 0e		ldx #$0e		ldx	#14
.3c75	20 10 43	jsr $4310		jsr	stringHandler
.3c78	aa		tax				tax
.3c79	60		rts				rts
.3c7a					ExecMid:
.3c7a	20 ed 38	jsr $38ed			jsr 	EvaluateString 				; string to stack,X
.3c7d	20 f7 3f	jsr $3ff7			jsr 	CheckComma
.3c80	e8		inx				inx
.3c81	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c84	c9 00		cmp #$00			cmp 	#0
.3c86	f0 15		beq $3c9d			beq 	_EMValue
.3c88	e8		inx				inx
.3c89	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3c8b	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit
.3c8e	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3c90	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3c92	f0 d9		beq $3c6d			beq 	ExecSubString
.3c94	20 f7 3f	jsr $3ff7			jsr 	CheckComma
.3c97	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3c9a	4c 6d 3c	jmp $3c6d			jmp 	ExecSubString
.3c9d					_EMValue:
.3c9d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3c9f	20 27 15	jsr $1527		jsr	errorHandler
.3ca2					ExecRight:
.3ca2	20 ed 38	jsr $38ed			jsr 	EvaluateString 				; string to stack,X
.3ca5	20 f7 3f	jsr $3ff7			jsr 	CheckComma
.3ca8	e8		inx				inx
.3ca9	20 00 39	jsr $3900			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3cac	ca		dex				dex
.3cad	5a		phy				phy
.3cae	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.3cb0	85 2a		sta $2a				sta 	temp0
.3cb2	b5 a0		lda $a0,x			lda 	esInt1,x
.3cb4	85 2b		sta $2b				sta 	temp0+1
.3cb6	a0 00		ldy #$00			ldy 	#0 							; point to length
.3cb8	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3cba	18		clc				clc 								; add 1.
.3cbb	69 01		adc #$01			adc 	#1
.3cbd	38		sec				sec
.3cbe	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.3cc0	f0 02		beq $3cc4			beq		_ERMake1 					; if zero, make it 1.
.3cc2	b0 02		bcs $3cc6			bcs		_EROkay
.3cc4					_ERMake1:
.3cc4	a9 01		lda #$01			lda 	#1 							; start position.
.3cc6					_EROkay:
.3cc6	e8		inx				inx 								; set start pos.
.3cc7	95 98		sta $98,x			sta 	esInt0,x
.3cc9	e8		inx				inx
.3cca	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3ccc	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit
.3ccf	7a		ply				ply
.3cd0	4c 6d 3c	jmp $3c6d			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3cd3					MInt32And:
.3cd3	b5 98		lda $98,x			lda 	esInt0,x
.3cd5	35 99		and $99,x			and 	esInt0+1,x
.3cd7	95 98		sta $98,x			sta 	esInt0,x
.3cd9	b5 a0		lda $a0,x			lda 	esInt1,x
.3cdb	35 a1		and $a1,x			and 	esInt1+1,x
.3cdd	95 a0		sta $a0,x			sta 	esInt1,x
.3cdf	b5 a8		lda $a8,x			lda 	esInt2,x
.3ce1	35 a9		and $a9,x			and 	esInt2+1,x
.3ce3	95 a8		sta $a8,x			sta 	esInt2,x
.3ce5	b5 b0		lda $b0,x			lda 	esInt3,x
.3ce7	35 b1		and $b1,x			and 	esInt3+1,x
.3ce9	95 b0		sta $b0,x			sta 	esInt3,x
.3ceb	60		rts				rts
.3cec					MInt32Or:
.3cec	b5 98		lda $98,x			lda 	esInt0,x
.3cee	15 99		ora $99,x			ora 	esInt0+1,x
.3cf0	95 98		sta $98,x			sta 	esInt0,x
.3cf2	b5 a0		lda $a0,x			lda 	esInt1,x
.3cf4	15 a1		ora $a1,x			ora 	esInt1+1,x
.3cf6	95 a0		sta $a0,x			sta 	esInt1,x
.3cf8	b5 a8		lda $a8,x			lda 	esInt2,x
.3cfa	15 a9		ora $a9,x			ora 	esInt2+1,x
.3cfc	95 a8		sta $a8,x			sta 	esInt2,x
.3cfe	b5 b0		lda $b0,x			lda 	esInt3,x
.3d00	15 b1		ora $b1,x			ora 	esInt3+1,x
.3d02	95 b0		sta $b0,x			sta 	esInt3,x
.3d04	60		rts				rts
.3d05					MInt32Xor:
.3d05	b5 98		lda $98,x			lda 	esInt0,x
.3d07	55 99		eor $99,x			eor 	esInt0+1,x
.3d09	95 98		sta $98,x			sta 	esInt0,x
.3d0b	b5 a0		lda $a0,x			lda 	esInt1,x
.3d0d	55 a1		eor $a1,x			eor 	esInt1+1,x
.3d0f	95 a0		sta $a0,x			sta 	esInt1,x
.3d11	b5 a8		lda $a8,x			lda 	esInt2,x
.3d13	55 a9		eor $a9,x			eor 	esInt2+1,x
.3d15	95 a8		sta $a8,x			sta 	esInt2,x
.3d17	b5 b0		lda $b0,x			lda 	esInt3,x
.3d19	55 b1		eor $b1,x			eor 	esInt3+1,x
.3d1b	95 b0		sta $b0,x			sta 	esInt3,x
.3d1d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.3d1e					MInt32Compare:
.3d1e	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.3d20	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3d22	d0 13		bne $3d37			bne 	MInt32Compare2
.3d24	b5 a0		lda $a0,x			lda 	esInt1,x
.3d26	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3d28	d0 0d		bne $3d37			bne 	MInt32Compare2
.3d2a	b5 a8		lda $a8,x			lda 	esInt2,x
.3d2c	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.3d2e	d0 07		bne $3d37			bne 	MInt32Compare2
.3d30	b5 b0		lda $b0,x			lda 	esInt3,x
.3d32	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.3d34	d0 01		bne $3d37			bne 	MInt32Compare2
.3d36	60		rts				rts
.3d37					MInt32Compare2:
.3d37	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.3d39	d5 99		cmp $99,x			cmp 	esInt0+1,x
.3d3b	b5 a0		lda $a0,x			lda		esInt1,x
.3d3d	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3d3f	b5 a8		lda $a8,x			lda		esInt2,x
.3d41	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3d43	b5 b0		lda $b0,x			lda		esInt3,x
.3d45	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3d47	50 02		bvc $3d4b			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3d49	49 80		eor #$80			eor 	#$80
.3d4b					_I32LNoOverflow
.3d4b	30 03		bmi $3d50			bmi 	MInt32CLess					; if -ve then return $FF
.3d4d	a9 01		lda #$01			lda 	#$01						; else return $01
.3d4f	60		rts				rts
.3d50					MInt32CLess:
.3d50	a9 ff		lda #$ff			lda 	#$FF
.3d52	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3d53					MInt32SDivide:
.3d53	98		tya				tya  								; save Y, which is the count of negations
.3d54	48		pha				pha
.3d55	a0 00		ldy #$00			ldy 	#0 							; zero count
.3d57	20 6f 3d	jsr $3d6f			jsr 	_MInt32SRemSign 			; unsign TOS
.3d5a	e8		inx				inx 								; unsign TOS+1
.3d5b	20 6f 3d	jsr $3d6f			jsr 	_MInt32SRemSign
.3d5e	ca		dex				dex
.3d5f	98		tya				tya 								; save sign count on stack
.3d60	48		pha				pha
.3d61	20 78 3d	jsr $3d78			jsr 	MInt32UDivide 				; unsigned division
.3d64	68		pla				pla 								; get sign count back
.3d65	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3d67	f0 03		beq $3d6c			beq 	_I32SNoNeg
.3d69	20 33 3f	jsr $3f33			jsr 	MInt32Negate
.3d6c					_I32SNoNeg:
.3d6c	68		pla				pla 								; restoe Y and exit
.3d6d	a8		tay				tay
.3d6e	60		rts				rts
.3d6f					_MInt32SRemSign:
.3d6f	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.3d71	10 04		bpl $3d77			bpl 	_MInt32SRSExit
.3d73	c8		iny				iny 								; increment the sign count
.3d74	20 33 3f	jsr $3f33			jsr 	MInt32Negate 				; negate the value.
.3d77					_MInt32SRSExit:
.3d77	60		rts				rts
.3d78					MInt32UDivide:
.3d78	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.3d7a	15 a1		ora $a1,x			ora 	esInt1+1,x
.3d7c	15 a2		ora $a2,x			ora 	esInt1+2,x
.3d7e	15 a3		ora $a3,x			ora 	esInt1+3,x
.3d80	f0 4a		beq $3dcc			beq 	_MInt32DZero
.3d82	e8		inx				inx 								; clear A
.3d83	e8		inx				inx
.3d84	20 79 3f	jsr $3f79			jsr 	MInt32False
.3d87	ca		dex				dex
.3d88	ca		dex				dex
.3d89	98		tya				tya 								; save Y on the stack
.3d8a	48		pha				pha
.3d8b	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3d8d					_MInt32UDLoop:
.3d8d	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.3d8f	36 a0		rol $a0,x			rol 	esInt1,x
.3d91	36 a8		rol $a8,x			rol 	esInt2,x
.3d93	36 b0		rol $b0,x			rol 	esInt3,x
.3d95	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3d97	36 a2		rol $a2,x			rol 	esInt1+2,x
.3d99	36 aa		rol $aa,x			rol 	esInt2+2,x
.3d9b	36 b2		rol $b2,x			rol 	esInt3+2,x
.3d9d	38		sec				sec 								; calculate A-M saving result on the stack
.3d9e	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3da0	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3da2	48		pha				pha
.3da3	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3da5	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3da7	48		pha				pha
.3da8	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3daa	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3dac	48		pha				pha
.3dad	b5 b2		lda $b2,x			lda 	esInt3+2,x
.3daf	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3db1	90 10		bcc $3dc3			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3db3	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3db5	68		pla				pla
.3db6	95 aa		sta $aa,x			sta 	esInt2+2,x
.3db8	68		pla				pla
.3db9	95 a2		sta $a2,x			sta 	esInt1+2,x
.3dbb	68		pla				pla
.3dbc	95 9a		sta $9a,x			sta 	esInt0+2,x
.3dbe	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3dc0	4c c6 3d	jmp $3dc6			jmp 	_MInt32Next 					; do the next iteration
.3dc3					_MInt32NoSubtract:
.3dc3	68		pla				pla
.3dc4	68		pla				pla
.3dc5	68		pla				pla
.3dc6					_MInt32Next:
.3dc6	88		dey				dey 								; do this 32 times.
.3dc7	d0 c4		bne $3d8d			bne 	_MInt32UDLoop
.3dc9	68		pla				pla 								; restore Y and exit
.3dca	a8		tay				tay
.3dcb	60		rts				rts
.3dcc					_MInt32DZero:
.3dcc	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3dce	20 27 15	jsr $1527		jsr	errorHandler
.3dd1					MInt32Modulus:
.3dd1	20 78 3d	jsr $3d78			jsr 	MInt32UDivide 				; do the division.
.3dd4	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3dd6	95 b0		sta $b0,x			sta 	esInt3,x
.3dd8	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3dda	95 a8		sta $a8,x			sta 	esInt2,x
.3ddc	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3dde	95 a0		sta $a0,x			sta 	esInt1,x
.3de0	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3de2	95 98		sta $98,x			sta 	esInt0,x
.3de4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0dca					fs32Length:
>0dca							.fill 	1
.3de5					LinkInt32FromString:
.3de5	aa		tax				tax
.3de6	98		tya				tya
.3de7	20 ec 3d	jsr $3dec			jsr 	MInt32FromString
.3dea	8a		txa				txa
.3deb	60		rts				rts
.3dec					MInt32FromString:
.3dec	85 32		sta $32				sta 	tempShort 					; save base
.3dee	5a		phy				phy
.3def	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3df1	b1 2a		lda ($2a),y			lda 	(temp0),y
.3df3	8d ca 0d	sta $0dca			sta 	fs32Length
.3df6	f0 64		beq $3e5c			beq 	_I32FSFail2					; fail if length zero.
.3df8	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3dfa	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3dfc	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.3dfe	d0 09		bne $3e09			bne 	_I32FSNotNegative
.3e00	ad ca 0d	lda $0dca			lda 	fs32Length 					; get length back.
.3e03	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3e05	f0 55		beq $3e5c			beq 	_I32FSFail2
.3e07	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3e09					_I32FSNotNegative:
.3e09	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3e0b	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.3e0d	d0 02		bne $3e11			bne 	_I32FSNN2
.3e0f	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3e11					_I32FSNN2:
.3e11	48		pha				pha 								; save base + final sign on stack.
.3e12	20 79 3f	jsr $3f79			jsr 	MInt32False 				; zero the return value.
.3e15					_I32FSMainLoop:
.3e15	68		pla				pla 								; get the base back into tempShort
.3e16	48		pha				pha
.3e17	29 7f		and #$7f			and 	#$7F
.3e19	85 32		sta $32				sta 	tempShort
.3e1b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.3e1d	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.3e1f	90 02		bcc $3e23			bcc 	_I32FSNotLC
.3e21	e9 20		sbc #$20			sbc 	#32
.3e23					_I32FSNotLC:
.3e23	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3e24	e9 30		sbc #$30			sbc 	#"0"
.3e26	90 33		bcc $3e5b			bcc 	_I32FSFail 					; nothing more to do.
.3e28	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3e2a	90 06		bcc $3e32			bcc 	_I32FSValidate
.3e2c	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.3e2e	90 2b		bcc $3e5b			bcc 	_I32FSFail
.3e30	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.3e32					_I32FSValidate:
.3e32	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.3e34	b0 25		bcs $3e5b			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.3e36	48		pha				pha 								; save the new digit value.
.3e37	e8		inx				inx 								; put base into next slot up on stack
.3e38	a5 32		lda $32				lda 	tempShort
.3e3a	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit
.3e3d	ca		dex				dex
.3e3e	20 93 3e	jsr $3e93			jsr 	MInt32Multiply 				; multiply current by the base
.3e41	e8		inx				inx
.3e42	68		pla				pla  								; put additive into next slot
.3e43	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit
.3e46	ca		dex				dex
.3e47	20 5f 3e	jsr $3e5f			jsr 	MInt32Add 					; and add it
.3e4a	c8		iny				iny 								; bump the character pointer
.3e4b	cc ca 0d	cpy $0dca			cpy 	fs32Length 					; until > length.
.3e4e	f0 c5		beq $3e15			beq 	_I32FSMainLoop
.3e50	90 c3		bcc $3e15			bcc 	_I32FSMainLoop
.3e52					_I32FSDone:
.3e52	68		pla				pla 								; get base/final sign back
.3e53	10 03		bpl $3e58			bpl 	_I32FSNN3
.3e55	20 33 3f	jsr $3f33			jsr 	MInt32Negate 				; negate the result.
.3e58					_I32FSNN3:
.3e58	7a		ply				ply
.3e59	38		sec				sec
.3e5a	60		rts				rts
.3e5b					_I32FSFail:
.3e5b	68		pla				pla
.3e5c					_I32FSFail2:
.3e5c	7a		ply				ply
.3e5d	18		clc				clc
.3e5e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3e5f					MInt32Add:
.3e5f	18		clc				clc
.3e60	b5 98		lda $98,x			lda 	esInt0,x
.3e62	75 99		adc $99,x			adc 	esInt0+1,x
.3e64	95 98		sta $98,x			sta 	esInt0,x
.3e66	b5 a0		lda $a0,x			lda 	esInt1,x
.3e68	75 a1		adc $a1,x			adc 	esInt1+1,x
.3e6a	95 a0		sta $a0,x			sta 	esInt1,x
.3e6c	b5 a8		lda $a8,x			lda 	esInt2,x
.3e6e	75 a9		adc $a9,x			adc 	esInt2+1,x
.3e70	95 a8		sta $a8,x			sta 	esInt2,x
.3e72	b5 b0		lda $b0,x			lda 	esInt3,x
.3e74	75 b1		adc $b1,x			adc 	esInt3+1,x
.3e76	95 b0		sta $b0,x			sta 	esInt3,x
.3e78	60		rts				rts
.3e79					MInt32Sub:
.3e79	38		sec				sec
.3e7a	b5 98		lda $98,x			lda 	esInt0,x
.3e7c	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3e7e	95 98		sta $98,x			sta 	esInt0,x
.3e80	b5 a0		lda $a0,x			lda 	esInt1,x
.3e82	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3e84	95 a0		sta $a0,x			sta 	esInt1,x
.3e86	b5 a8		lda $a8,x			lda 	esInt2,x
.3e88	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3e8a	95 a8		sta $a8,x			sta 	esInt2,x
.3e8c	b5 b0		lda $b0,x			lda 	esInt3,x
.3e8e	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3e90	95 b0		sta $b0,x			sta 	esInt3,x
.3e92	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3e93					MInt32Multiply:
.3e93	e8		inx				inx 								; copy 2nd -> 3rd
.3e94	20 b9 3e	jsr $3eb9			jsr 	MInt32CopyUp
.3e97	ca		dex				dex
.3e98	20 b9 3e	jsr $3eb9			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3e9b	20 79 3f	jsr $3f79			jsr 	MInt32False 				; zero 1st.
.3e9e					_I32Loop:
.3e9e	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3ea0	29 01		and #$01			and 	#1
.3ea2	f0 03		beq $3ea7			beq 	_I32NoAdd 					; if set
.3ea4	20 5f 3e	jsr $3e5f			jsr 	MInt32Add 					; add 2nd to 1st.
.3ea7					_I32NoAdd:
.3ea7	e8		inx				inx 								; shift 2nd left
.3ea8	20 8e 3f	jsr $3f8e			jsr 	MInt32ShiftLeft
.3eab	e8		inx				inx  								; shift 3rd right
.3eac	20 97 3f	jsr $3f97			jsr 	MInt32ShiftRight
.3eaf	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero 					; check if zero.
.3eb2	08		php				php 								; save status bits
.3eb3	ca		dex				dex 	 							; point back to 1st
.3eb4	ca		dex				dex
.3eb5	28		plp				plp 								; get status bits
.3eb6	d0 e6		bne $3e9e			bne 	_I32Loop 					; if non-zero keep going.
.3eb8	60		rts				rts
.3eb9					MInt32CopyUp:
.3eb9	b5 98		lda $98,x			lda 	esInt0,x
.3ebb	95 99		sta $99,x			sta 	esInt0+1,x
.3ebd	b5 a0		lda $a0,x			lda 	esInt1,x
.3ebf	95 a1		sta $a1,x			sta 	esInt1+1,x
.3ec1	b5 a8		lda $a8,x			lda 	esInt2,x
.3ec3	95 a9		sta $a9,x			sta 	esInt2+1,x
.3ec5	b5 b0		lda $b0,x			lda 	esInt3,x
.3ec7	95 b1		sta $b1,x			sta 	esInt3+1,x
.3ec9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0dcb					MCharCount:	.fill 	1						; count of converted characters
.3eca					MLInt32ToString:
.3eca	aa		tax				tax									; module passes stack in A, base in Y
.3ecb	98		tya				tya
.3ecc	20 d1 3e	jsr $3ed1			jsr 	MInt32ToString
.3ecf	8a		txa				txa
.3ed0	60		rts				rts
.3ed1					MInt32ToString:
.3ed1	48		pha				pha 								; save base
.3ed2	85 32		sta $32				sta 	tempShort 					; save target base.
.3ed4	a9 00		lda #$00			lda 	#0
.3ed6	8d cb 0d	sta $0dcb			sta 	MCharCount 					; clear character count to 0
.3ed9	5a		phy				phy
.3eda	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3edc	10 10		bpl $3eee			bpl 	_I32TSUnsigned
.3ede	48		pha				pha 								; save base on stack.
.3edf	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3ee1	10 08		bpl $3eeb			bpl 	_I32TSNoFlip
.3ee3	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3ee5	20 20 3f	jsr $3f20			jsr 	MI32WriteCharacter
.3ee8	20 33 3f	jsr $3f33			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3eeb					_I32TSNoFlip:
.3eeb	68		pla				pla 								; get the base back
.3eec	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3eee					_I32TSUnsigned:
.3eee	20 fb 3e	jsr $3efb			jsr 	MI32DivideWrite 			; recursive code to output string.
.3ef1	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3ef3	ad cb 0d	lda $0dcb			lda 	MCharCount
.3ef6	91 2a		sta ($2a),y			sta 	(temp0),y
.3ef8	7a		ply				ply
.3ef9	68		pla				pla
.3efa	60		rts				rts
.3efb					MI32DivideWrite:
.3efb	48		pha				pha 								; save the divisor/base
.3efc	e8		inx				inx 								; write in the dividing position.
.3efd	20 88 3f	jsr $3f88			jsr 	MInt32Set8Bit
.3f00	ca		dex				dex
.3f01	20 78 3d	jsr $3d78			jsr 	MInt32UDivide 				; divide number by base.
.3f04	68		pla				pla 								; get the base into Y
.3f05	a8		tay				tay
.3f06	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3f08	48		pha				pha
.3f09	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero 					; is the result zero ?
.3f0c	f0 04		beq $3f12			beq 	_I32NoRecurse 				; if so, don't recurse.
.3f0e	98		tya				tya 								; put base into A
.3f0f	20 fb 3e	jsr $3efb			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3f12					_I32NoRecurse:
.3f12	68		pla				pla 								; get the remainder back
.3f13	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3f15	90 02		bcc $3f19			bcc 	_I32NotHex
.3f17	69 06		adc #$06			adc 	#7-1
.3f19					_I32NotHex:
.3f19	18		clc				clc 								; make it ASCII
.3f1a	69 30		adc #$30			adc 	#48
.3f1c	20 20 3f	jsr $3f20			jsr 	MI32WriteCharacter 			; write the character out
.3f1f	60		rts				rts 								; and exit.
.3f20					MI32WriteCharacter:
.3f20	ee cb 0d	inc $0dcb			inc 	MCharCount 					; bump count (space for leading count)
.3f23	ac cb 0d	ldy $0dcb			ldy 	MCharCount 					; get position
.3f26	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3f28	c8		iny				iny
.3f29	a9 00		lda #$00			lda 	#0
.3f2b	91 2a		sta ($2a),y			sta 	(temp0),y
.3f2d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0dcc					MSeed32:	.fill 	4							; random number seed.
.3f2e					MInt32Absolute:
.3f2e	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3f30	30 01		bmi $3f33			bmi 	MInt32Negate
.3f32	60		rts				rts
.3f33					MInt32Negate:
.3f33	38		sec				sec 								; subtract from zero.
.3f34	a9 00		lda #$00			lda 	#0
.3f36	f5 98		sbc $98,x			sbc 	esInt0,x
.3f38	95 98		sta $98,x			sta 	esInt0,x
.3f3a	a9 00		lda #$00			lda 	#0
.3f3c	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3f3e	95 a0		sta $a0,x			sta 	esInt1,x
.3f40	a9 00		lda #$00			lda 	#0
.3f42	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3f44	95 a8		sta $a8,x			sta 	esInt2,x
.3f46	a9 00		lda #$00			lda 	#0
.3f48	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3f4a	95 b0		sta $b0,x			sta 	esInt3,x
.3f4c	60		rts				rts
.3f4d					MInt32Not:
.3f4d	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3f4f	49 ff		eor #$ff			eor 	#$FF
.3f51	95 98		sta $98,x			sta 	esInt0,x
.3f53	b5 a0		lda $a0,x			lda 	esInt1,x
.3f55	49 ff		eor #$ff			eor 	#$FF
.3f57	95 a0		sta $a0,x			sta 	esInt1,x
.3f59	b5 a8		lda $a8,x			lda 	esInt2,x
.3f5b	49 ff		eor #$ff			eor 	#$FF
.3f5d	95 a8		sta $a8,x			sta 	esInt2,x
.3f5f	b5 b0		lda $b0,x			lda 	esInt3,x
.3f61	49 ff		eor #$ff			eor 	#$FF
.3f63	95 b0		sta $b0,x			sta 	esInt3,x
.3f65	60		rts				rts
.3f66					MInt32Sign:
.3f66	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3f68	30 0b		bmi $3f75			bmi 	MInt32True 					; if set return -1 (true)
.3f6a	20 a0 3f	jsr $3fa0			jsr 	MInt32Zero 					; is it zero ?
.3f6d	f0 0a		beq $3f79			beq 	MInt32False 				; if zero return 0 (false)
.3f6f	20 79 3f	jsr $3f79			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3f72	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3f74	60		rts				rts
.3f75					MInt32True:
.3f75	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3f77	d0 02		bne $3f7b			bne 	MInt32WriteAll
.3f79					MInt32False:
.3f79	a9 00		lda #$00			lda 	#0
.3f7b					MInt32WriteAll:
.3f7b	95 98		sta $98,x			sta 	esInt0,x
.3f7d					MInt32Write123:
.3f7d	95 a0		sta $a0,x			sta 	esInt1,x
.3f7f	95 a8		sta $a8,x			sta 	esInt2,x
.3f81	95 b0		sta $b0,x			sta 	esInt3,x
.3f83	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3f85	95 90		sta $90,x			sta 	esType,x
.3f87	60		rts				rts
.3f88					MInt32Set8Bit:
.3f88	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3f8a	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3f8c	f0 ef		beq $3f7d			beq		MInt32Write123
.3f8e					MInt32ShiftLeft:
.3f8e	16 98		asl $98,x			asl 	esInt0,x
.3f90	36 a0		rol $a0,x			rol	 	esInt1,x
.3f92	36 a8		rol $a8,x			rol	 	esInt2,x
.3f94	36 b0		rol $b0,x			rol	 	esInt3,x
.3f96	60		rts				rts
.3f97					MInt32ShiftRight:
.3f97	56 b0		lsr $b0,x			lsr 	esInt3,x
.3f99	76 a8		ror $a8,x			ror 	esInt2,x
.3f9b	76 a0		ror $a0,x			ror 	esInt1,x
.3f9d	76 98		ror $98,x			ror 	esInt0,x
.3f9f	60		rts				rts
.3fa0					MInt32Zero:
.3fa0	b5 98		lda $98,x			lda 	esInt0,x
.3fa2	15 a0		ora $a0,x			ora 	esInt1,x
.3fa4	15 a8		ora $a8,x			ora 	esInt2,x
.3fa6	15 b0		ora $b0,x			ora 	esInt3,x
.3fa8	60		rts				rts
.3fa9					MInt32Random:
.3fa9	5a		phy				phy
.3faa	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3fac	ad cc 0d	lda $0dcc			lda 	MSeed32+0 					; check the seed isn't zero
.3faf	d0 03		bne $3fb4			bne 	_Random1
.3fb1	a8		tay				tay 								; if so do it 256 times
.3fb2	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3fb4					_Random1:
.3fb4	0a		asl a				asl 	a
.3fb5	2e cd 0d	rol $0dcd			rol 	MSeed32+1
.3fb8	2e ce 0d	rol $0dce			rol 	MSeed32+2
.3fbb	2e cf 0d	rol $0dcf			rol 	MSeed32+3
.3fbe	90 02		bcc $3fc2			bcc 	_Random2
.3fc0	49 c5		eor #$c5			eor 	#$C5
.3fc2					_Random2:
.3fc2	88		dey				dey
.3fc3	d0 ef		bne $3fb4			bne 	_Random1
.3fc5	8d cc 0d	sta $0dcc			sta 	MSeed32+0 					; copy the seed in.
.3fc8	95 98		sta $98,x			sta 	esInt0,x
.3fca	ad cd 0d	lda $0dcd			lda 	MSeed32+1
.3fcd	95 a0		sta $a0,x			sta 	esInt1,x
.3fcf	ad ce 0d	lda $0dce			lda 	MSeed32+2
.3fd2	95 a8		sta $a8,x			sta 	esInt2,x
.3fd4	ad cf 0d	lda $0dcf			lda 	MSeed32+3
.3fd7	95 b0		sta $b0,x			sta 	esInt3,x
.3fd9	7a		ply				ply
.3fda	a9 00		lda #$00			lda 	#0
.3fdc	95 90		sta $90,x			sta 	esType,x
.3fde	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3fdf					CheckToken:
.3fdf	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3fe1	d0 02		bne $3fe5			bne 	_CTError
.3fe3	c8		iny				iny
.3fe4	60		rts				rts
.3fe5					_CTError:
.3fe5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3fe7	20 27 15	jsr $1527		jsr	errorHandler
.3fea					CheckRightParen:
.3fea	b1 28		lda ($28),y			lda 	(codePtr),y
.3fec	c8		iny				iny
.3fed	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3fef	d0 01		bne $3ff2			bne 	_CRPError
.3ff1	60		rts				rts
.3ff2					_CRPError:
.3ff2	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3ff4	20 27 15	jsr $1527		jsr	errorHandler
.3ff7					CheckComma:
.3ff7	b1 28		lda ($28),y			lda 	(codePtr),y
.3ff9	c8		iny				iny
.3ffa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3ffc	d0 01		bne $3fff			bne 	_CCError
.3ffe	60		rts				rts
.3fff					_CCError:
.3fff	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.4001	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.4004					RSReset:
.4004	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.4006	85 37		sta $37				sta 	rsPointer
.4008	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.400a	85 38		sta $38				sta 	1+(rsPointer)
.400c	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.400e	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.4011	60		rts				rts
.4012					RSClaim:
.4012	84 32		sty $32				sty 	tempShort 					; preserve Y
.4014	48		pha				pha 								; save marker on stack.
.4015	8a		txa				txa 								; get bytes required.
.4016	38		sec				sec
.4017	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.4019	65 37		adc $37				adc 	rsPointer
.401b	85 37		sta $37				sta 	rsPointer
.401d	a5 38		lda $38				lda 	rsPointer+1
.401f	69 ff		adc #$ff			adc 	#$FF
.4021	85 38		sta $38				sta 	rsPointer+1
.4023	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.4025	90 08		bcc $402f			bcc 	_RSCOverflow
.4027	68		pla				pla 								; get marker back
.4028	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.402a	91 37		sta ($37),y			sta 	(rsPointer),y
.402c	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.402e	60		rts				rts
.402f					_RSCOverflow:
.402f	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.4031	20 27 15	jsr $1527		jsr	errorHandler
.4034					RSFree:
.4034	18		clc				clc
.4035	65 37		adc $37				adc 	rsPointer
.4037	85 37		sta $37				sta 	rsPointer
.4039	90 02		bcc $403d			bcc 	_RSFExit
.403b	e6 38		inc $38				inc 	rsPointer+1
.403d					_RSFExit:
.403d	60		rts				rts
.403e					RSSavePosition:
.403e	84 32		sty $32				sty 	tempShort 					; save Y position
.4040	a8		tay				tay 								; this is where we write it.
.4041	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.4043	91 37		sta ($37),y			sta 	(rsPointer),y
.4045	c8		iny				iny
.4046	a5 29		lda $29				lda 	codePtr+1
.4048	91 37		sta ($37),y			sta 	(rsPointer),y
.404a	c8		iny				iny
.404b	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.404d	91 37		sta ($37),y			sta 	(rsPointer),y
.404f	a8		tay				tay 								; fix Y back again to original value
.4050	60		rts				rts
.4051					RSLoadPosition:
.4051	a8		tay				tay
.4052	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.4054	85 28		sta $28				sta 	codePtr
.4056	c8		iny				iny
.4057	b1 37		lda ($37),y			lda 	(rsPointer),y
.4059	85 29		sta $29				sta 	codePtr+1
.405b	c8		iny				iny
.405c	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.405e	a8		tay				tay 								; to Y
.405f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.4060					WarmStart:
.4060	a2 04		ldx #$04		ldx	#4
.4062	20 02 2a	jsr $2a02		jsr	interactionHandler

;******  Return to file: main/main.asm

.4065					mainHandler:
.4065	7c 68 40	jmp ($4068,x)			jmp 	(mainVectors,x)
.4068					mainVectors:
>4068	84 40					.word _DummyControlHandler ; index 0
>406a	f7 3f					.word CheckComma           ; index 2
>406c	ea 3f					.word CheckRightParen      ; index 4
>406e	e6 31					.word XCommandClear        ; index 6
>4070	13 39					.word LinkEvaluate         ; index 8
>4072	1f 39					.word LinkEvaluateInteger  ; index 10
>4074	2b 39					.word LinkEvaluateSmallInt ; index 12
>4076	25 39					.word LinkEvaluateString   ; index 14
>4078	19 39					.word LinkEvaluateTerm     ; index 16
>407a	ca 3e					.word MLInt32ToString      ; index 18
>407c	73 33					.word Command_XNew         ; index 20
>407e	81 33					.word XCommand_Run         ; index 22
>4080	8d 33					.word Command_RunFrom      ; index 24
>4082	e5 3d					.word LinkInt32FromString  ; index 26
.4084					_DummyControlHandler:
.4084	60		rts			rts

;******  Return to file: basic.asm

.4085					section_end_main:
.4085					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.4085					StringChrs:
.4085	aa		tax				tax 								; set up stack
.4086	a9 02		lda #$02			lda 	#2
.4088	20 44 41	jsr $4144			jsr 	AllocateSoftString
.408b	98		tya				tya
.408c	20 68 41	jsr $4168			jsr 	WriteSoftString
.408f					StringUpdate:
.408f	20 9d 40	jsr $409d			jsr 	ReturnSoftString
.4092	8a		txa				txa
.4093	60		rts				rts
.4094					StringNull:
.4094	aa		tax				tax
.4095	a9 01		lda #$01			lda 	#1
.4097	20 44 41	jsr $4144			jsr 	AllocateSoftString
.409a	4c 8f 40	jmp $408f			jmp 	StringUpdate
.409d					ReturnSoftString:
.409d	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.409f	95 98		sta $98,x			sta 	esInt0,x
.40a1	a5 3a		lda $3a				lda 	softMemAlloc+1
.40a3	95 a0		sta $a0,x			sta 	esInt1,x
.40a5	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.40a7	95 a8		sta $a8,x			sta 	esInt2,x
.40a9	95 b0		sta $b0,x			sta 	esInt3,x
.40ab	a9 40		lda #$40			lda 	#$40 						; type string.
.40ad	95 90		sta $90,x			sta 	esType,x
.40af	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.40b0					STRCompare:
.40b0	48		pha				pha 								; save A
.40b1	aa		tax				tax 								; put stack pos in X
.40b2	5a		phy				phy
.40b3	20 e6 40	jsr $40e6			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.40b6	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.40b8	b1 2a		lda ($2a),y			lda 	(temp0),y
.40ba	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.40bc	90 02		bcc $40c0			bcc 	_SCNotSmaller
.40be	b1 2c		lda ($2c),y			lda 	(temp1),y
.40c0					_SCNotSmaller:
.40c0	aa		tax				tax 								; put that in X. We compare this many chars first.
.40c1					_SCCompareLoop:
.40c1	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.40c3	f0 0c		beq $40d1			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.40c5	ca		dex				dex 								; decrement chars to compare.
.40c6	c8		iny				iny 								; move to next character
.40c7	38		sec				sec 								; calculate s1[y]-s2[y]
.40c8	b1 2a		lda ($2a),y			lda 	(temp0),y
.40ca	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.40cc	d0 0a		bne $40d8			bne 	_SCReturnResult 			; if different return sign of A
.40ce	4c c1 40	jmp $40c1			jmp 	_SCCompareLoop
.40d1					_SCSameToEndShortest
.40d1	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.40d3	38		sec				sec
.40d4	b1 2a		lda ($2a),y			lda 	(temp0),y
.40d6	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.40d8					_SCReturnResult:
.40d8	08		php				php 								; set return to zero preserving PSW.
.40d9	a2 00		ldx #$00			ldx 	#0
.40db	28		plp				plp
.40dc	f0 05		beq $40e3			beq 	_SCExit 					; two values equal, then exit
.40de	ca		dex				dex 								; X = $FF
.40df	90 02		bcc $40e3			bcc 	_SCExit 					; if 1st < 2nd then -1
.40e1	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.40e3					_SCExit:
.40e3	7a		ply				ply
.40e4	68		pla				pla
.40e5	60		rts				rts
.40e6					CopyStringPair:
.40e6	b5 99		lda $99,x			lda 	esInt0+1,x
.40e8	85 2c		sta $2c				sta 	temp1
.40ea	b5 a1		lda $a1,x			lda 	esInt1+1,x
.40ec	85 2d		sta $2d				sta 	temp1+1
.40ee					CopyStringTop:
.40ee	b5 98		lda $98,x			lda 	esInt0,x
.40f0	85 2a		sta $2a				sta 	temp0
.40f2	b5 a0		lda $a0,x			lda 	esInt1,x
.40f4	85 2b		sta $2b				sta 	temp0+1
.40f6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.40f7					StringConcat:
.40f7	aa		tax				tax									; stack pos in X
.40f8	5a		phy				phy
.40f9	20 e6 40	jsr $40e6			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.40fc	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.40fd	a0 00		ldy #$00			ldy 	#0
.40ff	b1 2a		lda ($2a),y			lda 	(temp0),y
.4101	71 2c		adc ($2c),y			adc 	(temp1),y
.4103	b0 1b		bcs $4120			bcs 	_SCError 					; just too many characters here.
.4105	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.4107	b0 17		bcs $4120			bcs 	_SCError
.4109	20 44 41	jsr $4144			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.410c	20 3b 41	jsr $413b			jsr 	CopySoftToStack 			; copy that to the stack.
.410f	20 25 41	jsr $4125			jsr 	SCCopyTemp0 				; copy temp0
.4112	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.4114	85 2a		sta $2a				sta 	temp0
.4116	a5 2d		lda $2d				lda 	temp1+1
.4118	85 2b		sta $2b				sta 	temp0+1
.411a	20 25 41	jsr $4125			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.411d	7a		ply				ply
.411e	8a		txa				txa 								; and A
.411f	60		rts				rts
.4120					_SCError:
.4120	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.4122	20 27 15	jsr $1527		jsr	errorHandler
.4125					SCCopyTemp0:
.4125	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.4127	b1 2a		lda ($2a),y			lda 	(temp0),y
.4129	85 2e		sta $2e				sta 	temp2
.412b					_SCCopyLoop:
.412b	a5 2e		lda $2e				lda 	temp2 						; done the lot
.412d	f0 0b		beq $413a			beq 	_SCCopyExit
.412f	c6 2e		dec $2e				dec 	temp2
.4131	c8		iny				iny 								; get next char
.4132	b1 2a		lda ($2a),y			lda 	(temp0),y
.4134	20 68 41	jsr $4168			jsr 	WriteSoftString 			; write to soft string.
.4137	4c 2b 41	jmp $412b			jmp 	_SCCopyLoop
.413a					_SCCopyExit:
.413a	60		rts				rts
.413b					CopySoftToStack:
.413b	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.413d	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.413f	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.4141	95 a0		sta $a0,x			sta 	esInt1,x
.4143	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.4144					AllocateSoftString:
.4144	85 32		sta $32				sta 	tempShort 					; save count
.4146	5a		phy				phy
.4147	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.4149	d0 09		bne $4154			bne 	_ASSDone
.414b	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.414d	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.414f	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.4151	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.4152	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.4154					_ASSDone:
.4154	38		sec				sec 								; allocate downwards enough memory
.4155	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.4157	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.4159	85 39		sta $39				sta 	softMemAlloc
.415b	a5 3a		lda $3a				lda 	softMemAlloc+1
.415d	e9 00		sbc #$00			sbc 	#0
.415f	85 3a		sta $3a				sta 	softMemAlloc+1
.4161	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.4163	a8		tay				tay
.4164	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4166	7a		ply				ply
.4167	60		rts				rts
.4168					WriteSoftString:
.4168	84 32		sty $32				sty 	tempShort 					; save Y
.416a	48		pha				pha 								; save character on stack
.416b	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.416d	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.416f	18		clc				clc
.4170	69 01		adc #$01			adc 	#1
.4172	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4174	a8		tay				tay 								; offset in Y
.4175	68		pla				pla 								; get char and write.
.4176	91 39		sta ($39),y			sta 	(softMemAlloc),y
.4178	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.417a	60		rts				rts
.417b					StrClone:
.417b	aa		tax				tax 								; set up stack.
.417c	5a		phy				phy
.417d	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.417f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.4181	18		clc				clc
.4182	69 01		adc #$01			adc 	#1
.4184	20 44 41	jsr $4144			jsr 	AllocateSoftString 			; allocate soft memory
.4187	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.4189	95 98		sta $98,x			sta 	esInt0,x
.418b	a5 3a		lda $3a				lda 	softMemAlloc+1
.418d	95 a0		sta $a0,x			sta 	esInt1,x
.418f	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.4191	95 a8		sta $a8,x			sta 	esInt2,x
.4193	95 b0		sta $b0,x			sta 	esInt3,x
.4195	a9 40		lda #$40			lda 	#$40 						; set type to string.
.4197	95 90		sta $90,x			sta 	esType,x
.4199	20 25 41	jsr $4125			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.419c	7a		ply				ply
.419d	8a		txa				txa
.419e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.419f					CaseString:
.419f	48		pha				pha 								; save A and copy to X
.41a0	aa		tax				tax
.41a1	5a		phy				phy
.41a2	20 ee 40	jsr $40ee			jsr 	CopyStringTop 				; target string -> temp0
.41a5	a0 00		ldy #$00			ldy 	#0
.41a7	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.41a9	18		clc				clc
.41aa	69 01		adc #$01			adc 	#1 							; one more for length byte
.41ac	20 44 41	jsr $4144			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.41af	20 3b 41	jsr $413b			jsr 	CopySoftToStack 			; copy that to the stack.
.41b2	a0 00		ldy #$00			ldy 	#0
.41b4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.41b6	aa		tax				tax
.41b7					_CSCopy:
.41b7	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.41b9	f0 24		beq $41df			beq 	_CSExit
.41bb	ca		dex				dex
.41bc	c8		iny				iny
.41bd	68		pla				pla 								; check direction
.41be	48		pha				pha
.41bf	f0 0c		beq $41cd			beq 	_CSUpper
.41c1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.41c3	c9 41		cmp #$41			cmp 	#"A"
.41c5	90 12		bcc $41d9			bcc 	_CSWrite
.41c7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.41c9	b0 0e		bcs $41d9			bcs 	_CSWrite
.41cb	90 0a		bcc $41d7			bcc 	_CSFlipWrite
.41cd					_CSUpper:
.41cd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.41cf	c9 61		cmp #$61			cmp 	#"a"
.41d1	90 06		bcc $41d9			bcc 	_CSWrite
.41d3	c9 7b		cmp #$7b			cmp 	#"z"+1
.41d5	b0 02		bcs $41d9			bcs 	_CSWrite
.41d7					_CSFlipWrite:
.41d7	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.41d9					_CSWrite:
.41d9	20 68 41	jsr $4168			jsr 	WriteSoftString 			; add to soft string.
.41dc	4c b7 41	jmp $41b7			jmp 	_CSCopy
.41df					_CSExit:
.41df	7a		ply				ply
.41e0	68		pla				pla
.41e1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.41e2					StringSubstring:
.41e2	48		pha				pha
.41e3	aa		tax				tax 								; access stack.
.41e4	5a		phy				phy
.41e5	20 ee 40	jsr $40ee			jsr 	CopyStringTop 				; point temp0 to the string.
.41e8	a0 00		ldy #$00			ldy 	#0 							; get length.
.41ea	b1 2a		lda ($2a),y			lda 	(temp0),Y
.41ec	85 2c		sta $2c				sta 	temp1
.41ee	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.41f0	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.41f2	f0 02		beq $41f6			beq 	_SSBOkay
.41f4	b0 2a		bcs $4220			bcs 	_SSBReturnNull
.41f6					_SSBOkay:
.41f6	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.41f8	18		clc				clc
.41f9	69 01		adc #$01			adc 	#1
.41fb	38		sec				sec
.41fc	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.41fe	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.4200	90 02		bcc $4204			bcc		_SSBTrunc
.4202	b5 9a		lda $9a,x			lda 	esInt0+2,x
.4204					_SSBTrunc:
.4204	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.4206	18		clc				clc
.4207	69 01		adc #$01			adc 	#1 							; add 1
.4209	20 44 41	jsr $4144			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.420c	20 3b 41	jsr $413b			jsr 	CopySoftToStack 			; copy that to the stack.
.420f	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.4211					_SSBCopyLoop:
.4211	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.4213	f0 0e		beq $4223			beq 	_SSBExit
.4215	c6 2d		dec $2d				dec 	temp1+1
.4217	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.4219	20 68 41	jsr $4168			jsr 	WriteSoftString
.421c	c8		iny				iny
.421d	4c 11 42	jmp $4211			jmp 	_SSBCopyLoop
.4220					_SSBReturnNull:
.4220	20 26 42	jsr $4226			jsr 	ReturnNull
.4223					_SSBExit:
.4223	7a		ply				ply
.4224	68		pla				pla
.4225	60		rts				rts
.4226					ReturnNull:
.4226	a9 00		lda #$00			lda 	#0 							; clear null string
.4228	8d ce 0a	sta $0ace			sta 	NullString
.422b	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.422d	95 98		sta $98,x			sta 	esInt0,x
.422f	a9 0a		lda #$0a			lda 	#NullString >> 8
.4231	95 a0		sta $a0,x			sta 	esInt1,x
.4233	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0dd0					srcStrLen:
>0dd0							.fill 	1
.4234					StringWrite:
.4234	aa		tax				tax
.4235	48		pha				pha
.4236	5a		phy				phy
.4237	20 5d 42	jsr $425d			jsr 	CheckOverwriteCurrent
.423a	b0 0d		bcs $4249			bcs		_SWCopyCurrent
.423c	20 9b 42	jsr $429b			jsr 	RequiresConcretion
.423f	90 0e		bcc $424f			bcc 	_SWWriteReference
.4241	20 fa 42	jsr $42fa			jsr 	CheckSpecialConcretion
.4244	b0 09		bcs $424f			bcs 	_SWWriteReference
.4246	20 af 42	jsr $42af			jsr 	AllocateHardMemory
.4249					_SWCopyCurrent:
.4249	20 e0 42	jsr $42e0			jsr 	CopyStringToHardMemory
.424c	4c 5a 42	jmp $425a			jmp 	_SWExit
.424f					_SWWriteReference
.424f	a0 00		ldy #$00			ldy 	#0
.4251	a5 2a		lda $2a				lda 	temp0
.4253	91 2c		sta ($2c),y			sta 	(temp1),y
.4255	c8		iny				iny
.4256	a5 2b		lda $2b				lda 	temp0+1
.4258	91 2c		sta ($2c),y			sta 	(temp1),y
.425a					_SWExit:
.425a	7a		ply				ply
.425b	68		pla				pla
.425c	60		rts				rts
.425d					CheckOverwriteCurrent:
.425d	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.425f	b5 a1		lda $a1,x			lda 	esInt1+1,x
.4261	85 2b		sta $2b				sta 	temp0+1
.4263	b5 99		lda $99,x			lda 	esInt0+1,x
.4265	85 2a		sta $2a				sta 	temp0
.4267	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.4269	8d d0 0d	sta $0dd0			sta 	srcStrLen
.426c	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.426e	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.4270	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.4272	85 2d		sta $2d				sta 	temp1+1
.4274	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.4276	b1 2c		lda ($2c),y			lda 	(temp1),y
.4278	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.427a	90 1b		bcc $4297			bcc 	_COCFail 				; in hard memory.
.427c	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.427e	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.4280	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.4282	85 2e		sta $2e				sta 	temp2
.4284	c8		iny				iny
.4285	b1 2c		lda ($2c),y			lda 	(temp1),y
.4287	e9 00		sbc #$00			sbc 	#0
.4289	85 2f		sta $2f				sta 	temp2+1
.428b	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.428d	b1 2e		lda ($2e),y			lda 	(temp2),y
.428f	38		sec				sec  							; maximum character capacity.
.4290	e9 02		sbc #$02			sbc 	#2
.4292	cd d0 0d	cmp $0dd0			cmp 	srcStrLen 				; if >= the required length
.4295	b0 02		bcs $4299			bcs 	_COCCanReuse
.4297					_COCFail:
.4297	18		clc				clc
.4298	60		rts				rts
.4299					_COCCanReuse:
.4299	38		sec				sec
.429a	60		rts				rts
.429b					RequiresConcretion:
.429b	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.429d	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.429f	b0 0a		bcs $42ab			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.42a1	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.42a3	f0 08		beq $42ad			beq 	_RCFail 				; if not, this cannot be soft memory.
.42a5	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.42a7	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.42a9	90 02		bcc $42ad			bcc 	_RCFail 				; so concreting
.42ab					_RCSucceed:
.42ab	38		sec				sec
.42ac	60		rts				rts
.42ad					_RCFail:
.42ad	18		clc				clc
.42ae	60		rts				rts
.42af					AllocateHardMemory:
.42af	5a		phy				phy
.42b0	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; characters in string
.42b3	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.42b5	b0 04		bcs $42bb			bcs 	_AHMSetMax 				; max out that amount.
.42b7	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.42b9	90 02		bcc $42bd			bcc 	_AHMIsOkay
.42bb					_AHMSetMax:
.42bb	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.42bd					_AHMIsOkay:
.42bd	48		pha				pha	 							; save size to be allocated
.42be	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.42c0	38		sec				sec  							; and copy result to TOS as target address.
.42c1	65 33		adc $33				adc 	highMemory
.42c3	85 33		sta $33				sta 	highMemory
.42c5	a5 34		lda $34				lda 	highMemory+1
.42c7	69 ff		adc #$ff			adc 	#$FF
.42c9	85 34		sta $34				sta 	highMemory+1
.42cb	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.42cd	68		pla				pla 							; get the total size of the storage block
.42ce	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.42d0	18		clc				clc
.42d1	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.42d3	69 01		adc #$01			adc 	#1
.42d5	91 2c		sta ($2c),y			sta 	(temp1),y
.42d7	a5 34		lda $34				lda 	highMemory+1
.42d9	69 00		adc #$00			adc 	#0
.42db	c8		iny				iny
.42dc	91 2c		sta ($2c),y			sta 	(temp1),y
.42de	7a		ply				ply
.42df	60		rts				rts
.42e0					CopyStringToHardMemory:
.42e0	5a		phy				phy
.42e1	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.42e3	b1 2c		lda ($2c),y			lda 	(temp1),y
.42e5	85 2e		sta $2e				sta 	temp2
.42e7	c8		iny				iny
.42e8	b1 2c		lda ($2c),y			lda 	(temp1),y
.42ea	85 2f		sta $2f				sta 	temp2+1
.42ec	ac d0 0d	ldy $0dd0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.42ef					_CSTHMLoop:
.42ef	b1 2a		lda ($2a),y			lda 	(temp0),y
.42f1	91 2e		sta ($2e),y			sta 	(temp2),y
.42f3	88		dey				dey
.42f4	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.42f6	d0 f7		bne $42ef			bne 	_CSTHMLoop
.42f8	7a		ply				ply
.42f9	60		rts				rts
.42fa					CheckSpecialConcretion:
.42fa	ad d0 0d	lda $0dd0			lda 	srcStrLen 				; check string is null e.g. length = 0
.42fd	f0 02		beq $4301			beq 	_CSCNullString
.42ff	18		clc				clc
.4300	60		rts				rts
.4301					_CSCNullString:
.4301	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.4303	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.4306	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.4308	85 2a		sta $2a				sta 	temp0
.430a	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.430c	85 2b		sta $2b				sta 	1+(temp0)
.430e	38		sec				sec
.430f	60		rts				rts

;******  Return to file: string/string.asm

.4310					stringHandler:
.4310	7c 13 43	jmp ($4313,x)			jmp 	(stringVectors,x)
.4313					stringVectors:
>4313	25 43					.word _DummyControlHandler ; index 0
>4315	85 40					.word StringChrs           ; index 2
>4317	7b 41					.word StrClone             ; index 4
>4319	f7 40					.word StringConcat         ; index 6
>431b	94 40					.word StringNull           ; index 8
>431d	b0 40					.word STRCompare           ; index 10
>431f	9f 41					.word CaseString           ; index 12
>4321	e2 41					.word StringSubstring      ; index 14
>4323	34 42					.word StringWrite          ; index 16
.4325					_DummyControlHandler:
.4325	60		rts			rts

;******  Return to file: basic.asm

.4326					section_end_string:
.4326					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0dd1					deTokeniseVector:
>0dd1							.fill 	2
.0dd3					lastCharacterClass:
>0dd3							.fill 	1
.0dd4					indent:
>0dd4							.fill 	1
.4326					ListLine:
.4326	48		pha				pha								; enter here to list to console. sets the output vector
.4327	a9 55		lda #$55			lda 	#(deTokenPrint) & $FF
.4329	8d d1 0d	sta $0dd1			sta 	deTokeniseVector
.432c	a9 44		lda #$44			lda 	#(deTokenPrint) >> 8
.432e	8d d2 0d	sta $0dd2			sta 	1+(deTokeniseVector)
.4331	68		pla				pla
.4332					Detokenise:
.4332	18		clc				clc 							; space required for line number.
.4333	69 06		adc #$06			adc 	#6
.4335	8d d4 0d	sta $0dd4			sta 	indent
.4338	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.433a	8d d3 0d	sta $0dd3			sta 	lastCharacterClass
.433d	a2 02		ldx #$02			ldx 	#2
.433f	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.4341	95 a8		sta $a8,x			sta 	esInt2,x
.4343	95 b0		sta $b0,x			sta 	esInt3,x
.4345	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.4347	b1 28		lda ($28),y			lda 	(codePtr),y
.4349	95 98		sta $98,x			sta 	esInt0,x
.434b	c8		iny				iny
.434c	b1 28		lda ($28),y			lda 	(codePtr),y
.434e	95 a0		sta $a0,x			sta 	esInt1,x
.4350	a9 84		lda #$84			lda 	#LTYLineNumber
.4352	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.4355	a9 0a		lda #$0a			lda 	#10 					; base 10
.4357	20 fb 43	jsr $43fb			jsr 	DTPrintInteger 			; print as integer.
.435a	a0 00		ldy #$00			ldy 	#0 						; get length
.435c	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.435e	aa		tax				tax
.435f					_DTPadOut:
.435f	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.4361	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.4364	e8		inx				inx
.4365	ec d4 0d	cpx $0dd4			cpx 	indent
.4368	d0 f5		bne $435f			bne 	_DTPadOut
.436a	a0 03		ldy #$03			ldy 	#3 						; start position.
.436c					_DTListLoop:
.436c	b1 28		lda ($28),y			lda 	(codePtr),y
.436e	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.4370	f0 5c		beq $43ce			beq 	_DTIsString
.4372	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.4374	f0 54		beq $43ca			beq 	_DTIsFloat
.4376	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.4378	f0 16		beq $4390			beq 	_DTHexConstant
.437a	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.437c	d0 06		bne $4384			bne 	_DTNotEnd
.437e	a9 ff		lda #$ff			lda 	#255 					; print CR
.4380	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.4383	60		rts				rts
.4384					_DTNotEnd:
.4384	c9 00		cmp #$00			cmp 	#0
.4386	30 36		bmi $43be			bmi 	_DTIsToken
.4388	c9 40		cmp #$40			cmp 	#$40
.438a	90 38		bcc $43c4			bcc 	_DTIsIdentifier
.438c	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.438e	d0 0d		bne $439d			bne 	_DTConstant
.4390					_DTHexConstant:
.4390	a9 26		lda #$26			lda 	#"&"
.4392	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.4395	c8		iny				iny
.4396	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.4398	20 71 44	jsr $4471			jsr 	DTSwitchMode
.439b	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.439d					_DTConstant:
.439d	48		pha				pha
.439e	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.43a0	20 71 44	jsr $4471			jsr 	DTSwitchMode
.43a3	a9 86		lda #$86			lda 	#LTYConstant
.43a5	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.43a8	a2 02		ldx #$02			ldx 	#2 						; get its value
.43aa	8a		txa				txa
.43ab	a2 10		ldx #$10		ldx	#16
.43ad	20 65 40	jsr $4065		jsr	mainHandler
.43b0	aa		tax				tax
.43b1	68		pla				pla 							; get base back
.43b2	85 32		sta $32				sta 	tempShort
.43b4	5a		phy				phy
.43b5	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.43b7	20 fb 43	jsr $43fb			jsr 	DTPrintInteger
.43ba	7a		ply				ply
.43bb	4c 6c 43	jmp $436c			jmp 	_DTListLoop
.43be					_DTIsToken:
.43be	20 ca 44	jsr $44ca			jsr 	DTDecodeToken
.43c1	4c 6c 43	jmp $436c			jmp 	_DTListLoop
.43c4					_DTIsIdentifier:
.43c4	20 83 44	jsr $4483			jsr 	DTIdentifier
.43c7	4c 6c 43	jmp $436c			jmp 	_DTListLoop
.43ca					_DTIsFloat:
>43ca	db						.byte 	$DB
.43cb	4c ca 43	jmp $43ca			jmp 	_DTIsFloat
.43ce					_DTIsString:
.43ce	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.43d0	20 71 44	jsr $4471			jsr 	DTSwitchMode
.43d3	a9 81		lda #$81			lda 	#LTYString
.43d5	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.43d8	a9 22		lda #$22			lda 	#'"'						; open quote
.43da	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.43dd	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.43df	8a		txa				txa
.43e0	a2 10		ldx #$10		ldx	#16
.43e2	20 65 40	jsr $4065		jsr	mainHandler
.43e5	aa		tax				tax
.43e6	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.43e8	85 2a		sta $2a				sta 	temp0
.43ea	b5 a0		lda $a0,x			lda 	esInt1,x
.43ec	85 2b		sta $2b				sta 	temp0+1
.43ee	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.43f0	20 0c 44	jsr $440c			jsr 	DTPrintLengthPrefix
.43f3	a9 22		lda #$22			lda 	#'"'
.43f5	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.43f8	4c 6c 43	jmp $436c			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0dd5					tPrintCount:
>0dd5							.fill 	1
.43fb					DTPrintInteger:
.43fb	48		pha				pha									; save base
.43fc	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.43fe	85 2a		sta $2a				sta 	temp0
.4400	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4402	85 2b		sta $2b				sta 	1+(temp0)
.4404	7a		ply				ply
.4405	8a		txa				txa
.4406	a2 12		ldx #$12		ldx	#18
.4408	20 65 40	jsr $4065		jsr	mainHandler
.440b	aa		tax				tax 								; then drop through here.
.440c					DTPrintLengthPrefix:
.440c	aa		tax				tax 								; A = 0 = don't case convert.
.440d	5a		phy				phy
.440e	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.4410	b1 2a		lda ($2a),y			lda 	(temp0),y
.4412	8d d5 0d	sta $0dd5			sta 	tPrintCount
.4415	f0 1b		beq $4432			beq 	_DTPLPExit 					; empty string
.4417					_DTPLPLoop:
.4417	c8		iny				iny 								; get next.
.4418	b1 2a		lda ($2a),y			lda 	(temp0),y
.441a	29 7f		and #$7f			and 	#$7F
.441c	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.441e	f0 0a		beq $442a			beq 	_DTPLPNoCase
.4420	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.4422	90 06		bcc $442a			bcc 	_DTPLPNoCase
.4424	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4426	b0 02		bcs $442a			bcs 	_DTPLPNoCase
.4428	49 20		eor #$20			eor 	#"A"^"a"
.442a					_DTPLPNoCase
.442a	20 34 44	jsr $4434			jsr 	ListOutputCharacter 		; call handler
.442d	ce d5 0d	dec $0dd5			dec 	tPrintCount 				; do all the characters
.4430	d0 e5		bne $4417			bne 	_DTPLPLoop
.4432					_DTPLPExit:
.4432	7a		ply				ply
.4433	60		rts				rts
.4434					ListOutputCharacter:
.4434	85 32		sta $32				sta 	tempShort
.4436	48		pha				pha
.4437	da		phx				phx
.4438	5a		phy				phy
.4439	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.443b	c9 20		cmp #$20			cmp 	#32
.443d	b0 0c		bcs $444b			bcs		_LOCHiBit
.443f	09 40		ora #$40			ora 	#64 						; conversion
.4441	c9 40		cmp #$40			cmp 	#64							; make l/c
.4443	f0 06		beq $444b			beq 	_LOCHiBit
.4445	c9 5b		cmp #$5b			cmp 	#65+26
.4447	b0 02		bcs $444b			bcs 	_LOCHiBit
.4449	69 20		adc #$20			adc 	#32
.444b					_LOCHiBit:
.444b	20 52 44	jsr $4452			jsr 	_LOCCallVector				; call o/p handler routine
.444e	7a		ply				ply
.444f	fa		plx				plx
.4450	68		pla				pla
.4451					_LOCExit:
.4451	60		rts				rts
.4452					_LOCCallVector:
.4452	6c d1 0d	jmp ($0dd1)			jmp 	(deTokeniseVector)
.4455					deTokenPrint:
.4455	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.4457	30 06		bmi $445f			bmi 	_dtpInk
.4459	a2 14		ldx #$14		ldx	#20
.445b	20 05 15	jsr $1505		jsr	deviceHandler
.445e	60		rts				rts
.445f	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4461	f0 08		beq $446b			beq 	_dtpCR						; except $FF => CRLF
.4463	29 07		and #$07			and 	#7
.4465	a2 06		ldx #$06		ldx	#6
.4467	20 05 15	jsr $1505		jsr	deviceHandler
.446a	60		rts				rts
.446b					_dtpCR:
.446b	a2 04		ldx #$04		ldx	#4
.446d	20 05 15	jsr $1505		jsr	deviceHandler
.4470	60		rts				rts
.4471					DTSwitchMode:
.4471	cd d3 0d	cmp $0dd3			cmp 	LastCharacterClass 			; if changed, update character class
.4474	f0 04		beq $447a			beq 	_DTSMNoChange
.4476	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.4479					_DTSMExit:
.4479	60		rts				rts
.447a					_DTSMNoChange:
.447a	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.447c	f0 fb		beq $4479			beq 	_DTSMExit 					; need a space.
.447e	a9 20		lda #$20			lda 	#" "
.4480	4c 34 44	jmp $4434			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4483					DTIdentifier:
.4483	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4485	20 71 44	jsr $4471			jsr 	DTSwitchMode
.4488	a9 87		lda #$87			lda 	#LTYIdentifier
.448a	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.448d					_DTILoop:
.448d	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.448f	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4491	d0 02		bne $4495			bne 	_DTINotUS
.4493	a9 5f		lda #$5f			lda 	#"_"
.4495					_DTINotUS:
.4495	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.4498	c8		iny				iny
.4499	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.449b	c9 3a		cmp #$3a			cmp 	#$3A
.449d	90 ee		bcc $448d			bcc 	_DTILoop
.449f	c8		iny				iny
.44a0	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.44a2	f0 25		beq $44c9			beq 	_DTIExit 					; no postfix.
.44a4	48		pha				pha
.44a5	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.44a7	8d d3 0d	sta $0dd3			sta 	LastCharacterClass
.44aa	a9 82		lda #$82			lda 	#LTYPunctuation
.44ac	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.44af	68		pla				pla
.44b0	c9 3b		cmp #$3b			cmp 	#$3B
.44b2	f0 10		beq $44c4			beq 	_DTIArray
.44b4	4a		lsr a				lsr 	a 							; array flag in C
.44b5	08		php				php
.44b6	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.44b8	f0 02		beq $44bc			beq 	_DTIDollar
.44ba	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.44bc					_DTIDollar:
.44bc	49 24		eor #$24			eor 	#"$"
.44be	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.44c1	28		plp				plp
.44c2	90 05		bcc $44c9			bcc 	_DTIExit
.44c4					_DTIArray:
.44c4	a9 28		lda #$28			lda 	#"("
.44c6	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.44c9					_DTIExit:
.44c9	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.44ca					DTDecodeToken:
.44ca	a2 00		ldx #$00			ldx 	#0 							; table number to use
.44cc	b1 28		lda ($28),y			lda 	(codePtr),y
.44ce	c9 84		cmp #$84			cmp 	#$84
.44d0	b0 05		bcs $44d7			bcs 	_DTNotShift
.44d2	29 03		and #$03			and 	#3 							; get the shift 1..3
.44d4	0a		asl a				asl 	a 							; put 2 x in X
.44d5	aa		tax				tax
.44d6	c8		iny				iny
.44d7					_DTNotShift:
.44d7	bd cd 47	lda $47cd,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.44da	85 2a		sta $2a				sta 	temp0 						; point into temp0
.44dc	bd ce 47	lda $47ce,x			lda 	TokenTableAddress+1,x
.44df	85 2b		sta $2b				sta 	temp0+1
.44e1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.44e3	c8		iny				iny 								; consume it.
.44e4	aa		tax				tax
.44e5	5a		phy				phy
.44e6					_DTFindText:
.44e6	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.44e8	f0 11		beq $44fb			beq 	_DTFoundText
.44ea	ca		dex				dex
.44eb	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.44ed	38		sec				sec
.44ee	b1 2a		lda ($2a),y			lda 	(temp0),y
.44f0	65 2a		adc $2a				adc 	temp0
.44f2	85 2a		sta $2a				sta 	temp0
.44f4	90 f0		bcc $44e6			bcc 	_DTFindText
.44f6	e6 2b		inc $2b				inc 	temp0+1
.44f8	4c e6 44	jmp $44e6			jmp 	_DTFindText
.44fb					_DTFoundText:
.44fb	a0 01		ldy #$01			ldy 	#1 							; get first character
.44fd	b1 2a		lda ($2a),y			lda 	(temp0),y
.44ff	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4501	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4503	90 11		bcc $4516			bcc 	_DTIsPunctuation
.4505	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4507	b0 0d		bcs $4516			bcs 	_DTIsPunctuation
.4509	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.450b	20 71 44	jsr $4471			jsr 	DTSwitchMode
.450e	a9 83		lda #$83			lda 	#LTYKeyword
.4510	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.4513	4c 20 45	jmp $4520			jmp 	_DTPrint
.4516					_DTIsPunctuation:
.4516	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.4518	20 71 44	jsr $4471			jsr 	DTSwitchMode
.451b	a9 82		lda #$82			lda 	#LTYPunctuation
.451d	20 34 44	jsr $4434			jsr 	ListOutputCharacter
.4520					_DTPrint:
.4520	a9 01		lda #$01			lda 	#1 							; fix case.
.4522	20 0c 44	jsr $440c			jsr 	DTPrintLengthPrefix 		; print it out.
.4525	a0 00		ldy #$00			ldy 	#0
.4527	b1 2a		lda ($2a),y			lda 	(temp0),y
.4529	a8		tay				tay
.452a	b1 2a		lda ($2a),y			lda 	(temp0),y
.452c	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.452e	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4530	90 04		bcc $4536			bcc 	_DTIsNowPunctuation
.4532	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4534	90 05		bcc $453b			bcc 	_DTPExit
.4536					_DTIsNowPunctuation:
.4536	a9 01		lda #$01			lda 	#1
.4538	8d d3 0d	sta $0dd3			sta		LastCharacterClass
.453b					_DTPExit:
.453b	7a		ply				ply
.453c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0dd6					currentSet:
>0dd6							.fill 	1
.453d					TokenSearch:
.453d	da		phx				phx
.453e	5a		phy				phy
.453f	a9 00		lda #$00			lda 	#0
.4541	8d d6 0d	sta $0dd6			sta 	currentSet
.4544					_TSLoop:
.4544	ad d6 0d	lda $0dd6			lda 	currentSet 					; 2 x currentset in X
.4547	0a		asl a				asl 	a
.4548	aa		tax				tax
.4549	bd cd 47	lda $47cd,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.454c	85 2a		sta $2a				sta 	temp0
.454e	bd ce 47	lda $47ce,x			lda 	TokenTableAddress+1,x
.4551	85 2b		sta $2b				sta 	temp0+1
.4553	20 78 45	jsr $4578			jsr 	TokenSearchOne 				; search one table
.4556	b0 0d		bcs $4565			bcs 	_TSFound 					; found a token.
.4558	ee d6 0d	inc $0dd6			inc 	currentSet 					; next set
.455b	ad d6 0d	lda $0dd6			lda 	currentSet
.455e	c9 04		cmp #$04			cmp 	#4
.4560	d0 e2		bne $4544			bne 	_TSLoop 					; back if not done all four.
.4562	18		clc				clc 								; clear carry and exit
.4563	90 10		bcc $4575			bcc 	_TSExit
.4565					_TSFound:
.4565	48		pha				pha 								; save token
.4566	ad d6 0d	lda $0dd6			lda 	currentSet					; if set zero no shift
.4569	f0 05		beq $4570			beq 	_TSNoShift
.456b	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.456d	20 29 46	jsr $4629			jsr 	TokenWrite
.4570					_TSNoShift:
.4570	68		pla				pla 								; get token back
.4571	20 29 46	jsr $4629			jsr 	TokenWrite 					; write it
.4574	38		sec				sec 								; carry set indicating success
.4575					_TSExit:
.4575	7a		ply				ply
.4576	fa		plx				plx
.4577	60		rts				rts
.4578					TokenSearchOne:
.4578	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.457a					_TSOLoop:
.457a	a0 00		ldy #$00			ldy 	#0
.457c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.457e	f0 26		beq $45a6			beq 	_TSOFail 					; if zero, end of table
.4580	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4583	f0 11		beq $4596			beq 	_TSOCheckText
.4585					_TSONext:
.4585	e8		inx				inx 								; bump token
.4586	a0 00		ldy #$00			ldy 	#0							; get length
.4588	b1 2a		lda ($2a),y			lda 	(temp0),y
.458a	38		sec				sec
.458b	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.458d	85 2a		sta $2a				sta 	temp0
.458f	90 e9		bcc $457a			bcc 	_TSOLoop
.4591	e6 2b		inc $2b				inc 	temp0+1
.4593	4c 7a 45	jmp $457a			jmp 	_TSOLoop
.4596					_TSOCheckText:
.4596	a8		tay				tay 								; compare length downto 1.
.4597					_TSOCheckLoop:
.4597	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.4599	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.459c	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.459e	d0 e5		bne $4585			bne 	_TSONext 					; different goto next.
.45a0	88		dey				dey 								; do all
.45a1	d0 f4		bne $4597			bne 	_TSOCheckLoop
.45a3	8a		txa				txa 								; return token in A and carry set
.45a4	38		sec				sec
.45a5	60		rts				rts
.45a6					_TSOFail:
.45a6	18		clc				clc
.45a7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.45a8					TokTest:
.45a8	a2 ff		ldx #$ff				ldx 	#$FF
.45aa	9a		txs					txs
.45ab	a9 c8		lda #$c8			lda 	#(TokenText1) & $FF
.45ad	85 28		sta $28				sta 	codePtr
.45af	a9 45		lda #$45			lda 	#(TokenText1) >> 8
.45b1	85 29		sta $29				sta 	1+(codePtr)
.45b3	20 c8 45	jsr $45c8				jsr 	Tokenise
.45b6	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.45b8	bd c8 45	lda $45c8,x	_TokCheck:	lda 	TokenBytes1,x
.45bb	dd da 0d	cmp $0dda,x				cmp 	tokenBuffer,x
.45be	d0 fe		bne $45be	_TokFail:	bne 	_TokFail	 		; error.
.45c0	e8		inx					inx
.45c1	c9 80		cmp #$80				cmp 	#$80
.45c3	d0 f3		bne $45b8				bne 	_TokCheck
.45c5	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.45c8					TokenText1:
.45c8					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0dd7					tokenHeader:
>0dd7							.fill 	3
.0dda					tokenBuffer:
>0dda							.fill 	256
.0eda					tokenBufferIndex:
>0eda							.fill 	1
.45c8					Tokenise:
.45c8	20 40 46	jsr $4640			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.45cb					TokeniseASCIIZ:
.45cb	20 51 46	jsr $4651			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.45ce	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.45d0	8d da 0e	sta $0eda			sta 	tokenBufferIndex
.45d3	a8		tay				tay 								; start pointer
.45d4	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.45d6	8d da 0d	sta $0dda			sta 	tokenBuffer
.45d9					_TokLoop:
.45d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.45db	f0 46		beq $4623			beq 	_TokExit 					; if zero, then exit.
.45dd	c8		iny				iny 								; skip over spaces.
.45de	c9 20		cmp #$20			cmp 	#" "
.45e0	f0 f7		beq $45d9			beq 	_TokLoop
.45e2	88		dey				dey 								; point back to character.
.45e3	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.45e5	f0 18		beq $45ff			beq 	_TokHexConst
.45e7	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.45e9	f0 23		beq $460e			beq 	_TokQString
.45eb	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.45ed	b0 26		bcs $4615			bcs 	_TokPunctuation
.45ef	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.45f1	b0 29		bcs $461c			bcs 	_TokIdentifier
.45f3	c9 3a		cmp #$3a			cmp 	#"9"+1
.45f5	b0 1e		bcs $4615			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.45f7	c9 30		cmp #$30			cmp 	#"0"
.45f9	90 1a		bcc $4615			bcc 	_TokPunctuation 			; < 0, punctuation.
.45fb	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.45fd	d0 08		bne $4607			bne 	_TokConst
.45ff					_TokHexConst:
.45ff	c8		iny				iny									; consume token.
.4600	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.4602	20 29 46	jsr $4629			jsr 	TokenWrite
.4605	a9 10		lda #$10			lda 	#16
.4607					_TokConst:
.4607	20 0d 47	jsr $470d			jsr 	TokeniseInteger
.460a	b0 cd		bcs $45d9			bcs 	_TokLoop
.460c	90 18		bcc $4626			bcc 	_TokFail
.460e					_TokQString:
.460e	20 a1 47	jsr $47a1			jsr 	TokeniseString
.4611	b0 c6		bcs $45d9			bcs 	_TokLoop
.4613	90 11		bcc $4626			bcc 	_TokFail
.4615					_TokPunctuation:
.4615	20 80 47	jsr $4780			jsr 	TokenisePunctuation
.4618	b0 bf		bcs $45d9			bcs 	_TokLoop
.461a	90 0a		bcc $4626			bcc 	_TokFail
.461c					_TokIdentifier:
.461c	20 80 46	jsr $4680			jsr 	TokeniseIdentifier
.461f	b0 b8		bcs $45d9			bcs 	_TokLoop
.4621	90 03		bcc $4626			bcc 	_TokFail
.4623					_TokExit:
.4623	a9 01		lda #$01			lda 	#1
.4625	60		rts				rts
.4626					_TokFail:
.4626	a9 00		lda #$00			lda 	#0
.4628	60		rts				rts
.4629					TokenWrite:
.4629	85 32		sta $32				sta 	tempShort 					; save XA
.462b	48		pha				pha
.462c	da		phx				phx
.462d	a5 32		lda $32				lda 	tempShort
.462f	ae da 0e	ldx $0eda			ldx 	tokenBufferIndex 			; geet index
.4632	9d da 0d	sta $0dda,x			sta 	tokenBuffer,x 				; write byte to buffer
.4635	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.4637	9d db 0d	sta $0ddb,x			sta 	tokenBuffer+1,x
.463a	ee da 0e	inc $0eda			inc 	tokenBufferIndex 			; bump index
.463d	fa		plx				plx
.463e	68		pla				pla
.463f	60		rts				rts
.4640					TokeniseMakeASCIIZ:
.4640	a0 00		ldy #$00			ldy 	#0							; get length of string.
.4642	b1 28		lda ($28),y			lda 	(codePtr),y
.4644	a8		tay				tay
.4645	c8		iny				iny 								; +1, the NULL goes here.
.4646	a9 00		lda #$00			lda 	#0
.4648	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.464a	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.464c	d0 02		bne $4650			bne 	_TMKAExit
.464e	e6 29		inc $29				inc 	codePtr+1
.4650					_TMKAExit:
.4650	60		rts				rts
.4651					TokeniseFixCase:
.4651	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.4653	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.4655					_TFCFlipQ:
.4655	8a		txa				txa
.4656	49 01		eor #$01			eor 	#1
.4658	aa		tax				tax
.4659					_TFCLoop:
.4659	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.465b	f0 22		beq $467f			beq 	_TFCExit 					; if zero exit.
.465d	c9 20		cmp #$20			cmp 	#32 						; if control
.465f	90 1a		bcc $467b			bcc 	_TFCControl
.4661	c8		iny				iny 								; preconsume
.4662	c9 22		cmp #$22			cmp 	#'"'
.4664	f0 ef		beq $4655			beq 	_TFCFlipQ
.4666	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4668	90 ef		bcc $4659			bcc 	_TFCLoop
.466a	c9 7b		cmp #$7b			cmp 	#"z"+1
.466c	b0 eb		bcs $4659			bcs 	_TFCLoop
.466e	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4670	d0 e7		bne $4659			bne 	_TFCLoop
.4672	88		dey				dey
.4673	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.4675					_TFCWrite:
.4675	91 28		sta ($28),y			sta 	(codePtr),y
.4677	c8		iny				iny
.4678	4c 59 46	jmp $4659			jmp 	_TFCLoop
.467b					_TFCControl:
.467b	a9 20		lda #$20			lda 	#" "
.467d	d0 f6		bne $4675			bne 	_TFCWrite
.467f					_TFCExit:
.467f	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4680					TokeniseIdentifier:
.4680	a2 00		ldx #$00			ldx 	#0
.4682					_TICopyID:
.4682	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.4684	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.4686	f0 16		beq $469e			beq 	_TICopyUnderscore
.4688	c9 2e		cmp #$2e			cmp 	#"."
.468a	f0 14		beq $46a0			beq 	_TICopyIn
.468c	c9 30		cmp #$30			cmp 	#"0"
.468e	90 1b		bcc $46ab			bcc 	_TIEndCopy
.4690	c9 3a		cmp #$3a			cmp 	#"9"+1
.4692	90 0c		bcc $46a0			bcc 	_TICopyIn
.4694	c9 41		cmp #$41			cmp 	#"A"
.4696	90 13		bcc $46ab			bcc 	_TIEndCopy
.4698	c9 5b		cmp #$5b			cmp 	#"Z"+1
.469a	b0 0f		bcs $46ab			bcs		_TIEndCopy
.469c	90 02		bcc $46a0			bcc 	_TICopyIn
.469e					_TICopyUnderScore:
.469e	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.46a0					_TICopyIn:
.46a0	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.46a1	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46a4	8e cf 0a	stx $0acf			stx 	convertBuffer
.46a7	c8		iny				iny 								; next character
.46a8	4c 82 46	jmp $4682			jmp 	_TICopyID 					; loop round
.46ab					_TIEndCopy:
.46ab	a9 24		lda #$24			lda 	#"$"
.46ad	20 00 47	jsr $4700			jsr 	TIDCheckCopy
.46b0	a9 23		lda #$23			lda 	#"#"
.46b2	20 00 47	jsr $4700			jsr 	TIDCheckCopy
.46b5	a9 28		lda #$28			lda 	#"("
.46b7	20 00 47	jsr $4700			jsr 	TIDCheckCopy
.46ba	20 3d 45	jsr $453d			jsr 	TokenSearch 				; is it a token
.46bd	b0 3f		bcs $46fe			bcs 	_TIExit 					; if so, then exit.
.46bf	5a		phy				phy
.46c0	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.46c2	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.46c5	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.46c8	c9 28		cmp #$28			cmp 	#"("
.46ca	d0 02		bne $46ce			bne 	_TINotArray
.46cc	ca		dex				dex 								; yes, remove it and convert to array.
.46cd	c8		iny				iny
.46ce					_TINotArray:
.46ce	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.46d1	c9 24		cmp #$24			cmp 	#"$"
.46d3	d0 03		bne $46d8			bne 	_TINotString
.46d5	ca		dex				dex
.46d6	c8		iny				iny
.46d7	c8		iny				iny
.46d8					_TINotString:
.46d8	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.46db	c9 23		cmp #$23			cmp 	#"#"
.46dd	d0 05		bne $46e4			bne 	_TINotFloat
.46df	ca		dex				dex
.46e0	c8		iny				iny
.46e1	c8		iny				iny
.46e2	c8		iny				iny
.46e3	c8		iny				iny
.46e4					_TINotFloat:
.46e4	e8		inx				inx 								; write end marker for identifier.
.46e5	98		tya				tya
.46e6	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.46e9	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.46ec	a2 01		ldx #$01			ldx 	#1
.46ee					_TIOutput:
.46ee	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.46f1	29 3f		and #$3f			and 	#$3F
.46f3	48		pha				pha
.46f4	20 29 46	jsr $4629			jsr 	TokenWrite
.46f7	e8		inx				inx
.46f8	68		pla				pla
.46f9	c9 3a		cmp #$3a			cmp 	#$3A
.46fb	90 f1		bcc $46ee			bcc 	_TIOutput
.46fd	7a		ply				ply
.46fe					_TIExit:
.46fe	38		sec				sec 								; this can't fail.
.46ff	60		rts				rts
.4700					TIDCheckCopy:
.4700	d1 28		cmp ($28),y			cmp 	(codePtr),y
.4702	d0 08		bne $470c			bne 	_TIDCCExit
.4704	e8		inx				inx
.4705	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4708	8e cf 0a	stx $0acf			stx 	convertBuffer
.470b	c8		iny				iny
.470c					_TIDCCExit:
.470c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.470d					TokeniseInteger:
.470d	85 2c		sta $2c				sta 	temp1 						; save base
.470f	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.4711	8e cf 0a	stx $0acf			stx 	convertBuffer
.4714					_TIGetChars:
.4714	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.4716	c9 30		cmp #$30			cmp 	#"0"
.4718	90 1f		bcc $4739			bcc 	_TIEndGet
.471a	c9 3a		cmp #$3a			cmp 	#"9"+1
.471c	90 10		bcc $472e			bcc 	_TIHaveChar
.471e	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.4720	c9 0a		cmp #$0a			cmp 	#10
.4722	f0 15		beq $4739			beq 	_TIEndGet
.4724	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.4726	c9 41		cmp #$41			cmp 	#"A"
.4728	90 0f		bcc $4739			bcc 	_TIEndGet
.472a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.472c	b0 0b		bcs $4739			bcs 	_TIEndGet
.472e					_TIHaveChar:
.472e	e8		inx				inx 								; write into buffer.
.472f	8e cf 0a	stx $0acf			stx 	convertBuffer
.4732	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4735	c8		iny				iny 								; next char
.4736	4c 14 47	jmp $4714			jmp 	_TIGetChars
.4739					_TIEndGet:
.4739	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.473b	f0 1a		beq $4757			beq 	_TIFail
.473d	5a		phy				phy
.473e	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.4740	85 2a		sta $2a				sta 	temp0
.4742	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.4744	85 2b		sta $2b				sta 	1+(temp0)
.4746	a9 00		lda #$00			lda 	#0 							; stack level 0
.4748	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.474a	a2 1a		ldx #$1a		ldx	#26
.474c	20 65 40	jsr $4065		jsr	mainHandler
.474f	7a		ply				ply
.4750	90 05		bcc $4757			bcc 	_TIFail 					; didn't convert.
.4752	20 59 47	jsr $4759			jsr 	TIRecursiveOut 				; recursive output ?
.4755	38		sec				sec
.4756	60		rts				rts
.4757					_TIFail:
.4757	18		clc				clc
.4758	60		rts				rts
.4759					TIRecursiveOut:
.4759	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.475b	29 3f		and #$3f			and 	#$3F
.475d	09 40		ora #$40			ora 	#$40
.475f	48		pha				pha
.4760	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.4762	29 c0		and #$c0			and 	#$C0
.4764	05 a0		ora $a0				ora 	esInt1
.4766	05 a8		ora $a8				ora 	esInt2
.4768	05 b0		ora $b0				ora 	esInt3
.476a	f0 10		beq $477c			beq 	_TIRONoRecursion
.476c	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.476e					_TIROShift:
.476e	46 b0		lsr $b0				lsr 	esInt3
.4770	66 a8		ror $a8				ror 	esInt2
.4772	66 a0		ror $a0				ror 	esInt1
.4774	66 98		ror $98				ror 	esInt0
.4776	ca		dex				dex
.4777	d0 f5		bne $476e			bne 	_TIROShift
.4779	20 59 47	jsr $4759			jsr 	TIRecursiveOut 				; call recursively
.477c					_TIRONoRecursion:
.477c	68		pla				pla 								; pull the old bit.
.477d	4c 29 46	jmp $4629			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.4780					TokenisePunctuation:
.4780	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.4782	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4785	c8		iny				iny
.4786	b1 28		lda ($28),y			lda 	(codePtr),y
.4788	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.478b	c8		iny				iny 								; Y is +2
.478c	a9 02		lda #$02			lda 	#2 							; 2 character string.
.478e	8d cf 0a	sta $0acf			sta 	convertBuffer
.4791	20 3d 45	jsr $453d			jsr 	TokenSearch 				; search for that token.
.4794	b0 0a		bcs $47a0			bcs 	_TIFound
.4796	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4799	88		dey				dey 								; Y is now +1
.479a	20 3d 45	jsr $453d			jsr 	TokenSearch 				; search for that token.
.479d	b0 01		bcs $47a0			bcs 	_TIFound
.479f	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.47a0					_TIFound:
.47a0	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.47a1					TokeniseString:
.47a1	c8		iny				iny 								; skip opening quote
.47a2	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.47a4	84 2a		sty $2a				sty 	temp0 						; save start.
.47a6					_TSGetLength:
.47a6	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.47a8	f0 21		beq $47cb			beq 	_TSFail						; end of line, fail
.47aa	c8		iny				iny
.47ab	e8		inx				inx
.47ac	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.47ae	d0 f6		bne $47a6			bne 	_TSGetLength
.47b0	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.47b2	20 29 46	jsr $4629			jsr 	TokenWrite
.47b5	8a		txa				txa 								; output length
.47b6	20 29 46	jsr $4629			jsr 	TokenWrite
.47b9	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.47bb	e0 00		cpx #$00			cpx 	#0 							; check ended
.47bd	f0 09		beq $47c8			beq 	_TSExit
.47bf					_TSOutput:
.47bf	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.47c1	20 29 46	jsr $4629			jsr 	TokenWrite
.47c4	c8		iny				iny
.47c5	ca		dex				dex
.47c6	d0 f7		bne $47bf			bne 	_TSOutput
.47c8					_TSExit:
.47c8	c8		iny				iny 								; skip ending quote
.47c9	38		sec				sec 								; return CS.
.47ca	60		rts				rts
.47cb					_TSFail:
.47cb	18		clc				clc
.47cc	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.47cd					TokenTableAddress:
>47cd	d5 47						.word 	Group0Text
>47cf	b2 49						.word 	Group1Text
>47d1	ff 4a						.word 	Group2Text
>47d3	50 4b						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.47d5					Group0Text:
>47d5	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>47d9	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>47dc	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>47e0	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>47e3	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>47e6	01 be					.byte $01,$be                          ; $8b >
>47e8	01 bc					.byte $01,$bc                          ; $8c <
>47ea	01 bd					.byte $01,$bd                          ; $8d =
>47ec	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>47ef	01 ab					.byte $01,$ab                          ; $8f +
>47f1	01 ad					.byte $01,$ad                          ; $90 -
>47f3	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>47f6	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>47f9	01 aa					.byte $01,$aa                          ; $93 *
>47fb	01 af					.byte $01,$af                          ; $94 /
>47fd	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>4801	01 de					.byte $01,$de                          ; $96 ^
>4803	01 a1					.byte $01,$a1                          ; $97 !
>4805	01 bf					.byte $01,$bf                          ; $98 ?
>4807	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>480e	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>4814	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>4818	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>481b	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>4823	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>4829	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>482e	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>4833	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>4838	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>483e	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>4846	01 a8					.byte $01,$a8                          ; $a4 (
>4848	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>484d	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>4852	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4857	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>485f	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4864	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4869	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>486f	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4874	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4879	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>487e	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4885	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>488c	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>4891	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4898	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>489f	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>48a5	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>48ac	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>48b2	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>48ba	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>48c0	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>48c5	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>48cb	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>48d1	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>48d7	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>48dc	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>48e1	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>48e8	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>48ef	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>48f7	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>48ff	01 c0					.byte $01,$c0                          ; $c3 @
>4901	01 fe					.byte $01,$fe                          ; $c4 ~
>4903	01 a6					.byte $01,$a6                          ; $c5 &
>4905	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>490b	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>4913	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>4917	01 a9					.byte $01,$a9                          ; $c9 )
>4919	01 ba					.byte $01,$ba                          ; $ca :
>491b	01 ac					.byte $01,$ac                          ; $cb ,
>491d	01 bb					.byte $01,$bb                          ; $cc ;
>491f	01 a7					.byte $01,$a7                          ; $cd '
>4921	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>4924	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>4929	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>492e	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>4934	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>4938	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>493c	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>4940	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>4946	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>494b	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>494f	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4955	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>495a	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>4960	02 41 d4				.byte $02,$41,$d4                      ; $db at
>4963	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4968	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>496f	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4974	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4979	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>497e	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>4982	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4988	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>498c	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>4993	01 ae					.byte $01,$ae                          ; $e5 .
>4995	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>499a	01 a3					.byte $01,$a3                          ; $e7 #
>499c	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>49a2	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $e9 text
>49a7	04 54 59 50 c5				.byte $04,$54,$59,$50,$c5              ; $ea type
>49ac	04 54 49 4d c5				.byte $04,$54,$49,$4d,$c5              ; $eb time
>49b1	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.49b2					Group1Text:
>49b2	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>49b7	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>49bc	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>49c1	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>49c5	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>49cb	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>49cf	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>49d4	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>49dc	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>49e0	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>49e5	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>49ea	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>49ef	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>49f5	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>49fc	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>4a00	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4a06	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>4a0a	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>4a0e	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>4a12	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>4a16	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>4a1a	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>4a1e	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>4a22	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>4a26	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>4a2a	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>4a2e	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>4a32	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>4a36	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>4a3a	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>4a3e	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>4a42	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>4a46	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>4a4a	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>4a4e	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>4a52	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>4a56	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>4a5a	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>4a5e	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>4a62	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4a66	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4a6a	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>4a6e	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>4a72	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4a76	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4a7a	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4a7e	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>4a82	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4a86	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4a8a	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4a8e	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>4a92	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4a96	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4a9a	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4a9e	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>4aa2	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4aa6	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4aaa	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4aae	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>4ab2	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4ab6	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4aba	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4abe	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>4ac2	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4ac6	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4aca	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4ace	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>4ad2	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4ad6	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4ada	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4ade	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>4ae2	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4ae6	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4aea	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4aee	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>4af2	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4af6	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4afa	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4afe	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.4aff					Group2Text:
>4aff	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4b05	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4b0b	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>4b11	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>4b16	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>4b1e	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>4b25	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>4b29	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>4b2e	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>4b34	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>4b39	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $90 plot
>4b3e	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $91 line
>4b43	05 50 41 49 4e d4			.byte $05,$50,$41,$49,$4e,$d4          ; $92 paint
>4b49	05 53 4f 55 4e c4			.byte $05,$53,$4f,$55,$4e,$c4          ; $93 sound
>4b4f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.4b50					Group3Text:
>4b50	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>4b57	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4b5e	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>4b66	58 a8
>4b68	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4b70	59 a8
>4b72	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>4b77	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4b7e	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4b85	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4b8c	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4b93	08 50 4c 41 59 49 4e 47			.byte $08,$50,$4c,$41,$59,$49,$4e,$47,$a8 ; $8f playing(
>4b9b	a8
>4b9c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4b9d					tokeniserHandler:
.4b9d	7c a0 4b	jmp ($4ba0,x)			jmp 	(tokeniserVectors,x)
.4ba0					tokeniserVectors:
>4ba0	ac 4b					.word _DummyControlHandler ; index 0
>4ba2	32 43					.word Detokenise           ; index 2
>4ba4	26 43					.word ListLine             ; index 4
>4ba6	a8 45					.word TokTest              ; index 6
>4ba8	c8 45					.word Tokenise             ; index 8
>4baa	cb 45					.word TokeniseASCIIZ       ; index 10
.4bac					_DummyControlHandler:
.4bac	60		rts			rts

;******  Return to file: basic.asm

.4bad					section_end_tokeniser:
.4bad					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4bad					AccessArray:
.4bad	da		phx				phx
.4bae	e8		inx				inx
.4baf	20 73 4c	jsr $4c73			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4bb2	fa		plx				plx
.4bb3	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4bb5	85 2a		sta $2a				sta 	temp0
.4bb7	b5 a0		lda $a0,x			lda 	esInt1,x
.4bb9	85 2b		sta $2b				sta 	temp0+1
.4bbb	da		phx				phx
.4bbc	5a		phy				phy
.4bbd					_AAFollow:
.4bbd	a0 00		ldy #$00			ldy 	#0
.4bbf	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bc1	48		pha				pha
.4bc2	c8		iny				iny
.4bc3	b1 2a		lda ($2a),y			lda 	(temp0),y
.4bc5	85 2b		sta $2b				sta 	temp0+1
.4bc7	68		pla				pla
.4bc8	85 2a		sta $2a				sta 	temp0
.4bca	e8		inx				inx 								; advance to next stack slot.
.4bcb	a0 00		ldy #$00			ldy 	#0
.4bcd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4bcf	d5 98		cmp $98,x			cmp 	esInt0,x
.4bd1	c8		iny				iny
.4bd2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4bd4	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4bd6	29 7f		and #$7f			and 	#$7F
.4bd8	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4bda	90 4e		bcc $4c2a			bcc 	_AABadIndex 				; failed on index if max index < required.
.4bdc	18		clc				clc
.4bdd	a5 2a		lda $2a				lda 	temp0
.4bdf	69 02		adc #$02			adc 	#2
.4be1	85 2a		sta $2a				sta 	temp0
.4be3	90 02		bcc $4be7			bcc 	_AANoCarry
.4be5	e6 2b		inc $2b				inc 	temp0+1
.4be7					_AANoCarry:
.4be7	b5 98		lda $98,x			lda 	esInt0,x
.4be9	85 2e		sta $2e				sta 	temp2
.4beb	b5 a0		lda $a0,x			lda 	esInt1,x
.4bed	85 2f		sta $2f				sta 	temp2+1
.4bef	ac dd 0e	ldy $0edd			ldy 	varType
.4bf2	b9 cd 4c	lda $4ccd,y			lda 	CAActualSize-$3A,y
.4bf5	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4bf7	30 02		bmi $4bfb			bmi 	_AANotPointer
.4bf9	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4bfb					_AANotPointer:
.4bfb	20 77 4d	jsr $4d77			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4bfe	18		clc				clc
.4bff	a5 2a		lda $2a				lda 	temp0
.4c01	65 2e		adc $2e				adc 	temp2
.4c03	85 2a		sta $2a				sta 	temp0
.4c05	a5 2b		lda $2b				lda 	temp0+1
.4c07	65 2f		adc $2f				adc 	temp2+1
.4c09	85 2b		sta $2b				sta 	temp0+1
.4c0b	b5 91		lda $91,x			lda 	esType+1,x
.4c0d	30 07		bmi $4c16			bmi 	_AAUsedAllIndices
.4c0f	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4c11	10 12		bpl $4c25			bpl 	_AABadDepth 				; no, too many indexes.
.4c13	4c bd 4b	jmp $4bbd			jmp 	_AAFollow 					; otherwise follow them.
.4c16					_AAUsedAllIndices:
.4c16	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4c18	30 0b		bmi $4c25			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4c1a	7a		ply				ply
.4c1b	fa		plx				plx
.4c1c	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4c1e	95 98		sta $98,x			sta 	esInt0,x
.4c20	a5 2b		lda $2b				lda 	temp0+1
.4c22	95 a0		sta $a0,x			sta 	esInt1,x
.4c24	60		rts				rts
.4c25					_AABadDepth:
.4c25	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4c27	20 27 15	jsr $1527		jsr	errorHandler
.4c2a					_AABadIndex:
.4c2a	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4c2c	20 27 15	jsr $1527		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0edb					elementSize:
>0edb							.fill	 1
.4c2f					CreateArray:
.4c2f	20 04 4e	jsr $4e04			jsr 	AccessSetup 				; set up the basic stuff, hashtables and so on.
.4c32	ad dd 0e	lda $0edd			lda 	varType 					; is the variable type an array
.4c35	4a		lsr a				lsr 	a
.4c36	90 36		bcc $4c6e			bcc 	CANotArray 					; no, cause an error.
.4c38	20 06 4f	jsr $4f06			jsr 	FindVariable 				; does the variable exist already
.4c3b	b0 2c		bcs $4c69			bcs 	CAFound 					; if so, error cannot redefine it.
.4c3d	20 3f 4e	jsr $4e3f			jsr 	CreateVariable 				; create the variable entry.
.4c40	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4c42	48		pha				pha
.4c43	a5 2b		lda $2b				lda 	temp0+1
.4c45	48		pha				pha
.4c46	a2 00		ldx #$00			ldx 	#0
.4c48	20 73 4c	jsr $4c73			jsr 	GetArrayDimensions 			; get the array dimensions
.4c4b	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.4c4d	20 a3 4c	jsr $4ca3			jsr 	CreateArrayLevel 			; level to YA
.4c50	aa		tax				tax 								; level now in YX
.4c51	68		pla				pla 								; get address back to temp0 to write.
.4c52	85 2b		sta $2b				sta 	temp0+1
.4c54	68		pla				pla
.4c55	85 2a		sta $2a				sta 	temp0
.4c57	98		tya				tya 								; write YX there (address in original record)
.4c58	a0 06		ldy #$06			ldy 	#6
.4c5a	91 2a		sta ($2a),y			sta 	(temp0),y
.4c5c	88		dey				dey
.4c5d	8a		txa				txa
.4c5e	91 2a		sta ($2a),y			sta 	(temp0),y
.4c60	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y and exit.
.4c63	60		rts				rts
.4c64					CASize:
.4c64	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.4c66	20 27 15	jsr $1527		jsr	errorHandler
.4c69					CAFound:
.4c69	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.4c6b	20 27 15	jsr $1527		jsr	errorHandler
.4c6e					CANotArray:
.4c6e	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4c70	20 27 15	jsr $1527		jsr	errorHandler
.4c73					GetArrayDimensions:
.4c73	ad dd 0e	lda $0edd			lda 	varType 					; push variable type on the stack.
.4c76	48		pha				pha
.4c77	ac de 0e	ldy $0ede			ldy 	varEnd
.4c7a					_CAGetDimensions:
.4c7a	8a		txa				txa 								; get the next level
.4c7b	a2 0a		ldx #$0a		ldx	#10
.4c7d	20 65 40	jsr $4065		jsr	mainHandler
.4c80	aa		tax				tax
.4c81	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4c83	29 e0		and #$e0			and 	#$E0
.4c85	15 a8		ora $a8,x			ora 	esInt2,x
.4c87	15 b0		ora $b0,x			ora 	esInt3,x
.4c89	d0 d9		bne $4c64			bne 	CASize
.4c8b	e8		inx				inx 								; next level.
.4c8c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4c8e	c8		iny				iny
.4c8f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4c91	f0 e7		beq $4c7a			beq 	_CAGetDimensions
.4c93	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4c95	d0 cd		bne $4c64			bne 	CASize
.4c97	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4c99	95 90		sta $90,x			sta 	esType,x 					; dimensions there are, it marks the end.
.4c9b	68		pla				pla 								; restore the variable type ($3A-$3F)
.4c9c	8d dd 0e	sta $0edd			sta 	varType
.4c9f	8c de 0e	sty $0ede			sty 	varEnd 						; save exit Y value, after dimensions
.4ca2	60		rts				rts
.4ca3					CreateArrayLevel:
.4ca3	ac dd 0e	ldy $0edd			ldy 	varType
.4ca6	b9 cd 4c	lda $4ccd,y			lda 	CAActualSize-$3A,y 			; $3A is the first type marker.
.4ca9	8d db 0e	sta $0edb			sta 	elementSize 				; get element size this level.
.4cac	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4cae	30 05		bmi $4cb5			bmi 	_CANotPointer 				; then its values, keep elementsize
.4cb0	a9 02		lda #$02			lda 	#2 							; use array of pointers, each element is 2.
.4cb2	8d db 0e	sta $0edb			sta 	elementSize
.4cb5					_CANotPointer:
.4cb5	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4cb7	85 2a		sta $2a				sta 	temp0
.4cb9	48		pha				pha
.4cba	a5 36		lda $36				lda 	lowMemory+1
.4cbc	85 2b		sta $2b				sta 	temp0+1
.4cbe	48		pha				pha
.4cbf	20 40 4d	jsr $4d40			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4cc2	a0 00		ldy #$00			ldy 	#0
.4cc4	b5 98		lda $98,x			lda 	esInt0,x
.4cc6	91 2a		sta ($2a),y			sta 	(temp0),y
.4cc8	c8		iny				iny
.4cc9	b5 a0		lda $a0,x			lda 	esInt1,x
.4ccb	91 2a		sta ($2a),y			sta 	(temp0),y
.4ccd	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4ccf	30 06		bmi $4cd7			bmi 	_CALNotLast
.4cd1	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4cd3	09 80		ora #$80			ora 	#$80
.4cd5	91 2a		sta ($2a),y			sta 	(temp0),y
.4cd7					_CALNotLast:
.4cd7	a9 02		lda #$02			lda 	#2
.4cd9	20 fd 4c	jsr $4cfd			jsr 	_CALAddTemp0
.4cdc	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4cde	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4ce0	b5 a0		lda $a0,x			lda 	esInt1,x
.4ce2	95 b0		sta $b0,x			sta 	esInt3,x
.4ce4					_CALClear:
.4ce4	20 0d 4d	jsr $4d0d			jsr 	EraseOneElement
.4ce7	ad db 0e	lda $0edb			lda 	elementSize 				; move to next element
.4cea	20 fd 4c	jsr $4cfd			jsr 	_CALAddTemp0
.4ced	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4cef	d0 02		bne $4cf3			bne 	_CALNoBorrow
.4cf1	d6 b0		dec $b0,x			dec 	esInt3,x
.4cf3					_CALNoBorrow:
.4cf3	d6 a8		dec $a8,x			dec 	esInt2,x
.4cf5	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4cf7	10 eb		bpl $4ce4			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4cf9	68		pla				pla 								; restore the start of this into YA.
.4cfa	a8		tay				tay
.4cfb	68		pla				pla
.4cfc	60		rts				rts
.4cfd					_CALAddTemp0:
.4cfd	18		clc				clc
.4cfe	65 2a		adc $2a				adc 	temp0
.4d00	85 2a		sta $2a				sta 	temp0
.4d02	90 02		bcc $4d06			bcc 	_CALANoCarry
.4d04	e6 2b		inc $2b				inc 	temp0+1
.4d06					_CALANoCarry:
.4d06	60		rts				rts
.4d07					CAActualSize:
>4d07	04 04						.byte 	VarISize,VarISize
>4d09	02 02						.byte 	VarSSize,VarSSize
>4d0b	06 06						.byte 	VarFSize,VarFSize
.4d0d					EraseOneElement:
.4d0d	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4d0f	10 09		bpl $4d1a			bpl 	_EOESubArray
.4d11	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4d13	ad dd 0e	lda $0edd			lda 	varType
.4d16	20 a8 4e	jsr $4ea8			jsr 	ZeroTemp0Y
.4d19	60		rts				rts
.4d1a					_EOESubArray:
.4d1a	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4d1c	48		pha				pha
.4d1d	a5 2b		lda $2b				lda 	temp0+1
.4d1f	48		pha				pha
.4d20	ad db 0e	lda $0edb			lda 	elementSize 				; save element size
.4d23	48		pha				pha
.4d24	e8		inx				inx 								; create at next level
.4d25	20 a3 4c	jsr $4ca3			jsr 	CreateArrayLevel
.4d28	ca		dex				dex
.4d29	85 32		sta $32				sta 	tempShort 					; save A
.4d2b	68		pla				pla  								; restore element size.
.4d2c	8d db 0e	sta $0edb			sta 	elementSize
.4d2f	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4d30	85 2b		sta $2b				sta 	temp0+1
.4d32	68		pla				pla
.4d33	85 2a		sta $2a				sta 	temp0
.4d35	98		tya				tya 								; store Y/A there
.4d36	a0 01		ldy #$01			ldy 	#1
.4d38	91 2a		sta ($2a),y			sta 	(temp0),y
.4d3a	a5 32		lda $32				lda 	tempShort
.4d3c	88		dey				dey
.4d3d	91 2a		sta ($2a),y			sta 	(temp0),y
.4d3f	60		rts				rts
.4d40					AllocateArraySpace:
.4d40	18		clc				clc 								; element count + 1 => temp2.
.4d41	b5 98		lda $98,x			lda 	esInt0,x
.4d43	69 01		adc #$01			adc 	#1
.4d45	85 2e		sta $2e				sta 	temp2
.4d47	b5 a0		lda $a0,x			lda 	esInt1,x
.4d49	69 00		adc #$00			adc 	#0
.4d4b	85 2f		sta $2f				sta 	temp2+1
.4d4d	ad db 0e	lda $0edb			lda 	elementSize 				; bytes per element
.4d50	20 77 4d	jsr $4d77			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.4d53	18		clc				clc 								; add 2 for 'max element' byte.
.4d54	a5 2e		lda $2e				lda 	temp2
.4d56	69 02		adc #$02			adc 	#2
.4d58	85 2e		sta $2e				sta 	temp2
.4d5a	90 02		bcc $4d5e			bcc 	_AASNoCarry
.4d5c	e6 2f		inc $2f				inc 	temp2+1
.4d5e					_AASNoCarry:
.4d5e	18		clc				clc 								; add to low memory, allocating space.
.4d5f	a5 35		lda $35				lda 	lowMemory
.4d61	65 2e		adc $2e				adc 	temp2
.4d63	85 35		sta $35				sta 	lowMemory
.4d65	a5 36		lda $36				lda 	lowMemory+1
.4d67	65 2f		adc $2f				adc 	temp2+1
.4d69	85 36		sta $36				sta 	lowMemory+1
.4d6b	b0 05		bcs $4d72			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4d6d	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4d6f	b0 01		bcs $4d72			bcs 	_AASFail
.4d71	60		rts				rts
.4d72					_AASFail:
.4d72	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4d74	20 27 15	jsr $1527		jsr	errorHandler
.4d77					MultiplyTemp2ByA:
.4d77	48		pha				pha
.4d78	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.4d7a	85 30		sta $30				sta 	temp3
.4d7c	a5 2f		lda $2f				lda 	temp2+1
.4d7e	85 31		sta $31				sta 	temp3+1
.4d80	68		pla				pla
.4d81	06 2e		asl $2e				asl 	temp2 						; double it.
.4d83	26 2f		rol $2f				rol 	temp2+1
.4d85	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4d87	f0 15		beq $4d9e			beq 	_MTBAExit
.4d89	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.4d8b	d0 0d		bne $4d9a			bne 	_MTBANotFloat
.4d8d	18		clc				clc 								; so this will make it x 3
.4d8e	a5 2e		lda $2e				lda 	temp2
.4d90	65 30		adc $30				adc 	temp3
.4d92	85 2e		sta $2e				sta 	temp2
.4d94	a5 2f		lda $2f				lda 	temp2+1
.4d96	65 31		adc $31				adc 	temp3+1
.4d98	85 2f		sta $2f				sta 	temp2+1
.4d9a					_MTBANotFloat:
.4d9a	06 2e		asl $2e				asl 	temp2 						; double it.
.4d9c	26 2f		rol $2f				rol 	temp2+1
.4d9e					_MTBAExit:
.4d9e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0edc					varHash:
>0edc							.fill	1
.0edd					varType:
>0edd							.fill 	1
.0ede					varEnd:
>0ede							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4d9f					AccessVariable:
.4d9f	aa		tax				tax 								; stack in X
.4da0	c8		iny				iny									; look at second character
.4da1	b1 28		lda ($28),y			lda 	(codePtr),y
.4da3	88		dey				dey
.4da4	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4da6	d0 15		bne $4dbd			bne 	_AVLong 					; no, always use the hash tables.
.4da8	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4daa	38		sec				sec 	 							; make it 0-25
.4dab	e9 01		sbc #$01			sbc 	#1
.4dad	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4dae	0a		asl a				asl 	a
.4daf	95 98		sta $98,x			sta 	esInt0,x
.4db1	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4db3	95 a0		sta $a0,x			sta 	esInt1,x
.4db5	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4db7	95 90		sta $90,x			sta 	esType,x
.4db9	c8		iny				iny 								; skip over the variable reference in the code.
.4dba	c8		iny				iny  								; (1 letter, 1 type)
.4dbb	8a		txa				txa 								; stack in A to return.
.4dbc	60		rts				rts
.4dbd					_AVLong:
.4dbd	da		phx				phx
.4dbe	20 04 4e	jsr $4e04			jsr 	AccessSetup 				; set up the basic information we need for later
.4dc1	20 06 4f	jsr $4f06			jsr 	FindVariable 				; does the variable exist already ?
.4dc4	b0 0e		bcs $4dd4			bcs 	_AVFound 					; yes, then its found
.4dc6	ad dd 0e	lda $0edd			lda 	varType 					; otherwise, is the variable type an array
.4dc9	4a		lsr a				lsr 	a
.4dca	90 05		bcc $4dd1			bcc 	_AVCanCreate 				; if not, we can autocreate
.4dcc	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4dce	20 27 15	jsr $1527		jsr	errorHandler
.4dd1					_AVCanCreate:
.4dd1	20 3f 4e	jsr $4e3f			jsr 	CreateVariable 				; variable does not exist, create it.
.4dd4					_AVFound:
.4dd4	fa		plx				plx
.4dd5	18		clc				clc 								; copy temp0 (variable record address)
.4dd6	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4dd8	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4dda	95 98		sta $98,x			sta 	esInt0,x
.4ddc	a5 2b		lda $2b				lda 	temp0+1
.4dde	69 00		adc #$00			adc 	#0
.4de0	95 a0		sta $a0,x			sta 	esInt1,x
.4de2	a9 00		lda #$00			lda 	#0
.4de4	95 a8		sta $a8,x			sta 	esInt2,x
.4de6	95 b0		sta $b0,x			sta 	esInt3,x
.4de8	ac dd 0e	ldy $0edd			ldy 	varType 					; get the type ID from the type.
.4deb	b9 c4 4d	lda $4dc4,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4dee	95 90		sta $90,x			sta 	esType,x
.4df0	ac de 0e	ldy $0ede			ldy 	varEnd 						; restore Y
.4df3	ad dd 0e	lda $0edd			lda 	VarType 					; get variable type, put LSB into C
.4df6	4a		lsr a				lsr 	a
.4df7	90 03		bcc $4dfc			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4df9	20 ad 4b	jsr $4bad			jsr 	AccessArray 				; array lookup. if LSB was set.
.4dfc					_AVNotArray:
.4dfc	8a		txa				txa 								; return stack in A and return
.4dfd	60		rts				rts
.4dfe					_AVTypeTable:
>4dfe	80 80						.byte 	$80,$80						; integer
>4e00	c0 c0						.byte 	$C0,$C0 					; string
>4e02	81 81						.byte 	$81,$81 					; float
.4e04					AccessSetup:
.4e04	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4e06	8d dc 0e	sta $0edc			sta 	varHash
.4e09	5a		phy				phy
.4e0a	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4e0c	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4e0e	b0 0b		bcs $4e1b			bcs 	_ASComplete
.4e10	18		clc				clc 								; add to the hash. Might improve this.
.4e11	6d dc 0e	adc $0edc			adc 	varHash
.4e14	8d dc 0e	sta $0edc			sta 	varHash
.4e17	c8		iny				iny 								; next character
.4e18	4c 0a 4e	jmp $4e0a			jmp 	_ASLoop
.4e1b					_ASComplete:
.4e1b	8d dd 0e	sta $0edd			sta 	varType 					; save variable type byte
.4e1e	c8		iny				iny
.4e1f	8c de 0e	sty $0ede			sty 	varEnd 						; save the ending position.
.4e22	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4e23	e9 3a		sbc #$3a			sbc 	#$3A
.4e25	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4e26	0a		asl a				asl 	a
.4e27	0a		asl a				asl 	a
.4e28	0a		asl a				asl 	a 							; 2 bytes/word
.4e29	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4e2b	ad dc 0e	lda $0edc			lda 	varHash 					; get hash
.4e2e	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4e30	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.4e31	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.4e33	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.4e35	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4e37	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4e39	69 00		adc #$00			adc 	#0
.4e3b	85 3c		sta $3c				sta 	hashList+1
.4e3d	7a		ply				ply
.4e3e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4e3f					CreateVariable:
.4e3f	98		tya				tya 								; push Y on the stack twice.
.4e40	48		pha				pha									; position in code of the new variable.
.4e41	48		pha				pha
.4e42	ae dd 0e	ldx $0edd			ldx 	varType 					; get var type 0-5 from the var type
.4e45	bd 68 4e	lda $4e68,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.4e48	48		pha				pha 								; save length
.4e49	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.4e4b	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.4e4d	a5 36		lda $36				lda 	lowMemory+1
.4e4f	85 2b		sta $2b				sta 	temp0+1
.4e51	68		pla				pla 								; get length
.4e52	18		clc				clc 								; add to low memory.
.4e53	65 35		adc $35				adc 	lowMemory
.4e55	85 35		sta $35				sta 	lowMemory
.4e57	90 08		bcc $4e61			bcc 	_CVNoCarry
.4e59	e6 36		inc $36				inc 	lowMemory+1
.4e5b	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.4e5d	c5 34		cmp $34				cmp 	highMemory+1
.4e5f	b0 3c		bcs $4e9d			bcs 	_CVMemory
.4e61					_CVNoCarry:
.4e61	ad dc 0e	lda $0edc			lda 	varHash 					; store hash at offset 4.
.4e64	a0 04		ldy #$04			ldy 	#4
.4e66	91 2a		sta ($2a),y			sta 	(temp0),y
.4e68	68		pla				pla 								; offset, work out where the variable name is.
.4e69	18		clc				clc
.4e6a	65 28		adc $28				adc 	codePtr
.4e6c	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4e6e	91 2a		sta ($2a),y			sta 	(temp0),y
.4e70	a5 29		lda $29				lda 	codePtr+1
.4e72	69 00		adc #$00			adc 	#0
.4e74	c8		iny				iny
.4e75	91 2a		sta ($2a),y			sta 	(temp0),y
.4e77	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4e7a	b0 03		bcs $4e7f			bcs 	_CVNotImmediate
.4e7c	20 dc 4e	jsr $4edc			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4e7f					_CVNotImmediate:
.4e7f	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4e81	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4e83	91 2a		sta ($2a),y			sta 	(temp0),y
.4e85	c8		iny				iny
.4e86	b1 3b		lda ($3b),y			lda 	(hashList),y
.4e88	91 2a		sta ($2a),y			sta 	(temp0),y
.4e8a	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4e8c	91 3b		sta ($3b),y			sta 	(hashList),y
.4e8e	88		dey				dey
.4e8f	a5 2a		lda $2a				lda 	temp0
.4e91	91 3b		sta ($3b),y			sta 	(hashList),y
.4e93	ad dd 0e	lda $0edd			lda 	varType 					; type in A
.4e96	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4e98	20 a8 4e	jsr $4ea8			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4e9b	7a		ply				ply
.4e9c	60		rts				rts
.4e9d					_CVMemory:
.4e9d	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4e9f	20 27 15	jsr $1527		jsr	errorHandler
>4ea2	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4ea4	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4ea6	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4ea8					ZeroTemp0Y:
.4ea8	4a		lsr a				lsr 	a 							; bit 0 in carry
.4ea9	0a		asl a				asl 	a
.4eaa	b0 17		bcs $4ec3			bcs 	_ZTExit 					; we don't initialise arrays.
.4eac	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4eae	f0 14		beq $4ec4			beq 	_ZTWriteNullString 			; write "" string
.4eb0	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4eb2	f0 20		beq $4ed4			beq 	_ZTWriteFloat
.4eb4	5a		phy				phy
.4eb5	a9 00		lda #$00			lda 	#0
.4eb7	91 2a		sta ($2a),y			sta 	(temp0),y
.4eb9	c8		iny				iny
.4eba	91 2a		sta ($2a),y			sta 	(temp0),y
.4ebc	c8		iny				iny
.4ebd	91 2a		sta ($2a),y			sta 	(temp0),y
.4ebf	c8		iny				iny
.4ec0	91 2a		sta ($2a),y			sta 	(temp0),y
.4ec2	7a		ply				ply
.4ec3					_ZTExit:
.4ec3	60		rts				rts
.4ec4					_ZTWriteNullString:
.4ec4	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4ec6	8d ce 0a	sta $0ace			sta 	NullString
.4ec9	a9 ce		lda #$ce			lda 	#NullString & $FF
.4ecb	91 2a		sta ($2a),y			sta 	(temp0),y
.4ecd	a9 0a		lda #$0a			lda 	#NullString >> 8
.4ecf	c8		iny				iny
.4ed0	91 2a		sta ($2a),y			sta 	(temp0),y
.4ed2	88		dey				dey
.4ed3	60		rts				rts
.4ed4					_ZTWriteFloat:
.4ed4	da		phx				phx
.4ed5	a2 20		ldx #$20		ldx	#32
.4ed7	20 16 28	jsr $2816		jsr	floatingpointHandler
.4eda	fa		plx				plx
.4edb	60		rts				rts
.4edc					CloneVariableName:
.4edc	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4ede	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ee0	85 2e		sta $2e				sta 	temp2
.4ee2	c8		iny				iny
.4ee3	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ee5	85 2f		sta $2f				sta 	temp2+1
.4ee7	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4ee9	91 2a		sta ($2a),y			sta 	(temp0),y
.4eeb	88		dey				dey
.4eec	a5 35		lda $35				lda 	lowMemory
.4eee	91 2a		sta ($2a),y			sta 	(temp0),y
.4ef0	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4ef2					_CVNCopy:
.4ef2	b1 2e		lda ($2e),y			lda		(temp2),y
.4ef4	91 35		sta ($35),y			sta 	(lowMemory),y
.4ef6	c8		iny				iny
.4ef7	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4ef9	90 f7		bcc $4ef2			bcc 	_CVNCopy
.4efb	98		tya				tya 								; add Y to low memory
.4efc	18		clc				clc
.4efd	65 35		adc $35				adc 	lowMemory
.4eff	85 35		sta $35				sta 	lowMemory
.4f01	90 02		bcc $4f05			bcc 	_CVNNoCarry
.4f03	e6 36		inc $36				inc 	lowMemory+1
.4f05					_CVNNoCarry:
.4f05	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4f06					FindVariable:
.4f06	5a		phy				phy
.4f07	98		tya				tya 								; point temp2 to the actual name
.4f08	18		clc				clc 								; in memory of the variable being created
.4f09	65 28		adc $28				adc 	codePtr
.4f0b	85 2e		sta $2e				sta 	temp2
.4f0d	a5 29		lda $29				lda 	codePtr+1
.4f0f	69 00		adc #$00			adc 	#0
.4f11	85 2f		sta $2f				sta 	temp2+1
.4f13	a0 00		ldy #$00			ldy 	#0
.4f15	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4f17	85 2a		sta $2a				sta 	temp0
.4f19	a5 3c		lda $3c				lda 	hashList+1
.4f1b	85 2b		sta $2b				sta 	temp0+1
.4f1d	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4f1f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4f21	f0 2b		beq $4f4e			beq 	_FVFail
.4f23	aa		tax				tax
.4f24	88		dey				dey		 							; get LSB
.4f25	b1 2a		lda ($2a),y			lda 	(temp0),y
.4f27	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4f29	86 2b		stx $2b				stx 	temp0+1
.4f2b	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4f2d	b1 2a		lda ($2a),y			lda 	(temp0),y
.4f2f	cd dc 0e	cmp $0edc			cmp 	varHash
.4f32	d0 e9		bne $4f1d			bne 	_FVNext 					; if not, no point in checking the name.
.4f34	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4f35	b1 2a		lda ($2a),y			lda 	(temp0),y
.4f37	85 2d		sta $2d				sta 	temp1+1
.4f39	88		dey				dey
.4f3a	b1 2a		lda ($2a),y			lda 	(temp0),y
.4f3c	85 2c		sta $2c				sta 	temp1
.4f3e	a0 00		ldy #$00			ldy 	#0
.4f40					_FVCheck:
.4f40	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4f42	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4f44	d0 d7		bne $4f1d			bne 	_FVNext		 				; fail if different.
.4f46	c8		iny				iny
.4f47	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4f49	90 f5		bcc $4f40			bcc 	_FVCheck
.4f4b	7a		ply				ply
.4f4c	38		sec				sec
.4f4d	60		rts				rts
.4f4e					_FVFail:
.4f4e	7a		ply				ply
.4f4f	18		clc				clc
.4f50	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4f51					HashTableReset:
.4f51	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4f53	a9 00		lda #$00			lda 	#0
.4f55					_HTRClear:
.4f55	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4f58	ca		dex				dex
.4f59	d0 fa		bne $4f55			bne 	_HTRClear
.4f5b	60		rts				rts

;******  Return to file: variable/variable.asm

.4f5c					variableHandler:
.4f5c	7c 5f 4f	jmp ($4f5f,x)			jmp 	(variableVectors,x)
.4f5f					variableVectors:
>4f5f	67 4f					.word _DummyControlHandler ; index 0
>4f61	9f 4d					.word AccessVariable       ; index 2
>4f63	2f 4c					.word CreateArray          ; index 4
>4f65	51 4f					.word HashTableReset       ; index 6
.4f67					_DummyControlHandler:
.4f67	60		rts			rts

;******  Return to file: basic.asm

.4f68					section_end_variable:
.4f68					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0edf					endStorage:
>4f68							.align 	256
.5000					programMemory:
>4fff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.5000					section_end_footer:

;******  End of listing
