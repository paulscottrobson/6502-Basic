
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Sun Mar  7 10:35:18 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a2 04		ldx #$04		ldx	#4
.1005	20 84 23	jsr $2384		jsr	deviceHandler
.1008	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100a	8d c8 0a	sta $0ac8			sta 	basePage
.100d	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100f	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1012	a9 00		lda #$00			lda 	#($9800) & $FF
.1014	8d ca 0a	sta $0aca			sta 	endMemory
.1017	a9 98		lda #$98			lda 	#($9800) >> 8
.1019	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101c	4c d9 14	jmp $14d9			jmp 	Command_Run
.2bf9					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	05 0a 00 99 80 10 0b 00			.byte 5,10,0,153,128,16,11,0,210,133,6,72,101,108,108,111,32,200,1,58,128,15,12,0,213,133,1,40,201,1,58,201,133,1,41,128,6,13,0,158,64,128,4,14,0,128,4,15,0,128,0
>5008	d2 85 06 48 65 6c 6c 6f 20 c8 01 3a 80 0f 0c 00
>5018	d5 85 01 28 c9 01 3a c9 85 01 29 80 06 0d 00 9e
>5028	40 80 04 0e 00 80 04 0f 00 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101f					Command_Assert:
.101f	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; what is being asserted.
.1022	20 11 22	jsr $2211			jsr 	MInt32Zero 					; is it true ?
.1025	f0 01		beq $1028			beq 	_CAError
.1027	60		rts				rts
.1028					_CAError:
.1028	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.102a	20 9b 23	jsr $239b		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.102d					CommandClear:
.102d	98		tya				tya
.102e	48		pha				pha
.102f	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.1032	85 0d		sta $0d				sta 	highMemory
.1034	ad cb 0a	lda $0acb			lda 	endMemory+1
.1037	85 0e		sta $0e				sta 	highMemory+1
.1039	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.103c	85 04		sta $04				sta 	temp0
.103e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1041	85 05		sta $05				sta 	temp0+1
.1043					_CCFindEnd:
.1043	a0 00		ldy #$00			ldy 	#0
.1045	b1 04		lda ($04),y			lda 	(temp0),y
.1047	f0 0c		beq $1055			beq 	_CCFoundEnd 				; offset zero is end.
.1049	18		clc				clc
.104a	65 04		adc $04				adc 	temp0 						; move to next line
.104c	85 04		sta $04				sta 	temp0
.104e	90 f3		bcc $1043			bcc 	_CCFindEnd
.1050	e6 05		inc $05				inc 	temp0+1
.1052	4c 43 10	jmp $1043			jmp 	_CCFindEnd
.1055					_CCFoundEnd:
.1055	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1057	85 0f		sta $0f				sta 	lowMemory
.1059	a5 05		lda $05				lda 	temp0+1
.105b	85 10		sta $10				sta 	lowMemory+1
.105d	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105f	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1062	20 77 22	jsr $2277			jsr 	RSReset 					; reset the return stack.
.1065	a2 04		ldx #$04		ldx	#4
.1067	20 f0 2b	jsr $2bf0		jsr	variableHandler
.106a	20 8e 16	jsr $168e			jsr 	ScanProc 					; scan for procedures
.106d	20 9a 14	jsr $149a			jsr 	CommandRestore 				; do a restore
.1070	68		pla				pla
.1071	a8		tay				tay
.1072	60		rts				rts
.1073					AdvanceLowMemoryByte:
.1073	18		clc				clc
.1074	65 0f		adc $0f				adc 	lowMemory
.1076	85 0f		sta $0f				sta 	lowMemory
.1078	90 02		bcc $107c			bcc 	_ALMBExit
.107a	e6 10		inc $10				inc 	lowMemory+1
.107c					_ALMBExit:
.107c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.107d					Command_Dim:
.107d	a2 02		ldx #$02		ldx	#2
.107f	20 f0 2b	jsr $2bf0		jsr	variableHandler
.1082	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.1084	c8		iny				iny
.1085	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1087	f0 f4		beq $107d			beq 	Command_Dim
.1089	88		dey				dey 								; unpick get
.108a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2bf9					Command_FOR:
.2bf9	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2bfb	a2 0b		ldx #$0b			ldx 	#11
.2bfd	20 85 22	jsr $2285			jsr 	RSClaim
.2c00	20 78 11	jsr $1178			jsr 	CommandLET 					; do the same as LET.
.2c03	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2c05	c9 80		cmp #$80			cmp 	#$80
.2c07	d0 4c		bne $2c55			bne 	_CFType
.2c09	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.2c0b	20 52 22	jsr $2252			jsr 	CheckToken
.2c0e	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2c10	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger				; get terminal value in stack 1
.2c13	98		tya				tya
.2c14	48		pha				pha
.2c15	a0 04		ldy #$04			ldy 	#4
.2c17	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.2c19	91 78		sta ($78),y			sta 	(rsPointer),y
.2c1b	c8		iny				iny
.2c1c	a5 50		lda $50				lda		esInt1
.2c1e	91 78		sta ($78),y			sta 	(rsPointer),y
.2c20	c8		iny				iny
.2c21	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2c23	91 78		sta ($78),y			sta 	(rsPointer),y
.2c25	c8		iny				iny
.2c26	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.2c28	91 78		sta ($78),y			sta 	(rsPointer),y
.2c2a	c8		iny				iny
.2c2b	a5 51		lda $51				lda		esInt1+1
.2c2d	91 78		sta ($78),y			sta 	(rsPointer),y
.2c2f	c8		iny				iny
.2c30	a5 59		lda $59				lda		esInt2+1
.2c32	91 78		sta ($78),y			sta 	(rsPointer),y
.2c34	c8		iny				iny
.2c35	a5 61		lda $61				lda		esInt3+1
.2c37	91 78		sta ($78),y			sta 	(rsPointer),y
.2c39	68		pla				pla
.2c3a	a8		tay				tay
.2c3b	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.2c3d	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.2c3f	d0 0e		bne $2c4f			bne 	_CFDone
.2c41	c8		iny				iny									; skip over step.
.2c42	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger 			; get step
.2c45	98		tya				tya
.2c46	48		pha				pha
.2c47	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2c49	a0 06		ldy #$06			ldy 	#6
.2c4b	91 78		sta ($78),y			sta 	(rsPointer),y
.2c4d	68		pla				pla
.2c4e	a8		tay				tay
.2c4f					_CFDone:
.2c4f	a9 01		lda #$01			lda 	#1
.2c51	20 b1 22	jsr $22b1			jsr 	RSSavePosition 				; save position.
.2c54	60		rts				rts
.2c55					_CFType:
.2c55	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c57	20 9b 23	jsr $239b		jsr	errorHandler
.2c5a					Command_NEXT:
.2c5a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c5c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2c5e	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2c60	f0 05		beq $2c67			beq 	_isok
.2c62	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2c64	20 9b 23	jsr $239b		jsr	errorHandler
.2c67					_isok:
.2c67	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2c69	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2c6b	b0 18		bcs $2c85			bcs 	_CNNoIndex
.2c6d	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2c6f	20 fc 1b	jsr $1bfc			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2c72	98		tya				tya
.2c73	48		pha				pha
.2c74	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2c76	b1 78		lda ($78),y			lda 	(rsPointer),y
.2c78	d5 48		cmp $48,x			cmp 	esInt0,x
.2c7a	d0 76		bne $2cf2			bne 	_CNBadIndex
.2c7c	c8		iny				iny
.2c7d	b1 78		lda ($78),y			lda 	(rsPointer),y
.2c7f	d5 50		cmp $50,x			cmp 	esInt1,x
.2c81	d0 6f		bne $2cf2			bne 	_CNBadIndex
.2c83	68		pla				pla
.2c84	a8		tay				tay
.2c85					_CNNoIndex:
.2c85	98		tya				tya
.2c86	48		pha				pha
.2c87	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2c89	b1 78		lda ($78),y			lda 	(rsPointer),y
.2c8b	85 04		sta $04				sta 	temp0
.2c8d	c8		iny				iny
.2c8e	b1 78		lda ($78),y			lda 	(rsPointer),y
.2c90	85 05		sta $05				sta 	temp0+1
.2c92	c8		iny				iny
.2c93	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2c95	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2c97	85 09		sta $09				sta 	temp2+1 					; save for later.
.2c99	10 01		bpl $2c9c			bpl 	_CNSignX
.2c9b	ca		dex				dex  								; X = $FF
.2c9c					_CNSignX:
.2c9c	18		clc				clc 								; add to the LSB
.2c9d	a0 00		ldy #$00			ldy 	#0
.2c9f	71 04		adc ($04),y			adc 	(temp0),y
.2ca1	91 04		sta ($04),y			sta 	(temp0),y
.2ca3					_CNPropogate:
.2ca3	c8		iny				iny  								; add the sign extended in X to the rest.
.2ca4	8a		txa				txa
.2ca5	71 04		adc ($04),y			adc 	(temp0),y
.2ca7	91 04		sta ($04),y			sta 	(temp0),y
.2ca9	c8		iny				iny
.2caa	8a		txa				txa
.2cab	71 04		adc ($04),y			adc 	(temp0),y
.2cad	91 04		sta ($04),y			sta 	(temp0),y
.2caf	c8		iny				iny
.2cb0	8a		txa				txa
.2cb1	71 04		adc ($04),y			adc 	(temp0),y
.2cb3	91 04		sta ($04),y			sta 	(temp0),y
.2cb5	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2cb6	a5 78		lda $78				lda 	rsPointer
.2cb8	69 07		adc #$07			adc 	#7
.2cba	85 06		sta $06				sta 	temp1
.2cbc	a9 00		lda #$00			lda 	#0
.2cbe	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2cc0	a8		tay				tay 								; and clear the Y register again.
.2cc1	65 79		adc $79				adc 	rsPointer+1
.2cc3	85 07		sta $07				sta 	temp1+1
.2cc5	38		sec				sec 								; calculate current - limit oring interim values.
.2cc6	20 fe 2c	jsr $2cfe			jsr 	_CNCompare
.2cc9	20 fe 2c	jsr $2cfe			jsr 	_CNCompare
.2ccc	20 fe 2c	jsr $2cfe			jsr 	_CNCompare
.2ccf	20 fe 2c	jsr $2cfe			jsr 	_CNCompare
.2cd2	50 02		bvc $2cd6			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2cd4	49 80		eor #$80			eor 	#$80
.2cd6					_CNNoOverflow:
.2cd6	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2cd8	30 1d		bmi $2cf7			bmi 	_CNCheckDownto
.2cda	c9 00		cmp #$00			cmp 	#0
.2cdc	30 0c		bmi $2cea			bmi 	_CNLoopRound 				; loop round if < =
.2cde	a5 08		lda $08				lda 	temp2
.2ce0	f0 08		beq $2cea			beq 	_CNLoopRound
.2ce2					_CNLoopExit:
.2ce2	68		pla				pla
.2ce3	a8		tay				tay
.2ce4	a9 0b		lda #$0b			lda 	#11
.2ce6	20 a7 22	jsr $22a7			jsr 	RSFree
.2ce9	60		rts				rts
.2cea					_CNLoopRound:
.2cea	68		pla				pla
.2ceb	a8		tay				tay
.2cec	a9 01		lda #$01			lda 	#1
.2cee	20 c4 22	jsr $22c4			jsr 	RSLoadPosition				; go back to the loop top
.2cf1	60		rts				rts
.2cf2					_CNBadIndex:
.2cf2	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2cf4	20 9b 23	jsr $239b		jsr	errorHandler
.2cf7					_CNCheckDownto:
.2cf7	c9 00		cmp #$00			cmp 	#0
.2cf9	10 ef		bpl $2cea			bpl 	_CNLoopRound
.2cfb	4c e2 2c	jmp $2ce2			jmp 	_CNLoopExit
.2cfe					_CNCompare:
.2cfe	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2d00	f1 06		sbc ($06),y			sbc 	(temp1),y
.2d02	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2d04	85 08		sta $08				sta 	temp2
.2d06	c8		iny				iny
.2d07	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.108b					CommandIf:
.108b	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; if what ?
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1090	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1092	f0 04		beq $1098			beq 	_IfSimple
.1094	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1096	d0 1b		bne $10b3			bne 	_IfComplex
.1098					_IfSimple:
.1098	20 11 22	jsr $2211			jsr 	MInt32Zero					; check if TOS zero
.109b	f0 10		beq $10ad			beq 	_IfEOL 						; go to next line.
.109d	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.109f	c8		iny				iny
.10a0	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.10a2	f0 0c		beq $10b0			beq 	_IfGoto 					; do the Goto code
.10a4	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10a6	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10a8	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10aa	f0 04		beq $10b0			beq 	_IfGoto
.10ac	60		rts				rts 								; else continue on this line.
.10ad					_IfEOL:
.10ad	4c 02 17	jmp $1702			jmp 	AdvanceNextLine 			; go to next line
.10b0					_IfGoto:
.10b0	4c 77 17	jmp $1777			jmp 	CommandGoto
.10b3					_IfComplex:
.10b3	20 11 22	jsr $2211			jsr 	MInt32Zero 					; is it true ?
.10b6	f0 01		beq $10b9			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10b8	60		rts				rts 								; else continue.
.10b9					_IFSkip:
.10b9	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10bb	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10bd	4c 71 2d	jmp $2d71			jmp		ScanForward
.10c0					Command_ELSE:
.10c0	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10c2	8a		txa				txa
.10c3	4c 71 2d	jmp $2d71			jmp		ScanForward
.10c6					Command_ENDIF:
.10c6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0af0					InputBuffer:
>0af0							.fill 	MaxInputSize+1
.10c7					Command_Input:
.10c7	b1 02		lda ($02),y			lda 	(codePtr),y 			; see what's next.
.10c9	c8		iny				iny
.10ca	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.10cc	f0 f9		beq $10c7			beq 	Command_Input
.10ce	88		dey				dey 							; undo consume
.10cf	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.10d1	f0 54		beq $1127			beq 	_CIExit 				; : or EOL, exit
.10d3	c9 80		cmp #$80			cmp 	#TOK_EOL
.10d5	f0 50		beq $1127			beq 	_CIExit
.10d7	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.10d9	90 12		bcc $10ed			bcc 	_CIVariable
.10db	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.10dd	d0 43		bne $1122			bne 	_CISyntax
.10df	a2 00		ldx #$00			ldx 	#0
.10e1	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 			; evaluate and print string
.10e4	20 ed 11	jsr $11ed			jsr 	TOSToTemp0
.10e7	20 bc 13	jsr $13bc			jsr 	PrintString
.10ea	4c c7 10	jmp $10c7			jmp 	Command_Input
.10ed					_CIVariable:
.10ed	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.10ef	20 fc 1b	jsr $1bfc			jsr 	EvaluateReference
.10f2					_CIRetry:
.10f2	a9 3f		lda #$3f			lda 	#"?"
.10f4	a2 0e		ldx #$0e		ldx	#14
.10f6	20 84 23	jsr $2384		jsr	deviceHandler
.10f9	98		tya				tya
.10fa	48		pha				pha
.10fb	20 3b 11	jsr $113b			jsr 	InputString 			; input a string.
.10fe	a2 01		ldx #$01			ldx 	#1
.1100	20 28 11	jsr $1128			jsr 	BufferToStackX 			; make stack,x ref input string.
.1103	a5 40		lda $40				lda 	esType 					; if target type numeric
.1105	29 40		and #$40			and 	#$40 					; then convert to number
.1107	d0 11		bne $111a			bne 	_CIWrite
.1109	a2 01		ldx #$01			ldx 	#1
.110b	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.110e	a9 0a		lda #$0a			lda 	#10
.1110	20 5d 20	jsr $205d			jsr 	MInt32FromString 		; convert it back from a string.
.1113	68		pla				pla
.1114	a8		tay				tay
.1115	b0 03		bcs $111a			bcs 	_CIWrite 				; successfully converted.
.1117	18		clc				clc 							; default fail FP conversion
.1118	90 d8		bcc $10f2			bcc		_CIRetry				; failed, try again.
.111a					_CIWrite:
.111a	a2 00		ldx #$00			ldx 	#0
.111c	20 8b 11	jsr $118b			jsr 	WriteValue
.111f	4c c7 10	jmp $10c7			jmp 	Command_Input
.1122					_CISyntax:
.1122	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1124	20 9b 23	jsr $239b		jsr	errorHandler
.1127					_CIExit:
.1127	60		rts				rts
.1128					BufferToStackX:
.1128	a9 f0		lda #$f0			lda 	#InputBuffer & $FF
.112a	95 48		sta $48,x			sta 	esInt0,x
.112c	a9 0a		lda #$0a			lda 	#InputBuffer >> 8
.112e	95 50		sta $50,x			sta 	esInt1,x
.1130	a9 00		lda #$00			lda 	#0
.1132	95 58		sta $58,x			sta 	esInt2,x
.1134	95 60		sta $60,x			sta 	esInt3,x
.1136	a9 40		lda #$40			lda 	#$40
.1138	95 40		sta $40,x			sta 	esType,x
.113a	60		rts				rts
.113b					InputString:
.113b	a9 00		lda #$00			lda 	#0
.113d	8d f0 0a	sta $0af0			sta 	InputBuffer
.1140					_InputLoop:
.1140	a2 08		ldx #$08		ldx	#8
.1142	20 84 23	jsr $2384		jsr	deviceHandler
.1145	c9 00		cmp #$00			cmp 	#0
.1147	f0 f7		beq $1140			beq 	_InputLoop
.1149	c9 08		cmp #$08			cmp 	#8
.114b	f0 19		beq $1166			beq 	_InputBackspace
.114d	c9 0d		cmp #$0d			cmp 	#13
.114f	f0 21		beq $1172			beq 	_InputExit
.1151	ae f0 0a	ldx $0af0			ldx 	InputBuffer
.1154	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1156	f0 e8		beq $1140			beq 	_InputLoop
.1158	9d f1 0a	sta $0af1,x			sta 	InputBuffer+1,x 		; write char
.115b	ee f0 0a	inc $0af0			inc 	InputBuffer 			; advance count.
.115e					_InputPrintLoop:
.115e	a2 0e		ldx #$0e		ldx	#14
.1160	20 84 23	jsr $2384		jsr	deviceHandler
.1163	4c 40 11	jmp $1140			jmp	 	_InputLoop
.1166					_InputBackspace:
.1166	ad f0 0a	lda $0af0			lda 	InputBuffer 			; at start
.1169	f0 d5		beq $1140			beq 	_InputLoop
.116b	ce f0 0a	dec $0af0			dec 	InputBuffer
.116e	a9 08		lda #$08			lda 	#8
.1170	d0 ec		bne $115e			bne 	_InputPrintLoop
.1172					_InputExit:
.1172	a2 02		ldx #$02		ldx	#2
.1174	20 84 23	jsr $2384		jsr	deviceHandler
.1177	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1178					CommandLet:
.1178	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.117a	20 fc 1b	jsr $1bfc			jsr 	EvaluateReference
.117d	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.117f	20 52 22	jsr $2252			jsr 	CheckToken
.1182	e8		inx				inx 								; do RHS
.1183	20 b0 1b	jsr $1bb0			jsr 	Evaluate 					; evaluate and derefernce
.1186	ca		dex				dex
.1187	20 8b 11	jsr $118b			jsr 	WriteValue 					; write it out
.118a	60		rts				rts
.118b					WriteValue:
.118b	98		tya				tya
.118c	48		pha				pha
.118d	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1190	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.1192	55 41		eor $41,x			eor 	esType+1,x
.1194	29 40		and #$40			and 	#$40
.1196	d0 50		bne $11e8			bne		_WVType
.1198	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.119a	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.119c	29 40		and #$40			and 	#$40
.119e	d0 1f		bne $11bf			bne 	_WVCopyString
.11a0	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.11a2	15 41		ora $41,x			ora 	esType+1,x
.11a4	4a		lsr a				lsr 	a
.11a5	90 22		bcc $11c9			bcc 	_WVCopyData4
.11a7	b5 40		lda $40,x			lda 	esType,x
.11a9	4a		lsr a				lsr 	a
.11aa	90 3c		bcc $11e8			bcc 	_WVType
.11ac	e8		inx				inx 								; force the value being written to be a float.
.11ad	20 e9 17	jsr $17e9			jsr 	BPMakeFloat
.11b0	ca		dex				dex
.11b1	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; set Temp0 to write address
.11b4	e8		inx				inx
.11b5	8a		txa				txa
.11b6	a2 20		ldx #$20		ldx	#32
.11b8	20 8c 26	jsr $268c		jsr	floatingpointHandler
.11bb	aa		tax				tax
.11bc	4c e5 11	jmp $11e5			jmp 	_WVCopyExit
.11bf					_WVCopyString:
.11bf	8a		txa				txa
.11c0	a2 0c		ldx #$0c		ldx	#12
.11c2	20 28 29	jsr $2928		jsr	stringHandler
.11c5	aa		tax				tax
.11c6	4c e5 11	jmp $11e5			jmp 	_WVCopyExit
.11c9					_WVCopyData4:
.11c9	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.11cb	29 20		and #$20			and 	#$20
.11cd	d0 10		bne $11df			bne 	_WVCopyData1
.11cf	a0 03		ldy #$03			ldy 	#3
.11d1	b5 61		lda $61,x			lda 	esInt3+1,x
.11d3	91 04		sta ($04),y			sta 	(temp0),y
.11d5	88		dey				dey
.11d6	b5 59		lda $59,x			lda 	esInt2+1,x
.11d8	91 04		sta ($04),y			sta 	(temp0),y
.11da	88		dey				dey
.11db	b5 51		lda $51,x			lda 	esInt1+1,x
.11dd	91 04		sta ($04),y			sta 	(temp0),y
.11df					_WVCopyData1:
.11df	a0 00		ldy #$00			ldy 	#0
.11e1	b5 49		lda $49,x			lda 	esInt0+1,x
.11e3	91 04		sta ($04),y			sta 	(temp0),y
.11e5					_WVCopyExit:
.11e5	68		pla				pla
.11e6	a8		tay				tay
.11e7	60		rts				rts
.11e8					_WVType:
.11e8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.11ea	20 9b 23	jsr $239b		jsr	errorHandler
.11ed					TOSToTemp0:
.11ed	b5 48		lda $48,x			lda 	esInt0,x
.11ef	85 04		sta $04				sta 	temp0
.11f1	b5 50		lda $50,x			lda 	esInt1,x
.11f3	85 05		sta $05				sta 	temp0+1
.11f5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0b11					storeSize:
>0b11							.fill 	1
.11f6					CommandLocal:
.11f6	a2 00		ldx #$00			ldx 	#0
.11f8	20 14 12	jsr $1214			jsr 	LocaliseVariable 			; localise one.
.11fb					_CLCheckNext:
.11fb	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.11fd	c8		iny				iny
.11fe	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.1200	f0 06		beq $1208			beq 	_CLAssignment
.1202	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1204	f0 f0		beq $11f6			beq 	CommandLocal
.1206	88		dey				dey
.1207	60		rts				rts
.1208					_CLAssignment:
.1208	a2 01		ldx #$01			ldx 	#1
.120a	20 b0 1b	jsr $1bb0			jsr 	Evaluate 					; evaluate RHS
.120d	ca		dex				dex
.120e	20 8b 11	jsr $118b			jsr 	WriteValue
.1211	4c fb 11	jmp $11fb			jmp 	_CLCheckNext
.1214					LocaliseVariable:
.1214	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1216	c9 40		cmp #$40			cmp 	#$40
.1218	b0 67		bcs $1281			bcs 	_LVSyntax
.121a	8a		txa				txa 								; get the address of that variable.
.121b	a2 00		ldx #$00		ldx	#0
.121d	20 f0 2b	jsr $2bf0		jsr	variableHandler
.1220	aa		tax				tax
.1221	8a		txa				txa
.1222	48		pha				pha
.1223	98		tya				tya
.1224	48		pha				pha
.1225	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1228	b5 40		lda $40,x			lda 	esType,x 					; get the type
.122a	0a		asl a				asl 	a
.122b	10 16		bpl $1243			bpl 	_LVPushNumber
.122d	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.122f	b1 04		lda ($04),y			lda 	(temp0),y
.1231	c8		iny				iny
.1232	85 06		sta $06				sta 	temp1
.1234	b1 04		lda ($04),y			lda 	(temp0),y
.1236	85 07		sta $07				sta 	temp1+1
.1238	a0 00		ldy #$00			ldy 	#0 	 						; get length
.123a	b1 06		lda ($06),y			lda 	(temp1),y
.123c	aa		tax				tax 								; into X
.123d	e8		inx				inx 								; +1 for length.
.123e	a9 24		lda #$24			lda 	#markerString
.1240	4c 58 12	jmp $1258			jmp 	_LVWriteFrame
.1243					_LVPushNumber:
.1243	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1245	85 06		sta $06				sta 	temp1
.1247	a5 05		lda $05				lda 	temp0+1
.1249	85 07		sta $07				sta 	temp1+1
.124b	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.124d	4a		lsr a				lsr 	a
.124e	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1250	a2 04		ldx #$04			ldx 	#VarISize
.1252	90 04		bcc $1258			bcc 	_LVIsInteger
.1254	a9 23		lda #$23			lda 	#markerFloat
.1256	a2 06		ldx #$06			ldx 	#VarFSize
.1258					_LVIsInteger:
.1258					_LVWriteFrame:
.1258	8e 11 0b	stx $0b11			stx 	storeSize 					; number of bytes to copy from (temp0)
.125b	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.125c	e8		inx				inx
.125d	e8		inx				inx
.125e	20 85 22	jsr $2285			jsr 	RSClaim 					; create the stack frame.
.1261	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.1263	a0 01		ldy #$01			ldy 	#1
.1265	91 78		sta ($78),y			sta 	(rsPointer),y
.1267	c8		iny				iny
.1268	a5 05		lda $05				lda 	temp0+1
.126a	91 78		sta ($78),y			sta 	(rsPointer),y
.126c	a0 00		ldy #$00			ldy 	#0
.126e					_LVCopyData:
.126e	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.1270	c8		iny				iny 								; write allowing for the header bit.
.1271	c8		iny				iny
.1272	c8		iny				iny
.1273	91 78		sta ($78),y			sta 	(rsPointer),y
.1275	88		dey				dey
.1276	88		dey				dey
.1277	ce 11 0b	dec $0b11			dec 	storeSize 					; do it storesize times
.127a	d0 f2		bne $126e			bne 	_LVCopyData
.127c	68		pla				pla
.127d	a8		tay				tay
.127e	68		pla				pla
.127f	aa		tax				tax
.1280	60		rts				rts
.1281					_LVSyntax:
.1281	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1283	20 9b 23	jsr $239b		jsr	errorHandler
.1286					RestoreLocals:
.1286	a2 00		ldx #$00			ldx 	#0
.1288	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.128a	c9 40		cmp #$40			cmp	 	#64
.128c	90 01		bcc $128f			bcc 	_RLocal
.128e	60		rts				rts
.128f					_RLocal:
.128f	8a		txa				txa
.1290	48		pha				pha
.1291	98		tya				tya
.1292	48		pha				pha
.1293	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1295	b1 78		lda ($78),y			lda 	(rsPointer),y
.1297	85 04		sta $04				sta 	temp0
.1299	c8		iny				iny
.129a	b1 78		lda ($78),y			lda 	(rsPointer),y
.129c	85 05		sta $05				sta 	temp0+1
.129e	a0 00		ldy #$00			ldy 	#0 							; get type back.
.12a0	b1 78		lda ($78),y			lda 	(rsPointer),y
.12a2	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.12a4	f0 28		beq $12ce			beq 	_RString
.12a6	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.12a8	c9 25		cmp #$25			cmp 	#markerInt
.12aa	f0 02		beq $12ae			beq 	_RIsInteger
.12ac	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.12ae					_RIsInteger:
.12ae	8a		txa				txa
.12af	48		pha				pha
.12b0	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.12b2					_RCopyBack:
.12b2	b1 78		lda ($78),y			lda 	(rsPointer),y
.12b4	88		dey				dey
.12b5	88		dey				dey
.12b6	88		dey				dey
.12b7	91 04		sta ($04),y			sta 	(temp0),y
.12b9	c8		iny				iny
.12ba	c8		iny				iny
.12bb	c8		iny				iny
.12bc	c8		iny				iny
.12bd	ca		dex				dex
.12be	d0 f2		bne $12b2			bne 	_RCopyBack
.12c0	68		pla				pla 								; get size add 3
.12c1	18		clc				clc
.12c2	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.12c4					_RRestoreAAndLoop:
.12c4	20 a7 22	jsr $22a7			jsr 	RSFree
.12c7	68		pla				pla
.12c8	a8		tay				tay
.12c9	68		pla				pla
.12ca	aa		tax				tax
.12cb	4c 86 12	jmp $1286			jmp 	RestoreLocals 				; go see if there are any more locals.
.12ce					_RString:
.12ce	a2 00		ldx #$00			ldx 	#0
.12d0	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.12d2	b1 78		lda ($78),y			lda 	(rsPointer),y
.12d4	95 48		sta $48,x			sta 	esInt0,x
.12d6	c8		iny				iny
.12d7	b1 78		lda ($78),y			lda 	(rsPointer),y
.12d9	95 50		sta $50,x			sta 	esInt1,x
.12db	18		clc				clc
.12dc	a5 78		lda $78				lda 	rsPointer
.12de	69 03		adc #$03			adc 	#3
.12e0	95 49		sta $49,x			sta 	esInt0+1,x
.12e2	a5 79		lda $79				lda 	rsPointer+1
.12e4	69 00		adc #$00			adc 	#0
.12e6	95 51		sta $51,x			sta 	esInt1+1,x
.12e8	8a		txa				txa
.12e9	a2 0c		ldx #$0c		ldx	#12
.12eb	20 28 29	jsr $2928		jsr	stringHandler
.12ee	a0 03		ldy #$03			ldy 	#3 							; get string length
.12f0	b1 78		lda ($78),y			lda 	(rsPointer),y
.12f2	18		clc				clc
.12f3	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.12f5	4c c4 12	jmp $12c4			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.12f8					Command_New:
.12f8	20 33 15	jsr $1533			jsr 	ResetCodeAddress 			; point to first line
.12fb	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.12fd	98		tya				tya
.12fe	91 02		sta ($02),y			sta 	(codePtr),y
.1300	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything down.
.1303	4c ff 16	jmp $16ff			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1306					Command_Poke:
.1306	a9 01		lda #$01			lda 	#1
.1308	d0 06		bne $1310			bne 	PokeGeneral
.130a					Command_Doke:
.130a	a9 02		lda #$02			lda 	#2
.130c	d0 02		bne $1310			bne 	PokeGeneral
.130e					Command_Loke:
.130e	a9 03		lda #$03			lda 	#3
.1310					PokeGeneral:
.1310	48		pha				pha 								; save size
.1311	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; target address
.1314	20 6a 22	jsr $226a			jsr	 	CheckComma
.1317	e8		inx				inx
.1318	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger 			; what value to POKE ?
.131b	ca		dex				dex
.131c	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; temp0 points to the target address
.131f	84 0c		sty $0c				sty 	tempShort 					; save Y
.1321	68		pla				pla 								; get copy type and dispatch
.1322	aa		tax				tax
.1323	ca		dex				dex
.1324	f0 14		beq $133a			beq 	_Poke1
.1326	ca		dex				dex
.1327	f0 0b		beq $1334			beq 	_Poke2
.1329	a0 03		ldy #$03			ldy 	#3
.132b	a5 61		lda $61				lda 	esInt3+1
.132d	91 04		sta ($04),y			sta 	(temp0),y
.132f	88		dey				dey
.1330	a5 59		lda $59				lda 	esInt2+1
.1332	91 04		sta ($04),y			sta 	(temp0),y
.1334					_Poke2:
.1334	a0 01		ldy #$01			ldy 	#1
.1336	a5 51		lda $51				lda 	esInt1+1
.1338	91 04		sta ($04),y			sta 	(temp0),y
.133a					_Poke1:
.133a	a0 00		ldy #$00			ldy 	#0
.133c	a5 49		lda $49				lda 	esInt0+1
.133e	91 04		sta ($04),y			sta 	(temp0),y
.1340	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1342	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0b12					lastPrintToken:
>0b12							.fill 	1
.1343					Command_Print:
.1343	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1345	8d 12 0b	sta $0b12			sta 	lastPrintToken
.1348	88		dey				dey
.1349					_PrintLoopSkip:
.1349	c8		iny				iny
.134a					_PrintLoop:
.134a	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.134c	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.134e	f0 5b		beq $13ab			beq 	_PrintExit
.1350	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1352	f0 57		beq $13ab			beq 	_PrintExit
.1354	8d 12 0b	sta $0b12			sta 	lastPrintToken 				; update LPT
.1357	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1359	f0 ee		beq $1349			beq 	_PrintLoopSkip
.135b	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.135d	f0 3c		beq $139b			beq	 	_PrintNewLine
.135f	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.1361	f0 40		beq $13a3			beq 	_PrintTab
.1363	20 ae 1b	jsr $1bae			jsr 	EvaluateRoot 				; evaluate something at the root
.1366	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1368	85 04		sta $04				sta 	temp0
.136a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.136c	85 05		sta $05				sta 	1+(temp0)
.136e	a5 40		lda $40				lda 	esType 						; get type
.1370	f0 15		beq $1387			beq		_PrintInteger
.1372	4a		lsr a				lsr 	a 							; check for floating point
.1373	b0 08		bcs $137d			bcs 	_PrintFloat
.1375					_PrintString:
.1375	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1377	20 ed 11	jsr $11ed			jsr 	TOSToTemp0
.137a	4c 95 13	jmp $1395			jmp 	_PrintTemp0 				; print no leading space.
.137d					_PrintFloat:
.137d	a9 00		lda #$00			lda 	#0 							; stack level.
.137f	a2 14		ldx #$14		ldx	#20
.1381	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1384	4c 8e 13	jmp $138e			jmp 	_PrintSpaceTemp0
.1387					_PrintInteger:
.1387	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1389	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.138b	20 40 21	jsr $2140			jsr 	MInt32ToString				; convert to text
.138e					_PrintSpaceTemp0:
.138e	a9 20		lda #$20			lda 	#32
.1390	a2 0e		ldx #$0e		ldx	#14
.1392	20 84 23	jsr $2384		jsr	deviceHandler
.1395					_PrintTemp0:
.1395	20 bc 13	jsr $13bc			jsr 	PrintString
.1398	4c 4a 13	jmp $134a			jmp 	_PrintLoop
.139b					_PrintNewLine:
.139b	a2 02		ldx #$02		ldx	#2
.139d	20 84 23	jsr $2384		jsr	deviceHandler
.13a0	4c 49 13	jmp $1349			jmp 	_PrintLoopSkip
.13a3					_PrintTab:
.13a3	a2 10		ldx #$10		ldx	#16
.13a5	20 84 23	jsr $2384		jsr	deviceHandler
.13a8	4c 49 13	jmp $1349			jmp 	_PrintLoopSkip
.13ab					_PrintExit:
.13ab	ad 12 0b	lda $0b12			lda		lastPrintToken 				; check last token
.13ae	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.13b0	f0 09		beq $13bb			beq 	_PrintExit2
.13b2	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.13b4	f0 05		beq $13bb			beq 	_PrintExit2
.13b6	a2 02		ldx #$02		ldx	#2
.13b8	20 84 23	jsr $2384		jsr	deviceHandler
.13bb					_PrintExit2:
.13bb	60		rts				rts
.13bc					PrintString:
.13bc	8a		txa				txa
.13bd	48		pha				pha
.13be	98		tya				tya
.13bf	48		pha				pha
.13c0	a0 00		ldy #$00			ldy 	#0							; get length
.13c2	b1 04		lda ($04),y			lda 	(temp0),y
.13c4	aa		tax				tax 								; into X
.13c5	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.13c7	f0 10		beq $13d9			beq 	_PSExit
.13c9	ca		dex				dex
.13ca	8a		txa				txa
.13cb	48		pha				pha
.13cc	c8		iny				iny
.13cd	b1 04		lda ($04),y			lda 	(temp0),y
.13cf	a2 0e		ldx #$0e		ldx	#14
.13d1	20 84 23	jsr $2384		jsr	deviceHandler
.13d4	68		pla				pla
.13d5	aa		tax				tax
.13d6	4c c5 13	jmp $13c5			jmp 	_PSLoop
.13d9					_PSExit:
.13d9	68		pla				pla
.13da	a8		tay				tay
.13db	68		pla				pla
.13dc	aa		tax				tax
.13dd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0b13					paramCount:
>0b13							.fill 	1
.13de					CallProc:
.13de	20 22 16	jsr $1622			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.13e1	48		pha				pha 								; save length on stack
.13e2	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.13e4	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.13e6	48		pha				pha
.13e7	a5 04		lda $04				lda 	temp0
.13e9	48		pha				pha
.13ea	98		tya				tya 								; calculate Y + length
.13eb	18		clc				clc
.13ec	65 0c		adc $0c				adc 	tempShort
.13ee	a8		tay				tay
.13ef	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.13f1					_CallProcEvalParams:
.13f1	e8		inx				inx
.13f2	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.13f4	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.13f6	f0 0b		beq $1403			beq 	_CPDoneParams
.13f8	20 b0 1b	jsr $1bb0			jsr 	Evaluate 					; evaluate a parameter
.13fb	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.13fd	c8		iny				iny
.13fe	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1400	f0 ef		beq $13f1			beq 	_CallProcEvalParams
.1402	88		dey				dey 								; undo consumption.
.1403					_CPDoneParams:
.1403	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check closing parenthesis.
.1406	8e 13 0b	stx $0b13			stx 	paramCount 					; store parameter count+1
.1409	a2 04		ldx #$04			ldx 	#4							; make space on stack
.140b	a9 50		lda #$50			lda 	#markerPROC
.140d	20 85 22	jsr $2285			jsr 	RSClaim
.1410	a9 01		lda #$01			lda 	#1 							; store return address.
.1412	20 b1 22	jsr $22b1			jsr 	RSSavePosition
.1415	68		pla				pla 								; get the new code Ptr
.1416	85 02		sta $02				sta 	codePtr
.1418	68		pla				pla
.1419	85 03		sta $03				sta 	codePtr+1
.141b	68		pla				pla 								; length of name + 4 is the param start.
.141c	18		clc				clc
.141d	69 04		adc #$04			adc 	#4
.141f	a8		tay				tay
.1420	a2 ff		ldx #$ff			ldx 	#$FF
.1422					_CPLoadParameters:
.1422	e8		inx				inx 								; point to where the address should be loaded.
.1423	ec 13 0b	cpx $0b13			cpx 	paramCount 					; too many parameters in definition ?
.1426	f0 1e		beq $1446			beq 	_CPParamError
.1428	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.142a	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.142c	f0 0e		beq $143c			beq 	_CPParamComplete 			; done all the parameters
.142e	20 14 12	jsr $1214			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1431	20 8b 11	jsr $118b			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1434	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1436	c8		iny				iny
.1437	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1439	f0 e7		beq $1422			beq 	_CPLoadParameters
.143b	88		dey				dey 								; no, unconsume and check for )
.143c					_CPParamComplete:
.143c	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check )
.143f	e8		inx				inx 								; check right number of parameters
.1440	ec 13 0b	cpx $0b13			cpx 	paramCount
.1443	d0 01		bne $1446			bne 	_CPParamError
.1445	60		rts				rts
.1446					_CPParamError:
.1446	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1448	20 9b 23	jsr $239b		jsr	errorHandler
.144b					ReturnProc:
.144b	20 86 12	jsr $1286			jsr 	RestoreLocals 				; get the locals back.
.144e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1450	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1452	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1454	f0 05		beq $145b			beq 	_isok
.1456	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1458	20 9b 23	jsr $239b		jsr	errorHandler
.145b					_isok:
.145b	a9 01		lda #$01			lda 	#1
.145d	20 c4 22	jsr $22c4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1460	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1462	20 a7 22	jsr $22a7			jsr 	RSFree
.1465	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0b14					dataPtr:
>0b14							.fill 	2
.0b16					dataIndex:
>0b16							.fill 	1
.1466					CommandRead:
.1466	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1468	20 fc 1b	jsr $1bfc			jsr 	EvaluateReference
.146b	20 ac 14	jsr $14ac			jsr 	SwapDPCP 					; use the data pointer.
.146e	b1 02		lda ($02),y			lda 	(codePtr),y 				; see where it is.
.1470	c8		iny				iny
.1471	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1473	f0 07		beq $147c			beq 	_CRInData
.1475	88		dey				dey
.1476	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1478	aa		tax				tax
.1479	20 71 2d	jsr $2d71			jsr 	ScanForward
.147c					_CRInData:
.147c	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.147e	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1481	ca		dex				dex 								; and write the value.
.1482	20 8b 11	jsr $118b			jsr 	WriteValue
.1485	20 ac 14	jsr $14ac			jsr 	SwapDPCP 					; get the code pointer back.
.1488	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.148a	c8		iny				iny
.148b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.148d	f0 d7		beq $1466			beq 	CommandRead
.148f	88		dey				dey
.1490	60		rts				rts
.1491					CommandData:
.1491	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1493	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.1495	20 71 2d	jsr $2d71			jsr 	ScanForward
.1498	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1499	60		rts				rts
.149a					CommandRestore:
.149a	ad c8 0a	lda $0ac8			lda 	basePage
.149d	8d 14 0b	sta $0b14			sta 	dataPtr
.14a0	ad c9 0a	lda $0ac9			lda 	basePage+1
.14a3	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14a6	a9 03		lda #$03			lda 	#3
.14a8	8d 16 0b	sta $0b16			sta 	dataIndex
.14ab	60		rts				rts
.14ac					SwapDPCP:
.14ac	8a		txa				txa
.14ad	48		pha				pha
.14ae	98		tya				tya 								; swap Y, DataIndex
.14af	ac 16 0b	ldy $0b16			ldy 	DataIndex
.14b2	8d 16 0b	sta $0b16			sta 	DataIndex
.14b5	a5 02		lda $02				lda 	codePtr 					; swap code/dataptr low
.14b7	ae 14 0b	ldx $0b14			ldx 	dataptr
.14ba	8d 14 0b	sta $0b14			sta 	dataPtr
.14bd	86 02		stx $02				stx 	codePtr
.14bf	a5 03		lda $03				lda 	codePtr+1 					; swap code/dataptr high.
.14c1	ae 15 0b	ldx $0b15			ldx 	dataptr+1
.14c4	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14c7	86 03		stx $03				stx 	codePtr+1
.14c9	68		pla				pla
.14ca	aa		tax				tax
.14cb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.14cc					Command_Rem:
.14cc					Command_Rem2:
.14cc	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.14ce	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.14d0	d0 06		bne $14d8			bne 	_CRNotString
.14d2	c8		iny				iny
.14d3	98		tya				tya
.14d4	38		sec				sec
.14d5	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.14d7	a8		tay				tay
.14d8					_CRNotString:
.14d8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2d08					Command_Repeat:
.2d08	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2d0a	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2d0c	20 85 22	jsr $2285			jsr 	RSClaim
.2d0f	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2d11	20 b1 22	jsr $22b1			jsr 	RSSavePosition
.2d14	60		rts				rts
.2d15					Command_Until:
.2d15	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d17	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2d19	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2d1b	f0 05		beq $2d22			beq 	_isok
.2d1d	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2d1f	20 9b 23	jsr $239b		jsr	errorHandler
.2d22					_isok:
.2d22	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; at the bottom.
.2d25	20 11 22	jsr $2211			jsr 	MInt32Zero					; check if TOS zero
.2d28	d0 06		bne $2d30			bne 	_CUExit
.2d2a	a9 01		lda #$01			lda 	#1
.2d2c	20 c4 22	jsr $22c4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2d2f	60		rts				rts
.2d30					_CUExit:
.2d30	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2d32	20 a7 22	jsr $22a7			jsr 	RSFree
.2d35	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.14d9					Command_Run:
.14d9	a2 ff		ldx #$ff			ldx 	#$FF
.14db	9a		txs				txs
.14dc	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything.
.14df	20 33 15	jsr $1533			jsr 	ResetCodeAddress 			; back to the start.
.14e2	a0 03		ldy #$03			ldy 	#3
.14e4					CRNextInstruction:
.14e4	64 7b		stz $7b				stz 	softMemAlloc+1
.14e6	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.14e8	10 1c		bpl $1506			bpl 	_CRNotToken
.14ea	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.14ec	b0 0c		bcs $14fa			bcs 	_CRExecute
.14ee	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.14f0	b0 4e		bcs $1540			bcs 	Unimplemented
.14f2	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.14f4	b0 04		bcs $14fa			bcs 	_CRExecute
.14f6	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.14f8	b0 16		bcs $1510			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.14fa					_CRExecute:
.14fa	c8		iny				iny 								; consume it.
.14fb	0a		asl a				asl 	a 							; double it, losing most significant bit.
.14fc	aa		tax				tax
.14fd	20 03 15	jsr $1503			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1500	4c e4 14	jmp $14e4			jmp 	CRNextInstruction
.1503					_CRRunRoutine:
.1503	7c 4a 15	jmp ($154a,x)			jmp 	(Group0Vectors,x)
.1506					_CRNotToken:
.1506	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1508	b0 36		bcs $1540			bcs 	Unimplemented
.150a					_CRDefaultLet:
.150a	20 78 11	jsr $1178			jsr 	CommandLet 					; do the default, LET
.150d	4c e4 14	jmp $14e4			jmp 	CRNextInstruction
.1510					_CRCheckIndirect:
.1510	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1512	f0 f6		beq $150a			beq 	_CRDefaultLet
.1514	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1516	f0 f2		beq $150a			beq 	_CRDefaultLet
.1518	d0 26		bne $1540			bne 	Unimplemented
.151a					CommandShift1:
.151a	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.151c	10 22		bpl $1540			bpl 	Unimplemented 				; we have an error as this should not happen.
.151e	0a		asl a				asl 	a 							; double into X
.151f	aa		tax				tax
.1520	c8		iny				iny 								; advance over it.
.1521	20 27 15	jsr $1527			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1524	4c e4 14	jmp $14e4			jmp 	CRNextInstruction
.1527					_RunIt:
.1527	7c 02 16	jmp ($1602,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.152a					CommandShift2:
.152a	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.152c	20 fb 25	jsr $25fb		jsr	extensionHandler
.152f	4c e4 14	jmp $14e4			jmp 	CRNextInstruction
.1532					CommandColon:
.1532	60		rts				rts
.1533					ResetCodeAddress:
.1533	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1536	85 02		sta $02				sta 	codePtr
.1538	ad c9 0a	lda $0ac9			lda 	basePage+1
.153b	85 03		sta $03				sta 	codePtr+1
.153d	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.153f	60		rts				rts
.1540					Unimplemented:
.1540	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1542	20 9b 23	jsr $239b		jsr	errorHandler
.1545					TKErr01:
.1545					TKErr02:
.1545					TKErr03:
.1545					TKErr04:
.1545					TKErr05:
.1545					TKErr06:
.1545					TKErr07:
.1545					TKErr08:
.1545					TKErr09:
.1545					TKErr10:
.1545	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1547	20 9b 23	jsr $239b		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.154a					Group0Vectors:
>154a	02 17					.word	AdvanceNextLine          ; $80 [[eol]]
>154c	1a 15					.word	CommandShift1            ; $81 [[sh1]]
>154e	2a 15					.word	CommandShift2            ; $82 [[sh2]]
>1550	45 15					.word	TKErr09                  ; $83 [[sh3]]
>1552	45 15					.word	TKErr10                  ; $84 [[fpc]]
>1554	45 15					.word	TKErr08                  ; $85 [[str]]
>1556	8b 18					.word	AndHandler               ; $86 and
>1558	78 18					.word	OrHandler                ; $87 or
>155a	65 18					.word	XorHandler               ; $88 xor
>155c	ad 19					.word	CompareGreaterEq         ; $89 >=
>155e	b7 19					.word	CompareLessEq            ; $8a <=
>1560	99 19					.word	CompareGreater           ; $8b >
>1562	8f 19					.word	CompareLess              ; $8c <
>1564	85 19					.word	CompareEquals            ; $8d =
>1566	a3 19					.word	CompareNotEquals         ; $8e <>
>1568	f6 17					.word	AddHandler               ; $8f +
>156a	19 18					.word	SubHandler               ; $90 -
>156c	b1 18					.word	ShrHandler               ; $91 >>
>156e	9e 18					.word	ShlHandler               ; $92 <<
>1570	2c 18					.word	MulHandler               ; $93 *
>1572	3f 18					.word	DivHandler               ; $94 /
>1574	52 18					.word	ModHandler               ; $95 mod
>1576	ea 18					.word	PowerHandler             ; $96 ^
>1578	c4 18					.word	WordRefHandler           ; $97 !
>157a	d7 18					.word	ByteRefHandler           ; $98 ?
>157c	08 2d					.word	Command_Repeat           ; $99 repeat
>157e	36 2d					.word	Command_While            ; $9a while
>1580	f9 2b					.word	Command_FOR              ; $9b for
>1582	8b 10					.word	CommandIf                ; $9c if
>1584	45 15					.word	TKErr04                  ; $9d defproc
>1586	15 2d					.word	Command_Until            ; $9e until
>1588	59 2d					.word	Command_Wend             ; $9f wend
>158a	5a 2c					.word	Command_NEXT             ; $a0 next
>158c	45 15					.word	TKErr06                  ; $a1 then
>158e	c6 10					.word	Command_ENDIF            ; $a2 endif
>1590	4b 14					.word	ReturnProc               ; $a3 endproc
>1592	86 1b					.word	UnaryParenthesis         ; $a4 (
>1594	de 1c					.word	UnaryLen                 ; $a5 len(
>1596	22 1d					.word	UnarySgn                 ; $a6 sgn(
>1598	0b 1d					.word	UnaryAbs                 ; $a7 abs(
>159a	7b 1d					.word	Unary_Random             ; $a8 random(
>159c	c5 1d					.word	Unary_Page               ; $a9 page
>159e	e6 21					.word	MInt32True               ; $aa true
>15a0	ea 21					.word	MInt32False              ; $ab false
>15a2	90 1d					.word	Unary_Min                ; $ac min(
>15a4	94 1d					.word	Unary_Max                ; $ad max(
>15a6	7b 1e					.word	UnarySys                 ; $ae sys(
>15a8	3e 1e					.word	UnaryTimer               ; $af timer(
>15aa	5b 1c					.word	EventFunction            ; $b0 event(
>15ac	67 1e					.word	UnaryGet                 ; $b1 get(
>15ae	57 1e					.word	UnaryInkey               ; $b2 inkey(
>15b0	12 1e					.word	UnaryAlloc               ; $b3 alloc(
>15b2	a3 1e					.word	ExecChr                  ; $b4 chr$(
>15b4	d3 1e					.word	ExecLeft                 ; $b5 left$(
>15b6	f0 1e					.word	ExecMid                  ; $b6 mid$(
>15b8	18 1f					.word	ExecRight                ; $b7 right$(
>15ba	c7 19					.word	Event_Str                ; $b8 str$(
>15bc	f6 19					.word	UnaryVal                 ; $b9 val(
>15be	39 1d					.word	UnaryPeek                ; $ba peek(
>15c0	3f 1d					.word	UnaryDeek                ; $bb deek(
>15c2	45 1d					.word	UnaryLeek                ; $bc leek(
>15c4	fc 1c					.word	UnaryAsc                 ; $bd asc(
>15c6	f0 1d					.word	UnaryIntToFloat          ; $be int(
>15c8	03 1e					.word	UnaryFloatToInt          ; $bf float(
>15ca	f9 19					.word	UnaryIsVal               ; $c0 isval(
>15cc	ba 1e					.word	ExecUpper                ; $c1 upper$(
>15ce	b7 1e					.word	ExecLower                ; $c2 lower$(
>15d0	d3 1d					.word	UnaryReference           ; $c3 @
>15d2	e9 1d					.word	UnaryComplement          ; $c4 ~
>15d4	e6 1d					.word	UnaryHexMarker           ; $c5 &
>15d6	45 15					.word	TKErr01                  ; $c6 )
>15d8	32 15					.word	CommandColon             ; $c7 :
>15da	45 15					.word	TKErr02                  ; $c8 ,
>15dc	45 15					.word	TKErr03                  ; $c9 ;
>15de	cc 14					.word	Command_Rem2             ; $ca '
>15e0	45 15					.word	TKErr07                  ; $cb to
>15e2	45 15					.word	TKErr05                  ; $cc step
>15e4	de 13					.word	CallProc                 ; $cd proc
>15e6	f6 11					.word	CommandLocal             ; $ce local
>15e8	7d 10					.word	Command_Dim              ; $cf dim
>15ea	cc 14					.word	Command_Rem              ; $d0 rem
>15ec	78 11					.word	CommandLet               ; $d1 let
>15ee	c7 10					.word	Command_Input            ; $d2 input
>15f0	c0 10					.word	Command_ELSE             ; $d3 else
>15f2	a9 17					.word	Command_VDU              ; $d4 vdu
>15f4	43 13					.word	Command_Print            ; $d5 print
>15f6	77 17					.word	CommandGOTO              ; $d6 goto
>15f8	4c 17					.word	CommandGOSUB             ; $d7 gosub
>15fa	5f 17					.word	CommandRETURN            ; $d8 return
>15fc	91 14					.word	CommandData              ; $d9 data
>15fe	1f 10					.word	Command_Assert           ; $da assert
>1600	06 13					.word	Command_Poke             ; $db poke
>1602	0a 13					.word	Command_Doke             ; $dc doke
>1604	0e 13					.word	Command_Loke             ; $dd loke
>1606	1c 17					.word	Command_Ink              ; $de ink
>1608	27 17					.word	Command_Paper            ; $df paper
>160a	16 17					.word	Command_CLS              ; $e0 cls
>160c	32 17					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.160e					Group1Vectors:
>160e	2d 10					.word	CommandClear             ; $86 clear
>1610	40 15					.word	Unimplemented            ; $87 load
>1612	40 15					.word	Unimplemented            ; $88 save
>1614	40 15					.word	Unimplemented            ; $89 list
>1616	f8 12					.word	Command_New              ; $8a new
>1618	d9 14					.word	Command_Run              ; $8b run
>161a	66 14					.word	CommandRead              ; $8c read
>161c	9a 14					.word	CommandRestore           ; $8d restore
>161e	ff 16					.word	CommandEnd               ; $8e end
>1620	fa 16					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0b17					procList:
>0b17							.fill 	2		 					; terminated by name high.
.0b19					yInLine:
>0b19							.fill 	1
.1622					FindProcedure:
.1622	8c 19 0b	sty $0b19			sty 	yInLine
.1625	20 e0 16	jsr $16e0			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1628	85 06		sta $06				sta 	temp1
.162a	ad 17 0b	lda $0b17			lda		procList 					; put procList address in temp2
.162d	85 08		sta $08				sta 	temp2
.162f	ad 18 0b	lda $0b18			lda 	procList+1
.1632	85 09		sta $09				sta 	temp2+1
.1634	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1636					_FPLoop:
.1636	b1 08		lda ($08),y			lda 	(temp2),y
.1638	f0 4f		beq $1689			beq 	_FPError 					; if so, we don't know this procedure.
.163a	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.163c	c8		iny				iny
.163d	b1 08		lda ($08),y			lda 	(temp2),y
.163f	85 04		sta $04				sta 	temp0
.1641	c8		iny				iny
.1642	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1644	c5 06		cmp $06				cmp 	temp1
.1646	d0 2b		bne $1673			bne 	_FPNext 					; hash is different, go to next.
.1648	38		sec				sec
.1649	ad 19 0b	lda $0b19			lda 	yInLine 					; position in line must be at least 4
.164c	e9 04		sbc #$04			sbc 	#4
.164e	18		clc				clc
.164f	65 02		adc $02				adc 	codePtr
.1651	85 0a		sta $0a				sta 	temp3
.1653	a5 03		lda $03				lda 	codePtr+1
.1655	69 00		adc #$00			adc 	#0
.1657	85 0b		sta $0b				sta 	temp3+1
.1659	98		tya				tya
.165a	48		pha				pha
.165b	a0 04		ldy #$04			ldy 	#4
.165d					_FPCName:
.165d	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.165f	d1 04		cmp ($04),y			cmp 	(temp0),y
.1661	d0 0e		bne $1671			bne 	_FPpulYNext 				; if different go to next one.
.1663	c8		iny				iny
.1664	c9 3a		cmp #$3a			cmp 	#$3A
.1666	90 f5		bcc $165d			bcc 	_FPCName 					; compare the whole lot....
.1668	68		pla				pla 								; throw away the saved Y
.1669	98		tya				tya 								; length of name is Y-4
.166a	38		sec				sec
.166b	e9 04		sbc #$04			sbc 	#4
.166d	ac 19 0b	ldy $0b19			ldy 	yInLine  					; get the original Y back
.1670	60		rts				rts
.1671					_FPpulYNext:
.1671	68		pla				pla
.1672	a8		tay				tay
.1673					_FPNext:
.1673	c8		iny				iny 								; next procedure record.
.1674	10 c0		bpl $1636			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1676	98		tya				tya 								; subtract 128 from Y
.1677	38		sec				sec
.1678	e9 80		sbc #$80			sbc 	#128
.167a	a8		tay				tay
.167b	18		clc				clc 								; add 128 to temp2, so we can have more than
.167c	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.167e	69 80		adc #$80			adc 	#128
.1680	85 08		sta $08				sta 	temp2
.1682	90 b2		bcc $1636			bcc 	_FPLoop
.1684	e6 09		inc $09				inc 	temp2+1
.1686	4c 36 16	jmp $1636			jmp 	_FPLoop
.1689					_FPError:
.1689	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.168b	20 9b 23	jsr $239b		jsr	errorHandler
.168e					ScanProc:
.168e	98		tya				tya
.168f	48		pha				pha
.1690	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.1692	8d 17 0b	sta $0b17			sta 	procList
.1695	a5 10		lda $10				lda 	lowMemory+1
.1697	8d 18 0b	sta $0b18			sta 	procList+1
.169a	20 33 15	jsr $1533			jsr 	ResetCodeAddress 			; back to the start.
.169d					_ScanLoop:
.169d	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.169f	b1 02		lda ($02),y			lda 	(codePtr),y
.16a1	f0 2a		beq $16cd			beq 	_ScanExit
.16a3	a0 03		ldy #$03			ldy 	#3							; get first token
.16a5	b1 02		lda ($02),y			lda 	(codePtr),y
.16a7	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.16a9	d0 12		bne $16bd			bne 	_ScanNext
.16ab	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.16ad	20 d5 16	jsr $16d5			jsr 	_ScanWrite
.16b0	a5 02		lda $02				lda 	codePtr
.16b2	20 d5 16	jsr $16d5			jsr 	_ScanWrite
.16b5	a0 04		ldy #$04			ldy 	#4 							; start of name part
.16b7	20 e0 16	jsr $16e0			jsr 	CalculateProcedureHash 		; calculate procedure hash
.16ba	20 d5 16	jsr $16d5			jsr 	_ScanWrite
.16bd					_ScanNext:
.16bd	18		clc				clc
.16be	a0 00		ldy #$00			ldy 	#0
.16c0	b1 02		lda ($02),y			lda 	(codePtr),y
.16c2	65 02		adc $02				adc 	codePtr
.16c4	85 02		sta $02				sta 	codePtr
.16c6	90 d5		bcc $169d			bcc 	_ScanLoop
.16c8	e6 03		inc $03				inc 	codePtr+1
.16ca	4c 9d 16	jmp $169d			jmp 	_ScanLoop
.16cd					_ScanExit:
.16cd	a9 00		lda #$00			lda 	#0 							; write ending zero.
.16cf	20 d5 16	jsr $16d5			jsr 	_ScanWrite
.16d2	68		pla				pla
.16d3	a8		tay				tay
.16d4	60		rts				rts
.16d5					_ScanWrite:
.16d5	a0 00		ldy #$00			ldy 	#0
.16d7	91 0f		sta ($0f),y			sta 	(lowMemory),y
.16d9	e6 0f		inc $0f				inc 	lowMemory
.16db	d0 02		bne $16df			bne 	_SWNoCarry
.16dd	e6 10		inc $10				inc 	lowMemory+1
.16df					_SWNoCarry:
.16df	60		rts				rts
.16e0					CalculateProcedureHash:
.16e0	a9 00		lda #$00			lda 	#0 							; clear hash.
.16e2	85 04		sta $04				sta 	temp0
.16e4					_CPHLoop:
.16e4	18		clc				clc 								; add character and rotate and add carry back in
.16e5	b1 02		lda ($02),y			lda 	(codePtr),y
.16e7	65 04		adc $04				adc 	temp0
.16e9	6a		ror a				ror 	a
.16ea	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.16ec	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.16ee	b1 02		lda ($02),y			lda 	(codePtr),y
.16f0	c8		iny				iny 								; advance incase we go round again.
.16f1	c9 3a		cmp #$3a			cmp 	#$3A
.16f3	90 ef		bcc $16e4			bcc 	_CPHLoop
.16f5	a5 04		lda $04				lda 	temp0
.16f7	a9 aa		lda #$aa			lda 	#$AA
.16f9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.16fa					CommandStop:
.16fa	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.16fc	20 9b 23	jsr $239b		jsr	errorHandler
.16ff					CommandEnd:
.16ff	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1702					AdvanceNextLine:
.1702	a0 00		ldy #$00			ldy 	#0 							; get offset
.1704	b1 02		lda ($02),y			lda 	(codePtr),y
.1706	18		clc				clc 								; add to codePtr
.1707	65 02		adc $02				adc 	codePtr
.1709	85 02		sta $02				sta 	codePtr
.170b	90 02		bcc $170f			bcc 	_ANLNoCarry
.170d	e6 03		inc $03				inc 	codePtr+1
.170f					_ANLNoCarry:
.170f	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1711	f0 ec		beq $16ff			beq 	CommandEnd 					; execute END
.1713	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1715	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1716					Command_CLS:
.1716	a2 00		ldx #$00		ldx	#0
.1718	20 84 23	jsr $2384		jsr	deviceHandler
.171b	60		rts				rts
.171c					Command_Ink:
.171c	a2 00		ldx #$00			ldx 	#0
.171e	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.1721	a2 06		ldx #$06		ldx	#6
.1723	20 84 23	jsr $2384		jsr	deviceHandler
.1726	60		rts				rts
.1727					Command_Paper:
.1727	a2 00		ldx #$00			ldx 	#0
.1729	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.172c	a2 0c		ldx #$0c		ldx	#12
.172e	20 84 23	jsr $2384		jsr	deviceHandler
.1731	60		rts				rts
.1732					Command_Locate:
.1732	a2 00		ldx #$00			ldx 	#0
.1734	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.1737	20 6a 22	jsr $226a			jsr 	CheckComma
.173a	e8		inx				inx
.173b	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.173e	98		tya				tya
.173f	48		pha				pha
.1740	a4 49		ldy $49				ldy 	esInt0+1
.1742	a5 48		lda $48				lda 	esInt0
.1744	a2 0a		ldx #$0a		ldx	#10
.1746	20 84 23	jsr $2384		jsr	deviceHandler
.1749	68		pla				pla
.174a	a8		tay				tay
.174b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.174c					CommandGOSUB:
.174c	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.174f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1751	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1753	20 85 22	jsr $2285			jsr 	RSClaim
.1756	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1758	20 b1 22	jsr $22b1			jsr 	RSSavePosition
.175b	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.175d	f0 1b		beq $177a			beq 	GotoTOS 					; and do a GOTO there.
.175f					CommandRETURN:
.175f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1761	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1763	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1765	f0 05		beq $176c			beq 	_isok
.1767	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1769	20 9b 23	jsr $239b		jsr	errorHandler
.176c					_isok:
.176c	a9 01		lda #$01			lda 	#1
.176e	20 c4 22	jsr $22c4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1771	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1773	20 a7 22	jsr $22a7			jsr 	RSFree
.1776	60		rts				rts
.1777					CommandGOTO:
.1777	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.177a					GotoTOS:
.177a	20 33 15	jsr $1533			jsr 	ResetCodeAddress 			; simple search.
.177d					_GotoSearch:
.177d	a0 00		ldy #$00			ldy 	#0 							; get offset
.177f	b1 02		lda ($02),y			lda 	(codePtr),y
.1781	f0 21		beq $17a4			beq 	_GotoError 					; not found.
.1783	c8		iny				iny									; check LSB match
.1784	b1 02		lda ($02),y			lda 	(codePtr),y
.1786	d5 48		cmp $48,x			cmp 	esInt0,x
.1788	d0 07		bne $1791			bne 	_GotoNext
.178a	c8		iny				iny
.178b	b1 02		lda ($02),y			lda 	(codePtr),y
.178d	d5 50		cmp $50,x			cmp 	esInt1,x
.178f	f0 10		beq $17a1			beq 	_GotoFound
.1791					_GotoNext:
.1791	a0 00		ldy #$00			ldy 	#0 							; go next line
.1793	b1 02		lda ($02),y			lda 	(codePtr),y
.1795	18		clc				clc
.1796	65 02		adc $02				adc 	codePtr
.1798	85 02		sta $02				sta 	codePtr
.179a	90 e1		bcc $177d			bcc 	_GotoSearch
.179c	e6 03		inc $03				inc 	codePtr+1
.179e	4c 7d 17	jmp $177d			jmp 	_GotoSearch
.17a1					_GotoFound:
.17a1	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.17a3	60		rts				rts
.17a4					_GotoError:
.17a4	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.17a6	20 9b 23	jsr $239b		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.17a9					Command_VDU:
.17a9	20 cd 1b	jsr $1bcd			jsr 	EvaluateRootInteger 			; get integer at root.
.17ac	a5 48		lda $48				lda 	esInt0
.17ae	a2 0e		ldx #$0e		ldx	#14
.17b0	20 84 23	jsr $2384		jsr	deviceHandler
.17b3					_CVNext:
.17b3	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.17b5	c8		iny				iny
.17b6	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.17b8	f0 ef		beq $17a9			beq 	Command_VDU
.17ba	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.17bc	d0 0a		bne $17c8			bne 	_CVExit
.17be	a5 50		lda $50				lda 	esInt1
.17c0	a2 0e		ldx #$0e		ldx	#14
.17c2	20 84 23	jsr $2384		jsr	deviceHandler
.17c5	4c b3 17	jmp $17b3			jmp 	_CVNext
.17c8	88		dey		_CVExit:dey
.17c9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2d36					Command_While:
.2d36	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2d38	a2 04		ldx #$04			ldx 	#4
.2d3a	20 85 22	jsr $2285			jsr 	RSClaim 					; create on stack.
.2d3d	88		dey				dey
.2d3e	a9 01		lda #$01			lda 	#1
.2d40	20 b1 22	jsr $22b1			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2d43	c8		iny				iny
.2d44	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger				; get the conditional
.2d47	20 11 22	jsr $2211			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2d4a	f0 01		beq $2d4d			beq 	_CWFail
.2d4c	60		rts				rts
.2d4d					_CWFail:
.2d4d	a9 04		lda #$04			lda 	#4
.2d4f	20 a7 22	jsr $22a7			jsr 	RSFree 						; close the just opened position.
.2d52	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2d54	aa		tax				tax
.2d55	20 71 2d	jsr $2d71			jsr 	ScanForward
.2d58	60		rts				rts
.2d59					Command_Wend:
.2d59	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d5b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2d5d	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2d5f	f0 05		beq $2d66			beq 	_isok
.2d61	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2d63	20 9b 23	jsr $239b		jsr	errorHandler
.2d66					_isok:
.2d66	a9 01		lda #$01			lda 	#1
.2d68	20 c4 22	jsr $22c4			jsr 	RSLoadPosition				; go back until true
.2d6b	a9 04		lda #$04			lda 	#4
.2d6d	20 a7 22	jsr $22a7			jsr 	RSFree 						; close the loop
.2d70	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.17ca					BinaryProcess:
.17ca	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.17cc	15 41		ora $41,x			ora 	esType+1,x
.17ce	0a		asl a				asl 	a
.17cf	30 0e		bmi $17df			bmi 	_BPStringType 				; if one is set, then string type.
.17d1	18		clc				clc 								; return CC for integer
.17d2	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.17d4	f0 08		beq $17de			beq 	_BPExit 					; if both integer then return with CC.
.17d6	20 e4 17	jsr $17e4			jsr 	BPMakeBothFloat 			; make both float
.17d9	a9 01		lda #$01			lda 	#$01 						; set result type to float
.17db	95 40		sta $40,x			sta 	esType,x
.17dd	38		sec				sec 								; and return with carry set.
.17de					_BPExit:
.17de	60		rts				rts
.17df					_BPStringType:
.17df	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17e1	20 9b 23	jsr $239b		jsr	errorHandler
.17e4					BPMakeBothFloat:
.17e4	e8		inx				inx
.17e5	20 e9 17	jsr $17e9			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.17e8	ca		dex				dex
.17e9					BPMakeFloat:
.17e9	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.17eb	4a		lsr a				lsr 	a
.17ec	b0 07		bcs $17f5			bcs 	_BPIsFloat
.17ee	8a		txa				txa
.17ef	a2 1a		ldx #$1a		ldx	#26
.17f1	20 8c 26	jsr $268c		jsr	floatingpointHandler
.17f4	aa		tax				tax
.17f5					_BPIsFloat:
.17f5	60		rts				rts
.17f6					AddHandler:
.17f6	20 45 1a	jsr $1a45			jsr 	DereferenceTwo 				; dereference top two on stack.
.17f9	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.17fb	35 41		and $41,x			and 	esType+1,x
.17fd	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.17ff	d0 10		bne $1811			bne 	_AHStringConcat				; concatenate strings.
.1801	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1804	b0 03		bcs $1809			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1806	4c d3 20	jmp $20d3			jmp 	MInt32Add 							; else do it as integer.
.1809					_IsFPOperation:
.1809	8a		txa				txa 								; call the relevant fp routine
.180a	a2 02		ldx #$02		ldx	#2
.180c	20 8c 26	jsr $268c		jsr	floatingpointHandler
.180f	aa		tax				tax
.1810	60		rts				rts
.1811					_AHStringConcat:
.1811	8a		txa				txa
.1812	a2 04		ldx #$04		ldx	#4
.1814	20 28 29	jsr $2928		jsr	stringHandler
.1817	aa		tax				tax
.1818	60		rts				rts
.1819					SubHandler:
.1819	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.181c	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.181f	b0 03		bcs $1824			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1821	4c ed 20	jmp $20ed			jmp 	MInt32Sub 							; else do it as integer.
.1824					_IsFPOperation:
.1824	8a		txa				txa 								; call the relevant fp routine
.1825	a2 10		ldx #$10		ldx	#16
.1827	20 8c 26	jsr $268c		jsr	floatingpointHandler
.182a	aa		tax				tax
.182b	60		rts				rts
.182c					MulHandler:
.182c	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.182f	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1832	b0 03		bcs $1837			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1834	4c 07 21	jmp $2107			jmp 	MInt32Multiply 							; else do it as integer.
.1837					_IsFPOperation:
.1837	8a		txa				txa 								; call the relevant fp routine
.1838	a2 0a		ldx #$0a		ldx	#10
.183a	20 8c 26	jsr $268c		jsr	floatingpointHandler
.183d	aa		tax				tax
.183e	60		rts				rts
.183f					DivHandler:
.183f	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.1842	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1845	b0 03		bcs $184a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1847	4c cb 1f	jmp $1fcb			jmp 	MInt32SDivide 							; else do it as integer.
.184a					_IsFPOperation:
.184a	8a		txa				txa 								; call the relevant fp routine
.184b	a2 06		ldx #$06		ldx	#6
.184d	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1850	aa		tax				tax
.1851	60		rts				rts
.1852					ModHandler:
.1852	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.1855	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1858	b0 03		bcs $185d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.185a	4c 49 20	jmp $2049			jmp 	MInt32Modulus 							; else do it as integer.
.185d					_IsFPOperation:
.185d	8a		txa				txa 								; call the relevant fp routine
.185e	a2 08		ldx #$08		ldx	#8
.1860	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1863	aa		tax				tax
.1864	60		rts				rts
.1865					XorHandler:
.1865	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.1868	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.186b	b0 03		bcs $1870			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.186d	4c 7d 1f	jmp $1f7d			jmp 	MInt32Xor 							; else do it as integer.
.1870					_IsFPOperation:
.1870	8a		txa				txa 								; call the relevant fp routine
.1871	a2 08		ldx #$08		ldx	#8
.1873	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1876	aa		tax				tax
.1877	60		rts				rts
.1878					OrHandler:
.1878	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.187b	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.187e	b0 03		bcs $1883			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1880	4c 64 1f	jmp $1f64			jmp 	MInt32Or 							; else do it as integer.
.1883					_IsFPOperation:
.1883	8a		txa				txa 								; call the relevant fp routine
.1884	a2 08		ldx #$08		ldx	#8
.1886	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1889	aa		tax				tax
.188a	60		rts				rts
.188b					AndHandler:
.188b	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.188e	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.1891	b0 03		bcs $1896			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1893	4c 4b 1f	jmp $1f4b			jmp 	MInt32And 							; else do it as integer.
.1896					_IsFPOperation:
.1896	8a		txa				txa 								; call the relevant fp routine
.1897	a2 08		ldx #$08		ldx	#8
.1899	20 8c 26	jsr $268c		jsr	floatingpointHandler
.189c	aa		tax				tax
.189d	60		rts				rts
.189e					ShlHandler:
.189e	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18a1	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18a4	b0 03		bcs $18a9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18a6	4c 1f 19	jmp $191f			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.18a9					_IsFPOperation:
.18a9	8a		txa				txa 								; call the relevant fp routine
.18aa	a2 08		ldx #$08		ldx	#8
.18ac	20 8c 26	jsr $268c		jsr	floatingpointHandler
.18af	aa		tax				tax
.18b0	60		rts				rts
.18b1					ShrHandler:
.18b1	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18b4	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18b7	b0 03		bcs $18bc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18b9	4c 22 19	jmp $1922			jmp 	MInt32ShiftRightX 							; else do it as integer.
.18bc					_IsFPOperation:
.18bc	8a		txa				txa 								; call the relevant fp routine
.18bd	a2 08		ldx #$08		ldx	#8
.18bf	20 8c 26	jsr $268c		jsr	floatingpointHandler
.18c2	aa		tax				tax
.18c3	60		rts				rts
.18c4					WordRefHandler:
.18c4	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18c7	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18ca	b0 03		bcs $18cf			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18cc	4c 11 19	jmp $1911			jmp 	MInt32WordIndirect 							; else do it as integer.
.18cf					_IsFPOperation:
.18cf	8a		txa				txa 								; call the relevant fp routine
.18d0	a2 08		ldx #$08		ldx	#8
.18d2	20 8c 26	jsr $268c		jsr	floatingpointHandler
.18d5	aa		tax				tax
.18d6	60		rts				rts
.18d7					ByteRefHandler:
.18d7	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18da	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18dd	b0 03		bcs $18e2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18df	4c 15 19	jmp $1915			jmp 	MInt32ByteIndirect 							; else do it as integer.
.18e2					_IsFPOperation:
.18e2	8a		txa				txa 								; call the relevant fp routine
.18e3	a2 08		ldx #$08		ldx	#8
.18e5	20 8c 26	jsr $268c		jsr	floatingpointHandler
.18e8	aa		tax				tax
.18e9	60		rts				rts
.18ea					PowerHandler:
.18ea	20 45 1a	jsr $1a45			jsr 	DereferenceTwo
.18ed	20 ca 17	jsr $17ca			jsr 	BinaryProcess 				; check to see if either is float
.18f0	b0 03		bcs $18f5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18f2	4c fd 18	jmp $18fd			jmp 	PowerInteger 							; else do it as integer.
.18f5					_IsFPOperation:
.18f5	8a		txa				txa 								; call the relevant fp routine
.18f6	a2 16		ldx #$16		ldx	#22
.18f8	20 8c 26	jsr $268c		jsr	floatingpointHandler
.18fb	aa		tax				tax
.18fc	60		rts				rts
.18fd					PowerInteger:
.18fd	20 e4 17	jsr $17e4			jsr 	BPMakeBothFloat				; make them float.
.1900	8a		txa				txa
.1901	a2 16		ldx #$16		ldx	#22
.1903	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1906	a2 12		ldx #$12		ldx	#18
.1908	20 8c 26	jsr $268c		jsr	floatingpointHandler
.190b	aa		tax				tax
.190c	a9 00		lda #$00			lda 	#0 							; make type integer
.190e	95 40		sta $40,x			sta 	esType,x
.1910	60		rts				rts
.1911					Mint32WordIndirect:
.1911	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1913	d0 02		bne $1917			bne 	Min32Indirect
.1915					Mint32ByteIndirect:
.1915	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1917					Min32Indirect:
.1917	48		pha				pha 								; save the indirection
.1918	20 d3 20	jsr $20d3			jsr 	MInt32Add 					; add a!b a?b
.191b	68		pla				pla 								; and set the type to reference.
.191c	95 40		sta $40,x			sta 	esType,x
.191e	60		rts				rts
.191f					Mint32ShiftLeftX:
.191f	18		clc				clc
.1920	90 01		bcc $1923			bcc 	Mint32Shift
.1922					Mint32ShiftRightX:
.1922	38		sec				sec
.1923					Mint32Shift:
.1923	08		php				php 								; save carry flag on stack.
.1924	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1926	15 59		ora $59,x			ora 	esInt2+1,x
.1928	15 61		ora $61,x			ora 	esInt3+1,x
.192a	d0 1e		bne $194a			bne 	_MShiftZero
.192c	b5 49		lda $49,x			lda 	esInt0+1,x
.192e	c9 20		cmp #$20			cmp 	#32
.1930	b0 18		bcs $194a			bcs 	_MShiftZero
.1932					_MShiftLoop:
.1932	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1934	f0 12		beq $1948			beq 	_MShiftExit
.1936	d6 49		dec $49,x			dec 	esInt0+1,x
.1938	28		plp				plp 								; restore and save carry
.1939	08		php				php
.193a	90 06		bcc $1942			bcc 	_MShiftLeft
.193c	20 08 22	jsr $2208			jsr 	Mint32ShiftRight
.193f	4c 32 19	jmp $1932			jmp 	_MShiftLoop
.1942					_MShiftLeft:
.1942	20 ff 21	jsr $21ff			jsr 	Mint32ShiftLeft
.1945	4c 32 19	jmp $1932			jmp 	_MShiftLoop
.1948					_MShiftExit:
.1948	28		plp				plp	 								; throw saved carry and exit
.1949	60		rts				rts
.194a					_MShiftZero:
.194a	4c ea 21	jmp $21ea			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.194d					PerformComparison:
.194d	20 45 1a	jsr $1a45			jsr 	DereferenceTwo 				; make both values.
.1950	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1952	35 41		and $41,x			and 	esType+1,x
.1954	0a		asl a				asl 	a
.1955	30 1d		bmi $1974			bmi 	_PCIsString
.1957	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1959	15 41		ora $41,x			ora 	esType+1,x
.195b	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.195c	30 22		bmi $1980			bmi 	_PCError
.195e	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1960	f0 0f		beq $1971			beq 	_PCIsInteger 				; if not two integers
.1962	20 e4 17	jsr $17e4			jsr 	BPMakeBothFloat 			; make both float
.1965	8a		txa				txa
.1966	a2 04		ldx #$04		ldx	#4
.1968	20 8c 26	jsr $268c		jsr	floatingpointHandler
.196b	86 0c		stx $0c				stx 	tempShort 					; save result
.196d	aa		tax				tax
.196e	a5 0c		lda $0c				lda 	tempShort
.1970	60		rts				rts
.1971					_PCIsInteger:
.1971	4c 96 1f	jmp $1f96			jmp 	MInt32Compare
.1974					_PCIsString:
.1974	8a		txa				txa 								; A has SP
.1975	a2 06		ldx #$06		ldx	#6
.1977	20 28 29	jsr $2928		jsr	stringHandler
.197a	86 0c		stx $0c				stx 	tempShort 					; save result
.197c	aa		tax				tax 								; put SP back in X and get result.
.197d	a5 0c		lda $0c				lda 	tempShort
.197f	60		rts				rts
.1980					_PCError:
.1980	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1982	20 9b 23	jsr $239b		jsr	errorHandler
.1985					CompareEquals:
.1985	20 4d 19	jsr $194d			jsr 	PerformComparison
.1988	c9 00		cmp #$00			cmp 	#$00
.198a	f0 35		beq $19c1			beq  	CompareTrue
.198c	4c c4 19	jmp $19c4			jmp 	CompareFalse
.198f					CompareLess:
.198f	20 4d 19	jsr $194d			jsr 	PerformComparison
.1992	c9 ff		cmp #$ff			cmp 	#$FF
.1994	f0 2b		beq $19c1			beq  	CompareTrue
.1996	4c c4 19	jmp $19c4			jmp 	CompareFalse
.1999					CompareGreater:
.1999	20 4d 19	jsr $194d			jsr 	PerformComparison
.199c	c9 01		cmp #$01			cmp 	#$01
.199e	f0 21		beq $19c1			beq  	CompareTrue
.19a0	4c c4 19	jmp $19c4			jmp 	CompareFalse
.19a3					CompareNotEquals:
.19a3	20 4d 19	jsr $194d			jsr 	PerformComparison
.19a6	c9 00		cmp #$00			cmp 	#$00
.19a8	d0 17		bne $19c1			bne  	CompareTrue
.19aa	4c c4 19	jmp $19c4			jmp 	CompareFalse
.19ad					CompareGreaterEq:
.19ad	20 4d 19	jsr $194d			jsr 	PerformComparison
.19b0	c9 ff		cmp #$ff			cmp 	#$FF
.19b2	d0 0d		bne $19c1			bne  	CompareTrue
.19b4	4c c4 19	jmp $19c4			jmp 	CompareFalse
.19b7					CompareLessEq:
.19b7	20 4d 19	jsr $194d			jsr 	PerformComparison
.19ba	c9 01		cmp #$01			cmp 	#$01
.19bc	d0 03		bne $19c1			bne  	CompareTrue
.19be	4c c4 19	jmp $19c4			jmp 	CompareFalse
.19c1					CompareTrue:
.19c1	4c e6 21	jmp $21e6			jmp 	MInt32True
.19c4					CompareFalse:
.19c4	4c ea 21	jmp $21ea			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.19c7					Event_Str:
.19c7	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric 			; get a number.
.19ca	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.19cc	d0 13		bne $19e1			bne 	_ESFloat
.19ce	20 24 1a	jsr $1a24			jsr 	ConvertGetBase
.19d1	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.19d3	85 04		sta $04				sta 	temp0
.19d5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.19d7	85 05		sta $05				sta 	1+(temp0)
.19d9	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.19db	20 40 21	jsr $2140			jsr 	MInt32ToString 				; convert to string.
.19de	4c ee 19	jmp $19ee			jmp 	_ESCloneExit 				; clone and exit.
.19e1					_ESFloat:
.19e1	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check closing )
.19e4	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.19e7	8a		txa				txa
.19e8	a2 14		ldx #$14		ldx	#20
.19ea	20 8c 26	jsr $268c		jsr	floatingpointHandler
.19ed	aa		tax				tax
.19ee					_ESCloneExit:
.19ee	8a		txa				txa
.19ef	a2 02		ldx #$02		ldx	#2
.19f1	20 28 29	jsr $2928		jsr	stringHandler
.19f4	aa		tax				tax
.19f5	60		rts				rts
.19f6					UnaryVal:
.19f6	38		sec				sec
.19f7	b0 01		bcs $19fa			bcs 	ValueMain
.19f9					UnaryIsVal:
.19f9	18		clc				clc
.19fa					ValueMain:
.19fa	08		php				php 								; save results (CS is value, CC is validation)
.19fb	20 c4 1b	jsr $1bc4			jsr 	EvaluateString
.19fe	20 24 1a	jsr $1a24			jsr 	ConvertGetBase 				; get base, if any.
.1a01	98		tya				tya
.1a02	48		pha				pha
.1a03	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1a06	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1a08	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1a0a	20 5d 20	jsr $205d			jsr 	MInt32FromString 			; convert it back from a string.
.1a0d	b0 0c		bcs $1a1b			bcs 	_VMSuccess 					; successfully converted.
.1a0f	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1a11	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1a13	f0 00		beq $1a15			beq 	_VMFailed 	 				; so we failed.
.1a15					_VMFailed:
.1a15	68		pla				pla
.1a16	a8		tay				tay
.1a17	28		plp				plp
.1a18	4c ea 21	jmp $21ea			jmp 	MInt32False 				; return 0 whatever.
.1a1b					_VMSuccess:
.1a1b	68		pla				pla
.1a1c	a8		tay				tay
.1a1d	28		plp				plp 								; if CS the it was val() so we want the value.
.1a1e	b0 03		bcs $1a23			bcs 	_VMExit
.1a20	4c e6 21	jmp $21e6			jmp 	MInt32True 					; otherwise return true as successful.
.1a23					_VMExit:
.1a23	60		rts				rts
.1a24					ConvertGetBase:
.1a24	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1a26	95 49		sta $49,x			sta 	esInt0+1,x
.1a28	b1 02		lda ($02),y			lda 	(codePtr),y
.1a2a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a2c	d0 0e		bne $1a3c			bne 	_CGBDone
.1a2e	e8		inx				inx 								; next level
.1a2f	c8		iny				iny 								; skip comma.
.1a30	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger		; evaluate the base.
.1a33	ca		dex				dex
.1a34	c9 02		cmp #$02			cmp 	#2
.1a36	90 08		bcc $1a40			bcc 	_CGBValue
.1a38	c9 11		cmp #$11			cmp 	#17
.1a3a	b0 04		bcs $1a40			bcs 	_CGBValue
.1a3c					_CGBDone:
.1a3c	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1a3f	60		rts				rts
.1a40					_CGBValue:
.1a40	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a42	20 9b 23	jsr $239b		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1a45					DereferenceTwo:
.1a45	e8		inx				inx
.1a46	20 4a 1a	jsr $1a4a			jsr 	DereferenceOne
.1a49	ca		dex				dex
.1a4a					DereferenceOne:
.1a4a	b5 40		lda $40,x			lda 	esType,x
.1a4c	10 3d		bpl $1a8b			bpl 	_DRNotReference 			; is it a reference ?
.1a4e	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1a4f	b0 3b		bcs $1a8c			bcs 	_DRFloatDeReference
.1a51	98		tya				tya
.1a52	48		pha				pha
.1a53	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1a55	85 04		sta $04				sta 	temp0
.1a57	b5 50		lda $50,x			lda 	esInt1,x
.1a59	85 05		sta $05				sta 	temp0+1
.1a5b	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1a5d	95 50		sta $50,x			sta 	esInt1,x
.1a5f	95 58		sta $58,x			sta 	esInt2,x
.1a61	95 60		sta $60,x			sta 	esInt3,x
.1a63	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1a65	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1a67	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1a68	30 0d		bmi $1a77			bmi 	_DeRefString 				; string, 2 bytes only
.1a6a	d0 11		bne $1a7d			bne 	_DeRefByte 					; byte 1 byte only
.1a6c					_DeRefLong:
.1a6c	a0 03		ldy #$03			ldy 	#3
.1a6e	b1 04		lda ($04),y			lda 	(temp0),y
.1a70	95 60		sta $60,x			sta 	esInt3,x
.1a72	88		dey				dey
.1a73	b1 04		lda ($04),y			lda 	(temp0),y
.1a75	95 58		sta $58,x			sta 	esInt2,x
.1a77					_DeRefString:
.1a77	a0 01		ldy #$01			ldy 	#1
.1a79	b1 04		lda ($04),y			lda 	(temp0),y
.1a7b	95 50		sta $50,x			sta 	esInt1,x
.1a7d					_DeRefByte:
.1a7d	a0 00		ldy #$00			ldy 	#0
.1a7f	b1 04		lda ($04),y			lda 	(temp0),y
.1a81	95 48		sta $48,x			sta 	esInt0,x
.1a83	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1a85	29 40		and #$40			and 	#$40
.1a87	95 40		sta $40,x			sta 	esType,x
.1a89	68		pla				pla
.1a8a	a8		tay				tay
.1a8b					_DRNotReference
.1a8b	60		rts				rts
.1a8c					_DRFloatDereference:
.1a8c	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; address to deref in temp0
.1a8f	8a		txa				txa
.1a90	a2 1c		ldx #$1c		ldx	#28
.1a92	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1a95	aa		tax				tax
.1a96	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1a98	95 40		sta $40,x			sta 	esType,x
.1a9a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1a9b					EvaluateLevel:
.1a9b	48		pha				pha 								; save precedence level.
.1a9c	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1a9e	95 48		sta $48,x			sta 	esInt0,x
.1aa0	95 50		sta $50,x			sta 	esInt1,x
.1aa2	95 58		sta $58,x			sta 	esInt2,x
.1aa4	95 60		sta $60,x			sta 	esInt3,x
.1aa6	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1aa8	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1aaa	30 21		bmi $1acd			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1aac	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1aad	30 0a		bmi $1ab9			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1aaf	8a		txa				txa 								; stack level in X
.1ab0	a2 00		ldx #$00		ldx	#0
.1ab2	20 f0 2b	jsr $2bf0		jsr	variableHandler
.1ab5	aa		tax				tax
.1ab6	4c f6 1a	jmp $1af6			jmp		_ELHasTerm
.1ab9					_ELIsConstant:
.1ab9	4a		lsr a				lsr 	a 							; get the value back
.1aba	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1abc	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1abe					_ELCheckNext:
.1abe	c8		iny				iny 								; look at next
.1abf	b1 02		lda ($02),y			lda 	(codePtr),y
.1ac1	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1ac3	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1ac5	b0 2f		bcs $1af6			bcs 	_ELHasTerm 					; done getting the constant.
.1ac7	20 0f 1c	jsr $1c0f			jsr 	ELShiftByteIn 				; shift byte into position.
.1aca	4c be 1a	jmp $1abe			jmp 	_ELCheckNext
.1acd					_ELIsToken:
.1acd	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1acf	f0 0f		beq $1ae0			beq 	_ELIsString
.1ad1	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1ad3	d0 5f		bne $1b34			bne 	_ELCheckUnary
.1ad5	8a		txa				txa 								; put X into A
.1ad6	c8		iny				iny 								; skip over the float marker
.1ad7	a2 18		ldx #$18		ldx	#24
.1ad9	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1adc	aa		tax				tax 								; restore X
.1add	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1ae0					_ELIsString:
.1ae0	98		tya				tya 								; address of string is codePtr+y+1
.1ae1	38		sec				sec
.1ae2	65 02		adc $02				adc 	codePtr
.1ae4	95 48		sta $48,x			sta 	esInt0,x
.1ae6	a5 03		lda $03				lda 	codePtr+1
.1ae8	69 00		adc #$00			adc 	#0
.1aea	95 50		sta $50,x			sta 	esInt1,x
.1aec	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1aee	95 40		sta $40,x			sta 	esType,x
.1af0	c8		iny				iny 								; skip over string.
.1af1	98		tya				tya
.1af2	38		sec				sec									; +1 for the length itself.
.1af3	71 02		adc ($02),y			adc 	(codePtr),y
.1af5	a8		tay				tay 								; and fall through to term loop code.
.1af6					_ELHasTerm:
.1af6	b1 02		lda ($02),y			lda 	(codePtr),y
.1af8	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1afa	90 04		bcc $1b00			bcc 	_ELPopExit
.1afc	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1afe	90 02		bcc $1b02			bcc 	_ELHasBinaryTerm
.1b00					_ELPopExit:
.1b00	68		pla				pla
.1b01					_ELExit:
.1b01	60		rts				rts
.1b02					_ELHasBinaryTerm:
.1b02	84 0c		sty $0c				sty 	tempShort 					; save position
.1b04	a8		tay				tay 								; use token as an index and get the precedence.
.1b05	b9 b7 1b	lda $1bb7,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1b08	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1b0a	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1b0c	68		pla				pla 								; restore current level.
.1b0d	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1b0f	b0 f0		bcs $1b01			bcs 	_ELExit
.1b11	48		pha				pha 								; save current level back on the stack.
.1b12	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1b14	48		pha				pha
.1b15	c8		iny				iny
.1b16	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1b17	a5 0c		lda $0c				lda 	tempShort
.1b19	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1b1c	ca		dex				dex
.1b1d	68		pla				pla 								; get the operator back out.
.1b1e					_ELExecuteA:
.1b1e	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1b20	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1b21	aa		tax				tax
.1b22	bd 4a 15	lda $154a,x			lda 	Group0Vectors,x
.1b25	85 04		sta $04				sta 	temp0
.1b27	bd 4b 15	lda $154b,x			lda 	Group0Vectors+1,x
.1b2a	85 05		sta $05				sta 	temp0+1
.1b2c	a6 0c		ldx $0c				ldx 	tempShort
.1b2e	20 7b 1b	jsr $1b7b			jsr 	_ELCallTemp0
.1b31	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm 					; and loop back round.
.1b34					_ELCheckUnary:
.1b34	c8		iny				iny 								; skip over token.
.1b35	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1b37	f0 19		beq $1b52			beq 	_ELMinus
.1b39	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1b3b	f0 2c		beq $1b69			beq 	_ELIndirect
.1b3d	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1b3f	f0 28		beq $1b69			beq 	_ELIndirect
.1b41	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1b43	f0 39		beq $1b7e			beq 	_ELExtension
.1b45	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1b47	90 04		bcc $1b4d			bcc 	_ELUSyntax
.1b49	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1b4b	90 d1		bcc $1b1e			bcc 	_ELExecuteA 				; if so do that token.
.1b4d					_ELUSyntax:
.1b4d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b4f	20 9b 23	jsr $239b		jsr	errorHandler
.1b52					_ELMinus:
.1b52	20 98 1b	jsr $1b98			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1b55	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1b57	f0 0a		beq $1b63			beq 	_ELMinusInteger
.1b59	8a		txa				txa
.1b5a	a2 0c		ldx #$0c		ldx	#12
.1b5c	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1b5f	aa		tax				tax
.1b60	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1b63					_ELMinusInteger:
.1b63	20 a4 21	jsr $21a4			jsr 	MInt32Negate 				; do int negate
.1b66	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1b69					_ELIndirect:
.1b69	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1b6a	20 a1 1b	jsr $1ba1			jsr 	EvaluateIntegerTerm 		; integer address
.1b6d	68		pla				pla
.1b6e	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1b70	f0 02		beq $1b74			beq 	_ELHaveModifier
.1b72	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1b74					_ELHaveModifier:
.1b74	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1b76	95 40		sta $40,x			sta 	esType,x
.1b78	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1b7b					_ELCallTemp0:
.1b7b	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1b7e					_ELExtension:
.1b7e	8a		txa				txa 								; stack pos in A
.1b7f	20 fb 25	jsr $25fb		jsr	extensionHandler
.1b82	aa		tax				tax 								; restore stack
.1b83	4c f6 1a	jmp $1af6			jmp 	_ELHasTerm
.1b86					UnaryParenthesis:
.1b86	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1b88	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1b8b	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check for )
.1b8e	60		rts				rts
.1b8f					EvaluateTerm:
.1b8f	a9 0f		lda #$0f			lda 	#15
.1b91	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1b94	20 4a 1a	jsr $1a4a			jsr 	DereferenceOne
.1b97	60		rts				rts
.1b98					EvaluateNumericTerm:
.1b98	20 8f 1b	jsr $1b8f			jsr 	EvaluateTerm
.1b9b	b5 40		lda $40,x			lda 	esType,x
.1b9d	0a		asl a				asl 	a 							; see if it's a string.
.1b9e	30 09		bmi $1ba9			bmi 	ENTType
.1ba0	60		rts				rts
.1ba1					EvaluateIntegerTerm:
.1ba1	20 8f 1b	jsr $1b8f			jsr 	EvaluateTerm
.1ba4	b5 40		lda $40,x			lda 	esType,x
.1ba6	d0 01		bne $1ba9			bne 	ENTType
.1ba8	60		rts				rts
.1ba9					ENTType:
.1ba9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1bab	20 9b 23	jsr $239b		jsr	errorHandler
.1bae					EvaluateRoot:
.1bae	a2 00		ldx #$00			ldx 	#0
.1bb0					Evaluate:
.1bb0	a9 00		lda #$00			lda 	#0
.1bb2	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1bb5	20 4a 1a	jsr $1a4a			jsr 	DereferenceOne
.1bb8	60		rts				rts
.1bb9					EvaluateNumeric:
.1bb9	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1bbc	b5 40		lda $40,x			lda 	esType,x
.1bbe	0a		asl a				asl 	a 							; see if it's a string.
.1bbf	30 e8		bmi $1ba9			bmi 	ENTType
.1bc1	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1bc2	4a		lsr a				lsr 	a
.1bc3	60		rts				rts
.1bc4					EvaluateString:
.1bc4	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1bc7	b5 40		lda $40,x			lda 	esType,x
.1bc9	0a		asl a				asl 	a 							; see if it's a string.
.1bca	10 dd		bpl $1ba9			bpl 	ENTType
.1bcc	60		rts				rts
.1bcd					EvaluateRootInteger:
.1bcd	a2 00		ldx #$00			ldx 	#0
.1bcf					EvaluateInteger:
.1bcf	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1bd2	b5 40		lda $40,x			lda 	esType,x
.1bd4	d0 d3		bne $1ba9			bne 	ENTType
.1bd6	60		rts				rts
.1bd7					EvaluateSmallInteger:
.1bd7	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1bda	b5 50		lda $50,x			lda 	esInt1,x
.1bdc	15 58		ora $58,x			ora 	esInt2,x
.1bde	15 60		ora $60,x			ora 	esInt3,x
.1be0	d0 03		bne $1be5			bne 	_ESIValue
.1be2	b5 48		lda $48,x			lda 	esInt0,x
.1be4	60		rts				rts
.1be5					_ESIValue:
.1be5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1be7	20 9b 23	jsr $239b		jsr	errorHandler
.1bea					LinkEvaluate:
.1bea	aa		tax				tax
.1beb	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1bee	8a		txa				txa
.1bef	60		rts				rts
.1bf0					LinkEvaluateInteger:
.1bf0	aa		tax				tax
.1bf1	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1bf4	8a		txa				txa
.1bf5	60		rts				rts
.1bf6					LinkEvaluateSmallInt:
.1bf6	aa		tax				tax
.1bf7	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger
.1bfa	8a		txa				txa
.1bfb	60		rts				rts
.1bfc					EvaluateReference:
.1bfc	ad 4e 1c	lda $1c4e			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1bff	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1c00	e9 01		sbc #$01			sbc 	#1
.1c02	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel
.1c05	b5 40		lda $40,x			lda 	esType,x
.1c07	10 01		bpl $1c0a			bpl 	_ERFail
.1c09	60		rts				rts
.1c0a					_ERFail:
.1c0a	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1c0c	20 9b 23	jsr $239b		jsr	errorHandler
.1c0f					ELShiftByteIn:
.1c0f	48		pha				pha 								; save bits to shift in.
.1c10	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1c12	48		pha				pha
.1c13	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1c15	95 60		sta $60,x			sta 	esInt3,x
.1c17	b5 50		lda $50,x			lda 	esInt1,x
.1c19	95 58		sta $58,x			sta 	esInt2,x
.1c1b	b5 48		lda $48,x			lda 	esInt0,x
.1c1d	95 50		sta $50,x			sta 	esInt1,x
.1c1f	a9 00		lda #$00			lda 	#0
.1c21	95 48		sta $48,x			sta 	esInt0,x
.1c23	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1c24	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1c26	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1c28					_ELShiftLoop:
.1c28	4a		lsr a				lsr 	a
.1c29	76 60		ror $60,x			ror 	esInt3,x
.1c2b	76 58		ror $58,x			ror 	esInt2,x
.1c2d	76 50		ror $50,x			ror 	esInt1,x
.1c2f	76 48		ror $48,x			ror 	esInt0,x
.1c31	c9 01		cmp #$01			cmp 	#1
.1c33	d0 f3		bne $1c28			bne 	_ELShiftLoop
.1c35	68		pla				pla 								; get original 6 bit value and OR in.
.1c36	29 3f		and #$3f			and 	#$3F
.1c38	15 48		ora $48,x			ora 	esInt0,x
.1c3a	95 48		sta $48,x			sta 	esInt0,x
.1c3c	60		rts				rts
.1c3d					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1c3d	01					.byte	$01			; $86 and
>1c3e	01					.byte	$01			; $87 or
>1c3f	01					.byte	$01			; $88 xor
>1c40	02					.byte	$02			; $89 >=
>1c41	02					.byte	$02			; $8a <=
>1c42	02					.byte	$02			; $8b >
>1c43	02					.byte	$02			; $8c <
>1c44	02					.byte	$02			; $8d =
>1c45	02					.byte	$02			; $8e <>
>1c46	03					.byte	$03			; $8f +
>1c47	03					.byte	$03			; $90 -
>1c48	04					.byte	$04			; $91 >>
>1c49	04					.byte	$04			; $92 <<
>1c4a	04					.byte	$04			; $93 *
>1c4b	04					.byte	$04			; $94 /
>1c4c	04					.byte	$04			; $95 mod
>1c4d	05					.byte	$05			; $96 ^
>1c4e	06					.byte	$06			; $97 !
>1c4f	06					.byte	$06			; $98 ?
>1c50	82					.byte	$82			; $99 repeat
>1c51	82					.byte	$82			; $9a while
>1c52	82					.byte	$82			; $9b for
>1c53	82					.byte	$82			; $9c if
>1c54	82					.byte	$82			; $9d defproc
>1c55	80					.byte	$80			; $9e until
>1c56	80					.byte	$80			; $9f wend
>1c57	80					.byte	$80			; $a0 next
>1c58	80					.byte	$80			; $a1 then
>1c59	80					.byte	$80			; $a2 endif
>1c5a	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1c5b					EventFunction:
.1c5b	20 fc 1b	jsr $1bfc			jsr 	EvaluateReference			; get the variable reference.
.1c5e	b5 40		lda $40,x			lda 	esType,x
.1c60	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1c62	d0 5b		bne $1cbf			bne 	_EFType
.1c64	20 6a 22	jsr $226a			jsr 	CheckComma
.1c67	e8		inx				inx
.1c68	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1c6b	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; finish off with the
.1c6e	ca		dex				dex
.1c6f	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1c71	29 80		and #$80			and 	#$80
.1c73	15 58		ora $58,x			ora 	esInt2,x
.1c75	15 60		ora $60,x			ora 	esInt3,x
.1c77	d0 41		bne $1cba			bne 	_EFValue
.1c79	98		tya				tya
.1c7a	48		pha				pha
.1c7b	8a		txa				txa
.1c7c	48		pha				pha
.1c7d	a2 12		ldx #$12		ldx	#18
.1c7f	20 84 23	jsr $2384		jsr	deviceHandler
.1c82	84 07		sty $07				sty 	temp1+1
.1c84	85 06		sta $06				sta 	temp1
.1c86	68		pla				pla
.1c87	aa		tax				tax
.1c88	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1c8b	a0 03		ldy #$03			ldy 	#3							; if -ve
.1c8d	b1 04		lda ($04),y			lda 	(temp0),y
.1c8f	30 23		bmi $1cb4			bmi 	_EFFail 	 				; straight out with fail, means on pause.
.1c91	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1c93	b1 04		lda ($04),y			lda 	(temp0),y
.1c95	c8		iny				iny
.1c96	11 04		ora ($04),y			ora 	(temp0),y
.1c98	f0 17		beq $1cb1			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1c9a	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1c9c	38		sec				sec
.1c9d	b1 04		lda ($04),y			lda 	(temp0),y
.1c9f	e5 06		sbc $06				sbc 	temp1
.1ca1	c8		iny				iny
.1ca2	b1 04		lda ($04),y			lda 	(temp0),y
.1ca4	e5 07		sbc $07				sbc 	temp1+1
.1ca6	10 0c		bpl $1cb4			bpl 	_EFFail 					; if trigger >= timer then return False
.1ca8	20 c4 1c	jsr $1cc4			jsr 	SetEventTimer 				; reset the timer for next time.
.1cab	20 e6 21	jsr $21e6			jsr	 	MInt32True 					; and treutn true as fired.
.1cae	68		pla				pla
.1caf	a8		tay				tay
.1cb0	60		rts				rts
.1cb1					_EFInitialise:
.1cb1	20 c4 1c	jsr $1cc4			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1cb4					_EFFail:
.1cb4	68		pla				pla
.1cb5	a8		tay				tay
.1cb6	20 ea 21	jsr $21ea			jsr 	MInt32False
.1cb9	60		rts				rts
.1cba					_EFValue:
.1cba	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cbc	20 9b 23	jsr $239b		jsr	errorHandler
.1cbf					_EFType:
.1cbf	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1cc1	20 9b 23	jsr $239b		jsr	errorHandler
.1cc4					SetEventTimer:
.1cc4	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1cc6	18		clc				clc
.1cc7	a5 06		lda $06				lda 	temp1
.1cc9	75 49		adc $49,x			adc 	esInt0+1,x
.1ccb	91 04		sta ($04),y			sta		(temp0),y
.1ccd	c8		iny				iny
.1cce	a5 07		lda $07				lda 	temp1+1
.1cd0	75 51		adc $51,x			adc 	esInt1+1,x
.1cd2	91 04		sta ($04),y			sta		(temp0),y
.1cd4	88		dey				dey
.1cd5	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1cd7	d0 04		bne $1cdd			bne 	_SETExit
.1cd9	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1cdb	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1cdd					_SETExit:
.1cdd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1cde					UnaryLen:
.1cde	20 ec 1c	jsr $1cec			jsr 	ULStart
.1ce1					ULFinish:
.1ce1	b1 04		lda ($04),y			lda 	(temp0),y
.1ce3	a4 0c		ldy $0c				ldy 	tempShort
.1ce5	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1ce8	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1ceb	60		rts				rts
.1cec	20 c4 1b	jsr $1bc4	ULStart:jsr 	EvaluateString
.1cef	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1cf1	85 04		sta $04				sta 	temp0
.1cf3	b5 50		lda $50,x			lda 	esInt1,x
.1cf5	85 05		sta $05				sta 	temp0+1
.1cf7	84 0c		sty $0c				sty 	tempShort 					; get length
.1cf9	a0 00		ldy #$00			ldy 	#0
.1cfb	60		rts				rts
.1cfc					UnaryAsc:
.1cfc	20 ec 1c	jsr $1cec			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1cff	b1 04		lda ($04),y			lda 	(temp0),y
.1d01	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1d02	c9 00		cmp #$00			cmp 	#0
.1d04	d0 db		bne $1ce1			bne 	ULFinish
.1d06	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d08	20 9b 23	jsr $239b		jsr	errorHandler
.1d0b					UnaryAbs:
.1d0b	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric
.1d0e	b0 07		bcs $1d17			bcs 	_UAFloat
.1d10	20 9f 21	jsr $219f			jsr 	MInt32Absolute
.1d13	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1d16	60		rts				rts
.1d17					_UAFloat:
.1d17	8a		txa				txa
.1d18	a2 00		ldx #$00		ldx	#0
.1d1a	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1d1d	aa		tax				tax
.1d1e	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1d21	60		rts				rts
.1d22					UnarySgn:
.1d22	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric
.1d25	b0 07		bcs $1d2e			bcs 	_USFloat
.1d27	20 d7 21	jsr $21d7			jsr 	MInt32Sign
.1d2a	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1d2d	60		rts				rts
.1d2e					_USFloat:
.1d2e	8a		txa				txa
.1d2f	a2 0e		ldx #$0e		ldx	#14
.1d31	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1d34	aa		tax				tax
.1d35	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1d38	60		rts				rts
.1d39					UnaryPeek:
.1d39	20 65 1d	jsr $1d65			jsr 	PDLCode
.1d3c	4c 59 1d	jmp $1d59			jmp 	PDLByte0
.1d3f					UnaryDeek:
.1d3f	20 65 1d	jsr $1d65			jsr 	PDLCode
.1d42	4c 53 1d	jmp $1d53			jmp 	PDLByte1
.1d45					UnaryLeek:
.1d45	20 65 1d	jsr $1d65			jsr 	PDLCode
.1d48	a0 03		ldy #$03			ldy 	#3
.1d4a	b1 04		lda ($04),y			lda 	(temp0),y
.1d4c	95 60		sta $60,x			sta 	esInt3,x
.1d4e	88		dey				dey
.1d4f	b1 04		lda ($04),y			lda 	(temp0),y
.1d51	95 58		sta $58,x			sta 	esInt2,x
.1d53					PDLByte1:
.1d53	a0 01		ldy #$01			ldy 	#1
.1d55	b1 04		lda ($04),y			lda 	(temp0),y
.1d57	95 50		sta $50,x			sta 	esInt1,x
.1d59					PDLByte0:
.1d59	a0 00		ldy #$00			ldy 	#0
.1d5b	b1 04		lda ($04),y			lda 	(temp0),y
.1d5d	95 48		sta $48,x			sta 	esInt0,x
.1d5f	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1d61	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check right and return
.1d64	60		rts				rts
.1d65					PDLCode:
.1d65	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1d68	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d6a	85 04		sta $04				sta 	temp0
.1d6c	b5 50		lda $50,x			lda 	esInt1,x
.1d6e	85 05		sta $05				sta 	temp0+1
.1d70	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1d72	95 50		sta $50,x			sta 	esInt1,x
.1d74	95 58		sta $58,x			sta 	esInt2,x
.1d76	95 60		sta $60,x			sta 	esInt3,x
.1d78	84 0c		sty $0c				sty 	tempShort 					; save Y
.1d7a	60		rts				rts
.1d7b					Unary_Random:
.1d7b	20 1a 22	jsr $221a			jsr 	MInt32Random 				; generate random number.
.1d7e	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1d80	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1d82	f0 08		beq $1d8c			beq 	_URExit
.1d84	e8		inx				inx 								; load range 0..r-1 into +1
.1d85	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1d88	ca		dex				dex
.1d89	20 49 20	jsr $2049			jsr 	MInt32Modulus 				; calculate random % modulus
.1d8c					_URExit:
.1d8c	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check right and return
.1d8f	60		rts				rts
.1d90					Unary_Min:
.1d90	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1d92	d0 02		bne $1d96			bne 	UnaryMBody
.1d94					Unary_Max:
.1d94	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1d96					UnaryMBody:
.1d96	48		pha				pha 								; save comparator on stack.
.1d97	20 b0 1b	jsr $1bb0			jsr 	Evaluate 					; get the first thing to check
.1d9a					_UnaryMLoop:
.1d9a	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1d9c	c8		iny				iny
.1d9d	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1d9f	f0 09		beq $1daa			beq 	_UnaryMExit
.1da1	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1da3	f0 07		beq $1dac			beq 	_UnaryMCompare
.1da5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1da7	20 9b 23	jsr $239b		jsr	errorHandler
.1daa					_UnaryMExit:
.1daa	68		pla				pla 								; throw comparator and return.
.1dab	60		rts				rts
.1dac					_UnaryMCompare:
.1dac	e8		inx				inx 								; get the 2nd thing to evaluate
.1dad	20 b0 1b	jsr $1bb0			jsr 	Evaluate
.1db0	ca		dex				dex
.1db1	20 4d 19	jsr $194d			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1db4	85 0c		sta $0c				sta 	tempShort 					; save result
.1db6	68		pla				pla 								; get what we need
.1db7	48		pha				pha
.1db8	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1dba	d0 de		bne $1d9a			bne 	_UnaryMLoop 				; no, try another value.
.1dbc	20 ea 21	jsr $21ea			jsr 	MInt32False 				; promote 2nd to 1st.
.1dbf	20 d3 20	jsr $20d3			jsr 	MInt32Add
.1dc2	4c 9a 1d	jmp $1d9a			jmp 	_UnaryMLoop
.1dc5					Unary_Page:
.1dc5	20 ea 21	jsr $21ea			jsr 	MInt32False 				; zero
.1dc8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1dcb	95 48		sta $48,x			sta 	esInt0,x
.1dcd	ad c9 0a	lda $0ac9			lda 	basePage+1
.1dd0	95 50		sta $50,x			sta 	esInt1,x
.1dd2	60		rts				rts
.1dd3					UnaryReference:
.1dd3	a9 0f		lda #$0f			lda 	#15
.1dd5	20 9b 1a	jsr $1a9b			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1dd8	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1dda	10 05		bpl $1de1			bpl 	UType
.1ddc	a9 00		lda #$00			lda 	#0 							; make it an integer
.1dde	95 40		sta $40,x			sta 	esType,x
.1de0	60		rts				rts
.1de1					UType:
.1de1	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1de3	20 9b 23	jsr $239b		jsr	errorHandler
.1de6					UnaryHexMarker:
.1de6	4c a1 1b	jmp $1ba1			jmp 	EvaluateIntegerTerm
.1de9					UnaryComplement:
.1de9	20 a1 1b	jsr $1ba1			jsr 	EvaluateIntegerTerm
.1dec	20 be 21	jsr $21be			jsr 	MInt32Not
.1def	60		rts				rts
.1df0					UnaryIntToFloat:
.1df0	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric
.1df3	b5 40		lda $40,x			lda 	esType,x
.1df5	d0 0b		bne $1e02			bne 	_UIFExit
.1df7	8a		txa				txa
.1df8	a2 1a		ldx #$1a		ldx	#26
.1dfa	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1dfd	aa		tax				tax
.1dfe	a9 01		lda #$01			lda 	#1
.1e00	95 40		sta $40,x			sta 	esType,x
.1e02					_UIFExit:
.1e02	60		rts				rts
.1e03					UnaryFloatToInt:
.1e03	20 b9 1b	jsr $1bb9			jsr 	EvaluateNumeric
.1e06	b5 40		lda $40,x			lda 	esType,x
.1e08	f0 07		beq $1e11			beq 	_UFIExit
.1e0a	8a		txa				txa
.1e0b	a2 12		ldx #$12		ldx	#18
.1e0d	20 8c 26	jsr $268c		jsr	floatingpointHandler
.1e10	aa		tax				tax
.1e11					_UFIExit:
.1e11	60		rts				rts
.1e12					UnaryAlloc:
.1e12	e8		inx				inx 								; evaluate memory required
.1e13	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger
.1e16	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1e19	ca		dex				dex
.1e1a	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1e1c	15 61		ora $61,x			ora 	esInt3+1,x
.1e1e	d0 19		bne $1e39			bne 	_UABadValue
.1e20	20 ea 21	jsr $21ea			jsr 	MInt32False					; zero return.
.1e23	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1e25	95 50		sta $50,x			sta 	esInt1,x
.1e27	a5 0f		lda $0f				lda 	lowMemory
.1e29	95 48		sta $48,x			sta 	esInt0,x
.1e2b	18		clc				clc 								; add alloc required.
.1e2c	75 49		adc $49,x			adc 	esInt0+1,x
.1e2e	85 0f		sta $0f				sta 	lowMemory
.1e30	a5 10		lda $10				lda 	lowMemory+1
.1e32	75 51		adc $51,x			adc 	esInt1+1,x
.1e34	85 10		sta $10				sta 	lowMemory+1
.1e36	b0 01		bcs $1e39			bcs		_UABadValue 				; overflow definitely bad.
.1e38	60		rts				rts
.1e39					_UABadValue:
.1e39	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e3b	20 9b 23	jsr $239b		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1e3e					UnaryTimer:
.1e3e	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1e41	98		tya				tya
.1e42	48		pha				pha
.1e43	20 11 22	jsr $2211			jsr 	MInt32Zero 					; zero result
.1e46	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1e48	a2 12		ldx #$12		ldx	#18
.1e4a	20 84 23	jsr $2384		jsr	deviceHandler
.1e4d	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1e4f	95 48		sta $48,x			sta 	esInt0,x
.1e51	98		tya				tya
.1e52	95 50		sta $50,x			sta 	esInt1,x
.1e54	68		pla				pla
.1e55	a8		tay				tay
.1e56	60		rts				rts
.1e57					UnaryInkey:
.1e57	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1e5a	86 04		stx $04				stx 	temp0
.1e5c	a2 08		ldx #$08		ldx	#8
.1e5e	20 84 23	jsr $2384		jsr	deviceHandler
.1e61	a6 04		ldx $04				ldx 	temp0
.1e63	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1e66	60		rts				rts
.1e67					UnaryGet:
.1e67	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1e6a	86 04		stx $04				stx 	temp0
.1e6c					_UGLoop:
.1e6c	a2 08		ldx #$08		ldx	#8
.1e6e	20 84 23	jsr $2384		jsr	deviceHandler
.1e71	c9 00		cmp #$00			cmp 	#0
.1e73	f0 f7		beq $1e6c			beq 	_UGLoop
.1e75	a6 04		ldx $04				ldx 	temp0
.1e77	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1e7a	60		rts				rts
.1e7b					UnarySys:
.1e7b	20 cf 1b	jsr $1bcf			jsr 	EvaluateInteger 				; get the address
.1e7e	20 5d 22	jsr $225d			jsr 	CheckRightParen
.1e81	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 						; copy to temp0
.1e84	8a		txa				txa
.1e85	48		pha				pha
.1e86	98		tya				tya
.1e87	48		pha				pha
.1e88	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1e8b	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1e8e	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1e91	20 a0 1e	jsr $1ea0			jsr 	_CallTemp0
.1e94	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1e96	68		pla				pla
.1e97	a8		tay				tay
.1e98	68		pla				pla
.1e99	aa		tax				tax
.1e9a	a5 0c		lda $0c				lda 	tempShort
.1e9c	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit 					; return result.
.1e9f	60		rts				rts
.1ea0					_CallTemp0:
.1ea0	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1ea3					ExecChr:
.1ea3	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger		; character number
.1ea6	20 5d 22	jsr $225d			jsr 	CheckRightParen				; right bracket
.1ea9	98		tya				tya
.1eaa	48		pha				pha
.1eab	8a		txa				txa 								; A = stack
.1eac	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1eae	a2 00		ldx #$00		ldx	#0
.1eb0	20 28 29	jsr $2928		jsr	stringHandler
.1eb3	aa		tax				tax 								; X = stack
.1eb4	68		pla				pla
.1eb5	a8		tay				tay
.1eb6	60		rts				rts
.1eb7					ExecLower:
.1eb7	38		sec				sec
.1eb8	b0 01		bcs $1ebb			bcs 	ExecUpperLower
.1eba					ExecUpper:
.1eba	18		clc				clc
.1ebb					ExecUpperLower:
.1ebb	08		php				php 								; save carry
.1ebc	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 				; string to stack,X
.1ebf	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check closing right bracket.
.1ec2	28		plp				plp 								; restore carry, save Y
.1ec3	98		tya				tya
.1ec4	48		pha				pha
.1ec5	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1ec7	2a		rol a				rol 	a
.1ec8	a8		tay				tay 								; now in Y
.1ec9	8a		txa				txa 								; do the substring and exit.
.1eca	a2 08		ldx #$08		ldx	#8
.1ecc	20 28 29	jsr $2928		jsr	stringHandler
.1ecf	aa		tax				tax
.1ed0	68		pla				pla
.1ed1	a8		tay				tay
.1ed2	60		rts				rts
.1ed3					ExecLeft:
.1ed3	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 				; string to stack,X
.1ed6	20 6a 22	jsr $226a			jsr 	CheckComma
.1ed9	e8		inx				inx
.1eda	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1edc	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1edf	e8		inx				inx
.1ee0	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1ee3					ExecSubstring:
.1ee3	ca		dex				dex 								; fix up X
.1ee4	ca		dex				dex
.1ee5	20 5d 22	jsr $225d			jsr 	CheckRightParen 			; check closing right bracket.
.1ee8	8a		txa				txa 								; do the substring and exit.
.1ee9	a2 0a		ldx #$0a		ldx	#10
.1eeb	20 28 29	jsr $2928		jsr	stringHandler
.1eee	aa		tax				tax
.1eef	60		rts				rts
.1ef0					ExecMid:
.1ef0	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 				; string to stack,X
.1ef3	20 6a 22	jsr $226a			jsr 	CheckComma
.1ef6	e8		inx				inx
.1ef7	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1efa	c9 00		cmp #$00			cmp 	#0
.1efc	f0 15		beq $1f13			beq 	_EMValue
.1efe	e8		inx				inx
.1eff	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1f01	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1f04	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1f06	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1f08	f0 d9		beq $1ee3			beq 	ExecSubString
.1f0a	20 6a 22	jsr $226a			jsr 	CheckComma
.1f0d	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f10	4c e3 1e	jmp $1ee3			jmp 	ExecSubString
.1f13					_EMValue:
.1f13	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f15	20 9b 23	jsr $239b		jsr	errorHandler
.1f18					ExecRight:
.1f18	20 c4 1b	jsr $1bc4			jsr 	EvaluateString 				; string to stack,X
.1f1b	20 6a 22	jsr $226a			jsr 	CheckComma
.1f1e	e8		inx				inx
.1f1f	20 d7 1b	jsr $1bd7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1f22	ca		dex				dex
.1f23	98		tya				tya
.1f24	48		pha				pha
.1f25	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1f27	85 04		sta $04				sta 	temp0
.1f29	b5 50		lda $50,x			lda 	esInt1,x
.1f2b	85 05		sta $05				sta 	temp0+1
.1f2d	a0 00		ldy #$00			ldy 	#0 							; point to length
.1f2f	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1f31	18		clc				clc 								; add 1.
.1f32	69 01		adc #$01			adc 	#1
.1f34	38		sec				sec
.1f35	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1f37	f0 02		beq $1f3b			beq		_ERMake1 					; if zero, make it 1.
.1f39	b0 02		bcs $1f3d			bcs		_EROkay
.1f3b					_ERMake1:
.1f3b	a9 01		lda #$01			lda 	#1 							; start position.
.1f3d					_EROkay:
.1f3d	e8		inx				inx 								; set start pos.
.1f3e	95 48		sta $48,x			sta 	esInt0,x
.1f40	e8		inx				inx
.1f41	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1f43	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.1f46	68		pla				pla
.1f47	a8		tay				tay
.1f48	4c e3 1e	jmp $1ee3			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1f4b					MInt32And:
.1f4b	b5 48		lda $48,x			lda 	esInt0,x
.1f4d	35 49		and $49,x			and 	esInt0+1,x
.1f4f	95 48		sta $48,x			sta 	esInt0,x
.1f51	b5 50		lda $50,x			lda 	esInt1,x
.1f53	35 51		and $51,x			and 	esInt1+1,x
.1f55	95 50		sta $50,x			sta 	esInt1,x
.1f57	b5 58		lda $58,x			lda 	esInt2,x
.1f59	35 59		and $59,x			and 	esInt2+1,x
.1f5b	95 58		sta $58,x			sta 	esInt2,x
.1f5d	b5 60		lda $60,x			lda 	esInt3,x
.1f5f	35 61		and $61,x			and 	esInt3+1,x
.1f61	95 60		sta $60,x			sta 	esInt3,x
.1f63	60		rts				rts
.1f64					MInt32Or:
.1f64	b5 48		lda $48,x			lda 	esInt0,x
.1f66	15 49		ora $49,x			ora 	esInt0+1,x
.1f68	95 48		sta $48,x			sta 	esInt0,x
.1f6a	b5 50		lda $50,x			lda 	esInt1,x
.1f6c	15 51		ora $51,x			ora 	esInt1+1,x
.1f6e	95 50		sta $50,x			sta 	esInt1,x
.1f70	b5 58		lda $58,x			lda 	esInt2,x
.1f72	15 59		ora $59,x			ora 	esInt2+1,x
.1f74	95 58		sta $58,x			sta 	esInt2,x
.1f76	b5 60		lda $60,x			lda 	esInt3,x
.1f78	15 61		ora $61,x			ora 	esInt3+1,x
.1f7a	95 60		sta $60,x			sta 	esInt3,x
.1f7c	60		rts				rts
.1f7d					MInt32Xor:
.1f7d	b5 48		lda $48,x			lda 	esInt0,x
.1f7f	55 49		eor $49,x			eor 	esInt0+1,x
.1f81	95 48		sta $48,x			sta 	esInt0,x
.1f83	b5 50		lda $50,x			lda 	esInt1,x
.1f85	55 51		eor $51,x			eor 	esInt1+1,x
.1f87	95 50		sta $50,x			sta 	esInt1,x
.1f89	b5 58		lda $58,x			lda 	esInt2,x
.1f8b	55 59		eor $59,x			eor 	esInt2+1,x
.1f8d	95 58		sta $58,x			sta 	esInt2,x
.1f8f	b5 60		lda $60,x			lda 	esInt3,x
.1f91	55 61		eor $61,x			eor 	esInt3+1,x
.1f93	95 60		sta $60,x			sta 	esInt3,x
.1f95	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1f96					MInt32Compare:
.1f96	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1f98	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1f9a	d0 13		bne $1faf			bne 	MInt32Compare2
.1f9c	b5 50		lda $50,x			lda 	esInt1,x
.1f9e	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1fa0	d0 0d		bne $1faf			bne 	MInt32Compare2
.1fa2	b5 58		lda $58,x			lda 	esInt2,x
.1fa4	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1fa6	d0 07		bne $1faf			bne 	MInt32Compare2
.1fa8	b5 60		lda $60,x			lda 	esInt3,x
.1faa	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1fac	d0 01		bne $1faf			bne 	MInt32Compare2
.1fae	60		rts				rts
.1faf					MInt32Compare2:
.1faf	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1fb1	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fb3	b5 50		lda $50,x			lda		esInt1,x
.1fb5	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1fb7	b5 58		lda $58,x			lda		esInt2,x
.1fb9	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1fbb	b5 60		lda $60,x			lda		esInt3,x
.1fbd	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1fbf	50 02		bvc $1fc3			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1fc1	49 80		eor #$80			eor 	#$80
.1fc3					_I32LNoOverflow
.1fc3	30 03		bmi $1fc8			bmi 	MInt32CLess					; if -ve then return $FF
.1fc5	a9 01		lda #$01			lda 	#$01						; else return $01
.1fc7	60		rts				rts
.1fc8					MInt32CLess:
.1fc8	a9 ff		lda #$ff			lda 	#$FF
.1fca	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1fcb					MInt32SDivide:
.1fcb	98		tya				tya  								; save Y, which is the count of negations
.1fcc	48		pha				pha
.1fcd	a0 00		ldy #$00			ldy 	#0 							; zero count
.1fcf	20 e7 1f	jsr $1fe7			jsr 	_MInt32SRemSign 			; unsign TOS
.1fd2	e8		inx				inx 								; unsign TOS+1
.1fd3	20 e7 1f	jsr $1fe7			jsr 	_MInt32SRemSign
.1fd6	ca		dex				dex
.1fd7	98		tya				tya 								; save sign count on stack
.1fd8	48		pha				pha
.1fd9	20 f0 1f	jsr $1ff0			jsr 	MInt32UDivide 				; unsigned division
.1fdc	68		pla				pla 								; get sign count back
.1fdd	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1fdf	f0 03		beq $1fe4			beq 	_I32SNoNeg
.1fe1	20 a4 21	jsr $21a4			jsr 	MInt32Negate
.1fe4					_I32SNoNeg:
.1fe4	68		pla				pla 								; restoe Y and exit
.1fe5	a8		tay				tay
.1fe6	60		rts				rts
.1fe7					_MInt32SRemSign:
.1fe7	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1fe9	10 04		bpl $1fef			bpl 	_MInt32SRSExit
.1feb	c8		iny				iny 								; increment the sign count
.1fec	20 a4 21	jsr $21a4			jsr 	MInt32Negate 				; negate the value.
.1fef					_MInt32SRSExit:
.1fef	60		rts				rts
.1ff0					MInt32UDivide:
.1ff0	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1ff2	15 51		ora $51,x			ora 	esInt1+1,x
.1ff4	15 52		ora $52,x			ora 	esInt1+2,x
.1ff6	15 53		ora $53,x			ora 	esInt1+3,x
.1ff8	f0 4a		beq $2044			beq 	_MInt32DZero
.1ffa	e8		inx				inx 								; clear A
.1ffb	e8		inx				inx
.1ffc	20 ea 21	jsr $21ea			jsr 	MInt32False
.1fff	ca		dex				dex
.2000	ca		dex				dex
.2001	98		tya				tya 								; save Y on the stack
.2002	48		pha				pha
.2003	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2005					_MInt32UDLoop:
.2005	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2007	36 50		rol $50,x			rol 	esInt1,x
.2009	36 58		rol $58,x			rol 	esInt2,x
.200b	36 60		rol $60,x			rol 	esInt3,x
.200d	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.200f	36 52		rol $52,x			rol 	esInt1+2,x
.2011	36 5a		rol $5a,x			rol 	esInt2+2,x
.2013	36 62		rol $62,x			rol 	esInt3+2,x
.2015	38		sec				sec 								; calculate A-M saving result on the stack
.2016	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2018	f5 49		sbc $49,x			sbc 	esInt0+1,x
.201a	48		pha				pha
.201b	b5 52		lda $52,x			lda 	esInt1+2,x
.201d	f5 51		sbc $51,x			sbc 	esInt1+1,x
.201f	48		pha				pha
.2020	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2022	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2024	48		pha				pha
.2025	b5 62		lda $62,x			lda 	esInt3+2,x
.2027	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2029	90 10		bcc $203b			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.202b	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.202d	68		pla				pla
.202e	95 5a		sta $5a,x			sta 	esInt2+2,x
.2030	68		pla				pla
.2031	95 52		sta $52,x			sta 	esInt1+2,x
.2033	68		pla				pla
.2034	95 4a		sta $4a,x			sta 	esInt0+2,x
.2036	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2038	4c 3e 20	jmp $203e			jmp 	_MInt32Next 					; do the next iteration
.203b					_MInt32NoSubtract:
.203b	68		pla				pla
.203c	68		pla				pla
.203d	68		pla				pla
.203e					_MInt32Next:
.203e	88		dey				dey 								; do this 32 times.
.203f	d0 c4		bne $2005			bne 	_MInt32UDLoop
.2041	68		pla				pla 								; restore Y and exit
.2042	a8		tay				tay
.2043	60		rts				rts
.2044					_MInt32DZero:
.2044	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2046	20 9b 23	jsr $239b		jsr	errorHandler
.2049					MInt32Modulus:
.2049	20 f0 1f	jsr $1ff0			jsr 	MInt32UDivide 				; do the division.
.204c	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.204e	95 60		sta $60,x			sta 	esInt3,x
.2050	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2052	95 58		sta $58,x			sta 	esInt2,x
.2054	b5 52		lda $52,x			lda 	esInt1+2,x
.2056	95 50		sta $50,x			sta 	esInt1,x
.2058	b5 4a		lda $4a,x			lda 	esInt0+2,x
.205a	95 48		sta $48,x			sta 	esInt0,x
.205c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0b1a					fs32Length:
>0b1a							.fill 	1
.205d					MInt32FromString:
.205d	85 0c		sta $0c				sta 	tempShort 					; save base
.205f	98		tya				tya
.2060	48		pha				pha
.2061	a0 00		ldy #$00			ldy 	#0 							; get length
.2063	b1 04		lda ($04),y			lda 	(temp0),y
.2065	8d 1a 0b	sta $0b1a			sta 	fs32Length
.2068	f0 65		beq $20cf			beq 	_I32FSFail2					; fail if length zero.
.206a	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.206c	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.206e	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2070	d0 09		bne $207b			bne 	_I32FSNotNegative
.2072	ad 1a 0b	lda $0b1a			lda 	fs32Length 					; get length back.
.2075	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.2077	f0 56		beq $20cf			beq 	_I32FSFail2
.2079	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.207b					_I32FSNotNegative:
.207b	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.207d	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.207f	d0 02		bne $2083			bne 	_I32FSNN2
.2081	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2083					_I32FSNN2:
.2083	48		pha				pha 								; save base + final sign on stack.
.2084	20 ea 21	jsr $21ea			jsr 	MInt32False 				; zero the return value.
.2087					_I32FSMainLoop:
.2087	68		pla				pla 								; get the base back into tempShort
.2088	48		pha				pha
.2089	29 7f		and #$7f			and 	#$7F
.208b	85 0c		sta $0c				sta 	tempShort
.208d	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.208f	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2091	90 02		bcc $2095			bcc 	_I32FSNotLC
.2093	e9 20		sbc #$20			sbc 	#32
.2095					_I32FSNotLC:
.2095	38		sec				sec 								; subtract 48 (ASCII "0")
.2096	e9 30		sbc #$30			sbc 	#"0"
.2098	90 34		bcc $20ce			bcc 	_I32FSFail 					; nothing more to do.
.209a	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.209c	90 06		bcc $20a4			bcc 	_I32FSValidate
.209e	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.20a0	90 2c		bcc $20ce			bcc 	_I32FSFail
.20a2	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.20a4					_I32FSValidate:
.20a4	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.20a6	b0 26		bcs $20ce			bcs 	_I32FSFail 					; sorry, too large for this base.
.20a8	48		pha				pha 								; save the new digit value.
.20a9	e8		inx				inx 								; put base into next slot.
.20aa	a5 0c		lda $0c				lda 	tempShort
.20ac	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.20af	ca		dex				dex
.20b0	20 07 21	jsr $2107			jsr 	MInt32Multiply 				; multiply current by the base
.20b3	e8		inx				inx
.20b4	68		pla				pla  								; put additive into next slot
.20b5	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.20b8	ca		dex				dex
.20b9	20 d3 20	jsr $20d3			jsr 	MInt32Add 					; and add it
.20bc	c8		iny				iny 								; look at next character
.20bd	cc 1a 0b	cpy $0b1a			cpy 	fs32Length 					; until > length.
.20c0	f0 c5		beq $2087			beq 	_I32FSMainLoop
.20c2	90 c3		bcc $2087			bcc 	_I32FSMainLoop
.20c4					_I32FSDone:
.20c4	68		pla				pla 								; get base/final sign back
.20c5	10 03		bpl $20ca			bpl 	_I32FSNN3
.20c7	20 a4 21	jsr $21a4			jsr 	MInt32Negate 				; negate the result.
.20ca					_I32FSNN3:
.20ca	68		pla				pla
.20cb	a8		tay				tay
.20cc	38		sec				sec
.20cd	60		rts				rts
.20ce					_I32FSFail:
.20ce	68		pla				pla
.20cf					_I32FSFail2:
.20cf	68		pla				pla
.20d0	a8		tay				tay
.20d1	18		clc				clc
.20d2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.20d3					MInt32Add:
.20d3	18		clc				clc
.20d4	b5 48		lda $48,x			lda 	esInt0,x
.20d6	75 49		adc $49,x			adc 	esInt0+1,x
.20d8	95 48		sta $48,x			sta 	esInt0,x
.20da	b5 50		lda $50,x			lda 	esInt1,x
.20dc	75 51		adc $51,x			adc 	esInt1+1,x
.20de	95 50		sta $50,x			sta 	esInt1,x
.20e0	b5 58		lda $58,x			lda 	esInt2,x
.20e2	75 59		adc $59,x			adc 	esInt2+1,x
.20e4	95 58		sta $58,x			sta 	esInt2,x
.20e6	b5 60		lda $60,x			lda 	esInt3,x
.20e8	75 61		adc $61,x			adc 	esInt3+1,x
.20ea	95 60		sta $60,x			sta 	esInt3,x
.20ec	60		rts				rts
.20ed					MInt32Sub:
.20ed	38		sec				sec
.20ee	b5 48		lda $48,x			lda 	esInt0,x
.20f0	f5 49		sbc $49,x			sbc 	esInt0+1,x
.20f2	95 48		sta $48,x			sta 	esInt0,x
.20f4	b5 50		lda $50,x			lda 	esInt1,x
.20f6	f5 51		sbc $51,x			sbc 	esInt1+1,x
.20f8	95 50		sta $50,x			sta 	esInt1,x
.20fa	b5 58		lda $58,x			lda 	esInt2,x
.20fc	f5 59		sbc $59,x			sbc 	esInt2+1,x
.20fe	95 58		sta $58,x			sta 	esInt2,x
.2100	b5 60		lda $60,x			lda 	esInt3,x
.2102	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2104	95 60		sta $60,x			sta 	esInt3,x
.2106	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2107					MInt32Multiply:
.2107	e8		inx				inx 								; copy 2nd -> 3rd
.2108	20 2d 21	jsr $212d			jsr 	MInt32CopyUp
.210b	ca		dex				dex
.210c	20 2d 21	jsr $212d			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.210f	20 ea 21	jsr $21ea			jsr 	MInt32False 					; zero 1st.
.2112					_I32Loop:
.2112	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2114	29 01		and #$01			and 	#1
.2116	f0 03		beq $211b			beq 	_I32NoAdd 					; if set
.2118	20 d3 20	jsr $20d3			jsr 	MInt32Add 					; add 2nd to 1st.
.211b					_I32NoAdd:
.211b	e8		inx				inx 								; shift 2nd left
.211c	20 ff 21	jsr $21ff			jsr 	MInt32ShiftLeft
.211f	e8		inx				inx  								; shift 3rd right
.2120	20 08 22	jsr $2208			jsr 	MInt32ShiftRight
.2123	20 11 22	jsr $2211			jsr 	MInt32Zero 					; check if zero.
.2126	08		php				php 								; save status bits
.2127	ca		dex				dex 	 							; point back to 1st
.2128	ca		dex				dex
.2129	28		plp				plp 								; get status bits
.212a	d0 e6		bne $2112			bne 	_I32Loop 					; if non-zero keep going.
.212c	60		rts				rts
.212d					MInt32CopyUp:
.212d	b5 48		lda $48,x			lda 	esInt0,x
.212f	95 49		sta $49,x			sta 	esInt0+1,x
.2131	b5 50		lda $50,x			lda 	esInt1,x
.2133	95 51		sta $51,x			sta 	esInt1+1,x
.2135	b5 58		lda $58,x			lda 	esInt2,x
.2137	95 59		sta $59,x			sta 	esInt2+1,x
.2139	b5 60		lda $60,x			lda 	esInt3,x
.213b	95 61		sta $61,x			sta 	esInt3+1,x
.213d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0b1b					MCharCount:	.fill 	1						; count of converted characters
.213e					MLInt32ToString:
.213e	aa		tax				tax									; module passes stack in A, base in Y
.213f	98		tya				tya
.2140					MInt32ToString:
.2140	48		pha				pha 								; save base
.2141	85 0c		sta $0c				sta 	tempShort 					; save target base.
.2143	a9 00		lda #$00			lda 	#0
.2145	8d 1b 0b	sta $0b1b			sta 	MCharCount 					; clear character count to 0
.2148	98		tya				tya
.2149	48		pha				pha
.214a	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.214c	10 10		bpl $215e			bpl 	_I32TSUnsigned
.214e	48		pha				pha 								; save base on stack.
.214f	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2151	10 08		bpl $215b			bpl 	_I32TSNoFlip
.2153	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2155	20 91 21	jsr $2191			jsr 	MI32WriteCharacter
.2158	20 a4 21	jsr $21a4			jsr 	MInt32Negate 				; negate the value.
.215b					_I32TSNoFlip:
.215b	68		pla				pla 								; get the base back
.215c	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.215e					_I32TSUnsigned:
.215e	20 6c 21	jsr $216c			jsr 	MI32DivideWrite 			; recursive code to output string.
.2161	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2163	ad 1b 0b	lda $0b1b			lda 	MCharCount
.2166	91 04		sta ($04),y			sta 	(temp0),y
.2168	68		pla				pla
.2169	a8		tay				tay
.216a	68		pla				pla
.216b	60		rts				rts
.216c					MI32DivideWrite:
.216c	48		pha				pha 								; save the divisor/base
.216d	e8		inx				inx 								; write in the dividing position.
.216e	20 f9 21	jsr $21f9			jsr 	MInt32Set8Bit
.2171	ca		dex				dex
.2172	20 f0 1f	jsr $1ff0			jsr 	MInt32UDivide 				; divide number by base.
.2175	68		pla				pla 								; get the base into Y
.2176	a8		tay				tay
.2177	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2179	48		pha				pha
.217a	20 11 22	jsr $2211			jsr 	MInt32Zero 					; is the result zero ?
.217d	f0 04		beq $2183			beq 	_I32NoRecurse 				; if so, don't recurse.
.217f	98		tya				tya 								; put base into A
.2180	20 6c 21	jsr $216c			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2183					_I32NoRecurse:
.2183	68		pla				pla 								; get the remainder back
.2184	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.2186	90 02		bcc $218a			bcc 	_I32NotHex
.2188	69 06		adc #$06			adc 	#7-1
.218a					_I32NotHex:
.218a	18		clc				clc 								; make it ASCII
.218b	69 30		adc #$30			adc 	#48
.218d	20 91 21	jsr $2191			jsr 	MI32WriteCharacter 			; write the character out
.2190	60		rts				rts 								; and exit.
.2191					MI32WriteCharacter:
.2191	ee 1b 0b	inc $0b1b			inc 	MCharCount 					; bump count (space for leading count)
.2194	ac 1b 0b	ldy $0b1b			ldy 	MCharCount 					; get position
.2197	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.2199	c8		iny				iny
.219a	a9 00		lda #$00			lda 	#0
.219c	91 04		sta ($04),y			sta 	(temp0),y
.219e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0b1c					MSeed32:	.fill 	4							; random number seed.
.219f					MInt32Absolute:
.219f	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.21a1	30 01		bmi $21a4			bmi 	MInt32Negate
.21a3	60		rts				rts
.21a4					MInt32Negate:
.21a4	38		sec				sec
.21a5	a9 00		lda #$00			lda 	#0
.21a7	f5 48		sbc $48,x			sbc 	esInt0,x
.21a9	95 48		sta $48,x			sta 	esInt0,x
.21ab	a9 00		lda #$00			lda 	#0
.21ad	f5 50		sbc $50,x			sbc 	esInt1,x
.21af	95 50		sta $50,x			sta 	esInt1,x
.21b1	a9 00		lda #$00			lda 	#0
.21b3	f5 58		sbc $58,x			sbc 	esInt2,x
.21b5	95 58		sta $58,x			sta 	esInt2,x
.21b7	a9 00		lda #$00			lda 	#0
.21b9	f5 60		sbc $60,x			sbc 	esInt3,x
.21bb	95 60		sta $60,x			sta 	esInt3,x
.21bd	60		rts				rts
.21be					MInt32Not:
.21be	b5 48		lda $48,x			lda 	esInt0,x
.21c0	49 ff		eor #$ff			eor 	#$FF
.21c2	95 48		sta $48,x			sta 	esInt0,x
.21c4	b5 50		lda $50,x			lda 	esInt1,x
.21c6	49 ff		eor #$ff			eor 	#$FF
.21c8	95 50		sta $50,x			sta 	esInt1,x
.21ca	b5 58		lda $58,x			lda 	esInt2,x
.21cc	49 ff		eor #$ff			eor 	#$FF
.21ce	95 58		sta $58,x			sta 	esInt2,x
.21d0	b5 60		lda $60,x			lda 	esInt3,x
.21d2	49 ff		eor #$ff			eor 	#$FF
.21d4	95 60		sta $60,x			sta 	esInt3,x
.21d6	60		rts				rts
.21d7					MInt32Sign:
.21d7	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.21d9	30 0b		bmi $21e6			bmi 	MInt32True 					; if set return -1 (true)
.21db	20 11 22	jsr $2211			jsr 	MInt32Zero 					; is it zero ?
.21de	f0 0a		beq $21ea			beq 	MInt32False 					; if zero return 0 (false)
.21e0	20 ea 21	jsr $21ea			jsr 	MInt32False 					; > 0 return 1
.21e3	f6 48		inc $48,x			inc 	esInt0,x
.21e5	60		rts				rts
.21e6					MInt32True:
.21e6	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.21e8	d0 02		bne $21ec			bne 	MInt32WriteAll
.21ea					MInt32False:
.21ea	a9 00		lda #$00			lda 	#0
.21ec					MInt32WriteAll:
.21ec	95 48		sta $48,x			sta 	esInt0,x
.21ee					MInt32Write123:
.21ee	95 50		sta $50,x			sta 	esInt1,x
.21f0	95 58		sta $58,x			sta 	esInt2,x
.21f2	95 60		sta $60,x			sta 	esInt3,x
.21f4	a9 00		lda #$00			lda 	#$00						; and make it an integer
.21f6	95 40		sta $40,x			sta 	esType,x
.21f8	60		rts				rts
.21f9					MInt32Set8Bit:
.21f9	95 48		sta $48,x			sta 	esInt0,x
.21fb	a9 00		lda #$00			lda 	#0
.21fd	f0 ef		beq $21ee			beq		MInt32Write123
.21ff					MInt32ShiftLeft:
.21ff	16 48		asl $48,x			asl 	esInt0,x
.2201	36 50		rol $50,x			rol	 	esInt1,x
.2203	36 58		rol $58,x			rol	 	esInt2,x
.2205	36 60		rol $60,x			rol	 	esInt3,x
.2207	60		rts				rts
.2208					MInt32ShiftRight:
.2208	56 60		lsr $60,x			lsr 	esInt3,x
.220a	76 58		ror $58,x			ror 	esInt2,x
.220c	76 50		ror $50,x			ror 	esInt1,x
.220e	76 48		ror $48,x			ror 	esInt0,x
.2210	60		rts				rts
.2211					MInt32Zero:
.2211	b5 48		lda $48,x			lda 	esInt0,x
.2213	15 50		ora $50,x			ora 	esInt1,x
.2215	15 58		ora $58,x			ora 	esInt2,x
.2217	15 60		ora $60,x			ora 	esInt3,x
.2219	60		rts				rts
.221a					MInt32Random:
.221a	98		tya				tya
.221b	48		pha				pha
.221c	a0 07		ldy #$07			ldy 	#7
.221e	ad 1c 0b	lda $0b1c			lda 	MSeed32+0
.2221	d0 03		bne $2226			bne 	_Random1
.2223	a8		tay				tay
.2224	a9 aa		lda #$aa			lda		#$AA
.2226					_Random1:
.2226	0a		asl a				asl 	a
.2227	2e 1d 0b	rol $0b1d			rol 	MSeed32+1
.222a	2e 1e 0b	rol $0b1e			rol 	MSeed32+2
.222d	2e 1f 0b	rol $0b1f			rol 	MSeed32+3
.2230	90 02		bcc $2234			bcc 	_Random2
.2232	49 c5		eor #$c5			eor 	#$C5
.2234					_Random2:
.2234	88		dey				dey
.2235	d0 ef		bne $2226			bne 	_Random1
.2237	8d 1c 0b	sta $0b1c			sta 	MSeed32+0
.223a	95 48		sta $48,x			sta 	esInt0,x
.223c	ad 1d 0b	lda $0b1d			lda 	MSeed32+1
.223f	95 50		sta $50,x			sta 	esInt1,x
.2241	ad 1e 0b	lda $0b1e			lda 	MSeed32+2
.2244	95 58		sta $58,x			sta 	esInt2,x
.2246	ad 1f 0b	lda $0b1f			lda 	MSeed32+3
.2249	95 60		sta $60,x			sta 	esInt3,x
.224b	68		pla				pla
.224c	a8		tay				tay
.224d	a9 00		lda #$00			lda 	#0
.224f	95 40		sta $40,x			sta 	esType,x
.2251	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2252					CheckToken:
.2252	d1 02		cmp ($02),y			cmp 	(codePtr),y
.2254	d0 02		bne $2258			bne 	_CTError
.2256	c8		iny				iny
.2257	60		rts				rts
.2258					_CTError:
.2258	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.225a	20 9b 23	jsr $239b		jsr	errorHandler
.225d					CheckRightParen:
.225d	b1 02		lda ($02),y			lda 	(codePtr),y
.225f	c8		iny				iny
.2260	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2262	d0 01		bne $2265			bne 	_CRPError
.2264	60		rts				rts
.2265					_CRPError:
.2265	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2267	20 9b 23	jsr $239b		jsr	errorHandler
.226a					CheckComma:
.226a	b1 02		lda ($02),y			lda 	(codePtr),y
.226c	c8		iny				iny
.226d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.226f	d0 01		bne $2272			bne 	_CCError
.2271	60		rts				rts
.2272					_CCError:
.2272	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2274	20 9b 23	jsr $239b		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2d71					ScanForward:
.2d71	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2d73	86 07		stx $07				stx 	temp1+1
.2d75	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2d77	85 08		sta $08				sta 	temp2
.2d79	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2d7b	c8		iny				iny
.2d7c	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.2d7e	d0 08		bne $2d88			bne 	_SFNoCheck 					; if so, check token against entered values.
.2d80	c5 06		cmp $06				cmp 	temp1
.2d82	f0 24		beq $2da8			beq 	_SFExit
.2d84	c5 07		cmp $07				cmp 	temp1+1
.2d86	f0 20		beq $2da8			beq 	_SFExit
.2d88					_SFNoCheck:
.2d88	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2d8a	90 ed		bcc $2d79			bcc 	_SFLoop
.2d8c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2d8e	90 19		bcc $2da9			bcc 	_SFSpecials
.2d90	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2d92	90 e5		bcc $2d79			bcc 	_SFLoop
.2d94	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2d96	b0 e1		bcs $2d79			bcs 	_SFLoop
.2d98	aa		tax				tax  								; token in X, and look up the adjuster.
.2d99	bd b7 1b	lda $1bb7,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2d9c	38		sec				sec 								; convert to an offset
.2d9d	e9 81		sbc #$81			sbc 	#$81
.2d9f	18		clc				clc 								; add to depth
.2da0	65 08		adc $08				adc 	temp2
.2da2	85 08		sta $08				sta 	temp2
.2da4	10 d3		bpl $2d79			bpl 	_SFLoop 					; +ve okay to continue
.2da6	30 35		bmi $2ddd			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2da8	60		rts		_SFExit:rts
.2da9					_SFSpecials:
.2da9	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2dab	f0 14		beq $2dc1			beq 	_SFNextLine
.2dad	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2daf	f0 31		beq $2de2			beq 	_SFFloatSkip
.2db1	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2db3	f0 04		beq $2db9			beq 	_SFSkipString
.2db5	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2db6	4c 79 2d	jmp $2d79			jmp 	_SFLoop 					; token.
.2db9					_SFSkipString:
.2db9	98		tya				tya
.2dba	38		sec				sec
.2dbb	71 02		adc ($02),y			adc 	(codePtr),y
.2dbd	a8		tay				tay
.2dbe	4c 79 2d	jmp $2d79			jmp 	_SFLoop
.2dc1					_SFNextLine:
.2dc1	a0 00		ldy #$00			ldy 	#0 							; get offset
.2dc3	b1 02		lda ($02),y			lda 	(codePtr),y
.2dc5	18		clc				clc 								; add to code pointer.
.2dc6	65 02		adc $02				adc 	codePtr
.2dc8	85 02		sta $02				sta 	codePtr
.2dca	90 02		bcc $2dce			bcc		_SFNLNoCarry
.2dcc	e6 03		inc $03				inc 	codePtr+1
.2dce					_SFNLNoCarry:
.2dce	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2dd0	d0 a7		bne $2d79			bne		_SFLoop 					; no go round again
.2dd2	a5 06		lda $06				lda 	temp1
.2dd4	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2dd6	d0 05		bne $2ddd			bne 	_SFError
.2dd8	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2dda	20 9b 23	jsr $239b		jsr	errorHandler
.2ddd					_SFError:
.2ddd	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2ddf	20 9b 23	jsr $239b		jsr	errorHandler
.2de2					_SFFloatSkip:
.2de2	4c 40 15	jmp $1540			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2277					RSReset:
.2277	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2279	85 78		sta $78				sta 	rsPointer
.227b	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.227d	85 79		sta $79				sta 	1+(rsPointer)
.227f	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2281	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2284	60		rts				rts
.2285					RSClaim:
.2285	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.2287	48		pha				pha 								; save marker on stack.
.2288	8a		txa				txa 								; get bytes required.
.2289	38		sec				sec
.228a	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.228c	65 78		adc $78				adc 	rsPointer
.228e	85 78		sta $78				sta 	rsPointer
.2290	a5 79		lda $79				lda 	rsPointer+1
.2292	69 ff		adc #$ff			adc 	#$FF
.2294	85 79		sta $79				sta 	rsPointer+1
.2296	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2298	90 08		bcc $22a2			bcc 	_RSCOverflow
.229a	68		pla				pla 								; get marker back
.229b	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.229d	91 78		sta ($78),y			sta 	(rsPointer),y
.229f	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.22a1	60		rts				rts
.22a2					_RSCOverflow:
.22a2	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.22a4	20 9b 23	jsr $239b		jsr	errorHandler
.22a7					RSFree:
.22a7	18		clc				clc
.22a8	65 78		adc $78				adc 	rsPointer
.22aa	85 78		sta $78				sta 	rsPointer
.22ac	90 02		bcc $22b0			bcc 	_RSFExit
.22ae	e6 79		inc $79				inc 	rsPointer+1
.22b0					_RSFExit:
.22b0	60		rts				rts
.22b1					RSSavePosition:
.22b1	84 0c		sty $0c				sty 	tempShort 					; save Y position
.22b3	a8		tay				tay 								; this is where we write it.
.22b4	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.22b6	91 78		sta ($78),y			sta 	(rsPointer),y
.22b8	c8		iny				iny
.22b9	a5 03		lda $03				lda 	codePtr+1
.22bb	91 78		sta ($78),y			sta 	(rsPointer),y
.22bd	c8		iny				iny
.22be	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.22c0	91 78		sta ($78),y			sta 	(rsPointer),y
.22c2	a8		tay				tay 								; fix Y back again to original value
.22c3	60		rts				rts
.22c4					RSLoadPosition:
.22c4	a8		tay				tay
.22c5	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.22c7	85 02		sta $02				sta 	codePtr
.22c9	c8		iny				iny
.22ca	b1 78		lda ($78),y			lda 	(rsPointer),y
.22cc	85 03		sta $03				sta 	codePtr+1
.22ce	c8		iny				iny
.22cf	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.22d1	a8		tay				tay 								; to Y
.22d2	60		rts				rts

;******  Return to file: main/main.asm

.22d3					mainHandler:
.22d3	7c d6 22	jmp ($22d6,x)			jmp 	(mainVectors,x)
.22d6					mainVectors:
>22d6	5d 22					.word CheckRightParen      ; index 0
>22d8	ea 1b					.word LinkEvaluate         ; index 2
>22da	f0 1b					.word LinkEvaluateInteger  ; index 4
>22dc	f6 1b					.word LinkEvaluateSmallInt ; index 6
>22de	3e 21					.word MLInt32ToString      ; index 8
>22e0	bc 13					.word PrintString          ; index 10

;******  Return to file: basic.asm

.22e2					section_end_main:
.22e2					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.22e2					assemblerHandler:
.22e2	7c e5 22	jmp ($22e5,x)			jmp 	(assemblerVectors,x)
.22e5					assemblerVectors:

;******  Return to file: basic.asm

.22e5					section_end_assembler:
.22e5					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.22e5					IOInitialise:
.22e5	a9 0f		lda #$0f			lda 	#15
.22e7	20 10 23	jsr $2310			jsr 	IOPrintChar
.22ea	a9 02		lda #$02			lda 	#2
.22ec	20 3c 23	jsr $233c			jsr 	IOInk
.22ef	a9 00		lda #$00			lda 	#0
.22f1	20 50 23	jsr $2350			jsr 	IOPaper
.22f4	20 f8 22	jsr $22f8			jsr 	IOClearScreen
.22f7	60		rts				rts
.22f8					IOClearScreen:
.22f8	48		pha				pha
.22f9	a9 93		lda #$93			lda	 	#147
.22fb	20 10 23	jsr $2310			jsr 	IOPrintChar
.22fe	68		pla				pla
.22ff	60		rts				rts
.2300					IONewLine:
.2300	48		pha				pha
.2301	a9 0d		lda #$0d			lda 	#13
.2303	20 10 23	jsr $2310			jsr 	IOPrintChar
.2306	68		pla				pla
.2307	60		rts				rts
.2308					IOTab:
.2308	48		pha				pha
.2309	a9 20		lda #$20			lda 	#32
.230b	20 10 23	jsr $2310			jsr 	IOPrintChar
.230e	68		pla				pla
.230f	60		rts				rts
.2310					IOPrintChar:
.2310	aa		tax				tax
.2311	5a		phy				phy
.2312	8a		txa				txa
.2313	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14)
.2315	d0 02		bne $2319			bne 	_IOPCNotBS
.2317	a9 14		lda #$14			lda 	#$14
.2319					_IOPCNotBS:
.2319	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.231c	7a		ply				ply
.231d	60		rts				rts
.231e					IOInkey:
.231e	98		tya				tya
.231f	48		pha				pha
.2320	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2323	85 0c		sta $0c				sta 	tempShort
.2325	68		pla				pla
.2326	a8		tay				tay
.2327	a5 0c		lda $0c				lda 	tempShort				; no key pressed.
.2329	f0 10		beq $233b			beq 	_IOIExit
.232b	c9 0d		cmp #$0d			cmp 	#13 					; allow CR
.232d	f0 0c		beq $233b			beq 	_IOIExit
.232f	c9 14		cmp #$14			cmp 	#$14 					; backspace code
.2331	f0 06		beq $2339			beq 	_IOIBackspace
.2333	c9 20		cmp #$20			cmp 	#32
.2335	90 e7		bcc $231e			bcc 	IOInkey
.2337	b0 02		bcs $233b			bcs 	_IOIExit
.2339					_IOIBackspace:
.2339	a9 08		lda #$08			lda 	#8 						; return chr(8)
.233b					_IOIExit:
.233b	60		rts				rts
.233c					IOInk:
.233c	48		pha				pha
.233d	29 07		and #$07			and 	#7
.233f	aa		tax				tax
.2340	bd 48 23	lda $2348,x			lda 	_IOColourTable,x
.2343	20 10 23	jsr $2310			jsr 	IOPrintChar
.2346	68		pla				pla
.2347	60		rts				rts
.2348					_IOColourTable:
>2348	90						.byte 	$90 					; 0 Black
>2349	1c						.byte 	$1C 					; 1 Red
>234a	1e						.byte 	$1E 					; 2 Green
>234b	9e						.byte 	$9E 					; 3 Yellow
>234c	1f						.byte 	$1F 					; 4 Blue
>234d	9c						.byte 	$9C 					; 5 Magenta
>234e	9f						.byte 	$9F 					; 6 Cyan
>234f	05						.byte 	$05 					; 7 White
.2350					IOPaper:
.2350	48		pha				pha
.2351	48		pha				pha
.2352	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr
.2354	20 10 23	jsr $2310			jsr 	IOPrintChar
.2357	68		pla				pla
.2358	20 3c 23	jsr $233c			jsr 	IOInk
.235b	a9 01		lda #$01			lda 	#1
.235d	20 10 23	jsr $2310			jsr 	IOPrintChar
.2360	68		pla				pla
.2361	60		rts				rts
.2362					IOLocate:
.2362	48		pha				pha
.2363	a9 13		lda #$13			lda 	#$13 					; home
.2365	20 10 23	jsr $2310			jsr 	IOPrintChar
.2368	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.236a	20 71 23	jsr $2371			jsr 	_IOLoc2
.236d	68		pla				pla
.236e	a8		tay				tay
.236f	a9 1d		lda #$1d			lda 	#$1D
.2371					_IOLoc2:
.2371	c0 00		cpy #$00			cpy 	#0
.2373	f0 06		beq $237b			beq 	_IOLocExit
.2375	20 10 23	jsr $2310			jsr 	IOPrintChar
.2378	88		dey				dey
.2379	d0 f6		bne $2371			bne 	_IOLoc2
.237b					_IOLocExit:
.237b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.237c					IOReadTimer:
.237c	20 de ff	jsr $ffde			jsr 	$FFDE
.237f	48		pha				pha
.2380	8a		txa				txa
.2381	a8		tay				tay
.2382	68		pla				pla
.2383	60		rts				rts

;******  Return to file: device/device.asm

.2384					deviceHandler:
.2384	7c 87 23	jmp ($2387,x)			jmp 	(deviceVectors,x)
.2387					deviceVectors:
>2387	f8 22					.word IOClearScreen        ; index 0
>2389	00 23					.word IONewLine            ; index 2
>238b	e5 22					.word IOInitialise         ; index 4
>238d	3c 23					.word IOInk                ; index 6
>238f	1e 23					.word IOInkey              ; index 8
>2391	62 23					.word IOLocate             ; index 10
>2393	50 23					.word IOPaper              ; index 12
>2395	10 23					.word IOPrintChar          ; index 14
>2397	08 23					.word IOTab                ; index 16
>2399	7c 23					.word IOReadTimer          ; index 18

;******  Return to file: basic.asm

.239b					section_end_device:
.239b					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.239b					ErrorHandler:
.239b	a9 fe		lda #$fe			lda 	#(ErrorTextList) & $FF
.239d	85 04		sta $04				sta 	temp0
.239f	a9 23		lda #$23			lda 	#(ErrorTextList) >> 8
.23a1	85 05		sta $05				sta 	1+(temp0)
.23a3	ca		dex		_EHFind:dex
.23a4	f0 10		beq $23b6			beq 	_EHFound
.23a6	a0 00		ldy #$00			ldy 	#0 							; goto next text message
.23a8	38		sec				sec
.23a9	a5 04		lda $04				lda 	temp0
.23ab	71 04		adc ($04),y			adc 	(temp0),y
.23ad	85 04		sta $04				sta 	temp0
.23af	90 f2		bcc $23a3			bcc 	_EHFind
.23b1	e6 05		inc $05				inc 	temp0+1
.23b3	4c a3 23	jmp $23a3			jmp 	_EHFind
.23b6					_EHFound:
.23b6	a2 0a		ldx #$0a		ldx	#10
.23b8	20 d3 22	jsr $22d3		jsr	mainHandler
.23bb	a0 00		ldy #$00			ldy 	#0 							; in a line ?
.23bd	b1 02		lda ($02),y			lda 	(codePtr),y
.23bf	f0 36		beq $23f7			beq 	_EHNoLine
.23c1	a9 fa		lda #$fa			lda 	#(EHAtMsg) & $FF
.23c3	85 04		sta $04				sta 	temp0
.23c5	a9 23		lda #$23			lda 	#(EHAtMsg) >> 8
.23c7	85 05		sta $05				sta 	1+(temp0)
.23c9	a2 0a		ldx #$0a		ldx	#10
.23cb	20 d3 22	jsr $22d3		jsr	mainHandler
.23ce	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.23d0	a2 00		ldx #$00			ldx 	#0
.23d2	b1 02		lda ($02),y			lda 	(codePtr),y
.23d4	95 48		sta $48,x			sta 	esInt0,x
.23d6	c8		iny				iny
.23d7	b1 02		lda ($02),y			lda 	(codePtr),y
.23d9	95 50		sta $50,x			sta 	esInt1,x
.23db	a9 00		lda #$00			lda 	#0
.23dd	95 58		sta $58,x			sta 	esInt2,x
.23df	95 60		sta $60,x			sta 	esInt3,x
.23e1	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.23e3	85 04		sta $04				sta 	temp0
.23e5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.23e7	85 05		sta $05				sta 	1+(temp0)
.23e9	a0 0a		ldy #$0a			ldy 	#10
.23eb	a9 00		lda #$00			lda 	#0
.23ed	a2 08		ldx #$08		ldx	#8
.23ef	20 d3 22	jsr $22d3		jsr	mainHandler
.23f2	a2 0a		ldx #$0a		ldx	#10
.23f4	20 d3 22	jsr $22d3		jsr	mainHandler
.23f7					_EHNoLine:
.23f7	4c f7 23	jmp $23f7	_EHHalt:jmp 	_EHHalt
.23fa					EHAtMsg:
>23fa	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.23fe					ErrorTextList:
>23fe	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>2406	20 6e 6f 74 20 50 72 65 73 65 6e 74
>2412	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>241a	45 72 72 6f 72
>241f	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>2427	64 69 73 61 62 6c 65 64
>242f	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>2437	6f 6e 20 66 61 69 6c 65 64
>2440	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>2448	42 79 20 5a 65 72 6f
>244f	04 53 74 6f 70				.text 4,"Stop"
>2454	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>245c	73 6d 61 74 63 68
>2462	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>246a	20 56 61 6c 75 65
>2470	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>2478	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>2486	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>248e	20 63 6f 6d 6d 61
>2494	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>249c	20 72 65 66 65 72 65 6e 63 65
>24a6	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>24ae	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>24bc	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>24c4	74 6f 6f 20 6c 6f 6e 67 2e
>24cd	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>24d5	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>24e2	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>24ea	69 74 68 6f 75 74 20 52 45 50 45 41 54
>24f7	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>24ff	74 68 6f 75 74 20 46 4f 52
>2508	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2510	74 68 6f 75 74 20 57 48 49 4c 45
>251b	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>2523	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>2530	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>2538	54 20 69 6e 64 65 78
>253f	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>2547	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>2557	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>255f	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>256e	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>2576	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>2586	63 65 2e
>2589	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>2591	20 50 72 6f 63 65 64 75 72 65
>259b	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>25a3	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>25b3	2e
>25b4	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>25bc	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>25ca	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>25d2	75 69 72 65 73 20 61 72 72 61 79
>25dd	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>25e5	61 79 20 69 6e 64 65 78 2e
>25ee	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>25f6	64 61 74 61
>25fa	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.25fb					section_end_error:
.25fb					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.25fb					ExtensionHandler:
.25fb	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.25fd	d0 08		bne $2607			bne 	_ExtensionUnary
.25ff	b1 02		lda ($02),y			lda 	(codePtr),y
.2601	c8		iny				iny
.2602	0a		asl a				asl 	a
.2603	aa		tax				tax
.2604	7c 05 26	jmp ($2605,x)			jmp 	(Group2Vectors-12,X)
.2607					_ExtensionUnary:
.2607	48		pha				pha 								; save stack pos in A
.2608	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token
.260a	c8		iny				iny
.260b	0a		asl a				asl 	a
.260c	aa		tax				tax
.260d	68		pla				pla
.260e	7c 09 26	jmp ($2609,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.2611					Group2Vectors:
>2611	21 26					.word	Command_VPoke            ; $86 vpoke
>2613	24 26					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.2615					Group3Vectors:
>2615	65 26					.word	Command_VPeek            ; $86 vpeek(
>2617	68 26					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.2619					XEvaluateInteger:
.2619	8a		txa				txa
.261a	a2 04		ldx #$04		ldx	#4
.261c	20 d3 22	jsr $22d3		jsr	mainHandler
.261f	aa		tax				tax
.2620	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.2621					Command_VPoke:
.2621	38		sec				sec 						; one byte , CS
.2622	b0 01		bcs $2625			bcs 	CmdVideoWrite
.2624					Command_VDoke:
.2624	18		clc				clc 						; two bytes, CC
.2625					CmdVideoWrite:
.2625	08		php				php
.2626	a2 00		ldx #$00			ldx 	#0  				; get address into levels 0,1
.2628	20 19 26	jsr $2619			jsr 	XEvaluateInteger
.262b	20 6a 22	jsr $226a			jsr 	CheckComma
.262e	e8		inx				inx
.262f	20 19 26	jsr $2619			jsr 	XEvaluateInteger
.2632	ca		dex				dex
.2633	20 44 26	jsr $2644			jsr 	SetUpTOSVRamAddress
.2636	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.2638	8d 23 9f	sta $9f23			sta 	$9F23
.263b	28		plp				plp 						; if it was Poke then exit
.263c	b0 05		bcs $2643			bcs 	_CVWExit
.263e	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.2640	8d 23 9f	sta $9f23			sta 	$9F23
.2643					_CVWExit:
.2643	60		rts				rts
.2644					SetUpTOSVRamAddress:
.2644	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2646	29 01		and #$01			and 	#1
.2648	15 60		ora $60,x			ora 	esInt3,x
.264a	d0 14		bne $2660			bne 	CVWValue
.264c	b5 48		lda $48,x			lda 	esInt0,x				; set address up
.264e	8d 20 9f	sta $9f20			sta 	$9F20
.2651	b5 50		lda $50,x			lda 	esInt1,x
.2653	8d 21 9f	sta $9f21			sta	 	$9F21
.2656	b5 58		lda $58,x			lda 	esInt2,x
.2658	29 01		and #$01			and 	#1
.265a	09 10		ora #$10			ora 	#$10 				; step 1.
.265c	8d 22 9f	sta $9f22			sta 	$9F22
.265f	60		rts				rts
.2660					CVWValue:
.2660	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2662	20 9b 23	jsr $239b		jsr	errorHandler
.2665					Command_VPeek:
.2665	38		sec				sec 						; one byte , CS
.2666	b0 01		bcs $2669			bcs 	CmdVideoRead
.2668					Command_VDeek:
.2668	18		clc				clc 						; two bytes, CC
.2669					CmdVideoRead:
>2669	db						.byte 	$DB
.266a	08		php				php 						; save action on stack.
.266b	aa		tax				tax 						; save stack position
.266c	20 19 26	jsr $2619			jsr 	XEvaluateInteger 	; address
.266f	20 5d 22	jsr $225d			jsr 	CheckRightParen 	; closing right bracket.
.2672	20 44 26	jsr $2644			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2675	a9 00		lda #$00			lda 	#0 					; zero the return value
.2677	95 60		sta $60,x			sta 	esInt3,x
.2679	95 58		sta $58,x			sta 	esInt2,x
.267b	95 50		sta $50,x			sta 	esInt1,x
.267d	ad 23 9f	lda $9f23			lda 	$9F23
.2680	95 48		sta $48,x			sta 	esInt0,x
.2682	28		plp				plp
.2683	b0 05		bcs $268a			bcs 	_CVRExit
.2685	ad 23 9f	lda $9f23			lda 	$9F23
.2688	95 50		sta $50,x			sta 	esInt1,x
.268a					_CVRExit:
.268a	8a		txa				txa 						; return X position.
.268b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.268c					section_end_extension:
.268c					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.268c					floatingpointHandler:
.268c	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.268e	20 9b 23	jsr $239b		jsr	errorHandler

;******  Return to file: basic.asm

.2691					section_end_floatingpoint:
.2691					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.2691					interactionHandler:
.2691	7c 94 26	jmp ($2694,x)			jmp 	(interactionVectors,x)
.2694					interactionVectors:

;******  Return to file: basic.asm

.2694					section_end_interaction:
.2694					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2694					StringChrs:
.2694	aa		tax				tax 								; set up stack
.2695	a9 02		lda #$02			lda 	#2
.2697	20 4e 27	jsr $274e			jsr 	AllocateSoftString
.269a	98		tya				tya
.269b	20 74 27	jsr $2774			jsr 	WriteSoftString
.269e	20 a3 26	jsr $26a3			jsr 	ReturnSoftString
.26a1	8a		txa				txa
.26a2	60		rts				rts
.26a3					ReturnSoftString:
.26a3	a5 7a		lda $7a				lda 	softMemAlloc
.26a5	95 48		sta $48,x			sta 	esInt0,x
.26a7	a5 7b		lda $7b				lda 	softMemAlloc+1
.26a9	95 50		sta $50,x			sta 	esInt1,x
.26ab	a9 00		lda #$00			lda 	#0
.26ad	95 58		sta $58,x			sta 	esInt2,x
.26af	95 60		sta $60,x			sta 	esInt3,x
.26b1	a9 40		lda #$40			lda 	#$40
.26b3	95 40		sta $40,x			sta 	esType,x
.26b5	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.26b6					STRCompare:
.26b6	48		pha				pha 								; save A
.26b7	aa		tax				tax 								; put stack pos in X
.26b8	98		tya				tya
.26b9	48		pha				pha
.26ba	20 ee 26	jsr $26ee			jsr 	CopyStringPair
.26bd	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.26bf	b1 04		lda ($04),y			lda 	(temp0),y
.26c1	d1 06		cmp ($06),y			cmp 	(temp1),y
.26c3	90 02		bcc $26c7			bcc 	_SCNotSmaller
.26c5	b1 06		lda ($06),y			lda 	(temp1),y
.26c7					_SCNotSmaller:
.26c7	aa		tax				tax 								; put that in X. We compare this many chars first.
.26c8					_SCCompareLoop:
.26c8	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.26ca	f0 0c		beq $26d8			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.26cc	ca		dex				dex 								; decrement chars to compare.
.26cd	c8		iny				iny 								; move to next character
.26ce	38		sec				sec 								; calculate s1[y]-s2[y]
.26cf	b1 04		lda ($04),y			lda 	(temp0),y
.26d1	f1 06		sbc ($06),y			sbc 	(temp1),y
.26d3	d0 0a		bne $26df			bne 	_SCReturnResult 			; if different return sign of A
.26d5	4c c8 26	jmp $26c8			jmp 	_SCCompareLoop
.26d8					_SCSameToEndShortest
.26d8	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.26da	38		sec				sec
.26db	b1 04		lda ($04),y			lda 	(temp0),y
.26dd	f1 06		sbc ($06),y			sbc 	(temp1),y
.26df					_SCReturnResult:
.26df	08		php				php 								; set return to zero preserving PSW.
.26e0	a2 00		ldx #$00			ldx 	#0
.26e2	28		plp				plp
.26e3	f0 05		beq $26ea			beq 	_SCExit 					; two values equal, then exit
.26e5	ca		dex				dex 								; X = $FF
.26e6	90 02		bcc $26ea			bcc 	_SCExit 					; if 1st < 2nd then -1
.26e8	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.26ea					_SCExit:
.26ea	68		pla				pla
.26eb	a8		tay				tay
.26ec	68		pla				pla
.26ed	60		rts				rts
.26ee					CopyStringPair:
.26ee	b5 49		lda $49,x			lda 	esInt0+1,x
.26f0	85 06		sta $06				sta 	temp1
.26f2	b5 51		lda $51,x			lda 	esInt1+1,x
.26f4	85 07		sta $07				sta 	temp1+1
.26f6					CopyStringTop:
.26f6	b5 48		lda $48,x			lda 	esInt0,x
.26f8	85 04		sta $04				sta 	temp0
.26fa	b5 50		lda $50,x			lda 	esInt1,x
.26fc	85 05		sta $05				sta 	temp0+1
.26fe	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.26ff					StringConcat:
.26ff	aa		tax				tax									; stack pos in X
.2700	98		tya				tya
.2701	48		pha				pha
.2702	20 ee 26	jsr $26ee			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2705	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2706	a0 00		ldy #$00			ldy 	#0
.2708	b1 04		lda ($04),y			lda 	(temp0),y
.270a	71 06		adc ($06),y			adc 	(temp1),y
.270c	b0 1c		bcs $272a			bcs 	_SCError 					; just too many characters here.
.270e	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2710	b0 18		bcs $272a			bcs 	_SCError
.2712	20 4e 27	jsr $274e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2715	20 45 27	jsr $2745			jsr 	CopySoftToStack 			; copy that to the stack.
.2718	20 2f 27	jsr $272f			jsr 	SCCopyTemp0 				; copy temp0
.271b	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.271d	85 04		sta $04				sta 	temp0
.271f	a5 07		lda $07				lda 	temp1+1
.2721	85 05		sta $05				sta 	temp0+1
.2723	20 2f 27	jsr $272f			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2726	68		pla				pla
.2727	a8		tay				tay
.2728	8a		txa				txa 								; and A
.2729	60		rts				rts
.272a					_SCError:
.272a	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.272c	20 9b 23	jsr $239b		jsr	errorHandler
.272f					SCCopyTemp0:
.272f	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2731	b1 04		lda ($04),y			lda 	(temp0),y
.2733	85 08		sta $08				sta 	temp2
.2735					_SCCopyLoop:
.2735	a5 08		lda $08				lda 	temp2 						; done the lot
.2737	f0 0b		beq $2744			beq 	_SCCopyExit
.2739	c6 08		dec $08				dec 	temp2
.273b	c8		iny				iny 								; get next char
.273c	b1 04		lda ($04),y			lda 	(temp0),y
.273e	20 74 27	jsr $2774			jsr 	WriteSoftString 			; write to soft string.
.2741	4c 35 27	jmp $2735			jmp 	_SCCopyLoop
.2744					_SCCopyExit:
.2744	60		rts				rts
.2745					CopySoftToStack:
.2745	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2747	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2749	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.274b	95 50		sta $50,x			sta 	esInt1,x
.274d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.274e					AllocateSoftString:
.274e	85 0c		sta $0c				sta 	tempShort 					; save count
.2750	98		tya				tya
.2751	48		pha				pha
.2752	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2754	d0 09		bne $275f			bne 	_ASSDone
.2756	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.2758	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.275a	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.275c	88		dey				dey
.275d	84 7b		sty $7b				sty 	softMemAlloc+1
.275f					_ASSDone:
.275f	38		sec				sec 								; allocate downwards enough memory
.2760	a5 7a		lda $7a				lda 	softMemAlloc
.2762	e5 0c		sbc $0c				sbc 	tempShort
.2764	85 7a		sta $7a				sta 	softMemAlloc
.2766	a5 7b		lda $7b				lda 	softMemAlloc+1
.2768	e9 00		sbc #$00			sbc 	#0
.276a	85 7b		sta $7b				sta 	softMemAlloc+1
.276c	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.276e	a8		tay				tay
.276f	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2771	68		pla				pla
.2772	a8		tay				tay
.2773	60		rts				rts
.2774					WriteSoftString:
.2774	84 0c		sty $0c				sty 	tempShort 					; save Y
.2776	48		pha				pha
.2777	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2779	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.277b	18		clc				clc
.277c	69 01		adc #$01			adc 	#1
.277e	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2780	a8		tay				tay 								; pointer in Y
.2781	68		pla				pla 								; get char and write.
.2782	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2784	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.2786	60		rts				rts
.2787					StrClone:
.2787	aa		tax				tax 								; set up stack.
.2788	98		tya				tya
.2789	48		pha				pha
.278a	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.278c	b1 04		lda ($04),y			lda 	(temp0),y
.278e	18		clc				clc
.278f	69 01		adc #$01			adc 	#1
.2791	20 4e 27	jsr $274e			jsr 	AllocateSoftString 			; allocate soft memory
.2794	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2796	95 48		sta $48,x			sta 	esInt0,x
.2798	a5 7b		lda $7b				lda 	softMemAlloc+1
.279a	95 50		sta $50,x			sta 	esInt1,x
.279c	a9 00		lda #$00			lda 	#0
.279e	95 58		sta $58,x			sta 	esInt2,x
.27a0	95 60		sta $60,x			sta 	esInt3,x
.27a2	a9 40		lda #$40			lda 	#$40 						; set type to string.
.27a4	95 40		sta $40,x			sta 	esType,x
.27a6	20 2f 27	jsr $272f			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.27a9	68		pla				pla
.27aa	a8		tay				tay
.27ab	8a		txa				txa
.27ac	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.27ad					CaseString:
.27ad	48		pha				pha 								; save A and copy to X
.27ae	aa		tax				tax
.27af	98		tya				tya
.27b0	48		pha				pha
.27b1	20 ed 11	jsr $11ed			jsr 	TOSToTemp0 					; target string -> temp0
.27b4	a0 00		ldy #$00			ldy 	#0
.27b6	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.27b8	18		clc				clc
.27b9	69 01		adc #$01			adc 	#1 							; one more for length byte
.27bb	20 4e 27	jsr $274e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.27be	20 45 27	jsr $2745			jsr 	CopySoftToStack 			; copy that to the stack.
.27c1	a0 00		ldy #$00			ldy 	#0
.27c3	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.27c5	aa		tax				tax
.27c6					_CSCopy:
.27c6	e0 00		cpx #$00			cpx 	#0
.27c8	f0 24		beq $27ee			beq 	_CSExit
.27ca	ca		dex				dex
.27cb	c8		iny				iny
.27cc	68		pla				pla 								; check direction
.27cd	48		pha				pha
.27ce	f0 0c		beq $27dc			beq 	_CSUpper
.27d0	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.27d2	c9 41		cmp #$41			cmp 	#"A"
.27d4	90 12		bcc $27e8			bcc 	_CSWrite
.27d6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.27d8	b0 0e		bcs $27e8			bcs 	_CSWrite
.27da	90 0a		bcc $27e6			bcc 	_CSFlipWrite
.27dc					_CSUpper:
.27dc	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.27de	c9 61		cmp #$61			cmp 	#"a"
.27e0	90 06		bcc $27e8			bcc 	_CSWrite
.27e2	c9 7b		cmp #$7b			cmp 	#"z"+1
.27e4	b0 02		bcs $27e8			bcs 	_CSWrite
.27e6					_CSFlipWrite:
.27e6	49 20		eor #$20			eor 	#"A"^"a"
.27e8					_CSWrite:
.27e8	20 74 27	jsr $2774			jsr 	WriteSoftString
.27eb	4c c6 27	jmp $27c6			jmp 	_CSCopy
.27ee					_CSExit:
.27ee	68		pla				pla
.27ef	a8		tay				tay
.27f0	68		pla				pla
.27f1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.27f2					StringSubstring:
.27f2	48		pha				pha
.27f3	aa		tax				tax 								; access stack.
.27f4	98		tya				tya
.27f5	48		pha				pha
.27f6	20 f6 26	jsr $26f6			jsr 	CopyStringTop 				; point temp0 to the string.
.27f9	a0 00		ldy #$00			ldy 	#0 							; get length.
.27fb	b1 04		lda ($04),y			lda 	(temp0),Y
.27fd	85 06		sta $06				sta 	temp1
.27ff	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2801	c5 06		cmp $06				cmp 	temp1 						;
.2803	f0 02		beq $2807			beq 	_SSBOkay
.2805	b0 2a		bcs $2831			bcs 	_SSBReturnNull
.2807					_SSBOkay:
.2807	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2809	18		clc				clc
.280a	69 01		adc #$01			adc 	#1
.280c	38		sec				sec
.280d	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.280f	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2811	90 02		bcc $2815			bcc		_SSBTrunc
.2813	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2815					_SSBTrunc:
.2815	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2817	18		clc				clc
.2818	69 01		adc #$01			adc 	#1 							; add 1
.281a	20 4e 27	jsr $274e			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.281d	20 45 27	jsr $2745			jsr 	CopySoftToStack 			; copy that to the stack.
.2820	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2822					_SSBCopyLoop:
.2822	a5 07		lda $07				lda 	temp1+1 					; done them all
.2824	f0 0e		beq $2834			beq 	_SSBExit
.2826	c6 07		dec $07				dec 	temp1+1
.2828	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.282a	20 74 27	jsr $2774			jsr 	WriteSoftString
.282d	c8		iny				iny
.282e	4c 22 28	jmp $2822			jmp 	_SSBCopyLoop
.2831					_SSBReturnNull:
.2831	20 38 28	jsr $2838			jsr 	ReturnNull
.2834					_SSBExit:
.2834	68		pla				pla
.2835	a8		tay				tay
.2836	68		pla				pla
.2837	60		rts				rts
.2838					ReturnNull:
.2838	a9 00		lda #$00			lda 	#0 							; clear null string
.283a	8d cc 0a	sta $0acc			sta 	NullString
.283d	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.283f	95 48		sta $48,x			sta 	esInt0,x
.2841	a9 0a		lda #$0a			lda 	#NullString >> 8
.2843	95 50		sta $50,x			sta 	esInt1,x
.2845	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0b20					srcStrLen:
>0b20							.fill 	1
.2846					StringWrite:
.2846	aa		tax				tax
.2847	48		pha				pha
.2848	98		tya				tya
.2849	48		pha				pha
.284a	20 71 28	jsr $2871			jsr 	CheckOverwriteCurrent
.284d	b0 0d		bcs $285c			bcs		_SWCopyCurrent
.284f	20 af 28	jsr $28af			jsr 	RequiresConcretion
.2852	90 0e		bcc $2862			bcc 	_SWWriteReference
.2854	20 12 29	jsr $2912			jsr 	CheckSpecialConcretion
.2857	b0 09		bcs $2862			bcs 	_SWWriteReference
.2859	20 c3 28	jsr $28c3			jsr 	AllocateHardMemory
.285c					_SWCopyCurrent:
.285c	20 f6 28	jsr $28f6			jsr 	CopyStringToHardMemory
.285f	4c 6d 28	jmp $286d			jmp 	_SWExit
.2862					_SWWriteReference
.2862	a0 00		ldy #$00			ldy 	#0
.2864	a5 04		lda $04				lda 	temp0
.2866	91 06		sta ($06),y			sta 	(temp1),y
.2868	c8		iny				iny
.2869	a5 05		lda $05				lda 	temp0+1
.286b	91 06		sta ($06),y			sta 	(temp1),y
.286d					_SWExit:
.286d	68		pla				pla
.286e	a8		tay				tay
.286f	68		pla				pla
.2870	60		rts				rts
.2871					CheckOverwriteCurrent:
.2871	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2873	b5 51		lda $51,x			lda 	esInt1+1,x
.2875	85 05		sta $05				sta 	temp0+1
.2877	b5 49		lda $49,x			lda 	esInt0+1,x
.2879	85 04		sta $04				sta 	temp0
.287b	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.287d	8d 20 0b	sta $0b20			sta 	srcStrLen
.2880	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2882	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2884	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2886	85 07		sta $07				sta 	temp1+1
.2888	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.288a	b1 06		lda ($06),y			lda 	(temp1),y
.288c	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.288e	90 1b		bcc $28ab			bcc 	_COCFail 				; in hard memory.
.2890	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2892	b1 06		lda ($06),y			lda 	(temp1),y
.2894	e9 01		sbc #$01			sbc 	#1
.2896	85 08		sta $08				sta 	temp2
.2898	c8		iny				iny
.2899	b1 06		lda ($06),y			lda 	(temp1),y
.289b	e9 00		sbc #$00			sbc 	#0
.289d	85 09		sta $09				sta 	temp2+1
.289f	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.28a1	b1 08		lda ($08),y			lda 	(temp2),y
.28a3	38		sec				sec  							; maximum character capacity.
.28a4	e9 02		sbc #$02			sbc 	#2
.28a6	cd 20 0b	cmp $0b20			cmp 	srcStrLen 				; if >= the required length
.28a9	b0 02		bcs $28ad			bcs 	_COCCanReuse
.28ab					_COCFail:
.28ab	18		clc				clc
.28ac	60		rts				rts
.28ad					_COCCanReuse:
.28ad	38		sec				sec
.28ae	60		rts				rts
.28af					RequiresConcretion:
.28af	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28b1	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.28b3	b0 0a		bcs $28bf			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.28b5	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.28b7	f0 08		beq $28c1			beq 	_RCFail 				; if not, this cannot be soft memory.
.28b9	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28bb	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.28bd	90 02		bcc $28c1			bcc 	_RCFail 				; so concreting
.28bf					_RCSucceed:
.28bf	38		sec				sec
.28c0	60		rts				rts
.28c1					_RCFail:
.28c1	18		clc				clc
.28c2	60		rts				rts
.28c3					AllocateHardMemory:
.28c3	98		tya				tya
.28c4	48		pha				pha
.28c5	ad 20 0b	lda $0b20			lda 	srcStrLen 				; characters in string
.28c8	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.28ca	b0 04		bcs $28d0			bcs 	_AHMSetMax 				; max out that amount.
.28cc	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.28ce	90 02		bcc $28d2			bcc 	_AHMIsOkay
.28d0					_AHMSetMax:
.28d0	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.28d2					_AHMIsOkay:
.28d2	48		pha				pha
.28d3	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.28d5	38		sec				sec  							; and copy result to TOS as target address.
.28d6	65 0d		adc $0d				adc 	highMemory
.28d8	85 0d		sta $0d				sta 	highMemory
.28da	a5 0e		lda $0e				lda 	highMemory+1
.28dc	69 ff		adc #$ff			adc 	#$FF
.28de	85 0e		sta $0e				sta 	highMemory+1
.28e0	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.28e2	68		pla				pla 							; get the total size of the storage block
.28e3	91 0d		sta ($0d),y			sta 	(highMemory),y
.28e5	18		clc				clc
.28e6	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.28e8	69 01		adc #$01			adc 	#1
.28ea	91 06		sta ($06),y			sta 	(temp1),y
.28ec	a5 0e		lda $0e				lda 	highMemory+1
.28ee	69 00		adc #$00			adc 	#0
.28f0	c8		iny				iny
.28f1	91 06		sta ($06),y			sta 	(temp1),y
.28f3	68		pla				pla
.28f4	a8		tay				tay
.28f5	60		rts				rts
.28f6					CopyStringToHardMemory:
.28f6	98		tya				tya
.28f7	48		pha				pha
.28f8	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.28fa	b1 06		lda ($06),y			lda 	(temp1),y
.28fc	85 08		sta $08				sta 	temp2
.28fe	c8		iny				iny
.28ff	b1 06		lda ($06),y			lda 	(temp1),y
.2901	85 09		sta $09				sta 	temp2+1
.2903	ac 20 0b	ldy $0b20			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2906					_CSTHMLoop:
.2906	b1 04		lda ($04),y			lda 	(temp0),y
.2908	91 08		sta ($08),y			sta 	(temp2),y
.290a	88		dey				dey
.290b	c0 ff		cpy #$ff			cpy 	#$FF
.290d	d0 f7		bne $2906			bne 	_CSTHMLoop
.290f	68		pla				pla
.2910	a8		tay				tay
.2911	60		rts				rts
.2912					CheckSpecialConcretion:
.2912	ad 20 0b	lda $0b20			lda 	srcStrLen 				; check string is null.
.2915	f0 02		beq $2919			beq 	_CSCNullString
.2917	18		clc				clc
.2918	60		rts				rts
.2919					_CSCNullString:
.2919	a9 00		lda #$00			lda 	#0
.291b	8d cc 0a	sta $0acc			sta 	NullString
.291e	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2920	85 04		sta $04				sta 	temp0
.2922	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2924	85 05		sta $05				sta 	1+(temp0)
.2926	38		sec				sec
.2927	60		rts				rts

;******  Return to file: string/string.asm

.2928					stringHandler:
.2928	7c 2b 29	jmp ($292b,x)			jmp 	(stringVectors,x)
.292b					stringVectors:
>292b	94 26					.word StringChrs           ; index 0
>292d	87 27					.word StrClone             ; index 2
>292f	ff 26					.word StringConcat         ; index 4
>2931	b6 26					.word STRCompare           ; index 6
>2933	ad 27					.word CaseString           ; index 8
>2935	f2 27					.word StringSubstring      ; index 10
>2937	46 28					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2939					section_end_string:
.2939					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.2939					tokeniserHandler:
.2939	7c 3c 29	jmp ($293c,x)			jmp 	(tokeniserVectors,x)
.293c					tokeniserVectors:

;******  Return to file: basic.asm

.293c					section_end_tokeniser:
.293c					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0b21					varHash:
>0b21							.fill	1
.0b22					varType:
>0b22							.fill 	1
.0b23					varEnd:
>0b23							.fill 	1
.007c					hashList:
>007c							.fill 	2
.293c					AccessVariable:
.293c	aa		tax				tax 								; stack in X
.293d	c8		iny				iny
.293e	b1 02		lda ($02),y			lda 	(codePtr),y
.2940	88		dey				dey
.2941	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.2943	d0 15		bne $295a			bne 	_AVLong
.2945	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2947	38		sec				sec 	 							; make it 0-25
.2948	e9 01		sbc #$01			sbc 	#1
.294a	0a		asl a				asl 	a 							; x 4 is LSB of address
.294b	0a		asl a				asl 	a
.294c	95 48		sta $48,x			sta 	esInt0,x
.294e	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.2950	95 50		sta $50,x			sta 	esInt1,x
.2952	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.2954	95 40		sta $40,x			sta 	esType,x
.2956	c8		iny				iny 								; skip over the variable reference in the code.
.2957	c8		iny				iny
.2958	8a		txa				txa 								; stack in A to return.
.2959	60		rts				rts
.295a					_AVLong:
.295a	8a		txa				txa
.295b	48		pha				pha
.295c	20 a3 29	jsr $29a3			jsr 	AccessSetup 				; set up the basic stuff.
.295f	20 97 2b	jsr $2b97			jsr 	FindVariable 				; does the variable exist already
.2962	b0 0e		bcs $2972			bcs 	_AVFound
.2964	ad 22 0b	lda $0b22			lda 	varType 					; is the variable type an array
.2967	4a		lsr a				lsr 	a
.2968	90 05		bcc $296f			bcc 	_AVCanCreate
.296a	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.296c	20 9b 23	jsr $239b		jsr	errorHandler
.296f					_AVCanCreate:
.296f	20 56 2a	jsr $2a56			jsr 	CreateVariable 				; no, create it.
.2972					_AVFound:
.2972	68		pla				pla
.2973	aa		tax				tax
.2974	18		clc				clc 								; copy temp0 (variable record address)
.2975	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2977	69 05		adc #$05			adc 	#5
.2979	95 48		sta $48,x			sta 	esInt0,x
.297b	a5 05		lda $05				lda 	temp0+1
.297d	69 00		adc #$00			adc 	#0
.297f	95 50		sta $50,x			sta 	esInt1,x
.2981	a9 00		lda #$00			lda 	#0
.2983	95 58		sta $58,x			sta 	esInt2,x
.2985	95 60		sta $60,x			sta 	esInt3,x
.2987	ac 22 0b	ldy $0b22			ldy 	varType 					; get the type ID from the type.
.298a	b9 63 29	lda $2963,y			lda 	_AVTypeTable-$3A,y
.298d	95 40		sta $40,x			sta 	esType,x
.298f	ac 23 0b	ldy $0b23			ldy 	varEnd 						; restore Y
.2992	ad 22 0b	lda $0b22			lda 	VarType 					; get variable type, put LSB into C
.2995	4a		lsr a				lsr 	a
.2996	90 03		bcc $299b			bcc 	_AVNotArray
.2998	20 e0 29	jsr $29e0			jsr 	AccessArray 				; array lookup. if LSB was set.
.299b					_AVNotArray:
.299b	8a		txa				txa 								; return stack in A and return
.299c	60		rts				rts
.299d					_AVTypeTable:
>299d	80 80						.byte 	$80,$80						; integer
>299f	c0 c0						.byte 	$C0,$C0 					; string
>29a1	81 81						.byte 	$81,$81 					; float
.29a3					AccessSetup:
.29a3	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.29a5	8d 21 0b	sta $0b21			sta 	varHash
.29a8	98		tya				tya
.29a9	48		pha				pha
.29aa	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.29ac	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.29ae	b0 0b		bcs $29bb			bcs 	_ASComplete
.29b0	18		clc				clc 								; add to the hash. Might improve this.
.29b1	6d 21 0b	adc $0b21			adc 	varHash
.29b4	8d 21 0b	sta $0b21			sta 	varHash
.29b7	c8		iny				iny 								; next character
.29b8	4c aa 29	jmp $29aa			jmp 	_ASLoop
.29bb					_ASComplete:
.29bb	8d 22 0b	sta $0b22			sta 	varType 					; save variable type byte
.29be	c8		iny				iny
.29bf	8c 23 0b	sty $0b23			sty 	varEnd 						; save the ending position.
.29c2	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.29c3	e9 3a		sbc #$3a			sbc 	#$3A
.29c5	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.29c6	0a		asl a				asl 	a
.29c7	0a		asl a				asl 	a
.29c8	0a		asl a				asl 	a 							; 2 bytes/word
.29c9	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.29cb	ad 21 0b	lda $0b21			lda 	varHash 					; get hash
.29ce	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.29d0	0a		asl a				asl  	a 							; x 2 (for word) and CC
.29d1	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.29d3	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.29d5	85 7c		sta $7c				sta 	hashList
.29d7	a9 0a		lda #$0a			lda 	#hashTables >> 8
.29d9	69 00		adc #$00			adc 	#0
.29db	85 7d		sta $7d				sta 	hashList+1
.29dd	68		pla				pla
.29de	a8		tay				tay
.29df	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.29e0					AccessArray:
.29e0	e8		inx				inx
.29e1	8a		txa				txa
.29e2	a2 04		ldx #$04		ldx	#4
.29e4	20 d3 22	jsr $22d3		jsr	mainHandler
.29e7	aa		tax				tax
.29e8	ca		dex				dex
.29e9	a2 00		ldx #$00		ldx	#0
.29eb	20 d3 22	jsr $22d3		jsr	mainHandler
.29ee	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.29f0	15 59		ora $59,x			ora 	esInt2+1,x
.29f2	d0 33		bne $2a27			bne 	_AABadIndex
.29f4	98		tya				tya
.29f5	48		pha				pha
.29f6	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.29f8	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.29fa	b5 50		lda $50,x			lda 	esInt1,x
.29fc	85 05		sta $05				sta 	temp0+1
.29fe	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.2a00	b5 49		lda $49,x			lda 	esInt0+1,x
.2a02	d1 04		cmp ($04),y			cmp 	(temp0),y
.2a04	c8		iny				iny
.2a05	b5 51		lda $51,x			lda 	esInt1+1,x
.2a07	f1 04		sbc ($04),y			sbc 	(temp0),y
.2a09	b0 1c		bcs $2a27			bcs 	_AABadIndex 				; if >= then fail.
.2a0b	e8		inx				inx 								; point to index
.2a0c	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.2a0e	b1 04		lda ($04),y			lda 	(temp0),y
.2a10	20 2c 2a	jsr $2a2c			jsr 	MultiplyTOSByA 				; specialist multiplier.
.2a13	ca		dex				dex
.2a14	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.2a16	18		clc				clc
.2a17	b5 49		lda $49,x			lda 	esInt0+1,x
.2a19	71 04		adc ($04),y			adc 	(temp0),y
.2a1b	95 48		sta $48,x			sta 	esInt0,x
.2a1d	b5 51		lda $51,x			lda 	esInt1+1,x
.2a1f	c8		iny				iny
.2a20	71 04		adc ($04),y			adc 	(temp0),y
.2a22	95 50		sta $50,x			sta 	esInt1,x
.2a24	68		pla				pla
.2a25	a8		tay				tay
.2a26	60		rts				rts
.2a27					_AABadIndex:
.2a27	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.2a29	20 9b 23	jsr $239b		jsr	errorHandler
.2a2c					MultiplyTOSByA:
.2a2c	48		pha				pha
.2a2d	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.2a2f	85 06		sta $06				sta 	temp1
.2a31	b5 50		lda $50,x			lda 	esInt1,x
.2a33	85 07		sta $07				sta 	temp1+1
.2a35	68		pla				pla
.2a36	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.2a38	36 50		rol $50,x			rol 	esInt1,x
.2a3a	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.2a3c	f0 17		beq $2a55			beq 	_MTBAExit
.2a3e	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.2a40	d0 0f		bne $2a51			bne 	_MTBANotFloat
.2a42	48		pha				pha
.2a43	18		clc				clc 								; so this will make it x 3
.2a44	b5 48		lda $48,x			lda 	esInt0,x
.2a46	65 06		adc $06				adc 	temp1
.2a48	95 48		sta $48,x			sta 	esInt0,x
.2a4a	b5 50		lda $50,x			lda 	esInt1,x
.2a4c	65 07		adc $07				adc 	temp1+1
.2a4e	95 50		sta $50,x			sta 	esInt1,x
.2a50	68		pla				pla
.2a51					_MTBANotFloat:
.2a51	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.2a53	36 50		rol $50,x			rol 	esInt1,x
.2a55					_MTBAExit:
.2a55	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2a56					CreateVariable:
.2a56	98		tya				tya 								; push Y on the stack twice.
.2a57	48		pha				pha
.2a58	48		pha				pha
.2a59	ae 22 0b	ldx $0b22			ldx 	varType 					; get var type 0-5
.2a5c	bd 67 2a	lda $2a67,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.2a5f	48		pha				pha 								; save length
.2a60	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.2a62	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.2a64	a5 10		lda $10				lda 	lowMemory+1
.2a66	85 05		sta $05				sta 	temp0+1
.2a68	68		pla				pla 								; get length
.2a69	20 73 10	jsr $1073			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2a6c	ad 21 0b	lda $0b21			lda 	varHash 					; store hash at offset 4.
.2a6f	a0 04		ldy #$04			ldy 	#4
.2a71	91 04		sta ($04),y			sta 	(temp0),y
.2a73	68		pla				pla 								; offset, work out where the variable name is.
.2a74	18		clc				clc
.2a75	65 02		adc $02				adc 	codePtr
.2a77	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2a79	91 04		sta ($04),y			sta 	(temp0),y
.2a7b	a5 03		lda $03				lda 	codePtr+1
.2a7d	69 00		adc #$00			adc 	#0
.2a7f	c8		iny				iny
.2a80	91 04		sta ($04),y			sta 	(temp0),y
.2a82	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2a84	b1 7c		lda ($7c),y			lda 	(hashList),y
.2a86	91 04		sta ($04),y			sta 	(temp0),y
.2a88	c8		iny				iny
.2a89	b1 7c		lda ($7c),y			lda 	(hashList),y
.2a8b	91 04		sta ($04),y			sta 	(temp0),y
.2a8d	a5 05		lda $05				lda 	temp0+1 					; set new link
.2a8f	91 7c		sta ($7c),y			sta 	(hashList),y
.2a91	88		dey				dey
.2a92	a5 04		lda $04				lda 	temp0
.2a94	91 7c		sta ($7c),y			sta 	(hashList),y
.2a96	ad 22 0b	lda $0b22			lda 	varType 					; type in A
.2a99	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.2a9b	20 a7 2a	jsr $2aa7			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.2a9e	68		pla				pla
.2a9f	a8		tay				tay
.2aa0	60		rts				rts
>2aa1	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>2aa3	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>2aa5	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.2aa7					ZeroTemp0Y:
.2aa7	4a		lsr a				lsr 	a 							; bit 0 in carry
.2aa8	0a		asl a				asl 	a
.2aa9	b0 19		bcs $2ac4			bcs 	_ZTExit 					; we don't initialise arrays.
.2aab	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.2aad	f0 16		beq $2ac5			beq 	_ZTWriteNullString 			; write "" string
.2aaf	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.2ab1	f0 22		beq $2ad5			beq 	_ZTWriteFloat
.2ab3	98		tya				tya
.2ab4	48		pha				pha
.2ab5	a9 00		lda #$00			lda 	#0
.2ab7	91 04		sta ($04),y			sta 	(temp0),y
.2ab9	c8		iny				iny
.2aba	91 04		sta ($04),y			sta 	(temp0),y
.2abc	c8		iny				iny
.2abd	91 04		sta ($04),y			sta 	(temp0),y
.2abf	c8		iny				iny
.2ac0	91 04		sta ($04),y			sta 	(temp0),y
.2ac2	68		pla				pla
.2ac3	a8		tay				tay
.2ac4					_ZTExit:
.2ac4	60		rts				rts
.2ac5					_ZTWriteNullString:
.2ac5	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.2ac7	8d cc 0a	sta $0acc			sta 	NullString
.2aca	a9 cc		lda #$cc			lda 	#NullString & $FF
.2acc	91 04		sta ($04),y			sta 	(temp0),y
.2ace	a9 0a		lda #$0a			lda 	#NullString >> 8
.2ad0	c8		iny				iny
.2ad1	91 04		sta ($04),y			sta 	(temp0),y
.2ad3	88		dey				dey
.2ad4	60		rts				rts
.2ad5					_ZTWriteFloat:
.2ad5	8a		txa				txa
.2ad6	48		pha				pha
.2ad7	a2 1e		ldx #$1e		ldx	#30
.2ad9	20 8c 26	jsr $268c		jsr	floatingpointHandler
.2adc	68		pla				pla
.2add	aa		tax				tax
.2ade	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.2adf					CreateArray:
.2adf	20 a3 29	jsr $29a3			jsr 	AccessSetup 				; set up the basic stuff.
.2ae2	ad 22 0b	lda $0b22			lda 	varType 					; is the variable type an array
.2ae5	4a		lsr a				lsr 	a
.2ae6	90 3f		bcc $2b27			bcc 	_CANotArray 				; no, cause an error.
.2ae8	20 97 2b	jsr $2b97			jsr 	FindVariable 				; does the variable exist already
.2aeb	b0 35		bcs $2b22			bcs 	_CAFound 					; cannot redefine it.
.2aed	20 56 2a	jsr $2a56			jsr 	CreateVariable 				; create the variable entry.
.2af0	ac 23 0b	ldy $0b23			ldy 	varEnd 						; point Y to the end of the variable entry.
.2af3	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.2af5	48		pha				pha
.2af6	a5 05		lda $05				lda 	temp0+1
.2af8	48		pha				pha
.2af9	ad 22 0b	lda $0b22			lda 	varType 					; push variable type on the stack.
.2afc	48		pha				pha
.2afd	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.2aff	a2 04		ldx #$04		ldx	#4
.2b01	20 d3 22	jsr $22d3		jsr	mainHandler
.2b04	a2 00		ldx #$00		ldx	#0
.2b06	20 d3 22	jsr $22d3		jsr	mainHandler
.2b09	68		pla				pla 		 						; restore type and position.
.2b0a	8d 22 0b	sta $0b22			sta 	varType
.2b0d	68		pla				pla
.2b0e	85 05		sta $05				sta 	temp0+1
.2b10	68		pla				pla
.2b11	85 04		sta $04				sta 	temp0
.2b13	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.2b15	29 e0		and #$e0			and 	#$E0
.2b17	05 58		ora $58				ora 	esInt2
.2b19	05 60		ora $60				ora 	esInt3
.2b1b	f0 0f		beq $2b2c			beq 	_CASizeOk
.2b1d					_CASize:
.2b1d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2b1f	20 9b 23	jsr $239b		jsr	errorHandler
.2b22					_CAFound:
.2b22	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.2b24	20 9b 23	jsr $239b		jsr	errorHandler
.2b27					_CANotArray:
.2b27	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.2b29	20 9b 23	jsr $239b		jsr	errorHandler
.2b2c					_CASizeOk:
.2b2c	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.2b2e	d0 02		bne $2b32			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.2b30	e6 49		inc $49				inc 	esInt0+1
.2b32					_CANoCarry:
.2b32	98		tya				tya
.2b33	48		pha				pha
.2b34	a0 05		ldy #$05			ldy 	#5
.2b36	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.2b38	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.2b3a	c8		iny				iny
.2b3b	a5 10		lda $10				lda 	lowMemory+1
.2b3d	91 04		sta ($04),y			sta 	(temp0),y
.2b3f	c8		iny				iny
.2b40	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.2b42	91 04		sta ($04),y			sta 	(temp0),y
.2b44	c8		iny				iny
.2b45	a5 50		lda $50				lda 	esInt1
.2b47	91 04		sta ($04),y			sta 	(temp0),y
.2b49	c8		iny				iny
.2b4a	ae 22 0b	ldx $0b22			ldx 	varType 					; get the length per element
.2b4d	bd 55 2b	lda $2b55,x			lda 	_CAActualSize-$3A-1,x
.2b50	91 04		sta ($04),y			sta 	(temp0),y
.2b52	aa		tax				tax 								; save size in X
.2b53	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.2b55	85 04		sta $04				sta 	temp0
.2b57	a5 10		lda $10				lda 	lowMemory+1
.2b59	85 05		sta $05				sta 	temp0+1
.2b5b	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.2b5d	85 06		sta $06				sta 	temp1
.2b5f	85 07		sta $07				sta 	temp1+1
.2b61					_CAInitialiseArray:
.2b61	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.2b63	ad 22 0b	lda $0b22			lda 	varType 					; base type of array in A.
.2b66	29 fe		and #$fe			and 	#$FE
.2b68	20 a7 2a	jsr $2aa7			jsr 	ZeroTemp0Y
.2b6b	8a		txa				txa 								; add X to temp0, also updating lowMemory
.2b6c	18		clc				clc
.2b6d	65 04		adc $04				adc 	temp0
.2b6f	85 04		sta $04				sta 	temp0
.2b71	85 0f		sta $0f				sta 	lowMemory
.2b73	a5 05		lda $05				lda 	temp0+1
.2b75	69 00		adc #$00			adc 	#0
.2b77	85 05		sta $05				sta 	temp0+1
.2b79	85 10		sta $10				sta 	lowMemory+1
.2b7b	e6 06		inc $06				inc 	temp1 						; bump the counter.
.2b7d	d0 02		bne $2b81			bne 	_CAIANoCarry
.2b7f	e6 07		inc $07				inc 	temp1+1
.2b81					_CAIANoCarry:
.2b81	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.2b83	c5 06		cmp $06				cmp 	temp1
.2b85	d0 da		bne $2b61			bne 	_CAInitialiseArray
.2b87	a5 50		lda $50				lda 	esInt1
.2b89	c5 07		cmp $07				cmp 	temp1+1
.2b8b	d0 d4		bne $2b61			bne 	_CAInitialiseArray
.2b8d	68		pla				pla
.2b8e	a8		tay				tay
.2b8f	60		rts				rts
.2b90					_CAActualSize:
>2b90	04 00						.byte 	VarISize,0
>2b92	02 00						.byte 	VarSSize,0
>2b94	06 00						.byte 	VarFSize,0
>2b96	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2b97					FindVariable:
.2b97	98		tya				tya
.2b98	48		pha				pha
.2b99	98		tya				tya 								; point temp2 to the actual name.
.2b9a	18		clc				clc
.2b9b	65 02		adc $02				adc 	codePtr
.2b9d	85 08		sta $08				sta 	temp2
.2b9f	a5 03		lda $03				lda 	codePtr+1
.2ba1	69 00		adc #$00			adc 	#0
.2ba3	85 09		sta $09				sta 	temp2+1
.2ba5	a0 00		ldy #$00			ldy 	#0
.2ba7	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.2ba9	85 04		sta $04				sta 	temp0
.2bab	a5 7d		lda $7d				lda 	hashList+1
.2bad	85 05		sta $05				sta 	temp0+1
.2baf	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2bb1	b1 04		lda ($04),y			lda 	(temp0),y
.2bb3	f0 2c		beq $2be1			beq 	_FVFail
.2bb5	aa		tax				tax
.2bb6	88		dey				dey		 							; get LSB
.2bb7	b1 04		lda ($04),y			lda 	(temp0),y
.2bb9	85 04		sta $04				sta 	temp0 						; update pointer.
.2bbb	86 05		stx $05				stx 	temp0+1
.2bbd	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2bbf	b1 04		lda ($04),y			lda 	(temp0),y
.2bc1	cd 21 0b	cmp $0b21			cmp 	varHash
.2bc4	d0 e9		bne $2baf			bne 	_FVNext 					; if not, no point in checking the name.
.2bc6	88		dey				dey 								; copy name pointer to temp1.
.2bc7	b1 04		lda ($04),y			lda 	(temp0),y
.2bc9	85 07		sta $07				sta 	temp1+1
.2bcb	88		dey				dey
.2bcc	b1 04		lda ($04),y			lda 	(temp0),y
.2bce	85 06		sta $06				sta 	temp1
.2bd0	a0 00		ldy #$00			ldy 	#0
.2bd2					_FVCheck:
.2bd2	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2bd4	d1 08		cmp ($08),y			cmp 	(temp2),y
.2bd6	d0 d7		bne $2baf			bne 	_FVNext		 				; fail if different.
.2bd8	c8		iny				iny
.2bd9	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2bdb	90 f5		bcc $2bd2			bcc 	_FVCheck
.2bdd	68		pla				pla
.2bde	a8		tay				tay
.2bdf	38		sec				sec
.2be0	60		rts				rts
.2be1					_FVFail:
.2be1	68		pla				pla
.2be2	a8		tay				tay
.2be3	18		clc				clc
.2be4	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2be5					HashTableReset:
.2be5	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2be7	a9 00		lda #$00			lda 	#0
.2be9					_HTRClear:
.2be9	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2bec	ca		dex				dex
.2bed	d0 fa		bne $2be9			bne 	_HTRClear
.2bef	60		rts				rts

;******  Return to file: variable/variable.asm

.2bf0					variableHandler:
.2bf0	7c f3 2b	jmp ($2bf3,x)			jmp 	(variableVectors,x)
.2bf3					variableVectors:
>2bf3	3c 29					.word AccessVariable       ; index 0
>2bf5	df 2a					.word CreateArray          ; index 2
>2bf7	e5 2b					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.2bf9					section_end_variable:

;******  End of listing
