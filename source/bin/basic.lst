
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Thu Mar  4 05:37:12 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc


;******  Processing file: main/../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempShort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_BadIndex = 18 ; Bad NEXT index
=19					ErrorID_Struct = 19 ; Structures nested wrong
=20					ErrorID_NoAuto = 20 ; Cannot create variable
=21					ErrorID_RetStack = 21 ; Return stack out of space.
=22					ErrorID_NoProc = 22 ; Unknown Procedure

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 28 12	jmp $1228			jmp 	Command_Run
.23ca					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	0b 0a 00 18 18 3a 8d 47			.byte 11,10,0,24,24,58,141,71,127,127,128,10,11,0,203,24,15,50,59,196,128,8,12,0,153,197,158,171,128,10,13,0,157,4,15,49,59,196,128,11,14,0,157,4,5,13,15,59,196,128,10,15,0,157,24,15,50,59,196,128,0
>5008	7f 7f 80 0a 0b 00 cb 18 0f 32 3b c4 80 08 0c 00
>5018	99 c5 9e ab 80 0a 0d 00 9d 04 0f 31 3b c4 80 0b
>5028	0e 00 9d 04 05 0d 0f 3b c4 80 0a 0f 00 9d 18 0f
>5038	32 3b c4 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 d0 18	jsr $18d0			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 f0 1e	jsr $1ef0			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0d		sta $0d				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0e		sta $0e				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0f		sta $0f				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 10		sta $10				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 56 1f	jsr $1f56			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 c3 23	jsr $23c3		jsr	variableHandler
.1065	20 db 13	jsr $13db			jsr 	ScanProc 					; scan for procedures
.1068	68		pla				pla
.1069	a8		tay				tay
.106a	60		rts				rts
.106b					AdvanceLowMemoryByte:
.106b	18		clc				clc
.106c	65 0f		adc $0f				adc 	lowMemory
.106e	85 0f		sta $0f				sta 	lowMemory
.1070	90 02		bcc $1074			bcc 	_ALMBExit
.1072	e6 10		inc $10				inc 	lowMemory+1
.1074					_ALMBExit:
.1074	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.23ca					Command_FOR:
.23ca	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.23cc	a2 0b		ldx #$0b			ldx 	#11
.23ce	20 64 1f	jsr $1f64			jsr 	RSClaim
.23d1	20 b1 10	jsr $10b1			jsr 	CommandLET 					; do the same as LET.
.23d4	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.23d6	c9 80		cmp #$80			cmp 	#$80
.23d8	d0 4c		bne $2426			bne 	_CFType
.23da	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.23dc	20 31 1f	jsr $1f31			jsr 	CheckToken
.23df	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.23e1	20 d2 18	jsr $18d2			jsr 	EvaluateInteger				; get terminal value in stack 1
.23e4	98		tya				tya
.23e5	48		pha				pha
.23e6	a0 04		ldy #$04			ldy 	#4
.23e8	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.23ea	91 78		sta ($78),y			sta 	(rsPointer),y
.23ec	c8		iny				iny
.23ed	a5 50		lda $50				lda		esInt1
.23ef	91 78		sta ($78),y			sta 	(rsPointer),y
.23f1	c8		iny				iny
.23f2	a9 01		lda #$01			lda 	#1  						; the default step in 6
.23f4	91 78		sta ($78),y			sta 	(rsPointer),y
.23f6	c8		iny				iny
.23f7	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.23f9	91 78		sta ($78),y			sta 	(rsPointer),y
.23fb	c8		iny				iny
.23fc	a5 51		lda $51				lda		esInt1+1
.23fe	91 78		sta ($78),y			sta 	(rsPointer),y
.2400	c8		iny				iny
.2401	a5 59		lda $59				lda		esInt2+1
.2403	91 78		sta ($78),y			sta 	(rsPointer),y
.2405	c8		iny				iny
.2406	a5 61		lda $61				lda		esInt3+1
.2408	91 78		sta ($78),y			sta 	(rsPointer),y
.240a	68		pla				pla
.240b	a8		tay				tay
.240c	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.240e	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.2410	d0 0e		bne $2420			bne 	_CFDone
.2412	c8		iny				iny									; skip over step.
.2413	20 d2 18	jsr $18d2			jsr 	EvaluateInteger 			; get step
.2416	98		tya				tya
.2417	48		pha				pha
.2418	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.241a	a0 06		ldy #$06			ldy 	#6
.241c	91 78		sta ($78),y			sta 	(rsPointer),y
.241e	68		pla				pla
.241f	a8		tay				tay
.2420					_CFDone:
.2420	a9 01		lda #$01			lda 	#1
.2422	20 90 1f	jsr $1f90			jsr 	RSSavePosition 				; save position.
.2425	60		rts				rts
.2426					_CFType:
.2426	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2428	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.242b					Command_NEXT:
.242b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.242d	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.242f	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2431	f0 05		beq $2438			beq 	_isok
.2433	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2435	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.2438					_isok:
.2438	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.243a	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.243c	b0 18		bcs $2456			bcs 	_CNNoIndex
.243e	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2440	20 ff 18	jsr $18ff			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2443	98		tya				tya
.2444	48		pha				pha
.2445	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2447	b1 78		lda ($78),y			lda 	(rsPointer),y
.2449	d5 48		cmp $48,x			cmp 	esInt0,x
.244b	d0 76		bne $24c3			bne 	_CNBadIndex
.244d	c8		iny				iny
.244e	b1 78		lda ($78),y			lda 	(rsPointer),y
.2450	d5 50		cmp $50,x			cmp 	esInt1,x
.2452	d0 6f		bne $24c3			bne 	_CNBadIndex
.2454	68		pla				pla
.2455	a8		tay				tay
.2456					_CNNoIndex:
.2456	98		tya				tya
.2457	48		pha				pha
.2458	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.245a	b1 78		lda ($78),y			lda 	(rsPointer),y
.245c	85 04		sta $04				sta 	temp0
.245e	c8		iny				iny
.245f	b1 78		lda ($78),y			lda 	(rsPointer),y
.2461	85 05		sta $05				sta 	temp0+1
.2463	c8		iny				iny
.2464	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2466	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2468	85 09		sta $09				sta 	temp2+1 					; save for later.
.246a	10 01		bpl $246d			bpl 	_CNSignX
.246c	ca		dex				dex  								; X = $FF
.246d					_CNSignX:
.246d	18		clc				clc 								; add to the LSB
.246e	a0 00		ldy #$00			ldy 	#0
.2470	71 04		adc ($04),y			adc 	(temp0),y
.2472	91 04		sta ($04),y			sta 	(temp0),y
.2474					_CNPropogate:
.2474	c8		iny				iny  								; add the sign extended in X to the rest.
.2475	8a		txa				txa
.2476	71 04		adc ($04),y			adc 	(temp0),y
.2478	91 04		sta ($04),y			sta 	(temp0),y
.247a	c8		iny				iny
.247b	8a		txa				txa
.247c	71 04		adc ($04),y			adc 	(temp0),y
.247e	91 04		sta ($04),y			sta 	(temp0),y
.2480	c8		iny				iny
.2481	8a		txa				txa
.2482	71 04		adc ($04),y			adc 	(temp0),y
.2484	91 04		sta ($04),y			sta 	(temp0),y
.2486	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2487	a5 78		lda $78				lda 	rsPointer
.2489	69 07		adc #$07			adc 	#7
.248b	85 06		sta $06				sta 	temp1
.248d	a9 00		lda #$00			lda 	#0
.248f	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2491	a8		tay				tay 								; and clear the Y register again.
.2492	65 79		adc $79				adc 	rsPointer+1
.2494	85 07		sta $07				sta 	temp1+1
.2496	38		sec				sec 								; calculate current - limit oring interim values.
.2497	20 cf 24	jsr $24cf			jsr 	_CNCompare
.249a	20 cf 24	jsr $24cf			jsr 	_CNCompare
.249d	20 cf 24	jsr $24cf			jsr 	_CNCompare
.24a0	20 cf 24	jsr $24cf			jsr 	_CNCompare
.24a3	50 02		bvc $24a7			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.24a5	49 80		eor #$80			eor 	#$80
.24a7					_CNNoOverflow:
.24a7	a4 09		ldy $09				ldy 	temp2+1						; get step back
.24a9	30 1d		bmi $24c8			bmi 	_CNCheckDownto
.24ab	c9 00		cmp #$00			cmp 	#0
.24ad	30 0c		bmi $24bb			bmi 	_CNLoopRound 				; loop round if < =
.24af	a5 08		lda $08				lda 	temp2
.24b1	f0 08		beq $24bb			beq 	_CNLoopRound
.24b3					_CNLoopExit:
.24b3	68		pla				pla
.24b4	a8		tay				tay
.24b5	a9 0b		lda #$0b			lda 	#11
.24b7	20 86 1f	jsr $1f86			jsr 	RSFree
.24ba	60		rts				rts
.24bb					_CNLoopRound:
.24bb	68		pla				pla
.24bc	a8		tay				tay
.24bd	a9 01		lda #$01			lda 	#1
.24bf	20 a3 1f	jsr $1fa3			jsr 	RSLoadPosition				; go back to the loop top
.24c2	60		rts				rts
.24c3					_CNBadIndex:
.24c3	a2 12		ldx #$12			ldx 	#ErrorID_BadIndex
.24c5	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.24c8					_CNCheckDownto:
.24c8	c9 00		cmp #$00			cmp 	#0
.24ca	10 ef		bpl $24bb			bpl 	_CNLoopRound
.24cc	4c b3 24	jmp $24b3			jmp 	_CNLoopExit
.24cf					_CNCompare:
.24cf	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.24d1	f1 06		sbc ($06),y			sbc 	(temp1),y
.24d3	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.24d5	85 08		sta $08				sta 	temp2
.24d7	c8		iny				iny
.24d8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1075					CommandIf:
.1075	20 d0 18	jsr $18d0			jsr 	EvaluateRootInteger 		; if what ?
.1078	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.107c	f0 04		beq $1082			beq 	_IfSimple
.107e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1080	d0 1b		bne $109d			bne 	_IfComplex
.1082					_IfSimple:
.1082	20 f0 1e	jsr $1ef0			jsr 	MInt32Zero					; check if TOS zero
.1085	f0 10		beq $1097			beq 	_IfEOL 						; go to next line.
.1087	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1089	c8		iny				iny
.108a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108c	f0 0c		beq $109a			beq 	_IfGoto 					; do the Goto code
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1090	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1092	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1094	f0 04		beq $109a			beq 	_IfGoto
.1096	60		rts				rts 								; else continue on this line.
.1097					_IfEOL:
.1097	4c 4f 14	jmp $144f			jmp 	AdvanceNextLine 			; go to next line
.109a					_IfGoto:
.109a	4c 8e 14	jmp $148e			jmp 	CommandGoto
.109d					_IfComplex:
.109d	20 f0 1e	jsr $1ef0			jsr 	MInt32Zero 					; is it true ?
.10a0	f0 01		beq $10a3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a2	60		rts				rts 								; else continue.
.10a3					_IFSkip:
.10a3	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a7	4c 42 25	jmp $2542			jmp		ScanForward
.10aa					Command_ELSE:
.10aa	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ac	8a		txa				txa
.10ad	4c 42 25	jmp $2542			jmp		ScanForward
.10b0					Command_ENDIF:
.10b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b1					CommandLet:
.10b1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b3	20 ff 18	jsr $18ff			jsr 	EvaluateReference
.10b6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b8	20 31 1f	jsr $1f31			jsr 	CheckToken
.10bb	e8		inx				inx 								; do RHS
.10bc	20 b3 18	jsr $18b3			jsr 	Evaluate 					; evaluate and derefernce
.10bf	ca		dex				dex
.10c0	20 c4 10	jsr $10c4			jsr 	WriteValue 					; write it out
.10c3	60		rts				rts
.10c4					WriteValue:
.10c4	98		tya				tya
.10c5	48		pha				pha
.10c6	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c9	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cb	55 41		eor $41,x			eor 	esType+1,x
.10cd	29 40		and #$40			and 	#$40
.10cf	d0 50		bne $1121			bne		_WVType
.10d1	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d3	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d5	29 40		and #$40			and 	#$40
.10d7	d0 1f		bne $10f8			bne 	_WVCopyString
.10d9	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10db	15 41		ora $41,x			ora 	esType+1,x
.10dd	4a		lsr a				lsr 	a
.10de	90 22		bcc $1102			bcc 	_WVCopyData4
.10e0	b5 40		lda $40,x			lda 	esType,x
.10e2	4a		lsr a				lsr 	a
.10e3	90 3c		bcc $1121			bcc 	_WVType
.10e5	e8		inx				inx 								; force the value being written to be a float.
.10e6	20 00 15	jsr $1500			jsr 	BPMakeFloat
.10e9	ca		dex				dex
.10ea	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ed	e8		inx				inx
.10ee	8a		txa				txa
.10ef	a2 1e		ldx #$1e		ldx	#30
.10f1	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.10f4	aa		tax				tax
.10f5	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.10f8					_WVCopyString:
.10f8	8a		txa				txa
.10f9	a2 0a		ldx #$0a		ldx	#10
.10fb	20 55 22	jsr $2255		jsr	stringHandler
.10fe	aa		tax				tax
.10ff	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.1102					_WVCopyData4:
.1102	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1104	29 20		and #$20			and 	#$20
.1106	d0 10		bne $1118			bne 	_WVCopyData1
.1108	a0 03		ldy #$03			ldy 	#3
.110a	b5 61		lda $61,x			lda 	esInt3+1,x
.110c	91 04		sta ($04),y			sta 	(temp0),y
.110e	88		dey				dey
.110f	b5 59		lda $59,x			lda 	esInt2+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113	88		dey				dey
.1114	b5 51		lda $51,x			lda 	esInt1+1,x
.1116	91 04		sta ($04),y			sta 	(temp0),y
.1118					_WVCopyData1:
.1118	a0 00		ldy #$00			ldy 	#0
.111a	b5 49		lda $49,x			lda 	esInt0+1,x
.111c	91 04		sta ($04),y			sta 	(temp0),y
.111e					_WVCopyExit:
.111e	68		pla				pla
.111f	a8		tay				tay
.1120	60		rts				rts
.1121					_WVType:
.1121	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1123	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1126					TOSToTemp0:
.1126	b5 48		lda $48,x			lda 	esInt0,x
.1128	85 04		sta $04				sta 	temp0
.112a	b5 50		lda $50,x			lda 	esInt1,x
.112c	85 05		sta $05				sta 	temp0+1
.112e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.112f					Command_New:
.112f	20 8a 12	jsr $128a			jsr 	ResetCodeAddress 			; point to first line
.1132	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1134	98		tya				tya
.1135	91 02		sta ($02),y			sta 	(codePtr),y
.1137	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.113a	4c 4c 14	jmp $144c			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.113d					Command_Poke:
.113d	a9 01		lda #$01			lda 	#1
.113f	d0 06		bne $1147			bne 	PokeGeneral
.1141					Command_Doke:
.1141	a9 02		lda #$02			lda 	#2
.1143	d0 02		bne $1147			bne 	PokeGeneral
.1145					Command_Loke:
.1145	a9 03		lda #$03			lda 	#3
.1147					PokeGeneral:
.1147	48		pha				pha 								; save size
.1148	20 d0 18	jsr $18d0			jsr 	EvaluateRootInteger 		; target address
.114b	20 49 1f	jsr $1f49			jsr	 	CheckComma
.114e	e8		inx				inx
.114f	20 d2 18	jsr $18d2			jsr 	EvaluateInteger 			; what value to POKE ?
.1152	ca		dex				dex
.1153	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; temp0 points to the target address
.1156	84 0c		sty $0c				sty 	tempShort 					; save Y
.1158	68		pla				pla 								; get copy type and dispatch
.1159	aa		tax				tax
.115a	ca		dex				dex
.115b	f0 14		beq $1171			beq 	_Poke1
.115d	ca		dex				dex
.115e	f0 0b		beq $116b			beq 	_Poke2
.1160	a0 03		ldy #$03			ldy 	#3
.1162	a5 61		lda $61				lda 	esInt3+1
.1164	91 04		sta ($04),y			sta 	(temp0),y
.1166	88		dey				dey
.1167	a5 59		lda $59				lda 	esInt2+1
.1169	91 04		sta ($04),y			sta 	(temp0),y
.116b					_Poke2:
.116b	a0 01		ldy #$01			ldy 	#1
.116d	a5 51		lda $51				lda 	esInt1+1
.116f	91 04		sta ($04),y			sta 	(temp0),y
.1171					_Poke1:
.1171	a0 00		ldy #$00			ldy 	#0
.1173	a5 49		lda $49				lda 	esInt0+1
.1175	91 04		sta ($04),y			sta 	(temp0),y
.1177	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1179	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af0					lastPrintToken:
>0af0							.fill 	1
.117a					Command_Print:
.117a	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.117c	8d f0 0a	sta $0af0			sta 	lastPrintToken
.117f	88		dey				dey
.1180					_PrintLoopSkip:
.1180	c8		iny				iny
.1181					_PrintLoop:
.1181	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1183	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1185	f0 5b		beq $11e2			beq 	_PrintExit
.1187	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.1189	f0 57		beq $11e2			beq 	_PrintExit
.118b	8d f0 0a	sta $0af0			sta 	lastPrintToken 				; update LPT
.118e	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1190	f0 ee		beq $1180			beq 	_PrintLoopSkip
.1192	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1194	f0 3c		beq $11d2			beq	 	_PrintNewLine
.1196	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.1198	f0 40		beq $11da			beq 	_PrintTab
.119a	20 b1 18	jsr $18b1			jsr 	EvaluateRoot 				; evaluate something at the root
.119d	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.119f	85 04		sta $04				sta 	temp0
.11a1	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11a3	85 05		sta $05				sta 	1+(temp0)
.11a5	a5 40		lda $40				lda 	esType 						; get type
.11a7	f0 15		beq $11be			beq		_PrintInteger
.11a9	4a		lsr a				lsr 	a 							; check for floating point
.11aa	b0 08		bcs $11b4			bcs 	_PrintFloat
.11ac					_PrintString:
.11ac	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11ae	20 26 11	jsr $1126			jsr 	TOSToTemp0
.11b1	4c cc 11	jmp $11cc			jmp 	_PrintTemp0 				; print no leading space.
.11b4					_PrintFloat:
.11b4	a9 00		lda #$00			lda 	#0 							; stack level.
.11b6	a2 14		ldx #$14		ldx	#20
.11b8	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.11bb	4c c5 11	jmp $11c5			jmp 	_PrintSpaceTemp0
.11be					_PrintInteger:
.11be	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11c0	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11c2	20 1f 1e	jsr $1e1f			jsr 	MInt32ToString				; convert to text
.11c5					_PrintSpaceTemp0:
.11c5	a9 20		lda #$20			lda 	#32
.11c7	a2 04		ldx #$04		ldx	#4
.11c9	20 ea 1f	jsr $1fea		jsr	deviceHandler
.11cc					_PrintTemp0:
.11cc	20 f3 11	jsr $11f3			jsr 	PrintString
.11cf	4c 81 11	jmp $1181			jmp 	_PrintLoop
.11d2					_PrintNewLine:
.11d2	a2 00		ldx #$00		ldx	#0
.11d4	20 ea 1f	jsr $1fea		jsr	deviceHandler
.11d7	4c 80 11	jmp $1180			jmp 	_PrintLoopSkip
.11da					_PrintTab:
.11da	a2 06		ldx #$06		ldx	#6
.11dc	20 ea 1f	jsr $1fea		jsr	deviceHandler
.11df	4c 80 11	jmp $1180			jmp 	_PrintLoopSkip
.11e2					_PrintExit:
.11e2	ad f0 0a	lda $0af0			lda		lastPrintToken 				; check last token
.11e5	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11e7	f0 09		beq $11f2			beq 	_PrintExit2
.11e9	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.11eb	f0 05		beq $11f2			beq 	_PrintExit2
.11ed	a2 00		ldx #$00		ldx	#0
.11ef	20 ea 1f	jsr $1fea		jsr	deviceHandler
.11f2					_PrintExit2:
.11f2	60		rts				rts
.11f3					PrintString:
.11f3	8a		txa				txa
.11f4	48		pha				pha
.11f5	98		tya				tya
.11f6	48		pha				pha
.11f7	a0 00		ldy #$00			ldy 	#0							; get length
.11f9	b1 04		lda ($04),y			lda 	(temp0),y
.11fb	aa		tax				tax 								; into X
.11fc	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.11fe	f0 10		beq $1210			beq 	_PSExit
.1200	ca		dex				dex
.1201	8a		txa				txa
.1202	48		pha				pha
.1203	c8		iny				iny
.1204	b1 04		lda ($04),y			lda 	(temp0),y
.1206	a2 04		ldx #$04		ldx	#4
.1208	20 ea 1f	jsr $1fea		jsr	deviceHandler
.120b	68		pla				pla
.120c	aa		tax				tax
.120d	4c fc 11	jmp $11fc			jmp 	_PSLoop
.1210					_PSExit:
.1210	68		pla				pla
.1211	a8		tay				tay
.1212	68		pla				pla
.1213	aa		tax				tax
.1214	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.1215					CallProc:
.1215	20 6f 13	jsr $136f			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
>1218	db						.byte 	$DB
>1219	db						.byte 	$DB
>121a	db						.byte 	$DB

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.121b					Command_Rem:
.121b					Command_Rem2:
.121b	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.121d	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.121f	d0 06		bne $1227			bne 	_CRNotString
.1221	c8		iny				iny
.1222	98		tya				tya
.1223	38		sec				sec
.1224	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1226	a8		tay				tay
.1227					_CRNotString:
.1227	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.24d9					Command_Repeat:
.24d9	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.24db	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.24dd	20 64 1f	jsr $1f64			jsr 	RSClaim
.24e0	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.24e2	20 90 1f	jsr $1f90			jsr 	RSSavePosition
.24e5	60		rts				rts
.24e6					Command_Until:
.24e6	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.24e8	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.24ea	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.24ec	f0 05		beq $24f3			beq 	_isok
.24ee	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.24f0	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.24f3					_isok:
.24f3	20 d0 18	jsr $18d0			jsr 	EvaluateRootInteger 		; at the bottom.
.24f6	20 f0 1e	jsr $1ef0			jsr 	MInt32Zero					; check if TOS zero
.24f9	d0 06		bne $2501			bne 	_CUExit
.24fb	a9 01		lda #$01			lda 	#1
.24fd	20 a3 1f	jsr $1fa3			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2500	60		rts				rts
.2501					_CUExit:
.2501	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2503	20 86 1f	jsr $1f86			jsr 	RSFree
.2506	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.1228					Command_Run:
.1228	a2 ff		ldx #$ff			ldx 	#$FF
.122a	9a		txs				txs
.122b	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.122e	20 8a 12	jsr $128a			jsr 	ResetCodeAddress 			; back to the start.
.1231	a0 03		ldy #$03			ldy 	#3
.1233					CRNextInstruction:
.1233	64 7b		stz $7b				stz 	softMemAlloc+1
.1235	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1237	10 1c		bpl $1255			bpl 	_CRNotToken
.1239	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.123b	b0 0c		bcs $1249			bcs 	_CRExecute
.123d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.123f	b0 56		bcs $1297			bcs 	Unimplemented
.1241	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1243	b0 04		bcs $1249			bcs 	_CRExecute
.1245	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1247	b0 16		bcs $125f			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1249					_CRExecute:
.1249	c8		iny				iny 								; consume it.
.124a	0a		asl a				asl 	a 							; double it, losing most significant bit.
.124b	aa		tax				tax
.124c	20 52 12	jsr $1252			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.124f	4c 33 12	jmp $1233			jmp 	CRNextInstruction
.1252					_CRRunRoutine:
.1252	7c a1 12	jmp ($12a1,x)			jmp 	(Group0Vectors,x)
.1255					_CRNotToken:
.1255	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1257	b0 3e		bcs $1297			bcs 	Unimplemented
.1259					_CRDefaultLet:
.1259	20 b1 10	jsr $10b1			jsr 	CommandLet 					; do the default, LET
.125c	4c 33 12	jmp $1233			jmp 	CRNextInstruction
.125f					_CRCheckIndirect:
.125f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1261	f0 f6		beq $1259			beq 	_CRDefaultLet
.1263	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1265	f0 f2		beq $1259			beq 	_CRDefaultLet
.1267	d0 2e		bne $1297			bne 	Unimplemented
.1269					CommandShift1:
.1269	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.126b	10 2a		bpl $1297			bpl 	Unimplemented 				; we have an error as this should not happen.
.126d	0a		asl a				asl 	a 							; double into X
.126e	aa		tax				tax
.126f	c8		iny				iny 								; advance over it.
.1270	20 76 12	jsr $1276			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1273	4c 33 12	jmp $1233			jmp 	CRNextInstruction
.1276					_RunIt:
.1276	7c 4d 13	jmp ($134d,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.1279					CommandShift2:
.1279	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.127b	10 1a		bpl $1297			bpl 	Unimplemented 				; we have an error as this should not happen.
.127d	0a		asl a				asl 	a 							; double into X
.127e	aa		tax				tax
.127f	c8		iny				iny 								; advance over it.
.1280	20 86 12	jsr $1286			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1283	4c 33 12	jmp $1233			jmp 	CRNextInstruction
.1286					_RunIt:
.1286	7c 61 13	jmp ($1361,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.1289					CommandColon:
.1289	60		rts				rts
.128a					ResetCodeAddress:
.128a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.128d	85 02		sta $02				sta 	codePtr
.128f	ad c9 0a	lda $0ac9			lda 	basePage+1
.1292	85 03		sta $03				sta 	codePtr+1
.1294	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1296	60		rts				rts
.1297					Unimplemented:
.1297	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1299	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.129c					TKErr01:
.129c					TKErr02:
.129c					TKErr03:
.129c					TKErr04:
.129c					TKErr05:
.129c					TKErr06:
.129c					TKErr07:
.129c					TKErr08:
.129c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.129e	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.12a1					Group0Vectors:
>12a1	4f 14					.word	AdvanceNextLine          ; $80 [[eol]]
>12a3	69 12					.word	CommandShift1            ; $81 [[sh1]]
>12a5	79 12					.word	CommandShift2            ; $82 [[sh2]]
>12a7	97 12					.word	Unimplemented            ; $83 [[sh3]]
>12a9	97 12					.word	Unimplemented            ; $84 [[fpc]]
>12ab	9c 12					.word	TKErr08                  ; $85 [[str]]
>12ad	a2 15					.word	AndHandler               ; $86 and
>12af	8f 15					.word	OrHandler                ; $87 or
>12b1	7c 15					.word	XorHandler               ; $88 xor
>12b3	c4 16					.word	CompareGreaterEq         ; $89 >=
>12b5	ce 16					.word	CompareLessEq            ; $8a <=
>12b7	b0 16					.word	CompareGreater           ; $8b >
>12b9	a6 16					.word	CompareLess              ; $8c <
>12bb	9c 16					.word	CompareEquals            ; $8d =
>12bd	ba 16					.word	CompareNotEquals         ; $8e <>
>12bf	0d 15					.word	AddHandler               ; $8f +
>12c1	30 15					.word	SubHandler               ; $90 -
>12c3	c8 15					.word	ShrHandler               ; $91 >>
>12c5	b5 15					.word	ShlHandler               ; $92 <<
>12c7	43 15					.word	MulHandler               ; $93 *
>12c9	56 15					.word	DivHandler               ; $94 /
>12cb	69 15					.word	ModHandler               ; $95 mod
>12cd	01 16					.word	PowerHandler             ; $96 ^
>12cf	db 15					.word	WordRefHandler           ; $97 !
>12d1	ee 15					.word	ByteRefHandler           ; $98 ?
>12d3	d9 24					.word	Command_Repeat           ; $99 repeat
>12d5	07 25					.word	Command_While            ; $9a while
>12d7	ca 23					.word	Command_FOR              ; $9b for
>12d9	75 10					.word	CommandIf                ; $9c if
>12db	9c 12					.word	TKErr04                  ; $9d defproc
>12dd	e6 24					.word	Command_Until            ; $9e until
>12df	2a 25					.word	Command_Wend             ; $9f wend
>12e1	2b 24					.word	Command_NEXT             ; $a0 next
>12e3	9c 12					.word	TKErr06                  ; $a1 then
>12e5	b0 10					.word	Command_ENDIF            ; $a2 endif
>12e7	97 12					.word	Unimplemented            ; $a3 endproc
>12e9	89 18					.word	UnaryParenthesis         ; $a4 (
>12eb	db 19					.word	UnaryLen                 ; $a5 len(
>12ed	1f 1a					.word	UnarySgn                 ; $a6 sgn(
>12ef	08 1a					.word	UnaryAbs                 ; $a7 abs(
>12f1	78 1a					.word	Unary_Random             ; $a8 random(
>12f3	c2 1a					.word	Unary_Page               ; $a9 page
>12f5	c5 1e					.word	MInt32True               ; $aa true
>12f7	c9 1e					.word	MInt32False              ; $ab false
>12f9	8d 1a					.word	Unary_Min                ; $ac min(
>12fb	91 1a					.word	Unary_Max                ; $ad max(
>12fd	78 1b					.word	UnarySys                 ; $ae sys(
>12ff	3b 1b					.word	UnaryTimer               ; $af timer(
>1301	5e 19					.word	EventFunction            ; $b0 event(
>1303	64 1b					.word	UnaryGet                 ; $b1 get(
>1305	54 1b					.word	UnaryInkey               ; $b2 inkey(
>1307	0f 1b					.word	UnaryAlloc               ; $b3 alloc(
>1309	a0 1b					.word	ExecChr                  ; $b4 chr$(
>130b	b4 1b					.word	ExecLeft                 ; $b5 left$(
>130d	d1 1b					.word	ExecMid                  ; $b6 mid$(
>130f	f9 1b					.word	ExecRight                ; $b7 right$(
>1311	de 16					.word	Event_Str                ; $b8 str$(
>1313	0d 17					.word	UnaryVal                 ; $b9 val(
>1315	36 1a					.word	UnaryPeek                ; $ba peek(
>1317	3c 1a					.word	UnaryDeek                ; $bb deek(
>1319	42 1a					.word	UnaryLeek                ; $bc leek(
>131b	f9 19					.word	UnaryAsc                 ; $bd asc(
>131d	ed 1a					.word	UnaryIntToFloat          ; $be int(
>131f	00 1b					.word	UnaryFloatToInt          ; $bf float(
>1321	10 17					.word	UnaryIsVal               ; $c0 isval(
>1323	d0 1a					.word	UnaryReference           ; $c1 @
>1325	e6 1a					.word	UnaryComplement          ; $c2 ~
>1327	e3 1a					.word	UnaryHexMarker           ; $c3 &
>1329	9c 12					.word	TKErr01                  ; $c4 )
>132b	89 12					.word	CommandColon             ; $c5 :
>132d	9c 12					.word	TKErr02                  ; $c6 ,
>132f	9c 12					.word	TKErr03                  ; $c7 ;
>1331	1b 12					.word	Command_Rem2             ; $c8 '
>1333	9c 12					.word	TKErr07                  ; $c9 to
>1335	9c 12					.word	TKErr05                  ; $ca step
>1337	15 12					.word	CallProc                 ; $cb proc
>1339	97 12					.word	Unimplemented            ; $cc local
>133b	97 12					.word	Unimplemented            ; $cd dim
>133d	1b 12					.word	Command_Rem              ; $ce rem
>133f	b1 10					.word	CommandLet               ; $cf let
>1341	97 12					.word	Unimplemented            ; $d0 input
>1343	aa 10					.word	Command_ELSE             ; $d1 else
>1345	c0 14					.word	Command_VDU              ; $d2 vdu
>1347	7a 11					.word	Command_Print            ; $d3 print
>1349	8e 14					.word	CommandGOTO              ; $d4 goto
>134b	63 14					.word	CommandGOSUB             ; $d5 gosub
>134d	76 14					.word	CommandRETURN            ; $d6 return
>134f	97 12					.word	Unimplemented            ; $d7 data
>1351	1a 10					.word	Command_Assert           ; $d8 assert
>1353	3d 11					.word	Command_Poke             ; $d9 poke
>1355	41 11					.word	Command_Doke             ; $da doke
>1357	45 11					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1359					Group1Vectors:
>1359	28 10					.word	CommandClear             ; $86 clear
>135b	97 12					.word	Unimplemented            ; $87 load
>135d	97 12					.word	Unimplemented            ; $88 save
>135f	97 12					.word	Unimplemented            ; $89 list
>1361	2f 11					.word	Command_New              ; $8a new
>1363	28 12					.word	Command_Run              ; $8b run
>1365	97 12					.word	Unimplemented            ; $8c read
>1367	97 12					.word	Unimplemented            ; $8d restore
>1369	4c 14					.word	CommandEnd               ; $8e end
>136b	47 14					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.136d					Group2Vectors:
>136d	97 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af1					procList:
>0af1							.fill 	2		 					; terminated by name high.
.0af3					yInLine:
>0af3							.fill 	1
.136f					FindProcedure:
.136f	8c f3 0a	sty $0af3			sty 	yInLine
.1372	20 2d 14	jsr $142d			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1375	85 06		sta $06				sta 	temp1
.1377	ad f1 0a	lda $0af1			lda		procList 					; put procList address in temp2
.137a	85 08		sta $08				sta 	temp2
.137c	ad f2 0a	lda $0af2			lda 	procList+1
.137f	85 09		sta $09				sta 	temp2+1
.1381	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1383					_FPLoop:
.1383	b1 08		lda ($08),y			lda 	(temp2),y
.1385	f0 4f		beq $13d6			beq 	_FPError 					; if so, we don't know this procedure.
.1387	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1389	c8		iny				iny
.138a	b1 08		lda ($08),y			lda 	(temp2),y
.138c	85 04		sta $04				sta 	temp0
.138e	c8		iny				iny
.138f	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1391	c5 06		cmp $06				cmp 	temp1
.1393	d0 2b		bne $13c0			bne 	_FPNext 					; hash is different, go to next.
.1395	38		sec				sec
.1396	ad f3 0a	lda $0af3			lda 	yInLine 					; position in line must be at least 4
.1399	e9 04		sbc #$04			sbc 	#4
.139b	18		clc				clc
.139c	65 02		adc $02				adc 	codePtr
.139e	85 0a		sta $0a				sta 	temp3
.13a0	a5 03		lda $03				lda 	codePtr+1
.13a2	69 00		adc #$00			adc 	#0
.13a4	85 0b		sta $0b				sta 	temp3+1
.13a6	98		tya				tya
.13a7	48		pha				pha
.13a8	a0 04		ldy #$04			ldy 	#4
.13aa					_FPCName:
.13aa	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.13ac	d1 04		cmp ($04),y			cmp 	(temp0),y
.13ae	d0 0e		bne $13be			bne 	_FPPulYNext 				; if different go to next one.
.13b0	c8		iny				iny
.13b1	c9 3a		cmp #$3a			cmp 	#$3A
.13b3	90 f5		bcc $13aa			bcc 	_FPCName 					; compare the whole lot....
.13b5	68		pla				pla 								; throw away the saved Y
.13b6	98		tya				tya 								; length of name is Y-4
.13b7	38		sec				sec
.13b8	e9 04		sbc #$04			sbc 	#4
.13ba	ac f3 0a	ldy $0af3			ldy 	yInLine  					; get the original Y back
.13bd	60		rts				rts
.13be					_FPPulYNext:
.13be	68		pla				pla
.13bf	a8		tay				tay
.13c0					_FPNext:
.13c0	c8		iny				iny 								; next procedure record.
.13c1	10 c0		bpl $1383			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.13c3	98		tya				tya 								; subtract 128 from Y
.13c4	38		sec				sec
.13c5	e9 80		sbc #$80			sbc 	#128
.13c7	a8		tay				tay
.13c8	18		clc				clc 								; add 128 to temp2, so we can have more than
.13c9	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.13cb	69 80		adc #$80			adc 	#128
.13cd	85 08		sta $08				sta 	temp2
.13cf	90 b2		bcc $1383			bcc 	_FPLoop
.13d1	e6 09		inc $09				inc 	temp2+1
.13d3	4c 83 13	jmp $1383			jmp 	_FPLoop
.13d6					_FPError:
.13d6	a2 16		ldx #$16			ldx 	#ErrorID_NoProc
.13d8	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.13db					ScanProc:
.13db	98		tya				tya
.13dc	48		pha				pha
.13dd	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.13df	8d f1 0a	sta $0af1			sta 	procList
.13e2	a5 10		lda $10				lda 	lowMemory+1
.13e4	8d f2 0a	sta $0af2			sta 	procList+1
.13e7	20 8a 12	jsr $128a			jsr 	ResetCodeAddress 			; back to the start.
.13ea					_ScanLoop:
.13ea	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.13ec	b1 02		lda ($02),y			lda 	(codePtr),y
.13ee	f0 2a		beq $141a			beq 	_ScanExit
.13f0	a0 03		ldy #$03			ldy 	#3							; get first token
.13f2	b1 02		lda ($02),y			lda 	(codePtr),y
.13f4	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.13f6	d0 12		bne $140a			bne 	_ScanNext
.13f8	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.13fa	20 22 14	jsr $1422			jsr 	_ScanWrite
.13fd	a5 02		lda $02				lda 	codePtr
.13ff	20 22 14	jsr $1422			jsr 	_ScanWrite
.1402	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1404	20 2d 14	jsr $142d			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1407	20 22 14	jsr $1422			jsr 	_ScanWrite
.140a					_ScanNext:
.140a	18		clc				clc
.140b	a0 00		ldy #$00			ldy 	#0
.140d	b1 02		lda ($02),y			lda 	(codePtr),y
.140f	65 02		adc $02				adc 	codePtr
.1411	85 02		sta $02				sta 	codePtr
.1413	90 d5		bcc $13ea			bcc 	_ScanLoop
.1415	e6 03		inc $03				inc 	codePtr+1
.1417	4c ea 13	jmp $13ea			jmp 	_ScanLoop
.141a					_ScanExit:
.141a	a9 00		lda #$00			lda 	#0 							; write ending zero.
.141c	20 22 14	jsr $1422			jsr 	_ScanWrite
.141f	68		pla				pla
.1420	a8		tay				tay
.1421	60		rts				rts
.1422					_ScanWrite:
.1422	a0 00		ldy #$00			ldy 	#0
.1424	91 0f		sta ($0f),y			sta 	(lowMemory),y
.1426	e6 0f		inc $0f				inc 	lowMemory
.1428	d0 02		bne $142c			bne 	_SWNoCarry
.142a	e6 10		inc $10				inc 	lowMemory+1
.142c					_SWNoCarry:
.142c	60		rts				rts
.142d					CalculateProcedureHash:
.142d	a9 00		lda #$00			lda 	#0 							; clear hash.
.142f	85 04		sta $04				sta 	temp0
.1431					_CPHLoop:
.1431	18		clc				clc 								; add character and rotate and add carry back in
.1432	b1 02		lda ($02),y			lda 	(codePtr),y
.1434	65 04		adc $04				adc 	temp0
.1436	6a		ror a				ror 	a
.1437	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1439	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.143b	b1 02		lda ($02),y			lda 	(codePtr),y
.143d	c8		iny				iny 								; advance incase we go round again.
.143e	c9 3a		cmp #$3a			cmp 	#$3A
.1440	90 ef		bcc $1431			bcc 	_CPHLoop
.1442	a5 04		lda $04				lda 	temp0
.1444	a9 aa		lda #$aa			lda 	#$AA
.1446	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1447					CommandStop:
.1447	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1449	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.144c					CommandEnd:
.144c	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.144f					AdvanceNextLine:
.144f	a0 00		ldy #$00			ldy 	#0 							; get offset
.1451	b1 02		lda ($02),y			lda 	(codePtr),y
.1453	18		clc				clc 								; add to codePtr
.1454	65 02		adc $02				adc 	codePtr
.1456	85 02		sta $02				sta 	codePtr
.1458	90 02		bcc $145c			bcc 	_ANLNoCarry
.145a	e6 03		inc $03				inc 	codePtr+1
.145c					_ANLNoCarry:
.145c	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.145e	f0 ec		beq $144c			beq 	CommandEnd 					; execute END
.1460	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1462	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1463					CommandGOSUB:
.1463	20 d0 18	jsr $18d0			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1466	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1468	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.146a	20 64 1f	jsr $1f64			jsr 	RSClaim
.146d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.146f	20 90 1f	jsr $1f90			jsr 	RSSavePosition
.1472	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1474	f0 1b		beq $1491			beq 	GotoTOS 					; and do a GOTO there.
.1476					CommandRETURN:
.1476	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1478	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.147a	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.147c	f0 05		beq $1483			beq 	_isok
.147e	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1480	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1483					_isok:
.1483	a9 01		lda #$01			lda 	#1
.1485	20 a3 1f	jsr $1fa3			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1488	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.148a	20 86 1f	jsr $1f86			jsr 	RSFree
.148d	60		rts				rts
.148e					CommandGOTO:
.148e	20 d0 18	jsr $18d0			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1491					GotoTOS:
.1491	20 8a 12	jsr $128a			jsr 	ResetCodeAddress 			; simple search.
.1494					_GotoSearch:
.1494	a0 00		ldy #$00			ldy 	#0 							; get offset
.1496	b1 02		lda ($02),y			lda 	(codePtr),y
.1498	f0 21		beq $14bb			beq 	_GotoError 					; not found.
.149a	c8		iny				iny									; check LSB match
.149b	b1 02		lda ($02),y			lda 	(codePtr),y
.149d	d5 48		cmp $48,x			cmp 	esInt0,x
.149f	d0 07		bne $14a8			bne 	_GotoNext
.14a1	c8		iny				iny
.14a2	b1 02		lda ($02),y			lda 	(codePtr),y
.14a4	d5 50		cmp $50,x			cmp 	esInt1,x
.14a6	f0 10		beq $14b8			beq 	_GotoFound
.14a8					_GotoNext:
.14a8	a0 00		ldy #$00			ldy 	#0 							; go next line
.14aa	b1 02		lda ($02),y			lda 	(codePtr),y
.14ac	18		clc				clc
.14ad	65 02		adc $02				adc 	codePtr
.14af	85 02		sta $02				sta 	codePtr
.14b1	90 e1		bcc $1494			bcc 	_GotoSearch
.14b3	e6 03		inc $03				inc 	codePtr+1
.14b5	4c 94 14	jmp $1494			jmp 	_GotoSearch
.14b8					_GotoFound:
.14b8	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.14ba	60		rts				rts
.14bb					_GotoError:
.14bb	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.14bd	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.14c0					Command_VDU:
.14c0	20 d0 18	jsr $18d0			jsr 	EvaluateRootInteger 			; get integer at root.
.14c3	a5 48		lda $48				lda 	esInt0
.14c5	a2 04		ldx #$04		ldx	#4
.14c7	20 ea 1f	jsr $1fea		jsr	deviceHandler
.14ca					_CVNext:
.14ca	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.14cc	c8		iny				iny
.14cd	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.14cf	f0 ef		beq $14c0			beq 	Command_VDU
.14d1	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.14d3	d0 0a		bne $14df			bne 	_CVExit
.14d5	a5 50		lda $50				lda 	esInt1
.14d7	a2 04		ldx #$04		ldx	#4
.14d9	20 ea 1f	jsr $1fea		jsr	deviceHandler
.14dc	4c ca 14	jmp $14ca			jmp 	_CVNext
.14df	88		dey		_CVExit:dey
.14e0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2507					Command_While:
.2507	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2509	a2 04		ldx #$04			ldx 	#4
.250b	20 64 1f	jsr $1f64			jsr 	RSClaim 					; create on stack.
.250e	88		dey				dey
.250f	a9 01		lda #$01			lda 	#1
.2511	20 90 1f	jsr $1f90			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2514	c8		iny				iny
.2515	20 d2 18	jsr $18d2			jsr 	EvaluateInteger				; get the conditional
.2518	20 f0 1e	jsr $1ef0			jsr 	MInt32Zero 	 				; if zero, skip forward.
.251b	f0 01		beq $251e			beq 	_CWFail
.251d	60		rts				rts
.251e					_CWFail:
.251e	a9 04		lda #$04			lda 	#4
.2520	20 86 1f	jsr $1f86			jsr 	RSFree 						; close the just opened position.
.2523	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2525	aa		tax				tax
.2526	20 42 25	jsr $2542			jsr 	ScanForward
.2529	60		rts				rts
.252a					Command_Wend:
.252a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.252c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.252e	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2530	f0 05		beq $2537			beq 	_isok
.2532	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2534	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.2537					_isok:
.2537	a9 01		lda #$01			lda 	#1
.2539	20 a3 1f	jsr $1fa3			jsr 	RSLoadPosition				; go back until true
.253c	a9 04		lda #$04			lda 	#4
.253e	20 86 1f	jsr $1f86			jsr 	RSFree 						; close the loop
.2541	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.14e1					BinaryProcess:
.14e1	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.14e3	15 41		ora $41,x			ora 	esType+1,x
.14e5	0a		asl a				asl 	a
.14e6	30 0e		bmi $14f6			bmi 	_BPStringType 				; if one is set, then string type.
.14e8	18		clc				clc 								; return CC for integer
.14e9	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.14eb	f0 08		beq $14f5			beq 	_BPExit 					; if both integer then return with CC.
.14ed	20 fb 14	jsr $14fb			jsr 	BPMakeBothFloat 			; make both float
.14f0	a9 01		lda #$01			lda 	#$01 						; set result type to float
.14f2	95 40		sta $40,x			sta 	esType,x
.14f4	38		sec				sec 								; and return with carry set.
.14f5					_BPExit:
.14f5	60		rts				rts
.14f6					_BPStringType:
.14f6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.14f8	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.14fb					BPMakeBothFloat:
.14fb	e8		inx				inx
.14fc	20 00 15	jsr $1500			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.14ff	ca		dex				dex
.1500					BPMakeFloat:
.1500	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1502	4a		lsr a				lsr 	a
.1503	b0 07		bcs $150c			bcs 	_BPIsFloat
.1505	8a		txa				txa
.1506	a2 1a		ldx #$1a		ldx	#26
.1508	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.150b	aa		tax				tax
.150c					_BPIsFloat:
.150c	60		rts				rts
.150d					AddHandler:
.150d	20 5c 17	jsr $175c			jsr 	DereferenceTwo 				; dereference top two on stack.
.1510	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1512	35 41		and $41,x			and 	esType+1,x
.1514	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1516	d0 10		bne $1528			bne 	_AHStringConcat				; concatenate strings.
.1518	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.151b	b0 03		bcs $1520			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.151d	4c b4 1d	jmp $1db4			jmp 	MInt32Add 							; else do it as integer.
.1520					_IsFPOperation:
.1520	8a		txa				txa 								; call the relevant fp routine
.1521	a2 02		ldx #$02		ldx	#2
.1523	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1526	aa		tax				tax
.1527	60		rts				rts
.1528					_AHStringConcat:
.1528	8a		txa				txa
.1529	a2 04		ldx #$04		ldx	#4
.152b	20 55 22	jsr $2255		jsr	stringHandler
.152e	aa		tax				tax
.152f	60		rts				rts
.1530					SubHandler:
.1530	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.1533	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.1536	b0 03		bcs $153b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1538	4c ce 1d	jmp $1dce			jmp 	MInt32Sub 							; else do it as integer.
.153b					_IsFPOperation:
.153b	8a		txa				txa 								; call the relevant fp routine
.153c	a2 10		ldx #$10		ldx	#16
.153e	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1541	aa		tax				tax
.1542	60		rts				rts
.1543					MulHandler:
.1543	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.1546	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.1549	b0 03		bcs $154e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.154b	4c e8 1d	jmp $1de8			jmp 	MInt32Multiply 							; else do it as integer.
.154e					_IsFPOperation:
.154e	8a		txa				txa 								; call the relevant fp routine
.154f	a2 0a		ldx #$0a		ldx	#10
.1551	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1554	aa		tax				tax
.1555	60		rts				rts
.1556					DivHandler:
.1556	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.1559	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.155c	b0 03		bcs $1561			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.155e	4c ac 1c	jmp $1cac			jmp 	MInt32SDivide 							; else do it as integer.
.1561					_IsFPOperation:
.1561	8a		txa				txa 								; call the relevant fp routine
.1562	a2 06		ldx #$06		ldx	#6
.1564	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1567	aa		tax				tax
.1568	60		rts				rts
.1569					ModHandler:
.1569	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.156c	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.156f	b0 03		bcs $1574			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1571	4c 2a 1d	jmp $1d2a			jmp 	MInt32Modulus 							; else do it as integer.
.1574					_IsFPOperation:
.1574	8a		txa				txa 								; call the relevant fp routine
.1575	a2 08		ldx #$08		ldx	#8
.1577	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.157a	aa		tax				tax
.157b	60		rts				rts
.157c					XorHandler:
.157c	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.157f	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.1582	b0 03		bcs $1587			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1584	4c 5e 1c	jmp $1c5e			jmp 	MInt32Xor 							; else do it as integer.
.1587					_IsFPOperation:
.1587	8a		txa				txa 								; call the relevant fp routine
.1588	a2 08		ldx #$08		ldx	#8
.158a	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.158d	aa		tax				tax
.158e	60		rts				rts
.158f					OrHandler:
.158f	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.1592	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.1595	b0 03		bcs $159a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1597	4c 45 1c	jmp $1c45			jmp 	MInt32Or 							; else do it as integer.
.159a					_IsFPOperation:
.159a	8a		txa				txa 								; call the relevant fp routine
.159b	a2 08		ldx #$08		ldx	#8
.159d	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.15a0	aa		tax				tax
.15a1	60		rts				rts
.15a2					AndHandler:
.15a2	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.15a5	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.15a8	b0 03		bcs $15ad			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.15aa	4c 2c 1c	jmp $1c2c			jmp 	MInt32And 							; else do it as integer.
.15ad					_IsFPOperation:
.15ad	8a		txa				txa 								; call the relevant fp routine
.15ae	a2 08		ldx #$08		ldx	#8
.15b0	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.15b3	aa		tax				tax
.15b4	60		rts				rts
.15b5					ShlHandler:
.15b5	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.15b8	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.15bb	b0 03		bcs $15c0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.15bd	4c 36 16	jmp $1636			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.15c0					_IsFPOperation:
.15c0	8a		txa				txa 								; call the relevant fp routine
.15c1	a2 08		ldx #$08		ldx	#8
.15c3	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.15c6	aa		tax				tax
.15c7	60		rts				rts
.15c8					ShrHandler:
.15c8	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.15cb	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.15ce	b0 03		bcs $15d3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.15d0	4c 39 16	jmp $1639			jmp 	MInt32ShiftRightX 							; else do it as integer.
.15d3					_IsFPOperation:
.15d3	8a		txa				txa 								; call the relevant fp routine
.15d4	a2 08		ldx #$08		ldx	#8
.15d6	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.15d9	aa		tax				tax
.15da	60		rts				rts
.15db					WordRefHandler:
.15db	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.15de	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.15e1	b0 03		bcs $15e6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.15e3	4c 28 16	jmp $1628			jmp 	MInt32WordIndirect 							; else do it as integer.
.15e6					_IsFPOperation:
.15e6	8a		txa				txa 								; call the relevant fp routine
.15e7	a2 08		ldx #$08		ldx	#8
.15e9	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.15ec	aa		tax				tax
.15ed	60		rts				rts
.15ee					ByteRefHandler:
.15ee	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.15f1	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.15f4	b0 03		bcs $15f9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.15f6	4c 2c 16	jmp $162c			jmp 	MInt32ByteIndirect 							; else do it as integer.
.15f9					_IsFPOperation:
.15f9	8a		txa				txa 								; call the relevant fp routine
.15fa	a2 08		ldx #$08		ldx	#8
.15fc	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.15ff	aa		tax				tax
.1600	60		rts				rts
.1601					PowerHandler:
.1601	20 5c 17	jsr $175c			jsr 	DereferenceTwo
.1604	20 e1 14	jsr $14e1			jsr 	BinaryProcess 				; check to see if either is float
.1607	b0 03		bcs $160c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1609	4c 14 16	jmp $1614			jmp 	PowerInteger 							; else do it as integer.
.160c					_IsFPOperation:
.160c	8a		txa				txa 								; call the relevant fp routine
.160d	a2 16		ldx #$16		ldx	#22
.160f	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1612	aa		tax				tax
.1613	60		rts				rts
.1614					PowerInteger:
.1614	20 fb 14	jsr $14fb			jsr 	BPMakeBothFloat				; make them float.
.1617	8a		txa				txa
.1618	a2 16		ldx #$16		ldx	#22
.161a	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.161d	a2 12		ldx #$12		ldx	#18
.161f	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1622	aa		tax				tax
.1623	a9 00		lda #$00			lda 	#0 							; make type integer
.1625	95 40		sta $40,x			sta 	esType,x
.1627	60		rts				rts
.1628					Mint32WordIndirect:
.1628	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.162a	d0 02		bne $162e			bne 	Min32Indirect
.162c					Mint32ByteIndirect:
.162c	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.162e					Min32Indirect:
.162e	48		pha				pha 								; save the indirection
.162f	20 b4 1d	jsr $1db4			jsr 	MInt32Add 					; add a!b a?b
.1632	68		pla				pla 								; and set the type to reference.
.1633	95 40		sta $40,x			sta 	esType,x
.1635	60		rts				rts
.1636					Mint32ShiftLeftX:
.1636	18		clc				clc
.1637	90 01		bcc $163a			bcc 	Mint32Shift
.1639					Mint32ShiftRightX:
.1639	38		sec				sec
.163a					Mint32Shift:
.163a	08		php				php 								; save carry flag on stack.
.163b	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.163d	15 59		ora $59,x			ora 	esInt2+1,x
.163f	15 61		ora $61,x			ora 	esInt3+1,x
.1641	d0 1e		bne $1661			bne 	_MShiftZero
.1643	b5 49		lda $49,x			lda 	esInt0+1,x
.1645	c9 20		cmp #$20			cmp 	#32
.1647	b0 18		bcs $1661			bcs 	_MShiftZero
.1649					_MShiftLoop:
.1649	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.164b	f0 12		beq $165f			beq 	_MShiftExit
.164d	d6 49		dec $49,x			dec 	esInt0+1,x
.164f	28		plp				plp 								; restore and save carry
.1650	08		php				php
.1651	90 06		bcc $1659			bcc 	_MShiftLeft
.1653	20 e7 1e	jsr $1ee7			jsr 	Mint32ShiftRight
.1656	4c 49 16	jmp $1649			jmp 	_MShiftLoop
.1659					_MShiftLeft:
.1659	20 de 1e	jsr $1ede			jsr 	Mint32ShiftLeft
.165c	4c 49 16	jmp $1649			jmp 	_MShiftLoop
.165f					_MShiftExit:
.165f	28		plp				plp	 								; throw saved carry and exit
.1660	60		rts				rts
.1661					_MShiftZero:
.1661	4c c9 1e	jmp $1ec9			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1664					PerformComparison:
.1664	20 5c 17	jsr $175c			jsr 	DereferenceTwo 				; make both values.
.1667	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1669	35 41		and $41,x			and 	esType+1,x
.166b	0a		asl a				asl 	a
.166c	30 1d		bmi $168b			bmi 	_PCIsString
.166e	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1670	15 41		ora $41,x			ora 	esType+1,x
.1672	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1673	30 22		bmi $1697			bmi 	_PCError
.1675	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1677	f0 0f		beq $1688			beq 	_PCIsInteger 				; if not two integers
.1679	20 fb 14	jsr $14fb			jsr 	BPMakeBothFloat 			; make both float
.167c	8a		txa				txa
.167d	a2 04		ldx #$04		ldx	#4
.167f	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1682	86 0c		stx $0c				stx 	tempShort 					; save result
.1684	aa		tax				tax
.1685	a5 0c		lda $0c				lda 	tempShort
.1687	60		rts				rts
.1688					_PCIsInteger:
.1688	4c 77 1c	jmp $1c77			jmp 	MInt32Compare
.168b					_PCIsString:
.168b	8a		txa				txa 								; A has SP
.168c	a2 06		ldx #$06		ldx	#6
.168e	20 55 22	jsr $2255		jsr	stringHandler
.1691	86 0c		stx $0c				stx 	tempShort 					; save result
.1693	aa		tax				tax 								; put SP back in X and get result.
.1694	a5 0c		lda $0c				lda 	tempShort
.1696	60		rts				rts
.1697					_PCError:
.1697	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1699	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.169c					CompareEquals:
.169c	20 64 16	jsr $1664			jsr 	PerformComparison
.169f	c9 00		cmp #$00			cmp 	#$00
.16a1	f0 35		beq $16d8			beq  	CompareTrue
.16a3	4c db 16	jmp $16db			jmp 	CompareFalse
.16a6					CompareLess:
.16a6	20 64 16	jsr $1664			jsr 	PerformComparison
.16a9	c9 ff		cmp #$ff			cmp 	#$FF
.16ab	f0 2b		beq $16d8			beq  	CompareTrue
.16ad	4c db 16	jmp $16db			jmp 	CompareFalse
.16b0					CompareGreater:
.16b0	20 64 16	jsr $1664			jsr 	PerformComparison
.16b3	c9 01		cmp #$01			cmp 	#$01
.16b5	f0 21		beq $16d8			beq  	CompareTrue
.16b7	4c db 16	jmp $16db			jmp 	CompareFalse
.16ba					CompareNotEquals:
.16ba	20 64 16	jsr $1664			jsr 	PerformComparison
.16bd	c9 00		cmp #$00			cmp 	#$00
.16bf	d0 17		bne $16d8			bne  	CompareTrue
.16c1	4c db 16	jmp $16db			jmp 	CompareFalse
.16c4					CompareGreaterEq:
.16c4	20 64 16	jsr $1664			jsr 	PerformComparison
.16c7	c9 ff		cmp #$ff			cmp 	#$FF
.16c9	d0 0d		bne $16d8			bne  	CompareTrue
.16cb	4c db 16	jmp $16db			jmp 	CompareFalse
.16ce					CompareLessEq:
.16ce	20 64 16	jsr $1664			jsr 	PerformComparison
.16d1	c9 01		cmp #$01			cmp 	#$01
.16d3	d0 03		bne $16d8			bne  	CompareTrue
.16d5	4c db 16	jmp $16db			jmp 	CompareFalse
.16d8					CompareTrue:
.16d8	4c c5 1e	jmp $1ec5			jmp 	MInt32True
.16db					CompareFalse:
.16db	4c c9 1e	jmp $1ec9			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.16de					Event_Str:
.16de	20 bc 18	jsr $18bc			jsr 	EvaluateNumeric 			; get a number.
.16e1	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.16e3	d0 13		bne $16f8			bne 	_ESFloat
.16e5	20 3b 17	jsr $173b			jsr 	ConvertGetBase
.16e8	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.16ea	85 04		sta $04				sta 	temp0
.16ec	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.16ee	85 05		sta $05				sta 	1+(temp0)
.16f0	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.16f2	20 1f 1e	jsr $1e1f			jsr 	MInt32ToString 				; convert to string.
.16f5	4c 05 17	jmp $1705			jmp 	_ESCloneExit 				; clone and exit.
.16f8					_ESFloat:
.16f8	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen 			; check closing )
.16fb	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.16fe	8a		txa				txa
.16ff	a2 14		ldx #$14		ldx	#20
.1701	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1704	aa		tax				tax
.1705					_ESCloneExit:
.1705	8a		txa				txa
.1706	a2 02		ldx #$02		ldx	#2
.1708	20 55 22	jsr $2255		jsr	stringHandler
.170b	aa		tax				tax
.170c	60		rts				rts
.170d					UnaryVal:
.170d	38		sec				sec
.170e	b0 01		bcs $1711			bcs 	ValueMain
.1710					UnaryIsVal:
.1710	18		clc				clc
.1711					ValueMain:
.1711	08		php				php 								; save results (CS is value, CC is validation)
.1712	20 c7 18	jsr $18c7			jsr 	EvaluateString
.1715	20 3b 17	jsr $173b			jsr 	ConvertGetBase 				; get base, if any.
.1718	98		tya				tya
.1719	48		pha				pha
.171a	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.171d	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.171f	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1721	20 3e 1d	jsr $1d3e			jsr 	MInt32FromString 			; convert it back from a string.
.1724	b0 0c		bcs $1732			bcs 	_VMSuccess 					; successfully converted.
.1726	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1728	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.172a	f0 00		beq $172c			beq 	_VMFailed 	 				; so we failed.
.172c					_VMFailed:
.172c	68		pla				pla
.172d	a8		tay				tay
.172e	28		plp				plp
.172f	4c c9 1e	jmp $1ec9			jmp 	MInt32False 				; return 0 whatever.
.1732					_VMSuccess:
.1732	68		pla				pla
.1733	a8		tay				tay
.1734	28		plp				plp 								; if CS the it was val() so we want the value.
.1735	b0 03		bcs $173a			bcs 	_VMExit
.1737	4c c5 1e	jmp $1ec5			jmp 	MInt32True 					; otherwise return true as successful.
.173a					_VMExit:
.173a	60		rts				rts
.173b					ConvertGetBase:
.173b	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.173d	95 49		sta $49,x			sta 	esInt0+1,x
.173f	b1 02		lda ($02),y			lda 	(codePtr),y
.1741	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1743	d0 0e		bne $1753			bne 	_CGBDone
.1745	e8		inx				inx 								; next level
.1746	c8		iny				iny 								; skip comma.
.1747	20 da 18	jsr $18da			jsr 	EvaluateSmallInteger		; evaluate the base.
.174a	ca		dex				dex
.174b	c9 02		cmp #$02			cmp 	#2
.174d	90 08		bcc $1757			bcc 	_CGBValue
.174f	c9 11		cmp #$11			cmp 	#17
.1751	b0 04		bcs $1757			bcs 	_CGBValue
.1753					_CGBDone:
.1753	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1756	60		rts				rts
.1757					_CGBValue:
.1757	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1759	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.175c					DereferenceTwo:
.175c	e8		inx				inx
.175d	20 61 17	jsr $1761			jsr 	DereferenceOne
.1760	ca		dex				dex
.1761					DereferenceOne:
.1761	b5 40		lda $40,x			lda 	esType,x
.1763	10 3d		bpl $17a2			bpl 	_DRNotReference 			; is it a reference ?
.1765	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1766	b0 3b		bcs $17a3			bcs 	_DRFloatDeReference
.1768	98		tya				tya
.1769	48		pha				pha
.176a	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.176c	85 04		sta $04				sta 	temp0
.176e	b5 50		lda $50,x			lda 	esInt1,x
.1770	85 05		sta $05				sta 	temp0+1
.1772	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1774	95 50		sta $50,x			sta 	esInt1,x
.1776	95 58		sta $58,x			sta 	esInt2,x
.1778	95 60		sta $60,x			sta 	esInt3,x
.177a	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.177c	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.177e	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.177f	30 0d		bmi $178e			bmi 	_DeRefString 				; string, 2 bytes only
.1781	d0 11		bne $1794			bne 	_DeRefByte 					; byte 1 byte only
.1783					_DeRefLong:
.1783	a0 03		ldy #$03			ldy 	#3
.1785	b1 04		lda ($04),y			lda 	(temp0),y
.1787	95 60		sta $60,x			sta 	esInt3,x
.1789	88		dey				dey
.178a	b1 04		lda ($04),y			lda 	(temp0),y
.178c	95 58		sta $58,x			sta 	esInt2,x
.178e					_DeRefString:
.178e	a0 01		ldy #$01			ldy 	#1
.1790	b1 04		lda ($04),y			lda 	(temp0),y
.1792	95 50		sta $50,x			sta 	esInt1,x
.1794					_DeRefByte:
.1794	a0 00		ldy #$00			ldy 	#0
.1796	b1 04		lda ($04),y			lda 	(temp0),y
.1798	95 48		sta $48,x			sta 	esInt0,x
.179a	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.179c	29 40		and #$40			and 	#$40
.179e	95 40		sta $40,x			sta 	esType,x
.17a0	68		pla				pla
.17a1	a8		tay				tay
.17a2					_DRNotReference
.17a2	60		rts				rts
.17a3					_DRFloatDereference:
.17a3	8a		txa				txa
.17a4							floatingpoint_deref
.17a4	aa		tax				tax
.17a5	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.17a7	95 40		sta $40,x			sta 	esType,x
.17a9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.17aa					EvaluateLevel:
.17aa	48		pha				pha 								; save precedence level.
.17ab	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.17ad	95 48		sta $48,x			sta 	esInt0,x
.17af	95 50		sta $50,x			sta 	esInt1,x
.17b1	95 58		sta $58,x			sta 	esInt2,x
.17b3	95 60		sta $60,x			sta 	esInt3,x
.17b5	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.17b7	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.17b9	30 21		bmi $17dc			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.17bb	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.17bc	30 0a		bmi $17c8			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.17be	8a		txa				txa 								; stack level in X
.17bf	a2 00		ldx #$00		ldx	#0
.17c1	20 c3 23	jsr $23c3		jsr	variableHandler
.17c4	aa		tax				tax
.17c5	4c 05 18	jmp $1805			jmp		_ELHasTerm
.17c8					_ELIsConstant:
.17c8	4a		lsr a				lsr 	a 							; get the value back
.17c9	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.17cb	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.17cd					_ELCheckNext:
.17cd	c8		iny				iny 								; look at next
.17ce	b1 02		lda ($02),y			lda 	(codePtr),y
.17d0	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.17d2	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.17d4	b0 2f		bcs $1805			bcs 	_ELHasTerm 					; done getting the constant.
.17d6	20 12 19	jsr $1912			jsr 	ELShiftByteIn 				; shift byte into position.
.17d9	4c cd 17	jmp $17cd			jmp 	_ELCheckNext
.17dc					_ELIsToken:
.17dc	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.17de	f0 0f		beq $17ef			beq 	_ELIsString
.17e0	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.17e2	d0 5f		bne $1843			bne 	_ELCheckUnary
.17e4	8a		txa				txa 								; put X into A
.17e5	c8		iny				iny 								; skip over the float marker
.17e6	a2 18		ldx #$18		ldx	#24
.17e8	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.17eb	aa		tax				tax 								; restore X
.17ec	4c 05 18	jmp $1805			jmp 	_ELHasTerm
.17ef					_ELIsString:
.17ef	98		tya				tya 								; address of string is codePtr+y+1
.17f0	38		sec				sec
.17f1	65 02		adc $02				adc 	codePtr
.17f3	95 48		sta $48,x			sta 	esInt0,x
.17f5	a5 03		lda $03				lda 	codePtr+1
.17f7	69 00		adc #$00			adc 	#0
.17f9	95 50		sta $50,x			sta 	esInt1,x
.17fb	a9 40		lda #$40			lda 	#$40 						; set type to string value
.17fd	95 40		sta $40,x			sta 	esType,x
.17ff	c8		iny				iny 								; skip over string.
.1800	98		tya				tya
.1801	38		sec				sec									; +1 for the length itself.
.1802	71 02		adc ($02),y			adc 	(codePtr),y
.1804	a8		tay				tay 								; and fall through to term loop code.
.1805					_ELHasTerm:
.1805	b1 02		lda ($02),y			lda 	(codePtr),y
.1807	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1809	90 04		bcc $180f			bcc 	_ELPopExit
.180b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.180d	90 02		bcc $1811			bcc 	_ELHasBinaryTerm
.180f					_ELPopExit:
.180f	68		pla				pla
.1810					_ELExit:
.1810	60		rts				rts
.1811					_ELHasBinaryTerm:
.1811	84 0c		sty $0c				sty 	tempShort 					; save position
.1813	a8		tay				tay 								; use token as an index and get the precedence.
.1814	b9 ba 18	lda $18ba,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1817	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1819	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.181b	68		pla				pla 								; restore current level.
.181c	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.181e	b0 f0		bcs $1810			bcs 	_ELExit
.1820	48		pha				pha 								; save current level back on the stack.
.1821	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1823	48		pha				pha
.1824	c8		iny				iny
.1825	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1826	a5 0c		lda $0c				lda 	tempShort
.1828	20 aa 17	jsr $17aa			jsr 	EvaluateLevel
.182b	ca		dex				dex
.182c	68		pla				pla 								; get the operator back out.
.182d					_ELExecuteA:
.182d	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.182f	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1830	aa		tax				tax
.1831	bd a1 12	lda $12a1,x			lda 	Group0Vectors,x
.1834	85 04		sta $04				sta 	temp0
.1836	bd a2 12	lda $12a2,x			lda 	Group0Vectors+1,x
.1839	85 05		sta $05				sta 	temp0+1
.183b	a6 0c		ldx $0c				ldx 	tempShort
.183d	20 86 18	jsr $1886			jsr 	_ELCallTemp0
.1840	4c 05 18	jmp $1805			jmp 	_ELHasTerm 					; and loop back round.
.1843					_ELCheckUnary:
.1843	c8		iny				iny 								; skip over token.
.1844	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1846	f0 15		beq $185d			beq 	_ELMinus
.1848	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.184a	f0 28		beq $1874			beq 	_ELIndirect
.184c	c9 98		cmp #$98			cmp 	#TKW_QMARK
.184e	f0 24		beq $1874			beq 	_ELIndirect
.1850	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1852	90 04		bcc $1858			bcc 	_ELUSyntax
.1854	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.1856	90 d5		bcc $182d			bcc 	_ELExecuteA 				; if so do that token.
.1858					_ELUSyntax:
.1858	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.185a	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.185d					_ELMinus:
.185d	20 9b 18	jsr $189b			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1860	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1862	f0 0a		beq $186e			beq 	_ELMinusInteger
.1864	8a		txa				txa
.1865	a2 0c		ldx #$0c		ldx	#12
.1867	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.186a	aa		tax				tax
.186b	4c 05 18	jmp $1805			jmp 	_ELHasTerm
.186e					_ELMinusInteger:
.186e	20 83 1e	jsr $1e83			jsr 	MInt32Negate 				; do int negate
.1871	4c 05 18	jmp $1805			jmp 	_ELHasTerm
.1874					_ELIndirect:
.1874	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1875	20 a4 18	jsr $18a4			jsr 	EvaluateIntegerTerm 		; integer address
.1878	68		pla				pla
.1879	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.187b	f0 02		beq $187f			beq 	_ELHaveModifier
.187d	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.187f					_ELHaveModifier:
.187f	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1881	95 40		sta $40,x			sta 	esType,x
.1883	4c 05 18	jmp $1805			jmp 	_ELHasTerm
.1886					_ELCallTemp0:
.1886	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1889					UnaryParenthesis:
.1889	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.188b	20 aa 17	jsr $17aa			jsr 	EvaluateLevel
.188e	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen 			; check for )
.1891	60		rts				rts
.1892					EvaluateTerm:
.1892	a9 0f		lda #$0f			lda 	#15
.1894	20 aa 17	jsr $17aa			jsr 	EvaluateLevel
.1897	20 61 17	jsr $1761			jsr 	DereferenceOne
.189a	60		rts				rts
.189b					EvaluateNumericTerm:
.189b	20 92 18	jsr $1892			jsr 	EvaluateTerm
.189e	b5 40		lda $40,x			lda 	esType,x
.18a0	0a		asl a				asl 	a 							; see if it's a string.
.18a1	30 09		bmi $18ac			bmi 	ENTType
.18a3	60		rts				rts
.18a4					EvaluateIntegerTerm:
.18a4	20 92 18	jsr $1892			jsr 	EvaluateTerm
.18a7	b5 40		lda $40,x			lda 	esType,x
.18a9	d0 01		bne $18ac			bne 	ENTType
.18ab	60		rts				rts
.18ac					ENTType:
.18ac	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.18ae	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.18b1					EvaluateRoot:
.18b1	a2 00		ldx #$00			ldx 	#0
.18b3					Evaluate:
.18b3	a9 00		lda #$00			lda 	#0
.18b5	20 aa 17	jsr $17aa			jsr 	EvaluateLevel
.18b8	20 61 17	jsr $1761			jsr 	DereferenceOne
.18bb	60		rts				rts
.18bc					EvaluateNumeric:
.18bc	20 b3 18	jsr $18b3			jsr 	Evaluate
.18bf	b5 40		lda $40,x			lda 	esType,x
.18c1	0a		asl a				asl 	a 							; see if it's a string.
.18c2	30 e8		bmi $18ac			bmi 	ENTType
.18c4	4a		lsr a				lsr 	a 							; shift float flag into carry.
.18c5	4a		lsr a				lsr 	a
.18c6	60		rts				rts
.18c7					EvaluateString:
.18c7	20 b3 18	jsr $18b3			jsr 	Evaluate
.18ca	b5 40		lda $40,x			lda 	esType,x
.18cc	0a		asl a				asl 	a 							; see if it's a string.
.18cd	10 dd		bpl $18ac			bpl 	ENTType
.18cf	60		rts				rts
.18d0					EvaluateRootInteger:
.18d0	a2 00		ldx #$00			ldx 	#0
.18d2					EvaluateInteger:
.18d2	20 b3 18	jsr $18b3			jsr 	Evaluate
.18d5	b5 40		lda $40,x			lda 	esType,x
.18d7	d0 d3		bne $18ac			bne 	ENTType
.18d9	60		rts				rts
.18da					EvaluateSmallInteger:
.18da	20 d2 18	jsr $18d2			jsr 	EvaluateInteger
.18dd	b5 50		lda $50,x			lda 	esInt1,x
.18df	15 58		ora $58,x			ora 	esInt2,x
.18e1	15 60		ora $60,x			ora 	esInt3,x
.18e3	d0 03		bne $18e8			bne 	_ESIValue
.18e5	b5 48		lda $48,x			lda 	esInt0,x
.18e7	60		rts				rts
.18e8					_ESIValue:
.18e8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18ea	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.18ed					LinkEvaluate:
.18ed	aa		tax				tax
.18ee	20 b3 18	jsr $18b3			jsr 	Evaluate
.18f1	8a		txa				txa
.18f2	60		rts				rts
.18f3					LinkEvaluateInteger:
.18f3	aa		tax				tax
.18f4	20 d2 18	jsr $18d2			jsr 	EvaluateInteger
.18f7	8a		txa				txa
.18f8	60		rts				rts
.18f9					LinkEvaluateSmallInt:
.18f9	aa		tax				tax
.18fa	20 da 18	jsr $18da			jsr 	EvaluateSmallInteger
.18fd	8a		txa				txa
.18fe	60		rts				rts
.18ff					EvaluateReference:
.18ff	ad 51 19	lda $1951			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1902	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1903	e9 01		sbc #$01			sbc 	#1
.1905	20 aa 17	jsr $17aa			jsr 	EvaluateLevel
.1908	b5 40		lda $40,x			lda 	esType,x
.190a	10 01		bpl $190d			bpl 	_ERFail
.190c	60		rts				rts
.190d					_ERFail:
.190d	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.190f	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1912					ELShiftByteIn:
.1912	48		pha				pha 								; save bits to shift in.
.1913	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1915	48		pha				pha
.1916	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1918	95 60		sta $60,x			sta 	esInt3,x
.191a	b5 50		lda $50,x			lda 	esInt1,x
.191c	95 58		sta $58,x			sta 	esInt2,x
.191e	b5 48		lda $48,x			lda 	esInt0,x
.1920	95 50		sta $50,x			sta 	esInt1,x
.1922	a9 00		lda #$00			lda 	#0
.1924	95 48		sta $48,x			sta 	esInt0,x
.1926	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1927	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1929	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.192b					_ELShiftLoop:
.192b	4a		lsr a				lsr 	a
.192c	76 60		ror $60,x			ror 	esInt3,x
.192e	76 58		ror $58,x			ror 	esInt2,x
.1930	76 50		ror $50,x			ror 	esInt1,x
.1932	76 48		ror $48,x			ror 	esInt0,x
.1934	c9 01		cmp #$01			cmp 	#1
.1936	d0 f3		bne $192b			bne 	_ELShiftLoop
.1938	68		pla				pla 								; get original 6 bit value and OR in.
.1939	29 3f		and #$3f			and 	#$3F
.193b	15 48		ora $48,x			ora 	esInt0,x
.193d	95 48		sta $48,x			sta 	esInt0,x
.193f	60		rts				rts
.1940					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1940	01					.byte	$01			; $86 and
>1941	01					.byte	$01			; $87 or
>1942	01					.byte	$01			; $88 xor
>1943	02					.byte	$02			; $89 >=
>1944	02					.byte	$02			; $8a <=
>1945	02					.byte	$02			; $8b >
>1946	02					.byte	$02			; $8c <
>1947	02					.byte	$02			; $8d =
>1948	02					.byte	$02			; $8e <>
>1949	03					.byte	$03			; $8f +
>194a	03					.byte	$03			; $90 -
>194b	04					.byte	$04			; $91 >>
>194c	04					.byte	$04			; $92 <<
>194d	04					.byte	$04			; $93 *
>194e	04					.byte	$04			; $94 /
>194f	04					.byte	$04			; $95 mod
>1950	05					.byte	$05			; $96 ^
>1951	06					.byte	$06			; $97 !
>1952	06					.byte	$06			; $98 ?
>1953	82					.byte	$82			; $99 repeat
>1954	82					.byte	$82			; $9a while
>1955	82					.byte	$82			; $9b for
>1956	82					.byte	$82			; $9c if
>1957	82					.byte	$82			; $9d defproc
>1958	80					.byte	$80			; $9e until
>1959	80					.byte	$80			; $9f wend
>195a	80					.byte	$80			; $a0 next
>195b	80					.byte	$80			; $a1 then
>195c	80					.byte	$80			; $a2 endif
>195d	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.195e					EventFunction:
.195e	20 ff 18	jsr $18ff			jsr 	EvaluateReference			; get the variable reference.
.1961	b5 40		lda $40,x			lda 	esType,x
.1963	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1965	d0 55		bne $19bc			bne 	_EFType
.1967	20 49 1f	jsr $1f49			jsr 	CheckComma
.196a	e8		inx				inx
.196b	20 d2 18	jsr $18d2			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.196e	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen 			; finish off with the
.1971	ca		dex				dex
.1972	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1974	29 80		and #$80			and 	#$80
.1976	15 58		ora $58,x			ora 	esInt2,x
.1978	15 60		ora $60,x			ora 	esInt3,x
.197a	d0 3b		bne $19b7			bne 	_EFValue
.197c	98		tya				tya
.197d	48		pha				pha
.197e	8a		txa				txa
.197f	48		pha				pha
.1980	a2 08		ldx #$08		ldx	#8
.1982	20 ea 1f	jsr $1fea		jsr	deviceHandler
.1985	84 07		sty $07				sty 	temp1+1
.1987	85 06		sta $06				sta 	temp1
.1989	68		pla				pla
.198a	aa		tax				tax
.198b	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; point temp0 to the variable.
.198e	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1990	b1 04		lda ($04),y			lda 	(temp0),y
.1992	c8		iny				iny
.1993	11 04		ora ($04),y			ora 	(temp0),y
.1995	f0 17		beq $19ae			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1997	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1999	38		sec				sec
.199a	b1 04		lda ($04),y			lda 	(temp0),y
.199c	e5 06		sbc $06				sbc 	temp1
.199e	c8		iny				iny
.199f	b1 04		lda ($04),y			lda 	(temp0),y
.19a1	e5 07		sbc $07				sbc 	temp1+1
.19a3	10 0c		bpl $19b1			bpl 	_EFFail 					; if trigger >= timer then return False
.19a5	20 c1 19	jsr $19c1			jsr 	SetEventTimer 				; reset the timer for next time.
.19a8	20 c5 1e	jsr $1ec5			jsr	 	MInt32True 					; and treutn true as fired.
.19ab	68		pla				pla
.19ac	a8		tay				tay
.19ad	60		rts				rts
.19ae					_EFInitialise:
.19ae	20 c1 19	jsr $19c1			jsr		SetEventTimer 				; set trigger time to time + elapsed
.19b1					_EFFail:
.19b1	20 c9 1e	jsr $1ec9			jsr 	MInt32False
.19b4	68		pla				pla
.19b5	a8		tay				tay
.19b6	60		rts				rts
.19b7					_EFValue:
.19b7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19b9	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.19bc					_EFType:
.19bc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.19be	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.19c1					SetEventTimer:
.19c1	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.19c3	18		clc				clc
.19c4	a5 06		lda $06				lda 	temp1
.19c6	75 49		adc $49,x			adc 	esInt0+1,x
.19c8	91 04		sta ($04),y			sta		(temp0),y
.19ca	c8		iny				iny
.19cb	a5 07		lda $07				lda 	temp1+1
.19cd	75 51		adc $51,x			adc 	esInt1+1,x
.19cf	91 04		sta ($04),y			sta		(temp0),y
.19d1	88		dey				dey
.19d2	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.19d4	d0 04		bne $19da			bne 	_SETExit
.19d6	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.19d8	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.19da					_SETExit:
.19da	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.19db					UnaryLen:
.19db	20 e9 19	jsr $19e9			jsr 	ULStart
.19de					ULFinish:
.19de	b1 04		lda ($04),y			lda 	(temp0),y
.19e0	a4 0c		ldy $0c				ldy 	tempShort
.19e2	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit
.19e5	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.19e8	60		rts				rts
.19e9	20 c7 18	jsr $18c7	ULStart:jsr 	EvaluateString
.19ec	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.19ee	85 04		sta $04				sta 	temp0
.19f0	b5 50		lda $50,x			lda 	esInt1,x
.19f2	85 05		sta $05				sta 	temp0+1
.19f4	84 0c		sty $0c				sty 	tempShort 					; get length
.19f6	a0 00		ldy #$00			ldy 	#0
.19f8	60		rts				rts
.19f9					UnaryAsc:
.19f9	20 e9 19	jsr $19e9			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.19fc	b1 04		lda ($04),y			lda 	(temp0),y
.19fe	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.19ff	c9 00		cmp #$00			cmp 	#0
.1a01	d0 db		bne $19de			bne 	ULFinish
.1a03	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a05	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1a08					UnaryAbs:
.1a08	20 bc 18	jsr $18bc			jsr 	EvaluateNumeric
.1a0b	b0 07		bcs $1a14			bcs 	_UAFloat
.1a0d	20 7e 1e	jsr $1e7e			jsr 	MInt32Absolute
.1a10	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1a13	60		rts				rts
.1a14					_UAFloat:
.1a14	8a		txa				txa
.1a15	a2 00		ldx #$00		ldx	#0
.1a17	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1a1a	aa		tax				tax
.1a1b	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1a1e	60		rts				rts
.1a1f					UnarySgn:
.1a1f	20 bc 18	jsr $18bc			jsr 	EvaluateNumeric
.1a22	b0 07		bcs $1a2b			bcs 	_USFloat
.1a24	20 b6 1e	jsr $1eb6			jsr 	MInt32Sign
.1a27	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1a2a	60		rts				rts
.1a2b					_USFloat:
.1a2b	8a		txa				txa
.1a2c	a2 0e		ldx #$0e		ldx	#14
.1a2e	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1a31	aa		tax				tax
.1a32	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1a35	60		rts				rts
.1a36					UnaryPeek:
.1a36	20 62 1a	jsr $1a62			jsr 	PDLCode
.1a39	4c 56 1a	jmp $1a56			jmp 	PDLByte0
.1a3c					UnaryDeek:
.1a3c	20 62 1a	jsr $1a62			jsr 	PDLCode
.1a3f	4c 50 1a	jmp $1a50			jmp 	PDLByte1
.1a42					UnaryLeek:
.1a42	20 62 1a	jsr $1a62			jsr 	PDLCode
.1a45	a0 03		ldy #$03			ldy 	#3
.1a47	b1 04		lda ($04),y			lda 	(temp0),y
.1a49	95 60		sta $60,x			sta 	esInt3,x
.1a4b	88		dey				dey
.1a4c	b1 04		lda ($04),y			lda 	(temp0),y
.1a4e	95 58		sta $58,x			sta 	esInt2,x
.1a50					PDLByte1:
.1a50	a0 01		ldy #$01			ldy 	#1
.1a52	b1 04		lda ($04),y			lda 	(temp0),y
.1a54	95 50		sta $50,x			sta 	esInt1,x
.1a56					PDLByte0:
.1a56	a0 00		ldy #$00			ldy 	#0
.1a58	b1 04		lda ($04),y			lda 	(temp0),y
.1a5a	95 48		sta $48,x			sta 	esInt0,x
.1a5c	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1a5e	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen 			; check right and return
.1a61	60		rts				rts
.1a62					PDLCode:
.1a62	20 d2 18	jsr $18d2			jsr 	EvaluateInteger
.1a65	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1a67	85 04		sta $04				sta 	temp0
.1a69	b5 50		lda $50,x			lda 	esInt1,x
.1a6b	85 05		sta $05				sta 	temp0+1
.1a6d	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1a6f	95 50		sta $50,x			sta 	esInt1,x
.1a71	95 58		sta $58,x			sta 	esInt2,x
.1a73	95 60		sta $60,x			sta 	esInt3,x
.1a75	84 0c		sty $0c				sty 	tempShort 					; save Y
.1a77	60		rts				rts
.1a78					Unary_Random:
.1a78	20 f9 1e	jsr $1ef9			jsr 	MInt32Random 				; generate random number.
.1a7b	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1a7d	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1a7f	f0 08		beq $1a89			beq 	_URExit
.1a81	e8		inx				inx 								; load range 0..r-1 into +1
.1a82	20 d2 18	jsr $18d2			jsr 	EvaluateInteger
.1a85	ca		dex				dex
.1a86	20 2a 1d	jsr $1d2a			jsr 	MInt32Modulus 				; calculate random % modulus
.1a89					_URExit:
.1a89	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen 			; check right and return
.1a8c	60		rts				rts
.1a8d					Unary_Min:
.1a8d	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1a8f	d0 02		bne $1a93			bne 	UnaryMBody
.1a91					Unary_Max:
.1a91	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1a93					UnaryMBody:
.1a93	48		pha				pha 								; save comparator on stack.
.1a94	20 b3 18	jsr $18b3			jsr 	Evaluate 					; get the first thing to check
.1a97					_UnaryMLoop:
.1a97	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1a99	c8		iny				iny
.1a9a	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1a9c	f0 09		beq $1aa7			beq 	_UnaryMExit
.1a9e	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1aa0	f0 07		beq $1aa9			beq 	_UnaryMCompare
.1aa2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1aa4	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1aa7					_UnaryMExit:
.1aa7	68		pla				pla 								; throw comparator and return.
.1aa8	60		rts				rts
.1aa9					_UnaryMCompare:
.1aa9	e8		inx				inx 								; get the 2nd thing to evaluate
.1aaa	20 b3 18	jsr $18b3			jsr 	Evaluate
.1aad	ca		dex				dex
.1aae	20 64 16	jsr $1664			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1ab1	85 0c		sta $0c				sta 	tempShort 					; save result
.1ab3	68		pla				pla 								; get what we need
.1ab4	48		pha				pha
.1ab5	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1ab7	d0 de		bne $1a97			bne 	_UnaryMLoop 				; no, try another value.
.1ab9	20 c9 1e	jsr $1ec9			jsr 	MInt32False 				; promote 2nd to 1st.
.1abc	20 b4 1d	jsr $1db4			jsr 	MInt32Add
.1abf	4c 97 1a	jmp $1a97			jmp 	_UnaryMLoop
.1ac2					Unary_Page:
.1ac2	20 c9 1e	jsr $1ec9			jsr 	MInt32False 				; zero
.1ac5	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1ac8	95 48		sta $48,x			sta 	esInt0,x
.1aca	ad c9 0a	lda $0ac9			lda 	basePage+1
.1acd	95 50		sta $50,x			sta 	esInt1,x
.1acf	60		rts				rts
.1ad0					UnaryReference:
.1ad0	a9 0f		lda #$0f			lda 	#15
.1ad2	20 aa 17	jsr $17aa			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1ad5	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1ad7	10 05		bpl $1ade			bpl 	UType
.1ad9	a9 00		lda #$00			lda 	#0 							; make it an integer
.1adb	95 40		sta $40,x			sta 	esType,x
.1add	60		rts				rts
.1ade					UType:
.1ade	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1ae0	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1ae3					UnaryHexMarker:
.1ae3	4c a4 18	jmp $18a4			jmp 	EvaluateIntegerTerm
.1ae6					UnaryComplement:
.1ae6	20 a4 18	jsr $18a4			jsr 	EvaluateIntegerTerm
.1ae9	20 9d 1e	jsr $1e9d			jsr 	MInt32Not
.1aec	60		rts				rts
.1aed					UnaryIntToFloat:
.1aed	20 bc 18	jsr $18bc			jsr 	EvaluateNumeric
.1af0	b5 40		lda $40,x			lda 	esType,x
.1af2	d0 0b		bne $1aff			bne 	_UIFExit
.1af4	8a		txa				txa
.1af5	a2 1a		ldx #$1a		ldx	#26
.1af7	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1afa	aa		tax				tax
.1afb	a9 01		lda #$01			lda 	#1
.1afd	95 40		sta $40,x			sta 	esType,x
.1aff					_UIFExit:
.1aff	60		rts				rts
.1b00					UnaryFloatToInt:
.1b00	20 bc 18	jsr $18bc			jsr 	EvaluateNumeric
.1b03	b5 40		lda $40,x			lda 	esType,x
.1b05	f0 07		beq $1b0e			beq 	_UFIExit
.1b07	8a		txa				txa
.1b08	a2 12		ldx #$12		ldx	#18
.1b0a	20 fe 1f	jsr $1ffe		jsr	floatingpointHandler
.1b0d	aa		tax				tax
.1b0e					_UFIExit:
.1b0e	60		rts				rts
.1b0f					UnaryAlloc:
.1b0f	e8		inx				inx 								; evaluate memory required
.1b10	20 d2 18	jsr $18d2			jsr 	EvaluateInteger
.1b13	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1b16	ca		dex				dex
.1b17	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1b19	15 61		ora $61,x			ora 	esInt3+1,x
.1b1b	d0 19		bne $1b36			bne 	_UABadValue
.1b1d	20 c9 1e	jsr $1ec9			jsr 	MInt32False					; zero return.
.1b20	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1b22	95 50		sta $50,x			sta 	esInt1,x
.1b24	a5 0f		lda $0f				lda 	lowMemory
.1b26	95 48		sta $48,x			sta 	esInt0,x
.1b28	18		clc				clc 								; add alloc required.
.1b29	75 49		adc $49,x			adc 	esInt0+1,x
.1b2b	85 0f		sta $0f				sta 	lowMemory
.1b2d	a5 10		lda $10				lda 	lowMemory+1
.1b2f	75 51		adc $51,x			adc 	esInt1+1,x
.1b31	85 10		sta $10				sta 	lowMemory+1
.1b33	b0 01		bcs $1b36			bcs		_UABadValue 				; overflow definitely bad.
.1b35	60		rts				rts
.1b36					_UABadValue:
.1b36	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b38	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1b3b					UnaryTimer:
.1b3b	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1b3e	98		tya				tya
.1b3f	48		pha				pha
.1b40	20 f0 1e	jsr $1ef0			jsr 	MInt32Zero 					; zero result
.1b43	86 04		stx $04				stx 	temp0 						; returning in YA so can't use pshx
.1b45	a2 08		ldx #$08		ldx	#8
.1b47	20 ea 1f	jsr $1fea		jsr	deviceHandler
.1b4a	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1b4c	95 48		sta $48,x			sta 	esInt0,x
.1b4e	98		tya				tya
.1b4f	95 50		sta $50,x			sta 	esInt1,x
.1b51	68		pla				pla
.1b52	a8		tay				tay
.1b53	60		rts				rts
.1b54					UnaryInkey:
.1b54	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1b57	86 04		stx $04				stx 	temp0
.1b59	a2 02		ldx #$02		ldx	#2
.1b5b	20 ea 1f	jsr $1fea		jsr	deviceHandler
.1b5e	a6 04		ldx $04				ldx 	temp0
.1b60	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit
.1b63	60		rts				rts
.1b64					UnaryGet:
.1b64	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1b67	86 04		stx $04				stx 	temp0
.1b69					_UGLoop:
.1b69	a2 02		ldx #$02		ldx	#2
.1b6b	20 ea 1f	jsr $1fea		jsr	deviceHandler
.1b6e	c9 00		cmp #$00			cmp 	#0
.1b70	f0 f7		beq $1b69			beq 	_UGLoop
.1b72	a6 04		ldx $04				ldx 	temp0
.1b74	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit
.1b77	60		rts				rts
.1b78					UnarySys:
.1b78	20 d2 18	jsr $18d2			jsr 	EvaluateInteger 				; get the address
.1b7b	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen
.1b7e	20 26 11	jsr $1126			jsr 	TOSToTemp0 						; copy to temp0
.1b81	8a		txa				txa
.1b82	48		pha				pha
.1b83	98		tya				tya
.1b84	48		pha				pha
.1b85	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1b88	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1b8b	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1b8e	20 9d 1b	jsr $1b9d			jsr 	_CallTemp0
.1b91	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1b93	68		pla				pla
.1b94	a8		tay				tay
.1b95	68		pla				pla
.1b96	aa		tax				tax
.1b97	a5 0c		lda $0c				lda 	tempShort
.1b99	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit 					; return result.
.1b9c	60		rts				rts
.1b9d					_CallTemp0:
.1b9d	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1ba0					ExecChr:
.1ba0	20 da 18	jsr $18da			jsr 	EvaluateSmallInteger		; character number
.1ba3	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen				; right bracket
.1ba6	98		tya				tya
.1ba7	48		pha				pha
.1ba8	8a		txa				txa 								; A = stack
.1ba9	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1bab	a2 00		ldx #$00		ldx	#0
.1bad	20 55 22	jsr $2255		jsr	stringHandler
.1bb0	aa		tax				tax 								; X = stack
.1bb1	68		pla				pla
.1bb2	a8		tay				tay
.1bb3	60		rts				rts
.1bb4					ExecLeft:
.1bb4	20 c7 18	jsr $18c7			jsr 	EvaluateString 				; string to stack,X
.1bb7	20 49 1f	jsr $1f49			jsr 	CheckComma
.1bba	e8		inx				inx
.1bbb	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1bbd	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit
.1bc0	e8		inx				inx
.1bc1	20 da 18	jsr $18da			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1bc4					ExecSubstring:
.1bc4	ca		dex				dex 								; fix up X
.1bc5	ca		dex				dex
.1bc6	20 3c 1f	jsr $1f3c			jsr 	CheckRightParen 			; check closing right bracket.
.1bc9	8a		txa				txa 								; do the substring and exit.
.1bca	a2 08		ldx #$08		ldx	#8
.1bcc	20 55 22	jsr $2255		jsr	stringHandler
.1bcf	aa		tax				tax
.1bd0	60		rts				rts
.1bd1					ExecMid:
.1bd1	20 c7 18	jsr $18c7			jsr 	EvaluateString 				; string to stack,X
.1bd4	20 49 1f	jsr $1f49			jsr 	CheckComma
.1bd7	e8		inx				inx
.1bd8	20 da 18	jsr $18da			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1bdb	c9 00		cmp #$00			cmp 	#0
.1bdd	f0 15		beq $1bf4			beq 	_EMValue
.1bdf	e8		inx				inx
.1be0	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1be2	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit
.1be5	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1be7	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1be9	f0 d9		beq $1bc4			beq 	ExecSubString
.1beb	20 49 1f	jsr $1f49			jsr 	CheckComma
.1bee	20 da 18	jsr $18da			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1bf1	4c c4 1b	jmp $1bc4			jmp 	ExecSubString
.1bf4					_EMValue:
.1bf4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1bf6	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1bf9					ExecRight:
.1bf9	20 c7 18	jsr $18c7			jsr 	EvaluateString 				; string to stack,X
.1bfc	20 49 1f	jsr $1f49			jsr 	CheckComma
.1bff	e8		inx				inx
.1c00	20 da 18	jsr $18da			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1c03	ca		dex				dex
.1c04	98		tya				tya
.1c05	48		pha				pha
.1c06	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1c08	85 04		sta $04				sta 	temp0
.1c0a	b5 50		lda $50,x			lda 	esInt1,x
.1c0c	85 05		sta $05				sta 	temp0+1
.1c0e	a0 00		ldy #$00			ldy 	#0 							; point to length
.1c10	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1c12	18		clc				clc 								; add 1.
.1c13	69 01		adc #$01			adc 	#1
.1c15	38		sec				sec
.1c16	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1c18	f0 02		beq $1c1c			beq		_ERMake1 					; if zero, make it 1.
.1c1a	b0 02		bcs $1c1e			bcs		_EROkay
.1c1c					_ERMake1:
.1c1c	a9 01		lda #$01			lda 	#1 							; start position.
.1c1e					_EROkay:
.1c1e	e8		inx				inx 								; set start pos.
.1c1f	95 48		sta $48,x			sta 	esInt0,x
.1c21	e8		inx				inx
.1c22	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1c24	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit
.1c27	68		pla				pla
.1c28	a8		tay				tay
.1c29	4c c4 1b	jmp $1bc4			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1c2c					MInt32And:
.1c2c	b5 48		lda $48,x			lda 	esInt0,x
.1c2e	35 49		and $49,x			and 	esInt0+1,x
.1c30	95 48		sta $48,x			sta 	esInt0,x
.1c32	b5 50		lda $50,x			lda 	esInt1,x
.1c34	35 51		and $51,x			and 	esInt1+1,x
.1c36	95 50		sta $50,x			sta 	esInt1,x
.1c38	b5 58		lda $58,x			lda 	esInt2,x
.1c3a	35 59		and $59,x			and 	esInt2+1,x
.1c3c	95 58		sta $58,x			sta 	esInt2,x
.1c3e	b5 60		lda $60,x			lda 	esInt3,x
.1c40	35 61		and $61,x			and 	esInt3+1,x
.1c42	95 60		sta $60,x			sta 	esInt3,x
.1c44	60		rts				rts
.1c45					MInt32Or:
.1c45	b5 48		lda $48,x			lda 	esInt0,x
.1c47	15 49		ora $49,x			ora 	esInt0+1,x
.1c49	95 48		sta $48,x			sta 	esInt0,x
.1c4b	b5 50		lda $50,x			lda 	esInt1,x
.1c4d	15 51		ora $51,x			ora 	esInt1+1,x
.1c4f	95 50		sta $50,x			sta 	esInt1,x
.1c51	b5 58		lda $58,x			lda 	esInt2,x
.1c53	15 59		ora $59,x			ora 	esInt2+1,x
.1c55	95 58		sta $58,x			sta 	esInt2,x
.1c57	b5 60		lda $60,x			lda 	esInt3,x
.1c59	15 61		ora $61,x			ora 	esInt3+1,x
.1c5b	95 60		sta $60,x			sta 	esInt3,x
.1c5d	60		rts				rts
.1c5e					MInt32Xor:
.1c5e	b5 48		lda $48,x			lda 	esInt0,x
.1c60	55 49		eor $49,x			eor 	esInt0+1,x
.1c62	95 48		sta $48,x			sta 	esInt0,x
.1c64	b5 50		lda $50,x			lda 	esInt1,x
.1c66	55 51		eor $51,x			eor 	esInt1+1,x
.1c68	95 50		sta $50,x			sta 	esInt1,x
.1c6a	b5 58		lda $58,x			lda 	esInt2,x
.1c6c	55 59		eor $59,x			eor 	esInt2+1,x
.1c6e	95 58		sta $58,x			sta 	esInt2,x
.1c70	b5 60		lda $60,x			lda 	esInt3,x
.1c72	55 61		eor $61,x			eor 	esInt3+1,x
.1c74	95 60		sta $60,x			sta 	esInt3,x
.1c76	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1c77					MInt32Compare:
.1c77	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1c79	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1c7b	d0 13		bne $1c90			bne 	MInt32Compare2
.1c7d	b5 50		lda $50,x			lda 	esInt1,x
.1c7f	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1c81	d0 0d		bne $1c90			bne 	MInt32Compare2
.1c83	b5 58		lda $58,x			lda 	esInt2,x
.1c85	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1c87	d0 07		bne $1c90			bne 	MInt32Compare2
.1c89	b5 60		lda $60,x			lda 	esInt3,x
.1c8b	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1c8d	d0 01		bne $1c90			bne 	MInt32Compare2
.1c8f	60		rts				rts
.1c90					MInt32Compare2:
.1c90	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1c92	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1c94	b5 50		lda $50,x			lda		esInt1,x
.1c96	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1c98	b5 58		lda $58,x			lda		esInt2,x
.1c9a	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1c9c	b5 60		lda $60,x			lda		esInt3,x
.1c9e	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1ca0	50 02		bvc $1ca4			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1ca2	49 80		eor #$80			eor 	#$80
.1ca4					_I32LNoOverflow
.1ca4	30 03		bmi $1ca9			bmi 	MInt32CLess					; if -ve then return $FF
.1ca6	a9 01		lda #$01			lda 	#$01						; else return $01
.1ca8	60		rts				rts
.1ca9					MInt32CLess:
.1ca9	a9 ff		lda #$ff			lda 	#$FF
.1cab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1cac					MInt32SDivide:
.1cac	98		tya				tya  								; save Y, which is the count of negations
.1cad	48		pha				pha
.1cae	a0 00		ldy #$00			ldy 	#0 							; zero count
.1cb0	20 c8 1c	jsr $1cc8			jsr 	_MInt32SRemSign 			; unsign TOS
.1cb3	e8		inx				inx 								; unsign TOS+1
.1cb4	20 c8 1c	jsr $1cc8			jsr 	_MInt32SRemSign
.1cb7	ca		dex				dex
.1cb8	98		tya				tya 								; save sign count on stack
.1cb9	48		pha				pha
.1cba	20 d1 1c	jsr $1cd1			jsr 	MInt32UDivide 				; unsigned division
.1cbd	68		pla				pla 								; get sign count back
.1cbe	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1cc0	f0 03		beq $1cc5			beq 	_I32SNoNeg
.1cc2	20 83 1e	jsr $1e83			jsr 	MInt32Negate
.1cc5					_I32SNoNeg:
.1cc5	68		pla				pla 								; restoe Y and exit
.1cc6	a8		tay				tay
.1cc7	60		rts				rts
.1cc8					_MInt32SRemSign:
.1cc8	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1cca	10 04		bpl $1cd0			bpl 	_MInt32SRSExit
.1ccc	c8		iny				iny 								; increment the sign count
.1ccd	20 83 1e	jsr $1e83			jsr 	MInt32Negate 				; negate the value.
.1cd0					_MInt32SRSExit:
.1cd0	60		rts				rts
.1cd1					MInt32UDivide:
.1cd1	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1cd3	15 51		ora $51,x			ora 	esInt1+1,x
.1cd5	15 52		ora $52,x			ora 	esInt1+2,x
.1cd7	15 53		ora $53,x			ora 	esInt1+3,x
.1cd9	f0 4a		beq $1d25			beq 	_MInt32DZero
.1cdb	e8		inx				inx 								; clear A
.1cdc	e8		inx				inx
.1cdd	20 c9 1e	jsr $1ec9			jsr 	MInt32False
.1ce0	ca		dex				dex
.1ce1	ca		dex				dex
.1ce2	98		tya				tya 								; save Y on the stack
.1ce3	48		pha				pha
.1ce4	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1ce6					_MInt32UDLoop:
.1ce6	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1ce8	36 50		rol $50,x			rol 	esInt1,x
.1cea	36 58		rol $58,x			rol 	esInt2,x
.1cec	36 60		rol $60,x			rol 	esInt3,x
.1cee	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1cf0	36 52		rol $52,x			rol 	esInt1+2,x
.1cf2	36 5a		rol $5a,x			rol 	esInt2+2,x
.1cf4	36 62		rol $62,x			rol 	esInt3+2,x
.1cf6	38		sec				sec 								; calculate A-M saving result on the stack
.1cf7	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1cf9	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1cfb	48		pha				pha
.1cfc	b5 52		lda $52,x			lda 	esInt1+2,x
.1cfe	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1d00	48		pha				pha
.1d01	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1d03	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1d05	48		pha				pha
.1d06	b5 62		lda $62,x			lda 	esInt3+2,x
.1d08	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1d0a	90 10		bcc $1d1c			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1d0c	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1d0e	68		pla				pla
.1d0f	95 5a		sta $5a,x			sta 	esInt2+2,x
.1d11	68		pla				pla
.1d12	95 52		sta $52,x			sta 	esInt1+2,x
.1d14	68		pla				pla
.1d15	95 4a		sta $4a,x			sta 	esInt0+2,x
.1d17	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1d19	4c 1f 1d	jmp $1d1f			jmp 	_MInt32Next 					; do the next iteration
.1d1c					_MInt32NoSubtract:
.1d1c	68		pla				pla
.1d1d	68		pla				pla
.1d1e	68		pla				pla
.1d1f					_MInt32Next:
.1d1f	88		dey				dey 								; do this 32 times.
.1d20	d0 c4		bne $1ce6			bne 	_MInt32UDLoop
.1d22	68		pla				pla 								; restore Y and exit
.1d23	a8		tay				tay
.1d24	60		rts				rts
.1d25					_MInt32DZero:
.1d25	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1d27	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1d2a					MInt32Modulus:
.1d2a	20 d1 1c	jsr $1cd1			jsr 	MInt32UDivide 				; do the division.
.1d2d	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1d2f	95 60		sta $60,x			sta 	esInt3,x
.1d31	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1d33	95 58		sta $58,x			sta 	esInt2,x
.1d35	b5 52		lda $52,x			lda 	esInt1+2,x
.1d37	95 50		sta $50,x			sta 	esInt1,x
.1d39	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1d3b	95 48		sta $48,x			sta 	esInt0,x
.1d3d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af4					fs32Length:
>0af4							.fill 	1
.1d3e					MInt32FromString:
.1d3e	85 0c		sta $0c				sta 	tempShort 					; save base
.1d40	98		tya				tya
.1d41	48		pha				pha
.1d42	a0 00		ldy #$00			ldy 	#0 							; get length
.1d44	b1 04		lda ($04),y			lda 	(temp0),y
.1d46	8d f4 0a	sta $0af4			sta 	fs32Length
.1d49	f0 65		beq $1db0			beq 	_I32FSFail2					; fail if length zero.
.1d4b	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1d4d	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1d4f	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1d51	d0 09		bne $1d5c			bne 	_I32FSNotNegative
.1d53	ad f4 0a	lda $0af4			lda 	fs32Length 					; get length back.
.1d56	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1d58	f0 56		beq $1db0			beq 	_I32FSFail2
.1d5a	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1d5c					_I32FSNotNegative:
.1d5c	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1d5e	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1d60	d0 02		bne $1d64			bne 	_I32FSNN2
.1d62	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1d64					_I32FSNN2:
.1d64	48		pha				pha 								; save base + final sign on stack.
.1d65	20 c9 1e	jsr $1ec9			jsr 	MInt32False 				; zero the return value.
.1d68					_I32FSMainLoop:
.1d68	68		pla				pla 								; get the base back into tempshort
.1d69	48		pha				pha
.1d6a	29 7f		and #$7f			and 	#$7F
.1d6c	85 0c		sta $0c				sta 	tempShort
.1d6e	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1d70	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1d72	90 02		bcc $1d76			bcc 	_I32FSNotLC
.1d74	e9 20		sbc #$20			sbc 	#32
.1d76					_I32FSNotLC:
.1d76	38		sec				sec 								; subtract 48 (ASCII "0")
.1d77	e9 30		sbc #$30			sbc 	#"0"
.1d79	90 34		bcc $1daf			bcc 	_I32FSFail 					; nothing more to do.
.1d7b	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1d7d	90 06		bcc $1d85			bcc 	_I32FSValidate
.1d7f	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1d81	90 2c		bcc $1daf			bcc 	_I32FSFail
.1d83	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1d85					_I32FSValidate:
.1d85	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1d87	b0 26		bcs $1daf			bcs 	_I32FSFail 					; sorry, too large for this base.
.1d89	48		pha				pha 								; save the new digit value.
.1d8a	e8		inx				inx 								; put base into next slot.
.1d8b	a5 0c		lda $0c				lda 	tempShort
.1d8d	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit
.1d90	ca		dex				dex
.1d91	20 e8 1d	jsr $1de8			jsr 	MInt32Multiply 				; multiply current by the base
.1d94	e8		inx				inx
.1d95	68		pla				pla  								; put additive into next slot
.1d96	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit
.1d99	ca		dex				dex
.1d9a	20 b4 1d	jsr $1db4			jsr 	MInt32Add 					; and add it
.1d9d	c8		iny				iny 								; look at next character
.1d9e	cc f4 0a	cpy $0af4			cpy 	fs32Length 					; until > length.
.1da1	f0 c5		beq $1d68			beq 	_I32FSMainLoop
.1da3	90 c3		bcc $1d68			bcc 	_I32FSMainLoop
.1da5					_I32FSDone:
.1da5	68		pla				pla 								; get base/final sign back
.1da6	10 03		bpl $1dab			bpl 	_I32FSNN3
.1da8	20 83 1e	jsr $1e83			jsr 	MInt32Negate 				; negate the result.
.1dab					_I32FSNN3:
.1dab	68		pla				pla
.1dac	a8		tay				tay
.1dad	38		sec				sec
.1dae	60		rts				rts
.1daf					_I32FSFail:
.1daf	68		pla				pla
.1db0					_I32FSFail2:
.1db0	68		pla				pla
.1db1	a8		tay				tay
.1db2	18		clc				clc
.1db3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1db4					MInt32Add:
.1db4	18		clc				clc
.1db5	b5 48		lda $48,x			lda 	esInt0,x
.1db7	75 49		adc $49,x			adc 	esInt0+1,x
.1db9	95 48		sta $48,x			sta 	esInt0,x
.1dbb	b5 50		lda $50,x			lda 	esInt1,x
.1dbd	75 51		adc $51,x			adc 	esInt1+1,x
.1dbf	95 50		sta $50,x			sta 	esInt1,x
.1dc1	b5 58		lda $58,x			lda 	esInt2,x
.1dc3	75 59		adc $59,x			adc 	esInt2+1,x
.1dc5	95 58		sta $58,x			sta 	esInt2,x
.1dc7	b5 60		lda $60,x			lda 	esInt3,x
.1dc9	75 61		adc $61,x			adc 	esInt3+1,x
.1dcb	95 60		sta $60,x			sta 	esInt3,x
.1dcd	60		rts				rts
.1dce					MInt32Sub:
.1dce	38		sec				sec
.1dcf	b5 48		lda $48,x			lda 	esInt0,x
.1dd1	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1dd3	95 48		sta $48,x			sta 	esInt0,x
.1dd5	b5 50		lda $50,x			lda 	esInt1,x
.1dd7	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1dd9	95 50		sta $50,x			sta 	esInt1,x
.1ddb	b5 58		lda $58,x			lda 	esInt2,x
.1ddd	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1ddf	95 58		sta $58,x			sta 	esInt2,x
.1de1	b5 60		lda $60,x			lda 	esInt3,x
.1de3	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1de5	95 60		sta $60,x			sta 	esInt3,x
.1de7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1de8					MInt32Multiply:
.1de8	e8		inx				inx 								; copy 2nd -> 3rd
.1de9	20 0e 1e	jsr $1e0e			jsr 	MInt32CopyUp
.1dec	ca		dex				dex
.1ded	20 0e 1e	jsr $1e0e			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1df0	20 c9 1e	jsr $1ec9			jsr 	MInt32False 					; zero 1st.
.1df3					_I32Loop:
.1df3	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1df5	29 01		and #$01			and 	#1
.1df7	f0 03		beq $1dfc			beq 	_I32NoAdd 					; if set
.1df9	20 b4 1d	jsr $1db4			jsr 	MInt32Add 					; add 2nd to 1st.
.1dfc					_I32NoAdd:
.1dfc	e8		inx				inx 								; shift 2nd left
.1dfd	20 de 1e	jsr $1ede			jsr 	MInt32ShiftLeft
.1e00	e8		inx				inx  								; shift 3rd right
.1e01	20 e7 1e	jsr $1ee7			jsr 	MInt32ShiftRight
.1e04	20 f0 1e	jsr $1ef0			jsr 	MInt32Zero 					; check if zero.
.1e07	08		php				php 								; save status bits
.1e08	ca		dex				dex 	 							; point back to 1st
.1e09	ca		dex				dex
.1e0a	28		plp				plp 								; get status bits
.1e0b	d0 e6		bne $1df3			bne 	_I32Loop 					; if non-zero keep going.
.1e0d	60		rts				rts
.1e0e					MInt32CopyUp:
.1e0e	b5 48		lda $48,x			lda 	esInt0,x
.1e10	95 49		sta $49,x			sta 	esInt0+1,x
.1e12	b5 50		lda $50,x			lda 	esInt1,x
.1e14	95 51		sta $51,x			sta 	esInt1+1,x
.1e16	b5 58		lda $58,x			lda 	esInt2,x
.1e18	95 59		sta $59,x			sta 	esInt2+1,x
.1e1a	b5 60		lda $60,x			lda 	esInt3,x
.1e1c	95 61		sta $61,x			sta 	esInt3+1,x
.1e1e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af5					MCharCount:	.fill 	1						; count of converted characters
.1e1f					MInt32ToString:
.1e1f	48		pha				pha 								; save base
.1e20	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1e22	a9 00		lda #$00			lda 	#0
.1e24	8d f5 0a	sta $0af5			sta 	MCharCount 					; clear character count to 0
.1e27	98		tya				tya
.1e28	48		pha				pha
.1e29	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1e2b	10 10		bpl $1e3d			bpl 	_I32TSUnsigned
.1e2d	48		pha				pha 								; save base on stack.
.1e2e	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1e30	10 08		bpl $1e3a			bpl 	_I32TSNoFlip
.1e32	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1e34	20 70 1e	jsr $1e70			jsr 	MI32WriteCharacter
.1e37	20 83 1e	jsr $1e83			jsr 	MInt32Negate 				; negate the value.
.1e3a					_I32TSNoFlip:
.1e3a	68		pla				pla 								; get the base back
.1e3b	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1e3d					_I32TSUnsigned:
.1e3d	20 4b 1e	jsr $1e4b			jsr 	MI32DivideWrite 			; recursive code to output string.
.1e40	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1e42	ad f5 0a	lda $0af5			lda 	MCharCount
.1e45	91 04		sta ($04),y			sta 	(temp0),y
.1e47	68		pla				pla
.1e48	a8		tay				tay
.1e49	68		pla				pla
.1e4a	60		rts				rts
.1e4b					MI32DivideWrite:
.1e4b	48		pha				pha 								; save the divisor/base
.1e4c	e8		inx				inx 								; write in the dividing position.
.1e4d	20 d8 1e	jsr $1ed8			jsr 	MInt32Set8Bit
.1e50	ca		dex				dex
.1e51	20 d1 1c	jsr $1cd1			jsr 	MInt32UDivide 				; divide number by base.
.1e54	68		pla				pla 								; get the base into Y
.1e55	a8		tay				tay
.1e56	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1e58	48		pha				pha
.1e59	20 f0 1e	jsr $1ef0			jsr 	MInt32Zero 					; is the result zero ?
.1e5c	f0 04		beq $1e62			beq 	_I32NoRecurse 				; if so, don't recurse.
.1e5e	98		tya				tya 								; put base into A
.1e5f	20 4b 1e	jsr $1e4b			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1e62					_I32NoRecurse:
.1e62	68		pla				pla 								; get the remainder back
.1e63	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1e65	90 02		bcc $1e69			bcc 	_I32NotHex
.1e67	69 06		adc #$06			adc 	#7-1
.1e69					_I32NotHex:
.1e69	18		clc				clc 								; make it ASCII
.1e6a	69 30		adc #$30			adc 	#48
.1e6c	20 70 1e	jsr $1e70			jsr 	MI32WriteCharacter 			; write the character out
.1e6f	60		rts				rts 								; and exit.
.1e70					MI32WriteCharacter:
.1e70	ee f5 0a	inc $0af5			inc 	MCharCount 					; bump count (space for leading count)
.1e73	ac f5 0a	ldy $0af5			ldy 	MCharCount 					; get position
.1e76	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1e78	c8		iny				iny
.1e79	a9 00		lda #$00			lda 	#0
.1e7b	91 04		sta ($04),y			sta 	(temp0),y
.1e7d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af6					MSeed32:	.fill 	4							; random number seed.
.1e7e					MInt32Absolute:
.1e7e	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1e80	30 01		bmi $1e83			bmi 	MInt32Negate
.1e82	60		rts				rts
.1e83					MInt32Negate:
.1e83	38		sec				sec
.1e84	a9 00		lda #$00			lda 	#0
.1e86	f5 48		sbc $48,x			sbc 	esInt0,x
.1e88	95 48		sta $48,x			sta 	esInt0,x
.1e8a	a9 00		lda #$00			lda 	#0
.1e8c	f5 50		sbc $50,x			sbc 	esInt1,x
.1e8e	95 50		sta $50,x			sta 	esInt1,x
.1e90	a9 00		lda #$00			lda 	#0
.1e92	f5 58		sbc $58,x			sbc 	esInt2,x
.1e94	95 58		sta $58,x			sta 	esInt2,x
.1e96	a9 00		lda #$00			lda 	#0
.1e98	f5 60		sbc $60,x			sbc 	esInt3,x
.1e9a	95 60		sta $60,x			sta 	esInt3,x
.1e9c	60		rts				rts
.1e9d					MInt32Not:
.1e9d	b5 48		lda $48,x			lda 	esInt0,x
.1e9f	49 ff		eor #$ff			eor 	#$FF
.1ea1	95 48		sta $48,x			sta 	esInt0,x
.1ea3	b5 50		lda $50,x			lda 	esInt1,x
.1ea5	49 ff		eor #$ff			eor 	#$FF
.1ea7	95 50		sta $50,x			sta 	esInt1,x
.1ea9	b5 58		lda $58,x			lda 	esInt2,x
.1eab	49 ff		eor #$ff			eor 	#$FF
.1ead	95 58		sta $58,x			sta 	esInt2,x
.1eaf	b5 60		lda $60,x			lda 	esInt3,x
.1eb1	49 ff		eor #$ff			eor 	#$FF
.1eb3	95 60		sta $60,x			sta 	esInt3,x
.1eb5	60		rts				rts
.1eb6					MInt32Sign:
.1eb6	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1eb8	30 0b		bmi $1ec5			bmi 	MInt32True 					; if set return -1 (true)
.1eba	20 f0 1e	jsr $1ef0			jsr 	MInt32Zero 					; is it zero ?
.1ebd	f0 0a		beq $1ec9			beq 	MInt32False 					; if zero return 0 (false)
.1ebf	20 c9 1e	jsr $1ec9			jsr 	MInt32False 					; > 0 return 1
.1ec2	f6 48		inc $48,x			inc 	esInt0,x
.1ec4	60		rts				rts
.1ec5					MInt32True:
.1ec5	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1ec7	d0 02		bne $1ecb			bne 	MInt32WriteAll
.1ec9					MInt32False:
.1ec9	a9 00		lda #$00			lda 	#0
.1ecb					MInt32WriteAll:
.1ecb	95 48		sta $48,x			sta 	esInt0,x
.1ecd					MInt32Write123:
.1ecd	95 50		sta $50,x			sta 	esInt1,x
.1ecf	95 58		sta $58,x			sta 	esInt2,x
.1ed1	95 60		sta $60,x			sta 	esInt3,x
.1ed3	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1ed5	95 40		sta $40,x			sta 	esType,x
.1ed7	60		rts				rts
.1ed8					MInt32Set8Bit:
.1ed8	95 48		sta $48,x			sta 	esInt0,x
.1eda	a9 00		lda #$00			lda 	#0
.1edc	f0 ef		beq $1ecd			beq		MInt32Write123
.1ede					MInt32ShiftLeft:
.1ede	16 48		asl $48,x			asl 	esInt0,x
.1ee0	36 50		rol $50,x			rol	 	esInt1,x
.1ee2	36 58		rol $58,x			rol	 	esInt2,x
.1ee4	36 60		rol $60,x			rol	 	esInt3,x
.1ee6	60		rts				rts
.1ee7					MInt32ShiftRight:
.1ee7	56 60		lsr $60,x			lsr 	esInt3,x
.1ee9	76 58		ror $58,x			ror 	esInt2,x
.1eeb	76 50		ror $50,x			ror 	esInt1,x
.1eed	76 48		ror $48,x			ror 	esInt0,x
.1eef	60		rts				rts
.1ef0					MInt32Zero:
.1ef0	b5 48		lda $48,x			lda 	esInt0,x
.1ef2	15 50		ora $50,x			ora 	esInt1,x
.1ef4	15 58		ora $58,x			ora 	esInt2,x
.1ef6	15 60		ora $60,x			ora 	esInt3,x
.1ef8	60		rts				rts
.1ef9					MInt32Random:
.1ef9	98		tya				tya
.1efa	48		pha				pha
.1efb	a0 07		ldy #$07			ldy 	#7
.1efd	ad f6 0a	lda $0af6			lda 	MSeed32+0
.1f00	d0 03		bne $1f05			bne 	_Random1
.1f02	a8		tay				tay
.1f03	a9 aa		lda #$aa			lda		#$AA
.1f05					_Random1:
.1f05	0a		asl a				asl 	a
.1f06	2e f7 0a	rol $0af7			rol 	MSeed32+1
.1f09	2e f8 0a	rol $0af8			rol 	MSeed32+2
.1f0c	2e f9 0a	rol $0af9			rol 	MSeed32+3
.1f0f	90 02		bcc $1f13			bcc 	_Random2
.1f11	49 c5		eor #$c5			eor 	#$C5
.1f13					_Random2:
.1f13	88		dey				dey
.1f14	d0 ef		bne $1f05			bne 	_Random1
.1f16	8d f6 0a	sta $0af6			sta 	MSeed32+0
.1f19	95 48		sta $48,x			sta 	esInt0,x
.1f1b	ad f7 0a	lda $0af7			lda 	MSeed32+1
.1f1e	95 50		sta $50,x			sta 	esInt1,x
.1f20	ad f8 0a	lda $0af8			lda 	MSeed32+2
.1f23	95 58		sta $58,x			sta 	esInt2,x
.1f25	ad f9 0a	lda $0af9			lda 	MSeed32+3
.1f28	95 60		sta $60,x			sta 	esInt3,x
.1f2a	68		pla				pla
.1f2b	a8		tay				tay
.1f2c	a9 00		lda #$00			lda 	#0
.1f2e	95 40		sta $40,x			sta 	esType,x
.1f30	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.1f31					CheckToken:
.1f31	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1f33	d0 02		bne $1f37			bne 	_CTError
.1f35	c8		iny				iny
.1f36	60		rts				rts
.1f37					_CTError:
.1f37	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1f39	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1f3c					CheckRightParen:
.1f3c	b1 02		lda ($02),y			lda 	(codePtr),y
.1f3e	c8		iny				iny
.1f3f	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1f41	d0 01		bne $1f44			bne 	_CRPError
.1f43	60		rts				rts
.1f44					_CRPError:
.1f44	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.1f46	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1f49					CheckComma:
.1f49	b1 02		lda ($02),y			lda 	(codePtr),y
.1f4b	c8		iny				iny
.1f4c	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1f4e	d0 01		bne $1f51			bne 	_CCError
.1f50	60		rts				rts
.1f51					_CCError:
.1f51	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.1f53	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2542					ScanForward:
.2542	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2544	86 07		stx $07				stx 	temp1+1
.2546	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2548	85 08		sta $08				sta 	temp2
.254a	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.254c	c8		iny				iny
.254d	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.254f	d0 08		bne $2559			bne 	_SFNoCheck 					; if so, check token against entered values.
.2551	c5 06		cmp $06				cmp 	temp1
.2553	f0 24		beq $2579			beq 	_SFExit
.2555	c5 07		cmp $07				cmp 	temp1+1
.2557	f0 20		beq $2579			beq 	_SFExit
.2559					_SFNoCheck:
.2559	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.255b	90 ed		bcc $254a			bcc 	_SFLoop
.255d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.255f	90 19		bcc $257a			bcc 	_SFSpecials
.2561	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2563	90 e5		bcc $254a			bcc 	_SFLoop
.2565	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2567	b0 e1		bcs $254a			bcs 	_SFLoop
.2569	aa		tax				tax  								; token in X, and look up the adjuster.
.256a	bd ba 18	lda $18ba,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.256d	38		sec				sec 								; convert to an offset
.256e	e9 81		sbc #$81			sbc 	#$81
.2570	18		clc				clc 								; add to depth
.2571	65 08		adc $08				adc 	temp2
.2573	85 08		sta $08				sta 	temp2
.2575	10 d3		bpl $254a			bpl 	_SFLoop 					; +ve okay to continue
.2577	30 2a		bmi $25a3			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2579	60		rts		_SFExit:rts
.257a					_SFSpecials:
.257a	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.257c	f0 14		beq $2592			beq 	_SFNextLine
.257e	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2580	f0 26		beq $25a8			beq 	_SFFloatSkip
.2582	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2584	f0 04		beq $258a			beq 	_SFSkipString
.2586	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2587	4c 4a 25	jmp $254a			jmp 	_SFLoop 					; token.
.258a					_SFSkipString:
.258a	98		tya				tya
.258b	38		sec				sec
.258c	71 02		adc ($02),y			adc 	(codePtr),y
.258e	a8		tay				tay
.258f	4c 4a 25	jmp $254a			jmp 	_SFLoop
.2592					_SFNextLine:
.2592	a0 00		ldy #$00			ldy 	#0 							; get offset
.2594	b1 02		lda ($02),y			lda 	(codePtr),y
.2596	18		clc				clc 								; add to code pointer.
.2597	65 02		adc $02				adc 	codePtr
.2599	85 02		sta $02				sta 	codePtr
.259b	90 02		bcc $259f			bcc		_SFNLNoCarry
.259d	e6 03		inc $03				inc 	codePtr+1
.259f					_SFNLNoCarry:
.259f	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.25a1	d0 a7		bne $254a			bne		_SFLoop 					; no go round again
.25a3					_SFError:
.25a3	a2 13		ldx #$13			ldx 	#ErrorID_Struct
.25a5	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.25a8					_SFFloatSkip:
.25a8	4c 97 12	jmp $1297			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.1f56					RSReset:
.1f56	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.1f58	85 78		sta $78				sta 	rsPointer
.1f5a	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.1f5c	85 79		sta $79				sta 	1+(rsPointer)
.1f5e	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1f60	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.1f63	60		rts				rts
.1f64					RSClaim:
.1f64	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.1f66	48		pha				pha 								; save marker on stack.
.1f67	8a		txa				txa 								; get bytes required.
.1f68	38		sec				sec
.1f69	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1f6b	65 78		adc $78				adc 	rsPointer
.1f6d	85 78		sta $78				sta 	rsPointer
.1f6f	a5 79		lda $79				lda 	rsPointer+1
.1f71	69 ff		adc #$ff			adc 	#$FF
.1f73	85 79		sta $79				sta 	rsPointer+1
.1f75	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.1f77	90 08		bcc $1f81			bcc 	_RSCOverflow
.1f79	68		pla				pla 								; get marker back
.1f7a	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1f7c	91 78		sta ($78),y			sta 	(rsPointer),y
.1f7e	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1f80	60		rts				rts
.1f81					_RSCOverflow:
.1f81	a2 15		ldx #$15			ldx 	#ErrorID_RetStack
.1f83	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.1f86					RSFree:
.1f86	18		clc				clc
.1f87	65 78		adc $78				adc 	rsPointer
.1f89	85 78		sta $78				sta 	rsPointer
.1f8b	90 02		bcc $1f8f			bcc 	_RSFExit
.1f8d	e6 79		inc $79				inc 	rsPointer+1
.1f8f					_RSFExit:
.1f8f	60		rts				rts
.1f90					RSSavePosition:
.1f90	84 0c		sty $0c				sty 	tempShort 					; save Y position
.1f92	a8		tay				tay 								; this is where we write it.
.1f93	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1f95	91 78		sta ($78),y			sta 	(rsPointer),y
.1f97	c8		iny				iny
.1f98	a5 03		lda $03				lda 	codePtr+1
.1f9a	91 78		sta ($78),y			sta 	(rsPointer),y
.1f9c	c8		iny				iny
.1f9d	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.1f9f	91 78		sta ($78),y			sta 	(rsPointer),y
.1fa1	a8		tay				tay 								; fix Y back again to original value
.1fa2	60		rts				rts
.1fa3					RSLoadPosition:
.1fa3	a8		tay				tay
.1fa4	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1fa6	85 02		sta $02				sta 	codePtr
.1fa8	c8		iny				iny
.1fa9	b1 78		lda ($78),y			lda 	(rsPointer),y
.1fab	85 03		sta $03				sta 	codePtr+1
.1fad	c8		iny				iny
.1fae	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1fb0	a8		tay				tay 								; to Y
.1fb1	60		rts				rts

;******  Return to file: main/main.asm

.1fb2					mainHandler:
.1fb2	7c b5 1f	jmp ($1fb5,x)			jmp 	(mainVectors,x)
.1fb5					mainVectors:
>1fb5	ed 18					.word LinkEvaluate         ; index 0
>1fb7	f3 18					.word LinkEvaluateInteger  ; index 2
>1fb9	f9 18					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm

.1fbb					section_end_main:
.1fbb					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.1fbb					assemblerHandler:
.1fbb	7c be 1f	jmp ($1fbe,x)			jmp 	(assemblerVectors,x)
.1fbe					assemblerVectors:

;******  Return to file: basic.asm

.1fbe					section_end_assembler:
.1fbe					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.1fbe					IONewLine:
.1fbe	48		pha				pha
.1fbf	a9 0d		lda #$0d			lda 	#13
.1fc1	20 ce 1f	jsr $1fce			jsr 	IOPrintChar
.1fc4	68		pla				pla
.1fc5	60		rts				rts
.1fc6					IOTab:
.1fc6	48		pha				pha
.1fc7	a9 20		lda #$20			lda 	#32
.1fc9	20 ce 1f	jsr $1fce			jsr 	IOPrintChar
.1fcc	68		pla				pla
.1fcd	60		rts				rts
.1fce					IOPrintChar:
.1fce	aa		tax				tax
.1fcf	5a		phy				phy
.1fd0	8a		txa				txa
.1fd1	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1fd4	7a		ply				ply
.1fd5	60		rts				rts
.1fd6					IOInkey:
.1fd6	98		tya				tya
.1fd7	48		pha				pha
.1fd8	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1fdb	85 0c		sta $0c				sta 	tempShort
.1fdd	68		pla				pla
.1fde	a8		tay				tay
.1fdf	a5 0c		lda $0c				lda 	tempShort
.1fe1	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.1fe2					IOReadTimer:
.1fe2	20 de ff	jsr $ffde			jsr 	$FFDE
.1fe5	48		pha				pha
.1fe6	8a		txa				txa
.1fe7	a8		tay				tay
.1fe8	68		pla				pla
.1fe9	60		rts				rts

;******  Return to file: device/device.asm

.1fea					deviceHandler:
.1fea	7c ed 1f	jmp ($1fed,x)			jmp 	(deviceVectors,x)
.1fed					deviceVectors:
>1fed	be 1f					.word IONewLine            ; index 0
>1fef	d6 1f					.word IOInkey              ; index 2
>1ff1	ce 1f					.word IOPrintChar          ; index 4
>1ff3	c6 1f					.word IOTab                ; index 6
>1ff5	e2 1f					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm

.1ff7					section_end_device:
.1ff7					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1ff7					ErrorHandler:
.1ff7	a9 ee		lda #$ee			lda 	#$EE
.1ff9	a8		tay				tay
>1ffa	db						.byte 	$DB
.1ffb	4c fb 1f	jmp $1ffb	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1ffe					section_end_error:
.1ffe					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1ffe					floatingpointHandler:
.1ffe	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2000	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler

;******  Return to file: basic.asm

.2003					section_end_floatingpoint:
.2003					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.2003					interactionHandler:
.2003	7c 06 20	jmp ($2006,x)			jmp 	(interactionVectors,x)
.2006					interactionVectors:

;******  Return to file: basic.asm

.2006					section_end_interaction:
.2006					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2006					StringChrs:
.2006	aa		tax				tax 								; set up stack
.2007	a9 02		lda #$02			lda 	#2
.2009	20 c0 20	jsr $20c0			jsr 	AllocateSoftString
.200c	98		tya				tya
.200d	20 e6 20	jsr $20e6			jsr 	WriteSoftString
.2010	20 15 20	jsr $2015			jsr 	ReturnSoftString
.2013	8a		txa				txa
.2014	60		rts				rts
.2015					ReturnSoftString:
.2015	a5 7a		lda $7a				lda 	softMemAlloc
.2017	95 48		sta $48,x			sta 	esInt0,x
.2019	a5 7b		lda $7b				lda 	softMemAlloc+1
.201b	95 50		sta $50,x			sta 	esInt1,x
.201d	a9 00		lda #$00			lda 	#0
.201f	95 58		sta $58,x			sta 	esInt2,x
.2021	95 60		sta $60,x			sta 	esInt3,x
.2023	a9 40		lda #$40			lda 	#$40
.2025	95 40		sta $40,x			sta 	esType,x
.2027	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2028					STRCompare:
.2028	48		pha				pha 								; save A
.2029	aa		tax				tax 								; put stack pos in X
.202a	98		tya				tya
.202b	48		pha				pha
.202c	20 60 20	jsr $2060			jsr 	CopyStringPair
.202f	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2031	b1 04		lda ($04),y			lda 	(temp0),y
.2033	d1 06		cmp ($06),y			cmp 	(temp1),y
.2035	90 02		bcc $2039			bcc 	_SCNotSmaller
.2037	b1 06		lda ($06),y			lda 	(temp1),y
.2039					_SCNotSmaller:
.2039	aa		tax				tax 								; put that in X. We compare this many chars first.
.203a					_SCCompareLoop:
.203a	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.203c	f0 0c		beq $204a			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.203e	ca		dex				dex 								; decrement chars to compare.
.203f	c8		iny				iny 								; move to next character
.2040	38		sec				sec 								; calculate s1[y]-s2[y]
.2041	b1 04		lda ($04),y			lda 	(temp0),y
.2043	f1 06		sbc ($06),y			sbc 	(temp1),y
.2045	d0 0a		bne $2051			bne 	_SCReturnResult 			; if different return sign of A
.2047	4c 3a 20	jmp $203a			jmp 	_SCCompareLoop
.204a					_SCSameToEndShortest
.204a	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.204c	38		sec				sec
.204d	b1 04		lda ($04),y			lda 	(temp0),y
.204f	f1 06		sbc ($06),y			sbc 	(temp1),y
.2051					_SCReturnResult:
.2051	08		php				php 								; set return to zero preserving PSW.
.2052	a2 00		ldx #$00			ldx 	#0
.2054	28		plp				plp
.2055	f0 05		beq $205c			beq 	_SCExit 					; two values equal, then exit
.2057	ca		dex				dex 								; X = $FF
.2058	90 02		bcc $205c			bcc 	_SCExit 					; if 1st < 2nd then -1
.205a	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.205c					_SCExit:
.205c	68		pla				pla
.205d	a8		tay				tay
.205e	68		pla				pla
.205f	60		rts				rts
.2060					CopyStringPair:
.2060	b5 49		lda $49,x			lda 	esInt0+1,x
.2062	85 06		sta $06				sta 	temp1
.2064	b5 51		lda $51,x			lda 	esInt1+1,x
.2066	85 07		sta $07				sta 	temp1+1
.2068					CopyStringTop:
.2068	b5 48		lda $48,x			lda 	esInt0,x
.206a	85 04		sta $04				sta 	temp0
.206c	b5 50		lda $50,x			lda 	esInt1,x
.206e	85 05		sta $05				sta 	temp0+1
.2070	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2071					StringConcat:
.2071	aa		tax				tax									; stack pos in X
.2072	98		tya				tya
.2073	48		pha				pha
.2074	20 60 20	jsr $2060			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2077	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2078	a0 00		ldy #$00			ldy 	#0
.207a	b1 04		lda ($04),y			lda 	(temp0),y
.207c	71 06		adc ($06),y			adc 	(temp1),y
.207e	b0 1c		bcs $209c			bcs 	_SCError 					; just too many characters here.
.2080	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2082	b0 18		bcs $209c			bcs 	_SCError
.2084	20 c0 20	jsr $20c0			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2087	20 b7 20	jsr $20b7			jsr 	CopySoftToStack 			; copy that to the stack.
.208a	20 a1 20	jsr $20a1			jsr 	SCCopyTemp0 				; copy temp0
.208d	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.208f	85 04		sta $04				sta 	temp0
.2091	a5 07		lda $07				lda 	temp1+1
.2093	85 05		sta $05				sta 	temp0+1
.2095	20 a1 20	jsr $20a1			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2098	68		pla				pla
.2099	a8		tay				tay
.209a	8a		txa				txa 								; and A
.209b	60		rts				rts
.209c					_SCError:
.209c	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.209e	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.20a1					SCCopyTemp0:
.20a1	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.20a3	b1 04		lda ($04),y			lda 	(temp0),y
.20a5	85 08		sta $08				sta 	temp2
.20a7					_SCCopyLoop:
.20a7	a5 08		lda $08				lda 	temp2 						; done the lot
.20a9	f0 0b		beq $20b6			beq 	_SCCopyExit
.20ab	c6 08		dec $08				dec 	temp2
.20ad	c8		iny				iny 								; get next char
.20ae	b1 04		lda ($04),y			lda 	(temp0),y
.20b0	20 e6 20	jsr $20e6			jsr 	WriteSoftString 			; write to soft string.
.20b3	4c a7 20	jmp $20a7			jmp 	_SCCopyLoop
.20b6					_SCCopyExit:
.20b6	60		rts				rts
.20b7					CopySoftToStack:
.20b7	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.20b9	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.20bb	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.20bd	95 50		sta $50,x			sta 	esInt1,x
.20bf	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.20c0					AllocateSoftString:
.20c0	85 0c		sta $0c				sta 	tempShort 					; save count
.20c2	98		tya				tya
.20c3	48		pha				pha
.20c4	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.20c6	d0 09		bne $20d1			bne 	_ASSDone
.20c8	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.20ca	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.20cc	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.20ce	88		dey				dey
.20cf	84 7b		sty $7b				sty 	softMemAlloc+1
.20d1					_ASSDone:
.20d1	38		sec				sec 								; allocate downwards enough memory
.20d2	a5 7a		lda $7a				lda 	softMemAlloc
.20d4	e5 0c		sbc $0c				sbc 	tempShort
.20d6	85 7a		sta $7a				sta 	softMemAlloc
.20d8	a5 7b		lda $7b				lda 	softMemAlloc+1
.20da	e9 00		sbc #$00			sbc 	#0
.20dc	85 7b		sta $7b				sta 	softMemAlloc+1
.20de	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.20e0	a8		tay				tay
.20e1	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.20e3	68		pla				pla
.20e4	a8		tay				tay
.20e5	60		rts				rts
.20e6					WriteSoftString:
.20e6	84 0c		sty $0c				sty 	tempShort 					; save Y
.20e8	48		pha				pha
.20e9	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.20eb	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.20ed	18		clc				clc
.20ee	69 01		adc #$01			adc 	#1
.20f0	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.20f2	a8		tay				tay 								; pointer in Y
.20f3	68		pla				pla 								; get char and write.
.20f4	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.20f6	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.20f8	60		rts				rts
.20f9					StrClone:
.20f9	aa		tax				tax 								; set up stack.
.20fa	98		tya				tya
.20fb	48		pha				pha
.20fc	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.20fe	b1 04		lda ($04),y			lda 	(temp0),y
.2100	18		clc				clc
.2101	69 01		adc #$01			adc 	#1
.2103	20 c0 20	jsr $20c0			jsr 	AllocateSoftString 			; allocate soft memory
.2106	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2108	95 48		sta $48,x			sta 	esInt0,x
.210a	a5 7b		lda $7b				lda 	softMemAlloc+1
.210c	95 50		sta $50,x			sta 	esInt1,x
.210e	a9 00		lda #$00			lda 	#0
.2110	95 58		sta $58,x			sta 	esInt2,x
.2112	95 60		sta $60,x			sta 	esInt3,x
.2114	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2116	95 40		sta $40,x			sta 	esType,x
.2118	20 a1 20	jsr $20a1			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.211b	68		pla				pla
.211c	a8		tay				tay
.211d	8a		txa				txa
.211e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.211f					StringSubstring:
.211f	48		pha				pha
.2120	aa		tax				tax 								; access stack.
.2121	98		tya				tya
.2122	48		pha				pha
.2123	20 68 20	jsr $2068			jsr 	CopyStringTop 				; point temp0 to the string.
.2126	a0 00		ldy #$00			ldy 	#0 							; get length.
.2128	b1 04		lda ($04),y			lda 	(temp0),Y
.212a	85 06		sta $06				sta 	temp1
.212c	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.212e	c5 06		cmp $06				cmp 	temp1 						;
.2130	f0 02		beq $2134			beq 	_SSBOkay
.2132	b0 2a		bcs $215e			bcs 	_SSBReturnNull
.2134					_SSBOkay:
.2134	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2136	18		clc				clc
.2137	69 01		adc #$01			adc 	#1
.2139	38		sec				sec
.213a	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.213c	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.213e	90 02		bcc $2142			bcc		_SSBTrunc
.2140	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2142					_SSBTrunc:
.2142	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2144	18		clc				clc
.2145	69 01		adc #$01			adc 	#1 							; add 1
.2147	20 c0 20	jsr $20c0			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.214a	20 b7 20	jsr $20b7			jsr 	CopySoftToStack 			; copy that to the stack.
.214d	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.214f					_SSBCopyLoop:
.214f	a5 07		lda $07				lda 	temp1+1 					; done them all
.2151	f0 0e		beq $2161			beq 	_SSBExit
.2153	c6 07		dec $07				dec 	temp1+1
.2155	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2157	20 e6 20	jsr $20e6			jsr 	WriteSoftString
.215a	c8		iny				iny
.215b	4c 4f 21	jmp $214f			jmp 	_SSBCopyLoop
.215e					_SSBReturnNull:
.215e	20 65 21	jsr $2165			jsr 	ReturnNull
.2161					_SSBExit:
.2161	68		pla				pla
.2162	a8		tay				tay
.2163	68		pla				pla
.2164	60		rts				rts
.2165					ReturnNull:
.2165	a9 00		lda #$00			lda 	#0 							; clear null string
.2167	8d cc 0a	sta $0acc			sta 	NullString
.216a	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.216c	95 48		sta $48,x			sta 	esInt0,x
.216e	a9 0a		lda #$0a			lda 	#NullString >> 8
.2170	95 50		sta $50,x			sta 	esInt1,x
.2172	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afa					srcStrLen:
>0afa							.fill 	1
.2173					StringWrite:
.2173	aa		tax				tax
.2174	48		pha				pha
.2175	98		tya				tya
.2176	48		pha				pha
.2177	20 9e 21	jsr $219e			jsr 	CheckOverwriteCurrent
.217a	b0 0d		bcs $2189			bcs		_SWCopyCurrent
.217c	20 dc 21	jsr $21dc			jsr 	RequiresConcretion
.217f	90 0e		bcc $218f			bcc 	_SWWriteReference
.2181	20 3f 22	jsr $223f			jsr 	CheckSpecialConcretion
.2184	b0 09		bcs $218f			bcs 	_SWWriteReference
.2186	20 f0 21	jsr $21f0			jsr 	AllocateHardMemory
.2189					_SWCopyCurrent:
.2189	20 23 22	jsr $2223			jsr 	CopyStringToHardMemory
.218c	4c 9a 21	jmp $219a			jmp 	_SWExit
.218f					_SWWriteReference
.218f	a0 00		ldy #$00			ldy 	#0
.2191	a5 04		lda $04				lda 	temp0
.2193	91 06		sta ($06),y			sta 	(temp1),y
.2195	c8		iny				iny
.2196	a5 05		lda $05				lda 	temp0+1
.2198	91 06		sta ($06),y			sta 	(temp1),y
.219a					_SWExit:
.219a	68		pla				pla
.219b	a8		tay				tay
.219c	68		pla				pla
.219d	60		rts				rts
.219e					CheckOverwriteCurrent:
.219e	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.21a0	b5 51		lda $51,x			lda 	esInt1+1,x
.21a2	85 05		sta $05				sta 	temp0+1
.21a4	b5 49		lda $49,x			lda 	esInt0+1,x
.21a6	85 04		sta $04				sta 	temp0
.21a8	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.21aa	8d fa 0a	sta $0afa			sta 	srcStrLen
.21ad	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.21af	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.21b1	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.21b3	85 07		sta $07				sta 	temp1+1
.21b5	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.21b7	b1 06		lda ($06),y			lda 	(temp1),y
.21b9	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.21bb	90 1b		bcc $21d8			bcc 	_COCFail 				; in hard memory.
.21bd	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.21bf	b1 06		lda ($06),y			lda 	(temp1),y
.21c1	e9 01		sbc #$01			sbc 	#1
.21c3	85 08		sta $08				sta 	temp2
.21c5	c8		iny				iny
.21c6	b1 06		lda ($06),y			lda 	(temp1),y
.21c8	e9 00		sbc #$00			sbc 	#0
.21ca	85 09		sta $09				sta 	temp2+1
.21cc	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.21ce	b1 08		lda ($08),y			lda 	(temp2),y
.21d0	38		sec				sec  							; maximum character capacity.
.21d1	e9 02		sbc #$02			sbc 	#2
.21d3	cd fa 0a	cmp $0afa			cmp 	srcStrLen 				; if >= the required length
.21d6	b0 02		bcs $21da			bcs 	_COCCanReuse
.21d8					_COCFail:
.21d8	18		clc				clc
.21d9	60		rts				rts
.21da					_COCCanReuse:
.21da	38		sec				sec
.21db	60		rts				rts
.21dc					RequiresConcretion:
.21dc	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.21de	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.21e0	b0 0a		bcs $21ec			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.21e2	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.21e4	f0 08		beq $21ee			beq 	_RCFail 				; if not, this cannot be soft memory.
.21e6	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.21e8	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.21ea	90 02		bcc $21ee			bcc 	_RCFail 				; so concreting
.21ec					_RCSucceed:
.21ec	38		sec				sec
.21ed	60		rts				rts
.21ee					_RCFail:
.21ee	18		clc				clc
.21ef	60		rts				rts
.21f0					AllocateHardMemory:
.21f0	98		tya				tya
.21f1	48		pha				pha
.21f2	ad fa 0a	lda $0afa			lda 	srcStrLen 				; characters in string
.21f5	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.21f7	b0 04		bcs $21fd			bcs 	_AHMSetMax 				; max out that amount.
.21f9	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.21fb	90 02		bcc $21ff			bcc 	_AHMIsOkay
.21fd					_AHMSetMax:
.21fd	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.21ff					_AHMIsOkay:
.21ff	48		pha				pha
.2200	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2202	38		sec				sec  							; and copy result to TOS as target address.
.2203	65 0d		adc $0d				adc 	highMemory
.2205	85 0d		sta $0d				sta 	highMemory
.2207	a5 0e		lda $0e				lda 	highMemory+1
.2209	69 ff		adc #$ff			adc 	#$FF
.220b	85 0e		sta $0e				sta 	highMemory+1
.220d	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.220f	68		pla				pla 							; get the total size of the storage block
.2210	91 0d		sta ($0d),y			sta 	(highMemory),y
.2212	18		clc				clc
.2213	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2215	69 01		adc #$01			adc 	#1
.2217	91 06		sta ($06),y			sta 	(temp1),y
.2219	a5 0e		lda $0e				lda 	highMemory+1
.221b	69 00		adc #$00			adc 	#0
.221d	c8		iny				iny
.221e	91 06		sta ($06),y			sta 	(temp1),y
.2220	68		pla				pla
.2221	a8		tay				tay
.2222	60		rts				rts
.2223					CopyStringToHardMemory:
.2223	98		tya				tya
.2224	48		pha				pha
.2225	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2227	b1 06		lda ($06),y			lda 	(temp1),y
.2229	85 08		sta $08				sta 	temp2
.222b	c8		iny				iny
.222c	b1 06		lda ($06),y			lda 	(temp1),y
.222e	85 09		sta $09				sta 	temp2+1
.2230	ac fa 0a	ldy $0afa			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2233					_CSTHMLoop:
.2233	b1 04		lda ($04),y			lda 	(temp0),y
.2235	91 08		sta ($08),y			sta 	(temp2),y
.2237	88		dey				dey
.2238	c0 ff		cpy #$ff			cpy 	#$FF
.223a	d0 f7		bne $2233			bne 	_CSTHMLoop
.223c	68		pla				pla
.223d	a8		tay				tay
.223e	60		rts				rts
.223f					CheckSpecialConcretion:
.223f	ad fa 0a	lda $0afa			lda 	srcStrLen 				; check string is null.
.2242	f0 02		beq $2246			beq 	_CSCNullString
.2244	18		clc				clc
.2245	60		rts				rts
.2246					_CSCNullString:
.2246	a9 00		lda #$00			lda 	#0
.2248	8d cc 0a	sta $0acc			sta 	NullString
.224b	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.224d	85 04		sta $04				sta 	temp0
.224f	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2251	85 05		sta $05				sta 	1+(temp0)
.2253	38		sec				sec
.2254	60		rts				rts

;******  Return to file: string/string.asm

.2255					stringHandler:
.2255	7c 58 22	jmp ($2258,x)			jmp 	(stringVectors,x)
.2258					stringVectors:
>2258	06 20					.word StringChrs           ; index 0
>225a	f9 20					.word StrClone             ; index 2
>225c	71 20					.word StringConcat         ; index 4
>225e	28 20					.word STRCompare           ; index 6
>2260	1f 21					.word StringSubstring      ; index 8
>2262	73 21					.word StringWrite          ; index 10

;******  Return to file: basic.asm

.2264					section_end_string:
.2264					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.2264					tokeniserHandler:
.2264	7c 67 22	jmp ($2267,x)			jmp 	(tokeniserVectors,x)
.2267					tokeniserVectors:

;******  Return to file: basic.asm

.2267					section_end_tokeniser:
.2267					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afb					varHash:
>0afb							.fill	1
.0afc					varType:
>0afc							.fill 	1
.0afd					varEnd:
>0afd							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2267					AccessVariable:
.2267	aa		tax				tax 								; stack in X
.2268	c8		iny				iny
.2269	b1 02		lda ($02),y			lda 	(codePtr),y
.226b	88		dey				dey
.226c	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.226e	d0 15		bne $2285			bne 	_AVLong
.2270	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2272	38		sec				sec 	 							; make it 0-25
.2273	e9 01		sbc #$01			sbc 	#1
.2275	0a		asl a				asl 	a 							; x 4 is LSB of address
.2276	0a		asl a				asl 	a
.2277	95 48		sta $48,x			sta 	esInt0,x
.2279	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.227b	95 50		sta $50,x			sta 	esInt1,x
.227d	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.227f	95 40		sta $40,x			sta 	esType,x
.2281	c8		iny				iny 								; skip over the variable reference in the code.
.2282	c8		iny				iny
.2283	8a		txa				txa 								; stack in A to return.
.2284	60		rts				rts
.2285					_AVLong:
.2285	8a		txa				txa
.2286	48		pha				pha
.2287	20 c5 22	jsr $22c5			jsr 	AccessSetup 				; set up the basic stuff.
.228a	20 6a 23	jsr $236a			jsr 	FindVariable 				; does the variable exist already
.228d	b0 0e		bcs $229d			bcs 	_AVFound
.228f	ad fc 0a	lda $0afc			lda 	varType 					; is the variable type an array
.2292	4a		lsr a				lsr 	a
.2293	90 05		bcc $229a			bcc 	_AVCanCreate
.2295	a2 14		ldx #$14			ldx 	#ErrorID_noauto
.2297	20 f7 1f	jsr $1ff7			jsr 	ErrorHandler
.229a					_AVCanCreate:
.229a	20 02 23	jsr $2302			jsr 	CreateVariable 				; no, create it.
.229d					_AVFound:
.229d	68		pla				pla
.229e	aa		tax				tax
.229f	18		clc				clc 								; copy temp0 (variable record address)
.22a0	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.22a2	69 05		adc #$05			adc 	#5
.22a4	95 48		sta $48,x			sta 	esInt0,x
.22a6	a5 05		lda $05				lda 	temp0+1
.22a8	69 00		adc #$00			adc 	#0
.22aa	95 50		sta $50,x			sta 	esInt1,x
.22ac	a9 00		lda #$00			lda 	#0
.22ae	95 58		sta $58,x			sta 	esInt2,x
.22b0	95 60		sta $60,x			sta 	esInt3,x
.22b2	ac fc 0a	ldy $0afc			ldy 	varType 					; get the type ID from the type.
.22b5	b9 85 22	lda $2285,y			lda 	_AVTypeTable-$3A,y
.22b8	95 40		sta $40,x			sta 	esType,x
.22ba	ac fd 0a	ldy $0afd			ldy 	varEnd 						; restore Y
.22bd	8a		txa				txa 								; return stack in A and return
.22be	60		rts				rts
.22bf					_AVTypeTable:
>22bf	80 80						.byte 	$80,$80						; integer
>22c1	c0 c0						.byte 	$C0,$C0 					; string
>22c3	81 81						.byte 	$81,$81 					; float
.22c5					AccessSetup:
.22c5	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.22c7	8d fb 0a	sta $0afb			sta 	varHash
.22ca	98		tya				tya
.22cb	48		pha				pha
.22cc	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.22ce	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.22d0	b0 0b		bcs $22dd			bcs 	_ASComplete
.22d2	18		clc				clc 								; add to the hash. Might improve this.
.22d3	6d fb 0a	adc $0afb			adc 	varHash
.22d6	8d fb 0a	sta $0afb			sta 	varHash
.22d9	c8		iny				iny 								; next character
.22da	4c cc 22	jmp $22cc			jmp 	_ASLoop
.22dd					_ASComplete:
.22dd	8d fc 0a	sta $0afc			sta 	varType 					; save variable type byte
.22e0	c8		iny				iny
.22e1	8c fd 0a	sty $0afd			sty 	varEnd 						; save the ending position.
.22e4	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.22e5	e9 3a		sbc #$3a			sbc 	#$3A
.22e7	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.22e8	0a		asl a				asl 	a
.22e9	0a		asl a				asl 	a
.22ea	0a		asl a				asl 	a 							; 2 bytes/word
.22eb	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.22ed	ad fb 0a	lda $0afb			lda 	varHash 					; get hash
.22f0	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.22f2	0a		asl a				asl  	a 							; x 2 (for word) and CC
.22f3	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.22f5	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.22f7	85 7c		sta $7c				sta 	hashList
.22f9	a9 0a		lda #$0a			lda 	#hashTables >> 8
.22fb	69 00		adc #$00			adc 	#0
.22fd	85 7d		sta $7d				sta 	hashList+1
.22ff	68		pla				pla
.2300	a8		tay				tay
.2301	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2302					CreateVariable:
.2302	98		tya				tya 								; push Y on the stack twice.
.2303	48		pha				pha
.2304	48		pha				pha
.2305	ae fc 0a	ldx $0afc			ldx 	varType 					; get var type 0-5
.2308	bd 2a 23	lda $232a,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.230b	48		pha				pha 								; save length
.230c	a8		tay				tay 								; put into Y.
.230d	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.230f	85 04		sta $04				sta 	temp0
.2311	a5 10		lda $10				lda 	lowMemory+1
.2313	85 05		sta $05				sta 	temp0+1
.2315	68		pla				pla 								; get length
.2316	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2319					_CVClear:
.2319	88		dey				dey
.231a	a9 00		lda #$00			lda 	#0
.231c	91 04		sta ($04),y			sta 	(temp0),y
.231e	c0 04		cpy #$04			cpy 	#4
.2320	d0 f7		bne $2319			bne 	_CVClear
.2322	ad fb 0a	lda $0afb			lda 	varHash 					; store hash at offset 4.
.2325	91 04		sta ($04),y			sta 	(temp0),y
.2327	68		pla				pla 								; offset, work out where the variable name is.
.2328	18		clc				clc
.2329	65 02		adc $02				adc 	codePtr
.232b	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.232d	91 04		sta ($04),y			sta 	(temp0),y
.232f	a5 03		lda $03				lda 	codePtr+1
.2331	69 00		adc #$00			adc 	#0
.2333	c8		iny				iny
.2334	91 04		sta ($04),y			sta 	(temp0),y
.2336	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2338	b1 7c		lda ($7c),y			lda 	(hashList),y
.233a	91 04		sta ($04),y			sta 	(temp0),y
.233c	c8		iny				iny
.233d	b1 7c		lda ($7c),y			lda 	(hashList),y
.233f	91 04		sta ($04),y			sta 	(temp0),y
.2341	a5 05		lda $05				lda 	temp0+1 					; set new link
.2343	91 7c		sta ($7c),y			sta 	(hashList),y
.2345	88		dey				dey
.2346	a5 04		lda $04				lda 	temp0
.2348	91 7c		sta ($7c),y			sta 	(hashList),y
.234a	ad fc 0a	lda $0afc			lda 	varType 					; is it a string ($3C)
.234d	c9 3c		cmp #$3c			cmp 	#$3C
.234f	d0 10		bne $2361			bne 	_CVNoDefaultNull
.2351	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.2353	8d cc 0a	sta $0acc			sta 	NullString
.2356	a0 05		ldy #$05			ldy 	#5
.2358	a9 cc		lda #$cc			lda 	#NullString & $FF
.235a	91 04		sta ($04),y			sta 	(temp0),y
.235c	a9 0a		lda #$0a			lda 	#NullString >> 8
.235e	c8		iny				iny
.235f	91 04		sta ($04),y			sta 	(temp0),y
.2361					_CVNoDefaultNull:
.2361	68		pla				pla
.2362	a8		tay				tay
.2363	60		rts				rts
>2364	09 09				_CVSize:.byte 	5+4,5+4 					; <storage for integer>
>2366	07 07						.byte 	5+2,5+2 					; <storage for string>
>2368	0b 0b						.byte 	5+6,5+6 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.236a					FindVariable:
.236a	98		tya				tya
.236b	48		pha				pha
.236c	98		tya				tya 								; point temp2 to the actual name.
.236d	18		clc				clc
.236e	65 02		adc $02				adc 	codePtr
.2370	85 08		sta $08				sta 	temp2
.2372	a5 03		lda $03				lda 	codePtr+1
.2374	69 00		adc #$00			adc 	#0
.2376	85 09		sta $09				sta 	temp2+1
.2378	a0 00		ldy #$00			ldy 	#0
.237a	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.237c	85 04		sta $04				sta 	temp0
.237e	a5 7d		lda $7d				lda 	hashList+1
.2380	85 05		sta $05				sta 	temp0+1
.2382	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.2384	b1 04		lda ($04),y			lda 	(temp0),y
.2386	f0 2c		beq $23b4			beq 	_FVFail
.2388	aa		tax				tax
.2389	88		dey				dey		 							; get LSB
.238a	b1 04		lda ($04),y			lda 	(temp0),y
.238c	85 04		sta $04				sta 	temp0 						; update pointer.
.238e	86 05		stx $05				stx 	temp0+1
.2390	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2392	b1 04		lda ($04),y			lda 	(temp0),y
.2394	cd fb 0a	cmp $0afb			cmp 	varHash
.2397	d0 e9		bne $2382			bne 	_FVNext 					; if not, no point in checking the name.
.2399	88		dey				dey 								; copy name pointer to temp1.
.239a	b1 04		lda ($04),y			lda 	(temp0),y
.239c	85 07		sta $07				sta 	temp1+1
.239e	88		dey				dey
.239f	b1 04		lda ($04),y			lda 	(temp0),y
.23a1	85 06		sta $06				sta 	temp1
.23a3	a0 00		ldy #$00			ldy 	#0
.23a5					_FVCheck:
.23a5	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.23a7	d1 08		cmp ($08),y			cmp 	(temp2),y
.23a9	d0 d7		bne $2382			bne 	_FVNext		 				; fail if different.
.23ab	c8		iny				iny
.23ac	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.23ae	90 f5		bcc $23a5			bcc 	_FVCheck
.23b0	68		pla				pla
.23b1	a8		tay				tay
.23b2	38		sec				sec
.23b3	60		rts				rts
.23b4					_FVFail:
.23b4	68		pla				pla
.23b5	a8		tay				tay
.23b6	18		clc				clc
.23b7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.23b8					HashTableReset:
.23b8	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.23ba	a9 00		lda #$00			lda 	#0
.23bc					_HTRClear:
.23bc	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.23bf	ca		dex				dex
.23c0	d0 fa		bne $23bc			bne 	_HTRClear
.23c2	60		rts				rts

;******  Return to file: variable/variable.asm

.23c3					variableHandler:
.23c3	7c c6 23	jmp ($23c6,x)			jmp 	(variableVectors,x)
.23c6					variableVectors:
>23c6	67 22					.word AccessVariable       ; index 0
>23c8	b8 23					.word HashTableReset       ; index 2

;******  Return to file: basic.asm

.23ca					section_end_variable:

;******  End of listing
