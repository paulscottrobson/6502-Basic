
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Sat Mar 27 18:16:29 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	99 3c						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 44		lda #$44			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 70 1e	jsr $1e70		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 70 1e	jsr $1e70		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 0a 35	jsr $350a		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 c7 37	jsr $37c7		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 ed 3f	jsr $3fed		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 be 43	jsr $43be		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 ed 3f	jsr $3fed		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 0a 35	jsr $350a		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 0a 35	jsr $350a		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 0a 35	jsr $350a		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 0a 35	jsr $350a		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 be 43	jsr $43be		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 49 18	jsr $1849			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 0a 35	jsr $350a		jsr	mainHandler
.157d	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 70 1e	jsr $1e70		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1849					EHPrintAscii:
.1849	a0 00		ldy #$00			ldy 	#0
.184b	b1 2a		lda ($2a),y			lda 	(temp0),y
.184d	aa		tax				tax
.184e	f0 0f		beq $185f			beq 	_EHPExit
.1850					_EHPLoop:
.1850	c8		iny				iny
.1851	8a		txa				txa
.1852	48		pha				pha
.1853	b1 2a		lda ($2a),y			lda 	(temp0),y
.1855	a2 16		ldx #$16		ldx	#22
.1857	20 f6 14	jsr $14f6		jsr	deviceHandler
.185a	68		pla				pla
.185b	aa		tax				tax
.185c	ca		dex				dex
.185d	d0 f1		bne $1850			bne 	_EHPLoop
.185f					_EHPExit:
.185f	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1860					section_end_error:
.1860					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1860					ExtensionHandler:
.1860	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1862	f0 16		beq $187a			beq 	_ExtensionForce
.1864	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1866	d0 08		bne $1870			bne 	_ExtensionUnary 			; is passed in A.
.1868	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.186a	c8		iny				iny
.186b	0a		asl a				asl 	a
.186c	aa		tax				tax
.186d	7c 71 18	jmp ($1871,x)			jmp 	(Group2Vectors-12,x)
.1870					_ExtensionUnary:
.1870	48		pha				pha 								; save stack pos in A
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	68		pla				pla 								; restore stack pos and call group3 command.
.1877	7c 7d 18	jmp ($187d,x)			jmp 	(Group3Vectors-12,X)
.187a					_ExtensionForce:
.187a	4c 95 18	jmp $1895			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.187d					Group2Vectors:
>187d	36 1b					.word	Command_VPoke            ; $86 vpoke
>187f	39 1b					.word	Command_VDoke            ; $87 vdoke
>1881	0e 1b					.word	Command_VLoad            ; $88 vload
>1883	a7 18					.word	CommandMode              ; $89 mode
>1885	52 19					.word	CommandPalette           ; $8a palette
>1887	89 19					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1889					Group3Vectors:
>1889	82 1b					.word	Command_VPeek            ; $86 vpeek(
>188b	85 1b					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.188d					XEvaluateInteger:
.188d	8a		txa				txa
.188e	a2 0a		ldx #$0a		ldx	#10
.1890	20 0a 35	jsr $350a		jsr	mainHandler
.1893	aa		tax				tax
.1894	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1895					ForceMode0:
.1895	a2 00		ldx #$00			ldx 	#0
.1897	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1899					_FMCheck:
.1899	bd 26 19	lda $1926,x			lda 	CMModeList,x 				; do we need to switch ?
.189c	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.189f	d0 13		bne $18b4			bne 	CMSetMode 					; different so switch.
.18a1	e8		inx				inx
.18a2	e0 04		cpx #$04			cpx 	#4
.18a4	d0 f3		bne $1899			bne 	_FMCheck
.18a6	60		rts				rts
.18a7					CommandMode:
.18a7	a9 00		lda #$00			lda 	#0
.18a9	a2 0a		ldx #$0a		ldx	#10
.18ab	20 0a 35	jsr $350a		jsr	mainHandler
.18ae	a5 68		lda $68				lda 	esInt3
.18b0	29 70		and #$70			and 	#$70
.18b2	d0 06		bne $18ba			bne 	CMNoExpand
.18b4					CMSetMode:
.18b4	20 05 19	jsr $1905			jsr 	CMExpandMode
.18b7	4c ce 18	jmp $18ce			jmp 	CMUpdateMode
.18ba					CMNoExpand:
.18ba	a5 50		lda $50				lda 	esInt0
.18bc	8d e6 0b	sta $0be6			sta 	currentMode
.18bf	a5 58		lda $58				lda 	esInt1
.18c1	8d e7 0b	sta $0be7			sta 	currentMode+1
.18c4	a5 60		lda $60				lda 	esInt2
.18c6	8d e8 0b	sta $0be8			sta 	currentMode+2
.18c9	a5 68		lda $68				lda 	esInt3
.18cb	8d e9 0b	sta $0be9			sta 	currentMode+3
.18ce					CMUpdateMode:
.18ce	a2 11		ldx #$11			ldx 	#$11
.18d0					_CMClear:
.18d0	a9 00		lda #$00			lda 	#0
.18d2	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.18d5	ca		dex				dex
.18d6	10 f8		bpl $18d0			bpl 	_CMClear
.18d8	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.18db	48		pha				pha 								; stack twice.
.18dc	48		pha				pha
.18dd	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.18df	09 01		ora #$01			ora 	#$01 						; turn the output on.
.18e1	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.18e4	68		pla				pla 								; get back
.18e5	20 2a 19	jsr $192a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18e8	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.18eb	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.18ec	4a		lsr a				lsr 	a
.18ed	4a		lsr a				lsr 	a
.18ee	20 2a 19	jsr $192a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18f1	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18f4	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18f6	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18f9	20 35 19	jsr $1935			jsr 	CMDecodeLayer 				; and decode layer 0
.18fc	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18fe	ad e7 0b	lda $0be7			lda 	currentMode+1
.1901	20 35 19	jsr $1935			jsr 	CMDecodeLayer
.1904	60		rts				rts
.1905					CMExpandMode:
.1905	a5 50		lda $50				lda 	esInt0 						; get mode number
.1907	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.1909	b0 16		bcs $1921			bcs 	_CMModeError
.190b	0a		asl a				asl 	a 							; x 4 into X
.190c	0a		asl a				asl 	a
.190d	aa		tax				tax
.190e	98		tya				tya
.190f	48		pha				pha
.1910	a0 00		ldy #$00			ldy 	#0
.1912					_CMEMCopy:
.1912	bd 26 19	lda $1926,x			lda 	CMModeList,x
.1915	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.1918	e8		inx				inx
.1919	c8		iny				iny
.191a	c0 04		cpy #$04			cpy 	#4
.191c	d0 f4		bne $1912			bne 	_CMEMCopy
.191e	68		pla				pla
.191f	a8		tay				tay
.1920	60		rts				rts
.1921					_CMModeError:
.1921	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1923	20 18 15	jsr $1518		jsr	errorHandler
.1926					CMModeList:
>1926	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.192a					CMEndModeList:
.192a					CMToScale:
.192a	29 03		and #$03			and 	#3 							; lower 2 bits only
.192c	aa		tax				tax 								; put in X for counting
.192d	a9 00		lda #$00			lda 	#0 							; zero result
.192f	38		sec				sec 								; first time rotate CS in
.1930					_CMTSLoop:
.1930	6a		ror a				ror 	a
.1931	ca		dex				dex
.1932	10 fc		bpl $1930			bpl 	_CMTSLoop
.1934	60		rts				rts
.1935					CMDecodeLayer:
.1935	48		pha				pha 								; save it.
.1936	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1938	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.193b	68		pla				pla 								; get it back
.193c	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.193e	f0 02		beq $1942			beq 	_CMDLNotSet
.1940	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1942					_CMDLNotSet:
.1942	e0 00		cpx #$00			cpx 	#0
.1944	f0 06		beq $194c			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1946	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1948	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.194b	60		rts				rts
.194c					_CMDLayer0:
.194c	09 80		ora #$80			ora 	#$80 						; tile base is $80
.194e	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1951	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/palette.asm

.1952					CommandPalette:
.1952	a9 00		lda #$00			lda 	#0
.1954	a2 0c		ldx #$0c		ldx	#12
.1956	20 0a 35	jsr $350a		jsr	mainHandler
.1959	a2 02		ldx #$02		ldx	#2
.195b	20 0a 35	jsr $350a		jsr	mainHandler
.195e	a9 01		lda #$01			lda 	#1
.1960	a2 08		ldx #$08		ldx	#8
.1962	20 0a 35	jsr $350a		jsr	mainHandler
.1965	a5 50		lda $50				lda 	esInt0 					; get palette #
.1967	20 77 19	jsr $1977			jsr 	PointToPaletteA			; point to palette register
.196a	a5 51		lda $51				lda 	esInt0+1
.196c	8d 23 9f	sta $9f23			sta 	$9F23
.196f	a5 59		lda $59				lda 	esInt1+1
.1971	29 0f		and #$0f			and 	#$0F
.1973	8d 23 9f	sta $9f23			sta 	$9F23
.1976	60		rts				rts
.1977					PointToPaletteA:
.1977	0a		asl a				asl 	a 							; x 2 -> LSB
.1978	8d 20 9f	sta $9f20			sta 	$9F20
.197b	a9 00		lda #$00			lda 	#0 							; carry into A
.197d	2a		rol a				rol 	a
.197e	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1980	8d 21 9f	sta $9f21			sta 	$9F21
.1983	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1985	8d 22 9f	sta $9f22			sta 	$9F22
.1988	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprite.asm

.0bea					currSprite:
>0bea							.fill 	2
.1989					CommandSprite:
.1989	20 9f 1a	jsr $1a9f			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.198c	d0 0d		bne $199b			bne 	_CSCheckClear
.198e	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1991	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1993	90 02		bcc $1997			bcc 	_CSNotOn 					; if CS turn on, so set it
.1995	09 40		ora #$40			ora 	#$40
.1997					_CSNotOn:
.1997	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.199a	60		rts				rts
.199b					_CSCheckClear:
.199b	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.199d	8d eb 0b	sta $0beb			sta 	currSprite+1
.19a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.19a2	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.19a4	d0 05		bne $19ab			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.19a6	20 b0 1a	jsr $1ab0			jsr 	CSClearSprites 				; clear all the sprites
.19a9	c8		iny				iny 								; consume CLEAR token and exit.
.19aa	60		rts				rts
.19ab					_CSCommandLoop:
.19ab	20 9f 1a	jsr $1a9f			jsr 	CSCheckOnOff 				; check sprite on/off
.19ae	f0 40		beq $19f0			beq 	_CSSetVisibility
.19b0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.19b2	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.19b4	f0 39		beq $19ef			beq 	_CSExit
.19b6	c8		iny				iny									; consume it
.19b7	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.19b9	f0 34		beq $19ef			beq 	_CSExit
.19bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.19bd	f0 ec		beq $19ab			beq 	_CSCommandLoop
.19bf	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.19c1	f0 7d		beq $1a40			beq 	_CSSetImage
.19c3	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.19c5	f0 3f		beq $1a06			beq 	_CSSetFlip
.19c7	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.19c9	f0 5a		beq $1a25			beq 	_CSSetPos
.19cb	88		dey				dey 								; unpick DEY
.19cc	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.19ce	a2 0c		ldx #$0c		ldx	#12
.19d0	20 0a 35	jsr $350a		jsr	mainHandler
.19d3	06 50		asl $50				asl		esInt0 						; multiply A:esInt0 by 8
.19d5	b0 13		bcs $19ea			bcs 	_CSBadValue 				; sprites only 0-127
.19d7	06 50		asl $50				asl 	esInt0
.19d9	2a		rol a				rol 	a
.19da	06 50		asl $50				asl 	esInt0
.19dc	2a		rol a				rol 	a
.19dd	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.19df	8d eb 0b	sta $0beb			sta 	currSprite+1
.19e2	a5 50		lda $50				lda 	esInt0 						; LSB of address
.19e4	8d ea 0b	sta $0bea			sta 	currSprite+0
.19e7	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.19ea					_CSBadValue
.19ea	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19ec	20 18 15	jsr $1518		jsr	errorHandler
.19ef					_CSExit:
.19ef	60		rts				rts
.19f0					_CSSetVisibility:
.19f0	08		php				php 								; save carry
.19f1	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.19f3	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.19f6	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.19f9	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.19fb	28		plp				plp
.19fc	90 02		bcc $1a00			bcc 	_CSSetOff 					; check if carry was set
.19fe	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1a00					_CSSetOff:
.1a00	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1a03	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a06					_CSSetFlip:
.1a06	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a08	a2 0c		ldx #$0c		ldx	#12
.1a0a	20 0a 35	jsr $350a		jsr	mainHandler
.1a0d	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1a0f	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.1a12	a5 50		lda $50				lda 	esInt0 						; flip value & 3 => temp0
.1a14	29 03		and #$03			and 	#3
.1a16	85 2a		sta $2a				sta 	temp0
.1a18	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1a1b	29 fc		and #$fc			and 	#$FC
.1a1d	05 2a		ora $2a				ora 	temp0
.1a1f	8d 23 9f	sta $9f23			sta 	$9F23
.1a22	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a25					_CSSetPos:
.1a25	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1a27	a2 0a		ldx #$0a		ldx	#10
.1a29	20 0a 35	jsr $350a		jsr	mainHandler
.1a2c	a2 02		ldx #$02		ldx	#2
.1a2e	20 0a 35	jsr $350a		jsr	mainHandler
.1a31	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1a33	a2 0a		ldx #$0a		ldx	#10
.1a35	20 0a 35	jsr $350a		jsr	mainHandler
.1a38	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1a3a	20 ca 1a	jsr $1aca			jsr 	SpriteMove 					; move it.
.1a3d	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a40					_CSSetImage:
.1a40	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a42	a2 0c		ldx #$0c		ldx	#12
.1a44	20 0a 35	jsr $350a		jsr	mainHandler
.1a47	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1a49	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.1a4c	a6 50		ldx $50				ldx 	esInt0 						; get image # into X
.1a4e	bd 2d 0c	lda $0c2d,x			lda 	imageAddr2Low,x 			; copy low address in.
.1a51	8d 23 9f	sta $9f23			sta 	$9F23
.1a54	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1a57	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1a5a	29 10		and #$10			and 	#$10
.1a5c	0a		asl a				asl 	a
.1a5d	0a		asl a				asl		a
.1a5e	0a		asl a				asl 	a 							; put into bit 7
.1a5f	1d 6d 0c	ora $0c6d,x			ora 	imageAddr2High,x 			; or high address with it.
.1a62	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1a65	a9 06		lda #$06			lda 	#6
.1a67	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget 			; set sprite on.
.1a6a	ad 23 9f	lda $9f23			lda 	$9F23
.1a6d	09 0c		ora #$0c			ora 	#$0C
.1a6f	8d 23 9f	sta $9f23			sta 	$9F23
.1a72	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1a75	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get image info
.1a78	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1a79	0a		asl a				asl 	a
.1a7a	0a		asl a				asl 	a
.1a7b	0a		asl a				asl 	a
.1a7c	b0 02		bcs $1a80			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1a7e	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1a80					_CSNoOffset:
.1a80	8d 23 9f	sta $9f23			sta 	$9F23
.1a83	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a86					SpriteSetTarget:
.1a86	0d ea 0b	ora $0bea			ora 	currSprite
.1a89	8d 20 9f	sta $9f20			sta 	$9F20
.1a8c	ad eb 0b	lda $0beb			lda 	currSprite+1
.1a8f	f0 09		beq $1a9a			beq 	_SSTNoSet
.1a91	8d 21 9f	sta $9f21			sta 	$9F21
.1a94	a9 01		lda #$01			lda 	#$01
.1a96	8d 22 9f	sta $9f22			sta 	$9F22
.1a99	60		rts				rts
.1a9a					_SSTNoSet:
.1a9a	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1a9c	20 18 15	jsr $1518		jsr	errorHandler
.1a9f					CSCheckOnOff:
.1a9f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1aa1	c8		iny				iny
.1aa2	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1aa4	18		clc				clc
.1aa5	f0 08		beq $1aaf			beq 	_CSCOExit
.1aa7	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1aa9	38		sec				sec 								; return NE if neither.
.1aaa	f0 03		beq $1aaf			beq 	_CSCOExit
.1aac	88		dey				dey 								; undo consume
.1aad	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1aaf					_CSCOExit:
.1aaf	60		rts				rts
.1ab0					CSClearSprites:
.1ab0	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1ab2	8d 22 9f	sta $9f22			sta 	$9F22
.1ab5	a9 fc		lda #$fc			lda 	#$FC
.1ab7	8d 21 9f	sta $9f21			sta 	$9F21
.1aba	a9 00		lda #$00			lda 	#0
.1abc	8d 20 9f	sta $9f20			sta 	$9F20
.1abf					_CSClear:
.1abf	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1ac1	8d 23 9f	sta $9f23			sta 	$9F23
.1ac4	ad 21 9f	lda $9f21			lda 	$9F21
.1ac7	d0 f6		bne $1abf			bne 	_CSClear
.1ac9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/spritemove.asm

.1aca					SpriteMove:
.1aca	98		tya				tya
.1acb	48		pha				pha
.1acc	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1ace	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.1ad1	ad 23 9f	lda $9f23			lda 	$9F23
.1ad4	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1ad5	4a		lsr a				lsr 	a
.1ad6	4a		lsr a				lsr 	a
.1ad7	4a		lsr a				lsr 	a
.1ad8	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1ada	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1adc	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.1adf	20 ee 1a	jsr $1aee			jsr 	_SMWritePosition 					; write X position out.
.1ae2	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1ae4	46 2a		lsr $2a				lsr 	temp0
.1ae6	e8		inx				inx 										; get the y position
.1ae7	20 ee 1a	jsr $1aee			jsr 	_SMWritePosition 					; and write that out.
.1aea	ca		dex				dex 										; fix X and quit.
.1aeb	68		pla				pla
.1aec	a8		tay				tay
.1aed	60		rts				rts
.1aee					_SMWritePosition:
.1aee	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1af0	29 03		and #$03			and 	#3 									; in range into Y
.1af2	a8		tay				tay
.1af3	38		sec				sec
.1af4	b5 50		lda $50,x			lda 	esInt0,x
.1af6	f9 0a 1b	sbc $1b0a,y			sbc 	_SMHalfSize,y
.1af9	8d 23 9f	sta $9f23			sta 	$9F23
.1afc	ee 20 9f	inc $9f20			inc 	$9F20
.1aff	b5 58		lda $58,x			lda 	esInt1,x
.1b01	e9 00		sbc #$00			sbc 	#0
.1b03	8d 23 9f	sta $9f23			sta 	$9F23
.1b06	ee 20 9f	inc $9f20			inc 	$9F20
.1b09	60		rts				rts
.1b0a					_SMHalfSize:
>1b0a	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1b0e					Command_VLoad:
.1b0e	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1b10	a2 0e		ldx #$0e		ldx	#14
.1b12	20 0a 35	jsr $350a		jsr	mainHandler
.1b15	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1b17	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1b19	95 50		sta $50,x			sta 	esInt0,x
.1b1b	a5 36		lda $36				lda 	lowMemory+1
.1b1d	95 58		sta $58,x			sta 	esInt1,x
.1b1f	a9 00		lda #$00			lda 	#0
.1b21	95 60		sta $60,x			sta 	esInt2,x
.1b23	95 68		sta $68,x			sta 	esInt3,x
.1b25	a2 0e		ldx #$0e		ldx	#14
.1b27	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b2a	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1b2c	85 2a		sta $2a				sta 	temp0
.1b2e	a5 59		lda $59				lda 	esInt1+1
.1b30	85 2b		sta $2b				sta 	temp0+1
.1b32	20 ae 1b	jsr $1bae			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1b35	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1b36					Command_VPoke:
.1b36	38		sec				sec 						; one byte , CS
.1b37	b0 01		bcs $1b3a			bcs 	CmdVideoWrite
.1b39					Command_VDoke:
.1b39	18		clc				clc 						; two bytes, CC
.1b3a					CmdVideoWrite:
.1b3a	08		php				php 						; save one or two btes
.1b3b	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1b3d	a2 0a		ldx #$0a		ldx	#10
.1b3f	20 0a 35	jsr $350a		jsr	mainHandler
.1b42	a2 02		ldx #$02		ldx	#2
.1b44	20 0a 35	jsr $350a		jsr	mainHandler
.1b47	a9 01		lda #$01			lda 	#1
.1b49	a2 0a		ldx #$0a		ldx	#10
.1b4b	20 0a 35	jsr $350a		jsr	mainHandler
.1b4e	a2 00		ldx #$00			ldx 	#0
.1b50	20 61 1b	jsr $1b61			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1b53	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1b55	8d 23 9f	sta $9f23			sta 	$9F23
.1b58	28		plp				plp 						; if it was Poke then exit
.1b59	b0 05		bcs $1b60			bcs 	_CVWExit
.1b5b	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1b5d	8d 23 9f	sta $9f23			sta 	$9F23
.1b60					_CVWExit:
.1b60	60		rts				rts
.1b61					SetUpTOSVRamAddress:
.1b61	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1b63	29 fe		and #$fe			and 	#$FE
.1b65	15 68		ora $68,x			ora 	esInt3,x
.1b67	d0 14		bne $1b7d			bne 	CVWValue
.1b69	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1b6b	8d 20 9f	sta $9f20			sta 	$9F20
.1b6e	b5 58		lda $58,x			lda 	esInt1,x
.1b70	8d 21 9f	sta $9f21			sta	 	$9F21
.1b73	b5 60		lda $60,x			lda 	esInt2,x
.1b75	29 01		and #$01			and 	#1
.1b77	09 10		ora #$10			ora 	#$10 				; step 1.
.1b79	8d 22 9f	sta $9f22			sta 	$9F22
.1b7c	60		rts				rts
.1b7d					CVWValue:
.1b7d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b7f	20 18 15	jsr $1518		jsr	errorHandler
.1b82					Command_VPeek:
.1b82	38		sec				sec 						; one byte , CS
.1b83	b0 01		bcs $1b86			bcs 	CmdVideoRead
.1b85					Command_VDeek:
.1b85	18		clc				clc 						; two bytes, CC
.1b86					CmdVideoRead:
.1b86	08		php				php 						; save action on stack.
.1b87	48		pha				pha 						; save stack position
.1b88	a2 0a		ldx #$0a		ldx	#10
.1b8a	20 0a 35	jsr $350a		jsr	mainHandler
.1b8d	a2 04		ldx #$04		ldx	#4
.1b8f	20 0a 35	jsr $350a		jsr	mainHandler
.1b92	68		pla				pla
.1b93	aa		tax				tax
.1b94	20 61 1b	jsr $1b61			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1b97	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1b99	95 58		sta $58,x			sta 	esInt1,x
.1b9b	95 60		sta $60,x			sta 	esInt2,x
.1b9d	95 68		sta $68,x			sta 	esInt3,x
.1b9f	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1ba2	95 50		sta $50,x			sta 	esInt0,x
.1ba4	28		plp				plp 						; check if DOKE (carry was clear)
.1ba5	b0 05		bcs $1bac			bcs 	_CVRExit
.1ba7	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1baa	95 58		sta $58,x			sta 	esInt1,x
.1bac					_CVRExit:
.1bac	8a		txa				txa 						; return X position.
.1bad	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bec					compressMode:
>0bec							.fill 	1
.0bed					imageInfo:
>0bed							.fill 	X16MaxImages
.0c2d					imageAddr2Low:
>0c2d							.fill  	X16MaxImages
.0c6d					imageAddr2High:
>0c6d							.fill  	X16MaxImages
.1bae					LoadVRAMFile:
.1bae	8a		txa				txa
.1baf	48		pha				pha
.1bb0	98		tya				tya
.1bb1	48		pha				pha
.1bb2					_LVRLoop:
.1bb2	20 75 1c	jsr $1c75			jsr 	LVFGet 						; get the next (never access direct)
.1bb5	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1bb7	f0 42		beq $1bfb			beq 	_LVRExit
.1bb9	b0 5c		bcs $1c17			bcs 	_LVRLoad 					; load data in ?
.1bbb	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1bbd	90 11		bcc $1bd0			bcc 	_LVRSetAddress
.1bbf	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.1bc1	f0 3d		beq $1c00			beq 	_LVRSetPalette
.1bc3	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1bc5	90 2d		bcc $1bf4			bcc 	_LVRSetCompress
.1bc7	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1bc9	90 60		bcc $1c2b			bcc 	_LVRSetSprite
.1bcb	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1bcd	20 18 15	jsr $1518		jsr	errorHandler
.1bd0					_LVRSetAddress:
.1bd0	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1bd2	20 75 1c	jsr $1c75			jsr 	LVFGet
.1bd5	85 2c		sta $2c				sta 	temp1
.1bd7	a9 00		lda #$00			lda 	#0
.1bd9	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1bdb	66 2c		ror $2c				ror 	temp1
.1bdd	6a		ror a				ror		a
.1bde	46 2d		lsr $2d				lsr 	temp1+1
.1be0	66 2c		ror $2c				ror 	temp1
.1be2	6a		ror a				ror		a
.1be3	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1be6	a5 2c		lda $2c				lda 	temp1
.1be8	8d 21 9f	sta $9f21			sta 	$9F21
.1beb	a5 2d		lda $2d				lda 	temp1+1
.1bed	09 10		ora #$10			ora 	#$10
.1bef	8d 22 9f	sta $9f22			sta 	$9F22
.1bf2	d0 be		bne $1bb2			bne 	_LVRLoop
.1bf4					_LVRSetCompress:
.1bf4	29 07		and #$07			and 	#7
.1bf6	8d ec 0b	sta $0bec			sta 	compressMode
.1bf9	10 b7		bpl $1bb2			bpl 	_LVRLoop
.1bfb					_LVRExit:
.1bfb	68		pla				pla
.1bfc	a8		tay				tay
.1bfd	68		pla				pla
.1bfe	aa		tax				tax
.1bff	60		rts				rts
.1c00					_LVRSetPalette:
.1c00	20 75 1c	jsr $1c75			jsr 	LVFGet 						; get palette id.
.1c03	20 77 19	jsr $1977			jsr 	PointToPaletteA 			; in palette.asm
.1c06	20 75 1c	jsr $1c75			jsr 	LVFGet 						; copy 12 bit palette data in.
.1c09	8d 23 9f	sta $9f23			sta 	$9F23
.1c0c	20 75 1c	jsr $1c75			jsr 	LVFGet
.1c0f	29 0f		and #$0f			and 	#$0F
.1c11	8d 23 9f	sta $9f23			sta 	$9F23
.1c14	4c b2 1b	jmp $1bb2			jmp 	_LVRLoop
.1c17					_LVRLoad:
.1c17	ae ec 0b	ldx $0bec			ldx 	compressMode
.1c1a	d0 55		bne $1c71			bne 	_LVRNotMode0
.1c1c	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1c1e	aa		tax				tax
.1c1f					_LVRLCopy:
.1c1f	20 75 1c	jsr $1c75			jsr 	LVFGet 						; write to data.
.1c22	8d 23 9f	sta $9f23			sta 	$9F23
.1c25	ca		dex				dex
.1c26	d0 f7		bne $1c1f			bne 	_LVRLCopy
.1c28	4c b2 1b	jmp $1bb2			jmp 	_LVRLoop
.1c2b					_LVRSetSprite:
.1c2b	48		pha				pha 								; save on stack
.1c2c	20 75 1c	jsr $1c75			jsr 	LVFGet 						; get the sprite number into X
.1c2f	aa		tax				tax
.1c30	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1c32	b0 38		bcs $1c6c			bcs 	_LVRSSValue
.1c34	68		pla				pla 								; restore the data held in the first byte
.1c35	9d ed 0b	sta $0bed,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1c38					_LVRAlignVRAM:
.1c38	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1c3b	29 1f		and #$1f			and 	#$1F
.1c3d	f0 07		beq $1c46			beq 	_LVRAligned
.1c3f	a9 00		lda #$00			lda 	#$00
.1c41	8d 23 9f	sta $9f23			sta 	$9F23
.1c44	f0 f2		beq $1c38			beq 	_LVRAlignVRAM
.1c46					_LVRAligned:
.1c46	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1c49	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1c4a	ad 21 9f	lda $9f21			lda 	$9F21
.1c4d	6a		ror a				ror 	a
.1c4e	85 2d		sta $2d				sta 	temp1+1
.1c50	ad 20 9f	lda $9f20			lda 	$9F20
.1c53	6a		ror a				ror 	a
.1c54	85 2c		sta $2c				sta 	temp1
.1c56	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1c58					_LVRShift:
.1c58	46 2d		lsr $2d				lsr 	temp1+1
.1c5a	66 2c		ror $2c				ror 	temp1
.1c5c	88		dey				dey
.1c5d	d0 f9		bne $1c58			bne 	_LVRShift
.1c5f	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1c61	9d 6d 0c	sta $0c6d,x			sta 	imageAddr2High,x
.1c64	a5 2c		lda $2c				lda 	temp1
.1c66	9d 2d 0c	sta $0c2d,x			sta 	imageAddr2Low,x
.1c69	4c b2 1b	jmp $1bb2			jmp 	_LVRLoop
.1c6c					_LVRSSValue:
.1c6c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c6e	20 18 15	jsr $1518		jsr	errorHandler
.1c71					_LVRNotMode0:
>1c71	db						.byte 	$DB
.1c72	4c 71 1c	jmp $1c71			jmp 	_LVRNotMode0
.1c75	84 32		sty $32		LVFGet:	sty 	tempShort
.1c77	a0 00		ldy #$00			ldy 	#0
.1c79	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c7b	a4 32		ldy $32				ldy	 	tempShort
.1c7d	e6 2a		inc $2a				inc 	temp0
.1c7f	d0 02		bne $1c83			bne 	_LVFGExit
.1c81	e6 2b		inc $2b				inc 	temp0+1
.1c83					_LVFGExit:
.1c83	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1c84					section_end_extension:
.1c84					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1c84					floatingpointHandler:
.1c84	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1c86	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1c89					section_end_floatingpoint:
.1c89					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1c89					ColdStartEntry:
.1c89	a2 ff		ldx #$ff			ldx 	#$FF
.1c8b	9a		txs				txs
.1c8c	20 15 1d	jsr $1d15			jsr 	ForceStandardMode
.1c8f	a2 04		ldx #$04		ldx	#4
.1c91	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c94	a0 ff		ldy #$ff			ldy 	#255
.1c96					_CSBanner:
.1c96	c8		iny				iny
.1c97	b9 bd 1c	lda $1cbd,y			lda 	Intro,y
.1c9a	f0 14		beq $1cb0			beq 	_CSStart
.1c9c	c9 08		cmp #$08			cmp 	#8
.1c9e	90 08		bcc $1ca8			bcc 	_CSInk
.1ca0	a2 16		ldx #$16		ldx	#22
.1ca2	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ca5	4c 96 1c	jmp $1c96			jmp 	_CSBanner
.1ca8					_CSInk:
.1ca8	a2 08		ldx #$08		ldx	#8
.1caa	20 f6 14	jsr $14f6		jsr	deviceHandler
.1cad	4c 96 1c	jmp $1c96			jmp 	_CSBanner
.1cb0					_CSStart:
.1cb0	a2 16		ldx #$16		ldx	#22
.1cb2	20 0a 35	jsr $350a		jsr	mainHandler
.1cb5	a2 06		ldx #$06		ldx	#6
.1cb7	20 0a 35	jsr $350a		jsr	mainHandler
.1cba	4c d5 1d	jmp $1dd5			jmp 	WarmStartEntry
>1cbd	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1cc5	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1cd5	20 2a 2a 2a 0d 0d
>1cdb	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1ce3	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1cf3	32 30 32 31 0d 0d
>1cf9	02 42 61 73 69 63 20				.text 	2,"Basic "
>1d00	30 2e 31 38					.text "0.18"
>1d04	20 28						.text 	" ("
>1d06	32 36 2d 4d 61 72 2d 32				.text "26-Mar-2021"
>1d0e	30 32 31
>1d11	29 0d 0d 00					.text 	")",13,13,0
.1d15					ForceStandardMode:
.1d15	a9 fe		lda #$fe			lda 	#$FE
.1d17	20 60 18	jsr $1860		jsr	extensionHandler
.1d1a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1d1b					DeleteLine:
.1d1b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1d1e	85 2a		sta $2a				sta 	temp0
.1d20	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d23	85 2b		sta $2b				sta 	temp0+1
.1d25	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1d27	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1d29	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1d2b	d0 07		bne $1d34			bne 	_DLNext
.1d2d	c8		iny				iny
.1d2e	a5 58		lda $58				lda 	esInt1
.1d30	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1d32	f0 06		beq $1d3a			beq 	_DLFound
.1d34	20 58 1d	jsr $1d58	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1d37	d0 ec		bne $1d25			bne 	_DLLoop
.1d39	60		rts				rts
.1d3a					_DLFound:
.1d3a	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1d3c	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d3e	a8		tay				tay 								; so we copy from (temp0),y
.1d3f	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1d41					_DLCopyDown:
.1d41	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1d43	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1d45	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1d47	d0 02		bne $1d4b			bne 	_DLNoCarry
.1d49	e6 2b		inc $2b				inc 	temp0+1
.1d4b					_DLNoCarry:
.1d4b	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1d4d	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1d4f	d0 f0		bne $1d41			bne 	_DLCopyDown
.1d51	a5 2b		lda $2b				lda 	temp0+1
.1d53	c5 36		cmp $36				cmp 	lowMemory+1
.1d55	d0 ea		bne $1d41			bne 	_DLCopyDown
.1d57	60		rts				rts
.1d58					IAdvanceTemp0:
.1d58	84 32		sty $32				sty 	tempShort
.1d5a	18		clc				clc
.1d5b	a0 00		ldy #$00			ldy 	#0 							; get offset
.1d5d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1d5f	65 2a		adc $2a				adc 	temp0
.1d61	85 2a		sta $2a				sta 	temp0
.1d63	90 02		bcc $1d67			bcc 	_IATNoCarry
.1d65	e6 2b		inc $2b				inc 	temp0+1
.1d67					_IATNoCarry:
.1d67	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d69	a4 32		ldy $32				ldy 	tempShort
.1d6b	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1d6d	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1d6e					InsertLine:
.1d6e	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1d71	85 2a		sta $2a				sta 	temp0
.1d73	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d76	85 2b		sta $2b				sta 	temp0+1
.1d78					_ILLoop:
.1d78	a0 01		ldy #$01			ldy 	#1
.1d7a	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d7c	c5 50		cmp $50				cmp 	esInt0
.1d7e	c8		iny				iny
.1d7f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d81	e5 58		sbc $58				sbc 	esInt1
.1d83	b0 05		bcs $1d8a			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1d85	20 58 1d	jsr $1d58			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1d88	d0 ee		bne $1d78			bne 	_ILLoop
.1d8a					_ILFound:
.1d8a	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1d8c	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1d8e	a5 36		lda $36				lda 	lowMemory+1
.1d90	85 2d		sta $2d				sta 	temp1+1
.1d92	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1d95	18		clc				clc 								; add 3 for the line number and offset.
.1d96	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1d98	a8		tay				tay
.1d99	a2 00		ldx #$00			ldx 	#0
.1d9b	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1d9d	91 2c		sta ($2c),y			sta 	(temp1),y
.1d9f	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1da1	c5 2a		cmp $2a				cmp 	temp0
.1da3	d0 06		bne $1dab			bne 	_ILMNext
.1da5	a5 2d		lda $2d				lda 	temp1+1
.1da7	c5 2b		cmp $2b				cmp 	temp0+1
.1da9	f0 0b		beq $1db6			beq 	_ILMCopy
.1dab					_ILMNext:
.1dab	a5 2c		lda $2c				lda 	temp1
.1dad	d0 02		bne $1db1			bne 	_ILNoBorrow
.1daf	c6 2d		dec $2d				dec 	temp1+1
.1db1					_ILNoBorrow:
.1db1	c6 2c		dec $2c				dec 	temp1
.1db3	4c 9b 1d	jmp $1d9b			jmp 	_ILMove 					; and go round again
.1db6					_ILMCopy:
.1db6	98		tya				tya 								; Y is the offset of the new line.
.1db7	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1db9	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1dbb	a5 50		lda $50				lda 	esInt0
.1dbd	91 2a		sta ($2a),y			sta 	(temp0),y
.1dbf	c8		iny				iny
.1dc0	a5 58		lda $58				lda 	esInt1
.1dc2	91 2a		sta ($2a),y			sta 	(temp0),y
.1dc4	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1dc6					_ILMCopy2:
.1dc6	b1 28		lda ($28),y			lda 	(codePtr),y
.1dc8	c8		iny				iny
.1dc9	c8		iny				iny
.1dca	c8		iny				iny
.1dcb	91 2a		sta ($2a),y			sta 	(temp0),y
.1dcd	88		dey				dey
.1dce	88		dey				dey
.1dcf	cc ea 0d	cpy $0dea			cpy 	tokenBufferIndex
.1dd2	d0 f2		bne $1dc6			bne 	_ILMCopy2
.1dd4	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1dd5					WarmStartEntry:
.1dd5	a2 ff		ldx #$ff			ldx 	#$FF
.1dd7	9a		txs				txs
.1dd8	20 15 1d	jsr $1d15			jsr 	ForceStandardMode
.1ddb	a9 02		lda #$02			lda 	#2							; green text.
.1ddd	a2 08		ldx #$08		ldx	#8
.1ddf	20 f6 14	jsr $14f6		jsr	deviceHandler
.1de2	a2 0c		ldx #$0c		ldx	#12
.1de4	20 f6 14	jsr $14f6		jsr	deviceHandler
.1de7	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1de9	85 28		sta $28				sta 	codePtr
.1deb	a5 2b		lda $2b				lda 	temp0+1
.1ded	85 29		sta $29				sta 	codePtr+1
.1def	a2 06		ldx #$06		ldx	#6
.1df1	20 f6 14	jsr $14f6		jsr	deviceHandler
.1df4	a2 08		ldx #$08		ldx	#8
.1df6	20 ed 3f	jsr $3fed		jsr	tokeniserHandler
.1df9	c9 00		cmp #$00			cmp 	#0
.1dfb	f0 25		beq $1e22			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1dfd	a9 e7		lda #$e7			lda 	#(tokenHeader) & $FF
.1dff	85 28		sta $28				sta 	codePtr
.1e01	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1e03	85 29		sta $29				sta 	1+(codePtr)
.1e05	ad ea 0c	lda $0cea			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1e08	c9 80		cmp #$80			cmp 	#$80
.1e0a	f0 c9		beq $1dd5			beq 	WarmStartEntry
.1e0c	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1e0e	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1e10	f0 15		beq $1e27			beq 	HasLineNumber
.1e12	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1e14	8d e7 0c	sta $0ce7			sta 	tokenHeader 				; fake program line.
.1e17	8d e8 0c	sta $0ce8			sta 	tokenHeader+1
.1e1a	8d e9 0c	sta $0ce9			sta 	tokenHeader+2
.1e1d	a2 18		ldx #$18		ldx	#24
.1e1f	20 0a 35	jsr $350a		jsr	mainHandler
.1e22					WSEError:
.1e22	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1e24	20 18 15	jsr $1518		jsr	errorHandler
.1e27					HasLineNumber:
.1e27	a0 03		ldy #$03			ldy 	#3 							; get line number
.1e29	a9 00		lda #$00			lda 	#0
.1e2b	a2 0a		ldx #$0a		ldx	#10
.1e2d	20 0a 35	jsr $350a		jsr	mainHandler
.1e30	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1e32	05 68		ora $68				ora 	esInt3
.1e34	d0 ec		bne $1e22			bne 	WSEError
.1e36	98		tya				tya 								; make codePtr point to code after the line number.
.1e37	18		clc				clc 								; by skipping over the tokenised number.
.1e38	65 28		adc $28				adc 	codePtr
.1e3a	85 28		sta $28				sta 	codePtr
.1e3c	90 02		bcc $1e40			bcc		_HLNNoCarry
.1e3e	e6 29		inc $29				inc 	codePtr+1
.1e40					_HLNNoCarry:
.1e40	98		tya				tya 								; subtract that offset from the code buffer index
.1e41	38		sec				sec
.1e42	49 ff		eor #$ff			eor 	#$FF
.1e44	6d ea 0d	adc $0dea			adc 	tokenBufferIndex
.1e47	18		clc				clc 								; add space allowing for header & $80 trailer
.1e48	69 04		adc #$04			adc 	#4
.1e4a	8d ea 0d	sta $0dea			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1e4d	20 1b 1d	jsr $1d1b			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1e50					_HLNNoDelete:
.1e50	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1e53	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1e55	f0 0c		beq $1e63			beq 	_HLMEditDone
.1e57	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1e59	18		clc				clc 								; workspace (1k)
.1e5a	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1e5c	c5 34		cmp $34				cmp 	highMemory+1
.1e5e	b0 0b		bcs $1e6b			bcs 	_HLMMemory 					; nope, won't allowit.
.1e60	20 6e 1d	jsr $1d6e			jsr 	InsertLine 					; insert the line in
.1e63					_HLMEditDone:
.1e63	a2 06		ldx #$06		ldx	#6
.1e65	20 0a 35	jsr $350a		jsr	mainHandler
.1e68	4c d5 1d	jmp $1dd5			jmp 	WarmStartEntry
.1e6b					_HLMMemory:
.1e6b	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1e6d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1e70					interactionHandler:
.1e70	7c 73 1e	jmp ($1e73,x)			jmp 	(interactionVectors,x)
.1e73					interactionVectors:
>1e73	79 1e					.word _DummyControlHandler ; index 0
>1e75	89 1c					.word ColdStartEntry       ; index 2
>1e77	d5 1d					.word WarmStartEntry       ; index 4
.1e79					_DummyControlHandler:
.1e79	60		rts			rts

;******  Return to file: basic.asm

.1e7a					section_end_interaction:
.1e7a					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cad					dataPtr:
>0cad							.fill 	2
.0caf					dataIndex:
>0caf							.fill 	1
.1e7a					CommandRead:
.1e7a	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1e7c	20 bd 2d	jsr $2dbd			jsr 	EvaluateReference
.1e7f	20 c0 1e	jsr $1ec0			jsr 	SwapDPCP 					; use the data pointer.
.1e82	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1e84	c8		iny				iny
.1e85	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1e87	f0 07		beq $1e90			beq 	_CRInData
.1e89	88		dey				dey
.1e8a	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1e8c	aa		tax				tax
.1e8d	20 c1 25	jsr $25c1			jsr 	ScanForward
.1e90					_CRInData:
.1e90	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1e92	20 65 2d	jsr $2d65			jsr 	Evaluate
.1e95	ca		dex				dex 								; and write the value.
.1e96	20 14 21	jsr $2114			jsr 	WriteValue
.1e99	20 c0 1e	jsr $1ec0			jsr 	SwapDPCP 					; get the code pointer back.
.1e9c	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1e9e	c8		iny				iny
.1e9f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1ea1	f0 d7		beq $1e7a			beq 	CommandRead
.1ea3	88		dey				dey
.1ea4	60		rts				rts
.1ea5					CommandData:
.1ea5	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1ea7	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1ea9	20 c1 25	jsr $25c1			jsr 	ScanForward
.1eac	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1ead	60		rts				rts
.1eae					CommandRestore:
.1eae	ad c8 0a	lda $0ac8			lda 	basePage
.1eb1	8d ad 0c	sta $0cad			sta 	dataPtr
.1eb4	ad c9 0a	lda $0ac9			lda 	basePage+1
.1eb7	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1eba	a9 03		lda #$03			lda 	#3
.1ebc	8d af 0c	sta $0caf			sta 	dataIndex
.1ebf	60		rts				rts
.1ec0					SwapDPCP:
.1ec0	8a		txa				txa
.1ec1	48		pha				pha
.1ec2	98		tya				tya 								; swap Y, DataIndex
.1ec3	ac af 0c	ldy $0caf			ldy 	DataIndex
.1ec6	8d af 0c	sta $0caf			sta 	DataIndex
.1ec9	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1ecb	ae ad 0c	ldx $0cad			ldx 	dataptr
.1ece	8d ad 0c	sta $0cad			sta 	dataPtr
.1ed1	86 28		stx $28				stx 	codePtr
.1ed3	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1ed5	ae ae 0c	ldx $0cae			ldx 	dataptr+1
.1ed8	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1edb	86 29		stx $29				stx 	codePtr+1
.1edd	68		pla				pla
.1ede	aa		tax				tax
.1edf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1ee0					CommandGOSUB:
.1ee0	20 82 2d	jsr $2d82			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1ee3	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1ee5	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1ee7	20 b7 34	jsr $34b7			jsr 	RSClaim
.1eea	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1eec	20 e3 34	jsr $34e3			jsr 	RSSavePosition
.1eef	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1ef1	f0 1b		beq $1f0e			beq 	GotoTOS 					; and do a GOTO there.
.1ef3					CommandRETURN:
.1ef3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1ef5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1ef7	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1ef9	f0 05		beq $1f00			beq 	_isok
.1efb	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1efd	20 18 15	jsr $1518		jsr	errorHandler
.1f00					_isok:
.1f00	a9 01		lda #$01			lda 	#1
.1f02	20 f6 34	jsr $34f6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1f05	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1f07	20 d9 34	jsr $34d9			jsr 	RSFree
.1f0a	60		rts				rts
.1f0b					CommandGOTO:
.1f0b	20 82 2d	jsr $2d82			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1f0e					GotoTOS:
.1f0e	20 a5 28	jsr $28a5			jsr 	ResetCodeAddress 			; simple search.
.1f11					_GotoSearch:
.1f11	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f13	b1 28		lda ($28),y			lda 	(codePtr),y
.1f15	f0 21		beq $1f38			beq 	_GotoError 					; not found.
.1f17	c8		iny				iny									; check LSB match
.1f18	b1 28		lda ($28),y			lda 	(codePtr),y
.1f1a	d5 50		cmp $50,x			cmp 	esInt0,x
.1f1c	d0 07		bne $1f25			bne 	_GotoNext
.1f1e	c8		iny				iny
.1f1f	b1 28		lda ($28),y			lda 	(codePtr),y
.1f21	d5 58		cmp $58,x			cmp 	esInt1,x
.1f23	f0 10		beq $1f35			beq 	_GotoFound
.1f25					_GotoNext:
.1f25	a0 00		ldy #$00			ldy 	#0 							; go next line
.1f27	b1 28		lda ($28),y			lda 	(codePtr),y
.1f29	18		clc				clc
.1f2a	65 28		adc $28				adc 	codePtr
.1f2c	85 28		sta $28				sta 	codePtr
.1f2e	90 e1		bcc $1f11			bcc 	_GotoSearch
.1f30	e6 29		inc $29				inc 	codePtr+1
.1f32	4c 11 1f	jmp $1f11			jmp 	_GotoSearch
.1f35					_GotoFound:
.1f35	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1f37	60		rts				rts
.1f38					_GotoError:
.1f38	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1f3a	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb0					InputBuffer:
>0cb0							.fill 	MaxInputSize+1
.1f3d					Command_Input:
.1f3d	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1f3f	c8		iny				iny
.1f40	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1f42	f0 f9		beq $1f3d			beq 	Command_Input
.1f44	88		dey				dey 							; undo consume
.1f45	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1f47	f0 54		beq $1f9d			beq 	_CIExit 				; : or EOL, exit
.1f49	c9 80		cmp #$80			cmp 	#TOK_EOL
.1f4b	f0 50		beq $1f9d			beq 	_CIExit
.1f4d	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1f4f	90 12		bcc $1f63			bcc 	_CIVariable
.1f51	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1f53	d0 43		bne $1f98			bne 	_CISyntax
.1f55	a2 00		ldx #$00			ldx 	#0
.1f57	20 79 2d	jsr $2d79			jsr 	EvaluateString 			; evaluate and print string
.1f5a	20 76 21	jsr $2176			jsr 	TOSToTemp0
.1f5d	20 6c 20	jsr $206c			jsr 	PrintString
.1f60	4c 3d 1f	jmp $1f3d			jmp 	Command_Input
.1f63					_CIVariable:
.1f63	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1f65	20 bd 2d	jsr $2dbd			jsr 	EvaluateReference  		; this is where its going
.1f68					_CIRetry:
.1f68	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1f6a	a2 14		ldx #$14		ldx	#20
.1f6c	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f6f	98		tya				tya
.1f70	48		pha				pha
.1f71	20 b1 1f	jsr $1fb1			jsr 	InputString 			; input a string (manually)
.1f74	a2 01		ldx #$01			ldx 	#1
.1f76	20 9e 1f	jsr $1f9e			jsr 	BufferToStackX 			; make stack,x ref input string.
.1f79	a5 48		lda $48				lda 	esType 					; if target type numeric
.1f7b	29 40		and #$40			and 	#$40 					; then convert to number
.1f7d	d0 11		bne $1f90			bne 	_CIWrite
.1f7f	a2 01		ldx #$01			ldx 	#1
.1f81	20 76 21	jsr $2176			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1f84	a9 0a		lda #$0a			lda 	#10
.1f86	20 8a 32	jsr $328a			jsr 	MInt32FromString 		; convert it back from a string.
.1f89	68		pla				pla
.1f8a	a8		tay				tay
.1f8b	b0 03		bcs $1f90			bcs 	_CIWrite 				; successfully converted.
.1f8d	18		clc				clc 							; default fail FP conversion
.1f8e	90 d8		bcc $1f68			bcc		_CIRetry				; failed, try again.
.1f90					_CIWrite:
.1f90	a2 00		ldx #$00			ldx 	#0
.1f92	20 14 21	jsr $2114			jsr 	WriteValue
.1f95	4c 3d 1f	jmp $1f3d			jmp 	Command_Input
.1f98					_CISyntax:
.1f98	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1f9a	20 18 15	jsr $1518		jsr	errorHandler
.1f9d					_CIExit:
.1f9d	60		rts				rts
.1f9e					BufferToStackX:
.1f9e	a9 b0		lda #$b0			lda 	#InputBuffer & $FF
.1fa0	95 50		sta $50,x			sta 	esInt0,x
.1fa2	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.1fa4	95 58		sta $58,x			sta 	esInt1,x
.1fa6	a9 00		lda #$00			lda 	#0
.1fa8	95 60		sta $60,x			sta 	esInt2,x
.1faa	95 68		sta $68,x			sta 	esInt3,x
.1fac	a9 40		lda #$40			lda 	#$40
.1fae	95 48		sta $48,x			sta 	esType,x
.1fb0	60		rts				rts
.1fb1					InputString:
.1fb1	a9 00		lda #$00			lda 	#0
.1fb3	8d b0 0c	sta $0cb0			sta 	InputBuffer
.1fb6					_InputLoop:
.1fb6	a2 02		ldx #$02		ldx	#2
.1fb8	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fbb	a2 0a		ldx #$0a		ldx	#10
.1fbd	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fc0	c9 00		cmp #$00			cmp 	#0
.1fc2	f0 f2		beq $1fb6			beq 	_InputLoop
.1fc4	c9 08		cmp #$08			cmp 	#8
.1fc6	f0 19		beq $1fe1			beq 	_InputBackspace
.1fc8	c9 0d		cmp #$0d			cmp 	#13
.1fca	f0 21		beq $1fed			beq 	_InputExit
.1fcc	ae b0 0c	ldx $0cb0			ldx 	InputBuffer
.1fcf	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1fd1	f0 e3		beq $1fb6			beq 	_InputLoop
.1fd3	9d b1 0c	sta $0cb1,x			sta 	InputBuffer+1,x 		; write char
.1fd6	ee b0 0c	inc $0cb0			inc 	InputBuffer 			; advance count.
.1fd9					_InputPrintLoop:
.1fd9	a2 14		ldx #$14		ldx	#20
.1fdb	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fde	4c b6 1f	jmp $1fb6			jmp	 	_InputLoop
.1fe1					_InputBackspace:
.1fe1	ad b0 0c	lda $0cb0			lda 	InputBuffer 			; at start
.1fe4	f0 d0		beq $1fb6			beq 	_InputLoop
.1fe6	ce b0 0c	dec $0cb0			dec 	InputBuffer
.1fe9	a9 08		lda #$08			lda 	#8
.1feb	d0 ec		bne $1fd9			bne 	_InputPrintLoop
.1fed					_InputExit:
.1fed	a2 06		ldx #$06		ldx	#6
.1fef	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ff2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd1					lastPrintToken:
>0cd1							.fill 	1
.1ff3					Command_Print:
.1ff3	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1ff5	8d d1 0c	sta $0cd1			sta 	lastPrintToken
.1ff8	88		dey				dey
.1ff9					_PrintLoopSkip:
.1ff9	c8		iny				iny
.1ffa					_PrintLoop:
.1ffa	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1ffc	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1ffe	f0 5b		beq $205b			beq 	_PrintExit
.2000	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2002	f0 57		beq $205b			beq 	_PrintExit
.2004	8d d1 0c	sta $0cd1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2007	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2009	f0 ee		beq $1ff9			beq 	_PrintLoopSkip
.200b	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.200d	f0 3c		beq $204b			beq	 	_PrintNewLine
.200f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.2011	f0 40		beq $2053			beq 	_PrintTab
.2013	20 63 2d	jsr $2d63			jsr 	EvaluateRoot 				; evaluate something at the root
.2016	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2018	85 2a		sta $2a				sta 	temp0
.201a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.201c	85 2b		sta $2b				sta 	1+(temp0)
.201e	a5 48		lda $48				lda 	esType 						; get type
.2020	f0 15		beq $2037			beq		_PrintInteger
.2022	4a		lsr a				lsr 	a 							; check for floating point
.2023	b0 08		bcs $202d			bcs 	_PrintFloat
.2025					_PrintString:
.2025	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2027	20 76 21	jsr $2176			jsr 	TOSToTemp0
.202a	4c 45 20	jmp $2045			jmp 	_PrintTemp0 				; print no leading space.
.202d					_PrintFloat:
.202d	a9 00		lda #$00			lda 	#0 							; stack level.
.202f	a2 16		ldx #$16		ldx	#22
.2031	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2034	4c 3e 20	jmp $203e			jmp 	_PrintSpaceTemp0
.2037					_PrintInteger:
.2037	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2039	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.203b	20 72 33	jsr $3372			jsr 	MInt32ToString				; convert to text
.203e					_PrintSpaceTemp0:
.203e	a9 20		lda #$20			lda 	#32
.2040	a2 14		ldx #$14		ldx	#20
.2042	20 f6 14	jsr $14f6		jsr	deviceHandler
.2045					_PrintTemp0:
.2045	20 6c 20	jsr $206c			jsr 	PrintString
.2048	4c fa 1f	jmp $1ffa			jmp 	_PrintLoop
.204b					_PrintNewLine:
.204b	a2 06		ldx #$06		ldx	#6
.204d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2050	4c f9 1f	jmp $1ff9			jmp 	_PrintLoopSkip
.2053					_PrintTab:
.2053	a2 1a		ldx #$1a		ldx	#26
.2055	20 f6 14	jsr $14f6		jsr	deviceHandler
.2058	4c f9 1f	jmp $1ff9			jmp 	_PrintLoopSkip
.205b					_PrintExit:
.205b	ad d1 0c	lda $0cd1			lda		lastPrintToken 				; check last token
.205e	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2060	f0 09		beq $206b			beq 	_PrintExit2
.2062	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2064	f0 05		beq $206b			beq 	_PrintExit2
.2066	a2 06		ldx #$06		ldx	#6
.2068	20 f6 14	jsr $14f6		jsr	deviceHandler
.206b					_PrintExit2:
.206b	60		rts				rts
.206c					PrintString:
.206c	8a		txa				txa
.206d	48		pha				pha
.206e	98		tya				tya
.206f	48		pha				pha
.2070	a0 00		ldy #$00			ldy 	#0							; get length
.2072	b1 2a		lda ($2a),y			lda 	(temp0),y
.2074	aa		tax				tax 								; into X
.2075	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2077	f0 10		beq $2089			beq 	_PSExit
.2079	ca		dex				dex
.207a	8a		txa				txa
.207b	48		pha				pha
.207c	c8		iny				iny
.207d	b1 2a		lda ($2a),y			lda 	(temp0),y
.207f	a2 14		ldx #$14		ldx	#20
.2081	20 f6 14	jsr $14f6		jsr	deviceHandler
.2084	68		pla				pla
.2085	aa		tax				tax
.2086	4c 75 20	jmp $2075			jmp 	_PSLoop
.2089					_PSExit:
.2089	68		pla				pla
.208a	a8		tay				tay
.208b	68		pla				pla
.208c	aa		tax				tax
.208d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.208e					Command_CLS:
.208e	a2 04		ldx #$04		ldx	#4
.2090	20 f6 14	jsr $14f6		jsr	deviceHandler
.2093	60		rts				rts
.2094					Command_Ink:
.2094	a2 00		ldx #$00			ldx 	#0
.2096	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger
.2099	a2 08		ldx #$08		ldx	#8
.209b	20 f6 14	jsr $14f6		jsr	deviceHandler
.209e	60		rts				rts
.209f					Command_Paper:
.209f	a2 00		ldx #$00			ldx 	#0
.20a1	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger
.20a4	a2 12		ldx #$12		ldx	#18
.20a6	20 f6 14	jsr $14f6		jsr	deviceHandler
.20a9	60		rts				rts
.20aa					Command_Locate:
.20aa	a2 00		ldx #$00			ldx 	#0
.20ac	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger
.20af	20 9c 34	jsr $349c			jsr 	CheckComma
.20b2	e8		inx				inx
.20b3	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger
.20b6	98		tya				tya
.20b7	48		pha				pha
.20b8	a4 51		ldy $51				ldy 	esInt0+1
.20ba	a5 50		lda $50				lda 	esInt0
.20bc	a2 10		ldx #$10		ldx	#16
.20be	20 f6 14	jsr $14f6		jsr	deviceHandler
.20c1	68		pla				pla
.20c2	a8		tay				tay
.20c3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.20c4					Command_VDU:
.20c4	20 82 2d	jsr $2d82			jsr 	EvaluateRootInteger 			; get integer at root.
.20c7	a5 50		lda $50				lda 	esInt0
.20c9	a2 14		ldx #$14		ldx	#20
.20cb	20 f6 14	jsr $14f6		jsr	deviceHandler
.20ce					_CVNext:
.20ce	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.20d0	c8		iny				iny
.20d1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.20d3	f0 ef		beq $20c4			beq 	Command_VDU
.20d5	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.20d7	d0 0a		bne $20e3			bne 	_CVExit
.20d9	a5 58		lda $58				lda 	esInt1
.20db	a2 14		ldx #$14		ldx	#20
.20dd	20 f6 14	jsr $14f6		jsr	deviceHandler
.20e0	4c ce 20	jmp $20ce			jmp 	_CVNext
.20e3	88		dey		_CVExit:dey
.20e4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.20e5					Command_Assert:
.20e5	20 82 2d	jsr $2d82			jsr 	EvaluateRootInteger 		; what is being asserted.
.20e8	20 43 34	jsr $3443			jsr 	MInt32Zero 					; is it true ?
.20eb	f0 01		beq $20ee			beq 	_CAError
.20ed	60		rts				rts
.20ee					_CAError:
.20ee	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.20f0	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.20f3					Command_Dim:
.20f3	a2 04		ldx #$04		ldx	#4
.20f5	20 be 43	jsr $43be		jsr	variableHandler
.20f8	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.20fa	c8		iny				iny
.20fb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.20fd	f0 f4		beq $20f3			beq 	Command_Dim
.20ff	88		dey				dey 								; unpick get
.2100	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.2101					CommandLet:
.2101	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.2103	20 bd 2d	jsr $2dbd			jsr 	EvaluateReference
.2106	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2108	20 84 34	jsr $3484			jsr 	CheckToken
.210b	e8		inx				inx 								; do RHS
.210c	20 65 2d	jsr $2d65			jsr 	Evaluate 					; evaluate and dereference
.210f	ca		dex				dex
.2110	20 14 21	jsr $2114			jsr 	WriteValue 					; write it out
.2113	60		rts				rts
.2114					WriteValue:
.2114	98		tya				tya
.2115	48		pha				pha
.2116	20 76 21	jsr $2176			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2119	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.211b	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.211d	29 40		and #$40			and 	#$40
.211f	d0 50		bne $2171			bne		_WVType
.2121	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2123	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.2125	29 40		and #$40			and 	#$40
.2127	d0 1f		bne $2148			bne 	_WVCopyString
.2129	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.212b	15 49		ora $49,x			ora 	esType+1,x
.212d	4a		lsr a				lsr 	a
.212e	90 22		bcc $2152			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2130	b5 48		lda $48,x			lda 	esType,x
.2132	4a		lsr a				lsr 	a
.2133	90 3c		bcc $2171			bcc 	_WVType
.2135	e8		inx				inx 								; force the value being written to be a float.
.2136	20 c7 29	jsr $29c7			jsr 	BPMakeFloat
.2139	ca		dex				dex
.213a	20 76 21	jsr $2176			jsr 	TOSToTemp0 					; set Temp0 to write address
.213d	e8		inx				inx
.213e	8a		txa				txa
.213f	a2 22		ldx #$22		ldx	#34
.2141	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2144	aa		tax				tax
.2145	4c 6e 21	jmp $216e			jmp 	_WVCopyExit
.2148					_WVCopyString:
.2148	8a		txa				txa
.2149	a2 10		ldx #$10		ldx	#16
.214b	20 c7 37	jsr $37c7		jsr	stringHandler
.214e	aa		tax				tax
.214f	4c 6e 21	jmp $216e			jmp 	_WVCopyExit
.2152					_WVCopyData4:
.2152	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.2154	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2156	d0 10		bne $2168			bne 	_WVCopyData1
.2158	a0 03		ldy #$03			ldy 	#3
.215a	b5 69		lda $69,x			lda 	esInt3+1,x
.215c	91 2a		sta ($2a),y			sta 	(temp0),y
.215e	88		dey				dey
.215f	b5 61		lda $61,x			lda 	esInt2+1,x
.2161	91 2a		sta ($2a),y			sta 	(temp0),y
.2163	88		dey				dey
.2164	b5 59		lda $59,x			lda 	esInt1+1,x
.2166	91 2a		sta ($2a),y			sta 	(temp0),y
.2168					_WVCopyData1:
.2168	a0 00		ldy #$00			ldy 	#0
.216a	b5 51		lda $51,x			lda 	esInt0+1,x
.216c	91 2a		sta ($2a),y			sta 	(temp0),y
.216e					_WVCopyExit:
.216e	68		pla				pla
.216f	a8		tay				tay
.2170	60		rts				rts
.2171					_WVType:
.2171	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2173	20 18 15	jsr $1518		jsr	errorHandler
.2176					TOSToTemp0:
.2176	b5 50		lda $50,x			lda 	esInt0,x
.2178	85 2a		sta $2a				sta 	temp0
.217a	b5 58		lda $58,x			lda 	esInt1,x
.217c	85 2b		sta $2b				sta 	temp0+1
.217e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.217f					Command_Poke:
.217f	a9 01		lda #$01			lda 	#1
.2181	d0 06		bne $2189			bne 	PokeGeneral
.2183					Command_Doke:
.2183	a9 02		lda #$02			lda 	#2
.2185	d0 02		bne $2189			bne 	PokeGeneral
.2187					Command_Loke:
.2187	a9 03		lda #$03			lda 	#3
.2189					PokeGeneral:
.2189	48		pha				pha 								; save id (PDL = 123)
.218a	20 82 2d	jsr $2d82			jsr 	EvaluateRootInteger 		; target address
.218d	20 9c 34	jsr $349c			jsr	 	CheckComma
.2190	e8		inx				inx
.2191	20 84 2d	jsr $2d84			jsr 	EvaluateInteger 			; what value to POKE ?
.2194	ca		dex				dex
.2195	20 76 21	jsr $2176			jsr 	TOSToTemp0 					; temp0 points to the target address
.2198	84 32		sty $32				sty 	tempShort 					; save Y
.219a	68		pla				pla 								; get copy type (1-3) and dispatch
.219b	aa		tax				tax
.219c	ca		dex				dex
.219d	f0 14		beq $21b3			beq 	_Poke1
.219f	ca		dex				dex
.21a0	f0 0b		beq $21ad			beq 	_Poke2
.21a2	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.21a4	a5 69		lda $69				lda 	esInt3+1
.21a6	91 2a		sta ($2a),y			sta 	(temp0),y
.21a8	88		dey				dey
.21a9	a5 61		lda $61				lda 	esInt2+1
.21ab	91 2a		sta ($2a),y			sta 	(temp0),y
.21ad					_Poke2:
.21ad	a0 01		ldy #$01			ldy 	#1
.21af	a5 59		lda $59				lda 	esInt1+1
.21b1	91 2a		sta ($2a),y			sta 	(temp0),y
.21b3					_Poke1:
.21b3	a0 00		ldy #$00			ldy 	#0
.21b5	a5 51		lda $51				lda 	esInt0+1
.21b7	91 2a		sta ($2a),y			sta 	(temp0),y
.21b9	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.21bb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.21bc					Command_Rem:
.21bc					Command_Rem2:
.21bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.21be	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.21c0	d0 06		bne $21c8			bne 	_CRNotString
.21c2	c8		iny				iny
.21c3	98		tya				tya
.21c4	38		sec				sec
.21c5	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.21c7	a8		tay				tay
.21c8					_CRNotString:
.21c8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.21c9					CommandStop:
.21c9	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.21cb	20 18 15	jsr $1518		jsr	errorHandler
.21ce					CommandEnd:
.21ce	4c 05 35	jmp $3505			jmp 	WarmStart
.21d1					CommandXemu:
.21d1	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.21d4					AdvanceNextLine:
.21d4	a0 00		ldy #$00			ldy 	#0 							; get offset
.21d6	b1 28		lda ($28),y			lda 	(codePtr),y
.21d8	18		clc				clc 								; add to codePtr
.21d9	65 28		adc $28				adc 	codePtr
.21db	85 28		sta $28				sta 	codePtr
.21dd	90 02		bcc $21e1			bcc 	_ANLNoCarry
.21df	e6 29		inc $29				inc 	codePtr+1
.21e1					_ANLNoCarry:
.21e1	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.21e3	f0 e9		beq $21ce			beq 	CommandEnd 					; execute END
.21e5	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.21e7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.21e8					Command_FOR:
.21e8	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.21ea	a2 0b		ldx #$0b			ldx 	#11
.21ec	20 b7 34	jsr $34b7			jsr 	RSClaim
.21ef	20 01 21	jsr $2101			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.21f2	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.21f4	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.21f6	d0 4c		bne $2244			bne 	_CFType
.21f8	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.21fa	20 84 34	jsr $3484			jsr 	CheckToken
.21fd	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.21ff	20 84 2d	jsr $2d84			jsr 	EvaluateInteger				; get terminal value in stack 1
.2202	98		tya				tya
.2203	48		pha				pha
.2204	a0 04		ldy #$04			ldy 	#4
.2206	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2208	91 37		sta ($37),y			sta 	(rsPointer),y
.220a	c8		iny				iny
.220b	a5 58		lda $58				lda		esInt1
.220d	91 37		sta ($37),y			sta 	(rsPointer),y
.220f	c8		iny				iny
.2210	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2212	91 37		sta ($37),y			sta 	(rsPointer),y
.2214	c8		iny				iny
.2215	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.2217	91 37		sta ($37),y			sta 	(rsPointer),y
.2219	c8		iny				iny
.221a	a5 59		lda $59				lda		esInt1+1
.221c	91 37		sta ($37),y			sta 	(rsPointer),y
.221e	c8		iny				iny
.221f	a5 61		lda $61				lda		esInt2+1
.2221	91 37		sta ($37),y			sta 	(rsPointer),y
.2223	c8		iny				iny
.2224	a5 69		lda $69				lda		esInt3+1
.2226	91 37		sta ($37),y			sta 	(rsPointer),y
.2228	68		pla				pla
.2229	a8		tay				tay
.222a	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.222c	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.222e	d0 0e		bne $223e			bne 	_CFDone
.2230	c8		iny				iny									; skip over step.
.2231	20 84 2d	jsr $2d84			jsr 	EvaluateInteger 			; get step
.2234	98		tya				tya
.2235	48		pha				pha
.2236	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2238	a0 06		ldy #$06			ldy 	#6
.223a	91 37		sta ($37),y			sta 	(rsPointer),y
.223c	68		pla				pla
.223d	a8		tay				tay
.223e					_CFDone:
.223e	a9 01		lda #$01			lda 	#1
.2240	20 e3 34	jsr $34e3			jsr 	RSSavePosition 				; save position.
.2243	60		rts				rts
.2244					_CFType:
.2244	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2246	20 18 15	jsr $1518		jsr	errorHandler
.2249					Command_NEXT:
.2249	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.224b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.224d	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.224f	f0 05		beq $2256			beq 	_isok
.2251	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2253	20 18 15	jsr $1518		jsr	errorHandler
.2256					_isok:
.2256	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2258	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.225a	b0 18		bcs $2274			bcs 	_CNNoIndex
.225c	a2 00		ldx #$00			ldx 	#0 							; start on stack
.225e	20 bd 2d	jsr $2dbd			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2261	98		tya				tya
.2262	48		pha				pha
.2263	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2265	b1 37		lda ($37),y			lda 	(rsPointer),y
.2267	d5 50		cmp $50,x			cmp 	esInt0,x
.2269	d0 76		bne $22e1			bne 	_CNBadIndex
.226b	c8		iny				iny
.226c	b1 37		lda ($37),y			lda 	(rsPointer),y
.226e	d5 58		cmp $58,x			cmp 	esInt1,x
.2270	d0 6f		bne $22e1			bne 	_CNBadIndex
.2272	68		pla				pla
.2273	a8		tay				tay
.2274					_CNNoIndex:
.2274	98		tya				tya
.2275	48		pha				pha
.2276	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2278	b1 37		lda ($37),y			lda 	(rsPointer),y
.227a	85 2a		sta $2a				sta 	temp0
.227c	c8		iny				iny
.227d	b1 37		lda ($37),y			lda 	(rsPointer),y
.227f	85 2b		sta $2b				sta 	temp0+1
.2281	c8		iny				iny
.2282	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2284	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2286	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2288	10 01		bpl $228b			bpl 	_CNSignX
.228a	ca		dex				dex  								; X = $FF
.228b					_CNSignX:
.228b	18		clc				clc 								; add to the LSB
.228c	a0 00		ldy #$00			ldy 	#0
.228e	71 2a		adc ($2a),y			adc 	(temp0),y
.2290	91 2a		sta ($2a),y			sta 	(temp0),y
.2292					_CNPropogate:
.2292	c8		iny				iny  								; add the sign extended in X to the rest.
.2293	8a		txa				txa
.2294	71 2a		adc ($2a),y			adc 	(temp0),y
.2296	91 2a		sta ($2a),y			sta 	(temp0),y
.2298	c8		iny				iny
.2299	8a		txa				txa
.229a	71 2a		adc ($2a),y			adc 	(temp0),y
.229c	91 2a		sta ($2a),y			sta 	(temp0),y
.229e	c8		iny				iny
.229f	8a		txa				txa
.22a0	71 2a		adc ($2a),y			adc 	(temp0),y
.22a2	91 2a		sta ($2a),y			sta 	(temp0),y
.22a4	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.22a5	a5 37		lda $37				lda 	rsPointer
.22a7	69 07		adc #$07			adc 	#7
.22a9	85 2c		sta $2c				sta 	temp1
.22ab	a9 00		lda #$00			lda 	#0
.22ad	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.22af	a8		tay				tay 								; and clear the Y register again.
.22b0	65 38		adc $38				adc 	rsPointer+1
.22b2	85 2d		sta $2d				sta 	temp1+1
.22b4	38		sec				sec 								; calculate current - limit oring interim values.
.22b5	20 ed 22	jsr $22ed			jsr 	_CNCompare 					; each of these does a byte.
.22b8	20 ed 22	jsr $22ed			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.22bb	20 ed 22	jsr $22ed			jsr 	_CNCompare 					; and the carry of the subtraction.
.22be	20 ed 22	jsr $22ed			jsr 	_CNCompare
.22c1	50 02		bvc $22c5			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.22c3	49 80		eor #$80			eor 	#$80
.22c5					_CNNoOverflow:
.22c5	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.22c7	30 1d		bmi $22e6			bmi 	_CNCheckDownto
.22c9	c9 00		cmp #$00			cmp 	#0
.22cb	30 0c		bmi $22d9			bmi 	_CNLoopRound 				; loop round if < =
.22cd	a5 2e		lda $2e				lda 	temp2
.22cf	f0 08		beq $22d9			beq 	_CNLoopRound
.22d1					_CNLoopExit:
.22d1	68		pla				pla
.22d2	a8		tay				tay
.22d3	a9 0b		lda #$0b			lda 	#11
.22d5	20 d9 34	jsr $34d9			jsr 	RSFree
.22d8	60		rts				rts
.22d9					_CNLoopRound:
.22d9	68		pla				pla
.22da	a8		tay				tay
.22db	a9 01		lda #$01			lda 	#1
.22dd	20 f6 34	jsr $34f6			jsr 	RSLoadPosition				; go back to the loop top
.22e0	60		rts				rts
.22e1					_CNBadIndex:
.22e1	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.22e3	20 18 15	jsr $1518		jsr	errorHandler
.22e6					_CNCheckDownto:
.22e6	c9 00		cmp #$00			cmp 	#0
.22e8	10 ef		bpl $22d9			bpl 	_CNLoopRound
.22ea	4c d1 22	jmp $22d1			jmp 	_CNLoopExit
.22ed					_CNCompare:
.22ed	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.22ef	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.22f1	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.22f3	85 2e		sta $2e				sta 	temp2
.22f5	c8		iny				iny
.22f6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.22f7					CommandIf:
.22f7	20 82 2d	jsr $2d82			jsr 	EvaluateRootInteger 		; get what's being tested.
.22fa	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.22fc	c9 91		cmp #$91			cmp 	#TKW_GOTO
.22fe	f0 04		beq $2304			beq 	_IfSimple
.2300	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2302	d0 1b		bne $231f			bne 	_IfComplex
.2304					_IfSimple:
.2304	20 43 34	jsr $3443			jsr 	MInt32Zero					; check if TOS zero
.2307	f0 10		beq $2319			beq 	_IfEOL 						; go to next line.
.2309	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.230b	c8		iny				iny
.230c	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.230e	f0 0c		beq $231c			beq 	_IfGoto 					; do the Goto code
.2310	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2312	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.2314	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.2316	f0 04		beq $231c			beq 	_IfGoto
.2318	60		rts				rts 								; else continue on this line.
.2319					_IfEOL:
.2319	4c d4 21	jmp $21d4			jmp 	AdvanceNextLine 			; go to next line
.231c					_IfGoto:
.231c	4c 0b 1f	jmp $1f0b			jmp 	CommandGoto
.231f					_IfComplex:
.231f	20 43 34	jsr $3443			jsr 	MInt32Zero 					; is it true ?
.2322	f0 01		beq $2325			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2324	60		rts				rts 								; else continue.
.2325					_IFSkip:
.2325	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2327	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2329	4c c1 25	jmp $25c1			jmp		ScanForward
.232c					Command_ELSE:
.232c	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.232e	8a		txa				txa
.232f	4c c1 25	jmp $25c1			jmp		ScanForward
.2332					Command_ENDIF:
.2332	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd2					storeSize:
>0cd2							.fill 	1
.2333					CommandLocal:
.2333	a2 00		ldx #$00			ldx 	#0
.2335	20 51 23	jsr $2351			jsr 	LocaliseVariable 			; localise one.
.2338					_CLCheckNext:
.2338	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.233a	c8		iny				iny
.233b	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.233d	f0 06		beq $2345			beq 	_CLAssignment
.233f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2341	f0 f0		beq $2333			beq 	CommandLocal
.2343	88		dey				dey
.2344	60		rts				rts
.2345					_CLAssignment:
.2345	a2 01		ldx #$01			ldx 	#1
.2347	20 65 2d	jsr $2d65			jsr 	Evaluate 					; evaluate RHS
.234a	ca		dex				dex
.234b	20 14 21	jsr $2114			jsr 	WriteValue
.234e	4c 38 23	jmp $2338			jmp 	_CLCheckNext
.2351					LocaliseVariable:
.2351	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2353	c9 40		cmp #$40			cmp 	#$40
.2355	b0 67		bcs $23be			bcs 	_LVSyntax
.2357	8a		txa				txa 								; get the address of that variable.
.2358	a2 02		ldx #$02		ldx	#2
.235a	20 be 43	jsr $43be		jsr	variableHandler
.235d	aa		tax				tax
.235e	8a		txa				txa
.235f	48		pha				pha
.2360	98		tya				tya
.2361	48		pha				pha
.2362	20 76 21	jsr $2176			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2365	b5 48		lda $48,x			lda 	esType,x 					; get the type
.2367	0a		asl a				asl 	a
.2368	10 16		bpl $2380			bpl 	_LVPushNumber
.236a	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.236c	b1 2a		lda ($2a),y			lda 	(temp0),y
.236e	c8		iny				iny
.236f	85 2c		sta $2c				sta 	temp1
.2371	b1 2a		lda ($2a),y			lda 	(temp0),y
.2373	85 2d		sta $2d				sta 	temp1+1
.2375	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2377	b1 2c		lda ($2c),y			lda 	(temp1),y
.2379	aa		tax				tax 								; into X
.237a	e8		inx				inx 								; +1 for length.
.237b	a9 24		lda #$24			lda 	#markerString
.237d	4c 95 23	jmp $2395			jmp 	_LVWriteFrame
.2380					_LVPushNumber:
.2380	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2382	85 2c		sta $2c				sta 	temp1
.2384	a5 2b		lda $2b				lda 	temp0+1
.2386	85 2d		sta $2d				sta 	temp1+1
.2388	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.238a	4a		lsr a				lsr 	a
.238b	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.238d	a2 04		ldx #$04			ldx 	#VarISize
.238f	90 04		bcc $2395			bcc 	_LVIsInteger
.2391	a9 23		lda #$23			lda 	#markerFloat
.2393	a2 06		ldx #$06			ldx 	#VarFSize
.2395					_LVIsInteger:
.2395					_LVWriteFrame:
.2395	8e d2 0c	stx $0cd2			stx 	storeSize 					; number of bytes to copy from (temp0)
.2398	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2399	e8		inx				inx
.239a	e8		inx				inx
.239b	20 b7 34	jsr $34b7			jsr 	RSClaim 					; create the stack frame.
.239e	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.23a0	a0 01		ldy #$01			ldy 	#1
.23a2	91 37		sta ($37),y			sta 	(rsPointer),y
.23a4	c8		iny				iny
.23a5	a5 2b		lda $2b				lda 	temp0+1
.23a7	91 37		sta ($37),y			sta 	(rsPointer),y
.23a9	a0 00		ldy #$00			ldy 	#0
.23ab					_LVCopyData:
.23ab	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.23ad	c8		iny				iny 								; write allowing for the header bit.
.23ae	c8		iny				iny
.23af	c8		iny				iny
.23b0	91 37		sta ($37),y			sta 	(rsPointer),y
.23b2	88		dey				dey
.23b3	88		dey				dey
.23b4	ce d2 0c	dec $0cd2			dec 	storeSize 					; do it storesize times
.23b7	d0 f2		bne $23ab			bne 	_LVCopyData
.23b9	68		pla				pla
.23ba	a8		tay				tay
.23bb	68		pla				pla
.23bc	aa		tax				tax
.23bd	60		rts				rts
.23be					_LVSyntax:
.23be	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.23c0	20 18 15	jsr $1518		jsr	errorHandler
.23c3					RestoreLocals:
.23c3	a2 00		ldx #$00			ldx 	#0
.23c5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23c7	c9 40		cmp #$40			cmp	 	#64
.23c9	90 01		bcc $23cc			bcc 	_RLocal
.23cb	60		rts				rts
.23cc					_RLocal:
.23cc	8a		txa				txa
.23cd	48		pha				pha
.23ce	98		tya				tya
.23cf	48		pha				pha
.23d0	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.23d2	b1 37		lda ($37),y			lda 	(rsPointer),y
.23d4	85 2a		sta $2a				sta 	temp0
.23d6	c8		iny				iny
.23d7	b1 37		lda ($37),y			lda 	(rsPointer),y
.23d9	85 2b		sta $2b				sta 	temp0+1
.23db	a0 00		ldy #$00			ldy 	#0 							; get type back.
.23dd	b1 37		lda ($37),y			lda 	(rsPointer),y
.23df	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.23e1	f0 28		beq $240b			beq 	_RString
.23e3	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.23e5	c9 25		cmp #$25			cmp 	#markerInt
.23e7	f0 02		beq $23eb			beq 	_RIsInteger
.23e9	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.23eb					_RIsInteger:
.23eb	8a		txa				txa
.23ec	48		pha				pha
.23ed	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.23ef					_RCopyBack:
.23ef	b1 37		lda ($37),y			lda 	(rsPointer),y
.23f1	88		dey				dey
.23f2	88		dey				dey
.23f3	88		dey				dey
.23f4	91 2a		sta ($2a),y			sta 	(temp0),y
.23f6	c8		iny				iny
.23f7	c8		iny				iny
.23f8	c8		iny				iny
.23f9	c8		iny				iny
.23fa	ca		dex				dex
.23fb	d0 f2		bne $23ef			bne 	_RCopyBack
.23fd	68		pla				pla 								; get size add 3
.23fe	18		clc				clc
.23ff	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2401					_RRestoreAAndLoop:
.2401	20 d9 34	jsr $34d9			jsr 	RSFree
.2404	68		pla				pla
.2405	a8		tay				tay
.2406	68		pla				pla
.2407	aa		tax				tax
.2408	4c c3 23	jmp $23c3			jmp 	RestoreLocals 				; go see if there are any more locals.
.240b					_RString:
.240b	a2 00		ldx #$00			ldx 	#0
.240d	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.240f	b1 37		lda ($37),y			lda 	(rsPointer),y
.2411	95 50		sta $50,x			sta 	esInt0,x
.2413	c8		iny				iny
.2414	b1 37		lda ($37),y			lda 	(rsPointer),y
.2416	95 58		sta $58,x			sta 	esInt1,x
.2418	18		clc				clc
.2419	a5 37		lda $37				lda 	rsPointer
.241b	69 03		adc #$03			adc 	#3
.241d	95 51		sta $51,x			sta 	esInt0+1,x
.241f	a5 38		lda $38				lda 	rsPointer+1
.2421	69 00		adc #$00			adc 	#0
.2423	95 59		sta $59,x			sta 	esInt1+1,x
.2425	8a		txa				txa
.2426	a2 10		ldx #$10		ldx	#16
.2428	20 c7 37	jsr $37c7		jsr	stringHandler
.242b	a0 03		ldy #$03			ldy 	#3 							; get string length
.242d	b1 37		lda ($37),y			lda 	(rsPointer),y
.242f	18		clc				clc
.2430	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2432	4c 01 24	jmp $2401			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd3					paramCount:
>0cd3							.fill 	1
.2435					CallProc:
.2435	20 bd 24	jsr $24bd			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2438	48		pha				pha 								; save length on stack
.2439	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.243b	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.243d	48		pha				pha
.243e	a5 2a		lda $2a				lda 	temp0
.2440	48		pha				pha
.2441	98		tya				tya 								; calculate Y + length
.2442	18		clc				clc
.2443	65 32		adc $32				adc 	tempShort
.2445	a8		tay				tay
.2446	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2448					_CallProcEvalParams:
.2448	e8		inx				inx
.2449	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.244b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.244d	f0 0b		beq $245a			beq 	_CPDoneParams
.244f	20 65 2d	jsr $2d65			jsr 	Evaluate 					; evaluate a parameter
.2452	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2454	c8		iny				iny
.2455	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2457	f0 ef		beq $2448			beq 	_CallProcEvalParams
.2459	88		dey				dey 								; undo consumption.
.245a					_CPDoneParams:
.245a	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; check closing parenthesis.
.245d	8e d3 0c	stx $0cd3			stx 	paramCount 					; store parameter count+1
.2460	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2462	a9 50		lda #$50			lda 	#markerPROC
.2464	20 b7 34	jsr $34b7			jsr 	RSClaim
.2467	a9 01		lda #$01			lda 	#1 							; store return address.
.2469	20 e3 34	jsr $34e3			jsr 	RSSavePosition
.246c	68		pla				pla 								; get the new code Ptr
.246d	85 28		sta $28				sta 	codePtr
.246f	68		pla				pla
.2470	85 29		sta $29				sta 	codePtr+1
.2472	68		pla				pla 								; length of name + 4 is the param start.
.2473	18		clc				clc
.2474	69 04		adc #$04			adc 	#4
.2476	a8		tay				tay
.2477	a2 ff		ldx #$ff			ldx 	#$FF
.2479					_CPLoadParameters:
.2479	e8		inx				inx 								; point to where the address should be loaded.
.247a	ec d3 0c	cpx $0cd3			cpx 	paramCount 					; too many parameters in definition ?
.247d	f0 1e		beq $249d			beq 	_CPParamError
.247f	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2481	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2483	f0 0e		beq $2493			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2485	20 51 23	jsr $2351			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2488	20 14 21	jsr $2114			jsr 	WriteValue 					; copy the evaluated parameter into there.
.248b	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.248d	c8		iny				iny
.248e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2490	f0 e7		beq $2479			beq 	_CPLoadParameters
.2492	88		dey				dey 								; no, unconsume and check for )
.2493					_CPParamComplete:
.2493	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; check )
.2496	e8		inx				inx 								; check right number of parameters have been consumed
.2497	ec d3 0c	cpx $0cd3			cpx 	paramCount
.249a	d0 01		bne $249d			bne 	_CPParamError
.249c	60		rts				rts
.249d					_CPParamError:
.249d	a2 18		ldx #$18			ldx 	#ErrorID_Params
.249f	20 18 15	jsr $1518		jsr	errorHandler
.24a2					ReturnProc:
.24a2	20 c3 23	jsr $23c3			jsr 	RestoreLocals 				; get the locals back.
.24a5	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.24a7	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.24a9	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.24ab	f0 05		beq $24b2			beq 	_isok
.24ad	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.24af	20 18 15	jsr $1518		jsr	errorHandler
.24b2					_isok:
.24b2	a9 01		lda #$01			lda 	#1
.24b4	20 f6 34	jsr $34f6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.24b7	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.24b9	20 d9 34	jsr $34d9			jsr 	RSFree
.24bc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd4					procList:
>0cd4							.fill 	2		 					; terminated by name high being zero.
.0cd6					yInLine:
>0cd6							.fill 	1
.24bd					FindProcedure:
.24bd	8c d6 0c	sty $0cd6			sty 	yInLine 					; save current position.
.24c0	20 7b 25	jsr $257b			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.24c3	85 2c		sta $2c				sta 	temp1
.24c5	ad d4 0c	lda $0cd4			lda		procList 					; put procList address in temp2
.24c8	85 2e		sta $2e				sta 	temp2
.24ca	ad d5 0c	lda $0cd5			lda 	procList+1
.24cd	85 2f		sta $2f				sta 	temp2+1
.24cf	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.24d1					_FPLoop:
.24d1	b1 2e		lda ($2e),y			lda 	(temp2),y
.24d3	f0 4f		beq $2524			beq 	_FPError 					; if so, we don't know this procedure.
.24d5	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.24d7	c8		iny				iny
.24d8	b1 2e		lda ($2e),y			lda 	(temp2),y
.24da	85 2a		sta $2a				sta 	temp0
.24dc	c8		iny				iny
.24dd	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.24df	c5 2c		cmp $2c				cmp 	temp1
.24e1	d0 2b		bne $250e			bne 	_FPNext 					; hash is different, go to next.
.24e3	38		sec				sec
.24e4	ad d6 0c	lda $0cd6			lda 	yInLine 					; position in line must be at least 4
.24e7	e9 04		sbc #$04			sbc 	#4
.24e9	18		clc				clc
.24ea	65 28		adc $28				adc 	codePtr
.24ec	85 30		sta $30				sta 	temp3
.24ee	a5 29		lda $29				lda 	codePtr+1
.24f0	69 00		adc #$00			adc 	#0
.24f2	85 31		sta $31				sta 	temp3+1
.24f4	98		tya				tya
.24f5	48		pha				pha
.24f6	a0 04		ldy #$04			ldy 	#4
.24f8					_FPCName:
.24f8	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.24fa	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.24fc	d0 0e		bne $250c			bne 	_FPpulYNext 				; if different go to next one.
.24fe	c8		iny				iny
.24ff	c9 3a		cmp #$3a			cmp 	#$3A
.2501	90 f5		bcc $24f8			bcc 	_FPCName 					; compare the whole lot....
.2503	68		pla				pla 								; throw away the saved Y
.2504	98		tya				tya 								; length of name is Y-4
.2505	38		sec				sec
.2506	e9 04		sbc #$04			sbc 	#4
.2508	ac d6 0c	ldy $0cd6			ldy 	yInLine  					; get the original Y back
.250b	60		rts				rts
.250c					_FPpulYNext:
.250c	68		pla				pla
.250d	a8		tay				tay
.250e					_FPNext:
.250e	c8		iny				iny 								; next procedure record.
.250f	10 c0		bpl $24d1			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2511	98		tya				tya 								; subtract 128 from Y
.2512	38		sec				sec
.2513	e9 80		sbc #$80			sbc 	#128
.2515	a8		tay				tay
.2516	18		clc				clc 								; add 128 to temp2, so we can have more than
.2517	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2519	69 80		adc #$80			adc 	#128
.251b	85 2e		sta $2e				sta 	temp2
.251d	90 b2		bcc $24d1			bcc 	_FPLoop
.251f	e6 2f		inc $2f				inc 	temp2+1
.2521	4c d1 24	jmp $24d1			jmp 	_FPLoop
.2524					_FPError:
.2524	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2526	20 18 15	jsr $1518		jsr	errorHandler
.2529					ScanProc:
.2529	98		tya				tya
.252a	48		pha				pha
.252b	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.252d	8d d4 0c	sta $0cd4			sta 	procList
.2530	a5 36		lda $36				lda 	lowMemory+1
.2532	8d d5 0c	sta $0cd5			sta 	procList+1
.2535	20 a5 28	jsr $28a5			jsr 	ResetCodeAddress 			; back to the start.
.2538					_ScanLoop:
.2538	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.253a	b1 28		lda ($28),y			lda 	(codePtr),y
.253c	f0 2a		beq $2568			beq 	_ScanExit
.253e	a0 03		ldy #$03			ldy 	#3							; get first token
.2540	b1 28		lda ($28),y			lda 	(codePtr),y
.2542	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2544	d0 12		bne $2558			bne 	_ScanNext
.2546	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2548	20 70 25	jsr $2570			jsr 	_ScanWrite
.254b	a5 28		lda $28				lda 	codePtr
.254d	20 70 25	jsr $2570			jsr 	_ScanWrite
.2550	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2552	20 7b 25	jsr $257b			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2555	20 70 25	jsr $2570			jsr 	_ScanWrite					; and write that
.2558					_ScanNext:
.2558	18		clc				clc
.2559	a0 00		ldy #$00			ldy 	#0
.255b	b1 28		lda ($28),y			lda 	(codePtr),y
.255d	65 28		adc $28				adc 	codePtr
.255f	85 28		sta $28				sta 	codePtr
.2561	90 d5		bcc $2538			bcc 	_ScanLoop
.2563	e6 29		inc $29				inc 	codePtr+1
.2565	4c 38 25	jmp $2538			jmp 	_ScanLoop
.2568					_ScanExit:
.2568	a9 00		lda #$00			lda 	#0 							; write ending zero.
.256a	20 70 25	jsr $2570			jsr 	_ScanWrite
.256d	68		pla				pla
.256e	a8		tay				tay
.256f	60		rts				rts
.2570					_ScanWrite:
.2570	a0 00		ldy #$00			ldy 	#0
.2572	91 35		sta ($35),y			sta 	(lowMemory),y
.2574	e6 35		inc $35				inc 	lowMemory
.2576	d0 02		bne $257a			bne 	_SWNoCarry
.2578	e6 36		inc $36				inc 	lowMemory+1
.257a					_SWNoCarry:
.257a	60		rts				rts
.257b					CalculateProcedureHash:
.257b	a9 00		lda #$00			lda 	#0 							; clear hash.
.257d	85 2a		sta $2a				sta 	temp0
.257f					_CPHLoop:
.257f	18		clc				clc 								; add character and rotate and add carry back in
.2580	b1 28		lda ($28),y			lda 	(codePtr),y
.2582	65 2a		adc $2a				adc 	temp0
.2584	6a		ror a				ror 	a
.2585	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2587	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2589	b1 28		lda ($28),y			lda 	(codePtr),y
.258b	c8		iny				iny 								; advance incase we go round again.
.258c	c9 3a		cmp #$3a			cmp 	#$3A
.258e	90 ef		bcc $257f			bcc 	_CPHLoop
.2590	a5 2a		lda $2a				lda 	temp0
.2592	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2593					Command_Repeat:
.2593	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2595	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2597	20 b7 34	jsr $34b7			jsr 	RSClaim
.259a	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.259c	20 e3 34	jsr $34e3			jsr 	RSSavePosition
.259f	60		rts				rts
.25a0					Command_Until:
.25a0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25a2	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.25a4	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.25a6	f0 05		beq $25ad			beq 	_isok
.25a8	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.25aa	20 18 15	jsr $1518		jsr	errorHandler
.25ad					_isok:
.25ad	20 82 2d	jsr $2d82			jsr 	EvaluateRootInteger 		; at the bottom.
.25b0	20 43 34	jsr $3443			jsr 	MInt32Zero					; check if TOS zero
.25b3	d0 06		bne $25bb			bne 	_CUExit
.25b5	a9 01		lda #$01			lda 	#1
.25b7	20 f6 34	jsr $34f6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.25ba	60		rts				rts
.25bb					_CUExit:
.25bb	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.25bd	20 d9 34	jsr $34d9			jsr 	RSFree
.25c0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.25c1					ScanForward:
.25c1	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.25c3	86 2d		stx $2d				stx 	temp1+1
.25c5	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.25c7	85 2e		sta $2e				sta 	temp2
.25c9	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.25cb	c8		iny				iny
.25cc	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.25ce	d0 08		bne $25d8			bne 	_SFNoCheck 					; if so, check token against entered values.
.25d0	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.25d2	f0 24		beq $25f8			beq 	_SFExit 					; at the same strcture depth.
.25d4	c5 2d		cmp $2d				cmp 	temp1+1
.25d6	f0 20		beq $25f8			beq 	_SFExit
.25d8					_SFNoCheck:
.25d8	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.25da	90 ed		bcc $25c9			bcc 	_SFLoop
.25dc	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.25de	90 19		bcc $25f9			bcc 	_SFSpecials
.25e0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.25e2	90 e5		bcc $25c9			bcc 	_SFLoop
.25e4	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.25e6	b0 e1		bcs $25c9			bcs 	_SFLoop
.25e8	aa		tax				tax  								; token in X, and look up the adjuster.
.25e9	bd a0 2c	lda $2ca0,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.25ec	38		sec				sec 								; convert to an offset ($FF,$01)
.25ed	e9 81		sbc #$81			sbc 	#$81
.25ef	18		clc				clc 								; add to depth
.25f0	65 2e		adc $2e				adc 	temp2
.25f2	85 2e		sta $2e				sta 	temp2
.25f4	10 d3		bpl $25c9			bpl 	_SFLoop 					; +ve okay to continue
.25f6	30 07		bmi $25ff			bmi 	SFError 					; if gone -ve then we have a nesting error
.25f8	60		rts		_SFExit:rts
.25f9					_SFSpecials:
.25f9	20 04 26	jsr $2604			jsr 	ScannerSkipSpecial
.25fc	4c c9 25	jmp $25c9			jmp 	_SFLoop
.25ff					SFError:
.25ff	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2601	20 18 15	jsr $1518		jsr	errorHandler
.2604					ScannerSkipSpecial:
.2604	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2606	f0 10		beq $2618			beq 	_SFNextLine
.2608	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.260a	f0 2b		beq $2637			beq 	_SFFloatSkip
.260c	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.260e	f0 02		beq $2612			beq 	_SFSkipString
.2610	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2611	60		rts				rts 								; token.
.2612					_SFSkipString:
.2612	98		tya				tya
.2613	38		sec				sec
.2614	71 28		adc ($28),y			adc 	(codePtr),y
.2616	a8		tay				tay
.2617	60		rts				rts
.2618					_SFNextLine:
.2618	a0 00		ldy #$00			ldy 	#0 							; get offset
.261a	b1 28		lda ($28),y			lda 	(codePtr),y
.261c	18		clc				clc 								; add to code pointer.
.261d	65 28		adc $28				adc 	codePtr
.261f	85 28		sta $28				sta 	codePtr
.2621	90 02		bcc $2625			bcc		_SFNLNoCarry
.2623	e6 29		inc $29				inc 	codePtr+1
.2625					_SFNLNoCarry:
.2625	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2627	d0 0b		bne $2634			bne		_SFXNL 						; no go round again
.2629	a5 2c		lda $2c				lda 	temp1
.262b	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.262d	d0 d0		bne $25ff			bne 	SFError 					; read uses this to search for data statements
.262f	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2631	20 18 15	jsr $1518		jsr	errorHandler
.2634	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2636	60		rts				rts
.2637					_SFFloatSkip:
.2637	98		tya				tya 								; skip over an embedded float.
.2638	18		clc				clc
.2639	69 05		adc #$05			adc 	#FloatEmbeddedSize
.263b	a8		tay				tay
.263c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.263d					Command_While:
.263d	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.263f	a2 04		ldx #$04			ldx 	#4
.2641	20 b7 34	jsr $34b7			jsr 	RSClaim 					; create on stack.
.2644	88		dey				dey
.2645	a9 01		lda #$01			lda 	#1
.2647	20 e3 34	jsr $34e3			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.264a	c8		iny				iny
.264b	20 84 2d	jsr $2d84			jsr 	EvaluateInteger				; get the conditional
.264e	20 43 34	jsr $3443			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2651	f0 01		beq $2654			beq 	_CWFail
.2653	60		rts				rts
.2654					_CWFail:
.2654	a9 04		lda #$04			lda 	#4
.2656	20 d9 34	jsr $34d9			jsr 	RSFree 						; close the just opened position.
.2659	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.265b	aa		tax				tax
.265c	20 c1 25	jsr $25c1			jsr 	ScanForward
.265f	60		rts				rts
.2660					Command_Wend:
.2660	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2662	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2664	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2666	f0 05		beq $266d			beq 	_isok
.2668	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.266a	20 18 15	jsr $1518		jsr	errorHandler
.266d					_isok:
.266d	a9 01		lda #$01			lda 	#1
.266f	20 f6 34	jsr $34f6			jsr 	RSLoadPosition				; go back until true
.2672	a9 04		lda #$04			lda 	#4
.2674	20 d9 34	jsr $34d9			jsr 	RSFree 						; close the loop
.2677	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2678					CommandClear:
.2678					XCommandClear:
.2678	98		tya				tya
.2679	48		pha				pha
.267a	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.267d	85 33		sta $33				sta 	highMemory
.267f	ad cd 0a	lda $0acd			lda 	endMemory+1
.2682	85 34		sta $34				sta 	highMemory+1
.2684	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2687	85 2a		sta $2a				sta 	temp0
.2689	ad c9 0a	lda $0ac9			lda 	basePage+1
.268c	85 2b		sta $2b				sta 	temp0+1
.268e					_CCFindEnd:
.268e	a0 00		ldy #$00			ldy 	#0
.2690	b1 2a		lda ($2a),y			lda 	(temp0),y
.2692	f0 0c		beq $26a0			beq 	_CCFoundEnd 				; offset zero is end.
.2694	18		clc				clc
.2695	65 2a		adc $2a				adc 	temp0 						; move to next line
.2697	85 2a		sta $2a				sta 	temp0
.2699	90 f3		bcc $268e			bcc 	_CCFindEnd
.269b	e6 2b		inc $2b				inc 	temp0+1
.269d	4c 8e 26	jmp $268e			jmp 	_CCFindEnd
.26a0					_CCFoundEnd:
.26a0	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.26a2	85 35		sta $35				sta 	lowMemory
.26a4	a5 2b		lda $2b				lda 	temp0+1
.26a6	85 36		sta $36				sta 	lowMemory+1
.26a8	18		clc				clc 								; put temp0+1 in endProgram
.26a9	a5 2a		lda $2a				lda 	temp0
.26ab	69 01		adc #$01			adc 	#1
.26ad	8d ca 0a	sta $0aca			sta 	endProgram
.26b0	a5 2b		lda $2b				lda 	temp0+1
.26b2	69 00		adc #$00			adc 	#0
.26b4	8d cb 0a	sta $0acb			sta 	endProgram+1
.26b7	18		clc				clc 								; put a bit of space in.
.26b8	a5 35		lda $35				lda 	lowMemory
.26ba	69 04		adc #$04			adc 	#4
.26bc	85 35		sta $35				sta 	lowMemory
.26be	90 02		bcc $26c2			bcc 	_CCNoCarry
.26c0	e6 36		inc $36				inc 	lowMemory+1
.26c2					_CCNoCarry:
.26c2	20 a9 34	jsr $34a9			jsr 	RSReset 					; reset the return stack.
.26c5	a2 06		ldx #$06		ldx	#6
.26c7	20 be 43	jsr $43be		jsr	variableHandler
.26ca	20 29 25	jsr $2529			jsr 	ScanProc 					; scan for procedures
.26cd	20 ae 1e	jsr $1eae			jsr 	CommandRestore 				; do a restore
.26d0	68		pla				pla
.26d1	a8		tay				tay
.26d2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cd7					structIndent:
>0cd7							.fill 	1
.26d3					CommandList:
.26d3	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.26d5	8e d7 0c	stx $0cd7			stx 	structIndent
.26d8	20 1c 34	jsr $341c			jsr 	MInt32False
.26db	e8		inx				inx
.26dc	20 18 34	jsr $3418			jsr 	MInt32True
.26df	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.26e1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.26e3	f0 15		beq $26fa			beq 	_CLEndLine
.26e5	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.26e7	30 1b		bmi $2704			bmi 	_CLDoListing 				; do the whole lot.
.26e9	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.26eb	20 84 2d	jsr $2d84			jsr 	EvaluateInteger
.26ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.26f0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.26f2	f0 06		beq $26fa			beq 	_CLEndLine
.26f4	20 5a 33	jsr $335a			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.26f7	4c 04 27	jmp $2704			jmp 	_CLDoListing 				; own e.g. list 1100
.26fa					_CLEndLine:
.26fa	c8		iny				iny 								; skip comma
.26fb	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.26fd	30 05		bmi $2704			bmi 	_CLDoListing
.26ff	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2701	20 84 2d	jsr $2d84			jsr 	EvaluateInteger				; get end
.2704					_CLDoListing:
.2704	20 a5 28	jsr $28a5			jsr 	ResetCodeAddress 			; back to the start.
.2707					_CLCheckLoop:
.2707	a2 02		ldx #$02		ldx	#2
.2709	20 f6 14	jsr $14f6		jsr	deviceHandler
.270c	a0 00		ldy #$00			ldy 	#0							; check end.
.270e	b1 28		lda ($28),y			lda 	(codePtr),y
.2710	f0 41		beq $2753			beq 	_CLEnd
.2712	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2714	20 56 27	jsr $2756			jsr 	CLCompareLineTOS
.2717	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2719	f0 28		beq $2743			beq 	_CLNext
.271b	e8		inx				inx
.271c	20 56 27	jsr $2756			jsr 	CLCompareLineTOS 			; compare vs higher
.271f	c9 01		cmp #$01			cmp 	#1
.2721	f0 20		beq $2743			beq 	_CLNext
.2723	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2725	20 78 27	jsr $2778			jsr 	CLStructureCheck
.2728	ad d7 0c	lda $0cd7			lda 	structIndent 				; indent level.
.272b	10 02		bpl $272f			bpl 	_CLPositive
.272d	a9 00		lda #$00			lda 	#0
.272f					_CLPositive:
.272f	a2 04		ldx #$04		ldx	#4
.2731	20 ed 3f	jsr $3fed		jsr	tokeniserHandler
.2734	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2736	20 78 27	jsr $2778			jsr 	CLStructureCheck
.2739	ad d7 0c	lda $0cd7			lda 	structIndent
.273c	10 05		bpl $2743			bpl 	_CLNext
.273e	a9 00		lda #$00			lda 	#0
.2740	8d d7 0c	sta $0cd7			sta 	structIndent
.2743					_CLNext:
.2743	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2745	b1 28		lda ($28),y			lda 	(codePtr),y
.2747	18		clc				clc
.2748	65 28		adc $28				adc 	codePtr
.274a	85 28		sta $28				sta 	codePtr
.274c	90 b9		bcc $2707			bcc 	_CLCheckLoop
.274e	e6 29		inc $29				inc 	codePtr+1
.2750	4c 07 27	jmp $2707			jmp 	_CLCheckLoop
.2753					_CLEnd:
.2753	4c 05 35	jmp $3505			jmp 	WarmStart 					; warm start after list.
.2756					CLCompareLineTOS:
.2756	a0 01		ldy #$01			ldy 	#1
.2758	b1 28		lda ($28),y			lda 	(codePtr),y
.275a	55 50		eor $50,x			eor 	esInt0,x
.275c	85 2a		sta $2a				sta 	temp0
.275e	c8		iny				iny
.275f	b1 28		lda ($28),y			lda 	(codePtr),y
.2761	55 58		eor $58,x			eor 	esInt1,x
.2763	05 2a		ora $2a				ora 	temp0
.2765	f0 10		beq $2777			beq 	_CLCLTExit
.2767	88		dey				dey
.2768	b1 28		lda ($28),y			lda 	(codePtr),y
.276a	d5 50		cmp $50,x			cmp 	esInt0,x
.276c	c8		iny				iny
.276d	b1 28		lda ($28),y			lda 	(codePtr),y
.276f	f5 58		sbc $58,x			sbc 	esInt1,x
.2771	a9 ff		lda #$ff			lda 	#255
.2773	90 02		bcc $2777			bcc 	_CLCLTExit
.2775	a9 01		lda #$01			lda 	#1
.2777					_CLCLTExit:
.2777	60		rts				rts
.2778					CLStructureCheck:
.2778	85 2a		sta $2a				sta 	temp0
.277a	a0 03		ldy #$03			ldy 	#3
.277c					_CLSCLoop:
.277c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.277e	c8		iny				iny
.277f	c9 80		cmp #$80			cmp 	#$80
.2781	90 f9		bcc $277c			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2783	f0 28		beq $27ad			beq		_CLSCExit					; EOL return
.2785	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2787	90 1e		bcc $27a7			bcc 	_CLSCSpecial
.2789	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.278b	90 ef		bcc $277c			bcc 	_CLSCLoop
.278d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.278f	b0 eb		bcs $277c			bcs 	_CLSCLoop
.2791	aa		tax				tax 								; get adjustment
.2792	bd a0 2c	lda $2ca0,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2795	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2797	d0 e3		bne $277c			bne 	_CLSCLoop
.2799	38		sec				sec
.279a	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.279c	0a		asl a				asl 	a 							; double indent step
.279d	18		clc				clc
.279e	6d d7 0c	adc $0cd7			adc 	structIndent 				; add to structure indent
.27a1	8d d7 0c	sta $0cd7			sta 	structIndent
.27a4	4c 7c 27	jmp $277c			jmp 	_CLSCLoop
.27a7					_CLSCSpecial:
.27a7	20 04 26	jsr $2604			jsr 	ScannerSkipSpecial
.27aa	4c 7c 27	jmp $277c			jmp 	_CLSCLoop
.27ad					_CLSCExit:
.27ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.27ae					CommandLoad:
.27ae	20 d6 27	jsr $27d6			jsr 	CLSParameters 					; get parameters for load.
.27b1	08		php				php
.27b2	a2 0e		ldx #$0e		ldx	#14
.27b4	20 f6 14	jsr $14f6		jsr	deviceHandler
.27b7	28		plp				plp
.27b8	b0 08		bcs $27c2			bcs 	_CLExit 						; if CC then load a program, so warm start.
.27ba	20 78 26	jsr $2678			jsr 	CommandClear
.27bd	a2 04		ldx #$04		ldx	#4
.27bf	20 70 1e	jsr $1e70		jsr	interactionHandler
.27c2					_CLExit
.27c2	60		rts				rts
.27c3					CommandSave:
.27c3	20 d6 27	jsr $27d6			jsr 	CLSParameters					; get parameters for save
.27c6	90 08		bcc $27d0			bcc 	_CSNoOverrideAddress
.27c8	20 9c 34	jsr $349c			jsr 	CheckComma 						; should be a comma.
.27cb	a2 02		ldx #$02			ldx 	#2
.27cd	20 84 2d	jsr $2d84			jsr 	EvaluateInteger 				; get save end address.
.27d0					_CSNoOverrideAddress:
.27d0	a2 18		ldx #$18		ldx	#24
.27d2	20 f6 14	jsr $14f6		jsr	deviceHandler
.27d5	60		rts				rts
.27d6					CLSParameters:
.27d6	a2 00		ldx #$00			ldx 	#0 								; string
.27d8	20 79 2d	jsr $2d79			jsr 	EvaluateString
.27db	e8		inx				inx 									; erase out +1 +2
.27dc	20 1c 34	jsr $341c			jsr 	MInt32False
.27df	e8		inx				inx
.27e0	20 1c 34	jsr $341c			jsr 	MInt32False
.27e3	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.27e6	85 51		sta $51				sta 	esInt0+1
.27e8	ad c9 0a	lda $0ac9			lda 	basePage+1
.27eb	85 59		sta $59				sta 	esInt1+1
.27ed	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.27f0	85 52		sta $52				sta 	esInt0+2
.27f2	ad cb 0a	lda $0acb			lda 	endProgram+1
.27f5	85 5a		sta $5a				sta 	esInt1+2
.27f7	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.27f9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.27fb	d0 08		bne $2805			bne 	_CLSDefault
.27fd	c8		iny				iny 									; skip comma
.27fe	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2800	20 84 2d	jsr $2d84			jsr 	EvaluateInteger
.2803	38		sec				sec
.2804	60		rts				rts
.2805					_CLSDefault:
.2805	18		clc				clc
.2806	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2807					Command_New:
.2807					Command_XNew:
.2807	20 a5 28	jsr $28a5			jsr 	ResetCodeAddress 			; point to first line
.280a	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.280c	98		tya				tya
.280d	91 28		sta ($28),y			sta 	(codePtr),y
.280f	20 78 26	jsr $2678			jsr 	CommandClear 				; clear everything down.
.2812	4c ce 21	jmp $21ce			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cd8					breakCounter:
>0cd8								.fill 	1
.0cd9					breakIncrement:
>0cd9								.fill 	1
.2815					Command_Run:
.2815					XCommand_Run:
.2815	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2817	9a		txs				txs
.2818	20 9f 28	jsr $289f			jsr 	BreakOn 					; turn break on
.281b	20 78 26	jsr $2678			jsr 	CommandClear 				; clear everything.
.281e	20 a5 28	jsr $28a5			jsr 	ResetCodeAddress 			; back to the start.
.2821					Command_RunFrom:
.2821	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2823					CRNextInstruction:
.2823	64 3a		stz $3a				stz 	softMemAlloc+1
.2825	ad d8 0c	lda $0cd8			lda 	breakCounter 				; check for break.
.2828	6d d9 0c	adc $0cd9			adc 	breakIncrement
.282b	8d d8 0c	sta $0cd8			sta 	breakCounter
.282e	90 05		bcc $2835			bcc 	_CRNoChecks
.2830	a2 02		ldx #$02		ldx	#2
.2832	20 f6 14	jsr $14f6		jsr	deviceHandler
.2835					_CRNoChecks
.2835	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2837	10 1c		bpl $2855			bpl 	_CRNotToken
.2839	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.283b	b0 0c		bcs $2849			bcs 	_CRExecute
.283d	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.283f	b0 71		bcs $28b2			bcs 	Unimplemented
.2841	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2843	b0 04		bcs $2849			bcs 	_CRExecute
.2845	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2847	b0 16		bcs $285f			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2849					_CRExecute:
.2849	c8		iny				iny 								; consume it.
.284a	0a		asl a				asl 	a 							; double it, losing most significant bit.
.284b	aa		tax				tax
.284c	20 52 28	jsr $2852			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.284f	4c 23 28	jmp $2823			jmp 	CRNextInstruction
.2852					_CRRunRoutine:
.2852	7c bc 28	jmp ($28bc,x)			jmp 	(Group0Vectors,x)
.2855					_CRNotToken:
.2855	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2857	b0 59		bcs $28b2			bcs 	Unimplemented
.2859					_CRDefaultLet:
.2859	20 01 21	jsr $2101			jsr 	CommandLet 					; do the default, LET
.285c	4c 23 28	jmp $2823			jmp 	CRNextInstruction
.285f					_CRCheckIndirect:
.285f	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2861	f0 0a		beq $286d			beq 	_CRAndCommand
.2863	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2865	f0 f2		beq $2859			beq 	_CRDefaultLet
.2867	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2869	f0 ee		beq $2859			beq 	_CRDefaultLet
.286b	d0 45		bne $28b2			bne 	Unimplemented
.286d					_CRAndCommand:
.286d	c8		iny				iny 								; skip over the AND token
.286e	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2870	20 8a 28	jsr $288a			jsr 	CommandAssembler 			; do the assembler command
.2873	4c 23 28	jmp $2823			jmp 	CRNextInstruction 			; and loop round.
.2876					CommandShift1:
.2876	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2878	10 38		bpl $28b2			bpl 	Unimplemented 				; we have an error as this should not happen.
.287a	c8		iny				iny 								; advance over it.
.287b	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.287d	b0 0b		bcs $288a			bcs 	CommandAssembler
.287f	0a		asl a				asl 	a 							; double into X
.2880	aa		tax				tax
.2881	7c 80 29	jmp ($2980,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2884					CommandShift2:
.2884	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2886	20 60 18	jsr $1860		jsr	extensionHandler
.2889	60		rts				rts
.288a					CommandAssembler:
.288a	a2 02		ldx #$02		ldx	#2
.288c	20 b4 13	jsr $13b4		jsr	assemblerHandler
.288f	60		rts				rts
.2890					CommandAssemblerLabel:
.2890	a2 04		ldx #$04		ldx	#4
.2892	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2895	60		rts				rts
.2896					CommandColon:
.2896	60		rts				rts
.2897					CommandBreak:
.2897	20 82 2d	jsr $2d82			jsr 	EvaluateRootInteger
.289a	20 43 34	jsr $3443			jsr 	MInt32Zero
.289d	f0 02		beq $28a1			beq 	BreakOff
.289f					BreakOn:
.289f	a2 08		ldx #$08			ldx 	#8
.28a1					BreakOff:
.28a1	8e d9 0c	stx $0cd9			stx 	breakIncrement
.28a4	60		rts				rts
.28a5					ResetCodeAddress:
.28a5	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.28a8	85 28		sta $28				sta 	codePtr
.28aa	ad c9 0a	lda $0ac9			lda 	basePage+1
.28ad	85 29		sta $29				sta 	codePtr+1
.28af	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.28b1	60		rts				rts
.28b2					Unimplemented:
.28b2	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.28b4	20 18 15	jsr $1518		jsr	errorHandler
.28b7					TKErr01:
.28b7					TKErr02:
.28b7					TKErr03:
.28b7					TKErr04:
.28b7					TKErr05:
.28b7					TKErr06:
.28b7					TKErr07:
.28b7					TKErr08:
.28b7					TKErr09:
.28b7					TKErr10:
.28b7					TKErr11:
.28b7					TKErr12:
.28b7					TKErr13:
.28b7					TKErr14:
.28b7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.28b9	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.28bc					Group0Vectors:
>28bc	d4 21					.word	AdvanceNextLine          ; $80 [[eol]]
>28be	76 28					.word	CommandShift1            ; $81 [[sh1]]
>28c0	84 28					.word	CommandShift2            ; $82 [[sh2]]
>28c2	b7 28					.word	TKErr09                  ; $83 [[sh3]]
>28c4	b7 28					.word	TKErr10                  ; $84 [[fpc]]
>28c6	b7 28					.word	TKErr08                  ; $85 [[str]]
>28c8	69 2a					.word	AndHandler               ; $86 and
>28ca	56 2a					.word	OrHandler                ; $87 or
>28cc	43 2a					.word	XorHandler               ; $88 xor
>28ce	8b 2b					.word	CompareGreaterEq         ; $89 >=
>28d0	95 2b					.word	CompareLessEq            ; $8a <=
>28d2	77 2b					.word	CompareGreater           ; $8b >
>28d4	6d 2b					.word	CompareLess              ; $8c <
>28d6	63 2b					.word	CompareEquals            ; $8d =
>28d8	81 2b					.word	CompareNotEquals         ; $8e <>
>28da	d4 29					.word	AddHandler               ; $8f +
>28dc	f7 29					.word	SubHandler               ; $90 -
>28de	8f 2a					.word	ShrHandler               ; $91 >>
>28e0	7c 2a					.word	ShlHandler               ; $92 <<
>28e2	0a 2a					.word	MulHandler               ; $93 *
>28e4	1d 2a					.word	DivHandler               ; $94 /
>28e6	30 2a					.word	ModHandler               ; $95 mod
>28e8	c8 2a					.word	PowerHandler             ; $96 ^
>28ea	a2 2a					.word	WordRefHandler           ; $97 !
>28ec	b5 2a					.word	ByteRefHandler           ; $98 ?
>28ee	93 25					.word	Command_Repeat           ; $99 repeat
>28f0	3d 26					.word	Command_While            ; $9a while
>28f2	e8 21					.word	Command_FOR              ; $9b for
>28f4	f7 22					.word	CommandIf                ; $9c if
>28f6	b7 28					.word	TKErr04                  ; $9d defproc
>28f8	a0 25					.word	Command_Until            ; $9e until
>28fa	60 26					.word	Command_Wend             ; $9f wend
>28fc	49 22					.word	Command_NEXT             ; $a0 next
>28fe	b7 28					.word	TKErr06                  ; $a1 then
>2900	32 23					.word	Command_ENDIF            ; $a2 endif
>2902	a2 24					.word	ReturnProc               ; $a3 endproc
>2904	ef 2c					.word	UnaryParenthesis         ; $a4 (
>2906	d1 2e					.word	UnaryLen                 ; $a5 len(
>2908	15 2f					.word	UnarySgn                 ; $a6 sgn(
>290a	fe 2e					.word	UnaryAbs                 ; $a7 abs(
>290c	6e 2f					.word	Unary_Random             ; $a8 random(
>290e	b8 2f					.word	Unary_Page               ; $a9 page
>2910	18 34					.word	MInt32True               ; $aa true
>2912	1c 34					.word	MInt32False              ; $ab false
>2914	83 2f					.word	Unary_Min                ; $ac min(
>2916	87 2f					.word	Unary_Max                ; $ad max(
>2918	90 30					.word	UnarySys                 ; $ae sys(
>291a	39 30					.word	UnaryTimer               ; $af timer(
>291c	4e 2e					.word	EventFunction            ; $b0 event(
>291e	62 30					.word	UnaryGet                 ; $b1 get(
>2920	52 30					.word	UnaryInkey               ; $b2 inkey(
>2922	09 30					.word	UnaryAlloc               ; $b3 alloc(
>2924	c9 30					.word	ExecChr                  ; $b4 chr$(
>2926	f9 30					.word	ExecLeft                 ; $b5 left$(
>2928	16 31					.word	ExecMid                  ; $b6 mid$(
>292a	3e 31					.word	ExecRight                ; $b7 right$(
>292c	d0 2d					.word	Event_Str                ; $b8 str$(
>292e	ff 2d					.word	UnaryVal                 ; $b9 val(
>2930	2c 2f					.word	UnaryPeek                ; $ba peek(
>2932	32 2f					.word	UnaryDeek                ; $bb deek(
>2934	38 2f					.word	UnaryLeek                ; $bc leek(
>2936	ef 2e					.word	UnaryAsc                 ; $bd asc(
>2938	e3 2f					.word	UnaryIntToFloat          ; $be int(
>293a	f6 2f					.word	UnaryFloatToInt          ; $bf float(
>293c	02 2e					.word	UnaryIsVal               ; $c0 isval(
>293e	e0 30					.word	ExecUpper                ; $c1 upper$(
>2940	dd 30					.word	ExecLower                ; $c2 lower$(
>2942	c6 2f					.word	UnaryReference           ; $c3 @
>2944	dc 2f					.word	UnaryComplement          ; $c4 ~
>2946	d9 2f					.word	UnaryHexMarker           ; $c5 &
>2948	7b 30					.word	UnaryGetString           ; $c6 get$(
>294a	81 30					.word	UnaryInkeyString         ; $c7 inkey$(
>294c	b8 30					.word	UnaryMem                 ; $c8 mem
>294e	b7 28					.word	TKErr01                  ; $c9 )
>2950	96 28					.word	CommandColon             ; $ca :
>2952	b7 28					.word	TKErr02                  ; $cb ,
>2954	b7 28					.word	TKErr03                  ; $cc ;
>2956	bc 21					.word	Command_Rem2             ; $cd '
>2958	b7 28					.word	TKErr07                  ; $ce to
>295a	b7 28					.word	TKErr05                  ; $cf step
>295c	35 24					.word	CallProc                 ; $d0 proc
>295e	33 23					.word	CommandLocal             ; $d1 local
>2960	f3 20					.word	Command_Dim              ; $d2 dim
>2962	bc 21					.word	Command_Rem              ; $d3 rem
>2964	01 21					.word	CommandLet               ; $d4 let
>2966	3d 1f					.word	Command_Input            ; $d5 input
>2968	2c 23					.word	Command_ELSE             ; $d6 else
>296a	c4 20					.word	Command_VDU              ; $d7 vdu
>296c	f3 1f					.word	Command_Print            ; $d8 print
>296e	a5 1e					.word	CommandData              ; $d9 data
>2970	b7 28					.word	TKErr13                  ; $da image
>2972	b7 28					.word	TKErr12                  ; $db at
>2974	b7 28					.word	TKErr14                  ; $dc flip
>2976	e5 20					.word	Command_Assert           ; $dd assert
>2978	7f 21					.word	Command_Poke             ; $de poke
>297a	83 21					.word	Command_Doke             ; $df doke
>297c	87 21					.word	Command_Loke             ; $e0 loke
>297e	94 20					.word	Command_Ink              ; $e1 ink
>2980	9f 20					.word	Command_Paper            ; $e2 paper
>2982	8e 20					.word	Command_CLS              ; $e3 cls
>2984	aa 20					.word	Command_Locate           ; $e4 locate
>2986	90 28					.word	CommandAssemblerLabel    ; $e5 .
>2988	b7 28					.word	TKErr11                  ; $e6 #
>298a	78 26					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.298c					Group1Vectors:
>298c	ae 27					.word	CommandLoad              ; $86 load
>298e	c3 27					.word	CommandSave              ; $87 save
>2990	d3 26					.word	CommandList              ; $88 list
>2992	07 28					.word	Command_New              ; $89 new
>2994	97 28					.word	CommandBreak             ; $8a break
>2996	15 28					.word	Command_Run              ; $8b run
>2998	7a 1e					.word	CommandRead              ; $8c read
>299a	ae 1e					.word	CommandRestore           ; $8d restore
>299c	ce 21					.word	CommandEnd               ; $8e end
>299e	c9 21					.word	CommandStop              ; $8f stop
>29a0	d1 21					.word	CommandXemu              ; $90 xemu
>29a2	0b 1f					.word	CommandGOTO              ; $91 goto
>29a4	e0 1e					.word	CommandGOSUB             ; $92 gosub
>29a6	f3 1e					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.29a8					BinaryProcess:
.29a8	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.29aa	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.29ac	0a		asl a				asl 	a
.29ad	30 0e		bmi $29bd			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.29af	18		clc				clc 								; return CC for integer
.29b0	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.29b2	f0 08		beq $29bc			beq 	_BPExit 					; if both integer then return with CC.
.29b4	20 c2 29	jsr $29c2			jsr 	BPMakeBothFloat 			; make both float
.29b7	a9 01		lda #$01			lda 	#$01 						; set result type to float
.29b9	95 48		sta $48,x			sta 	esType,x
.29bb	38		sec				sec 								; and return with carry set.
.29bc					_BPExit:
.29bc	60		rts				rts
.29bd					_BPStringType:
.29bd	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.29bf	20 18 15	jsr $1518		jsr	errorHandler
.29c2					BPMakeBothFloat:
.29c2	e8		inx				inx
.29c3	20 c7 29	jsr $29c7			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.29c6	ca		dex				dex
.29c7					BPMakeFloat:
.29c7	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.29c9	4a		lsr a				lsr 	a
.29ca	b0 07		bcs $29d3			bcs 	_BPIsFloat 					; already a float if set.
.29cc	8a		txa				txa
.29cd	a2 1c		ldx #$1c		ldx	#28
.29cf	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.29d2	aa		tax				tax
.29d3					_BPIsFloat:
.29d3	60		rts				rts
.29d4					AddHandler:
.29d4	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo 				; dereference top two on stack.
.29d7	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.29d9	35 49		and $49,x			and 	esType+1,x
.29db	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.29dd	d0 10		bne $29ef			bne 	_AHStringConcat				; concatenate strings.
.29df	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.29e2	b0 03		bcs $29e7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29e4	4c 00 33	jmp $3300			jmp 	MInt32Add 							; else do it as integer.
.29e7					_IsFPOperation:
.29e7	8a		txa				txa 								; call the relevant fp routine
.29e8	a2 04		ldx #$04		ldx	#4
.29ea	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.29ed	aa		tax				tax
.29ee	60		rts				rts
.29ef					_AHStringConcat:
.29ef	8a		txa				txa 								; handled by the string module.
.29f0	a2 06		ldx #$06		ldx	#6
.29f2	20 c7 37	jsr $37c7		jsr	stringHandler
.29f5	aa		tax				tax
.29f6	60		rts				rts
.29f7					SubHandler:
.29f7	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.29fa	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.29fd	b0 03		bcs $2a02			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29ff	4c 1a 33	jmp $331a			jmp 	MInt32Sub 							; else do it as integer.
.2a02					_IsFPOperation:
.2a02	8a		txa				txa 								; call the relevant fp routine
.2a03	a2 12		ldx #$12		ldx	#18
.2a05	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2a08	aa		tax				tax
.2a09	60		rts				rts
.2a0a					MulHandler:
.2a0a	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2a0d	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2a10	b0 03		bcs $2a15			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a12	4c 34 33	jmp $3334			jmp 	MInt32Multiply 							; else do it as integer.
.2a15					_IsFPOperation:
.2a15	8a		txa				txa 								; call the relevant fp routine
.2a16	a2 0c		ldx #$0c		ldx	#12
.2a18	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2a1b	aa		tax				tax
.2a1c	60		rts				rts
.2a1d					DivHandler:
.2a1d	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2a20	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2a23	b0 03		bcs $2a28			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a25	4c f1 31	jmp $31f1			jmp 	MInt32SDivide 							; else do it as integer.
.2a28					_IsFPOperation:
.2a28	8a		txa				txa 								; call the relevant fp routine
.2a29	a2 08		ldx #$08		ldx	#8
.2a2b	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2a2e	aa		tax				tax
.2a2f	60		rts				rts
.2a30					ModHandler:
.2a30	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2a33	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2a36	b0 03		bcs $2a3b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a38	4c 6f 32	jmp $326f			jmp 	MInt32Modulus 							; else do it as integer.
.2a3b					_IsFPOperation:
.2a3b	8a		txa				txa 								; call the relevant fp routine
.2a3c	a2 0a		ldx #$0a		ldx	#10
.2a3e	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2a41	aa		tax				tax
.2a42	60		rts				rts
.2a43					XorHandler:
.2a43	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2a46	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2a49	b0 03		bcs $2a4e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a4b	4c a3 31	jmp $31a3			jmp 	MInt32Xor 							; else do it as integer.
.2a4e					_IsFPOperation:
.2a4e	8a		txa				txa 								; call the relevant fp routine
.2a4f	a2 0a		ldx #$0a		ldx	#10
.2a51	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2a54	aa		tax				tax
.2a55	60		rts				rts
.2a56					OrHandler:
.2a56	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2a59	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2a5c	b0 03		bcs $2a61			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a5e	4c 8a 31	jmp $318a			jmp 	MInt32Or 							; else do it as integer.
.2a61					_IsFPOperation:
.2a61	8a		txa				txa 								; call the relevant fp routine
.2a62	a2 0a		ldx #$0a		ldx	#10
.2a64	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2a67	aa		tax				tax
.2a68	60		rts				rts
.2a69					AndHandler:
.2a69	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2a6c	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2a6f	b0 03		bcs $2a74			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a71	4c 71 31	jmp $3171			jmp 	MInt32And 							; else do it as integer.
.2a74					_IsFPOperation:
.2a74	8a		txa				txa 								; call the relevant fp routine
.2a75	a2 0a		ldx #$0a		ldx	#10
.2a77	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2a7a	aa		tax				tax
.2a7b	60		rts				rts
.2a7c					ShlHandler:
.2a7c	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2a7f	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2a82	b0 03		bcs $2a87			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a84	4c fd 2a	jmp $2afd			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2a87					_IsFPOperation:
.2a87	8a		txa				txa 								; call the relevant fp routine
.2a88	a2 0a		ldx #$0a		ldx	#10
.2a8a	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2a8d	aa		tax				tax
.2a8e	60		rts				rts
.2a8f					ShrHandler:
.2a8f	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2a92	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2a95	b0 03		bcs $2a9a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a97	4c 00 2b	jmp $2b00			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2a9a					_IsFPOperation:
.2a9a	8a		txa				txa 								; call the relevant fp routine
.2a9b	a2 0a		ldx #$0a		ldx	#10
.2a9d	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2aa0	aa		tax				tax
.2aa1	60		rts				rts
.2aa2					WordRefHandler:
.2aa2	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2aa5	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2aa8	b0 03		bcs $2aad			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2aaa	4c ef 2a	jmp $2aef			jmp 	MInt32WordIndirect 							; else do it as integer.
.2aad					_IsFPOperation:
.2aad	8a		txa				txa 								; call the relevant fp routine
.2aae	a2 0a		ldx #$0a		ldx	#10
.2ab0	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2ab3	aa		tax				tax
.2ab4	60		rts				rts
.2ab5					ByteRefHandler:
.2ab5	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2ab8	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2abb	b0 03		bcs $2ac0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2abd	4c f3 2a	jmp $2af3			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2ac0					_IsFPOperation:
.2ac0	8a		txa				txa 								; call the relevant fp routine
.2ac1	a2 0a		ldx #$0a		ldx	#10
.2ac3	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2ac6	aa		tax				tax
.2ac7	60		rts				rts
.2ac8					PowerHandler:
.2ac8	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo
.2acb	20 a8 29	jsr $29a8			jsr 	BinaryProcess 				; check to see if either is float
.2ace	b0 03		bcs $2ad3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ad0	4c db 2a	jmp $2adb			jmp 	PowerInteger 							; else do it as integer.
.2ad3					_IsFPOperation:
.2ad3	8a		txa				txa 								; call the relevant fp routine
.2ad4	a2 18		ldx #$18		ldx	#24
.2ad6	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2ad9	aa		tax				tax
.2ada	60		rts				rts
.2adb					PowerInteger:
.2adb	20 c2 29	jsr $29c2			jsr 	BPMakeBothFloat				; make them float.
.2ade	8a		txa				txa
.2adf	a2 18		ldx #$18		ldx	#24
.2ae1	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2ae4	a2 14		ldx #$14		ldx	#20
.2ae6	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2ae9	aa		tax				tax
.2aea	a9 00		lda #$00			lda 	#0 							; make type integer
.2aec	95 48		sta $48,x			sta 	esType,x
.2aee	60		rts				rts
.2aef					Mint32WordIndirect:
.2aef	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2af1	d0 02		bne $2af5			bne 	Min32Indirect
.2af3					Mint32ByteIndirect:
.2af3	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2af5					Min32Indirect:
.2af5	48		pha				pha 								; save the indirection
.2af6	20 00 33	jsr $3300			jsr 	MInt32Add 					; add a!b a?b
.2af9	68		pla				pla 								; and set the type to reference.
.2afa	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2afc	60		rts				rts
.2afd					Mint32ShiftLeftX:
.2afd	18		clc				clc 								; CC shift left
.2afe	90 01		bcc $2b01			bcc 	Mint32Shift
.2b00					Mint32ShiftRightX:
.2b00	38		sec				sec 								; CS shift right
.2b01					Mint32Shift:
.2b01	08		php				php 								; save carry flag on stack.
.2b02	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2b04	15 61		ora $61,x			ora 	esInt2+1,x
.2b06	15 69		ora $69,x			ora 	esInt3+1,x
.2b08	d0 1e		bne $2b28			bne 	_MShiftZero
.2b0a	b5 51		lda $51,x			lda 	esInt0+1,x
.2b0c	c9 20		cmp #$20			cmp 	#32
.2b0e	b0 18		bcs $2b28			bcs 	_MShiftZero
.2b10					_MShiftLoop:
.2b10	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2b12	f0 12		beq $2b26			beq 	_MShiftExit
.2b14	d6 51		dec $51,x			dec 	esInt0+1,x
.2b16	28		plp				plp 								; restore and save carry
.2b17	08		php				php
.2b18	90 06		bcc $2b20			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2b1a	20 3a 34	jsr $343a			jsr 	Mint32ShiftRight
.2b1d	4c 10 2b	jmp $2b10			jmp 	_MShiftLoop
.2b20					_MShiftLeft:
.2b20	20 31 34	jsr $3431			jsr 	Mint32ShiftLeft
.2b23	4c 10 2b	jmp $2b10			jmp 	_MShiftLoop
.2b26					_MShiftExit:
.2b26	28		plp				plp	 								; throw saved carry and exit
.2b27	60		rts				rts
.2b28					_MShiftZero:
.2b28	4c 1c 34	jmp $341c			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2b2b					PerformComparison:
.2b2b	20 a5 2b	jsr $2ba5			jsr 	DereferenceTwo 				; make both values.
.2b2e	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2b30	35 49		and $49,x			and 	esType+1,x
.2b32	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2b33	30 1d		bmi $2b52			bmi 	_PCIsString
.2b35	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2b37	15 49		ora $49,x			ora 	esType+1,x
.2b39	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2b3a	30 22		bmi $2b5e			bmi 	_PCError
.2b3c	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2b3e	f0 0f		beq $2b4f			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2b40	20 c2 29	jsr $29c2			jsr 	BPMakeBothFloat 			; make both float
.2b43	8a		txa				txa
.2b44	a2 06		ldx #$06		ldx	#6
.2b46	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2b49	86 32		stx $32				stx 	tempShort 					; save result
.2b4b	aa		tax				tax
.2b4c	a5 32		lda $32				lda 	tempShort
.2b4e	60		rts				rts
.2b4f					_PCIsInteger:
.2b4f	4c bc 31	jmp $31bc			jmp 	MInt32Compare
.2b52					_PCIsString:
.2b52	8a		txa				txa 								; A has SP
.2b53	a2 0a		ldx #$0a		ldx	#10
.2b55	20 c7 37	jsr $37c7		jsr	stringHandler
.2b58	86 32		stx $32				stx 	tempShort 					; save result
.2b5a	aa		tax				tax 								; put SP back in X and get result.
.2b5b	a5 32		lda $32				lda 	tempShort
.2b5d	60		rts				rts
.2b5e					_PCError:
.2b5e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b60	20 18 15	jsr $1518		jsr	errorHandler
.2b63					CompareEquals:
.2b63	20 2b 2b	jsr $2b2b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b66	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2b68	f0 35		beq $2b9f			beq  	CompareTrue
.2b6a	4c a2 2b	jmp $2ba2			jmp 	CompareFalse
.2b6d					CompareLess:
.2b6d	20 2b 2b	jsr $2b2b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b70	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2b72	f0 2b		beq $2b9f			beq  	CompareTrue
.2b74	4c a2 2b	jmp $2ba2			jmp 	CompareFalse
.2b77					CompareGreater:
.2b77	20 2b 2b	jsr $2b2b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b7a	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2b7c	f0 21		beq $2b9f			beq  	CompareTrue
.2b7e	4c a2 2b	jmp $2ba2			jmp 	CompareFalse
.2b81					CompareNotEquals:
.2b81	20 2b 2b	jsr $2b2b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b84	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2b86	d0 17		bne $2b9f			bne  	CompareTrue
.2b88	4c a2 2b	jmp $2ba2			jmp 	CompareFalse
.2b8b					CompareGreaterEq:
.2b8b	20 2b 2b	jsr $2b2b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b8e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2b90	d0 0d		bne $2b9f			bne  	CompareTrue
.2b92	4c a2 2b	jmp $2ba2			jmp 	CompareFalse
.2b95					CompareLessEq:
.2b95	20 2b 2b	jsr $2b2b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b98	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2b9a	d0 03		bne $2b9f			bne  	CompareTrue
.2b9c	4c a2 2b	jmp $2ba2			jmp 	CompareFalse
.2b9f					CompareTrue:
.2b9f	4c 18 34	jmp $3418			jmp 	MInt32True
.2ba2					CompareFalse:
.2ba2	4c 1c 34	jmp $341c			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2ba5					DereferenceTwo:
.2ba5	e8		inx				inx
.2ba6	20 aa 2b	jsr $2baa			jsr 	DereferenceOne
.2ba9	ca		dex				dex
.2baa					DereferenceOne:
.2baa	b5 48		lda $48,x			lda 	esType,x
.2bac	10 3d		bpl $2beb			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2bae	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2baf	b0 3b		bcs $2bec			bcs 	_DRFloatDeReference
.2bb1	98		tya				tya
.2bb2	48		pha				pha
.2bb3	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2bb5	85 2a		sta $2a				sta 	temp0
.2bb7	b5 58		lda $58,x			lda 	esInt1,x
.2bb9	85 2b		sta $2b				sta 	temp0+1
.2bbb	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2bbd	95 58		sta $58,x			sta 	esInt1,x
.2bbf	95 60		sta $60,x			sta 	esInt2,x
.2bc1	95 68		sta $68,x			sta 	esInt3,x
.2bc3	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2bc5	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2bc7	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2bc8	30 0d		bmi $2bd7			bmi 	_DeRefString 				; string, 2 bytes only
.2bca	d0 11		bne $2bdd			bne 	_DeRefByte 					; byte 1 byte only
.2bcc					_DeRefLong:
.2bcc	a0 03		ldy #$03			ldy 	#3
.2bce	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bd0	95 68		sta $68,x			sta 	esInt3,x
.2bd2	88		dey				dey
.2bd3	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bd5	95 60		sta $60,x			sta 	esInt2,x
.2bd7					_DeRefString:
.2bd7	a0 01		ldy #$01			ldy 	#1
.2bd9	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bdb	95 58		sta $58,x			sta 	esInt1,x
.2bdd					_DeRefByte:
.2bdd	a0 00		ldy #$00			ldy 	#0
.2bdf	b1 2a		lda ($2a),y			lda 	(temp0),y
.2be1	95 50		sta $50,x			sta 	esInt0,x
.2be3	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2be5	29 40		and #$40			and 	#$40
.2be7	95 48		sta $48,x			sta 	esType,x
.2be9	68		pla				pla
.2bea	a8		tay				tay
.2beb					_DRNotReference
.2beb	60		rts				rts
.2bec					_DRFloatDereference:
.2bec	20 76 21	jsr $2176			jsr 	TOSToTemp0 					; address to deref in temp0
.2bef	8a		txa				txa
.2bf0	a2 1e		ldx #$1e		ldx	#30
.2bf2	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2bf5	aa		tax				tax
.2bf6	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2bf8	95 48		sta $48,x			sta 	esType,x
.2bfa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2bfb					EvaluateLevel:
.2bfb	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2bfd	b0 1e		bcs $2c1d			bcs 	_ELStack
.2bff	48		pha				pha 								; save precedence level.
.2c00	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2c02	95 50		sta $50,x			sta 	esInt0,x
.2c04	95 58		sta $58,x			sta 	esInt1,x
.2c06	95 60		sta $60,x			sta 	esInt2,x
.2c08	95 68		sta $68,x			sta 	esInt3,x
.2c0a	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2c0c	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2c0e	30 26		bmi $2c36			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2c10	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2c11	30 0f		bmi $2c22			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2c13	8a		txa				txa 								; stack level in X
.2c14	a2 02		ldx #$02		ldx	#2
.2c16	20 be 43	jsr $43be		jsr	variableHandler
.2c19	aa		tax				tax
.2c1a	4c 5f 2c	jmp $2c5f			jmp		_ELHasTerm
.2c1d					_ELStack:
.2c1d	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2c1f	20 18 15	jsr $1518		jsr	errorHandler
.2c22					_ELIsConstant:
.2c22	4a		lsr a				lsr 	a 							; get the value back
.2c23	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2c25	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2c27					_ELCheckNext:
.2c27	c8		iny				iny 								; look at next
.2c28	b1 28		lda ($28),y			lda 	(codePtr),y
.2c2a	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2c2c	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2c2e	b0 2f		bcs $2c5f			bcs 	_ELHasTerm 					; done getting the constant.
.2c30	20 f8 2c	jsr $2cf8			jsr 	ELShiftByteIn 				; shift byte into position.
.2c33	4c 27 2c	jmp $2c27			jmp 	_ELCheckNext
.2c36					_ELIsToken:
.2c36	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2c38	f0 0f		beq $2c49			beq 	_ELIsString
.2c3a	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2c3c	d0 5f		bne $2c9d			bne 	_ELCheckUnary
.2c3e	8a		txa				txa 								; put X into A
.2c3f	c8		iny				iny 								; skip over the float marker
.2c40	a2 1a		ldx #$1a		ldx	#26
.2c42	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2c45	aa		tax				tax 								; restore X
.2c46	4c 5f 2c	jmp $2c5f			jmp 	_ELHasTerm
.2c49					_ELIsString:
.2c49	98		tya				tya 								; address of string is codePtr+y+1
.2c4a	38		sec				sec
.2c4b	65 28		adc $28				adc 	codePtr
.2c4d	95 50		sta $50,x			sta 	esInt0,x
.2c4f	a5 29		lda $29				lda 	codePtr+1
.2c51	69 00		adc #$00			adc 	#0
.2c53	95 58		sta $58,x			sta 	esInt1,x
.2c55	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2c57	95 48		sta $48,x			sta 	esType,x
.2c59	c8		iny				iny 								; skip over string.
.2c5a	98		tya				tya
.2c5b	38		sec				sec									; +1 for the length itself.
.2c5c	71 28		adc ($28),y			adc 	(codePtr),y
.2c5e	a8		tay				tay 								; and fall through to term loop code.
.2c5f					_ELHasTerm:
.2c5f	b1 28		lda ($28),y			lda 	(codePtr),y
.2c61	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2c63	90 04		bcc $2c69			bcc 	_ELPopExit
.2c65	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2c67	90 02		bcc $2c6b			bcc 	_ELHasBinaryTerm
.2c69					_ELPopExit:
.2c69	68		pla				pla
.2c6a					_ELExit:
.2c6a	60		rts				rts
.2c6b					_ELHasBinaryTerm:
.2c6b	84 32		sty $32				sty 	tempShort 					; save position
.2c6d	a8		tay				tay 								; use token as an index and get the precedence.
.2c6e	b9 a0 2c	lda $2ca0,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2c71	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2c73	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2c75	68		pla				pla 								; restore current level.
.2c76	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2c78	b0 f0		bcs $2c6a			bcs 	_ELExit
.2c7a	48		pha				pha 								; save current level back on the stack.
.2c7b	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2c7d	48		pha				pha
.2c7e	c8		iny				iny
.2c7f	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2c80	a5 32		lda $32				lda 	tempShort
.2c82	20 fb 2b	jsr $2bfb			jsr 	EvaluateLevel
.2c85	ca		dex				dex
.2c86	68		pla				pla 								; get the operator back out.
.2c87					_ELExecuteA:
.2c87	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2c89	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2c8a	aa		tax				tax
.2c8b	bd bc 28	lda $28bc,x			lda 	Group0Vectors,x
.2c8e	85 2a		sta $2a				sta 	temp0
.2c90	bd bd 28	lda $28bd,x			lda 	Group0Vectors+1,x
.2c93	85 2b		sta $2b				sta 	temp0+1
.2c95	a6 32		ldx $32				ldx 	tempShort
.2c97	20 e4 2c	jsr $2ce4			jsr 	_ELCallTemp0
.2c9a	4c 5f 2c	jmp $2c5f			jmp 	_ELHasTerm 					; and loop back round.
.2c9d					_ELCheckUnary:
.2c9d	c8		iny				iny 								; skip over token.
.2c9e	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2ca0	f0 19		beq $2cbb			beq 	_ELMinus
.2ca2	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2ca4	f0 2c		beq $2cd2			beq 	_ELIndirect
.2ca6	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2ca8	f0 28		beq $2cd2			beq 	_ELIndirect
.2caa	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2cac	f0 39		beq $2ce7			beq 	_ELExtension
.2cae	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2cb0	90 04		bcc $2cb6			bcc 	_ELUSyntax
.2cb2	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2cb4	90 d1		bcc $2c87			bcc 	_ELExecuteA 				; if so do that token.
.2cb6					_ELUSyntax:
.2cb6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2cb8	20 18 15	jsr $1518		jsr	errorHandler
.2cbb					_ELMinus:
.2cbb	20 4d 2d	jsr $2d4d			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2cbe	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2cc0	f0 0a		beq $2ccc			beq 	_ELMinusInteger
.2cc2	8a		txa				txa
.2cc3	a2 0e		ldx #$0e		ldx	#14
.2cc5	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2cc8	aa		tax				tax
.2cc9	4c 5f 2c	jmp $2c5f			jmp 	_ELHasTerm
.2ccc					_ELMinusInteger:
.2ccc	20 d6 33	jsr $33d6			jsr 	MInt32Negate 				; do int negate
.2ccf	4c 5f 2c	jmp $2c5f			jmp 	_ELHasTerm
.2cd2					_ELIndirect:
.2cd2	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2cd3	20 56 2d	jsr $2d56			jsr 	EvaluateIntegerTerm 		; integer address
.2cd6	68		pla				pla
.2cd7	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2cd9	f0 02		beq $2cdd			beq 	_ELHaveModifier
.2cdb	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2cdd					_ELHaveModifier:
.2cdd	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2cdf	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2ce1	4c 5f 2c	jmp $2c5f			jmp 	_ELHasTerm
.2ce4					_ELCallTemp0:
.2ce4	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2ce7					_ELExtension:
.2ce7	8a		txa				txa 								; stack pos in A
.2ce8	20 60 18	jsr $1860		jsr	extensionHandler
.2ceb	aa		tax				tax 								; restore stack
.2cec	4c 5f 2c	jmp $2c5f			jmp 	_ELHasTerm
.2cef					UnaryParenthesis:
.2cef	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2cf1	20 fb 2b	jsr $2bfb			jsr 	EvaluateLevel
.2cf4	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; check for )
.2cf7	60		rts				rts
.2cf8					ELShiftByteIn:
.2cf8	48		pha				pha 								; save bits to shift in.
.2cf9	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2cfb	48		pha				pha
.2cfc	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2cfe	95 68		sta $68,x			sta 	esInt3,x
.2d00	b5 58		lda $58,x			lda 	esInt1,x
.2d02	95 60		sta $60,x			sta 	esInt2,x
.2d04	b5 50		lda $50,x			lda 	esInt0,x
.2d06	95 58		sta $58,x			sta 	esInt1,x
.2d08	a9 00		lda #$00			lda 	#0
.2d0a	95 50		sta $50,x			sta 	esInt0,x
.2d0c	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2d0d	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2d0f	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2d11					_ELShiftLoop:
.2d11	4a		lsr a				lsr 	a
.2d12	76 68		ror $68,x			ror 	esInt3,x
.2d14	76 60		ror $60,x			ror 	esInt2,x
.2d16	76 58		ror $58,x			ror 	esInt1,x
.2d18	76 50		ror $50,x			ror 	esInt0,x
.2d1a	c9 01		cmp #$01			cmp 	#1
.2d1c	d0 f3		bne $2d11			bne 	_ELShiftLoop
.2d1e	68		pla				pla 								; get original 6 bit value and OR in.
.2d1f	29 3f		and #$3f			and 	#$3F
.2d21	15 50		ora $50,x			ora 	esInt0,x
.2d23	95 50		sta $50,x			sta 	esInt0,x
.2d25	60		rts				rts
.2d26					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2d26	01					.byte	$01			; $86 and
>2d27	01					.byte	$01			; $87 or
>2d28	01					.byte	$01			; $88 xor
>2d29	02					.byte	$02			; $89 >=
>2d2a	02					.byte	$02			; $8a <=
>2d2b	02					.byte	$02			; $8b >
>2d2c	02					.byte	$02			; $8c <
>2d2d	02					.byte	$02			; $8d =
>2d2e	02					.byte	$02			; $8e <>
>2d2f	03					.byte	$03			; $8f +
>2d30	03					.byte	$03			; $90 -
>2d31	04					.byte	$04			; $91 >>
>2d32	04					.byte	$04			; $92 <<
>2d33	04					.byte	$04			; $93 *
>2d34	04					.byte	$04			; $94 /
>2d35	04					.byte	$04			; $95 mod
>2d36	05					.byte	$05			; $96 ^
>2d37	06					.byte	$06			; $97 !
>2d38	06					.byte	$06			; $98 ?
>2d39	82					.byte	$82			; $99 repeat
>2d3a	82					.byte	$82			; $9a while
>2d3b	82					.byte	$82			; $9b for
>2d3c	82					.byte	$82			; $9c if
>2d3d	82					.byte	$82			; $9d defproc
>2d3e	80					.byte	$80			; $9e until
>2d3f	80					.byte	$80			; $9f wend
>2d40	80					.byte	$80			; $a0 next
>2d41	80					.byte	$80			; $a1 then
>2d42	80					.byte	$80			; $a2 endif
>2d43	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2d44					EvaluateTerm:
.2d44	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2d46	20 fb 2b	jsr $2bfb			jsr 	EvaluateLevel
.2d49	20 aa 2b	jsr $2baa			jsr 	DereferenceOne
.2d4c	60		rts				rts
.2d4d					EvaluateNumericTerm:
.2d4d	20 44 2d	jsr $2d44			jsr 	EvaluateTerm
.2d50	b5 48		lda $48,x			lda 	esType,x
.2d52	0a		asl a				asl 	a 							; see if it's a string.
.2d53	30 09		bmi $2d5e			bmi 	ENTType
.2d55	60		rts				rts
.2d56					EvaluateIntegerTerm:
.2d56	20 44 2d	jsr $2d44			jsr 	EvaluateTerm
.2d59	b5 48		lda $48,x			lda 	esType,x
.2d5b	d0 01		bne $2d5e			bne 	ENTType
.2d5d	60		rts				rts
.2d5e					ENTType:
.2d5e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d60	20 18 15	jsr $1518		jsr	errorHandler
.2d63					EvaluateRoot:
.2d63	a2 00		ldx #$00			ldx 	#0
.2d65					Evaluate:
.2d65	a9 00		lda #$00			lda 	#0
.2d67	20 fb 2b	jsr $2bfb			jsr 	EvaluateLevel
.2d6a	20 aa 2b	jsr $2baa			jsr 	DereferenceOne
.2d6d	60		rts				rts
.2d6e					EvaluateNumeric:
.2d6e	20 65 2d	jsr $2d65			jsr 	Evaluate
.2d71	b5 48		lda $48,x			lda 	esType,x
.2d73	0a		asl a				asl 	a 							; see if it's a string.
.2d74	30 e8		bmi $2d5e			bmi 	ENTType
.2d76	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2d77	4a		lsr a				lsr 	a
.2d78	60		rts				rts
.2d79					EvaluateString:
.2d79	20 65 2d	jsr $2d65			jsr 	Evaluate
.2d7c	b5 48		lda $48,x			lda 	esType,x
.2d7e	0a		asl a				asl 	a 							; see if it's a string.
.2d7f	10 dd		bpl $2d5e			bpl 	ENTType
.2d81	60		rts				rts
.2d82					EvaluateRootInteger:
.2d82	a2 00		ldx #$00			ldx 	#0
.2d84					EvaluateInteger:
.2d84	20 65 2d	jsr $2d65			jsr 	Evaluate
.2d87	b5 48		lda $48,x			lda 	esType,x
.2d89	d0 d3		bne $2d5e			bne 	ENTType
.2d8b	60		rts				rts
.2d8c					EvaluateSmallInteger:
.2d8c	20 84 2d	jsr $2d84			jsr 	EvaluateInteger
.2d8f	b5 58		lda $58,x			lda 	esInt1,x
.2d91	15 60		ora $60,x			ora 	esInt2,x
.2d93	15 68		ora $68,x			ora 	esInt3,x
.2d95	d0 03		bne $2d9a			bne 	_ESIValue
.2d97	b5 50		lda $50,x			lda 	esInt0,x
.2d99	60		rts				rts
.2d9a					_ESIValue:
.2d9a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2d9c	20 18 15	jsr $1518		jsr	errorHandler
.2d9f					LinkEvaluate:
.2d9f	aa		tax				tax
.2da0	20 65 2d	jsr $2d65			jsr 	Evaluate
.2da3	8a		txa				txa
.2da4	60		rts				rts
.2da5					LinkEvaluateTerm:
.2da5	aa		tax				tax
.2da6	20 44 2d	jsr $2d44			jsr 	EvaluateTerm
.2da9	8a		txa				txa
.2daa	60		rts				rts
.2dab					LinkEvaluateInteger:
.2dab	aa		tax				tax
.2dac	20 84 2d	jsr $2d84			jsr 	EvaluateInteger
.2daf	8a		txa				txa
.2db0	60		rts				rts
.2db1					LinkEvaluateString:
.2db1	aa		tax				tax
.2db2	20 79 2d	jsr $2d79			jsr 	EvaluateString
.2db5	8a		txa				txa
.2db6	60		rts				rts
.2db7					LinkEvaluateSmallInt:
.2db7	aa		tax				tax
.2db8	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger
.2dbb	8a		txa				txa
.2dbc	60		rts				rts
.2dbd					EvaluateReference:
.2dbd	ad 37 2d	lda $2d37			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2dc0	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2dc1	e9 01		sbc #$01			sbc 	#1
.2dc3	20 fb 2b	jsr $2bfb			jsr 	EvaluateLevel
.2dc6	b5 48		lda $48,x			lda 	esType,x
.2dc8	10 01		bpl $2dcb			bpl 	_ERFail
.2dca	60		rts				rts
.2dcb					_ERFail:
.2dcb	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2dcd	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2dd0					Event_Str:
.2dd0	20 6e 2d	jsr $2d6e			jsr 	EvaluateNumeric 			; get a number.
.2dd3	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2dd5	d0 13		bne $2dea			bne 	_ESFloat
.2dd7	20 2d 2e	jsr $2e2d			jsr 	ConvertGetBase 				; get base, or default.
.2dda	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2ddc	85 2a		sta $2a				sta 	temp0
.2dde	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2de0	85 2b		sta $2b				sta 	1+(temp0)
.2de2	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2de4	20 72 33	jsr $3372			jsr 	MInt32ToString 				; convert to string.
.2de7	4c f7 2d	jmp $2df7			jmp 	_ESCloneExit 				; clone and exit.
.2dea					_ESFloat:
.2dea	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; check closing )
.2ded	20 76 21	jsr $2176			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2df0	8a		txa				txa
.2df1	a2 16		ldx #$16		ldx	#22
.2df3	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2df6	aa		tax				tax
.2df7					_ESCloneExit:
.2df7	8a		txa				txa
.2df8	a2 04		ldx #$04		ldx	#4
.2dfa	20 c7 37	jsr $37c7		jsr	stringHandler
.2dfd	aa		tax				tax
.2dfe	60		rts				rts
.2dff					UnaryVal:
.2dff	38		sec				sec 								; Carry set to return value
.2e00	b0 01		bcs $2e03			bcs 	ValueMain
.2e02					UnaryIsVal:
.2e02	18		clc				clc									; Carry clear to return legitimacy
.2e03					ValueMain:
.2e03	08		php				php 								; save results (CS is value, CC is validation)
.2e04	20 79 2d	jsr $2d79			jsr 	EvaluateString
.2e07	20 2d 2e	jsr $2e2d			jsr 	ConvertGetBase 				; get base, if any.
.2e0a	98		tya				tya
.2e0b	48		pha				pha
.2e0c	20 76 21	jsr $2176			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2e0f	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2e11	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2e13	20 8a 32	jsr $328a			jsr 	MInt32FromString 			; convert it back from a string.
.2e16	b0 0c		bcs $2e24			bcs 	_VMSuccess 					; successfully converted.
.2e18	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2e1a	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2e1c	f0 00		beq $2e1e			beq 	_VMFailed 	 				; so we failed.
.2e1e					_VMFailed:
.2e1e	68		pla				pla
.2e1f	a8		tay				tay
.2e20	28		plp				plp
.2e21	4c 1c 34	jmp $341c			jmp 	MInt32False 				; return 0 whatever.
.2e24					_VMSuccess:
.2e24	68		pla				pla
.2e25	a8		tay				tay
.2e26	28		plp				plp 								; if CS the it was val() so we want the value.
.2e27	b0 03		bcs $2e2c			bcs 	_VMExit
.2e29	4c 18 34	jmp $3418			jmp 	MInt32True 					; otherwise return true as successful.
.2e2c					_VMExit:
.2e2c	60		rts				rts
.2e2d					ConvertGetBase:
.2e2d	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2e2f	95 51		sta $51,x			sta 	esInt0+1,x
.2e31	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2e33	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2e35	d0 0e		bne $2e45			bne 	_CGBDone 					; not found, should be )
.2e37	e8		inx				inx 								; next level
.2e38	c8		iny				iny 								; skip comma.
.2e39	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger		; evaluate the base.
.2e3c	ca		dex				dex
.2e3d	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2e3f	90 08		bcc $2e49			bcc 	_CGBValue 					; (it should work as high as 37)
.2e41	c9 11		cmp #$11			cmp 	#17
.2e43	b0 04		bcs $2e49			bcs 	_CGBValue
.2e45					_CGBDone:
.2e45	20 8f 34	jsr $348f			jsr 	CheckRightParen
.2e48	60		rts				rts
.2e49					_CGBValue:
.2e49	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2e4b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2e4e					EventFunction:
.2e4e	20 bd 2d	jsr $2dbd			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2e51	b5 48		lda $48,x			lda 	esType,x
.2e53	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2e55	d0 5b		bne $2eb2			bne 	_EFType
.2e57	20 9c 34	jsr $349c			jsr 	CheckComma
.2e5a	e8		inx				inx
.2e5b	20 84 2d	jsr $2d84			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2e5e	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; finish off with the right bracket
.2e61	ca		dex				dex
.2e62	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2e64	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2e66	15 60		ora $60,x			ora 	esInt2,x
.2e68	15 68		ora $68,x			ora 	esInt3,x
.2e6a	d0 41		bne $2ead			bne 	_EFValue
.2e6c	98		tya				tya
.2e6d	48		pha				pha
.2e6e	8a		txa				txa
.2e6f	48		pha				pha
.2e70	a2 1c		ldx #$1c		ldx	#28
.2e72	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e75	84 2d		sty $2d				sty 	temp1+1
.2e77	85 2c		sta $2c				sta 	temp1
.2e79	68		pla				pla
.2e7a	aa		tax				tax
.2e7b	20 76 21	jsr $2176			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2e7e	a0 03		ldy #$03			ldy 	#3							; if -ve
.2e80	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e82	30 23		bmi $2ea7			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2e84	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2e86	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e88	c8		iny				iny
.2e89	11 2a		ora ($2a),y			ora 	(temp0),y
.2e8b	f0 17		beq $2ea4			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2e8d	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2e8f	38		sec				sec
.2e90	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e92	e5 2c		sbc $2c				sbc 	temp1
.2e94	c8		iny				iny
.2e95	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e97	e5 2d		sbc $2d				sbc 	temp1+1
.2e99	10 0c		bpl $2ea7			bpl 	_EFFail 					; if trigger >= timer then return False
.2e9b	20 b7 2e	jsr $2eb7			jsr 	SetEventTimer 				; reset the timer for next time.
.2e9e	20 18 34	jsr $3418			jsr	 	MInt32True 					; and treutn true as fired.
.2ea1	68		pla				pla
.2ea2	a8		tay				tay
.2ea3	60		rts				rts
.2ea4					_EFInitialise:
.2ea4	20 b7 2e	jsr $2eb7			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2ea7					_EFFail:
.2ea7	68		pla				pla
.2ea8	a8		tay				tay
.2ea9	20 1c 34	jsr $341c			jsr 	MInt32False
.2eac	60		rts				rts
.2ead					_EFValue:
.2ead	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2eaf	20 18 15	jsr $1518		jsr	errorHandler
.2eb2					_EFType:
.2eb2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2eb4	20 18 15	jsr $1518		jsr	errorHandler
.2eb7					SetEventTimer:
.2eb7	a0 00		ldy #$00			ldy 	#0
.2eb9	18		clc				clc
.2eba	a5 2c		lda $2c				lda 	temp1
.2ebc	75 51		adc $51,x			adc 	esInt0+1,x
.2ebe	91 2a		sta ($2a),y			sta		(temp0),y
.2ec0	c8		iny				iny
.2ec1	a5 2d		lda $2d				lda 	temp1+1
.2ec3	75 59		adc $59,x			adc 	esInt1+1,x
.2ec5	91 2a		sta ($2a),y			sta		(temp0),y
.2ec7	88		dey				dey
.2ec8	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2eca	d0 04		bne $2ed0			bne 	_SETExit 					; zero means initialise.....
.2ecc	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2ece	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2ed0					_SETExit:
.2ed0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2ed1					UnaryLen:
.2ed1	20 df 2e	jsr $2edf			jsr 	ULStart
.2ed4					ULFinish:
.2ed4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2ed6	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2ed8	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit 				; write it out.
.2edb	20 8f 34	jsr $348f			jsr 	CheckRightParen
.2ede	60		rts				rts
.2edf	20 79 2d	jsr $2d79	ULStart:jsr 	EvaluateString
.2ee2	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2ee4	85 2a		sta $2a				sta 	temp0
.2ee6	b5 58		lda $58,x			lda 	esInt1,x
.2ee8	85 2b		sta $2b				sta 	temp0+1
.2eea	84 32		sty $32				sty 	tempShort 					; get length
.2eec	a0 00		ldy #$00			ldy 	#0
.2eee	60		rts				rts
.2eef					UnaryAsc:
.2eef	20 df 2e	jsr $2edf			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2ef2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2ef4	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2ef5	c9 00		cmp #$00			cmp 	#0
.2ef7	d0 db		bne $2ed4			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2ef9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2efb	20 18 15	jsr $1518		jsr	errorHandler
.2efe					UnaryAbs:
.2efe	20 6e 2d	jsr $2d6e			jsr 	EvaluateNumeric 			; some numeric value
.2f01	b0 07		bcs $2f0a			bcs 	_UAFloat 					; CS then float, so use that function
.2f03	20 d1 33	jsr $33d1			jsr 	MInt32Absolute 				; int version
.2f06	20 8f 34	jsr $348f			jsr 	CheckRightParen
.2f09	60		rts				rts
.2f0a					_UAFloat:
.2f0a	8a		txa				txa 								; float version
.2f0b	a2 02		ldx #$02		ldx	#2
.2f0d	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2f10	aa		tax				tax
.2f11	20 8f 34	jsr $348f			jsr 	CheckRightParen
.2f14	60		rts				rts
.2f15					UnarySgn:
.2f15	20 6e 2d	jsr $2d6e			jsr 	EvaluateNumeric 			; same as above but sign of value
.2f18	b0 07		bcs $2f21			bcs 	_USFloat
.2f1a	20 09 34	jsr $3409			jsr 	MInt32Sign
.2f1d	20 8f 34	jsr $348f			jsr 	CheckRightParen
.2f20	60		rts				rts
.2f21					_USFloat:
.2f21	8a		txa				txa
.2f22	a2 10		ldx #$10		ldx	#16
.2f24	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2f27	aa		tax				tax
.2f28	20 8f 34	jsr $348f			jsr 	CheckRightParen
.2f2b	60		rts				rts
.2f2c					UnaryPeek:
.2f2c	20 58 2f	jsr $2f58			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2f2f	4c 4c 2f	jmp $2f4c			jmp 	PDLByte0
.2f32					UnaryDeek:
.2f32	20 58 2f	jsr $2f58			jsr 	PDLCode
.2f35	4c 46 2f	jmp $2f46			jmp 	PDLByte1
.2f38					UnaryLeek:
.2f38	20 58 2f	jsr $2f58			jsr 	PDLCode
.2f3b	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2f3d	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f3f	95 68		sta $68,x			sta 	esInt3,x
.2f41	88		dey				dey
.2f42	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f44	95 60		sta $60,x			sta 	esInt2,x
.2f46					PDLByte1:
.2f46	a0 01		ldy #$01			ldy 	#1
.2f48	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f4a	95 58		sta $58,x			sta 	esInt1,x
.2f4c					PDLByte0:
.2f4c	a0 00		ldy #$00			ldy 	#0
.2f4e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f50	95 50		sta $50,x			sta 	esInt0,x
.2f52	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2f54	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; check right and return
.2f57	60		rts				rts
.2f58					PDLCode:
.2f58	20 84 2d	jsr $2d84			jsr 	EvaluateInteger 			; some address
.2f5b	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2f5d	85 2a		sta $2a				sta 	temp0
.2f5f	b5 58		lda $58,x			lda 	esInt1,x
.2f61	85 2b		sta $2b				sta 	temp0+1
.2f63	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2f65	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2f67	95 60		sta $60,x			sta 	esInt2,x
.2f69	95 68		sta $68,x			sta 	esInt3,x
.2f6b	84 32		sty $32				sty 	tempShort 					; save Y
.2f6d	60		rts				rts
.2f6e					Unary_Random:
.2f6e	20 4c 34	jsr $344c			jsr 	MInt32Random 				; generate random number.
.2f71	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2f73	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f75	f0 08		beq $2f7f			beq 	_URExit
.2f77	e8		inx				inx 								; load range 0..r-1 into +1
.2f78	20 84 2d	jsr $2d84			jsr 	EvaluateInteger
.2f7b	ca		dex				dex
.2f7c	20 6f 32	jsr $326f			jsr 	MInt32Modulus 				; calculate random % modulus
.2f7f					_URExit:
.2f7f	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; check right and return
.2f82	60		rts				rts
.2f83					Unary_Min:
.2f83	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2f85	d0 02		bne $2f89			bne 	UnaryMBody
.2f87					Unary_Max:
.2f87	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2f89					UnaryMBody:
.2f89	48		pha				pha 								; save comparator on stack, shows min or max
.2f8a	20 65 2d	jsr $2d65			jsr 	Evaluate 					; get the first thing to check
.2f8d					_UnaryMLoop:
.2f8d	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2f8f	c8		iny				iny
.2f90	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f92	f0 09		beq $2f9d			beq 	_UnaryMExit
.2f94	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2f96	f0 07		beq $2f9f			beq 	_UnaryMCompare
.2f98	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2f9a	20 18 15	jsr $1518		jsr	errorHandler
.2f9d					_UnaryMExit:
.2f9d	68		pla				pla 								; done so throw comparator and return.
.2f9e	60		rts				rts
.2f9f					_UnaryMCompare:
.2f9f	e8		inx				inx 								; get the 2nd thing to evaluate
.2fa0	20 65 2d	jsr $2d65			jsr 	Evaluate
.2fa3	ca		dex				dex
.2fa4	20 2b 2b	jsr $2b2b			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2fa7	85 32		sta $32				sta 	tempShort 					; save result
.2fa9	68		pla				pla 								; get what we need
.2faa	48		pha				pha
.2fab	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2fad	d0 de		bne $2f8d			bne 	_UnaryMLoop 				; no, try another value.
.2faf	20 1c 34	jsr $341c			jsr 	MInt32False 				; promote 2nd to 1st.
.2fb2	20 00 33	jsr $3300			jsr 	MInt32Add
.2fb5	4c 8d 2f	jmp $2f8d			jmp 	_UnaryMLoop
.2fb8					Unary_Page:
.2fb8	20 1c 34	jsr $341c			jsr 	MInt32False 				; zero
.2fbb	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2fbe	95 50		sta $50,x			sta 	esInt0,x
.2fc0	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fc3	95 58		sta $58,x			sta 	esInt1,x
.2fc5	60		rts				rts
.2fc6					UnaryReference:
.2fc6	a9 0f		lda #$0f			lda 	#15
.2fc8	20 fb 2b	jsr $2bfb			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2fcb	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2fcd	10 05		bpl $2fd4			bpl 	UType
.2fcf	a9 00		lda #$00			lda 	#0 							; make it an integer
.2fd1	95 48		sta $48,x			sta 	esType,x
.2fd3	60		rts				rts
.2fd4					UType:
.2fd4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2fd6	20 18 15	jsr $1518		jsr	errorHandler
.2fd9					UnaryHexMarker:
.2fd9	4c 56 2d	jmp $2d56			jmp 	EvaluateIntegerTerm
.2fdc					UnaryComplement:
.2fdc	20 56 2d	jsr $2d56			jsr 	EvaluateIntegerTerm
.2fdf	20 f0 33	jsr $33f0			jsr 	MInt32Not
.2fe2	60		rts				rts
.2fe3					UnaryIntToFloat:
.2fe3	20 6e 2d	jsr $2d6e			jsr 	EvaluateNumeric				; some number
.2fe6	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2fe8	d0 0b		bne $2ff5			bne 	_UIFExit
.2fea	8a		txa				txa 								; convert and set type
.2feb	a2 1c		ldx #$1c		ldx	#28
.2fed	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.2ff0	aa		tax				tax
.2ff1	a9 01		lda #$01			lda 	#1
.2ff3	95 48		sta $48,x			sta 	esType,x
.2ff5					_UIFExit:
.2ff5	60		rts				rts
.2ff6					UnaryFloatToInt:
.2ff6	20 6e 2d	jsr $2d6e			jsr 	EvaluateNumeric 			; the number
.2ff9	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2ffb	f0 0b		beq $3008			beq 	_UFIExit
.2ffd	8a		txa				txa 								; convert to int
.2ffe	a2 14		ldx #$14		ldx	#20
.3000	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.3003	aa		tax				tax
.3004	a9 00		lda #$00			lda 	#0 							; set type
.3006	95 48		sta $48,x			sta 	esType,x
.3008					_UFIExit:
.3008	60		rts				rts
.3009					UnaryAlloc:
.3009	e8		inx				inx 								; evaluate memory required
.300a	20 84 2d	jsr $2d84			jsr 	EvaluateInteger
.300d	20 8f 34	jsr $348f			jsr 	CheckRightParen
.3010	ca		dex				dex
.3011	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.3013	15 69		ora $69,x			ora 	esInt3+1,x
.3015	d0 1d		bne $3034			bne 	_UABadValue
.3017	20 1c 34	jsr $341c			jsr 	MInt32False					; zero return.
.301a	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.301c	95 58		sta $58,x			sta 	esInt1,x
.301e	a5 35		lda $35				lda 	lowMemory
.3020	95 50		sta $50,x			sta 	esInt0,x
.3022	18		clc				clc 								; add alloc required.
.3023	75 51		adc $51,x			adc 	esInt0+1,x
.3025	85 35		sta $35				sta 	lowMemory
.3027	a5 36		lda $36				lda 	lowMemory+1
.3029	75 59		adc $59,x			adc 	esInt1+1,x
.302b	85 36		sta $36				sta 	lowMemory+1
.302d	b0 05		bcs $3034			bcs		_UABadValue 				; overflow definitely bad.
.302f	c5 34		cmp $34				cmp 	highMemory+1
.3031	b0 01		bcs $3034			bcs 	_UABadValue 				; out of memory bad.
.3033	60		rts				rts
.3034					_UABadValue:
.3034	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3036	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3039					UnaryTimer:
.3039	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; no parameters
.303c	98		tya				tya
.303d	48		pha				pha
.303e	20 43 34	jsr $3443			jsr 	MInt32Zero 					; zero result
.3041	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3043	a2 1c		ldx #$1c		ldx	#28
.3045	20 f6 14	jsr $14f6		jsr	deviceHandler
.3048	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.304a	95 50		sta $50,x			sta 	esInt0,x
.304c	98		tya				tya
.304d	95 58		sta $58,x			sta 	esInt1,x
.304f	68		pla				pla
.3050	a8		tay				tay
.3051	60		rts				rts
.3052					UnaryInkey:
.3052	20 8f 34	jsr $348f			jsr 	CheckRightParen
.3055	86 2a		stx $2a				stx 	temp0
.3057	a2 0a		ldx #$0a		ldx	#10
.3059	20 f6 14	jsr $14f6		jsr	deviceHandler
.305c	a6 2a		ldx $2a				ldx 	temp0
.305e	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit
.3061	60		rts				rts
.3062					UnaryGet:
.3062	20 8f 34	jsr $348f			jsr 	CheckRightParen
.3065	86 2a		stx $2a				stx 	temp0
.3067					_UGLoop:
.3067	a2 02		ldx #$02		ldx	#2
.3069	20 f6 14	jsr $14f6		jsr	deviceHandler
.306c	a2 0a		ldx #$0a		ldx	#10
.306e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3071	c9 00		cmp #$00			cmp 	#0
.3073	f0 f2		beq $3067			beq 	_UGLoop
.3075	a6 2a		ldx $2a				ldx 	temp0
.3077	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit
.307a	60		rts				rts
.307b					UnaryGetString:
.307b	20 62 30	jsr $3062			jsr 	UnaryGet
.307e					UGSDoChr:
.307e	4c cf 30	jmp $30cf			jmp 	ChrCode
.3081					UnaryInkeyString:
.3081	20 52 30	jsr $3052			jsr 	UnaryInkey
.3084	b5 50		lda $50,x			lda 	esInt0,x
.3086	d0 f6		bne $307e			bne 	UGSDoChr
.3088	8a		txa				txa
.3089	a2 08		ldx #$08		ldx	#8
.308b	20 c7 37	jsr $37c7		jsr	stringHandler
.308e	aa		tax				tax
.308f	60		rts				rts
.3090					UnarySys:
.3090	20 84 2d	jsr $2d84			jsr 	EvaluateInteger 				; get the address
.3093	20 8f 34	jsr $348f			jsr 	CheckRightParen
.3096	20 76 21	jsr $2176			jsr 	TOSToTemp0 						; copy call address to temp0
.3099	8a		txa				txa
.309a	48		pha				pha
.309b	98		tya				tya
.309c	48		pha				pha
.309d	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.30a0	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.30a3	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.30a6	20 b5 30	jsr $30b5			jsr 	_CallTemp0
.30a9	85 32		sta $32				sta 	tempShort 						; restore YX
.30ab	68		pla				pla
.30ac	a8		tay				tay
.30ad	68		pla				pla
.30ae	aa		tax				tax
.30af	a5 32		lda $32				lda 	tempShort
.30b1	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit 					; return result.
.30b4	60		rts				rts
.30b5					_CallTemp0:
.30b5	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.30b8					UnaryMem:
.30b8	20 1c 34	jsr $341c			jsr 	MInt32False 					; set to false (e.g. 0)
.30bb	38		sec				sec
.30bc	a5 33		lda $33				lda 	highMemory 						; calculate value
.30be	e5 35		sbc $35				sbc 	lowMemory
.30c0	95 50		sta $50,x			sta 	esInt0,x
.30c2	a5 34		lda $34				lda 	highMemory+1
.30c4	e5 36		sbc $36				sbc 	lowMemory+1
.30c6	95 58		sta $58,x			sta 	esInt1,x
.30c8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.30c9					ExecChr:
.30c9	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger		; character number 0-255
.30cc	20 8f 34	jsr $348f			jsr 	CheckRightParen				; right bracket
.30cf					ChrCode:
.30cf	98		tya				tya
.30d0	48		pha				pha
.30d1	8a		txa				txa 								; A = stack
.30d2	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.30d4	a2 02		ldx #$02		ldx	#2
.30d6	20 c7 37	jsr $37c7		jsr	stringHandler
.30d9	aa		tax				tax 								; X = stack
.30da	68		pla				pla
.30db	a8		tay				tay
.30dc	60		rts				rts
.30dd					ExecLower:
.30dd	38		sec				sec 								; set carry is lower
.30de	b0 01		bcs $30e1			bcs 	ExecUpperLower
.30e0					ExecUpper:
.30e0	18		clc				clc 								; clear carry is upper
.30e1					ExecUpperLower:
.30e1	08		php				php 								; save carry
.30e2	20 79 2d	jsr $2d79			jsr 	EvaluateString 				; string to stack,X
.30e5	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; check closing right bracket.
.30e8	28		plp				plp 								; restore carry, save Y
.30e9	98		tya				tya
.30ea	48		pha				pha
.30eb	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.30ed	2a		rol a				rol 	a
.30ee	a8		tay				tay 								; now in Y
.30ef	8a		txa				txa 								; do the substring and exit.
.30f0	a2 0c		ldx #$0c		ldx	#12
.30f2	20 c7 37	jsr $37c7		jsr	stringHandler
.30f5	aa		tax				tax
.30f6	68		pla				pla
.30f7	a8		tay				tay
.30f8	60		rts				rts
.30f9					ExecLeft:
.30f9	20 79 2d	jsr $2d79			jsr 	EvaluateString 				; string to stack,X
.30fc	20 9c 34	jsr $349c			jsr 	CheckComma
.30ff	e8		inx				inx
.3100	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.3102	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit
.3105	e8		inx				inx
.3106	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3109					ExecSubstring:
.3109	ca		dex				dex 								; fix up X
.310a	ca		dex				dex
.310b	20 8f 34	jsr $348f			jsr 	CheckRightParen 			; check closing right bracket.
.310e	8a		txa				txa 								; do the substring and exit.
.310f	a2 0e		ldx #$0e		ldx	#14
.3111	20 c7 37	jsr $37c7		jsr	stringHandler
.3114	aa		tax				tax
.3115	60		rts				rts
.3116					ExecMid:
.3116	20 79 2d	jsr $2d79			jsr 	EvaluateString 				; string to stack,X
.3119	20 9c 34	jsr $349c			jsr 	CheckComma
.311c	e8		inx				inx
.311d	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3120	c9 00		cmp #$00			cmp 	#0
.3122	f0 15		beq $3139			beq 	_EMValue
.3124	e8		inx				inx
.3125	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3127	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit
.312a	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.312c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.312e	f0 d9		beq $3109			beq 	ExecSubString
.3130	20 9c 34	jsr $349c			jsr 	CheckComma
.3133	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3136	4c 09 31	jmp $3109			jmp 	ExecSubString
.3139					_EMValue:
.3139	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.313b	20 18 15	jsr $1518		jsr	errorHandler
.313e					ExecRight:
.313e	20 79 2d	jsr $2d79			jsr 	EvaluateString 				; string to stack,X
.3141	20 9c 34	jsr $349c			jsr 	CheckComma
.3144	e8		inx				inx
.3145	20 8c 2d	jsr $2d8c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3148	ca		dex				dex
.3149	98		tya				tya
.314a	48		pha				pha
.314b	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.314d	85 2a		sta $2a				sta 	temp0
.314f	b5 58		lda $58,x			lda 	esInt1,x
.3151	85 2b		sta $2b				sta 	temp0+1
.3153	a0 00		ldy #$00			ldy 	#0 							; point to length
.3155	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3157	18		clc				clc 								; add 1.
.3158	69 01		adc #$01			adc 	#1
.315a	38		sec				sec
.315b	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.315d	f0 02		beq $3161			beq		_ERMake1 					; if zero, make it 1.
.315f	b0 02		bcs $3163			bcs		_EROkay
.3161					_ERMake1:
.3161	a9 01		lda #$01			lda 	#1 							; start position.
.3163					_EROkay:
.3163	e8		inx				inx 								; set start pos.
.3164	95 50		sta $50,x			sta 	esInt0,x
.3166	e8		inx				inx
.3167	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3169	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit
.316c	68		pla				pla
.316d	a8		tay				tay
.316e	4c 09 31	jmp $3109			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3171					MInt32And:
.3171	b5 50		lda $50,x			lda 	esInt0,x
.3173	35 51		and $51,x			and 	esInt0+1,x
.3175	95 50		sta $50,x			sta 	esInt0,x
.3177	b5 58		lda $58,x			lda 	esInt1,x
.3179	35 59		and $59,x			and 	esInt1+1,x
.317b	95 58		sta $58,x			sta 	esInt1,x
.317d	b5 60		lda $60,x			lda 	esInt2,x
.317f	35 61		and $61,x			and 	esInt2+1,x
.3181	95 60		sta $60,x			sta 	esInt2,x
.3183	b5 68		lda $68,x			lda 	esInt3,x
.3185	35 69		and $69,x			and 	esInt3+1,x
.3187	95 68		sta $68,x			sta 	esInt3,x
.3189	60		rts				rts
.318a					MInt32Or:
.318a	b5 50		lda $50,x			lda 	esInt0,x
.318c	15 51		ora $51,x			ora 	esInt0+1,x
.318e	95 50		sta $50,x			sta 	esInt0,x
.3190	b5 58		lda $58,x			lda 	esInt1,x
.3192	15 59		ora $59,x			ora 	esInt1+1,x
.3194	95 58		sta $58,x			sta 	esInt1,x
.3196	b5 60		lda $60,x			lda 	esInt2,x
.3198	15 61		ora $61,x			ora 	esInt2+1,x
.319a	95 60		sta $60,x			sta 	esInt2,x
.319c	b5 68		lda $68,x			lda 	esInt3,x
.319e	15 69		ora $69,x			ora 	esInt3+1,x
.31a0	95 68		sta $68,x			sta 	esInt3,x
.31a2	60		rts				rts
.31a3					MInt32Xor:
.31a3	b5 50		lda $50,x			lda 	esInt0,x
.31a5	55 51		eor $51,x			eor 	esInt0+1,x
.31a7	95 50		sta $50,x			sta 	esInt0,x
.31a9	b5 58		lda $58,x			lda 	esInt1,x
.31ab	55 59		eor $59,x			eor 	esInt1+1,x
.31ad	95 58		sta $58,x			sta 	esInt1,x
.31af	b5 60		lda $60,x			lda 	esInt2,x
.31b1	55 61		eor $61,x			eor 	esInt2+1,x
.31b3	95 60		sta $60,x			sta 	esInt2,x
.31b5	b5 68		lda $68,x			lda 	esInt3,x
.31b7	55 69		eor $69,x			eor 	esInt3+1,x
.31b9	95 68		sta $68,x			sta 	esInt3,x
.31bb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.31bc					MInt32Compare:
.31bc	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.31be	d5 51		cmp $51,x			cmp 	esInt0+1,x
.31c0	d0 13		bne $31d5			bne 	MInt32Compare2
.31c2	b5 58		lda $58,x			lda 	esInt1,x
.31c4	d5 59		cmp $59,x			cmp 	esInt1+1,x
.31c6	d0 0d		bne $31d5			bne 	MInt32Compare2
.31c8	b5 60		lda $60,x			lda 	esInt2,x
.31ca	d5 61		cmp $61,x			cmp 	esInt2+1,x
.31cc	d0 07		bne $31d5			bne 	MInt32Compare2
.31ce	b5 68		lda $68,x			lda 	esInt3,x
.31d0	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.31d2	d0 01		bne $31d5			bne 	MInt32Compare2
.31d4	60		rts				rts
.31d5					MInt32Compare2:
.31d5	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.31d7	d5 51		cmp $51,x			cmp 	esInt0+1,x
.31d9	b5 58		lda $58,x			lda		esInt1,x
.31db	f5 59		sbc $59,x			sbc 	esInt1+1,x
.31dd	b5 60		lda $60,x			lda		esInt2,x
.31df	f5 61		sbc $61,x			sbc 	esInt2+1,x
.31e1	b5 68		lda $68,x			lda		esInt3,x
.31e3	f5 69		sbc $69,x			sbc 	esInt3+1,x
.31e5	50 02		bvc $31e9			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.31e7	49 80		eor #$80			eor 	#$80
.31e9					_I32LNoOverflow
.31e9	30 03		bmi $31ee			bmi 	MInt32CLess					; if -ve then return $FF
.31eb	a9 01		lda #$01			lda 	#$01						; else return $01
.31ed	60		rts				rts
.31ee					MInt32CLess:
.31ee	a9 ff		lda #$ff			lda 	#$FF
.31f0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.31f1					MInt32SDivide:
.31f1	98		tya				tya  								; save Y, which is the count of negations
.31f2	48		pha				pha
.31f3	a0 00		ldy #$00			ldy 	#0 							; zero count
.31f5	20 0d 32	jsr $320d			jsr 	_MInt32SRemSign 			; unsign TOS
.31f8	e8		inx				inx 								; unsign TOS+1
.31f9	20 0d 32	jsr $320d			jsr 	_MInt32SRemSign
.31fc	ca		dex				dex
.31fd	98		tya				tya 								; save sign count on stack
.31fe	48		pha				pha
.31ff	20 16 32	jsr $3216			jsr 	MInt32UDivide 				; unsigned division
.3202	68		pla				pla 								; get sign count back
.3203	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3205	f0 03		beq $320a			beq 	_I32SNoNeg
.3207	20 d6 33	jsr $33d6			jsr 	MInt32Negate
.320a					_I32SNoNeg:
.320a	68		pla				pla 								; restoe Y and exit
.320b	a8		tay				tay
.320c	60		rts				rts
.320d					_MInt32SRemSign:
.320d	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.320f	10 04		bpl $3215			bpl 	_MInt32SRSExit
.3211	c8		iny				iny 								; increment the sign count
.3212	20 d6 33	jsr $33d6			jsr 	MInt32Negate 				; negate the value.
.3215					_MInt32SRSExit:
.3215	60		rts				rts
.3216					MInt32UDivide:
.3216	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.3218	15 59		ora $59,x			ora 	esInt1+1,x
.321a	15 5a		ora $5a,x			ora 	esInt1+2,x
.321c	15 5b		ora $5b,x			ora 	esInt1+3,x
.321e	f0 4a		beq $326a			beq 	_MInt32DZero
.3220	e8		inx				inx 								; clear A
.3221	e8		inx				inx
.3222	20 1c 34	jsr $341c			jsr 	MInt32False
.3225	ca		dex				dex
.3226	ca		dex				dex
.3227	98		tya				tya 								; save Y on the stack
.3228	48		pha				pha
.3229	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.322b					_MInt32UDLoop:
.322b	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.322d	36 58		rol $58,x			rol 	esInt1,x
.322f	36 60		rol $60,x			rol 	esInt2,x
.3231	36 68		rol $68,x			rol 	esInt3,x
.3233	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.3235	36 5a		rol $5a,x			rol 	esInt1+2,x
.3237	36 62		rol $62,x			rol 	esInt2+2,x
.3239	36 6a		rol $6a,x			rol 	esInt3+2,x
.323b	38		sec				sec 								; calculate A-M saving result on the stack
.323c	b5 52		lda $52,x			lda 	esInt0+2,x
.323e	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3240	48		pha				pha
.3241	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3243	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3245	48		pha				pha
.3246	b5 62		lda $62,x			lda 	esInt2+2,x
.3248	f5 61		sbc $61,x			sbc 	esInt2+1,x
.324a	48		pha				pha
.324b	b5 6a		lda $6a,x			lda 	esInt3+2,x
.324d	f5 69		sbc $69,x			sbc 	esInt3+1,x
.324f	90 10		bcc $3261			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3251	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.3253	68		pla				pla
.3254	95 62		sta $62,x			sta 	esInt2+2,x
.3256	68		pla				pla
.3257	95 5a		sta $5a,x			sta 	esInt1+2,x
.3259	68		pla				pla
.325a	95 52		sta $52,x			sta 	esInt0+2,x
.325c	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.325e	4c 64 32	jmp $3264			jmp 	_MInt32Next 					; do the next iteration
.3261					_MInt32NoSubtract:
.3261	68		pla				pla
.3262	68		pla				pla
.3263	68		pla				pla
.3264					_MInt32Next:
.3264	88		dey				dey 								; do this 32 times.
.3265	d0 c4		bne $322b			bne 	_MInt32UDLoop
.3267	68		pla				pla 								; restore Y and exit
.3268	a8		tay				tay
.3269	60		rts				rts
.326a					_MInt32DZero:
.326a	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.326c	20 18 15	jsr $1518		jsr	errorHandler
.326f					MInt32Modulus:
.326f	20 16 32	jsr $3216			jsr 	MInt32UDivide 				; do the division.
.3272	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3274	95 68		sta $68,x			sta 	esInt3,x
.3276	b5 62		lda $62,x			lda 	esInt2+2,x
.3278	95 60		sta $60,x			sta 	esInt2,x
.327a	b5 5a		lda $5a,x			lda 	esInt1+2,x
.327c	95 58		sta $58,x			sta 	esInt1,x
.327e	b5 52		lda $52,x			lda 	esInt0+2,x
.3280	95 50		sta $50,x			sta 	esInt0,x
.3282	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cda					fs32Length:
>0cda							.fill 	1
.3283					LinkInt32FromString:
.3283	aa		tax				tax
.3284	98		tya				tya
.3285	20 8a 32	jsr $328a			jsr 	MInt32FromString
.3288	8a		txa				txa
.3289	60		rts				rts
.328a					MInt32FromString:
.328a	85 32		sta $32				sta 	tempShort 					; save base
.328c	98		tya				tya
.328d	48		pha				pha
.328e	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3290	b1 2a		lda ($2a),y			lda 	(temp0),y
.3292	8d da 0c	sta $0cda			sta 	fs32Length
.3295	f0 65		beq $32fc			beq 	_I32FSFail2					; fail if length zero.
.3297	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3299	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.329b	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.329d	d0 09		bne $32a8			bne 	_I32FSNotNegative
.329f	ad da 0c	lda $0cda			lda 	fs32Length 					; get length back.
.32a2	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.32a4	f0 56		beq $32fc			beq 	_I32FSFail2
.32a6	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.32a8					_I32FSNotNegative:
.32a8	a5 32		lda $32				lda 	tempShort 					; get the base back.
.32aa	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.32ac	d0 02		bne $32b0			bne 	_I32FSNN2
.32ae	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.32b0					_I32FSNN2:
.32b0	48		pha				pha 								; save base + final sign on stack.
.32b1	20 1c 34	jsr $341c			jsr 	MInt32False 				; zero the return value.
.32b4					_I32FSMainLoop:
.32b4	68		pla				pla 								; get the base back into tempShort
.32b5	48		pha				pha
.32b6	29 7f		and #$7f			and 	#$7F
.32b8	85 32		sta $32				sta 	tempShort
.32ba	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.32bc	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.32be	90 02		bcc $32c2			bcc 	_I32FSNotLC
.32c0	e9 20		sbc #$20			sbc 	#32
.32c2					_I32FSNotLC:
.32c2	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.32c3	e9 30		sbc #$30			sbc 	#"0"
.32c5	90 34		bcc $32fb			bcc 	_I32FSFail 					; nothing more to do.
.32c7	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.32c9	90 06		bcc $32d1			bcc 	_I32FSValidate
.32cb	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.32cd	90 2c		bcc $32fb			bcc 	_I32FSFail
.32cf	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.32d1					_I32FSValidate:
.32d1	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.32d3	b0 26		bcs $32fb			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.32d5	48		pha				pha 								; save the new digit value.
.32d6	e8		inx				inx 								; put base into next slot up on stack
.32d7	a5 32		lda $32				lda 	tempShort
.32d9	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit
.32dc	ca		dex				dex
.32dd	20 34 33	jsr $3334			jsr 	MInt32Multiply 				; multiply current by the base
.32e0	e8		inx				inx
.32e1	68		pla				pla  								; put additive into next slot
.32e2	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit
.32e5	ca		dex				dex
.32e6	20 00 33	jsr $3300			jsr 	MInt32Add 					; and add it
.32e9	c8		iny				iny 								; bump the character pointer
.32ea	cc da 0c	cpy $0cda			cpy 	fs32Length 					; until > length.
.32ed	f0 c5		beq $32b4			beq 	_I32FSMainLoop
.32ef	90 c3		bcc $32b4			bcc 	_I32FSMainLoop
.32f1					_I32FSDone:
.32f1	68		pla				pla 								; get base/final sign back
.32f2	10 03		bpl $32f7			bpl 	_I32FSNN3
.32f4	20 d6 33	jsr $33d6			jsr 	MInt32Negate 				; negate the result.
.32f7					_I32FSNN3:
.32f7	68		pla				pla
.32f8	a8		tay				tay
.32f9	38		sec				sec
.32fa	60		rts				rts
.32fb					_I32FSFail:
.32fb	68		pla				pla
.32fc					_I32FSFail2:
.32fc	68		pla				pla
.32fd	a8		tay				tay
.32fe	18		clc				clc
.32ff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3300					MInt32Add:
.3300	18		clc				clc
.3301	b5 50		lda $50,x			lda 	esInt0,x
.3303	75 51		adc $51,x			adc 	esInt0+1,x
.3305	95 50		sta $50,x			sta 	esInt0,x
.3307	b5 58		lda $58,x			lda 	esInt1,x
.3309	75 59		adc $59,x			adc 	esInt1+1,x
.330b	95 58		sta $58,x			sta 	esInt1,x
.330d	b5 60		lda $60,x			lda 	esInt2,x
.330f	75 61		adc $61,x			adc 	esInt2+1,x
.3311	95 60		sta $60,x			sta 	esInt2,x
.3313	b5 68		lda $68,x			lda 	esInt3,x
.3315	75 69		adc $69,x			adc 	esInt3+1,x
.3317	95 68		sta $68,x			sta 	esInt3,x
.3319	60		rts				rts
.331a					MInt32Sub:
.331a	38		sec				sec
.331b	b5 50		lda $50,x			lda 	esInt0,x
.331d	f5 51		sbc $51,x			sbc 	esInt0+1,x
.331f	95 50		sta $50,x			sta 	esInt0,x
.3321	b5 58		lda $58,x			lda 	esInt1,x
.3323	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3325	95 58		sta $58,x			sta 	esInt1,x
.3327	b5 60		lda $60,x			lda 	esInt2,x
.3329	f5 61		sbc $61,x			sbc 	esInt2+1,x
.332b	95 60		sta $60,x			sta 	esInt2,x
.332d	b5 68		lda $68,x			lda 	esInt3,x
.332f	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3331	95 68		sta $68,x			sta 	esInt3,x
.3333	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3334					MInt32Multiply:
.3334	e8		inx				inx 								; copy 2nd -> 3rd
.3335	20 5a 33	jsr $335a			jsr 	MInt32CopyUp
.3338	ca		dex				dex
.3339	20 5a 33	jsr $335a			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.333c	20 1c 34	jsr $341c			jsr 	MInt32False 				; zero 1st.
.333f					_I32Loop:
.333f	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3341	29 01		and #$01			and 	#1
.3343	f0 03		beq $3348			beq 	_I32NoAdd 					; if set
.3345	20 00 33	jsr $3300			jsr 	MInt32Add 					; add 2nd to 1st.
.3348					_I32NoAdd:
.3348	e8		inx				inx 								; shift 2nd left
.3349	20 31 34	jsr $3431			jsr 	MInt32ShiftLeft
.334c	e8		inx				inx  								; shift 3rd right
.334d	20 3a 34	jsr $343a			jsr 	MInt32ShiftRight
.3350	20 43 34	jsr $3443			jsr 	MInt32Zero 					; check if zero.
.3353	08		php				php 								; save status bits
.3354	ca		dex				dex 	 							; point back to 1st
.3355	ca		dex				dex
.3356	28		plp				plp 								; get status bits
.3357	d0 e6		bne $333f			bne 	_I32Loop 					; if non-zero keep going.
.3359	60		rts				rts
.335a					MInt32CopyUp:
.335a	b5 50		lda $50,x			lda 	esInt0,x
.335c	95 51		sta $51,x			sta 	esInt0+1,x
.335e	b5 58		lda $58,x			lda 	esInt1,x
.3360	95 59		sta $59,x			sta 	esInt1+1,x
.3362	b5 60		lda $60,x			lda 	esInt2,x
.3364	95 61		sta $61,x			sta 	esInt2+1,x
.3366	b5 68		lda $68,x			lda 	esInt3,x
.3368	95 69		sta $69,x			sta 	esInt3+1,x
.336a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cdb					MCharCount:	.fill 	1						; count of converted characters
.336b					MLInt32ToString:
.336b	aa		tax				tax									; module passes stack in A, base in Y
.336c	98		tya				tya
.336d	20 72 33	jsr $3372			jsr 	MInt32ToString
.3370	8a		txa				txa
.3371	60		rts				rts
.3372					MInt32ToString:
.3372	48		pha				pha 								; save base
.3373	85 32		sta $32				sta 	tempShort 					; save target base.
.3375	a9 00		lda #$00			lda 	#0
.3377	8d db 0c	sta $0cdb			sta 	MCharCount 					; clear character count to 0
.337a	98		tya				tya
.337b	48		pha				pha
.337c	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.337e	10 10		bpl $3390			bpl 	_I32TSUnsigned
.3380	48		pha				pha 								; save base on stack.
.3381	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.3383	10 08		bpl $338d			bpl 	_I32TSNoFlip
.3385	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3387	20 c3 33	jsr $33c3			jsr 	MI32WriteCharacter
.338a	20 d6 33	jsr $33d6			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.338d					_I32TSNoFlip:
.338d	68		pla				pla 								; get the base back
.338e	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3390					_I32TSUnsigned:
.3390	20 9e 33	jsr $339e			jsr 	MI32DivideWrite 			; recursive code to output string.
.3393	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3395	ad db 0c	lda $0cdb			lda 	MCharCount
.3398	91 2a		sta ($2a),y			sta 	(temp0),y
.339a	68		pla				pla
.339b	a8		tay				tay
.339c	68		pla				pla
.339d	60		rts				rts
.339e					MI32DivideWrite:
.339e	48		pha				pha 								; save the divisor/base
.339f	e8		inx				inx 								; write in the dividing position.
.33a0	20 2b 34	jsr $342b			jsr 	MInt32Set8Bit
.33a3	ca		dex				dex
.33a4	20 16 32	jsr $3216			jsr 	MInt32UDivide 				; divide number by base.
.33a7	68		pla				pla 								; get the base into Y
.33a8	a8		tay				tay
.33a9	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.33ab	48		pha				pha
.33ac	20 43 34	jsr $3443			jsr 	MInt32Zero 					; is the result zero ?
.33af	f0 04		beq $33b5			beq 	_I32NoRecurse 				; if so, don't recurse.
.33b1	98		tya				tya 								; put base into A
.33b2	20 9e 33	jsr $339e			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.33b5					_I32NoRecurse:
.33b5	68		pla				pla 								; get the remainder back
.33b6	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.33b8	90 02		bcc $33bc			bcc 	_I32NotHex
.33ba	69 06		adc #$06			adc 	#7-1
.33bc					_I32NotHex:
.33bc	18		clc				clc 								; make it ASCII
.33bd	69 30		adc #$30			adc 	#48
.33bf	20 c3 33	jsr $33c3			jsr 	MI32WriteCharacter 			; write the character out
.33c2	60		rts				rts 								; and exit.
.33c3					MI32WriteCharacter:
.33c3	ee db 0c	inc $0cdb			inc 	MCharCount 					; bump count (space for leading count)
.33c6	ac db 0c	ldy $0cdb			ldy 	MCharCount 					; get position
.33c9	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.33cb	c8		iny				iny
.33cc	a9 00		lda #$00			lda 	#0
.33ce	91 2a		sta ($2a),y			sta 	(temp0),y
.33d0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdc					MSeed32:	.fill 	4							; random number seed.
.33d1					MInt32Absolute:
.33d1	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.33d3	30 01		bmi $33d6			bmi 	MInt32Negate
.33d5	60		rts				rts
.33d6					MInt32Negate:
.33d6	38		sec				sec 								; subtract from zero.
.33d7	a9 00		lda #$00			lda 	#0
.33d9	f5 50		sbc $50,x			sbc 	esInt0,x
.33db	95 50		sta $50,x			sta 	esInt0,x
.33dd	a9 00		lda #$00			lda 	#0
.33df	f5 58		sbc $58,x			sbc 	esInt1,x
.33e1	95 58		sta $58,x			sta 	esInt1,x
.33e3	a9 00		lda #$00			lda 	#0
.33e5	f5 60		sbc $60,x			sbc 	esInt2,x
.33e7	95 60		sta $60,x			sta 	esInt2,x
.33e9	a9 00		lda #$00			lda 	#0
.33eb	f5 68		sbc $68,x			sbc 	esInt3,x
.33ed	95 68		sta $68,x			sta 	esInt3,x
.33ef	60		rts				rts
.33f0					MInt32Not:
.33f0	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.33f2	49 ff		eor #$ff			eor 	#$FF
.33f4	95 50		sta $50,x			sta 	esInt0,x
.33f6	b5 58		lda $58,x			lda 	esInt1,x
.33f8	49 ff		eor #$ff			eor 	#$FF
.33fa	95 58		sta $58,x			sta 	esInt1,x
.33fc	b5 60		lda $60,x			lda 	esInt2,x
.33fe	49 ff		eor #$ff			eor 	#$FF
.3400	95 60		sta $60,x			sta 	esInt2,x
.3402	b5 68		lda $68,x			lda 	esInt3,x
.3404	49 ff		eor #$ff			eor 	#$FF
.3406	95 68		sta $68,x			sta 	esInt3,x
.3408	60		rts				rts
.3409					MInt32Sign:
.3409	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.340b	30 0b		bmi $3418			bmi 	MInt32True 					; if set return -1 (true)
.340d	20 43 34	jsr $3443			jsr 	MInt32Zero 					; is it zero ?
.3410	f0 0a		beq $341c			beq 	MInt32False 				; if zero return 0 (false)
.3412	20 1c 34	jsr $341c			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3415	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.3417	60		rts				rts
.3418					MInt32True:
.3418	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.341a	d0 02		bne $341e			bne 	MInt32WriteAll
.341c					MInt32False:
.341c	a9 00		lda #$00			lda 	#0
.341e					MInt32WriteAll:
.341e	95 50		sta $50,x			sta 	esInt0,x
.3420					MInt32Write123:
.3420	95 58		sta $58,x			sta 	esInt1,x
.3422	95 60		sta $60,x			sta 	esInt2,x
.3424	95 68		sta $68,x			sta 	esInt3,x
.3426	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3428	95 48		sta $48,x			sta 	esType,x
.342a	60		rts				rts
.342b					MInt32Set8Bit:
.342b	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.342d	a9 00		lda #$00			lda 	#0 							; a value 0-255
.342f	f0 ef		beq $3420			beq		MInt32Write123
.3431					MInt32ShiftLeft:
.3431	16 50		asl $50,x			asl 	esInt0,x
.3433	36 58		rol $58,x			rol	 	esInt1,x
.3435	36 60		rol $60,x			rol	 	esInt2,x
.3437	36 68		rol $68,x			rol	 	esInt3,x
.3439	60		rts				rts
.343a					MInt32ShiftRight:
.343a	56 68		lsr $68,x			lsr 	esInt3,x
.343c	76 60		ror $60,x			ror 	esInt2,x
.343e	76 58		ror $58,x			ror 	esInt1,x
.3440	76 50		ror $50,x			ror 	esInt0,x
.3442	60		rts				rts
.3443					MInt32Zero:
.3443	b5 50		lda $50,x			lda 	esInt0,x
.3445	15 58		ora $58,x			ora 	esInt1,x
.3447	15 60		ora $60,x			ora 	esInt2,x
.3449	15 68		ora $68,x			ora 	esInt3,x
.344b	60		rts				rts
.344c					MInt32Random:
.344c	98		tya				tya
.344d	48		pha				pha
.344e	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3450	ad dc 0c	lda $0cdc			lda 	MSeed32+0 					; check the seed isn't zero
.3453	d0 03		bne $3458			bne 	_Random1
.3455	a8		tay				tay 								; if so do it 256 times
.3456	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3458					_Random1:
.3458	0a		asl a				asl 	a
.3459	2e dd 0c	rol $0cdd			rol 	MSeed32+1
.345c	2e de 0c	rol $0cde			rol 	MSeed32+2
.345f	2e df 0c	rol $0cdf			rol 	MSeed32+3
.3462	90 02		bcc $3466			bcc 	_Random2
.3464	49 c5		eor #$c5			eor 	#$C5
.3466					_Random2:
.3466	88		dey				dey
.3467	d0 ef		bne $3458			bne 	_Random1
.3469	8d dc 0c	sta $0cdc			sta 	MSeed32+0 					; copy the seed in.
.346c	95 50		sta $50,x			sta 	esInt0,x
.346e	ad dd 0c	lda $0cdd			lda 	MSeed32+1
.3471	95 58		sta $58,x			sta 	esInt1,x
.3473	ad de 0c	lda $0cde			lda 	MSeed32+2
.3476	95 60		sta $60,x			sta 	esInt2,x
.3478	ad df 0c	lda $0cdf			lda 	MSeed32+3
.347b	95 68		sta $68,x			sta 	esInt3,x
.347d	68		pla				pla
.347e	a8		tay				tay
.347f	a9 00		lda #$00			lda 	#0
.3481	95 48		sta $48,x			sta 	esType,x
.3483	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3484					CheckToken:
.3484	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3486	d0 02		bne $348a			bne 	_CTError
.3488	c8		iny				iny
.3489	60		rts				rts
.348a					_CTError:
.348a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.348c	20 18 15	jsr $1518		jsr	errorHandler
.348f					CheckRightParen:
.348f	b1 28		lda ($28),y			lda 	(codePtr),y
.3491	c8		iny				iny
.3492	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3494	d0 01		bne $3497			bne 	_CRPError
.3496	60		rts				rts
.3497					_CRPError:
.3497	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3499	20 18 15	jsr $1518		jsr	errorHandler
.349c					CheckComma:
.349c	b1 28		lda ($28),y			lda 	(codePtr),y
.349e	c8		iny				iny
.349f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.34a1	d0 01		bne $34a4			bne 	_CCError
.34a3	60		rts				rts
.34a4					_CCError:
.34a4	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.34a6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.34a9					RSReset:
.34a9	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.34ab	85 37		sta $37				sta 	rsPointer
.34ad	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.34af	85 38		sta $38				sta 	1+(rsPointer)
.34b1	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.34b3	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.34b6	60		rts				rts
.34b7					RSClaim:
.34b7	84 32		sty $32				sty 	tempShort 					; preserve Y
.34b9	48		pha				pha 								; save marker on stack.
.34ba	8a		txa				txa 								; get bytes required.
.34bb	38		sec				sec
.34bc	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.34be	65 37		adc $37				adc 	rsPointer
.34c0	85 37		sta $37				sta 	rsPointer
.34c2	a5 38		lda $38				lda 	rsPointer+1
.34c4	69 ff		adc #$ff			adc 	#$FF
.34c6	85 38		sta $38				sta 	rsPointer+1
.34c8	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.34ca	90 08		bcc $34d4			bcc 	_RSCOverflow
.34cc	68		pla				pla 								; get marker back
.34cd	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.34cf	91 37		sta ($37),y			sta 	(rsPointer),y
.34d1	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.34d3	60		rts				rts
.34d4					_RSCOverflow:
.34d4	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.34d6	20 18 15	jsr $1518		jsr	errorHandler
.34d9					RSFree:
.34d9	18		clc				clc
.34da	65 37		adc $37				adc 	rsPointer
.34dc	85 37		sta $37				sta 	rsPointer
.34de	90 02		bcc $34e2			bcc 	_RSFExit
.34e0	e6 38		inc $38				inc 	rsPointer+1
.34e2					_RSFExit:
.34e2	60		rts				rts
.34e3					RSSavePosition:
.34e3	84 32		sty $32				sty 	tempShort 					; save Y position
.34e5	a8		tay				tay 								; this is where we write it.
.34e6	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.34e8	91 37		sta ($37),y			sta 	(rsPointer),y
.34ea	c8		iny				iny
.34eb	a5 29		lda $29				lda 	codePtr+1
.34ed	91 37		sta ($37),y			sta 	(rsPointer),y
.34ef	c8		iny				iny
.34f0	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.34f2	91 37		sta ($37),y			sta 	(rsPointer),y
.34f4	a8		tay				tay 								; fix Y back again to original value
.34f5	60		rts				rts
.34f6					RSLoadPosition:
.34f6	a8		tay				tay
.34f7	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.34f9	85 28		sta $28				sta 	codePtr
.34fb	c8		iny				iny
.34fc	b1 37		lda ($37),y			lda 	(rsPointer),y
.34fe	85 29		sta $29				sta 	codePtr+1
.3500	c8		iny				iny
.3501	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3503	a8		tay				tay 								; to Y
.3504	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3505					WarmStart:
.3505	a2 04		ldx #$04		ldx	#4
.3507	20 70 1e	jsr $1e70		jsr	interactionHandler

;******  Return to file: main/main.asm

.350a					mainHandler:
.350a	7c 0d 35	jmp ($350d,x)			jmp 	(mainVectors,x)
.350d					mainVectors:
>350d	29 35					.word _DummyControlHandler ; index 0
>350f	9c 34					.word CheckComma           ; index 2
>3511	8f 34					.word CheckRightParen      ; index 4
>3513	78 26					.word XCommandClear        ; index 6
>3515	9f 2d					.word LinkEvaluate         ; index 8
>3517	ab 2d					.word LinkEvaluateInteger  ; index 10
>3519	b7 2d					.word LinkEvaluateSmallInt ; index 12
>351b	b1 2d					.word LinkEvaluateString   ; index 14
>351d	a5 2d					.word LinkEvaluateTerm     ; index 16
>351f	6b 33					.word MLInt32ToString      ; index 18
>3521	07 28					.word Command_XNew         ; index 20
>3523	15 28					.word XCommand_Run         ; index 22
>3525	21 28					.word Command_RunFrom      ; index 24
>3527	83 32					.word LinkInt32FromString  ; index 26
.3529					_DummyControlHandler:
.3529	60		rts			rts

;******  Return to file: basic.asm

.352a					section_end_main:
.352a					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.352a					StringChrs:
.352a	aa		tax				tax 								; set up stack
.352b	a9 02		lda #$02			lda 	#2
.352d	20 ed 35	jsr $35ed			jsr 	AllocateSoftString
.3530	98		tya				tya
.3531	20 13 36	jsr $3613			jsr 	WriteSoftString
.3534					StringUpdate:
.3534	20 42 35	jsr $3542			jsr 	ReturnSoftString
.3537	8a		txa				txa
.3538	60		rts				rts
.3539					StringNull:
.3539	aa		tax				tax
.353a	a9 01		lda #$01			lda 	#1
.353c	20 ed 35	jsr $35ed			jsr 	AllocateSoftString
.353f	4c 34 35	jmp $3534			jmp 	StringUpdate
.3542					ReturnSoftString:
.3542	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3544	95 50		sta $50,x			sta 	esInt0,x
.3546	a5 3a		lda $3a				lda 	softMemAlloc+1
.3548	95 58		sta $58,x			sta 	esInt1,x
.354a	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.354c	95 60		sta $60,x			sta 	esInt2,x
.354e	95 68		sta $68,x			sta 	esInt3,x
.3550	a9 40		lda #$40			lda 	#$40 						; type string.
.3552	95 48		sta $48,x			sta 	esType,x
.3554	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3555					STRCompare:
.3555	48		pha				pha 								; save A
.3556	aa		tax				tax 								; put stack pos in X
.3557	98		tya				tya
.3558	48		pha				pha
.3559	20 8d 35	jsr $358d			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.355c	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.355e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3560	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3562	90 02		bcc $3566			bcc 	_SCNotSmaller
.3564	b1 2c		lda ($2c),y			lda 	(temp1),y
.3566					_SCNotSmaller:
.3566	aa		tax				tax 								; put that in X. We compare this many chars first.
.3567					_SCCompareLoop:
.3567	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3569	f0 0c		beq $3577			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.356b	ca		dex				dex 								; decrement chars to compare.
.356c	c8		iny				iny 								; move to next character
.356d	38		sec				sec 								; calculate s1[y]-s2[y]
.356e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3570	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3572	d0 0a		bne $357e			bne 	_SCReturnResult 			; if different return sign of A
.3574	4c 67 35	jmp $3567			jmp 	_SCCompareLoop
.3577					_SCSameToEndShortest
.3577	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3579	38		sec				sec
.357a	b1 2a		lda ($2a),y			lda 	(temp0),y
.357c	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.357e					_SCReturnResult:
.357e	08		php				php 								; set return to zero preserving PSW.
.357f	a2 00		ldx #$00			ldx 	#0
.3581	28		plp				plp
.3582	f0 05		beq $3589			beq 	_SCExit 					; two values equal, then exit
.3584	ca		dex				dex 								; X = $FF
.3585	90 02		bcc $3589			bcc 	_SCExit 					; if 1st < 2nd then -1
.3587	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3589					_SCExit:
.3589	68		pla				pla
.358a	a8		tay				tay
.358b	68		pla				pla
.358c	60		rts				rts
.358d					CopyStringPair:
.358d	b5 51		lda $51,x			lda 	esInt0+1,x
.358f	85 2c		sta $2c				sta 	temp1
.3591	b5 59		lda $59,x			lda 	esInt1+1,x
.3593	85 2d		sta $2d				sta 	temp1+1
.3595					CopyStringTop:
.3595	b5 50		lda $50,x			lda 	esInt0,x
.3597	85 2a		sta $2a				sta 	temp0
.3599	b5 58		lda $58,x			lda 	esInt1,x
.359b	85 2b		sta $2b				sta 	temp0+1
.359d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.359e					StringConcat:
.359e	aa		tax				tax									; stack pos in X
.359f	98		tya				tya
.35a0	48		pha				pha
.35a1	20 8d 35	jsr $358d			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.35a4	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.35a5	a0 00		ldy #$00			ldy 	#0
.35a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.35a9	71 2c		adc ($2c),y			adc 	(temp1),y
.35ab	b0 1c		bcs $35c9			bcs 	_SCError 					; just too many characters here.
.35ad	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.35af	b0 18		bcs $35c9			bcs 	_SCError
.35b1	20 ed 35	jsr $35ed			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.35b4	20 e4 35	jsr $35e4			jsr 	CopySoftToStack 			; copy that to the stack.
.35b7	20 ce 35	jsr $35ce			jsr 	SCCopyTemp0 				; copy temp0
.35ba	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.35bc	85 2a		sta $2a				sta 	temp0
.35be	a5 2d		lda $2d				lda 	temp1+1
.35c0	85 2b		sta $2b				sta 	temp0+1
.35c2	20 ce 35	jsr $35ce			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.35c5	68		pla				pla
.35c6	a8		tay				tay
.35c7	8a		txa				txa 								; and A
.35c8	60		rts				rts
.35c9					_SCError:
.35c9	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.35cb	20 18 15	jsr $1518		jsr	errorHandler
.35ce					SCCopyTemp0:
.35ce	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.35d0	b1 2a		lda ($2a),y			lda 	(temp0),y
.35d2	85 2e		sta $2e				sta 	temp2
.35d4					_SCCopyLoop:
.35d4	a5 2e		lda $2e				lda 	temp2 						; done the lot
.35d6	f0 0b		beq $35e3			beq 	_SCCopyExit
.35d8	c6 2e		dec $2e				dec 	temp2
.35da	c8		iny				iny 								; get next char
.35db	b1 2a		lda ($2a),y			lda 	(temp0),y
.35dd	20 13 36	jsr $3613			jsr 	WriteSoftString 			; write to soft string.
.35e0	4c d4 35	jmp $35d4			jmp 	_SCCopyLoop
.35e3					_SCCopyExit:
.35e3	60		rts				rts
.35e4					CopySoftToStack:
.35e4	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.35e6	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.35e8	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.35ea	95 58		sta $58,x			sta 	esInt1,x
.35ec	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.35ed					AllocateSoftString:
.35ed	85 32		sta $32				sta 	tempShort 					; save count
.35ef	98		tya				tya
.35f0	48		pha				pha
.35f1	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.35f3	d0 09		bne $35fe			bne 	_ASSDone
.35f5	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.35f7	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.35f9	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.35fb	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.35fc	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.35fe					_ASSDone:
.35fe	38		sec				sec 								; allocate downwards enough memory
.35ff	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3601	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3603	85 39		sta $39				sta 	softMemAlloc
.3605	a5 3a		lda $3a				lda 	softMemAlloc+1
.3607	e9 00		sbc #$00			sbc 	#0
.3609	85 3a		sta $3a				sta 	softMemAlloc+1
.360b	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.360d	a8		tay				tay
.360e	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3610	68		pla				pla
.3611	a8		tay				tay
.3612	60		rts				rts
.3613					WriteSoftString:
.3613	84 32		sty $32				sty 	tempShort 					; save Y
.3615	48		pha				pha 								; save character on stack
.3616	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3618	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.361a	18		clc				clc
.361b	69 01		adc #$01			adc 	#1
.361d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.361f	a8		tay				tay 								; offset in Y
.3620	68		pla				pla 								; get char and write.
.3621	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3623	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3625	60		rts				rts
.3626					StrClone:
.3626	aa		tax				tax 								; set up stack.
.3627	98		tya				tya
.3628	48		pha				pha
.3629	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.362b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.362d	18		clc				clc
.362e	69 01		adc #$01			adc 	#1
.3630	20 ed 35	jsr $35ed			jsr 	AllocateSoftString 			; allocate soft memory
.3633	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3635	95 50		sta $50,x			sta 	esInt0,x
.3637	a5 3a		lda $3a				lda 	softMemAlloc+1
.3639	95 58		sta $58,x			sta 	esInt1,x
.363b	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.363d	95 60		sta $60,x			sta 	esInt2,x
.363f	95 68		sta $68,x			sta 	esInt3,x
.3641	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3643	95 48		sta $48,x			sta 	esType,x
.3645	20 ce 35	jsr $35ce			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3648	68		pla				pla
.3649	a8		tay				tay
.364a	8a		txa				txa
.364b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.364c					CaseString:
.364c	48		pha				pha 								; save A and copy to X
.364d	aa		tax				tax
.364e	98		tya				tya
.364f	48		pha				pha
.3650	20 95 35	jsr $3595			jsr 	CopyStringTop 				; target string -> temp0
.3653	a0 00		ldy #$00			ldy 	#0
.3655	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3657	18		clc				clc
.3658	69 01		adc #$01			adc 	#1 							; one more for length byte
.365a	20 ed 35	jsr $35ed			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.365d	20 e4 35	jsr $35e4			jsr 	CopySoftToStack 			; copy that to the stack.
.3660	a0 00		ldy #$00			ldy 	#0
.3662	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3664	aa		tax				tax
.3665					_CSCopy:
.3665	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3667	f0 24		beq $368d			beq 	_CSExit
.3669	ca		dex				dex
.366a	c8		iny				iny
.366b	68		pla				pla 								; check direction
.366c	48		pha				pha
.366d	f0 0c		beq $367b			beq 	_CSUpper
.366f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3671	c9 41		cmp #$41			cmp 	#"A"
.3673	90 12		bcc $3687			bcc 	_CSWrite
.3675	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3677	b0 0e		bcs $3687			bcs 	_CSWrite
.3679	90 0a		bcc $3685			bcc 	_CSFlipWrite
.367b					_CSUpper:
.367b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.367d	c9 61		cmp #$61			cmp 	#"a"
.367f	90 06		bcc $3687			bcc 	_CSWrite
.3681	c9 7b		cmp #$7b			cmp 	#"z"+1
.3683	b0 02		bcs $3687			bcs 	_CSWrite
.3685					_CSFlipWrite:
.3685	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3687					_CSWrite:
.3687	20 13 36	jsr $3613			jsr 	WriteSoftString 			; add to soft string.
.368a	4c 65 36	jmp $3665			jmp 	_CSCopy
.368d					_CSExit:
.368d	68		pla				pla
.368e	a8		tay				tay
.368f	68		pla				pla
.3690	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3691					StringSubstring:
.3691	48		pha				pha
.3692	aa		tax				tax 								; access stack.
.3693	98		tya				tya
.3694	48		pha				pha
.3695	20 95 35	jsr $3595			jsr 	CopyStringTop 				; point temp0 to the string.
.3698	a0 00		ldy #$00			ldy 	#0 							; get length.
.369a	b1 2a		lda ($2a),y			lda 	(temp0),Y
.369c	85 2c		sta $2c				sta 	temp1
.369e	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.36a0	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.36a2	f0 02		beq $36a6			beq 	_SSBOkay
.36a4	b0 2a		bcs $36d0			bcs 	_SSBReturnNull
.36a6					_SSBOkay:
.36a6	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.36a8	18		clc				clc
.36a9	69 01		adc #$01			adc 	#1
.36ab	38		sec				sec
.36ac	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.36ae	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.36b0	90 02		bcc $36b4			bcc		_SSBTrunc
.36b2	b5 52		lda $52,x			lda 	esInt0+2,x
.36b4					_SSBTrunc:
.36b4	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.36b6	18		clc				clc
.36b7	69 01		adc #$01			adc 	#1 							; add 1
.36b9	20 ed 35	jsr $35ed			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.36bc	20 e4 35	jsr $35e4			jsr 	CopySoftToStack 			; copy that to the stack.
.36bf	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.36c1					_SSBCopyLoop:
.36c1	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.36c3	f0 0e		beq $36d3			beq 	_SSBExit
.36c5	c6 2d		dec $2d				dec 	temp1+1
.36c7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.36c9	20 13 36	jsr $3613			jsr 	WriteSoftString
.36cc	c8		iny				iny
.36cd	4c c1 36	jmp $36c1			jmp 	_SSBCopyLoop
.36d0					_SSBReturnNull:
.36d0	20 d7 36	jsr $36d7			jsr 	ReturnNull
.36d3					_SSBExit:
.36d3	68		pla				pla
.36d4	a8		tay				tay
.36d5	68		pla				pla
.36d6	60		rts				rts
.36d7					ReturnNull:
.36d7	a9 00		lda #$00			lda 	#0 							; clear null string
.36d9	8d ce 0a	sta $0ace			sta 	NullString
.36dc	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.36de	95 50		sta $50,x			sta 	esInt0,x
.36e0	a9 0a		lda #$0a			lda 	#NullString >> 8
.36e2	95 58		sta $58,x			sta 	esInt1,x
.36e4	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce0					srcStrLen:
>0ce0							.fill 	1
.36e5					StringWrite:
.36e5	aa		tax				tax
.36e6	48		pha				pha
.36e7	98		tya				tya
.36e8	48		pha				pha
.36e9	20 10 37	jsr $3710			jsr 	CheckOverwriteCurrent
.36ec	b0 0d		bcs $36fb			bcs		_SWCopyCurrent
.36ee	20 4e 37	jsr $374e			jsr 	RequiresConcretion
.36f1	90 0e		bcc $3701			bcc 	_SWWriteReference
.36f3	20 b1 37	jsr $37b1			jsr 	CheckSpecialConcretion
.36f6	b0 09		bcs $3701			bcs 	_SWWriteReference
.36f8	20 62 37	jsr $3762			jsr 	AllocateHardMemory
.36fb					_SWCopyCurrent:
.36fb	20 95 37	jsr $3795			jsr 	CopyStringToHardMemory
.36fe	4c 0c 37	jmp $370c			jmp 	_SWExit
.3701					_SWWriteReference
.3701	a0 00		ldy #$00			ldy 	#0
.3703	a5 2a		lda $2a				lda 	temp0
.3705	91 2c		sta ($2c),y			sta 	(temp1),y
.3707	c8		iny				iny
.3708	a5 2b		lda $2b				lda 	temp0+1
.370a	91 2c		sta ($2c),y			sta 	(temp1),y
.370c					_SWExit:
.370c	68		pla				pla
.370d	a8		tay				tay
.370e	68		pla				pla
.370f	60		rts				rts
.3710					CheckOverwriteCurrent:
.3710	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3712	b5 59		lda $59,x			lda 	esInt1+1,x
.3714	85 2b		sta $2b				sta 	temp0+1
.3716	b5 51		lda $51,x			lda 	esInt0+1,x
.3718	85 2a		sta $2a				sta 	temp0
.371a	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.371c	8d e0 0c	sta $0ce0			sta 	srcStrLen
.371f	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3721	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3723	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.3725	85 2d		sta $2d				sta 	temp1+1
.3727	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3729	b1 2c		lda ($2c),y			lda 	(temp1),y
.372b	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.372d	90 1b		bcc $374a			bcc 	_COCFail 				; in hard memory.
.372f	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3731	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3733	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3735	85 2e		sta $2e				sta 	temp2
.3737	c8		iny				iny
.3738	b1 2c		lda ($2c),y			lda 	(temp1),y
.373a	e9 00		sbc #$00			sbc 	#0
.373c	85 2f		sta $2f				sta 	temp2+1
.373e	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3740	b1 2e		lda ($2e),y			lda 	(temp2),y
.3742	38		sec				sec  							; maximum character capacity.
.3743	e9 02		sbc #$02			sbc 	#2
.3745	cd e0 0c	cmp $0ce0			cmp 	srcStrLen 				; if >= the required length
.3748	b0 02		bcs $374c			bcs 	_COCCanReuse
.374a					_COCFail:
.374a	18		clc				clc
.374b	60		rts				rts
.374c					_COCCanReuse:
.374c	38		sec				sec
.374d	60		rts				rts
.374e					RequiresConcretion:
.374e	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3750	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3752	b0 0a		bcs $375e			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3754	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3756	f0 08		beq $3760			beq 	_RCFail 				; if not, this cannot be soft memory.
.3758	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.375a	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.375c	90 02		bcc $3760			bcc 	_RCFail 				; so concreting
.375e					_RCSucceed:
.375e	38		sec				sec
.375f	60		rts				rts
.3760					_RCFail:
.3760	18		clc				clc
.3761	60		rts				rts
.3762					AllocateHardMemory:
.3762	98		tya				tya
.3763	48		pha				pha
.3764	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; characters in string
.3767	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3769	b0 04		bcs $376f			bcs 	_AHMSetMax 				; max out that amount.
.376b	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.376d	90 02		bcc $3771			bcc 	_AHMIsOkay
.376f					_AHMSetMax:
.376f	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3771					_AHMIsOkay:
.3771	48		pha				pha	 							; save size to be allocated
.3772	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3774	38		sec				sec  							; and copy result to TOS as target address.
.3775	65 33		adc $33				adc 	highMemory
.3777	85 33		sta $33				sta 	highMemory
.3779	a5 34		lda $34				lda 	highMemory+1
.377b	69 ff		adc #$ff			adc 	#$FF
.377d	85 34		sta $34				sta 	highMemory+1
.377f	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3781	68		pla				pla 							; get the total size of the storage block
.3782	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3784	18		clc				clc
.3785	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3787	69 01		adc #$01			adc 	#1
.3789	91 2c		sta ($2c),y			sta 	(temp1),y
.378b	a5 34		lda $34				lda 	highMemory+1
.378d	69 00		adc #$00			adc 	#0
.378f	c8		iny				iny
.3790	91 2c		sta ($2c),y			sta 	(temp1),y
.3792	68		pla				pla
.3793	a8		tay				tay
.3794	60		rts				rts
.3795					CopyStringToHardMemory:
.3795	98		tya				tya
.3796	48		pha				pha
.3797	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3799	b1 2c		lda ($2c),y			lda 	(temp1),y
.379b	85 2e		sta $2e				sta 	temp2
.379d	c8		iny				iny
.379e	b1 2c		lda ($2c),y			lda 	(temp1),y
.37a0	85 2f		sta $2f				sta 	temp2+1
.37a2	ac e0 0c	ldy $0ce0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.37a5					_CSTHMLoop:
.37a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.37a7	91 2e		sta ($2e),y			sta 	(temp2),y
.37a9	88		dey				dey
.37aa	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.37ac	d0 f7		bne $37a5			bne 	_CSTHMLoop
.37ae	68		pla				pla
.37af	a8		tay				tay
.37b0	60		rts				rts
.37b1					CheckSpecialConcretion:
.37b1	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; check string is null e.g. length = 0
.37b4	f0 02		beq $37b8			beq 	_CSCNullString
.37b6	18		clc				clc
.37b7	60		rts				rts
.37b8					_CSCNullString:
.37b8	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.37ba	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.37bd	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.37bf	85 2a		sta $2a				sta 	temp0
.37c1	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.37c3	85 2b		sta $2b				sta 	1+(temp0)
.37c5	38		sec				sec
.37c6	60		rts				rts

;******  Return to file: string/string.asm

.37c7					stringHandler:
.37c7	7c ca 37	jmp ($37ca,x)			jmp 	(stringVectors,x)
.37ca					stringVectors:
>37ca	dc 37					.word _DummyControlHandler ; index 0
>37cc	2a 35					.word StringChrs           ; index 2
>37ce	26 36					.word StrClone             ; index 4
>37d0	9e 35					.word StringConcat         ; index 6
>37d2	39 35					.word StringNull           ; index 8
>37d4	55 35					.word STRCompare           ; index 10
>37d6	4c 36					.word CaseString           ; index 12
>37d8	91 36					.word StringSubstring      ; index 14
>37da	e5 36					.word StringWrite          ; index 16
.37dc					_DummyControlHandler:
.37dc	60		rts			rts

;******  Return to file: basic.asm

.37dd					section_end_string:
.37dd					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce1					deTokeniseVector:
>0ce1							.fill 	2
.0ce3					lastCharacterClass:
>0ce3							.fill 	1
.0ce4					indent:
>0ce4							.fill 	1
.37dd					ListLine:
.37dd	48		pha				pha								; enter here to list to console. sets the output vector
.37de	a9 15		lda #$15			lda 	#(deTokenPrint) & $FF
.37e0	8d e1 0c	sta $0ce1			sta 	deTokeniseVector
.37e3	a9 39		lda #$39			lda 	#(deTokenPrint) >> 8
.37e5	8d e2 0c	sta $0ce2			sta 	1+(deTokeniseVector)
.37e8	68		pla				pla
.37e9					Detokenise:
.37e9	18		clc				clc 							; space required for line number.
.37ea	69 06		adc #$06			adc 	#6
.37ec	8d e4 0c	sta $0ce4			sta 	indent
.37ef	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.37f1	8d e3 0c	sta $0ce3			sta 	lastCharacterClass
.37f4	a2 02		ldx #$02			ldx 	#2
.37f6	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.37f8	95 60		sta $60,x			sta 	esInt2,x
.37fa	95 68		sta $68,x			sta 	esInt3,x
.37fc	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.37fe	b1 28		lda ($28),y			lda 	(codePtr),y
.3800	95 50		sta $50,x			sta 	esInt0,x
.3802	c8		iny				iny
.3803	b1 28		lda ($28),y			lda 	(codePtr),y
.3805	95 58		sta $58,x			sta 	esInt1,x
.3807	a9 84		lda #$84			lda 	#LTYLineNumber
.3809	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.380c	a9 0a		lda #$0a			lda 	#10 					; base 10
.380e	20 b4 38	jsr $38b4			jsr 	DTPrintInteger 			; print as integer.
.3811	a0 00		ldy #$00			ldy 	#0 						; get length
.3813	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3815	aa		tax				tax
.3816					_DTPadOut:
.3816	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3818	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.381b	e8		inx				inx
.381c	ec e4 0c	cpx $0ce4			cpx 	indent
.381f	d0 f5		bne $3816			bne 	_DTPadOut
.3821	a0 03		ldy #$03			ldy 	#3 						; start position.
.3823					_DTListLoop:
.3823	b1 28		lda ($28),y			lda 	(codePtr),y
.3825	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3827	f0 5e		beq $3887			beq 	_DTIsString
.3829	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.382b	f0 56		beq $3883			beq 	_DTIsFloat
.382d	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.382f	f0 16		beq $3847			beq 	_DTHexConstant
.3831	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3833	d0 06		bne $383b			bne 	_DTNotEnd
.3835	a9 ff		lda #$ff			lda 	#255 					; print CR
.3837	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.383a	60		rts				rts
.383b					_DTNotEnd:
.383b	c9 00		cmp #$00			cmp 	#0
.383d	30 38		bmi $3877			bmi 	_DTIsToken
.383f	c9 40		cmp #$40			cmp 	#$40
.3841	90 3a		bcc $387d			bcc 	_DTIsIdentifier
.3843	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3845	d0 0d		bne $3854			bne 	_DTConstant
.3847					_DTHexConstant:
.3847	a9 26		lda #$26			lda 	#"&"
.3849	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.384c	c8		iny				iny
.384d	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.384f	20 31 39	jsr $3931			jsr 	DTSwitchMode
.3852	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3854					_DTConstant:
.3854	48		pha				pha
.3855	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3857	20 31 39	jsr $3931			jsr 	DTSwitchMode
.385a	a9 86		lda #$86			lda 	#LTYConstant
.385c	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.385f	a2 02		ldx #$02			ldx 	#2 						; get its value
.3861	8a		txa				txa
.3862	a2 10		ldx #$10		ldx	#16
.3864	20 0a 35	jsr $350a		jsr	mainHandler
.3867	aa		tax				tax
.3868	68		pla				pla 							; get base back
.3869	85 32		sta $32				sta 	tempShort
.386b	98		tya				tya
.386c	48		pha				pha
.386d	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.386f	20 b4 38	jsr $38b4			jsr 	DTPrintInteger
.3872	68		pla				pla
.3873	a8		tay				tay
.3874	4c 23 38	jmp $3823			jmp 	_DTListLoop
.3877					_DTIsToken:
.3877	20 8a 39	jsr $398a			jsr 	DTDecodeToken
.387a	4c 23 38	jmp $3823			jmp 	_DTListLoop
.387d					_DTIsIdentifier:
.387d	20 43 39	jsr $3943			jsr 	DTIdentifier
.3880	4c 23 38	jmp $3823			jmp 	_DTListLoop
.3883					_DTIsFloat:
>3883	db						.byte 	$DB
.3884	4c 83 38	jmp $3883			jmp 	_DTIsFloat
.3887					_DTIsString:
.3887	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3889	20 31 39	jsr $3931			jsr 	DTSwitchMode
.388c	a9 81		lda #$81			lda 	#LTYString
.388e	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.3891	a9 22		lda #$22			lda 	#'"'						; open quote
.3893	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.3896	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3898	8a		txa				txa
.3899	a2 10		ldx #$10		ldx	#16
.389b	20 0a 35	jsr $350a		jsr	mainHandler
.389e	aa		tax				tax
.389f	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.38a1	85 2a		sta $2a				sta 	temp0
.38a3	b5 58		lda $58,x			lda 	esInt1,x
.38a5	85 2b		sta $2b				sta 	temp0+1
.38a7	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.38a9	20 c6 38	jsr $38c6			jsr 	DTPrintLengthPrefix
.38ac	a9 22		lda #$22			lda 	#'"'
.38ae	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.38b1	4c 23 38	jmp $3823			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce5					tPrintCount:
>0ce5							.fill 	1
.38b4					DTPrintInteger:
.38b4	48		pha				pha									; save base
.38b5	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.38b7	85 2a		sta $2a				sta 	temp0
.38b9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.38bb	85 2b		sta $2b				sta 	1+(temp0)
.38bd	68		pla				pla
.38be	a8		tay				tay
.38bf	8a		txa				txa
.38c0	a2 12		ldx #$12		ldx	#18
.38c2	20 0a 35	jsr $350a		jsr	mainHandler
.38c5	aa		tax				tax 								; then drop through here.
.38c6					DTPrintLengthPrefix:
.38c6	aa		tax				tax 								; A = 0 = don't case convert.
.38c7	98		tya				tya
.38c8	48		pha				pha
.38c9	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.38cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.38cd	8d e5 0c	sta $0ce5			sta 	tPrintCount
.38d0	f0 1b		beq $38ed			beq 	_DTPLPExit 					; empty string
.38d2					_DTPLPLoop:
.38d2	c8		iny				iny 								; get next.
.38d3	b1 2a		lda ($2a),y			lda 	(temp0),y
.38d5	29 7f		and #$7f			and 	#$7F
.38d7	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.38d9	f0 0a		beq $38e5			beq 	_DTPLPNoCase
.38db	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.38dd	90 06		bcc $38e5			bcc 	_DTPLPNoCase
.38df	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38e1	b0 02		bcs $38e5			bcs 	_DTPLPNoCase
.38e3	49 20		eor #$20			eor 	#"A"^"a"
.38e5					_DTPLPNoCase
.38e5	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter 		; call handler
.38e8	ce e5 0c	dec $0ce5			dec 	tPrintCount 				; do all the characters
.38eb	d0 e5		bne $38d2			bne 	_DTPLPLoop
.38ed					_DTPLPExit:
.38ed	68		pla				pla
.38ee	a8		tay				tay
.38ef	60		rts				rts
.38f0					ListOutputCharacter:
.38f0	85 32		sta $32				sta 	tempShort
.38f2	48		pha				pha
.38f3	8a		txa				txa
.38f4	48		pha				pha
.38f5	98		tya				tya
.38f6	48		pha				pha
.38f7	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.38f9	c9 20		cmp #$20			cmp 	#32
.38fb	b0 0c		bcs $3909			bcs		_LOCHiBit
.38fd	09 40		ora #$40			ora 	#64 						; conversion
.38ff	c9 40		cmp #$40			cmp 	#64							; make l/c
.3901	f0 06		beq $3909			beq 	_LOCHiBit
.3903	c9 5b		cmp #$5b			cmp 	#65+26
.3905	b0 02		bcs $3909			bcs 	_LOCHiBit
.3907	69 20		adc #$20			adc 	#32
.3909					_LOCHiBit:
.3909	20 12 39	jsr $3912			jsr 	_LOCCallVector				; call o/p handler routine
.390c	68		pla				pla
.390d	a8		tay				tay
.390e	68		pla				pla
.390f	aa		tax				tax
.3910	68		pla				pla
.3911					_LOCExit:
.3911	60		rts				rts
.3912					_LOCCallVector:
.3912	6c e1 0c	jmp ($0ce1)			jmp 	(deTokeniseVector)
.3915					deTokenPrint:
.3915	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3917	30 06		bmi $391f			bmi 	_dtpInk
.3919	a2 16		ldx #$16		ldx	#22
.391b	20 f6 14	jsr $14f6		jsr	deviceHandler
.391e	60		rts				rts
.391f	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3921	f0 08		beq $392b			beq 	_dtpCR						; except $FF => CRLF
.3923	29 07		and #$07			and 	#7
.3925	a2 08		ldx #$08		ldx	#8
.3927	20 f6 14	jsr $14f6		jsr	deviceHandler
.392a	60		rts				rts
.392b					_dtpCR:
.392b	a2 06		ldx #$06		ldx	#6
.392d	20 f6 14	jsr $14f6		jsr	deviceHandler
.3930	60		rts				rts
.3931					DTSwitchMode:
.3931	cd e3 0c	cmp $0ce3			cmp 	LastCharacterClass 			; if changed, update character class
.3934	f0 04		beq $393a			beq 	_DTSMNoChange
.3936	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.3939					_DTSMExit:
.3939	60		rts				rts
.393a					_DTSMNoChange:
.393a	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.393c	f0 fb		beq $3939			beq 	_DTSMExit 					; need a space.
.393e	a9 20		lda #$20			lda 	#" "
.3940	4c f0 38	jmp $38f0			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3943					DTIdentifier:
.3943	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3945	20 31 39	jsr $3931			jsr 	DTSwitchMode
.3948	a9 87		lda #$87			lda 	#LTYIdentifier
.394a	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.394d					_DTILoop:
.394d	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.394f	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3951	d0 02		bne $3955			bne 	_DTINotUS
.3953	a9 5f		lda #$5f			lda 	#"_"
.3955					_DTINotUS:
.3955	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.3958	c8		iny				iny
.3959	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.395b	c9 3a		cmp #$3a			cmp 	#$3A
.395d	90 ee		bcc $394d			bcc 	_DTILoop
.395f	c8		iny				iny
.3960	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3962	f0 25		beq $3989			beq 	_DTIExit 					; no postfix.
.3964	48		pha				pha
.3965	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3967	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.396a	a9 82		lda #$82			lda 	#LTYPunctuation
.396c	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.396f	68		pla				pla
.3970	c9 3b		cmp #$3b			cmp 	#$3B
.3972	f0 10		beq $3984			beq 	_DTIArray
.3974	4a		lsr a				lsr 	a 							; array flag in C
.3975	08		php				php
.3976	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3978	f0 02		beq $397c			beq 	_DTIDollar
.397a	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.397c					_DTIDollar:
.397c	49 24		eor #$24			eor 	#"$"
.397e	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.3981	28		plp				plp
.3982	90 05		bcc $3989			bcc 	_DTIExit
.3984					_DTIArray:
.3984	a9 28		lda #$28			lda 	#"("
.3986	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.3989					_DTIExit:
.3989	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.398a					DTDecodeToken:
.398a	a2 00		ldx #$00			ldx 	#0 							; table number to use
.398c	b1 28		lda ($28),y			lda 	(codePtr),y
.398e	c9 84		cmp #$84			cmp 	#$84
.3990	b0 05		bcs $3997			bcs 	_DTNotShift
.3992	29 03		and #$03			and 	#3 							; get the shift 1..3
.3994	0a		asl a				asl 	a 							; put 2 x in X
.3995	aa		tax				tax
.3996	c8		iny				iny
.3997					_DTNotShift:
.3997	bd 99 3c	lda $3c99,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.399a	85 2a		sta $2a				sta 	temp0 						; point into temp0
.399c	bd 9a 3c	lda $3c9a,x			lda 	TokenTableAddress+1,x
.399f	85 2b		sta $2b				sta 	temp0+1
.39a1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.39a3	c8		iny				iny 								; consume it.
.39a4	aa		tax				tax
.39a5	98		tya				tya
.39a6	48		pha				pha
.39a7					_DTFindText:
.39a7	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.39a9	f0 11		beq $39bc			beq 	_DTFoundText
.39ab	ca		dex				dex
.39ac	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.39ae	38		sec				sec
.39af	b1 2a		lda ($2a),y			lda 	(temp0),y
.39b1	65 2a		adc $2a				adc 	temp0
.39b3	85 2a		sta $2a				sta 	temp0
.39b5	90 f0		bcc $39a7			bcc 	_DTFindText
.39b7	e6 2b		inc $2b				inc 	temp0+1
.39b9	4c a7 39	jmp $39a7			jmp 	_DTFindText
.39bc					_DTFoundText:
.39bc	a0 01		ldy #$01			ldy 	#1 							; get first character
.39be	b1 2a		lda ($2a),y			lda 	(temp0),y
.39c0	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.39c2	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.39c4	90 11		bcc $39d7			bcc 	_DTIsPunctuation
.39c6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.39c8	b0 0d		bcs $39d7			bcs 	_DTIsPunctuation
.39ca	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.39cc	20 31 39	jsr $3931			jsr 	DTSwitchMode
.39cf	a9 83		lda #$83			lda 	#LTYKeyword
.39d1	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.39d4	4c e1 39	jmp $39e1			jmp 	_DTPrint
.39d7					_DTIsPunctuation:
.39d7	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.39d9	20 31 39	jsr $3931			jsr 	DTSwitchMode
.39dc	a9 82		lda #$82			lda 	#LTYPunctuation
.39de	20 f0 38	jsr $38f0			jsr 	ListOutputCharacter
.39e1					_DTPrint:
.39e1	a9 01		lda #$01			lda 	#1 							; fix case.
.39e3	20 c6 38	jsr $38c6			jsr 	DTPrintLengthPrefix 		; print it out.
.39e6	a0 00		ldy #$00			ldy 	#0
.39e8	b1 2a		lda ($2a),y			lda 	(temp0),y
.39ea	a8		tay				tay
.39eb	b1 2a		lda ($2a),y			lda 	(temp0),y
.39ed	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.39ef	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.39f1	90 04		bcc $39f7			bcc 	_DTIsNowPunctuation
.39f3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.39f5	90 05		bcc $39fc			bcc 	_DTPExit
.39f7					_DTIsNowPunctuation:
.39f7	a9 01		lda #$01			lda 	#1
.39f9	8d e3 0c	sta $0ce3			sta		LastCharacterClass
.39fc					_DTPExit:
.39fc	68		pla				pla
.39fd	a8		tay				tay
.39fe	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce6					currentSet:
>0ce6							.fill 	1
.39ff					TokenSearch:
.39ff	8a		txa				txa
.3a00	48		pha				pha
.3a01	98		tya				tya
.3a02	48		pha				pha
.3a03	a9 00		lda #$00			lda 	#0
.3a05	8d e6 0c	sta $0ce6			sta 	currentSet
.3a08					_TSLoop:
.3a08	ad e6 0c	lda $0ce6			lda 	currentSet 					; 2 x currentset in X
.3a0b	0a		asl a				asl 	a
.3a0c	aa		tax				tax
.3a0d	bd 99 3c	lda $3c99,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3a10	85 2a		sta $2a				sta 	temp0
.3a12	bd 9a 3c	lda $3c9a,x			lda 	TokenTableAddress+1,x
.3a15	85 2b		sta $2b				sta 	temp0+1
.3a17	20 3e 3a	jsr $3a3e			jsr 	TokenSearchOne 				; search one table
.3a1a	b0 0d		bcs $3a29			bcs 	_TSFound 					; found a token.
.3a1c	ee e6 0c	inc $0ce6			inc 	currentSet 					; next set
.3a1f	ad e6 0c	lda $0ce6			lda 	currentSet
.3a22	c9 04		cmp #$04			cmp 	#4
.3a24	d0 e2		bne $3a08			bne 	_TSLoop 					; back if not done all four.
.3a26	18		clc				clc 								; clear carry and exit
.3a27	90 10		bcc $3a39			bcc 	_TSExit
.3a29					_TSFound:
.3a29	48		pha				pha 								; save token
.3a2a	ad e6 0c	lda $0ce6			lda 	currentSet					; if set zero no shift
.3a2d	f0 05		beq $3a34			beq 	_TSNoShift
.3a2f	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3a31	20 ef 3a	jsr $3aef			jsr 	TokenWrite
.3a34					_TSNoShift:
.3a34	68		pla				pla 								; get token back
.3a35	20 ef 3a	jsr $3aef			jsr 	TokenWrite 					; write it
.3a38	38		sec				sec 								; carry set indicating success
.3a39					_TSExit:
.3a39	68		pla				pla
.3a3a	a8		tay				tay
.3a3b	68		pla				pla
.3a3c	aa		tax				tax
.3a3d	60		rts				rts
.3a3e					TokenSearchOne:
.3a3e	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3a40					_TSOLoop:
.3a40	a0 00		ldy #$00			ldy 	#0
.3a42	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3a44	f0 26		beq $3a6c			beq 	_TSOFail 					; if zero, end of table
.3a46	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3a49	f0 11		beq $3a5c			beq 	_TSOCheckText
.3a4b					_TSONext:
.3a4b	e8		inx				inx 								; bump token
.3a4c	a0 00		ldy #$00			ldy 	#0							; get length
.3a4e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a50	38		sec				sec
.3a51	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3a53	85 2a		sta $2a				sta 	temp0
.3a55	90 e9		bcc $3a40			bcc 	_TSOLoop
.3a57	e6 2b		inc $2b				inc 	temp0+1
.3a59	4c 40 3a	jmp $3a40			jmp 	_TSOLoop
.3a5c					_TSOCheckText:
.3a5c	a8		tay				tay 								; compare length downto 1.
.3a5d					_TSOCheckLoop:
.3a5d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3a5f	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3a62	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3a64	d0 e5		bne $3a4b			bne 	_TSONext 					; different goto next.
.3a66	88		dey				dey 								; do all
.3a67	d0 f4		bne $3a5d			bne 	_TSOCheckLoop
.3a69	8a		txa				txa 								; return token in A and carry set
.3a6a	38		sec				sec
.3a6b	60		rts				rts
.3a6c					_TSOFail:
.3a6c	18		clc				clc
.3a6d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3a6e					TokTest:
.3a6e	a2 ff		ldx #$ff				ldx 	#$FF
.3a70	9a		txs					txs
.3a71	a9 8e		lda #$8e			lda 	#(TokenText1) & $FF
.3a73	85 28		sta $28				sta 	codePtr
.3a75	a9 3a		lda #$3a			lda 	#(TokenText1) >> 8
.3a77	85 29		sta $29				sta 	1+(codePtr)
.3a79	20 8e 3a	jsr $3a8e				jsr 	Tokenise
.3a7c	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3a7e	bd 8e 3a	lda $3a8e,x	_TokCheck:	lda 	TokenBytes1,x
.3a81	dd ea 0c	cmp $0cea,x				cmp 	tokenBuffer,x
.3a84	d0 fe		bne $3a84	_TokFail:	bne 	_TokFail	 		; error.
.3a86	e8		inx					inx
.3a87	c9 80		cmp #$80				cmp 	#$80
.3a89	d0 f3		bne $3a7e				bne 	_TokCheck
.3a8b	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3a8e					TokenText1:
.3a8e					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0ce7					tokenHeader:
>0ce7							.fill 	3
.0cea					tokenBuffer:
>0cea							.fill 	256
.0dea					tokenBufferIndex:
>0dea							.fill 	1
.3a8e					Tokenise:
.3a8e	20 08 3b	jsr $3b08			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3a91					TokeniseASCIIZ:
.3a91	20 19 3b	jsr $3b19			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3a94	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3a96	8d ea 0d	sta $0dea			sta 	tokenBufferIndex
.3a99	a8		tay				tay 								; start pointer
.3a9a	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3a9c	8d ea 0c	sta $0cea			sta 	tokenBuffer
.3a9f					_TokLoop:
.3a9f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3aa1	f0 46		beq $3ae9			beq 	_TokExit 					; if zero, then exit.
.3aa3	c8		iny				iny 								; skip over spaces.
.3aa4	c9 20		cmp #$20			cmp 	#" "
.3aa6	f0 f7		beq $3a9f			beq 	_TokLoop
.3aa8	88		dey				dey 								; point back to character.
.3aa9	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3aab	f0 18		beq $3ac5			beq 	_TokHexConst
.3aad	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3aaf	f0 23		beq $3ad4			beq 	_TokQString
.3ab1	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3ab3	b0 26		bcs $3adb			bcs 	_TokPunctuation
.3ab5	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3ab7	b0 29		bcs $3ae2			bcs 	_TokIdentifier
.3ab9	c9 3a		cmp #$3a			cmp 	#"9"+1
.3abb	b0 1e		bcs $3adb			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3abd	c9 30		cmp #$30			cmp 	#"0"
.3abf	90 1a		bcc $3adb			bcc 	_TokPunctuation 			; < 0, punctuation.
.3ac1	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3ac3	d0 08		bne $3acd			bne 	_TokConst
.3ac5					_TokHexConst:
.3ac5	c8		iny				iny									; consume token.
.3ac6	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3ac8	20 ef 3a	jsr $3aef			jsr 	TokenWrite
.3acb	a9 10		lda #$10			lda 	#16
.3acd					_TokConst:
.3acd	20 d7 3b	jsr $3bd7			jsr 	TokeniseInteger
.3ad0	b0 cd		bcs $3a9f			bcs 	_TokLoop
.3ad2	90 18		bcc $3aec			bcc 	_TokFail
.3ad4					_TokQString:
.3ad4	20 6d 3c	jsr $3c6d			jsr 	TokeniseString
.3ad7	b0 c6		bcs $3a9f			bcs 	_TokLoop
.3ad9	90 11		bcc $3aec			bcc 	_TokFail
.3adb					_TokPunctuation:
.3adb	20 4c 3c	jsr $3c4c			jsr 	TokenisePunctuation
.3ade	b0 bf		bcs $3a9f			bcs 	_TokLoop
.3ae0	90 0a		bcc $3aec			bcc 	_TokFail
.3ae2					_TokIdentifier:
.3ae2	20 48 3b	jsr $3b48			jsr 	TokeniseIdentifier
.3ae5	b0 b8		bcs $3a9f			bcs 	_TokLoop
.3ae7	90 03		bcc $3aec			bcc 	_TokFail
.3ae9					_TokExit:
.3ae9	a9 01		lda #$01			lda 	#1
.3aeb	60		rts				rts
.3aec					_TokFail:
.3aec	a9 00		lda #$00			lda 	#0
.3aee	60		rts				rts
.3aef					TokenWrite:
.3aef	85 32		sta $32				sta 	tempShort 					; save XA
.3af1	48		pha				pha
.3af2	8a		txa				txa
.3af3	48		pha				pha
.3af4	a5 32		lda $32				lda 	tempShort
.3af6	ae ea 0d	ldx $0dea			ldx 	tokenBufferIndex 			; geet index
.3af9	9d ea 0c	sta $0cea,x			sta 	tokenBuffer,x 				; write byte to buffer
.3afc	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3afe	9d eb 0c	sta $0ceb,x			sta 	tokenBuffer+1,x
.3b01	ee ea 0d	inc $0dea			inc 	tokenBufferIndex 			; bump index
.3b04	68		pla				pla
.3b05	aa		tax				tax
.3b06	68		pla				pla
.3b07	60		rts				rts
.3b08					TokeniseMakeASCIIZ:
.3b08	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3b0a	b1 28		lda ($28),y			lda 	(codePtr),y
.3b0c	a8		tay				tay
.3b0d	c8		iny				iny 								; +1, the NULL goes here.
.3b0e	a9 00		lda #$00			lda 	#0
.3b10	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3b12	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3b14	d0 02		bne $3b18			bne 	_TMKAExit
.3b16	e6 29		inc $29				inc 	codePtr+1
.3b18					_TMKAExit:
.3b18	60		rts				rts
.3b19					TokeniseFixCase:
.3b19	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3b1b	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3b1d					_TFCFlipQ:
.3b1d	8a		txa				txa
.3b1e	49 01		eor #$01			eor 	#1
.3b20	aa		tax				tax
.3b21					_TFCLoop:
.3b21	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3b23	f0 22		beq $3b47			beq 	_TFCExit 					; if zero exit.
.3b25	c9 20		cmp #$20			cmp 	#32 						; if control
.3b27	90 1a		bcc $3b43			bcc 	_TFCControl
.3b29	c8		iny				iny 								; preconsume
.3b2a	c9 22		cmp #$22			cmp 	#'"'
.3b2c	f0 ef		beq $3b1d			beq 	_TFCFlipQ
.3b2e	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3b30	90 ef		bcc $3b21			bcc 	_TFCLoop
.3b32	c9 7b		cmp #$7b			cmp 	#"z"+1
.3b34	b0 eb		bcs $3b21			bcs 	_TFCLoop
.3b36	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3b38	d0 e7		bne $3b21			bne 	_TFCLoop
.3b3a	88		dey				dey
.3b3b	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3b3d					_TFCWrite:
.3b3d	91 28		sta ($28),y			sta 	(codePtr),y
.3b3f	c8		iny				iny
.3b40	4c 21 3b	jmp $3b21			jmp 	_TFCLoop
.3b43					_TFCControl:
.3b43	a9 20		lda #$20			lda 	#" "
.3b45	d0 f6		bne $3b3d			bne 	_TFCWrite
.3b47					_TFCExit:
.3b47	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3b48					TokeniseIdentifier:
.3b48	a2 00		ldx #$00			ldx 	#0
.3b4a					_TICopyID:
.3b4a	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3b4c	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3b4e	f0 16		beq $3b66			beq 	_TICopyUnderscore
.3b50	c9 2e		cmp #$2e			cmp 	#"."
.3b52	f0 14		beq $3b68			beq 	_TICopyIn
.3b54	c9 30		cmp #$30			cmp 	#"0"
.3b56	90 1b		bcc $3b73			bcc 	_TIEndCopy
.3b58	c9 3a		cmp #$3a			cmp 	#"9"+1
.3b5a	90 0c		bcc $3b68			bcc 	_TICopyIn
.3b5c	c9 41		cmp #$41			cmp 	#"A"
.3b5e	90 13		bcc $3b73			bcc 	_TIEndCopy
.3b60	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b62	b0 0f		bcs $3b73			bcs		_TIEndCopy
.3b64	90 02		bcc $3b68			bcc 	_TICopyIn
.3b66					_TICopyUnderScore:
.3b66	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3b68					_TICopyIn:
.3b68	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3b69	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3b6c	8e cf 0a	stx $0acf			stx 	convertBuffer
.3b6f	c8		iny				iny 								; next character
.3b70	4c 4a 3b	jmp $3b4a			jmp 	_TICopyID 					; loop round
.3b73					_TIEndCopy:
.3b73	a9 24		lda #$24			lda 	#"$"
.3b75	20 ca 3b	jsr $3bca			jsr 	TIDCheckCopy
.3b78	a9 23		lda #$23			lda 	#"#"
.3b7a	20 ca 3b	jsr $3bca			jsr 	TIDCheckCopy
.3b7d	a9 28		lda #$28			lda 	#"("
.3b7f	20 ca 3b	jsr $3bca			jsr 	TIDCheckCopy
.3b82	20 ff 39	jsr $39ff			jsr 	TokenSearch 				; is it a token
.3b85	b0 41		bcs $3bc8			bcs 	_TIExit 					; if so, then exit.
.3b87	98		tya				tya
.3b88	48		pha				pha
.3b89	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3b8b	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3b8e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3b91	c9 28		cmp #$28			cmp 	#"("
.3b93	d0 02		bne $3b97			bne 	_TINotArray
.3b95	ca		dex				dex 								; yes, remove it and convert to array.
.3b96	c8		iny				iny
.3b97					_TINotArray:
.3b97	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3b9a	c9 24		cmp #$24			cmp 	#"$"
.3b9c	d0 03		bne $3ba1			bne 	_TINotString
.3b9e	ca		dex				dex
.3b9f	c8		iny				iny
.3ba0	c8		iny				iny
.3ba1					_TINotString:
.3ba1	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3ba4	c9 23		cmp #$23			cmp 	#"#"
.3ba6	d0 05		bne $3bad			bne 	_TINotFloat
.3ba8	ca		dex				dex
.3ba9	c8		iny				iny
.3baa	c8		iny				iny
.3bab	c8		iny				iny
.3bac	c8		iny				iny
.3bad					_TINotFloat:
.3bad	e8		inx				inx 								; write end marker for identifier.
.3bae	98		tya				tya
.3baf	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3bb2	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3bb5	a2 01		ldx #$01			ldx 	#1
.3bb7					_TIOutput:
.3bb7	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3bba	29 3f		and #$3f			and 	#$3F
.3bbc	48		pha				pha
.3bbd	20 ef 3a	jsr $3aef			jsr 	TokenWrite
.3bc0	e8		inx				inx
.3bc1	68		pla				pla
.3bc2	c9 3a		cmp #$3a			cmp 	#$3A
.3bc4	90 f1		bcc $3bb7			bcc 	_TIOutput
.3bc6	68		pla				pla
.3bc7	a8		tay				tay
.3bc8					_TIExit:
.3bc8	38		sec				sec 								; this can't fail.
.3bc9	60		rts				rts
.3bca					TIDCheckCopy:
.3bca	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3bcc	d0 08		bne $3bd6			bne 	_TIDCCExit
.3bce	e8		inx				inx
.3bcf	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3bd2	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bd5	c8		iny				iny
.3bd6					_TIDCCExit:
.3bd6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3bd7					TokeniseInteger:
.3bd7	85 2c		sta $2c				sta 	temp1 						; save base
.3bd9	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3bdb	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bde					_TIGetChars:
.3bde	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3be0	c9 30		cmp #$30			cmp 	#"0"
.3be2	90 1f		bcc $3c03			bcc 	_TIEndGet
.3be4	c9 3a		cmp #$3a			cmp 	#"9"+1
.3be6	90 10		bcc $3bf8			bcc 	_TIHaveChar
.3be8	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3bea	c9 0a		cmp #$0a			cmp 	#10
.3bec	f0 15		beq $3c03			beq 	_TIEndGet
.3bee	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3bf0	c9 41		cmp #$41			cmp 	#"A"
.3bf2	90 0f		bcc $3c03			bcc 	_TIEndGet
.3bf4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3bf6	b0 0b		bcs $3c03			bcs 	_TIEndGet
.3bf8					_TIHaveChar:
.3bf8	e8		inx				inx 								; write into buffer.
.3bf9	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bfc	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3bff	c8		iny				iny 								; next char
.3c00	4c de 3b	jmp $3bde			jmp 	_TIGetChars
.3c03					_TIEndGet:
.3c03	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3c05	f0 1c		beq $3c23			beq 	_TIFail
.3c07	98		tya				tya
.3c08	48		pha				pha
.3c09	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3c0b	85 2a		sta $2a				sta 	temp0
.3c0d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3c0f	85 2b		sta $2b				sta 	1+(temp0)
.3c11	a9 00		lda #$00			lda 	#0 							; stack level 0
.3c13	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3c15	a2 1a		ldx #$1a		ldx	#26
.3c17	20 0a 35	jsr $350a		jsr	mainHandler
.3c1a	68		pla				pla
.3c1b	a8		tay				tay
.3c1c	90 05		bcc $3c23			bcc 	_TIFail 					; didn't convert.
.3c1e	20 25 3c	jsr $3c25			jsr 	TIRecursiveOut 				; recursive output ?
.3c21	38		sec				sec
.3c22	60		rts				rts
.3c23					_TIFail:
.3c23	18		clc				clc
.3c24	60		rts				rts
.3c25					TIRecursiveOut:
.3c25	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3c27	29 3f		and #$3f			and 	#$3F
.3c29	09 40		ora #$40			ora 	#$40
.3c2b	48		pha				pha
.3c2c	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3c2e	29 c0		and #$c0			and 	#$C0
.3c30	05 58		ora $58				ora 	esInt1
.3c32	05 60		ora $60				ora 	esInt2
.3c34	05 68		ora $68				ora 	esInt3
.3c36	f0 10		beq $3c48			beq 	_TIRONoRecursion
.3c38	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3c3a					_TIROShift:
.3c3a	46 68		lsr $68				lsr 	esInt3
.3c3c	66 60		ror $60				ror 	esInt2
.3c3e	66 58		ror $58				ror 	esInt1
.3c40	66 50		ror $50				ror 	esInt0
.3c42	ca		dex				dex
.3c43	d0 f5		bne $3c3a			bne 	_TIROShift
.3c45	20 25 3c	jsr $3c25			jsr 	TIRecursiveOut 				; call recursively
.3c48					_TIRONoRecursion:
.3c48	68		pla				pla 								; pull the old bit.
.3c49	4c ef 3a	jmp $3aef			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3c4c					TokenisePunctuation:
.3c4c	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3c4e	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3c51	c8		iny				iny
.3c52	b1 28		lda ($28),y			lda 	(codePtr),y
.3c54	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3c57	c8		iny				iny 								; Y is +2
.3c58	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3c5a	8d cf 0a	sta $0acf			sta 	convertBuffer
.3c5d	20 ff 39	jsr $39ff			jsr 	TokenSearch 				; search for that token.
.3c60	b0 0a		bcs $3c6c			bcs 	_TIFound
.3c62	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3c65	88		dey				dey 								; Y is now +1
.3c66	20 ff 39	jsr $39ff			jsr 	TokenSearch 				; search for that token.
.3c69	b0 01		bcs $3c6c			bcs 	_TIFound
.3c6b	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3c6c					_TIFound:
.3c6c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3c6d					TokeniseString:
.3c6d	c8		iny				iny 								; skip opening quote
.3c6e	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3c70	84 2a		sty $2a				sty 	temp0 						; save start.
.3c72					_TSGetLength:
.3c72	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3c74	f0 21		beq $3c97			beq 	_TSFail						; end of line, fail
.3c76	c8		iny				iny
.3c77	e8		inx				inx
.3c78	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3c7a	d0 f6		bne $3c72			bne 	_TSGetLength
.3c7c	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3c7e	20 ef 3a	jsr $3aef			jsr 	TokenWrite
.3c81	8a		txa				txa 								; output length
.3c82	20 ef 3a	jsr $3aef			jsr 	TokenWrite
.3c85	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3c87	e0 00		cpx #$00			cpx 	#0 							; check ended
.3c89	f0 09		beq $3c94			beq 	_TSExit
.3c8b					_TSOutput:
.3c8b	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3c8d	20 ef 3a	jsr $3aef			jsr 	TokenWrite
.3c90	c8		iny				iny
.3c91	ca		dex				dex
.3c92	d0 f7		bne $3c8b			bne 	_TSOutput
.3c94					_TSExit:
.3c94	c8		iny				iny 								; skip ending quote
.3c95	38		sec				sec 								; return CS.
.3c96	60		rts				rts
.3c97					_TSFail:
.3c97	18		clc				clc
.3c98	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3c99					TokenTableAddress:
>3c99	a1 3c						.word 	Group0Text
>3c9b	6a 3e						.word 	Group1Text
>3c9d	b7 3f						.word 	Group2Text
>3c9f	de 3f						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3ca1					Group0Text:
>3ca1	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3ca5	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3ca8	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3cac	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3caf	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3cb2	01 be					.byte $01,$be                          ; $8b >
>3cb4	01 bc					.byte $01,$bc                          ; $8c <
>3cb6	01 bd					.byte $01,$bd                          ; $8d =
>3cb8	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3cbb	01 ab					.byte $01,$ab                          ; $8f +
>3cbd	01 ad					.byte $01,$ad                          ; $90 -
>3cbf	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3cc2	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3cc5	01 aa					.byte $01,$aa                          ; $93 *
>3cc7	01 af					.byte $01,$af                          ; $94 /
>3cc9	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3ccd	01 de					.byte $01,$de                          ; $96 ^
>3ccf	01 a1					.byte $01,$a1                          ; $97 !
>3cd1	01 bf					.byte $01,$bf                          ; $98 ?
>3cd3	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3cda	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3ce0	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3ce4	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3ce7	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3cef	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3cf5	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3cfa	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3cff	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3d04	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3d0a	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3d12	01 a8					.byte $01,$a8                          ; $a4 (
>3d14	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3d19	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3d1e	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3d23	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3d2b	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3d30	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3d35	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3d3b	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3d40	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3d45	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3d4a	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3d51	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3d58	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3d5d	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3d64	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3d6b	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3d71	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3d78	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3d7e	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3d86	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3d8c	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3d91	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3d97	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3d9d	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3da3	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3da8	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3dad	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3db4	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3dbb	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3dc3	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3dcb	01 c0					.byte $01,$c0                          ; $c3 @
>3dcd	01 fe					.byte $01,$fe                          ; $c4 ~
>3dcf	01 a6					.byte $01,$a6                          ; $c5 &
>3dd1	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3dd7	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3ddf	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3de3	01 a9					.byte $01,$a9                          ; $c9 )
>3de5	01 ba					.byte $01,$ba                          ; $ca :
>3de7	01 ac					.byte $01,$ac                          ; $cb ,
>3de9	01 bb					.byte $01,$bb                          ; $cc ;
>3deb	01 a7					.byte $01,$a7                          ; $cd '
>3ded	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3df0	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3df5	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3dfa	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3e00	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3e04	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3e08	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3e0c	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3e12	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3e17	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3e1b	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3e21	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3e26	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3e2c	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3e2f	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3e34	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3e3b	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3e40	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3e45	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3e4a	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3e4e	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3e54	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3e58	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3e5f	01 ae					.byte $01,$ae                          ; $e5 .
>3e61	01 a3					.byte $01,$a3                          ; $e6 #
>3e63	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>3e69	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3e6a					Group1Text:
>3e6a	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>3e6f	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>3e74	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>3e79	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>3e7d	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>3e83	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3e87	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3e8c	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3e94	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3e98	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3e9d	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3ea2	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>3ea7	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>3ead	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>3eb4	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>3eb8	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>3ebe	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>3ec2	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>3ec6	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>3eca	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>3ece	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>3ed2	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>3ed6	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>3eda	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>3ede	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>3ee2	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>3ee6	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>3eea	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>3eee	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>3ef2	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>3ef6	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>3efa	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>3efe	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>3f02	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>3f06	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>3f0a	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>3f0e	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>3f12	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>3f16	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>3f1a	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>3f1e	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>3f22	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>3f26	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>3f2a	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>3f2e	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>3f32	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>3f36	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>3f3a	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>3f3e	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>3f42	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>3f46	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>3f4a	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>3f4e	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>3f52	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>3f56	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>3f5a	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>3f5e	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>3f62	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>3f66	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>3f6a	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>3f6e	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>3f72	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>3f76	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>3f7a	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>3f7e	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>3f82	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>3f86	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>3f8a	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>3f8e	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>3f92	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>3f96	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>3f9a	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>3f9e	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>3fa2	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>3fa6	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>3faa	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>3fae	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>3fb2	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>3fb6	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3fb7					Group2Text:
>3fb7	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3fbd	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3fc3	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3fc9	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3fce	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>3fd6	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>3fdd	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3fde					Group3Text:
>3fde	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3fe5	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3fec	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3fed					tokeniserHandler:
.3fed	7c f0 3f	jmp ($3ff0,x)			jmp 	(tokeniserVectors,x)
.3ff0					tokeniserVectors:
>3ff0	fc 3f					.word _DummyControlHandler ; index 0
>3ff2	e9 37					.word Detokenise           ; index 2
>3ff4	dd 37					.word ListLine             ; index 4
>3ff6	6e 3a					.word TokTest              ; index 6
>3ff8	8e 3a					.word Tokenise             ; index 8
>3ffa	91 3a					.word TokeniseASCIIZ       ; index 10
.3ffc					_DummyControlHandler:
.3ffc	60		rts			rts

;******  Return to file: basic.asm

.3ffd					section_end_tokeniser:
.3ffd					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3ffd					AccessArray:
.3ffd	8a		txa				txa
.3ffe	48		pha				pha
.3fff	e8		inx				inx
.4000	20 c9 40	jsr $40c9			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4003	68		pla				pla
.4004	aa		tax				tax
.4005	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4007	85 2a		sta $2a				sta 	temp0
.4009	b5 58		lda $58,x			lda 	esInt1,x
.400b	85 2b		sta $2b				sta 	temp0+1
.400d	8a		txa				txa
.400e	48		pha				pha
.400f	98		tya				tya
.4010	48		pha				pha
.4011					_AAFollow:
.4011	a0 00		ldy #$00			ldy 	#0
.4013	b1 2a		lda ($2a),y			lda 	(temp0),y
.4015	48		pha				pha
.4016	c8		iny				iny
.4017	b1 2a		lda ($2a),y			lda 	(temp0),y
.4019	85 2b		sta $2b				sta 	temp0+1
.401b	68		pla				pla
.401c	85 2a		sta $2a				sta 	temp0
.401e	e8		inx				inx 								; advance to next stack slot.
.401f	a0 00		ldy #$00			ldy 	#0
.4021	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4023	d5 50		cmp $50,x			cmp 	esInt0,x
.4025	c8		iny				iny
.4026	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4028	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.402a	29 7f		and #$7f			and 	#$7F
.402c	f5 58		sbc $58,x			sbc 	esInt1,x
.402e	90 50		bcc $4080			bcc 	_AABadIndex 				; failed on index if max index < required.
.4030	18		clc				clc
.4031	a5 2a		lda $2a				lda 	temp0
.4033	69 02		adc #$02			adc 	#2
.4035	85 2a		sta $2a				sta 	temp0
.4037	90 02		bcc $403b			bcc 	_AANoCarry
.4039	e6 2b		inc $2b				inc 	temp0+1
.403b					_AANoCarry:
.403b	b5 50		lda $50,x			lda 	esInt0,x
.403d	85 2e		sta $2e				sta 	temp2
.403f	b5 58		lda $58,x			lda 	esInt1,x
.4041	85 2f		sta $2f				sta 	temp2+1
.4043	ac ed 0d	ldy $0ded			ldy 	varType
.4046	b9 23 41	lda $4123,y			lda 	CAActualSize-$3A,y
.4049	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.404b	30 02		bmi $404f			bmi 	_AANotPointer
.404d	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.404f					_AANotPointer:
.404f	20 cd 41	jsr $41cd			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.4052	18		clc				clc
.4053	a5 2a		lda $2a				lda 	temp0
.4055	65 2e		adc $2e				adc 	temp2
.4057	85 2a		sta $2a				sta 	temp0
.4059	a5 2b		lda $2b				lda 	temp0+1
.405b	65 2f		adc $2f				adc 	temp2+1
.405d	85 2b		sta $2b				sta 	temp0+1
.405f	b5 49		lda $49,x			lda 	esType+1,x
.4061	30 07		bmi $406a			bmi 	_AAUsedAllIndices
.4063	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4065	10 14		bpl $407b			bpl 	_AABadDepth 				; no, too many indexes.
.4067	4c 11 40	jmp $4011			jmp 	_AAFollow 					; otherwise follow them.
.406a					_AAUsedAllIndices:
.406a	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.406c	30 0d		bmi $407b			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.406e	68		pla				pla
.406f	a8		tay				tay
.4070	68		pla				pla
.4071	aa		tax				tax
.4072	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.4074	95 50		sta $50,x			sta 	esInt0,x
.4076	a5 2b		lda $2b				lda 	temp0+1
.4078	95 58		sta $58,x			sta 	esInt1,x
.407a	60		rts				rts
.407b					_AABadDepth:
.407b	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.407d	20 18 15	jsr $1518		jsr	errorHandler
.4080					_AABadIndex:
.4080	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.4082	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0deb					elementSize:
>0deb							.fill	 1
.4085					CreateArray:
.4085	20 5c 42	jsr $425c			jsr 	AccessSetup 				; set up the basic stuff.
.4088	ad ed 0d	lda $0ded			lda 	varType 					; is the variable type an array
.408b	4a		lsr a				lsr 	a
.408c	90 36		bcc $40c4			bcc 	CANotArray 					; no, cause an error.
.408e	20 65 43	jsr $4365			jsr 	FindVariable 				; does the variable exist already
.4091	b0 2c		bcs $40bf			bcs 	CAFound 					; cannot redefine it.
.4093	20 99 42	jsr $4299			jsr 	CreateVariable 				; create the variable entry.
.4096	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.4098	48		pha				pha
.4099	a5 2b		lda $2b				lda 	temp0+1
.409b	48		pha				pha
.409c	a2 00		ldx #$00			ldx 	#0
.409e	20 c9 40	jsr $40c9			jsr 	GetArrayDimensions 			; get the array dimensions
.40a1	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.40a3	20 f9 40	jsr $40f9			jsr 	CreateArrayLevel 			; level to YA
.40a6	aa		tax				tax 								; level now in YX
.40a7	68		pla				pla 								; get address back to temp0 to write.
.40a8	85 2b		sta $2b				sta 	temp0+1
.40aa	68		pla				pla
.40ab	85 2a		sta $2a				sta 	temp0
.40ad	98		tya				tya 								; write YX there.
.40ae	a0 06		ldy #$06			ldy 	#6
.40b0	91 2a		sta ($2a),y			sta 	(temp0),y
.40b2	88		dey				dey
.40b3	8a		txa				txa
.40b4	91 2a		sta ($2a),y			sta 	(temp0),y
.40b6	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y and exit.
.40b9	60		rts				rts
.40ba					CASize:
.40ba	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.40bc	20 18 15	jsr $1518		jsr	errorHandler
.40bf					CAFound:
.40bf	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.40c1	20 18 15	jsr $1518		jsr	errorHandler
.40c4					CANotArray:
.40c4	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.40c6	20 18 15	jsr $1518		jsr	errorHandler
.40c9					GetArrayDimensions:
.40c9	ad ed 0d	lda $0ded			lda 	varType 					; push variable type on the stack.
.40cc	48		pha				pha
.40cd	ac ee 0d	ldy $0dee			ldy 	varEnd
.40d0					_CAGetDimensions:
.40d0	8a		txa				txa 								; get the next level
.40d1	a2 0a		ldx #$0a		ldx	#10
.40d3	20 0a 35	jsr $350a		jsr	mainHandler
.40d6	aa		tax				tax
.40d7	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.40d9	29 e0		and #$e0			and 	#$E0
.40db	15 60		ora $60,x			ora 	esInt2,x
.40dd	15 68		ora $68,x			ora 	esInt3,x
.40df	d0 d9		bne $40ba			bne 	CASize
.40e1	e8		inx				inx 								; next level.
.40e2	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.40e4	c8		iny				iny
.40e5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.40e7	f0 e7		beq $40d0			beq 	_CAGetDimensions
.40e9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.40eb	d0 cd		bne $40ba			bne 	CASize
.40ed	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.40ef	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.40f1	68		pla				pla 								; restore the variable type ($3A-$3F)
.40f2	8d ed 0d	sta $0ded			sta 	varType
.40f5	8c ee 0d	sty $0dee			sty 	varEnd 						; save exit Y value, after dimensions
.40f8	60		rts				rts
.40f9					CreateArrayLevel:
.40f9	ac ed 0d	ldy $0ded			ldy 	varType
.40fc	b9 23 41	lda $4123,y			lda 	CAActualSize-$3A,y
.40ff	8d eb 0d	sta $0deb			sta 	elementSize 				; get element size this level.
.4102	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.4104	30 05		bmi $410b			bmi 	_CANotPointer
.4106	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4108	8d eb 0d	sta $0deb			sta 	elementSize
.410b					_CANotPointer:
.410b	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.410d	85 2a		sta $2a				sta 	temp0
.410f	48		pha				pha
.4110	a5 36		lda $36				lda 	lowMemory+1
.4112	85 2b		sta $2b				sta 	temp0+1
.4114	48		pha				pha
.4115	20 96 41	jsr $4196			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4118	a0 00		ldy #$00			ldy 	#0
.411a	b5 50		lda $50,x			lda 	esInt0,x
.411c	91 2a		sta ($2a),y			sta 	(temp0),y
.411e	c8		iny				iny
.411f	b5 58		lda $58,x			lda 	esInt1,x
.4121	91 2a		sta ($2a),y			sta 	(temp0),y
.4123	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.4125	30 06		bmi $412d			bmi 	_CALNotLast
.4127	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4129	09 80		ora #$80			ora 	#$80
.412b	91 2a		sta ($2a),y			sta 	(temp0),y
.412d					_CALNotLast:
.412d	a9 02		lda #$02			lda 	#2
.412f	20 53 41	jsr $4153			jsr 	_CALAddTemp0
.4132	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4134	95 60		sta $60,x			sta 	esInt2,x 					; count.
.4136	b5 58		lda $58,x			lda 	esInt1,x
.4138	95 68		sta $68,x			sta 	esInt3,x
.413a					_CALClear:
.413a	20 63 41	jsr $4163			jsr 	EraseOneElement
.413d	ad eb 0d	lda $0deb			lda 	elementSize 				; move to next element
.4140	20 53 41	jsr $4153			jsr 	_CALAddTemp0
.4143	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.4145	d0 02		bne $4149			bne 	_CALNoBorrow
.4147	d6 68		dec $68,x			dec 	esInt3,x
.4149					_CALNoBorrow:
.4149	d6 60		dec $60,x			dec 	esInt2,x
.414b	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.414d	10 eb		bpl $413a			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.414f	68		pla				pla 								; restore the start of this into YA.
.4150	a8		tay				tay
.4151	68		pla				pla
.4152	60		rts				rts
.4153					_CALAddTemp0:
.4153	18		clc				clc
.4154	65 2a		adc $2a				adc 	temp0
.4156	85 2a		sta $2a				sta 	temp0
.4158	90 02		bcc $415c			bcc 	_CALANoCarry
.415a	e6 2b		inc $2b				inc 	temp0+1
.415c					_CALANoCarry:
.415c	60		rts				rts
.415d					CAActualSize:
>415d	04 04						.byte 	VarISize,VarISize
>415f	02 02						.byte 	VarSSize,VarSSize
>4161	06 06						.byte 	VarFSize,VarFSize
.4163					EraseOneElement:
.4163	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.4165	10 09		bpl $4170			bpl 	_EOESubArray
.4167	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4169	ad ed 0d	lda $0ded			lda 	varType
.416c	20 03 43	jsr $4303			jsr 	ZeroTemp0Y
.416f	60		rts				rts
.4170					_EOESubArray:
.4170	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.4172	48		pha				pha
.4173	a5 2b		lda $2b				lda 	temp0+1
.4175	48		pha				pha
.4176	ad eb 0d	lda $0deb			lda 	elementSize 				; save element size
.4179	48		pha				pha
.417a	e8		inx				inx 								; create at next level
.417b	20 f9 40	jsr $40f9			jsr 	CreateArrayLevel
.417e	ca		dex				dex
.417f	85 32		sta $32				sta 	tempShort 					; save A
.4181	68		pla				pla  								; restore element size.
.4182	8d eb 0d	sta $0deb			sta 	elementSize
.4185	68		pla				pla 								; restore temp0, which is where this new array level goes.
.4186	85 2b		sta $2b				sta 	temp0+1
.4188	68		pla				pla
.4189	85 2a		sta $2a				sta 	temp0
.418b	98		tya				tya 								; store Y/A there
.418c	a0 01		ldy #$01			ldy 	#1
.418e	91 2a		sta ($2a),y			sta 	(temp0),y
.4190	a5 32		lda $32				lda 	tempShort
.4192	88		dey				dey
.4193	91 2a		sta ($2a),y			sta 	(temp0),y
.4195	60		rts				rts
.4196					AllocateArraySpace:
.4196	18		clc				clc 								; element count + 1 => temp2.
.4197	b5 50		lda $50,x			lda 	esInt0,x
.4199	69 01		adc #$01			adc 	#1
.419b	85 2e		sta $2e				sta 	temp2
.419d	b5 58		lda $58,x			lda 	esInt1,x
.419f	69 00		adc #$00			adc 	#0
.41a1	85 2f		sta $2f				sta 	temp2+1
.41a3	ad eb 0d	lda $0deb			lda 	elementSize 				; bytes per element
.41a6	20 cd 41	jsr $41cd			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.41a9	18		clc				clc 								; add 2 for 'max element' byte.
.41aa	a5 2e		lda $2e				lda 	temp2
.41ac	69 02		adc #$02			adc 	#2
.41ae	85 2e		sta $2e				sta 	temp2
.41b0	90 02		bcc $41b4			bcc 	_AASNoCarry
.41b2	e6 2f		inc $2f				inc 	temp2+1
.41b4					_AASNoCarry:
.41b4	18		clc				clc 								; add to low memory, allocating space.
.41b5	a5 35		lda $35				lda 	lowMemory
.41b7	65 2e		adc $2e				adc 	temp2
.41b9	85 35		sta $35				sta 	lowMemory
.41bb	a5 36		lda $36				lda 	lowMemory+1
.41bd	65 2f		adc $2f				adc 	temp2+1
.41bf	85 36		sta $36				sta 	lowMemory+1
.41c1	b0 05		bcs $41c8			bcs 	_AASFail 					; out of memory as adding causes wrapround
.41c3	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.41c5	b0 01		bcs $41c8			bcs 	_AASFail
.41c7	60		rts				rts
.41c8					_AASFail:
.41c8	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.41ca	20 18 15	jsr $1518		jsr	errorHandler
.41cd					MultiplyTemp2ByA:
.41cd	48		pha				pha
.41ce	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.41d0	85 30		sta $30				sta 	temp3
.41d2	a5 2f		lda $2f				lda 	temp2+1
.41d4	85 31		sta $31				sta 	temp3+1
.41d6	68		pla				pla
.41d7	06 2e		asl $2e				asl 	temp2 						; double it.
.41d9	26 2f		rol $2f				rol 	temp2+1
.41db	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.41dd	f0 15		beq $41f4			beq 	_MTBAExit
.41df	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.41e1	d0 0d		bne $41f0			bne 	_MTBANotFloat
.41e3	18		clc				clc 								; so this will make it x 3
.41e4	a5 2e		lda $2e				lda 	temp2
.41e6	65 30		adc $30				adc 	temp3
.41e8	85 2e		sta $2e				sta 	temp2
.41ea	a5 2f		lda $2f				lda 	temp2+1
.41ec	65 31		adc $31				adc 	temp3+1
.41ee	85 2f		sta $2f				sta 	temp2+1
.41f0					_MTBANotFloat:
.41f0	06 2e		asl $2e				asl 	temp2 						; double it.
.41f2	26 2f		rol $2f				rol 	temp2+1
.41f4					_MTBAExit:
.41f4	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0dec					varHash:
>0dec							.fill	1
.0ded					varType:
>0ded							.fill 	1
.0dee					varEnd:
>0dee							.fill 	1
.003b					hashList:
>003b							.fill 	2
.41f5					AccessVariable:
.41f5	aa		tax				tax 								; stack in X
.41f6	c8		iny				iny									; look at second character
.41f7	b1 28		lda ($28),y			lda 	(codePtr),y
.41f9	88		dey				dey
.41fa	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.41fc	d0 15		bne $4213			bne 	_AVLong 					; no, always use the hash tables.
.41fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4200	38		sec				sec 	 							; make it 0-25
.4201	e9 01		sbc #$01			sbc 	#1
.4203	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4204	0a		asl a				asl 	a
.4205	95 50		sta $50,x			sta 	esInt0,x
.4207	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4209	95 58		sta $58,x			sta 	esInt1,x
.420b	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.420d	95 48		sta $48,x			sta 	esType,x
.420f	c8		iny				iny 								; skip over the variable reference in the code.
.4210	c8		iny				iny  								; (1 letter, 1 type)
.4211	8a		txa				txa 								; stack in A to return.
.4212	60		rts				rts
.4213					_AVLong:
.4213	8a		txa				txa
.4214	48		pha				pha
.4215	20 5c 42	jsr $425c			jsr 	AccessSetup 				; set up the basic information we need for later
.4218	20 65 43	jsr $4365			jsr 	FindVariable 				; does the variable exist already ?
.421b	b0 0e		bcs $422b			bcs 	_AVFound 					; yes, then its found
.421d	ad ed 0d	lda $0ded			lda 	varType 					; otherwise, is the variable type an array
.4220	4a		lsr a				lsr 	a
.4221	90 05		bcc $4228			bcc 	_AVCanCreate 				; if not, we can autocreate
.4223	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4225	20 18 15	jsr $1518		jsr	errorHandler
.4228					_AVCanCreate:
.4228	20 99 42	jsr $4299			jsr 	CreateVariable 				; variable does not exist, create it.
.422b					_AVFound:
.422b	68		pla				pla
.422c	aa		tax				tax
.422d	18		clc				clc 								; copy temp0 (variable record address)
.422e	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4230	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4232	95 50		sta $50,x			sta 	esInt0,x
.4234	a5 2b		lda $2b				lda 	temp0+1
.4236	69 00		adc #$00			adc 	#0
.4238	95 58		sta $58,x			sta 	esInt1,x
.423a	a9 00		lda #$00			lda 	#0
.423c	95 60		sta $60,x			sta 	esInt2,x
.423e	95 68		sta $68,x			sta 	esInt3,x
.4240	ac ed 0d	ldy $0ded			ldy 	varType 					; get the type ID from the type.
.4243	b9 1c 42	lda $421c,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4246	95 48		sta $48,x			sta 	esType,x
.4248	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y
.424b	ad ed 0d	lda $0ded			lda 	VarType 					; get variable type, put LSB into C
.424e	4a		lsr a				lsr 	a
.424f	90 03		bcc $4254			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4251	20 fd 3f	jsr $3ffd			jsr 	AccessArray 				; array lookup. if LSB was set.
.4254					_AVNotArray:
.4254	8a		txa				txa 								; return stack in A and return
.4255	60		rts				rts
.4256					_AVTypeTable:
>4256	80 80						.byte 	$80,$80						; integer
>4258	c0 c0						.byte 	$C0,$C0 					; string
>425a	81 81						.byte 	$81,$81 					; float
.425c					AccessSetup:
.425c	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.425e	8d ec 0d	sta $0dec			sta 	varHash
.4261	98		tya				tya
.4262	48		pha				pha
.4263	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4265	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4267	b0 0b		bcs $4274			bcs 	_ASComplete
.4269	18		clc				clc 								; add to the hash. Might improve this.
.426a	6d ec 0d	adc $0dec			adc 	varHash
.426d	8d ec 0d	sta $0dec			sta 	varHash
.4270	c8		iny				iny 								; next character
.4271	4c 63 42	jmp $4263			jmp 	_ASLoop
.4274					_ASComplete:
.4274	8d ed 0d	sta $0ded			sta 	varType 					; save variable type byte
.4277	c8		iny				iny
.4278	8c ee 0d	sty $0dee			sty 	varEnd 						; save the ending position.
.427b	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.427c	e9 3a		sbc #$3a			sbc 	#$3A
.427e	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.427f	0a		asl a				asl 	a
.4280	0a		asl a				asl 	a
.4281	0a		asl a				asl 	a 							; 2 bytes/word
.4282	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4284	ad ec 0d	lda $0dec			lda 	varHash 					; get hash
.4287	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.4289	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.428a	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.428c	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.428e	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.4290	a9 0a		lda #$0a			lda 	#hashTables >> 8
.4292	69 00		adc #$00			adc 	#0
.4294	85 3c		sta $3c				sta 	hashList+1
.4296	68		pla				pla
.4297	a8		tay				tay
.4298	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.4299					CreateVariable:
.4299	98		tya				tya 								; push Y on the stack twice.
.429a	48		pha				pha									; position in code of the new variable.
.429b	48		pha				pha
.429c	ae ed 0d	ldx $0ded			ldx 	varType 					; get var type 0-5 from the var type
.429f	bd c3 42	lda $42c3,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.42a2	48		pha				pha 								; save length
.42a3	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.42a5	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.42a7	a5 36		lda $36				lda 	lowMemory+1
.42a9	85 2b		sta $2b				sta 	temp0+1
.42ab	68		pla				pla 								; get length
.42ac	18		clc				clc 								; add to low memory.
.42ad	65 35		adc $35				adc 	lowMemory
.42af	85 35		sta $35				sta 	lowMemory
.42b1	90 08		bcc $42bb			bcc 	_CVNoCarry
.42b3	e6 36		inc $36				inc 	lowMemory+1
.42b5	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.42b7	c5 34		cmp $34				cmp 	highMemory+1
.42b9	b0 3d		bcs $42f8			bcs 	_CVMemory
.42bb					_CVNoCarry:
.42bb	ad ec 0d	lda $0dec			lda 	varHash 					; store hash at offset 4.
.42be	a0 04		ldy #$04			ldy 	#4
.42c0	91 2a		sta ($2a),y			sta 	(temp0),y
.42c2	68		pla				pla 								; offset, work out where the variable name is.
.42c3	18		clc				clc
.42c4	65 28		adc $28				adc 	codePtr
.42c6	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.42c8	91 2a		sta ($2a),y			sta 	(temp0),y
.42ca	a5 29		lda $29				lda 	codePtr+1
.42cc	69 00		adc #$00			adc 	#0
.42ce	c8		iny				iny
.42cf	91 2a		sta ($2a),y			sta 	(temp0),y
.42d1	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.42d4	b0 03		bcs $42d9			bcs 	_CVNotImmediate
.42d6	20 3b 43	jsr $433b			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.42d9					_CVNotImmediate:
.42d9	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.42db	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.42dd	91 2a		sta ($2a),y			sta 	(temp0),y
.42df	c8		iny				iny
.42e0	b1 3b		lda ($3b),y			lda 	(hashList),y
.42e2	91 2a		sta ($2a),y			sta 	(temp0),y
.42e4	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.42e6	91 3b		sta ($3b),y			sta 	(hashList),y
.42e8	88		dey				dey
.42e9	a5 2a		lda $2a				lda 	temp0
.42eb	91 3b		sta ($3b),y			sta 	(hashList),y
.42ed	ad ed 0d	lda $0ded			lda 	varType 					; type in A
.42f0	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.42f2	20 03 43	jsr $4303			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.42f5	68		pla				pla
.42f6	a8		tay				tay
.42f7	60		rts				rts
.42f8					_CVMemory:
.42f8	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.42fa	20 18 15	jsr $1518		jsr	errorHandler
>42fd	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>42ff	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4301	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4303					ZeroTemp0Y:
.4303	4a		lsr a				lsr 	a 							; bit 0 in carry
.4304	0a		asl a				asl 	a
.4305	b0 19		bcs $4320			bcs 	_ZTExit 					; we don't initialise arrays.
.4307	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4309	f0 16		beq $4321			beq 	_ZTWriteNullString 			; write "" string
.430b	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.430d	f0 22		beq $4331			beq 	_ZTWriteFloat
.430f	98		tya				tya
.4310	48		pha				pha
.4311	a9 00		lda #$00			lda 	#0
.4313	91 2a		sta ($2a),y			sta 	(temp0),y
.4315	c8		iny				iny
.4316	91 2a		sta ($2a),y			sta 	(temp0),y
.4318	c8		iny				iny
.4319	91 2a		sta ($2a),y			sta 	(temp0),y
.431b	c8		iny				iny
.431c	91 2a		sta ($2a),y			sta 	(temp0),y
.431e	68		pla				pla
.431f	a8		tay				tay
.4320					_ZTExit:
.4320	60		rts				rts
.4321					_ZTWriteNullString:
.4321	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4323	8d ce 0a	sta $0ace			sta 	NullString
.4326	a9 ce		lda #$ce			lda 	#NullString & $FF
.4328	91 2a		sta ($2a),y			sta 	(temp0),y
.432a	a9 0a		lda #$0a			lda 	#NullString >> 8
.432c	c8		iny				iny
.432d	91 2a		sta ($2a),y			sta 	(temp0),y
.432f	88		dey				dey
.4330	60		rts				rts
.4331					_ZTWriteFloat:
.4331	8a		txa				txa
.4332	48		pha				pha
.4333	a2 20		ldx #$20		ldx	#32
.4335	20 84 1c	jsr $1c84		jsr	floatingpointHandler
.4338	68		pla				pla
.4339	aa		tax				tax
.433a	60		rts				rts
.433b					CloneVariableName:
.433b	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.433d	b1 2a		lda ($2a),y			lda 	(temp0),y
.433f	85 2e		sta $2e				sta 	temp2
.4341	c8		iny				iny
.4342	b1 2a		lda ($2a),y			lda 	(temp0),y
.4344	85 2f		sta $2f				sta 	temp2+1
.4346	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4348	91 2a		sta ($2a),y			sta 	(temp0),y
.434a	88		dey				dey
.434b	a5 35		lda $35				lda 	lowMemory
.434d	91 2a		sta ($2a),y			sta 	(temp0),y
.434f	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4351					_CVNCopy:
.4351	b1 2e		lda ($2e),y			lda		(temp2),y
.4353	91 35		sta ($35),y			sta 	(lowMemory),y
.4355	c8		iny				iny
.4356	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4358	90 f7		bcc $4351			bcc 	_CVNCopy
.435a	98		tya				tya 								; add Y to low memory
.435b	18		clc				clc
.435c	65 35		adc $35				adc 	lowMemory
.435e	85 35		sta $35				sta 	lowMemory
.4360	90 02		bcc $4364			bcc 	_CVNNoCarry
.4362	e6 36		inc $36				inc 	lowMemory+1
.4364					_CVNNoCarry:
.4364	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4365					FindVariable:
.4365	98		tya				tya
.4366	48		pha				pha
.4367	98		tya				tya 								; point temp2 to the actual name
.4368	18		clc				clc 								; in memory of the variable being created
.4369	65 28		adc $28				adc 	codePtr
.436b	85 2e		sta $2e				sta 	temp2
.436d	a5 29		lda $29				lda 	codePtr+1
.436f	69 00		adc #$00			adc 	#0
.4371	85 2f		sta $2f				sta 	temp2+1
.4373	a0 00		ldy #$00			ldy 	#0
.4375	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4377	85 2a		sta $2a				sta 	temp0
.4379	a5 3c		lda $3c				lda 	hashList+1
.437b	85 2b		sta $2b				sta 	temp0+1
.437d	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.437f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4381	f0 2c		beq $43af			beq 	_FVFail
.4383	aa		tax				tax
.4384	88		dey				dey		 							; get LSB
.4385	b1 2a		lda ($2a),y			lda 	(temp0),y
.4387	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4389	86 2b		stx $2b				stx 	temp0+1
.438b	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.438d	b1 2a		lda ($2a),y			lda 	(temp0),y
.438f	cd ec 0d	cmp $0dec			cmp 	varHash
.4392	d0 e9		bne $437d			bne 	_FVNext 					; if not, no point in checking the name.
.4394	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4395	b1 2a		lda ($2a),y			lda 	(temp0),y
.4397	85 2d		sta $2d				sta 	temp1+1
.4399	88		dey				dey
.439a	b1 2a		lda ($2a),y			lda 	(temp0),y
.439c	85 2c		sta $2c				sta 	temp1
.439e	a0 00		ldy #$00			ldy 	#0
.43a0					_FVCheck:
.43a0	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.43a2	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.43a4	d0 d7		bne $437d			bne 	_FVNext		 				; fail if different.
.43a6	c8		iny				iny
.43a7	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.43a9	90 f5		bcc $43a0			bcc 	_FVCheck
.43ab	68		pla				pla
.43ac	a8		tay				tay
.43ad	38		sec				sec
.43ae	60		rts				rts
.43af					_FVFail:
.43af	68		pla				pla
.43b0	a8		tay				tay
.43b1	18		clc				clc
.43b2	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.43b3					HashTableReset:
.43b3	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.43b5	a9 00		lda #$00			lda 	#0
.43b7					_HTRClear:
.43b7	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.43ba	ca		dex				dex
.43bb	d0 fa		bne $43b7			bne 	_HTRClear
.43bd	60		rts				rts

;******  Return to file: variable/variable.asm

.43be					variableHandler:
.43be	7c c1 43	jmp ($43c1,x)			jmp 	(variableVectors,x)
.43c1					variableVectors:
>43c1	c9 43					.word _DummyControlHandler ; index 0
>43c3	f5 41					.word AccessVariable       ; index 2
>43c5	85 40					.word CreateArray          ; index 4
>43c7	b3 43					.word HashTableReset       ; index 6
.43c9					_DummyControlHandler:
.43c9	60		rts			rts

;******  Return to file: basic.asm

.43ca					section_end_variable:
.43ca					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0def					endStorage:
>43ca							.align 	256
.4400					programMemory:
>43ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4400					section_end_footer:

;******  End of listing
