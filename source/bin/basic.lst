
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Wed Mar 10 09:28:57 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a2 04		ldx #$04		ldx	#4
.1005	20 af 23	jsr $23af		jsr	deviceHandler
.1008	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100a	8d c8 0a	sta $0ac8			sta 	basePage
.100d	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100f	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1012	a9 00		lda #$00			lda 	#($9800) & $FF
.1014	8d ca 0a	sta $0aca			sta 	endMemory
.1017	a9 98		lda #$98			lda 	#($9800) >> 8
.1019	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101c	4c e5 14	jmp $14e5			jmp 	Command_Run
.1028	4c c5 2b	jmp $2bc5			jmp 	TokTest
.32be					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	18 e8 03 ca 85 11 54 68			.byte 24,232,3,202,133,17,84,104,105,115,32,105,115,32,97,32,99,111,109,109,101,110,116,128,6,242,3,129,137,128,12,252,3,1,45,49,58,141,144,65,99,128,9,6,4,24,58,141,144,66,128,7,16,4,213,1,58,128,14,26,4,213,193,133,5,72,101,108,108,111,198,128,14,36,4,213,194,133,5,72,101,108,108,111,198,128,23,46,4,3,49,60,141,133,6,83,65,86,69,77,69,143,133,4,116,101,115,116,128,24,56,4,213,133,5,83,84,65,82,84,200,1,45,49,58,200,3,49,60,200,24,58,128,11,66,4,205,19,8,15,23,59,198,128,30,76,4,205,4,5,13,15,59,106,200,197,82,77,69,89,120,200,133,8,73,78,68,69,77,79,33,33,198,128,11,86,4,205,19,8,15,23,59,198,128,22,96,4,213,133,3,69,78,68,200,1,45,49,58,200,3,49,60,200,24,58,128,11,106,4,205,19,8,15,23,59,198,128,33,116,4,3,49,60,141,133,19,120,120,120,120,120,120,120,120,120,120,120,120,120,65,65,65,65,65,65,143,133,1,33,128,14,126,4,213,3,49,60,200,165,3,49,60,198,128,11,136,4,205,19,8,15,23,59,198,128,8,146,4,153,199,158,171,128,22,156,4,157,4,5,13,15,59,1,45,49,58,200,24,58,200,3,49,60,198,128,11,166,4,205,19,8,15,23,59,198,128,18,176,4,3,49,60,141,3,49,60,143,133,4,33,33,33,33,128,11,186,4,205,19,8,15,23,59,198,128,13,196,4,205,24,15,50,59,133,1,42,198,128,45,206,4,213,133,4,68,69,77,79,200,1,45,49,58,200,3,1,45,49,60,200,133,1,36,201,184,24,58,200,80,198,200,133,1,36,184,195,3,49,60,200,80,198,128,5,216,4,163,128,13,226,4,157,24,15,50,59,3,49,60,198,128,14,236,4,213,133,3,88,79,50,201,3,49,60,128,5,246,4,163,128,11,0,5,157,19,8,15,23,59,198,128,11,10,5,1,58,141,195,3,49,60,128,26,20,5,213,133,1,36,201,184,187,1,58,198,200,80,198,200,186,187,1,58,198,144,65,198,128,5,30,5,163,128,28,40,5,24,24,58,24,24,59,68,198,24,24,60,24,24,61,68,198,24,24,62,24,24,63,68,198,128,0
>5008	69 73 20 69 73 20 61 20 63 6f 6d 6d 65 6e 74 80
>5018	06 f2 03 81 89 80 0c fc 03 01 2d 31 3a 8d 90 41
>5028	63 80 09 06 04 18 3a 8d 90 42 80 07 10 04 d5 01
>5038	3a 80 0e 1a 04 d5 c1 85 05 48 65 6c 6c 6f c6 80
>5048	0e 24 04 d5 c2 85 05 48 65 6c 6c 6f c6 80 17 2e
>5058	04 03 31 3c 8d 85 06 53 41 56 45 4d 45 8f 85 04
>5068	74 65 73 74 80 18 38 04 d5 85 05 53 54 41 52 54
>5078	c8 01 2d 31 3a c8 03 31 3c c8 18 3a 80 0b 42 04
>5088	cd 13 08 0f 17 3b c6 80 1e 4c 04 cd 04 05 0d 0f
>5098	3b 6a c8 c5 52 4d 45 59 78 c8 85 08 49 4e 44 45
>50a8	4d 4f 21 21 c6 80 0b 56 04 cd 13 08 0f 17 3b c6
>50b8	80 16 60 04 d5 85 03 45 4e 44 c8 01 2d 31 3a c8
>50c8	03 31 3c c8 18 3a 80 0b 6a 04 cd 13 08 0f 17 3b
>50d8	c6 80 21 74 04 03 31 3c 8d 85 13 78 78 78 78 78
>50e8	78 78 78 78 78 78 78 78 41 41 41 41 41 41 8f 85
>50f8	01 21 80 0e 7e 04 d5 03 31 3c c8 a5 03 31 3c c6
>5108	80 0b 88 04 cd 13 08 0f 17 3b c6 80 08 92 04 99
>5118	c7 9e ab 80 16 9c 04 9d 04 05 0d 0f 3b 01 2d 31
>5128	3a c8 18 3a c8 03 31 3c c6 80 0b a6 04 cd 13 08
>5138	0f 17 3b c6 80 12 b0 04 03 31 3c 8d 03 31 3c 8f
>5148	85 04 21 21 21 21 80 0b ba 04 cd 13 08 0f 17 3b
>5158	c6 80 0d c4 04 cd 18 0f 32 3b 85 01 2a c6 80 2d
>5168	ce 04 d5 85 04 44 45 4d 4f c8 01 2d 31 3a c8 03
>5178	01 2d 31 3c c8 85 01 24 c9 b8 18 3a c8 50 c6 c8
>5188	85 01 24 b8 c3 03 31 3c c8 50 c6 80 05 d8 04 a3
>5198	80 0d e2 04 9d 18 0f 32 3b 03 31 3c c6 80 0e ec
>51a8	04 d5 85 03 58 4f 32 c9 03 31 3c 80 05 f6 04 a3
>51b8	80 0b 00 05 9d 13 08 0f 17 3b c6 80 0b 0a 05 01
>51c8	3a 8d c3 03 31 3c 80 1a 14 05 d5 85 01 24 c9 b8
>51d8	bb 01 3a c6 c8 50 c6 c8 ba bb 01 3a c6 90 41 c6
>51e8	80 05 1e 05 a3 80 1c 28 05 18 18 3a 18 18 3b 44
>51f8	c6 18 18 3c 18 18 3d 44 c6 18 18 3e 18 18 3f 44
>5208	c6 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.102b					Command_Assert:
.102b	20 ad 1c	jsr $1cad			jsr 	EvaluateRootInteger 		; what is being asserted.
.102e	20 38 22	jsr $2238			jsr 	MInt32Zero 					; is it true ?
.1031	f0 01		beq $1034			beq 	_CAError
.1033	60		rts				rts
.1034					_CAError:
.1034	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1036	20 c6 23	jsr $23c6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1039					CommandClear:
.1039	98		tya				tya
.103a	48		pha				pha
.103b	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.103e	85 0d		sta $0d				sta 	highMemory
.1040	ad cb 0a	lda $0acb			lda 	endMemory+1
.1043	85 0e		sta $0e				sta 	highMemory+1
.1045	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1048	85 04		sta $04				sta 	temp0
.104a	ad c9 0a	lda $0ac9			lda 	basePage+1
.104d	85 05		sta $05				sta 	temp0+1
.104f					_CCFindEnd:
.104f	a0 00		ldy #$00			ldy 	#0
.1051	b1 04		lda ($04),y			lda 	(temp0),y
.1053	f0 0c		beq $1061			beq 	_CCFoundEnd 				; offset zero is end.
.1055	18		clc				clc
.1056	65 04		adc $04				adc 	temp0 						; move to next line
.1058	85 04		sta $04				sta 	temp0
.105a	90 f3		bcc $104f			bcc 	_CCFindEnd
.105c	e6 05		inc $05				inc 	temp0+1
.105e	4c 4f 10	jmp $104f			jmp 	_CCFindEnd
.1061					_CCFoundEnd:
.1061	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1063	85 0f		sta $0f				sta 	lowMemory
.1065	a5 05		lda $05				lda 	temp0+1
.1067	85 10		sta $10				sta 	lowMemory+1
.1069	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.106b	20 7f 10	jsr $107f			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.106e	20 9e 22	jsr $229e			jsr 	RSReset 					; reset the return stack.
.1071	a2 04		ldx #$04		ldx	#4
.1073	20 b5 32	jsr $32b5		jsr	variableHandler
.1076	20 9c 16	jsr $169c			jsr 	ScanProc 					; scan for procedures
.1079	20 a6 14	jsr $14a6			jsr 	CommandRestore 				; do a restore
.107c	68		pla				pla
.107d	a8		tay				tay
.107e	60		rts				rts
.107f					AdvanceLowMemoryByte:
.107f	18		clc				clc
.1080	65 0f		adc $0f				adc 	lowMemory
.1082	85 0f		sta $0f				sta 	lowMemory
.1084	90 02		bcc $1088			bcc 	_ALMBExit
.1086	e6 10		inc $10				inc 	lowMemory+1
.1088					_ALMBExit:
.1088	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1089					Command_Dim:
.1089	a2 02		ldx #$02		ldx	#2
.108b	20 b5 32	jsr $32b5		jsr	variableHandler
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.1090	c8		iny				iny
.1091	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1093	f0 f4		beq $1089			beq 	Command_Dim
.1095	88		dey				dey 								; unpick get
.1096	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.32be					Command_FOR:
.32be	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.32c0	a2 0b		ldx #$0b			ldx 	#11
.32c2	20 ac 22	jsr $22ac			jsr 	RSClaim
.32c5	20 84 11	jsr $1184			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.32c8	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.32ca	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.32cc	d0 4c		bne $331a			bne 	_CFType
.32ce	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.32d0	20 79 22	jsr $2279			jsr 	CheckToken
.32d3	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.32d5	20 af 1c	jsr $1caf			jsr 	EvaluateInteger				; get terminal value in stack 1
.32d8	98		tya				tya
.32d9	48		pha				pha
.32da	a0 04		ldy #$04			ldy 	#4
.32dc	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.32de	91 78		sta ($78),y			sta 	(rsPointer),y
.32e0	c8		iny				iny
.32e1	a5 50		lda $50				lda		esInt1
.32e3	91 78		sta ($78),y			sta 	(rsPointer),y
.32e5	c8		iny				iny
.32e6	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.32e8	91 78		sta ($78),y			sta 	(rsPointer),y
.32ea	c8		iny				iny
.32eb	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.32ed	91 78		sta ($78),y			sta 	(rsPointer),y
.32ef	c8		iny				iny
.32f0	a5 51		lda $51				lda		esInt1+1
.32f2	91 78		sta ($78),y			sta 	(rsPointer),y
.32f4	c8		iny				iny
.32f5	a5 59		lda $59				lda		esInt2+1
.32f7	91 78		sta ($78),y			sta 	(rsPointer),y
.32f9	c8		iny				iny
.32fa	a5 61		lda $61				lda		esInt3+1
.32fc	91 78		sta ($78),y			sta 	(rsPointer),y
.32fe	68		pla				pla
.32ff	a8		tay				tay
.3300	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.3302	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.3304	d0 0e		bne $3314			bne 	_CFDone
.3306	c8		iny				iny									; skip over step.
.3307	20 af 1c	jsr $1caf			jsr 	EvaluateInteger 			; get step
.330a	98		tya				tya
.330b	48		pha				pha
.330c	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.330e	a0 06		ldy #$06			ldy 	#6
.3310	91 78		sta ($78),y			sta 	(rsPointer),y
.3312	68		pla				pla
.3313	a8		tay				tay
.3314					_CFDone:
.3314	a9 01		lda #$01			lda 	#1
.3316	20 d8 22	jsr $22d8			jsr 	RSSavePosition 				; save position.
.3319	60		rts				rts
.331a					_CFType:
.331a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.331c	20 c6 23	jsr $23c6		jsr	errorHandler
.331f					Command_NEXT:
.331f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3321	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.3323	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.3325	f0 05		beq $332c			beq 	_isok
.3327	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.3329	20 c6 23	jsr $23c6		jsr	errorHandler
.332c					_isok:
.332c	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.332e	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.3330	b0 18		bcs $334a			bcs 	_CNNoIndex
.3332	a2 00		ldx #$00			ldx 	#0 							; start on stack
.3334	20 e2 1c	jsr $1ce2			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.3337	98		tya				tya
.3338	48		pha				pha
.3339	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.333b	b1 78		lda ($78),y			lda 	(rsPointer),y
.333d	d5 48		cmp $48,x			cmp 	esInt0,x
.333f	d0 76		bne $33b7			bne 	_CNBadIndex
.3341	c8		iny				iny
.3342	b1 78		lda ($78),y			lda 	(rsPointer),y
.3344	d5 50		cmp $50,x			cmp 	esInt1,x
.3346	d0 6f		bne $33b7			bne 	_CNBadIndex
.3348	68		pla				pla
.3349	a8		tay				tay
.334a					_CNNoIndex:
.334a	98		tya				tya
.334b	48		pha				pha
.334c	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.334e	b1 78		lda ($78),y			lda 	(rsPointer),y
.3350	85 04		sta $04				sta 	temp0
.3352	c8		iny				iny
.3353	b1 78		lda ($78),y			lda 	(rsPointer),y
.3355	85 05		sta $05				sta 	temp0+1
.3357	c8		iny				iny
.3358	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.335a	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.335c	85 09		sta $09				sta 	temp2+1 					; save for later.
.335e	10 01		bpl $3361			bpl 	_CNSignX
.3360	ca		dex				dex  								; X = $FF
.3361					_CNSignX:
.3361	18		clc				clc 								; add to the LSB
.3362	a0 00		ldy #$00			ldy 	#0
.3364	71 04		adc ($04),y			adc 	(temp0),y
.3366	91 04		sta ($04),y			sta 	(temp0),y
.3368					_CNPropogate:
.3368	c8		iny				iny  								; add the sign extended in X to the rest.
.3369	8a		txa				txa
.336a	71 04		adc ($04),y			adc 	(temp0),y
.336c	91 04		sta ($04),y			sta 	(temp0),y
.336e	c8		iny				iny
.336f	8a		txa				txa
.3370	71 04		adc ($04),y			adc 	(temp0),y
.3372	91 04		sta ($04),y			sta 	(temp0),y
.3374	c8		iny				iny
.3375	8a		txa				txa
.3376	71 04		adc ($04),y			adc 	(temp0),y
.3378	91 04		sta ($04),y			sta 	(temp0),y
.337a	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.337b	a5 78		lda $78				lda 	rsPointer
.337d	69 07		adc #$07			adc 	#7
.337f	85 06		sta $06				sta 	temp1
.3381	a9 00		lda #$00			lda 	#0
.3383	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.3385	a8		tay				tay 								; and clear the Y register again.
.3386	65 79		adc $79				adc 	rsPointer+1
.3388	85 07		sta $07				sta 	temp1+1
.338a	38		sec				sec 								; calculate current - limit oring interim values.
.338b	20 c3 33	jsr $33c3			jsr 	_CNCompare 					; each of these does a byte.
.338e	20 c3 33	jsr $33c3			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.3391	20 c3 33	jsr $33c3			jsr 	_CNCompare 					; and the carry of the subtraction.
.3394	20 c3 33	jsr $33c3			jsr 	_CNCompare
.3397	50 02		bvc $339b			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.3399	49 80		eor #$80			eor 	#$80
.339b					_CNNoOverflow:
.339b	a4 09		ldy $09				ldy 	temp2+1						; get step back
.339d	30 1d		bmi $33bc			bmi 	_CNCheckDownto
.339f	c9 00		cmp #$00			cmp 	#0
.33a1	30 0c		bmi $33af			bmi 	_CNLoopRound 				; loop round if < =
.33a3	a5 08		lda $08				lda 	temp2
.33a5	f0 08		beq $33af			beq 	_CNLoopRound
.33a7					_CNLoopExit:
.33a7	68		pla				pla
.33a8	a8		tay				tay
.33a9	a9 0b		lda #$0b			lda 	#11
.33ab	20 ce 22	jsr $22ce			jsr 	RSFree
.33ae	60		rts				rts
.33af					_CNLoopRound:
.33af	68		pla				pla
.33b0	a8		tay				tay
.33b1	a9 01		lda #$01			lda 	#1
.33b3	20 eb 22	jsr $22eb			jsr 	RSLoadPosition				; go back to the loop top
.33b6	60		rts				rts
.33b7					_CNBadIndex:
.33b7	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.33b9	20 c6 23	jsr $23c6		jsr	errorHandler
.33bc					_CNCheckDownto:
.33bc	c9 00		cmp #$00			cmp 	#0
.33be	10 ef		bpl $33af			bpl 	_CNLoopRound
.33c0	4c a7 33	jmp $33a7			jmp 	_CNLoopExit
.33c3					_CNCompare:
.33c3	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.33c5	f1 06		sbc ($06),y			sbc 	(temp1),y
.33c7	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.33c9	85 08		sta $08				sta 	temp2
.33cb	c8		iny				iny
.33cc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1097					CommandIf:
.1097	20 ad 1c	jsr $1cad			jsr 	EvaluateRootInteger 		; get what's being tested.
.109a	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.109c	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.109e	f0 04		beq $10a4			beq 	_IfSimple
.10a0	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.10a2	d0 1b		bne $10bf			bne 	_IfComplex
.10a4					_IfSimple:
.10a4	20 38 22	jsr $2238			jsr 	MInt32Zero					; check if TOS zero
.10a7	f0 10		beq $10b9			beq 	_IfEOL 						; go to next line.
.10a9	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.10ab	c8		iny				iny
.10ac	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.10ae	f0 0c		beq $10bc			beq 	_IfGoto 					; do the Goto code
.10b0	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10b2	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10b4	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10b6	f0 04		beq $10bc			beq 	_IfGoto
.10b8	60		rts				rts 								; else continue on this line.
.10b9					_IfEOL:
.10b9	4c 13 17	jmp $1713			jmp 	AdvanceNextLine 			; go to next line
.10bc					_IfGoto:
.10bc	4c 88 17	jmp $1788			jmp 	CommandGoto
.10bf					_IfComplex:
.10bf	20 38 22	jsr $2238			jsr 	MInt32Zero 					; is it true ?
.10c2	f0 01		beq $10c5			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10c4	60		rts				rts 								; else continue.
.10c5					_IFSkip:
.10c5	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10c7	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10c9	4c b8 34	jmp $34b8			jmp		ScanForward
.10cc					Command_ELSE:
.10cc	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ce	8a		txa				txa
.10cf	4c b8 34	jmp $34b8			jmp		ScanForward
.10d2					Command_ENDIF:
.10d2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0af0					InputBuffer:
>0af0							.fill 	MaxInputSize+1
.10d3					Command_Input:
.10d3	b1 02		lda ($02),y			lda 	(codePtr),y 			; see what's next.
.10d5	c8		iny				iny
.10d6	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.10d8	f0 f9		beq $10d3			beq 	Command_Input
.10da	88		dey				dey 							; undo consume
.10db	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.10dd	f0 54		beq $1133			beq 	_CIExit 				; : or EOL, exit
.10df	c9 80		cmp #$80			cmp 	#TOK_EOL
.10e1	f0 50		beq $1133			beq 	_CIExit
.10e3	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.10e5	90 12		bcc $10f9			bcc 	_CIVariable
.10e7	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.10e9	d0 43		bne $112e			bne 	_CISyntax
.10eb	a2 00		ldx #$00			ldx 	#0
.10ed	20 a4 1c	jsr $1ca4			jsr 	EvaluateString 			; evaluate and print string
.10f0	20 f9 11	jsr $11f9			jsr 	TOSToTemp0
.10f3	20 c8 13	jsr $13c8			jsr 	PrintString
.10f6	4c d3 10	jmp $10d3			jmp 	Command_Input
.10f9					_CIVariable:
.10f9	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.10fb	20 e2 1c	jsr $1ce2			jsr 	EvaluateReference
.10fe					_CIRetry:
.10fe	a9 3f		lda #$3f			lda 	#"?"
.1100	a2 0e		ldx #$0e		ldx	#14
.1102	20 af 23	jsr $23af		jsr	deviceHandler
.1105	98		tya				tya
.1106	48		pha				pha
.1107	20 47 11	jsr $1147			jsr 	InputString 			; input a string.
.110a	a2 01		ldx #$01			ldx 	#1
.110c	20 34 11	jsr $1134			jsr 	BufferToStackX 			; make stack,x ref input string.
.110f	a5 40		lda $40				lda 	esType 					; if target type numeric
.1111	29 40		and #$40			and 	#$40 					; then convert to number
.1113	d0 11		bne $1126			bne 	_CIWrite
.1115	a2 01		ldx #$01			ldx 	#1
.1117	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.111a	a9 0a		lda #$0a			lda 	#10
.111c	20 7f 20	jsr $207f			jsr 	MInt32FromString 		; convert it back from a string.
.111f	68		pla				pla
.1120	a8		tay				tay
.1121	b0 03		bcs $1126			bcs 	_CIWrite 				; successfully converted.
.1123	18		clc				clc 							; default fail FP conversion
.1124	90 d8		bcc $10fe			bcc		_CIRetry				; failed, try again.
.1126					_CIWrite:
.1126	a2 00		ldx #$00			ldx 	#0
.1128	20 97 11	jsr $1197			jsr 	WriteValue
.112b	4c d3 10	jmp $10d3			jmp 	Command_Input
.112e					_CISyntax:
.112e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1130	20 c6 23	jsr $23c6		jsr	errorHandler
.1133					_CIExit:
.1133	60		rts				rts
.1134					BufferToStackX:
.1134	a9 f0		lda #$f0			lda 	#InputBuffer & $FF
.1136	95 48		sta $48,x			sta 	esInt0,x
.1138	a9 0a		lda #$0a			lda 	#InputBuffer >> 8
.113a	95 50		sta $50,x			sta 	esInt1,x
.113c	a9 00		lda #$00			lda 	#0
.113e	95 58		sta $58,x			sta 	esInt2,x
.1140	95 60		sta $60,x			sta 	esInt3,x
.1142	a9 40		lda #$40			lda 	#$40
.1144	95 40		sta $40,x			sta 	esType,x
.1146	60		rts				rts
.1147					InputString:
.1147	a9 00		lda #$00			lda 	#0
.1149	8d f0 0a	sta $0af0			sta 	InputBuffer
.114c					_InputLoop:
.114c	a2 08		ldx #$08		ldx	#8
.114e	20 af 23	jsr $23af		jsr	deviceHandler
.1151	c9 00		cmp #$00			cmp 	#0
.1153	f0 f7		beq $114c			beq 	_InputLoop
.1155	c9 08		cmp #$08			cmp 	#8
.1157	f0 19		beq $1172			beq 	_InputBackspace
.1159	c9 0d		cmp #$0d			cmp 	#13
.115b	f0 21		beq $117e			beq 	_InputExit
.115d	ae f0 0a	ldx $0af0			ldx 	InputBuffer
.1160	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1162	f0 e8		beq $114c			beq 	_InputLoop
.1164	9d f1 0a	sta $0af1,x			sta 	InputBuffer+1,x 		; write char
.1167	ee f0 0a	inc $0af0			inc 	InputBuffer 			; advance count.
.116a					_InputPrintLoop:
.116a	a2 0e		ldx #$0e		ldx	#14
.116c	20 af 23	jsr $23af		jsr	deviceHandler
.116f	4c 4c 11	jmp $114c			jmp	 	_InputLoop
.1172					_InputBackspace:
.1172	ad f0 0a	lda $0af0			lda 	InputBuffer 			; at start
.1175	f0 d5		beq $114c			beq 	_InputLoop
.1177	ce f0 0a	dec $0af0			dec 	InputBuffer
.117a	a9 08		lda #$08			lda 	#8
.117c	d0 ec		bne $116a			bne 	_InputPrintLoop
.117e					_InputExit:
.117e	a2 02		ldx #$02		ldx	#2
.1180	20 af 23	jsr $23af		jsr	deviceHandler
.1183	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1184					CommandLet:
.1184	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1186	20 e2 1c	jsr $1ce2			jsr 	EvaluateReference
.1189	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.118b	20 79 22	jsr $2279			jsr 	CheckToken
.118e	e8		inx				inx 								; do RHS
.118f	20 90 1c	jsr $1c90			jsr 	Evaluate 					; evaluate and dereference
.1192	ca		dex				dex
.1193	20 97 11	jsr $1197			jsr 	WriteValue 					; write it out
.1196	60		rts				rts
.1197					WriteValue:
.1197	98		tya				tya
.1198	48		pha				pha
.1199	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.119c	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.119e	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.11a0	29 40		and #$40			and 	#$40
.11a2	d0 50		bne $11f4			bne		_WVType
.11a4	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.11a6	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.11a8	29 40		and #$40			and 	#$40
.11aa	d0 1f		bne $11cb			bne 	_WVCopyString
.11ac	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.11ae	15 41		ora $41,x			ora 	esType+1,x
.11b0	4a		lsr a				lsr 	a
.11b1	90 22		bcc $11d5			bcc 	_WVCopyData4 				; copy 4 data bytes.
.11b3	b5 40		lda $40,x			lda 	esType,x
.11b5	4a		lsr a				lsr 	a
.11b6	90 3c		bcc $11f4			bcc 	_WVType
.11b8	e8		inx				inx 								; force the value being written to be a float.
.11b9	20 fa 17	jsr $17fa			jsr 	BPMakeFloat
.11bc	ca		dex				dex
.11bd	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; set Temp0 to write address
.11c0	e8		inx				inx
.11c1	8a		txa				txa
.11c2	a2 20		ldx #$20		ldx	#32
.11c4	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.11c7	aa		tax				tax
.11c8	4c f1 11	jmp $11f1			jmp 	_WVCopyExit
.11cb					_WVCopyString:
.11cb	8a		txa				txa
.11cc	a2 0c		ldx #$0c		ldx	#12
.11ce	20 4d 29	jsr $294d		jsr	stringHandler
.11d1	aa		tax				tax
.11d2	4c f1 11	jmp $11f1			jmp 	_WVCopyExit
.11d5					_WVCopyData4:
.11d5	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.11d7	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.11d9	d0 10		bne $11eb			bne 	_WVCopyData1
.11db	a0 03		ldy #$03			ldy 	#3
.11dd	b5 61		lda $61,x			lda 	esInt3+1,x
.11df	91 04		sta ($04),y			sta 	(temp0),y
.11e1	88		dey				dey
.11e2	b5 59		lda $59,x			lda 	esInt2+1,x
.11e4	91 04		sta ($04),y			sta 	(temp0),y
.11e6	88		dey				dey
.11e7	b5 51		lda $51,x			lda 	esInt1+1,x
.11e9	91 04		sta ($04),y			sta 	(temp0),y
.11eb					_WVCopyData1:
.11eb	a0 00		ldy #$00			ldy 	#0
.11ed	b5 49		lda $49,x			lda 	esInt0+1,x
.11ef	91 04		sta ($04),y			sta 	(temp0),y
.11f1					_WVCopyExit:
.11f1	68		pla				pla
.11f2	a8		tay				tay
.11f3	60		rts				rts
.11f4					_WVType:
.11f4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.11f6	20 c6 23	jsr $23c6		jsr	errorHandler
.11f9					TOSToTemp0:
.11f9	b5 48		lda $48,x			lda 	esInt0,x
.11fb	85 04		sta $04				sta 	temp0
.11fd	b5 50		lda $50,x			lda 	esInt1,x
.11ff	85 05		sta $05				sta 	temp0+1
.1201	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.33cd					CommandList:
.33cd	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1
.33cf	20 11 22	jsr $2211			jsr 	MInt32False
.33d2	e8		inx				inx
.33d3	20 0d 22	jsr $220d			jsr 	MInt32True
.33d6	b1 02		lda ($02),y			lda 	(codePtr),y
.33d8	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.33da	f0 4e		beq $342a			beq 	_CLEnd
.33dc	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.33de	30 1b		bmi $33fb			bmi 	_CLDoListing
.33e0	a2 00		ldx #$00			ldx 	#0 							; get start
.33e2	20 af 1c	jsr $1caf			jsr 	EvaluateInteger
.33e5	b1 02		lda ($02),y			lda 	(codePtr),y 				; , follows
.33e7	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.33e9	f0 06		beq $33f1			beq 	_CLEndLine
.33eb	20 4f 21	jsr $214f			jsr 	MInt32CopyUp 				; copy first to second
.33ee	4c fb 33	jmp $33fb			jmp 	_CLDoListing
.33f1					_CLEndLine:
.33f1	c8		iny				iny 								; skip comma
.33f2	b1 02		lda ($02),y			lda 	(codePtr),y  				; no number follows.
.33f4	30 05		bmi $33fb			bmi 	_CLDoListing
.33f6	a2 01		ldx #$01			ldx 	#1
.33f8	20 af 1c	jsr $1caf			jsr 	EvaluateInteger				; get end
.33fb					_CLDoListing:
.33fb	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; back to the start.
.33fe					_CLCheckLoop:
.33fe	a0 00		ldy #$00			ldy 	#0							; check end.
.3400	b1 02		lda ($02),y			lda 	(codePtr),y
.3402	f0 26		beq $342a			beq 	_CLEnd
.3404	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.3406	20 2d 34	jsr $342d			jsr 	CLCompareLineTOS
.3409	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.340b	f0 0d		beq $341a			beq 	_CLNext
.340d	e8		inx				inx
.340e	20 2d 34	jsr $342d			jsr 	CLCompareLineTOS 			; compare vs higher
.3411	c9 01		cmp #$01			cmp 	#1
.3413	f0 05		beq $341a			beq 	_CLNext
.3415	a2 02		ldx #$02		ldx	#2
.3417	20 f4 2f	jsr $2ff4		jsr	tokeniserHandler
.341a					_CLNext:
.341a	a0 00		ldy #$00			ldy 	#0
.341c	b1 02		lda ($02),y			lda 	(codePtr),y
.341e	18		clc				clc
.341f	65 02		adc $02				adc 	codePtr
.3421	85 02		sta $02				sta 	codePtr
.3423	90 d9		bcc $33fe			bcc 	_CLCheckLoop
.3425	e6 03		inc $03				inc 	codePtr+1
.3427	4c fe 33	jmp $33fe			jmp 	_CLCheckLoop
.342a					_CLEnd:
.342a	4c 2a 34	jmp $342a			jmp 	_CLEnd
.342d					CLCompareLineTOS:
.342d	a0 01		ldy #$01			ldy 	#1
.342f	b1 02		lda ($02),y			lda 	(codePtr),y
.3431	55 48		eor $48,x			eor 	esInt0,x
.3433	85 04		sta $04				sta 	temp0
.3435	c8		iny				iny
.3436	b1 02		lda ($02),y			lda 	(codePtr),y
.3438	55 50		eor $50,x			eor 	esInt1,x
.343a	05 04		ora $04				ora 	temp0
.343c	f0 10		beq $344e			beq 	_CLCLTExit
.343e	88		dey				dey
.343f	b1 02		lda ($02),y			lda 	(codePtr),y
.3441	d5 48		cmp $48,x			cmp 	esInt0,x
.3443	c8		iny				iny
.3444	b1 02		lda ($02),y			lda 	(codePtr),y
.3446	f5 50		sbc $50,x			sbc 	esInt1,x
.3448	a9 ff		lda #$ff			lda 	#255
.344a	90 02		bcc $344e			bcc 	_CLCLTExit
.344c	a9 01		lda #$01			lda 	#1
.344e					_CLCLTExit:
.344e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0b11					storeSize:
>0b11							.fill 	1
.1202					CommandLocal:
.1202	a2 00		ldx #$00			ldx 	#0
.1204	20 20 12	jsr $1220			jsr 	LocaliseVariable 			; localise one.
.1207					_CLCheckNext:
.1207	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1209	c8		iny				iny
.120a	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.120c	f0 06		beq $1214			beq 	_CLAssignment
.120e	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1210	f0 f0		beq $1202			beq 	CommandLocal
.1212	88		dey				dey
.1213	60		rts				rts
.1214					_CLAssignment:
.1214	a2 01		ldx #$01			ldx 	#1
.1216	20 90 1c	jsr $1c90			jsr 	Evaluate 					; evaluate RHS
.1219	ca		dex				dex
.121a	20 97 11	jsr $1197			jsr 	WriteValue
.121d	4c 07 12	jmp $1207			jmp 	_CLCheckNext
.1220					LocaliseVariable:
.1220	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1222	c9 40		cmp #$40			cmp 	#$40
.1224	b0 67		bcs $128d			bcs 	_LVSyntax
.1226	8a		txa				txa 								; get the address of that variable.
.1227	a2 00		ldx #$00		ldx	#0
.1229	20 b5 32	jsr $32b5		jsr	variableHandler
.122c	aa		tax				tax
.122d	8a		txa				txa
.122e	48		pha				pha
.122f	98		tya				tya
.1230	48		pha				pha
.1231	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1234	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1236	0a		asl a				asl 	a
.1237	10 16		bpl $124f			bpl 	_LVPushNumber
.1239	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.123b	b1 04		lda ($04),y			lda 	(temp0),y
.123d	c8		iny				iny
.123e	85 06		sta $06				sta 	temp1
.1240	b1 04		lda ($04),y			lda 	(temp0),y
.1242	85 07		sta $07				sta 	temp1+1
.1244	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1246	b1 06		lda ($06),y			lda 	(temp1),y
.1248	aa		tax				tax 								; into X
.1249	e8		inx				inx 								; +1 for length.
.124a	a9 24		lda #$24			lda 	#markerString
.124c	4c 64 12	jmp $1264			jmp 	_LVWriteFrame
.124f					_LVPushNumber:
.124f	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1251	85 06		sta $06				sta 	temp1
.1253	a5 05		lda $05				lda 	temp0+1
.1255	85 07		sta $07				sta 	temp1+1
.1257	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1259	4a		lsr a				lsr 	a
.125a	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.125c	a2 04		ldx #$04			ldx 	#VarISize
.125e	90 04		bcc $1264			bcc 	_LVIsInteger
.1260	a9 23		lda #$23			lda 	#markerFloat
.1262	a2 06		ldx #$06			ldx 	#VarFSize
.1264					_LVIsInteger:
.1264					_LVWriteFrame:
.1264	8e 11 0b	stx $0b11			stx 	storeSize 					; number of bytes to copy from (temp0)
.1267	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1268	e8		inx				inx
.1269	e8		inx				inx
.126a	20 ac 22	jsr $22ac			jsr 	RSClaim 					; create the stack frame.
.126d	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.126f	a0 01		ldy #$01			ldy 	#1
.1271	91 78		sta ($78),y			sta 	(rsPointer),y
.1273	c8		iny				iny
.1274	a5 05		lda $05				lda 	temp0+1
.1276	91 78		sta ($78),y			sta 	(rsPointer),y
.1278	a0 00		ldy #$00			ldy 	#0
.127a					_LVCopyData:
.127a	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.127c	c8		iny				iny 								; write allowing for the header bit.
.127d	c8		iny				iny
.127e	c8		iny				iny
.127f	91 78		sta ($78),y			sta 	(rsPointer),y
.1281	88		dey				dey
.1282	88		dey				dey
.1283	ce 11 0b	dec $0b11			dec 	storeSize 					; do it storesize times
.1286	d0 f2		bne $127a			bne 	_LVCopyData
.1288	68		pla				pla
.1289	a8		tay				tay
.128a	68		pla				pla
.128b	aa		tax				tax
.128c	60		rts				rts
.128d					_LVSyntax:
.128d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.128f	20 c6 23	jsr $23c6		jsr	errorHandler
.1292					RestoreLocals:
.1292	a2 00		ldx #$00			ldx 	#0
.1294	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1296	c9 40		cmp #$40			cmp	 	#64
.1298	90 01		bcc $129b			bcc 	_RLocal
.129a	60		rts				rts
.129b					_RLocal:
.129b	8a		txa				txa
.129c	48		pha				pha
.129d	98		tya				tya
.129e	48		pha				pha
.129f	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.12a1	b1 78		lda ($78),y			lda 	(rsPointer),y
.12a3	85 04		sta $04				sta 	temp0
.12a5	c8		iny				iny
.12a6	b1 78		lda ($78),y			lda 	(rsPointer),y
.12a8	85 05		sta $05				sta 	temp0+1
.12aa	a0 00		ldy #$00			ldy 	#0 							; get type back.
.12ac	b1 78		lda ($78),y			lda 	(rsPointer),y
.12ae	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.12b0	f0 28		beq $12da			beq 	_RString
.12b2	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.12b4	c9 25		cmp #$25			cmp 	#markerInt
.12b6	f0 02		beq $12ba			beq 	_RIsInteger
.12b8	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.12ba					_RIsInteger:
.12ba	8a		txa				txa
.12bb	48		pha				pha
.12bc	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.12be					_RCopyBack:
.12be	b1 78		lda ($78),y			lda 	(rsPointer),y
.12c0	88		dey				dey
.12c1	88		dey				dey
.12c2	88		dey				dey
.12c3	91 04		sta ($04),y			sta 	(temp0),y
.12c5	c8		iny				iny
.12c6	c8		iny				iny
.12c7	c8		iny				iny
.12c8	c8		iny				iny
.12c9	ca		dex				dex
.12ca	d0 f2		bne $12be			bne 	_RCopyBack
.12cc	68		pla				pla 								; get size add 3
.12cd	18		clc				clc
.12ce	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.12d0					_RRestoreAAndLoop:
.12d0	20 ce 22	jsr $22ce			jsr 	RSFree
.12d3	68		pla				pla
.12d4	a8		tay				tay
.12d5	68		pla				pla
.12d6	aa		tax				tax
.12d7	4c 92 12	jmp $1292			jmp 	RestoreLocals 				; go see if there are any more locals.
.12da					_RString:
.12da	a2 00		ldx #$00			ldx 	#0
.12dc	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.12de	b1 78		lda ($78),y			lda 	(rsPointer),y
.12e0	95 48		sta $48,x			sta 	esInt0,x
.12e2	c8		iny				iny
.12e3	b1 78		lda ($78),y			lda 	(rsPointer),y
.12e5	95 50		sta $50,x			sta 	esInt1,x
.12e7	18		clc				clc
.12e8	a5 78		lda $78				lda 	rsPointer
.12ea	69 03		adc #$03			adc 	#3
.12ec	95 49		sta $49,x			sta 	esInt0+1,x
.12ee	a5 79		lda $79				lda 	rsPointer+1
.12f0	69 00		adc #$00			adc 	#0
.12f2	95 51		sta $51,x			sta 	esInt1+1,x
.12f4	8a		txa				txa
.12f5	a2 0c		ldx #$0c		ldx	#12
.12f7	20 4d 29	jsr $294d		jsr	stringHandler
.12fa	a0 03		ldy #$03			ldy 	#3 							; get string length
.12fc	b1 78		lda ($78),y			lda 	(rsPointer),y
.12fe	18		clc				clc
.12ff	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1301	4c d0 12	jmp $12d0			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1304					Command_New:
.1304	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; point to first line
.1307	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1309	98		tya				tya
.130a	91 02		sta ($02),y			sta 	(codePtr),y
.130c	20 39 10	jsr $1039			jsr 	CommandClear 				; clear everything down.
.130f	4c 0d 17	jmp $170d			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1312					Command_Poke:
.1312	a9 01		lda #$01			lda 	#1
.1314	d0 06		bne $131c			bne 	PokeGeneral
.1316					Command_Doke:
.1316	a9 02		lda #$02			lda 	#2
.1318	d0 02		bne $131c			bne 	PokeGeneral
.131a					Command_Loke:
.131a	a9 03		lda #$03			lda 	#3
.131c					PokeGeneral:
.131c	48		pha				pha 								; save id (PDL = 123)
.131d	20 ad 1c	jsr $1cad			jsr 	EvaluateRootInteger 		; target address
.1320	20 91 22	jsr $2291			jsr	 	CheckComma
.1323	e8		inx				inx
.1324	20 af 1c	jsr $1caf			jsr 	EvaluateInteger 			; what value to POKE ?
.1327	ca		dex				dex
.1328	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; temp0 points to the target address
.132b	84 0c		sty $0c				sty 	tempShort 					; save Y
.132d	68		pla				pla 								; get copy type (1-3) and dispatch
.132e	aa		tax				tax
.132f	ca		dex				dex
.1330	f0 14		beq $1346			beq 	_Poke1
.1332	ca		dex				dex
.1333	f0 0b		beq $1340			beq 	_Poke2
.1335	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1337	a5 61		lda $61				lda 	esInt3+1
.1339	91 04		sta ($04),y			sta 	(temp0),y
.133b	88		dey				dey
.133c	a5 59		lda $59				lda 	esInt2+1
.133e	91 04		sta ($04),y			sta 	(temp0),y
.1340					_Poke2:
.1340	a0 01		ldy #$01			ldy 	#1
.1342	a5 51		lda $51				lda 	esInt1+1
.1344	91 04		sta ($04),y			sta 	(temp0),y
.1346					_Poke1:
.1346	a0 00		ldy #$00			ldy 	#0
.1348	a5 49		lda $49				lda 	esInt0+1
.134a	91 04		sta ($04),y			sta 	(temp0),y
.134c	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.134e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0b12					lastPrintToken:
>0b12							.fill 	1
.134f					Command_Print:
.134f	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1351	8d 12 0b	sta $0b12			sta 	lastPrintToken
.1354	88		dey				dey
.1355					_PrintLoopSkip:
.1355	c8		iny				iny
.1356					_PrintLoop:
.1356	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1358	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.135a	f0 5b		beq $13b7			beq 	_PrintExit
.135c	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.135e	f0 57		beq $13b7			beq 	_PrintExit
.1360	8d 12 0b	sta $0b12			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1363	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1365	f0 ee		beq $1355			beq 	_PrintLoopSkip
.1367	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.1369	f0 3c		beq $13a7			beq	 	_PrintNewLine
.136b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.136d	f0 40		beq $13af			beq 	_PrintTab
.136f	20 8e 1c	jsr $1c8e			jsr 	EvaluateRoot 				; evaluate something at the root
.1372	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1374	85 04		sta $04				sta 	temp0
.1376	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1378	85 05		sta $05				sta 	1+(temp0)
.137a	a5 40		lda $40				lda 	esType 						; get type
.137c	f0 15		beq $1393			beq		_PrintInteger
.137e	4a		lsr a				lsr 	a 							; check for floating point
.137f	b0 08		bcs $1389			bcs 	_PrintFloat
.1381					_PrintString:
.1381	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1383	20 f9 11	jsr $11f9			jsr 	TOSToTemp0
.1386	4c a1 13	jmp $13a1			jmp 	_PrintTemp0 				; print no leading space.
.1389					_PrintFloat:
.1389	a9 00		lda #$00			lda 	#0 							; stack level.
.138b	a2 14		ldx #$14		ldx	#20
.138d	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1390	4c 9a 13	jmp $139a			jmp 	_PrintSpaceTemp0
.1393					_PrintInteger:
.1393	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1395	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1397	20 67 21	jsr $2167			jsr 	MInt32ToString				; convert to text
.139a					_PrintSpaceTemp0:
.139a	a9 20		lda #$20			lda 	#32
.139c	a2 0e		ldx #$0e		ldx	#14
.139e	20 af 23	jsr $23af		jsr	deviceHandler
.13a1					_PrintTemp0:
.13a1	20 c8 13	jsr $13c8			jsr 	PrintString
.13a4	4c 56 13	jmp $1356			jmp 	_PrintLoop
.13a7					_PrintNewLine:
.13a7	a2 02		ldx #$02		ldx	#2
.13a9	20 af 23	jsr $23af		jsr	deviceHandler
.13ac	4c 55 13	jmp $1355			jmp 	_PrintLoopSkip
.13af					_PrintTab:
.13af	a2 10		ldx #$10		ldx	#16
.13b1	20 af 23	jsr $23af		jsr	deviceHandler
.13b4	4c 55 13	jmp $1355			jmp 	_PrintLoopSkip
.13b7					_PrintExit:
.13b7	ad 12 0b	lda $0b12			lda		lastPrintToken 				; check last token
.13ba	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.13bc	f0 09		beq $13c7			beq 	_PrintExit2
.13be	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.13c0	f0 05		beq $13c7			beq 	_PrintExit2
.13c2	a2 02		ldx #$02		ldx	#2
.13c4	20 af 23	jsr $23af		jsr	deviceHandler
.13c7					_PrintExit2:
.13c7	60		rts				rts
.13c8					PrintString:
.13c8	8a		txa				txa
.13c9	48		pha				pha
.13ca	98		tya				tya
.13cb	48		pha				pha
.13cc	a0 00		ldy #$00			ldy 	#0							; get length
.13ce	b1 04		lda ($04),y			lda 	(temp0),y
.13d0	aa		tax				tax 								; into X
.13d1	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.13d3	f0 10		beq $13e5			beq 	_PSExit
.13d5	ca		dex				dex
.13d6	8a		txa				txa
.13d7	48		pha				pha
.13d8	c8		iny				iny
.13d9	b1 04		lda ($04),y			lda 	(temp0),y
.13db	a2 0e		ldx #$0e		ldx	#14
.13dd	20 af 23	jsr $23af		jsr	deviceHandler
.13e0	68		pla				pla
.13e1	aa		tax				tax
.13e2	4c d1 13	jmp $13d1			jmp 	_PSLoop
.13e5					_PSExit:
.13e5	68		pla				pla
.13e6	a8		tay				tay
.13e7	68		pla				pla
.13e8	aa		tax				tax
.13e9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0b13					paramCount:
>0b13							.fill 	1
.13ea					CallProc:
.13ea	20 30 16	jsr $1630			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.13ed	48		pha				pha 								; save length on stack
.13ee	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.13f0	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.13f2	48		pha				pha
.13f3	a5 04		lda $04				lda 	temp0
.13f5	48		pha				pha
.13f6	98		tya				tya 								; calculate Y + length
.13f7	18		clc				clc
.13f8	65 0c		adc $0c				adc 	tempShort
.13fa	a8		tay				tay
.13fb	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.13fd					_CallProcEvalParams:
.13fd	e8		inx				inx
.13fe	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.1400	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1402	f0 0b		beq $140f			beq 	_CPDoneParams
.1404	20 90 1c	jsr $1c90			jsr 	Evaluate 					; evaluate a parameter
.1407	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1409	c8		iny				iny
.140a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.140c	f0 ef		beq $13fd			beq 	_CallProcEvalParams
.140e	88		dey				dey 								; undo consumption.
.140f					_CPDoneParams:
.140f	20 84 22	jsr $2284			jsr 	CheckRightParen 			; check closing parenthesis.
.1412	8e 13 0b	stx $0b13			stx 	paramCount 					; store parameter count+1
.1415	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1417	a9 50		lda #$50			lda 	#markerPROC
.1419	20 ac 22	jsr $22ac			jsr 	RSClaim
.141c	a9 01		lda #$01			lda 	#1 							; store return address.
.141e	20 d8 22	jsr $22d8			jsr 	RSSavePosition
.1421	68		pla				pla 								; get the new code Ptr
.1422	85 02		sta $02				sta 	codePtr
.1424	68		pla				pla
.1425	85 03		sta $03				sta 	codePtr+1
.1427	68		pla				pla 								; length of name + 4 is the param start.
.1428	18		clc				clc
.1429	69 04		adc #$04			adc 	#4
.142b	a8		tay				tay
.142c	a2 ff		ldx #$ff			ldx 	#$FF
.142e					_CPLoadParameters:
.142e	e8		inx				inx 								; point to where the address should be loaded.
.142f	ec 13 0b	cpx $0b13			cpx 	paramCount 					; too many parameters in definition ?
.1432	f0 1e		beq $1452			beq 	_CPParamError
.1434	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1436	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.1438	f0 0e		beq $1448			beq 	_CPParamComplete 			; done all the parameters
.143a	20 20 12	jsr $1220			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.143d	20 97 11	jsr $1197			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1440	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1442	c8		iny				iny
.1443	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1445	f0 e7		beq $142e			beq 	_CPLoadParameters
.1447	88		dey				dey 								; no, unconsume and check for )
.1448					_CPParamComplete:
.1448	20 84 22	jsr $2284			jsr 	CheckRightParen 			; check )
.144b	e8		inx				inx 								; check right number of parameters
.144c	ec 13 0b	cpx $0b13			cpx 	paramCount
.144f	d0 01		bne $1452			bne 	_CPParamError
.1451	60		rts				rts
.1452					_CPParamError:
.1452	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1454	20 c6 23	jsr $23c6		jsr	errorHandler
.1457					ReturnProc:
.1457	20 92 12	jsr $1292			jsr 	RestoreLocals 				; get the locals back.
.145a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.145c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.145e	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1460	f0 05		beq $1467			beq 	_isok
.1462	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1464	20 c6 23	jsr $23c6		jsr	errorHandler
.1467					_isok:
.1467	a9 01		lda #$01			lda 	#1
.1469	20 eb 22	jsr $22eb			jsr 	RSLoadPosition 				; reload the position from offset 1.
.146c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.146e	20 ce 22	jsr $22ce			jsr 	RSFree
.1471	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0b14					dataPtr:
>0b14							.fill 	2
.0b16					dataIndex:
>0b16							.fill 	1
.1472					CommandRead:
.1472	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1474	20 e2 1c	jsr $1ce2			jsr 	EvaluateReference
.1477	20 b8 14	jsr $14b8			jsr 	SwapDPCP 					; use the data pointer.
.147a	b1 02		lda ($02),y			lda 	(codePtr),y 				; see where it is.
.147c	c8		iny				iny
.147d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.147f	f0 07		beq $1488			beq 	_CRInData
.1481	88		dey				dey
.1482	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1484	aa		tax				tax
.1485	20 b8 34	jsr $34b8			jsr 	ScanForward
.1488					_CRInData:
.1488	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.148a	20 90 1c	jsr $1c90			jsr 	Evaluate
.148d	ca		dex				dex 								; and write the value.
.148e	20 97 11	jsr $1197			jsr 	WriteValue
.1491	20 b8 14	jsr $14b8			jsr 	SwapDPCP 					; get the code pointer back.
.1494	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1496	c8		iny				iny
.1497	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.1499	f0 d7		beq $1472			beq 	CommandRead
.149b	88		dey				dey
.149c	60		rts				rts
.149d					CommandData:
.149d	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.149f	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.14a1	20 b8 34	jsr $34b8			jsr 	ScanForward
.14a4	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.14a5	60		rts				rts
.14a6					CommandRestore:
.14a6	ad c8 0a	lda $0ac8			lda 	basePage
.14a9	8d 14 0b	sta $0b14			sta 	dataPtr
.14ac	ad c9 0a	lda $0ac9			lda 	basePage+1
.14af	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14b2	a9 03		lda #$03			lda 	#3
.14b4	8d 16 0b	sta $0b16			sta 	dataIndex
.14b7	60		rts				rts
.14b8					SwapDPCP:
.14b8	8a		txa				txa
.14b9	48		pha				pha
.14ba	98		tya				tya 								; swap Y, DataIndex
.14bb	ac 16 0b	ldy $0b16			ldy 	DataIndex
.14be	8d 16 0b	sta $0b16			sta 	DataIndex
.14c1	a5 02		lda $02				lda 	codePtr 					; swap code/dataptr low
.14c3	ae 14 0b	ldx $0b14			ldx 	dataptr
.14c6	8d 14 0b	sta $0b14			sta 	dataPtr
.14c9	86 02		stx $02				stx 	codePtr
.14cb	a5 03		lda $03				lda 	codePtr+1 					; swap code/dataptr high.
.14cd	ae 15 0b	ldx $0b15			ldx 	dataptr+1
.14d0	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14d3	86 03		stx $03				stx 	codePtr+1
.14d5	68		pla				pla
.14d6	aa		tax				tax
.14d7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.14d8					Command_Rem:
.14d8					Command_Rem2:
.14d8	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.14da	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.14dc	d0 06		bne $14e4			bne 	_CRNotString
.14de	c8		iny				iny
.14df	98		tya				tya
.14e0	38		sec				sec
.14e1	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.14e3	a8		tay				tay
.14e4					_CRNotString:
.14e4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.344f					Command_Repeat:
.344f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.3451	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.3453	20 ac 22	jsr $22ac			jsr 	RSClaim
.3456	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.3458	20 d8 22	jsr $22d8			jsr 	RSSavePosition
.345b	60		rts				rts
.345c					Command_Until:
.345c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.345e	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.3460	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.3462	f0 05		beq $3469			beq 	_isok
.3464	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.3466	20 c6 23	jsr $23c6		jsr	errorHandler
.3469					_isok:
.3469	20 ad 1c	jsr $1cad			jsr 	EvaluateRootInteger 		; at the bottom.
.346c	20 38 22	jsr $2238			jsr 	MInt32Zero					; check if TOS zero
.346f	d0 06		bne $3477			bne 	_CUExit
.3471	a9 01		lda #$01			lda 	#1
.3473	20 eb 22	jsr $22eb			jsr 	RSLoadPosition 				; reload the position from offset 1.
.3476	60		rts				rts
.3477					_CUExit:
.3477	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.3479	20 ce 22	jsr $22ce			jsr 	RSFree
.347c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.14e5					Command_Run:
.14e5	a2 ff		ldx #$ff			ldx 	#$FF
.14e7	9a		txs				txs
.14e8	20 39 10	jsr $1039			jsr 	CommandClear 				; clear everything.
.14eb	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; back to the start.
.14ee	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.14f0					CRNextInstruction:
.14f0	64 7b		stz $7b				stz 	softMemAlloc+1
.14f2	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.14f4	10 1c		bpl $1512			bpl 	_CRNotToken
.14f6	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.14f8	b0 0c		bcs $1506			bcs 	_CRExecute
.14fa	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.14fc	b0 4e		bcs $154c			bcs 	Unimplemented
.14fe	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1500	b0 04		bcs $1506			bcs 	_CRExecute
.1502	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1504	b0 16		bcs $151c			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1506					_CRExecute:
.1506	c8		iny				iny 								; consume it.
.1507	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1508	aa		tax				tax
.1509	20 0f 15	jsr $150f			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.150c	4c f0 14	jmp $14f0			jmp 	CRNextInstruction
.150f					_CRRunRoutine:
.150f	7c 56 15	jmp ($1556,x)			jmp 	(Group0Vectors,x)
.1512					_CRNotToken:
.1512	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1514	b0 36		bcs $154c			bcs 	Unimplemented
.1516					_CRDefaultLet:
.1516	20 84 11	jsr $1184			jsr 	CommandLet 					; do the default, LET
.1519	4c f0 14	jmp $14f0			jmp 	CRNextInstruction
.151c					_CRCheckIndirect:
.151c	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.151e	f0 f6		beq $1516			beq 	_CRDefaultLet
.1520	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1522	f0 f2		beq $1516			beq 	_CRDefaultLet
.1524	d0 26		bne $154c			bne 	Unimplemented
.1526					CommandShift1:
.1526	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1528	10 22		bpl $154c			bpl 	Unimplemented 				; we have an error as this should not happen.
.152a	0a		asl a				asl 	a 							; double into X
.152b	aa		tax				tax
.152c	c8		iny				iny 								; advance over it.
.152d	20 33 15	jsr $1533			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1530	4c f0 14	jmp $14f0			jmp 	CRNextInstruction
.1533					_RunIt:
.1533	7c 0e 16	jmp ($160e,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1536					CommandShift2:
.1536	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1538	20 26 26	jsr $2626		jsr	extensionHandler
.153b	4c f0 14	jmp $14f0			jmp 	CRNextInstruction
.153e					CommandColon:
.153e	60		rts				rts
.153f					ResetCodeAddress:
.153f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1542	85 02		sta $02				sta 	codePtr
.1544	ad c9 0a	lda $0ac9			lda 	basePage+1
.1547	85 03		sta $03				sta 	codePtr+1
.1549	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.154b	60		rts				rts
.154c					Unimplemented:
.154c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.154e	20 c6 23	jsr $23c6		jsr	errorHandler
.1551					TKErr01:
.1551					TKErr02:
.1551					TKErr03:
.1551					TKErr04:
.1551					TKErr05:
.1551					TKErr06:
.1551					TKErr07:
.1551					TKErr08:
.1551					TKErr09:
.1551					TKErr10:
.1551	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1553	20 c6 23	jsr $23c6		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1556					Group0Vectors:
>1556	13 17					.word	AdvanceNextLine          ; $80 [[eol]]
>1558	26 15					.word	CommandShift1            ; $81 [[sh1]]
>155a	36 15					.word	CommandShift2            ; $82 [[sh2]]
>155c	51 15					.word	TKErr09                  ; $83 [[sh3]]
>155e	51 15					.word	TKErr10                  ; $84 [[fpc]]
>1560	51 15					.word	TKErr08                  ; $85 [[str]]
>1562	9c 18					.word	AndHandler               ; $86 and
>1564	89 18					.word	OrHandler                ; $87 or
>1566	76 18					.word	XorHandler               ; $88 xor
>1568	be 19					.word	CompareGreaterEq         ; $89 >=
>156a	c8 19					.word	CompareLessEq            ; $8a <=
>156c	aa 19					.word	CompareGreater           ; $8b >
>156e	a0 19					.word	CompareLess              ; $8c <
>1570	96 19					.word	CompareEquals            ; $8d =
>1572	b4 19					.word	CompareNotEquals         ; $8e <>
>1574	07 18					.word	AddHandler               ; $8f +
>1576	2a 18					.word	SubHandler               ; $90 -
>1578	c2 18					.word	ShrHandler               ; $91 >>
>157a	af 18					.word	ShlHandler               ; $92 <<
>157c	3d 18					.word	MulHandler               ; $93 *
>157e	50 18					.word	DivHandler               ; $94 /
>1580	63 18					.word	ModHandler               ; $95 mod
>1582	fb 18					.word	PowerHandler             ; $96 ^
>1584	d5 18					.word	WordRefHandler           ; $97 !
>1586	e8 18					.word	ByteRefHandler           ; $98 ?
>1588	4f 34					.word	Command_Repeat           ; $99 repeat
>158a	7d 34					.word	Command_While            ; $9a while
>158c	be 32					.word	Command_FOR              ; $9b for
>158e	97 10					.word	CommandIf                ; $9c if
>1590	51 15					.word	TKErr04                  ; $9d defproc
>1592	5c 34					.word	Command_Until            ; $9e until
>1594	a0 34					.word	Command_Wend             ; $9f wend
>1596	1f 33					.word	Command_NEXT             ; $a0 next
>1598	51 15					.word	TKErr06                  ; $a1 then
>159a	d2 10					.word	Command_ENDIF            ; $a2 endif
>159c	57 14					.word	ReturnProc               ; $a3 endproc
>159e	97 1b					.word	UnaryParenthesis         ; $a4 (
>15a0	f5 1c					.word	UnaryLen                 ; $a5 len(
>15a2	39 1d					.word	UnarySgn                 ; $a6 sgn(
>15a4	22 1d					.word	UnaryAbs                 ; $a7 abs(
>15a6	92 1d					.word	Unary_Random             ; $a8 random(
>15a8	dc 1d					.word	Unary_Page               ; $a9 page
>15aa	0d 22					.word	MInt32True               ; $aa true
>15ac	11 22					.word	MInt32False              ; $ab false
>15ae	a7 1d					.word	Unary_Min                ; $ac min(
>15b0	ab 1d					.word	Unary_Max                ; $ad max(
>15b2	96 1e					.word	UnarySys                 ; $ae sys(
>15b4	59 1e					.word	UnaryTimer               ; $af timer(
>15b6	ec 1b					.word	EventFunction            ; $b0 event(
>15b8	82 1e					.word	UnaryGet                 ; $b1 get(
>15ba	72 1e					.word	UnaryInkey               ; $b2 inkey(
>15bc	2d 1e					.word	UnaryAlloc               ; $b3 alloc(
>15be	be 1e					.word	ExecChr                  ; $b4 chr$(
>15c0	ee 1e					.word	ExecLeft                 ; $b5 left$(
>15c2	0b 1f					.word	ExecMid                  ; $b6 mid$(
>15c4	33 1f					.word	ExecRight                ; $b7 right$(
>15c6	d8 19					.word	Event_Str                ; $b8 str$(
>15c8	07 1a					.word	UnaryVal                 ; $b9 val(
>15ca	50 1d					.word	UnaryPeek                ; $ba peek(
>15cc	56 1d					.word	UnaryDeek                ; $bb deek(
>15ce	5c 1d					.word	UnaryLeek                ; $bc leek(
>15d0	13 1d					.word	UnaryAsc                 ; $bd asc(
>15d2	07 1e					.word	UnaryIntToFloat          ; $be int(
>15d4	1a 1e					.word	UnaryFloatToInt          ; $bf float(
>15d6	0a 1a					.word	UnaryIsVal               ; $c0 isval(
>15d8	d5 1e					.word	ExecUpper                ; $c1 upper$(
>15da	d2 1e					.word	ExecLower                ; $c2 lower$(
>15dc	ea 1d					.word	UnaryReference           ; $c3 @
>15de	00 1e					.word	UnaryComplement          ; $c4 ~
>15e0	fd 1d					.word	UnaryHexMarker           ; $c5 &
>15e2	51 15					.word	TKErr01                  ; $c6 )
>15e4	3e 15					.word	CommandColon             ; $c7 :
>15e6	51 15					.word	TKErr02                  ; $c8 ,
>15e8	51 15					.word	TKErr03                  ; $c9 ;
>15ea	d8 14					.word	Command_Rem2             ; $ca '
>15ec	51 15					.word	TKErr07                  ; $cb to
>15ee	51 15					.word	TKErr05                  ; $cc step
>15f0	ea 13					.word	CallProc                 ; $cd proc
>15f2	02 12					.word	CommandLocal             ; $ce local
>15f4	89 10					.word	Command_Dim              ; $cf dim
>15f6	d8 14					.word	Command_Rem              ; $d0 rem
>15f8	84 11					.word	CommandLet               ; $d1 let
>15fa	d3 10					.word	Command_Input            ; $d2 input
>15fc	cc 10					.word	Command_ELSE             ; $d3 else
>15fe	ba 17					.word	Command_VDU              ; $d4 vdu
>1600	4f 13					.word	Command_Print            ; $d5 print
>1602	88 17					.word	CommandGOTO              ; $d6 goto
>1604	5d 17					.word	CommandGOSUB             ; $d7 gosub
>1606	70 17					.word	CommandRETURN            ; $d8 return
>1608	9d 14					.word	CommandData              ; $d9 data
>160a	2b 10					.word	Command_Assert           ; $da assert
>160c	12 13					.word	Command_Poke             ; $db poke
>160e	16 13					.word	Command_Doke             ; $dc doke
>1610	1a 13					.word	Command_Loke             ; $dd loke
>1612	2d 17					.word	Command_Ink              ; $de ink
>1614	38 17					.word	Command_Paper            ; $df paper
>1616	27 17					.word	Command_CLS              ; $e0 cls
>1618	43 17					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.161a					Group1Vectors:
>161a	39 10					.word	CommandClear             ; $86 clear
>161c	4c 15					.word	Unimplemented            ; $87 load
>161e	4c 15					.word	Unimplemented            ; $88 save
>1620	cd 33					.word	CommandList              ; $89 list
>1622	04 13					.word	Command_New              ; $8a new
>1624	e5 14					.word	Command_Run              ; $8b run
>1626	72 14					.word	CommandRead              ; $8c read
>1628	a6 14					.word	CommandRestore           ; $8d restore
>162a	0d 17					.word	CommandEnd               ; $8e end
>162c	08 17					.word	CommandStop              ; $8f stop
>162e	10 17					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0b17					procList:
>0b17							.fill 	2		 					; terminated by name high.
.0b19					yInLine:
>0b19							.fill 	1
.1630					FindProcedure:
.1630	8c 19 0b	sty $0b19			sty 	yInLine
.1633	20 ee 16	jsr $16ee			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1636	85 06		sta $06				sta 	temp1
.1638	ad 17 0b	lda $0b17			lda		procList 					; put procList address in temp2
.163b	85 08		sta $08				sta 	temp2
.163d	ad 18 0b	lda $0b18			lda 	procList+1
.1640	85 09		sta $09				sta 	temp2+1
.1642	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1644					_FPLoop:
.1644	b1 08		lda ($08),y			lda 	(temp2),y
.1646	f0 4f		beq $1697			beq 	_FPError 					; if so, we don't know this procedure.
.1648	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.164a	c8		iny				iny
.164b	b1 08		lda ($08),y			lda 	(temp2),y
.164d	85 04		sta $04				sta 	temp0
.164f	c8		iny				iny
.1650	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1652	c5 06		cmp $06				cmp 	temp1
.1654	d0 2b		bne $1681			bne 	_FPNext 					; hash is different, go to next.
.1656	38		sec				sec
.1657	ad 19 0b	lda $0b19			lda 	yInLine 					; position in line must be at least 4
.165a	e9 04		sbc #$04			sbc 	#4
.165c	18		clc				clc
.165d	65 02		adc $02				adc 	codePtr
.165f	85 0a		sta $0a				sta 	temp3
.1661	a5 03		lda $03				lda 	codePtr+1
.1663	69 00		adc #$00			adc 	#0
.1665	85 0b		sta $0b				sta 	temp3+1
.1667	98		tya				tya
.1668	48		pha				pha
.1669	a0 04		ldy #$04			ldy 	#4
.166b					_FPCName:
.166b	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.166d	d1 04		cmp ($04),y			cmp 	(temp0),y
.166f	d0 0e		bne $167f			bne 	_FPpulYNext 				; if different go to next one.
.1671	c8		iny				iny
.1672	c9 3a		cmp #$3a			cmp 	#$3A
.1674	90 f5		bcc $166b			bcc 	_FPCName 					; compare the whole lot....
.1676	68		pla				pla 								; throw away the saved Y
.1677	98		tya				tya 								; length of name is Y-4
.1678	38		sec				sec
.1679	e9 04		sbc #$04			sbc 	#4
.167b	ac 19 0b	ldy $0b19			ldy 	yInLine  					; get the original Y back
.167e	60		rts				rts
.167f					_FPpulYNext:
.167f	68		pla				pla
.1680	a8		tay				tay
.1681					_FPNext:
.1681	c8		iny				iny 								; next procedure record.
.1682	10 c0		bpl $1644			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1684	98		tya				tya 								; subtract 128 from Y
.1685	38		sec				sec
.1686	e9 80		sbc #$80			sbc 	#128
.1688	a8		tay				tay
.1689	18		clc				clc 								; add 128 to temp2, so we can have more than
.168a	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.168c	69 80		adc #$80			adc 	#128
.168e	85 08		sta $08				sta 	temp2
.1690	90 b2		bcc $1644			bcc 	_FPLoop
.1692	e6 09		inc $09				inc 	temp2+1
.1694	4c 44 16	jmp $1644			jmp 	_FPLoop
.1697					_FPError:
.1697	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1699	20 c6 23	jsr $23c6		jsr	errorHandler
.169c					ScanProc:
.169c	98		tya				tya
.169d	48		pha				pha
.169e	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.16a0	8d 17 0b	sta $0b17			sta 	procList
.16a3	a5 10		lda $10				lda 	lowMemory+1
.16a5	8d 18 0b	sta $0b18			sta 	procList+1
.16a8	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; back to the start.
.16ab					_ScanLoop:
.16ab	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.16ad	b1 02		lda ($02),y			lda 	(codePtr),y
.16af	f0 2a		beq $16db			beq 	_ScanExit
.16b1	a0 03		ldy #$03			ldy 	#3							; get first token
.16b3	b1 02		lda ($02),y			lda 	(codePtr),y
.16b5	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.16b7	d0 12		bne $16cb			bne 	_ScanNext
.16b9	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.16bb	20 e3 16	jsr $16e3			jsr 	_ScanWrite
.16be	a5 02		lda $02				lda 	codePtr
.16c0	20 e3 16	jsr $16e3			jsr 	_ScanWrite
.16c3	a0 04		ldy #$04			ldy 	#4 							; start of name part
.16c5	20 ee 16	jsr $16ee			jsr 	CalculateProcedureHash 		; calculate procedure hash
.16c8	20 e3 16	jsr $16e3			jsr 	_ScanWrite
.16cb					_ScanNext:
.16cb	18		clc				clc
.16cc	a0 00		ldy #$00			ldy 	#0
.16ce	b1 02		lda ($02),y			lda 	(codePtr),y
.16d0	65 02		adc $02				adc 	codePtr
.16d2	85 02		sta $02				sta 	codePtr
.16d4	90 d5		bcc $16ab			bcc 	_ScanLoop
.16d6	e6 03		inc $03				inc 	codePtr+1
.16d8	4c ab 16	jmp $16ab			jmp 	_ScanLoop
.16db					_ScanExit:
.16db	a9 00		lda #$00			lda 	#0 							; write ending zero.
.16dd	20 e3 16	jsr $16e3			jsr 	_ScanWrite
.16e0	68		pla				pla
.16e1	a8		tay				tay
.16e2	60		rts				rts
.16e3					_ScanWrite:
.16e3	a0 00		ldy #$00			ldy 	#0
.16e5	91 0f		sta ($0f),y			sta 	(lowMemory),y
.16e7	e6 0f		inc $0f				inc 	lowMemory
.16e9	d0 02		bne $16ed			bne 	_SWNoCarry
.16eb	e6 10		inc $10				inc 	lowMemory+1
.16ed					_SWNoCarry:
.16ed	60		rts				rts
.16ee					CalculateProcedureHash:
.16ee	a9 00		lda #$00			lda 	#0 							; clear hash.
.16f0	85 04		sta $04				sta 	temp0
.16f2					_CPHLoop:
.16f2	18		clc				clc 								; add character and rotate and add carry back in
.16f3	b1 02		lda ($02),y			lda 	(codePtr),y
.16f5	65 04		adc $04				adc 	temp0
.16f7	6a		ror a				ror 	a
.16f8	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.16fa	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.16fc	b1 02		lda ($02),y			lda 	(codePtr),y
.16fe	c8		iny				iny 								; advance incase we go round again.
.16ff	c9 3a		cmp #$3a			cmp 	#$3A
.1701	90 ef		bcc $16f2			bcc 	_CPHLoop
.1703	a5 04		lda $04				lda 	temp0
.1705	a9 aa		lda #$aa			lda 	#$AA
.1707	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1708					CommandStop:
.1708	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.170a	20 c6 23	jsr $23c6		jsr	errorHandler
.170d					CommandEnd:
.170d	4c 0d 17	jmp $170d			jmp 	CommandEnd
.1710					CommandXemu:
.1710	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1713					AdvanceNextLine:
.1713	a0 00		ldy #$00			ldy 	#0 							; get offset
.1715	b1 02		lda ($02),y			lda 	(codePtr),y
.1717	18		clc				clc 								; add to codePtr
.1718	65 02		adc $02				adc 	codePtr
.171a	85 02		sta $02				sta 	codePtr
.171c	90 02		bcc $1720			bcc 	_ANLNoCarry
.171e	e6 03		inc $03				inc 	codePtr+1
.1720					_ANLNoCarry:
.1720	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1722	f0 e9		beq $170d			beq 	CommandEnd 					; execute END
.1724	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1726	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1727					Command_CLS:
.1727	a2 00		ldx #$00		ldx	#0
.1729	20 af 23	jsr $23af		jsr	deviceHandler
.172c	60		rts				rts
.172d					Command_Ink:
.172d	a2 00		ldx #$00			ldx 	#0
.172f	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger
.1732	a2 06		ldx #$06		ldx	#6
.1734	20 af 23	jsr $23af		jsr	deviceHandler
.1737	60		rts				rts
.1738					Command_Paper:
.1738	a2 00		ldx #$00			ldx 	#0
.173a	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger
.173d	a2 0c		ldx #$0c		ldx	#12
.173f	20 af 23	jsr $23af		jsr	deviceHandler
.1742	60		rts				rts
.1743					Command_Locate:
.1743	a2 00		ldx #$00			ldx 	#0
.1745	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger
.1748	20 91 22	jsr $2291			jsr 	CheckComma
.174b	e8		inx				inx
.174c	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger
.174f	98		tya				tya
.1750	48		pha				pha
.1751	a4 49		ldy $49				ldy 	esInt0+1
.1753	a5 48		lda $48				lda 	esInt0
.1755	a2 0a		ldx #$0a		ldx	#10
.1757	20 af 23	jsr $23af		jsr	deviceHandler
.175a	68		pla				pla
.175b	a8		tay				tay
.175c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.175d					CommandGOSUB:
.175d	20 ad 1c	jsr $1cad			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1760	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1762	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1764	20 ac 22	jsr $22ac			jsr 	RSClaim
.1767	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1769	20 d8 22	jsr $22d8			jsr 	RSSavePosition
.176c	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.176e	f0 1b		beq $178b			beq 	GotoTOS 					; and do a GOTO there.
.1770					CommandRETURN:
.1770	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1772	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1774	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1776	f0 05		beq $177d			beq 	_isok
.1778	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.177a	20 c6 23	jsr $23c6		jsr	errorHandler
.177d					_isok:
.177d	a9 01		lda #$01			lda 	#1
.177f	20 eb 22	jsr $22eb			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1782	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1784	20 ce 22	jsr $22ce			jsr 	RSFree
.1787	60		rts				rts
.1788					CommandGOTO:
.1788	20 ad 1c	jsr $1cad			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.178b					GotoTOS:
.178b	20 3f 15	jsr $153f			jsr 	ResetCodeAddress 			; simple search.
.178e					_GotoSearch:
.178e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1790	b1 02		lda ($02),y			lda 	(codePtr),y
.1792	f0 21		beq $17b5			beq 	_GotoError 					; not found.
.1794	c8		iny				iny									; check LSB match
.1795	b1 02		lda ($02),y			lda 	(codePtr),y
.1797	d5 48		cmp $48,x			cmp 	esInt0,x
.1799	d0 07		bne $17a2			bne 	_GotoNext
.179b	c8		iny				iny
.179c	b1 02		lda ($02),y			lda 	(codePtr),y
.179e	d5 50		cmp $50,x			cmp 	esInt1,x
.17a0	f0 10		beq $17b2			beq 	_GotoFound
.17a2					_GotoNext:
.17a2	a0 00		ldy #$00			ldy 	#0 							; go next line
.17a4	b1 02		lda ($02),y			lda 	(codePtr),y
.17a6	18		clc				clc
.17a7	65 02		adc $02				adc 	codePtr
.17a9	85 02		sta $02				sta 	codePtr
.17ab	90 e1		bcc $178e			bcc 	_GotoSearch
.17ad	e6 03		inc $03				inc 	codePtr+1
.17af	4c 8e 17	jmp $178e			jmp 	_GotoSearch
.17b2					_GotoFound:
.17b2	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.17b4	60		rts				rts
.17b5					_GotoError:
.17b5	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.17b7	20 c6 23	jsr $23c6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.17ba					Command_VDU:
.17ba	20 ad 1c	jsr $1cad			jsr 	EvaluateRootInteger 			; get integer at root.
.17bd	a5 48		lda $48				lda 	esInt0
.17bf	a2 0e		ldx #$0e		ldx	#14
.17c1	20 af 23	jsr $23af		jsr	deviceHandler
.17c4					_CVNext:
.17c4	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.17c6	c8		iny				iny
.17c7	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.17c9	f0 ef		beq $17ba			beq 	Command_VDU
.17cb	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.17cd	d0 0a		bne $17d9			bne 	_CVExit
.17cf	a5 50		lda $50				lda 	esInt1
.17d1	a2 0e		ldx #$0e		ldx	#14
.17d3	20 af 23	jsr $23af		jsr	deviceHandler
.17d6	4c c4 17	jmp $17c4			jmp 	_CVNext
.17d9	88		dey		_CVExit:dey
.17da	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.347d					Command_While:
.347d	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.347f	a2 04		ldx #$04			ldx 	#4
.3481	20 ac 22	jsr $22ac			jsr 	RSClaim 					; create on stack.
.3484	88		dey				dey
.3485	a9 01		lda #$01			lda 	#1
.3487	20 d8 22	jsr $22d8			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.348a	c8		iny				iny
.348b	20 af 1c	jsr $1caf			jsr 	EvaluateInteger				; get the conditional
.348e	20 38 22	jsr $2238			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.3491	f0 01		beq $3494			beq 	_CWFail
.3493	60		rts				rts
.3494					_CWFail:
.3494	a9 04		lda #$04			lda 	#4
.3496	20 ce 22	jsr $22ce			jsr 	RSFree 						; close the just opened position.
.3499	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.349b	aa		tax				tax
.349c	20 b8 34	jsr $34b8			jsr 	ScanForward
.349f	60		rts				rts
.34a0					Command_Wend:
.34a0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.34a2	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.34a4	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.34a6	f0 05		beq $34ad			beq 	_isok
.34a8	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.34aa	20 c6 23	jsr $23c6		jsr	errorHandler
.34ad					_isok:
.34ad	a9 01		lda #$01			lda 	#1
.34af	20 eb 22	jsr $22eb			jsr 	RSLoadPosition				; go back until true
.34b2	a9 04		lda #$04			lda 	#4
.34b4	20 ce 22	jsr $22ce			jsr 	RSFree 						; close the loop
.34b7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.17db					BinaryProcess:
.17db	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.17dd	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.17df	0a		asl a				asl 	a
.17e0	30 0e		bmi $17f0			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.17e2	18		clc				clc 								; return CC for integer
.17e3	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.17e5	f0 08		beq $17ef			beq 	_BPExit 					; if both integer then return with CC.
.17e7	20 f5 17	jsr $17f5			jsr 	BPMakeBothFloat 			; make both float
.17ea	a9 01		lda #$01			lda 	#$01 						; set result type to float
.17ec	95 40		sta $40,x			sta 	esType,x
.17ee	38		sec				sec 								; and return with carry set.
.17ef					_BPExit:
.17ef	60		rts				rts
.17f0					_BPStringType:
.17f0	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17f2	20 c6 23	jsr $23c6		jsr	errorHandler
.17f5					BPMakeBothFloat:
.17f5	e8		inx				inx
.17f6	20 fa 17	jsr $17fa			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.17f9	ca		dex				dex
.17fa					BPMakeFloat:
.17fa	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.17fc	4a		lsr a				lsr 	a
.17fd	b0 07		bcs $1806			bcs 	_BPIsFloat 					; already a float if set.
.17ff	8a		txa				txa
.1800	a2 1a		ldx #$1a		ldx	#26
.1802	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1805	aa		tax				tax
.1806					_BPIsFloat:
.1806	60		rts				rts
.1807					AddHandler:
.1807	20 56 1a	jsr $1a56			jsr 	DereferenceTwo 				; dereference top two on stack.
.180a	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.180c	35 41		and $41,x			and 	esType+1,x
.180e	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.1810	d0 10		bne $1822			bne 	_AHStringConcat				; concatenate strings.
.1812	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.1815	b0 03		bcs $181a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1817	4c f5 20	jmp $20f5			jmp 	MInt32Add 							; else do it as integer.
.181a					_IsFPOperation:
.181a	8a		txa				txa 								; call the relevant fp routine
.181b	a2 02		ldx #$02		ldx	#2
.181d	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1820	aa		tax				tax
.1821	60		rts				rts
.1822					_AHStringConcat:
.1822	8a		txa				txa 								; handled by the string module.
.1823	a2 04		ldx #$04		ldx	#4
.1825	20 4d 29	jsr $294d		jsr	stringHandler
.1828	aa		tax				tax
.1829	60		rts				rts
.182a					SubHandler:
.182a	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.182d	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.1830	b0 03		bcs $1835			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1832	4c 0f 21	jmp $210f			jmp 	MInt32Sub 							; else do it as integer.
.1835					_IsFPOperation:
.1835	8a		txa				txa 								; call the relevant fp routine
.1836	a2 10		ldx #$10		ldx	#16
.1838	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.183b	aa		tax				tax
.183c	60		rts				rts
.183d					MulHandler:
.183d	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.1840	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.1843	b0 03		bcs $1848			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1845	4c 29 21	jmp $2129			jmp 	MInt32Multiply 							; else do it as integer.
.1848					_IsFPOperation:
.1848	8a		txa				txa 								; call the relevant fp routine
.1849	a2 0a		ldx #$0a		ldx	#10
.184b	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.184e	aa		tax				tax
.184f	60		rts				rts
.1850					DivHandler:
.1850	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.1853	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.1856	b0 03		bcs $185b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1858	4c e6 1f	jmp $1fe6			jmp 	MInt32SDivide 							; else do it as integer.
.185b					_IsFPOperation:
.185b	8a		txa				txa 								; call the relevant fp routine
.185c	a2 06		ldx #$06		ldx	#6
.185e	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1861	aa		tax				tax
.1862	60		rts				rts
.1863					ModHandler:
.1863	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.1866	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.1869	b0 03		bcs $186e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.186b	4c 64 20	jmp $2064			jmp 	MInt32Modulus 							; else do it as integer.
.186e					_IsFPOperation:
.186e	8a		txa				txa 								; call the relevant fp routine
.186f	a2 08		ldx #$08		ldx	#8
.1871	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1874	aa		tax				tax
.1875	60		rts				rts
.1876					XorHandler:
.1876	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.1879	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.187c	b0 03		bcs $1881			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.187e	4c 98 1f	jmp $1f98			jmp 	MInt32Xor 							; else do it as integer.
.1881					_IsFPOperation:
.1881	8a		txa				txa 								; call the relevant fp routine
.1882	a2 08		ldx #$08		ldx	#8
.1884	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1887	aa		tax				tax
.1888	60		rts				rts
.1889					OrHandler:
.1889	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.188c	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.188f	b0 03		bcs $1894			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1891	4c 7f 1f	jmp $1f7f			jmp 	MInt32Or 							; else do it as integer.
.1894					_IsFPOperation:
.1894	8a		txa				txa 								; call the relevant fp routine
.1895	a2 08		ldx #$08		ldx	#8
.1897	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.189a	aa		tax				tax
.189b	60		rts				rts
.189c					AndHandler:
.189c	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.189f	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.18a2	b0 03		bcs $18a7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18a4	4c 66 1f	jmp $1f66			jmp 	MInt32And 							; else do it as integer.
.18a7					_IsFPOperation:
.18a7	8a		txa				txa 								; call the relevant fp routine
.18a8	a2 08		ldx #$08		ldx	#8
.18aa	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.18ad	aa		tax				tax
.18ae	60		rts				rts
.18af					ShlHandler:
.18af	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.18b2	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.18b5	b0 03		bcs $18ba			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18b7	4c 30 19	jmp $1930			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.18ba					_IsFPOperation:
.18ba	8a		txa				txa 								; call the relevant fp routine
.18bb	a2 08		ldx #$08		ldx	#8
.18bd	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.18c0	aa		tax				tax
.18c1	60		rts				rts
.18c2					ShrHandler:
.18c2	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.18c5	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.18c8	b0 03		bcs $18cd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18ca	4c 33 19	jmp $1933			jmp 	MInt32ShiftRightX 							; else do it as integer.
.18cd					_IsFPOperation:
.18cd	8a		txa				txa 								; call the relevant fp routine
.18ce	a2 08		ldx #$08		ldx	#8
.18d0	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.18d3	aa		tax				tax
.18d4	60		rts				rts
.18d5					WordRefHandler:
.18d5	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.18d8	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.18db	b0 03		bcs $18e0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18dd	4c 22 19	jmp $1922			jmp 	MInt32WordIndirect 							; else do it as integer.
.18e0					_IsFPOperation:
.18e0	8a		txa				txa 								; call the relevant fp routine
.18e1	a2 08		ldx #$08		ldx	#8
.18e3	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.18e6	aa		tax				tax
.18e7	60		rts				rts
.18e8					ByteRefHandler:
.18e8	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.18eb	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.18ee	b0 03		bcs $18f3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18f0	4c 26 19	jmp $1926			jmp 	MInt32ByteIndirect 							; else do it as integer.
.18f3					_IsFPOperation:
.18f3	8a		txa				txa 								; call the relevant fp routine
.18f4	a2 08		ldx #$08		ldx	#8
.18f6	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.18f9	aa		tax				tax
.18fa	60		rts				rts
.18fb					PowerHandler:
.18fb	20 56 1a	jsr $1a56			jsr 	DereferenceTwo
.18fe	20 db 17	jsr $17db			jsr 	BinaryProcess 				; check to see if either is float
.1901	b0 03		bcs $1906			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1903	4c 0e 19	jmp $190e			jmp 	PowerInteger 							; else do it as integer.
.1906					_IsFPOperation:
.1906	8a		txa				txa 								; call the relevant fp routine
.1907	a2 16		ldx #$16		ldx	#22
.1909	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.190c	aa		tax				tax
.190d	60		rts				rts
.190e					PowerInteger:
.190e	20 f5 17	jsr $17f5			jsr 	BPMakeBothFloat				; make them float.
.1911	8a		txa				txa
.1912	a2 16		ldx #$16		ldx	#22
.1914	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1917	a2 12		ldx #$12		ldx	#18
.1919	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.191c	aa		tax				tax
.191d	a9 00		lda #$00			lda 	#0 							; make type integer
.191f	95 40		sta $40,x			sta 	esType,x
.1921	60		rts				rts
.1922					Mint32WordIndirect:
.1922	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.1924	d0 02		bne $1928			bne 	Min32Indirect
.1926					Mint32ByteIndirect:
.1926	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.1928					Min32Indirect:
.1928	48		pha				pha 								; save the indirection
.1929	20 f5 20	jsr $20f5			jsr 	MInt32Add 					; add a!b a?b
.192c	68		pla				pla 								; and set the type to reference.
.192d	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.192f	60		rts				rts
.1930					Mint32ShiftLeftX:
.1930	18		clc				clc 								; CC shift left
.1931	90 01		bcc $1934			bcc 	Mint32Shift
.1933					Mint32ShiftRightX:
.1933	38		sec				sec 								; CS shift right
.1934					Mint32Shift:
.1934	08		php				php 								; save carry flag on stack.
.1935	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1937	15 59		ora $59,x			ora 	esInt2+1,x
.1939	15 61		ora $61,x			ora 	esInt3+1,x
.193b	d0 1e		bne $195b			bne 	_MShiftZero
.193d	b5 49		lda $49,x			lda 	esInt0+1,x
.193f	c9 20		cmp #$20			cmp 	#32
.1941	b0 18		bcs $195b			bcs 	_MShiftZero
.1943					_MShiftLoop:
.1943	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1945	f0 12		beq $1959			beq 	_MShiftExit
.1947	d6 49		dec $49,x			dec 	esInt0+1,x
.1949	28		plp				plp 								; restore and save carry
.194a	08		php				php
.194b	90 06		bcc $1953			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.194d	20 2f 22	jsr $222f			jsr 	Mint32ShiftRight
.1950	4c 43 19	jmp $1943			jmp 	_MShiftLoop
.1953					_MShiftLeft:
.1953	20 26 22	jsr $2226			jsr 	Mint32ShiftLeft
.1956	4c 43 19	jmp $1943			jmp 	_MShiftLoop
.1959					_MShiftExit:
.1959	28		plp				plp	 								; throw saved carry and exit
.195a	60		rts				rts
.195b					_MShiftZero:
.195b	4c 11 22	jmp $2211			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.195e					PerformComparison:
.195e	20 56 1a	jsr $1a56			jsr 	DereferenceTwo 				; make both values.
.1961	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1963	35 41		and $41,x			and 	esType+1,x
.1965	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.1966	30 1d		bmi $1985			bmi 	_PCIsString
.1968	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.196a	15 41		ora $41,x			ora 	esType+1,x
.196c	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.196d	30 22		bmi $1991			bmi 	_PCError
.196f	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1971	f0 0f		beq $1982			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.1973	20 f5 17	jsr $17f5			jsr 	BPMakeBothFloat 			; make both float
.1976	8a		txa				txa
.1977	a2 04		ldx #$04		ldx	#4
.1979	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.197c	86 0c		stx $0c				stx 	tempShort 					; save result
.197e	aa		tax				tax
.197f	a5 0c		lda $0c				lda 	tempShort
.1981	60		rts				rts
.1982					_PCIsInteger:
.1982	4c b1 1f	jmp $1fb1			jmp 	MInt32Compare
.1985					_PCIsString:
.1985	8a		txa				txa 								; A has SP
.1986	a2 06		ldx #$06		ldx	#6
.1988	20 4d 29	jsr $294d		jsr	stringHandler
.198b	86 0c		stx $0c				stx 	tempShort 					; save result
.198d	aa		tax				tax 								; put SP back in X and get result.
.198e	a5 0c		lda $0c				lda 	tempShort
.1990	60		rts				rts
.1991					_PCError:
.1991	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1993	20 c6 23	jsr $23c6		jsr	errorHandler
.1996					CompareEquals:
.1996	20 5e 19	jsr $195e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.1999	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.199b	f0 35		beq $19d2			beq  	CompareTrue
.199d	4c d5 19	jmp $19d5			jmp 	CompareFalse
.19a0					CompareLess:
.19a0	20 5e 19	jsr $195e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19a3	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.19a5	f0 2b		beq $19d2			beq  	CompareTrue
.19a7	4c d5 19	jmp $19d5			jmp 	CompareFalse
.19aa					CompareGreater:
.19aa	20 5e 19	jsr $195e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19ad	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.19af	f0 21		beq $19d2			beq  	CompareTrue
.19b1	4c d5 19	jmp $19d5			jmp 	CompareFalse
.19b4					CompareNotEquals:
.19b4	20 5e 19	jsr $195e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19b7	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.19b9	d0 17		bne $19d2			bne  	CompareTrue
.19bb	4c d5 19	jmp $19d5			jmp 	CompareFalse
.19be					CompareGreaterEq:
.19be	20 5e 19	jsr $195e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19c1	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.19c3	d0 0d		bne $19d2			bne  	CompareTrue
.19c5	4c d5 19	jmp $19d5			jmp 	CompareFalse
.19c8					CompareLessEq:
.19c8	20 5e 19	jsr $195e			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19cb	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.19cd	d0 03		bne $19d2			bne  	CompareTrue
.19cf	4c d5 19	jmp $19d5			jmp 	CompareFalse
.19d2					CompareTrue:
.19d2	4c 0d 22	jmp $220d			jmp 	MInt32True
.19d5					CompareFalse:
.19d5	4c 11 22	jmp $2211			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.19d8					Event_Str:
.19d8	20 99 1c	jsr $1c99			jsr 	EvaluateNumeric 			; get a number.
.19db	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.19dd	d0 13		bne $19f2			bne 	_ESFloat
.19df	20 35 1a	jsr $1a35			jsr 	ConvertGetBase 				; get base, or default.
.19e2	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.19e4	85 04		sta $04				sta 	temp0
.19e6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.19e8	85 05		sta $05				sta 	1+(temp0)
.19ea	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.19ec	20 67 21	jsr $2167			jsr 	MInt32ToString 				; convert to string.
.19ef	4c ff 19	jmp $19ff			jmp 	_ESCloneExit 				; clone and exit.
.19f2					_ESFloat:
.19f2	20 84 22	jsr $2284			jsr 	CheckRightParen 			; check closing )
.19f5	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.19f8	8a		txa				txa
.19f9	a2 14		ldx #$14		ldx	#20
.19fb	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.19fe	aa		tax				tax
.19ff					_ESCloneExit:
.19ff	8a		txa				txa
.1a00	a2 02		ldx #$02		ldx	#2
.1a02	20 4d 29	jsr $294d		jsr	stringHandler
.1a05	aa		tax				tax
.1a06	60		rts				rts
.1a07					UnaryVal:
.1a07	38		sec				sec 								; Carry set to return value
.1a08	b0 01		bcs $1a0b			bcs 	ValueMain
.1a0a					UnaryIsVal:
.1a0a	18		clc				clc									; Carry clear to return legitimacy
.1a0b					ValueMain:
.1a0b	08		php				php 								; save results (CS is value, CC is validation)
.1a0c	20 a4 1c	jsr $1ca4			jsr 	EvaluateString
.1a0f	20 35 1a	jsr $1a35			jsr 	ConvertGetBase 				; get base, if any.
.1a12	98		tya				tya
.1a13	48		pha				pha
.1a14	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1a17	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1a19	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1a1b	20 7f 20	jsr $207f			jsr 	MInt32FromString 			; convert it back from a string.
.1a1e	b0 0c		bcs $1a2c			bcs 	_VMSuccess 					; successfully converted.
.1a20	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1a22	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1a24	f0 00		beq $1a26			beq 	_VMFailed 	 				; so we failed.
.1a26					_VMFailed:
.1a26	68		pla				pla
.1a27	a8		tay				tay
.1a28	28		plp				plp
.1a29	4c 11 22	jmp $2211			jmp 	MInt32False 				; return 0 whatever.
.1a2c					_VMSuccess:
.1a2c	68		pla				pla
.1a2d	a8		tay				tay
.1a2e	28		plp				plp 								; if CS the it was val() so we want the value.
.1a2f	b0 03		bcs $1a34			bcs 	_VMExit
.1a31	4c 0d 22	jmp $220d			jmp 	MInt32True 					; otherwise return true as successful.
.1a34					_VMExit:
.1a34	60		rts				rts
.1a35					ConvertGetBase:
.1a35	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1a37	95 49		sta $49,x			sta 	esInt0+1,x
.1a39	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for ,base)
.1a3b	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a3d	d0 0e		bne $1a4d			bne 	_CGBDone 					; not found, should be )
.1a3f	e8		inx				inx 								; next level
.1a40	c8		iny				iny 								; skip comma.
.1a41	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger		; evaluate the base.
.1a44	ca		dex				dex
.1a45	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.1a47	90 08		bcc $1a51			bcc 	_CGBValue 					; (it should work as high as 37)
.1a49	c9 11		cmp #$11			cmp 	#17
.1a4b	b0 04		bcs $1a51			bcs 	_CGBValue
.1a4d					_CGBDone:
.1a4d	20 84 22	jsr $2284			jsr 	CheckRightParen
.1a50	60		rts				rts
.1a51					_CGBValue:
.1a51	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a53	20 c6 23	jsr $23c6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1a56					DereferenceTwo:
.1a56	e8		inx				inx
.1a57	20 5b 1a	jsr $1a5b			jsr 	DereferenceOne
.1a5a	ca		dex				dex
.1a5b					DereferenceOne:
.1a5b	b5 40		lda $40,x			lda 	esType,x
.1a5d	10 3d		bpl $1a9c			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.1a5f	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1a60	b0 3b		bcs $1a9d			bcs 	_DRFloatDeReference
.1a62	98		tya				tya
.1a63	48		pha				pha
.1a64	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1a66	85 04		sta $04				sta 	temp0
.1a68	b5 50		lda $50,x			lda 	esInt1,x
.1a6a	85 05		sta $05				sta 	temp0+1
.1a6c	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1a6e	95 50		sta $50,x			sta 	esInt1,x
.1a70	95 58		sta $58,x			sta 	esInt2,x
.1a72	95 60		sta $60,x			sta 	esInt3,x
.1a74	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1a76	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1a78	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1a79	30 0d		bmi $1a88			bmi 	_DeRefString 				; string, 2 bytes only
.1a7b	d0 11		bne $1a8e			bne 	_DeRefByte 					; byte 1 byte only
.1a7d					_DeRefLong:
.1a7d	a0 03		ldy #$03			ldy 	#3
.1a7f	b1 04		lda ($04),y			lda 	(temp0),y
.1a81	95 60		sta $60,x			sta 	esInt3,x
.1a83	88		dey				dey
.1a84	b1 04		lda ($04),y			lda 	(temp0),y
.1a86	95 58		sta $58,x			sta 	esInt2,x
.1a88					_DeRefString:
.1a88	a0 01		ldy #$01			ldy 	#1
.1a8a	b1 04		lda ($04),y			lda 	(temp0),y
.1a8c	95 50		sta $50,x			sta 	esInt1,x
.1a8e					_DeRefByte:
.1a8e	a0 00		ldy #$00			ldy 	#0
.1a90	b1 04		lda ($04),y			lda 	(temp0),y
.1a92	95 48		sta $48,x			sta 	esInt0,x
.1a94	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1a96	29 40		and #$40			and 	#$40
.1a98	95 40		sta $40,x			sta 	esType,x
.1a9a	68		pla				pla
.1a9b	a8		tay				tay
.1a9c					_DRNotReference
.1a9c	60		rts				rts
.1a9d					_DRFloatDereference:
.1a9d	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; address to deref in temp0
.1aa0	8a		txa				txa
.1aa1	a2 1c		ldx #$1c		ldx	#28
.1aa3	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1aa6	aa		tax				tax
.1aa7	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1aa9	95 40		sta $40,x			sta 	esType,x
.1aab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1aac					EvaluateLevel:
.1aac	48		pha				pha 								; save precedence level.
.1aad	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1aaf	95 48		sta $48,x			sta 	esInt0,x
.1ab1	95 50		sta $50,x			sta 	esInt1,x
.1ab3	95 58		sta $58,x			sta 	esInt2,x
.1ab5	95 60		sta $60,x			sta 	esInt3,x
.1ab7	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1ab9	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1abb	30 21		bmi $1ade			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1abd	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1abe	30 0a		bmi $1aca			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1ac0	8a		txa				txa 								; stack level in X
.1ac1	a2 00		ldx #$00		ldx	#0
.1ac3	20 b5 32	jsr $32b5		jsr	variableHandler
.1ac6	aa		tax				tax
.1ac7	4c 07 1b	jmp $1b07			jmp		_ELHasTerm
.1aca					_ELIsConstant:
.1aca	4a		lsr a				lsr 	a 							; get the value back
.1acb	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1acd	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1acf					_ELCheckNext:
.1acf	c8		iny				iny 								; look at next
.1ad0	b1 02		lda ($02),y			lda 	(codePtr),y
.1ad2	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1ad4	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1ad6	b0 2f		bcs $1b07			bcs 	_ELHasTerm 					; done getting the constant.
.1ad8	20 a0 1b	jsr $1ba0			jsr 	ELShiftByteIn 				; shift byte into position.
.1adb	4c cf 1a	jmp $1acf			jmp 	_ELCheckNext
.1ade					_ELIsToken:
.1ade	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1ae0	f0 0f		beq $1af1			beq 	_ELIsString
.1ae2	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1ae4	d0 5f		bne $1b45			bne 	_ELCheckUnary
.1ae6	8a		txa				txa 								; put X into A
.1ae7	c8		iny				iny 								; skip over the float marker
.1ae8	a2 18		ldx #$18		ldx	#24
.1aea	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1aed	aa		tax				tax 								; restore X
.1aee	4c 07 1b	jmp $1b07			jmp 	_ELHasTerm
.1af1					_ELIsString:
.1af1	98		tya				tya 								; address of string is codePtr+y+1
.1af2	38		sec				sec
.1af3	65 02		adc $02				adc 	codePtr
.1af5	95 48		sta $48,x			sta 	esInt0,x
.1af7	a5 03		lda $03				lda 	codePtr+1
.1af9	69 00		adc #$00			adc 	#0
.1afb	95 50		sta $50,x			sta 	esInt1,x
.1afd	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1aff	95 40		sta $40,x			sta 	esType,x
.1b01	c8		iny				iny 								; skip over string.
.1b02	98		tya				tya
.1b03	38		sec				sec									; +1 for the length itself.
.1b04	71 02		adc ($02),y			adc 	(codePtr),y
.1b06	a8		tay				tay 								; and fall through to term loop code.
.1b07					_ELHasTerm:
.1b07	b1 02		lda ($02),y			lda 	(codePtr),y
.1b09	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1b0b	90 04		bcc $1b11			bcc 	_ELPopExit
.1b0d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1b0f	90 02		bcc $1b13			bcc 	_ELHasBinaryTerm
.1b11					_ELPopExit:
.1b11	68		pla				pla
.1b12					_ELExit:
.1b12	60		rts				rts
.1b13					_ELHasBinaryTerm:
.1b13	84 0c		sty $0c				sty 	tempShort 					; save position
.1b15	a8		tay				tay 								; use token as an index and get the precedence.
.1b16	b9 48 1b	lda $1b48,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1b19	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1b1b	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1b1d	68		pla				pla 								; restore current level.
.1b1e	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1b20	b0 f0		bcs $1b12			bcs 	_ELExit
.1b22	48		pha				pha 								; save current level back on the stack.
.1b23	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1b25	48		pha				pha
.1b26	c8		iny				iny
.1b27	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1b28	a5 0c		lda $0c				lda 	tempShort
.1b2a	20 ac 1a	jsr $1aac			jsr 	EvaluateLevel
.1b2d	ca		dex				dex
.1b2e	68		pla				pla 								; get the operator back out.
.1b2f					_ELExecuteA:
.1b2f	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1b31	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1b32	aa		tax				tax
.1b33	bd 56 15	lda $1556,x			lda 	Group0Vectors,x
.1b36	85 04		sta $04				sta 	temp0
.1b38	bd 57 15	lda $1557,x			lda 	Group0Vectors+1,x
.1b3b	85 05		sta $05				sta 	temp0+1
.1b3d	a6 0c		ldx $0c				ldx 	tempShort
.1b3f	20 8c 1b	jsr $1b8c			jsr 	_ELCallTemp0
.1b42	4c 07 1b	jmp $1b07			jmp 	_ELHasTerm 					; and loop back round.
.1b45					_ELCheckUnary:
.1b45	c8		iny				iny 								; skip over token.
.1b46	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1b48	f0 19		beq $1b63			beq 	_ELMinus
.1b4a	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1b4c	f0 2c		beq $1b7a			beq 	_ELIndirect
.1b4e	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1b50	f0 28		beq $1b7a			beq 	_ELIndirect
.1b52	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1b54	f0 39		beq $1b8f			beq 	_ELExtension
.1b56	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1b58	90 04		bcc $1b5e			bcc 	_ELUSyntax
.1b5a	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1b5c	90 d1		bcc $1b2f			bcc 	_ELExecuteA 				; if so do that token.
.1b5e					_ELUSyntax:
.1b5e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b60	20 c6 23	jsr $23c6		jsr	errorHandler
.1b63					_ELMinus:
.1b63	20 78 1c	jsr $1c78			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1b66	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1b68	f0 0a		beq $1b74			beq 	_ELMinusInteger
.1b6a	8a		txa				txa
.1b6b	a2 0c		ldx #$0c		ldx	#12
.1b6d	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1b70	aa		tax				tax
.1b71	4c 07 1b	jmp $1b07			jmp 	_ELHasTerm
.1b74					_ELMinusInteger:
.1b74	20 cb 21	jsr $21cb			jsr 	MInt32Negate 				; do int negate
.1b77	4c 07 1b	jmp $1b07			jmp 	_ELHasTerm
.1b7a					_ELIndirect:
.1b7a	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1b7b	20 81 1c	jsr $1c81			jsr 	EvaluateIntegerTerm 		; integer address
.1b7e	68		pla				pla
.1b7f	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1b81	f0 02		beq $1b85			beq 	_ELHaveModifier
.1b83	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1b85					_ELHaveModifier:
.1b85	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1b87	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.1b89	4c 07 1b	jmp $1b07			jmp 	_ELHasTerm
.1b8c					_ELCallTemp0:
.1b8c	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1b8f					_ELExtension:
.1b8f	8a		txa				txa 								; stack pos in A
.1b90	20 26 26	jsr $2626		jsr	extensionHandler
.1b93	aa		tax				tax 								; restore stack
.1b94	4c 07 1b	jmp $1b07			jmp 	_ELHasTerm
.1b97					UnaryParenthesis:
.1b97	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1b99	20 ac 1a	jsr $1aac			jsr 	EvaluateLevel
.1b9c	20 84 22	jsr $2284			jsr 	CheckRightParen 			; check for )
.1b9f	60		rts				rts
.1ba0					ELShiftByteIn:
.1ba0	48		pha				pha 								; save bits to shift in.
.1ba1	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1ba3	48		pha				pha
.1ba4	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1ba6	95 60		sta $60,x			sta 	esInt3,x
.1ba8	b5 50		lda $50,x			lda 	esInt1,x
.1baa	95 58		sta $58,x			sta 	esInt2,x
.1bac	b5 48		lda $48,x			lda 	esInt0,x
.1bae	95 50		sta $50,x			sta 	esInt1,x
.1bb0	a9 00		lda #$00			lda 	#0
.1bb2	95 48		sta $48,x			sta 	esInt0,x
.1bb4	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1bb5	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1bb7	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1bb9					_ELShiftLoop:
.1bb9	4a		lsr a				lsr 	a
.1bba	76 60		ror $60,x			ror 	esInt3,x
.1bbc	76 58		ror $58,x			ror 	esInt2,x
.1bbe	76 50		ror $50,x			ror 	esInt1,x
.1bc0	76 48		ror $48,x			ror 	esInt0,x
.1bc2	c9 01		cmp #$01			cmp 	#1
.1bc4	d0 f3		bne $1bb9			bne 	_ELShiftLoop
.1bc6	68		pla				pla 								; get original 6 bit value and OR in.
.1bc7	29 3f		and #$3f			and 	#$3F
.1bc9	15 48		ora $48,x			ora 	esInt0,x
.1bcb	95 48		sta $48,x			sta 	esInt0,x
.1bcd	60		rts				rts
.1bce					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1bce	01					.byte	$01			; $86 and
>1bcf	01					.byte	$01			; $87 or
>1bd0	01					.byte	$01			; $88 xor
>1bd1	02					.byte	$02			; $89 >=
>1bd2	02					.byte	$02			; $8a <=
>1bd3	02					.byte	$02			; $8b >
>1bd4	02					.byte	$02			; $8c <
>1bd5	02					.byte	$02			; $8d =
>1bd6	02					.byte	$02			; $8e <>
>1bd7	03					.byte	$03			; $8f +
>1bd8	03					.byte	$03			; $90 -
>1bd9	04					.byte	$04			; $91 >>
>1bda	04					.byte	$04			; $92 <<
>1bdb	04					.byte	$04			; $93 *
>1bdc	04					.byte	$04			; $94 /
>1bdd	04					.byte	$04			; $95 mod
>1bde	05					.byte	$05			; $96 ^
>1bdf	06					.byte	$06			; $97 !
>1be0	06					.byte	$06			; $98 ?
>1be1	82					.byte	$82			; $99 repeat
>1be2	82					.byte	$82			; $9a while
>1be3	82					.byte	$82			; $9b for
>1be4	82					.byte	$82			; $9c if
>1be5	82					.byte	$82			; $9d defproc
>1be6	80					.byte	$80			; $9e until
>1be7	80					.byte	$80			; $9f wend
>1be8	80					.byte	$80			; $a0 next
>1be9	80					.byte	$80			; $a1 then
>1bea	80					.byte	$80			; $a2 endif
>1beb	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1bec					EventFunction:
.1bec	20 e2 1c	jsr $1ce2			jsr 	EvaluateReference			; get the variable reference that tracks the event
.1bef	b5 40		lda $40,x			lda 	esType,x
.1bf1	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.1bf3	d0 5b		bne $1c50			bne 	_EFType
.1bf5	20 91 22	jsr $2291			jsr 	CheckComma
.1bf8	e8		inx				inx
.1bf9	20 af 1c	jsr $1caf			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1bfc	20 84 22	jsr $2284			jsr 	CheckRightParen 			; finish off with the right bracket
.1bff	ca		dex				dex
.1c00	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.1c02	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.1c04	15 58		ora $58,x			ora 	esInt2,x
.1c06	15 60		ora $60,x			ora 	esInt3,x
.1c08	d0 41		bne $1c4b			bne 	_EFValue
.1c0a	98		tya				tya
.1c0b	48		pha				pha
.1c0c	8a		txa				txa
.1c0d	48		pha				pha
.1c0e	a2 12		ldx #$12		ldx	#18
.1c10	20 af 23	jsr $23af		jsr	deviceHandler
.1c13	84 07		sty $07				sty 	temp1+1
.1c15	85 06		sta $06				sta 	temp1
.1c17	68		pla				pla
.1c18	aa		tax				tax
.1c19	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.1c1c	a0 03		ldy #$03			ldy 	#3							; if -ve
.1c1e	b1 04		lda ($04),y			lda 	(temp0),y
.1c20	30 23		bmi $1c45			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.1c22	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1c24	b1 04		lda ($04),y			lda 	(temp0),y
.1c26	c8		iny				iny
.1c27	11 04		ora ($04),y			ora 	(temp0),y
.1c29	f0 17		beq $1c42			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1c2b	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1c2d	38		sec				sec
.1c2e	b1 04		lda ($04),y			lda 	(temp0),y
.1c30	e5 06		sbc $06				sbc 	temp1
.1c32	c8		iny				iny
.1c33	b1 04		lda ($04),y			lda 	(temp0),y
.1c35	e5 07		sbc $07				sbc 	temp1+1
.1c37	10 0c		bpl $1c45			bpl 	_EFFail 					; if trigger >= timer then return False
.1c39	20 55 1c	jsr $1c55			jsr 	SetEventTimer 				; reset the timer for next time.
.1c3c	20 0d 22	jsr $220d			jsr	 	MInt32True 					; and treutn true as fired.
.1c3f	68		pla				pla
.1c40	a8		tay				tay
.1c41	60		rts				rts
.1c42					_EFInitialise:
.1c42	20 55 1c	jsr $1c55			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1c45					_EFFail:
.1c45	68		pla				pla
.1c46	a8		tay				tay
.1c47	20 11 22	jsr $2211			jsr 	MInt32False
.1c4a	60		rts				rts
.1c4b					_EFValue:
.1c4b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c4d	20 c6 23	jsr $23c6		jsr	errorHandler
.1c50					_EFType:
.1c50	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c52	20 c6 23	jsr $23c6		jsr	errorHandler
.1c55					SetEventTimer:
.1c55	a0 00		ldy #$00			ldy 	#0
.1c57	18		clc				clc
.1c58	a5 06		lda $06				lda 	temp1
.1c5a	75 49		adc $49,x			adc 	esInt0+1,x
.1c5c	91 04		sta ($04),y			sta		(temp0),y
.1c5e	c8		iny				iny
.1c5f	a5 07		lda $07				lda 	temp1+1
.1c61	75 51		adc $51,x			adc 	esInt1+1,x
.1c63	91 04		sta ($04),y			sta		(temp0),y
.1c65	88		dey				dey
.1c66	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1c68	d0 04		bne $1c6e			bne 	_SETExit 					; zero means initialise.....
.1c6a	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1c6c	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1c6e					_SETExit:
.1c6e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.1c6f					EvaluateTerm:
.1c6f	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.1c71	20 ac 1a	jsr $1aac			jsr 	EvaluateLevel
.1c74	20 5b 1a	jsr $1a5b			jsr 	DereferenceOne
.1c77	60		rts				rts
.1c78					EvaluateNumericTerm:
.1c78	20 6f 1c	jsr $1c6f			jsr 	EvaluateTerm
.1c7b	b5 40		lda $40,x			lda 	esType,x
.1c7d	0a		asl a				asl 	a 							; see if it's a string.
.1c7e	30 09		bmi $1c89			bmi 	ENTType
.1c80	60		rts				rts
.1c81					EvaluateIntegerTerm:
.1c81	20 6f 1c	jsr $1c6f			jsr 	EvaluateTerm
.1c84	b5 40		lda $40,x			lda 	esType,x
.1c86	d0 01		bne $1c89			bne 	ENTType
.1c88	60		rts				rts
.1c89					ENTType:
.1c89	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c8b	20 c6 23	jsr $23c6		jsr	errorHandler
.1c8e					EvaluateRoot:
.1c8e	a2 00		ldx #$00			ldx 	#0
.1c90					Evaluate:
.1c90	a9 00		lda #$00			lda 	#0
.1c92	20 ac 1a	jsr $1aac			jsr 	EvaluateLevel
.1c95	20 5b 1a	jsr $1a5b			jsr 	DereferenceOne
.1c98	60		rts				rts
.1c99					EvaluateNumeric:
.1c99	20 90 1c	jsr $1c90			jsr 	Evaluate
.1c9c	b5 40		lda $40,x			lda 	esType,x
.1c9e	0a		asl a				asl 	a 							; see if it's a string.
.1c9f	30 e8		bmi $1c89			bmi 	ENTType
.1ca1	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1ca2	4a		lsr a				lsr 	a
.1ca3	60		rts				rts
.1ca4					EvaluateString:
.1ca4	20 90 1c	jsr $1c90			jsr 	Evaluate
.1ca7	b5 40		lda $40,x			lda 	esType,x
.1ca9	0a		asl a				asl 	a 							; see if it's a string.
.1caa	10 dd		bpl $1c89			bpl 	ENTType
.1cac	60		rts				rts
.1cad					EvaluateRootInteger:
.1cad	a2 00		ldx #$00			ldx 	#0
.1caf					EvaluateInteger:
.1caf	20 90 1c	jsr $1c90			jsr 	Evaluate
.1cb2	b5 40		lda $40,x			lda 	esType,x
.1cb4	d0 d3		bne $1c89			bne 	ENTType
.1cb6	60		rts				rts
.1cb7					EvaluateSmallInteger:
.1cb7	20 af 1c	jsr $1caf			jsr 	EvaluateInteger
.1cba	b5 50		lda $50,x			lda 	esInt1,x
.1cbc	15 58		ora $58,x			ora 	esInt2,x
.1cbe	15 60		ora $60,x			ora 	esInt3,x
.1cc0	d0 03		bne $1cc5			bne 	_ESIValue
.1cc2	b5 48		lda $48,x			lda 	esInt0,x
.1cc4	60		rts				rts
.1cc5					_ESIValue:
.1cc5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cc7	20 c6 23	jsr $23c6		jsr	errorHandler
.1cca					LinkEvaluate:
.1cca	aa		tax				tax
.1ccb	20 90 1c	jsr $1c90			jsr 	Evaluate
.1cce	8a		txa				txa
.1ccf	60		rts				rts
.1cd0					LinkEvaluateTerm:
.1cd0	aa		tax				tax
.1cd1	20 6f 1c	jsr $1c6f			jsr 	EvaluateTerm
.1cd4	8a		txa				txa
.1cd5	60		rts				rts
.1cd6					LinkEvaluateInteger:
.1cd6	aa		tax				tax
.1cd7	20 af 1c	jsr $1caf			jsr 	EvaluateInteger
.1cda	8a		txa				txa
.1cdb	60		rts				rts
.1cdc					LinkEvaluateSmallInt:
.1cdc	aa		tax				tax
.1cdd	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger
.1ce0	8a		txa				txa
.1ce1	60		rts				rts
.1ce2					EvaluateReference:
.1ce2	ad df 1b	lda $1bdf			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1ce5	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1ce6	e9 01		sbc #$01			sbc 	#1
.1ce8	20 ac 1a	jsr $1aac			jsr 	EvaluateLevel
.1ceb	b5 40		lda $40,x			lda 	esType,x
.1ced	10 01		bpl $1cf0			bpl 	_ERFail
.1cef	60		rts				rts
.1cf0					_ERFail:
.1cf0	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1cf2	20 c6 23	jsr $23c6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1cf5					UnaryLen:
.1cf5	20 03 1d	jsr $1d03			jsr 	ULStart
.1cf8					ULFinish:
.1cf8	b1 04		lda ($04),y			lda 	(temp0),y 					; get length prefix
.1cfa	a4 0c		ldy $0c				ldy 	tempShort 					; get Y back
.1cfc	20 20 22	jsr $2220			jsr 	MInt32Set8Bit 				; write it out.
.1cff	20 84 22	jsr $2284			jsr 	CheckRightParen
.1d02	60		rts				rts
.1d03	20 a4 1c	jsr $1ca4	ULStart:jsr 	EvaluateString
.1d06	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d08	85 04		sta $04				sta 	temp0
.1d0a	b5 50		lda $50,x			lda 	esInt1,x
.1d0c	85 05		sta $05				sta 	temp0+1
.1d0e	84 0c		sty $0c				sty 	tempShort 					; get length
.1d10	a0 00		ldy #$00			ldy 	#0
.1d12	60		rts				rts
.1d13					UnaryAsc:
.1d13	20 03 1d	jsr $1d03			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1d16	b1 04		lda ($04),y			lda 	(temp0),y 					; read length
.1d18	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1d19	c9 00		cmp #$00			cmp 	#0
.1d1b	d0 db		bne $1cf8			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.1d1d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d1f	20 c6 23	jsr $23c6		jsr	errorHandler
.1d22					UnaryAbs:
.1d22	20 99 1c	jsr $1c99			jsr 	EvaluateNumeric 			; some numeric value
.1d25	b0 07		bcs $1d2e			bcs 	_UAFloat 					; CS then float, so use that function
.1d27	20 c6 21	jsr $21c6			jsr 	MInt32Absolute 				; int version
.1d2a	20 84 22	jsr $2284			jsr 	CheckRightParen
.1d2d	60		rts				rts
.1d2e					_UAFloat:
.1d2e	8a		txa				txa 								; float version
.1d2f	a2 00		ldx #$00		ldx	#0
.1d31	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1d34	aa		tax				tax
.1d35	20 84 22	jsr $2284			jsr 	CheckRightParen
.1d38	60		rts				rts
.1d39					UnarySgn:
.1d39	20 99 1c	jsr $1c99			jsr 	EvaluateNumeric 			; same as above but sign of value
.1d3c	b0 07		bcs $1d45			bcs 	_USFloat
.1d3e	20 fe 21	jsr $21fe			jsr 	MInt32Sign
.1d41	20 84 22	jsr $2284			jsr 	CheckRightParen
.1d44	60		rts				rts
.1d45					_USFloat:
.1d45	8a		txa				txa
.1d46	a2 0e		ldx #$0e		ldx	#14
.1d48	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1d4b	aa		tax				tax
.1d4c	20 84 22	jsr $2284			jsr 	CheckRightParen
.1d4f	60		rts				rts
.1d50					UnaryPeek:
.1d50	20 7c 1d	jsr $1d7c			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.1d53	4c 70 1d	jmp $1d70			jmp 	PDLByte0
.1d56					UnaryDeek:
.1d56	20 7c 1d	jsr $1d7c			jsr 	PDLCode
.1d59	4c 6a 1d	jmp $1d6a			jmp 	PDLByte1
.1d5c					UnaryLeek:
.1d5c	20 7c 1d	jsr $1d7c			jsr 	PDLCode
.1d5f	a0 03		ldy #$03			ldy 	#3							; read 3-2
.1d61	b1 04		lda ($04),y			lda 	(temp0),y
.1d63	95 60		sta $60,x			sta 	esInt3,x
.1d65	88		dey				dey
.1d66	b1 04		lda ($04),y			lda 	(temp0),y
.1d68	95 58		sta $58,x			sta 	esInt2,x
.1d6a					PDLByte1:
.1d6a	a0 01		ldy #$01			ldy 	#1
.1d6c	b1 04		lda ($04),y			lda 	(temp0),y
.1d6e	95 50		sta $50,x			sta 	esInt1,x
.1d70					PDLByte0:
.1d70	a0 00		ldy #$00			ldy 	#0
.1d72	b1 04		lda ($04),y			lda 	(temp0),y
.1d74	95 48		sta $48,x			sta 	esInt0,x
.1d76	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1d78	20 84 22	jsr $2284			jsr 	CheckRightParen 			; check right and return
.1d7b	60		rts				rts
.1d7c					PDLCode:
.1d7c	20 af 1c	jsr $1caf			jsr 	EvaluateInteger 			; some address
.1d7f	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d81	85 04		sta $04				sta 	temp0
.1d83	b5 50		lda $50,x			lda 	esInt1,x
.1d85	85 05		sta $05				sta 	temp0+1
.1d87	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1d89	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.1d8b	95 58		sta $58,x			sta 	esInt2,x
.1d8d	95 60		sta $60,x			sta 	esInt3,x
.1d8f	84 0c		sty $0c				sty 	tempShort 					; save Y
.1d91	60		rts				rts
.1d92					Unary_Random:
.1d92	20 41 22	jsr $2241			jsr 	MInt32Random 				; generate random number.
.1d95	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1d97	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1d99	f0 08		beq $1da3			beq 	_URExit
.1d9b	e8		inx				inx 								; load range 0..r-1 into +1
.1d9c	20 af 1c	jsr $1caf			jsr 	EvaluateInteger
.1d9f	ca		dex				dex
.1da0	20 64 20	jsr $2064			jsr 	MInt32Modulus 				; calculate random % modulus
.1da3					_URExit:
.1da3	20 84 22	jsr $2284			jsr 	CheckRightParen 			; check right and return
.1da6	60		rts				rts
.1da7					Unary_Min:
.1da7	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1da9	d0 02		bne $1dad			bne 	UnaryMBody
.1dab					Unary_Max:
.1dab	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1dad					UnaryMBody:
.1dad	48		pha				pha 								; save comparator on stack, shows min or max
.1dae	20 90 1c	jsr $1c90			jsr 	Evaluate 					; get the first thing to check
.1db1					_UnaryMLoop:
.1db1	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1db3	c8		iny				iny
.1db4	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1db6	f0 09		beq $1dc1			beq 	_UnaryMExit
.1db8	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1dba	f0 07		beq $1dc3			beq 	_UnaryMCompare
.1dbc	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1dbe	20 c6 23	jsr $23c6		jsr	errorHandler
.1dc1					_UnaryMExit:
.1dc1	68		pla				pla 								; done so throw comparator and return.
.1dc2	60		rts				rts
.1dc3					_UnaryMCompare:
.1dc3	e8		inx				inx 								; get the 2nd thing to evaluate
.1dc4	20 90 1c	jsr $1c90			jsr 	Evaluate
.1dc7	ca		dex				dex
.1dc8	20 5e 19	jsr $195e			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1dcb	85 0c		sta $0c				sta 	tempShort 					; save result
.1dcd	68		pla				pla 								; get what we need
.1dce	48		pha				pha
.1dcf	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1dd1	d0 de		bne $1db1			bne 	_UnaryMLoop 				; no, try another value.
.1dd3	20 11 22	jsr $2211			jsr 	MInt32False 				; promote 2nd to 1st.
.1dd6	20 f5 20	jsr $20f5			jsr 	MInt32Add
.1dd9	4c b1 1d	jmp $1db1			jmp 	_UnaryMLoop
.1ddc					Unary_Page:
.1ddc	20 11 22	jsr $2211			jsr 	MInt32False 				; zero
.1ddf	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1de2	95 48		sta $48,x			sta 	esInt0,x
.1de4	ad c9 0a	lda $0ac9			lda 	basePage+1
.1de7	95 50		sta $50,x			sta 	esInt1,x
.1de9	60		rts				rts
.1dea					UnaryReference:
.1dea	a9 0f		lda #$0f			lda 	#15
.1dec	20 ac 1a	jsr $1aac			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1def	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1df1	10 05		bpl $1df8			bpl 	UType
.1df3	a9 00		lda #$00			lda 	#0 							; make it an integer
.1df5	95 40		sta $40,x			sta 	esType,x
.1df7	60		rts				rts
.1df8					UType:
.1df8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1dfa	20 c6 23	jsr $23c6		jsr	errorHandler
.1dfd					UnaryHexMarker:
.1dfd	4c 81 1c	jmp $1c81			jmp 	EvaluateIntegerTerm
.1e00					UnaryComplement:
.1e00	20 81 1c	jsr $1c81			jsr 	EvaluateIntegerTerm
.1e03	20 e5 21	jsr $21e5			jsr 	MInt32Not
.1e06	60		rts				rts
.1e07					UnaryIntToFloat:
.1e07	20 99 1c	jsr $1c99			jsr 	EvaluateNumeric				; some number
.1e0a	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.1e0c	d0 0b		bne $1e19			bne 	_UIFExit
.1e0e	8a		txa				txa 								; convert and set type
.1e0f	a2 1a		ldx #$1a		ldx	#26
.1e11	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1e14	aa		tax				tax
.1e15	a9 01		lda #$01			lda 	#1
.1e17	95 40		sta $40,x			sta 	esType,x
.1e19					_UIFExit:
.1e19	60		rts				rts
.1e1a					UnaryFloatToInt:
.1e1a	20 99 1c	jsr $1c99			jsr 	EvaluateNumeric 			; the number
.1e1d	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.1e1f	f0 0b		beq $1e2c			beq 	_UFIExit
.1e21	8a		txa				txa 								; convert to int
.1e22	a2 12		ldx #$12		ldx	#18
.1e24	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.1e27	aa		tax				tax
.1e28	a9 00		lda #$00			lda 	#0 							; set type
.1e2a	95 40		sta $40,x			sta 	esType,x
.1e2c					_UFIExit:
.1e2c	60		rts				rts
.1e2d					UnaryAlloc:
.1e2d	e8		inx				inx 								; evaluate memory required
.1e2e	20 af 1c	jsr $1caf			jsr 	EvaluateInteger
.1e31	20 84 22	jsr $2284			jsr 	CheckRightParen
.1e34	ca		dex				dex
.1e35	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1e37	15 61		ora $61,x			ora 	esInt3+1,x
.1e39	d0 19		bne $1e54			bne 	_UABadValue
.1e3b	20 11 22	jsr $2211			jsr 	MInt32False					; zero return.
.1e3e	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1e40	95 50		sta $50,x			sta 	esInt1,x
.1e42	a5 0f		lda $0f				lda 	lowMemory
.1e44	95 48		sta $48,x			sta 	esInt0,x
.1e46	18		clc				clc 								; add alloc required.
.1e47	75 49		adc $49,x			adc 	esInt0+1,x
.1e49	85 0f		sta $0f				sta 	lowMemory
.1e4b	a5 10		lda $10				lda 	lowMemory+1
.1e4d	75 51		adc $51,x			adc 	esInt1+1,x
.1e4f	85 10		sta $10				sta 	lowMemory+1
.1e51	b0 01		bcs $1e54			bcs		_UABadValue 				; overflow definitely bad.
.1e53	60		rts				rts
.1e54					_UABadValue:
.1e54	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e56	20 c6 23	jsr $23c6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1e59					UnaryTimer:
.1e59	20 84 22	jsr $2284			jsr 	CheckRightParen 			; no parameters
.1e5c	98		tya				tya
.1e5d	48		pha				pha
.1e5e	20 38 22	jsr $2238			jsr 	MInt32Zero 					; zero result
.1e61	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1e63	a2 12		ldx #$12		ldx	#18
.1e65	20 af 23	jsr $23af		jsr	deviceHandler
.1e68	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1e6a	95 48		sta $48,x			sta 	esInt0,x
.1e6c	98		tya				tya
.1e6d	95 50		sta $50,x			sta 	esInt1,x
.1e6f	68		pla				pla
.1e70	a8		tay				tay
.1e71	60		rts				rts
.1e72					UnaryInkey:
.1e72	20 84 22	jsr $2284			jsr 	CheckRightParen
.1e75	86 04		stx $04				stx 	temp0
.1e77	a2 08		ldx #$08		ldx	#8
.1e79	20 af 23	jsr $23af		jsr	deviceHandler
.1e7c	a6 04		ldx $04				ldx 	temp0
.1e7e	20 20 22	jsr $2220			jsr 	MInt32Set8Bit
.1e81	60		rts				rts
.1e82					UnaryGet:
.1e82	20 84 22	jsr $2284			jsr 	CheckRightParen
.1e85	86 04		stx $04				stx 	temp0
.1e87					_UGLoop:
.1e87	a2 08		ldx #$08		ldx	#8
.1e89	20 af 23	jsr $23af		jsr	deviceHandler
.1e8c	c9 00		cmp #$00			cmp 	#0
.1e8e	f0 f7		beq $1e87			beq 	_UGLoop
.1e90	a6 04		ldx $04				ldx 	temp0
.1e92	20 20 22	jsr $2220			jsr 	MInt32Set8Bit
.1e95	60		rts				rts
.1e96					UnarySys:
.1e96	20 af 1c	jsr $1caf			jsr 	EvaluateInteger 				; get the address
.1e99	20 84 22	jsr $2284			jsr 	CheckRightParen
.1e9c	20 f9 11	jsr $11f9			jsr 	TOSToTemp0 						; copy call address to temp0
.1e9f	8a		txa				txa
.1ea0	48		pha				pha
.1ea1	98		tya				tya
.1ea2	48		pha				pha
.1ea3	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1ea6	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1ea9	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1eac	20 bb 1e	jsr $1ebb			jsr 	_CallTemp0
.1eaf	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1eb1	68		pla				pla
.1eb2	a8		tay				tay
.1eb3	68		pla				pla
.1eb4	aa		tax				tax
.1eb5	a5 0c		lda $0c				lda 	tempShort
.1eb7	20 20 22	jsr $2220			jsr 	MInt32Set8Bit 					; return result.
.1eba	60		rts				rts
.1ebb					_CallTemp0:
.1ebb	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1ebe					ExecChr:
.1ebe	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger		; character number 0-255
.1ec1	20 84 22	jsr $2284			jsr 	CheckRightParen				; right bracket
.1ec4	98		tya				tya
.1ec5	48		pha				pha
.1ec6	8a		txa				txa 								; A = stack
.1ec7	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1ec9	a2 00		ldx #$00		ldx	#0
.1ecb	20 4d 29	jsr $294d		jsr	stringHandler
.1ece	aa		tax				tax 								; X = stack
.1ecf	68		pla				pla
.1ed0	a8		tay				tay
.1ed1	60		rts				rts
.1ed2					ExecLower:
.1ed2	38		sec				sec 								; set carry is lower
.1ed3	b0 01		bcs $1ed6			bcs 	ExecUpperLower
.1ed5					ExecUpper:
.1ed5	18		clc				clc 								; clear carry is upper
.1ed6					ExecUpperLower:
.1ed6	08		php				php 								; save carry
.1ed7	20 a4 1c	jsr $1ca4			jsr 	EvaluateString 				; string to stack,X
.1eda	20 84 22	jsr $2284			jsr 	CheckRightParen 			; check closing right bracket.
.1edd	28		plp				plp 								; restore carry, save Y
.1ede	98		tya				tya
.1edf	48		pha				pha
.1ee0	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1ee2	2a		rol a				rol 	a
.1ee3	a8		tay				tay 								; now in Y
.1ee4	8a		txa				txa 								; do the substring and exit.
.1ee5	a2 08		ldx #$08		ldx	#8
.1ee7	20 4d 29	jsr $294d		jsr	stringHandler
.1eea	aa		tax				tax
.1eeb	68		pla				pla
.1eec	a8		tay				tay
.1eed	60		rts				rts
.1eee					ExecLeft:
.1eee	20 a4 1c	jsr $1ca4			jsr 	EvaluateString 				; string to stack,X
.1ef1	20 91 22	jsr $2291			jsr 	CheckComma
.1ef4	e8		inx				inx
.1ef5	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1ef7	20 20 22	jsr $2220			jsr 	MInt32Set8Bit
.1efa	e8		inx				inx
.1efb	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1efe					ExecSubstring:
.1efe	ca		dex				dex 								; fix up X
.1eff	ca		dex				dex
.1f00	20 84 22	jsr $2284			jsr 	CheckRightParen 			; check closing right bracket.
.1f03	8a		txa				txa 								; do the substring and exit.
.1f04	a2 0a		ldx #$0a		ldx	#10
.1f06	20 4d 29	jsr $294d		jsr	stringHandler
.1f09	aa		tax				tax
.1f0a	60		rts				rts
.1f0b					ExecMid:
.1f0b	20 a4 1c	jsr $1ca4			jsr 	EvaluateString 				; string to stack,X
.1f0e	20 91 22	jsr $2291			jsr 	CheckComma
.1f11	e8		inx				inx
.1f12	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f15	c9 00		cmp #$00			cmp 	#0
.1f17	f0 15		beq $1f2e			beq 	_EMValue
.1f19	e8		inx				inx
.1f1a	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.1f1c	20 20 22	jsr $2220			jsr 	MInt32Set8Bit
.1f1f	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1f21	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1f23	f0 d9		beq $1efe			beq 	ExecSubString
.1f25	20 91 22	jsr $2291			jsr 	CheckComma
.1f28	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f2b	4c fe 1e	jmp $1efe			jmp 	ExecSubString
.1f2e					_EMValue:
.1f2e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f30	20 c6 23	jsr $23c6		jsr	errorHandler
.1f33					ExecRight:
.1f33	20 a4 1c	jsr $1ca4			jsr 	EvaluateString 				; string to stack,X
.1f36	20 91 22	jsr $2291			jsr 	CheckComma
.1f39	e8		inx				inx
.1f3a	20 b7 1c	jsr $1cb7			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1f3d	ca		dex				dex
.1f3e	98		tya				tya
.1f3f	48		pha				pha
.1f40	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1f42	85 04		sta $04				sta 	temp0
.1f44	b5 50		lda $50,x			lda 	esInt1,x
.1f46	85 05		sta $05				sta 	temp0+1
.1f48	a0 00		ldy #$00			ldy 	#0 							; point to length
.1f4a	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1f4c	18		clc				clc 								; add 1.
.1f4d	69 01		adc #$01			adc 	#1
.1f4f	38		sec				sec
.1f50	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1f52	f0 02		beq $1f56			beq		_ERMake1 					; if zero, make it 1.
.1f54	b0 02		bcs $1f58			bcs		_EROkay
.1f56					_ERMake1:
.1f56	a9 01		lda #$01			lda 	#1 							; start position.
.1f58					_EROkay:
.1f58	e8		inx				inx 								; set start pos.
.1f59	95 48		sta $48,x			sta 	esInt0,x
.1f5b	e8		inx				inx
.1f5c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1f5e	20 20 22	jsr $2220			jsr 	MInt32Set8Bit
.1f61	68		pla				pla
.1f62	a8		tay				tay
.1f63	4c fe 1e	jmp $1efe			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1f66					MInt32And:
.1f66	b5 48		lda $48,x			lda 	esInt0,x
.1f68	35 49		and $49,x			and 	esInt0+1,x
.1f6a	95 48		sta $48,x			sta 	esInt0,x
.1f6c	b5 50		lda $50,x			lda 	esInt1,x
.1f6e	35 51		and $51,x			and 	esInt1+1,x
.1f70	95 50		sta $50,x			sta 	esInt1,x
.1f72	b5 58		lda $58,x			lda 	esInt2,x
.1f74	35 59		and $59,x			and 	esInt2+1,x
.1f76	95 58		sta $58,x			sta 	esInt2,x
.1f78	b5 60		lda $60,x			lda 	esInt3,x
.1f7a	35 61		and $61,x			and 	esInt3+1,x
.1f7c	95 60		sta $60,x			sta 	esInt3,x
.1f7e	60		rts				rts
.1f7f					MInt32Or:
.1f7f	b5 48		lda $48,x			lda 	esInt0,x
.1f81	15 49		ora $49,x			ora 	esInt0+1,x
.1f83	95 48		sta $48,x			sta 	esInt0,x
.1f85	b5 50		lda $50,x			lda 	esInt1,x
.1f87	15 51		ora $51,x			ora 	esInt1+1,x
.1f89	95 50		sta $50,x			sta 	esInt1,x
.1f8b	b5 58		lda $58,x			lda 	esInt2,x
.1f8d	15 59		ora $59,x			ora 	esInt2+1,x
.1f8f	95 58		sta $58,x			sta 	esInt2,x
.1f91	b5 60		lda $60,x			lda 	esInt3,x
.1f93	15 61		ora $61,x			ora 	esInt3+1,x
.1f95	95 60		sta $60,x			sta 	esInt3,x
.1f97	60		rts				rts
.1f98					MInt32Xor:
.1f98	b5 48		lda $48,x			lda 	esInt0,x
.1f9a	55 49		eor $49,x			eor 	esInt0+1,x
.1f9c	95 48		sta $48,x			sta 	esInt0,x
.1f9e	b5 50		lda $50,x			lda 	esInt1,x
.1fa0	55 51		eor $51,x			eor 	esInt1+1,x
.1fa2	95 50		sta $50,x			sta 	esInt1,x
.1fa4	b5 58		lda $58,x			lda 	esInt2,x
.1fa6	55 59		eor $59,x			eor 	esInt2+1,x
.1fa8	95 58		sta $58,x			sta 	esInt2,x
.1faa	b5 60		lda $60,x			lda 	esInt3,x
.1fac	55 61		eor $61,x			eor 	esInt3+1,x
.1fae	95 60		sta $60,x			sta 	esInt3,x
.1fb0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1fb1					MInt32Compare:
.1fb1	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.1fb3	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fb5	d0 13		bne $1fca			bne 	MInt32Compare2
.1fb7	b5 50		lda $50,x			lda 	esInt1,x
.1fb9	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1fbb	d0 0d		bne $1fca			bne 	MInt32Compare2
.1fbd	b5 58		lda $58,x			lda 	esInt2,x
.1fbf	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1fc1	d0 07		bne $1fca			bne 	MInt32Compare2
.1fc3	b5 60		lda $60,x			lda 	esInt3,x
.1fc5	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.1fc7	d0 01		bne $1fca			bne 	MInt32Compare2
.1fc9	60		rts				rts
.1fca					MInt32Compare2:
.1fca	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1fcc	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fce	b5 50		lda $50,x			lda		esInt1,x
.1fd0	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1fd2	b5 58		lda $58,x			lda		esInt2,x
.1fd4	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1fd6	b5 60		lda $60,x			lda		esInt3,x
.1fd8	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1fda	50 02		bvc $1fde			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.1fdc	49 80		eor #$80			eor 	#$80
.1fde					_I32LNoOverflow
.1fde	30 03		bmi $1fe3			bmi 	MInt32CLess					; if -ve then return $FF
.1fe0	a9 01		lda #$01			lda 	#$01						; else return $01
.1fe2	60		rts				rts
.1fe3					MInt32CLess:
.1fe3	a9 ff		lda #$ff			lda 	#$FF
.1fe5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1fe6					MInt32SDivide:
.1fe6	98		tya				tya  								; save Y, which is the count of negations
.1fe7	48		pha				pha
.1fe8	a0 00		ldy #$00			ldy 	#0 							; zero count
.1fea	20 02 20	jsr $2002			jsr 	_MInt32SRemSign 			; unsign TOS
.1fed	e8		inx				inx 								; unsign TOS+1
.1fee	20 02 20	jsr $2002			jsr 	_MInt32SRemSign
.1ff1	ca		dex				dex
.1ff2	98		tya				tya 								; save sign count on stack
.1ff3	48		pha				pha
.1ff4	20 0b 20	jsr $200b			jsr 	MInt32UDivide 				; unsigned division
.1ff7	68		pla				pla 								; get sign count back
.1ff8	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1ffa	f0 03		beq $1fff			beq 	_I32SNoNeg
.1ffc	20 cb 21	jsr $21cb			jsr 	MInt32Negate
.1fff					_I32SNoNeg:
.1fff	68		pla				pla 								; restoe Y and exit
.2000	a8		tay				tay
.2001	60		rts				rts
.2002					_MInt32SRemSign:
.2002	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2004	10 04		bpl $200a			bpl 	_MInt32SRSExit
.2006	c8		iny				iny 								; increment the sign count
.2007	20 cb 21	jsr $21cb			jsr 	MInt32Negate 				; negate the value.
.200a					_MInt32SRSExit:
.200a	60		rts				rts
.200b					MInt32UDivide:
.200b	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.200d	15 51		ora $51,x			ora 	esInt1+1,x
.200f	15 52		ora $52,x			ora 	esInt1+2,x
.2011	15 53		ora $53,x			ora 	esInt1+3,x
.2013	f0 4a		beq $205f			beq 	_MInt32DZero
.2015	e8		inx				inx 								; clear A
.2016	e8		inx				inx
.2017	20 11 22	jsr $2211			jsr 	MInt32False
.201a	ca		dex				dex
.201b	ca		dex				dex
.201c	98		tya				tya 								; save Y on the stack
.201d	48		pha				pha
.201e	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2020					_MInt32UDLoop:
.2020	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2022	36 50		rol $50,x			rol 	esInt1,x
.2024	36 58		rol $58,x			rol 	esInt2,x
.2026	36 60		rol $60,x			rol 	esInt3,x
.2028	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.202a	36 52		rol $52,x			rol 	esInt1+2,x
.202c	36 5a		rol $5a,x			rol 	esInt2+2,x
.202e	36 62		rol $62,x			rol 	esInt3+2,x
.2030	38		sec				sec 								; calculate A-M saving result on the stack
.2031	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2033	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2035	48		pha				pha
.2036	b5 52		lda $52,x			lda 	esInt1+2,x
.2038	f5 51		sbc $51,x			sbc 	esInt1+1,x
.203a	48		pha				pha
.203b	b5 5a		lda $5a,x			lda 	esInt2+2,x
.203d	f5 59		sbc $59,x			sbc 	esInt2+1,x
.203f	48		pha				pha
.2040	b5 62		lda $62,x			lda 	esInt3+2,x
.2042	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2044	90 10		bcc $2056			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2046	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2048	68		pla				pla
.2049	95 5a		sta $5a,x			sta 	esInt2+2,x
.204b	68		pla				pla
.204c	95 52		sta $52,x			sta 	esInt1+2,x
.204e	68		pla				pla
.204f	95 4a		sta $4a,x			sta 	esInt0+2,x
.2051	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2053	4c 59 20	jmp $2059			jmp 	_MInt32Next 					; do the next iteration
.2056					_MInt32NoSubtract:
.2056	68		pla				pla
.2057	68		pla				pla
.2058	68		pla				pla
.2059					_MInt32Next:
.2059	88		dey				dey 								; do this 32 times.
.205a	d0 c4		bne $2020			bne 	_MInt32UDLoop
.205c	68		pla				pla 								; restore Y and exit
.205d	a8		tay				tay
.205e	60		rts				rts
.205f					_MInt32DZero:
.205f	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2061	20 c6 23	jsr $23c6		jsr	errorHandler
.2064					MInt32Modulus:
.2064	20 0b 20	jsr $200b			jsr 	MInt32UDivide 				; do the division.
.2067	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2069	95 60		sta $60,x			sta 	esInt3,x
.206b	b5 5a		lda $5a,x			lda 	esInt2+2,x
.206d	95 58		sta $58,x			sta 	esInt2,x
.206f	b5 52		lda $52,x			lda 	esInt1+2,x
.2071	95 50		sta $50,x			sta 	esInt1,x
.2073	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2075	95 48		sta $48,x			sta 	esInt0,x
.2077	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0b1a					fs32Length:
>0b1a							.fill 	1
.2078					LinkInt32FromString:
.2078	aa		tax				tax
.2079	98		tya				tya
.207a	20 7f 20	jsr $207f			jsr 	MInt32FromString
.207d	8a		txa				txa
.207e	60		rts				rts
.207f					MInt32FromString:
.207f	85 0c		sta $0c				sta 	tempShort 					; save base
.2081	98		tya				tya
.2082	48		pha				pha
.2083	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2085	b1 04		lda ($04),y			lda 	(temp0),y
.2087	8d 1a 0b	sta $0b1a			sta 	fs32Length
.208a	f0 65		beq $20f1			beq 	_I32FSFail2					; fail if length zero.
.208c	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.208e	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.2090	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2092	d0 09		bne $209d			bne 	_I32FSNotNegative
.2094	ad 1a 0b	lda $0b1a			lda 	fs32Length 					; get length back.
.2097	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2099	f0 56		beq $20f1			beq 	_I32FSFail2
.209b	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.209d					_I32FSNotNegative:
.209d	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.209f	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.20a1	d0 02		bne $20a5			bne 	_I32FSNN2
.20a3	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.20a5					_I32FSNN2:
.20a5	48		pha				pha 								; save base + final sign on stack.
.20a6	20 11 22	jsr $2211			jsr 	MInt32False 				; zero the return value.
.20a9					_I32FSMainLoop:
.20a9	68		pla				pla 								; get the base back into tempShort
.20aa	48		pha				pha
.20ab	29 7f		and #$7f			and 	#$7F
.20ad	85 0c		sta $0c				sta 	tempShort
.20af	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.20b1	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.20b3	90 02		bcc $20b7			bcc 	_I32FSNotLC
.20b5	e9 20		sbc #$20			sbc 	#32
.20b7					_I32FSNotLC:
.20b7	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.20b8	e9 30		sbc #$30			sbc 	#"0"
.20ba	90 34		bcc $20f0			bcc 	_I32FSFail 					; nothing more to do.
.20bc	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.20be	90 06		bcc $20c6			bcc 	_I32FSValidate
.20c0	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.20c2	90 2c		bcc $20f0			bcc 	_I32FSFail
.20c4	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.20c6					_I32FSValidate:
.20c6	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.20c8	b0 26		bcs $20f0			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.20ca	48		pha				pha 								; save the new digit value.
.20cb	e8		inx				inx 								; put base into next slot up on stack
.20cc	a5 0c		lda $0c				lda 	tempShort
.20ce	20 20 22	jsr $2220			jsr 	MInt32Set8Bit
.20d1	ca		dex				dex
.20d2	20 29 21	jsr $2129			jsr 	MInt32Multiply 				; multiply current by the base
.20d5	e8		inx				inx
.20d6	68		pla				pla  								; put additive into next slot
.20d7	20 20 22	jsr $2220			jsr 	MInt32Set8Bit
.20da	ca		dex				dex
.20db	20 f5 20	jsr $20f5			jsr 	MInt32Add 					; and add it
.20de	c8		iny				iny 								; bump the character pointer
.20df	cc 1a 0b	cpy $0b1a			cpy 	fs32Length 					; until > length.
.20e2	f0 c5		beq $20a9			beq 	_I32FSMainLoop
.20e4	90 c3		bcc $20a9			bcc 	_I32FSMainLoop
.20e6					_I32FSDone:
.20e6	68		pla				pla 								; get base/final sign back
.20e7	10 03		bpl $20ec			bpl 	_I32FSNN3
.20e9	20 cb 21	jsr $21cb			jsr 	MInt32Negate 				; negate the result.
.20ec					_I32FSNN3:
.20ec	68		pla				pla
.20ed	a8		tay				tay
.20ee	38		sec				sec
.20ef	60		rts				rts
.20f0					_I32FSFail:
.20f0	68		pla				pla
.20f1					_I32FSFail2:
.20f1	68		pla				pla
.20f2	a8		tay				tay
.20f3	18		clc				clc
.20f4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.20f5					MInt32Add:
.20f5	18		clc				clc
.20f6	b5 48		lda $48,x			lda 	esInt0,x
.20f8	75 49		adc $49,x			adc 	esInt0+1,x
.20fa	95 48		sta $48,x			sta 	esInt0,x
.20fc	b5 50		lda $50,x			lda 	esInt1,x
.20fe	75 51		adc $51,x			adc 	esInt1+1,x
.2100	95 50		sta $50,x			sta 	esInt1,x
.2102	b5 58		lda $58,x			lda 	esInt2,x
.2104	75 59		adc $59,x			adc 	esInt2+1,x
.2106	95 58		sta $58,x			sta 	esInt2,x
.2108	b5 60		lda $60,x			lda 	esInt3,x
.210a	75 61		adc $61,x			adc 	esInt3+1,x
.210c	95 60		sta $60,x			sta 	esInt3,x
.210e	60		rts				rts
.210f					MInt32Sub:
.210f	38		sec				sec
.2110	b5 48		lda $48,x			lda 	esInt0,x
.2112	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2114	95 48		sta $48,x			sta 	esInt0,x
.2116	b5 50		lda $50,x			lda 	esInt1,x
.2118	f5 51		sbc $51,x			sbc 	esInt1+1,x
.211a	95 50		sta $50,x			sta 	esInt1,x
.211c	b5 58		lda $58,x			lda 	esInt2,x
.211e	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2120	95 58		sta $58,x			sta 	esInt2,x
.2122	b5 60		lda $60,x			lda 	esInt3,x
.2124	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2126	95 60		sta $60,x			sta 	esInt3,x
.2128	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2129					MInt32Multiply:
.2129	e8		inx				inx 								; copy 2nd -> 3rd
.212a	20 4f 21	jsr $214f			jsr 	MInt32CopyUp
.212d	ca		dex				dex
.212e	20 4f 21	jsr $214f			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2131	20 11 22	jsr $2211			jsr 	MInt32False 				; zero 1st.
.2134					_I32Loop:
.2134	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2136	29 01		and #$01			and 	#1
.2138	f0 03		beq $213d			beq 	_I32NoAdd 					; if set
.213a	20 f5 20	jsr $20f5			jsr 	MInt32Add 					; add 2nd to 1st.
.213d					_I32NoAdd:
.213d	e8		inx				inx 								; shift 2nd left
.213e	20 26 22	jsr $2226			jsr 	MInt32ShiftLeft
.2141	e8		inx				inx  								; shift 3rd right
.2142	20 2f 22	jsr $222f			jsr 	MInt32ShiftRight
.2145	20 38 22	jsr $2238			jsr 	MInt32Zero 					; check if zero.
.2148	08		php				php 								; save status bits
.2149	ca		dex				dex 	 							; point back to 1st
.214a	ca		dex				dex
.214b	28		plp				plp 								; get status bits
.214c	d0 e6		bne $2134			bne 	_I32Loop 					; if non-zero keep going.
.214e	60		rts				rts
.214f					MInt32CopyUp:
.214f	b5 48		lda $48,x			lda 	esInt0,x
.2151	95 49		sta $49,x			sta 	esInt0+1,x
.2153	b5 50		lda $50,x			lda 	esInt1,x
.2155	95 51		sta $51,x			sta 	esInt1+1,x
.2157	b5 58		lda $58,x			lda 	esInt2,x
.2159	95 59		sta $59,x			sta 	esInt2+1,x
.215b	b5 60		lda $60,x			lda 	esInt3,x
.215d	95 61		sta $61,x			sta 	esInt3+1,x
.215f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0b1b					MCharCount:	.fill 	1						; count of converted characters
.2160					MLInt32ToString:
.2160	aa		tax				tax									; module passes stack in A, base in Y
.2161	98		tya				tya
.2162	20 67 21	jsr $2167			jsr 	MInt32ToString
.2165	8a		txa				txa
.2166	60		rts				rts
.2167					MInt32ToString:
.2167	48		pha				pha 								; save base
.2168	85 0c		sta $0c				sta 	tempShort 					; save target base.
.216a	a9 00		lda #$00			lda 	#0
.216c	8d 1b 0b	sta $0b1b			sta 	MCharCount 					; clear character count to 0
.216f	98		tya				tya
.2170	48		pha				pha
.2171	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.2173	10 10		bpl $2185			bpl 	_I32TSUnsigned
.2175	48		pha				pha 								; save base on stack.
.2176	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2178	10 08		bpl $2182			bpl 	_I32TSNoFlip
.217a	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.217c	20 b8 21	jsr $21b8			jsr 	MI32WriteCharacter
.217f	20 cb 21	jsr $21cb			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2182					_I32TSNoFlip:
.2182	68		pla				pla 								; get the base back
.2183	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2185					_I32TSUnsigned:
.2185	20 93 21	jsr $2193			jsr 	MI32DivideWrite 			; recursive code to output string.
.2188	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.218a	ad 1b 0b	lda $0b1b			lda 	MCharCount
.218d	91 04		sta ($04),y			sta 	(temp0),y
.218f	68		pla				pla
.2190	a8		tay				tay
.2191	68		pla				pla
.2192	60		rts				rts
.2193					MI32DivideWrite:
.2193	48		pha				pha 								; save the divisor/base
.2194	e8		inx				inx 								; write in the dividing position.
.2195	20 20 22	jsr $2220			jsr 	MInt32Set8Bit
.2198	ca		dex				dex
.2199	20 0b 20	jsr $200b			jsr 	MInt32UDivide 				; divide number by base.
.219c	68		pla				pla 								; get the base into Y
.219d	a8		tay				tay
.219e	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.21a0	48		pha				pha
.21a1	20 38 22	jsr $2238			jsr 	MInt32Zero 					; is the result zero ?
.21a4	f0 04		beq $21aa			beq 	_I32NoRecurse 				; if so, don't recurse.
.21a6	98		tya				tya 								; put base into A
.21a7	20 93 21	jsr $2193			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.21aa					_I32NoRecurse:
.21aa	68		pla				pla 								; get the remainder back
.21ab	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.21ad	90 02		bcc $21b1			bcc 	_I32NotHex
.21af	69 06		adc #$06			adc 	#7-1
.21b1					_I32NotHex:
.21b1	18		clc				clc 								; make it ASCII
.21b2	69 30		adc #$30			adc 	#48
.21b4	20 b8 21	jsr $21b8			jsr 	MI32WriteCharacter 			; write the character out
.21b7	60		rts				rts 								; and exit.
.21b8					MI32WriteCharacter:
.21b8	ee 1b 0b	inc $0b1b			inc 	MCharCount 					; bump count (space for leading count)
.21bb	ac 1b 0b	ldy $0b1b			ldy 	MCharCount 					; get position
.21be	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.21c0	c8		iny				iny
.21c1	a9 00		lda #$00			lda 	#0
.21c3	91 04		sta ($04),y			sta 	(temp0),y
.21c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0b1c					MSeed32:	.fill 	4							; random number seed.
.21c6					MInt32Absolute:
.21c6	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.21c8	30 01		bmi $21cb			bmi 	MInt32Negate
.21ca	60		rts				rts
.21cb					MInt32Negate:
.21cb	38		sec				sec 								; subtract from zero.
.21cc	a9 00		lda #$00			lda 	#0
.21ce	f5 48		sbc $48,x			sbc 	esInt0,x
.21d0	95 48		sta $48,x			sta 	esInt0,x
.21d2	a9 00		lda #$00			lda 	#0
.21d4	f5 50		sbc $50,x			sbc 	esInt1,x
.21d6	95 50		sta $50,x			sta 	esInt1,x
.21d8	a9 00		lda #$00			lda 	#0
.21da	f5 58		sbc $58,x			sbc 	esInt2,x
.21dc	95 58		sta $58,x			sta 	esInt2,x
.21de	a9 00		lda #$00			lda 	#0
.21e0	f5 60		sbc $60,x			sbc 	esInt3,x
.21e2	95 60		sta $60,x			sta 	esInt3,x
.21e4	60		rts				rts
.21e5					MInt32Not:
.21e5	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.21e7	49 ff		eor #$ff			eor 	#$FF
.21e9	95 48		sta $48,x			sta 	esInt0,x
.21eb	b5 50		lda $50,x			lda 	esInt1,x
.21ed	49 ff		eor #$ff			eor 	#$FF
.21ef	95 50		sta $50,x			sta 	esInt1,x
.21f1	b5 58		lda $58,x			lda 	esInt2,x
.21f3	49 ff		eor #$ff			eor 	#$FF
.21f5	95 58		sta $58,x			sta 	esInt2,x
.21f7	b5 60		lda $60,x			lda 	esInt3,x
.21f9	49 ff		eor #$ff			eor 	#$FF
.21fb	95 60		sta $60,x			sta 	esInt3,x
.21fd	60		rts				rts
.21fe					MInt32Sign:
.21fe	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2200	30 0b		bmi $220d			bmi 	MInt32True 					; if set return -1 (true)
.2202	20 38 22	jsr $2238			jsr 	MInt32Zero 					; is it zero ?
.2205	f0 0a		beq $2211			beq 	MInt32False 				; if zero return 0 (false)
.2207	20 11 22	jsr $2211			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.220a	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.220c	60		rts				rts
.220d					MInt32True:
.220d	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.220f	d0 02		bne $2213			bne 	MInt32WriteAll
.2211					MInt32False:
.2211	a9 00		lda #$00			lda 	#0
.2213					MInt32WriteAll:
.2213	95 48		sta $48,x			sta 	esInt0,x
.2215					MInt32Write123:
.2215	95 50		sta $50,x			sta 	esInt1,x
.2217	95 58		sta $58,x			sta 	esInt2,x
.2219	95 60		sta $60,x			sta 	esInt3,x
.221b	a9 00		lda #$00			lda 	#$00						; and make it an integer
.221d	95 40		sta $40,x			sta 	esType,x
.221f	60		rts				rts
.2220					MInt32Set8Bit:
.2220	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2222	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2224	f0 ef		beq $2215			beq		MInt32Write123
.2226					MInt32ShiftLeft:
.2226	16 48		asl $48,x			asl 	esInt0,x
.2228	36 50		rol $50,x			rol	 	esInt1,x
.222a	36 58		rol $58,x			rol	 	esInt2,x
.222c	36 60		rol $60,x			rol	 	esInt3,x
.222e	60		rts				rts
.222f					MInt32ShiftRight:
.222f	56 60		lsr $60,x			lsr 	esInt3,x
.2231	76 58		ror $58,x			ror 	esInt2,x
.2233	76 50		ror $50,x			ror 	esInt1,x
.2235	76 48		ror $48,x			ror 	esInt0,x
.2237	60		rts				rts
.2238					MInt32Zero:
.2238	b5 48		lda $48,x			lda 	esInt0,x
.223a	15 50		ora $50,x			ora 	esInt1,x
.223c	15 58		ora $58,x			ora 	esInt2,x
.223e	15 60		ora $60,x			ora 	esInt3,x
.2240	60		rts				rts
.2241					MInt32Random:
.2241	98		tya				tya
.2242	48		pha				pha
.2243	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2245	ad 1c 0b	lda $0b1c			lda 	MSeed32+0 					; check the seed isn't zero
.2248	d0 03		bne $224d			bne 	_Random1
.224a	a8		tay				tay 								; if so do it 256 times
.224b	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.224d					_Random1:
.224d	0a		asl a				asl 	a
.224e	2e 1d 0b	rol $0b1d			rol 	MSeed32+1
.2251	2e 1e 0b	rol $0b1e			rol 	MSeed32+2
.2254	2e 1f 0b	rol $0b1f			rol 	MSeed32+3
.2257	90 02		bcc $225b			bcc 	_Random2
.2259	49 c5		eor #$c5			eor 	#$C5
.225b					_Random2:
.225b	88		dey				dey
.225c	d0 ef		bne $224d			bne 	_Random1
.225e	8d 1c 0b	sta $0b1c			sta 	MSeed32+0 					; copy the seed in.
.2261	95 48		sta $48,x			sta 	esInt0,x
.2263	ad 1d 0b	lda $0b1d			lda 	MSeed32+1
.2266	95 50		sta $50,x			sta 	esInt1,x
.2268	ad 1e 0b	lda $0b1e			lda 	MSeed32+2
.226b	95 58		sta $58,x			sta 	esInt2,x
.226d	ad 1f 0b	lda $0b1f			lda 	MSeed32+3
.2270	95 60		sta $60,x			sta 	esInt3,x
.2272	68		pla				pla
.2273	a8		tay				tay
.2274	a9 00		lda #$00			lda 	#0
.2276	95 40		sta $40,x			sta 	esType,x
.2278	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2279					CheckToken:
.2279	d1 02		cmp ($02),y			cmp 	(codePtr),y
.227b	d0 02		bne $227f			bne 	_CTError
.227d	c8		iny				iny
.227e	60		rts				rts
.227f					_CTError:
.227f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2281	20 c6 23	jsr $23c6		jsr	errorHandler
.2284					CheckRightParen:
.2284	b1 02		lda ($02),y			lda 	(codePtr),y
.2286	c8		iny				iny
.2287	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.2289	d0 01		bne $228c			bne 	_CRPError
.228b	60		rts				rts
.228c					_CRPError:
.228c	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.228e	20 c6 23	jsr $23c6		jsr	errorHandler
.2291					CheckComma:
.2291	b1 02		lda ($02),y			lda 	(codePtr),y
.2293	c8		iny				iny
.2294	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.2296	d0 01		bne $2299			bne 	_CCError
.2298	60		rts				rts
.2299					_CCError:
.2299	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.229b	20 c6 23	jsr $23c6		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.34b8					ScanForward:
.34b8	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.34ba	86 07		stx $07				stx 	temp1+1
.34bc	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.34be	85 08		sta $08				sta 	temp2
.34c0	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.34c2	c8		iny				iny
.34c3	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.34c5	d0 08		bne $34cf			bne 	_SFNoCheck 					; if so, check token against entered values.
.34c7	c5 06		cmp $06				cmp 	temp1 						; if either matches, we've reached the token
.34c9	f0 24		beq $34ef			beq 	_SFExit 					; at the same strcture depth.
.34cb	c5 07		cmp $07				cmp 	temp1+1
.34cd	f0 20		beq $34ef			beq 	_SFExit
.34cf					_SFNoCheck:
.34cf	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.34d1	90 ed		bcc $34c0			bcc 	_SFLoop
.34d3	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.34d5	90 19		bcc $34f0			bcc 	_SFSpecials
.34d7	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.34d9	90 e5		bcc $34c0			bcc 	_SFLoop
.34db	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.34dd	b0 e1		bcs $34c0			bcs 	_SFLoop
.34df	aa		tax				tax  								; token in X, and look up the adjuster.
.34e0	bd 48 1b	lda $1b48,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.34e3	38		sec				sec 								; convert to an offset ($FF,$01)
.34e4	e9 81		sbc #$81			sbc 	#$81
.34e6	18		clc				clc 								; add to depth
.34e7	65 08		adc $08				adc 	temp2
.34e9	85 08		sta $08				sta 	temp2
.34eb	10 d3		bpl $34c0			bpl 	_SFLoop 					; +ve okay to continue
.34ed	30 35		bmi $3524			bmi 	_SFError 					; if gone -ve then we have a nesting error
.34ef	60		rts		_SFExit:rts
.34f0					_SFSpecials:
.34f0	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.34f2	f0 14		beq $3508			beq 	_SFNextLine
.34f4	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.34f6	f0 31		beq $3529			beq 	_SFFloatSkip
.34f8	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.34fa	f0 04		beq $3500			beq 	_SFSkipString
.34fc	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.34fd	4c c0 34	jmp $34c0			jmp 	_SFLoop 					; token.
.3500					_SFSkipString:
.3500	98		tya				tya
.3501	38		sec				sec
.3502	71 02		adc ($02),y			adc 	(codePtr),y
.3504	a8		tay				tay
.3505	4c c0 34	jmp $34c0			jmp 	_SFLoop
.3508					_SFNextLine:
.3508	a0 00		ldy #$00			ldy 	#0 							; get offset
.350a	b1 02		lda ($02),y			lda 	(codePtr),y
.350c	18		clc				clc 								; add to code pointer.
.350d	65 02		adc $02				adc 	codePtr
.350f	85 02		sta $02				sta 	codePtr
.3511	90 02		bcc $3515			bcc		_SFNLNoCarry
.3513	e6 03		inc $03				inc 	codePtr+1
.3515					_SFNLNoCarry:
.3515	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.3517	d0 a7		bne $34c0			bne		_SFLoop 					; no go round again
.3519	a5 06		lda $06				lda 	temp1
.351b	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.351d	d0 05		bne $3524			bne 	_SFError 					; read uses this to search for data statements
.351f	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.3521	20 c6 23	jsr $23c6		jsr	errorHandler
.3524					_SFError:
.3524	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.3526	20 c6 23	jsr $23c6		jsr	errorHandler
.3529					_SFFloatSkip:
.3529	4c 4c 15	jmp $154c			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.229e					RSReset:
.229e	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.22a0	85 78		sta $78				sta 	rsPointer
.22a2	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.22a4	85 79		sta $79				sta 	1+(rsPointer)
.22a6	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.22a8	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.22ab	60		rts				rts
.22ac					RSClaim:
.22ac	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.22ae	48		pha				pha 								; save marker on stack.
.22af	8a		txa				txa 								; get bytes required.
.22b0	38		sec				sec
.22b1	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.22b3	65 78		adc $78				adc 	rsPointer
.22b5	85 78		sta $78				sta 	rsPointer
.22b7	a5 79		lda $79				lda 	rsPointer+1
.22b9	69 ff		adc #$ff			adc 	#$FF
.22bb	85 79		sta $79				sta 	rsPointer+1
.22bd	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.22bf	90 08		bcc $22c9			bcc 	_RSCOverflow
.22c1	68		pla				pla 								; get marker back
.22c2	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.22c4	91 78		sta ($78),y			sta 	(rsPointer),y
.22c6	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.22c8	60		rts				rts
.22c9					_RSCOverflow:
.22c9	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.22cb	20 c6 23	jsr $23c6		jsr	errorHandler
.22ce					RSFree:
.22ce	18		clc				clc
.22cf	65 78		adc $78				adc 	rsPointer
.22d1	85 78		sta $78				sta 	rsPointer
.22d3	90 02		bcc $22d7			bcc 	_RSFExit
.22d5	e6 79		inc $79				inc 	rsPointer+1
.22d7					_RSFExit:
.22d7	60		rts				rts
.22d8					RSSavePosition:
.22d8	84 0c		sty $0c				sty 	tempShort 					; save Y position
.22da	a8		tay				tay 								; this is where we write it.
.22db	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.22dd	91 78		sta ($78),y			sta 	(rsPointer),y
.22df	c8		iny				iny
.22e0	a5 03		lda $03				lda 	codePtr+1
.22e2	91 78		sta ($78),y			sta 	(rsPointer),y
.22e4	c8		iny				iny
.22e5	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.22e7	91 78		sta ($78),y			sta 	(rsPointer),y
.22e9	a8		tay				tay 								; fix Y back again to original value
.22ea	60		rts				rts
.22eb					RSLoadPosition:
.22eb	a8		tay				tay
.22ec	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.22ee	85 02		sta $02				sta 	codePtr
.22f0	c8		iny				iny
.22f1	b1 78		lda ($78),y			lda 	(rsPointer),y
.22f3	85 03		sta $03				sta 	codePtr+1
.22f5	c8		iny				iny
.22f6	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.22f8	a8		tay				tay 								; to Y
.22f9	60		rts				rts

;******  Return to file: main/main.asm

.22fa					mainHandler:
.22fa	7c fd 22	jmp ($22fd,x)			jmp 	(mainVectors,x)
.22fd					mainVectors:
>22fd	84 22					.word CheckRightParen      ; index 0
>22ff	ca 1c					.word LinkEvaluate         ; index 2
>2301	d6 1c					.word LinkEvaluateInteger  ; index 4
>2303	dc 1c					.word LinkEvaluateSmallInt ; index 6
>2305	d0 1c					.word LinkEvaluateTerm     ; index 8
>2307	60 21					.word MLInt32ToString      ; index 10
>2309	c8 13					.word PrintString          ; index 12
>230b	78 20					.word LinkInt32FromString  ; index 14

;******  Return to file: basic.asm

.230d					section_end_main:
.230d					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.230d					assemblerHandler:
.230d	7c 10 23	jmp ($2310,x)			jmp 	(assemblerVectors,x)
.2310					assemblerVectors:

;******  Return to file: basic.asm

.2310					section_end_assembler:
.2310					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.2310					IOInitialise:
.2310	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.2312	20 3b 23	jsr $233b			jsr 	IOPrintChar
.2315	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.2317	20 67 23	jsr $2367			jsr 	IOInk
.231a	a9 00		lda #$00			lda 	#0
.231c	20 7b 23	jsr $237b			jsr 	IOPaper
.231f	20 23 23	jsr $2323			jsr 	IOClearScreen
.2322	60		rts				rts
.2323					IOClearScreen:
.2323	48		pha				pha
.2324	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.2326	20 3b 23	jsr $233b			jsr 	IOPrintChar
.2329	68		pla				pla
.232a	60		rts				rts
.232b					IONewLine:
.232b	48		pha				pha
.232c	a9 0d		lda #$0d			lda 	#13
.232e	20 3b 23	jsr $233b			jsr 	IOPrintChar
.2331	68		pla				pla
.2332	60		rts				rts
.2333					IOTab:
.2333	48		pha				pha
.2334	a9 20		lda #$20			lda 	#32
.2336	20 3b 23	jsr $233b			jsr 	IOPrintChar
.2339	68		pla				pla
.233a	60		rts				rts
.233b					IOPrintChar:
.233b	aa		tax				tax 								; save in X so we can save Y
.233c	5a		phy				phy
.233d	8a		txa				txa
.233e	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.2340	d0 02		bne $2344			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.2342	a9 14		lda #$14			lda 	#$14
.2344					_IOPCNotBS:
.2344	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.2347	7a		ply				ply
.2348	60		rts				rts
.2349					IOInkey:
.2349	98		tya				tya
.234a	48		pha				pha
.234b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.234e	85 0c		sta $0c				sta 	tempShort
.2350	68		pla				pla
.2351	a8		tay				tay
.2352	a5 0c		lda $0c				lda 	tempShort					; no key pressed.
.2354	f0 10		beq $2366			beq 	_IOIExit
.2356	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.2358	f0 0c		beq $2366			beq 	_IOIExit
.235a	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.235c	f0 06		beq $2364			beq 	_IOIBackspace
.235e	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.2360	90 e7		bcc $2349			bcc 	IOInkey
.2362	b0 02		bcs $2366			bcs 	_IOIExit
.2364					_IOIBackspace:
.2364	a9 08		lda #$08			lda 	#8 							; return chr(8)
.2366					_IOIExit:
.2366	60		rts				rts
.2367					IOInk:
.2367	48		pha				pha
.2368	29 07		and #$07			and 	#7 							; 8 primaries
.236a	aa		tax				tax
.236b	bd 73 23	lda $2373,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.236e	20 3b 23	jsr $233b			jsr 	IOPrintChar
.2371	68		pla				pla
.2372	60		rts				rts
.2373					_IOColourTable:
>2373	90						.byte 	$90 					; 0 Black
>2374	96						.byte 	$96 					; 1 Red
>2375	1e						.byte 	$1E 					; 2 Green
>2376	9e						.byte 	$9E 					; 3 Yellow
>2377	9a						.byte 	$9A 					; 4 Blue
>2378	9c						.byte 	$9C 					; 5 Magenta
>2379	9f						.byte 	$9F 					; 6 Cyan
>237a	05						.byte 	$05 					; 7 White
.237b					IOPaper:
.237b	48		pha				pha
.237c	48		pha				pha
.237d	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.237f	20 3b 23	jsr $233b			jsr 	IOPrintChar 			; and then swap them again.
.2382	68		pla				pla
.2383	20 67 23	jsr $2367			jsr 	IOInk
.2386	a9 01		lda #$01			lda 	#1
.2388	20 3b 23	jsr $233b			jsr 	IOPrintChar
.238b	68		pla				pla
.238c	60		rts				rts
.238d					IOLocate:
.238d	48		pha				pha
.238e	a9 13		lda #$13			lda 	#$13 					; home cursor code
.2390	20 3b 23	jsr $233b			jsr 	IOPrintChar
.2393	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.2395	20 9c 23	jsr $239c			jsr 	_IOLoc2
.2398	68		pla				pla
.2399	a8		tay				tay
.239a	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.239c					_IOLoc2:
.239c	c0 00		cpy #$00			cpy 	#0
.239e	f0 06		beq $23a6			beq 	_IOLocExit
.23a0	20 3b 23	jsr $233b			jsr 	IOPrintChar
.23a3	88		dey				dey
.23a4	d0 f6		bne $239c			bne 	_IOLoc2
.23a6					_IOLocExit:
.23a6	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.23a7					IOReadTimer:
.23a7	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.23aa	48		pha				pha
.23ab	8a		txa				txa
.23ac	a8		tay				tay
.23ad	68		pla				pla
.23ae	60		rts				rts

;******  Return to file: device/device.asm

.23af					deviceHandler:
.23af	7c b2 23	jmp ($23b2,x)			jmp 	(deviceVectors,x)
.23b2					deviceVectors:
>23b2	23 23					.word IOClearScreen        ; index 0
>23b4	2b 23					.word IONewLine            ; index 2
>23b6	10 23					.word IOInitialise         ; index 4
>23b8	67 23					.word IOInk                ; index 6
>23ba	49 23					.word IOInkey              ; index 8
>23bc	8d 23					.word IOLocate             ; index 10
>23be	7b 23					.word IOPaper              ; index 12
>23c0	3b 23					.word IOPrintChar          ; index 14
>23c2	33 23					.word IOTab                ; index 16
>23c4	a7 23					.word IOReadTimer          ; index 18

;******  Return to file: basic.asm

.23c6					section_end_device:
.23c6					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.23c6					ErrorHandler:
.23c6	a9 29		lda #$29			lda 	#(ErrorTextList) & $FF
.23c8	85 04		sta $04				sta 	temp0
.23ca	a9 24		lda #$24			lda 	#(ErrorTextList) >> 8
.23cc	85 05		sta $05				sta 	1+(temp0)
.23ce	ca		dex		_EHFind:dex									; errors start at 1
.23cf	f0 10		beq $23e1			beq 	_EHFound
.23d1	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.23d3	38		sec				sec
.23d4	a5 04		lda $04				lda 	temp0
.23d6	71 04		adc ($04),y			adc 	(temp0),y
.23d8	85 04		sta $04				sta 	temp0
.23da	90 f2		bcc $23ce			bcc 	_EHFind
.23dc	e6 05		inc $05				inc 	temp0+1
.23de	4c ce 23	jmp $23ce			jmp 	_EHFind
.23e1					_EHFound:
.23e1	a2 0c		ldx #$0c		ldx	#12
.23e3	20 fa 22	jsr $22fa		jsr	mainHandler
.23e6	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.23e8	b1 02		lda ($02),y			lda 	(codePtr),y
.23ea	f0 36		beq $2422			beq 	_EHNoLine
.23ec	a9 25		lda #$25			lda 	#(EHAtMsg) & $FF
.23ee	85 04		sta $04				sta 	temp0
.23f0	a9 24		lda #$24			lda 	#(EHAtMsg) >> 8
.23f2	85 05		sta $05				sta 	1+(temp0)
.23f4	a2 0c		ldx #$0c		ldx	#12
.23f6	20 fa 22	jsr $22fa		jsr	mainHandler
.23f9	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.23fb	a2 00		ldx #$00			ldx 	#0
.23fd	b1 02		lda ($02),y			lda 	(codePtr),y
.23ff	95 48		sta $48,x			sta 	esInt0,x
.2401	c8		iny				iny
.2402	b1 02		lda ($02),y			lda 	(codePtr),y
.2404	95 50		sta $50,x			sta 	esInt1,x
.2406	a9 00		lda #$00			lda 	#0
.2408	95 58		sta $58,x			sta 	esInt2,x
.240a	95 60		sta $60,x			sta 	esInt3,x
.240c	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.240e	85 04		sta $04				sta 	temp0
.2410	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2412	85 05		sta $05				sta 	1+(temp0)
.2414	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.2416	a9 00		lda #$00			lda 	#0							; stack position zero.
.2418	a2 0a		ldx #$0a		ldx	#10
.241a	20 fa 22	jsr $22fa		jsr	mainHandler
.241d	a2 0c		ldx #$0c		ldx	#12
.241f	20 fa 22	jsr $22fa		jsr	mainHandler
.2422					_EHNoLine:
.2422	4c 22 24	jmp $2422	_EHHalt:jmp 	_EHHalt
.2425					EHAtMsg:
>2425	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.2429					ErrorTextList:
>2429	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>2431	20 6e 6f 74 20 50 72 65 73 65 6e 74
>243d	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>2445	45 72 72 6f 72
>244a	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>2452	64 69 73 61 62 6c 65 64
>245a	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>2462	6f 6e 20 66 61 69 6c 65 64
>246b	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>2473	42 79 20 5a 65 72 6f
>247a	04 53 74 6f 70				.text 4,"Stop"
>247f	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>2487	73 6d 61 74 63 68
>248d	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>2495	20 56 61 6c 75 65
>249b	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>24a3	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>24b1	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>24b9	20 63 6f 6d 6d 61
>24bf	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>24c7	20 72 65 66 65 72 65 6e 63 65
>24d1	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>24d9	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>24e7	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>24ef	74 6f 6f 20 6c 6f 6e 67 2e
>24f8	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>2500	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>250d	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>2515	69 74 68 6f 75 74 20 52 45 50 45 41 54
>2522	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>252a	74 68 6f 75 74 20 46 4f 52
>2533	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>253b	74 68 6f 75 74 20 57 48 49 4c 45
>2546	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>254e	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>255b	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>2563	54 20 69 6e 64 65 78
>256a	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>2572	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>2582	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>258a	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>2599	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>25a1	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>25b1	63 65 2e
>25b4	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>25bc	20 50 72 6f 63 65 64 75 72 65
>25c6	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>25ce	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>25de	2e
>25df	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>25e7	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>25f5	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>25fd	75 69 72 65 73 20 61 72 72 61 79
>2608	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>2610	61 79 20 69 6e 64 65 78 2e
>2619	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>2621	64 61 74 61
>2625	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2626					section_end_error:
.2626					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2626					ExtensionHandler:
.2626	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.2628	d0 08		bne $2632			bne 	_ExtensionUnary 			; is passed in A.
.262a	b1 02		lda ($02),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.262c	c8		iny				iny
.262d	0a		asl a				asl 	a
.262e	aa		tax				tax
.262f	7c 30 26	jmp ($2630,x)			jmp 	(Group2Vectors-12,x)
.2632					_ExtensionUnary:
.2632	48		pha				pha 								; save stack pos in A
.2633	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token, double into X
.2635	c8		iny				iny
.2636	0a		asl a				asl 	a
.2637	aa		tax				tax
.2638	68		pla				pla 								; restore stack pos and call group3 command.
.2639	7c 34 26	jmp ($2634,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.263c					Group2Vectors:
>263c	4c 26					.word	Command_VPoke            ; $86 vpoke
>263e	4f 26					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.2640					Group3Vectors:
>2640	90 26					.word	Command_VPeek            ; $86 vpeek(
>2642	93 26					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.2644					XEvaluateInteger:
.2644	8a		txa				txa
.2645	a2 04		ldx #$04		ldx	#4
.2647	20 fa 22	jsr $22fa		jsr	mainHandler
.264a	aa		tax				tax
.264b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.264c					Command_VPoke:
.264c	38		sec				sec 						; one byte , CS
.264d	b0 01		bcs $2650			bcs 	CmdVideoWrite
.264f					Command_VDoke:
.264f	18		clc				clc 						; two bytes, CC
.2650					CmdVideoWrite:
.2650	08		php				php 						; save one or two btes
.2651	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.2653	20 44 26	jsr $2644			jsr 	XEvaluateInteger
.2656	20 91 22	jsr $2291			jsr 	CheckComma
.2659	e8		inx				inx
.265a	20 44 26	jsr $2644			jsr 	XEvaluateInteger
.265d	ca		dex				dex
.265e	20 6f 26	jsr $266f			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2661	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.2663	8d 23 9f	sta $9f23			sta 	$9F23
.2666	28		plp				plp 						; if it was Poke then exit
.2667	b0 05		bcs $266e			bcs 	_CVWExit
.2669	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.266b	8d 23 9f	sta $9f23			sta 	$9F23
.266e					_CVWExit:
.266e	60		rts				rts
.266f					SetUpTOSVRamAddress:
.266f	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2671	29 01		and #$01			and 	#1
.2673	15 60		ora $60,x			ora 	esInt3,x
.2675	d0 14		bne $268b			bne 	CVWValue
.2677	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.2679	8d 20 9f	sta $9f20			sta 	$9F20
.267c	b5 50		lda $50,x			lda 	esInt1,x
.267e	8d 21 9f	sta $9f21			sta	 	$9F21
.2681	b5 58		lda $58,x			lda 	esInt2,x
.2683	29 01		and #$01			and 	#1
.2685	09 10		ora #$10			ora 	#$10 				; step 1.
.2687	8d 22 9f	sta $9f22			sta 	$9F22
.268a	60		rts				rts
.268b					CVWValue:
.268b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.268d	20 c6 23	jsr $23c6		jsr	errorHandler
.2690					Command_VPeek:
.2690	38		sec				sec 						; one byte , CS
.2691	b0 01		bcs $2694			bcs 	CmdVideoRead
.2693					Command_VDeek:
.2693	18		clc				clc 						; two bytes, CC
.2694					CmdVideoRead:
.2694	08		php				php 						; save action on stack.
.2695	aa		tax				tax 						; save stack position
.2696	20 44 26	jsr $2644			jsr 	XEvaluateInteger 	; address
.2699	20 84 22	jsr $2284			jsr 	CheckRightParen 	; closing right bracket.
.269c	20 6f 26	jsr $266f			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.269f	20 11 22	jsr $2211			jsr 	MInt32False 		; zero return.
.26a2	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.26a5	95 48		sta $48,x			sta 	esInt0,x
.26a7	28		plp				plp 						; check if DOKE (carry was clear)
.26a8	b0 05		bcs $26af			bcs 	_CVRExit
.26aa	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.26ad	95 50		sta $50,x			sta 	esInt1,x
.26af					_CVRExit:
.26af	8a		txa				txa 						; return X position.
.26b0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.26b1					section_end_extension:
.26b1					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.26b1					floatingpointHandler:
.26b1	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.26b3	20 c6 23	jsr $23c6		jsr	errorHandler

;******  Return to file: basic.asm

.26b6					section_end_floatingpoint:
.26b6					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.26b6					interactionHandler:
.26b6	7c b9 26	jmp ($26b9,x)			jmp 	(interactionVectors,x)
.26b9					interactionVectors:

;******  Return to file: basic.asm

.26b9					section_end_interaction:
.26b9					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.26b9					StringChrs:
.26b9	aa		tax				tax 								; set up stack
.26ba	a9 02		lda #$02			lda 	#2
.26bc	20 73 27	jsr $2773			jsr 	AllocateSoftString
.26bf	98		tya				tya
.26c0	20 99 27	jsr $2799			jsr 	WriteSoftString
.26c3	20 c8 26	jsr $26c8			jsr 	ReturnSoftString
.26c6	8a		txa				txa
.26c7	60		rts				rts
.26c8					ReturnSoftString:
.26c8	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.26ca	95 48		sta $48,x			sta 	esInt0,x
.26cc	a5 7b		lda $7b				lda 	softMemAlloc+1
.26ce	95 50		sta $50,x			sta 	esInt1,x
.26d0	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.26d2	95 58		sta $58,x			sta 	esInt2,x
.26d4	95 60		sta $60,x			sta 	esInt3,x
.26d6	a9 40		lda #$40			lda 	#$40 						; type string.
.26d8	95 40		sta $40,x			sta 	esType,x
.26da	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.26db					STRCompare:
.26db	48		pha				pha 								; save A
.26dc	aa		tax				tax 								; put stack pos in X
.26dd	98		tya				tya
.26de	48		pha				pha
.26df	20 13 27	jsr $2713			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.26e2	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.26e4	b1 04		lda ($04),y			lda 	(temp0),y
.26e6	d1 06		cmp ($06),y			cmp 	(temp1),y
.26e8	90 02		bcc $26ec			bcc 	_SCNotSmaller
.26ea	b1 06		lda ($06),y			lda 	(temp1),y
.26ec					_SCNotSmaller:
.26ec	aa		tax				tax 								; put that in X. We compare this many chars first.
.26ed					_SCCompareLoop:
.26ed	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.26ef	f0 0c		beq $26fd			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.26f1	ca		dex				dex 								; decrement chars to compare.
.26f2	c8		iny				iny 								; move to next character
.26f3	38		sec				sec 								; calculate s1[y]-s2[y]
.26f4	b1 04		lda ($04),y			lda 	(temp0),y
.26f6	f1 06		sbc ($06),y			sbc 	(temp1),y
.26f8	d0 0a		bne $2704			bne 	_SCReturnResult 			; if different return sign of A
.26fa	4c ed 26	jmp $26ed			jmp 	_SCCompareLoop
.26fd					_SCSameToEndShortest
.26fd	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.26ff	38		sec				sec
.2700	b1 04		lda ($04),y			lda 	(temp0),y
.2702	f1 06		sbc ($06),y			sbc 	(temp1),y
.2704					_SCReturnResult:
.2704	08		php				php 								; set return to zero preserving PSW.
.2705	a2 00		ldx #$00			ldx 	#0
.2707	28		plp				plp
.2708	f0 05		beq $270f			beq 	_SCExit 					; two values equal, then exit
.270a	ca		dex				dex 								; X = $FF
.270b	90 02		bcc $270f			bcc 	_SCExit 					; if 1st < 2nd then -1
.270d	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.270f					_SCExit:
.270f	68		pla				pla
.2710	a8		tay				tay
.2711	68		pla				pla
.2712	60		rts				rts
.2713					CopyStringPair:
.2713	b5 49		lda $49,x			lda 	esInt0+1,x
.2715	85 06		sta $06				sta 	temp1
.2717	b5 51		lda $51,x			lda 	esInt1+1,x
.2719	85 07		sta $07				sta 	temp1+1
.271b					CopyStringTop:
.271b	b5 48		lda $48,x			lda 	esInt0,x
.271d	85 04		sta $04				sta 	temp0
.271f	b5 50		lda $50,x			lda 	esInt1,x
.2721	85 05		sta $05				sta 	temp0+1
.2723	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2724					StringConcat:
.2724	aa		tax				tax									; stack pos in X
.2725	98		tya				tya
.2726	48		pha				pha
.2727	20 13 27	jsr $2713			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.272a	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.272b	a0 00		ldy #$00			ldy 	#0
.272d	b1 04		lda ($04),y			lda 	(temp0),y
.272f	71 06		adc ($06),y			adc 	(temp1),y
.2731	b0 1c		bcs $274f			bcs 	_SCError 					; just too many characters here.
.2733	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2735	b0 18		bcs $274f			bcs 	_SCError
.2737	20 73 27	jsr $2773			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.273a	20 6a 27	jsr $276a			jsr 	CopySoftToStack 			; copy that to the stack.
.273d	20 54 27	jsr $2754			jsr 	SCCopyTemp0 				; copy temp0
.2740	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.2742	85 04		sta $04				sta 	temp0
.2744	a5 07		lda $07				lda 	temp1+1
.2746	85 05		sta $05				sta 	temp0+1
.2748	20 54 27	jsr $2754			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.274b	68		pla				pla
.274c	a8		tay				tay
.274d	8a		txa				txa 								; and A
.274e	60		rts				rts
.274f					_SCError:
.274f	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2751	20 c6 23	jsr $23c6		jsr	errorHandler
.2754					SCCopyTemp0:
.2754	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2756	b1 04		lda ($04),y			lda 	(temp0),y
.2758	85 08		sta $08				sta 	temp2
.275a					_SCCopyLoop:
.275a	a5 08		lda $08				lda 	temp2 						; done the lot
.275c	f0 0b		beq $2769			beq 	_SCCopyExit
.275e	c6 08		dec $08				dec 	temp2
.2760	c8		iny				iny 								; get next char
.2761	b1 04		lda ($04),y			lda 	(temp0),y
.2763	20 99 27	jsr $2799			jsr 	WriteSoftString 			; write to soft string.
.2766	4c 5a 27	jmp $275a			jmp 	_SCCopyLoop
.2769					_SCCopyExit:
.2769	60		rts				rts
.276a					CopySoftToStack:
.276a	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.276c	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.276e	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2770	95 50		sta $50,x			sta 	esInt1,x
.2772	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2773					AllocateSoftString:
.2773	85 0c		sta $0c				sta 	tempShort 					; save count
.2775	98		tya				tya
.2776	48		pha				pha
.2777	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2779	d0 09		bne $2784			bne 	_ASSDone
.277b	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.277d	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.277f	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2781	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2782	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2784					_ASSDone:
.2784	38		sec				sec 								; allocate downwards enough memory
.2785	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2787	e5 0c		sbc $0c				sbc 	tempShort 					; the soft memory pointer
.2789	85 7a		sta $7a				sta 	softMemAlloc
.278b	a5 7b		lda $7b				lda 	softMemAlloc+1
.278d	e9 00		sbc #$00			sbc 	#0
.278f	85 7b		sta $7b				sta 	softMemAlloc+1
.2791	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2793	a8		tay				tay
.2794	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2796	68		pla				pla
.2797	a8		tay				tay
.2798	60		rts				rts
.2799					WriteSoftString:
.2799	84 0c		sty $0c				sty 	tempShort 					; save Y
.279b	48		pha				pha 								; save character on stack
.279c	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.279e	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.27a0	18		clc				clc
.27a1	69 01		adc #$01			adc 	#1
.27a3	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.27a5	a8		tay				tay 								; offset in Y
.27a6	68		pla				pla 								; get char and write.
.27a7	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.27a9	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.27ab	60		rts				rts
.27ac					StrClone:
.27ac	aa		tax				tax 								; set up stack.
.27ad	98		tya				tya
.27ae	48		pha				pha
.27af	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.27b1	b1 04		lda ($04),y			lda 	(temp0),y 					; this is the bytes required.
.27b3	18		clc				clc
.27b4	69 01		adc #$01			adc 	#1
.27b6	20 73 27	jsr $2773			jsr 	AllocateSoftString 			; allocate soft memory
.27b9	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.27bb	95 48		sta $48,x			sta 	esInt0,x
.27bd	a5 7b		lda $7b				lda 	softMemAlloc+1
.27bf	95 50		sta $50,x			sta 	esInt1,x
.27c1	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.27c3	95 58		sta $58,x			sta 	esInt2,x
.27c5	95 60		sta $60,x			sta 	esInt3,x
.27c7	a9 40		lda #$40			lda 	#$40 						; set type to string.
.27c9	95 40		sta $40,x			sta 	esType,x
.27cb	20 54 27	jsr $2754			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.27ce	68		pla				pla
.27cf	a8		tay				tay
.27d0	8a		txa				txa
.27d1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.27d2					CaseString:
.27d2	48		pha				pha 								; save A and copy to X
.27d3	aa		tax				tax
.27d4	98		tya				tya
.27d5	48		pha				pha
.27d6	20 1b 27	jsr $271b			jsr 	CopyStringTop 				; target string -> temp0
.27d9	a0 00		ldy #$00			ldy 	#0
.27db	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.27dd	18		clc				clc
.27de	69 01		adc #$01			adc 	#1 							; one more for length byte
.27e0	20 73 27	jsr $2773			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.27e3	20 6a 27	jsr $276a			jsr 	CopySoftToStack 			; copy that to the stack.
.27e6	a0 00		ldy #$00			ldy 	#0
.27e8	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.27ea	aa		tax				tax
.27eb					_CSCopy:
.27eb	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.27ed	f0 24		beq $2813			beq 	_CSExit
.27ef	ca		dex				dex
.27f0	c8		iny				iny
.27f1	68		pla				pla 								; check direction
.27f2	48		pha				pha
.27f3	f0 0c		beq $2801			beq 	_CSUpper
.27f5	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.27f7	c9 41		cmp #$41			cmp 	#"A"
.27f9	90 12		bcc $280d			bcc 	_CSWrite
.27fb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.27fd	b0 0e		bcs $280d			bcs 	_CSWrite
.27ff	90 0a		bcc $280b			bcc 	_CSFlipWrite
.2801					_CSUpper:
.2801	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.2803	c9 61		cmp #$61			cmp 	#"a"
.2805	90 06		bcc $280d			bcc 	_CSWrite
.2807	c9 7b		cmp #$7b			cmp 	#"z"+1
.2809	b0 02		bcs $280d			bcs 	_CSWrite
.280b					_CSFlipWrite:
.280b	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.280d					_CSWrite:
.280d	20 99 27	jsr $2799			jsr 	WriteSoftString 			; add to soft string.
.2810	4c eb 27	jmp $27eb			jmp 	_CSCopy
.2813					_CSExit:
.2813	68		pla				pla
.2814	a8		tay				tay
.2815	68		pla				pla
.2816	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2817					StringSubstring:
.2817	48		pha				pha
.2818	aa		tax				tax 								; access stack.
.2819	98		tya				tya
.281a	48		pha				pha
.281b	20 1b 27	jsr $271b			jsr 	CopyStringTop 				; point temp0 to the string.
.281e	a0 00		ldy #$00			ldy 	#0 							; get length.
.2820	b1 04		lda ($04),y			lda 	(temp0),Y
.2822	85 06		sta $06				sta 	temp1
.2824	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2826	c5 06		cmp $06				cmp 	temp1 						; return "" if > length.
.2828	f0 02		beq $282c			beq 	_SSBOkay
.282a	b0 2a		bcs $2856			bcs 	_SSBReturnNull
.282c					_SSBOkay:
.282c	a5 06		lda $06				lda 	temp1 						; get the total length +1
.282e	18		clc				clc
.282f	69 01		adc #$01			adc 	#1
.2831	38		sec				sec
.2832	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2834	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2836	90 02		bcc $283a			bcc		_SSBTrunc
.2838	b5 4a		lda $4a,x			lda 	esInt0+2,x
.283a					_SSBTrunc:
.283a	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.283c	18		clc				clc
.283d	69 01		adc #$01			adc 	#1 							; add 1
.283f	20 73 27	jsr $2773			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2842	20 6a 27	jsr $276a			jsr 	CopySoftToStack 			; copy that to the stack.
.2845	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2847					_SSBCopyLoop:
.2847	a5 07		lda $07				lda 	temp1+1 					; done them all
.2849	f0 0e		beq $2859			beq 	_SSBExit
.284b	c6 07		dec $07				dec 	temp1+1
.284d	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.284f	20 99 27	jsr $2799			jsr 	WriteSoftString
.2852	c8		iny				iny
.2853	4c 47 28	jmp $2847			jmp 	_SSBCopyLoop
.2856					_SSBReturnNull:
.2856	20 5d 28	jsr $285d			jsr 	ReturnNull
.2859					_SSBExit:
.2859	68		pla				pla
.285a	a8		tay				tay
.285b	68		pla				pla
.285c	60		rts				rts
.285d					ReturnNull:
.285d	a9 00		lda #$00			lda 	#0 							; clear null string
.285f	8d cc 0a	sta $0acc			sta 	NullString
.2862	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.2864	95 48		sta $48,x			sta 	esInt0,x
.2866	a9 0a		lda #$0a			lda 	#NullString >> 8
.2868	95 50		sta $50,x			sta 	esInt1,x
.286a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0b20					srcStrLen:
>0b20							.fill 	1
.286b					StringWrite:
.286b	aa		tax				tax
.286c	48		pha				pha
.286d	98		tya				tya
.286e	48		pha				pha
.286f	20 96 28	jsr $2896			jsr 	CheckOverwriteCurrent
.2872	b0 0d		bcs $2881			bcs		_SWCopyCurrent
.2874	20 d4 28	jsr $28d4			jsr 	RequiresConcretion
.2877	90 0e		bcc $2887			bcc 	_SWWriteReference
.2879	20 37 29	jsr $2937			jsr 	CheckSpecialConcretion
.287c	b0 09		bcs $2887			bcs 	_SWWriteReference
.287e	20 e8 28	jsr $28e8			jsr 	AllocateHardMemory
.2881					_SWCopyCurrent:
.2881	20 1b 29	jsr $291b			jsr 	CopyStringToHardMemory
.2884	4c 92 28	jmp $2892			jmp 	_SWExit
.2887					_SWWriteReference
.2887	a0 00		ldy #$00			ldy 	#0
.2889	a5 04		lda $04				lda 	temp0
.288b	91 06		sta ($06),y			sta 	(temp1),y
.288d	c8		iny				iny
.288e	a5 05		lda $05				lda 	temp0+1
.2890	91 06		sta ($06),y			sta 	(temp1),y
.2892					_SWExit:
.2892	68		pla				pla
.2893	a8		tay				tay
.2894	68		pla				pla
.2895	60		rts				rts
.2896					CheckOverwriteCurrent:
.2896	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2898	b5 51		lda $51,x			lda 	esInt1+1,x
.289a	85 05		sta $05				sta 	temp0+1
.289c	b5 49		lda $49,x			lda 	esInt0+1,x
.289e	85 04		sta $04				sta 	temp0
.28a0	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied and save it.
.28a2	8d 20 0b	sta $0b20			sta 	srcStrLen
.28a5	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.28a7	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.28a9	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.28ab	85 07		sta $07				sta 	temp1+1
.28ad	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.28af	b1 06		lda ($06),y			lda 	(temp1),y
.28b1	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.28b3	90 1b		bcc $28d0			bcc 	_COCFail 				; in hard memory.
.28b5	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.28b7	b1 06		lda ($06),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.28b9	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.28bb	85 08		sta $08				sta 	temp2
.28bd	c8		iny				iny
.28be	b1 06		lda ($06),y			lda 	(temp1),y
.28c0	e9 00		sbc #$00			sbc 	#0
.28c2	85 09		sta $09				sta 	temp2+1
.28c4	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.28c6	b1 08		lda ($08),y			lda 	(temp2),y
.28c8	38		sec				sec  							; maximum character capacity.
.28c9	e9 02		sbc #$02			sbc 	#2
.28cb	cd 20 0b	cmp $0b20			cmp 	srcStrLen 				; if >= the required length
.28ce	b0 02		bcs $28d2			bcs 	_COCCanReuse
.28d0					_COCFail:
.28d0	18		clc				clc
.28d1	60		rts				rts
.28d2					_COCCanReuse:
.28d2	38		sec				sec
.28d3	60		rts				rts
.28d4					RequiresConcretion:
.28d4	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28d6	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.28d8	b0 0a		bcs $28e4			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.28da	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.28dc	f0 08		beq $28e6			beq 	_RCFail 				; if not, this cannot be soft memory.
.28de	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28e0	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.28e2	90 02		bcc $28e6			bcc 	_RCFail 				; so concreting
.28e4					_RCSucceed:
.28e4	38		sec				sec
.28e5	60		rts				rts
.28e6					_RCFail:
.28e6	18		clc				clc
.28e7	60		rts				rts
.28e8					AllocateHardMemory:
.28e8	98		tya				tya
.28e9	48		pha				pha
.28ea	ad 20 0b	lda $0b20			lda 	srcStrLen 				; characters in string
.28ed	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.28ef	b0 04		bcs $28f5			bcs 	_AHMSetMax 				; max out that amount.
.28f1	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.28f3	90 02		bcc $28f7			bcc 	_AHMIsOkay
.28f5					_AHMSetMax:
.28f5	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.28f7					_AHMIsOkay:
.28f7	48		pha				pha	 							; save size to be allocated
.28f8	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.28fa	38		sec				sec  							; and copy result to TOS as target address.
.28fb	65 0d		adc $0d				adc 	highMemory
.28fd	85 0d		sta $0d				sta 	highMemory
.28ff	a5 0e		lda $0e				lda 	highMemory+1
.2901	69 ff		adc #$ff			adc 	#$FF
.2903	85 0e		sta $0e				sta 	highMemory+1
.2905	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2907	68		pla				pla 							; get the total size of the storage block
.2908	91 0d		sta ($0d),y			sta 	(highMemory),y 			; and set it
.290a	18		clc				clc
.290b	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.290d	69 01		adc #$01			adc 	#1
.290f	91 06		sta ($06),y			sta 	(temp1),y
.2911	a5 0e		lda $0e				lda 	highMemory+1
.2913	69 00		adc #$00			adc 	#0
.2915	c8		iny				iny
.2916	91 06		sta ($06),y			sta 	(temp1),y
.2918	68		pla				pla
.2919	a8		tay				tay
.291a	60		rts				rts
.291b					CopyStringToHardMemory:
.291b	98		tya				tya
.291c	48		pha				pha
.291d	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.291f	b1 06		lda ($06),y			lda 	(temp1),y
.2921	85 08		sta $08				sta 	temp2
.2923	c8		iny				iny
.2924	b1 06		lda ($06),y			lda 	(temp1),y
.2926	85 09		sta $09				sta 	temp2+1
.2928	ac 20 0b	ldy $0b20			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.292b					_CSTHMLoop:
.292b	b1 04		lda ($04),y			lda 	(temp0),y
.292d	91 08		sta ($08),y			sta 	(temp2),y
.292f	88		dey				dey
.2930	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2932	d0 f7		bne $292b			bne 	_CSTHMLoop
.2934	68		pla				pla
.2935	a8		tay				tay
.2936	60		rts				rts
.2937					CheckSpecialConcretion:
.2937	ad 20 0b	lda $0b20			lda 	srcStrLen 				; check string is null e.g. length = 0
.293a	f0 02		beq $293e			beq 	_CSCNullString
.293c	18		clc				clc
.293d	60		rts				rts
.293e					_CSCNullString:
.293e	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2940	8d cc 0a	sta $0acc			sta 	NullString		 		; storage on null strings.
.2943	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2945	85 04		sta $04				sta 	temp0
.2947	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2949	85 05		sta $05				sta 	1+(temp0)
.294b	38		sec				sec
.294c	60		rts				rts

;******  Return to file: string/string.asm

.294d					stringHandler:
.294d	7c 50 29	jmp ($2950,x)			jmp 	(stringVectors,x)
.2950					stringVectors:
>2950	b9 26					.word StringChrs           ; index 0
>2952	ac 27					.word StrClone             ; index 2
>2954	24 27					.word StringConcat         ; index 4
>2956	db 26					.word STRCompare           ; index 6
>2958	d2 27					.word CaseString           ; index 8
>295a	17 28					.word StringSubstring      ; index 10
>295c	6b 28					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.295e					section_end_string:
.295e					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0b21					deTokeniseVector:
>0b21							.fill 	2
.0b23					lastCharacterClass:
>0b23							.fill 	1
.295e					ListLine:
.295e	a9 6e		lda #$6e			lda 	#(deTokenPrint) & $FF
.2960	8d 21 0b	sta $0b21			sta 	deTokeniseVector
.2963	a9 2a		lda #$2a			lda 	#(deTokenPrint) >> 8
.2965	8d 22 0b	sta $0b22			sta 	1+(deTokeniseVector)
.2968					Detokenise:
.2968	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.296a	8d 23 0b	sta $0b23			sta 	lastCharacterClass
.296d	a2 02		ldx #$02			ldx 	#2
.296f	20 11 22	jsr $2211			jsr 	MInt32False
.2972	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2974	b1 02		lda ($02),y			lda 	(codePtr),y
.2976	95 48		sta $48,x			sta 	esInt0,x
.2978	c8		iny				iny
.2979	b1 02		lda ($02),y			lda 	(codePtr),y
.297b	95 50		sta $50,x			sta 	esInt1,x
.297d	a9 84		lda #$84			lda 	#LTYLineNumber
.297f	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2982	a9 0a		lda #$0a			lda 	#10 					; base 10
.2984	20 20 2a	jsr $2a20			jsr 	DTPrintInteger 			; print as integer.
.2987	a0 00		ldy #$00			ldy 	#0 						; get length
.2989	b1 04		lda ($04),y			lda 	(temp0),y 				; into X
.298b	aa		tax				tax
.298c					_DTPadOut:
.298c	a9 20		lda #$20			lda 	#" "
.298e	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2991	e8		inx				inx
.2992	e0 06		cpx #$06			cpx 	#6
.2994	d0 f6		bne $298c			bne 	_DTPadOut
.2996	a0 03		ldy #$03			ldy 	#3 						; start position.
.2998					_DTListLoop
.2998	b1 02		lda ($02),y			lda 	(codePtr),y
.299a	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.299c	f0 58		beq $29f6			beq 	_DTIsString
.299e	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.29a0	f0 7a		beq $2a1c			beq 	_DTIsFloat
.29a2	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.29a4	f0 16		beq $29bc			beq 	_DTHexConstant
.29a6	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.29a8	d0 06		bne $29b0			bne 	_DTNotEnd
.29aa	a9 ff		lda #$ff			lda 	#255 					; print CR
.29ac	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.29af	60		rts				rts
.29b0					_DTNotEnd:
.29b0	c9 00		cmp #$00			cmp 	#0
.29b2	30 36		bmi $29ea			bmi 	_DTIsToken
.29b4	c9 40		cmp #$40			cmp 	#$40
.29b6	90 38		bcc $29f0			bcc 	_DTIsIdentifier
.29b8	a9 0a		lda #$0a			lda 	#10 					; this is the base
.29ba	d0 08		bne $29c4			bne 	_DTConstant
.29bc					_DTHexConstant:
.29bc	a9 26		lda #$26			lda 	#"&"
.29be	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.29c1	c8		iny				iny
.29c2	a9 10		lda #$10			lda 	#16
.29c4					_DTConstant:
.29c4	48		pha				pha
.29c5	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.29c7	20 8a 2a	jsr $2a8a			jsr 	DTSwitchMode
.29ca	a9 86		lda #$86			lda 	#LTYConstant
.29cc	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.29cf	a2 02		ldx #$02			ldx 	#2
.29d1	8a		txa				txa
.29d2	a2 08		ldx #$08		ldx	#8
.29d4	20 fa 22	jsr $22fa		jsr	mainHandler
.29d7	aa		tax				tax
.29d8	20 f9 11	jsr $11f9			jsr 	TOSToTemp0
.29db	68		pla				pla
.29dc	85 0c		sta $0c				sta 	tempShort
.29de	98		tya				tya
.29df	48		pha				pha
.29e0	a5 0c		lda $0c				lda 	tempShort
.29e2	20 20 2a	jsr $2a20			jsr 	DTPrintInteger
.29e5	68		pla				pla
.29e6	a8		tay				tay
.29e7	4c 98 29	jmp $2998			jmp 	_DTListLoop
.29ea					_DTIsToken:
.29ea	20 e3 2a	jsr $2ae3			jsr 	DTDecodeToken
.29ed	4c 98 29	jmp $2998			jmp 	_DTListLoop
.29f0					_DTIsIdentifier:
.29f0	20 9c 2a	jsr $2a9c			jsr 	DTIdentifier
.29f3	4c 98 29	jmp $2998			jmp 	_DTListLoop
.29f6					_DTIsString:
.29f6	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.29f8	20 8a 2a	jsr $2a8a			jsr 	DTSwitchMode
.29fb	a9 81		lda #$81			lda 	#LTYString
.29fd	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2a00	a9 22		lda #$22			lda 	#'"'						; open quote
.2a02	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2a05	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.2a07	8a		txa				txa
.2a08	a2 08		ldx #$08		ldx	#8
.2a0a	20 fa 22	jsr $22fa		jsr	mainHandler
.2a0d	aa		tax				tax
.2a0e	20 f9 11	jsr $11f9			jsr 	TOSToTemp0
.2a11	20 32 2a	jsr $2a32			jsr 	DTPrintLengthPrefix
.2a14	a9 22		lda #$22			lda 	#'"'
.2a16	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2a19	4c 98 29	jmp $2998			jmp 	_DTListLoop
.2a1c					_DTIsFloat:
>2a1c	db						.byte 	$DB
.2a1d	4c 1c 2a	jmp $2a1c			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.2a20					DTPrintInteger:
.2a20	48		pha				pha
.2a21	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2a23	85 04		sta $04				sta 	temp0
.2a25	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2a27	85 05		sta $05				sta 	1+(temp0)
.2a29	68		pla				pla
.2a2a	a8		tay				tay
.2a2b	8a		txa				txa
.2a2c	a2 0a		ldx #$0a		ldx	#10
.2a2e	20 fa 22	jsr $22fa		jsr	mainHandler
.2a31	aa		tax				tax
.2a32					DTPrintLengthPrefix:
.2a32	98		tya				tya
.2a33	48		pha				pha
.2a34	a0 00		ldy #$00			ldy 	#0
.2a36	b1 04		lda ($04),y			lda 	(temp0),y
.2a38	aa		tax				tax
.2a39	f0 0b		beq $2a46			beq 	_DTPLPExit
.2a3b					_DTPLPLoop:
.2a3b	c8		iny				iny
.2a3c	b1 04		lda ($04),y			lda 	(temp0),y
.2a3e	29 7f		and #$7f			and 	#$7F
.2a40	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2a43	ca		dex				dex
.2a44	d0 f5		bne $2a3b			bne 	_DTPLPLoop
.2a46					_DTPLPExit:
.2a46	68		pla				pla
.2a47	a8		tay				tay
.2a48	60		rts				rts
.2a49					ListOutputCharacter:
.2a49	85 0c		sta $0c				sta 	tempShort
.2a4b	48		pha				pha
.2a4c	8a		txa				txa
.2a4d	48		pha				pha
.2a4e	98		tya				tya
.2a4f	48		pha				pha
.2a50	a5 0c		lda $0c				lda 	tempShort
.2a52	c9 20		cmp #$20			cmp 	#32
.2a54	b0 0c		bcs $2a62			bcs		_LOCHiBit
.2a56	09 40		ora #$40			ora 	#64
.2a58	c9 40		cmp #$40			cmp 	#64
.2a5a	f0 06		beq $2a62			beq 	_LOCHiBit
.2a5c	c9 5b		cmp #$5b			cmp 	#65+26
.2a5e	b0 02		bcs $2a62			bcs 	_LOCHiBit
.2a60	69 20		adc #$20			adc 	#32
.2a62					_LOCHiBit:
.2a62	20 6b 2a	jsr $2a6b			jsr 	_LOCCallVector
.2a65	68		pla				pla
.2a66	a8		tay				tay
.2a67	68		pla				pla
.2a68	aa		tax				tax
.2a69	68		pla				pla
.2a6a					_LOCExit:
.2a6a	60		rts				rts
.2a6b					_LOCCallVector:
.2a6b	6c 21 0b	jmp ($0b21)			jmp 	(deTokeniseVector)
.2a6e					deTokenPrint:
.2a6e	c9 00		cmp #$00			cmp 	#0
.2a70	30 06		bmi $2a78			bmi 	_dtpInk
.2a72	a2 0e		ldx #$0e		ldx	#14
.2a74	20 af 23	jsr $23af		jsr	deviceHandler
.2a77	60		rts				rts
.2a78	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.2a7a	f0 08		beq $2a84			beq 	_dtpCR
.2a7c	29 07		and #$07			and 	#7
.2a7e	a2 06		ldx #$06		ldx	#6
.2a80	20 af 23	jsr $23af		jsr	deviceHandler
.2a83	60		rts				rts
.2a84					_dtpCR:
.2a84	a2 02		ldx #$02		ldx	#2
.2a86	20 af 23	jsr $23af		jsr	deviceHandler
.2a89	60		rts				rts
.2a8a					DTSwitchMode:
.2a8a	cd 23 0b	cmp $0b23			cmp 	LastCharacterClass
.2a8d	f0 04		beq $2a93			beq 	_DTSMNoChange
.2a8f	8d 23 0b	sta $0b23			sta 	LastCharacterClass
.2a92					_DTSMExit:
.2a92	60		rts				rts
.2a93					_DTSMNoChange:
.2a93	c9 01		cmp #$01			cmp 	#1
.2a95	f0 fb		beq $2a92			beq 	_DTSMExit
.2a97	a9 20		lda #$20			lda 	#" "
.2a99	4c 49 2a	jmp $2a49			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.2a9c					DTIdentifier:
.2a9c	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2a9e	20 8a 2a	jsr $2a8a			jsr 	DTSwitchMode
.2aa1	a9 87		lda #$87			lda 	#LTYIdentifier
.2aa3	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2aa6					_DTILoop:
.2aa6	b1 02		lda ($02),y			lda 	(codePtr),y 				; output main bit of identifier.
.2aa8	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.2aaa	d0 02		bne $2aae			bne 	_DTINotUS
.2aac	a9 5f		lda #$5f			lda 	#"_"
.2aae					_DTINotUS:
.2aae	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2ab1	c8		iny				iny
.2ab2	b1 02		lda ($02),y			lda 	(codePtr),y 				; until end identifier marker.
.2ab4	c9 3a		cmp #$3a			cmp 	#$3A
.2ab6	90 ee		bcc $2aa6			bcc 	_DTILoop
.2ab8	c8		iny				iny
.2ab9	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.2abb	f0 25		beq $2ae2			beq 	_DTIExit 					; no postfix.
.2abd	48		pha				pha
.2abe	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.2ac0	8d 23 0b	sta $0b23			sta 	LastCharacterClass
.2ac3	a9 82		lda #$82			lda 	#LTYPunctuation
.2ac5	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2ac8	68		pla				pla
.2ac9	c9 3b		cmp #$3b			cmp 	#$3B
.2acb	f0 10		beq $2add			beq 	_DTIArray
.2acd	4a		lsr a				lsr 	a 							; array flag in C
.2ace	08		php				php
.2acf	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.2ad1	f0 02		beq $2ad5			beq 	_DTIDollar
.2ad3	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.2ad5					_DTIDollar:
.2ad5	49 24		eor #$24			eor 	#"$"
.2ad7	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2ada	28		plp				plp
.2adb	90 05		bcc $2ae2			bcc 	_DTIExit
.2add					_DTIArray:
.2add	a9 28		lda #$28			lda 	#"("
.2adf	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2ae2					_DTIExit:
.2ae2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.2ae3					DTDecodeToken:
.2ae3	a2 00		ldx #$00			ldx 	#0 							; table number to use
.2ae5	b1 02		lda ($02),y			lda 	(codePtr),y
.2ae7	c9 84		cmp #$84			cmp 	#$84
.2ae9	b0 05		bcs $2af0			bcs 	_DTNotShift
.2aeb	29 03		and #$03			and 	#3 							; get the shift 1..3
.2aed	0a		asl a				asl 	a 							; put 2 x in X
.2aee	aa		tax				tax
.2aef	c8		iny				iny
.2af0					_DTNotShift:
.2af0	bd e6 2d	lda $2de6,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.2af3	85 04		sta $04				sta 	temp0 						; point into temp0
.2af5	bd e7 2d	lda $2de7,x			lda 	TokenTableAddress+1,x
.2af8	85 05		sta $05				sta 	temp0+1
.2afa	b1 02		lda ($02),y			lda 	(codePtr),y 				; get the token value.
.2afc	c8		iny				iny 								; consume it.
.2afd	aa		tax				tax
.2afe	98		tya				tya
.2aff	48		pha				pha
.2b00					_DTFindText:
.2b00	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.2b02	f0 11		beq $2b15			beq 	_DTFoundText
.2b04	ca		dex				dex
.2b05	a0 00		ldy #$00			ldy 	#0
.2b07	38		sec				sec
.2b08	b1 04		lda ($04),y			lda 	(temp0),y
.2b0a	65 04		adc $04				adc 	temp0
.2b0c	85 04		sta $04				sta 	temp0
.2b0e	90 f0		bcc $2b00			bcc 	_DTFindText
.2b10	e6 05		inc $05				inc 	temp0+1
.2b12	4c 00 2b	jmp $2b00			jmp 	_DTFindText
.2b15					_DTFoundText:
.2b15	a0 01		ldy #$01			ldy 	#1 							; get first character
.2b17	b1 04		lda ($04),y			lda 	(temp0),y
.2b19	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2b1b	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2b1d	90 11		bcc $2b30			bcc 	_DTIsPunctuation
.2b1f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2b21	b0 0d		bcs $2b30			bcs 	_DTIsPunctuation
.2b23	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2b25	20 8a 2a	jsr $2a8a			jsr 	DTSwitchMode
.2b28	a9 83		lda #$83			lda 	#LTYKeyword
.2b2a	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2b2d	4c 3a 2b	jmp $2b3a			jmp 	_DTPrint
.2b30					_DTIsPunctuation:
.2b30	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2b32	20 8a 2a	jsr $2a8a			jsr 	DTSwitchMode
.2b35	a9 82		lda #$82			lda 	#LTYPunctuation
.2b37	20 49 2a	jsr $2a49			jsr 	ListOutputCharacter
.2b3a					_DTPrint:
.2b3a	20 32 2a	jsr $2a32			jsr 	DTPrintLengthPrefix 		; print it out.
.2b3d	a0 00		ldy #$00			ldy 	#0 							; get last character
.2b3f	b1 04		lda ($04),y			lda 	(temp0),y
.2b41	a8		tay				tay
.2b42	b1 04		lda ($04),y			lda 	(temp0),y
.2b44	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2b46	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.2b48	90 04		bcc $2b4e			bcc 	_DTIsNowPunctuation
.2b4a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2b4c	90 05		bcc $2b53			bcc 	_DTPExit
.2b4e					_DTIsNowPunctuation:
.2b4e	a9 01		lda #$01			lda 	#1
.2b50	8d 23 0b	sta $0b23			sta		LastCharacterClass
.2b53					_DTPExit:
.2b53	68		pla				pla
.2b54	a8		tay				tay
.2b55	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0b24					currentSet:
>0b24							.fill 	1
.2b56					TokenSearch:
.2b56	8a		txa				txa
.2b57	48		pha				pha
.2b58	98		tya				tya
.2b59	48		pha				pha
.2b5a	a9 00		lda #$00			lda 	#0
.2b5c	8d 24 0b	sta $0b24			sta 	currentSet
.2b5f					_TSLoop:
.2b5f	ad 24 0b	lda $0b24			lda 	currentSet 					; 2 x currentset in X
.2b62	0a		asl a				asl 	a
.2b63	aa		tax				tax
.2b64	bd e6 2d	lda $2de6,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.2b67	85 04		sta $04				sta 	temp0
.2b69	bd e7 2d	lda $2de7,x			lda 	TokenTableAddress+1,x
.2b6c	85 05		sta $05				sta 	temp0+1
.2b6e	20 95 2b	jsr $2b95			jsr 	TokenSearchOne 				; search one table
.2b71	b0 0d		bcs $2b80			bcs 	_TSFound 					; found a token.
.2b73	ee 24 0b	inc $0b24			inc 	currentSet 					; next set
.2b76	ad 24 0b	lda $0b24			lda 	currentSet
.2b79	c9 04		cmp #$04			cmp 	#4
.2b7b	d0 e2		bne $2b5f			bne 	_TSLoop 					; back if not done all four.
.2b7d	18		clc				clc 								; clear carry and exit
.2b7e	90 10		bcc $2b90			bcc 	_TSExit
.2b80					_TSFound:
.2b80	48		pha				pha 								; save token
.2b81	ad 24 0b	lda $0b24			lda 	currentSet					; if set zero no shift
.2b84	f0 05		beq $2b8b			beq 	_TSNoShift
.2b86	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.2b88	20 3c 2c	jsr $2c3c			jsr 	TokenWrite
.2b8b					_TSNoShift:
.2b8b	68		pla				pla 								; get token back
.2b8c	20 3c 2c	jsr $2c3c			jsr 	TokenWrite 					; write it
.2b8f	38		sec				sec 								; carry set indicating success
.2b90					_TSExit:
.2b90	68		pla				pla
.2b91	a8		tay				tay
.2b92	68		pla				pla
.2b93	aa		tax				tax
.2b94	60		rts				rts
.2b95					TokenSearchOne:
.2b95	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.2b97					_TSOLoop:
.2b97	a0 00		ldy #$00			ldy 	#0
.2b99	b1 04		lda ($04),y			lda 	(temp0),y 					; get length of token
.2b9b	f0 26		beq $2bc3			beq 	_TSOFail 					; if zero, end of table
.2b9d	cd cd 0a	cmp $0acd			cmp 	convertBuffer 				; length is the same, compare the text matches.
.2ba0	f0 11		beq $2bb3			beq 	_TSOCheckText
.2ba2					_TSONext:
.2ba2	e8		inx				inx 								; bump token
.2ba3	a0 00		ldy #$00			ldy 	#0							; get length
.2ba5	b1 04		lda ($04),y			lda 	(temp0),y
.2ba7	38		sec				sec
.2ba8	65 04		adc $04				adc 	temp0 						; add to temp0 + 1
.2baa	85 04		sta $04				sta 	temp0
.2bac	90 e9		bcc $2b97			bcc 	_TSOLoop
.2bae	e6 05		inc $05				inc 	temp0+1
.2bb0	4c 97 2b	jmp $2b97			jmp 	_TSOLoop
.2bb3					_TSOCheckText:
.2bb3	a8		tay				tay 								; compare length downto 1.
.2bb4					_TSOCheckLoop:
.2bb4	b1 04		lda ($04),y			lda 	(temp0),y 					; use EOR to compare
.2bb6	59 cd 0a	eor $0acd,y			eor 	convertBuffer,y
.2bb9	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.2bbb	d0 e5		bne $2ba2			bne 	_TSONext 					; different goto next.
.2bbd	88		dey				dey 								; do all
.2bbe	d0 f4		bne $2bb4			bne 	_TSOCheckLoop
.2bc0	8a		txa				txa 								; return token in A and carry set
.2bc1	38		sec				sec
.2bc2	60		rts				rts
.2bc3					_TSOFail:
.2bc3	18		clc				clc
.2bc4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.2bc5					TokTest:
.2bc5	a9 e2		lda #$e2			lda 	#(TokenText1) & $FF
.2bc7	85 02		sta $02				sta 	codePtr
.2bc9	a9 2b		lda #$2b			lda 	#(TokenText1) >> 8
.2bcb	85 03		sta $03				sta 	1+(codePtr)
.2bcd	20 e2 2b	jsr $2be2				jsr 	Tokenise
.2bd0	a2 00		ldx #$00	TokStop:	ldx 	#0
.2bd2	bd e2 2b	lda $2be2,x	_TokCheck:	lda 	TokenBytes1,x
.2bd5	dd 25 0b	cmp $0b25,x				cmp 	tokenBuffer,x
.2bd8	d0 fe		bne $2bd8	_TokFail:	bne 	_TokFail
.2bda	e8		inx					inx
.2bdb	c9 80		cmp #$80				cmp 	#$80
.2bdd	d0 f3		bne $2bd2				bne 	_TokCheck
.2bdf	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.2be2					TokenText1:
.2be2					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0b25					tokenBuffer:
>0b25							.fill 	256
.0c25					tokenBufferIndex:
>0c25							.fill 	1
.2be2					Tokenise:
.2be2	20 55 2c	jsr $2c55			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.2be5					TokeniseASCIIZ:
.2be5	20 66 2c	jsr $2c66			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.2be8	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.2bea	8d 25 0c	sta $0c25			sta 	tokenBufferIndex
.2bed	a8		tay				tay 								; start pointer
.2bee					_TokLoop:
.2bee	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next character
.2bf0	f0 46		beq $2c38			beq 	_TokExit 					; if zero, then exit.
.2bf2	c8		iny				iny 								; skip over spaces.
.2bf3	c9 20		cmp #$20			cmp 	#" "
.2bf5	f0 f7		beq $2bee			beq 	_TokLoop
.2bf7	88		dey				dey 								; point back to character.
.2bf8	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.2bfa	f0 18		beq $2c14			beq 	_TokHexConst
.2bfc	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.2bfe	f0 23		beq $2c23			beq 	_TokQString
.2c00	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.2c02	b0 26		bcs $2c2a			bcs 	_TokPunctuation
.2c04	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.2c06	b0 29		bcs $2c31			bcs 	_TokIdentifier
.2c08	c9 3a		cmp #$3a			cmp 	#"9"+1
.2c0a	b0 1e		bcs $2c2a			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.2c0c	c9 30		cmp #$30			cmp 	#"0"
.2c0e	90 1a		bcc $2c2a			bcc 	_TokPunctuation 			; < 0, punctuation.
.2c10	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.2c12	d0 08		bne $2c1c			bne 	_TokConst
.2c14					_TokHexConst:
.2c14	c8		iny				iny									; consume token.
.2c15	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.2c17	20 3c 2c	jsr $2c3c			jsr 	TokenWrite
.2c1a	a9 10		lda #$10			lda 	#16
.2c1c					_TokConst:
.2c1c	20 24 2d	jsr $2d24			jsr 	TokeniseInteger
.2c1f	b0 cd		bcs $2bee			bcs 	_TokLoop
.2c21	90 17		bcc $2c3a			bcc 	_TokFail
.2c23					_TokQString:
.2c23	20 ba 2d	jsr $2dba			jsr 	TokeniseString
.2c26	b0 c6		bcs $2bee			bcs 	_TokLoop
.2c28	90 10		bcc $2c3a			bcc 	_TokFail
.2c2a					_TokPunctuation:
.2c2a	20 99 2d	jsr $2d99			jsr 	TokenisePunctuation
.2c2d	b0 bf		bcs $2bee			bcs 	_TokLoop
.2c2f	90 09		bcc $2c3a			bcc 	_TokFail
.2c31					_TokIdentifier:
.2c31	20 95 2c	jsr $2c95			jsr 	TokeniseIdentifier
.2c34	b0 b8		bcs $2bee			bcs 	_TokLoop
.2c36	90 02		bcc $2c3a			bcc 	_TokFail
.2c38					_TokExit:
.2c38	38		sec				sec
.2c39	60		rts				rts
.2c3a					_TokFail:
.2c3a	18		clc				clc
.2c3b	60		rts				rts
.2c3c					TokenWrite:
.2c3c	85 0c		sta $0c				sta 	tempShort 					; save XA
.2c3e	48		pha				pha
.2c3f	8a		txa				txa
.2c40	48		pha				pha
.2c41	a5 0c		lda $0c				lda 	tempShort
.2c43	ae 25 0c	ldx $0c25			ldx 	tokenBufferIndex 			; geet index
.2c46	9d 25 0b	sta $0b25,x			sta 	tokenBuffer,x 				; write byte to buffer
.2c49	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.2c4b	9d 26 0b	sta $0b26,x			sta 	tokenBuffer+1,x
.2c4e	ee 25 0c	inc $0c25			inc 	tokenBufferIndex 			; bump index
.2c51	68		pla				pla
.2c52	aa		tax				tax
.2c53	68		pla				pla
.2c54	60		rts				rts
.2c55					TokeniseMakeASCIIZ:
.2c55	a0 00		ldy #$00			ldy 	#0							; get length of string.
.2c57	b1 02		lda ($02),y			lda 	(codePtr),y
.2c59	a8		tay				tay
.2c5a	c8		iny				iny 								; +1, the NULL goes here.
.2c5b	a9 00		lda #$00			lda 	#0
.2c5d	91 02		sta ($02),y			sta 	(codePtr),y 				; write the trailing NULL.
.2c5f	e6 02		inc $02				inc 	codePtr 					; bump the pointer.
.2c61	d0 02		bne $2c65			bne 	_TMKAExit
.2c63	e6 03		inc $03				inc 	codePtr+1
.2c65					_TMKAExit:
.2c65	60		rts				rts
.2c66					TokeniseFixCase:
.2c66	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.2c68	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.2c6a					_TFCFlipQ:
.2c6a	8a		txa				txa
.2c6b	49 01		eor #$01			eor 	#1
.2c6d	aa		tax				tax
.2c6e					_TFCLoop:
.2c6e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get character
.2c70	f0 22		beq $2c94			beq 	_TFCExit 					; if zero exit.
.2c72	c9 20		cmp #$20			cmp 	#32 						; if control
.2c74	90 1a		bcc $2c90			bcc 	_TFCControl
.2c76	c8		iny				iny 								; preconsume
.2c77	c9 22		cmp #$22			cmp 	#'"'
.2c79	f0 ef		beq $2c6a			beq 	_TFCFlipQ
.2c7b	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.2c7d	90 ef		bcc $2c6e			bcc 	_TFCLoop
.2c7f	c9 7b		cmp #$7b			cmp 	#"z"+1
.2c81	b0 eb		bcs $2c6e			bcs 	_TFCLoop
.2c83	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.2c85	d0 e7		bne $2c6e			bne 	_TFCLoop
.2c87	88		dey				dey
.2c88	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.2c8a					_TFCWrite:
.2c8a	91 02		sta ($02),y			sta 	(codePtr),y
.2c8c	c8		iny				iny
.2c8d	4c 6e 2c	jmp $2c6e			jmp 	_TFCLoop
.2c90					_TFCControl:
.2c90	a9 20		lda #$20			lda 	#" "
.2c92	d0 f6		bne $2c8a			bne 	_TFCWrite
.2c94					_TFCExit:
.2c94	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.2c95					TokeniseIdentifier:
.2c95	a2 00		ldx #$00			ldx 	#0
.2c97					_TICopyID:
.2c97	b1 02		lda ($02),y			lda 	(codePtr),y					; get characters
.2c99	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.2c9b	f0 16		beq $2cb3			beq 	_TICopyUnderscore
.2c9d	c9 2e		cmp #$2e			cmp 	#"."
.2c9f	f0 14		beq $2cb5			beq 	_TICopyIn
.2ca1	c9 30		cmp #$30			cmp 	#"0"
.2ca3	90 1b		bcc $2cc0			bcc 	_TIEndCopy
.2ca5	c9 3a		cmp #$3a			cmp 	#"9"+1
.2ca7	90 0c		bcc $2cb5			bcc 	_TICopyIn
.2ca9	c9 41		cmp #$41			cmp 	#"A"
.2cab	90 13		bcc $2cc0			bcc 	_TIEndCopy
.2cad	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2caf	b0 0f		bcs $2cc0			bcs		_TIEndCopy
.2cb1	90 02		bcc $2cb5			bcc 	_TICopyIn
.2cb3					_TICopyUnderScore:
.2cb3	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.2cb5					_TICopyIn:
.2cb5	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.2cb6	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2cb9	8e cd 0a	stx $0acd			stx 	convertBuffer
.2cbc	c8		iny				iny 								; next character
.2cbd	4c 97 2c	jmp $2c97			jmp 	_TICopyID 					; loop round
.2cc0					_TIEndCopy:
.2cc0	a9 24		lda #$24			lda 	#"$"
.2cc2	20 17 2d	jsr $2d17			jsr 	TIDCheckCopy
.2cc5	a9 23		lda #$23			lda 	#"#"
.2cc7	20 17 2d	jsr $2d17			jsr 	TIDCheckCopy
.2cca	a9 28		lda #$28			lda 	#"("
.2ccc	20 17 2d	jsr $2d17			jsr 	TIDCheckCopy
.2ccf	20 56 2b	jsr $2b56			jsr 	TokenSearch 				; is it a token
.2cd2	b0 41		bcs $2d15			bcs 	_TIExit 					; if so, then exit.
.2cd4	98		tya				tya
.2cd5	48		pha				pha
.2cd6	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.2cd8	ae cd 0a	ldx $0acd			ldx 	convertBuffer 				; is last character (
.2cdb	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x
.2cde	c9 28		cmp #$28			cmp 	#"("
.2ce0	d0 02		bne $2ce4			bne 	_TINotArray
.2ce2	ca		dex				dex 								; yes, remove it and convert to array.
.2ce3	c8		iny				iny
.2ce4					_TINotArray:
.2ce4	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x 			; check for $
.2ce7	c9 24		cmp #$24			cmp 	#"$"
.2ce9	d0 03		bne $2cee			bne 	_TINotString
.2ceb	ca		dex				dex
.2cec	c8		iny				iny
.2ced	c8		iny				iny
.2cee					_TINotString:
.2cee	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x 			; check for #
.2cf1	c9 23		cmp #$23			cmp 	#"#"
.2cf3	d0 05		bne $2cfa			bne 	_TINotFloat
.2cf5	ca		dex				dex
.2cf6	c8		iny				iny
.2cf7	c8		iny				iny
.2cf8	c8		iny				iny
.2cf9	c8		iny				iny
.2cfa					_TINotFloat:
.2cfa	e8		inx				inx 								; write end marker for identifier.
.2cfb	98		tya				tya
.2cfc	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2cff	8e cd 0a	stx $0acd			stx 	convertBuffer 				; update length.
.2d02	a2 01		ldx #$01			ldx 	#1
.2d04					_TIOutput:
.2d04	bd cd 0a	lda $0acd,x			lda 	convertBuffer,x
.2d07	29 3f		and #$3f			and 	#$3F
.2d09	48		pha				pha
.2d0a	20 3c 2c	jsr $2c3c			jsr 	TokenWrite
.2d0d	e8		inx				inx
.2d0e	68		pla				pla
.2d0f	c9 3a		cmp #$3a			cmp 	#$3A
.2d11	90 f1		bcc $2d04			bcc 	_TIOutput
.2d13	68		pla				pla
.2d14	a8		tay				tay
.2d15					_TIExit:
.2d15	38		sec				sec 								; this can't fail.
.2d16	60		rts				rts
.2d17					TIDCheckCopy:
.2d17	d1 02		cmp ($02),y			cmp 	(codePtr),y
.2d19	d0 08		bne $2d23			bne 	_TIDCCExit
.2d1b	e8		inx				inx
.2d1c	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2d1f	8e cd 0a	stx $0acd			stx 	convertBuffer
.2d22	c8		iny				iny
.2d23					_TIDCCExit:
.2d23	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.2d24					TokeniseInteger:
.2d24	85 06		sta $06				sta 	temp1 						; save base
.2d26	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.2d28	8e cd 0a	stx $0acd			stx 	convertBuffer
.2d2b					_TIGetChars:
.2d2b	b1 02		lda ($02),y			lda 	(codePtr),y 				; check character is numeric
.2d2d	c9 30		cmp #$30			cmp 	#"0"
.2d2f	90 1f		bcc $2d50			bcc 	_TIEndGet
.2d31	c9 3a		cmp #$3a			cmp 	#"9"+1
.2d33	90 10		bcc $2d45			bcc 	_TIHaveChar
.2d35	a5 06		lda $06				lda 	temp1 						; fail if not hex mode
.2d37	c9 0a		cmp #$0a			cmp 	#10
.2d39	f0 15		beq $2d50			beq 	_TIEndGet
.2d3b	b1 02		lda ($02),y			lda 	(codePtr),y 				; check legitimate hex.
.2d3d	c9 41		cmp #$41			cmp 	#"A"
.2d3f	90 0f		bcc $2d50			bcc 	_TIEndGet
.2d41	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2d43	b0 0b		bcs $2d50			bcs 	_TIEndGet
.2d45					_TIHaveChar:
.2d45	e8		inx				inx 								; write into buffer.
.2d46	8e cd 0a	stx $0acd			stx 	convertBuffer
.2d49	9d cd 0a	sta $0acd,x			sta 	convertBuffer,x
.2d4c	c8		iny				iny 								; next char
.2d4d	4c 2b 2d	jmp $2d2b			jmp 	_TIGetChars
.2d50					_TIEndGet:
.2d50	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.2d52	f0 1c		beq $2d70			beq 	_TIFail
.2d54	98		tya				tya
.2d55	48		pha				pha
.2d56	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2d58	85 04		sta $04				sta 	temp0
.2d5a	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2d5c	85 05		sta $05				sta 	1+(temp0)
.2d5e	a9 00		lda #$00			lda 	#0 							; stack 0
.2d60	a4 06		ldy $06				ldy 	temp1 						; base Y
.2d62	a2 0e		ldx #$0e		ldx	#14
.2d64	20 fa 22	jsr $22fa		jsr	mainHandler
.2d67	68		pla				pla
.2d68	a8		tay				tay
.2d69	90 05		bcc $2d70			bcc 	_TIFail 					; didn't convert.
.2d6b	20 72 2d	jsr $2d72			jsr 	TIRecursiveOut 				; recursive output ?
.2d6e	38		sec				sec
.2d6f	60		rts				rts
.2d70					_TIFail:
.2d70	18		clc				clc
.2d71	60		rts				rts
.2d72					TIRecursiveOut:
.2d72	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.2d74	29 3f		and #$3f			and 	#$3F
.2d76	09 40		ora #$40			ora 	#$40
.2d78	48		pha				pha
.2d79	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.2d7b	29 c0		and #$c0			and 	#$C0
.2d7d	05 50		ora $50				ora 	esInt1
.2d7f	05 58		ora $58				ora 	esInt2
.2d81	05 60		ora $60				ora 	esInt3
.2d83	f0 10		beq $2d95			beq 	_TIRONoRecursion
.2d85	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.2d87					_TIROShift:
.2d87	46 60		lsr $60				lsr 	esInt3
.2d89	66 58		ror $58				ror 	esInt2
.2d8b	66 50		ror $50				ror 	esInt1
.2d8d	66 48		ror $48				ror 	esInt0
.2d8f	ca		dex				dex
.2d90	d0 f5		bne $2d87			bne 	_TIROShift
.2d92	20 72 2d	jsr $2d72			jsr 	TIRecursiveOut 				; call recursively
.2d95					_TIRONoRecursion:
.2d95	68		pla				pla 								; pull the old bit.
.2d96	4c 3c 2c	jmp $2c3c			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.2d99					TokenisePunctuation:
.2d99	b1 02		lda ($02),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.2d9b	8d ce 0a	sta $0ace			sta 	convertBuffer+1
.2d9e	c8		iny				iny
.2d9f	b1 02		lda ($02),y			lda 	(codePtr),y
.2da1	8d cf 0a	sta $0acf			sta 	convertBuffer+2
.2da4	c8		iny				iny 								; Y is +2
.2da5	a9 02		lda #$02			lda 	#2 							; 2 character string.
.2da7	8d cd 0a	sta $0acd			sta 	convertBuffer
.2daa	20 56 2b	jsr $2b56			jsr 	TokenSearch 				; search for that token.
.2dad	b0 0a		bcs $2db9			bcs 	_TIFound
.2daf	ce cd 0a	dec $0acd			dec 	convertBuffer 				; make it a 1 character string
.2db2	88		dey				dey 								; Y is now +1
.2db3	20 56 2b	jsr $2b56			jsr 	TokenSearch 				; search for that token.
.2db6	b0 01		bcs $2db9			bcs 	_TIFound
.2db8	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.2db9					_TIFound:
.2db9	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.2dba					TokeniseString:
.2dba	c8		iny				iny 								; skip opening quote
.2dbb	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.2dbd	84 04		sty $04				sty 	temp0 						; save start.
.2dbf					_TSGetLength:
.2dbf	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next
.2dc1	f0 21		beq $2de4			beq 	_TSFail						; end of line, fail
.2dc3	c8		iny				iny
.2dc4	e8		inx				inx
.2dc5	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.2dc7	d0 f6		bne $2dbf			bne 	_TSGetLength
.2dc9	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.2dcb	20 3c 2c	jsr $2c3c			jsr 	TokenWrite
.2dce	8a		txa				txa 								; output length
.2dcf	20 3c 2c	jsr $2c3c			jsr 	TokenWrite
.2dd2	a4 04		ldy $04				ldy 	temp0 						; get original position
.2dd4	e0 00		cpx #$00			cpx 	#0 							; check ended
.2dd6	f0 09		beq $2de1			beq 	_TSExit
.2dd8					_TSOutput:
.2dd8	b1 02		lda ($02),y			lda 	(codePtr),y					; output character
.2dda	20 3c 2c	jsr $2c3c			jsr 	TokenWrite
.2ddd	c8		iny				iny
.2dde	ca		dex				dex
.2ddf	d0 f7		bne $2dd8			bne 	_TSOutput
.2de1					_TSExit:
.2de1	c8		iny				iny 								; skip ending quote
.2de2	38		sec				sec 								; return CS.
.2de3	60		rts				rts
.2de4					_TSFail:
.2de4	18		clc				clc
.2de5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.2de6					TokenTableAddress:
>2de6	ee 2d						.word 	Group0Text
>2de8	9f 2f						.word 	Group1Text
>2dea	d8 2f						.word 	Group2Text
>2dec	e5 2f						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.2dee					Group0Text:
>2dee	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>2df2	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>2df5	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>2df9	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>2dfc	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>2dff	01 be					.byte $01,$be                          ; $8b >
>2e01	01 bc					.byte $01,$bc                          ; $8c <
>2e03	01 bd					.byte $01,$bd                          ; $8d =
>2e05	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>2e08	01 ab					.byte $01,$ab                          ; $8f +
>2e0a	01 ad					.byte $01,$ad                          ; $90 -
>2e0c	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>2e0f	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>2e12	01 aa					.byte $01,$aa                          ; $93 *
>2e14	01 af					.byte $01,$af                          ; $94 /
>2e16	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>2e1a	01 de					.byte $01,$de                          ; $96 ^
>2e1c	01 a1					.byte $01,$a1                          ; $97 !
>2e1e	01 bf					.byte $01,$bf                          ; $98 ?
>2e20	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>2e27	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>2e2d	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>2e31	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>2e34	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>2e3c	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>2e42	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>2e47	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>2e4c	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>2e51	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>2e57	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>2e5f	01 a8					.byte $01,$a8                          ; $a4 (
>2e61	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>2e66	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>2e6b	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>2e70	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>2e78	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>2e7d	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>2e82	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>2e88	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>2e8d	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>2e92	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>2e97	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>2e9e	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>2ea5	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>2eaa	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>2eb1	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>2eb8	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>2ebe	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>2ec5	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>2ecb	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>2ed3	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>2ed9	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>2ede	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>2ee4	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>2eea	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>2ef0	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>2ef5	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>2efa	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>2f01	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>2f08	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>2f10	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>2f18	01 c0					.byte $01,$c0                          ; $c3 @
>2f1a	01 fe					.byte $01,$fe                          ; $c4 ~
>2f1c	01 a6					.byte $01,$a6                          ; $c5 &
>2f1e	01 a9					.byte $01,$a9                          ; $c6 )
>2f20	01 ba					.byte $01,$ba                          ; $c7 :
>2f22	01 ac					.byte $01,$ac                          ; $c8 ,
>2f24	01 bb					.byte $01,$bb                          ; $c9 ;
>2f26	01 a7					.byte $01,$a7                          ; $ca '
>2f28	02 54 cf				.byte $02,$54,$cf                      ; $cb to
>2f2b	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cc step
>2f30	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $cd proc
>2f35	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $ce local
>2f3b	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $cf dim
>2f3f	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d0 rem
>2f43	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d1 let
>2f47	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d2 input
>2f4d	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d3 else
>2f52	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d4 vdu
>2f56	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d5 print
>2f5c	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d6 goto
>2f61	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $d7 gosub
>2f67	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $d8 return
>2f6e	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>2f73	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $da assert
>2f7a	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $db poke
>2f7f	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $dc doke
>2f84	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $dd loke
>2f89	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $de ink
>2f8d	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $df paper
>2f93	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e0 cls
>2f97	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e1 locate
>2f9e	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.2f9f					Group1Text:
>2f9f	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>2fa5	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>2faa	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>2faf	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>2fb4	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>2fb8	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>2fbc	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>2fc1	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>2fc9	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>2fcd	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>2fd2	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>2fd7	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.2fd8					Group2Text:
>2fd8	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>2fde	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>2fe4	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.2fe5					Group3Text:
>2fe5	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>2fec	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>2ff3	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.2ff4					tokeniserHandler:
.2ff4	7c f7 2f	jmp ($2ff7,x)			jmp 	(tokeniserVectors,x)
.2ff7					tokeniserVectors:
>2ff7	68 29					.word Detokenise           ; index 0
>2ff9	5e 29					.word ListLine             ; index 2

;******  Return to file: basic.asm

.2ffb					section_end_tokeniser:
.2ffb					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0c26					varHash:
>0c26							.fill	1
.0c27					varType:
>0c27							.fill 	1
.0c28					varEnd:
>0c28							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2ffb					AccessVariable:
.2ffb	aa		tax				tax 								; stack in X
.2ffc	c8		iny				iny									; look at second character
.2ffd	b1 02		lda ($02),y			lda 	(codePtr),y
.2fff	88		dey				dey
.3000	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3002	d0 15		bne $3019			bne 	_AVLong 					; no, always use the hash tables.
.3004	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3006	38		sec				sec 	 							; make it 0-25
.3007	e9 01		sbc #$01			sbc 	#1
.3009	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.300a	0a		asl a				asl 	a
.300b	95 48		sta $48,x			sta 	esInt0,x
.300d	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.300f	95 50		sta $50,x			sta 	esInt1,x
.3011	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3013	95 40		sta $40,x			sta 	esType,x
.3015	c8		iny				iny 								; skip over the variable reference in the code.
.3016	c8		iny				iny  								; (1 letter, 1 type)
.3017	8a		txa				txa 								; stack in A to return.
.3018	60		rts				rts
.3019					_AVLong:
.3019	8a		txa				txa
.301a	48		pha				pha
.301b	20 62 30	jsr $3062			jsr 	AccessSetup 				; set up the basic information we need for later
.301e	20 5c 32	jsr $325c			jsr 	FindVariable 				; does the variable exist already ?
.3021	b0 0e		bcs $3031			bcs 	_AVFound 					; yes, then its found
.3023	ad 27 0c	lda $0c27			lda 	varType 					; otherwise, is the variable type an array
.3026	4a		lsr a				lsr 	a
.3027	90 05		bcc $302e			bcc 	_AVCanCreate 				; if not, we can autocreate
.3029	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.302b	20 c6 23	jsr $23c6		jsr	errorHandler
.302e					_AVCanCreate:
.302e	20 15 31	jsr $3115			jsr 	CreateVariable 				; variable does not exist, create it.
.3031					_AVFound:
.3031	68		pla				pla
.3032	aa		tax				tax
.3033	18		clc				clc 								; copy temp0 (variable record address)
.3034	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.3036	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3038	95 48		sta $48,x			sta 	esInt0,x
.303a	a5 05		lda $05				lda 	temp0+1
.303c	69 00		adc #$00			adc 	#0
.303e	95 50		sta $50,x			sta 	esInt1,x
.3040	a9 00		lda #$00			lda 	#0
.3042	95 58		sta $58,x			sta 	esInt2,x
.3044	95 60		sta $60,x			sta 	esInt3,x
.3046	ac 27 0c	ldy $0c27			ldy 	varType 					; get the type ID from the type.
.3049	b9 22 30	lda $3022,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.304c	95 40		sta $40,x			sta 	esType,x
.304e	ac 28 0c	ldy $0c28			ldy 	varEnd 						; restore Y
.3051	ad 27 0c	lda $0c27			lda 	VarType 					; get variable type, put LSB into C
.3054	4a		lsr a				lsr 	a
.3055	90 03		bcc $305a			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3057	20 9f 30	jsr $309f			jsr 	AccessArray 				; array lookup. if LSB was set.
.305a					_AVNotArray:
.305a	8a		txa				txa 								; return stack in A and return
.305b	60		rts				rts
.305c					_AVTypeTable:
>305c	80 80						.byte 	$80,$80						; integer
>305e	c0 c0						.byte 	$C0,$C0 					; string
>3060	81 81						.byte 	$81,$81 					; float
.3062					AccessSetup:
.3062	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3064	8d 26 0c	sta $0c26			sta 	varHash
.3067	98		tya				tya
.3068	48		pha				pha
.3069	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.306b	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.306d	b0 0b		bcs $307a			bcs 	_ASComplete
.306f	18		clc				clc 								; add to the hash. Might improve this.
.3070	6d 26 0c	adc $0c26			adc 	varHash
.3073	8d 26 0c	sta $0c26			sta 	varHash
.3076	c8		iny				iny 								; next character
.3077	4c 69 30	jmp $3069			jmp 	_ASLoop
.307a					_ASComplete:
.307a	8d 27 0c	sta $0c27			sta 	varType 					; save variable type byte
.307d	c8		iny				iny
.307e	8c 28 0c	sty $0c28			sty 	varEnd 						; save the ending position.
.3081	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3082	e9 3a		sbc #$3a			sbc 	#$3A
.3084	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3085	0a		asl a				asl 	a
.3086	0a		asl a				asl 	a
.3087	0a		asl a				asl 	a 							; 2 bytes/word
.3088	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.308a	ad 26 0c	lda $0c26			lda 	varHash 					; get hash
.308d	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.308f	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3090	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.3092	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3094	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.3096	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3098	69 00		adc #$00			adc 	#0
.309a	85 7d		sta $7d				sta 	hashList+1
.309c	68		pla				pla
.309d	a8		tay				tay
.309e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.309f					AccessArray:
.309f	e8		inx				inx
.30a0	8a		txa				txa
.30a1	a2 04		ldx #$04		ldx	#4
.30a3	20 fa 22	jsr $22fa		jsr	mainHandler
.30a6	aa		tax				tax
.30a7	ca		dex				dex
.30a8	a2 00		ldx #$00		ldx	#0
.30aa	20 fa 22	jsr $22fa		jsr	mainHandler
.30ad	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.30af	15 59		ora $59,x			ora 	esInt2+1,x
.30b1	d0 33		bne $30e6			bne 	_AABadIndex
.30b3	98		tya				tya
.30b4	48		pha				pha
.30b5	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.30b7	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.30b9	b5 50		lda $50,x			lda 	esInt1,x
.30bb	85 05		sta $05				sta 	temp0+1
.30bd	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.30bf	b5 49		lda $49,x			lda 	esInt0+1,x
.30c1	d1 04		cmp ($04),y			cmp 	(temp0),y
.30c3	c8		iny				iny
.30c4	b5 51		lda $51,x			lda 	esInt1+1,x
.30c6	f1 04		sbc ($04),y			sbc 	(temp0),y
.30c8	b0 1c		bcs $30e6			bcs 	_AABadIndex 				; if >= then fail.
.30ca	e8		inx				inx 								; point to index
.30cb	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.30cd	b1 04		lda ($04),y			lda 	(temp0),y
.30cf	20 eb 30	jsr $30eb			jsr 	MultiplyTOSByA 				; specialist multiplier.
.30d2	ca		dex				dex
.30d3	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.30d5	18		clc				clc
.30d6	b5 49		lda $49,x			lda 	esInt0+1,x
.30d8	71 04		adc ($04),y			adc 	(temp0),y
.30da	95 48		sta $48,x			sta 	esInt0,x
.30dc	b5 51		lda $51,x			lda 	esInt1+1,x
.30de	c8		iny				iny
.30df	71 04		adc ($04),y			adc 	(temp0),y
.30e1	95 50		sta $50,x			sta 	esInt1,x
.30e3	68		pla				pla
.30e4	a8		tay				tay
.30e5	60		rts				rts
.30e6					_AABadIndex:
.30e6	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.30e8	20 c6 23	jsr $23c6		jsr	errorHandler
.30eb					MultiplyTOSByA:
.30eb	48		pha				pha
.30ec	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.30ee	85 06		sta $06				sta 	temp1
.30f0	b5 50		lda $50,x			lda 	esInt1,x
.30f2	85 07		sta $07				sta 	temp1+1
.30f4	68		pla				pla
.30f5	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.30f7	36 50		rol $50,x			rol 	esInt1,x
.30f9	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.30fb	f0 17		beq $3114			beq 	_MTBAExit
.30fd	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.30ff	d0 0f		bne $3110			bne 	_MTBANotFloat
.3101	48		pha				pha
.3102	18		clc				clc 								; so this will make it x 3
.3103	b5 48		lda $48,x			lda 	esInt0,x
.3105	65 06		adc $06				adc 	temp1
.3107	95 48		sta $48,x			sta 	esInt0,x
.3109	b5 50		lda $50,x			lda 	esInt1,x
.310b	65 07		adc $07				adc 	temp1+1
.310d	95 50		sta $50,x			sta 	esInt1,x
.310f	68		pla				pla
.3110					_MTBANotFloat:
.3110	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3112	36 50		rol $50,x			rol 	esInt1,x
.3114					_MTBAExit:
.3114	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3115					CreateVariable:
.3115	98		tya				tya 								; push Y on the stack twice.
.3116	48		pha				pha									; position in code of the new variable.
.3117	48		pha				pha
.3118	ae 27 0c	ldx $0c27			ldx 	varType 					; get var type 0-5 from the var type
.311b	bd 2c 31	lda $312c,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.311e	48		pha				pha 								; save length
.311f	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.3121	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.3123	a5 10		lda $10				lda 	lowMemory+1
.3125	85 05		sta $05				sta 	temp0+1
.3127	68		pla				pla 								; get length
.3128	18		clc				clc 								; add to low memory.
.3129	65 0f		adc $0f				adc 	lowMemory
.312b	85 0f		sta $0f				sta 	lowMemory
.312d	90 02		bcc $3131			bcc 	_CVNoCarry
.312f	e6 10		inc $10				inc 	lowMemory+1
.3131					_CVNoCarry:
.3131	ad 26 0c	lda $0c26			lda 	varHash 					; store hash at offset 4.
.3134	a0 04		ldy #$04			ldy 	#4
.3136	91 04		sta ($04),y			sta 	(temp0),y
.3138	68		pla				pla 								; offset, work out where the variable name is.
.3139	18		clc				clc
.313a	65 02		adc $02				adc 	codePtr
.313c	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.313e	91 04		sta ($04),y			sta 	(temp0),y
.3140	a5 03		lda $03				lda 	codePtr+1
.3142	69 00		adc #$00			adc 	#0
.3144	c8		iny				iny
.3145	91 04		sta ($04),y			sta 	(temp0),y
.3147	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3149	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.314b	91 04		sta ($04),y			sta 	(temp0),y
.314d	c8		iny				iny
.314e	b1 7c		lda ($7c),y			lda 	(hashList),y
.3150	91 04		sta ($04),y			sta 	(temp0),y
.3152	a5 05		lda $05				lda 	temp0+1 					; set new link
.3154	91 7c		sta ($7c),y			sta 	(hashList),y
.3156	88		dey				dey
.3157	a5 04		lda $04				lda 	temp0
.3159	91 7c		sta ($7c),y			sta 	(hashList),y
.315b	ad 27 0c	lda $0c27			lda 	varType 					; type in A
.315e	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3160	20 6c 31	jsr $316c			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3163	68		pla				pla
.3164	a8		tay				tay
.3165	60		rts				rts
>3166	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3168	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>316a	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.316c					ZeroTemp0Y:
.316c	4a		lsr a				lsr 	a 							; bit 0 in carry
.316d	0a		asl a				asl 	a
.316e	b0 19		bcs $3189			bcs 	_ZTExit 					; we don't initialise arrays.
.3170	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3172	f0 16		beq $318a			beq 	_ZTWriteNullString 			; write "" string
.3174	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3176	f0 22		beq $319a			beq 	_ZTWriteFloat
.3178	98		tya				tya
.3179	48		pha				pha
.317a	a9 00		lda #$00			lda 	#0
.317c	91 04		sta ($04),y			sta 	(temp0),y
.317e	c8		iny				iny
.317f	91 04		sta ($04),y			sta 	(temp0),y
.3181	c8		iny				iny
.3182	91 04		sta ($04),y			sta 	(temp0),y
.3184	c8		iny				iny
.3185	91 04		sta ($04),y			sta 	(temp0),y
.3187	68		pla				pla
.3188	a8		tay				tay
.3189					_ZTExit:
.3189	60		rts				rts
.318a					_ZTWriteNullString:
.318a	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.318c	8d cc 0a	sta $0acc			sta 	NullString
.318f	a9 cc		lda #$cc			lda 	#NullString & $FF
.3191	91 04		sta ($04),y			sta 	(temp0),y
.3193	a9 0a		lda #$0a			lda 	#NullString >> 8
.3195	c8		iny				iny
.3196	91 04		sta ($04),y			sta 	(temp0),y
.3198	88		dey				dey
.3199	60		rts				rts
.319a					_ZTWriteFloat:
.319a	8a		txa				txa
.319b	48		pha				pha
.319c	a2 1e		ldx #$1e		ldx	#30
.319e	20 b1 26	jsr $26b1		jsr	floatingpointHandler
.31a1	68		pla				pla
.31a2	aa		tax				tax
.31a3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.31a4					CreateArray:
.31a4	20 62 30	jsr $3062			jsr 	AccessSetup 				; set up the basic stuff.
.31a7	ad 27 0c	lda $0c27			lda 	varType 					; is the variable type an array
.31aa	4a		lsr a				lsr 	a
.31ab	90 3f		bcc $31ec			bcc 	_CANotArray 				; no, cause an error.
.31ad	20 5c 32	jsr $325c			jsr 	FindVariable 				; does the variable exist already
.31b0	b0 35		bcs $31e7			bcs 	_CAFound 					; cannot redefine it.
.31b2	20 15 31	jsr $3115			jsr 	CreateVariable 				; create the variable entry.
.31b5	ac 28 0c	ldy $0c28			ldy 	varEnd 						; point Y to the end of the variable entry.
.31b8	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.31ba	48		pha				pha
.31bb	a5 05		lda $05				lda 	temp0+1
.31bd	48		pha				pha
.31be	ad 27 0c	lda $0c27			lda 	varType 					; push variable type on the stack.
.31c1	48		pha				pha
.31c2	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.31c4	a2 04		ldx #$04		ldx	#4
.31c6	20 fa 22	jsr $22fa		jsr	mainHandler
.31c9	a2 00		ldx #$00		ldx	#0
.31cb	20 fa 22	jsr $22fa		jsr	mainHandler
.31ce	68		pla				pla 		 						; restore type and position.
.31cf	8d 27 0c	sta $0c27			sta 	varType
.31d2	68		pla				pla
.31d3	85 05		sta $05				sta 	temp0+1
.31d5	68		pla				pla
.31d6	85 04		sta $04				sta 	temp0
.31d8	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.31da	29 e0		and #$e0			and 	#$E0
.31dc	05 58		ora $58				ora 	esInt2
.31de	05 60		ora $60				ora 	esInt3
.31e0	f0 0f		beq $31f1			beq 	_CASizeOk
.31e2					_CASize:
.31e2	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.31e4	20 c6 23	jsr $23c6		jsr	errorHandler
.31e7					_CAFound:
.31e7	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.31e9	20 c6 23	jsr $23c6		jsr	errorHandler
.31ec					_CANotArray:
.31ec	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.31ee	20 c6 23	jsr $23c6		jsr	errorHandler
.31f1					_CASizeOk:
.31f1	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.31f3	d0 02		bne $31f7			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.31f5	e6 49		inc $49				inc 	esInt0+1
.31f7					_CANoCarry:
.31f7	98		tya				tya
.31f8	48		pha				pha
.31f9	a0 05		ldy #$05			ldy 	#5
.31fb	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.31fd	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.31ff	c8		iny				iny
.3200	a5 10		lda $10				lda 	lowMemory+1
.3202	91 04		sta ($04),y			sta 	(temp0),y
.3204	c8		iny				iny
.3205	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3207	91 04		sta ($04),y			sta 	(temp0),y
.3209	c8		iny				iny
.320a	a5 50		lda $50				lda 	esInt1
.320c	91 04		sta ($04),y			sta 	(temp0),y
.320e	c8		iny				iny
.320f	ae 27 0c	ldx $0c27			ldx 	varType 					; get the length per element
.3212	bd 1a 32	lda $321a,x			lda 	_CAActualSize-$3A-1,x
.3215	91 04		sta ($04),y			sta 	(temp0),y
.3217	aa		tax				tax 								; save size in X
.3218	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.321a	85 04		sta $04				sta 	temp0
.321c	a5 10		lda $10				lda 	lowMemory+1
.321e	85 05		sta $05				sta 	temp0+1
.3220	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3222	85 06		sta $06				sta 	temp1
.3224	85 07		sta $07				sta 	temp1+1
.3226					_CAInitialiseArray:
.3226	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3228	ad 27 0c	lda $0c27			lda 	varType 					; base type of array in A.
.322b	29 fe		and #$fe			and 	#$FE
.322d	20 6c 31	jsr $316c			jsr 	ZeroTemp0Y
.3230	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3231	18		clc				clc
.3232	65 04		adc $04				adc 	temp0
.3234	85 04		sta $04				sta 	temp0
.3236	85 0f		sta $0f				sta 	lowMemory
.3238	a5 05		lda $05				lda 	temp0+1
.323a	69 00		adc #$00			adc 	#0
.323c	85 05		sta $05				sta 	temp0+1
.323e	85 10		sta $10				sta 	lowMemory+1
.3240	e6 06		inc $06				inc 	temp1 						; bump the counter.
.3242	d0 02		bne $3246			bne 	_CAIANoCarry
.3244	e6 07		inc $07				inc 	temp1+1
.3246					_CAIANoCarry:
.3246	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3248	c5 06		cmp $06				cmp 	temp1
.324a	d0 da		bne $3226			bne 	_CAInitialiseArray
.324c	a5 50		lda $50				lda 	esInt1
.324e	c5 07		cmp $07				cmp 	temp1+1
.3250	d0 d4		bne $3226			bne 	_CAInitialiseArray
.3252	68		pla				pla
.3253	a8		tay				tay
.3254	60		rts				rts
.3255					_CAActualSize:
>3255	04 00						.byte 	VarISize,0
>3257	02 00						.byte 	VarSSize,0
>3259	06 00						.byte 	VarFSize,0
>325b	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.325c					FindVariable:
.325c	98		tya				tya
.325d	48		pha				pha
.325e	98		tya				tya 								; point temp2 to the actual name
.325f	18		clc				clc 								; in memory of the variable being created
.3260	65 02		adc $02				adc 	codePtr
.3262	85 08		sta $08				sta 	temp2
.3264	a5 03		lda $03				lda 	codePtr+1
.3266	69 00		adc #$00			adc 	#0
.3268	85 09		sta $09				sta 	temp2+1
.326a	a0 00		ldy #$00			ldy 	#0
.326c	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.326e	85 04		sta $04				sta 	temp0
.3270	a5 7d		lda $7d				lda 	hashList+1
.3272	85 05		sta $05				sta 	temp0+1
.3274	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3276	b1 04		lda ($04),y			lda 	(temp0),y
.3278	f0 2c		beq $32a6			beq 	_FVFail
.327a	aa		tax				tax
.327b	88		dey				dey		 							; get LSB
.327c	b1 04		lda ($04),y			lda 	(temp0),y
.327e	85 04		sta $04				sta 	temp0 						; update pointer.
.3280	86 05		stx $05				stx 	temp0+1
.3282	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3284	b1 04		lda ($04),y			lda 	(temp0),y
.3286	cd 26 0c	cmp $0c26			cmp 	varHash
.3289	d0 e9		bne $3274			bne 	_FVNext 					; if not, no point in checking the name.
.328b	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.328c	b1 04		lda ($04),y			lda 	(temp0),y
.328e	85 07		sta $07				sta 	temp1+1
.3290	88		dey				dey
.3291	b1 04		lda ($04),y			lda 	(temp0),y
.3293	85 06		sta $06				sta 	temp1
.3295	a0 00		ldy #$00			ldy 	#0
.3297					_FVCheck:
.3297	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.3299	d1 08		cmp ($08),y			cmp 	(temp2),y
.329b	d0 d7		bne $3274			bne 	_FVNext		 				; fail if different.
.329d	c8		iny				iny
.329e	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.32a0	90 f5		bcc $3297			bcc 	_FVCheck
.32a2	68		pla				pla
.32a3	a8		tay				tay
.32a4	38		sec				sec
.32a5	60		rts				rts
.32a6					_FVFail:
.32a6	68		pla				pla
.32a7	a8		tay				tay
.32a8	18		clc				clc
.32a9	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.32aa					HashTableReset:
.32aa	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.32ac	a9 00		lda #$00			lda 	#0
.32ae					_HTRClear:
.32ae	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.32b1	ca		dex				dex
.32b2	d0 fa		bne $32ae			bne 	_HTRClear
.32b4	60		rts				rts

;******  Return to file: variable/variable.asm

.32b5					variableHandler:
.32b5	7c b8 32	jmp ($32b8,x)			jmp 	(variableVectors,x)
.32b8					variableVectors:
>32b8	fb 2f					.word AccessVariable       ; index 0
>32ba	a4 31					.word CreateArray          ; index 2
>32bc	aa 32					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.32be					section_end_variable:

;******  End of listing
