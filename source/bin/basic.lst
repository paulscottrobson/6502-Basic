
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Fri Apr 02 21:28:01 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$91					TKW_PLOT                     = $91 ; plot
=$92					TKW_LINE                     = $92 ; line
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	67 43						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4b		lda #$4b			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 3c 25	jsr $253c		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 3c 25	jsr $253c		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 95 3e	jsr $3e95		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 18 47	jsr $4718		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 e9 4a	jsr $4ae9		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 18 47	jsr $4718		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 d8 3b	jsr $3bd8		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 d8 3b	jsr $3bd8		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 d8 3b	jsr $3bd8		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 e9 4a	jsr $4ae9		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 d8 3b	jsr $3bd8		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 3c 25	jsr $253c		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 94 18	jmp ($1894,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c bb 20	jmp $20bb			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	e9 21					.word	Command_VPoke            ; $86 vpoke
>1888	ec 21					.word	Command_VDoke            ; $87 vdoke
>188a	c1 21					.word	Command_VLoad            ; $88 vload
>188c	cd 20					.word	CommandMode              ; $89 mode
>188e	8a 21					.word	CommandPalette           ; $8a palette
>1890	b8 1e					.word	CommandSprite            ; $8b sprite
>1892	e2 1c					.word	CommandClg               ; $8c clg
>1894	ba 1a					.word	Command_Rect             ; $8d rect
>1896	c2 1a					.word	Command_Frame            ; $8e frame
>1898	7e 2f					.word	Unimplemented            ; $8f draw
>189a	7e 2f					.word	Unimplemented            ; $90 text
>189c	a7 1a					.word	Command_Plot             ; $91 plot
>189e	81 19					.word	Command_Line             ; $92 line

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a0					Group3Vectors:
>18a0	35 22					.word	Command_VPeek            ; $86 vpeek(
>18a2	38 22					.word	Command_VDeek            ; $87 vdeek(
>18a4	8b 20					.word	Sprite_GetX              ; $88 sprite.x(
>18a6	8e 20					.word	Sprite_GetY              ; $89 sprite.y(
>18a8	fb 1d					.word	FunctionCollide          ; $8a hit(
>18aa	73 1d					.word	Unary_JoyX               ; $8b joy.x(
>18ac	76 1d					.word	Unary_JoyY               ; $8c joy.y(
>18ae	b1 1d					.word	Unary_JButton            ; $8d joy.b(
>18b0	46 1d					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b2					XEvaluateInteger:
.18b2	8a		txa				txa
.18b3	a2 0a		ldx #$0a		ldx	#10
.18b5	20 d8 3b	jsr $3bd8		jsr	mainHandler
.18b8	aa		tax				tax
.18b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gWordHandler:
>0bfa							.fill 	2
.0bfc					gEndStorage:
.18ba					GResetStorage:
.18ba	8a		txa				txa
.18bb	48		pha				pha
.18bc	a2 15		ldx #$15			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18be	a9 00		lda #$00			lda 	#0
.18c0					_GRSLoop:
.18c0	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c3	ca		dex				dex
.18c4	10 fa		bpl $18c0			bpl 	_GRSLoop
.18c6	68		pla				pla
.18c7	aa		tax				tax
.18c8	60		rts				rts
.18c9					GHandler:
.18c9	8e fb 0b	stx $0bfb			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18cc	8d fa 0b	sta $0bfa			sta 	gWordHandler
.18cf	88		dey				dey 								; predecrement
.18d0					_GHLoopNext:
.18d0	c8		iny				iny									; advance one character
.18d1					_GHLoop:
.18d1	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18d3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d5	f0 f9		beq $18d0			beq 	_GHLoopNext
.18d7	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18d9	f0 4c		beq $1927			beq 	_GHExit
.18db	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18dd	f0 48		beq $1927			beq 	_GHExit
.18df	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e1	f0 33		beq $1916			beq 	_GHCallHandler 				; update post & call the handler
.18e3	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e5	f0 2f		beq $1916			beq 	_GHCallHandler
.18e7	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18e9	f0 10		beq $18fb			beq 	_GHCPairSkip
.18eb	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18ed					_GHCheckTokens:
.18ed	b1 28		lda ($28),y			lda 	(codePtr),y
.18ef	dd 28 19	cmp $1928,x			cmp 	_GHTokenTable,x
.18f2	f0 0e		beq $1902			beq 	_GHFoundToken
.18f4	e8		inx				inx
.18f5	bd 28 19	lda $1928,x			lda 	_GHTokenTable,x
.18f8	d0 f3		bne $18ed			bne 	_GHCheckTokens
.18fa	88		dey				dey
.18fb					_GHCPairSkip:
.18fb	c8		iny				iny
.18fc					_GHCPair:
.18fc	20 2e 19	jsr $192e			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.18ff	4c d1 18	jmp $18d1			jmp 	_GHLoop
.1902					_GHFoundToken:
.1902	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1903	8a		txa				txa
.1904	48		pha				pha
.1905	a9 00		lda #$00			lda 	#0 							; evaluate byte
.1907	a2 0c		ldx #$0c		ldx	#12
.1909	20 d8 3b	jsr $3bd8		jsr	mainHandler
.190c	68		pla				pla
.190d	aa		tax				tax
.190e	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1910	9d 06 0c	sta $0c06,x			sta 	gModifiers,x 				; update the modifiers
.1913	4c d1 18	jmp $18d1			jmp 	_GHLoop 					; and loop back
.1916					_GHCallHandler:
.1916	c8		iny				iny 								; consume AT or TO.
.1917	20 2e 19	jsr $192e			jsr 	GHMakeCurrent 				; update the coordinates.
.191a	98		tya				tya
.191b	48		pha				pha
.191c	20 24 19	jsr $1924			jsr 	_GHCallHandlerCode 			; call the handler code
.191f	68		pla				pla
.1920	a8		tay				tay
.1921	4c d1 18	jmp $18d1			jmp 	_GHLoop 					; and loop round.
.1924					_GHCallHandlerCode:
.1924	6c fa 0b	jmp ($0bfa)			jmp 	(gWordHandler)
.1927					_GHExit:
.1927	60		rts				rts
.1928					_GHTokenTable:
>1928	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>192d	00						.byte 	0
.192e					GHMakeCurrent:
.192e	8a		txa				txa
.192f	48		pha				pha
.1930	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1932	20 42 19	jsr $1942			jsr 	_GHMCDoIt
.1935	a2 02		ldx #$02		ldx	#2
.1937	20 d8 3b	jsr $3bd8		jsr	mainHandler
.193a	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.193c	20 42 19	jsr $1942			jsr 	_GHMCDoIt
.193f	68		pla				pla
.1940	aa		tax				tax
.1941	60		rts				rts
.1942					_GHMCDoIt:
.1942	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1945	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1948	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.194b	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.194e	8a		txa				txa
.194f	48		pha				pha
.1950	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1952	a2 0a		ldx #$0a		ldx	#10
.1954	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1957	68		pla				pla
.1958	aa		tax				tax
.1959	a5 98		lda $98				lda 	esInt0 						; check coordinate range
.195b	dd 0b 0c	cmp $0c0b,x			cmp 	gdXLimit,x
.195e	a5 a0		lda $a0				lda 	esInt1
.1960	fd 0c 0c	sbc $0c0c,x			sbc 	gdXLimit+1,x
.1963	b0 17		bcs $197c			bcs 	_GMHCRange
.1965	a5 a8		lda $a8				lda 	esInt2
.1967	05 b0		ora $b0				ora 	esInt3
.1969	d0 11		bne $197c			bne 	_GMHCRange
.196b	a5 98		lda $98				lda 	esInt0 						; copy into current and X2,Y2
.196d	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.1970	9d ee 0b	sta $0bee,x			sta 	gX2,x
.1973	a5 a0		lda $a0				lda 	esInt1
.1975	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1978	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.197b	60		rts				rts
.197c					_GMHCRange:
.197c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.197e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0bfc					gdySign:
>0bfc							.fill 	1
.1981					Command_Line:
.1981	a9 89		lda #$89			lda 	#LineHandler & $FF
.1983	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.1985	20 c9 18	jsr $18c9			jsr 	GHandler
.1988	60		rts				rts
.1989					LineHandler:
.1989	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.198b	a0 04		ldy #$04			ldy 	#gX2-gX1
.198d	20 66 1b	jsr $1b66			jsr 	CompareCoordsEq
.1990	f0 09		beq $199b			beq 	_LHRectCode
.1992	a2 02		ldx #$02			ldx 	#gY1-gX1
.1994	a0 06		ldy #$06			ldy 	#gY2-gX1
.1996	20 66 1b	jsr $1b66			jsr 	CompareCoordsEq
.1999	d0 03		bne $199e			bne 	_LHLineDrawer
.199b					_LHRectCode:
.199b	4c ce 1a	jmp $1ace			jmp 	RectHandler
.199e					_LHLineDrawer:
.199e	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19a0	a0 04		ldy #$04			ldy 	#gX2-gX1
.19a2	20 51 1b	jsr $1b51			jsr 	CompareCoords
.19a5	90 0a		bcc $19b1			bcc 	_LHNoSwap
.19a7	20 99 1b	jsr $1b99			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19aa	a2 02		ldx #$02			ldx 	#gY1-gX1
.19ac	a0 06		ldy #$06			ldy 	#gY2-gX1
.19ae	20 99 1b	jsr $1b99			jsr 	GSwapCoords
.19b1					_LHNoSwap:
.19b1	20 da 19	jsr $19da			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19b4	a0 00		ldy #$00			ldy 	#gX1-gX1
.19b6	20 3b 1b	jsr $1b3b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19b9	b0 15		bcs $19d0			bcs 	_LHExit 					; line off screen.
.19bb					_LHDrawLoop:
.19bb	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19bd	a0 04		ldy #$04			ldy 	#gX2-gX1
.19bf	20 66 1b	jsr $1b66			jsr 	CompareCoordsEq
.19c2	d0 0d		bne $19d1			bne 	_LHNextPixel
.19c4	a2 06		ldx #$06			ldx 	#gY2-gX1
.19c6	a0 06		ldy #$06			ldy 	#gY2-gX1
.19c8	20 66 1b	jsr $1b66			jsr 	CompareCoordsEq
.19cb	d0 04		bne $19d1			bne 	_LHNextPixel
.19cd	20 55 1c	jsr $1c55			jsr 	gdPlotInk 					; plot the last pixel.
.19d0					_LHExit:
.19d0	60		rts				rts
.19d1					_LHNextPixel:
.19d1	20 55 1c	jsr $1c55			jsr 	gdPlotInk 					; plot the pixel.
.19d4	20 2e 1a	jsr $1a2e			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19d7	4c bb 19	jmp $19bb			jmp  	_LHDrawLoop 				; and loop back if okay
.19da					BresenhamInitialise:
.19da	38		sec				sec
.19db	ad ee 0b	lda $0bee			lda 	gX2
.19de	ed ea 0b	sbc $0bea			sbc 	gX1
.19e1	8d f6 0b	sta $0bf6			sta 	gdX
.19e4	ad ef 0b	lda $0bef			lda 	gX2+1
.19e7	ed eb 0b	sbc $0beb			sbc 	gX1+1
.19ea	8d f7 0b	sta $0bf7			sta 	gdX+1
.19ed	38		sec				sec
.19ee	ad ec 0b	lda $0bec			lda 	gY1
.19f1	ed f0 0b	sbc $0bf0			sbc 	gY2
.19f4	8d f8 0b	sta $0bf8			sta 	gdy
.19f7	ad ed 0b	lda $0bed			lda 	gY1+1
.19fa	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.19fd	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a00	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.1a03	8d fc 0b	sta $0bfc			sta 	gdysign
.1a06	30 12		bmi $1a1a			bmi 	_BINormal
.1a08	38		sec				sec
.1a09	a9 00		lda #$00			lda 	#0
.1a0b	ed f8 0b	sbc $0bf8			sbc 	gdy
.1a0e	8d f8 0b	sta $0bf8			sta 	gdy
.1a11	a9 00		lda #$00			lda 	#0
.1a13	ed f9 0b	sbc $0bf9			sbc 	gdy+1
.1a16	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a19	60		rts				rts
.1a1a					_BINormal:
.1a1a	18		clc				clc
.1a1b	ad f6 0b	lda $0bf6			lda 	gdx
.1a1e	6d f8 0b	adc $0bf8			adc 	gdy
.1a21	8d f2 0b	sta $0bf2			sta 	gError
.1a24	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a27	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a2a	8d f3 0b	sta $0bf3			sta 	gError+1
.1a2d	60		rts				rts
.1a2e					BresenhamIteration:
.1a2e	ad f2 0b	lda $0bf2			lda 	gError
.1a31	0a		asl a				asl 	a
.1a32	8d f4 0b	sta $0bf4			sta 	g2Error
.1a35	ad f3 0b	lda $0bf3			lda 	gError+1
.1a38	2a		rol a				rol 	a
.1a39	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a3c	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a3e	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a40	20 5e 1b	jsr $1b5e			jsr 	CompareCoordsSigned
.1a43	30 03		bmi $1a48			bmi 	_BINoE2DY
.1a45	20 55 1a	jsr $1a55			jsr 	BresenhamE2GEDY
.1a48					_BINoE2DY:
.1a48	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a4a	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a4c	20 5e 1b	jsr $1b5e			jsr 	CompareCoordsSigned
.1a4f	30 03		bmi $1a54			bmi 	_BINoDXE2
.1a51	20 74 1a	jsr $1a74			jsr 	BresenhamDXGEE2
.1a54					_BINoDXE2:
.1a54	60		rts				rts
.1a55					BresenhamE2GEDY:
.1a55	18		clc				clc
.1a56	ad f2 0b	lda $0bf2			lda 	gError
.1a59	6d f8 0b	adc $0bf8			adc 	gdy
.1a5c	8d f2 0b	sta $0bf2			sta 	gError
.1a5f	ad f3 0b	lda $0bf3			lda 	gError+1
.1a62	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a65	8d f3 0b	sta $0bf3			sta 	gError+1
.1a68	ee ea 0b	inc $0bea			inc 	gX1
.1a6b	d0 03		bne $1a70			bne 	_BE2Skip
.1a6d	ee eb 0b	inc $0beb			inc 	gX1+1
.1a70					_BE2Skip:
.1a70	20 b6 1b	jsr $1bb6			jsr 	gdMvRight
.1a73	60		rts				rts
.1a74					BresenhamDXGEE2:
.1a74	18		clc				clc
.1a75	ad f2 0b	lda $0bf2			lda 	gError
.1a78	6d f6 0b	adc $0bf6			adc 	gdx
.1a7b	8d f2 0b	sta $0bf2			sta 	gError
.1a7e	ad f3 0b	lda $0bf3			lda 	gError+1
.1a81	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a84	8d f3 0b	sta $0bf3			sta 	gError+1
.1a87	ad fc 0b	lda $0bfc			lda 	gdySign
.1a8a	10 0c		bpl $1a98			bpl 	_BEDXInvertY
.1a8c	ee ec 0b	inc $0bec			inc 	gY1
.1a8f	d0 03		bne $1a94			bne 	_BEDXSkip
.1a91	ee ed 0b	inc $0bed			inc 	gY1+1
.1a94					_BEDXSkip:
.1a94	20 f1 1b	jsr $1bf1			jsr 	gdMvDown
.1a97	60		rts				rts
.1a98					_BEDXInvertY:
.1a98	ad ec 0b	lda $0bec			lda 	gY1
.1a9b	d0 03		bne $1aa0			bne 	_BEDXSkip2
.1a9d	ce ed 0b	dec $0bed			dec 	gY1+1
.1aa0					_BEDXSkip2:
.1aa0	ce ec 0b	dec $0bec			dec 	gY1
.1aa3	20 cc 1b	jsr $1bcc			jsr 	gdMvUp
.1aa6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1aa7					Command_Plot:
.1aa7	a9 af		lda #$af			lda 	#PlotHandler & $FF
.1aa9	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1aab	20 c9 18	jsr $18c9			jsr 	GHandler
.1aae	60		rts				rts
.1aaf					PlotHandler:
.1aaf	a0 04		ldy #$04			ldy 	#gX2-gX1
.1ab1	20 3b 1b	jsr $1b3b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ab4	b0 03		bcs $1ab9			bcs 	_PHExit 					; off screen, return with CS.
.1ab6	20 55 1c	jsr $1c55			jsr 	gdPlotInk 					; pixel in Ink.
.1ab9	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0bfd					frameFlag:
>0bfd							.fill 	1
.1aba					Command_Rect:
.1aba	a9 ce		lda #$ce			lda 	#RectHandler & $FF
.1abc	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1abe	20 c9 18	jsr $18c9			jsr 	GHandler
.1ac1	60		rts				rts
.1ac2					Command_Frame:
.1ac2	a9 ca		lda #$ca			lda 	#FrameHandler & $FF
.1ac4	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1ac6	20 c9 18	jsr $18c9			jsr 	GHandler
.1ac9	60		rts				rts
.1aca					FrameHandler:
.1aca	a9 01		lda #$01			lda 	#1
.1acc	d0 02		bne $1ad0			bne 	RectHandler+2
.1ace					RectHandler:
.1ace	a9 00		lda #$00			lda 	#0
.1ad0	8d fd 0b	sta $0bfd			sta 	frameFlag
.1ad3	20 75 1b	jsr $1b75			jsr 	BoxSort 					; sort so topleft/bottom right
.1ad6	20 ff 1a	jsr $1aff			jsr 	DrawBoxPart 				; solid first line
.1ad9					_FHLoop:
.1ad9	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1adb	a0 06		ldy #$06			ldy 	#gY2-gX1
.1add	20 51 1b	jsr $1b51			jsr 	CompareCoords
.1ae0	b0 19		bcs $1afb			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1ae2	ad fd 0b	lda $0bfd			lda 	frameFlag 					; identify solid or frame ?
.1ae5	f0 06		beq $1aed			beq 	_FHIsSolidRect
.1ae7	20 18 1b	jsr $1b18			jsr 	DrawBoxEnds
.1aea	4c f0 1a	jmp $1af0			jmp 	_FHNext
.1aed					_FHIsSolidRect:
.1aed	20 ff 1a	jsr $1aff			jsr 	DrawBoxPart
.1af0					_FHNext:
.1af0	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1af3	d0 e4		bne $1ad9			bne 	_FHLoop
.1af5	ee ed 0b	inc $0bed			inc 	gY1+1
.1af8	4c d9 1a	jmp $1ad9			jmp 	_FHLoop
.1afb					_FHLastLine:
.1afb	20 ff 1a	jsr $1aff			jsr 	DrawBoxPart 				; solid last line whatever
.1afe					_FHExit:
.1afe	60		rts				rts
.1aff					DrawBoxPart:
.1aff	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b01	20 3b 1b	jsr $1b3b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b04	38		sec				sec 								; calculate line length => temp0
.1b05	ad ee 0b	lda $0bee			lda 	gX2
.1b08	ed ea 0b	sbc $0bea			sbc 	gX1
.1b0b	48		pha				pha
.1b0c	ad ef 0b	lda $0bef			lda 	gX2+1
.1b0f	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1b12	aa		tax				tax
.1b13	68		pla				pla 								; line length in XA.
.1b14	20 30 1b	jsr $1b30			jsr 	DrawHorizontalLine
.1b17	60		rts				rts
.1b18					DrawBoxEnds:
.1b18	a0 00		ldy #$00			ldy 	#gX1-gX1
.1b1a	20 3b 1b	jsr $1b3b			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1b1d	20 55 1c	jsr $1c55			jsr 	gdPlotInk 					; LH end.
.1b20	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b23	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b26	20 1d 1d	jsr $1d1d			jsr 	gdSetX
.1b29	20 13 1c	jsr $1c13			jsr		gdSetDrawPosition 			; update position.
.1b2c	20 55 1c	jsr $1c55			jsr 	gdPlotInk 					; RH end.
.1b2f	60		rts				rts
.1b30					DrawHorizontalLine:
.1b30	86 32		stx $32				stx 	tempShort
.1b32	aa		tax				tax
.1b33	a4 32		ldy $32				ldy 	tempShort
.1b35	ad 06 0c	lda $0c06			lda 	gdInk
.1b38	4c 2b 1d	jmp $1d2b			jmp 	gdOptHorizontalWriter

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1b3b					SetupXY:
.1b3b	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1b3e	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1b41	20 1d 1d	jsr $1d1d			jsr 	gdSetX
.1b44	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1b47	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1b4a	20 24 1d	jsr $1d24			jsr 	gdSetY
.1b4d	20 13 1c	jsr $1c13			jsr 	gdSetDrawPosition
.1b50	60		rts				rts
.1b51					CompareCoords:
.1b51	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b54	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b57	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b5a	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1b5d	60		rts				rts
.1b5e					CompareCoordsSigned:
.1b5e	20 51 1b	jsr $1b51			jsr 	CompareCoords
.1b61	50 02		bvc $1b65			bvc 	_CCSExit
.1b63	49 80		eor #$80			eor 	#$80
.1b65					_CCSExit:
.1b65	60		rts				rts
.1b66					CompareCoordsEq:
.1b66	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b69	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b6c	d0 06		bne $1b74			bne 	_CCEExit
.1b6e	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b71	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1b74					_CCEExit:
.1b74	60		rts				rts
.1b75					BoxSort:
.1b75	a2 00		ldx #$00			ldx 	#gx1-gx1
.1b77	a0 04		ldy #$04			ldy 	#gx2-gx1
.1b79	20 8a 1b	jsr $1b8a			jsr 	GCompareCoords
.1b7c	20 97 1b	jsr $1b97			jsr 	GSortMinMaxCoords
.1b7f	a2 02		ldx #$02			ldx 	#gy1-gx1
.1b81	a0 06		ldy #$06			ldy 	#gy2-gx1
.1b83	20 8a 1b	jsr $1b8a			jsr 	GCompareCoords
.1b86	20 97 1b	jsr $1b97			jsr 	GSortMinMaxCoords
.1b89	60		rts				rts
.1b8a					GCompareCoords:
.1b8a	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1b8d	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1b90	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1b93	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1b96	60		rts				rts
.1b97					GSortMinMaxCoords:
.1b97	90 1c		bcc $1bb5			bcc 	GSMMCExit
.1b99					GSwapCoords:
.1b99	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1b9c	48		pha				pha
.1b9d	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1ba0	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1ba3	68		pla				pla
.1ba4	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1ba7	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1baa	48		pha				pha
.1bab	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1bae	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1bb1	68		pla				pla
.1bb2	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1bb5					GSMMCExit:
.1bb5	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1bb6					gdMvRight:
.1bb6	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1bb9	d0 08		bne $1bc3			bne 	_gdMR0
.1bbb	ee 21 9f	inc $9f21			inc 	$9F21
.1bbe	d0 03		bne $1bc3			bne 	_gdMR0
.1bc0	ee 22 9f	inc $9f22			inc 	$9F22
.1bc3					_gdMR0:
.1bc3	ee 02 0c	inc $0c02			inc 	gdXPos
.1bc6	d0 03		bne $1bcb			bne 	_gdMR1
.1bc8	ee 03 0c	inc $0c03			inc 	gdXPos+1
.1bcb					_gdMR1:
.1bcb	60		rts				rts
.1bcc					gdMvUp:
.1bcc	ad 04 0c	lda $0c04			lda 	gdYPos 						; decrement Y Pos
.1bcf	d0 03		bne $1bd4			bne 	_gdMU1
.1bd1	ce 05 0c	dec $0c05			dec 	gdYPos+1
.1bd4	ce 04 0c	dec $0c04	_gdMU1:	dec 	gdYPos
.1bd7	38		sec				sec 								; adjust position by -320
.1bd8	ad 20 9f	lda $9f20			lda 	$9F20
.1bdb	e9 40		sbc #$40			sbc 	#64
.1bdd	8d 20 9f	sta $9f20			sta 	$9F20
.1be0	ad 21 9f	lda $9f21			lda 	$9F21
.1be3	e9 01		sbc #$01			sbc 	#1
.1be5	8d 21 9f	sta $9f21			sta 	$9F21
.1be8	ad 22 9f	lda $9f22			lda 	$9F22
.1beb	e9 00		sbc #$00			sbc 	#0
.1bed	8d 22 9f	sta $9f22			sta 	$9F22
.1bf0	60		rts				rts
.1bf1					gdMvDown:
.1bf1	ee 04 0c	inc $0c04			inc 	gdYPos 						; decrement Y Pos
.1bf4	d0 03		bne $1bf9			bne 	_gdMU1
.1bf6	ee 05 0c	inc $0c05			inc 	gdYPos+1
.1bf9					_gdMU1:
.1bf9	18		clc				clc 								; adjust position by -320
.1bfa	ad 20 9f	lda $9f20			lda 	$9F20
.1bfd	69 40		adc #$40			adc 	#64
.1bff	8d 20 9f	sta $9f20			sta 	$9F20
.1c02	ad 21 9f	lda $9f21			lda 	$9F21
.1c05	69 01		adc #$01			adc 	#1
.1c07	8d 21 9f	sta $9f21			sta 	$9F21
.1c0a	ad 22 9f	lda $9f22			lda 	$9F22
.1c0d	69 00		adc #$00			adc 	#0
.1c0f	8d 22 9f	sta $9f22			sta 	$9F22
.1c12	60		rts				rts
.1c13					gdSetDrawPosition:
.1c13	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1c15	85 2a		sta $2a				sta 	temp0
.1c17	ad 04 0c	lda $0c04			lda 	gdYPos
.1c1a	85 2b		sta $2b				sta 	temp0+1
.1c1c	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1c1e	66 2a		ror $2a				ror 	temp0
.1c20	46 2b		lsr $2b				lsr 	temp0+1
.1c22	66 2a		ror $2a				ror 	temp0
.1c24	ad 04 0c	lda $0c04			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1c27	18		clc				clc
.1c28	65 2b		adc $2b				adc 	temp0+1
.1c2a	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1c2c	18		clc				clc
.1c2d	a5 2a		lda $2a				lda 	temp0
.1c2f	6d 02 0c	adc $0c02			adc 	gdXPos
.1c32	85 2a		sta $2a				sta 	temp0
.1c34	a5 2b		lda $2b				lda 	temp0+1
.1c36	6d 03 0c	adc $0c03			adc 	gdXPos+1
.1c39	85 2b		sta $2b				sta 	temp0+1
.1c3b	18		clc				clc
.1c3c	ad ff 0b	lda $0bff			lda 	gdBitmapAddress
.1c3f	65 2a		adc $2a				adc 	temp0
.1c41	8d 20 9f	sta $9f20			sta 	$9F20
.1c44	ad 00 0c	lda $0c00			lda 	gdBitmapAddress+1
.1c47	65 2b		adc $2b				adc 	temp0+1
.1c49	8d 21 9f	sta $9f21			sta 	$9F21
.1c4c	ad 01 0c	lda $0c01			lda 	gdBitmapAddress+2
.1c4f	69 00		adc #$00			adc 	#0
.1c51	8d 22 9f	sta $9f22			sta 	$9F22
.1c54	60		rts				rts
.1c55					gdPlotInk:
.1c55	ad 06 0c	lda $0c06			lda 	gdInk
.1c58	8d 23 9f	sta $9f23			sta 	$9F23
.1c5b	60		rts				rts
.1c5c					gdPlotPaper:
.1c5c	ad 07 0c	lda $0c07			lda 	gdPaper
.1c5f	c9 ff		cmp #$ff			cmp 	#$FF
.1c61	f0 03		beq $1c66			beq 	_gdPPSkip
.1c63	8d 23 9f	sta $9f23			sta 	$9F23
.1c66					_gdPPSkip:
.1c66	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0bfe					gdEnabled:
>0bfe							.fill 	1
.0bff					gdBitmapAddress:
>0bff							.fill 	3
.0c02					gdXPos:
>0c02							.fill 	2
.0c04					gdYPos:
>0c04							.fill 	2
.0c06					gModifiers:
.0c06					gdInk:
>0c06							.fill 	1
.0c07					gdPaper:
>0c07							.fill 	1
.0c08					gdSize:
>0c08							.fill 	1
.0c09					gdImage:
>0c09							.fill 	1
.0c0a					gdFlip:
>0c0a							.fill 	1
.0c0b					gdXLimit:
>0c0b							.fill 	2
.0c0d					gdYLimit:
>0c0d							.fill 	2
.1c67					gdModeChanged:
.1c67	8a		txa				txa
.1c68	48		pha				pha
.1c69	98		tya				tya
.1c6a	48		pha				pha
.1c6b	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1c6d	8d fe 0b	sta $0bfe			sta 	gdEnabled
.1c70	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1c73	c9 40		cmp #$40			cmp 	#$40
.1c75	d0 1f		bne $1c96			bne 	_gdExit
.1c77	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1c7a	c9 40		cmp #$40			cmp 	#$40
.1c7c	d0 18		bne $1c96			bne 	_gdExit
.1c7e	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1c81	0a		asl a				asl 	a 							;
.1c82	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1c83	10 09		bpl $1c8e			bpl 	_gdNotLayer1
.1c85	48		pha				pha 								; save A
.1c86	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1c88	20 b1 1c	jsr $1cb1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1c8b	68		pla				pla 								; restore A
.1c8c	b0 08		bcs $1c96			bcs 	_gdExit 					; if successful then exit
.1c8e					_gdNotLayer1:
.1c8e	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1c8f	10 05		bpl $1c96			bpl 	_gdExit 					; if not enabled, exit
.1c91	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1c93	20 b1 1c	jsr $1cb1			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1c96					_gdExit:
.1c96	a9 00		lda #$00			lda 	#0 							; initialise modifiers.
.1c98	8d 07 0c	sta $0c07			sta 	gdPaper
.1c9b	8d 0a 0c	sta $0c0a			sta 	gdFlip
.1c9e	8d 09 0c	sta $0c09			sta 	gdImage
.1ca1	a9 01		lda #$01			lda 	#1
.1ca3	8d 06 0c	sta $0c06			sta 	gdInk
.1ca6	8d 08 0c	sta $0c08			sta 	gdSize
.1ca9	20 f9 1c	jsr $1cf9			jsr 	gdClearGraphics 			; clear graphics display.
.1cac	68		pla				pla
.1cad	a8		tay				tay
.1cae	68		pla				pla
.1caf	aa		tax				tax
.1cb0	60		rts				rts
.1cb1					gdCheckBitmap:
.1cb1	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1cb4	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1cb6	d0 28		bne $1ce0			bne 	_gdCBFail
.1cb8	ee fe 0b	inc $0bfe			inc 	gdEnabled 					; set the enabled flag to non zero.
.1cbb	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1cbe	0a		asl a				asl 	a
.1cbf	8d 00 0c	sta $0c00			sta 	gdBitmapAddress+1
.1cc2	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1cc4	8d 01 0c	sta $0c01			sta 	gdBitmapAddress+2
.1cc7	a9 00		lda #$00			lda 	#$00
.1cc9	8d ff 0b	sta $0bff			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1ccc	a9 40		lda #$40			lda 	#(320) & $FF
.1cce	8d 0b 0c	sta $0c0b			sta 	gdXLimit
.1cd1	a9 01		lda #$01			lda 	#(320) >> 8
.1cd3	8d 0c 0c	sta $0c0c			sta 	1+(gdXLimit)
.1cd6	a9 c8		lda #$c8			lda 	#(200) & $FF
.1cd8	8d 0d 0c	sta $0c0d			sta 	gdYLimit
.1cdb	a9 00		lda #$00			lda 	#(200) >> 8
.1cdd	8d 0e 0c	sta $0c0e			sta 	1+(gdYLimit)
.1ce0					_gdCBFail:
.1ce0	18		clc				clc
.1ce1	60		rts				rts
.1ce2					CommandClg:
.1ce2	b1 28		lda ($28),y			lda 	(codePtr),y
.1ce4	c9 e2		cmp #$e2			cmp 	#TKW_PAPER
.1ce6	d0 0d		bne $1cf5			bne 	_CCLClear
.1ce8	c8		iny				iny
.1ce9	a9 00		lda #$00			lda 	#0
.1ceb	a2 0c		ldx #$0c		ldx	#12
.1ced	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1cf0	a5 98		lda $98				lda 	esInt0
.1cf2	8d 07 0c	sta $0c07			sta 	gdPaper
.1cf5					_CCLClear:
.1cf5	20 f9 1c	jsr $1cf9			jsr 	gdClearGraphics
.1cf8	60		rts				rts
.1cf9					gdClearGraphics:
.1cf9	8a		txa				txa
.1cfa	48		pha				pha
.1cfb	98		tya				tya
.1cfc	48		pha				pha
.1cfd	ad fe 0b	lda $0bfe			lda 	gdEnabled 					; screen enabled
.1d00	f0 16		beq $1d18			beq 	_gdCGExit
.1d02	a9 00		lda #$00			lda 	#0 							; home cursor
.1d04	aa		tax				tax
.1d05	20 1d 1d	jsr $1d1d			jsr 	gdSetX
.1d08	20 24 1d	jsr $1d24			jsr 	gdSetY
.1d0b	20 13 1c	jsr $1c13			jsr 	gdSetDrawPosition 			; set the draw position.
.1d0e	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1d10	a2 00		ldx #$00			ldx 	#0
.1d12	ad 07 0c	lda $0c07			lda 	gdPaper
.1d15	20 2b 1d	jsr $1d2b			jsr 	gdOptHorizontalWriter
.1d18					_gdCGExit:
.1d18	68		pla				pla
.1d19	a8		tay				tay
.1d1a	68		pla				pla
.1d1b	aa		tax				tax
.1d1c	60		rts				rts
.1d1d					gdSetX:
.1d1d	8d 02 0c	sta $0c02			sta 	gdXPos
.1d20	8e 03 0c	stx $0c03			stx 	gdXPos+1
.1d23	60		rts				rts
.1d24					gdSetY:
.1d24	8d 04 0c	sta $0c04			sta 	gdYPos
.1d27	8e 05 0c	stx $0c05			stx 	gdYPos+1
.1d2a	60		rts				rts
.1d2b					gdOptHorizontalWriter:
.1d2b	48		pha				pha
.1d2c	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1d2f	09 10		ora #$10			ora 	#$10
.1d31	8d 22 9f	sta $9f22			sta 	$9F22
.1d34	68		pla				pla
.1d35					_gdOLoop:
.1d35	8d 23 9f	sta $9f23			sta 	$9F23
.1d38	e0 00		cpx #$00			cpx 	#0
.1d3a	d0 05		bne $1d41			bne 	_gdNoBorrow
.1d3c	c0 00		cpy #$00			cpy 	#0
.1d3e	f0 05		beq $1d45			beq 	_gdExit
.1d40	88		dey				dey
.1d41					_gdNoBorrow:
.1d41	ca		dex				dex
.1d42	4c 35 1d	jmp $1d35			jmp 	_gdOLoop
.1d45					_gdExit:
.1d45	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1d46					Unary_Clock:
.1d46	a2 0c		ldx #$0c		ldx	#12
.1d48	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1d4b	48		pha				pha 								; save stack pos
.1d4c	a2 04		ldx #$04		ldx	#4
.1d4e	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1d51	98		tya				tya
.1d52	48		pha				pha
.1d53	20 50 ff	jsr $ff50			jsr 	$FF50
.1d56	68		pla				pla
.1d57	a8		tay				tay
.1d58	68		pla				pla 								; restore, repush, put into X to read offset
.1d59	48		pha				pha
.1d5a	aa		tax				tax
.1d5b	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1d5d	c9 06		cmp #$06			cmp 	#6
.1d5f	b0 0d		bcs $1d6e			bcs 	_UCValue
.1d61	aa		tax				tax 								; index in X and read RTC.
.1d62	b5 02		lda $02,x			lda 	2,x
.1d64	85 32		sta $32				sta 	tempshort
.1d66	68		pla				pla 								; restore number stack index.
.1d67	aa		tax				tax
.1d68	a5 32		lda $32				lda 	tempShort
.1d6a	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1d6c	8a		txa				txa
.1d6d	60		rts				rts
.1d6e					_UCValue:
.1d6e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d70	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1d73					Unary_JoyX:
.1d73	38		sec				sec
.1d74	b0 01		bcs $1d77			bcs 	JoystickRead
.1d76					Unary_JoyY:
.1d76	18		clc				clc
.1d77					JoystickRead:
.1d77	48		pha				pha 								; save stack position
.1d78	08		php				php 								; save test flag.
.1d79	a2 04		ldx #$04		ldx	#4
.1d7b	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1d7e	20 d8 1d	jsr $1dd8			jsr 	ReadJoystick 				; read it.
.1d81	28		plp				plp
.1d82	b0 02		bcs $1d86			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1d84	4a		lsr a				lsr 	a
.1d85	4a		lsr a				lsr 	a
.1d86					_JRNoShift:
.1d86	29 03		and #$03			and 	#3 							; isolate the test bits.
.1d88	f0 0d		beq $1d97			beq 	JoyReturnA 					; if nothing pressed, return A.
.1d8a	c9 03		cmp #$03			cmp 	#3
.1d8c	f0 07		beq $1d95			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1d8e	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1d8f	b0 16		bcs $1da7			bcs 	JoyReturn1
.1d91					JoyReturnTrue:
.1d91	a9 ff		lda #$ff			lda 	#$FF
.1d93	d0 02		bne $1d97			bne 	JoyReturnA
.1d95					JoyReturnFalse:
.1d95	a9 00		lda #$00			lda 	#0
.1d97					JoyReturnA:
.1d97	85 32		sta $32				sta 	tempShort 					; return A
.1d99	68		pla				pla
.1d9a	aa		tax				tax
.1d9b	a5 32		lda $32				lda 	tempShort
.1d9d	95 98		sta $98,x			sta 	esInt0,x
.1d9f					JoyReturn13:
.1d9f	95 a0		sta $a0,x			sta 	esInt1,x
.1da1	95 a8		sta $a8,x			sta 	esInt2,x
.1da3	95 b0		sta $b0,x			sta 	esInt3,x
.1da5	8a		txa				txa 								; return NSP in A
.1da6	60		rts				rts
.1da7					JoyReturn1:
.1da7	68		pla				pla
.1da8	aa		tax				tax
.1da9	a9 01		lda #$01			lda 	#1
.1dab	95 98		sta $98,x			sta 	esInt0,x
.1dad	a9 00		lda #$00			lda 	#0
.1daf	f0 ee		beq $1d9f			beq 	JoyReturn13
.1db1					Unary_JButton:
.1db1	48		pha				pha 								; save X on stack, put in X
.1db2	a2 0c		ldx #$0c		ldx	#12
.1db4	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1db7	aa		tax				tax 								; get value to check, push on stack.
.1db8	b5 98		lda $98,x			lda 	esInt0,x
.1dba	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1dbc	b0 15		bcs $1dd3			bcs 	_UJBadValue
.1dbe	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1dc0	48		pha				pha 								; save that shift count on the stack.
.1dc1	a2 04		ldx #$04		ldx	#4
.1dc3	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1dc6	68		pla				pla
.1dc7	aa		tax				tax
.1dc8	20 d8 1d	jsr $1dd8			jsr 	ReadJoystick 				; joystick read
.1dcb					_UJShift:
.1dcb	4a		lsr a				lsr 	a
.1dcc	ca		dex				dex
.1dcd	d0 fc		bne $1dcb			bne 	_UJShift
.1dcf	b0 c0		bcs $1d91			bcs 	JoyReturnTrue
.1dd1	90 c2		bcc $1d95			bcc 	JoyReturnFalse
.1dd3					_UJBadValue:
.1dd3	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1dd5	20 18 15	jsr $1518		jsr	errorHandler
.1dd8					ReadJoystick:
.1dd8	8a		txa				txa
.1dd9	48		pha				pha
.1dda	98		tya				tya
.1ddb	48		pha				pha
.1ddc	a9 00		lda #$00			lda 	#0
.1dde	20 56 ff	jsr $ff56			jsr 	$FF56
.1de1	c0 00		cpy #$00			cpy 	#0
.1de3	d0 11		bne $1df6			bne 	_RJError
.1de5	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1de7	d0 02		bne $1deb			bne 	_RJNoBug
.1de9	a9 ff		lda #$ff			lda 	#$FF
.1deb					_RJNoBug:
.1deb	85 32		sta $32				sta 	tempShort
.1ded	68		pla				pla
.1dee	a8		tay				tay
.1def	68		pla				pla
.1df0	aa		tax				tax
.1df1	a5 32		lda $32				lda 	tempShort
.1df3	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1df5	60		rts				rts
.1df6					_RJError:
.1df6	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1df8	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c0f					hitSprite1:
>0c0f							.fill 	1 							; this won't work ... if you nest HIT() which
.0c10					hitSprite2:
>0c10							.fill 	1
.0c11					hitRange:
>0c11							.fill 	1
.1dfb					FunctionCollide:
.1dfb	48		pha				pha 								; save and put index into X
.1dfc	aa		tax				tax
.1dfd	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1dff	8d 11 0c	sta $0c11			sta 	hitRange
.1e02	20 a7 1e	jsr $1ea7			jsr 	_FCGetSpriteID
.1e05	8d 0f 0c	sta $0c0f			sta 	hitSprite1
.1e08	8a		txa				txa
.1e09	48		pha				pha
.1e0a	a2 02		ldx #$02		ldx	#2
.1e0c	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1e0f	68		pla				pla
.1e10	aa		tax				tax
.1e11	20 a7 1e	jsr $1ea7			jsr 	_FCGetSpriteID
.1e14	8d 10 0c	sta $0c10			sta 	hitSprite2
.1e17	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1e19	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1e1b	f0 13		beq $1e30			beq 	_FCParam2
.1e1d	8a		txa				txa
.1e1e	48		pha				pha
.1e1f	a2 02		ldx #$02		ldx	#2
.1e21	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1e24	68		pla				pla
.1e25	a2 0c		ldx #$0c		ldx	#12
.1e27	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1e2a	aa		tax				tax
.1e2b	b5 98		lda $98,x			lda 	esInt0,x
.1e2d	8d 11 0c	sta $0c11			sta 	hitRange
.1e30					_FCParam2:
.1e30	a2 04		ldx #$04		ldx	#4
.1e32	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1e35	68		pla				pla 								; set X to point to the stack again.
.1e36	48		pha				pha
.1e37	aa		tax				tax
.1e38	98		tya				tya
.1e39	48		pha				pha
.1e3a	18		clc				clc 								; do it with the horizontal values.
.1e3b	20 5d 1e	jsr $1e5d			jsr 	_FCCheck
.1e3e	90 0a		bcc $1e4a			bcc 	_FCFail
.1e40	38		sec				sec 								; do it with the vertical values.
.1e41	20 5d 1e	jsr $1e5d			jsr 	_FCCheck
.1e44	90 04		bcc $1e4a			bcc 	_FCFail
.1e46	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1e48	d0 02		bne $1e4c			bne 	_FCReturnA
.1e4a					_FCFail:
.1e4a	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1e4c					_FCReturnA:
.1e4c	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1e4e	68		pla				pla
.1e4f	a8		tay				tay
.1e50	68		pla				pla 								; restore stack, return result and exit.
.1e51	aa		tax				tax
.1e52	a5 32		lda $32				lda 	tempShort
.1e54	95 98		sta $98,x			sta 	esInt0,x
.1e56	95 a0		sta $a0,x			sta 	esInt1,x
.1e58	95 a8		sta $a8,x			sta 	esInt2,x
.1e5a	95 b0		sta $b0,x			sta 	esInt3,x
.1e5c	60		rts				rts
.1e5d					_FCCheck:
.1e5d	08		php				php 								; save the H/V flag twice
.1e5e	08		php				php
.1e5f	ad 0f 0c	lda $0c0f			lda 	hitSprite1 					; select sprite 1 and read its location
.1e62	20 e5 1f	jsr $1fe5			jsr 	SelectSpriteA 				; into X
.1e65	28		plp				plp
.1e66	20 47 20	jsr $2047			jsr 	SpriteReadCoordinate
.1e69	ad 10 0c	lda $0c10			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1e6c	20 e5 1f	jsr $1fe5			jsr 	SelectSpriteA
.1e6f	e8		inx				inx
.1e70	28		plp				plp
.1e71	20 47 20	jsr $2047			jsr 	SpriteReadCoordinate
.1e74	ca		dex				dex
.1e75	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1e76	b5 98		lda $98,x			lda 	esInt0,x
.1e78	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1e7a	85 2a		sta $2a				sta 	temp0
.1e7c	b5 a0		lda $a0,x			lda 	esInt1,x
.1e7e	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1e80	85 2b		sta $2b				sta 	temp0+1
.1e82	10 0d		bpl $1e91			bpl 	_FCCIsPositive
.1e84	38		sec				sec 								; if -ve calculate |difference|
.1e85	a9 00		lda #$00			lda 	#0
.1e87	e5 2a		sbc $2a				sbc 	temp0
.1e89	85 2a		sta $2a				sta 	temp0
.1e8b	a9 00		lda #$00			lda 	#0
.1e8d	e5 2b		sbc $2b				sbc 	temp0+1
.1e8f	85 2b		sta $2b				sta 	temp0+1
.1e91					_FCCIsPositive:
.1e91	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1e93	d0 10		bne $1ea5			bne 	_FCCFail
.1e95	18		clc				clc 								; work out required min distance which is
.1e96	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1e98	75 b1		adc $b1,x			adc 	esInt3+1,x
.1e9a	ac 11 0c	ldy $0c11			ldy 	hitRange 					; get the hit range
.1e9d	f0 01		beq $1ea0			beq 	_FCCNoSetRange 				; override if non zero.
.1e9f	98		tya				tya
.1ea0					_FCCNoSetRange:
.1ea0	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1ea2	f0 01		beq $1ea5			beq 	_FCCFail
.1ea4	60		rts				rts
.1ea5					_FCCFail:
.1ea5	18		clc				clc
.1ea6	60		rts				rts
.1ea7					_FCGetSpriteID:
.1ea7	8a		txa				txa
.1ea8	a2 0c		ldx #$0c		ldx	#12
.1eaa	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1ead	aa		tax				tax
.1eae	b5 98		lda $98,x			lda 	esInt0,x
.1eb0	30 01		bmi $1eb3			bmi 	_FCGSValue
.1eb2	60		rts				rts
.1eb3					_FCGSValue:
.1eb3	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1eb5	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c12					currSprite:
>0c12							.fill 	2
.1eb8					CommandSprite:
.1eb8	20 ba 1f	jsr $1fba			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1ebb	d0 0d		bne $1eca			bne 	_CSCheckClear
.1ebd	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1ec0	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1ec2	90 02		bcc $1ec6			bcc 	_CSNotOn 					; if CS turn on, so set it
.1ec4	09 40		ora #$40			ora 	#$40
.1ec6					_CSNotOn:
.1ec6	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1ec9	60		rts				rts
.1eca					_CSCheckClear:
.1eca	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1ecc	8d 13 0c	sta $0c13			sta 	currSprite+1
.1ecf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1ed1	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1ed3	d0 05		bne $1eda			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1ed5	20 cb 1f	jsr $1fcb			jsr 	CSClearSprites 				; clear all the sprites
.1ed8	c8		iny				iny 								; consume CLEAR token and exit.
.1ed9	60		rts				rts
.1eda					_CSCommandLoop:
.1eda	20 ba 1f	jsr $1fba			jsr 	CSCheckOnOff 				; check sprite on/off
.1edd	f0 2c		beq $1f0b			beq 	_CSSetVisibility
.1edf	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1ee1	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1ee3	f0 25		beq $1f0a			beq 	_CSExit
.1ee5	c8		iny				iny									; consume it
.1ee6	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1ee8	f0 20		beq $1f0a			beq 	_CSExit
.1eea	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1eec	f0 ec		beq $1eda			beq 	_CSCommandLoop
.1eee	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1ef0	f0 69		beq $1f5b			beq 	_CSSetImage
.1ef2	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1ef4	f0 2b		beq $1f21			beq 	_CSSetFlip
.1ef6	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1ef8	f0 46		beq $1f40			beq 	_CSSetPos
.1efa	88		dey				dey 								; unpick DEY
.1efb	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1efd	a2 0c		ldx #$0c		ldx	#12
.1eff	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1f02	a5 98		lda $98				lda 	esInt0
.1f04	20 e5 1f	jsr $1fe5			jsr 	SelectSpriteA
.1f07	4c da 1e	jmp $1eda			jmp 	_CSCommandLoop
.1f0a					_CSExit:
.1f0a	60		rts				rts
.1f0b					_CSSetVisibility:
.1f0b	08		php				php 								; save carry
.1f0c	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1f0e	20 a1 1f	jsr $1fa1			jsr 	SpriteSetTarget
.1f11	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1f14	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1f16	28		plp				plp
.1f17	90 02		bcc $1f1b			bcc 	_CSSetOff 					; check if carry was set
.1f19	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1f1b					_CSSetOff:
.1f1b	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1f1e	4c da 1e	jmp $1eda			jmp 	_CSCommandLoop
.1f21					_CSSetFlip:
.1f21	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f23	a2 0c		ldx #$0c		ldx	#12
.1f25	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1f28	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1f2a	20 a1 1f	jsr $1fa1			jsr 	SpriteSetTarget
.1f2d	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.1f2f	29 03		and #$03			and 	#3
.1f31	85 2a		sta $2a				sta 	temp0
.1f33	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1f36	29 fc		and #$fc			and 	#$FC
.1f38	05 2a		ora $2a				ora 	temp0
.1f3a	8d 23 9f	sta $9f23			sta 	$9F23
.1f3d	4c da 1e	jmp $1eda			jmp 	_CSCommandLoop
.1f40					_CSSetPos:
.1f40	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1f42	a2 0a		ldx #$0a		ldx	#10
.1f44	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1f47	a2 02		ldx #$02		ldx	#2
.1f49	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1f4c	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1f4e	a2 0a		ldx #$0a		ldx	#10
.1f50	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1f53	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1f55	20 03 20	jsr $2003			jsr 	SpriteMove 					; move it.
.1f58	4c da 1e	jmp $1eda			jmp 	_CSCommandLoop
.1f5b					_CSSetImage:
.1f5b	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f5d	a2 0c		ldx #$0c		ldx	#12
.1f5f	20 d8 3b	jsr $3bd8		jsr	mainHandler
.1f62	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1f64	20 a1 1f	jsr $1fa1			jsr 	SpriteSetTarget
.1f67	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.1f69	bd 59 0c	lda $0c59,x			lda 	imageAddr2Low,x 			; copy low address in.
.1f6c	8d 23 9f	sta $9f23			sta 	$9F23
.1f6f	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1f72	bd 19 0c	lda $0c19,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1f75	29 10		and #$10			and 	#$10
.1f77	0a		asl a				asl 	a
.1f78	0a		asl a				asl		a
.1f79	0a		asl a				asl 	a 							; put into bit 7
.1f7a	1d 99 0c	ora $0c99,x			ora 	imageAddr2High,x 			; or high address with it.
.1f7d	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1f80	a9 06		lda #$06			lda 	#6
.1f82	20 a1 1f	jsr $1fa1			jsr 	SpriteSetTarget 			; set sprite on.
.1f85	ad 23 9f	lda $9f23			lda 	$9F23
.1f88	09 0c		ora #$0c			ora 	#$0C
.1f8a	8d 23 9f	sta $9f23			sta 	$9F23
.1f8d	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1f90	bd 19 0c	lda $0c19,x			lda 	imageInfo,x 				; get image info
.1f93	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1f94	0a		asl a				asl 	a
.1f95	0a		asl a				asl 	a
.1f96	0a		asl a				asl 	a
.1f97	b0 02		bcs $1f9b			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1f99	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1f9b					_CSNoOffset:
.1f9b	8d 23 9f	sta $9f23			sta 	$9F23
.1f9e	4c da 1e	jmp $1eda			jmp 	_CSCommandLoop
.1fa1					SpriteSetTarget:
.1fa1	0d 12 0c	ora $0c12			ora 	currSprite
.1fa4	8d 20 9f	sta $9f20			sta 	$9F20
.1fa7	ad 13 0c	lda $0c13			lda 	currSprite+1
.1faa	f0 09		beq $1fb5			beq 	_SSTNoSet
.1fac	8d 21 9f	sta $9f21			sta 	$9F21
.1faf	a9 01		lda #$01			lda 	#$01
.1fb1	8d 22 9f	sta $9f22			sta 	$9F22
.1fb4	60		rts				rts
.1fb5					_SSTNoSet:
.1fb5	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1fb7	20 18 15	jsr $1518		jsr	errorHandler
.1fba					CSCheckOnOff:
.1fba	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1fbc	c8		iny				iny
.1fbd	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1fbf	18		clc				clc
.1fc0	f0 08		beq $1fca			beq 	_CSCOExit
.1fc2	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1fc4	38		sec				sec 								; return NE if neither.
.1fc5	f0 03		beq $1fca			beq 	_CSCOExit
.1fc7	88		dey				dey 								; undo consume
.1fc8	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1fca					_CSCOExit:
.1fca	60		rts				rts
.1fcb					CSClearSprites:
.1fcb	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1fcd	8d 22 9f	sta $9f22			sta 	$9F22
.1fd0	a9 fc		lda #$fc			lda 	#$FC
.1fd2	8d 21 9f	sta $9f21			sta 	$9F21
.1fd5	a9 00		lda #$00			lda 	#0
.1fd7	8d 20 9f	sta $9f20			sta 	$9F20
.1fda					_CSClear:
.1fda	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1fdc	8d 23 9f	sta $9f23			sta 	$9F23
.1fdf	ad 21 9f	lda $9f21			lda 	$9F21
.1fe2	d0 f6		bne $1fda			bne 	_CSClear
.1fe4	60		rts				rts
.1fe5					SelectSpriteA:
.1fe5	85 2a		sta $2a				sta 	temp0
.1fe7	a9 00		lda #$00			lda 	#0
.1fe9	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1feb	b0 11		bcs $1ffe			bcs 	_CSBadValue 				; sprites only 0-127
.1fed	06 2a		asl $2a				asl 	temp0
.1fef	2a		rol a				rol 	a
.1ff0	06 2a		asl $2a				asl 	temp0
.1ff2	2a		rol a				rol 	a
.1ff3	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.1ff5	8d 13 0c	sta $0c13			sta 	currSprite+1
.1ff8	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.1ffa	8d 12 0c	sta $0c12			sta 	currSprite+0
.1ffd	60		rts				rts
.1ffe					_CSBadValue
.1ffe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2000	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.2003					SpriteMove:
.2003	98		tya				tya
.2004	48		pha				pha
.2005	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2007	20 a1 1f	jsr $1fa1			jsr 	SpriteSetTarget
.200a	ad 23 9f	lda $9f23			lda 	$9F23
.200d	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.200e	4a		lsr a				lsr 	a
.200f	4a		lsr a				lsr 	a
.2010	4a		lsr a				lsr 	a
.2011	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.2013	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.2015	20 a1 1f	jsr $1fa1			jsr 	SpriteSetTarget
.2018	20 27 20	jsr $2027			jsr 	SMWritePosition 					; write X position out.
.201b	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.201d	46 2a		lsr $2a				lsr 	temp0
.201f	e8		inx				inx 										; get the y position
.2020	20 27 20	jsr $2027			jsr 	SMWritePosition 					; and write that out.
.2023	ca		dex				dex 										; fix X and quit.
.2024	68		pla				pla
.2025	a8		tay				tay
.2026	60		rts				rts
.2027					SMWritePosition:
.2027	a5 2a		lda $2a				lda 	temp0 								; get dim size
.2029	29 03		and #$03			and 	#3 									; in range into Y
.202b	a8		tay				tay
.202c	38		sec				sec
.202d	b5 98		lda $98,x			lda 	esInt0,x
.202f	f9 43 20	sbc $2043,y			sbc 	SMHalfSize,y
.2032	8d 23 9f	sta $9f23			sta 	$9F23
.2035	ee 20 9f	inc $9f20			inc 	$9F20
.2038	b5 a0		lda $a0,x			lda 	esInt1,x
.203a	e9 00		sbc #$00			sbc 	#0
.203c	8d 23 9f	sta $9f23			sta 	$9F23
.203f	ee 20 9f	inc $9f20			inc 	$9F20
.2042	60		rts				rts
.2043					SMHalfSize:
>2043	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2047					SpriteReadCoordinate:
.2047	98		tya				tya
.2048	48		pha				pha
.2049	08		php				php 										; save CTR on stack
.204a	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.204c	20 a1 1f	jsr $1fa1			jsr 	SpriteSetTarget
.204f	ad 23 9f	lda $9f23			lda 	$9F23
.2052	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2053	4a		lsr a				lsr 	a
.2054	4a		lsr a				lsr 	a
.2055	4a		lsr a				lsr 	a
.2056	28		plp				plp 										; restore CTS
.2057	08		php				php
.2058	90 02		bcc $205c			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.205a	4a		lsr a				lsr 	a
.205b	4a		lsr a				lsr 	a
.205c					_SPRCNotY1:
.205c	29 03		and #$03			and 	#3 									; point into half width/height
.205e	a8		tay				tay
.205f	b9 43 20	lda $2043,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2062	95 b0		sta $b0,x			sta 	esInt3,x
.2064	28		plp				plp 										; CS Y CC X
.2065	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2067	2a		rol a				rol 	a
.2068	2a		rol a				rol 	a
.2069	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.206b	20 a1 1f	jsr $1fa1			jsr 	SpriteSetTarget 					; set data pointer offset by that
.206e	18		clc				clc 										; read and unfix centre.
.206f	ad 23 9f	lda $9f23			lda 	$9F23
.2072	75 b0		adc $b0,x			adc 	esInt3,x
.2074	95 98		sta $98,x			sta 	esInt0,x
.2076	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2079	ad 23 9f	lda $9f23			lda 	$9F23
.207c	69 00		adc #$00			adc 	#0
.207e	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.2080	c9 08		cmp #$08			cmp		#$08
.2082	90 02		bcc $2086			bcc 	_SPRCNoSX
.2084	09 f0		ora #$f0			ora 	#$F0
.2086					_SPRCNoSX:
.2086	95 a0		sta $a0,x			sta 	esInt1,x
.2088	68		pla				pla
.2089	a8		tay				tay
.208a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.208b					Sprite_GetX:
.208b	18		clc				clc
.208c	90 01		bcc $208f			bcc 	SpriteGetCode
.208e					Sprite_GetY:
.208e	38		sec				sec
.208f					SpriteGetCode:
.208f	08		php				php 								; CLC : X SEC: Y, save on stack.
.2090	48		pha				pha 								; save stack position
.2091	20 ad 20	jsr $20ad			jsr 	GetSpriteNumber 			; get # of sprite.
.2094	a2 04		ldx #$04		ldx	#4
.2096	20 d8 3b	jsr $3bd8		jsr	mainHandler
.2099	68		pla				pla
.209a	aa		tax				tax
.209b	28		plp				plp 								; which one ?
.209c	20 47 20	jsr $2047			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.209f	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.20a1	29 80		and #$80			and 	#$80
.20a3	f0 02		beq $20a7			beq 	_SGXYPos
.20a5	a9 ff		lda #$ff			lda 	#$FF
.20a7					_SGXYPos:
.20a7	95 a8		sta $a8,x			sta 	esInt2,x
.20a9	95 b0		sta $b0,x			sta 	esInt3,x
.20ab	8a		txa				txa 								; return NSP in A
.20ac	60		rts				rts
.20ad					GetSpriteNumber:
.20ad	48		pha				pha
.20ae	a2 0c		ldx #$0c		ldx	#12
.20b0	20 d8 3b	jsr $3bd8		jsr	mainHandler
.20b3	68		pla				pla
.20b4	aa		tax				tax
.20b5	b5 98		lda $98,x			lda 	esInt0,x
.20b7	20 e5 1f	jsr $1fe5			jsr 	SelectSpriteA
.20ba	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c14					currentMode:
>0c14							.fill 	4
.20bb					ForceMode0:
.20bb	a2 00		ldx #$00			ldx 	#0
.20bd	86 98		stx $98				stx 	esInt0 						; in case we do it.
.20bf					_FMCheck:
.20bf	bd 52 21	lda $2152,x			lda 	CMModeList,x 				; do we need to switch ?
.20c2	dd 14 0c	cmp $0c14,x			cmp 	currentMode,x
.20c5	d0 13		bne $20da			bne 	CMSetMode 					; different so switch.
.20c7	e8		inx				inx
.20c8	e0 04		cpx #$04			cpx 	#4
.20ca	d0 f3		bne $20bf			bne 	_FMCheck
.20cc	60		rts				rts
.20cd					CommandMode:
.20cd	a9 00		lda #$00			lda 	#0
.20cf	a2 0a		ldx #$0a		ldx	#10
.20d1	20 d8 3b	jsr $3bd8		jsr	mainHandler
.20d4	a5 b0		lda $b0				lda 	esInt3
.20d6	29 70		and #$70			and 	#$70
.20d8	d0 06		bne $20e0			bne 	CMNoExpand
.20da					CMSetMode:
.20da	20 31 21	jsr $2131			jsr 	CMExpandMode
.20dd	4c f4 20	jmp $20f4			jmp 	CMUpdateMode
.20e0					CMNoExpand:
.20e0	a5 98		lda $98				lda 	esInt0
.20e2	8d 14 0c	sta $0c14			sta 	currentMode
.20e5	a5 a0		lda $a0				lda 	esInt1
.20e7	8d 15 0c	sta $0c15			sta 	currentMode+1
.20ea	a5 a8		lda $a8				lda 	esInt2
.20ec	8d 16 0c	sta $0c16			sta 	currentMode+2
.20ef	a5 b0		lda $b0				lda 	esInt3
.20f1	8d 17 0c	sta $0c17			sta 	currentMode+3
.20f4					CMUpdateMode:
.20f4	a2 11		ldx #$11			ldx 	#$11
.20f6					_CMClear:
.20f6	a9 00		lda #$00			lda 	#0
.20f8	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.20fb	ca		dex				dex
.20fc	10 f8		bpl $20f6			bpl 	_CMClear
.20fe	ad 17 0c	lda $0c17			lda 	currentMode+3 				; get current mode
.2101	48		pha				pha 								; stack twice.
.2102	48		pha				pha
.2103	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.2105	09 01		ora #$01			ora 	#$01 						; turn the output on.
.2107	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.210a	68		pla				pla 								; get back
.210b	20 62 21	jsr $2162			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.210e	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.2111	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.2112	4a		lsr a				lsr 	a
.2113	4a		lsr a				lsr 	a
.2114	20 62 21	jsr $2162			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2117	8d 2b 9f	sta $9f2b			sta 	$9F2B
.211a	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.211c	ad 14 0c	lda $0c14			lda 	currentMode					; get L0 config byte
.211f	20 6d 21	jsr $216d			jsr 	CMDecodeLayer 				; and decode layer 0
.2122	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2124	ad 15 0c	lda $0c15			lda 	currentMode+1
.2127	20 6d 21	jsr $216d			jsr 	CMDecodeLayer
.212a	20 67 1c	jsr $1c67			jsr 	gdModeChanged 				; check the bitmap status.
.212d	20 ba 18	jsr $18ba			jsr 	GResetStorage 				; reset the graphics drawing storage.
.2130	60		rts				rts
.2131					CMExpandMode:
.2131	a5 98		lda $98				lda 	esInt0 						; get mode number
.2133	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2135	b0 16		bcs $214d			bcs 	_CMModeError
.2137	0a		asl a				asl 	a 							; x 4 into X
.2138	0a		asl a				asl 	a
.2139	aa		tax				tax
.213a	98		tya				tya
.213b	48		pha				pha
.213c	a0 00		ldy #$00			ldy 	#0
.213e					_CMEMCopy:
.213e	bd 52 21	lda $2152,x			lda 	CMModeList,x
.2141	99 14 0c	sta $0c14,y			sta 	currentMode,y
.2144	e8		inx				inx
.2145	c8		iny				iny
.2146	c0 04		cpy #$04			cpy 	#4
.2148	d0 f4		bne $213e			bne 	_CMEMCopy
.214a	68		pla				pla
.214b	a8		tay				tay
.214c	60		rts				rts
.214d					_CMModeError:
.214d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.214f	20 18 15	jsr $1518		jsr	errorHandler
.2152					CMModeList:
>2152	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2156	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>215a	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>215e	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2162					CMEndModeList:
.2162					CMToScale:
.2162	29 03		and #$03			and 	#3 							; lower 2 bits only
.2164	aa		tax				tax 								; put in X for counting
.2165	a9 00		lda #$00			lda 	#0 							; zero result
.2167	38		sec				sec 								; first time rotate CS in
.2168					_CMTSLoop:
.2168	6a		ror a				ror 	a
.2169	ca		dex				dex
.216a	10 fc		bpl $2168			bpl 	_CMTSLoop
.216c	60		rts				rts
.216d					CMDecodeLayer:
.216d	48		pha				pha 								; save it.
.216e	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.2170	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2173	68		pla				pla 								; get it back
.2174	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2176	f0 02		beq $217a			beq 	_CMDLNotSet
.2178	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.217a					_CMDLNotSet:
.217a	e0 00		cpx #$00			cpx 	#0
.217c	f0 06		beq $2184			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.217e	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.2180	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2183	60		rts				rts
.2184					_CMDLayer0:
.2184	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2186	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2189	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.218a					CommandPalette:
.218a	a9 00		lda #$00			lda 	#0
.218c	a2 0c		ldx #$0c		ldx	#12
.218e	20 d8 3b	jsr $3bd8		jsr	mainHandler
.2191	a2 02		ldx #$02		ldx	#2
.2193	20 d8 3b	jsr $3bd8		jsr	mainHandler
.2196	a9 01		lda #$01			lda 	#1
.2198	a2 08		ldx #$08		ldx	#8
.219a	20 d8 3b	jsr $3bd8		jsr	mainHandler
.219d	a5 98		lda $98				lda 	esInt0 					; get palette #
.219f	20 af 21	jsr $21af			jsr 	PointToPaletteA			; point to palette register
.21a2	a5 99		lda $99				lda 	esInt0+1
.21a4	8d 23 9f	sta $9f23			sta 	$9F23
.21a7	a5 a1		lda $a1				lda 	esInt1+1
.21a9	29 0f		and #$0f			and 	#$0F
.21ab	8d 23 9f	sta $9f23			sta 	$9F23
.21ae	60		rts				rts
.21af					PointToPaletteA:
.21af	0a		asl a				asl 	a 							; x 2 -> LSB
.21b0	8d 20 9f	sta $9f20			sta 	$9F20
.21b3	a9 00		lda #$00			lda 	#0 							; carry into A
.21b5	2a		rol a				rol 	a
.21b6	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.21b8	8d 21 9f	sta $9f21			sta 	$9F21
.21bb	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.21bd	8d 22 9f	sta $9f22			sta 	$9F22
.21c0	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.21c1					Command_VLoad:
.21c1	a9 00		lda #$00			lda 	#0 								; string which is the file name
.21c3	a2 0e		ldx #$0e		ldx	#14
.21c5	20 d8 3b	jsr $3bd8		jsr	mainHandler
.21c8	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.21ca	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.21cc	95 98		sta $98,x			sta 	esInt0,x
.21ce	a5 36		lda $36				lda 	lowMemory+1
.21d0	95 a0		sta $a0,x			sta 	esInt1,x
.21d2	a9 00		lda #$00			lda 	#0
.21d4	95 a8		sta $a8,x			sta 	esInt2,x
.21d6	95 b0		sta $b0,x			sta 	esInt3,x
.21d8	a2 0e		ldx #$0e		ldx	#14
.21da	20 f6 14	jsr $14f6		jsr	deviceHandler
.21dd	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.21df	85 2a		sta $2a				sta 	temp0
.21e1	a5 a1		lda $a1				lda 	esInt1+1
.21e3	85 2b		sta $2b				sta 	temp0+1
.21e5	20 61 22	jsr $2261			jsr 	LoadVRAMFile 					; load the VRAM file in.
.21e8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.21e9					Command_VPoke:
.21e9	38		sec				sec 						; one byte , CS
.21ea	b0 01		bcs $21ed			bcs 	CmdVideoWrite
.21ec					Command_VDoke:
.21ec	18		clc				clc 						; two bytes, CC
.21ed					CmdVideoWrite:
.21ed	08		php				php 						; save one or two btes
.21ee	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.21f0	a2 0a		ldx #$0a		ldx	#10
.21f2	20 d8 3b	jsr $3bd8		jsr	mainHandler
.21f5	a2 02		ldx #$02		ldx	#2
.21f7	20 d8 3b	jsr $3bd8		jsr	mainHandler
.21fa	a9 01		lda #$01			lda 	#1
.21fc	a2 0a		ldx #$0a		ldx	#10
.21fe	20 d8 3b	jsr $3bd8		jsr	mainHandler
.2201	a2 00		ldx #$00			ldx 	#0
.2203	20 14 22	jsr $2214			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2206	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.2208	8d 23 9f	sta $9f23			sta 	$9F23
.220b	28		plp				plp 						; if it was Poke then exit
.220c	b0 05		bcs $2213			bcs 	_CVWExit
.220e	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2210	8d 23 9f	sta $9f23			sta 	$9F23
.2213					_CVWExit:
.2213	60		rts				rts
.2214					SetUpTOSVRamAddress:
.2214	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2216	29 fe		and #$fe			and 	#$FE
.2218	15 b0		ora $b0,x			ora 	esInt3,x
.221a	d0 14		bne $2230			bne 	CVWValue
.221c	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.221e	8d 20 9f	sta $9f20			sta 	$9F20
.2221	b5 a0		lda $a0,x			lda 	esInt1,x
.2223	8d 21 9f	sta $9f21			sta	 	$9F21
.2226	b5 a8		lda $a8,x			lda 	esInt2,x
.2228	29 01		and #$01			and 	#1
.222a	09 10		ora #$10			ora 	#$10 				; step 1.
.222c	8d 22 9f	sta $9f22			sta 	$9F22
.222f	60		rts				rts
.2230					CVWValue:
.2230	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2232	20 18 15	jsr $1518		jsr	errorHandler
.2235					Command_VPeek:
.2235	38		sec				sec 						; one byte , CS
.2236	b0 01		bcs $2239			bcs 	CmdVideoRead
.2238					Command_VDeek:
.2238	18		clc				clc 						; two bytes, CC
.2239					CmdVideoRead:
.2239	08		php				php 						; save action on stack.
.223a	48		pha				pha 						; save stack position
.223b	a2 0a		ldx #$0a		ldx	#10
.223d	20 d8 3b	jsr $3bd8		jsr	mainHandler
.2240	a2 04		ldx #$04		ldx	#4
.2242	20 d8 3b	jsr $3bd8		jsr	mainHandler
.2245	68		pla				pla
.2246	aa		tax				tax
.2247	20 14 22	jsr $2214			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.224a	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.224c	95 a0		sta $a0,x			sta 	esInt1,x
.224e	95 a8		sta $a8,x			sta 	esInt2,x
.2250	95 b0		sta $b0,x			sta 	esInt3,x
.2252	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2255	95 98		sta $98,x			sta 	esInt0,x
.2257	28		plp				plp 						; check if DOKE (carry was clear)
.2258	b0 05		bcs $225f			bcs 	_CVRExit
.225a	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.225d	95 a0		sta $a0,x			sta 	esInt1,x
.225f					_CVRExit:
.225f	8a		txa				txa 						; return X position.
.2260	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c18					compressMode:
>0c18							.fill 	1
.0c19					imageInfo:
>0c19							.fill 	X16MaxImages
.0c59					imageAddr2Low:
>0c59							.fill  	X16MaxImages
.0c99					imageAddr2High:
>0c99							.fill  	X16MaxImages
.2261					LoadVRAMFile:
.2261	8a		txa				txa
.2262	48		pha				pha
.2263	98		tya				tya
.2264	48		pha				pha
.2265					_LVRLoop:
.2265	20 41 23	jsr $2341			jsr 	LVFGet 						; get the next (never access direct)
.2268	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.226a	f0 42		beq $22ae			beq 	_LVRExit
.226c	b0 5c		bcs $22ca			bcs 	_LVRLoad 					; load data in ?
.226e	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2270	90 11		bcc $2283			bcc 	_LVRSetAddress
.2272	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2274	f0 3d		beq $22b3			beq 	_LVRSetPalette
.2276	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.2278	90 2d		bcc $22a7			bcc 	_LVRSetCompress
.227a	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.227c	90 60		bcc $22de			bcc 	_LVRSetSprite
.227e	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2280	20 18 15	jsr $1518		jsr	errorHandler
.2283					_LVRSetAddress:
.2283	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2285	20 41 23	jsr $2341			jsr 	LVFGet
.2288	85 2c		sta $2c				sta 	temp1
.228a	a9 00		lda #$00			lda 	#0
.228c	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.228e	66 2c		ror $2c				ror 	temp1
.2290	6a		ror a				ror		a
.2291	46 2d		lsr $2d				lsr 	temp1+1
.2293	66 2c		ror $2c				ror 	temp1
.2295	6a		ror a				ror		a
.2296	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.2299	a5 2c		lda $2c				lda 	temp1
.229b	8d 21 9f	sta $9f21			sta 	$9F21
.229e	a5 2d		lda $2d				lda 	temp1+1
.22a0	09 10		ora #$10			ora 	#$10
.22a2	8d 22 9f	sta $9f22			sta 	$9F22
.22a5	d0 be		bne $2265			bne 	_LVRLoop
.22a7					_LVRSetCompress:
.22a7	29 07		and #$07			and 	#7
.22a9	8d 18 0c	sta $0c18			sta 	compressMode
.22ac	10 b7		bpl $2265			bpl 	_LVRLoop
.22ae					_LVRExit:
.22ae	68		pla				pla
.22af	a8		tay				tay
.22b0	68		pla				pla
.22b1	aa		tax				tax
.22b2	60		rts				rts
.22b3					_LVRSetPalette:
.22b3	20 41 23	jsr $2341			jsr 	LVFGet 						; get palette id.
.22b6	20 af 21	jsr $21af			jsr 	PointToPaletteA 			; in palette.asm
.22b9	20 41 23	jsr $2341			jsr 	LVFGet 						; copy 12 bit palette data in.
.22bc	8d 23 9f	sta $9f23			sta 	$9F23
.22bf	20 41 23	jsr $2341			jsr 	LVFGet
.22c2	29 0f		and #$0f			and 	#$0F
.22c4	8d 23 9f	sta $9f23			sta 	$9F23
.22c7	4c 65 22	jmp $2265			jmp 	_LVRLoop
.22ca					_LVRLoad:
.22ca	ae 18 0c	ldx $0c18			ldx 	compressMode
.22cd	d0 55		bne $2324			bne 	_LVRNotMode0
.22cf	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.22d1					_LVRLCopyX:
.22d1	aa		tax				tax
.22d2					_LVRLCopy:
.22d2	20 41 23	jsr $2341			jsr 	LVFGet 						; write to data.
.22d5	8d 23 9f	sta $9f23			sta 	$9F23
.22d8	ca		dex				dex
.22d9	d0 f7		bne $22d2			bne 	_LVRLCopy
.22db	4c 65 22	jmp $2265			jmp 	_LVRLoop
.22de					_LVRSetSprite:
.22de	48		pha				pha 								; save on stack
.22df	20 41 23	jsr $2341			jsr 	LVFGet 						; get the sprite number into X
.22e2	aa		tax				tax
.22e3	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.22e5	b0 38		bcs $231f			bcs 	_LVRSSValue
.22e7	68		pla				pla 								; restore the data held in the first byte
.22e8	9d 19 0c	sta $0c19,x			sta 	imageInfo,x 				; and write into the sprite image table.
.22eb					_LVRAlignVRAM:
.22eb	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.22ee	29 1f		and #$1f			and 	#$1F
.22f0	f0 07		beq $22f9			beq 	_LVRAligned
.22f2	a9 00		lda #$00			lda 	#$00
.22f4	8d 23 9f	sta $9f23			sta 	$9F23
.22f7	f0 f2		beq $22eb			beq 	_LVRAlignVRAM
.22f9					_LVRAligned:
.22f9	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.22fc	4a		lsr a				lsr 	a 	 						; first halve into temp1
.22fd	ad 21 9f	lda $9f21			lda 	$9F21
.2300	6a		ror a				ror 	a
.2301	85 2d		sta $2d				sta 	temp1+1
.2303	ad 20 9f	lda $9f20			lda 	$9F20
.2306	6a		ror a				ror 	a
.2307	85 2c		sta $2c				sta 	temp1
.2309	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.230b					_LVRShift:
.230b	46 2d		lsr $2d				lsr 	temp1+1
.230d	66 2c		ror $2c				ror 	temp1
.230f	88		dey				dey
.2310	d0 f9		bne $230b			bne 	_LVRShift
.2312	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2314	9d 99 0c	sta $0c99,x			sta 	imageAddr2High,x
.2317	a5 2c		lda $2c				lda 	temp1
.2319	9d 59 0c	sta $0c59,x			sta 	imageAddr2Low,x
.231c	4c 65 22	jmp $2265			jmp 	_LVRLoop
.231f					_LVRSSValue:
.231f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2321	20 18 15	jsr $1518		jsr	errorHandler
.2324					_LVRNotMode0:
.2324	e0 01		cpx #$01			cpx 	#1
.2326	d0 15		bne $233d			bne 	_LVRNotMode1
.2328	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.232a	c9 40		cmp #$40			cmp 	#$40
.232c	90 a3		bcc $22d1			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.232e					_LVRRLEGroup:
.232e	29 3f		and #$3f			and 	#$3F
.2330	aa		tax				tax
.2331	20 41 23	jsr $2341			jsr 	LVFGet
.2334					_LVRLEGroupLoop:
.2334	8d 23 9f	sta $9f23			sta 	$9F23
.2337	ca		dex				dex
.2338	d0 fa		bne $2334			bne 	_LVRLEGroupLoop
.233a	4c 65 22	jmp $2265			jmp 	_LVRLoop
.233d					_LVRNotMode1:
>233d	db						.byte 	$DB
.233e	4c 3d 23	jmp $233d			jmp 	_LVRNotMode1
.2341	84 32		sty $32		LVFGet:	sty 	tempShort
.2343	a0 00		ldy #$00			ldy 	#0
.2345	b1 2a		lda ($2a),y			lda 	(temp0),y
.2347	a4 32		ldy $32				ldy	 	tempShort
.2349	e6 2a		inc $2a				inc 	temp0
.234b	d0 02		bne $234f			bne 	_LVFGExit
.234d	e6 2b		inc $2b				inc 	temp0+1
.234f					_LVFGExit:
.234f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2350					section_end_extension:
.2350					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2350					floatingpointHandler:
.2350	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2352	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2355					section_end_floatingpoint:
.2355					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2355					ColdStartEntry:
.2355	a2 ff		ldx #$ff			ldx 	#$FF
.2357	9a		txs				txs
.2358	20 e1 23	jsr $23e1			jsr 	ForceStandardMode
.235b	a2 04		ldx #$04		ldx	#4
.235d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2360	a0 ff		ldy #$ff			ldy 	#255
.2362					_CSBanner:
.2362	c8		iny				iny
.2363	b9 89 23	lda $2389,y			lda 	Intro,y
.2366	f0 14		beq $237c			beq 	_CSStart
.2368	c9 08		cmp #$08			cmp 	#8
.236a	90 08		bcc $2374			bcc 	_CSInk
.236c	a2 16		ldx #$16		ldx	#22
.236e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2371	4c 62 23	jmp $2362			jmp 	_CSBanner
.2374					_CSInk:
.2374	a2 08		ldx #$08		ldx	#8
.2376	20 f6 14	jsr $14f6		jsr	deviceHandler
.2379	4c 62 23	jmp $2362			jmp 	_CSBanner
.237c					_CSStart:
.237c	a2 16		ldx #$16		ldx	#22
.237e	20 d8 3b	jsr $3bd8		jsr	mainHandler
.2381	a2 06		ldx #$06		ldx	#6
.2383	20 d8 3b	jsr $3bd8		jsr	mainHandler
.2386	4c a1 24	jmp $24a1			jmp 	WarmStartEntry
>2389	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>2391	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>23a1	20 2a 2a 2a 0d 0d
>23a7	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>23af	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>23bf	32 30 32 31 0d 0d
>23c5	02 42 61 73 69 63 20				.text 	2,"Basic "
>23cc	30 2e 32 30					.text "0.20"
>23d0	20 28						.text 	" ("
>23d2	33 30 2d 4d 61 72 2d 32				.text "30-Mar-2021"
>23da	30 32 31
>23dd	29 0d 0d 00					.text 	")",13,13,0
.23e1					ForceStandardMode:
.23e1	a9 fe		lda #$fe			lda 	#$FE
.23e3	20 69 18	jsr $1869		jsr	extensionHandler
.23e6	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.23e7					DeleteLine:
.23e7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.23ea	85 2a		sta $2a				sta 	temp0
.23ec	ad c9 0a	lda $0ac9			lda 	basePage+1
.23ef	85 2b		sta $2b				sta 	temp0+1
.23f1	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.23f3	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.23f5	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23f7	d0 07		bne $2400			bne 	_DLNext
.23f9	c8		iny				iny
.23fa	a5 a0		lda $a0				lda 	esInt1
.23fc	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.23fe	f0 06		beq $2406			beq 	_DLFound
.2400	20 24 24	jsr $2424	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2403	d0 ec		bne $23f1			bne 	_DLLoop
.2405	60		rts				rts
.2406					_DLFound:
.2406	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.2408	b1 2a		lda ($2a),y			lda 	(temp0),y
.240a	a8		tay				tay 								; so we copy from (temp0),y
.240b	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.240d					_DLCopyDown:
.240d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.240f	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2411	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2413	d0 02		bne $2417			bne 	_DLNoCarry
.2415	e6 2b		inc $2b				inc 	temp0+1
.2417					_DLNoCarry:
.2417	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.2419	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.241b	d0 f0		bne $240d			bne 	_DLCopyDown
.241d	a5 2b		lda $2b				lda 	temp0+1
.241f	c5 36		cmp $36				cmp 	lowMemory+1
.2421	d0 ea		bne $240d			bne 	_DLCopyDown
.2423	60		rts				rts
.2424					IAdvanceTemp0:
.2424	84 32		sty $32				sty 	tempShort
.2426	18		clc				clc
.2427	a0 00		ldy #$00			ldy 	#0 							; get offset
.2429	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.242b	65 2a		adc $2a				adc 	temp0
.242d	85 2a		sta $2a				sta 	temp0
.242f	90 02		bcc $2433			bcc 	_IATNoCarry
.2431	e6 2b		inc $2b				inc 	temp0+1
.2433					_IATNoCarry:
.2433	b1 2a		lda ($2a),y			lda 	(temp0),y
.2435	a4 32		ldy $32				ldy 	tempShort
.2437	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.2439	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.243a					InsertLine:
.243a	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.243d	85 2a		sta $2a				sta 	temp0
.243f	ad c9 0a	lda $0ac9			lda 	basePage+1
.2442	85 2b		sta $2b				sta 	temp0+1
.2444					_ILLoop:
.2444	a0 01		ldy #$01			ldy 	#1
.2446	b1 2a		lda ($2a),y			lda 	(temp0),y
.2448	c5 98		cmp $98				cmp 	esInt0
.244a	c8		iny				iny
.244b	b1 2a		lda ($2a),y			lda 	(temp0),y
.244d	e5 a0		sbc $a0				sbc 	esInt1
.244f	b0 05		bcs $2456			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2451	20 24 24	jsr $2424			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2454	d0 ee		bne $2444			bne 	_ILLoop
.2456					_ILFound:
.2456	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.2458	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.245a	a5 36		lda $36				lda 	lowMemory+1
.245c	85 2d		sta $2d				sta 	temp1+1
.245e	ad 16 0e	lda $0e16			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2461	18		clc				clc 								; add 3 for the line number and offset.
.2462	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2464	a8		tay				tay
.2465	a2 00		ldx #$00			ldx 	#0
.2467	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.2469	91 2c		sta ($2c),y			sta 	(temp1),y
.246b	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.246d	c5 2a		cmp $2a				cmp 	temp0
.246f	d0 06		bne $2477			bne 	_ILMNext
.2471	a5 2d		lda $2d				lda 	temp1+1
.2473	c5 2b		cmp $2b				cmp 	temp0+1
.2475	f0 0b		beq $2482			beq 	_ILMCopy
.2477					_ILMNext:
.2477	a5 2c		lda $2c				lda 	temp1
.2479	d0 02		bne $247d			bne 	_ILNoBorrow
.247b	c6 2d		dec $2d				dec 	temp1+1
.247d					_ILNoBorrow:
.247d	c6 2c		dec $2c				dec 	temp1
.247f	4c 67 24	jmp $2467			jmp 	_ILMove 					; and go round again
.2482					_ILMCopy:
.2482	98		tya				tya 								; Y is the offset of the new line.
.2483	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2485	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2487	a5 98		lda $98				lda 	esInt0
.2489	91 2a		sta ($2a),y			sta 	(temp0),y
.248b	c8		iny				iny
.248c	a5 a0		lda $a0				lda 	esInt1
.248e	91 2a		sta ($2a),y			sta 	(temp0),y
.2490	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.2492					_ILMCopy2:
.2492	b1 28		lda ($28),y			lda 	(codePtr),y
.2494	c8		iny				iny
.2495	c8		iny				iny
.2496	c8		iny				iny
.2497	91 2a		sta ($2a),y			sta 	(temp0),y
.2499	88		dey				dey
.249a	88		dey				dey
.249b	cc 16 0e	cpy $0e16			cpy 	tokenBufferIndex
.249e	d0 f2		bne $2492			bne 	_ILMCopy2
.24a0	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.24a1					WarmStartEntry:
.24a1	a2 ff		ldx #$ff			ldx 	#$FF
.24a3	9a		txs				txs
.24a4	20 e1 23	jsr $23e1			jsr 	ForceStandardMode
.24a7	a9 02		lda #$02			lda 	#2							; green text.
.24a9	a2 08		ldx #$08		ldx	#8
.24ab	20 f6 14	jsr $14f6		jsr	deviceHandler
.24ae	a2 0c		ldx #$0c		ldx	#12
.24b0	20 f6 14	jsr $14f6		jsr	deviceHandler
.24b3	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.24b5	85 28		sta $28				sta 	codePtr
.24b7	a5 2b		lda $2b				lda 	temp0+1
.24b9	85 29		sta $29				sta 	codePtr+1
.24bb	a2 06		ldx #$06		ldx	#6
.24bd	20 f6 14	jsr $14f6		jsr	deviceHandler
.24c0	a2 08		ldx #$08		ldx	#8
.24c2	20 18 47	jsr $4718		jsr	tokeniserHandler
.24c5	c9 00		cmp #$00			cmp 	#0
.24c7	f0 25		beq $24ee			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.24c9	a9 13		lda #$13			lda 	#(tokenHeader) & $FF
.24cb	85 28		sta $28				sta 	codePtr
.24cd	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.24cf	85 29		sta $29				sta 	1+(codePtr)
.24d1	ad 16 0d	lda $0d16			lda 	tokenBuffer 				; is it a blank line, go get another line.
.24d4	c9 80		cmp #$80			cmp 	#$80
.24d6	f0 c9		beq $24a1			beq 	WarmStartEntry
.24d8	29 c0		and #$c0			and 	#$C0						; does it start with a number
.24da	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.24dc	f0 15		beq $24f3			beq 	HasLineNumber
.24de	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.24e0	8d 13 0d	sta $0d13			sta 	tokenHeader 				; fake program line.
.24e3	8d 14 0d	sta $0d14			sta 	tokenHeader+1
.24e6	8d 15 0d	sta $0d15			sta 	tokenHeader+2
.24e9	a2 18		ldx #$18		ldx	#24
.24eb	20 d8 3b	jsr $3bd8		jsr	mainHandler
.24ee					WSEError:
.24ee	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.24f0	20 18 15	jsr $1518		jsr	errorHandler
.24f3					HasLineNumber:
.24f3	a0 03		ldy #$03			ldy 	#3 							; get line number
.24f5	a9 00		lda #$00			lda 	#0
.24f7	a2 0a		ldx #$0a		ldx	#10
.24f9	20 d8 3b	jsr $3bd8		jsr	mainHandler
.24fc	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.24fe	05 b0		ora $b0				ora 	esInt3
.2500	d0 ec		bne $24ee			bne 	WSEError
.2502	98		tya				tya 								; make codePtr point to code after the line number.
.2503	18		clc				clc 								; by skipping over the tokenised number.
.2504	65 28		adc $28				adc 	codePtr
.2506	85 28		sta $28				sta 	codePtr
.2508	90 02		bcc $250c			bcc		_HLNNoCarry
.250a	e6 29		inc $29				inc 	codePtr+1
.250c					_HLNNoCarry:
.250c	98		tya				tya 								; subtract that offset from the code buffer index
.250d	38		sec				sec
.250e	49 ff		eor #$ff			eor 	#$FF
.2510	6d 16 0e	adc $0e16			adc 	tokenBufferIndex
.2513	18		clc				clc 								; add space allowing for header & $80 trailer
.2514	69 04		adc #$04			adc 	#4
.2516	8d 16 0e	sta $0e16			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.2519	20 e7 23	jsr $23e7			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.251c					_HLNNoDelete:
.251c	ad 16 0e	lda $0e16			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.251f	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2521	f0 0c		beq $252f			beq 	_HLMEditDone
.2523	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2525	18		clc				clc 								; workspace (1k)
.2526	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.2528	c5 34		cmp $34				cmp 	highMemory+1
.252a	b0 0b		bcs $2537			bcs 	_HLMMemory 					; nope, won't allowit.
.252c	20 3a 24	jsr $243a			jsr 	InsertLine 					; insert the line in
.252f					_HLMEditDone:
.252f	a2 06		ldx #$06		ldx	#6
.2531	20 d8 3b	jsr $3bd8		jsr	mainHandler
.2534	4c a1 24	jmp $24a1			jmp 	WarmStartEntry
.2537					_HLMMemory:
.2537	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2539	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.253c					interactionHandler:
.253c	7c 3f 25	jmp ($253f,x)			jmp 	(interactionVectors,x)
.253f					interactionVectors:
>253f	45 25					.word _DummyControlHandler ; index 0
>2541	55 23					.word ColdStartEntry       ; index 2
>2543	a1 24					.word WarmStartEntry       ; index 4
.2545					_DummyControlHandler:
.2545	60		rts			rts

;******  Return to file: basic.asm

.2546					section_end_interaction:
.2546					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cd9					dataPtr:
>0cd9							.fill 	2
.0cdb					dataIndex:
>0cdb							.fill 	1
.2546					CommandRead:
.2546	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2548	20 8b 34	jsr $348b			jsr 	EvaluateReference
.254b	20 8c 25	jsr $258c			jsr 	SwapDPCP 					; use the data pointer.
.254e	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2550	c8		iny				iny
.2551	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2553	f0 07		beq $255c			beq 	_CRInData
.2555	88		dey				dey
.2556	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2558	aa		tax				tax
.2559	20 8d 2c	jsr $2c8d			jsr 	ScanForward
.255c					_CRInData:
.255c	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.255e	20 33 34	jsr $3433			jsr 	Evaluate
.2561	ca		dex				dex 								; and write the value.
.2562	20 e0 27	jsr $27e0			jsr 	WriteValue
.2565	20 8c 25	jsr $258c			jsr 	SwapDPCP 					; get the code pointer back.
.2568	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.256a	c8		iny				iny
.256b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.256d	f0 d7		beq $2546			beq 	CommandRead
.256f	88		dey				dey
.2570	60		rts				rts
.2571					CommandData:
.2571	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2573	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2575	20 8d 2c	jsr $2c8d			jsr 	ScanForward
.2578	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2579	60		rts				rts
.257a					CommandRestore:
.257a	ad c8 0a	lda $0ac8			lda 	basePage
.257d	8d d9 0c	sta $0cd9			sta 	dataPtr
.2580	ad c9 0a	lda $0ac9			lda 	basePage+1
.2583	8d da 0c	sta $0cda			sta 	dataPtr+1
.2586	a9 03		lda #$03			lda 	#3
.2588	8d db 0c	sta $0cdb			sta 	dataIndex
.258b	60		rts				rts
.258c					SwapDPCP:
.258c	8a		txa				txa
.258d	48		pha				pha
.258e	98		tya				tya 								; swap Y, DataIndex
.258f	ac db 0c	ldy $0cdb			ldy 	DataIndex
.2592	8d db 0c	sta $0cdb			sta 	DataIndex
.2595	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2597	ae d9 0c	ldx $0cd9			ldx 	dataptr
.259a	8d d9 0c	sta $0cd9			sta 	dataPtr
.259d	86 28		stx $28				stx 	codePtr
.259f	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.25a1	ae da 0c	ldx $0cda			ldx 	dataptr+1
.25a4	8d da 0c	sta $0cda			sta 	dataPtr+1
.25a7	86 29		stx $29				stx 	codePtr+1
.25a9	68		pla				pla
.25aa	aa		tax				tax
.25ab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.25ac					CommandGOSUB:
.25ac	20 50 34	jsr $3450			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.25af	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.25b1	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.25b3	20 85 3b	jsr $3b85			jsr 	RSClaim
.25b6	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.25b8	20 b1 3b	jsr $3bb1			jsr 	RSSavePosition
.25bb	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.25bd	f0 1b		beq $25da			beq 	GotoTOS 					; and do a GOTO there.
.25bf					CommandRETURN:
.25bf	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25c1	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.25c3	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.25c5	f0 05		beq $25cc			beq 	_isok
.25c7	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.25c9	20 18 15	jsr $1518		jsr	errorHandler
.25cc					_isok:
.25cc	a9 01		lda #$01			lda 	#1
.25ce	20 c4 3b	jsr $3bc4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.25d1	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.25d3	20 a7 3b	jsr $3ba7			jsr 	RSFree
.25d6	60		rts				rts
.25d7					CommandGOTO:
.25d7	20 50 34	jsr $3450			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.25da					GotoTOS:
.25da	20 71 2f	jsr $2f71			jsr 	ResetCodeAddress 			; simple search.
.25dd					_GotoSearch:
.25dd	a0 00		ldy #$00			ldy 	#0 							; get offset
.25df	b1 28		lda ($28),y			lda 	(codePtr),y
.25e1	f0 21		beq $2604			beq 	_GotoError 					; not found.
.25e3	c8		iny				iny									; check LSB match
.25e4	b1 28		lda ($28),y			lda 	(codePtr),y
.25e6	d5 98		cmp $98,x			cmp 	esInt0,x
.25e8	d0 07		bne $25f1			bne 	_GotoNext
.25ea	c8		iny				iny
.25eb	b1 28		lda ($28),y			lda 	(codePtr),y
.25ed	d5 a0		cmp $a0,x			cmp 	esInt1,x
.25ef	f0 10		beq $2601			beq 	_GotoFound
.25f1					_GotoNext:
.25f1	a0 00		ldy #$00			ldy 	#0 							; go next line
.25f3	b1 28		lda ($28),y			lda 	(codePtr),y
.25f5	18		clc				clc
.25f6	65 28		adc $28				adc 	codePtr
.25f8	85 28		sta $28				sta 	codePtr
.25fa	90 e1		bcc $25dd			bcc 	_GotoSearch
.25fc	e6 29		inc $29				inc 	codePtr+1
.25fe	4c dd 25	jmp $25dd			jmp 	_GotoSearch
.2601					_GotoFound:
.2601	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2603	60		rts				rts
.2604					_GotoError:
.2604	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2606	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cdc					InputBuffer:
>0cdc							.fill 	MaxInputSize+1
.2609					Command_Input:
.2609	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.260b	c8		iny				iny
.260c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.260e	f0 f9		beq $2609			beq 	Command_Input
.2610	88		dey				dey 							; undo consume
.2611	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2613	f0 54		beq $2669			beq 	_CIExit 				; : or EOL, exit
.2615	c9 80		cmp #$80			cmp 	#TOK_EOL
.2617	f0 50		beq $2669			beq 	_CIExit
.2619	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.261b	90 12		bcc $262f			bcc 	_CIVariable
.261d	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.261f	d0 43		bne $2664			bne 	_CISyntax
.2621	a2 00		ldx #$00			ldx 	#0
.2623	20 47 34	jsr $3447			jsr 	EvaluateString 			; evaluate and print string
.2626	20 42 28	jsr $2842			jsr 	TOSToTemp0
.2629	20 38 27	jsr $2738			jsr 	PrintString
.262c	4c 09 26	jmp $2609			jmp 	Command_Input
.262f					_CIVariable:
.262f	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2631	20 8b 34	jsr $348b			jsr 	EvaluateReference  		; this is where its going
.2634					_CIRetry:
.2634	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2636	a2 14		ldx #$14		ldx	#20
.2638	20 f6 14	jsr $14f6		jsr	deviceHandler
.263b	98		tya				tya
.263c	48		pha				pha
.263d	20 7d 26	jsr $267d			jsr 	InputString 			; input a string (manually)
.2640	a2 01		ldx #$01			ldx 	#1
.2642	20 6a 26	jsr $266a			jsr 	BufferToStackX 			; make stack,x ref input string.
.2645	a5 90		lda $90				lda 	esType 					; if target type numeric
.2647	29 40		and #$40			and 	#$40 					; then convert to number
.2649	d0 11		bne $265c			bne 	_CIWrite
.264b	a2 01		ldx #$01			ldx 	#1
.264d	20 42 28	jsr $2842			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2650	a9 0a		lda #$0a			lda 	#10
.2652	20 58 39	jsr $3958			jsr 	MInt32FromString 		; convert it back from a string.
.2655	68		pla				pla
.2656	a8		tay				tay
.2657	b0 03		bcs $265c			bcs 	_CIWrite 				; successfully converted.
.2659	18		clc				clc 							; default fail FP conversion
.265a	90 d8		bcc $2634			bcc		_CIRetry				; failed, try again.
.265c					_CIWrite:
.265c	a2 00		ldx #$00			ldx 	#0
.265e	20 e0 27	jsr $27e0			jsr 	WriteValue
.2661	4c 09 26	jmp $2609			jmp 	Command_Input
.2664					_CISyntax:
.2664	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2666	20 18 15	jsr $1518		jsr	errorHandler
.2669					_CIExit:
.2669	60		rts				rts
.266a					BufferToStackX:
.266a	a9 dc		lda #$dc			lda 	#InputBuffer & $FF
.266c	95 98		sta $98,x			sta 	esInt0,x
.266e	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.2670	95 a0		sta $a0,x			sta 	esInt1,x
.2672	a9 00		lda #$00			lda 	#0
.2674	95 a8		sta $a8,x			sta 	esInt2,x
.2676	95 b0		sta $b0,x			sta 	esInt3,x
.2678	a9 40		lda #$40			lda 	#$40
.267a	95 90		sta $90,x			sta 	esType,x
.267c	60		rts				rts
.267d					InputString:
.267d	a9 00		lda #$00			lda 	#0
.267f	8d dc 0c	sta $0cdc			sta 	InputBuffer
.2682					_InputLoop:
.2682	a2 02		ldx #$02		ldx	#2
.2684	20 f6 14	jsr $14f6		jsr	deviceHandler
.2687	a2 0a		ldx #$0a		ldx	#10
.2689	20 f6 14	jsr $14f6		jsr	deviceHandler
.268c	c9 00		cmp #$00			cmp 	#0
.268e	f0 f2		beq $2682			beq 	_InputLoop
.2690	c9 08		cmp #$08			cmp 	#8
.2692	f0 19		beq $26ad			beq 	_InputBackspace
.2694	c9 0d		cmp #$0d			cmp 	#13
.2696	f0 21		beq $26b9			beq 	_InputExit
.2698	ae dc 0c	ldx $0cdc			ldx 	InputBuffer
.269b	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.269d	f0 e3		beq $2682			beq 	_InputLoop
.269f	9d dd 0c	sta $0cdd,x			sta 	InputBuffer+1,x 		; write char
.26a2	ee dc 0c	inc $0cdc			inc 	InputBuffer 			; advance count.
.26a5					_InputPrintLoop:
.26a5	a2 14		ldx #$14		ldx	#20
.26a7	20 f6 14	jsr $14f6		jsr	deviceHandler
.26aa	4c 82 26	jmp $2682			jmp	 	_InputLoop
.26ad					_InputBackspace:
.26ad	ad dc 0c	lda $0cdc			lda 	InputBuffer 			; at start
.26b0	f0 d0		beq $2682			beq 	_InputLoop
.26b2	ce dc 0c	dec $0cdc			dec 	InputBuffer
.26b5	a9 08		lda #$08			lda 	#8
.26b7	d0 ec		bne $26a5			bne 	_InputPrintLoop
.26b9					_InputExit:
.26b9	a2 06		ldx #$06		ldx	#6
.26bb	20 f6 14	jsr $14f6		jsr	deviceHandler
.26be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cfd					lastPrintToken:
>0cfd							.fill 	1
.26bf					Command_Print:
.26bf	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.26c1	8d fd 0c	sta $0cfd			sta 	lastPrintToken
.26c4	88		dey				dey
.26c5					_PrintLoopSkip:
.26c5	c8		iny				iny
.26c6					_PrintLoop:
.26c6	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.26c8	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.26ca	f0 5b		beq $2727			beq 	_PrintExit
.26cc	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.26ce	f0 57		beq $2727			beq 	_PrintExit
.26d0	8d fd 0c	sta $0cfd			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.26d3	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.26d5	f0 ee		beq $26c5			beq 	_PrintLoopSkip
.26d7	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.26d9	f0 3c		beq $2717			beq	 	_PrintNewLine
.26db	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.26dd	f0 40		beq $271f			beq 	_PrintTab
.26df	20 31 34	jsr $3431			jsr 	EvaluateRoot 				; evaluate something at the root
.26e2	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.26e4	85 2a		sta $2a				sta 	temp0
.26e6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.26e8	85 2b		sta $2b				sta 	1+(temp0)
.26ea	a5 90		lda $90				lda 	esType 						; get type
.26ec	f0 15		beq $2703			beq		_PrintInteger
.26ee	4a		lsr a				lsr 	a 							; check for floating point
.26ef	b0 08		bcs $26f9			bcs 	_PrintFloat
.26f1					_PrintString:
.26f1	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.26f3	20 42 28	jsr $2842			jsr 	TOSToTemp0
.26f6	4c 11 27	jmp $2711			jmp 	_PrintTemp0 				; print no leading space.
.26f9					_PrintFloat:
.26f9	a9 00		lda #$00			lda 	#0 							; stack level.
.26fb	a2 16		ldx #$16		ldx	#22
.26fd	20 50 23	jsr $2350		jsr	floatingpointHandler
.2700	4c 0a 27	jmp $270a			jmp 	_PrintSpaceTemp0
.2703					_PrintInteger:
.2703	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2705	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2707	20 40 3a	jsr $3a40			jsr 	MInt32ToString				; convert to text
.270a					_PrintSpaceTemp0:
.270a	a9 20		lda #$20			lda 	#32
.270c	a2 14		ldx #$14		ldx	#20
.270e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2711					_PrintTemp0:
.2711	20 38 27	jsr $2738			jsr 	PrintString
.2714	4c c6 26	jmp $26c6			jmp 	_PrintLoop
.2717					_PrintNewLine:
.2717	a2 06		ldx #$06		ldx	#6
.2719	20 f6 14	jsr $14f6		jsr	deviceHandler
.271c	4c c5 26	jmp $26c5			jmp 	_PrintLoopSkip
.271f					_PrintTab:
.271f	a2 1a		ldx #$1a		ldx	#26
.2721	20 f6 14	jsr $14f6		jsr	deviceHandler
.2724	4c c5 26	jmp $26c5			jmp 	_PrintLoopSkip
.2727					_PrintExit:
.2727	ad fd 0c	lda $0cfd			lda		lastPrintToken 				; check last token
.272a	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.272c	f0 09		beq $2737			beq 	_PrintExit2
.272e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2730	f0 05		beq $2737			beq 	_PrintExit2
.2732	a2 06		ldx #$06		ldx	#6
.2734	20 f6 14	jsr $14f6		jsr	deviceHandler
.2737					_PrintExit2:
.2737	60		rts				rts
.2738					PrintString:
.2738	8a		txa				txa
.2739	48		pha				pha
.273a	98		tya				tya
.273b	48		pha				pha
.273c	a0 00		ldy #$00			ldy 	#0							; get length
.273e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2740	aa		tax				tax 								; into X
.2741	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2743	f0 10		beq $2755			beq 	_PSExit
.2745	ca		dex				dex
.2746	8a		txa				txa
.2747	48		pha				pha
.2748	c8		iny				iny
.2749	b1 2a		lda ($2a),y			lda 	(temp0),y
.274b	a2 14		ldx #$14		ldx	#20
.274d	20 f6 14	jsr $14f6		jsr	deviceHandler
.2750	68		pla				pla
.2751	aa		tax				tax
.2752	4c 41 27	jmp $2741			jmp 	_PSLoop
.2755					_PSExit:
.2755	68		pla				pla
.2756	a8		tay				tay
.2757	68		pla				pla
.2758	aa		tax				tax
.2759	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.275a					Command_CLS:
.275a	a2 04		ldx #$04		ldx	#4
.275c	20 f6 14	jsr $14f6		jsr	deviceHandler
.275f	60		rts				rts
.2760					Command_Ink:
.2760	a2 00		ldx #$00			ldx 	#0
.2762	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger
.2765	a2 08		ldx #$08		ldx	#8
.2767	20 f6 14	jsr $14f6		jsr	deviceHandler
.276a	60		rts				rts
.276b					Command_Paper:
.276b	a2 00		ldx #$00			ldx 	#0
.276d	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger
.2770	a2 12		ldx #$12		ldx	#18
.2772	20 f6 14	jsr $14f6		jsr	deviceHandler
.2775	60		rts				rts
.2776					Command_Locate:
.2776	a2 00		ldx #$00			ldx 	#0
.2778	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger
.277b	20 6a 3b	jsr $3b6a			jsr 	CheckComma
.277e	e8		inx				inx
.277f	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger
.2782	98		tya				tya
.2783	48		pha				pha
.2784	a4 99		ldy $99				ldy 	esInt0+1
.2786	a5 98		lda $98				lda 	esInt0
.2788	a2 10		ldx #$10		ldx	#16
.278a	20 f6 14	jsr $14f6		jsr	deviceHandler
.278d	68		pla				pla
.278e	a8		tay				tay
.278f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.2790					Command_VDU:
.2790	20 50 34	jsr $3450			jsr 	EvaluateRootInteger 			; get integer at root.
.2793	a5 98		lda $98				lda 	esInt0
.2795	a2 14		ldx #$14		ldx	#20
.2797	20 f6 14	jsr $14f6		jsr	deviceHandler
.279a					_CVNext:
.279a	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.279c	c8		iny				iny
.279d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.279f	f0 ef		beq $2790			beq 	Command_VDU
.27a1	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.27a3	d0 0a		bne $27af			bne 	_CVExit
.27a5	a5 a0		lda $a0				lda 	esInt1
.27a7	a2 14		ldx #$14		ldx	#20
.27a9	20 f6 14	jsr $14f6		jsr	deviceHandler
.27ac	4c 9a 27	jmp $279a			jmp 	_CVNext
.27af	88		dey		_CVExit:dey
.27b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.27b1					Command_Assert:
.27b1	20 50 34	jsr $3450			jsr 	EvaluateRootInteger 		; what is being asserted.
.27b4	20 11 3b	jsr $3b11			jsr 	MInt32Zero 					; is it true ?
.27b7	f0 01		beq $27ba			beq 	_CAError
.27b9	60		rts				rts
.27ba					_CAError:
.27ba	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.27bc	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.27bf					Command_Dim:
.27bf	a2 04		ldx #$04		ldx	#4
.27c1	20 e9 4a	jsr $4ae9		jsr	variableHandler
.27c4	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.27c6	c8		iny				iny
.27c7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.27c9	f0 f4		beq $27bf			beq 	Command_Dim
.27cb	88		dey				dey 								; unpick get
.27cc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.27cd					CommandLet:
.27cd	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.27cf	20 8b 34	jsr $348b			jsr 	EvaluateReference
.27d2	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.27d4	20 52 3b	jsr $3b52			jsr 	CheckToken
.27d7	e8		inx				inx 								; do RHS
.27d8	20 33 34	jsr $3433			jsr 	Evaluate 					; evaluate and dereference
.27db	ca		dex				dex
.27dc	20 e0 27	jsr $27e0			jsr 	WriteValue 					; write it out
.27df	60		rts				rts
.27e0					WriteValue:
.27e0	98		tya				tya
.27e1	48		pha				pha
.27e2	20 42 28	jsr $2842			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.27e5	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.27e7	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.27e9	29 40		and #$40			and 	#$40
.27eb	d0 50		bne $283d			bne		_WVType
.27ed	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.27ef	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.27f1	29 40		and #$40			and 	#$40
.27f3	d0 1f		bne $2814			bne 	_WVCopyString
.27f5	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.27f7	15 91		ora $91,x			ora 	esType+1,x
.27f9	4a		lsr a				lsr 	a
.27fa	90 22		bcc $281e			bcc 	_WVCopyData4 				; copy 4 data bytes.
.27fc	b5 90		lda $90,x			lda 	esType,x
.27fe	4a		lsr a				lsr 	a
.27ff	90 3c		bcc $283d			bcc 	_WVType
.2801	e8		inx				inx 								; force the value being written to be a float.
.2802	20 95 30	jsr $3095			jsr 	BPMakeFloat
.2805	ca		dex				dex
.2806	20 42 28	jsr $2842			jsr 	TOSToTemp0 					; set Temp0 to write address
.2809	e8		inx				inx
.280a	8a		txa				txa
.280b	a2 22		ldx #$22		ldx	#34
.280d	20 50 23	jsr $2350		jsr	floatingpointHandler
.2810	aa		tax				tax
.2811	4c 3a 28	jmp $283a			jmp 	_WVCopyExit
.2814					_WVCopyString:
.2814	8a		txa				txa
.2815	a2 10		ldx #$10		ldx	#16
.2817	20 95 3e	jsr $3e95		jsr	stringHandler
.281a	aa		tax				tax
.281b	4c 3a 28	jmp $283a			jmp 	_WVCopyExit
.281e					_WVCopyData4:
.281e	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2820	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2822	d0 10		bne $2834			bne 	_WVCopyData1
.2824	a0 03		ldy #$03			ldy 	#3
.2826	b5 b1		lda $b1,x			lda 	esInt3+1,x
.2828	91 2a		sta ($2a),y			sta 	(temp0),y
.282a	88		dey				dey
.282b	b5 a9		lda $a9,x			lda 	esInt2+1,x
.282d	91 2a		sta ($2a),y			sta 	(temp0),y
.282f	88		dey				dey
.2830	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2832	91 2a		sta ($2a),y			sta 	(temp0),y
.2834					_WVCopyData1:
.2834	a0 00		ldy #$00			ldy 	#0
.2836	b5 99		lda $99,x			lda 	esInt0+1,x
.2838	91 2a		sta ($2a),y			sta 	(temp0),y
.283a					_WVCopyExit:
.283a	68		pla				pla
.283b	a8		tay				tay
.283c	60		rts				rts
.283d					_WVType:
.283d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.283f	20 18 15	jsr $1518		jsr	errorHandler
.2842					TOSToTemp0:
.2842	b5 98		lda $98,x			lda 	esInt0,x
.2844	85 2a		sta $2a				sta 	temp0
.2846	b5 a0		lda $a0,x			lda 	esInt1,x
.2848	85 2b		sta $2b				sta 	temp0+1
.284a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.284b					Command_Poke:
.284b	a9 01		lda #$01			lda 	#1
.284d	d0 06		bne $2855			bne 	PokeGeneral
.284f					Command_Doke:
.284f	a9 02		lda #$02			lda 	#2
.2851	d0 02		bne $2855			bne 	PokeGeneral
.2853					Command_Loke:
.2853	a9 03		lda #$03			lda 	#3
.2855					PokeGeneral:
.2855	48		pha				pha 								; save id (PDL = 123)
.2856	20 50 34	jsr $3450			jsr 	EvaluateRootInteger 		; target address
.2859	20 6a 3b	jsr $3b6a			jsr	 	CheckComma
.285c	e8		inx				inx
.285d	20 52 34	jsr $3452			jsr 	EvaluateInteger 			; what value to POKE ?
.2860	ca		dex				dex
.2861	20 42 28	jsr $2842			jsr 	TOSToTemp0 					; temp0 points to the target address
.2864	84 32		sty $32				sty 	tempShort 					; save Y
.2866	68		pla				pla 								; get copy type (1-3) and dispatch
.2867	aa		tax				tax
.2868	ca		dex				dex
.2869	f0 14		beq $287f			beq 	_Poke1
.286b	ca		dex				dex
.286c	f0 0b		beq $2879			beq 	_Poke2
.286e	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2870	a5 b1		lda $b1				lda 	esInt3+1
.2872	91 2a		sta ($2a),y			sta 	(temp0),y
.2874	88		dey				dey
.2875	a5 a9		lda $a9				lda 	esInt2+1
.2877	91 2a		sta ($2a),y			sta 	(temp0),y
.2879					_Poke2:
.2879	a0 01		ldy #$01			ldy 	#1
.287b	a5 a1		lda $a1				lda 	esInt1+1
.287d	91 2a		sta ($2a),y			sta 	(temp0),y
.287f					_Poke1:
.287f	a0 00		ldy #$00			ldy 	#0
.2881	a5 99		lda $99				lda 	esInt0+1
.2883	91 2a		sta ($2a),y			sta 	(temp0),y
.2885	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2887	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.2888					Command_Rem:
.2888					Command_Rem2:
.2888	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.288a	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.288c	d0 06		bne $2894			bne 	_CRNotString
.288e	c8		iny				iny
.288f	98		tya				tya
.2890	38		sec				sec
.2891	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2893	a8		tay				tay
.2894					_CRNotString:
.2894	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.2895					CommandStop:
.2895	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.2897	20 18 15	jsr $1518		jsr	errorHandler
.289a					CommandEnd:
.289a	4c d3 3b	jmp $3bd3			jmp 	WarmStart
.289d					CommandXemu:
.289d	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.28a0					AdvanceNextLine:
.28a0	a0 00		ldy #$00			ldy 	#0 							; get offset
.28a2	b1 28		lda ($28),y			lda 	(codePtr),y
.28a4	18		clc				clc 								; add to codePtr
.28a5	65 28		adc $28				adc 	codePtr
.28a7	85 28		sta $28				sta 	codePtr
.28a9	90 02		bcc $28ad			bcc 	_ANLNoCarry
.28ab	e6 29		inc $29				inc 	codePtr+1
.28ad					_ANLNoCarry:
.28ad	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.28af	f0 e9		beq $289a			beq 	CommandEnd 					; execute END
.28b1	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.28b3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.28b4					Command_FOR:
.28b4	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.28b6	a2 0b		ldx #$0b			ldx 	#11
.28b8	20 85 3b	jsr $3b85			jsr 	RSClaim
.28bb	20 cd 27	jsr $27cd			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.28be	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.28c0	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.28c2	d0 4c		bne $2910			bne 	_CFType
.28c4	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.28c6	20 52 3b	jsr $3b52			jsr 	CheckToken
.28c9	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.28cb	20 52 34	jsr $3452			jsr 	EvaluateInteger				; get terminal value in stack 1
.28ce	98		tya				tya
.28cf	48		pha				pha
.28d0	a0 04		ldy #$04			ldy 	#4
.28d2	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.28d4	91 37		sta ($37),y			sta 	(rsPointer),y
.28d6	c8		iny				iny
.28d7	a5 a0		lda $a0				lda		esInt1
.28d9	91 37		sta ($37),y			sta 	(rsPointer),y
.28db	c8		iny				iny
.28dc	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.28de	91 37		sta ($37),y			sta 	(rsPointer),y
.28e0	c8		iny				iny
.28e1	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.28e3	91 37		sta ($37),y			sta 	(rsPointer),y
.28e5	c8		iny				iny
.28e6	a5 a1		lda $a1				lda		esInt1+1
.28e8	91 37		sta ($37),y			sta 	(rsPointer),y
.28ea	c8		iny				iny
.28eb	a5 a9		lda $a9				lda		esInt2+1
.28ed	91 37		sta ($37),y			sta 	(rsPointer),y
.28ef	c8		iny				iny
.28f0	a5 b1		lda $b1				lda		esInt3+1
.28f2	91 37		sta ($37),y			sta 	(rsPointer),y
.28f4	68		pla				pla
.28f5	a8		tay				tay
.28f6	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.28f8	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.28fa	d0 0e		bne $290a			bne 	_CFDone
.28fc	c8		iny				iny									; skip over step.
.28fd	20 52 34	jsr $3452			jsr 	EvaluateInteger 			; get step
.2900	98		tya				tya
.2901	48		pha				pha
.2902	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2904	a0 06		ldy #$06			ldy 	#6
.2906	91 37		sta ($37),y			sta 	(rsPointer),y
.2908	68		pla				pla
.2909	a8		tay				tay
.290a					_CFDone:
.290a	a9 01		lda #$01			lda 	#1
.290c	20 b1 3b	jsr $3bb1			jsr 	RSSavePosition 				; save position.
.290f	60		rts				rts
.2910					_CFType:
.2910	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2912	20 18 15	jsr $1518		jsr	errorHandler
.2915					Command_NEXT:
.2915	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2917	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2919	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.291b	f0 05		beq $2922			beq 	_isok
.291d	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.291f	20 18 15	jsr $1518		jsr	errorHandler
.2922					_isok:
.2922	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2924	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2926	b0 18		bcs $2940			bcs 	_CNNoIndex
.2928	a2 00		ldx #$00			ldx 	#0 							; start on stack
.292a	20 8b 34	jsr $348b			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.292d	98		tya				tya
.292e	48		pha				pha
.292f	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2931	b1 37		lda ($37),y			lda 	(rsPointer),y
.2933	d5 98		cmp $98,x			cmp 	esInt0,x
.2935	d0 76		bne $29ad			bne 	_CNBadIndex
.2937	c8		iny				iny
.2938	b1 37		lda ($37),y			lda 	(rsPointer),y
.293a	d5 a0		cmp $a0,x			cmp 	esInt1,x
.293c	d0 6f		bne $29ad			bne 	_CNBadIndex
.293e	68		pla				pla
.293f	a8		tay				tay
.2940					_CNNoIndex:
.2940	98		tya				tya
.2941	48		pha				pha
.2942	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2944	b1 37		lda ($37),y			lda 	(rsPointer),y
.2946	85 2a		sta $2a				sta 	temp0
.2948	c8		iny				iny
.2949	b1 37		lda ($37),y			lda 	(rsPointer),y
.294b	85 2b		sta $2b				sta 	temp0+1
.294d	c8		iny				iny
.294e	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2950	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2952	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2954	10 01		bpl $2957			bpl 	_CNSignX
.2956	ca		dex				dex  								; X = $FF
.2957					_CNSignX:
.2957	18		clc				clc 								; add to the LSB
.2958	a0 00		ldy #$00			ldy 	#0
.295a	71 2a		adc ($2a),y			adc 	(temp0),y
.295c	91 2a		sta ($2a),y			sta 	(temp0),y
.295e					_CNPropogate:
.295e	c8		iny				iny  								; add the sign extended in X to the rest.
.295f	8a		txa				txa
.2960	71 2a		adc ($2a),y			adc 	(temp0),y
.2962	91 2a		sta ($2a),y			sta 	(temp0),y
.2964	c8		iny				iny
.2965	8a		txa				txa
.2966	71 2a		adc ($2a),y			adc 	(temp0),y
.2968	91 2a		sta ($2a),y			sta 	(temp0),y
.296a	c8		iny				iny
.296b	8a		txa				txa
.296c	71 2a		adc ($2a),y			adc 	(temp0),y
.296e	91 2a		sta ($2a),y			sta 	(temp0),y
.2970	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2971	a5 37		lda $37				lda 	rsPointer
.2973	69 07		adc #$07			adc 	#7
.2975	85 2c		sta $2c				sta 	temp1
.2977	a9 00		lda #$00			lda 	#0
.2979	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.297b	a8		tay				tay 								; and clear the Y register again.
.297c	65 38		adc $38				adc 	rsPointer+1
.297e	85 2d		sta $2d				sta 	temp1+1
.2980	38		sec				sec 								; calculate current - limit oring interim values.
.2981	20 b9 29	jsr $29b9			jsr 	_CNCompare 					; each of these does a byte.
.2984	20 b9 29	jsr $29b9			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2987	20 b9 29	jsr $29b9			jsr 	_CNCompare 					; and the carry of the subtraction.
.298a	20 b9 29	jsr $29b9			jsr 	_CNCompare
.298d	50 02		bvc $2991			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.298f	49 80		eor #$80			eor 	#$80
.2991					_CNNoOverflow:
.2991	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.2993	30 1d		bmi $29b2			bmi 	_CNCheckDownto
.2995	c9 00		cmp #$00			cmp 	#0
.2997	30 0c		bmi $29a5			bmi 	_CNLoopRound 				; loop round if < =
.2999	a5 2e		lda $2e				lda 	temp2
.299b	f0 08		beq $29a5			beq 	_CNLoopRound
.299d					_CNLoopExit:
.299d	68		pla				pla
.299e	a8		tay				tay
.299f	a9 0b		lda #$0b			lda 	#11
.29a1	20 a7 3b	jsr $3ba7			jsr 	RSFree
.29a4	60		rts				rts
.29a5					_CNLoopRound:
.29a5	68		pla				pla
.29a6	a8		tay				tay
.29a7	a9 01		lda #$01			lda 	#1
.29a9	20 c4 3b	jsr $3bc4			jsr 	RSLoadPosition				; go back to the loop top
.29ac	60		rts				rts
.29ad					_CNBadIndex:
.29ad	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.29af	20 18 15	jsr $1518		jsr	errorHandler
.29b2					_CNCheckDownto:
.29b2	c9 00		cmp #$00			cmp 	#0
.29b4	10 ef		bpl $29a5			bpl 	_CNLoopRound
.29b6	4c 9d 29	jmp $299d			jmp 	_CNLoopExit
.29b9					_CNCompare:
.29b9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.29bb	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.29bd	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.29bf	85 2e		sta $2e				sta 	temp2
.29c1	c8		iny				iny
.29c2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.29c3					CommandIf:
.29c3	20 50 34	jsr $3450			jsr 	EvaluateRootInteger 		; get what's being tested.
.29c6	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.29c8	c9 91		cmp #$91			cmp 	#TKW_GOTO
.29ca	f0 04		beq $29d0			beq 	_IfSimple
.29cc	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.29ce	d0 1b		bne $29eb			bne 	_IfComplex
.29d0					_IfSimple:
.29d0	20 11 3b	jsr $3b11			jsr 	MInt32Zero					; check if TOS zero
.29d3	f0 10		beq $29e5			beq 	_IfEOL 						; go to next line.
.29d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.29d7	c8		iny				iny
.29d8	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.29da	f0 0c		beq $29e8			beq 	_IfGoto 					; do the Goto code
.29dc	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.29de	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.29e0	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.29e2	f0 04		beq $29e8			beq 	_IfGoto
.29e4	60		rts				rts 								; else continue on this line.
.29e5					_IfEOL:
.29e5	4c a0 28	jmp $28a0			jmp 	AdvanceNextLine 			; go to next line
.29e8					_IfGoto:
.29e8	4c d7 25	jmp $25d7			jmp 	CommandGoto
.29eb					_IfComplex:
.29eb	20 11 3b	jsr $3b11			jsr 	MInt32Zero 					; is it true ?
.29ee	f0 01		beq $29f1			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.29f0	60		rts				rts 								; else continue.
.29f1					_IFSkip:
.29f1	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.29f3	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.29f5	4c 8d 2c	jmp $2c8d			jmp		ScanForward
.29f8					Command_ELSE:
.29f8	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.29fa	8a		txa				txa
.29fb	4c 8d 2c	jmp $2c8d			jmp		ScanForward
.29fe					Command_ENDIF:
.29fe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cfe					storeSize:
>0cfe							.fill 	1
.29ff					CommandLocal:
.29ff	a2 00		ldx #$00			ldx 	#0
.2a01	20 1d 2a	jsr $2a1d			jsr 	LocaliseVariable 			; localise one.
.2a04					_CLCheckNext:
.2a04	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2a06	c8		iny				iny
.2a07	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2a09	f0 06		beq $2a11			beq 	_CLAssignment
.2a0b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2a0d	f0 f0		beq $29ff			beq 	CommandLocal
.2a0f	88		dey				dey
.2a10	60		rts				rts
.2a11					_CLAssignment:
.2a11	a2 01		ldx #$01			ldx 	#1
.2a13	20 33 34	jsr $3433			jsr 	Evaluate 					; evaluate RHS
.2a16	ca		dex				dex
.2a17	20 e0 27	jsr $27e0			jsr 	WriteValue
.2a1a	4c 04 2a	jmp $2a04			jmp 	_CLCheckNext
.2a1d					LocaliseVariable:
.2a1d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2a1f	c9 40		cmp #$40			cmp 	#$40
.2a21	b0 67		bcs $2a8a			bcs 	_LVSyntax
.2a23	8a		txa				txa 								; get the address of that variable.
.2a24	a2 02		ldx #$02		ldx	#2
.2a26	20 e9 4a	jsr $4ae9		jsr	variableHandler
.2a29	aa		tax				tax
.2a2a	8a		txa				txa
.2a2b	48		pha				pha
.2a2c	98		tya				tya
.2a2d	48		pha				pha
.2a2e	20 42 28	jsr $2842			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2a31	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2a33	0a		asl a				asl 	a
.2a34	10 16		bpl $2a4c			bpl 	_LVPushNumber
.2a36	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2a38	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a3a	c8		iny				iny
.2a3b	85 2c		sta $2c				sta 	temp1
.2a3d	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a3f	85 2d		sta $2d				sta 	temp1+1
.2a41	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2a43	b1 2c		lda ($2c),y			lda 	(temp1),y
.2a45	aa		tax				tax 								; into X
.2a46	e8		inx				inx 								; +1 for length.
.2a47	a9 24		lda #$24			lda 	#markerString
.2a49	4c 61 2a	jmp $2a61			jmp 	_LVWriteFrame
.2a4c					_LVPushNumber:
.2a4c	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2a4e	85 2c		sta $2c				sta 	temp1
.2a50	a5 2b		lda $2b				lda 	temp0+1
.2a52	85 2d		sta $2d				sta 	temp1+1
.2a54	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2a56	4a		lsr a				lsr 	a
.2a57	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2a59	a2 04		ldx #$04			ldx 	#VarISize
.2a5b	90 04		bcc $2a61			bcc 	_LVIsInteger
.2a5d	a9 23		lda #$23			lda 	#markerFloat
.2a5f	a2 06		ldx #$06			ldx 	#VarFSize
.2a61					_LVIsInteger:
.2a61					_LVWriteFrame:
.2a61	8e fe 0c	stx $0cfe			stx 	storeSize 					; number of bytes to copy from (temp0)
.2a64	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2a65	e8		inx				inx
.2a66	e8		inx				inx
.2a67	20 85 3b	jsr $3b85			jsr 	RSClaim 					; create the stack frame.
.2a6a	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2a6c	a0 01		ldy #$01			ldy 	#1
.2a6e	91 37		sta ($37),y			sta 	(rsPointer),y
.2a70	c8		iny				iny
.2a71	a5 2b		lda $2b				lda 	temp0+1
.2a73	91 37		sta ($37),y			sta 	(rsPointer),y
.2a75	a0 00		ldy #$00			ldy 	#0
.2a77					_LVCopyData:
.2a77	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2a79	c8		iny				iny 								; write allowing for the header bit.
.2a7a	c8		iny				iny
.2a7b	c8		iny				iny
.2a7c	91 37		sta ($37),y			sta 	(rsPointer),y
.2a7e	88		dey				dey
.2a7f	88		dey				dey
.2a80	ce fe 0c	dec $0cfe			dec 	storeSize 					; do it storesize times
.2a83	d0 f2		bne $2a77			bne 	_LVCopyData
.2a85	68		pla				pla
.2a86	a8		tay				tay
.2a87	68		pla				pla
.2a88	aa		tax				tax
.2a89	60		rts				rts
.2a8a					_LVSyntax:
.2a8a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a8c	20 18 15	jsr $1518		jsr	errorHandler
.2a8f					RestoreLocals:
.2a8f	a2 00		ldx #$00			ldx 	#0
.2a91	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2a93	c9 40		cmp #$40			cmp	 	#64
.2a95	90 01		bcc $2a98			bcc 	_RLocal
.2a97	60		rts				rts
.2a98					_RLocal:
.2a98	8a		txa				txa
.2a99	48		pha				pha
.2a9a	98		tya				tya
.2a9b	48		pha				pha
.2a9c	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2a9e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2aa0	85 2a		sta $2a				sta 	temp0
.2aa2	c8		iny				iny
.2aa3	b1 37		lda ($37),y			lda 	(rsPointer),y
.2aa5	85 2b		sta $2b				sta 	temp0+1
.2aa7	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2aa9	b1 37		lda ($37),y			lda 	(rsPointer),y
.2aab	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2aad	f0 28		beq $2ad7			beq 	_RString
.2aaf	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2ab1	c9 25		cmp #$25			cmp 	#markerInt
.2ab3	f0 02		beq $2ab7			beq 	_RIsInteger
.2ab5	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2ab7					_RIsInteger:
.2ab7	8a		txa				txa
.2ab8	48		pha				pha
.2ab9	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2abb					_RCopyBack:
.2abb	b1 37		lda ($37),y			lda 	(rsPointer),y
.2abd	88		dey				dey
.2abe	88		dey				dey
.2abf	88		dey				dey
.2ac0	91 2a		sta ($2a),y			sta 	(temp0),y
.2ac2	c8		iny				iny
.2ac3	c8		iny				iny
.2ac4	c8		iny				iny
.2ac5	c8		iny				iny
.2ac6	ca		dex				dex
.2ac7	d0 f2		bne $2abb			bne 	_RCopyBack
.2ac9	68		pla				pla 								; get size add 3
.2aca	18		clc				clc
.2acb	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2acd					_RRestoreAAndLoop:
.2acd	20 a7 3b	jsr $3ba7			jsr 	RSFree
.2ad0	68		pla				pla
.2ad1	a8		tay				tay
.2ad2	68		pla				pla
.2ad3	aa		tax				tax
.2ad4	4c 8f 2a	jmp $2a8f			jmp 	RestoreLocals 				; go see if there are any more locals.
.2ad7					_RString:
.2ad7	a2 00		ldx #$00			ldx 	#0
.2ad9	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2adb	b1 37		lda ($37),y			lda 	(rsPointer),y
.2add	95 98		sta $98,x			sta 	esInt0,x
.2adf	c8		iny				iny
.2ae0	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ae2	95 a0		sta $a0,x			sta 	esInt1,x
.2ae4	18		clc				clc
.2ae5	a5 37		lda $37				lda 	rsPointer
.2ae7	69 03		adc #$03			adc 	#3
.2ae9	95 99		sta $99,x			sta 	esInt0+1,x
.2aeb	a5 38		lda $38				lda 	rsPointer+1
.2aed	69 00		adc #$00			adc 	#0
.2aef	95 a1		sta $a1,x			sta 	esInt1+1,x
.2af1	8a		txa				txa
.2af2	a2 10		ldx #$10		ldx	#16
.2af4	20 95 3e	jsr $3e95		jsr	stringHandler
.2af7	a0 03		ldy #$03			ldy 	#3 							; get string length
.2af9	b1 37		lda ($37),y			lda 	(rsPointer),y
.2afb	18		clc				clc
.2afc	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2afe	4c cd 2a	jmp $2acd			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cff					paramCount:
>0cff							.fill 	1
.2b01					CallProc:
.2b01	20 89 2b	jsr $2b89			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2b04	48		pha				pha 								; save length on stack
.2b05	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2b07	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2b09	48		pha				pha
.2b0a	a5 2a		lda $2a				lda 	temp0
.2b0c	48		pha				pha
.2b0d	98		tya				tya 								; calculate Y + length
.2b0e	18		clc				clc
.2b0f	65 32		adc $32				adc 	tempShort
.2b11	a8		tay				tay
.2b12	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2b14					_CallProcEvalParams:
.2b14	e8		inx				inx
.2b15	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2b17	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b19	f0 0b		beq $2b26			beq 	_CPDoneParams
.2b1b	20 33 34	jsr $3433			jsr 	Evaluate 					; evaluate a parameter
.2b1e	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2b20	c8		iny				iny
.2b21	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2b23	f0 ef		beq $2b14			beq 	_CallProcEvalParams
.2b25	88		dey				dey 								; undo consumption.
.2b26					_CPDoneParams:
.2b26	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; check closing parenthesis.
.2b29	8e ff 0c	stx $0cff			stx 	paramCount 					; store parameter count+1
.2b2c	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2b2e	a9 50		lda #$50			lda 	#markerPROC
.2b30	20 85 3b	jsr $3b85			jsr 	RSClaim
.2b33	a9 01		lda #$01			lda 	#1 							; store return address.
.2b35	20 b1 3b	jsr $3bb1			jsr 	RSSavePosition
.2b38	68		pla				pla 								; get the new code Ptr
.2b39	85 28		sta $28				sta 	codePtr
.2b3b	68		pla				pla
.2b3c	85 29		sta $29				sta 	codePtr+1
.2b3e	68		pla				pla 								; length of name + 4 is the param start.
.2b3f	18		clc				clc
.2b40	69 04		adc #$04			adc 	#4
.2b42	a8		tay				tay
.2b43	a2 ff		ldx #$ff			ldx 	#$FF
.2b45					_CPLoadParameters:
.2b45	e8		inx				inx 								; point to where the address should be loaded.
.2b46	ec ff 0c	cpx $0cff			cpx 	paramCount 					; too many parameters in definition ?
.2b49	f0 1e		beq $2b69			beq 	_CPParamError
.2b4b	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2b4d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2b4f	f0 0e		beq $2b5f			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2b51	20 1d 2a	jsr $2a1d			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2b54	20 e0 27	jsr $27e0			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2b57	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2b59	c8		iny				iny
.2b5a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2b5c	f0 e7		beq $2b45			beq 	_CPLoadParameters
.2b5e	88		dey				dey 								; no, unconsume and check for )
.2b5f					_CPParamComplete:
.2b5f	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; check )
.2b62	e8		inx				inx 								; check right number of parameters have been consumed
.2b63	ec ff 0c	cpx $0cff			cpx 	paramCount
.2b66	d0 01		bne $2b69			bne 	_CPParamError
.2b68	60		rts				rts
.2b69					_CPParamError:
.2b69	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2b6b	20 18 15	jsr $1518		jsr	errorHandler
.2b6e					ReturnProc:
.2b6e	20 8f 2a	jsr $2a8f			jsr 	RestoreLocals 				; get the locals back.
.2b71	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b73	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b75	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2b77	f0 05		beq $2b7e			beq 	_isok
.2b79	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2b7b	20 18 15	jsr $1518		jsr	errorHandler
.2b7e					_isok:
.2b7e	a9 01		lda #$01			lda 	#1
.2b80	20 c4 3b	jsr $3bc4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2b83	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2b85	20 a7 3b	jsr $3ba7			jsr 	RSFree
.2b88	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d00					procList:
>0d00							.fill 	2		 					; terminated by name high being zero.
.0d02					yInLine:
>0d02							.fill 	1
.2b89					FindProcedure:
.2b89	8c 02 0d	sty $0d02			sty 	yInLine 					; save current position.
.2b8c	20 47 2c	jsr $2c47			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2b8f	85 2c		sta $2c				sta 	temp1
.2b91	ad 00 0d	lda $0d00			lda		procList 					; put procList address in temp2
.2b94	85 2e		sta $2e				sta 	temp2
.2b96	ad 01 0d	lda $0d01			lda 	procList+1
.2b99	85 2f		sta $2f				sta 	temp2+1
.2b9b	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2b9d					_FPLoop:
.2b9d	b1 2e		lda ($2e),y			lda 	(temp2),y
.2b9f	f0 4f		beq $2bf0			beq 	_FPError 					; if so, we don't know this procedure.
.2ba1	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2ba3	c8		iny				iny
.2ba4	b1 2e		lda ($2e),y			lda 	(temp2),y
.2ba6	85 2a		sta $2a				sta 	temp0
.2ba8	c8		iny				iny
.2ba9	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2bab	c5 2c		cmp $2c				cmp 	temp1
.2bad	d0 2b		bne $2bda			bne 	_FPNext 					; hash is different, go to next.
.2baf	38		sec				sec
.2bb0	ad 02 0d	lda $0d02			lda 	yInLine 					; position in line must be at least 4
.2bb3	e9 04		sbc #$04			sbc 	#4
.2bb5	18		clc				clc
.2bb6	65 28		adc $28				adc 	codePtr
.2bb8	85 30		sta $30				sta 	temp3
.2bba	a5 29		lda $29				lda 	codePtr+1
.2bbc	69 00		adc #$00			adc 	#0
.2bbe	85 31		sta $31				sta 	temp3+1
.2bc0	98		tya				tya
.2bc1	48		pha				pha
.2bc2	a0 04		ldy #$04			ldy 	#4
.2bc4					_FPCName:
.2bc4	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2bc6	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2bc8	d0 0e		bne $2bd8			bne 	_FPpulYNext 				; if different go to next one.
.2bca	c8		iny				iny
.2bcb	c9 3a		cmp #$3a			cmp 	#$3A
.2bcd	90 f5		bcc $2bc4			bcc 	_FPCName 					; compare the whole lot....
.2bcf	68		pla				pla 								; throw away the saved Y
.2bd0	98		tya				tya 								; length of name is Y-4
.2bd1	38		sec				sec
.2bd2	e9 04		sbc #$04			sbc 	#4
.2bd4	ac 02 0d	ldy $0d02			ldy 	yInLine  					; get the original Y back
.2bd7	60		rts				rts
.2bd8					_FPpulYNext:
.2bd8	68		pla				pla
.2bd9	a8		tay				tay
.2bda					_FPNext:
.2bda	c8		iny				iny 								; next procedure record.
.2bdb	10 c0		bpl $2b9d			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2bdd	98		tya				tya 								; subtract 128 from Y
.2bde	38		sec				sec
.2bdf	e9 80		sbc #$80			sbc 	#128
.2be1	a8		tay				tay
.2be2	18		clc				clc 								; add 128 to temp2, so we can have more than
.2be3	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2be5	69 80		adc #$80			adc 	#128
.2be7	85 2e		sta $2e				sta 	temp2
.2be9	90 b2		bcc $2b9d			bcc 	_FPLoop
.2beb	e6 2f		inc $2f				inc 	temp2+1
.2bed	4c 9d 2b	jmp $2b9d			jmp 	_FPLoop
.2bf0					_FPError:
.2bf0	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2bf2	20 18 15	jsr $1518		jsr	errorHandler
.2bf5					ScanProc:
.2bf5	98		tya				tya
.2bf6	48		pha				pha
.2bf7	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2bf9	8d 00 0d	sta $0d00			sta 	procList
.2bfc	a5 36		lda $36				lda 	lowMemory+1
.2bfe	8d 01 0d	sta $0d01			sta 	procList+1
.2c01	20 71 2f	jsr $2f71			jsr 	ResetCodeAddress 			; back to the start.
.2c04					_ScanLoop:
.2c04	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2c06	b1 28		lda ($28),y			lda 	(codePtr),y
.2c08	f0 2a		beq $2c34			beq 	_ScanExit
.2c0a	a0 03		ldy #$03			ldy 	#3							; get first token
.2c0c	b1 28		lda ($28),y			lda 	(codePtr),y
.2c0e	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2c10	d0 12		bne $2c24			bne 	_ScanNext
.2c12	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2c14	20 3c 2c	jsr $2c3c			jsr 	_ScanWrite
.2c17	a5 28		lda $28				lda 	codePtr
.2c19	20 3c 2c	jsr $2c3c			jsr 	_ScanWrite
.2c1c	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2c1e	20 47 2c	jsr $2c47			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2c21	20 3c 2c	jsr $2c3c			jsr 	_ScanWrite					; and write that
.2c24					_ScanNext:
.2c24	18		clc				clc
.2c25	a0 00		ldy #$00			ldy 	#0
.2c27	b1 28		lda ($28),y			lda 	(codePtr),y
.2c29	65 28		adc $28				adc 	codePtr
.2c2b	85 28		sta $28				sta 	codePtr
.2c2d	90 d5		bcc $2c04			bcc 	_ScanLoop
.2c2f	e6 29		inc $29				inc 	codePtr+1
.2c31	4c 04 2c	jmp $2c04			jmp 	_ScanLoop
.2c34					_ScanExit:
.2c34	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2c36	20 3c 2c	jsr $2c3c			jsr 	_ScanWrite
.2c39	68		pla				pla
.2c3a	a8		tay				tay
.2c3b	60		rts				rts
.2c3c					_ScanWrite:
.2c3c	a0 00		ldy #$00			ldy 	#0
.2c3e	91 35		sta ($35),y			sta 	(lowMemory),y
.2c40	e6 35		inc $35				inc 	lowMemory
.2c42	d0 02		bne $2c46			bne 	_SWNoCarry
.2c44	e6 36		inc $36				inc 	lowMemory+1
.2c46					_SWNoCarry:
.2c46	60		rts				rts
.2c47					CalculateProcedureHash:
.2c47	a9 00		lda #$00			lda 	#0 							; clear hash.
.2c49	85 2a		sta $2a				sta 	temp0
.2c4b					_CPHLoop:
.2c4b	18		clc				clc 								; add character and rotate and add carry back in
.2c4c	b1 28		lda ($28),y			lda 	(codePtr),y
.2c4e	65 2a		adc $2a				adc 	temp0
.2c50	6a		ror a				ror 	a
.2c51	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2c53	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2c55	b1 28		lda ($28),y			lda 	(codePtr),y
.2c57	c8		iny				iny 								; advance incase we go round again.
.2c58	c9 3a		cmp #$3a			cmp 	#$3A
.2c5a	90 ef		bcc $2c4b			bcc 	_CPHLoop
.2c5c	a5 2a		lda $2a				lda 	temp0
.2c5e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2c5f					Command_Repeat:
.2c5f	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2c61	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2c63	20 85 3b	jsr $3b85			jsr 	RSClaim
.2c66	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2c68	20 b1 3b	jsr $3bb1			jsr 	RSSavePosition
.2c6b	60		rts				rts
.2c6c					Command_Until:
.2c6c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c6e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c70	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2c72	f0 05		beq $2c79			beq 	_isok
.2c74	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2c76	20 18 15	jsr $1518		jsr	errorHandler
.2c79					_isok:
.2c79	20 50 34	jsr $3450			jsr 	EvaluateRootInteger 		; at the bottom.
.2c7c	20 11 3b	jsr $3b11			jsr 	MInt32Zero					; check if TOS zero
.2c7f	d0 06		bne $2c87			bne 	_CUExit
.2c81	a9 01		lda #$01			lda 	#1
.2c83	20 c4 3b	jsr $3bc4			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2c86	60		rts				rts
.2c87					_CUExit:
.2c87	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2c89	20 a7 3b	jsr $3ba7			jsr 	RSFree
.2c8c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2c8d					ScanForward:
.2c8d	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2c8f	86 2d		stx $2d				stx 	temp1+1
.2c91	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2c93	85 2e		sta $2e				sta 	temp2
.2c95	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2c97	c8		iny				iny
.2c98	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2c9a	d0 08		bne $2ca4			bne 	_SFNoCheck 					; if so, check token against entered values.
.2c9c	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2c9e	f0 24		beq $2cc4			beq 	_SFExit 					; at the same strcture depth.
.2ca0	c5 2d		cmp $2d				cmp 	temp1+1
.2ca2	f0 20		beq $2cc4			beq 	_SFExit
.2ca4					_SFNoCheck:
.2ca4	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2ca6	90 ed		bcc $2c95			bcc 	_SFLoop
.2ca8	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2caa	90 19		bcc $2cc5			bcc 	_SFSpecials
.2cac	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2cae	90 e5		bcc $2c95			bcc 	_SFLoop
.2cb0	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2cb2	b0 e1		bcs $2c95			bcs 	_SFLoop
.2cb4	aa		tax				tax  								; token in X, and look up the adjuster.
.2cb5	bd 6e 33	lda $336e,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2cb8	38		sec				sec 								; convert to an offset ($FF,$01)
.2cb9	e9 81		sbc #$81			sbc 	#$81
.2cbb	18		clc				clc 								; add to depth
.2cbc	65 2e		adc $2e				adc 	temp2
.2cbe	85 2e		sta $2e				sta 	temp2
.2cc0	10 d3		bpl $2c95			bpl 	_SFLoop 					; +ve okay to continue
.2cc2	30 07		bmi $2ccb			bmi 	SFError 					; if gone -ve then we have a nesting error
.2cc4	60		rts		_SFExit:rts
.2cc5					_SFSpecials:
.2cc5	20 d0 2c	jsr $2cd0			jsr 	ScannerSkipSpecial
.2cc8	4c 95 2c	jmp $2c95			jmp 	_SFLoop
.2ccb					SFError:
.2ccb	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2ccd	20 18 15	jsr $1518		jsr	errorHandler
.2cd0					ScannerSkipSpecial:
.2cd0	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2cd2	f0 10		beq $2ce4			beq 	_SFNextLine
.2cd4	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2cd6	f0 2b		beq $2d03			beq 	_SFFloatSkip
.2cd8	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2cda	f0 02		beq $2cde			beq 	_SFSkipString
.2cdc	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2cdd	60		rts				rts 								; token.
.2cde					_SFSkipString:
.2cde	98		tya				tya
.2cdf	38		sec				sec
.2ce0	71 28		adc ($28),y			adc 	(codePtr),y
.2ce2	a8		tay				tay
.2ce3	60		rts				rts
.2ce4					_SFNextLine:
.2ce4	a0 00		ldy #$00			ldy 	#0 							; get offset
.2ce6	b1 28		lda ($28),y			lda 	(codePtr),y
.2ce8	18		clc				clc 								; add to code pointer.
.2ce9	65 28		adc $28				adc 	codePtr
.2ceb	85 28		sta $28				sta 	codePtr
.2ced	90 02		bcc $2cf1			bcc		_SFNLNoCarry
.2cef	e6 29		inc $29				inc 	codePtr+1
.2cf1					_SFNLNoCarry:
.2cf1	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2cf3	d0 0b		bne $2d00			bne		_SFXNL 						; no go round again
.2cf5	a5 2c		lda $2c				lda 	temp1
.2cf7	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2cf9	d0 d0		bne $2ccb			bne 	SFError 					; read uses this to search for data statements
.2cfb	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2cfd	20 18 15	jsr $1518		jsr	errorHandler
.2d00	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2d02	60		rts				rts
.2d03					_SFFloatSkip:
.2d03	98		tya				tya 								; skip over an embedded float.
.2d04	18		clc				clc
.2d05	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2d07	a8		tay				tay
.2d08	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2d09					Command_While:
.2d09	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2d0b	a2 04		ldx #$04			ldx 	#4
.2d0d	20 85 3b	jsr $3b85			jsr 	RSClaim 					; create on stack.
.2d10	88		dey				dey
.2d11	a9 01		lda #$01			lda 	#1
.2d13	20 b1 3b	jsr $3bb1			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2d16	c8		iny				iny
.2d17	20 50 34	jsr $3450			jsr 	EvaluateRootInteger			; get the conditional
.2d1a	20 11 3b	jsr $3b11			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2d1d	f0 01		beq $2d20			beq 	_CWFail
.2d1f	60		rts				rts
.2d20					_CWFail:
.2d20	a9 04		lda #$04			lda 	#4
.2d22	20 a7 3b	jsr $3ba7			jsr 	RSFree 						; close the just opened position.
.2d25	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2d27	aa		tax				tax
.2d28	20 8d 2c	jsr $2c8d			jsr 	ScanForward
.2d2b	60		rts				rts
.2d2c					Command_Wend:
.2d2c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d2e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d30	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2d32	f0 05		beq $2d39			beq 	_isok
.2d34	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2d36	20 18 15	jsr $1518		jsr	errorHandler
.2d39					_isok:
.2d39	a9 01		lda #$01			lda 	#1
.2d3b	20 c4 3b	jsr $3bc4			jsr 	RSLoadPosition				; go back until true
.2d3e	a9 04		lda #$04			lda 	#4
.2d40	20 a7 3b	jsr $3ba7			jsr 	RSFree 						; close the loop
.2d43	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2d44					CommandClear:
.2d44					XCommandClear:
.2d44	98		tya				tya
.2d45	48		pha				pha
.2d46	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2d49	85 33		sta $33				sta 	highMemory
.2d4b	ad cd 0a	lda $0acd			lda 	endMemory+1
.2d4e	85 34		sta $34				sta 	highMemory+1
.2d50	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2d53	85 2a		sta $2a				sta 	temp0
.2d55	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d58	85 2b		sta $2b				sta 	temp0+1
.2d5a					_CCFindEnd:
.2d5a	a0 00		ldy #$00			ldy 	#0
.2d5c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d5e	f0 0c		beq $2d6c			beq 	_CCFoundEnd 				; offset zero is end.
.2d60	18		clc				clc
.2d61	65 2a		adc $2a				adc 	temp0 						; move to next line
.2d63	85 2a		sta $2a				sta 	temp0
.2d65	90 f3		bcc $2d5a			bcc 	_CCFindEnd
.2d67	e6 2b		inc $2b				inc 	temp0+1
.2d69	4c 5a 2d	jmp $2d5a			jmp 	_CCFindEnd
.2d6c					_CCFoundEnd:
.2d6c	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2d6e	85 35		sta $35				sta 	lowMemory
.2d70	a5 2b		lda $2b				lda 	temp0+1
.2d72	85 36		sta $36				sta 	lowMemory+1
.2d74	18		clc				clc 								; put temp0+1 in endProgram
.2d75	a5 2a		lda $2a				lda 	temp0
.2d77	69 01		adc #$01			adc 	#1
.2d79	8d ca 0a	sta $0aca			sta 	endProgram
.2d7c	a5 2b		lda $2b				lda 	temp0+1
.2d7e	69 00		adc #$00			adc 	#0
.2d80	8d cb 0a	sta $0acb			sta 	endProgram+1
.2d83	18		clc				clc 								; put a bit of space in.
.2d84	a5 35		lda $35				lda 	lowMemory
.2d86	69 04		adc #$04			adc 	#4
.2d88	85 35		sta $35				sta 	lowMemory
.2d8a	90 02		bcc $2d8e			bcc 	_CCNoCarry
.2d8c	e6 36		inc $36				inc 	lowMemory+1
.2d8e					_CCNoCarry:
.2d8e	20 77 3b	jsr $3b77			jsr 	RSReset 					; reset the return stack.
.2d91	a2 06		ldx #$06		ldx	#6
.2d93	20 e9 4a	jsr $4ae9		jsr	variableHandler
.2d96	20 f5 2b	jsr $2bf5			jsr 	ScanProc 					; scan for procedures
.2d99	20 7a 25	jsr $257a			jsr 	CommandRestore 				; do a restore
.2d9c	68		pla				pla
.2d9d	a8		tay				tay
.2d9e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d03					structIndent:
>0d03							.fill 	1
.2d9f					CommandList:
.2d9f	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2da1	8e 03 0d	stx $0d03			stx 	structIndent
.2da4	20 ea 3a	jsr $3aea			jsr 	MInt32False
.2da7	e8		inx				inx
.2da8	20 e6 3a	jsr $3ae6			jsr 	MInt32True
.2dab	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2dad	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2daf	f0 15		beq $2dc6			beq 	_CLEndLine
.2db1	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2db3	30 1b		bmi $2dd0			bmi 	_CLDoListing 				; do the whole lot.
.2db5	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2db7	20 52 34	jsr $3452			jsr 	EvaluateInteger
.2dba	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2dbc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2dbe	f0 06		beq $2dc6			beq 	_CLEndLine
.2dc0	20 28 3a	jsr $3a28			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2dc3	4c d0 2d	jmp $2dd0			jmp 	_CLDoListing 				; own e.g. list 1100
.2dc6					_CLEndLine:
.2dc6	c8		iny				iny 								; skip comma
.2dc7	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2dc9	30 05		bmi $2dd0			bmi 	_CLDoListing
.2dcb	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2dcd	20 52 34	jsr $3452			jsr 	EvaluateInteger				; get end
.2dd0					_CLDoListing:
.2dd0	20 71 2f	jsr $2f71			jsr 	ResetCodeAddress 			; back to the start.
.2dd3					_CLCheckLoop:
.2dd3	a2 02		ldx #$02		ldx	#2
.2dd5	20 f6 14	jsr $14f6		jsr	deviceHandler
.2dd8	a0 00		ldy #$00			ldy 	#0							; check end.
.2dda	b1 28		lda ($28),y			lda 	(codePtr),y
.2ddc	f0 41		beq $2e1f			beq 	_CLEnd
.2dde	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2de0	20 22 2e	jsr $2e22			jsr 	CLCompareLineTOS
.2de3	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2de5	f0 28		beq $2e0f			beq 	_CLNext
.2de7	e8		inx				inx
.2de8	20 22 2e	jsr $2e22			jsr 	CLCompareLineTOS 			; compare vs higher
.2deb	c9 01		cmp #$01			cmp 	#1
.2ded	f0 20		beq $2e0f			beq 	_CLNext
.2def	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2df1	20 44 2e	jsr $2e44			jsr 	CLStructureCheck
.2df4	ad 03 0d	lda $0d03			lda 	structIndent 				; indent level.
.2df7	10 02		bpl $2dfb			bpl 	_CLPositive
.2df9	a9 00		lda #$00			lda 	#0
.2dfb					_CLPositive:
.2dfb	a2 04		ldx #$04		ldx	#4
.2dfd	20 18 47	jsr $4718		jsr	tokeniserHandler
.2e00	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2e02	20 44 2e	jsr $2e44			jsr 	CLStructureCheck
.2e05	ad 03 0d	lda $0d03			lda 	structIndent
.2e08	10 05		bpl $2e0f			bpl 	_CLNext
.2e0a	a9 00		lda #$00			lda 	#0
.2e0c	8d 03 0d	sta $0d03			sta 	structIndent
.2e0f					_CLNext:
.2e0f	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2e11	b1 28		lda ($28),y			lda 	(codePtr),y
.2e13	18		clc				clc
.2e14	65 28		adc $28				adc 	codePtr
.2e16	85 28		sta $28				sta 	codePtr
.2e18	90 b9		bcc $2dd3			bcc 	_CLCheckLoop
.2e1a	e6 29		inc $29				inc 	codePtr+1
.2e1c	4c d3 2d	jmp $2dd3			jmp 	_CLCheckLoop
.2e1f					_CLEnd:
.2e1f	4c d3 3b	jmp $3bd3			jmp 	WarmStart 					; warm start after list.
.2e22					CLCompareLineTOS:
.2e22	a0 01		ldy #$01			ldy 	#1
.2e24	b1 28		lda ($28),y			lda 	(codePtr),y
.2e26	55 98		eor $98,x			eor 	esInt0,x
.2e28	85 2a		sta $2a				sta 	temp0
.2e2a	c8		iny				iny
.2e2b	b1 28		lda ($28),y			lda 	(codePtr),y
.2e2d	55 a0		eor $a0,x			eor 	esInt1,x
.2e2f	05 2a		ora $2a				ora 	temp0
.2e31	f0 10		beq $2e43			beq 	_CLCLTExit
.2e33	88		dey				dey
.2e34	b1 28		lda ($28),y			lda 	(codePtr),y
.2e36	d5 98		cmp $98,x			cmp 	esInt0,x
.2e38	c8		iny				iny
.2e39	b1 28		lda ($28),y			lda 	(codePtr),y
.2e3b	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2e3d	a9 ff		lda #$ff			lda 	#255
.2e3f	90 02		bcc $2e43			bcc 	_CLCLTExit
.2e41	a9 01		lda #$01			lda 	#1
.2e43					_CLCLTExit:
.2e43	60		rts				rts
.2e44					CLStructureCheck:
.2e44	85 2a		sta $2a				sta 	temp0
.2e46	a0 03		ldy #$03			ldy 	#3
.2e48					_CLSCLoop:
.2e48	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2e4a	c8		iny				iny
.2e4b	c9 80		cmp #$80			cmp 	#$80
.2e4d	90 f9		bcc $2e48			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2e4f	f0 28		beq $2e79			beq		_CLSCExit					; EOL return
.2e51	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2e53	90 1e		bcc $2e73			bcc 	_CLSCSpecial
.2e55	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2e57	90 ef		bcc $2e48			bcc 	_CLSCLoop
.2e59	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2e5b	b0 eb		bcs $2e48			bcs 	_CLSCLoop
.2e5d	aa		tax				tax 								; get adjustment
.2e5e	bd 6e 33	lda $336e,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2e61	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2e63	d0 e3		bne $2e48			bne 	_CLSCLoop
.2e65	38		sec				sec
.2e66	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2e68	0a		asl a				asl 	a 							; double indent step
.2e69	18		clc				clc
.2e6a	6d 03 0d	adc $0d03			adc 	structIndent 				; add to structure indent
.2e6d	8d 03 0d	sta $0d03			sta 	structIndent
.2e70	4c 48 2e	jmp $2e48			jmp 	_CLSCLoop
.2e73					_CLSCSpecial:
.2e73	20 d0 2c	jsr $2cd0			jsr 	ScannerSkipSpecial
.2e76	4c 48 2e	jmp $2e48			jmp 	_CLSCLoop
.2e79					_CLSCExit:
.2e79	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2e7a					CommandLoad:
.2e7a	20 a2 2e	jsr $2ea2			jsr 	CLSParameters 					; get parameters for load.
.2e7d	08		php				php
.2e7e	a2 0e		ldx #$0e		ldx	#14
.2e80	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e83	28		plp				plp
.2e84	b0 08		bcs $2e8e			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2e86	20 44 2d	jsr $2d44			jsr 	CommandClear
.2e89	a2 04		ldx #$04		ldx	#4
.2e8b	20 3c 25	jsr $253c		jsr	interactionHandler
.2e8e					_CLExit
.2e8e	60		rts				rts
.2e8f					CommandSave:
.2e8f	20 a2 2e	jsr $2ea2			jsr 	CLSParameters					; get parameters for save
.2e92	90 08		bcc $2e9c			bcc 	_CSNoOverrideAddress
.2e94	20 6a 3b	jsr $3b6a			jsr 	CheckComma 						; should be a comma.
.2e97	a2 02		ldx #$02			ldx 	#2
.2e99	20 52 34	jsr $3452			jsr 	EvaluateInteger 				; get save end address.
.2e9c					_CSNoOverrideAddress:
.2e9c	a2 18		ldx #$18		ldx	#24
.2e9e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2ea1	60		rts				rts
.2ea2					CLSParameters:
.2ea2	a2 00		ldx #$00			ldx 	#0 								; string
.2ea4	20 47 34	jsr $3447			jsr 	EvaluateString
.2ea7	e8		inx				inx 									; erase out +1 +2
.2ea8	20 ea 3a	jsr $3aea			jsr 	MInt32False
.2eab	e8		inx				inx
.2eac	20 ea 3a	jsr $3aea			jsr 	MInt32False
.2eaf	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2eb2	85 99		sta $99				sta 	esInt0+1
.2eb4	ad c9 0a	lda $0ac9			lda 	basePage+1
.2eb7	85 a1		sta $a1				sta 	esInt1+1
.2eb9	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2ebc	85 9a		sta $9a				sta 	esInt0+2
.2ebe	ad cb 0a	lda $0acb			lda 	endProgram+1
.2ec1	85 a2		sta $a2				sta 	esInt1+2
.2ec3	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2ec5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ec7	d0 08		bne $2ed1			bne 	_CLSDefault
.2ec9	c8		iny				iny 									; skip comma
.2eca	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2ecc	20 52 34	jsr $3452			jsr 	EvaluateInteger
.2ecf	38		sec				sec
.2ed0	60		rts				rts
.2ed1					_CLSDefault:
.2ed1	18		clc				clc
.2ed2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2ed3					Command_New:
.2ed3					Command_XNew:
.2ed3	20 71 2f	jsr $2f71			jsr 	ResetCodeAddress 			; point to first line
.2ed6	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2ed8	98		tya				tya
.2ed9	91 28		sta ($28),y			sta 	(codePtr),y
.2edb	20 44 2d	jsr $2d44			jsr 	CommandClear 				; clear everything down.
.2ede	4c 9a 28	jmp $289a			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d04					breakCounter:
>0d04								.fill 	1
.0d05					breakIncrement:
>0d05								.fill 	1
.2ee1					Command_Run:
.2ee1					XCommand_Run:
.2ee1	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2ee3	9a		txs				txs
.2ee4	20 6b 2f	jsr $2f6b			jsr 	BreakOn 					; turn break on
.2ee7	20 44 2d	jsr $2d44			jsr 	CommandClear 				; clear everything.
.2eea	20 71 2f	jsr $2f71			jsr 	ResetCodeAddress 			; back to the start.
.2eed					Command_RunFrom:
.2eed	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2eef					CRNextInstruction:
.2eef	64 3a		stz $3a				stz 	softMemAlloc+1
.2ef1	ad 04 0d	lda $0d04			lda 	breakCounter 				; check for break.
.2ef4	6d 05 0d	adc $0d05			adc 	breakIncrement
.2ef7	8d 04 0d	sta $0d04			sta 	breakCounter
.2efa	90 05		bcc $2f01			bcc 	_CRNoChecks
.2efc	a2 02		ldx #$02		ldx	#2
.2efe	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f01					_CRNoChecks
.2f01	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2f03	10 1c		bpl $2f21			bpl 	_CRNotToken
.2f05	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2f07	b0 0c		bcs $2f15			bcs 	_CRExecute
.2f09	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2f0b	b0 71		bcs $2f7e			bcs 	Unimplemented
.2f0d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2f0f	b0 04		bcs $2f15			bcs 	_CRExecute
.2f11	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2f13	b0 16		bcs $2f2b			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2f15					_CRExecute:
.2f15	c8		iny				iny 								; consume it.
.2f16	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2f17	aa		tax				tax
.2f18	20 1e 2f	jsr $2f1e			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2f1b	4c ef 2e	jmp $2eef			jmp 	CRNextInstruction
.2f1e					_CRRunRoutine:
.2f1e	7c 88 2f	jmp ($2f88,x)			jmp 	(Group0Vectors,x)
.2f21					_CRNotToken:
.2f21	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2f23	b0 59		bcs $2f7e			bcs 	Unimplemented
.2f25					_CRDefaultLet:
.2f25	20 cd 27	jsr $27cd			jsr 	CommandLet 					; do the default, LET
.2f28	4c ef 2e	jmp $2eef			jmp 	CRNextInstruction
.2f2b					_CRCheckIndirect:
.2f2b	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2f2d	f0 0a		beq $2f39			beq 	_CRAndCommand
.2f2f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2f31	f0 f2		beq $2f25			beq 	_CRDefaultLet
.2f33	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2f35	f0 ee		beq $2f25			beq 	_CRDefaultLet
.2f37	d0 45		bne $2f7e			bne 	Unimplemented
.2f39					_CRAndCommand:
.2f39	c8		iny				iny 								; skip over the AND token
.2f3a	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2f3c	20 56 2f	jsr $2f56			jsr 	CommandAssembler 			; do the assembler command
.2f3f	4c ef 2e	jmp $2eef			jmp 	CRNextInstruction 			; and loop round.
.2f42					CommandShift1:
.2f42	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2f44	10 38		bpl $2f7e			bpl 	Unimplemented 				; we have an error as this should not happen.
.2f46	c8		iny				iny 								; advance over it.
.2f47	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2f49	b0 0b		bcs $2f56			bcs 	CommandAssembler
.2f4b	0a		asl a				asl 	a 							; double into X
.2f4c	aa		tax				tax
.2f4d	7c 4e 30	jmp ($304e,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2f50					CommandShift2:
.2f50	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2f52	20 69 18	jsr $1869		jsr	extensionHandler
.2f55	60		rts				rts
.2f56					CommandAssembler:
.2f56	a2 02		ldx #$02		ldx	#2
.2f58	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2f5b	60		rts				rts
.2f5c					CommandAssemblerLabel:
.2f5c	a2 04		ldx #$04		ldx	#4
.2f5e	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2f61	60		rts				rts
.2f62					CommandColon:
.2f62	60		rts				rts
.2f63					CommandBreak:
.2f63	20 50 34	jsr $3450			jsr 	EvaluateRootInteger
.2f66	20 11 3b	jsr $3b11			jsr 	MInt32Zero
.2f69	f0 02		beq $2f6d			beq 	BreakOff
.2f6b					BreakOn:
.2f6b	a2 08		ldx #$08			ldx 	#8
.2f6d					BreakOff:
.2f6d	8e 05 0d	stx $0d05			stx 	breakIncrement
.2f70	60		rts				rts
.2f71					ResetCodeAddress:
.2f71	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2f74	85 28		sta $28				sta 	codePtr
.2f76	ad c9 0a	lda $0ac9			lda 	basePage+1
.2f79	85 29		sta $29				sta 	codePtr+1
.2f7b	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2f7d	60		rts				rts
.2f7e					Unimplemented:
.2f7e	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2f80	20 18 15	jsr $1518		jsr	errorHandler
.2f83					TKErr01:
.2f83					TKErr02:
.2f83					TKErr03:
.2f83					TKErr04:
.2f83					TKErr05:
.2f83					TKErr06:
.2f83					TKErr07:
.2f83					TKErr08:
.2f83					TKErr09:
.2f83					TKErr10:
.2f83					TKErr11:
.2f83					TKErr12:
.2f83					TKErr13:
.2f83					TKErr14:
.2f83	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2f85	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2f88					Group0Vectors:
>2f88	a0 28					.word	AdvanceNextLine          ; $80 [[eol]]
>2f8a	42 2f					.word	CommandShift1            ; $81 [[sh1]]
>2f8c	50 2f					.word	CommandShift2            ; $82 [[sh2]]
>2f8e	83 2f					.word	TKErr09                  ; $83 [[sh3]]
>2f90	83 2f					.word	TKErr10                  ; $84 [[fpc]]
>2f92	83 2f					.word	TKErr08                  ; $85 [[str]]
>2f94	37 31					.word	AndHandler               ; $86 and
>2f96	24 31					.word	OrHandler                ; $87 or
>2f98	11 31					.word	XorHandler               ; $88 xor
>2f9a	59 32					.word	CompareGreaterEq         ; $89 >=
>2f9c	63 32					.word	CompareLessEq            ; $8a <=
>2f9e	45 32					.word	CompareGreater           ; $8b >
>2fa0	3b 32					.word	CompareLess              ; $8c <
>2fa2	31 32					.word	CompareEquals            ; $8d =
>2fa4	4f 32					.word	CompareNotEquals         ; $8e <>
>2fa6	a2 30					.word	AddHandler               ; $8f +
>2fa8	c5 30					.word	SubHandler               ; $90 -
>2faa	5d 31					.word	ShrHandler               ; $91 >>
>2fac	4a 31					.word	ShlHandler               ; $92 <<
>2fae	d8 30					.word	MulHandler               ; $93 *
>2fb0	eb 30					.word	DivHandler               ; $94 /
>2fb2	fe 30					.word	ModHandler               ; $95 mod
>2fb4	96 31					.word	PowerHandler             ; $96 ^
>2fb6	70 31					.word	WordRefHandler           ; $97 !
>2fb8	83 31					.word	ByteRefHandler           ; $98 ?
>2fba	5f 2c					.word	Command_Repeat           ; $99 repeat
>2fbc	09 2d					.word	Command_While            ; $9a while
>2fbe	b4 28					.word	Command_FOR              ; $9b for
>2fc0	c3 29					.word	CommandIf                ; $9c if
>2fc2	83 2f					.word	TKErr04                  ; $9d defproc
>2fc4	6c 2c					.word	Command_Until            ; $9e until
>2fc6	2c 2d					.word	Command_Wend             ; $9f wend
>2fc8	15 29					.word	Command_NEXT             ; $a0 next
>2fca	83 2f					.word	TKErr06                  ; $a1 then
>2fcc	fe 29					.word	Command_ENDIF            ; $a2 endif
>2fce	6e 2b					.word	ReturnProc               ; $a3 endproc
>2fd0	bd 33					.word	UnaryParenthesis         ; $a4 (
>2fd2	9f 35					.word	UnaryLen                 ; $a5 len(
>2fd4	e3 35					.word	UnarySgn                 ; $a6 sgn(
>2fd6	cc 35					.word	UnaryAbs                 ; $a7 abs(
>2fd8	3c 36					.word	Unary_Random             ; $a8 random(
>2fda	86 36					.word	Unary_Page               ; $a9 page
>2fdc	e6 3a					.word	MInt32True               ; $aa true
>2fde	ea 3a					.word	MInt32False              ; $ab false
>2fe0	51 36					.word	Unary_Min                ; $ac min(
>2fe2	55 36					.word	Unary_Max                ; $ad max(
>2fe4	5e 37					.word	UnarySys                 ; $ae sys(
>2fe6	07 37					.word	UnaryTimer               ; $af timer(
>2fe8	1c 35					.word	EventFunction            ; $b0 event(
>2fea	30 37					.word	UnaryGet                 ; $b1 get(
>2fec	20 37					.word	UnaryInkey               ; $b2 inkey(
>2fee	d7 36					.word	UnaryAlloc               ; $b3 alloc(
>2ff0	97 37					.word	ExecChr                  ; $b4 chr$(
>2ff2	c7 37					.word	ExecLeft                 ; $b5 left$(
>2ff4	e4 37					.word	ExecMid                  ; $b6 mid$(
>2ff6	0c 38					.word	ExecRight                ; $b7 right$(
>2ff8	9e 34					.word	Event_Str                ; $b8 str$(
>2ffa	cd 34					.word	UnaryVal                 ; $b9 val(
>2ffc	fa 35					.word	UnaryPeek                ; $ba peek(
>2ffe	00 36					.word	UnaryDeek                ; $bb deek(
>3000	06 36					.word	UnaryLeek                ; $bc leek(
>3002	bd 35					.word	UnaryAsc                 ; $bd asc(
>3004	b1 36					.word	UnaryIntToFloat          ; $be int(
>3006	c4 36					.word	UnaryFloatToInt          ; $bf float(
>3008	d0 34					.word	UnaryIsVal               ; $c0 isval(
>300a	ae 37					.word	ExecUpper                ; $c1 upper$(
>300c	ab 37					.word	ExecLower                ; $c2 lower$(
>300e	94 36					.word	UnaryReference           ; $c3 @
>3010	aa 36					.word	UnaryComplement          ; $c4 ~
>3012	a7 36					.word	UnaryHexMarker           ; $c5 &
>3014	49 37					.word	UnaryGetString           ; $c6 get$(
>3016	4f 37					.word	UnaryInkeyString         ; $c7 inkey$(
>3018	86 37					.word	UnaryMem                 ; $c8 mem
>301a	83 2f					.word	TKErr01                  ; $c9 )
>301c	62 2f					.word	CommandColon             ; $ca :
>301e	83 2f					.word	TKErr02                  ; $cb ,
>3020	83 2f					.word	TKErr03                  ; $cc ;
>3022	88 28					.word	Command_Rem2             ; $cd '
>3024	83 2f					.word	TKErr07                  ; $ce to
>3026	83 2f					.word	TKErr05                  ; $cf step
>3028	01 2b					.word	CallProc                 ; $d0 proc
>302a	ff 29					.word	CommandLocal             ; $d1 local
>302c	bf 27					.word	Command_Dim              ; $d2 dim
>302e	88 28					.word	Command_Rem              ; $d3 rem
>3030	cd 27					.word	CommandLet               ; $d4 let
>3032	09 26					.word	Command_Input            ; $d5 input
>3034	f8 29					.word	Command_ELSE             ; $d6 else
>3036	90 27					.word	Command_VDU              ; $d7 vdu
>3038	bf 26					.word	Command_Print            ; $d8 print
>303a	71 25					.word	CommandData              ; $d9 data
>303c	83 2f					.word	TKErr13                  ; $da image
>303e	83 2f					.word	TKErr12                  ; $db at
>3040	83 2f					.word	TKErr14                  ; $dc flip
>3042	b1 27					.word	Command_Assert           ; $dd assert
>3044	4b 28					.word	Command_Poke             ; $de poke
>3046	4f 28					.word	Command_Doke             ; $df doke
>3048	53 28					.word	Command_Loke             ; $e0 loke
>304a	60 27					.word	Command_Ink              ; $e1 ink
>304c	6b 27					.word	Command_Paper            ; $e2 paper
>304e	5a 27					.word	Command_CLS              ; $e3 cls
>3050	76 27					.word	Command_Locate           ; $e4 locate
>3052	5c 2f					.word	CommandAssemblerLabel    ; $e5 .
>3054	7e 2f					.word	Unimplemented            ; $e6 from
>3056	83 2f					.word	TKErr11                  ; $e7 #
>3058	44 2d					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.305a					Group1Vectors:
>305a	7a 2e					.word	CommandLoad              ; $86 load
>305c	8f 2e					.word	CommandSave              ; $87 save
>305e	9f 2d					.word	CommandList              ; $88 list
>3060	d3 2e					.word	Command_New              ; $89 new
>3062	63 2f					.word	CommandBreak             ; $8a break
>3064	e1 2e					.word	Command_Run              ; $8b run
>3066	46 25					.word	CommandRead              ; $8c read
>3068	7a 25					.word	CommandRestore           ; $8d restore
>306a	9a 28					.word	CommandEnd               ; $8e end
>306c	95 28					.word	CommandStop              ; $8f stop
>306e	9d 28					.word	CommandXemu              ; $90 xemu
>3070	d7 25					.word	CommandGOTO              ; $91 goto
>3072	ac 25					.word	CommandGOSUB             ; $92 gosub
>3074	bf 25					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.3076					BinaryProcess:
.3076	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.3078	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.307a	0a		asl a				asl 	a
.307b	30 0e		bmi $308b			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.307d	18		clc				clc 								; return CC for integer
.307e	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3080	f0 08		beq $308a			beq 	_BPExit 					; if both integer then return with CC.
.3082	20 90 30	jsr $3090			jsr 	BPMakeBothFloat 			; make both float
.3085	a9 01		lda #$01			lda 	#$01 						; set result type to float
.3087	95 90		sta $90,x			sta 	esType,x
.3089	38		sec				sec 								; and return with carry set.
.308a					_BPExit:
.308a	60		rts				rts
.308b					_BPStringType:
.308b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.308d	20 18 15	jsr $1518		jsr	errorHandler
.3090					BPMakeBothFloat:
.3090	e8		inx				inx
.3091	20 95 30	jsr $3095			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.3094	ca		dex				dex
.3095					BPMakeFloat:
.3095	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.3097	4a		lsr a				lsr 	a
.3098	b0 07		bcs $30a1			bcs 	_BPIsFloat 					; already a float if set.
.309a	8a		txa				txa
.309b	a2 1c		ldx #$1c		ldx	#28
.309d	20 50 23	jsr $2350		jsr	floatingpointHandler
.30a0	aa		tax				tax
.30a1					_BPIsFloat:
.30a1	60		rts				rts
.30a2					AddHandler:
.30a2	20 73 32	jsr $3273			jsr 	DereferenceTwo 				; dereference top two on stack.
.30a5	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.30a7	35 91		and $91,x			and 	esType+1,x
.30a9	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.30ab	d0 10		bne $30bd			bne 	_AHStringConcat				; concatenate strings.
.30ad	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.30b0	b0 03		bcs $30b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30b2	4c ce 39	jmp $39ce			jmp 	MInt32Add 							; else do it as integer.
.30b5					_IsFPOperation:
.30b5	8a		txa				txa 								; call the relevant fp routine
.30b6	a2 04		ldx #$04		ldx	#4
.30b8	20 50 23	jsr $2350		jsr	floatingpointHandler
.30bb	aa		tax				tax
.30bc	60		rts				rts
.30bd					_AHStringConcat:
.30bd	8a		txa				txa 								; handled by the string module.
.30be	a2 06		ldx #$06		ldx	#6
.30c0	20 95 3e	jsr $3e95		jsr	stringHandler
.30c3	aa		tax				tax
.30c4	60		rts				rts
.30c5					SubHandler:
.30c5	20 73 32	jsr $3273			jsr 	DereferenceTwo
.30c8	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.30cb	b0 03		bcs $30d0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30cd	4c e8 39	jmp $39e8			jmp 	MInt32Sub 							; else do it as integer.
.30d0					_IsFPOperation:
.30d0	8a		txa				txa 								; call the relevant fp routine
.30d1	a2 12		ldx #$12		ldx	#18
.30d3	20 50 23	jsr $2350		jsr	floatingpointHandler
.30d6	aa		tax				tax
.30d7	60		rts				rts
.30d8					MulHandler:
.30d8	20 73 32	jsr $3273			jsr 	DereferenceTwo
.30db	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.30de	b0 03		bcs $30e3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30e0	4c 02 3a	jmp $3a02			jmp 	MInt32Multiply 							; else do it as integer.
.30e3					_IsFPOperation:
.30e3	8a		txa				txa 								; call the relevant fp routine
.30e4	a2 0c		ldx #$0c		ldx	#12
.30e6	20 50 23	jsr $2350		jsr	floatingpointHandler
.30e9	aa		tax				tax
.30ea	60		rts				rts
.30eb					DivHandler:
.30eb	20 73 32	jsr $3273			jsr 	DereferenceTwo
.30ee	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.30f1	b0 03		bcs $30f6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30f3	4c bf 38	jmp $38bf			jmp 	MInt32SDivide 							; else do it as integer.
.30f6					_IsFPOperation:
.30f6	8a		txa				txa 								; call the relevant fp routine
.30f7	a2 08		ldx #$08		ldx	#8
.30f9	20 50 23	jsr $2350		jsr	floatingpointHandler
.30fc	aa		tax				tax
.30fd	60		rts				rts
.30fe					ModHandler:
.30fe	20 73 32	jsr $3273			jsr 	DereferenceTwo
.3101	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.3104	b0 03		bcs $3109			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3106	4c 3d 39	jmp $393d			jmp 	MInt32Modulus 							; else do it as integer.
.3109					_IsFPOperation:
.3109	8a		txa				txa 								; call the relevant fp routine
.310a	a2 0a		ldx #$0a		ldx	#10
.310c	20 50 23	jsr $2350		jsr	floatingpointHandler
.310f	aa		tax				tax
.3110	60		rts				rts
.3111					XorHandler:
.3111	20 73 32	jsr $3273			jsr 	DereferenceTwo
.3114	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.3117	b0 03		bcs $311c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3119	4c 71 38	jmp $3871			jmp 	MInt32Xor 							; else do it as integer.
.311c					_IsFPOperation:
.311c	8a		txa				txa 								; call the relevant fp routine
.311d	a2 0a		ldx #$0a		ldx	#10
.311f	20 50 23	jsr $2350		jsr	floatingpointHandler
.3122	aa		tax				tax
.3123	60		rts				rts
.3124					OrHandler:
.3124	20 73 32	jsr $3273			jsr 	DereferenceTwo
.3127	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.312a	b0 03		bcs $312f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.312c	4c 58 38	jmp $3858			jmp 	MInt32Or 							; else do it as integer.
.312f					_IsFPOperation:
.312f	8a		txa				txa 								; call the relevant fp routine
.3130	a2 0a		ldx #$0a		ldx	#10
.3132	20 50 23	jsr $2350		jsr	floatingpointHandler
.3135	aa		tax				tax
.3136	60		rts				rts
.3137					AndHandler:
.3137	20 73 32	jsr $3273			jsr 	DereferenceTwo
.313a	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.313d	b0 03		bcs $3142			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.313f	4c 3f 38	jmp $383f			jmp 	MInt32And 							; else do it as integer.
.3142					_IsFPOperation:
.3142	8a		txa				txa 								; call the relevant fp routine
.3143	a2 0a		ldx #$0a		ldx	#10
.3145	20 50 23	jsr $2350		jsr	floatingpointHandler
.3148	aa		tax				tax
.3149	60		rts				rts
.314a					ShlHandler:
.314a	20 73 32	jsr $3273			jsr 	DereferenceTwo
.314d	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.3150	b0 03		bcs $3155			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3152	4c cb 31	jmp $31cb			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3155					_IsFPOperation:
.3155	8a		txa				txa 								; call the relevant fp routine
.3156	a2 0a		ldx #$0a		ldx	#10
.3158	20 50 23	jsr $2350		jsr	floatingpointHandler
.315b	aa		tax				tax
.315c	60		rts				rts
.315d					ShrHandler:
.315d	20 73 32	jsr $3273			jsr 	DereferenceTwo
.3160	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.3163	b0 03		bcs $3168			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3165	4c ce 31	jmp $31ce			jmp 	MInt32ShiftRightX 							; else do it as integer.
.3168					_IsFPOperation:
.3168	8a		txa				txa 								; call the relevant fp routine
.3169	a2 0a		ldx #$0a		ldx	#10
.316b	20 50 23	jsr $2350		jsr	floatingpointHandler
.316e	aa		tax				tax
.316f	60		rts				rts
.3170					WordRefHandler:
.3170	20 73 32	jsr $3273			jsr 	DereferenceTwo
.3173	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.3176	b0 03		bcs $317b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3178	4c bd 31	jmp $31bd			jmp 	MInt32WordIndirect 							; else do it as integer.
.317b					_IsFPOperation:
.317b	8a		txa				txa 								; call the relevant fp routine
.317c	a2 0a		ldx #$0a		ldx	#10
.317e	20 50 23	jsr $2350		jsr	floatingpointHandler
.3181	aa		tax				tax
.3182	60		rts				rts
.3183					ByteRefHandler:
.3183	20 73 32	jsr $3273			jsr 	DereferenceTwo
.3186	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.3189	b0 03		bcs $318e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.318b	4c c1 31	jmp $31c1			jmp 	MInt32ByteIndirect 							; else do it as integer.
.318e					_IsFPOperation:
.318e	8a		txa				txa 								; call the relevant fp routine
.318f	a2 0a		ldx #$0a		ldx	#10
.3191	20 50 23	jsr $2350		jsr	floatingpointHandler
.3194	aa		tax				tax
.3195	60		rts				rts
.3196					PowerHandler:
.3196	20 73 32	jsr $3273			jsr 	DereferenceTwo
.3199	20 76 30	jsr $3076			jsr 	BinaryProcess 				; check to see if either is float
.319c	b0 03		bcs $31a1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.319e	4c a9 31	jmp $31a9			jmp 	PowerInteger 							; else do it as integer.
.31a1					_IsFPOperation:
.31a1	8a		txa				txa 								; call the relevant fp routine
.31a2	a2 18		ldx #$18		ldx	#24
.31a4	20 50 23	jsr $2350		jsr	floatingpointHandler
.31a7	aa		tax				tax
.31a8	60		rts				rts
.31a9					PowerInteger:
.31a9	20 90 30	jsr $3090			jsr 	BPMakeBothFloat				; make them float.
.31ac	8a		txa				txa
.31ad	a2 18		ldx #$18		ldx	#24
.31af	20 50 23	jsr $2350		jsr	floatingpointHandler
.31b2	a2 14		ldx #$14		ldx	#20
.31b4	20 50 23	jsr $2350		jsr	floatingpointHandler
.31b7	aa		tax				tax
.31b8	a9 00		lda #$00			lda 	#0 							; make type integer
.31ba	95 90		sta $90,x			sta 	esType,x
.31bc	60		rts				rts
.31bd					Mint32WordIndirect:
.31bd	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.31bf	d0 02		bne $31c3			bne 	Min32Indirect
.31c1					Mint32ByteIndirect:
.31c1	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.31c3					Min32Indirect:
.31c3	48		pha				pha 								; save the indirection
.31c4	20 ce 39	jsr $39ce			jsr 	MInt32Add 					; add a!b a?b
.31c7	68		pla				pla 								; and set the type to reference.
.31c8	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.31ca	60		rts				rts
.31cb					Mint32ShiftLeftX:
.31cb	18		clc				clc 								; CC shift left
.31cc	90 01		bcc $31cf			bcc 	Mint32Shift
.31ce					Mint32ShiftRightX:
.31ce	38		sec				sec 								; CS shift right
.31cf					Mint32Shift:
.31cf	08		php				php 								; save carry flag on stack.
.31d0	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.31d2	15 a9		ora $a9,x			ora 	esInt2+1,x
.31d4	15 b1		ora $b1,x			ora 	esInt3+1,x
.31d6	d0 1e		bne $31f6			bne 	_MShiftZero
.31d8	b5 99		lda $99,x			lda 	esInt0+1,x
.31da	c9 20		cmp #$20			cmp 	#32
.31dc	b0 18		bcs $31f6			bcs 	_MShiftZero
.31de					_MShiftLoop:
.31de	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.31e0	f0 12		beq $31f4			beq 	_MShiftExit
.31e2	d6 99		dec $99,x			dec 	esInt0+1,x
.31e4	28		plp				plp 								; restore and save carry
.31e5	08		php				php
.31e6	90 06		bcc $31ee			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.31e8	20 08 3b	jsr $3b08			jsr 	Mint32ShiftRight
.31eb	4c de 31	jmp $31de			jmp 	_MShiftLoop
.31ee					_MShiftLeft:
.31ee	20 ff 3a	jsr $3aff			jsr 	Mint32ShiftLeft
.31f1	4c de 31	jmp $31de			jmp 	_MShiftLoop
.31f4					_MShiftExit:
.31f4	28		plp				plp	 								; throw saved carry and exit
.31f5	60		rts				rts
.31f6					_MShiftZero:
.31f6	4c ea 3a	jmp $3aea			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.31f9					PerformComparison:
.31f9	20 73 32	jsr $3273			jsr 	DereferenceTwo 				; make both values.
.31fc	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.31fe	35 91		and $91,x			and 	esType+1,x
.3200	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3201	30 1d		bmi $3220			bmi 	_PCIsString
.3203	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3205	15 91		ora $91,x			ora 	esType+1,x
.3207	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.3208	30 22		bmi $322c			bmi 	_PCError
.320a	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.320c	f0 0f		beq $321d			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.320e	20 90 30	jsr $3090			jsr 	BPMakeBothFloat 			; make both float
.3211	8a		txa				txa
.3212	a2 06		ldx #$06		ldx	#6
.3214	20 50 23	jsr $2350		jsr	floatingpointHandler
.3217	86 32		stx $32				stx 	tempShort 					; save result
.3219	aa		tax				tax
.321a	a5 32		lda $32				lda 	tempShort
.321c	60		rts				rts
.321d					_PCIsInteger:
.321d	4c 8a 38	jmp $388a			jmp 	MInt32Compare
.3220					_PCIsString:
.3220	8a		txa				txa 								; A has SP
.3221	a2 0a		ldx #$0a		ldx	#10
.3223	20 95 3e	jsr $3e95		jsr	stringHandler
.3226	86 32		stx $32				stx 	tempShort 					; save result
.3228	aa		tax				tax 								; put SP back in X and get result.
.3229	a5 32		lda $32				lda 	tempShort
.322b	60		rts				rts
.322c					_PCError:
.322c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.322e	20 18 15	jsr $1518		jsr	errorHandler
.3231					CompareEquals:
.3231	20 f9 31	jsr $31f9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3234	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3236	f0 35		beq $326d			beq  	CompareTrue
.3238	4c 70 32	jmp $3270			jmp 	CompareFalse
.323b					CompareLess:
.323b	20 f9 31	jsr $31f9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.323e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3240	f0 2b		beq $326d			beq  	CompareTrue
.3242	4c 70 32	jmp $3270			jmp 	CompareFalse
.3245					CompareGreater:
.3245	20 f9 31	jsr $31f9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3248	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.324a	f0 21		beq $326d			beq  	CompareTrue
.324c	4c 70 32	jmp $3270			jmp 	CompareFalse
.324f					CompareNotEquals:
.324f	20 f9 31	jsr $31f9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3252	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3254	d0 17		bne $326d			bne  	CompareTrue
.3256	4c 70 32	jmp $3270			jmp 	CompareFalse
.3259					CompareGreaterEq:
.3259	20 f9 31	jsr $31f9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.325c	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.325e	d0 0d		bne $326d			bne  	CompareTrue
.3260	4c 70 32	jmp $3270			jmp 	CompareFalse
.3263					CompareLessEq:
.3263	20 f9 31	jsr $31f9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3266	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.3268	d0 03		bne $326d			bne  	CompareTrue
.326a	4c 70 32	jmp $3270			jmp 	CompareFalse
.326d					CompareTrue:
.326d	4c e6 3a	jmp $3ae6			jmp 	MInt32True
.3270					CompareFalse:
.3270	4c ea 3a	jmp $3aea			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3273					DereferenceTwo:
.3273	e8		inx				inx
.3274	20 78 32	jsr $3278			jsr 	DereferenceOne
.3277	ca		dex				dex
.3278					DereferenceOne:
.3278	b5 90		lda $90,x			lda 	esType,x
.327a	10 3d		bpl $32b9			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.327c	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.327d	b0 3b		bcs $32ba			bcs 	_DRFloatDeReference
.327f	98		tya				tya
.3280	48		pha				pha
.3281	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3283	85 2a		sta $2a				sta 	temp0
.3285	b5 a0		lda $a0,x			lda 	esInt1,x
.3287	85 2b		sta $2b				sta 	temp0+1
.3289	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.328b	95 a0		sta $a0,x			sta 	esInt1,x
.328d	95 a8		sta $a8,x			sta 	esInt2,x
.328f	95 b0		sta $b0,x			sta 	esInt3,x
.3291	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.3293	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.3295	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.3296	30 0d		bmi $32a5			bmi 	_DeRefString 				; string, 2 bytes only
.3298	d0 11		bne $32ab			bne 	_DeRefByte 					; byte 1 byte only
.329a					_DeRefLong:
.329a	a0 03		ldy #$03			ldy 	#3
.329c	b1 2a		lda ($2a),y			lda 	(temp0),y
.329e	95 b0		sta $b0,x			sta 	esInt3,x
.32a0	88		dey				dey
.32a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.32a3	95 a8		sta $a8,x			sta 	esInt2,x
.32a5					_DeRefString:
.32a5	a0 01		ldy #$01			ldy 	#1
.32a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.32a9	95 a0		sta $a0,x			sta 	esInt1,x
.32ab					_DeRefByte:
.32ab	a0 00		ldy #$00			ldy 	#0
.32ad	b1 2a		lda ($2a),y			lda 	(temp0),y
.32af	95 98		sta $98,x			sta 	esInt0,x
.32b1	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.32b3	29 40		and #$40			and 	#$40
.32b5	95 90		sta $90,x			sta 	esType,x
.32b7	68		pla				pla
.32b8	a8		tay				tay
.32b9					_DRNotReference
.32b9	60		rts				rts
.32ba					_DRFloatDereference:
.32ba	20 42 28	jsr $2842			jsr 	TOSToTemp0 					; address to deref in temp0
.32bd	8a		txa				txa
.32be	a2 1e		ldx #$1e		ldx	#30
.32c0	20 50 23	jsr $2350		jsr	floatingpointHandler
.32c3	aa		tax				tax
.32c4	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.32c6	95 90		sta $90,x			sta 	esType,x
.32c8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.32c9					EvaluateLevel:
.32c9	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.32cb	b0 1e		bcs $32eb			bcs 	_ELStack
.32cd	48		pha				pha 								; save precedence level.
.32ce	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.32d0	95 98		sta $98,x			sta 	esInt0,x
.32d2	95 a0		sta $a0,x			sta 	esInt1,x
.32d4	95 a8		sta $a8,x			sta 	esInt2,x
.32d6	95 b0		sta $b0,x			sta 	esInt3,x
.32d8	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.32da	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.32dc	30 26		bmi $3304			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.32de	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.32df	30 0f		bmi $32f0			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.32e1	8a		txa				txa 								; stack level in X
.32e2	a2 02		ldx #$02		ldx	#2
.32e4	20 e9 4a	jsr $4ae9		jsr	variableHandler
.32e7	aa		tax				tax
.32e8	4c 2d 33	jmp $332d			jmp		_ELHasTerm
.32eb					_ELStack:
.32eb	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.32ed	20 18 15	jsr $1518		jsr	errorHandler
.32f0					_ELIsConstant:
.32f0	4a		lsr a				lsr 	a 							; get the value back
.32f1	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.32f3	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.32f5					_ELCheckNext:
.32f5	c8		iny				iny 								; look at next
.32f6	b1 28		lda ($28),y			lda 	(codePtr),y
.32f8	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.32fa	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.32fc	b0 2f		bcs $332d			bcs 	_ELHasTerm 					; done getting the constant.
.32fe	20 c6 33	jsr $33c6			jsr 	ELShiftByteIn 				; shift byte into position.
.3301	4c f5 32	jmp $32f5			jmp 	_ELCheckNext
.3304					_ELIsToken:
.3304	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3306	f0 0f		beq $3317			beq 	_ELIsString
.3308	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.330a	d0 5f		bne $336b			bne 	_ELCheckUnary
.330c	8a		txa				txa 								; put X into A
.330d	c8		iny				iny 								; skip over the float marker
.330e	a2 1a		ldx #$1a		ldx	#26
.3310	20 50 23	jsr $2350		jsr	floatingpointHandler
.3313	aa		tax				tax 								; restore X
.3314	4c 2d 33	jmp $332d			jmp 	_ELHasTerm
.3317					_ELIsString:
.3317	98		tya				tya 								; address of string is codePtr+y+1
.3318	38		sec				sec
.3319	65 28		adc $28				adc 	codePtr
.331b	95 98		sta $98,x			sta 	esInt0,x
.331d	a5 29		lda $29				lda 	codePtr+1
.331f	69 00		adc #$00			adc 	#0
.3321	95 a0		sta $a0,x			sta 	esInt1,x
.3323	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3325	95 90		sta $90,x			sta 	esType,x
.3327	c8		iny				iny 								; skip over string.
.3328	98		tya				tya
.3329	38		sec				sec									; +1 for the length itself.
.332a	71 28		adc ($28),y			adc 	(codePtr),y
.332c	a8		tay				tay 								; and fall through to term loop code.
.332d					_ELHasTerm:
.332d	b1 28		lda ($28),y			lda 	(codePtr),y
.332f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3331	90 04		bcc $3337			bcc 	_ELPopExit
.3333	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3335	90 02		bcc $3339			bcc 	_ELHasBinaryTerm
.3337					_ELPopExit:
.3337	68		pla				pla
.3338					_ELExit:
.3338	60		rts				rts
.3339					_ELHasBinaryTerm:
.3339	84 32		sty $32				sty 	tempShort 					; save position
.333b	a8		tay				tay 								; use token as an index and get the precedence.
.333c	b9 6e 33	lda $336e,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.333f	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3341	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3343	68		pla				pla 								; restore current level.
.3344	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3346	b0 f0		bcs $3338			bcs 	_ELExit
.3348	48		pha				pha 								; save current level back on the stack.
.3349	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.334b	48		pha				pha
.334c	c8		iny				iny
.334d	e8		inx				inx 								; calculate the RHS at the operator precedence.
.334e	a5 32		lda $32				lda 	tempShort
.3350	20 c9 32	jsr $32c9			jsr 	EvaluateLevel
.3353	ca		dex				dex
.3354	68		pla				pla 								; get the operator back out.
.3355					_ELExecuteA:
.3355	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3357	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.3358	aa		tax				tax
.3359	bd 88 2f	lda $2f88,x			lda 	Group0Vectors,x
.335c	85 2a		sta $2a				sta 	temp0
.335e	bd 89 2f	lda $2f89,x			lda 	Group0Vectors+1,x
.3361	85 2b		sta $2b				sta 	temp0+1
.3363	a6 32		ldx $32				ldx 	tempShort
.3365	20 b2 33	jsr $33b2			jsr 	_ELCallTemp0
.3368	4c 2d 33	jmp $332d			jmp 	_ELHasTerm 					; and loop back round.
.336b					_ELCheckUnary:
.336b	c8		iny				iny 								; skip over token.
.336c	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.336e	f0 19		beq $3389			beq 	_ELMinus
.3370	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3372	f0 2c		beq $33a0			beq 	_ELIndirect
.3374	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3376	f0 28		beq $33a0			beq 	_ELIndirect
.3378	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.337a	f0 39		beq $33b5			beq 	_ELExtension
.337c	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.337e	90 04		bcc $3384			bcc 	_ELUSyntax
.3380	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3382	90 d1		bcc $3355			bcc 	_ELExecuteA 				; if so do that token.
.3384					_ELUSyntax:
.3384	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3386	20 18 15	jsr $1518		jsr	errorHandler
.3389					_ELMinus:
.3389	20 1b 34	jsr $341b			jsr 	EvaluateNumericTerm 		; get a number to negate.
.338c	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.338e	f0 0a		beq $339a			beq 	_ELMinusInteger
.3390	8a		txa				txa
.3391	a2 0e		ldx #$0e		ldx	#14
.3393	20 50 23	jsr $2350		jsr	floatingpointHandler
.3396	aa		tax				tax
.3397	4c 2d 33	jmp $332d			jmp 	_ELHasTerm
.339a					_ELMinusInteger:
.339a	20 a4 3a	jsr $3aa4			jsr 	MInt32Negate 				; do int negate
.339d	4c 2d 33	jmp $332d			jmp 	_ELHasTerm
.33a0					_ELIndirect:
.33a0	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.33a1	20 24 34	jsr $3424			jsr 	EvaluateIntegerTerm 		; integer address
.33a4	68		pla				pla
.33a5	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.33a7	f0 02		beq $33ab			beq 	_ELHaveModifier
.33a9	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.33ab					_ELHaveModifier:
.33ab	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.33ad	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.33af	4c 2d 33	jmp $332d			jmp 	_ELHasTerm
.33b2					_ELCallTemp0:
.33b2	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.33b5					_ELExtension:
.33b5	8a		txa				txa 								; stack pos in A
.33b6	20 69 18	jsr $1869		jsr	extensionHandler
.33b9	aa		tax				tax 								; restore stack
.33ba	4c 2d 33	jmp $332d			jmp 	_ELHasTerm
.33bd					UnaryParenthesis:
.33bd	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.33bf	20 c9 32	jsr $32c9			jsr 	EvaluateLevel
.33c2	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; check for )
.33c5	60		rts				rts
.33c6					ELShiftByteIn:
.33c6	48		pha				pha 								; save bits to shift in.
.33c7	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.33c9	48		pha				pha
.33ca	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.33cc	95 b0		sta $b0,x			sta 	esInt3,x
.33ce	b5 a0		lda $a0,x			lda 	esInt1,x
.33d0	95 a8		sta $a8,x			sta 	esInt2,x
.33d2	b5 98		lda $98,x			lda 	esInt0,x
.33d4	95 a0		sta $a0,x			sta 	esInt1,x
.33d6	a9 00		lda #$00			lda 	#0
.33d8	95 98		sta $98,x			sta 	esInt0,x
.33da	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.33db	29 03		and #$03			and 	#3 							; only want lower 2 bits
.33dd	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.33df					_ELShiftLoop:
.33df	4a		lsr a				lsr 	a
.33e0	76 b0		ror $b0,x			ror 	esInt3,x
.33e2	76 a8		ror $a8,x			ror 	esInt2,x
.33e4	76 a0		ror $a0,x			ror 	esInt1,x
.33e6	76 98		ror $98,x			ror 	esInt0,x
.33e8	c9 01		cmp #$01			cmp 	#1
.33ea	d0 f3		bne $33df			bne 	_ELShiftLoop
.33ec	68		pla				pla 								; get original 6 bit value and OR in.
.33ed	29 3f		and #$3f			and 	#$3F
.33ef	15 98		ora $98,x			ora 	esInt0,x
.33f1	95 98		sta $98,x			sta 	esInt0,x
.33f3	60		rts				rts
.33f4					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>33f4	01					.byte	$01			; $86 and
>33f5	01					.byte	$01			; $87 or
>33f6	01					.byte	$01			; $88 xor
>33f7	02					.byte	$02			; $89 >=
>33f8	02					.byte	$02			; $8a <=
>33f9	02					.byte	$02			; $8b >
>33fa	02					.byte	$02			; $8c <
>33fb	02					.byte	$02			; $8d =
>33fc	02					.byte	$02			; $8e <>
>33fd	03					.byte	$03			; $8f +
>33fe	03					.byte	$03			; $90 -
>33ff	04					.byte	$04			; $91 >>
>3400	04					.byte	$04			; $92 <<
>3401	04					.byte	$04			; $93 *
>3402	04					.byte	$04			; $94 /
>3403	04					.byte	$04			; $95 mod
>3404	05					.byte	$05			; $96 ^
>3405	06					.byte	$06			; $97 !
>3406	06					.byte	$06			; $98 ?
>3407	82					.byte	$82			; $99 repeat
>3408	82					.byte	$82			; $9a while
>3409	82					.byte	$82			; $9b for
>340a	82					.byte	$82			; $9c if
>340b	82					.byte	$82			; $9d defproc
>340c	80					.byte	$80			; $9e until
>340d	80					.byte	$80			; $9f wend
>340e	80					.byte	$80			; $a0 next
>340f	80					.byte	$80			; $a1 then
>3410	80					.byte	$80			; $a2 endif
>3411	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3412					EvaluateTerm:
.3412	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3414	20 c9 32	jsr $32c9			jsr 	EvaluateLevel
.3417	20 78 32	jsr $3278			jsr 	DereferenceOne
.341a	60		rts				rts
.341b					EvaluateNumericTerm:
.341b	20 12 34	jsr $3412			jsr 	EvaluateTerm
.341e	b5 90		lda $90,x			lda 	esType,x
.3420	0a		asl a				asl 	a 							; see if it's a string.
.3421	30 09		bmi $342c			bmi 	ENTType
.3423	60		rts				rts
.3424					EvaluateIntegerTerm:
.3424	20 12 34	jsr $3412			jsr 	EvaluateTerm
.3427	b5 90		lda $90,x			lda 	esType,x
.3429	d0 01		bne $342c			bne 	ENTType
.342b	60		rts				rts
.342c					ENTType:
.342c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.342e	20 18 15	jsr $1518		jsr	errorHandler
.3431					EvaluateRoot:
.3431	a2 00		ldx #$00			ldx 	#0
.3433					Evaluate:
.3433	a9 00		lda #$00			lda 	#0
.3435	20 c9 32	jsr $32c9			jsr 	EvaluateLevel
.3438	20 78 32	jsr $3278			jsr 	DereferenceOne
.343b	60		rts				rts
.343c					EvaluateNumeric:
.343c	20 33 34	jsr $3433			jsr 	Evaluate
.343f	b5 90		lda $90,x			lda 	esType,x
.3441	0a		asl a				asl 	a 							; see if it's a string.
.3442	30 e8		bmi $342c			bmi 	ENTType
.3444	4a		lsr a				lsr 	a 							; shift float flag into carry.
.3445	4a		lsr a				lsr 	a
.3446	60		rts				rts
.3447					EvaluateString:
.3447	20 33 34	jsr $3433			jsr 	Evaluate
.344a	b5 90		lda $90,x			lda 	esType,x
.344c	0a		asl a				asl 	a 							; see if it's a string.
.344d	10 dd		bpl $342c			bpl 	ENTType
.344f	60		rts				rts
.3450					EvaluateRootInteger:
.3450	a2 00		ldx #$00			ldx 	#0
.3452					EvaluateInteger:
.3452	20 33 34	jsr $3433			jsr 	Evaluate
.3455	b5 90		lda $90,x			lda 	esType,x
.3457	d0 d3		bne $342c			bne 	ENTType
.3459	60		rts				rts
.345a					EvaluateSmallInteger:
.345a	20 52 34	jsr $3452			jsr 	EvaluateInteger
.345d	b5 a0		lda $a0,x			lda 	esInt1,x
.345f	15 a8		ora $a8,x			ora 	esInt2,x
.3461	15 b0		ora $b0,x			ora 	esInt3,x
.3463	d0 03		bne $3468			bne 	_ESIValue
.3465	b5 98		lda $98,x			lda 	esInt0,x
.3467	60		rts				rts
.3468					_ESIValue:
.3468	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.346a	20 18 15	jsr $1518		jsr	errorHandler
.346d					LinkEvaluate:
.346d	aa		tax				tax
.346e	20 33 34	jsr $3433			jsr 	Evaluate
.3471	8a		txa				txa
.3472	60		rts				rts
.3473					LinkEvaluateTerm:
.3473	aa		tax				tax
.3474	20 12 34	jsr $3412			jsr 	EvaluateTerm
.3477	8a		txa				txa
.3478	60		rts				rts
.3479					LinkEvaluateInteger:
.3479	aa		tax				tax
.347a	20 52 34	jsr $3452			jsr 	EvaluateInteger
.347d	8a		txa				txa
.347e	60		rts				rts
.347f					LinkEvaluateString:
.347f	aa		tax				tax
.3480	20 47 34	jsr $3447			jsr 	EvaluateString
.3483	8a		txa				txa
.3484	60		rts				rts
.3485					LinkEvaluateSmallInt:
.3485	aa		tax				tax
.3486	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger
.3489	8a		txa				txa
.348a	60		rts				rts
.348b					EvaluateReference:
.348b	ad 05 34	lda $3405			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.348e	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.348f	e9 01		sbc #$01			sbc 	#1
.3491	20 c9 32	jsr $32c9			jsr 	EvaluateLevel
.3494	b5 90		lda $90,x			lda 	esType,x
.3496	10 01		bpl $3499			bpl 	_ERFail
.3498	60		rts				rts
.3499					_ERFail:
.3499	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.349b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.349e					Event_Str:
.349e	20 3c 34	jsr $343c			jsr 	EvaluateNumeric 			; get a number.
.34a1	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.34a3	d0 13		bne $34b8			bne 	_ESFloat
.34a5	20 fb 34	jsr $34fb			jsr 	ConvertGetBase 				; get base, or default.
.34a8	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.34aa	85 2a		sta $2a				sta 	temp0
.34ac	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.34ae	85 2b		sta $2b				sta 	1+(temp0)
.34b0	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.34b2	20 40 3a	jsr $3a40			jsr 	MInt32ToString 				; convert to string.
.34b5	4c c5 34	jmp $34c5			jmp 	_ESCloneExit 				; clone and exit.
.34b8					_ESFloat:
.34b8	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; check closing )
.34bb	20 42 28	jsr $2842			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.34be	8a		txa				txa
.34bf	a2 16		ldx #$16		ldx	#22
.34c1	20 50 23	jsr $2350		jsr	floatingpointHandler
.34c4	aa		tax				tax
.34c5					_ESCloneExit:
.34c5	8a		txa				txa
.34c6	a2 04		ldx #$04		ldx	#4
.34c8	20 95 3e	jsr $3e95		jsr	stringHandler
.34cb	aa		tax				tax
.34cc	60		rts				rts
.34cd					UnaryVal:
.34cd	38		sec				sec 								; Carry set to return value
.34ce	b0 01		bcs $34d1			bcs 	ValueMain
.34d0					UnaryIsVal:
.34d0	18		clc				clc									; Carry clear to return legitimacy
.34d1					ValueMain:
.34d1	08		php				php 								; save results (CS is value, CC is validation)
.34d2	20 47 34	jsr $3447			jsr 	EvaluateString
.34d5	20 fb 34	jsr $34fb			jsr 	ConvertGetBase 				; get base, if any.
.34d8	98		tya				tya
.34d9	48		pha				pha
.34da	20 42 28	jsr $2842			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.34dd	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.34df	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.34e1	20 58 39	jsr $3958			jsr 	MInt32FromString 			; convert it back from a string.
.34e4	b0 0c		bcs $34f2			bcs 	_VMSuccess 					; successfully converted.
.34e6	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.34e8	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.34ea	f0 00		beq $34ec			beq 	_VMFailed 	 				; so we failed.
.34ec					_VMFailed:
.34ec	68		pla				pla
.34ed	a8		tay				tay
.34ee	28		plp				plp
.34ef	4c ea 3a	jmp $3aea			jmp 	MInt32False 				; return 0 whatever.
.34f2					_VMSuccess:
.34f2	68		pla				pla
.34f3	a8		tay				tay
.34f4	28		plp				plp 								; if CS the it was val() so we want the value.
.34f5	b0 03		bcs $34fa			bcs 	_VMExit
.34f7	4c e6 3a	jmp $3ae6			jmp 	MInt32True 					; otherwise return true as successful.
.34fa					_VMExit:
.34fa	60		rts				rts
.34fb					ConvertGetBase:
.34fb	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.34fd	95 99		sta $99,x			sta 	esInt0+1,x
.34ff	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3501	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3503	d0 0e		bne $3513			bne 	_CGBDone 					; not found, should be )
.3505	e8		inx				inx 								; next level
.3506	c8		iny				iny 								; skip comma.
.3507	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger		; evaluate the base.
.350a	ca		dex				dex
.350b	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.350d	90 08		bcc $3517			bcc 	_CGBValue 					; (it should work as high as 37)
.350f	c9 11		cmp #$11			cmp 	#17
.3511	b0 04		bcs $3517			bcs 	_CGBValue
.3513					_CGBDone:
.3513	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.3516	60		rts				rts
.3517					_CGBValue:
.3517	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3519	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.351c					EventFunction:
.351c	20 8b 34	jsr $348b			jsr 	EvaluateReference			; get the variable reference that tracks the event
.351f	b5 90		lda $90,x			lda 	esType,x
.3521	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3523	d0 5b		bne $3580			bne 	_EFType
.3525	20 6a 3b	jsr $3b6a			jsr 	CheckComma
.3528	e8		inx				inx
.3529	20 52 34	jsr $3452			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.352c	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; finish off with the right bracket
.352f	ca		dex				dex
.3530	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3532	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3534	15 a8		ora $a8,x			ora 	esInt2,x
.3536	15 b0		ora $b0,x			ora 	esInt3,x
.3538	d0 41		bne $357b			bne 	_EFValue
.353a	98		tya				tya
.353b	48		pha				pha
.353c	8a		txa				txa
.353d	48		pha				pha
.353e	a2 1c		ldx #$1c		ldx	#28
.3540	20 f6 14	jsr $14f6		jsr	deviceHandler
.3543	84 2d		sty $2d				sty 	temp1+1
.3545	85 2c		sta $2c				sta 	temp1
.3547	68		pla				pla
.3548	aa		tax				tax
.3549	20 42 28	jsr $2842			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.354c	a0 03		ldy #$03			ldy 	#3							; if -ve
.354e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3550	30 23		bmi $3575			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3552	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3554	b1 2a		lda ($2a),y			lda 	(temp0),y
.3556	c8		iny				iny
.3557	11 2a		ora ($2a),y			ora 	(temp0),y
.3559	f0 17		beq $3572			beq 	_EFInitialise 				; if so, initialise the value but return false.
.355b	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.355d	38		sec				sec
.355e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3560	e5 2c		sbc $2c				sbc 	temp1
.3562	c8		iny				iny
.3563	b1 2a		lda ($2a),y			lda 	(temp0),y
.3565	e5 2d		sbc $2d				sbc 	temp1+1
.3567	10 0c		bpl $3575			bpl 	_EFFail 					; if trigger >= timer then return False
.3569	20 85 35	jsr $3585			jsr 	SetEventTimer 				; reset the timer for next time.
.356c	20 e6 3a	jsr $3ae6			jsr	 	MInt32True 					; and treutn true as fired.
.356f	68		pla				pla
.3570	a8		tay				tay
.3571	60		rts				rts
.3572					_EFInitialise:
.3572	20 85 35	jsr $3585			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3575					_EFFail:
.3575	68		pla				pla
.3576	a8		tay				tay
.3577	20 ea 3a	jsr $3aea			jsr 	MInt32False
.357a	60		rts				rts
.357b					_EFValue:
.357b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.357d	20 18 15	jsr $1518		jsr	errorHandler
.3580					_EFType:
.3580	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3582	20 18 15	jsr $1518		jsr	errorHandler
.3585					SetEventTimer:
.3585	a0 00		ldy #$00			ldy 	#0
.3587	18		clc				clc
.3588	a5 2c		lda $2c				lda 	temp1
.358a	75 99		adc $99,x			adc 	esInt0+1,x
.358c	91 2a		sta ($2a),y			sta		(temp0),y
.358e	c8		iny				iny
.358f	a5 2d		lda $2d				lda 	temp1+1
.3591	75 a1		adc $a1,x			adc 	esInt1+1,x
.3593	91 2a		sta ($2a),y			sta		(temp0),y
.3595	88		dey				dey
.3596	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.3598	d0 04		bne $359e			bne 	_SETExit 					; zero means initialise.....
.359a	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.359c	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.359e					_SETExit:
.359e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.359f					UnaryLen:
.359f	20 ad 35	jsr $35ad			jsr 	ULStart
.35a2					ULFinish:
.35a2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.35a4	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.35a6	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit 				; write it out.
.35a9	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.35ac	60		rts				rts
.35ad	20 47 34	jsr $3447	ULStart:jsr 	EvaluateString
.35b0	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.35b2	85 2a		sta $2a				sta 	temp0
.35b4	b5 a0		lda $a0,x			lda 	esInt1,x
.35b6	85 2b		sta $2b				sta 	temp0+1
.35b8	84 32		sty $32				sty 	tempShort 					; get length
.35ba	a0 00		ldy #$00			ldy 	#0
.35bc	60		rts				rts
.35bd					UnaryAsc:
.35bd	20 ad 35	jsr $35ad			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.35c0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.35c2	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.35c3	c9 00		cmp #$00			cmp 	#0
.35c5	d0 db		bne $35a2			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.35c7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.35c9	20 18 15	jsr $1518		jsr	errorHandler
.35cc					UnaryAbs:
.35cc	20 3c 34	jsr $343c			jsr 	EvaluateNumeric 			; some numeric value
.35cf	b0 07		bcs $35d8			bcs 	_UAFloat 					; CS then float, so use that function
.35d1	20 9f 3a	jsr $3a9f			jsr 	MInt32Absolute 				; int version
.35d4	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.35d7	60		rts				rts
.35d8					_UAFloat:
.35d8	8a		txa				txa 								; float version
.35d9	a2 02		ldx #$02		ldx	#2
.35db	20 50 23	jsr $2350		jsr	floatingpointHandler
.35de	aa		tax				tax
.35df	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.35e2	60		rts				rts
.35e3					UnarySgn:
.35e3	20 3c 34	jsr $343c			jsr 	EvaluateNumeric 			; same as above but sign of value
.35e6	b0 07		bcs $35ef			bcs 	_USFloat
.35e8	20 d7 3a	jsr $3ad7			jsr 	MInt32Sign
.35eb	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.35ee	60		rts				rts
.35ef					_USFloat:
.35ef	8a		txa				txa
.35f0	a2 10		ldx #$10		ldx	#16
.35f2	20 50 23	jsr $2350		jsr	floatingpointHandler
.35f5	aa		tax				tax
.35f6	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.35f9	60		rts				rts
.35fa					UnaryPeek:
.35fa	20 26 36	jsr $3626			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.35fd	4c 1a 36	jmp $361a			jmp 	PDLByte0
.3600					UnaryDeek:
.3600	20 26 36	jsr $3626			jsr 	PDLCode
.3603	4c 14 36	jmp $3614			jmp 	PDLByte1
.3606					UnaryLeek:
.3606	20 26 36	jsr $3626			jsr 	PDLCode
.3609	a0 03		ldy #$03			ldy 	#3							; read 3-2
.360b	b1 2a		lda ($2a),y			lda 	(temp0),y
.360d	95 b0		sta $b0,x			sta 	esInt3,x
.360f	88		dey				dey
.3610	b1 2a		lda ($2a),y			lda 	(temp0),y
.3612	95 a8		sta $a8,x			sta 	esInt2,x
.3614					PDLByte1:
.3614	a0 01		ldy #$01			ldy 	#1
.3616	b1 2a		lda ($2a),y			lda 	(temp0),y
.3618	95 a0		sta $a0,x			sta 	esInt1,x
.361a					PDLByte0:
.361a	a0 00		ldy #$00			ldy 	#0
.361c	b1 2a		lda ($2a),y			lda 	(temp0),y
.361e	95 98		sta $98,x			sta 	esInt0,x
.3620	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3622	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; check right and return
.3625	60		rts				rts
.3626					PDLCode:
.3626	20 52 34	jsr $3452			jsr 	EvaluateInteger 			; some address
.3629	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.362b	85 2a		sta $2a				sta 	temp0
.362d	b5 a0		lda $a0,x			lda 	esInt1,x
.362f	85 2b		sta $2b				sta 	temp0+1
.3631	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3633	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3635	95 a8		sta $a8,x			sta 	esInt2,x
.3637	95 b0		sta $b0,x			sta 	esInt3,x
.3639	84 32		sty $32				sty 	tempShort 					; save Y
.363b	60		rts				rts
.363c					Unary_Random:
.363c	20 1a 3b	jsr $3b1a			jsr 	MInt32Random 				; generate random number.
.363f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3641	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3643	f0 08		beq $364d			beq 	_URExit
.3645	e8		inx				inx 								; load range 0..r-1 into +1
.3646	20 52 34	jsr $3452			jsr 	EvaluateInteger
.3649	ca		dex				dex
.364a	20 3d 39	jsr $393d			jsr 	MInt32Modulus 				; calculate random % modulus
.364d					_URExit:
.364d	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; check right and return
.3650	60		rts				rts
.3651					Unary_Min:
.3651	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3653	d0 02		bne $3657			bne 	UnaryMBody
.3655					Unary_Max:
.3655	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3657					UnaryMBody:
.3657	48		pha				pha 								; save comparator on stack, shows min or max
.3658	20 33 34	jsr $3433			jsr 	Evaluate 					; get the first thing to check
.365b					_UnaryMLoop:
.365b	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.365d	c8		iny				iny
.365e	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3660	f0 09		beq $366b			beq 	_UnaryMExit
.3662	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3664	f0 07		beq $366d			beq 	_UnaryMCompare
.3666	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3668	20 18 15	jsr $1518		jsr	errorHandler
.366b					_UnaryMExit:
.366b	68		pla				pla 								; done so throw comparator and return.
.366c	60		rts				rts
.366d					_UnaryMCompare:
.366d	e8		inx				inx 								; get the 2nd thing to evaluate
.366e	20 33 34	jsr $3433			jsr 	Evaluate
.3671	ca		dex				dex
.3672	20 f9 31	jsr $31f9			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3675	85 32		sta $32				sta 	tempShort 					; save result
.3677	68		pla				pla 								; get what we need
.3678	48		pha				pha
.3679	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.367b	d0 de		bne $365b			bne 	_UnaryMLoop 				; no, try another value.
.367d	20 ea 3a	jsr $3aea			jsr 	MInt32False 				; promote 2nd to 1st.
.3680	20 ce 39	jsr $39ce			jsr 	MInt32Add
.3683	4c 5b 36	jmp $365b			jmp 	_UnaryMLoop
.3686					Unary_Page:
.3686	20 ea 3a	jsr $3aea			jsr 	MInt32False 				; zero
.3689	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.368c	95 98		sta $98,x			sta 	esInt0,x
.368e	ad c9 0a	lda $0ac9			lda 	basePage+1
.3691	95 a0		sta $a0,x			sta 	esInt1,x
.3693	60		rts				rts
.3694					UnaryReference:
.3694	a9 0f		lda #$0f			lda 	#15
.3696	20 c9 32	jsr $32c9			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.3699	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.369b	10 05		bpl $36a2			bpl 	UType
.369d	a9 00		lda #$00			lda 	#0 							; make it an integer
.369f	95 90		sta $90,x			sta 	esType,x
.36a1	60		rts				rts
.36a2					UType:
.36a2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.36a4	20 18 15	jsr $1518		jsr	errorHandler
.36a7					UnaryHexMarker:
.36a7	4c 24 34	jmp $3424			jmp 	EvaluateIntegerTerm
.36aa					UnaryComplement:
.36aa	20 24 34	jsr $3424			jsr 	EvaluateIntegerTerm
.36ad	20 be 3a	jsr $3abe			jsr 	MInt32Not
.36b0	60		rts				rts
.36b1					UnaryIntToFloat:
.36b1	20 3c 34	jsr $343c			jsr 	EvaluateNumeric				; some number
.36b4	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.36b6	d0 0b		bne $36c3			bne 	_UIFExit
.36b8	8a		txa				txa 								; convert and set type
.36b9	a2 1c		ldx #$1c		ldx	#28
.36bb	20 50 23	jsr $2350		jsr	floatingpointHandler
.36be	aa		tax				tax
.36bf	a9 01		lda #$01			lda 	#1
.36c1	95 90		sta $90,x			sta 	esType,x
.36c3					_UIFExit:
.36c3	60		rts				rts
.36c4					UnaryFloatToInt:
.36c4	20 3c 34	jsr $343c			jsr 	EvaluateNumeric 			; the number
.36c7	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.36c9	f0 0b		beq $36d6			beq 	_UFIExit
.36cb	8a		txa				txa 								; convert to int
.36cc	a2 14		ldx #$14		ldx	#20
.36ce	20 50 23	jsr $2350		jsr	floatingpointHandler
.36d1	aa		tax				tax
.36d2	a9 00		lda #$00			lda 	#0 							; set type
.36d4	95 90		sta $90,x			sta 	esType,x
.36d6					_UFIExit:
.36d6	60		rts				rts
.36d7					UnaryAlloc:
.36d7	e8		inx				inx 								; evaluate memory required
.36d8	20 52 34	jsr $3452			jsr 	EvaluateInteger
.36db	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.36de	ca		dex				dex
.36df	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.36e1	15 b1		ora $b1,x			ora 	esInt3+1,x
.36e3	d0 1d		bne $3702			bne 	_UABadValue
.36e5	20 ea 3a	jsr $3aea			jsr 	MInt32False					; zero return.
.36e8	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.36ea	95 a0		sta $a0,x			sta 	esInt1,x
.36ec	a5 35		lda $35				lda 	lowMemory
.36ee	95 98		sta $98,x			sta 	esInt0,x
.36f0	18		clc				clc 								; add alloc required.
.36f1	75 99		adc $99,x			adc 	esInt0+1,x
.36f3	85 35		sta $35				sta 	lowMemory
.36f5	a5 36		lda $36				lda 	lowMemory+1
.36f7	75 a1		adc $a1,x			adc 	esInt1+1,x
.36f9	85 36		sta $36				sta 	lowMemory+1
.36fb	b0 05		bcs $3702			bcs		_UABadValue 				; overflow definitely bad.
.36fd	c5 34		cmp $34				cmp 	highMemory+1
.36ff	b0 01		bcs $3702			bcs 	_UABadValue 				; out of memory bad.
.3701	60		rts				rts
.3702					_UABadValue:
.3702	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3704	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3707					UnaryTimer:
.3707	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; no parameters
.370a	98		tya				tya
.370b	48		pha				pha
.370c	20 11 3b	jsr $3b11			jsr 	MInt32Zero 					; zero result
.370f	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3711	a2 1c		ldx #$1c		ldx	#28
.3713	20 f6 14	jsr $14f6		jsr	deviceHandler
.3716	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3718	95 98		sta $98,x			sta 	esInt0,x
.371a	98		tya				tya
.371b	95 a0		sta $a0,x			sta 	esInt1,x
.371d	68		pla				pla
.371e	a8		tay				tay
.371f	60		rts				rts
.3720					UnaryInkey:
.3720	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.3723	86 2a		stx $2a				stx 	temp0
.3725	a2 0a		ldx #$0a		ldx	#10
.3727	20 f6 14	jsr $14f6		jsr	deviceHandler
.372a	a6 2a		ldx $2a				ldx 	temp0
.372c	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit
.372f	60		rts				rts
.3730					UnaryGet:
.3730	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.3733	86 2a		stx $2a				stx 	temp0
.3735					_UGLoop:
.3735	a2 02		ldx #$02		ldx	#2
.3737	20 f6 14	jsr $14f6		jsr	deviceHandler
.373a	a2 0a		ldx #$0a		ldx	#10
.373c	20 f6 14	jsr $14f6		jsr	deviceHandler
.373f	c9 00		cmp #$00			cmp 	#0
.3741	f0 f2		beq $3735			beq 	_UGLoop
.3743	a6 2a		ldx $2a				ldx 	temp0
.3745	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit
.3748	60		rts				rts
.3749					UnaryGetString:
.3749	20 30 37	jsr $3730			jsr 	UnaryGet
.374c					UGSDoChr:
.374c	4c 9d 37	jmp $379d			jmp 	ChrCode
.374f					UnaryInkeyString:
.374f	20 20 37	jsr $3720			jsr 	UnaryInkey
.3752	b5 98		lda $98,x			lda 	esInt0,x
.3754	d0 f6		bne $374c			bne 	UGSDoChr
.3756	8a		txa				txa
.3757	a2 08		ldx #$08		ldx	#8
.3759	20 95 3e	jsr $3e95		jsr	stringHandler
.375c	aa		tax				tax
.375d	60		rts				rts
.375e					UnarySys:
.375e	20 52 34	jsr $3452			jsr 	EvaluateInteger 				; get the address
.3761	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen
.3764	20 42 28	jsr $2842			jsr 	TOSToTemp0 						; copy call address to temp0
.3767	8a		txa				txa
.3768	48		pha				pha
.3769	98		tya				tya
.376a	48		pha				pha
.376b	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.376e	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3771	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3774	20 83 37	jsr $3783			jsr 	_CallTemp0
.3777	85 32		sta $32				sta 	tempShort 						; restore YX
.3779	68		pla				pla
.377a	a8		tay				tay
.377b	68		pla				pla
.377c	aa		tax				tax
.377d	a5 32		lda $32				lda 	tempShort
.377f	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit 					; return result.
.3782	60		rts				rts
.3783					_CallTemp0:
.3783	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3786					UnaryMem:
.3786	20 ea 3a	jsr $3aea			jsr 	MInt32False 					; set to false (e.g. 0)
.3789	38		sec				sec
.378a	a5 33		lda $33				lda 	highMemory 						; calculate value
.378c	e5 35		sbc $35				sbc 	lowMemory
.378e	95 98		sta $98,x			sta 	esInt0,x
.3790	a5 34		lda $34				lda 	highMemory+1
.3792	e5 36		sbc $36				sbc 	lowMemory+1
.3794	95 a0		sta $a0,x			sta 	esInt1,x
.3796	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.3797					ExecChr:
.3797	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger		; character number 0-255
.379a	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen				; right bracket
.379d					ChrCode:
.379d	98		tya				tya
.379e	48		pha				pha
.379f	8a		txa				txa 								; A = stack
.37a0	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.37a2	a2 02		ldx #$02		ldx	#2
.37a4	20 95 3e	jsr $3e95		jsr	stringHandler
.37a7	aa		tax				tax 								; X = stack
.37a8	68		pla				pla
.37a9	a8		tay				tay
.37aa	60		rts				rts
.37ab					ExecLower:
.37ab	38		sec				sec 								; set carry is lower
.37ac	b0 01		bcs $37af			bcs 	ExecUpperLower
.37ae					ExecUpper:
.37ae	18		clc				clc 								; clear carry is upper
.37af					ExecUpperLower:
.37af	08		php				php 								; save carry
.37b0	20 47 34	jsr $3447			jsr 	EvaluateString 				; string to stack,X
.37b3	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; check closing right bracket.
.37b6	28		plp				plp 								; restore carry, save Y
.37b7	98		tya				tya
.37b8	48		pha				pha
.37b9	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.37bb	2a		rol a				rol 	a
.37bc	a8		tay				tay 								; now in Y
.37bd	8a		txa				txa 								; do the substring and exit.
.37be	a2 0c		ldx #$0c		ldx	#12
.37c0	20 95 3e	jsr $3e95		jsr	stringHandler
.37c3	aa		tax				tax
.37c4	68		pla				pla
.37c5	a8		tay				tay
.37c6	60		rts				rts
.37c7					ExecLeft:
.37c7	20 47 34	jsr $3447			jsr 	EvaluateString 				; string to stack,X
.37ca	20 6a 3b	jsr $3b6a			jsr 	CheckComma
.37cd	e8		inx				inx
.37ce	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.37d0	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit
.37d3	e8		inx				inx
.37d4	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.37d7					ExecSubstring:
.37d7	ca		dex				dex 								; fix up X
.37d8	ca		dex				dex
.37d9	20 5d 3b	jsr $3b5d			jsr 	CheckRightParen 			; check closing right bracket.
.37dc	8a		txa				txa 								; do the substring and exit.
.37dd	a2 0e		ldx #$0e		ldx	#14
.37df	20 95 3e	jsr $3e95		jsr	stringHandler
.37e2	aa		tax				tax
.37e3	60		rts				rts
.37e4					ExecMid:
.37e4	20 47 34	jsr $3447			jsr 	EvaluateString 				; string to stack,X
.37e7	20 6a 3b	jsr $3b6a			jsr 	CheckComma
.37ea	e8		inx				inx
.37eb	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.37ee	c9 00		cmp #$00			cmp 	#0
.37f0	f0 15		beq $3807			beq 	_EMValue
.37f2	e8		inx				inx
.37f3	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.37f5	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit
.37f8	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.37fa	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.37fc	f0 d9		beq $37d7			beq 	ExecSubString
.37fe	20 6a 3b	jsr $3b6a			jsr 	CheckComma
.3801	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3804	4c d7 37	jmp $37d7			jmp 	ExecSubString
.3807					_EMValue:
.3807	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3809	20 18 15	jsr $1518		jsr	errorHandler
.380c					ExecRight:
.380c	20 47 34	jsr $3447			jsr 	EvaluateString 				; string to stack,X
.380f	20 6a 3b	jsr $3b6a			jsr 	CheckComma
.3812	e8		inx				inx
.3813	20 5a 34	jsr $345a			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3816	ca		dex				dex
.3817	98		tya				tya
.3818	48		pha				pha
.3819	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.381b	85 2a		sta $2a				sta 	temp0
.381d	b5 a0		lda $a0,x			lda 	esInt1,x
.381f	85 2b		sta $2b				sta 	temp0+1
.3821	a0 00		ldy #$00			ldy 	#0 							; point to length
.3823	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3825	18		clc				clc 								; add 1.
.3826	69 01		adc #$01			adc 	#1
.3828	38		sec				sec
.3829	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.382b	f0 02		beq $382f			beq		_ERMake1 					; if zero, make it 1.
.382d	b0 02		bcs $3831			bcs		_EROkay
.382f					_ERMake1:
.382f	a9 01		lda #$01			lda 	#1 							; start position.
.3831					_EROkay:
.3831	e8		inx				inx 								; set start pos.
.3832	95 98		sta $98,x			sta 	esInt0,x
.3834	e8		inx				inx
.3835	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3837	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit
.383a	68		pla				pla
.383b	a8		tay				tay
.383c	4c d7 37	jmp $37d7			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.383f					MInt32And:
.383f	b5 98		lda $98,x			lda 	esInt0,x
.3841	35 99		and $99,x			and 	esInt0+1,x
.3843	95 98		sta $98,x			sta 	esInt0,x
.3845	b5 a0		lda $a0,x			lda 	esInt1,x
.3847	35 a1		and $a1,x			and 	esInt1+1,x
.3849	95 a0		sta $a0,x			sta 	esInt1,x
.384b	b5 a8		lda $a8,x			lda 	esInt2,x
.384d	35 a9		and $a9,x			and 	esInt2+1,x
.384f	95 a8		sta $a8,x			sta 	esInt2,x
.3851	b5 b0		lda $b0,x			lda 	esInt3,x
.3853	35 b1		and $b1,x			and 	esInt3+1,x
.3855	95 b0		sta $b0,x			sta 	esInt3,x
.3857	60		rts				rts
.3858					MInt32Or:
.3858	b5 98		lda $98,x			lda 	esInt0,x
.385a	15 99		ora $99,x			ora 	esInt0+1,x
.385c	95 98		sta $98,x			sta 	esInt0,x
.385e	b5 a0		lda $a0,x			lda 	esInt1,x
.3860	15 a1		ora $a1,x			ora 	esInt1+1,x
.3862	95 a0		sta $a0,x			sta 	esInt1,x
.3864	b5 a8		lda $a8,x			lda 	esInt2,x
.3866	15 a9		ora $a9,x			ora 	esInt2+1,x
.3868	95 a8		sta $a8,x			sta 	esInt2,x
.386a	b5 b0		lda $b0,x			lda 	esInt3,x
.386c	15 b1		ora $b1,x			ora 	esInt3+1,x
.386e	95 b0		sta $b0,x			sta 	esInt3,x
.3870	60		rts				rts
.3871					MInt32Xor:
.3871	b5 98		lda $98,x			lda 	esInt0,x
.3873	55 99		eor $99,x			eor 	esInt0+1,x
.3875	95 98		sta $98,x			sta 	esInt0,x
.3877	b5 a0		lda $a0,x			lda 	esInt1,x
.3879	55 a1		eor $a1,x			eor 	esInt1+1,x
.387b	95 a0		sta $a0,x			sta 	esInt1,x
.387d	b5 a8		lda $a8,x			lda 	esInt2,x
.387f	55 a9		eor $a9,x			eor 	esInt2+1,x
.3881	95 a8		sta $a8,x			sta 	esInt2,x
.3883	b5 b0		lda $b0,x			lda 	esInt3,x
.3885	55 b1		eor $b1,x			eor 	esInt3+1,x
.3887	95 b0		sta $b0,x			sta 	esInt3,x
.3889	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.388a					MInt32Compare:
.388a	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.388c	d5 99		cmp $99,x			cmp 	esInt0+1,x
.388e	d0 13		bne $38a3			bne 	MInt32Compare2
.3890	b5 a0		lda $a0,x			lda 	esInt1,x
.3892	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.3894	d0 0d		bne $38a3			bne 	MInt32Compare2
.3896	b5 a8		lda $a8,x			lda 	esInt2,x
.3898	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.389a	d0 07		bne $38a3			bne 	MInt32Compare2
.389c	b5 b0		lda $b0,x			lda 	esInt3,x
.389e	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.38a0	d0 01		bne $38a3			bne 	MInt32Compare2
.38a2	60		rts				rts
.38a3					MInt32Compare2:
.38a3	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.38a5	d5 99		cmp $99,x			cmp 	esInt0+1,x
.38a7	b5 a0		lda $a0,x			lda		esInt1,x
.38a9	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.38ab	b5 a8		lda $a8,x			lda		esInt2,x
.38ad	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.38af	b5 b0		lda $b0,x			lda		esInt3,x
.38b1	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.38b3	50 02		bvc $38b7			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.38b5	49 80		eor #$80			eor 	#$80
.38b7					_I32LNoOverflow
.38b7	30 03		bmi $38bc			bmi 	MInt32CLess					; if -ve then return $FF
.38b9	a9 01		lda #$01			lda 	#$01						; else return $01
.38bb	60		rts				rts
.38bc					MInt32CLess:
.38bc	a9 ff		lda #$ff			lda 	#$FF
.38be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.38bf					MInt32SDivide:
.38bf	98		tya				tya  								; save Y, which is the count of negations
.38c0	48		pha				pha
.38c1	a0 00		ldy #$00			ldy 	#0 							; zero count
.38c3	20 db 38	jsr $38db			jsr 	_MInt32SRemSign 			; unsign TOS
.38c6	e8		inx				inx 								; unsign TOS+1
.38c7	20 db 38	jsr $38db			jsr 	_MInt32SRemSign
.38ca	ca		dex				dex
.38cb	98		tya				tya 								; save sign count on stack
.38cc	48		pha				pha
.38cd	20 e4 38	jsr $38e4			jsr 	MInt32UDivide 				; unsigned division
.38d0	68		pla				pla 								; get sign count back
.38d1	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.38d3	f0 03		beq $38d8			beq 	_I32SNoNeg
.38d5	20 a4 3a	jsr $3aa4			jsr 	MInt32Negate
.38d8					_I32SNoNeg:
.38d8	68		pla				pla 								; restoe Y and exit
.38d9	a8		tay				tay
.38da	60		rts				rts
.38db					_MInt32SRemSign:
.38db	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.38dd	10 04		bpl $38e3			bpl 	_MInt32SRSExit
.38df	c8		iny				iny 								; increment the sign count
.38e0	20 a4 3a	jsr $3aa4			jsr 	MInt32Negate 				; negate the value.
.38e3					_MInt32SRSExit:
.38e3	60		rts				rts
.38e4					MInt32UDivide:
.38e4	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.38e6	15 a1		ora $a1,x			ora 	esInt1+1,x
.38e8	15 a2		ora $a2,x			ora 	esInt1+2,x
.38ea	15 a3		ora $a3,x			ora 	esInt1+3,x
.38ec	f0 4a		beq $3938			beq 	_MInt32DZero
.38ee	e8		inx				inx 								; clear A
.38ef	e8		inx				inx
.38f0	20 ea 3a	jsr $3aea			jsr 	MInt32False
.38f3	ca		dex				dex
.38f4	ca		dex				dex
.38f5	98		tya				tya 								; save Y on the stack
.38f6	48		pha				pha
.38f7	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.38f9					_MInt32UDLoop:
.38f9	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.38fb	36 a0		rol $a0,x			rol 	esInt1,x
.38fd	36 a8		rol $a8,x			rol 	esInt2,x
.38ff	36 b0		rol $b0,x			rol 	esInt3,x
.3901	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3903	36 a2		rol $a2,x			rol 	esInt1+2,x
.3905	36 aa		rol $aa,x			rol 	esInt2+2,x
.3907	36 b2		rol $b2,x			rol 	esInt3+2,x
.3909	38		sec				sec 								; calculate A-M saving result on the stack
.390a	b5 9a		lda $9a,x			lda 	esInt0+2,x
.390c	f5 99		sbc $99,x			sbc 	esInt0+1,x
.390e	48		pha				pha
.390f	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3911	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3913	48		pha				pha
.3914	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3916	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3918	48		pha				pha
.3919	b5 b2		lda $b2,x			lda 	esInt3+2,x
.391b	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.391d	90 10		bcc $392f			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.391f	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3921	68		pla				pla
.3922	95 aa		sta $aa,x			sta 	esInt2+2,x
.3924	68		pla				pla
.3925	95 a2		sta $a2,x			sta 	esInt1+2,x
.3927	68		pla				pla
.3928	95 9a		sta $9a,x			sta 	esInt0+2,x
.392a	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.392c	4c 32 39	jmp $3932			jmp 	_MInt32Next 					; do the next iteration
.392f					_MInt32NoSubtract:
.392f	68		pla				pla
.3930	68		pla				pla
.3931	68		pla				pla
.3932					_MInt32Next:
.3932	88		dey				dey 								; do this 32 times.
.3933	d0 c4		bne $38f9			bne 	_MInt32UDLoop
.3935	68		pla				pla 								; restore Y and exit
.3936	a8		tay				tay
.3937	60		rts				rts
.3938					_MInt32DZero:
.3938	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.393a	20 18 15	jsr $1518		jsr	errorHandler
.393d					MInt32Modulus:
.393d	20 e4 38	jsr $38e4			jsr 	MInt32UDivide 				; do the division.
.3940	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3942	95 b0		sta $b0,x			sta 	esInt3,x
.3944	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3946	95 a8		sta $a8,x			sta 	esInt2,x
.3948	b5 a2		lda $a2,x			lda 	esInt1+2,x
.394a	95 a0		sta $a0,x			sta 	esInt1,x
.394c	b5 9a		lda $9a,x			lda 	esInt0+2,x
.394e	95 98		sta $98,x			sta 	esInt0,x
.3950	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d06					fs32Length:
>0d06							.fill 	1
.3951					LinkInt32FromString:
.3951	aa		tax				tax
.3952	98		tya				tya
.3953	20 58 39	jsr $3958			jsr 	MInt32FromString
.3956	8a		txa				txa
.3957	60		rts				rts
.3958					MInt32FromString:
.3958	85 32		sta $32				sta 	tempShort 					; save base
.395a	98		tya				tya
.395b	48		pha				pha
.395c	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.395e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3960	8d 06 0d	sta $0d06			sta 	fs32Length
.3963	f0 65		beq $39ca			beq 	_I32FSFail2					; fail if length zero.
.3965	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3967	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.3969	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.396b	d0 09		bne $3976			bne 	_I32FSNotNegative
.396d	ad 06 0d	lda $0d06			lda 	fs32Length 					; get length back.
.3970	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3972	f0 56		beq $39ca			beq 	_I32FSFail2
.3974	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3976					_I32FSNotNegative:
.3976	a5 32		lda $32				lda 	tempShort 					; get the base back.
.3978	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.397a	d0 02		bne $397e			bne 	_I32FSNN2
.397c	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.397e					_I32FSNN2:
.397e	48		pha				pha 								; save base + final sign on stack.
.397f	20 ea 3a	jsr $3aea			jsr 	MInt32False 				; zero the return value.
.3982					_I32FSMainLoop:
.3982	68		pla				pla 								; get the base back into tempShort
.3983	48		pha				pha
.3984	29 7f		and #$7f			and 	#$7F
.3986	85 32		sta $32				sta 	tempShort
.3988	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.398a	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.398c	90 02		bcc $3990			bcc 	_I32FSNotLC
.398e	e9 20		sbc #$20			sbc 	#32
.3990					_I32FSNotLC:
.3990	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.3991	e9 30		sbc #$30			sbc 	#"0"
.3993	90 34		bcc $39c9			bcc 	_I32FSFail 					; nothing more to do.
.3995	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.3997	90 06		bcc $399f			bcc 	_I32FSValidate
.3999	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.399b	90 2c		bcc $39c9			bcc 	_I32FSFail
.399d	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.399f					_I32FSValidate:
.399f	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.39a1	b0 26		bcs $39c9			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.39a3	48		pha				pha 								; save the new digit value.
.39a4	e8		inx				inx 								; put base into next slot up on stack
.39a5	a5 32		lda $32				lda 	tempShort
.39a7	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit
.39aa	ca		dex				dex
.39ab	20 02 3a	jsr $3a02			jsr 	MInt32Multiply 				; multiply current by the base
.39ae	e8		inx				inx
.39af	68		pla				pla  								; put additive into next slot
.39b0	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit
.39b3	ca		dex				dex
.39b4	20 ce 39	jsr $39ce			jsr 	MInt32Add 					; and add it
.39b7	c8		iny				iny 								; bump the character pointer
.39b8	cc 06 0d	cpy $0d06			cpy 	fs32Length 					; until > length.
.39bb	f0 c5		beq $3982			beq 	_I32FSMainLoop
.39bd	90 c3		bcc $3982			bcc 	_I32FSMainLoop
.39bf					_I32FSDone:
.39bf	68		pla				pla 								; get base/final sign back
.39c0	10 03		bpl $39c5			bpl 	_I32FSNN3
.39c2	20 a4 3a	jsr $3aa4			jsr 	MInt32Negate 				; negate the result.
.39c5					_I32FSNN3:
.39c5	68		pla				pla
.39c6	a8		tay				tay
.39c7	38		sec				sec
.39c8	60		rts				rts
.39c9					_I32FSFail:
.39c9	68		pla				pla
.39ca					_I32FSFail2:
.39ca	68		pla				pla
.39cb	a8		tay				tay
.39cc	18		clc				clc
.39cd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.39ce					MInt32Add:
.39ce	18		clc				clc
.39cf	b5 98		lda $98,x			lda 	esInt0,x
.39d1	75 99		adc $99,x			adc 	esInt0+1,x
.39d3	95 98		sta $98,x			sta 	esInt0,x
.39d5	b5 a0		lda $a0,x			lda 	esInt1,x
.39d7	75 a1		adc $a1,x			adc 	esInt1+1,x
.39d9	95 a0		sta $a0,x			sta 	esInt1,x
.39db	b5 a8		lda $a8,x			lda 	esInt2,x
.39dd	75 a9		adc $a9,x			adc 	esInt2+1,x
.39df	95 a8		sta $a8,x			sta 	esInt2,x
.39e1	b5 b0		lda $b0,x			lda 	esInt3,x
.39e3	75 b1		adc $b1,x			adc 	esInt3+1,x
.39e5	95 b0		sta $b0,x			sta 	esInt3,x
.39e7	60		rts				rts
.39e8					MInt32Sub:
.39e8	38		sec				sec
.39e9	b5 98		lda $98,x			lda 	esInt0,x
.39eb	f5 99		sbc $99,x			sbc 	esInt0+1,x
.39ed	95 98		sta $98,x			sta 	esInt0,x
.39ef	b5 a0		lda $a0,x			lda 	esInt1,x
.39f1	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.39f3	95 a0		sta $a0,x			sta 	esInt1,x
.39f5	b5 a8		lda $a8,x			lda 	esInt2,x
.39f7	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.39f9	95 a8		sta $a8,x			sta 	esInt2,x
.39fb	b5 b0		lda $b0,x			lda 	esInt3,x
.39fd	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.39ff	95 b0		sta $b0,x			sta 	esInt3,x
.3a01	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3a02					MInt32Multiply:
.3a02	e8		inx				inx 								; copy 2nd -> 3rd
.3a03	20 28 3a	jsr $3a28			jsr 	MInt32CopyUp
.3a06	ca		dex				dex
.3a07	20 28 3a	jsr $3a28			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3a0a	20 ea 3a	jsr $3aea			jsr 	MInt32False 				; zero 1st.
.3a0d					_I32Loop:
.3a0d	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3a0f	29 01		and #$01			and 	#1
.3a11	f0 03		beq $3a16			beq 	_I32NoAdd 					; if set
.3a13	20 ce 39	jsr $39ce			jsr 	MInt32Add 					; add 2nd to 1st.
.3a16					_I32NoAdd:
.3a16	e8		inx				inx 								; shift 2nd left
.3a17	20 ff 3a	jsr $3aff			jsr 	MInt32ShiftLeft
.3a1a	e8		inx				inx  								; shift 3rd right
.3a1b	20 08 3b	jsr $3b08			jsr 	MInt32ShiftRight
.3a1e	20 11 3b	jsr $3b11			jsr 	MInt32Zero 					; check if zero.
.3a21	08		php				php 								; save status bits
.3a22	ca		dex				dex 	 							; point back to 1st
.3a23	ca		dex				dex
.3a24	28		plp				plp 								; get status bits
.3a25	d0 e6		bne $3a0d			bne 	_I32Loop 					; if non-zero keep going.
.3a27	60		rts				rts
.3a28					MInt32CopyUp:
.3a28	b5 98		lda $98,x			lda 	esInt0,x
.3a2a	95 99		sta $99,x			sta 	esInt0+1,x
.3a2c	b5 a0		lda $a0,x			lda 	esInt1,x
.3a2e	95 a1		sta $a1,x			sta 	esInt1+1,x
.3a30	b5 a8		lda $a8,x			lda 	esInt2,x
.3a32	95 a9		sta $a9,x			sta 	esInt2+1,x
.3a34	b5 b0		lda $b0,x			lda 	esInt3,x
.3a36	95 b1		sta $b1,x			sta 	esInt3+1,x
.3a38	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d07					MCharCount:	.fill 	1						; count of converted characters
.3a39					MLInt32ToString:
.3a39	aa		tax				tax									; module passes stack in A, base in Y
.3a3a	98		tya				tya
.3a3b	20 40 3a	jsr $3a40			jsr 	MInt32ToString
.3a3e	8a		txa				txa
.3a3f	60		rts				rts
.3a40					MInt32ToString:
.3a40	48		pha				pha 								; save base
.3a41	85 32		sta $32				sta 	tempShort 					; save target base.
.3a43	a9 00		lda #$00			lda 	#0
.3a45	8d 07 0d	sta $0d07			sta 	MCharCount 					; clear character count to 0
.3a48	98		tya				tya
.3a49	48		pha				pha
.3a4a	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3a4c	10 10		bpl $3a5e			bpl 	_I32TSUnsigned
.3a4e	48		pha				pha 								; save base on stack.
.3a4f	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3a51	10 08		bpl $3a5b			bpl 	_I32TSNoFlip
.3a53	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3a55	20 91 3a	jsr $3a91			jsr 	MI32WriteCharacter
.3a58	20 a4 3a	jsr $3aa4			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3a5b					_I32TSNoFlip:
.3a5b	68		pla				pla 								; get the base back
.3a5c	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3a5e					_I32TSUnsigned:
.3a5e	20 6c 3a	jsr $3a6c			jsr 	MI32DivideWrite 			; recursive code to output string.
.3a61	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3a63	ad 07 0d	lda $0d07			lda 	MCharCount
.3a66	91 2a		sta ($2a),y			sta 	(temp0),y
.3a68	68		pla				pla
.3a69	a8		tay				tay
.3a6a	68		pla				pla
.3a6b	60		rts				rts
.3a6c					MI32DivideWrite:
.3a6c	48		pha				pha 								; save the divisor/base
.3a6d	e8		inx				inx 								; write in the dividing position.
.3a6e	20 f9 3a	jsr $3af9			jsr 	MInt32Set8Bit
.3a71	ca		dex				dex
.3a72	20 e4 38	jsr $38e4			jsr 	MInt32UDivide 				; divide number by base.
.3a75	68		pla				pla 								; get the base into Y
.3a76	a8		tay				tay
.3a77	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3a79	48		pha				pha
.3a7a	20 11 3b	jsr $3b11			jsr 	MInt32Zero 					; is the result zero ?
.3a7d	f0 04		beq $3a83			beq 	_I32NoRecurse 				; if so, don't recurse.
.3a7f	98		tya				tya 								; put base into A
.3a80	20 6c 3a	jsr $3a6c			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3a83					_I32NoRecurse:
.3a83	68		pla				pla 								; get the remainder back
.3a84	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3a86	90 02		bcc $3a8a			bcc 	_I32NotHex
.3a88	69 06		adc #$06			adc 	#7-1
.3a8a					_I32NotHex:
.3a8a	18		clc				clc 								; make it ASCII
.3a8b	69 30		adc #$30			adc 	#48
.3a8d	20 91 3a	jsr $3a91			jsr 	MI32WriteCharacter 			; write the character out
.3a90	60		rts				rts 								; and exit.
.3a91					MI32WriteCharacter:
.3a91	ee 07 0d	inc $0d07			inc 	MCharCount 					; bump count (space for leading count)
.3a94	ac 07 0d	ldy $0d07			ldy 	MCharCount 					; get position
.3a97	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3a99	c8		iny				iny
.3a9a	a9 00		lda #$00			lda 	#0
.3a9c	91 2a		sta ($2a),y			sta 	(temp0),y
.3a9e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d08					MSeed32:	.fill 	4							; random number seed.
.3a9f					MInt32Absolute:
.3a9f	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3aa1	30 01		bmi $3aa4			bmi 	MInt32Negate
.3aa3	60		rts				rts
.3aa4					MInt32Negate:
.3aa4	38		sec				sec 								; subtract from zero.
.3aa5	a9 00		lda #$00			lda 	#0
.3aa7	f5 98		sbc $98,x			sbc 	esInt0,x
.3aa9	95 98		sta $98,x			sta 	esInt0,x
.3aab	a9 00		lda #$00			lda 	#0
.3aad	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3aaf	95 a0		sta $a0,x			sta 	esInt1,x
.3ab1	a9 00		lda #$00			lda 	#0
.3ab3	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3ab5	95 a8		sta $a8,x			sta 	esInt2,x
.3ab7	a9 00		lda #$00			lda 	#0
.3ab9	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3abb	95 b0		sta $b0,x			sta 	esInt3,x
.3abd	60		rts				rts
.3abe					MInt32Not:
.3abe	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3ac0	49 ff		eor #$ff			eor 	#$FF
.3ac2	95 98		sta $98,x			sta 	esInt0,x
.3ac4	b5 a0		lda $a0,x			lda 	esInt1,x
.3ac6	49 ff		eor #$ff			eor 	#$FF
.3ac8	95 a0		sta $a0,x			sta 	esInt1,x
.3aca	b5 a8		lda $a8,x			lda 	esInt2,x
.3acc	49 ff		eor #$ff			eor 	#$FF
.3ace	95 a8		sta $a8,x			sta 	esInt2,x
.3ad0	b5 b0		lda $b0,x			lda 	esInt3,x
.3ad2	49 ff		eor #$ff			eor 	#$FF
.3ad4	95 b0		sta $b0,x			sta 	esInt3,x
.3ad6	60		rts				rts
.3ad7					MInt32Sign:
.3ad7	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3ad9	30 0b		bmi $3ae6			bmi 	MInt32True 					; if set return -1 (true)
.3adb	20 11 3b	jsr $3b11			jsr 	MInt32Zero 					; is it zero ?
.3ade	f0 0a		beq $3aea			beq 	MInt32False 				; if zero return 0 (false)
.3ae0	20 ea 3a	jsr $3aea			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3ae3	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3ae5	60		rts				rts
.3ae6					MInt32True:
.3ae6	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3ae8	d0 02		bne $3aec			bne 	MInt32WriteAll
.3aea					MInt32False:
.3aea	a9 00		lda #$00			lda 	#0
.3aec					MInt32WriteAll:
.3aec	95 98		sta $98,x			sta 	esInt0,x
.3aee					MInt32Write123:
.3aee	95 a0		sta $a0,x			sta 	esInt1,x
.3af0	95 a8		sta $a8,x			sta 	esInt2,x
.3af2	95 b0		sta $b0,x			sta 	esInt3,x
.3af4	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3af6	95 90		sta $90,x			sta 	esType,x
.3af8	60		rts				rts
.3af9					MInt32Set8Bit:
.3af9	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3afb	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3afd	f0 ef		beq $3aee			beq		MInt32Write123
.3aff					MInt32ShiftLeft:
.3aff	16 98		asl $98,x			asl 	esInt0,x
.3b01	36 a0		rol $a0,x			rol	 	esInt1,x
.3b03	36 a8		rol $a8,x			rol	 	esInt2,x
.3b05	36 b0		rol $b0,x			rol	 	esInt3,x
.3b07	60		rts				rts
.3b08					MInt32ShiftRight:
.3b08	56 b0		lsr $b0,x			lsr 	esInt3,x
.3b0a	76 a8		ror $a8,x			ror 	esInt2,x
.3b0c	76 a0		ror $a0,x			ror 	esInt1,x
.3b0e	76 98		ror $98,x			ror 	esInt0,x
.3b10	60		rts				rts
.3b11					MInt32Zero:
.3b11	b5 98		lda $98,x			lda 	esInt0,x
.3b13	15 a0		ora $a0,x			ora 	esInt1,x
.3b15	15 a8		ora $a8,x			ora 	esInt2,x
.3b17	15 b0		ora $b0,x			ora 	esInt3,x
.3b19	60		rts				rts
.3b1a					MInt32Random:
.3b1a	98		tya				tya
.3b1b	48		pha				pha
.3b1c	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3b1e	ad 08 0d	lda $0d08			lda 	MSeed32+0 					; check the seed isn't zero
.3b21	d0 03		bne $3b26			bne 	_Random1
.3b23	a8		tay				tay 								; if so do it 256 times
.3b24	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3b26					_Random1:
.3b26	0a		asl a				asl 	a
.3b27	2e 09 0d	rol $0d09			rol 	MSeed32+1
.3b2a	2e 0a 0d	rol $0d0a			rol 	MSeed32+2
.3b2d	2e 0b 0d	rol $0d0b			rol 	MSeed32+3
.3b30	90 02		bcc $3b34			bcc 	_Random2
.3b32	49 c5		eor #$c5			eor 	#$C5
.3b34					_Random2:
.3b34	88		dey				dey
.3b35	d0 ef		bne $3b26			bne 	_Random1
.3b37	8d 08 0d	sta $0d08			sta 	MSeed32+0 					; copy the seed in.
.3b3a	95 98		sta $98,x			sta 	esInt0,x
.3b3c	ad 09 0d	lda $0d09			lda 	MSeed32+1
.3b3f	95 a0		sta $a0,x			sta 	esInt1,x
.3b41	ad 0a 0d	lda $0d0a			lda 	MSeed32+2
.3b44	95 a8		sta $a8,x			sta 	esInt2,x
.3b46	ad 0b 0d	lda $0d0b			lda 	MSeed32+3
.3b49	95 b0		sta $b0,x			sta 	esInt3,x
.3b4b	68		pla				pla
.3b4c	a8		tay				tay
.3b4d	a9 00		lda #$00			lda 	#0
.3b4f	95 90		sta $90,x			sta 	esType,x
.3b51	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3b52					CheckToken:
.3b52	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3b54	d0 02		bne $3b58			bne 	_CTError
.3b56	c8		iny				iny
.3b57	60		rts				rts
.3b58					_CTError:
.3b58	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3b5a	20 18 15	jsr $1518		jsr	errorHandler
.3b5d					CheckRightParen:
.3b5d	b1 28		lda ($28),y			lda 	(codePtr),y
.3b5f	c8		iny				iny
.3b60	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3b62	d0 01		bne $3b65			bne 	_CRPError
.3b64	60		rts				rts
.3b65					_CRPError:
.3b65	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3b67	20 18 15	jsr $1518		jsr	errorHandler
.3b6a					CheckComma:
.3b6a	b1 28		lda ($28),y			lda 	(codePtr),y
.3b6c	c8		iny				iny
.3b6d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3b6f	d0 01		bne $3b72			bne 	_CCError
.3b71	60		rts				rts
.3b72					_CCError:
.3b72	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3b74	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3b77					RSReset:
.3b77	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3b79	85 37		sta $37				sta 	rsPointer
.3b7b	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3b7d	85 38		sta $38				sta 	1+(rsPointer)
.3b7f	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3b81	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3b84	60		rts				rts
.3b85					RSClaim:
.3b85	84 32		sty $32				sty 	tempShort 					; preserve Y
.3b87	48		pha				pha 								; save marker on stack.
.3b88	8a		txa				txa 								; get bytes required.
.3b89	38		sec				sec
.3b8a	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3b8c	65 37		adc $37				adc 	rsPointer
.3b8e	85 37		sta $37				sta 	rsPointer
.3b90	a5 38		lda $38				lda 	rsPointer+1
.3b92	69 ff		adc #$ff			adc 	#$FF
.3b94	85 38		sta $38				sta 	rsPointer+1
.3b96	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3b98	90 08		bcc $3ba2			bcc 	_RSCOverflow
.3b9a	68		pla				pla 								; get marker back
.3b9b	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3b9d	91 37		sta ($37),y			sta 	(rsPointer),y
.3b9f	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3ba1	60		rts				rts
.3ba2					_RSCOverflow:
.3ba2	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3ba4	20 18 15	jsr $1518		jsr	errorHandler
.3ba7					RSFree:
.3ba7	18		clc				clc
.3ba8	65 37		adc $37				adc 	rsPointer
.3baa	85 37		sta $37				sta 	rsPointer
.3bac	90 02		bcc $3bb0			bcc 	_RSFExit
.3bae	e6 38		inc $38				inc 	rsPointer+1
.3bb0					_RSFExit:
.3bb0	60		rts				rts
.3bb1					RSSavePosition:
.3bb1	84 32		sty $32				sty 	tempShort 					; save Y position
.3bb3	a8		tay				tay 								; this is where we write it.
.3bb4	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3bb6	91 37		sta ($37),y			sta 	(rsPointer),y
.3bb8	c8		iny				iny
.3bb9	a5 29		lda $29				lda 	codePtr+1
.3bbb	91 37		sta ($37),y			sta 	(rsPointer),y
.3bbd	c8		iny				iny
.3bbe	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3bc0	91 37		sta ($37),y			sta 	(rsPointer),y
.3bc2	a8		tay				tay 								; fix Y back again to original value
.3bc3	60		rts				rts
.3bc4					RSLoadPosition:
.3bc4	a8		tay				tay
.3bc5	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3bc7	85 28		sta $28				sta 	codePtr
.3bc9	c8		iny				iny
.3bca	b1 37		lda ($37),y			lda 	(rsPointer),y
.3bcc	85 29		sta $29				sta 	codePtr+1
.3bce	c8		iny				iny
.3bcf	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3bd1	a8		tay				tay 								; to Y
.3bd2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3bd3					WarmStart:
.3bd3	a2 04		ldx #$04		ldx	#4
.3bd5	20 3c 25	jsr $253c		jsr	interactionHandler

;******  Return to file: main/main.asm

.3bd8					mainHandler:
.3bd8	7c db 3b	jmp ($3bdb,x)			jmp 	(mainVectors,x)
.3bdb					mainVectors:
>3bdb	f7 3b					.word _DummyControlHandler ; index 0
>3bdd	6a 3b					.word CheckComma           ; index 2
>3bdf	5d 3b					.word CheckRightParen      ; index 4
>3be1	44 2d					.word XCommandClear        ; index 6
>3be3	6d 34					.word LinkEvaluate         ; index 8
>3be5	79 34					.word LinkEvaluateInteger  ; index 10
>3be7	85 34					.word LinkEvaluateSmallInt ; index 12
>3be9	7f 34					.word LinkEvaluateString   ; index 14
>3beb	73 34					.word LinkEvaluateTerm     ; index 16
>3bed	39 3a					.word MLInt32ToString      ; index 18
>3bef	d3 2e					.word Command_XNew         ; index 20
>3bf1	e1 2e					.word XCommand_Run         ; index 22
>3bf3	ed 2e					.word Command_RunFrom      ; index 24
>3bf5	51 39					.word LinkInt32FromString  ; index 26
.3bf7					_DummyControlHandler:
.3bf7	60		rts			rts

;******  Return to file: basic.asm

.3bf8					section_end_main:
.3bf8					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3bf8					StringChrs:
.3bf8	aa		tax				tax 								; set up stack
.3bf9	a9 02		lda #$02			lda 	#2
.3bfb	20 bb 3c	jsr $3cbb			jsr 	AllocateSoftString
.3bfe	98		tya				tya
.3bff	20 e1 3c	jsr $3ce1			jsr 	WriteSoftString
.3c02					StringUpdate:
.3c02	20 10 3c	jsr $3c10			jsr 	ReturnSoftString
.3c05	8a		txa				txa
.3c06	60		rts				rts
.3c07					StringNull:
.3c07	aa		tax				tax
.3c08	a9 01		lda #$01			lda 	#1
.3c0a	20 bb 3c	jsr $3cbb			jsr 	AllocateSoftString
.3c0d	4c 02 3c	jmp $3c02			jmp 	StringUpdate
.3c10					ReturnSoftString:
.3c10	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3c12	95 98		sta $98,x			sta 	esInt0,x
.3c14	a5 3a		lda $3a				lda 	softMemAlloc+1
.3c16	95 a0		sta $a0,x			sta 	esInt1,x
.3c18	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3c1a	95 a8		sta $a8,x			sta 	esInt2,x
.3c1c	95 b0		sta $b0,x			sta 	esInt3,x
.3c1e	a9 40		lda #$40			lda 	#$40 						; type string.
.3c20	95 90		sta $90,x			sta 	esType,x
.3c22	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3c23					STRCompare:
.3c23	48		pha				pha 								; save A
.3c24	aa		tax				tax 								; put stack pos in X
.3c25	98		tya				tya
.3c26	48		pha				pha
.3c27	20 5b 3c	jsr $3c5b			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3c2a	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3c2c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c2e	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3c30	90 02		bcc $3c34			bcc 	_SCNotSmaller
.3c32	b1 2c		lda ($2c),y			lda 	(temp1),y
.3c34					_SCNotSmaller:
.3c34	aa		tax				tax 								; put that in X. We compare this many chars first.
.3c35					_SCCompareLoop:
.3c35	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3c37	f0 0c		beq $3c45			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3c39	ca		dex				dex 								; decrement chars to compare.
.3c3a	c8		iny				iny 								; move to next character
.3c3b	38		sec				sec 								; calculate s1[y]-s2[y]
.3c3c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c3e	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c40	d0 0a		bne $3c4c			bne 	_SCReturnResult 			; if different return sign of A
.3c42	4c 35 3c	jmp $3c35			jmp 	_SCCompareLoop
.3c45					_SCSameToEndShortest
.3c45	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3c47	38		sec				sec
.3c48	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c4a	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c4c					_SCReturnResult:
.3c4c	08		php				php 								; set return to zero preserving PSW.
.3c4d	a2 00		ldx #$00			ldx 	#0
.3c4f	28		plp				plp
.3c50	f0 05		beq $3c57			beq 	_SCExit 					; two values equal, then exit
.3c52	ca		dex				dex 								; X = $FF
.3c53	90 02		bcc $3c57			bcc 	_SCExit 					; if 1st < 2nd then -1
.3c55	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3c57					_SCExit:
.3c57	68		pla				pla
.3c58	a8		tay				tay
.3c59	68		pla				pla
.3c5a	60		rts				rts
.3c5b					CopyStringPair:
.3c5b	b5 99		lda $99,x			lda 	esInt0+1,x
.3c5d	85 2c		sta $2c				sta 	temp1
.3c5f	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3c61	85 2d		sta $2d				sta 	temp1+1
.3c63					CopyStringTop:
.3c63	b5 98		lda $98,x			lda 	esInt0,x
.3c65	85 2a		sta $2a				sta 	temp0
.3c67	b5 a0		lda $a0,x			lda 	esInt1,x
.3c69	85 2b		sta $2b				sta 	temp0+1
.3c6b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3c6c					StringConcat:
.3c6c	aa		tax				tax									; stack pos in X
.3c6d	98		tya				tya
.3c6e	48		pha				pha
.3c6f	20 5b 3c	jsr $3c5b			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3c72	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3c73	a0 00		ldy #$00			ldy 	#0
.3c75	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c77	71 2c		adc ($2c),y			adc 	(temp1),y
.3c79	b0 1c		bcs $3c97			bcs 	_SCError 					; just too many characters here.
.3c7b	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3c7d	b0 18		bcs $3c97			bcs 	_SCError
.3c7f	20 bb 3c	jsr $3cbb			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3c82	20 b2 3c	jsr $3cb2			jsr 	CopySoftToStack 			; copy that to the stack.
.3c85	20 9c 3c	jsr $3c9c			jsr 	SCCopyTemp0 				; copy temp0
.3c88	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3c8a	85 2a		sta $2a				sta 	temp0
.3c8c	a5 2d		lda $2d				lda 	temp1+1
.3c8e	85 2b		sta $2b				sta 	temp0+1
.3c90	20 9c 3c	jsr $3c9c			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3c93	68		pla				pla
.3c94	a8		tay				tay
.3c95	8a		txa				txa 								; and A
.3c96	60		rts				rts
.3c97					_SCError:
.3c97	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3c99	20 18 15	jsr $1518		jsr	errorHandler
.3c9c					SCCopyTemp0:
.3c9c	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3c9e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ca0	85 2e		sta $2e				sta 	temp2
.3ca2					_SCCopyLoop:
.3ca2	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3ca4	f0 0b		beq $3cb1			beq 	_SCCopyExit
.3ca6	c6 2e		dec $2e				dec 	temp2
.3ca8	c8		iny				iny 								; get next char
.3ca9	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cab	20 e1 3c	jsr $3ce1			jsr 	WriteSoftString 			; write to soft string.
.3cae	4c a2 3c	jmp $3ca2			jmp 	_SCCopyLoop
.3cb1					_SCCopyExit:
.3cb1	60		rts				rts
.3cb2					CopySoftToStack:
.3cb2	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3cb4	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3cb6	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3cb8	95 a0		sta $a0,x			sta 	esInt1,x
.3cba	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3cbb					AllocateSoftString:
.3cbb	85 32		sta $32				sta 	tempShort 					; save count
.3cbd	98		tya				tya
.3cbe	48		pha				pha
.3cbf	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3cc1	d0 09		bne $3ccc			bne 	_ASSDone
.3cc3	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3cc5	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3cc7	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3cc9	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3cca	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3ccc					_ASSDone:
.3ccc	38		sec				sec 								; allocate downwards enough memory
.3ccd	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3ccf	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3cd1	85 39		sta $39				sta 	softMemAlloc
.3cd3	a5 3a		lda $3a				lda 	softMemAlloc+1
.3cd5	e9 00		sbc #$00			sbc 	#0
.3cd7	85 3a		sta $3a				sta 	softMemAlloc+1
.3cd9	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3cdb	a8		tay				tay
.3cdc	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3cde	68		pla				pla
.3cdf	a8		tay				tay
.3ce0	60		rts				rts
.3ce1					WriteSoftString:
.3ce1	84 32		sty $32				sty 	tempShort 					; save Y
.3ce3	48		pha				pha 								; save character on stack
.3ce4	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3ce6	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3ce8	18		clc				clc
.3ce9	69 01		adc #$01			adc 	#1
.3ceb	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3ced	a8		tay				tay 								; offset in Y
.3cee	68		pla				pla 								; get char and write.
.3cef	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3cf1	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3cf3	60		rts				rts
.3cf4					StrClone:
.3cf4	aa		tax				tax 								; set up stack.
.3cf5	98		tya				tya
.3cf6	48		pha				pha
.3cf7	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3cf9	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3cfb	18		clc				clc
.3cfc	69 01		adc #$01			adc 	#1
.3cfe	20 bb 3c	jsr $3cbb			jsr 	AllocateSoftString 			; allocate soft memory
.3d01	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3d03	95 98		sta $98,x			sta 	esInt0,x
.3d05	a5 3a		lda $3a				lda 	softMemAlloc+1
.3d07	95 a0		sta $a0,x			sta 	esInt1,x
.3d09	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3d0b	95 a8		sta $a8,x			sta 	esInt2,x
.3d0d	95 b0		sta $b0,x			sta 	esInt3,x
.3d0f	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3d11	95 90		sta $90,x			sta 	esType,x
.3d13	20 9c 3c	jsr $3c9c			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3d16	68		pla				pla
.3d17	a8		tay				tay
.3d18	8a		txa				txa
.3d19	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3d1a					CaseString:
.3d1a	48		pha				pha 								; save A and copy to X
.3d1b	aa		tax				tax
.3d1c	98		tya				tya
.3d1d	48		pha				pha
.3d1e	20 63 3c	jsr $3c63			jsr 	CopyStringTop 				; target string -> temp0
.3d21	a0 00		ldy #$00			ldy 	#0
.3d23	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3d25	18		clc				clc
.3d26	69 01		adc #$01			adc 	#1 							; one more for length byte
.3d28	20 bb 3c	jsr $3cbb			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d2b	20 b2 3c	jsr $3cb2			jsr 	CopySoftToStack 			; copy that to the stack.
.3d2e	a0 00		ldy #$00			ldy 	#0
.3d30	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3d32	aa		tax				tax
.3d33					_CSCopy:
.3d33	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3d35	f0 24		beq $3d5b			beq 	_CSExit
.3d37	ca		dex				dex
.3d38	c8		iny				iny
.3d39	68		pla				pla 								; check direction
.3d3a	48		pha				pha
.3d3b	f0 0c		beq $3d49			beq 	_CSUpper
.3d3d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3d3f	c9 41		cmp #$41			cmp 	#"A"
.3d41	90 12		bcc $3d55			bcc 	_CSWrite
.3d43	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d45	b0 0e		bcs $3d55			bcs 	_CSWrite
.3d47	90 0a		bcc $3d53			bcc 	_CSFlipWrite
.3d49					_CSUpper:
.3d49	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3d4b	c9 61		cmp #$61			cmp 	#"a"
.3d4d	90 06		bcc $3d55			bcc 	_CSWrite
.3d4f	c9 7b		cmp #$7b			cmp 	#"z"+1
.3d51	b0 02		bcs $3d55			bcs 	_CSWrite
.3d53					_CSFlipWrite:
.3d53	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3d55					_CSWrite:
.3d55	20 e1 3c	jsr $3ce1			jsr 	WriteSoftString 			; add to soft string.
.3d58	4c 33 3d	jmp $3d33			jmp 	_CSCopy
.3d5b					_CSExit:
.3d5b	68		pla				pla
.3d5c	a8		tay				tay
.3d5d	68		pla				pla
.3d5e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3d5f					StringSubstring:
.3d5f	48		pha				pha
.3d60	aa		tax				tax 								; access stack.
.3d61	98		tya				tya
.3d62	48		pha				pha
.3d63	20 63 3c	jsr $3c63			jsr 	CopyStringTop 				; point temp0 to the string.
.3d66	a0 00		ldy #$00			ldy 	#0 							; get length.
.3d68	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3d6a	85 2c		sta $2c				sta 	temp1
.3d6c	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3d6e	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3d70	f0 02		beq $3d74			beq 	_SSBOkay
.3d72	b0 2a		bcs $3d9e			bcs 	_SSBReturnNull
.3d74					_SSBOkay:
.3d74	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3d76	18		clc				clc
.3d77	69 01		adc #$01			adc 	#1
.3d79	38		sec				sec
.3d7a	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3d7c	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3d7e	90 02		bcc $3d82			bcc		_SSBTrunc
.3d80	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3d82					_SSBTrunc:
.3d82	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3d84	18		clc				clc
.3d85	69 01		adc #$01			adc 	#1 							; add 1
.3d87	20 bb 3c	jsr $3cbb			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d8a	20 b2 3c	jsr $3cb2			jsr 	CopySoftToStack 			; copy that to the stack.
.3d8d	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3d8f					_SSBCopyLoop:
.3d8f	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3d91	f0 0e		beq $3da1			beq 	_SSBExit
.3d93	c6 2d		dec $2d				dec 	temp1+1
.3d95	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3d97	20 e1 3c	jsr $3ce1			jsr 	WriteSoftString
.3d9a	c8		iny				iny
.3d9b	4c 8f 3d	jmp $3d8f			jmp 	_SSBCopyLoop
.3d9e					_SSBReturnNull:
.3d9e	20 a5 3d	jsr $3da5			jsr 	ReturnNull
.3da1					_SSBExit:
.3da1	68		pla				pla
.3da2	a8		tay				tay
.3da3	68		pla				pla
.3da4	60		rts				rts
.3da5					ReturnNull:
.3da5	a9 00		lda #$00			lda 	#0 							; clear null string
.3da7	8d ce 0a	sta $0ace			sta 	NullString
.3daa	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3dac	95 98		sta $98,x			sta 	esInt0,x
.3dae	a9 0a		lda #$0a			lda 	#NullString >> 8
.3db0	95 a0		sta $a0,x			sta 	esInt1,x
.3db2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d0c					srcStrLen:
>0d0c							.fill 	1
.3db3					StringWrite:
.3db3	aa		tax				tax
.3db4	48		pha				pha
.3db5	98		tya				tya
.3db6	48		pha				pha
.3db7	20 de 3d	jsr $3dde			jsr 	CheckOverwriteCurrent
.3dba	b0 0d		bcs $3dc9			bcs		_SWCopyCurrent
.3dbc	20 1c 3e	jsr $3e1c			jsr 	RequiresConcretion
.3dbf	90 0e		bcc $3dcf			bcc 	_SWWriteReference
.3dc1	20 7f 3e	jsr $3e7f			jsr 	CheckSpecialConcretion
.3dc4	b0 09		bcs $3dcf			bcs 	_SWWriteReference
.3dc6	20 30 3e	jsr $3e30			jsr 	AllocateHardMemory
.3dc9					_SWCopyCurrent:
.3dc9	20 63 3e	jsr $3e63			jsr 	CopyStringToHardMemory
.3dcc	4c da 3d	jmp $3dda			jmp 	_SWExit
.3dcf					_SWWriteReference
.3dcf	a0 00		ldy #$00			ldy 	#0
.3dd1	a5 2a		lda $2a				lda 	temp0
.3dd3	91 2c		sta ($2c),y			sta 	(temp1),y
.3dd5	c8		iny				iny
.3dd6	a5 2b		lda $2b				lda 	temp0+1
.3dd8	91 2c		sta ($2c),y			sta 	(temp1),y
.3dda					_SWExit:
.3dda	68		pla				pla
.3ddb	a8		tay				tay
.3ddc	68		pla				pla
.3ddd	60		rts				rts
.3dde					CheckOverwriteCurrent:
.3dde	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3de0	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3de2	85 2b		sta $2b				sta 	temp0+1
.3de4	b5 99		lda $99,x			lda 	esInt0+1,x
.3de6	85 2a		sta $2a				sta 	temp0
.3de8	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3dea	8d 0c 0d	sta $0d0c			sta 	srcStrLen
.3ded	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3def	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3df1	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3df3	85 2d		sta $2d				sta 	temp1+1
.3df5	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3df7	b1 2c		lda ($2c),y			lda 	(temp1),y
.3df9	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3dfb	90 1b		bcc $3e18			bcc 	_COCFail 				; in hard memory.
.3dfd	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3dff	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3e01	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3e03	85 2e		sta $2e				sta 	temp2
.3e05	c8		iny				iny
.3e06	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e08	e9 00		sbc #$00			sbc 	#0
.3e0a	85 2f		sta $2f				sta 	temp2+1
.3e0c	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3e0e	b1 2e		lda ($2e),y			lda 	(temp2),y
.3e10	38		sec				sec  							; maximum character capacity.
.3e11	e9 02		sbc #$02			sbc 	#2
.3e13	cd 0c 0d	cmp $0d0c			cmp 	srcStrLen 				; if >= the required length
.3e16	b0 02		bcs $3e1a			bcs 	_COCCanReuse
.3e18					_COCFail:
.3e18	18		clc				clc
.3e19	60		rts				rts
.3e1a					_COCCanReuse:
.3e1a	38		sec				sec
.3e1b	60		rts				rts
.3e1c					RequiresConcretion:
.3e1c	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e1e	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3e20	b0 0a		bcs $3e2c			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3e22	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3e24	f0 08		beq $3e2e			beq 	_RCFail 				; if not, this cannot be soft memory.
.3e26	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e28	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3e2a	90 02		bcc $3e2e			bcc 	_RCFail 				; so concreting
.3e2c					_RCSucceed:
.3e2c	38		sec				sec
.3e2d	60		rts				rts
.3e2e					_RCFail:
.3e2e	18		clc				clc
.3e2f	60		rts				rts
.3e30					AllocateHardMemory:
.3e30	98		tya				tya
.3e31	48		pha				pha
.3e32	ad 0c 0d	lda $0d0c			lda 	srcStrLen 				; characters in string
.3e35	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3e37	b0 04		bcs $3e3d			bcs 	_AHMSetMax 				; max out that amount.
.3e39	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3e3b	90 02		bcc $3e3f			bcc 	_AHMIsOkay
.3e3d					_AHMSetMax:
.3e3d	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3e3f					_AHMIsOkay:
.3e3f	48		pha				pha	 							; save size to be allocated
.3e40	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3e42	38		sec				sec  							; and copy result to TOS as target address.
.3e43	65 33		adc $33				adc 	highMemory
.3e45	85 33		sta $33				sta 	highMemory
.3e47	a5 34		lda $34				lda 	highMemory+1
.3e49	69 ff		adc #$ff			adc 	#$FF
.3e4b	85 34		sta $34				sta 	highMemory+1
.3e4d	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3e4f	68		pla				pla 							; get the total size of the storage block
.3e50	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3e52	18		clc				clc
.3e53	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3e55	69 01		adc #$01			adc 	#1
.3e57	91 2c		sta ($2c),y			sta 	(temp1),y
.3e59	a5 34		lda $34				lda 	highMemory+1
.3e5b	69 00		adc #$00			adc 	#0
.3e5d	c8		iny				iny
.3e5e	91 2c		sta ($2c),y			sta 	(temp1),y
.3e60	68		pla				pla
.3e61	a8		tay				tay
.3e62	60		rts				rts
.3e63					CopyStringToHardMemory:
.3e63	98		tya				tya
.3e64	48		pha				pha
.3e65	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3e67	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e69	85 2e		sta $2e				sta 	temp2
.3e6b	c8		iny				iny
.3e6c	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e6e	85 2f		sta $2f				sta 	temp2+1
.3e70	ac 0c 0d	ldy $0d0c			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3e73					_CSTHMLoop:
.3e73	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e75	91 2e		sta ($2e),y			sta 	(temp2),y
.3e77	88		dey				dey
.3e78	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3e7a	d0 f7		bne $3e73			bne 	_CSTHMLoop
.3e7c	68		pla				pla
.3e7d	a8		tay				tay
.3e7e	60		rts				rts
.3e7f					CheckSpecialConcretion:
.3e7f	ad 0c 0d	lda $0d0c			lda 	srcStrLen 				; check string is null e.g. length = 0
.3e82	f0 02		beq $3e86			beq 	_CSCNullString
.3e84	18		clc				clc
.3e85	60		rts				rts
.3e86					_CSCNullString:
.3e86	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3e88	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3e8b	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3e8d	85 2a		sta $2a				sta 	temp0
.3e8f	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3e91	85 2b		sta $2b				sta 	1+(temp0)
.3e93	38		sec				sec
.3e94	60		rts				rts

;******  Return to file: string/string.asm

.3e95					stringHandler:
.3e95	7c 98 3e	jmp ($3e98,x)			jmp 	(stringVectors,x)
.3e98					stringVectors:
>3e98	aa 3e					.word _DummyControlHandler ; index 0
>3e9a	f8 3b					.word StringChrs           ; index 2
>3e9c	f4 3c					.word StrClone             ; index 4
>3e9e	6c 3c					.word StringConcat         ; index 6
>3ea0	07 3c					.word StringNull           ; index 8
>3ea2	23 3c					.word STRCompare           ; index 10
>3ea4	1a 3d					.word CaseString           ; index 12
>3ea6	5f 3d					.word StringSubstring      ; index 14
>3ea8	b3 3d					.word StringWrite          ; index 16
.3eaa					_DummyControlHandler:
.3eaa	60		rts			rts

;******  Return to file: basic.asm

.3eab					section_end_string:
.3eab					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d0d					deTokeniseVector:
>0d0d							.fill 	2
.0d0f					lastCharacterClass:
>0d0f							.fill 	1
.0d10					indent:
>0d10							.fill 	1
.3eab					ListLine:
.3eab	48		pha				pha								; enter here to list to console. sets the output vector
.3eac	a9 e3		lda #$e3			lda 	#(deTokenPrint) & $FF
.3eae	8d 0d 0d	sta $0d0d			sta 	deTokeniseVector
.3eb1	a9 3f		lda #$3f			lda 	#(deTokenPrint) >> 8
.3eb3	8d 0e 0d	sta $0d0e			sta 	1+(deTokeniseVector)
.3eb6	68		pla				pla
.3eb7					Detokenise:
.3eb7	18		clc				clc 							; space required for line number.
.3eb8	69 06		adc #$06			adc 	#6
.3eba	8d 10 0d	sta $0d10			sta 	indent
.3ebd	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3ebf	8d 0f 0d	sta $0d0f			sta 	lastCharacterClass
.3ec2	a2 02		ldx #$02			ldx 	#2
.3ec4	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3ec6	95 a8		sta $a8,x			sta 	esInt2,x
.3ec8	95 b0		sta $b0,x			sta 	esInt3,x
.3eca	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3ecc	b1 28		lda ($28),y			lda 	(codePtr),y
.3ece	95 98		sta $98,x			sta 	esInt0,x
.3ed0	c8		iny				iny
.3ed1	b1 28		lda ($28),y			lda 	(codePtr),y
.3ed3	95 a0		sta $a0,x			sta 	esInt1,x
.3ed5	a9 84		lda #$84			lda 	#LTYLineNumber
.3ed7	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.3eda	a9 0a		lda #$0a			lda 	#10 					; base 10
.3edc	20 82 3f	jsr $3f82			jsr 	DTPrintInteger 			; print as integer.
.3edf	a0 00		ldy #$00			ldy 	#0 						; get length
.3ee1	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3ee3	aa		tax				tax
.3ee4					_DTPadOut:
.3ee4	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3ee6	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.3ee9	e8		inx				inx
.3eea	ec 10 0d	cpx $0d10			cpx 	indent
.3eed	d0 f5		bne $3ee4			bne 	_DTPadOut
.3eef	a0 03		ldy #$03			ldy 	#3 						; start position.
.3ef1					_DTListLoop:
.3ef1	b1 28		lda ($28),y			lda 	(codePtr),y
.3ef3	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3ef5	f0 5e		beq $3f55			beq 	_DTIsString
.3ef7	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3ef9	f0 56		beq $3f51			beq 	_DTIsFloat
.3efb	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3efd	f0 16		beq $3f15			beq 	_DTHexConstant
.3eff	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3f01	d0 06		bne $3f09			bne 	_DTNotEnd
.3f03	a9 ff		lda #$ff			lda 	#255 					; print CR
.3f05	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.3f08	60		rts				rts
.3f09					_DTNotEnd:
.3f09	c9 00		cmp #$00			cmp 	#0
.3f0b	30 38		bmi $3f45			bmi 	_DTIsToken
.3f0d	c9 40		cmp #$40			cmp 	#$40
.3f0f	90 3a		bcc $3f4b			bcc 	_DTIsIdentifier
.3f11	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3f13	d0 0d		bne $3f22			bne 	_DTConstant
.3f15					_DTHexConstant:
.3f15	a9 26		lda #$26			lda 	#"&"
.3f17	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.3f1a	c8		iny				iny
.3f1b	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3f1d	20 ff 3f	jsr $3fff			jsr 	DTSwitchMode
.3f20	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3f22					_DTConstant:
.3f22	48		pha				pha
.3f23	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3f25	20 ff 3f	jsr $3fff			jsr 	DTSwitchMode
.3f28	a9 86		lda #$86			lda 	#LTYConstant
.3f2a	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.3f2d	a2 02		ldx #$02			ldx 	#2 						; get its value
.3f2f	8a		txa				txa
.3f30	a2 10		ldx #$10		ldx	#16
.3f32	20 d8 3b	jsr $3bd8		jsr	mainHandler
.3f35	aa		tax				tax
.3f36	68		pla				pla 							; get base back
.3f37	85 32		sta $32				sta 	tempShort
.3f39	98		tya				tya
.3f3a	48		pha				pha
.3f3b	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3f3d	20 82 3f	jsr $3f82			jsr 	DTPrintInteger
.3f40	68		pla				pla
.3f41	a8		tay				tay
.3f42	4c f1 3e	jmp $3ef1			jmp 	_DTListLoop
.3f45					_DTIsToken:
.3f45	20 58 40	jsr $4058			jsr 	DTDecodeToken
.3f48	4c f1 3e	jmp $3ef1			jmp 	_DTListLoop
.3f4b					_DTIsIdentifier:
.3f4b	20 11 40	jsr $4011			jsr 	DTIdentifier
.3f4e	4c f1 3e	jmp $3ef1			jmp 	_DTListLoop
.3f51					_DTIsFloat:
>3f51	db						.byte 	$DB
.3f52	4c 51 3f	jmp $3f51			jmp 	_DTIsFloat
.3f55					_DTIsString:
.3f55	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3f57	20 ff 3f	jsr $3fff			jsr 	DTSwitchMode
.3f5a	a9 81		lda #$81			lda 	#LTYString
.3f5c	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.3f5f	a9 22		lda #$22			lda 	#'"'						; open quote
.3f61	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.3f64	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3f66	8a		txa				txa
.3f67	a2 10		ldx #$10		ldx	#16
.3f69	20 d8 3b	jsr $3bd8		jsr	mainHandler
.3f6c	aa		tax				tax
.3f6d	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.3f6f	85 2a		sta $2a				sta 	temp0
.3f71	b5 a0		lda $a0,x			lda 	esInt1,x
.3f73	85 2b		sta $2b				sta 	temp0+1
.3f75	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3f77	20 94 3f	jsr $3f94			jsr 	DTPrintLengthPrefix
.3f7a	a9 22		lda #$22			lda 	#'"'
.3f7c	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.3f7f	4c f1 3e	jmp $3ef1			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d11					tPrintCount:
>0d11							.fill 	1
.3f82					DTPrintInteger:
.3f82	48		pha				pha									; save base
.3f83	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3f85	85 2a		sta $2a				sta 	temp0
.3f87	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3f89	85 2b		sta $2b				sta 	1+(temp0)
.3f8b	68		pla				pla
.3f8c	a8		tay				tay
.3f8d	8a		txa				txa
.3f8e	a2 12		ldx #$12		ldx	#18
.3f90	20 d8 3b	jsr $3bd8		jsr	mainHandler
.3f93	aa		tax				tax 								; then drop through here.
.3f94					DTPrintLengthPrefix:
.3f94	aa		tax				tax 								; A = 0 = don't case convert.
.3f95	98		tya				tya
.3f96	48		pha				pha
.3f97	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3f99	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f9b	8d 11 0d	sta $0d11			sta 	tPrintCount
.3f9e	f0 1b		beq $3fbb			beq 	_DTPLPExit 					; empty string
.3fa0					_DTPLPLoop:
.3fa0	c8		iny				iny 								; get next.
.3fa1	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fa3	29 7f		and #$7f			and 	#$7F
.3fa5	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3fa7	f0 0a		beq $3fb3			beq 	_DTPLPNoCase
.3fa9	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3fab	90 06		bcc $3fb3			bcc 	_DTPLPNoCase
.3fad	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3faf	b0 02		bcs $3fb3			bcs 	_DTPLPNoCase
.3fb1	49 20		eor #$20			eor 	#"A"^"a"
.3fb3					_DTPLPNoCase
.3fb3	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter 		; call handler
.3fb6	ce 11 0d	dec $0d11			dec 	tPrintCount 				; do all the characters
.3fb9	d0 e5		bne $3fa0			bne 	_DTPLPLoop
.3fbb					_DTPLPExit:
.3fbb	68		pla				pla
.3fbc	a8		tay				tay
.3fbd	60		rts				rts
.3fbe					ListOutputCharacter:
.3fbe	85 32		sta $32				sta 	tempShort
.3fc0	48		pha				pha
.3fc1	8a		txa				txa
.3fc2	48		pha				pha
.3fc3	98		tya				tya
.3fc4	48		pha				pha
.3fc5	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3fc7	c9 20		cmp #$20			cmp 	#32
.3fc9	b0 0c		bcs $3fd7			bcs		_LOCHiBit
.3fcb	09 40		ora #$40			ora 	#64 						; conversion
.3fcd	c9 40		cmp #$40			cmp 	#64							; make l/c
.3fcf	f0 06		beq $3fd7			beq 	_LOCHiBit
.3fd1	c9 5b		cmp #$5b			cmp 	#65+26
.3fd3	b0 02		bcs $3fd7			bcs 	_LOCHiBit
.3fd5	69 20		adc #$20			adc 	#32
.3fd7					_LOCHiBit:
.3fd7	20 e0 3f	jsr $3fe0			jsr 	_LOCCallVector				; call o/p handler routine
.3fda	68		pla				pla
.3fdb	a8		tay				tay
.3fdc	68		pla				pla
.3fdd	aa		tax				tax
.3fde	68		pla				pla
.3fdf					_LOCExit:
.3fdf	60		rts				rts
.3fe0					_LOCCallVector:
.3fe0	6c 0d 0d	jmp ($0d0d)			jmp 	(deTokeniseVector)
.3fe3					deTokenPrint:
.3fe3	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3fe5	30 06		bmi $3fed			bmi 	_dtpInk
.3fe7	a2 16		ldx #$16		ldx	#22
.3fe9	20 f6 14	jsr $14f6		jsr	deviceHandler
.3fec	60		rts				rts
.3fed	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.3fef	f0 08		beq $3ff9			beq 	_dtpCR						; except $FF => CRLF
.3ff1	29 07		and #$07			and 	#7
.3ff3	a2 08		ldx #$08		ldx	#8
.3ff5	20 f6 14	jsr $14f6		jsr	deviceHandler
.3ff8	60		rts				rts
.3ff9					_dtpCR:
.3ff9	a2 06		ldx #$06		ldx	#6
.3ffb	20 f6 14	jsr $14f6		jsr	deviceHandler
.3ffe	60		rts				rts
.3fff					DTSwitchMode:
.3fff	cd 0f 0d	cmp $0d0f			cmp 	LastCharacterClass 			; if changed, update character class
.4002	f0 04		beq $4008			beq 	_DTSMNoChange
.4004	8d 0f 0d	sta $0d0f			sta 	LastCharacterClass
.4007					_DTSMExit:
.4007	60		rts				rts
.4008					_DTSMNoChange:
.4008	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.400a	f0 fb		beq $4007			beq 	_DTSMExit 					; need a space.
.400c	a9 20		lda #$20			lda 	#" "
.400e	4c be 3f	jmp $3fbe			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4011					DTIdentifier:
.4011	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4013	20 ff 3f	jsr $3fff			jsr 	DTSwitchMode
.4016	a9 87		lda #$87			lda 	#LTYIdentifier
.4018	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.401b					_DTILoop:
.401b	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.401d	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.401f	d0 02		bne $4023			bne 	_DTINotUS
.4021	a9 5f		lda #$5f			lda 	#"_"
.4023					_DTINotUS:
.4023	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.4026	c8		iny				iny
.4027	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.4029	c9 3a		cmp #$3a			cmp 	#$3A
.402b	90 ee		bcc $401b			bcc 	_DTILoop
.402d	c8		iny				iny
.402e	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4030	f0 25		beq $4057			beq 	_DTIExit 					; no postfix.
.4032	48		pha				pha
.4033	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.4035	8d 0f 0d	sta $0d0f			sta 	LastCharacterClass
.4038	a9 82		lda #$82			lda 	#LTYPunctuation
.403a	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.403d	68		pla				pla
.403e	c9 3b		cmp #$3b			cmp 	#$3B
.4040	f0 10		beq $4052			beq 	_DTIArray
.4042	4a		lsr a				lsr 	a 							; array flag in C
.4043	08		php				php
.4044	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4046	f0 02		beq $404a			beq 	_DTIDollar
.4048	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.404a					_DTIDollar:
.404a	49 24		eor #$24			eor 	#"$"
.404c	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.404f	28		plp				plp
.4050	90 05		bcc $4057			bcc 	_DTIExit
.4052					_DTIArray:
.4052	a9 28		lda #$28			lda 	#"("
.4054	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.4057					_DTIExit:
.4057	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.4058					DTDecodeToken:
.4058	a2 00		ldx #$00			ldx 	#0 							; table number to use
.405a	b1 28		lda ($28),y			lda 	(codePtr),y
.405c	c9 84		cmp #$84			cmp 	#$84
.405e	b0 05		bcs $4065			bcs 	_DTNotShift
.4060	29 03		and #$03			and 	#3 							; get the shift 1..3
.4062	0a		asl a				asl 	a 							; put 2 x in X
.4063	aa		tax				tax
.4064	c8		iny				iny
.4065					_DTNotShift:
.4065	bd 67 43	lda $4367,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.4068	85 2a		sta $2a				sta 	temp0 						; point into temp0
.406a	bd 68 43	lda $4368,x			lda 	TokenTableAddress+1,x
.406d	85 2b		sta $2b				sta 	temp0+1
.406f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4071	c8		iny				iny 								; consume it.
.4072	aa		tax				tax
.4073	98		tya				tya
.4074	48		pha				pha
.4075					_DTFindText:
.4075	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4077	f0 11		beq $408a			beq 	_DTFoundText
.4079	ca		dex				dex
.407a	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.407c	38		sec				sec
.407d	b1 2a		lda ($2a),y			lda 	(temp0),y
.407f	65 2a		adc $2a				adc 	temp0
.4081	85 2a		sta $2a				sta 	temp0
.4083	90 f0		bcc $4075			bcc 	_DTFindText
.4085	e6 2b		inc $2b				inc 	temp0+1
.4087	4c 75 40	jmp $4075			jmp 	_DTFindText
.408a					_DTFoundText:
.408a	a0 01		ldy #$01			ldy 	#1 							; get first character
.408c	b1 2a		lda ($2a),y			lda 	(temp0),y
.408e	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.4090	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.4092	90 11		bcc $40a5			bcc 	_DTIsPunctuation
.4094	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4096	b0 0d		bcs $40a5			bcs 	_DTIsPunctuation
.4098	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.409a	20 ff 3f	jsr $3fff			jsr 	DTSwitchMode
.409d	a9 83		lda #$83			lda 	#LTYKeyword
.409f	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.40a2	4c af 40	jmp $40af			jmp 	_DTPrint
.40a5					_DTIsPunctuation:
.40a5	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.40a7	20 ff 3f	jsr $3fff			jsr 	DTSwitchMode
.40aa	a9 82		lda #$82			lda 	#LTYPunctuation
.40ac	20 be 3f	jsr $3fbe			jsr 	ListOutputCharacter
.40af					_DTPrint:
.40af	a9 01		lda #$01			lda 	#1 							; fix case.
.40b1	20 94 3f	jsr $3f94			jsr 	DTPrintLengthPrefix 		; print it out.
.40b4	a0 00		ldy #$00			ldy 	#0
.40b6	b1 2a		lda ($2a),y			lda 	(temp0),y
.40b8	a8		tay				tay
.40b9	b1 2a		lda ($2a),y			lda 	(temp0),y
.40bb	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.40bd	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.40bf	90 04		bcc $40c5			bcc 	_DTIsNowPunctuation
.40c1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40c3	90 05		bcc $40ca			bcc 	_DTPExit
.40c5					_DTIsNowPunctuation:
.40c5	a9 01		lda #$01			lda 	#1
.40c7	8d 0f 0d	sta $0d0f			sta		LastCharacterClass
.40ca					_DTPExit:
.40ca	68		pla				pla
.40cb	a8		tay				tay
.40cc	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d12					currentSet:
>0d12							.fill 	1
.40cd					TokenSearch:
.40cd	8a		txa				txa
.40ce	48		pha				pha
.40cf	98		tya				tya
.40d0	48		pha				pha
.40d1	a9 00		lda #$00			lda 	#0
.40d3	8d 12 0d	sta $0d12			sta 	currentSet
.40d6					_TSLoop:
.40d6	ad 12 0d	lda $0d12			lda 	currentSet 					; 2 x currentset in X
.40d9	0a		asl a				asl 	a
.40da	aa		tax				tax
.40db	bd 67 43	lda $4367,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.40de	85 2a		sta $2a				sta 	temp0
.40e0	bd 68 43	lda $4368,x			lda 	TokenTableAddress+1,x
.40e3	85 2b		sta $2b				sta 	temp0+1
.40e5	20 0c 41	jsr $410c			jsr 	TokenSearchOne 				; search one table
.40e8	b0 0d		bcs $40f7			bcs 	_TSFound 					; found a token.
.40ea	ee 12 0d	inc $0d12			inc 	currentSet 					; next set
.40ed	ad 12 0d	lda $0d12			lda 	currentSet
.40f0	c9 04		cmp #$04			cmp 	#4
.40f2	d0 e2		bne $40d6			bne 	_TSLoop 					; back if not done all four.
.40f4	18		clc				clc 								; clear carry and exit
.40f5	90 10		bcc $4107			bcc 	_TSExit
.40f7					_TSFound:
.40f7	48		pha				pha 								; save token
.40f8	ad 12 0d	lda $0d12			lda 	currentSet					; if set zero no shift
.40fb	f0 05		beq $4102			beq 	_TSNoShift
.40fd	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.40ff	20 bd 41	jsr $41bd			jsr 	TokenWrite
.4102					_TSNoShift:
.4102	68		pla				pla 								; get token back
.4103	20 bd 41	jsr $41bd			jsr 	TokenWrite 					; write it
.4106	38		sec				sec 								; carry set indicating success
.4107					_TSExit:
.4107	68		pla				pla
.4108	a8		tay				tay
.4109	68		pla				pla
.410a	aa		tax				tax
.410b	60		rts				rts
.410c					TokenSearchOne:
.410c	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.410e					_TSOLoop:
.410e	a0 00		ldy #$00			ldy 	#0
.4110	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4112	f0 26		beq $413a			beq 	_TSOFail 					; if zero, end of table
.4114	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4117	f0 11		beq $412a			beq 	_TSOCheckText
.4119					_TSONext:
.4119	e8		inx				inx 								; bump token
.411a	a0 00		ldy #$00			ldy 	#0							; get length
.411c	b1 2a		lda ($2a),y			lda 	(temp0),y
.411e	38		sec				sec
.411f	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4121	85 2a		sta $2a				sta 	temp0
.4123	90 e9		bcc $410e			bcc 	_TSOLoop
.4125	e6 2b		inc $2b				inc 	temp0+1
.4127	4c 0e 41	jmp $410e			jmp 	_TSOLoop
.412a					_TSOCheckText:
.412a	a8		tay				tay 								; compare length downto 1.
.412b					_TSOCheckLoop:
.412b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.412d	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4130	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4132	d0 e5		bne $4119			bne 	_TSONext 					; different goto next.
.4134	88		dey				dey 								; do all
.4135	d0 f4		bne $412b			bne 	_TSOCheckLoop
.4137	8a		txa				txa 								; return token in A and carry set
.4138	38		sec				sec
.4139	60		rts				rts
.413a					_TSOFail:
.413a	18		clc				clc
.413b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.413c					TokTest:
.413c	a2 ff		ldx #$ff				ldx 	#$FF
.413e	9a		txs					txs
.413f	a9 5c		lda #$5c			lda 	#(TokenText1) & $FF
.4141	85 28		sta $28				sta 	codePtr
.4143	a9 41		lda #$41			lda 	#(TokenText1) >> 8
.4145	85 29		sta $29				sta 	1+(codePtr)
.4147	20 5c 41	jsr $415c				jsr 	Tokenise
.414a	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.414c	bd 5c 41	lda $415c,x	_TokCheck:	lda 	TokenBytes1,x
.414f	dd 16 0d	cmp $0d16,x				cmp 	tokenBuffer,x
.4152	d0 fe		bne $4152	_TokFail:	bne 	_TokFail	 		; error.
.4154	e8		inx					inx
.4155	c9 80		cmp #$80				cmp 	#$80
.4157	d0 f3		bne $414c				bne 	_TokCheck
.4159	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.415c					TokenText1:
.415c					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d13					tokenHeader:
>0d13							.fill 	3
.0d16					tokenBuffer:
>0d16							.fill 	256
.0e16					tokenBufferIndex:
>0e16							.fill 	1
.415c					Tokenise:
.415c	20 d6 41	jsr $41d6			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.415f					TokeniseASCIIZ:
.415f	20 e7 41	jsr $41e7			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4162	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4164	8d 16 0e	sta $0e16			sta 	tokenBufferIndex
.4167	a8		tay				tay 								; start pointer
.4168	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.416a	8d 16 0d	sta $0d16			sta 	tokenBuffer
.416d					_TokLoop:
.416d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.416f	f0 46		beq $41b7			beq 	_TokExit 					; if zero, then exit.
.4171	c8		iny				iny 								; skip over spaces.
.4172	c9 20		cmp #$20			cmp 	#" "
.4174	f0 f7		beq $416d			beq 	_TokLoop
.4176	88		dey				dey 								; point back to character.
.4177	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.4179	f0 18		beq $4193			beq 	_TokHexConst
.417b	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.417d	f0 23		beq $41a2			beq 	_TokQString
.417f	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.4181	b0 26		bcs $41a9			bcs 	_TokPunctuation
.4183	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.4185	b0 29		bcs $41b0			bcs 	_TokIdentifier
.4187	c9 3a		cmp #$3a			cmp 	#"9"+1
.4189	b0 1e		bcs $41a9			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.418b	c9 30		cmp #$30			cmp 	#"0"
.418d	90 1a		bcc $41a9			bcc 	_TokPunctuation 			; < 0, punctuation.
.418f	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.4191	d0 08		bne $419b			bne 	_TokConst
.4193					_TokHexConst:
.4193	c8		iny				iny									; consume token.
.4194	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.4196	20 bd 41	jsr $41bd			jsr 	TokenWrite
.4199	a9 10		lda #$10			lda 	#16
.419b					_TokConst:
.419b	20 a5 42	jsr $42a5			jsr 	TokeniseInteger
.419e	b0 cd		bcs $416d			bcs 	_TokLoop
.41a0	90 18		bcc $41ba			bcc 	_TokFail
.41a2					_TokQString:
.41a2	20 3b 43	jsr $433b			jsr 	TokeniseString
.41a5	b0 c6		bcs $416d			bcs 	_TokLoop
.41a7	90 11		bcc $41ba			bcc 	_TokFail
.41a9					_TokPunctuation:
.41a9	20 1a 43	jsr $431a			jsr 	TokenisePunctuation
.41ac	b0 bf		bcs $416d			bcs 	_TokLoop
.41ae	90 0a		bcc $41ba			bcc 	_TokFail
.41b0					_TokIdentifier:
.41b0	20 16 42	jsr $4216			jsr 	TokeniseIdentifier
.41b3	b0 b8		bcs $416d			bcs 	_TokLoop
.41b5	90 03		bcc $41ba			bcc 	_TokFail
.41b7					_TokExit:
.41b7	a9 01		lda #$01			lda 	#1
.41b9	60		rts				rts
.41ba					_TokFail:
.41ba	a9 00		lda #$00			lda 	#0
.41bc	60		rts				rts
.41bd					TokenWrite:
.41bd	85 32		sta $32				sta 	tempShort 					; save XA
.41bf	48		pha				pha
.41c0	8a		txa				txa
.41c1	48		pha				pha
.41c2	a5 32		lda $32				lda 	tempShort
.41c4	ae 16 0e	ldx $0e16			ldx 	tokenBufferIndex 			; geet index
.41c7	9d 16 0d	sta $0d16,x			sta 	tokenBuffer,x 				; write byte to buffer
.41ca	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.41cc	9d 17 0d	sta $0d17,x			sta 	tokenBuffer+1,x
.41cf	ee 16 0e	inc $0e16			inc 	tokenBufferIndex 			; bump index
.41d2	68		pla				pla
.41d3	aa		tax				tax
.41d4	68		pla				pla
.41d5	60		rts				rts
.41d6					TokeniseMakeASCIIZ:
.41d6	a0 00		ldy #$00			ldy 	#0							; get length of string.
.41d8	b1 28		lda ($28),y			lda 	(codePtr),y
.41da	a8		tay				tay
.41db	c8		iny				iny 								; +1, the NULL goes here.
.41dc	a9 00		lda #$00			lda 	#0
.41de	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.41e0	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.41e2	d0 02		bne $41e6			bne 	_TMKAExit
.41e4	e6 29		inc $29				inc 	codePtr+1
.41e6					_TMKAExit:
.41e6	60		rts				rts
.41e7					TokeniseFixCase:
.41e7	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.41e9	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.41eb					_TFCFlipQ:
.41eb	8a		txa				txa
.41ec	49 01		eor #$01			eor 	#1
.41ee	aa		tax				tax
.41ef					_TFCLoop:
.41ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.41f1	f0 22		beq $4215			beq 	_TFCExit 					; if zero exit.
.41f3	c9 20		cmp #$20			cmp 	#32 						; if control
.41f5	90 1a		bcc $4211			bcc 	_TFCControl
.41f7	c8		iny				iny 								; preconsume
.41f8	c9 22		cmp #$22			cmp 	#'"'
.41fa	f0 ef		beq $41eb			beq 	_TFCFlipQ
.41fc	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.41fe	90 ef		bcc $41ef			bcc 	_TFCLoop
.4200	c9 7b		cmp #$7b			cmp 	#"z"+1
.4202	b0 eb		bcs $41ef			bcs 	_TFCLoop
.4204	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4206	d0 e7		bne $41ef			bne 	_TFCLoop
.4208	88		dey				dey
.4209	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.420b					_TFCWrite:
.420b	91 28		sta ($28),y			sta 	(codePtr),y
.420d	c8		iny				iny
.420e	4c ef 41	jmp $41ef			jmp 	_TFCLoop
.4211					_TFCControl:
.4211	a9 20		lda #$20			lda 	#" "
.4213	d0 f6		bne $420b			bne 	_TFCWrite
.4215					_TFCExit:
.4215	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4216					TokeniseIdentifier:
.4216	a2 00		ldx #$00			ldx 	#0
.4218					_TICopyID:
.4218	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.421a	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.421c	f0 16		beq $4234			beq 	_TICopyUnderscore
.421e	c9 2e		cmp #$2e			cmp 	#"."
.4220	f0 14		beq $4236			beq 	_TICopyIn
.4222	c9 30		cmp #$30			cmp 	#"0"
.4224	90 1b		bcc $4241			bcc 	_TIEndCopy
.4226	c9 3a		cmp #$3a			cmp 	#"9"+1
.4228	90 0c		bcc $4236			bcc 	_TICopyIn
.422a	c9 41		cmp #$41			cmp 	#"A"
.422c	90 13		bcc $4241			bcc 	_TIEndCopy
.422e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4230	b0 0f		bcs $4241			bcs		_TIEndCopy
.4232	90 02		bcc $4236			bcc 	_TICopyIn
.4234					_TICopyUnderScore:
.4234	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4236					_TICopyIn:
.4236	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4237	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.423a	8e cf 0a	stx $0acf			stx 	convertBuffer
.423d	c8		iny				iny 								; next character
.423e	4c 18 42	jmp $4218			jmp 	_TICopyID 					; loop round
.4241					_TIEndCopy:
.4241	a9 24		lda #$24			lda 	#"$"
.4243	20 98 42	jsr $4298			jsr 	TIDCheckCopy
.4246	a9 23		lda #$23			lda 	#"#"
.4248	20 98 42	jsr $4298			jsr 	TIDCheckCopy
.424b	a9 28		lda #$28			lda 	#"("
.424d	20 98 42	jsr $4298			jsr 	TIDCheckCopy
.4250	20 cd 40	jsr $40cd			jsr 	TokenSearch 				; is it a token
.4253	b0 41		bcs $4296			bcs 	_TIExit 					; if so, then exit.
.4255	98		tya				tya
.4256	48		pha				pha
.4257	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.4259	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.425c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.425f	c9 28		cmp #$28			cmp 	#"("
.4261	d0 02		bne $4265			bne 	_TINotArray
.4263	ca		dex				dex 								; yes, remove it and convert to array.
.4264	c8		iny				iny
.4265					_TINotArray:
.4265	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.4268	c9 24		cmp #$24			cmp 	#"$"
.426a	d0 03		bne $426f			bne 	_TINotString
.426c	ca		dex				dex
.426d	c8		iny				iny
.426e	c8		iny				iny
.426f					_TINotString:
.426f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4272	c9 23		cmp #$23			cmp 	#"#"
.4274	d0 05		bne $427b			bne 	_TINotFloat
.4276	ca		dex				dex
.4277	c8		iny				iny
.4278	c8		iny				iny
.4279	c8		iny				iny
.427a	c8		iny				iny
.427b					_TINotFloat:
.427b	e8		inx				inx 								; write end marker for identifier.
.427c	98		tya				tya
.427d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4280	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4283	a2 01		ldx #$01			ldx 	#1
.4285					_TIOutput:
.4285	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4288	29 3f		and #$3f			and 	#$3F
.428a	48		pha				pha
.428b	20 bd 41	jsr $41bd			jsr 	TokenWrite
.428e	e8		inx				inx
.428f	68		pla				pla
.4290	c9 3a		cmp #$3a			cmp 	#$3A
.4292	90 f1		bcc $4285			bcc 	_TIOutput
.4294	68		pla				pla
.4295	a8		tay				tay
.4296					_TIExit:
.4296	38		sec				sec 								; this can't fail.
.4297	60		rts				rts
.4298					TIDCheckCopy:
.4298	d1 28		cmp ($28),y			cmp 	(codePtr),y
.429a	d0 08		bne $42a4			bne 	_TIDCCExit
.429c	e8		inx				inx
.429d	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.42a0	8e cf 0a	stx $0acf			stx 	convertBuffer
.42a3	c8		iny				iny
.42a4					_TIDCCExit:
.42a4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.42a5					TokeniseInteger:
.42a5	85 2c		sta $2c				sta 	temp1 						; save base
.42a7	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.42a9	8e cf 0a	stx $0acf			stx 	convertBuffer
.42ac					_TIGetChars:
.42ac	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.42ae	c9 30		cmp #$30			cmp 	#"0"
.42b0	90 1f		bcc $42d1			bcc 	_TIEndGet
.42b2	c9 3a		cmp #$3a			cmp 	#"9"+1
.42b4	90 10		bcc $42c6			bcc 	_TIHaveChar
.42b6	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.42b8	c9 0a		cmp #$0a			cmp 	#10
.42ba	f0 15		beq $42d1			beq 	_TIEndGet
.42bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.42be	c9 41		cmp #$41			cmp 	#"A"
.42c0	90 0f		bcc $42d1			bcc 	_TIEndGet
.42c2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42c4	b0 0b		bcs $42d1			bcs 	_TIEndGet
.42c6					_TIHaveChar:
.42c6	e8		inx				inx 								; write into buffer.
.42c7	8e cf 0a	stx $0acf			stx 	convertBuffer
.42ca	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.42cd	c8		iny				iny 								; next char
.42ce	4c ac 42	jmp $42ac			jmp 	_TIGetChars
.42d1					_TIEndGet:
.42d1	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.42d3	f0 1c		beq $42f1			beq 	_TIFail
.42d5	98		tya				tya
.42d6	48		pha				pha
.42d7	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.42d9	85 2a		sta $2a				sta 	temp0
.42db	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.42dd	85 2b		sta $2b				sta 	1+(temp0)
.42df	a9 00		lda #$00			lda 	#0 							; stack level 0
.42e1	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.42e3	a2 1a		ldx #$1a		ldx	#26
.42e5	20 d8 3b	jsr $3bd8		jsr	mainHandler
.42e8	68		pla				pla
.42e9	a8		tay				tay
.42ea	90 05		bcc $42f1			bcc 	_TIFail 					; didn't convert.
.42ec	20 f3 42	jsr $42f3			jsr 	TIRecursiveOut 				; recursive output ?
.42ef	38		sec				sec
.42f0	60		rts				rts
.42f1					_TIFail:
.42f1	18		clc				clc
.42f2	60		rts				rts
.42f3					TIRecursiveOut:
.42f3	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.42f5	29 3f		and #$3f			and 	#$3F
.42f7	09 40		ora #$40			ora 	#$40
.42f9	48		pha				pha
.42fa	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.42fc	29 c0		and #$c0			and 	#$C0
.42fe	05 a0		ora $a0				ora 	esInt1
.4300	05 a8		ora $a8				ora 	esInt2
.4302	05 b0		ora $b0				ora 	esInt3
.4304	f0 10		beq $4316			beq 	_TIRONoRecursion
.4306	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.4308					_TIROShift:
.4308	46 b0		lsr $b0				lsr 	esInt3
.430a	66 a8		ror $a8				ror 	esInt2
.430c	66 a0		ror $a0				ror 	esInt1
.430e	66 98		ror $98				ror 	esInt0
.4310	ca		dex				dex
.4311	d0 f5		bne $4308			bne 	_TIROShift
.4313	20 f3 42	jsr $42f3			jsr 	TIRecursiveOut 				; call recursively
.4316					_TIRONoRecursion:
.4316	68		pla				pla 								; pull the old bit.
.4317	4c bd 41	jmp $41bd			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.431a					TokenisePunctuation:
.431a	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.431c	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.431f	c8		iny				iny
.4320	b1 28		lda ($28),y			lda 	(codePtr),y
.4322	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4325	c8		iny				iny 								; Y is +2
.4326	a9 02		lda #$02			lda 	#2 							; 2 character string.
.4328	8d cf 0a	sta $0acf			sta 	convertBuffer
.432b	20 cd 40	jsr $40cd			jsr 	TokenSearch 				; search for that token.
.432e	b0 0a		bcs $433a			bcs 	_TIFound
.4330	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4333	88		dey				dey 								; Y is now +1
.4334	20 cd 40	jsr $40cd			jsr 	TokenSearch 				; search for that token.
.4337	b0 01		bcs $433a			bcs 	_TIFound
.4339	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.433a					_TIFound:
.433a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.433b					TokeniseString:
.433b	c8		iny				iny 								; skip opening quote
.433c	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.433e	84 2a		sty $2a				sty 	temp0 						; save start.
.4340					_TSGetLength:
.4340	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4342	f0 21		beq $4365			beq 	_TSFail						; end of line, fail
.4344	c8		iny				iny
.4345	e8		inx				inx
.4346	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.4348	d0 f6		bne $4340			bne 	_TSGetLength
.434a	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.434c	20 bd 41	jsr $41bd			jsr 	TokenWrite
.434f	8a		txa				txa 								; output length
.4350	20 bd 41	jsr $41bd			jsr 	TokenWrite
.4353	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4355	e0 00		cpx #$00			cpx 	#0 							; check ended
.4357	f0 09		beq $4362			beq 	_TSExit
.4359					_TSOutput:
.4359	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.435b	20 bd 41	jsr $41bd			jsr 	TokenWrite
.435e	c8		iny				iny
.435f	ca		dex				dex
.4360	d0 f7		bne $4359			bne 	_TSOutput
.4362					_TSExit:
.4362	c8		iny				iny 								; skip ending quote
.4363	38		sec				sec 								; return CS.
.4364	60		rts				rts
.4365					_TSFail:
.4365	18		clc				clc
.4366	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4367					TokenTableAddress:
>4367	6f 43						.word 	Group0Text
>4369	3d 45						.word 	Group1Text
>436b	8a 46						.word 	Group2Text
>436d	d4 46						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.436f					Group0Text:
>436f	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4373	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4376	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>437a	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>437d	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4380	01 be					.byte $01,$be                          ; $8b >
>4382	01 bc					.byte $01,$bc                          ; $8c <
>4384	01 bd					.byte $01,$bd                          ; $8d =
>4386	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>4389	01 ab					.byte $01,$ab                          ; $8f +
>438b	01 ad					.byte $01,$ad                          ; $90 -
>438d	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>4390	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>4393	01 aa					.byte $01,$aa                          ; $93 *
>4395	01 af					.byte $01,$af                          ; $94 /
>4397	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>439b	01 de					.byte $01,$de                          ; $96 ^
>439d	01 a1					.byte $01,$a1                          ; $97 !
>439f	01 bf					.byte $01,$bf                          ; $98 ?
>43a1	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>43a8	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>43ae	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>43b2	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>43b5	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>43bd	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>43c3	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>43c8	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>43cd	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>43d2	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>43d8	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>43e0	01 a8					.byte $01,$a8                          ; $a4 (
>43e2	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>43e7	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>43ec	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>43f1	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>43f9	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>43fe	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4403	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>4409	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>440e	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4413	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>4418	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>441f	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4426	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>442b	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4432	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>4439	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>443f	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4446	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>444c	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4454	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>445a	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>445f	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4465	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>446b	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4471	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4476	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>447b	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4482	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>4489	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>4491	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>4499	01 c0					.byte $01,$c0                          ; $c3 @
>449b	01 fe					.byte $01,$fe                          ; $c4 ~
>449d	01 a6					.byte $01,$a6                          ; $c5 &
>449f	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>44a5	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>44ad	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>44b1	01 a9					.byte $01,$a9                          ; $c9 )
>44b3	01 ba					.byte $01,$ba                          ; $ca :
>44b5	01 ac					.byte $01,$ac                          ; $cb ,
>44b7	01 bb					.byte $01,$bb                          ; $cc ;
>44b9	01 a7					.byte $01,$a7                          ; $cd '
>44bb	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>44be	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>44c3	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>44c8	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>44ce	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>44d2	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>44d6	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>44da	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>44e0	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>44e5	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>44e9	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>44ef	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>44f4	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>44fa	02 41 d4				.byte $02,$41,$d4                      ; $db at
>44fd	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4502	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>4509	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>450e	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4513	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>4518	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>451c	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4522	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4526	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>452d	01 ae					.byte $01,$ae                          ; $e5 .
>452f	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4534	01 a3					.byte $01,$a3                          ; $e7 #
>4536	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>453c	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.453d					Group1Text:
>453d	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4542	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4547	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>454c	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4550	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4556	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>455a	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>455f	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4567	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>456b	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4570	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>4575	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>457a	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4580	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4587	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>458b	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>4591	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>4595	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>4599	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>459d	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>45a1	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>45a5	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>45a9	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>45ad	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>45b1	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>45b5	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>45b9	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>45bd	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>45c1	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>45c5	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>45c9	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>45cd	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>45d1	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>45d5	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>45d9	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>45dd	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>45e1	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>45e5	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>45e9	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>45ed	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>45f1	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>45f5	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>45f9	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>45fd	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4601	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4605	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>4609	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>460d	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4611	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4615	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>4619	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>461d	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4621	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4625	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>4629	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>462d	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4631	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4635	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>4639	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>463d	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4641	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4645	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>4649	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>464d	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4651	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4655	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>4659	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>465d	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4661	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4665	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>4669	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>466d	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4671	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4675	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>4679	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>467d	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4681	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4685	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>4689	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.468a					Group2Text:
>468a	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>4690	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>4696	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>469c	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>46a1	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>46a9	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>46b0	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>46b4	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>46b9	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>46bf	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>46c4	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>46c9	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $91 plot
>46ce	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $92 line
>46d3	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.46d4					Group3Text:
>46d4	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>46db	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>46e2	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>46ea	58 a8
>46ec	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>46f4	59 a8
>46f6	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>46fb	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4702	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>4709	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4710	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4717	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4718					tokeniserHandler:
.4718	7c 1b 47	jmp ($471b,x)			jmp 	(tokeniserVectors,x)
.471b					tokeniserVectors:
>471b	27 47					.word _DummyControlHandler ; index 0
>471d	b7 3e					.word Detokenise           ; index 2
>471f	ab 3e					.word ListLine             ; index 4
>4721	3c 41					.word TokTest              ; index 6
>4723	5c 41					.word Tokenise             ; index 8
>4725	5f 41					.word TokeniseASCIIZ       ; index 10
.4727					_DummyControlHandler:
.4727	60		rts			rts

;******  Return to file: basic.asm

.4728					section_end_tokeniser:
.4728					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4728					AccessArray:
.4728	8a		txa				txa
.4729	48		pha				pha
.472a	e8		inx				inx
.472b	20 f4 47	jsr $47f4			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.472e	68		pla				pla
.472f	aa		tax				tax
.4730	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4732	85 2a		sta $2a				sta 	temp0
.4734	b5 a0		lda $a0,x			lda 	esInt1,x
.4736	85 2b		sta $2b				sta 	temp0+1
.4738	8a		txa				txa
.4739	48		pha				pha
.473a	98		tya				tya
.473b	48		pha				pha
.473c					_AAFollow:
.473c	a0 00		ldy #$00			ldy 	#0
.473e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4740	48		pha				pha
.4741	c8		iny				iny
.4742	b1 2a		lda ($2a),y			lda 	(temp0),y
.4744	85 2b		sta $2b				sta 	temp0+1
.4746	68		pla				pla
.4747	85 2a		sta $2a				sta 	temp0
.4749	e8		inx				inx 								; advance to next stack slot.
.474a	a0 00		ldy #$00			ldy 	#0
.474c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.474e	d5 98		cmp $98,x			cmp 	esInt0,x
.4750	c8		iny				iny
.4751	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4753	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4755	29 7f		and #$7f			and 	#$7F
.4757	f5 a0		sbc $a0,x			sbc 	esInt1,x
.4759	90 50		bcc $47ab			bcc 	_AABadIndex 				; failed on index if max index < required.
.475b	18		clc				clc
.475c	a5 2a		lda $2a				lda 	temp0
.475e	69 02		adc #$02			adc 	#2
.4760	85 2a		sta $2a				sta 	temp0
.4762	90 02		bcc $4766			bcc 	_AANoCarry
.4764	e6 2b		inc $2b				inc 	temp0+1
.4766					_AANoCarry:
.4766	b5 98		lda $98,x			lda 	esInt0,x
.4768	85 2e		sta $2e				sta 	temp2
.476a	b5 a0		lda $a0,x			lda 	esInt1,x
.476c	85 2f		sta $2f				sta 	temp2+1
.476e	ac 19 0e	ldy $0e19			ldy 	varType
.4771	b9 4e 48	lda $484e,y			lda 	CAActualSize-$3A,y
.4774	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4776	30 02		bmi $477a			bmi 	_AANotPointer
.4778	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.477a					_AANotPointer:
.477a	20 f8 48	jsr $48f8			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.477d	18		clc				clc
.477e	a5 2a		lda $2a				lda 	temp0
.4780	65 2e		adc $2e				adc 	temp2
.4782	85 2a		sta $2a				sta 	temp0
.4784	a5 2b		lda $2b				lda 	temp0+1
.4786	65 2f		adc $2f				adc 	temp2+1
.4788	85 2b		sta $2b				sta 	temp0+1
.478a	b5 91		lda $91,x			lda 	esType+1,x
.478c	30 07		bmi $4795			bmi 	_AAUsedAllIndices
.478e	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.4790	10 14		bpl $47a6			bpl 	_AABadDepth 				; no, too many indexes.
.4792	4c 3c 47	jmp $473c			jmp 	_AAFollow 					; otherwise follow them.
.4795					_AAUsedAllIndices:
.4795	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4797	30 0d		bmi $47a6			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4799	68		pla				pla
.479a	a8		tay				tay
.479b	68		pla				pla
.479c	aa		tax				tax
.479d	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.479f	95 98		sta $98,x			sta 	esInt0,x
.47a1	a5 2b		lda $2b				lda 	temp0+1
.47a3	95 a0		sta $a0,x			sta 	esInt1,x
.47a5	60		rts				rts
.47a6					_AABadDepth:
.47a6	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.47a8	20 18 15	jsr $1518		jsr	errorHandler
.47ab					_AABadIndex:
.47ab	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.47ad	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e17					elementSize:
>0e17							.fill	 1
.47b0					CreateArray:
.47b0	20 87 49	jsr $4987			jsr 	AccessSetup 				; set up the basic stuff.
.47b3	ad 19 0e	lda $0e19			lda 	varType 					; is the variable type an array
.47b6	4a		lsr a				lsr 	a
.47b7	90 36		bcc $47ef			bcc 	CANotArray 					; no, cause an error.
.47b9	20 90 4a	jsr $4a90			jsr 	FindVariable 				; does the variable exist already
.47bc	b0 2c		bcs $47ea			bcs 	CAFound 					; cannot redefine it.
.47be	20 c4 49	jsr $49c4			jsr 	CreateVariable 				; create the variable entry.
.47c1	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.47c3	48		pha				pha
.47c4	a5 2b		lda $2b				lda 	temp0+1
.47c6	48		pha				pha
.47c7	a2 00		ldx #$00			ldx 	#0
.47c9	20 f4 47	jsr $47f4			jsr 	GetArrayDimensions 			; get the array dimensions
.47cc	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.47ce	20 24 48	jsr $4824			jsr 	CreateArrayLevel 			; level to YA
.47d1	aa		tax				tax 								; level now in YX
.47d2	68		pla				pla 								; get address back to temp0 to write.
.47d3	85 2b		sta $2b				sta 	temp0+1
.47d5	68		pla				pla
.47d6	85 2a		sta $2a				sta 	temp0
.47d8	98		tya				tya 								; write YX there.
.47d9	a0 06		ldy #$06			ldy 	#6
.47db	91 2a		sta ($2a),y			sta 	(temp0),y
.47dd	88		dey				dey
.47de	8a		txa				txa
.47df	91 2a		sta ($2a),y			sta 	(temp0),y
.47e1	ac 1a 0e	ldy $0e1a			ldy 	varEnd 						; restore Y and exit.
.47e4	60		rts				rts
.47e5					CASize:
.47e5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.47e7	20 18 15	jsr $1518		jsr	errorHandler
.47ea					CAFound:
.47ea	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.47ec	20 18 15	jsr $1518		jsr	errorHandler
.47ef					CANotArray:
.47ef	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.47f1	20 18 15	jsr $1518		jsr	errorHandler
.47f4					GetArrayDimensions:
.47f4	ad 19 0e	lda $0e19			lda 	varType 					; push variable type on the stack.
.47f7	48		pha				pha
.47f8	ac 1a 0e	ldy $0e1a			ldy 	varEnd
.47fb					_CAGetDimensions:
.47fb	8a		txa				txa 								; get the next level
.47fc	a2 0a		ldx #$0a		ldx	#10
.47fe	20 d8 3b	jsr $3bd8		jsr	mainHandler
.4801	aa		tax				tax
.4802	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4804	29 e0		and #$e0			and 	#$E0
.4806	15 a8		ora $a8,x			ora 	esInt2,x
.4808	15 b0		ora $b0,x			ora 	esInt3,x
.480a	d0 d9		bne $47e5			bne 	CASize
.480c	e8		inx				inx 								; next level.
.480d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.480f	c8		iny				iny
.4810	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4812	f0 e7		beq $47fb			beq 	_CAGetDimensions
.4814	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4816	d0 cd		bne $47e5			bne 	CASize
.4818	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.481a	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.481c	68		pla				pla 								; restore the variable type ($3A-$3F)
.481d	8d 19 0e	sta $0e19			sta 	varType
.4820	8c 1a 0e	sty $0e1a			sty 	varEnd 						; save exit Y value, after dimensions
.4823	60		rts				rts
.4824					CreateArrayLevel:
.4824	ac 19 0e	ldy $0e19			ldy 	varType
.4827	b9 4e 48	lda $484e,y			lda 	CAActualSize-$3A,y
.482a	8d 17 0e	sta $0e17			sta 	elementSize 				; get element size this level.
.482d	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.482f	30 05		bmi $4836			bmi 	_CANotPointer
.4831	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4833	8d 17 0e	sta $0e17			sta 	elementSize
.4836					_CANotPointer:
.4836	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4838	85 2a		sta $2a				sta 	temp0
.483a	48		pha				pha
.483b	a5 36		lda $36				lda 	lowMemory+1
.483d	85 2b		sta $2b				sta 	temp0+1
.483f	48		pha				pha
.4840	20 c1 48	jsr $48c1			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4843	a0 00		ldy #$00			ldy 	#0
.4845	b5 98		lda $98,x			lda 	esInt0,x
.4847	91 2a		sta ($2a),y			sta 	(temp0),y
.4849	c8		iny				iny
.484a	b5 a0		lda $a0,x			lda 	esInt1,x
.484c	91 2a		sta ($2a),y			sta 	(temp0),y
.484e	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4850	30 06		bmi $4858			bmi 	_CALNotLast
.4852	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4854	09 80		ora #$80			ora 	#$80
.4856	91 2a		sta ($2a),y			sta 	(temp0),y
.4858					_CALNotLast:
.4858	a9 02		lda #$02			lda 	#2
.485a	20 7e 48	jsr $487e			jsr 	_CALAddTemp0
.485d	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.485f	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4861	b5 a0		lda $a0,x			lda 	esInt1,x
.4863	95 b0		sta $b0,x			sta 	esInt3,x
.4865					_CALClear:
.4865	20 8e 48	jsr $488e			jsr 	EraseOneElement
.4868	ad 17 0e	lda $0e17			lda 	elementSize 				; move to next element
.486b	20 7e 48	jsr $487e			jsr 	_CALAddTemp0
.486e	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4870	d0 02		bne $4874			bne 	_CALNoBorrow
.4872	d6 b0		dec $b0,x			dec 	esInt3,x
.4874					_CALNoBorrow:
.4874	d6 a8		dec $a8,x			dec 	esInt2,x
.4876	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4878	10 eb		bpl $4865			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.487a	68		pla				pla 								; restore the start of this into YA.
.487b	a8		tay				tay
.487c	68		pla				pla
.487d	60		rts				rts
.487e					_CALAddTemp0:
.487e	18		clc				clc
.487f	65 2a		adc $2a				adc 	temp0
.4881	85 2a		sta $2a				sta 	temp0
.4883	90 02		bcc $4887			bcc 	_CALANoCarry
.4885	e6 2b		inc $2b				inc 	temp0+1
.4887					_CALANoCarry:
.4887	60		rts				rts
.4888					CAActualSize:
>4888	04 04						.byte 	VarISize,VarISize
>488a	02 02						.byte 	VarSSize,VarSSize
>488c	06 06						.byte 	VarFSize,VarFSize
.488e					EraseOneElement:
.488e	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.4890	10 09		bpl $489b			bpl 	_EOESubArray
.4892	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4894	ad 19 0e	lda $0e19			lda 	varType
.4897	20 2e 4a	jsr $4a2e			jsr 	ZeroTemp0Y
.489a	60		rts				rts
.489b					_EOESubArray:
.489b	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.489d	48		pha				pha
.489e	a5 2b		lda $2b				lda 	temp0+1
.48a0	48		pha				pha
.48a1	ad 17 0e	lda $0e17			lda 	elementSize 				; save element size
.48a4	48		pha				pha
.48a5	e8		inx				inx 								; create at next level
.48a6	20 24 48	jsr $4824			jsr 	CreateArrayLevel
.48a9	ca		dex				dex
.48aa	85 32		sta $32				sta 	tempShort 					; save A
.48ac	68		pla				pla  								; restore element size.
.48ad	8d 17 0e	sta $0e17			sta 	elementSize
.48b0	68		pla				pla 								; restore temp0, which is where this new array level goes.
.48b1	85 2b		sta $2b				sta 	temp0+1
.48b3	68		pla				pla
.48b4	85 2a		sta $2a				sta 	temp0
.48b6	98		tya				tya 								; store Y/A there
.48b7	a0 01		ldy #$01			ldy 	#1
.48b9	91 2a		sta ($2a),y			sta 	(temp0),y
.48bb	a5 32		lda $32				lda 	tempShort
.48bd	88		dey				dey
.48be	91 2a		sta ($2a),y			sta 	(temp0),y
.48c0	60		rts				rts
.48c1					AllocateArraySpace:
.48c1	18		clc				clc 								; element count + 1 => temp2.
.48c2	b5 98		lda $98,x			lda 	esInt0,x
.48c4	69 01		adc #$01			adc 	#1
.48c6	85 2e		sta $2e				sta 	temp2
.48c8	b5 a0		lda $a0,x			lda 	esInt1,x
.48ca	69 00		adc #$00			adc 	#0
.48cc	85 2f		sta $2f				sta 	temp2+1
.48ce	ad 17 0e	lda $0e17			lda 	elementSize 				; bytes per element
.48d1	20 f8 48	jsr $48f8			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.48d4	18		clc				clc 								; add 2 for 'max element' byte.
.48d5	a5 2e		lda $2e				lda 	temp2
.48d7	69 02		adc #$02			adc 	#2
.48d9	85 2e		sta $2e				sta 	temp2
.48db	90 02		bcc $48df			bcc 	_AASNoCarry
.48dd	e6 2f		inc $2f				inc 	temp2+1
.48df					_AASNoCarry:
.48df	18		clc				clc 								; add to low memory, allocating space.
.48e0	a5 35		lda $35				lda 	lowMemory
.48e2	65 2e		adc $2e				adc 	temp2
.48e4	85 35		sta $35				sta 	lowMemory
.48e6	a5 36		lda $36				lda 	lowMemory+1
.48e8	65 2f		adc $2f				adc 	temp2+1
.48ea	85 36		sta $36				sta 	lowMemory+1
.48ec	b0 05		bcs $48f3			bcs 	_AASFail 					; out of memory as adding causes wrapround
.48ee	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.48f0	b0 01		bcs $48f3			bcs 	_AASFail
.48f2	60		rts				rts
.48f3					_AASFail:
.48f3	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.48f5	20 18 15	jsr $1518		jsr	errorHandler
.48f8					MultiplyTemp2ByA:
.48f8	48		pha				pha
.48f9	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.48fb	85 30		sta $30				sta 	temp3
.48fd	a5 2f		lda $2f				lda 	temp2+1
.48ff	85 31		sta $31				sta 	temp3+1
.4901	68		pla				pla
.4902	06 2e		asl $2e				asl 	temp2 						; double it.
.4904	26 2f		rol $2f				rol 	temp2+1
.4906	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.4908	f0 15		beq $491f			beq 	_MTBAExit
.490a	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.490c	d0 0d		bne $491b			bne 	_MTBANotFloat
.490e	18		clc				clc 								; so this will make it x 3
.490f	a5 2e		lda $2e				lda 	temp2
.4911	65 30		adc $30				adc 	temp3
.4913	85 2e		sta $2e				sta 	temp2
.4915	a5 2f		lda $2f				lda 	temp2+1
.4917	65 31		adc $31				adc 	temp3+1
.4919	85 2f		sta $2f				sta 	temp2+1
.491b					_MTBANotFloat:
.491b	06 2e		asl $2e				asl 	temp2 						; double it.
.491d	26 2f		rol $2f				rol 	temp2+1
.491f					_MTBAExit:
.491f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e18					varHash:
>0e18							.fill	1
.0e19					varType:
>0e19							.fill 	1
.0e1a					varEnd:
>0e1a							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4920					AccessVariable:
.4920	aa		tax				tax 								; stack in X
.4921	c8		iny				iny									; look at second character
.4922	b1 28		lda ($28),y			lda 	(codePtr),y
.4924	88		dey				dey
.4925	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4927	d0 15		bne $493e			bne 	_AVLong 					; no, always use the hash tables.
.4929	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.492b	38		sec				sec 	 							; make it 0-25
.492c	e9 01		sbc #$01			sbc 	#1
.492e	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.492f	0a		asl a				asl 	a
.4930	95 98		sta $98,x			sta 	esInt0,x
.4932	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4934	95 a0		sta $a0,x			sta 	esInt1,x
.4936	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4938	95 90		sta $90,x			sta 	esType,x
.493a	c8		iny				iny 								; skip over the variable reference in the code.
.493b	c8		iny				iny  								; (1 letter, 1 type)
.493c	8a		txa				txa 								; stack in A to return.
.493d	60		rts				rts
.493e					_AVLong:
.493e	8a		txa				txa
.493f	48		pha				pha
.4940	20 87 49	jsr $4987			jsr 	AccessSetup 				; set up the basic information we need for later
.4943	20 90 4a	jsr $4a90			jsr 	FindVariable 				; does the variable exist already ?
.4946	b0 0e		bcs $4956			bcs 	_AVFound 					; yes, then its found
.4948	ad 19 0e	lda $0e19			lda 	varType 					; otherwise, is the variable type an array
.494b	4a		lsr a				lsr 	a
.494c	90 05		bcc $4953			bcc 	_AVCanCreate 				; if not, we can autocreate
.494e	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4950	20 18 15	jsr $1518		jsr	errorHandler
.4953					_AVCanCreate:
.4953	20 c4 49	jsr $49c4			jsr 	CreateVariable 				; variable does not exist, create it.
.4956					_AVFound:
.4956	68		pla				pla
.4957	aa		tax				tax
.4958	18		clc				clc 								; copy temp0 (variable record address)
.4959	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.495b	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.495d	95 98		sta $98,x			sta 	esInt0,x
.495f	a5 2b		lda $2b				lda 	temp0+1
.4961	69 00		adc #$00			adc 	#0
.4963	95 a0		sta $a0,x			sta 	esInt1,x
.4965	a9 00		lda #$00			lda 	#0
.4967	95 a8		sta $a8,x			sta 	esInt2,x
.4969	95 b0		sta $b0,x			sta 	esInt3,x
.496b	ac 19 0e	ldy $0e19			ldy 	varType 					; get the type ID from the type.
.496e	b9 47 49	lda $4947,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4971	95 90		sta $90,x			sta 	esType,x
.4973	ac 1a 0e	ldy $0e1a			ldy 	varEnd 						; restore Y
.4976	ad 19 0e	lda $0e19			lda 	VarType 					; get variable type, put LSB into C
.4979	4a		lsr a				lsr 	a
.497a	90 03		bcc $497f			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.497c	20 28 47	jsr $4728			jsr 	AccessArray 				; array lookup. if LSB was set.
.497f					_AVNotArray:
.497f	8a		txa				txa 								; return stack in A and return
.4980	60		rts				rts
.4981					_AVTypeTable:
>4981	80 80						.byte 	$80,$80						; integer
>4983	c0 c0						.byte 	$C0,$C0 					; string
>4985	81 81						.byte 	$81,$81 					; float
.4987					AccessSetup:
.4987	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4989	8d 18 0e	sta $0e18			sta 	varHash
.498c	98		tya				tya
.498d	48		pha				pha
.498e	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.4990	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4992	b0 0b		bcs $499f			bcs 	_ASComplete
.4994	18		clc				clc 								; add to the hash. Might improve this.
.4995	6d 18 0e	adc $0e18			adc 	varHash
.4998	8d 18 0e	sta $0e18			sta 	varHash
.499b	c8		iny				iny 								; next character
.499c	4c 8e 49	jmp $498e			jmp 	_ASLoop
.499f					_ASComplete:
.499f	8d 19 0e	sta $0e19			sta 	varType 					; save variable type byte
.49a2	c8		iny				iny
.49a3	8c 1a 0e	sty $0e1a			sty 	varEnd 						; save the ending position.
.49a6	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.49a7	e9 3a		sbc #$3a			sbc 	#$3A
.49a9	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.49aa	0a		asl a				asl 	a
.49ab	0a		asl a				asl 	a
.49ac	0a		asl a				asl 	a 							; 2 bytes/word
.49ad	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.49af	ad 18 0e	lda $0e18			lda 	varHash 					; get hash
.49b2	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.49b4	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.49b5	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.49b7	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.49b9	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.49bb	a9 0a		lda #$0a			lda 	#hashTables >> 8
.49bd	69 00		adc #$00			adc 	#0
.49bf	85 3c		sta $3c				sta 	hashList+1
.49c1	68		pla				pla
.49c2	a8		tay				tay
.49c3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.49c4					CreateVariable:
.49c4	98		tya				tya 								; push Y on the stack twice.
.49c5	48		pha				pha									; position in code of the new variable.
.49c6	48		pha				pha
.49c7	ae 19 0e	ldx $0e19			ldx 	varType 					; get var type 0-5 from the var type
.49ca	bd ee 49	lda $49ee,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.49cd	48		pha				pha 								; save length
.49ce	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.49d0	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.49d2	a5 36		lda $36				lda 	lowMemory+1
.49d4	85 2b		sta $2b				sta 	temp0+1
.49d6	68		pla				pla 								; get length
.49d7	18		clc				clc 								; add to low memory.
.49d8	65 35		adc $35				adc 	lowMemory
.49da	85 35		sta $35				sta 	lowMemory
.49dc	90 08		bcc $49e6			bcc 	_CVNoCarry
.49de	e6 36		inc $36				inc 	lowMemory+1
.49e0	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.49e2	c5 34		cmp $34				cmp 	highMemory+1
.49e4	b0 3d		bcs $4a23			bcs 	_CVMemory
.49e6					_CVNoCarry:
.49e6	ad 18 0e	lda $0e18			lda 	varHash 					; store hash at offset 4.
.49e9	a0 04		ldy #$04			ldy 	#4
.49eb	91 2a		sta ($2a),y			sta 	(temp0),y
.49ed	68		pla				pla 								; offset, work out where the variable name is.
.49ee	18		clc				clc
.49ef	65 28		adc $28				adc 	codePtr
.49f1	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.49f3	91 2a		sta ($2a),y			sta 	(temp0),y
.49f5	a5 29		lda $29				lda 	codePtr+1
.49f7	69 00		adc #$00			adc 	#0
.49f9	c8		iny				iny
.49fa	91 2a		sta ($2a),y			sta 	(temp0),y
.49fc	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.49ff	b0 03		bcs $4a04			bcs 	_CVNotImmediate
.4a01	20 66 4a	jsr $4a66			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4a04					_CVNotImmediate:
.4a04	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4a06	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4a08	91 2a		sta ($2a),y			sta 	(temp0),y
.4a0a	c8		iny				iny
.4a0b	b1 3b		lda ($3b),y			lda 	(hashList),y
.4a0d	91 2a		sta ($2a),y			sta 	(temp0),y
.4a0f	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4a11	91 3b		sta ($3b),y			sta 	(hashList),y
.4a13	88		dey				dey
.4a14	a5 2a		lda $2a				lda 	temp0
.4a16	91 3b		sta ($3b),y			sta 	(hashList),y
.4a18	ad 19 0e	lda $0e19			lda 	varType 					; type in A
.4a1b	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4a1d	20 2e 4a	jsr $4a2e			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4a20	68		pla				pla
.4a21	a8		tay				tay
.4a22	60		rts				rts
.4a23					_CVMemory:
.4a23	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4a25	20 18 15	jsr $1518		jsr	errorHandler
>4a28	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4a2a	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4a2c	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4a2e					ZeroTemp0Y:
.4a2e	4a		lsr a				lsr 	a 							; bit 0 in carry
.4a2f	0a		asl a				asl 	a
.4a30	b0 19		bcs $4a4b			bcs 	_ZTExit 					; we don't initialise arrays.
.4a32	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4a34	f0 16		beq $4a4c			beq 	_ZTWriteNullString 			; write "" string
.4a36	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4a38	f0 22		beq $4a5c			beq 	_ZTWriteFloat
.4a3a	98		tya				tya
.4a3b	48		pha				pha
.4a3c	a9 00		lda #$00			lda 	#0
.4a3e	91 2a		sta ($2a),y			sta 	(temp0),y
.4a40	c8		iny				iny
.4a41	91 2a		sta ($2a),y			sta 	(temp0),y
.4a43	c8		iny				iny
.4a44	91 2a		sta ($2a),y			sta 	(temp0),y
.4a46	c8		iny				iny
.4a47	91 2a		sta ($2a),y			sta 	(temp0),y
.4a49	68		pla				pla
.4a4a	a8		tay				tay
.4a4b					_ZTExit:
.4a4b	60		rts				rts
.4a4c					_ZTWriteNullString:
.4a4c	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4a4e	8d ce 0a	sta $0ace			sta 	NullString
.4a51	a9 ce		lda #$ce			lda 	#NullString & $FF
.4a53	91 2a		sta ($2a),y			sta 	(temp0),y
.4a55	a9 0a		lda #$0a			lda 	#NullString >> 8
.4a57	c8		iny				iny
.4a58	91 2a		sta ($2a),y			sta 	(temp0),y
.4a5a	88		dey				dey
.4a5b	60		rts				rts
.4a5c					_ZTWriteFloat:
.4a5c	8a		txa				txa
.4a5d	48		pha				pha
.4a5e	a2 20		ldx #$20		ldx	#32
.4a60	20 50 23	jsr $2350		jsr	floatingpointHandler
.4a63	68		pla				pla
.4a64	aa		tax				tax
.4a65	60		rts				rts
.4a66					CloneVariableName:
.4a66	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4a68	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a6a	85 2e		sta $2e				sta 	temp2
.4a6c	c8		iny				iny
.4a6d	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a6f	85 2f		sta $2f				sta 	temp2+1
.4a71	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4a73	91 2a		sta ($2a),y			sta 	(temp0),y
.4a75	88		dey				dey
.4a76	a5 35		lda $35				lda 	lowMemory
.4a78	91 2a		sta ($2a),y			sta 	(temp0),y
.4a7a	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4a7c					_CVNCopy:
.4a7c	b1 2e		lda ($2e),y			lda		(temp2),y
.4a7e	91 35		sta ($35),y			sta 	(lowMemory),y
.4a80	c8		iny				iny
.4a81	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4a83	90 f7		bcc $4a7c			bcc 	_CVNCopy
.4a85	98		tya				tya 								; add Y to low memory
.4a86	18		clc				clc
.4a87	65 35		adc $35				adc 	lowMemory
.4a89	85 35		sta $35				sta 	lowMemory
.4a8b	90 02		bcc $4a8f			bcc 	_CVNNoCarry
.4a8d	e6 36		inc $36				inc 	lowMemory+1
.4a8f					_CVNNoCarry:
.4a8f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4a90					FindVariable:
.4a90	98		tya				tya
.4a91	48		pha				pha
.4a92	98		tya				tya 								; point temp2 to the actual name
.4a93	18		clc				clc 								; in memory of the variable being created
.4a94	65 28		adc $28				adc 	codePtr
.4a96	85 2e		sta $2e				sta 	temp2
.4a98	a5 29		lda $29				lda 	codePtr+1
.4a9a	69 00		adc #$00			adc 	#0
.4a9c	85 2f		sta $2f				sta 	temp2+1
.4a9e	a0 00		ldy #$00			ldy 	#0
.4aa0	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4aa2	85 2a		sta $2a				sta 	temp0
.4aa4	a5 3c		lda $3c				lda 	hashList+1
.4aa6	85 2b		sta $2b				sta 	temp0+1
.4aa8	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4aaa	b1 2a		lda ($2a),y			lda 	(temp0),y
.4aac	f0 2c		beq $4ada			beq 	_FVFail
.4aae	aa		tax				tax
.4aaf	88		dey				dey		 							; get LSB
.4ab0	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ab2	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4ab4	86 2b		stx $2b				stx 	temp0+1
.4ab6	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4ab8	b1 2a		lda ($2a),y			lda 	(temp0),y
.4aba	cd 18 0e	cmp $0e18			cmp 	varHash
.4abd	d0 e9		bne $4aa8			bne 	_FVNext 					; if not, no point in checking the name.
.4abf	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4ac0	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ac2	85 2d		sta $2d				sta 	temp1+1
.4ac4	88		dey				dey
.4ac5	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ac7	85 2c		sta $2c				sta 	temp1
.4ac9	a0 00		ldy #$00			ldy 	#0
.4acb					_FVCheck:
.4acb	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4acd	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4acf	d0 d7		bne $4aa8			bne 	_FVNext		 				; fail if different.
.4ad1	c8		iny				iny
.4ad2	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4ad4	90 f5		bcc $4acb			bcc 	_FVCheck
.4ad6	68		pla				pla
.4ad7	a8		tay				tay
.4ad8	38		sec				sec
.4ad9	60		rts				rts
.4ada					_FVFail:
.4ada	68		pla				pla
.4adb	a8		tay				tay
.4adc	18		clc				clc
.4add	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4ade					HashTableReset:
.4ade	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4ae0	a9 00		lda #$00			lda 	#0
.4ae2					_HTRClear:
.4ae2	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4ae5	ca		dex				dex
.4ae6	d0 fa		bne $4ae2			bne 	_HTRClear
.4ae8	60		rts				rts

;******  Return to file: variable/variable.asm

.4ae9					variableHandler:
.4ae9	7c ec 4a	jmp ($4aec,x)			jmp 	(variableVectors,x)
.4aec					variableVectors:
>4aec	f4 4a					.word _DummyControlHandler ; index 0
>4aee	20 49					.word AccessVariable       ; index 2
>4af0	b0 47					.word CreateArray          ; index 4
>4af2	de 4a					.word HashTableReset       ; index 6
.4af4					_DummyControlHandler:
.4af4	60		rts			rts

;******  Return to file: basic.asm

.4af5					section_end_variable:
.4af5					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e1b					endStorage:
>4af5							.align 	256
.4b00					programMemory:
>4aff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4b00					section_end_footer:

;******  End of listing
