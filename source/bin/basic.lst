
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Fri Mar 12 12:12:13 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	56 34						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 3a		lda #$3a			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 64 11	jsr $1164		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 d0 16	jsr $16d0		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 82 36	jsr $3682		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.102d					assemblerHandler:
.102d	7c 30 10	jmp ($1030,x)			jmp 	(assemblerVectors,x)
.1030					assemblerVectors:

;******  Return to file: basic.asm

.1030					section_end_assembler:
.1030					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1030					X16Break:
.1030	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.1033	f0 01		beq $1036			beq 	_IsBreak
.1035	60		rts				rts
.1036					_IsBreak:
.1036	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1038	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.103b					ExternSave:
.103b	98		tya				tya
.103c	48		pha				pha
.103d	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.1040	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1043	a9 01		lda #$01			lda 	#1
.1045	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1047	a0 00		ldy #$00			ldy 	#0
.1049	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.104c	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.104e	85 2a		sta $2a				sta 	temp0
.1050	a5 51		lda $51				lda 	esInt1+1
.1052	85 2b		sta $2b				sta 	temp0+1
.1054	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.1056	a4 52		ldy $52				ldy 	esInt1+2
.1058	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.105a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.105d	b0 03		bcs $1062			bcs 	_ESSave
.105f	68		pla				pla
.1060	a8		tay				tay
.1061	60		rts				rts
.1062					_ESSave:
.1062	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.1064	20 85 11	jsr $1185		jsr	errorHandler
.1067					ExternLoad:
.1067	98		tya				tya
.1068	48		pha				pha
.1069	20 8b 10	jsr $108b			jsr 	ExternGetLength 			; get length of file into A name YX
.106c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.106f	a9 01		lda #$01			lda 	#1
.1071	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1073	a0 00		ldy #$00			ldy 	#0
.1075	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1078	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.107a	a4 51		ldy $51				ldy 	esInt1+1
.107c	a9 00		lda #$00			lda 	#0 							; load command
.107e	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.1081	b0 03		bcs $1086			bcs 	_ESLoad
.1083	68		pla				pla
.1084	a8		tay				tay
.1085	60		rts				rts
.1086					_ESLoad:
.1086	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.1088	20 85 11	jsr $1185		jsr	errorHandler
.108b					ExternGetLength:
.108b	a5 48		lda $48				lda 	esInt0 						; length into A.
.108d	85 2a		sta $2a				sta 	temp0
.108f	a5 50		lda $50				lda 	esInt1
.1091	85 2b		sta $2b				sta 	temp0+1
.1093	a0 00		ldy #$00			ldy 	#0
.1095	b1 2a		lda ($2a),y			lda 	(temp0),y
.1097	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.1099	a4 50		ldy $50				ldy 	esInt1
.109b	e8		inx				inx 								; advance over the length pointer.
.109c	d0 01		bne $109f			bne 	_ESNoCarry
.109e	c8		iny				iny
.109f					_ESNoCarry:
.109f	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af2					bufferCount:
>0af2							.fill 	0
.0af2					bufferStorage:
>0af2							.fill 	MaxLineInputSize
.10a0					IOInitialise:
.10a0	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.10a2	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10a5	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.10a7	20 f7 10	jsr $10f7			jsr 	IOInk
.10aa	a9 00		lda #$00			lda 	#0
.10ac	20 0b 11	jsr $110b			jsr 	IOPaper
.10af	20 b3 10	jsr $10b3			jsr 	IOClearScreen
.10b2	60		rts				rts
.10b3					IOClearScreen:
.10b3	48		pha				pha
.10b4	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.10b6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					IONewLine:
.10bb	48		pha				pha
.10bc	a9 0d		lda #$0d			lda 	#13
.10be	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c1	68		pla				pla
.10c2	60		rts				rts
.10c3					IOTab:
.10c3	48		pha				pha
.10c4	a9 20		lda #$20			lda 	#32
.10c6	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.10c9	68		pla				pla
.10ca	60		rts				rts
.10cb					IOPrintAscii:
.10cb					IOPrintChar:
.10cb	aa		tax				tax 								; save in X so we can save Y
.10cc	5a		phy				phy
.10cd	8a		txa				txa
.10ce	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.10d0	d0 02		bne $10d4			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.10d2	a9 14		lda #$14			lda 	#$14
.10d4					_IOPCNotBS:
.10d4	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.10d7	7a		ply				ply
.10d8	60		rts				rts
.10d9					IOInkey:
.10d9	98		tya				tya
.10da	48		pha				pha
.10db	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.10de	85 32		sta $32				sta 	tempShort
.10e0	68		pla				pla
.10e1	a8		tay				tay
.10e2	a5 32		lda $32				lda 	tempShort					; no key pressed.
.10e4	f0 10		beq $10f6			beq 	_IOIExit
.10e6	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.10e8	f0 0c		beq $10f6			beq 	_IOIExit
.10ea	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.10ec	f0 06		beq $10f4			beq 	_IOIBackspace
.10ee	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.10f0	90 e7		bcc $10d9			bcc 	IOInkey
.10f2	b0 02		bcs $10f6			bcs 	_IOIExit
.10f4					_IOIBackspace:
.10f4	a9 08		lda #$08			lda 	#8 							; return chr(8)
.10f6					_IOIExit:
.10f6	60		rts				rts
.10f7					IOInk:
.10f7	48		pha				pha
.10f8	29 07		and #$07			and 	#7 							; 8 primaries
.10fa	aa		tax				tax
.10fb	bd 03 11	lda $1103,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.10fe	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1101	68		pla				pla
.1102	60		rts				rts
.1103					_IOColourTable:
>1103	90						.byte 	$90 					; 0 Black
>1104	96						.byte 	$96 					; 1 Red
>1105	1e						.byte 	$1E 					; 2 Green
>1106	9e						.byte 	$9E 					; 3 Yellow
>1107	9a						.byte 	$9A 					; 4 Blue
>1108	9c						.byte 	$9C 					; 5 Magenta
>1109	9f						.byte 	$9F 					; 6 Cyan
>110a	05						.byte 	$05 					; 7 White
.110b					IOPaper:
.110b	48		pha				pha
.110c	48		pha				pha
.110d	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.110f	20 cb 10	jsr $10cb			jsr 	IOPrintChar 			; and then swap them again.
.1112	68		pla				pla
.1113	20 f7 10	jsr $10f7			jsr 	IOInk
.1116	a9 01		lda #$01			lda 	#1
.1118	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.111b	68		pla				pla
.111c	60		rts				rts
.111d					IOLocate:
.111d	48		pha				pha
.111e	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1120	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1123	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1125	20 2c 11	jsr $112c			jsr 	_IOLoc2
.1128	68		pla				pla
.1129	a8		tay				tay
.112a	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.112c					_IOLoc2:
.112c	c0 00		cpy #$00			cpy 	#0
.112e	f0 06		beq $1136			beq 	_IOLocExit
.1130	20 cb 10	jsr $10cb			jsr 	IOPrintChar
.1133	88		dey				dey
.1134	d0 f6		bne $112c			bne 	_IOLoc2
.1136					_IOLocExit:
.1136	60		rts				rts
.1137					IOInput:
.1137	a9 00		lda #$00			lda 	#0
.1139	8d f2 0a	sta $0af2			sta 	bufferCount
.113c					_IOILoop:
.113c	20 cf ff	jsr $ffcf			jsr 	$FFCF
.113f	c9 0d		cmp #$0d			cmp 	#13
.1141	f0 10		beq $1153			beq 	_IOIExit
.1143	ae f2 0a	ldx $0af2			ldx 	bufferCount
.1146	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.1148	f0 f2		beq $113c			beq 	_IOILoop
.114a	ee f2 0a	inc $0af2			inc 	bufferCount
.114d	9d f3 0a	sta $0af3,x			sta 	bufferStorage+1,x
.1150	4c 3c 11	jmp $113c			jmp 	_IOILoop
.1153					_IOIExit:
.1153	a9 f2		lda #$f2			lda 	#(bufferCount) & $FF
.1155	85 2a		sta $2a				sta 	temp0
.1157	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.1159	85 2b		sta $2b				sta 	1+(temp0)
.115b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.115c					IOReadTimer:
.115c	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.115f	48		pha				pha
.1160	8a		txa				txa
.1161	a8		tay				tay
.1162	68		pla				pla
.1163	60		rts				rts

;******  Return to file: device/device.asm

.1164					deviceHandler:
.1164	7c 67 11	jmp ($1167,x)			jmp 	(deviceVectors,x)
.1167					deviceVectors:
>1167	30 10					.word X16Break             ; index 0
>1169	b3 10					.word IOClearScreen        ; index 2
>116b	bb 10					.word IONewLine            ; index 4
>116d	a0 10					.word IOInitialise         ; index 6
>116f	f7 10					.word IOInk                ; index 8
>1171	d9 10					.word IOInkey              ; index 10
>1173	37 11					.word IOInput              ; index 12
>1175	67 10					.word ExternLoad           ; index 14
>1177	1d 11					.word IOLocate             ; index 16
>1179	0b 11					.word IOPaper              ; index 18
>117b	cb 10					.word IOPrintChar          ; index 20
>117d	cb 10					.word IOPrintAscii         ; index 22
>117f	3b 10					.word ExternSave           ; index 24
>1181	c3 10					.word IOTab                ; index 26
>1183	5c 11					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.1185					section_end_device:
.1185					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1185					ErrorHandler:
.1185	8a		txa				txa
.1186	48		pha				pha
.1187	a9 01		lda #$01			lda 	#1 							; red
.1189	a2 08		ldx #$08		ldx	#8
.118b	20 64 11	jsr $1164		jsr	deviceHandler
.118e	68		pla				pla
.118f	aa		tax				tax
.1190	a9 fb		lda #$fb			lda 	#(ErrorTextList) & $FF
.1192	85 2a		sta $2a				sta 	temp0
.1194	a9 11		lda #$11			lda 	#(ErrorTextList) >> 8
.1196	85 2b		sta $2b				sta 	1+(temp0)
.1198	ca		dex		_EHFind:dex									; errors start at 1
.1199	f0 10		beq $11ab			beq 	_EHFound
.119b	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.119d	38		sec				sec
.119e	a5 2a		lda $2a				lda 	temp0
.11a0	71 2a		adc ($2a),y			adc 	(temp0),y
.11a2	85 2a		sta $2a				sta 	temp0
.11a4	90 f2		bcc $1198			bcc 	_EHFind
.11a6	e6 2b		inc $2b				inc 	temp0+1
.11a8	4c 98 11	jmp $1198			jmp 	_EHFind
.11ab					_EHFound:
.11ab	20 4c 14	jsr $144c			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.11ae	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.11b0	b1 28		lda ($28),y			lda 	(codePtr),y
.11b2	f0 39		beq $11ed			beq 	_EHNoLine
.11b4	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.11b6	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.11b9	90 32		bcc $11ed			bcc 	_EHNoLine
.11bb	a9 f7		lda #$f7			lda 	#(EHAtMsg) & $FF
.11bd	85 2a		sta $2a				sta 	temp0
.11bf	a9 11		lda #$11			lda 	#(EHAtMsg) >> 8
.11c1	85 2b		sta $2b				sta 	1+(temp0)
.11c3	20 4c 14	jsr $144c			jsr 	EHPrintAscii
.11c6	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.11c8	a2 00		ldx #$00			ldx 	#0
.11ca	b1 28		lda ($28),y			lda 	(codePtr),y
.11cc	95 48		sta $48,x			sta 	esInt0,x
.11ce	c8		iny				iny
.11cf	b1 28		lda ($28),y			lda 	(codePtr),y
.11d1	95 50		sta $50,x			sta 	esInt1,x
.11d3	a9 00		lda #$00			lda 	#0
.11d5	95 58		sta $58,x			sta 	esInt2,x
.11d7	95 60		sta $60,x			sta 	esInt3,x
.11d9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.11db	85 2a		sta $2a				sta 	temp0
.11dd	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11df	85 2b		sta $2b				sta 	1+(temp0)
.11e1	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.11e3	a9 00		lda #$00			lda 	#0							; stack position zero.
.11e5	a2 0c		ldx #$0c		ldx	#12
.11e7	20 e6 2c	jsr $2ce6		jsr	mainHandler
.11ea	20 4c 14	jsr $144c			jsr 	EHPrintAscii
.11ed					_EHNoLine:
.11ed	a2 04		ldx #$04		ldx	#4
.11ef	20 64 11	jsr $1164		jsr	deviceHandler
.11f2	a2 02		ldx #$02		ldx	#2
.11f4	20 d0 16	jsr $16d0		jsr	interactionHandler
.11f7					EHAtMsg:
>11f7	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.11fb					ErrorTextList:
>11fb	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1203	20 6e 6f 74 20 50 72 65 73 65 6e 74
>120f	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1217	45 72 72 6f 72
>121c	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>1224	64 69 73 61 62 6c 65 64
>122c	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>1234	6f 6e 20 66 61 69 6c 65 64
>123d	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>1245	42 79 20 5a 65 72 6f
>124c	04 53 74 6f 70				.text 4,"Stop"
>1251	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1259	73 6d 61 74 63 68
>125f	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1267	20 56 61 6c 75 65
>126d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1275	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1283	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>128b	20 63 6f 6d 6d 61
>1291	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1299	20 72 65 66 65 72 65 6e 63 65
>12a3	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>12ab	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>12b9	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>12c1	74 6f 6f 20 6c 6f 6e 67
>12c9	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>12d1	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>12de	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>12e6	69 74 68 6f 75 74 20 52 45 50 45 41 54
>12f3	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>12fb	74 68 6f 75 74 20 46 4f 52
>1304	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>130c	74 68 6f 75 74 20 57 48 49 4c 45
>1317	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>131f	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>132c	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>1334	54 20 69 6e 64 65 78
>133b	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>1343	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>1353	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>135b	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>136a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1372	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1382	63 65
>1384	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>138c	20 50 72 6f 63 65 64 75 72 65
>1396	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>139e	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>13ae	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>13b6	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>13c4	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>13cc	75 69 72 65 73 20 61 72 72 61 79
>13d7	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>13df	61 79 20 69 6e 64 65 78
>13e7	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>13ef	64 61 74 61
>13f3	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>13fb	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1408	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1410	69 6c 65 64
>1414	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>141c	69 6c 65 64
>1420	05 42 72 65 61 6b			.text 5,"Break"
>1426	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>142e	6d 65 6d 6f 72 79
>1434	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>143c	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>144b	00					.byte 0

;******  Return to file: error/errorhandler.asm

.144c					EHPrintAscii:
.144c	a0 00		ldy #$00			ldy 	#0
.144e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1450	aa		tax				tax
.1451	f0 0f		beq $1462			beq 	_EHPExit
.1453					_EHPLoop:
.1453	c8		iny				iny
.1454	8a		txa				txa
.1455	48		pha				pha
.1456	b1 2a		lda ($2a),y			lda 	(temp0),y
.1458	a2 16		ldx #$16		ldx	#22
.145a	20 64 11	jsr $1164		jsr	deviceHandler
.145d	68		pla				pla
.145e	aa		tax				tax
.145f	ca		dex				dex
.1460	d0 f1		bne $1453			bne 	_EHPLoop
.1462					_EHPExit:
.1462	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1463					section_end_error:
.1463					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1463					ExtensionHandler:
.1463	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1465	d0 08		bne $146f			bne 	_ExtensionUnary 			; is passed in A.
.1467	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1469	c8		iny				iny
.146a	0a		asl a				asl 	a
.146b	aa		tax				tax
.146c	7c 6d 14	jmp ($146d,x)			jmp 	(Group2Vectors-12,x)
.146f					_ExtensionUnary:
.146f	48		pha				pha 								; save stack pos in A
.1470	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1472	c8		iny				iny
.1473	0a		asl a				asl 	a
.1474	aa		tax				tax
.1475	68		pla				pla 								; restore stack pos and call group3 command.
.1476	7c 73 14	jmp ($1473,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1479					Group2Vectors:
>1479	8b 14					.word	Command_VPoke            ; $86 vpoke
>147b	8e 14					.word	Command_VDoke            ; $87 vdoke
>147d	46 1e					.word	Unimplemented            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.147f					Group3Vectors:
>147f	cf 14					.word	Command_VPeek            ; $86 vpeek(
>1481	d2 14					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1483					XEvaluateInteger:
.1483	8a		txa				txa
.1484	a2 06		ldx #$06		ldx	#6
.1486	20 e6 2c	jsr $2ce6		jsr	mainHandler
.1489	aa		tax				tax
.148a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.148b					Command_VPoke:
.148b	38		sec				sec 						; one byte , CS
.148c	b0 01		bcs $148f			bcs 	CmdVideoWrite
.148e					Command_VDoke:
.148e	18		clc				clc 						; two bytes, CC
.148f					CmdVideoWrite:
.148f	08		php				php 						; save one or two btes
.1490	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1492	20 83 14	jsr $1483			jsr 	XEvaluateInteger
.1495	20 04 2c	jsr $2c04			jsr 	CheckComma
.1498	e8		inx				inx
.1499	20 83 14	jsr $1483			jsr 	XEvaluateInteger
.149c	ca		dex				dex
.149d	20 ae 14	jsr $14ae			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.14a0	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.14a2	8d 23 9f	sta $9f23			sta 	$9F23
.14a5	28		plp				plp 						; if it was Poke then exit
.14a6	b0 05		bcs $14ad			bcs 	_CVWExit
.14a8	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.14aa	8d 23 9f	sta $9f23			sta 	$9F23
.14ad					_CVWExit:
.14ad	60		rts				rts
.14ae					SetUpTOSVRamAddress:
.14ae	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.14b0	29 01		and #$01			and 	#1
.14b2	15 60		ora $60,x			ora 	esInt3,x
.14b4	d0 14		bne $14ca			bne 	CVWValue
.14b6	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.14b8	8d 20 9f	sta $9f20			sta 	$9F20
.14bb	b5 50		lda $50,x			lda 	esInt1,x
.14bd	8d 21 9f	sta $9f21			sta	 	$9F21
.14c0	b5 58		lda $58,x			lda 	esInt2,x
.14c2	29 01		and #$01			and 	#1
.14c4	09 10		ora #$10			ora 	#$10 				; step 1.
.14c6	8d 22 9f	sta $9f22			sta 	$9F22
.14c9	60		rts				rts
.14ca					CVWValue:
.14ca	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.14cc	20 85 11	jsr $1185		jsr	errorHandler
.14cf					Command_VPeek:
.14cf	38		sec				sec 						; one byte , CS
.14d0	b0 01		bcs $14d3			bcs 	CmdVideoRead
.14d2					Command_VDeek:
.14d2	18		clc				clc 						; two bytes, CC
.14d3					CmdVideoRead:
.14d3	08		php				php 						; save action on stack.
.14d4	aa		tax				tax 						; save stack position
.14d5	20 83 14	jsr $1483			jsr 	XEvaluateInteger 	; address
.14d8	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 	; closing right bracket.
.14db	20 ae 14	jsr $14ae			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.14de	20 84 2b	jsr $2b84			jsr 	MInt32False 		; zero return.
.14e1	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.14e4	95 48		sta $48,x			sta 	esInt0,x
.14e6	28		plp				plp 						; check if DOKE (carry was clear)
.14e7	b0 05		bcs $14ee			bcs 	_CVRExit
.14e9	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.14ec	95 50		sta $50,x			sta 	esInt1,x
.14ee					_CVRExit:
.14ee	8a		txa				txa 						; return X position.
.14ef	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.14f0					section_end_extension:
.14f0					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.14f0					floatingpointHandler:
.14f0	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.14f2	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: basic.asm

.14f5					section_end_floatingpoint:
.14f5					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.14f5					ColdStartEntry:
.14f5	a2 ff		ldx #$ff			ldx 	#$FF
.14f7	9a		txs				txs
.14f8	a2 02		ldx #$02		ldx	#2
.14fa	20 64 11	jsr $1164		jsr	deviceHandler
.14fd	a0 ff		ldy #$ff			ldy 	#255
.14ff					_CSBanner:
.14ff	c8		iny				iny
.1500	b9 26 15	lda $1526,y			lda 	Intro,y
.1503	f0 14		beq $1519			beq 	_CSStart
.1505	c9 08		cmp #$08			cmp 	#8
.1507	90 08		bcc $1511			bcc 	_CSInk
.1509	a2 16		ldx #$16		ldx	#22
.150b	20 64 11	jsr $1164		jsr	deviceHandler
.150e	4c ff 14	jmp $14ff			jmp 	_CSBanner
.1511					_CSInk:
.1511	a2 08		ldx #$08		ldx	#8
.1513	20 64 11	jsr $1164		jsr	deviceHandler
.1516	4c ff 14	jmp $14ff			jmp 	_CSBanner
.1519					_CSStart:
.1519	a2 10		ldx #$10		ldx	#16
.151b	20 e6 2c	jsr $2ce6		jsr	mainHandler
.151e	a2 02		ldx #$02		ldx	#2
.1520	20 e6 2c	jsr $2ce6		jsr	mainHandler
.1523	4c 3a 16	jmp $163a			jmp 	WarmStartEntry
>1526	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>152e	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>153e	20 2a 2a 2a 0d 0d
>1544	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>154c	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>155c	32 30 32 31 0d 0d
>1562	02 42 61 73 69 63 20				.text 	2,"Basic "
>1569	30 2e 31 34					.text "0.14"
>156d	20 28						.text 	" ("
>156f	31 32 2d 4d 61 72 2d 32				.text "12-Mar-21"
>1577	31
>1578	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.157c					DeleteLine:
.157c	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.157f	85 2a		sta $2a				sta 	temp0
.1581	ad c9 0a	lda $0ac9			lda 	basePage+1
.1584	85 2b		sta $2b				sta 	temp0+1
.1586	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1588	a5 48		lda $48				lda 	esInt0
.158a	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.158c	d0 07		bne $1595			bne 	_DLNext
.158e	c8		iny				iny
.158f	a5 50		lda $50				lda 	esInt1
.1591	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1593	f0 0a		beq $159f			beq 	_DLFound
.1595	20 bd 15	jsr $15bd	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1598	d0 ec		bne $1586			bne 	_DLLoop
.159a	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.159c	b1 2a		lda ($2a),y			lda 	(temp0),y
.159e	60		rts				rts
.159f					_DLFound:
.159f	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.15a1	b1 2a		lda ($2a),y			lda 	(temp0),y
.15a3	a8		tay				tay
.15a4	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.15a6					_DLCopyDown:
.15a6	b1 2a		lda ($2a),y			lda 	(temp0),y
.15a8	81 2a		sta ($2a,x)			sta 	(temp0,x)
.15aa	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.15ac	d0 02		bne $15b0			bne 	_DLNoCarry
.15ae	e6 2b		inc $2b				inc 	temp0+1
.15b0					_DLNoCarry:
.15b0	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.15b2	c5 35		cmp $35				cmp 	lowMemory
.15b4	d0 f0		bne $15a6			bne 	_DLCopyDown
.15b6	a5 2b		lda $2b				lda 	temp0+1
.15b8	c5 36		cmp $36				cmp 	lowMemory+1
.15ba	d0 ea		bne $15a6			bne 	_DLCopyDown
.15bc	60		rts				rts
.15bd					IAdvanceTemp0:
.15bd	84 32		sty $32				sty 	tempShort
.15bf	18		clc				clc
.15c0	a0 00		ldy #$00			ldy 	#0
.15c2	b1 2a		lda ($2a),y			lda 	(temp0),y
.15c4	65 2a		adc $2a				adc 	temp0
.15c6	85 2a		sta $2a				sta 	temp0
.15c8	90 02		bcc $15cc			bcc 	_IATNoCarry
.15ca	e6 2b		inc $2b				inc 	temp0+1
.15cc					_IATNoCarry:
.15cc	b1 2a		lda ($2a),y			lda 	(temp0),y
.15ce	a4 32		ldy $32				ldy 	tempShort
.15d0	c9 00		cmp #$00			cmp		#0
.15d2	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.15d3					InsertLine:
.15d3	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.15d6	85 2a		sta $2a				sta 	temp0
.15d8	ad c9 0a	lda $0ac9			lda 	basePage+1
.15db	85 2b		sta $2b				sta 	temp0+1
.15dd					_ILLoop:
.15dd	a0 01		ldy #$01			ldy 	#1
.15df	b1 2a		lda ($2a),y			lda 	(temp0),y
.15e1	c5 48		cmp $48				cmp 	esInt0
.15e3	c8		iny				iny
.15e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.15e6	e5 50		sbc $50				sbc 	esInt1
.15e8	b0 05		bcs $15ef			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.15ea	20 bd 15	jsr $15bd			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.15ed	d0 ee		bne $15dd			bne 	_ILLoop
.15ef					_ILFound:
.15ef	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.15f1	85 2c		sta $2c				sta 	temp1
.15f3	a5 36		lda $36				lda 	lowMemory+1
.15f5	85 2d		sta $2d				sta 	temp1+1
.15f7	ad 1d 0d	lda $0d1d			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.15fa	18		clc				clc
.15fb	69 03		adc #$03			adc 	#3
.15fd	a8		tay				tay
.15fe	a2 00		ldx #$00			ldx 	#0
.1600	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.1602	91 2c		sta ($2c),y			sta 	(temp1),y
.1604	a5 2c		lda $2c				lda 	temp1
.1606	c5 2a		cmp $2a				cmp 	temp0
.1608	d0 06		bne $1610			bne 	_ILMNext
.160a	a5 2d		lda $2d				lda 	temp1+1
.160c	c5 2b		cmp $2b				cmp 	temp0+1
.160e	f0 0b		beq $161b			beq 	_ILMCopy
.1610					_ILMNext:
.1610	a5 2c		lda $2c				lda 	temp1
.1612	d0 02		bne $1616			bne 	_ILNoBorrow
.1614	c6 2d		dec $2d				dec 	temp1+1
.1616					_ILNoBorrow:
.1616	c6 2c		dec $2c				dec 	temp1
.1618	4c 00 16	jmp $1600			jmp 	_ILMove
.161b					_ILMCopy:
.161b	98		tya				tya 								; Y is the offset of the new line.
.161c	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.161e	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1620	a5 48		lda $48				lda 	esInt0
.1622	91 2a		sta ($2a),y			sta 	(temp0),y
.1624	c8		iny				iny
.1625	a5 50		lda $50				lda 	esInt1
.1627	91 2a		sta ($2a),y			sta 	(temp0),y
.1629	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.162b					_ILMCopy2:
.162b	b1 28		lda ($28),y			lda 	(codePtr),y
.162d	c8		iny				iny
.162e	c8		iny				iny
.162f	c8		iny				iny
.1630	91 2a		sta ($2a),y			sta 	(temp0),y
.1632	88		dey				dey
.1633	88		dey				dey
.1634	cc 1d 0d	cpy $0d1d			cpy 	tokenBufferIndex
.1637	d0 f2		bne $162b			bne 	_ILMCopy2
.1639	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.163a					WarmStartEntry:
.163a	a2 ff		ldx #$ff			ldx 	#$FF
.163c	9a		txs				txs
.163d	a9 02		lda #$02			lda 	#2							; green text.
.163f	a2 08		ldx #$08		ldx	#8
.1641	20 64 11	jsr $1164		jsr	deviceHandler
.1644	a2 0c		ldx #$0c		ldx	#12
.1646	20 64 11	jsr $1164		jsr	deviceHandler
.1649	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.164b	85 28		sta $28				sta 	codePtr
.164d	a5 2b		lda $2b				lda 	temp0+1
.164f	85 29		sta $29				sta 	codePtr+1
.1651	a2 04		ldx #$04		ldx	#4
.1653	20 64 11	jsr $1164		jsr	deviceHandler
.1656	a2 06		ldx #$06		ldx	#6
.1658	20 82 36	jsr $3682		jsr	tokeniserHandler
.165b	90 25		bcc $1682			bcc 	WSEError 					; failed.
.165d	a9 1a		lda #$1a			lda 	#(tokenHeader) & $FF
.165f	85 28		sta $28				sta 	codePtr
.1661	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1663	85 29		sta $29				sta 	1+(codePtr)
.1665	ad 1d 0c	lda $0c1d			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1668	c9 80		cmp #$80			cmp 	#$80
.166a	f0 ce		beq $163a			beq 	WarmStartEntry
.166c	29 c0		and #$c0			and 	#$C0						; does it start with a number
.166e	c9 40		cmp #$40			cmp 	#$40
.1670	f0 15		beq $1687			beq 	HasLineNumber
.1672	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1674	8d 1a 0c	sta $0c1a			sta 	tokenHeader 				; fake program line.
.1677	8d 1b 0c	sta $0c1b			sta 	tokenHeader+1
.167a	8d 1c 0c	sta $0c1c			sta 	tokenHeader+2
.167d	a2 12		ldx #$12		ldx	#18
.167f	20 e6 2c	jsr $2ce6		jsr	mainHandler
.1682					WSEError:
.1682	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1684	20 85 11	jsr $1185		jsr	errorHandler
.1687					HasLineNumber:
.1687	a0 03		ldy #$03			ldy 	#3 							; get line number
.1689	a9 00		lda #$00			lda 	#0
.168b	a2 06		ldx #$06		ldx	#6
.168d	20 e6 2c	jsr $2ce6		jsr	mainHandler
.1690	a5 58		lda $58				lda 	esInt2		 				; check in range.
.1692	05 60		ora $60				ora 	esInt3
.1694	d0 ec		bne $1682			bne 	WSEError
.1696	98		tya				tya 								; make codePtr point to code after the line number.
.1697	18		clc				clc
.1698	65 28		adc $28				adc 	codePtr
.169a	85 28		sta $28				sta 	codePtr
.169c	90 02		bcc $16a0			bcc		_HLNNoCarry
.169e	e6 29		inc $29				inc 	codePtr+1
.16a0					_HLNNoCarry:
.16a0	98		tya				tya 								; subtract that offset from the code buffer index
.16a1	38		sec				sec
.16a2	49 ff		eor #$ff			eor 	#$FF
.16a4	6d 1d 0d	adc $0d1d			adc 	tokenBufferIndex
.16a7	18		clc				clc 								; add space allowing for header & $80 trailer
.16a8	69 04		adc #$04			adc 	#4
.16aa	8d 1d 0d	sta $0d1d			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.16ad	20 7c 15	jsr $157c			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.16b0					_HLNNoDelete:
.16b0	ad 1d 0d	lda $0d1d			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.16b3	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.16b5	f0 0c		beq $16c3			beq 	_HLMEditDone
.16b7	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.16b9	18		clc				clc 								; workspace (1k)
.16ba	69 04		adc #$04			adc 	#4
.16bc	c5 34		cmp $34				cmp 	highMemory+1
.16be	b0 0b		bcs $16cb			bcs 	_HLMMemory
.16c0	20 d3 15	jsr $15d3			jsr 	InsertLine 					; insert the line in
.16c3					_HLMEditDone:
.16c3	a2 02		ldx #$02		ldx	#2
.16c5	20 e6 2c	jsr $2ce6		jsr	mainHandler
.16c8	4c 3a 16	jmp $163a			jmp 	WarmStartEntry
.16cb					_HLMMemory:
.16cb	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.16cd	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.16d0					interactionHandler:
.16d0	7c d3 16	jmp ($16d3,x)			jmp 	(interactionVectors,x)
.16d3					interactionVectors:
>16d3	f5 14					.word ColdStartEntry       ; index 0
>16d5	3a 16					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.16d7					section_end_interaction:
.16d7					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.16d7					Command_Assert:
.16d7	20 f1 25	jsr $25f1			jsr 	EvaluateRootInteger 		; what is being asserted.
.16da	20 ab 2b	jsr $2bab			jsr 	MInt32Zero 					; is it true ?
.16dd	f0 01		beq $16e0			beq 	_CAError
.16df	60		rts				rts
.16e0					_CAError:
.16e0	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.16e2	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.16e5					CommandClear:
.16e5					XCommandClear:
.16e5	98		tya				tya
.16e6	48		pha				pha
.16e7	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.16ea	85 33		sta $33				sta 	highMemory
.16ec	ad cd 0a	lda $0acd			lda 	endMemory+1
.16ef	85 34		sta $34				sta 	highMemory+1
.16f1	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.16f4	85 2a		sta $2a				sta 	temp0
.16f6	ad c9 0a	lda $0ac9			lda 	basePage+1
.16f9	85 2b		sta $2b				sta 	temp0+1
.16fb					_CCFindEnd:
.16fb	a0 00		ldy #$00			ldy 	#0
.16fd	b1 2a		lda ($2a),y			lda 	(temp0),y
.16ff	f0 0c		beq $170d			beq 	_CCFoundEnd 				; offset zero is end.
.1701	18		clc				clc
.1702	65 2a		adc $2a				adc 	temp0 						; move to next line
.1704	85 2a		sta $2a				sta 	temp0
.1706	90 f3		bcc $16fb			bcc 	_CCFindEnd
.1708	e6 2b		inc $2b				inc 	temp0+1
.170a	4c fb 16	jmp $16fb			jmp 	_CCFindEnd
.170d					_CCFoundEnd:
.170d	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.170f	85 35		sta $35				sta 	lowMemory
.1711	a5 2b		lda $2b				lda 	temp0+1
.1713	85 36		sta $36				sta 	lowMemory+1
.1715	18		clc				clc 								; put temp0+1 in endProgram
.1716	a5 2a		lda $2a				lda 	temp0
.1718	69 01		adc #$01			adc 	#1
.171a	8d ca 0a	sta $0aca			sta 	endProgram
.171d	a5 2b		lda $2b				lda 	temp0+1
.171f	69 00		adc #$00			adc 	#0
.1721	8d cb 0a	sta $0acb			sta 	endProgram+1
.1724	18		clc				clc 								; put a bit of space in.
.1725	a5 35		lda $35				lda 	lowMemory
.1727	69 04		adc #$04			adc 	#4
.1729	85 35		sta $35				sta 	lowMemory
.172b	90 02		bcc $172f			bcc 	_CCNoCarry
.172d	e6 36		inc $36				inc 	lowMemory+1
.172f					_CCNoCarry:
.172f	20 85 2c	jsr $2c85			jsr 	RSReset 					; reset the return stack.
.1732	a2 04		ldx #$04		ldx	#4
.1734	20 91 39	jsr $3991		jsr	variableHandler
.1737	20 9e 1f	jsr $1f9e			jsr 	ScanProc 					; scan for procedures
.173a	20 51 1d	jsr $1d51			jsr 	CommandRestore 				; do a restore
.173d	68		pla				pla
.173e	a8		tay				tay
.173f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1740					Command_Dim:
.1740	a2 02		ldx #$02		ldx	#2
.1742	20 91 39	jsr $3991		jsr	variableHandler
.1745	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1747	c8		iny				iny
.1748	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.174a	f0 f4		beq $1740			beq 	Command_Dim
.174c	88		dey				dey 								; unpick get
.174d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.174e					Command_FOR:
.174e	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1750	a2 0b		ldx #$0b			ldx 	#11
.1752	20 93 2c	jsr $2c93			jsr 	RSClaim
.1755	20 4f 19	jsr $194f			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1758	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.175a	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.175c	d0 4c		bne $17aa			bne 	_CFType
.175e	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1760	20 ec 2b	jsr $2bec			jsr 	CheckToken
.1763	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1765	20 f3 25	jsr $25f3			jsr 	EvaluateInteger				; get terminal value in stack 1
.1768	98		tya				tya
.1769	48		pha				pha
.176a	a0 04		ldy #$04			ldy 	#4
.176c	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.176e	91 78		sta ($78),y			sta 	(rsPointer),y
.1770	c8		iny				iny
.1771	a5 50		lda $50				lda		esInt1
.1773	91 78		sta ($78),y			sta 	(rsPointer),y
.1775	c8		iny				iny
.1776	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1778	91 78		sta ($78),y			sta 	(rsPointer),y
.177a	c8		iny				iny
.177b	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.177d	91 78		sta ($78),y			sta 	(rsPointer),y
.177f	c8		iny				iny
.1780	a5 51		lda $51				lda		esInt1+1
.1782	91 78		sta ($78),y			sta 	(rsPointer),y
.1784	c8		iny				iny
.1785	a5 59		lda $59				lda		esInt2+1
.1787	91 78		sta ($78),y			sta 	(rsPointer),y
.1789	c8		iny				iny
.178a	a5 61		lda $61				lda		esInt3+1
.178c	91 78		sta ($78),y			sta 	(rsPointer),y
.178e	68		pla				pla
.178f	a8		tay				tay
.1790	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1792	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1794	d0 0e		bne $17a4			bne 	_CFDone
.1796	c8		iny				iny									; skip over step.
.1797	20 f3 25	jsr $25f3			jsr 	EvaluateInteger 			; get step
.179a	98		tya				tya
.179b	48		pha				pha
.179c	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.179e	a0 06		ldy #$06			ldy 	#6
.17a0	91 78		sta ($78),y			sta 	(rsPointer),y
.17a2	68		pla				pla
.17a3	a8		tay				tay
.17a4					_CFDone:
.17a4	a9 01		lda #$01			lda 	#1
.17a6	20 bf 2c	jsr $2cbf			jsr 	RSSavePosition 				; save position.
.17a9	60		rts				rts
.17aa					_CFType:
.17aa	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17ac	20 85 11	jsr $1185		jsr	errorHandler
.17af					Command_NEXT:
.17af	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.17b1	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.17b3	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.17b5	f0 05		beq $17bc			beq 	_isok
.17b7	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.17b9	20 85 11	jsr $1185		jsr	errorHandler
.17bc					_isok:
.17bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.17be	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.17c0	b0 18		bcs $17da			bcs 	_CNNoIndex
.17c2	a2 00		ldx #$00			ldx 	#0 							; start on stack
.17c4	20 26 26	jsr $2626			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.17c7	98		tya				tya
.17c8	48		pha				pha
.17c9	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.17cb	b1 78		lda ($78),y			lda 	(rsPointer),y
.17cd	d5 48		cmp $48,x			cmp 	esInt0,x
.17cf	d0 76		bne $1847			bne 	_CNBadIndex
.17d1	c8		iny				iny
.17d2	b1 78		lda ($78),y			lda 	(rsPointer),y
.17d4	d5 50		cmp $50,x			cmp 	esInt1,x
.17d6	d0 6f		bne $1847			bne 	_CNBadIndex
.17d8	68		pla				pla
.17d9	a8		tay				tay
.17da					_CNNoIndex:
.17da	98		tya				tya
.17db	48		pha				pha
.17dc	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.17de	b1 78		lda ($78),y			lda 	(rsPointer),y
.17e0	85 2a		sta $2a				sta 	temp0
.17e2	c8		iny				iny
.17e3	b1 78		lda ($78),y			lda 	(rsPointer),y
.17e5	85 2b		sta $2b				sta 	temp0+1
.17e7	c8		iny				iny
.17e8	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.17ea	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.17ec	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.17ee	10 01		bpl $17f1			bpl 	_CNSignX
.17f0	ca		dex				dex  								; X = $FF
.17f1					_CNSignX:
.17f1	18		clc				clc 								; add to the LSB
.17f2	a0 00		ldy #$00			ldy 	#0
.17f4	71 2a		adc ($2a),y			adc 	(temp0),y
.17f6	91 2a		sta ($2a),y			sta 	(temp0),y
.17f8					_CNPropogate:
.17f8	c8		iny				iny  								; add the sign extended in X to the rest.
.17f9	8a		txa				txa
.17fa	71 2a		adc ($2a),y			adc 	(temp0),y
.17fc	91 2a		sta ($2a),y			sta 	(temp0),y
.17fe	c8		iny				iny
.17ff	8a		txa				txa
.1800	71 2a		adc ($2a),y			adc 	(temp0),y
.1802	91 2a		sta ($2a),y			sta 	(temp0),y
.1804	c8		iny				iny
.1805	8a		txa				txa
.1806	71 2a		adc ($2a),y			adc 	(temp0),y
.1808	91 2a		sta ($2a),y			sta 	(temp0),y
.180a	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.180b	a5 78		lda $78				lda 	rsPointer
.180d	69 07		adc #$07			adc 	#7
.180f	85 2c		sta $2c				sta 	temp1
.1811	a9 00		lda #$00			lda 	#0
.1813	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1815	a8		tay				tay 								; and clear the Y register again.
.1816	65 79		adc $79				adc 	rsPointer+1
.1818	85 2d		sta $2d				sta 	temp1+1
.181a	38		sec				sec 								; calculate current - limit oring interim values.
.181b	20 53 18	jsr $1853			jsr 	_CNCompare 					; each of these does a byte.
.181e	20 53 18	jsr $1853			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.1821	20 53 18	jsr $1853			jsr 	_CNCompare 					; and the carry of the subtraction.
.1824	20 53 18	jsr $1853			jsr 	_CNCompare
.1827	50 02		bvc $182b			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1829	49 80		eor #$80			eor 	#$80
.182b					_CNNoOverflow:
.182b	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.182d	30 1d		bmi $184c			bmi 	_CNCheckDownto
.182f	c9 00		cmp #$00			cmp 	#0
.1831	30 0c		bmi $183f			bmi 	_CNLoopRound 				; loop round if < =
.1833	a5 2e		lda $2e				lda 	temp2
.1835	f0 08		beq $183f			beq 	_CNLoopRound
.1837					_CNLoopExit:
.1837	68		pla				pla
.1838	a8		tay				tay
.1839	a9 0b		lda #$0b			lda 	#11
.183b	20 b5 2c	jsr $2cb5			jsr 	RSFree
.183e	60		rts				rts
.183f					_CNLoopRound:
.183f	68		pla				pla
.1840	a8		tay				tay
.1841	a9 01		lda #$01			lda 	#1
.1843	20 d2 2c	jsr $2cd2			jsr 	RSLoadPosition				; go back to the loop top
.1846	60		rts				rts
.1847					_CNBadIndex:
.1847	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.1849	20 85 11	jsr $1185		jsr	errorHandler
.184c					_CNCheckDownto:
.184c	c9 00		cmp #$00			cmp 	#0
.184e	10 ef		bpl $183f			bpl 	_CNLoopRound
.1850	4c 37 18	jmp $1837			jmp 	_CNLoopExit
.1853					_CNCompare:
.1853	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1855	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1857	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1859	85 2e		sta $2e				sta 	temp2
.185b	c8		iny				iny
.185c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.185d					CommandIf:
.185d	20 f1 25	jsr $25f1			jsr 	EvaluateRootInteger 		; get what's being tested.
.1860	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1862	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1864	f0 04		beq $186a			beq 	_IfSimple
.1866	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1868	d0 1b		bne $1885			bne 	_IfComplex
.186a					_IfSimple:
.186a	20 ab 2b	jsr $2bab			jsr 	MInt32Zero					; check if TOS zero
.186d	f0 10		beq $187f			beq 	_IfEOL 						; go to next line.
.186f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1871	c8		iny				iny
.1872	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1874	f0 0c		beq $1882			beq 	_IfGoto 					; do the Goto code
.1876	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1878	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.187a	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.187c	f0 04		beq $1882			beq 	_IfGoto
.187e	60		rts				rts 								; else continue on this line.
.187f					_IfEOL:
.187f	4c 13 20	jmp $2013			jmp 	AdvanceNextLine 			; go to next line
.1882					_IfGoto:
.1882	4c 88 20	jmp $2088			jmp 	CommandGoto
.1885					_IfComplex:
.1885	20 ab 2b	jsr $2bab			jsr 	MInt32Zero 					; is it true ?
.1888	f0 01		beq $188b			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.188a	60		rts				rts 								; else continue.
.188b					_IFSkip:
.188b	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.188d	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.188f	4c 11 2c	jmp $2c11			jmp		ScanForward
.1892					Command_ELSE:
.1892	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1894	8a		txa				txa
.1895	4c 11 2c	jmp $2c11			jmp		ScanForward
.1898					Command_ENDIF:
.1898	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be2					InputBuffer:
>0be2							.fill 	MaxInputSize+1
.1899					Command_Input:
.1899	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.189b	c8		iny				iny
.189c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.189e	f0 f9		beq $1899			beq 	Command_Input
.18a0	88		dey				dey 							; undo consume
.18a1	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18a3	f0 54		beq $18f9			beq 	_CIExit 				; : or EOL, exit
.18a5	c9 80		cmp #$80			cmp 	#TOK_EOL
.18a7	f0 50		beq $18f9			beq 	_CIExit
.18a9	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.18ab	90 12		bcc $18bf			bcc 	_CIVariable
.18ad	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.18af	d0 43		bne $18f4			bne 	_CISyntax
.18b1	a2 00		ldx #$00			ldx 	#0
.18b3	20 e8 25	jsr $25e8			jsr 	EvaluateString 			; evaluate and print string
.18b6	20 c4 19	jsr $19c4			jsr 	TOSToTemp0
.18b9	20 73 1c	jsr $1c73			jsr 	PrintString
.18bc	4c 99 18	jmp $1899			jmp 	Command_Input
.18bf					_CIVariable:
.18bf	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.18c1	20 26 26	jsr $2626			jsr 	EvaluateReference  		; this is where its going
.18c4					_CIRetry:
.18c4	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.18c6	a2 14		ldx #$14		ldx	#20
.18c8	20 64 11	jsr $1164		jsr	deviceHandler
.18cb	98		tya				tya
.18cc	48		pha				pha
.18cd	20 0d 19	jsr $190d			jsr 	InputString 			; input a string (manually)
.18d0	a2 01		ldx #$01			ldx 	#1
.18d2	20 fa 18	jsr $18fa			jsr 	BufferToStackX 			; make stack,x ref input string.
.18d5	a5 40		lda $40				lda 	esType 					; if target type numeric
.18d7	29 40		and #$40			and 	#$40 					; then convert to number
.18d9	d0 11		bne $18ec			bne 	_CIWrite
.18db	a2 01		ldx #$01			ldx 	#1
.18dd	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.18e0	a9 0a		lda #$0a			lda 	#10
.18e2	20 f2 29	jsr $29f2			jsr 	MInt32FromString 		; convert it back from a string.
.18e5	68		pla				pla
.18e6	a8		tay				tay
.18e7	b0 03		bcs $18ec			bcs 	_CIWrite 				; successfully converted.
.18e9	18		clc				clc 							; default fail FP conversion
.18ea	90 d8		bcc $18c4			bcc		_CIRetry				; failed, try again.
.18ec					_CIWrite:
.18ec	a2 00		ldx #$00			ldx 	#0
.18ee	20 62 19	jsr $1962			jsr 	WriteValue
.18f1	4c 99 18	jmp $1899			jmp 	Command_Input
.18f4					_CISyntax:
.18f4	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18f6	20 85 11	jsr $1185		jsr	errorHandler
.18f9					_CIExit:
.18f9	60		rts				rts
.18fa					BufferToStackX:
.18fa	a9 e2		lda #$e2			lda 	#InputBuffer & $FF
.18fc	95 48		sta $48,x			sta 	esInt0,x
.18fe	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1900	95 50		sta $50,x			sta 	esInt1,x
.1902	a9 00		lda #$00			lda 	#0
.1904	95 58		sta $58,x			sta 	esInt2,x
.1906	95 60		sta $60,x			sta 	esInt3,x
.1908	a9 40		lda #$40			lda 	#$40
.190a	95 40		sta $40,x			sta 	esType,x
.190c	60		rts				rts
.190d					InputString:
.190d	a9 00		lda #$00			lda 	#0
.190f	8d e2 0b	sta $0be2			sta 	InputBuffer
.1912					_InputLoop:
.1912	a2 00		ldx #$00		ldx	#0
.1914	20 64 11	jsr $1164		jsr	deviceHandler
.1917	a2 0a		ldx #$0a		ldx	#10
.1919	20 64 11	jsr $1164		jsr	deviceHandler
.191c	c9 00		cmp #$00			cmp 	#0
.191e	f0 f2		beq $1912			beq 	_InputLoop
.1920	c9 08		cmp #$08			cmp 	#8
.1922	f0 19		beq $193d			beq 	_InputBackspace
.1924	c9 0d		cmp #$0d			cmp 	#13
.1926	f0 21		beq $1949			beq 	_InputExit
.1928	ae e2 0b	ldx $0be2			ldx 	InputBuffer
.192b	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.192d	f0 e3		beq $1912			beq 	_InputLoop
.192f	9d e3 0b	sta $0be3,x			sta 	InputBuffer+1,x 		; write char
.1932	ee e2 0b	inc $0be2			inc 	InputBuffer 			; advance count.
.1935					_InputPrintLoop:
.1935	a2 14		ldx #$14		ldx	#20
.1937	20 64 11	jsr $1164		jsr	deviceHandler
.193a	4c 12 19	jmp $1912			jmp	 	_InputLoop
.193d					_InputBackspace:
.193d	ad e2 0b	lda $0be2			lda 	InputBuffer 			; at start
.1940	f0 d0		beq $1912			beq 	_InputLoop
.1942	ce e2 0b	dec $0be2			dec 	InputBuffer
.1945	a9 08		lda #$08			lda 	#8
.1947	d0 ec		bne $1935			bne 	_InputPrintLoop
.1949					_InputExit:
.1949	a2 04		ldx #$04		ldx	#4
.194b	20 64 11	jsr $1164		jsr	deviceHandler
.194e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.194f					CommandLet:
.194f	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1951	20 26 26	jsr $2626			jsr 	EvaluateReference
.1954	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1956	20 ec 2b	jsr $2bec			jsr 	CheckToken
.1959	e8		inx				inx 								; do RHS
.195a	20 d4 25	jsr $25d4			jsr 	Evaluate 					; evaluate and dereference
.195d	ca		dex				dex
.195e	20 62 19	jsr $1962			jsr 	WriteValue 					; write it out
.1961	60		rts				rts
.1962					WriteValue:
.1962	98		tya				tya
.1963	48		pha				pha
.1964	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1967	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1969	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.196b	29 40		and #$40			and 	#$40
.196d	d0 50		bne $19bf			bne		_WVType
.196f	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1971	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1973	29 40		and #$40			and 	#$40
.1975	d0 1f		bne $1996			bne 	_WVCopyString
.1977	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1979	15 41		ora $41,x			ora 	esType+1,x
.197b	4a		lsr a				lsr 	a
.197c	90 22		bcc $19a0			bcc 	_WVCopyData4 				; copy 4 data bytes.
.197e	b5 40		lda $40,x			lda 	esType,x
.1980	4a		lsr a				lsr 	a
.1981	90 3c		bcc $19bf			bcc 	_WVType
.1983	e8		inx				inx 								; force the value being written to be a float.
.1984	20 35 21	jsr $2135			jsr 	BPMakeFloat
.1987	ca		dex				dex
.1988	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; set Temp0 to write address
.198b	e8		inx				inx
.198c	8a		txa				txa
.198d	a2 20		ldx #$20		ldx	#32
.198f	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.1992	aa		tax				tax
.1993	4c bc 19	jmp $19bc			jmp 	_WVCopyExit
.1996					_WVCopyString:
.1996	8a		txa				txa
.1997	a2 0e		ldx #$0e		ldx	#14
.1999	20 9c 2f	jsr $2f9c		jsr	stringHandler
.199c	aa		tax				tax
.199d	4c bc 19	jmp $19bc			jmp 	_WVCopyExit
.19a0					_WVCopyData4:
.19a0	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.19a2	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.19a4	d0 10		bne $19b6			bne 	_WVCopyData1
.19a6	a0 03		ldy #$03			ldy 	#3
.19a8	b5 61		lda $61,x			lda 	esInt3+1,x
.19aa	91 2a		sta ($2a),y			sta 	(temp0),y
.19ac	88		dey				dey
.19ad	b5 59		lda $59,x			lda 	esInt2+1,x
.19af	91 2a		sta ($2a),y			sta 	(temp0),y
.19b1	88		dey				dey
.19b2	b5 51		lda $51,x			lda 	esInt1+1,x
.19b4	91 2a		sta ($2a),y			sta 	(temp0),y
.19b6					_WVCopyData1:
.19b6	a0 00		ldy #$00			ldy 	#0
.19b8	b5 49		lda $49,x			lda 	esInt0+1,x
.19ba	91 2a		sta ($2a),y			sta 	(temp0),y
.19bc					_WVCopyExit:
.19bc	68		pla				pla
.19bd	a8		tay				tay
.19be	60		rts				rts
.19bf					_WVType:
.19bf	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.19c1	20 85 11	jsr $1185		jsr	errorHandler
.19c4					TOSToTemp0:
.19c4	b5 48		lda $48,x			lda 	esInt0,x
.19c6	85 2a		sta $2a				sta 	temp0
.19c8	b5 50		lda $50,x			lda 	esInt1,x
.19ca	85 2b		sta $2b				sta 	temp0+1
.19cc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.19cd					CommandList:
.19cd	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.19cf	20 84 2b	jsr $2b84			jsr 	MInt32False
.19d2	e8		inx				inx
.19d3	20 80 2b	jsr $2b80			jsr 	MInt32True
.19d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.19d8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.19da	f0 15		beq $19f1			beq 	_CLEndLine
.19dc	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.19de	30 1b		bmi $19fb			bmi 	_CLDoListing 				; do the whole lot.
.19e0	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.19e2	20 f3 25	jsr $25f3			jsr 	EvaluateInteger
.19e5	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.19e7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.19e9	f0 06		beq $19f1			beq 	_CLEndLine
.19eb	20 c2 2a	jsr $2ac2			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.19ee	4c fb 19	jmp $19fb			jmp 	_CLDoListing 				; own e.g. list 1100
.19f1					_CLEndLine:
.19f1	c8		iny				iny 								; skip comma
.19f2	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.19f4	30 05		bmi $19fb			bmi 	_CLDoListing
.19f6	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.19f8	20 f3 25	jsr $25f3			jsr 	EvaluateInteger				; get end
.19fb					_CLDoListing:
.19fb	20 39 1e	jsr $1e39			jsr 	ResetCodeAddress 			; back to the start.
.19fe					_CLCheckLoop:
.19fe	a2 00		ldx #$00		ldx	#0
.1a00	20 64 11	jsr $1164		jsr	deviceHandler
.1a03	a0 00		ldy #$00			ldy 	#0							; check end.
.1a05	b1 28		lda ($28),y			lda 	(codePtr),y
.1a07	f0 26		beq $1a2f			beq 	_CLEnd
.1a09	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1a0b	20 32 1a	jsr $1a32			jsr 	CLCompareLineTOS
.1a0e	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1a10	f0 0d		beq $1a1f			beq 	_CLNext
.1a12	e8		inx				inx
.1a13	20 32 1a	jsr $1a32			jsr 	CLCompareLineTOS 			; compare vs higher
.1a16	c9 01		cmp #$01			cmp 	#1
.1a18	f0 05		beq $1a1f			beq 	_CLNext
.1a1a	a2 02		ldx #$02		ldx	#2
.1a1c	20 82 36	jsr $3682		jsr	tokeniserHandler
.1a1f					_CLNext:
.1a1f	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1a21	b1 28		lda ($28),y			lda 	(codePtr),y
.1a23	18		clc				clc
.1a24	65 28		adc $28				adc 	codePtr
.1a26	85 28		sta $28				sta 	codePtr
.1a28	90 d4		bcc $19fe			bcc 	_CLCheckLoop
.1a2a	e6 29		inc $29				inc 	codePtr+1
.1a2c	4c fe 19	jmp $19fe			jmp 	_CLCheckLoop
.1a2f					_CLEnd:
.1a2f	4c e1 2c	jmp $2ce1			jmp 	WarmStart 					; warm start after list.
.1a32					CLCompareLineTOS:
.1a32	a0 01		ldy #$01			ldy 	#1
.1a34	b1 28		lda ($28),y			lda 	(codePtr),y
.1a36	55 48		eor $48,x			eor 	esInt0,x
.1a38	85 2a		sta $2a				sta 	temp0
.1a3a	c8		iny				iny
.1a3b	b1 28		lda ($28),y			lda 	(codePtr),y
.1a3d	55 50		eor $50,x			eor 	esInt1,x
.1a3f	05 2a		ora $2a				ora 	temp0
.1a41	f0 10		beq $1a53			beq 	_CLCLTExit
.1a43	88		dey				dey
.1a44	b1 28		lda ($28),y			lda 	(codePtr),y
.1a46	d5 48		cmp $48,x			cmp 	esInt0,x
.1a48	c8		iny				iny
.1a49	b1 28		lda ($28),y			lda 	(codePtr),y
.1a4b	f5 50		sbc $50,x			sbc 	esInt1,x
.1a4d	a9 ff		lda #$ff			lda 	#255
.1a4f	90 02		bcc $1a53			bcc 	_CLCLTExit
.1a51	a9 01		lda #$01			lda 	#1
.1a53					_CLCLTExit:
.1a53	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1a54					CommandLoad:
.1a54	20 7c 1a	jsr $1a7c			jsr 	CLSParameters 					; get parameters for load.
.1a57	08		php				php
.1a58	a2 0e		ldx #$0e		ldx	#14
.1a5a	20 64 11	jsr $1164		jsr	deviceHandler
.1a5d	28		plp				plp
.1a5e	b0 08		bcs $1a68			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1a60	20 e5 16	jsr $16e5			jsr 	CommandClear
.1a63	a2 02		ldx #$02		ldx	#2
.1a65	20 d0 16	jsr $16d0		jsr	interactionHandler
.1a68					_CLExit
.1a68	60		rts				rts
.1a69					CommandSave:
.1a69	20 7c 1a	jsr $1a7c			jsr 	CLSParameters					; get parameters for save
.1a6c	90 08		bcc $1a76			bcc 	_CSNoOverrideAddress
.1a6e	20 04 2c	jsr $2c04			jsr 	CheckComma 						; should be a comma.
.1a71	a2 02		ldx #$02			ldx 	#2
.1a73	20 f3 25	jsr $25f3			jsr 	EvaluateInteger 				; get save end address.
.1a76					_CSNoOverrideAddress:
.1a76	a2 18		ldx #$18		ldx	#24
.1a78	20 64 11	jsr $1164		jsr	deviceHandler
.1a7b	60		rts				rts
.1a7c					CLSParameters:
.1a7c	a2 00		ldx #$00			ldx 	#0 								; string
.1a7e	20 e8 25	jsr $25e8			jsr 	EvaluateString
.1a81	e8		inx				inx 									; erase out +1 +2
.1a82	20 84 2b	jsr $2b84			jsr 	MInt32False
.1a85	e8		inx				inx
.1a86	20 84 2b	jsr $2b84			jsr 	MInt32False
.1a89	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1a8c	85 49		sta $49				sta 	esInt0+1
.1a8e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1a91	85 51		sta $51				sta 	esInt1+1
.1a93	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1a96	85 4a		sta $4a				sta 	esInt0+2
.1a98	ad cb 0a	lda $0acb			lda 	endProgram+1
.1a9b	85 52		sta $52				sta 	esInt1+2
.1a9d	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1a9f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1aa1	d0 08		bne $1aab			bne 	_CLSDefault
.1aa3	c8		iny				iny 									; skip comma
.1aa4	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1aa6	20 f3 25	jsr $25f3			jsr 	EvaluateInteger
.1aa9	38		sec				sec
.1aaa	60		rts				rts
.1aab					_CLSDefault:
.1aab	18		clc				clc
.1aac	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c03					storeSize:
>0c03							.fill 	1
.1aad					CommandLocal:
.1aad	a2 00		ldx #$00			ldx 	#0
.1aaf	20 cb 1a	jsr $1acb			jsr 	LocaliseVariable 			; localise one.
.1ab2					_CLCheckNext:
.1ab2	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1ab4	c8		iny				iny
.1ab5	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1ab7	f0 06		beq $1abf			beq 	_CLAssignment
.1ab9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1abb	f0 f0		beq $1aad			beq 	CommandLocal
.1abd	88		dey				dey
.1abe	60		rts				rts
.1abf					_CLAssignment:
.1abf	a2 01		ldx #$01			ldx 	#1
.1ac1	20 d4 25	jsr $25d4			jsr 	Evaluate 					; evaluate RHS
.1ac4	ca		dex				dex
.1ac5	20 62 19	jsr $1962			jsr 	WriteValue
.1ac8	4c b2 1a	jmp $1ab2			jmp 	_CLCheckNext
.1acb					LocaliseVariable:
.1acb	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1acd	c9 40		cmp #$40			cmp 	#$40
.1acf	b0 67		bcs $1b38			bcs 	_LVSyntax
.1ad1	8a		txa				txa 								; get the address of that variable.
.1ad2	a2 00		ldx #$00		ldx	#0
.1ad4	20 91 39	jsr $3991		jsr	variableHandler
.1ad7	aa		tax				tax
.1ad8	8a		txa				txa
.1ad9	48		pha				pha
.1ada	98		tya				tya
.1adb	48		pha				pha
.1adc	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1adf	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1ae1	0a		asl a				asl 	a
.1ae2	10 16		bpl $1afa			bpl 	_LVPushNumber
.1ae4	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1ae6	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ae8	c8		iny				iny
.1ae9	85 2c		sta $2c				sta 	temp1
.1aeb	b1 2a		lda ($2a),y			lda 	(temp0),y
.1aed	85 2d		sta $2d				sta 	temp1+1
.1aef	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1af1	b1 2c		lda ($2c),y			lda 	(temp1),y
.1af3	aa		tax				tax 								; into X
.1af4	e8		inx				inx 								; +1 for length.
.1af5	a9 24		lda #$24			lda 	#markerString
.1af7	4c 0f 1b	jmp $1b0f			jmp 	_LVWriteFrame
.1afa					_LVPushNumber:
.1afa	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1afc	85 2c		sta $2c				sta 	temp1
.1afe	a5 2b		lda $2b				lda 	temp0+1
.1b00	85 2d		sta $2d				sta 	temp1+1
.1b02	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1b04	4a		lsr a				lsr 	a
.1b05	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1b07	a2 04		ldx #$04			ldx 	#VarISize
.1b09	90 04		bcc $1b0f			bcc 	_LVIsInteger
.1b0b	a9 23		lda #$23			lda 	#markerFloat
.1b0d	a2 06		ldx #$06			ldx 	#VarFSize
.1b0f					_LVIsInteger:
.1b0f					_LVWriteFrame:
.1b0f	8e 03 0c	stx $0c03			stx 	storeSize 					; number of bytes to copy from (temp0)
.1b12	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1b13	e8		inx				inx
.1b14	e8		inx				inx
.1b15	20 93 2c	jsr $2c93			jsr 	RSClaim 					; create the stack frame.
.1b18	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1b1a	a0 01		ldy #$01			ldy 	#1
.1b1c	91 78		sta ($78),y			sta 	(rsPointer),y
.1b1e	c8		iny				iny
.1b1f	a5 2b		lda $2b				lda 	temp0+1
.1b21	91 78		sta ($78),y			sta 	(rsPointer),y
.1b23	a0 00		ldy #$00			ldy 	#0
.1b25					_LVCopyData:
.1b25	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1b27	c8		iny				iny 								; write allowing for the header bit.
.1b28	c8		iny				iny
.1b29	c8		iny				iny
.1b2a	91 78		sta ($78),y			sta 	(rsPointer),y
.1b2c	88		dey				dey
.1b2d	88		dey				dey
.1b2e	ce 03 0c	dec $0c03			dec 	storeSize 					; do it storesize times
.1b31	d0 f2		bne $1b25			bne 	_LVCopyData
.1b33	68		pla				pla
.1b34	a8		tay				tay
.1b35	68		pla				pla
.1b36	aa		tax				tax
.1b37	60		rts				rts
.1b38					_LVSyntax:
.1b38	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b3a	20 85 11	jsr $1185		jsr	errorHandler
.1b3d					RestoreLocals:
.1b3d	a2 00		ldx #$00			ldx 	#0
.1b3f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1b41	c9 40		cmp #$40			cmp	 	#64
.1b43	90 01		bcc $1b46			bcc 	_RLocal
.1b45	60		rts				rts
.1b46					_RLocal:
.1b46	8a		txa				txa
.1b47	48		pha				pha
.1b48	98		tya				tya
.1b49	48		pha				pha
.1b4a	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1b4c	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b4e	85 2a		sta $2a				sta 	temp0
.1b50	c8		iny				iny
.1b51	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b53	85 2b		sta $2b				sta 	temp0+1
.1b55	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1b57	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b59	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1b5b	f0 28		beq $1b85			beq 	_RString
.1b5d	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1b5f	c9 25		cmp #$25			cmp 	#markerInt
.1b61	f0 02		beq $1b65			beq 	_RIsInteger
.1b63	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1b65					_RIsInteger:
.1b65	8a		txa				txa
.1b66	48		pha				pha
.1b67	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1b69					_RCopyBack:
.1b69	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b6b	88		dey				dey
.1b6c	88		dey				dey
.1b6d	88		dey				dey
.1b6e	91 2a		sta ($2a),y			sta 	(temp0),y
.1b70	c8		iny				iny
.1b71	c8		iny				iny
.1b72	c8		iny				iny
.1b73	c8		iny				iny
.1b74	ca		dex				dex
.1b75	d0 f2		bne $1b69			bne 	_RCopyBack
.1b77	68		pla				pla 								; get size add 3
.1b78	18		clc				clc
.1b79	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1b7b					_RRestoreAAndLoop:
.1b7b	20 b5 2c	jsr $2cb5			jsr 	RSFree
.1b7e	68		pla				pla
.1b7f	a8		tay				tay
.1b80	68		pla				pla
.1b81	aa		tax				tax
.1b82	4c 3d 1b	jmp $1b3d			jmp 	RestoreLocals 				; go see if there are any more locals.
.1b85					_RString:
.1b85	a2 00		ldx #$00			ldx 	#0
.1b87	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1b89	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b8b	95 48		sta $48,x			sta 	esInt0,x
.1b8d	c8		iny				iny
.1b8e	b1 78		lda ($78),y			lda 	(rsPointer),y
.1b90	95 50		sta $50,x			sta 	esInt1,x
.1b92	18		clc				clc
.1b93	a5 78		lda $78				lda 	rsPointer
.1b95	69 03		adc #$03			adc 	#3
.1b97	95 49		sta $49,x			sta 	esInt0+1,x
.1b99	a5 79		lda $79				lda 	rsPointer+1
.1b9b	69 00		adc #$00			adc 	#0
.1b9d	95 51		sta $51,x			sta 	esInt1+1,x
.1b9f	8a		txa				txa
.1ba0	a2 0e		ldx #$0e		ldx	#14
.1ba2	20 9c 2f	jsr $2f9c		jsr	stringHandler
.1ba5	a0 03		ldy #$03			ldy 	#3 							; get string length
.1ba7	b1 78		lda ($78),y			lda 	(rsPointer),y
.1ba9	18		clc				clc
.1baa	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1bac	4c 7b 1b	jmp $1b7b			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1baf					Command_New:
.1baf					Command_XNew:
.1baf	20 39 1e	jsr $1e39			jsr 	ResetCodeAddress 			; point to first line
.1bb2	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1bb4	98		tya				tya
.1bb5	91 28		sta ($28),y			sta 	(codePtr),y
.1bb7	20 e5 16	jsr $16e5			jsr 	CommandClear 				; clear everything down.
.1bba	4c 0d 20	jmp $200d			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1bbd					Command_Poke:
.1bbd	a9 01		lda #$01			lda 	#1
.1bbf	d0 06		bne $1bc7			bne 	PokeGeneral
.1bc1					Command_Doke:
.1bc1	a9 02		lda #$02			lda 	#2
.1bc3	d0 02		bne $1bc7			bne 	PokeGeneral
.1bc5					Command_Loke:
.1bc5	a9 03		lda #$03			lda 	#3
.1bc7					PokeGeneral:
.1bc7	48		pha				pha 								; save id (PDL = 123)
.1bc8	20 f1 25	jsr $25f1			jsr 	EvaluateRootInteger 		; target address
.1bcb	20 04 2c	jsr $2c04			jsr	 	CheckComma
.1bce	e8		inx				inx
.1bcf	20 f3 25	jsr $25f3			jsr 	EvaluateInteger 			; what value to POKE ?
.1bd2	ca		dex				dex
.1bd3	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; temp0 points to the target address
.1bd6	84 32		sty $32				sty 	tempShort 					; save Y
.1bd8	68		pla				pla 								; get copy type (1-3) and dispatch
.1bd9	aa		tax				tax
.1bda	ca		dex				dex
.1bdb	f0 14		beq $1bf1			beq 	_Poke1
.1bdd	ca		dex				dex
.1bde	f0 0b		beq $1beb			beq 	_Poke2
.1be0	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1be2	a5 61		lda $61				lda 	esInt3+1
.1be4	91 2a		sta ($2a),y			sta 	(temp0),y
.1be6	88		dey				dey
.1be7	a5 59		lda $59				lda 	esInt2+1
.1be9	91 2a		sta ($2a),y			sta 	(temp0),y
.1beb					_Poke2:
.1beb	a0 01		ldy #$01			ldy 	#1
.1bed	a5 51		lda $51				lda 	esInt1+1
.1bef	91 2a		sta ($2a),y			sta 	(temp0),y
.1bf1					_Poke1:
.1bf1	a0 00		ldy #$00			ldy 	#0
.1bf3	a5 49		lda $49				lda 	esInt0+1
.1bf5	91 2a		sta ($2a),y			sta 	(temp0),y
.1bf7	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1bf9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c04					lastPrintToken:
>0c04							.fill 	1
.1bfa					Command_Print:
.1bfa	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1bfc	8d 04 0c	sta $0c04			sta 	lastPrintToken
.1bff	88		dey				dey
.1c00					_PrintLoopSkip:
.1c00	c8		iny				iny
.1c01					_PrintLoop:
.1c01	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1c03	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1c05	f0 5b		beq $1c62			beq 	_PrintExit
.1c07	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1c09	f0 57		beq $1c62			beq 	_PrintExit
.1c0b	8d 04 0c	sta $0c04			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1c0e	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1c10	f0 ee		beq $1c00			beq 	_PrintLoopSkip
.1c12	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1c14	f0 3c		beq $1c52			beq	 	_PrintNewLine
.1c16	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1c18	f0 40		beq $1c5a			beq 	_PrintTab
.1c1a	20 d2 25	jsr $25d2			jsr 	EvaluateRoot 				; evaluate something at the root
.1c1d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1c1f	85 2a		sta $2a				sta 	temp0
.1c21	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1c23	85 2b		sta $2b				sta 	1+(temp0)
.1c25	a5 40		lda $40				lda 	esType 						; get type
.1c27	f0 15		beq $1c3e			beq		_PrintInteger
.1c29	4a		lsr a				lsr 	a 							; check for floating point
.1c2a	b0 08		bcs $1c34			bcs 	_PrintFloat
.1c2c					_PrintString:
.1c2c	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1c2e	20 c4 19	jsr $19c4			jsr 	TOSToTemp0
.1c31	4c 4c 1c	jmp $1c4c			jmp 	_PrintTemp0 				; print no leading space.
.1c34					_PrintFloat:
.1c34	a9 00		lda #$00			lda 	#0 							; stack level.
.1c36	a2 14		ldx #$14		ldx	#20
.1c38	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.1c3b	4c 45 1c	jmp $1c45			jmp 	_PrintSpaceTemp0
.1c3e					_PrintInteger:
.1c3e	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1c40	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1c42	20 da 2a	jsr $2ada			jsr 	MInt32ToString				; convert to text
.1c45					_PrintSpaceTemp0:
.1c45	a9 20		lda #$20			lda 	#32
.1c47	a2 14		ldx #$14		ldx	#20
.1c49	20 64 11	jsr $1164		jsr	deviceHandler
.1c4c					_PrintTemp0:
.1c4c	20 73 1c	jsr $1c73			jsr 	PrintString
.1c4f	4c 01 1c	jmp $1c01			jmp 	_PrintLoop
.1c52					_PrintNewLine:
.1c52	a2 04		ldx #$04		ldx	#4
.1c54	20 64 11	jsr $1164		jsr	deviceHandler
.1c57	4c 00 1c	jmp $1c00			jmp 	_PrintLoopSkip
.1c5a					_PrintTab:
.1c5a	a2 1a		ldx #$1a		ldx	#26
.1c5c	20 64 11	jsr $1164		jsr	deviceHandler
.1c5f	4c 00 1c	jmp $1c00			jmp 	_PrintLoopSkip
.1c62					_PrintExit:
.1c62	ad 04 0c	lda $0c04			lda		lastPrintToken 				; check last token
.1c65	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1c67	f0 09		beq $1c72			beq 	_PrintExit2
.1c69	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1c6b	f0 05		beq $1c72			beq 	_PrintExit2
.1c6d	a2 04		ldx #$04		ldx	#4
.1c6f	20 64 11	jsr $1164		jsr	deviceHandler
.1c72					_PrintExit2:
.1c72	60		rts				rts
.1c73					PrintString:
.1c73	8a		txa				txa
.1c74	48		pha				pha
.1c75	98		tya				tya
.1c76	48		pha				pha
.1c77	a0 00		ldy #$00			ldy 	#0							; get length
.1c79	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c7b	aa		tax				tax 								; into X
.1c7c	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1c7e	f0 10		beq $1c90			beq 	_PSExit
.1c80	ca		dex				dex
.1c81	8a		txa				txa
.1c82	48		pha				pha
.1c83	c8		iny				iny
.1c84	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c86	a2 14		ldx #$14		ldx	#20
.1c88	20 64 11	jsr $1164		jsr	deviceHandler
.1c8b	68		pla				pla
.1c8c	aa		tax				tax
.1c8d	4c 7c 1c	jmp $1c7c			jmp 	_PSLoop
.1c90					_PSExit:
.1c90	68		pla				pla
.1c91	a8		tay				tay
.1c92	68		pla				pla
.1c93	aa		tax				tax
.1c94	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c05					paramCount:
>0c05							.fill 	1
.1c95					CallProc:
.1c95	20 32 1f	jsr $1f32			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1c98	48		pha				pha 								; save length on stack
.1c99	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1c9b	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1c9d	48		pha				pha
.1c9e	a5 2a		lda $2a				lda 	temp0
.1ca0	48		pha				pha
.1ca1	98		tya				tya 								; calculate Y + length
.1ca2	18		clc				clc
.1ca3	65 32		adc $32				adc 	tempShort
.1ca5	a8		tay				tay
.1ca6	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1ca8					_CallProcEvalParams:
.1ca8	e8		inx				inx
.1ca9	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1cab	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1cad	f0 0b		beq $1cba			beq 	_CPDoneParams
.1caf	20 d4 25	jsr $25d4			jsr 	Evaluate 					; evaluate a parameter
.1cb2	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1cb4	c8		iny				iny
.1cb5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1cb7	f0 ef		beq $1ca8			beq 	_CallProcEvalParams
.1cb9	88		dey				dey 								; undo consumption.
.1cba					_CPDoneParams:
.1cba	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; check closing parenthesis.
.1cbd	8e 05 0c	stx $0c05			stx 	paramCount 					; store parameter count+1
.1cc0	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1cc2	a9 50		lda #$50			lda 	#markerPROC
.1cc4	20 93 2c	jsr $2c93			jsr 	RSClaim
.1cc7	a9 01		lda #$01			lda 	#1 							; store return address.
.1cc9	20 bf 2c	jsr $2cbf			jsr 	RSSavePosition
.1ccc	68		pla				pla 								; get the new code Ptr
.1ccd	85 28		sta $28				sta 	codePtr
.1ccf	68		pla				pla
.1cd0	85 29		sta $29				sta 	codePtr+1
.1cd2	68		pla				pla 								; length of name + 4 is the param start.
.1cd3	18		clc				clc
.1cd4	69 04		adc #$04			adc 	#4
.1cd6	a8		tay				tay
.1cd7	a2 ff		ldx #$ff			ldx 	#$FF
.1cd9					_CPLoadParameters:
.1cd9	e8		inx				inx 								; point to where the address should be loaded.
.1cda	ec 05 0c	cpx $0c05			cpx 	paramCount 					; too many parameters in definition ?
.1cdd	f0 1e		beq $1cfd			beq 	_CPParamError
.1cdf	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1ce1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.1ce3	f0 0e		beq $1cf3			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1ce5	20 cb 1a	jsr $1acb			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1ce8	20 62 19	jsr $1962			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1ceb	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.1ced	c8		iny				iny
.1cee	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1cf0	f0 e7		beq $1cd9			beq 	_CPLoadParameters
.1cf2	88		dey				dey 								; no, unconsume and check for )
.1cf3					_CPParamComplete:
.1cf3	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; check )
.1cf6	e8		inx				inx 								; check right number of parameters have been consumed
.1cf7	ec 05 0c	cpx $0c05			cpx 	paramCount
.1cfa	d0 01		bne $1cfd			bne 	_CPParamError
.1cfc	60		rts				rts
.1cfd					_CPParamError:
.1cfd	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1cff	20 85 11	jsr $1185		jsr	errorHandler
.1d02					ReturnProc:
.1d02	20 3d 1b	jsr $1b3d			jsr 	RestoreLocals 				; get the locals back.
.1d05	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1d07	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1d09	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1d0b	f0 05		beq $1d12			beq 	_isok
.1d0d	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1d0f	20 85 11	jsr $1185		jsr	errorHandler
.1d12					_isok:
.1d12	a9 01		lda #$01			lda 	#1
.1d14	20 d2 2c	jsr $2cd2			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1d17	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1d19	20 b5 2c	jsr $2cb5			jsr 	RSFree
.1d1c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c06					dataPtr:
>0c06							.fill 	2
.0c08					dataIndex:
>0c08							.fill 	1
.1d1d					CommandRead:
.1d1d	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1d1f	20 26 26	jsr $2626			jsr 	EvaluateReference
.1d22	20 63 1d	jsr $1d63			jsr 	SwapDPCP 					; use the data pointer.
.1d25	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1d27	c8		iny				iny
.1d28	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1d2a	f0 07		beq $1d33			beq 	_CRInData
.1d2c	88		dey				dey
.1d2d	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1d2f	aa		tax				tax
.1d30	20 11 2c	jsr $2c11			jsr 	ScanForward
.1d33					_CRInData:
.1d33	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1d35	20 d4 25	jsr $25d4			jsr 	Evaluate
.1d38	ca		dex				dex 								; and write the value.
.1d39	20 62 19	jsr $1962			jsr 	WriteValue
.1d3c	20 63 1d	jsr $1d63			jsr 	SwapDPCP 					; get the code pointer back.
.1d3f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1d41	c8		iny				iny
.1d42	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1d44	f0 d7		beq $1d1d			beq 	CommandRead
.1d46	88		dey				dey
.1d47	60		rts				rts
.1d48					CommandData:
.1d48	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1d4a	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1d4c	20 11 2c	jsr $2c11			jsr 	ScanForward
.1d4f	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1d50	60		rts				rts
.1d51					CommandRestore:
.1d51	ad c8 0a	lda $0ac8			lda 	basePage
.1d54	8d 06 0c	sta $0c06			sta 	dataPtr
.1d57	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d5a	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1d5d	a9 03		lda #$03			lda 	#3
.1d5f	8d 08 0c	sta $0c08			sta 	dataIndex
.1d62	60		rts				rts
.1d63					SwapDPCP:
.1d63	8a		txa				txa
.1d64	48		pha				pha
.1d65	98		tya				tya 								; swap Y, DataIndex
.1d66	ac 08 0c	ldy $0c08			ldy 	DataIndex
.1d69	8d 08 0c	sta $0c08			sta 	DataIndex
.1d6c	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1d6e	ae 06 0c	ldx $0c06			ldx 	dataptr
.1d71	8d 06 0c	sta $0c06			sta 	dataPtr
.1d74	86 28		stx $28				stx 	codePtr
.1d76	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1d78	ae 07 0c	ldx $0c07			ldx 	dataptr+1
.1d7b	8d 07 0c	sta $0c07			sta 	dataPtr+1
.1d7e	86 29		stx $29				stx 	codePtr+1
.1d80	68		pla				pla
.1d81	aa		tax				tax
.1d82	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1d83					Command_Rem:
.1d83					Command_Rem2:
.1d83	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1d85	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1d87	d0 06		bne $1d8f			bne 	_CRNotString
.1d89	c8		iny				iny
.1d8a	98		tya				tya
.1d8b	38		sec				sec
.1d8c	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1d8e	a8		tay				tay
.1d8f					_CRNotString:
.1d8f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.1d90					Command_Repeat:
.1d90	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1d92	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1d94	20 93 2c	jsr $2c93			jsr 	RSClaim
.1d97	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1d99	20 bf 2c	jsr $2cbf			jsr 	RSSavePosition
.1d9c	60		rts				rts
.1d9d					Command_Until:
.1d9d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1d9f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1da1	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1da3	f0 05		beq $1daa			beq 	_isok
.1da5	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.1da7	20 85 11	jsr $1185		jsr	errorHandler
.1daa					_isok:
.1daa	20 f1 25	jsr $25f1			jsr 	EvaluateRootInteger 		; at the bottom.
.1dad	20 ab 2b	jsr $2bab			jsr 	MInt32Zero					; check if TOS zero
.1db0	d0 06		bne $1db8			bne 	_CUExit
.1db2	a9 01		lda #$01			lda 	#1
.1db4	20 d2 2c	jsr $2cd2			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1db7	60		rts				rts
.1db8					_CUExit:
.1db8	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1dba	20 b5 2c	jsr $2cb5			jsr 	RSFree
.1dbd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c09					breakCounter:
>0c09								.fill 	1
.0c0a					breakIncrement:
>0c0a								.fill 	1
.1dbe					Command_Run:
.1dbe					XCommand_Run:
.1dbe	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.1dc0	9a		txs				txs
.1dc1	20 33 1e	jsr $1e33			jsr 	BreakOn 					; turn break on
.1dc4	20 e5 16	jsr $16e5			jsr 	CommandClear 				; clear everything.
.1dc7	20 39 1e	jsr $1e39			jsr 	ResetCodeAddress 			; back to the start.
.1dca					Command_RunFrom:
.1dca	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.1dcc					CRNextInstruction:
.1dcc	64 7b		stz $7b				stz 	softMemAlloc+1
.1dce	ad 09 0c	lda $0c09			lda 	breakCounter 				; check for break.
.1dd1	6d 0a 0c	adc $0c0a			adc 	breakIncrement
.1dd4	8d 09 0c	sta $0c09			sta 	breakCounter
.1dd7	90 05		bcc $1dde			bcc 	_CRNoChecks
.1dd9	a2 00		ldx #$00		ldx	#0
.1ddb	20 64 11	jsr $1164		jsr	deviceHandler
.1dde					_CRNoChecks
.1dde	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.1de0	10 1c		bpl $1dfe			bpl 	_CRNotToken
.1de2	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1de4	b0 0c		bcs $1df2			bcs 	_CRExecute
.1de6	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1de8	b0 5c		bcs $1e46			bcs 	Unimplemented
.1dea	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1dec	b0 04		bcs $1df2			bcs 	_CRExecute
.1dee	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1df0	b0 16		bcs $1e08			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1df2					_CRExecute:
.1df2	c8		iny				iny 								; consume it.
.1df3	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1df4	aa		tax				tax
.1df5	20 fb 1d	jsr $1dfb			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1df8	4c cc 1d	jmp $1dcc			jmp 	CRNextInstruction
.1dfb					_CRRunRoutine:
.1dfb	7c 50 1e	jmp ($1e50,x)			jmp 	(Group0Vectors,x)
.1dfe					_CRNotToken:
.1dfe	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1e00	b0 44		bcs $1e46			bcs 	Unimplemented
.1e02					_CRDefaultLet:
.1e02	20 4f 19	jsr $194f			jsr 	CommandLet 					; do the default, LET
.1e05	4c cc 1d	jmp $1dcc			jmp 	CRNextInstruction
.1e08					_CRCheckIndirect:
.1e08	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1e0a	f0 f6		beq $1e02			beq 	_CRDefaultLet
.1e0c	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1e0e	f0 f2		beq $1e02			beq 	_CRDefaultLet
.1e10	d0 34		bne $1e46			bne 	Unimplemented
.1e12					CommandShift1:
.1e12	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.1e14	10 30		bpl $1e46			bpl 	Unimplemented 				; we have an error as this should not happen.
.1e16	0a		asl a				asl 	a 							; double into X
.1e17	aa		tax				tax
.1e18	c8		iny				iny 								; advance over it.
.1e19	20 1f 1e	jsr $1e1f			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1e1c	4c cc 1d	jmp $1dcc			jmp 	CRNextInstruction
.1e1f					_RunIt:
.1e1f	7c 10 1f	jmp ($1f10,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1e22					CommandShift2:
.1e22	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1e24	20 63 14	jsr $1463		jsr	extensionHandler
.1e27	4c cc 1d	jmp $1dcc			jmp 	CRNextInstruction
.1e2a					CommandColon:
.1e2a	60		rts				rts
.1e2b					CommandBreak:
.1e2b	20 f1 25	jsr $25f1			jsr 	EvaluateRootInteger
.1e2e	20 ab 2b	jsr $2bab			jsr 	MInt32Zero
.1e31	f0 02		beq $1e35			beq 	BreakOff
.1e33					BreakOn:
.1e33	a2 08		ldx #$08			ldx 	#8
.1e35					BreakOff:
.1e35	8e 0a 0c	stx $0c0a			stx 	breakIncrement
.1e38	60		rts				rts
.1e39					ResetCodeAddress:
.1e39	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1e3c	85 28		sta $28				sta 	codePtr
.1e3e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e41	85 29		sta $29				sta 	codePtr+1
.1e43	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1e45	60		rts				rts
.1e46					Unimplemented:
.1e46	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1e48	20 85 11	jsr $1185		jsr	errorHandler
.1e4b					TKErr01:
.1e4b					TKErr02:
.1e4b					TKErr03:
.1e4b					TKErr04:
.1e4b					TKErr05:
.1e4b					TKErr06:
.1e4b					TKErr07:
.1e4b					TKErr08:
.1e4b					TKErr09:
.1e4b					TKErr10:
.1e4b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1e4d	20 85 11	jsr $1185		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1e50					Group0Vectors:
>1e50	13 20					.word	AdvanceNextLine          ; $80 [[eol]]
>1e52	12 1e					.word	CommandShift1            ; $81 [[sh1]]
>1e54	22 1e					.word	CommandShift2            ; $82 [[sh2]]
>1e56	4b 1e					.word	TKErr09                  ; $83 [[sh3]]
>1e58	4b 1e					.word	TKErr10                  ; $84 [[fpc]]
>1e5a	4b 1e					.word	TKErr08                  ; $85 [[str]]
>1e5c	d7 21					.word	AndHandler               ; $86 and
>1e5e	c4 21					.word	OrHandler                ; $87 or
>1e60	b1 21					.word	XorHandler               ; $88 xor
>1e62	f9 22					.word	CompareGreaterEq         ; $89 >=
>1e64	03 23					.word	CompareLessEq            ; $8a <=
>1e66	e5 22					.word	CompareGreater           ; $8b >
>1e68	db 22					.word	CompareLess              ; $8c <
>1e6a	d1 22					.word	CompareEquals            ; $8d =
>1e6c	ef 22					.word	CompareNotEquals         ; $8e <>
>1e6e	42 21					.word	AddHandler               ; $8f +
>1e70	65 21					.word	SubHandler               ; $90 -
>1e72	fd 21					.word	ShrHandler               ; $91 >>
>1e74	ea 21					.word	ShlHandler               ; $92 <<
>1e76	78 21					.word	MulHandler               ; $93 *
>1e78	8b 21					.word	DivHandler               ; $94 /
>1e7a	9e 21					.word	ModHandler               ; $95 mod
>1e7c	36 22					.word	PowerHandler             ; $96 ^
>1e7e	10 22					.word	WordRefHandler           ; $97 !
>1e80	23 22					.word	ByteRefHandler           ; $98 ?
>1e82	90 1d					.word	Command_Repeat           ; $99 repeat
>1e84	db 20					.word	Command_While            ; $9a while
>1e86	4e 17					.word	Command_FOR              ; $9b for
>1e88	5d 18					.word	CommandIf                ; $9c if
>1e8a	4b 1e					.word	TKErr04                  ; $9d defproc
>1e8c	9d 1d					.word	Command_Until            ; $9e until
>1e8e	fe 20					.word	Command_Wend             ; $9f wend
>1e90	af 17					.word	Command_NEXT             ; $a0 next
>1e92	4b 1e					.word	TKErr06                  ; $a1 then
>1e94	98 18					.word	Command_ENDIF            ; $a2 endif
>1e96	02 1d					.word	ReturnProc               ; $a3 endproc
>1e98	db 24					.word	UnaryParenthesis         ; $a4 (
>1e9a	39 26					.word	UnaryLen                 ; $a5 len(
>1e9c	7d 26					.word	UnarySgn                 ; $a6 sgn(
>1e9e	66 26					.word	UnaryAbs                 ; $a7 abs(
>1ea0	d6 26					.word	Unary_Random             ; $a8 random(
>1ea2	20 27					.word	Unary_Page               ; $a9 page
>1ea4	80 2b					.word	MInt32True               ; $aa true
>1ea6	84 2b					.word	MInt32False              ; $ab false
>1ea8	eb 26					.word	Unary_Min                ; $ac min(
>1eaa	ef 26					.word	Unary_Max                ; $ad max(
>1eac	f8 27					.word	UnarySys                 ; $ae sys(
>1eae	a1 27					.word	UnaryTimer               ; $af timer(
>1eb0	30 25					.word	EventFunction            ; $b0 event(
>1eb2	ca 27					.word	UnaryGet                 ; $b1 get(
>1eb4	ba 27					.word	UnaryInkey               ; $b2 inkey(
>1eb6	71 27					.word	UnaryAlloc               ; $b3 alloc(
>1eb8	31 28					.word	ExecChr                  ; $b4 chr$(
>1eba	61 28					.word	ExecLeft                 ; $b5 left$(
>1ebc	7e 28					.word	ExecMid                  ; $b6 mid$(
>1ebe	a6 28					.word	ExecRight                ; $b7 right$(
>1ec0	13 23					.word	Event_Str                ; $b8 str$(
>1ec2	42 23					.word	UnaryVal                 ; $b9 val(
>1ec4	94 26					.word	UnaryPeek                ; $ba peek(
>1ec6	9a 26					.word	UnaryDeek                ; $bb deek(
>1ec8	a0 26					.word	UnaryLeek                ; $bc leek(
>1eca	57 26					.word	UnaryAsc                 ; $bd asc(
>1ecc	4b 27					.word	UnaryIntToFloat          ; $be int(
>1ece	5e 27					.word	UnaryFloatToInt          ; $bf float(
>1ed0	45 23					.word	UnaryIsVal               ; $c0 isval(
>1ed2	48 28					.word	ExecUpper                ; $c1 upper$(
>1ed4	45 28					.word	ExecLower                ; $c2 lower$(
>1ed6	2e 27					.word	UnaryReference           ; $c3 @
>1ed8	44 27					.word	UnaryComplement          ; $c4 ~
>1eda	41 27					.word	UnaryHexMarker           ; $c5 &
>1edc	e3 27					.word	UnaryGetString           ; $c6 get$(
>1ede	e9 27					.word	UnaryInkeyString         ; $c7 inkey$(
>1ee0	20 28					.word	UnaryMem                 ; $c8 mem
>1ee2	4b 1e					.word	TKErr01                  ; $c9 )
>1ee4	2a 1e					.word	CommandColon             ; $ca :
>1ee6	4b 1e					.word	TKErr02                  ; $cb ,
>1ee8	4b 1e					.word	TKErr03                  ; $cc ;
>1eea	83 1d					.word	Command_Rem2             ; $cd '
>1eec	4b 1e					.word	TKErr07                  ; $ce to
>1eee	4b 1e					.word	TKErr05                  ; $cf step
>1ef0	95 1c					.word	CallProc                 ; $d0 proc
>1ef2	ad 1a					.word	CommandLocal             ; $d1 local
>1ef4	40 17					.word	Command_Dim              ; $d2 dim
>1ef6	83 1d					.word	Command_Rem              ; $d3 rem
>1ef8	4f 19					.word	CommandLet               ; $d4 let
>1efa	99 18					.word	Command_Input            ; $d5 input
>1efc	92 18					.word	Command_ELSE             ; $d6 else
>1efe	ba 20					.word	Command_VDU              ; $d7 vdu
>1f00	fa 1b					.word	Command_Print            ; $d8 print
>1f02	88 20					.word	CommandGOTO              ; $d9 goto
>1f04	5d 20					.word	CommandGOSUB             ; $da gosub
>1f06	70 20					.word	CommandRETURN            ; $db return
>1f08	48 1d					.word	CommandData              ; $dc data
>1f0a	d7 16					.word	Command_Assert           ; $dd assert
>1f0c	bd 1b					.word	Command_Poke             ; $de poke
>1f0e	c1 1b					.word	Command_Doke             ; $df doke
>1f10	c5 1b					.word	Command_Loke             ; $e0 loke
>1f12	2d 20					.word	Command_Ink              ; $e1 ink
>1f14	38 20					.word	Command_Paper            ; $e2 paper
>1f16	27 20					.word	Command_CLS              ; $e3 cls
>1f18	43 20					.word	Command_Locate           ; $e4 locate
>1f1a	2b 1e					.word	CommandBreak             ; $e5 break

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1f1c					Group1Vectors:
>1f1c	e5 16					.word	CommandClear             ; $86 clear
>1f1e	54 1a					.word	CommandLoad              ; $87 load
>1f20	69 1a					.word	CommandSave              ; $88 save
>1f22	cd 19					.word	CommandList              ; $89 list
>1f24	af 1b					.word	Command_New              ; $8a new
>1f26	be 1d					.word	Command_Run              ; $8b run
>1f28	1d 1d					.word	CommandRead              ; $8c read
>1f2a	51 1d					.word	CommandRestore           ; $8d restore
>1f2c	0d 20					.word	CommandEnd               ; $8e end
>1f2e	08 20					.word	CommandStop              ; $8f stop
>1f30	10 20					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c0b					procList:
>0c0b							.fill 	2		 					; terminated by name high being zero.
.0c0d					yInLine:
>0c0d							.fill 	1
.1f32					FindProcedure:
.1f32	8c 0d 0c	sty $0c0d			sty 	yInLine 					; save current position.
.1f35	20 f0 1f	jsr $1ff0			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1f38	85 2c		sta $2c				sta 	temp1
.1f3a	ad 0b 0c	lda $0c0b			lda		procList 					; put procList address in temp2
.1f3d	85 2e		sta $2e				sta 	temp2
.1f3f	ad 0c 0c	lda $0c0c			lda 	procList+1
.1f42	85 2f		sta $2f				sta 	temp2+1
.1f44	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1f46					_FPLoop:
.1f46	b1 2e		lda ($2e),y			lda 	(temp2),y
.1f48	f0 4f		beq $1f99			beq 	_FPError 					; if so, we don't know this procedure.
.1f4a	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.1f4c	c8		iny				iny
.1f4d	b1 2e		lda ($2e),y			lda 	(temp2),y
.1f4f	85 2a		sta $2a				sta 	temp0
.1f51	c8		iny				iny
.1f52	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.1f54	c5 2c		cmp $2c				cmp 	temp1
.1f56	d0 2b		bne $1f83			bne 	_FPNext 					; hash is different, go to next.
.1f58	38		sec				sec
.1f59	ad 0d 0c	lda $0c0d			lda 	yInLine 					; position in line must be at least 4
.1f5c	e9 04		sbc #$04			sbc 	#4
.1f5e	18		clc				clc
.1f5f	65 28		adc $28				adc 	codePtr
.1f61	85 30		sta $30				sta 	temp3
.1f63	a5 29		lda $29				lda 	codePtr+1
.1f65	69 00		adc #$00			adc 	#0
.1f67	85 31		sta $31				sta 	temp3+1
.1f69	98		tya				tya
.1f6a	48		pha				pha
.1f6b	a0 04		ldy #$04			ldy 	#4
.1f6d					_FPCName:
.1f6d	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.1f6f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1f71	d0 0e		bne $1f81			bne 	_FPpulYNext 				; if different go to next one.
.1f73	c8		iny				iny
.1f74	c9 3a		cmp #$3a			cmp 	#$3A
.1f76	90 f5		bcc $1f6d			bcc 	_FPCName 					; compare the whole lot....
.1f78	68		pla				pla 								; throw away the saved Y
.1f79	98		tya				tya 								; length of name is Y-4
.1f7a	38		sec				sec
.1f7b	e9 04		sbc #$04			sbc 	#4
.1f7d	ac 0d 0c	ldy $0c0d			ldy 	yInLine  					; get the original Y back
.1f80	60		rts				rts
.1f81					_FPpulYNext:
.1f81	68		pla				pla
.1f82	a8		tay				tay
.1f83					_FPNext:
.1f83	c8		iny				iny 								; next procedure record.
.1f84	10 c0		bpl $1f46			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1f86	98		tya				tya 								; subtract 128 from Y
.1f87	38		sec				sec
.1f88	e9 80		sbc #$80			sbc 	#128
.1f8a	a8		tay				tay
.1f8b	18		clc				clc 								; add 128 to temp2, so we can have more than
.1f8c	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.1f8e	69 80		adc #$80			adc 	#128
.1f90	85 2e		sta $2e				sta 	temp2
.1f92	90 b2		bcc $1f46			bcc 	_FPLoop
.1f94	e6 2f		inc $2f				inc 	temp2+1
.1f96	4c 46 1f	jmp $1f46			jmp 	_FPLoop
.1f99					_FPError:
.1f99	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1f9b	20 85 11	jsr $1185		jsr	errorHandler
.1f9e					ScanProc:
.1f9e	98		tya				tya
.1f9f	48		pha				pha
.1fa0	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.1fa2	8d 0b 0c	sta $0c0b			sta 	procList
.1fa5	a5 36		lda $36				lda 	lowMemory+1
.1fa7	8d 0c 0c	sta $0c0c			sta 	procList+1
.1faa	20 39 1e	jsr $1e39			jsr 	ResetCodeAddress 			; back to the start.
.1fad					_ScanLoop:
.1fad	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1faf	b1 28		lda ($28),y			lda 	(codePtr),y
.1fb1	f0 2a		beq $1fdd			beq 	_ScanExit
.1fb3	a0 03		ldy #$03			ldy 	#3							; get first token
.1fb5	b1 28		lda ($28),y			lda 	(codePtr),y
.1fb7	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.1fb9	d0 12		bne $1fcd			bne 	_ScanNext
.1fbb	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.1fbd	20 e5 1f	jsr $1fe5			jsr 	_ScanWrite
.1fc0	a5 28		lda $28				lda 	codePtr
.1fc2	20 e5 1f	jsr $1fe5			jsr 	_ScanWrite
.1fc5	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1fc7	20 f0 1f	jsr $1ff0			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1fca	20 e5 1f	jsr $1fe5			jsr 	_ScanWrite					; and write that
.1fcd					_ScanNext:
.1fcd	18		clc				clc
.1fce	a0 00		ldy #$00			ldy 	#0
.1fd0	b1 28		lda ($28),y			lda 	(codePtr),y
.1fd2	65 28		adc $28				adc 	codePtr
.1fd4	85 28		sta $28				sta 	codePtr
.1fd6	90 d5		bcc $1fad			bcc 	_ScanLoop
.1fd8	e6 29		inc $29				inc 	codePtr+1
.1fda	4c ad 1f	jmp $1fad			jmp 	_ScanLoop
.1fdd					_ScanExit:
.1fdd	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1fdf	20 e5 1f	jsr $1fe5			jsr 	_ScanWrite
.1fe2	68		pla				pla
.1fe3	a8		tay				tay
.1fe4	60		rts				rts
.1fe5					_ScanWrite:
.1fe5	a0 00		ldy #$00			ldy 	#0
.1fe7	91 35		sta ($35),y			sta 	(lowMemory),y
.1fe9	e6 35		inc $35				inc 	lowMemory
.1feb	d0 02		bne $1fef			bne 	_SWNoCarry
.1fed	e6 36		inc $36				inc 	lowMemory+1
.1fef					_SWNoCarry:
.1fef	60		rts				rts
.1ff0					CalculateProcedureHash:
.1ff0	a9 00		lda #$00			lda 	#0 							; clear hash.
.1ff2	85 2a		sta $2a				sta 	temp0
.1ff4					_CPHLoop:
.1ff4	18		clc				clc 								; add character and rotate and add carry back in
.1ff5	b1 28		lda ($28),y			lda 	(codePtr),y
.1ff7	65 2a		adc $2a				adc 	temp0
.1ff9	6a		ror a				ror 	a
.1ffa	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1ffc	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.1ffe	b1 28		lda ($28),y			lda 	(codePtr),y
.2000	c8		iny				iny 								; advance incase we go round again.
.2001	c9 3a		cmp #$3a			cmp 	#$3A
.2003	90 ef		bcc $1ff4			bcc 	_CPHLoop
.2005	a5 2a		lda $2a				lda 	temp0
.2007	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.2008					CommandStop:
.2008	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.200a	20 85 11	jsr $1185		jsr	errorHandler
.200d					CommandEnd:
.200d	4c e1 2c	jmp $2ce1			jmp 	WarmStart
.2010					CommandXemu:
.2010	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2013					AdvanceNextLine:
.2013	a0 00		ldy #$00			ldy 	#0 							; get offset
.2015	b1 28		lda ($28),y			lda 	(codePtr),y
.2017	18		clc				clc 								; add to codePtr
.2018	65 28		adc $28				adc 	codePtr
.201a	85 28		sta $28				sta 	codePtr
.201c	90 02		bcc $2020			bcc 	_ANLNoCarry
.201e	e6 29		inc $29				inc 	codePtr+1
.2020					_ANLNoCarry:
.2020	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2022	f0 e9		beq $200d			beq 	CommandEnd 					; execute END
.2024	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2026	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.2027					Command_CLS:
.2027	a2 02		ldx #$02		ldx	#2
.2029	20 64 11	jsr $1164		jsr	deviceHandler
.202c	60		rts				rts
.202d					Command_Ink:
.202d	a2 00		ldx #$00			ldx 	#0
.202f	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger
.2032	a2 08		ldx #$08		ldx	#8
.2034	20 64 11	jsr $1164		jsr	deviceHandler
.2037	60		rts				rts
.2038					Command_Paper:
.2038	a2 00		ldx #$00			ldx 	#0
.203a	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger
.203d	a2 12		ldx #$12		ldx	#18
.203f	20 64 11	jsr $1164		jsr	deviceHandler
.2042	60		rts				rts
.2043					Command_Locate:
.2043	a2 00		ldx #$00			ldx 	#0
.2045	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger
.2048	20 04 2c	jsr $2c04			jsr 	CheckComma
.204b	e8		inx				inx
.204c	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger
.204f	98		tya				tya
.2050	48		pha				pha
.2051	a4 49		ldy $49				ldy 	esInt0+1
.2053	a5 48		lda $48				lda 	esInt0
.2055	a2 10		ldx #$10		ldx	#16
.2057	20 64 11	jsr $1164		jsr	deviceHandler
.205a	68		pla				pla
.205b	a8		tay				tay
.205c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.205d					CommandGOSUB:
.205d	20 f1 25	jsr $25f1			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2060	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2062	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2064	20 93 2c	jsr $2c93			jsr 	RSClaim
.2067	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2069	20 bf 2c	jsr $2cbf			jsr 	RSSavePosition
.206c	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.206e	f0 1b		beq $208b			beq 	GotoTOS 					; and do a GOTO there.
.2070					CommandRETURN:
.2070	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2072	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2074	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2076	f0 05		beq $207d			beq 	_isok
.2078	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.207a	20 85 11	jsr $1185		jsr	errorHandler
.207d					_isok:
.207d	a9 01		lda #$01			lda 	#1
.207f	20 d2 2c	jsr $2cd2			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2082	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2084	20 b5 2c	jsr $2cb5			jsr 	RSFree
.2087	60		rts				rts
.2088					CommandGOTO:
.2088	20 f1 25	jsr $25f1			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.208b					GotoTOS:
.208b	20 39 1e	jsr $1e39			jsr 	ResetCodeAddress 			; simple search.
.208e					_GotoSearch:
.208e	a0 00		ldy #$00			ldy 	#0 							; get offset
.2090	b1 28		lda ($28),y			lda 	(codePtr),y
.2092	f0 21		beq $20b5			beq 	_GotoError 					; not found.
.2094	c8		iny				iny									; check LSB match
.2095	b1 28		lda ($28),y			lda 	(codePtr),y
.2097	d5 48		cmp $48,x			cmp 	esInt0,x
.2099	d0 07		bne $20a2			bne 	_GotoNext
.209b	c8		iny				iny
.209c	b1 28		lda ($28),y			lda 	(codePtr),y
.209e	d5 50		cmp $50,x			cmp 	esInt1,x
.20a0	f0 10		beq $20b2			beq 	_GotoFound
.20a2					_GotoNext:
.20a2	a0 00		ldy #$00			ldy 	#0 							; go next line
.20a4	b1 28		lda ($28),y			lda 	(codePtr),y
.20a6	18		clc				clc
.20a7	65 28		adc $28				adc 	codePtr
.20a9	85 28		sta $28				sta 	codePtr
.20ab	90 e1		bcc $208e			bcc 	_GotoSearch
.20ad	e6 29		inc $29				inc 	codePtr+1
.20af	4c 8e 20	jmp $208e			jmp 	_GotoSearch
.20b2					_GotoFound:
.20b2	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.20b4	60		rts				rts
.20b5					_GotoError:
.20b5	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.20b7	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.20ba					Command_VDU:
.20ba	20 f1 25	jsr $25f1			jsr 	EvaluateRootInteger 			; get integer at root.
.20bd	a5 48		lda $48				lda 	esInt0
.20bf	a2 14		ldx #$14		ldx	#20
.20c1	20 64 11	jsr $1164		jsr	deviceHandler
.20c4					_CVNext:
.20c4	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.20c6	c8		iny				iny
.20c7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.20c9	f0 ef		beq $20ba			beq 	Command_VDU
.20cb	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.20cd	d0 0a		bne $20d9			bne 	_CVExit
.20cf	a5 50		lda $50				lda 	esInt1
.20d1	a2 14		ldx #$14		ldx	#20
.20d3	20 64 11	jsr $1164		jsr	deviceHandler
.20d6	4c c4 20	jmp $20c4			jmp 	_CVNext
.20d9	88		dey		_CVExit:dey
.20da	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.20db					Command_While:
.20db	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.20dd	a2 04		ldx #$04			ldx 	#4
.20df	20 93 2c	jsr $2c93			jsr 	RSClaim 					; create on stack.
.20e2	88		dey				dey
.20e3	a9 01		lda #$01			lda 	#1
.20e5	20 bf 2c	jsr $2cbf			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.20e8	c8		iny				iny
.20e9	20 f3 25	jsr $25f3			jsr 	EvaluateInteger				; get the conditional
.20ec	20 ab 2b	jsr $2bab			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.20ef	f0 01		beq $20f2			beq 	_CWFail
.20f1	60		rts				rts
.20f2					_CWFail:
.20f2	a9 04		lda #$04			lda 	#4
.20f4	20 b5 2c	jsr $2cb5			jsr 	RSFree 						; close the just opened position.
.20f7	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.20f9	aa		tax				tax
.20fa	20 11 2c	jsr $2c11			jsr 	ScanForward
.20fd	60		rts				rts
.20fe					Command_Wend:
.20fe	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2100	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2102	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2104	f0 05		beq $210b			beq 	_isok
.2106	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2108	20 85 11	jsr $1185		jsr	errorHandler
.210b					_isok:
.210b	a9 01		lda #$01			lda 	#1
.210d	20 d2 2c	jsr $2cd2			jsr 	RSLoadPosition				; go back until true
.2110	a9 04		lda #$04			lda 	#4
.2112	20 b5 2c	jsr $2cb5			jsr 	RSFree 						; close the loop
.2115	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.2116					BinaryProcess:
.2116	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2118	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.211a	0a		asl a				asl 	a
.211b	30 0e		bmi $212b			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.211d	18		clc				clc 								; return CC for integer
.211e	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2120	f0 08		beq $212a			beq 	_BPExit 					; if both integer then return with CC.
.2122	20 30 21	jsr $2130			jsr 	BPMakeBothFloat 			; make both float
.2125	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2127	95 40		sta $40,x			sta 	esType,x
.2129	38		sec				sec 								; and return with carry set.
.212a					_BPExit:
.212a	60		rts				rts
.212b					_BPStringType:
.212b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.212d	20 85 11	jsr $1185		jsr	errorHandler
.2130					BPMakeBothFloat:
.2130	e8		inx				inx
.2131	20 35 21	jsr $2135			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2134	ca		dex				dex
.2135					BPMakeFloat:
.2135	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.2137	4a		lsr a				lsr 	a
.2138	b0 07		bcs $2141			bcs 	_BPIsFloat 					; already a float if set.
.213a	8a		txa				txa
.213b	a2 1a		ldx #$1a		ldx	#26
.213d	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2140	aa		tax				tax
.2141					_BPIsFloat:
.2141	60		rts				rts
.2142					AddHandler:
.2142	20 91 23	jsr $2391			jsr 	DereferenceTwo 				; dereference top two on stack.
.2145	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.2147	35 41		and $41,x			and 	esType+1,x
.2149	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.214b	d0 10		bne $215d			bne 	_AHStringConcat				; concatenate strings.
.214d	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.2150	b0 03		bcs $2155			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2152	4c 68 2a	jmp $2a68			jmp 	MInt32Add 							; else do it as integer.
.2155					_IsFPOperation:
.2155	8a		txa				txa 								; call the relevant fp routine
.2156	a2 02		ldx #$02		ldx	#2
.2158	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.215b	aa		tax				tax
.215c	60		rts				rts
.215d					_AHStringConcat:
.215d	8a		txa				txa 								; handled by the string module.
.215e	a2 04		ldx #$04		ldx	#4
.2160	20 9c 2f	jsr $2f9c		jsr	stringHandler
.2163	aa		tax				tax
.2164	60		rts				rts
.2165					SubHandler:
.2165	20 91 23	jsr $2391			jsr 	DereferenceTwo
.2168	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.216b	b0 03		bcs $2170			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.216d	4c 82 2a	jmp $2a82			jmp 	MInt32Sub 							; else do it as integer.
.2170					_IsFPOperation:
.2170	8a		txa				txa 								; call the relevant fp routine
.2171	a2 10		ldx #$10		ldx	#16
.2173	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2176	aa		tax				tax
.2177	60		rts				rts
.2178					MulHandler:
.2178	20 91 23	jsr $2391			jsr 	DereferenceTwo
.217b	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.217e	b0 03		bcs $2183			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2180	4c 9c 2a	jmp $2a9c			jmp 	MInt32Multiply 							; else do it as integer.
.2183					_IsFPOperation:
.2183	8a		txa				txa 								; call the relevant fp routine
.2184	a2 0a		ldx #$0a		ldx	#10
.2186	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2189	aa		tax				tax
.218a	60		rts				rts
.218b					DivHandler:
.218b	20 91 23	jsr $2391			jsr 	DereferenceTwo
.218e	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.2191	b0 03		bcs $2196			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2193	4c 59 29	jmp $2959			jmp 	MInt32SDivide 							; else do it as integer.
.2196					_IsFPOperation:
.2196	8a		txa				txa 								; call the relevant fp routine
.2197	a2 06		ldx #$06		ldx	#6
.2199	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.219c	aa		tax				tax
.219d	60		rts				rts
.219e					ModHandler:
.219e	20 91 23	jsr $2391			jsr 	DereferenceTwo
.21a1	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.21a4	b0 03		bcs $21a9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21a6	4c d7 29	jmp $29d7			jmp 	MInt32Modulus 							; else do it as integer.
.21a9					_IsFPOperation:
.21a9	8a		txa				txa 								; call the relevant fp routine
.21aa	a2 08		ldx #$08		ldx	#8
.21ac	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21af	aa		tax				tax
.21b0	60		rts				rts
.21b1					XorHandler:
.21b1	20 91 23	jsr $2391			jsr 	DereferenceTwo
.21b4	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.21b7	b0 03		bcs $21bc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21b9	4c 0b 29	jmp $290b			jmp 	MInt32Xor 							; else do it as integer.
.21bc					_IsFPOperation:
.21bc	8a		txa				txa 								; call the relevant fp routine
.21bd	a2 08		ldx #$08		ldx	#8
.21bf	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21c2	aa		tax				tax
.21c3	60		rts				rts
.21c4					OrHandler:
.21c4	20 91 23	jsr $2391			jsr 	DereferenceTwo
.21c7	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.21ca	b0 03		bcs $21cf			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21cc	4c f2 28	jmp $28f2			jmp 	MInt32Or 							; else do it as integer.
.21cf					_IsFPOperation:
.21cf	8a		txa				txa 								; call the relevant fp routine
.21d0	a2 08		ldx #$08		ldx	#8
.21d2	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21d5	aa		tax				tax
.21d6	60		rts				rts
.21d7					AndHandler:
.21d7	20 91 23	jsr $2391			jsr 	DereferenceTwo
.21da	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.21dd	b0 03		bcs $21e2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21df	4c d9 28	jmp $28d9			jmp 	MInt32And 							; else do it as integer.
.21e2					_IsFPOperation:
.21e2	8a		txa				txa 								; call the relevant fp routine
.21e3	a2 08		ldx #$08		ldx	#8
.21e5	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21e8	aa		tax				tax
.21e9	60		rts				rts
.21ea					ShlHandler:
.21ea	20 91 23	jsr $2391			jsr 	DereferenceTwo
.21ed	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.21f0	b0 03		bcs $21f5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.21f2	4c 6b 22	jmp $226b			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.21f5					_IsFPOperation:
.21f5	8a		txa				txa 								; call the relevant fp routine
.21f6	a2 08		ldx #$08		ldx	#8
.21f8	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.21fb	aa		tax				tax
.21fc	60		rts				rts
.21fd					ShrHandler:
.21fd	20 91 23	jsr $2391			jsr 	DereferenceTwo
.2200	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.2203	b0 03		bcs $2208			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2205	4c 6e 22	jmp $226e			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2208					_IsFPOperation:
.2208	8a		txa				txa 								; call the relevant fp routine
.2209	a2 08		ldx #$08		ldx	#8
.220b	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.220e	aa		tax				tax
.220f	60		rts				rts
.2210					WordRefHandler:
.2210	20 91 23	jsr $2391			jsr 	DereferenceTwo
.2213	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.2216	b0 03		bcs $221b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2218	4c 5d 22	jmp $225d			jmp 	MInt32WordIndirect 							; else do it as integer.
.221b					_IsFPOperation:
.221b	8a		txa				txa 								; call the relevant fp routine
.221c	a2 08		ldx #$08		ldx	#8
.221e	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2221	aa		tax				tax
.2222	60		rts				rts
.2223					ByteRefHandler:
.2223	20 91 23	jsr $2391			jsr 	DereferenceTwo
.2226	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.2229	b0 03		bcs $222e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.222b	4c 61 22	jmp $2261			jmp 	MInt32ByteIndirect 							; else do it as integer.
.222e					_IsFPOperation:
.222e	8a		txa				txa 								; call the relevant fp routine
.222f	a2 08		ldx #$08		ldx	#8
.2231	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2234	aa		tax				tax
.2235	60		rts				rts
.2236					PowerHandler:
.2236	20 91 23	jsr $2391			jsr 	DereferenceTwo
.2239	20 16 21	jsr $2116			jsr 	BinaryProcess 				; check to see if either is float
.223c	b0 03		bcs $2241			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.223e	4c 49 22	jmp $2249			jmp 	PowerInteger 							; else do it as integer.
.2241					_IsFPOperation:
.2241	8a		txa				txa 								; call the relevant fp routine
.2242	a2 16		ldx #$16		ldx	#22
.2244	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2247	aa		tax				tax
.2248	60		rts				rts
.2249					PowerInteger:
.2249	20 30 21	jsr $2130			jsr 	BPMakeBothFloat				; make them float.
.224c	8a		txa				txa
.224d	a2 16		ldx #$16		ldx	#22
.224f	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2252	a2 12		ldx #$12		ldx	#18
.2254	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2257	aa		tax				tax
.2258	a9 00		lda #$00			lda 	#0 							; make type integer
.225a	95 40		sta $40,x			sta 	esType,x
.225c	60		rts				rts
.225d					Mint32WordIndirect:
.225d	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.225f	d0 02		bne $2263			bne 	Min32Indirect
.2261					Mint32ByteIndirect:
.2261	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2263					Min32Indirect:
.2263	48		pha				pha 								; save the indirection
.2264	20 68 2a	jsr $2a68			jsr 	MInt32Add 					; add a!b a?b
.2267	68		pla				pla 								; and set the type to reference.
.2268	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.226a	60		rts				rts
.226b					Mint32ShiftLeftX:
.226b	18		clc				clc 								; CC shift left
.226c	90 01		bcc $226f			bcc 	Mint32Shift
.226e					Mint32ShiftRightX:
.226e	38		sec				sec 								; CS shift right
.226f					Mint32Shift:
.226f	08		php				php 								; save carry flag on stack.
.2270	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2272	15 59		ora $59,x			ora 	esInt2+1,x
.2274	15 61		ora $61,x			ora 	esInt3+1,x
.2276	d0 1e		bne $2296			bne 	_MShiftZero
.2278	b5 49		lda $49,x			lda 	esInt0+1,x
.227a	c9 20		cmp #$20			cmp 	#32
.227c	b0 18		bcs $2296			bcs 	_MShiftZero
.227e					_MShiftLoop:
.227e	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.2280	f0 12		beq $2294			beq 	_MShiftExit
.2282	d6 49		dec $49,x			dec 	esInt0+1,x
.2284	28		plp				plp 								; restore and save carry
.2285	08		php				php
.2286	90 06		bcc $228e			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2288	20 a2 2b	jsr $2ba2			jsr 	Mint32ShiftRight
.228b	4c 7e 22	jmp $227e			jmp 	_MShiftLoop
.228e					_MShiftLeft:
.228e	20 99 2b	jsr $2b99			jsr 	Mint32ShiftLeft
.2291	4c 7e 22	jmp $227e			jmp 	_MShiftLoop
.2294					_MShiftExit:
.2294	28		plp				plp	 								; throw saved carry and exit
.2295	60		rts				rts
.2296					_MShiftZero:
.2296	4c 84 2b	jmp $2b84			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.2299					PerformComparison:
.2299	20 91 23	jsr $2391			jsr 	DereferenceTwo 				; make both values.
.229c	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.229e	35 41		and $41,x			and 	esType+1,x
.22a0	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.22a1	30 1d		bmi $22c0			bmi 	_PCIsString
.22a3	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.22a5	15 41		ora $41,x			ora 	esType+1,x
.22a7	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.22a8	30 22		bmi $22cc			bmi 	_PCError
.22aa	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.22ac	f0 0f		beq $22bd			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.22ae	20 30 21	jsr $2130			jsr 	BPMakeBothFloat 			; make both float
.22b1	8a		txa				txa
.22b2	a2 04		ldx #$04		ldx	#4
.22b4	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.22b7	86 32		stx $32				stx 	tempShort 					; save result
.22b9	aa		tax				tax
.22ba	a5 32		lda $32				lda 	tempShort
.22bc	60		rts				rts
.22bd					_PCIsInteger:
.22bd	4c 24 29	jmp $2924			jmp 	MInt32Compare
.22c0					_PCIsString:
.22c0	8a		txa				txa 								; A has SP
.22c1	a2 08		ldx #$08		ldx	#8
.22c3	20 9c 2f	jsr $2f9c		jsr	stringHandler
.22c6	86 32		stx $32				stx 	tempShort 					; save result
.22c8	aa		tax				tax 								; put SP back in X and get result.
.22c9	a5 32		lda $32				lda 	tempShort
.22cb	60		rts				rts
.22cc					_PCError:
.22cc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.22ce	20 85 11	jsr $1185		jsr	errorHandler
.22d1					CompareEquals:
.22d1	20 99 22	jsr $2299			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22d4	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.22d6	f0 35		beq $230d			beq  	CompareTrue
.22d8	4c 10 23	jmp $2310			jmp 	CompareFalse
.22db					CompareLess:
.22db	20 99 22	jsr $2299			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22de	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.22e0	f0 2b		beq $230d			beq  	CompareTrue
.22e2	4c 10 23	jmp $2310			jmp 	CompareFalse
.22e5					CompareGreater:
.22e5	20 99 22	jsr $2299			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22e8	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.22ea	f0 21		beq $230d			beq  	CompareTrue
.22ec	4c 10 23	jmp $2310			jmp 	CompareFalse
.22ef					CompareNotEquals:
.22ef	20 99 22	jsr $2299			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22f2	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.22f4	d0 17		bne $230d			bne  	CompareTrue
.22f6	4c 10 23	jmp $2310			jmp 	CompareFalse
.22f9					CompareGreaterEq:
.22f9	20 99 22	jsr $2299			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.22fc	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.22fe	d0 0d		bne $230d			bne  	CompareTrue
.2300	4c 10 23	jmp $2310			jmp 	CompareFalse
.2303					CompareLessEq:
.2303	20 99 22	jsr $2299			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2306	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2308	d0 03		bne $230d			bne  	CompareTrue
.230a	4c 10 23	jmp $2310			jmp 	CompareFalse
.230d					CompareTrue:
.230d	4c 80 2b	jmp $2b80			jmp 	MInt32True
.2310					CompareFalse:
.2310	4c 84 2b	jmp $2b84			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.2313					Event_Str:
.2313	20 dd 25	jsr $25dd			jsr 	EvaluateNumeric 			; get a number.
.2316	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2318	d0 13		bne $232d			bne 	_ESFloat
.231a	20 70 23	jsr $2370			jsr 	ConvertGetBase 				; get base, or default.
.231d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.231f	85 2a		sta $2a				sta 	temp0
.2321	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2323	85 2b		sta $2b				sta 	1+(temp0)
.2325	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2327	20 da 2a	jsr $2ada			jsr 	MInt32ToString 				; convert to string.
.232a	4c 3a 23	jmp $233a			jmp 	_ESCloneExit 				; clone and exit.
.232d					_ESFloat:
.232d	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; check closing )
.2330	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2333	8a		txa				txa
.2334	a2 14		ldx #$14		ldx	#20
.2336	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2339	aa		tax				tax
.233a					_ESCloneExit:
.233a	8a		txa				txa
.233b	a2 02		ldx #$02		ldx	#2
.233d	20 9c 2f	jsr $2f9c		jsr	stringHandler
.2340	aa		tax				tax
.2341	60		rts				rts
.2342					UnaryVal:
.2342	38		sec				sec 								; Carry set to return value
.2343	b0 01		bcs $2346			bcs 	ValueMain
.2345					UnaryIsVal:
.2345	18		clc				clc									; Carry clear to return legitimacy
.2346					ValueMain:
.2346	08		php				php 								; save results (CS is value, CC is validation)
.2347	20 e8 25	jsr $25e8			jsr 	EvaluateString
.234a	20 70 23	jsr $2370			jsr 	ConvertGetBase 				; get base, if any.
.234d	98		tya				tya
.234e	48		pha				pha
.234f	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2352	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2354	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2356	20 f2 29	jsr $29f2			jsr 	MInt32FromString 			; convert it back from a string.
.2359	b0 0c		bcs $2367			bcs 	_VMSuccess 					; successfully converted.
.235b	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.235d	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.235f	f0 00		beq $2361			beq 	_VMFailed 	 				; so we failed.
.2361					_VMFailed:
.2361	68		pla				pla
.2362	a8		tay				tay
.2363	28		plp				plp
.2364	4c 84 2b	jmp $2b84			jmp 	MInt32False 				; return 0 whatever.
.2367					_VMSuccess:
.2367	68		pla				pla
.2368	a8		tay				tay
.2369	28		plp				plp 								; if CS the it was val() so we want the value.
.236a	b0 03		bcs $236f			bcs 	_VMExit
.236c	4c 80 2b	jmp $2b80			jmp 	MInt32True 					; otherwise return true as successful.
.236f					_VMExit:
.236f	60		rts				rts
.2370					ConvertGetBase:
.2370	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2372	95 49		sta $49,x			sta 	esInt0+1,x
.2374	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2376	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2378	d0 0e		bne $2388			bne 	_CGBDone 					; not found, should be )
.237a	e8		inx				inx 								; next level
.237b	c8		iny				iny 								; skip comma.
.237c	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger		; evaluate the base.
.237f	ca		dex				dex
.2380	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2382	90 08		bcc $238c			bcc 	_CGBValue 					; (it should work as high as 37)
.2384	c9 11		cmp #$11			cmp 	#17
.2386	b0 04		bcs $238c			bcs 	_CGBValue
.2388					_CGBDone:
.2388	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.238b	60		rts				rts
.238c					_CGBValue:
.238c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.238e	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2391					DereferenceTwo:
.2391	e8		inx				inx
.2392	20 96 23	jsr $2396			jsr 	DereferenceOne
.2395	ca		dex				dex
.2396					DereferenceOne:
.2396	b5 40		lda $40,x			lda 	esType,x
.2398	10 3d		bpl $23d7			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.239a	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.239b	b0 3b		bcs $23d8			bcs 	_DRFloatDeReference
.239d	98		tya				tya
.239e	48		pha				pha
.239f	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.23a1	85 2a		sta $2a				sta 	temp0
.23a3	b5 50		lda $50,x			lda 	esInt1,x
.23a5	85 2b		sta $2b				sta 	temp0+1
.23a7	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.23a9	95 50		sta $50,x			sta 	esInt1,x
.23ab	95 58		sta $58,x			sta 	esInt2,x
.23ad	95 60		sta $60,x			sta 	esInt3,x
.23af	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.23b1	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.23b3	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.23b4	30 0d		bmi $23c3			bmi 	_DeRefString 				; string, 2 bytes only
.23b6	d0 11		bne $23c9			bne 	_DeRefByte 					; byte 1 byte only
.23b8					_DeRefLong:
.23b8	a0 03		ldy #$03			ldy 	#3
.23ba	b1 2a		lda ($2a),y			lda 	(temp0),y
.23bc	95 60		sta $60,x			sta 	esInt3,x
.23be	88		dey				dey
.23bf	b1 2a		lda ($2a),y			lda 	(temp0),y
.23c1	95 58		sta $58,x			sta 	esInt2,x
.23c3					_DeRefString:
.23c3	a0 01		ldy #$01			ldy 	#1
.23c5	b1 2a		lda ($2a),y			lda 	(temp0),y
.23c7	95 50		sta $50,x			sta 	esInt1,x
.23c9					_DeRefByte:
.23c9	a0 00		ldy #$00			ldy 	#0
.23cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.23cd	95 48		sta $48,x			sta 	esInt0,x
.23cf	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.23d1	29 40		and #$40			and 	#$40
.23d3	95 40		sta $40,x			sta 	esType,x
.23d5	68		pla				pla
.23d6	a8		tay				tay
.23d7					_DRNotReference
.23d7	60		rts				rts
.23d8					_DRFloatDereference:
.23d8	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; address to deref in temp0
.23db	8a		txa				txa
.23dc	a2 1c		ldx #$1c		ldx	#28
.23de	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.23e1	aa		tax				tax
.23e2	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.23e4	95 40		sta $40,x			sta 	esType,x
.23e6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.23e7					EvaluateLevel:
.23e7	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.23e9	b0 1e		bcs $2409			bcs 	_ELStack
.23eb	48		pha				pha 								; save precedence level.
.23ec	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.23ee	95 48		sta $48,x			sta 	esInt0,x
.23f0	95 50		sta $50,x			sta 	esInt1,x
.23f2	95 58		sta $58,x			sta 	esInt2,x
.23f4	95 60		sta $60,x			sta 	esInt3,x
.23f6	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.23f8	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.23fa	30 26		bmi $2422			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.23fc	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.23fd	30 0f		bmi $240e			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.23ff	8a		txa				txa 								; stack level in X
.2400	a2 00		ldx #$00		ldx	#0
.2402	20 91 39	jsr $3991		jsr	variableHandler
.2405	aa		tax				tax
.2406	4c 4b 24	jmp $244b			jmp		_ELHasTerm
.2409					_ELStack:
.2409	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.240b	20 85 11	jsr $1185		jsr	errorHandler
.240e					_ELIsConstant:
.240e	4a		lsr a				lsr 	a 							; get the value back
.240f	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2411	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.2413					_ELCheckNext:
.2413	c8		iny				iny 								; look at next
.2414	b1 28		lda ($28),y			lda 	(codePtr),y
.2416	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2418	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.241a	b0 2f		bcs $244b			bcs 	_ELHasTerm 					; done getting the constant.
.241c	20 e4 24	jsr $24e4			jsr 	ELShiftByteIn 				; shift byte into position.
.241f	4c 13 24	jmp $2413			jmp 	_ELCheckNext
.2422					_ELIsToken:
.2422	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2424	f0 0f		beq $2435			beq 	_ELIsString
.2426	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2428	d0 5f		bne $2489			bne 	_ELCheckUnary
.242a	8a		txa				txa 								; put X into A
.242b	c8		iny				iny 								; skip over the float marker
.242c	a2 18		ldx #$18		ldx	#24
.242e	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2431	aa		tax				tax 								; restore X
.2432	4c 4b 24	jmp $244b			jmp 	_ELHasTerm
.2435					_ELIsString:
.2435	98		tya				tya 								; address of string is codePtr+y+1
.2436	38		sec				sec
.2437	65 28		adc $28				adc 	codePtr
.2439	95 48		sta $48,x			sta 	esInt0,x
.243b	a5 29		lda $29				lda 	codePtr+1
.243d	69 00		adc #$00			adc 	#0
.243f	95 50		sta $50,x			sta 	esInt1,x
.2441	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2443	95 40		sta $40,x			sta 	esType,x
.2445	c8		iny				iny 								; skip over string.
.2446	98		tya				tya
.2447	38		sec				sec									; +1 for the length itself.
.2448	71 28		adc ($28),y			adc 	(codePtr),y
.244a	a8		tay				tay 								; and fall through to term loop code.
.244b					_ELHasTerm:
.244b	b1 28		lda ($28),y			lda 	(codePtr),y
.244d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.244f	90 04		bcc $2455			bcc 	_ELPopExit
.2451	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2453	90 02		bcc $2457			bcc 	_ELHasBinaryTerm
.2455					_ELPopExit:
.2455	68		pla				pla
.2456					_ELExit:
.2456	60		rts				rts
.2457					_ELHasBinaryTerm:
.2457	84 32		sty $32				sty 	tempShort 					; save position
.2459	a8		tay				tay 								; use token as an index and get the precedence.
.245a	b9 8c 24	lda $248c,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.245d	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.245f	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2461	68		pla				pla 								; restore current level.
.2462	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2464	b0 f0		bcs $2456			bcs 	_ELExit
.2466	48		pha				pha 								; save current level back on the stack.
.2467	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2469	48		pha				pha
.246a	c8		iny				iny
.246b	e8		inx				inx 								; calculate the RHS at the operator precedence.
.246c	a5 32		lda $32				lda 	tempShort
.246e	20 e7 23	jsr $23e7			jsr 	EvaluateLevel
.2471	ca		dex				dex
.2472	68		pla				pla 								; get the operator back out.
.2473					_ELExecuteA:
.2473	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2475	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2476	aa		tax				tax
.2477	bd 50 1e	lda $1e50,x			lda 	Group0Vectors,x
.247a	85 2a		sta $2a				sta 	temp0
.247c	bd 51 1e	lda $1e51,x			lda 	Group0Vectors+1,x
.247f	85 2b		sta $2b				sta 	temp0+1
.2481	a6 32		ldx $32				ldx 	tempShort
.2483	20 d0 24	jsr $24d0			jsr 	_ELCallTemp0
.2486	4c 4b 24	jmp $244b			jmp 	_ELHasTerm 					; and loop back round.
.2489					_ELCheckUnary:
.2489	c8		iny				iny 								; skip over token.
.248a	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.248c	f0 19		beq $24a7			beq 	_ELMinus
.248e	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2490	f0 2c		beq $24be			beq 	_ELIndirect
.2492	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2494	f0 28		beq $24be			beq 	_ELIndirect
.2496	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2498	f0 39		beq $24d3			beq 	_ELExtension
.249a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.249c	90 04		bcc $24a2			bcc 	_ELUSyntax
.249e	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.24a0	90 d1		bcc $2473			bcc 	_ELExecuteA 				; if so do that token.
.24a2					_ELUSyntax:
.24a2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.24a4	20 85 11	jsr $1185		jsr	errorHandler
.24a7					_ELMinus:
.24a7	20 bc 25	jsr $25bc			jsr 	EvaluateNumericTerm 		; get a number to negate.
.24aa	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.24ac	f0 0a		beq $24b8			beq 	_ELMinusInteger
.24ae	8a		txa				txa
.24af	a2 0c		ldx #$0c		ldx	#12
.24b1	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.24b4	aa		tax				tax
.24b5	4c 4b 24	jmp $244b			jmp 	_ELHasTerm
.24b8					_ELMinusInteger:
.24b8	20 3e 2b	jsr $2b3e			jsr 	MInt32Negate 				; do int negate
.24bb	4c 4b 24	jmp $244b			jmp 	_ELHasTerm
.24be					_ELIndirect:
.24be	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.24bf	20 c5 25	jsr $25c5			jsr 	EvaluateIntegerTerm 		; integer address
.24c2	68		pla				pla
.24c3	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.24c5	f0 02		beq $24c9			beq 	_ELHaveModifier
.24c7	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.24c9					_ELHaveModifier:
.24c9	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.24cb	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.24cd	4c 4b 24	jmp $244b			jmp 	_ELHasTerm
.24d0					_ELCallTemp0:
.24d0	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.24d3					_ELExtension:
.24d3	8a		txa				txa 								; stack pos in A
.24d4	20 63 14	jsr $1463		jsr	extensionHandler
.24d7	aa		tax				tax 								; restore stack
.24d8	4c 4b 24	jmp $244b			jmp 	_ELHasTerm
.24db					UnaryParenthesis:
.24db	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.24dd	20 e7 23	jsr $23e7			jsr 	EvaluateLevel
.24e0	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; check for )
.24e3	60		rts				rts
.24e4					ELShiftByteIn:
.24e4	48		pha				pha 								; save bits to shift in.
.24e5	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.24e7	48		pha				pha
.24e8	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.24ea	95 60		sta $60,x			sta 	esInt3,x
.24ec	b5 50		lda $50,x			lda 	esInt1,x
.24ee	95 58		sta $58,x			sta 	esInt2,x
.24f0	b5 48		lda $48,x			lda 	esInt0,x
.24f2	95 50		sta $50,x			sta 	esInt1,x
.24f4	a9 00		lda #$00			lda 	#0
.24f6	95 48		sta $48,x			sta 	esInt0,x
.24f8	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.24f9	29 03		and #$03			and 	#3 							; only want lower 2 bits
.24fb	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.24fd					_ELShiftLoop:
.24fd	4a		lsr a				lsr 	a
.24fe	76 60		ror $60,x			ror 	esInt3,x
.2500	76 58		ror $58,x			ror 	esInt2,x
.2502	76 50		ror $50,x			ror 	esInt1,x
.2504	76 48		ror $48,x			ror 	esInt0,x
.2506	c9 01		cmp #$01			cmp 	#1
.2508	d0 f3		bne $24fd			bne 	_ELShiftLoop
.250a	68		pla				pla 								; get original 6 bit value and OR in.
.250b	29 3f		and #$3f			and 	#$3F
.250d	15 48		ora $48,x			ora 	esInt0,x
.250f	95 48		sta $48,x			sta 	esInt0,x
.2511	60		rts				rts
.2512					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2512	01					.byte	$01			; $86 and
>2513	01					.byte	$01			; $87 or
>2514	01					.byte	$01			; $88 xor
>2515	02					.byte	$02			; $89 >=
>2516	02					.byte	$02			; $8a <=
>2517	02					.byte	$02			; $8b >
>2518	02					.byte	$02			; $8c <
>2519	02					.byte	$02			; $8d =
>251a	02					.byte	$02			; $8e <>
>251b	03					.byte	$03			; $8f +
>251c	03					.byte	$03			; $90 -
>251d	04					.byte	$04			; $91 >>
>251e	04					.byte	$04			; $92 <<
>251f	04					.byte	$04			; $93 *
>2520	04					.byte	$04			; $94 /
>2521	04					.byte	$04			; $95 mod
>2522	05					.byte	$05			; $96 ^
>2523	06					.byte	$06			; $97 !
>2524	06					.byte	$06			; $98 ?
>2525	82					.byte	$82			; $99 repeat
>2526	82					.byte	$82			; $9a while
>2527	82					.byte	$82			; $9b for
>2528	82					.byte	$82			; $9c if
>2529	82					.byte	$82			; $9d defproc
>252a	80					.byte	$80			; $9e until
>252b	80					.byte	$80			; $9f wend
>252c	80					.byte	$80			; $a0 next
>252d	80					.byte	$80			; $a1 then
>252e	80					.byte	$80			; $a2 endif
>252f	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.2530					EventFunction:
.2530	20 26 26	jsr $2626			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2533	b5 40		lda $40,x			lda 	esType,x
.2535	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2537	d0 5b		bne $2594			bne 	_EFType
.2539	20 04 2c	jsr $2c04			jsr 	CheckComma
.253c	e8		inx				inx
.253d	20 f3 25	jsr $25f3			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2540	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; finish off with the right bracket
.2543	ca		dex				dex
.2544	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2546	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2548	15 58		ora $58,x			ora 	esInt2,x
.254a	15 60		ora $60,x			ora 	esInt3,x
.254c	d0 41		bne $258f			bne 	_EFValue
.254e	98		tya				tya
.254f	48		pha				pha
.2550	8a		txa				txa
.2551	48		pha				pha
.2552	a2 1c		ldx #$1c		ldx	#28
.2554	20 64 11	jsr $1164		jsr	deviceHandler
.2557	84 2d		sty $2d				sty 	temp1+1
.2559	85 2c		sta $2c				sta 	temp1
.255b	68		pla				pla
.255c	aa		tax				tax
.255d	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2560	a0 03		ldy #$03			ldy 	#3							; if -ve
.2562	b1 2a		lda ($2a),y			lda 	(temp0),y
.2564	30 23		bmi $2589			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2566	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2568	b1 2a		lda ($2a),y			lda 	(temp0),y
.256a	c8		iny				iny
.256b	11 2a		ora ($2a),y			ora 	(temp0),y
.256d	f0 17		beq $2586			beq 	_EFInitialise 				; if so, initialise the value but return false.
.256f	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2571	38		sec				sec
.2572	b1 2a		lda ($2a),y			lda 	(temp0),y
.2574	e5 2c		sbc $2c				sbc 	temp1
.2576	c8		iny				iny
.2577	b1 2a		lda ($2a),y			lda 	(temp0),y
.2579	e5 2d		sbc $2d				sbc 	temp1+1
.257b	10 0c		bpl $2589			bpl 	_EFFail 					; if trigger >= timer then return False
.257d	20 99 25	jsr $2599			jsr 	SetEventTimer 				; reset the timer for next time.
.2580	20 80 2b	jsr $2b80			jsr	 	MInt32True 					; and treutn true as fired.
.2583	68		pla				pla
.2584	a8		tay				tay
.2585	60		rts				rts
.2586					_EFInitialise:
.2586	20 99 25	jsr $2599			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2589					_EFFail:
.2589	68		pla				pla
.258a	a8		tay				tay
.258b	20 84 2b	jsr $2b84			jsr 	MInt32False
.258e	60		rts				rts
.258f					_EFValue:
.258f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2591	20 85 11	jsr $1185		jsr	errorHandler
.2594					_EFType:
.2594	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2596	20 85 11	jsr $1185		jsr	errorHandler
.2599					SetEventTimer:
.2599	a0 00		ldy #$00			ldy 	#0
.259b	18		clc				clc
.259c	a5 2c		lda $2c				lda 	temp1
.259e	75 49		adc $49,x			adc 	esInt0+1,x
.25a0	91 2a		sta ($2a),y			sta		(temp0),y
.25a2	c8		iny				iny
.25a3	a5 2d		lda $2d				lda 	temp1+1
.25a5	75 51		adc $51,x			adc 	esInt1+1,x
.25a7	91 2a		sta ($2a),y			sta		(temp0),y
.25a9	88		dey				dey
.25aa	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.25ac	d0 04		bne $25b2			bne 	_SETExit 					; zero means initialise.....
.25ae	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.25b0	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.25b2					_SETExit:
.25b2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.25b3					EvaluateTerm:
.25b3	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.25b5	20 e7 23	jsr $23e7			jsr 	EvaluateLevel
.25b8	20 96 23	jsr $2396			jsr 	DereferenceOne
.25bb	60		rts				rts
.25bc					EvaluateNumericTerm:
.25bc	20 b3 25	jsr $25b3			jsr 	EvaluateTerm
.25bf	b5 40		lda $40,x			lda 	esType,x
.25c1	0a		asl a				asl 	a 							; see if it's a string.
.25c2	30 09		bmi $25cd			bmi 	ENTType
.25c4	60		rts				rts
.25c5					EvaluateIntegerTerm:
.25c5	20 b3 25	jsr $25b3			jsr 	EvaluateTerm
.25c8	b5 40		lda $40,x			lda 	esType,x
.25ca	d0 01		bne $25cd			bne 	ENTType
.25cc	60		rts				rts
.25cd					ENTType:
.25cd	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.25cf	20 85 11	jsr $1185		jsr	errorHandler
.25d2					EvaluateRoot:
.25d2	a2 00		ldx #$00			ldx 	#0
.25d4					Evaluate:
.25d4	a9 00		lda #$00			lda 	#0
.25d6	20 e7 23	jsr $23e7			jsr 	EvaluateLevel
.25d9	20 96 23	jsr $2396			jsr 	DereferenceOne
.25dc	60		rts				rts
.25dd					EvaluateNumeric:
.25dd	20 d4 25	jsr $25d4			jsr 	Evaluate
.25e0	b5 40		lda $40,x			lda 	esType,x
.25e2	0a		asl a				asl 	a 							; see if it's a string.
.25e3	30 e8		bmi $25cd			bmi 	ENTType
.25e5	4a		lsr a				lsr 	a 							; shift float flag into carry.
.25e6	4a		lsr a				lsr 	a
.25e7	60		rts				rts
.25e8					EvaluateString:
.25e8	20 d4 25	jsr $25d4			jsr 	Evaluate
.25eb	b5 40		lda $40,x			lda 	esType,x
.25ed	0a		asl a				asl 	a 							; see if it's a string.
.25ee	10 dd		bpl $25cd			bpl 	ENTType
.25f0	60		rts				rts
.25f1					EvaluateRootInteger:
.25f1	a2 00		ldx #$00			ldx 	#0
.25f3					EvaluateInteger:
.25f3	20 d4 25	jsr $25d4			jsr 	Evaluate
.25f6	b5 40		lda $40,x			lda 	esType,x
.25f8	d0 d3		bne $25cd			bne 	ENTType
.25fa	60		rts				rts
.25fb					EvaluateSmallInteger:
.25fb	20 f3 25	jsr $25f3			jsr 	EvaluateInteger
.25fe	b5 50		lda $50,x			lda 	esInt1,x
.2600	15 58		ora $58,x			ora 	esInt2,x
.2602	15 60		ora $60,x			ora 	esInt3,x
.2604	d0 03		bne $2609			bne 	_ESIValue
.2606	b5 48		lda $48,x			lda 	esInt0,x
.2608	60		rts				rts
.2609					_ESIValue:
.2609	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.260b	20 85 11	jsr $1185		jsr	errorHandler
.260e					LinkEvaluate:
.260e	aa		tax				tax
.260f	20 d4 25	jsr $25d4			jsr 	Evaluate
.2612	8a		txa				txa
.2613	60		rts				rts
.2614					LinkEvaluateTerm:
.2614	aa		tax				tax
.2615	20 b3 25	jsr $25b3			jsr 	EvaluateTerm
.2618	8a		txa				txa
.2619	60		rts				rts
.261a					LinkEvaluateInteger:
.261a	aa		tax				tax
.261b	20 f3 25	jsr $25f3			jsr 	EvaluateInteger
.261e	8a		txa				txa
.261f	60		rts				rts
.2620					LinkEvaluateSmallInt:
.2620	aa		tax				tax
.2621	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger
.2624	8a		txa				txa
.2625	60		rts				rts
.2626					EvaluateReference:
.2626	ad 23 25	lda $2523			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2629	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.262a	e9 01		sbc #$01			sbc 	#1
.262c	20 e7 23	jsr $23e7			jsr 	EvaluateLevel
.262f	b5 40		lda $40,x			lda 	esType,x
.2631	10 01		bpl $2634			bpl 	_ERFail
.2633	60		rts				rts
.2634					_ERFail:
.2634	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2636	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2639					UnaryLen:
.2639	20 47 26	jsr $2647			jsr 	ULStart
.263c					ULFinish:
.263c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.263e	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2640	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit 				; write it out.
.2643	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.2646	60		rts				rts
.2647	20 e8 25	jsr $25e8	ULStart:jsr 	EvaluateString
.264a	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.264c	85 2a		sta $2a				sta 	temp0
.264e	b5 50		lda $50,x			lda 	esInt1,x
.2650	85 2b		sta $2b				sta 	temp0+1
.2652	84 32		sty $32				sty 	tempShort 					; get length
.2654	a0 00		ldy #$00			ldy 	#0
.2656	60		rts				rts
.2657					UnaryAsc:
.2657	20 47 26	jsr $2647			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.265a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.265c	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.265d	c9 00		cmp #$00			cmp 	#0
.265f	d0 db		bne $263c			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2661	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2663	20 85 11	jsr $1185		jsr	errorHandler
.2666					UnaryAbs:
.2666	20 dd 25	jsr $25dd			jsr 	EvaluateNumeric 			; some numeric value
.2669	b0 07		bcs $2672			bcs 	_UAFloat 					; CS then float, so use that function
.266b	20 39 2b	jsr $2b39			jsr 	MInt32Absolute 				; int version
.266e	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.2671	60		rts				rts
.2672					_UAFloat:
.2672	8a		txa				txa 								; float version
.2673	a2 00		ldx #$00		ldx	#0
.2675	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2678	aa		tax				tax
.2679	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.267c	60		rts				rts
.267d					UnarySgn:
.267d	20 dd 25	jsr $25dd			jsr 	EvaluateNumeric 			; same as above but sign of value
.2680	b0 07		bcs $2689			bcs 	_USFloat
.2682	20 71 2b	jsr $2b71			jsr 	MInt32Sign
.2685	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.2688	60		rts				rts
.2689					_USFloat:
.2689	8a		txa				txa
.268a	a2 0e		ldx #$0e		ldx	#14
.268c	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.268f	aa		tax				tax
.2690	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.2693	60		rts				rts
.2694					UnaryPeek:
.2694	20 c0 26	jsr $26c0			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2697	4c b4 26	jmp $26b4			jmp 	PDLByte0
.269a					UnaryDeek:
.269a	20 c0 26	jsr $26c0			jsr 	PDLCode
.269d	4c ae 26	jmp $26ae			jmp 	PDLByte1
.26a0					UnaryLeek:
.26a0	20 c0 26	jsr $26c0			jsr 	PDLCode
.26a3	a0 03		ldy #$03			ldy 	#3							; read 3-2
.26a5	b1 2a		lda ($2a),y			lda 	(temp0),y
.26a7	95 60		sta $60,x			sta 	esInt3,x
.26a9	88		dey				dey
.26aa	b1 2a		lda ($2a),y			lda 	(temp0),y
.26ac	95 58		sta $58,x			sta 	esInt2,x
.26ae					PDLByte1:
.26ae	a0 01		ldy #$01			ldy 	#1
.26b0	b1 2a		lda ($2a),y			lda 	(temp0),y
.26b2	95 50		sta $50,x			sta 	esInt1,x
.26b4					PDLByte0:
.26b4	a0 00		ldy #$00			ldy 	#0
.26b6	b1 2a		lda ($2a),y			lda 	(temp0),y
.26b8	95 48		sta $48,x			sta 	esInt0,x
.26ba	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.26bc	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; check right and return
.26bf	60		rts				rts
.26c0					PDLCode:
.26c0	20 f3 25	jsr $25f3			jsr 	EvaluateInteger 			; some address
.26c3	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.26c5	85 2a		sta $2a				sta 	temp0
.26c7	b5 50		lda $50,x			lda 	esInt1,x
.26c9	85 2b		sta $2b				sta 	temp0+1
.26cb	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.26cd	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.26cf	95 58		sta $58,x			sta 	esInt2,x
.26d1	95 60		sta $60,x			sta 	esInt3,x
.26d3	84 32		sty $32				sty 	tempShort 					; save Y
.26d5	60		rts				rts
.26d6					Unary_Random:
.26d6	20 b4 2b	jsr $2bb4			jsr 	MInt32Random 				; generate random number.
.26d9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.26db	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.26dd	f0 08		beq $26e7			beq 	_URExit
.26df	e8		inx				inx 								; load range 0..r-1 into +1
.26e0	20 f3 25	jsr $25f3			jsr 	EvaluateInteger
.26e3	ca		dex				dex
.26e4	20 d7 29	jsr $29d7			jsr 	MInt32Modulus 				; calculate random % modulus
.26e7					_URExit:
.26e7	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; check right and return
.26ea	60		rts				rts
.26eb					Unary_Min:
.26eb	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.26ed	d0 02		bne $26f1			bne 	UnaryMBody
.26ef					Unary_Max:
.26ef	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.26f1					UnaryMBody:
.26f1	48		pha				pha 								; save comparator on stack, shows min or max
.26f2	20 d4 25	jsr $25d4			jsr 	Evaluate 					; get the first thing to check
.26f5					_UnaryMLoop:
.26f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.26f7	c8		iny				iny
.26f8	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.26fa	f0 09		beq $2705			beq 	_UnaryMExit
.26fc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.26fe	f0 07		beq $2707			beq 	_UnaryMCompare
.2700	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2702	20 85 11	jsr $1185		jsr	errorHandler
.2705					_UnaryMExit:
.2705	68		pla				pla 								; done so throw comparator and return.
.2706	60		rts				rts
.2707					_UnaryMCompare:
.2707	e8		inx				inx 								; get the 2nd thing to evaluate
.2708	20 d4 25	jsr $25d4			jsr 	Evaluate
.270b	ca		dex				dex
.270c	20 99 22	jsr $2299			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.270f	85 32		sta $32				sta 	tempShort 					; save result
.2711	68		pla				pla 								; get what we need
.2712	48		pha				pha
.2713	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2715	d0 de		bne $26f5			bne 	_UnaryMLoop 				; no, try another value.
.2717	20 84 2b	jsr $2b84			jsr 	MInt32False 				; promote 2nd to 1st.
.271a	20 68 2a	jsr $2a68			jsr 	MInt32Add
.271d	4c f5 26	jmp $26f5			jmp 	_UnaryMLoop
.2720					Unary_Page:
.2720	20 84 2b	jsr $2b84			jsr 	MInt32False 				; zero
.2723	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2726	95 48		sta $48,x			sta 	esInt0,x
.2728	ad c9 0a	lda $0ac9			lda 	basePage+1
.272b	95 50		sta $50,x			sta 	esInt1,x
.272d	60		rts				rts
.272e					UnaryReference:
.272e	a9 0f		lda #$0f			lda 	#15
.2730	20 e7 23	jsr $23e7			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2733	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2735	10 05		bpl $273c			bpl 	UType
.2737	a9 00		lda #$00			lda 	#0 							; make it an integer
.2739	95 40		sta $40,x			sta 	esType,x
.273b	60		rts				rts
.273c					UType:
.273c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.273e	20 85 11	jsr $1185		jsr	errorHandler
.2741					UnaryHexMarker:
.2741	4c c5 25	jmp $25c5			jmp 	EvaluateIntegerTerm
.2744					UnaryComplement:
.2744	20 c5 25	jsr $25c5			jsr 	EvaluateIntegerTerm
.2747	20 58 2b	jsr $2b58			jsr 	MInt32Not
.274a	60		rts				rts
.274b					UnaryIntToFloat:
.274b	20 dd 25	jsr $25dd			jsr 	EvaluateNumeric				; some number
.274e	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.2750	d0 0b		bne $275d			bne 	_UIFExit
.2752	8a		txa				txa 								; convert and set type
.2753	a2 1a		ldx #$1a		ldx	#26
.2755	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.2758	aa		tax				tax
.2759	a9 01		lda #$01			lda 	#1
.275b	95 40		sta $40,x			sta 	esType,x
.275d					_UIFExit:
.275d	60		rts				rts
.275e					UnaryFloatToInt:
.275e	20 dd 25	jsr $25dd			jsr 	EvaluateNumeric 			; the number
.2761	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2763	f0 0b		beq $2770			beq 	_UFIExit
.2765	8a		txa				txa 								; convert to int
.2766	a2 12		ldx #$12		ldx	#18
.2768	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.276b	aa		tax				tax
.276c	a9 00		lda #$00			lda 	#0 							; set type
.276e	95 40		sta $40,x			sta 	esType,x
.2770					_UFIExit:
.2770	60		rts				rts
.2771					UnaryAlloc:
.2771	e8		inx				inx 								; evaluate memory required
.2772	20 f3 25	jsr $25f3			jsr 	EvaluateInteger
.2775	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.2778	ca		dex				dex
.2779	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.277b	15 61		ora $61,x			ora 	esInt3+1,x
.277d	d0 1d		bne $279c			bne 	_UABadValue
.277f	20 84 2b	jsr $2b84			jsr 	MInt32False					; zero return.
.2782	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2784	95 50		sta $50,x			sta 	esInt1,x
.2786	a5 35		lda $35				lda 	lowMemory
.2788	95 48		sta $48,x			sta 	esInt0,x
.278a	18		clc				clc 								; add alloc required.
.278b	75 49		adc $49,x			adc 	esInt0+1,x
.278d	85 35		sta $35				sta 	lowMemory
.278f	a5 36		lda $36				lda 	lowMemory+1
.2791	75 51		adc $51,x			adc 	esInt1+1,x
.2793	85 36		sta $36				sta 	lowMemory+1
.2795	b0 05		bcs $279c			bcs		_UABadValue 				; overflow definitely bad.
.2797	c5 34		cmp $34				cmp 	highMemory+1
.2799	b0 01		bcs $279c			bcs 	_UABadValue 				; out of memory bad.
.279b	60		rts				rts
.279c					_UABadValue:
.279c	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.279e	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.27a1					UnaryTimer:
.27a1	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; no parameters
.27a4	98		tya				tya
.27a5	48		pha				pha
.27a6	20 ab 2b	jsr $2bab			jsr 	MInt32Zero 					; zero result
.27a9	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.27ab	a2 1c		ldx #$1c		ldx	#28
.27ad	20 64 11	jsr $1164		jsr	deviceHandler
.27b0	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.27b2	95 48		sta $48,x			sta 	esInt0,x
.27b4	98		tya				tya
.27b5	95 50		sta $50,x			sta 	esInt1,x
.27b7	68		pla				pla
.27b8	a8		tay				tay
.27b9	60		rts				rts
.27ba					UnaryInkey:
.27ba	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.27bd	86 2a		stx $2a				stx 	temp0
.27bf	a2 0a		ldx #$0a		ldx	#10
.27c1	20 64 11	jsr $1164		jsr	deviceHandler
.27c4	a6 2a		ldx $2a				ldx 	temp0
.27c6	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit
.27c9	60		rts				rts
.27ca					UnaryGet:
.27ca	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.27cd	86 2a		stx $2a				stx 	temp0
.27cf					_UGLoop:
.27cf	a2 00		ldx #$00		ldx	#0
.27d1	20 64 11	jsr $1164		jsr	deviceHandler
.27d4	a2 0a		ldx #$0a		ldx	#10
.27d6	20 64 11	jsr $1164		jsr	deviceHandler
.27d9	c9 00		cmp #$00			cmp 	#0
.27db	f0 f2		beq $27cf			beq 	_UGLoop
.27dd	a6 2a		ldx $2a				ldx 	temp0
.27df	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit
.27e2	60		rts				rts
.27e3					UnaryGetString:
.27e3	20 ca 27	jsr $27ca			jsr 	UnaryGet
.27e6					UGSDoChr:
.27e6	4c 37 28	jmp $2837			jmp 	ChrCode
.27e9					UnaryInkeyString:
.27e9	20 ba 27	jsr $27ba			jsr 	UnaryInkey
.27ec	b5 48		lda $48,x			lda 	esInt0,x
.27ee	d0 f6		bne $27e6			bne 	UGSDoChr
.27f0	8a		txa				txa
.27f1	a2 06		ldx #$06		ldx	#6
.27f3	20 9c 2f	jsr $2f9c		jsr	stringHandler
.27f6	aa		tax				tax
.27f7	60		rts				rts
.27f8					UnarySys:
.27f8	20 f3 25	jsr $25f3			jsr 	EvaluateInteger 				; get the address
.27fb	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen
.27fe	20 c4 19	jsr $19c4			jsr 	TOSToTemp0 						; copy call address to temp0
.2801	8a		txa				txa
.2802	48		pha				pha
.2803	98		tya				tya
.2804	48		pha				pha
.2805	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2808	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.280b	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.280e	20 1d 28	jsr $281d			jsr 	_CallTemp0
.2811	85 32		sta $32				sta 	tempShort 						; restore YX
.2813	68		pla				pla
.2814	a8		tay				tay
.2815	68		pla				pla
.2816	aa		tax				tax
.2817	a5 32		lda $32				lda 	tempShort
.2819	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit 					; return result.
.281c	60		rts				rts
.281d					_CallTemp0:
.281d	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2820					UnaryMem:
.2820	20 84 2b	jsr $2b84			jsr 	MInt32False 					; set to false (e.g. 0)
.2823	38		sec				sec
.2824	a5 33		lda $33				lda 	highMemory 						; calculate value
.2826	e5 35		sbc $35				sbc 	lowMemory
.2828	95 48		sta $48,x			sta 	esInt0,x
.282a	a5 34		lda $34				lda 	highMemory+1
.282c	e5 36		sbc $36				sbc 	lowMemory+1
.282e	95 50		sta $50,x			sta 	esInt1,x
.2830	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.2831					ExecChr:
.2831	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger		; character number 0-255
.2834	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen				; right bracket
.2837					ChrCode:
.2837	98		tya				tya
.2838	48		pha				pha
.2839	8a		txa				txa 								; A = stack
.283a	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.283c	a2 00		ldx #$00		ldx	#0
.283e	20 9c 2f	jsr $2f9c		jsr	stringHandler
.2841	aa		tax				tax 								; X = stack
.2842	68		pla				pla
.2843	a8		tay				tay
.2844	60		rts				rts
.2845					ExecLower:
.2845	38		sec				sec 								; set carry is lower
.2846	b0 01		bcs $2849			bcs 	ExecUpperLower
.2848					ExecUpper:
.2848	18		clc				clc 								; clear carry is upper
.2849					ExecUpperLower:
.2849	08		php				php 								; save carry
.284a	20 e8 25	jsr $25e8			jsr 	EvaluateString 				; string to stack,X
.284d	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; check closing right bracket.
.2850	28		plp				plp 								; restore carry, save Y
.2851	98		tya				tya
.2852	48		pha				pha
.2853	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2855	2a		rol a				rol 	a
.2856	a8		tay				tay 								; now in Y
.2857	8a		txa				txa 								; do the substring and exit.
.2858	a2 0a		ldx #$0a		ldx	#10
.285a	20 9c 2f	jsr $2f9c		jsr	stringHandler
.285d	aa		tax				tax
.285e	68		pla				pla
.285f	a8		tay				tay
.2860	60		rts				rts
.2861					ExecLeft:
.2861	20 e8 25	jsr $25e8			jsr 	EvaluateString 				; string to stack,X
.2864	20 04 2c	jsr $2c04			jsr 	CheckComma
.2867	e8		inx				inx
.2868	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.286a	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit
.286d	e8		inx				inx
.286e	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2871					ExecSubstring:
.2871	ca		dex				dex 								; fix up X
.2872	ca		dex				dex
.2873	20 f7 2b	jsr $2bf7			jsr 	CheckRightParen 			; check closing right bracket.
.2876	8a		txa				txa 								; do the substring and exit.
.2877	a2 0c		ldx #$0c		ldx	#12
.2879	20 9c 2f	jsr $2f9c		jsr	stringHandler
.287c	aa		tax				tax
.287d	60		rts				rts
.287e					ExecMid:
.287e	20 e8 25	jsr $25e8			jsr 	EvaluateString 				; string to stack,X
.2881	20 04 2c	jsr $2c04			jsr 	CheckComma
.2884	e8		inx				inx
.2885	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2888	c9 00		cmp #$00			cmp 	#0
.288a	f0 15		beq $28a1			beq 	_EMValue
.288c	e8		inx				inx
.288d	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.288f	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit
.2892	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2894	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2896	f0 d9		beq $2871			beq 	ExecSubString
.2898	20 04 2c	jsr $2c04			jsr 	CheckComma
.289b	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.289e	4c 71 28	jmp $2871			jmp 	ExecSubString
.28a1					_EMValue:
.28a1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.28a3	20 85 11	jsr $1185		jsr	errorHandler
.28a6					ExecRight:
.28a6	20 e8 25	jsr $25e8			jsr 	EvaluateString 				; string to stack,X
.28a9	20 04 2c	jsr $2c04			jsr 	CheckComma
.28ac	e8		inx				inx
.28ad	20 fb 25	jsr $25fb			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.28b0	ca		dex				dex
.28b1	98		tya				tya
.28b2	48		pha				pha
.28b3	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.28b5	85 2a		sta $2a				sta 	temp0
.28b7	b5 50		lda $50,x			lda 	esInt1,x
.28b9	85 2b		sta $2b				sta 	temp0+1
.28bb	a0 00		ldy #$00			ldy 	#0 							; point to length
.28bd	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.28bf	18		clc				clc 								; add 1.
.28c0	69 01		adc #$01			adc 	#1
.28c2	38		sec				sec
.28c3	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.28c5	f0 02		beq $28c9			beq		_ERMake1 					; if zero, make it 1.
.28c7	b0 02		bcs $28cb			bcs		_EROkay
.28c9					_ERMake1:
.28c9	a9 01		lda #$01			lda 	#1 							; start position.
.28cb					_EROkay:
.28cb	e8		inx				inx 								; set start pos.
.28cc	95 48		sta $48,x			sta 	esInt0,x
.28ce	e8		inx				inx
.28cf	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.28d1	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit
.28d4	68		pla				pla
.28d5	a8		tay				tay
.28d6	4c 71 28	jmp $2871			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.28d9					MInt32And:
.28d9	b5 48		lda $48,x			lda 	esInt0,x
.28db	35 49		and $49,x			and 	esInt0+1,x
.28dd	95 48		sta $48,x			sta 	esInt0,x
.28df	b5 50		lda $50,x			lda 	esInt1,x
.28e1	35 51		and $51,x			and 	esInt1+1,x
.28e3	95 50		sta $50,x			sta 	esInt1,x
.28e5	b5 58		lda $58,x			lda 	esInt2,x
.28e7	35 59		and $59,x			and 	esInt2+1,x
.28e9	95 58		sta $58,x			sta 	esInt2,x
.28eb	b5 60		lda $60,x			lda 	esInt3,x
.28ed	35 61		and $61,x			and 	esInt3+1,x
.28ef	95 60		sta $60,x			sta 	esInt3,x
.28f1	60		rts				rts
.28f2					MInt32Or:
.28f2	b5 48		lda $48,x			lda 	esInt0,x
.28f4	15 49		ora $49,x			ora 	esInt0+1,x
.28f6	95 48		sta $48,x			sta 	esInt0,x
.28f8	b5 50		lda $50,x			lda 	esInt1,x
.28fa	15 51		ora $51,x			ora 	esInt1+1,x
.28fc	95 50		sta $50,x			sta 	esInt1,x
.28fe	b5 58		lda $58,x			lda 	esInt2,x
.2900	15 59		ora $59,x			ora 	esInt2+1,x
.2902	95 58		sta $58,x			sta 	esInt2,x
.2904	b5 60		lda $60,x			lda 	esInt3,x
.2906	15 61		ora $61,x			ora 	esInt3+1,x
.2908	95 60		sta $60,x			sta 	esInt3,x
.290a	60		rts				rts
.290b					MInt32Xor:
.290b	b5 48		lda $48,x			lda 	esInt0,x
.290d	55 49		eor $49,x			eor 	esInt0+1,x
.290f	95 48		sta $48,x			sta 	esInt0,x
.2911	b5 50		lda $50,x			lda 	esInt1,x
.2913	55 51		eor $51,x			eor 	esInt1+1,x
.2915	95 50		sta $50,x			sta 	esInt1,x
.2917	b5 58		lda $58,x			lda 	esInt2,x
.2919	55 59		eor $59,x			eor 	esInt2+1,x
.291b	95 58		sta $58,x			sta 	esInt2,x
.291d	b5 60		lda $60,x			lda 	esInt3,x
.291f	55 61		eor $61,x			eor 	esInt3+1,x
.2921	95 60		sta $60,x			sta 	esInt3,x
.2923	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2924					MInt32Compare:
.2924	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2926	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2928	d0 13		bne $293d			bne 	MInt32Compare2
.292a	b5 50		lda $50,x			lda 	esInt1,x
.292c	d5 51		cmp $51,x			cmp 	esInt1+1,x
.292e	d0 0d		bne $293d			bne 	MInt32Compare2
.2930	b5 58		lda $58,x			lda 	esInt2,x
.2932	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2934	d0 07		bne $293d			bne 	MInt32Compare2
.2936	b5 60		lda $60,x			lda 	esInt3,x
.2938	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.293a	d0 01		bne $293d			bne 	MInt32Compare2
.293c	60		rts				rts
.293d					MInt32Compare2:
.293d	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.293f	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2941	b5 50		lda $50,x			lda		esInt1,x
.2943	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2945	b5 58		lda $58,x			lda		esInt2,x
.2947	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2949	b5 60		lda $60,x			lda		esInt3,x
.294b	f5 61		sbc $61,x			sbc 	esInt3+1,x
.294d	50 02		bvc $2951			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.294f	49 80		eor #$80			eor 	#$80
.2951					_I32LNoOverflow
.2951	30 03		bmi $2956			bmi 	MInt32CLess					; if -ve then return $FF
.2953	a9 01		lda #$01			lda 	#$01						; else return $01
.2955	60		rts				rts
.2956					MInt32CLess:
.2956	a9 ff		lda #$ff			lda 	#$FF
.2958	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2959					MInt32SDivide:
.2959	98		tya				tya  								; save Y, which is the count of negations
.295a	48		pha				pha
.295b	a0 00		ldy #$00			ldy 	#0 							; zero count
.295d	20 75 29	jsr $2975			jsr 	_MInt32SRemSign 			; unsign TOS
.2960	e8		inx				inx 								; unsign TOS+1
.2961	20 75 29	jsr $2975			jsr 	_MInt32SRemSign
.2964	ca		dex				dex
.2965	98		tya				tya 								; save sign count on stack
.2966	48		pha				pha
.2967	20 7e 29	jsr $297e			jsr 	MInt32UDivide 				; unsigned division
.296a	68		pla				pla 								; get sign count back
.296b	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.296d	f0 03		beq $2972			beq 	_I32SNoNeg
.296f	20 3e 2b	jsr $2b3e			jsr 	MInt32Negate
.2972					_I32SNoNeg:
.2972	68		pla				pla 								; restoe Y and exit
.2973	a8		tay				tay
.2974	60		rts				rts
.2975					_MInt32SRemSign:
.2975	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2977	10 04		bpl $297d			bpl 	_MInt32SRSExit
.2979	c8		iny				iny 								; increment the sign count
.297a	20 3e 2b	jsr $2b3e			jsr 	MInt32Negate 				; negate the value.
.297d					_MInt32SRSExit:
.297d	60		rts				rts
.297e					MInt32UDivide:
.297e	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2980	15 51		ora $51,x			ora 	esInt1+1,x
.2982	15 52		ora $52,x			ora 	esInt1+2,x
.2984	15 53		ora $53,x			ora 	esInt1+3,x
.2986	f0 4a		beq $29d2			beq 	_MInt32DZero
.2988	e8		inx				inx 								; clear A
.2989	e8		inx				inx
.298a	20 84 2b	jsr $2b84			jsr 	MInt32False
.298d	ca		dex				dex
.298e	ca		dex				dex
.298f	98		tya				tya 								; save Y on the stack
.2990	48		pha				pha
.2991	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2993					_MInt32UDLoop:
.2993	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2995	36 50		rol $50,x			rol 	esInt1,x
.2997	36 58		rol $58,x			rol 	esInt2,x
.2999	36 60		rol $60,x			rol 	esInt3,x
.299b	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.299d	36 52		rol $52,x			rol 	esInt1+2,x
.299f	36 5a		rol $5a,x			rol 	esInt2+2,x
.29a1	36 62		rol $62,x			rol 	esInt3+2,x
.29a3	38		sec				sec 								; calculate A-M saving result on the stack
.29a4	b5 4a		lda $4a,x			lda 	esInt0+2,x
.29a6	f5 49		sbc $49,x			sbc 	esInt0+1,x
.29a8	48		pha				pha
.29a9	b5 52		lda $52,x			lda 	esInt1+2,x
.29ab	f5 51		sbc $51,x			sbc 	esInt1+1,x
.29ad	48		pha				pha
.29ae	b5 5a		lda $5a,x			lda 	esInt2+2,x
.29b0	f5 59		sbc $59,x			sbc 	esInt2+1,x
.29b2	48		pha				pha
.29b3	b5 62		lda $62,x			lda 	esInt3+2,x
.29b5	f5 61		sbc $61,x			sbc 	esInt3+1,x
.29b7	90 10		bcc $29c9			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.29b9	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.29bb	68		pla				pla
.29bc	95 5a		sta $5a,x			sta 	esInt2+2,x
.29be	68		pla				pla
.29bf	95 52		sta $52,x			sta 	esInt1+2,x
.29c1	68		pla				pla
.29c2	95 4a		sta $4a,x			sta 	esInt0+2,x
.29c4	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.29c6	4c cc 29	jmp $29cc			jmp 	_MInt32Next 					; do the next iteration
.29c9					_MInt32NoSubtract:
.29c9	68		pla				pla
.29ca	68		pla				pla
.29cb	68		pla				pla
.29cc					_MInt32Next:
.29cc	88		dey				dey 								; do this 32 times.
.29cd	d0 c4		bne $2993			bne 	_MInt32UDLoop
.29cf	68		pla				pla 								; restore Y and exit
.29d0	a8		tay				tay
.29d1	60		rts				rts
.29d2					_MInt32DZero:
.29d2	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.29d4	20 85 11	jsr $1185		jsr	errorHandler
.29d7					MInt32Modulus:
.29d7	20 7e 29	jsr $297e			jsr 	MInt32UDivide 				; do the division.
.29da	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.29dc	95 60		sta $60,x			sta 	esInt3,x
.29de	b5 5a		lda $5a,x			lda 	esInt2+2,x
.29e0	95 58		sta $58,x			sta 	esInt2,x
.29e2	b5 52		lda $52,x			lda 	esInt1+2,x
.29e4	95 50		sta $50,x			sta 	esInt1,x
.29e6	b5 4a		lda $4a,x			lda 	esInt0+2,x
.29e8	95 48		sta $48,x			sta 	esInt0,x
.29ea	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c0e					fs32Length:
>0c0e							.fill 	1
.29eb					LinkInt32FromString:
.29eb	aa		tax				tax
.29ec	98		tya				tya
.29ed	20 f2 29	jsr $29f2			jsr 	MInt32FromString
.29f0	8a		txa				txa
.29f1	60		rts				rts
.29f2					MInt32FromString:
.29f2	85 32		sta $32				sta 	tempShort 					; save base
.29f4	98		tya				tya
.29f5	48		pha				pha
.29f6	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.29f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.29fa	8d 0e 0c	sta $0c0e			sta 	fs32Length
.29fd	f0 65		beq $2a64			beq 	_I32FSFail2					; fail if length zero.
.29ff	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2a01	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2a03	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2a05	d0 09		bne $2a10			bne 	_I32FSNotNegative
.2a07	ad 0e 0c	lda $0c0e			lda 	fs32Length 					; get length back.
.2a0a	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2a0c	f0 56		beq $2a64			beq 	_I32FSFail2
.2a0e	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2a10					_I32FSNotNegative:
.2a10	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2a12	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2a14	d0 02		bne $2a18			bne 	_I32FSNN2
.2a16	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2a18					_I32FSNN2:
.2a18	48		pha				pha 								; save base + final sign on stack.
.2a19	20 84 2b	jsr $2b84			jsr 	MInt32False 				; zero the return value.
.2a1c					_I32FSMainLoop:
.2a1c	68		pla				pla 								; get the base back into tempShort
.2a1d	48		pha				pha
.2a1e	29 7f		and #$7f			and 	#$7F
.2a20	85 32		sta $32				sta 	tempShort
.2a22	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2a24	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2a26	90 02		bcc $2a2a			bcc 	_I32FSNotLC
.2a28	e9 20		sbc #$20			sbc 	#32
.2a2a					_I32FSNotLC:
.2a2a	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2a2b	e9 30		sbc #$30			sbc 	#"0"
.2a2d	90 34		bcc $2a63			bcc 	_I32FSFail 					; nothing more to do.
.2a2f	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2a31	90 06		bcc $2a39			bcc 	_I32FSValidate
.2a33	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2a35	90 2c		bcc $2a63			bcc 	_I32FSFail
.2a37	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2a39					_I32FSValidate:
.2a39	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2a3b	b0 26		bcs $2a63			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2a3d	48		pha				pha 								; save the new digit value.
.2a3e	e8		inx				inx 								; put base into next slot up on stack
.2a3f	a5 32		lda $32				lda 	tempShort
.2a41	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit
.2a44	ca		dex				dex
.2a45	20 9c 2a	jsr $2a9c			jsr 	MInt32Multiply 				; multiply current by the base
.2a48	e8		inx				inx
.2a49	68		pla				pla  								; put additive into next slot
.2a4a	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit
.2a4d	ca		dex				dex
.2a4e	20 68 2a	jsr $2a68			jsr 	MInt32Add 					; and add it
.2a51	c8		iny				iny 								; bump the character pointer
.2a52	cc 0e 0c	cpy $0c0e			cpy 	fs32Length 					; until > length.
.2a55	f0 c5		beq $2a1c			beq 	_I32FSMainLoop
.2a57	90 c3		bcc $2a1c			bcc 	_I32FSMainLoop
.2a59					_I32FSDone:
.2a59	68		pla				pla 								; get base/final sign back
.2a5a	10 03		bpl $2a5f			bpl 	_I32FSNN3
.2a5c	20 3e 2b	jsr $2b3e			jsr 	MInt32Negate 				; negate the result.
.2a5f					_I32FSNN3:
.2a5f	68		pla				pla
.2a60	a8		tay				tay
.2a61	38		sec				sec
.2a62	60		rts				rts
.2a63					_I32FSFail:
.2a63	68		pla				pla
.2a64					_I32FSFail2:
.2a64	68		pla				pla
.2a65	a8		tay				tay
.2a66	18		clc				clc
.2a67	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2a68					MInt32Add:
.2a68	18		clc				clc
.2a69	b5 48		lda $48,x			lda 	esInt0,x
.2a6b	75 49		adc $49,x			adc 	esInt0+1,x
.2a6d	95 48		sta $48,x			sta 	esInt0,x
.2a6f	b5 50		lda $50,x			lda 	esInt1,x
.2a71	75 51		adc $51,x			adc 	esInt1+1,x
.2a73	95 50		sta $50,x			sta 	esInt1,x
.2a75	b5 58		lda $58,x			lda 	esInt2,x
.2a77	75 59		adc $59,x			adc 	esInt2+1,x
.2a79	95 58		sta $58,x			sta 	esInt2,x
.2a7b	b5 60		lda $60,x			lda 	esInt3,x
.2a7d	75 61		adc $61,x			adc 	esInt3+1,x
.2a7f	95 60		sta $60,x			sta 	esInt3,x
.2a81	60		rts				rts
.2a82					MInt32Sub:
.2a82	38		sec				sec
.2a83	b5 48		lda $48,x			lda 	esInt0,x
.2a85	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2a87	95 48		sta $48,x			sta 	esInt0,x
.2a89	b5 50		lda $50,x			lda 	esInt1,x
.2a8b	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2a8d	95 50		sta $50,x			sta 	esInt1,x
.2a8f	b5 58		lda $58,x			lda 	esInt2,x
.2a91	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2a93	95 58		sta $58,x			sta 	esInt2,x
.2a95	b5 60		lda $60,x			lda 	esInt3,x
.2a97	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2a99	95 60		sta $60,x			sta 	esInt3,x
.2a9b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2a9c					MInt32Multiply:
.2a9c	e8		inx				inx 								; copy 2nd -> 3rd
.2a9d	20 c2 2a	jsr $2ac2			jsr 	MInt32CopyUp
.2aa0	ca		dex				dex
.2aa1	20 c2 2a	jsr $2ac2			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2aa4	20 84 2b	jsr $2b84			jsr 	MInt32False 				; zero 1st.
.2aa7					_I32Loop:
.2aa7	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2aa9	29 01		and #$01			and 	#1
.2aab	f0 03		beq $2ab0			beq 	_I32NoAdd 					; if set
.2aad	20 68 2a	jsr $2a68			jsr 	MInt32Add 					; add 2nd to 1st.
.2ab0					_I32NoAdd:
.2ab0	e8		inx				inx 								; shift 2nd left
.2ab1	20 99 2b	jsr $2b99			jsr 	MInt32ShiftLeft
.2ab4	e8		inx				inx  								; shift 3rd right
.2ab5	20 a2 2b	jsr $2ba2			jsr 	MInt32ShiftRight
.2ab8	20 ab 2b	jsr $2bab			jsr 	MInt32Zero 					; check if zero.
.2abb	08		php				php 								; save status bits
.2abc	ca		dex				dex 	 							; point back to 1st
.2abd	ca		dex				dex
.2abe	28		plp				plp 								; get status bits
.2abf	d0 e6		bne $2aa7			bne 	_I32Loop 					; if non-zero keep going.
.2ac1	60		rts				rts
.2ac2					MInt32CopyUp:
.2ac2	b5 48		lda $48,x			lda 	esInt0,x
.2ac4	95 49		sta $49,x			sta 	esInt0+1,x
.2ac6	b5 50		lda $50,x			lda 	esInt1,x
.2ac8	95 51		sta $51,x			sta 	esInt1+1,x
.2aca	b5 58		lda $58,x			lda 	esInt2,x
.2acc	95 59		sta $59,x			sta 	esInt2+1,x
.2ace	b5 60		lda $60,x			lda 	esInt3,x
.2ad0	95 61		sta $61,x			sta 	esInt3+1,x
.2ad2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c0f					MCharCount:	.fill 	1						; count of converted characters
.2ad3					MLInt32ToString:
.2ad3	aa		tax				tax									; module passes stack in A, base in Y
.2ad4	98		tya				tya
.2ad5	20 da 2a	jsr $2ada			jsr 	MInt32ToString
.2ad8	8a		txa				txa
.2ad9	60		rts				rts
.2ada					MInt32ToString:
.2ada	48		pha				pha 								; save base
.2adb	85 32		sta $32				sta 	tempShort 					; save target base.
.2add	a9 00		lda #$00			lda 	#0
.2adf	8d 0f 0c	sta $0c0f			sta 	MCharCount 					; clear character count to 0
.2ae2	98		tya				tya
.2ae3	48		pha				pha
.2ae4	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2ae6	10 10		bpl $2af8			bpl 	_I32TSUnsigned
.2ae8	48		pha				pha 								; save base on stack.
.2ae9	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2aeb	10 08		bpl $2af5			bpl 	_I32TSNoFlip
.2aed	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2aef	20 2b 2b	jsr $2b2b			jsr 	MI32WriteCharacter
.2af2	20 3e 2b	jsr $2b3e			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2af5					_I32TSNoFlip:
.2af5	68		pla				pla 								; get the base back
.2af6	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2af8					_I32TSUnsigned:
.2af8	20 06 2b	jsr $2b06			jsr 	MI32DivideWrite 			; recursive code to output string.
.2afb	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2afd	ad 0f 0c	lda $0c0f			lda 	MCharCount
.2b00	91 2a		sta ($2a),y			sta 	(temp0),y
.2b02	68		pla				pla
.2b03	a8		tay				tay
.2b04	68		pla				pla
.2b05	60		rts				rts
.2b06					MI32DivideWrite:
.2b06	48		pha				pha 								; save the divisor/base
.2b07	e8		inx				inx 								; write in the dividing position.
.2b08	20 93 2b	jsr $2b93			jsr 	MInt32Set8Bit
.2b0b	ca		dex				dex
.2b0c	20 7e 29	jsr $297e			jsr 	MInt32UDivide 				; divide number by base.
.2b0f	68		pla				pla 								; get the base into Y
.2b10	a8		tay				tay
.2b11	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2b13	48		pha				pha
.2b14	20 ab 2b	jsr $2bab			jsr 	MInt32Zero 					; is the result zero ?
.2b17	f0 04		beq $2b1d			beq 	_I32NoRecurse 				; if so, don't recurse.
.2b19	98		tya				tya 								; put base into A
.2b1a	20 06 2b	jsr $2b06			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2b1d					_I32NoRecurse:
.2b1d	68		pla				pla 								; get the remainder back
.2b1e	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2b20	90 02		bcc $2b24			bcc 	_I32NotHex
.2b22	69 06		adc #$06			adc 	#7-1
.2b24					_I32NotHex:
.2b24	18		clc				clc 								; make it ASCII
.2b25	69 30		adc #$30			adc 	#48
.2b27	20 2b 2b	jsr $2b2b			jsr 	MI32WriteCharacter 			; write the character out
.2b2a	60		rts				rts 								; and exit.
.2b2b					MI32WriteCharacter:
.2b2b	ee 0f 0c	inc $0c0f			inc 	MCharCount 					; bump count (space for leading count)
.2b2e	ac 0f 0c	ldy $0c0f			ldy 	MCharCount 					; get position
.2b31	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2b33	c8		iny				iny
.2b34	a9 00		lda #$00			lda 	#0
.2b36	91 2a		sta ($2a),y			sta 	(temp0),y
.2b38	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c10					MSeed32:	.fill 	4							; random number seed.
.2b39					MInt32Absolute:
.2b39	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2b3b	30 01		bmi $2b3e			bmi 	MInt32Negate
.2b3d	60		rts				rts
.2b3e					MInt32Negate:
.2b3e	38		sec				sec 								; subtract from zero.
.2b3f	a9 00		lda #$00			lda 	#0
.2b41	f5 48		sbc $48,x			sbc 	esInt0,x
.2b43	95 48		sta $48,x			sta 	esInt0,x
.2b45	a9 00		lda #$00			lda 	#0
.2b47	f5 50		sbc $50,x			sbc 	esInt1,x
.2b49	95 50		sta $50,x			sta 	esInt1,x
.2b4b	a9 00		lda #$00			lda 	#0
.2b4d	f5 58		sbc $58,x			sbc 	esInt2,x
.2b4f	95 58		sta $58,x			sta 	esInt2,x
.2b51	a9 00		lda #$00			lda 	#0
.2b53	f5 60		sbc $60,x			sbc 	esInt3,x
.2b55	95 60		sta $60,x			sta 	esInt3,x
.2b57	60		rts				rts
.2b58					MInt32Not:
.2b58	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2b5a	49 ff		eor #$ff			eor 	#$FF
.2b5c	95 48		sta $48,x			sta 	esInt0,x
.2b5e	b5 50		lda $50,x			lda 	esInt1,x
.2b60	49 ff		eor #$ff			eor 	#$FF
.2b62	95 50		sta $50,x			sta 	esInt1,x
.2b64	b5 58		lda $58,x			lda 	esInt2,x
.2b66	49 ff		eor #$ff			eor 	#$FF
.2b68	95 58		sta $58,x			sta 	esInt2,x
.2b6a	b5 60		lda $60,x			lda 	esInt3,x
.2b6c	49 ff		eor #$ff			eor 	#$FF
.2b6e	95 60		sta $60,x			sta 	esInt3,x
.2b70	60		rts				rts
.2b71					MInt32Sign:
.2b71	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2b73	30 0b		bmi $2b80			bmi 	MInt32True 					; if set return -1 (true)
.2b75	20 ab 2b	jsr $2bab			jsr 	MInt32Zero 					; is it zero ?
.2b78	f0 0a		beq $2b84			beq 	MInt32False 				; if zero return 0 (false)
.2b7a	20 84 2b	jsr $2b84			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2b7d	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2b7f	60		rts				rts
.2b80					MInt32True:
.2b80	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2b82	d0 02		bne $2b86			bne 	MInt32WriteAll
.2b84					MInt32False:
.2b84	a9 00		lda #$00			lda 	#0
.2b86					MInt32WriteAll:
.2b86	95 48		sta $48,x			sta 	esInt0,x
.2b88					MInt32Write123:
.2b88	95 50		sta $50,x			sta 	esInt1,x
.2b8a	95 58		sta $58,x			sta 	esInt2,x
.2b8c	95 60		sta $60,x			sta 	esInt3,x
.2b8e	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2b90	95 40		sta $40,x			sta 	esType,x
.2b92	60		rts				rts
.2b93					MInt32Set8Bit:
.2b93	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2b95	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2b97	f0 ef		beq $2b88			beq		MInt32Write123
.2b99					MInt32ShiftLeft:
.2b99	16 48		asl $48,x			asl 	esInt0,x
.2b9b	36 50		rol $50,x			rol	 	esInt1,x
.2b9d	36 58		rol $58,x			rol	 	esInt2,x
.2b9f	36 60		rol $60,x			rol	 	esInt3,x
.2ba1	60		rts				rts
.2ba2					MInt32ShiftRight:
.2ba2	56 60		lsr $60,x			lsr 	esInt3,x
.2ba4	76 58		ror $58,x			ror 	esInt2,x
.2ba6	76 50		ror $50,x			ror 	esInt1,x
.2ba8	76 48		ror $48,x			ror 	esInt0,x
.2baa	60		rts				rts
.2bab					MInt32Zero:
.2bab	b5 48		lda $48,x			lda 	esInt0,x
.2bad	15 50		ora $50,x			ora 	esInt1,x
.2baf	15 58		ora $58,x			ora 	esInt2,x
.2bb1	15 60		ora $60,x			ora 	esInt3,x
.2bb3	60		rts				rts
.2bb4					MInt32Random:
.2bb4	98		tya				tya
.2bb5	48		pha				pha
.2bb6	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2bb8	ad 10 0c	lda $0c10			lda 	MSeed32+0 					; check the seed isn't zero
.2bbb	d0 03		bne $2bc0			bne 	_Random1
.2bbd	a8		tay				tay 								; if so do it 256 times
.2bbe	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2bc0					_Random1:
.2bc0	0a		asl a				asl 	a
.2bc1	2e 11 0c	rol $0c11			rol 	MSeed32+1
.2bc4	2e 12 0c	rol $0c12			rol 	MSeed32+2
.2bc7	2e 13 0c	rol $0c13			rol 	MSeed32+3
.2bca	90 02		bcc $2bce			bcc 	_Random2
.2bcc	49 c5		eor #$c5			eor 	#$C5
.2bce					_Random2:
.2bce	88		dey				dey
.2bcf	d0 ef		bne $2bc0			bne 	_Random1
.2bd1	8d 10 0c	sta $0c10			sta 	MSeed32+0 					; copy the seed in.
.2bd4	95 48		sta $48,x			sta 	esInt0,x
.2bd6	ad 11 0c	lda $0c11			lda 	MSeed32+1
.2bd9	95 50		sta $50,x			sta 	esInt1,x
.2bdb	ad 12 0c	lda $0c12			lda 	MSeed32+2
.2bde	95 58		sta $58,x			sta 	esInt2,x
.2be0	ad 13 0c	lda $0c13			lda 	MSeed32+3
.2be3	95 60		sta $60,x			sta 	esInt3,x
.2be5	68		pla				pla
.2be6	a8		tay				tay
.2be7	a9 00		lda #$00			lda 	#0
.2be9	95 40		sta $40,x			sta 	esType,x
.2beb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2bec					CheckToken:
.2bec	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2bee	d0 02		bne $2bf2			bne 	_CTError
.2bf0	c8		iny				iny
.2bf1	60		rts				rts
.2bf2					_CTError:
.2bf2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2bf4	20 85 11	jsr $1185		jsr	errorHandler
.2bf7					CheckRightParen:
.2bf7	b1 28		lda ($28),y			lda 	(codePtr),y
.2bf9	c8		iny				iny
.2bfa	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2bfc	d0 01		bne $2bff			bne 	_CRPError
.2bfe	60		rts				rts
.2bff					_CRPError:
.2bff	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2c01	20 85 11	jsr $1185		jsr	errorHandler
.2c04					CheckComma:
.2c04	b1 28		lda ($28),y			lda 	(codePtr),y
.2c06	c8		iny				iny
.2c07	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2c09	d0 01		bne $2c0c			bne 	_CCError
.2c0b	60		rts				rts
.2c0c					_CCError:
.2c0c	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2c0e	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2c11					ScanForward:
.2c11	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2c13	86 2d		stx $2d				stx 	temp1+1
.2c15	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2c17	85 2e		sta $2e				sta 	temp2
.2c19	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2c1b	c8		iny				iny
.2c1c	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2c1e	d0 08		bne $2c28			bne 	_SFNoCheck 					; if so, check token against entered values.
.2c20	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2c22	f0 24		beq $2c48			beq 	_SFExit 					; at the same strcture depth.
.2c24	c5 2d		cmp $2d				cmp 	temp1+1
.2c26	f0 20		beq $2c48			beq 	_SFExit
.2c28					_SFNoCheck:
.2c28	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2c2a	90 ed		bcc $2c19			bcc 	_SFLoop
.2c2c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2c2e	90 19		bcc $2c49			bcc 	_SFSpecials
.2c30	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2c32	90 e5		bcc $2c19			bcc 	_SFLoop
.2c34	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2c36	b0 e1		bcs $2c19			bcs 	_SFLoop
.2c38	aa		tax				tax  								; token in X, and look up the adjuster.
.2c39	bd 8c 24	lda $248c,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2c3c	38		sec				sec 								; convert to an offset ($FF,$01)
.2c3d	e9 81		sbc #$81			sbc 	#$81
.2c3f	18		clc				clc 								; add to depth
.2c40	65 2e		adc $2e				adc 	temp2
.2c42	85 2e		sta $2e				sta 	temp2
.2c44	10 d3		bpl $2c19			bpl 	_SFLoop 					; +ve okay to continue
.2c46	30 35		bmi $2c7d			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2c48	60		rts		_SFExit:rts
.2c49					_SFSpecials:
.2c49	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2c4b	f0 14		beq $2c61			beq 	_SFNextLine
.2c4d	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2c4f	f0 31		beq $2c82			beq 	_SFFloatSkip
.2c51	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2c53	f0 04		beq $2c59			beq 	_SFSkipString
.2c55	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2c56	4c 19 2c	jmp $2c19			jmp 	_SFLoop 					; token.
.2c59					_SFSkipString:
.2c59	98		tya				tya
.2c5a	38		sec				sec
.2c5b	71 28		adc ($28),y			adc 	(codePtr),y
.2c5d	a8		tay				tay
.2c5e	4c 19 2c	jmp $2c19			jmp 	_SFLoop
.2c61					_SFNextLine:
.2c61	a0 00		ldy #$00			ldy 	#0 							; get offset
.2c63	b1 28		lda ($28),y			lda 	(codePtr),y
.2c65	18		clc				clc 								; add to code pointer.
.2c66	65 28		adc $28				adc 	codePtr
.2c68	85 28		sta $28				sta 	codePtr
.2c6a	90 02		bcc $2c6e			bcc		_SFNLNoCarry
.2c6c	e6 29		inc $29				inc 	codePtr+1
.2c6e					_SFNLNoCarry:
.2c6e	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2c70	d0 a7		bne $2c19			bne		_SFLoop 					; no go round again
.2c72	a5 2c		lda $2c				lda 	temp1
.2c74	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.2c76	d0 05		bne $2c7d			bne 	_SFError 					; read uses this to search for data statements
.2c78	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2c7a	20 85 11	jsr $1185		jsr	errorHandler
.2c7d					_SFError:
.2c7d	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2c7f	20 85 11	jsr $1185		jsr	errorHandler
.2c82					_SFFloatSkip:
.2c82	4c 46 1e	jmp $1e46			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2c85					RSReset:
.2c85	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2c87	85 78		sta $78				sta 	rsPointer
.2c89	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2c8b	85 79		sta $79				sta 	1+(rsPointer)
.2c8d	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2c8f	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2c92	60		rts				rts
.2c93					RSClaim:
.2c93	84 32		sty $32				sty 	tempShort 					; preserve Y
.2c95	48		pha				pha 								; save marker on stack.
.2c96	8a		txa				txa 								; get bytes required.
.2c97	38		sec				sec
.2c98	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2c9a	65 78		adc $78				adc 	rsPointer
.2c9c	85 78		sta $78				sta 	rsPointer
.2c9e	a5 79		lda $79				lda 	rsPointer+1
.2ca0	69 ff		adc #$ff			adc 	#$FF
.2ca2	85 79		sta $79				sta 	rsPointer+1
.2ca4	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2ca6	90 08		bcc $2cb0			bcc 	_RSCOverflow
.2ca8	68		pla				pla 								; get marker back
.2ca9	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2cab	91 78		sta ($78),y			sta 	(rsPointer),y
.2cad	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2caf	60		rts				rts
.2cb0					_RSCOverflow:
.2cb0	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2cb2	20 85 11	jsr $1185		jsr	errorHandler
.2cb5					RSFree:
.2cb5	18		clc				clc
.2cb6	65 78		adc $78				adc 	rsPointer
.2cb8	85 78		sta $78				sta 	rsPointer
.2cba	90 02		bcc $2cbe			bcc 	_RSFExit
.2cbc	e6 79		inc $79				inc 	rsPointer+1
.2cbe					_RSFExit:
.2cbe	60		rts				rts
.2cbf					RSSavePosition:
.2cbf	84 32		sty $32				sty 	tempShort 					; save Y position
.2cc1	a8		tay				tay 								; this is where we write it.
.2cc2	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2cc4	91 78		sta ($78),y			sta 	(rsPointer),y
.2cc6	c8		iny				iny
.2cc7	a5 29		lda $29				lda 	codePtr+1
.2cc9	91 78		sta ($78),y			sta 	(rsPointer),y
.2ccb	c8		iny				iny
.2ccc	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.2cce	91 78		sta ($78),y			sta 	(rsPointer),y
.2cd0	a8		tay				tay 								; fix Y back again to original value
.2cd1	60		rts				rts
.2cd2					RSLoadPosition:
.2cd2	a8		tay				tay
.2cd3	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.2cd5	85 28		sta $28				sta 	codePtr
.2cd7	c8		iny				iny
.2cd8	b1 78		lda ($78),y			lda 	(rsPointer),y
.2cda	85 29		sta $29				sta 	codePtr+1
.2cdc	c8		iny				iny
.2cdd	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2cdf	a8		tay				tay 								; to Y
.2ce0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.2ce1					WarmStart:
.2ce1	a2 02		ldx #$02		ldx	#2
.2ce3	20 d0 16	jsr $16d0		jsr	interactionHandler

;******  Return to file: main/main.asm

.2ce6					mainHandler:
.2ce6	7c e9 2c	jmp ($2ce9,x)			jmp 	(mainVectors,x)
.2ce9					mainVectors:
>2ce9	f7 2b					.word CheckRightParen      ; index 0
>2ceb	e5 16					.word XCommandClear        ; index 2
>2ced	0e 26					.word LinkEvaluate         ; index 4
>2cef	1a 26					.word LinkEvaluateInteger  ; index 6
>2cf1	20 26					.word LinkEvaluateSmallInt ; index 8
>2cf3	14 26					.word LinkEvaluateTerm     ; index 10
>2cf5	d3 2a					.word MLInt32ToString      ; index 12
>2cf7	af 1b					.word Command_XNew         ; index 14
>2cf9	be 1d					.word XCommand_Run         ; index 16
>2cfb	ca 1d					.word Command_RunFrom      ; index 18
>2cfd	eb 29					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.2cff					section_end_main:
.2cff					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.2cff					StringChrs:
.2cff	aa		tax				tax 								; set up stack
.2d00	a9 02		lda #$02			lda 	#2
.2d02	20 c2 2d	jsr $2dc2			jsr 	AllocateSoftString
.2d05	98		tya				tya
.2d06	20 e8 2d	jsr $2de8			jsr 	WriteSoftString
.2d09					StringUpdate:
.2d09	20 17 2d	jsr $2d17			jsr 	ReturnSoftString
.2d0c	8a		txa				txa
.2d0d	60		rts				rts
.2d0e					StringNull:
.2d0e	aa		tax				tax
.2d0f	a9 01		lda #$01			lda 	#1
.2d11	20 c2 2d	jsr $2dc2			jsr 	AllocateSoftString
.2d14	4c 09 2d	jmp $2d09			jmp 	StringUpdate
.2d17					ReturnSoftString:
.2d17	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.2d19	95 48		sta $48,x			sta 	esInt0,x
.2d1b	a5 7b		lda $7b				lda 	softMemAlloc+1
.2d1d	95 50		sta $50,x			sta 	esInt1,x
.2d1f	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.2d21	95 58		sta $58,x			sta 	esInt2,x
.2d23	95 60		sta $60,x			sta 	esInt3,x
.2d25	a9 40		lda #$40			lda 	#$40 						; type string.
.2d27	95 40		sta $40,x			sta 	esType,x
.2d29	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.2d2a					STRCompare:
.2d2a	48		pha				pha 								; save A
.2d2b	aa		tax				tax 								; put stack pos in X
.2d2c	98		tya				tya
.2d2d	48		pha				pha
.2d2e	20 62 2d	jsr $2d62			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.2d31	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2d33	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d35	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.2d37	90 02		bcc $2d3b			bcc 	_SCNotSmaller
.2d39	b1 2c		lda ($2c),y			lda 	(temp1),y
.2d3b					_SCNotSmaller:
.2d3b	aa		tax				tax 								; put that in X. We compare this many chars first.
.2d3c					_SCCompareLoop:
.2d3c	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2d3e	f0 0c		beq $2d4c			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2d40	ca		dex				dex 								; decrement chars to compare.
.2d41	c8		iny				iny 								; move to next character
.2d42	38		sec				sec 								; calculate s1[y]-s2[y]
.2d43	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d45	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2d47	d0 0a		bne $2d53			bne 	_SCReturnResult 			; if different return sign of A
.2d49	4c 3c 2d	jmp $2d3c			jmp 	_SCCompareLoop
.2d4c					_SCSameToEndShortest
.2d4c	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2d4e	38		sec				sec
.2d4f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d51	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2d53					_SCReturnResult:
.2d53	08		php				php 								; set return to zero preserving PSW.
.2d54	a2 00		ldx #$00			ldx 	#0
.2d56	28		plp				plp
.2d57	f0 05		beq $2d5e			beq 	_SCExit 					; two values equal, then exit
.2d59	ca		dex				dex 								; X = $FF
.2d5a	90 02		bcc $2d5e			bcc 	_SCExit 					; if 1st < 2nd then -1
.2d5c	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2d5e					_SCExit:
.2d5e	68		pla				pla
.2d5f	a8		tay				tay
.2d60	68		pla				pla
.2d61	60		rts				rts
.2d62					CopyStringPair:
.2d62	b5 49		lda $49,x			lda 	esInt0+1,x
.2d64	85 2c		sta $2c				sta 	temp1
.2d66	b5 51		lda $51,x			lda 	esInt1+1,x
.2d68	85 2d		sta $2d				sta 	temp1+1
.2d6a					CopyStringTop:
.2d6a	b5 48		lda $48,x			lda 	esInt0,x
.2d6c	85 2a		sta $2a				sta 	temp0
.2d6e	b5 50		lda $50,x			lda 	esInt1,x
.2d70	85 2b		sta $2b				sta 	temp0+1
.2d72	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2d73					StringConcat:
.2d73	aa		tax				tax									; stack pos in X
.2d74	98		tya				tya
.2d75	48		pha				pha
.2d76	20 62 2d	jsr $2d62			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2d79	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2d7a	a0 00		ldy #$00			ldy 	#0
.2d7c	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d7e	71 2c		adc ($2c),y			adc 	(temp1),y
.2d80	b0 1c		bcs $2d9e			bcs 	_SCError 					; just too many characters here.
.2d82	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2d84	b0 18		bcs $2d9e			bcs 	_SCError
.2d86	20 c2 2d	jsr $2dc2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2d89	20 b9 2d	jsr $2db9			jsr 	CopySoftToStack 			; copy that to the stack.
.2d8c	20 a3 2d	jsr $2da3			jsr 	SCCopyTemp0 				; copy temp0
.2d8f	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.2d91	85 2a		sta $2a				sta 	temp0
.2d93	a5 2d		lda $2d				lda 	temp1+1
.2d95	85 2b		sta $2b				sta 	temp0+1
.2d97	20 a3 2d	jsr $2da3			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2d9a	68		pla				pla
.2d9b	a8		tay				tay
.2d9c	8a		txa				txa 								; and A
.2d9d	60		rts				rts
.2d9e					_SCError:
.2d9e	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2da0	20 85 11	jsr $1185		jsr	errorHandler
.2da3					SCCopyTemp0:
.2da3	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2da5	b1 2a		lda ($2a),y			lda 	(temp0),y
.2da7	85 2e		sta $2e				sta 	temp2
.2da9					_SCCopyLoop:
.2da9	a5 2e		lda $2e				lda 	temp2 						; done the lot
.2dab	f0 0b		beq $2db8			beq 	_SCCopyExit
.2dad	c6 2e		dec $2e				dec 	temp2
.2daf	c8		iny				iny 								; get next char
.2db0	b1 2a		lda ($2a),y			lda 	(temp0),y
.2db2	20 e8 2d	jsr $2de8			jsr 	WriteSoftString 			; write to soft string.
.2db5	4c a9 2d	jmp $2da9			jmp 	_SCCopyLoop
.2db8					_SCCopyExit:
.2db8	60		rts				rts
.2db9					CopySoftToStack:
.2db9	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2dbb	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2dbd	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2dbf	95 50		sta $50,x			sta 	esInt1,x
.2dc1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2dc2					AllocateSoftString:
.2dc2	85 32		sta $32				sta 	tempShort 					; save count
.2dc4	98		tya				tya
.2dc5	48		pha				pha
.2dc6	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2dc8	d0 09		bne $2dd3			bne 	_ASSDone
.2dca	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.2dcc	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2dce	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2dd0	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2dd1	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2dd3					_ASSDone:
.2dd3	38		sec				sec 								; allocate downwards enough memory
.2dd4	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2dd6	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.2dd8	85 7a		sta $7a				sta 	softMemAlloc
.2dda	a5 7b		lda $7b				lda 	softMemAlloc+1
.2ddc	e9 00		sbc #$00			sbc 	#0
.2dde	85 7b		sta $7b				sta 	softMemAlloc+1
.2de0	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2de2	a8		tay				tay
.2de3	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2de5	68		pla				pla
.2de6	a8		tay				tay
.2de7	60		rts				rts
.2de8					WriteSoftString:
.2de8	84 32		sty $32				sty 	tempShort 					; save Y
.2dea	48		pha				pha 								; save character on stack
.2deb	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2ded	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2def	18		clc				clc
.2df0	69 01		adc #$01			adc 	#1
.2df2	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2df4	a8		tay				tay 								; offset in Y
.2df5	68		pla				pla 								; get char and write.
.2df6	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2df8	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.2dfa	60		rts				rts
.2dfb					StrClone:
.2dfb	aa		tax				tax 								; set up stack.
.2dfc	98		tya				tya
.2dfd	48		pha				pha
.2dfe	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2e00	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.2e02	18		clc				clc
.2e03	69 01		adc #$01			adc 	#1
.2e05	20 c2 2d	jsr $2dc2			jsr 	AllocateSoftString 			; allocate soft memory
.2e08	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.2e0a	95 48		sta $48,x			sta 	esInt0,x
.2e0c	a5 7b		lda $7b				lda 	softMemAlloc+1
.2e0e	95 50		sta $50,x			sta 	esInt1,x
.2e10	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.2e12	95 58		sta $58,x			sta 	esInt2,x
.2e14	95 60		sta $60,x			sta 	esInt3,x
.2e16	a9 40		lda #$40			lda 	#$40 						; set type to string.
.2e18	95 40		sta $40,x			sta 	esType,x
.2e1a	20 a3 2d	jsr $2da3			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2e1d	68		pla				pla
.2e1e	a8		tay				tay
.2e1f	8a		txa				txa
.2e20	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.2e21					CaseString:
.2e21	48		pha				pha 								; save A and copy to X
.2e22	aa		tax				tax
.2e23	98		tya				tya
.2e24	48		pha				pha
.2e25	20 6a 2d	jsr $2d6a			jsr 	CopyStringTop 				; target string -> temp0
.2e28	a0 00		ldy #$00			ldy 	#0
.2e2a	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.2e2c	18		clc				clc
.2e2d	69 01		adc #$01			adc 	#1 							; one more for length byte
.2e2f	20 c2 2d	jsr $2dc2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2e32	20 b9 2d	jsr $2db9			jsr 	CopySoftToStack 			; copy that to the stack.
.2e35	a0 00		ldy #$00			ldy 	#0
.2e37	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.2e39	aa		tax				tax
.2e3a					_CSCopy:
.2e3a	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.2e3c	f0 24		beq $2e62			beq 	_CSExit
.2e3e	ca		dex				dex
.2e3f	c8		iny				iny
.2e40	68		pla				pla 								; check direction
.2e41	48		pha				pha
.2e42	f0 0c		beq $2e50			beq 	_CSUpper
.2e44	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.2e46	c9 41		cmp #$41			cmp 	#"A"
.2e48	90 12		bcc $2e5c			bcc 	_CSWrite
.2e4a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2e4c	b0 0e		bcs $2e5c			bcs 	_CSWrite
.2e4e	90 0a		bcc $2e5a			bcc 	_CSFlipWrite
.2e50					_CSUpper:
.2e50	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.2e52	c9 61		cmp #$61			cmp 	#"a"
.2e54	90 06		bcc $2e5c			bcc 	_CSWrite
.2e56	c9 7b		cmp #$7b			cmp 	#"z"+1
.2e58	b0 02		bcs $2e5c			bcs 	_CSWrite
.2e5a					_CSFlipWrite:
.2e5a	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.2e5c					_CSWrite:
.2e5c	20 e8 2d	jsr $2de8			jsr 	WriteSoftString 			; add to soft string.
.2e5f	4c 3a 2e	jmp $2e3a			jmp 	_CSCopy
.2e62					_CSExit:
.2e62	68		pla				pla
.2e63	a8		tay				tay
.2e64	68		pla				pla
.2e65	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2e66					StringSubstring:
.2e66	48		pha				pha
.2e67	aa		tax				tax 								; access stack.
.2e68	98		tya				tya
.2e69	48		pha				pha
.2e6a	20 6a 2d	jsr $2d6a			jsr 	CopyStringTop 				; point temp0 to the string.
.2e6d	a0 00		ldy #$00			ldy 	#0 							; get length.
.2e6f	b1 2a		lda ($2a),y			lda 	(temp0),Y
.2e71	85 2c		sta $2c				sta 	temp1
.2e73	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2e75	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.2e77	f0 02		beq $2e7b			beq 	_SSBOkay
.2e79	b0 2a		bcs $2ea5			bcs 	_SSBReturnNull
.2e7b					_SSBOkay:
.2e7b	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.2e7d	18		clc				clc
.2e7e	69 01		adc #$01			adc 	#1
.2e80	38		sec				sec
.2e81	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2e83	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2e85	90 02		bcc $2e89			bcc		_SSBTrunc
.2e87	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2e89					_SSBTrunc:
.2e89	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.2e8b	18		clc				clc
.2e8c	69 01		adc #$01			adc 	#1 							; add 1
.2e8e	20 c2 2d	jsr $2dc2			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2e91	20 b9 2d	jsr $2db9			jsr 	CopySoftToStack 			; copy that to the stack.
.2e94	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2e96					_SSBCopyLoop:
.2e96	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.2e98	f0 0e		beq $2ea8			beq 	_SSBExit
.2e9a	c6 2d		dec $2d				dec 	temp1+1
.2e9c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.2e9e	20 e8 2d	jsr $2de8			jsr 	WriteSoftString
.2ea1	c8		iny				iny
.2ea2	4c 96 2e	jmp $2e96			jmp 	_SSBCopyLoop
.2ea5					_SSBReturnNull:
.2ea5	20 ac 2e	jsr $2eac			jsr 	ReturnNull
.2ea8					_SSBExit:
.2ea8	68		pla				pla
.2ea9	a8		tay				tay
.2eaa	68		pla				pla
.2eab	60		rts				rts
.2eac					ReturnNull:
.2eac	a9 00		lda #$00			lda 	#0 							; clear null string
.2eae	8d ce 0a	sta $0ace			sta 	NullString
.2eb1	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.2eb3	95 48		sta $48,x			sta 	esInt0,x
.2eb5	a9 0a		lda #$0a			lda 	#NullString >> 8
.2eb7	95 50		sta $50,x			sta 	esInt1,x
.2eb9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c14					srcStrLen:
>0c14							.fill 	1
.2eba					StringWrite:
.2eba	aa		tax				tax
.2ebb	48		pha				pha
.2ebc	98		tya				tya
.2ebd	48		pha				pha
.2ebe	20 e5 2e	jsr $2ee5			jsr 	CheckOverwriteCurrent
.2ec1	b0 0d		bcs $2ed0			bcs		_SWCopyCurrent
.2ec3	20 23 2f	jsr $2f23			jsr 	RequiresConcretion
.2ec6	90 0e		bcc $2ed6			bcc 	_SWWriteReference
.2ec8	20 86 2f	jsr $2f86			jsr 	CheckSpecialConcretion
.2ecb	b0 09		bcs $2ed6			bcs 	_SWWriteReference
.2ecd	20 37 2f	jsr $2f37			jsr 	AllocateHardMemory
.2ed0					_SWCopyCurrent:
.2ed0	20 6a 2f	jsr $2f6a			jsr 	CopyStringToHardMemory
.2ed3	4c e1 2e	jmp $2ee1			jmp 	_SWExit
.2ed6					_SWWriteReference
.2ed6	a0 00		ldy #$00			ldy 	#0
.2ed8	a5 2a		lda $2a				lda 	temp0
.2eda	91 2c		sta ($2c),y			sta 	(temp1),y
.2edc	c8		iny				iny
.2edd	a5 2b		lda $2b				lda 	temp0+1
.2edf	91 2c		sta ($2c),y			sta 	(temp1),y
.2ee1					_SWExit:
.2ee1	68		pla				pla
.2ee2	a8		tay				tay
.2ee3	68		pla				pla
.2ee4	60		rts				rts
.2ee5					CheckOverwriteCurrent:
.2ee5	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2ee7	b5 51		lda $51,x			lda 	esInt1+1,x
.2ee9	85 2b		sta $2b				sta 	temp0+1
.2eeb	b5 49		lda $49,x			lda 	esInt0+1,x
.2eed	85 2a		sta $2a				sta 	temp0
.2eef	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.2ef1	8d 14 0c	sta $0c14			sta 	srcStrLen
.2ef4	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2ef6	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.2ef8	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.2efa	85 2d		sta $2d				sta 	temp1+1
.2efc	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2efe	b1 2c		lda ($2c),y			lda 	(temp1),y
.2f00	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2f02	90 1b		bcc $2f1f			bcc 	_COCFail 				; in hard memory.
.2f04	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2f06	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.2f08	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.2f0a	85 2e		sta $2e				sta 	temp2
.2f0c	c8		iny				iny
.2f0d	b1 2c		lda ($2c),y			lda 	(temp1),y
.2f0f	e9 00		sbc #$00			sbc 	#0
.2f11	85 2f		sta $2f				sta 	temp2+1
.2f13	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2f15	b1 2e		lda ($2e),y			lda 	(temp2),y
.2f17	38		sec				sec  							; maximum character capacity.
.2f18	e9 02		sbc #$02			sbc 	#2
.2f1a	cd 14 0c	cmp $0c14			cmp 	srcStrLen 				; if >= the required length
.2f1d	b0 02		bcs $2f21			bcs 	_COCCanReuse
.2f1f					_COCFail:
.2f1f	18		clc				clc
.2f20	60		rts				rts
.2f21					_COCCanReuse:
.2f21	38		sec				sec
.2f22	60		rts				rts
.2f23					RequiresConcretion:
.2f23	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2f25	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.2f27	b0 0a		bcs $2f33			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2f29	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.2f2b	f0 08		beq $2f35			beq 	_RCFail 				; if not, this cannot be soft memory.
.2f2d	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.2f2f	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2f31	90 02		bcc $2f35			bcc 	_RCFail 				; so concreting
.2f33					_RCSucceed:
.2f33	38		sec				sec
.2f34	60		rts				rts
.2f35					_RCFail:
.2f35	18		clc				clc
.2f36	60		rts				rts
.2f37					AllocateHardMemory:
.2f37	98		tya				tya
.2f38	48		pha				pha
.2f39	ad 14 0c	lda $0c14			lda 	srcStrLen 				; characters in string
.2f3c	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.2f3e	b0 04		bcs $2f44			bcs 	_AHMSetMax 				; max out that amount.
.2f40	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2f42	90 02		bcc $2f46			bcc 	_AHMIsOkay
.2f44					_AHMSetMax:
.2f44	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2f46					_AHMIsOkay:
.2f46	48		pha				pha	 							; save size to be allocated
.2f47	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2f49	38		sec				sec  							; and copy result to TOS as target address.
.2f4a	65 33		adc $33				adc 	highMemory
.2f4c	85 33		sta $33				sta 	highMemory
.2f4e	a5 34		lda $34				lda 	highMemory+1
.2f50	69 ff		adc #$ff			adc 	#$FF
.2f52	85 34		sta $34				sta 	highMemory+1
.2f54	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2f56	68		pla				pla 							; get the total size of the storage block
.2f57	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.2f59	18		clc				clc
.2f5a	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.2f5c	69 01		adc #$01			adc 	#1
.2f5e	91 2c		sta ($2c),y			sta 	(temp1),y
.2f60	a5 34		lda $34				lda 	highMemory+1
.2f62	69 00		adc #$00			adc 	#0
.2f64	c8		iny				iny
.2f65	91 2c		sta ($2c),y			sta 	(temp1),y
.2f67	68		pla				pla
.2f68	a8		tay				tay
.2f69	60		rts				rts
.2f6a					CopyStringToHardMemory:
.2f6a	98		tya				tya
.2f6b	48		pha				pha
.2f6c	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2f6e	b1 2c		lda ($2c),y			lda 	(temp1),y
.2f70	85 2e		sta $2e				sta 	temp2
.2f72	c8		iny				iny
.2f73	b1 2c		lda ($2c),y			lda 	(temp1),y
.2f75	85 2f		sta $2f				sta 	temp2+1
.2f77	ac 14 0c	ldy $0c14			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2f7a					_CSTHMLoop:
.2f7a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f7c	91 2e		sta ($2e),y			sta 	(temp2),y
.2f7e	88		dey				dey
.2f7f	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.2f81	d0 f7		bne $2f7a			bne 	_CSTHMLoop
.2f83	68		pla				pla
.2f84	a8		tay				tay
.2f85	60		rts				rts
.2f86					CheckSpecialConcretion:
.2f86	ad 14 0c	lda $0c14			lda 	srcStrLen 				; check string is null e.g. length = 0
.2f89	f0 02		beq $2f8d			beq 	_CSCNullString
.2f8b	18		clc				clc
.2f8c	60		rts				rts
.2f8d					_CSCNullString:
.2f8d	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.2f8f	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.2f92	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.2f94	85 2a		sta $2a				sta 	temp0
.2f96	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2f98	85 2b		sta $2b				sta 	1+(temp0)
.2f9a	38		sec				sec
.2f9b	60		rts				rts

;******  Return to file: string/string.asm

.2f9c					stringHandler:
.2f9c	7c 9f 2f	jmp ($2f9f,x)			jmp 	(stringVectors,x)
.2f9f					stringVectors:
>2f9f	ff 2c					.word StringChrs           ; index 0
>2fa1	fb 2d					.word StrClone             ; index 2
>2fa3	73 2d					.word StringConcat         ; index 4
>2fa5	0e 2d					.word StringNull           ; index 6
>2fa7	2a 2d					.word STRCompare           ; index 8
>2fa9	21 2e					.word CaseString           ; index 10
>2fab	66 2e					.word StringSubstring      ; index 12
>2fad	ba 2e					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.2faf					section_end_string:
.2faf					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c15					deTokeniseVector:
>0c15							.fill 	2
.0c17					lastCharacterClass:
>0c17							.fill 	1
.2faf					ListLine:
.2faf	a9 d4		lda #$d4			lda 	#(deTokenPrint) & $FF
.2fb1	8d 15 0c	sta $0c15			sta 	deTokeniseVector
.2fb4	a9 30		lda #$30			lda 	#(deTokenPrint) >> 8
.2fb6	8d 16 0c	sta $0c16			sta 	1+(deTokeniseVector)
.2fb9					Detokenise:
.2fb9	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.2fbb	8d 17 0c	sta $0c17			sta 	lastCharacterClass
.2fbe	a2 02		ldx #$02			ldx 	#2
.2fc0	20 84 2b	jsr $2b84			jsr 	MInt32False
.2fc3	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2fc5	b1 28		lda ($28),y			lda 	(codePtr),y
.2fc7	95 48		sta $48,x			sta 	esInt0,x
.2fc9	c8		iny				iny
.2fca	b1 28		lda ($28),y			lda 	(codePtr),y
.2fcc	95 50		sta $50,x			sta 	esInt1,x
.2fce	a9 84		lda #$84			lda 	#LTYLineNumber
.2fd0	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.2fd3	a9 0a		lda #$0a			lda 	#10 					; base 10
.2fd5	20 73 30	jsr $3073			jsr 	DTPrintInteger 			; print as integer.
.2fd8	a0 00		ldy #$00			ldy 	#0 						; get length
.2fda	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.2fdc	aa		tax				tax
.2fdd					_DTPadOut:
.2fdd	a9 20		lda #$20			lda 	#" "
.2fdf	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.2fe2	e8		inx				inx
.2fe3	e0 06		cpx #$06			cpx 	#6
.2fe5	d0 f6		bne $2fdd			bne 	_DTPadOut
.2fe7	a0 03		ldy #$03			ldy 	#3 						; start position.
.2fe9					_DTListLoop
.2fe9	b1 28		lda ($28),y			lda 	(codePtr),y
.2feb	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.2fed	f0 58		beq $3047			beq 	_DTIsString
.2fef	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.2ff1	f0 7c		beq $306f			beq 	_DTIsFloat
.2ff3	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.2ff5	f0 16		beq $300d			beq 	_DTHexConstant
.2ff7	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2ff9	d0 06		bne $3001			bne 	_DTNotEnd
.2ffb	a9 ff		lda #$ff			lda 	#255 					; print CR
.2ffd	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.3000	60		rts				rts
.3001					_DTNotEnd:
.3001	c9 00		cmp #$00			cmp 	#0
.3003	30 36		bmi $303b			bmi 	_DTIsToken
.3005	c9 40		cmp #$40			cmp 	#$40
.3007	90 38		bcc $3041			bcc 	_DTIsIdentifier
.3009	a9 0a		lda #$0a			lda 	#10 					; this is the base
.300b	d0 08		bne $3015			bne 	_DTConstant
.300d					_DTHexConstant:
.300d	a9 26		lda #$26			lda 	#"&"
.300f	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.3012	c8		iny				iny
.3013	a9 10		lda #$10			lda 	#16
.3015					_DTConstant:
.3015	48		pha				pha
.3016	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.3018	20 f0 30	jsr $30f0			jsr 	DTSwitchMode
.301b	a9 86		lda #$86			lda 	#LTYConstant
.301d	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.3020	a2 02		ldx #$02			ldx 	#2
.3022	8a		txa				txa
.3023	a2 0a		ldx #$0a		ldx	#10
.3025	20 e6 2c	jsr $2ce6		jsr	mainHandler
.3028	aa		tax				tax
.3029	20 c4 19	jsr $19c4			jsr 	TOSToTemp0
.302c	68		pla				pla
.302d	85 32		sta $32				sta 	tempShort
.302f	98		tya				tya
.3030	48		pha				pha
.3031	a5 32		lda $32				lda 	tempShort
.3033	20 73 30	jsr $3073			jsr 	DTPrintInteger
.3036	68		pla				pla
.3037	a8		tay				tay
.3038	4c e9 2f	jmp $2fe9			jmp 	_DTListLoop
.303b					_DTIsToken:
.303b	20 49 31	jsr $3149			jsr 	DTDecodeToken
.303e	4c e9 2f	jmp $2fe9			jmp 	_DTListLoop
.3041					_DTIsIdentifier:
.3041	20 02 31	jsr $3102			jsr 	DTIdentifier
.3044	4c e9 2f	jmp $2fe9			jmp 	_DTListLoop
.3047					_DTIsString:
.3047	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3049	20 f0 30	jsr $30f0			jsr 	DTSwitchMode
.304c	a9 81		lda #$81			lda 	#LTYString
.304e	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.3051	a9 22		lda #$22			lda 	#'"'						; open quote
.3053	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.3056	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3058	8a		txa				txa
.3059	a2 0a		ldx #$0a		ldx	#10
.305b	20 e6 2c	jsr $2ce6		jsr	mainHandler
.305e	aa		tax				tax
.305f	20 c4 19	jsr $19c4			jsr 	TOSToTemp0
.3062	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3064	20 85 30	jsr $3085			jsr 	DTPrintLengthPrefix
.3067	a9 22		lda #$22			lda 	#'"'
.3069	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.306c	4c e9 2f	jmp $2fe9			jmp 	_DTListLoop
.306f					_DTIsFloat:
>306f	db						.byte 	$DB
.3070	4c 6f 30	jmp $306f			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c18					tPrintCount:
>0c18							.fill 	1
.3073					DTPrintInteger:
.3073	48		pha				pha
.3074	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3076	85 2a		sta $2a				sta 	temp0
.3078	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.307a	85 2b		sta $2b				sta 	1+(temp0)
.307c	68		pla				pla
.307d	a8		tay				tay
.307e	8a		txa				txa
.307f	a2 0c		ldx #$0c		ldx	#12
.3081	20 e6 2c	jsr $2ce6		jsr	mainHandler
.3084	aa		tax				tax
.3085					DTPrintLengthPrefix:
.3085	aa		tax				tax
.3086	98		tya				tya
.3087	48		pha				pha
.3088	a0 00		ldy #$00			ldy 	#0
.308a	b1 2a		lda ($2a),y			lda 	(temp0),y
.308c	8d 18 0c	sta $0c18			sta 	tPrintCount
.308f	f0 1b		beq $30ac			beq 	_DTPLPExit
.3091					_DTPLPLoop:
.3091	c8		iny				iny
.3092	b1 2a		lda ($2a),y			lda 	(temp0),y
.3094	29 7f		and #$7f			and 	#$7F
.3096	e0 00		cpx #$00			cpx 	#0
.3098	f0 0a		beq $30a4			beq 	_DTPLPNoCase
.309a	c9 41		cmp #$41			cmp 	#"A"
.309c	90 06		bcc $30a4			bcc 	_DTPLPNoCase
.309e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.30a0	b0 02		bcs $30a4			bcs 	_DTPLPNoCase
.30a2	49 20		eor #$20			eor 	#"A"^"a"
.30a4					_DTPLPNoCase
.30a4	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.30a7	ce 18 0c	dec $0c18			dec 	tPrintCount
.30aa	d0 e5		bne $3091			bne 	_DTPLPLoop
.30ac					_DTPLPExit:
.30ac	68		pla				pla
.30ad	a8		tay				tay
.30ae	60		rts				rts
.30af					ListOutputCharacter:
.30af	85 32		sta $32				sta 	tempShort
.30b1	48		pha				pha
.30b2	8a		txa				txa
.30b3	48		pha				pha
.30b4	98		tya				tya
.30b5	48		pha				pha
.30b6	a5 32		lda $32				lda 	tempShort
.30b8	c9 20		cmp #$20			cmp 	#32
.30ba	b0 0c		bcs $30c8			bcs		_LOCHiBit
.30bc	09 40		ora #$40			ora 	#64
.30be	c9 40		cmp #$40			cmp 	#64
.30c0	f0 06		beq $30c8			beq 	_LOCHiBit
.30c2	c9 5b		cmp #$5b			cmp 	#65+26
.30c4	b0 02		bcs $30c8			bcs 	_LOCHiBit
.30c6	69 20		adc #$20			adc 	#32
.30c8					_LOCHiBit:
.30c8	20 d1 30	jsr $30d1			jsr 	_LOCCallVector
.30cb	68		pla				pla
.30cc	a8		tay				tay
.30cd	68		pla				pla
.30ce	aa		tax				tax
.30cf	68		pla				pla
.30d0					_LOCExit:
.30d0	60		rts				rts
.30d1					_LOCCallVector:
.30d1	6c 15 0c	jmp ($0c15)			jmp 	(deTokeniseVector)
.30d4					deTokenPrint:
.30d4	c9 00		cmp #$00			cmp 	#0
.30d6	30 06		bmi $30de			bmi 	_dtpInk
.30d8	a2 16		ldx #$16		ldx	#22
.30da	20 64 11	jsr $1164		jsr	deviceHandler
.30dd	60		rts				rts
.30de	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.30e0	f0 08		beq $30ea			beq 	_dtpCR
.30e2	29 07		and #$07			and 	#7
.30e4	a2 08		ldx #$08		ldx	#8
.30e6	20 64 11	jsr $1164		jsr	deviceHandler
.30e9	60		rts				rts
.30ea					_dtpCR:
.30ea	a2 04		ldx #$04		ldx	#4
.30ec	20 64 11	jsr $1164		jsr	deviceHandler
.30ef	60		rts				rts
.30f0					DTSwitchMode:
.30f0	cd 17 0c	cmp $0c17			cmp 	LastCharacterClass
.30f3	f0 04		beq $30f9			beq 	_DTSMNoChange
.30f5	8d 17 0c	sta $0c17			sta 	LastCharacterClass
.30f8					_DTSMExit:
.30f8	60		rts				rts
.30f9					_DTSMNoChange:
.30f9	c9 01		cmp #$01			cmp 	#1
.30fb	f0 fb		beq $30f8			beq 	_DTSMExit
.30fd	a9 20		lda #$20			lda 	#" "
.30ff	4c af 30	jmp $30af			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3102					DTIdentifier:
.3102	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3104	20 f0 30	jsr $30f0			jsr 	DTSwitchMode
.3107	a9 87		lda #$87			lda 	#LTYIdentifier
.3109	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.310c					_DTILoop:
.310c	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.310e	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3110	d0 02		bne $3114			bne 	_DTINotUS
.3112	a9 5f		lda #$5f			lda 	#"_"
.3114					_DTINotUS:
.3114	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.3117	c8		iny				iny
.3118	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.311a	c9 3a		cmp #$3a			cmp 	#$3A
.311c	90 ee		bcc $310c			bcc 	_DTILoop
.311e	c8		iny				iny
.311f	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3121	f0 25		beq $3148			beq 	_DTIExit 					; no postfix.
.3123	48		pha				pha
.3124	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3126	8d 17 0c	sta $0c17			sta 	LastCharacterClass
.3129	a9 82		lda #$82			lda 	#LTYPunctuation
.312b	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.312e	68		pla				pla
.312f	c9 3b		cmp #$3b			cmp 	#$3B
.3131	f0 10		beq $3143			beq 	_DTIArray
.3133	4a		lsr a				lsr 	a 							; array flag in C
.3134	08		php				php
.3135	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3137	f0 02		beq $313b			beq 	_DTIDollar
.3139	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.313b					_DTIDollar:
.313b	49 24		eor #$24			eor 	#"$"
.313d	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.3140	28		plp				plp
.3141	90 05		bcc $3148			bcc 	_DTIExit
.3143					_DTIArray:
.3143	a9 28		lda #$28			lda 	#"("
.3145	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.3148					_DTIExit:
.3148	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3149					DTDecodeToken:
.3149	a2 00		ldx #$00			ldx 	#0 							; table number to use
.314b	b1 28		lda ($28),y			lda 	(codePtr),y
.314d	c9 84		cmp #$84			cmp 	#$84
.314f	b0 05		bcs $3156			bcs 	_DTNotShift
.3151	29 03		and #$03			and 	#3 							; get the shift 1..3
.3153	0a		asl a				asl 	a 							; put 2 x in X
.3154	aa		tax				tax
.3155	c8		iny				iny
.3156					_DTNotShift:
.3156	bd 56 34	lda $3456,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3159	85 2a		sta $2a				sta 	temp0 						; point into temp0
.315b	bd 57 34	lda $3457,x			lda 	TokenTableAddress+1,x
.315e	85 2b		sta $2b				sta 	temp0+1
.3160	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3162	c8		iny				iny 								; consume it.
.3163	aa		tax				tax
.3164	98		tya				tya
.3165	48		pha				pha
.3166					_DTFindText:
.3166	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3168	f0 11		beq $317b			beq 	_DTFoundText
.316a	ca		dex				dex
.316b	a0 00		ldy #$00			ldy 	#0
.316d	38		sec				sec
.316e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3170	65 2a		adc $2a				adc 	temp0
.3172	85 2a		sta $2a				sta 	temp0
.3174	90 f0		bcc $3166			bcc 	_DTFindText
.3176	e6 2b		inc $2b				inc 	temp0+1
.3178	4c 66 31	jmp $3166			jmp 	_DTFindText
.317b					_DTFoundText:
.317b	a0 01		ldy #$01			ldy 	#1 							; get first character
.317d	b1 2a		lda ($2a),y			lda 	(temp0),y
.317f	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3181	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3183	90 11		bcc $3196			bcc 	_DTIsPunctuation
.3185	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3187	b0 0d		bcs $3196			bcs 	_DTIsPunctuation
.3189	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.318b	20 f0 30	jsr $30f0			jsr 	DTSwitchMode
.318e	a9 83		lda #$83			lda 	#LTYKeyword
.3190	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.3193	4c a0 31	jmp $31a0			jmp 	_DTPrint
.3196					_DTIsPunctuation:
.3196	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3198	20 f0 30	jsr $30f0			jsr 	DTSwitchMode
.319b	a9 82		lda #$82			lda 	#LTYPunctuation
.319d	20 af 30	jsr $30af			jsr 	ListOutputCharacter
.31a0					_DTPrint:
.31a0	a9 01		lda #$01			lda 	#1 							; fix case.
.31a2	20 85 30	jsr $3085			jsr 	DTPrintLengthPrefix 		; print it out.
.31a5	a0 00		ldy #$00			ldy 	#0
.31a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.31a9	a8		tay				tay
.31aa	b1 2a		lda ($2a),y			lda 	(temp0),y
.31ac	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.31ae	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.31b0	90 04		bcc $31b6			bcc 	_DTIsNowPunctuation
.31b2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.31b4	90 05		bcc $31bb			bcc 	_DTPExit
.31b6					_DTIsNowPunctuation:
.31b6	a9 01		lda #$01			lda 	#1
.31b8	8d 17 0c	sta $0c17			sta		LastCharacterClass
.31bb					_DTPExit:
.31bb	68		pla				pla
.31bc	a8		tay				tay
.31bd	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c19					currentSet:
>0c19							.fill 	1
.31be					TokenSearch:
.31be	8a		txa				txa
.31bf	48		pha				pha
.31c0	98		tya				tya
.31c1	48		pha				pha
.31c2	a9 00		lda #$00			lda 	#0
.31c4	8d 19 0c	sta $0c19			sta 	currentSet
.31c7					_TSLoop:
.31c7	ad 19 0c	lda $0c19			lda 	currentSet 					; 2 x currentset in X
.31ca	0a		asl a				asl 	a
.31cb	aa		tax				tax
.31cc	bd 56 34	lda $3456,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.31cf	85 2a		sta $2a				sta 	temp0
.31d1	bd 57 34	lda $3457,x			lda 	TokenTableAddress+1,x
.31d4	85 2b		sta $2b				sta 	temp0+1
.31d6	20 fd 31	jsr $31fd			jsr 	TokenSearchOne 				; search one table
.31d9	b0 0d		bcs $31e8			bcs 	_TSFound 					; found a token.
.31db	ee 19 0c	inc $0c19			inc 	currentSet 					; next set
.31de	ad 19 0c	lda $0c19			lda 	currentSet
.31e1	c9 04		cmp #$04			cmp 	#4
.31e3	d0 e2		bne $31c7			bne 	_TSLoop 					; back if not done all four.
.31e5	18		clc				clc 								; clear carry and exit
.31e6	90 10		bcc $31f8			bcc 	_TSExit
.31e8					_TSFound:
.31e8	48		pha				pha 								; save token
.31e9	ad 19 0c	lda $0c19			lda 	currentSet					; if set zero no shift
.31ec	f0 05		beq $31f3			beq 	_TSNoShift
.31ee	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.31f0	20 ac 32	jsr $32ac			jsr 	TokenWrite
.31f3					_TSNoShift:
.31f3	68		pla				pla 								; get token back
.31f4	20 ac 32	jsr $32ac			jsr 	TokenWrite 					; write it
.31f7	38		sec				sec 								; carry set indicating success
.31f8					_TSExit:
.31f8	68		pla				pla
.31f9	a8		tay				tay
.31fa	68		pla				pla
.31fb	aa		tax				tax
.31fc	60		rts				rts
.31fd					TokenSearchOne:
.31fd	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.31ff					_TSOLoop:
.31ff	a0 00		ldy #$00			ldy 	#0
.3201	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3203	f0 26		beq $322b			beq 	_TSOFail 					; if zero, end of table
.3205	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3208	f0 11		beq $321b			beq 	_TSOCheckText
.320a					_TSONext:
.320a	e8		inx				inx 								; bump token
.320b	a0 00		ldy #$00			ldy 	#0							; get length
.320d	b1 2a		lda ($2a),y			lda 	(temp0),y
.320f	38		sec				sec
.3210	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3212	85 2a		sta $2a				sta 	temp0
.3214	90 e9		bcc $31ff			bcc 	_TSOLoop
.3216	e6 2b		inc $2b				inc 	temp0+1
.3218	4c ff 31	jmp $31ff			jmp 	_TSOLoop
.321b					_TSOCheckText:
.321b	a8		tay				tay 								; compare length downto 1.
.321c					_TSOCheckLoop:
.321c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.321e	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3221	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3223	d0 e5		bne $320a			bne 	_TSONext 					; different goto next.
.3225	88		dey				dey 								; do all
.3226	d0 f4		bne $321c			bne 	_TSOCheckLoop
.3228	8a		txa				txa 								; return token in A and carry set
.3229	38		sec				sec
.322a	60		rts				rts
.322b					_TSOFail:
.322b	18		clc				clc
.322c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.322d					TokTest:
.322d	a2 ff		ldx #$ff				ldx 	#$FF
.322f	9a		txs					txs
.3230	a9 4d		lda #$4d			lda 	#(TokenText1) & $FF
.3232	85 28		sta $28				sta 	codePtr
.3234	a9 32		lda #$32			lda 	#(TokenText1) >> 8
.3236	85 29		sta $29				sta 	1+(codePtr)
.3238	20 4d 32	jsr $324d				jsr 	Tokenise
.323b	a2 00		ldx #$00	TokStop:	ldx 	#0
.323d	bd 4d 32	lda $324d,x	_TokCheck:	lda 	TokenBytes1,x
.3240	dd 1d 0c	cmp $0c1d,x				cmp 	tokenBuffer,x
.3243	d0 fe		bne $3243	_TokFail:	bne 	_TokFail
.3245	e8		inx					inx
.3246	c9 80		cmp #$80				cmp 	#$80
.3248	d0 f3		bne $323d				bne 	_TokCheck
.324a	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.324d					TokenText1:
.324d					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c1a					tokenHeader:
>0c1a							.fill 	3
.0c1d					tokenBuffer:
>0c1d							.fill 	256
.0d1d					tokenBufferIndex:
>0d1d							.fill 	1
.324d					Tokenise:
.324d	20 c5 32	jsr $32c5			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3250					TokeniseASCIIZ:
.3250	20 d6 32	jsr $32d6			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3253	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3255	8d 1d 0d	sta $0d1d			sta 	tokenBufferIndex
.3258	a8		tay				tay 								; start pointer
.3259	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.325b	8d 1d 0c	sta $0c1d			sta 	tokenBuffer
.325e					_TokLoop:
.325e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3260	f0 46		beq $32a8			beq 	_TokExit 					; if zero, then exit.
.3262	c8		iny				iny 								; skip over spaces.
.3263	c9 20		cmp #$20			cmp 	#" "
.3265	f0 f7		beq $325e			beq 	_TokLoop
.3267	88		dey				dey 								; point back to character.
.3268	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.326a	f0 18		beq $3284			beq 	_TokHexConst
.326c	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.326e	f0 23		beq $3293			beq 	_TokQString
.3270	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3272	b0 26		bcs $329a			bcs 	_TokPunctuation
.3274	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3276	b0 29		bcs $32a1			bcs 	_TokIdentifier
.3278	c9 3a		cmp #$3a			cmp 	#"9"+1
.327a	b0 1e		bcs $329a			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.327c	c9 30		cmp #$30			cmp 	#"0"
.327e	90 1a		bcc $329a			bcc 	_TokPunctuation 			; < 0, punctuation.
.3280	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3282	d0 08		bne $328c			bne 	_TokConst
.3284					_TokHexConst:
.3284	c8		iny				iny									; consume token.
.3285	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3287	20 ac 32	jsr $32ac			jsr 	TokenWrite
.328a	a9 10		lda #$10			lda 	#16
.328c					_TokConst:
.328c	20 94 33	jsr $3394			jsr 	TokeniseInteger
.328f	b0 cd		bcs $325e			bcs 	_TokLoop
.3291	90 17		bcc $32aa			bcc 	_TokFail
.3293					_TokQString:
.3293	20 2a 34	jsr $342a			jsr 	TokeniseString
.3296	b0 c6		bcs $325e			bcs 	_TokLoop
.3298	90 10		bcc $32aa			bcc 	_TokFail
.329a					_TokPunctuation:
.329a	20 09 34	jsr $3409			jsr 	TokenisePunctuation
.329d	b0 bf		bcs $325e			bcs 	_TokLoop
.329f	90 09		bcc $32aa			bcc 	_TokFail
.32a1					_TokIdentifier:
.32a1	20 05 33	jsr $3305			jsr 	TokeniseIdentifier
.32a4	b0 b8		bcs $325e			bcs 	_TokLoop
.32a6	90 02		bcc $32aa			bcc 	_TokFail
.32a8					_TokExit:
.32a8	38		sec				sec
.32a9	60		rts				rts
.32aa					_TokFail:
.32aa	18		clc				clc
.32ab	60		rts				rts
.32ac					TokenWrite:
.32ac	85 32		sta $32				sta 	tempShort 					; save XA
.32ae	48		pha				pha
.32af	8a		txa				txa
.32b0	48		pha				pha
.32b1	a5 32		lda $32				lda 	tempShort
.32b3	ae 1d 0d	ldx $0d1d			ldx 	tokenBufferIndex 			; geet index
.32b6	9d 1d 0c	sta $0c1d,x			sta 	tokenBuffer,x 				; write byte to buffer
.32b9	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.32bb	9d 1e 0c	sta $0c1e,x			sta 	tokenBuffer+1,x
.32be	ee 1d 0d	inc $0d1d			inc 	tokenBufferIndex 			; bump index
.32c1	68		pla				pla
.32c2	aa		tax				tax
.32c3	68		pla				pla
.32c4	60		rts				rts
.32c5					TokeniseMakeASCIIZ:
.32c5	a0 00		ldy #$00			ldy 	#0							; get length of string.
.32c7	b1 28		lda ($28),y			lda 	(codePtr),y
.32c9	a8		tay				tay
.32ca	c8		iny				iny 								; +1, the NULL goes here.
.32cb	a9 00		lda #$00			lda 	#0
.32cd	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.32cf	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.32d1	d0 02		bne $32d5			bne 	_TMKAExit
.32d3	e6 29		inc $29				inc 	codePtr+1
.32d5					_TMKAExit:
.32d5	60		rts				rts
.32d6					TokeniseFixCase:
.32d6	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.32d8	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.32da					_TFCFlipQ:
.32da	8a		txa				txa
.32db	49 01		eor #$01			eor 	#1
.32dd	aa		tax				tax
.32de					_TFCLoop:
.32de	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.32e0	f0 22		beq $3304			beq 	_TFCExit 					; if zero exit.
.32e2	c9 20		cmp #$20			cmp 	#32 						; if control
.32e4	90 1a		bcc $3300			bcc 	_TFCControl
.32e6	c8		iny				iny 								; preconsume
.32e7	c9 22		cmp #$22			cmp 	#'"'
.32e9	f0 ef		beq $32da			beq 	_TFCFlipQ
.32eb	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.32ed	90 ef		bcc $32de			bcc 	_TFCLoop
.32ef	c9 7b		cmp #$7b			cmp 	#"z"+1
.32f1	b0 eb		bcs $32de			bcs 	_TFCLoop
.32f3	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.32f5	d0 e7		bne $32de			bne 	_TFCLoop
.32f7	88		dey				dey
.32f8	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.32fa					_TFCWrite:
.32fa	91 28		sta ($28),y			sta 	(codePtr),y
.32fc	c8		iny				iny
.32fd	4c de 32	jmp $32de			jmp 	_TFCLoop
.3300					_TFCControl:
.3300	a9 20		lda #$20			lda 	#" "
.3302	d0 f6		bne $32fa			bne 	_TFCWrite
.3304					_TFCExit:
.3304	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3305					TokeniseIdentifier:
.3305	a2 00		ldx #$00			ldx 	#0
.3307					_TICopyID:
.3307	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3309	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.330b	f0 16		beq $3323			beq 	_TICopyUnderscore
.330d	c9 2e		cmp #$2e			cmp 	#"."
.330f	f0 14		beq $3325			beq 	_TICopyIn
.3311	c9 30		cmp #$30			cmp 	#"0"
.3313	90 1b		bcc $3330			bcc 	_TIEndCopy
.3315	c9 3a		cmp #$3a			cmp 	#"9"+1
.3317	90 0c		bcc $3325			bcc 	_TICopyIn
.3319	c9 41		cmp #$41			cmp 	#"A"
.331b	90 13		bcc $3330			bcc 	_TIEndCopy
.331d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.331f	b0 0f		bcs $3330			bcs		_TIEndCopy
.3321	90 02		bcc $3325			bcc 	_TICopyIn
.3323					_TICopyUnderScore:
.3323	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3325					_TICopyIn:
.3325	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3326	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3329	8e cf 0a	stx $0acf			stx 	convertBuffer
.332c	c8		iny				iny 								; next character
.332d	4c 07 33	jmp $3307			jmp 	_TICopyID 					; loop round
.3330					_TIEndCopy:
.3330	a9 24		lda #$24			lda 	#"$"
.3332	20 87 33	jsr $3387			jsr 	TIDCheckCopy
.3335	a9 23		lda #$23			lda 	#"#"
.3337	20 87 33	jsr $3387			jsr 	TIDCheckCopy
.333a	a9 28		lda #$28			lda 	#"("
.333c	20 87 33	jsr $3387			jsr 	TIDCheckCopy
.333f	20 be 31	jsr $31be			jsr 	TokenSearch 				; is it a token
.3342	b0 41		bcs $3385			bcs 	_TIExit 					; if so, then exit.
.3344	98		tya				tya
.3345	48		pha				pha
.3346	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3348	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.334b	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.334e	c9 28		cmp #$28			cmp 	#"("
.3350	d0 02		bne $3354			bne 	_TINotArray
.3352	ca		dex				dex 								; yes, remove it and convert to array.
.3353	c8		iny				iny
.3354					_TINotArray:
.3354	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3357	c9 24		cmp #$24			cmp 	#"$"
.3359	d0 03		bne $335e			bne 	_TINotString
.335b	ca		dex				dex
.335c	c8		iny				iny
.335d	c8		iny				iny
.335e					_TINotString:
.335e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3361	c9 23		cmp #$23			cmp 	#"#"
.3363	d0 05		bne $336a			bne 	_TINotFloat
.3365	ca		dex				dex
.3366	c8		iny				iny
.3367	c8		iny				iny
.3368	c8		iny				iny
.3369	c8		iny				iny
.336a					_TINotFloat:
.336a	e8		inx				inx 								; write end marker for identifier.
.336b	98		tya				tya
.336c	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.336f	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3372	a2 01		ldx #$01			ldx 	#1
.3374					_TIOutput:
.3374	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3377	29 3f		and #$3f			and 	#$3F
.3379	48		pha				pha
.337a	20 ac 32	jsr $32ac			jsr 	TokenWrite
.337d	e8		inx				inx
.337e	68		pla				pla
.337f	c9 3a		cmp #$3a			cmp 	#$3A
.3381	90 f1		bcc $3374			bcc 	_TIOutput
.3383	68		pla				pla
.3384	a8		tay				tay
.3385					_TIExit:
.3385	38		sec				sec 								; this can't fail.
.3386	60		rts				rts
.3387					TIDCheckCopy:
.3387	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3389	d0 08		bne $3393			bne 	_TIDCCExit
.338b	e8		inx				inx
.338c	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.338f	8e cf 0a	stx $0acf			stx 	convertBuffer
.3392	c8		iny				iny
.3393					_TIDCCExit:
.3393	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3394					TokeniseInteger:
.3394	85 2c		sta $2c				sta 	temp1 						; save base
.3396	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3398	8e cf 0a	stx $0acf			stx 	convertBuffer
.339b					_TIGetChars:
.339b	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.339d	c9 30		cmp #$30			cmp 	#"0"
.339f	90 1f		bcc $33c0			bcc 	_TIEndGet
.33a1	c9 3a		cmp #$3a			cmp 	#"9"+1
.33a3	90 10		bcc $33b5			bcc 	_TIHaveChar
.33a5	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.33a7	c9 0a		cmp #$0a			cmp 	#10
.33a9	f0 15		beq $33c0			beq 	_TIEndGet
.33ab	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.33ad	c9 41		cmp #$41			cmp 	#"A"
.33af	90 0f		bcc $33c0			bcc 	_TIEndGet
.33b1	c9 5b		cmp #$5b			cmp 	#"Z"+1
.33b3	b0 0b		bcs $33c0			bcs 	_TIEndGet
.33b5					_TIHaveChar:
.33b5	e8		inx				inx 								; write into buffer.
.33b6	8e cf 0a	stx $0acf			stx 	convertBuffer
.33b9	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.33bc	c8		iny				iny 								; next char
.33bd	4c 9b 33	jmp $339b			jmp 	_TIGetChars
.33c0					_TIEndGet:
.33c0	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.33c2	f0 1c		beq $33e0			beq 	_TIFail
.33c4	98		tya				tya
.33c5	48		pha				pha
.33c6	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.33c8	85 2a		sta $2a				sta 	temp0
.33ca	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.33cc	85 2b		sta $2b				sta 	1+(temp0)
.33ce	a9 00		lda #$00			lda 	#0 							; stack 0
.33d0	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.33d2	a2 14		ldx #$14		ldx	#20
.33d4	20 e6 2c	jsr $2ce6		jsr	mainHandler
.33d7	68		pla				pla
.33d8	a8		tay				tay
.33d9	90 05		bcc $33e0			bcc 	_TIFail 					; didn't convert.
.33db	20 e2 33	jsr $33e2			jsr 	TIRecursiveOut 				; recursive output ?
.33de	38		sec				sec
.33df	60		rts				rts
.33e0					_TIFail:
.33e0	18		clc				clc
.33e1	60		rts				rts
.33e2					TIRecursiveOut:
.33e2	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.33e4	29 3f		and #$3f			and 	#$3F
.33e6	09 40		ora #$40			ora 	#$40
.33e8	48		pha				pha
.33e9	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.33eb	29 c0		and #$c0			and 	#$C0
.33ed	05 50		ora $50				ora 	esInt1
.33ef	05 58		ora $58				ora 	esInt2
.33f1	05 60		ora $60				ora 	esInt3
.33f3	f0 10		beq $3405			beq 	_TIRONoRecursion
.33f5	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.33f7					_TIROShift:
.33f7	46 60		lsr $60				lsr 	esInt3
.33f9	66 58		ror $58				ror 	esInt2
.33fb	66 50		ror $50				ror 	esInt1
.33fd	66 48		ror $48				ror 	esInt0
.33ff	ca		dex				dex
.3400	d0 f5		bne $33f7			bne 	_TIROShift
.3402	20 e2 33	jsr $33e2			jsr 	TIRecursiveOut 				; call recursively
.3405					_TIRONoRecursion:
.3405	68		pla				pla 								; pull the old bit.
.3406	4c ac 32	jmp $32ac			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3409					TokenisePunctuation:
.3409	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.340b	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.340e	c8		iny				iny
.340f	b1 28		lda ($28),y			lda 	(codePtr),y
.3411	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3414	c8		iny				iny 								; Y is +2
.3415	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3417	8d cf 0a	sta $0acf			sta 	convertBuffer
.341a	20 be 31	jsr $31be			jsr 	TokenSearch 				; search for that token.
.341d	b0 0a		bcs $3429			bcs 	_TIFound
.341f	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3422	88		dey				dey 								; Y is now +1
.3423	20 be 31	jsr $31be			jsr 	TokenSearch 				; search for that token.
.3426	b0 01		bcs $3429			bcs 	_TIFound
.3428	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3429					_TIFound:
.3429	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.342a					TokeniseString:
.342a	c8		iny				iny 								; skip opening quote
.342b	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.342d	84 2a		sty $2a				sty 	temp0 						; save start.
.342f					_TSGetLength:
.342f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3431	f0 21		beq $3454			beq 	_TSFail						; end of line, fail
.3433	c8		iny				iny
.3434	e8		inx				inx
.3435	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3437	d0 f6		bne $342f			bne 	_TSGetLength
.3439	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.343b	20 ac 32	jsr $32ac			jsr 	TokenWrite
.343e	8a		txa				txa 								; output length
.343f	20 ac 32	jsr $32ac			jsr 	TokenWrite
.3442	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3444	e0 00		cpx #$00			cpx 	#0 							; check ended
.3446	f0 09		beq $3451			beq 	_TSExit
.3448					_TSOutput:
.3448	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.344a	20 ac 32	jsr $32ac			jsr 	TokenWrite
.344d	c8		iny				iny
.344e	ca		dex				dex
.344f	d0 f7		bne $3448			bne 	_TSOutput
.3451					_TSExit:
.3451	c8		iny				iny 								; skip ending quote
.3452	38		sec				sec 								; return CS.
.3453	60		rts				rts
.3454					_TSFail:
.3454	18		clc				clc
.3455	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3456					TokenTableAddress:
>3456	5e 34						.word 	Group0Text
>3458	27 36						.word 	Group1Text
>345a	60 36						.word 	Group2Text
>345c	73 36						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.345e					Group0Text:
>345e	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3462	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3465	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3469	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>346c	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>346f	01 be					.byte $01,$be                          ; $8b >
>3471	01 bc					.byte $01,$bc                          ; $8c <
>3473	01 bd					.byte $01,$bd                          ; $8d =
>3475	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3478	01 ab					.byte $01,$ab                          ; $8f +
>347a	01 ad					.byte $01,$ad                          ; $90 -
>347c	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>347f	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3482	01 aa					.byte $01,$aa                          ; $93 *
>3484	01 af					.byte $01,$af                          ; $94 /
>3486	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>348a	01 de					.byte $01,$de                          ; $96 ^
>348c	01 a1					.byte $01,$a1                          ; $97 !
>348e	01 bf					.byte $01,$bf                          ; $98 ?
>3490	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3497	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>349d	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>34a1	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>34a4	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>34ac	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>34b2	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>34b7	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>34bc	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>34c1	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>34c7	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>34cf	01 a8					.byte $01,$a8                          ; $a4 (
>34d1	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>34d6	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>34db	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>34e0	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>34e8	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>34ed	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>34f2	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>34f8	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>34fd	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3502	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3507	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>350e	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3515	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>351a	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3521	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3528	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>352e	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3535	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>353b	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3543	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3549	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>354e	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3554	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>355a	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3560	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3565	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>356a	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3571	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3578	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3580	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3588	01 c0					.byte $01,$c0                          ; $c3 @
>358a	01 fe					.byte $01,$fe                          ; $c4 ~
>358c	01 a6					.byte $01,$a6                          ; $c5 &
>358e	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3594	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>359c	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>35a0	01 a9					.byte $01,$a9                          ; $c9 )
>35a2	01 ba					.byte $01,$ba                          ; $ca :
>35a4	01 ac					.byte $01,$ac                          ; $cb ,
>35a6	01 bb					.byte $01,$bb                          ; $cc ;
>35a8	01 a7					.byte $01,$a7                          ; $cd '
>35aa	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>35ad	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>35b2	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>35b7	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>35bd	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>35c1	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>35c5	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>35c9	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>35cf	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>35d4	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>35d8	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>35de	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>35e3	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>35e9	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>35f0	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>35f5	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>35fc	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3601	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3606	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>360b	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>360f	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3615	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3619	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3620	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3626	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3627					Group1Text:
>3627	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>362d	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3632	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3637	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>363c	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3640	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3644	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3649	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3651	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3655	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>365a	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>365f	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3660					Group2Text:
>3660	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3666	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>366c	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3672	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3673					Group3Text:
>3673	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>367a	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3681	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3682					tokeniserHandler:
.3682	7c 85 36	jmp ($3685,x)			jmp 	(tokeniserVectors,x)
.3685					tokeniserVectors:
>3685	b9 2f					.word Detokenise           ; index 0
>3687	af 2f					.word ListLine             ; index 2
>3689	2d 32					.word TokTest              ; index 4
>368b	4d 32					.word Tokenise             ; index 6
>368d	50 32					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.368f					section_end_tokeniser:
.368f					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d1e					varHash:
>0d1e							.fill	1
.0d1f					varType:
>0d1f							.fill 	1
.0d20					varEnd:
>0d20							.fill 	1
.007c					hashList:
>007c							.fill 	2
.368f					AccessVariable:
.368f	aa		tax				tax 								; stack in X
.3690	c8		iny				iny									; look at second character
.3691	b1 28		lda ($28),y			lda 	(codePtr),y
.3693	88		dey				dey
.3694	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3696	d0 15		bne $36ad			bne 	_AVLong 					; no, always use the hash tables.
.3698	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.369a	38		sec				sec 	 							; make it 0-25
.369b	e9 01		sbc #$01			sbc 	#1
.369d	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.369e	0a		asl a				asl 	a
.369f	95 48		sta $48,x			sta 	esInt0,x
.36a1	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.36a3	95 50		sta $50,x			sta 	esInt1,x
.36a5	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.36a7	95 40		sta $40,x			sta 	esType,x
.36a9	c8		iny				iny 								; skip over the variable reference in the code.
.36aa	c8		iny				iny  								; (1 letter, 1 type)
.36ab	8a		txa				txa 								; stack in A to return.
.36ac	60		rts				rts
.36ad					_AVLong:
.36ad	8a		txa				txa
.36ae	48		pha				pha
.36af	20 f6 36	jsr $36f6			jsr 	AccessSetup 				; set up the basic information we need for later
.36b2	20 38 39	jsr $3938			jsr 	FindVariable 				; does the variable exist already ?
.36b5	b0 0e		bcs $36c5			bcs 	_AVFound 					; yes, then its found
.36b7	ad 1f 0d	lda $0d1f			lda 	varType 					; otherwise, is the variable type an array
.36ba	4a		lsr a				lsr 	a
.36bb	90 05		bcc $36c2			bcc 	_AVCanCreate 				; if not, we can autocreate
.36bd	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.36bf	20 85 11	jsr $1185		jsr	errorHandler
.36c2					_AVCanCreate:
.36c2	20 ab 37	jsr $37ab			jsr 	CreateVariable 				; variable does not exist, create it.
.36c5					_AVFound:
.36c5	68		pla				pla
.36c6	aa		tax				tax
.36c7	18		clc				clc 								; copy temp0 (variable record address)
.36c8	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.36ca	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.36cc	95 48		sta $48,x			sta 	esInt0,x
.36ce	a5 2b		lda $2b				lda 	temp0+1
.36d0	69 00		adc #$00			adc 	#0
.36d2	95 50		sta $50,x			sta 	esInt1,x
.36d4	a9 00		lda #$00			lda 	#0
.36d6	95 58		sta $58,x			sta 	esInt2,x
.36d8	95 60		sta $60,x			sta 	esInt3,x
.36da	ac 1f 0d	ldy $0d1f			ldy 	varType 					; get the type ID from the type.
.36dd	b9 b6 36	lda $36b6,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.36e0	95 40		sta $40,x			sta 	esType,x
.36e2	ac 20 0d	ldy $0d20			ldy 	varEnd 						; restore Y
.36e5	ad 1f 0d	lda $0d1f			lda 	VarType 					; get variable type, put LSB into C
.36e8	4a		lsr a				lsr 	a
.36e9	90 03		bcc $36ee			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.36eb	20 33 37	jsr $3733			jsr 	AccessArray 				; array lookup. if LSB was set.
.36ee					_AVNotArray:
.36ee	8a		txa				txa 								; return stack in A and return
.36ef	60		rts				rts
.36f0					_AVTypeTable:
>36f0	80 80						.byte 	$80,$80						; integer
>36f2	c0 c0						.byte 	$C0,$C0 					; string
>36f4	81 81						.byte 	$81,$81 					; float
.36f6					AccessSetup:
.36f6	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.36f8	8d 1e 0d	sta $0d1e			sta 	varHash
.36fb	98		tya				tya
.36fc	48		pha				pha
.36fd	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.36ff	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3701	b0 0b		bcs $370e			bcs 	_ASComplete
.3703	18		clc				clc 								; add to the hash. Might improve this.
.3704	6d 1e 0d	adc $0d1e			adc 	varHash
.3707	8d 1e 0d	sta $0d1e			sta 	varHash
.370a	c8		iny				iny 								; next character
.370b	4c fd 36	jmp $36fd			jmp 	_ASLoop
.370e					_ASComplete:
.370e	8d 1f 0d	sta $0d1f			sta 	varType 					; save variable type byte
.3711	c8		iny				iny
.3712	8c 20 0d	sty $0d20			sty 	varEnd 						; save the ending position.
.3715	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3716	e9 3a		sbc #$3a			sbc 	#$3A
.3718	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3719	0a		asl a				asl 	a
.371a	0a		asl a				asl 	a
.371b	0a		asl a				asl 	a 							; 2 bytes/word
.371c	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.371e	ad 1e 0d	lda $0d1e			lda 	varHash 					; get hash
.3721	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3723	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3724	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3726	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3728	85 7c		sta $7c				sta 	hashList 					; making hashLists point to the head of the link list.
.372a	a9 0a		lda #$0a			lda 	#hashTables >> 8
.372c	69 00		adc #$00			adc 	#0
.372e	85 7d		sta $7d				sta 	hashList+1
.3730	68		pla				pla
.3731	a8		tay				tay
.3732	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3733					AccessArray:
.3733	e8		inx				inx
.3734	8a		txa				txa
.3735	a2 06		ldx #$06		ldx	#6
.3737	20 e6 2c	jsr $2ce6		jsr	mainHandler
.373a	48		pha				pha
.373b	a2 00		ldx #$00		ldx	#0
.373d	20 e6 2c	jsr $2ce6		jsr	mainHandler
.3740	68		pla				pla
.3741	aa		tax				tax
.3742	ca		dex				dex
.3743	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3745	15 59		ora $59,x			ora 	esInt2+1,x
.3747	d0 33		bne $377c			bne 	_AABadIndex
.3749	98		tya				tya
.374a	48		pha				pha
.374b	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.374d	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.374f	b5 50		lda $50,x			lda 	esInt1,x
.3751	85 2b		sta $2b				sta 	temp0+1
.3753	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3755	b5 49		lda $49,x			lda 	esInt0+1,x
.3757	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3759	c8		iny				iny
.375a	b5 51		lda $51,x			lda 	esInt1+1,x
.375c	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.375e	b0 1c		bcs $377c			bcs 	_AABadIndex 				; if >= then fail.
.3760	e8		inx				inx 								; point to index
.3761	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3763	b1 2a		lda ($2a),y			lda 	(temp0),y
.3765	20 81 37	jsr $3781			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3768	ca		dex				dex
.3769	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.376b	18		clc				clc
.376c	b5 49		lda $49,x			lda 	esInt0+1,x
.376e	71 2a		adc ($2a),y			adc 	(temp0),y
.3770	95 48		sta $48,x			sta 	esInt0,x
.3772	b5 51		lda $51,x			lda 	esInt1+1,x
.3774	c8		iny				iny
.3775	71 2a		adc ($2a),y			adc 	(temp0),y
.3777	95 50		sta $50,x			sta 	esInt1,x
.3779	68		pla				pla
.377a	a8		tay				tay
.377b	60		rts				rts
.377c					_AABadIndex:
.377c	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.377e	20 85 11	jsr $1185		jsr	errorHandler
.3781					MultiplyTOSByA:
.3781	48		pha				pha
.3782	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3784	85 2c		sta $2c				sta 	temp1
.3786	b5 50		lda $50,x			lda 	esInt1,x
.3788	85 2d		sta $2d				sta 	temp1+1
.378a	68		pla				pla
.378b	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.378d	36 50		rol $50,x			rol 	esInt1,x
.378f	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3791	f0 17		beq $37aa			beq 	_MTBAExit
.3793	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3795	d0 0f		bne $37a6			bne 	_MTBANotFloat
.3797	48		pha				pha
.3798	18		clc				clc 								; so this will make it x 3
.3799	b5 48		lda $48,x			lda 	esInt0,x
.379b	65 2c		adc $2c				adc 	temp1
.379d	95 48		sta $48,x			sta 	esInt0,x
.379f	b5 50		lda $50,x			lda 	esInt1,x
.37a1	65 2d		adc $2d				adc 	temp1+1
.37a3	95 50		sta $50,x			sta 	esInt1,x
.37a5	68		pla				pla
.37a6					_MTBANotFloat:
.37a6	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.37a8	36 50		rol $50,x			rol 	esInt1,x
.37aa					_MTBAExit:
.37aa	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.37ab					CreateVariable:
.37ab	98		tya				tya 								; push Y on the stack twice.
.37ac	48		pha				pha									; position in code of the new variable.
.37ad	48		pha				pha
.37ae	ae 1f 0d	ldx $0d1f			ldx 	varType 					; get var type 0-5 from the var type
.37b1	bd d5 37	lda $37d5,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.37b4	48		pha				pha 								; save length
.37b5	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.37b7	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.37b9	a5 36		lda $36				lda 	lowMemory+1
.37bb	85 2b		sta $2b				sta 	temp0+1
.37bd	68		pla				pla 								; get length
.37be	18		clc				clc 								; add to low memory.
.37bf	65 35		adc $35				adc 	lowMemory
.37c1	85 35		sta $35				sta 	lowMemory
.37c3	90 08		bcc $37cd			bcc 	_CVNoCarry
.37c5	e6 36		inc $36				inc 	lowMemory+1
.37c7	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.37c9	c5 34		cmp $34				cmp 	highMemory+1
.37cb	b0 3d		bcs $380a			bcs 	_CVMemory
.37cd					_CVNoCarry:
.37cd	ad 1e 0d	lda $0d1e			lda 	varHash 					; store hash at offset 4.
.37d0	a0 04		ldy #$04			ldy 	#4
.37d2	91 2a		sta ($2a),y			sta 	(temp0),y
.37d4	68		pla				pla 								; offset, work out where the variable name is.
.37d5	18		clc				clc
.37d6	65 28		adc $28				adc 	codePtr
.37d8	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.37da	91 2a		sta ($2a),y			sta 	(temp0),y
.37dc	a5 29		lda $29				lda 	codePtr+1
.37de	69 00		adc #$00			adc 	#0
.37e0	c8		iny				iny
.37e1	91 2a		sta ($2a),y			sta 	(temp0),y
.37e3	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.37e6	b0 03		bcs $37eb			bcs 	_CVNotImmediate
.37e8	20 4d 38	jsr $384d			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.37eb					_CVNotImmediate:
.37eb	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.37ed	b1 7c		lda ($7c),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.37ef	91 2a		sta ($2a),y			sta 	(temp0),y
.37f1	c8		iny				iny
.37f2	b1 7c		lda ($7c),y			lda 	(hashList),y
.37f4	91 2a		sta ($2a),y			sta 	(temp0),y
.37f6	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.37f8	91 7c		sta ($7c),y			sta 	(hashList),y
.37fa	88		dey				dey
.37fb	a5 2a		lda $2a				lda 	temp0
.37fd	91 7c		sta ($7c),y			sta 	(hashList),y
.37ff	ad 1f 0d	lda $0d1f			lda 	varType 					; type in A
.3802	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3804	20 15 38	jsr $3815			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3807	68		pla				pla
.3808	a8		tay				tay
.3809	60		rts				rts
.380a					_CVMemory:
.380a	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.380c	20 85 11	jsr $1185		jsr	errorHandler
>380f	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3811	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3813	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3815					ZeroTemp0Y:
.3815	4a		lsr a				lsr 	a 							; bit 0 in carry
.3816	0a		asl a				asl 	a
.3817	b0 19		bcs $3832			bcs 	_ZTExit 					; we don't initialise arrays.
.3819	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.381b	f0 16		beq $3833			beq 	_ZTWriteNullString 			; write "" string
.381d	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.381f	f0 22		beq $3843			beq 	_ZTWriteFloat
.3821	98		tya				tya
.3822	48		pha				pha
.3823	a9 00		lda #$00			lda 	#0
.3825	91 2a		sta ($2a),y			sta 	(temp0),y
.3827	c8		iny				iny
.3828	91 2a		sta ($2a),y			sta 	(temp0),y
.382a	c8		iny				iny
.382b	91 2a		sta ($2a),y			sta 	(temp0),y
.382d	c8		iny				iny
.382e	91 2a		sta ($2a),y			sta 	(temp0),y
.3830	68		pla				pla
.3831	a8		tay				tay
.3832					_ZTExit:
.3832	60		rts				rts
.3833					_ZTWriteNullString:
.3833	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3835	8d ce 0a	sta $0ace			sta 	NullString
.3838	a9 ce		lda #$ce			lda 	#NullString & $FF
.383a	91 2a		sta ($2a),y			sta 	(temp0),y
.383c	a9 0a		lda #$0a			lda 	#NullString >> 8
.383e	c8		iny				iny
.383f	91 2a		sta ($2a),y			sta 	(temp0),y
.3841	88		dey				dey
.3842	60		rts				rts
.3843					_ZTWriteFloat:
.3843	8a		txa				txa
.3844	48		pha				pha
.3845	a2 1e		ldx #$1e		ldx	#30
.3847	20 f0 14	jsr $14f0		jsr	floatingpointHandler
.384a	68		pla				pla
.384b	aa		tax				tax
.384c	60		rts				rts
.384d					CloneVariableName:
.384d	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.384f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3851	85 2e		sta $2e				sta 	temp2
.3853	c8		iny				iny
.3854	b1 2a		lda ($2a),y			lda 	(temp0),y
.3856	85 2f		sta $2f				sta 	temp2+1
.3858	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.385a	91 2a		sta ($2a),y			sta 	(temp0),y
.385c	88		dey				dey
.385d	a5 35		lda $35				lda 	lowMemory
.385f	91 2a		sta ($2a),y			sta 	(temp0),y
.3861	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3863					_CVNCopy:
.3863	b1 2e		lda ($2e),y			lda		(temp2),y
.3865	91 35		sta ($35),y			sta 	(lowMemory),y
.3867	c8		iny				iny
.3868	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.386a	90 f7		bcc $3863			bcc 	_CVNCopy
.386c	98		tya				tya 								; add Y to low memory
.386d	18		clc				clc
.386e	65 35		adc $35				adc 	lowMemory
.3870	85 35		sta $35				sta 	lowMemory
.3872	90 02		bcc $3876			bcc 	_CVNNoCarry
.3874	e6 36		inc $36				inc 	lowMemory+1
.3876					_CVNNoCarry:
.3876	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3877					CreateArray:
.3877	20 f6 36	jsr $36f6			jsr 	AccessSetup 				; set up the basic stuff.
.387a	ad 1f 0d	lda $0d1f			lda 	varType 					; is the variable type an array
.387d	4a		lsr a				lsr 	a
.387e	90 3f		bcc $38bf			bcc 	_CANotArray 				; no, cause an error.
.3880	20 38 39	jsr $3938			jsr 	FindVariable 				; does the variable exist already
.3883	b0 35		bcs $38ba			bcs 	_CAFound 					; cannot redefine it.
.3885	20 ab 37	jsr $37ab			jsr 	CreateVariable 				; create the variable entry.
.3888	ac 20 0d	ldy $0d20			ldy 	varEnd 						; point Y to the end of the variable entry.
.388b	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.388d	48		pha				pha
.388e	a5 2b		lda $2b				lda 	temp0+1
.3890	48		pha				pha
.3891	ad 1f 0d	lda $0d1f			lda 	varType 					; push variable type on the stack.
.3894	48		pha				pha
.3895	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3897	a2 06		ldx #$06		ldx	#6
.3899	20 e6 2c	jsr $2ce6		jsr	mainHandler
.389c	a2 00		ldx #$00		ldx	#0
.389e	20 e6 2c	jsr $2ce6		jsr	mainHandler
.38a1	68		pla				pla 		 						; restore type and position.
.38a2	8d 1f 0d	sta $0d1f			sta 	varType
.38a5	68		pla				pla
.38a6	85 2b		sta $2b				sta 	temp0+1
.38a8	68		pla				pla
.38a9	85 2a		sta $2a				sta 	temp0
.38ab	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.38ad	29 e0		and #$e0			and 	#$E0
.38af	05 58		ora $58				ora 	esInt2
.38b1	05 60		ora $60				ora 	esInt3
.38b3	f0 0f		beq $38c4			beq 	_CASizeOk
.38b5					_CASize:
.38b5	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.38b7	20 85 11	jsr $1185		jsr	errorHandler
.38ba					_CAFound:
.38ba	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.38bc	20 85 11	jsr $1185		jsr	errorHandler
.38bf					_CANotArray:
.38bf	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.38c1	20 85 11	jsr $1185		jsr	errorHandler
.38c4					_CASizeOk:
.38c4	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.38c6	d0 02		bne $38ca			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.38c8	e6 49		inc $49				inc 	esInt0+1
.38ca					_CANoCarry:
.38ca	98		tya				tya
.38cb	48		pha				pha
.38cc	a0 05		ldy #$05			ldy 	#5
.38ce	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.38d0	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.38d2	c8		iny				iny
.38d3	a5 36		lda $36				lda 	lowMemory+1
.38d5	91 2a		sta ($2a),y			sta 	(temp0),y
.38d7	c8		iny				iny
.38d8	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.38da	91 2a		sta ($2a),y			sta 	(temp0),y
.38dc	c8		iny				iny
.38dd	a5 50		lda $50				lda 	esInt1
.38df	91 2a		sta ($2a),y			sta 	(temp0),y
.38e1	c8		iny				iny
.38e2	ae 1f 0d	ldx $0d1f			ldx 	varType 					; get the length per element
.38e5	bd f1 38	lda $38f1,x			lda 	_CAActualSize-$3A-1,x
.38e8	91 2a		sta ($2a),y			sta 	(temp0),y
.38ea	aa		tax				tax 								; save size in X
.38eb	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.38ed	85 2a		sta $2a				sta 	temp0
.38ef	a5 36		lda $36				lda 	lowMemory+1
.38f1	85 2b		sta $2b				sta 	temp0+1
.38f3	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.38f5	85 2c		sta $2c				sta 	temp1
.38f7	85 2d		sta $2d				sta 	temp1+1
.38f9					_CAInitialiseArray:
.38f9	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.38fb	ad 1f 0d	lda $0d1f			lda 	varType 					; base type of array in A.
.38fe	29 fe		and #$fe			and 	#$FE
.3900	20 15 38	jsr $3815			jsr 	ZeroTemp0Y
.3903	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3904	18		clc				clc
.3905	65 2a		adc $2a				adc 	temp0
.3907	85 2a		sta $2a				sta 	temp0
.3909	85 35		sta $35				sta 	lowMemory
.390b	a5 2b		lda $2b				lda 	temp0+1
.390d	69 00		adc #$00			adc 	#0
.390f	85 2b		sta $2b				sta 	temp0+1
.3911	85 36		sta $36				sta 	lowMemory+1
.3913	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3915	b0 1c		bcs $3933			bcs 	_CAMemory
.3917	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3919	d0 02		bne $391d			bne 	_CAIANoCarry
.391b	e6 2d		inc $2d				inc 	temp1+1
.391d					_CAIANoCarry:
.391d	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.391f	c5 2c		cmp $2c				cmp 	temp1
.3921	d0 d6		bne $38f9			bne 	_CAInitialiseArray
.3923	a5 50		lda $50				lda 	esInt1
.3925	c5 2d		cmp $2d				cmp 	temp1+1
.3927	d0 d0		bne $38f9			bne 	_CAInitialiseArray
.3929	68		pla				pla
.392a	a8		tay				tay
.392b	60		rts				rts
.392c					_CAActualSize:
>392c	04 00						.byte 	VarISize,0
>392e	02 00						.byte 	VarSSize,0
>3930	06 00						.byte 	VarFSize,0
>3932	db						.byte 	$DB
.3933					_CAMemory:
.3933	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3935	20 85 11	jsr $1185		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3938					FindVariable:
.3938	98		tya				tya
.3939	48		pha				pha
.393a	98		tya				tya 								; point temp2 to the actual name
.393b	18		clc				clc 								; in memory of the variable being created
.393c	65 28		adc $28				adc 	codePtr
.393e	85 2e		sta $2e				sta 	temp2
.3940	a5 29		lda $29				lda 	codePtr+1
.3942	69 00		adc #$00			adc 	#0
.3944	85 2f		sta $2f				sta 	temp2+1
.3946	a0 00		ldy #$00			ldy 	#0
.3948	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.394a	85 2a		sta $2a				sta 	temp0
.394c	a5 7d		lda $7d				lda 	hashList+1
.394e	85 2b		sta $2b				sta 	temp0+1
.3950	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3952	b1 2a		lda ($2a),y			lda 	(temp0),y
.3954	f0 2c		beq $3982			beq 	_FVFail
.3956	aa		tax				tax
.3957	88		dey				dey		 							; get LSB
.3958	b1 2a		lda ($2a),y			lda 	(temp0),y
.395a	85 2a		sta $2a				sta 	temp0 						; update pointer.
.395c	86 2b		stx $2b				stx 	temp0+1
.395e	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3960	b1 2a		lda ($2a),y			lda 	(temp0),y
.3962	cd 1e 0d	cmp $0d1e			cmp 	varHash
.3965	d0 e9		bne $3950			bne 	_FVNext 					; if not, no point in checking the name.
.3967	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3968	b1 2a		lda ($2a),y			lda 	(temp0),y
.396a	85 2d		sta $2d				sta 	temp1+1
.396c	88		dey				dey
.396d	b1 2a		lda ($2a),y			lda 	(temp0),y
.396f	85 2c		sta $2c				sta 	temp1
.3971	a0 00		ldy #$00			ldy 	#0
.3973					_FVCheck:
.3973	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3975	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3977	d0 d7		bne $3950			bne 	_FVNext		 				; fail if different.
.3979	c8		iny				iny
.397a	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.397c	90 f5		bcc $3973			bcc 	_FVCheck
.397e	68		pla				pla
.397f	a8		tay				tay
.3980	38		sec				sec
.3981	60		rts				rts
.3982					_FVFail:
.3982	68		pla				pla
.3983	a8		tay				tay
.3984	18		clc				clc
.3985	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3986					HashTableReset:
.3986	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3988	a9 00		lda #$00			lda 	#0
.398a					_HTRClear:
.398a	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.398d	ca		dex				dex
.398e	d0 fa		bne $398a			bne 	_HTRClear
.3990	60		rts				rts

;******  Return to file: variable/variable.asm

.3991					variableHandler:
.3991	7c 94 39	jmp ($3994,x)			jmp 	(variableVectors,x)
.3994					variableVectors:
>3994	8f 36					.word AccessVariable       ; index 0
>3996	77 38					.word CreateArray          ; index 2
>3998	86 39					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.399a					section_end_variable:
.399a					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

>399a							.align 	256
.3a00					programMemory:
>39ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3a00					section_end_footer:

;******  End of listing
