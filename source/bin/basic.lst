
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Mar 15 12:23:50 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$40					StackAddress = $40
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0078					endOfStack:
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex
=35					ErrorID_Assembler = 35 ; Bad Operand/Mode

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	97 37						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 3e		lda #$3e			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 94 13	jsr $1394		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 93 19	jsr $1993		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 c9 3a	jsr $3ac9		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	20 b4 2e	jsr $2eb4			jsr 	MInt32False
.1032	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.1034	aa		tax				tax
.1035	a9 02		lda #$02			lda 	#AMD_ACCIMP
.1037	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.1039	f0 41		beq $107c			beq 	_AGOExit
.103b	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.103d	f0 3d		beq $107c			beq 	_AGOExit
.103f	c8		iny				iny 								; consume the token
.1040	a9 00		lda #$00			lda 	#AMD_IMM
.1042	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.1044	f0 2d		beq $1073			beq		_AGOEvalExit 				; with an operand.
.1046	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.1048	f0 40		beq $108a			beq 	_AGOIndirect
.104a	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.104c	d0 0b		bne $1059			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.104e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1050	c8		iny				iny
.1051	aa		tax				tax
.1052	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.1054	e0 3a		cpx #$3a			cpx 	#$3A
.1056	f0 24		beq $107c			beq 	_AGOExit
.1058	88		dey				dey 								; unpick 2 iny
.1059					_AGOZeroPage1:
.1059	88		dey				dey
.105a	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.105c	a2 06		ldx #$06		ldx	#6
.105e	20 1e 30	jsr $301e		jsr	mainHandler
.1061	20 b9 10	jsr $10b9			jsr 	AsmGetIndexing
.1064	a9 01		lda #$01			lda 	#AMD_ZERO
.1066	90 14		bcc $107c			bcc 	_AGOExit
.1068	a9 05		lda #$05			lda 	#AMD_ZEROX
.106a	e0 00		cpx #$00			cpx 	#0
.106c	f0 0e		beq $107c			beq 	_AGOExit
.106e	a9 09		lda #$09			lda 	#AMD_ZEROY
.1070	4c 7c 10	jmp $107c			jmp 	_AGOExit
.1073					_AGOEvalExit:
.1073	48		pha				pha
.1074	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1076	a2 06		ldx #$06		ldx	#6
.1078	20 1e 30	jsr $301e		jsr	mainHandler
.107b	68		pla				pla
.107c					_AGOExit:
.107c	48		pha				pha 								; save the mode
.107d	a5 58		lda $58				lda 	esInt2 						; check the operand is zero.
.107f	05 60		ora $60				ora 	esInt3
.1081	d0 02		bne $1085			bne 	_AGOValue
.1083	68		pla				pla
.1084	60		rts				rts
.1085					_AGOValue:
.1085	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1087	20 b5 13	jsr $13b5		jsr	errorHandler
.108a					_AGOIndirect:
.108a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.108c	a2 06		ldx #$06		ldx	#6
.108e	20 1e 30	jsr $301e		jsr	mainHandler
.1091	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1093	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1095	f0 11		beq $10a8			beq 	_AGOIndIndY
.1097	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; must be ,X)
.109a	90 39		bcc $10d5			bcc 	AGISyntax
.109c	e0 00		cpx #$00			cpx 	#0
.109e	d0 35		bne $10d5			bne 	AGISyntax
.10a0	a2 00		ldx #$00		ldx	#0
.10a2	20 1e 30	jsr $301e		jsr	mainHandler
.10a5	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10a7	60		rts				rts
.10a8					_AGOIndIndY:
.10a8	c8		iny				iny
.10a9	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; get indexing if any
.10ac	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10ae	90 cc		bcc $107c			bcc 	_AGOExit 					; none then exit
.10b0	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b2	f0 21		beq $10d5			beq 	AGISyntax
.10b4	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10b6	4c 7c 10	jmp $107c			jmp 	_AGOExit
.10b9					AsmGetIndexing:
.10b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10bd	18		clc				clc
.10be	d0 14		bne $10d4			bne 	_AGIExit 					; no comma, return with CC
.10c0	c8		iny				iny 								; get what SHOULD be X or Y
.10c1	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c3	38		sec				sec 								; subtract 6 bit ASCII of X
.10c4	e9 18		sbc #$18			sbc 	#"X" & $3F
.10c6	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10c8	b0 0b		bcs $10d5			bcs 	AGISyntax
.10ca	aa		tax				tax 								; put in index
.10cb	c8		iny				iny 								; get what follows that, should be the $3A marker
.10cc	b1 28		lda ($28),y			lda 	(codePtr),y
.10ce	c8		iny				iny
.10cf	c9 3a		cmp #$3a			cmp 	#$3A
.10d1	d0 02		bne $10d5			bne 	AGISyntax
.10d3	38		sec				sec 								; return CS and index mode in X
.10d4					_AGIExit:
.10d4	60		rts				rts
.10d5					AGISyntax:
.10d5	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10d7	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10da					AsmWriteInstruction:
.10da	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10dd	98		tya				tya
.10de	48		pha				pha
.10df	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e2	29 02		and #$02			and 	#2
.10e4	f0 2d		beq $1113			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10e6	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10e9	20 4e 11	jsr $114e			jsr 	AWIWriteHex
.10ec	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10ef	20 4e 11	jsr $114e			jsr 	AWIWriteHex
.10f2	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10f5	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.10f8	e0 00		cpx #$00			cpx 	#0
.10fa	f0 0e		beq $110a			beq 	_ASMWEchoExit
.10fc	a5 48		lda $48				lda 	esInt0
.10fe	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.1101	e0 01		cpx #$01			cpx 	#1
.1103	f0 05		beq $110a			beq 	_ASMWEchoExit
.1105	a5 50		lda $50				lda 	esInt1
.1107	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.110a					_ASMWEchoExit:
.110a	8a		txa				txa
.110b	48		pha				pha
.110c	a2 04		ldx #$04		ldx	#4
.110e	20 94 13	jsr $1394		jsr	deviceHandler
.1111	68		pla				pla
.1112	aa		tax				tax
.1113					_ASMWNoEcho:
.1113	ad f2 0a	lda $0af2			lda 	finalOpcode
.1116	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.1119	e0 00		cpx #$00			cpx 	#0
.111b	f0 0e		beq $112b			beq 	_ASMWExit
.111d	a5 48		lda $48				lda 	esInt0
.111f	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.1122	e0 01		cpx #$01			cpx 	#1
.1124	f0 05		beq $112b			beq 	_ASMWExit
.1126	a5 50		lda $50				lda 	esInt1
.1128	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.112b					_ASMWExit:
.112b	68		pla				pla
.112c	a8		tay				tay
.112d	60		rts				rts
.112e					AsmWriteByte:
.112e	a0 00		ldy #$00			ldy 	#0
.1130	48		pha				pha
.1131	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1134	85 2a		sta $2a				sta 	temp0
.1136	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1139	85 2b		sta $2b				sta 	temp0+1
.113b	68		pla				pla 								; write out the byte.
.113c	91 2a		sta ($2a),y			sta 	(temp0),y
.113e	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1141	d0 03		bne $1146			bne 	_AWBNoCarry
.1143	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1146					_AWBNoCarry:
.1146	60		rts				rts
.1147					AWIWriteHexSpace:
.1147	48		pha				pha
.1148	a9 20		lda #$20			lda 	#" "
.114a	20 61 11	jsr $1161			jsr 	AWIPrintChar
.114d	68		pla				pla
.114e					AWIWriteHex:
.114e	48		pha				pha
.114f	4a		lsr a				lsr 	a
.1150	4a		lsr a				lsr 	a
.1151	4a		lsr a				lsr 	a
.1152	4a		lsr a				lsr 	a
.1153	20 57 11	jsr $1157			jsr 	AWIPrintNibble
.1156	68		pla				pla
.1157					AWIPrintNibble:
.1157	29 0f		and #$0f			and 	#15
.1159	c9 0a		cmp #$0a			cmp 	#10
.115b	90 02		bcc $115f			bcc 	_AWIPNDigit
.115d	69 06		adc #$06			adc 	#6
.115f					_AWIPNDigit:
.115f	69 30		adc #$30			adc 	#48
.1161					AWIPrintChar:
.1161	85 32		sta $32				sta 	tempShort
.1163	8a		txa				txa
.1164	48		pha				pha
.1165	a5 32		lda $32				lda 	tempShort
.1167	a2 16		ldx #$16		ldx	#22
.1169	20 94 13	jsr $1394		jsr	deviceHandler
.116c	68		pla				pla
.116d	aa		tax				tax
.116e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.116f					AssembleOneInstruction:
.116f	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1172	aa		tax				tax
.1173	bd 3f 11	lda $113f,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.1176	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.1179	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.117c	8d f4 0a	sta $0af4			sta 	asmMode
.117f	a5 50		lda $50				lda 	esInt1 						; check if this is a three byte operand.
.1181	d0 05		bne $1188			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1183	20 9e 11	jsr $119e			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.1186	b0 10		bcs $1198			bcs 	_AOISuccess 				; worked ok.
.1188					_AOIThreeBytes:
.1188	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.118b	bd c2 11	lda $11c2,x			lda 	AbsoluteVersionTable,x
.118e	30 09		bmi $1199			bmi 	_AOIError					; not possible, no equivalent.
.1190	8d f4 0a	sta $0af4			sta 	asmMode
.1193	20 9e 11	jsr $119e			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.1196	90 01		bcc $1199			bcc 	_AOIError 					; didn't work.
.1198					_AOISuccess:
.1198	60		rts				rts
.1199					_AOIError:
.1199	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.119b	20 b5 13	jsr $13b5		jsr	errorHandler
.119e					AssembleAttempt:
.119e	20 a7 11	jsr $11a7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a1	b0 03		bcs $11a6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a3	20 56 12	jsr $1256			jsr 	AssembleSpecialCase
.11a6					_AAExit:
.11a6	60		rts				rts
.11a7					_AADispatch:
.11a7	ad f3 0a	lda $0af3			lda 	asmToken
.11aa	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11ac	b0 11		bcs $11bf			bcs 	_AAGroup4
.11ae	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b0	b0 0a		bcs $11bc			bcs 	_AAGroup3
.11b2	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11b4	b0 03		bcs $11b9			bcs 	_AAGroup2
.11b6	4c 44 12	jmp $1244			jmp 	AssembleGroup1
.11b9					_AAGroup2:
.11b9	4c 47 12	jmp $1247			jmp 	AssembleGroup2
.11bc					_AAGroup3:
.11bc	4c 4a 12	jmp $124a			jmp 	AssembleGroup3
.11bf					_AAGroup4:
.11bf	4c 4d 12	jmp $124d			jmp 	AssembleGroup4
.11c2					AbsoluteVersionTable:
>11c2	ff						.byte	$FF 			; fail AMD_IMM
>11c3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11c4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11c5	ff						.byte	$FF 			; fail AMD_ABS
>11c6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11c7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11c8	ff						.byte	$FF 			; fail AMD_ABSY
>11c9	ff						.byte	$FF 			; fail AMD_ABSX
>11ca	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11cb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11cc	ff						.byte	$FF 			; fail AMD_ABSIND
>11cd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11ce	ff						.byte	$FF 			; fail AMD_REL
>11cf	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d0					OpcodeTable:
>11d0	01					.byte	$01			; $91 ora
>11d1	21					.byte	$21			; $92 (and)
>11d2	41					.byte	$41			; $93 eor
>11d3	61					.byte	$61			; $94 adc
>11d4	81					.byte	$81			; $95 sta
>11d5	a1					.byte	$a1			; $96 lda
>11d6	c1					.byte	$c1			; $97 cmp
>11d7	e1					.byte	$e1			; $98 sbc
>11d8	02					.byte	$02			; $99 asl
>11d9	22					.byte	$22			; $9a rol
>11da	42					.byte	$42			; $9b lsr
>11db	62					.byte	$62			; $9c ror
>11dc	82					.byte	$82			; $9d stx
>11dd	a2					.byte	$a2			; $9e ldx
>11de	c2					.byte	$c2			; $9f dec
>11df	e2					.byte	$e2			; $a0 inc
>11e0	60					.byte	$60			; $a1 stz
>11e1	20					.byte	$20			; $a2 bit
>11e2	80					.byte	$80			; $a3 sty
>11e3	a0					.byte	$a0			; $a4 ldy
>11e4	c0					.byte	$c0			; $a5 cpy
>11e5	e0					.byte	$e0			; $a6 cpx
>11e6	00					.byte	$00			; $a7 tsb
>11e7	10					.byte	$10			; $a8 trb
>11e8	14					.byte	$14			; $a9 jsr
>11e9	40					.byte	$40			; $aa jmp
>11ea	10					.byte	$10			; $ab bpl
>11eb	30					.byte	$30			; $ac bmi
>11ec	50					.byte	$50			; $ad bvc
>11ed	70					.byte	$70			; $ae bvs
>11ee	90					.byte	$90			; $af bcc
>11ef	b0					.byte	$b0			; $b0 bcs
>11f0	d0					.byte	$d0			; $b1 bne
>11f1	f0					.byte	$f0			; $b2 beq
>11f2	80					.byte	$80			; $b3 bra
>11f3	00					.byte	$00			; $b4 brk
>11f4	08					.byte	$08			; $b5 php
>11f5	18					.byte	$18			; $b6 clc
>11f6	28					.byte	$28			; $b7 plp
>11f7	38					.byte	$38			; $b8 sec
>11f8	40					.byte	$40			; $b9 rti
>11f9	48					.byte	$48			; $ba pha
>11fa	58					.byte	$58			; $bb cli
>11fb	5a					.byte	$5a			; $bc phy
>11fc	60					.byte	$60			; $bd rts
>11fd	68					.byte	$68			; $be pla
>11fe	78					.byte	$78			; $bf sei
>11ff	7a					.byte	$7a			; $c0 ply
>1200	88					.byte	$88			; $c1 dey
>1201	8a					.byte	$8a			; $c2 txa
>1202	98					.byte	$98			; $c3 tya
>1203	9a					.byte	$9a			; $c4 txs
>1204	a8					.byte	$a8			; $c5 tay
>1205	aa					.byte	$aa			; $c6 tax
>1206	b8					.byte	$b8			; $c7 clv
>1207	ba					.byte	$ba			; $c8 tsx
>1208	c8					.byte	$c8			; $c9 iny
>1209	ca					.byte	$ca			; $ca dex
>120a	d8					.byte	$d8			; $cb cld
>120b	da					.byte	$da			; $cc phx
>120c	e8					.byte	$e8			; $cd inx
>120d	ea					.byte	$ea			; $ce nop
>120e	f8					.byte	$f8			; $cf sed
>120f	fa					.byte	$fa			; $d0 plx
.1210					Group2OpcodeAvailability:
>1210	57					.byte	$57			; $99 asl $02
>1211	57					.byte	$57			; $9a rol $22
>1212	57					.byte	$57			; $9b lsr $42
>1213	57					.byte	$57			; $9c ror $62
>1214	05					.byte	$05			; $9d stx $82
>1215	05					.byte	$05			; $9e ldx $a2
>1216	55					.byte	$55			; $9f dec $c2
>1217	55					.byte	$55			; $a0 inc $e2
>1218	11					.byte	$11			; $a1 stz $60
>1219	55					.byte	$55			; $a2 bit $20
>121a	05					.byte	$05			; $a3 sty $80
>121b	55					.byte	$55			; $a4 ldy $a0
>121c	15					.byte	$15			; $a5 cpy $c0
>121d	05					.byte	$05			; $a6 cpx $e0
>121e	05					.byte	$05			; $a7 tsb $00
>121f	05					.byte	$05			; $a8 trb $10
>1220	04					.byte	$04			; $a9 jsr $14
>1221	04					.byte	$04			; $aa jmp $40
.1222					AssemblerSpecialCases:
>1222	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>1225	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>1228	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>122b	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>122e	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1231	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>1234	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>1237	a2 00 89				.byte	$a2,0,$89		; bit #
>123a	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>123d	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1240	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1241					AssembleLabel:
>1241	db						.byte 	$DB
.1242	ea		nop				nop
.1243	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.1244					AssembleGroup1:
>1244	db						.byte 	$DB
.1245	18		clc				clc
.1246	60		rts				rts
.1247					AssembleGroup2:
>1247	db						.byte 	$DB
.1248	18		clc				clc
.1249	60		rts				rts
.124a					AssembleGroup3:
>124a	db						.byte 	$DB
.124b	18		clc				clc
.124c	60		rts				rts
.124d					AssembleGroup4:
.124d	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1250	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.1252	20 da 10	jsr $10da			jsr 	AsmWriteInstruction 		; output instruction.
.1255	60		rts				rts
.1256					AssembleSpecialCase:
>1256	db						.byte 	$DB
.1257	18		clc				clc
.1258	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1259					assemblerHandler:
.1259	7c 5c 12	jmp ($125c,x)			jmp 	(assemblerVectors,x)
.125c					assemblerVectors:
>125c	6f 11					.word AssembleOneInstruction ; index 0
>125e	41 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.1260					section_end_assembler:
.1260					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.1260					X16Break:
.1260	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.1263	f0 01		beq $1266			beq 	_IsBreak
.1265	60		rts				rts
.1266					_IsBreak:
.1266	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1268	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.126b					ExternSave:
.126b	98		tya				tya
.126c	48		pha				pha
.126d	20 bb 12	jsr $12bb			jsr 	ExternGetLength 			; get length of file into A name YX
.1270	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1273	a9 01		lda #$01			lda 	#1
.1275	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1277	a0 00		ldy #$00			ldy 	#0
.1279	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.127c	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.127e	85 2a		sta $2a				sta 	temp0
.1280	a5 51		lda $51				lda 	esInt1+1
.1282	85 2b		sta $2b				sta 	temp0+1
.1284	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.1286	a4 52		ldy $52				ldy 	esInt1+2
.1288	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.128a	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.128d	b0 03		bcs $1292			bcs 	_ESSave
.128f	68		pla				pla
.1290	a8		tay				tay
.1291	60		rts				rts
.1292					_ESSave:
.1292	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.1294	20 b5 13	jsr $13b5		jsr	errorHandler
.1297					ExternLoad:
.1297	98		tya				tya
.1298	48		pha				pha
.1299	20 bb 12	jsr $12bb			jsr 	ExternGetLength 			; get length of file into A name YX
.129c	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.129f	a9 01		lda #$01			lda 	#1
.12a1	a2 08		ldx #$08			ldx 	#8	 						; device #8
.12a3	a0 00		ldy #$00			ldy 	#0
.12a5	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.12a8	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.12aa	a4 51		ldy $51				ldy 	esInt1+1
.12ac	a9 00		lda #$00			lda 	#0 							; load command
.12ae	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.12b1	b0 03		bcs $12b6			bcs 	_ESLoad
.12b3	68		pla				pla
.12b4	a8		tay				tay
.12b5	60		rts				rts
.12b6					_ESLoad:
.12b6	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.12b8	20 b5 13	jsr $13b5		jsr	errorHandler
.12bb					ExternGetLength:
.12bb	a5 48		lda $48				lda 	esInt0 						; length into A.
.12bd	85 2a		sta $2a				sta 	temp0
.12bf	a5 50		lda $50				lda 	esInt1
.12c1	85 2b		sta $2b				sta 	temp0+1
.12c3	a0 00		ldy #$00			ldy 	#0
.12c5	b1 2a		lda ($2a),y			lda 	(temp0),y
.12c7	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.12c9	a4 50		ldy $50				ldy 	esInt1
.12cb	e8		inx				inx 								; advance over the length pointer.
.12cc	d0 01		bne $12cf			bne 	_ESNoCarry
.12ce	c8		iny				iny
.12cf					_ESNoCarry:
.12cf	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.12d0					IOInitialise:
.12d0	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.12d2	20 fb 12	jsr $12fb			jsr 	IOPrintChar
.12d5	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.12d7	20 27 13	jsr $1327			jsr 	IOInk
.12da	a9 00		lda #$00			lda 	#0
.12dc	20 3b 13	jsr $133b			jsr 	IOPaper
.12df	20 e3 12	jsr $12e3			jsr 	IOClearScreen
.12e2	60		rts				rts
.12e3					IOClearScreen:
.12e3	48		pha				pha
.12e4	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.12e6	20 fb 12	jsr $12fb			jsr 	IOPrintChar
.12e9	68		pla				pla
.12ea	60		rts				rts
.12eb					IONewLine:
.12eb	48		pha				pha
.12ec	a9 0d		lda #$0d			lda 	#13
.12ee	20 fb 12	jsr $12fb			jsr 	IOPrintChar
.12f1	68		pla				pla
.12f2	60		rts				rts
.12f3					IOTab:
.12f3	48		pha				pha
.12f4	a9 20		lda #$20			lda 	#32
.12f6	20 fb 12	jsr $12fb			jsr 	IOPrintChar
.12f9	68		pla				pla
.12fa	60		rts				rts
.12fb					IOPrintAscii:
.12fb					IOPrintChar:
.12fb	aa		tax				tax 								; save in X so we can save Y
.12fc	5a		phy				phy
.12fd	8a		txa				txa
.12fe	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1300	d0 02		bne $1304			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1302	a9 14		lda #$14			lda 	#$14
.1304					_IOPCNotBS:
.1304	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1307	7a		ply				ply
.1308	60		rts				rts
.1309					IOInkey:
.1309	98		tya				tya
.130a	48		pha				pha
.130b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.130e	85 32		sta $32				sta 	tempShort
.1310	68		pla				pla
.1311	a8		tay				tay
.1312	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1314	f0 10		beq $1326			beq 	_IOIExit
.1316	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.1318	f0 0c		beq $1326			beq 	_IOIExit
.131a	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.131c	f0 06		beq $1324			beq 	_IOIBackspace
.131e	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1320	90 e7		bcc $1309			bcc 	IOInkey
.1322	b0 02		bcs $1326			bcs 	_IOIExit
.1324					_IOIBackspace:
.1324	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1326					_IOIExit:
.1326	60		rts				rts
.1327					IOInk:
.1327	48		pha				pha
.1328	29 07		and #$07			and 	#7 							; 8 primaries
.132a	aa		tax				tax
.132b	bd 33 13	lda $1333,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.132e	20 fb 12	jsr $12fb			jsr 	IOPrintChar
.1331	68		pla				pla
.1332	60		rts				rts
.1333					_IOColourTable:
>1333	90						.byte 	$90 					; 0 Black
>1334	96						.byte 	$96 					; 1 Red
>1335	1e						.byte 	$1E 					; 2 Green
>1336	9e						.byte 	$9E 					; 3 Yellow
>1337	9a						.byte 	$9A 					; 4 Blue
>1338	9c						.byte 	$9C 					; 5 Magenta
>1339	9f						.byte 	$9F 					; 6 Cyan
>133a	05						.byte 	$05 					; 7 White
.133b					IOPaper:
.133b	48		pha				pha
.133c	48		pha				pha
.133d	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.133f	20 fb 12	jsr $12fb			jsr 	IOPrintChar 			; and then swap them again.
.1342	68		pla				pla
.1343	20 27 13	jsr $1327			jsr 	IOInk
.1346	a9 01		lda #$01			lda 	#1
.1348	20 fb 12	jsr $12fb			jsr 	IOPrintChar
.134b	68		pla				pla
.134c	60		rts				rts
.134d					IOLocate:
.134d	48		pha				pha
.134e	a9 13		lda #$13			lda 	#$13 					; home cursor code
.1350	20 fb 12	jsr $12fb			jsr 	IOPrintChar
.1353	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1355	20 5c 13	jsr $135c			jsr 	_IOLoc2
.1358	68		pla				pla
.1359	a8		tay				tay
.135a	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.135c					_IOLoc2:
.135c	c0 00		cpy #$00			cpy 	#0
.135e	f0 06		beq $1366			beq 	_IOLocExit
.1360	20 fb 12	jsr $12fb			jsr 	IOPrintChar
.1363	88		dey				dey
.1364	d0 f6		bne $135c			bne 	_IOLoc2
.1366					_IOLocExit:
.1366	60		rts				rts
.1367					IOInput:
.1367	a9 00		lda #$00			lda 	#0
.1369	8d f6 0a	sta $0af6			sta 	bufferCount
.136c					_IOILoop:
.136c	20 cf ff	jsr $ffcf			jsr 	$FFCF
.136f	c9 0d		cmp #$0d			cmp 	#13
.1371	f0 10		beq $1383			beq 	_IOIExit
.1373	ae f6 0a	ldx $0af6			ldx 	bufferCount
.1376	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.1378	f0 f2		beq $136c			beq 	_IOILoop
.137a	ee f6 0a	inc $0af6			inc 	bufferCount
.137d	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.1380	4c 6c 13	jmp $136c			jmp 	_IOILoop
.1383					_IOIExit:
.1383	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.1385	85 2a		sta $2a				sta 	temp0
.1387	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.1389	85 2b		sta $2b				sta 	1+(temp0)
.138b	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.138c					IOReadTimer:
.138c	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.138f	48		pha				pha
.1390	8a		txa				txa
.1391	a8		tay				tay
.1392	68		pla				pla
.1393	60		rts				rts

;******  Return to file: device/device.asm

.1394					deviceHandler:
.1394	7c 97 13	jmp ($1397,x)			jmp 	(deviceVectors,x)
.1397					deviceVectors:
>1397	60 12					.word X16Break             ; index 0
>1399	e3 12					.word IOClearScreen        ; index 2
>139b	eb 12					.word IONewLine            ; index 4
>139d	d0 12					.word IOInitialise         ; index 6
>139f	27 13					.word IOInk                ; index 8
>13a1	09 13					.word IOInkey              ; index 10
>13a3	67 13					.word IOInput              ; index 12
>13a5	97 12					.word ExternLoad           ; index 14
>13a7	4d 13					.word IOLocate             ; index 16
>13a9	3b 13					.word IOPaper              ; index 18
>13ab	fb 12					.word IOPrintChar          ; index 20
>13ad	fb 12					.word IOPrintAscii         ; index 22
>13af	6b 12					.word ExternSave           ; index 24
>13b1	f3 12					.word IOTab                ; index 26
>13b3	8c 13					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.13b5					section_end_device:
.13b5					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.13b5					ErrorHandler:
.13b5	8a		txa				txa
.13b6	48		pha				pha
.13b7	a9 01		lda #$01			lda 	#1 							; red
.13b9	a2 08		ldx #$08		ldx	#8
.13bb	20 94 13	jsr $1394		jsr	deviceHandler
.13be	68		pla				pla
.13bf	aa		tax				tax
.13c0	a9 2b		lda #$2b			lda 	#(ErrorTextList) & $FF
.13c2	85 2a		sta $2a				sta 	temp0
.13c4	a9 14		lda #$14			lda 	#(ErrorTextList) >> 8
.13c6	85 2b		sta $2b				sta 	1+(temp0)
.13c8	ca		dex		_EHFind:dex									; errors start at 1
.13c9	f0 10		beq $13db			beq 	_EHFound
.13cb	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.13cd	38		sec				sec
.13ce	a5 2a		lda $2a				lda 	temp0
.13d0	71 2a		adc ($2a),y			adc 	(temp0),y
.13d2	85 2a		sta $2a				sta 	temp0
.13d4	90 f2		bcc $13c8			bcc 	_EHFind
.13d6	e6 2b		inc $2b				inc 	temp0+1
.13d8	4c c8 13	jmp $13c8			jmp 	_EHFind
.13db					_EHFound:
.13db	20 8d 16	jsr $168d			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.13de	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.13e0	b1 28		lda ($28),y			lda 	(codePtr),y
.13e2	f0 39		beq $141d			beq 	_EHNoLine
.13e4	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.13e6	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.13e9	90 32		bcc $141d			bcc 	_EHNoLine
.13eb	a9 27		lda #$27			lda 	#(EHAtMsg) & $FF
.13ed	85 2a		sta $2a				sta 	temp0
.13ef	a9 14		lda #$14			lda 	#(EHAtMsg) >> 8
.13f1	85 2b		sta $2b				sta 	1+(temp0)
.13f3	20 8d 16	jsr $168d			jsr 	EHPrintAscii
.13f6	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.13f8	a2 00		ldx #$00			ldx 	#0
.13fa	b1 28		lda ($28),y			lda 	(codePtr),y
.13fc	95 48		sta $48,x			sta 	esInt0,x
.13fe	c8		iny				iny
.13ff	b1 28		lda ($28),y			lda 	(codePtr),y
.1401	95 50		sta $50,x			sta 	esInt1,x
.1403	a9 00		lda #$00			lda 	#0
.1405	95 58		sta $58,x			sta 	esInt2,x
.1407	95 60		sta $60,x			sta 	esInt3,x
.1409	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.140b	85 2a		sta $2a				sta 	temp0
.140d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.140f	85 2b		sta $2b				sta 	1+(temp0)
.1411	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1413	a9 00		lda #$00			lda 	#0							; stack position zero.
.1415	a2 0c		ldx #$0c		ldx	#12
.1417	20 1e 30	jsr $301e		jsr	mainHandler
.141a	20 8d 16	jsr $168d			jsr 	EHPrintAscii
.141d					_EHNoLine:
.141d	a2 04		ldx #$04		ldx	#4
.141f	20 94 13	jsr $1394		jsr	deviceHandler
.1422	a2 02		ldx #$02		ldx	#2
.1424	20 93 19	jsr $1993		jsr	interactionHandler
.1427					EHAtMsg:
>1427	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.142b					ErrorTextList:
>142b	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1433	20 6e 6f 74 20 50 72 65 73 65 6e 74
>143f	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1447	45 72 72 6f 72
>144c	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>1454	64 69 73 61 62 6c 65 64
>145c	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>1464	6f 6e 20 66 61 69 6c 65 64
>146d	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>1475	42 79 20 5a 65 72 6f
>147c	04 53 74 6f 70				.text 4,"Stop"
>1481	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1489	73 6d 61 74 63 68
>148f	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1497	20 56 61 6c 75 65
>149d	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>14a5	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>14b3	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>14bb	20 63 6f 6d 6d 61
>14c1	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>14c9	20 72 65 66 65 72 65 6e 63 65
>14d3	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>14db	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>14e9	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>14f1	74 6f 6f 20 6c 6f 6e 67
>14f9	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1501	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>150e	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1516	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1523	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>152b	74 68 6f 75 74 20 46 4f 52
>1534	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>153c	74 68 6f 75 74 20 57 48 49 4c 45
>1547	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>154f	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>155c	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>1564	54 20 69 6e 64 65 78
>156b	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>1573	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>1583	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>158b	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>159a	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>15a2	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>15b2	63 65
>15b4	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>15bc	20 50 72 6f 63 65 64 75 72 65
>15c6	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>15ce	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>15de	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>15e6	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>15f4	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>15fc	75 69 72 65 73 20 61 72 72 61 79
>1607	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>160f	61 79 20 69 6e 64 65 78
>1617	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>161f	64 61 74 61
>1623	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>162b	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1638	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>1640	69 6c 65 64
>1644	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>164c	69 6c 65 64
>1650	05 42 72 65 61 6b			.text 5,"Break"
>1656	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>165e	6d 65 6d 6f 72 79
>1664	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>166c	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>167b	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1683	72 61 6e 64 2f 4d 6f 64 65
>168c	00					.byte 0

;******  Return to file: error/errorhandler.asm

.168d					EHPrintAscii:
.168d	a0 00		ldy #$00			ldy 	#0
.168f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1691	aa		tax				tax
.1692	f0 0f		beq $16a3			beq 	_EHPExit
.1694					_EHPLoop:
.1694	c8		iny				iny
.1695	8a		txa				txa
.1696	48		pha				pha
.1697	b1 2a		lda ($2a),y			lda 	(temp0),y
.1699	a2 16		ldx #$16		ldx	#22
.169b	20 94 13	jsr $1394		jsr	deviceHandler
.169e	68		pla				pla
.169f	aa		tax				tax
.16a0	ca		dex				dex
.16a1	d0 f1		bne $1694			bne 	_EHPLoop
.16a3					_EHPExit:
.16a3	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.16a4					section_end_error:
.16a4					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.16a4					ExtensionHandler:
.16a4	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.16a6	d0 08		bne $16b0			bne 	_ExtensionUnary 			; is passed in A.
.16a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.16aa	c8		iny				iny
.16ab	0a		asl a				asl 	a
.16ac	aa		tax				tax
.16ad	7c ae 16	jmp ($16ae,x)			jmp 	(Group2Vectors-12,x)
.16b0					_ExtensionUnary:
.16b0	48		pha				pha 								; save stack pos in A
.16b1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.16b3	c8		iny				iny
.16b4	0a		asl a				asl 	a
.16b5	aa		tax				tax
.16b6	68		pla				pla 								; restore stack pos and call group3 command.
.16b7	7c b4 16	jmp ($16b4,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.16ba					Group2Vectors:
>16ba	ef 16					.word	Command_VPoke            ; $86 vpoke
>16bc	f2 16					.word	Command_VDoke            ; $87 vdoke
>16be	cc 16					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.16c0					Group3Vectors:
>16c0	33 17					.word	Command_VPeek            ; $86 vpeek(
>16c2	36 17					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.16c4					XEvaluateInteger:
.16c4	8a		txa				txa
.16c5	a2 06		ldx #$06		ldx	#6
.16c7	20 1e 30	jsr $301e		jsr	mainHandler
.16ca	aa		tax				tax
.16cb	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.16cc					Command_VLoad:
.16cc	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.16ce	20 18 29	jsr $2918			jsr 	EvaluateString
.16d1	e8		inx				inx
.16d2	20 b4 2e	jsr $2eb4			jsr 	MInt32False
.16d5	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.16d7	95 48		sta $48,x			sta 	esInt0,x
.16d9	a5 36		lda $36				lda 	lowMemory+1
.16db	95 50		sta $50,x			sta 	esInt1,x
.16dd	ca		dex				dex
.16de	a2 0e		ldx #$0e		ldx	#14
.16e0	20 94 13	jsr $1394		jsr	deviceHandler
.16e3	a5 49		lda $49				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.16e5	85 2a		sta $2a				sta 	temp0
.16e7	a5 51		lda $51				lda 	esInt1+1
.16e9	85 2b		sta $2b				sta 	temp0+1
.16eb	20 54 17	jsr $1754			jsr 	LoadVRAMFile 					; load the VRAM file in.
.16ee	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.16ef					Command_VPoke:
.16ef	38		sec				sec 						; one byte , CS
.16f0	b0 01		bcs $16f3			bcs 	CmdVideoWrite
.16f2					Command_VDoke:
.16f2	18		clc				clc 						; two bytes, CC
.16f3					CmdVideoWrite:
.16f3	08		php				php 						; save one or two btes
.16f4	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.16f6	20 c4 16	jsr $16c4			jsr 	XEvaluateInteger
.16f9	20 34 2f	jsr $2f34			jsr 	CheckComma
.16fc	e8		inx				inx
.16fd	20 c4 16	jsr $16c4			jsr 	XEvaluateInteger
.1700	ca		dex				dex
.1701	20 12 17	jsr $1712			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1704	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.1706	8d 23 9f	sta $9f23			sta 	$9F23
.1709	28		plp				plp 						; if it was Poke then exit
.170a	b0 05		bcs $1711			bcs 	_CVWExit
.170c	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.170e	8d 23 9f	sta $9f23			sta 	$9F23
.1711					_CVWExit:
.1711	60		rts				rts
.1712					SetUpTOSVRamAddress:
.1712	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1714	29 01		and #$01			and 	#1
.1716	15 60		ora $60,x			ora 	esInt3,x
.1718	d0 14		bne $172e			bne 	CVWValue
.171a	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.171c	8d 20 9f	sta $9f20			sta 	$9F20
.171f	b5 50		lda $50,x			lda 	esInt1,x
.1721	8d 21 9f	sta $9f21			sta	 	$9F21
.1724	b5 58		lda $58,x			lda 	esInt2,x
.1726	29 01		and #$01			and 	#1
.1728	09 10		ora #$10			ora 	#$10 				; step 1.
.172a	8d 22 9f	sta $9f22			sta 	$9F22
.172d	60		rts				rts
.172e					CVWValue:
.172e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1730	20 b5 13	jsr $13b5		jsr	errorHandler
.1733					Command_VPeek:
.1733	38		sec				sec 						; one byte , CS
.1734	b0 01		bcs $1737			bcs 	CmdVideoRead
.1736					Command_VDeek:
.1736	18		clc				clc 						; two bytes, CC
.1737					CmdVideoRead:
.1737	08		php				php 						; save action on stack.
.1738	aa		tax				tax 						; save stack position
.1739	20 c4 16	jsr $16c4			jsr 	XEvaluateInteger 	; address
.173c	20 27 2f	jsr $2f27			jsr 	CheckRightParen 	; closing right bracket.
.173f	20 12 17	jsr $1712			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1742	20 b4 2e	jsr $2eb4			jsr 	MInt32False 		; zero return.
.1745	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1748	95 48		sta $48,x			sta 	esInt0,x
.174a	28		plp				plp 						; check if DOKE (carry was clear)
.174b	b0 05		bcs $1752			bcs 	_CVRExit
.174d	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1750	95 50		sta $50,x			sta 	esInt1,x
.1752					_CVRExit:
.1752	8a		txa				txa 						; return X position.
.1753	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be6					compressMode:
>0be6							.fill 	1
.1754					LoadVRAMFile:
.1754					_LVRLoop:
.1754	20 a4 17	jsr $17a4			jsr 	LVFGet 						; get the next (never access direct)
.1757	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1759	f0 3a		beq $1795			beq 	_LVRExit
.175b	b0 39		bcs $1796			bcs 	_LVRLoad 					; load data in ?
.175d	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.175f	90 09		bcc $176a			bcc 	_LVRSetAddress
.1761	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1763	90 29		bcc $178e			bcc 	_LVRSetCompress
.1765	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1767	20 b5 13	jsr $13b5		jsr	errorHandler
.176a					_LVRSetAddress:
.176a	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.176c	20 a4 17	jsr $17a4			jsr 	LVFGet
.176f	85 2c		sta $2c				sta 	temp1
.1771	a9 00		lda #$00			lda 	#0
.1773	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1775	66 2c		ror $2c				ror 	temp1
.1777	6a		ror a				ror		a
.1778	46 2d		lsr $2d				lsr 	temp1+1
.177a	66 2c		ror $2c				ror 	temp1
.177c	6a		ror a				ror		a
.177d	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1780	a5 2c		lda $2c				lda 	temp1
.1782	8d 21 9f	sta $9f21			sta 	$9F21
.1785	a5 2d		lda $2d				lda 	temp1+1
.1787	09 10		ora #$10			ora 	#$10
.1789	8d 22 9f	sta $9f22			sta 	$9F22
.178c	d0 c6		bne $1754			bne 	_LVRLoop
.178e					_LVRSetCompress:
.178e	29 07		and #$07			and 	#7
.1790	8d e6 0b	sta $0be6			sta 	compressMode
.1793	10 bf		bpl $1754			bpl 	_LVRLoop
.1795					_LVRExit:
.1795	60		rts				rts
.1796					_LVRLoad:
.1796	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1798	aa		tax				tax
.1799					_LVRLCopy:
.1799	20 a4 17	jsr $17a4			jsr 	LVFGet 						; write to data.
.179c	8d 23 9f	sta $9f23			sta 	$9F23
.179f	ca		dex				dex
.17a0	d0 f7		bne $1799			bne 	_LVRLCopy
.17a2	f0 b0		beq $1754			beq 	_LVRLoop
.17a4	84 32		sty $32		LVFGet:	sty 	tempShort
.17a6	a0 00		ldy #$00			ldy 	#0
.17a8	b1 2a		lda ($2a),y			lda 	(temp0),y
.17aa	a4 32		ldy $32				ldy	 	tempShort
.17ac	e6 2a		inc $2a				inc 	temp0
.17ae	d0 02		bne $17b2			bne 	_LVFGExit
.17b0	e6 2b		inc $2b				inc 	temp0+1
.17b2					_LVFGExit:
.17b2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.17b3					section_end_extension:
.17b3					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.17b3					floatingpointHandler:
.17b3	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.17b5	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: basic.asm

.17b8					section_end_floatingpoint:
.17b8					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.17b8					ColdStartEntry:
.17b8	a2 ff		ldx #$ff			ldx 	#$FF
.17ba	9a		txs				txs
.17bb	a2 02		ldx #$02		ldx	#2
.17bd	20 94 13	jsr $1394		jsr	deviceHandler
.17c0	a0 ff		ldy #$ff			ldy 	#255
.17c2					_CSBanner:
.17c2	c8		iny				iny
.17c3	b9 e9 17	lda $17e9,y			lda 	Intro,y
.17c6	f0 14		beq $17dc			beq 	_CSStart
.17c8	c9 08		cmp #$08			cmp 	#8
.17ca	90 08		bcc $17d4			bcc 	_CSInk
.17cc	a2 16		ldx #$16		ldx	#22
.17ce	20 94 13	jsr $1394		jsr	deviceHandler
.17d1	4c c2 17	jmp $17c2			jmp 	_CSBanner
.17d4					_CSInk:
.17d4	a2 08		ldx #$08		ldx	#8
.17d6	20 94 13	jsr $1394		jsr	deviceHandler
.17d9	4c c2 17	jmp $17c2			jmp 	_CSBanner
.17dc					_CSStart:
.17dc	a2 10		ldx #$10		ldx	#16
.17de	20 1e 30	jsr $301e		jsr	mainHandler
.17e1	a2 02		ldx #$02		ldx	#2
.17e3	20 1e 30	jsr $301e		jsr	mainHandler
.17e6	4c fd 18	jmp $18fd			jmp 	WarmStartEntry
>17e9	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>17f1	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1801	20 2a 2a 2a 0d 0d
>1807	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>180f	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>181f	32 30 32 31 0d 0d
>1825	02 42 61 73 69 63 20				.text 	2,"Basic "
>182c	30 2e 31 35					.text "0.15"
>1830	20 28						.text 	" ("
>1832	31 35 2d 4d 61 72 2d 32				.text "15-Mar-21"
>183a	31
>183b	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.183f					DeleteLine:
.183f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1842	85 2a		sta $2a				sta 	temp0
.1844	ad c9 0a	lda $0ac9			lda 	basePage+1
.1847	85 2b		sta $2b				sta 	temp0+1
.1849	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.184b	a5 48		lda $48				lda 	esInt0
.184d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.184f	d0 07		bne $1858			bne 	_DLNext
.1851	c8		iny				iny
.1852	a5 50		lda $50				lda 	esInt1
.1854	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1856	f0 0a		beq $1862			beq 	_DLFound
.1858	20 80 18	jsr $1880	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.185b	d0 ec		bne $1849			bne 	_DLLoop
.185d	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.185f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1861	60		rts				rts
.1862					_DLFound:
.1862	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.1864	b1 2a		lda ($2a),y			lda 	(temp0),y
.1866	a8		tay				tay
.1867	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1869					_DLCopyDown:
.1869	b1 2a		lda ($2a),y			lda 	(temp0),y
.186b	81 2a		sta ($2a,x)			sta 	(temp0,x)
.186d	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.186f	d0 02		bne $1873			bne 	_DLNoCarry
.1871	e6 2b		inc $2b				inc 	temp0+1
.1873					_DLNoCarry:
.1873	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1875	c5 35		cmp $35				cmp 	lowMemory
.1877	d0 f0		bne $1869			bne 	_DLCopyDown
.1879	a5 2b		lda $2b				lda 	temp0+1
.187b	c5 36		cmp $36				cmp 	lowMemory+1
.187d	d0 ea		bne $1869			bne 	_DLCopyDown
.187f	60		rts				rts
.1880					IAdvanceTemp0:
.1880	84 32		sty $32				sty 	tempShort
.1882	18		clc				clc
.1883	a0 00		ldy #$00			ldy 	#0
.1885	b1 2a		lda ($2a),y			lda 	(temp0),y
.1887	65 2a		adc $2a				adc 	temp0
.1889	85 2a		sta $2a				sta 	temp0
.188b	90 02		bcc $188f			bcc 	_IATNoCarry
.188d	e6 2b		inc $2b				inc 	temp0+1
.188f					_IATNoCarry:
.188f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1891	a4 32		ldy $32				ldy 	tempShort
.1893	c9 00		cmp #$00			cmp		#0
.1895	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1896					InsertLine:
.1896	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1899	85 2a		sta $2a				sta 	temp0
.189b	ad c9 0a	lda $0ac9			lda 	basePage+1
.189e	85 2b		sta $2b				sta 	temp0+1
.18a0					_ILLoop:
.18a0	a0 01		ldy #$01			ldy 	#1
.18a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.18a4	c5 48		cmp $48				cmp 	esInt0
.18a6	c8		iny				iny
.18a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.18a9	e5 50		sbc $50				sbc 	esInt1
.18ab	b0 05		bcs $18b2			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.18ad	20 80 18	jsr $1880			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.18b0	d0 ee		bne $18a0			bne 	_ILLoop
.18b2					_ILFound:
.18b2	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.18b4	85 2c		sta $2c				sta 	temp1
.18b6	a5 36		lda $36				lda 	lowMemory+1
.18b8	85 2d		sta $2d				sta 	temp1+1
.18ba	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.18bd	18		clc				clc
.18be	69 03		adc #$03			adc 	#3
.18c0	a8		tay				tay
.18c1	a2 00		ldx #$00			ldx 	#0
.18c3	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.18c5	91 2c		sta ($2c),y			sta 	(temp1),y
.18c7	a5 2c		lda $2c				lda 	temp1
.18c9	c5 2a		cmp $2a				cmp 	temp0
.18cb	d0 06		bne $18d3			bne 	_ILMNext
.18cd	a5 2d		lda $2d				lda 	temp1+1
.18cf	c5 2b		cmp $2b				cmp 	temp0+1
.18d1	f0 0b		beq $18de			beq 	_ILMCopy
.18d3					_ILMNext:
.18d3	a5 2c		lda $2c				lda 	temp1
.18d5	d0 02		bne $18d9			bne 	_ILNoBorrow
.18d7	c6 2d		dec $2d				dec 	temp1+1
.18d9					_ILNoBorrow:
.18d9	c6 2c		dec $2c				dec 	temp1
.18db	4c c3 18	jmp $18c3			jmp 	_ILMove
.18de					_ILMCopy:
.18de	98		tya				tya 								; Y is the offset of the new line.
.18df	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.18e1	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.18e3	a5 48		lda $48				lda 	esInt0
.18e5	91 2a		sta ($2a),y			sta 	(temp0),y
.18e7	c8		iny				iny
.18e8	a5 50		lda $50				lda 	esInt1
.18ea	91 2a		sta ($2a),y			sta 	(temp0),y
.18ec	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.18ee					_ILMCopy2:
.18ee	b1 28		lda ($28),y			lda 	(codePtr),y
.18f0	c8		iny				iny
.18f1	c8		iny				iny
.18f2	c8		iny				iny
.18f3	91 2a		sta ($2a),y			sta 	(temp0),y
.18f5	88		dey				dey
.18f6	88		dey				dey
.18f7	cc 24 0d	cpy $0d24			cpy 	tokenBufferIndex
.18fa	d0 f2		bne $18ee			bne 	_ILMCopy2
.18fc	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.18fd					WarmStartEntry:
.18fd	a2 ff		ldx #$ff			ldx 	#$FF
.18ff	9a		txs				txs
.1900	a9 02		lda #$02			lda 	#2							; green text.
.1902	a2 08		ldx #$08		ldx	#8
.1904	20 94 13	jsr $1394		jsr	deviceHandler
.1907	a2 0c		ldx #$0c		ldx	#12
.1909	20 94 13	jsr $1394		jsr	deviceHandler
.190c	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.190e	85 28		sta $28				sta 	codePtr
.1910	a5 2b		lda $2b				lda 	temp0+1
.1912	85 29		sta $29				sta 	codePtr+1
.1914	a2 04		ldx #$04		ldx	#4
.1916	20 94 13	jsr $1394		jsr	deviceHandler
.1919	a2 06		ldx #$06		ldx	#6
.191b	20 c9 3a	jsr $3ac9		jsr	tokeniserHandler
.191e	90 25		bcc $1945			bcc 	WSEError 					; failed.
.1920	a9 21		lda #$21			lda 	#(tokenHeader) & $FF
.1922	85 28		sta $28				sta 	codePtr
.1924	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1926	85 29		sta $29				sta 	1+(codePtr)
.1928	ad 24 0c	lda $0c24			lda 	tokenBuffer 				; is it a blank line, go get another line.
.192b	c9 80		cmp #$80			cmp 	#$80
.192d	f0 ce		beq $18fd			beq 	WarmStartEntry
.192f	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1931	c9 40		cmp #$40			cmp 	#$40
.1933	f0 15		beq $194a			beq 	HasLineNumber
.1935	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1937	8d 21 0c	sta $0c21			sta 	tokenHeader 				; fake program line.
.193a	8d 22 0c	sta $0c22			sta 	tokenHeader+1
.193d	8d 23 0c	sta $0c23			sta 	tokenHeader+2
.1940	a2 12		ldx #$12		ldx	#18
.1942	20 1e 30	jsr $301e		jsr	mainHandler
.1945					WSEError:
.1945	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1947	20 b5 13	jsr $13b5		jsr	errorHandler
.194a					HasLineNumber:
.194a	a0 03		ldy #$03			ldy 	#3 							; get line number
.194c	a9 00		lda #$00			lda 	#0
.194e	a2 06		ldx #$06		ldx	#6
.1950	20 1e 30	jsr $301e		jsr	mainHandler
.1953	a5 58		lda $58				lda 	esInt2		 				; check in range.
.1955	05 60		ora $60				ora 	esInt3
.1957	d0 ec		bne $1945			bne 	WSEError
.1959	98		tya				tya 								; make codePtr point to code after the line number.
.195a	18		clc				clc
.195b	65 28		adc $28				adc 	codePtr
.195d	85 28		sta $28				sta 	codePtr
.195f	90 02		bcc $1963			bcc		_HLNNoCarry
.1961	e6 29		inc $29				inc 	codePtr+1
.1963					_HLNNoCarry:
.1963	98		tya				tya 								; subtract that offset from the code buffer index
.1964	38		sec				sec
.1965	49 ff		eor #$ff			eor 	#$FF
.1967	6d 24 0d	adc $0d24			adc 	tokenBufferIndex
.196a	18		clc				clc 								; add space allowing for header & $80 trailer
.196b	69 04		adc #$04			adc 	#4
.196d	8d 24 0d	sta $0d24			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1970	20 3f 18	jsr $183f			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1973					_HLNNoDelete:
.1973	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1976	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1978	f0 0c		beq $1986			beq 	_HLMEditDone
.197a	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.197c	18		clc				clc 								; workspace (1k)
.197d	69 04		adc #$04			adc 	#4
.197f	c5 34		cmp $34				cmp 	highMemory+1
.1981	b0 0b		bcs $198e			bcs 	_HLMMemory
.1983	20 96 18	jsr $1896			jsr 	InsertLine 					; insert the line in
.1986					_HLMEditDone:
.1986	a2 02		ldx #$02		ldx	#2
.1988	20 1e 30	jsr $301e		jsr	mainHandler
.198b	4c fd 18	jmp $18fd			jmp 	WarmStartEntry
.198e					_HLMMemory:
.198e	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.1990	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1993					interactionHandler:
.1993	7c 96 19	jmp ($1996,x)			jmp 	(interactionVectors,x)
.1996					interactionVectors:
>1996	b8 17					.word ColdStartEntry       ; index 0
>1998	fd 18					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.199a					section_end_interaction:
.199a					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.199a					Command_Assert:
.199a	20 21 29	jsr $2921			jsr 	EvaluateRootInteger 		; what is being asserted.
.199d	20 db 2e	jsr $2edb			jsr 	MInt32Zero 					; is it true ?
.19a0	f0 01		beq $19a3			beq 	_CAError
.19a2	60		rts				rts
.19a3					_CAError:
.19a3	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.19a5	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.19a8					CommandClear:
.19a8					XCommandClear:
.19a8	98		tya				tya
.19a9	48		pha				pha
.19aa	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.19ad	85 33		sta $33				sta 	highMemory
.19af	ad cd 0a	lda $0acd			lda 	endMemory+1
.19b2	85 34		sta $34				sta 	highMemory+1
.19b4	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.19b7	85 2a		sta $2a				sta 	temp0
.19b9	ad c9 0a	lda $0ac9			lda 	basePage+1
.19bc	85 2b		sta $2b				sta 	temp0+1
.19be					_CCFindEnd:
.19be	a0 00		ldy #$00			ldy 	#0
.19c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.19c2	f0 0c		beq $19d0			beq 	_CCFoundEnd 				; offset zero is end.
.19c4	18		clc				clc
.19c5	65 2a		adc $2a				adc 	temp0 						; move to next line
.19c7	85 2a		sta $2a				sta 	temp0
.19c9	90 f3		bcc $19be			bcc 	_CCFindEnd
.19cb	e6 2b		inc $2b				inc 	temp0+1
.19cd	4c be 19	jmp $19be			jmp 	_CCFindEnd
.19d0					_CCFoundEnd:
.19d0	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.19d2	85 35		sta $35				sta 	lowMemory
.19d4	a5 2b		lda $2b				lda 	temp0+1
.19d6	85 36		sta $36				sta 	lowMemory+1
.19d8	18		clc				clc 								; put temp0+1 in endProgram
.19d9	a5 2a		lda $2a				lda 	temp0
.19db	69 01		adc #$01			adc 	#1
.19dd	8d ca 0a	sta $0aca			sta 	endProgram
.19e0	a5 2b		lda $2b				lda 	temp0+1
.19e2	69 00		adc #$00			adc 	#0
.19e4	8d cb 0a	sta $0acb			sta 	endProgram+1
.19e7	18		clc				clc 								; put a bit of space in.
.19e8	a5 35		lda $35				lda 	lowMemory
.19ea	69 04		adc #$04			adc 	#4
.19ec	85 35		sta $35				sta 	lowMemory
.19ee	90 02		bcc $19f2			bcc 	_CCNoCarry
.19f0	e6 36		inc $36				inc 	lowMemory+1
.19f2					_CCNoCarry:
.19f2	20 bd 2f	jsr $2fbd			jsr 	RSReset 					; reset the return stack.
.19f5	a2 04		ldx #$04		ldx	#4
.19f7	20 d8 3d	jsr $3dd8		jsr	variableHandler
.19fa	20 ce 22	jsr $22ce			jsr 	ScanProc 					; scan for procedures
.19fd	20 68 20	jsr $2068			jsr 	CommandRestore 				; do a restore
.1a00	68		pla				pla
.1a01	a8		tay				tay
.1a02	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1a03					Command_Dim:
.1a03	a2 02		ldx #$02		ldx	#2
.1a05	20 d8 3d	jsr $3dd8		jsr	variableHandler
.1a08	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1a0a	c8		iny				iny
.1a0b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1a0d	f0 f4		beq $1a03			beq 	Command_Dim
.1a0f	88		dey				dey 								; unpick get
.1a10	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.1a11					Command_FOR:
.1a11	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1a13	a2 0b		ldx #$0b			ldx 	#11
.1a15	20 cb 2f	jsr $2fcb			jsr 	RSClaim
.1a18	20 12 1c	jsr $1c12			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1a1b	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1a1d	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1a1f	d0 4c		bne $1a6d			bne 	_CFType
.1a21	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1a23	20 1c 2f	jsr $2f1c			jsr 	CheckToken
.1a26	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1a28	20 23 29	jsr $2923			jsr 	EvaluateInteger				; get terminal value in stack 1
.1a2b	98		tya				tya
.1a2c	48		pha				pha
.1a2d	a0 04		ldy #$04			ldy 	#4
.1a2f	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1a31	91 37		sta ($37),y			sta 	(rsPointer),y
.1a33	c8		iny				iny
.1a34	a5 50		lda $50				lda		esInt1
.1a36	91 37		sta ($37),y			sta 	(rsPointer),y
.1a38	c8		iny				iny
.1a39	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1a3b	91 37		sta ($37),y			sta 	(rsPointer),y
.1a3d	c8		iny				iny
.1a3e	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1a40	91 37		sta ($37),y			sta 	(rsPointer),y
.1a42	c8		iny				iny
.1a43	a5 51		lda $51				lda		esInt1+1
.1a45	91 37		sta ($37),y			sta 	(rsPointer),y
.1a47	c8		iny				iny
.1a48	a5 59		lda $59				lda		esInt2+1
.1a4a	91 37		sta ($37),y			sta 	(rsPointer),y
.1a4c	c8		iny				iny
.1a4d	a5 61		lda $61				lda		esInt3+1
.1a4f	91 37		sta ($37),y			sta 	(rsPointer),y
.1a51	68		pla				pla
.1a52	a8		tay				tay
.1a53	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1a55	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1a57	d0 0e		bne $1a67			bne 	_CFDone
.1a59	c8		iny				iny									; skip over step.
.1a5a	20 23 29	jsr $2923			jsr 	EvaluateInteger 			; get step
.1a5d	98		tya				tya
.1a5e	48		pha				pha
.1a5f	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1a61	a0 06		ldy #$06			ldy 	#6
.1a63	91 37		sta ($37),y			sta 	(rsPointer),y
.1a65	68		pla				pla
.1a66	a8		tay				tay
.1a67					_CFDone:
.1a67	a9 01		lda #$01			lda 	#1
.1a69	20 f7 2f	jsr $2ff7			jsr 	RSSavePosition 				; save position.
.1a6c	60		rts				rts
.1a6d					_CFType:
.1a6d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a6f	20 b5 13	jsr $13b5		jsr	errorHandler
.1a72					Command_NEXT:
.1a72	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1a74	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1a76	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1a78	f0 05		beq $1a7f			beq 	_isok
.1a7a	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1a7c	20 b5 13	jsr $13b5		jsr	errorHandler
.1a7f					_isok:
.1a7f	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1a81	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1a83	b0 18		bcs $1a9d			bcs 	_CNNoIndex
.1a85	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1a87	20 56 29	jsr $2956			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1a8a	98		tya				tya
.1a8b	48		pha				pha
.1a8c	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1a8e	b1 37		lda ($37),y			lda 	(rsPointer),y
.1a90	d5 48		cmp $48,x			cmp 	esInt0,x
.1a92	d0 76		bne $1b0a			bne 	_CNBadIndex
.1a94	c8		iny				iny
.1a95	b1 37		lda ($37),y			lda 	(rsPointer),y
.1a97	d5 50		cmp $50,x			cmp 	esInt1,x
.1a99	d0 6f		bne $1b0a			bne 	_CNBadIndex
.1a9b	68		pla				pla
.1a9c	a8		tay				tay
.1a9d					_CNNoIndex:
.1a9d	98		tya				tya
.1a9e	48		pha				pha
.1a9f	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1aa1	b1 37		lda ($37),y			lda 	(rsPointer),y
.1aa3	85 2a		sta $2a				sta 	temp0
.1aa5	c8		iny				iny
.1aa6	b1 37		lda ($37),y			lda 	(rsPointer),y
.1aa8	85 2b		sta $2b				sta 	temp0+1
.1aaa	c8		iny				iny
.1aab	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1aad	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1aaf	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1ab1	10 01		bpl $1ab4			bpl 	_CNSignX
.1ab3	ca		dex				dex  								; X = $FF
.1ab4					_CNSignX:
.1ab4	18		clc				clc 								; add to the LSB
.1ab5	a0 00		ldy #$00			ldy 	#0
.1ab7	71 2a		adc ($2a),y			adc 	(temp0),y
.1ab9	91 2a		sta ($2a),y			sta 	(temp0),y
.1abb					_CNPropogate:
.1abb	c8		iny				iny  								; add the sign extended in X to the rest.
.1abc	8a		txa				txa
.1abd	71 2a		adc ($2a),y			adc 	(temp0),y
.1abf	91 2a		sta ($2a),y			sta 	(temp0),y
.1ac1	c8		iny				iny
.1ac2	8a		txa				txa
.1ac3	71 2a		adc ($2a),y			adc 	(temp0),y
.1ac5	91 2a		sta ($2a),y			sta 	(temp0),y
.1ac7	c8		iny				iny
.1ac8	8a		txa				txa
.1ac9	71 2a		adc ($2a),y			adc 	(temp0),y
.1acb	91 2a		sta ($2a),y			sta 	(temp0),y
.1acd	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1ace	a5 37		lda $37				lda 	rsPointer
.1ad0	69 07		adc #$07			adc 	#7
.1ad2	85 2c		sta $2c				sta 	temp1
.1ad4	a9 00		lda #$00			lda 	#0
.1ad6	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1ad8	a8		tay				tay 								; and clear the Y register again.
.1ad9	65 38		adc $38				adc 	rsPointer+1
.1adb	85 2d		sta $2d				sta 	temp1+1
.1add	38		sec				sec 								; calculate current - limit oring interim values.
.1ade	20 16 1b	jsr $1b16			jsr 	_CNCompare 					; each of these does a byte.
.1ae1	20 16 1b	jsr $1b16			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.1ae4	20 16 1b	jsr $1b16			jsr 	_CNCompare 					; and the carry of the subtraction.
.1ae7	20 16 1b	jsr $1b16			jsr 	_CNCompare
.1aea	50 02		bvc $1aee			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1aec	49 80		eor #$80			eor 	#$80
.1aee					_CNNoOverflow:
.1aee	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.1af0	30 1d		bmi $1b0f			bmi 	_CNCheckDownto
.1af2	c9 00		cmp #$00			cmp 	#0
.1af4	30 0c		bmi $1b02			bmi 	_CNLoopRound 				; loop round if < =
.1af6	a5 2e		lda $2e				lda 	temp2
.1af8	f0 08		beq $1b02			beq 	_CNLoopRound
.1afa					_CNLoopExit:
.1afa	68		pla				pla
.1afb	a8		tay				tay
.1afc	a9 0b		lda #$0b			lda 	#11
.1afe	20 ed 2f	jsr $2fed			jsr 	RSFree
.1b01	60		rts				rts
.1b02					_CNLoopRound:
.1b02	68		pla				pla
.1b03	a8		tay				tay
.1b04	a9 01		lda #$01			lda 	#1
.1b06	20 0a 30	jsr $300a			jsr 	RSLoadPosition				; go back to the loop top
.1b09	60		rts				rts
.1b0a					_CNBadIndex:
.1b0a	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.1b0c	20 b5 13	jsr $13b5		jsr	errorHandler
.1b0f					_CNCheckDownto:
.1b0f	c9 00		cmp #$00			cmp 	#0
.1b11	10 ef		bpl $1b02			bpl 	_CNLoopRound
.1b13	4c fa 1a	jmp $1afa			jmp 	_CNLoopExit
.1b16					_CNCompare:
.1b16	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1b18	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1b1a	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1b1c	85 2e		sta $2e				sta 	temp2
.1b1e	c8		iny				iny
.1b1f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1b20					CommandIf:
.1b20	20 21 29	jsr $2921			jsr 	EvaluateRootInteger 		; get what's being tested.
.1b23	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1b25	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1b27	f0 04		beq $1b2d			beq 	_IfSimple
.1b29	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1b2b	d0 1b		bne $1b48			bne 	_IfComplex
.1b2d					_IfSimple:
.1b2d	20 db 2e	jsr $2edb			jsr 	MInt32Zero					; check if TOS zero
.1b30	f0 10		beq $1b42			beq 	_IfEOL 						; go to next line.
.1b32	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1b34	c8		iny				iny
.1b35	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1b37	f0 0c		beq $1b45			beq 	_IfGoto 					; do the Goto code
.1b39	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1b3b	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1b3d	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1b3f	f0 04		beq $1b45			beq 	_IfGoto
.1b41	60		rts				rts 								; else continue on this line.
.1b42					_IfEOL:
.1b42	4c 43 23	jmp $2343			jmp 	AdvanceNextLine 			; go to next line
.1b45					_IfGoto:
.1b45	4c b8 23	jmp $23b8			jmp 	CommandGoto
.1b48					_IfComplex:
.1b48	20 db 2e	jsr $2edb			jsr 	MInt32Zero 					; is it true ?
.1b4b	f0 01		beq $1b4e			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1b4d	60		rts				rts 								; else continue.
.1b4e					_IFSkip:
.1b4e	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1b50	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1b52	4c 41 2f	jmp $2f41			jmp		ScanForward
.1b55					Command_ELSE:
.1b55	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1b57	8a		txa				txa
.1b58	4c 41 2f	jmp $2f41			jmp		ScanForward
.1b5b					Command_ENDIF:
.1b5b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be7					InputBuffer:
>0be7							.fill 	MaxInputSize+1
.1b5c					Command_Input:
.1b5c	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1b5e	c8		iny				iny
.1b5f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1b61	f0 f9		beq $1b5c			beq 	Command_Input
.1b63	88		dey				dey 							; undo consume
.1b64	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1b66	f0 54		beq $1bbc			beq 	_CIExit 				; : or EOL, exit
.1b68	c9 80		cmp #$80			cmp 	#TOK_EOL
.1b6a	f0 50		beq $1bbc			beq 	_CIExit
.1b6c	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1b6e	90 12		bcc $1b82			bcc 	_CIVariable
.1b70	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1b72	d0 43		bne $1bb7			bne 	_CISyntax
.1b74	a2 00		ldx #$00			ldx 	#0
.1b76	20 18 29	jsr $2918			jsr 	EvaluateString 			; evaluate and print string
.1b79	20 87 1c	jsr $1c87			jsr 	TOSToTemp0
.1b7c	20 8a 1f	jsr $1f8a			jsr 	PrintString
.1b7f	4c 5c 1b	jmp $1b5c			jmp 	Command_Input
.1b82					_CIVariable:
.1b82	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1b84	20 56 29	jsr $2956			jsr 	EvaluateReference  		; this is where its going
.1b87					_CIRetry:
.1b87	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1b89	a2 14		ldx #$14		ldx	#20
.1b8b	20 94 13	jsr $1394		jsr	deviceHandler
.1b8e	98		tya				tya
.1b8f	48		pha				pha
.1b90	20 d0 1b	jsr $1bd0			jsr 	InputString 			; input a string (manually)
.1b93	a2 01		ldx #$01			ldx 	#1
.1b95	20 bd 1b	jsr $1bbd			jsr 	BufferToStackX 			; make stack,x ref input string.
.1b98	a5 40		lda $40				lda 	esType 					; if target type numeric
.1b9a	29 40		and #$40			and 	#$40 					; then convert to number
.1b9c	d0 11		bne $1baf			bne 	_CIWrite
.1b9e	a2 01		ldx #$01			ldx 	#1
.1ba0	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1ba3	a9 0a		lda #$0a			lda 	#10
.1ba5	20 22 2d	jsr $2d22			jsr 	MInt32FromString 		; convert it back from a string.
.1ba8	68		pla				pla
.1ba9	a8		tay				tay
.1baa	b0 03		bcs $1baf			bcs 	_CIWrite 				; successfully converted.
.1bac	18		clc				clc 							; default fail FP conversion
.1bad	90 d8		bcc $1b87			bcc		_CIRetry				; failed, try again.
.1baf					_CIWrite:
.1baf	a2 00		ldx #$00			ldx 	#0
.1bb1	20 25 1c	jsr $1c25			jsr 	WriteValue
.1bb4	4c 5c 1b	jmp $1b5c			jmp 	Command_Input
.1bb7					_CISyntax:
.1bb7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1bb9	20 b5 13	jsr $13b5		jsr	errorHandler
.1bbc					_CIExit:
.1bbc	60		rts				rts
.1bbd					BufferToStackX:
.1bbd	a9 e7		lda #$e7			lda 	#InputBuffer & $FF
.1bbf	95 48		sta $48,x			sta 	esInt0,x
.1bc1	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1bc3	95 50		sta $50,x			sta 	esInt1,x
.1bc5	a9 00		lda #$00			lda 	#0
.1bc7	95 58		sta $58,x			sta 	esInt2,x
.1bc9	95 60		sta $60,x			sta 	esInt3,x
.1bcb	a9 40		lda #$40			lda 	#$40
.1bcd	95 40		sta $40,x			sta 	esType,x
.1bcf	60		rts				rts
.1bd0					InputString:
.1bd0	a9 00		lda #$00			lda 	#0
.1bd2	8d e7 0b	sta $0be7			sta 	InputBuffer
.1bd5					_InputLoop:
.1bd5	a2 00		ldx #$00		ldx	#0
.1bd7	20 94 13	jsr $1394		jsr	deviceHandler
.1bda	a2 0a		ldx #$0a		ldx	#10
.1bdc	20 94 13	jsr $1394		jsr	deviceHandler
.1bdf	c9 00		cmp #$00			cmp 	#0
.1be1	f0 f2		beq $1bd5			beq 	_InputLoop
.1be3	c9 08		cmp #$08			cmp 	#8
.1be5	f0 19		beq $1c00			beq 	_InputBackspace
.1be7	c9 0d		cmp #$0d			cmp 	#13
.1be9	f0 21		beq $1c0c			beq 	_InputExit
.1beb	ae e7 0b	ldx $0be7			ldx 	InputBuffer
.1bee	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1bf0	f0 e3		beq $1bd5			beq 	_InputLoop
.1bf2	9d e8 0b	sta $0be8,x			sta 	InputBuffer+1,x 		; write char
.1bf5	ee e7 0b	inc $0be7			inc 	InputBuffer 			; advance count.
.1bf8					_InputPrintLoop:
.1bf8	a2 14		ldx #$14		ldx	#20
.1bfa	20 94 13	jsr $1394		jsr	deviceHandler
.1bfd	4c d5 1b	jmp $1bd5			jmp	 	_InputLoop
.1c00					_InputBackspace:
.1c00	ad e7 0b	lda $0be7			lda 	InputBuffer 			; at start
.1c03	f0 d0		beq $1bd5			beq 	_InputLoop
.1c05	ce e7 0b	dec $0be7			dec 	InputBuffer
.1c08	a9 08		lda #$08			lda 	#8
.1c0a	d0 ec		bne $1bf8			bne 	_InputPrintLoop
.1c0c					_InputExit:
.1c0c	a2 04		ldx #$04		ldx	#4
.1c0e	20 94 13	jsr $1394		jsr	deviceHandler
.1c11	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1c12					CommandLet:
.1c12	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1c14	20 56 29	jsr $2956			jsr 	EvaluateReference
.1c17	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1c19	20 1c 2f	jsr $2f1c			jsr 	CheckToken
.1c1c	e8		inx				inx 								; do RHS
.1c1d	20 04 29	jsr $2904			jsr 	Evaluate 					; evaluate and dereference
.1c20	ca		dex				dex
.1c21	20 25 1c	jsr $1c25			jsr 	WriteValue 					; write it out
.1c24	60		rts				rts
.1c25					WriteValue:
.1c25	98		tya				tya
.1c26	48		pha				pha
.1c27	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1c2a	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1c2c	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1c2e	29 40		and #$40			and 	#$40
.1c30	d0 50		bne $1c82			bne		_WVType
.1c32	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1c34	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1c36	29 40		and #$40			and 	#$40
.1c38	d0 1f		bne $1c59			bne 	_WVCopyString
.1c3a	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1c3c	15 41		ora $41,x			ora 	esType+1,x
.1c3e	4a		lsr a				lsr 	a
.1c3f	90 22		bcc $1c63			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1c41	b5 40		lda $40,x			lda 	esType,x
.1c43	4a		lsr a				lsr 	a
.1c44	90 3c		bcc $1c82			bcc 	_WVType
.1c46	e8		inx				inx 								; force the value being written to be a float.
.1c47	20 65 24	jsr $2465			jsr 	BPMakeFloat
.1c4a	ca		dex				dex
.1c4b	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 					; set Temp0 to write address
.1c4e	e8		inx				inx
.1c4f	8a		txa				txa
.1c50	a2 20		ldx #$20		ldx	#32
.1c52	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.1c55	aa		tax				tax
.1c56	4c 7f 1c	jmp $1c7f			jmp 	_WVCopyExit
.1c59					_WVCopyString:
.1c59	8a		txa				txa
.1c5a	a2 0e		ldx #$0e		ldx	#14
.1c5c	20 d4 32	jsr $32d4		jsr	stringHandler
.1c5f	aa		tax				tax
.1c60	4c 7f 1c	jmp $1c7f			jmp 	_WVCopyExit
.1c63					_WVCopyData4:
.1c63	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1c65	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1c67	d0 10		bne $1c79			bne 	_WVCopyData1
.1c69	a0 03		ldy #$03			ldy 	#3
.1c6b	b5 61		lda $61,x			lda 	esInt3+1,x
.1c6d	91 2a		sta ($2a),y			sta 	(temp0),y
.1c6f	88		dey				dey
.1c70	b5 59		lda $59,x			lda 	esInt2+1,x
.1c72	91 2a		sta ($2a),y			sta 	(temp0),y
.1c74	88		dey				dey
.1c75	b5 51		lda $51,x			lda 	esInt1+1,x
.1c77	91 2a		sta ($2a),y			sta 	(temp0),y
.1c79					_WVCopyData1:
.1c79	a0 00		ldy #$00			ldy 	#0
.1c7b	b5 49		lda $49,x			lda 	esInt0+1,x
.1c7d	91 2a		sta ($2a),y			sta 	(temp0),y
.1c7f					_WVCopyExit:
.1c7f	68		pla				pla
.1c80	a8		tay				tay
.1c81	60		rts				rts
.1c82					_WVType:
.1c82	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c84	20 b5 13	jsr $13b5		jsr	errorHandler
.1c87					TOSToTemp0:
.1c87	b5 48		lda $48,x			lda 	esInt0,x
.1c89	85 2a		sta $2a				sta 	temp0
.1c8b	b5 50		lda $50,x			lda 	esInt1,x
.1c8d	85 2b		sta $2b				sta 	temp0+1
.1c8f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.0c08					structIndent:
>0c08							.fill 	1
.1c90					CommandList:
.1c90	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1c92	8e 08 0c	stx $0c08			stx 	structIndent
.1c95	20 b4 2e	jsr $2eb4			jsr 	MInt32False
.1c98	e8		inx				inx
.1c99	20 b0 2e	jsr $2eb0			jsr 	MInt32True
.1c9c	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1c9e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.1ca0	f0 15		beq $1cb7			beq 	_CLEndLine
.1ca2	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1ca4	30 1b		bmi $1cc1			bmi 	_CLDoListing 				; do the whole lot.
.1ca6	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.1ca8	20 23 29	jsr $2923			jsr 	EvaluateInteger
.1cab	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.1cad	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1caf	f0 06		beq $1cb7			beq 	_CLEndLine
.1cb1	20 f2 2d	jsr $2df2			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1cb4	4c c1 1c	jmp $1cc1			jmp 	_CLDoListing 				; own e.g. list 1100
.1cb7					_CLEndLine:
.1cb7	c8		iny				iny 								; skip comma
.1cb8	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.1cba	30 05		bmi $1cc1			bmi 	_CLDoListing
.1cbc	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.1cbe	20 23 29	jsr $2923			jsr 	EvaluateInteger				; get end
.1cc1					_CLDoListing:
.1cc1	20 65 21	jsr $2165			jsr 	ResetCodeAddress 			; back to the start.
.1cc4					_CLCheckLoop:
.1cc4	a2 00		ldx #$00		ldx	#0
.1cc6	20 94 13	jsr $1394		jsr	deviceHandler
.1cc9	a0 00		ldy #$00			ldy 	#0							; check end.
.1ccb	b1 28		lda ($28),y			lda 	(codePtr),y
.1ccd	f0 41		beq $1d10			beq 	_CLEnd
.1ccf	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1cd1	20 13 1d	jsr $1d13			jsr 	CLCompareLineTOS
.1cd4	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1cd6	f0 28		beq $1d00			beq 	_CLNext
.1cd8	e8		inx				inx
.1cd9	20 13 1d	jsr $1d13			jsr 	CLCompareLineTOS 			; compare vs higher
.1cdc	c9 01		cmp #$01			cmp 	#1
.1cde	f0 20		beq $1d00			beq 	_CLNext
.1ce0	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.1ce2	20 35 1d	jsr $1d35			jsr 	CLStructureCheck
.1ce5	ad 08 0c	lda $0c08			lda 	structIndent 				; indent level.
.1ce8	10 02		bpl $1cec			bpl 	_CLPositive
.1cea	a9 00		lda #$00			lda 	#0
.1cec					_CLPositive:
.1cec	a2 02		ldx #$02		ldx	#2
.1cee	20 c9 3a	jsr $3ac9		jsr	tokeniserHandler
.1cf1	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.1cf3	20 35 1d	jsr $1d35			jsr 	CLStructureCheck
.1cf6	ad 08 0c	lda $0c08			lda 	structIndent
.1cf9	10 05		bpl $1d00			bpl 	_CLNext
.1cfb	a9 00		lda #$00			lda 	#0
.1cfd	8d 08 0c	sta $0c08			sta 	structIndent
.1d00					_CLNext:
.1d00	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1d02	b1 28		lda ($28),y			lda 	(codePtr),y
.1d04	18		clc				clc
.1d05	65 28		adc $28				adc 	codePtr
.1d07	85 28		sta $28				sta 	codePtr
.1d09	90 b9		bcc $1cc4			bcc 	_CLCheckLoop
.1d0b	e6 29		inc $29				inc 	codePtr+1
.1d0d	4c c4 1c	jmp $1cc4			jmp 	_CLCheckLoop
.1d10					_CLEnd:
.1d10	4c 19 30	jmp $3019			jmp 	WarmStart 					; warm start after list.
.1d13					CLCompareLineTOS:
.1d13	a0 01		ldy #$01			ldy 	#1
.1d15	b1 28		lda ($28),y			lda 	(codePtr),y
.1d17	55 48		eor $48,x			eor 	esInt0,x
.1d19	85 2a		sta $2a				sta 	temp0
.1d1b	c8		iny				iny
.1d1c	b1 28		lda ($28),y			lda 	(codePtr),y
.1d1e	55 50		eor $50,x			eor 	esInt1,x
.1d20	05 2a		ora $2a				ora 	temp0
.1d22	f0 10		beq $1d34			beq 	_CLCLTExit
.1d24	88		dey				dey
.1d25	b1 28		lda ($28),y			lda 	(codePtr),y
.1d27	d5 48		cmp $48,x			cmp 	esInt0,x
.1d29	c8		iny				iny
.1d2a	b1 28		lda ($28),y			lda 	(codePtr),y
.1d2c	f5 50		sbc $50,x			sbc 	esInt1,x
.1d2e	a9 ff		lda #$ff			lda 	#255
.1d30	90 02		bcc $1d34			bcc 	_CLCLTExit
.1d32	a9 01		lda #$01			lda 	#1
.1d34					_CLCLTExit:
.1d34	60		rts				rts
.1d35					CLStructureCheck:
.1d35	85 2a		sta $2a				sta 	temp0
.1d37	a0 03		ldy #$03			ldy 	#3
.1d39					_CLSCLoop:
.1d39	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.1d3b	c8		iny				iny
.1d3c	c9 80		cmp #$80			cmp 	#$80
.1d3e	90 f9		bcc $1d39			bcc 	_CLSCLoop 					; $00-$7F just step over.
.1d40	f0 28		beq $1d6a			beq		_CLSCExit					; EOL return
.1d42	c9 86		cmp #$86			cmp 	#$86 						; special handler
.1d44	90 1e		bcc $1d64			bcc 	_CLSCSpecial
.1d46	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.1d48	90 ef		bcc $1d39			bcc 	_CLSCLoop
.1d4a	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.1d4c	b0 eb		bcs $1d39			bcs 	_CLSCLoop
.1d4e	aa		tax				tax 								; get adjustment
.1d4f	bd bc 27	lda $27bc,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.1d52	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.1d54	d0 e3		bne $1d39			bne 	_CLSCLoop
.1d56	38		sec				sec
.1d57	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.1d59	0a		asl a				asl 	a 							; double indent step
.1d5a	18		clc				clc
.1d5b	6d 08 0c	adc $0c08			adc 	structIndent 				; add to structure indent
.1d5e	8d 08 0c	sta $0c08			sta 	structIndent
.1d61	4c 39 1d	jmp $1d39			jmp 	_CLSCLoop
.1d64					_CLSCSpecial:
.1d64	20 84 2f	jsr $2f84			jsr 	ScannerSkipSpecial
.1d67	4c 39 1d	jmp $1d39			jmp 	_CLSCLoop
.1d6a					_CLSCExit:
.1d6a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1d6b					CommandLoad:
.1d6b	20 93 1d	jsr $1d93			jsr 	CLSParameters 					; get parameters for load.
.1d6e	08		php				php
.1d6f	a2 0e		ldx #$0e		ldx	#14
.1d71	20 94 13	jsr $1394		jsr	deviceHandler
.1d74	28		plp				plp
.1d75	b0 08		bcs $1d7f			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1d77	20 a8 19	jsr $19a8			jsr 	CommandClear
.1d7a	a2 02		ldx #$02		ldx	#2
.1d7c	20 93 19	jsr $1993		jsr	interactionHandler
.1d7f					_CLExit
.1d7f	60		rts				rts
.1d80					CommandSave:
.1d80	20 93 1d	jsr $1d93			jsr 	CLSParameters					; get parameters for save
.1d83	90 08		bcc $1d8d			bcc 	_CSNoOverrideAddress
.1d85	20 34 2f	jsr $2f34			jsr 	CheckComma 						; should be a comma.
.1d88	a2 02		ldx #$02			ldx 	#2
.1d8a	20 23 29	jsr $2923			jsr 	EvaluateInteger 				; get save end address.
.1d8d					_CSNoOverrideAddress:
.1d8d	a2 18		ldx #$18		ldx	#24
.1d8f	20 94 13	jsr $1394		jsr	deviceHandler
.1d92	60		rts				rts
.1d93					CLSParameters:
.1d93	a2 00		ldx #$00			ldx 	#0 								; string
.1d95	20 18 29	jsr $2918			jsr 	EvaluateString
.1d98	e8		inx				inx 									; erase out +1 +2
.1d99	20 b4 2e	jsr $2eb4			jsr 	MInt32False
.1d9c	e8		inx				inx
.1d9d	20 b4 2e	jsr $2eb4			jsr 	MInt32False
.1da0	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1da3	85 49		sta $49				sta 	esInt0+1
.1da5	ad c9 0a	lda $0ac9			lda 	basePage+1
.1da8	85 51		sta $51				sta 	esInt1+1
.1daa	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1dad	85 4a		sta $4a				sta 	esInt0+2
.1daf	ad cb 0a	lda $0acb			lda 	endProgram+1
.1db2	85 52		sta $52				sta 	esInt1+2
.1db4	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1db6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1db8	d0 08		bne $1dc2			bne 	_CLSDefault
.1dba	c8		iny				iny 									; skip comma
.1dbb	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1dbd	20 23 29	jsr $2923			jsr 	EvaluateInteger
.1dc0	38		sec				sec
.1dc1	60		rts				rts
.1dc2					_CLSDefault:
.1dc2	18		clc				clc
.1dc3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c09					storeSize:
>0c09							.fill 	1
.1dc4					CommandLocal:
.1dc4	a2 00		ldx #$00			ldx 	#0
.1dc6	20 e2 1d	jsr $1de2			jsr 	LocaliseVariable 			; localise one.
.1dc9					_CLCheckNext:
.1dc9	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1dcb	c8		iny				iny
.1dcc	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1dce	f0 06		beq $1dd6			beq 	_CLAssignment
.1dd0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1dd2	f0 f0		beq $1dc4			beq 	CommandLocal
.1dd4	88		dey				dey
.1dd5	60		rts				rts
.1dd6					_CLAssignment:
.1dd6	a2 01		ldx #$01			ldx 	#1
.1dd8	20 04 29	jsr $2904			jsr 	Evaluate 					; evaluate RHS
.1ddb	ca		dex				dex
.1ddc	20 25 1c	jsr $1c25			jsr 	WriteValue
.1ddf	4c c9 1d	jmp $1dc9			jmp 	_CLCheckNext
.1de2					LocaliseVariable:
.1de2	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1de4	c9 40		cmp #$40			cmp 	#$40
.1de6	b0 67		bcs $1e4f			bcs 	_LVSyntax
.1de8	8a		txa				txa 								; get the address of that variable.
.1de9	a2 00		ldx #$00		ldx	#0
.1deb	20 d8 3d	jsr $3dd8		jsr	variableHandler
.1dee	aa		tax				tax
.1def	8a		txa				txa
.1df0	48		pha				pha
.1df1	98		tya				tya
.1df2	48		pha				pha
.1df3	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1df6	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1df8	0a		asl a				asl 	a
.1df9	10 16		bpl $1e11			bpl 	_LVPushNumber
.1dfb	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1dfd	b1 2a		lda ($2a),y			lda 	(temp0),y
.1dff	c8		iny				iny
.1e00	85 2c		sta $2c				sta 	temp1
.1e02	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e04	85 2d		sta $2d				sta 	temp1+1
.1e06	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1e08	b1 2c		lda ($2c),y			lda 	(temp1),y
.1e0a	aa		tax				tax 								; into X
.1e0b	e8		inx				inx 								; +1 for length.
.1e0c	a9 24		lda #$24			lda 	#markerString
.1e0e	4c 26 1e	jmp $1e26			jmp 	_LVWriteFrame
.1e11					_LVPushNumber:
.1e11	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1e13	85 2c		sta $2c				sta 	temp1
.1e15	a5 2b		lda $2b				lda 	temp0+1
.1e17	85 2d		sta $2d				sta 	temp1+1
.1e19	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1e1b	4a		lsr a				lsr 	a
.1e1c	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1e1e	a2 04		ldx #$04			ldx 	#VarISize
.1e20	90 04		bcc $1e26			bcc 	_LVIsInteger
.1e22	a9 23		lda #$23			lda 	#markerFloat
.1e24	a2 06		ldx #$06			ldx 	#VarFSize
.1e26					_LVIsInteger:
.1e26					_LVWriteFrame:
.1e26	8e 09 0c	stx $0c09			stx 	storeSize 					; number of bytes to copy from (temp0)
.1e29	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1e2a	e8		inx				inx
.1e2b	e8		inx				inx
.1e2c	20 cb 2f	jsr $2fcb			jsr 	RSClaim 					; create the stack frame.
.1e2f	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1e31	a0 01		ldy #$01			ldy 	#1
.1e33	91 37		sta ($37),y			sta 	(rsPointer),y
.1e35	c8		iny				iny
.1e36	a5 2b		lda $2b				lda 	temp0+1
.1e38	91 37		sta ($37),y			sta 	(rsPointer),y
.1e3a	a0 00		ldy #$00			ldy 	#0
.1e3c					_LVCopyData:
.1e3c	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1e3e	c8		iny				iny 								; write allowing for the header bit.
.1e3f	c8		iny				iny
.1e40	c8		iny				iny
.1e41	91 37		sta ($37),y			sta 	(rsPointer),y
.1e43	88		dey				dey
.1e44	88		dey				dey
.1e45	ce 09 0c	dec $0c09			dec 	storeSize 					; do it storesize times
.1e48	d0 f2		bne $1e3c			bne 	_LVCopyData
.1e4a	68		pla				pla
.1e4b	a8		tay				tay
.1e4c	68		pla				pla
.1e4d	aa		tax				tax
.1e4e	60		rts				rts
.1e4f					_LVSyntax:
.1e4f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1e51	20 b5 13	jsr $13b5		jsr	errorHandler
.1e54					RestoreLocals:
.1e54	a2 00		ldx #$00			ldx 	#0
.1e56	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1e58	c9 40		cmp #$40			cmp	 	#64
.1e5a	90 01		bcc $1e5d			bcc 	_RLocal
.1e5c	60		rts				rts
.1e5d					_RLocal:
.1e5d	8a		txa				txa
.1e5e	48		pha				pha
.1e5f	98		tya				tya
.1e60	48		pha				pha
.1e61	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1e63	b1 37		lda ($37),y			lda 	(rsPointer),y
.1e65	85 2a		sta $2a				sta 	temp0
.1e67	c8		iny				iny
.1e68	b1 37		lda ($37),y			lda 	(rsPointer),y
.1e6a	85 2b		sta $2b				sta 	temp0+1
.1e6c	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1e6e	b1 37		lda ($37),y			lda 	(rsPointer),y
.1e70	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1e72	f0 28		beq $1e9c			beq 	_RString
.1e74	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1e76	c9 25		cmp #$25			cmp 	#markerInt
.1e78	f0 02		beq $1e7c			beq 	_RIsInteger
.1e7a	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1e7c					_RIsInteger:
.1e7c	8a		txa				txa
.1e7d	48		pha				pha
.1e7e	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1e80					_RCopyBack:
.1e80	b1 37		lda ($37),y			lda 	(rsPointer),y
.1e82	88		dey				dey
.1e83	88		dey				dey
.1e84	88		dey				dey
.1e85	91 2a		sta ($2a),y			sta 	(temp0),y
.1e87	c8		iny				iny
.1e88	c8		iny				iny
.1e89	c8		iny				iny
.1e8a	c8		iny				iny
.1e8b	ca		dex				dex
.1e8c	d0 f2		bne $1e80			bne 	_RCopyBack
.1e8e	68		pla				pla 								; get size add 3
.1e8f	18		clc				clc
.1e90	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1e92					_RRestoreAAndLoop:
.1e92	20 ed 2f	jsr $2fed			jsr 	RSFree
.1e95	68		pla				pla
.1e96	a8		tay				tay
.1e97	68		pla				pla
.1e98	aa		tax				tax
.1e99	4c 54 1e	jmp $1e54			jmp 	RestoreLocals 				; go see if there are any more locals.
.1e9c					_RString:
.1e9c	a2 00		ldx #$00			ldx 	#0
.1e9e	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1ea0	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ea2	95 48		sta $48,x			sta 	esInt0,x
.1ea4	c8		iny				iny
.1ea5	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ea7	95 50		sta $50,x			sta 	esInt1,x
.1ea9	18		clc				clc
.1eaa	a5 37		lda $37				lda 	rsPointer
.1eac	69 03		adc #$03			adc 	#3
.1eae	95 49		sta $49,x			sta 	esInt0+1,x
.1eb0	a5 38		lda $38				lda 	rsPointer+1
.1eb2	69 00		adc #$00			adc 	#0
.1eb4	95 51		sta $51,x			sta 	esInt1+1,x
.1eb6	8a		txa				txa
.1eb7	a2 0e		ldx #$0e		ldx	#14
.1eb9	20 d4 32	jsr $32d4		jsr	stringHandler
.1ebc	a0 03		ldy #$03			ldy 	#3 							; get string length
.1ebe	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ec0	18		clc				clc
.1ec1	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1ec3	4c 92 1e	jmp $1e92			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1ec6					Command_New:
.1ec6					Command_XNew:
.1ec6	20 65 21	jsr $2165			jsr 	ResetCodeAddress 			; point to first line
.1ec9	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1ecb	98		tya				tya
.1ecc	91 28		sta ($28),y			sta 	(codePtr),y
.1ece	20 a8 19	jsr $19a8			jsr 	CommandClear 				; clear everything down.
.1ed1	4c 3d 23	jmp $233d			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1ed4					Command_Poke:
.1ed4	a9 01		lda #$01			lda 	#1
.1ed6	d0 06		bne $1ede			bne 	PokeGeneral
.1ed8					Command_Doke:
.1ed8	a9 02		lda #$02			lda 	#2
.1eda	d0 02		bne $1ede			bne 	PokeGeneral
.1edc					Command_Loke:
.1edc	a9 03		lda #$03			lda 	#3
.1ede					PokeGeneral:
.1ede	48		pha				pha 								; save id (PDL = 123)
.1edf	20 21 29	jsr $2921			jsr 	EvaluateRootInteger 		; target address
.1ee2	20 34 2f	jsr $2f34			jsr	 	CheckComma
.1ee5	e8		inx				inx
.1ee6	20 23 29	jsr $2923			jsr 	EvaluateInteger 			; what value to POKE ?
.1ee9	ca		dex				dex
.1eea	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 					; temp0 points to the target address
.1eed	84 32		sty $32				sty 	tempShort 					; save Y
.1eef	68		pla				pla 								; get copy type (1-3) and dispatch
.1ef0	aa		tax				tax
.1ef1	ca		dex				dex
.1ef2	f0 14		beq $1f08			beq 	_Poke1
.1ef4	ca		dex				dex
.1ef5	f0 0b		beq $1f02			beq 	_Poke2
.1ef7	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1ef9	a5 61		lda $61				lda 	esInt3+1
.1efb	91 2a		sta ($2a),y			sta 	(temp0),y
.1efd	88		dey				dey
.1efe	a5 59		lda $59				lda 	esInt2+1
.1f00	91 2a		sta ($2a),y			sta 	(temp0),y
.1f02					_Poke2:
.1f02	a0 01		ldy #$01			ldy 	#1
.1f04	a5 51		lda $51				lda 	esInt1+1
.1f06	91 2a		sta ($2a),y			sta 	(temp0),y
.1f08					_Poke1:
.1f08	a0 00		ldy #$00			ldy 	#0
.1f0a	a5 49		lda $49				lda 	esInt0+1
.1f0c	91 2a		sta ($2a),y			sta 	(temp0),y
.1f0e	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1f10	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c0a					lastPrintToken:
>0c0a							.fill 	1
.1f11					Command_Print:
.1f11	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1f13	8d 0a 0c	sta $0c0a			sta 	lastPrintToken
.1f16	88		dey				dey
.1f17					_PrintLoopSkip:
.1f17	c8		iny				iny
.1f18					_PrintLoop:
.1f18	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1f1a	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1f1c	f0 5b		beq $1f79			beq 	_PrintExit
.1f1e	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1f20	f0 57		beq $1f79			beq 	_PrintExit
.1f22	8d 0a 0c	sta $0c0a			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1f25	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1f27	f0 ee		beq $1f17			beq 	_PrintLoopSkip
.1f29	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1f2b	f0 3c		beq $1f69			beq	 	_PrintNewLine
.1f2d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1f2f	f0 40		beq $1f71			beq 	_PrintTab
.1f31	20 02 29	jsr $2902			jsr 	EvaluateRoot 				; evaluate something at the root
.1f34	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1f36	85 2a		sta $2a				sta 	temp0
.1f38	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1f3a	85 2b		sta $2b				sta 	1+(temp0)
.1f3c	a5 40		lda $40				lda 	esType 						; get type
.1f3e	f0 15		beq $1f55			beq		_PrintInteger
.1f40	4a		lsr a				lsr 	a 							; check for floating point
.1f41	b0 08		bcs $1f4b			bcs 	_PrintFloat
.1f43					_PrintString:
.1f43	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1f45	20 87 1c	jsr $1c87			jsr 	TOSToTemp0
.1f48	4c 63 1f	jmp $1f63			jmp 	_PrintTemp0 				; print no leading space.
.1f4b					_PrintFloat:
.1f4b	a9 00		lda #$00			lda 	#0 							; stack level.
.1f4d	a2 14		ldx #$14		ldx	#20
.1f4f	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.1f52	4c 5c 1f	jmp $1f5c			jmp 	_PrintSpaceTemp0
.1f55					_PrintInteger:
.1f55	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1f57	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1f59	20 0a 2e	jsr $2e0a			jsr 	MInt32ToString				; convert to text
.1f5c					_PrintSpaceTemp0:
.1f5c	a9 20		lda #$20			lda 	#32
.1f5e	a2 14		ldx #$14		ldx	#20
.1f60	20 94 13	jsr $1394		jsr	deviceHandler
.1f63					_PrintTemp0:
.1f63	20 8a 1f	jsr $1f8a			jsr 	PrintString
.1f66	4c 18 1f	jmp $1f18			jmp 	_PrintLoop
.1f69					_PrintNewLine:
.1f69	a2 04		ldx #$04		ldx	#4
.1f6b	20 94 13	jsr $1394		jsr	deviceHandler
.1f6e	4c 17 1f	jmp $1f17			jmp 	_PrintLoopSkip
.1f71					_PrintTab:
.1f71	a2 1a		ldx #$1a		ldx	#26
.1f73	20 94 13	jsr $1394		jsr	deviceHandler
.1f76	4c 17 1f	jmp $1f17			jmp 	_PrintLoopSkip
.1f79					_PrintExit:
.1f79	ad 0a 0c	lda $0c0a			lda		lastPrintToken 				; check last token
.1f7c	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1f7e	f0 09		beq $1f89			beq 	_PrintExit2
.1f80	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1f82	f0 05		beq $1f89			beq 	_PrintExit2
.1f84	a2 04		ldx #$04		ldx	#4
.1f86	20 94 13	jsr $1394		jsr	deviceHandler
.1f89					_PrintExit2:
.1f89	60		rts				rts
.1f8a					PrintString:
.1f8a	8a		txa				txa
.1f8b	48		pha				pha
.1f8c	98		tya				tya
.1f8d	48		pha				pha
.1f8e	a0 00		ldy #$00			ldy 	#0							; get length
.1f90	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f92	aa		tax				tax 								; into X
.1f93	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1f95	f0 10		beq $1fa7			beq 	_PSExit
.1f97	ca		dex				dex
.1f98	8a		txa				txa
.1f99	48		pha				pha
.1f9a	c8		iny				iny
.1f9b	b1 2a		lda ($2a),y			lda 	(temp0),y
.1f9d	a2 14		ldx #$14		ldx	#20
.1f9f	20 94 13	jsr $1394		jsr	deviceHandler
.1fa2	68		pla				pla
.1fa3	aa		tax				tax
.1fa4	4c 93 1f	jmp $1f93			jmp 	_PSLoop
.1fa7					_PSExit:
.1fa7	68		pla				pla
.1fa8	a8		tay				tay
.1fa9	68		pla				pla
.1faa	aa		tax				tax
.1fab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c0b					paramCount:
>0c0b							.fill 	1
.1fac					CallProc:
.1fac	20 62 22	jsr $2262			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.1faf	48		pha				pha 								; save length on stack
.1fb0	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.1fb2	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.1fb4	48		pha				pha
.1fb5	a5 2a		lda $2a				lda 	temp0
.1fb7	48		pha				pha
.1fb8	98		tya				tya 								; calculate Y + length
.1fb9	18		clc				clc
.1fba	65 32		adc $32				adc 	tempShort
.1fbc	a8		tay				tay
.1fbd	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.1fbf					_CallProcEvalParams:
.1fbf	e8		inx				inx
.1fc0	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.1fc2	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1fc4	f0 0b		beq $1fd1			beq 	_CPDoneParams
.1fc6	20 04 29	jsr $2904			jsr 	Evaluate 					; evaluate a parameter
.1fc9	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1fcb	c8		iny				iny
.1fcc	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1fce	f0 ef		beq $1fbf			beq 	_CallProcEvalParams
.1fd0	88		dey				dey 								; undo consumption.
.1fd1					_CPDoneParams:
.1fd1	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; check closing parenthesis.
.1fd4	8e 0b 0c	stx $0c0b			stx 	paramCount 					; store parameter count+1
.1fd7	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1fd9	a9 50		lda #$50			lda 	#markerPROC
.1fdb	20 cb 2f	jsr $2fcb			jsr 	RSClaim
.1fde	a9 01		lda #$01			lda 	#1 							; store return address.
.1fe0	20 f7 2f	jsr $2ff7			jsr 	RSSavePosition
.1fe3	68		pla				pla 								; get the new code Ptr
.1fe4	85 28		sta $28				sta 	codePtr
.1fe6	68		pla				pla
.1fe7	85 29		sta $29				sta 	codePtr+1
.1fe9	68		pla				pla 								; length of name + 4 is the param start.
.1fea	18		clc				clc
.1feb	69 04		adc #$04			adc 	#4
.1fed	a8		tay				tay
.1fee	a2 ff		ldx #$ff			ldx 	#$FF
.1ff0					_CPLoadParameters:
.1ff0	e8		inx				inx 								; point to where the address should be loaded.
.1ff1	ec 0b 0c	cpx $0c0b			cpx 	paramCount 					; too many parameters in definition ?
.1ff4	f0 1e		beq $2014			beq 	_CPParamError
.1ff6	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.1ff8	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.1ffa	f0 0e		beq $200a			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.1ffc	20 e2 1d	jsr $1de2			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1fff	20 25 1c	jsr $1c25			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2002	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2004	c8		iny				iny
.2005	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2007	f0 e7		beq $1ff0			beq 	_CPLoadParameters
.2009	88		dey				dey 								; no, unconsume and check for )
.200a					_CPParamComplete:
.200a	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; check )
.200d	e8		inx				inx 								; check right number of parameters have been consumed
.200e	ec 0b 0c	cpx $0c0b			cpx 	paramCount
.2011	d0 01		bne $2014			bne 	_CPParamError
.2013	60		rts				rts
.2014					_CPParamError:
.2014	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2016	20 b5 13	jsr $13b5		jsr	errorHandler
.2019					ReturnProc:
.2019	20 54 1e	jsr $1e54			jsr 	RestoreLocals 				; get the locals back.
.201c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.201e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2020	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2022	f0 05		beq $2029			beq 	_isok
.2024	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2026	20 b5 13	jsr $13b5		jsr	errorHandler
.2029					_isok:
.2029	a9 01		lda #$01			lda 	#1
.202b	20 0a 30	jsr $300a			jsr 	RSLoadPosition 				; reload the position from offset 1.
.202e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2030	20 ed 2f	jsr $2fed			jsr 	RSFree
.2033	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c0c					dataPtr:
>0c0c							.fill 	2
.0c0e					dataIndex:
>0c0e							.fill 	1
.2034					CommandRead:
.2034	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.2036	20 56 29	jsr $2956			jsr 	EvaluateReference
.2039	20 7a 20	jsr $207a			jsr 	SwapDPCP 					; use the data pointer.
.203c	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.203e	c8		iny				iny
.203f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2041	f0 07		beq $204a			beq 	_CRInData
.2043	88		dey				dey
.2044	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.2046	aa		tax				tax
.2047	20 41 2f	jsr $2f41			jsr 	ScanForward
.204a					_CRInData:
.204a	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.204c	20 04 29	jsr $2904			jsr 	Evaluate
.204f	ca		dex				dex 								; and write the value.
.2050	20 25 1c	jsr $1c25			jsr 	WriteValue
.2053	20 7a 20	jsr $207a			jsr 	SwapDPCP 					; get the code pointer back.
.2056	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2058	c8		iny				iny
.2059	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.205b	f0 d7		beq $2034			beq 	CommandRead
.205d	88		dey				dey
.205e	60		rts				rts
.205f					CommandData:
.205f	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2061	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2063	20 41 2f	jsr $2f41			jsr 	ScanForward
.2066	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2067	60		rts				rts
.2068					CommandRestore:
.2068	ad c8 0a	lda $0ac8			lda 	basePage
.206b	8d 0c 0c	sta $0c0c			sta 	dataPtr
.206e	ad c9 0a	lda $0ac9			lda 	basePage+1
.2071	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.2074	a9 03		lda #$03			lda 	#3
.2076	8d 0e 0c	sta $0c0e			sta 	dataIndex
.2079	60		rts				rts
.207a					SwapDPCP:
.207a	8a		txa				txa
.207b	48		pha				pha
.207c	98		tya				tya 								; swap Y, DataIndex
.207d	ac 0e 0c	ldy $0c0e			ldy 	DataIndex
.2080	8d 0e 0c	sta $0c0e			sta 	DataIndex
.2083	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2085	ae 0c 0c	ldx $0c0c			ldx 	dataptr
.2088	8d 0c 0c	sta $0c0c			sta 	dataPtr
.208b	86 28		stx $28				stx 	codePtr
.208d	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.208f	ae 0d 0c	ldx $0c0d			ldx 	dataptr+1
.2092	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.2095	86 29		stx $29				stx 	codePtr+1
.2097	68		pla				pla
.2098	aa		tax				tax
.2099	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.209a					Command_Rem:
.209a					Command_Rem2:
.209a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.209c	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.209e	d0 06		bne $20a6			bne 	_CRNotString
.20a0	c8		iny				iny
.20a1	98		tya				tya
.20a2	38		sec				sec
.20a3	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.20a5	a8		tay				tay
.20a6					_CRNotString:
.20a6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.20a7					Command_Repeat:
.20a7	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.20a9	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.20ab	20 cb 2f	jsr $2fcb			jsr 	RSClaim
.20ae	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.20b0	20 f7 2f	jsr $2ff7			jsr 	RSSavePosition
.20b3	60		rts				rts
.20b4					Command_Until:
.20b4	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.20b6	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.20b8	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.20ba	f0 05		beq $20c1			beq 	_isok
.20bc	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.20be	20 b5 13	jsr $13b5		jsr	errorHandler
.20c1					_isok:
.20c1	20 21 29	jsr $2921			jsr 	EvaluateRootInteger 		; at the bottom.
.20c4	20 db 2e	jsr $2edb			jsr 	MInt32Zero					; check if TOS zero
.20c7	d0 06		bne $20cf			bne 	_CUExit
.20c9	a9 01		lda #$01			lda 	#1
.20cb	20 0a 30	jsr $300a			jsr 	RSLoadPosition 				; reload the position from offset 1.
.20ce	60		rts				rts
.20cf					_CUExit:
.20cf	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.20d1	20 ed 2f	jsr $2fed			jsr 	RSFree
.20d4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c0f					breakCounter:
>0c0f								.fill 	1
.0c10					breakIncrement:
>0c10								.fill 	1
.20d5					Command_Run:
.20d5					XCommand_Run:
.20d5	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.20d7	9a		txs				txs
.20d8	20 5f 21	jsr $215f			jsr 	BreakOn 					; turn break on
.20db	20 a8 19	jsr $19a8			jsr 	CommandClear 				; clear everything.
.20de	20 65 21	jsr $2165			jsr 	ResetCodeAddress 			; back to the start.
.20e1					Command_RunFrom:
.20e1	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.20e3					CRNextInstruction:
.20e3	64 3a		stz $3a				stz 	softMemAlloc+1
.20e5	ad 0f 0c	lda $0c0f			lda 	breakCounter 				; check for break.
.20e8	6d 10 0c	adc $0c10			adc 	breakIncrement
.20eb	8d 0f 0c	sta $0c0f			sta 	breakCounter
.20ee	90 05		bcc $20f5			bcc 	_CRNoChecks
.20f0	a2 00		ldx #$00		ldx	#0
.20f2	20 94 13	jsr $1394		jsr	deviceHandler
.20f5					_CRNoChecks
.20f5	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.20f7	10 1c		bpl $2115			bpl 	_CRNotToken
.20f9	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.20fb	b0 0c		bcs $2109			bcs 	_CRExecute
.20fd	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.20ff	b0 71		bcs $2172			bcs 	Unimplemented
.2101	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2103	b0 04		bcs $2109			bcs 	_CRExecute
.2105	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2107	b0 16		bcs $211f			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2109					_CRExecute:
.2109	c8		iny				iny 								; consume it.
.210a	0a		asl a				asl 	a 							; double it, losing most significant bit.
.210b	aa		tax				tax
.210c	20 12 21	jsr $2112			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.210f	4c e3 20	jmp $20e3			jmp 	CRNextInstruction
.2112					_CRRunRoutine:
.2112	7c 7c 21	jmp ($217c,x)			jmp 	(Group0Vectors,x)
.2115					_CRNotToken:
.2115	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2117	b0 59		bcs $2172			bcs 	Unimplemented
.2119					_CRDefaultLet:
.2119	20 12 1c	jsr $1c12			jsr 	CommandLet 					; do the default, LET
.211c	4c e3 20	jmp $20e3			jmp 	CRNextInstruction
.211f					_CRCheckIndirect:
.211f	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2121	f0 0a		beq $212d			beq 	_CRAndCommand
.2123	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2125	f0 f2		beq $2119			beq 	_CRDefaultLet
.2127	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2129	f0 ee		beq $2119			beq 	_CRDefaultLet
.212b	d0 45		bne $2172			bne 	Unimplemented
.212d					_CRAndCommand:
.212d	c8		iny				iny 								; skip over the AND token
.212e	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2130	20 4a 21	jsr $214a			jsr 	CommandAssembler 			; do the assembler command
.2133	4c e3 20	jmp $20e3			jmp 	CRNextInstruction 			; and loop round.
.2136					CommandShift1:
.2136	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2138	10 38		bpl $2172			bpl 	Unimplemented 				; we have an error as this should not happen.
.213a	c8		iny				iny 								; advance over it.
.213b	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.213d	b0 0b		bcs $214a			bcs 	CommandAssembler
.213f	0a		asl a				asl 	a 							; double into X
.2140	aa		tax				tax
.2141	7c 40 22	jmp ($2240,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2144					CommandShift2:
.2144	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2146	20 a4 16	jsr $16a4		jsr	extensionHandler
.2149	60		rts				rts
.214a					CommandAssembler:
.214a	a2 00		ldx #$00		ldx	#0
.214c	20 59 12	jsr $1259		jsr	assemblerHandler
.214f	60		rts				rts
.2150					CommandAssemblerLabel:
.2150	a2 02		ldx #$02		ldx	#2
.2152	20 59 12	jsr $1259		jsr	assemblerHandler
.2155	60		rts				rts
.2156					CommandColon:
.2156	60		rts				rts
.2157					CommandBreak:
.2157	20 21 29	jsr $2921			jsr 	EvaluateRootInteger
.215a	20 db 2e	jsr $2edb			jsr 	MInt32Zero
.215d	f0 02		beq $2161			beq 	BreakOff
.215f					BreakOn:
.215f	a2 08		ldx #$08			ldx 	#8
.2161					BreakOff:
.2161	8e 10 0c	stx $0c10			stx 	breakIncrement
.2164	60		rts				rts
.2165					ResetCodeAddress:
.2165	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2168	85 28		sta $28				sta 	codePtr
.216a	ad c9 0a	lda $0ac9			lda 	basePage+1
.216d	85 29		sta $29				sta 	codePtr+1
.216f	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2171	60		rts				rts
.2172					Unimplemented:
.2172	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2174	20 b5 13	jsr $13b5		jsr	errorHandler
.2177					TKErr01:
.2177					TKErr02:
.2177					TKErr03:
.2177					TKErr04:
.2177					TKErr05:
.2177					TKErr06:
.2177					TKErr07:
.2177					TKErr08:
.2177					TKErr09:
.2177					TKErr10:
.2177					TKErr11:
.2177	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2179	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.217c					Group0Vectors:
>217c	43 23					.word	AdvanceNextLine          ; $80 [[eol]]
>217e	36 21					.word	CommandShift1            ; $81 [[sh1]]
>2180	44 21					.word	CommandShift2            ; $82 [[sh2]]
>2182	77 21					.word	TKErr09                  ; $83 [[sh3]]
>2184	77 21					.word	TKErr10                  ; $84 [[fpc]]
>2186	77 21					.word	TKErr08                  ; $85 [[str]]
>2188	07 25					.word	AndHandler               ; $86 and
>218a	f4 24					.word	OrHandler                ; $87 or
>218c	e1 24					.word	XorHandler               ; $88 xor
>218e	29 26					.word	CompareGreaterEq         ; $89 >=
>2190	33 26					.word	CompareLessEq            ; $8a <=
>2192	15 26					.word	CompareGreater           ; $8b >
>2194	0b 26					.word	CompareLess              ; $8c <
>2196	01 26					.word	CompareEquals            ; $8d =
>2198	1f 26					.word	CompareNotEquals         ; $8e <>
>219a	72 24					.word	AddHandler               ; $8f +
>219c	95 24					.word	SubHandler               ; $90 -
>219e	2d 25					.word	ShrHandler               ; $91 >>
>21a0	1a 25					.word	ShlHandler               ; $92 <<
>21a2	a8 24					.word	MulHandler               ; $93 *
>21a4	bb 24					.word	DivHandler               ; $94 /
>21a6	ce 24					.word	ModHandler               ; $95 mod
>21a8	66 25					.word	PowerHandler             ; $96 ^
>21aa	40 25					.word	WordRefHandler           ; $97 !
>21ac	53 25					.word	ByteRefHandler           ; $98 ?
>21ae	a7 20					.word	Command_Repeat           ; $99 repeat
>21b0	0b 24					.word	Command_While            ; $9a while
>21b2	11 1a					.word	Command_FOR              ; $9b for
>21b4	20 1b					.word	CommandIf                ; $9c if
>21b6	77 21					.word	TKErr04                  ; $9d defproc
>21b8	b4 20					.word	Command_Until            ; $9e until
>21ba	2e 24					.word	Command_Wend             ; $9f wend
>21bc	72 1a					.word	Command_NEXT             ; $a0 next
>21be	77 21					.word	TKErr06                  ; $a1 then
>21c0	5b 1b					.word	Command_ENDIF            ; $a2 endif
>21c2	19 20					.word	ReturnProc               ; $a3 endproc
>21c4	0b 28					.word	UnaryParenthesis         ; $a4 (
>21c6	69 29					.word	UnaryLen                 ; $a5 len(
>21c8	ad 29					.word	UnarySgn                 ; $a6 sgn(
>21ca	96 29					.word	UnaryAbs                 ; $a7 abs(
>21cc	06 2a					.word	Unary_Random             ; $a8 random(
>21ce	50 2a					.word	Unary_Page               ; $a9 page
>21d0	b0 2e					.word	MInt32True               ; $aa true
>21d2	b4 2e					.word	MInt32False              ; $ab false
>21d4	1b 2a					.word	Unary_Min                ; $ac min(
>21d6	1f 2a					.word	Unary_Max                ; $ad max(
>21d8	28 2b					.word	UnarySys                 ; $ae sys(
>21da	d1 2a					.word	UnaryTimer               ; $af timer(
>21dc	60 28					.word	EventFunction            ; $b0 event(
>21de	fa 2a					.word	UnaryGet                 ; $b1 get(
>21e0	ea 2a					.word	UnaryInkey               ; $b2 inkey(
>21e2	a1 2a					.word	UnaryAlloc               ; $b3 alloc(
>21e4	61 2b					.word	ExecChr                  ; $b4 chr$(
>21e6	91 2b					.word	ExecLeft                 ; $b5 left$(
>21e8	ae 2b					.word	ExecMid                  ; $b6 mid$(
>21ea	d6 2b					.word	ExecRight                ; $b7 right$(
>21ec	43 26					.word	Event_Str                ; $b8 str$(
>21ee	72 26					.word	UnaryVal                 ; $b9 val(
>21f0	c4 29					.word	UnaryPeek                ; $ba peek(
>21f2	ca 29					.word	UnaryDeek                ; $bb deek(
>21f4	d0 29					.word	UnaryLeek                ; $bc leek(
>21f6	87 29					.word	UnaryAsc                 ; $bd asc(
>21f8	7b 2a					.word	UnaryIntToFloat          ; $be int(
>21fa	8e 2a					.word	UnaryFloatToInt          ; $bf float(
>21fc	75 26					.word	UnaryIsVal               ; $c0 isval(
>21fe	78 2b					.word	ExecUpper                ; $c1 upper$(
>2200	75 2b					.word	ExecLower                ; $c2 lower$(
>2202	5e 2a					.word	UnaryReference           ; $c3 @
>2204	74 2a					.word	UnaryComplement          ; $c4 ~
>2206	71 2a					.word	UnaryHexMarker           ; $c5 &
>2208	13 2b					.word	UnaryGetString           ; $c6 get$(
>220a	19 2b					.word	UnaryInkeyString         ; $c7 inkey$(
>220c	50 2b					.word	UnaryMem                 ; $c8 mem
>220e	77 21					.word	TKErr01                  ; $c9 )
>2210	56 21					.word	CommandColon             ; $ca :
>2212	77 21					.word	TKErr02                  ; $cb ,
>2214	77 21					.word	TKErr03                  ; $cc ;
>2216	9a 20					.word	Command_Rem2             ; $cd '
>2218	77 21					.word	TKErr07                  ; $ce to
>221a	77 21					.word	TKErr05                  ; $cf step
>221c	ac 1f					.word	CallProc                 ; $d0 proc
>221e	c4 1d					.word	CommandLocal             ; $d1 local
>2220	03 1a					.word	Command_Dim              ; $d2 dim
>2222	9a 20					.word	Command_Rem              ; $d3 rem
>2224	12 1c					.word	CommandLet               ; $d4 let
>2226	5c 1b					.word	Command_Input            ; $d5 input
>2228	55 1b					.word	Command_ELSE             ; $d6 else
>222a	ea 23					.word	Command_VDU              ; $d7 vdu
>222c	11 1f					.word	Command_Print            ; $d8 print
>222e	b8 23					.word	CommandGOTO              ; $d9 goto
>2230	8d 23					.word	CommandGOSUB             ; $da gosub
>2232	a0 23					.word	CommandRETURN            ; $db return
>2234	5f 20					.word	CommandData              ; $dc data
>2236	9a 19					.word	Command_Assert           ; $dd assert
>2238	d4 1e					.word	Command_Poke             ; $de poke
>223a	d8 1e					.word	Command_Doke             ; $df doke
>223c	dc 1e					.word	Command_Loke             ; $e0 loke
>223e	5d 23					.word	Command_Ink              ; $e1 ink
>2240	68 23					.word	Command_Paper            ; $e2 paper
>2242	57 23					.word	Command_CLS              ; $e3 cls
>2244	73 23					.word	Command_Locate           ; $e4 locate
>2246	57 21					.word	CommandBreak             ; $e5 break
>2248	50 21					.word	CommandAssemblerLabel    ; $e6 .
>224a	77 21					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.224c					Group1Vectors:
>224c	a8 19					.word	CommandClear             ; $86 clear
>224e	6b 1d					.word	CommandLoad              ; $87 load
>2250	80 1d					.word	CommandSave              ; $88 save
>2252	90 1c					.word	CommandList              ; $89 list
>2254	c6 1e					.word	Command_New              ; $8a new
>2256	d5 20					.word	Command_Run              ; $8b run
>2258	34 20					.word	CommandRead              ; $8c read
>225a	68 20					.word	CommandRestore           ; $8d restore
>225c	3d 23					.word	CommandEnd               ; $8e end
>225e	38 23					.word	CommandStop              ; $8f stop
>2260	40 23					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c11					procList:
>0c11							.fill 	2		 					; terminated by name high being zero.
.0c13					yInLine:
>0c13							.fill 	1
.2262					FindProcedure:
.2262	8c 13 0c	sty $0c13			sty 	yInLine 					; save current position.
.2265	20 20 23	jsr $2320			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2268	85 2c		sta $2c				sta 	temp1
.226a	ad 11 0c	lda $0c11			lda		procList 					; put procList address in temp2
.226d	85 2e		sta $2e				sta 	temp2
.226f	ad 12 0c	lda $0c12			lda 	procList+1
.2272	85 2f		sta $2f				sta 	temp2+1
.2274	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2276					_FPLoop:
.2276	b1 2e		lda ($2e),y			lda 	(temp2),y
.2278	f0 4f		beq $22c9			beq 	_FPError 					; if so, we don't know this procedure.
.227a	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.227c	c8		iny				iny
.227d	b1 2e		lda ($2e),y			lda 	(temp2),y
.227f	85 2a		sta $2a				sta 	temp0
.2281	c8		iny				iny
.2282	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2284	c5 2c		cmp $2c				cmp 	temp1
.2286	d0 2b		bne $22b3			bne 	_FPNext 					; hash is different, go to next.
.2288	38		sec				sec
.2289	ad 13 0c	lda $0c13			lda 	yInLine 					; position in line must be at least 4
.228c	e9 04		sbc #$04			sbc 	#4
.228e	18		clc				clc
.228f	65 28		adc $28				adc 	codePtr
.2291	85 30		sta $30				sta 	temp3
.2293	a5 29		lda $29				lda 	codePtr+1
.2295	69 00		adc #$00			adc 	#0
.2297	85 31		sta $31				sta 	temp3+1
.2299	98		tya				tya
.229a	48		pha				pha
.229b	a0 04		ldy #$04			ldy 	#4
.229d					_FPCName:
.229d	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.229f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.22a1	d0 0e		bne $22b1			bne 	_FPpulYNext 				; if different go to next one.
.22a3	c8		iny				iny
.22a4	c9 3a		cmp #$3a			cmp 	#$3A
.22a6	90 f5		bcc $229d			bcc 	_FPCName 					; compare the whole lot....
.22a8	68		pla				pla 								; throw away the saved Y
.22a9	98		tya				tya 								; length of name is Y-4
.22aa	38		sec				sec
.22ab	e9 04		sbc #$04			sbc 	#4
.22ad	ac 13 0c	ldy $0c13			ldy 	yInLine  					; get the original Y back
.22b0	60		rts				rts
.22b1					_FPpulYNext:
.22b1	68		pla				pla
.22b2	a8		tay				tay
.22b3					_FPNext:
.22b3	c8		iny				iny 								; next procedure record.
.22b4	10 c0		bpl $2276			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.22b6	98		tya				tya 								; subtract 128 from Y
.22b7	38		sec				sec
.22b8	e9 80		sbc #$80			sbc 	#128
.22ba	a8		tay				tay
.22bb	18		clc				clc 								; add 128 to temp2, so we can have more than
.22bc	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.22be	69 80		adc #$80			adc 	#128
.22c0	85 2e		sta $2e				sta 	temp2
.22c2	90 b2		bcc $2276			bcc 	_FPLoop
.22c4	e6 2f		inc $2f				inc 	temp2+1
.22c6	4c 76 22	jmp $2276			jmp 	_FPLoop
.22c9					_FPError:
.22c9	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.22cb	20 b5 13	jsr $13b5		jsr	errorHandler
.22ce					ScanProc:
.22ce	98		tya				tya
.22cf	48		pha				pha
.22d0	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.22d2	8d 11 0c	sta $0c11			sta 	procList
.22d5	a5 36		lda $36				lda 	lowMemory+1
.22d7	8d 12 0c	sta $0c12			sta 	procList+1
.22da	20 65 21	jsr $2165			jsr 	ResetCodeAddress 			; back to the start.
.22dd					_ScanLoop:
.22dd	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.22df	b1 28		lda ($28),y			lda 	(codePtr),y
.22e1	f0 2a		beq $230d			beq 	_ScanExit
.22e3	a0 03		ldy #$03			ldy 	#3							; get first token
.22e5	b1 28		lda ($28),y			lda 	(codePtr),y
.22e7	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.22e9	d0 12		bne $22fd			bne 	_ScanNext
.22eb	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.22ed	20 15 23	jsr $2315			jsr 	_ScanWrite
.22f0	a5 28		lda $28				lda 	codePtr
.22f2	20 15 23	jsr $2315			jsr 	_ScanWrite
.22f5	a0 04		ldy #$04			ldy 	#4 							; start of name part
.22f7	20 20 23	jsr $2320			jsr 	CalculateProcedureHash 		; calculate procedure hash
.22fa	20 15 23	jsr $2315			jsr 	_ScanWrite					; and write that
.22fd					_ScanNext:
.22fd	18		clc				clc
.22fe	a0 00		ldy #$00			ldy 	#0
.2300	b1 28		lda ($28),y			lda 	(codePtr),y
.2302	65 28		adc $28				adc 	codePtr
.2304	85 28		sta $28				sta 	codePtr
.2306	90 d5		bcc $22dd			bcc 	_ScanLoop
.2308	e6 29		inc $29				inc 	codePtr+1
.230a	4c dd 22	jmp $22dd			jmp 	_ScanLoop
.230d					_ScanExit:
.230d	a9 00		lda #$00			lda 	#0 							; write ending zero.
.230f	20 15 23	jsr $2315			jsr 	_ScanWrite
.2312	68		pla				pla
.2313	a8		tay				tay
.2314	60		rts				rts
.2315					_ScanWrite:
.2315	a0 00		ldy #$00			ldy 	#0
.2317	91 35		sta ($35),y			sta 	(lowMemory),y
.2319	e6 35		inc $35				inc 	lowMemory
.231b	d0 02		bne $231f			bne 	_SWNoCarry
.231d	e6 36		inc $36				inc 	lowMemory+1
.231f					_SWNoCarry:
.231f	60		rts				rts
.2320					CalculateProcedureHash:
.2320	a9 00		lda #$00			lda 	#0 							; clear hash.
.2322	85 2a		sta $2a				sta 	temp0
.2324					_CPHLoop:
.2324	18		clc				clc 								; add character and rotate and add carry back in
.2325	b1 28		lda ($28),y			lda 	(codePtr),y
.2327	65 2a		adc $2a				adc 	temp0
.2329	6a		ror a				ror 	a
.232a	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.232c	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.232e	b1 28		lda ($28),y			lda 	(codePtr),y
.2330	c8		iny				iny 								; advance incase we go round again.
.2331	c9 3a		cmp #$3a			cmp 	#$3A
.2333	90 ef		bcc $2324			bcc 	_CPHLoop
.2335	a5 2a		lda $2a				lda 	temp0
.2337	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.2338					CommandStop:
.2338	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.233a	20 b5 13	jsr $13b5		jsr	errorHandler
.233d					CommandEnd:
.233d	4c 19 30	jmp $3019			jmp 	WarmStart
.2340					CommandXemu:
.2340	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.2343					AdvanceNextLine:
.2343	a0 00		ldy #$00			ldy 	#0 							; get offset
.2345	b1 28		lda ($28),y			lda 	(codePtr),y
.2347	18		clc				clc 								; add to codePtr
.2348	65 28		adc $28				adc 	codePtr
.234a	85 28		sta $28				sta 	codePtr
.234c	90 02		bcc $2350			bcc 	_ANLNoCarry
.234e	e6 29		inc $29				inc 	codePtr+1
.2350					_ANLNoCarry:
.2350	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.2352	f0 e9		beq $233d			beq 	CommandEnd 					; execute END
.2354	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2356	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.2357					Command_CLS:
.2357	a2 02		ldx #$02		ldx	#2
.2359	20 94 13	jsr $1394		jsr	deviceHandler
.235c	60		rts				rts
.235d					Command_Ink:
.235d	a2 00		ldx #$00			ldx 	#0
.235f	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger
.2362	a2 08		ldx #$08		ldx	#8
.2364	20 94 13	jsr $1394		jsr	deviceHandler
.2367	60		rts				rts
.2368					Command_Paper:
.2368	a2 00		ldx #$00			ldx 	#0
.236a	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger
.236d	a2 12		ldx #$12		ldx	#18
.236f	20 94 13	jsr $1394		jsr	deviceHandler
.2372	60		rts				rts
.2373					Command_Locate:
.2373	a2 00		ldx #$00			ldx 	#0
.2375	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger
.2378	20 34 2f	jsr $2f34			jsr 	CheckComma
.237b	e8		inx				inx
.237c	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger
.237f	98		tya				tya
.2380	48		pha				pha
.2381	a4 49		ldy $49				ldy 	esInt0+1
.2383	a5 48		lda $48				lda 	esInt0
.2385	a2 10		ldx #$10		ldx	#16
.2387	20 94 13	jsr $1394		jsr	deviceHandler
.238a	68		pla				pla
.238b	a8		tay				tay
.238c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.238d					CommandGOSUB:
.238d	20 21 29	jsr $2921			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.2390	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2392	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2394	20 cb 2f	jsr $2fcb			jsr 	RSClaim
.2397	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2399	20 f7 2f	jsr $2ff7			jsr 	RSSavePosition
.239c	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.239e	f0 1b		beq $23bb			beq 	GotoTOS 					; and do a GOTO there.
.23a0					CommandRETURN:
.23a0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.23a2	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23a4	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.23a6	f0 05		beq $23ad			beq 	_isok
.23a8	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.23aa	20 b5 13	jsr $13b5		jsr	errorHandler
.23ad					_isok:
.23ad	a9 01		lda #$01			lda 	#1
.23af	20 0a 30	jsr $300a			jsr 	RSLoadPosition 				; reload the position from offset 1.
.23b2	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.23b4	20 ed 2f	jsr $2fed			jsr 	RSFree
.23b7	60		rts				rts
.23b8					CommandGOTO:
.23b8	20 21 29	jsr $2921			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.23bb					GotoTOS:
.23bb	20 65 21	jsr $2165			jsr 	ResetCodeAddress 			; simple search.
.23be					_GotoSearch:
.23be	a0 00		ldy #$00			ldy 	#0 							; get offset
.23c0	b1 28		lda ($28),y			lda 	(codePtr),y
.23c2	f0 21		beq $23e5			beq 	_GotoError 					; not found.
.23c4	c8		iny				iny									; check LSB match
.23c5	b1 28		lda ($28),y			lda 	(codePtr),y
.23c7	d5 48		cmp $48,x			cmp 	esInt0,x
.23c9	d0 07		bne $23d2			bne 	_GotoNext
.23cb	c8		iny				iny
.23cc	b1 28		lda ($28),y			lda 	(codePtr),y
.23ce	d5 50		cmp $50,x			cmp 	esInt1,x
.23d0	f0 10		beq $23e2			beq 	_GotoFound
.23d2					_GotoNext:
.23d2	a0 00		ldy #$00			ldy 	#0 							; go next line
.23d4	b1 28		lda ($28),y			lda 	(codePtr),y
.23d6	18		clc				clc
.23d7	65 28		adc $28				adc 	codePtr
.23d9	85 28		sta $28				sta 	codePtr
.23db	90 e1		bcc $23be			bcc 	_GotoSearch
.23dd	e6 29		inc $29				inc 	codePtr+1
.23df	4c be 23	jmp $23be			jmp 	_GotoSearch
.23e2					_GotoFound:
.23e2	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.23e4	60		rts				rts
.23e5					_GotoError:
.23e5	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.23e7	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.23ea					Command_VDU:
.23ea	20 21 29	jsr $2921			jsr 	EvaluateRootInteger 			; get integer at root.
.23ed	a5 48		lda $48				lda 	esInt0
.23ef	a2 14		ldx #$14		ldx	#20
.23f1	20 94 13	jsr $1394		jsr	deviceHandler
.23f4					_CVNext:
.23f4	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.23f6	c8		iny				iny
.23f7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.23f9	f0 ef		beq $23ea			beq 	Command_VDU
.23fb	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.23fd	d0 0a		bne $2409			bne 	_CVExit
.23ff	a5 50		lda $50				lda 	esInt1
.2401	a2 14		ldx #$14		ldx	#20
.2403	20 94 13	jsr $1394		jsr	deviceHandler
.2406	4c f4 23	jmp $23f4			jmp 	_CVNext
.2409	88		dey		_CVExit:dey
.240a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.240b					Command_While:
.240b	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.240d	a2 04		ldx #$04			ldx 	#4
.240f	20 cb 2f	jsr $2fcb			jsr 	RSClaim 					; create on stack.
.2412	88		dey				dey
.2413	a9 01		lda #$01			lda 	#1
.2415	20 f7 2f	jsr $2ff7			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2418	c8		iny				iny
.2419	20 23 29	jsr $2923			jsr 	EvaluateInteger				; get the conditional
.241c	20 db 2e	jsr $2edb			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.241f	f0 01		beq $2422			beq 	_CWFail
.2421	60		rts				rts
.2422					_CWFail:
.2422	a9 04		lda #$04			lda 	#4
.2424	20 ed 2f	jsr $2fed			jsr 	RSFree 						; close the just opened position.
.2427	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2429	aa		tax				tax
.242a	20 41 2f	jsr $2f41			jsr 	ScanForward
.242d	60		rts				rts
.242e					Command_Wend:
.242e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2430	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2432	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2434	f0 05		beq $243b			beq 	_isok
.2436	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2438	20 b5 13	jsr $13b5		jsr	errorHandler
.243b					_isok:
.243b	a9 01		lda #$01			lda 	#1
.243d	20 0a 30	jsr $300a			jsr 	RSLoadPosition				; go back until true
.2440	a9 04		lda #$04			lda 	#4
.2442	20 ed 2f	jsr $2fed			jsr 	RSFree 						; close the loop
.2445	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.2446					BinaryProcess:
.2446	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2448	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.244a	0a		asl a				asl 	a
.244b	30 0e		bmi $245b			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.244d	18		clc				clc 								; return CC for integer
.244e	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.2450	f0 08		beq $245a			beq 	_BPExit 					; if both integer then return with CC.
.2452	20 60 24	jsr $2460			jsr 	BPMakeBothFloat 			; make both float
.2455	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2457	95 40		sta $40,x			sta 	esType,x
.2459	38		sec				sec 								; and return with carry set.
.245a					_BPExit:
.245a	60		rts				rts
.245b					_BPStringType:
.245b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.245d	20 b5 13	jsr $13b5		jsr	errorHandler
.2460					BPMakeBothFloat:
.2460	e8		inx				inx
.2461	20 65 24	jsr $2465			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2464	ca		dex				dex
.2465					BPMakeFloat:
.2465	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.2467	4a		lsr a				lsr 	a
.2468	b0 07		bcs $2471			bcs 	_BPIsFloat 					; already a float if set.
.246a	8a		txa				txa
.246b	a2 1a		ldx #$1a		ldx	#26
.246d	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2470	aa		tax				tax
.2471					_BPIsFloat:
.2471	60		rts				rts
.2472					AddHandler:
.2472	20 c1 26	jsr $26c1			jsr 	DereferenceTwo 				; dereference top two on stack.
.2475	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.2477	35 41		and $41,x			and 	esType+1,x
.2479	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.247b	d0 10		bne $248d			bne 	_AHStringConcat				; concatenate strings.
.247d	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.2480	b0 03		bcs $2485			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2482	4c 98 2d	jmp $2d98			jmp 	MInt32Add 							; else do it as integer.
.2485					_IsFPOperation:
.2485	8a		txa				txa 								; call the relevant fp routine
.2486	a2 02		ldx #$02		ldx	#2
.2488	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.248b	aa		tax				tax
.248c	60		rts				rts
.248d					_AHStringConcat:
.248d	8a		txa				txa 								; handled by the string module.
.248e	a2 04		ldx #$04		ldx	#4
.2490	20 d4 32	jsr $32d4		jsr	stringHandler
.2493	aa		tax				tax
.2494	60		rts				rts
.2495					SubHandler:
.2495	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.2498	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.249b	b0 03		bcs $24a0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.249d	4c b2 2d	jmp $2db2			jmp 	MInt32Sub 							; else do it as integer.
.24a0					_IsFPOperation:
.24a0	8a		txa				txa 								; call the relevant fp routine
.24a1	a2 10		ldx #$10		ldx	#16
.24a3	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.24a6	aa		tax				tax
.24a7	60		rts				rts
.24a8					MulHandler:
.24a8	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.24ab	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.24ae	b0 03		bcs $24b3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.24b0	4c cc 2d	jmp $2dcc			jmp 	MInt32Multiply 							; else do it as integer.
.24b3					_IsFPOperation:
.24b3	8a		txa				txa 								; call the relevant fp routine
.24b4	a2 0a		ldx #$0a		ldx	#10
.24b6	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.24b9	aa		tax				tax
.24ba	60		rts				rts
.24bb					DivHandler:
.24bb	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.24be	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.24c1	b0 03		bcs $24c6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.24c3	4c 89 2c	jmp $2c89			jmp 	MInt32SDivide 							; else do it as integer.
.24c6					_IsFPOperation:
.24c6	8a		txa				txa 								; call the relevant fp routine
.24c7	a2 06		ldx #$06		ldx	#6
.24c9	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.24cc	aa		tax				tax
.24cd	60		rts				rts
.24ce					ModHandler:
.24ce	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.24d1	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.24d4	b0 03		bcs $24d9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.24d6	4c 07 2d	jmp $2d07			jmp 	MInt32Modulus 							; else do it as integer.
.24d9					_IsFPOperation:
.24d9	8a		txa				txa 								; call the relevant fp routine
.24da	a2 08		ldx #$08		ldx	#8
.24dc	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.24df	aa		tax				tax
.24e0	60		rts				rts
.24e1					XorHandler:
.24e1	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.24e4	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.24e7	b0 03		bcs $24ec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.24e9	4c 3b 2c	jmp $2c3b			jmp 	MInt32Xor 							; else do it as integer.
.24ec					_IsFPOperation:
.24ec	8a		txa				txa 								; call the relevant fp routine
.24ed	a2 08		ldx #$08		ldx	#8
.24ef	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.24f2	aa		tax				tax
.24f3	60		rts				rts
.24f4					OrHandler:
.24f4	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.24f7	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.24fa	b0 03		bcs $24ff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.24fc	4c 22 2c	jmp $2c22			jmp 	MInt32Or 							; else do it as integer.
.24ff					_IsFPOperation:
.24ff	8a		txa				txa 								; call the relevant fp routine
.2500	a2 08		ldx #$08		ldx	#8
.2502	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2505	aa		tax				tax
.2506	60		rts				rts
.2507					AndHandler:
.2507	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.250a	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.250d	b0 03		bcs $2512			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.250f	4c 09 2c	jmp $2c09			jmp 	MInt32And 							; else do it as integer.
.2512					_IsFPOperation:
.2512	8a		txa				txa 								; call the relevant fp routine
.2513	a2 08		ldx #$08		ldx	#8
.2515	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2518	aa		tax				tax
.2519	60		rts				rts
.251a					ShlHandler:
.251a	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.251d	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.2520	b0 03		bcs $2525			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2522	4c 9b 25	jmp $259b			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2525					_IsFPOperation:
.2525	8a		txa				txa 								; call the relevant fp routine
.2526	a2 08		ldx #$08		ldx	#8
.2528	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.252b	aa		tax				tax
.252c	60		rts				rts
.252d					ShrHandler:
.252d	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.2530	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.2533	b0 03		bcs $2538			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2535	4c 9e 25	jmp $259e			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2538					_IsFPOperation:
.2538	8a		txa				txa 								; call the relevant fp routine
.2539	a2 08		ldx #$08		ldx	#8
.253b	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.253e	aa		tax				tax
.253f	60		rts				rts
.2540					WordRefHandler:
.2540	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.2543	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.2546	b0 03		bcs $254b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2548	4c 8d 25	jmp $258d			jmp 	MInt32WordIndirect 							; else do it as integer.
.254b					_IsFPOperation:
.254b	8a		txa				txa 								; call the relevant fp routine
.254c	a2 08		ldx #$08		ldx	#8
.254e	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2551	aa		tax				tax
.2552	60		rts				rts
.2553					ByteRefHandler:
.2553	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.2556	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.2559	b0 03		bcs $255e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.255b	4c 91 25	jmp $2591			jmp 	MInt32ByteIndirect 							; else do it as integer.
.255e					_IsFPOperation:
.255e	8a		txa				txa 								; call the relevant fp routine
.255f	a2 08		ldx #$08		ldx	#8
.2561	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2564	aa		tax				tax
.2565	60		rts				rts
.2566					PowerHandler:
.2566	20 c1 26	jsr $26c1			jsr 	DereferenceTwo
.2569	20 46 24	jsr $2446			jsr 	BinaryProcess 				; check to see if either is float
.256c	b0 03		bcs $2571			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.256e	4c 79 25	jmp $2579			jmp 	PowerInteger 							; else do it as integer.
.2571					_IsFPOperation:
.2571	8a		txa				txa 								; call the relevant fp routine
.2572	a2 16		ldx #$16		ldx	#22
.2574	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2577	aa		tax				tax
.2578	60		rts				rts
.2579					PowerInteger:
.2579	20 60 24	jsr $2460			jsr 	BPMakeBothFloat				; make them float.
.257c	8a		txa				txa
.257d	a2 16		ldx #$16		ldx	#22
.257f	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2582	a2 12		ldx #$12		ldx	#18
.2584	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2587	aa		tax				tax
.2588	a9 00		lda #$00			lda 	#0 							; make type integer
.258a	95 40		sta $40,x			sta 	esType,x
.258c	60		rts				rts
.258d					Mint32WordIndirect:
.258d	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.258f	d0 02		bne $2593			bne 	Min32Indirect
.2591					Mint32ByteIndirect:
.2591	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2593					Min32Indirect:
.2593	48		pha				pha 								; save the indirection
.2594	20 98 2d	jsr $2d98			jsr 	MInt32Add 					; add a!b a?b
.2597	68		pla				pla 								; and set the type to reference.
.2598	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.259a	60		rts				rts
.259b					Mint32ShiftLeftX:
.259b	18		clc				clc 								; CC shift left
.259c	90 01		bcc $259f			bcc 	Mint32Shift
.259e					Mint32ShiftRightX:
.259e	38		sec				sec 								; CS shift right
.259f					Mint32Shift:
.259f	08		php				php 								; save carry flag on stack.
.25a0	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.25a2	15 59		ora $59,x			ora 	esInt2+1,x
.25a4	15 61		ora $61,x			ora 	esInt3+1,x
.25a6	d0 1e		bne $25c6			bne 	_MShiftZero
.25a8	b5 49		lda $49,x			lda 	esInt0+1,x
.25aa	c9 20		cmp #$20			cmp 	#32
.25ac	b0 18		bcs $25c6			bcs 	_MShiftZero
.25ae					_MShiftLoop:
.25ae	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.25b0	f0 12		beq $25c4			beq 	_MShiftExit
.25b2	d6 49		dec $49,x			dec 	esInt0+1,x
.25b4	28		plp				plp 								; restore and save carry
.25b5	08		php				php
.25b6	90 06		bcc $25be			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.25b8	20 d2 2e	jsr $2ed2			jsr 	Mint32ShiftRight
.25bb	4c ae 25	jmp $25ae			jmp 	_MShiftLoop
.25be					_MShiftLeft:
.25be	20 c9 2e	jsr $2ec9			jsr 	Mint32ShiftLeft
.25c1	4c ae 25	jmp $25ae			jmp 	_MShiftLoop
.25c4					_MShiftExit:
.25c4	28		plp				plp	 								; throw saved carry and exit
.25c5	60		rts				rts
.25c6					_MShiftZero:
.25c6	4c b4 2e	jmp $2eb4			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.25c9					PerformComparison:
.25c9	20 c1 26	jsr $26c1			jsr 	DereferenceTwo 				; make both values.
.25cc	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.25ce	35 41		and $41,x			and 	esType+1,x
.25d0	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.25d1	30 1d		bmi $25f0			bmi 	_PCIsString
.25d3	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.25d5	15 41		ora $41,x			ora 	esType+1,x
.25d7	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.25d8	30 22		bmi $25fc			bmi 	_PCError
.25da	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.25dc	f0 0f		beq $25ed			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.25de	20 60 24	jsr $2460			jsr 	BPMakeBothFloat 			; make both float
.25e1	8a		txa				txa
.25e2	a2 04		ldx #$04		ldx	#4
.25e4	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.25e7	86 32		stx $32				stx 	tempShort 					; save result
.25e9	aa		tax				tax
.25ea	a5 32		lda $32				lda 	tempShort
.25ec	60		rts				rts
.25ed					_PCIsInteger:
.25ed	4c 54 2c	jmp $2c54			jmp 	MInt32Compare
.25f0					_PCIsString:
.25f0	8a		txa				txa 								; A has SP
.25f1	a2 08		ldx #$08		ldx	#8
.25f3	20 d4 32	jsr $32d4		jsr	stringHandler
.25f6	86 32		stx $32				stx 	tempShort 					; save result
.25f8	aa		tax				tax 								; put SP back in X and get result.
.25f9	a5 32		lda $32				lda 	tempShort
.25fb	60		rts				rts
.25fc					_PCError:
.25fc	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.25fe	20 b5 13	jsr $13b5		jsr	errorHandler
.2601					CompareEquals:
.2601	20 c9 25	jsr $25c9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2604	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2606	f0 35		beq $263d			beq  	CompareTrue
.2608	4c 40 26	jmp $2640			jmp 	CompareFalse
.260b					CompareLess:
.260b	20 c9 25	jsr $25c9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.260e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2610	f0 2b		beq $263d			beq  	CompareTrue
.2612	4c 40 26	jmp $2640			jmp 	CompareFalse
.2615					CompareGreater:
.2615	20 c9 25	jsr $25c9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2618	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.261a	f0 21		beq $263d			beq  	CompareTrue
.261c	4c 40 26	jmp $2640			jmp 	CompareFalse
.261f					CompareNotEquals:
.261f	20 c9 25	jsr $25c9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2622	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2624	d0 17		bne $263d			bne  	CompareTrue
.2626	4c 40 26	jmp $2640			jmp 	CompareFalse
.2629					CompareGreaterEq:
.2629	20 c9 25	jsr $25c9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.262c	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.262e	d0 0d		bne $263d			bne  	CompareTrue
.2630	4c 40 26	jmp $2640			jmp 	CompareFalse
.2633					CompareLessEq:
.2633	20 c9 25	jsr $25c9			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2636	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2638	d0 03		bne $263d			bne  	CompareTrue
.263a	4c 40 26	jmp $2640			jmp 	CompareFalse
.263d					CompareTrue:
.263d	4c b0 2e	jmp $2eb0			jmp 	MInt32True
.2640					CompareFalse:
.2640	4c b4 2e	jmp $2eb4			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.2643					Event_Str:
.2643	20 0d 29	jsr $290d			jsr 	EvaluateNumeric 			; get a number.
.2646	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2648	d0 13		bne $265d			bne 	_ESFloat
.264a	20 a0 26	jsr $26a0			jsr 	ConvertGetBase 				; get base, or default.
.264d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.264f	85 2a		sta $2a				sta 	temp0
.2651	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2653	85 2b		sta $2b				sta 	1+(temp0)
.2655	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2657	20 0a 2e	jsr $2e0a			jsr 	MInt32ToString 				; convert to string.
.265a	4c 6a 26	jmp $266a			jmp 	_ESCloneExit 				; clone and exit.
.265d					_ESFloat:
.265d	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; check closing )
.2660	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2663	8a		txa				txa
.2664	a2 14		ldx #$14		ldx	#20
.2666	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2669	aa		tax				tax
.266a					_ESCloneExit:
.266a	8a		txa				txa
.266b	a2 02		ldx #$02		ldx	#2
.266d	20 d4 32	jsr $32d4		jsr	stringHandler
.2670	aa		tax				tax
.2671	60		rts				rts
.2672					UnaryVal:
.2672	38		sec				sec 								; Carry set to return value
.2673	b0 01		bcs $2676			bcs 	ValueMain
.2675					UnaryIsVal:
.2675	18		clc				clc									; Carry clear to return legitimacy
.2676					ValueMain:
.2676	08		php				php 								; save results (CS is value, CC is validation)
.2677	20 18 29	jsr $2918			jsr 	EvaluateString
.267a	20 a0 26	jsr $26a0			jsr 	ConvertGetBase 				; get base, if any.
.267d	98		tya				tya
.267e	48		pha				pha
.267f	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2682	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2684	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2686	20 22 2d	jsr $2d22			jsr 	MInt32FromString 			; convert it back from a string.
.2689	b0 0c		bcs $2697			bcs 	_VMSuccess 					; successfully converted.
.268b	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.268d	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.268f	f0 00		beq $2691			beq 	_VMFailed 	 				; so we failed.
.2691					_VMFailed:
.2691	68		pla				pla
.2692	a8		tay				tay
.2693	28		plp				plp
.2694	4c b4 2e	jmp $2eb4			jmp 	MInt32False 				; return 0 whatever.
.2697					_VMSuccess:
.2697	68		pla				pla
.2698	a8		tay				tay
.2699	28		plp				plp 								; if CS the it was val() so we want the value.
.269a	b0 03		bcs $269f			bcs 	_VMExit
.269c	4c b0 2e	jmp $2eb0			jmp 	MInt32True 					; otherwise return true as successful.
.269f					_VMExit:
.269f	60		rts				rts
.26a0					ConvertGetBase:
.26a0	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.26a2	95 49		sta $49,x			sta 	esInt0+1,x
.26a4	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.26a6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.26a8	d0 0e		bne $26b8			bne 	_CGBDone 					; not found, should be )
.26aa	e8		inx				inx 								; next level
.26ab	c8		iny				iny 								; skip comma.
.26ac	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger		; evaluate the base.
.26af	ca		dex				dex
.26b0	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.26b2	90 08		bcc $26bc			bcc 	_CGBValue 					; (it should work as high as 37)
.26b4	c9 11		cmp #$11			cmp 	#17
.26b6	b0 04		bcs $26bc			bcs 	_CGBValue
.26b8					_CGBDone:
.26b8	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.26bb	60		rts				rts
.26bc					_CGBValue:
.26bc	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.26be	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.26c1					DereferenceTwo:
.26c1	e8		inx				inx
.26c2	20 c6 26	jsr $26c6			jsr 	DereferenceOne
.26c5	ca		dex				dex
.26c6					DereferenceOne:
.26c6	b5 40		lda $40,x			lda 	esType,x
.26c8	10 3d		bpl $2707			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.26ca	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.26cb	b0 3b		bcs $2708			bcs 	_DRFloatDeReference
.26cd	98		tya				tya
.26ce	48		pha				pha
.26cf	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.26d1	85 2a		sta $2a				sta 	temp0
.26d3	b5 50		lda $50,x			lda 	esInt1,x
.26d5	85 2b		sta $2b				sta 	temp0+1
.26d7	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.26d9	95 50		sta $50,x			sta 	esInt1,x
.26db	95 58		sta $58,x			sta 	esInt2,x
.26dd	95 60		sta $60,x			sta 	esInt3,x
.26df	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.26e1	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.26e3	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.26e4	30 0d		bmi $26f3			bmi 	_DeRefString 				; string, 2 bytes only
.26e6	d0 11		bne $26f9			bne 	_DeRefByte 					; byte 1 byte only
.26e8					_DeRefLong:
.26e8	a0 03		ldy #$03			ldy 	#3
.26ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.26ec	95 60		sta $60,x			sta 	esInt3,x
.26ee	88		dey				dey
.26ef	b1 2a		lda ($2a),y			lda 	(temp0),y
.26f1	95 58		sta $58,x			sta 	esInt2,x
.26f3					_DeRefString:
.26f3	a0 01		ldy #$01			ldy 	#1
.26f5	b1 2a		lda ($2a),y			lda 	(temp0),y
.26f7	95 50		sta $50,x			sta 	esInt1,x
.26f9					_DeRefByte:
.26f9	a0 00		ldy #$00			ldy 	#0
.26fb	b1 2a		lda ($2a),y			lda 	(temp0),y
.26fd	95 48		sta $48,x			sta 	esInt0,x
.26ff	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.2701	29 40		and #$40			and 	#$40
.2703	95 40		sta $40,x			sta 	esType,x
.2705	68		pla				pla
.2706	a8		tay				tay
.2707					_DRNotReference
.2707	60		rts				rts
.2708					_DRFloatDereference:
.2708	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 					; address to deref in temp0
.270b	8a		txa				txa
.270c	a2 1c		ldx #$1c		ldx	#28
.270e	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2711	aa		tax				tax
.2712	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2714	95 40		sta $40,x			sta 	esType,x
.2716	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2717					EvaluateLevel:
.2717	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2719	b0 1e		bcs $2739			bcs 	_ELStack
.271b	48		pha				pha 								; save precedence level.
.271c	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.271e	95 48		sta $48,x			sta 	esInt0,x
.2720	95 50		sta $50,x			sta 	esInt1,x
.2722	95 58		sta $58,x			sta 	esInt2,x
.2724	95 60		sta $60,x			sta 	esInt3,x
.2726	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.2728	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.272a	30 26		bmi $2752			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.272c	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.272d	30 0f		bmi $273e			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.272f	8a		txa				txa 								; stack level in X
.2730	a2 00		ldx #$00		ldx	#0
.2732	20 d8 3d	jsr $3dd8		jsr	variableHandler
.2735	aa		tax				tax
.2736	4c 7b 27	jmp $277b			jmp		_ELHasTerm
.2739					_ELStack:
.2739	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.273b	20 b5 13	jsr $13b5		jsr	errorHandler
.273e					_ELIsConstant:
.273e	4a		lsr a				lsr 	a 							; get the value back
.273f	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2741	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.2743					_ELCheckNext:
.2743	c8		iny				iny 								; look at next
.2744	b1 28		lda ($28),y			lda 	(codePtr),y
.2746	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2748	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.274a	b0 2f		bcs $277b			bcs 	_ELHasTerm 					; done getting the constant.
.274c	20 14 28	jsr $2814			jsr 	ELShiftByteIn 				; shift byte into position.
.274f	4c 43 27	jmp $2743			jmp 	_ELCheckNext
.2752					_ELIsToken:
.2752	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2754	f0 0f		beq $2765			beq 	_ELIsString
.2756	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2758	d0 5f		bne $27b9			bne 	_ELCheckUnary
.275a	8a		txa				txa 								; put X into A
.275b	c8		iny				iny 								; skip over the float marker
.275c	a2 18		ldx #$18		ldx	#24
.275e	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2761	aa		tax				tax 								; restore X
.2762	4c 7b 27	jmp $277b			jmp 	_ELHasTerm
.2765					_ELIsString:
.2765	98		tya				tya 								; address of string is codePtr+y+1
.2766	38		sec				sec
.2767	65 28		adc $28				adc 	codePtr
.2769	95 48		sta $48,x			sta 	esInt0,x
.276b	a5 29		lda $29				lda 	codePtr+1
.276d	69 00		adc #$00			adc 	#0
.276f	95 50		sta $50,x			sta 	esInt1,x
.2771	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2773	95 40		sta $40,x			sta 	esType,x
.2775	c8		iny				iny 								; skip over string.
.2776	98		tya				tya
.2777	38		sec				sec									; +1 for the length itself.
.2778	71 28		adc ($28),y			adc 	(codePtr),y
.277a	a8		tay				tay 								; and fall through to term loop code.
.277b					_ELHasTerm:
.277b	b1 28		lda ($28),y			lda 	(codePtr),y
.277d	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.277f	90 04		bcc $2785			bcc 	_ELPopExit
.2781	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2783	90 02		bcc $2787			bcc 	_ELHasBinaryTerm
.2785					_ELPopExit:
.2785	68		pla				pla
.2786					_ELExit:
.2786	60		rts				rts
.2787					_ELHasBinaryTerm:
.2787	84 32		sty $32				sty 	tempShort 					; save position
.2789	a8		tay				tay 								; use token as an index and get the precedence.
.278a	b9 bc 27	lda $27bc,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.278d	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.278f	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2791	68		pla				pla 								; restore current level.
.2792	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2794	b0 f0		bcs $2786			bcs 	_ELExit
.2796	48		pha				pha 								; save current level back on the stack.
.2797	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2799	48		pha				pha
.279a	c8		iny				iny
.279b	e8		inx				inx 								; calculate the RHS at the operator precedence.
.279c	a5 32		lda $32				lda 	tempShort
.279e	20 17 27	jsr $2717			jsr 	EvaluateLevel
.27a1	ca		dex				dex
.27a2	68		pla				pla 								; get the operator back out.
.27a3					_ELExecuteA:
.27a3	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.27a5	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.27a6	aa		tax				tax
.27a7	bd 7c 21	lda $217c,x			lda 	Group0Vectors,x
.27aa	85 2a		sta $2a				sta 	temp0
.27ac	bd 7d 21	lda $217d,x			lda 	Group0Vectors+1,x
.27af	85 2b		sta $2b				sta 	temp0+1
.27b1	a6 32		ldx $32				ldx 	tempShort
.27b3	20 00 28	jsr $2800			jsr 	_ELCallTemp0
.27b6	4c 7b 27	jmp $277b			jmp 	_ELHasTerm 					; and loop back round.
.27b9					_ELCheckUnary:
.27b9	c8		iny				iny 								; skip over token.
.27ba	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.27bc	f0 19		beq $27d7			beq 	_ELMinus
.27be	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.27c0	f0 2c		beq $27ee			beq 	_ELIndirect
.27c2	c9 98		cmp #$98			cmp 	#TKW_QMARK
.27c4	f0 28		beq $27ee			beq 	_ELIndirect
.27c6	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.27c8	f0 39		beq $2803			beq 	_ELExtension
.27ca	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.27cc	90 04		bcc $27d2			bcc 	_ELUSyntax
.27ce	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.27d0	90 d1		bcc $27a3			bcc 	_ELExecuteA 				; if so do that token.
.27d2					_ELUSyntax:
.27d2	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.27d4	20 b5 13	jsr $13b5		jsr	errorHandler
.27d7					_ELMinus:
.27d7	20 ec 28	jsr $28ec			jsr 	EvaluateNumericTerm 		; get a number to negate.
.27da	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.27dc	f0 0a		beq $27e8			beq 	_ELMinusInteger
.27de	8a		txa				txa
.27df	a2 0c		ldx #$0c		ldx	#12
.27e1	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.27e4	aa		tax				tax
.27e5	4c 7b 27	jmp $277b			jmp 	_ELHasTerm
.27e8					_ELMinusInteger:
.27e8	20 6e 2e	jsr $2e6e			jsr 	MInt32Negate 				; do int negate
.27eb	4c 7b 27	jmp $277b			jmp 	_ELHasTerm
.27ee					_ELIndirect:
.27ee	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.27ef	20 f5 28	jsr $28f5			jsr 	EvaluateIntegerTerm 		; integer address
.27f2	68		pla				pla
.27f3	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.27f5	f0 02		beq $27f9			beq 	_ELHaveModifier
.27f7	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.27f9					_ELHaveModifier:
.27f9	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.27fb	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.27fd	4c 7b 27	jmp $277b			jmp 	_ELHasTerm
.2800					_ELCallTemp0:
.2800	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2803					_ELExtension:
.2803	8a		txa				txa 								; stack pos in A
.2804	20 a4 16	jsr $16a4		jsr	extensionHandler
.2807	aa		tax				tax 								; restore stack
.2808	4c 7b 27	jmp $277b			jmp 	_ELHasTerm
.280b					UnaryParenthesis:
.280b	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.280d	20 17 27	jsr $2717			jsr 	EvaluateLevel
.2810	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; check for )
.2813	60		rts				rts
.2814					ELShiftByteIn:
.2814	48		pha				pha 								; save bits to shift in.
.2815	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2817	48		pha				pha
.2818	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.281a	95 60		sta $60,x			sta 	esInt3,x
.281c	b5 50		lda $50,x			lda 	esInt1,x
.281e	95 58		sta $58,x			sta 	esInt2,x
.2820	b5 48		lda $48,x			lda 	esInt0,x
.2822	95 50		sta $50,x			sta 	esInt1,x
.2824	a9 00		lda #$00			lda 	#0
.2826	95 48		sta $48,x			sta 	esInt0,x
.2828	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2829	29 03		and #$03			and 	#3 							; only want lower 2 bits
.282b	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.282d					_ELShiftLoop:
.282d	4a		lsr a				lsr 	a
.282e	76 60		ror $60,x			ror 	esInt3,x
.2830	76 58		ror $58,x			ror 	esInt2,x
.2832	76 50		ror $50,x			ror 	esInt1,x
.2834	76 48		ror $48,x			ror 	esInt0,x
.2836	c9 01		cmp #$01			cmp 	#1
.2838	d0 f3		bne $282d			bne 	_ELShiftLoop
.283a	68		pla				pla 								; get original 6 bit value and OR in.
.283b	29 3f		and #$3f			and 	#$3F
.283d	15 48		ora $48,x			ora 	esInt0,x
.283f	95 48		sta $48,x			sta 	esInt0,x
.2841	60		rts				rts
.2842					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2842	01					.byte	$01			; $86 and
>2843	01					.byte	$01			; $87 or
>2844	01					.byte	$01			; $88 xor
>2845	02					.byte	$02			; $89 >=
>2846	02					.byte	$02			; $8a <=
>2847	02					.byte	$02			; $8b >
>2848	02					.byte	$02			; $8c <
>2849	02					.byte	$02			; $8d =
>284a	02					.byte	$02			; $8e <>
>284b	03					.byte	$03			; $8f +
>284c	03					.byte	$03			; $90 -
>284d	04					.byte	$04			; $91 >>
>284e	04					.byte	$04			; $92 <<
>284f	04					.byte	$04			; $93 *
>2850	04					.byte	$04			; $94 /
>2851	04					.byte	$04			; $95 mod
>2852	05					.byte	$05			; $96 ^
>2853	06					.byte	$06			; $97 !
>2854	06					.byte	$06			; $98 ?
>2855	82					.byte	$82			; $99 repeat
>2856	82					.byte	$82			; $9a while
>2857	82					.byte	$82			; $9b for
>2858	82					.byte	$82			; $9c if
>2859	82					.byte	$82			; $9d defproc
>285a	80					.byte	$80			; $9e until
>285b	80					.byte	$80			; $9f wend
>285c	80					.byte	$80			; $a0 next
>285d	80					.byte	$80			; $a1 then
>285e	80					.byte	$80			; $a2 endif
>285f	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.2860					EventFunction:
.2860	20 56 29	jsr $2956			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2863	b5 40		lda $40,x			lda 	esType,x
.2865	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2867	d0 5b		bne $28c4			bne 	_EFType
.2869	20 34 2f	jsr $2f34			jsr 	CheckComma
.286c	e8		inx				inx
.286d	20 23 29	jsr $2923			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2870	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; finish off with the right bracket
.2873	ca		dex				dex
.2874	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2876	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2878	15 58		ora $58,x			ora 	esInt2,x
.287a	15 60		ora $60,x			ora 	esInt3,x
.287c	d0 41		bne $28bf			bne 	_EFValue
.287e	98		tya				tya
.287f	48		pha				pha
.2880	8a		txa				txa
.2881	48		pha				pha
.2882	a2 1c		ldx #$1c		ldx	#28
.2884	20 94 13	jsr $1394		jsr	deviceHandler
.2887	84 2d		sty $2d				sty 	temp1+1
.2889	85 2c		sta $2c				sta 	temp1
.288b	68		pla				pla
.288c	aa		tax				tax
.288d	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2890	a0 03		ldy #$03			ldy 	#3							; if -ve
.2892	b1 2a		lda ($2a),y			lda 	(temp0),y
.2894	30 23		bmi $28b9			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2896	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2898	b1 2a		lda ($2a),y			lda 	(temp0),y
.289a	c8		iny				iny
.289b	11 2a		ora ($2a),y			ora 	(temp0),y
.289d	f0 17		beq $28b6			beq 	_EFInitialise 				; if so, initialise the value but return false.
.289f	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.28a1	38		sec				sec
.28a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.28a4	e5 2c		sbc $2c				sbc 	temp1
.28a6	c8		iny				iny
.28a7	b1 2a		lda ($2a),y			lda 	(temp0),y
.28a9	e5 2d		sbc $2d				sbc 	temp1+1
.28ab	10 0c		bpl $28b9			bpl 	_EFFail 					; if trigger >= timer then return False
.28ad	20 c9 28	jsr $28c9			jsr 	SetEventTimer 				; reset the timer for next time.
.28b0	20 b0 2e	jsr $2eb0			jsr	 	MInt32True 					; and treutn true as fired.
.28b3	68		pla				pla
.28b4	a8		tay				tay
.28b5	60		rts				rts
.28b6					_EFInitialise:
.28b6	20 c9 28	jsr $28c9			jsr		SetEventTimer 				; set trigger time to time + elapsed
.28b9					_EFFail:
.28b9	68		pla				pla
.28ba	a8		tay				tay
.28bb	20 b4 2e	jsr $2eb4			jsr 	MInt32False
.28be	60		rts				rts
.28bf					_EFValue:
.28bf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.28c1	20 b5 13	jsr $13b5		jsr	errorHandler
.28c4					_EFType:
.28c4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.28c6	20 b5 13	jsr $13b5		jsr	errorHandler
.28c9					SetEventTimer:
.28c9	a0 00		ldy #$00			ldy 	#0
.28cb	18		clc				clc
.28cc	a5 2c		lda $2c				lda 	temp1
.28ce	75 49		adc $49,x			adc 	esInt0+1,x
.28d0	91 2a		sta ($2a),y			sta		(temp0),y
.28d2	c8		iny				iny
.28d3	a5 2d		lda $2d				lda 	temp1+1
.28d5	75 51		adc $51,x			adc 	esInt1+1,x
.28d7	91 2a		sta ($2a),y			sta		(temp0),y
.28d9	88		dey				dey
.28da	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.28dc	d0 04		bne $28e2			bne 	_SETExit 					; zero means initialise.....
.28de	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.28e0	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.28e2					_SETExit:
.28e2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.28e3					EvaluateTerm:
.28e3	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.28e5	20 17 27	jsr $2717			jsr 	EvaluateLevel
.28e8	20 c6 26	jsr $26c6			jsr 	DereferenceOne
.28eb	60		rts				rts
.28ec					EvaluateNumericTerm:
.28ec	20 e3 28	jsr $28e3			jsr 	EvaluateTerm
.28ef	b5 40		lda $40,x			lda 	esType,x
.28f1	0a		asl a				asl 	a 							; see if it's a string.
.28f2	30 09		bmi $28fd			bmi 	ENTType
.28f4	60		rts				rts
.28f5					EvaluateIntegerTerm:
.28f5	20 e3 28	jsr $28e3			jsr 	EvaluateTerm
.28f8	b5 40		lda $40,x			lda 	esType,x
.28fa	d0 01		bne $28fd			bne 	ENTType
.28fc	60		rts				rts
.28fd					ENTType:
.28fd	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.28ff	20 b5 13	jsr $13b5		jsr	errorHandler
.2902					EvaluateRoot:
.2902	a2 00		ldx #$00			ldx 	#0
.2904					Evaluate:
.2904	a9 00		lda #$00			lda 	#0
.2906	20 17 27	jsr $2717			jsr 	EvaluateLevel
.2909	20 c6 26	jsr $26c6			jsr 	DereferenceOne
.290c	60		rts				rts
.290d					EvaluateNumeric:
.290d	20 04 29	jsr $2904			jsr 	Evaluate
.2910	b5 40		lda $40,x			lda 	esType,x
.2912	0a		asl a				asl 	a 							; see if it's a string.
.2913	30 e8		bmi $28fd			bmi 	ENTType
.2915	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2916	4a		lsr a				lsr 	a
.2917	60		rts				rts
.2918					EvaluateString:
.2918	20 04 29	jsr $2904			jsr 	Evaluate
.291b	b5 40		lda $40,x			lda 	esType,x
.291d	0a		asl a				asl 	a 							; see if it's a string.
.291e	10 dd		bpl $28fd			bpl 	ENTType
.2920	60		rts				rts
.2921					EvaluateRootInteger:
.2921	a2 00		ldx #$00			ldx 	#0
.2923					EvaluateInteger:
.2923	20 04 29	jsr $2904			jsr 	Evaluate
.2926	b5 40		lda $40,x			lda 	esType,x
.2928	d0 d3		bne $28fd			bne 	ENTType
.292a	60		rts				rts
.292b					EvaluateSmallInteger:
.292b	20 23 29	jsr $2923			jsr 	EvaluateInteger
.292e	b5 50		lda $50,x			lda 	esInt1,x
.2930	15 58		ora $58,x			ora 	esInt2,x
.2932	15 60		ora $60,x			ora 	esInt3,x
.2934	d0 03		bne $2939			bne 	_ESIValue
.2936	b5 48		lda $48,x			lda 	esInt0,x
.2938	60		rts				rts
.2939					_ESIValue:
.2939	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.293b	20 b5 13	jsr $13b5		jsr	errorHandler
.293e					LinkEvaluate:
.293e	aa		tax				tax
.293f	20 04 29	jsr $2904			jsr 	Evaluate
.2942	8a		txa				txa
.2943	60		rts				rts
.2944					LinkEvaluateTerm:
.2944	aa		tax				tax
.2945	20 e3 28	jsr $28e3			jsr 	EvaluateTerm
.2948	8a		txa				txa
.2949	60		rts				rts
.294a					LinkEvaluateInteger:
.294a	aa		tax				tax
.294b	20 23 29	jsr $2923			jsr 	EvaluateInteger
.294e	8a		txa				txa
.294f	60		rts				rts
.2950					LinkEvaluateSmallInt:
.2950	aa		tax				tax
.2951	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger
.2954	8a		txa				txa
.2955	60		rts				rts
.2956					EvaluateReference:
.2956	ad 53 28	lda $2853			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2959	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.295a	e9 01		sbc #$01			sbc 	#1
.295c	20 17 27	jsr $2717			jsr 	EvaluateLevel
.295f	b5 40		lda $40,x			lda 	esType,x
.2961	10 01		bpl $2964			bpl 	_ERFail
.2963	60		rts				rts
.2964					_ERFail:
.2964	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2966	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2969					UnaryLen:
.2969	20 77 29	jsr $2977			jsr 	ULStart
.296c					ULFinish:
.296c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.296e	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2970	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit 				; write it out.
.2973	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.2976	60		rts				rts
.2977	20 18 29	jsr $2918	ULStart:jsr 	EvaluateString
.297a	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.297c	85 2a		sta $2a				sta 	temp0
.297e	b5 50		lda $50,x			lda 	esInt1,x
.2980	85 2b		sta $2b				sta 	temp0+1
.2982	84 32		sty $32				sty 	tempShort 					; get length
.2984	a0 00		ldy #$00			ldy 	#0
.2986	60		rts				rts
.2987					UnaryAsc:
.2987	20 77 29	jsr $2977			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.298a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.298c	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.298d	c9 00		cmp #$00			cmp 	#0
.298f	d0 db		bne $296c			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2991	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2993	20 b5 13	jsr $13b5		jsr	errorHandler
.2996					UnaryAbs:
.2996	20 0d 29	jsr $290d			jsr 	EvaluateNumeric 			; some numeric value
.2999	b0 07		bcs $29a2			bcs 	_UAFloat 					; CS then float, so use that function
.299b	20 69 2e	jsr $2e69			jsr 	MInt32Absolute 				; int version
.299e	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.29a1	60		rts				rts
.29a2					_UAFloat:
.29a2	8a		txa				txa 								; float version
.29a3	a2 00		ldx #$00		ldx	#0
.29a5	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.29a8	aa		tax				tax
.29a9	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.29ac	60		rts				rts
.29ad					UnarySgn:
.29ad	20 0d 29	jsr $290d			jsr 	EvaluateNumeric 			; same as above but sign of value
.29b0	b0 07		bcs $29b9			bcs 	_USFloat
.29b2	20 a1 2e	jsr $2ea1			jsr 	MInt32Sign
.29b5	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.29b8	60		rts				rts
.29b9					_USFloat:
.29b9	8a		txa				txa
.29ba	a2 0e		ldx #$0e		ldx	#14
.29bc	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.29bf	aa		tax				tax
.29c0	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.29c3	60		rts				rts
.29c4					UnaryPeek:
.29c4	20 f0 29	jsr $29f0			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.29c7	4c e4 29	jmp $29e4			jmp 	PDLByte0
.29ca					UnaryDeek:
.29ca	20 f0 29	jsr $29f0			jsr 	PDLCode
.29cd	4c de 29	jmp $29de			jmp 	PDLByte1
.29d0					UnaryLeek:
.29d0	20 f0 29	jsr $29f0			jsr 	PDLCode
.29d3	a0 03		ldy #$03			ldy 	#3							; read 3-2
.29d5	b1 2a		lda ($2a),y			lda 	(temp0),y
.29d7	95 60		sta $60,x			sta 	esInt3,x
.29d9	88		dey				dey
.29da	b1 2a		lda ($2a),y			lda 	(temp0),y
.29dc	95 58		sta $58,x			sta 	esInt2,x
.29de					PDLByte1:
.29de	a0 01		ldy #$01			ldy 	#1
.29e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.29e2	95 50		sta $50,x			sta 	esInt1,x
.29e4					PDLByte0:
.29e4	a0 00		ldy #$00			ldy 	#0
.29e6	b1 2a		lda ($2a),y			lda 	(temp0),y
.29e8	95 48		sta $48,x			sta 	esInt0,x
.29ea	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.29ec	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; check right and return
.29ef	60		rts				rts
.29f0					PDLCode:
.29f0	20 23 29	jsr $2923			jsr 	EvaluateInteger 			; some address
.29f3	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.29f5	85 2a		sta $2a				sta 	temp0
.29f7	b5 50		lda $50,x			lda 	esInt1,x
.29f9	85 2b		sta $2b				sta 	temp0+1
.29fb	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.29fd	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.29ff	95 58		sta $58,x			sta 	esInt2,x
.2a01	95 60		sta $60,x			sta 	esInt3,x
.2a03	84 32		sty $32				sty 	tempShort 					; save Y
.2a05	60		rts				rts
.2a06					Unary_Random:
.2a06	20 e4 2e	jsr $2ee4			jsr 	MInt32Random 				; generate random number.
.2a09	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2a0b	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2a0d	f0 08		beq $2a17			beq 	_URExit
.2a0f	e8		inx				inx 								; load range 0..r-1 into +1
.2a10	20 23 29	jsr $2923			jsr 	EvaluateInteger
.2a13	ca		dex				dex
.2a14	20 07 2d	jsr $2d07			jsr 	MInt32Modulus 				; calculate random % modulus
.2a17					_URExit:
.2a17	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; check right and return
.2a1a	60		rts				rts
.2a1b					Unary_Min:
.2a1b	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2a1d	d0 02		bne $2a21			bne 	UnaryMBody
.2a1f					Unary_Max:
.2a1f	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2a21					UnaryMBody:
.2a21	48		pha				pha 								; save comparator on stack, shows min or max
.2a22	20 04 29	jsr $2904			jsr 	Evaluate 					; get the first thing to check
.2a25					_UnaryMLoop:
.2a25	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2a27	c8		iny				iny
.2a28	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2a2a	f0 09		beq $2a35			beq 	_UnaryMExit
.2a2c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2a2e	f0 07		beq $2a37			beq 	_UnaryMCompare
.2a30	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a32	20 b5 13	jsr $13b5		jsr	errorHandler
.2a35					_UnaryMExit:
.2a35	68		pla				pla 								; done so throw comparator and return.
.2a36	60		rts				rts
.2a37					_UnaryMCompare:
.2a37	e8		inx				inx 								; get the 2nd thing to evaluate
.2a38	20 04 29	jsr $2904			jsr 	Evaluate
.2a3b	ca		dex				dex
.2a3c	20 c9 25	jsr $25c9			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2a3f	85 32		sta $32				sta 	tempShort 					; save result
.2a41	68		pla				pla 								; get what we need
.2a42	48		pha				pha
.2a43	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2a45	d0 de		bne $2a25			bne 	_UnaryMLoop 				; no, try another value.
.2a47	20 b4 2e	jsr $2eb4			jsr 	MInt32False 				; promote 2nd to 1st.
.2a4a	20 98 2d	jsr $2d98			jsr 	MInt32Add
.2a4d	4c 25 2a	jmp $2a25			jmp 	_UnaryMLoop
.2a50					Unary_Page:
.2a50	20 b4 2e	jsr $2eb4			jsr 	MInt32False 				; zero
.2a53	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2a56	95 48		sta $48,x			sta 	esInt0,x
.2a58	ad c9 0a	lda $0ac9			lda 	basePage+1
.2a5b	95 50		sta $50,x			sta 	esInt1,x
.2a5d	60		rts				rts
.2a5e					UnaryReference:
.2a5e	a9 0f		lda #$0f			lda 	#15
.2a60	20 17 27	jsr $2717			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2a63	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2a65	10 05		bpl $2a6c			bpl 	UType
.2a67	a9 00		lda #$00			lda 	#0 							; make it an integer
.2a69	95 40		sta $40,x			sta 	esType,x
.2a6b	60		rts				rts
.2a6c					UType:
.2a6c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a6e	20 b5 13	jsr $13b5		jsr	errorHandler
.2a71					UnaryHexMarker:
.2a71	4c f5 28	jmp $28f5			jmp 	EvaluateIntegerTerm
.2a74					UnaryComplement:
.2a74	20 f5 28	jsr $28f5			jsr 	EvaluateIntegerTerm
.2a77	20 88 2e	jsr $2e88			jsr 	MInt32Not
.2a7a	60		rts				rts
.2a7b					UnaryIntToFloat:
.2a7b	20 0d 29	jsr $290d			jsr 	EvaluateNumeric				; some number
.2a7e	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.2a80	d0 0b		bne $2a8d			bne 	_UIFExit
.2a82	8a		txa				txa 								; convert and set type
.2a83	a2 1a		ldx #$1a		ldx	#26
.2a85	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2a88	aa		tax				tax
.2a89	a9 01		lda #$01			lda 	#1
.2a8b	95 40		sta $40,x			sta 	esType,x
.2a8d					_UIFExit:
.2a8d	60		rts				rts
.2a8e					UnaryFloatToInt:
.2a8e	20 0d 29	jsr $290d			jsr 	EvaluateNumeric 			; the number
.2a91	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2a93	f0 0b		beq $2aa0			beq 	_UFIExit
.2a95	8a		txa				txa 								; convert to int
.2a96	a2 12		ldx #$12		ldx	#18
.2a98	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.2a9b	aa		tax				tax
.2a9c	a9 00		lda #$00			lda 	#0 							; set type
.2a9e	95 40		sta $40,x			sta 	esType,x
.2aa0					_UFIExit:
.2aa0	60		rts				rts
.2aa1					UnaryAlloc:
.2aa1	e8		inx				inx 								; evaluate memory required
.2aa2	20 23 29	jsr $2923			jsr 	EvaluateInteger
.2aa5	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.2aa8	ca		dex				dex
.2aa9	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2aab	15 61		ora $61,x			ora 	esInt3+1,x
.2aad	d0 1d		bne $2acc			bne 	_UABadValue
.2aaf	20 b4 2e	jsr $2eb4			jsr 	MInt32False					; zero return.
.2ab2	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2ab4	95 50		sta $50,x			sta 	esInt1,x
.2ab6	a5 35		lda $35				lda 	lowMemory
.2ab8	95 48		sta $48,x			sta 	esInt0,x
.2aba	18		clc				clc 								; add alloc required.
.2abb	75 49		adc $49,x			adc 	esInt0+1,x
.2abd	85 35		sta $35				sta 	lowMemory
.2abf	a5 36		lda $36				lda 	lowMemory+1
.2ac1	75 51		adc $51,x			adc 	esInt1+1,x
.2ac3	85 36		sta $36				sta 	lowMemory+1
.2ac5	b0 05		bcs $2acc			bcs		_UABadValue 				; overflow definitely bad.
.2ac7	c5 34		cmp $34				cmp 	highMemory+1
.2ac9	b0 01		bcs $2acc			bcs 	_UABadValue 				; out of memory bad.
.2acb	60		rts				rts
.2acc					_UABadValue:
.2acc	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.2ace	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.2ad1					UnaryTimer:
.2ad1	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; no parameters
.2ad4	98		tya				tya
.2ad5	48		pha				pha
.2ad6	20 db 2e	jsr $2edb			jsr 	MInt32Zero 					; zero result
.2ad9	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2adb	a2 1c		ldx #$1c		ldx	#28
.2add	20 94 13	jsr $1394		jsr	deviceHandler
.2ae0	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2ae2	95 48		sta $48,x			sta 	esInt0,x
.2ae4	98		tya				tya
.2ae5	95 50		sta $50,x			sta 	esInt1,x
.2ae7	68		pla				pla
.2ae8	a8		tay				tay
.2ae9	60		rts				rts
.2aea					UnaryInkey:
.2aea	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.2aed	86 2a		stx $2a				stx 	temp0
.2aef	a2 0a		ldx #$0a		ldx	#10
.2af1	20 94 13	jsr $1394		jsr	deviceHandler
.2af4	a6 2a		ldx $2a				ldx 	temp0
.2af6	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit
.2af9	60		rts				rts
.2afa					UnaryGet:
.2afa	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.2afd	86 2a		stx $2a				stx 	temp0
.2aff					_UGLoop:
.2aff	a2 00		ldx #$00		ldx	#0
.2b01	20 94 13	jsr $1394		jsr	deviceHandler
.2b04	a2 0a		ldx #$0a		ldx	#10
.2b06	20 94 13	jsr $1394		jsr	deviceHandler
.2b09	c9 00		cmp #$00			cmp 	#0
.2b0b	f0 f2		beq $2aff			beq 	_UGLoop
.2b0d	a6 2a		ldx $2a				ldx 	temp0
.2b0f	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit
.2b12	60		rts				rts
.2b13					UnaryGetString:
.2b13	20 fa 2a	jsr $2afa			jsr 	UnaryGet
.2b16					UGSDoChr:
.2b16	4c 67 2b	jmp $2b67			jmp 	ChrCode
.2b19					UnaryInkeyString:
.2b19	20 ea 2a	jsr $2aea			jsr 	UnaryInkey
.2b1c	b5 48		lda $48,x			lda 	esInt0,x
.2b1e	d0 f6		bne $2b16			bne 	UGSDoChr
.2b20	8a		txa				txa
.2b21	a2 06		ldx #$06		ldx	#6
.2b23	20 d4 32	jsr $32d4		jsr	stringHandler
.2b26	aa		tax				tax
.2b27	60		rts				rts
.2b28					UnarySys:
.2b28	20 23 29	jsr $2923			jsr 	EvaluateInteger 				; get the address
.2b2b	20 27 2f	jsr $2f27			jsr 	CheckRightParen
.2b2e	20 87 1c	jsr $1c87			jsr 	TOSToTemp0 						; copy call address to temp0
.2b31	8a		txa				txa
.2b32	48		pha				pha
.2b33	98		tya				tya
.2b34	48		pha				pha
.2b35	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2b38	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2b3b	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2b3e	20 4d 2b	jsr $2b4d			jsr 	_CallTemp0
.2b41	85 32		sta $32				sta 	tempShort 						; restore YX
.2b43	68		pla				pla
.2b44	a8		tay				tay
.2b45	68		pla				pla
.2b46	aa		tax				tax
.2b47	a5 32		lda $32				lda 	tempShort
.2b49	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit 					; return result.
.2b4c	60		rts				rts
.2b4d					_CallTemp0:
.2b4d	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2b50					UnaryMem:
.2b50	20 b4 2e	jsr $2eb4			jsr 	MInt32False 					; set to false (e.g. 0)
.2b53	38		sec				sec
.2b54	a5 33		lda $33				lda 	highMemory 						; calculate value
.2b56	e5 35		sbc $35				sbc 	lowMemory
.2b58	95 48		sta $48,x			sta 	esInt0,x
.2b5a	a5 34		lda $34				lda 	highMemory+1
.2b5c	e5 36		sbc $36				sbc 	lowMemory+1
.2b5e	95 50		sta $50,x			sta 	esInt1,x
.2b60	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.2b61					ExecChr:
.2b61	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger		; character number 0-255
.2b64	20 27 2f	jsr $2f27			jsr 	CheckRightParen				; right bracket
.2b67					ChrCode:
.2b67	98		tya				tya
.2b68	48		pha				pha
.2b69	8a		txa				txa 								; A = stack
.2b6a	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2b6c	a2 00		ldx #$00		ldx	#0
.2b6e	20 d4 32	jsr $32d4		jsr	stringHandler
.2b71	aa		tax				tax 								; X = stack
.2b72	68		pla				pla
.2b73	a8		tay				tay
.2b74	60		rts				rts
.2b75					ExecLower:
.2b75	38		sec				sec 								; set carry is lower
.2b76	b0 01		bcs $2b79			bcs 	ExecUpperLower
.2b78					ExecUpper:
.2b78	18		clc				clc 								; clear carry is upper
.2b79					ExecUpperLower:
.2b79	08		php				php 								; save carry
.2b7a	20 18 29	jsr $2918			jsr 	EvaluateString 				; string to stack,X
.2b7d	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; check closing right bracket.
.2b80	28		plp				plp 								; restore carry, save Y
.2b81	98		tya				tya
.2b82	48		pha				pha
.2b83	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2b85	2a		rol a				rol 	a
.2b86	a8		tay				tay 								; now in Y
.2b87	8a		txa				txa 								; do the substring and exit.
.2b88	a2 0a		ldx #$0a		ldx	#10
.2b8a	20 d4 32	jsr $32d4		jsr	stringHandler
.2b8d	aa		tax				tax
.2b8e	68		pla				pla
.2b8f	a8		tay				tay
.2b90	60		rts				rts
.2b91					ExecLeft:
.2b91	20 18 29	jsr $2918			jsr 	EvaluateString 				; string to stack,X
.2b94	20 34 2f	jsr $2f34			jsr 	CheckComma
.2b97	e8		inx				inx
.2b98	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2b9a	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit
.2b9d	e8		inx				inx
.2b9e	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2ba1					ExecSubstring:
.2ba1	ca		dex				dex 								; fix up X
.2ba2	ca		dex				dex
.2ba3	20 27 2f	jsr $2f27			jsr 	CheckRightParen 			; check closing right bracket.
.2ba6	8a		txa				txa 								; do the substring and exit.
.2ba7	a2 0c		ldx #$0c		ldx	#12
.2ba9	20 d4 32	jsr $32d4		jsr	stringHandler
.2bac	aa		tax				tax
.2bad	60		rts				rts
.2bae					ExecMid:
.2bae	20 18 29	jsr $2918			jsr 	EvaluateString 				; string to stack,X
.2bb1	20 34 2f	jsr $2f34			jsr 	CheckComma
.2bb4	e8		inx				inx
.2bb5	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2bb8	c9 00		cmp #$00			cmp 	#0
.2bba	f0 15		beq $2bd1			beq 	_EMValue
.2bbc	e8		inx				inx
.2bbd	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2bbf	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit
.2bc2	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2bc4	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2bc6	f0 d9		beq $2ba1			beq 	ExecSubString
.2bc8	20 34 2f	jsr $2f34			jsr 	CheckComma
.2bcb	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2bce	4c a1 2b	jmp $2ba1			jmp 	ExecSubString
.2bd1					_EMValue:
.2bd1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2bd3	20 b5 13	jsr $13b5		jsr	errorHandler
.2bd6					ExecRight:
.2bd6	20 18 29	jsr $2918			jsr 	EvaluateString 				; string to stack,X
.2bd9	20 34 2f	jsr $2f34			jsr 	CheckComma
.2bdc	e8		inx				inx
.2bdd	20 2b 29	jsr $292b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2be0	ca		dex				dex
.2be1	98		tya				tya
.2be2	48		pha				pha
.2be3	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2be5	85 2a		sta $2a				sta 	temp0
.2be7	b5 50		lda $50,x			lda 	esInt1,x
.2be9	85 2b		sta $2b				sta 	temp0+1
.2beb	a0 00		ldy #$00			ldy 	#0 							; point to length
.2bed	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2bef	18		clc				clc 								; add 1.
.2bf0	69 01		adc #$01			adc 	#1
.2bf2	38		sec				sec
.2bf3	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2bf5	f0 02		beq $2bf9			beq		_ERMake1 					; if zero, make it 1.
.2bf7	b0 02		bcs $2bfb			bcs		_EROkay
.2bf9					_ERMake1:
.2bf9	a9 01		lda #$01			lda 	#1 							; start position.
.2bfb					_EROkay:
.2bfb	e8		inx				inx 								; set start pos.
.2bfc	95 48		sta $48,x			sta 	esInt0,x
.2bfe	e8		inx				inx
.2bff	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2c01	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit
.2c04	68		pla				pla
.2c05	a8		tay				tay
.2c06	4c a1 2b	jmp $2ba1			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2c09					MInt32And:
.2c09	b5 48		lda $48,x			lda 	esInt0,x
.2c0b	35 49		and $49,x			and 	esInt0+1,x
.2c0d	95 48		sta $48,x			sta 	esInt0,x
.2c0f	b5 50		lda $50,x			lda 	esInt1,x
.2c11	35 51		and $51,x			and 	esInt1+1,x
.2c13	95 50		sta $50,x			sta 	esInt1,x
.2c15	b5 58		lda $58,x			lda 	esInt2,x
.2c17	35 59		and $59,x			and 	esInt2+1,x
.2c19	95 58		sta $58,x			sta 	esInt2,x
.2c1b	b5 60		lda $60,x			lda 	esInt3,x
.2c1d	35 61		and $61,x			and 	esInt3+1,x
.2c1f	95 60		sta $60,x			sta 	esInt3,x
.2c21	60		rts				rts
.2c22					MInt32Or:
.2c22	b5 48		lda $48,x			lda 	esInt0,x
.2c24	15 49		ora $49,x			ora 	esInt0+1,x
.2c26	95 48		sta $48,x			sta 	esInt0,x
.2c28	b5 50		lda $50,x			lda 	esInt1,x
.2c2a	15 51		ora $51,x			ora 	esInt1+1,x
.2c2c	95 50		sta $50,x			sta 	esInt1,x
.2c2e	b5 58		lda $58,x			lda 	esInt2,x
.2c30	15 59		ora $59,x			ora 	esInt2+1,x
.2c32	95 58		sta $58,x			sta 	esInt2,x
.2c34	b5 60		lda $60,x			lda 	esInt3,x
.2c36	15 61		ora $61,x			ora 	esInt3+1,x
.2c38	95 60		sta $60,x			sta 	esInt3,x
.2c3a	60		rts				rts
.2c3b					MInt32Xor:
.2c3b	b5 48		lda $48,x			lda 	esInt0,x
.2c3d	55 49		eor $49,x			eor 	esInt0+1,x
.2c3f	95 48		sta $48,x			sta 	esInt0,x
.2c41	b5 50		lda $50,x			lda 	esInt1,x
.2c43	55 51		eor $51,x			eor 	esInt1+1,x
.2c45	95 50		sta $50,x			sta 	esInt1,x
.2c47	b5 58		lda $58,x			lda 	esInt2,x
.2c49	55 59		eor $59,x			eor 	esInt2+1,x
.2c4b	95 58		sta $58,x			sta 	esInt2,x
.2c4d	b5 60		lda $60,x			lda 	esInt3,x
.2c4f	55 61		eor $61,x			eor 	esInt3+1,x
.2c51	95 60		sta $60,x			sta 	esInt3,x
.2c53	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2c54					MInt32Compare:
.2c54	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2c56	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2c58	d0 13		bne $2c6d			bne 	MInt32Compare2
.2c5a	b5 50		lda $50,x			lda 	esInt1,x
.2c5c	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2c5e	d0 0d		bne $2c6d			bne 	MInt32Compare2
.2c60	b5 58		lda $58,x			lda 	esInt2,x
.2c62	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2c64	d0 07		bne $2c6d			bne 	MInt32Compare2
.2c66	b5 60		lda $60,x			lda 	esInt3,x
.2c68	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2c6a	d0 01		bne $2c6d			bne 	MInt32Compare2
.2c6c	60		rts				rts
.2c6d					MInt32Compare2:
.2c6d	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2c6f	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2c71	b5 50		lda $50,x			lda		esInt1,x
.2c73	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2c75	b5 58		lda $58,x			lda		esInt2,x
.2c77	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2c79	b5 60		lda $60,x			lda		esInt3,x
.2c7b	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2c7d	50 02		bvc $2c81			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2c7f	49 80		eor #$80			eor 	#$80
.2c81					_I32LNoOverflow
.2c81	30 03		bmi $2c86			bmi 	MInt32CLess					; if -ve then return $FF
.2c83	a9 01		lda #$01			lda 	#$01						; else return $01
.2c85	60		rts				rts
.2c86					MInt32CLess:
.2c86	a9 ff		lda #$ff			lda 	#$FF
.2c88	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2c89					MInt32SDivide:
.2c89	98		tya				tya  								; save Y, which is the count of negations
.2c8a	48		pha				pha
.2c8b	a0 00		ldy #$00			ldy 	#0 							; zero count
.2c8d	20 a5 2c	jsr $2ca5			jsr 	_MInt32SRemSign 			; unsign TOS
.2c90	e8		inx				inx 								; unsign TOS+1
.2c91	20 a5 2c	jsr $2ca5			jsr 	_MInt32SRemSign
.2c94	ca		dex				dex
.2c95	98		tya				tya 								; save sign count on stack
.2c96	48		pha				pha
.2c97	20 ae 2c	jsr $2cae			jsr 	MInt32UDivide 				; unsigned division
.2c9a	68		pla				pla 								; get sign count back
.2c9b	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2c9d	f0 03		beq $2ca2			beq 	_I32SNoNeg
.2c9f	20 6e 2e	jsr $2e6e			jsr 	MInt32Negate
.2ca2					_I32SNoNeg:
.2ca2	68		pla				pla 								; restoe Y and exit
.2ca3	a8		tay				tay
.2ca4	60		rts				rts
.2ca5					_MInt32SRemSign:
.2ca5	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2ca7	10 04		bpl $2cad			bpl 	_MInt32SRSExit
.2ca9	c8		iny				iny 								; increment the sign count
.2caa	20 6e 2e	jsr $2e6e			jsr 	MInt32Negate 				; negate the value.
.2cad					_MInt32SRSExit:
.2cad	60		rts				rts
.2cae					MInt32UDivide:
.2cae	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2cb0	15 51		ora $51,x			ora 	esInt1+1,x
.2cb2	15 52		ora $52,x			ora 	esInt1+2,x
.2cb4	15 53		ora $53,x			ora 	esInt1+3,x
.2cb6	f0 4a		beq $2d02			beq 	_MInt32DZero
.2cb8	e8		inx				inx 								; clear A
.2cb9	e8		inx				inx
.2cba	20 b4 2e	jsr $2eb4			jsr 	MInt32False
.2cbd	ca		dex				dex
.2cbe	ca		dex				dex
.2cbf	98		tya				tya 								; save Y on the stack
.2cc0	48		pha				pha
.2cc1	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2cc3					_MInt32UDLoop:
.2cc3	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2cc5	36 50		rol $50,x			rol 	esInt1,x
.2cc7	36 58		rol $58,x			rol 	esInt2,x
.2cc9	36 60		rol $60,x			rol 	esInt3,x
.2ccb	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2ccd	36 52		rol $52,x			rol 	esInt1+2,x
.2ccf	36 5a		rol $5a,x			rol 	esInt2+2,x
.2cd1	36 62		rol $62,x			rol 	esInt3+2,x
.2cd3	38		sec				sec 								; calculate A-M saving result on the stack
.2cd4	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2cd6	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2cd8	48		pha				pha
.2cd9	b5 52		lda $52,x			lda 	esInt1+2,x
.2cdb	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2cdd	48		pha				pha
.2cde	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2ce0	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2ce2	48		pha				pha
.2ce3	b5 62		lda $62,x			lda 	esInt3+2,x
.2ce5	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2ce7	90 10		bcc $2cf9			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2ce9	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2ceb	68		pla				pla
.2cec	95 5a		sta $5a,x			sta 	esInt2+2,x
.2cee	68		pla				pla
.2cef	95 52		sta $52,x			sta 	esInt1+2,x
.2cf1	68		pla				pla
.2cf2	95 4a		sta $4a,x			sta 	esInt0+2,x
.2cf4	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2cf6	4c fc 2c	jmp $2cfc			jmp 	_MInt32Next 					; do the next iteration
.2cf9					_MInt32NoSubtract:
.2cf9	68		pla				pla
.2cfa	68		pla				pla
.2cfb	68		pla				pla
.2cfc					_MInt32Next:
.2cfc	88		dey				dey 								; do this 32 times.
.2cfd	d0 c4		bne $2cc3			bne 	_MInt32UDLoop
.2cff	68		pla				pla 								; restore Y and exit
.2d00	a8		tay				tay
.2d01	60		rts				rts
.2d02					_MInt32DZero:
.2d02	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2d04	20 b5 13	jsr $13b5		jsr	errorHandler
.2d07					MInt32Modulus:
.2d07	20 ae 2c	jsr $2cae			jsr 	MInt32UDivide 				; do the division.
.2d0a	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2d0c	95 60		sta $60,x			sta 	esInt3,x
.2d0e	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2d10	95 58		sta $58,x			sta 	esInt2,x
.2d12	b5 52		lda $52,x			lda 	esInt1+2,x
.2d14	95 50		sta $50,x			sta 	esInt1,x
.2d16	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2d18	95 48		sta $48,x			sta 	esInt0,x
.2d1a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c14					fs32Length:
>0c14							.fill 	1
.2d1b					LinkInt32FromString:
.2d1b	aa		tax				tax
.2d1c	98		tya				tya
.2d1d	20 22 2d	jsr $2d22			jsr 	MInt32FromString
.2d20	8a		txa				txa
.2d21	60		rts				rts
.2d22					MInt32FromString:
.2d22	85 32		sta $32				sta 	tempShort 					; save base
.2d24	98		tya				tya
.2d25	48		pha				pha
.2d26	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2d28	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d2a	8d 14 0c	sta $0c14			sta 	fs32Length
.2d2d	f0 65		beq $2d94			beq 	_I32FSFail2					; fail if length zero.
.2d2f	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2d31	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2d33	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2d35	d0 09		bne $2d40			bne 	_I32FSNotNegative
.2d37	ad 14 0c	lda $0c14			lda 	fs32Length 					; get length back.
.2d3a	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2d3c	f0 56		beq $2d94			beq 	_I32FSFail2
.2d3e	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2d40					_I32FSNotNegative:
.2d40	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2d42	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2d44	d0 02		bne $2d48			bne 	_I32FSNN2
.2d46	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2d48					_I32FSNN2:
.2d48	48		pha				pha 								; save base + final sign on stack.
.2d49	20 b4 2e	jsr $2eb4			jsr 	MInt32False 				; zero the return value.
.2d4c					_I32FSMainLoop:
.2d4c	68		pla				pla 								; get the base back into tempShort
.2d4d	48		pha				pha
.2d4e	29 7f		and #$7f			and 	#$7F
.2d50	85 32		sta $32				sta 	tempShort
.2d52	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2d54	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2d56	90 02		bcc $2d5a			bcc 	_I32FSNotLC
.2d58	e9 20		sbc #$20			sbc 	#32
.2d5a					_I32FSNotLC:
.2d5a	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2d5b	e9 30		sbc #$30			sbc 	#"0"
.2d5d	90 34		bcc $2d93			bcc 	_I32FSFail 					; nothing more to do.
.2d5f	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2d61	90 06		bcc $2d69			bcc 	_I32FSValidate
.2d63	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2d65	90 2c		bcc $2d93			bcc 	_I32FSFail
.2d67	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2d69					_I32FSValidate:
.2d69	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2d6b	b0 26		bcs $2d93			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2d6d	48		pha				pha 								; save the new digit value.
.2d6e	e8		inx				inx 								; put base into next slot up on stack
.2d6f	a5 32		lda $32				lda 	tempShort
.2d71	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit
.2d74	ca		dex				dex
.2d75	20 cc 2d	jsr $2dcc			jsr 	MInt32Multiply 				; multiply current by the base
.2d78	e8		inx				inx
.2d79	68		pla				pla  								; put additive into next slot
.2d7a	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit
.2d7d	ca		dex				dex
.2d7e	20 98 2d	jsr $2d98			jsr 	MInt32Add 					; and add it
.2d81	c8		iny				iny 								; bump the character pointer
.2d82	cc 14 0c	cpy $0c14			cpy 	fs32Length 					; until > length.
.2d85	f0 c5		beq $2d4c			beq 	_I32FSMainLoop
.2d87	90 c3		bcc $2d4c			bcc 	_I32FSMainLoop
.2d89					_I32FSDone:
.2d89	68		pla				pla 								; get base/final sign back
.2d8a	10 03		bpl $2d8f			bpl 	_I32FSNN3
.2d8c	20 6e 2e	jsr $2e6e			jsr 	MInt32Negate 				; negate the result.
.2d8f					_I32FSNN3:
.2d8f	68		pla				pla
.2d90	a8		tay				tay
.2d91	38		sec				sec
.2d92	60		rts				rts
.2d93					_I32FSFail:
.2d93	68		pla				pla
.2d94					_I32FSFail2:
.2d94	68		pla				pla
.2d95	a8		tay				tay
.2d96	18		clc				clc
.2d97	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2d98					MInt32Add:
.2d98	18		clc				clc
.2d99	b5 48		lda $48,x			lda 	esInt0,x
.2d9b	75 49		adc $49,x			adc 	esInt0+1,x
.2d9d	95 48		sta $48,x			sta 	esInt0,x
.2d9f	b5 50		lda $50,x			lda 	esInt1,x
.2da1	75 51		adc $51,x			adc 	esInt1+1,x
.2da3	95 50		sta $50,x			sta 	esInt1,x
.2da5	b5 58		lda $58,x			lda 	esInt2,x
.2da7	75 59		adc $59,x			adc 	esInt2+1,x
.2da9	95 58		sta $58,x			sta 	esInt2,x
.2dab	b5 60		lda $60,x			lda 	esInt3,x
.2dad	75 61		adc $61,x			adc 	esInt3+1,x
.2daf	95 60		sta $60,x			sta 	esInt3,x
.2db1	60		rts				rts
.2db2					MInt32Sub:
.2db2	38		sec				sec
.2db3	b5 48		lda $48,x			lda 	esInt0,x
.2db5	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2db7	95 48		sta $48,x			sta 	esInt0,x
.2db9	b5 50		lda $50,x			lda 	esInt1,x
.2dbb	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2dbd	95 50		sta $50,x			sta 	esInt1,x
.2dbf	b5 58		lda $58,x			lda 	esInt2,x
.2dc1	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2dc3	95 58		sta $58,x			sta 	esInt2,x
.2dc5	b5 60		lda $60,x			lda 	esInt3,x
.2dc7	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2dc9	95 60		sta $60,x			sta 	esInt3,x
.2dcb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2dcc					MInt32Multiply:
.2dcc	e8		inx				inx 								; copy 2nd -> 3rd
.2dcd	20 f2 2d	jsr $2df2			jsr 	MInt32CopyUp
.2dd0	ca		dex				dex
.2dd1	20 f2 2d	jsr $2df2			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2dd4	20 b4 2e	jsr $2eb4			jsr 	MInt32False 				; zero 1st.
.2dd7					_I32Loop:
.2dd7	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2dd9	29 01		and #$01			and 	#1
.2ddb	f0 03		beq $2de0			beq 	_I32NoAdd 					; if set
.2ddd	20 98 2d	jsr $2d98			jsr 	MInt32Add 					; add 2nd to 1st.
.2de0					_I32NoAdd:
.2de0	e8		inx				inx 								; shift 2nd left
.2de1	20 c9 2e	jsr $2ec9			jsr 	MInt32ShiftLeft
.2de4	e8		inx				inx  								; shift 3rd right
.2de5	20 d2 2e	jsr $2ed2			jsr 	MInt32ShiftRight
.2de8	20 db 2e	jsr $2edb			jsr 	MInt32Zero 					; check if zero.
.2deb	08		php				php 								; save status bits
.2dec	ca		dex				dex 	 							; point back to 1st
.2ded	ca		dex				dex
.2dee	28		plp				plp 								; get status bits
.2def	d0 e6		bne $2dd7			bne 	_I32Loop 					; if non-zero keep going.
.2df1	60		rts				rts
.2df2					MInt32CopyUp:
.2df2	b5 48		lda $48,x			lda 	esInt0,x
.2df4	95 49		sta $49,x			sta 	esInt0+1,x
.2df6	b5 50		lda $50,x			lda 	esInt1,x
.2df8	95 51		sta $51,x			sta 	esInt1+1,x
.2dfa	b5 58		lda $58,x			lda 	esInt2,x
.2dfc	95 59		sta $59,x			sta 	esInt2+1,x
.2dfe	b5 60		lda $60,x			lda 	esInt3,x
.2e00	95 61		sta $61,x			sta 	esInt3+1,x
.2e02	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c15					MCharCount:	.fill 	1						; count of converted characters
.2e03					MLInt32ToString:
.2e03	aa		tax				tax									; module passes stack in A, base in Y
.2e04	98		tya				tya
.2e05	20 0a 2e	jsr $2e0a			jsr 	MInt32ToString
.2e08	8a		txa				txa
.2e09	60		rts				rts
.2e0a					MInt32ToString:
.2e0a	48		pha				pha 								; save base
.2e0b	85 32		sta $32				sta 	tempShort 					; save target base.
.2e0d	a9 00		lda #$00			lda 	#0
.2e0f	8d 15 0c	sta $0c15			sta 	MCharCount 					; clear character count to 0
.2e12	98		tya				tya
.2e13	48		pha				pha
.2e14	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2e16	10 10		bpl $2e28			bpl 	_I32TSUnsigned
.2e18	48		pha				pha 								; save base on stack.
.2e19	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2e1b	10 08		bpl $2e25			bpl 	_I32TSNoFlip
.2e1d	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2e1f	20 5b 2e	jsr $2e5b			jsr 	MI32WriteCharacter
.2e22	20 6e 2e	jsr $2e6e			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2e25					_I32TSNoFlip:
.2e25	68		pla				pla 								; get the base back
.2e26	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2e28					_I32TSUnsigned:
.2e28	20 36 2e	jsr $2e36			jsr 	MI32DivideWrite 			; recursive code to output string.
.2e2b	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2e2d	ad 15 0c	lda $0c15			lda 	MCharCount
.2e30	91 2a		sta ($2a),y			sta 	(temp0),y
.2e32	68		pla				pla
.2e33	a8		tay				tay
.2e34	68		pla				pla
.2e35	60		rts				rts
.2e36					MI32DivideWrite:
.2e36	48		pha				pha 								; save the divisor/base
.2e37	e8		inx				inx 								; write in the dividing position.
.2e38	20 c3 2e	jsr $2ec3			jsr 	MInt32Set8Bit
.2e3b	ca		dex				dex
.2e3c	20 ae 2c	jsr $2cae			jsr 	MInt32UDivide 				; divide number by base.
.2e3f	68		pla				pla 								; get the base into Y
.2e40	a8		tay				tay
.2e41	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2e43	48		pha				pha
.2e44	20 db 2e	jsr $2edb			jsr 	MInt32Zero 					; is the result zero ?
.2e47	f0 04		beq $2e4d			beq 	_I32NoRecurse 				; if so, don't recurse.
.2e49	98		tya				tya 								; put base into A
.2e4a	20 36 2e	jsr $2e36			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2e4d					_I32NoRecurse:
.2e4d	68		pla				pla 								; get the remainder back
.2e4e	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2e50	90 02		bcc $2e54			bcc 	_I32NotHex
.2e52	69 06		adc #$06			adc 	#7-1
.2e54					_I32NotHex:
.2e54	18		clc				clc 								; make it ASCII
.2e55	69 30		adc #$30			adc 	#48
.2e57	20 5b 2e	jsr $2e5b			jsr 	MI32WriteCharacter 			; write the character out
.2e5a	60		rts				rts 								; and exit.
.2e5b					MI32WriteCharacter:
.2e5b	ee 15 0c	inc $0c15			inc 	MCharCount 					; bump count (space for leading count)
.2e5e	ac 15 0c	ldy $0c15			ldy 	MCharCount 					; get position
.2e61	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2e63	c8		iny				iny
.2e64	a9 00		lda #$00			lda 	#0
.2e66	91 2a		sta ($2a),y			sta 	(temp0),y
.2e68	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c16					MSeed32:	.fill 	4							; random number seed.
.2e69					MInt32Absolute:
.2e69	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2e6b	30 01		bmi $2e6e			bmi 	MInt32Negate
.2e6d	60		rts				rts
.2e6e					MInt32Negate:
.2e6e	38		sec				sec 								; subtract from zero.
.2e6f	a9 00		lda #$00			lda 	#0
.2e71	f5 48		sbc $48,x			sbc 	esInt0,x
.2e73	95 48		sta $48,x			sta 	esInt0,x
.2e75	a9 00		lda #$00			lda 	#0
.2e77	f5 50		sbc $50,x			sbc 	esInt1,x
.2e79	95 50		sta $50,x			sta 	esInt1,x
.2e7b	a9 00		lda #$00			lda 	#0
.2e7d	f5 58		sbc $58,x			sbc 	esInt2,x
.2e7f	95 58		sta $58,x			sta 	esInt2,x
.2e81	a9 00		lda #$00			lda 	#0
.2e83	f5 60		sbc $60,x			sbc 	esInt3,x
.2e85	95 60		sta $60,x			sta 	esInt3,x
.2e87	60		rts				rts
.2e88					MInt32Not:
.2e88	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2e8a	49 ff		eor #$ff			eor 	#$FF
.2e8c	95 48		sta $48,x			sta 	esInt0,x
.2e8e	b5 50		lda $50,x			lda 	esInt1,x
.2e90	49 ff		eor #$ff			eor 	#$FF
.2e92	95 50		sta $50,x			sta 	esInt1,x
.2e94	b5 58		lda $58,x			lda 	esInt2,x
.2e96	49 ff		eor #$ff			eor 	#$FF
.2e98	95 58		sta $58,x			sta 	esInt2,x
.2e9a	b5 60		lda $60,x			lda 	esInt3,x
.2e9c	49 ff		eor #$ff			eor 	#$FF
.2e9e	95 60		sta $60,x			sta 	esInt3,x
.2ea0	60		rts				rts
.2ea1					MInt32Sign:
.2ea1	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2ea3	30 0b		bmi $2eb0			bmi 	MInt32True 					; if set return -1 (true)
.2ea5	20 db 2e	jsr $2edb			jsr 	MInt32Zero 					; is it zero ?
.2ea8	f0 0a		beq $2eb4			beq 	MInt32False 				; if zero return 0 (false)
.2eaa	20 b4 2e	jsr $2eb4			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2ead	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2eaf	60		rts				rts
.2eb0					MInt32True:
.2eb0	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2eb2	d0 02		bne $2eb6			bne 	MInt32WriteAll
.2eb4					MInt32False:
.2eb4	a9 00		lda #$00			lda 	#0
.2eb6					MInt32WriteAll:
.2eb6	95 48		sta $48,x			sta 	esInt0,x
.2eb8					MInt32Write123:
.2eb8	95 50		sta $50,x			sta 	esInt1,x
.2eba	95 58		sta $58,x			sta 	esInt2,x
.2ebc	95 60		sta $60,x			sta 	esInt3,x
.2ebe	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2ec0	95 40		sta $40,x			sta 	esType,x
.2ec2	60		rts				rts
.2ec3					MInt32Set8Bit:
.2ec3	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2ec5	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2ec7	f0 ef		beq $2eb8			beq		MInt32Write123
.2ec9					MInt32ShiftLeft:
.2ec9	16 48		asl $48,x			asl 	esInt0,x
.2ecb	36 50		rol $50,x			rol	 	esInt1,x
.2ecd	36 58		rol $58,x			rol	 	esInt2,x
.2ecf	36 60		rol $60,x			rol	 	esInt3,x
.2ed1	60		rts				rts
.2ed2					MInt32ShiftRight:
.2ed2	56 60		lsr $60,x			lsr 	esInt3,x
.2ed4	76 58		ror $58,x			ror 	esInt2,x
.2ed6	76 50		ror $50,x			ror 	esInt1,x
.2ed8	76 48		ror $48,x			ror 	esInt0,x
.2eda	60		rts				rts
.2edb					MInt32Zero:
.2edb	b5 48		lda $48,x			lda 	esInt0,x
.2edd	15 50		ora $50,x			ora 	esInt1,x
.2edf	15 58		ora $58,x			ora 	esInt2,x
.2ee1	15 60		ora $60,x			ora 	esInt3,x
.2ee3	60		rts				rts
.2ee4					MInt32Random:
.2ee4	98		tya				tya
.2ee5	48		pha				pha
.2ee6	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2ee8	ad 16 0c	lda $0c16			lda 	MSeed32+0 					; check the seed isn't zero
.2eeb	d0 03		bne $2ef0			bne 	_Random1
.2eed	a8		tay				tay 								; if so do it 256 times
.2eee	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2ef0					_Random1:
.2ef0	0a		asl a				asl 	a
.2ef1	2e 17 0c	rol $0c17			rol 	MSeed32+1
.2ef4	2e 18 0c	rol $0c18			rol 	MSeed32+2
.2ef7	2e 19 0c	rol $0c19			rol 	MSeed32+3
.2efa	90 02		bcc $2efe			bcc 	_Random2
.2efc	49 c5		eor #$c5			eor 	#$C5
.2efe					_Random2:
.2efe	88		dey				dey
.2eff	d0 ef		bne $2ef0			bne 	_Random1
.2f01	8d 16 0c	sta $0c16			sta 	MSeed32+0 					; copy the seed in.
.2f04	95 48		sta $48,x			sta 	esInt0,x
.2f06	ad 17 0c	lda $0c17			lda 	MSeed32+1
.2f09	95 50		sta $50,x			sta 	esInt1,x
.2f0b	ad 18 0c	lda $0c18			lda 	MSeed32+2
.2f0e	95 58		sta $58,x			sta 	esInt2,x
.2f10	ad 19 0c	lda $0c19			lda 	MSeed32+3
.2f13	95 60		sta $60,x			sta 	esInt3,x
.2f15	68		pla				pla
.2f16	a8		tay				tay
.2f17	a9 00		lda #$00			lda 	#0
.2f19	95 40		sta $40,x			sta 	esType,x
.2f1b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2f1c					CheckToken:
.2f1c	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2f1e	d0 02		bne $2f22			bne 	_CTError
.2f20	c8		iny				iny
.2f21	60		rts				rts
.2f22					_CTError:
.2f22	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2f24	20 b5 13	jsr $13b5		jsr	errorHandler
.2f27					CheckRightParen:
.2f27	b1 28		lda ($28),y			lda 	(codePtr),y
.2f29	c8		iny				iny
.2f2a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f2c	d0 01		bne $2f2f			bne 	_CRPError
.2f2e	60		rts				rts
.2f2f					_CRPError:
.2f2f	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2f31	20 b5 13	jsr $13b5		jsr	errorHandler
.2f34					CheckComma:
.2f34	b1 28		lda ($28),y			lda 	(codePtr),y
.2f36	c8		iny				iny
.2f37	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2f39	d0 01		bne $2f3c			bne 	_CCError
.2f3b	60		rts				rts
.2f3c					_CCError:
.2f3c	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2f3e	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2f41					ScanForward:
.2f41	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2f43	86 2d		stx $2d				stx 	temp1+1
.2f45	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2f47	85 2e		sta $2e				sta 	temp2
.2f49	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2f4b	c8		iny				iny
.2f4c	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2f4e	d0 08		bne $2f58			bne 	_SFNoCheck 					; if so, check token against entered values.
.2f50	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2f52	f0 24		beq $2f78			beq 	_SFExit 					; at the same strcture depth.
.2f54	c5 2d		cmp $2d				cmp 	temp1+1
.2f56	f0 20		beq $2f78			beq 	_SFExit
.2f58					_SFNoCheck:
.2f58	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2f5a	90 ed		bcc $2f49			bcc 	_SFLoop
.2f5c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2f5e	90 19		bcc $2f79			bcc 	_SFSpecials
.2f60	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2f62	90 e5		bcc $2f49			bcc 	_SFLoop
.2f64	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2f66	b0 e1		bcs $2f49			bcs 	_SFLoop
.2f68	aa		tax				tax  								; token in X, and look up the adjuster.
.2f69	bd bc 27	lda $27bc,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2f6c	38		sec				sec 								; convert to an offset ($FF,$01)
.2f6d	e9 81		sbc #$81			sbc 	#$81
.2f6f	18		clc				clc 								; add to depth
.2f70	65 2e		adc $2e				adc 	temp2
.2f72	85 2e		sta $2e				sta 	temp2
.2f74	10 d3		bpl $2f49			bpl 	_SFLoop 					; +ve okay to continue
.2f76	30 07		bmi $2f7f			bmi 	SFError 					; if gone -ve then we have a nesting error
.2f78	60		rts		_SFExit:rts
.2f79					_SFSpecials:
.2f79	20 84 2f	jsr $2f84			jsr 	ScannerSkipSpecial
.2f7c	4c 49 2f	jmp $2f49			jmp 	_SFLoop
.2f7f					SFError:
.2f7f	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2f81	20 b5 13	jsr $13b5		jsr	errorHandler
.2f84					ScannerSkipSpecial:
.2f84	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2f86	f0 10		beq $2f98			beq 	_SFNextLine
.2f88	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2f8a	f0 2b		beq $2fb7			beq 	_SFFloatSkip
.2f8c	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2f8e	f0 02		beq $2f92			beq 	_SFSkipString
.2f90	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2f91	60		rts				rts 								; token.
.2f92					_SFSkipString:
.2f92	98		tya				tya
.2f93	38		sec				sec
.2f94	71 28		adc ($28),y			adc 	(codePtr),y
.2f96	a8		tay				tay
.2f97	60		rts				rts
.2f98					_SFNextLine:
.2f98	a0 00		ldy #$00			ldy 	#0 							; get offset
.2f9a	b1 28		lda ($28),y			lda 	(codePtr),y
.2f9c	18		clc				clc 								; add to code pointer.
.2f9d	65 28		adc $28				adc 	codePtr
.2f9f	85 28		sta $28				sta 	codePtr
.2fa1	90 02		bcc $2fa5			bcc		_SFNLNoCarry
.2fa3	e6 29		inc $29				inc 	codePtr+1
.2fa5					_SFNLNoCarry:
.2fa5	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2fa7	d0 0b		bne $2fb4			bne		_SFXNL 						; no go round again
.2fa9	a5 2c		lda $2c				lda 	temp1
.2fab	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.2fad	d0 d0		bne $2f7f			bne 	SFError 					; read uses this to search for data statements
.2faf	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.2fb1	20 b5 13	jsr $13b5		jsr	errorHandler
.2fb4	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2fb6	60		rts				rts
.2fb7					_SFFloatSkip:
.2fb7	98		tya				tya 								; skip over an embedded float.
.2fb8	18		clc				clc
.2fb9	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2fbb	a8		tay				tay
.2fbc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.2fbd					RSReset:
.2fbd	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2fbf	85 37		sta $37				sta 	rsPointer
.2fc1	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2fc3	85 38		sta $38				sta 	1+(rsPointer)
.2fc5	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2fc7	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2fca	60		rts				rts
.2fcb					RSClaim:
.2fcb	84 32		sty $32				sty 	tempShort 					; preserve Y
.2fcd	48		pha				pha 								; save marker on stack.
.2fce	8a		txa				txa 								; get bytes required.
.2fcf	38		sec				sec
.2fd0	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2fd2	65 37		adc $37				adc 	rsPointer
.2fd4	85 37		sta $37				sta 	rsPointer
.2fd6	a5 38		lda $38				lda 	rsPointer+1
.2fd8	69 ff		adc #$ff			adc 	#$FF
.2fda	85 38		sta $38				sta 	rsPointer+1
.2fdc	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2fde	90 08		bcc $2fe8			bcc 	_RSCOverflow
.2fe0	68		pla				pla 								; get marker back
.2fe1	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2fe3	91 37		sta ($37),y			sta 	(rsPointer),y
.2fe5	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2fe7	60		rts				rts
.2fe8					_RSCOverflow:
.2fe8	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.2fea	20 b5 13	jsr $13b5		jsr	errorHandler
.2fed					RSFree:
.2fed	18		clc				clc
.2fee	65 37		adc $37				adc 	rsPointer
.2ff0	85 37		sta $37				sta 	rsPointer
.2ff2	90 02		bcc $2ff6			bcc 	_RSFExit
.2ff4	e6 38		inc $38				inc 	rsPointer+1
.2ff6					_RSFExit:
.2ff6	60		rts				rts
.2ff7					RSSavePosition:
.2ff7	84 32		sty $32				sty 	tempShort 					; save Y position
.2ff9	a8		tay				tay 								; this is where we write it.
.2ffa	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.2ffc	91 37		sta ($37),y			sta 	(rsPointer),y
.2ffe	c8		iny				iny
.2fff	a5 29		lda $29				lda 	codePtr+1
.3001	91 37		sta ($37),y			sta 	(rsPointer),y
.3003	c8		iny				iny
.3004	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3006	91 37		sta ($37),y			sta 	(rsPointer),y
.3008	a8		tay				tay 								; fix Y back again to original value
.3009	60		rts				rts
.300a					RSLoadPosition:
.300a	a8		tay				tay
.300b	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.300d	85 28		sta $28				sta 	codePtr
.300f	c8		iny				iny
.3010	b1 37		lda ($37),y			lda 	(rsPointer),y
.3012	85 29		sta $29				sta 	codePtr+1
.3014	c8		iny				iny
.3015	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3017	a8		tay				tay 								; to Y
.3018	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3019					WarmStart:
.3019	a2 02		ldx #$02		ldx	#2
.301b	20 93 19	jsr $1993		jsr	interactionHandler

;******  Return to file: main/main.asm

.301e					mainHandler:
.301e	7c 21 30	jmp ($3021,x)			jmp 	(mainVectors,x)
.3021					mainVectors:
>3021	27 2f					.word CheckRightParen      ; index 0
>3023	a8 19					.word XCommandClear        ; index 2
>3025	3e 29					.word LinkEvaluate         ; index 4
>3027	4a 29					.word LinkEvaluateInteger  ; index 6
>3029	50 29					.word LinkEvaluateSmallInt ; index 8
>302b	44 29					.word LinkEvaluateTerm     ; index 10
>302d	03 2e					.word MLInt32ToString      ; index 12
>302f	c6 1e					.word Command_XNew         ; index 14
>3031	d5 20					.word XCommand_Run         ; index 16
>3033	e1 20					.word Command_RunFrom      ; index 18
>3035	1b 2d					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.3037					section_end_main:
.3037					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.3037					StringChrs:
.3037	aa		tax				tax 								; set up stack
.3038	a9 02		lda #$02			lda 	#2
.303a	20 fa 30	jsr $30fa			jsr 	AllocateSoftString
.303d	98		tya				tya
.303e	20 20 31	jsr $3120			jsr 	WriteSoftString
.3041					StringUpdate:
.3041	20 4f 30	jsr $304f			jsr 	ReturnSoftString
.3044	8a		txa				txa
.3045	60		rts				rts
.3046					StringNull:
.3046	aa		tax				tax
.3047	a9 01		lda #$01			lda 	#1
.3049	20 fa 30	jsr $30fa			jsr 	AllocateSoftString
.304c	4c 41 30	jmp $3041			jmp 	StringUpdate
.304f					ReturnSoftString:
.304f	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3051	95 48		sta $48,x			sta 	esInt0,x
.3053	a5 3a		lda $3a				lda 	softMemAlloc+1
.3055	95 50		sta $50,x			sta 	esInt1,x
.3057	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3059	95 58		sta $58,x			sta 	esInt2,x
.305b	95 60		sta $60,x			sta 	esInt3,x
.305d	a9 40		lda #$40			lda 	#$40 						; type string.
.305f	95 40		sta $40,x			sta 	esType,x
.3061	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.3062					STRCompare:
.3062	48		pha				pha 								; save A
.3063	aa		tax				tax 								; put stack pos in X
.3064	98		tya				tya
.3065	48		pha				pha
.3066	20 9a 30	jsr $309a			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3069	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.306b	b1 2a		lda ($2a),y			lda 	(temp0),y
.306d	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.306f	90 02		bcc $3073			bcc 	_SCNotSmaller
.3071	b1 2c		lda ($2c),y			lda 	(temp1),y
.3073					_SCNotSmaller:
.3073	aa		tax				tax 								; put that in X. We compare this many chars first.
.3074					_SCCompareLoop:
.3074	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3076	f0 0c		beq $3084			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3078	ca		dex				dex 								; decrement chars to compare.
.3079	c8		iny				iny 								; move to next character
.307a	38		sec				sec 								; calculate s1[y]-s2[y]
.307b	b1 2a		lda ($2a),y			lda 	(temp0),y
.307d	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.307f	d0 0a		bne $308b			bne 	_SCReturnResult 			; if different return sign of A
.3081	4c 74 30	jmp $3074			jmp 	_SCCompareLoop
.3084					_SCSameToEndShortest
.3084	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3086	38		sec				sec
.3087	b1 2a		lda ($2a),y			lda 	(temp0),y
.3089	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.308b					_SCReturnResult:
.308b	08		php				php 								; set return to zero preserving PSW.
.308c	a2 00		ldx #$00			ldx 	#0
.308e	28		plp				plp
.308f	f0 05		beq $3096			beq 	_SCExit 					; two values equal, then exit
.3091	ca		dex				dex 								; X = $FF
.3092	90 02		bcc $3096			bcc 	_SCExit 					; if 1st < 2nd then -1
.3094	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3096					_SCExit:
.3096	68		pla				pla
.3097	a8		tay				tay
.3098	68		pla				pla
.3099	60		rts				rts
.309a					CopyStringPair:
.309a	b5 49		lda $49,x			lda 	esInt0+1,x
.309c	85 2c		sta $2c				sta 	temp1
.309e	b5 51		lda $51,x			lda 	esInt1+1,x
.30a0	85 2d		sta $2d				sta 	temp1+1
.30a2					CopyStringTop:
.30a2	b5 48		lda $48,x			lda 	esInt0,x
.30a4	85 2a		sta $2a				sta 	temp0
.30a6	b5 50		lda $50,x			lda 	esInt1,x
.30a8	85 2b		sta $2b				sta 	temp0+1
.30aa	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.30ab					StringConcat:
.30ab	aa		tax				tax									; stack pos in X
.30ac	98		tya				tya
.30ad	48		pha				pha
.30ae	20 9a 30	jsr $309a			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.30b1	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.30b2	a0 00		ldy #$00			ldy 	#0
.30b4	b1 2a		lda ($2a),y			lda 	(temp0),y
.30b6	71 2c		adc ($2c),y			adc 	(temp1),y
.30b8	b0 1c		bcs $30d6			bcs 	_SCError 					; just too many characters here.
.30ba	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.30bc	b0 18		bcs $30d6			bcs 	_SCError
.30be	20 fa 30	jsr $30fa			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.30c1	20 f1 30	jsr $30f1			jsr 	CopySoftToStack 			; copy that to the stack.
.30c4	20 db 30	jsr $30db			jsr 	SCCopyTemp0 				; copy temp0
.30c7	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.30c9	85 2a		sta $2a				sta 	temp0
.30cb	a5 2d		lda $2d				lda 	temp1+1
.30cd	85 2b		sta $2b				sta 	temp0+1
.30cf	20 db 30	jsr $30db			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.30d2	68		pla				pla
.30d3	a8		tay				tay
.30d4	8a		txa				txa 								; and A
.30d5	60		rts				rts
.30d6					_SCError:
.30d6	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.30d8	20 b5 13	jsr $13b5		jsr	errorHandler
.30db					SCCopyTemp0:
.30db	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.30dd	b1 2a		lda ($2a),y			lda 	(temp0),y
.30df	85 2e		sta $2e				sta 	temp2
.30e1					_SCCopyLoop:
.30e1	a5 2e		lda $2e				lda 	temp2 						; done the lot
.30e3	f0 0b		beq $30f0			beq 	_SCCopyExit
.30e5	c6 2e		dec $2e				dec 	temp2
.30e7	c8		iny				iny 								; get next char
.30e8	b1 2a		lda ($2a),y			lda 	(temp0),y
.30ea	20 20 31	jsr $3120			jsr 	WriteSoftString 			; write to soft string.
.30ed	4c e1 30	jmp $30e1			jmp 	_SCCopyLoop
.30f0					_SCCopyExit:
.30f0	60		rts				rts
.30f1					CopySoftToStack:
.30f1	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.30f3	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.30f5	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.30f7	95 50		sta $50,x			sta 	esInt1,x
.30f9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.30fa					AllocateSoftString:
.30fa	85 32		sta $32				sta 	tempShort 					; save count
.30fc	98		tya				tya
.30fd	48		pha				pha
.30fe	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3100	d0 09		bne $310b			bne 	_ASSDone
.3102	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3104	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3106	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3108	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3109	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.310b					_ASSDone:
.310b	38		sec				sec 								; allocate downwards enough memory
.310c	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.310e	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3110	85 39		sta $39				sta 	softMemAlloc
.3112	a5 3a		lda $3a				lda 	softMemAlloc+1
.3114	e9 00		sbc #$00			sbc 	#0
.3116	85 3a		sta $3a				sta 	softMemAlloc+1
.3118	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.311a	a8		tay				tay
.311b	91 39		sta ($39),y			sta 	(softMemAlloc),y
.311d	68		pla				pla
.311e	a8		tay				tay
.311f	60		rts				rts
.3120					WriteSoftString:
.3120	84 32		sty $32				sty 	tempShort 					; save Y
.3122	48		pha				pha 								; save character on stack
.3123	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3125	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3127	18		clc				clc
.3128	69 01		adc #$01			adc 	#1
.312a	91 39		sta ($39),y			sta 	(softMemAlloc),y
.312c	a8		tay				tay 								; offset in Y
.312d	68		pla				pla 								; get char and write.
.312e	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3130	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3132	60		rts				rts
.3133					StrClone:
.3133	aa		tax				tax 								; set up stack.
.3134	98		tya				tya
.3135	48		pha				pha
.3136	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3138	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.313a	18		clc				clc
.313b	69 01		adc #$01			adc 	#1
.313d	20 fa 30	jsr $30fa			jsr 	AllocateSoftString 			; allocate soft memory
.3140	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3142	95 48		sta $48,x			sta 	esInt0,x
.3144	a5 3a		lda $3a				lda 	softMemAlloc+1
.3146	95 50		sta $50,x			sta 	esInt1,x
.3148	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.314a	95 58		sta $58,x			sta 	esInt2,x
.314c	95 60		sta $60,x			sta 	esInt3,x
.314e	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3150	95 40		sta $40,x			sta 	esType,x
.3152	20 db 30	jsr $30db			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3155	68		pla				pla
.3156	a8		tay				tay
.3157	8a		txa				txa
.3158	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.3159					CaseString:
.3159	48		pha				pha 								; save A and copy to X
.315a	aa		tax				tax
.315b	98		tya				tya
.315c	48		pha				pha
.315d	20 a2 30	jsr $30a2			jsr 	CopyStringTop 				; target string -> temp0
.3160	a0 00		ldy #$00			ldy 	#0
.3162	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3164	18		clc				clc
.3165	69 01		adc #$01			adc 	#1 							; one more for length byte
.3167	20 fa 30	jsr $30fa			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.316a	20 f1 30	jsr $30f1			jsr 	CopySoftToStack 			; copy that to the stack.
.316d	a0 00		ldy #$00			ldy 	#0
.316f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3171	aa		tax				tax
.3172					_CSCopy:
.3172	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3174	f0 24		beq $319a			beq 	_CSExit
.3176	ca		dex				dex
.3177	c8		iny				iny
.3178	68		pla				pla 								; check direction
.3179	48		pha				pha
.317a	f0 0c		beq $3188			beq 	_CSUpper
.317c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.317e	c9 41		cmp #$41			cmp 	#"A"
.3180	90 12		bcc $3194			bcc 	_CSWrite
.3182	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3184	b0 0e		bcs $3194			bcs 	_CSWrite
.3186	90 0a		bcc $3192			bcc 	_CSFlipWrite
.3188					_CSUpper:
.3188	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.318a	c9 61		cmp #$61			cmp 	#"a"
.318c	90 06		bcc $3194			bcc 	_CSWrite
.318e	c9 7b		cmp #$7b			cmp 	#"z"+1
.3190	b0 02		bcs $3194			bcs 	_CSWrite
.3192					_CSFlipWrite:
.3192	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3194					_CSWrite:
.3194	20 20 31	jsr $3120			jsr 	WriteSoftString 			; add to soft string.
.3197	4c 72 31	jmp $3172			jmp 	_CSCopy
.319a					_CSExit:
.319a	68		pla				pla
.319b	a8		tay				tay
.319c	68		pla				pla
.319d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.319e					StringSubstring:
.319e	48		pha				pha
.319f	aa		tax				tax 								; access stack.
.31a0	98		tya				tya
.31a1	48		pha				pha
.31a2	20 a2 30	jsr $30a2			jsr 	CopyStringTop 				; point temp0 to the string.
.31a5	a0 00		ldy #$00			ldy 	#0 							; get length.
.31a7	b1 2a		lda ($2a),y			lda 	(temp0),Y
.31a9	85 2c		sta $2c				sta 	temp1
.31ab	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.31ad	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.31af	f0 02		beq $31b3			beq 	_SSBOkay
.31b1	b0 2a		bcs $31dd			bcs 	_SSBReturnNull
.31b3					_SSBOkay:
.31b3	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.31b5	18		clc				clc
.31b6	69 01		adc #$01			adc 	#1
.31b8	38		sec				sec
.31b9	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.31bb	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.31bd	90 02		bcc $31c1			bcc		_SSBTrunc
.31bf	b5 4a		lda $4a,x			lda 	esInt0+2,x
.31c1					_SSBTrunc:
.31c1	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.31c3	18		clc				clc
.31c4	69 01		adc #$01			adc 	#1 							; add 1
.31c6	20 fa 30	jsr $30fa			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.31c9	20 f1 30	jsr $30f1			jsr 	CopySoftToStack 			; copy that to the stack.
.31cc	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.31ce					_SSBCopyLoop:
.31ce	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.31d0	f0 0e		beq $31e0			beq 	_SSBExit
.31d2	c6 2d		dec $2d				dec 	temp1+1
.31d4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.31d6	20 20 31	jsr $3120			jsr 	WriteSoftString
.31d9	c8		iny				iny
.31da	4c ce 31	jmp $31ce			jmp 	_SSBCopyLoop
.31dd					_SSBReturnNull:
.31dd	20 e4 31	jsr $31e4			jsr 	ReturnNull
.31e0					_SSBExit:
.31e0	68		pla				pla
.31e1	a8		tay				tay
.31e2	68		pla				pla
.31e3	60		rts				rts
.31e4					ReturnNull:
.31e4	a9 00		lda #$00			lda 	#0 							; clear null string
.31e6	8d ce 0a	sta $0ace			sta 	NullString
.31e9	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.31eb	95 48		sta $48,x			sta 	esInt0,x
.31ed	a9 0a		lda #$0a			lda 	#NullString >> 8
.31ef	95 50		sta $50,x			sta 	esInt1,x
.31f1	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c1a					srcStrLen:
>0c1a							.fill 	1
.31f2					StringWrite:
.31f2	aa		tax				tax
.31f3	48		pha				pha
.31f4	98		tya				tya
.31f5	48		pha				pha
.31f6	20 1d 32	jsr $321d			jsr 	CheckOverwriteCurrent
.31f9	b0 0d		bcs $3208			bcs		_SWCopyCurrent
.31fb	20 5b 32	jsr $325b			jsr 	RequiresConcretion
.31fe	90 0e		bcc $320e			bcc 	_SWWriteReference
.3200	20 be 32	jsr $32be			jsr 	CheckSpecialConcretion
.3203	b0 09		bcs $320e			bcs 	_SWWriteReference
.3205	20 6f 32	jsr $326f			jsr 	AllocateHardMemory
.3208					_SWCopyCurrent:
.3208	20 a2 32	jsr $32a2			jsr 	CopyStringToHardMemory
.320b	4c 19 32	jmp $3219			jmp 	_SWExit
.320e					_SWWriteReference
.320e	a0 00		ldy #$00			ldy 	#0
.3210	a5 2a		lda $2a				lda 	temp0
.3212	91 2c		sta ($2c),y			sta 	(temp1),y
.3214	c8		iny				iny
.3215	a5 2b		lda $2b				lda 	temp0+1
.3217	91 2c		sta ($2c),y			sta 	(temp1),y
.3219					_SWExit:
.3219	68		pla				pla
.321a	a8		tay				tay
.321b	68		pla				pla
.321c	60		rts				rts
.321d					CheckOverwriteCurrent:
.321d	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.321f	b5 51		lda $51,x			lda 	esInt1+1,x
.3221	85 2b		sta $2b				sta 	temp0+1
.3223	b5 49		lda $49,x			lda 	esInt0+1,x
.3225	85 2a		sta $2a				sta 	temp0
.3227	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3229	8d 1a 0c	sta $0c1a			sta 	srcStrLen
.322c	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.322e	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3230	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.3232	85 2d		sta $2d				sta 	temp1+1
.3234	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3236	b1 2c		lda ($2c),y			lda 	(temp1),y
.3238	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.323a	90 1b		bcc $3257			bcc 	_COCFail 				; in hard memory.
.323c	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.323e	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3240	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3242	85 2e		sta $2e				sta 	temp2
.3244	c8		iny				iny
.3245	b1 2c		lda ($2c),y			lda 	(temp1),y
.3247	e9 00		sbc #$00			sbc 	#0
.3249	85 2f		sta $2f				sta 	temp2+1
.324b	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.324d	b1 2e		lda ($2e),y			lda 	(temp2),y
.324f	38		sec				sec  							; maximum character capacity.
.3250	e9 02		sbc #$02			sbc 	#2
.3252	cd 1a 0c	cmp $0c1a			cmp 	srcStrLen 				; if >= the required length
.3255	b0 02		bcs $3259			bcs 	_COCCanReuse
.3257					_COCFail:
.3257	18		clc				clc
.3258	60		rts				rts
.3259					_COCCanReuse:
.3259	38		sec				sec
.325a	60		rts				rts
.325b					RequiresConcretion:
.325b	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.325d	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.325f	b0 0a		bcs $326b			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3261	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3263	f0 08		beq $326d			beq 	_RCFail 				; if not, this cannot be soft memory.
.3265	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3267	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3269	90 02		bcc $326d			bcc 	_RCFail 				; so concreting
.326b					_RCSucceed:
.326b	38		sec				sec
.326c	60		rts				rts
.326d					_RCFail:
.326d	18		clc				clc
.326e	60		rts				rts
.326f					AllocateHardMemory:
.326f	98		tya				tya
.3270	48		pha				pha
.3271	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; characters in string
.3274	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3276	b0 04		bcs $327c			bcs 	_AHMSetMax 				; max out that amount.
.3278	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.327a	90 02		bcc $327e			bcc 	_AHMIsOkay
.327c					_AHMSetMax:
.327c	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.327e					_AHMIsOkay:
.327e	48		pha				pha	 							; save size to be allocated
.327f	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3281	38		sec				sec  							; and copy result to TOS as target address.
.3282	65 33		adc $33				adc 	highMemory
.3284	85 33		sta $33				sta 	highMemory
.3286	a5 34		lda $34				lda 	highMemory+1
.3288	69 ff		adc #$ff			adc 	#$FF
.328a	85 34		sta $34				sta 	highMemory+1
.328c	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.328e	68		pla				pla 							; get the total size of the storage block
.328f	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3291	18		clc				clc
.3292	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3294	69 01		adc #$01			adc 	#1
.3296	91 2c		sta ($2c),y			sta 	(temp1),y
.3298	a5 34		lda $34				lda 	highMemory+1
.329a	69 00		adc #$00			adc 	#0
.329c	c8		iny				iny
.329d	91 2c		sta ($2c),y			sta 	(temp1),y
.329f	68		pla				pla
.32a0	a8		tay				tay
.32a1	60		rts				rts
.32a2					CopyStringToHardMemory:
.32a2	98		tya				tya
.32a3	48		pha				pha
.32a4	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.32a6	b1 2c		lda ($2c),y			lda 	(temp1),y
.32a8	85 2e		sta $2e				sta 	temp2
.32aa	c8		iny				iny
.32ab	b1 2c		lda ($2c),y			lda 	(temp1),y
.32ad	85 2f		sta $2f				sta 	temp2+1
.32af	ac 1a 0c	ldy $0c1a			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.32b2					_CSTHMLoop:
.32b2	b1 2a		lda ($2a),y			lda 	(temp0),y
.32b4	91 2e		sta ($2e),y			sta 	(temp2),y
.32b6	88		dey				dey
.32b7	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.32b9	d0 f7		bne $32b2			bne 	_CSTHMLoop
.32bb	68		pla				pla
.32bc	a8		tay				tay
.32bd	60		rts				rts
.32be					CheckSpecialConcretion:
.32be	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; check string is null e.g. length = 0
.32c1	f0 02		beq $32c5			beq 	_CSCNullString
.32c3	18		clc				clc
.32c4	60		rts				rts
.32c5					_CSCNullString:
.32c5	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.32c7	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.32ca	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.32cc	85 2a		sta $2a				sta 	temp0
.32ce	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.32d0	85 2b		sta $2b				sta 	1+(temp0)
.32d2	38		sec				sec
.32d3	60		rts				rts

;******  Return to file: string/string.asm

.32d4					stringHandler:
.32d4	7c d7 32	jmp ($32d7,x)			jmp 	(stringVectors,x)
.32d7					stringVectors:
>32d7	37 30					.word StringChrs           ; index 0
>32d9	33 31					.word StrClone             ; index 2
>32db	ab 30					.word StringConcat         ; index 4
>32dd	46 30					.word StringNull           ; index 6
>32df	62 30					.word STRCompare           ; index 8
>32e1	59 31					.word CaseString           ; index 10
>32e3	9e 31					.word StringSubstring      ; index 12
>32e5	f2 31					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.32e7					section_end_string:
.32e7					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1b					deTokeniseVector:
>0c1b							.fill 	2
.0c1d					lastCharacterClass:
>0c1d							.fill 	1
.0c1e					indent:
>0c1e							.fill 	1
.32e7					ListLine:
.32e7	48		pha				pha
.32e8	a9 15		lda #$15			lda 	#(deTokenPrint) & $FF
.32ea	8d 1b 0c	sta $0c1b			sta 	deTokeniseVector
.32ed	a9 34		lda #$34			lda 	#(deTokenPrint) >> 8
.32ef	8d 1c 0c	sta $0c1c			sta 	1+(deTokeniseVector)
.32f2	68		pla				pla
.32f3					Detokenise:
.32f3	18		clc				clc
.32f4	69 06		adc #$06			adc 	#6
.32f6	8d 1e 0c	sta $0c1e			sta 	indent
.32f9	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.32fb	8d 1d 0c	sta $0c1d			sta 	lastCharacterClass
.32fe	a2 02		ldx #$02			ldx 	#2
.3300	20 b4 2e	jsr $2eb4			jsr 	MInt32False
.3303	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.3305	b1 28		lda ($28),y			lda 	(codePtr),y
.3307	95 48		sta $48,x			sta 	esInt0,x
.3309	c8		iny				iny
.330a	b1 28		lda ($28),y			lda 	(codePtr),y
.330c	95 50		sta $50,x			sta 	esInt1,x
.330e	a9 84		lda #$84			lda 	#LTYLineNumber
.3310	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3313	a9 0a		lda #$0a			lda 	#10 					; base 10
.3315	20 b4 33	jsr $33b4			jsr 	DTPrintInteger 			; print as integer.
.3318	a0 00		ldy #$00			ldy 	#0 						; get length
.331a	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.331c	aa		tax				tax
.331d					_DTPadOut:
.331d	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.331f	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3322	e8		inx				inx
.3323	ec 1e 0c	cpx $0c1e			cpx 	indent
.3326	d0 f5		bne $331d			bne 	_DTPadOut
.3328	a0 03		ldy #$03			ldy 	#3 						; start position.
.332a					_DTListLoop
.332a	b1 28		lda ($28),y			lda 	(codePtr),y
.332c	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.332e	f0 58		beq $3388			beq 	_DTIsString
.3330	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3332	f0 7c		beq $33b0			beq 	_DTIsFloat
.3334	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3336	f0 16		beq $334e			beq 	_DTHexConstant
.3338	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.333a	d0 06		bne $3342			bne 	_DTNotEnd
.333c	a9 ff		lda #$ff			lda 	#255 					; print CR
.333e	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3341	60		rts				rts
.3342					_DTNotEnd:
.3342	c9 00		cmp #$00			cmp 	#0
.3344	30 36		bmi $337c			bmi 	_DTIsToken
.3346	c9 40		cmp #$40			cmp 	#$40
.3348	90 38		bcc $3382			bcc 	_DTIsIdentifier
.334a	a9 0a		lda #$0a			lda 	#10 					; this is the base
.334c	d0 08		bne $3356			bne 	_DTConstant
.334e					_DTHexConstant:
.334e	a9 26		lda #$26			lda 	#"&"
.3350	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3353	c8		iny				iny
.3354	a9 10		lda #$10			lda 	#16
.3356					_DTConstant:
.3356	48		pha				pha
.3357	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.3359	20 31 34	jsr $3431			jsr 	DTSwitchMode
.335c	a9 86		lda #$86			lda 	#LTYConstant
.335e	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3361	a2 02		ldx #$02			ldx 	#2
.3363	8a		txa				txa
.3364	a2 0a		ldx #$0a		ldx	#10
.3366	20 1e 30	jsr $301e		jsr	mainHandler
.3369	aa		tax				tax
.336a	20 87 1c	jsr $1c87			jsr 	TOSToTemp0
.336d	68		pla				pla
.336e	85 32		sta $32				sta 	tempShort
.3370	98		tya				tya
.3371	48		pha				pha
.3372	a5 32		lda $32				lda 	tempShort
.3374	20 b4 33	jsr $33b4			jsr 	DTPrintInteger
.3377	68		pla				pla
.3378	a8		tay				tay
.3379	4c 2a 33	jmp $332a			jmp 	_DTListLoop
.337c					_DTIsToken:
.337c	20 8a 34	jsr $348a			jsr 	DTDecodeToken
.337f	4c 2a 33	jmp $332a			jmp 	_DTListLoop
.3382					_DTIsIdentifier:
.3382	20 43 34	jsr $3443			jsr 	DTIdentifier
.3385	4c 2a 33	jmp $332a			jmp 	_DTListLoop
.3388					_DTIsString:
.3388	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.338a	20 31 34	jsr $3431			jsr 	DTSwitchMode
.338d	a9 81		lda #$81			lda 	#LTYString
.338f	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3392	a9 22		lda #$22			lda 	#'"'						; open quote
.3394	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3397	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3399	8a		txa				txa
.339a	a2 0a		ldx #$0a		ldx	#10
.339c	20 1e 30	jsr $301e		jsr	mainHandler
.339f	aa		tax				tax
.33a0	20 87 1c	jsr $1c87			jsr 	TOSToTemp0
.33a3	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.33a5	20 c6 33	jsr $33c6			jsr 	DTPrintLengthPrefix
.33a8	a9 22		lda #$22			lda 	#'"'
.33aa	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.33ad	4c 2a 33	jmp $332a			jmp 	_DTListLoop
.33b0					_DTIsFloat:
>33b0	db						.byte 	$DB
.33b1	4c b0 33	jmp $33b0			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1f					tPrintCount:
>0c1f							.fill 	1
.33b4					DTPrintInteger:
.33b4	48		pha				pha
.33b5	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.33b7	85 2a		sta $2a				sta 	temp0
.33b9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.33bb	85 2b		sta $2b				sta 	1+(temp0)
.33bd	68		pla				pla
.33be	a8		tay				tay
.33bf	8a		txa				txa
.33c0	a2 0c		ldx #$0c		ldx	#12
.33c2	20 1e 30	jsr $301e		jsr	mainHandler
.33c5	aa		tax				tax
.33c6					DTPrintLengthPrefix:
.33c6	aa		tax				tax
.33c7	98		tya				tya
.33c8	48		pha				pha
.33c9	a0 00		ldy #$00			ldy 	#0
.33cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.33cd	8d 1f 0c	sta $0c1f			sta 	tPrintCount
.33d0	f0 1b		beq $33ed			beq 	_DTPLPExit
.33d2					_DTPLPLoop:
.33d2	c8		iny				iny
.33d3	b1 2a		lda ($2a),y			lda 	(temp0),y
.33d5	29 7f		and #$7f			and 	#$7F
.33d7	e0 00		cpx #$00			cpx 	#0
.33d9	f0 0a		beq $33e5			beq 	_DTPLPNoCase
.33db	c9 41		cmp #$41			cmp 	#"A"
.33dd	90 06		bcc $33e5			bcc 	_DTPLPNoCase
.33df	c9 5b		cmp #$5b			cmp 	#"Z"+1
.33e1	b0 02		bcs $33e5			bcs 	_DTPLPNoCase
.33e3	49 20		eor #$20			eor 	#"A"^"a"
.33e5					_DTPLPNoCase
.33e5	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.33e8	ce 1f 0c	dec $0c1f			dec 	tPrintCount
.33eb	d0 e5		bne $33d2			bne 	_DTPLPLoop
.33ed					_DTPLPExit:
.33ed	68		pla				pla
.33ee	a8		tay				tay
.33ef	60		rts				rts
.33f0					ListOutputCharacter:
.33f0	85 32		sta $32				sta 	tempShort
.33f2	48		pha				pha
.33f3	8a		txa				txa
.33f4	48		pha				pha
.33f5	98		tya				tya
.33f6	48		pha				pha
.33f7	a5 32		lda $32				lda 	tempShort
.33f9	c9 20		cmp #$20			cmp 	#32
.33fb	b0 0c		bcs $3409			bcs		_LOCHiBit
.33fd	09 40		ora #$40			ora 	#64
.33ff	c9 40		cmp #$40			cmp 	#64
.3401	f0 06		beq $3409			beq 	_LOCHiBit
.3403	c9 5b		cmp #$5b			cmp 	#65+26
.3405	b0 02		bcs $3409			bcs 	_LOCHiBit
.3407	69 20		adc #$20			adc 	#32
.3409					_LOCHiBit:
.3409	20 12 34	jsr $3412			jsr 	_LOCCallVector
.340c	68		pla				pla
.340d	a8		tay				tay
.340e	68		pla				pla
.340f	aa		tax				tax
.3410	68		pla				pla
.3411					_LOCExit:
.3411	60		rts				rts
.3412					_LOCCallVector:
.3412	6c 1b 0c	jmp ($0c1b)			jmp 	(deTokeniseVector)
.3415					deTokenPrint:
.3415	c9 00		cmp #$00			cmp 	#0
.3417	30 06		bmi $341f			bmi 	_dtpInk
.3419	a2 16		ldx #$16		ldx	#22
.341b	20 94 13	jsr $1394		jsr	deviceHandler
.341e	60		rts				rts
.341f	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.3421	f0 08		beq $342b			beq 	_dtpCR
.3423	29 07		and #$07			and 	#7
.3425	a2 08		ldx #$08		ldx	#8
.3427	20 94 13	jsr $1394		jsr	deviceHandler
.342a	60		rts				rts
.342b					_dtpCR:
.342b	a2 04		ldx #$04		ldx	#4
.342d	20 94 13	jsr $1394		jsr	deviceHandler
.3430	60		rts				rts
.3431					DTSwitchMode:
.3431	cd 1d 0c	cmp $0c1d			cmp 	LastCharacterClass
.3434	f0 04		beq $343a			beq 	_DTSMNoChange
.3436	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.3439					_DTSMExit:
.3439	60		rts				rts
.343a					_DTSMNoChange:
.343a	c9 01		cmp #$01			cmp 	#1
.343c	f0 fb		beq $3439			beq 	_DTSMExit
.343e	a9 20		lda #$20			lda 	#" "
.3440	4c f0 33	jmp $33f0			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.3443					DTIdentifier:
.3443	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3445	20 31 34	jsr $3431			jsr 	DTSwitchMode
.3448	a9 87		lda #$87			lda 	#LTYIdentifier
.344a	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.344d					_DTILoop:
.344d	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.344f	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.3451	d0 02		bne $3455			bne 	_DTINotUS
.3453	a9 5f		lda #$5f			lda 	#"_"
.3455					_DTINotUS:
.3455	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3458	c8		iny				iny
.3459	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.345b	c9 3a		cmp #$3a			cmp 	#$3A
.345d	90 ee		bcc $344d			bcc 	_DTILoop
.345f	c8		iny				iny
.3460	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3462	f0 25		beq $3489			beq 	_DTIExit 					; no postfix.
.3464	48		pha				pha
.3465	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3467	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.346a	a9 82		lda #$82			lda 	#LTYPunctuation
.346c	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.346f	68		pla				pla
.3470	c9 3b		cmp #$3b			cmp 	#$3B
.3472	f0 10		beq $3484			beq 	_DTIArray
.3474	4a		lsr a				lsr 	a 							; array flag in C
.3475	08		php				php
.3476	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3478	f0 02		beq $347c			beq 	_DTIDollar
.347a	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.347c					_DTIDollar:
.347c	49 24		eor #$24			eor 	#"$"
.347e	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3481	28		plp				plp
.3482	90 05		bcc $3489			bcc 	_DTIExit
.3484					_DTIArray:
.3484	a9 28		lda #$28			lda 	#"("
.3486	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.3489					_DTIExit:
.3489	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.348a					DTDecodeToken:
.348a	a2 00		ldx #$00			ldx 	#0 							; table number to use
.348c	b1 28		lda ($28),y			lda 	(codePtr),y
.348e	c9 84		cmp #$84			cmp 	#$84
.3490	b0 05		bcs $3497			bcs 	_DTNotShift
.3492	29 03		and #$03			and 	#3 							; get the shift 1..3
.3494	0a		asl a				asl 	a 							; put 2 x in X
.3495	aa		tax				tax
.3496	c8		iny				iny
.3497					_DTNotShift:
.3497	bd 97 37	lda $3797,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.349a	85 2a		sta $2a				sta 	temp0 						; point into temp0
.349c	bd 98 37	lda $3798,x			lda 	TokenTableAddress+1,x
.349f	85 2b		sta $2b				sta 	temp0+1
.34a1	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.34a3	c8		iny				iny 								; consume it.
.34a4	aa		tax				tax
.34a5	98		tya				tya
.34a6	48		pha				pha
.34a7					_DTFindText:
.34a7	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.34a9	f0 11		beq $34bc			beq 	_DTFoundText
.34ab	ca		dex				dex
.34ac	a0 00		ldy #$00			ldy 	#0
.34ae	38		sec				sec
.34af	b1 2a		lda ($2a),y			lda 	(temp0),y
.34b1	65 2a		adc $2a				adc 	temp0
.34b3	85 2a		sta $2a				sta 	temp0
.34b5	90 f0		bcc $34a7			bcc 	_DTFindText
.34b7	e6 2b		inc $2b				inc 	temp0+1
.34b9	4c a7 34	jmp $34a7			jmp 	_DTFindText
.34bc					_DTFoundText:
.34bc	a0 01		ldy #$01			ldy 	#1 							; get first character
.34be	b1 2a		lda ($2a),y			lda 	(temp0),y
.34c0	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.34c2	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.34c4	90 11		bcc $34d7			bcc 	_DTIsPunctuation
.34c6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.34c8	b0 0d		bcs $34d7			bcs 	_DTIsPunctuation
.34ca	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.34cc	20 31 34	jsr $3431			jsr 	DTSwitchMode
.34cf	a9 83		lda #$83			lda 	#LTYKeyword
.34d1	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.34d4	4c e1 34	jmp $34e1			jmp 	_DTPrint
.34d7					_DTIsPunctuation:
.34d7	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.34d9	20 31 34	jsr $3431			jsr 	DTSwitchMode
.34dc	a9 82		lda #$82			lda 	#LTYPunctuation
.34de	20 f0 33	jsr $33f0			jsr 	ListOutputCharacter
.34e1					_DTPrint:
.34e1	a9 01		lda #$01			lda 	#1 							; fix case.
.34e3	20 c6 33	jsr $33c6			jsr 	DTPrintLengthPrefix 		; print it out.
.34e6	a0 00		ldy #$00			ldy 	#0
.34e8	b1 2a		lda ($2a),y			lda 	(temp0),y
.34ea	a8		tay				tay
.34eb	b1 2a		lda ($2a),y			lda 	(temp0),y
.34ed	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.34ef	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.34f1	90 04		bcc $34f7			bcc 	_DTIsNowPunctuation
.34f3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.34f5	90 05		bcc $34fc			bcc 	_DTPExit
.34f7					_DTIsNowPunctuation:
.34f7	a9 01		lda #$01			lda 	#1
.34f9	8d 1d 0c	sta $0c1d			sta		LastCharacterClass
.34fc					_DTPExit:
.34fc	68		pla				pla
.34fd	a8		tay				tay
.34fe	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c20					currentSet:
>0c20							.fill 	1
.34ff					TokenSearch:
.34ff	8a		txa				txa
.3500	48		pha				pha
.3501	98		tya				tya
.3502	48		pha				pha
.3503	a9 00		lda #$00			lda 	#0
.3505	8d 20 0c	sta $0c20			sta 	currentSet
.3508					_TSLoop:
.3508	ad 20 0c	lda $0c20			lda 	currentSet 					; 2 x currentset in X
.350b	0a		asl a				asl 	a
.350c	aa		tax				tax
.350d	bd 97 37	lda $3797,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3510	85 2a		sta $2a				sta 	temp0
.3512	bd 98 37	lda $3798,x			lda 	TokenTableAddress+1,x
.3515	85 2b		sta $2b				sta 	temp0+1
.3517	20 3e 35	jsr $353e			jsr 	TokenSearchOne 				; search one table
.351a	b0 0d		bcs $3529			bcs 	_TSFound 					; found a token.
.351c	ee 20 0c	inc $0c20			inc 	currentSet 					; next set
.351f	ad 20 0c	lda $0c20			lda 	currentSet
.3522	c9 04		cmp #$04			cmp 	#4
.3524	d0 e2		bne $3508			bne 	_TSLoop 					; back if not done all four.
.3526	18		clc				clc 								; clear carry and exit
.3527	90 10		bcc $3539			bcc 	_TSExit
.3529					_TSFound:
.3529	48		pha				pha 								; save token
.352a	ad 20 0c	lda $0c20			lda 	currentSet					; if set zero no shift
.352d	f0 05		beq $3534			beq 	_TSNoShift
.352f	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3531	20 ed 35	jsr $35ed			jsr 	TokenWrite
.3534					_TSNoShift:
.3534	68		pla				pla 								; get token back
.3535	20 ed 35	jsr $35ed			jsr 	TokenWrite 					; write it
.3538	38		sec				sec 								; carry set indicating success
.3539					_TSExit:
.3539	68		pla				pla
.353a	a8		tay				tay
.353b	68		pla				pla
.353c	aa		tax				tax
.353d	60		rts				rts
.353e					TokenSearchOne:
.353e	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3540					_TSOLoop:
.3540	a0 00		ldy #$00			ldy 	#0
.3542	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3544	f0 26		beq $356c			beq 	_TSOFail 					; if zero, end of table
.3546	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3549	f0 11		beq $355c			beq 	_TSOCheckText
.354b					_TSONext:
.354b	e8		inx				inx 								; bump token
.354c	a0 00		ldy #$00			ldy 	#0							; get length
.354e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3550	38		sec				sec
.3551	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3553	85 2a		sta $2a				sta 	temp0
.3555	90 e9		bcc $3540			bcc 	_TSOLoop
.3557	e6 2b		inc $2b				inc 	temp0+1
.3559	4c 40 35	jmp $3540			jmp 	_TSOLoop
.355c					_TSOCheckText:
.355c	a8		tay				tay 								; compare length downto 1.
.355d					_TSOCheckLoop:
.355d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.355f	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3562	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3564	d0 e5		bne $354b			bne 	_TSONext 					; different goto next.
.3566	88		dey				dey 								; do all
.3567	d0 f4		bne $355d			bne 	_TSOCheckLoop
.3569	8a		txa				txa 								; return token in A and carry set
.356a	38		sec				sec
.356b	60		rts				rts
.356c					_TSOFail:
.356c	18		clc				clc
.356d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.356e					TokTest:
.356e	a2 ff		ldx #$ff				ldx 	#$FF
.3570	9a		txs					txs
.3571	a9 8e		lda #$8e			lda 	#(TokenText1) & $FF
.3573	85 28		sta $28				sta 	codePtr
.3575	a9 35		lda #$35			lda 	#(TokenText1) >> 8
.3577	85 29		sta $29				sta 	1+(codePtr)
.3579	20 8e 35	jsr $358e				jsr 	Tokenise
.357c	a2 00		ldx #$00	TokStop:	ldx 	#0
.357e	bd 8e 35	lda $358e,x	_TokCheck:	lda 	TokenBytes1,x
.3581	dd 24 0c	cmp $0c24,x				cmp 	tokenBuffer,x
.3584	d0 fe		bne $3584	_TokFail:	bne 	_TokFail
.3586	e8		inx					inx
.3587	c9 80		cmp #$80				cmp 	#$80
.3589	d0 f3		bne $357e				bne 	_TokCheck
.358b	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.358e					TokenText1:
.358e					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c21					tokenHeader:
>0c21							.fill 	3
.0c24					tokenBuffer:
>0c24							.fill 	256
.0d24					tokenBufferIndex:
>0d24							.fill 	1
.358e					Tokenise:
.358e	20 06 36	jsr $3606			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3591					TokeniseASCIIZ:
.3591	20 17 36	jsr $3617			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3594	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3596	8d 24 0d	sta $0d24			sta 	tokenBufferIndex
.3599	a8		tay				tay 								; start pointer
.359a	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.359c	8d 24 0c	sta $0c24			sta 	tokenBuffer
.359f					_TokLoop:
.359f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.35a1	f0 46		beq $35e9			beq 	_TokExit 					; if zero, then exit.
.35a3	c8		iny				iny 								; skip over spaces.
.35a4	c9 20		cmp #$20			cmp 	#" "
.35a6	f0 f7		beq $359f			beq 	_TokLoop
.35a8	88		dey				dey 								; point back to character.
.35a9	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.35ab	f0 18		beq $35c5			beq 	_TokHexConst
.35ad	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.35af	f0 23		beq $35d4			beq 	_TokQString
.35b1	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.35b3	b0 26		bcs $35db			bcs 	_TokPunctuation
.35b5	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.35b7	b0 29		bcs $35e2			bcs 	_TokIdentifier
.35b9	c9 3a		cmp #$3a			cmp 	#"9"+1
.35bb	b0 1e		bcs $35db			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.35bd	c9 30		cmp #$30			cmp 	#"0"
.35bf	90 1a		bcc $35db			bcc 	_TokPunctuation 			; < 0, punctuation.
.35c1	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.35c3	d0 08		bne $35cd			bne 	_TokConst
.35c5					_TokHexConst:
.35c5	c8		iny				iny									; consume token.
.35c6	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.35c8	20 ed 35	jsr $35ed			jsr 	TokenWrite
.35cb	a9 10		lda #$10			lda 	#16
.35cd					_TokConst:
.35cd	20 d5 36	jsr $36d5			jsr 	TokeniseInteger
.35d0	b0 cd		bcs $359f			bcs 	_TokLoop
.35d2	90 17		bcc $35eb			bcc 	_TokFail
.35d4					_TokQString:
.35d4	20 6b 37	jsr $376b			jsr 	TokeniseString
.35d7	b0 c6		bcs $359f			bcs 	_TokLoop
.35d9	90 10		bcc $35eb			bcc 	_TokFail
.35db					_TokPunctuation:
.35db	20 4a 37	jsr $374a			jsr 	TokenisePunctuation
.35de	b0 bf		bcs $359f			bcs 	_TokLoop
.35e0	90 09		bcc $35eb			bcc 	_TokFail
.35e2					_TokIdentifier:
.35e2	20 46 36	jsr $3646			jsr 	TokeniseIdentifier
.35e5	b0 b8		bcs $359f			bcs 	_TokLoop
.35e7	90 02		bcc $35eb			bcc 	_TokFail
.35e9					_TokExit:
.35e9	38		sec				sec
.35ea	60		rts				rts
.35eb					_TokFail:
.35eb	18		clc				clc
.35ec	60		rts				rts
.35ed					TokenWrite:
.35ed	85 32		sta $32				sta 	tempShort 					; save XA
.35ef	48		pha				pha
.35f0	8a		txa				txa
.35f1	48		pha				pha
.35f2	a5 32		lda $32				lda 	tempShort
.35f4	ae 24 0d	ldx $0d24			ldx 	tokenBufferIndex 			; geet index
.35f7	9d 24 0c	sta $0c24,x			sta 	tokenBuffer,x 				; write byte to buffer
.35fa	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.35fc	9d 25 0c	sta $0c25,x			sta 	tokenBuffer+1,x
.35ff	ee 24 0d	inc $0d24			inc 	tokenBufferIndex 			; bump index
.3602	68		pla				pla
.3603	aa		tax				tax
.3604	68		pla				pla
.3605	60		rts				rts
.3606					TokeniseMakeASCIIZ:
.3606	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3608	b1 28		lda ($28),y			lda 	(codePtr),y
.360a	a8		tay				tay
.360b	c8		iny				iny 								; +1, the NULL goes here.
.360c	a9 00		lda #$00			lda 	#0
.360e	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3610	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3612	d0 02		bne $3616			bne 	_TMKAExit
.3614	e6 29		inc $29				inc 	codePtr+1
.3616					_TMKAExit:
.3616	60		rts				rts
.3617					TokeniseFixCase:
.3617	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3619	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.361b					_TFCFlipQ:
.361b	8a		txa				txa
.361c	49 01		eor #$01			eor 	#1
.361e	aa		tax				tax
.361f					_TFCLoop:
.361f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3621	f0 22		beq $3645			beq 	_TFCExit 					; if zero exit.
.3623	c9 20		cmp #$20			cmp 	#32 						; if control
.3625	90 1a		bcc $3641			bcc 	_TFCControl
.3627	c8		iny				iny 								; preconsume
.3628	c9 22		cmp #$22			cmp 	#'"'
.362a	f0 ef		beq $361b			beq 	_TFCFlipQ
.362c	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.362e	90 ef		bcc $361f			bcc 	_TFCLoop
.3630	c9 7b		cmp #$7b			cmp 	#"z"+1
.3632	b0 eb		bcs $361f			bcs 	_TFCLoop
.3634	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3636	d0 e7		bne $361f			bne 	_TFCLoop
.3638	88		dey				dey
.3639	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.363b					_TFCWrite:
.363b	91 28		sta ($28),y			sta 	(codePtr),y
.363d	c8		iny				iny
.363e	4c 1f 36	jmp $361f			jmp 	_TFCLoop
.3641					_TFCControl:
.3641	a9 20		lda #$20			lda 	#" "
.3643	d0 f6		bne $363b			bne 	_TFCWrite
.3645					_TFCExit:
.3645	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3646					TokeniseIdentifier:
.3646	a2 00		ldx #$00			ldx 	#0
.3648					_TICopyID:
.3648	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.364a	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.364c	f0 16		beq $3664			beq 	_TICopyUnderscore
.364e	c9 2e		cmp #$2e			cmp 	#"."
.3650	f0 14		beq $3666			beq 	_TICopyIn
.3652	c9 30		cmp #$30			cmp 	#"0"
.3654	90 1b		bcc $3671			bcc 	_TIEndCopy
.3656	c9 3a		cmp #$3a			cmp 	#"9"+1
.3658	90 0c		bcc $3666			bcc 	_TICopyIn
.365a	c9 41		cmp #$41			cmp 	#"A"
.365c	90 13		bcc $3671			bcc 	_TIEndCopy
.365e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3660	b0 0f		bcs $3671			bcs		_TIEndCopy
.3662	90 02		bcc $3666			bcc 	_TICopyIn
.3664					_TICopyUnderScore:
.3664	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3666					_TICopyIn:
.3666	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3667	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.366a	8e cf 0a	stx $0acf			stx 	convertBuffer
.366d	c8		iny				iny 								; next character
.366e	4c 48 36	jmp $3648			jmp 	_TICopyID 					; loop round
.3671					_TIEndCopy:
.3671	a9 24		lda #$24			lda 	#"$"
.3673	20 c8 36	jsr $36c8			jsr 	TIDCheckCopy
.3676	a9 23		lda #$23			lda 	#"#"
.3678	20 c8 36	jsr $36c8			jsr 	TIDCheckCopy
.367b	a9 28		lda #$28			lda 	#"("
.367d	20 c8 36	jsr $36c8			jsr 	TIDCheckCopy
.3680	20 ff 34	jsr $34ff			jsr 	TokenSearch 				; is it a token
.3683	b0 41		bcs $36c6			bcs 	_TIExit 					; if so, then exit.
.3685	98		tya				tya
.3686	48		pha				pha
.3687	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3689	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.368c	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.368f	c9 28		cmp #$28			cmp 	#"("
.3691	d0 02		bne $3695			bne 	_TINotArray
.3693	ca		dex				dex 								; yes, remove it and convert to array.
.3694	c8		iny				iny
.3695					_TINotArray:
.3695	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3698	c9 24		cmp #$24			cmp 	#"$"
.369a	d0 03		bne $369f			bne 	_TINotString
.369c	ca		dex				dex
.369d	c8		iny				iny
.369e	c8		iny				iny
.369f					_TINotString:
.369f	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.36a2	c9 23		cmp #$23			cmp 	#"#"
.36a4	d0 05		bne $36ab			bne 	_TINotFloat
.36a6	ca		dex				dex
.36a7	c8		iny				iny
.36a8	c8		iny				iny
.36a9	c8		iny				iny
.36aa	c8		iny				iny
.36ab					_TINotFloat:
.36ab	e8		inx				inx 								; write end marker for identifier.
.36ac	98		tya				tya
.36ad	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.36b0	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.36b3	a2 01		ldx #$01			ldx 	#1
.36b5					_TIOutput:
.36b5	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.36b8	29 3f		and #$3f			and 	#$3F
.36ba	48		pha				pha
.36bb	20 ed 35	jsr $35ed			jsr 	TokenWrite
.36be	e8		inx				inx
.36bf	68		pla				pla
.36c0	c9 3a		cmp #$3a			cmp 	#$3A
.36c2	90 f1		bcc $36b5			bcc 	_TIOutput
.36c4	68		pla				pla
.36c5	a8		tay				tay
.36c6					_TIExit:
.36c6	38		sec				sec 								; this can't fail.
.36c7	60		rts				rts
.36c8					TIDCheckCopy:
.36c8	d1 28		cmp ($28),y			cmp 	(codePtr),y
.36ca	d0 08		bne $36d4			bne 	_TIDCCExit
.36cc	e8		inx				inx
.36cd	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.36d0	8e cf 0a	stx $0acf			stx 	convertBuffer
.36d3	c8		iny				iny
.36d4					_TIDCCExit:
.36d4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.36d5					TokeniseInteger:
.36d5	85 2c		sta $2c				sta 	temp1 						; save base
.36d7	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.36d9	8e cf 0a	stx $0acf			stx 	convertBuffer
.36dc					_TIGetChars:
.36dc	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.36de	c9 30		cmp #$30			cmp 	#"0"
.36e0	90 1f		bcc $3701			bcc 	_TIEndGet
.36e2	c9 3a		cmp #$3a			cmp 	#"9"+1
.36e4	90 10		bcc $36f6			bcc 	_TIHaveChar
.36e6	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.36e8	c9 0a		cmp #$0a			cmp 	#10
.36ea	f0 15		beq $3701			beq 	_TIEndGet
.36ec	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.36ee	c9 41		cmp #$41			cmp 	#"A"
.36f0	90 0f		bcc $3701			bcc 	_TIEndGet
.36f2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.36f4	b0 0b		bcs $3701			bcs 	_TIEndGet
.36f6					_TIHaveChar:
.36f6	e8		inx				inx 								; write into buffer.
.36f7	8e cf 0a	stx $0acf			stx 	convertBuffer
.36fa	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.36fd	c8		iny				iny 								; next char
.36fe	4c dc 36	jmp $36dc			jmp 	_TIGetChars
.3701					_TIEndGet:
.3701	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3703	f0 1c		beq $3721			beq 	_TIFail
.3705	98		tya				tya
.3706	48		pha				pha
.3707	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3709	85 2a		sta $2a				sta 	temp0
.370b	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.370d	85 2b		sta $2b				sta 	1+(temp0)
.370f	a9 00		lda #$00			lda 	#0 							; stack 0
.3711	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3713	a2 14		ldx #$14		ldx	#20
.3715	20 1e 30	jsr $301e		jsr	mainHandler
.3718	68		pla				pla
.3719	a8		tay				tay
.371a	90 05		bcc $3721			bcc 	_TIFail 					; didn't convert.
.371c	20 23 37	jsr $3723			jsr 	TIRecursiveOut 				; recursive output ?
.371f	38		sec				sec
.3720	60		rts				rts
.3721					_TIFail:
.3721	18		clc				clc
.3722	60		rts				rts
.3723					TIRecursiveOut:
.3723	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.3725	29 3f		and #$3f			and 	#$3F
.3727	09 40		ora #$40			ora 	#$40
.3729	48		pha				pha
.372a	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.372c	29 c0		and #$c0			and 	#$C0
.372e	05 50		ora $50				ora 	esInt1
.3730	05 58		ora $58				ora 	esInt2
.3732	05 60		ora $60				ora 	esInt3
.3734	f0 10		beq $3746			beq 	_TIRONoRecursion
.3736	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3738					_TIROShift:
.3738	46 60		lsr $60				lsr 	esInt3
.373a	66 58		ror $58				ror 	esInt2
.373c	66 50		ror $50				ror 	esInt1
.373e	66 48		ror $48				ror 	esInt0
.3740	ca		dex				dex
.3741	d0 f5		bne $3738			bne 	_TIROShift
.3743	20 23 37	jsr $3723			jsr 	TIRecursiveOut 				; call recursively
.3746					_TIRONoRecursion:
.3746	68		pla				pla 								; pull the old bit.
.3747	4c ed 35	jmp $35ed			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.374a					TokenisePunctuation:
.374a	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.374c	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.374f	c8		iny				iny
.3750	b1 28		lda ($28),y			lda 	(codePtr),y
.3752	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3755	c8		iny				iny 								; Y is +2
.3756	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3758	8d cf 0a	sta $0acf			sta 	convertBuffer
.375b	20 ff 34	jsr $34ff			jsr 	TokenSearch 				; search for that token.
.375e	b0 0a		bcs $376a			bcs 	_TIFound
.3760	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3763	88		dey				dey 								; Y is now +1
.3764	20 ff 34	jsr $34ff			jsr 	TokenSearch 				; search for that token.
.3767	b0 01		bcs $376a			bcs 	_TIFound
.3769	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.376a					_TIFound:
.376a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.376b					TokeniseString:
.376b	c8		iny				iny 								; skip opening quote
.376c	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.376e	84 2a		sty $2a				sty 	temp0 						; save start.
.3770					_TSGetLength:
.3770	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3772	f0 21		beq $3795			beq 	_TSFail						; end of line, fail
.3774	c8		iny				iny
.3775	e8		inx				inx
.3776	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3778	d0 f6		bne $3770			bne 	_TSGetLength
.377a	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.377c	20 ed 35	jsr $35ed			jsr 	TokenWrite
.377f	8a		txa				txa 								; output length
.3780	20 ed 35	jsr $35ed			jsr 	TokenWrite
.3783	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3785	e0 00		cpx #$00			cpx 	#0 							; check ended
.3787	f0 09		beq $3792			beq 	_TSExit
.3789					_TSOutput:
.3789	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.378b	20 ed 35	jsr $35ed			jsr 	TokenWrite
.378e	c8		iny				iny
.378f	ca		dex				dex
.3790	d0 f7		bne $3789			bne 	_TSOutput
.3792					_TSExit:
.3792	c8		iny				iny 								; skip ending quote
.3793	38		sec				sec 								; return CS.
.3794	60		rts				rts
.3795					_TSFail:
.3795	18		clc				clc
.3796	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3797					TokenTableAddress:
>3797	9f 37						.word 	Group0Text
>3799	6c 39						.word 	Group1Text
>379b	a7 3a						.word 	Group2Text
>379d	ba 3a						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.379f					Group0Text:
>379f	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>37a3	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>37a6	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>37aa	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>37ad	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>37b0	01 be					.byte $01,$be                          ; $8b >
>37b2	01 bc					.byte $01,$bc                          ; $8c <
>37b4	01 bd					.byte $01,$bd                          ; $8d =
>37b6	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>37b9	01 ab					.byte $01,$ab                          ; $8f +
>37bb	01 ad					.byte $01,$ad                          ; $90 -
>37bd	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>37c0	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>37c3	01 aa					.byte $01,$aa                          ; $93 *
>37c5	01 af					.byte $01,$af                          ; $94 /
>37c7	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>37cb	01 de					.byte $01,$de                          ; $96 ^
>37cd	01 a1					.byte $01,$a1                          ; $97 !
>37cf	01 bf					.byte $01,$bf                          ; $98 ?
>37d1	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>37d8	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>37de	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>37e2	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>37e5	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>37ed	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>37f3	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>37f8	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>37fd	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3802	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3808	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3810	01 a8					.byte $01,$a8                          ; $a4 (
>3812	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3817	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>381c	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3821	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3829	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>382e	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3833	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3839	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>383e	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3843	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3848	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>384f	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3856	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>385b	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3862	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3869	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>386f	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3876	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>387c	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3884	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>388a	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>388f	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3895	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>389b	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>38a1	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>38a6	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>38ab	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>38b2	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>38b9	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>38c1	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>38c9	01 c0					.byte $01,$c0                          ; $c3 @
>38cb	01 fe					.byte $01,$fe                          ; $c4 ~
>38cd	01 a6					.byte $01,$a6                          ; $c5 &
>38cf	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>38d5	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>38dd	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>38e1	01 a9					.byte $01,$a9                          ; $c9 )
>38e3	01 ba					.byte $01,$ba                          ; $ca :
>38e5	01 ac					.byte $01,$ac                          ; $cb ,
>38e7	01 bb					.byte $01,$bb                          ; $cc ;
>38e9	01 a7					.byte $01,$a7                          ; $cd '
>38eb	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>38ee	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>38f3	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>38f8	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>38fe	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3902	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3906	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>390a	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3910	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3915	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3919	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>391f	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3924	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>392a	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3931	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3936	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>393d	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3942	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3947	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>394c	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3950	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3956	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>395a	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3961	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3967	01 ae					.byte $01,$ae                          ; $e6 .
>3969	01 a3					.byte $01,$a3                          ; $e7 #
>396b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.396c					Group1Text:
>396c	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3972	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3977	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>397c	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3981	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3985	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3989	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>398e	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3996	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>399a	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>399f	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>39a4	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>39a8	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>39ae	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>39b2	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>39b6	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>39ba	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>39be	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>39c2	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>39c6	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>39ca	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>39ce	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>39d2	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>39d6	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>39da	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>39de	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>39e2	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>39e6	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>39ea	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>39ee	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>39f2	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>39f6	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>39fa	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>39fe	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3a02	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3a06	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3a0a	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3a0e	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3a12	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3a16	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3a1a	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3a1e	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3a22	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3a26	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3a2a	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3a2e	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3a32	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3a36	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3a3a	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3a3e	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3a42	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3a46	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3a4a	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3a4e	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3a52	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3a56	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3a5a	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3a5e	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3a62	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3a66	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3a6a	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3a6e	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3a72	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3a76	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3a7a	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3a7e	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3a82	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3a86	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3a8a	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3a8e	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3a92	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3a96	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3a9a	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3a9e	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3aa2	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3aa6	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3aa7					Group2Text:
>3aa7	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3aad	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3ab3	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3ab9	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3aba					Group3Text:
>3aba	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3ac1	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3ac8	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3ac9					tokeniserHandler:
.3ac9	7c cc 3a	jmp ($3acc,x)			jmp 	(tokeniserVectors,x)
.3acc					tokeniserVectors:
>3acc	f3 32					.word Detokenise           ; index 0
>3ace	e7 32					.word ListLine             ; index 2
>3ad0	6e 35					.word TokTest              ; index 4
>3ad2	8e 35					.word Tokenise             ; index 6
>3ad4	91 35					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3ad6					section_end_tokeniser:
.3ad6					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d25					varHash:
>0d25							.fill	1
.0d26					varType:
>0d26							.fill 	1
.0d27					varEnd:
>0d27							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3ad6					AccessVariable:
.3ad6	aa		tax				tax 								; stack in X
.3ad7	c8		iny				iny									; look at second character
.3ad8	b1 28		lda ($28),y			lda 	(codePtr),y
.3ada	88		dey				dey
.3adb	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3add	d0 15		bne $3af4			bne 	_AVLong 					; no, always use the hash tables.
.3adf	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3ae1	38		sec				sec 	 							; make it 0-25
.3ae2	e9 01		sbc #$01			sbc 	#1
.3ae4	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3ae5	0a		asl a				asl 	a
.3ae6	95 48		sta $48,x			sta 	esInt0,x
.3ae8	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3aea	95 50		sta $50,x			sta 	esInt1,x
.3aec	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3aee	95 40		sta $40,x			sta 	esType,x
.3af0	c8		iny				iny 								; skip over the variable reference in the code.
.3af1	c8		iny				iny  								; (1 letter, 1 type)
.3af2	8a		txa				txa 								; stack in A to return.
.3af3	60		rts				rts
.3af4					_AVLong:
.3af4	8a		txa				txa
.3af5	48		pha				pha
.3af6	20 3d 3b	jsr $3b3d			jsr 	AccessSetup 				; set up the basic information we need for later
.3af9	20 7f 3d	jsr $3d7f			jsr 	FindVariable 				; does the variable exist already ?
.3afc	b0 0e		bcs $3b0c			bcs 	_AVFound 					; yes, then its found
.3afe	ad 26 0d	lda $0d26			lda 	varType 					; otherwise, is the variable type an array
.3b01	4a		lsr a				lsr 	a
.3b02	90 05		bcc $3b09			bcc 	_AVCanCreate 				; if not, we can autocreate
.3b04	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3b06	20 b5 13	jsr $13b5		jsr	errorHandler
.3b09					_AVCanCreate:
.3b09	20 f2 3b	jsr $3bf2			jsr 	CreateVariable 				; variable does not exist, create it.
.3b0c					_AVFound:
.3b0c	68		pla				pla
.3b0d	aa		tax				tax
.3b0e	18		clc				clc 								; copy temp0 (variable record address)
.3b0f	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3b11	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3b13	95 48		sta $48,x			sta 	esInt0,x
.3b15	a5 2b		lda $2b				lda 	temp0+1
.3b17	69 00		adc #$00			adc 	#0
.3b19	95 50		sta $50,x			sta 	esInt1,x
.3b1b	a9 00		lda #$00			lda 	#0
.3b1d	95 58		sta $58,x			sta 	esInt2,x
.3b1f	95 60		sta $60,x			sta 	esInt3,x
.3b21	ac 26 0d	ldy $0d26			ldy 	varType 					; get the type ID from the type.
.3b24	b9 fd 3a	lda $3afd,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3b27	95 40		sta $40,x			sta 	esType,x
.3b29	ac 27 0d	ldy $0d27			ldy 	varEnd 						; restore Y
.3b2c	ad 26 0d	lda $0d26			lda 	VarType 					; get variable type, put LSB into C
.3b2f	4a		lsr a				lsr 	a
.3b30	90 03		bcc $3b35			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3b32	20 7a 3b	jsr $3b7a			jsr 	AccessArray 				; array lookup. if LSB was set.
.3b35					_AVNotArray:
.3b35	8a		txa				txa 								; return stack in A and return
.3b36	60		rts				rts
.3b37					_AVTypeTable:
>3b37	80 80						.byte 	$80,$80						; integer
>3b39	c0 c0						.byte 	$C0,$C0 					; string
>3b3b	81 81						.byte 	$81,$81 					; float
.3b3d					AccessSetup:
.3b3d	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3b3f	8d 25 0d	sta $0d25			sta 	varHash
.3b42	98		tya				tya
.3b43	48		pha				pha
.3b44	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3b46	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3b48	b0 0b		bcs $3b55			bcs 	_ASComplete
.3b4a	18		clc				clc 								; add to the hash. Might improve this.
.3b4b	6d 25 0d	adc $0d25			adc 	varHash
.3b4e	8d 25 0d	sta $0d25			sta 	varHash
.3b51	c8		iny				iny 								; next character
.3b52	4c 44 3b	jmp $3b44			jmp 	_ASLoop
.3b55					_ASComplete:
.3b55	8d 26 0d	sta $0d26			sta 	varType 					; save variable type byte
.3b58	c8		iny				iny
.3b59	8c 27 0d	sty $0d27			sty 	varEnd 						; save the ending position.
.3b5c	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3b5d	e9 3a		sbc #$3a			sbc 	#$3A
.3b5f	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3b60	0a		asl a				asl 	a
.3b61	0a		asl a				asl 	a
.3b62	0a		asl a				asl 	a 							; 2 bytes/word
.3b63	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3b65	ad 25 0d	lda $0d25			lda 	varHash 					; get hash
.3b68	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3b6a	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3b6b	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3b6d	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3b6f	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3b71	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3b73	69 00		adc #$00			adc 	#0
.3b75	85 3c		sta $3c				sta 	hashList+1
.3b77	68		pla				pla
.3b78	a8		tay				tay
.3b79	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3b7a					AccessArray:
.3b7a	e8		inx				inx
.3b7b	8a		txa				txa
.3b7c	a2 06		ldx #$06		ldx	#6
.3b7e	20 1e 30	jsr $301e		jsr	mainHandler
.3b81	48		pha				pha
.3b82	a2 00		ldx #$00		ldx	#0
.3b84	20 1e 30	jsr $301e		jsr	mainHandler
.3b87	68		pla				pla
.3b88	aa		tax				tax
.3b89	ca		dex				dex
.3b8a	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3b8c	15 59		ora $59,x			ora 	esInt2+1,x
.3b8e	d0 33		bne $3bc3			bne 	_AABadIndex
.3b90	98		tya				tya
.3b91	48		pha				pha
.3b92	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3b94	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3b96	b5 50		lda $50,x			lda 	esInt1,x
.3b98	85 2b		sta $2b				sta 	temp0+1
.3b9a	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3b9c	b5 49		lda $49,x			lda 	esInt0+1,x
.3b9e	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3ba0	c8		iny				iny
.3ba1	b5 51		lda $51,x			lda 	esInt1+1,x
.3ba3	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3ba5	b0 1c		bcs $3bc3			bcs 	_AABadIndex 				; if >= then fail.
.3ba7	e8		inx				inx 								; point to index
.3ba8	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3baa	b1 2a		lda ($2a),y			lda 	(temp0),y
.3bac	20 c8 3b	jsr $3bc8			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3baf	ca		dex				dex
.3bb0	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3bb2	18		clc				clc
.3bb3	b5 49		lda $49,x			lda 	esInt0+1,x
.3bb5	71 2a		adc ($2a),y			adc 	(temp0),y
.3bb7	95 48		sta $48,x			sta 	esInt0,x
.3bb9	b5 51		lda $51,x			lda 	esInt1+1,x
.3bbb	c8		iny				iny
.3bbc	71 2a		adc ($2a),y			adc 	(temp0),y
.3bbe	95 50		sta $50,x			sta 	esInt1,x
.3bc0	68		pla				pla
.3bc1	a8		tay				tay
.3bc2	60		rts				rts
.3bc3					_AABadIndex:
.3bc3	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3bc5	20 b5 13	jsr $13b5		jsr	errorHandler
.3bc8					MultiplyTOSByA:
.3bc8	48		pha				pha
.3bc9	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3bcb	85 2c		sta $2c				sta 	temp1
.3bcd	b5 50		lda $50,x			lda 	esInt1,x
.3bcf	85 2d		sta $2d				sta 	temp1+1
.3bd1	68		pla				pla
.3bd2	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3bd4	36 50		rol $50,x			rol 	esInt1,x
.3bd6	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3bd8	f0 17		beq $3bf1			beq 	_MTBAExit
.3bda	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3bdc	d0 0f		bne $3bed			bne 	_MTBANotFloat
.3bde	48		pha				pha
.3bdf	18		clc				clc 								; so this will make it x 3
.3be0	b5 48		lda $48,x			lda 	esInt0,x
.3be2	65 2c		adc $2c				adc 	temp1
.3be4	95 48		sta $48,x			sta 	esInt0,x
.3be6	b5 50		lda $50,x			lda 	esInt1,x
.3be8	65 2d		adc $2d				adc 	temp1+1
.3bea	95 50		sta $50,x			sta 	esInt1,x
.3bec	68		pla				pla
.3bed					_MTBANotFloat:
.3bed	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3bef	36 50		rol $50,x			rol 	esInt1,x
.3bf1					_MTBAExit:
.3bf1	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3bf2					CreateVariable:
.3bf2	98		tya				tya 								; push Y on the stack twice.
.3bf3	48		pha				pha									; position in code of the new variable.
.3bf4	48		pha				pha
.3bf5	ae 26 0d	ldx $0d26			ldx 	varType 					; get var type 0-5 from the var type
.3bf8	bd 1c 3c	lda $3c1c,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3bfb	48		pha				pha 								; save length
.3bfc	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3bfe	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3c00	a5 36		lda $36				lda 	lowMemory+1
.3c02	85 2b		sta $2b				sta 	temp0+1
.3c04	68		pla				pla 								; get length
.3c05	18		clc				clc 								; add to low memory.
.3c06	65 35		adc $35				adc 	lowMemory
.3c08	85 35		sta $35				sta 	lowMemory
.3c0a	90 08		bcc $3c14			bcc 	_CVNoCarry
.3c0c	e6 36		inc $36				inc 	lowMemory+1
.3c0e	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3c10	c5 34		cmp $34				cmp 	highMemory+1
.3c12	b0 3d		bcs $3c51			bcs 	_CVMemory
.3c14					_CVNoCarry:
.3c14	ad 25 0d	lda $0d25			lda 	varHash 					; store hash at offset 4.
.3c17	a0 04		ldy #$04			ldy 	#4
.3c19	91 2a		sta ($2a),y			sta 	(temp0),y
.3c1b	68		pla				pla 								; offset, work out where the variable name is.
.3c1c	18		clc				clc
.3c1d	65 28		adc $28				adc 	codePtr
.3c1f	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3c21	91 2a		sta ($2a),y			sta 	(temp0),y
.3c23	a5 29		lda $29				lda 	codePtr+1
.3c25	69 00		adc #$00			adc 	#0
.3c27	c8		iny				iny
.3c28	91 2a		sta ($2a),y			sta 	(temp0),y
.3c2a	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3c2d	b0 03		bcs $3c32			bcs 	_CVNotImmediate
.3c2f	20 94 3c	jsr $3c94			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3c32					_CVNotImmediate:
.3c32	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3c34	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3c36	91 2a		sta ($2a),y			sta 	(temp0),y
.3c38	c8		iny				iny
.3c39	b1 3b		lda ($3b),y			lda 	(hashList),y
.3c3b	91 2a		sta ($2a),y			sta 	(temp0),y
.3c3d	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3c3f	91 3b		sta ($3b),y			sta 	(hashList),y
.3c41	88		dey				dey
.3c42	a5 2a		lda $2a				lda 	temp0
.3c44	91 3b		sta ($3b),y			sta 	(hashList),y
.3c46	ad 26 0d	lda $0d26			lda 	varType 					; type in A
.3c49	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3c4b	20 5c 3c	jsr $3c5c			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3c4e	68		pla				pla
.3c4f	a8		tay				tay
.3c50	60		rts				rts
.3c51					_CVMemory:
.3c51	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3c53	20 b5 13	jsr $13b5		jsr	errorHandler
>3c56	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3c58	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3c5a	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3c5c					ZeroTemp0Y:
.3c5c	4a		lsr a				lsr 	a 							; bit 0 in carry
.3c5d	0a		asl a				asl 	a
.3c5e	b0 19		bcs $3c79			bcs 	_ZTExit 					; we don't initialise arrays.
.3c60	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3c62	f0 16		beq $3c7a			beq 	_ZTWriteNullString 			; write "" string
.3c64	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3c66	f0 22		beq $3c8a			beq 	_ZTWriteFloat
.3c68	98		tya				tya
.3c69	48		pha				pha
.3c6a	a9 00		lda #$00			lda 	#0
.3c6c	91 2a		sta ($2a),y			sta 	(temp0),y
.3c6e	c8		iny				iny
.3c6f	91 2a		sta ($2a),y			sta 	(temp0),y
.3c71	c8		iny				iny
.3c72	91 2a		sta ($2a),y			sta 	(temp0),y
.3c74	c8		iny				iny
.3c75	91 2a		sta ($2a),y			sta 	(temp0),y
.3c77	68		pla				pla
.3c78	a8		tay				tay
.3c79					_ZTExit:
.3c79	60		rts				rts
.3c7a					_ZTWriteNullString:
.3c7a	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3c7c	8d ce 0a	sta $0ace			sta 	NullString
.3c7f	a9 ce		lda #$ce			lda 	#NullString & $FF
.3c81	91 2a		sta ($2a),y			sta 	(temp0),y
.3c83	a9 0a		lda #$0a			lda 	#NullString >> 8
.3c85	c8		iny				iny
.3c86	91 2a		sta ($2a),y			sta 	(temp0),y
.3c88	88		dey				dey
.3c89	60		rts				rts
.3c8a					_ZTWriteFloat:
.3c8a	8a		txa				txa
.3c8b	48		pha				pha
.3c8c	a2 1e		ldx #$1e		ldx	#30
.3c8e	20 b3 17	jsr $17b3		jsr	floatingpointHandler
.3c91	68		pla				pla
.3c92	aa		tax				tax
.3c93	60		rts				rts
.3c94					CloneVariableName:
.3c94	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3c96	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c98	85 2e		sta $2e				sta 	temp2
.3c9a	c8		iny				iny
.3c9b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c9d	85 2f		sta $2f				sta 	temp2+1
.3c9f	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3ca1	91 2a		sta ($2a),y			sta 	(temp0),y
.3ca3	88		dey				dey
.3ca4	a5 35		lda $35				lda 	lowMemory
.3ca6	91 2a		sta ($2a),y			sta 	(temp0),y
.3ca8	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3caa					_CVNCopy:
.3caa	b1 2e		lda ($2e),y			lda		(temp2),y
.3cac	91 35		sta ($35),y			sta 	(lowMemory),y
.3cae	c8		iny				iny
.3caf	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3cb1	90 f7		bcc $3caa			bcc 	_CVNCopy
.3cb3	98		tya				tya 								; add Y to low memory
.3cb4	18		clc				clc
.3cb5	65 35		adc $35				adc 	lowMemory
.3cb7	85 35		sta $35				sta 	lowMemory
.3cb9	90 02		bcc $3cbd			bcc 	_CVNNoCarry
.3cbb	e6 36		inc $36				inc 	lowMemory+1
.3cbd					_CVNNoCarry:
.3cbd	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3cbe					CreateArray:
.3cbe	20 3d 3b	jsr $3b3d			jsr 	AccessSetup 				; set up the basic stuff.
.3cc1	ad 26 0d	lda $0d26			lda 	varType 					; is the variable type an array
.3cc4	4a		lsr a				lsr 	a
.3cc5	90 3f		bcc $3d06			bcc 	_CANotArray 				; no, cause an error.
.3cc7	20 7f 3d	jsr $3d7f			jsr 	FindVariable 				; does the variable exist already
.3cca	b0 35		bcs $3d01			bcs 	_CAFound 					; cannot redefine it.
.3ccc	20 f2 3b	jsr $3bf2			jsr 	CreateVariable 				; create the variable entry.
.3ccf	ac 27 0d	ldy $0d27			ldy 	varEnd 						; point Y to the end of the variable entry.
.3cd2	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3cd4	48		pha				pha
.3cd5	a5 2b		lda $2b				lda 	temp0+1
.3cd7	48		pha				pha
.3cd8	ad 26 0d	lda $0d26			lda 	varType 					; push variable type on the stack.
.3cdb	48		pha				pha
.3cdc	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3cde	a2 06		ldx #$06		ldx	#6
.3ce0	20 1e 30	jsr $301e		jsr	mainHandler
.3ce3	a2 00		ldx #$00		ldx	#0
.3ce5	20 1e 30	jsr $301e		jsr	mainHandler
.3ce8	68		pla				pla 		 						; restore type and position.
.3ce9	8d 26 0d	sta $0d26			sta 	varType
.3cec	68		pla				pla
.3ced	85 2b		sta $2b				sta 	temp0+1
.3cef	68		pla				pla
.3cf0	85 2a		sta $2a				sta 	temp0
.3cf2	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3cf4	29 e0		and #$e0			and 	#$E0
.3cf6	05 58		ora $58				ora 	esInt2
.3cf8	05 60		ora $60				ora 	esInt3
.3cfa	f0 0f		beq $3d0b			beq 	_CASizeOk
.3cfc					_CASize:
.3cfc	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3cfe	20 b5 13	jsr $13b5		jsr	errorHandler
.3d01					_CAFound:
.3d01	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3d03	20 b5 13	jsr $13b5		jsr	errorHandler
.3d06					_CANotArray:
.3d06	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3d08	20 b5 13	jsr $13b5		jsr	errorHandler
.3d0b					_CASizeOk:
.3d0b	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3d0d	d0 02		bne $3d11			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3d0f	e6 49		inc $49				inc 	esInt0+1
.3d11					_CANoCarry:
.3d11	98		tya				tya
.3d12	48		pha				pha
.3d13	a0 05		ldy #$05			ldy 	#5
.3d15	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3d17	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3d19	c8		iny				iny
.3d1a	a5 36		lda $36				lda 	lowMemory+1
.3d1c	91 2a		sta ($2a),y			sta 	(temp0),y
.3d1e	c8		iny				iny
.3d1f	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3d21	91 2a		sta ($2a),y			sta 	(temp0),y
.3d23	c8		iny				iny
.3d24	a5 50		lda $50				lda 	esInt1
.3d26	91 2a		sta ($2a),y			sta 	(temp0),y
.3d28	c8		iny				iny
.3d29	ae 26 0d	ldx $0d26			ldx 	varType 					; get the length per element
.3d2c	bd 38 3d	lda $3d38,x			lda 	_CAActualSize-$3A-1,x
.3d2f	91 2a		sta ($2a),y			sta 	(temp0),y
.3d31	aa		tax				tax 								; save size in X
.3d32	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3d34	85 2a		sta $2a				sta 	temp0
.3d36	a5 36		lda $36				lda 	lowMemory+1
.3d38	85 2b		sta $2b				sta 	temp0+1
.3d3a	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3d3c	85 2c		sta $2c				sta 	temp1
.3d3e	85 2d		sta $2d				sta 	temp1+1
.3d40					_CAInitialiseArray:
.3d40	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3d42	ad 26 0d	lda $0d26			lda 	varType 					; base type of array in A.
.3d45	29 fe		and #$fe			and 	#$FE
.3d47	20 5c 3c	jsr $3c5c			jsr 	ZeroTemp0Y
.3d4a	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3d4b	18		clc				clc
.3d4c	65 2a		adc $2a				adc 	temp0
.3d4e	85 2a		sta $2a				sta 	temp0
.3d50	85 35		sta $35				sta 	lowMemory
.3d52	a5 2b		lda $2b				lda 	temp0+1
.3d54	69 00		adc #$00			adc 	#0
.3d56	85 2b		sta $2b				sta 	temp0+1
.3d58	85 36		sta $36				sta 	lowMemory+1
.3d5a	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3d5c	b0 1c		bcs $3d7a			bcs 	_CAMemory
.3d5e	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3d60	d0 02		bne $3d64			bne 	_CAIANoCarry
.3d62	e6 2d		inc $2d				inc 	temp1+1
.3d64					_CAIANoCarry:
.3d64	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3d66	c5 2c		cmp $2c				cmp 	temp1
.3d68	d0 d6		bne $3d40			bne 	_CAInitialiseArray
.3d6a	a5 50		lda $50				lda 	esInt1
.3d6c	c5 2d		cmp $2d				cmp 	temp1+1
.3d6e	d0 d0		bne $3d40			bne 	_CAInitialiseArray
.3d70	68		pla				pla
.3d71	a8		tay				tay
.3d72	60		rts				rts
.3d73					_CAActualSize:
>3d73	04 00						.byte 	VarISize,0
>3d75	02 00						.byte 	VarSSize,0
>3d77	06 00						.byte 	VarFSize,0
>3d79	db						.byte 	$DB
.3d7a					_CAMemory:
.3d7a	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3d7c	20 b5 13	jsr $13b5		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3d7f					FindVariable:
.3d7f	98		tya				tya
.3d80	48		pha				pha
.3d81	98		tya				tya 								; point temp2 to the actual name
.3d82	18		clc				clc 								; in memory of the variable being created
.3d83	65 28		adc $28				adc 	codePtr
.3d85	85 2e		sta $2e				sta 	temp2
.3d87	a5 29		lda $29				lda 	codePtr+1
.3d89	69 00		adc #$00			adc 	#0
.3d8b	85 2f		sta $2f				sta 	temp2+1
.3d8d	a0 00		ldy #$00			ldy 	#0
.3d8f	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3d91	85 2a		sta $2a				sta 	temp0
.3d93	a5 3c		lda $3c				lda 	hashList+1
.3d95	85 2b		sta $2b				sta 	temp0+1
.3d97	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3d99	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d9b	f0 2c		beq $3dc9			beq 	_FVFail
.3d9d	aa		tax				tax
.3d9e	88		dey				dey		 							; get LSB
.3d9f	b1 2a		lda ($2a),y			lda 	(temp0),y
.3da1	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3da3	86 2b		stx $2b				stx 	temp0+1
.3da5	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3da7	b1 2a		lda ($2a),y			lda 	(temp0),y
.3da9	cd 25 0d	cmp $0d25			cmp 	varHash
.3dac	d0 e9		bne $3d97			bne 	_FVNext 					; if not, no point in checking the name.
.3dae	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3daf	b1 2a		lda ($2a),y			lda 	(temp0),y
.3db1	85 2d		sta $2d				sta 	temp1+1
.3db3	88		dey				dey
.3db4	b1 2a		lda ($2a),y			lda 	(temp0),y
.3db6	85 2c		sta $2c				sta 	temp1
.3db8	a0 00		ldy #$00			ldy 	#0
.3dba					_FVCheck:
.3dba	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3dbc	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3dbe	d0 d7		bne $3d97			bne 	_FVNext		 				; fail if different.
.3dc0	c8		iny				iny
.3dc1	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3dc3	90 f5		bcc $3dba			bcc 	_FVCheck
.3dc5	68		pla				pla
.3dc6	a8		tay				tay
.3dc7	38		sec				sec
.3dc8	60		rts				rts
.3dc9					_FVFail:
.3dc9	68		pla				pla
.3dca	a8		tay				tay
.3dcb	18		clc				clc
.3dcc	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3dcd					HashTableReset:
.3dcd	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3dcf	a9 00		lda #$00			lda 	#0
.3dd1					_HTRClear:
.3dd1	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3dd4	ca		dex				dex
.3dd5	d0 fa		bne $3dd1			bne 	_HTRClear
.3dd7	60		rts				rts

;******  Return to file: variable/variable.asm

.3dd8					variableHandler:
.3dd8	7c db 3d	jmp ($3ddb,x)			jmp 	(variableVectors,x)
.3ddb					variableVectors:
>3ddb	d6 3a					.word AccessVariable       ; index 0
>3ddd	be 3c					.word CreateArray          ; index 2
>3ddf	cd 3d					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3de1					section_end_variable:
.3de1					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d28					endStorage:
>3de1							.align 	256
.3e00					programMemory:
>3dff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3e00					section_end_footer:

;******  End of listing
