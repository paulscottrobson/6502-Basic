
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Sat Mar  6 11:07:50 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a2 02		ldx #$02		ldx	#2
.1005	20 bf 21	jsr $21bf		jsr	deviceHandler
.1008	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100a	8d c8 0a	sta $0ac8			sta 	basePage
.100d	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100f	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1012	a9 00		lda #$00			lda 	#($9800) & $FF
.1014	8d ca 0a	sta $0aca			sta 	endMemory
.1017	a9 98		lda #$98			lda 	#($9800) >> 8
.1019	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101c	4c bf 13	jmp $13bf			jmp 	Command_Run
.2a26					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	0e 0a 00 d5 c1 85 05 48			.byte 14,10,0,213,193,133,5,72,101,108,108,111,198,128,18,11,0,213,194,133,5,72,101,76,76,111,198,143,133,1,33,128,17,12,0,213,133,1,40,143,194,133,0,198,143,133,1,41,128,11,13,0,213,133,4,68,79,78,69,128,8,14,0,153,199,158,171,128,4,15,0,128,4,16,0,128,0
>5008	65 6c 6c 6f c6 80 12 0b 00 d5 c2 85 05 48 65 4c
>5018	4c 6f c6 8f 85 01 21 80 11 0c 00 d5 85 01 28 8f
>5028	c2 85 00 c6 8f 85 01 29 80 0b 0d 00 d5 85 04 44
>5038	4f 4e 45 80 08 0e 00 99 c7 9e ab 80 04 0f 00 80
>5048	04 10 00 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101f					Command_Assert:
.101f	20 75 1a	jsr $1a75			jsr 	EvaluateRootInteger 		; what is being asserted.
.1022	20 b9 20	jsr $20b9			jsr 	MInt32Zero 					; is it true ?
.1025	f0 01		beq $1028			beq 	_CAError
.1027	60		rts				rts
.1028					_CAError:
.1028	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.102a	20 ce 21	jsr $21ce		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.102d					CommandClear:
.102d	98		tya				tya
.102e	48		pha				pha
.102f	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.1032	85 0d		sta $0d				sta 	highMemory
.1034	ad cb 0a	lda $0acb			lda 	endMemory+1
.1037	85 0e		sta $0e				sta 	highMemory+1
.1039	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.103c	85 04		sta $04				sta 	temp0
.103e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1041	85 05		sta $05				sta 	temp0+1
.1043					_CCFindEnd:
.1043	a0 00		ldy #$00			ldy 	#0
.1045	b1 04		lda ($04),y			lda 	(temp0),y
.1047	f0 0c		beq $1055			beq 	_CCFoundEnd 				; offset zero is end.
.1049	18		clc				clc
.104a	65 04		adc $04				adc 	temp0 						; move to next line
.104c	85 04		sta $04				sta 	temp0
.104e	90 f3		bcc $1043			bcc 	_CCFindEnd
.1050	e6 05		inc $05				inc 	temp0+1
.1052	4c 43 10	jmp $1043			jmp 	_CCFindEnd
.1055					_CCFoundEnd:
.1055	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1057	85 0f		sta $0f				sta 	lowMemory
.1059	a5 05		lda $05				lda 	temp0+1
.105b	85 10		sta $10				sta 	lowMemory+1
.105d	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105f	20 70 10	jsr $1070			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1062	20 1f 21	jsr $211f			jsr 	RSReset 					; reset the return stack.
.1065	a2 04		ldx #$04		ldx	#4
.1067	20 1d 2a	jsr $2a1d		jsr	variableHandler
.106a	20 6c 15	jsr $156c			jsr 	ScanProc 					; scan for procedures
.106d	68		pla				pla
.106e	a8		tay				tay
.106f	60		rts				rts
.1070					AdvanceLowMemoryByte:
.1070	18		clc				clc
.1071	65 0f		adc $0f				adc 	lowMemory
.1073	85 0f		sta $0f				sta 	lowMemory
.1075	90 02		bcc $1079			bcc 	_ALMBExit
.1077	e6 10		inc $10				inc 	lowMemory+1
.1079					_ALMBExit:
.1079	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.107a					Command_Dim:
.107a	a2 02		ldx #$02		ldx	#2
.107c	20 1d 2a	jsr $2a1d		jsr	variableHandler
.107f	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.1081	c8		iny				iny
.1082	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1084	f0 f4		beq $107a			beq 	Command_Dim
.1086	88		dey				dey 								; unpick get
.1087	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2a26					Command_FOR:
.2a26	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2a28	a2 0b		ldx #$0b			ldx 	#11
.2a2a	20 2d 21	jsr $212d			jsr 	RSClaim
.2a2d	20 c4 10	jsr $10c4			jsr 	CommandLET 					; do the same as LET.
.2a30	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.2a32	c9 80		cmp #$80			cmp 	#$80
.2a34	d0 4c		bne $2a82			bne 	_CFType
.2a36	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.2a38	20 fa 20	jsr $20fa			jsr 	CheckToken
.2a3b	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2a3d	20 77 1a	jsr $1a77			jsr 	EvaluateInteger				; get terminal value in stack 1
.2a40	98		tya				tya
.2a41	48		pha				pha
.2a42	a0 04		ldy #$04			ldy 	#4
.2a44	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.2a46	91 78		sta ($78),y			sta 	(rsPointer),y
.2a48	c8		iny				iny
.2a49	a5 50		lda $50				lda		esInt1
.2a4b	91 78		sta ($78),y			sta 	(rsPointer),y
.2a4d	c8		iny				iny
.2a4e	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2a50	91 78		sta ($78),y			sta 	(rsPointer),y
.2a52	c8		iny				iny
.2a53	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.2a55	91 78		sta ($78),y			sta 	(rsPointer),y
.2a57	c8		iny				iny
.2a58	a5 51		lda $51				lda		esInt1+1
.2a5a	91 78		sta ($78),y			sta 	(rsPointer),y
.2a5c	c8		iny				iny
.2a5d	a5 59		lda $59				lda		esInt2+1
.2a5f	91 78		sta ($78),y			sta 	(rsPointer),y
.2a61	c8		iny				iny
.2a62	a5 61		lda $61				lda		esInt3+1
.2a64	91 78		sta ($78),y			sta 	(rsPointer),y
.2a66	68		pla				pla
.2a67	a8		tay				tay
.2a68	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.2a6a	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.2a6c	d0 0e		bne $2a7c			bne 	_CFDone
.2a6e	c8		iny				iny									; skip over step.
.2a6f	20 77 1a	jsr $1a77			jsr 	EvaluateInteger 			; get step
.2a72	98		tya				tya
.2a73	48		pha				pha
.2a74	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2a76	a0 06		ldy #$06			ldy 	#6
.2a78	91 78		sta ($78),y			sta 	(rsPointer),y
.2a7a	68		pla				pla
.2a7b	a8		tay				tay
.2a7c					_CFDone:
.2a7c	a9 01		lda #$01			lda 	#1
.2a7e	20 59 21	jsr $2159			jsr 	RSSavePosition 				; save position.
.2a81	60		rts				rts
.2a82					_CFType:
.2a82	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2a84	20 ce 21	jsr $21ce		jsr	errorHandler
.2a87					Command_NEXT:
.2a87	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2a89	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2a8b	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2a8d	f0 05		beq $2a94			beq 	_isok
.2a8f	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2a91	20 ce 21	jsr $21ce		jsr	errorHandler
.2a94					_isok:
.2a94	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2a96	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2a98	b0 18		bcs $2ab2			bcs 	_CNNoIndex
.2a9a	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2a9c	20 a4 1a	jsr $1aa4			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2a9f	98		tya				tya
.2aa0	48		pha				pha
.2aa1	a0 04		ldy #$04			ldy 	#4 							; check same variable
.2aa3	b1 78		lda ($78),y			lda 	(rsPointer),y
.2aa5	d5 48		cmp $48,x			cmp 	esInt0,x
.2aa7	d0 76		bne $2b1f			bne 	_CNBadIndex
.2aa9	c8		iny				iny
.2aaa	b1 78		lda ($78),y			lda 	(rsPointer),y
.2aac	d5 50		cmp $50,x			cmp 	esInt1,x
.2aae	d0 6f		bne $2b1f			bne 	_CNBadIndex
.2ab0	68		pla				pla
.2ab1	a8		tay				tay
.2ab2					_CNNoIndex:
.2ab2	98		tya				tya
.2ab3	48		pha				pha
.2ab4	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2ab6	b1 78		lda ($78),y			lda 	(rsPointer),y
.2ab8	85 04		sta $04				sta 	temp0
.2aba	c8		iny				iny
.2abb	b1 78		lda ($78),y			lda 	(rsPointer),y
.2abd	85 05		sta $05				sta 	temp0+1
.2abf	c8		iny				iny
.2ac0	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2ac2	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.2ac4	85 09		sta $09				sta 	temp2+1 					; save for later.
.2ac6	10 01		bpl $2ac9			bpl 	_CNSignX
.2ac8	ca		dex				dex  								; X = $FF
.2ac9					_CNSignX:
.2ac9	18		clc				clc 								; add to the LSB
.2aca	a0 00		ldy #$00			ldy 	#0
.2acc	71 04		adc ($04),y			adc 	(temp0),y
.2ace	91 04		sta ($04),y			sta 	(temp0),y
.2ad0					_CNPropogate:
.2ad0	c8		iny				iny  								; add the sign extended in X to the rest.
.2ad1	8a		txa				txa
.2ad2	71 04		adc ($04),y			adc 	(temp0),y
.2ad4	91 04		sta ($04),y			sta 	(temp0),y
.2ad6	c8		iny				iny
.2ad7	8a		txa				txa
.2ad8	71 04		adc ($04),y			adc 	(temp0),y
.2ada	91 04		sta ($04),y			sta 	(temp0),y
.2adc	c8		iny				iny
.2add	8a		txa				txa
.2ade	71 04		adc ($04),y			adc 	(temp0),y
.2ae0	91 04		sta ($04),y			sta 	(temp0),y
.2ae2	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2ae3	a5 78		lda $78				lda 	rsPointer
.2ae5	69 07		adc #$07			adc 	#7
.2ae7	85 06		sta $06				sta 	temp1
.2ae9	a9 00		lda #$00			lda 	#0
.2aeb	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2aed	a8		tay				tay 								; and clear the Y register again.
.2aee	65 79		adc $79				adc 	rsPointer+1
.2af0	85 07		sta $07				sta 	temp1+1
.2af2	38		sec				sec 								; calculate current - limit oring interim values.
.2af3	20 2b 2b	jsr $2b2b			jsr 	_CNCompare
.2af6	20 2b 2b	jsr $2b2b			jsr 	_CNCompare
.2af9	20 2b 2b	jsr $2b2b			jsr 	_CNCompare
.2afc	20 2b 2b	jsr $2b2b			jsr 	_CNCompare
.2aff	50 02		bvc $2b03			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2b01	49 80		eor #$80			eor 	#$80
.2b03					_CNNoOverflow:
.2b03	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2b05	30 1d		bmi $2b24			bmi 	_CNCheckDownto
.2b07	c9 00		cmp #$00			cmp 	#0
.2b09	30 0c		bmi $2b17			bmi 	_CNLoopRound 				; loop round if < =
.2b0b	a5 08		lda $08				lda 	temp2
.2b0d	f0 08		beq $2b17			beq 	_CNLoopRound
.2b0f					_CNLoopExit:
.2b0f	68		pla				pla
.2b10	a8		tay				tay
.2b11	a9 0b		lda #$0b			lda 	#11
.2b13	20 4f 21	jsr $214f			jsr 	RSFree
.2b16	60		rts				rts
.2b17					_CNLoopRound:
.2b17	68		pla				pla
.2b18	a8		tay				tay
.2b19	a9 01		lda #$01			lda 	#1
.2b1b	20 6c 21	jsr $216c			jsr 	RSLoadPosition				; go back to the loop top
.2b1e	60		rts				rts
.2b1f					_CNBadIndex:
.2b1f	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.2b21	20 ce 21	jsr $21ce		jsr	errorHandler
.2b24					_CNCheckDownto:
.2b24	c9 00		cmp #$00			cmp 	#0
.2b26	10 ef		bpl $2b17			bpl 	_CNLoopRound
.2b28	4c 0f 2b	jmp $2b0f			jmp 	_CNLoopExit
.2b2b					_CNCompare:
.2b2b	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2b2d	f1 06		sbc ($06),y			sbc 	(temp1),y
.2b2f	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2b31	85 08		sta $08				sta 	temp2
.2b33	c8		iny				iny
.2b34	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1088					CommandIf:
.1088	20 75 1a	jsr $1a75			jsr 	EvaluateRootInteger 		; if what ?
.108b	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.108d	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.108f	f0 04		beq $1095			beq 	_IfSimple
.1091	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1093	d0 1b		bne $10b0			bne 	_IfComplex
.1095					_IfSimple:
.1095	20 b9 20	jsr $20b9			jsr 	MInt32Zero					; check if TOS zero
.1098	f0 10		beq $10aa			beq 	_IfEOL 						; go to next line.
.109a	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.109c	c8		iny				iny
.109d	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.109f	f0 0c		beq $10ad			beq 	_IfGoto 					; do the Goto code
.10a1	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10a3	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10a5	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10a7	f0 04		beq $10ad			beq 	_IfGoto
.10a9	60		rts				rts 								; else continue on this line.
.10aa					_IfEOL:
.10aa	4c e0 15	jmp $15e0			jmp 	AdvanceNextLine 			; go to next line
.10ad					_IfGoto:
.10ad	4c 1f 16	jmp $161f			jmp 	CommandGoto
.10b0					_IfComplex:
.10b0	20 b9 20	jsr $20b9			jsr 	MInt32Zero 					; is it true ?
.10b3	f0 01		beq $10b6			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10b5	60		rts				rts 								; else continue.
.10b6					_IFSkip:
.10b6	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10b8	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ba	4c 9e 2b	jmp $2b9e			jmp		ScanForward
.10bd					Command_ELSE:
.10bd	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10bf	8a		txa				txa
.10c0	4c 9e 2b	jmp $2b9e			jmp		ScanForward
.10c3					Command_ENDIF:
.10c3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10c4					CommandLet:
.10c4	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10c6	20 a4 1a	jsr $1aa4			jsr 	EvaluateReference
.10c9	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10cb	20 fa 20	jsr $20fa			jsr 	CheckToken
.10ce	e8		inx				inx 								; do RHS
.10cf	20 58 1a	jsr $1a58			jsr 	Evaluate 					; evaluate and derefernce
.10d2	ca		dex				dex
.10d3	20 d7 10	jsr $10d7			jsr 	WriteValue 					; write it out
.10d6	60		rts				rts
.10d7					WriteValue:
.10d7	98		tya				tya
.10d8	48		pha				pha
.10d9	20 39 11	jsr $1139			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10dc	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10de	55 41		eor $41,x			eor 	esType+1,x
.10e0	29 40		and #$40			and 	#$40
.10e2	d0 50		bne $1134			bne		_WVType
.10e4	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10e6	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10e8	29 40		and #$40			and 	#$40
.10ea	d0 1f		bne $110b			bne 	_WVCopyString
.10ec	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10ee	15 41		ora $41,x			ora 	esType+1,x
.10f0	4a		lsr a				lsr 	a
.10f1	90 22		bcc $1115			bcc 	_WVCopyData4
.10f3	b5 40		lda $40,x			lda 	esType,x
.10f5	4a		lsr a				lsr 	a
.10f6	90 3c		bcc $1134			bcc 	_WVType
.10f8	e8		inx				inx 								; force the value being written to be a float.
.10f9	20 91 16	jsr $1691			jsr 	BPMakeFloat
.10fc	ca		dex				dex
.10fd	20 39 11	jsr $1139			jsr 	TOSToTemp0 					; set Temp0 to write address
.1100	e8		inx				inx
.1101	8a		txa				txa
.1102	a2 20		ldx #$20		ldx	#32
.1104	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1107	aa		tax				tax
.1108	4c 31 11	jmp $1131			jmp 	_WVCopyExit
.110b					_WVCopyString:
.110b	8a		txa				txa
.110c	a2 0c		ldx #$0c		ldx	#12
.110e	20 55 27	jsr $2755		jsr	stringHandler
.1111	aa		tax				tax
.1112	4c 31 11	jmp $1131			jmp 	_WVCopyExit
.1115					_WVCopyData4:
.1115	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1117	29 20		and #$20			and 	#$20
.1119	d0 10		bne $112b			bne 	_WVCopyData1
.111b	a0 03		ldy #$03			ldy 	#3
.111d	b5 61		lda $61,x			lda 	esInt3+1,x
.111f	91 04		sta ($04),y			sta 	(temp0),y
.1121	88		dey				dey
.1122	b5 59		lda $59,x			lda 	esInt2+1,x
.1124	91 04		sta ($04),y			sta 	(temp0),y
.1126	88		dey				dey
.1127	b5 51		lda $51,x			lda 	esInt1+1,x
.1129	91 04		sta ($04),y			sta 	(temp0),y
.112b					_WVCopyData1:
.112b	a0 00		ldy #$00			ldy 	#0
.112d	b5 49		lda $49,x			lda 	esInt0+1,x
.112f	91 04		sta ($04),y			sta 	(temp0),y
.1131					_WVCopyExit:
.1131	68		pla				pla
.1132	a8		tay				tay
.1133	60		rts				rts
.1134					_WVType:
.1134	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1136	20 ce 21	jsr $21ce		jsr	errorHandler
.1139					TOSToTemp0:
.1139	b5 48		lda $48,x			lda 	esInt0,x
.113b	85 04		sta $04				sta 	temp0
.113d	b5 50		lda $50,x			lda 	esInt1,x
.113f	85 05		sta $05				sta 	temp0+1
.1141	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.1142					CommandLocal:
.1142	a2 00		ldx #$00			ldx 	#0
.1144	20 60 11	jsr $1160			jsr 	LocaliseVariable 			; localise one.
.1147					_CLCheckNext:
.1147	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1149	c8		iny				iny
.114a	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.114c	f0 06		beq $1154			beq 	_CLAssignment
.114e	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1150	f0 f0		beq $1142			beq 	CommandLocal
.1152	88		dey				dey
.1153	60		rts				rts
.1154					_CLAssignment:
.1154	a2 01		ldx #$01			ldx 	#1
.1156	20 58 1a	jsr $1a58			jsr 	Evaluate 					; evaluate RHS
.1159	ca		dex				dex
.115a	20 d7 10	jsr $10d7			jsr 	WriteValue
.115d	4c 47 11	jmp $1147			jmp 	_CLCheckNext
.1160					LocaliseVariable:
.1160	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1162	c9 40		cmp #$40			cmp 	#$40
.1164	b0 67		bcs $11cd			bcs 	_LVSyntax
.1166	8a		txa				txa 								; get the address of that variable.
.1167	a2 00		ldx #$00		ldx	#0
.1169	20 1d 2a	jsr $2a1d		jsr	variableHandler
.116c	aa		tax				tax
.116d	8a		txa				txa
.116e	48		pha				pha
.116f	98		tya				tya
.1170	48		pha				pha
.1171	20 39 11	jsr $1139			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1174	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1176	0a		asl a				asl 	a
.1177	10 16		bpl $118f			bpl 	_LVPushNumber
.1179	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.117b	b1 04		lda ($04),y			lda 	(temp0),y
.117d	c8		iny				iny
.117e	85 06		sta $06				sta 	temp1
.1180	b1 04		lda ($04),y			lda 	(temp0),y
.1182	85 07		sta $07				sta 	temp1+1
.1184	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1186	b1 06		lda ($06),y			lda 	(temp1),y
.1188	aa		tax				tax 								; into X
.1189	e8		inx				inx 								; +1 for length.
.118a	a9 24		lda #$24			lda 	#markerString
.118c	4c a4 11	jmp $11a4			jmp 	_LVWriteFrame
.118f					_LVPushNumber:
.118f	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1191	85 06		sta $06				sta 	temp1
.1193	a5 05		lda $05				lda 	temp0+1
.1195	85 07		sta $07				sta 	temp1+1
.1197	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1199	4a		lsr a				lsr 	a
.119a	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.119c	a2 04		ldx #$04			ldx 	#VarISize
.119e	90 04		bcc $11a4			bcc 	_LVIsInteger
.11a0	a9 23		lda #$23			lda 	#markerFloat
.11a2	a2 06		ldx #$06			ldx 	#VarFSize
.11a4					_LVIsInteger:
.11a4					_LVWriteFrame:
.11a4	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.11a7	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.11a8	e8		inx				inx
.11a9	e8		inx				inx
.11aa	20 2d 21	jsr $212d			jsr 	RSClaim 					; create the stack frame.
.11ad	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.11af	a0 01		ldy #$01			ldy 	#1
.11b1	91 78		sta ($78),y			sta 	(rsPointer),y
.11b3	c8		iny				iny
.11b4	a5 05		lda $05				lda 	temp0+1
.11b6	91 78		sta ($78),y			sta 	(rsPointer),y
.11b8	a0 00		ldy #$00			ldy 	#0
.11ba					_LVCopyData:
.11ba	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.11bc	c8		iny				iny 								; write allowing for the header bit.
.11bd	c8		iny				iny
.11be	c8		iny				iny
.11bf	91 78		sta ($78),y			sta 	(rsPointer),y
.11c1	88		dey				dey
.11c2	88		dey				dey
.11c3	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.11c6	d0 f2		bne $11ba			bne 	_LVCopyData
.11c8	68		pla				pla
.11c9	a8		tay				tay
.11ca	68		pla				pla
.11cb	aa		tax				tax
.11cc	60		rts				rts
.11cd					_LVSyntax:
.11cd	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.11cf	20 ce 21	jsr $21ce		jsr	errorHandler
.11d2					RestoreLocals:
.11d2	a2 00		ldx #$00			ldx 	#0
.11d4	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11d6	c9 40		cmp #$40			cmp	 	#64
.11d8	90 01		bcc $11db			bcc 	_RLocal
.11da	60		rts				rts
.11db					_RLocal:
.11db	8a		txa				txa
.11dc	48		pha				pha
.11dd	98		tya				tya
.11de	48		pha				pha
.11df	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11e1	b1 78		lda ($78),y			lda 	(rsPointer),y
.11e3	85 04		sta $04				sta 	temp0
.11e5	c8		iny				iny
.11e6	b1 78		lda ($78),y			lda 	(rsPointer),y
.11e8	85 05		sta $05				sta 	temp0+1
.11ea	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11ec	b1 78		lda ($78),y			lda 	(rsPointer),y
.11ee	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11f0	f0 28		beq $121a			beq 	_RString
.11f2	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11f4	c9 25		cmp #$25			cmp 	#markerInt
.11f6	f0 02		beq $11fa			beq 	_RIsInteger
.11f8	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11fa					_RIsInteger:
.11fa	8a		txa				txa
.11fb	48		pha				pha
.11fc	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.11fe					_RCopyBack:
.11fe	b1 78		lda ($78),y			lda 	(rsPointer),y
.1200	88		dey				dey
.1201	88		dey				dey
.1202	88		dey				dey
.1203	91 04		sta ($04),y			sta 	(temp0),y
.1205	c8		iny				iny
.1206	c8		iny				iny
.1207	c8		iny				iny
.1208	c8		iny				iny
.1209	ca		dex				dex
.120a	d0 f2		bne $11fe			bne 	_RCopyBack
.120c	68		pla				pla 								; get size add 3
.120d	18		clc				clc
.120e	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1210					_RRestoreAAndLoop:
.1210	20 4f 21	jsr $214f			jsr 	RSFree
.1213	68		pla				pla
.1214	a8		tay				tay
.1215	68		pla				pla
.1216	aa		tax				tax
.1217	4c d2 11	jmp $11d2			jmp 	RestoreLocals 				; go see if there are any more locals.
.121a					_RString:
.121a	a2 00		ldx #$00			ldx 	#0
.121c	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.121e	b1 78		lda ($78),y			lda 	(rsPointer),y
.1220	95 48		sta $48,x			sta 	esInt0,x
.1222	c8		iny				iny
.1223	b1 78		lda ($78),y			lda 	(rsPointer),y
.1225	95 50		sta $50,x			sta 	esInt1,x
.1227	18		clc				clc
.1228	a5 78		lda $78				lda 	rsPointer
.122a	69 03		adc #$03			adc 	#3
.122c	95 49		sta $49,x			sta 	esInt0+1,x
.122e	a5 79		lda $79				lda 	rsPointer+1
.1230	69 00		adc #$00			adc 	#0
.1232	95 51		sta $51,x			sta 	esInt1+1,x
.1234	8a		txa				txa
.1235	a2 0c		ldx #$0c		ldx	#12
.1237	20 55 27	jsr $2755		jsr	stringHandler
.123a	a0 03		ldy #$03			ldy 	#3 							; get string length
.123c	b1 78		lda ($78),y			lda 	(rsPointer),y
.123e	18		clc				clc
.123f	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1241	4c 10 12	jmp $1210			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1244					Command_New:
.1244	20 19 14	jsr $1419			jsr 	ResetCodeAddress 			; point to first line
.1247	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1249	98		tya				tya
.124a	91 02		sta ($02),y			sta 	(codePtr),y
.124c	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything down.
.124f	4c dd 15	jmp $15dd			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1252					Command_Poke:
.1252	a9 01		lda #$01			lda 	#1
.1254	d0 06		bne $125c			bne 	PokeGeneral
.1256					Command_Doke:
.1256	a9 02		lda #$02			lda 	#2
.1258	d0 02		bne $125c			bne 	PokeGeneral
.125a					Command_Loke:
.125a	a9 03		lda #$03			lda 	#3
.125c					PokeGeneral:
.125c	48		pha				pha 								; save size
.125d	20 75 1a	jsr $1a75			jsr 	EvaluateRootInteger 		; target address
.1260	20 12 21	jsr $2112			jsr	 	CheckComma
.1263	e8		inx				inx
.1264	20 77 1a	jsr $1a77			jsr 	EvaluateInteger 			; what value to POKE ?
.1267	ca		dex				dex
.1268	20 39 11	jsr $1139			jsr 	TOSToTemp0 					; temp0 points to the target address
.126b	84 0c		sty $0c				sty 	tempShort 					; save Y
.126d	68		pla				pla 								; get copy type and dispatch
.126e	aa		tax				tax
.126f	ca		dex				dex
.1270	f0 14		beq $1286			beq 	_Poke1
.1272	ca		dex				dex
.1273	f0 0b		beq $1280			beq 	_Poke2
.1275	a0 03		ldy #$03			ldy 	#3
.1277	a5 61		lda $61				lda 	esInt3+1
.1279	91 04		sta ($04),y			sta 	(temp0),y
.127b	88		dey				dey
.127c	a5 59		lda $59				lda 	esInt2+1
.127e	91 04		sta ($04),y			sta 	(temp0),y
.1280					_Poke2:
.1280	a0 01		ldy #$01			ldy 	#1
.1282	a5 51		lda $51				lda 	esInt1+1
.1284	91 04		sta ($04),y			sta 	(temp0),y
.1286					_Poke1:
.1286	a0 00		ldy #$00			ldy 	#0
.1288	a5 49		lda $49				lda 	esInt0+1
.128a	91 04		sta ($04),y			sta 	(temp0),y
.128c	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.128e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.128f					Command_Print:
.128f	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1291	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1294	88		dey				dey
.1295					_PrintLoopSkip:
.1295	c8		iny				iny
.1296					_PrintLoop:
.1296	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1298	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.129a	f0 5b		beq $12f7			beq 	_PrintExit
.129c	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.129e	f0 57		beq $12f7			beq 	_PrintExit
.12a0	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.12a3	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.12a5	f0 ee		beq $1295			beq 	_PrintLoopSkip
.12a7	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.12a9	f0 3c		beq $12e7			beq	 	_PrintNewLine
.12ab	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.12ad	f0 40		beq $12ef			beq 	_PrintTab
.12af	20 56 1a	jsr $1a56			jsr 	EvaluateRoot 				; evaluate something at the root
.12b2	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.12b4	85 04		sta $04				sta 	temp0
.12b6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.12b8	85 05		sta $05				sta 	1+(temp0)
.12ba	a5 40		lda $40				lda 	esType 						; get type
.12bc	f0 15		beq $12d3			beq		_PrintInteger
.12be	4a		lsr a				lsr 	a 							; check for floating point
.12bf	b0 08		bcs $12c9			bcs 	_PrintFloat
.12c1					_PrintString:
.12c1	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.12c3	20 39 11	jsr $1139			jsr 	TOSToTemp0
.12c6	4c e1 12	jmp $12e1			jmp 	_PrintTemp0 				; print no leading space.
.12c9					_PrintFloat:
.12c9	a9 00		lda #$00			lda 	#0 							; stack level.
.12cb	a2 14		ldx #$14		ldx	#20
.12cd	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.12d0	4c da 12	jmp $12da			jmp 	_PrintSpaceTemp0
.12d3					_PrintInteger:
.12d3	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.12d5	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.12d7	20 e8 1f	jsr $1fe8			jsr 	MInt32ToString				; convert to text
.12da					_PrintSpaceTemp0:
.12da	a9 20		lda #$20			lda 	#32
.12dc	a2 06		ldx #$06		ldx	#6
.12de	20 bf 21	jsr $21bf		jsr	deviceHandler
.12e1					_PrintTemp0:
.12e1	20 08 13	jsr $1308			jsr 	PrintString
.12e4	4c 96 12	jmp $1296			jmp 	_PrintLoop
.12e7					_PrintNewLine:
.12e7	a2 00		ldx #$00		ldx	#0
.12e9	20 bf 21	jsr $21bf		jsr	deviceHandler
.12ec	4c 95 12	jmp $1295			jmp 	_PrintLoopSkip
.12ef					_PrintTab:
.12ef	a2 08		ldx #$08		ldx	#8
.12f1	20 bf 21	jsr $21bf		jsr	deviceHandler
.12f4	4c 95 12	jmp $1295			jmp 	_PrintLoopSkip
.12f7					_PrintExit:
.12f7	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12fa	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12fc	f0 09		beq $1307			beq 	_PrintExit2
.12fe	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1300	f0 05		beq $1307			beq 	_PrintExit2
.1302	a2 00		ldx #$00		ldx	#0
.1304	20 bf 21	jsr $21bf		jsr	deviceHandler
.1307					_PrintExit2:
.1307	60		rts				rts
.1308					PrintString:
.1308	8a		txa				txa
.1309	48		pha				pha
.130a	98		tya				tya
.130b	48		pha				pha
.130c	a0 00		ldy #$00			ldy 	#0							; get length
.130e	b1 04		lda ($04),y			lda 	(temp0),y
.1310	aa		tax				tax 								; into X
.1311	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1313	f0 10		beq $1325			beq 	_PSExit
.1315	ca		dex				dex
.1316	8a		txa				txa
.1317	48		pha				pha
.1318	c8		iny				iny
.1319	b1 04		lda ($04),y			lda 	(temp0),y
.131b	a2 06		ldx #$06		ldx	#6
.131d	20 bf 21	jsr $21bf		jsr	deviceHandler
.1320	68		pla				pla
.1321	aa		tax				tax
.1322	4c 11 13	jmp $1311			jmp 	_PSLoop
.1325					_PSExit:
.1325	68		pla				pla
.1326	a8		tay				tay
.1327	68		pla				pla
.1328	aa		tax				tax
.1329	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.132a					CallProc:
.132a	20 00 15	jsr $1500			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.132d	48		pha				pha 								; save length on stack
.132e	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.1330	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.1332	48		pha				pha
.1333	a5 04		lda $04				lda 	temp0
.1335	48		pha				pha
.1336	98		tya				tya 								; calculate Y + length
.1337	18		clc				clc
.1338	65 0c		adc $0c				adc 	tempShort
.133a	a8		tay				tay
.133b	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.133d					_CallProcEvalParams:
.133d	e8		inx				inx
.133e	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.1340	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1342	f0 0b		beq $134f			beq 	_CPDoneParams
.1344	20 58 1a	jsr $1a58			jsr 	Evaluate 					; evaluate a parameter
.1347	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1349	c8		iny				iny
.134a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.134c	f0 ef		beq $133d			beq 	_CallProcEvalParams
.134e	88		dey				dey 								; undo consumption.
.134f					_CPDoneParams:
.134f	20 05 21	jsr $2105			jsr 	CheckRightParen 			; check closing parenthesis.
.1352	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1355	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1357	a9 50		lda #$50			lda 	#markerPROC
.1359	20 2d 21	jsr $212d			jsr 	RSClaim
.135c	a9 01		lda #$01			lda 	#1 							; store return address.
.135e	20 59 21	jsr $2159			jsr 	RSSavePosition
.1361	68		pla				pla 								; get the new code Ptr
.1362	85 02		sta $02				sta 	codePtr
.1364	68		pla				pla
.1365	85 03		sta $03				sta 	codePtr+1
.1367	68		pla				pla 								; length of name + 4 is the param start.
.1368	18		clc				clc
.1369	69 04		adc #$04			adc 	#4
.136b	a8		tay				tay
.136c	a2 ff		ldx #$ff			ldx 	#$FF
.136e					_CPLoadParameters:
.136e	e8		inx				inx 								; point to where the address should be loaded.
.136f	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.1372	f0 1e		beq $1392			beq 	_CPParamError
.1374	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1376	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.1378	f0 0e		beq $1388			beq 	_CPParamComplete 			; done all the parameters
.137a	20 60 11	jsr $1160			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.137d	20 d7 10	jsr $10d7			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1380	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1382	c8		iny				iny
.1383	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1385	f0 e7		beq $136e			beq 	_CPLoadParameters
.1387	88		dey				dey 								; no, unconsume and check for )
.1388					_CPParamComplete:
.1388	20 05 21	jsr $2105			jsr 	CheckRightParen 			; check )
.138b	e8		inx				inx 								; check right number of parameters
.138c	ec f2 0a	cpx $0af2			cpx 	paramCount
.138f	d0 01		bne $1392			bne 	_CPParamError
.1391	60		rts				rts
.1392					_CPParamError:
.1392	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1394	20 ce 21	jsr $21ce		jsr	errorHandler
.1397					ReturnProc:
.1397	20 d2 11	jsr $11d2			jsr 	RestoreLocals 				; get the locals back.
.139a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.139c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.139e	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.13a0	f0 05		beq $13a7			beq 	_isok
.13a2	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.13a4	20 ce 21	jsr $21ce		jsr	errorHandler
.13a7					_isok:
.13a7	a9 01		lda #$01			lda 	#1
.13a9	20 6c 21	jsr $216c			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13ac	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13ae	20 4f 21	jsr $214f			jsr 	RSFree
.13b1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.13b2					Command_Rem:
.13b2					Command_Rem2:
.13b2	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.13b4	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.13b6	d0 06		bne $13be			bne 	_CRNotString
.13b8	c8		iny				iny
.13b9	98		tya				tya
.13ba	38		sec				sec
.13bb	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.13bd	a8		tay				tay
.13be					_CRNotString:
.13be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2b35					Command_Repeat:
.2b35	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2b37	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2b39	20 2d 21	jsr $212d			jsr 	RSClaim
.2b3c	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2b3e	20 59 21	jsr $2159			jsr 	RSSavePosition
.2b41	60		rts				rts
.2b42					Command_Until:
.2b42	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b44	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2b46	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2b48	f0 05		beq $2b4f			beq 	_isok
.2b4a	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2b4c	20 ce 21	jsr $21ce		jsr	errorHandler
.2b4f					_isok:
.2b4f	20 75 1a	jsr $1a75			jsr 	EvaluateRootInteger 		; at the bottom.
.2b52	20 b9 20	jsr $20b9			jsr 	MInt32Zero					; check if TOS zero
.2b55	d0 06		bne $2b5d			bne 	_CUExit
.2b57	a9 01		lda #$01			lda 	#1
.2b59	20 6c 21	jsr $216c			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2b5c	60		rts				rts
.2b5d					_CUExit:
.2b5d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2b5f	20 4f 21	jsr $214f			jsr 	RSFree
.2b62	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.13bf					Command_Run:
.13bf	a2 ff		ldx #$ff			ldx 	#$FF
.13c1	9a		txs				txs
.13c2	20 2d 10	jsr $102d			jsr 	CommandClear 				; clear everything.
.13c5	20 19 14	jsr $1419			jsr 	ResetCodeAddress 			; back to the start.
.13c8	a0 03		ldy #$03			ldy 	#3
.13ca					CRNextInstruction:
.13ca	64 7b		stz $7b				stz 	softMemAlloc+1
.13cc	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.13ce	10 1c		bpl $13ec			bpl 	_CRNotToken
.13d0	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.13d2	b0 0c		bcs $13e0			bcs 	_CRExecute
.13d4	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.13d6	b0 4e		bcs $1426			bcs 	Unimplemented
.13d8	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.13da	b0 04		bcs $13e0			bcs 	_CRExecute
.13dc	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.13de	b0 16		bcs $13f6			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.13e0					_CRExecute:
.13e0	c8		iny				iny 								; consume it.
.13e1	0a		asl a				asl 	a 							; double it, losing most significant bit.
.13e2	aa		tax				tax
.13e3	20 e9 13	jsr $13e9			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.13e6	4c ca 13	jmp $13ca			jmp 	CRNextInstruction
.13e9					_CRRunRoutine:
.13e9	7c 30 14	jmp ($1430,x)			jmp 	(Group0Vectors,x)
.13ec					_CRNotToken:
.13ec	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.13ee	b0 36		bcs $1426			bcs 	Unimplemented
.13f0					_CRDefaultLet:
.13f0	20 c4 10	jsr $10c4			jsr 	CommandLet 					; do the default, LET
.13f3	4c ca 13	jmp $13ca			jmp 	CRNextInstruction
.13f6					_CRCheckIndirect:
.13f6	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.13f8	f0 f6		beq $13f0			beq 	_CRDefaultLet
.13fa	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.13fc	f0 f2		beq $13f0			beq 	_CRDefaultLet
.13fe	d0 26		bne $1426			bne 	Unimplemented
.1400					CommandShift1:
.1400	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1402	10 22		bpl $1426			bpl 	Unimplemented 				; we have an error as this should not happen.
.1404	0a		asl a				asl 	a 							; double into X
.1405	aa		tax				tax
.1406	c8		iny				iny 								; advance over it.
.1407	20 0d 14	jsr $140d			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.140a	4c ca 13	jmp $13ca			jmp 	CRNextInstruction
.140d					_RunIt:
.140d	7c e0 14	jmp ($14e0,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.1410					CommandShift2:
.1410	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.1412	20 28 24	jsr $2428		jsr	extensionHandler
.1415	4c ca 13	jmp $13ca			jmp 	CRNextInstruction
.1418					CommandColon:
.1418	60		rts				rts
.1419					ResetCodeAddress:
.1419	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.141c	85 02		sta $02				sta 	codePtr
.141e	ad c9 0a	lda $0ac9			lda 	basePage+1
.1421	85 03		sta $03				sta 	codePtr+1
.1423	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1425	60		rts				rts
.1426					Unimplemented:
.1426	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1428	20 ce 21	jsr $21ce		jsr	errorHandler
.142b					TKErr01:
.142b					TKErr02:
.142b					TKErr03:
.142b					TKErr04:
.142b					TKErr05:
.142b					TKErr06:
.142b					TKErr07:
.142b					TKErr08:
.142b					TKErr09:
.142b					TKErr10:
.142b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.142d	20 ce 21	jsr $21ce		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1430					Group0Vectors:
>1430	e0 15					.word	AdvanceNextLine          ; $80 [[eol]]
>1432	00 14					.word	CommandShift1            ; $81 [[sh1]]
>1434	10 14					.word	CommandShift2            ; $82 [[sh2]]
>1436	2b 14					.word	TKErr09                  ; $83 [[sh3]]
>1438	2b 14					.word	TKErr10                  ; $84 [[fpc]]
>143a	2b 14					.word	TKErr08                  ; $85 [[str]]
>143c	33 17					.word	AndHandler               ; $86 and
>143e	20 17					.word	OrHandler                ; $87 or
>1440	0d 17					.word	XorHandler               ; $88 xor
>1442	55 18					.word	CompareGreaterEq         ; $89 >=
>1444	5f 18					.word	CompareLessEq            ; $8a <=
>1446	41 18					.word	CompareGreater           ; $8b >
>1448	37 18					.word	CompareLess              ; $8c <
>144a	2d 18					.word	CompareEquals            ; $8d =
>144c	4b 18					.word	CompareNotEquals         ; $8e <>
>144e	9e 16					.word	AddHandler               ; $8f +
>1450	c1 16					.word	SubHandler               ; $90 -
>1452	59 17					.word	ShrHandler               ; $91 >>
>1454	46 17					.word	ShlHandler               ; $92 <<
>1456	d4 16					.word	MulHandler               ; $93 *
>1458	e7 16					.word	DivHandler               ; $94 /
>145a	fa 16					.word	ModHandler               ; $95 mod
>145c	92 17					.word	PowerHandler             ; $96 ^
>145e	6c 17					.word	WordRefHandler           ; $97 !
>1460	7f 17					.word	ByteRefHandler           ; $98 ?
>1462	35 2b					.word	Command_Repeat           ; $99 repeat
>1464	63 2b					.word	Command_While            ; $9a while
>1466	26 2a					.word	Command_FOR              ; $9b for
>1468	88 10					.word	CommandIf                ; $9c if
>146a	2b 14					.word	TKErr04                  ; $9d defproc
>146c	42 2b					.word	Command_Until            ; $9e until
>146e	86 2b					.word	Command_Wend             ; $9f wend
>1470	87 2a					.word	Command_NEXT             ; $a0 next
>1472	2b 14					.word	TKErr06                  ; $a1 then
>1474	c3 10					.word	Command_ENDIF            ; $a2 endif
>1476	97 13					.word	ReturnProc               ; $a3 endproc
>1478	2e 1a					.word	UnaryParenthesis         ; $a4 (
>147a	86 1b					.word	UnaryLen                 ; $a5 len(
>147c	ca 1b					.word	UnarySgn                 ; $a6 sgn(
>147e	b3 1b					.word	UnaryAbs                 ; $a7 abs(
>1480	23 1c					.word	Unary_Random             ; $a8 random(
>1482	6d 1c					.word	Unary_Page               ; $a9 page
>1484	8e 20					.word	MInt32True               ; $aa true
>1486	92 20					.word	MInt32False              ; $ab false
>1488	38 1c					.word	Unary_Min                ; $ac min(
>148a	3c 1c					.word	Unary_Max                ; $ad max(
>148c	23 1d					.word	UnarySys                 ; $ae sys(
>148e	e6 1c					.word	UnaryTimer               ; $af timer(
>1490	03 1b					.word	EventFunction            ; $b0 event(
>1492	0f 1d					.word	UnaryGet                 ; $b1 get(
>1494	ff 1c					.word	UnaryInkey               ; $b2 inkey(
>1496	ba 1c					.word	UnaryAlloc               ; $b3 alloc(
>1498	4b 1d					.word	ExecChr                  ; $b4 chr$(
>149a	7b 1d					.word	ExecLeft                 ; $b5 left$(
>149c	98 1d					.word	ExecMid                  ; $b6 mid$(
>149e	c0 1d					.word	ExecRight                ; $b7 right$(
>14a0	6f 18					.word	Event_Str                ; $b8 str$(
>14a2	9e 18					.word	UnaryVal                 ; $b9 val(
>14a4	e1 1b					.word	UnaryPeek                ; $ba peek(
>14a6	e7 1b					.word	UnaryDeek                ; $bb deek(
>14a8	ed 1b					.word	UnaryLeek                ; $bc leek(
>14aa	a4 1b					.word	UnaryAsc                 ; $bd asc(
>14ac	98 1c					.word	UnaryIntToFloat          ; $be int(
>14ae	ab 1c					.word	UnaryFloatToInt          ; $bf float(
>14b0	a1 18					.word	UnaryIsVal               ; $c0 isval(
>14b2	62 1d					.word	ExecUpper                ; $c1 upper$(
>14b4	5f 1d					.word	ExecLower                ; $c2 lower$(
>14b6	7b 1c					.word	UnaryReference           ; $c3 @
>14b8	91 1c					.word	UnaryComplement          ; $c4 ~
>14ba	8e 1c					.word	UnaryHexMarker           ; $c5 &
>14bc	2b 14					.word	TKErr01                  ; $c6 )
>14be	18 14					.word	CommandColon             ; $c7 :
>14c0	2b 14					.word	TKErr02                  ; $c8 ,
>14c2	2b 14					.word	TKErr03                  ; $c9 ;
>14c4	b2 13					.word	Command_Rem2             ; $ca '
>14c6	2b 14					.word	TKErr07                  ; $cb to
>14c8	2b 14					.word	TKErr05                  ; $cc step
>14ca	2a 13					.word	CallProc                 ; $cd proc
>14cc	42 11					.word	CommandLocal             ; $ce local
>14ce	7a 10					.word	Command_Dim              ; $cf dim
>14d0	b2 13					.word	Command_Rem              ; $d0 rem
>14d2	c4 10					.word	CommandLet               ; $d1 let
>14d4	26 14					.word	Unimplemented            ; $d2 input
>14d6	bd 10					.word	Command_ELSE             ; $d3 else
>14d8	51 16					.word	Command_VDU              ; $d4 vdu
>14da	8f 12					.word	Command_Print            ; $d5 print
>14dc	1f 16					.word	CommandGOTO              ; $d6 goto
>14de	f4 15					.word	CommandGOSUB             ; $d7 gosub
>14e0	07 16					.word	CommandRETURN            ; $d8 return
>14e2	26 14					.word	Unimplemented            ; $d9 data
>14e4	1f 10					.word	Command_Assert           ; $da assert
>14e6	52 12					.word	Command_Poke             ; $db poke
>14e8	56 12					.word	Command_Doke             ; $dc doke
>14ea	5a 12					.word	Command_Loke             ; $dd loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.14ec					Group1Vectors:
>14ec	2d 10					.word	CommandClear             ; $86 clear
>14ee	26 14					.word	Unimplemented            ; $87 load
>14f0	26 14					.word	Unimplemented            ; $88 save
>14f2	26 14					.word	Unimplemented            ; $89 list
>14f4	44 12					.word	Command_New              ; $8a new
>14f6	bf 13					.word	Command_Run              ; $8b run
>14f8	26 14					.word	Unimplemented            ; $8c read
>14fa	26 14					.word	Unimplemented            ; $8d restore
>14fc	dd 15					.word	CommandEnd               ; $8e end
>14fe	d8 15					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af3					procList:
>0af3							.fill 	2		 					; terminated by name high.
.0af5					yInLine:
>0af5							.fill 	1
.1500					FindProcedure:
.1500	8c f5 0a	sty $0af5			sty 	yInLine
.1503	20 be 15	jsr $15be			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.1506	85 06		sta $06				sta 	temp1
.1508	ad f3 0a	lda $0af3			lda		procList 					; put procList address in temp2
.150b	85 08		sta $08				sta 	temp2
.150d	ad f4 0a	lda $0af4			lda 	procList+1
.1510	85 09		sta $09				sta 	temp2+1
.1512	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1514					_FPLoop:
.1514	b1 08		lda ($08),y			lda 	(temp2),y
.1516	f0 4f		beq $1567			beq 	_FPError 					; if so, we don't know this procedure.
.1518	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.151a	c8		iny				iny
.151b	b1 08		lda ($08),y			lda 	(temp2),y
.151d	85 04		sta $04				sta 	temp0
.151f	c8		iny				iny
.1520	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1522	c5 06		cmp $06				cmp 	temp1
.1524	d0 2b		bne $1551			bne 	_FPNext 					; hash is different, go to next.
.1526	38		sec				sec
.1527	ad f5 0a	lda $0af5			lda 	yInLine 					; position in line must be at least 4
.152a	e9 04		sbc #$04			sbc 	#4
.152c	18		clc				clc
.152d	65 02		adc $02				adc 	codePtr
.152f	85 0a		sta $0a				sta 	temp3
.1531	a5 03		lda $03				lda 	codePtr+1
.1533	69 00		adc #$00			adc 	#0
.1535	85 0b		sta $0b				sta 	temp3+1
.1537	98		tya				tya
.1538	48		pha				pha
.1539	a0 04		ldy #$04			ldy 	#4
.153b					_FPCName:
.153b	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.153d	d1 04		cmp ($04),y			cmp 	(temp0),y
.153f	d0 0e		bne $154f			bne 	_FPpulYNext 				; if different go to next one.
.1541	c8		iny				iny
.1542	c9 3a		cmp #$3a			cmp 	#$3A
.1544	90 f5		bcc $153b			bcc 	_FPCName 					; compare the whole lot....
.1546	68		pla				pla 								; throw away the saved Y
.1547	98		tya				tya 								; length of name is Y-4
.1548	38		sec				sec
.1549	e9 04		sbc #$04			sbc 	#4
.154b	ac f5 0a	ldy $0af5			ldy 	yInLine  					; get the original Y back
.154e	60		rts				rts
.154f					_FPpulYNext:
.154f	68		pla				pla
.1550	a8		tay				tay
.1551					_FPNext:
.1551	c8		iny				iny 								; next procedure record.
.1552	10 c0		bpl $1514			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1554	98		tya				tya 								; subtract 128 from Y
.1555	38		sec				sec
.1556	e9 80		sbc #$80			sbc 	#128
.1558	a8		tay				tay
.1559	18		clc				clc 								; add 128 to temp2, so we can have more than
.155a	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.155c	69 80		adc #$80			adc 	#128
.155e	85 08		sta $08				sta 	temp2
.1560	90 b2		bcc $1514			bcc 	_FPLoop
.1562	e6 09		inc $09				inc 	temp2+1
.1564	4c 14 15	jmp $1514			jmp 	_FPLoop
.1567					_FPError:
.1567	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.1569	20 ce 21	jsr $21ce		jsr	errorHandler
.156c					ScanProc:
.156c	98		tya				tya
.156d	48		pha				pha
.156e	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.1570	8d f3 0a	sta $0af3			sta 	procList
.1573	a5 10		lda $10				lda 	lowMemory+1
.1575	8d f4 0a	sta $0af4			sta 	procList+1
.1578	20 19 14	jsr $1419			jsr 	ResetCodeAddress 			; back to the start.
.157b					_ScanLoop:
.157b	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.157d	b1 02		lda ($02),y			lda 	(codePtr),y
.157f	f0 2a		beq $15ab			beq 	_ScanExit
.1581	a0 03		ldy #$03			ldy 	#3							; get first token
.1583	b1 02		lda ($02),y			lda 	(codePtr),y
.1585	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.1587	d0 12		bne $159b			bne 	_ScanNext
.1589	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.158b	20 b3 15	jsr $15b3			jsr 	_ScanWrite
.158e	a5 02		lda $02				lda 	codePtr
.1590	20 b3 15	jsr $15b3			jsr 	_ScanWrite
.1593	a0 04		ldy #$04			ldy 	#4 							; start of name part
.1595	20 be 15	jsr $15be			jsr 	CalculateProcedureHash 		; calculate procedure hash
.1598	20 b3 15	jsr $15b3			jsr 	_ScanWrite
.159b					_ScanNext:
.159b	18		clc				clc
.159c	a0 00		ldy #$00			ldy 	#0
.159e	b1 02		lda ($02),y			lda 	(codePtr),y
.15a0	65 02		adc $02				adc 	codePtr
.15a2	85 02		sta $02				sta 	codePtr
.15a4	90 d5		bcc $157b			bcc 	_ScanLoop
.15a6	e6 03		inc $03				inc 	codePtr+1
.15a8	4c 7b 15	jmp $157b			jmp 	_ScanLoop
.15ab					_ScanExit:
.15ab	a9 00		lda #$00			lda 	#0 							; write ending zero.
.15ad	20 b3 15	jsr $15b3			jsr 	_ScanWrite
.15b0	68		pla				pla
.15b1	a8		tay				tay
.15b2	60		rts				rts
.15b3					_ScanWrite:
.15b3	a0 00		ldy #$00			ldy 	#0
.15b5	91 0f		sta ($0f),y			sta 	(lowMemory),y
.15b7	e6 0f		inc $0f				inc 	lowMemory
.15b9	d0 02		bne $15bd			bne 	_SWNoCarry
.15bb	e6 10		inc $10				inc 	lowMemory+1
.15bd					_SWNoCarry:
.15bd	60		rts				rts
.15be					CalculateProcedureHash:
.15be	a9 00		lda #$00			lda 	#0 							; clear hash.
.15c0	85 04		sta $04				sta 	temp0
.15c2					_CPHLoop:
.15c2	18		clc				clc 								; add character and rotate and add carry back in
.15c3	b1 02		lda ($02),y			lda 	(codePtr),y
.15c5	65 04		adc $04				adc 	temp0
.15c7	6a		ror a				ror 	a
.15c8	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.15ca	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.15cc	b1 02		lda ($02),y			lda 	(codePtr),y
.15ce	c8		iny				iny 								; advance incase we go round again.
.15cf	c9 3a		cmp #$3a			cmp 	#$3A
.15d1	90 ef		bcc $15c2			bcc 	_CPHLoop
.15d3	a5 04		lda $04				lda 	temp0
.15d5	a9 aa		lda #$aa			lda 	#$AA
.15d7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.15d8					CommandStop:
.15d8	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.15da	20 ce 21	jsr $21ce		jsr	errorHandler
.15dd					CommandEnd:
.15dd	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.15e0					AdvanceNextLine:
.15e0	a0 00		ldy #$00			ldy 	#0 							; get offset
.15e2	b1 02		lda ($02),y			lda 	(codePtr),y
.15e4	18		clc				clc 								; add to codePtr
.15e5	65 02		adc $02				adc 	codePtr
.15e7	85 02		sta $02				sta 	codePtr
.15e9	90 02		bcc $15ed			bcc 	_ANLNoCarry
.15eb	e6 03		inc $03				inc 	codePtr+1
.15ed					_ANLNoCarry:
.15ed	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.15ef	f0 ec		beq $15dd			beq 	CommandEnd 					; execute END
.15f1	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.15f3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.15f4					CommandGOSUB:
.15f4	20 75 1a	jsr $1a75			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.15f7	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.15f9	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.15fb	20 2d 21	jsr $212d			jsr 	RSClaim
.15fe	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1600	20 59 21	jsr $2159			jsr 	RSSavePosition
.1603	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1605	f0 1b		beq $1622			beq 	GotoTOS 					; and do a GOTO there.
.1607					CommandRETURN:
.1607	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1609	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.160b	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.160d	f0 05		beq $1614			beq 	_isok
.160f	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1611	20 ce 21	jsr $21ce		jsr	errorHandler
.1614					_isok:
.1614	a9 01		lda #$01			lda 	#1
.1616	20 6c 21	jsr $216c			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1619	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.161b	20 4f 21	jsr $214f			jsr 	RSFree
.161e	60		rts				rts
.161f					CommandGOTO:
.161f	20 75 1a	jsr $1a75			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1622					GotoTOS:
.1622	20 19 14	jsr $1419			jsr 	ResetCodeAddress 			; simple search.
.1625					_GotoSearch:
.1625	a0 00		ldy #$00			ldy 	#0 							; get offset
.1627	b1 02		lda ($02),y			lda 	(codePtr),y
.1629	f0 21		beq $164c			beq 	_GotoError 					; not found.
.162b	c8		iny				iny									; check LSB match
.162c	b1 02		lda ($02),y			lda 	(codePtr),y
.162e	d5 48		cmp $48,x			cmp 	esInt0,x
.1630	d0 07		bne $1639			bne 	_GotoNext
.1632	c8		iny				iny
.1633	b1 02		lda ($02),y			lda 	(codePtr),y
.1635	d5 50		cmp $50,x			cmp 	esInt1,x
.1637	f0 10		beq $1649			beq 	_GotoFound
.1639					_GotoNext:
.1639	a0 00		ldy #$00			ldy 	#0 							; go next line
.163b	b1 02		lda ($02),y			lda 	(codePtr),y
.163d	18		clc				clc
.163e	65 02		adc $02				adc 	codePtr
.1640	85 02		sta $02				sta 	codePtr
.1642	90 e1		bcc $1625			bcc 	_GotoSearch
.1644	e6 03		inc $03				inc 	codePtr+1
.1646	4c 25 16	jmp $1625			jmp 	_GotoSearch
.1649					_GotoFound:
.1649	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.164b	60		rts				rts
.164c					_GotoError:
.164c	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.164e	20 ce 21	jsr $21ce		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.1651					Command_VDU:
.1651	20 75 1a	jsr $1a75			jsr 	EvaluateRootInteger 			; get integer at root.
.1654	a5 48		lda $48				lda 	esInt0
.1656	a2 06		ldx #$06		ldx	#6
.1658	20 bf 21	jsr $21bf		jsr	deviceHandler
.165b					_CVNext:
.165b	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.165d	c8		iny				iny
.165e	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.1660	f0 ef		beq $1651			beq 	Command_VDU
.1662	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1664	d0 0a		bne $1670			bne 	_CVExit
.1666	a5 50		lda $50				lda 	esInt1
.1668	a2 06		ldx #$06		ldx	#6
.166a	20 bf 21	jsr $21bf		jsr	deviceHandler
.166d	4c 5b 16	jmp $165b			jmp 	_CVNext
.1670	88		dey		_CVExit:dey
.1671	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.2b63					Command_While:
.2b63	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2b65	a2 04		ldx #$04			ldx 	#4
.2b67	20 2d 21	jsr $212d			jsr 	RSClaim 					; create on stack.
.2b6a	88		dey				dey
.2b6b	a9 01		lda #$01			lda 	#1
.2b6d	20 59 21	jsr $2159			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2b70	c8		iny				iny
.2b71	20 77 1a	jsr $1a77			jsr 	EvaluateInteger				; get the conditional
.2b74	20 b9 20	jsr $20b9			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2b77	f0 01		beq $2b7a			beq 	_CWFail
.2b79	60		rts				rts
.2b7a					_CWFail:
.2b7a	a9 04		lda #$04			lda 	#4
.2b7c	20 4f 21	jsr $214f			jsr 	RSFree 						; close the just opened position.
.2b7f	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2b81	aa		tax				tax
.2b82	20 9e 2b	jsr $2b9e			jsr 	ScanForward
.2b85	60		rts				rts
.2b86					Command_Wend:
.2b86	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b88	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2b8a	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2b8c	f0 05		beq $2b93			beq 	_isok
.2b8e	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2b90	20 ce 21	jsr $21ce		jsr	errorHandler
.2b93					_isok:
.2b93	a9 01		lda #$01			lda 	#1
.2b95	20 6c 21	jsr $216c			jsr 	RSLoadPosition				; go back until true
.2b98	a9 04		lda #$04			lda 	#4
.2b9a	20 4f 21	jsr $214f			jsr 	RSFree 						; close the loop
.2b9d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1672					BinaryProcess:
.1672	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1674	15 41		ora $41,x			ora 	esType+1,x
.1676	0a		asl a				asl 	a
.1677	30 0e		bmi $1687			bmi 	_BPStringType 				; if one is set, then string type.
.1679	18		clc				clc 								; return CC for integer
.167a	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.167c	f0 08		beq $1686			beq 	_BPExit 					; if both integer then return with CC.
.167e	20 8c 16	jsr $168c			jsr 	BPMakeBothFloat 			; make both float
.1681	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1683	95 40		sta $40,x			sta 	esType,x
.1685	38		sec				sec 								; and return with carry set.
.1686					_BPExit:
.1686	60		rts				rts
.1687					_BPStringType:
.1687	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1689	20 ce 21	jsr $21ce		jsr	errorHandler
.168c					BPMakeBothFloat:
.168c	e8		inx				inx
.168d	20 91 16	jsr $1691			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1690	ca		dex				dex
.1691					BPMakeFloat:
.1691	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1693	4a		lsr a				lsr 	a
.1694	b0 07		bcs $169d			bcs 	_BPIsFloat
.1696	8a		txa				txa
.1697	a2 1a		ldx #$1a		ldx	#26
.1699	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.169c	aa		tax				tax
.169d					_BPIsFloat:
.169d	60		rts				rts
.169e					AddHandler:
.169e	20 ed 18	jsr $18ed			jsr 	DereferenceTwo 				; dereference top two on stack.
.16a1	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.16a3	35 41		and $41,x			and 	esType+1,x
.16a5	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.16a7	d0 10		bne $16b9			bne 	_AHStringConcat				; concatenate strings.
.16a9	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.16ac	b0 03		bcs $16b1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16ae	4c 7b 1f	jmp $1f7b			jmp 	MInt32Add 							; else do it as integer.
.16b1					_IsFPOperation:
.16b1	8a		txa				txa 								; call the relevant fp routine
.16b2	a2 02		ldx #$02		ldx	#2
.16b4	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.16b7	aa		tax				tax
.16b8	60		rts				rts
.16b9					_AHStringConcat:
.16b9	8a		txa				txa
.16ba	a2 04		ldx #$04		ldx	#4
.16bc	20 55 27	jsr $2755		jsr	stringHandler
.16bf	aa		tax				tax
.16c0	60		rts				rts
.16c1					SubHandler:
.16c1	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.16c4	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.16c7	b0 03		bcs $16cc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16c9	4c 95 1f	jmp $1f95			jmp 	MInt32Sub 							; else do it as integer.
.16cc					_IsFPOperation:
.16cc	8a		txa				txa 								; call the relevant fp routine
.16cd	a2 10		ldx #$10		ldx	#16
.16cf	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.16d2	aa		tax				tax
.16d3	60		rts				rts
.16d4					MulHandler:
.16d4	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.16d7	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.16da	b0 03		bcs $16df			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16dc	4c af 1f	jmp $1faf			jmp 	MInt32Multiply 							; else do it as integer.
.16df					_IsFPOperation:
.16df	8a		txa				txa 								; call the relevant fp routine
.16e0	a2 0a		ldx #$0a		ldx	#10
.16e2	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.16e5	aa		tax				tax
.16e6	60		rts				rts
.16e7					DivHandler:
.16e7	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.16ea	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.16ed	b0 03		bcs $16f2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16ef	4c 73 1e	jmp $1e73			jmp 	MInt32SDivide 							; else do it as integer.
.16f2					_IsFPOperation:
.16f2	8a		txa				txa 								; call the relevant fp routine
.16f3	a2 06		ldx #$06		ldx	#6
.16f5	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.16f8	aa		tax				tax
.16f9	60		rts				rts
.16fa					ModHandler:
.16fa	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.16fd	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.1700	b0 03		bcs $1705			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1702	4c f1 1e	jmp $1ef1			jmp 	MInt32Modulus 							; else do it as integer.
.1705					_IsFPOperation:
.1705	8a		txa				txa 								; call the relevant fp routine
.1706	a2 08		ldx #$08		ldx	#8
.1708	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.170b	aa		tax				tax
.170c	60		rts				rts
.170d					XorHandler:
.170d	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.1710	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.1713	b0 03		bcs $1718			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1715	4c 25 1e	jmp $1e25			jmp 	MInt32Xor 							; else do it as integer.
.1718					_IsFPOperation:
.1718	8a		txa				txa 								; call the relevant fp routine
.1719	a2 08		ldx #$08		ldx	#8
.171b	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.171e	aa		tax				tax
.171f	60		rts				rts
.1720					OrHandler:
.1720	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.1723	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.1726	b0 03		bcs $172b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1728	4c 0c 1e	jmp $1e0c			jmp 	MInt32Or 							; else do it as integer.
.172b					_IsFPOperation:
.172b	8a		txa				txa 								; call the relevant fp routine
.172c	a2 08		ldx #$08		ldx	#8
.172e	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1731	aa		tax				tax
.1732	60		rts				rts
.1733					AndHandler:
.1733	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.1736	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.1739	b0 03		bcs $173e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.173b	4c f3 1d	jmp $1df3			jmp 	MInt32And 							; else do it as integer.
.173e					_IsFPOperation:
.173e	8a		txa				txa 								; call the relevant fp routine
.173f	a2 08		ldx #$08		ldx	#8
.1741	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1744	aa		tax				tax
.1745	60		rts				rts
.1746					ShlHandler:
.1746	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.1749	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.174c	b0 03		bcs $1751			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.174e	4c c7 17	jmp $17c7			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.1751					_IsFPOperation:
.1751	8a		txa				txa 								; call the relevant fp routine
.1752	a2 08		ldx #$08		ldx	#8
.1754	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1757	aa		tax				tax
.1758	60		rts				rts
.1759					ShrHandler:
.1759	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.175c	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.175f	b0 03		bcs $1764			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1761	4c ca 17	jmp $17ca			jmp 	MInt32ShiftRightX 							; else do it as integer.
.1764					_IsFPOperation:
.1764	8a		txa				txa 								; call the relevant fp routine
.1765	a2 08		ldx #$08		ldx	#8
.1767	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.176a	aa		tax				tax
.176b	60		rts				rts
.176c					WordRefHandler:
.176c	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.176f	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.1772	b0 03		bcs $1777			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1774	4c b9 17	jmp $17b9			jmp 	MInt32WordIndirect 							; else do it as integer.
.1777					_IsFPOperation:
.1777	8a		txa				txa 								; call the relevant fp routine
.1778	a2 08		ldx #$08		ldx	#8
.177a	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.177d	aa		tax				tax
.177e	60		rts				rts
.177f					ByteRefHandler:
.177f	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.1782	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.1785	b0 03		bcs $178a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1787	4c bd 17	jmp $17bd			jmp 	MInt32ByteIndirect 							; else do it as integer.
.178a					_IsFPOperation:
.178a	8a		txa				txa 								; call the relevant fp routine
.178b	a2 08		ldx #$08		ldx	#8
.178d	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1790	aa		tax				tax
.1791	60		rts				rts
.1792					PowerHandler:
.1792	20 ed 18	jsr $18ed			jsr 	DereferenceTwo
.1795	20 72 16	jsr $1672			jsr 	BinaryProcess 				; check to see if either is float
.1798	b0 03		bcs $179d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.179a	4c a5 17	jmp $17a5			jmp 	PowerInteger 							; else do it as integer.
.179d					_IsFPOperation:
.179d	8a		txa				txa 								; call the relevant fp routine
.179e	a2 16		ldx #$16		ldx	#22
.17a0	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.17a3	aa		tax				tax
.17a4	60		rts				rts
.17a5					PowerInteger:
.17a5	20 8c 16	jsr $168c			jsr 	BPMakeBothFloat				; make them float.
.17a8	8a		txa				txa
.17a9	a2 16		ldx #$16		ldx	#22
.17ab	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.17ae	a2 12		ldx #$12		ldx	#18
.17b0	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.17b3	aa		tax				tax
.17b4	a9 00		lda #$00			lda 	#0 							; make type integer
.17b6	95 40		sta $40,x			sta 	esType,x
.17b8	60		rts				rts
.17b9					Mint32WordIndirect:
.17b9	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.17bb	d0 02		bne $17bf			bne 	Min32Indirect
.17bd					Mint32ByteIndirect:
.17bd	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.17bf					Min32Indirect:
.17bf	48		pha				pha 								; save the indirection
.17c0	20 7b 1f	jsr $1f7b			jsr 	MInt32Add 					; add a!b a?b
.17c3	68		pla				pla 								; and set the type to reference.
.17c4	95 40		sta $40,x			sta 	esType,x
.17c6	60		rts				rts
.17c7					Mint32ShiftLeftX:
.17c7	18		clc				clc
.17c8	90 01		bcc $17cb			bcc 	Mint32Shift
.17ca					Mint32ShiftRightX:
.17ca	38		sec				sec
.17cb					Mint32Shift:
.17cb	08		php				php 								; save carry flag on stack.
.17cc	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.17ce	15 59		ora $59,x			ora 	esInt2+1,x
.17d0	15 61		ora $61,x			ora 	esInt3+1,x
.17d2	d0 1e		bne $17f2			bne 	_MShiftZero
.17d4	b5 49		lda $49,x			lda 	esInt0+1,x
.17d6	c9 20		cmp #$20			cmp 	#32
.17d8	b0 18		bcs $17f2			bcs 	_MShiftZero
.17da					_MShiftLoop:
.17da	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.17dc	f0 12		beq $17f0			beq 	_MShiftExit
.17de	d6 49		dec $49,x			dec 	esInt0+1,x
.17e0	28		plp				plp 								; restore and save carry
.17e1	08		php				php
.17e2	90 06		bcc $17ea			bcc 	_MShiftLeft
.17e4	20 b0 20	jsr $20b0			jsr 	Mint32ShiftRight
.17e7	4c da 17	jmp $17da			jmp 	_MShiftLoop
.17ea					_MShiftLeft:
.17ea	20 a7 20	jsr $20a7			jsr 	Mint32ShiftLeft
.17ed	4c da 17	jmp $17da			jmp 	_MShiftLoop
.17f0					_MShiftExit:
.17f0	28		plp				plp	 								; throw saved carry and exit
.17f1	60		rts				rts
.17f2					_MShiftZero:
.17f2	4c 92 20	jmp $2092			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.17f5					PerformComparison:
.17f5	20 ed 18	jsr $18ed			jsr 	DereferenceTwo 				; make both values.
.17f8	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.17fa	35 41		and $41,x			and 	esType+1,x
.17fc	0a		asl a				asl 	a
.17fd	30 1d		bmi $181c			bmi 	_PCIsString
.17ff	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1801	15 41		ora $41,x			ora 	esType+1,x
.1803	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1804	30 22		bmi $1828			bmi 	_PCError
.1806	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1808	f0 0f		beq $1819			beq 	_PCIsInteger 				; if not two integers
.180a	20 8c 16	jsr $168c			jsr 	BPMakeBothFloat 			; make both float
.180d	8a		txa				txa
.180e	a2 04		ldx #$04		ldx	#4
.1810	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1813	86 0c		stx $0c				stx 	tempShort 					; save result
.1815	aa		tax				tax
.1816	a5 0c		lda $0c				lda 	tempShort
.1818	60		rts				rts
.1819					_PCIsInteger:
.1819	4c 3e 1e	jmp $1e3e			jmp 	MInt32Compare
.181c					_PCIsString:
.181c	8a		txa				txa 								; A has SP
.181d	a2 06		ldx #$06		ldx	#6
.181f	20 55 27	jsr $2755		jsr	stringHandler
.1822	86 0c		stx $0c				stx 	tempShort 					; save result
.1824	aa		tax				tax 								; put SP back in X and get result.
.1825	a5 0c		lda $0c				lda 	tempShort
.1827	60		rts				rts
.1828					_PCError:
.1828	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.182a	20 ce 21	jsr $21ce		jsr	errorHandler
.182d					CompareEquals:
.182d	20 f5 17	jsr $17f5			jsr 	PerformComparison
.1830	c9 00		cmp #$00			cmp 	#$00
.1832	f0 35		beq $1869			beq  	CompareTrue
.1834	4c 6c 18	jmp $186c			jmp 	CompareFalse
.1837					CompareLess:
.1837	20 f5 17	jsr $17f5			jsr 	PerformComparison
.183a	c9 ff		cmp #$ff			cmp 	#$FF
.183c	f0 2b		beq $1869			beq  	CompareTrue
.183e	4c 6c 18	jmp $186c			jmp 	CompareFalse
.1841					CompareGreater:
.1841	20 f5 17	jsr $17f5			jsr 	PerformComparison
.1844	c9 01		cmp #$01			cmp 	#$01
.1846	f0 21		beq $1869			beq  	CompareTrue
.1848	4c 6c 18	jmp $186c			jmp 	CompareFalse
.184b					CompareNotEquals:
.184b	20 f5 17	jsr $17f5			jsr 	PerformComparison
.184e	c9 00		cmp #$00			cmp 	#$00
.1850	d0 17		bne $1869			bne  	CompareTrue
.1852	4c 6c 18	jmp $186c			jmp 	CompareFalse
.1855					CompareGreaterEq:
.1855	20 f5 17	jsr $17f5			jsr 	PerformComparison
.1858	c9 ff		cmp #$ff			cmp 	#$FF
.185a	d0 0d		bne $1869			bne  	CompareTrue
.185c	4c 6c 18	jmp $186c			jmp 	CompareFalse
.185f					CompareLessEq:
.185f	20 f5 17	jsr $17f5			jsr 	PerformComparison
.1862	c9 01		cmp #$01			cmp 	#$01
.1864	d0 03		bne $1869			bne  	CompareTrue
.1866	4c 6c 18	jmp $186c			jmp 	CompareFalse
.1869					CompareTrue:
.1869	4c 8e 20	jmp $208e			jmp 	MInt32True
.186c					CompareFalse:
.186c	4c 92 20	jmp $2092			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.186f					Event_Str:
.186f	20 61 1a	jsr $1a61			jsr 	EvaluateNumeric 			; get a number.
.1872	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.1874	d0 13		bne $1889			bne 	_ESFloat
.1876	20 cc 18	jsr $18cc			jsr 	ConvertGetBase
.1879	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.187b	85 04		sta $04				sta 	temp0
.187d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.187f	85 05		sta $05				sta 	1+(temp0)
.1881	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1883	20 e8 1f	jsr $1fe8			jsr 	MInt32ToString 				; convert to string.
.1886	4c 96 18	jmp $1896			jmp 	_ESCloneExit 				; clone and exit.
.1889					_ESFloat:
.1889	20 05 21	jsr $2105			jsr 	CheckRightParen 			; check closing )
.188c	20 39 11	jsr $1139			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.188f	8a		txa				txa
.1890	a2 14		ldx #$14		ldx	#20
.1892	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1895	aa		tax				tax
.1896					_ESCloneExit:
.1896	8a		txa				txa
.1897	a2 02		ldx #$02		ldx	#2
.1899	20 55 27	jsr $2755		jsr	stringHandler
.189c	aa		tax				tax
.189d	60		rts				rts
.189e					UnaryVal:
.189e	38		sec				sec
.189f	b0 01		bcs $18a2			bcs 	ValueMain
.18a1					UnaryIsVal:
.18a1	18		clc				clc
.18a2					ValueMain:
.18a2	08		php				php 								; save results (CS is value, CC is validation)
.18a3	20 6c 1a	jsr $1a6c			jsr 	EvaluateString
.18a6	20 cc 18	jsr $18cc			jsr 	ConvertGetBase 				; get base, if any.
.18a9	98		tya				tya
.18aa	48		pha				pha
.18ab	20 39 11	jsr $1139			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.18ae	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.18b0	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.18b2	20 05 1f	jsr $1f05			jsr 	MInt32FromString 			; convert it back from a string.
.18b5	b0 0c		bcs $18c3			bcs 	_VMSuccess 					; successfully converted.
.18b7	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.18b9	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.18bb	f0 00		beq $18bd			beq 	_VMFailed 	 				; so we failed.
.18bd					_VMFailed:
.18bd	68		pla				pla
.18be	a8		tay				tay
.18bf	28		plp				plp
.18c0	4c 92 20	jmp $2092			jmp 	MInt32False 				; return 0 whatever.
.18c3					_VMSuccess:
.18c3	68		pla				pla
.18c4	a8		tay				tay
.18c5	28		plp				plp 								; if CS the it was val() so we want the value.
.18c6	b0 03		bcs $18cb			bcs 	_VMExit
.18c8	4c 8e 20	jmp $208e			jmp 	MInt32True 					; otherwise return true as successful.
.18cb					_VMExit:
.18cb	60		rts				rts
.18cc					ConvertGetBase:
.18cc	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.18ce	95 49		sta $49,x			sta 	esInt0+1,x
.18d0	b1 02		lda ($02),y			lda 	(codePtr),y
.18d2	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.18d4	d0 0e		bne $18e4			bne 	_CGBDone
.18d6	e8		inx				inx 								; next level
.18d7	c8		iny				iny 								; skip comma.
.18d8	20 7f 1a	jsr $1a7f			jsr 	EvaluateSmallInteger		; evaluate the base.
.18db	ca		dex				dex
.18dc	c9 02		cmp #$02			cmp 	#2
.18de	90 08		bcc $18e8			bcc 	_CGBValue
.18e0	c9 11		cmp #$11			cmp 	#17
.18e2	b0 04		bcs $18e8			bcs 	_CGBValue
.18e4					_CGBDone:
.18e4	20 05 21	jsr $2105			jsr 	CheckRightParen
.18e7	60		rts				rts
.18e8					_CGBValue:
.18e8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18ea	20 ce 21	jsr $21ce		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.18ed					DereferenceTwo:
.18ed	e8		inx				inx
.18ee	20 f2 18	jsr $18f2			jsr 	DereferenceOne
.18f1	ca		dex				dex
.18f2					DereferenceOne:
.18f2	b5 40		lda $40,x			lda 	esType,x
.18f4	10 3d		bpl $1933			bpl 	_DRNotReference 			; is it a reference ?
.18f6	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.18f7	b0 3b		bcs $1934			bcs 	_DRFloatDeReference
.18f9	98		tya				tya
.18fa	48		pha				pha
.18fb	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.18fd	85 04		sta $04				sta 	temp0
.18ff	b5 50		lda $50,x			lda 	esInt1,x
.1901	85 05		sta $05				sta 	temp0+1
.1903	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1905	95 50		sta $50,x			sta 	esInt1,x
.1907	95 58		sta $58,x			sta 	esInt2,x
.1909	95 60		sta $60,x			sta 	esInt3,x
.190b	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.190d	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.190f	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1910	30 0d		bmi $191f			bmi 	_DeRefString 				; string, 2 bytes only
.1912	d0 11		bne $1925			bne 	_DeRefByte 					; byte 1 byte only
.1914					_DeRefLong:
.1914	a0 03		ldy #$03			ldy 	#3
.1916	b1 04		lda ($04),y			lda 	(temp0),y
.1918	95 60		sta $60,x			sta 	esInt3,x
.191a	88		dey				dey
.191b	b1 04		lda ($04),y			lda 	(temp0),y
.191d	95 58		sta $58,x			sta 	esInt2,x
.191f					_DeRefString:
.191f	a0 01		ldy #$01			ldy 	#1
.1921	b1 04		lda ($04),y			lda 	(temp0),y
.1923	95 50		sta $50,x			sta 	esInt1,x
.1925					_DeRefByte:
.1925	a0 00		ldy #$00			ldy 	#0
.1927	b1 04		lda ($04),y			lda 	(temp0),y
.1929	95 48		sta $48,x			sta 	esInt0,x
.192b	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.192d	29 40		and #$40			and 	#$40
.192f	95 40		sta $40,x			sta 	esType,x
.1931	68		pla				pla
.1932	a8		tay				tay
.1933					_DRNotReference
.1933	60		rts				rts
.1934					_DRFloatDereference:
.1934	20 39 11	jsr $1139			jsr 	TOSToTemp0 					; address to deref in temp0
.1937	8a		txa				txa
.1938	a2 1c		ldx #$1c		ldx	#28
.193a	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.193d	aa		tax				tax
.193e	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1940	95 40		sta $40,x			sta 	esType,x
.1942	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1943					EvaluateLevel:
.1943	48		pha				pha 								; save precedence level.
.1944	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1946	95 48		sta $48,x			sta 	esInt0,x
.1948	95 50		sta $50,x			sta 	esInt1,x
.194a	95 58		sta $58,x			sta 	esInt2,x
.194c	95 60		sta $60,x			sta 	esInt3,x
.194e	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1950	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1952	30 21		bmi $1975			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1954	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1955	30 0a		bmi $1961			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1957	8a		txa				txa 								; stack level in X
.1958	a2 00		ldx #$00		ldx	#0
.195a	20 1d 2a	jsr $2a1d		jsr	variableHandler
.195d	aa		tax				tax
.195e	4c 9e 19	jmp $199e			jmp		_ELHasTerm
.1961					_ELIsConstant:
.1961	4a		lsr a				lsr 	a 							; get the value back
.1962	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1964	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1966					_ELCheckNext:
.1966	c8		iny				iny 								; look at next
.1967	b1 02		lda ($02),y			lda 	(codePtr),y
.1969	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.196b	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.196d	b0 2f		bcs $199e			bcs 	_ELHasTerm 					; done getting the constant.
.196f	20 b7 1a	jsr $1ab7			jsr 	ELShiftByteIn 				; shift byte into position.
.1972	4c 66 19	jmp $1966			jmp 	_ELCheckNext
.1975					_ELIsToken:
.1975	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1977	f0 0f		beq $1988			beq 	_ELIsString
.1979	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.197b	d0 5f		bne $19dc			bne 	_ELCheckUnary
.197d	8a		txa				txa 								; put X into A
.197e	c8		iny				iny 								; skip over the float marker
.197f	a2 18		ldx #$18		ldx	#24
.1981	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1984	aa		tax				tax 								; restore X
.1985	4c 9e 19	jmp $199e			jmp 	_ELHasTerm
.1988					_ELIsString:
.1988	98		tya				tya 								; address of string is codePtr+y+1
.1989	38		sec				sec
.198a	65 02		adc $02				adc 	codePtr
.198c	95 48		sta $48,x			sta 	esInt0,x
.198e	a5 03		lda $03				lda 	codePtr+1
.1990	69 00		adc #$00			adc 	#0
.1992	95 50		sta $50,x			sta 	esInt1,x
.1994	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1996	95 40		sta $40,x			sta 	esType,x
.1998	c8		iny				iny 								; skip over string.
.1999	98		tya				tya
.199a	38		sec				sec									; +1 for the length itself.
.199b	71 02		adc ($02),y			adc 	(codePtr),y
.199d	a8		tay				tay 								; and fall through to term loop code.
.199e					_ELHasTerm:
.199e	b1 02		lda ($02),y			lda 	(codePtr),y
.19a0	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.19a2	90 04		bcc $19a8			bcc 	_ELPopExit
.19a4	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.19a6	90 02		bcc $19aa			bcc 	_ELHasBinaryTerm
.19a8					_ELPopExit:
.19a8	68		pla				pla
.19a9					_ELExit:
.19a9	60		rts				rts
.19aa					_ELHasBinaryTerm:
.19aa	84 0c		sty $0c				sty 	tempShort 					; save position
.19ac	a8		tay				tay 								; use token as an index and get the precedence.
.19ad	b9 5f 1a	lda $1a5f,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.19b0	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.19b2	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.19b4	68		pla				pla 								; restore current level.
.19b5	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.19b7	b0 f0		bcs $19a9			bcs 	_ELExit
.19b9	48		pha				pha 								; save current level back on the stack.
.19ba	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.19bc	48		pha				pha
.19bd	c8		iny				iny
.19be	e8		inx				inx 								; calculate the RHS at the operator precedence.
.19bf	a5 0c		lda $0c				lda 	tempShort
.19c1	20 43 19	jsr $1943			jsr 	EvaluateLevel
.19c4	ca		dex				dex
.19c5	68		pla				pla 								; get the operator back out.
.19c6					_ELExecuteA:
.19c6	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.19c8	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.19c9	aa		tax				tax
.19ca	bd 30 14	lda $1430,x			lda 	Group0Vectors,x
.19cd	85 04		sta $04				sta 	temp0
.19cf	bd 31 14	lda $1431,x			lda 	Group0Vectors+1,x
.19d2	85 05		sta $05				sta 	temp0+1
.19d4	a6 0c		ldx $0c				ldx 	tempShort
.19d6	20 23 1a	jsr $1a23			jsr 	_ELCallTemp0
.19d9	4c 9e 19	jmp $199e			jmp 	_ELHasTerm 					; and loop back round.
.19dc					_ELCheckUnary:
.19dc	c8		iny				iny 								; skip over token.
.19dd	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.19df	f0 19		beq $19fa			beq 	_ELMinus
.19e1	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.19e3	f0 2c		beq $1a11			beq 	_ELIndirect
.19e5	c9 98		cmp #$98			cmp 	#TKW_QMARK
.19e7	f0 28		beq $1a11			beq 	_ELIndirect
.19e9	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.19eb	f0 39		beq $1a26			beq 	_ELExtension
.19ed	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.19ef	90 04		bcc $19f5			bcc 	_ELUSyntax
.19f1	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.19f3	90 d1		bcc $19c6			bcc 	_ELExecuteA 				; if so do that token.
.19f5					_ELUSyntax:
.19f5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.19f7	20 ce 21	jsr $21ce		jsr	errorHandler
.19fa					_ELMinus:
.19fa	20 40 1a	jsr $1a40			jsr 	EvaluateNumericTerm 		; get a number to negate.
.19fd	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.19ff	f0 0a		beq $1a0b			beq 	_ELMinusInteger
.1a01	8a		txa				txa
.1a02	a2 0c		ldx #$0c		ldx	#12
.1a04	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1a07	aa		tax				tax
.1a08	4c 9e 19	jmp $199e			jmp 	_ELHasTerm
.1a0b					_ELMinusInteger:
.1a0b	20 4c 20	jsr $204c			jsr 	MInt32Negate 				; do int negate
.1a0e	4c 9e 19	jmp $199e			jmp 	_ELHasTerm
.1a11					_ELIndirect:
.1a11	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1a12	20 49 1a	jsr $1a49			jsr 	EvaluateIntegerTerm 		; integer address
.1a15	68		pla				pla
.1a16	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1a18	f0 02		beq $1a1c			beq 	_ELHaveModifier
.1a1a	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1a1c					_ELHaveModifier:
.1a1c	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1a1e	95 40		sta $40,x			sta 	esType,x
.1a20	4c 9e 19	jmp $199e			jmp 	_ELHasTerm
.1a23					_ELCallTemp0:
.1a23	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1a26					_ELExtension:
.1a26	8a		txa				txa 								; stack pos in A
.1a27	20 28 24	jsr $2428		jsr	extensionHandler
.1a2a	aa		tax				tax 								; restore stack
.1a2b	4c 9e 19	jmp $199e			jmp 	_ELHasTerm
.1a2e					UnaryParenthesis:
.1a2e	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1a30	20 43 19	jsr $1943			jsr 	EvaluateLevel
.1a33	20 05 21	jsr $2105			jsr 	CheckRightParen 			; check for )
.1a36	60		rts				rts
.1a37					EvaluateTerm:
.1a37	a9 0f		lda #$0f			lda 	#15
.1a39	20 43 19	jsr $1943			jsr 	EvaluateLevel
.1a3c	20 f2 18	jsr $18f2			jsr 	DereferenceOne
.1a3f	60		rts				rts
.1a40					EvaluateNumericTerm:
.1a40	20 37 1a	jsr $1a37			jsr 	EvaluateTerm
.1a43	b5 40		lda $40,x			lda 	esType,x
.1a45	0a		asl a				asl 	a 							; see if it's a string.
.1a46	30 09		bmi $1a51			bmi 	ENTType
.1a48	60		rts				rts
.1a49					EvaluateIntegerTerm:
.1a49	20 37 1a	jsr $1a37			jsr 	EvaluateTerm
.1a4c	b5 40		lda $40,x			lda 	esType,x
.1a4e	d0 01		bne $1a51			bne 	ENTType
.1a50	60		rts				rts
.1a51					ENTType:
.1a51	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1a53	20 ce 21	jsr $21ce		jsr	errorHandler
.1a56					EvaluateRoot:
.1a56	a2 00		ldx #$00			ldx 	#0
.1a58					Evaluate:
.1a58	a9 00		lda #$00			lda 	#0
.1a5a	20 43 19	jsr $1943			jsr 	EvaluateLevel
.1a5d	20 f2 18	jsr $18f2			jsr 	DereferenceOne
.1a60	60		rts				rts
.1a61					EvaluateNumeric:
.1a61	20 58 1a	jsr $1a58			jsr 	Evaluate
.1a64	b5 40		lda $40,x			lda 	esType,x
.1a66	0a		asl a				asl 	a 							; see if it's a string.
.1a67	30 e8		bmi $1a51			bmi 	ENTType
.1a69	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1a6a	4a		lsr a				lsr 	a
.1a6b	60		rts				rts
.1a6c					EvaluateString:
.1a6c	20 58 1a	jsr $1a58			jsr 	Evaluate
.1a6f	b5 40		lda $40,x			lda 	esType,x
.1a71	0a		asl a				asl 	a 							; see if it's a string.
.1a72	10 dd		bpl $1a51			bpl 	ENTType
.1a74	60		rts				rts
.1a75					EvaluateRootInteger:
.1a75	a2 00		ldx #$00			ldx 	#0
.1a77					EvaluateInteger:
.1a77	20 58 1a	jsr $1a58			jsr 	Evaluate
.1a7a	b5 40		lda $40,x			lda 	esType,x
.1a7c	d0 d3		bne $1a51			bne 	ENTType
.1a7e	60		rts				rts
.1a7f					EvaluateSmallInteger:
.1a7f	20 77 1a	jsr $1a77			jsr 	EvaluateInteger
.1a82	b5 50		lda $50,x			lda 	esInt1,x
.1a84	15 58		ora $58,x			ora 	esInt2,x
.1a86	15 60		ora $60,x			ora 	esInt3,x
.1a88	d0 03		bne $1a8d			bne 	_ESIValue
.1a8a	b5 48		lda $48,x			lda 	esInt0,x
.1a8c	60		rts				rts
.1a8d					_ESIValue:
.1a8d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a8f	20 ce 21	jsr $21ce		jsr	errorHandler
.1a92					LinkEvaluate:
.1a92	aa		tax				tax
.1a93	20 58 1a	jsr $1a58			jsr 	Evaluate
.1a96	8a		txa				txa
.1a97	60		rts				rts
.1a98					LinkEvaluateInteger:
.1a98	aa		tax				tax
.1a99	20 77 1a	jsr $1a77			jsr 	EvaluateInteger
.1a9c	8a		txa				txa
.1a9d	60		rts				rts
.1a9e					LinkEvaluateSmallInt:
.1a9e	aa		tax				tax
.1a9f	20 7f 1a	jsr $1a7f			jsr 	EvaluateSmallInteger
.1aa2	8a		txa				txa
.1aa3	60		rts				rts
.1aa4					EvaluateReference:
.1aa4	ad f6 1a	lda $1af6			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1aa7	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1aa8	e9 01		sbc #$01			sbc 	#1
.1aaa	20 43 19	jsr $1943			jsr 	EvaluateLevel
.1aad	b5 40		lda $40,x			lda 	esType,x
.1aaf	10 01		bpl $1ab2			bpl 	_ERFail
.1ab1	60		rts				rts
.1ab2					_ERFail:
.1ab2	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1ab4	20 ce 21	jsr $21ce		jsr	errorHandler
.1ab7					ELShiftByteIn:
.1ab7	48		pha				pha 								; save bits to shift in.
.1ab8	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1aba	48		pha				pha
.1abb	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1abd	95 60		sta $60,x			sta 	esInt3,x
.1abf	b5 50		lda $50,x			lda 	esInt1,x
.1ac1	95 58		sta $58,x			sta 	esInt2,x
.1ac3	b5 48		lda $48,x			lda 	esInt0,x
.1ac5	95 50		sta $50,x			sta 	esInt1,x
.1ac7	a9 00		lda #$00			lda 	#0
.1ac9	95 48		sta $48,x			sta 	esInt0,x
.1acb	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1acc	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1ace	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1ad0					_ELShiftLoop:
.1ad0	4a		lsr a				lsr 	a
.1ad1	76 60		ror $60,x			ror 	esInt3,x
.1ad3	76 58		ror $58,x			ror 	esInt2,x
.1ad5	76 50		ror $50,x			ror 	esInt1,x
.1ad7	76 48		ror $48,x			ror 	esInt0,x
.1ad9	c9 01		cmp #$01			cmp 	#1
.1adb	d0 f3		bne $1ad0			bne 	_ELShiftLoop
.1add	68		pla				pla 								; get original 6 bit value and OR in.
.1ade	29 3f		and #$3f			and 	#$3F
.1ae0	15 48		ora $48,x			ora 	esInt0,x
.1ae2	95 48		sta $48,x			sta 	esInt0,x
.1ae4	60		rts				rts
.1ae5					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1ae5	01					.byte	$01			; $86 and
>1ae6	01					.byte	$01			; $87 or
>1ae7	01					.byte	$01			; $88 xor
>1ae8	02					.byte	$02			; $89 >=
>1ae9	02					.byte	$02			; $8a <=
>1aea	02					.byte	$02			; $8b >
>1aeb	02					.byte	$02			; $8c <
>1aec	02					.byte	$02			; $8d =
>1aed	02					.byte	$02			; $8e <>
>1aee	03					.byte	$03			; $8f +
>1aef	03					.byte	$03			; $90 -
>1af0	04					.byte	$04			; $91 >>
>1af1	04					.byte	$04			; $92 <<
>1af2	04					.byte	$04			; $93 *
>1af3	04					.byte	$04			; $94 /
>1af4	04					.byte	$04			; $95 mod
>1af5	05					.byte	$05			; $96 ^
>1af6	06					.byte	$06			; $97 !
>1af7	06					.byte	$06			; $98 ?
>1af8	82					.byte	$82			; $99 repeat
>1af9	82					.byte	$82			; $9a while
>1afa	82					.byte	$82			; $9b for
>1afb	82					.byte	$82			; $9c if
>1afc	82					.byte	$82			; $9d defproc
>1afd	80					.byte	$80			; $9e until
>1afe	80					.byte	$80			; $9f wend
>1aff	80					.byte	$80			; $a0 next
>1b00	80					.byte	$80			; $a1 then
>1b01	80					.byte	$80			; $a2 endif
>1b02	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1b03					EventFunction:
.1b03	20 a4 1a	jsr $1aa4			jsr 	EvaluateReference			; get the variable reference.
.1b06	b5 40		lda $40,x			lda 	esType,x
.1b08	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1b0a	d0 5b		bne $1b67			bne 	_EFType
.1b0c	20 12 21	jsr $2112			jsr 	CheckComma
.1b0f	e8		inx				inx
.1b10	20 77 1a	jsr $1a77			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1b13	20 05 21	jsr $2105			jsr 	CheckRightParen 			; finish off with the
.1b16	ca		dex				dex
.1b17	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1b19	29 80		and #$80			and 	#$80
.1b1b	15 58		ora $58,x			ora 	esInt2,x
.1b1d	15 60		ora $60,x			ora 	esInt3,x
.1b1f	d0 41		bne $1b62			bne 	_EFValue
.1b21	98		tya				tya
.1b22	48		pha				pha
.1b23	8a		txa				txa
.1b24	48		pha				pha
.1b25	a2 0a		ldx #$0a		ldx	#10
.1b27	20 bf 21	jsr $21bf		jsr	deviceHandler
.1b2a	84 07		sty $07				sty 	temp1+1
.1b2c	85 06		sta $06				sta 	temp1
.1b2e	68		pla				pla
.1b2f	aa		tax				tax
.1b30	20 39 11	jsr $1139			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1b33	a0 03		ldy #$03			ldy 	#3							; if -ve
.1b35	b1 04		lda ($04),y			lda 	(temp0),y
.1b37	30 23		bmi $1b5c			bmi 	_EFFail 	 				; straight out with fail, means on pause.
.1b39	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1b3b	b1 04		lda ($04),y			lda 	(temp0),y
.1b3d	c8		iny				iny
.1b3e	11 04		ora ($04),y			ora 	(temp0),y
.1b40	f0 17		beq $1b59			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1b42	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1b44	38		sec				sec
.1b45	b1 04		lda ($04),y			lda 	(temp0),y
.1b47	e5 06		sbc $06				sbc 	temp1
.1b49	c8		iny				iny
.1b4a	b1 04		lda ($04),y			lda 	(temp0),y
.1b4c	e5 07		sbc $07				sbc 	temp1+1
.1b4e	10 0c		bpl $1b5c			bpl 	_EFFail 					; if trigger >= timer then return False
.1b50	20 6c 1b	jsr $1b6c			jsr 	SetEventTimer 				; reset the timer for next time.
.1b53	20 8e 20	jsr $208e			jsr	 	MInt32True 					; and treutn true as fired.
.1b56	68		pla				pla
.1b57	a8		tay				tay
.1b58	60		rts				rts
.1b59					_EFInitialise:
.1b59	20 6c 1b	jsr $1b6c			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1b5c					_EFFail:
.1b5c	68		pla				pla
.1b5d	a8		tay				tay
.1b5e	20 92 20	jsr $2092			jsr 	MInt32False
.1b61	60		rts				rts
.1b62					_EFValue:
.1b62	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b64	20 ce 21	jsr $21ce		jsr	errorHandler
.1b67					_EFType:
.1b67	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b69	20 ce 21	jsr $21ce		jsr	errorHandler
.1b6c					SetEventTimer:
.1b6c	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1b6e	18		clc				clc
.1b6f	a5 06		lda $06				lda 	temp1
.1b71	75 49		adc $49,x			adc 	esInt0+1,x
.1b73	91 04		sta ($04),y			sta		(temp0),y
.1b75	c8		iny				iny
.1b76	a5 07		lda $07				lda 	temp1+1
.1b78	75 51		adc $51,x			adc 	esInt1+1,x
.1b7a	91 04		sta ($04),y			sta		(temp0),y
.1b7c	88		dey				dey
.1b7d	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1b7f	d0 04		bne $1b85			bne 	_SETExit
.1b81	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1b83	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1b85					_SETExit:
.1b85	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1b86					UnaryLen:
.1b86	20 94 1b	jsr $1b94			jsr 	ULStart
.1b89					ULFinish:
.1b89	b1 04		lda ($04),y			lda 	(temp0),y
.1b8b	a4 0c		ldy $0c				ldy 	tempShort
.1b8d	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit
.1b90	20 05 21	jsr $2105			jsr 	CheckRightParen
.1b93	60		rts				rts
.1b94	20 6c 1a	jsr $1a6c	ULStart:jsr 	EvaluateString
.1b97	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1b99	85 04		sta $04				sta 	temp0
.1b9b	b5 50		lda $50,x			lda 	esInt1,x
.1b9d	85 05		sta $05				sta 	temp0+1
.1b9f	84 0c		sty $0c				sty 	tempShort 					; get length
.1ba1	a0 00		ldy #$00			ldy 	#0
.1ba3	60		rts				rts
.1ba4					UnaryAsc:
.1ba4	20 94 1b	jsr $1b94			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1ba7	b1 04		lda ($04),y			lda 	(temp0),y
.1ba9	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1baa	c9 00		cmp #$00			cmp 	#0
.1bac	d0 db		bne $1b89			bne 	ULFinish
.1bae	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1bb0	20 ce 21	jsr $21ce		jsr	errorHandler
.1bb3					UnaryAbs:
.1bb3	20 61 1a	jsr $1a61			jsr 	EvaluateNumeric
.1bb6	b0 07		bcs $1bbf			bcs 	_UAFloat
.1bb8	20 47 20	jsr $2047			jsr 	MInt32Absolute
.1bbb	20 05 21	jsr $2105			jsr 	CheckRightParen
.1bbe	60		rts				rts
.1bbf					_UAFloat:
.1bbf	8a		txa				txa
.1bc0	a2 00		ldx #$00		ldx	#0
.1bc2	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1bc5	aa		tax				tax
.1bc6	20 05 21	jsr $2105			jsr 	CheckRightParen
.1bc9	60		rts				rts
.1bca					UnarySgn:
.1bca	20 61 1a	jsr $1a61			jsr 	EvaluateNumeric
.1bcd	b0 07		bcs $1bd6			bcs 	_USFloat
.1bcf	20 7f 20	jsr $207f			jsr 	MInt32Sign
.1bd2	20 05 21	jsr $2105			jsr 	CheckRightParen
.1bd5	60		rts				rts
.1bd6					_USFloat:
.1bd6	8a		txa				txa
.1bd7	a2 0e		ldx #$0e		ldx	#14
.1bd9	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1bdc	aa		tax				tax
.1bdd	20 05 21	jsr $2105			jsr 	CheckRightParen
.1be0	60		rts				rts
.1be1					UnaryPeek:
.1be1	20 0d 1c	jsr $1c0d			jsr 	PDLCode
.1be4	4c 01 1c	jmp $1c01			jmp 	PDLByte0
.1be7					UnaryDeek:
.1be7	20 0d 1c	jsr $1c0d			jsr 	PDLCode
.1bea	4c fb 1b	jmp $1bfb			jmp 	PDLByte1
.1bed					UnaryLeek:
.1bed	20 0d 1c	jsr $1c0d			jsr 	PDLCode
.1bf0	a0 03		ldy #$03			ldy 	#3
.1bf2	b1 04		lda ($04),y			lda 	(temp0),y
.1bf4	95 60		sta $60,x			sta 	esInt3,x
.1bf6	88		dey				dey
.1bf7	b1 04		lda ($04),y			lda 	(temp0),y
.1bf9	95 58		sta $58,x			sta 	esInt2,x
.1bfb					PDLByte1:
.1bfb	a0 01		ldy #$01			ldy 	#1
.1bfd	b1 04		lda ($04),y			lda 	(temp0),y
.1bff	95 50		sta $50,x			sta 	esInt1,x
.1c01					PDLByte0:
.1c01	a0 00		ldy #$00			ldy 	#0
.1c03	b1 04		lda ($04),y			lda 	(temp0),y
.1c05	95 48		sta $48,x			sta 	esInt0,x
.1c07	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1c09	20 05 21	jsr $2105			jsr 	CheckRightParen 			; check right and return
.1c0c	60		rts				rts
.1c0d					PDLCode:
.1c0d	20 77 1a	jsr $1a77			jsr 	EvaluateInteger
.1c10	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1c12	85 04		sta $04				sta 	temp0
.1c14	b5 50		lda $50,x			lda 	esInt1,x
.1c16	85 05		sta $05				sta 	temp0+1
.1c18	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1c1a	95 50		sta $50,x			sta 	esInt1,x
.1c1c	95 58		sta $58,x			sta 	esInt2,x
.1c1e	95 60		sta $60,x			sta 	esInt3,x
.1c20	84 0c		sty $0c				sty 	tempShort 					; save Y
.1c22	60		rts				rts
.1c23					Unary_Random:
.1c23	20 c2 20	jsr $20c2			jsr 	MInt32Random 				; generate random number.
.1c26	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1c28	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1c2a	f0 08		beq $1c34			beq 	_URExit
.1c2c	e8		inx				inx 								; load range 0..r-1 into +1
.1c2d	20 77 1a	jsr $1a77			jsr 	EvaluateInteger
.1c30	ca		dex				dex
.1c31	20 f1 1e	jsr $1ef1			jsr 	MInt32Modulus 				; calculate random % modulus
.1c34					_URExit:
.1c34	20 05 21	jsr $2105			jsr 	CheckRightParen 			; check right and return
.1c37	60		rts				rts
.1c38					Unary_Min:
.1c38	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1c3a	d0 02		bne $1c3e			bne 	UnaryMBody
.1c3c					Unary_Max:
.1c3c	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1c3e					UnaryMBody:
.1c3e	48		pha				pha 								; save comparator on stack.
.1c3f	20 58 1a	jsr $1a58			jsr 	Evaluate 					; get the first thing to check
.1c42					_UnaryMLoop:
.1c42	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1c44	c8		iny				iny
.1c45	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1c47	f0 09		beq $1c52			beq 	_UnaryMExit
.1c49	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1c4b	f0 07		beq $1c54			beq 	_UnaryMCompare
.1c4d	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c4f	20 ce 21	jsr $21ce		jsr	errorHandler
.1c52					_UnaryMExit:
.1c52	68		pla				pla 								; throw comparator and return.
.1c53	60		rts				rts
.1c54					_UnaryMCompare:
.1c54	e8		inx				inx 								; get the 2nd thing to evaluate
.1c55	20 58 1a	jsr $1a58			jsr 	Evaluate
.1c58	ca		dex				dex
.1c59	20 f5 17	jsr $17f5			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1c5c	85 0c		sta $0c				sta 	tempShort 					; save result
.1c5e	68		pla				pla 								; get what we need
.1c5f	48		pha				pha
.1c60	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1c62	d0 de		bne $1c42			bne 	_UnaryMLoop 				; no, try another value.
.1c64	20 92 20	jsr $2092			jsr 	MInt32False 				; promote 2nd to 1st.
.1c67	20 7b 1f	jsr $1f7b			jsr 	MInt32Add
.1c6a	4c 42 1c	jmp $1c42			jmp 	_UnaryMLoop
.1c6d					Unary_Page:
.1c6d	20 92 20	jsr $2092			jsr 	MInt32False 				; zero
.1c70	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1c73	95 48		sta $48,x			sta 	esInt0,x
.1c75	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c78	95 50		sta $50,x			sta 	esInt1,x
.1c7a	60		rts				rts
.1c7b					UnaryReference:
.1c7b	a9 0f		lda #$0f			lda 	#15
.1c7d	20 43 19	jsr $1943			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1c80	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1c82	10 05		bpl $1c89			bpl 	UType
.1c84	a9 00		lda #$00			lda 	#0 							; make it an integer
.1c86	95 40		sta $40,x			sta 	esType,x
.1c88	60		rts				rts
.1c89					UType:
.1c89	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c8b	20 ce 21	jsr $21ce		jsr	errorHandler
.1c8e					UnaryHexMarker:
.1c8e	4c 49 1a	jmp $1a49			jmp 	EvaluateIntegerTerm
.1c91					UnaryComplement:
.1c91	20 49 1a	jsr $1a49			jsr 	EvaluateIntegerTerm
.1c94	20 66 20	jsr $2066			jsr 	MInt32Not
.1c97	60		rts				rts
.1c98					UnaryIntToFloat:
.1c98	20 61 1a	jsr $1a61			jsr 	EvaluateNumeric
.1c9b	b5 40		lda $40,x			lda 	esType,x
.1c9d	d0 0b		bne $1caa			bne 	_UIFExit
.1c9f	8a		txa				txa
.1ca0	a2 1a		ldx #$1a		ldx	#26
.1ca2	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1ca5	aa		tax				tax
.1ca6	a9 01		lda #$01			lda 	#1
.1ca8	95 40		sta $40,x			sta 	esType,x
.1caa					_UIFExit:
.1caa	60		rts				rts
.1cab					UnaryFloatToInt:
.1cab	20 61 1a	jsr $1a61			jsr 	EvaluateNumeric
.1cae	b5 40		lda $40,x			lda 	esType,x
.1cb0	f0 07		beq $1cb9			beq 	_UFIExit
.1cb2	8a		txa				txa
.1cb3	a2 12		ldx #$12		ldx	#18
.1cb5	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.1cb8	aa		tax				tax
.1cb9					_UFIExit:
.1cb9	60		rts				rts
.1cba					UnaryAlloc:
.1cba	e8		inx				inx 								; evaluate memory required
.1cbb	20 77 1a	jsr $1a77			jsr 	EvaluateInteger
.1cbe	20 05 21	jsr $2105			jsr 	CheckRightParen
.1cc1	ca		dex				dex
.1cc2	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1cc4	15 61		ora $61,x			ora 	esInt3+1,x
.1cc6	d0 19		bne $1ce1			bne 	_UABadValue
.1cc8	20 92 20	jsr $2092			jsr 	MInt32False					; zero return.
.1ccb	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1ccd	95 50		sta $50,x			sta 	esInt1,x
.1ccf	a5 0f		lda $0f				lda 	lowMemory
.1cd1	95 48		sta $48,x			sta 	esInt0,x
.1cd3	18		clc				clc 								; add alloc required.
.1cd4	75 49		adc $49,x			adc 	esInt0+1,x
.1cd6	85 0f		sta $0f				sta 	lowMemory
.1cd8	a5 10		lda $10				lda 	lowMemory+1
.1cda	75 51		adc $51,x			adc 	esInt1+1,x
.1cdc	85 10		sta $10				sta 	lowMemory+1
.1cde	b0 01		bcs $1ce1			bcs		_UABadValue 				; overflow definitely bad.
.1ce0	60		rts				rts
.1ce1					_UABadValue:
.1ce1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ce3	20 ce 21	jsr $21ce		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1ce6					UnaryTimer:
.1ce6	20 05 21	jsr $2105			jsr 	CheckRightParen
.1ce9	98		tya				tya
.1cea	48		pha				pha
.1ceb	20 b9 20	jsr $20b9			jsr 	MInt32Zero 					; zero result
.1cee	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1cf0	a2 0a		ldx #$0a		ldx	#10
.1cf2	20 bf 21	jsr $21bf		jsr	deviceHandler
.1cf5	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1cf7	95 48		sta $48,x			sta 	esInt0,x
.1cf9	98		tya				tya
.1cfa	95 50		sta $50,x			sta 	esInt1,x
.1cfc	68		pla				pla
.1cfd	a8		tay				tay
.1cfe	60		rts				rts
.1cff					UnaryInkey:
.1cff	20 05 21	jsr $2105			jsr 	CheckRightParen
.1d02	86 04		stx $04				stx 	temp0
.1d04	a2 04		ldx #$04		ldx	#4
.1d06	20 bf 21	jsr $21bf		jsr	deviceHandler
.1d09	a6 04		ldx $04				ldx 	temp0
.1d0b	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit
.1d0e	60		rts				rts
.1d0f					UnaryGet:
.1d0f	20 05 21	jsr $2105			jsr 	CheckRightParen
.1d12	86 04		stx $04				stx 	temp0
.1d14					_UGLoop:
.1d14	a2 04		ldx #$04		ldx	#4
.1d16	20 bf 21	jsr $21bf		jsr	deviceHandler
.1d19	c9 00		cmp #$00			cmp 	#0
.1d1b	f0 f7		beq $1d14			beq 	_UGLoop
.1d1d	a6 04		ldx $04				ldx 	temp0
.1d1f	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit
.1d22	60		rts				rts
.1d23					UnarySys:
.1d23	20 77 1a	jsr $1a77			jsr 	EvaluateInteger 				; get the address
.1d26	20 05 21	jsr $2105			jsr 	CheckRightParen
.1d29	20 39 11	jsr $1139			jsr 	TOSToTemp0 						; copy to temp0
.1d2c	8a		txa				txa
.1d2d	48		pha				pha
.1d2e	98		tya				tya
.1d2f	48		pha				pha
.1d30	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1d33	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1d36	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1d39	20 48 1d	jsr $1d48			jsr 	_CallTemp0
.1d3c	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1d3e	68		pla				pla
.1d3f	a8		tay				tay
.1d40	68		pla				pla
.1d41	aa		tax				tax
.1d42	a5 0c		lda $0c				lda 	tempShort
.1d44	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit 					; return result.
.1d47	60		rts				rts
.1d48					_CallTemp0:
.1d48	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1d4b					ExecChr:
.1d4b	20 7f 1a	jsr $1a7f			jsr 	EvaluateSmallInteger		; character number
.1d4e	20 05 21	jsr $2105			jsr 	CheckRightParen				; right bracket
.1d51	98		tya				tya
.1d52	48		pha				pha
.1d53	8a		txa				txa 								; A = stack
.1d54	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1d56	a2 00		ldx #$00		ldx	#0
.1d58	20 55 27	jsr $2755		jsr	stringHandler
.1d5b	aa		tax				tax 								; X = stack
.1d5c	68		pla				pla
.1d5d	a8		tay				tay
.1d5e	60		rts				rts
.1d5f					ExecLower:
.1d5f	38		sec				sec
.1d60	b0 01		bcs $1d63			bcs 	ExecUpperLower
.1d62					ExecUpper:
.1d62	18		clc				clc
.1d63					ExecUpperLower:
.1d63	08		php				php 								; save carry
.1d64	20 6c 1a	jsr $1a6c			jsr 	EvaluateString 				; string to stack,X
.1d67	20 05 21	jsr $2105			jsr 	CheckRightParen 			; check closing right bracket.
.1d6a	28		plp				plp 								; restore carry, save Y
.1d6b	98		tya				tya
.1d6c	48		pha				pha
.1d6d	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1d6f	2a		rol a				rol 	a
.1d70	a8		tay				tay 								; now in Y
.1d71	8a		txa				txa 								; do the substring and exit.
.1d72	a2 08		ldx #$08		ldx	#8
.1d74	20 55 27	jsr $2755		jsr	stringHandler
.1d77	aa		tax				tax
.1d78	68		pla				pla
.1d79	a8		tay				tay
.1d7a	60		rts				rts
.1d7b					ExecLeft:
.1d7b	20 6c 1a	jsr $1a6c			jsr 	EvaluateString 				; string to stack,X
.1d7e	20 12 21	jsr $2112			jsr 	CheckComma
.1d81	e8		inx				inx
.1d82	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1d84	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit
.1d87	e8		inx				inx
.1d88	20 7f 1a	jsr $1a7f			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1d8b					ExecSubstring:
.1d8b	ca		dex				dex 								; fix up X
.1d8c	ca		dex				dex
.1d8d	20 05 21	jsr $2105			jsr 	CheckRightParen 			; check closing right bracket.
.1d90	8a		txa				txa 								; do the substring and exit.
.1d91	a2 0a		ldx #$0a		ldx	#10
.1d93	20 55 27	jsr $2755		jsr	stringHandler
.1d96	aa		tax				tax
.1d97	60		rts				rts
.1d98					ExecMid:
.1d98	20 6c 1a	jsr $1a6c			jsr 	EvaluateString 				; string to stack,X
.1d9b	20 12 21	jsr $2112			jsr 	CheckComma
.1d9e	e8		inx				inx
.1d9f	20 7f 1a	jsr $1a7f			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1da2	c9 00		cmp #$00			cmp 	#0
.1da4	f0 15		beq $1dbb			beq 	_EMValue
.1da6	e8		inx				inx
.1da7	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1da9	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit
.1dac	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1dae	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1db0	f0 d9		beq $1d8b			beq 	ExecSubString
.1db2	20 12 21	jsr $2112			jsr 	CheckComma
.1db5	20 7f 1a	jsr $1a7f			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1db8	4c 8b 1d	jmp $1d8b			jmp 	ExecSubString
.1dbb					_EMValue:
.1dbb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1dbd	20 ce 21	jsr $21ce		jsr	errorHandler
.1dc0					ExecRight:
.1dc0	20 6c 1a	jsr $1a6c			jsr 	EvaluateString 				; string to stack,X
.1dc3	20 12 21	jsr $2112			jsr 	CheckComma
.1dc6	e8		inx				inx
.1dc7	20 7f 1a	jsr $1a7f			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1dca	ca		dex				dex
.1dcb	98		tya				tya
.1dcc	48		pha				pha
.1dcd	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1dcf	85 04		sta $04				sta 	temp0
.1dd1	b5 50		lda $50,x			lda 	esInt1,x
.1dd3	85 05		sta $05				sta 	temp0+1
.1dd5	a0 00		ldy #$00			ldy 	#0 							; point to length
.1dd7	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1dd9	18		clc				clc 								; add 1.
.1dda	69 01		adc #$01			adc 	#1
.1ddc	38		sec				sec
.1ddd	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1ddf	f0 02		beq $1de3			beq		_ERMake1 					; if zero, make it 1.
.1de1	b0 02		bcs $1de5			bcs		_EROkay
.1de3					_ERMake1:
.1de3	a9 01		lda #$01			lda 	#1 							; start position.
.1de5					_EROkay:
.1de5	e8		inx				inx 								; set start pos.
.1de6	95 48		sta $48,x			sta 	esInt0,x
.1de8	e8		inx				inx
.1de9	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1deb	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit
.1dee	68		pla				pla
.1def	a8		tay				tay
.1df0	4c 8b 1d	jmp $1d8b			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1df3					MInt32And:
.1df3	b5 48		lda $48,x			lda 	esInt0,x
.1df5	35 49		and $49,x			and 	esInt0+1,x
.1df7	95 48		sta $48,x			sta 	esInt0,x
.1df9	b5 50		lda $50,x			lda 	esInt1,x
.1dfb	35 51		and $51,x			and 	esInt1+1,x
.1dfd	95 50		sta $50,x			sta 	esInt1,x
.1dff	b5 58		lda $58,x			lda 	esInt2,x
.1e01	35 59		and $59,x			and 	esInt2+1,x
.1e03	95 58		sta $58,x			sta 	esInt2,x
.1e05	b5 60		lda $60,x			lda 	esInt3,x
.1e07	35 61		and $61,x			and 	esInt3+1,x
.1e09	95 60		sta $60,x			sta 	esInt3,x
.1e0b	60		rts				rts
.1e0c					MInt32Or:
.1e0c	b5 48		lda $48,x			lda 	esInt0,x
.1e0e	15 49		ora $49,x			ora 	esInt0+1,x
.1e10	95 48		sta $48,x			sta 	esInt0,x
.1e12	b5 50		lda $50,x			lda 	esInt1,x
.1e14	15 51		ora $51,x			ora 	esInt1+1,x
.1e16	95 50		sta $50,x			sta 	esInt1,x
.1e18	b5 58		lda $58,x			lda 	esInt2,x
.1e1a	15 59		ora $59,x			ora 	esInt2+1,x
.1e1c	95 58		sta $58,x			sta 	esInt2,x
.1e1e	b5 60		lda $60,x			lda 	esInt3,x
.1e20	15 61		ora $61,x			ora 	esInt3+1,x
.1e22	95 60		sta $60,x			sta 	esInt3,x
.1e24	60		rts				rts
.1e25					MInt32Xor:
.1e25	b5 48		lda $48,x			lda 	esInt0,x
.1e27	55 49		eor $49,x			eor 	esInt0+1,x
.1e29	95 48		sta $48,x			sta 	esInt0,x
.1e2b	b5 50		lda $50,x			lda 	esInt1,x
.1e2d	55 51		eor $51,x			eor 	esInt1+1,x
.1e2f	95 50		sta $50,x			sta 	esInt1,x
.1e31	b5 58		lda $58,x			lda 	esInt2,x
.1e33	55 59		eor $59,x			eor 	esInt2+1,x
.1e35	95 58		sta $58,x			sta 	esInt2,x
.1e37	b5 60		lda $60,x			lda 	esInt3,x
.1e39	55 61		eor $61,x			eor 	esInt3+1,x
.1e3b	95 60		sta $60,x			sta 	esInt3,x
.1e3d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1e3e					MInt32Compare:
.1e3e	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1e40	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e42	d0 13		bne $1e57			bne 	MInt32Compare2
.1e44	b5 50		lda $50,x			lda 	esInt1,x
.1e46	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1e48	d0 0d		bne $1e57			bne 	MInt32Compare2
.1e4a	b5 58		lda $58,x			lda 	esInt2,x
.1e4c	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1e4e	d0 07		bne $1e57			bne 	MInt32Compare2
.1e50	b5 60		lda $60,x			lda 	esInt3,x
.1e52	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1e54	d0 01		bne $1e57			bne 	MInt32Compare2
.1e56	60		rts				rts
.1e57					MInt32Compare2:
.1e57	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1e59	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1e5b	b5 50		lda $50,x			lda		esInt1,x
.1e5d	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e5f	b5 58		lda $58,x			lda		esInt2,x
.1e61	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e63	b5 60		lda $60,x			lda		esInt3,x
.1e65	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e67	50 02		bvc $1e6b			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1e69	49 80		eor #$80			eor 	#$80
.1e6b					_I32LNoOverflow
.1e6b	30 03		bmi $1e70			bmi 	MInt32CLess					; if -ve then return $FF
.1e6d	a9 01		lda #$01			lda 	#$01						; else return $01
.1e6f	60		rts				rts
.1e70					MInt32CLess:
.1e70	a9 ff		lda #$ff			lda 	#$FF
.1e72	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1e73					MInt32SDivide:
.1e73	98		tya				tya  								; save Y, which is the count of negations
.1e74	48		pha				pha
.1e75	a0 00		ldy #$00			ldy 	#0 							; zero count
.1e77	20 8f 1e	jsr $1e8f			jsr 	_MInt32SRemSign 			; unsign TOS
.1e7a	e8		inx				inx 								; unsign TOS+1
.1e7b	20 8f 1e	jsr $1e8f			jsr 	_MInt32SRemSign
.1e7e	ca		dex				dex
.1e7f	98		tya				tya 								; save sign count on stack
.1e80	48		pha				pha
.1e81	20 98 1e	jsr $1e98			jsr 	MInt32UDivide 				; unsigned division
.1e84	68		pla				pla 								; get sign count back
.1e85	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1e87	f0 03		beq $1e8c			beq 	_I32SNoNeg
.1e89	20 4c 20	jsr $204c			jsr 	MInt32Negate
.1e8c					_I32SNoNeg:
.1e8c	68		pla				pla 								; restoe Y and exit
.1e8d	a8		tay				tay
.1e8e	60		rts				rts
.1e8f					_MInt32SRemSign:
.1e8f	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1e91	10 04		bpl $1e97			bpl 	_MInt32SRSExit
.1e93	c8		iny				iny 								; increment the sign count
.1e94	20 4c 20	jsr $204c			jsr 	MInt32Negate 				; negate the value.
.1e97					_MInt32SRSExit:
.1e97	60		rts				rts
.1e98					MInt32UDivide:
.1e98	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1e9a	15 51		ora $51,x			ora 	esInt1+1,x
.1e9c	15 52		ora $52,x			ora 	esInt1+2,x
.1e9e	15 53		ora $53,x			ora 	esInt1+3,x
.1ea0	f0 4a		beq $1eec			beq 	_MInt32DZero
.1ea2	e8		inx				inx 								; clear A
.1ea3	e8		inx				inx
.1ea4	20 92 20	jsr $2092			jsr 	MInt32False
.1ea7	ca		dex				dex
.1ea8	ca		dex				dex
.1ea9	98		tya				tya 								; save Y on the stack
.1eaa	48		pha				pha
.1eab	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1ead					_MInt32UDLoop:
.1ead	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1eaf	36 50		rol $50,x			rol 	esInt1,x
.1eb1	36 58		rol $58,x			rol 	esInt2,x
.1eb3	36 60		rol $60,x			rol 	esInt3,x
.1eb5	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1eb7	36 52		rol $52,x			rol 	esInt1+2,x
.1eb9	36 5a		rol $5a,x			rol 	esInt2+2,x
.1ebb	36 62		rol $62,x			rol 	esInt3+2,x
.1ebd	38		sec				sec 								; calculate A-M saving result on the stack
.1ebe	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1ec0	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1ec2	48		pha				pha
.1ec3	b5 52		lda $52,x			lda 	esInt1+2,x
.1ec5	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1ec7	48		pha				pha
.1ec8	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1eca	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1ecc	48		pha				pha
.1ecd	b5 62		lda $62,x			lda 	esInt3+2,x
.1ecf	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1ed1	90 10		bcc $1ee3			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1ed3	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1ed5	68		pla				pla
.1ed6	95 5a		sta $5a,x			sta 	esInt2+2,x
.1ed8	68		pla				pla
.1ed9	95 52		sta $52,x			sta 	esInt1+2,x
.1edb	68		pla				pla
.1edc	95 4a		sta $4a,x			sta 	esInt0+2,x
.1ede	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1ee0	4c e6 1e	jmp $1ee6			jmp 	_MInt32Next 					; do the next iteration
.1ee3					_MInt32NoSubtract:
.1ee3	68		pla				pla
.1ee4	68		pla				pla
.1ee5	68		pla				pla
.1ee6					_MInt32Next:
.1ee6	88		dey				dey 								; do this 32 times.
.1ee7	d0 c4		bne $1ead			bne 	_MInt32UDLoop
.1ee9	68		pla				pla 								; restore Y and exit
.1eea	a8		tay				tay
.1eeb	60		rts				rts
.1eec					_MInt32DZero:
.1eec	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1eee	20 ce 21	jsr $21ce		jsr	errorHandler
.1ef1					MInt32Modulus:
.1ef1	20 98 1e	jsr $1e98			jsr 	MInt32UDivide 				; do the division.
.1ef4	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1ef6	95 60		sta $60,x			sta 	esInt3,x
.1ef8	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1efa	95 58		sta $58,x			sta 	esInt2,x
.1efc	b5 52		lda $52,x			lda 	esInt1+2,x
.1efe	95 50		sta $50,x			sta 	esInt1,x
.1f00	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1f02	95 48		sta $48,x			sta 	esInt0,x
.1f04	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af6					fs32Length:
>0af6							.fill 	1
.1f05					MInt32FromString:
.1f05	85 0c		sta $0c				sta 	tempShort 					; save base
.1f07	98		tya				tya
.1f08	48		pha				pha
.1f09	a0 00		ldy #$00			ldy 	#0 							; get length
.1f0b	b1 04		lda ($04),y			lda 	(temp0),y
.1f0d	8d f6 0a	sta $0af6			sta 	fs32Length
.1f10	f0 65		beq $1f77			beq 	_I32FSFail2					; fail if length zero.
.1f12	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1f14	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1f16	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1f18	d0 09		bne $1f23			bne 	_I32FSNotNegative
.1f1a	ad f6 0a	lda $0af6			lda 	fs32Length 					; get length back.
.1f1d	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1f1f	f0 56		beq $1f77			beq 	_I32FSFail2
.1f21	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1f23					_I32FSNotNegative:
.1f23	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1f25	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1f27	d0 02		bne $1f2b			bne 	_I32FSNN2
.1f29	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1f2b					_I32FSNN2:
.1f2b	48		pha				pha 								; save base + final sign on stack.
.1f2c	20 92 20	jsr $2092			jsr 	MInt32False 				; zero the return value.
.1f2f					_I32FSMainLoop:
.1f2f	68		pla				pla 								; get the base back into tempShort
.1f30	48		pha				pha
.1f31	29 7f		and #$7f			and 	#$7F
.1f33	85 0c		sta $0c				sta 	tempShort
.1f35	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1f37	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1f39	90 02		bcc $1f3d			bcc 	_I32FSNotLC
.1f3b	e9 20		sbc #$20			sbc 	#32
.1f3d					_I32FSNotLC:
.1f3d	38		sec				sec 								; subtract 48 (ASCII "0")
.1f3e	e9 30		sbc #$30			sbc 	#"0"
.1f40	90 34		bcc $1f76			bcc 	_I32FSFail 					; nothing more to do.
.1f42	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1f44	90 06		bcc $1f4c			bcc 	_I32FSValidate
.1f46	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1f48	90 2c		bcc $1f76			bcc 	_I32FSFail
.1f4a	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1f4c					_I32FSValidate:
.1f4c	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1f4e	b0 26		bcs $1f76			bcs 	_I32FSFail 					; sorry, too large for this base.
.1f50	48		pha				pha 								; save the new digit value.
.1f51	e8		inx				inx 								; put base into next slot.
.1f52	a5 0c		lda $0c				lda 	tempShort
.1f54	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit
.1f57	ca		dex				dex
.1f58	20 af 1f	jsr $1faf			jsr 	MInt32Multiply 				; multiply current by the base
.1f5b	e8		inx				inx
.1f5c	68		pla				pla  								; put additive into next slot
.1f5d	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit
.1f60	ca		dex				dex
.1f61	20 7b 1f	jsr $1f7b			jsr 	MInt32Add 					; and add it
.1f64	c8		iny				iny 								; look at next character
.1f65	cc f6 0a	cpy $0af6			cpy 	fs32Length 					; until > length.
.1f68	f0 c5		beq $1f2f			beq 	_I32FSMainLoop
.1f6a	90 c3		bcc $1f2f			bcc 	_I32FSMainLoop
.1f6c					_I32FSDone:
.1f6c	68		pla				pla 								; get base/final sign back
.1f6d	10 03		bpl $1f72			bpl 	_I32FSNN3
.1f6f	20 4c 20	jsr $204c			jsr 	MInt32Negate 				; negate the result.
.1f72					_I32FSNN3:
.1f72	68		pla				pla
.1f73	a8		tay				tay
.1f74	38		sec				sec
.1f75	60		rts				rts
.1f76					_I32FSFail:
.1f76	68		pla				pla
.1f77					_I32FSFail2:
.1f77	68		pla				pla
.1f78	a8		tay				tay
.1f79	18		clc				clc
.1f7a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1f7b					MInt32Add:
.1f7b	18		clc				clc
.1f7c	b5 48		lda $48,x			lda 	esInt0,x
.1f7e	75 49		adc $49,x			adc 	esInt0+1,x
.1f80	95 48		sta $48,x			sta 	esInt0,x
.1f82	b5 50		lda $50,x			lda 	esInt1,x
.1f84	75 51		adc $51,x			adc 	esInt1+1,x
.1f86	95 50		sta $50,x			sta 	esInt1,x
.1f88	b5 58		lda $58,x			lda 	esInt2,x
.1f8a	75 59		adc $59,x			adc 	esInt2+1,x
.1f8c	95 58		sta $58,x			sta 	esInt2,x
.1f8e	b5 60		lda $60,x			lda 	esInt3,x
.1f90	75 61		adc $61,x			adc 	esInt3+1,x
.1f92	95 60		sta $60,x			sta 	esInt3,x
.1f94	60		rts				rts
.1f95					MInt32Sub:
.1f95	38		sec				sec
.1f96	b5 48		lda $48,x			lda 	esInt0,x
.1f98	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1f9a	95 48		sta $48,x			sta 	esInt0,x
.1f9c	b5 50		lda $50,x			lda 	esInt1,x
.1f9e	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1fa0	95 50		sta $50,x			sta 	esInt1,x
.1fa2	b5 58		lda $58,x			lda 	esInt2,x
.1fa4	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1fa6	95 58		sta $58,x			sta 	esInt2,x
.1fa8	b5 60		lda $60,x			lda 	esInt3,x
.1faa	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1fac	95 60		sta $60,x			sta 	esInt3,x
.1fae	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1faf					MInt32Multiply:
.1faf	e8		inx				inx 								; copy 2nd -> 3rd
.1fb0	20 d5 1f	jsr $1fd5			jsr 	MInt32CopyUp
.1fb3	ca		dex				dex
.1fb4	20 d5 1f	jsr $1fd5			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1fb7	20 92 20	jsr $2092			jsr 	MInt32False 					; zero 1st.
.1fba					_I32Loop:
.1fba	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1fbc	29 01		and #$01			and 	#1
.1fbe	f0 03		beq $1fc3			beq 	_I32NoAdd 					; if set
.1fc0	20 7b 1f	jsr $1f7b			jsr 	MInt32Add 					; add 2nd to 1st.
.1fc3					_I32NoAdd:
.1fc3	e8		inx				inx 								; shift 2nd left
.1fc4	20 a7 20	jsr $20a7			jsr 	MInt32ShiftLeft
.1fc7	e8		inx				inx  								; shift 3rd right
.1fc8	20 b0 20	jsr $20b0			jsr 	MInt32ShiftRight
.1fcb	20 b9 20	jsr $20b9			jsr 	MInt32Zero 					; check if zero.
.1fce	08		php				php 								; save status bits
.1fcf	ca		dex				dex 	 							; point back to 1st
.1fd0	ca		dex				dex
.1fd1	28		plp				plp 								; get status bits
.1fd2	d0 e6		bne $1fba			bne 	_I32Loop 					; if non-zero keep going.
.1fd4	60		rts				rts
.1fd5					MInt32CopyUp:
.1fd5	b5 48		lda $48,x			lda 	esInt0,x
.1fd7	95 49		sta $49,x			sta 	esInt0+1,x
.1fd9	b5 50		lda $50,x			lda 	esInt1,x
.1fdb	95 51		sta $51,x			sta 	esInt1+1,x
.1fdd	b5 58		lda $58,x			lda 	esInt2,x
.1fdf	95 59		sta $59,x			sta 	esInt2+1,x
.1fe1	b5 60		lda $60,x			lda 	esInt3,x
.1fe3	95 61		sta $61,x			sta 	esInt3+1,x
.1fe5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af7					MCharCount:	.fill 	1						; count of converted characters
.1fe6					MLInt32ToString:
.1fe6	aa		tax				tax									; module passes stack in A, base in Y
.1fe7	98		tya				tya
.1fe8					MInt32ToString:
.1fe8	48		pha				pha 								; save base
.1fe9	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1feb	a9 00		lda #$00			lda 	#0
.1fed	8d f7 0a	sta $0af7			sta 	MCharCount 					; clear character count to 0
.1ff0	98		tya				tya
.1ff1	48		pha				pha
.1ff2	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1ff4	10 10		bpl $2006			bpl 	_I32TSUnsigned
.1ff6	48		pha				pha 								; save base on stack.
.1ff7	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1ff9	10 08		bpl $2003			bpl 	_I32TSNoFlip
.1ffb	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1ffd	20 39 20	jsr $2039			jsr 	MI32WriteCharacter
.2000	20 4c 20	jsr $204c			jsr 	MInt32Negate 				; negate the value.
.2003					_I32TSNoFlip:
.2003	68		pla				pla 								; get the base back
.2004	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2006					_I32TSUnsigned:
.2006	20 14 20	jsr $2014			jsr 	MI32DivideWrite 			; recursive code to output string.
.2009	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.200b	ad f7 0a	lda $0af7			lda 	MCharCount
.200e	91 04		sta ($04),y			sta 	(temp0),y
.2010	68		pla				pla
.2011	a8		tay				tay
.2012	68		pla				pla
.2013	60		rts				rts
.2014					MI32DivideWrite:
.2014	48		pha				pha 								; save the divisor/base
.2015	e8		inx				inx 								; write in the dividing position.
.2016	20 a1 20	jsr $20a1			jsr 	MInt32Set8Bit
.2019	ca		dex				dex
.201a	20 98 1e	jsr $1e98			jsr 	MInt32UDivide 				; divide number by base.
.201d	68		pla				pla 								; get the base into Y
.201e	a8		tay				tay
.201f	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2021	48		pha				pha
.2022	20 b9 20	jsr $20b9			jsr 	MInt32Zero 					; is the result zero ?
.2025	f0 04		beq $202b			beq 	_I32NoRecurse 				; if so, don't recurse.
.2027	98		tya				tya 								; put base into A
.2028	20 14 20	jsr $2014			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.202b					_I32NoRecurse:
.202b	68		pla				pla 								; get the remainder back
.202c	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.202e	90 02		bcc $2032			bcc 	_I32NotHex
.2030	69 06		adc #$06			adc 	#7-1
.2032					_I32NotHex:
.2032	18		clc				clc 								; make it ASCII
.2033	69 30		adc #$30			adc 	#48
.2035	20 39 20	jsr $2039			jsr 	MI32WriteCharacter 			; write the character out
.2038	60		rts				rts 								; and exit.
.2039					MI32WriteCharacter:
.2039	ee f7 0a	inc $0af7			inc 	MCharCount 					; bump count (space for leading count)
.203c	ac f7 0a	ldy $0af7			ldy 	MCharCount 					; get position
.203f	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.2041	c8		iny				iny
.2042	a9 00		lda #$00			lda 	#0
.2044	91 04		sta ($04),y			sta 	(temp0),y
.2046	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af8					MSeed32:	.fill 	4							; random number seed.
.2047					MInt32Absolute:
.2047	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2049	30 01		bmi $204c			bmi 	MInt32Negate
.204b	60		rts				rts
.204c					MInt32Negate:
.204c	38		sec				sec
.204d	a9 00		lda #$00			lda 	#0
.204f	f5 48		sbc $48,x			sbc 	esInt0,x
.2051	95 48		sta $48,x			sta 	esInt0,x
.2053	a9 00		lda #$00			lda 	#0
.2055	f5 50		sbc $50,x			sbc 	esInt1,x
.2057	95 50		sta $50,x			sta 	esInt1,x
.2059	a9 00		lda #$00			lda 	#0
.205b	f5 58		sbc $58,x			sbc 	esInt2,x
.205d	95 58		sta $58,x			sta 	esInt2,x
.205f	a9 00		lda #$00			lda 	#0
.2061	f5 60		sbc $60,x			sbc 	esInt3,x
.2063	95 60		sta $60,x			sta 	esInt3,x
.2065	60		rts				rts
.2066					MInt32Not:
.2066	b5 48		lda $48,x			lda 	esInt0,x
.2068	49 ff		eor #$ff			eor 	#$FF
.206a	95 48		sta $48,x			sta 	esInt0,x
.206c	b5 50		lda $50,x			lda 	esInt1,x
.206e	49 ff		eor #$ff			eor 	#$FF
.2070	95 50		sta $50,x			sta 	esInt1,x
.2072	b5 58		lda $58,x			lda 	esInt2,x
.2074	49 ff		eor #$ff			eor 	#$FF
.2076	95 58		sta $58,x			sta 	esInt2,x
.2078	b5 60		lda $60,x			lda 	esInt3,x
.207a	49 ff		eor #$ff			eor 	#$FF
.207c	95 60		sta $60,x			sta 	esInt3,x
.207e	60		rts				rts
.207f					MInt32Sign:
.207f	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2081	30 0b		bmi $208e			bmi 	MInt32True 					; if set return -1 (true)
.2083	20 b9 20	jsr $20b9			jsr 	MInt32Zero 					; is it zero ?
.2086	f0 0a		beq $2092			beq 	MInt32False 					; if zero return 0 (false)
.2088	20 92 20	jsr $2092			jsr 	MInt32False 					; > 0 return 1
.208b	f6 48		inc $48,x			inc 	esInt0,x
.208d	60		rts				rts
.208e					MInt32True:
.208e	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2090	d0 02		bne $2094			bne 	MInt32WriteAll
.2092					MInt32False:
.2092	a9 00		lda #$00			lda 	#0
.2094					MInt32WriteAll:
.2094	95 48		sta $48,x			sta 	esInt0,x
.2096					MInt32Write123:
.2096	95 50		sta $50,x			sta 	esInt1,x
.2098	95 58		sta $58,x			sta 	esInt2,x
.209a	95 60		sta $60,x			sta 	esInt3,x
.209c	a9 00		lda #$00			lda 	#$00						; and make it an integer
.209e	95 40		sta $40,x			sta 	esType,x
.20a0	60		rts				rts
.20a1					MInt32Set8Bit:
.20a1	95 48		sta $48,x			sta 	esInt0,x
.20a3	a9 00		lda #$00			lda 	#0
.20a5	f0 ef		beq $2096			beq		MInt32Write123
.20a7					MInt32ShiftLeft:
.20a7	16 48		asl $48,x			asl 	esInt0,x
.20a9	36 50		rol $50,x			rol	 	esInt1,x
.20ab	36 58		rol $58,x			rol	 	esInt2,x
.20ad	36 60		rol $60,x			rol	 	esInt3,x
.20af	60		rts				rts
.20b0					MInt32ShiftRight:
.20b0	56 60		lsr $60,x			lsr 	esInt3,x
.20b2	76 58		ror $58,x			ror 	esInt2,x
.20b4	76 50		ror $50,x			ror 	esInt1,x
.20b6	76 48		ror $48,x			ror 	esInt0,x
.20b8	60		rts				rts
.20b9					MInt32Zero:
.20b9	b5 48		lda $48,x			lda 	esInt0,x
.20bb	15 50		ora $50,x			ora 	esInt1,x
.20bd	15 58		ora $58,x			ora 	esInt2,x
.20bf	15 60		ora $60,x			ora 	esInt3,x
.20c1	60		rts				rts
.20c2					MInt32Random:
.20c2	98		tya				tya
.20c3	48		pha				pha
.20c4	a0 07		ldy #$07			ldy 	#7
.20c6	ad f8 0a	lda $0af8			lda 	MSeed32+0
.20c9	d0 03		bne $20ce			bne 	_Random1
.20cb	a8		tay				tay
.20cc	a9 aa		lda #$aa			lda		#$AA
.20ce					_Random1:
.20ce	0a		asl a				asl 	a
.20cf	2e f9 0a	rol $0af9			rol 	MSeed32+1
.20d2	2e fa 0a	rol $0afa			rol 	MSeed32+2
.20d5	2e fb 0a	rol $0afb			rol 	MSeed32+3
.20d8	90 02		bcc $20dc			bcc 	_Random2
.20da	49 c5		eor #$c5			eor 	#$C5
.20dc					_Random2:
.20dc	88		dey				dey
.20dd	d0 ef		bne $20ce			bne 	_Random1
.20df	8d f8 0a	sta $0af8			sta 	MSeed32+0
.20e2	95 48		sta $48,x			sta 	esInt0,x
.20e4	ad f9 0a	lda $0af9			lda 	MSeed32+1
.20e7	95 50		sta $50,x			sta 	esInt1,x
.20e9	ad fa 0a	lda $0afa			lda 	MSeed32+2
.20ec	95 58		sta $58,x			sta 	esInt2,x
.20ee	ad fb 0a	lda $0afb			lda 	MSeed32+3
.20f1	95 60		sta $60,x			sta 	esInt3,x
.20f3	68		pla				pla
.20f4	a8		tay				tay
.20f5	a9 00		lda #$00			lda 	#0
.20f7	95 40		sta $40,x			sta 	esType,x
.20f9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.20fa					CheckToken:
.20fa	d1 02		cmp ($02),y			cmp 	(codePtr),y
.20fc	d0 02		bne $2100			bne 	_CTError
.20fe	c8		iny				iny
.20ff	60		rts				rts
.2100					_CTError:
.2100	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2102	20 ce 21	jsr $21ce		jsr	errorHandler
.2105					CheckRightParen:
.2105	b1 02		lda ($02),y			lda 	(codePtr),y
.2107	c8		iny				iny
.2108	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.210a	d0 01		bne $210d			bne 	_CRPError
.210c	60		rts				rts
.210d					_CRPError:
.210d	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.210f	20 ce 21	jsr $21ce		jsr	errorHandler
.2112					CheckComma:
.2112	b1 02		lda ($02),y			lda 	(codePtr),y
.2114	c8		iny				iny
.2115	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.2117	d0 01		bne $211a			bne 	_CCError
.2119	60		rts				rts
.211a					_CCError:
.211a	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.211c	20 ce 21	jsr $21ce		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2b9e					ScanForward:
.2b9e	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2ba0	86 07		stx $07				stx 	temp1+1
.2ba2	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2ba4	85 08		sta $08				sta 	temp2
.2ba6	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2ba8	c8		iny				iny
.2ba9	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.2bab	d0 08		bne $2bb5			bne 	_SFNoCheck 					; if so, check token against entered values.
.2bad	c5 06		cmp $06				cmp 	temp1
.2baf	f0 24		beq $2bd5			beq 	_SFExit
.2bb1	c5 07		cmp $07				cmp 	temp1+1
.2bb3	f0 20		beq $2bd5			beq 	_SFExit
.2bb5					_SFNoCheck:
.2bb5	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2bb7	90 ed		bcc $2ba6			bcc 	_SFLoop
.2bb9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2bbb	90 19		bcc $2bd6			bcc 	_SFSpecials
.2bbd	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2bbf	90 e5		bcc $2ba6			bcc 	_SFLoop
.2bc1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2bc3	b0 e1		bcs $2ba6			bcs 	_SFLoop
.2bc5	aa		tax				tax  								; token in X, and look up the adjuster.
.2bc6	bd 5f 1a	lda $1a5f,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2bc9	38		sec				sec 								; convert to an offset
.2bca	e9 81		sbc #$81			sbc 	#$81
.2bcc	18		clc				clc 								; add to depth
.2bcd	65 08		adc $08				adc 	temp2
.2bcf	85 08		sta $08				sta 	temp2
.2bd1	10 d3		bpl $2ba6			bpl 	_SFLoop 					; +ve okay to continue
.2bd3	30 2a		bmi $2bff			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2bd5	60		rts		_SFExit:rts
.2bd6					_SFSpecials:
.2bd6	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2bd8	f0 14		beq $2bee			beq 	_SFNextLine
.2bda	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2bdc	f0 26		beq $2c04			beq 	_SFFloatSkip
.2bde	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2be0	f0 04		beq $2be6			beq 	_SFSkipString
.2be2	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2be3	4c a6 2b	jmp $2ba6			jmp 	_SFLoop 					; token.
.2be6					_SFSkipString:
.2be6	98		tya				tya
.2be7	38		sec				sec
.2be8	71 02		adc ($02),y			adc 	(codePtr),y
.2bea	a8		tay				tay
.2beb	4c a6 2b	jmp $2ba6			jmp 	_SFLoop
.2bee					_SFNextLine:
.2bee	a0 00		ldy #$00			ldy 	#0 							; get offset
.2bf0	b1 02		lda ($02),y			lda 	(codePtr),y
.2bf2	18		clc				clc 								; add to code pointer.
.2bf3	65 02		adc $02				adc 	codePtr
.2bf5	85 02		sta $02				sta 	codePtr
.2bf7	90 02		bcc $2bfb			bcc		_SFNLNoCarry
.2bf9	e6 03		inc $03				inc 	codePtr+1
.2bfb					_SFNLNoCarry:
.2bfb	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2bfd	d0 a7		bne $2ba6			bne		_SFLoop 					; no go round again
.2bff					_SFError:
.2bff	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2c01	20 ce 21	jsr $21ce		jsr	errorHandler
.2c04					_SFFloatSkip:
.2c04	4c 26 14	jmp $1426			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.211f					RSReset:
.211f	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2121	85 78		sta $78				sta 	rsPointer
.2123	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.2125	85 79		sta $79				sta 	1+(rsPointer)
.2127	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.2129	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.212c	60		rts				rts
.212d					RSClaim:
.212d	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.212f	48		pha				pha 								; save marker on stack.
.2130	8a		txa				txa 								; get bytes required.
.2131	38		sec				sec
.2132	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2134	65 78		adc $78				adc 	rsPointer
.2136	85 78		sta $78				sta 	rsPointer
.2138	a5 79		lda $79				lda 	rsPointer+1
.213a	69 ff		adc #$ff			adc 	#$FF
.213c	85 79		sta $79				sta 	rsPointer+1
.213e	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.2140	90 08		bcc $214a			bcc 	_RSCOverflow
.2142	68		pla				pla 								; get marker back
.2143	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.2145	91 78		sta ($78),y			sta 	(rsPointer),y
.2147	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.2149	60		rts				rts
.214a					_RSCOverflow:
.214a	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.214c	20 ce 21	jsr $21ce		jsr	errorHandler
.214f					RSFree:
.214f	18		clc				clc
.2150	65 78		adc $78				adc 	rsPointer
.2152	85 78		sta $78				sta 	rsPointer
.2154	90 02		bcc $2158			bcc 	_RSFExit
.2156	e6 79		inc $79				inc 	rsPointer+1
.2158					_RSFExit:
.2158	60		rts				rts
.2159					RSSavePosition:
.2159	84 0c		sty $0c				sty 	tempShort 					; save Y position
.215b	a8		tay				tay 								; this is where we write it.
.215c	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.215e	91 78		sta ($78),y			sta 	(rsPointer),y
.2160	c8		iny				iny
.2161	a5 03		lda $03				lda 	codePtr+1
.2163	91 78		sta ($78),y			sta 	(rsPointer),y
.2165	c8		iny				iny
.2166	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.2168	91 78		sta ($78),y			sta 	(rsPointer),y
.216a	a8		tay				tay 								; fix Y back again to original value
.216b	60		rts				rts
.216c					RSLoadPosition:
.216c	a8		tay				tay
.216d	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.216f	85 02		sta $02				sta 	codePtr
.2171	c8		iny				iny
.2172	b1 78		lda ($78),y			lda 	(rsPointer),y
.2174	85 03		sta $03				sta 	codePtr+1
.2176	c8		iny				iny
.2177	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.2179	a8		tay				tay 								; to Y
.217a	60		rts				rts

;******  Return to file: main/main.asm

.217b					mainHandler:
.217b	7c 7e 21	jmp ($217e,x)			jmp 	(mainVectors,x)
.217e					mainVectors:
>217e	05 21					.word CheckRightParen      ; index 0
>2180	92 1a					.word LinkEvaluate         ; index 2
>2182	98 1a					.word LinkEvaluateInteger  ; index 4
>2184	9e 1a					.word LinkEvaluateSmallInt ; index 6
>2186	e6 1f					.word MLInt32ToString      ; index 8
>2188	08 13					.word PrintString          ; index 10

;******  Return to file: basic.asm

.218a					section_end_main:
.218a					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.218a					assemblerHandler:
.218a	7c 8d 21	jmp ($218d,x)			jmp 	(assemblerVectors,x)
.218d					assemblerVectors:

;******  Return to file: basic.asm

.218d					section_end_assembler:
.218d					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.218d					IOInitialise:
.218d	a9 0f		lda #$0f			lda 	#15
.218f	20 a3 21	jsr $21a3			jsr 	IOPrintChar
.2192	60		rts				rts
.2193					IONewLine:
.2193	48		pha				pha
.2194	a9 0d		lda #$0d			lda 	#13
.2196	20 a3 21	jsr $21a3			jsr 	IOPrintChar
.2199	68		pla				pla
.219a	60		rts				rts
.219b					IOTab:
.219b	48		pha				pha
.219c	a9 20		lda #$20			lda 	#32
.219e	20 a3 21	jsr $21a3			jsr 	IOPrintChar
.21a1	68		pla				pla
.21a2	60		rts				rts
.21a3					IOPrintChar:
.21a3	aa		tax				tax
.21a4	5a		phy				phy
.21a5	8a		txa				txa
.21a6	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.21a9	7a		ply				ply
.21aa	60		rts				rts
.21ab					IOInkey:
.21ab	98		tya				tya
.21ac	48		pha				pha
.21ad	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.21b0	85 0c		sta $0c				sta 	tempShort
.21b2	68		pla				pla
.21b3	a8		tay				tay
.21b4	a5 0c		lda $0c				lda 	tempShort
.21b6	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.21b7					IOReadTimer:
.21b7	20 de ff	jsr $ffde			jsr 	$FFDE
.21ba	48		pha				pha
.21bb	8a		txa				txa
.21bc	a8		tay				tay
.21bd	68		pla				pla
.21be	60		rts				rts

;******  Return to file: device/device.asm

.21bf					deviceHandler:
.21bf	7c c2 21	jmp ($21c2,x)			jmp 	(deviceVectors,x)
.21c2					deviceVectors:
>21c2	93 21					.word IONewLine            ; index 0
>21c4	8d 21					.word IOInitialise         ; index 2
>21c6	ab 21					.word IOInkey              ; index 4
>21c8	a3 21					.word IOPrintChar          ; index 6
>21ca	9b 21					.word IOTab                ; index 8
>21cc	b7 21					.word IOReadTimer          ; index 10

;******  Return to file: basic.asm

.21ce					section_end_device:
.21ce					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.21ce					ErrorHandler:
.21ce	a9 37		lda #$37			lda 	#(ErrorTextList) & $FF
.21d0	85 04		sta $04				sta 	temp0
.21d2	a9 22		lda #$22			lda 	#(ErrorTextList) >> 8
.21d4	85 05		sta $05				sta 	1+(temp0)
.21d6	ca		dex		_EHFind:dex
.21d7	f0 10		beq $21e9			beq 	_EHFound
.21d9	a0 00		ldy #$00			ldy 	#0 							; goto next text message
.21db	38		sec				sec
.21dc	a5 04		lda $04				lda 	temp0
.21de	71 04		adc ($04),y			adc 	(temp0),y
.21e0	85 04		sta $04				sta 	temp0
.21e2	90 f2		bcc $21d6			bcc 	_EHFind
.21e4	e6 05		inc $05				inc 	temp0+1
.21e6	4c d6 21	jmp $21d6			jmp 	_EHFind
.21e9					_EHFound:
.21e9	a2 0a		ldx #$0a		ldx	#10
.21eb	20 7b 21	jsr $217b		jsr	mainHandler
.21ee	a0 00		ldy #$00			ldy 	#0 							; in a line ?
.21f0	b1 02		lda ($02),y			lda 	(codePtr),y
.21f2	f0 0d		beq $2201			beq 	_EHNoLine
.21f4	a9 2d		lda #$2d			lda 	#(EHAtMsg) & $FF
.21f6	85 04		sta $04				sta 	temp0
.21f8	a9 22		lda #$22			lda 	#(EHAtMsg) >> 8
.21fa	85 05		sta $05				sta 	1+(temp0)
.21fc	a2 0a		ldx #$0a		ldx	#10
.21fe	20 7b 21	jsr $217b		jsr	mainHandler
.2201					_EHNoLine:
.2201	a0 01		ldy #$01			ldy 	#1
.2203	a2 00		ldx #$00			ldx 	#0
.2205	b1 02		lda ($02),y			lda 	(codePtr),y
.2207	95 48		sta $48,x			sta 	esInt0,x
.2209	c8		iny				iny
.220a	b1 02		lda ($02),y			lda 	(codePtr),y
.220c	95 50		sta $50,x			sta 	esInt1,x
.220e	a9 00		lda #$00			lda 	#0
.2210	95 58		sta $58,x			sta 	esInt2,x
.2212	95 60		sta $60,x			sta 	esInt3,x
.2214	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2216	85 04		sta $04				sta 	temp0
.2218	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.221a	85 05		sta $05				sta 	1+(temp0)
.221c	a0 0a		ldy #$0a			ldy 	#10
.221e	a9 00		lda #$00			lda 	#0
.2220	a2 08		ldx #$08		ldx	#8
.2222	20 7b 21	jsr $217b		jsr	mainHandler
.2225	a2 0a		ldx #$0a		ldx	#10
.2227	20 7b 21	jsr $217b		jsr	mainHandler
.222a	4c 2a 22	jmp $222a	_EHHalt:jmp 	_EHHalt
.222d					EHAtMsg:
>222d	09 20 61 74 20 6c 69 6e				.text 	9," at line "
>2235	65 20

;******  Processing file: error/../generated/errortext.inc

.2237					ErrorTextList:
>2237	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>223f	20 6e 6f 74 20 50 72 65 73 65 6e 74
>224b	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>2253	45 72 72 6f 72
>2258	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>2260	64 69 73 61 62 6c 65 64
>2268	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>2270	6f 6e 20 66 61 69 6c 65 64
>2279	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>2281	42 79 20 5a 65 72 6f
>2288	04 53 74 6f 70				.text 4,"Stop"
>228d	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>2295	73 6d 61 74 63 68
>229b	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>22a3	20 56 61 6c 75 65
>22a9	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>22b1	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>22bf	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>22c7	20 63 6f 6d 6d 61
>22cd	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>22d5	20 72 65 66 65 72 65 6e 63 65
>22df	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>22e7	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>22f5	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>22fd	74 6f 6f 20 6c 6f 6e 67 2e
>2306	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>230e	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>231b	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>2323	69 74 68 6f 75 74 20 52 45 50 45 41 54
>2330	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>2338	74 68 6f 75 74 20 46 4f 52
>2341	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>2349	74 68 6f 75 74 20 57 48 49 4c 45
>2354	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>235c	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>2369	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>2371	54 20 69 6e 64 65 78
>2378	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>2380	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>2390	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>2398	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>23a7	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>23af	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>23bf	63 65 2e
>23c2	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>23ca	20 50 72 6f 63 65 64 75 72 65
>23d4	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>23dc	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>23ec	2e
>23ed	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>23f5	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>2403	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>240b	75 69 72 65 73 20 61 72 72 61 79
>2416	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>241e	61 79 20 69 6e 64 65 78 2e
>2427	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2428					section_end_error:
.2428					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2428					ExtensionHandler:
.2428	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.242a	d0 08		bne $2434			bne 	_ExtensionUnary
.242c	b1 02		lda ($02),y			lda 	(codePtr),y
.242e	c8		iny				iny
.242f	0a		asl a				asl 	a
.2430	aa		tax				tax
.2431	7c 32 24	jmp ($2432,x)			jmp 	(Group2Vectors-12,X)
.2434					_ExtensionUnary:
.2434	48		pha				pha 								; save stack pos in A
.2435	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token
.2437	c8		iny				iny
.2438	0a		asl a				asl 	a
.2439	aa		tax				tax
.243a	68		pla				pla
.243b	7c 36 24	jmp ($2436,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.243e					Group2Vectors:
>243e	4e 24					.word	Command_VPoke            ; $86 vpoke
>2440	51 24					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.2442					Group3Vectors:
>2442	92 24					.word	Command_VPeek            ; $86 vpeek(
>2444	95 24					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.2446					XEvaluateInteger:
.2446	8a		txa				txa
.2447	a2 04		ldx #$04		ldx	#4
.2449	20 7b 21	jsr $217b		jsr	mainHandler
.244c	aa		tax				tax
.244d	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.244e					Command_VPoke:
.244e	38		sec				sec 						; one byte , CS
.244f	b0 01		bcs $2452			bcs 	CmdVideoWrite
.2451					Command_VDoke:
.2451	18		clc				clc 						; two bytes, CC
.2452					CmdVideoWrite:
.2452	08		php				php
.2453	a2 00		ldx #$00			ldx 	#0  				; get address into levels 0,1
.2455	20 46 24	jsr $2446			jsr 	XEvaluateInteger
.2458	20 12 21	jsr $2112			jsr 	CheckComma
.245b	e8		inx				inx
.245c	20 46 24	jsr $2446			jsr 	XEvaluateInteger
.245f	ca		dex				dex
.2460	20 71 24	jsr $2471			jsr 	SetUpTOSVRamAddress
.2463	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.2465	8d 23 9f	sta $9f23			sta 	$9F23
.2468	28		plp				plp 						; if it was Poke then exit
.2469	b0 05		bcs $2470			bcs 	_CVWExit
.246b	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.246d	8d 23 9f	sta $9f23			sta 	$9F23
.2470					_CVWExit:
.2470	60		rts				rts
.2471					SetUpTOSVRamAddress:
.2471	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2473	29 01		and #$01			and 	#1
.2475	15 60		ora $60,x			ora 	esInt3,x
.2477	d0 14		bne $248d			bne 	CVWValue
.2479	b5 48		lda $48,x			lda 	esInt0,x				; set address up
.247b	8d 20 9f	sta $9f20			sta 	$9F20
.247e	b5 50		lda $50,x			lda 	esInt1,x
.2480	8d 21 9f	sta $9f21			sta	 	$9F21
.2483	b5 58		lda $58,x			lda 	esInt2,x
.2485	29 01		and #$01			and 	#1
.2487	09 10		ora #$10			ora 	#$10 				; step 1.
.2489	8d 22 9f	sta $9f22			sta 	$9F22
.248c	60		rts				rts
.248d					CVWValue:
.248d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.248f	20 ce 21	jsr $21ce		jsr	errorHandler
.2492					Command_VPeek:
.2492	38		sec				sec 						; one byte , CS
.2493	b0 01		bcs $2496			bcs 	CmdVideoRead
.2495					Command_VDeek:
.2495	18		clc				clc 						; two bytes, CC
.2496					CmdVideoRead:
>2496	db						.byte 	$DB
.2497	08		php				php 						; save action on stack.
.2498	aa		tax				tax 						; save stack position
.2499	20 46 24	jsr $2446			jsr 	XEvaluateInteger 	; address
.249c	20 05 21	jsr $2105			jsr 	CheckRightParen 	; closing right bracket.
.249f	20 71 24	jsr $2471			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.24a2	a9 00		lda #$00			lda 	#0 					; zero the return value
.24a4	95 60		sta $60,x			sta 	esInt3,x
.24a6	95 58		sta $58,x			sta 	esInt2,x
.24a8	95 50		sta $50,x			sta 	esInt1,x
.24aa	ad 23 9f	lda $9f23			lda 	$9F23
.24ad	95 48		sta $48,x			sta 	esInt0,x
.24af	28		plp				plp
.24b0	b0 05		bcs $24b7			bcs 	_CVRExit
.24b2	ad 23 9f	lda $9f23			lda 	$9F23
.24b5	95 50		sta $50,x			sta 	esInt1,x
.24b7					_CVRExit:
.24b7	8a		txa				txa 						; return X position.
.24b8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.24b9					section_end_extension:
.24b9					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.24b9					floatingpointHandler:
.24b9	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.24bb	20 ce 21	jsr $21ce		jsr	errorHandler

;******  Return to file: basic.asm

.24be					section_end_floatingpoint:
.24be					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.24be					interactionHandler:
.24be	7c c1 24	jmp ($24c1,x)			jmp 	(interactionVectors,x)
.24c1					interactionVectors:

;******  Return to file: basic.asm

.24c1					section_end_interaction:
.24c1					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.24c1					StringChrs:
.24c1	aa		tax				tax 								; set up stack
.24c2	a9 02		lda #$02			lda 	#2
.24c4	20 7b 25	jsr $257b			jsr 	AllocateSoftString
.24c7	98		tya				tya
.24c8	20 a1 25	jsr $25a1			jsr 	WriteSoftString
.24cb	20 d0 24	jsr $24d0			jsr 	ReturnSoftString
.24ce	8a		txa				txa
.24cf	60		rts				rts
.24d0					ReturnSoftString:
.24d0	a5 7a		lda $7a				lda 	softMemAlloc
.24d2	95 48		sta $48,x			sta 	esInt0,x
.24d4	a5 7b		lda $7b				lda 	softMemAlloc+1
.24d6	95 50		sta $50,x			sta 	esInt1,x
.24d8	a9 00		lda #$00			lda 	#0
.24da	95 58		sta $58,x			sta 	esInt2,x
.24dc	95 60		sta $60,x			sta 	esInt3,x
.24de	a9 40		lda #$40			lda 	#$40
.24e0	95 40		sta $40,x			sta 	esType,x
.24e2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.24e3					STRCompare:
.24e3	48		pha				pha 								; save A
.24e4	aa		tax				tax 								; put stack pos in X
.24e5	98		tya				tya
.24e6	48		pha				pha
.24e7	20 1b 25	jsr $251b			jsr 	CopyStringPair
.24ea	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.24ec	b1 04		lda ($04),y			lda 	(temp0),y
.24ee	d1 06		cmp ($06),y			cmp 	(temp1),y
.24f0	90 02		bcc $24f4			bcc 	_SCNotSmaller
.24f2	b1 06		lda ($06),y			lda 	(temp1),y
.24f4					_SCNotSmaller:
.24f4	aa		tax				tax 								; put that in X. We compare this many chars first.
.24f5					_SCCompareLoop:
.24f5	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.24f7	f0 0c		beq $2505			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.24f9	ca		dex				dex 								; decrement chars to compare.
.24fa	c8		iny				iny 								; move to next character
.24fb	38		sec				sec 								; calculate s1[y]-s2[y]
.24fc	b1 04		lda ($04),y			lda 	(temp0),y
.24fe	f1 06		sbc ($06),y			sbc 	(temp1),y
.2500	d0 0a		bne $250c			bne 	_SCReturnResult 			; if different return sign of A
.2502	4c f5 24	jmp $24f5			jmp 	_SCCompareLoop
.2505					_SCSameToEndShortest
.2505	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2507	38		sec				sec
.2508	b1 04		lda ($04),y			lda 	(temp0),y
.250a	f1 06		sbc ($06),y			sbc 	(temp1),y
.250c					_SCReturnResult:
.250c	08		php				php 								; set return to zero preserving PSW.
.250d	a2 00		ldx #$00			ldx 	#0
.250f	28		plp				plp
.2510	f0 05		beq $2517			beq 	_SCExit 					; two values equal, then exit
.2512	ca		dex				dex 								; X = $FF
.2513	90 02		bcc $2517			bcc 	_SCExit 					; if 1st < 2nd then -1
.2515	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.2517					_SCExit:
.2517	68		pla				pla
.2518	a8		tay				tay
.2519	68		pla				pla
.251a	60		rts				rts
.251b					CopyStringPair:
.251b	b5 49		lda $49,x			lda 	esInt0+1,x
.251d	85 06		sta $06				sta 	temp1
.251f	b5 51		lda $51,x			lda 	esInt1+1,x
.2521	85 07		sta $07				sta 	temp1+1
.2523					CopyStringTop:
.2523	b5 48		lda $48,x			lda 	esInt0,x
.2525	85 04		sta $04				sta 	temp0
.2527	b5 50		lda $50,x			lda 	esInt1,x
.2529	85 05		sta $05				sta 	temp0+1
.252b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.252c					StringConcat:
.252c	aa		tax				tax									; stack pos in X
.252d	98		tya				tya
.252e	48		pha				pha
.252f	20 1b 25	jsr $251b			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.2532	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.2533	a0 00		ldy #$00			ldy 	#0
.2535	b1 04		lda ($04),y			lda 	(temp0),y
.2537	71 06		adc ($06),y			adc 	(temp1),y
.2539	b0 1c		bcs $2557			bcs 	_SCError 					; just too many characters here.
.253b	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.253d	b0 18		bcs $2557			bcs 	_SCError
.253f	20 7b 25	jsr $257b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2542	20 72 25	jsr $2572			jsr 	CopySoftToStack 			; copy that to the stack.
.2545	20 5c 25	jsr $255c			jsr 	SCCopyTemp0 				; copy temp0
.2548	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.254a	85 04		sta $04				sta 	temp0
.254c	a5 07		lda $07				lda 	temp1+1
.254e	85 05		sta $05				sta 	temp0+1
.2550	20 5c 25	jsr $255c			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.2553	68		pla				pla
.2554	a8		tay				tay
.2555	8a		txa				txa 								; and A
.2556	60		rts				rts
.2557					_SCError:
.2557	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2559	20 ce 21	jsr $21ce		jsr	errorHandler
.255c					SCCopyTemp0:
.255c	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.255e	b1 04		lda ($04),y			lda 	(temp0),y
.2560	85 08		sta $08				sta 	temp2
.2562					_SCCopyLoop:
.2562	a5 08		lda $08				lda 	temp2 						; done the lot
.2564	f0 0b		beq $2571			beq 	_SCCopyExit
.2566	c6 08		dec $08				dec 	temp2
.2568	c8		iny				iny 								; get next char
.2569	b1 04		lda ($04),y			lda 	(temp0),y
.256b	20 a1 25	jsr $25a1			jsr 	WriteSoftString 			; write to soft string.
.256e	4c 62 25	jmp $2562			jmp 	_SCCopyLoop
.2571					_SCCopyExit:
.2571	60		rts				rts
.2572					CopySoftToStack:
.2572	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2574	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2576	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2578	95 50		sta $50,x			sta 	esInt1,x
.257a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.257b					AllocateSoftString:
.257b	85 0c		sta $0c				sta 	tempShort 					; save count
.257d	98		tya				tya
.257e	48		pha				pha
.257f	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.2581	d0 09		bne $258c			bne 	_ASSDone
.2583	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.2585	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2587	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2589	88		dey				dey
.258a	84 7b		sty $7b				sty 	softMemAlloc+1
.258c					_ASSDone:
.258c	38		sec				sec 								; allocate downwards enough memory
.258d	a5 7a		lda $7a				lda 	softMemAlloc
.258f	e5 0c		sbc $0c				sbc 	tempShort
.2591	85 7a		sta $7a				sta 	softMemAlloc
.2593	a5 7b		lda $7b				lda 	softMemAlloc+1
.2595	e9 00		sbc #$00			sbc 	#0
.2597	85 7b		sta $7b				sta 	softMemAlloc+1
.2599	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.259b	a8		tay				tay
.259c	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.259e	68		pla				pla
.259f	a8		tay				tay
.25a0	60		rts				rts
.25a1					WriteSoftString:
.25a1	84 0c		sty $0c				sty 	tempShort 					; save Y
.25a3	48		pha				pha
.25a4	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.25a6	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.25a8	18		clc				clc
.25a9	69 01		adc #$01			adc 	#1
.25ab	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.25ad	a8		tay				tay 								; pointer in Y
.25ae	68		pla				pla 								; get char and write.
.25af	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.25b1	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.25b3	60		rts				rts
.25b4					StrClone:
.25b4	aa		tax				tax 								; set up stack.
.25b5	98		tya				tya
.25b6	48		pha				pha
.25b7	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.25b9	b1 04		lda ($04),y			lda 	(temp0),y
.25bb	18		clc				clc
.25bc	69 01		adc #$01			adc 	#1
.25be	20 7b 25	jsr $257b			jsr 	AllocateSoftString 			; allocate soft memory
.25c1	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.25c3	95 48		sta $48,x			sta 	esInt0,x
.25c5	a5 7b		lda $7b				lda 	softMemAlloc+1
.25c7	95 50		sta $50,x			sta 	esInt1,x
.25c9	a9 00		lda #$00			lda 	#0
.25cb	95 58		sta $58,x			sta 	esInt2,x
.25cd	95 60		sta $60,x			sta 	esInt3,x
.25cf	a9 40		lda #$40			lda 	#$40 						; set type to string.
.25d1	95 40		sta $40,x			sta 	esType,x
.25d3	20 5c 25	jsr $255c			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.25d6	68		pla				pla
.25d7	a8		tay				tay
.25d8	8a		txa				txa
.25d9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.25da					CaseString:
.25da	48		pha				pha 								; save A and copy to X
.25db	aa		tax				tax
.25dc	98		tya				tya
.25dd	48		pha				pha
.25de	20 39 11	jsr $1139			jsr 	TOSToTemp0 					; target string -> temp0
.25e1	a0 00		ldy #$00			ldy 	#0
.25e3	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.25e5	18		clc				clc
.25e6	69 01		adc #$01			adc 	#1 							; one more for length byte
.25e8	20 7b 25	jsr $257b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.25eb	20 72 25	jsr $2572			jsr 	CopySoftToStack 			; copy that to the stack.
.25ee	a0 00		ldy #$00			ldy 	#0
.25f0	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.25f2	aa		tax				tax
.25f3					_CSCopy:
.25f3	e0 00		cpx #$00			cpx 	#0
.25f5	f0 24		beq $261b			beq 	_CSExit
.25f7	ca		dex				dex
.25f8	c8		iny				iny
.25f9	68		pla				pla 								; check direction
.25fa	48		pha				pha
.25fb	f0 0c		beq $2609			beq 	_CSUpper
.25fd	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.25ff	c9 41		cmp #$41			cmp 	#"A"
.2601	90 12		bcc $2615			bcc 	_CSWrite
.2603	c9 5b		cmp #$5b			cmp 	#"Z"+1
.2605	b0 0e		bcs $2615			bcs 	_CSWrite
.2607	90 0a		bcc $2613			bcc 	_CSFlipWrite
.2609					_CSUpper:
.2609	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.260b	c9 61		cmp #$61			cmp 	#"a"
.260d	90 06		bcc $2615			bcc 	_CSWrite
.260f	c9 7b		cmp #$7b			cmp 	#"z"+1
.2611	b0 02		bcs $2615			bcs 	_CSWrite
.2613					_CSFlipWrite:
.2613	49 20		eor #$20			eor 	#"A"^"a"
.2615					_CSWrite:
.2615	20 a1 25	jsr $25a1			jsr 	WriteSoftString
.2618	4c f3 25	jmp $25f3			jmp 	_CSCopy
.261b					_CSExit:
.261b	68		pla				pla
.261c	a8		tay				tay
.261d	68		pla				pla
.261e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.261f					StringSubstring:
.261f	48		pha				pha
.2620	aa		tax				tax 								; access stack.
.2621	98		tya				tya
.2622	48		pha				pha
.2623	20 23 25	jsr $2523			jsr 	CopyStringTop 				; point temp0 to the string.
.2626	a0 00		ldy #$00			ldy 	#0 							; get length.
.2628	b1 04		lda ($04),y			lda 	(temp0),Y
.262a	85 06		sta $06				sta 	temp1
.262c	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.262e	c5 06		cmp $06				cmp 	temp1 						;
.2630	f0 02		beq $2634			beq 	_SSBOkay
.2632	b0 2a		bcs $265e			bcs 	_SSBReturnNull
.2634					_SSBOkay:
.2634	a5 06		lda $06				lda 	temp1 						; get the total length +1
.2636	18		clc				clc
.2637	69 01		adc #$01			adc 	#1
.2639	38		sec				sec
.263a	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.263c	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.263e	90 02		bcc $2642			bcc		_SSBTrunc
.2640	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2642					_SSBTrunc:
.2642	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.2644	18		clc				clc
.2645	69 01		adc #$01			adc 	#1 							; add 1
.2647	20 7b 25	jsr $257b			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.264a	20 72 25	jsr $2572			jsr 	CopySoftToStack 			; copy that to the stack.
.264d	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.264f					_SSBCopyLoop:
.264f	a5 07		lda $07				lda 	temp1+1 					; done them all
.2651	f0 0e		beq $2661			beq 	_SSBExit
.2653	c6 07		dec $07				dec 	temp1+1
.2655	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2657	20 a1 25	jsr $25a1			jsr 	WriteSoftString
.265a	c8		iny				iny
.265b	4c 4f 26	jmp $264f			jmp 	_SSBCopyLoop
.265e					_SSBReturnNull:
.265e	20 65 26	jsr $2665			jsr 	ReturnNull
.2661					_SSBExit:
.2661	68		pla				pla
.2662	a8		tay				tay
.2663	68		pla				pla
.2664	60		rts				rts
.2665					ReturnNull:
.2665	a9 00		lda #$00			lda 	#0 							; clear null string
.2667	8d cc 0a	sta $0acc			sta 	NullString
.266a	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.266c	95 48		sta $48,x			sta 	esInt0,x
.266e	a9 0a		lda #$0a			lda 	#NullString >> 8
.2670	95 50		sta $50,x			sta 	esInt1,x
.2672	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afc					srcStrLen:
>0afc							.fill 	1
.2673					StringWrite:
.2673	aa		tax				tax
.2674	48		pha				pha
.2675	98		tya				tya
.2676	48		pha				pha
.2677	20 9e 26	jsr $269e			jsr 	CheckOverwriteCurrent
.267a	b0 0d		bcs $2689			bcs		_SWCopyCurrent
.267c	20 dc 26	jsr $26dc			jsr 	RequiresConcretion
.267f	90 0e		bcc $268f			bcc 	_SWWriteReference
.2681	20 3f 27	jsr $273f			jsr 	CheckSpecialConcretion
.2684	b0 09		bcs $268f			bcs 	_SWWriteReference
.2686	20 f0 26	jsr $26f0			jsr 	AllocateHardMemory
.2689					_SWCopyCurrent:
.2689	20 23 27	jsr $2723			jsr 	CopyStringToHardMemory
.268c	4c 9a 26	jmp $269a			jmp 	_SWExit
.268f					_SWWriteReference
.268f	a0 00		ldy #$00			ldy 	#0
.2691	a5 04		lda $04				lda 	temp0
.2693	91 06		sta ($06),y			sta 	(temp1),y
.2695	c8		iny				iny
.2696	a5 05		lda $05				lda 	temp0+1
.2698	91 06		sta ($06),y			sta 	(temp1),y
.269a					_SWExit:
.269a	68		pla				pla
.269b	a8		tay				tay
.269c	68		pla				pla
.269d	60		rts				rts
.269e					CheckOverwriteCurrent:
.269e	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.26a0	b5 51		lda $51,x			lda 	esInt1+1,x
.26a2	85 05		sta $05				sta 	temp0+1
.26a4	b5 49		lda $49,x			lda 	esInt0+1,x
.26a6	85 04		sta $04				sta 	temp0
.26a8	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.26aa	8d fc 0a	sta $0afc			sta 	srcStrLen
.26ad	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.26af	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.26b1	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.26b3	85 07		sta $07				sta 	temp1+1
.26b5	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.26b7	b1 06		lda ($06),y			lda 	(temp1),y
.26b9	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.26bb	90 1b		bcc $26d8			bcc 	_COCFail 				; in hard memory.
.26bd	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.26bf	b1 06		lda ($06),y			lda 	(temp1),y
.26c1	e9 01		sbc #$01			sbc 	#1
.26c3	85 08		sta $08				sta 	temp2
.26c5	c8		iny				iny
.26c6	b1 06		lda ($06),y			lda 	(temp1),y
.26c8	e9 00		sbc #$00			sbc 	#0
.26ca	85 09		sta $09				sta 	temp2+1
.26cc	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.26ce	b1 08		lda ($08),y			lda 	(temp2),y
.26d0	38		sec				sec  							; maximum character capacity.
.26d1	e9 02		sbc #$02			sbc 	#2
.26d3	cd fc 0a	cmp $0afc			cmp 	srcStrLen 				; if >= the required length
.26d6	b0 02		bcs $26da			bcs 	_COCCanReuse
.26d8					_COCFail:
.26d8	18		clc				clc
.26d9	60		rts				rts
.26da					_COCCanReuse:
.26da	38		sec				sec
.26db	60		rts				rts
.26dc					RequiresConcretion:
.26dc	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.26de	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.26e0	b0 0a		bcs $26ec			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.26e2	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.26e4	f0 08		beq $26ee			beq 	_RCFail 				; if not, this cannot be soft memory.
.26e6	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.26e8	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.26ea	90 02		bcc $26ee			bcc 	_RCFail 				; so concreting
.26ec					_RCSucceed:
.26ec	38		sec				sec
.26ed	60		rts				rts
.26ee					_RCFail:
.26ee	18		clc				clc
.26ef	60		rts				rts
.26f0					AllocateHardMemory:
.26f0	98		tya				tya
.26f1	48		pha				pha
.26f2	ad fc 0a	lda $0afc			lda 	srcStrLen 				; characters in string
.26f5	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.26f7	b0 04		bcs $26fd			bcs 	_AHMSetMax 				; max out that amount.
.26f9	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.26fb	90 02		bcc $26ff			bcc 	_AHMIsOkay
.26fd					_AHMSetMax:
.26fd	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.26ff					_AHMIsOkay:
.26ff	48		pha				pha
.2700	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2702	38		sec				sec  							; and copy result to TOS as target address.
.2703	65 0d		adc $0d				adc 	highMemory
.2705	85 0d		sta $0d				sta 	highMemory
.2707	a5 0e		lda $0e				lda 	highMemory+1
.2709	69 ff		adc #$ff			adc 	#$FF
.270b	85 0e		sta $0e				sta 	highMemory+1
.270d	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.270f	68		pla				pla 							; get the total size of the storage block
.2710	91 0d		sta ($0d),y			sta 	(highMemory),y
.2712	18		clc				clc
.2713	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.2715	69 01		adc #$01			adc 	#1
.2717	91 06		sta ($06),y			sta 	(temp1),y
.2719	a5 0e		lda $0e				lda 	highMemory+1
.271b	69 00		adc #$00			adc 	#0
.271d	c8		iny				iny
.271e	91 06		sta ($06),y			sta 	(temp1),y
.2720	68		pla				pla
.2721	a8		tay				tay
.2722	60		rts				rts
.2723					CopyStringToHardMemory:
.2723	98		tya				tya
.2724	48		pha				pha
.2725	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2727	b1 06		lda ($06),y			lda 	(temp1),y
.2729	85 08		sta $08				sta 	temp2
.272b	c8		iny				iny
.272c	b1 06		lda ($06),y			lda 	(temp1),y
.272e	85 09		sta $09				sta 	temp2+1
.2730	ac fc 0a	ldy $0afc			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.2733					_CSTHMLoop:
.2733	b1 04		lda ($04),y			lda 	(temp0),y
.2735	91 08		sta ($08),y			sta 	(temp2),y
.2737	88		dey				dey
.2738	c0 ff		cpy #$ff			cpy 	#$FF
.273a	d0 f7		bne $2733			bne 	_CSTHMLoop
.273c	68		pla				pla
.273d	a8		tay				tay
.273e	60		rts				rts
.273f					CheckSpecialConcretion:
.273f	ad fc 0a	lda $0afc			lda 	srcStrLen 				; check string is null.
.2742	f0 02		beq $2746			beq 	_CSCNullString
.2744	18		clc				clc
.2745	60		rts				rts
.2746					_CSCNullString:
.2746	a9 00		lda #$00			lda 	#0
.2748	8d cc 0a	sta $0acc			sta 	NullString
.274b	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.274d	85 04		sta $04				sta 	temp0
.274f	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2751	85 05		sta $05				sta 	1+(temp0)
.2753	38		sec				sec
.2754	60		rts				rts

;******  Return to file: string/string.asm

.2755					stringHandler:
.2755	7c 58 27	jmp ($2758,x)			jmp 	(stringVectors,x)
.2758					stringVectors:
>2758	c1 24					.word StringChrs           ; index 0
>275a	b4 25					.word StrClone             ; index 2
>275c	2c 25					.word StringConcat         ; index 4
>275e	e3 24					.word STRCompare           ; index 6
>2760	da 25					.word CaseString           ; index 8
>2762	1f 26					.word StringSubstring      ; index 10
>2764	73 26					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.2766					section_end_string:
.2766					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.2766					tokeniserHandler:
.2766	7c 69 27	jmp ($2769,x)			jmp 	(tokeniserVectors,x)
.2769					tokeniserVectors:

;******  Return to file: basic.asm

.2769					section_end_tokeniser:
.2769					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afd					varHash:
>0afd							.fill	1
.0afe					varType:
>0afe							.fill 	1
.0aff					varEnd:
>0aff							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2769					AccessVariable:
.2769	aa		tax				tax 								; stack in X
.276a	c8		iny				iny
.276b	b1 02		lda ($02),y			lda 	(codePtr),y
.276d	88		dey				dey
.276e	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.2770	d0 15		bne $2787			bne 	_AVLong
.2772	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2774	38		sec				sec 	 							; make it 0-25
.2775	e9 01		sbc #$01			sbc 	#1
.2777	0a		asl a				asl 	a 							; x 4 is LSB of address
.2778	0a		asl a				asl 	a
.2779	95 48		sta $48,x			sta 	esInt0,x
.277b	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.277d	95 50		sta $50,x			sta 	esInt1,x
.277f	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.2781	95 40		sta $40,x			sta 	esType,x
.2783	c8		iny				iny 								; skip over the variable reference in the code.
.2784	c8		iny				iny
.2785	8a		txa				txa 								; stack in A to return.
.2786	60		rts				rts
.2787					_AVLong:
.2787	8a		txa				txa
.2788	48		pha				pha
.2789	20 d0 27	jsr $27d0			jsr 	AccessSetup 				; set up the basic stuff.
.278c	20 c4 29	jsr $29c4			jsr 	FindVariable 				; does the variable exist already
.278f	b0 0e		bcs $279f			bcs 	_AVFound
.2791	ad fe 0a	lda $0afe			lda 	varType 					; is the variable type an array
.2794	4a		lsr a				lsr 	a
.2795	90 05		bcc $279c			bcc 	_AVCanCreate
.2797	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.2799	20 ce 21	jsr $21ce		jsr	errorHandler
.279c					_AVCanCreate:
.279c	20 83 28	jsr $2883			jsr 	CreateVariable 				; no, create it.
.279f					_AVFound:
.279f	68		pla				pla
.27a0	aa		tax				tax
.27a1	18		clc				clc 								; copy temp0 (variable record address)
.27a2	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.27a4	69 05		adc #$05			adc 	#5
.27a6	95 48		sta $48,x			sta 	esInt0,x
.27a8	a5 05		lda $05				lda 	temp0+1
.27aa	69 00		adc #$00			adc 	#0
.27ac	95 50		sta $50,x			sta 	esInt1,x
.27ae	a9 00		lda #$00			lda 	#0
.27b0	95 58		sta $58,x			sta 	esInt2,x
.27b2	95 60		sta $60,x			sta 	esInt3,x
.27b4	ac fe 0a	ldy $0afe			ldy 	varType 					; get the type ID from the type.
.27b7	b9 90 27	lda $2790,y			lda 	_AVTypeTable-$3A,y
.27ba	95 40		sta $40,x			sta 	esType,x
.27bc	ac ff 0a	ldy $0aff			ldy 	varEnd 						; restore Y
.27bf	ad fe 0a	lda $0afe			lda 	VarType 					; get variable type, put LSB into C
.27c2	4a		lsr a				lsr 	a
.27c3	90 03		bcc $27c8			bcc 	_AVNotArray
.27c5	20 0d 28	jsr $280d			jsr 	AccessArray 				; array lookup. if LSB was set.
.27c8					_AVNotArray:
.27c8	8a		txa				txa 								; return stack in A and return
.27c9	60		rts				rts
.27ca					_AVTypeTable:
>27ca	80 80						.byte 	$80,$80						; integer
>27cc	c0 c0						.byte 	$C0,$C0 					; string
>27ce	81 81						.byte 	$81,$81 					; float
.27d0					AccessSetup:
.27d0	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.27d2	8d fd 0a	sta $0afd			sta 	varHash
.27d5	98		tya				tya
.27d6	48		pha				pha
.27d7	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.27d9	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.27db	b0 0b		bcs $27e8			bcs 	_ASComplete
.27dd	18		clc				clc 								; add to the hash. Might improve this.
.27de	6d fd 0a	adc $0afd			adc 	varHash
.27e1	8d fd 0a	sta $0afd			sta 	varHash
.27e4	c8		iny				iny 								; next character
.27e5	4c d7 27	jmp $27d7			jmp 	_ASLoop
.27e8					_ASComplete:
.27e8	8d fe 0a	sta $0afe			sta 	varType 					; save variable type byte
.27eb	c8		iny				iny
.27ec	8c ff 0a	sty $0aff			sty 	varEnd 						; save the ending position.
.27ef	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.27f0	e9 3a		sbc #$3a			sbc 	#$3A
.27f2	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.27f3	0a		asl a				asl 	a
.27f4	0a		asl a				asl 	a
.27f5	0a		asl a				asl 	a 							; 2 bytes/word
.27f6	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.27f8	ad fd 0a	lda $0afd			lda 	varHash 					; get hash
.27fb	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.27fd	0a		asl a				asl  	a 							; x 2 (for word) and CC
.27fe	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.2800	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.2802	85 7c		sta $7c				sta 	hashList
.2804	a9 0a		lda #$0a			lda 	#hashTables >> 8
.2806	69 00		adc #$00			adc 	#0
.2808	85 7d		sta $7d				sta 	hashList+1
.280a	68		pla				pla
.280b	a8		tay				tay
.280c	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.280d					AccessArray:
.280d	e8		inx				inx
.280e	8a		txa				txa
.280f	a2 04		ldx #$04		ldx	#4
.2811	20 7b 21	jsr $217b		jsr	mainHandler
.2814	aa		tax				tax
.2815	ca		dex				dex
.2816	a2 00		ldx #$00		ldx	#0
.2818	20 7b 21	jsr $217b		jsr	mainHandler
.281b	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.281d	15 59		ora $59,x			ora 	esInt2+1,x
.281f	d0 33		bne $2854			bne 	_AABadIndex
.2821	98		tya				tya
.2822	48		pha				pha
.2823	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.2825	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.2827	b5 50		lda $50,x			lda 	esInt1,x
.2829	85 05		sta $05				sta 	temp0+1
.282b	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.282d	b5 49		lda $49,x			lda 	esInt0+1,x
.282f	d1 04		cmp ($04),y			cmp 	(temp0),y
.2831	c8		iny				iny
.2832	b5 51		lda $51,x			lda 	esInt1+1,x
.2834	f1 04		sbc ($04),y			sbc 	(temp0),y
.2836	b0 1c		bcs $2854			bcs 	_AABadIndex 				; if >= then fail.
.2838	e8		inx				inx 								; point to index
.2839	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.283b	b1 04		lda ($04),y			lda 	(temp0),y
.283d	20 59 28	jsr $2859			jsr 	MultiplyTOSByA 				; specialist multiplier.
.2840	ca		dex				dex
.2841	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.2843	18		clc				clc
.2844	b5 49		lda $49,x			lda 	esInt0+1,x
.2846	71 04		adc ($04),y			adc 	(temp0),y
.2848	95 48		sta $48,x			sta 	esInt0,x
.284a	b5 51		lda $51,x			lda 	esInt1+1,x
.284c	c8		iny				iny
.284d	71 04		adc ($04),y			adc 	(temp0),y
.284f	95 50		sta $50,x			sta 	esInt1,x
.2851	68		pla				pla
.2852	a8		tay				tay
.2853	60		rts				rts
.2854					_AABadIndex:
.2854	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.2856	20 ce 21	jsr $21ce		jsr	errorHandler
.2859					MultiplyTOSByA:
.2859	48		pha				pha
.285a	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.285c	85 06		sta $06				sta 	temp1
.285e	b5 50		lda $50,x			lda 	esInt1,x
.2860	85 07		sta $07				sta 	temp1+1
.2862	68		pla				pla
.2863	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.2865	36 50		rol $50,x			rol 	esInt1,x
.2867	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.2869	f0 17		beq $2882			beq 	_MTBAExit
.286b	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.286d	d0 0f		bne $287e			bne 	_MTBANotFloat
.286f	48		pha				pha
.2870	18		clc				clc 								; so this will make it x 3
.2871	b5 48		lda $48,x			lda 	esInt0,x
.2873	65 06		adc $06				adc 	temp1
.2875	95 48		sta $48,x			sta 	esInt0,x
.2877	b5 50		lda $50,x			lda 	esInt1,x
.2879	65 07		adc $07				adc 	temp1+1
.287b	95 50		sta $50,x			sta 	esInt1,x
.287d	68		pla				pla
.287e					_MTBANotFloat:
.287e	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.2880	36 50		rol $50,x			rol 	esInt1,x
.2882					_MTBAExit:
.2882	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2883					CreateVariable:
.2883	98		tya				tya 								; push Y on the stack twice.
.2884	48		pha				pha
.2885	48		pha				pha
.2886	ae fe 0a	ldx $0afe			ldx 	varType 					; get var type 0-5
.2889	bd 94 28	lda $2894,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.288c	48		pha				pha 								; save length
.288d	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.288f	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.2891	a5 10		lda $10				lda 	lowMemory+1
.2893	85 05		sta $05				sta 	temp0+1
.2895	68		pla				pla 								; get length
.2896	20 70 10	jsr $1070			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2899	ad fd 0a	lda $0afd			lda 	varHash 					; store hash at offset 4.
.289c	a0 04		ldy #$04			ldy 	#4
.289e	91 04		sta ($04),y			sta 	(temp0),y
.28a0	68		pla				pla 								; offset, work out where the variable name is.
.28a1	18		clc				clc
.28a2	65 02		adc $02				adc 	codePtr
.28a4	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.28a6	91 04		sta ($04),y			sta 	(temp0),y
.28a8	a5 03		lda $03				lda 	codePtr+1
.28aa	69 00		adc #$00			adc 	#0
.28ac	c8		iny				iny
.28ad	91 04		sta ($04),y			sta 	(temp0),y
.28af	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.28b1	b1 7c		lda ($7c),y			lda 	(hashList),y
.28b3	91 04		sta ($04),y			sta 	(temp0),y
.28b5	c8		iny				iny
.28b6	b1 7c		lda ($7c),y			lda 	(hashList),y
.28b8	91 04		sta ($04),y			sta 	(temp0),y
.28ba	a5 05		lda $05				lda 	temp0+1 					; set new link
.28bc	91 7c		sta ($7c),y			sta 	(hashList),y
.28be	88		dey				dey
.28bf	a5 04		lda $04				lda 	temp0
.28c1	91 7c		sta ($7c),y			sta 	(hashList),y
.28c3	ad fe 0a	lda $0afe			lda 	varType 					; type in A
.28c6	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.28c8	20 d4 28	jsr $28d4			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.28cb	68		pla				pla
.28cc	a8		tay				tay
.28cd	60		rts				rts
>28ce	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>28d0	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>28d2	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.28d4					ZeroTemp0Y:
.28d4	4a		lsr a				lsr 	a 							; bit 0 in carry
.28d5	0a		asl a				asl 	a
.28d6	b0 19		bcs $28f1			bcs 	_ZTExit 					; we don't initialise arrays.
.28d8	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.28da	f0 16		beq $28f2			beq 	_ZTWriteNullString 			; write "" string
.28dc	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.28de	f0 22		beq $2902			beq 	_ZTWriteFloat
.28e0	98		tya				tya
.28e1	48		pha				pha
.28e2	a9 00		lda #$00			lda 	#0
.28e4	91 04		sta ($04),y			sta 	(temp0),y
.28e6	c8		iny				iny
.28e7	91 04		sta ($04),y			sta 	(temp0),y
.28e9	c8		iny				iny
.28ea	91 04		sta ($04),y			sta 	(temp0),y
.28ec	c8		iny				iny
.28ed	91 04		sta ($04),y			sta 	(temp0),y
.28ef	68		pla				pla
.28f0	a8		tay				tay
.28f1					_ZTExit:
.28f1	60		rts				rts
.28f2					_ZTWriteNullString:
.28f2	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.28f4	8d cc 0a	sta $0acc			sta 	NullString
.28f7	a9 cc		lda #$cc			lda 	#NullString & $FF
.28f9	91 04		sta ($04),y			sta 	(temp0),y
.28fb	a9 0a		lda #$0a			lda 	#NullString >> 8
.28fd	c8		iny				iny
.28fe	91 04		sta ($04),y			sta 	(temp0),y
.2900	88		dey				dey
.2901	60		rts				rts
.2902					_ZTWriteFloat:
.2902	8a		txa				txa
.2903	48		pha				pha
.2904	a2 1e		ldx #$1e		ldx	#30
.2906	20 b9 24	jsr $24b9		jsr	floatingpointHandler
.2909	68		pla				pla
.290a	aa		tax				tax
.290b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.290c					CreateArray:
.290c	20 d0 27	jsr $27d0			jsr 	AccessSetup 				; set up the basic stuff.
.290f	ad fe 0a	lda $0afe			lda 	varType 					; is the variable type an array
.2912	4a		lsr a				lsr 	a
.2913	90 3f		bcc $2954			bcc 	_CANotArray 				; no, cause an error.
.2915	20 c4 29	jsr $29c4			jsr 	FindVariable 				; does the variable exist already
.2918	b0 35		bcs $294f			bcs 	_CAFound 					; cannot redefine it.
.291a	20 83 28	jsr $2883			jsr 	CreateVariable 				; create the variable entry.
.291d	ac ff 0a	ldy $0aff			ldy 	varEnd 						; point Y to the end of the variable entry.
.2920	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.2922	48		pha				pha
.2923	a5 05		lda $05				lda 	temp0+1
.2925	48		pha				pha
.2926	ad fe 0a	lda $0afe			lda 	varType 					; push variable type on the stack.
.2929	48		pha				pha
.292a	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.292c	a2 04		ldx #$04		ldx	#4
.292e	20 7b 21	jsr $217b		jsr	mainHandler
.2931	a2 00		ldx #$00		ldx	#0
.2933	20 7b 21	jsr $217b		jsr	mainHandler
.2936	68		pla				pla 		 						; restore type and position.
.2937	8d fe 0a	sta $0afe			sta 	varType
.293a	68		pla				pla
.293b	85 05		sta $05				sta 	temp0+1
.293d	68		pla				pla
.293e	85 04		sta $04				sta 	temp0
.2940	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.2942	29 e0		and #$e0			and 	#$E0
.2944	05 58		ora $58				ora 	esInt2
.2946	05 60		ora $60				ora 	esInt3
.2948	f0 0f		beq $2959			beq 	_CASizeOk
.294a					_CASize:
.294a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.294c	20 ce 21	jsr $21ce		jsr	errorHandler
.294f					_CAFound:
.294f	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.2951	20 ce 21	jsr $21ce		jsr	errorHandler
.2954					_CANotArray:
.2954	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.2956	20 ce 21	jsr $21ce		jsr	errorHandler
.2959					_CASizeOk:
.2959	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.295b	d0 02		bne $295f			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.295d	e6 49		inc $49				inc 	esInt0+1
.295f					_CANoCarry:
.295f	98		tya				tya
.2960	48		pha				pha
.2961	a0 05		ldy #$05			ldy 	#5
.2963	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.2965	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.2967	c8		iny				iny
.2968	a5 10		lda $10				lda 	lowMemory+1
.296a	91 04		sta ($04),y			sta 	(temp0),y
.296c	c8		iny				iny
.296d	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.296f	91 04		sta ($04),y			sta 	(temp0),y
.2971	c8		iny				iny
.2972	a5 50		lda $50				lda 	esInt1
.2974	91 04		sta ($04),y			sta 	(temp0),y
.2976	c8		iny				iny
.2977	ae fe 0a	ldx $0afe			ldx 	varType 					; get the length per element
.297a	bd 82 29	lda $2982,x			lda 	_CAActualSize-$3A-1,x
.297d	91 04		sta ($04),y			sta 	(temp0),y
.297f	aa		tax				tax 								; save size in X
.2980	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.2982	85 04		sta $04				sta 	temp0
.2984	a5 10		lda $10				lda 	lowMemory+1
.2986	85 05		sta $05				sta 	temp0+1
.2988	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.298a	85 06		sta $06				sta 	temp1
.298c	85 07		sta $07				sta 	temp1+1
.298e					_CAInitialiseArray:
.298e	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.2990	ad fe 0a	lda $0afe			lda 	varType 					; base type of array in A.
.2993	29 fe		and #$fe			and 	#$FE
.2995	20 d4 28	jsr $28d4			jsr 	ZeroTemp0Y
.2998	8a		txa				txa 								; add X to temp0, also updating lowMemory
.2999	18		clc				clc
.299a	65 04		adc $04				adc 	temp0
.299c	85 04		sta $04				sta 	temp0
.299e	85 0f		sta $0f				sta 	lowMemory
.29a0	a5 05		lda $05				lda 	temp0+1
.29a2	69 00		adc #$00			adc 	#0
.29a4	85 05		sta $05				sta 	temp0+1
.29a6	85 10		sta $10				sta 	lowMemory+1
.29a8	e6 06		inc $06				inc 	temp1 						; bump the counter.
.29aa	d0 02		bne $29ae			bne 	_CAIANoCarry
.29ac	e6 07		inc $07				inc 	temp1+1
.29ae					_CAIANoCarry:
.29ae	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.29b0	c5 06		cmp $06				cmp 	temp1
.29b2	d0 da		bne $298e			bne 	_CAInitialiseArray
.29b4	a5 50		lda $50				lda 	esInt1
.29b6	c5 07		cmp $07				cmp 	temp1+1
.29b8	d0 d4		bne $298e			bne 	_CAInitialiseArray
.29ba	68		pla				pla
.29bb	a8		tay				tay
.29bc	60		rts				rts
.29bd					_CAActualSize:
>29bd	04 00						.byte 	VarISize,0
>29bf	02 00						.byte 	VarSSize,0
>29c1	06 00						.byte 	VarFSize,0
>29c3	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.29c4					FindVariable:
.29c4	98		tya				tya
.29c5	48		pha				pha
.29c6	98		tya				tya 								; point temp2 to the actual name.
.29c7	18		clc				clc
.29c8	65 02		adc $02				adc 	codePtr
.29ca	85 08		sta $08				sta 	temp2
.29cc	a5 03		lda $03				lda 	codePtr+1
.29ce	69 00		adc #$00			adc 	#0
.29d0	85 09		sta $09				sta 	temp2+1
.29d2	a0 00		ldy #$00			ldy 	#0
.29d4	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.29d6	85 04		sta $04				sta 	temp0
.29d8	a5 7d		lda $7d				lda 	hashList+1
.29da	85 05		sta $05				sta 	temp0+1
.29dc	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.29de	b1 04		lda ($04),y			lda 	(temp0),y
.29e0	f0 2c		beq $2a0e			beq 	_FVFail
.29e2	aa		tax				tax
.29e3	88		dey				dey		 							; get LSB
.29e4	b1 04		lda ($04),y			lda 	(temp0),y
.29e6	85 04		sta $04				sta 	temp0 						; update pointer.
.29e8	86 05		stx $05				stx 	temp0+1
.29ea	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.29ec	b1 04		lda ($04),y			lda 	(temp0),y
.29ee	cd fd 0a	cmp $0afd			cmp 	varHash
.29f1	d0 e9		bne $29dc			bne 	_FVNext 					; if not, no point in checking the name.
.29f3	88		dey				dey 								; copy name pointer to temp1.
.29f4	b1 04		lda ($04),y			lda 	(temp0),y
.29f6	85 07		sta $07				sta 	temp1+1
.29f8	88		dey				dey
.29f9	b1 04		lda ($04),y			lda 	(temp0),y
.29fb	85 06		sta $06				sta 	temp1
.29fd	a0 00		ldy #$00			ldy 	#0
.29ff					_FVCheck:
.29ff	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.2a01	d1 08		cmp ($08),y			cmp 	(temp2),y
.2a03	d0 d7		bne $29dc			bne 	_FVNext		 				; fail if different.
.2a05	c8		iny				iny
.2a06	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2a08	90 f5		bcc $29ff			bcc 	_FVCheck
.2a0a	68		pla				pla
.2a0b	a8		tay				tay
.2a0c	38		sec				sec
.2a0d	60		rts				rts
.2a0e					_FVFail:
.2a0e	68		pla				pla
.2a0f	a8		tay				tay
.2a10	18		clc				clc
.2a11	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.2a12					HashTableReset:
.2a12	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2a14	a9 00		lda #$00			lda 	#0
.2a16					_HTRClear:
.2a16	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2a19	ca		dex				dex
.2a1a	d0 fa		bne $2a16			bne 	_HTRClear
.2a1c	60		rts				rts

;******  Return to file: variable/variable.asm

.2a1d					variableHandler:
.2a1d	7c 20 2a	jmp ($2a20,x)			jmp 	(variableVectors,x)
.2a20					variableVectors:
>2a20	69 27					.word AccessVariable       ; index 0
>2a22	0c 29					.word CreateArray          ; index 2
>2a24	12 2a					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.2a26					section_end_variable:

;******  End of listing
