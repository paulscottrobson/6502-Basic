
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Wed Mar  3 15:35:24 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
.000b					highMemory:
>000b							.fill 	2
.000d					lowMemory:
>000d							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_BadIndex = 18 ; Bad NEXT index
=19					ErrorID_Struct = 19 ; Structures nested wrong
=20					ErrorID_NoAuto = 20 ; Cannot create variable
=21					ErrorID_RetStack = 21 ; Return stack out of space.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 1f 12	jmp $121f			jmp 	Command_Run
.21b0					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	0f 0a 00 0d 13 07 12 3c			.byte 15,10,0,13,19,7,18,60,141,133,0,143,133,0,128,16,11,0,17,3,15,1,20,60,141,133,0,143,133,0,128,13,12,0,4,8,60,141,133,0,143,133,0,128,15,13,0,8,6,11,9,60,141,133,0,143,133,0,128,15,14,0,9,7,10,4,60,141,133,0,143,133,0,128,12,15,0,14,60,141,133,0,143,133,0,128,14,16,0,21,5,2,60,141,133,0,143,133,0,128,12,17,0,12,60,141,133,0,143,133,0,128,12,18,0,7,60,141,133,0,143,133,0,128,15,19,0,19,12,1,10,60,141,133,0,143,133,0,128,15,20,0,9,9,15,17,60,141,133,0,143,133,0,128,14,21,0,5,4,16,60,141,133,0,143,133,0,128,14,22,0,11,11,8,60,141,133,0,143,133,0,128,15,23,0,10,8,10,8,60,141,133,0,143,133,0,128,15,24,0,16,21,9,8,60,141,133,0,143,133,0,128,15,25,0,1,2,18,14,60,141,133,0,143,133,0,128,12,26,0,4,60,141,133,0,143,133,0,128,14,27,0,21,2,10,60,141,133,0,143,133,0,128,12,28,0,21,60,141,133,0,143,133,0,128,15,29,0,1,1,20,18,60,141,133,0,143,133,0,128,16,30,0,5,17,9,19,7,60,141,133,0,143,133,0,128,16,31,0,20,15,12,7,6,60,141,133,0,143,133,0,128,15,32,0,11,5,17,6,60,141,133,0,143,133,0,128,12,33,0,1,60,141,133,0,143,133,0,128,15,34,0,11,5,14,20,60,141,133,0,143,133,0,128,12,35,0,2,60,141,133,0,143,133,0,128,13,36,0,2,17,60,141,133,0,143,133,0,128,14,37,0,10,12,14,60,141,133,0,143,133,0,128,16,38,0,18,9,19,4,18,60,141,133,0,143,133,0,128,13,39,0,1,10,60,141,133,0,143,133,0,128,21,40,0,20,15,12,7,6,60,141,20,15,12,7,6,60,143,2,17,60,128,20,41,0,21,2,10,60,141,21,2,10,60,143,133,4,71,65,77,81,128,13,42,0,17,3,15,1,20,60,141,133,0,128,9,43,0,14,60,141,1,60,128,18,44,0,19,12,1,10,60,141,19,12,1,10,60,143,21,60,128,21,45,0,1,2,18,14,60,141,1,2,18,14,60,143,133,3,65,74,69,128,9,46,0,14,60,141,133,0,128,19,47,0,10,12,14,60,141,10,12,14,60,143,9,9,15,17,60,128,14,48,0,4,8,60,141,133,4,74,70,85,78,128,10,49,0,4,8,60,141,133,0,128,10,50,0,2,60,141,133,1,78,128,22,51,0,18,9,19,4,18,60,141,18,9,19,4,18,60,143,133,2,72,75,128,14,52,0,4,60,141,4,60,143,133,2,85,85,128,9,53,0,7,60,141,133,0,128,14,54,0,5,4,16,60,141,1,2,18,14,60,128,13,55,0,1,60,141,133,4,78,83,78,83,128,10,56,0,21,60,141,133,1,71,128,14,57,0,1,2,18,14,60,141,133,2,70,66,128,11,58,0,10,12,14,60,141,133,0,128,13,59,0,11,11,8,60,141,11,11,8,60,128,17,60,0,7,60,141,7,60,143,133,5,81,83,70,81,65,128,13,61,0,19,12,1,10,60,141,4,8,60,128,17,62,0,8,6,11,9,60,141,133,5,76,85,74,74,75,128,22,63,0,9,7,10,4,60,141,9,7,10,4,60,143,18,9,19,4,18,60,128,16,64,0,1,2,18,14,60,141,18,9,19,4,18,60,128,14,65,0,4,60,141,4,60,143,21,5,2,60,128,10,66,0,1,10,60,141,133,0,128,15,67,0,1,1,20,18,60,141,11,5,17,6,60,128,9,68,0,12,60,141,4,60,128,15,69,0,21,60,141,21,60,143,1,1,20,18,60,128,14,70,0,4,8,60,141,133,4,71,82,80,82,128,16,71,0,17,3,15,1,20,60,141,133,3,70,77,75,128,17,72,0,5,4,16,60,141,5,4,16,60,143,2,17,60,128,18,73,0,1,2,18,14,60,141,1,2,18,14,60,143,2,60,128,9,74,0,1,60,141,133,0,128,21,75,0,16,21,9,8,60,141,16,21,9,8,60,143,11,5,17,6,60,128,16,76,0,18,9,19,4,18,60,141,133,3,73,68,78,128,19,77,0,9,7,10,4,60,141,9,7,10,4,60,143,133,1,79,128,12,78,0,1,2,18,14,60,141,21,60,128,14,79,0,14,60,141,14,60,143,21,5,2,60,128,17,80,0,11,5,17,6,60,141,133,5,84,79,80,84,78,128,15,81,0,12,60,141,12,60,143,10,8,10,8,60,128,15,82,0,11,5,14,20,60,141,133,3,72,71,68,128,20,83,0,20,15,12,7,6,60,141,20,15,12,7,6,60,143,21,60,128,12,84,0,4,60,141,13,19,7,18,60,128,9,85,0,4,60,141,133,0,128,21,86,0,5,4,16,60,141,5,4,16,60,143,133,5,68,84,71,70,65,128,12,87,0,16,21,9,8,60,141,133,0,128,11,88,0,14,60,141,133,2,85,71,128,11,89,0,12,60,141,133,2,74,77,128,13,90,0,16,21,9,8,60,141,4,8,60,128,14,91,0,1,60,141,133,5,65,74,74,80,77,128,20,92,0,20,15,12,7,6,60,141,20,15,12,7,6,60,143,2,60,128,12,93,0,9,7,10,4,60,141,133,0,128,14,94,0,5,4,16,60,141,133,3,80,79,74,128,14,95,0,10,12,14,60,141,11,5,17,6,60,128,14,96,0,12,60,141,133,5,68,74,72,82,81,128,25,97,0,5,17,9,19,7,60,141,5,17,9,19,7,60,143,133,5,80,68,75,82,85,128,12,98,0,11,5,17,6,60,141,133,0,128,13,99,0,11,5,14,20,60,141,2,17,60,128,10,100,0,1,10,60,141,133,0,128,11,101,0,5,4,16,60,141,133,0,128,16,102,0,5,4,16,60,141,5,4,16,60,143,4,60,128,17,103,0,2,17,60,141,2,17,60,143,11,5,17,6,60,128,15,104,0,10,8,10,8,60,141,9,7,10,4,60,128,14,105,0,14,60,141,14,60,143,21,2,10,60,128,15,106,0,4,60,141,4,60,143,133,3,66,85,75,128,17,107,0,9,7,10,4,60,141,133,5,73,75,73,66,76,128,13,108,0,18,9,19,4,18,60,141,2,60,128,20,109,0,21,2,10,60,141,21,2,10,60,143,133,4,78,76,74,70,128,12,110,0,2,60,141,1,1,20,18,60,128,23,111,0,20,15,12,7,6,60,141,20,15,12,7,6,60,143,11,5,17,6,60,128,20,112,0,8,6,11,9,60,141,8,6,11,9,60,143,10,12,14,60,128,13,113,0,4,60,141,4,60,143,133,1,71,128,18,114,0,5,17,9,19,7,60,141,133,5,84,73,66,76,72,128,23,115,0,5,17,9,19,7,60,141,5,17,9,19,7,60,143,11,5,14,20,60,128,12,116,0,16,21,9,8,60,141,133,0,128,23,117,0,1,1,20,18,60,141,1,1,20,18,60,143,133,5,81,75,83,73,69,128,16,118,0,5,4,16,60,141,133,5,84,81,75,85,78,128,13,119,0,19,12,1,10,60,141,133,1,82,128,15,120,0,5,4,16,60,141,17,3,15,1,20,60,128,11,121,0,1,10,60,141,2,17,60,128,12,122,0,1,10,60,141,133,2,69,66,128,11,123,0,21,60,141,10,12,14,60,128,15,124,0,11,5,17,6,60,141,11,5,17,6,60,128,10,125,0,2,17,60,141,133,0,128,16,126,0,2,17,60,141,2,17,60,143,10,12,14,60,128,14,127,0,21,60,141,21,60,143,21,5,2,60,128,11,128,0,10,12,14,60,141,133,0,128,23,129,0,5,17,9,19,7,60,141,5,17,9,19,7,60,143,133,3,70,82,82,128,16,130,0,20,15,12,7,6,60,141,8,6,11,9,60,128,15,131,0,1,1,20,18,60,141,133,3,75,81,76,128,16,132,0,10,8,10,8,60,141,20,15,12,7,6,60,128,21,133,0,19,12,1,10,60,141,19,12,1,10,60,143,133,3,79,78,79,128,12,134,0,9,7,10,4,60,141,133,0,128,11,135,0,21,60,141,133,2,81,80,128,12,136,0,5,4,16,60,141,133,1,76,128,23,137,0,18,9,19,4,18,60,141,18,9,19,4,18,60,143,19,12,1,10,60,128,11,138,0,11,11,8,60,141,12,60,128,12,139,0,1,1,20,18,60,141,133,0,128,13,140,0,2,60,141,2,60,143,133,1,70,128,10,141,0,12,60,141,133,1,72,128,21,142,0,9,7,10,4,60,141,9,7,10,4,60,143,16,21,9,8,60,128,15,143,0,13,19,7,18,60,141,133,3,69,80,75,128,21,144,0,5,4,16,60,141,5,4,16,60,143,133,5,74,80,76,72,75,128,14,145,0,2,17,60,141,2,17,60,143,7,60,128,9,146,0,21,60,141,133,0,128,12,147,0,9,9,15,17,60,141,133,0,128,9,148,0,12,60,141,133,0,128,13,149,0,17,3,15,1,20,60,141,133,0,128,21,150,0,18,9,19,4,18,60,141,18,9,19,4,18,60,143,133,1,81,128,18,151,0,11,5,17,6,60,141,11,5,17,6,60,143,2,60,128,12,152,0,8,6,11,9,60,141,133,0,128,18,153,0,20,15,12,7,6,60,141,133,5,69,68,75,76,76,128,24,154,0,20,15,12,7,6,60,141,20,15,12,7,6,60,143,133,4,78,76,79,67,128,19,155,0,10,12,14,60,141,10,12,14,60,143,133,3,80,74,83,128,17,156,0,5,17,9,19,7,60,141,133,4,71,76,71,74,128,21,157,0,13,19,7,18,60,141,13,19,7,18,60,143,133,3,66,79,82,128,9,158,0,12,60,141,133,0,128,16,159,0,10,8,10,8,60,141,133,4,73,71,77,85,128,12,160,0,19,12,1,10,60,141,133,0,128,16,161,0,4,8,60,141,4,8,60,143,133,2,75,79,128,17,162,0,21,60,141,21,60,143,133,5,81,71,65,80,80,128,19,163,0,5,4,16,60,141,5,4,16,60,143,133,3,74,75,78,128,12,164,0,19,12,1,10,60,141,133,0,128,17,165,0,2,17,60,141,2,17,60,143,1,1,20,18,60,128,12,166,0,9,9,15,17,60,141,133,0,128,12,167,0,21,2,10,60,141,133,1,77,128,12,168,0,10,8,10,8,60,141,133,0,128,17,169,0,4,60,141,4,60,143,133,5,71,74,77,72,79,128,21,170,0,1,1,20,18,60,141,1,1,20,18,60,143,13,19,7,18,60,128,11,171,0,11,11,8,60,141,133,0,128,16,172,0,17,3,15,1,20,60,141,11,5,14,20,60,128,20,173,0,13,19,7,18,60,141,13,19,7,18,60,143,5,4,16,60,128,15,174,0,1,60,141,1,60,143,133,3,66,71,71,128,10,175,0,1,10,60,141,133,0,128,12,176,0,11,5,14,20,60,141,133,0,128,21,177,0,5,4,16,60,141,5,4,16,60,143,133,5,73,80,77,80,82,128,12,178,0,21,60,141,133,3,85,78,65,128,15,179,0,11,5,17,6,60,141,133,3,76,76,79,128,17,180,0,4,8,60,141,4,8,60,143,133,3,81,69,65,128,13,181,0,5,17,9,19,7,60,141,133,0,128,12,182,0,13,19,7,18,60,141,133,0,128,15,183,0,4,60,141,4,60,143,133,3,81,75,74,128,12,184,0,10,8,10,8,60,141,133,0,128,21,185,0,5,4,16,60,141,5,4,16,60,143,133,5,69,82,84,75,66,128,16,186,0,9,9,15,17,60,141,133,4,76,77,81,73,128,13,187,0,13,19,7,18,60,141,133,1,70,128,12,188,0,1,1,20,18,60,141,133,0,128,19,189,0,21,2,10,60,141,21,2,10,60,143,133,3,85,79,75,128,12,190,0,14,60,141,133,3,78,70,77,128,14,191,0,1,10,60,141,17,3,15,1,20,60,128,22,192,0,11,5,17,6,60,141,11,5,17,6,60,143,133,4,65,77,78,81,128,19,193,0,13,19,7,18,60,141,13,19,7,18,60,143,133,1,65,128,23,194,0,5,17,9,19,7,60,141,5,17,9,19,7,60,143,8,6,11,9,60,128,18,195,0,1,1,20,18,60,141,1,1,20,18,60,143,7,60,128,11,196,0,21,5,2,60,141,14,60,128,12,197,0,19,12,1,10,60,141,133,0,128,16,198,0,1,1,20,18,60,141,18,9,19,4,18,60,128,11,199,0,21,5,2,60,141,133,0,128,10,200,0,1,60,141,2,17,60,128,10,201,0,1,10,60,141,133,0,128,12,202,0,21,5,2,60,141,133,1,77,128,20,203,0,19,12,1,10,60,141,19,12,1,10,60,143,5,4,16,60,128,12,204,0,21,60,141,21,60,143,14,60,128,14,205,0,1,10,60,141,1,10,60,143,12,60,128,11,206,0,10,12,14,60,141,133,0,128,15,207,0,2,60,141,2,60,143,9,7,10,4,60,128,12,208,0,7,60,141,1,2,18,14,60,128,15,209,0,1,60,141,1,60,143,133,3,76,77,78,128,16,210,0,17,3,15,1,20,60,141,133,3,75,83,66,128,15,211,0,9,9,15,17,60,141,13,19,7,18,60,128,12,212,0,21,60,141,1,1,20,18,60,128,18,213,0,21,2,10,60,141,21,2,10,60,143,133,2,73,74,128,11,214,0,5,4,16,60,141,133,0,128,14,215,0,10,12,14,60,141,1,1,20,18,60,128,13,216,0,17,3,15,1,20,60,141,133,0,128,21,217,0,1,1,20,18,60,141,1,1,20,18,60,143,16,21,9,8,60,128,16,218,0,21,5,2,60,141,21,5,2,60,143,21,60,128,20,219,0,10,12,14,60,141,10,12,14,60,143,20,15,12,7,6,60,128,16,220,0,12,60,141,12,60,143,17,3,15,1,20,60,128,14,221,0,5,4,16,60,141,10,8,10,8,60,128,12,222,0,19,12,1,10,60,141,133,0,128,12,223,0,5,4,16,60,141,133,1,74,128,14,224,0,4,8,60,141,133,4,84,79,79,82,128,22,225,0,17,3,15,1,20,60,141,17,3,15,1,20,60,143,133,2,66,69,128,19,226,0,5,4,16,60,141,5,4,16,60,143,133,3,81,68,70,128,14,227,0,14,60,141,133,5,72,70,71,85,75,128,14,228,0,1,1,20,18,60,141,133,2,83,81,128,13,229,0,21,60,141,133,4,69,81,74,66,128,13,230,0,2,17,60,141,8,6,11,9,60,128,17,231,0,9,7,10,4,60,141,133,5,78,66,82,85,66,128,14,232,0,1,1,20,18,60,141,133,2,83,84,128,23,233,0,5,17,9,19,7,60,141,5,17,9,19,7,60,143,16,21,9,8,60,128,9,234,0,4,60,141,2,60,128,11,235,0,5,4,16,60,141,133,0,128,12,236,0,11,5,14,20,60,141,133,0,128,12,237,0,1,60,141,1,60,143,4,60,128,14,238,0,19,12,1,10,60,141,21,5,2,60,128,15,239,0,1,1,20,18,60,141,16,21,9,8,60,128,12,240,0,11,5,17,6,60,141,133,0,128,19,241,0,11,5,17,6,60,141,11,5,17,6,60,143,133,1,71,128,9,242,0,7,60,141,133,0,128,14,243,0,4,60,141,4,60,143,133,2,77,69,128,22,244,0,17,3,15,1,20,60,141,17,3,15,1,20,60,143,5,4,16,60,128,21,245,0,13,19,7,18,60,141,13,19,7,18,60,143,11,5,14,20,60,128,12,246,0,1,60,141,133,3,79,70,85,128,9,247,0,14,60,141,133,0,128,12,248,0,1,1,20,18,60,141,2,60,128,10,249,0,7,60,141,133,1,81,128,12,250,0,7,60,141,7,60,143,14,60,128,12,251,0,11,5,14,20,60,141,133,0,128,16,252,0,21,5,2,60,141,133,5,85,81,69,82,72,128,20,253,0,21,5,2,60,141,21,5,2,60,143,20,15,12,7,6,60,128,18,254,0,18,9,19,4,18,60,141,133,5,80,80,82,70,65,128,14,255,0,1,60,141,1,60,143,133,2,78,81,128,20,0,1,11,11,8,60,141,11,11,8,60,143,133,4,68,80,70,66,128,21,1,1,21,2,10,60,141,21,2,10,60,143,133,5,80,70,68,71,74,128,12,2,1,13,19,7,18,60,141,133,0,128,12,3,1,21,2,10,60,141,133,1,83,128,13,4,1,5,17,9,19,7,60,141,133,0,128,15,5,1,20,15,12,7,6,60,141,133,2,67,85,128,11,6,1,11,11,8,60,141,133,0,128,13,7,1,1,60,141,133,4,81,74,72,84,128,20,8,1,10,8,10,8,60,141,10,8,10,8,60,143,133,2,68,68,128,14,9,1,16,21,9,8,60,141,11,11,8,60,128,13,10,1,2,17,60,141,8,6,11,9,60,128,14,11,1,10,8,10,8,60,141,133,2,80,77,128,19,12,1,16,21,9,8,60,141,16,21,9,8,60,143,133,1,76,128,15,13,1,8,6,11,9,60,141,9,7,10,4,60,128,12,14,1,12,60,141,133,3,85,66,71,128,11,15,1,14,60,141,133,2,79,68,128,17,16,1,4,8,60,141,4,8,60,143,16,21,9,8,60,128,12,17,1,21,5,2,60,141,133,1,67,128,15,18,1,1,10,60,141,1,10,60,143,133,1,68,128,14,19,1,1,10,60,141,133,4,74,71,81,85,128,19,20,1,10,12,14,60,141,10,12,14,60,143,133,3,84,65,79,128,12,21,1,2,17,60,141,133,2,83,81,128,10,22,1,1,10,60,141,133,0,128,21,23,1,11,11,8,60,141,11,11,8,60,143,133,5,77,73,80,78,79,128,12,24,1,8,6,11,9,60,141,133,0,128,12,25,1,12,60,141,9,7,10,4,60,128,18,26,1,11,5,17,6,60,141,11,5,17,6,60,143,14,60,128,9,27,1,4,60,141,133,0,128,14,28,1,4,60,141,4,60,143,5,4,16,60,128,13,29,1,9,9,15,17,60,141,4,8,60,128,12,30,1,10,8,10,8,60,141,7,60,128,22,31,1,8,6,11,9,60,141,8,6,11,9,60,143,133,4,75,74,69,71,128,20,32,1,21,2,10,60,141,21,2,10,60,143,133,4,68,72,80,83,128,13,33,1,1,60,141,1,60,143,133,1,73,128,21,34,1,11,5,17,6,60,141,11,5,17,6,60,143,133,3,71,69,77,128,9,35,1,21,60,141,133,0,128,19,36,1,9,9,15,17,60,141,9,9,15,17,60,143,133,1,71,128,15,37,1,21,2,10,60,141,133,4,69,85,65,75,128,19,38,1,9,9,15,17,60,141,9,9,15,17,60,143,133,1,80,128,15,39,1,2,17,60,141,2,17,60,143,133,1,75,128,19,40,1,10,12,14,60,141,10,12,14,60,143,11,5,14,20,60,128,21,41,1,18,9,19,4,18,60,141,18,9,19,4,18,60,143,133,1,72,128,21,42,1,21,5,2,60,141,21,5,2,60,143,133,5,84,84,79,82,71,128,17,43,1,4,8,60,141,4,8,60,143,133,3,84,69,84,128,9,44,1,21,60,141,133,0,128,16,45,1,10,12,14,60,141,10,12,14,60,143,12,60,128,13,46,1,1,10,60,141,19,12,1,10,60,128,22,47,1,17,3,15,1,20,60,141,17,3,15,1,20,60,143,133,2,84,75,128,13,48,1,5,17,9,19,7,60,141,133,0,128,15,49,1,21,60,141,21,60,143,133,3,70,71,84,128,12,50,1,10,8,10,8,60,141,133,0,128,13,51,1,17,3,15,1,20,60,141,133,0,128,12,52,1,14,60,141,14,60,143,4,60,128,9,53,1,7,60,141,133,0,128,12,54,1,8,6,11,9,60,141,133,0,128,21,55,1,16,21,9,8,60,141,16,21,9,8,60,143,1,1,20,18,60,128,19,56,1,11,11,8,60,141,11,11,8,60,143,16,21,9,8,60,128,12,57,1,1,60,141,1,60,143,14,60,128,12,58,1,14,60,141,14,60,143,7,60,128,14,59,1,4,8,60,141,4,8,60,143,14,60,128,10,60,1,1,10,60,141,4,60,128,16,61,1,17,3,15,1,20,60,141,1,1,20,18,60,128,20,62,1,19,12,1,10,60,141,19,12,1,10,60,143,5,4,16,60,128,9,63,1,14,60,141,133,0,128,10,64,1,4,60,141,133,1,79,128,14,65,1,21,60,141,133,5,68,70,81,68,76,128,15,66,1,11,5,17,6,60,141,133,3,78,72,77,128,10,67,1,7,60,141,133,1,67,128,15,68,1,2,60,141,2,60,143,133,3,80,68,81,128,13,69,1,17,3,15,1,20,60,141,133,0,128,14,70,1,2,60,141,2,60,143,5,4,16,60,128,14,71,1,13,19,7,18,60,141,11,11,8,60,128,11,72,1,21,2,10,60,141,2,60,128,16,73,1,1,60,141,1,60,143,17,3,15,1,20,60,128,10,74,1,4,8,60,141,2,60,128,12,75,1,10,8,10,8,60,141,133,0,128,20,76,1,13,19,7,18,60,141,13,19,7,18,60,143,10,12,14,60,128,12,77,1,1,2,18,14,60,141,133,0,128,17,78,1,2,60,141,2,60,143,133,5,70,74,85,75,82,128,14,79,1,20,15,12,7,6,60,141,1,10,60,128,19,80,1,21,5,2,60,141,21,5,2,60,143,13,19,7,18,60,128,15,81,1,1,2,18,14,60,141,9,9,15,17,60,128,19,82,1,13,19,7,18,60,141,13,19,7,18,60,143,2,17,60,128,14,83,1,4,60,141,4,60,143,133,2,81,69,128,14,84,1,12,60,141,12,60,143,133,2,80,66,128,12,85,1,4,60,141,4,60,143,2,60,128,14,86,1,4,8,60,141,4,8,60,143,14,60,128,13,87,1,11,5,14,20,60,141,133,1,70,128,11,88,1,21,5,2,60,141,21,60,128,16,89,1,21,5,2,60,141,21,5,2,60,143,21,60,128,21,90,1,10,8,10,8,60,141,10,8,10,8,60,143,133,3,74,73,84,128,16,91,1,1,60,141,1,60,143,133,4,84,67,84,72,128,14,92,1,1,10,60,141,1,10,60,143,4,60,128,15,93,1,10,8,10,8,60,141,10,8,10,8,60,128,16,94,1,2,60,141,2,60,143,133,4,80,72,74,81,128,11,95,1,5,4,16,60,141,133,0,128,13,96,1,12,60,141,12,60,143,4,8,60,128,9,97,1,4,60,141,21,60,128,15,98,1,9,9,15,17,60,141,9,9,15,17,60,128,12,99,1,11,5,17,6,60,141,14,60,128,10,100,1,4,60,141,133,1,75,128,20,101,1,16,21,9,8,60,141,16,21,9,8,60,143,11,11,8,60,128,20,102,1,10,8,10,8,60,141,10,8,10,8,60,143,21,5,2,60,128,17,103,1,8,6,11,9,60,141,133,5,67,73,72,78,78,128,21,104,1,9,9,15,17,60,141,9,9,15,17,60,143,19,12,1,10,60,128,12,105,1,7,60,141,11,5,14,20,60,128,15,106,1,9,7,10,4,60,141,8,6,11,9,60,128,17,107,1,11,11,8,60,141,11,11,8,60,143,1,10,60,128,21,108,1,1,1,20,18,60,141,1,1,20,18,60,143,133,3,70,85,78,128,19,109,1,5,4,16,60,141,5,4,16,60,143,10,8,10,8,60,128,13,110,1,5,17,9,19,7,60,141,133,0,128,15,111,1,5,4,16,60,141,133,4,85,73,75,82,128,14,112,1,14,60,141,14,60,143,11,11,8,60,128,14,113,1,12,60,141,12,60,143,133,2,65,85,128,11,114,1,21,60,141,133,2,77,83,128,21,115,1,16,21,9,8,60,141,16,21,9,8,60,143,9,9,15,17,60,128,19,116,1,1,2,18,14,60,141,1,2,18,14,60,143,133,1,73,128,12,117,1,10,12,14,60,141,1,10,60,128,15,118,1,11,11,8,60,141,133,4,81,73,75,72,128,11,119,1,5,4,16,60,141,133,0,128,9,120,1,2,60,141,133,0,128,12,121,1,10,8,10,8,60,141,133,0,128,12,122,1,11,11,8,60,141,2,17,60,128,15,123,1,4,60,141,4,60,143,133,3,73,85,71,128,12,124,1,16,21,9,8,60,141,133,0,128,11,125,1,10,12,14,60,141,133,0,128,9,126,1,7,60,141,7,60,128,12,127,1,19,12,1,10,60,141,133,0,128,12,128,1,2,17,60,141,11,11,8,60,128,14,129,1,1,2,18,14,60,141,133,2,68,65,128,15,130,1,21,5,2,60,141,133,4,85,70,74,83,128,17,131,1,5,17,9,19,7,60,141,133,4,72,77,69,76,128,13,132,1,1,60,141,18,9,19,4,18,60,128,10,133,1,2,17,60,141,133,0,128,11,134,1,10,12,14,60,141,133,0,128,10,135,1,2,17,60,141,133,0,128,17,136,1,2,60,141,2,60,143,133,5,67,80,80,67,84,128,15,137,1,1,60,141,1,60,143,10,8,10,8,60,128,15,138,1,21,2,10,60,141,5,17,9,19,7,60,128,20,139,1,11,5,14,20,60,141,11,5,14,20,60,143,133,2,68,84,128,12,140,1,10,12,14,60,141,133,1,83,128,15,141,1,19,12,1,10,60,141,9,9,15,17,60,128,15,142,1,18,9,19,4,18,60,141,10,12,14,60,128,14,143,1,1,60,141,1,60,143,133,2,75,68,128,14,144,1,11,11,8,60,141,10,8,10,8,60,128,20,145,1,13,19,7,18,60,141,13,19,7,18,60,143,21,2,10,60,128,21,146,1,16,21,9,8,60,141,16,21,9,8,60,143,1,1,20,18,60,128,16,147,1,11,5,14,20,60,141,133,4,71,72,67,66,128,13,148,1,21,2,10,60,141,5,4,16,60,128,21,149,1,10,8,10,8,60,141,10,8,10,8,60,143,11,5,17,6,60,128,19,150,1,1,2,18,14,60,141,1,2,18,14,60,143,2,17,60,128,9,151,1,14,60,141,2,60,128,23,152,1,1,1,20,18,60,141,1,1,20,18,60,143,133,5,83,80,76,76,79,128,17,153,1,9,9,15,17,60,141,133,5,83,67,71,73,66,128,15,154,1,9,7,10,4,60,141,133,3,76,85,68,128,15,155,1,12,60,141,12,60,143,10,8,10,8,60,128,12,156,1,12,60,141,9,7,10,4,60,128,11,157,1,10,12,14,60,141,133,0,128,13,158,1,20,15,12,7,6,60,141,133,0,128,16,159,1,10,12,14,60,141,10,12,14,60,143,14,60,128,13,160,1,4,60,141,133,4,69,83,72,74,128,19,161,1,10,12,14,60,141,10,12,14,60,143,10,8,10,8,60,128,19,162,1,8,6,11,9,60,141,8,6,11,9,60,143,133,1,77,128,13,163,1,2,60,141,133,4,72,69,65,72,128,13,164,1,7,60,141,7,60,143,133,1,77,128,10,165,1,7,60,141,133,1,79,128,15,166,1,14,60,141,14,60,143,8,6,11,9,60,128,16,167,1,2,17,60,141,2,17,60,143,5,4,16,60,128,12,168,1,12,60,141,133,3,80,65,78,128,13,169,1,4,8,60,141,13,19,7,18,60,128,15,170,1,1,10,60,141,133,5,71,79,78,85,75,128,15,171,1,10,8,10,8,60,141,133,3,74,82,72,128,11,172,1,21,2,10,60,141,7,60,128,13,173,1,9,7,10,4,60,141,133,1,80,128,20,174,1,21,5,2,60,141,21,5,2,60,143,133,4,84,77,81,83,128,9,175,1,12,60,141,4,60,128,14,176,1,10,12,14,60,141,133,3,83,70,85,128,12,177,1,21,2,10,60,141,1,10,60,128,13,178,1,2,17,60,141,133,3,73,68,68,128,13,179,1,21,2,10,60,141,133,2,81,65,128,16,180,1,21,2,10,60,141,21,2,10,60,143,12,60,128,15,181,1,1,60,141,1,60,143,9,7,10,4,60,128,15,182,1,19,12,1,10,60,141,133,3,75,76,70,128,23,183,1,10,8,10,8,60,141,10,8,10,8,60,143,133,5,75,67,72,72,68,128,20,184,1,11,5,14,20,60,141,11,5,14,20,60,143,11,11,8,60,128,16,185,1,7,60,141,7,60,143,133,4,82,84,75,83,128,16,186,1,18,9,19,4,18,60,141,133,3,65,65,84,128,18,187,1,20,15,12,7,6,60,141,133,5,67,80,84,76,69,128,22,188,1,13,19,7,18,60,141,13,19,7,18,60,143,133,4,76,80,83,66,128,9,189,1,1,60,141,133,0,128,14,190,1,7,60,141,7,60,143,5,4,16,60,128,19,191,1,10,12,14,60,141,10,12,14,60,143,133,3,79,73,68,128,21,192,1,11,5,17,6,60,141,11,5,17,6,60,143,19,12,1,10,60,128,15,193,1,1,1,20,18,60,141,8,6,11,9,60,128,13,194,1,21,2,10,60,141,11,11,8,60,128,10,195,1,4,60,141,133,1,85,128,18,196,1,5,4,16,60,141,5,4,16,60,143,133,2,80,70,128,13,197,1,1,10,60,141,11,5,17,6,60,128,14,198,1,21,60,141,21,60,143,133,2,69,72,128,20,199,1,10,12,14,60,141,10,12,14,60,143,133,4,72,70,71,70,128,9,200,1,12,60,141,133,0,128,12,201,1,1,2,18,14,60,141,133,0,128,13,202,1,18,9,19,4,18,60,141,133,0,128,21,203,1,11,5,17,6,60,141,11,5,17,6,60,143,11,5,17,6,60,128,16,204,1,5,4,16,60,141,133,5,73,67,84,74,73,128,10,205,1,2,17,60,141,133,0,128,20,206,1,5,4,16,60,141,5,4,16,60,143,20,15,12,7,6,60,128,18,207,1,18,9,19,4,18,60,141,133,5,84,84,68,73,82,128,11,208,1,10,12,14,60,141,133,0,128,13,209,1,20,15,12,7,6,60,141,133,0,128,16,210,1,18,9,19,4,18,60,141,1,1,20,18,60,128,12,211,1,1,2,18,14,60,141,133,0,128,9,212,1,2,60,141,133,0,128,11,213,1,10,12,14,60,141,2,60,128,16,214,1,1,2,18,14,60,141,133,4,79,69,70,78,128,16,215,1,9,9,15,17,60,141,18,9,19,4,18,60,128,13,216,1,5,17,9,19,7,60,141,133,0,128,17,217,1,18,9,19,4,18,60,141,133,4,66,73,66,79,128,16,218,1,5,4,16,60,141,5,4,16,60,143,2,60,128,21,219,1,9,9,15,17,60,141,9,9,15,17,60,143,9,9,15,17,60,128,16,220,1,17,3,15,1,20,60,141,133,3,79,72,76,128,23,221,1,5,17,9,19,7,60,141,5,17,9,19,7,60,143,13,19,7,18,60,128,13,222,1,7,60,141,7,60,143,133,1,66,128,10,223,1,21,60,141,133,1,70,128,12,224,1,21,2,10,60,141,133,1,85,128,21,225,1,18,9,19,4,18,60,141,18,9,19,4,18,60,143,2,17,60,128,23,226,1,17,3,15,1,20,60,141,17,3,15,1,20,60,143,19,12,1,10,60,128,18,227,1,1,10,60,141,1,10,60,143,133,4,79,70,74,72,128,17,228,1,1,10,60,141,1,10,60,143,13,19,7,18,60,128,19,229,1,9,7,10,4,60,141,9,7,10,4,60,143,133,1,83,128,23,230,1,18,9,19,4,18,60,141,18,9,19,4,18,60,143,1,1,20,18,60,128,13,231,1,18,9,19,4,18,60,141,133,0,128,12,232,1,1,2,18,14,60,141,133,0,128,15,233,1,11,5,14,20,60,141,13,19,7,18,60,128,10,234,1,2,17,60,141,133,0,128,14,235,1,12,60,141,12,60,143,133,2,71,69,128,12,236,1,1,1,20,18,60,141,133,0,128,12,237,1,16,21,9,8,60,141,133,0,128,21,238,1,11,5,14,20,60,141,11,5,14,20,60,143,11,5,17,6,60,128,21,239,1,19,12,1,10,60,141,19,12,1,10,60,143,19,12,1,10,60,128,15,240,1,10,8,10,8,60,141,11,5,17,6,60,128,13,241,1,4,60,141,4,60,143,133,1,70,128,9,242,1,21,60,141,133,0,128,19,243,1,10,12,14,60,141,10,12,14,60,143,9,7,10,4,60,128,17,244,1,4,8,60,141,4,8,60,143,9,7,10,4,60,128,13,245,1,10,8,10,8,60,141,133,1,68,128,9,246,1,7,60,141,133,0,128,13,247,1,11,5,17,6,60,141,133,1,67,128,21,248,1,1,2,18,14,60,141,1,2,18,14,60,143,133,3,67,74,71,128,15,249,1,11,5,17,6,60,141,11,5,17,6,60,128,16,250,1,13,19,7,18,60,141,133,4,66,76,85,69,128,15,251,1,11,5,14,20,60,141,8,6,11,9,60,128,13,252,1,14,60,141,14,60,143,1,10,60,128,10,253,1,1,10,60,141,133,0,128,12,254,1,14,60,141,133,3,65,76,66,128,12,255,1,21,60,141,1,2,18,14,60,128,25,0,2,20,15,12,7,6,60,141,20,15,12,7,6,60,143,133,5,75,69,71,80,85,128,19,1,2,19,12,1,10,60,141,19,12,1,10,60,143,133,1,82,128,10,2,2,4,8,60,141,133,0,128,16,3,2,9,9,15,17,60,141,133,4,82,78,78,71,128,14,4,2,5,17,9,19,7,60,141,133,1,72,128,13,5,2,2,17,60,141,133,3,79,83,73,128,19,6,2,21,2,10,60,141,21,2,10,60,143,16,21,9,8,60,128,19,7,2,10,8,10,8,60,141,10,8,10,8,60,143,1,10,60,128,22,8,2,16,21,9,8,60,141,16,21,9,8,60,143,18,9,19,4,18,60,128,16,9,2,5,17,9,19,7,60,141,9,9,15,17,60,128,14,10,2,10,12,14,60,141,13,19,7,18,60,128,15,11,2,10,12,14,60,141,133,4,71,76,66,76,128,14,12,2,2,17,60,141,133,4,83,84,73,76,128,12,13,2,21,60,141,8,6,11,9,60,128,21,14,2,9,9,15,17,60,141,9,9,15,17,60,143,8,6,11,9,60,128,21,15,2,11,5,17,6,60,141,11,5,17,6,60,143,1,1,20,18,60,128,17,16,2,4,8,60,141,4,8,60,143,133,3,70,65,67,128,10,17,2,12,60,141,133,1,75,128,24,18,2,20,15,12,7,6,60,141,20,15,12,7,6,60,143,133,4,80,77,85,83,128,17,19,2,7,60,141,7,60,143,133,5,75,83,80,79,66,128,15,20,2,5,4,16,60,141,133,4,70,82,69,79,128,15,21,2,4,60,141,4,60,143,133,3,71,69,65,128,19,22,2,21,2,10,60,141,21,2,10,60,143,1,2,18,14,60,128,21,23,2,8,6,11,9,60,141,8,6,11,9,60,143,133,3,74,73,83,128,21,24,2,9,9,15,17,60,141,9,9,15,17,60,143,133,3,70,82,78,128,13,25,2,12,60,141,133,4,65,73,82,81,128,18,26,2,4,8,60,141,4,8,60,143,20,15,12,7,6,60,128,18,27,2,11,5,17,6,60,141,11,5,17,6,60,143,4,60,128,12,28,2,4,60,141,9,9,15,17,60,128,23,29,2,11,5,17,6,60,141,11,5,17,6,60,143,133,5,81,83,80,83,66,128,19,30,2,19,12,1,10,60,141,19,12,1,10,60,143,2,17,60,128,14,31,2,21,60,141,133,5,65,72,80,84,71,128,21,32,2,21,5,2,60,141,21,5,2,60,143,133,5,68,80,66,82,81,128,15,33,2,2,17,60,141,2,17,60,143,133,1,73,128,12,34,2,2,60,141,9,7,10,4,60,128,12,35,2,9,7,10,4,60,141,133,0,128,14,36,2,10,12,14,60,141,133,3,73,70,70,128,19,37,2,5,4,16,60,141,5,4,16,60,143,1,1,20,18,60,128,12,38,2,19,12,1,10,60,141,133,0,128,18,39,2,9,9,15,17,60,141,9,9,15,17,60,143,1,60,128,19,40,2,9,7,10,4,60,141,9,7,10,4,60,143,133,1,69,128,21,41,2,11,5,17,6,60,141,11,5,17,6,60,143,11,5,17,6,60,128,9,42,2,21,60,141,1,60,128,10,43,2,1,60,141,133,1,79,128,9,44,2,7,60,141,7,60,128,21,45,2,9,9,15,17,60,141,9,9,15,17,60,143,19,12,1,10,60,128,12,46,2,1,60,141,1,60,143,12,60,128,23,47,2,1,2,18,14,60,141,1,2,18,14,60,143,133,5,70,83,83,79,65,128,9,48,2,14,60,141,133,0,128,10,49,2,2,17,60,141,133,0,128,15,50,2,21,60,141,21,60,143,13,19,7,18,60,128,22,51,2,10,8,10,8,60,141,10,8,10,8,60,143,133,4,83,65,83,81,128,13,52,2,21,60,141,21,60,143,133,1,79,128,12,53,2,12,60,141,11,5,17,6,60,128,10,54,2,1,10,60,141,133,0,128,14,55,2,4,60,141,133,5,77,81,76,66,70,128,24,56,2,18,9,19,4,18,60,141,18,9,19,4,18,60,143,5,17,9,19,7,60,128,11,57,2,21,5,2,60,141,133,0,128,16,58,2,20,15,12,7,6,60,141,133,3,66,73,85,128,11,59,2,10,12,14,60,141,133,0,128,15,60,2,2,17,60,141,133,5,78,83,75,69,69,128,13,61,2,4,60,141,133,4,74,73,72,76,128,15,62,2,11,5,14,20,60,141,8,6,11,9,60,128,13,63,2,13,19,7,18,60,141,133,1,71,128,13,64,2,11,5,17,6,60,141,2,17,60,128,16,65,2,1,2,18,14,60,141,133,4,68,76,83,73,128,13,66,2,19,12,1,10,60,141,2,17,60,128,15,67,2,1,10,60,141,133,5,70,68,73,79,75,128,13,68,2,2,60,141,2,60,143,1,10,60,128,15,69,2,19,12,1,10,60,141,19,12,1,10,60,128,12,70,2,11,5,14,20,60,141,12,60,128,17,71,2,10,8,10,8,60,141,133,5,67,85,81,72,78,128,13,72,2,2,17,60,141,133,3,66,78,78,128,14,73,2,19,12,1,10,60,141,133,2,78,83,128,12,74,2,13,19,7,18,60,141,133,0,128,14,75,2,4,60,141,133,5,85,83,76,74,82,128,19,76,2,4,8,60,141,4,8,60,143,133,5,79,74,80,82,66,128,15,77,2,1,2,18,14,60,141,11,5,17,6,60,128,16,78,2,21,2,10,60,141,133,5,71,71,69,65,76,128,11,79,2,14,60,141,133,2,70,81,128,10,80,2,4,8,60,141,4,60,128,22,81,2,10,8,10,8,60,141,10,8,10,8,60,143,133,4,74,81,78,74,128,13,82,2,16,21,9,8,60,141,2,17,60,128,17,83,2,4,8,60,141,4,8,60,143,133,3,79,84,73,128,12,84,2,21,60,141,133,3,69,74,80,128,15,85,2,7,60,141,7,60,143,9,7,10,4,60,128,12,86,2,11,5,14,20,60,141,133,0,128,16,87,2,1,2,18,14,60,141,133,4,85,73,73,76,128,9,88,2,12,60,141,133,0,128,19,89,2,11,11,8,60,141,11,11,8,60,143,9,9,15,17,60,128,14,90,2,11,5,17,6,60,141,5,4,16,60,128,21,91,2,10,8,10,8,60,141,10,8,10,8,60,143,133,3,72,77,67,128,14,92,2,18,9,19,4,18,60,141,133,1,85,128,13,93,2,4,8,60,141,10,8,10,8,60,128,19,94,2,13,19,7,18,60,141,13,19,7,18,60,143,133,1,85,128,11,95,2,12,60,141,11,11,8,60,128,22,96,2,9,7,10,4,60,141,9,7,10,4,60,143,20,15,12,7,6,60,128,22,97,2,11,5,17,6,60,141,11,5,17,6,60,143,133,4,74,72,85,68,128,11,98,2,10,12,14,60,141,14,60,128,12,99,2,14,60,141,9,7,10,4,60,128,12,100,2,19,12,1,10,60,141,133,0,128,17,101,2,1,60,141,1,60,143,133,5,66,65,74,74,82,128,13,102,2,20,15,12,7,6,60,141,4,60,128,14,103,2,7,60,141,7,60,143,133,2,81,73,128,13,104,2,14,60,141,133,4,80,65,80,72,128,9,105,2,2,60,141,133,0,128,12,106,2,1,1,20,18,60,141,133,0,128,15,107,2,21,60,141,21,60,143,133,3,79,79,70,128,17,108,2,21,5,2,60,141,21,5,2,60,143,133,1,84,128,11,109,2,21,5,2,60,141,133,0,128,13,110,2,14,60,141,14,60,143,133,1,66,128,11,111,2,4,8,60,141,133,1,81,128,19,112,2,5,4,16,60,141,5,4,16,60,143,10,8,10,8,60,128,14,113,2,16,21,9,8,60,141,133,2,76,76,128,11,114,2,21,5,2,60,141,14,60,128,20,115,2,21,2,10,60,141,21,2,10,60,143,133,4,71,72,73,83,128,13,116,2,1,2,18,14,60,141,133,1,68,128,12,117,2,1,60,141,9,7,10,4,60,128,13,118,2,14,60,141,133,4,78,83,76,76,128,12,119,2,11,5,14,20,60,141,133,0,128,21,120,2,10,8,10,8,60,141,10,8,10,8,60,143,133,3,76,81,73,128,12,121,2,14,60,141,9,9,15,17,60,128,11,122,2,11,11,8,60,141,133,0,128,14,123,2,10,12,14,60,141,133,3,75,72,81,128,11,124,2,21,5,2,60,141,133,0,128,18,125,2,2,17,60,141,2,17,60,143,5,17,9,19,7,60,128,14,126,2,16,21,9,8,60,141,133,2,71,65,128,12,127,2,1,60,141,1,60,143,12,60,128,19,128,2,5,4,16,60,141,5,4,16,60,143,8,6,11,9,60,128,14,129,2,11,5,14,20,60,141,10,12,14,60,128,25,130,2,17,3,15,1,20,60,141,17,3,15,1,20,60,143,133,5,80,83,71,80,84,128,17,131,2,1,10,60,141,1,10,60,143,133,3,84,69,72,128,14,132,2,2,60,141,133,5,67,66,72,84,65,128,20,133,2,21,5,2,60,141,21,5,2,60,143,133,4,77,74,71,85,128,11,134,2,5,4,16,60,141,133,0,128,16,135,2,20,15,12,7,6,60,141,133,3,84,73,71,128,10,136,2,4,8,60,141,2,60,128,18,137,2,5,4,16,60,141,5,4,16,60,143,10,12,14,60,128,20,138,2,5,4,16,60,141,5,4,16,60,143,20,15,12,7,6,60,128,13,139,2,10,8,10,8,60,141,133,1,70,128,17,140,2,10,12,14,60,141,10,12,14,60,143,133,1,81,128,21,141,2,5,4,16,60,141,5,4,16,60,143,133,5,68,72,75,75,79,128,13,142,2,9,7,10,4,60,141,133,1,72,128,12,143,2,9,9,15,17,60,141,133,0,128,21,144,2,10,8,10,8,60,141,10,8,10,8,60,143,9,7,10,4,60,128,10,145,2,2,17,60,141,133,0,128,9,146,2,12,60,141,133,0,128,19,147,2,19,12,1,10,60,141,19,12,1,10,60,143,133,1,75,128,20,148,2,11,5,14,20,60,141,11,5,14,20,60,143,5,4,16,60,128,11,149,2,11,11,8,60,141,133,0,128,13,150,2,19,12,1,10,60,141,133,1,75,128,19,151,2,19,12,1,10,60,141,19,12,1,10,60,143,133,1,80,128,17,152,2,5,4,16,60,141,5,4,16,60,143,133,1,81,128,13,153,2,14,60,141,17,3,15,1,20,60,128,10,154,2,1,60,141,133,1,68,128,17,155,2,5,4,16,60,141,5,4,16,60,143,1,10,60,128,13,156,2,14,60,141,14,60,143,1,10,60,128,18,157,2,8,6,11,9,60,141,8,6,11,9,60,143,4,60,128,10,158,2,4,60,141,133,1,67,128,12,159,2,11,11,8,60,141,133,1,75,128,11,160,2,11,11,8,60,141,133,0,128,13,161,2,9,9,15,17,60,141,1,10,60,128,12,162,2,11,11,8,60,141,133,1,75,128,18,163,2,19,12,1,10,60,141,19,12,1,10,60,143,21,60,128,17,164,2,1,60,141,1,60,143,133,5,70,70,81,81,70,128,17,165,2,2,17,60,141,2,17,60,143,9,9,15,17,60,128,20,166,2,17,3,15,1,20,60,141,17,3,15,1,20,60,143,2,60,128,17,167,2,21,60,141,21,60,143,133,5,81,65,78,69,81,128,13,168,2,14,60,141,14,60,143,133,1,65,128,15,169,2,10,8,10,8,60,141,133,3,71,72,71,128,12,170,2,1,1,20,18,60,141,133,0,128,12,171,2,10,8,10,8,60,141,133,0,128,11,172,2,10,12,14,60,141,133,0,128,12,173,2,8,6,11,9,60,141,133,0,128,22,174,2,20,15,12,7,6,60,141,20,15,12,7,6,60,143,21,2,10,60,128,19,175,2,9,7,10,4,60,141,9,7,10,4,60,143,133,1,75,128,12,176,2,9,9,15,17,60,141,133,0,128,9,177,2,1,60,141,2,60,128,12,178,2,2,60,141,11,5,17,6,60,128,18,179,2,1,1,20,18,60,141,1,1,20,18,60,143,12,60,128,21,180,2,21,2,10,60,141,21,2,10,60,143,133,5,67,72,83,65,72,128,20,181,2,1,1,20,18,60,141,1,1,20,18,60,143,133,2,70,81,128,12,182,2,13,19,7,18,60,141,7,60,128,11,183,2,11,11,8,60,141,133,0,128,9,184,2,14,60,141,133,0,128,12,185,2,4,60,141,1,2,18,14,60,128,14,186,2,12,60,141,133,5,68,77,85,85,82,128,16,187,2,5,4,16,60,141,133,5,76,70,83,67,76,128,14,188,2,1,2,18,14,60,141,21,5,2,60,128,17,189,2,21,60,141,21,60,143,133,5,85,84,67,76,83,128,13,190,2,9,7,10,4,60,141,133,1,67,128,18,191,2,1,10,60,141,1,10,60,143,133,4,66,71,71,82,128,17,192,2,21,5,2,60,141,21,5,2,60,143,2,17,60,128,13,193,2,16,21,9,8,60,141,1,10,60,128,15,194,2,9,7,10,4,60,141,13,19,7,18,60,128,15,195,2,4,60,141,4,60,143,19,12,1,10,60,128,18,196,2,2,17,60,141,2,17,60,143,18,9,19,4,18,60,128,11,197,2,5,4,16,60,141,2,60,128,16,198,2,10,8,10,8,60,141,20,15,12,7,6,60,128,20,199,2,1,2,18,14,60,141,1,2,18,14,60,143,21,2,10,60,128,14,200,2,2,60,141,2,60,143,10,12,14,60,128,20,201,2,19,12,1,10,60,141,19,12,1,10,60,143,133,2,68,80,128,12,202,2,10,8,10,8,60,141,21,60,128,19,203,2,11,11,8,60,141,11,11,8,60,143,19,12,1,10,60,128,17,204,2,13,19,7,18,60,141,133,5,78,83,66,81,74,128,18,205,2,8,6,11,9,60,141,8,6,11,9,60,143,4,60,128,13,206,2,7,60,141,7,60,143,133,1,69,128,13,207,2,16,21,9,8,60,141,4,8,60,128,9,208,2,7,60,141,1,60,128,12,209,2,10,8,10,8,60,141,133,0,128,16,210,2,1,10,60,141,1,10,60,143,133,2,70,69,128,16,211,2,21,5,2,60,141,133,5,72,81,80,70,76,128,16,212,2,21,5,2,60,141,133,5,80,72,69,75,79,128,9,213,2,14,60,141,133,0,128,17,214,2,10,12,14,60,141,10,12,14,60,143,133,1,75,128,22,215,2,9,9,15,17,60,141,9,9,15,17,60,143,20,15,12,7,6,60,128,12,216,2,1,2,18,14,60,141,133,0,128,14,217,2,2,17,60,141,2,17,60,143,14,60,128,15,218,2,9,7,10,4,60,141,13,19,7,18,60,128,18,219,2,17,3,15,1,20,60,141,133,5,72,85,71,72,79,128,13,220,2,1,1,20,18,60,141,4,8,60,128,16,221,2,19,12,1,10,60,141,20,15,12,7,6,60,128,13,222,2,8,6,11,9,60,141,1,10,60,128,19,223,2,16,21,9,8,60,141,16,21,9,8,60,143,133,1,79,128,13,224,2,11,5,14,20,60,141,133,1,85,128,16,225,2,7,60,141,7,60,143,17,3,15,1,20,60,128,20,226,2,1,1,20,18,60,141,1,1,20,18,60,143,5,4,16,60,128,20,227,2,16,21,9,8,60,141,16,21,9,8,60,143,133,2,72,72,128,20,228,2,9,7,10,4,60,141,9,7,10,4,60,143,11,11,8,60,128,22,229,2,17,3,15,1,20,60,141,17,3,15,1,20,60,143,133,2,65,83,128,12,230,2,19,12,1,10,60,141,133,0,128,12,231,2,13,19,7,18,60,141,133,0,128,13,232,2,4,8,60,141,1,2,18,14,60,128,16,233,2,11,5,17,6,60,141,18,9,19,4,18,60,128,15,234,2,11,5,14,20,60,141,1,1,20,18,60,128,12,235,2,11,5,14,20,60,141,133,0,128,16,236,2,17,3,15,1,20,60,141,133,3,72,69,65,128,18,237,2,1,10,60,141,1,10,60,143,133,4,83,80,84,80,128,17,238,2,11,11,8,60,141,11,11,8,60,143,4,8,60,128,15,239,2,2,60,141,2,60,143,1,1,20,18,60,128,17,240,2,7,60,141,7,60,143,133,5,78,69,66,83,72,128,13,241,2,9,7,10,4,60,141,2,17,60,128,11,242,2,21,5,2,60,141,12,60,128,21,243,2,10,8,10,8,60,141,10,8,10,8,60,143,13,19,7,18,60,128,15,244,2,11,5,17,6,60,141,8,6,11,9,60,128,13,245,2,12,60,141,12,60,143,133,1,68,128,9,246,2,4,60,141,14,60,128,12,247,2,7,60,141,7,60,143,14,60,128,10,248,2,2,17,60,141,7,60,128,18,249,2,21,2,10,60,141,21,2,10,60,143,133,2,71,77,128,17,250,2,9,9,15,17,60,141,133,5,81,85,67,69,75,128,20,251,2,19,12,1,10,60,141,19,12,1,10,60,143,133,2,82,78,128,23,252,2,8,6,11,9,60,141,8,6,11,9,60,143,133,5,66,68,85,66,80,128,22,253,2,8,6,11,9,60,141,8,6,11,9,60,143,133,4,70,76,81,74,128,15,254,2,1,2,18,14,60,141,9,7,10,4,60,128,17,255,2,11,11,8,60,141,11,11,8,60,143,133,1,76,128,10,0,3,2,17,60,141,133,0,128,23,1,3,18,9,19,4,18,60,141,18,9,19,4,18,60,143,8,6,11,9,60,128,9,2,3,21,60,141,133,0,128,13,3,3,20,15,12,7,6,60,141,133,0,128,15,4,3,9,9,15,17,60,141,133,3,77,68,84,128,15,5,3,11,11,8,60,141,18,9,19,4,18,60,128,20,6,3,9,9,15,17,60,141,9,9,15,17,60,143,5,4,16,60,128,12,7,3,19,12,1,10,60,141,133,0,128,10,8,3,4,8,60,141,133,0,128,15,9,3,9,9,15,17,60,141,11,5,17,6,60,128,12,10,3,10,8,10,8,60,141,133,0,128,11,11,3,5,4,16,60,141,133,0,128,12,12,3,10,8,10,8,60,141,133,0,128,19,13,3,1,10,60,141,1,10,60,143,133,5,84,76,72,70,73,128,16,14,3,17,3,15,1,20,60,141,11,5,14,20,60,128,11,15,3,11,11,8,60,141,133,0,128,12,16,3,21,5,2,60,141,133,1,67,128,21,17,3,13,19,7,18,60,141,13,19,7,18,60,143,9,9,15,17,60,128,11,18,3,21,2,10,60,141,133,0,128,15,19,3,4,8,60,141,4,8,60,143,133,1,71,128,15,20,3,9,7,10,4,60,141,1,1,20,18,60,128,13,21,3,2,60,141,2,60,143,2,17,60,128,15,22,3,21,60,141,21,60,143,11,5,14,20,60,128,15,23,3,20,15,12,7,6,60,141,11,11,8,60,128,25,24,3,17,3,15,1,20,60,141,17,3,15,1,20,60,143,133,5,79,74,76,74,77,128,13,25,3,18,9,19,4,18,60,141,133,0,128,12,26,3,1,2,18,14,60,141,21,60,128,21,27,3,5,17,9,19,7,60,141,5,17,9,19,7,60,143,133,1,85,128,15,28,3,19,12,1,10,60,141,133,3,82,79,76,128,12,29,3,19,12,1,10,60,141,133,0,128,18,30,3,13,19,7,18,60,141,13,19,7,18,60,143,1,60,128,23,31,3,5,17,9,19,7,60,141,5,17,9,19,7,60,143,19,12,1,10,60,128,14,32,3,2,60,141,2,60,143,21,2,10,60,128,16,33,3,9,7,10,4,60,141,133,4,80,69,78,67,128,17,34,3,11,11,8,60,141,11,11,8,60,143,133,1,80,128,9,35,3,1,60,141,133,0,128,17,36,3,11,11,8,60,141,11,11,8,60,143,133,1,70,128,13,37,3,14,60,141,5,17,9,19,7,60,128,13,38,3,9,9,15,17,60,141,1,10,60,128,12,39,3,4,60,141,4,60,143,1,60,128,16,40,3,7,60,141,7,60,143,133,4,78,68,75,85,128,12,41,3,21,5,2,60,141,133,1,66,128,19,42,3,9,7,10,4,60,141,9,7,10,4,60,143,4,8,60,128,14,43,3,17,3,15,1,20,60,141,1,10,60,128,12,44,3,21,5,2,60,141,1,10,60,128,13,45,3,2,17,60,141,133,3,71,73,67,128,15,46,3,20,15,12,7,6,60,141,5,4,16,60,128,20,47,3,21,2,10,60,141,21,2,10,60,143,133,4,70,72,74,85,128,15,48,3,21,60,141,21,60,143,133,3,77,84,76,128,9,49,3,1,60,141,133,0,128,15,50,3,5,17,9,19,7,60,141,133,2,78,80,128,9,51,3,2,60,141,133,0,128,11,52,3,21,60,141,5,4,16,60,128,12,53,3,11,5,14,20,60,141,133,0,128,9,54,3,2,60,141,133,0,128,22,55,3,20,15,12,7,6,60,141,20,15,12,7,6,60,143,21,2,10,60,128,15,56,3,1,1,20,18,60,141,19,12,1,10,60,128,13,57,3,5,17,9,19,7,60,141,133,0,128,12,58,3,2,17,60,141,10,12,14,60,128,13,59,3,14,60,141,14,60,143,2,17,60,128,11,60,3,5,4,16,60,141,133,0,128,9,61,3,21,60,141,133,0,128,13,62,3,17,3,15,1,20,60,141,133,0,128,10,63,3,1,10,60,141,12,60,128,21,64,3,8,6,11,9,60,141,8,6,11,9,60,143,9,7,10,4,60,128,13,65,3,5,4,16,60,141,21,2,10,60,128,9,66,3,4,60,141,133,0,128,15,67,3,13,19,7,18,60,141,19,12,1,10,60,128,11,68,3,21,5,2,60,141,133,0,128,22,69,3,18,9,19,4,18,60,141,18,9,19,4,18,60,143,11,11,8,60,128,19,70,3,13,19,7,18,60,141,13,19,7,18,60,143,2,17,60,128,12,71,3,16,21,9,8,60,141,12,60,128,14,72,3,216,13,19,7,18,60,141,133,1,75,128,14,73,3,216,17,3,15,1,20,60,141,133,0,128,12,74,3,216,4,8,60,141,133,1,71,128,41,75,3,216,8,6,11,9,60,141,133,28,70,68,73,79,75,84,69,72,66,71,71,82,70,69,66,68,85,66,80,70,76,81,74,80,69,78,67,71,128,18,76,3,216,9,7,10,4,60,141,133,5,80,69,78,67,71,128,16,77,3,216,14,60,141,133,6,82,78,78,71,85,75,128,12,78,3,216,21,5,2,60,141,133,0,128,16,79,3,216,12,60,141,133,6,68,77,85,85,82,68,128,29,80,3,216,7,60,141,133,19,67,66,72,84,65,72,85,71,72,79,78,69,66,83,72,78,68,75,85,128,13,81,3,216,19,12,1,10,60,141,133,0,128,36,82,3,216,9,9,15,17,60,141,133,23,70,68,73,79,75,84,69,72,66,71,71,82,70,69,83,80,84,80,84,76,72,70,73,128,16,83,3,216,5,4,16,60,141,133,4,70,72,74,85,128,14,84,3,216,11,11,8,60,141,133,2,80,70,128,13,85,3,216,10,8,10,8,60,141,133,0,128,19,86,3,216,16,21,9,8,60,141,133,6,68,77,85,85,82,68,128,13,87,3,216,1,2,18,14,60,141,133,0,128,10,88,3,216,4,60,141,133,0,128,16,89,3,216,21,2,10,60,141,133,4,70,72,74,85,128,10,90,3,216,21,60,141,133,0,128,13,91,3,216,1,1,20,18,60,141,133,0,128,14,92,3,216,5,17,9,19,7,60,141,133,0,128,18,93,3,216,20,15,12,7,6,60,141,133,4,70,72,74,85,128,27,94,3,216,11,5,17,6,60,141,133,14,70,68,73,79,75,84,69,72,66,71,71,82,70,69,128,10,95,3,216,1,60,141,133,0,128,13,96,3,216,11,5,14,20,60,141,133,0,128,10,97,3,216,2,60,141,133,0,128,12,98,3,216,2,17,60,141,133,1,75,128,13,99,3,216,10,12,14,60,141,133,1,75,128,16,100,3,216,18,9,19,4,18,60,141,133,2,80,70,128,17,101,3,216,1,10,60,141,133,6,68,77,85,85,82,68,128,6,102,3,129,142,128,0
>5008	8d 85 00 8f 85 00 80 10 0b 00 11 03 0f 01 14 3c
>5018	8d 85 00 8f 85 00 80 0d 0c 00 04 08 3c 8d 85 00
>5028	8f 85 00 80 0f 0d 00 08 06 0b 09 3c 8d 85 00 8f
>5038	85 00 80 0f 0e 00 09 07 0a 04 3c 8d 85 00 8f 85
>5048	00 80 0c 0f 00 0e 3c 8d 85 00 8f 85 00 80 0e 10
>5058	00 15 05 02 3c 8d 85 00 8f 85 00 80 0c 11 00 0c
>5068	3c 8d 85 00 8f 85 00 80 0c 12 00 07 3c 8d 85 00
>5078	8f 85 00 80 0f 13 00 13 0c 01 0a 3c 8d 85 00 8f
>5088	85 00 80 0f 14 00 09 09 0f 11 3c 8d 85 00 8f 85
>5098	00 80 0e 15 00 05 04 10 3c 8d 85 00 8f 85 00 80
>50a8	0e 16 00 0b 0b 08 3c 8d 85 00 8f 85 00 80 0f 17
>50b8	00 0a 08 0a 08 3c 8d 85 00 8f 85 00 80 0f 18 00
>50c8	10 15 09 08 3c 8d 85 00 8f 85 00 80 0f 19 00 01
>50d8	02 12 0e 3c 8d 85 00 8f 85 00 80 0c 1a 00 04 3c
>50e8	8d 85 00 8f 85 00 80 0e 1b 00 15 02 0a 3c 8d 85
>50f8	00 8f 85 00 80 0c 1c 00 15 3c 8d 85 00 8f 85 00
>5108	80 0f 1d 00 01 01 14 12 3c 8d 85 00 8f 85 00 80
>5118	10 1e 00 05 11 09 13 07 3c 8d 85 00 8f 85 00 80
>5128	10 1f 00 14 0f 0c 07 06 3c 8d 85 00 8f 85 00 80
>5138	0f 20 00 0b 05 11 06 3c 8d 85 00 8f 85 00 80 0c
>5148	21 00 01 3c 8d 85 00 8f 85 00 80 0f 22 00 0b 05
>5158	0e 14 3c 8d 85 00 8f 85 00 80 0c 23 00 02 3c 8d
>5168	85 00 8f 85 00 80 0d 24 00 02 11 3c 8d 85 00 8f
>5178	85 00 80 0e 25 00 0a 0c 0e 3c 8d 85 00 8f 85 00
>5188	80 10 26 00 12 09 13 04 12 3c 8d 85 00 8f 85 00
>5198	80 0d 27 00 01 0a 3c 8d 85 00 8f 85 00 80 15 28
>51a8	00 14 0f 0c 07 06 3c 8d 14 0f 0c 07 06 3c 8f 02
>51b8	11 3c 80 14 29 00 15 02 0a 3c 8d 15 02 0a 3c 8f
>51c8	85 04 47 41 4d 51 80 0d 2a 00 11 03 0f 01 14 3c
>51d8	8d 85 00 80 09 2b 00 0e 3c 8d 01 3c 80 12 2c 00
>51e8	13 0c 01 0a 3c 8d 13 0c 01 0a 3c 8f 15 3c 80 15
>51f8	2d 00 01 02 12 0e 3c 8d 01 02 12 0e 3c 8f 85 03
>5208	41 4a 45 80 09 2e 00 0e 3c 8d 85 00 80 13 2f 00
>5218	0a 0c 0e 3c 8d 0a 0c 0e 3c 8f 09 09 0f 11 3c 80
>5228	0e 30 00 04 08 3c 8d 85 04 4a 46 55 4e 80 0a 31
>5238	00 04 08 3c 8d 85 00 80 0a 32 00 02 3c 8d 85 01
>5248	4e 80 16 33 00 12 09 13 04 12 3c 8d 12 09 13 04
>5258	12 3c 8f 85 02 48 4b 80 0e 34 00 04 3c 8d 04 3c
>5268	8f 85 02 55 55 80 09 35 00 07 3c 8d 85 00 80 0e
>5278	36 00 05 04 10 3c 8d 01 02 12 0e 3c 80 0d 37 00
>5288	01 3c 8d 85 04 4e 53 4e 53 80 0a 38 00 15 3c 8d
>5298	85 01 47 80 0e 39 00 01 02 12 0e 3c 8d 85 02 46
>52a8	42 80 0b 3a 00 0a 0c 0e 3c 8d 85 00 80 0d 3b 00
>52b8	0b 0b 08 3c 8d 0b 0b 08 3c 80 11 3c 00 07 3c 8d
>52c8	07 3c 8f 85 05 51 53 46 51 41 80 0d 3d 00 13 0c
>52d8	01 0a 3c 8d 04 08 3c 80 11 3e 00 08 06 0b 09 3c
>52e8	8d 85 05 4c 55 4a 4a 4b 80 16 3f 00 09 07 0a 04
>52f8	3c 8d 09 07 0a 04 3c 8f 12 09 13 04 12 3c 80 10
>5308	40 00 01 02 12 0e 3c 8d 12 09 13 04 12 3c 80 0e
>5318	41 00 04 3c 8d 04 3c 8f 15 05 02 3c 80 0a 42 00
>5328	01 0a 3c 8d 85 00 80 0f 43 00 01 01 14 12 3c 8d
>5338	0b 05 11 06 3c 80 09 44 00 0c 3c 8d 04 3c 80 0f
>5348	45 00 15 3c 8d 15 3c 8f 01 01 14 12 3c 80 0e 46
>5358	00 04 08 3c 8d 85 04 47 52 50 52 80 10 47 00 11
>5368	03 0f 01 14 3c 8d 85 03 46 4d 4b 80 11 48 00 05
>5378	04 10 3c 8d 05 04 10 3c 8f 02 11 3c 80 12 49 00
>5388	01 02 12 0e 3c 8d 01 02 12 0e 3c 8f 02 3c 80 09
>5398	4a 00 01 3c 8d 85 00 80 15 4b 00 10 15 09 08 3c
>53a8	8d 10 15 09 08 3c 8f 0b 05 11 06 3c 80 10 4c 00
>53b8	12 09 13 04 12 3c 8d 85 03 49 44 4e 80 13 4d 00
>53c8	09 07 0a 04 3c 8d 09 07 0a 04 3c 8f 85 01 4f 80
>53d8	0c 4e 00 01 02 12 0e 3c 8d 15 3c 80 0e 4f 00 0e
>53e8	3c 8d 0e 3c 8f 15 05 02 3c 80 11 50 00 0b 05 11
>53f8	06 3c 8d 85 05 54 4f 50 54 4e 80 0f 51 00 0c 3c
>5408	8d 0c 3c 8f 0a 08 0a 08 3c 80 0f 52 00 0b 05 0e
>5418	14 3c 8d 85 03 48 47 44 80 14 53 00 14 0f 0c 07
>5428	06 3c 8d 14 0f 0c 07 06 3c 8f 15 3c 80 0c 54 00
>5438	04 3c 8d 0d 13 07 12 3c 80 09 55 00 04 3c 8d 85
>5448	00 80 15 56 00 05 04 10 3c 8d 05 04 10 3c 8f 85
>5458	05 44 54 47 46 41 80 0c 57 00 10 15 09 08 3c 8d
>5468	85 00 80 0b 58 00 0e 3c 8d 85 02 55 47 80 0b 59
>5478	00 0c 3c 8d 85 02 4a 4d 80 0d 5a 00 10 15 09 08
>5488	3c 8d 04 08 3c 80 0e 5b 00 01 3c 8d 85 05 41 4a
>5498	4a 50 4d 80 14 5c 00 14 0f 0c 07 06 3c 8d 14 0f
>54a8	0c 07 06 3c 8f 02 3c 80 0c 5d 00 09 07 0a 04 3c
>54b8	8d 85 00 80 0e 5e 00 05 04 10 3c 8d 85 03 50 4f
>54c8	4a 80 0e 5f 00 0a 0c 0e 3c 8d 0b 05 11 06 3c 80
>54d8	0e 60 00 0c 3c 8d 85 05 44 4a 48 52 51 80 19 61
>54e8	00 05 11 09 13 07 3c 8d 05 11 09 13 07 3c 8f 85
>54f8	05 50 44 4b 52 55 80 0c 62 00 0b 05 11 06 3c 8d
>5508	85 00 80 0d 63 00 0b 05 0e 14 3c 8d 02 11 3c 80
>5518	0a 64 00 01 0a 3c 8d 85 00 80 0b 65 00 05 04 10
>5528	3c 8d 85 00 80 10 66 00 05 04 10 3c 8d 05 04 10
>5538	3c 8f 04 3c 80 11 67 00 02 11 3c 8d 02 11 3c 8f
>5548	0b 05 11 06 3c 80 0f 68 00 0a 08 0a 08 3c 8d 09
>5558	07 0a 04 3c 80 0e 69 00 0e 3c 8d 0e 3c 8f 15 02
>5568	0a 3c 80 0f 6a 00 04 3c 8d 04 3c 8f 85 03 42 55
>5578	4b 80 11 6b 00 09 07 0a 04 3c 8d 85 05 49 4b 49
>5588	42 4c 80 0d 6c 00 12 09 13 04 12 3c 8d 02 3c 80
>5598	14 6d 00 15 02 0a 3c 8d 15 02 0a 3c 8f 85 04 4e
>55a8	4c 4a 46 80 0c 6e 00 02 3c 8d 01 01 14 12 3c 80
>55b8	17 6f 00 14 0f 0c 07 06 3c 8d 14 0f 0c 07 06 3c
>55c8	8f 0b 05 11 06 3c 80 14 70 00 08 06 0b 09 3c 8d
>55d8	08 06 0b 09 3c 8f 0a 0c 0e 3c 80 0d 71 00 04 3c
>55e8	8d 04 3c 8f 85 01 47 80 12 72 00 05 11 09 13 07
>55f8	3c 8d 85 05 54 49 42 4c 48 80 17 73 00 05 11 09
>5608	13 07 3c 8d 05 11 09 13 07 3c 8f 0b 05 0e 14 3c
>5618	80 0c 74 00 10 15 09 08 3c 8d 85 00 80 17 75 00
>5628	01 01 14 12 3c 8d 01 01 14 12 3c 8f 85 05 51 4b
>5638	53 49 45 80 10 76 00 05 04 10 3c 8d 85 05 54 51
>5648	4b 55 4e 80 0d 77 00 13 0c 01 0a 3c 8d 85 01 52
>5658	80 0f 78 00 05 04 10 3c 8d 11 03 0f 01 14 3c 80
>5668	0b 79 00 01 0a 3c 8d 02 11 3c 80 0c 7a 00 01 0a
>5678	3c 8d 85 02 45 42 80 0b 7b 00 15 3c 8d 0a 0c 0e
>5688	3c 80 0f 7c 00 0b 05 11 06 3c 8d 0b 05 11 06 3c
>5698	80 0a 7d 00 02 11 3c 8d 85 00 80 10 7e 00 02 11
>56a8	3c 8d 02 11 3c 8f 0a 0c 0e 3c 80 0e 7f 00 15 3c
>56b8	8d 15 3c 8f 15 05 02 3c 80 0b 80 00 0a 0c 0e 3c
>56c8	8d 85 00 80 17 81 00 05 11 09 13 07 3c 8d 05 11
>56d8	09 13 07 3c 8f 85 03 46 52 52 80 10 82 00 14 0f
>56e8	0c 07 06 3c 8d 08 06 0b 09 3c 80 0f 83 00 01 01
>56f8	14 12 3c 8d 85 03 4b 51 4c 80 10 84 00 0a 08 0a
>5708	08 3c 8d 14 0f 0c 07 06 3c 80 15 85 00 13 0c 01
>5718	0a 3c 8d 13 0c 01 0a 3c 8f 85 03 4f 4e 4f 80 0c
>5728	86 00 09 07 0a 04 3c 8d 85 00 80 0b 87 00 15 3c
>5738	8d 85 02 51 50 80 0c 88 00 05 04 10 3c 8d 85 01
>5748	4c 80 17 89 00 12 09 13 04 12 3c 8d 12 09 13 04
>5758	12 3c 8f 13 0c 01 0a 3c 80 0b 8a 00 0b 0b 08 3c
>5768	8d 0c 3c 80 0c 8b 00 01 01 14 12 3c 8d 85 00 80
>5778	0d 8c 00 02 3c 8d 02 3c 8f 85 01 46 80 0a 8d 00
>5788	0c 3c 8d 85 01 48 80 15 8e 00 09 07 0a 04 3c 8d
>5798	09 07 0a 04 3c 8f 10 15 09 08 3c 80 0f 8f 00 0d
>57a8	13 07 12 3c 8d 85 03 45 50 4b 80 15 90 00 05 04
>57b8	10 3c 8d 05 04 10 3c 8f 85 05 4a 50 4c 48 4b 80
>57c8	0e 91 00 02 11 3c 8d 02 11 3c 8f 07 3c 80 09 92
>57d8	00 15 3c 8d 85 00 80 0c 93 00 09 09 0f 11 3c 8d
>57e8	85 00 80 09 94 00 0c 3c 8d 85 00 80 0d 95 00 11
>57f8	03 0f 01 14 3c 8d 85 00 80 15 96 00 12 09 13 04
>5808	12 3c 8d 12 09 13 04 12 3c 8f 85 01 51 80 12 97
>5818	00 0b 05 11 06 3c 8d 0b 05 11 06 3c 8f 02 3c 80
>5828	0c 98 00 08 06 0b 09 3c 8d 85 00 80 12 99 00 14
>5838	0f 0c 07 06 3c 8d 85 05 45 44 4b 4c 4c 80 18 9a
>5848	00 14 0f 0c 07 06 3c 8d 14 0f 0c 07 06 3c 8f 85
>5858	04 4e 4c 4f 43 80 13 9b 00 0a 0c 0e 3c 8d 0a 0c
>5868	0e 3c 8f 85 03 50 4a 53 80 11 9c 00 05 11 09 13
>5878	07 3c 8d 85 04 47 4c 47 4a 80 15 9d 00 0d 13 07
>5888	12 3c 8d 0d 13 07 12 3c 8f 85 03 42 4f 52 80 09
>5898	9e 00 0c 3c 8d 85 00 80 10 9f 00 0a 08 0a 08 3c
>58a8	8d 85 04 49 47 4d 55 80 0c a0 00 13 0c 01 0a 3c
>58b8	8d 85 00 80 10 a1 00 04 08 3c 8d 04 08 3c 8f 85
>58c8	02 4b 4f 80 11 a2 00 15 3c 8d 15 3c 8f 85 05 51
>58d8	47 41 50 50 80 13 a3 00 05 04 10 3c 8d 05 04 10
>58e8	3c 8f 85 03 4a 4b 4e 80 0c a4 00 13 0c 01 0a 3c
>58f8	8d 85 00 80 11 a5 00 02 11 3c 8d 02 11 3c 8f 01
>5908	01 14 12 3c 80 0c a6 00 09 09 0f 11 3c 8d 85 00
>5918	80 0c a7 00 15 02 0a 3c 8d 85 01 4d 80 0c a8 00
>5928	0a 08 0a 08 3c 8d 85 00 80 11 a9 00 04 3c 8d 04
>5938	3c 8f 85 05 47 4a 4d 48 4f 80 15 aa 00 01 01 14
>5948	12 3c 8d 01 01 14 12 3c 8f 0d 13 07 12 3c 80 0b
>5958	ab 00 0b 0b 08 3c 8d 85 00 80 10 ac 00 11 03 0f
>5968	01 14 3c 8d 0b 05 0e 14 3c 80 14 ad 00 0d 13 07
>5978	12 3c 8d 0d 13 07 12 3c 8f 05 04 10 3c 80 0f ae
>5988	00 01 3c 8d 01 3c 8f 85 03 42 47 47 80 0a af 00
>5998	01 0a 3c 8d 85 00 80 0c b0 00 0b 05 0e 14 3c 8d
>59a8	85 00 80 15 b1 00 05 04 10 3c 8d 05 04 10 3c 8f
>59b8	85 05 49 50 4d 50 52 80 0c b2 00 15 3c 8d 85 03
>59c8	55 4e 41 80 0f b3 00 0b 05 11 06 3c 8d 85 03 4c
>59d8	4c 4f 80 11 b4 00 04 08 3c 8d 04 08 3c 8f 85 03
>59e8	51 45 41 80 0d b5 00 05 11 09 13 07 3c 8d 85 00
>59f8	80 0c b6 00 0d 13 07 12 3c 8d 85 00 80 0f b7 00
>5a08	04 3c 8d 04 3c 8f 85 03 51 4b 4a 80 0c b8 00 0a
>5a18	08 0a 08 3c 8d 85 00 80 15 b9 00 05 04 10 3c 8d
>5a28	05 04 10 3c 8f 85 05 45 52 54 4b 42 80 10 ba 00
>5a38	09 09 0f 11 3c 8d 85 04 4c 4d 51 49 80 0d bb 00
>5a48	0d 13 07 12 3c 8d 85 01 46 80 0c bc 00 01 01 14
>5a58	12 3c 8d 85 00 80 13 bd 00 15 02 0a 3c 8d 15 02
>5a68	0a 3c 8f 85 03 55 4f 4b 80 0c be 00 0e 3c 8d 85
>5a78	03 4e 46 4d 80 0e bf 00 01 0a 3c 8d 11 03 0f 01
>5a88	14 3c 80 16 c0 00 0b 05 11 06 3c 8d 0b 05 11 06
>5a98	3c 8f 85 04 41 4d 4e 51 80 13 c1 00 0d 13 07 12
>5aa8	3c 8d 0d 13 07 12 3c 8f 85 01 41 80 17 c2 00 05
>5ab8	11 09 13 07 3c 8d 05 11 09 13 07 3c 8f 08 06 0b
>5ac8	09 3c 80 12 c3 00 01 01 14 12 3c 8d 01 01 14 12
>5ad8	3c 8f 07 3c 80 0b c4 00 15 05 02 3c 8d 0e 3c 80
>5ae8	0c c5 00 13 0c 01 0a 3c 8d 85 00 80 10 c6 00 01
>5af8	01 14 12 3c 8d 12 09 13 04 12 3c 80 0b c7 00 15
>5b08	05 02 3c 8d 85 00 80 0a c8 00 01 3c 8d 02 11 3c
>5b18	80 0a c9 00 01 0a 3c 8d 85 00 80 0c ca 00 15 05
>5b28	02 3c 8d 85 01 4d 80 14 cb 00 13 0c 01 0a 3c 8d
>5b38	13 0c 01 0a 3c 8f 05 04 10 3c 80 0c cc 00 15 3c
>5b48	8d 15 3c 8f 0e 3c 80 0e cd 00 01 0a 3c 8d 01 0a
>5b58	3c 8f 0c 3c 80 0b ce 00 0a 0c 0e 3c 8d 85 00 80
>5b68	0f cf 00 02 3c 8d 02 3c 8f 09 07 0a 04 3c 80 0c
>5b78	d0 00 07 3c 8d 01 02 12 0e 3c 80 0f d1 00 01 3c
>5b88	8d 01 3c 8f 85 03 4c 4d 4e 80 10 d2 00 11 03 0f
>5b98	01 14 3c 8d 85 03 4b 53 42 80 0f d3 00 09 09 0f
>5ba8	11 3c 8d 0d 13 07 12 3c 80 0c d4 00 15 3c 8d 01
>5bb8	01 14 12 3c 80 12 d5 00 15 02 0a 3c 8d 15 02 0a
>5bc8	3c 8f 85 02 49 4a 80 0b d6 00 05 04 10 3c 8d 85
>5bd8	00 80 0e d7 00 0a 0c 0e 3c 8d 01 01 14 12 3c 80
>5be8	0d d8 00 11 03 0f 01 14 3c 8d 85 00 80 15 d9 00
>5bf8	01 01 14 12 3c 8d 01 01 14 12 3c 8f 10 15 09 08
>5c08	3c 80 10 da 00 15 05 02 3c 8d 15 05 02 3c 8f 15
>5c18	3c 80 14 db 00 0a 0c 0e 3c 8d 0a 0c 0e 3c 8f 14
>5c28	0f 0c 07 06 3c 80 10 dc 00 0c 3c 8d 0c 3c 8f 11
>5c38	03 0f 01 14 3c 80 0e dd 00 05 04 10 3c 8d 0a 08
>5c48	0a 08 3c 80 0c de 00 13 0c 01 0a 3c 8d 85 00 80
>5c58	0c df 00 05 04 10 3c 8d 85 01 4a 80 0e e0 00 04
>5c68	08 3c 8d 85 04 54 4f 4f 52 80 16 e1 00 11 03 0f
>5c78	01 14 3c 8d 11 03 0f 01 14 3c 8f 85 02 42 45 80
>5c88	13 e2 00 05 04 10 3c 8d 05 04 10 3c 8f 85 03 51
>5c98	44 46 80 0e e3 00 0e 3c 8d 85 05 48 46 47 55 4b
>5ca8	80 0e e4 00 01 01 14 12 3c 8d 85 02 53 51 80 0d
>5cb8	e5 00 15 3c 8d 85 04 45 51 4a 42 80 0d e6 00 02
>5cc8	11 3c 8d 08 06 0b 09 3c 80 11 e7 00 09 07 0a 04
>5cd8	3c 8d 85 05 4e 42 52 55 42 80 0e e8 00 01 01 14
>5ce8	12 3c 8d 85 02 53 54 80 17 e9 00 05 11 09 13 07
>5cf8	3c 8d 05 11 09 13 07 3c 8f 10 15 09 08 3c 80 09
>5d08	ea 00 04 3c 8d 02 3c 80 0b eb 00 05 04 10 3c 8d
>5d18	85 00 80 0c ec 00 0b 05 0e 14 3c 8d 85 00 80 0c
>5d28	ed 00 01 3c 8d 01 3c 8f 04 3c 80 0e ee 00 13 0c
>5d38	01 0a 3c 8d 15 05 02 3c 80 0f ef 00 01 01 14 12
>5d48	3c 8d 10 15 09 08 3c 80 0c f0 00 0b 05 11 06 3c
>5d58	8d 85 00 80 13 f1 00 0b 05 11 06 3c 8d 0b 05 11
>5d68	06 3c 8f 85 01 47 80 09 f2 00 07 3c 8d 85 00 80
>5d78	0e f3 00 04 3c 8d 04 3c 8f 85 02 4d 45 80 16 f4
>5d88	00 11 03 0f 01 14 3c 8d 11 03 0f 01 14 3c 8f 05
>5d98	04 10 3c 80 15 f5 00 0d 13 07 12 3c 8d 0d 13 07
>5da8	12 3c 8f 0b 05 0e 14 3c 80 0c f6 00 01 3c 8d 85
>5db8	03 4f 46 55 80 09 f7 00 0e 3c 8d 85 00 80 0c f8
>5dc8	00 01 01 14 12 3c 8d 02 3c 80 0a f9 00 07 3c 8d
>5dd8	85 01 51 80 0c fa 00 07 3c 8d 07 3c 8f 0e 3c 80
>5de8	0c fb 00 0b 05 0e 14 3c 8d 85 00 80 10 fc 00 15
>5df8	05 02 3c 8d 85 05 55 51 45 52 48 80 14 fd 00 15
>5e08	05 02 3c 8d 15 05 02 3c 8f 14 0f 0c 07 06 3c 80
>5e18	12 fe 00 12 09 13 04 12 3c 8d 85 05 50 50 52 46
>5e28	41 80 0e ff 00 01 3c 8d 01 3c 8f 85 02 4e 51 80
>5e38	14 00 01 0b 0b 08 3c 8d 0b 0b 08 3c 8f 85 04 44
>5e48	50 46 42 80 15 01 01 15 02 0a 3c 8d 15 02 0a 3c
>5e58	8f 85 05 50 46 44 47 4a 80 0c 02 01 0d 13 07 12
>5e68	3c 8d 85 00 80 0c 03 01 15 02 0a 3c 8d 85 01 53
>5e78	80 0d 04 01 05 11 09 13 07 3c 8d 85 00 80 0f 05
>5e88	01 14 0f 0c 07 06 3c 8d 85 02 43 55 80 0b 06 01
>5e98	0b 0b 08 3c 8d 85 00 80 0d 07 01 01 3c 8d 85 04
>5ea8	51 4a 48 54 80 14 08 01 0a 08 0a 08 3c 8d 0a 08
>5eb8	0a 08 3c 8f 85 02 44 44 80 0e 09 01 10 15 09 08
>5ec8	3c 8d 0b 0b 08 3c 80 0d 0a 01 02 11 3c 8d 08 06
>5ed8	0b 09 3c 80 0e 0b 01 0a 08 0a 08 3c 8d 85 02 50
>5ee8	4d 80 13 0c 01 10 15 09 08 3c 8d 10 15 09 08 3c
>5ef8	8f 85 01 4c 80 0f 0d 01 08 06 0b 09 3c 8d 09 07
>5f08	0a 04 3c 80 0c 0e 01 0c 3c 8d 85 03 55 42 47 80
>5f18	0b 0f 01 0e 3c 8d 85 02 4f 44 80 11 10 01 04 08
>5f28	3c 8d 04 08 3c 8f 10 15 09 08 3c 80 0c 11 01 15
>5f38	05 02 3c 8d 85 01 43 80 0f 12 01 01 0a 3c 8d 01
>5f48	0a 3c 8f 85 01 44 80 0e 13 01 01 0a 3c 8d 85 04
>5f58	4a 47 51 55 80 13 14 01 0a 0c 0e 3c 8d 0a 0c 0e
>5f68	3c 8f 85 03 54 41 4f 80 0c 15 01 02 11 3c 8d 85
>5f78	02 53 51 80 0a 16 01 01 0a 3c 8d 85 00 80 15 17
>5f88	01 0b 0b 08 3c 8d 0b 0b 08 3c 8f 85 05 4d 49 50
>5f98	4e 4f 80 0c 18 01 08 06 0b 09 3c 8d 85 00 80 0c
>5fa8	19 01 0c 3c 8d 09 07 0a 04 3c 80 12 1a 01 0b 05
>5fb8	11 06 3c 8d 0b 05 11 06 3c 8f 0e 3c 80 09 1b 01
>5fc8	04 3c 8d 85 00 80 0e 1c 01 04 3c 8d 04 3c 8f 05
>5fd8	04 10 3c 80 0d 1d 01 09 09 0f 11 3c 8d 04 08 3c
>5fe8	80 0c 1e 01 0a 08 0a 08 3c 8d 07 3c 80 16 1f 01
>5ff8	08 06 0b 09 3c 8d 08 06 0b 09 3c 8f 85 04 4b 4a
>6008	45 47 80 14 20 01 15 02 0a 3c 8d 15 02 0a 3c 8f
>6018	85 04 44 48 50 53 80 0d 21 01 01 3c 8d 01 3c 8f
>6028	85 01 49 80 15 22 01 0b 05 11 06 3c 8d 0b 05 11
>6038	06 3c 8f 85 03 47 45 4d 80 09 23 01 15 3c 8d 85
>6048	00 80 13 24 01 09 09 0f 11 3c 8d 09 09 0f 11 3c
>6058	8f 85 01 47 80 0f 25 01 15 02 0a 3c 8d 85 04 45
>6068	55 41 4b 80 13 26 01 09 09 0f 11 3c 8d 09 09 0f
>6078	11 3c 8f 85 01 50 80 0f 27 01 02 11 3c 8d 02 11
>6088	3c 8f 85 01 4b 80 13 28 01 0a 0c 0e 3c 8d 0a 0c
>6098	0e 3c 8f 0b 05 0e 14 3c 80 15 29 01 12 09 13 04
>60a8	12 3c 8d 12 09 13 04 12 3c 8f 85 01 48 80 15 2a
>60b8	01 15 05 02 3c 8d 15 05 02 3c 8f 85 05 54 54 4f
>60c8	52 47 80 11 2b 01 04 08 3c 8d 04 08 3c 8f 85 03
>60d8	54 45 54 80 09 2c 01 15 3c 8d 85 00 80 10 2d 01
>60e8	0a 0c 0e 3c 8d 0a 0c 0e 3c 8f 0c 3c 80 0d 2e 01
>60f8	01 0a 3c 8d 13 0c 01 0a 3c 80 16 2f 01 11 03 0f
>6108	01 14 3c 8d 11 03 0f 01 14 3c 8f 85 02 54 4b 80
>6118	0d 30 01 05 11 09 13 07 3c 8d 85 00 80 0f 31 01
>6128	15 3c 8d 15 3c 8f 85 03 46 47 54 80 0c 32 01 0a
>6138	08 0a 08 3c 8d 85 00 80 0d 33 01 11 03 0f 01 14
>6148	3c 8d 85 00 80 0c 34 01 0e 3c 8d 0e 3c 8f 04 3c
>6158	80 09 35 01 07 3c 8d 85 00 80 0c 36 01 08 06 0b
>6168	09 3c 8d 85 00 80 15 37 01 10 15 09 08 3c 8d 10
>6178	15 09 08 3c 8f 01 01 14 12 3c 80 13 38 01 0b 0b
>6188	08 3c 8d 0b 0b 08 3c 8f 10 15 09 08 3c 80 0c 39
>6198	01 01 3c 8d 01 3c 8f 0e 3c 80 0c 3a 01 0e 3c 8d
>61a8	0e 3c 8f 07 3c 80 0e 3b 01 04 08 3c 8d 04 08 3c
>61b8	8f 0e 3c 80 0a 3c 01 01 0a 3c 8d 04 3c 80 10 3d
>61c8	01 11 03 0f 01 14 3c 8d 01 01 14 12 3c 80 14 3e
>61d8	01 13 0c 01 0a 3c 8d 13 0c 01 0a 3c 8f 05 04 10
>61e8	3c 80 09 3f 01 0e 3c 8d 85 00 80 0a 40 01 04 3c
>61f8	8d 85 01 4f 80 0e 41 01 15 3c 8d 85 05 44 46 51
>6208	44 4c 80 0f 42 01 0b 05 11 06 3c 8d 85 03 4e 48
>6218	4d 80 0a 43 01 07 3c 8d 85 01 43 80 0f 44 01 02
>6228	3c 8d 02 3c 8f 85 03 50 44 51 80 0d 45 01 11 03
>6238	0f 01 14 3c 8d 85 00 80 0e 46 01 02 3c 8d 02 3c
>6248	8f 05 04 10 3c 80 0e 47 01 0d 13 07 12 3c 8d 0b
>6258	0b 08 3c 80 0b 48 01 15 02 0a 3c 8d 02 3c 80 10
>6268	49 01 01 3c 8d 01 3c 8f 11 03 0f 01 14 3c 80 0a
>6278	4a 01 04 08 3c 8d 02 3c 80 0c 4b 01 0a 08 0a 08
>6288	3c 8d 85 00 80 14 4c 01 0d 13 07 12 3c 8d 0d 13
>6298	07 12 3c 8f 0a 0c 0e 3c 80 0c 4d 01 01 02 12 0e
>62a8	3c 8d 85 00 80 11 4e 01 02 3c 8d 02 3c 8f 85 05
>62b8	46 4a 55 4b 52 80 0e 4f 01 14 0f 0c 07 06 3c 8d
>62c8	01 0a 3c 80 13 50 01 15 05 02 3c 8d 15 05 02 3c
>62d8	8f 0d 13 07 12 3c 80 0f 51 01 01 02 12 0e 3c 8d
>62e8	09 09 0f 11 3c 80 13 52 01 0d 13 07 12 3c 8d 0d
>62f8	13 07 12 3c 8f 02 11 3c 80 0e 53 01 04 3c 8d 04
>6308	3c 8f 85 02 51 45 80 0e 54 01 0c 3c 8d 0c 3c 8f
>6318	85 02 50 42 80 0c 55 01 04 3c 8d 04 3c 8f 02 3c
>6328	80 0e 56 01 04 08 3c 8d 04 08 3c 8f 0e 3c 80 0d
>6338	57 01 0b 05 0e 14 3c 8d 85 01 46 80 0b 58 01 15
>6348	05 02 3c 8d 15 3c 80 10 59 01 15 05 02 3c 8d 15
>6358	05 02 3c 8f 15 3c 80 15 5a 01 0a 08 0a 08 3c 8d
>6368	0a 08 0a 08 3c 8f 85 03 4a 49 54 80 10 5b 01 01
>6378	3c 8d 01 3c 8f 85 04 54 43 54 48 80 0e 5c 01 01
>6388	0a 3c 8d 01 0a 3c 8f 04 3c 80 0f 5d 01 0a 08 0a
>6398	08 3c 8d 0a 08 0a 08 3c 80 10 5e 01 02 3c 8d 02
>63a8	3c 8f 85 04 50 48 4a 51 80 0b 5f 01 05 04 10 3c
>63b8	8d 85 00 80 0d 60 01 0c 3c 8d 0c 3c 8f 04 08 3c
>63c8	80 09 61 01 04 3c 8d 15 3c 80 0f 62 01 09 09 0f
>63d8	11 3c 8d 09 09 0f 11 3c 80 0c 63 01 0b 05 11 06
>63e8	3c 8d 0e 3c 80 0a 64 01 04 3c 8d 85 01 4b 80 14
>63f8	65 01 10 15 09 08 3c 8d 10 15 09 08 3c 8f 0b 0b
>6408	08 3c 80 14 66 01 0a 08 0a 08 3c 8d 0a 08 0a 08
>6418	3c 8f 15 05 02 3c 80 11 67 01 08 06 0b 09 3c 8d
>6428	85 05 43 49 48 4e 4e 80 15 68 01 09 09 0f 11 3c
>6438	8d 09 09 0f 11 3c 8f 13 0c 01 0a 3c 80 0c 69 01
>6448	07 3c 8d 0b 05 0e 14 3c 80 0f 6a 01 09 07 0a 04
>6458	3c 8d 08 06 0b 09 3c 80 11 6b 01 0b 0b 08 3c 8d
>6468	0b 0b 08 3c 8f 01 0a 3c 80 15 6c 01 01 01 14 12
>6478	3c 8d 01 01 14 12 3c 8f 85 03 46 55 4e 80 13 6d
>6488	01 05 04 10 3c 8d 05 04 10 3c 8f 0a 08 0a 08 3c
>6498	80 0d 6e 01 05 11 09 13 07 3c 8d 85 00 80 0f 6f
>64a8	01 05 04 10 3c 8d 85 04 55 49 4b 52 80 0e 70 01
>64b8	0e 3c 8d 0e 3c 8f 0b 0b 08 3c 80 0e 71 01 0c 3c
>64c8	8d 0c 3c 8f 85 02 41 55 80 0b 72 01 15 3c 8d 85
>64d8	02 4d 53 80 15 73 01 10 15 09 08 3c 8d 10 15 09
>64e8	08 3c 8f 09 09 0f 11 3c 80 13 74 01 01 02 12 0e
>64f8	3c 8d 01 02 12 0e 3c 8f 85 01 49 80 0c 75 01 0a
>6508	0c 0e 3c 8d 01 0a 3c 80 0f 76 01 0b 0b 08 3c 8d
>6518	85 04 51 49 4b 48 80 0b 77 01 05 04 10 3c 8d 85
>6528	00 80 09 78 01 02 3c 8d 85 00 80 0c 79 01 0a 08
>6538	0a 08 3c 8d 85 00 80 0c 7a 01 0b 0b 08 3c 8d 02
>6548	11 3c 80 0f 7b 01 04 3c 8d 04 3c 8f 85 03 49 55
>6558	47 80 0c 7c 01 10 15 09 08 3c 8d 85 00 80 0b 7d
>6568	01 0a 0c 0e 3c 8d 85 00 80 09 7e 01 07 3c 8d 07
>6578	3c 80 0c 7f 01 13 0c 01 0a 3c 8d 85 00 80 0c 80
>6588	01 02 11 3c 8d 0b 0b 08 3c 80 0e 81 01 01 02 12
>6598	0e 3c 8d 85 02 44 41 80 0f 82 01 15 05 02 3c 8d
>65a8	85 04 55 46 4a 53 80 11 83 01 05 11 09 13 07 3c
>65b8	8d 85 04 48 4d 45 4c 80 0d 84 01 01 3c 8d 12 09
>65c8	13 04 12 3c 80 0a 85 01 02 11 3c 8d 85 00 80 0b
>65d8	86 01 0a 0c 0e 3c 8d 85 00 80 0a 87 01 02 11 3c
>65e8	8d 85 00 80 11 88 01 02 3c 8d 02 3c 8f 85 05 43
>65f8	50 50 43 54 80 0f 89 01 01 3c 8d 01 3c 8f 0a 08
>6608	0a 08 3c 80 0f 8a 01 15 02 0a 3c 8d 05 11 09 13
>6618	07 3c 80 14 8b 01 0b 05 0e 14 3c 8d 0b 05 0e 14
>6628	3c 8f 85 02 44 54 80 0c 8c 01 0a 0c 0e 3c 8d 85
>6638	01 53 80 0f 8d 01 13 0c 01 0a 3c 8d 09 09 0f 11
>6648	3c 80 0f 8e 01 12 09 13 04 12 3c 8d 0a 0c 0e 3c
>6658	80 0e 8f 01 01 3c 8d 01 3c 8f 85 02 4b 44 80 0e
>6668	90 01 0b 0b 08 3c 8d 0a 08 0a 08 3c 80 14 91 01
>6678	0d 13 07 12 3c 8d 0d 13 07 12 3c 8f 15 02 0a 3c
>6688	80 15 92 01 10 15 09 08 3c 8d 10 15 09 08 3c 8f
>6698	01 01 14 12 3c 80 10 93 01 0b 05 0e 14 3c 8d 85
>66a8	04 47 48 43 42 80 0d 94 01 15 02 0a 3c 8d 05 04
>66b8	10 3c 80 15 95 01 0a 08 0a 08 3c 8d 0a 08 0a 08
>66c8	3c 8f 0b 05 11 06 3c 80 13 96 01 01 02 12 0e 3c
>66d8	8d 01 02 12 0e 3c 8f 02 11 3c 80 09 97 01 0e 3c
>66e8	8d 02 3c 80 17 98 01 01 01 14 12 3c 8d 01 01 14
>66f8	12 3c 8f 85 05 53 50 4c 4c 4f 80 11 99 01 09 09
>6708	0f 11 3c 8d 85 05 53 43 47 49 42 80 0f 9a 01 09
>6718	07 0a 04 3c 8d 85 03 4c 55 44 80 0f 9b 01 0c 3c
>6728	8d 0c 3c 8f 0a 08 0a 08 3c 80 0c 9c 01 0c 3c 8d
>6738	09 07 0a 04 3c 80 0b 9d 01 0a 0c 0e 3c 8d 85 00
>6748	80 0d 9e 01 14 0f 0c 07 06 3c 8d 85 00 80 10 9f
>6758	01 0a 0c 0e 3c 8d 0a 0c 0e 3c 8f 0e 3c 80 0d a0
>6768	01 04 3c 8d 85 04 45 53 48 4a 80 13 a1 01 0a 0c
>6778	0e 3c 8d 0a 0c 0e 3c 8f 0a 08 0a 08 3c 80 13 a2
>6788	01 08 06 0b 09 3c 8d 08 06 0b 09 3c 8f 85 01 4d
>6798	80 0d a3 01 02 3c 8d 85 04 48 45 41 48 80 0d a4
>67a8	01 07 3c 8d 07 3c 8f 85 01 4d 80 0a a5 01 07 3c
>67b8	8d 85 01 4f 80 0f a6 01 0e 3c 8d 0e 3c 8f 08 06
>67c8	0b 09 3c 80 10 a7 01 02 11 3c 8d 02 11 3c 8f 05
>67d8	04 10 3c 80 0c a8 01 0c 3c 8d 85 03 50 41 4e 80
>67e8	0d a9 01 04 08 3c 8d 0d 13 07 12 3c 80 0f aa 01
>67f8	01 0a 3c 8d 85 05 47 4f 4e 55 4b 80 0f ab 01 0a
>6808	08 0a 08 3c 8d 85 03 4a 52 48 80 0b ac 01 15 02
>6818	0a 3c 8d 07 3c 80 0d ad 01 09 07 0a 04 3c 8d 85
>6828	01 50 80 14 ae 01 15 05 02 3c 8d 15 05 02 3c 8f
>6838	85 04 54 4d 51 53 80 09 af 01 0c 3c 8d 04 3c 80
>6848	0e b0 01 0a 0c 0e 3c 8d 85 03 53 46 55 80 0c b1
>6858	01 15 02 0a 3c 8d 01 0a 3c 80 0d b2 01 02 11 3c
>6868	8d 85 03 49 44 44 80 0d b3 01 15 02 0a 3c 8d 85
>6878	02 51 41 80 10 b4 01 15 02 0a 3c 8d 15 02 0a 3c
>6888	8f 0c 3c 80 0f b5 01 01 3c 8d 01 3c 8f 09 07 0a
>6898	04 3c 80 0f b6 01 13 0c 01 0a 3c 8d 85 03 4b 4c
>68a8	46 80 17 b7 01 0a 08 0a 08 3c 8d 0a 08 0a 08 3c
>68b8	8f 85 05 4b 43 48 48 44 80 14 b8 01 0b 05 0e 14
>68c8	3c 8d 0b 05 0e 14 3c 8f 0b 0b 08 3c 80 10 b9 01
>68d8	07 3c 8d 07 3c 8f 85 04 52 54 4b 53 80 10 ba 01
>68e8	12 09 13 04 12 3c 8d 85 03 41 41 54 80 12 bb 01
>68f8	14 0f 0c 07 06 3c 8d 85 05 43 50 54 4c 45 80 16
>6908	bc 01 0d 13 07 12 3c 8d 0d 13 07 12 3c 8f 85 04
>6918	4c 50 53 42 80 09 bd 01 01 3c 8d 85 00 80 0e be
>6928	01 07 3c 8d 07 3c 8f 05 04 10 3c 80 13 bf 01 0a
>6938	0c 0e 3c 8d 0a 0c 0e 3c 8f 85 03 4f 49 44 80 15
>6948	c0 01 0b 05 11 06 3c 8d 0b 05 11 06 3c 8f 13 0c
>6958	01 0a 3c 80 0f c1 01 01 01 14 12 3c 8d 08 06 0b
>6968	09 3c 80 0d c2 01 15 02 0a 3c 8d 0b 0b 08 3c 80
>6978	0a c3 01 04 3c 8d 85 01 55 80 12 c4 01 05 04 10
>6988	3c 8d 05 04 10 3c 8f 85 02 50 46 80 0d c5 01 01
>6998	0a 3c 8d 0b 05 11 06 3c 80 0e c6 01 15 3c 8d 15
>69a8	3c 8f 85 02 45 48 80 14 c7 01 0a 0c 0e 3c 8d 0a
>69b8	0c 0e 3c 8f 85 04 48 46 47 46 80 09 c8 01 0c 3c
>69c8	8d 85 00 80 0c c9 01 01 02 12 0e 3c 8d 85 00 80
>69d8	0d ca 01 12 09 13 04 12 3c 8d 85 00 80 15 cb 01
>69e8	0b 05 11 06 3c 8d 0b 05 11 06 3c 8f 0b 05 11 06
>69f8	3c 80 10 cc 01 05 04 10 3c 8d 85 05 49 43 54 4a
>6a08	49 80 0a cd 01 02 11 3c 8d 85 00 80 14 ce 01 05
>6a18	04 10 3c 8d 05 04 10 3c 8f 14 0f 0c 07 06 3c 80
>6a28	12 cf 01 12 09 13 04 12 3c 8d 85 05 54 54 44 49
>6a38	52 80 0b d0 01 0a 0c 0e 3c 8d 85 00 80 0d d1 01
>6a48	14 0f 0c 07 06 3c 8d 85 00 80 10 d2 01 12 09 13
>6a58	04 12 3c 8d 01 01 14 12 3c 80 0c d3 01 01 02 12
>6a68	0e 3c 8d 85 00 80 09 d4 01 02 3c 8d 85 00 80 0b
>6a78	d5 01 0a 0c 0e 3c 8d 02 3c 80 10 d6 01 01 02 12
>6a88	0e 3c 8d 85 04 4f 45 46 4e 80 10 d7 01 09 09 0f
>6a98	11 3c 8d 12 09 13 04 12 3c 80 0d d8 01 05 11 09
>6aa8	13 07 3c 8d 85 00 80 11 d9 01 12 09 13 04 12 3c
>6ab8	8d 85 04 42 49 42 4f 80 10 da 01 05 04 10 3c 8d
>6ac8	05 04 10 3c 8f 02 3c 80 15 db 01 09 09 0f 11 3c
>6ad8	8d 09 09 0f 11 3c 8f 09 09 0f 11 3c 80 10 dc 01
>6ae8	11 03 0f 01 14 3c 8d 85 03 4f 48 4c 80 17 dd 01
>6af8	05 11 09 13 07 3c 8d 05 11 09 13 07 3c 8f 0d 13
>6b08	07 12 3c 80 0d de 01 07 3c 8d 07 3c 8f 85 01 42
>6b18	80 0a df 01 15 3c 8d 85 01 46 80 0c e0 01 15 02
>6b28	0a 3c 8d 85 01 55 80 15 e1 01 12 09 13 04 12 3c
>6b38	8d 12 09 13 04 12 3c 8f 02 11 3c 80 17 e2 01 11
>6b48	03 0f 01 14 3c 8d 11 03 0f 01 14 3c 8f 13 0c 01
>6b58	0a 3c 80 12 e3 01 01 0a 3c 8d 01 0a 3c 8f 85 04
>6b68	4f 46 4a 48 80 11 e4 01 01 0a 3c 8d 01 0a 3c 8f
>6b78	0d 13 07 12 3c 80 13 e5 01 09 07 0a 04 3c 8d 09
>6b88	07 0a 04 3c 8f 85 01 53 80 17 e6 01 12 09 13 04
>6b98	12 3c 8d 12 09 13 04 12 3c 8f 01 01 14 12 3c 80
>6ba8	0d e7 01 12 09 13 04 12 3c 8d 85 00 80 0c e8 01
>6bb8	01 02 12 0e 3c 8d 85 00 80 0f e9 01 0b 05 0e 14
>6bc8	3c 8d 0d 13 07 12 3c 80 0a ea 01 02 11 3c 8d 85
>6bd8	00 80 0e eb 01 0c 3c 8d 0c 3c 8f 85 02 47 45 80
>6be8	0c ec 01 01 01 14 12 3c 8d 85 00 80 0c ed 01 10
>6bf8	15 09 08 3c 8d 85 00 80 15 ee 01 0b 05 0e 14 3c
>6c08	8d 0b 05 0e 14 3c 8f 0b 05 11 06 3c 80 15 ef 01
>6c18	13 0c 01 0a 3c 8d 13 0c 01 0a 3c 8f 13 0c 01 0a
>6c28	3c 80 0f f0 01 0a 08 0a 08 3c 8d 0b 05 11 06 3c
>6c38	80 0d f1 01 04 3c 8d 04 3c 8f 85 01 46 80 09 f2
>6c48	01 15 3c 8d 85 00 80 13 f3 01 0a 0c 0e 3c 8d 0a
>6c58	0c 0e 3c 8f 09 07 0a 04 3c 80 11 f4 01 04 08 3c
>6c68	8d 04 08 3c 8f 09 07 0a 04 3c 80 0d f5 01 0a 08
>6c78	0a 08 3c 8d 85 01 44 80 09 f6 01 07 3c 8d 85 00
>6c88	80 0d f7 01 0b 05 11 06 3c 8d 85 01 43 80 15 f8
>6c98	01 01 02 12 0e 3c 8d 01 02 12 0e 3c 8f 85 03 43
>6ca8	4a 47 80 0f f9 01 0b 05 11 06 3c 8d 0b 05 11 06
>6cb8	3c 80 10 fa 01 0d 13 07 12 3c 8d 85 04 42 4c 55
>6cc8	45 80 0f fb 01 0b 05 0e 14 3c 8d 08 06 0b 09 3c
>6cd8	80 0d fc 01 0e 3c 8d 0e 3c 8f 01 0a 3c 80 0a fd
>6ce8	01 01 0a 3c 8d 85 00 80 0c fe 01 0e 3c 8d 85 03
>6cf8	41 4c 42 80 0c ff 01 15 3c 8d 01 02 12 0e 3c 80
>6d08	19 00 02 14 0f 0c 07 06 3c 8d 14 0f 0c 07 06 3c
>6d18	8f 85 05 4b 45 47 50 55 80 13 01 02 13 0c 01 0a
>6d28	3c 8d 13 0c 01 0a 3c 8f 85 01 52 80 0a 02 02 04
>6d38	08 3c 8d 85 00 80 10 03 02 09 09 0f 11 3c 8d 85
>6d48	04 52 4e 4e 47 80 0e 04 02 05 11 09 13 07 3c 8d
>6d58	85 01 48 80 0d 05 02 02 11 3c 8d 85 03 4f 53 49
>6d68	80 13 06 02 15 02 0a 3c 8d 15 02 0a 3c 8f 10 15
>6d78	09 08 3c 80 13 07 02 0a 08 0a 08 3c 8d 0a 08 0a
>6d88	08 3c 8f 01 0a 3c 80 16 08 02 10 15 09 08 3c 8d
>6d98	10 15 09 08 3c 8f 12 09 13 04 12 3c 80 10 09 02
>6da8	05 11 09 13 07 3c 8d 09 09 0f 11 3c 80 0e 0a 02
>6db8	0a 0c 0e 3c 8d 0d 13 07 12 3c 80 0f 0b 02 0a 0c
>6dc8	0e 3c 8d 85 04 47 4c 42 4c 80 0e 0c 02 02 11 3c
>6dd8	8d 85 04 53 54 49 4c 80 0c 0d 02 15 3c 8d 08 06
>6de8	0b 09 3c 80 15 0e 02 09 09 0f 11 3c 8d 09 09 0f
>6df8	11 3c 8f 08 06 0b 09 3c 80 15 0f 02 0b 05 11 06
>6e08	3c 8d 0b 05 11 06 3c 8f 01 01 14 12 3c 80 11 10
>6e18	02 04 08 3c 8d 04 08 3c 8f 85 03 46 41 43 80 0a
>6e28	11 02 0c 3c 8d 85 01 4b 80 18 12 02 14 0f 0c 07
>6e38	06 3c 8d 14 0f 0c 07 06 3c 8f 85 04 50 4d 55 53
>6e48	80 11 13 02 07 3c 8d 07 3c 8f 85 05 4b 53 50 4f
>6e58	42 80 0f 14 02 05 04 10 3c 8d 85 04 46 52 45 4f
>6e68	80 0f 15 02 04 3c 8d 04 3c 8f 85 03 47 45 41 80
>6e78	13 16 02 15 02 0a 3c 8d 15 02 0a 3c 8f 01 02 12
>6e88	0e 3c 80 15 17 02 08 06 0b 09 3c 8d 08 06 0b 09
>6e98	3c 8f 85 03 4a 49 53 80 15 18 02 09 09 0f 11 3c
>6ea8	8d 09 09 0f 11 3c 8f 85 03 46 52 4e 80 0d 19 02
>6eb8	0c 3c 8d 85 04 41 49 52 51 80 12 1a 02 04 08 3c
>6ec8	8d 04 08 3c 8f 14 0f 0c 07 06 3c 80 12 1b 02 0b
>6ed8	05 11 06 3c 8d 0b 05 11 06 3c 8f 04 3c 80 0c 1c
>6ee8	02 04 3c 8d 09 09 0f 11 3c 80 17 1d 02 0b 05 11
>6ef8	06 3c 8d 0b 05 11 06 3c 8f 85 05 51 53 50 53 42
>6f08	80 13 1e 02 13 0c 01 0a 3c 8d 13 0c 01 0a 3c 8f
>6f18	02 11 3c 80 0e 1f 02 15 3c 8d 85 05 41 48 50 54
>6f28	47 80 15 20 02 15 05 02 3c 8d 15 05 02 3c 8f 85
>6f38	05 44 50 42 52 51 80 0f 21 02 02 11 3c 8d 02 11
>6f48	3c 8f 85 01 49 80 0c 22 02 02 3c 8d 09 07 0a 04
>6f58	3c 80 0c 23 02 09 07 0a 04 3c 8d 85 00 80 0e 24
>6f68	02 0a 0c 0e 3c 8d 85 03 49 46 46 80 13 25 02 05
>6f78	04 10 3c 8d 05 04 10 3c 8f 01 01 14 12 3c 80 0c
>6f88	26 02 13 0c 01 0a 3c 8d 85 00 80 12 27 02 09 09
>6f98	0f 11 3c 8d 09 09 0f 11 3c 8f 01 3c 80 13 28 02
>6fa8	09 07 0a 04 3c 8d 09 07 0a 04 3c 8f 85 01 45 80
>6fb8	15 29 02 0b 05 11 06 3c 8d 0b 05 11 06 3c 8f 0b
>6fc8	05 11 06 3c 80 09 2a 02 15 3c 8d 01 3c 80 0a 2b
>6fd8	02 01 3c 8d 85 01 4f 80 09 2c 02 07 3c 8d 07 3c
>6fe8	80 15 2d 02 09 09 0f 11 3c 8d 09 09 0f 11 3c 8f
>6ff8	13 0c 01 0a 3c 80 0c 2e 02 01 3c 8d 01 3c 8f 0c
>7008	3c 80 17 2f 02 01 02 12 0e 3c 8d 01 02 12 0e 3c
>7018	8f 85 05 46 53 53 4f 41 80 09 30 02 0e 3c 8d 85
>7028	00 80 0a 31 02 02 11 3c 8d 85 00 80 0f 32 02 15
>7038	3c 8d 15 3c 8f 0d 13 07 12 3c 80 16 33 02 0a 08
>7048	0a 08 3c 8d 0a 08 0a 08 3c 8f 85 04 53 41 53 51
>7058	80 0d 34 02 15 3c 8d 15 3c 8f 85 01 4f 80 0c 35
>7068	02 0c 3c 8d 0b 05 11 06 3c 80 0a 36 02 01 0a 3c
>7078	8d 85 00 80 0e 37 02 04 3c 8d 85 05 4d 51 4c 42
>7088	46 80 18 38 02 12 09 13 04 12 3c 8d 12 09 13 04
>7098	12 3c 8f 05 11 09 13 07 3c 80 0b 39 02 15 05 02
>70a8	3c 8d 85 00 80 10 3a 02 14 0f 0c 07 06 3c 8d 85
>70b8	03 42 49 55 80 0b 3b 02 0a 0c 0e 3c 8d 85 00 80
>70c8	0f 3c 02 02 11 3c 8d 85 05 4e 53 4b 45 45 80 0d
>70d8	3d 02 04 3c 8d 85 04 4a 49 48 4c 80 0f 3e 02 0b
>70e8	05 0e 14 3c 8d 08 06 0b 09 3c 80 0d 3f 02 0d 13
>70f8	07 12 3c 8d 85 01 47 80 0d 40 02 0b 05 11 06 3c
>7108	8d 02 11 3c 80 10 41 02 01 02 12 0e 3c 8d 85 04
>7118	44 4c 53 49 80 0d 42 02 13 0c 01 0a 3c 8d 02 11
>7128	3c 80 0f 43 02 01 0a 3c 8d 85 05 46 44 49 4f 4b
>7138	80 0d 44 02 02 3c 8d 02 3c 8f 01 0a 3c 80 0f 45
>7148	02 13 0c 01 0a 3c 8d 13 0c 01 0a 3c 80 0c 46 02
>7158	0b 05 0e 14 3c 8d 0c 3c 80 11 47 02 0a 08 0a 08
>7168	3c 8d 85 05 43 55 51 48 4e 80 0d 48 02 02 11 3c
>7178	8d 85 03 42 4e 4e 80 0e 49 02 13 0c 01 0a 3c 8d
>7188	85 02 4e 53 80 0c 4a 02 0d 13 07 12 3c 8d 85 00
>7198	80 0e 4b 02 04 3c 8d 85 05 55 53 4c 4a 52 80 13
>71a8	4c 02 04 08 3c 8d 04 08 3c 8f 85 05 4f 4a 50 52
>71b8	42 80 0f 4d 02 01 02 12 0e 3c 8d 0b 05 11 06 3c
>71c8	80 10 4e 02 15 02 0a 3c 8d 85 05 47 47 45 41 4c
>71d8	80 0b 4f 02 0e 3c 8d 85 02 46 51 80 0a 50 02 04
>71e8	08 3c 8d 04 3c 80 16 51 02 0a 08 0a 08 3c 8d 0a
>71f8	08 0a 08 3c 8f 85 04 4a 51 4e 4a 80 0d 52 02 10
>7208	15 09 08 3c 8d 02 11 3c 80 11 53 02 04 08 3c 8d
>7218	04 08 3c 8f 85 03 4f 54 49 80 0c 54 02 15 3c 8d
>7228	85 03 45 4a 50 80 0f 55 02 07 3c 8d 07 3c 8f 09
>7238	07 0a 04 3c 80 0c 56 02 0b 05 0e 14 3c 8d 85 00
>7248	80 10 57 02 01 02 12 0e 3c 8d 85 04 55 49 49 4c
>7258	80 09 58 02 0c 3c 8d 85 00 80 13 59 02 0b 0b 08
>7268	3c 8d 0b 0b 08 3c 8f 09 09 0f 11 3c 80 0e 5a 02
>7278	0b 05 11 06 3c 8d 05 04 10 3c 80 15 5b 02 0a 08
>7288	0a 08 3c 8d 0a 08 0a 08 3c 8f 85 03 48 4d 43 80
>7298	0e 5c 02 12 09 13 04 12 3c 8d 85 01 55 80 0d 5d
>72a8	02 04 08 3c 8d 0a 08 0a 08 3c 80 13 5e 02 0d 13
>72b8	07 12 3c 8d 0d 13 07 12 3c 8f 85 01 55 80 0b 5f
>72c8	02 0c 3c 8d 0b 0b 08 3c 80 16 60 02 09 07 0a 04
>72d8	3c 8d 09 07 0a 04 3c 8f 14 0f 0c 07 06 3c 80 16
>72e8	61 02 0b 05 11 06 3c 8d 0b 05 11 06 3c 8f 85 04
>72f8	4a 48 55 44 80 0b 62 02 0a 0c 0e 3c 8d 0e 3c 80
>7308	0c 63 02 0e 3c 8d 09 07 0a 04 3c 80 0c 64 02 13
>7318	0c 01 0a 3c 8d 85 00 80 11 65 02 01 3c 8d 01 3c
>7328	8f 85 05 42 41 4a 4a 52 80 0d 66 02 14 0f 0c 07
>7338	06 3c 8d 04 3c 80 0e 67 02 07 3c 8d 07 3c 8f 85
>7348	02 51 49 80 0d 68 02 0e 3c 8d 85 04 50 41 50 48
>7358	80 09 69 02 02 3c 8d 85 00 80 0c 6a 02 01 01 14
>7368	12 3c 8d 85 00 80 0f 6b 02 15 3c 8d 15 3c 8f 85
>7378	03 4f 4f 46 80 11 6c 02 15 05 02 3c 8d 15 05 02
>7388	3c 8f 85 01 54 80 0b 6d 02 15 05 02 3c 8d 85 00
>7398	80 0d 6e 02 0e 3c 8d 0e 3c 8f 85 01 42 80 0b 6f
>73a8	02 04 08 3c 8d 85 01 51 80 13 70 02 05 04 10 3c
>73b8	8d 05 04 10 3c 8f 0a 08 0a 08 3c 80 0e 71 02 10
>73c8	15 09 08 3c 8d 85 02 4c 4c 80 0b 72 02 15 05 02
>73d8	3c 8d 0e 3c 80 14 73 02 15 02 0a 3c 8d 15 02 0a
>73e8	3c 8f 85 04 47 48 49 53 80 0d 74 02 01 02 12 0e
>73f8	3c 8d 85 01 44 80 0c 75 02 01 3c 8d 09 07 0a 04
>7408	3c 80 0d 76 02 0e 3c 8d 85 04 4e 53 4c 4c 80 0c
>7418	77 02 0b 05 0e 14 3c 8d 85 00 80 15 78 02 0a 08
>7428	0a 08 3c 8d 0a 08 0a 08 3c 8f 85 03 4c 51 49 80
>7438	0c 79 02 0e 3c 8d 09 09 0f 11 3c 80 0b 7a 02 0b
>7448	0b 08 3c 8d 85 00 80 0e 7b 02 0a 0c 0e 3c 8d 85
>7458	03 4b 48 51 80 0b 7c 02 15 05 02 3c 8d 85 00 80
>7468	12 7d 02 02 11 3c 8d 02 11 3c 8f 05 11 09 13 07
>7478	3c 80 0e 7e 02 10 15 09 08 3c 8d 85 02 47 41 80
>7488	0c 7f 02 01 3c 8d 01 3c 8f 0c 3c 80 13 80 02 05
>7498	04 10 3c 8d 05 04 10 3c 8f 08 06 0b 09 3c 80 0e
>74a8	81 02 0b 05 0e 14 3c 8d 0a 0c 0e 3c 80 19 82 02
>74b8	11 03 0f 01 14 3c 8d 11 03 0f 01 14 3c 8f 85 05
>74c8	50 53 47 50 54 80 11 83 02 01 0a 3c 8d 01 0a 3c
>74d8	8f 85 03 54 45 48 80 0e 84 02 02 3c 8d 85 05 43
>74e8	42 48 54 41 80 14 85 02 15 05 02 3c 8d 15 05 02
>74f8	3c 8f 85 04 4d 4a 47 55 80 0b 86 02 05 04 10 3c
>7508	8d 85 00 80 10 87 02 14 0f 0c 07 06 3c 8d 85 03
>7518	54 49 47 80 0a 88 02 04 08 3c 8d 02 3c 80 12 89
>7528	02 05 04 10 3c 8d 05 04 10 3c 8f 0a 0c 0e 3c 80
>7538	14 8a 02 05 04 10 3c 8d 05 04 10 3c 8f 14 0f 0c
>7548	07 06 3c 80 0d 8b 02 0a 08 0a 08 3c 8d 85 01 46
>7558	80 11 8c 02 0a 0c 0e 3c 8d 0a 0c 0e 3c 8f 85 01
>7568	51 80 15 8d 02 05 04 10 3c 8d 05 04 10 3c 8f 85
>7578	05 44 48 4b 4b 4f 80 0d 8e 02 09 07 0a 04 3c 8d
>7588	85 01 48 80 0c 8f 02 09 09 0f 11 3c 8d 85 00 80
>7598	15 90 02 0a 08 0a 08 3c 8d 0a 08 0a 08 3c 8f 09
>75a8	07 0a 04 3c 80 0a 91 02 02 11 3c 8d 85 00 80 09
>75b8	92 02 0c 3c 8d 85 00 80 13 93 02 13 0c 01 0a 3c
>75c8	8d 13 0c 01 0a 3c 8f 85 01 4b 80 14 94 02 0b 05
>75d8	0e 14 3c 8d 0b 05 0e 14 3c 8f 05 04 10 3c 80 0b
>75e8	95 02 0b 0b 08 3c 8d 85 00 80 0d 96 02 13 0c 01
>75f8	0a 3c 8d 85 01 4b 80 13 97 02 13 0c 01 0a 3c 8d
>7608	13 0c 01 0a 3c 8f 85 01 50 80 11 98 02 05 04 10
>7618	3c 8d 05 04 10 3c 8f 85 01 51 80 0d 99 02 0e 3c
>7628	8d 11 03 0f 01 14 3c 80 0a 9a 02 01 3c 8d 85 01
>7638	44 80 11 9b 02 05 04 10 3c 8d 05 04 10 3c 8f 01
>7648	0a 3c 80 0d 9c 02 0e 3c 8d 0e 3c 8f 01 0a 3c 80
>7658	12 9d 02 08 06 0b 09 3c 8d 08 06 0b 09 3c 8f 04
>7668	3c 80 0a 9e 02 04 3c 8d 85 01 43 80 0c 9f 02 0b
>7678	0b 08 3c 8d 85 01 4b 80 0b a0 02 0b 0b 08 3c 8d
>7688	85 00 80 0d a1 02 09 09 0f 11 3c 8d 01 0a 3c 80
>7698	0c a2 02 0b 0b 08 3c 8d 85 01 4b 80 12 a3 02 13
>76a8	0c 01 0a 3c 8d 13 0c 01 0a 3c 8f 15 3c 80 11 a4
>76b8	02 01 3c 8d 01 3c 8f 85 05 46 46 51 51 46 80 11
>76c8	a5 02 02 11 3c 8d 02 11 3c 8f 09 09 0f 11 3c 80
>76d8	14 a6 02 11 03 0f 01 14 3c 8d 11 03 0f 01 14 3c
>76e8	8f 02 3c 80 11 a7 02 15 3c 8d 15 3c 8f 85 05 51
>76f8	41 4e 45 51 80 0d a8 02 0e 3c 8d 0e 3c 8f 85 01
>7708	41 80 0f a9 02 0a 08 0a 08 3c 8d 85 03 47 48 47
>7718	80 0c aa 02 01 01 14 12 3c 8d 85 00 80 0c ab 02
>7728	0a 08 0a 08 3c 8d 85 00 80 0b ac 02 0a 0c 0e 3c
>7738	8d 85 00 80 0c ad 02 08 06 0b 09 3c 8d 85 00 80
>7748	16 ae 02 14 0f 0c 07 06 3c 8d 14 0f 0c 07 06 3c
>7758	8f 15 02 0a 3c 80 13 af 02 09 07 0a 04 3c 8d 09
>7768	07 0a 04 3c 8f 85 01 4b 80 0c b0 02 09 09 0f 11
>7778	3c 8d 85 00 80 09 b1 02 01 3c 8d 02 3c 80 0c b2
>7788	02 02 3c 8d 0b 05 11 06 3c 80 12 b3 02 01 01 14
>7798	12 3c 8d 01 01 14 12 3c 8f 0c 3c 80 15 b4 02 15
>77a8	02 0a 3c 8d 15 02 0a 3c 8f 85 05 43 48 53 41 48
>77b8	80 14 b5 02 01 01 14 12 3c 8d 01 01 14 12 3c 8f
>77c8	85 02 46 51 80 0c b6 02 0d 13 07 12 3c 8d 07 3c
>77d8	80 0b b7 02 0b 0b 08 3c 8d 85 00 80 09 b8 02 0e
>77e8	3c 8d 85 00 80 0c b9 02 04 3c 8d 01 02 12 0e 3c
>77f8	80 0e ba 02 0c 3c 8d 85 05 44 4d 55 55 52 80 10
>7808	bb 02 05 04 10 3c 8d 85 05 4c 46 53 43 4c 80 0e
>7818	bc 02 01 02 12 0e 3c 8d 15 05 02 3c 80 11 bd 02
>7828	15 3c 8d 15 3c 8f 85 05 55 54 43 4c 53 80 0d be
>7838	02 09 07 0a 04 3c 8d 85 01 43 80 12 bf 02 01 0a
>7848	3c 8d 01 0a 3c 8f 85 04 42 47 47 52 80 11 c0 02
>7858	15 05 02 3c 8d 15 05 02 3c 8f 02 11 3c 80 0d c1
>7868	02 10 15 09 08 3c 8d 01 0a 3c 80 0f c2 02 09 07
>7878	0a 04 3c 8d 0d 13 07 12 3c 80 0f c3 02 04 3c 8d
>7888	04 3c 8f 13 0c 01 0a 3c 80 12 c4 02 02 11 3c 8d
>7898	02 11 3c 8f 12 09 13 04 12 3c 80 0b c5 02 05 04
>78a8	10 3c 8d 02 3c 80 10 c6 02 0a 08 0a 08 3c 8d 14
>78b8	0f 0c 07 06 3c 80 14 c7 02 01 02 12 0e 3c 8d 01
>78c8	02 12 0e 3c 8f 15 02 0a 3c 80 0e c8 02 02 3c 8d
>78d8	02 3c 8f 0a 0c 0e 3c 80 14 c9 02 13 0c 01 0a 3c
>78e8	8d 13 0c 01 0a 3c 8f 85 02 44 50 80 0c ca 02 0a
>78f8	08 0a 08 3c 8d 15 3c 80 13 cb 02 0b 0b 08 3c 8d
>7908	0b 0b 08 3c 8f 13 0c 01 0a 3c 80 11 cc 02 0d 13
>7918	07 12 3c 8d 85 05 4e 53 42 51 4a 80 12 cd 02 08
>7928	06 0b 09 3c 8d 08 06 0b 09 3c 8f 04 3c 80 0d ce
>7938	02 07 3c 8d 07 3c 8f 85 01 45 80 0d cf 02 10 15
>7948	09 08 3c 8d 04 08 3c 80 09 d0 02 07 3c 8d 01 3c
>7958	80 0c d1 02 0a 08 0a 08 3c 8d 85 00 80 10 d2 02
>7968	01 0a 3c 8d 01 0a 3c 8f 85 02 46 45 80 10 d3 02
>7978	15 05 02 3c 8d 85 05 48 51 50 46 4c 80 10 d4 02
>7988	15 05 02 3c 8d 85 05 50 48 45 4b 4f 80 09 d5 02
>7998	0e 3c 8d 85 00 80 11 d6 02 0a 0c 0e 3c 8d 0a 0c
>79a8	0e 3c 8f 85 01 4b 80 16 d7 02 09 09 0f 11 3c 8d
>79b8	09 09 0f 11 3c 8f 14 0f 0c 07 06 3c 80 0c d8 02
>79c8	01 02 12 0e 3c 8d 85 00 80 0e d9 02 02 11 3c 8d
>79d8	02 11 3c 8f 0e 3c 80 0f da 02 09 07 0a 04 3c 8d
>79e8	0d 13 07 12 3c 80 12 db 02 11 03 0f 01 14 3c 8d
>79f8	85 05 48 55 47 48 4f 80 0d dc 02 01 01 14 12 3c
>7a08	8d 04 08 3c 80 10 dd 02 13 0c 01 0a 3c 8d 14 0f
>7a18	0c 07 06 3c 80 0d de 02 08 06 0b 09 3c 8d 01 0a
>7a28	3c 80 13 df 02 10 15 09 08 3c 8d 10 15 09 08 3c
>7a38	8f 85 01 4f 80 0d e0 02 0b 05 0e 14 3c 8d 85 01
>7a48	55 80 10 e1 02 07 3c 8d 07 3c 8f 11 03 0f 01 14
>7a58	3c 80 14 e2 02 01 01 14 12 3c 8d 01 01 14 12 3c
>7a68	8f 05 04 10 3c 80 14 e3 02 10 15 09 08 3c 8d 10
>7a78	15 09 08 3c 8f 85 02 48 48 80 14 e4 02 09 07 0a
>7a88	04 3c 8d 09 07 0a 04 3c 8f 0b 0b 08 3c 80 16 e5
>7a98	02 11 03 0f 01 14 3c 8d 11 03 0f 01 14 3c 8f 85
>7aa8	02 41 53 80 0c e6 02 13 0c 01 0a 3c 8d 85 00 80
>7ab8	0c e7 02 0d 13 07 12 3c 8d 85 00 80 0d e8 02 04
>7ac8	08 3c 8d 01 02 12 0e 3c 80 10 e9 02 0b 05 11 06
>7ad8	3c 8d 12 09 13 04 12 3c 80 0f ea 02 0b 05 0e 14
>7ae8	3c 8d 01 01 14 12 3c 80 0c eb 02 0b 05 0e 14 3c
>7af8	8d 85 00 80 10 ec 02 11 03 0f 01 14 3c 8d 85 03
>7b08	48 45 41 80 12 ed 02 01 0a 3c 8d 01 0a 3c 8f 85
>7b18	04 53 50 54 50 80 11 ee 02 0b 0b 08 3c 8d 0b 0b
>7b28	08 3c 8f 04 08 3c 80 0f ef 02 02 3c 8d 02 3c 8f
>7b38	01 01 14 12 3c 80 11 f0 02 07 3c 8d 07 3c 8f 85
>7b48	05 4e 45 42 53 48 80 0d f1 02 09 07 0a 04 3c 8d
>7b58	02 11 3c 80 0b f2 02 15 05 02 3c 8d 0c 3c 80 15
>7b68	f3 02 0a 08 0a 08 3c 8d 0a 08 0a 08 3c 8f 0d 13
>7b78	07 12 3c 80 0f f4 02 0b 05 11 06 3c 8d 08 06 0b
>7b88	09 3c 80 0d f5 02 0c 3c 8d 0c 3c 8f 85 01 44 80
>7b98	09 f6 02 04 3c 8d 0e 3c 80 0c f7 02 07 3c 8d 07
>7ba8	3c 8f 0e 3c 80 0a f8 02 02 11 3c 8d 07 3c 80 12
>7bb8	f9 02 15 02 0a 3c 8d 15 02 0a 3c 8f 85 02 47 4d
>7bc8	80 11 fa 02 09 09 0f 11 3c 8d 85 05 51 55 43 45
>7bd8	4b 80 14 fb 02 13 0c 01 0a 3c 8d 13 0c 01 0a 3c
>7be8	8f 85 02 52 4e 80 17 fc 02 08 06 0b 09 3c 8d 08
>7bf8	06 0b 09 3c 8f 85 05 42 44 55 42 50 80 16 fd 02
>7c08	08 06 0b 09 3c 8d 08 06 0b 09 3c 8f 85 04 46 4c
>7c18	51 4a 80 0f fe 02 01 02 12 0e 3c 8d 09 07 0a 04
>7c28	3c 80 11 ff 02 0b 0b 08 3c 8d 0b 0b 08 3c 8f 85
>7c38	01 4c 80 0a 00 03 02 11 3c 8d 85 00 80 17 01 03
>7c48	12 09 13 04 12 3c 8d 12 09 13 04 12 3c 8f 08 06
>7c58	0b 09 3c 80 09 02 03 15 3c 8d 85 00 80 0d 03 03
>7c68	14 0f 0c 07 06 3c 8d 85 00 80 0f 04 03 09 09 0f
>7c78	11 3c 8d 85 03 4d 44 54 80 0f 05 03 0b 0b 08 3c
>7c88	8d 12 09 13 04 12 3c 80 14 06 03 09 09 0f 11 3c
>7c98	8d 09 09 0f 11 3c 8f 05 04 10 3c 80 0c 07 03 13
>7ca8	0c 01 0a 3c 8d 85 00 80 0a 08 03 04 08 3c 8d 85
>7cb8	00 80 0f 09 03 09 09 0f 11 3c 8d 0b 05 11 06 3c
>7cc8	80 0c 0a 03 0a 08 0a 08 3c 8d 85 00 80 0b 0b 03
>7cd8	05 04 10 3c 8d 85 00 80 0c 0c 03 0a 08 0a 08 3c
>7ce8	8d 85 00 80 13 0d 03 01 0a 3c 8d 01 0a 3c 8f 85
>7cf8	05 54 4c 48 46 49 80 10 0e 03 11 03 0f 01 14 3c
>7d08	8d 0b 05 0e 14 3c 80 0b 0f 03 0b 0b 08 3c 8d 85
>7d18	00 80 0c 10 03 15 05 02 3c 8d 85 01 43 80 15 11
>7d28	03 0d 13 07 12 3c 8d 0d 13 07 12 3c 8f 09 09 0f
>7d38	11 3c 80 0b 12 03 15 02 0a 3c 8d 85 00 80 0f 13
>7d48	03 04 08 3c 8d 04 08 3c 8f 85 01 47 80 0f 14 03
>7d58	09 07 0a 04 3c 8d 01 01 14 12 3c 80 0d 15 03 02
>7d68	3c 8d 02 3c 8f 02 11 3c 80 0f 16 03 15 3c 8d 15
>7d78	3c 8f 0b 05 0e 14 3c 80 0f 17 03 14 0f 0c 07 06
>7d88	3c 8d 0b 0b 08 3c 80 19 18 03 11 03 0f 01 14 3c
>7d98	8d 11 03 0f 01 14 3c 8f 85 05 4f 4a 4c 4a 4d 80
>7da8	0d 19 03 12 09 13 04 12 3c 8d 85 00 80 0c 1a 03
>7db8	01 02 12 0e 3c 8d 15 3c 80 15 1b 03 05 11 09 13
>7dc8	07 3c 8d 05 11 09 13 07 3c 8f 85 01 55 80 0f 1c
>7dd8	03 13 0c 01 0a 3c 8d 85 03 52 4f 4c 80 0c 1d 03
>7de8	13 0c 01 0a 3c 8d 85 00 80 12 1e 03 0d 13 07 12
>7df8	3c 8d 0d 13 07 12 3c 8f 01 3c 80 17 1f 03 05 11
>7e08	09 13 07 3c 8d 05 11 09 13 07 3c 8f 13 0c 01 0a
>7e18	3c 80 0e 20 03 02 3c 8d 02 3c 8f 15 02 0a 3c 80
>7e28	10 21 03 09 07 0a 04 3c 8d 85 04 50 45 4e 43 80
>7e38	11 22 03 0b 0b 08 3c 8d 0b 0b 08 3c 8f 85 01 50
>7e48	80 09 23 03 01 3c 8d 85 00 80 11 24 03 0b 0b 08
>7e58	3c 8d 0b 0b 08 3c 8f 85 01 46 80 0d 25 03 0e 3c
>7e68	8d 05 11 09 13 07 3c 80 0d 26 03 09 09 0f 11 3c
>7e78	8d 01 0a 3c 80 0c 27 03 04 3c 8d 04 3c 8f 01 3c
>7e88	80 10 28 03 07 3c 8d 07 3c 8f 85 04 4e 44 4b 55
>7e98	80 0c 29 03 15 05 02 3c 8d 85 01 42 80 13 2a 03
>7ea8	09 07 0a 04 3c 8d 09 07 0a 04 3c 8f 04 08 3c 80
>7eb8	0e 2b 03 11 03 0f 01 14 3c 8d 01 0a 3c 80 0c 2c
>7ec8	03 15 05 02 3c 8d 01 0a 3c 80 0d 2d 03 02 11 3c
>7ed8	8d 85 03 47 49 43 80 0f 2e 03 14 0f 0c 07 06 3c
>7ee8	8d 05 04 10 3c 80 14 2f 03 15 02 0a 3c 8d 15 02
>7ef8	0a 3c 8f 85 04 46 48 4a 55 80 0f 30 03 15 3c 8d
>7f08	15 3c 8f 85 03 4d 54 4c 80 09 31 03 01 3c 8d 85
>7f18	00 80 0f 32 03 05 11 09 13 07 3c 8d 85 02 4e 50
>7f28	80 09 33 03 02 3c 8d 85 00 80 0b 34 03 15 3c 8d
>7f38	05 04 10 3c 80 0c 35 03 0b 05 0e 14 3c 8d 85 00
>7f48	80 09 36 03 02 3c 8d 85 00 80 16 37 03 14 0f 0c
>7f58	07 06 3c 8d 14 0f 0c 07 06 3c 8f 15 02 0a 3c 80
>7f68	0f 38 03 01 01 14 12 3c 8d 13 0c 01 0a 3c 80 0d
>7f78	39 03 05 11 09 13 07 3c 8d 85 00 80 0c 3a 03 02
>7f88	11 3c 8d 0a 0c 0e 3c 80 0d 3b 03 0e 3c 8d 0e 3c
>7f98	8f 02 11 3c 80 0b 3c 03 05 04 10 3c 8d 85 00 80
>7fa8	09 3d 03 15 3c 8d 85 00 80 0d 3e 03 11 03 0f 01
>7fb8	14 3c 8d 85 00 80 0a 3f 03 01 0a 3c 8d 0c 3c 80
>7fc8	15 40 03 08 06 0b 09 3c 8d 08 06 0b 09 3c 8f 09
>7fd8	07 0a 04 3c 80 0d 41 03 05 04 10 3c 8d 15 02 0a
>7fe8	3c 80 09 42 03 04 3c 8d 85 00 80 0f 43 03 0d 13
>7ff8	07 12 3c 8d 13 0c 01 0a 3c 80 0b 44 03 15 05 02
>8008	3c 8d 85 00 80 16 45 03 12 09 13 04 12 3c 8d 12
>8018	09 13 04 12 3c 8f 0b 0b 08 3c 80 13 46 03 0d 13
>8028	07 12 3c 8d 0d 13 07 12 3c 8f 02 11 3c 80 0c 47
>8038	03 10 15 09 08 3c 8d 0c 3c 80 0e 48 03 d8 0d 13
>8048	07 12 3c 8d 85 01 4b 80 0e 49 03 d8 11 03 0f 01
>8058	14 3c 8d 85 00 80 0c 4a 03 d8 04 08 3c 8d 85 01
>8068	47 80 29 4b 03 d8 08 06 0b 09 3c 8d 85 1c 46 44
>8078	49 4f 4b 54 45 48 42 47 47 52 46 45 42 44 55 42
>8088	50 46 4c 51 4a 50 45 4e 43 47 80 12 4c 03 d8 09
>8098	07 0a 04 3c 8d 85 05 50 45 4e 43 47 80 10 4d 03
>80a8	d8 0e 3c 8d 85 06 52 4e 4e 47 55 4b 80 0c 4e 03
>80b8	d8 15 05 02 3c 8d 85 00 80 10 4f 03 d8 0c 3c 8d
>80c8	85 06 44 4d 55 55 52 44 80 1d 50 03 d8 07 3c 8d
>80d8	85 13 43 42 48 54 41 48 55 47 48 4f 4e 45 42 53
>80e8	48 4e 44 4b 55 80 0d 51 03 d8 13 0c 01 0a 3c 8d
>80f8	85 00 80 24 52 03 d8 09 09 0f 11 3c 8d 85 17 46
>8108	44 49 4f 4b 54 45 48 42 47 47 52 46 45 53 50 54
>8118	50 54 4c 48 46 49 80 10 53 03 d8 05 04 10 3c 8d
>8128	85 04 46 48 4a 55 80 0e 54 03 d8 0b 0b 08 3c 8d
>8138	85 02 50 46 80 0d 55 03 d8 0a 08 0a 08 3c 8d 85
>8148	00 80 13 56 03 d8 10 15 09 08 3c 8d 85 06 44 4d
>8158	55 55 52 44 80 0d 57 03 d8 01 02 12 0e 3c 8d 85
>8168	00 80 0a 58 03 d8 04 3c 8d 85 00 80 10 59 03 d8
>8178	15 02 0a 3c 8d 85 04 46 48 4a 55 80 0a 5a 03 d8
>8188	15 3c 8d 85 00 80 0d 5b 03 d8 01 01 14 12 3c 8d
>8198	85 00 80 0e 5c 03 d8 05 11 09 13 07 3c 8d 85 00
>81a8	80 12 5d 03 d8 14 0f 0c 07 06 3c 8d 85 04 46 48
>81b8	4a 55 80 1b 5e 03 d8 0b 05 11 06 3c 8d 85 0e 46
>81c8	44 49 4f 4b 54 45 48 42 47 47 52 46 45 80 0a 5f
>81d8	03 d8 01 3c 8d 85 00 80 0d 60 03 d8 0b 05 0e 14
>81e8	3c 8d 85 00 80 0a 61 03 d8 02 3c 8d 85 00 80 0c
>81f8	62 03 d8 02 11 3c 8d 85 01 4b 80 0d 63 03 d8 0a
>8208	0c 0e 3c 8d 85 01 4b 80 10 64 03 d8 12 09 13 04
>8218	12 3c 8d 85 02 50 46 80 11 65 03 d8 01 0a 3c 8d
>8228	85 06 44 4d 55 55 52 44 80 06 66 03 81 8e 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 fe 1c	jsr $1cfe			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 05 1e	jsr $1e05			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0b		sta $0b				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0c		sta $0c				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0d		sta $0d				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 0e		sta $0e				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 68 10	jsr $1068			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 64 1d	jsr $1d64			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 a9 21	jsr $21a9		jsr	variableHandler
.1065	68		pla				pla
.1066	a8		tay				tay
.1067	60		rts				rts
.1068					AdvanceLowMemoryByte:
.1068	18		clc				clc
.1069	65 0d		adc $0d				adc 	lowMemory
.106b	85 0d		sta $0d				sta 	lowMemory
.106d	90 02		bcc $1071			bcc 	_ALMBExit
.106f	e6 0e		inc $0e				inc 	lowMemory+1
.1071					_ALMBExit:
.1071	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.21b0					Command_FOR:
.21b0	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.21b2	a2 0b		ldx #$0b			ldx 	#11
.21b4	20 72 1d	jsr $1d72			jsr 	RSClaim
.21b7	20 ae 10	jsr $10ae			jsr 	CommandLET 					; do the same as LET.
.21ba	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.21bc	c9 80		cmp #$80			cmp 	#$80
.21be	d0 4c		bne $220c			bne 	_CFType
.21c0	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.21c2	20 3f 1d	jsr $1d3f			jsr 	CheckToken
.21c5	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.21c7	20 73 17	jsr $1773			jsr 	EvaluateInteger				; get terminal value in stack 1
.21ca	98		tya				tya
.21cb	48		pha				pha
.21cc	a0 04		ldy #$04			ldy 	#4
.21ce	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.21d0	91 78		sta ($78),y			sta 	(rsPointer),y
.21d2	c8		iny				iny
.21d3	a5 50		lda $50				lda		esInt1
.21d5	91 78		sta ($78),y			sta 	(rsPointer),y
.21d7	c8		iny				iny
.21d8	a9 01		lda #$01			lda 	#1  						; the default step in 6
.21da	91 78		sta ($78),y			sta 	(rsPointer),y
.21dc	c8		iny				iny
.21dd	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.21df	91 78		sta ($78),y			sta 	(rsPointer),y
.21e1	c8		iny				iny
.21e2	a5 51		lda $51				lda		esInt1+1
.21e4	91 78		sta ($78),y			sta 	(rsPointer),y
.21e6	c8		iny				iny
.21e7	a5 59		lda $59				lda		esInt2+1
.21e9	91 78		sta ($78),y			sta 	(rsPointer),y
.21eb	c8		iny				iny
.21ec	a5 61		lda $61				lda		esInt3+1
.21ee	91 78		sta ($78),y			sta 	(rsPointer),y
.21f0	68		pla				pla
.21f1	a8		tay				tay
.21f2	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.21f4	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.21f6	d0 0e		bne $2206			bne 	_CFDone
.21f8	c8		iny				iny									; skip over step.
.21f9	20 73 17	jsr $1773			jsr 	EvaluateInteger 			; get step
.21fc	98		tya				tya
.21fd	48		pha				pha
.21fe	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2200	a0 06		ldy #$06			ldy 	#6
.2202	91 78		sta ($78),y			sta 	(rsPointer),y
.2204	68		pla				pla
.2205	a8		tay				tay
.2206					_CFDone:
.2206	a9 01		lda #$01			lda 	#1
.2208	20 9e 1d	jsr $1d9e			jsr 	RSSavePosition 				; save position.
.220b	60		rts				rts
.220c					_CFType:
.220c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.220e	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.2211					Command_NEXT:
.2211	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2213	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2215	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2217	f0 05		beq $221e			beq 	_isok
.2219	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.221b	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.221e					_isok:
.221e	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2220	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2222	b0 18		bcs $223c			bcs 	_CNNoIndex
.2224	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2226	20 a0 17	jsr $17a0			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2229	98		tya				tya
.222a	48		pha				pha
.222b	a0 04		ldy #$04			ldy 	#4 							; check same variable
.222d	b1 78		lda ($78),y			lda 	(rsPointer),y
.222f	d5 48		cmp $48,x			cmp 	esInt0,x
.2231	d0 76		bne $22a9			bne 	_CNBadIndex
.2233	c8		iny				iny
.2234	b1 78		lda ($78),y			lda 	(rsPointer),y
.2236	d5 50		cmp $50,x			cmp 	esInt1,x
.2238	d0 6f		bne $22a9			bne 	_CNBadIndex
.223a	68		pla				pla
.223b	a8		tay				tay
.223c					_CNNoIndex:
.223c	98		tya				tya
.223d	48		pha				pha
.223e	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2240	b1 78		lda ($78),y			lda 	(rsPointer),y
.2242	85 04		sta $04				sta 	temp0
.2244	c8		iny				iny
.2245	b1 78		lda ($78),y			lda 	(rsPointer),y
.2247	85 05		sta $05				sta 	temp0+1
.2249	c8		iny				iny
.224a	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.224c	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.224e	85 09		sta $09				sta 	temp2+1 					; save for later.
.2250	10 01		bpl $2253			bpl 	_CNSignX
.2252	ca		dex				dex  								; X = $FF
.2253					_CNSignX:
.2253	18		clc				clc 								; add to the LSB
.2254	a0 00		ldy #$00			ldy 	#0
.2256	71 04		adc ($04),y			adc 	(temp0),y
.2258	91 04		sta ($04),y			sta 	(temp0),y
.225a					_CNPropogate:
.225a	c8		iny				iny  								; add the sign extended in X to the rest.
.225b	8a		txa				txa
.225c	71 04		adc ($04),y			adc 	(temp0),y
.225e	91 04		sta ($04),y			sta 	(temp0),y
.2260	c8		iny				iny
.2261	8a		txa				txa
.2262	71 04		adc ($04),y			adc 	(temp0),y
.2264	91 04		sta ($04),y			sta 	(temp0),y
.2266	c8		iny				iny
.2267	8a		txa				txa
.2268	71 04		adc ($04),y			adc 	(temp0),y
.226a	91 04		sta ($04),y			sta 	(temp0),y
.226c	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.226d	a5 78		lda $78				lda 	rsPointer
.226f	69 07		adc #$07			adc 	#7
.2271	85 06		sta $06				sta 	temp1
.2273	a9 00		lda #$00			lda 	#0
.2275	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2277	a8		tay				tay 								; and clear the Y register again.
.2278	65 79		adc $79				adc 	rsPointer+1
.227a	85 07		sta $07				sta 	temp1+1
.227c	38		sec				sec 								; calculate current - limit oring interim values.
.227d	20 b5 22	jsr $22b5			jsr 	_CNCompare
.2280	20 b5 22	jsr $22b5			jsr 	_CNCompare
.2283	20 b5 22	jsr $22b5			jsr 	_CNCompare
.2286	20 b5 22	jsr $22b5			jsr 	_CNCompare
.2289	50 02		bvc $228d			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.228b	49 80		eor #$80			eor 	#$80
.228d					_CNNoOverflow:
.228d	a4 09		ldy $09				ldy 	temp2+1						; get step back
.228f	30 1d		bmi $22ae			bmi 	_CNCheckDownto
.2291	c9 00		cmp #$00			cmp 	#0
.2293	30 0c		bmi $22a1			bmi 	_CNLoopRound 				; loop round if < =
.2295	a5 08		lda $08				lda 	temp2
.2297	f0 08		beq $22a1			beq 	_CNLoopRound
.2299					_CNLoopExit:
.2299	68		pla				pla
.229a	a8		tay				tay
.229b	a9 0b		lda #$0b			lda 	#11
.229d	20 94 1d	jsr $1d94			jsr 	RSFree
.22a0	60		rts				rts
.22a1					_CNLoopRound:
.22a1	68		pla				pla
.22a2	a8		tay				tay
.22a3	a9 01		lda #$01			lda 	#1
.22a5	20 b1 1d	jsr $1db1			jsr 	RSLoadPosition				; go back to the loop top
.22a8	60		rts				rts
.22a9					_CNBadIndex:
.22a9	a2 12		ldx #$12			ldx 	#ErrorID_BadIndex
.22ab	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.22ae					_CNCheckDownto:
.22ae	c9 00		cmp #$00			cmp 	#0
.22b0	10 ef		bpl $22a1			bpl 	_CNLoopRound
.22b2	4c 99 22	jmp $2299			jmp 	_CNLoopExit
.22b5					_CNCompare:
.22b5	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.22b7	f1 06		sbc ($06),y			sbc 	(temp1),y
.22b9	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.22bb	85 08		sta $08				sta 	temp2
.22bd	c8		iny				iny
.22be	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1072					CommandIf:
.1072	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; if what ?
.1075	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1077	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.1079	f0 04		beq $107f			beq 	_IfSimple
.107b	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.107d	d0 1b		bne $109a			bne 	_IfComplex
.107f					_IfSimple:
.107f	20 fe 1c	jsr $1cfe			jsr 	MInt32Zero					; check if TOS zero
.1082	f0 10		beq $1094			beq 	_IfEOL 						; go to next line.
.1084	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1086	c8		iny				iny
.1087	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1089	f0 0c		beq $1097			beq 	_IfGoto 					; do the Goto code
.108b	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.108d	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.108f	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1091	f0 04		beq $1097			beq 	_IfGoto
.1093	60		rts				rts 								; else continue on this line.
.1094					_IfEOL:
.1094	4c 6e 13	jmp $136e			jmp 	AdvanceNextLine 			; go to next line
.1097					_IfGoto:
.1097	4c ad 13	jmp $13ad			jmp 	CommandGoto
.109a					_IfComplex:
.109a	20 fe 1c	jsr $1cfe			jsr 	MInt32Zero 					; is it true ?
.109d	f0 01		beq $10a0			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.109f	60		rts				rts 								; else continue.
.10a0					_IFSkip:
.10a0	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a2	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a4	4c 28 23	jmp $2328			jmp		ScanForward
.10a7					Command_ELSE:
.10a7	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a9	8a		txa				txa
.10aa	4c 28 23	jmp $2328			jmp		ScanForward
.10ad					Command_ENDIF:
.10ad	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10ae					CommandLet:
.10ae	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b0	20 a0 17	jsr $17a0			jsr 	EvaluateReference
.10b3	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b5	20 3f 1d	jsr $1d3f			jsr 	CheckToken
.10b8	e8		inx				inx 								; do RHS
.10b9	20 54 17	jsr $1754			jsr 	Evaluate 					; evaluate and derefernce
.10bc	ca		dex				dex
.10bd	20 c1 10	jsr $10c1			jsr 	WriteValue 					; write it out
.10c0	60		rts				rts
.10c1					WriteValue:
.10c1	98		tya				tya
.10c2	48		pha				pha
.10c3	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c6	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10c8	55 41		eor $41,x			eor 	esType+1,x
.10ca	29 40		and #$40			and 	#$40
.10cc	d0 50		bne $111e			bne		_WVType
.10ce	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d0	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d2	29 40		and #$40			and 	#$40
.10d4	d0 1f		bne $10f5			bne 	_WVCopyString
.10d6	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10d8	15 41		ora $41,x			ora 	esType+1,x
.10da	4a		lsr a				lsr 	a
.10db	90 22		bcc $10ff			bcc 	_WVCopyData4
.10dd	b5 40		lda $40,x			lda 	esType,x
.10df	4a		lsr a				lsr 	a
.10e0	90 3c		bcc $111e			bcc 	_WVType
.10e2	e8		inx				inx 								; force the value being written to be a float.
.10e3	20 1f 14	jsr $141f			jsr 	BPMakeFloat
.10e6	ca		dex				dex
.10e7	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ea	e8		inx				inx
.10eb	8a		txa				txa
.10ec	a2 1e		ldx #$1e		ldx	#30
.10ee	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.10f1	aa		tax				tax
.10f2	4c 1b 11	jmp $111b			jmp 	_WVCopyExit
.10f5					_WVCopyString:
.10f5	8a		txa				txa
.10f6	a2 08		ldx #$08		ldx	#8
.10f8	20 3d 20	jsr $203d		jsr	stringHandler
.10fb	aa		tax				tax
.10fc	4c 1b 11	jmp $111b			jmp 	_WVCopyExit
.10ff					_WVCopyData4:
.10ff	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1101	29 20		and #$20			and 	#$20
.1103	d0 10		bne $1115			bne 	_WVCopyData1
.1105	a0 03		ldy #$03			ldy 	#3
.1107	b5 61		lda $61,x			lda 	esInt3+1,x
.1109	91 04		sta ($04),y			sta 	(temp0),y
.110b	88		dey				dey
.110c	b5 59		lda $59,x			lda 	esInt2+1,x
.110e	91 04		sta ($04),y			sta 	(temp0),y
.1110	88		dey				dey
.1111	b5 51		lda $51,x			lda 	esInt1+1,x
.1113	91 04		sta ($04),y			sta 	(temp0),y
.1115					_WVCopyData1:
.1115	a0 00		ldy #$00			ldy 	#0
.1117	b5 49		lda $49,x			lda 	esInt0+1,x
.1119	91 04		sta ($04),y			sta 	(temp0),y
.111b					_WVCopyExit:
.111b	68		pla				pla
.111c	a8		tay				tay
.111d	60		rts				rts
.111e					_WVType:
.111e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1120	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1123					TOSToTemp0:
.1123	b5 48		lda $48,x			lda 	esInt0,x
.1125	85 04		sta $04				sta 	temp0
.1127	b5 50		lda $50,x			lda 	esInt1,x
.1129	85 05		sta $05				sta 	temp0+1
.112b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.112c					Command_New:
.112c	20 81 12	jsr $1281			jsr 	ResetCodeAddress 			; point to first line
.112f	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1131	98		tya				tya
.1132	91 02		sta ($02),y			sta 	(codePtr),y
.1134	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.1137	4c 6b 13	jmp $136b			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.113a					Command_Poke:
.113a	a9 01		lda #$01			lda 	#1
.113c	d0 06		bne $1144			bne 	PokeGeneral
.113e					Command_Doke:
.113e	a9 02		lda #$02			lda 	#2
.1140	d0 02		bne $1144			bne 	PokeGeneral
.1142					Command_Loke:
.1142	a9 03		lda #$03			lda 	#3
.1144					PokeGeneral:
.1144	48		pha				pha 								; save size
.1145	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; target address
.1148	20 57 1d	jsr $1d57			jsr	 	CheckComma
.114b	e8		inx				inx
.114c	20 73 17	jsr $1773			jsr 	EvaluateInteger 			; what value to POKE ?
.114f	ca		dex				dex
.1150	20 23 11	jsr $1123			jsr 	TOSToTemp0 					; temp0 points to the target address
.1153	84 0a		sty $0a				sty 	tempShort 					; save Y
.1155	68		pla				pla 								; get copy type and dispatch
.1156	aa		tax				tax
.1157	ca		dex				dex
.1158	f0 14		beq $116e			beq 	_Poke1
.115a	ca		dex				dex
.115b	f0 0b		beq $1168			beq 	_Poke2
.115d	a0 03		ldy #$03			ldy 	#3
.115f	a5 61		lda $61				lda 	esInt3+1
.1161	91 04		sta ($04),y			sta 	(temp0),y
.1163	88		dey				dey
.1164	a5 59		lda $59				lda 	esInt2+1
.1166	91 04		sta ($04),y			sta 	(temp0),y
.1168					_Poke2:
.1168	a0 01		ldy #$01			ldy 	#1
.116a	a5 51		lda $51				lda 	esInt1+1
.116c	91 04		sta ($04),y			sta 	(temp0),y
.116e					_Poke1:
.116e	a0 00		ldy #$00			ldy 	#0
.1170	a5 49		lda $49				lda 	esInt0+1
.1172	91 04		sta ($04),y			sta 	(temp0),y
.1174	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1176	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af0					lastPrintToken:
>0af0							.fill 	1
.1177					Command_Print:
.1177	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1179	8d f0 0a	sta $0af0			sta 	lastPrintToken
.117c	88		dey				dey
.117d					_PrintLoopSkip:
.117d	c8		iny				iny
.117e					_PrintLoop:
.117e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1180	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1182	f0 5b		beq $11df			beq 	_PrintExit
.1184	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.1186	f0 57		beq $11df			beq 	_PrintExit
.1188	8d f0 0a	sta $0af0			sta 	lastPrintToken 				; update LPT
.118b	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.118d	f0 ee		beq $117d			beq 	_PrintLoopSkip
.118f	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1191	f0 3c		beq $11cf			beq	 	_PrintNewLine
.1193	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.1195	f0 40		beq $11d7			beq 	_PrintTab
.1197	20 52 17	jsr $1752			jsr 	EvaluateRoot 				; evaluate something at the root
.119a	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.119c	85 04		sta $04				sta 	temp0
.119e	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.11a0	85 05		sta $05				sta 	1+(temp0)
.11a2	a5 40		lda $40				lda 	esType 						; get type
.11a4	f0 15		beq $11bb			beq		_PrintInteger
.11a6	4a		lsr a				lsr 	a 							; check for floating point
.11a7	b0 08		bcs $11b1			bcs 	_PrintFloat
.11a9					_PrintString:
.11a9	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11ab	20 23 11	jsr $1123			jsr 	TOSToTemp0
.11ae	4c c9 11	jmp $11c9			jmp 	_PrintTemp0 				; print no leading space.
.11b1					_PrintFloat:
.11b1	a9 00		lda #$00			lda 	#0 							; stack level.
.11b3	a2 14		ldx #$14		ldx	#20
.11b5	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.11b8	4c c2 11	jmp $11c2			jmp 	_PrintSpaceTemp0
.11bb					_PrintInteger:
.11bb	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11bd	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11bf	20 2d 1c	jsr $1c2d			jsr 	MInt32ToString				; convert to text
.11c2					_PrintSpaceTemp0:
.11c2	a9 20		lda #$20			lda 	#32
.11c4	a2 04		ldx #$04		ldx	#4
.11c6	20 f8 1d	jsr $1df8		jsr	deviceHandler
.11c9					_PrintTemp0:
.11c9	20 f0 11	jsr $11f0			jsr 	PrintString
.11cc	4c 7e 11	jmp $117e			jmp 	_PrintLoop
.11cf					_PrintNewLine:
.11cf	a2 00		ldx #$00		ldx	#0
.11d1	20 f8 1d	jsr $1df8		jsr	deviceHandler
.11d4	4c 7d 11	jmp $117d			jmp 	_PrintLoopSkip
.11d7					_PrintTab:
.11d7	a2 06		ldx #$06		ldx	#6
.11d9	20 f8 1d	jsr $1df8		jsr	deviceHandler
.11dc	4c 7d 11	jmp $117d			jmp 	_PrintLoopSkip
.11df					_PrintExit:
.11df	ad f0 0a	lda $0af0			lda		lastPrintToken 				; check last token
.11e2	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11e4	f0 09		beq $11ef			beq 	_PrintExit2
.11e6	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.11e8	f0 05		beq $11ef			beq 	_PrintExit2
.11ea	a2 00		ldx #$00		ldx	#0
.11ec	20 f8 1d	jsr $1df8		jsr	deviceHandler
.11ef					_PrintExit2:
.11ef	60		rts				rts
.11f0					PrintString:
.11f0	8a		txa				txa
.11f1	48		pha				pha
.11f2	98		tya				tya
.11f3	48		pha				pha
.11f4	a0 00		ldy #$00			ldy 	#0							; get length
.11f6	b1 04		lda ($04),y			lda 	(temp0),y
.11f8	aa		tax				tax 								; into X
.11f9	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.11fb	f0 10		beq $120d			beq 	_PSExit
.11fd	ca		dex				dex
.11fe	8a		txa				txa
.11ff	48		pha				pha
.1200	c8		iny				iny
.1201	b1 04		lda ($04),y			lda 	(temp0),y
.1203	a2 04		ldx #$04		ldx	#4
.1205	20 f8 1d	jsr $1df8		jsr	deviceHandler
.1208	68		pla				pla
.1209	aa		tax				tax
.120a	4c f9 11	jmp $11f9			jmp 	_PSLoop
.120d					_PSExit:
.120d	68		pla				pla
.120e	a8		tay				tay
.120f	68		pla				pla
.1210	aa		tax				tax
.1211	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1212					Command_Rem:
.1212					Command_Rem2:
.1212	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1214	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1216	d0 06		bne $121e			bne 	_CRNotString
.1218	c8		iny				iny
.1219	98		tya				tya
.121a	38		sec				sec
.121b	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.121d	a8		tay				tay
.121e					_CRNotString:
.121e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.22bf					Command_Repeat:
.22bf	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.22c1	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.22c3	20 72 1d	jsr $1d72			jsr 	RSClaim
.22c6	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.22c8	20 9e 1d	jsr $1d9e			jsr 	RSSavePosition
.22cb	60		rts				rts
.22cc					Command_Until:
.22cc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22ce	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.22d0	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.22d2	f0 05		beq $22d9			beq 	_isok
.22d4	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.22d6	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.22d9					_isok:
.22d9	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; at the bottom.
.22dc	20 fe 1c	jsr $1cfe			jsr 	MInt32Zero					; check if TOS zero
.22df	d0 06		bne $22e7			bne 	_CUExit
.22e1	a9 01		lda #$01			lda 	#1
.22e3	20 b1 1d	jsr $1db1			jsr 	RSLoadPosition 				; reload the position from offset 1.
.22e6	60		rts				rts
.22e7					_CUExit:
.22e7	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.22e9	20 94 1d	jsr $1d94			jsr 	RSFree
.22ec	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.121f					Command_Run:
.121f	a2 ff		ldx #$ff			ldx 	#$FF
.1221	9a		txs				txs
.1222	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1225	20 81 12	jsr $1281			jsr 	ResetCodeAddress
.1228	a0 03		ldy #$03			ldy 	#3
.122a					CRNextInstruction:
.122a	64 7b		stz $7b				stz 	softMemAlloc+1
.122c	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.122e	10 1c		bpl $124c			bpl 	_CRNotToken
.1230	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1232	b0 0c		bcs $1240			bcs 	_CRExecute
.1234	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1236	b0 56		bcs $128e			bcs 	Unimplemented
.1238	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.123a	b0 04		bcs $1240			bcs 	_CRExecute
.123c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.123e	b0 16		bcs $1256			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1240					_CRExecute:
.1240	c8		iny				iny 								; consume it.
.1241	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1242	aa		tax				tax
.1243	20 49 12	jsr $1249			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1246	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.1249					_CRRunRoutine:
.1249	7c 98 12	jmp ($1298,x)			jmp 	(Group0Vectors,x)
.124c					_CRNotToken:
.124c	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.124e	b0 3e		bcs $128e			bcs 	Unimplemented
.1250					_CRDefaultLet:
.1250	20 ae 10	jsr $10ae			jsr 	CommandLet 					; do the default, LET
.1253	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.1256					_CRCheckIndirect:
.1256	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1258	f0 f6		beq $1250			beq 	_CRDefaultLet
.125a	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.125c	f0 f2		beq $1250			beq 	_CRDefaultLet
.125e	d0 2e		bne $128e			bne 	Unimplemented
.1260					CommandShift1:
.1260	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1262	10 2a		bpl $128e			bpl 	Unimplemented 				; we have an error as this should not happen.
.1264	0a		asl a				asl 	a 							; double into X
.1265	aa		tax				tax
.1266	c8		iny				iny 								; advance over it.
.1267	20 6d 12	jsr $126d			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.126a	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.126d					_RunIt:
.126d	7c 44 13	jmp ($1344,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.1270					CommandShift2:
.1270	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1272	10 1a		bpl $128e			bpl 	Unimplemented 				; we have an error as this should not happen.
.1274	0a		asl a				asl 	a 							; double into X
.1275	aa		tax				tax
.1276	c8		iny				iny 								; advance over it.
.1277	20 7d 12	jsr $127d			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.127a	4c 2a 12	jmp $122a			jmp 	CRNextInstruction
.127d					_RunIt:
.127d	7c 58 13	jmp ($1358,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.1280					CommandColon:
.1280	60		rts				rts
.1281					ResetCodeAddress:
.1281	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1284	85 02		sta $02				sta 	codePtr
.1286	ad c9 0a	lda $0ac9			lda 	basePage+1
.1289	85 03		sta $03				sta 	codePtr+1
.128b	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.128d	60		rts				rts
.128e					Unimplemented:
.128e	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1290	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1293					TKErr01:
.1293					TKErr02:
.1293					TKErr03:
.1293					TKErr04:
.1293					TKErr05:
.1293					TKErr06:
.1293					TKErr07:
.1293					TKErr08:
.1293	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1295	20 05 1e	jsr $1e05			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.1298					Group0Vectors:
>1298	6e 13					.word	AdvanceNextLine          ; $80 [[eol]]
>129a	60 12					.word	CommandShift1            ; $81 [[sh1]]
>129c	70 12					.word	CommandShift2            ; $82 [[sh2]]
>129e	8e 12					.word	Unimplemented            ; $83 [[sh3]]
>12a0	8e 12					.word	Unimplemented            ; $84 [[fpc]]
>12a2	93 12					.word	TKErr08                  ; $85 [[str]]
>12a4	c1 14					.word	AndHandler               ; $86 and
>12a6	ae 14					.word	OrHandler                ; $87 or
>12a8	9b 14					.word	XorHandler               ; $88 xor
>12aa	e3 15					.word	CompareGreaterEq         ; $89 >=
>12ac	ed 15					.word	CompareLessEq            ; $8a <=
>12ae	cf 15					.word	CompareGreater           ; $8b >
>12b0	c5 15					.word	CompareLess              ; $8c <
>12b2	bb 15					.word	CompareEquals            ; $8d =
>12b4	d9 15					.word	CompareNotEquals         ; $8e <>
>12b6	2c 14					.word	AddHandler               ; $8f +
>12b8	4f 14					.word	SubHandler               ; $90 -
>12ba	e7 14					.word	ShrHandler               ; $91 >>
>12bc	d4 14					.word	ShlHandler               ; $92 <<
>12be	62 14					.word	MulHandler               ; $93 *
>12c0	75 14					.word	DivHandler               ; $94 /
>12c2	88 14					.word	ModHandler               ; $95 mod
>12c4	20 15					.word	PowerHandler             ; $96 ^
>12c6	fa 14					.word	WordRefHandler           ; $97 !
>12c8	0d 15					.word	ByteRefHandler           ; $98 ?
>12ca	bf 22					.word	Command_Repeat           ; $99 repeat
>12cc	ed 22					.word	Command_While            ; $9a while
>12ce	b0 21					.word	Command_FOR              ; $9b for
>12d0	72 10					.word	CommandIf                ; $9c if
>12d2	93 12					.word	TKErr04                  ; $9d defproc
>12d4	cc 22					.word	Command_Until            ; $9e until
>12d6	10 23					.word	Command_Wend             ; $9f wend
>12d8	11 22					.word	Command_NEXT             ; $a0 next
>12da	93 12					.word	TKErr06                  ; $a1 then
>12dc	ad 10					.word	Command_ENDIF            ; $a2 endif
>12de	8e 12					.word	Unimplemented            ; $a3 endproc
>12e0	2a 17					.word	UnaryParenthesis         ; $a4 (
>12e2	ff 17					.word	UnaryLen                 ; $a5 len(
>12e4	43 18					.word	UnarySgn                 ; $a6 sgn(
>12e6	2c 18					.word	UnaryAbs                 ; $a7 abs(
>12e8	9c 18					.word	Unary_Random             ; $a8 random(
>12ea	e6 18					.word	Unary_Page               ; $a9 page
>12ec	d3 1c					.word	MInt32True               ; $aa true
>12ee	d7 1c					.word	MInt32False              ; $ab false
>12f0	b1 18					.word	Unary_Min                ; $ac min(
>12f2	b5 18					.word	Unary_Max                ; $ad max(
>12f4	9c 19					.word	UnarySys                 ; $ae sys(
>12f6	5f 19					.word	UnaryTimer               ; $af timer(
>12f8	8e 12					.word	Unimplemented            ; $b0 event(
>12fa	88 19					.word	UnaryGet                 ; $b1 get(
>12fc	78 19					.word	UnaryInkey               ; $b2 inkey(
>12fe	33 19					.word	UnaryAlloc               ; $b3 alloc(
>1300	c4 19					.word	ExecChr                  ; $b4 chr$(
>1302	d8 19					.word	ExecLeft                 ; $b5 left$(
>1304	f5 19					.word	ExecMid                  ; $b6 mid$(
>1306	1d 1a					.word	ExecRight                ; $b7 right$(
>1308	8e 12					.word	Unimplemented            ; $b8 str$(
>130a	8e 12					.word	Unimplemented            ; $b9 val(
>130c	5a 18					.word	UnaryPeek                ; $ba peek(
>130e	60 18					.word	UnaryDeek                ; $bb deek(
>1310	66 18					.word	UnaryLeek                ; $bc leek(
>1312	1d 18					.word	UnaryAsc                 ; $bd asc(
>1314	11 19					.word	UnaryIntToFloat          ; $be int(
>1316	24 19					.word	UnaryFloatToInt          ; $bf float(
>1318	8e 12					.word	Unimplemented            ; $c0 isval(
>131a	f4 18					.word	UnaryReference           ; $c1 @
>131c	0a 19					.word	UnaryComplement          ; $c2 ~
>131e	07 19					.word	UnaryHexMarker           ; $c3 &
>1320	93 12					.word	TKErr01                  ; $c4 )
>1322	80 12					.word	CommandColon             ; $c5 :
>1324	93 12					.word	TKErr02                  ; $c6 ,
>1326	93 12					.word	TKErr03                  ; $c7 ;
>1328	12 12					.word	Command_Rem2             ; $c8 '
>132a	93 12					.word	TKErr07                  ; $c9 to
>132c	93 12					.word	TKErr05                  ; $ca step
>132e	8e 12					.word	Unimplemented            ; $cb proc
>1330	8e 12					.word	Unimplemented            ; $cc local
>1332	8e 12					.word	Unimplemented            ; $cd dim
>1334	12 12					.word	Command_Rem              ; $ce rem
>1336	ae 10					.word	CommandLet               ; $cf let
>1338	8e 12					.word	Unimplemented            ; $d0 input
>133a	a7 10					.word	Command_ELSE             ; $d1 else
>133c	df 13					.word	Command_VDU              ; $d2 vdu
>133e	77 11					.word	Command_Print            ; $d3 print
>1340	ad 13					.word	CommandGOTO              ; $d4 goto
>1342	82 13					.word	CommandGOSUB             ; $d5 gosub
>1344	95 13					.word	CommandRETURN            ; $d6 return
>1346	8e 12					.word	Unimplemented            ; $d7 data
>1348	1a 10					.word	Command_Assert           ; $d8 assert
>134a	3a 11					.word	Command_Poke             ; $d9 poke
>134c	3e 11					.word	Command_Doke             ; $da doke
>134e	42 11					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1350					Group1Vectors:
>1350	28 10					.word	CommandClear             ; $86 clear
>1352	8e 12					.word	Unimplemented            ; $87 load
>1354	8e 12					.word	Unimplemented            ; $88 save
>1356	8e 12					.word	Unimplemented            ; $89 list
>1358	2c 11					.word	Command_New              ; $8a new
>135a	1f 12					.word	Command_Run              ; $8b run
>135c	8e 12					.word	Unimplemented            ; $8c read
>135e	8e 12					.word	Unimplemented            ; $8d restore
>1360	6b 13					.word	CommandEnd               ; $8e end
>1362	66 13					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.1364					Group2Vectors:
>1364	8e 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.1366					CommandStop:
.1366	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1368	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.136b					CommandEnd:
.136b	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.136e					AdvanceNextLine:
.136e	a0 00		ldy #$00			ldy 	#0 							; get offset
.1370	b1 02		lda ($02),y			lda 	(codePtr),y
.1372	18		clc				clc 								; add to codePtr
.1373	65 02		adc $02				adc 	codePtr
.1375	85 02		sta $02				sta 	codePtr
.1377	90 02		bcc $137b			bcc 	_ANLNoCarry
.1379	e6 03		inc $03				inc 	codePtr+1
.137b					_ANLNoCarry:
.137b	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.137d	f0 ec		beq $136b			beq 	CommandEnd 					; execute END
.137f	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1381	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.1382					CommandGOSUB:
.1382	20 71 17	jsr $1771			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1385	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1387	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1389	20 72 1d	jsr $1d72			jsr 	RSClaim
.138c	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.138e	20 9e 1d	jsr $1d9e			jsr 	RSSavePosition
.1391	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1393	f0 1b		beq $13b0			beq 	GotoTOS 					; and do a GOTO there.
.1395					CommandRETURN:
.1395	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1397	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1399	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.139b	f0 05		beq $13a2			beq 	_isok
.139d	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.139f	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.13a2					_isok:
.13a2	a9 01		lda #$01			lda 	#1
.13a4	20 b1 1d	jsr $1db1			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13a7	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13a9	20 94 1d	jsr $1d94			jsr 	RSFree
.13ac	60		rts				rts
.13ad					CommandGOTO:
.13ad	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.13b0					GotoTOS:
.13b0	20 81 12	jsr $1281			jsr 	ResetCodeAddress 			; simple search.
.13b3					_GotoSearch:
.13b3	a0 00		ldy #$00			ldy 	#0 							; get offset
.13b5	b1 02		lda ($02),y			lda 	(codePtr),y
.13b7	f0 21		beq $13da			beq 	_GotoError 					; not found.
.13b9	c8		iny				iny									; check LSB match
.13ba	b1 02		lda ($02),y			lda 	(codePtr),y
.13bc	d5 48		cmp $48,x			cmp 	esInt0,x
.13be	d0 07		bne $13c7			bne 	_GotoNext
.13c0	c8		iny				iny
.13c1	b1 02		lda ($02),y			lda 	(codePtr),y
.13c3	d5 50		cmp $50,x			cmp 	esInt1,x
.13c5	f0 10		beq $13d7			beq 	_GotoFound
.13c7					_GotoNext:
.13c7	a0 00		ldy #$00			ldy 	#0 							; go next line
.13c9	b1 02		lda ($02),y			lda 	(codePtr),y
.13cb	18		clc				clc
.13cc	65 02		adc $02				adc 	codePtr
.13ce	85 02		sta $02				sta 	codePtr
.13d0	90 e1		bcc $13b3			bcc 	_GotoSearch
.13d2	e6 03		inc $03				inc 	codePtr+1
.13d4	4c b3 13	jmp $13b3			jmp 	_GotoSearch
.13d7					_GotoFound:
.13d7	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.13d9	60		rts				rts
.13da					_GotoError:
.13da	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.13dc	20 05 1e	jsr $1e05			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.13df					Command_VDU:
.13df	20 71 17	jsr $1771			jsr 	EvaluateRootInteger 			; get integer at root.
.13e2	a5 48		lda $48				lda 	esInt0
.13e4	a2 04		ldx #$04		ldx	#4
.13e6	20 f8 1d	jsr $1df8		jsr	deviceHandler
.13e9					_CVNext:
.13e9	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.13eb	c8		iny				iny
.13ec	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.13ee	f0 ef		beq $13df			beq 	Command_VDU
.13f0	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.13f2	d0 0a		bne $13fe			bne 	_CVExit
.13f4	a5 50		lda $50				lda 	esInt1
.13f6	a2 04		ldx #$04		ldx	#4
.13f8	20 f8 1d	jsr $1df8		jsr	deviceHandler
.13fb	4c e9 13	jmp $13e9			jmp 	_CVNext
.13fe	88		dey		_CVExit:dey
.13ff	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.22ed					Command_While:
.22ed	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.22ef	a2 04		ldx #$04			ldx 	#4
.22f1	20 72 1d	jsr $1d72			jsr 	RSClaim 					; create on stack.
.22f4	88		dey				dey
.22f5	a9 01		lda #$01			lda 	#1
.22f7	20 9e 1d	jsr $1d9e			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.22fa	c8		iny				iny
.22fb	20 73 17	jsr $1773			jsr 	EvaluateInteger				; get the conditional
.22fe	20 fe 1c	jsr $1cfe			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2301	f0 01		beq $2304			beq 	_CWFail
.2303	60		rts				rts
.2304					_CWFail:
.2304	a9 04		lda #$04			lda 	#4
.2306	20 94 1d	jsr $1d94			jsr 	RSFree 						; close the just opened position.
.2309	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.230b	aa		tax				tax
.230c	20 28 23	jsr $2328			jsr 	ScanForward
.230f	60		rts				rts
.2310					Command_Wend:
.2310	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2312	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2314	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2316	f0 05		beq $231d			beq 	_isok
.2318	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.231a	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.231d					_isok:
.231d	a9 01		lda #$01			lda 	#1
.231f	20 b1 1d	jsr $1db1			jsr 	RSLoadPosition				; go back until true
.2322	a9 04		lda #$04			lda 	#4
.2324	20 94 1d	jsr $1d94			jsr 	RSFree 						; close the loop
.2327	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1400					BinaryProcess:
.1400	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1402	15 41		ora $41,x			ora 	esType+1,x
.1404	0a		asl a				asl 	a
.1405	30 0e		bmi $1415			bmi 	_BPStringType 				; if one is set, then string type.
.1407	18		clc				clc 								; return CC for integer
.1408	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.140a	f0 08		beq $1414			beq 	_BPExit 					; if both integer then return with CC.
.140c	20 1a 14	jsr $141a			jsr 	BPMakeBothFloat 			; make both float
.140f	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1411	95 40		sta $40,x			sta 	esType,x
.1413	38		sec				sec 								; and return with carry set.
.1414					_BPExit:
.1414	60		rts				rts
.1415					_BPStringType:
.1415	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1417	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.141a					BPMakeBothFloat:
.141a	e8		inx				inx
.141b	20 1f 14	jsr $141f			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.141e	ca		dex				dex
.141f					BPMakeFloat:
.141f	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1421	4a		lsr a				lsr 	a
.1422	b0 07		bcs $142b			bcs 	_BPIsFloat
.1424	8a		txa				txa
.1425	a2 1a		ldx #$1a		ldx	#26
.1427	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.142a	aa		tax				tax
.142b					_BPIsFloat:
.142b	60		rts				rts
.142c					AddHandler:
.142c	20 fd 15	jsr $15fd			jsr 	DereferenceTwo 				; dereference top two on stack.
.142f	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1431	35 41		and $41,x			and 	esType+1,x
.1433	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1435	d0 10		bne $1447			bne 	_AHStringConcat				; concatenate strings.
.1437	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.143a	b0 03		bcs $143f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.143c	4c c2 1b	jmp $1bc2			jmp 	MInt32Add 							; else do it as integer.
.143f					_IsFPOperation:
.143f	8a		txa				txa 								; call the relevant fp routine
.1440	a2 02		ldx #$02		ldx	#2
.1442	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.1445	aa		tax				tax
.1446	60		rts				rts
.1447					_AHStringConcat:
.1447	8a		txa				txa
.1448	a2 02		ldx #$02		ldx	#2
.144a	20 3d 20	jsr $203d		jsr	stringHandler
.144d	aa		tax				tax
.144e	60		rts				rts
.144f					SubHandler:
.144f	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1452	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1455	b0 03		bcs $145a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1457	4c dc 1b	jmp $1bdc			jmp 	MInt32Sub 							; else do it as integer.
.145a					_IsFPOperation:
.145a	8a		txa				txa 								; call the relevant fp routine
.145b	a2 10		ldx #$10		ldx	#16
.145d	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.1460	aa		tax				tax
.1461	60		rts				rts
.1462					MulHandler:
.1462	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1465	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1468	b0 03		bcs $146d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.146a	4c f6 1b	jmp $1bf6			jmp 	MInt32Multiply 							; else do it as integer.
.146d					_IsFPOperation:
.146d	8a		txa				txa 								; call the relevant fp routine
.146e	a2 0a		ldx #$0a		ldx	#10
.1470	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.1473	aa		tax				tax
.1474	60		rts				rts
.1475					DivHandler:
.1475	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1478	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.147b	b0 03		bcs $1480			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.147d	4c d0 1a	jmp $1ad0			jmp 	MInt32SDivide 							; else do it as integer.
.1480					_IsFPOperation:
.1480	8a		txa				txa 								; call the relevant fp routine
.1481	a2 06		ldx #$06		ldx	#6
.1483	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.1486	aa		tax				tax
.1487	60		rts				rts
.1488					ModHandler:
.1488	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.148b	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.148e	b0 03		bcs $1493			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1490	4c 4e 1b	jmp $1b4e			jmp 	MInt32Modulus 							; else do it as integer.
.1493					_IsFPOperation:
.1493	8a		txa				txa 								; call the relevant fp routine
.1494	a2 08		ldx #$08		ldx	#8
.1496	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.1499	aa		tax				tax
.149a	60		rts				rts
.149b					XorHandler:
.149b	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.149e	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14a1	b0 03		bcs $14a6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14a3	4c 82 1a	jmp $1a82			jmp 	MInt32Xor 							; else do it as integer.
.14a6					_IsFPOperation:
.14a6	8a		txa				txa 								; call the relevant fp routine
.14a7	a2 08		ldx #$08		ldx	#8
.14a9	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.14ac	aa		tax				tax
.14ad	60		rts				rts
.14ae					OrHandler:
.14ae	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14b1	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14b4	b0 03		bcs $14b9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14b6	4c 69 1a	jmp $1a69			jmp 	MInt32Or 							; else do it as integer.
.14b9					_IsFPOperation:
.14b9	8a		txa				txa 								; call the relevant fp routine
.14ba	a2 08		ldx #$08		ldx	#8
.14bc	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.14bf	aa		tax				tax
.14c0	60		rts				rts
.14c1					AndHandler:
.14c1	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14c4	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14c7	b0 03		bcs $14cc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14c9	4c 50 1a	jmp $1a50			jmp 	MInt32And 							; else do it as integer.
.14cc					_IsFPOperation:
.14cc	8a		txa				txa 								; call the relevant fp routine
.14cd	a2 08		ldx #$08		ldx	#8
.14cf	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.14d2	aa		tax				tax
.14d3	60		rts				rts
.14d4					ShlHandler:
.14d4	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14d7	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14da	b0 03		bcs $14df			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14dc	4c 55 15	jmp $1555			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.14df					_IsFPOperation:
.14df	8a		txa				txa 								; call the relevant fp routine
.14e0	a2 08		ldx #$08		ldx	#8
.14e2	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.14e5	aa		tax				tax
.14e6	60		rts				rts
.14e7					ShrHandler:
.14e7	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14ea	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.14ed	b0 03		bcs $14f2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14ef	4c 58 15	jmp $1558			jmp 	MInt32ShiftRightX 							; else do it as integer.
.14f2					_IsFPOperation:
.14f2	8a		txa				txa 								; call the relevant fp routine
.14f3	a2 08		ldx #$08		ldx	#8
.14f5	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.14f8	aa		tax				tax
.14f9	60		rts				rts
.14fa					WordRefHandler:
.14fa	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.14fd	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1500	b0 03		bcs $1505			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1502	4c 47 15	jmp $1547			jmp 	MInt32WordIndirect 							; else do it as integer.
.1505					_IsFPOperation:
.1505	8a		txa				txa 								; call the relevant fp routine
.1506	a2 08		ldx #$08		ldx	#8
.1508	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.150b	aa		tax				tax
.150c	60		rts				rts
.150d					ByteRefHandler:
.150d	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1510	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1513	b0 03		bcs $1518			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1515	4c 4b 15	jmp $154b			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1518					_IsFPOperation:
.1518	8a		txa				txa 								; call the relevant fp routine
.1519	a2 08		ldx #$08		ldx	#8
.151b	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.151e	aa		tax				tax
.151f	60		rts				rts
.1520					PowerHandler:
.1520	20 fd 15	jsr $15fd			jsr 	DereferenceTwo
.1523	20 00 14	jsr $1400			jsr 	BinaryProcess 				; check to see if either is float
.1526	b0 03		bcs $152b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1528	4c 33 15	jmp $1533			jmp 	PowerInteger 							; else do it as integer.
.152b					_IsFPOperation:
.152b	8a		txa				txa 								; call the relevant fp routine
.152c	a2 16		ldx #$16		ldx	#22
.152e	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.1531	aa		tax				tax
.1532	60		rts				rts
.1533					PowerInteger:
.1533	20 1a 14	jsr $141a			jsr 	BPMakeBothFloat				; make them float.
.1536	8a		txa				txa
.1537	a2 16		ldx #$16		ldx	#22
.1539	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.153c	a2 12		ldx #$12		ldx	#18
.153e	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.1541	aa		tax				tax
.1542	a9 00		lda #$00			lda 	#0 							; make type integer
.1544	95 40		sta $40,x			sta 	esType,x
.1546	60		rts				rts
.1547					Mint32WordIndirect:
.1547	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1549	d0 02		bne $154d			bne 	Min32Indirect
.154b					Mint32ByteIndirect:
.154b	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.154d					Min32Indirect:
.154d	48		pha				pha 								; save the indirection
.154e	20 c2 1b	jsr $1bc2			jsr 	MInt32Add 					; add a!b a?b
.1551	68		pla				pla 								; and set the type to reference.
.1552	95 40		sta $40,x			sta 	esType,x
.1554	60		rts				rts
.1555					Mint32ShiftLeftX:
.1555	18		clc				clc
.1556	90 01		bcc $1559			bcc 	Mint32Shift
.1558					Mint32ShiftRightX:
.1558	38		sec				sec
.1559					Mint32Shift:
.1559	08		php				php 								; save carry flag on stack.
.155a	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.155c	15 59		ora $59,x			ora 	esInt2+1,x
.155e	15 61		ora $61,x			ora 	esInt3+1,x
.1560	d0 1e		bne $1580			bne 	_MShiftZero
.1562	b5 49		lda $49,x			lda 	esInt0+1,x
.1564	c9 20		cmp #$20			cmp 	#32
.1566	b0 18		bcs $1580			bcs 	_MShiftZero
.1568					_MShiftLoop:
.1568	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.156a	f0 12		beq $157e			beq 	_MShiftExit
.156c	d6 49		dec $49,x			dec 	esInt0+1,x
.156e	28		plp				plp 								; restore and save carry
.156f	08		php				php
.1570	90 06		bcc $1578			bcc 	_MShiftLeft
.1572	20 f5 1c	jsr $1cf5			jsr 	Mint32ShiftRight
.1575	4c 68 15	jmp $1568			jmp 	_MShiftLoop
.1578					_MShiftLeft:
.1578	20 ec 1c	jsr $1cec			jsr 	Mint32ShiftLeft
.157b	4c 68 15	jmp $1568			jmp 	_MShiftLoop
.157e					_MShiftExit:
.157e	28		plp				plp	 								; throw saved carry and exit
.157f	60		rts				rts
.1580					_MShiftZero:
.1580	4c d7 1c	jmp $1cd7			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1583					PerformComparison:
.1583	20 fd 15	jsr $15fd			jsr 	DereferenceTwo 				; make both values.
.1586	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1588	35 41		and $41,x			and 	esType+1,x
.158a	0a		asl a				asl 	a
.158b	30 1d		bmi $15aa			bmi 	_PCIsString
.158d	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.158f	15 41		ora $41,x			ora 	esType+1,x
.1591	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1592	30 22		bmi $15b6			bmi 	_PCError
.1594	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1596	f0 0f		beq $15a7			beq 	_PCIsInteger 				; if not two integers
.1598	20 1a 14	jsr $141a			jsr 	BPMakeBothFloat 			; make both float
.159b	8a		txa				txa
.159c	a2 04		ldx #$04		ldx	#4
.159e	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.15a1	86 0a		stx $0a				stx 	tempShort 					; save result
.15a3	aa		tax				tax
.15a4	a5 0a		lda $0a				lda 	tempShort
.15a6	60		rts				rts
.15a7					_PCIsInteger:
.15a7	4c 9b 1a	jmp $1a9b			jmp 	MInt32Compare
.15aa					_PCIsString:
.15aa	8a		txa				txa 								; A has SP
.15ab	a2 04		ldx #$04		ldx	#4
.15ad	20 3d 20	jsr $203d		jsr	stringHandler
.15b0	86 0a		stx $0a				stx 	tempShort 					; save result
.15b2	aa		tax				tax 								; put SP back in X and get result.
.15b3	a5 0a		lda $0a				lda 	tempShort
.15b5	60		rts				rts
.15b6					_PCError:
.15b6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.15b8	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.15bb					CompareEquals:
.15bb	20 83 15	jsr $1583			jsr 	PerformComparison
.15be	c9 00		cmp #$00			cmp 	#$00
.15c0	f0 35		beq $15f7			beq  	CompareTrue
.15c2	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15c5					CompareLess:
.15c5	20 83 15	jsr $1583			jsr 	PerformComparison
.15c8	c9 ff		cmp #$ff			cmp 	#$FF
.15ca	f0 2b		beq $15f7			beq  	CompareTrue
.15cc	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15cf					CompareGreater:
.15cf	20 83 15	jsr $1583			jsr 	PerformComparison
.15d2	c9 01		cmp #$01			cmp 	#$01
.15d4	f0 21		beq $15f7			beq  	CompareTrue
.15d6	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15d9					CompareNotEquals:
.15d9	20 83 15	jsr $1583			jsr 	PerformComparison
.15dc	c9 00		cmp #$00			cmp 	#$00
.15de	d0 17		bne $15f7			bne  	CompareTrue
.15e0	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15e3					CompareGreaterEq:
.15e3	20 83 15	jsr $1583			jsr 	PerformComparison
.15e6	c9 ff		cmp #$ff			cmp 	#$FF
.15e8	d0 0d		bne $15f7			bne  	CompareTrue
.15ea	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15ed					CompareLessEq:
.15ed	20 83 15	jsr $1583			jsr 	PerformComparison
.15f0	c9 01		cmp #$01			cmp 	#$01
.15f2	d0 03		bne $15f7			bne  	CompareTrue
.15f4	4c fa 15	jmp $15fa			jmp 	CompareFalse
.15f7					CompareTrue:
.15f7	4c d3 1c	jmp $1cd3			jmp 	MInt32True
.15fa					CompareFalse:
.15fa	4c d7 1c	jmp $1cd7			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.15fd					DereferenceTwo:
.15fd	e8		inx				inx
.15fe	20 02 16	jsr $1602			jsr 	DereferenceOne
.1601	ca		dex				dex
.1602					DereferenceOne:
.1602	b5 40		lda $40,x			lda 	esType,x
.1604	10 3d		bpl $1643			bpl 	_DRNotReference 			; is it a reference ?
.1606	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1607	b0 3b		bcs $1644			bcs 	_DRFloatDeReference
.1609	98		tya				tya
.160a	48		pha				pha
.160b	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.160d	85 04		sta $04				sta 	temp0
.160f	b5 50		lda $50,x			lda 	esInt1,x
.1611	85 05		sta $05				sta 	temp0+1
.1613	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1615	95 50		sta $50,x			sta 	esInt1,x
.1617	95 58		sta $58,x			sta 	esInt2,x
.1619	95 60		sta $60,x			sta 	esInt3,x
.161b	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.161d	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.161f	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1620	30 0d		bmi $162f			bmi 	_DeRefString 				; string, 2 bytes only
.1622	d0 11		bne $1635			bne 	_DeRefByte 					; byte 1 byte only
.1624					_DeRefLong:
.1624	a0 03		ldy #$03			ldy 	#3
.1626	b1 04		lda ($04),y			lda 	(temp0),y
.1628	95 60		sta $60,x			sta 	esInt3,x
.162a	88		dey				dey
.162b	b1 04		lda ($04),y			lda 	(temp0),y
.162d	95 58		sta $58,x			sta 	esInt2,x
.162f					_DeRefString:
.162f	a0 01		ldy #$01			ldy 	#1
.1631	b1 04		lda ($04),y			lda 	(temp0),y
.1633	95 50		sta $50,x			sta 	esInt1,x
.1635					_DeRefByte:
.1635	a0 00		ldy #$00			ldy 	#0
.1637	b1 04		lda ($04),y			lda 	(temp0),y
.1639	95 48		sta $48,x			sta 	esInt0,x
.163b	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.163d	29 40		and #$40			and 	#$40
.163f	95 40		sta $40,x			sta 	esType,x
.1641	68		pla				pla
.1642	a8		tay				tay
.1643					_DRNotReference
.1643	60		rts				rts
.1644					_DRFloatDereference:
.1644	8a		txa				txa
.1645							floatingpoint_deref
.1645	aa		tax				tax
.1646	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1648	95 40		sta $40,x			sta 	esType,x
.164a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.164b					EvaluateLevel:
.164b	48		pha				pha 								; save precedence level.
.164c	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.164e	95 48		sta $48,x			sta 	esInt0,x
.1650	95 50		sta $50,x			sta 	esInt1,x
.1652	95 58		sta $58,x			sta 	esInt2,x
.1654	95 60		sta $60,x			sta 	esInt3,x
.1656	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1658	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.165a	30 21		bmi $167d			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.165c	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.165d	30 0a		bmi $1669			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.165f	8a		txa				txa 								; stack level in X
.1660	a2 00		ldx #$00		ldx	#0
.1662	20 a9 21	jsr $21a9		jsr	variableHandler
.1665	aa		tax				tax
.1666	4c a6 16	jmp $16a6			jmp		_ELHasTerm
.1669					_ELIsConstant:
.1669	4a		lsr a				lsr 	a 							; get the value back
.166a	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.166c	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.166e					_ELCheckNext:
.166e	c8		iny				iny 								; look at next
.166f	b1 02		lda ($02),y			lda 	(codePtr),y
.1671	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1673	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1675	b0 2f		bcs $16a6			bcs 	_ELHasTerm 					; done getting the constant.
.1677	20 b3 17	jsr $17b3			jsr 	ELShiftByteIn 				; shift byte into position.
.167a	4c 6e 16	jmp $166e			jmp 	_ELCheckNext
.167d					_ELIsToken:
.167d	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.167f	f0 0f		beq $1690			beq 	_ELIsString
.1681	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1683	d0 5f		bne $16e4			bne 	_ELCheckUnary
.1685	8a		txa				txa 								; put X into A
.1686	c8		iny				iny 								; skip over the float marker
.1687	a2 18		ldx #$18		ldx	#24
.1689	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.168c	aa		tax				tax 								; restore X
.168d	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.1690					_ELIsString:
.1690	98		tya				tya 								; address of string is codePtr+y+1
.1691	38		sec				sec
.1692	65 02		adc $02				adc 	codePtr
.1694	95 48		sta $48,x			sta 	esInt0,x
.1696	a5 03		lda $03				lda 	codePtr+1
.1698	69 00		adc #$00			adc 	#0
.169a	95 50		sta $50,x			sta 	esInt1,x
.169c	a9 40		lda #$40			lda 	#$40 						; set type to string value
.169e	95 40		sta $40,x			sta 	esType,x
.16a0	c8		iny				iny 								; skip over string.
.16a1	98		tya				tya
.16a2	38		sec				sec									; +1 for the length itself.
.16a3	71 02		adc ($02),y			adc 	(codePtr),y
.16a5	a8		tay				tay 								; and fall through to term loop code.
.16a6					_ELHasTerm:
.16a6	b1 02		lda ($02),y			lda 	(codePtr),y
.16a8	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.16aa	90 04		bcc $16b0			bcc 	_ELPopExit
.16ac	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.16ae	90 02		bcc $16b2			bcc 	_ELHasBinaryTerm
.16b0					_ELPopExit:
.16b0	68		pla				pla
.16b1					_ELExit:
.16b1	60		rts				rts
.16b2					_ELHasBinaryTerm:
.16b2	84 0a		sty $0a				sty 	tempShort 					; save position
.16b4	a8		tay				tay 								; use token as an index and get the precedence.
.16b5	b9 5b 17	lda $175b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.16b8	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16ba	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.16bc	68		pla				pla 								; restore current level.
.16bd	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.16bf	b0 f0		bcs $16b1			bcs 	_ELExit
.16c1	48		pha				pha 								; save current level back on the stack.
.16c2	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.16c4	48		pha				pha
.16c5	c8		iny				iny
.16c6	e8		inx				inx 								; calculate the RHS at the operator precedence.
.16c7	a5 0a		lda $0a				lda 	tempShort
.16c9	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.16cc	ca		dex				dex
.16cd	68		pla				pla 								; get the operator back out.
.16ce					_ELExecuteA:
.16ce	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.16d0	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.16d1	aa		tax				tax
.16d2	bd 98 12	lda $1298,x			lda 	Group0Vectors,x
.16d5	85 04		sta $04				sta 	temp0
.16d7	bd 99 12	lda $1299,x			lda 	Group0Vectors+1,x
.16da	85 05		sta $05				sta 	temp0+1
.16dc	a6 0a		ldx $0a				ldx 	tempShort
.16de	20 27 17	jsr $1727			jsr 	_ELCallTemp0
.16e1	4c a6 16	jmp $16a6			jmp 	_ELHasTerm 					; and loop back round.
.16e4					_ELCheckUnary:
.16e4	c8		iny				iny 								; skip over token.
.16e5	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.16e7	f0 15		beq $16fe			beq 	_ELMinus
.16e9	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.16eb	f0 28		beq $1715			beq 	_ELIndirect
.16ed	c9 98		cmp #$98			cmp 	#TKW_QMARK
.16ef	f0 24		beq $1715			beq 	_ELIndirect
.16f1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.16f3	90 04		bcc $16f9			bcc 	_ELUSyntax
.16f5	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.16f7	90 d5		bcc $16ce			bcc 	_ELExecuteA 				; if so do that token.
.16f9					_ELUSyntax:
.16f9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.16fb	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.16fe					_ELMinus:
.16fe	20 3c 17	jsr $173c			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1701	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1703	f0 0a		beq $170f			beq 	_ELMinusInteger
.1705	8a		txa				txa
.1706	a2 0c		ldx #$0c		ldx	#12
.1708	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.170b	aa		tax				tax
.170c	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.170f					_ELMinusInteger:
.170f	20 91 1c	jsr $1c91			jsr 	MInt32Negate 				; do int negate
.1712	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.1715					_ELIndirect:
.1715	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1716	20 45 17	jsr $1745			jsr 	EvaluateIntegerTerm 		; integer address
.1719	68		pla				pla
.171a	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.171c	f0 02		beq $1720			beq 	_ELHaveModifier
.171e	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1720					_ELHaveModifier:
.1720	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1722	95 40		sta $40,x			sta 	esType,x
.1724	4c a6 16	jmp $16a6			jmp 	_ELHasTerm
.1727					_ELCallTemp0:
.1727	6c 04 00	jmp ($0004)			jmp 	(temp0)
.172a					UnaryParenthesis:
.172a	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.172c	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.172f	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen 			; check for )
.1732	60		rts				rts
.1733					EvaluateTerm:
.1733	a9 0f		lda #$0f			lda 	#15
.1735	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.1738	20 02 16	jsr $1602			jsr 	DereferenceOne
.173b	60		rts				rts
.173c					EvaluateNumericTerm:
.173c	20 33 17	jsr $1733			jsr 	EvaluateTerm
.173f	b5 40		lda $40,x			lda 	esType,x
.1741	0a		asl a				asl 	a 							; see if it's a string.
.1742	30 09		bmi $174d			bmi 	ENTType
.1744	60		rts				rts
.1745					EvaluateIntegerTerm:
.1745	20 33 17	jsr $1733			jsr 	EvaluateTerm
.1748	b5 40		lda $40,x			lda 	esType,x
.174a	d0 01		bne $174d			bne 	ENTType
.174c	60		rts				rts
.174d					ENTType:
.174d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.174f	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1752					EvaluateRoot:
.1752	a2 00		ldx #$00			ldx 	#0
.1754					Evaluate:
.1754	a9 00		lda #$00			lda 	#0
.1756	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.1759	20 02 16	jsr $1602			jsr 	DereferenceOne
.175c	60		rts				rts
.175d					EvaluateNumeric:
.175d	20 54 17	jsr $1754			jsr 	Evaluate
.1760	b5 40		lda $40,x			lda 	esType,x
.1762	0a		asl a				asl 	a 							; see if it's a string.
.1763	30 e8		bmi $174d			bmi 	ENTType
.1765	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1766	4a		lsr a				lsr 	a
.1767	60		rts				rts
.1768					EvaluateString:
.1768	20 54 17	jsr $1754			jsr 	Evaluate
.176b	b5 40		lda $40,x			lda 	esType,x
.176d	0a		asl a				asl 	a 							; see if it's a string.
.176e	10 dd		bpl $174d			bpl 	ENTType
.1770	60		rts				rts
.1771					EvaluateRootInteger:
.1771	a2 00		ldx #$00			ldx 	#0
.1773					EvaluateInteger:
.1773	20 54 17	jsr $1754			jsr 	Evaluate
.1776	b5 40		lda $40,x			lda 	esType,x
.1778	d0 d3		bne $174d			bne 	ENTType
.177a	60		rts				rts
.177b					EvaluateSmallInteger:
.177b	20 73 17	jsr $1773			jsr 	EvaluateInteger
.177e	b5 50		lda $50,x			lda 	esInt1,x
.1780	15 58		ora $58,x			ora 	esInt2,x
.1782	15 60		ora $60,x			ora 	esInt3,x
.1784	d0 03		bne $1789			bne 	_ESIValue
.1786	b5 48		lda $48,x			lda 	esInt0,x
.1788	60		rts				rts
.1789					_ESIValue:
.1789	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.178b	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.178e					LinkEvaluate:
.178e	aa		tax				tax
.178f	20 54 17	jsr $1754			jsr 	Evaluate
.1792	8a		txa				txa
.1793	60		rts				rts
.1794					LinkEvaluateInteger:
.1794	aa		tax				tax
.1795	20 73 17	jsr $1773			jsr 	EvaluateInteger
.1798	8a		txa				txa
.1799	60		rts				rts
.179a					LinkEvaluateSmallInt:
.179a	aa		tax				tax
.179b	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger
.179e	8a		txa				txa
.179f	60		rts				rts
.17a0					EvaluateReference:
.17a0	ad f2 17	lda $17f2			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.17a3	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.17a4	e9 01		sbc #$01			sbc 	#1
.17a6	20 4b 16	jsr $164b			jsr 	EvaluateLevel
.17a9	b5 40		lda $40,x			lda 	esType,x
.17ab	10 01		bpl $17ae			bpl 	_ERFail
.17ad	60		rts				rts
.17ae					_ERFail:
.17ae	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.17b0	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.17b3					ELShiftByteIn:
.17b3	48		pha				pha 								; save bits to shift in.
.17b4	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.17b6	48		pha				pha
.17b7	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.17b9	95 60		sta $60,x			sta 	esInt3,x
.17bb	b5 50		lda $50,x			lda 	esInt1,x
.17bd	95 58		sta $58,x			sta 	esInt2,x
.17bf	b5 48		lda $48,x			lda 	esInt0,x
.17c1	95 50		sta $50,x			sta 	esInt1,x
.17c3	a9 00		lda #$00			lda 	#0
.17c5	95 48		sta $48,x			sta 	esInt0,x
.17c7	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.17c8	29 03		and #$03			and 	#3 							; only want lower 2 bits
.17ca	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.17cc					_ELShiftLoop:
.17cc	4a		lsr a				lsr 	a
.17cd	76 60		ror $60,x			ror 	esInt3,x
.17cf	76 58		ror $58,x			ror 	esInt2,x
.17d1	76 50		ror $50,x			ror 	esInt1,x
.17d3	76 48		ror $48,x			ror 	esInt0,x
.17d5	c9 01		cmp #$01			cmp 	#1
.17d7	d0 f3		bne $17cc			bne 	_ELShiftLoop
.17d9	68		pla				pla 								; get original 6 bit value and OR in.
.17da	29 3f		and #$3f			and 	#$3F
.17dc	15 48		ora $48,x			ora 	esInt0,x
.17de	95 48		sta $48,x			sta 	esInt0,x
.17e0	60		rts				rts
.17e1					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>17e1	01					.byte	$01			; $86 and
>17e2	01					.byte	$01			; $87 or
>17e3	01					.byte	$01			; $88 xor
>17e4	02					.byte	$02			; $89 >=
>17e5	02					.byte	$02			; $8a <=
>17e6	02					.byte	$02			; $8b >
>17e7	02					.byte	$02			; $8c <
>17e8	02					.byte	$02			; $8d =
>17e9	02					.byte	$02			; $8e <>
>17ea	03					.byte	$03			; $8f +
>17eb	03					.byte	$03			; $90 -
>17ec	04					.byte	$04			; $91 >>
>17ed	04					.byte	$04			; $92 <<
>17ee	04					.byte	$04			; $93 *
>17ef	04					.byte	$04			; $94 /
>17f0	04					.byte	$04			; $95 mod
>17f1	05					.byte	$05			; $96 ^
>17f2	06					.byte	$06			; $97 !
>17f3	06					.byte	$06			; $98 ?
>17f4	82					.byte	$82			; $99 repeat
>17f5	82					.byte	$82			; $9a while
>17f6	82					.byte	$82			; $9b for
>17f7	82					.byte	$82			; $9c if
>17f8	82					.byte	$82			; $9d defproc
>17f9	80					.byte	$80			; $9e until
>17fa	80					.byte	$80			; $9f wend
>17fb	80					.byte	$80			; $a0 next
>17fc	80					.byte	$80			; $a1 then
>17fd	80					.byte	$80			; $a2 endif
>17fe	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.17ff					UnaryLen:
.17ff	20 0d 18	jsr $180d			jsr 	ULStart
.1802					ULFinish:
.1802	b1 04		lda ($04),y			lda 	(temp0),y
.1804	a4 0a		ldy $0a				ldy 	tempShort
.1806	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit
.1809	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.180c	60		rts				rts
.180d	20 68 17	jsr $1768	ULStart:jsr 	EvaluateString
.1810	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1812	85 04		sta $04				sta 	temp0
.1814	b5 50		lda $50,x			lda 	esInt1,x
.1816	85 05		sta $05				sta 	temp0+1
.1818	84 0a		sty $0a				sty 	tempShort 					; get length
.181a	a0 00		ldy #$00			ldy 	#0
.181c	60		rts				rts
.181d					UnaryAsc:
.181d	20 0d 18	jsr $180d			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1820	b1 04		lda ($04),y			lda 	(temp0),y
.1822	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1823	c9 00		cmp #$00			cmp 	#0
.1825	d0 db		bne $1802			bne 	ULFinish
.1827	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1829	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.182c					UnaryAbs:
.182c	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.182f	b0 07		bcs $1838			bcs 	_UAFloat
.1831	20 8c 1c	jsr $1c8c			jsr 	MInt32Absolute
.1834	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.1837	60		rts				rts
.1838					_UAFloat:
.1838	8a		txa				txa
.1839	a2 00		ldx #$00		ldx	#0
.183b	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.183e	aa		tax				tax
.183f	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.1842	60		rts				rts
.1843					UnarySgn:
.1843	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.1846	b0 07		bcs $184f			bcs 	_USFloat
.1848	20 c4 1c	jsr $1cc4			jsr 	MInt32Sign
.184b	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.184e	60		rts				rts
.184f					_USFloat:
.184f	8a		txa				txa
.1850	a2 0e		ldx #$0e		ldx	#14
.1852	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.1855	aa		tax				tax
.1856	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.1859	60		rts				rts
.185a					UnaryPeek:
.185a	20 86 18	jsr $1886			jsr 	PDLCode
.185d	4c 7a 18	jmp $187a			jmp 	PDLByte0
.1860					UnaryDeek:
.1860	20 86 18	jsr $1886			jsr 	PDLCode
.1863	4c 74 18	jmp $1874			jmp 	PDLByte1
.1866					UnaryLeek:
.1866	20 86 18	jsr $1886			jsr 	PDLCode
.1869	a0 03		ldy #$03			ldy 	#3
.186b	b1 04		lda ($04),y			lda 	(temp0),y
.186d	95 60		sta $60,x			sta 	esInt3,x
.186f	88		dey				dey
.1870	b1 04		lda ($04),y			lda 	(temp0),y
.1872	95 58		sta $58,x			sta 	esInt2,x
.1874					PDLByte1:
.1874	a0 01		ldy #$01			ldy 	#1
.1876	b1 04		lda ($04),y			lda 	(temp0),y
.1878	95 50		sta $50,x			sta 	esInt1,x
.187a					PDLByte0:
.187a	a0 00		ldy #$00			ldy 	#0
.187c	b1 04		lda ($04),y			lda 	(temp0),y
.187e	95 48		sta $48,x			sta 	esInt0,x
.1880	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1882	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen 			; check right and return
.1885	60		rts				rts
.1886					PDLCode:
.1886	20 73 17	jsr $1773			jsr 	EvaluateInteger
.1889	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.188b	85 04		sta $04				sta 	temp0
.188d	b5 50		lda $50,x			lda 	esInt1,x
.188f	85 05		sta $05				sta 	temp0+1
.1891	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1893	95 50		sta $50,x			sta 	esInt1,x
.1895	95 58		sta $58,x			sta 	esInt2,x
.1897	95 60		sta $60,x			sta 	esInt3,x
.1899	84 0a		sty $0a				sty 	tempShort 					; save Y
.189b	60		rts				rts
.189c					Unary_Random:
.189c	20 07 1d	jsr $1d07			jsr 	MInt32Random 				; generate random number.
.189f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.18a1	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.18a3	f0 08		beq $18ad			beq 	_URExit
.18a5	e8		inx				inx 								; load range 0..r-1 into +1
.18a6	20 73 17	jsr $1773			jsr 	EvaluateInteger
.18a9	ca		dex				dex
.18aa	20 4e 1b	jsr $1b4e			jsr 	MInt32Modulus 				; calculate random % modulus
.18ad					_URExit:
.18ad	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen 			; check right and return
.18b0	60		rts				rts
.18b1					Unary_Min:
.18b1	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.18b3	d0 02		bne $18b7			bne 	UnaryMBody
.18b5					Unary_Max:
.18b5	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.18b7					UnaryMBody:
.18b7	48		pha				pha 								; save comparator on stack.
.18b8	20 54 17	jsr $1754			jsr 	Evaluate 					; get the first thing to check
.18bb					_UnaryMLoop:
.18bb	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.18bd	c8		iny				iny
.18be	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.18c0	f0 09		beq $18cb			beq 	_UnaryMExit
.18c2	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.18c4	f0 07		beq $18cd			beq 	_UnaryMCompare
.18c6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18c8	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.18cb					_UnaryMExit:
.18cb	68		pla				pla 								; throw comparator and return.
.18cc	60		rts				rts
.18cd					_UnaryMCompare:
.18cd	e8		inx				inx 								; get the 2nd thing to evaluate
.18ce	20 54 17	jsr $1754			jsr 	Evaluate
.18d1	ca		dex				dex
.18d2	20 83 15	jsr $1583			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.18d5	85 0a		sta $0a				sta 	tempShort 					; save result
.18d7	68		pla				pla 								; get what we need
.18d8	48		pha				pha
.18d9	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.18db	d0 de		bne $18bb			bne 	_UnaryMLoop 				; no, try another value.
.18dd	20 d7 1c	jsr $1cd7			jsr 	MInt32False 				; promote 2nd to 1st.
.18e0	20 c2 1b	jsr $1bc2			jsr 	MInt32Add
.18e3	4c bb 18	jmp $18bb			jmp 	_UnaryMLoop
.18e6					Unary_Page:
.18e6	20 d7 1c	jsr $1cd7			jsr 	MInt32False 				; zero
.18e9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.18ec	95 48		sta $48,x			sta 	esInt0,x
.18ee	ad c9 0a	lda $0ac9			lda 	basePage+1
.18f1	95 50		sta $50,x			sta 	esInt1,x
.18f3	60		rts				rts
.18f4					UnaryReference:
.18f4	a9 0f		lda #$0f			lda 	#15
.18f6	20 4b 16	jsr $164b			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.18f9	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.18fb	10 05		bpl $1902			bpl 	UType
.18fd	a9 00		lda #$00			lda 	#0 							; make it an integer
.18ff	95 40		sta $40,x			sta 	esType,x
.1901	60		rts				rts
.1902					UType:
.1902	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1904	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1907					UnaryHexMarker:
.1907	4c 45 17	jmp $1745			jmp 	EvaluateIntegerTerm
.190a					UnaryComplement:
.190a	20 45 17	jsr $1745			jsr 	EvaluateIntegerTerm
.190d	20 ab 1c	jsr $1cab			jsr 	MInt32Not
.1910	60		rts				rts
.1911					UnaryIntToFloat:
.1911	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.1914	b5 40		lda $40,x			lda 	esType,x
.1916	d0 0b		bne $1923			bne 	_UIFExit
.1918	8a		txa				txa
.1919	a2 1a		ldx #$1a		ldx	#26
.191b	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.191e	aa		tax				tax
.191f	a9 01		lda #$01			lda 	#1
.1921	95 40		sta $40,x			sta 	esType,x
.1923					_UIFExit:
.1923	60		rts				rts
.1924					UnaryFloatToInt:
.1924	20 5d 17	jsr $175d			jsr 	EvaluateNumeric
.1927	b5 40		lda $40,x			lda 	esType,x
.1929	f0 07		beq $1932			beq 	_UFIExit
.192b	8a		txa				txa
.192c	a2 12		ldx #$12		ldx	#18
.192e	20 0c 1e	jsr $1e0c		jsr	floatingpointHandler
.1931	aa		tax				tax
.1932					_UFIExit:
.1932	60		rts				rts
.1933					UnaryAlloc:
.1933	e8		inx				inx 								; evaluate memory required
.1934	20 73 17	jsr $1773			jsr 	EvaluateInteger
.1937	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.193a	ca		dex				dex
.193b	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.193d	15 61		ora $61,x			ora 	esInt3+1,x
.193f	d0 19		bne $195a			bne 	_UABadValue
.1941	20 d7 1c	jsr $1cd7			jsr 	MInt32False					; zero return.
.1944	a5 0e		lda $0e				lda 	lowMemory+1 				; copy low memory in
.1946	95 50		sta $50,x			sta 	esInt1,x
.1948	a5 0d		lda $0d				lda 	lowMemory
.194a	95 48		sta $48,x			sta 	esInt0,x
.194c	18		clc				clc 								; add alloc required.
.194d	75 49		adc $49,x			adc 	esInt0+1,x
.194f	85 0d		sta $0d				sta 	lowMemory
.1951	a5 0e		lda $0e				lda 	lowMemory+1
.1953	75 51		adc $51,x			adc 	esInt1+1,x
.1955	85 0e		sta $0e				sta 	lowMemory+1
.1957	b0 01		bcs $195a			bcs		_UABadValue 				; overflow definitely bad.
.1959	60		rts				rts
.195a					_UABadValue:
.195a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.195c	20 05 1e	jsr $1e05			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.195f					UnaryTimer:
.195f	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.1962	98		tya				tya
.1963	48		pha				pha
.1964	20 fe 1c	jsr $1cfe			jsr 	MInt32Zero 					; zero result
.1967	86 04		stx $04				stx 	temp0 						; returning in YA so can't use pshx
.1969	a2 08		ldx #$08		ldx	#8
.196b	20 f8 1d	jsr $1df8		jsr	deviceHandler
.196e	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1970	95 48		sta $48,x			sta 	esInt0,x
.1972	98		tya				tya
.1973	95 50		sta $50,x			sta 	esInt1,x
.1975	68		pla				pla
.1976	a8		tay				tay
.1977	60		rts				rts
.1978					UnaryInkey:
.1978	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.197b	86 04		stx $04				stx 	temp0
.197d	a2 02		ldx #$02		ldx	#2
.197f	20 f8 1d	jsr $1df8		jsr	deviceHandler
.1982	a6 04		ldx $04				ldx 	temp0
.1984	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit
.1987	60		rts				rts
.1988					UnaryGet:
.1988	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.198b	86 04		stx $04				stx 	temp0
.198d					_UGLoop:
.198d	a2 02		ldx #$02		ldx	#2
.198f	20 f8 1d	jsr $1df8		jsr	deviceHandler
.1992	c9 00		cmp #$00			cmp 	#0
.1994	f0 f7		beq $198d			beq 	_UGLoop
.1996	a6 04		ldx $04				ldx 	temp0
.1998	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit
.199b	60		rts				rts
.199c					UnarySys:
.199c	20 73 17	jsr $1773			jsr 	EvaluateInteger 				; get the address
.199f	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen
.19a2	20 23 11	jsr $1123			jsr 	TOSToTemp0 						; copy to temp0
.19a5	8a		txa				txa
.19a6	48		pha				pha
.19a7	98		tya				tya
.19a8	48		pha				pha
.19a9	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.19ac	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.19af	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.19b2	20 c1 19	jsr $19c1			jsr 	_CallTemp0
.19b5	85 0a		sta $0a				sta 	tempShort 						; restore YX
.19b7	68		pla				pla
.19b8	a8		tay				tay
.19b9	68		pla				pla
.19ba	aa		tax				tax
.19bb	a5 0a		lda $0a				lda 	tempShort
.19bd	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit 					; return result.
.19c0	60		rts				rts
.19c1					_CallTemp0:
.19c1	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.19c4					ExecChr:
.19c4	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger		; character number
.19c7	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen				; right bracket
.19ca	98		tya				tya
.19cb	48		pha				pha
.19cc	8a		txa				txa 								; A = stack
.19cd	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.19cf	a2 00		ldx #$00		ldx	#0
.19d1	20 3d 20	jsr $203d		jsr	stringHandler
.19d4	aa		tax				tax 								; X = stack
.19d5	68		pla				pla
.19d6	a8		tay				tay
.19d7	60		rts				rts
.19d8					ExecLeft:
.19d8	20 68 17	jsr $1768			jsr 	EvaluateString 				; string to stack,X
.19db	20 57 1d	jsr $1d57			jsr 	CheckComma
.19de	e8		inx				inx
.19df	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.19e1	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit
.19e4	e8		inx				inx
.19e5	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.19e8					ExecSubstring:
.19e8	ca		dex				dex 								; fix up X
.19e9	ca		dex				dex
.19ea	20 4a 1d	jsr $1d4a			jsr 	CheckRightParen 			; check closing right bracket.
.19ed	8a		txa				txa 								; do the substring and exit.
.19ee	a2 06		ldx #$06		ldx	#6
.19f0	20 3d 20	jsr $203d		jsr	stringHandler
.19f3	aa		tax				tax
.19f4	60		rts				rts
.19f5					ExecMid:
.19f5	20 68 17	jsr $1768			jsr 	EvaluateString 				; string to stack,X
.19f8	20 57 1d	jsr $1d57			jsr 	CheckComma
.19fb	e8		inx				inx
.19fc	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.19ff	c9 00		cmp #$00			cmp 	#0
.1a01	f0 15		beq $1a18			beq 	_EMValue
.1a03	e8		inx				inx
.1a04	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1a06	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit
.1a09	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1a0b	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1a0d	f0 d9		beq $19e8			beq 	ExecSubString
.1a0f	20 57 1d	jsr $1d57			jsr 	CheckComma
.1a12	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1a15	4c e8 19	jmp $19e8			jmp 	ExecSubString
.1a18					_EMValue:
.1a18	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a1a	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1a1d					ExecRight:
.1a1d	20 68 17	jsr $1768			jsr 	EvaluateString 				; string to stack,X
.1a20	20 57 1d	jsr $1d57			jsr 	CheckComma
.1a23	e8		inx				inx
.1a24	20 7b 17	jsr $177b			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1a27	ca		dex				dex
.1a28	98		tya				tya
.1a29	48		pha				pha
.1a2a	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1a2c	85 04		sta $04				sta 	temp0
.1a2e	b5 50		lda $50,x			lda 	esInt1,x
.1a30	85 05		sta $05				sta 	temp0+1
.1a32	a0 00		ldy #$00			ldy 	#0 							; point to length
.1a34	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1a36	18		clc				clc 								; add 1.
.1a37	69 01		adc #$01			adc 	#1
.1a39	38		sec				sec
.1a3a	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1a3c	f0 02		beq $1a40			beq		_ERMake1 					; if zero, make it 1.
.1a3e	b0 02		bcs $1a42			bcs		_EROkay
.1a40					_ERMake1:
.1a40	a9 01		lda #$01			lda 	#1 							; start position.
.1a42					_EROkay:
.1a42	e8		inx				inx 								; set start pos.
.1a43	95 48		sta $48,x			sta 	esInt0,x
.1a45	e8		inx				inx
.1a46	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1a48	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit
.1a4b	68		pla				pla
.1a4c	a8		tay				tay
.1a4d	4c e8 19	jmp $19e8			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1a50					MInt32And:
.1a50	b5 48		lda $48,x			lda 	esInt0,x
.1a52	35 49		and $49,x			and 	esInt0+1,x
.1a54	95 48		sta $48,x			sta 	esInt0,x
.1a56	b5 50		lda $50,x			lda 	esInt1,x
.1a58	35 51		and $51,x			and 	esInt1+1,x
.1a5a	95 50		sta $50,x			sta 	esInt1,x
.1a5c	b5 58		lda $58,x			lda 	esInt2,x
.1a5e	35 59		and $59,x			and 	esInt2+1,x
.1a60	95 58		sta $58,x			sta 	esInt2,x
.1a62	b5 60		lda $60,x			lda 	esInt3,x
.1a64	35 61		and $61,x			and 	esInt3+1,x
.1a66	95 60		sta $60,x			sta 	esInt3,x
.1a68	60		rts				rts
.1a69					MInt32Or:
.1a69	b5 48		lda $48,x			lda 	esInt0,x
.1a6b	15 49		ora $49,x			ora 	esInt0+1,x
.1a6d	95 48		sta $48,x			sta 	esInt0,x
.1a6f	b5 50		lda $50,x			lda 	esInt1,x
.1a71	15 51		ora $51,x			ora 	esInt1+1,x
.1a73	95 50		sta $50,x			sta 	esInt1,x
.1a75	b5 58		lda $58,x			lda 	esInt2,x
.1a77	15 59		ora $59,x			ora 	esInt2+1,x
.1a79	95 58		sta $58,x			sta 	esInt2,x
.1a7b	b5 60		lda $60,x			lda 	esInt3,x
.1a7d	15 61		ora $61,x			ora 	esInt3+1,x
.1a7f	95 60		sta $60,x			sta 	esInt3,x
.1a81	60		rts				rts
.1a82					MInt32Xor:
.1a82	b5 48		lda $48,x			lda 	esInt0,x
.1a84	55 49		eor $49,x			eor 	esInt0+1,x
.1a86	95 48		sta $48,x			sta 	esInt0,x
.1a88	b5 50		lda $50,x			lda 	esInt1,x
.1a8a	55 51		eor $51,x			eor 	esInt1+1,x
.1a8c	95 50		sta $50,x			sta 	esInt1,x
.1a8e	b5 58		lda $58,x			lda 	esInt2,x
.1a90	55 59		eor $59,x			eor 	esInt2+1,x
.1a92	95 58		sta $58,x			sta 	esInt2,x
.1a94	b5 60		lda $60,x			lda 	esInt3,x
.1a96	55 61		eor $61,x			eor 	esInt3+1,x
.1a98	95 60		sta $60,x			sta 	esInt3,x
.1a9a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1a9b					MInt32Compare:
.1a9b	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1a9d	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1a9f	d0 13		bne $1ab4			bne 	MInt32Compare2
.1aa1	b5 50		lda $50,x			lda 	esInt1,x
.1aa3	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1aa5	d0 0d		bne $1ab4			bne 	MInt32Compare2
.1aa7	b5 58		lda $58,x			lda 	esInt2,x
.1aa9	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1aab	d0 07		bne $1ab4			bne 	MInt32Compare2
.1aad	b5 60		lda $60,x			lda 	esInt3,x
.1aaf	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1ab1	d0 01		bne $1ab4			bne 	MInt32Compare2
.1ab3	60		rts				rts
.1ab4					MInt32Compare2:
.1ab4	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1ab6	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1ab8	b5 50		lda $50,x			lda		esInt1,x
.1aba	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1abc	b5 58		lda $58,x			lda		esInt2,x
.1abe	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1ac0	b5 60		lda $60,x			lda		esInt3,x
.1ac2	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1ac4	50 02		bvc $1ac8			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1ac6	49 80		eor #$80			eor 	#$80
.1ac8					_I32LNoOverflow
.1ac8	30 03		bmi $1acd			bmi 	MInt32CLess					; if -ve then return $FF
.1aca	a9 01		lda #$01			lda 	#$01						; else return $01
.1acc	60		rts				rts
.1acd					MInt32CLess:
.1acd	a9 ff		lda #$ff			lda 	#$FF
.1acf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1ad0					MInt32SDivide:
.1ad0	98		tya				tya  								; save Y, which is the count of negations
.1ad1	48		pha				pha
.1ad2	a0 00		ldy #$00			ldy 	#0 							; zero count
.1ad4	20 ec 1a	jsr $1aec			jsr 	_MInt32SRemSign 			; unsign TOS
.1ad7	e8		inx				inx 								; unsign TOS+1
.1ad8	20 ec 1a	jsr $1aec			jsr 	_MInt32SRemSign
.1adb	ca		dex				dex
.1adc	98		tya				tya 								; save sign count on stack
.1add	48		pha				pha
.1ade	20 f5 1a	jsr $1af5			jsr 	MInt32UDivide 				; unsigned division
.1ae1	68		pla				pla 								; get sign count back
.1ae2	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1ae4	f0 03		beq $1ae9			beq 	_I32SNoNeg
.1ae6	20 91 1c	jsr $1c91			jsr 	MInt32Negate
.1ae9					_I32SNoNeg:
.1ae9	68		pla				pla 								; restoe Y and exit
.1aea	a8		tay				tay
.1aeb	60		rts				rts
.1aec					_MInt32SRemSign:
.1aec	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1aee	10 04		bpl $1af4			bpl 	_MInt32SRSExit
.1af0	c8		iny				iny 								; increment the sign count
.1af1	20 91 1c	jsr $1c91			jsr 	MInt32Negate 				; negate the value.
.1af4					_MInt32SRSExit:
.1af4	60		rts				rts
.1af5					MInt32UDivide:
.1af5	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1af7	15 51		ora $51,x			ora 	esInt1+1,x
.1af9	15 52		ora $52,x			ora 	esInt1+2,x
.1afb	15 53		ora $53,x			ora 	esInt1+3,x
.1afd	f0 4a		beq $1b49			beq 	_MInt32DZero
.1aff	e8		inx				inx 								; clear A
.1b00	e8		inx				inx
.1b01	20 d7 1c	jsr $1cd7			jsr 	MInt32False
.1b04	ca		dex				dex
.1b05	ca		dex				dex
.1b06	98		tya				tya 								; save Y on the stack
.1b07	48		pha				pha
.1b08	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1b0a					_MInt32UDLoop:
.1b0a	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1b0c	36 50		rol $50,x			rol 	esInt1,x
.1b0e	36 58		rol $58,x			rol 	esInt2,x
.1b10	36 60		rol $60,x			rol 	esInt3,x
.1b12	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1b14	36 52		rol $52,x			rol 	esInt1+2,x
.1b16	36 5a		rol $5a,x			rol 	esInt2+2,x
.1b18	36 62		rol $62,x			rol 	esInt3+2,x
.1b1a	38		sec				sec 								; calculate A-M saving result on the stack
.1b1b	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1b1d	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1b1f	48		pha				pha
.1b20	b5 52		lda $52,x			lda 	esInt1+2,x
.1b22	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1b24	48		pha				pha
.1b25	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1b27	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1b29	48		pha				pha
.1b2a	b5 62		lda $62,x			lda 	esInt3+2,x
.1b2c	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1b2e	90 10		bcc $1b40			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1b30	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1b32	68		pla				pla
.1b33	95 5a		sta $5a,x			sta 	esInt2+2,x
.1b35	68		pla				pla
.1b36	95 52		sta $52,x			sta 	esInt1+2,x
.1b38	68		pla				pla
.1b39	95 4a		sta $4a,x			sta 	esInt0+2,x
.1b3b	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1b3d	4c 43 1b	jmp $1b43			jmp 	_MInt32Next 					; do the next iteration
.1b40					_MInt32NoSubtract:
.1b40	68		pla				pla
.1b41	68		pla				pla
.1b42	68		pla				pla
.1b43					_MInt32Next:
.1b43	88		dey				dey 								; do this 32 times.
.1b44	d0 c4		bne $1b0a			bne 	_MInt32UDLoop
.1b46	68		pla				pla 								; restore Y and exit
.1b47	a8		tay				tay
.1b48	60		rts				rts
.1b49					_MInt32DZero:
.1b49	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1b4b	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1b4e					MInt32Modulus:
.1b4e	20 f5 1a	jsr $1af5			jsr 	MInt32UDivide 				; do the division.
.1b51	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1b53	95 60		sta $60,x			sta 	esInt3,x
.1b55	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1b57	95 58		sta $58,x			sta 	esInt2,x
.1b59	b5 52		lda $52,x			lda 	esInt1+2,x
.1b5b	95 50		sta $50,x			sta 	esInt1,x
.1b5d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1b5f	95 48		sta $48,x			sta 	esInt0,x
.1b61	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.1b62					MInt32FromString:
.1b62	85 0a		sta $0a				sta 	tempShort 					; save base
.1b64	98		tya				tya
.1b65	48		pha				pha
.1b66	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1b68	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1b6a	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1b6c	d0 01		bne $1b6f			bne 	_I32FSNotNegative
.1b6e	c8		iny				iny 								; if so consume it.
.1b6f					_I32FSNotNegative:
.1b6f	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1b71	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1b73	f0 02		beq $1b77			beq 	_I32FSNN2
.1b75	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1b77					_I32FSNN2:
.1b77	48		pha				pha 								; save base + final sign on stack.
.1b78	20 d7 1c	jsr $1cd7			jsr 	MInt32False 					; zero the return value.
.1b7b					I32FSMainLoop:
.1b7b	68		pla				pla 								; get the base back into tempshort
.1b7c	48		pha				pha
.1b7d	29 7f		and #$7f			and 	#$7F
.1b7f	85 0a		sta $0a				sta 	tempShort
.1b81	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1b83	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1b85	90 02		bcc $1b89			bcc 	_I32FSNotLC
.1b87	e9 20		sbc #$20			sbc 	#32
.1b89					_I32FSNotLC:
.1b89	38		sec				sec 								; subtract 48 (ASCII "0")
.1b8a	e9 30		sbc #$30			sbc 	#"0"
.1b8c	90 26		bcc $1bb4			bcc 	_I32FSDone 					; nothing more to do.
.1b8e	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1b90	90 06		bcc $1b98			bcc 	_I32FSValidate
.1b92	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1b94	90 1e		bcc $1bb4			bcc 	_I32FSDone
.1b96	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1b98					_I32FSValidate:
.1b98	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1b9a	b0 18		bcs $1bb4			bcs 	_I32FSDone 					; sorry, too large for this base.
.1b9c	48		pha				pha 								; save the new digit value.
.1b9d	e8		inx				inx 								; put base into next slot.
.1b9e	a5 0a		lda $0a				lda 	tempShort
.1ba0	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit
.1ba3	ca		dex				dex
.1ba4	20 f6 1b	jsr $1bf6			jsr 	MInt32Multiply 				; multiply current by the base
.1ba7	e8		inx				inx
.1ba8	68		pla				pla  								; put additive into next slot
.1ba9	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit
.1bac	ca		dex				dex
.1bad	20 c2 1b	jsr $1bc2			jsr 	MInt32Add 					; and add it
.1bb0	c8		iny				iny 								; look at next character
.1bb1	4c 7b 1b	jmp $1b7b			jmp 	I32FSMainLoop 				; and go round again.
.1bb4					_I32FSDone:
.1bb4	68		pla				pla 								; get base/final sign back
.1bb5	10 04		bpl $1bbb			bpl 	_I32FSNN3
.1bb7	88		dey				dey 								; one fewer character to allow for the - prefix.
.1bb8	20 91 1c	jsr $1c91			jsr 	MInt32Negate 				; negate the result.
.1bbb					_I32FSNN3:
.1bbb	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1bbd	68		pla				pla
.1bbe	a8		tay				tay
.1bbf	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1bc1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1bc2					MInt32Add:
.1bc2	18		clc				clc
.1bc3	b5 48		lda $48,x			lda 	esInt0,x
.1bc5	75 49		adc $49,x			adc 	esInt0+1,x
.1bc7	95 48		sta $48,x			sta 	esInt0,x
.1bc9	b5 50		lda $50,x			lda 	esInt1,x
.1bcb	75 51		adc $51,x			adc 	esInt1+1,x
.1bcd	95 50		sta $50,x			sta 	esInt1,x
.1bcf	b5 58		lda $58,x			lda 	esInt2,x
.1bd1	75 59		adc $59,x			adc 	esInt2+1,x
.1bd3	95 58		sta $58,x			sta 	esInt2,x
.1bd5	b5 60		lda $60,x			lda 	esInt3,x
.1bd7	75 61		adc $61,x			adc 	esInt3+1,x
.1bd9	95 60		sta $60,x			sta 	esInt3,x
.1bdb	60		rts				rts
.1bdc					MInt32Sub:
.1bdc	38		sec				sec
.1bdd	b5 48		lda $48,x			lda 	esInt0,x
.1bdf	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1be1	95 48		sta $48,x			sta 	esInt0,x
.1be3	b5 50		lda $50,x			lda 	esInt1,x
.1be5	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1be7	95 50		sta $50,x			sta 	esInt1,x
.1be9	b5 58		lda $58,x			lda 	esInt2,x
.1beb	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1bed	95 58		sta $58,x			sta 	esInt2,x
.1bef	b5 60		lda $60,x			lda 	esInt3,x
.1bf1	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1bf3	95 60		sta $60,x			sta 	esInt3,x
.1bf5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1bf6					MInt32Multiply:
.1bf6	e8		inx				inx 								; copy 2nd -> 3rd
.1bf7	20 1c 1c	jsr $1c1c			jsr 	MInt32CopyUp
.1bfa	ca		dex				dex
.1bfb	20 1c 1c	jsr $1c1c			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1bfe	20 d7 1c	jsr $1cd7			jsr 	MInt32False 					; zero 1st.
.1c01					_I32Loop:
.1c01	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1c03	29 01		and #$01			and 	#1
.1c05	f0 03		beq $1c0a			beq 	_I32NoAdd 					; if set
.1c07	20 c2 1b	jsr $1bc2			jsr 	MInt32Add 					; add 2nd to 1st.
.1c0a					_I32NoAdd:
.1c0a	e8		inx				inx 								; shift 2nd left
.1c0b	20 ec 1c	jsr $1cec			jsr 	MInt32ShiftLeft
.1c0e	e8		inx				inx  								; shift 3rd right
.1c0f	20 f5 1c	jsr $1cf5			jsr 	MInt32ShiftRight
.1c12	20 fe 1c	jsr $1cfe			jsr 	MInt32Zero 					; check if zero.
.1c15	08		php				php 								; save status bits
.1c16	ca		dex				dex 	 							; point back to 1st
.1c17	ca		dex				dex
.1c18	28		plp				plp 								; get status bits
.1c19	d0 e6		bne $1c01			bne 	_I32Loop 					; if non-zero keep going.
.1c1b	60		rts				rts
.1c1c					MInt32CopyUp:
.1c1c	b5 48		lda $48,x			lda 	esInt0,x
.1c1e	95 49		sta $49,x			sta 	esInt0+1,x
.1c20	b5 50		lda $50,x			lda 	esInt1,x
.1c22	95 51		sta $51,x			sta 	esInt1+1,x
.1c24	b5 58		lda $58,x			lda 	esInt2,x
.1c26	95 59		sta $59,x			sta 	esInt2+1,x
.1c28	b5 60		lda $60,x			lda 	esInt3,x
.1c2a	95 61		sta $61,x			sta 	esInt3+1,x
.1c2c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af1					MCharCount:	.fill 	1						; count of converted characters
.1c2d					MInt32ToString:
.1c2d	48		pha				pha 								; save base
.1c2e	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1c30	a9 00		lda #$00			lda 	#0
.1c32	8d f1 0a	sta $0af1			sta 	MCharCount 					; clear character count to 0
.1c35	98		tya				tya
.1c36	48		pha				pha
.1c37	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1c39	10 10		bpl $1c4b			bpl 	_I32TSUnsigned
.1c3b	48		pha				pha 								; save base on stack.
.1c3c	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1c3e	10 08		bpl $1c48			bpl 	_I32TSNoFlip
.1c40	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1c42	20 7e 1c	jsr $1c7e			jsr 	MI32WriteCharacter
.1c45	20 91 1c	jsr $1c91			jsr 	MInt32Negate 				; negate the value.
.1c48					_I32TSNoFlip:
.1c48	68		pla				pla 								; get the base back
.1c49	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1c4b					_I32TSUnsigned:
.1c4b	20 59 1c	jsr $1c59			jsr 	MI32DivideWrite 			; recursive code to output string.
.1c4e	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1c50	ad f1 0a	lda $0af1			lda 	MCharCount
.1c53	91 04		sta ($04),y			sta 	(temp0),y
.1c55	68		pla				pla
.1c56	a8		tay				tay
.1c57	68		pla				pla
.1c58	60		rts				rts
.1c59					MI32DivideWrite:
.1c59	48		pha				pha 								; save the divisor/base
.1c5a	e8		inx				inx 								; write in the dividing position.
.1c5b	20 e6 1c	jsr $1ce6			jsr 	MInt32Set8Bit
.1c5e	ca		dex				dex
.1c5f	20 f5 1a	jsr $1af5			jsr 	MInt32UDivide 				; divide number by base.
.1c62	68		pla				pla 								; get the base into Y
.1c63	a8		tay				tay
.1c64	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1c66	48		pha				pha
.1c67	20 fe 1c	jsr $1cfe			jsr 	MInt32Zero 					; is the result zero ?
.1c6a	f0 04		beq $1c70			beq 	_I32NoRecurse 				; if so, don't recurse.
.1c6c	98		tya				tya 								; put base into A
.1c6d	20 59 1c	jsr $1c59			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1c70					_I32NoRecurse:
.1c70	68		pla				pla 								; get the remainder back
.1c71	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1c73	90 02		bcc $1c77			bcc 	_I32NotHex
.1c75	69 06		adc #$06			adc 	#7-1
.1c77					_I32NotHex:
.1c77	18		clc				clc 								; make it ASCII
.1c78	69 30		adc #$30			adc 	#48
.1c7a	20 7e 1c	jsr $1c7e			jsr 	MI32WriteCharacter 			; write the character out
.1c7d	60		rts				rts 								; and exit.
.1c7e					MI32WriteCharacter:
.1c7e	ee f1 0a	inc $0af1			inc 	MCharCount 					; bump count (space for leading count)
.1c81	ac f1 0a	ldy $0af1			ldy 	MCharCount 					; get position
.1c84	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1c86	c8		iny				iny
.1c87	a9 00		lda #$00			lda 	#0
.1c89	91 04		sta ($04),y			sta 	(temp0),y
.1c8b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af2					MSeed32:	.fill 	4							; random number seed.
.1c8c					MInt32Absolute:
.1c8c	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1c8e	30 01		bmi $1c91			bmi 	MInt32Negate
.1c90	60		rts				rts
.1c91					MInt32Negate:
.1c91	38		sec				sec
.1c92	a9 00		lda #$00			lda 	#0
.1c94	f5 48		sbc $48,x			sbc 	esInt0,x
.1c96	95 48		sta $48,x			sta 	esInt0,x
.1c98	a9 00		lda #$00			lda 	#0
.1c9a	f5 50		sbc $50,x			sbc 	esInt1,x
.1c9c	95 50		sta $50,x			sta 	esInt1,x
.1c9e	a9 00		lda #$00			lda 	#0
.1ca0	f5 58		sbc $58,x			sbc 	esInt2,x
.1ca2	95 58		sta $58,x			sta 	esInt2,x
.1ca4	a9 00		lda #$00			lda 	#0
.1ca6	f5 60		sbc $60,x			sbc 	esInt3,x
.1ca8	95 60		sta $60,x			sta 	esInt3,x
.1caa	60		rts				rts
.1cab					MInt32Not:
.1cab	b5 48		lda $48,x			lda 	esInt0,x
.1cad	49 ff		eor #$ff			eor 	#$FF
.1caf	95 48		sta $48,x			sta 	esInt0,x
.1cb1	b5 50		lda $50,x			lda 	esInt1,x
.1cb3	49 ff		eor #$ff			eor 	#$FF
.1cb5	95 50		sta $50,x			sta 	esInt1,x
.1cb7	b5 58		lda $58,x			lda 	esInt2,x
.1cb9	49 ff		eor #$ff			eor 	#$FF
.1cbb	95 58		sta $58,x			sta 	esInt2,x
.1cbd	b5 60		lda $60,x			lda 	esInt3,x
.1cbf	49 ff		eor #$ff			eor 	#$FF
.1cc1	95 60		sta $60,x			sta 	esInt3,x
.1cc3	60		rts				rts
.1cc4					MInt32Sign:
.1cc4	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1cc6	30 0b		bmi $1cd3			bmi 	MInt32True 					; if set return -1 (true)
.1cc8	20 fe 1c	jsr $1cfe			jsr 	MInt32Zero 					; is it zero ?
.1ccb	f0 0a		beq $1cd7			beq 	MInt32False 					; if zero return 0 (false)
.1ccd	20 d7 1c	jsr $1cd7			jsr 	MInt32False 					; > 0 return 1
.1cd0	f6 48		inc $48,x			inc 	esInt0,x
.1cd2	60		rts				rts
.1cd3					MInt32True:
.1cd3	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1cd5	d0 02		bne $1cd9			bne 	MInt32WriteAll
.1cd7					MInt32False:
.1cd7	a9 00		lda #$00			lda 	#0
.1cd9					MInt32WriteAll:
.1cd9	95 48		sta $48,x			sta 	esInt0,x
.1cdb					MInt32Write123:
.1cdb	95 50		sta $50,x			sta 	esInt1,x
.1cdd	95 58		sta $58,x			sta 	esInt2,x
.1cdf	95 60		sta $60,x			sta 	esInt3,x
.1ce1	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1ce3	95 40		sta $40,x			sta 	esType,x
.1ce5	60		rts				rts
.1ce6					MInt32Set8Bit:
.1ce6	95 48		sta $48,x			sta 	esInt0,x
.1ce8	a9 00		lda #$00			lda 	#0
.1cea	f0 ef		beq $1cdb			beq		MInt32Write123
.1cec					MInt32ShiftLeft:
.1cec	16 48		asl $48,x			asl 	esInt0,x
.1cee	36 50		rol $50,x			rol	 	esInt1,x
.1cf0	36 58		rol $58,x			rol	 	esInt2,x
.1cf2	36 60		rol $60,x			rol	 	esInt3,x
.1cf4	60		rts				rts
.1cf5					MInt32ShiftRight:
.1cf5	56 60		lsr $60,x			lsr 	esInt3,x
.1cf7	76 58		ror $58,x			ror 	esInt2,x
.1cf9	76 50		ror $50,x			ror 	esInt1,x
.1cfb	76 48		ror $48,x			ror 	esInt0,x
.1cfd	60		rts				rts
.1cfe					MInt32Zero:
.1cfe	b5 48		lda $48,x			lda 	esInt0,x
.1d00	15 50		ora $50,x			ora 	esInt1,x
.1d02	15 58		ora $58,x			ora 	esInt2,x
.1d04	15 60		ora $60,x			ora 	esInt3,x
.1d06	60		rts				rts
.1d07					MInt32Random:
.1d07	98		tya				tya
.1d08	48		pha				pha
.1d09	a0 07		ldy #$07			ldy 	#7
.1d0b	ad f2 0a	lda $0af2			lda 	MSeed32+0
.1d0e	d0 03		bne $1d13			bne 	_Random1
.1d10	a8		tay				tay
.1d11	a9 aa		lda #$aa			lda		#$AA
.1d13					_Random1:
.1d13	0a		asl a				asl 	a
.1d14	2e f3 0a	rol $0af3			rol 	MSeed32+1
.1d17	2e f4 0a	rol $0af4			rol 	MSeed32+2
.1d1a	2e f5 0a	rol $0af5			rol 	MSeed32+3
.1d1d	90 02		bcc $1d21			bcc 	_Random2
.1d1f	49 c5		eor #$c5			eor 	#$C5
.1d21					_Random2:
.1d21	88		dey				dey
.1d22	d0 ef		bne $1d13			bne 	_Random1
.1d24	8d f2 0a	sta $0af2			sta 	MSeed32+0
.1d27	95 48		sta $48,x			sta 	esInt0,x
.1d29	ad f3 0a	lda $0af3			lda 	MSeed32+1
.1d2c	95 50		sta $50,x			sta 	esInt1,x
.1d2e	ad f4 0a	lda $0af4			lda 	MSeed32+2
.1d31	95 58		sta $58,x			sta 	esInt2,x
.1d33	ad f5 0a	lda $0af5			lda 	MSeed32+3
.1d36	95 60		sta $60,x			sta 	esInt3,x
.1d38	68		pla				pla
.1d39	a8		tay				tay
.1d3a	a9 00		lda #$00			lda 	#0
.1d3c	95 40		sta $40,x			sta 	esType,x
.1d3e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.1d3f					CheckToken:
.1d3f	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1d41	d0 02		bne $1d45			bne 	_CTError
.1d43	c8		iny				iny
.1d44	60		rts				rts
.1d45					_CTError:
.1d45	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1d47	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1d4a					CheckRightParen:
.1d4a	b1 02		lda ($02),y			lda 	(codePtr),y
.1d4c	c8		iny				iny
.1d4d	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1d4f	d0 01		bne $1d52			bne 	_CRPError
.1d51	60		rts				rts
.1d52					_CRPError:
.1d52	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.1d54	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1d57					CheckComma:
.1d57	b1 02		lda ($02),y			lda 	(codePtr),y
.1d59	c8		iny				iny
.1d5a	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1d5c	d0 01		bne $1d5f			bne 	_CCError
.1d5e	60		rts				rts
.1d5f					_CCError:
.1d5f	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.1d61	20 05 1e	jsr $1e05			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2328					ScanForward:
.2328	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.232a	86 07		stx $07				stx 	temp1+1
.232c	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.232e	85 08		sta $08				sta 	temp2
.2330	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2332	c8		iny				iny
.2333	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.2335	d0 08		bne $233f			bne 	_SFNoCheck 					; if so, check token against entered values.
.2337	c5 06		cmp $06				cmp 	temp1
.2339	f0 24		beq $235f			beq 	_SFExit
.233b	c5 07		cmp $07				cmp 	temp1+1
.233d	f0 20		beq $235f			beq 	_SFExit
.233f					_SFNoCheck:
.233f	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2341	90 ed		bcc $2330			bcc 	_SFLoop
.2343	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2345	90 19		bcc $2360			bcc 	_SFSpecials
.2347	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2349	90 e5		bcc $2330			bcc 	_SFLoop
.234b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.234d	b0 e1		bcs $2330			bcs 	_SFLoop
.234f	aa		tax				tax  								; token in X, and look up the adjuster.
.2350	bd 5b 17	lda $175b,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2353	38		sec				sec 								; convert to an offset
.2354	e9 81		sbc #$81			sbc 	#$81
.2356	18		clc				clc 								; add to depth
.2357	65 08		adc $08				adc 	temp2
.2359	85 08		sta $08				sta 	temp2
.235b	10 d3		bpl $2330			bpl 	_SFLoop 					; +ve okay to continue
.235d	30 2a		bmi $2389			bmi 	_SFError 					; if gone -ve then we have a nesting error
.235f	60		rts		_SFExit:rts
.2360					_SFSpecials:
.2360	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2362	f0 14		beq $2378			beq 	_SFNextLine
.2364	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2366	f0 26		beq $238e			beq 	_SFFloatSkip
.2368	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.236a	f0 04		beq $2370			beq 	_SFSkipString
.236c	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.236d	4c 30 23	jmp $2330			jmp 	_SFLoop 					; token.
.2370					_SFSkipString:
.2370	98		tya				tya
.2371	38		sec				sec
.2372	71 02		adc ($02),y			adc 	(codePtr),y
.2374	a8		tay				tay
.2375	4c 30 23	jmp $2330			jmp 	_SFLoop
.2378					_SFNextLine:
.2378	a0 00		ldy #$00			ldy 	#0 							; get offset
.237a	b1 02		lda ($02),y			lda 	(codePtr),y
.237c	18		clc				clc 								; add to code pointer.
.237d	65 02		adc $02				adc 	codePtr
.237f	85 02		sta $02				sta 	codePtr
.2381	90 02		bcc $2385			bcc		_SFNLNoCarry
.2383	e6 03		inc $03				inc 	codePtr+1
.2385					_SFNLNoCarry:
.2385	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2387	d0 a7		bne $2330			bne		_SFLoop 					; no go round again
.2389					_SFError:
.2389	a2 13		ldx #$13			ldx 	#ErrorID_Struct
.238b	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.238e					_SFFloatSkip:
.238e	4c 8e 12	jmp $128e			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.1d64					RSReset:
.1d64	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.1d66	85 78		sta $78				sta 	rsPointer
.1d68	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.1d6a	85 79		sta $79				sta 	1+(rsPointer)
.1d6c	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1d6e	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.1d71	60		rts				rts
.1d72					RSClaim:
.1d72	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1d74	48		pha				pha 								; save marker on stack.
.1d75	8a		txa				txa 								; get bytes required.
.1d76	38		sec				sec
.1d77	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1d79	65 78		adc $78				adc 	rsPointer
.1d7b	85 78		sta $78				sta 	rsPointer
.1d7d	a5 79		lda $79				lda 	rsPointer+1
.1d7f	69 ff		adc #$ff			adc 	#$FF
.1d81	85 79		sta $79				sta 	rsPointer+1
.1d83	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.1d85	90 08		bcc $1d8f			bcc 	_RSCOverflow
.1d87	68		pla				pla 								; get marker back
.1d88	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1d8a	91 78		sta ($78),y			sta 	(rsPointer),y
.1d8c	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1d8e	60		rts				rts
.1d8f					_RSCOverflow:
.1d8f	a2 15		ldx #$15			ldx 	#ErrorID_RetStack
.1d91	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1d94					RSFree:
.1d94	18		clc				clc
.1d95	65 78		adc $78				adc 	rsPointer
.1d97	85 78		sta $78				sta 	rsPointer
.1d99	90 02		bcc $1d9d			bcc 	_RSFExit
.1d9b	e6 79		inc $79				inc 	rsPointer+1
.1d9d					_RSFExit:
.1d9d	60		rts				rts
.1d9e					RSSavePosition:
.1d9e	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1da0	a8		tay				tay 								; this is where we write it.
.1da1	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1da3	91 78		sta ($78),y			sta 	(rsPointer),y
.1da5	c8		iny				iny
.1da6	a5 03		lda $03				lda 	codePtr+1
.1da8	91 78		sta ($78),y			sta 	(rsPointer),y
.1daa	c8		iny				iny
.1dab	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1dad	91 78		sta ($78),y			sta 	(rsPointer),y
.1daf	a8		tay				tay 								; fix Y back again to original value
.1db0	60		rts				rts
.1db1					RSLoadPosition:
.1db1	a8		tay				tay
.1db2	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1db4	85 02		sta $02				sta 	codePtr
.1db6	c8		iny				iny
.1db7	b1 78		lda ($78),y			lda 	(rsPointer),y
.1db9	85 03		sta $03				sta 	codePtr+1
.1dbb	c8		iny				iny
.1dbc	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1dbe	a8		tay				tay 								; to Y
.1dbf	60		rts				rts

;******  Return to file: main/main.asm

.1dc0					mainHandler:
.1dc0	7c c3 1d	jmp ($1dc3,x)			jmp 	(mainVectors,x)
.1dc3					mainVectors:
>1dc3	8e 17					.word LinkEvaluate         ; index 0
>1dc5	94 17					.word LinkEvaluateInteger  ; index 2
>1dc7	9a 17					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.asm

.1dc9					assemblerHandler:
.1dc9	7c cc 1d	jmp ($1dcc,x)			jmp 	(assemblerVectors,x)
.1dcc					assemblerVectors:

;******  Return to file: basic.asm


;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.1dcc					IONewLine:
.1dcc	48		pha				pha
.1dcd	a9 0d		lda #$0d			lda 	#13
.1dcf	20 dc 1d	jsr $1ddc			jsr 	IOPrintChar
.1dd2	68		pla				pla
.1dd3	60		rts				rts
.1dd4					IOTab:
.1dd4	48		pha				pha
.1dd5	a9 20		lda #$20			lda 	#32
.1dd7	20 dc 1d	jsr $1ddc			jsr 	IOPrintChar
.1dda	68		pla				pla
.1ddb	60		rts				rts
.1ddc					IOPrintChar:
.1ddc	aa		tax				tax
.1ddd	5a		phy				phy
.1dde	8a		txa				txa
.1ddf	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1de2	7a		ply				ply
.1de3	60		rts				rts
.1de4					IOInkey:
.1de4	98		tya				tya
.1de5	48		pha				pha
.1de6	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1de9	85 0a		sta $0a				sta 	tempShort
.1deb	68		pla				pla
.1dec	a8		tay				tay
.1ded	a5 0a		lda $0a				lda 	tempShort
.1def	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.1df0					IOReadTimer:
.1df0	20 de ff	jsr $ffde			jsr 	$FFDE
.1df3	48		pha				pha
.1df4	8a		txa				txa
.1df5	a8		tay				tay
.1df6	68		pla				pla
.1df7	60		rts				rts

;******  Return to file: device/device.asm

.1df8					deviceHandler:
.1df8	7c fb 1d	jmp ($1dfb,x)			jmp 	(deviceVectors,x)
.1dfb					deviceVectors:
>1dfb	cc 1d					.word IONewLine            ; index 0
>1dfd	e4 1d					.word IOInkey              ; index 2
>1dff	dc 1d					.word IOPrintChar          ; index 4
>1e01	d4 1d					.word IOTab                ; index 6
>1e03	f0 1d					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm


;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1e05					ErrorHandler:
.1e05	a9 ee		lda #$ee			lda 	#$EE
.1e07	a8		tay				tay
>1e08	db						.byte 	$DB
.1e09	4c 09 1e	jmp $1e09	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.asm

.1e0c					floatingpointHandler:
.1e0c	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1e0e	20 05 1e	jsr $1e05			jsr 	ErrorHandler

;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.asm

.1e11					interactionHandler:
.1e11	7c 14 1e	jmp ($1e14,x)			jmp 	(interactionVectors,x)
.1e14					interactionVectors:

;******  Return to file: basic.asm


;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.1e14					StringChrs:
.1e14	aa		tax				tax 								; set up stack
.1e15	a9 02		lda #$02			lda 	#2
.1e17	20 ce 1e	jsr $1ece			jsr 	AllocateSoftString
.1e1a	98		tya				tya
.1e1b	20 f4 1e	jsr $1ef4			jsr 	WriteSoftString
.1e1e	20 23 1e	jsr $1e23			jsr 	ReturnSoftString
.1e21	8a		txa				txa
.1e22	60		rts				rts
.1e23					ReturnSoftString:
.1e23	a5 7a		lda $7a				lda 	softMemAlloc
.1e25	95 48		sta $48,x			sta 	esInt0,x
.1e27	a5 7b		lda $7b				lda 	softMemAlloc+1
.1e29	95 50		sta $50,x			sta 	esInt1,x
.1e2b	a9 00		lda #$00			lda 	#0
.1e2d	95 58		sta $58,x			sta 	esInt2,x
.1e2f	95 60		sta $60,x			sta 	esInt3,x
.1e31	a9 40		lda #$40			lda 	#$40
.1e33	95 40		sta $40,x			sta 	esType,x
.1e35	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.1e36					STRCompare:
.1e36	48		pha				pha 								; save A
.1e37	aa		tax				tax 								; put stack pos in X
.1e38	98		tya				tya
.1e39	48		pha				pha
.1e3a	20 6e 1e	jsr $1e6e			jsr 	CopyStringPair
.1e3d	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1e3f	b1 04		lda ($04),y			lda 	(temp0),y
.1e41	d1 06		cmp ($06),y			cmp 	(temp1),y
.1e43	90 02		bcc $1e47			bcc 	_SCNotSmaller
.1e45	b1 06		lda ($06),y			lda 	(temp1),y
.1e47					_SCNotSmaller:
.1e47	aa		tax				tax 								; put that in X. We compare this many chars first.
.1e48					_SCCompareLoop:
.1e48	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1e4a	f0 0c		beq $1e58			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1e4c	ca		dex				dex 								; decrement chars to compare.
.1e4d	c8		iny				iny 								; move to next character
.1e4e	38		sec				sec 								; calculate s1[y]-s2[y]
.1e4f	b1 04		lda ($04),y			lda 	(temp0),y
.1e51	f1 06		sbc ($06),y			sbc 	(temp1),y
.1e53	d0 0a		bne $1e5f			bne 	_SCReturnResult 			; if different return sign of A
.1e55	4c 48 1e	jmp $1e48			jmp 	_SCCompareLoop
.1e58					_SCSameToEndShortest
.1e58	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1e5a	38		sec				sec
.1e5b	b1 04		lda ($04),y			lda 	(temp0),y
.1e5d	f1 06		sbc ($06),y			sbc 	(temp1),y
.1e5f					_SCReturnResult:
.1e5f	08		php				php 								; set return to zero preserving PSW.
.1e60	a2 00		ldx #$00			ldx 	#0
.1e62	28		plp				plp
.1e63	f0 05		beq $1e6a			beq 	_SCExit 					; two values equal, then exit
.1e65	ca		dex				dex 								; X = $FF
.1e66	90 02		bcc $1e6a			bcc 	_SCExit 					; if 1st < 2nd then -1
.1e68	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1e6a					_SCExit:
.1e6a	68		pla				pla
.1e6b	a8		tay				tay
.1e6c	68		pla				pla
.1e6d	60		rts				rts
.1e6e					CopyStringPair:
.1e6e	b5 49		lda $49,x			lda 	esInt0+1,x
.1e70	85 06		sta $06				sta 	temp1
.1e72	b5 51		lda $51,x			lda 	esInt1+1,x
.1e74	85 07		sta $07				sta 	temp1+1
.1e76					CopyStringTop:
.1e76	b5 48		lda $48,x			lda 	esInt0,x
.1e78	85 04		sta $04				sta 	temp0
.1e7a	b5 50		lda $50,x			lda 	esInt1,x
.1e7c	85 05		sta $05				sta 	temp0+1
.1e7e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.1e7f					StringConcat:
.1e7f	aa		tax				tax									; stack pos in X
.1e80	98		tya				tya
.1e81	48		pha				pha
.1e82	20 6e 1e	jsr $1e6e			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1e85	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1e86	a0 00		ldy #$00			ldy 	#0
.1e88	b1 04		lda ($04),y			lda 	(temp0),y
.1e8a	71 06		adc ($06),y			adc 	(temp1),y
.1e8c	b0 1c		bcs $1eaa			bcs 	_SCError 					; just too many characters here.
.1e8e	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.1e90	b0 18		bcs $1eaa			bcs 	_SCError
.1e92	20 ce 1e	jsr $1ece			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1e95	20 c5 1e	jsr $1ec5			jsr 	CopySoftToStack 			; copy that to the stack.
.1e98	20 af 1e	jsr $1eaf			jsr 	_SCCopyTemp0 				; copy temp0
.1e9b	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1e9d	85 04		sta $04				sta 	temp0
.1e9f	a5 07		lda $07				lda 	temp1+1
.1ea1	85 05		sta $05				sta 	temp0+1
.1ea3	20 af 1e	jsr $1eaf			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1ea6	68		pla				pla
.1ea7	a8		tay				tay
.1ea8	8a		txa				txa 								; and A
.1ea9	60		rts				rts
.1eaa					_SCError:
.1eaa	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.1eac	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.1eaf					_SCCopyTemp0:
.1eaf	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1eb1	b1 04		lda ($04),y			lda 	(temp0),y
.1eb3	85 08		sta $08				sta 	temp2
.1eb5					_SCCopyLoop:
.1eb5	a5 08		lda $08				lda 	temp2 						; done the lot
.1eb7	f0 0b		beq $1ec4			beq 	_SCCopyExit
.1eb9	c6 08		dec $08				dec 	temp2
.1ebb	c8		iny				iny 								; get next char
.1ebc	b1 04		lda ($04),y			lda 	(temp0),y
.1ebe	20 f4 1e	jsr $1ef4			jsr 	WriteSoftString 			; write to soft string.
.1ec1	4c b5 1e	jmp $1eb5			jmp 	_SCCopyLoop
.1ec4					_SCCopyExit:
.1ec4	60		rts				rts
.1ec5					CopySoftToStack:
.1ec5	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1ec7	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1ec9	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1ecb	95 50		sta $50,x			sta 	esInt1,x
.1ecd	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1ece					AllocateSoftString:
.1ece	85 0a		sta $0a				sta 	tempShort 					; save count
.1ed0	98		tya				tya
.1ed1	48		pha				pha
.1ed2	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1ed4	d0 09		bne $1edf			bne 	_ASSDone
.1ed6	a5 0b		lda $0b				lda 	highMemory 					; reset the soft memory alloc pointer.
.1ed8	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1eda	a4 0c		ldy $0c				ldy 	highMemory+1 				; but it needs to be reset before each command.
.1edc	88		dey				dey
.1edd	84 7b		sty $7b				sty 	softMemAlloc+1
.1edf					_ASSDone:
.1edf	38		sec				sec 								; allocate downwards enough memory
.1ee0	a5 7a		lda $7a				lda 	softMemAlloc
.1ee2	e5 0a		sbc $0a				sbc 	tempShort
.1ee4	85 7a		sta $7a				sta 	softMemAlloc
.1ee6	a5 7b		lda $7b				lda 	softMemAlloc+1
.1ee8	e9 00		sbc #$00			sbc 	#0
.1eea	85 7b		sta $7b				sta 	softMemAlloc+1
.1eec	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1eee	a8		tay				tay
.1eef	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1ef1	68		pla				pla
.1ef2	a8		tay				tay
.1ef3	60		rts				rts
.1ef4					WriteSoftString:
.1ef4	84 0a		sty $0a				sty 	tempShort 					; save Y
.1ef6	48		pha				pha
.1ef7	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1ef9	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1efb	18		clc				clc
.1efc	69 01		adc #$01			adc 	#1
.1efe	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f00	a8		tay				tay 								; pointer in Y
.1f01	68		pla				pla 								; get char and write.
.1f02	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1f04	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1f06	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.1f07					StringSubstring:
.1f07	48		pha				pha
.1f08	aa		tax				tax 								; access stack.
.1f09	98		tya				tya
.1f0a	48		pha				pha
.1f0b	20 76 1e	jsr $1e76			jsr 	CopyStringTop 				; point temp0 to the string.
.1f0e	a0 00		ldy #$00			ldy 	#0 							; get length.
.1f10	b1 04		lda ($04),y			lda 	(temp0),Y
.1f12	85 06		sta $06				sta 	temp1
.1f14	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.1f16	c5 06		cmp $06				cmp 	temp1 						;
.1f18	f0 02		beq $1f1c			beq 	_SSBOkay
.1f1a	b0 2a		bcs $1f46			bcs 	_SSBReturnNull
.1f1c					_SSBOkay:
.1f1c	a5 06		lda $06				lda 	temp1 						; get the total length +1
.1f1e	18		clc				clc
.1f1f	69 01		adc #$01			adc 	#1
.1f21	38		sec				sec
.1f22	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.1f24	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.1f26	90 02		bcc $1f2a			bcc		_SSBTrunc
.1f28	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1f2a					_SSBTrunc:
.1f2a	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.1f2c	18		clc				clc
.1f2d	69 01		adc #$01			adc 	#1 							; add 1
.1f2f	20 ce 1e	jsr $1ece			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1f32	20 c5 1e	jsr $1ec5			jsr 	CopySoftToStack 			; copy that to the stack.
.1f35	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.1f37					_SSBCopyLoop:
.1f37	a5 07		lda $07				lda 	temp1+1 					; done them all
.1f39	f0 0e		beq $1f49			beq 	_SSBExit
.1f3b	c6 07		dec $07				dec 	temp1+1
.1f3d	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.1f3f	20 f4 1e	jsr $1ef4			jsr 	WriteSoftString
.1f42	c8		iny				iny
.1f43	4c 37 1f	jmp $1f37			jmp 	_SSBCopyLoop
.1f46					_SSBReturnNull:
.1f46	20 4d 1f	jsr $1f4d			jsr 	ReturnNull
.1f49					_SSBExit:
.1f49	68		pla				pla
.1f4a	a8		tay				tay
.1f4b	68		pla				pla
.1f4c	60		rts				rts
.1f4d					ReturnNull:
.1f4d	a9 00		lda #$00			lda 	#0 							; clear null string
.1f4f	8d cc 0a	sta $0acc			sta 	NullString
.1f52	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.1f54	95 48		sta $48,x			sta 	esInt0,x
.1f56	a9 0a		lda #$0a			lda 	#NullString >> 8
.1f58	95 50		sta $50,x			sta 	esInt1,x
.1f5a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0af6					srcStrLen:
>0af6							.fill 	1
.1f5b					StringWrite:
.1f5b	aa		tax				tax
.1f5c	48		pha				pha
.1f5d	98		tya				tya
.1f5e	48		pha				pha
.1f5f	20 86 1f	jsr $1f86			jsr 	CheckOverwriteCurrent
.1f62	b0 0d		bcs $1f71			bcs		_SWCopyCurrent
.1f64	20 c4 1f	jsr $1fc4			jsr 	RequiresConcretion
.1f67	90 0e		bcc $1f77			bcc 	_SWWriteReference
.1f69	20 27 20	jsr $2027			jsr 	CheckSpecialConcretion
.1f6c	b0 09		bcs $1f77			bcs 	_SWWriteReference
.1f6e	20 d8 1f	jsr $1fd8			jsr 	AllocateHardMemory
.1f71					_SWCopyCurrent:
.1f71	20 0b 20	jsr $200b			jsr 	CopyStringToHardMemory
.1f74	4c 82 1f	jmp $1f82			jmp 	_SWExit
.1f77					_SWWriteReference
.1f77	a0 00		ldy #$00			ldy 	#0
.1f79	a5 04		lda $04				lda 	temp0
.1f7b	91 06		sta ($06),y			sta 	(temp1),y
.1f7d	c8		iny				iny
.1f7e	a5 05		lda $05				lda 	temp0+1
.1f80	91 06		sta ($06),y			sta 	(temp1),y
.1f82					_SWExit:
.1f82	68		pla				pla
.1f83	a8		tay				tay
.1f84	68		pla				pla
.1f85	60		rts				rts
.1f86					CheckOverwriteCurrent:
.1f86	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.1f88	b5 51		lda $51,x			lda 	esInt1+1,x
.1f8a	85 05		sta $05				sta 	temp0+1
.1f8c	b5 49		lda $49,x			lda 	esInt0+1,x
.1f8e	85 04		sta $04				sta 	temp0
.1f90	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.1f92	8d f6 0a	sta $0af6			sta 	srcStrLen
.1f95	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.1f97	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.1f99	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.1f9b	85 07		sta $07				sta 	temp1+1
.1f9d	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.1f9f	b1 06		lda ($06),y			lda 	(temp1),y
.1fa1	c5 0c		cmp $0c				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.1fa3	90 1b		bcc $1fc0			bcc 	_COCFail 				; in hard memory.
.1fa5	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.1fa7	b1 06		lda ($06),y			lda 	(temp1),y
.1fa9	e9 01		sbc #$01			sbc 	#1
.1fab	85 08		sta $08				sta 	temp2
.1fad	c8		iny				iny
.1fae	b1 06		lda ($06),y			lda 	(temp1),y
.1fb0	e9 00		sbc #$00			sbc 	#0
.1fb2	85 09		sta $09				sta 	temp2+1
.1fb4	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.1fb6	b1 08		lda ($08),y			lda 	(temp2),y
.1fb8	38		sec				sec  							; maximum character capacity.
.1fb9	e9 02		sbc #$02			sbc 	#2
.1fbb	cd f6 0a	cmp $0af6			cmp 	srcStrLen 				; if >= the required length
.1fbe	b0 02		bcs $1fc2			bcs 	_COCCanReuse
.1fc0					_COCFail:
.1fc0	18		clc				clc
.1fc1	60		rts				rts
.1fc2					_COCCanReuse:
.1fc2	38		sec				sec
.1fc3	60		rts				rts
.1fc4					RequiresConcretion:
.1fc4	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.1fc6	c5 0c		cmp $0c				cmp 	highMemory+1 			; if >= high memory it is concreted
.1fc8	b0 0a		bcs $1fd4			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.1fca	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.1fcc	f0 08		beq $1fd6			beq 	_RCFail 				; if not, this cannot be soft memory.
.1fce	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.1fd0	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.1fd2	90 02		bcc $1fd6			bcc 	_RCFail 				; so concreting
.1fd4					_RCSucceed:
.1fd4	38		sec				sec
.1fd5	60		rts				rts
.1fd6					_RCFail:
.1fd6	18		clc				clc
.1fd7	60		rts				rts
.1fd8					AllocateHardMemory:
.1fd8	98		tya				tya
.1fd9	48		pha				pha
.1fda	ad f6 0a	lda $0af6			lda 	srcStrLen 				; characters in string
.1fdd	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.1fdf	b0 04		bcs $1fe5			bcs 	_AHMSetMax 				; max out that amount.
.1fe1	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.1fe3	90 02		bcc $1fe7			bcc 	_AHMIsOkay
.1fe5					_AHMSetMax:
.1fe5	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.1fe7					_AHMIsOkay:
.1fe7	48		pha				pha
.1fe8	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.1fea	38		sec				sec  							; and copy result to TOS as target address.
.1feb	65 0b		adc $0b				adc 	highMemory
.1fed	85 0b		sta $0b				sta 	highMemory
.1fef	a5 0c		lda $0c				lda 	highMemory+1
.1ff1	69 ff		adc #$ff			adc 	#$FF
.1ff3	85 0c		sta $0c				sta 	highMemory+1
.1ff5	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.1ff7	68		pla				pla 							; get the total size of the storage block
.1ff8	91 0b		sta ($0b),y			sta 	(highMemory),y
.1ffa	18		clc				clc
.1ffb	a5 0b		lda $0b				lda		highMemory 				; point the target address to the byte after this.
.1ffd	69 01		adc #$01			adc 	#1
.1fff	91 06		sta ($06),y			sta 	(temp1),y
.2001	a5 0c		lda $0c				lda 	highMemory+1
.2003	69 00		adc #$00			adc 	#0
.2005	c8		iny				iny
.2006	91 06		sta ($06),y			sta 	(temp1),y
.2008	68		pla				pla
.2009	a8		tay				tay
.200a	60		rts				rts
.200b					CopyStringToHardMemory:
.200b	98		tya				tya
.200c	48		pha				pha
.200d	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.200f	b1 06		lda ($06),y			lda 	(temp1),y
.2011	85 08		sta $08				sta 	temp2
.2013	c8		iny				iny
.2014	b1 06		lda ($06),y			lda 	(temp1),y
.2016	85 09		sta $09				sta 	temp2+1
.2018	ac f6 0a	ldy $0af6			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.201b					_CSTHMLoop:
.201b	b1 04		lda ($04),y			lda 	(temp0),y
.201d	91 08		sta ($08),y			sta 	(temp2),y
.201f	88		dey				dey
.2020	c0 ff		cpy #$ff			cpy 	#$FF
.2022	d0 f7		bne $201b			bne 	_CSTHMLoop
.2024	68		pla				pla
.2025	a8		tay				tay
.2026	60		rts				rts
.2027					CheckSpecialConcretion:
.2027	ad f6 0a	lda $0af6			lda 	srcStrLen 				; check string is null.
.202a	f0 02		beq $202e			beq 	_CSCNullString
.202c	18		clc				clc
.202d	60		rts				rts
.202e					_CSCNullString:
.202e	a9 00		lda #$00			lda 	#0
.2030	8d cc 0a	sta $0acc			sta 	NullString
.2033	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2035	85 04		sta $04				sta 	temp0
.2037	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2039	85 05		sta $05				sta 	1+(temp0)
.203b	38		sec				sec
.203c	60		rts				rts

;******  Return to file: string/string.asm

.203d					stringHandler:
.203d	7c 40 20	jmp ($2040,x)			jmp 	(stringVectors,x)
.2040					stringVectors:
>2040	14 1e					.word StringChrs           ; index 0
>2042	7f 1e					.word StringConcat         ; index 2
>2044	36 1e					.word STRCompare           ; index 4
>2046	07 1f					.word StringSubstring      ; index 6
>2048	5b 1f					.word StringWrite          ; index 8

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.asm

.204a					tokeniserHandler:
.204a	7c 4d 20	jmp ($204d,x)			jmp 	(tokeniserVectors,x)
.204d					tokeniserVectors:

;******  Return to file: basic.asm


;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0af7					varHash:
>0af7							.fill	1
.0af8					varType:
>0af8							.fill 	1
.0af9					varEnd:
>0af9							.fill 	1
.007c					hashList:
>007c							.fill 	2
.204d					AccessVariable:
.204d	aa		tax				tax 								; stack in X
.204e	c8		iny				iny
.204f	b1 02		lda ($02),y			lda 	(codePtr),y
.2051	88		dey				dey
.2052	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.2054	d0 15		bne $206b			bne 	_AVLong
.2056	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2058	38		sec				sec 	 							; make it 0-25
.2059	e9 01		sbc #$01			sbc 	#1
.205b	0a		asl a				asl 	a 							; x 4 is LSB of address
.205c	0a		asl a				asl 	a
.205d	95 48		sta $48,x			sta 	esInt0,x
.205f	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.2061	95 50		sta $50,x			sta 	esInt1,x
.2063	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.2065	95 40		sta $40,x			sta 	esType,x
.2067	c8		iny				iny 								; skip over the variable reference in the code.
.2068	c8		iny				iny
.2069	8a		txa				txa 								; stack in A to return.
.206a	60		rts				rts
.206b					_AVLong:
.206b	8a		txa				txa
.206c	48		pha				pha
.206d	20 ab 20	jsr $20ab			jsr 	AccessSetup 				; set up the basic stuff.
.2070	20 50 21	jsr $2150			jsr 	FindVariable 				; does the variable exist already
.2073	b0 0e		bcs $2083			bcs 	_AVFound
.2075	ad f8 0a	lda $0af8			lda 	varType 					; is the variable type an array
.2078	4a		lsr a				lsr 	a
.2079	90 05		bcc $2080			bcc 	_AVCanCreate
.207b	a2 14		ldx #$14			ldx 	#ErrorID_noauto
.207d	20 05 1e	jsr $1e05			jsr 	ErrorHandler
.2080					_AVCanCreate:
.2080	20 e8 20	jsr $20e8			jsr 	CreateVariable 				; no, create it.
.2083					_AVFound:
.2083	68		pla				pla
.2084	aa		tax				tax
.2085	18		clc				clc 								; copy temp0 (variable record address)
.2086	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2088	69 05		adc #$05			adc 	#5
.208a	95 48		sta $48,x			sta 	esInt0,x
.208c	a5 05		lda $05				lda 	temp0+1
.208e	69 00		adc #$00			adc 	#0
.2090	95 50		sta $50,x			sta 	esInt1,x
.2092	a9 00		lda #$00			lda 	#0
.2094	95 58		sta $58,x			sta 	esInt2,x
.2096	95 60		sta $60,x			sta 	esInt3,x
.2098	ac f8 0a	ldy $0af8			ldy 	varType 					; get the type ID from the type.
.209b	b9 6b 20	lda $206b,y			lda 	_AVTypeTable-$3A,y
.209e	95 40		sta $40,x			sta 	esType,x
.20a0	ac f9 0a	ldy $0af9			ldy 	varEnd 						; restore Y
.20a3	8a		txa				txa 								; return stack in A and return
.20a4	60		rts				rts
.20a5					_AVTypeTable:
>20a5	80 80						.byte 	$80,$80						; integer
>20a7	c0 c0						.byte 	$C0,$C0 					; string
>20a9	81 81						.byte 	$81,$81 					; float
.20ab					AccessSetup:
.20ab	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.20ad	8d f7 0a	sta $0af7			sta 	varHash
.20b0	98		tya				tya
.20b1	48		pha				pha
.20b2	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.20b4	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.20b6	b0 0b		bcs $20c3			bcs 	_ASComplete
.20b8	18		clc				clc 								; add to the hash. Might improve this.
.20b9	6d f7 0a	adc $0af7			adc 	varHash
.20bc	8d f7 0a	sta $0af7			sta 	varHash
.20bf	c8		iny				iny 								; next character
.20c0	4c b2 20	jmp $20b2			jmp 	_ASLoop
.20c3					_ASComplete:
.20c3	8d f8 0a	sta $0af8			sta 	varType 					; save variable type byte
.20c6	c8		iny				iny
.20c7	8c f9 0a	sty $0af9			sty 	varEnd 						; save the ending position.
.20ca	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.20cb	e9 3a		sbc #$3a			sbc 	#$3A
.20cd	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.20ce	0a		asl a				asl 	a
.20cf	0a		asl a				asl 	a
.20d0	0a		asl a				asl 	a 							; 2 bytes/word
.20d1	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.20d3	ad f7 0a	lda $0af7			lda 	varHash 					; get hash
.20d6	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.20d8	0a		asl a				asl  	a 							; x 2 (for word) and CC
.20d9	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.20db	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.20dd	85 7c		sta $7c				sta 	hashList
.20df	a9 0a		lda #$0a			lda 	#hashTables >> 8
.20e1	69 00		adc #$00			adc 	#0
.20e3	85 7d		sta $7d				sta 	hashList+1
.20e5	68		pla				pla
.20e6	a8		tay				tay
.20e7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.20e8					CreateVariable:
.20e8	98		tya				tya 								; push Y on the stack twice.
.20e9	48		pha				pha
.20ea	48		pha				pha
.20eb	ae f8 0a	ldx $0af8			ldx 	varType 					; get var type 0-5
.20ee	bd 10 21	lda $2110,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.20f1	48		pha				pha 								; save length
.20f2	a8		tay				tay 								; put into Y.
.20f3	a5 0d		lda $0d				lda 	lowMemory 					; set low Memory ptr to temp0
.20f5	85 04		sta $04				sta 	temp0
.20f7	a5 0e		lda $0e				lda 	lowMemory+1
.20f9	85 05		sta $05				sta 	temp0+1
.20fb	68		pla				pla 								; get length
.20fc	20 68 10	jsr $1068			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.20ff					_CVClear:
.20ff	88		dey				dey
.2100	a9 00		lda #$00			lda 	#0
.2102	91 04		sta ($04),y			sta 	(temp0),y
.2104	c0 04		cpy #$04			cpy 	#4
.2106	d0 f7		bne $20ff			bne 	_CVClear
.2108	ad f7 0a	lda $0af7			lda 	varHash 					; store hash at offset 4.
.210b	91 04		sta ($04),y			sta 	(temp0),y
.210d	68		pla				pla 								; offset, work out where the variable name is.
.210e	18		clc				clc
.210f	65 02		adc $02				adc 	codePtr
.2111	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2113	91 04		sta ($04),y			sta 	(temp0),y
.2115	a5 03		lda $03				lda 	codePtr+1
.2117	69 00		adc #$00			adc 	#0
.2119	c8		iny				iny
.211a	91 04		sta ($04),y			sta 	(temp0),y
.211c	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.211e	b1 7c		lda ($7c),y			lda 	(hashList),y
.2120	91 04		sta ($04),y			sta 	(temp0),y
.2122	c8		iny				iny
.2123	b1 7c		lda ($7c),y			lda 	(hashList),y
.2125	91 04		sta ($04),y			sta 	(temp0),y
.2127	a5 05		lda $05				lda 	temp0+1 					; set new link
.2129	91 7c		sta ($7c),y			sta 	(hashList),y
.212b	88		dey				dey
.212c	a5 04		lda $04				lda 	temp0
.212e	91 7c		sta ($7c),y			sta 	(hashList),y
.2130	ad f8 0a	lda $0af8			lda 	varType 					; is it a string ($3C)
.2133	c9 3c		cmp #$3c			cmp 	#$3C
.2135	d0 10		bne $2147			bne 	_CVNoDefaultNull
.2137	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.2139	8d cc 0a	sta $0acc			sta 	NullString
.213c	a0 05		ldy #$05			ldy 	#5
.213e	a9 cc		lda #$cc			lda 	#NullString & $FF
.2140	91 04		sta ($04),y			sta 	(temp0),y
.2142	a9 0a		lda #$0a			lda 	#NullString >> 8
.2144	c8		iny				iny
.2145	91 04		sta ($04),y			sta 	(temp0),y
.2147					_CVNoDefaultNull:
.2147	68		pla				pla
.2148	a8		tay				tay
.2149	60		rts				rts
>214a	09 09				_CVSize:.byte 	5+4,5+4 					; <storage for integer>
>214c	07 07						.byte 	5+2,5+2 					; <storage for string>
>214e	0b 0b						.byte 	5+6,5+6 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.2150					FindVariable:
.2150	98		tya				tya
.2151	48		pha				pha
.2152	98		tya				tya 								; point temp2 to the actual name.
.2153	18		clc				clc
.2154	65 02		adc $02				adc 	codePtr
.2156	85 08		sta $08				sta 	temp2
.2158	a5 03		lda $03				lda 	codePtr+1
.215a	69 00		adc #$00			adc 	#0
.215c	85 09		sta $09				sta 	temp2+1
.215e	a0 00		ldy #$00			ldy 	#0
.2160	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.2162	85 04		sta $04				sta 	temp0
.2164	a5 7d		lda $7d				lda 	hashList+1
.2166	85 05		sta $05				sta 	temp0+1
.2168	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.216a	b1 04		lda ($04),y			lda 	(temp0),y
.216c	f0 2c		beq $219a			beq 	_FVFail
.216e	aa		tax				tax
.216f	88		dey				dey		 							; get LSB
.2170	b1 04		lda ($04),y			lda 	(temp0),y
.2172	85 04		sta $04				sta 	temp0 						; update pointer.
.2174	86 05		stx $05				stx 	temp0+1
.2176	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2178	b1 04		lda ($04),y			lda 	(temp0),y
.217a	cd f7 0a	cmp $0af7			cmp 	varHash
.217d	d0 e9		bne $2168			bne 	_FVNext 					; if not, no point in checking the name.
.217f	88		dey				dey 								; copy name pointer to temp1.
.2180	b1 04		lda ($04),y			lda 	(temp0),y
.2182	85 07		sta $07				sta 	temp1+1
.2184	88		dey				dey
.2185	b1 04		lda ($04),y			lda 	(temp0),y
.2187	85 06		sta $06				sta 	temp1
.2189	a0 00		ldy #$00			ldy 	#0
.218b					_FVCheck:
.218b	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.218d	d1 08		cmp ($08),y			cmp 	(temp2),y
.218f	d0 d7		bne $2168			bne 	_FVNext		 				; fail if different.
.2191	c8		iny				iny
.2192	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2194	90 f5		bcc $218b			bcc 	_FVCheck
.2196	68		pla				pla
.2197	a8		tay				tay
.2198	38		sec				sec
.2199	60		rts				rts
.219a					_FVFail:
.219a	68		pla				pla
.219b	a8		tay				tay
.219c	18		clc				clc
.219d	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.219e					HashTableReset:
.219e	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.21a0	a9 00		lda #$00			lda 	#0
.21a2					_HTRClear:
.21a2	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.21a5	ca		dex				dex
.21a6	d0 fa		bne $21a2			bne 	_HTRClear
.21a8	60		rts				rts

;******  Return to file: variable/variable.asm

.21a9					variableHandler:
.21a9	7c ac 21	jmp ($21ac,x)			jmp 	(variableVectors,x)
.21ac					variableVectors:
>21ac	4d 20					.word AccessVariable       ; index 0
>21ae	9e 21					.word HashTableReset       ; index 2

;******  Return to file: basic.asm


;******  End of listing
