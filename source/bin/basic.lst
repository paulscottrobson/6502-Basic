
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Sun Mar 28 13:27:11 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_HASH                     = $e6 ; #
=$e7					TKW_CLEAR                    = $e7 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	b2 3c						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 44		lda #$44			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 89 1e	jsr $1e89		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 89 1e	jsr $1e89		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 23 35	jsr $3523		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 e0 37	jsr $37e0		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 06 40	jsr $4006		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 d7 43	jsr $43d7		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 06 40	jsr $4006		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e6		cpx #$e6			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 23 35	jsr $3523		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 23 35	jsr $3523		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 23 35	jsr $3523		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 23 35	jsr $3523		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 d7 43	jsr $43d7		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 49 18	jsr $1849			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 23 35	jsr $3523		jsr	mainHandler
.157d	20 49 18	jsr $1849			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 89 1e	jsr $1e89		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1849					EHPrintAscii:
.1849	a0 00		ldy #$00			ldy 	#0
.184b	b1 2a		lda ($2a),y			lda 	(temp0),y
.184d	aa		tax				tax
.184e	f0 0f		beq $185f			beq 	_EHPExit
.1850					_EHPLoop:
.1850	c8		iny				iny
.1851	8a		txa				txa
.1852	48		pha				pha
.1853	b1 2a		lda ($2a),y			lda 	(temp0),y
.1855	a2 16		ldx #$16		ldx	#22
.1857	20 f6 14	jsr $14f6		jsr	deviceHandler
.185a	68		pla				pla
.185b	aa		tax				tax
.185c	ca		dex				dex
.185d	d0 f1		bne $1850			bne 	_EHPLoop
.185f					_EHPExit:
.185f	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1860					section_end_error:
.1860					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1860					ExtensionHandler:
.1860	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.1862	f0 16		beq $187a			beq 	_ExtensionForce
.1864	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1866	d0 08		bne $1870			bne 	_ExtensionUnary 			; is passed in A.
.1868	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.186a	c8		iny				iny
.186b	0a		asl a				asl 	a
.186c	aa		tax				tax
.186d	7c 71 18	jmp ($1871,x)			jmp 	(Group2Vectors-12,x)
.1870					_ExtensionUnary:
.1870	48		pha				pha 								; save stack pos in A
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	68		pla				pla 								; restore stack pos and call group3 command.
.1877	7c 7d 18	jmp ($187d,x)			jmp 	(Group3Vectors-12,X)
.187a					_ExtensionForce:
.187a	4c 95 18	jmp $1895			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.187d					Group2Vectors:
>187d	36 1b					.word	Command_VPoke            ; $86 vpoke
>187f	39 1b					.word	Command_VDoke            ; $87 vdoke
>1881	0e 1b					.word	Command_VLoad            ; $88 vload
>1883	a7 18					.word	CommandMode              ; $89 mode
>1885	52 19					.word	CommandPalette           ; $8a palette
>1887	89 19					.word	CommandSprite            ; $8b sprite

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1889					Group3Vectors:
>1889	82 1b					.word	Command_VPeek            ; $86 vpeek(
>188b	85 1b					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.188d					XEvaluateInteger:
.188d	8a		txa				txa
.188e	a2 0a		ldx #$0a		ldx	#10
.1890	20 23 35	jsr $3523		jsr	mainHandler
.1893	aa		tax				tax
.1894	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1895					ForceMode0:
.1895	a2 00		ldx #$00			ldx 	#0
.1897	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1899					_FMCheck:
.1899	bd 26 19	lda $1926,x			lda 	CMModeList,x 				; do we need to switch ?
.189c	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.189f	d0 13		bne $18b4			bne 	CMSetMode 					; different so switch.
.18a1	e8		inx				inx
.18a2	e0 04		cpx #$04			cpx 	#4
.18a4	d0 f3		bne $1899			bne 	_FMCheck
.18a6	60		rts				rts
.18a7					CommandMode:
.18a7	a9 00		lda #$00			lda 	#0
.18a9	a2 0a		ldx #$0a		ldx	#10
.18ab	20 23 35	jsr $3523		jsr	mainHandler
.18ae	a5 68		lda $68				lda 	esInt3
.18b0	29 70		and #$70			and 	#$70
.18b2	d0 06		bne $18ba			bne 	CMNoExpand
.18b4					CMSetMode:
.18b4	20 05 19	jsr $1905			jsr 	CMExpandMode
.18b7	4c ce 18	jmp $18ce			jmp 	CMUpdateMode
.18ba					CMNoExpand:
.18ba	a5 50		lda $50				lda 	esInt0
.18bc	8d e6 0b	sta $0be6			sta 	currentMode
.18bf	a5 58		lda $58				lda 	esInt1
.18c1	8d e7 0b	sta $0be7			sta 	currentMode+1
.18c4	a5 60		lda $60				lda 	esInt2
.18c6	8d e8 0b	sta $0be8			sta 	currentMode+2
.18c9	a5 68		lda $68				lda 	esInt3
.18cb	8d e9 0b	sta $0be9			sta 	currentMode+3
.18ce					CMUpdateMode:
.18ce	a2 11		ldx #$11			ldx 	#$11
.18d0					_CMClear:
.18d0	a9 00		lda #$00			lda 	#0
.18d2	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.18d5	ca		dex				dex
.18d6	10 f8		bpl $18d0			bpl 	_CMClear
.18d8	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.18db	48		pha				pha 								; stack twice.
.18dc	48		pha				pha
.18dd	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.18df	09 01		ora #$01			ora 	#$01 						; turn the output on.
.18e1	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.18e4	68		pla				pla 								; get back
.18e5	20 2a 19	jsr $192a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18e8	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.18eb	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.18ec	4a		lsr a				lsr 	a
.18ed	4a		lsr a				lsr 	a
.18ee	20 2a 19	jsr $192a			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18f1	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18f4	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18f6	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18f9	20 35 19	jsr $1935			jsr 	CMDecodeLayer 				; and decode layer 0
.18fc	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18fe	ad e7 0b	lda $0be7			lda 	currentMode+1
.1901	20 35 19	jsr $1935			jsr 	CMDecodeLayer
.1904	60		rts				rts
.1905					CMExpandMode:
.1905	a5 50		lda $50				lda 	esInt0 						; get mode number
.1907	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.1909	b0 16		bcs $1921			bcs 	_CMModeError
.190b	0a		asl a				asl 	a 							; x 4 into X
.190c	0a		asl a				asl 	a
.190d	aa		tax				tax
.190e	98		tya				tya
.190f	48		pha				pha
.1910	a0 00		ldy #$00			ldy 	#0
.1912					_CMEMCopy:
.1912	bd 26 19	lda $1926,x			lda 	CMModeList,x
.1915	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.1918	e8		inx				inx
.1919	c8		iny				iny
.191a	c0 04		cpy #$04			cpy 	#4
.191c	d0 f4		bne $1912			bne 	_CMEMCopy
.191e	68		pla				pla
.191f	a8		tay				tay
.1920	60		rts				rts
.1921					_CMModeError:
.1921	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1923	20 18 15	jsr $1518		jsr	errorHandler
.1926					CMModeList:
>1926	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.192a					CMEndModeList:
.192a					CMToScale:
.192a	29 03		and #$03			and 	#3 							; lower 2 bits only
.192c	aa		tax				tax 								; put in X for counting
.192d	a9 00		lda #$00			lda 	#0 							; zero result
.192f	38		sec				sec 								; first time rotate CS in
.1930					_CMTSLoop:
.1930	6a		ror a				ror 	a
.1931	ca		dex				dex
.1932	10 fc		bpl $1930			bpl 	_CMTSLoop
.1934	60		rts				rts
.1935					CMDecodeLayer:
.1935	48		pha				pha 								; save it.
.1936	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1938	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.193b	68		pla				pla 								; get it back
.193c	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.193e	f0 02		beq $1942			beq 	_CMDLNotSet
.1940	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.1942					_CMDLNotSet:
.1942	e0 00		cpx #$00			cpx 	#0
.1944	f0 06		beq $194c			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.1946	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1948	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.194b	60		rts				rts
.194c					_CMDLayer0:
.194c	09 80		ora #$80			ora 	#$80 						; tile base is $80
.194e	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1951	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/palette.asm

.1952					CommandPalette:
.1952	a9 00		lda #$00			lda 	#0
.1954	a2 0c		ldx #$0c		ldx	#12
.1956	20 23 35	jsr $3523		jsr	mainHandler
.1959	a2 02		ldx #$02		ldx	#2
.195b	20 23 35	jsr $3523		jsr	mainHandler
.195e	a9 01		lda #$01			lda 	#1
.1960	a2 08		ldx #$08		ldx	#8
.1962	20 23 35	jsr $3523		jsr	mainHandler
.1965	a5 50		lda $50				lda 	esInt0 					; get palette #
.1967	20 77 19	jsr $1977			jsr 	PointToPaletteA			; point to palette register
.196a	a5 51		lda $51				lda 	esInt0+1
.196c	8d 23 9f	sta $9f23			sta 	$9F23
.196f	a5 59		lda $59				lda 	esInt1+1
.1971	29 0f		and #$0f			and 	#$0F
.1973	8d 23 9f	sta $9f23			sta 	$9F23
.1976	60		rts				rts
.1977					PointToPaletteA:
.1977	0a		asl a				asl 	a 							; x 2 -> LSB
.1978	8d 20 9f	sta $9f20			sta 	$9F20
.197b	a9 00		lda #$00			lda 	#0 							; carry into A
.197d	2a		rol a				rol 	a
.197e	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1980	8d 21 9f	sta $9f21			sta 	$9F21
.1983	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.1985	8d 22 9f	sta $9f22			sta 	$9F22
.1988	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprite.asm

.0bea					currSprite:
>0bea							.fill 	2
.1989					CommandSprite:
.1989	20 9f 1a	jsr $1a9f			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.198c	d0 0d		bne $199b			bne 	_CSCheckClear
.198e	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1991	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1993	90 02		bcc $1997			bcc 	_CSNotOn 					; if CS turn on, so set it
.1995	09 40		ora #$40			ora 	#$40
.1997					_CSNotOn:
.1997	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.199a	60		rts				rts
.199b					_CSCheckClear:
.199b	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.199d	8d eb 0b	sta $0beb			sta 	currSprite+1
.19a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.19a2	c9 e7		cmp #$e7			cmp 	#TKW_CLEAR
.19a4	d0 05		bne $19ab			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.19a6	20 b0 1a	jsr $1ab0			jsr 	CSClearSprites 				; clear all the sprites
.19a9	c8		iny				iny 								; consume CLEAR token and exit.
.19aa	60		rts				rts
.19ab					_CSCommandLoop:
.19ab	20 9f 1a	jsr $1a9f			jsr 	CSCheckOnOff 				; check sprite on/off
.19ae	f0 40		beq $19f0			beq 	_CSSetVisibility
.19b0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.19b2	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.19b4	f0 39		beq $19ef			beq 	_CSExit
.19b6	c8		iny				iny									; consume it
.19b7	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.19b9	f0 34		beq $19ef			beq 	_CSExit
.19bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.19bd	f0 ec		beq $19ab			beq 	_CSCommandLoop
.19bf	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.19c1	f0 7d		beq $1a40			beq 	_CSSetImage
.19c3	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.19c5	f0 3f		beq $1a06			beq 	_CSSetFlip
.19c7	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.19c9	f0 5a		beq $1a25			beq 	_CSSetPos
.19cb	88		dey				dey 								; unpick DEY
.19cc	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.19ce	a2 0c		ldx #$0c		ldx	#12
.19d0	20 23 35	jsr $3523		jsr	mainHandler
.19d3	06 50		asl $50				asl		esInt0 						; multiply A:esInt0 by 8
.19d5	b0 13		bcs $19ea			bcs 	_CSBadValue 				; sprites only 0-127
.19d7	06 50		asl $50				asl 	esInt0
.19d9	2a		rol a				rol 	a
.19da	06 50		asl $50				asl 	esInt0
.19dc	2a		rol a				rol 	a
.19dd	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.19df	8d eb 0b	sta $0beb			sta 	currSprite+1
.19e2	a5 50		lda $50				lda 	esInt0 						; LSB of address
.19e4	8d ea 0b	sta $0bea			sta 	currSprite+0
.19e7	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.19ea					_CSBadValue
.19ea	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19ec	20 18 15	jsr $1518		jsr	errorHandler
.19ef					_CSExit:
.19ef	60		rts				rts
.19f0					_CSSetVisibility:
.19f0	08		php				php 								; save carry
.19f1	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.19f3	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.19f6	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.19f9	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.19fb	28		plp				plp
.19fc	90 02		bcc $1a00			bcc 	_CSSetOff 					; check if carry was set
.19fe	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1a00					_CSSetOff:
.1a00	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1a03	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a06					_CSSetFlip:
.1a06	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a08	a2 0c		ldx #$0c		ldx	#12
.1a0a	20 23 35	jsr $3523		jsr	mainHandler
.1a0d	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1a0f	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.1a12	a5 50		lda $50				lda 	esInt0 						; flip value & 3 => temp0
.1a14	29 03		and #$03			and 	#3
.1a16	85 2a		sta $2a				sta 	temp0
.1a18	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1a1b	29 fc		and #$fc			and 	#$FC
.1a1d	05 2a		ora $2a				ora 	temp0
.1a1f	8d 23 9f	sta $9f23			sta 	$9F23
.1a22	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a25					_CSSetPos:
.1a25	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1a27	a2 0a		ldx #$0a		ldx	#10
.1a29	20 23 35	jsr $3523		jsr	mainHandler
.1a2c	a2 02		ldx #$02		ldx	#2
.1a2e	20 23 35	jsr $3523		jsr	mainHandler
.1a31	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1a33	a2 0a		ldx #$0a		ldx	#10
.1a35	20 23 35	jsr $3523		jsr	mainHandler
.1a38	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1a3a	20 ca 1a	jsr $1aca			jsr 	SpriteMove 					; move it.
.1a3d	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a40					_CSSetImage:
.1a40	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1a42	a2 0c		ldx #$0c		ldx	#12
.1a44	20 23 35	jsr $3523		jsr	mainHandler
.1a47	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1a49	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.1a4c	a6 50		ldx $50				ldx 	esInt0 						; get image # into X
.1a4e	bd 2d 0c	lda $0c2d,x			lda 	imageAddr2Low,x 			; copy low address in.
.1a51	8d 23 9f	sta $9f23			sta 	$9F23
.1a54	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1a57	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1a5a	29 10		and #$10			and 	#$10
.1a5c	0a		asl a				asl 	a
.1a5d	0a		asl a				asl		a
.1a5e	0a		asl a				asl 	a 							; put into bit 7
.1a5f	1d 6d 0c	ora $0c6d,x			ora 	imageAddr2High,x 			; or high address with it.
.1a62	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1a65	a9 06		lda #$06			lda 	#6
.1a67	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget 			; set sprite on.
.1a6a	ad 23 9f	lda $9f23			lda 	$9F23
.1a6d	09 0c		ora #$0c			ora 	#$0C
.1a6f	8d 23 9f	sta $9f23			sta 	$9F23
.1a72	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1a75	bd ed 0b	lda $0bed,x			lda 	imageInfo,x 				; get image info
.1a78	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1a79	0a		asl a				asl 	a
.1a7a	0a		asl a				asl 	a
.1a7b	0a		asl a				asl 	a
.1a7c	b0 02		bcs $1a80			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1a7e	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1a80					_CSNoOffset:
.1a80	8d 23 9f	sta $9f23			sta 	$9F23
.1a83	4c ab 19	jmp $19ab			jmp 	_CSCommandLoop
.1a86					SpriteSetTarget:
.1a86	0d ea 0b	ora $0bea			ora 	currSprite
.1a89	8d 20 9f	sta $9f20			sta 	$9F20
.1a8c	ad eb 0b	lda $0beb			lda 	currSprite+1
.1a8f	f0 09		beq $1a9a			beq 	_SSTNoSet
.1a91	8d 21 9f	sta $9f21			sta 	$9F21
.1a94	a9 01		lda #$01			lda 	#$01
.1a96	8d 22 9f	sta $9f22			sta 	$9F22
.1a99	60		rts				rts
.1a9a					_SSTNoSet:
.1a9a	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1a9c	20 18 15	jsr $1518		jsr	errorHandler
.1a9f					CSCheckOnOff:
.1a9f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1aa1	c8		iny				iny
.1aa2	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1aa4	18		clc				clc
.1aa5	f0 08		beq $1aaf			beq 	_CSCOExit
.1aa7	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1aa9	38		sec				sec 								; return NE if neither.
.1aaa	f0 03		beq $1aaf			beq 	_CSCOExit
.1aac	88		dey				dey 								; undo consume
.1aad	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1aaf					_CSCOExit:
.1aaf	60		rts				rts
.1ab0					CSClearSprites:
.1ab0	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1ab2	8d 22 9f	sta $9f22			sta 	$9F22
.1ab5	a9 fc		lda #$fc			lda 	#$FC
.1ab7	8d 21 9f	sta $9f21			sta 	$9F21
.1aba	a9 00		lda #$00			lda 	#0
.1abc	8d 20 9f	sta $9f20			sta 	$9F20
.1abf					_CSClear:
.1abf	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1ac1	8d 23 9f	sta $9f23			sta 	$9F23
.1ac4	ad 21 9f	lda $9f21			lda 	$9F21
.1ac7	d0 f6		bne $1abf			bne 	_CSClear
.1ac9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/spritemove.asm

.1aca					SpriteMove:
.1aca	98		tya				tya
.1acb	48		pha				pha
.1acc	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.1ace	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.1ad1	ad 23 9f	lda $9f23			lda 	$9F23
.1ad4	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.1ad5	4a		lsr a				lsr 	a
.1ad6	4a		lsr a				lsr 	a
.1ad7	4a		lsr a				lsr 	a
.1ad8	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.1ada	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.1adc	20 86 1a	jsr $1a86			jsr 	SpriteSetTarget
.1adf	20 ee 1a	jsr $1aee			jsr 	_SMWritePosition 					; write X position out.
.1ae2	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.1ae4	46 2a		lsr $2a				lsr 	temp0
.1ae6	e8		inx				inx 										; get the y position
.1ae7	20 ee 1a	jsr $1aee			jsr 	_SMWritePosition 					; and write that out.
.1aea	ca		dex				dex 										; fix X and quit.
.1aeb	68		pla				pla
.1aec	a8		tay				tay
.1aed	60		rts				rts
.1aee					_SMWritePosition:
.1aee	a5 2a		lda $2a				lda 	temp0 								; get dim size
.1af0	29 03		and #$03			and 	#3 									; in range into Y
.1af2	a8		tay				tay
.1af3	38		sec				sec
.1af4	b5 50		lda $50,x			lda 	esInt0,x
.1af6	f9 0a 1b	sbc $1b0a,y			sbc 	_SMHalfSize,y
.1af9	8d 23 9f	sta $9f23			sta 	$9F23
.1afc	ee 20 9f	inc $9f20			inc 	$9F20
.1aff	b5 58		lda $58,x			lda 	esInt1,x
.1b01	e9 00		sbc #$00			sbc 	#0
.1b03	8d 23 9f	sta $9f23			sta 	$9F23
.1b06	ee 20 9f	inc $9f20			inc 	$9F20
.1b09	60		rts				rts
.1b0a					_SMHalfSize:
>1b0a	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1b0e					Command_VLoad:
.1b0e	a9 00		lda #$00			lda 	#0 								; string which is the file name
.1b10	a2 0e		ldx #$0e		ldx	#14
.1b12	20 23 35	jsr $3523		jsr	mainHandler
.1b15	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.1b17	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1b19	95 50		sta $50,x			sta 	esInt0,x
.1b1b	a5 36		lda $36				lda 	lowMemory+1
.1b1d	95 58		sta $58,x			sta 	esInt1,x
.1b1f	a9 00		lda #$00			lda 	#0
.1b21	95 60		sta $60,x			sta 	esInt2,x
.1b23	95 68		sta $68,x			sta 	esInt3,x
.1b25	a2 0e		ldx #$0e		ldx	#14
.1b27	20 f6 14	jsr $14f6		jsr	deviceHandler
.1b2a	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1b2c	85 2a		sta $2a				sta 	temp0
.1b2e	a5 59		lda $59				lda 	esInt1+1
.1b30	85 2b		sta $2b				sta 	temp0+1
.1b32	20 ae 1b	jsr $1bae			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1b35	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1b36					Command_VPoke:
.1b36	38		sec				sec 						; one byte , CS
.1b37	b0 01		bcs $1b3a			bcs 	CmdVideoWrite
.1b39					Command_VDoke:
.1b39	18		clc				clc 						; two bytes, CC
.1b3a					CmdVideoWrite:
.1b3a	08		php				php 						; save one or two btes
.1b3b	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.1b3d	a2 0a		ldx #$0a		ldx	#10
.1b3f	20 23 35	jsr $3523		jsr	mainHandler
.1b42	a2 02		ldx #$02		ldx	#2
.1b44	20 23 35	jsr $3523		jsr	mainHandler
.1b47	a9 01		lda #$01			lda 	#1
.1b49	a2 0a		ldx #$0a		ldx	#10
.1b4b	20 23 35	jsr $3523		jsr	mainHandler
.1b4e	a2 00		ldx #$00			ldx 	#0
.1b50	20 61 1b	jsr $1b61			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1b53	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.1b55	8d 23 9f	sta $9f23			sta 	$9F23
.1b58	28		plp				plp 						; if it was Poke then exit
.1b59	b0 05		bcs $1b60			bcs 	_CVWExit
.1b5b	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.1b5d	8d 23 9f	sta $9f23			sta 	$9F23
.1b60					_CVWExit:
.1b60	60		rts				rts
.1b61					SetUpTOSVRamAddress:
.1b61	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1b63	29 fe		and #$fe			and 	#$FE
.1b65	15 68		ora $68,x			ora 	esInt3,x
.1b67	d0 14		bne $1b7d			bne 	CVWValue
.1b69	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.1b6b	8d 20 9f	sta $9f20			sta 	$9F20
.1b6e	b5 58		lda $58,x			lda 	esInt1,x
.1b70	8d 21 9f	sta $9f21			sta	 	$9F21
.1b73	b5 60		lda $60,x			lda 	esInt2,x
.1b75	29 01		and #$01			and 	#1
.1b77	09 10		ora #$10			ora 	#$10 				; step 1.
.1b79	8d 22 9f	sta $9f22			sta 	$9F22
.1b7c	60		rts				rts
.1b7d					CVWValue:
.1b7d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b7f	20 18 15	jsr $1518		jsr	errorHandler
.1b82					Command_VPeek:
.1b82	38		sec				sec 						; one byte , CS
.1b83	b0 01		bcs $1b86			bcs 	CmdVideoRead
.1b85					Command_VDeek:
.1b85	18		clc				clc 						; two bytes, CC
.1b86					CmdVideoRead:
.1b86	08		php				php 						; save action on stack.
.1b87	48		pha				pha 						; save stack position
.1b88	a2 0a		ldx #$0a		ldx	#10
.1b8a	20 23 35	jsr $3523		jsr	mainHandler
.1b8d	a2 04		ldx #$04		ldx	#4
.1b8f	20 23 35	jsr $3523		jsr	mainHandler
.1b92	68		pla				pla
.1b93	aa		tax				tax
.1b94	20 61 1b	jsr $1b61			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1b97	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.1b99	95 58		sta $58,x			sta 	esInt1,x
.1b9b	95 60		sta $60,x			sta 	esInt2,x
.1b9d	95 68		sta $68,x			sta 	esInt3,x
.1b9f	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.1ba2	95 50		sta $50,x			sta 	esInt0,x
.1ba4	28		plp				plp 						; check if DOKE (carry was clear)
.1ba5	b0 05		bcs $1bac			bcs 	_CVRExit
.1ba7	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.1baa	95 58		sta $58,x			sta 	esInt1,x
.1bac					_CVRExit:
.1bac	8a		txa				txa 						; return X position.
.1bad	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bec					compressMode:
>0bec							.fill 	1
.0bed					imageInfo:
>0bed							.fill 	X16MaxImages
.0c2d					imageAddr2Low:
>0c2d							.fill  	X16MaxImages
.0c6d					imageAddr2High:
>0c6d							.fill  	X16MaxImages
.1bae					LoadVRAMFile:
.1bae	8a		txa				txa
.1baf	48		pha				pha
.1bb0	98		tya				tya
.1bb1	48		pha				pha
.1bb2					_LVRLoop:
.1bb2	20 8e 1c	jsr $1c8e			jsr 	LVFGet 						; get the next (never access direct)
.1bb5	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1bb7	f0 42		beq $1bfb			beq 	_LVRExit
.1bb9	b0 5c		bcs $1c17			bcs 	_LVRLoad 					; load data in ?
.1bbb	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1bbd	90 11		bcc $1bd0			bcc 	_LVRSetAddress
.1bbf	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.1bc1	f0 3d		beq $1c00			beq 	_LVRSetPalette
.1bc3	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1bc5	90 2d		bcc $1bf4			bcc 	_LVRSetCompress
.1bc7	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1bc9	90 60		bcc $1c2b			bcc 	_LVRSetSprite
.1bcb	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1bcd	20 18 15	jsr $1518		jsr	errorHandler
.1bd0					_LVRSetAddress:
.1bd0	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1bd2	20 8e 1c	jsr $1c8e			jsr 	LVFGet
.1bd5	85 2c		sta $2c				sta 	temp1
.1bd7	a9 00		lda #$00			lda 	#0
.1bd9	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1bdb	66 2c		ror $2c				ror 	temp1
.1bdd	6a		ror a				ror		a
.1bde	46 2d		lsr $2d				lsr 	temp1+1
.1be0	66 2c		ror $2c				ror 	temp1
.1be2	6a		ror a				ror		a
.1be3	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1be6	a5 2c		lda $2c				lda 	temp1
.1be8	8d 21 9f	sta $9f21			sta 	$9F21
.1beb	a5 2d		lda $2d				lda 	temp1+1
.1bed	09 10		ora #$10			ora 	#$10
.1bef	8d 22 9f	sta $9f22			sta 	$9F22
.1bf2	d0 be		bne $1bb2			bne 	_LVRLoop
.1bf4					_LVRSetCompress:
.1bf4	29 07		and #$07			and 	#7
.1bf6	8d ec 0b	sta $0bec			sta 	compressMode
.1bf9	10 b7		bpl $1bb2			bpl 	_LVRLoop
.1bfb					_LVRExit:
.1bfb	68		pla				pla
.1bfc	a8		tay				tay
.1bfd	68		pla				pla
.1bfe	aa		tax				tax
.1bff	60		rts				rts
.1c00					_LVRSetPalette:
.1c00	20 8e 1c	jsr $1c8e			jsr 	LVFGet 						; get palette id.
.1c03	20 77 19	jsr $1977			jsr 	PointToPaletteA 			; in palette.asm
.1c06	20 8e 1c	jsr $1c8e			jsr 	LVFGet 						; copy 12 bit palette data in.
.1c09	8d 23 9f	sta $9f23			sta 	$9F23
.1c0c	20 8e 1c	jsr $1c8e			jsr 	LVFGet
.1c0f	29 0f		and #$0f			and 	#$0F
.1c11	8d 23 9f	sta $9f23			sta 	$9F23
.1c14	4c b2 1b	jmp $1bb2			jmp 	_LVRLoop
.1c17					_LVRLoad:
.1c17	ae ec 0b	ldx $0bec			ldx 	compressMode
.1c1a	d0 55		bne $1c71			bne 	_LVRNotMode0
.1c1c	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1c1e					_LVRLCopyX:
.1c1e	aa		tax				tax
.1c1f					_LVRLCopy:
.1c1f	20 8e 1c	jsr $1c8e			jsr 	LVFGet 						; write to data.
.1c22	8d 23 9f	sta $9f23			sta 	$9F23
.1c25	ca		dex				dex
.1c26	d0 f7		bne $1c1f			bne 	_LVRLCopy
.1c28	4c b2 1b	jmp $1bb2			jmp 	_LVRLoop
.1c2b					_LVRSetSprite:
.1c2b	48		pha				pha 								; save on stack
.1c2c	20 8e 1c	jsr $1c8e			jsr 	LVFGet 						; get the sprite number into X
.1c2f	aa		tax				tax
.1c30	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1c32	b0 38		bcs $1c6c			bcs 	_LVRSSValue
.1c34	68		pla				pla 								; restore the data held in the first byte
.1c35	9d ed 0b	sta $0bed,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1c38					_LVRAlignVRAM:
.1c38	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1c3b	29 1f		and #$1f			and 	#$1F
.1c3d	f0 07		beq $1c46			beq 	_LVRAligned
.1c3f	a9 00		lda #$00			lda 	#$00
.1c41	8d 23 9f	sta $9f23			sta 	$9F23
.1c44	f0 f2		beq $1c38			beq 	_LVRAlignVRAM
.1c46					_LVRAligned:
.1c46	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1c49	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1c4a	ad 21 9f	lda $9f21			lda 	$9F21
.1c4d	6a		ror a				ror 	a
.1c4e	85 2d		sta $2d				sta 	temp1+1
.1c50	ad 20 9f	lda $9f20			lda 	$9F20
.1c53	6a		ror a				ror 	a
.1c54	85 2c		sta $2c				sta 	temp1
.1c56	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1c58					_LVRShift:
.1c58	46 2d		lsr $2d				lsr 	temp1+1
.1c5a	66 2c		ror $2c				ror 	temp1
.1c5c	88		dey				dey
.1c5d	d0 f9		bne $1c58			bne 	_LVRShift
.1c5f	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1c61	9d 6d 0c	sta $0c6d,x			sta 	imageAddr2High,x
.1c64	a5 2c		lda $2c				lda 	temp1
.1c66	9d 2d 0c	sta $0c2d,x			sta 	imageAddr2Low,x
.1c69	4c b2 1b	jmp $1bb2			jmp 	_LVRLoop
.1c6c					_LVRSSValue:
.1c6c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c6e	20 18 15	jsr $1518		jsr	errorHandler
.1c71					_LVRNotMode0:
.1c71	e0 01		cpx #$01			cpx 	#1
.1c73	d0 15		bne $1c8a			bne 	_LVRNotMode1
.1c75	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.1c77	c9 40		cmp #$40			cmp 	#$40
.1c79	90 a3		bcc $1c1e			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.1c7b					_LVRRLEGroup:
.1c7b	29 3f		and #$3f			and 	#$3F
.1c7d	aa		tax				tax
.1c7e	20 8e 1c	jsr $1c8e			jsr 	LVFGet
.1c81					_LVRLEGroupLoop:
.1c81	8d 23 9f	sta $9f23			sta 	$9F23
.1c84	ca		dex				dex
.1c85	d0 fa		bne $1c81			bne 	_LVRLEGroupLoop
.1c87	4c b2 1b	jmp $1bb2			jmp 	_LVRLoop
.1c8a					_LVRNotMode1:
>1c8a	db						.byte 	$DB
.1c8b	4c 8a 1c	jmp $1c8a			jmp 	_LVRNotMode1
.1c8e	84 32		sty $32		LVFGet:	sty 	tempShort
.1c90	a0 00		ldy #$00			ldy 	#0
.1c92	b1 2a		lda ($2a),y			lda 	(temp0),y
.1c94	a4 32		ldy $32				ldy	 	tempShort
.1c96	e6 2a		inc $2a				inc 	temp0
.1c98	d0 02		bne $1c9c			bne 	_LVFGExit
.1c9a	e6 2b		inc $2b				inc 	temp0+1
.1c9c					_LVFGExit:
.1c9c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1c9d					section_end_extension:
.1c9d					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1c9d					floatingpointHandler:
.1c9d	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1c9f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1ca2					section_end_floatingpoint:
.1ca2					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1ca2					ColdStartEntry:
.1ca2	a2 ff		ldx #$ff			ldx 	#$FF
.1ca4	9a		txs				txs
.1ca5	20 2e 1d	jsr $1d2e			jsr 	ForceStandardMode
.1ca8	a2 04		ldx #$04		ldx	#4
.1caa	20 f6 14	jsr $14f6		jsr	deviceHandler
.1cad	a0 ff		ldy #$ff			ldy 	#255
.1caf					_CSBanner:
.1caf	c8		iny				iny
.1cb0	b9 d6 1c	lda $1cd6,y			lda 	Intro,y
.1cb3	f0 14		beq $1cc9			beq 	_CSStart
.1cb5	c9 08		cmp #$08			cmp 	#8
.1cb7	90 08		bcc $1cc1			bcc 	_CSInk
.1cb9	a2 16		ldx #$16		ldx	#22
.1cbb	20 f6 14	jsr $14f6		jsr	deviceHandler
.1cbe	4c af 1c	jmp $1caf			jmp 	_CSBanner
.1cc1					_CSInk:
.1cc1	a2 08		ldx #$08		ldx	#8
.1cc3	20 f6 14	jsr $14f6		jsr	deviceHandler
.1cc6	4c af 1c	jmp $1caf			jmp 	_CSBanner
.1cc9					_CSStart:
.1cc9	a2 16		ldx #$16		ldx	#22
.1ccb	20 23 35	jsr $3523		jsr	mainHandler
.1cce	a2 06		ldx #$06		ldx	#6
.1cd0	20 23 35	jsr $3523		jsr	mainHandler
.1cd3	4c ee 1d	jmp $1dee			jmp 	WarmStartEntry
>1cd6	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1cde	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1cee	20 2a 2a 2a 0d 0d
>1cf4	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1cfc	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1d0c	32 30 32 31 0d 0d
>1d12	02 42 61 73 69 63 20				.text 	2,"Basic "
>1d19	30 2e 31 38					.text "0.18"
>1d1d	20 28						.text 	" ("
>1d1f	32 36 2d 4d 61 72 2d 32				.text "26-Mar-2021"
>1d27	30 32 31
>1d2a	29 0d 0d 00					.text 	")",13,13,0
.1d2e					ForceStandardMode:
.1d2e	a9 fe		lda #$fe			lda 	#$FE
.1d30	20 60 18	jsr $1860		jsr	extensionHandler
.1d33	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1d34					DeleteLine:
.1d34	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1d37	85 2a		sta $2a				sta 	temp0
.1d39	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d3c	85 2b		sta $2b				sta 	temp0+1
.1d3e	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1d40	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1d42	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1d44	d0 07		bne $1d4d			bne 	_DLNext
.1d46	c8		iny				iny
.1d47	a5 58		lda $58				lda 	esInt1
.1d49	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1d4b	f0 06		beq $1d53			beq 	_DLFound
.1d4d	20 71 1d	jsr $1d71	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1d50	d0 ec		bne $1d3e			bne 	_DLLoop
.1d52	60		rts				rts
.1d53					_DLFound:
.1d53	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1d55	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d57	a8		tay				tay 								; so we copy from (temp0),y
.1d58	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1d5a					_DLCopyDown:
.1d5a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1d5c	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1d5e	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1d60	d0 02		bne $1d64			bne 	_DLNoCarry
.1d62	e6 2b		inc $2b				inc 	temp0+1
.1d64					_DLNoCarry:
.1d64	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1d66	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1d68	d0 f0		bne $1d5a			bne 	_DLCopyDown
.1d6a	a5 2b		lda $2b				lda 	temp0+1
.1d6c	c5 36		cmp $36				cmp 	lowMemory+1
.1d6e	d0 ea		bne $1d5a			bne 	_DLCopyDown
.1d70	60		rts				rts
.1d71					IAdvanceTemp0:
.1d71	84 32		sty $32				sty 	tempShort
.1d73	18		clc				clc
.1d74	a0 00		ldy #$00			ldy 	#0 							; get offset
.1d76	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1d78	65 2a		adc $2a				adc 	temp0
.1d7a	85 2a		sta $2a				sta 	temp0
.1d7c	90 02		bcc $1d80			bcc 	_IATNoCarry
.1d7e	e6 2b		inc $2b				inc 	temp0+1
.1d80					_IATNoCarry:
.1d80	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d82	a4 32		ldy $32				ldy 	tempShort
.1d84	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1d86	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1d87					InsertLine:
.1d87	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1d8a	85 2a		sta $2a				sta 	temp0
.1d8c	ad c9 0a	lda $0ac9			lda 	basePage+1
.1d8f	85 2b		sta $2b				sta 	temp0+1
.1d91					_ILLoop:
.1d91	a0 01		ldy #$01			ldy 	#1
.1d93	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d95	c5 50		cmp $50				cmp 	esInt0
.1d97	c8		iny				iny
.1d98	b1 2a		lda ($2a),y			lda 	(temp0),y
.1d9a	e5 58		sbc $58				sbc 	esInt1
.1d9c	b0 05		bcs $1da3			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1d9e	20 71 1d	jsr $1d71			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1da1	d0 ee		bne $1d91			bne 	_ILLoop
.1da3					_ILFound:
.1da3	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1da5	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1da7	a5 36		lda $36				lda 	lowMemory+1
.1da9	85 2d		sta $2d				sta 	temp1+1
.1dab	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1dae	18		clc				clc 								; add 3 for the line number and offset.
.1daf	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1db1	a8		tay				tay
.1db2	a2 00		ldx #$00			ldx 	#0
.1db4	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1db6	91 2c		sta ($2c),y			sta 	(temp1),y
.1db8	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1dba	c5 2a		cmp $2a				cmp 	temp0
.1dbc	d0 06		bne $1dc4			bne 	_ILMNext
.1dbe	a5 2d		lda $2d				lda 	temp1+1
.1dc0	c5 2b		cmp $2b				cmp 	temp0+1
.1dc2	f0 0b		beq $1dcf			beq 	_ILMCopy
.1dc4					_ILMNext:
.1dc4	a5 2c		lda $2c				lda 	temp1
.1dc6	d0 02		bne $1dca			bne 	_ILNoBorrow
.1dc8	c6 2d		dec $2d				dec 	temp1+1
.1dca					_ILNoBorrow:
.1dca	c6 2c		dec $2c				dec 	temp1
.1dcc	4c b4 1d	jmp $1db4			jmp 	_ILMove 					; and go round again
.1dcf					_ILMCopy:
.1dcf	98		tya				tya 								; Y is the offset of the new line.
.1dd0	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1dd2	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1dd4	a5 50		lda $50				lda 	esInt0
.1dd6	91 2a		sta ($2a),y			sta 	(temp0),y
.1dd8	c8		iny				iny
.1dd9	a5 58		lda $58				lda 	esInt1
.1ddb	91 2a		sta ($2a),y			sta 	(temp0),y
.1ddd	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1ddf					_ILMCopy2:
.1ddf	b1 28		lda ($28),y			lda 	(codePtr),y
.1de1	c8		iny				iny
.1de2	c8		iny				iny
.1de3	c8		iny				iny
.1de4	91 2a		sta ($2a),y			sta 	(temp0),y
.1de6	88		dey				dey
.1de7	88		dey				dey
.1de8	cc ea 0d	cpy $0dea			cpy 	tokenBufferIndex
.1deb	d0 f2		bne $1ddf			bne 	_ILMCopy2
.1ded	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1dee					WarmStartEntry:
.1dee	a2 ff		ldx #$ff			ldx 	#$FF
.1df0	9a		txs				txs
.1df1	20 2e 1d	jsr $1d2e			jsr 	ForceStandardMode
.1df4	a9 02		lda #$02			lda 	#2							; green text.
.1df6	a2 08		ldx #$08		ldx	#8
.1df8	20 f6 14	jsr $14f6		jsr	deviceHandler
.1dfb	a2 0c		ldx #$0c		ldx	#12
.1dfd	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e00	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1e02	85 28		sta $28				sta 	codePtr
.1e04	a5 2b		lda $2b				lda 	temp0+1
.1e06	85 29		sta $29				sta 	codePtr+1
.1e08	a2 06		ldx #$06		ldx	#6
.1e0a	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e0d	a2 08		ldx #$08		ldx	#8
.1e0f	20 06 40	jsr $4006		jsr	tokeniserHandler
.1e12	c9 00		cmp #$00			cmp 	#0
.1e14	f0 25		beq $1e3b			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1e16	a9 e7		lda #$e7			lda 	#(tokenHeader) & $FF
.1e18	85 28		sta $28				sta 	codePtr
.1e1a	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1e1c	85 29		sta $29				sta 	1+(codePtr)
.1e1e	ad ea 0c	lda $0cea			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1e21	c9 80		cmp #$80			cmp 	#$80
.1e23	f0 c9		beq $1dee			beq 	WarmStartEntry
.1e25	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1e27	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1e29	f0 15		beq $1e40			beq 	HasLineNumber
.1e2b	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1e2d	8d e7 0c	sta $0ce7			sta 	tokenHeader 				; fake program line.
.1e30	8d e8 0c	sta $0ce8			sta 	tokenHeader+1
.1e33	8d e9 0c	sta $0ce9			sta 	tokenHeader+2
.1e36	a2 18		ldx #$18		ldx	#24
.1e38	20 23 35	jsr $3523		jsr	mainHandler
.1e3b					WSEError:
.1e3b	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1e3d	20 18 15	jsr $1518		jsr	errorHandler
.1e40					HasLineNumber:
.1e40	a0 03		ldy #$03			ldy 	#3 							; get line number
.1e42	a9 00		lda #$00			lda 	#0
.1e44	a2 0a		ldx #$0a		ldx	#10
.1e46	20 23 35	jsr $3523		jsr	mainHandler
.1e49	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1e4b	05 68		ora $68				ora 	esInt3
.1e4d	d0 ec		bne $1e3b			bne 	WSEError
.1e4f	98		tya				tya 								; make codePtr point to code after the line number.
.1e50	18		clc				clc 								; by skipping over the tokenised number.
.1e51	65 28		adc $28				adc 	codePtr
.1e53	85 28		sta $28				sta 	codePtr
.1e55	90 02		bcc $1e59			bcc		_HLNNoCarry
.1e57	e6 29		inc $29				inc 	codePtr+1
.1e59					_HLNNoCarry:
.1e59	98		tya				tya 								; subtract that offset from the code buffer index
.1e5a	38		sec				sec
.1e5b	49 ff		eor #$ff			eor 	#$FF
.1e5d	6d ea 0d	adc $0dea			adc 	tokenBufferIndex
.1e60	18		clc				clc 								; add space allowing for header & $80 trailer
.1e61	69 04		adc #$04			adc 	#4
.1e63	8d ea 0d	sta $0dea			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1e66	20 34 1d	jsr $1d34			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1e69					_HLNNoDelete:
.1e69	ad ea 0d	lda $0dea			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1e6c	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1e6e	f0 0c		beq $1e7c			beq 	_HLMEditDone
.1e70	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1e72	18		clc				clc 								; workspace (1k)
.1e73	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1e75	c5 34		cmp $34				cmp 	highMemory+1
.1e77	b0 0b		bcs $1e84			bcs 	_HLMMemory 					; nope, won't allowit.
.1e79	20 87 1d	jsr $1d87			jsr 	InsertLine 					; insert the line in
.1e7c					_HLMEditDone:
.1e7c	a2 06		ldx #$06		ldx	#6
.1e7e	20 23 35	jsr $3523		jsr	mainHandler
.1e81	4c ee 1d	jmp $1dee			jmp 	WarmStartEntry
.1e84					_HLMMemory:
.1e84	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1e86	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1e89					interactionHandler:
.1e89	7c 8c 1e	jmp ($1e8c,x)			jmp 	(interactionVectors,x)
.1e8c					interactionVectors:
>1e8c	92 1e					.word _DummyControlHandler ; index 0
>1e8e	a2 1c					.word ColdStartEntry       ; index 2
>1e90	ee 1d					.word WarmStartEntry       ; index 4
.1e92					_DummyControlHandler:
.1e92	60		rts			rts

;******  Return to file: basic.asm

.1e93					section_end_interaction:
.1e93					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cad					dataPtr:
>0cad							.fill 	2
.0caf					dataIndex:
>0caf							.fill 	1
.1e93					CommandRead:
.1e93	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1e95	20 d6 2d	jsr $2dd6			jsr 	EvaluateReference
.1e98	20 d9 1e	jsr $1ed9			jsr 	SwapDPCP 					; use the data pointer.
.1e9b	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1e9d	c8		iny				iny
.1e9e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1ea0	f0 07		beq $1ea9			beq 	_CRInData
.1ea2	88		dey				dey
.1ea3	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1ea5	aa		tax				tax
.1ea6	20 da 25	jsr $25da			jsr 	ScanForward
.1ea9					_CRInData:
.1ea9	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1eab	20 7e 2d	jsr $2d7e			jsr 	Evaluate
.1eae	ca		dex				dex 								; and write the value.
.1eaf	20 2d 21	jsr $212d			jsr 	WriteValue
.1eb2	20 d9 1e	jsr $1ed9			jsr 	SwapDPCP 					; get the code pointer back.
.1eb5	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1eb7	c8		iny				iny
.1eb8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1eba	f0 d7		beq $1e93			beq 	CommandRead
.1ebc	88		dey				dey
.1ebd	60		rts				rts
.1ebe					CommandData:
.1ebe	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1ec0	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1ec2	20 da 25	jsr $25da			jsr 	ScanForward
.1ec5	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1ec6	60		rts				rts
.1ec7					CommandRestore:
.1ec7	ad c8 0a	lda $0ac8			lda 	basePage
.1eca	8d ad 0c	sta $0cad			sta 	dataPtr
.1ecd	ad c9 0a	lda $0ac9			lda 	basePage+1
.1ed0	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1ed3	a9 03		lda #$03			lda 	#3
.1ed5	8d af 0c	sta $0caf			sta 	dataIndex
.1ed8	60		rts				rts
.1ed9					SwapDPCP:
.1ed9	8a		txa				txa
.1eda	48		pha				pha
.1edb	98		tya				tya 								; swap Y, DataIndex
.1edc	ac af 0c	ldy $0caf			ldy 	DataIndex
.1edf	8d af 0c	sta $0caf			sta 	DataIndex
.1ee2	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1ee4	ae ad 0c	ldx $0cad			ldx 	dataptr
.1ee7	8d ad 0c	sta $0cad			sta 	dataPtr
.1eea	86 28		stx $28				stx 	codePtr
.1eec	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1eee	ae ae 0c	ldx $0cae			ldx 	dataptr+1
.1ef1	8d ae 0c	sta $0cae			sta 	dataPtr+1
.1ef4	86 29		stx $29				stx 	codePtr+1
.1ef6	68		pla				pla
.1ef7	aa		tax				tax
.1ef8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1ef9					CommandGOSUB:
.1ef9	20 9b 2d	jsr $2d9b			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1efc	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1efe	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1f00	20 d0 34	jsr $34d0			jsr 	RSClaim
.1f03	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1f05	20 fc 34	jsr $34fc			jsr 	RSSavePosition
.1f08	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1f0a	f0 1b		beq $1f27			beq 	GotoTOS 					; and do a GOTO there.
.1f0c					CommandRETURN:
.1f0c	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1f0e	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1f10	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1f12	f0 05		beq $1f19			beq 	_isok
.1f14	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1f16	20 18 15	jsr $1518		jsr	errorHandler
.1f19					_isok:
.1f19	a9 01		lda #$01			lda 	#1
.1f1b	20 0f 35	jsr $350f			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1f1e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1f20	20 f2 34	jsr $34f2			jsr 	RSFree
.1f23	60		rts				rts
.1f24					CommandGOTO:
.1f24	20 9b 2d	jsr $2d9b			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1f27					GotoTOS:
.1f27	20 be 28	jsr $28be			jsr 	ResetCodeAddress 			; simple search.
.1f2a					_GotoSearch:
.1f2a	a0 00		ldy #$00			ldy 	#0 							; get offset
.1f2c	b1 28		lda ($28),y			lda 	(codePtr),y
.1f2e	f0 21		beq $1f51			beq 	_GotoError 					; not found.
.1f30	c8		iny				iny									; check LSB match
.1f31	b1 28		lda ($28),y			lda 	(codePtr),y
.1f33	d5 50		cmp $50,x			cmp 	esInt0,x
.1f35	d0 07		bne $1f3e			bne 	_GotoNext
.1f37	c8		iny				iny
.1f38	b1 28		lda ($28),y			lda 	(codePtr),y
.1f3a	d5 58		cmp $58,x			cmp 	esInt1,x
.1f3c	f0 10		beq $1f4e			beq 	_GotoFound
.1f3e					_GotoNext:
.1f3e	a0 00		ldy #$00			ldy 	#0 							; go next line
.1f40	b1 28		lda ($28),y			lda 	(codePtr),y
.1f42	18		clc				clc
.1f43	65 28		adc $28				adc 	codePtr
.1f45	85 28		sta $28				sta 	codePtr
.1f47	90 e1		bcc $1f2a			bcc 	_GotoSearch
.1f49	e6 29		inc $29				inc 	codePtr+1
.1f4b	4c 2a 1f	jmp $1f2a			jmp 	_GotoSearch
.1f4e					_GotoFound:
.1f4e	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1f50	60		rts				rts
.1f51					_GotoError:
.1f51	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1f53	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cb0					InputBuffer:
>0cb0							.fill 	MaxInputSize+1
.1f56					Command_Input:
.1f56	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1f58	c8		iny				iny
.1f59	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1f5b	f0 f9		beq $1f56			beq 	Command_Input
.1f5d	88		dey				dey 							; undo consume
.1f5e	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1f60	f0 54		beq $1fb6			beq 	_CIExit 				; : or EOL, exit
.1f62	c9 80		cmp #$80			cmp 	#TOK_EOL
.1f64	f0 50		beq $1fb6			beq 	_CIExit
.1f66	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1f68	90 12		bcc $1f7c			bcc 	_CIVariable
.1f6a	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1f6c	d0 43		bne $1fb1			bne 	_CISyntax
.1f6e	a2 00		ldx #$00			ldx 	#0
.1f70	20 92 2d	jsr $2d92			jsr 	EvaluateString 			; evaluate and print string
.1f73	20 8f 21	jsr $218f			jsr 	TOSToTemp0
.1f76	20 85 20	jsr $2085			jsr 	PrintString
.1f79	4c 56 1f	jmp $1f56			jmp 	Command_Input
.1f7c					_CIVariable:
.1f7c	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1f7e	20 d6 2d	jsr $2dd6			jsr 	EvaluateReference  		; this is where its going
.1f81					_CIRetry:
.1f81	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1f83	a2 14		ldx #$14		ldx	#20
.1f85	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f88	98		tya				tya
.1f89	48		pha				pha
.1f8a	20 ca 1f	jsr $1fca			jsr 	InputString 			; input a string (manually)
.1f8d	a2 01		ldx #$01			ldx 	#1
.1f8f	20 b7 1f	jsr $1fb7			jsr 	BufferToStackX 			; make stack,x ref input string.
.1f92	a5 48		lda $48				lda 	esType 					; if target type numeric
.1f94	29 40		and #$40			and 	#$40 					; then convert to number
.1f96	d0 11		bne $1fa9			bne 	_CIWrite
.1f98	a2 01		ldx #$01			ldx 	#1
.1f9a	20 8f 21	jsr $218f			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1f9d	a9 0a		lda #$0a			lda 	#10
.1f9f	20 a3 32	jsr $32a3			jsr 	MInt32FromString 		; convert it back from a string.
.1fa2	68		pla				pla
.1fa3	a8		tay				tay
.1fa4	b0 03		bcs $1fa9			bcs 	_CIWrite 				; successfully converted.
.1fa6	18		clc				clc 							; default fail FP conversion
.1fa7	90 d8		bcc $1f81			bcc		_CIRetry				; failed, try again.
.1fa9					_CIWrite:
.1fa9	a2 00		ldx #$00			ldx 	#0
.1fab	20 2d 21	jsr $212d			jsr 	WriteValue
.1fae	4c 56 1f	jmp $1f56			jmp 	Command_Input
.1fb1					_CISyntax:
.1fb1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1fb3	20 18 15	jsr $1518		jsr	errorHandler
.1fb6					_CIExit:
.1fb6	60		rts				rts
.1fb7					BufferToStackX:
.1fb7	a9 b0		lda #$b0			lda 	#InputBuffer & $FF
.1fb9	95 50		sta $50,x			sta 	esInt0,x
.1fbb	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.1fbd	95 58		sta $58,x			sta 	esInt1,x
.1fbf	a9 00		lda #$00			lda 	#0
.1fc1	95 60		sta $60,x			sta 	esInt2,x
.1fc3	95 68		sta $68,x			sta 	esInt3,x
.1fc5	a9 40		lda #$40			lda 	#$40
.1fc7	95 48		sta $48,x			sta 	esType,x
.1fc9	60		rts				rts
.1fca					InputString:
.1fca	a9 00		lda #$00			lda 	#0
.1fcc	8d b0 0c	sta $0cb0			sta 	InputBuffer
.1fcf					_InputLoop:
.1fcf	a2 02		ldx #$02		ldx	#2
.1fd1	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fd4	a2 0a		ldx #$0a		ldx	#10
.1fd6	20 f6 14	jsr $14f6		jsr	deviceHandler
.1fd9	c9 00		cmp #$00			cmp 	#0
.1fdb	f0 f2		beq $1fcf			beq 	_InputLoop
.1fdd	c9 08		cmp #$08			cmp 	#8
.1fdf	f0 19		beq $1ffa			beq 	_InputBackspace
.1fe1	c9 0d		cmp #$0d			cmp 	#13
.1fe3	f0 21		beq $2006			beq 	_InputExit
.1fe5	ae b0 0c	ldx $0cb0			ldx 	InputBuffer
.1fe8	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1fea	f0 e3		beq $1fcf			beq 	_InputLoop
.1fec	9d b1 0c	sta $0cb1,x			sta 	InputBuffer+1,x 		; write char
.1fef	ee b0 0c	inc $0cb0			inc 	InputBuffer 			; advance count.
.1ff2					_InputPrintLoop:
.1ff2	a2 14		ldx #$14		ldx	#20
.1ff4	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ff7	4c cf 1f	jmp $1fcf			jmp	 	_InputLoop
.1ffa					_InputBackspace:
.1ffa	ad b0 0c	lda $0cb0			lda 	InputBuffer 			; at start
.1ffd	f0 d0		beq $1fcf			beq 	_InputLoop
.1fff	ce b0 0c	dec $0cb0			dec 	InputBuffer
.2002	a9 08		lda #$08			lda 	#8
.2004	d0 ec		bne $1ff2			bne 	_InputPrintLoop
.2006					_InputExit:
.2006	a2 06		ldx #$06		ldx	#6
.2008	20 f6 14	jsr $14f6		jsr	deviceHandler
.200b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cd1					lastPrintToken:
>0cd1							.fill 	1
.200c					Command_Print:
.200c	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.200e	8d d1 0c	sta $0cd1			sta 	lastPrintToken
.2011	88		dey				dey
.2012					_PrintLoopSkip:
.2012	c8		iny				iny
.2013					_PrintLoop:
.2013	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.2015	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.2017	f0 5b		beq $2074			beq 	_PrintExit
.2019	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.201b	f0 57		beq $2074			beq 	_PrintExit
.201d	8d d1 0c	sta $0cd1			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.2020	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.2022	f0 ee		beq $2012			beq 	_PrintLoopSkip
.2024	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.2026	f0 3c		beq $2064			beq	 	_PrintNewLine
.2028	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.202a	f0 40		beq $206c			beq 	_PrintTab
.202c	20 7c 2d	jsr $2d7c			jsr 	EvaluateRoot 				; evaluate something at the root
.202f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2031	85 2a		sta $2a				sta 	temp0
.2033	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2035	85 2b		sta $2b				sta 	1+(temp0)
.2037	a5 48		lda $48				lda 	esType 						; get type
.2039	f0 15		beq $2050			beq		_PrintInteger
.203b	4a		lsr a				lsr 	a 							; check for floating point
.203c	b0 08		bcs $2046			bcs 	_PrintFloat
.203e					_PrintString:
.203e	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2040	20 8f 21	jsr $218f			jsr 	TOSToTemp0
.2043	4c 5e 20	jmp $205e			jmp 	_PrintTemp0 				; print no leading space.
.2046					_PrintFloat:
.2046	a9 00		lda #$00			lda 	#0 							; stack level.
.2048	a2 16		ldx #$16		ldx	#22
.204a	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.204d	4c 57 20	jmp $2057			jmp 	_PrintSpaceTemp0
.2050					_PrintInteger:
.2050	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2052	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2054	20 8b 33	jsr $338b			jsr 	MInt32ToString				; convert to text
.2057					_PrintSpaceTemp0:
.2057	a9 20		lda #$20			lda 	#32
.2059	a2 14		ldx #$14		ldx	#20
.205b	20 f6 14	jsr $14f6		jsr	deviceHandler
.205e					_PrintTemp0:
.205e	20 85 20	jsr $2085			jsr 	PrintString
.2061	4c 13 20	jmp $2013			jmp 	_PrintLoop
.2064					_PrintNewLine:
.2064	a2 06		ldx #$06		ldx	#6
.2066	20 f6 14	jsr $14f6		jsr	deviceHandler
.2069	4c 12 20	jmp $2012			jmp 	_PrintLoopSkip
.206c					_PrintTab:
.206c	a2 1a		ldx #$1a		ldx	#26
.206e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2071	4c 12 20	jmp $2012			jmp 	_PrintLoopSkip
.2074					_PrintExit:
.2074	ad d1 0c	lda $0cd1			lda		lastPrintToken 				; check last token
.2077	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.2079	f0 09		beq $2084			beq 	_PrintExit2
.207b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.207d	f0 05		beq $2084			beq 	_PrintExit2
.207f	a2 06		ldx #$06		ldx	#6
.2081	20 f6 14	jsr $14f6		jsr	deviceHandler
.2084					_PrintExit2:
.2084	60		rts				rts
.2085					PrintString:
.2085	8a		txa				txa
.2086	48		pha				pha
.2087	98		tya				tya
.2088	48		pha				pha
.2089	a0 00		ldy #$00			ldy 	#0							; get length
.208b	b1 2a		lda ($2a),y			lda 	(temp0),y
.208d	aa		tax				tax 								; into X
.208e	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2090	f0 10		beq $20a2			beq 	_PSExit
.2092	ca		dex				dex
.2093	8a		txa				txa
.2094	48		pha				pha
.2095	c8		iny				iny
.2096	b1 2a		lda ($2a),y			lda 	(temp0),y
.2098	a2 14		ldx #$14		ldx	#20
.209a	20 f6 14	jsr $14f6		jsr	deviceHandler
.209d	68		pla				pla
.209e	aa		tax				tax
.209f	4c 8e 20	jmp $208e			jmp 	_PSLoop
.20a2					_PSExit:
.20a2	68		pla				pla
.20a3	a8		tay				tay
.20a4	68		pla				pla
.20a5	aa		tax				tax
.20a6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.20a7					Command_CLS:
.20a7	a2 04		ldx #$04		ldx	#4
.20a9	20 f6 14	jsr $14f6		jsr	deviceHandler
.20ac	60		rts				rts
.20ad					Command_Ink:
.20ad	a2 00		ldx #$00			ldx 	#0
.20af	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger
.20b2	a2 08		ldx #$08		ldx	#8
.20b4	20 f6 14	jsr $14f6		jsr	deviceHandler
.20b7	60		rts				rts
.20b8					Command_Paper:
.20b8	a2 00		ldx #$00			ldx 	#0
.20ba	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger
.20bd	a2 12		ldx #$12		ldx	#18
.20bf	20 f6 14	jsr $14f6		jsr	deviceHandler
.20c2	60		rts				rts
.20c3					Command_Locate:
.20c3	a2 00		ldx #$00			ldx 	#0
.20c5	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger
.20c8	20 b5 34	jsr $34b5			jsr 	CheckComma
.20cb	e8		inx				inx
.20cc	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger
.20cf	98		tya				tya
.20d0	48		pha				pha
.20d1	a4 51		ldy $51				ldy 	esInt0+1
.20d3	a5 50		lda $50				lda 	esInt0
.20d5	a2 10		ldx #$10		ldx	#16
.20d7	20 f6 14	jsr $14f6		jsr	deviceHandler
.20da	68		pla				pla
.20db	a8		tay				tay
.20dc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.20dd					Command_VDU:
.20dd	20 9b 2d	jsr $2d9b			jsr 	EvaluateRootInteger 			; get integer at root.
.20e0	a5 50		lda $50				lda 	esInt0
.20e2	a2 14		ldx #$14		ldx	#20
.20e4	20 f6 14	jsr $14f6		jsr	deviceHandler
.20e7					_CVNext:
.20e7	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.20e9	c8		iny				iny
.20ea	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.20ec	f0 ef		beq $20dd			beq 	Command_VDU
.20ee	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.20f0	d0 0a		bne $20fc			bne 	_CVExit
.20f2	a5 58		lda $58				lda 	esInt1
.20f4	a2 14		ldx #$14		ldx	#20
.20f6	20 f6 14	jsr $14f6		jsr	deviceHandler
.20f9	4c e7 20	jmp $20e7			jmp 	_CVNext
.20fc	88		dey		_CVExit:dey
.20fd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.20fe					Command_Assert:
.20fe	20 9b 2d	jsr $2d9b			jsr 	EvaluateRootInteger 		; what is being asserted.
.2101	20 5c 34	jsr $345c			jsr 	MInt32Zero 					; is it true ?
.2104	f0 01		beq $2107			beq 	_CAError
.2106	60		rts				rts
.2107					_CAError:
.2107	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.2109	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.210c					Command_Dim:
.210c	a2 04		ldx #$04		ldx	#4
.210e	20 d7 43	jsr $43d7		jsr	variableHandler
.2111	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.2113	c8		iny				iny
.2114	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.2116	f0 f4		beq $210c			beq 	Command_Dim
.2118	88		dey				dey 								; unpick get
.2119	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.211a					CommandLet:
.211a	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.211c	20 d6 2d	jsr $2dd6			jsr 	EvaluateReference
.211f	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.2121	20 9d 34	jsr $349d			jsr 	CheckToken
.2124	e8		inx				inx 								; do RHS
.2125	20 7e 2d	jsr $2d7e			jsr 	Evaluate 					; evaluate and dereference
.2128	ca		dex				dex
.2129	20 2d 21	jsr $212d			jsr 	WriteValue 					; write it out
.212c	60		rts				rts
.212d					WriteValue:
.212d	98		tya				tya
.212e	48		pha				pha
.212f	20 8f 21	jsr $218f			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.2132	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.2134	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.2136	29 40		and #$40			and 	#$40
.2138	d0 50		bne $218a			bne		_WVType
.213a	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.213c	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.213e	29 40		and #$40			and 	#$40
.2140	d0 1f		bne $2161			bne 	_WVCopyString
.2142	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.2144	15 49		ora $49,x			ora 	esType+1,x
.2146	4a		lsr a				lsr 	a
.2147	90 22		bcc $216b			bcc 	_WVCopyData4 				; copy 4 data bytes.
.2149	b5 48		lda $48,x			lda 	esType,x
.214b	4a		lsr a				lsr 	a
.214c	90 3c		bcc $218a			bcc 	_WVType
.214e	e8		inx				inx 								; force the value being written to be a float.
.214f	20 e0 29	jsr $29e0			jsr 	BPMakeFloat
.2152	ca		dex				dex
.2153	20 8f 21	jsr $218f			jsr 	TOSToTemp0 					; set Temp0 to write address
.2156	e8		inx				inx
.2157	8a		txa				txa
.2158	a2 22		ldx #$22		ldx	#34
.215a	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.215d	aa		tax				tax
.215e	4c 87 21	jmp $2187			jmp 	_WVCopyExit
.2161					_WVCopyString:
.2161	8a		txa				txa
.2162	a2 10		ldx #$10		ldx	#16
.2164	20 e0 37	jsr $37e0		jsr	stringHandler
.2167	aa		tax				tax
.2168	4c 87 21	jmp $2187			jmp 	_WVCopyExit
.216b					_WVCopyData4:
.216b	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.216d	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.216f	d0 10		bne $2181			bne 	_WVCopyData1
.2171	a0 03		ldy #$03			ldy 	#3
.2173	b5 69		lda $69,x			lda 	esInt3+1,x
.2175	91 2a		sta ($2a),y			sta 	(temp0),y
.2177	88		dey				dey
.2178	b5 61		lda $61,x			lda 	esInt2+1,x
.217a	91 2a		sta ($2a),y			sta 	(temp0),y
.217c	88		dey				dey
.217d	b5 59		lda $59,x			lda 	esInt1+1,x
.217f	91 2a		sta ($2a),y			sta 	(temp0),y
.2181					_WVCopyData1:
.2181	a0 00		ldy #$00			ldy 	#0
.2183	b5 51		lda $51,x			lda 	esInt0+1,x
.2185	91 2a		sta ($2a),y			sta 	(temp0),y
.2187					_WVCopyExit:
.2187	68		pla				pla
.2188	a8		tay				tay
.2189	60		rts				rts
.218a					_WVType:
.218a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.218c	20 18 15	jsr $1518		jsr	errorHandler
.218f					TOSToTemp0:
.218f	b5 50		lda $50,x			lda 	esInt0,x
.2191	85 2a		sta $2a				sta 	temp0
.2193	b5 58		lda $58,x			lda 	esInt1,x
.2195	85 2b		sta $2b				sta 	temp0+1
.2197	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.2198					Command_Poke:
.2198	a9 01		lda #$01			lda 	#1
.219a	d0 06		bne $21a2			bne 	PokeGeneral
.219c					Command_Doke:
.219c	a9 02		lda #$02			lda 	#2
.219e	d0 02		bne $21a2			bne 	PokeGeneral
.21a0					Command_Loke:
.21a0	a9 03		lda #$03			lda 	#3
.21a2					PokeGeneral:
.21a2	48		pha				pha 								; save id (PDL = 123)
.21a3	20 9b 2d	jsr $2d9b			jsr 	EvaluateRootInteger 		; target address
.21a6	20 b5 34	jsr $34b5			jsr	 	CheckComma
.21a9	e8		inx				inx
.21aa	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger 			; what value to POKE ?
.21ad	ca		dex				dex
.21ae	20 8f 21	jsr $218f			jsr 	TOSToTemp0 					; temp0 points to the target address
.21b1	84 32		sty $32				sty 	tempShort 					; save Y
.21b3	68		pla				pla 								; get copy type (1-3) and dispatch
.21b4	aa		tax				tax
.21b5	ca		dex				dex
.21b6	f0 14		beq $21cc			beq 	_Poke1
.21b8	ca		dex				dex
.21b9	f0 0b		beq $21c6			beq 	_Poke2
.21bb	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.21bd	a5 69		lda $69				lda 	esInt3+1
.21bf	91 2a		sta ($2a),y			sta 	(temp0),y
.21c1	88		dey				dey
.21c2	a5 61		lda $61				lda 	esInt2+1
.21c4	91 2a		sta ($2a),y			sta 	(temp0),y
.21c6					_Poke2:
.21c6	a0 01		ldy #$01			ldy 	#1
.21c8	a5 59		lda $59				lda 	esInt1+1
.21ca	91 2a		sta ($2a),y			sta 	(temp0),y
.21cc					_Poke1:
.21cc	a0 00		ldy #$00			ldy 	#0
.21ce	a5 51		lda $51				lda 	esInt0+1
.21d0	91 2a		sta ($2a),y			sta 	(temp0),y
.21d2	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.21d4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.21d5					Command_Rem:
.21d5					Command_Rem2:
.21d5	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.21d7	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.21d9	d0 06		bne $21e1			bne 	_CRNotString
.21db	c8		iny				iny
.21dc	98		tya				tya
.21dd	38		sec				sec
.21de	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.21e0	a8		tay				tay
.21e1					_CRNotString:
.21e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.21e2					CommandStop:
.21e2	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.21e4	20 18 15	jsr $1518		jsr	errorHandler
.21e7					CommandEnd:
.21e7	4c 1e 35	jmp $351e			jmp 	WarmStart
.21ea					CommandXemu:
.21ea	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.21ed					AdvanceNextLine:
.21ed	a0 00		ldy #$00			ldy 	#0 							; get offset
.21ef	b1 28		lda ($28),y			lda 	(codePtr),y
.21f1	18		clc				clc 								; add to codePtr
.21f2	65 28		adc $28				adc 	codePtr
.21f4	85 28		sta $28				sta 	codePtr
.21f6	90 02		bcc $21fa			bcc 	_ANLNoCarry
.21f8	e6 29		inc $29				inc 	codePtr+1
.21fa					_ANLNoCarry:
.21fa	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.21fc	f0 e9		beq $21e7			beq 	CommandEnd 					; execute END
.21fe	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.2200	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.2201					Command_FOR:
.2201	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2203	a2 0b		ldx #$0b			ldx 	#11
.2205	20 d0 34	jsr $34d0			jsr 	RSClaim
.2208	20 1a 21	jsr $211a			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.220b	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.220d	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.220f	d0 4c		bne $225d			bne 	_CFType
.2211	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2213	20 9d 34	jsr $349d			jsr 	CheckToken
.2216	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2218	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger				; get terminal value in stack 1
.221b	98		tya				tya
.221c	48		pha				pha
.221d	a0 04		ldy #$04			ldy 	#4
.221f	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.2221	91 37		sta ($37),y			sta 	(rsPointer),y
.2223	c8		iny				iny
.2224	a5 58		lda $58				lda		esInt1
.2226	91 37		sta ($37),y			sta 	(rsPointer),y
.2228	c8		iny				iny
.2229	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.222b	91 37		sta ($37),y			sta 	(rsPointer),y
.222d	c8		iny				iny
.222e	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.2230	91 37		sta ($37),y			sta 	(rsPointer),y
.2232	c8		iny				iny
.2233	a5 59		lda $59				lda		esInt1+1
.2235	91 37		sta ($37),y			sta 	(rsPointer),y
.2237	c8		iny				iny
.2238	a5 61		lda $61				lda		esInt2+1
.223a	91 37		sta ($37),y			sta 	(rsPointer),y
.223c	c8		iny				iny
.223d	a5 69		lda $69				lda		esInt3+1
.223f	91 37		sta ($37),y			sta 	(rsPointer),y
.2241	68		pla				pla
.2242	a8		tay				tay
.2243	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2245	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2247	d0 0e		bne $2257			bne 	_CFDone
.2249	c8		iny				iny									; skip over step.
.224a	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger 			; get step
.224d	98		tya				tya
.224e	48		pha				pha
.224f	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2251	a0 06		ldy #$06			ldy 	#6
.2253	91 37		sta ($37),y			sta 	(rsPointer),y
.2255	68		pla				pla
.2256	a8		tay				tay
.2257					_CFDone:
.2257	a9 01		lda #$01			lda 	#1
.2259	20 fc 34	jsr $34fc			jsr 	RSSavePosition 				; save position.
.225c	60		rts				rts
.225d					_CFType:
.225d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.225f	20 18 15	jsr $1518		jsr	errorHandler
.2262					Command_NEXT:
.2262	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2264	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2266	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2268	f0 05		beq $226f			beq 	_isok
.226a	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.226c	20 18 15	jsr $1518		jsr	errorHandler
.226f					_isok:
.226f	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2271	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2273	b0 18		bcs $228d			bcs 	_CNNoIndex
.2275	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2277	20 d6 2d	jsr $2dd6			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.227a	98		tya				tya
.227b	48		pha				pha
.227c	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.227e	b1 37		lda ($37),y			lda 	(rsPointer),y
.2280	d5 50		cmp $50,x			cmp 	esInt0,x
.2282	d0 76		bne $22fa			bne 	_CNBadIndex
.2284	c8		iny				iny
.2285	b1 37		lda ($37),y			lda 	(rsPointer),y
.2287	d5 58		cmp $58,x			cmp 	esInt1,x
.2289	d0 6f		bne $22fa			bne 	_CNBadIndex
.228b	68		pla				pla
.228c	a8		tay				tay
.228d					_CNNoIndex:
.228d	98		tya				tya
.228e	48		pha				pha
.228f	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2291	b1 37		lda ($37),y			lda 	(rsPointer),y
.2293	85 2a		sta $2a				sta 	temp0
.2295	c8		iny				iny
.2296	b1 37		lda ($37),y			lda 	(rsPointer),y
.2298	85 2b		sta $2b				sta 	temp0+1
.229a	c8		iny				iny
.229b	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.229d	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.229f	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.22a1	10 01		bpl $22a4			bpl 	_CNSignX
.22a3	ca		dex				dex  								; X = $FF
.22a4					_CNSignX:
.22a4	18		clc				clc 								; add to the LSB
.22a5	a0 00		ldy #$00			ldy 	#0
.22a7	71 2a		adc ($2a),y			adc 	(temp0),y
.22a9	91 2a		sta ($2a),y			sta 	(temp0),y
.22ab					_CNPropogate:
.22ab	c8		iny				iny  								; add the sign extended in X to the rest.
.22ac	8a		txa				txa
.22ad	71 2a		adc ($2a),y			adc 	(temp0),y
.22af	91 2a		sta ($2a),y			sta 	(temp0),y
.22b1	c8		iny				iny
.22b2	8a		txa				txa
.22b3	71 2a		adc ($2a),y			adc 	(temp0),y
.22b5	91 2a		sta ($2a),y			sta 	(temp0),y
.22b7	c8		iny				iny
.22b8	8a		txa				txa
.22b9	71 2a		adc ($2a),y			adc 	(temp0),y
.22bb	91 2a		sta ($2a),y			sta 	(temp0),y
.22bd	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.22be	a5 37		lda $37				lda 	rsPointer
.22c0	69 07		adc #$07			adc 	#7
.22c2	85 2c		sta $2c				sta 	temp1
.22c4	a9 00		lda #$00			lda 	#0
.22c6	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.22c8	a8		tay				tay 								; and clear the Y register again.
.22c9	65 38		adc $38				adc 	rsPointer+1
.22cb	85 2d		sta $2d				sta 	temp1+1
.22cd	38		sec				sec 								; calculate current - limit oring interim values.
.22ce	20 06 23	jsr $2306			jsr 	_CNCompare 					; each of these does a byte.
.22d1	20 06 23	jsr $2306			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.22d4	20 06 23	jsr $2306			jsr 	_CNCompare 					; and the carry of the subtraction.
.22d7	20 06 23	jsr $2306			jsr 	_CNCompare
.22da	50 02		bvc $22de			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.22dc	49 80		eor #$80			eor 	#$80
.22de					_CNNoOverflow:
.22de	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.22e0	30 1d		bmi $22ff			bmi 	_CNCheckDownto
.22e2	c9 00		cmp #$00			cmp 	#0
.22e4	30 0c		bmi $22f2			bmi 	_CNLoopRound 				; loop round if < =
.22e6	a5 2e		lda $2e				lda 	temp2
.22e8	f0 08		beq $22f2			beq 	_CNLoopRound
.22ea					_CNLoopExit:
.22ea	68		pla				pla
.22eb	a8		tay				tay
.22ec	a9 0b		lda #$0b			lda 	#11
.22ee	20 f2 34	jsr $34f2			jsr 	RSFree
.22f1	60		rts				rts
.22f2					_CNLoopRound:
.22f2	68		pla				pla
.22f3	a8		tay				tay
.22f4	a9 01		lda #$01			lda 	#1
.22f6	20 0f 35	jsr $350f			jsr 	RSLoadPosition				; go back to the loop top
.22f9	60		rts				rts
.22fa					_CNBadIndex:
.22fa	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.22fc	20 18 15	jsr $1518		jsr	errorHandler
.22ff					_CNCheckDownto:
.22ff	c9 00		cmp #$00			cmp 	#0
.2301	10 ef		bpl $22f2			bpl 	_CNLoopRound
.2303	4c ea 22	jmp $22ea			jmp 	_CNLoopExit
.2306					_CNCompare:
.2306	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2308	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.230a	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.230c	85 2e		sta $2e				sta 	temp2
.230e	c8		iny				iny
.230f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.2310					CommandIf:
.2310	20 9b 2d	jsr $2d9b			jsr 	EvaluateRootInteger 		; get what's being tested.
.2313	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2315	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2317	f0 04		beq $231d			beq 	_IfSimple
.2319	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.231b	d0 1b		bne $2338			bne 	_IfComplex
.231d					_IfSimple:
.231d	20 5c 34	jsr $345c			jsr 	MInt32Zero					; check if TOS zero
.2320	f0 10		beq $2332			beq 	_IfEOL 						; go to next line.
.2322	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2324	c8		iny				iny
.2325	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2327	f0 0c		beq $2335			beq 	_IfGoto 					; do the Goto code
.2329	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.232b	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.232d	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.232f	f0 04		beq $2335			beq 	_IfGoto
.2331	60		rts				rts 								; else continue on this line.
.2332					_IfEOL:
.2332	4c ed 21	jmp $21ed			jmp 	AdvanceNextLine 			; go to next line
.2335					_IfGoto:
.2335	4c 24 1f	jmp $1f24			jmp 	CommandGoto
.2338					_IfComplex:
.2338	20 5c 34	jsr $345c			jsr 	MInt32Zero 					; is it true ?
.233b	f0 01		beq $233e			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.233d	60		rts				rts 								; else continue.
.233e					_IFSkip:
.233e	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2340	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2342	4c da 25	jmp $25da			jmp		ScanForward
.2345					Command_ELSE:
.2345	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2347	8a		txa				txa
.2348	4c da 25	jmp $25da			jmp		ScanForward
.234b					Command_ENDIF:
.234b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd2					storeSize:
>0cd2							.fill 	1
.234c					CommandLocal:
.234c	a2 00		ldx #$00			ldx 	#0
.234e	20 6a 23	jsr $236a			jsr 	LocaliseVariable 			; localise one.
.2351					_CLCheckNext:
.2351	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2353	c8		iny				iny
.2354	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2356	f0 06		beq $235e			beq 	_CLAssignment
.2358	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.235a	f0 f0		beq $234c			beq 	CommandLocal
.235c	88		dey				dey
.235d	60		rts				rts
.235e					_CLAssignment:
.235e	a2 01		ldx #$01			ldx 	#1
.2360	20 7e 2d	jsr $2d7e			jsr 	Evaluate 					; evaluate RHS
.2363	ca		dex				dex
.2364	20 2d 21	jsr $212d			jsr 	WriteValue
.2367	4c 51 23	jmp $2351			jmp 	_CLCheckNext
.236a					LocaliseVariable:
.236a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.236c	c9 40		cmp #$40			cmp 	#$40
.236e	b0 67		bcs $23d7			bcs 	_LVSyntax
.2370	8a		txa				txa 								; get the address of that variable.
.2371	a2 02		ldx #$02		ldx	#2
.2373	20 d7 43	jsr $43d7		jsr	variableHandler
.2376	aa		tax				tax
.2377	8a		txa				txa
.2378	48		pha				pha
.2379	98		tya				tya
.237a	48		pha				pha
.237b	20 8f 21	jsr $218f			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.237e	b5 48		lda $48,x			lda 	esType,x 					; get the type
.2380	0a		asl a				asl 	a
.2381	10 16		bpl $2399			bpl 	_LVPushNumber
.2383	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2385	b1 2a		lda ($2a),y			lda 	(temp0),y
.2387	c8		iny				iny
.2388	85 2c		sta $2c				sta 	temp1
.238a	b1 2a		lda ($2a),y			lda 	(temp0),y
.238c	85 2d		sta $2d				sta 	temp1+1
.238e	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2390	b1 2c		lda ($2c),y			lda 	(temp1),y
.2392	aa		tax				tax 								; into X
.2393	e8		inx				inx 								; +1 for length.
.2394	a9 24		lda #$24			lda 	#markerString
.2396	4c ae 23	jmp $23ae			jmp 	_LVWriteFrame
.2399					_LVPushNumber:
.2399	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.239b	85 2c		sta $2c				sta 	temp1
.239d	a5 2b		lda $2b				lda 	temp0+1
.239f	85 2d		sta $2d				sta 	temp1+1
.23a1	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.23a3	4a		lsr a				lsr 	a
.23a4	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.23a6	a2 04		ldx #$04			ldx 	#VarISize
.23a8	90 04		bcc $23ae			bcc 	_LVIsInteger
.23aa	a9 23		lda #$23			lda 	#markerFloat
.23ac	a2 06		ldx #$06			ldx 	#VarFSize
.23ae					_LVIsInteger:
.23ae					_LVWriteFrame:
.23ae	8e d2 0c	stx $0cd2			stx 	storeSize 					; number of bytes to copy from (temp0)
.23b1	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.23b2	e8		inx				inx
.23b3	e8		inx				inx
.23b4	20 d0 34	jsr $34d0			jsr 	RSClaim 					; create the stack frame.
.23b7	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.23b9	a0 01		ldy #$01			ldy 	#1
.23bb	91 37		sta ($37),y			sta 	(rsPointer),y
.23bd	c8		iny				iny
.23be	a5 2b		lda $2b				lda 	temp0+1
.23c0	91 37		sta ($37),y			sta 	(rsPointer),y
.23c2	a0 00		ldy #$00			ldy 	#0
.23c4					_LVCopyData:
.23c4	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.23c6	c8		iny				iny 								; write allowing for the header bit.
.23c7	c8		iny				iny
.23c8	c8		iny				iny
.23c9	91 37		sta ($37),y			sta 	(rsPointer),y
.23cb	88		dey				dey
.23cc	88		dey				dey
.23cd	ce d2 0c	dec $0cd2			dec 	storeSize 					; do it storesize times
.23d0	d0 f2		bne $23c4			bne 	_LVCopyData
.23d2	68		pla				pla
.23d3	a8		tay				tay
.23d4	68		pla				pla
.23d5	aa		tax				tax
.23d6	60		rts				rts
.23d7					_LVSyntax:
.23d7	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.23d9	20 18 15	jsr $1518		jsr	errorHandler
.23dc					RestoreLocals:
.23dc	a2 00		ldx #$00			ldx 	#0
.23de	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23e0	c9 40		cmp #$40			cmp	 	#64
.23e2	90 01		bcc $23e5			bcc 	_RLocal
.23e4	60		rts				rts
.23e5					_RLocal:
.23e5	8a		txa				txa
.23e6	48		pha				pha
.23e7	98		tya				tya
.23e8	48		pha				pha
.23e9	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.23eb	b1 37		lda ($37),y			lda 	(rsPointer),y
.23ed	85 2a		sta $2a				sta 	temp0
.23ef	c8		iny				iny
.23f0	b1 37		lda ($37),y			lda 	(rsPointer),y
.23f2	85 2b		sta $2b				sta 	temp0+1
.23f4	a0 00		ldy #$00			ldy 	#0 							; get type back.
.23f6	b1 37		lda ($37),y			lda 	(rsPointer),y
.23f8	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.23fa	f0 28		beq $2424			beq 	_RString
.23fc	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.23fe	c9 25		cmp #$25			cmp 	#markerInt
.2400	f0 02		beq $2404			beq 	_RIsInteger
.2402	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2404					_RIsInteger:
.2404	8a		txa				txa
.2405	48		pha				pha
.2406	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2408					_RCopyBack:
.2408	b1 37		lda ($37),y			lda 	(rsPointer),y
.240a	88		dey				dey
.240b	88		dey				dey
.240c	88		dey				dey
.240d	91 2a		sta ($2a),y			sta 	(temp0),y
.240f	c8		iny				iny
.2410	c8		iny				iny
.2411	c8		iny				iny
.2412	c8		iny				iny
.2413	ca		dex				dex
.2414	d0 f2		bne $2408			bne 	_RCopyBack
.2416	68		pla				pla 								; get size add 3
.2417	18		clc				clc
.2418	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.241a					_RRestoreAAndLoop:
.241a	20 f2 34	jsr $34f2			jsr 	RSFree
.241d	68		pla				pla
.241e	a8		tay				tay
.241f	68		pla				pla
.2420	aa		tax				tax
.2421	4c dc 23	jmp $23dc			jmp 	RestoreLocals 				; go see if there are any more locals.
.2424					_RString:
.2424	a2 00		ldx #$00			ldx 	#0
.2426	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2428	b1 37		lda ($37),y			lda 	(rsPointer),y
.242a	95 50		sta $50,x			sta 	esInt0,x
.242c	c8		iny				iny
.242d	b1 37		lda ($37),y			lda 	(rsPointer),y
.242f	95 58		sta $58,x			sta 	esInt1,x
.2431	18		clc				clc
.2432	a5 37		lda $37				lda 	rsPointer
.2434	69 03		adc #$03			adc 	#3
.2436	95 51		sta $51,x			sta 	esInt0+1,x
.2438	a5 38		lda $38				lda 	rsPointer+1
.243a	69 00		adc #$00			adc 	#0
.243c	95 59		sta $59,x			sta 	esInt1+1,x
.243e	8a		txa				txa
.243f	a2 10		ldx #$10		ldx	#16
.2441	20 e0 37	jsr $37e0		jsr	stringHandler
.2444	a0 03		ldy #$03			ldy 	#3 							; get string length
.2446	b1 37		lda ($37),y			lda 	(rsPointer),y
.2448	18		clc				clc
.2449	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.244b	4c 1a 24	jmp $241a			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd3					paramCount:
>0cd3							.fill 	1
.244e					CallProc:
.244e	20 d6 24	jsr $24d6			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2451	48		pha				pha 								; save length on stack
.2452	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2454	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2456	48		pha				pha
.2457	a5 2a		lda $2a				lda 	temp0
.2459	48		pha				pha
.245a	98		tya				tya 								; calculate Y + length
.245b	18		clc				clc
.245c	65 32		adc $32				adc 	tempShort
.245e	a8		tay				tay
.245f	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2461					_CallProcEvalParams:
.2461	e8		inx				inx
.2462	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2464	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2466	f0 0b		beq $2473			beq 	_CPDoneParams
.2468	20 7e 2d	jsr $2d7e			jsr 	Evaluate 					; evaluate a parameter
.246b	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.246d	c8		iny				iny
.246e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2470	f0 ef		beq $2461			beq 	_CallProcEvalParams
.2472	88		dey				dey 								; undo consumption.
.2473					_CPDoneParams:
.2473	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; check closing parenthesis.
.2476	8e d3 0c	stx $0cd3			stx 	paramCount 					; store parameter count+1
.2479	a2 04		ldx #$04			ldx 	#4							; make space on stack
.247b	a9 50		lda #$50			lda 	#markerPROC
.247d	20 d0 34	jsr $34d0			jsr 	RSClaim
.2480	a9 01		lda #$01			lda 	#1 							; store return address.
.2482	20 fc 34	jsr $34fc			jsr 	RSSavePosition
.2485	68		pla				pla 								; get the new code Ptr
.2486	85 28		sta $28				sta 	codePtr
.2488	68		pla				pla
.2489	85 29		sta $29				sta 	codePtr+1
.248b	68		pla				pla 								; length of name + 4 is the param start.
.248c	18		clc				clc
.248d	69 04		adc #$04			adc 	#4
.248f	a8		tay				tay
.2490	a2 ff		ldx #$ff			ldx 	#$FF
.2492					_CPLoadParameters:
.2492	e8		inx				inx 								; point to where the address should be loaded.
.2493	ec d3 0c	cpx $0cd3			cpx 	paramCount 					; too many parameters in definition ?
.2496	f0 1e		beq $24b6			beq 	_CPParamError
.2498	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.249a	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.249c	f0 0e		beq $24ac			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.249e	20 6a 23	jsr $236a			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.24a1	20 2d 21	jsr $212d			jsr 	WriteValue 					; copy the evaluated parameter into there.
.24a4	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.24a6	c8		iny				iny
.24a7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.24a9	f0 e7		beq $2492			beq 	_CPLoadParameters
.24ab	88		dey				dey 								; no, unconsume and check for )
.24ac					_CPParamComplete:
.24ac	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; check )
.24af	e8		inx				inx 								; check right number of parameters have been consumed
.24b0	ec d3 0c	cpx $0cd3			cpx 	paramCount
.24b3	d0 01		bne $24b6			bne 	_CPParamError
.24b5	60		rts				rts
.24b6					_CPParamError:
.24b6	a2 18		ldx #$18			ldx 	#ErrorID_Params
.24b8	20 18 15	jsr $1518		jsr	errorHandler
.24bb					ReturnProc:
.24bb	20 dc 23	jsr $23dc			jsr 	RestoreLocals 				; get the locals back.
.24be	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.24c0	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.24c2	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.24c4	f0 05		beq $24cb			beq 	_isok
.24c6	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.24c8	20 18 15	jsr $1518		jsr	errorHandler
.24cb					_isok:
.24cb	a9 01		lda #$01			lda 	#1
.24cd	20 0f 35	jsr $350f			jsr 	RSLoadPosition 				; reload the position from offset 1.
.24d0	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.24d2	20 f2 34	jsr $34f2			jsr 	RSFree
.24d5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd4					procList:
>0cd4							.fill 	2		 					; terminated by name high being zero.
.0cd6					yInLine:
>0cd6							.fill 	1
.24d6					FindProcedure:
.24d6	8c d6 0c	sty $0cd6			sty 	yInLine 					; save current position.
.24d9	20 94 25	jsr $2594			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.24dc	85 2c		sta $2c				sta 	temp1
.24de	ad d4 0c	lda $0cd4			lda		procList 					; put procList address in temp2
.24e1	85 2e		sta $2e				sta 	temp2
.24e3	ad d5 0c	lda $0cd5			lda 	procList+1
.24e6	85 2f		sta $2f				sta 	temp2+1
.24e8	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.24ea					_FPLoop:
.24ea	b1 2e		lda ($2e),y			lda 	(temp2),y
.24ec	f0 4f		beq $253d			beq 	_FPError 					; if so, we don't know this procedure.
.24ee	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.24f0	c8		iny				iny
.24f1	b1 2e		lda ($2e),y			lda 	(temp2),y
.24f3	85 2a		sta $2a				sta 	temp0
.24f5	c8		iny				iny
.24f6	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.24f8	c5 2c		cmp $2c				cmp 	temp1
.24fa	d0 2b		bne $2527			bne 	_FPNext 					; hash is different, go to next.
.24fc	38		sec				sec
.24fd	ad d6 0c	lda $0cd6			lda 	yInLine 					; position in line must be at least 4
.2500	e9 04		sbc #$04			sbc 	#4
.2502	18		clc				clc
.2503	65 28		adc $28				adc 	codePtr
.2505	85 30		sta $30				sta 	temp3
.2507	a5 29		lda $29				lda 	codePtr+1
.2509	69 00		adc #$00			adc 	#0
.250b	85 31		sta $31				sta 	temp3+1
.250d	98		tya				tya
.250e	48		pha				pha
.250f	a0 04		ldy #$04			ldy 	#4
.2511					_FPCName:
.2511	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2513	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2515	d0 0e		bne $2525			bne 	_FPpulYNext 				; if different go to next one.
.2517	c8		iny				iny
.2518	c9 3a		cmp #$3a			cmp 	#$3A
.251a	90 f5		bcc $2511			bcc 	_FPCName 					; compare the whole lot....
.251c	68		pla				pla 								; throw away the saved Y
.251d	98		tya				tya 								; length of name is Y-4
.251e	38		sec				sec
.251f	e9 04		sbc #$04			sbc 	#4
.2521	ac d6 0c	ldy $0cd6			ldy 	yInLine  					; get the original Y back
.2524	60		rts				rts
.2525					_FPpulYNext:
.2525	68		pla				pla
.2526	a8		tay				tay
.2527					_FPNext:
.2527	c8		iny				iny 								; next procedure record.
.2528	10 c0		bpl $24ea			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.252a	98		tya				tya 								; subtract 128 from Y
.252b	38		sec				sec
.252c	e9 80		sbc #$80			sbc 	#128
.252e	a8		tay				tay
.252f	18		clc				clc 								; add 128 to temp2, so we can have more than
.2530	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2532	69 80		adc #$80			adc 	#128
.2534	85 2e		sta $2e				sta 	temp2
.2536	90 b2		bcc $24ea			bcc 	_FPLoop
.2538	e6 2f		inc $2f				inc 	temp2+1
.253a	4c ea 24	jmp $24ea			jmp 	_FPLoop
.253d					_FPError:
.253d	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.253f	20 18 15	jsr $1518		jsr	errorHandler
.2542					ScanProc:
.2542	98		tya				tya
.2543	48		pha				pha
.2544	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2546	8d d4 0c	sta $0cd4			sta 	procList
.2549	a5 36		lda $36				lda 	lowMemory+1
.254b	8d d5 0c	sta $0cd5			sta 	procList+1
.254e	20 be 28	jsr $28be			jsr 	ResetCodeAddress 			; back to the start.
.2551					_ScanLoop:
.2551	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2553	b1 28		lda ($28),y			lda 	(codePtr),y
.2555	f0 2a		beq $2581			beq 	_ScanExit
.2557	a0 03		ldy #$03			ldy 	#3							; get first token
.2559	b1 28		lda ($28),y			lda 	(codePtr),y
.255b	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.255d	d0 12		bne $2571			bne 	_ScanNext
.255f	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2561	20 89 25	jsr $2589			jsr 	_ScanWrite
.2564	a5 28		lda $28				lda 	codePtr
.2566	20 89 25	jsr $2589			jsr 	_ScanWrite
.2569	a0 04		ldy #$04			ldy 	#4 							; start of name part
.256b	20 94 25	jsr $2594			jsr 	CalculateProcedureHash 		; calculate procedure hash
.256e	20 89 25	jsr $2589			jsr 	_ScanWrite					; and write that
.2571					_ScanNext:
.2571	18		clc				clc
.2572	a0 00		ldy #$00			ldy 	#0
.2574	b1 28		lda ($28),y			lda 	(codePtr),y
.2576	65 28		adc $28				adc 	codePtr
.2578	85 28		sta $28				sta 	codePtr
.257a	90 d5		bcc $2551			bcc 	_ScanLoop
.257c	e6 29		inc $29				inc 	codePtr+1
.257e	4c 51 25	jmp $2551			jmp 	_ScanLoop
.2581					_ScanExit:
.2581	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2583	20 89 25	jsr $2589			jsr 	_ScanWrite
.2586	68		pla				pla
.2587	a8		tay				tay
.2588	60		rts				rts
.2589					_ScanWrite:
.2589	a0 00		ldy #$00			ldy 	#0
.258b	91 35		sta ($35),y			sta 	(lowMemory),y
.258d	e6 35		inc $35				inc 	lowMemory
.258f	d0 02		bne $2593			bne 	_SWNoCarry
.2591	e6 36		inc $36				inc 	lowMemory+1
.2593					_SWNoCarry:
.2593	60		rts				rts
.2594					CalculateProcedureHash:
.2594	a9 00		lda #$00			lda 	#0 							; clear hash.
.2596	85 2a		sta $2a				sta 	temp0
.2598					_CPHLoop:
.2598	18		clc				clc 								; add character and rotate and add carry back in
.2599	b1 28		lda ($28),y			lda 	(codePtr),y
.259b	65 2a		adc $2a				adc 	temp0
.259d	6a		ror a				ror 	a
.259e	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.25a0	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.25a2	b1 28		lda ($28),y			lda 	(codePtr),y
.25a4	c8		iny				iny 								; advance incase we go round again.
.25a5	c9 3a		cmp #$3a			cmp 	#$3A
.25a7	90 ef		bcc $2598			bcc 	_CPHLoop
.25a9	a5 2a		lda $2a				lda 	temp0
.25ab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.25ac					Command_Repeat:
.25ac	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.25ae	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.25b0	20 d0 34	jsr $34d0			jsr 	RSClaim
.25b3	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.25b5	20 fc 34	jsr $34fc			jsr 	RSSavePosition
.25b8	60		rts				rts
.25b9					Command_Until:
.25b9	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25bb	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.25bd	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.25bf	f0 05		beq $25c6			beq 	_isok
.25c1	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.25c3	20 18 15	jsr $1518		jsr	errorHandler
.25c6					_isok:
.25c6	20 9b 2d	jsr $2d9b			jsr 	EvaluateRootInteger 		; at the bottom.
.25c9	20 5c 34	jsr $345c			jsr 	MInt32Zero					; check if TOS zero
.25cc	d0 06		bne $25d4			bne 	_CUExit
.25ce	a9 01		lda #$01			lda 	#1
.25d0	20 0f 35	jsr $350f			jsr 	RSLoadPosition 				; reload the position from offset 1.
.25d3	60		rts				rts
.25d4					_CUExit:
.25d4	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.25d6	20 f2 34	jsr $34f2			jsr 	RSFree
.25d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.25da					ScanForward:
.25da	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.25dc	86 2d		stx $2d				stx 	temp1+1
.25de	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.25e0	85 2e		sta $2e				sta 	temp2
.25e2	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.25e4	c8		iny				iny
.25e5	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.25e7	d0 08		bne $25f1			bne 	_SFNoCheck 					; if so, check token against entered values.
.25e9	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.25eb	f0 24		beq $2611			beq 	_SFExit 					; at the same strcture depth.
.25ed	c5 2d		cmp $2d				cmp 	temp1+1
.25ef	f0 20		beq $2611			beq 	_SFExit
.25f1					_SFNoCheck:
.25f1	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.25f3	90 ed		bcc $25e2			bcc 	_SFLoop
.25f5	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.25f7	90 19		bcc $2612			bcc 	_SFSpecials
.25f9	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.25fb	90 e5		bcc $25e2			bcc 	_SFLoop
.25fd	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.25ff	b0 e1		bcs $25e2			bcs 	_SFLoop
.2601	aa		tax				tax  								; token in X, and look up the adjuster.
.2602	bd b9 2c	lda $2cb9,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2605	38		sec				sec 								; convert to an offset ($FF,$01)
.2606	e9 81		sbc #$81			sbc 	#$81
.2608	18		clc				clc 								; add to depth
.2609	65 2e		adc $2e				adc 	temp2
.260b	85 2e		sta $2e				sta 	temp2
.260d	10 d3		bpl $25e2			bpl 	_SFLoop 					; +ve okay to continue
.260f	30 07		bmi $2618			bmi 	SFError 					; if gone -ve then we have a nesting error
.2611	60		rts		_SFExit:rts
.2612					_SFSpecials:
.2612	20 1d 26	jsr $261d			jsr 	ScannerSkipSpecial
.2615	4c e2 25	jmp $25e2			jmp 	_SFLoop
.2618					SFError:
.2618	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.261a	20 18 15	jsr $1518		jsr	errorHandler
.261d					ScannerSkipSpecial:
.261d	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.261f	f0 10		beq $2631			beq 	_SFNextLine
.2621	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2623	f0 2b		beq $2650			beq 	_SFFloatSkip
.2625	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2627	f0 02		beq $262b			beq 	_SFSkipString
.2629	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.262a	60		rts				rts 								; token.
.262b					_SFSkipString:
.262b	98		tya				tya
.262c	38		sec				sec
.262d	71 28		adc ($28),y			adc 	(codePtr),y
.262f	a8		tay				tay
.2630	60		rts				rts
.2631					_SFNextLine:
.2631	a0 00		ldy #$00			ldy 	#0 							; get offset
.2633	b1 28		lda ($28),y			lda 	(codePtr),y
.2635	18		clc				clc 								; add to code pointer.
.2636	65 28		adc $28				adc 	codePtr
.2638	85 28		sta $28				sta 	codePtr
.263a	90 02		bcc $263e			bcc		_SFNLNoCarry
.263c	e6 29		inc $29				inc 	codePtr+1
.263e					_SFNLNoCarry:
.263e	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2640	d0 0b		bne $264d			bne		_SFXNL 						; no go round again
.2642	a5 2c		lda $2c				lda 	temp1
.2644	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2646	d0 d0		bne $2618			bne 	SFError 					; read uses this to search for data statements
.2648	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.264a	20 18 15	jsr $1518		jsr	errorHandler
.264d	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.264f	60		rts				rts
.2650					_SFFloatSkip:
.2650	98		tya				tya 								; skip over an embedded float.
.2651	18		clc				clc
.2652	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2654	a8		tay				tay
.2655	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2656					Command_While:
.2656	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2658	a2 04		ldx #$04			ldx 	#4
.265a	20 d0 34	jsr $34d0			jsr 	RSClaim 					; create on stack.
.265d	88		dey				dey
.265e	a9 01		lda #$01			lda 	#1
.2660	20 fc 34	jsr $34fc			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2663	c8		iny				iny
.2664	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger				; get the conditional
.2667	20 5c 34	jsr $345c			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.266a	f0 01		beq $266d			beq 	_CWFail
.266c	60		rts				rts
.266d					_CWFail:
.266d	a9 04		lda #$04			lda 	#4
.266f	20 f2 34	jsr $34f2			jsr 	RSFree 						; close the just opened position.
.2672	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2674	aa		tax				tax
.2675	20 da 25	jsr $25da			jsr 	ScanForward
.2678	60		rts				rts
.2679					Command_Wend:
.2679	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.267b	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.267d	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.267f	f0 05		beq $2686			beq 	_isok
.2681	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2683	20 18 15	jsr $1518		jsr	errorHandler
.2686					_isok:
.2686	a9 01		lda #$01			lda 	#1
.2688	20 0f 35	jsr $350f			jsr 	RSLoadPosition				; go back until true
.268b	a9 04		lda #$04			lda 	#4
.268d	20 f2 34	jsr $34f2			jsr 	RSFree 						; close the loop
.2690	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2691					CommandClear:
.2691					XCommandClear:
.2691	98		tya				tya
.2692	48		pha				pha
.2693	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2696	85 33		sta $33				sta 	highMemory
.2698	ad cd 0a	lda $0acd			lda 	endMemory+1
.269b	85 34		sta $34				sta 	highMemory+1
.269d	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.26a0	85 2a		sta $2a				sta 	temp0
.26a2	ad c9 0a	lda $0ac9			lda 	basePage+1
.26a5	85 2b		sta $2b				sta 	temp0+1
.26a7					_CCFindEnd:
.26a7	a0 00		ldy #$00			ldy 	#0
.26a9	b1 2a		lda ($2a),y			lda 	(temp0),y
.26ab	f0 0c		beq $26b9			beq 	_CCFoundEnd 				; offset zero is end.
.26ad	18		clc				clc
.26ae	65 2a		adc $2a				adc 	temp0 						; move to next line
.26b0	85 2a		sta $2a				sta 	temp0
.26b2	90 f3		bcc $26a7			bcc 	_CCFindEnd
.26b4	e6 2b		inc $2b				inc 	temp0+1
.26b6	4c a7 26	jmp $26a7			jmp 	_CCFindEnd
.26b9					_CCFoundEnd:
.26b9	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.26bb	85 35		sta $35				sta 	lowMemory
.26bd	a5 2b		lda $2b				lda 	temp0+1
.26bf	85 36		sta $36				sta 	lowMemory+1
.26c1	18		clc				clc 								; put temp0+1 in endProgram
.26c2	a5 2a		lda $2a				lda 	temp0
.26c4	69 01		adc #$01			adc 	#1
.26c6	8d ca 0a	sta $0aca			sta 	endProgram
.26c9	a5 2b		lda $2b				lda 	temp0+1
.26cb	69 00		adc #$00			adc 	#0
.26cd	8d cb 0a	sta $0acb			sta 	endProgram+1
.26d0	18		clc				clc 								; put a bit of space in.
.26d1	a5 35		lda $35				lda 	lowMemory
.26d3	69 04		adc #$04			adc 	#4
.26d5	85 35		sta $35				sta 	lowMemory
.26d7	90 02		bcc $26db			bcc 	_CCNoCarry
.26d9	e6 36		inc $36				inc 	lowMemory+1
.26db					_CCNoCarry:
.26db	20 c2 34	jsr $34c2			jsr 	RSReset 					; reset the return stack.
.26de	a2 06		ldx #$06		ldx	#6
.26e0	20 d7 43	jsr $43d7		jsr	variableHandler
.26e3	20 42 25	jsr $2542			jsr 	ScanProc 					; scan for procedures
.26e6	20 c7 1e	jsr $1ec7			jsr 	CommandRestore 				; do a restore
.26e9	68		pla				pla
.26ea	a8		tay				tay
.26eb	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cd7					structIndent:
>0cd7							.fill 	1
.26ec					CommandList:
.26ec	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.26ee	8e d7 0c	stx $0cd7			stx 	structIndent
.26f1	20 35 34	jsr $3435			jsr 	MInt32False
.26f4	e8		inx				inx
.26f5	20 31 34	jsr $3431			jsr 	MInt32True
.26f8	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.26fa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.26fc	f0 15		beq $2713			beq 	_CLEndLine
.26fe	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2700	30 1b		bmi $271d			bmi 	_CLDoListing 				; do the whole lot.
.2702	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2704	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger
.2707	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2709	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.270b	f0 06		beq $2713			beq 	_CLEndLine
.270d	20 73 33	jsr $3373			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2710	4c 1d 27	jmp $271d			jmp 	_CLDoListing 				; own e.g. list 1100
.2713					_CLEndLine:
.2713	c8		iny				iny 								; skip comma
.2714	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2716	30 05		bmi $271d			bmi 	_CLDoListing
.2718	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.271a	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger				; get end
.271d					_CLDoListing:
.271d	20 be 28	jsr $28be			jsr 	ResetCodeAddress 			; back to the start.
.2720					_CLCheckLoop:
.2720	a2 02		ldx #$02		ldx	#2
.2722	20 f6 14	jsr $14f6		jsr	deviceHandler
.2725	a0 00		ldy #$00			ldy 	#0							; check end.
.2727	b1 28		lda ($28),y			lda 	(codePtr),y
.2729	f0 41		beq $276c			beq 	_CLEnd
.272b	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.272d	20 6f 27	jsr $276f			jsr 	CLCompareLineTOS
.2730	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2732	f0 28		beq $275c			beq 	_CLNext
.2734	e8		inx				inx
.2735	20 6f 27	jsr $276f			jsr 	CLCompareLineTOS 			; compare vs higher
.2738	c9 01		cmp #$01			cmp 	#1
.273a	f0 20		beq $275c			beq 	_CLNext
.273c	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.273e	20 91 27	jsr $2791			jsr 	CLStructureCheck
.2741	ad d7 0c	lda $0cd7			lda 	structIndent 				; indent level.
.2744	10 02		bpl $2748			bpl 	_CLPositive
.2746	a9 00		lda #$00			lda 	#0
.2748					_CLPositive:
.2748	a2 04		ldx #$04		ldx	#4
.274a	20 06 40	jsr $4006		jsr	tokeniserHandler
.274d	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.274f	20 91 27	jsr $2791			jsr 	CLStructureCheck
.2752	ad d7 0c	lda $0cd7			lda 	structIndent
.2755	10 05		bpl $275c			bpl 	_CLNext
.2757	a9 00		lda #$00			lda 	#0
.2759	8d d7 0c	sta $0cd7			sta 	structIndent
.275c					_CLNext:
.275c	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.275e	b1 28		lda ($28),y			lda 	(codePtr),y
.2760	18		clc				clc
.2761	65 28		adc $28				adc 	codePtr
.2763	85 28		sta $28				sta 	codePtr
.2765	90 b9		bcc $2720			bcc 	_CLCheckLoop
.2767	e6 29		inc $29				inc 	codePtr+1
.2769	4c 20 27	jmp $2720			jmp 	_CLCheckLoop
.276c					_CLEnd:
.276c	4c 1e 35	jmp $351e			jmp 	WarmStart 					; warm start after list.
.276f					CLCompareLineTOS:
.276f	a0 01		ldy #$01			ldy 	#1
.2771	b1 28		lda ($28),y			lda 	(codePtr),y
.2773	55 50		eor $50,x			eor 	esInt0,x
.2775	85 2a		sta $2a				sta 	temp0
.2777	c8		iny				iny
.2778	b1 28		lda ($28),y			lda 	(codePtr),y
.277a	55 58		eor $58,x			eor 	esInt1,x
.277c	05 2a		ora $2a				ora 	temp0
.277e	f0 10		beq $2790			beq 	_CLCLTExit
.2780	88		dey				dey
.2781	b1 28		lda ($28),y			lda 	(codePtr),y
.2783	d5 50		cmp $50,x			cmp 	esInt0,x
.2785	c8		iny				iny
.2786	b1 28		lda ($28),y			lda 	(codePtr),y
.2788	f5 58		sbc $58,x			sbc 	esInt1,x
.278a	a9 ff		lda #$ff			lda 	#255
.278c	90 02		bcc $2790			bcc 	_CLCLTExit
.278e	a9 01		lda #$01			lda 	#1
.2790					_CLCLTExit:
.2790	60		rts				rts
.2791					CLStructureCheck:
.2791	85 2a		sta $2a				sta 	temp0
.2793	a0 03		ldy #$03			ldy 	#3
.2795					_CLSCLoop:
.2795	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2797	c8		iny				iny
.2798	c9 80		cmp #$80			cmp 	#$80
.279a	90 f9		bcc $2795			bcc 	_CLSCLoop 					; $00-$7F just step over.
.279c	f0 28		beq $27c6			beq		_CLSCExit					; EOL return
.279e	c9 86		cmp #$86			cmp 	#$86 						; special handler
.27a0	90 1e		bcc $27c0			bcc 	_CLSCSpecial
.27a2	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.27a4	90 ef		bcc $2795			bcc 	_CLSCLoop
.27a6	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.27a8	b0 eb		bcs $2795			bcs 	_CLSCLoop
.27aa	aa		tax				tax 								; get adjustment
.27ab	bd b9 2c	lda $2cb9,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.27ae	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.27b0	d0 e3		bne $2795			bne 	_CLSCLoop
.27b2	38		sec				sec
.27b3	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.27b5	0a		asl a				asl 	a 							; double indent step
.27b6	18		clc				clc
.27b7	6d d7 0c	adc $0cd7			adc 	structIndent 				; add to structure indent
.27ba	8d d7 0c	sta $0cd7			sta 	structIndent
.27bd	4c 95 27	jmp $2795			jmp 	_CLSCLoop
.27c0					_CLSCSpecial:
.27c0	20 1d 26	jsr $261d			jsr 	ScannerSkipSpecial
.27c3	4c 95 27	jmp $2795			jmp 	_CLSCLoop
.27c6					_CLSCExit:
.27c6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.27c7					CommandLoad:
.27c7	20 ef 27	jsr $27ef			jsr 	CLSParameters 					; get parameters for load.
.27ca	08		php				php
.27cb	a2 0e		ldx #$0e		ldx	#14
.27cd	20 f6 14	jsr $14f6		jsr	deviceHandler
.27d0	28		plp				plp
.27d1	b0 08		bcs $27db			bcs 	_CLExit 						; if CC then load a program, so warm start.
.27d3	20 91 26	jsr $2691			jsr 	CommandClear
.27d6	a2 04		ldx #$04		ldx	#4
.27d8	20 89 1e	jsr $1e89		jsr	interactionHandler
.27db					_CLExit
.27db	60		rts				rts
.27dc					CommandSave:
.27dc	20 ef 27	jsr $27ef			jsr 	CLSParameters					; get parameters for save
.27df	90 08		bcc $27e9			bcc 	_CSNoOverrideAddress
.27e1	20 b5 34	jsr $34b5			jsr 	CheckComma 						; should be a comma.
.27e4	a2 02		ldx #$02			ldx 	#2
.27e6	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger 				; get save end address.
.27e9					_CSNoOverrideAddress:
.27e9	a2 18		ldx #$18		ldx	#24
.27eb	20 f6 14	jsr $14f6		jsr	deviceHandler
.27ee	60		rts				rts
.27ef					CLSParameters:
.27ef	a2 00		ldx #$00			ldx 	#0 								; string
.27f1	20 92 2d	jsr $2d92			jsr 	EvaluateString
.27f4	e8		inx				inx 									; erase out +1 +2
.27f5	20 35 34	jsr $3435			jsr 	MInt32False
.27f8	e8		inx				inx
.27f9	20 35 34	jsr $3435			jsr 	MInt32False
.27fc	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.27ff	85 51		sta $51				sta 	esInt0+1
.2801	ad c9 0a	lda $0ac9			lda 	basePage+1
.2804	85 59		sta $59				sta 	esInt1+1
.2806	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2809	85 52		sta $52				sta 	esInt0+2
.280b	ad cb 0a	lda $0acb			lda 	endProgram+1
.280e	85 5a		sta $5a				sta 	esInt1+2
.2810	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2812	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2814	d0 08		bne $281e			bne 	_CLSDefault
.2816	c8		iny				iny 									; skip comma
.2817	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2819	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger
.281c	38		sec				sec
.281d	60		rts				rts
.281e					_CLSDefault:
.281e	18		clc				clc
.281f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2820					Command_New:
.2820					Command_XNew:
.2820	20 be 28	jsr $28be			jsr 	ResetCodeAddress 			; point to first line
.2823	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2825	98		tya				tya
.2826	91 28		sta ($28),y			sta 	(codePtr),y
.2828	20 91 26	jsr $2691			jsr 	CommandClear 				; clear everything down.
.282b	4c e7 21	jmp $21e7			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cd8					breakCounter:
>0cd8								.fill 	1
.0cd9					breakIncrement:
>0cd9								.fill 	1
.282e					Command_Run:
.282e					XCommand_Run:
.282e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2830	9a		txs				txs
.2831	20 b8 28	jsr $28b8			jsr 	BreakOn 					; turn break on
.2834	20 91 26	jsr $2691			jsr 	CommandClear 				; clear everything.
.2837	20 be 28	jsr $28be			jsr 	ResetCodeAddress 			; back to the start.
.283a					Command_RunFrom:
.283a	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.283c					CRNextInstruction:
.283c	64 3a		stz $3a				stz 	softMemAlloc+1
.283e	ad d8 0c	lda $0cd8			lda 	breakCounter 				; check for break.
.2841	6d d9 0c	adc $0cd9			adc 	breakIncrement
.2844	8d d8 0c	sta $0cd8			sta 	breakCounter
.2847	90 05		bcc $284e			bcc 	_CRNoChecks
.2849	a2 02		ldx #$02		ldx	#2
.284b	20 f6 14	jsr $14f6		jsr	deviceHandler
.284e					_CRNoChecks
.284e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2850	10 1c		bpl $286e			bpl 	_CRNotToken
.2852	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2854	b0 0c		bcs $2862			bcs 	_CRExecute
.2856	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2858	b0 71		bcs $28cb			bcs 	Unimplemented
.285a	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.285c	b0 04		bcs $2862			bcs 	_CRExecute
.285e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2860	b0 16		bcs $2878			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2862					_CRExecute:
.2862	c8		iny				iny 								; consume it.
.2863	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2864	aa		tax				tax
.2865	20 6b 28	jsr $286b			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2868	4c 3c 28	jmp $283c			jmp 	CRNextInstruction
.286b					_CRRunRoutine:
.286b	7c d5 28	jmp ($28d5,x)			jmp 	(Group0Vectors,x)
.286e					_CRNotToken:
.286e	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2870	b0 59		bcs $28cb			bcs 	Unimplemented
.2872					_CRDefaultLet:
.2872	20 1a 21	jsr $211a			jsr 	CommandLet 					; do the default, LET
.2875	4c 3c 28	jmp $283c			jmp 	CRNextInstruction
.2878					_CRCheckIndirect:
.2878	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.287a	f0 0a		beq $2886			beq 	_CRAndCommand
.287c	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.287e	f0 f2		beq $2872			beq 	_CRDefaultLet
.2880	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2882	f0 ee		beq $2872			beq 	_CRDefaultLet
.2884	d0 45		bne $28cb			bne 	Unimplemented
.2886					_CRAndCommand:
.2886	c8		iny				iny 								; skip over the AND token
.2887	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2889	20 a3 28	jsr $28a3			jsr 	CommandAssembler 			; do the assembler command
.288c	4c 3c 28	jmp $283c			jmp 	CRNextInstruction 			; and loop round.
.288f					CommandShift1:
.288f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2891	10 38		bpl $28cb			bpl 	Unimplemented 				; we have an error as this should not happen.
.2893	c8		iny				iny 								; advance over it.
.2894	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2896	b0 0b		bcs $28a3			bcs 	CommandAssembler
.2898	0a		asl a				asl 	a 							; double into X
.2899	aa		tax				tax
.289a	7c 99 29	jmp ($2999,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.289d					CommandShift2:
.289d	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.289f	20 60 18	jsr $1860		jsr	extensionHandler
.28a2	60		rts				rts
.28a3					CommandAssembler:
.28a3	a2 02		ldx #$02		ldx	#2
.28a5	20 b4 13	jsr $13b4		jsr	assemblerHandler
.28a8	60		rts				rts
.28a9					CommandAssemblerLabel:
.28a9	a2 04		ldx #$04		ldx	#4
.28ab	20 b4 13	jsr $13b4		jsr	assemblerHandler
.28ae	60		rts				rts
.28af					CommandColon:
.28af	60		rts				rts
.28b0					CommandBreak:
.28b0	20 9b 2d	jsr $2d9b			jsr 	EvaluateRootInteger
.28b3	20 5c 34	jsr $345c			jsr 	MInt32Zero
.28b6	f0 02		beq $28ba			beq 	BreakOff
.28b8					BreakOn:
.28b8	a2 08		ldx #$08			ldx 	#8
.28ba					BreakOff:
.28ba	8e d9 0c	stx $0cd9			stx 	breakIncrement
.28bd	60		rts				rts
.28be					ResetCodeAddress:
.28be	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.28c1	85 28		sta $28				sta 	codePtr
.28c3	ad c9 0a	lda $0ac9			lda 	basePage+1
.28c6	85 29		sta $29				sta 	codePtr+1
.28c8	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.28ca	60		rts				rts
.28cb					Unimplemented:
.28cb	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.28cd	20 18 15	jsr $1518		jsr	errorHandler
.28d0					TKErr01:
.28d0					TKErr02:
.28d0					TKErr03:
.28d0					TKErr04:
.28d0					TKErr05:
.28d0					TKErr06:
.28d0					TKErr07:
.28d0					TKErr08:
.28d0					TKErr09:
.28d0					TKErr10:
.28d0					TKErr11:
.28d0					TKErr12:
.28d0					TKErr13:
.28d0					TKErr14:
.28d0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.28d2	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.28d5					Group0Vectors:
>28d5	ed 21					.word	AdvanceNextLine          ; $80 [[eol]]
>28d7	8f 28					.word	CommandShift1            ; $81 [[sh1]]
>28d9	9d 28					.word	CommandShift2            ; $82 [[sh2]]
>28db	d0 28					.word	TKErr09                  ; $83 [[sh3]]
>28dd	d0 28					.word	TKErr10                  ; $84 [[fpc]]
>28df	d0 28					.word	TKErr08                  ; $85 [[str]]
>28e1	82 2a					.word	AndHandler               ; $86 and
>28e3	6f 2a					.word	OrHandler                ; $87 or
>28e5	5c 2a					.word	XorHandler               ; $88 xor
>28e7	a4 2b					.word	CompareGreaterEq         ; $89 >=
>28e9	ae 2b					.word	CompareLessEq            ; $8a <=
>28eb	90 2b					.word	CompareGreater           ; $8b >
>28ed	86 2b					.word	CompareLess              ; $8c <
>28ef	7c 2b					.word	CompareEquals            ; $8d =
>28f1	9a 2b					.word	CompareNotEquals         ; $8e <>
>28f3	ed 29					.word	AddHandler               ; $8f +
>28f5	10 2a					.word	SubHandler               ; $90 -
>28f7	a8 2a					.word	ShrHandler               ; $91 >>
>28f9	95 2a					.word	ShlHandler               ; $92 <<
>28fb	23 2a					.word	MulHandler               ; $93 *
>28fd	36 2a					.word	DivHandler               ; $94 /
>28ff	49 2a					.word	ModHandler               ; $95 mod
>2901	e1 2a					.word	PowerHandler             ; $96 ^
>2903	bb 2a					.word	WordRefHandler           ; $97 !
>2905	ce 2a					.word	ByteRefHandler           ; $98 ?
>2907	ac 25					.word	Command_Repeat           ; $99 repeat
>2909	56 26					.word	Command_While            ; $9a while
>290b	01 22					.word	Command_FOR              ; $9b for
>290d	10 23					.word	CommandIf                ; $9c if
>290f	d0 28					.word	TKErr04                  ; $9d defproc
>2911	b9 25					.word	Command_Until            ; $9e until
>2913	79 26					.word	Command_Wend             ; $9f wend
>2915	62 22					.word	Command_NEXT             ; $a0 next
>2917	d0 28					.word	TKErr06                  ; $a1 then
>2919	4b 23					.word	Command_ENDIF            ; $a2 endif
>291b	bb 24					.word	ReturnProc               ; $a3 endproc
>291d	08 2d					.word	UnaryParenthesis         ; $a4 (
>291f	ea 2e					.word	UnaryLen                 ; $a5 len(
>2921	2e 2f					.word	UnarySgn                 ; $a6 sgn(
>2923	17 2f					.word	UnaryAbs                 ; $a7 abs(
>2925	87 2f					.word	Unary_Random             ; $a8 random(
>2927	d1 2f					.word	Unary_Page               ; $a9 page
>2929	31 34					.word	MInt32True               ; $aa true
>292b	35 34					.word	MInt32False              ; $ab false
>292d	9c 2f					.word	Unary_Min                ; $ac min(
>292f	a0 2f					.word	Unary_Max                ; $ad max(
>2931	a9 30					.word	UnarySys                 ; $ae sys(
>2933	52 30					.word	UnaryTimer               ; $af timer(
>2935	67 2e					.word	EventFunction            ; $b0 event(
>2937	7b 30					.word	UnaryGet                 ; $b1 get(
>2939	6b 30					.word	UnaryInkey               ; $b2 inkey(
>293b	22 30					.word	UnaryAlloc               ; $b3 alloc(
>293d	e2 30					.word	ExecChr                  ; $b4 chr$(
>293f	12 31					.word	ExecLeft                 ; $b5 left$(
>2941	2f 31					.word	ExecMid                  ; $b6 mid$(
>2943	57 31					.word	ExecRight                ; $b7 right$(
>2945	e9 2d					.word	Event_Str                ; $b8 str$(
>2947	18 2e					.word	UnaryVal                 ; $b9 val(
>2949	45 2f					.word	UnaryPeek                ; $ba peek(
>294b	4b 2f					.word	UnaryDeek                ; $bb deek(
>294d	51 2f					.word	UnaryLeek                ; $bc leek(
>294f	08 2f					.word	UnaryAsc                 ; $bd asc(
>2951	fc 2f					.word	UnaryIntToFloat          ; $be int(
>2953	0f 30					.word	UnaryFloatToInt          ; $bf float(
>2955	1b 2e					.word	UnaryIsVal               ; $c0 isval(
>2957	f9 30					.word	ExecUpper                ; $c1 upper$(
>2959	f6 30					.word	ExecLower                ; $c2 lower$(
>295b	df 2f					.word	UnaryReference           ; $c3 @
>295d	f5 2f					.word	UnaryComplement          ; $c4 ~
>295f	f2 2f					.word	UnaryHexMarker           ; $c5 &
>2961	94 30					.word	UnaryGetString           ; $c6 get$(
>2963	9a 30					.word	UnaryInkeyString         ; $c7 inkey$(
>2965	d1 30					.word	UnaryMem                 ; $c8 mem
>2967	d0 28					.word	TKErr01                  ; $c9 )
>2969	af 28					.word	CommandColon             ; $ca :
>296b	d0 28					.word	TKErr02                  ; $cb ,
>296d	d0 28					.word	TKErr03                  ; $cc ;
>296f	d5 21					.word	Command_Rem2             ; $cd '
>2971	d0 28					.word	TKErr07                  ; $ce to
>2973	d0 28					.word	TKErr05                  ; $cf step
>2975	4e 24					.word	CallProc                 ; $d0 proc
>2977	4c 23					.word	CommandLocal             ; $d1 local
>2979	0c 21					.word	Command_Dim              ; $d2 dim
>297b	d5 21					.word	Command_Rem              ; $d3 rem
>297d	1a 21					.word	CommandLet               ; $d4 let
>297f	56 1f					.word	Command_Input            ; $d5 input
>2981	45 23					.word	Command_ELSE             ; $d6 else
>2983	dd 20					.word	Command_VDU              ; $d7 vdu
>2985	0c 20					.word	Command_Print            ; $d8 print
>2987	be 1e					.word	CommandData              ; $d9 data
>2989	d0 28					.word	TKErr13                  ; $da image
>298b	d0 28					.word	TKErr12                  ; $db at
>298d	d0 28					.word	TKErr14                  ; $dc flip
>298f	fe 20					.word	Command_Assert           ; $dd assert
>2991	98 21					.word	Command_Poke             ; $de poke
>2993	9c 21					.word	Command_Doke             ; $df doke
>2995	a0 21					.word	Command_Loke             ; $e0 loke
>2997	ad 20					.word	Command_Ink              ; $e1 ink
>2999	b8 20					.word	Command_Paper            ; $e2 paper
>299b	a7 20					.word	Command_CLS              ; $e3 cls
>299d	c3 20					.word	Command_Locate           ; $e4 locate
>299f	a9 28					.word	CommandAssemblerLabel    ; $e5 .
>29a1	d0 28					.word	TKErr11                  ; $e6 #
>29a3	91 26					.word	CommandClear             ; $e7 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.29a5					Group1Vectors:
>29a5	c7 27					.word	CommandLoad              ; $86 load
>29a7	dc 27					.word	CommandSave              ; $87 save
>29a9	ec 26					.word	CommandList              ; $88 list
>29ab	20 28					.word	Command_New              ; $89 new
>29ad	b0 28					.word	CommandBreak             ; $8a break
>29af	2e 28					.word	Command_Run              ; $8b run
>29b1	93 1e					.word	CommandRead              ; $8c read
>29b3	c7 1e					.word	CommandRestore           ; $8d restore
>29b5	e7 21					.word	CommandEnd               ; $8e end
>29b7	e2 21					.word	CommandStop              ; $8f stop
>29b9	ea 21					.word	CommandXemu              ; $90 xemu
>29bb	24 1f					.word	CommandGOTO              ; $91 goto
>29bd	f9 1e					.word	CommandGOSUB             ; $92 gosub
>29bf	0c 1f					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.29c1					BinaryProcess:
.29c1	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.29c3	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.29c5	0a		asl a				asl 	a
.29c6	30 0e		bmi $29d6			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.29c8	18		clc				clc 								; return CC for integer
.29c9	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.29cb	f0 08		beq $29d5			beq 	_BPExit 					; if both integer then return with CC.
.29cd	20 db 29	jsr $29db			jsr 	BPMakeBothFloat 			; make both float
.29d0	a9 01		lda #$01			lda 	#$01 						; set result type to float
.29d2	95 48		sta $48,x			sta 	esType,x
.29d4	38		sec				sec 								; and return with carry set.
.29d5					_BPExit:
.29d5	60		rts				rts
.29d6					_BPStringType:
.29d6	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.29d8	20 18 15	jsr $1518		jsr	errorHandler
.29db					BPMakeBothFloat:
.29db	e8		inx				inx
.29dc	20 e0 29	jsr $29e0			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.29df	ca		dex				dex
.29e0					BPMakeFloat:
.29e0	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.29e2	4a		lsr a				lsr 	a
.29e3	b0 07		bcs $29ec			bcs 	_BPIsFloat 					; already a float if set.
.29e5	8a		txa				txa
.29e6	a2 1c		ldx #$1c		ldx	#28
.29e8	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.29eb	aa		tax				tax
.29ec					_BPIsFloat:
.29ec	60		rts				rts
.29ed					AddHandler:
.29ed	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo 				; dereference top two on stack.
.29f0	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.29f2	35 49		and $49,x			and 	esType+1,x
.29f4	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.29f6	d0 10		bne $2a08			bne 	_AHStringConcat				; concatenate strings.
.29f8	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.29fb	b0 03		bcs $2a00			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.29fd	4c 19 33	jmp $3319			jmp 	MInt32Add 							; else do it as integer.
.2a00					_IsFPOperation:
.2a00	8a		txa				txa 								; call the relevant fp routine
.2a01	a2 04		ldx #$04		ldx	#4
.2a03	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2a06	aa		tax				tax
.2a07	60		rts				rts
.2a08					_AHStringConcat:
.2a08	8a		txa				txa 								; handled by the string module.
.2a09	a2 06		ldx #$06		ldx	#6
.2a0b	20 e0 37	jsr $37e0		jsr	stringHandler
.2a0e	aa		tax				tax
.2a0f	60		rts				rts
.2a10					SubHandler:
.2a10	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2a13	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2a16	b0 03		bcs $2a1b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a18	4c 33 33	jmp $3333			jmp 	MInt32Sub 							; else do it as integer.
.2a1b					_IsFPOperation:
.2a1b	8a		txa				txa 								; call the relevant fp routine
.2a1c	a2 12		ldx #$12		ldx	#18
.2a1e	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2a21	aa		tax				tax
.2a22	60		rts				rts
.2a23					MulHandler:
.2a23	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2a26	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2a29	b0 03		bcs $2a2e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a2b	4c 4d 33	jmp $334d			jmp 	MInt32Multiply 							; else do it as integer.
.2a2e					_IsFPOperation:
.2a2e	8a		txa				txa 								; call the relevant fp routine
.2a2f	a2 0c		ldx #$0c		ldx	#12
.2a31	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2a34	aa		tax				tax
.2a35	60		rts				rts
.2a36					DivHandler:
.2a36	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2a39	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2a3c	b0 03		bcs $2a41			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a3e	4c 0a 32	jmp $320a			jmp 	MInt32SDivide 							; else do it as integer.
.2a41					_IsFPOperation:
.2a41	8a		txa				txa 								; call the relevant fp routine
.2a42	a2 08		ldx #$08		ldx	#8
.2a44	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2a47	aa		tax				tax
.2a48	60		rts				rts
.2a49					ModHandler:
.2a49	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2a4c	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2a4f	b0 03		bcs $2a54			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a51	4c 88 32	jmp $3288			jmp 	MInt32Modulus 							; else do it as integer.
.2a54					_IsFPOperation:
.2a54	8a		txa				txa 								; call the relevant fp routine
.2a55	a2 0a		ldx #$0a		ldx	#10
.2a57	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2a5a	aa		tax				tax
.2a5b	60		rts				rts
.2a5c					XorHandler:
.2a5c	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2a5f	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2a62	b0 03		bcs $2a67			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a64	4c bc 31	jmp $31bc			jmp 	MInt32Xor 							; else do it as integer.
.2a67					_IsFPOperation:
.2a67	8a		txa				txa 								; call the relevant fp routine
.2a68	a2 0a		ldx #$0a		ldx	#10
.2a6a	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2a6d	aa		tax				tax
.2a6e	60		rts				rts
.2a6f					OrHandler:
.2a6f	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2a72	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2a75	b0 03		bcs $2a7a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a77	4c a3 31	jmp $31a3			jmp 	MInt32Or 							; else do it as integer.
.2a7a					_IsFPOperation:
.2a7a	8a		txa				txa 								; call the relevant fp routine
.2a7b	a2 0a		ldx #$0a		ldx	#10
.2a7d	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2a80	aa		tax				tax
.2a81	60		rts				rts
.2a82					AndHandler:
.2a82	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2a85	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2a88	b0 03		bcs $2a8d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a8a	4c 8a 31	jmp $318a			jmp 	MInt32And 							; else do it as integer.
.2a8d					_IsFPOperation:
.2a8d	8a		txa				txa 								; call the relevant fp routine
.2a8e	a2 0a		ldx #$0a		ldx	#10
.2a90	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2a93	aa		tax				tax
.2a94	60		rts				rts
.2a95					ShlHandler:
.2a95	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2a98	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2a9b	b0 03		bcs $2aa0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2a9d	4c 16 2b	jmp $2b16			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.2aa0					_IsFPOperation:
.2aa0	8a		txa				txa 								; call the relevant fp routine
.2aa1	a2 0a		ldx #$0a		ldx	#10
.2aa3	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2aa6	aa		tax				tax
.2aa7	60		rts				rts
.2aa8					ShrHandler:
.2aa8	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2aab	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2aae	b0 03		bcs $2ab3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ab0	4c 19 2b	jmp $2b19			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2ab3					_IsFPOperation:
.2ab3	8a		txa				txa 								; call the relevant fp routine
.2ab4	a2 0a		ldx #$0a		ldx	#10
.2ab6	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2ab9	aa		tax				tax
.2aba	60		rts				rts
.2abb					WordRefHandler:
.2abb	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2abe	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2ac1	b0 03		bcs $2ac6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ac3	4c 08 2b	jmp $2b08			jmp 	MInt32WordIndirect 							; else do it as integer.
.2ac6					_IsFPOperation:
.2ac6	8a		txa				txa 								; call the relevant fp routine
.2ac7	a2 0a		ldx #$0a		ldx	#10
.2ac9	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2acc	aa		tax				tax
.2acd	60		rts				rts
.2ace					ByteRefHandler:
.2ace	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2ad1	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2ad4	b0 03		bcs $2ad9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ad6	4c 0c 2b	jmp $2b0c			jmp 	MInt32ByteIndirect 							; else do it as integer.
.2ad9					_IsFPOperation:
.2ad9	8a		txa				txa 								; call the relevant fp routine
.2ada	a2 0a		ldx #$0a		ldx	#10
.2adc	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2adf	aa		tax				tax
.2ae0	60		rts				rts
.2ae1					PowerHandler:
.2ae1	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo
.2ae4	20 c1 29	jsr $29c1			jsr 	BinaryProcess 				; check to see if either is float
.2ae7	b0 03		bcs $2aec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2ae9	4c f4 2a	jmp $2af4			jmp 	PowerInteger 							; else do it as integer.
.2aec					_IsFPOperation:
.2aec	8a		txa				txa 								; call the relevant fp routine
.2aed	a2 18		ldx #$18		ldx	#24
.2aef	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2af2	aa		tax				tax
.2af3	60		rts				rts
.2af4					PowerInteger:
.2af4	20 db 29	jsr $29db			jsr 	BPMakeBothFloat				; make them float.
.2af7	8a		txa				txa
.2af8	a2 18		ldx #$18		ldx	#24
.2afa	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2afd	a2 14		ldx #$14		ldx	#20
.2aff	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2b02	aa		tax				tax
.2b03	a9 00		lda #$00			lda 	#0 							; make type integer
.2b05	95 48		sta $48,x			sta 	esType,x
.2b07	60		rts				rts
.2b08					Mint32WordIndirect:
.2b08	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2b0a	d0 02		bne $2b0e			bne 	Min32Indirect
.2b0c					Mint32ByteIndirect:
.2b0c	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2b0e					Min32Indirect:
.2b0e	48		pha				pha 								; save the indirection
.2b0f	20 19 33	jsr $3319			jsr 	MInt32Add 					; add a!b a?b
.2b12	68		pla				pla 								; and set the type to reference.
.2b13	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2b15	60		rts				rts
.2b16					Mint32ShiftLeftX:
.2b16	18		clc				clc 								; CC shift left
.2b17	90 01		bcc $2b1a			bcc 	Mint32Shift
.2b19					Mint32ShiftRightX:
.2b19	38		sec				sec 								; CS shift right
.2b1a					Mint32Shift:
.2b1a	08		php				php 								; save carry flag on stack.
.2b1b	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2b1d	15 61		ora $61,x			ora 	esInt2+1,x
.2b1f	15 69		ora $69,x			ora 	esInt3+1,x
.2b21	d0 1e		bne $2b41			bne 	_MShiftZero
.2b23	b5 51		lda $51,x			lda 	esInt0+1,x
.2b25	c9 20		cmp #$20			cmp 	#32
.2b27	b0 18		bcs $2b41			bcs 	_MShiftZero
.2b29					_MShiftLoop:
.2b29	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2b2b	f0 12		beq $2b3f			beq 	_MShiftExit
.2b2d	d6 51		dec $51,x			dec 	esInt0+1,x
.2b2f	28		plp				plp 								; restore and save carry
.2b30	08		php				php
.2b31	90 06		bcc $2b39			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2b33	20 53 34	jsr $3453			jsr 	Mint32ShiftRight
.2b36	4c 29 2b	jmp $2b29			jmp 	_MShiftLoop
.2b39					_MShiftLeft:
.2b39	20 4a 34	jsr $344a			jsr 	Mint32ShiftLeft
.2b3c	4c 29 2b	jmp $2b29			jmp 	_MShiftLoop
.2b3f					_MShiftExit:
.2b3f	28		plp				plp	 								; throw saved carry and exit
.2b40	60		rts				rts
.2b41					_MShiftZero:
.2b41	4c 35 34	jmp $3435			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2b44					PerformComparison:
.2b44	20 be 2b	jsr $2bbe			jsr 	DereferenceTwo 				; make both values.
.2b47	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2b49	35 49		and $49,x			and 	esType+1,x
.2b4b	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.2b4c	30 1d		bmi $2b6b			bmi 	_PCIsString
.2b4e	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.2b50	15 49		ora $49,x			ora 	esType+1,x
.2b52	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2b53	30 22		bmi $2b77			bmi 	_PCError
.2b55	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2b57	f0 0f		beq $2b68			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2b59	20 db 29	jsr $29db			jsr 	BPMakeBothFloat 			; make both float
.2b5c	8a		txa				txa
.2b5d	a2 06		ldx #$06		ldx	#6
.2b5f	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2b62	86 32		stx $32				stx 	tempShort 					; save result
.2b64	aa		tax				tax
.2b65	a5 32		lda $32				lda 	tempShort
.2b67	60		rts				rts
.2b68					_PCIsInteger:
.2b68	4c d5 31	jmp $31d5			jmp 	MInt32Compare
.2b6b					_PCIsString:
.2b6b	8a		txa				txa 								; A has SP
.2b6c	a2 0a		ldx #$0a		ldx	#10
.2b6e	20 e0 37	jsr $37e0		jsr	stringHandler
.2b71	86 32		stx $32				stx 	tempShort 					; save result
.2b73	aa		tax				tax 								; put SP back in X and get result.
.2b74	a5 32		lda $32				lda 	tempShort
.2b76	60		rts				rts
.2b77					_PCError:
.2b77	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b79	20 18 15	jsr $1518		jsr	errorHandler
.2b7c					CompareEquals:
.2b7c	20 44 2b	jsr $2b44			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b7f	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2b81	f0 35		beq $2bb8			beq  	CompareTrue
.2b83	4c bb 2b	jmp $2bbb			jmp 	CompareFalse
.2b86					CompareLess:
.2b86	20 44 2b	jsr $2b44			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b89	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2b8b	f0 2b		beq $2bb8			beq  	CompareTrue
.2b8d	4c bb 2b	jmp $2bbb			jmp 	CompareFalse
.2b90					CompareGreater:
.2b90	20 44 2b	jsr $2b44			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b93	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2b95	f0 21		beq $2bb8			beq  	CompareTrue
.2b97	4c bb 2b	jmp $2bbb			jmp 	CompareFalse
.2b9a					CompareNotEquals:
.2b9a	20 44 2b	jsr $2b44			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2b9d	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.2b9f	d0 17		bne $2bb8			bne  	CompareTrue
.2ba1	4c bb 2b	jmp $2bbb			jmp 	CompareFalse
.2ba4					CompareGreaterEq:
.2ba4	20 44 2b	jsr $2b44			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2ba7	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2ba9	d0 0d		bne $2bb8			bne  	CompareTrue
.2bab	4c bb 2b	jmp $2bbb			jmp 	CompareFalse
.2bae					CompareLessEq:
.2bae	20 44 2b	jsr $2b44			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2bb1	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2bb3	d0 03		bne $2bb8			bne  	CompareTrue
.2bb5	4c bb 2b	jmp $2bbb			jmp 	CompareFalse
.2bb8					CompareTrue:
.2bb8	4c 31 34	jmp $3431			jmp 	MInt32True
.2bbb					CompareFalse:
.2bbb	4c 35 34	jmp $3435			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2bbe					DereferenceTwo:
.2bbe	e8		inx				inx
.2bbf	20 c3 2b	jsr $2bc3			jsr 	DereferenceOne
.2bc2	ca		dex				dex
.2bc3					DereferenceOne:
.2bc3	b5 48		lda $48,x			lda 	esType,x
.2bc5	10 3d		bpl $2c04			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2bc7	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2bc8	b0 3b		bcs $2c05			bcs 	_DRFloatDeReference
.2bca	98		tya				tya
.2bcb	48		pha				pha
.2bcc	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.2bce	85 2a		sta $2a				sta 	temp0
.2bd0	b5 58		lda $58,x			lda 	esInt1,x
.2bd2	85 2b		sta $2b				sta 	temp0+1
.2bd4	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2bd6	95 58		sta $58,x			sta 	esInt1,x
.2bd8	95 60		sta $60,x			sta 	esInt2,x
.2bda	95 68		sta $68,x			sta 	esInt3,x
.2bdc	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.2bde	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2be0	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2be1	30 0d		bmi $2bf0			bmi 	_DeRefString 				; string, 2 bytes only
.2be3	d0 11		bne $2bf6			bne 	_DeRefByte 					; byte 1 byte only
.2be5					_DeRefLong:
.2be5	a0 03		ldy #$03			ldy 	#3
.2be7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2be9	95 68		sta $68,x			sta 	esInt3,x
.2beb	88		dey				dey
.2bec	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bee	95 60		sta $60,x			sta 	esInt2,x
.2bf0					_DeRefString:
.2bf0	a0 01		ldy #$01			ldy 	#1
.2bf2	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bf4	95 58		sta $58,x			sta 	esInt1,x
.2bf6					_DeRefByte:
.2bf6	a0 00		ldy #$00			ldy 	#0
.2bf8	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bfa	95 50		sta $50,x			sta 	esInt0,x
.2bfc	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2bfe	29 40		and #$40			and 	#$40
.2c00	95 48		sta $48,x			sta 	esType,x
.2c02	68		pla				pla
.2c03	a8		tay				tay
.2c04					_DRNotReference
.2c04	60		rts				rts
.2c05					_DRFloatDereference:
.2c05	20 8f 21	jsr $218f			jsr 	TOSToTemp0 					; address to deref in temp0
.2c08	8a		txa				txa
.2c09	a2 1e		ldx #$1e		ldx	#30
.2c0b	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2c0e	aa		tax				tax
.2c0f	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2c11	95 48		sta $48,x			sta 	esType,x
.2c13	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2c14					EvaluateLevel:
.2c14	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2c16	b0 1e		bcs $2c36			bcs 	_ELStack
.2c18	48		pha				pha 								; save precedence level.
.2c19	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2c1b	95 50		sta $50,x			sta 	esInt0,x
.2c1d	95 58		sta $58,x			sta 	esInt1,x
.2c1f	95 60		sta $60,x			sta 	esInt2,x
.2c21	95 68		sta $68,x			sta 	esInt3,x
.2c23	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2c25	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2c27	30 26		bmi $2c4f			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2c29	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2c2a	30 0f		bmi $2c3b			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2c2c	8a		txa				txa 								; stack level in X
.2c2d	a2 02		ldx #$02		ldx	#2
.2c2f	20 d7 43	jsr $43d7		jsr	variableHandler
.2c32	aa		tax				tax
.2c33	4c 78 2c	jmp $2c78			jmp		_ELHasTerm
.2c36					_ELStack:
.2c36	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2c38	20 18 15	jsr $1518		jsr	errorHandler
.2c3b					_ELIsConstant:
.2c3b	4a		lsr a				lsr 	a 							; get the value back
.2c3c	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2c3e	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2c40					_ELCheckNext:
.2c40	c8		iny				iny 								; look at next
.2c41	b1 28		lda ($28),y			lda 	(codePtr),y
.2c43	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2c45	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2c47	b0 2f		bcs $2c78			bcs 	_ELHasTerm 					; done getting the constant.
.2c49	20 11 2d	jsr $2d11			jsr 	ELShiftByteIn 				; shift byte into position.
.2c4c	4c 40 2c	jmp $2c40			jmp 	_ELCheckNext
.2c4f					_ELIsToken:
.2c4f	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2c51	f0 0f		beq $2c62			beq 	_ELIsString
.2c53	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2c55	d0 5f		bne $2cb6			bne 	_ELCheckUnary
.2c57	8a		txa				txa 								; put X into A
.2c58	c8		iny				iny 								; skip over the float marker
.2c59	a2 1a		ldx #$1a		ldx	#26
.2c5b	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2c5e	aa		tax				tax 								; restore X
.2c5f	4c 78 2c	jmp $2c78			jmp 	_ELHasTerm
.2c62					_ELIsString:
.2c62	98		tya				tya 								; address of string is codePtr+y+1
.2c63	38		sec				sec
.2c64	65 28		adc $28				adc 	codePtr
.2c66	95 50		sta $50,x			sta 	esInt0,x
.2c68	a5 29		lda $29				lda 	codePtr+1
.2c6a	69 00		adc #$00			adc 	#0
.2c6c	95 58		sta $58,x			sta 	esInt1,x
.2c6e	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2c70	95 48		sta $48,x			sta 	esType,x
.2c72	c8		iny				iny 								; skip over string.
.2c73	98		tya				tya
.2c74	38		sec				sec									; +1 for the length itself.
.2c75	71 28		adc ($28),y			adc 	(codePtr),y
.2c77	a8		tay				tay 								; and fall through to term loop code.
.2c78					_ELHasTerm:
.2c78	b1 28		lda ($28),y			lda 	(codePtr),y
.2c7a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2c7c	90 04		bcc $2c82			bcc 	_ELPopExit
.2c7e	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2c80	90 02		bcc $2c84			bcc 	_ELHasBinaryTerm
.2c82					_ELPopExit:
.2c82	68		pla				pla
.2c83					_ELExit:
.2c83	60		rts				rts
.2c84					_ELHasBinaryTerm:
.2c84	84 32		sty $32				sty 	tempShort 					; save position
.2c86	a8		tay				tay 								; use token as an index and get the precedence.
.2c87	b9 b9 2c	lda $2cb9,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2c8a	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2c8c	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2c8e	68		pla				pla 								; restore current level.
.2c8f	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2c91	b0 f0		bcs $2c83			bcs 	_ELExit
.2c93	48		pha				pha 								; save current level back on the stack.
.2c94	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2c96	48		pha				pha
.2c97	c8		iny				iny
.2c98	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2c99	a5 32		lda $32				lda 	tempShort
.2c9b	20 14 2c	jsr $2c14			jsr 	EvaluateLevel
.2c9e	ca		dex				dex
.2c9f	68		pla				pla 								; get the operator back out.
.2ca0					_ELExecuteA:
.2ca0	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2ca2	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2ca3	aa		tax				tax
.2ca4	bd d5 28	lda $28d5,x			lda 	Group0Vectors,x
.2ca7	85 2a		sta $2a				sta 	temp0
.2ca9	bd d6 28	lda $28d6,x			lda 	Group0Vectors+1,x
.2cac	85 2b		sta $2b				sta 	temp0+1
.2cae	a6 32		ldx $32				ldx 	tempShort
.2cb0	20 fd 2c	jsr $2cfd			jsr 	_ELCallTemp0
.2cb3	4c 78 2c	jmp $2c78			jmp 	_ELHasTerm 					; and loop back round.
.2cb6					_ELCheckUnary:
.2cb6	c8		iny				iny 								; skip over token.
.2cb7	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2cb9	f0 19		beq $2cd4			beq 	_ELMinus
.2cbb	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2cbd	f0 2c		beq $2ceb			beq 	_ELIndirect
.2cbf	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2cc1	f0 28		beq $2ceb			beq 	_ELIndirect
.2cc3	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2cc5	f0 39		beq $2d00			beq 	_ELExtension
.2cc7	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2cc9	90 04		bcc $2ccf			bcc 	_ELUSyntax
.2ccb	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2ccd	90 d1		bcc $2ca0			bcc 	_ELExecuteA 				; if so do that token.
.2ccf					_ELUSyntax:
.2ccf	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2cd1	20 18 15	jsr $1518		jsr	errorHandler
.2cd4					_ELMinus:
.2cd4	20 66 2d	jsr $2d66			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2cd7	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2cd9	f0 0a		beq $2ce5			beq 	_ELMinusInteger
.2cdb	8a		txa				txa
.2cdc	a2 0e		ldx #$0e		ldx	#14
.2cde	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2ce1	aa		tax				tax
.2ce2	4c 78 2c	jmp $2c78			jmp 	_ELHasTerm
.2ce5					_ELMinusInteger:
.2ce5	20 ef 33	jsr $33ef			jsr 	MInt32Negate 				; do int negate
.2ce8	4c 78 2c	jmp $2c78			jmp 	_ELHasTerm
.2ceb					_ELIndirect:
.2ceb	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2cec	20 6f 2d	jsr $2d6f			jsr 	EvaluateIntegerTerm 		; integer address
.2cef	68		pla				pla
.2cf0	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2cf2	f0 02		beq $2cf6			beq 	_ELHaveModifier
.2cf4	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2cf6					_ELHaveModifier:
.2cf6	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2cf8	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2cfa	4c 78 2c	jmp $2c78			jmp 	_ELHasTerm
.2cfd					_ELCallTemp0:
.2cfd	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2d00					_ELExtension:
.2d00	8a		txa				txa 								; stack pos in A
.2d01	20 60 18	jsr $1860		jsr	extensionHandler
.2d04	aa		tax				tax 								; restore stack
.2d05	4c 78 2c	jmp $2c78			jmp 	_ELHasTerm
.2d08					UnaryParenthesis:
.2d08	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2d0a	20 14 2c	jsr $2c14			jsr 	EvaluateLevel
.2d0d	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; check for )
.2d10	60		rts				rts
.2d11					ELShiftByteIn:
.2d11	48		pha				pha 								; save bits to shift in.
.2d12	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2d14	48		pha				pha
.2d15	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2d17	95 68		sta $68,x			sta 	esInt3,x
.2d19	b5 58		lda $58,x			lda 	esInt1,x
.2d1b	95 60		sta $60,x			sta 	esInt2,x
.2d1d	b5 50		lda $50,x			lda 	esInt0,x
.2d1f	95 58		sta $58,x			sta 	esInt1,x
.2d21	a9 00		lda #$00			lda 	#0
.2d23	95 50		sta $50,x			sta 	esInt0,x
.2d25	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2d26	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2d28	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2d2a					_ELShiftLoop:
.2d2a	4a		lsr a				lsr 	a
.2d2b	76 68		ror $68,x			ror 	esInt3,x
.2d2d	76 60		ror $60,x			ror 	esInt2,x
.2d2f	76 58		ror $58,x			ror 	esInt1,x
.2d31	76 50		ror $50,x			ror 	esInt0,x
.2d33	c9 01		cmp #$01			cmp 	#1
.2d35	d0 f3		bne $2d2a			bne 	_ELShiftLoop
.2d37	68		pla				pla 								; get original 6 bit value and OR in.
.2d38	29 3f		and #$3f			and 	#$3F
.2d3a	15 50		ora $50,x			ora 	esInt0,x
.2d3c	95 50		sta $50,x			sta 	esInt0,x
.2d3e	60		rts				rts
.2d3f					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2d3f	01					.byte	$01			; $86 and
>2d40	01					.byte	$01			; $87 or
>2d41	01					.byte	$01			; $88 xor
>2d42	02					.byte	$02			; $89 >=
>2d43	02					.byte	$02			; $8a <=
>2d44	02					.byte	$02			; $8b >
>2d45	02					.byte	$02			; $8c <
>2d46	02					.byte	$02			; $8d =
>2d47	02					.byte	$02			; $8e <>
>2d48	03					.byte	$03			; $8f +
>2d49	03					.byte	$03			; $90 -
>2d4a	04					.byte	$04			; $91 >>
>2d4b	04					.byte	$04			; $92 <<
>2d4c	04					.byte	$04			; $93 *
>2d4d	04					.byte	$04			; $94 /
>2d4e	04					.byte	$04			; $95 mod
>2d4f	05					.byte	$05			; $96 ^
>2d50	06					.byte	$06			; $97 !
>2d51	06					.byte	$06			; $98 ?
>2d52	82					.byte	$82			; $99 repeat
>2d53	82					.byte	$82			; $9a while
>2d54	82					.byte	$82			; $9b for
>2d55	82					.byte	$82			; $9c if
>2d56	82					.byte	$82			; $9d defproc
>2d57	80					.byte	$80			; $9e until
>2d58	80					.byte	$80			; $9f wend
>2d59	80					.byte	$80			; $a0 next
>2d5a	80					.byte	$80			; $a1 then
>2d5b	80					.byte	$80			; $a2 endif
>2d5c	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2d5d					EvaluateTerm:
.2d5d	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2d5f	20 14 2c	jsr $2c14			jsr 	EvaluateLevel
.2d62	20 c3 2b	jsr $2bc3			jsr 	DereferenceOne
.2d65	60		rts				rts
.2d66					EvaluateNumericTerm:
.2d66	20 5d 2d	jsr $2d5d			jsr 	EvaluateTerm
.2d69	b5 48		lda $48,x			lda 	esType,x
.2d6b	0a		asl a				asl 	a 							; see if it's a string.
.2d6c	30 09		bmi $2d77			bmi 	ENTType
.2d6e	60		rts				rts
.2d6f					EvaluateIntegerTerm:
.2d6f	20 5d 2d	jsr $2d5d			jsr 	EvaluateTerm
.2d72	b5 48		lda $48,x			lda 	esType,x
.2d74	d0 01		bne $2d77			bne 	ENTType
.2d76	60		rts				rts
.2d77					ENTType:
.2d77	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2d79	20 18 15	jsr $1518		jsr	errorHandler
.2d7c					EvaluateRoot:
.2d7c	a2 00		ldx #$00			ldx 	#0
.2d7e					Evaluate:
.2d7e	a9 00		lda #$00			lda 	#0
.2d80	20 14 2c	jsr $2c14			jsr 	EvaluateLevel
.2d83	20 c3 2b	jsr $2bc3			jsr 	DereferenceOne
.2d86	60		rts				rts
.2d87					EvaluateNumeric:
.2d87	20 7e 2d	jsr $2d7e			jsr 	Evaluate
.2d8a	b5 48		lda $48,x			lda 	esType,x
.2d8c	0a		asl a				asl 	a 							; see if it's a string.
.2d8d	30 e8		bmi $2d77			bmi 	ENTType
.2d8f	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2d90	4a		lsr a				lsr 	a
.2d91	60		rts				rts
.2d92					EvaluateString:
.2d92	20 7e 2d	jsr $2d7e			jsr 	Evaluate
.2d95	b5 48		lda $48,x			lda 	esType,x
.2d97	0a		asl a				asl 	a 							; see if it's a string.
.2d98	10 dd		bpl $2d77			bpl 	ENTType
.2d9a	60		rts				rts
.2d9b					EvaluateRootInteger:
.2d9b	a2 00		ldx #$00			ldx 	#0
.2d9d					EvaluateInteger:
.2d9d	20 7e 2d	jsr $2d7e			jsr 	Evaluate
.2da0	b5 48		lda $48,x			lda 	esType,x
.2da2	d0 d3		bne $2d77			bne 	ENTType
.2da4	60		rts				rts
.2da5					EvaluateSmallInteger:
.2da5	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger
.2da8	b5 58		lda $58,x			lda 	esInt1,x
.2daa	15 60		ora $60,x			ora 	esInt2,x
.2dac	15 68		ora $68,x			ora 	esInt3,x
.2dae	d0 03		bne $2db3			bne 	_ESIValue
.2db0	b5 50		lda $50,x			lda 	esInt0,x
.2db2	60		rts				rts
.2db3					_ESIValue:
.2db3	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2db5	20 18 15	jsr $1518		jsr	errorHandler
.2db8					LinkEvaluate:
.2db8	aa		tax				tax
.2db9	20 7e 2d	jsr $2d7e			jsr 	Evaluate
.2dbc	8a		txa				txa
.2dbd	60		rts				rts
.2dbe					LinkEvaluateTerm:
.2dbe	aa		tax				tax
.2dbf	20 5d 2d	jsr $2d5d			jsr 	EvaluateTerm
.2dc2	8a		txa				txa
.2dc3	60		rts				rts
.2dc4					LinkEvaluateInteger:
.2dc4	aa		tax				tax
.2dc5	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger
.2dc8	8a		txa				txa
.2dc9	60		rts				rts
.2dca					LinkEvaluateString:
.2dca	aa		tax				tax
.2dcb	20 92 2d	jsr $2d92			jsr 	EvaluateString
.2dce	8a		txa				txa
.2dcf	60		rts				rts
.2dd0					LinkEvaluateSmallInt:
.2dd0	aa		tax				tax
.2dd1	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger
.2dd4	8a		txa				txa
.2dd5	60		rts				rts
.2dd6					EvaluateReference:
.2dd6	ad 50 2d	lda $2d50			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2dd9	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2dda	e9 01		sbc #$01			sbc 	#1
.2ddc	20 14 2c	jsr $2c14			jsr 	EvaluateLevel
.2ddf	b5 48		lda $48,x			lda 	esType,x
.2de1	10 01		bpl $2de4			bpl 	_ERFail
.2de3	60		rts				rts
.2de4					_ERFail:
.2de4	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2de6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2de9					Event_Str:
.2de9	20 87 2d	jsr $2d87			jsr 	EvaluateNumeric 			; get a number.
.2dec	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2dee	d0 13		bne $2e03			bne 	_ESFloat
.2df0	20 46 2e	jsr $2e46			jsr 	ConvertGetBase 				; get base, or default.
.2df3	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2df5	85 2a		sta $2a				sta 	temp0
.2df7	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2df9	85 2b		sta $2b				sta 	1+(temp0)
.2dfb	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2dfd	20 8b 33	jsr $338b			jsr 	MInt32ToString 				; convert to string.
.2e00	4c 10 2e	jmp $2e10			jmp 	_ESCloneExit 				; clone and exit.
.2e03					_ESFloat:
.2e03	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; check closing )
.2e06	20 8f 21	jsr $218f			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2e09	8a		txa				txa
.2e0a	a2 16		ldx #$16		ldx	#22
.2e0c	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2e0f	aa		tax				tax
.2e10					_ESCloneExit:
.2e10	8a		txa				txa
.2e11	a2 04		ldx #$04		ldx	#4
.2e13	20 e0 37	jsr $37e0		jsr	stringHandler
.2e16	aa		tax				tax
.2e17	60		rts				rts
.2e18					UnaryVal:
.2e18	38		sec				sec 								; Carry set to return value
.2e19	b0 01		bcs $2e1c			bcs 	ValueMain
.2e1b					UnaryIsVal:
.2e1b	18		clc				clc									; Carry clear to return legitimacy
.2e1c					ValueMain:
.2e1c	08		php				php 								; save results (CS is value, CC is validation)
.2e1d	20 92 2d	jsr $2d92			jsr 	EvaluateString
.2e20	20 46 2e	jsr $2e46			jsr 	ConvertGetBase 				; get base, if any.
.2e23	98		tya				tya
.2e24	48		pha				pha
.2e25	20 8f 21	jsr $218f			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2e28	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2e2a	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2e2c	20 a3 32	jsr $32a3			jsr 	MInt32FromString 			; convert it back from a string.
.2e2f	b0 0c		bcs $2e3d			bcs 	_VMSuccess 					; successfully converted.
.2e31	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2e33	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2e35	f0 00		beq $2e37			beq 	_VMFailed 	 				; so we failed.
.2e37					_VMFailed:
.2e37	68		pla				pla
.2e38	a8		tay				tay
.2e39	28		plp				plp
.2e3a	4c 35 34	jmp $3435			jmp 	MInt32False 				; return 0 whatever.
.2e3d					_VMSuccess:
.2e3d	68		pla				pla
.2e3e	a8		tay				tay
.2e3f	28		plp				plp 								; if CS the it was val() so we want the value.
.2e40	b0 03		bcs $2e45			bcs 	_VMExit
.2e42	4c 31 34	jmp $3431			jmp 	MInt32True 					; otherwise return true as successful.
.2e45					_VMExit:
.2e45	60		rts				rts
.2e46					ConvertGetBase:
.2e46	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2e48	95 51		sta $51,x			sta 	esInt0+1,x
.2e4a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2e4c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2e4e	d0 0e		bne $2e5e			bne 	_CGBDone 					; not found, should be )
.2e50	e8		inx				inx 								; next level
.2e51	c8		iny				iny 								; skip comma.
.2e52	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger		; evaluate the base.
.2e55	ca		dex				dex
.2e56	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2e58	90 08		bcc $2e62			bcc 	_CGBValue 					; (it should work as high as 37)
.2e5a	c9 11		cmp #$11			cmp 	#17
.2e5c	b0 04		bcs $2e62			bcs 	_CGBValue
.2e5e					_CGBDone:
.2e5e	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.2e61	60		rts				rts
.2e62					_CGBValue:
.2e62	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2e64	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2e67					EventFunction:
.2e67	20 d6 2d	jsr $2dd6			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2e6a	b5 48		lda $48,x			lda 	esType,x
.2e6c	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2e6e	d0 5b		bne $2ecb			bne 	_EFType
.2e70	20 b5 34	jsr $34b5			jsr 	CheckComma
.2e73	e8		inx				inx
.2e74	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2e77	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; finish off with the right bracket
.2e7a	ca		dex				dex
.2e7b	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2e7d	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2e7f	15 60		ora $60,x			ora 	esInt2,x
.2e81	15 68		ora $68,x			ora 	esInt3,x
.2e83	d0 41		bne $2ec6			bne 	_EFValue
.2e85	98		tya				tya
.2e86	48		pha				pha
.2e87	8a		txa				txa
.2e88	48		pha				pha
.2e89	a2 1c		ldx #$1c		ldx	#28
.2e8b	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e8e	84 2d		sty $2d				sty 	temp1+1
.2e90	85 2c		sta $2c				sta 	temp1
.2e92	68		pla				pla
.2e93	aa		tax				tax
.2e94	20 8f 21	jsr $218f			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2e97	a0 03		ldy #$03			ldy 	#3							; if -ve
.2e99	b1 2a		lda ($2a),y			lda 	(temp0),y
.2e9b	30 23		bmi $2ec0			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2e9d	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2e9f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ea1	c8		iny				iny
.2ea2	11 2a		ora ($2a),y			ora 	(temp0),y
.2ea4	f0 17		beq $2ebd			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2ea6	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2ea8	38		sec				sec
.2ea9	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eab	e5 2c		sbc $2c				sbc 	temp1
.2ead	c8		iny				iny
.2eae	b1 2a		lda ($2a),y			lda 	(temp0),y
.2eb0	e5 2d		sbc $2d				sbc 	temp1+1
.2eb2	10 0c		bpl $2ec0			bpl 	_EFFail 					; if trigger >= timer then return False
.2eb4	20 d0 2e	jsr $2ed0			jsr 	SetEventTimer 				; reset the timer for next time.
.2eb7	20 31 34	jsr $3431			jsr	 	MInt32True 					; and treutn true as fired.
.2eba	68		pla				pla
.2ebb	a8		tay				tay
.2ebc	60		rts				rts
.2ebd					_EFInitialise:
.2ebd	20 d0 2e	jsr $2ed0			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2ec0					_EFFail:
.2ec0	68		pla				pla
.2ec1	a8		tay				tay
.2ec2	20 35 34	jsr $3435			jsr 	MInt32False
.2ec5	60		rts				rts
.2ec6					_EFValue:
.2ec6	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ec8	20 18 15	jsr $1518		jsr	errorHandler
.2ecb					_EFType:
.2ecb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2ecd	20 18 15	jsr $1518		jsr	errorHandler
.2ed0					SetEventTimer:
.2ed0	a0 00		ldy #$00			ldy 	#0
.2ed2	18		clc				clc
.2ed3	a5 2c		lda $2c				lda 	temp1
.2ed5	75 51		adc $51,x			adc 	esInt0+1,x
.2ed7	91 2a		sta ($2a),y			sta		(temp0),y
.2ed9	c8		iny				iny
.2eda	a5 2d		lda $2d				lda 	temp1+1
.2edc	75 59		adc $59,x			adc 	esInt1+1,x
.2ede	91 2a		sta ($2a),y			sta		(temp0),y
.2ee0	88		dey				dey
.2ee1	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2ee3	d0 04		bne $2ee9			bne 	_SETExit 					; zero means initialise.....
.2ee5	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2ee7	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2ee9					_SETExit:
.2ee9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2eea					UnaryLen:
.2eea	20 f8 2e	jsr $2ef8			jsr 	ULStart
.2eed					ULFinish:
.2eed	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2eef	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2ef1	20 44 34	jsr $3444			jsr 	MInt32Set8Bit 				; write it out.
.2ef4	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.2ef7	60		rts				rts
.2ef8	20 92 2d	jsr $2d92	ULStart:jsr 	EvaluateString
.2efb	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2efd	85 2a		sta $2a				sta 	temp0
.2eff	b5 58		lda $58,x			lda 	esInt1,x
.2f01	85 2b		sta $2b				sta 	temp0+1
.2f03	84 32		sty $32				sty 	tempShort 					; get length
.2f05	a0 00		ldy #$00			ldy 	#0
.2f07	60		rts				rts
.2f08					UnaryAsc:
.2f08	20 f8 2e	jsr $2ef8			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2f0b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2f0d	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2f0e	c9 00		cmp #$00			cmp 	#0
.2f10	d0 db		bne $2eed			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2f12	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2f14	20 18 15	jsr $1518		jsr	errorHandler
.2f17					UnaryAbs:
.2f17	20 87 2d	jsr $2d87			jsr 	EvaluateNumeric 			; some numeric value
.2f1a	b0 07		bcs $2f23			bcs 	_UAFloat 					; CS then float, so use that function
.2f1c	20 ea 33	jsr $33ea			jsr 	MInt32Absolute 				; int version
.2f1f	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.2f22	60		rts				rts
.2f23					_UAFloat:
.2f23	8a		txa				txa 								; float version
.2f24	a2 02		ldx #$02		ldx	#2
.2f26	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2f29	aa		tax				tax
.2f2a	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.2f2d	60		rts				rts
.2f2e					UnarySgn:
.2f2e	20 87 2d	jsr $2d87			jsr 	EvaluateNumeric 			; same as above but sign of value
.2f31	b0 07		bcs $2f3a			bcs 	_USFloat
.2f33	20 22 34	jsr $3422			jsr 	MInt32Sign
.2f36	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.2f39	60		rts				rts
.2f3a					_USFloat:
.2f3a	8a		txa				txa
.2f3b	a2 10		ldx #$10		ldx	#16
.2f3d	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.2f40	aa		tax				tax
.2f41	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.2f44	60		rts				rts
.2f45					UnaryPeek:
.2f45	20 71 2f	jsr $2f71			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2f48	4c 65 2f	jmp $2f65			jmp 	PDLByte0
.2f4b					UnaryDeek:
.2f4b	20 71 2f	jsr $2f71			jsr 	PDLCode
.2f4e	4c 5f 2f	jmp $2f5f			jmp 	PDLByte1
.2f51					UnaryLeek:
.2f51	20 71 2f	jsr $2f71			jsr 	PDLCode
.2f54	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2f56	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f58	95 68		sta $68,x			sta 	esInt3,x
.2f5a	88		dey				dey
.2f5b	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f5d	95 60		sta $60,x			sta 	esInt2,x
.2f5f					PDLByte1:
.2f5f	a0 01		ldy #$01			ldy 	#1
.2f61	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f63	95 58		sta $58,x			sta 	esInt1,x
.2f65					PDLByte0:
.2f65	a0 00		ldy #$00			ldy 	#0
.2f67	b1 2a		lda ($2a),y			lda 	(temp0),y
.2f69	95 50		sta $50,x			sta 	esInt0,x
.2f6b	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2f6d	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; check right and return
.2f70	60		rts				rts
.2f71					PDLCode:
.2f71	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger 			; some address
.2f74	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2f76	85 2a		sta $2a				sta 	temp0
.2f78	b5 58		lda $58,x			lda 	esInt1,x
.2f7a	85 2b		sta $2b				sta 	temp0+1
.2f7c	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2f7e	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2f80	95 60		sta $60,x			sta 	esInt2,x
.2f82	95 68		sta $68,x			sta 	esInt3,x
.2f84	84 32		sty $32				sty 	tempShort 					; save Y
.2f86	60		rts				rts
.2f87					Unary_Random:
.2f87	20 65 34	jsr $3465			jsr 	MInt32Random 				; generate random number.
.2f8a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2f8c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2f8e	f0 08		beq $2f98			beq 	_URExit
.2f90	e8		inx				inx 								; load range 0..r-1 into +1
.2f91	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger
.2f94	ca		dex				dex
.2f95	20 88 32	jsr $3288			jsr 	MInt32Modulus 				; calculate random % modulus
.2f98					_URExit:
.2f98	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; check right and return
.2f9b	60		rts				rts
.2f9c					Unary_Min:
.2f9c	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2f9e	d0 02		bne $2fa2			bne 	UnaryMBody
.2fa0					Unary_Max:
.2fa0	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2fa2					UnaryMBody:
.2fa2	48		pha				pha 								; save comparator on stack, shows min or max
.2fa3	20 7e 2d	jsr $2d7e			jsr 	Evaluate 					; get the first thing to check
.2fa6					_UnaryMLoop:
.2fa6	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2fa8	c8		iny				iny
.2fa9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2fab	f0 09		beq $2fb6			beq 	_UnaryMExit
.2fad	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2faf	f0 07		beq $2fb8			beq 	_UnaryMCompare
.2fb1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2fb3	20 18 15	jsr $1518		jsr	errorHandler
.2fb6					_UnaryMExit:
.2fb6	68		pla				pla 								; done so throw comparator and return.
.2fb7	60		rts				rts
.2fb8					_UnaryMCompare:
.2fb8	e8		inx				inx 								; get the 2nd thing to evaluate
.2fb9	20 7e 2d	jsr $2d7e			jsr 	Evaluate
.2fbc	ca		dex				dex
.2fbd	20 44 2b	jsr $2b44			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2fc0	85 32		sta $32				sta 	tempShort 					; save result
.2fc2	68		pla				pla 								; get what we need
.2fc3	48		pha				pha
.2fc4	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2fc6	d0 de		bne $2fa6			bne 	_UnaryMLoop 				; no, try another value.
.2fc8	20 35 34	jsr $3435			jsr 	MInt32False 				; promote 2nd to 1st.
.2fcb	20 19 33	jsr $3319			jsr 	MInt32Add
.2fce	4c a6 2f	jmp $2fa6			jmp 	_UnaryMLoop
.2fd1					Unary_Page:
.2fd1	20 35 34	jsr $3435			jsr 	MInt32False 				; zero
.2fd4	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2fd7	95 50		sta $50,x			sta 	esInt0,x
.2fd9	ad c9 0a	lda $0ac9			lda 	basePage+1
.2fdc	95 58		sta $58,x			sta 	esInt1,x
.2fde	60		rts				rts
.2fdf					UnaryReference:
.2fdf	a9 0f		lda #$0f			lda 	#15
.2fe1	20 14 2c	jsr $2c14			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2fe4	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2fe6	10 05		bpl $2fed			bpl 	UType
.2fe8	a9 00		lda #$00			lda 	#0 							; make it an integer
.2fea	95 48		sta $48,x			sta 	esType,x
.2fec	60		rts				rts
.2fed					UType:
.2fed	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2fef	20 18 15	jsr $1518		jsr	errorHandler
.2ff2					UnaryHexMarker:
.2ff2	4c 6f 2d	jmp $2d6f			jmp 	EvaluateIntegerTerm
.2ff5					UnaryComplement:
.2ff5	20 6f 2d	jsr $2d6f			jsr 	EvaluateIntegerTerm
.2ff8	20 09 34	jsr $3409			jsr 	MInt32Not
.2ffb	60		rts				rts
.2ffc					UnaryIntToFloat:
.2ffc	20 87 2d	jsr $2d87			jsr 	EvaluateNumeric				; some number
.2fff	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.3001	d0 0b		bne $300e			bne 	_UIFExit
.3003	8a		txa				txa 								; convert and set type
.3004	a2 1c		ldx #$1c		ldx	#28
.3006	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.3009	aa		tax				tax
.300a	a9 01		lda #$01			lda 	#1
.300c	95 48		sta $48,x			sta 	esType,x
.300e					_UIFExit:
.300e	60		rts				rts
.300f					UnaryFloatToInt:
.300f	20 87 2d	jsr $2d87			jsr 	EvaluateNumeric 			; the number
.3012	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.3014	f0 0b		beq $3021			beq 	_UFIExit
.3016	8a		txa				txa 								; convert to int
.3017	a2 14		ldx #$14		ldx	#20
.3019	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.301c	aa		tax				tax
.301d	a9 00		lda #$00			lda 	#0 							; set type
.301f	95 48		sta $48,x			sta 	esType,x
.3021					_UFIExit:
.3021	60		rts				rts
.3022					UnaryAlloc:
.3022	e8		inx				inx 								; evaluate memory required
.3023	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger
.3026	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.3029	ca		dex				dex
.302a	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.302c	15 69		ora $69,x			ora 	esInt3+1,x
.302e	d0 1d		bne $304d			bne 	_UABadValue
.3030	20 35 34	jsr $3435			jsr 	MInt32False					; zero return.
.3033	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.3035	95 58		sta $58,x			sta 	esInt1,x
.3037	a5 35		lda $35				lda 	lowMemory
.3039	95 50		sta $50,x			sta 	esInt0,x
.303b	18		clc				clc 								; add alloc required.
.303c	75 51		adc $51,x			adc 	esInt0+1,x
.303e	85 35		sta $35				sta 	lowMemory
.3040	a5 36		lda $36				lda 	lowMemory+1
.3042	75 59		adc $59,x			adc 	esInt1+1,x
.3044	85 36		sta $36				sta 	lowMemory+1
.3046	b0 05		bcs $304d			bcs		_UABadValue 				; overflow definitely bad.
.3048	c5 34		cmp $34				cmp 	highMemory+1
.304a	b0 01		bcs $304d			bcs 	_UABadValue 				; out of memory bad.
.304c	60		rts				rts
.304d					_UABadValue:
.304d	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.304f	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3052					UnaryTimer:
.3052	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; no parameters
.3055	98		tya				tya
.3056	48		pha				pha
.3057	20 5c 34	jsr $345c			jsr 	MInt32Zero 					; zero result
.305a	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.305c	a2 1c		ldx #$1c		ldx	#28
.305e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3061	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.3063	95 50		sta $50,x			sta 	esInt0,x
.3065	98		tya				tya
.3066	95 58		sta $58,x			sta 	esInt1,x
.3068	68		pla				pla
.3069	a8		tay				tay
.306a	60		rts				rts
.306b					UnaryInkey:
.306b	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.306e	86 2a		stx $2a				stx 	temp0
.3070	a2 0a		ldx #$0a		ldx	#10
.3072	20 f6 14	jsr $14f6		jsr	deviceHandler
.3075	a6 2a		ldx $2a				ldx 	temp0
.3077	20 44 34	jsr $3444			jsr 	MInt32Set8Bit
.307a	60		rts				rts
.307b					UnaryGet:
.307b	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.307e	86 2a		stx $2a				stx 	temp0
.3080					_UGLoop:
.3080	a2 02		ldx #$02		ldx	#2
.3082	20 f6 14	jsr $14f6		jsr	deviceHandler
.3085	a2 0a		ldx #$0a		ldx	#10
.3087	20 f6 14	jsr $14f6		jsr	deviceHandler
.308a	c9 00		cmp #$00			cmp 	#0
.308c	f0 f2		beq $3080			beq 	_UGLoop
.308e	a6 2a		ldx $2a				ldx 	temp0
.3090	20 44 34	jsr $3444			jsr 	MInt32Set8Bit
.3093	60		rts				rts
.3094					UnaryGetString:
.3094	20 7b 30	jsr $307b			jsr 	UnaryGet
.3097					UGSDoChr:
.3097	4c e8 30	jmp $30e8			jmp 	ChrCode
.309a					UnaryInkeyString:
.309a	20 6b 30	jsr $306b			jsr 	UnaryInkey
.309d	b5 50		lda $50,x			lda 	esInt0,x
.309f	d0 f6		bne $3097			bne 	UGSDoChr
.30a1	8a		txa				txa
.30a2	a2 08		ldx #$08		ldx	#8
.30a4	20 e0 37	jsr $37e0		jsr	stringHandler
.30a7	aa		tax				tax
.30a8	60		rts				rts
.30a9					UnarySys:
.30a9	20 9d 2d	jsr $2d9d			jsr 	EvaluateInteger 				; get the address
.30ac	20 a8 34	jsr $34a8			jsr 	CheckRightParen
.30af	20 8f 21	jsr $218f			jsr 	TOSToTemp0 						; copy call address to temp0
.30b2	8a		txa				txa
.30b3	48		pha				pha
.30b4	98		tya				tya
.30b5	48		pha				pha
.30b6	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.30b9	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.30bc	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.30bf	20 ce 30	jsr $30ce			jsr 	_CallTemp0
.30c2	85 32		sta $32				sta 	tempShort 						; restore YX
.30c4	68		pla				pla
.30c5	a8		tay				tay
.30c6	68		pla				pla
.30c7	aa		tax				tax
.30c8	a5 32		lda $32				lda 	tempShort
.30ca	20 44 34	jsr $3444			jsr 	MInt32Set8Bit 					; return result.
.30cd	60		rts				rts
.30ce					_CallTemp0:
.30ce	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.30d1					UnaryMem:
.30d1	20 35 34	jsr $3435			jsr 	MInt32False 					; set to false (e.g. 0)
.30d4	38		sec				sec
.30d5	a5 33		lda $33				lda 	highMemory 						; calculate value
.30d7	e5 35		sbc $35				sbc 	lowMemory
.30d9	95 50		sta $50,x			sta 	esInt0,x
.30db	a5 34		lda $34				lda 	highMemory+1
.30dd	e5 36		sbc $36				sbc 	lowMemory+1
.30df	95 58		sta $58,x			sta 	esInt1,x
.30e1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.30e2					ExecChr:
.30e2	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger		; character number 0-255
.30e5	20 a8 34	jsr $34a8			jsr 	CheckRightParen				; right bracket
.30e8					ChrCode:
.30e8	98		tya				tya
.30e9	48		pha				pha
.30ea	8a		txa				txa 								; A = stack
.30eb	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.30ed	a2 02		ldx #$02		ldx	#2
.30ef	20 e0 37	jsr $37e0		jsr	stringHandler
.30f2	aa		tax				tax 								; X = stack
.30f3	68		pla				pla
.30f4	a8		tay				tay
.30f5	60		rts				rts
.30f6					ExecLower:
.30f6	38		sec				sec 								; set carry is lower
.30f7	b0 01		bcs $30fa			bcs 	ExecUpperLower
.30f9					ExecUpper:
.30f9	18		clc				clc 								; clear carry is upper
.30fa					ExecUpperLower:
.30fa	08		php				php 								; save carry
.30fb	20 92 2d	jsr $2d92			jsr 	EvaluateString 				; string to stack,X
.30fe	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; check closing right bracket.
.3101	28		plp				plp 								; restore carry, save Y
.3102	98		tya				tya
.3103	48		pha				pha
.3104	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.3106	2a		rol a				rol 	a
.3107	a8		tay				tay 								; now in Y
.3108	8a		txa				txa 								; do the substring and exit.
.3109	a2 0c		ldx #$0c		ldx	#12
.310b	20 e0 37	jsr $37e0		jsr	stringHandler
.310e	aa		tax				tax
.310f	68		pla				pla
.3110	a8		tay				tay
.3111	60		rts				rts
.3112					ExecLeft:
.3112	20 92 2d	jsr $2d92			jsr 	EvaluateString 				; string to stack,X
.3115	20 b5 34	jsr $34b5			jsr 	CheckComma
.3118	e8		inx				inx
.3119	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.311b	20 44 34	jsr $3444			jsr 	MInt32Set8Bit
.311e	e8		inx				inx
.311f	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.3122					ExecSubstring:
.3122	ca		dex				dex 								; fix up X
.3123	ca		dex				dex
.3124	20 a8 34	jsr $34a8			jsr 	CheckRightParen 			; check closing right bracket.
.3127	8a		txa				txa 								; do the substring and exit.
.3128	a2 0e		ldx #$0e		ldx	#14
.312a	20 e0 37	jsr $37e0		jsr	stringHandler
.312d	aa		tax				tax
.312e	60		rts				rts
.312f					ExecMid:
.312f	20 92 2d	jsr $2d92			jsr 	EvaluateString 				; string to stack,X
.3132	20 b5 34	jsr $34b5			jsr 	CheckComma
.3135	e8		inx				inx
.3136	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3139	c9 00		cmp #$00			cmp 	#0
.313b	f0 15		beq $3152			beq 	_EMValue
.313d	e8		inx				inx
.313e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3140	20 44 34	jsr $3444			jsr 	MInt32Set8Bit
.3143	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.3145	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.3147	f0 d9		beq $3122			beq 	ExecSubString
.3149	20 b5 34	jsr $34b5			jsr 	CheckComma
.314c	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.314f	4c 22 31	jmp $3122			jmp 	ExecSubString
.3152					_EMValue:
.3152	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3154	20 18 15	jsr $1518		jsr	errorHandler
.3157					ExecRight:
.3157	20 92 2d	jsr $2d92			jsr 	EvaluateString 				; string to stack,X
.315a	20 b5 34	jsr $34b5			jsr 	CheckComma
.315d	e8		inx				inx
.315e	20 a5 2d	jsr $2da5			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3161	ca		dex				dex
.3162	98		tya				tya
.3163	48		pha				pha
.3164	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.3166	85 2a		sta $2a				sta 	temp0
.3168	b5 58		lda $58,x			lda 	esInt1,x
.316a	85 2b		sta $2b				sta 	temp0+1
.316c	a0 00		ldy #$00			ldy 	#0 							; point to length
.316e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3170	18		clc				clc 								; add 1.
.3171	69 01		adc #$01			adc 	#1
.3173	38		sec				sec
.3174	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.3176	f0 02		beq $317a			beq		_ERMake1 					; if zero, make it 1.
.3178	b0 02		bcs $317c			bcs		_EROkay
.317a					_ERMake1:
.317a	a9 01		lda #$01			lda 	#1 							; start position.
.317c					_EROkay:
.317c	e8		inx				inx 								; set start pos.
.317d	95 50		sta $50,x			sta 	esInt0,x
.317f	e8		inx				inx
.3180	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3182	20 44 34	jsr $3444			jsr 	MInt32Set8Bit
.3185	68		pla				pla
.3186	a8		tay				tay
.3187	4c 22 31	jmp $3122			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.318a					MInt32And:
.318a	b5 50		lda $50,x			lda 	esInt0,x
.318c	35 51		and $51,x			and 	esInt0+1,x
.318e	95 50		sta $50,x			sta 	esInt0,x
.3190	b5 58		lda $58,x			lda 	esInt1,x
.3192	35 59		and $59,x			and 	esInt1+1,x
.3194	95 58		sta $58,x			sta 	esInt1,x
.3196	b5 60		lda $60,x			lda 	esInt2,x
.3198	35 61		and $61,x			and 	esInt2+1,x
.319a	95 60		sta $60,x			sta 	esInt2,x
.319c	b5 68		lda $68,x			lda 	esInt3,x
.319e	35 69		and $69,x			and 	esInt3+1,x
.31a0	95 68		sta $68,x			sta 	esInt3,x
.31a2	60		rts				rts
.31a3					MInt32Or:
.31a3	b5 50		lda $50,x			lda 	esInt0,x
.31a5	15 51		ora $51,x			ora 	esInt0+1,x
.31a7	95 50		sta $50,x			sta 	esInt0,x
.31a9	b5 58		lda $58,x			lda 	esInt1,x
.31ab	15 59		ora $59,x			ora 	esInt1+1,x
.31ad	95 58		sta $58,x			sta 	esInt1,x
.31af	b5 60		lda $60,x			lda 	esInt2,x
.31b1	15 61		ora $61,x			ora 	esInt2+1,x
.31b3	95 60		sta $60,x			sta 	esInt2,x
.31b5	b5 68		lda $68,x			lda 	esInt3,x
.31b7	15 69		ora $69,x			ora 	esInt3+1,x
.31b9	95 68		sta $68,x			sta 	esInt3,x
.31bb	60		rts				rts
.31bc					MInt32Xor:
.31bc	b5 50		lda $50,x			lda 	esInt0,x
.31be	55 51		eor $51,x			eor 	esInt0+1,x
.31c0	95 50		sta $50,x			sta 	esInt0,x
.31c2	b5 58		lda $58,x			lda 	esInt1,x
.31c4	55 59		eor $59,x			eor 	esInt1+1,x
.31c6	95 58		sta $58,x			sta 	esInt1,x
.31c8	b5 60		lda $60,x			lda 	esInt2,x
.31ca	55 61		eor $61,x			eor 	esInt2+1,x
.31cc	95 60		sta $60,x			sta 	esInt2,x
.31ce	b5 68		lda $68,x			lda 	esInt3,x
.31d0	55 69		eor $69,x			eor 	esInt3+1,x
.31d2	95 68		sta $68,x			sta 	esInt3,x
.31d4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.31d5					MInt32Compare:
.31d5	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.31d7	d5 51		cmp $51,x			cmp 	esInt0+1,x
.31d9	d0 13		bne $31ee			bne 	MInt32Compare2
.31db	b5 58		lda $58,x			lda 	esInt1,x
.31dd	d5 59		cmp $59,x			cmp 	esInt1+1,x
.31df	d0 0d		bne $31ee			bne 	MInt32Compare2
.31e1	b5 60		lda $60,x			lda 	esInt2,x
.31e3	d5 61		cmp $61,x			cmp 	esInt2+1,x
.31e5	d0 07		bne $31ee			bne 	MInt32Compare2
.31e7	b5 68		lda $68,x			lda 	esInt3,x
.31e9	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.31eb	d0 01		bne $31ee			bne 	MInt32Compare2
.31ed	60		rts				rts
.31ee					MInt32Compare2:
.31ee	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.31f0	d5 51		cmp $51,x			cmp 	esInt0+1,x
.31f2	b5 58		lda $58,x			lda		esInt1,x
.31f4	f5 59		sbc $59,x			sbc 	esInt1+1,x
.31f6	b5 60		lda $60,x			lda		esInt2,x
.31f8	f5 61		sbc $61,x			sbc 	esInt2+1,x
.31fa	b5 68		lda $68,x			lda		esInt3,x
.31fc	f5 69		sbc $69,x			sbc 	esInt3+1,x
.31fe	50 02		bvc $3202			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3200	49 80		eor #$80			eor 	#$80
.3202					_I32LNoOverflow
.3202	30 03		bmi $3207			bmi 	MInt32CLess					; if -ve then return $FF
.3204	a9 01		lda #$01			lda 	#$01						; else return $01
.3206	60		rts				rts
.3207					MInt32CLess:
.3207	a9 ff		lda #$ff			lda 	#$FF
.3209	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.320a					MInt32SDivide:
.320a	98		tya				tya  								; save Y, which is the count of negations
.320b	48		pha				pha
.320c	a0 00		ldy #$00			ldy 	#0 							; zero count
.320e	20 26 32	jsr $3226			jsr 	_MInt32SRemSign 			; unsign TOS
.3211	e8		inx				inx 								; unsign TOS+1
.3212	20 26 32	jsr $3226			jsr 	_MInt32SRemSign
.3215	ca		dex				dex
.3216	98		tya				tya 								; save sign count on stack
.3217	48		pha				pha
.3218	20 2f 32	jsr $322f			jsr 	MInt32UDivide 				; unsigned division
.321b	68		pla				pla 								; get sign count back
.321c	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.321e	f0 03		beq $3223			beq 	_I32SNoNeg
.3220	20 ef 33	jsr $33ef			jsr 	MInt32Negate
.3223					_I32SNoNeg:
.3223	68		pla				pla 								; restoe Y and exit
.3224	a8		tay				tay
.3225	60		rts				rts
.3226					_MInt32SRemSign:
.3226	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.3228	10 04		bpl $322e			bpl 	_MInt32SRSExit
.322a	c8		iny				iny 								; increment the sign count
.322b	20 ef 33	jsr $33ef			jsr 	MInt32Negate 				; negate the value.
.322e					_MInt32SRSExit:
.322e	60		rts				rts
.322f					MInt32UDivide:
.322f	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.3231	15 59		ora $59,x			ora 	esInt1+1,x
.3233	15 5a		ora $5a,x			ora 	esInt1+2,x
.3235	15 5b		ora $5b,x			ora 	esInt1+3,x
.3237	f0 4a		beq $3283			beq 	_MInt32DZero
.3239	e8		inx				inx 								; clear A
.323a	e8		inx				inx
.323b	20 35 34	jsr $3435			jsr 	MInt32False
.323e	ca		dex				dex
.323f	ca		dex				dex
.3240	98		tya				tya 								; save Y on the stack
.3241	48		pha				pha
.3242	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.3244					_MInt32UDLoop:
.3244	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.3246	36 58		rol $58,x			rol 	esInt1,x
.3248	36 60		rol $60,x			rol 	esInt2,x
.324a	36 68		rol $68,x			rol 	esInt3,x
.324c	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.324e	36 5a		rol $5a,x			rol 	esInt1+2,x
.3250	36 62		rol $62,x			rol 	esInt2+2,x
.3252	36 6a		rol $6a,x			rol 	esInt3+2,x
.3254	38		sec				sec 								; calculate A-M saving result on the stack
.3255	b5 52		lda $52,x			lda 	esInt0+2,x
.3257	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3259	48		pha				pha
.325a	b5 5a		lda $5a,x			lda 	esInt1+2,x
.325c	f5 59		sbc $59,x			sbc 	esInt1+1,x
.325e	48		pha				pha
.325f	b5 62		lda $62,x			lda 	esInt2+2,x
.3261	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3263	48		pha				pha
.3264	b5 6a		lda $6a,x			lda 	esInt3+2,x
.3266	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3268	90 10		bcc $327a			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.326a	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.326c	68		pla				pla
.326d	95 62		sta $62,x			sta 	esInt2+2,x
.326f	68		pla				pla
.3270	95 5a		sta $5a,x			sta 	esInt1+2,x
.3272	68		pla				pla
.3273	95 52		sta $52,x			sta 	esInt0+2,x
.3275	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.3277	4c 7d 32	jmp $327d			jmp 	_MInt32Next 					; do the next iteration
.327a					_MInt32NoSubtract:
.327a	68		pla				pla
.327b	68		pla				pla
.327c	68		pla				pla
.327d					_MInt32Next:
.327d	88		dey				dey 								; do this 32 times.
.327e	d0 c4		bne $3244			bne 	_MInt32UDLoop
.3280	68		pla				pla 								; restore Y and exit
.3281	a8		tay				tay
.3282	60		rts				rts
.3283					_MInt32DZero:
.3283	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.3285	20 18 15	jsr $1518		jsr	errorHandler
.3288					MInt32Modulus:
.3288	20 2f 32	jsr $322f			jsr 	MInt32UDivide 				; do the division.
.328b	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.328d	95 68		sta $68,x			sta 	esInt3,x
.328f	b5 62		lda $62,x			lda 	esInt2+2,x
.3291	95 60		sta $60,x			sta 	esInt2,x
.3293	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3295	95 58		sta $58,x			sta 	esInt1,x
.3297	b5 52		lda $52,x			lda 	esInt0+2,x
.3299	95 50		sta $50,x			sta 	esInt0,x
.329b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cda					fs32Length:
>0cda							.fill 	1
.329c					LinkInt32FromString:
.329c	aa		tax				tax
.329d	98		tya				tya
.329e	20 a3 32	jsr $32a3			jsr 	MInt32FromString
.32a1	8a		txa				txa
.32a2	60		rts				rts
.32a3					MInt32FromString:
.32a3	85 32		sta $32				sta 	tempShort 					; save base
.32a5	98		tya				tya
.32a6	48		pha				pha
.32a7	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.32a9	b1 2a		lda ($2a),y			lda 	(temp0),y
.32ab	8d da 0c	sta $0cda			sta 	fs32Length
.32ae	f0 65		beq $3315			beq 	_I32FSFail2					; fail if length zero.
.32b0	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.32b2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.32b4	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.32b6	d0 09		bne $32c1			bne 	_I32FSNotNegative
.32b8	ad da 0c	lda $0cda			lda 	fs32Length 					; get length back.
.32bb	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.32bd	f0 56		beq $3315			beq 	_I32FSFail2
.32bf	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.32c1					_I32FSNotNegative:
.32c1	a5 32		lda $32				lda 	tempShort 					; get the base back.
.32c3	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.32c5	d0 02		bne $32c9			bne 	_I32FSNN2
.32c7	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.32c9					_I32FSNN2:
.32c9	48		pha				pha 								; save base + final sign on stack.
.32ca	20 35 34	jsr $3435			jsr 	MInt32False 				; zero the return value.
.32cd					_I32FSMainLoop:
.32cd	68		pla				pla 								; get the base back into tempShort
.32ce	48		pha				pha
.32cf	29 7f		and #$7f			and 	#$7F
.32d1	85 32		sta $32				sta 	tempShort
.32d3	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.32d5	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.32d7	90 02		bcc $32db			bcc 	_I32FSNotLC
.32d9	e9 20		sbc #$20			sbc 	#32
.32db					_I32FSNotLC:
.32db	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.32dc	e9 30		sbc #$30			sbc 	#"0"
.32de	90 34		bcc $3314			bcc 	_I32FSFail 					; nothing more to do.
.32e0	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.32e2	90 06		bcc $32ea			bcc 	_I32FSValidate
.32e4	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.32e6	90 2c		bcc $3314			bcc 	_I32FSFail
.32e8	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.32ea					_I32FSValidate:
.32ea	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.32ec	b0 26		bcs $3314			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.32ee	48		pha				pha 								; save the new digit value.
.32ef	e8		inx				inx 								; put base into next slot up on stack
.32f0	a5 32		lda $32				lda 	tempShort
.32f2	20 44 34	jsr $3444			jsr 	MInt32Set8Bit
.32f5	ca		dex				dex
.32f6	20 4d 33	jsr $334d			jsr 	MInt32Multiply 				; multiply current by the base
.32f9	e8		inx				inx
.32fa	68		pla				pla  								; put additive into next slot
.32fb	20 44 34	jsr $3444			jsr 	MInt32Set8Bit
.32fe	ca		dex				dex
.32ff	20 19 33	jsr $3319			jsr 	MInt32Add 					; and add it
.3302	c8		iny				iny 								; bump the character pointer
.3303	cc da 0c	cpy $0cda			cpy 	fs32Length 					; until > length.
.3306	f0 c5		beq $32cd			beq 	_I32FSMainLoop
.3308	90 c3		bcc $32cd			bcc 	_I32FSMainLoop
.330a					_I32FSDone:
.330a	68		pla				pla 								; get base/final sign back
.330b	10 03		bpl $3310			bpl 	_I32FSNN3
.330d	20 ef 33	jsr $33ef			jsr 	MInt32Negate 				; negate the result.
.3310					_I32FSNN3:
.3310	68		pla				pla
.3311	a8		tay				tay
.3312	38		sec				sec
.3313	60		rts				rts
.3314					_I32FSFail:
.3314	68		pla				pla
.3315					_I32FSFail2:
.3315	68		pla				pla
.3316	a8		tay				tay
.3317	18		clc				clc
.3318	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3319					MInt32Add:
.3319	18		clc				clc
.331a	b5 50		lda $50,x			lda 	esInt0,x
.331c	75 51		adc $51,x			adc 	esInt0+1,x
.331e	95 50		sta $50,x			sta 	esInt0,x
.3320	b5 58		lda $58,x			lda 	esInt1,x
.3322	75 59		adc $59,x			adc 	esInt1+1,x
.3324	95 58		sta $58,x			sta 	esInt1,x
.3326	b5 60		lda $60,x			lda 	esInt2,x
.3328	75 61		adc $61,x			adc 	esInt2+1,x
.332a	95 60		sta $60,x			sta 	esInt2,x
.332c	b5 68		lda $68,x			lda 	esInt3,x
.332e	75 69		adc $69,x			adc 	esInt3+1,x
.3330	95 68		sta $68,x			sta 	esInt3,x
.3332	60		rts				rts
.3333					MInt32Sub:
.3333	38		sec				sec
.3334	b5 50		lda $50,x			lda 	esInt0,x
.3336	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3338	95 50		sta $50,x			sta 	esInt0,x
.333a	b5 58		lda $58,x			lda 	esInt1,x
.333c	f5 59		sbc $59,x			sbc 	esInt1+1,x
.333e	95 58		sta $58,x			sta 	esInt1,x
.3340	b5 60		lda $60,x			lda 	esInt2,x
.3342	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3344	95 60		sta $60,x			sta 	esInt2,x
.3346	b5 68		lda $68,x			lda 	esInt3,x
.3348	f5 69		sbc $69,x			sbc 	esInt3+1,x
.334a	95 68		sta $68,x			sta 	esInt3,x
.334c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.334d					MInt32Multiply:
.334d	e8		inx				inx 								; copy 2nd -> 3rd
.334e	20 73 33	jsr $3373			jsr 	MInt32CopyUp
.3351	ca		dex				dex
.3352	20 73 33	jsr $3373			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3355	20 35 34	jsr $3435			jsr 	MInt32False 				; zero 1st.
.3358					_I32Loop:
.3358	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.335a	29 01		and #$01			and 	#1
.335c	f0 03		beq $3361			beq 	_I32NoAdd 					; if set
.335e	20 19 33	jsr $3319			jsr 	MInt32Add 					; add 2nd to 1st.
.3361					_I32NoAdd:
.3361	e8		inx				inx 								; shift 2nd left
.3362	20 4a 34	jsr $344a			jsr 	MInt32ShiftLeft
.3365	e8		inx				inx  								; shift 3rd right
.3366	20 53 34	jsr $3453			jsr 	MInt32ShiftRight
.3369	20 5c 34	jsr $345c			jsr 	MInt32Zero 					; check if zero.
.336c	08		php				php 								; save status bits
.336d	ca		dex				dex 	 							; point back to 1st
.336e	ca		dex				dex
.336f	28		plp				plp 								; get status bits
.3370	d0 e6		bne $3358			bne 	_I32Loop 					; if non-zero keep going.
.3372	60		rts				rts
.3373					MInt32CopyUp:
.3373	b5 50		lda $50,x			lda 	esInt0,x
.3375	95 51		sta $51,x			sta 	esInt0+1,x
.3377	b5 58		lda $58,x			lda 	esInt1,x
.3379	95 59		sta $59,x			sta 	esInt1+1,x
.337b	b5 60		lda $60,x			lda 	esInt2,x
.337d	95 61		sta $61,x			sta 	esInt2+1,x
.337f	b5 68		lda $68,x			lda 	esInt3,x
.3381	95 69		sta $69,x			sta 	esInt3+1,x
.3383	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cdb					MCharCount:	.fill 	1						; count of converted characters
.3384					MLInt32ToString:
.3384	aa		tax				tax									; module passes stack in A, base in Y
.3385	98		tya				tya
.3386	20 8b 33	jsr $338b			jsr 	MInt32ToString
.3389	8a		txa				txa
.338a	60		rts				rts
.338b					MInt32ToString:
.338b	48		pha				pha 								; save base
.338c	85 32		sta $32				sta 	tempShort 					; save target base.
.338e	a9 00		lda #$00			lda 	#0
.3390	8d db 0c	sta $0cdb			sta 	MCharCount 					; clear character count to 0
.3393	98		tya				tya
.3394	48		pha				pha
.3395	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3397	10 10		bpl $33a9			bpl 	_I32TSUnsigned
.3399	48		pha				pha 								; save base on stack.
.339a	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.339c	10 08		bpl $33a6			bpl 	_I32TSNoFlip
.339e	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.33a0	20 dc 33	jsr $33dc			jsr 	MI32WriteCharacter
.33a3	20 ef 33	jsr $33ef			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.33a6					_I32TSNoFlip:
.33a6	68		pla				pla 								; get the base back
.33a7	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.33a9					_I32TSUnsigned:
.33a9	20 b7 33	jsr $33b7			jsr 	MI32DivideWrite 			; recursive code to output string.
.33ac	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.33ae	ad db 0c	lda $0cdb			lda 	MCharCount
.33b1	91 2a		sta ($2a),y			sta 	(temp0),y
.33b3	68		pla				pla
.33b4	a8		tay				tay
.33b5	68		pla				pla
.33b6	60		rts				rts
.33b7					MI32DivideWrite:
.33b7	48		pha				pha 								; save the divisor/base
.33b8	e8		inx				inx 								; write in the dividing position.
.33b9	20 44 34	jsr $3444			jsr 	MInt32Set8Bit
.33bc	ca		dex				dex
.33bd	20 2f 32	jsr $322f			jsr 	MInt32UDivide 				; divide number by base.
.33c0	68		pla				pla 								; get the base into Y
.33c1	a8		tay				tay
.33c2	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.33c4	48		pha				pha
.33c5	20 5c 34	jsr $345c			jsr 	MInt32Zero 					; is the result zero ?
.33c8	f0 04		beq $33ce			beq 	_I32NoRecurse 				; if so, don't recurse.
.33ca	98		tya				tya 								; put base into A
.33cb	20 b7 33	jsr $33b7			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.33ce					_I32NoRecurse:
.33ce	68		pla				pla 								; get the remainder back
.33cf	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.33d1	90 02		bcc $33d5			bcc 	_I32NotHex
.33d3	69 06		adc #$06			adc 	#7-1
.33d5					_I32NotHex:
.33d5	18		clc				clc 								; make it ASCII
.33d6	69 30		adc #$30			adc 	#48
.33d8	20 dc 33	jsr $33dc			jsr 	MI32WriteCharacter 			; write the character out
.33db	60		rts				rts 								; and exit.
.33dc					MI32WriteCharacter:
.33dc	ee db 0c	inc $0cdb			inc 	MCharCount 					; bump count (space for leading count)
.33df	ac db 0c	ldy $0cdb			ldy 	MCharCount 					; get position
.33e2	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.33e4	c8		iny				iny
.33e5	a9 00		lda #$00			lda 	#0
.33e7	91 2a		sta ($2a),y			sta 	(temp0),y
.33e9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cdc					MSeed32:	.fill 	4							; random number seed.
.33ea					MInt32Absolute:
.33ea	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.33ec	30 01		bmi $33ef			bmi 	MInt32Negate
.33ee	60		rts				rts
.33ef					MInt32Negate:
.33ef	38		sec				sec 								; subtract from zero.
.33f0	a9 00		lda #$00			lda 	#0
.33f2	f5 50		sbc $50,x			sbc 	esInt0,x
.33f4	95 50		sta $50,x			sta 	esInt0,x
.33f6	a9 00		lda #$00			lda 	#0
.33f8	f5 58		sbc $58,x			sbc 	esInt1,x
.33fa	95 58		sta $58,x			sta 	esInt1,x
.33fc	a9 00		lda #$00			lda 	#0
.33fe	f5 60		sbc $60,x			sbc 	esInt2,x
.3400	95 60		sta $60,x			sta 	esInt2,x
.3402	a9 00		lda #$00			lda 	#0
.3404	f5 68		sbc $68,x			sbc 	esInt3,x
.3406	95 68		sta $68,x			sta 	esInt3,x
.3408	60		rts				rts
.3409					MInt32Not:
.3409	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.340b	49 ff		eor #$ff			eor 	#$FF
.340d	95 50		sta $50,x			sta 	esInt0,x
.340f	b5 58		lda $58,x			lda 	esInt1,x
.3411	49 ff		eor #$ff			eor 	#$FF
.3413	95 58		sta $58,x			sta 	esInt1,x
.3415	b5 60		lda $60,x			lda 	esInt2,x
.3417	49 ff		eor #$ff			eor 	#$FF
.3419	95 60		sta $60,x			sta 	esInt2,x
.341b	b5 68		lda $68,x			lda 	esInt3,x
.341d	49 ff		eor #$ff			eor 	#$FF
.341f	95 68		sta $68,x			sta 	esInt3,x
.3421	60		rts				rts
.3422					MInt32Sign:
.3422	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.3424	30 0b		bmi $3431			bmi 	MInt32True 					; if set return -1 (true)
.3426	20 5c 34	jsr $345c			jsr 	MInt32Zero 					; is it zero ?
.3429	f0 0a		beq $3435			beq 	MInt32False 				; if zero return 0 (false)
.342b	20 35 34	jsr $3435			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.342e	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.3430	60		rts				rts
.3431					MInt32True:
.3431	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3433	d0 02		bne $3437			bne 	MInt32WriteAll
.3435					MInt32False:
.3435	a9 00		lda #$00			lda 	#0
.3437					MInt32WriteAll:
.3437	95 50		sta $50,x			sta 	esInt0,x
.3439					MInt32Write123:
.3439	95 58		sta $58,x			sta 	esInt1,x
.343b	95 60		sta $60,x			sta 	esInt2,x
.343d	95 68		sta $68,x			sta 	esInt3,x
.343f	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3441	95 48		sta $48,x			sta 	esType,x
.3443	60		rts				rts
.3444					MInt32Set8Bit:
.3444	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.3446	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3448	f0 ef		beq $3439			beq		MInt32Write123
.344a					MInt32ShiftLeft:
.344a	16 50		asl $50,x			asl 	esInt0,x
.344c	36 58		rol $58,x			rol	 	esInt1,x
.344e	36 60		rol $60,x			rol	 	esInt2,x
.3450	36 68		rol $68,x			rol	 	esInt3,x
.3452	60		rts				rts
.3453					MInt32ShiftRight:
.3453	56 68		lsr $68,x			lsr 	esInt3,x
.3455	76 60		ror $60,x			ror 	esInt2,x
.3457	76 58		ror $58,x			ror 	esInt1,x
.3459	76 50		ror $50,x			ror 	esInt0,x
.345b	60		rts				rts
.345c					MInt32Zero:
.345c	b5 50		lda $50,x			lda 	esInt0,x
.345e	15 58		ora $58,x			ora 	esInt1,x
.3460	15 60		ora $60,x			ora 	esInt2,x
.3462	15 68		ora $68,x			ora 	esInt3,x
.3464	60		rts				rts
.3465					MInt32Random:
.3465	98		tya				tya
.3466	48		pha				pha
.3467	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3469	ad dc 0c	lda $0cdc			lda 	MSeed32+0 					; check the seed isn't zero
.346c	d0 03		bne $3471			bne 	_Random1
.346e	a8		tay				tay 								; if so do it 256 times
.346f	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3471					_Random1:
.3471	0a		asl a				asl 	a
.3472	2e dd 0c	rol $0cdd			rol 	MSeed32+1
.3475	2e de 0c	rol $0cde			rol 	MSeed32+2
.3478	2e df 0c	rol $0cdf			rol 	MSeed32+3
.347b	90 02		bcc $347f			bcc 	_Random2
.347d	49 c5		eor #$c5			eor 	#$C5
.347f					_Random2:
.347f	88		dey				dey
.3480	d0 ef		bne $3471			bne 	_Random1
.3482	8d dc 0c	sta $0cdc			sta 	MSeed32+0 					; copy the seed in.
.3485	95 50		sta $50,x			sta 	esInt0,x
.3487	ad dd 0c	lda $0cdd			lda 	MSeed32+1
.348a	95 58		sta $58,x			sta 	esInt1,x
.348c	ad de 0c	lda $0cde			lda 	MSeed32+2
.348f	95 60		sta $60,x			sta 	esInt2,x
.3491	ad df 0c	lda $0cdf			lda 	MSeed32+3
.3494	95 68		sta $68,x			sta 	esInt3,x
.3496	68		pla				pla
.3497	a8		tay				tay
.3498	a9 00		lda #$00			lda 	#0
.349a	95 48		sta $48,x			sta 	esType,x
.349c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.349d					CheckToken:
.349d	d1 28		cmp ($28),y			cmp 	(codePtr),y
.349f	d0 02		bne $34a3			bne 	_CTError
.34a1	c8		iny				iny
.34a2	60		rts				rts
.34a3					_CTError:
.34a3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.34a5	20 18 15	jsr $1518		jsr	errorHandler
.34a8					CheckRightParen:
.34a8	b1 28		lda ($28),y			lda 	(codePtr),y
.34aa	c8		iny				iny
.34ab	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.34ad	d0 01		bne $34b0			bne 	_CRPError
.34af	60		rts				rts
.34b0					_CRPError:
.34b0	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.34b2	20 18 15	jsr $1518		jsr	errorHandler
.34b5					CheckComma:
.34b5	b1 28		lda ($28),y			lda 	(codePtr),y
.34b7	c8		iny				iny
.34b8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.34ba	d0 01		bne $34bd			bne 	_CCError
.34bc	60		rts				rts
.34bd					_CCError:
.34bd	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.34bf	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.34c2					RSReset:
.34c2	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.34c4	85 37		sta $37				sta 	rsPointer
.34c6	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.34c8	85 38		sta $38				sta 	1+(rsPointer)
.34ca	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.34cc	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.34cf	60		rts				rts
.34d0					RSClaim:
.34d0	84 32		sty $32				sty 	tempShort 					; preserve Y
.34d2	48		pha				pha 								; save marker on stack.
.34d3	8a		txa				txa 								; get bytes required.
.34d4	38		sec				sec
.34d5	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.34d7	65 37		adc $37				adc 	rsPointer
.34d9	85 37		sta $37				sta 	rsPointer
.34db	a5 38		lda $38				lda 	rsPointer+1
.34dd	69 ff		adc #$ff			adc 	#$FF
.34df	85 38		sta $38				sta 	rsPointer+1
.34e1	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.34e3	90 08		bcc $34ed			bcc 	_RSCOverflow
.34e5	68		pla				pla 								; get marker back
.34e6	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.34e8	91 37		sta ($37),y			sta 	(rsPointer),y
.34ea	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.34ec	60		rts				rts
.34ed					_RSCOverflow:
.34ed	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.34ef	20 18 15	jsr $1518		jsr	errorHandler
.34f2					RSFree:
.34f2	18		clc				clc
.34f3	65 37		adc $37				adc 	rsPointer
.34f5	85 37		sta $37				sta 	rsPointer
.34f7	90 02		bcc $34fb			bcc 	_RSFExit
.34f9	e6 38		inc $38				inc 	rsPointer+1
.34fb					_RSFExit:
.34fb	60		rts				rts
.34fc					RSSavePosition:
.34fc	84 32		sty $32				sty 	tempShort 					; save Y position
.34fe	a8		tay				tay 								; this is where we write it.
.34ff	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3501	91 37		sta ($37),y			sta 	(rsPointer),y
.3503	c8		iny				iny
.3504	a5 29		lda $29				lda 	codePtr+1
.3506	91 37		sta ($37),y			sta 	(rsPointer),y
.3508	c8		iny				iny
.3509	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.350b	91 37		sta ($37),y			sta 	(rsPointer),y
.350d	a8		tay				tay 								; fix Y back again to original value
.350e	60		rts				rts
.350f					RSLoadPosition:
.350f	a8		tay				tay
.3510	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3512	85 28		sta $28				sta 	codePtr
.3514	c8		iny				iny
.3515	b1 37		lda ($37),y			lda 	(rsPointer),y
.3517	85 29		sta $29				sta 	codePtr+1
.3519	c8		iny				iny
.351a	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.351c	a8		tay				tay 								; to Y
.351d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.351e					WarmStart:
.351e	a2 04		ldx #$04		ldx	#4
.3520	20 89 1e	jsr $1e89		jsr	interactionHandler

;******  Return to file: main/main.asm

.3523					mainHandler:
.3523	7c 26 35	jmp ($3526,x)			jmp 	(mainVectors,x)
.3526					mainVectors:
>3526	42 35					.word _DummyControlHandler ; index 0
>3528	b5 34					.word CheckComma           ; index 2
>352a	a8 34					.word CheckRightParen      ; index 4
>352c	91 26					.word XCommandClear        ; index 6
>352e	b8 2d					.word LinkEvaluate         ; index 8
>3530	c4 2d					.word LinkEvaluateInteger  ; index 10
>3532	d0 2d					.word LinkEvaluateSmallInt ; index 12
>3534	ca 2d					.word LinkEvaluateString   ; index 14
>3536	be 2d					.word LinkEvaluateTerm     ; index 16
>3538	84 33					.word MLInt32ToString      ; index 18
>353a	20 28					.word Command_XNew         ; index 20
>353c	2e 28					.word XCommand_Run         ; index 22
>353e	3a 28					.word Command_RunFrom      ; index 24
>3540	9c 32					.word LinkInt32FromString  ; index 26
.3542					_DummyControlHandler:
.3542	60		rts			rts

;******  Return to file: basic.asm

.3543					section_end_main:
.3543					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3543					StringChrs:
.3543	aa		tax				tax 								; set up stack
.3544	a9 02		lda #$02			lda 	#2
.3546	20 06 36	jsr $3606			jsr 	AllocateSoftString
.3549	98		tya				tya
.354a	20 2c 36	jsr $362c			jsr 	WriteSoftString
.354d					StringUpdate:
.354d	20 5b 35	jsr $355b			jsr 	ReturnSoftString
.3550	8a		txa				txa
.3551	60		rts				rts
.3552					StringNull:
.3552	aa		tax				tax
.3553	a9 01		lda #$01			lda 	#1
.3555	20 06 36	jsr $3606			jsr 	AllocateSoftString
.3558	4c 4d 35	jmp $354d			jmp 	StringUpdate
.355b					ReturnSoftString:
.355b	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.355d	95 50		sta $50,x			sta 	esInt0,x
.355f	a5 3a		lda $3a				lda 	softMemAlloc+1
.3561	95 58		sta $58,x			sta 	esInt1,x
.3563	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3565	95 60		sta $60,x			sta 	esInt2,x
.3567	95 68		sta $68,x			sta 	esInt3,x
.3569	a9 40		lda #$40			lda 	#$40 						; type string.
.356b	95 48		sta $48,x			sta 	esType,x
.356d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.356e					STRCompare:
.356e	48		pha				pha 								; save A
.356f	aa		tax				tax 								; put stack pos in X
.3570	98		tya				tya
.3571	48		pha				pha
.3572	20 a6 35	jsr $35a6			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3575	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3577	b1 2a		lda ($2a),y			lda 	(temp0),y
.3579	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.357b	90 02		bcc $357f			bcc 	_SCNotSmaller
.357d	b1 2c		lda ($2c),y			lda 	(temp1),y
.357f					_SCNotSmaller:
.357f	aa		tax				tax 								; put that in X. We compare this many chars first.
.3580					_SCCompareLoop:
.3580	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3582	f0 0c		beq $3590			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3584	ca		dex				dex 								; decrement chars to compare.
.3585	c8		iny				iny 								; move to next character
.3586	38		sec				sec 								; calculate s1[y]-s2[y]
.3587	b1 2a		lda ($2a),y			lda 	(temp0),y
.3589	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.358b	d0 0a		bne $3597			bne 	_SCReturnResult 			; if different return sign of A
.358d	4c 80 35	jmp $3580			jmp 	_SCCompareLoop
.3590					_SCSameToEndShortest
.3590	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3592	38		sec				sec
.3593	b1 2a		lda ($2a),y			lda 	(temp0),y
.3595	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3597					_SCReturnResult:
.3597	08		php				php 								; set return to zero preserving PSW.
.3598	a2 00		ldx #$00			ldx 	#0
.359a	28		plp				plp
.359b	f0 05		beq $35a2			beq 	_SCExit 					; two values equal, then exit
.359d	ca		dex				dex 								; X = $FF
.359e	90 02		bcc $35a2			bcc 	_SCExit 					; if 1st < 2nd then -1
.35a0	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.35a2					_SCExit:
.35a2	68		pla				pla
.35a3	a8		tay				tay
.35a4	68		pla				pla
.35a5	60		rts				rts
.35a6					CopyStringPair:
.35a6	b5 51		lda $51,x			lda 	esInt0+1,x
.35a8	85 2c		sta $2c				sta 	temp1
.35aa	b5 59		lda $59,x			lda 	esInt1+1,x
.35ac	85 2d		sta $2d				sta 	temp1+1
.35ae					CopyStringTop:
.35ae	b5 50		lda $50,x			lda 	esInt0,x
.35b0	85 2a		sta $2a				sta 	temp0
.35b2	b5 58		lda $58,x			lda 	esInt1,x
.35b4	85 2b		sta $2b				sta 	temp0+1
.35b6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.35b7					StringConcat:
.35b7	aa		tax				tax									; stack pos in X
.35b8	98		tya				tya
.35b9	48		pha				pha
.35ba	20 a6 35	jsr $35a6			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.35bd	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.35be	a0 00		ldy #$00			ldy 	#0
.35c0	b1 2a		lda ($2a),y			lda 	(temp0),y
.35c2	71 2c		adc ($2c),y			adc 	(temp1),y
.35c4	b0 1c		bcs $35e2			bcs 	_SCError 					; just too many characters here.
.35c6	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.35c8	b0 18		bcs $35e2			bcs 	_SCError
.35ca	20 06 36	jsr $3606			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.35cd	20 fd 35	jsr $35fd			jsr 	CopySoftToStack 			; copy that to the stack.
.35d0	20 e7 35	jsr $35e7			jsr 	SCCopyTemp0 				; copy temp0
.35d3	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.35d5	85 2a		sta $2a				sta 	temp0
.35d7	a5 2d		lda $2d				lda 	temp1+1
.35d9	85 2b		sta $2b				sta 	temp0+1
.35db	20 e7 35	jsr $35e7			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.35de	68		pla				pla
.35df	a8		tay				tay
.35e0	8a		txa				txa 								; and A
.35e1	60		rts				rts
.35e2					_SCError:
.35e2	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.35e4	20 18 15	jsr $1518		jsr	errorHandler
.35e7					SCCopyTemp0:
.35e7	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.35e9	b1 2a		lda ($2a),y			lda 	(temp0),y
.35eb	85 2e		sta $2e				sta 	temp2
.35ed					_SCCopyLoop:
.35ed	a5 2e		lda $2e				lda 	temp2 						; done the lot
.35ef	f0 0b		beq $35fc			beq 	_SCCopyExit
.35f1	c6 2e		dec $2e				dec 	temp2
.35f3	c8		iny				iny 								; get next char
.35f4	b1 2a		lda ($2a),y			lda 	(temp0),y
.35f6	20 2c 36	jsr $362c			jsr 	WriteSoftString 			; write to soft string.
.35f9	4c ed 35	jmp $35ed			jmp 	_SCCopyLoop
.35fc					_SCCopyExit:
.35fc	60		rts				rts
.35fd					CopySoftToStack:
.35fd	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.35ff	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.3601	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3603	95 58		sta $58,x			sta 	esInt1,x
.3605	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3606					AllocateSoftString:
.3606	85 32		sta $32				sta 	tempShort 					; save count
.3608	98		tya				tya
.3609	48		pha				pha
.360a	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.360c	d0 09		bne $3617			bne 	_ASSDone
.360e	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3610	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3612	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3614	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3615	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3617					_ASSDone:
.3617	38		sec				sec 								; allocate downwards enough memory
.3618	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.361a	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.361c	85 39		sta $39				sta 	softMemAlloc
.361e	a5 3a		lda $3a				lda 	softMemAlloc+1
.3620	e9 00		sbc #$00			sbc 	#0
.3622	85 3a		sta $3a				sta 	softMemAlloc+1
.3624	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3626	a8		tay				tay
.3627	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3629	68		pla				pla
.362a	a8		tay				tay
.362b	60		rts				rts
.362c					WriteSoftString:
.362c	84 32		sty $32				sty 	tempShort 					; save Y
.362e	48		pha				pha 								; save character on stack
.362f	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3631	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3633	18		clc				clc
.3634	69 01		adc #$01			adc 	#1
.3636	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3638	a8		tay				tay 								; offset in Y
.3639	68		pla				pla 								; get char and write.
.363a	91 39		sta ($39),y			sta 	(softMemAlloc),y
.363c	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.363e	60		rts				rts
.363f					StrClone:
.363f	aa		tax				tax 								; set up stack.
.3640	98		tya				tya
.3641	48		pha				pha
.3642	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3644	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3646	18		clc				clc
.3647	69 01		adc #$01			adc 	#1
.3649	20 06 36	jsr $3606			jsr 	AllocateSoftString 			; allocate soft memory
.364c	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.364e	95 50		sta $50,x			sta 	esInt0,x
.3650	a5 3a		lda $3a				lda 	softMemAlloc+1
.3652	95 58		sta $58,x			sta 	esInt1,x
.3654	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3656	95 60		sta $60,x			sta 	esInt2,x
.3658	95 68		sta $68,x			sta 	esInt3,x
.365a	a9 40		lda #$40			lda 	#$40 						; set type to string.
.365c	95 48		sta $48,x			sta 	esType,x
.365e	20 e7 35	jsr $35e7			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3661	68		pla				pla
.3662	a8		tay				tay
.3663	8a		txa				txa
.3664	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3665					CaseString:
.3665	48		pha				pha 								; save A and copy to X
.3666	aa		tax				tax
.3667	98		tya				tya
.3668	48		pha				pha
.3669	20 ae 35	jsr $35ae			jsr 	CopyStringTop 				; target string -> temp0
.366c	a0 00		ldy #$00			ldy 	#0
.366e	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3670	18		clc				clc
.3671	69 01		adc #$01			adc 	#1 							; one more for length byte
.3673	20 06 36	jsr $3606			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3676	20 fd 35	jsr $35fd			jsr 	CopySoftToStack 			; copy that to the stack.
.3679	a0 00		ldy #$00			ldy 	#0
.367b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.367d	aa		tax				tax
.367e					_CSCopy:
.367e	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3680	f0 24		beq $36a6			beq 	_CSExit
.3682	ca		dex				dex
.3683	c8		iny				iny
.3684	68		pla				pla 								; check direction
.3685	48		pha				pha
.3686	f0 0c		beq $3694			beq 	_CSUpper
.3688	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.368a	c9 41		cmp #$41			cmp 	#"A"
.368c	90 12		bcc $36a0			bcc 	_CSWrite
.368e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3690	b0 0e		bcs $36a0			bcs 	_CSWrite
.3692	90 0a		bcc $369e			bcc 	_CSFlipWrite
.3694					_CSUpper:
.3694	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3696	c9 61		cmp #$61			cmp 	#"a"
.3698	90 06		bcc $36a0			bcc 	_CSWrite
.369a	c9 7b		cmp #$7b			cmp 	#"z"+1
.369c	b0 02		bcs $36a0			bcs 	_CSWrite
.369e					_CSFlipWrite:
.369e	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.36a0					_CSWrite:
.36a0	20 2c 36	jsr $362c			jsr 	WriteSoftString 			; add to soft string.
.36a3	4c 7e 36	jmp $367e			jmp 	_CSCopy
.36a6					_CSExit:
.36a6	68		pla				pla
.36a7	a8		tay				tay
.36a8	68		pla				pla
.36a9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.36aa					StringSubstring:
.36aa	48		pha				pha
.36ab	aa		tax				tax 								; access stack.
.36ac	98		tya				tya
.36ad	48		pha				pha
.36ae	20 ae 35	jsr $35ae			jsr 	CopyStringTop 				; point temp0 to the string.
.36b1	a0 00		ldy #$00			ldy 	#0 							; get length.
.36b3	b1 2a		lda ($2a),y			lda 	(temp0),Y
.36b5	85 2c		sta $2c				sta 	temp1
.36b7	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.36b9	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.36bb	f0 02		beq $36bf			beq 	_SSBOkay
.36bd	b0 2a		bcs $36e9			bcs 	_SSBReturnNull
.36bf					_SSBOkay:
.36bf	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.36c1	18		clc				clc
.36c2	69 01		adc #$01			adc 	#1
.36c4	38		sec				sec
.36c5	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.36c7	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.36c9	90 02		bcc $36cd			bcc		_SSBTrunc
.36cb	b5 52		lda $52,x			lda 	esInt0+2,x
.36cd					_SSBTrunc:
.36cd	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.36cf	18		clc				clc
.36d0	69 01		adc #$01			adc 	#1 							; add 1
.36d2	20 06 36	jsr $3606			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.36d5	20 fd 35	jsr $35fd			jsr 	CopySoftToStack 			; copy that to the stack.
.36d8	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.36da					_SSBCopyLoop:
.36da	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.36dc	f0 0e		beq $36ec			beq 	_SSBExit
.36de	c6 2d		dec $2d				dec 	temp1+1
.36e0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.36e2	20 2c 36	jsr $362c			jsr 	WriteSoftString
.36e5	c8		iny				iny
.36e6	4c da 36	jmp $36da			jmp 	_SSBCopyLoop
.36e9					_SSBReturnNull:
.36e9	20 f0 36	jsr $36f0			jsr 	ReturnNull
.36ec					_SSBExit:
.36ec	68		pla				pla
.36ed	a8		tay				tay
.36ee	68		pla				pla
.36ef	60		rts				rts
.36f0					ReturnNull:
.36f0	a9 00		lda #$00			lda 	#0 							; clear null string
.36f2	8d ce 0a	sta $0ace			sta 	NullString
.36f5	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.36f7	95 50		sta $50,x			sta 	esInt0,x
.36f9	a9 0a		lda #$0a			lda 	#NullString >> 8
.36fb	95 58		sta $58,x			sta 	esInt1,x
.36fd	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0ce0					srcStrLen:
>0ce0							.fill 	1
.36fe					StringWrite:
.36fe	aa		tax				tax
.36ff	48		pha				pha
.3700	98		tya				tya
.3701	48		pha				pha
.3702	20 29 37	jsr $3729			jsr 	CheckOverwriteCurrent
.3705	b0 0d		bcs $3714			bcs		_SWCopyCurrent
.3707	20 67 37	jsr $3767			jsr 	RequiresConcretion
.370a	90 0e		bcc $371a			bcc 	_SWWriteReference
.370c	20 ca 37	jsr $37ca			jsr 	CheckSpecialConcretion
.370f	b0 09		bcs $371a			bcs 	_SWWriteReference
.3711	20 7b 37	jsr $377b			jsr 	AllocateHardMemory
.3714					_SWCopyCurrent:
.3714	20 ae 37	jsr $37ae			jsr 	CopyStringToHardMemory
.3717	4c 25 37	jmp $3725			jmp 	_SWExit
.371a					_SWWriteReference
.371a	a0 00		ldy #$00			ldy 	#0
.371c	a5 2a		lda $2a				lda 	temp0
.371e	91 2c		sta ($2c),y			sta 	(temp1),y
.3720	c8		iny				iny
.3721	a5 2b		lda $2b				lda 	temp0+1
.3723	91 2c		sta ($2c),y			sta 	(temp1),y
.3725					_SWExit:
.3725	68		pla				pla
.3726	a8		tay				tay
.3727	68		pla				pla
.3728	60		rts				rts
.3729					CheckOverwriteCurrent:
.3729	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.372b	b5 59		lda $59,x			lda 	esInt1+1,x
.372d	85 2b		sta $2b				sta 	temp0+1
.372f	b5 51		lda $51,x			lda 	esInt0+1,x
.3731	85 2a		sta $2a				sta 	temp0
.3733	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3735	8d e0 0c	sta $0ce0			sta 	srcStrLen
.3738	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.373a	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.373c	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.373e	85 2d		sta $2d				sta 	temp1+1
.3740	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3742	b1 2c		lda ($2c),y			lda 	(temp1),y
.3744	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3746	90 1b		bcc $3763			bcc 	_COCFail 				; in hard memory.
.3748	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.374a	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.374c	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.374e	85 2e		sta $2e				sta 	temp2
.3750	c8		iny				iny
.3751	b1 2c		lda ($2c),y			lda 	(temp1),y
.3753	e9 00		sbc #$00			sbc 	#0
.3755	85 2f		sta $2f				sta 	temp2+1
.3757	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3759	b1 2e		lda ($2e),y			lda 	(temp2),y
.375b	38		sec				sec  							; maximum character capacity.
.375c	e9 02		sbc #$02			sbc 	#2
.375e	cd e0 0c	cmp $0ce0			cmp 	srcStrLen 				; if >= the required length
.3761	b0 02		bcs $3765			bcs 	_COCCanReuse
.3763					_COCFail:
.3763	18		clc				clc
.3764	60		rts				rts
.3765					_COCCanReuse:
.3765	38		sec				sec
.3766	60		rts				rts
.3767					RequiresConcretion:
.3767	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3769	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.376b	b0 0a		bcs $3777			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.376d	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.376f	f0 08		beq $3779			beq 	_RCFail 				; if not, this cannot be soft memory.
.3771	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3773	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3775	90 02		bcc $3779			bcc 	_RCFail 				; so concreting
.3777					_RCSucceed:
.3777	38		sec				sec
.3778	60		rts				rts
.3779					_RCFail:
.3779	18		clc				clc
.377a	60		rts				rts
.377b					AllocateHardMemory:
.377b	98		tya				tya
.377c	48		pha				pha
.377d	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; characters in string
.3780	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3782	b0 04		bcs $3788			bcs 	_AHMSetMax 				; max out that amount.
.3784	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3786	90 02		bcc $378a			bcc 	_AHMIsOkay
.3788					_AHMSetMax:
.3788	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.378a					_AHMIsOkay:
.378a	48		pha				pha	 							; save size to be allocated
.378b	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.378d	38		sec				sec  							; and copy result to TOS as target address.
.378e	65 33		adc $33				adc 	highMemory
.3790	85 33		sta $33				sta 	highMemory
.3792	a5 34		lda $34				lda 	highMemory+1
.3794	69 ff		adc #$ff			adc 	#$FF
.3796	85 34		sta $34				sta 	highMemory+1
.3798	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.379a	68		pla				pla 							; get the total size of the storage block
.379b	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.379d	18		clc				clc
.379e	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.37a0	69 01		adc #$01			adc 	#1
.37a2	91 2c		sta ($2c),y			sta 	(temp1),y
.37a4	a5 34		lda $34				lda 	highMemory+1
.37a6	69 00		adc #$00			adc 	#0
.37a8	c8		iny				iny
.37a9	91 2c		sta ($2c),y			sta 	(temp1),y
.37ab	68		pla				pla
.37ac	a8		tay				tay
.37ad	60		rts				rts
.37ae					CopyStringToHardMemory:
.37ae	98		tya				tya
.37af	48		pha				pha
.37b0	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.37b2	b1 2c		lda ($2c),y			lda 	(temp1),y
.37b4	85 2e		sta $2e				sta 	temp2
.37b6	c8		iny				iny
.37b7	b1 2c		lda ($2c),y			lda 	(temp1),y
.37b9	85 2f		sta $2f				sta 	temp2+1
.37bb	ac e0 0c	ldy $0ce0			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.37be					_CSTHMLoop:
.37be	b1 2a		lda ($2a),y			lda 	(temp0),y
.37c0	91 2e		sta ($2e),y			sta 	(temp2),y
.37c2	88		dey				dey
.37c3	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.37c5	d0 f7		bne $37be			bne 	_CSTHMLoop
.37c7	68		pla				pla
.37c8	a8		tay				tay
.37c9	60		rts				rts
.37ca					CheckSpecialConcretion:
.37ca	ad e0 0c	lda $0ce0			lda 	srcStrLen 				; check string is null e.g. length = 0
.37cd	f0 02		beq $37d1			beq 	_CSCNullString
.37cf	18		clc				clc
.37d0	60		rts				rts
.37d1					_CSCNullString:
.37d1	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.37d3	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.37d6	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.37d8	85 2a		sta $2a				sta 	temp0
.37da	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.37dc	85 2b		sta $2b				sta 	1+(temp0)
.37de	38		sec				sec
.37df	60		rts				rts

;******  Return to file: string/string.asm

.37e0					stringHandler:
.37e0	7c e3 37	jmp ($37e3,x)			jmp 	(stringVectors,x)
.37e3					stringVectors:
>37e3	f5 37					.word _DummyControlHandler ; index 0
>37e5	43 35					.word StringChrs           ; index 2
>37e7	3f 36					.word StrClone             ; index 4
>37e9	b7 35					.word StringConcat         ; index 6
>37eb	52 35					.word StringNull           ; index 8
>37ed	6e 35					.word STRCompare           ; index 10
>37ef	65 36					.word CaseString           ; index 12
>37f1	aa 36					.word StringSubstring      ; index 14
>37f3	fe 36					.word StringWrite          ; index 16
.37f5					_DummyControlHandler:
.37f5	60		rts			rts

;******  Return to file: basic.asm

.37f6					section_end_string:
.37f6					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0ce1					deTokeniseVector:
>0ce1							.fill 	2
.0ce3					lastCharacterClass:
>0ce3							.fill 	1
.0ce4					indent:
>0ce4							.fill 	1
.37f6					ListLine:
.37f6	48		pha				pha								; enter here to list to console. sets the output vector
.37f7	a9 2e		lda #$2e			lda 	#(deTokenPrint) & $FF
.37f9	8d e1 0c	sta $0ce1			sta 	deTokeniseVector
.37fc	a9 39		lda #$39			lda 	#(deTokenPrint) >> 8
.37fe	8d e2 0c	sta $0ce2			sta 	1+(deTokeniseVector)
.3801	68		pla				pla
.3802					Detokenise:
.3802	18		clc				clc 							; space required for line number.
.3803	69 06		adc #$06			adc 	#6
.3805	8d e4 0c	sta $0ce4			sta 	indent
.3808	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.380a	8d e3 0c	sta $0ce3			sta 	lastCharacterClass
.380d	a2 02		ldx #$02			ldx 	#2
.380f	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3811	95 60		sta $60,x			sta 	esInt2,x
.3813	95 68		sta $68,x			sta 	esInt3,x
.3815	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3817	b1 28		lda ($28),y			lda 	(codePtr),y
.3819	95 50		sta $50,x			sta 	esInt0,x
.381b	c8		iny				iny
.381c	b1 28		lda ($28),y			lda 	(codePtr),y
.381e	95 58		sta $58,x			sta 	esInt1,x
.3820	a9 84		lda #$84			lda 	#LTYLineNumber
.3822	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.3825	a9 0a		lda #$0a			lda 	#10 					; base 10
.3827	20 cd 38	jsr $38cd			jsr 	DTPrintInteger 			; print as integer.
.382a	a0 00		ldy #$00			ldy 	#0 						; get length
.382c	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.382e	aa		tax				tax
.382f					_DTPadOut:
.382f	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3831	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.3834	e8		inx				inx
.3835	ec e4 0c	cpx $0ce4			cpx 	indent
.3838	d0 f5		bne $382f			bne 	_DTPadOut
.383a	a0 03		ldy #$03			ldy 	#3 						; start position.
.383c					_DTListLoop:
.383c	b1 28		lda ($28),y			lda 	(codePtr),y
.383e	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3840	f0 5e		beq $38a0			beq 	_DTIsString
.3842	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3844	f0 56		beq $389c			beq 	_DTIsFloat
.3846	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3848	f0 16		beq $3860			beq 	_DTHexConstant
.384a	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.384c	d0 06		bne $3854			bne 	_DTNotEnd
.384e	a9 ff		lda #$ff			lda 	#255 					; print CR
.3850	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.3853	60		rts				rts
.3854					_DTNotEnd:
.3854	c9 00		cmp #$00			cmp 	#0
.3856	30 38		bmi $3890			bmi 	_DTIsToken
.3858	c9 40		cmp #$40			cmp 	#$40
.385a	90 3a		bcc $3896			bcc 	_DTIsIdentifier
.385c	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.385e	d0 0d		bne $386d			bne 	_DTConstant
.3860					_DTHexConstant:
.3860	a9 26		lda #$26			lda 	#"&"
.3862	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.3865	c8		iny				iny
.3866	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3868	20 4a 39	jsr $394a			jsr 	DTSwitchMode
.386b	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.386d					_DTConstant:
.386d	48		pha				pha
.386e	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3870	20 4a 39	jsr $394a			jsr 	DTSwitchMode
.3873	a9 86		lda #$86			lda 	#LTYConstant
.3875	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.3878	a2 02		ldx #$02			ldx 	#2 						; get its value
.387a	8a		txa				txa
.387b	a2 10		ldx #$10		ldx	#16
.387d	20 23 35	jsr $3523		jsr	mainHandler
.3880	aa		tax				tax
.3881	68		pla				pla 							; get base back
.3882	85 32		sta $32				sta 	tempShort
.3884	98		tya				tya
.3885	48		pha				pha
.3886	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3888	20 cd 38	jsr $38cd			jsr 	DTPrintInteger
.388b	68		pla				pla
.388c	a8		tay				tay
.388d	4c 3c 38	jmp $383c			jmp 	_DTListLoop
.3890					_DTIsToken:
.3890	20 a3 39	jsr $39a3			jsr 	DTDecodeToken
.3893	4c 3c 38	jmp $383c			jmp 	_DTListLoop
.3896					_DTIsIdentifier:
.3896	20 5c 39	jsr $395c			jsr 	DTIdentifier
.3899	4c 3c 38	jmp $383c			jmp 	_DTListLoop
.389c					_DTIsFloat:
>389c	db						.byte 	$DB
.389d	4c 9c 38	jmp $389c			jmp 	_DTIsFloat
.38a0					_DTIsString:
.38a0	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.38a2	20 4a 39	jsr $394a			jsr 	DTSwitchMode
.38a5	a9 81		lda #$81			lda 	#LTYString
.38a7	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.38aa	a9 22		lda #$22			lda 	#'"'						; open quote
.38ac	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.38af	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.38b1	8a		txa				txa
.38b2	a2 10		ldx #$10		ldx	#16
.38b4	20 23 35	jsr $3523		jsr	mainHandler
.38b7	aa		tax				tax
.38b8	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.38ba	85 2a		sta $2a				sta 	temp0
.38bc	b5 58		lda $58,x			lda 	esInt1,x
.38be	85 2b		sta $2b				sta 	temp0+1
.38c0	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.38c2	20 df 38	jsr $38df			jsr 	DTPrintLengthPrefix
.38c5	a9 22		lda #$22			lda 	#'"'
.38c7	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.38ca	4c 3c 38	jmp $383c			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce5					tPrintCount:
>0ce5							.fill 	1
.38cd					DTPrintInteger:
.38cd	48		pha				pha									; save base
.38ce	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.38d0	85 2a		sta $2a				sta 	temp0
.38d2	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.38d4	85 2b		sta $2b				sta 	1+(temp0)
.38d6	68		pla				pla
.38d7	a8		tay				tay
.38d8	8a		txa				txa
.38d9	a2 12		ldx #$12		ldx	#18
.38db	20 23 35	jsr $3523		jsr	mainHandler
.38de	aa		tax				tax 								; then drop through here.
.38df					DTPrintLengthPrefix:
.38df	aa		tax				tax 								; A = 0 = don't case convert.
.38e0	98		tya				tya
.38e1	48		pha				pha
.38e2	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.38e4	b1 2a		lda ($2a),y			lda 	(temp0),y
.38e6	8d e5 0c	sta $0ce5			sta 	tPrintCount
.38e9	f0 1b		beq $3906			beq 	_DTPLPExit 					; empty string
.38eb					_DTPLPLoop:
.38eb	c8		iny				iny 								; get next.
.38ec	b1 2a		lda ($2a),y			lda 	(temp0),y
.38ee	29 7f		and #$7f			and 	#$7F
.38f0	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.38f2	f0 0a		beq $38fe			beq 	_DTPLPNoCase
.38f4	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.38f6	90 06		bcc $38fe			bcc 	_DTPLPNoCase
.38f8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.38fa	b0 02		bcs $38fe			bcs 	_DTPLPNoCase
.38fc	49 20		eor #$20			eor 	#"A"^"a"
.38fe					_DTPLPNoCase
.38fe	20 09 39	jsr $3909			jsr 	ListOutputCharacter 		; call handler
.3901	ce e5 0c	dec $0ce5			dec 	tPrintCount 				; do all the characters
.3904	d0 e5		bne $38eb			bne 	_DTPLPLoop
.3906					_DTPLPExit:
.3906	68		pla				pla
.3907	a8		tay				tay
.3908	60		rts				rts
.3909					ListOutputCharacter:
.3909	85 32		sta $32				sta 	tempShort
.390b	48		pha				pha
.390c	8a		txa				txa
.390d	48		pha				pha
.390e	98		tya				tya
.390f	48		pha				pha
.3910	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3912	c9 20		cmp #$20			cmp 	#32
.3914	b0 0c		bcs $3922			bcs		_LOCHiBit
.3916	09 40		ora #$40			ora 	#64 						; conversion
.3918	c9 40		cmp #$40			cmp 	#64							; make l/c
.391a	f0 06		beq $3922			beq 	_LOCHiBit
.391c	c9 5b		cmp #$5b			cmp 	#65+26
.391e	b0 02		bcs $3922			bcs 	_LOCHiBit
.3920	69 20		adc #$20			adc 	#32
.3922					_LOCHiBit:
.3922	20 2b 39	jsr $392b			jsr 	_LOCCallVector				; call o/p handler routine
.3925	68		pla				pla
.3926	a8		tay				tay
.3927	68		pla				pla
.3928	aa		tax				tax
.3929	68		pla				pla
.392a					_LOCExit:
.392a	60		rts				rts
.392b					_LOCCallVector:
.392b	6c e1 0c	jmp ($0ce1)			jmp 	(deTokeniseVector)
.392e					deTokenPrint:
.392e	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3930	30 06		bmi $3938			bmi 	_dtpInk
.3932	a2 16		ldx #$16		ldx	#22
.3934	20 f6 14	jsr $14f6		jsr	deviceHandler
.3937	60		rts				rts
.3938	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.393a	f0 08		beq $3944			beq 	_dtpCR						; except $FF => CRLF
.393c	29 07		and #$07			and 	#7
.393e	a2 08		ldx #$08		ldx	#8
.3940	20 f6 14	jsr $14f6		jsr	deviceHandler
.3943	60		rts				rts
.3944					_dtpCR:
.3944	a2 06		ldx #$06		ldx	#6
.3946	20 f6 14	jsr $14f6		jsr	deviceHandler
.3949	60		rts				rts
.394a					DTSwitchMode:
.394a	cd e3 0c	cmp $0ce3			cmp 	LastCharacterClass 			; if changed, update character class
.394d	f0 04		beq $3953			beq 	_DTSMNoChange
.394f	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.3952					_DTSMExit:
.3952	60		rts				rts
.3953					_DTSMNoChange:
.3953	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3955	f0 fb		beq $3952			beq 	_DTSMExit 					; need a space.
.3957	a9 20		lda #$20			lda 	#" "
.3959	4c 09 39	jmp $3909			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.395c					DTIdentifier:
.395c	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.395e	20 4a 39	jsr $394a			jsr 	DTSwitchMode
.3961	a9 87		lda #$87			lda 	#LTYIdentifier
.3963	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.3966					_DTILoop:
.3966	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.3968	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.396a	d0 02		bne $396e			bne 	_DTINotUS
.396c	a9 5f		lda #$5f			lda 	#"_"
.396e					_DTINotUS:
.396e	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.3971	c8		iny				iny
.3972	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3974	c9 3a		cmp #$3a			cmp 	#$3A
.3976	90 ee		bcc $3966			bcc 	_DTILoop
.3978	c8		iny				iny
.3979	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.397b	f0 25		beq $39a2			beq 	_DTIExit 					; no postfix.
.397d	48		pha				pha
.397e	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3980	8d e3 0c	sta $0ce3			sta 	LastCharacterClass
.3983	a9 82		lda #$82			lda 	#LTYPunctuation
.3985	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.3988	68		pla				pla
.3989	c9 3b		cmp #$3b			cmp 	#$3B
.398b	f0 10		beq $399d			beq 	_DTIArray
.398d	4a		lsr a				lsr 	a 							; array flag in C
.398e	08		php				php
.398f	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3991	f0 02		beq $3995			beq 	_DTIDollar
.3993	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3995					_DTIDollar:
.3995	49 24		eor #$24			eor 	#"$"
.3997	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.399a	28		plp				plp
.399b	90 05		bcc $39a2			bcc 	_DTIExit
.399d					_DTIArray:
.399d	a9 28		lda #$28			lda 	#"("
.399f	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.39a2					_DTIExit:
.39a2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.39a3					DTDecodeToken:
.39a3	a2 00		ldx #$00			ldx 	#0 							; table number to use
.39a5	b1 28		lda ($28),y			lda 	(codePtr),y
.39a7	c9 84		cmp #$84			cmp 	#$84
.39a9	b0 05		bcs $39b0			bcs 	_DTNotShift
.39ab	29 03		and #$03			and 	#3 							; get the shift 1..3
.39ad	0a		asl a				asl 	a 							; put 2 x in X
.39ae	aa		tax				tax
.39af	c8		iny				iny
.39b0					_DTNotShift:
.39b0	bd b2 3c	lda $3cb2,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.39b3	85 2a		sta $2a				sta 	temp0 						; point into temp0
.39b5	bd b3 3c	lda $3cb3,x			lda 	TokenTableAddress+1,x
.39b8	85 2b		sta $2b				sta 	temp0+1
.39ba	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.39bc	c8		iny				iny 								; consume it.
.39bd	aa		tax				tax
.39be	98		tya				tya
.39bf	48		pha				pha
.39c0					_DTFindText:
.39c0	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.39c2	f0 11		beq $39d5			beq 	_DTFoundText
.39c4	ca		dex				dex
.39c5	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.39c7	38		sec				sec
.39c8	b1 2a		lda ($2a),y			lda 	(temp0),y
.39ca	65 2a		adc $2a				adc 	temp0
.39cc	85 2a		sta $2a				sta 	temp0
.39ce	90 f0		bcc $39c0			bcc 	_DTFindText
.39d0	e6 2b		inc $2b				inc 	temp0+1
.39d2	4c c0 39	jmp $39c0			jmp 	_DTFindText
.39d5					_DTFoundText:
.39d5	a0 01		ldy #$01			ldy 	#1 							; get first character
.39d7	b1 2a		lda ($2a),y			lda 	(temp0),y
.39d9	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.39db	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.39dd	90 11		bcc $39f0			bcc 	_DTIsPunctuation
.39df	c9 5b		cmp #$5b			cmp 	#"Z"+1
.39e1	b0 0d		bcs $39f0			bcs 	_DTIsPunctuation
.39e3	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.39e5	20 4a 39	jsr $394a			jsr 	DTSwitchMode
.39e8	a9 83		lda #$83			lda 	#LTYKeyword
.39ea	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.39ed	4c fa 39	jmp $39fa			jmp 	_DTPrint
.39f0					_DTIsPunctuation:
.39f0	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.39f2	20 4a 39	jsr $394a			jsr 	DTSwitchMode
.39f5	a9 82		lda #$82			lda 	#LTYPunctuation
.39f7	20 09 39	jsr $3909			jsr 	ListOutputCharacter
.39fa					_DTPrint:
.39fa	a9 01		lda #$01			lda 	#1 							; fix case.
.39fc	20 df 38	jsr $38df			jsr 	DTPrintLengthPrefix 		; print it out.
.39ff	a0 00		ldy #$00			ldy 	#0
.3a01	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a03	a8		tay				tay
.3a04	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a06	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3a08	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3a0a	90 04		bcc $3a10			bcc 	_DTIsNowPunctuation
.3a0c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a0e	90 05		bcc $3a15			bcc 	_DTPExit
.3a10					_DTIsNowPunctuation:
.3a10	a9 01		lda #$01			lda 	#1
.3a12	8d e3 0c	sta $0ce3			sta		LastCharacterClass
.3a15					_DTPExit:
.3a15	68		pla				pla
.3a16	a8		tay				tay
.3a17	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce6					currentSet:
>0ce6							.fill 	1
.3a18					TokenSearch:
.3a18	8a		txa				txa
.3a19	48		pha				pha
.3a1a	98		tya				tya
.3a1b	48		pha				pha
.3a1c	a9 00		lda #$00			lda 	#0
.3a1e	8d e6 0c	sta $0ce6			sta 	currentSet
.3a21					_TSLoop:
.3a21	ad e6 0c	lda $0ce6			lda 	currentSet 					; 2 x currentset in X
.3a24	0a		asl a				asl 	a
.3a25	aa		tax				tax
.3a26	bd b2 3c	lda $3cb2,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.3a29	85 2a		sta $2a				sta 	temp0
.3a2b	bd b3 3c	lda $3cb3,x			lda 	TokenTableAddress+1,x
.3a2e	85 2b		sta $2b				sta 	temp0+1
.3a30	20 57 3a	jsr $3a57			jsr 	TokenSearchOne 				; search one table
.3a33	b0 0d		bcs $3a42			bcs 	_TSFound 					; found a token.
.3a35	ee e6 0c	inc $0ce6			inc 	currentSet 					; next set
.3a38	ad e6 0c	lda $0ce6			lda 	currentSet
.3a3b	c9 04		cmp #$04			cmp 	#4
.3a3d	d0 e2		bne $3a21			bne 	_TSLoop 					; back if not done all four.
.3a3f	18		clc				clc 								; clear carry and exit
.3a40	90 10		bcc $3a52			bcc 	_TSExit
.3a42					_TSFound:
.3a42	48		pha				pha 								; save token
.3a43	ad e6 0c	lda $0ce6			lda 	currentSet					; if set zero no shift
.3a46	f0 05		beq $3a4d			beq 	_TSNoShift
.3a48	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.3a4a	20 08 3b	jsr $3b08			jsr 	TokenWrite
.3a4d					_TSNoShift:
.3a4d	68		pla				pla 								; get token back
.3a4e	20 08 3b	jsr $3b08			jsr 	TokenWrite 					; write it
.3a51	38		sec				sec 								; carry set indicating success
.3a52					_TSExit:
.3a52	68		pla				pla
.3a53	a8		tay				tay
.3a54	68		pla				pla
.3a55	aa		tax				tax
.3a56	60		rts				rts
.3a57					TokenSearchOne:
.3a57	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.3a59					_TSOLoop:
.3a59	a0 00		ldy #$00			ldy 	#0
.3a5b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3a5d	f0 26		beq $3a85			beq 	_TSOFail 					; if zero, end of table
.3a5f	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3a62	f0 11		beq $3a75			beq 	_TSOCheckText
.3a64					_TSONext:
.3a64	e8		inx				inx 								; bump token
.3a65	a0 00		ldy #$00			ldy 	#0							; get length
.3a67	b1 2a		lda ($2a),y			lda 	(temp0),y
.3a69	38		sec				sec
.3a6a	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.3a6c	85 2a		sta $2a				sta 	temp0
.3a6e	90 e9		bcc $3a59			bcc 	_TSOLoop
.3a70	e6 2b		inc $2b				inc 	temp0+1
.3a72	4c 59 3a	jmp $3a59			jmp 	_TSOLoop
.3a75					_TSOCheckText:
.3a75	a8		tay				tay 								; compare length downto 1.
.3a76					_TSOCheckLoop:
.3a76	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.3a78	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3a7b	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3a7d	d0 e5		bne $3a64			bne 	_TSONext 					; different goto next.
.3a7f	88		dey				dey 								; do all
.3a80	d0 f4		bne $3a76			bne 	_TSOCheckLoop
.3a82	8a		txa				txa 								; return token in A and carry set
.3a83	38		sec				sec
.3a84	60		rts				rts
.3a85					_TSOFail:
.3a85	18		clc				clc
.3a86	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.3a87					TokTest:
.3a87	a2 ff		ldx #$ff				ldx 	#$FF
.3a89	9a		txs					txs
.3a8a	a9 a7		lda #$a7			lda 	#(TokenText1) & $FF
.3a8c	85 28		sta $28				sta 	codePtr
.3a8e	a9 3a		lda #$3a			lda 	#(TokenText1) >> 8
.3a90	85 29		sta $29				sta 	1+(codePtr)
.3a92	20 a7 3a	jsr $3aa7				jsr 	Tokenise
.3a95	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.3a97	bd a7 3a	lda $3aa7,x	_TokCheck:	lda 	TokenBytes1,x
.3a9a	dd ea 0c	cmp $0cea,x				cmp 	tokenBuffer,x
.3a9d	d0 fe		bne $3a9d	_TokFail:	bne 	_TokFail	 		; error.
.3a9f	e8		inx					inx
.3aa0	c9 80		cmp #$80				cmp 	#$80
.3aa2	d0 f3		bne $3a97				bne 	_TokCheck
.3aa4	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.3aa7					TokenText1:
.3aa7					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0ce7					tokenHeader:
>0ce7							.fill 	3
.0cea					tokenBuffer:
>0cea							.fill 	256
.0dea					tokenBufferIndex:
>0dea							.fill 	1
.3aa7					Tokenise:
.3aa7	20 21 3b	jsr $3b21			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.3aaa					TokeniseASCIIZ:
.3aaa	20 32 3b	jsr $3b32			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3aad	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3aaf	8d ea 0d	sta $0dea			sta 	tokenBufferIndex
.3ab2	a8		tay				tay 								; start pointer
.3ab3	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.3ab5	8d ea 0c	sta $0cea			sta 	tokenBuffer
.3ab8					_TokLoop:
.3ab8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.3aba	f0 46		beq $3b02			beq 	_TokExit 					; if zero, then exit.
.3abc	c8		iny				iny 								; skip over spaces.
.3abd	c9 20		cmp #$20			cmp 	#" "
.3abf	f0 f7		beq $3ab8			beq 	_TokLoop
.3ac1	88		dey				dey 								; point back to character.
.3ac2	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3ac4	f0 18		beq $3ade			beq 	_TokHexConst
.3ac6	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3ac8	f0 23		beq $3aed			beq 	_TokQString
.3aca	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3acc	b0 26		bcs $3af4			bcs 	_TokPunctuation
.3ace	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3ad0	b0 29		bcs $3afb			bcs 	_TokIdentifier
.3ad2	c9 3a		cmp #$3a			cmp 	#"9"+1
.3ad4	b0 1e		bcs $3af4			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3ad6	c9 30		cmp #$30			cmp 	#"0"
.3ad8	90 1a		bcc $3af4			bcc 	_TokPunctuation 			; < 0, punctuation.
.3ada	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3adc	d0 08		bne $3ae6			bne 	_TokConst
.3ade					_TokHexConst:
.3ade	c8		iny				iny									; consume token.
.3adf	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3ae1	20 08 3b	jsr $3b08			jsr 	TokenWrite
.3ae4	a9 10		lda #$10			lda 	#16
.3ae6					_TokConst:
.3ae6	20 f0 3b	jsr $3bf0			jsr 	TokeniseInteger
.3ae9	b0 cd		bcs $3ab8			bcs 	_TokLoop
.3aeb	90 18		bcc $3b05			bcc 	_TokFail
.3aed					_TokQString:
.3aed	20 86 3c	jsr $3c86			jsr 	TokeniseString
.3af0	b0 c6		bcs $3ab8			bcs 	_TokLoop
.3af2	90 11		bcc $3b05			bcc 	_TokFail
.3af4					_TokPunctuation:
.3af4	20 65 3c	jsr $3c65			jsr 	TokenisePunctuation
.3af7	b0 bf		bcs $3ab8			bcs 	_TokLoop
.3af9	90 0a		bcc $3b05			bcc 	_TokFail
.3afb					_TokIdentifier:
.3afb	20 61 3b	jsr $3b61			jsr 	TokeniseIdentifier
.3afe	b0 b8		bcs $3ab8			bcs 	_TokLoop
.3b00	90 03		bcc $3b05			bcc 	_TokFail
.3b02					_TokExit:
.3b02	a9 01		lda #$01			lda 	#1
.3b04	60		rts				rts
.3b05					_TokFail:
.3b05	a9 00		lda #$00			lda 	#0
.3b07	60		rts				rts
.3b08					TokenWrite:
.3b08	85 32		sta $32				sta 	tempShort 					; save XA
.3b0a	48		pha				pha
.3b0b	8a		txa				txa
.3b0c	48		pha				pha
.3b0d	a5 32		lda $32				lda 	tempShort
.3b0f	ae ea 0d	ldx $0dea			ldx 	tokenBufferIndex 			; geet index
.3b12	9d ea 0c	sta $0cea,x			sta 	tokenBuffer,x 				; write byte to buffer
.3b15	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3b17	9d eb 0c	sta $0ceb,x			sta 	tokenBuffer+1,x
.3b1a	ee ea 0d	inc $0dea			inc 	tokenBufferIndex 			; bump index
.3b1d	68		pla				pla
.3b1e	aa		tax				tax
.3b1f	68		pla				pla
.3b20	60		rts				rts
.3b21					TokeniseMakeASCIIZ:
.3b21	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3b23	b1 28		lda ($28),y			lda 	(codePtr),y
.3b25	a8		tay				tay
.3b26	c8		iny				iny 								; +1, the NULL goes here.
.3b27	a9 00		lda #$00			lda 	#0
.3b29	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.3b2b	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3b2d	d0 02		bne $3b31			bne 	_TMKAExit
.3b2f	e6 29		inc $29				inc 	codePtr+1
.3b31					_TMKAExit:
.3b31	60		rts				rts
.3b32					TokeniseFixCase:
.3b32	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3b34	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3b36					_TFCFlipQ:
.3b36	8a		txa				txa
.3b37	49 01		eor #$01			eor 	#1
.3b39	aa		tax				tax
.3b3a					_TFCLoop:
.3b3a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.3b3c	f0 22		beq $3b60			beq 	_TFCExit 					; if zero exit.
.3b3e	c9 20		cmp #$20			cmp 	#32 						; if control
.3b40	90 1a		bcc $3b5c			bcc 	_TFCControl
.3b42	c8		iny				iny 								; preconsume
.3b43	c9 22		cmp #$22			cmp 	#'"'
.3b45	f0 ef		beq $3b36			beq 	_TFCFlipQ
.3b47	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.3b49	90 ef		bcc $3b3a			bcc 	_TFCLoop
.3b4b	c9 7b		cmp #$7b			cmp 	#"z"+1
.3b4d	b0 eb		bcs $3b3a			bcs 	_TFCLoop
.3b4f	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3b51	d0 e7		bne $3b3a			bne 	_TFCLoop
.3b53	88		dey				dey
.3b54	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3b56					_TFCWrite:
.3b56	91 28		sta ($28),y			sta 	(codePtr),y
.3b58	c8		iny				iny
.3b59	4c 3a 3b	jmp $3b3a			jmp 	_TFCLoop
.3b5c					_TFCControl:
.3b5c	a9 20		lda #$20			lda 	#" "
.3b5e	d0 f6		bne $3b56			bne 	_TFCWrite
.3b60					_TFCExit:
.3b60	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3b61					TokeniseIdentifier:
.3b61	a2 00		ldx #$00			ldx 	#0
.3b63					_TICopyID:
.3b63	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3b65	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.3b67	f0 16		beq $3b7f			beq 	_TICopyUnderscore
.3b69	c9 2e		cmp #$2e			cmp 	#"."
.3b6b	f0 14		beq $3b81			beq 	_TICopyIn
.3b6d	c9 30		cmp #$30			cmp 	#"0"
.3b6f	90 1b		bcc $3b8c			bcc 	_TIEndCopy
.3b71	c9 3a		cmp #$3a			cmp 	#"9"+1
.3b73	90 0c		bcc $3b81			bcc 	_TICopyIn
.3b75	c9 41		cmp #$41			cmp 	#"A"
.3b77	90 13		bcc $3b8c			bcc 	_TIEndCopy
.3b79	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3b7b	b0 0f		bcs $3b8c			bcs		_TIEndCopy
.3b7d	90 02		bcc $3b81			bcc 	_TICopyIn
.3b7f					_TICopyUnderScore:
.3b7f	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3b81					_TICopyIn:
.3b81	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3b82	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3b85	8e cf 0a	stx $0acf			stx 	convertBuffer
.3b88	c8		iny				iny 								; next character
.3b89	4c 63 3b	jmp $3b63			jmp 	_TICopyID 					; loop round
.3b8c					_TIEndCopy:
.3b8c	a9 24		lda #$24			lda 	#"$"
.3b8e	20 e3 3b	jsr $3be3			jsr 	TIDCheckCopy
.3b91	a9 23		lda #$23			lda 	#"#"
.3b93	20 e3 3b	jsr $3be3			jsr 	TIDCheckCopy
.3b96	a9 28		lda #$28			lda 	#"("
.3b98	20 e3 3b	jsr $3be3			jsr 	TIDCheckCopy
.3b9b	20 18 3a	jsr $3a18			jsr 	TokenSearch 				; is it a token
.3b9e	b0 41		bcs $3be1			bcs 	_TIExit 					; if so, then exit.
.3ba0	98		tya				tya
.3ba1	48		pha				pha
.3ba2	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3ba4	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.3ba7	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3baa	c9 28		cmp #$28			cmp 	#"("
.3bac	d0 02		bne $3bb0			bne 	_TINotArray
.3bae	ca		dex				dex 								; yes, remove it and convert to array.
.3baf	c8		iny				iny
.3bb0					_TINotArray:
.3bb0	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3bb3	c9 24		cmp #$24			cmp 	#"$"
.3bb5	d0 03		bne $3bba			bne 	_TINotString
.3bb7	ca		dex				dex
.3bb8	c8		iny				iny
.3bb9	c8		iny				iny
.3bba					_TINotString:
.3bba	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3bbd	c9 23		cmp #$23			cmp 	#"#"
.3bbf	d0 05		bne $3bc6			bne 	_TINotFloat
.3bc1	ca		dex				dex
.3bc2	c8		iny				iny
.3bc3	c8		iny				iny
.3bc4	c8		iny				iny
.3bc5	c8		iny				iny
.3bc6					_TINotFloat:
.3bc6	e8		inx				inx 								; write end marker for identifier.
.3bc7	98		tya				tya
.3bc8	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3bcb	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3bce	a2 01		ldx #$01			ldx 	#1
.3bd0					_TIOutput:
.3bd0	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3bd3	29 3f		and #$3f			and 	#$3F
.3bd5	48		pha				pha
.3bd6	20 08 3b	jsr $3b08			jsr 	TokenWrite
.3bd9	e8		inx				inx
.3bda	68		pla				pla
.3bdb	c9 3a		cmp #$3a			cmp 	#$3A
.3bdd	90 f1		bcc $3bd0			bcc 	_TIOutput
.3bdf	68		pla				pla
.3be0	a8		tay				tay
.3be1					_TIExit:
.3be1	38		sec				sec 								; this can't fail.
.3be2	60		rts				rts
.3be3					TIDCheckCopy:
.3be3	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3be5	d0 08		bne $3bef			bne 	_TIDCCExit
.3be7	e8		inx				inx
.3be8	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3beb	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bee	c8		iny				iny
.3bef					_TIDCCExit:
.3bef	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3bf0					TokeniseInteger:
.3bf0	85 2c		sta $2c				sta 	temp1 						; save base
.3bf2	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3bf4	8e cf 0a	stx $0acf			stx 	convertBuffer
.3bf7					_TIGetChars:
.3bf7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.3bf9	c9 30		cmp #$30			cmp 	#"0"
.3bfb	90 1f		bcc $3c1c			bcc 	_TIEndGet
.3bfd	c9 3a		cmp #$3a			cmp 	#"9"+1
.3bff	90 10		bcc $3c11			bcc 	_TIHaveChar
.3c01	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3c03	c9 0a		cmp #$0a			cmp 	#10
.3c05	f0 15		beq $3c1c			beq 	_TIEndGet
.3c07	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3c09	c9 41		cmp #$41			cmp 	#"A"
.3c0b	90 0f		bcc $3c1c			bcc 	_TIEndGet
.3c0d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3c0f	b0 0b		bcs $3c1c			bcs 	_TIEndGet
.3c11					_TIHaveChar:
.3c11	e8		inx				inx 								; write into buffer.
.3c12	8e cf 0a	stx $0acf			stx 	convertBuffer
.3c15	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3c18	c8		iny				iny 								; next char
.3c19	4c f7 3b	jmp $3bf7			jmp 	_TIGetChars
.3c1c					_TIEndGet:
.3c1c	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3c1e	f0 1c		beq $3c3c			beq 	_TIFail
.3c20	98		tya				tya
.3c21	48		pha				pha
.3c22	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3c24	85 2a		sta $2a				sta 	temp0
.3c26	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3c28	85 2b		sta $2b				sta 	1+(temp0)
.3c2a	a9 00		lda #$00			lda 	#0 							; stack level 0
.3c2c	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3c2e	a2 1a		ldx #$1a		ldx	#26
.3c30	20 23 35	jsr $3523		jsr	mainHandler
.3c33	68		pla				pla
.3c34	a8		tay				tay
.3c35	90 05		bcc $3c3c			bcc 	_TIFail 					; didn't convert.
.3c37	20 3e 3c	jsr $3c3e			jsr 	TIRecursiveOut 				; recursive output ?
.3c3a	38		sec				sec
.3c3b	60		rts				rts
.3c3c					_TIFail:
.3c3c	18		clc				clc
.3c3d	60		rts				rts
.3c3e					TIRecursiveOut:
.3c3e	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3c40	29 3f		and #$3f			and 	#$3F
.3c42	09 40		ora #$40			ora 	#$40
.3c44	48		pha				pha
.3c45	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3c47	29 c0		and #$c0			and 	#$C0
.3c49	05 58		ora $58				ora 	esInt1
.3c4b	05 60		ora $60				ora 	esInt2
.3c4d	05 68		ora $68				ora 	esInt3
.3c4f	f0 10		beq $3c61			beq 	_TIRONoRecursion
.3c51	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3c53					_TIROShift:
.3c53	46 68		lsr $68				lsr 	esInt3
.3c55	66 60		ror $60				ror 	esInt2
.3c57	66 58		ror $58				ror 	esInt1
.3c59	66 50		ror $50				ror 	esInt0
.3c5b	ca		dex				dex
.3c5c	d0 f5		bne $3c53			bne 	_TIROShift
.3c5e	20 3e 3c	jsr $3c3e			jsr 	TIRecursiveOut 				; call recursively
.3c61					_TIRONoRecursion:
.3c61	68		pla				pla 								; pull the old bit.
.3c62	4c 08 3b	jmp $3b08			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3c65					TokenisePunctuation:
.3c65	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3c67	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3c6a	c8		iny				iny
.3c6b	b1 28		lda ($28),y			lda 	(codePtr),y
.3c6d	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3c70	c8		iny				iny 								; Y is +2
.3c71	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3c73	8d cf 0a	sta $0acf			sta 	convertBuffer
.3c76	20 18 3a	jsr $3a18			jsr 	TokenSearch 				; search for that token.
.3c79	b0 0a		bcs $3c85			bcs 	_TIFound
.3c7b	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3c7e	88		dey				dey 								; Y is now +1
.3c7f	20 18 3a	jsr $3a18			jsr 	TokenSearch 				; search for that token.
.3c82	b0 01		bcs $3c85			bcs 	_TIFound
.3c84	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3c85					_TIFound:
.3c85	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3c86					TokeniseString:
.3c86	c8		iny				iny 								; skip opening quote
.3c87	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3c89	84 2a		sty $2a				sty 	temp0 						; save start.
.3c8b					_TSGetLength:
.3c8b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3c8d	f0 21		beq $3cb0			beq 	_TSFail						; end of line, fail
.3c8f	c8		iny				iny
.3c90	e8		inx				inx
.3c91	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3c93	d0 f6		bne $3c8b			bne 	_TSGetLength
.3c95	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3c97	20 08 3b	jsr $3b08			jsr 	TokenWrite
.3c9a	8a		txa				txa 								; output length
.3c9b	20 08 3b	jsr $3b08			jsr 	TokenWrite
.3c9e	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3ca0	e0 00		cpx #$00			cpx 	#0 							; check ended
.3ca2	f0 09		beq $3cad			beq 	_TSExit
.3ca4					_TSOutput:
.3ca4	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3ca6	20 08 3b	jsr $3b08			jsr 	TokenWrite
.3ca9	c8		iny				iny
.3caa	ca		dex				dex
.3cab	d0 f7		bne $3ca4			bne 	_TSOutput
.3cad					_TSExit:
.3cad	c8		iny				iny 								; skip ending quote
.3cae	38		sec				sec 								; return CS.
.3caf	60		rts				rts
.3cb0					_TSFail:
.3cb0	18		clc				clc
.3cb1	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3cb2					TokenTableAddress:
>3cb2	ba 3c						.word 	Group0Text
>3cb4	83 3e						.word 	Group1Text
>3cb6	d0 3f						.word 	Group2Text
>3cb8	f7 3f						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3cba					Group0Text:
>3cba	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3cbe	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3cc1	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3cc5	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3cc8	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3ccb	01 be					.byte $01,$be                          ; $8b >
>3ccd	01 bc					.byte $01,$bc                          ; $8c <
>3ccf	01 bd					.byte $01,$bd                          ; $8d =
>3cd1	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3cd4	01 ab					.byte $01,$ab                          ; $8f +
>3cd6	01 ad					.byte $01,$ad                          ; $90 -
>3cd8	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3cdb	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3cde	01 aa					.byte $01,$aa                          ; $93 *
>3ce0	01 af					.byte $01,$af                          ; $94 /
>3ce2	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3ce6	01 de					.byte $01,$de                          ; $96 ^
>3ce8	01 a1					.byte $01,$a1                          ; $97 !
>3cea	01 bf					.byte $01,$bf                          ; $98 ?
>3cec	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3cf3	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3cf9	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3cfd	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3d00	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3d08	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3d0e	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3d13	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3d18	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3d1d	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3d23	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3d2b	01 a8					.byte $01,$a8                          ; $a4 (
>3d2d	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3d32	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3d37	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3d3c	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3d44	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3d49	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3d4e	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3d54	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3d59	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3d5e	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3d63	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3d6a	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3d71	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3d76	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3d7d	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3d84	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3d8a	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3d91	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3d97	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3d9f	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3da5	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3daa	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3db0	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3db6	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3dbc	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3dc1	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3dc6	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3dcd	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3dd4	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3ddc	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3de4	01 c0					.byte $01,$c0                          ; $c3 @
>3de6	01 fe					.byte $01,$fe                          ; $c4 ~
>3de8	01 a6					.byte $01,$a6                          ; $c5 &
>3dea	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3df0	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3df8	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3dfc	01 a9					.byte $01,$a9                          ; $c9 )
>3dfe	01 ba					.byte $01,$ba                          ; $ca :
>3e00	01 ac					.byte $01,$ac                          ; $cb ,
>3e02	01 bb					.byte $01,$bb                          ; $cc ;
>3e04	01 a7					.byte $01,$a7                          ; $cd '
>3e06	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3e09	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3e0e	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3e13	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3e19	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3e1d	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3e21	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3e25	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3e2b	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3e30	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3e34	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3e3a	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3e3f	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3e45	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3e48	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3e4d	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3e54	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3e59	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3e5e	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3e63	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3e67	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3e6d	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3e71	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3e78	01 ae					.byte $01,$ae                          ; $e5 .
>3e7a	01 a3					.byte $01,$a3                          ; $e6 #
>3e7c	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e7 clear
>3e82	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3e83					Group1Text:
>3e83	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>3e88	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>3e8d	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>3e92	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>3e96	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>3e9c	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3ea0	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3ea5	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3ead	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3eb1	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3eb6	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3ebb	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>3ec0	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>3ec6	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>3ecd	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>3ed1	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>3ed7	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>3edb	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>3edf	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>3ee3	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>3ee7	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>3eeb	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>3eef	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>3ef3	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>3ef7	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>3efb	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>3eff	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>3f03	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>3f07	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>3f0b	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>3f0f	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>3f13	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>3f17	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>3f1b	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>3f1f	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>3f23	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>3f27	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>3f2b	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>3f2f	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>3f33	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>3f37	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>3f3b	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>3f3f	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>3f43	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>3f47	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>3f4b	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>3f4f	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>3f53	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>3f57	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>3f5b	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>3f5f	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>3f63	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>3f67	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>3f6b	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>3f6f	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>3f73	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>3f77	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>3f7b	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>3f7f	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>3f83	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>3f87	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>3f8b	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>3f8f	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>3f93	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>3f97	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>3f9b	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>3f9f	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>3fa3	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>3fa7	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>3fab	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>3faf	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>3fb3	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>3fb7	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>3fbb	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>3fbf	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>3fc3	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>3fc7	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>3fcb	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>3fcf	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3fd0					Group2Text:
>3fd0	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3fd6	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3fdc	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3fe2	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3fe7	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>3fef	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>3ff6	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3ff7					Group3Text:
>3ff7	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3ffe	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>4005	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.4006					tokeniserHandler:
.4006	7c 09 40	jmp ($4009,x)			jmp 	(tokeniserVectors,x)
.4009					tokeniserVectors:
>4009	15 40					.word _DummyControlHandler ; index 0
>400b	02 38					.word Detokenise           ; index 2
>400d	f6 37					.word ListLine             ; index 4
>400f	87 3a					.word TokTest              ; index 6
>4011	a7 3a					.word Tokenise             ; index 8
>4013	aa 3a					.word TokeniseASCIIZ       ; index 10
.4015					_DummyControlHandler:
.4015	60		rts			rts

;******  Return to file: basic.asm

.4016					section_end_tokeniser:
.4016					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.4016					AccessArray:
.4016	8a		txa				txa
.4017	48		pha				pha
.4018	e8		inx				inx
.4019	20 e2 40	jsr $40e2			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.401c	68		pla				pla
.401d	aa		tax				tax
.401e	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4020	85 2a		sta $2a				sta 	temp0
.4022	b5 58		lda $58,x			lda 	esInt1,x
.4024	85 2b		sta $2b				sta 	temp0+1
.4026	8a		txa				txa
.4027	48		pha				pha
.4028	98		tya				tya
.4029	48		pha				pha
.402a					_AAFollow:
.402a	a0 00		ldy #$00			ldy 	#0
.402c	b1 2a		lda ($2a),y			lda 	(temp0),y
.402e	48		pha				pha
.402f	c8		iny				iny
.4030	b1 2a		lda ($2a),y			lda 	(temp0),y
.4032	85 2b		sta $2b				sta 	temp0+1
.4034	68		pla				pla
.4035	85 2a		sta $2a				sta 	temp0
.4037	e8		inx				inx 								; advance to next stack slot.
.4038	a0 00		ldy #$00			ldy 	#0
.403a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.403c	d5 50		cmp $50,x			cmp 	esInt0,x
.403e	c8		iny				iny
.403f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4041	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4043	29 7f		and #$7f			and 	#$7F
.4045	f5 58		sbc $58,x			sbc 	esInt1,x
.4047	90 50		bcc $4099			bcc 	_AABadIndex 				; failed on index if max index < required.
.4049	18		clc				clc
.404a	a5 2a		lda $2a				lda 	temp0
.404c	69 02		adc #$02			adc 	#2
.404e	85 2a		sta $2a				sta 	temp0
.4050	90 02		bcc $4054			bcc 	_AANoCarry
.4052	e6 2b		inc $2b				inc 	temp0+1
.4054					_AANoCarry:
.4054	b5 50		lda $50,x			lda 	esInt0,x
.4056	85 2e		sta $2e				sta 	temp2
.4058	b5 58		lda $58,x			lda 	esInt1,x
.405a	85 2f		sta $2f				sta 	temp2+1
.405c	ac ed 0d	ldy $0ded			ldy 	varType
.405f	b9 3c 41	lda $413c,y			lda 	CAActualSize-$3A,y
.4062	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.4064	30 02		bmi $4068			bmi 	_AANotPointer
.4066	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4068					_AANotPointer:
.4068	20 e6 41	jsr $41e6			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.406b	18		clc				clc
.406c	a5 2a		lda $2a				lda 	temp0
.406e	65 2e		adc $2e				adc 	temp2
.4070	85 2a		sta $2a				sta 	temp0
.4072	a5 2b		lda $2b				lda 	temp0+1
.4074	65 2f		adc $2f				adc 	temp2+1
.4076	85 2b		sta $2b				sta 	temp0+1
.4078	b5 49		lda $49,x			lda 	esType+1,x
.407a	30 07		bmi $4083			bmi 	_AAUsedAllIndices
.407c	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.407e	10 14		bpl $4094			bpl 	_AABadDepth 				; no, too many indexes.
.4080	4c 2a 40	jmp $402a			jmp 	_AAFollow 					; otherwise follow them.
.4083					_AAUsedAllIndices:
.4083	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.4085	30 0d		bmi $4094			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.4087	68		pla				pla
.4088	a8		tay				tay
.4089	68		pla				pla
.408a	aa		tax				tax
.408b	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.408d	95 50		sta $50,x			sta 	esInt0,x
.408f	a5 2b		lda $2b				lda 	temp0+1
.4091	95 58		sta $58,x			sta 	esInt1,x
.4093	60		rts				rts
.4094					_AABadDepth:
.4094	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.4096	20 18 15	jsr $1518		jsr	errorHandler
.4099					_AABadIndex:
.4099	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.409b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0deb					elementSize:
>0deb							.fill	 1
.409e					CreateArray:
.409e	20 75 42	jsr $4275			jsr 	AccessSetup 				; set up the basic stuff.
.40a1	ad ed 0d	lda $0ded			lda 	varType 					; is the variable type an array
.40a4	4a		lsr a				lsr 	a
.40a5	90 36		bcc $40dd			bcc 	CANotArray 					; no, cause an error.
.40a7	20 7e 43	jsr $437e			jsr 	FindVariable 				; does the variable exist already
.40aa	b0 2c		bcs $40d8			bcs 	CAFound 					; cannot redefine it.
.40ac	20 b2 42	jsr $42b2			jsr 	CreateVariable 				; create the variable entry.
.40af	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.40b1	48		pha				pha
.40b2	a5 2b		lda $2b				lda 	temp0+1
.40b4	48		pha				pha
.40b5	a2 00		ldx #$00			ldx 	#0
.40b7	20 e2 40	jsr $40e2			jsr 	GetArrayDimensions 			; get the array dimensions
.40ba	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.40bc	20 12 41	jsr $4112			jsr 	CreateArrayLevel 			; level to YA
.40bf	aa		tax				tax 								; level now in YX
.40c0	68		pla				pla 								; get address back to temp0 to write.
.40c1	85 2b		sta $2b				sta 	temp0+1
.40c3	68		pla				pla
.40c4	85 2a		sta $2a				sta 	temp0
.40c6	98		tya				tya 								; write YX there.
.40c7	a0 06		ldy #$06			ldy 	#6
.40c9	91 2a		sta ($2a),y			sta 	(temp0),y
.40cb	88		dey				dey
.40cc	8a		txa				txa
.40cd	91 2a		sta ($2a),y			sta 	(temp0),y
.40cf	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y and exit.
.40d2	60		rts				rts
.40d3					CASize:
.40d3	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.40d5	20 18 15	jsr $1518		jsr	errorHandler
.40d8					CAFound:
.40d8	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.40da	20 18 15	jsr $1518		jsr	errorHandler
.40dd					CANotArray:
.40dd	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.40df	20 18 15	jsr $1518		jsr	errorHandler
.40e2					GetArrayDimensions:
.40e2	ad ed 0d	lda $0ded			lda 	varType 					; push variable type on the stack.
.40e5	48		pha				pha
.40e6	ac ee 0d	ldy $0dee			ldy 	varEnd
.40e9					_CAGetDimensions:
.40e9	8a		txa				txa 								; get the next level
.40ea	a2 0a		ldx #$0a		ldx	#10
.40ec	20 23 35	jsr $3523		jsr	mainHandler
.40ef	aa		tax				tax
.40f0	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.40f2	29 e0		and #$e0			and 	#$E0
.40f4	15 60		ora $60,x			ora 	esInt2,x
.40f6	15 68		ora $68,x			ora 	esInt3,x
.40f8	d0 d9		bne $40d3			bne 	CASize
.40fa	e8		inx				inx 								; next level.
.40fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.40fd	c8		iny				iny
.40fe	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4100	f0 e7		beq $40e9			beq 	_CAGetDimensions
.4102	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4104	d0 cd		bne $40d3			bne 	CASize
.4106	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.4108	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.410a	68		pla				pla 								; restore the variable type ($3A-$3F)
.410b	8d ed 0d	sta $0ded			sta 	varType
.410e	8c ee 0d	sty $0dee			sty 	varEnd 						; save exit Y value, after dimensions
.4111	60		rts				rts
.4112					CreateArrayLevel:
.4112	ac ed 0d	ldy $0ded			ldy 	varType
.4115	b9 3c 41	lda $413c,y			lda 	CAActualSize-$3A,y
.4118	8d eb 0d	sta $0deb			sta 	elementSize 				; get element size this level.
.411b	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.411d	30 05		bmi $4124			bmi 	_CANotPointer
.411f	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4121	8d eb 0d	sta $0deb			sta 	elementSize
.4124					_CANotPointer:
.4124	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.4126	85 2a		sta $2a				sta 	temp0
.4128	48		pha				pha
.4129	a5 36		lda $36				lda 	lowMemory+1
.412b	85 2b		sta $2b				sta 	temp0+1
.412d	48		pha				pha
.412e	20 af 41	jsr $41af			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4131	a0 00		ldy #$00			ldy 	#0
.4133	b5 50		lda $50,x			lda 	esInt0,x
.4135	91 2a		sta ($2a),y			sta 	(temp0),y
.4137	c8		iny				iny
.4138	b5 58		lda $58,x			lda 	esInt1,x
.413a	91 2a		sta ($2a),y			sta 	(temp0),y
.413c	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.413e	30 06		bmi $4146			bmi 	_CALNotLast
.4140	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4142	09 80		ora #$80			ora 	#$80
.4144	91 2a		sta ($2a),y			sta 	(temp0),y
.4146					_CALNotLast:
.4146	a9 02		lda #$02			lda 	#2
.4148	20 6c 41	jsr $416c			jsr 	_CALAddTemp0
.414b	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.414d	95 60		sta $60,x			sta 	esInt2,x 					; count.
.414f	b5 58		lda $58,x			lda 	esInt1,x
.4151	95 68		sta $68,x			sta 	esInt3,x
.4153					_CALClear:
.4153	20 7c 41	jsr $417c			jsr 	EraseOneElement
.4156	ad eb 0d	lda $0deb			lda 	elementSize 				; move to next element
.4159	20 6c 41	jsr $416c			jsr 	_CALAddTemp0
.415c	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.415e	d0 02		bne $4162			bne 	_CALNoBorrow
.4160	d6 68		dec $68,x			dec 	esInt3,x
.4162					_CALNoBorrow:
.4162	d6 60		dec $60,x			dec 	esInt2,x
.4164	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.4166	10 eb		bpl $4153			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.4168	68		pla				pla 								; restore the start of this into YA.
.4169	a8		tay				tay
.416a	68		pla				pla
.416b	60		rts				rts
.416c					_CALAddTemp0:
.416c	18		clc				clc
.416d	65 2a		adc $2a				adc 	temp0
.416f	85 2a		sta $2a				sta 	temp0
.4171	90 02		bcc $4175			bcc 	_CALANoCarry
.4173	e6 2b		inc $2b				inc 	temp0+1
.4175					_CALANoCarry:
.4175	60		rts				rts
.4176					CAActualSize:
>4176	04 04						.byte 	VarISize,VarISize
>4178	02 02						.byte 	VarSSize,VarSSize
>417a	06 06						.byte 	VarFSize,VarFSize
.417c					EraseOneElement:
.417c	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.417e	10 09		bpl $4189			bpl 	_EOESubArray
.4180	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.4182	ad ed 0d	lda $0ded			lda 	varType
.4185	20 1c 43	jsr $431c			jsr 	ZeroTemp0Y
.4188	60		rts				rts
.4189					_EOESubArray:
.4189	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.418b	48		pha				pha
.418c	a5 2b		lda $2b				lda 	temp0+1
.418e	48		pha				pha
.418f	ad eb 0d	lda $0deb			lda 	elementSize 				; save element size
.4192	48		pha				pha
.4193	e8		inx				inx 								; create at next level
.4194	20 12 41	jsr $4112			jsr 	CreateArrayLevel
.4197	ca		dex				dex
.4198	85 32		sta $32				sta 	tempShort 					; save A
.419a	68		pla				pla  								; restore element size.
.419b	8d eb 0d	sta $0deb			sta 	elementSize
.419e	68		pla				pla 								; restore temp0, which is where this new array level goes.
.419f	85 2b		sta $2b				sta 	temp0+1
.41a1	68		pla				pla
.41a2	85 2a		sta $2a				sta 	temp0
.41a4	98		tya				tya 								; store Y/A there
.41a5	a0 01		ldy #$01			ldy 	#1
.41a7	91 2a		sta ($2a),y			sta 	(temp0),y
.41a9	a5 32		lda $32				lda 	tempShort
.41ab	88		dey				dey
.41ac	91 2a		sta ($2a),y			sta 	(temp0),y
.41ae	60		rts				rts
.41af					AllocateArraySpace:
.41af	18		clc				clc 								; element count + 1 => temp2.
.41b0	b5 50		lda $50,x			lda 	esInt0,x
.41b2	69 01		adc #$01			adc 	#1
.41b4	85 2e		sta $2e				sta 	temp2
.41b6	b5 58		lda $58,x			lda 	esInt1,x
.41b8	69 00		adc #$00			adc 	#0
.41ba	85 2f		sta $2f				sta 	temp2+1
.41bc	ad eb 0d	lda $0deb			lda 	elementSize 				; bytes per element
.41bf	20 e6 41	jsr $41e6			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.41c2	18		clc				clc 								; add 2 for 'max element' byte.
.41c3	a5 2e		lda $2e				lda 	temp2
.41c5	69 02		adc #$02			adc 	#2
.41c7	85 2e		sta $2e				sta 	temp2
.41c9	90 02		bcc $41cd			bcc 	_AASNoCarry
.41cb	e6 2f		inc $2f				inc 	temp2+1
.41cd					_AASNoCarry:
.41cd	18		clc				clc 								; add to low memory, allocating space.
.41ce	a5 35		lda $35				lda 	lowMemory
.41d0	65 2e		adc $2e				adc 	temp2
.41d2	85 35		sta $35				sta 	lowMemory
.41d4	a5 36		lda $36				lda 	lowMemory+1
.41d6	65 2f		adc $2f				adc 	temp2+1
.41d8	85 36		sta $36				sta 	lowMemory+1
.41da	b0 05		bcs $41e1			bcs 	_AASFail 					; out of memory as adding causes wrapround
.41dc	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.41de	b0 01		bcs $41e1			bcs 	_AASFail
.41e0	60		rts				rts
.41e1					_AASFail:
.41e1	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.41e3	20 18 15	jsr $1518		jsr	errorHandler
.41e6					MultiplyTemp2ByA:
.41e6	48		pha				pha
.41e7	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.41e9	85 30		sta $30				sta 	temp3
.41eb	a5 2f		lda $2f				lda 	temp2+1
.41ed	85 31		sta $31				sta 	temp3+1
.41ef	68		pla				pla
.41f0	06 2e		asl $2e				asl 	temp2 						; double it.
.41f2	26 2f		rol $2f				rol 	temp2+1
.41f4	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.41f6	f0 15		beq $420d			beq 	_MTBAExit
.41f8	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.41fa	d0 0d		bne $4209			bne 	_MTBANotFloat
.41fc	18		clc				clc 								; so this will make it x 3
.41fd	a5 2e		lda $2e				lda 	temp2
.41ff	65 30		adc $30				adc 	temp3
.4201	85 2e		sta $2e				sta 	temp2
.4203	a5 2f		lda $2f				lda 	temp2+1
.4205	65 31		adc $31				adc 	temp3+1
.4207	85 2f		sta $2f				sta 	temp2+1
.4209					_MTBANotFloat:
.4209	06 2e		asl $2e				asl 	temp2 						; double it.
.420b	26 2f		rol $2f				rol 	temp2+1
.420d					_MTBAExit:
.420d	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0dec					varHash:
>0dec							.fill	1
.0ded					varType:
>0ded							.fill 	1
.0dee					varEnd:
>0dee							.fill 	1
.003b					hashList:
>003b							.fill 	2
.420e					AccessVariable:
.420e	aa		tax				tax 								; stack in X
.420f	c8		iny				iny									; look at second character
.4210	b1 28		lda ($28),y			lda 	(codePtr),y
.4212	88		dey				dey
.4213	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4215	d0 15		bne $422c			bne 	_AVLong 					; no, always use the hash tables.
.4217	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4219	38		sec				sec 	 							; make it 0-25
.421a	e9 01		sbc #$01			sbc 	#1
.421c	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.421d	0a		asl a				asl 	a
.421e	95 50		sta $50,x			sta 	esInt0,x
.4220	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4222	95 58		sta $58,x			sta 	esInt1,x
.4224	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4226	95 48		sta $48,x			sta 	esType,x
.4228	c8		iny				iny 								; skip over the variable reference in the code.
.4229	c8		iny				iny  								; (1 letter, 1 type)
.422a	8a		txa				txa 								; stack in A to return.
.422b	60		rts				rts
.422c					_AVLong:
.422c	8a		txa				txa
.422d	48		pha				pha
.422e	20 75 42	jsr $4275			jsr 	AccessSetup 				; set up the basic information we need for later
.4231	20 7e 43	jsr $437e			jsr 	FindVariable 				; does the variable exist already ?
.4234	b0 0e		bcs $4244			bcs 	_AVFound 					; yes, then its found
.4236	ad ed 0d	lda $0ded			lda 	varType 					; otherwise, is the variable type an array
.4239	4a		lsr a				lsr 	a
.423a	90 05		bcc $4241			bcc 	_AVCanCreate 				; if not, we can autocreate
.423c	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.423e	20 18 15	jsr $1518		jsr	errorHandler
.4241					_AVCanCreate:
.4241	20 b2 42	jsr $42b2			jsr 	CreateVariable 				; variable does not exist, create it.
.4244					_AVFound:
.4244	68		pla				pla
.4245	aa		tax				tax
.4246	18		clc				clc 								; copy temp0 (variable record address)
.4247	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4249	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.424b	95 50		sta $50,x			sta 	esInt0,x
.424d	a5 2b		lda $2b				lda 	temp0+1
.424f	69 00		adc #$00			adc 	#0
.4251	95 58		sta $58,x			sta 	esInt1,x
.4253	a9 00		lda #$00			lda 	#0
.4255	95 60		sta $60,x			sta 	esInt2,x
.4257	95 68		sta $68,x			sta 	esInt3,x
.4259	ac ed 0d	ldy $0ded			ldy 	varType 					; get the type ID from the type.
.425c	b9 35 42	lda $4235,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.425f	95 48		sta $48,x			sta 	esType,x
.4261	ac ee 0d	ldy $0dee			ldy 	varEnd 						; restore Y
.4264	ad ed 0d	lda $0ded			lda 	VarType 					; get variable type, put LSB into C
.4267	4a		lsr a				lsr 	a
.4268	90 03		bcc $426d			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.426a	20 16 40	jsr $4016			jsr 	AccessArray 				; array lookup. if LSB was set.
.426d					_AVNotArray:
.426d	8a		txa				txa 								; return stack in A and return
.426e	60		rts				rts
.426f					_AVTypeTable:
>426f	80 80						.byte 	$80,$80						; integer
>4271	c0 c0						.byte 	$C0,$C0 					; string
>4273	81 81						.byte 	$81,$81 					; float
.4275					AccessSetup:
.4275	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4277	8d ec 0d	sta $0dec			sta 	varHash
.427a	98		tya				tya
.427b	48		pha				pha
.427c	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.427e	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.4280	b0 0b		bcs $428d			bcs 	_ASComplete
.4282	18		clc				clc 								; add to the hash. Might improve this.
.4283	6d ec 0d	adc $0dec			adc 	varHash
.4286	8d ec 0d	sta $0dec			sta 	varHash
.4289	c8		iny				iny 								; next character
.428a	4c 7c 42	jmp $427c			jmp 	_ASLoop
.428d					_ASComplete:
.428d	8d ed 0d	sta $0ded			sta 	varType 					; save variable type byte
.4290	c8		iny				iny
.4291	8c ee 0d	sty $0dee			sty 	varEnd 						; save the ending position.
.4294	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4295	e9 3a		sbc #$3a			sbc 	#$3A
.4297	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4298	0a		asl a				asl 	a
.4299	0a		asl a				asl 	a
.429a	0a		asl a				asl 	a 							; 2 bytes/word
.429b	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.429d	ad ec 0d	lda $0dec			lda 	varHash 					; get hash
.42a0	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.42a2	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.42a3	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.42a5	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.42a7	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.42a9	a9 0a		lda #$0a			lda 	#hashTables >> 8
.42ab	69 00		adc #$00			adc 	#0
.42ad	85 3c		sta $3c				sta 	hashList+1
.42af	68		pla				pla
.42b0	a8		tay				tay
.42b1	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.42b2					CreateVariable:
.42b2	98		tya				tya 								; push Y on the stack twice.
.42b3	48		pha				pha									; position in code of the new variable.
.42b4	48		pha				pha
.42b5	ae ed 0d	ldx $0ded			ldx 	varType 					; get var type 0-5 from the var type
.42b8	bd dc 42	lda $42dc,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.42bb	48		pha				pha 								; save length
.42bc	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.42be	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.42c0	a5 36		lda $36				lda 	lowMemory+1
.42c2	85 2b		sta $2b				sta 	temp0+1
.42c4	68		pla				pla 								; get length
.42c5	18		clc				clc 								; add to low memory.
.42c6	65 35		adc $35				adc 	lowMemory
.42c8	85 35		sta $35				sta 	lowMemory
.42ca	90 08		bcc $42d4			bcc 	_CVNoCarry
.42cc	e6 36		inc $36				inc 	lowMemory+1
.42ce	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.42d0	c5 34		cmp $34				cmp 	highMemory+1
.42d2	b0 3d		bcs $4311			bcs 	_CVMemory
.42d4					_CVNoCarry:
.42d4	ad ec 0d	lda $0dec			lda 	varHash 					; store hash at offset 4.
.42d7	a0 04		ldy #$04			ldy 	#4
.42d9	91 2a		sta ($2a),y			sta 	(temp0),y
.42db	68		pla				pla 								; offset, work out where the variable name is.
.42dc	18		clc				clc
.42dd	65 28		adc $28				adc 	codePtr
.42df	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.42e1	91 2a		sta ($2a),y			sta 	(temp0),y
.42e3	a5 29		lda $29				lda 	codePtr+1
.42e5	69 00		adc #$00			adc 	#0
.42e7	c8		iny				iny
.42e8	91 2a		sta ($2a),y			sta 	(temp0),y
.42ea	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.42ed	b0 03		bcs $42f2			bcs 	_CVNotImmediate
.42ef	20 54 43	jsr $4354			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.42f2					_CVNotImmediate:
.42f2	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.42f4	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.42f6	91 2a		sta ($2a),y			sta 	(temp0),y
.42f8	c8		iny				iny
.42f9	b1 3b		lda ($3b),y			lda 	(hashList),y
.42fb	91 2a		sta ($2a),y			sta 	(temp0),y
.42fd	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.42ff	91 3b		sta ($3b),y			sta 	(hashList),y
.4301	88		dey				dey
.4302	a5 2a		lda $2a				lda 	temp0
.4304	91 3b		sta ($3b),y			sta 	(hashList),y
.4306	ad ed 0d	lda $0ded			lda 	varType 					; type in A
.4309	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.430b	20 1c 43	jsr $431c			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.430e	68		pla				pla
.430f	a8		tay				tay
.4310	60		rts				rts
.4311					_CVMemory:
.4311	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4313	20 18 15	jsr $1518		jsr	errorHandler
>4316	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4318	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>431a	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.431c					ZeroTemp0Y:
.431c	4a		lsr a				lsr 	a 							; bit 0 in carry
.431d	0a		asl a				asl 	a
.431e	b0 19		bcs $4339			bcs 	_ZTExit 					; we don't initialise arrays.
.4320	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4322	f0 16		beq $433a			beq 	_ZTWriteNullString 			; write "" string
.4324	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4326	f0 22		beq $434a			beq 	_ZTWriteFloat
.4328	98		tya				tya
.4329	48		pha				pha
.432a	a9 00		lda #$00			lda 	#0
.432c	91 2a		sta ($2a),y			sta 	(temp0),y
.432e	c8		iny				iny
.432f	91 2a		sta ($2a),y			sta 	(temp0),y
.4331	c8		iny				iny
.4332	91 2a		sta ($2a),y			sta 	(temp0),y
.4334	c8		iny				iny
.4335	91 2a		sta ($2a),y			sta 	(temp0),y
.4337	68		pla				pla
.4338	a8		tay				tay
.4339					_ZTExit:
.4339	60		rts				rts
.433a					_ZTWriteNullString:
.433a	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.433c	8d ce 0a	sta $0ace			sta 	NullString
.433f	a9 ce		lda #$ce			lda 	#NullString & $FF
.4341	91 2a		sta ($2a),y			sta 	(temp0),y
.4343	a9 0a		lda #$0a			lda 	#NullString >> 8
.4345	c8		iny				iny
.4346	91 2a		sta ($2a),y			sta 	(temp0),y
.4348	88		dey				dey
.4349	60		rts				rts
.434a					_ZTWriteFloat:
.434a	8a		txa				txa
.434b	48		pha				pha
.434c	a2 20		ldx #$20		ldx	#32
.434e	20 9d 1c	jsr $1c9d		jsr	floatingpointHandler
.4351	68		pla				pla
.4352	aa		tax				tax
.4353	60		rts				rts
.4354					CloneVariableName:
.4354	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4356	b1 2a		lda ($2a),y			lda 	(temp0),y
.4358	85 2e		sta $2e				sta 	temp2
.435a	c8		iny				iny
.435b	b1 2a		lda ($2a),y			lda 	(temp0),y
.435d	85 2f		sta $2f				sta 	temp2+1
.435f	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4361	91 2a		sta ($2a),y			sta 	(temp0),y
.4363	88		dey				dey
.4364	a5 35		lda $35				lda 	lowMemory
.4366	91 2a		sta ($2a),y			sta 	(temp0),y
.4368	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.436a					_CVNCopy:
.436a	b1 2e		lda ($2e),y			lda		(temp2),y
.436c	91 35		sta ($35),y			sta 	(lowMemory),y
.436e	c8		iny				iny
.436f	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4371	90 f7		bcc $436a			bcc 	_CVNCopy
.4373	98		tya				tya 								; add Y to low memory
.4374	18		clc				clc
.4375	65 35		adc $35				adc 	lowMemory
.4377	85 35		sta $35				sta 	lowMemory
.4379	90 02		bcc $437d			bcc 	_CVNNoCarry
.437b	e6 36		inc $36				inc 	lowMemory+1
.437d					_CVNNoCarry:
.437d	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.437e					FindVariable:
.437e	98		tya				tya
.437f	48		pha				pha
.4380	98		tya				tya 								; point temp2 to the actual name
.4381	18		clc				clc 								; in memory of the variable being created
.4382	65 28		adc $28				adc 	codePtr
.4384	85 2e		sta $2e				sta 	temp2
.4386	a5 29		lda $29				lda 	codePtr+1
.4388	69 00		adc #$00			adc 	#0
.438a	85 2f		sta $2f				sta 	temp2+1
.438c	a0 00		ldy #$00			ldy 	#0
.438e	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4390	85 2a		sta $2a				sta 	temp0
.4392	a5 3c		lda $3c				lda 	hashList+1
.4394	85 2b		sta $2b				sta 	temp0+1
.4396	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4398	b1 2a		lda ($2a),y			lda 	(temp0),y
.439a	f0 2c		beq $43c8			beq 	_FVFail
.439c	aa		tax				tax
.439d	88		dey				dey		 							; get LSB
.439e	b1 2a		lda ($2a),y			lda 	(temp0),y
.43a0	85 2a		sta $2a				sta 	temp0 						; update pointer.
.43a2	86 2b		stx $2b				stx 	temp0+1
.43a4	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.43a6	b1 2a		lda ($2a),y			lda 	(temp0),y
.43a8	cd ec 0d	cmp $0dec			cmp 	varHash
.43ab	d0 e9		bne $4396			bne 	_FVNext 					; if not, no point in checking the name.
.43ad	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.43ae	b1 2a		lda ($2a),y			lda 	(temp0),y
.43b0	85 2d		sta $2d				sta 	temp1+1
.43b2	88		dey				dey
.43b3	b1 2a		lda ($2a),y			lda 	(temp0),y
.43b5	85 2c		sta $2c				sta 	temp1
.43b7	a0 00		ldy #$00			ldy 	#0
.43b9					_FVCheck:
.43b9	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.43bb	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.43bd	d0 d7		bne $4396			bne 	_FVNext		 				; fail if different.
.43bf	c8		iny				iny
.43c0	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.43c2	90 f5		bcc $43b9			bcc 	_FVCheck
.43c4	68		pla				pla
.43c5	a8		tay				tay
.43c6	38		sec				sec
.43c7	60		rts				rts
.43c8					_FVFail:
.43c8	68		pla				pla
.43c9	a8		tay				tay
.43ca	18		clc				clc
.43cb	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.43cc					HashTableReset:
.43cc	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.43ce	a9 00		lda #$00			lda 	#0
.43d0					_HTRClear:
.43d0	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.43d3	ca		dex				dex
.43d4	d0 fa		bne $43d0			bne 	_HTRClear
.43d6	60		rts				rts

;******  Return to file: variable/variable.asm

.43d7					variableHandler:
.43d7	7c da 43	jmp ($43da,x)			jmp 	(variableVectors,x)
.43da					variableVectors:
>43da	e2 43					.word _DummyControlHandler ; index 0
>43dc	0e 42					.word AccessVariable       ; index 2
>43de	9e 40					.word CreateArray          ; index 4
>43e0	cc 43					.word HashTableReset       ; index 6
.43e2					_DummyControlHandler:
.43e2	60		rts			rts

;******  Return to file: basic.asm

.43e3					section_end_variable:
.43e3					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0def					endStorage:
>43e3							.align 	256
.4400					programMemory:
>43ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4400					section_end_footer:

;******  End of listing
