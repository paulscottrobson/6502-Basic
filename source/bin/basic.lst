
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Wed Mar 17 06:56:37 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$40					StackAddress = $40
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0078					endOfStack:
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex
=35					ErrorID_Assembler = 35 ; Bad Operand/Mode
=36					ErrorID_Branch = 36 ; Branch out of range
=37					ErrorID_Label = 37 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	f3 38						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 40		lda #$40			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 bf 14	jsr $14bf		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 e6 1a	jsr $1ae6		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 25 3c	jsr $3c25		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	8a		txa				txa
.1030	95 48		sta $48,x			sta 	esInt0,x
.1032	95 50		sta $50,x			sta 	esInt1,x
.1034	95 58		sta $58,x			sta 	esInt2,x
.1036	95 60		sta $60,x			sta 	esInt3,x
.1038	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.103a	aa		tax				tax
.103b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.103d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.103f	f0 41		beq $1082			beq 	_AGOExit
.1041	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1043	f0 3d		beq $1082			beq 	_AGOExit
.1045	c8		iny				iny 								; consume the token
.1046	a9 00		lda #$00			lda 	#AMD_IMM
.1048	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.104a	f0 2d		beq $1079			beq		_AGOEvalExit 				; with an operand.
.104c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.104e	f0 40		beq $1090			beq 	_AGOIndirect
.1050	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1052	d0 0b		bne $105f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1054	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1056	c8		iny				iny
.1057	aa		tax				tax
.1058	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.105a	e0 3a		cpx #$3a			cpx 	#$3A
.105c	f0 24		beq $1082			beq 	_AGOExit
.105e	88		dey				dey 								; unpick 2 iny
.105f					_AGOZeroPage1:
.105f	88		dey				dey
.1060	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1062	a2 06		ldx #$06		ldx	#6
.1064	20 71 31	jsr $3171		jsr	mainHandler
.1067	20 bf 10	jsr $10bf			jsr 	AsmGetIndexing
.106a	a9 01		lda #$01			lda 	#AMD_ZERO
.106c	90 14		bcc $1082			bcc 	_AGOExit
.106e	a9 05		lda #$05			lda 	#AMD_ZEROX
.1070	e0 00		cpx #$00			cpx 	#0
.1072	f0 0e		beq $1082			beq 	_AGOExit
.1074	a9 09		lda #$09			lda 	#AMD_ZEROY
.1076	4c 82 10	jmp $1082			jmp 	_AGOExit
.1079					_AGOEvalExit:
.1079	48		pha				pha
.107a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.107c	a2 06		ldx #$06		ldx	#6
.107e	20 71 31	jsr $3171		jsr	mainHandler
.1081	68		pla				pla
.1082					_AGOExit:
.1082	48		pha				pha 								; save the mode
.1083	a5 58		lda $58				lda 	esInt2 						; check the operand is zero.
.1085	05 60		ora $60				ora 	esInt3
.1087	d0 02		bne $108b			bne 	_AGOValue
.1089	68		pla				pla
.108a	60		rts				rts
.108b					_AGOValue:
.108b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.108d	20 e0 14	jsr $14e0		jsr	errorHandler
.1090					_AGOIndirect:
.1090	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1092	a2 06		ldx #$06		ldx	#6
.1094	20 71 31	jsr $3171		jsr	mainHandler
.1097	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1099	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.109b	f0 11		beq $10ae			beq 	_AGOIndIndY
.109d	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; must be ,X)
.10a0	90 39		bcc $10db			bcc 	AGISyntax
.10a2	e0 00		cpx #$00			cpx 	#0
.10a4	d0 35		bne $10db			bne 	AGISyntax
.10a6	a2 00		ldx #$00		ldx	#0
.10a8	20 71 31	jsr $3171		jsr	mainHandler
.10ab	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10ad	60		rts				rts
.10ae					_AGOIndIndY:
.10ae	c8		iny				iny
.10af	20 bf 10	jsr $10bf			jsr 	ASMGetIndexing 				; get indexing if any
.10b2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10b4	90 cc		bcc $1082			bcc 	_AGOExit 					; none then exit
.10b6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b8	f0 21		beq $10db			beq 	AGISyntax
.10ba	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10bc	4c 82 10	jmp $1082			jmp 	_AGOExit
.10bf					AsmGetIndexing:
.10bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10c1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10c3	18		clc				clc
.10c4	d0 14		bne $10da			bne 	_AGIExit 					; no comma, return with CC
.10c6	c8		iny				iny 								; get what SHOULD be X or Y
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c9	38		sec				sec 								; subtract 6 bit ASCII of X
.10ca	e9 18		sbc #$18			sbc 	#"X" & $3F
.10cc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10ce	b0 0b		bcs $10db			bcs 	AGISyntax
.10d0	aa		tax				tax 								; put in index
.10d1	c8		iny				iny 								; get what follows that, should be the $3A marker
.10d2	b1 28		lda ($28),y			lda 	(codePtr),y
.10d4	c8		iny				iny
.10d5	c9 3a		cmp #$3a			cmp 	#$3A
.10d7	d0 02		bne $10db			bne 	AGISyntax
.10d9	38		sec				sec 								; return CS and index mode in X
.10da					_AGIExit:
.10da	60		rts				rts
.10db					AGISyntax:
.10db	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10dd	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10e0					AsmWriteInstruction:
.10e0	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10e3	98		tya				tya
.10e4	48		pha				pha
.10e5	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e8	29 02		and #$02			and 	#2
.10ea	f0 2d		beq $1119			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10ec	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10ef	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f2	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10f5	20 54 11	jsr $1154			jsr 	AWIWriteHex
.10f8	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10fb	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.10fe	e0 00		cpx #$00			cpx 	#0
.1100	f0 0e		beq $1110			beq 	_ASMWEchoExit
.1102	a5 48		lda $48				lda 	esInt0
.1104	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1107	e0 01		cpx #$01			cpx 	#1
.1109	f0 05		beq $1110			beq 	_ASMWEchoExit
.110b	a5 50		lda $50				lda 	esInt1
.110d	20 4d 11	jsr $114d			jsr 	AWIWriteHexSpace
.1110					_ASMWEchoExit:
.1110	8a		txa				txa
.1111	48		pha				pha
.1112	a2 04		ldx #$04		ldx	#4
.1114	20 bf 14	jsr $14bf		jsr	deviceHandler
.1117	68		pla				pla
.1118	aa		tax				tax
.1119					_ASMWNoEcho:
.1119	ad f2 0a	lda $0af2			lda 	finalOpcode
.111c	20 34 11	jsr $1134			jsr 	AsmWriteByte
.111f	e0 00		cpx #$00			cpx 	#0
.1121	f0 0e		beq $1131			beq 	_ASMWExit
.1123	a5 48		lda $48				lda 	esInt0
.1125	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1128	e0 01		cpx #$01			cpx 	#1
.112a	f0 05		beq $1131			beq 	_ASMWExit
.112c	a5 50		lda $50				lda 	esInt1
.112e	20 34 11	jsr $1134			jsr 	AsmWriteByte
.1131					_ASMWExit:
.1131	68		pla				pla
.1132	a8		tay				tay
.1133	60		rts				rts
.1134					AsmWriteByte:
.1134	a0 00		ldy #$00			ldy 	#0
.1136	48		pha				pha
.1137	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.113a	85 2a		sta $2a				sta 	temp0
.113c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.113f	85 2b		sta $2b				sta 	temp0+1
.1141	68		pla				pla 								; write out the byte.
.1142	91 2a		sta ($2a),y			sta 	(temp0),y
.1144	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1147	d0 03		bne $114c			bne 	_AWBNoCarry
.1149	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.114c					_AWBNoCarry:
.114c	60		rts				rts
.114d					AWIWriteHexSpace:
.114d	48		pha				pha
.114e	a9 20		lda #$20			lda 	#" "
.1150	20 67 11	jsr $1167			jsr 	AWIPrintChar
.1153	68		pla				pla
.1154					AWIWriteHex:
.1154	48		pha				pha
.1155	4a		lsr a				lsr 	a
.1156	4a		lsr a				lsr 	a
.1157	4a		lsr a				lsr 	a
.1158	4a		lsr a				lsr 	a
.1159	20 5d 11	jsr $115d			jsr 	AWIPrintNibble
.115c	68		pla				pla
.115d					AWIPrintNibble:
.115d	29 0f		and #$0f			and 	#15
.115f	c9 0a		cmp #$0a			cmp 	#10
.1161	90 02		bcc $1165			bcc 	_AWIPNDigit
.1163	69 06		adc #$06			adc 	#6
.1165					_AWIPNDigit:
.1165	69 30		adc #$30			adc 	#48
.1167					AWIPrintChar:
.1167	85 32		sta $32				sta 	tempShort
.1169	8a		txa				txa
.116a	48		pha				pha
.116b	a5 32		lda $32				lda 	tempShort
.116d	a2 16		ldx #$16		ldx	#22
.116f	20 bf 14	jsr $14bf		jsr	deviceHandler
.1172	68		pla				pla
.1173	aa		tax				tax
.1174	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.1175					AssembleOneInstruction:
.1175	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1178	aa		tax				tax
.1179	bd 45 11	lda $1145,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.117c	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.117f	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.1182	8d f4 0a	sta $0af4			sta 	asmMode
.1185	a5 50		lda $50				lda 	esInt1 						; check if this is a three byte operand.
.1187	d0 05		bne $118e			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1189	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.118c	b0 10		bcs $119e			bcs 	_AOISuccess 				; worked ok.
.118e					_AOIThreeBytes:
.118e	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.1191	bd c8 11	lda $11c8,x			lda 	AbsoluteVersionTable,x
.1194	30 09		bmi $119f			bmi 	_AOIError					; not possible, no equivalent.
.1196	8d f4 0a	sta $0af4			sta 	asmMode
.1199	20 a4 11	jsr $11a4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.119c	90 01		bcc $119f			bcc 	_AOIError 					; didn't work.
.119e					_AOISuccess:
.119e	60		rts				rts
.119f					_AOIError:
.119f	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.11a1	20 e0 14	jsr $14e0		jsr	errorHandler
.11a4					AssembleAttempt:
.11a4	20 ad 11	jsr $11ad			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a7	b0 03		bcs $11ac			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a9	20 57 13	jsr $1357			jsr 	AssembleSpecialCase
.11ac					_AAExit:
.11ac	60		rts				rts
.11ad					_AADispatch:
.11ad	ad f3 0a	lda $0af3			lda 	asmToken
.11b0	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11b2	b0 11		bcs $11c5			bcs 	_AAGroup4
.11b4	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b6	b0 0a		bcs $11c2			bcs 	_AAGroup3
.11b8	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11ba	b0 03		bcs $11bf			bcs 	_AAGroup2
.11bc	4c 9d 12	jmp $129d			jmp 	AssembleGroup1
.11bf					_AAGroup2:
.11bf	4c f8 12	jmp $12f8			jmp 	AssembleGroup2
.11c2					_AAGroup3:
.11c2	4c 19 13	jmp $1319			jmp 	AssembleGroup3
.11c5					_AAGroup4:
.11c5	4c 4d 13	jmp $134d			jmp 	AssembleGroup4
.11c8					AbsoluteVersionTable:
>11c8	ff						.byte	$FF 			; fail AMD_IMM
>11c9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11ca	ff						.byte	$FF 			; fail AMD_ACCIMP
>11cb	ff						.byte	$FF 			; fail AMD_ABS
>11cc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11cd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11ce	ff						.byte	$FF 			; fail AMD_ABSY
>11cf	ff						.byte	$FF 			; fail AMD_ABSX
>11d0	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11d1	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11d2	ff						.byte	$FF 			; fail AMD_ABSIND
>11d3	ff						.byte	$FF 			; fail AMD_ABSINDX
>11d4	ff						.byte	$FF 			; fail AMD_REL
>11d5	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d6					OpcodeTable:
>11d6	01					.byte	$01			; $91 ora
>11d7	21					.byte	$21			; $92 (and)
>11d8	41					.byte	$41			; $93 eor
>11d9	61					.byte	$61			; $94 adc
>11da	81					.byte	$81			; $95 sta
>11db	a1					.byte	$a1			; $96 lda
>11dc	c1					.byte	$c1			; $97 cmp
>11dd	e1					.byte	$e1			; $98 sbc
>11de	02					.byte	$02			; $99 asl
>11df	22					.byte	$22			; $9a rol
>11e0	42					.byte	$42			; $9b lsr
>11e1	62					.byte	$62			; $9c ror
>11e2	82					.byte	$82			; $9d stx
>11e3	a2					.byte	$a2			; $9e ldx
>11e4	c2					.byte	$c2			; $9f dec
>11e5	e2					.byte	$e2			; $a0 inc
>11e6	60					.byte	$60			; $a1 stz
>11e7	20					.byte	$20			; $a2 bit
>11e8	80					.byte	$80			; $a3 sty
>11e9	a0					.byte	$a0			; $a4 ldy
>11ea	c0					.byte	$c0			; $a5 cpy
>11eb	e0					.byte	$e0			; $a6 cpx
>11ec	00					.byte	$00			; $a7 tsb
>11ed	10					.byte	$10			; $a8 trb
>11ee	14					.byte	$14			; $a9 jsr
>11ef	40					.byte	$40			; $aa jmp
>11f0	10					.byte	$10			; $ab bpl
>11f1	30					.byte	$30			; $ac bmi
>11f2	50					.byte	$50			; $ad bvc
>11f3	70					.byte	$70			; $ae bvs
>11f4	90					.byte	$90			; $af bcc
>11f5	b0					.byte	$b0			; $b0 bcs
>11f6	d0					.byte	$d0			; $b1 bne
>11f7	f0					.byte	$f0			; $b2 beq
>11f8	80					.byte	$80			; $b3 bra
>11f9	00					.byte	$00			; $b4 brk
>11fa	08					.byte	$08			; $b5 php
>11fb	18					.byte	$18			; $b6 clc
>11fc	28					.byte	$28			; $b7 plp
>11fd	38					.byte	$38			; $b8 sec
>11fe	40					.byte	$40			; $b9 rti
>11ff	48					.byte	$48			; $ba pha
>1200	58					.byte	$58			; $bb cli
>1201	5a					.byte	$5a			; $bc phy
>1202	60					.byte	$60			; $bd rts
>1203	68					.byte	$68			; $be pla
>1204	78					.byte	$78			; $bf sei
>1205	7a					.byte	$7a			; $c0 ply
>1206	88					.byte	$88			; $c1 dey
>1207	8a					.byte	$8a			; $c2 txa
>1208	98					.byte	$98			; $c3 tya
>1209	9a					.byte	$9a			; $c4 txs
>120a	a8					.byte	$a8			; $c5 tay
>120b	aa					.byte	$aa			; $c6 tax
>120c	b8					.byte	$b8			; $c7 clv
>120d	ba					.byte	$ba			; $c8 tsx
>120e	c8					.byte	$c8			; $c9 iny
>120f	ca					.byte	$ca			; $ca dex
>1210	d8					.byte	$d8			; $cb cld
>1211	da					.byte	$da			; $cc phx
>1212	e8					.byte	$e8			; $cd inx
>1213	ea					.byte	$ea			; $ce nop
>1214	f8					.byte	$f8			; $cf sed
>1215	fa					.byte	$fa			; $d0 plx
.1216					Group2OpcodeAvailability:
>1216	ae					.byte	$ae			; $99 asl $02
>1217	ae					.byte	$ae			; $9a rol $22
>1218	ae					.byte	$ae			; $9b lsr $42
>1219	ae					.byte	$ae			; $9c ror $62
>121a	0a					.byte	$0a			; $9d stx $82
>121b	0b					.byte	$0b			; $9e ldx $a2
>121c	aa					.byte	$aa			; $9f dec $c2
>121d	aa					.byte	$aa			; $a0 inc $e2
>121e	22					.byte	$22			; $a1 stz $60
>121f	aa					.byte	$aa			; $a2 bit $20
>1220	2a					.byte	$2a			; $a3 sty $80
>1221	ab					.byte	$ab			; $a4 ldy $a0
>1222	2b					.byte	$2b			; $a5 cpy $c0
>1223	0b					.byte	$0b			; $a6 cpx $e0
>1224	0a					.byte	$0a			; $a7 tsb $00
>1225	0a					.byte	$0a			; $a8 trb $10
>1226	08					.byte	$08			; $a9 jsr $14
>1227	08					.byte	$08			; $aa jmp $40
.1228					AssemblerSpecialCases:
>1228	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>122b	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>122e	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>1231	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>1234	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1237	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>123a	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>123d	a2 00 89				.byte	$a2,0,$89		; bit #
>1240	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>1243	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1246	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1247					AssembleLabel:
.1247	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1249	c9 3a		cmp #$3a			cmp 	#$3A
.124b	b0 4b		bcs $1298			bcs 	_ALSyntax
.124d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.124f	a2 00		ldx #$00		ldx	#0
.1251	20 34 3f	jsr $3f34		jsr	variableHandler
.1254	a5 40		lda $40				lda 	esType 						; check integer reference
.1256	c9 80		cmp #$80			cmp 	#$80
.1258	d0 3e		bne $1298			bne 	_ALSyntax
.125a	a5 48		lda $48				lda 	esInt0 						; copy that reference address to temp0
.125c	85 2a		sta $2a				sta 	temp0
.125e	a5 50		lda $50				lda 	esInt1
.1260	85 2b		sta $2b				sta 	temp0+1
.1262	98		tya				tya
.1263	48		pha				pha
.1264	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1267	4a		lsr a				lsr 	a
.1268	90 11		bcc $127b			bcc 	_ALWrite
.126a	a0 00		ldy #$00			ldy 	#0
.126c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.126f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1271	d0 20		bne $1293			bne 	_ALChanged
.1273	c8		iny				iny
.1274	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1277	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1279	d0 18		bne $1293			bne 	_ALChanged
.127b					_ALWrite:
.127b	a0 00		ldy #$00			ldy 	#0
.127d	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.1280	91 2a		sta ($2a),y			sta 	(temp0),y
.1282	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1285	c8		iny				iny
.1286	91 2a		sta ($2a),y			sta 	(temp0),y
.1288	a9 00		lda #$00			lda 	#0
.128a	c8		iny				iny
.128b	91 2a		sta ($2a),y			sta 	(temp0),y
.128d	c8		iny				iny
.128e	91 2a		sta ($2a),y			sta 	(temp0),y
.1290	68		pla				pla
.1291	a8		tay				tay
.1292	60		rts				rts
.1293					_ALChanged:
.1293	a2 25		ldx #$25			ldx 	#ErrorID_Label
.1295	20 e0 14	jsr $14e0		jsr	errorHandler
.1298					_ALSyntax:
.1298	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.129a	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.129d					AssembleGroup1:
.129d	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12a0	c9 95		cmp #$95			cmp 	#TKW_STA
.12a2	d0 07		bne $12ab			bne 	_AG1NotStoreImm
.12a4	ad f4 0a	lda $0af4			lda 	asmMode
.12a7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12a9	f0 2c		beq $12d7			beq 	AG1ModeError
.12ab					_AG1NotStoreImm:
.12ab	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12ae	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12b1	48		pha				pha
.12b2	f0 23		beq $12d7			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12b4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12b6	d0 02		bne $12ba			bne 	_AG1NotImmediate
.12b8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ba					_AG1NotImmediate:
.12ba	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12bc	d0 02		bne $12c0			bne 	_AG1NotZX
.12be	a2 00		ldx #$00			ldx 	#0
.12c0					_AG1NotZX:
.12c0	68		pla				pla 								; restore length
.12c1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12c3	b0 10		bcs $12d5			bcs 	AG1Fail
.12c5					AG1ReturnValue:
.12c5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12c7	18		clc				clc
.12c8	bd ea 12	lda $12ea,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12cb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12ce	a6 32		ldx $32				ldx 	tempShort 					; length in X
.12d0	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.12d3	38		sec				sec
.12d4	60		rts				rts
.12d5					AG1Fail:
.12d5	18		clc				clc
.12d6	60		rts				rts
.12d7					AG1ModeError:
.12d7	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.12d9	20 e0 14	jsr $14e0		jsr	errorHandler
.12dc					AMDOperandSize:
>12dc	01 01 00 02					.byte 	1,1,0,2
>12e0	01 01 02 02					.byte 	1,1,2,2
>12e4	01 01 02 02					.byte 	1,1,2,2
>12e8	01 01						.byte 	1,1
.12ea					AMDOffsetFromBase:
>12ea	00 04 08 0c					.byte 	0,4,8,12
>12ee	10 14 18 1c					.byte	16,20,24,28
>12f2	11 00 00 00					.byte 	17,0,0,0
>12f6	00 00						.byte 	0,0
.12f8					AssembleGroup2:
.12f8	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.12fb	c9 08		cmp #$08			cmp 	#8
.12fd	b0 18		bcs $1317			bcs 	_AG2Fail
.12ff	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1301	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1304	bd 7d 11	lda $117d,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1307					_AG2Shift:
.1307	4a		lsr a				lsr 	a
.1308	c6 2a		dec $2a				dec 	temp0
.130a	10 fb		bpl $1307			bpl 	_AG2Shift
.130c	90 09		bcc $1317			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.130e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1311	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1314	4c c5 12	jmp $12c5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1317					_AG2Fail:
.1317	18		clc				clc
.1318	60		rts				rts
.1319					AssembleGroup3:
.1319	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.131c	4a		lsr a				lsr 	a
.131d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.131f	90 21		bcc $1342			bcc 	_AG3Default
.1321	38		sec				sec	 								; calculate branch offset
.1322	a5 48		lda $48				lda		esInt0
.1324	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1327	aa		tax				tax
.1328	a5 50		lda $50				lda		esInt1
.132a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.132d	85 50		sta $50				sta 	esInt1
.132f	8a		txa				txa 								; add 126, now 128 too many.
.1330	18		clc				clc 								; we can use this to check the range
.1331	69 7e		adc #$7e			adc 	#126
.1333	85 48		sta $48				sta 	esInt0
.1335	90 02		bcc $1339			bcc 	_AG3NoCarry
.1337	e6 50		inc $50				inc 	esInt1
.1339					_AG3NoCarry:
.1339	a5 50		lda $50				lda 	esInt1 						; check in range.
.133b	d0 0b		bne $1348			bne 	_AG3Range
.133d	a5 48		lda $48				lda 	esInt0 						; fix up branch distance
.133f	38		sec				sec
.1340	e9 80		sbc #$80			sbc 	#128
.1342					_AG3Default:
.1342	85 48		sta $48				sta 	esInt0
.1344					_AG3ExitOk:
.1344	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1346	d0 07		bne $134f			bne 	AG4Write
.1348					_AG3Range:
.1348	a2 24		ldx #$24			ldx 	#ErrorID_Branch
.134a	20 e0 14	jsr $14e0		jsr	errorHandler
.134d					AssembleGroup4:
.134d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.134f					AG4Write:
.134f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1352	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1355	38		sec				sec
.1356	60		rts				rts
.1357					AssembleSpecialCase:
.1357	a2 00		ldx #$00			ldx 	#0
.1359					_ASCScan:
.1359	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.135c	cd f3 0a	cmp $0af3			cmp 	asmToken
.135f	d0 08		bne $1369			bne 	_ASCNext
.1361	bd 29 12	lda $1229,x			lda 	AssemblerSpecialCases+1,x
.1364	cd f4 0a	cmp $0af4			cmp 	asmMode
.1367	f0 0a		beq $1373			beq 	_ASCFound
.1369					_ASCNext:
.1369	e8		inx				inx									; next entry
.136a	e8		inx				inx
.136b	e8		inx				inx
.136c	bd 28 12	lda $1228,x			lda 	AssemblerSpecialCases,x 	; until table ends
.136f	d0 e8		bne $1359			bne 	_ASCScan
.1371	18		clc				clc
.1372	60		rts				rts
.1373					_ASCFound:
.1373	bd 2a 12	lda $122a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.1376	48		pha				pha
.1377	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.137a	bd dc 12	lda $12dc,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.137d	aa		tax				tax
.137e	68		pla				pla 								; opcode back
.137f	20 e0 10	jsr $10e0			jsr 	AsmWriteInstruction 		; output instruction.
.1382	38		sec				sec
.1383	60		rts				rts

;******  Return to file: assembler/assembler.asm

.1384					assemblerHandler:
.1384	7c 87 13	jmp ($1387,x)			jmp 	(assemblerVectors,x)
.1387					assemblerVectors:
>1387	75 11					.word AssembleOneInstruction ; index 0
>1389	47 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.138b					section_end_assembler:
.138b					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.138b					X16Break:
.138b	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.138e	f0 01		beq $1391			beq 	_IsBreak
.1390	60		rts				rts
.1391					_IsBreak:
.1391	a2 20		ldx #$20			ldx 	#ErrorID_Break
.1393	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.1396					ExternSave:
.1396	98		tya				tya
.1397	48		pha				pha
.1398	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.139b	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.139e	a9 01		lda #$01			lda 	#1
.13a0	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13a2	a0 00		ldy #$00			ldy 	#0
.13a4	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13a7	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.13a9	85 2a		sta $2a				sta 	temp0
.13ab	a5 51		lda $51				lda 	esInt1+1
.13ad	85 2b		sta $2b				sta 	temp0+1
.13af	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.13b1	a4 52		ldy $52				ldy 	esInt1+2
.13b3	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13b5	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13b8	b0 03		bcs $13bd			bcs 	_ESSave
.13ba	68		pla				pla
.13bb	a8		tay				tay
.13bc	60		rts				rts
.13bd					_ESSave:
.13bd	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.13bf	20 e0 14	jsr $14e0		jsr	errorHandler
.13c2					ExternLoad:
.13c2	98		tya				tya
.13c3	48		pha				pha
.13c4	20 e6 13	jsr $13e6			jsr 	ExternGetLength 			; get length of file into A name YX
.13c7	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13ca	a9 01		lda #$01			lda 	#1
.13cc	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13ce	a0 00		ldy #$00			ldy 	#0
.13d0	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13d3	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.13d5	a4 51		ldy $51				ldy 	esInt1+1
.13d7	a9 00		lda #$00			lda 	#0 							; load command
.13d9	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.13dc	b0 03		bcs $13e1			bcs 	_ESLoad
.13de	68		pla				pla
.13df	a8		tay				tay
.13e0	60		rts				rts
.13e1					_ESLoad:
.13e1	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.13e3	20 e0 14	jsr $14e0		jsr	errorHandler
.13e6					ExternGetLength:
.13e6	a5 48		lda $48				lda 	esInt0 						; length into A.
.13e8	85 2a		sta $2a				sta 	temp0
.13ea	a5 50		lda $50				lda 	esInt1
.13ec	85 2b		sta $2b				sta 	temp0+1
.13ee	a0 00		ldy #$00			ldy 	#0
.13f0	b1 2a		lda ($2a),y			lda 	(temp0),y
.13f2	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.13f4	a4 50		ldy $50				ldy 	esInt1
.13f6	e8		inx				inx 								; advance over the length pointer.
.13f7	d0 01		bne $13fa			bne 	_ESNoCarry
.13f9	c8		iny				iny
.13fa					_ESNoCarry:
.13fa	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.13fb					IOInitialise:
.13fb	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.13fd	20 26 14	jsr $1426			jsr 	IOPrintChar
.1400	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1402	20 52 14	jsr $1452			jsr 	IOInk
.1405	a9 00		lda #$00			lda 	#0
.1407	20 66 14	jsr $1466			jsr 	IOPaper
.140a	20 0e 14	jsr $140e			jsr 	IOClearScreen
.140d	60		rts				rts
.140e					IOClearScreen:
.140e	48		pha				pha
.140f	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1411	20 26 14	jsr $1426			jsr 	IOPrintChar
.1414	68		pla				pla
.1415	60		rts				rts
.1416					IONewLine:
.1416	48		pha				pha
.1417	a9 0d		lda #$0d			lda 	#13
.1419	20 26 14	jsr $1426			jsr 	IOPrintChar
.141c	68		pla				pla
.141d	60		rts				rts
.141e					IOTab:
.141e	48		pha				pha
.141f	a9 20		lda #$20			lda 	#32
.1421	20 26 14	jsr $1426			jsr 	IOPrintChar
.1424	68		pla				pla
.1425	60		rts				rts
.1426					IOPrintAscii:
.1426					IOPrintChar:
.1426	aa		tax				tax 								; save in X so we can save Y
.1427	5a		phy				phy
.1428	8a		txa				txa
.1429	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.142b	d0 02		bne $142f			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.142d	a9 14		lda #$14			lda 	#$14
.142f					_IOPCNotBS:
.142f	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1432	7a		ply				ply
.1433	60		rts				rts
.1434					IOInkey:
.1434	98		tya				tya
.1435	48		pha				pha
.1436	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1439	85 32		sta $32				sta 	tempShort
.143b	68		pla				pla
.143c	a8		tay				tay
.143d	a5 32		lda $32				lda 	tempShort					; no key pressed.
.143f	f0 10		beq $1451			beq 	_IOIExit
.1441	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.1443	f0 0c		beq $1451			beq 	_IOIExit
.1445	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.1447	f0 06		beq $144f			beq 	_IOIBackspace
.1449	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.144b	90 e7		bcc $1434			bcc 	IOInkey
.144d	b0 02		bcs $1451			bcs 	_IOIExit
.144f					_IOIBackspace:
.144f	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1451					_IOIExit:
.1451	60		rts				rts
.1452					IOInk:
.1452	48		pha				pha
.1453	29 07		and #$07			and 	#7 							; 8 primaries
.1455	aa		tax				tax
.1456	bd 5e 14	lda $145e,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1459	20 26 14	jsr $1426			jsr 	IOPrintChar
.145c	68		pla				pla
.145d	60		rts				rts
.145e					_IOColourTable:
>145e	90						.byte 	$90 					; 0 Black
>145f	96						.byte 	$96 					; 1 Red
>1460	1e						.byte 	$1E 					; 2 Green
>1461	9e						.byte 	$9E 					; 3 Yellow
>1462	9a						.byte 	$9A 					; 4 Blue
>1463	9c						.byte 	$9C 					; 5 Magenta
>1464	9f						.byte 	$9F 					; 6 Cyan
>1465	05						.byte 	$05 					; 7 White
.1466					IOPaper:
.1466	48		pha				pha
.1467	48		pha				pha
.1468	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.146a	20 26 14	jsr $1426			jsr 	IOPrintChar 			; and then swap them again.
.146d	68		pla				pla
.146e	20 52 14	jsr $1452			jsr 	IOInk
.1471	a9 01		lda #$01			lda 	#1
.1473	20 26 14	jsr $1426			jsr 	IOPrintChar
.1476	68		pla				pla
.1477	60		rts				rts
.1478					IOLocate:
.1478	48		pha				pha
.1479	a9 13		lda #$13			lda 	#$13 					; home cursor code
.147b	20 26 14	jsr $1426			jsr 	IOPrintChar
.147e	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.1480	20 87 14	jsr $1487			jsr 	_IOLoc2
.1483	68		pla				pla
.1484	a8		tay				tay
.1485	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.1487					_IOLoc2:
.1487	c0 00		cpy #$00			cpy 	#0
.1489	f0 06		beq $1491			beq 	_IOLocExit
.148b	20 26 14	jsr $1426			jsr 	IOPrintChar
.148e	88		dey				dey
.148f	d0 f6		bne $1487			bne 	_IOLoc2
.1491					_IOLocExit:
.1491	60		rts				rts
.1492					IOInput:
.1492	a9 00		lda #$00			lda 	#0
.1494	8d f6 0a	sta $0af6			sta 	bufferCount
.1497					_IOILoop:
.1497	20 cf ff	jsr $ffcf			jsr 	$FFCF
.149a	c9 0d		cmp #$0d			cmp 	#13
.149c	f0 10		beq $14ae			beq 	_IOIExit
.149e	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14a1	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14a3	f0 f2		beq $1497			beq 	_IOILoop
.14a5	ee f6 0a	inc $0af6			inc 	bufferCount
.14a8	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14ab	4c 97 14	jmp $1497			jmp 	_IOILoop
.14ae					_IOIExit:
.14ae	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14b0	85 2a		sta $2a				sta 	temp0
.14b2	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14b4	85 2b		sta $2b				sta 	1+(temp0)
.14b6	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14b7					IOReadTimer:
.14b7	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14ba	48		pha				pha
.14bb	8a		txa				txa
.14bc	a8		tay				tay
.14bd	68		pla				pla
.14be	60		rts				rts

;******  Return to file: device/device.asm

.14bf					deviceHandler:
.14bf	7c c2 14	jmp ($14c2,x)			jmp 	(deviceVectors,x)
.14c2					deviceVectors:
>14c2	8b 13					.word X16Break             ; index 0
>14c4	0e 14					.word IOClearScreen        ; index 2
>14c6	16 14					.word IONewLine            ; index 4
>14c8	fb 13					.word IOInitialise         ; index 6
>14ca	52 14					.word IOInk                ; index 8
>14cc	34 14					.word IOInkey              ; index 10
>14ce	92 14					.word IOInput              ; index 12
>14d0	c2 13					.word ExternLoad           ; index 14
>14d2	78 14					.word IOLocate             ; index 16
>14d4	66 14					.word IOPaper              ; index 18
>14d6	26 14					.word IOPrintChar          ; index 20
>14d8	26 14					.word IOPrintAscii         ; index 22
>14da	96 13					.word ExternSave           ; index 24
>14dc	1e 14					.word IOTab                ; index 26
>14de	b7 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.14e0					section_end_device:
.14e0					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.14e0					ErrorHandler:
.14e0	8a		txa				txa
.14e1	48		pha				pha
.14e2	a9 01		lda #$01			lda 	#1 							; red
.14e4	a2 08		ldx #$08		ldx	#8
.14e6	20 bf 14	jsr $14bf		jsr	deviceHandler
.14e9	68		pla				pla
.14ea	aa		tax				tax
.14eb	a9 56		lda #$56			lda 	#(ErrorTextList) & $FF
.14ed	85 2a		sta $2a				sta 	temp0
.14ef	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.14f1	85 2b		sta $2b				sta 	1+(temp0)
.14f3	ca		dex		_EHFind:dex									; errors start at 1
.14f4	f0 10		beq $1506			beq 	_EHFound
.14f6	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.14f8	38		sec				sec
.14f9	a5 2a		lda $2a				lda 	temp0
.14fb	71 2a		adc ($2a),y			adc 	(temp0),y
.14fd	85 2a		sta $2a				sta 	temp0
.14ff	90 f2		bcc $14f3			bcc 	_EHFind
.1501	e6 2b		inc $2b				inc 	temp0+1
.1503	4c f3 14	jmp $14f3			jmp 	_EHFind
.1506					_EHFound:
.1506	20 e0 17	jsr $17e0			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1509	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.150b	b1 28		lda ($28),y			lda 	(codePtr),y
.150d	f0 39		beq $1548			beq 	_EHNoLine
.150f	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1511	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1514	90 32		bcc $1548			bcc 	_EHNoLine
.1516	a9 52		lda #$52			lda 	#(EHAtMsg) & $FF
.1518	85 2a		sta $2a				sta 	temp0
.151a	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.151c	85 2b		sta $2b				sta 	1+(temp0)
.151e	20 e0 17	jsr $17e0			jsr 	EHPrintAscii
.1521	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1523	a2 00		ldx #$00			ldx 	#0
.1525	b1 28		lda ($28),y			lda 	(codePtr),y
.1527	95 48		sta $48,x			sta 	esInt0,x
.1529	c8		iny				iny
.152a	b1 28		lda ($28),y			lda 	(codePtr),y
.152c	95 50		sta $50,x			sta 	esInt1,x
.152e	a9 00		lda #$00			lda 	#0
.1530	95 58		sta $58,x			sta 	esInt2,x
.1532	95 60		sta $60,x			sta 	esInt3,x
.1534	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1536	85 2a		sta $2a				sta 	temp0
.1538	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.153a	85 2b		sta $2b				sta 	1+(temp0)
.153c	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.153e	a9 00		lda #$00			lda 	#0							; stack position zero.
.1540	a2 0c		ldx #$0c		ldx	#12
.1542	20 71 31	jsr $3171		jsr	mainHandler
.1545	20 e0 17	jsr $17e0			jsr 	EHPrintAscii
.1548					_EHNoLine:
.1548	a2 04		ldx #$04		ldx	#4
.154a	20 bf 14	jsr $14bf		jsr	deviceHandler
.154d	a2 02		ldx #$02		ldx	#2
.154f	20 e6 1a	jsr $1ae6		jsr	interactionHandler
.1552					EHAtMsg:
>1552	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.1556					ErrorTextList:
>1556	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>155e	20 6e 6f 74 20 50 72 65 73 65 6e 74
>156a	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>1572	45 72 72 6f 72
>1577	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>157f	64 69 73 61 62 6c 65 64
>1587	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>158f	6f 6e 20 66 61 69 6c 65 64
>1598	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15a0	42 79 20 5a 65 72 6f
>15a7	04 53 74 6f 70				.text 4,"Stop"
>15ac	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15b4	73 6d 61 74 63 68
>15ba	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15c2	20 56 61 6c 75 65
>15c8	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>15d0	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>15de	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>15e6	20 63 6f 6d 6d 61
>15ec	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>15f4	20 72 65 66 65 72 65 6e 63 65
>15fe	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1606	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1614	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>161c	74 6f 6f 20 6c 6f 6e 67
>1624	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>162c	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1639	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1641	69 74 68 6f 75 74 20 52 45 50 45 41 54
>164e	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>1656	74 68 6f 75 74 20 46 4f 52
>165f	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>1667	74 68 6f 75 74 20 57 48 49 4c 45
>1672	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>167a	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>1687	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>168f	54 20 69 6e 64 65 78
>1696	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>169e	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16ae	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16b6	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16c5	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>16cd	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>16dd	63 65
>16df	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>16e7	20 50 72 6f 63 65 64 75 72 65
>16f1	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>16f9	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1709	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1711	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>171f	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1727	75 69 72 65 73 20 61 72 72 61 79
>1732	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>173a	61 79 20 69 6e 64 65 78
>1742	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>174a	64 61 74 61
>174e	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>1756	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>1763	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>176b	69 6c 65 64
>176f	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>1777	69 6c 65 64
>177b	05 42 72 65 61 6b			.text 5,"Break"
>1781	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>1789	6d 65 6d 6f 72 79
>178f	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>1797	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17a6	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>17ae	72 61 6e 64 2f 4d 6f 64 65
>17b7	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>17bf	6f 75 74 20 6f 66 20 72 61 6e 67 65
>17cb	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>17d3	68 61 6e 67 65 64 20 76 61 6c 75 65
>17df	00					.byte 0

;******  Return to file: error/errorhandler.asm

.17e0					EHPrintAscii:
.17e0	a0 00		ldy #$00			ldy 	#0
.17e2	b1 2a		lda ($2a),y			lda 	(temp0),y
.17e4	aa		tax				tax
.17e5	f0 0f		beq $17f6			beq 	_EHPExit
.17e7					_EHPLoop:
.17e7	c8		iny				iny
.17e8	8a		txa				txa
.17e9	48		pha				pha
.17ea	b1 2a		lda ($2a),y			lda 	(temp0),y
.17ec	a2 16		ldx #$16		ldx	#22
.17ee	20 bf 14	jsr $14bf		jsr	deviceHandler
.17f1	68		pla				pla
.17f2	aa		tax				tax
.17f3	ca		dex				dex
.17f4	d0 f1		bne $17e7			bne 	_EHPLoop
.17f6					_EHPExit:
.17f6	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.17f7					section_end_error:
.17f7					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.17f7					ExtensionHandler:
.17f7	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.17f9	d0 08		bne $1803			bne 	_ExtensionUnary 			; is passed in A.
.17fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.17fd	c8		iny				iny
.17fe	0a		asl a				asl 	a
.17ff	aa		tax				tax
.1800	7c 01 18	jmp ($1801,x)			jmp 	(Group2Vectors-12,x)
.1803					_ExtensionUnary:
.1803	48		pha				pha 								; save stack pos in A
.1804	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1806	c8		iny				iny
.1807	0a		asl a				asl 	a
.1808	aa		tax				tax
.1809	68		pla				pla 								; restore stack pos and call group3 command.
.180a	7c 07 18	jmp ($1807,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.180d					Group2Vectors:
>180d	42 18					.word	Command_VPoke            ; $86 vpoke
>180f	45 18					.word	Command_VDoke            ; $87 vdoke
>1811	1f 18					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1813					Group3Vectors:
>1813	86 18					.word	Command_VPeek            ; $86 vpeek(
>1815	89 18					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1817					XEvaluateInteger:
.1817	8a		txa				txa
.1818	a2 06		ldx #$06		ldx	#6
.181a	20 71 31	jsr $3171		jsr	mainHandler
.181d	aa		tax				tax
.181e	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.181f					Command_VLoad:
.181f	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.1821	20 e6 29	jsr $29e6			jsr 	EvaluateString
.1824	e8		inx				inx
.1825	20 83 30	jsr $3083			jsr 	MInt32False
.1828	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.182a	95 48		sta $48,x			sta 	esInt0,x
.182c	a5 36		lda $36				lda 	lowMemory+1
.182e	95 50		sta $50,x			sta 	esInt1,x
.1830	ca		dex				dex
.1831	a2 0e		ldx #$0e		ldx	#14
.1833	20 bf 14	jsr $14bf		jsr	deviceHandler
.1836	a5 49		lda $49				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1838	85 2a		sta $2a				sta 	temp0
.183a	a5 51		lda $51				lda 	esInt1+1
.183c	85 2b		sta $2b				sta 	temp0+1
.183e	20 a7 18	jsr $18a7			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1841	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1842					Command_VPoke:
.1842	38		sec				sec 						; one byte , CS
.1843	b0 01		bcs $1846			bcs 	CmdVideoWrite
.1845					Command_VDoke:
.1845	18		clc				clc 						; two bytes, CC
.1846					CmdVideoWrite:
.1846	08		php				php 						; save one or two btes
.1847	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1849	20 17 18	jsr $1817			jsr 	XEvaluateInteger
.184c	20 03 31	jsr $3103			jsr 	CheckComma
.184f	e8		inx				inx
.1850	20 17 18	jsr $1817			jsr 	XEvaluateInteger
.1853	ca		dex				dex
.1854	20 65 18	jsr $1865			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.1857	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.1859	8d 23 9f	sta $9f23			sta 	$9F23
.185c	28		plp				plp 						; if it was Poke then exit
.185d	b0 05		bcs $1864			bcs 	_CVWExit
.185f	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.1861	8d 23 9f	sta $9f23			sta 	$9F23
.1864					_CVWExit:
.1864	60		rts				rts
.1865					SetUpTOSVRamAddress:
.1865	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.1867	29 01		and #$01			and 	#1
.1869	15 60		ora $60,x			ora 	esInt3,x
.186b	d0 14		bne $1881			bne 	CVWValue
.186d	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.186f	8d 20 9f	sta $9f20			sta 	$9F20
.1872	b5 50		lda $50,x			lda 	esInt1,x
.1874	8d 21 9f	sta $9f21			sta	 	$9F21
.1877	b5 58		lda $58,x			lda 	esInt2,x
.1879	29 01		and #$01			and 	#1
.187b	09 10		ora #$10			ora 	#$10 				; step 1.
.187d	8d 22 9f	sta $9f22			sta 	$9F22
.1880	60		rts				rts
.1881					CVWValue:
.1881	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1883	20 e0 14	jsr $14e0		jsr	errorHandler
.1886					Command_VPeek:
.1886	38		sec				sec 						; one byte , CS
.1887	b0 01		bcs $188a			bcs 	CmdVideoRead
.1889					Command_VDeek:
.1889	18		clc				clc 						; two bytes, CC
.188a					CmdVideoRead:
.188a	08		php				php 						; save action on stack.
.188b	aa		tax				tax 						; save stack position
.188c	20 17 18	jsr $1817			jsr 	XEvaluateInteger 	; address
.188f	20 f6 30	jsr $30f6			jsr 	CheckRightParen 	; closing right bracket.
.1892	20 65 18	jsr $1865			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.1895	20 83 30	jsr $3083			jsr 	MInt32False 		; zero return.
.1898	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.189b	95 48		sta $48,x			sta 	esInt0,x
.189d	28		plp				plp 						; check if DOKE (carry was clear)
.189e	b0 05		bcs $18a5			bcs 	_CVRExit
.18a0	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.18a3	95 50		sta $50,x			sta 	esInt1,x
.18a5					_CVRExit:
.18a5	8a		txa				txa 						; return X position.
.18a6	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be6					compressMode:
>0be6							.fill 	1
.18a7					LoadVRAMFile:
.18a7					_LVRLoop:
.18a7	20 f7 18	jsr $18f7			jsr 	LVFGet 						; get the next (never access direct)
.18aa	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.18ac	f0 3a		beq $18e8			beq 	_LVRExit
.18ae	b0 39		bcs $18e9			bcs 	_LVRLoad 					; load data in ?
.18b0	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.18b2	90 09		bcc $18bd			bcc 	_LVRSetAddress
.18b4	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.18b6	90 29		bcc $18e1			bcc 	_LVRSetCompress
.18b8	a2 01		ldx #$01			ldx 	#ErrorID_missing
.18ba	20 e0 14	jsr $14e0		jsr	errorHandler
.18bd					_LVRSetAddress:
.18bd	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.18bf	20 f7 18	jsr $18f7			jsr 	LVFGet
.18c2	85 2c		sta $2c				sta 	temp1
.18c4	a9 00		lda #$00			lda 	#0
.18c6	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.18c8	66 2c		ror $2c				ror 	temp1
.18ca	6a		ror a				ror		a
.18cb	46 2d		lsr $2d				lsr 	temp1+1
.18cd	66 2c		ror $2c				ror 	temp1
.18cf	6a		ror a				ror		a
.18d0	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.18d3	a5 2c		lda $2c				lda 	temp1
.18d5	8d 21 9f	sta $9f21			sta 	$9F21
.18d8	a5 2d		lda $2d				lda 	temp1+1
.18da	09 10		ora #$10			ora 	#$10
.18dc	8d 22 9f	sta $9f22			sta 	$9F22
.18df	d0 c6		bne $18a7			bne 	_LVRLoop
.18e1					_LVRSetCompress:
.18e1	29 07		and #$07			and 	#7
.18e3	8d e6 0b	sta $0be6			sta 	compressMode
.18e6	10 bf		bpl $18a7			bpl 	_LVRLoop
.18e8					_LVRExit:
.18e8	60		rts				rts
.18e9					_LVRLoad:
.18e9	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.18eb	aa		tax				tax
.18ec					_LVRLCopy:
.18ec	20 f7 18	jsr $18f7			jsr 	LVFGet 						; write to data.
.18ef	8d 23 9f	sta $9f23			sta 	$9F23
.18f2	ca		dex				dex
.18f3	d0 f7		bne $18ec			bne 	_LVRLCopy
.18f5	f0 b0		beq $18a7			beq 	_LVRLoop
.18f7	84 32		sty $32		LVFGet:	sty 	tempShort
.18f9	a0 00		ldy #$00			ldy 	#0
.18fb	b1 2a		lda ($2a),y			lda 	(temp0),y
.18fd	a4 32		ldy $32				ldy	 	tempShort
.18ff	e6 2a		inc $2a				inc 	temp0
.1901	d0 02		bne $1905			bne 	_LVFGExit
.1903	e6 2b		inc $2b				inc 	temp0+1
.1905					_LVFGExit:
.1905	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1906					section_end_extension:
.1906					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1906					floatingpointHandler:
.1906	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1908	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: basic.asm

.190b					section_end_floatingpoint:
.190b					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.190b					ColdStartEntry:
.190b	a2 ff		ldx #$ff			ldx 	#$FF
.190d	9a		txs				txs
.190e	a2 02		ldx #$02		ldx	#2
.1910	20 bf 14	jsr $14bf		jsr	deviceHandler
.1913	a0 ff		ldy #$ff			ldy 	#255
.1915					_CSBanner:
.1915	c8		iny				iny
.1916	b9 3c 19	lda $193c,y			lda 	Intro,y
.1919	f0 14		beq $192f			beq 	_CSStart
.191b	c9 08		cmp #$08			cmp 	#8
.191d	90 08		bcc $1927			bcc 	_CSInk
.191f	a2 16		ldx #$16		ldx	#22
.1921	20 bf 14	jsr $14bf		jsr	deviceHandler
.1924	4c 15 19	jmp $1915			jmp 	_CSBanner
.1927					_CSInk:
.1927	a2 08		ldx #$08		ldx	#8
.1929	20 bf 14	jsr $14bf		jsr	deviceHandler
.192c	4c 15 19	jmp $1915			jmp 	_CSBanner
.192f					_CSStart:
.192f	a2 10		ldx #$10		ldx	#16
.1931	20 71 31	jsr $3171		jsr	mainHandler
.1934	a2 02		ldx #$02		ldx	#2
.1936	20 71 31	jsr $3171		jsr	mainHandler
.1939	4c 4e 1a	jmp $1a4e			jmp 	WarmStartEntry
>193c	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1944	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1954	20 2a 2a 2a 0d 0d
>195a	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1962	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1972	32 30 32 31 0d 0d
>1978	02 42 61 73 69 63 20				.text 	2,"Basic "
>197f	30 2e 31 36					.text "0.16"
>1983	20 28						.text 	" ("
>1985	31 36 2d 4d 61 72 2d 32				.text "16-Mar-2021"
>198d	30 32 31
>1990	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1994					DeleteLine:
.1994	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1997	85 2a		sta $2a				sta 	temp0
.1999	ad c9 0a	lda $0ac9			lda 	basePage+1
.199c	85 2b		sta $2b				sta 	temp0+1
.199e	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.19a0	a5 48		lda $48				lda 	esInt0 						; e.g. the linenumbers match
.19a2	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.19a4	d0 07		bne $19ad			bne 	_DLNext
.19a6	c8		iny				iny
.19a7	a5 50		lda $50				lda 	esInt1
.19a9	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.19ab	f0 06		beq $19b3			beq 	_DLFound
.19ad	20 d1 19	jsr $19d1	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.19b0	d0 ec		bne $199e			bne 	_DLLoop
.19b2	60		rts				rts
.19b3					_DLFound:
.19b3	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.19b5	b1 2a		lda ($2a),y			lda 	(temp0),y
.19b7	a8		tay				tay 								; so we copy from (temp0),y
.19b8	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.19ba					_DLCopyDown:
.19ba	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.19bc	81 2a		sta ($2a,x)			sta 	(temp0,x)
.19be	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.19c0	d0 02		bne $19c4			bne 	_DLNoCarry
.19c2	e6 2b		inc $2b				inc 	temp0+1
.19c4					_DLNoCarry:
.19c4	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.19c6	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.19c8	d0 f0		bne $19ba			bne 	_DLCopyDown
.19ca	a5 2b		lda $2b				lda 	temp0+1
.19cc	c5 36		cmp $36				cmp 	lowMemory+1
.19ce	d0 ea		bne $19ba			bne 	_DLCopyDown
.19d0	60		rts				rts
.19d1					IAdvanceTemp0:
.19d1	84 32		sty $32				sty 	tempShort
.19d3	18		clc				clc
.19d4	a0 00		ldy #$00			ldy 	#0 							; get offset
.19d6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.19d8	65 2a		adc $2a				adc 	temp0
.19da	85 2a		sta $2a				sta 	temp0
.19dc	90 02		bcc $19e0			bcc 	_IATNoCarry
.19de	e6 2b		inc $2b				inc 	temp0+1
.19e0					_IATNoCarry:
.19e0	b1 2a		lda ($2a),y			lda 	(temp0),y
.19e2	a4 32		ldy $32				ldy 	tempShort
.19e4	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.19e6	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.19e7					InsertLine:
.19e7	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.19ea	85 2a		sta $2a				sta 	temp0
.19ec	ad c9 0a	lda $0ac9			lda 	basePage+1
.19ef	85 2b		sta $2b				sta 	temp0+1
.19f1					_ILLoop:
.19f1	a0 01		ldy #$01			ldy 	#1
.19f3	b1 2a		lda ($2a),y			lda 	(temp0),y
.19f5	c5 48		cmp $48				cmp 	esInt0
.19f7	c8		iny				iny
.19f8	b1 2a		lda ($2a),y			lda 	(temp0),y
.19fa	e5 50		sbc $50				sbc 	esInt1
.19fc	b0 05		bcs $1a03			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.19fe	20 d1 19	jsr $19d1			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1a01	d0 ee		bne $19f1			bne 	_ILLoop
.1a03					_ILFound:
.1a03	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1a05	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1a07	a5 36		lda $36				lda 	lowMemory+1
.1a09	85 2d		sta $2d				sta 	temp1+1
.1a0b	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1a0e	18		clc				clc 								; add 3 for the line number and offset.
.1a0f	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1a11	a8		tay				tay
.1a12	a2 00		ldx #$00			ldx 	#0
.1a14	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1a16	91 2c		sta ($2c),y			sta 	(temp1),y
.1a18	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1a1a	c5 2a		cmp $2a				cmp 	temp0
.1a1c	d0 06		bne $1a24			bne 	_ILMNext
.1a1e	a5 2d		lda $2d				lda 	temp1+1
.1a20	c5 2b		cmp $2b				cmp 	temp0+1
.1a22	f0 0b		beq $1a2f			beq 	_ILMCopy
.1a24					_ILMNext:
.1a24	a5 2c		lda $2c				lda 	temp1
.1a26	d0 02		bne $1a2a			bne 	_ILNoBorrow
.1a28	c6 2d		dec $2d				dec 	temp1+1
.1a2a					_ILNoBorrow:
.1a2a	c6 2c		dec $2c				dec 	temp1
.1a2c	4c 14 1a	jmp $1a14			jmp 	_ILMove 					; and go round again
.1a2f					_ILMCopy:
.1a2f	98		tya				tya 								; Y is the offset of the new line.
.1a30	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1a32	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1a34	a5 48		lda $48				lda 	esInt0
.1a36	91 2a		sta ($2a),y			sta 	(temp0),y
.1a38	c8		iny				iny
.1a39	a5 50		lda $50				lda 	esInt1
.1a3b	91 2a		sta ($2a),y			sta 	(temp0),y
.1a3d	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1a3f					_ILMCopy2:
.1a3f	b1 28		lda ($28),y			lda 	(codePtr),y
.1a41	c8		iny				iny
.1a42	c8		iny				iny
.1a43	c8		iny				iny
.1a44	91 2a		sta ($2a),y			sta 	(temp0),y
.1a46	88		dey				dey
.1a47	88		dey				dey
.1a48	cc 24 0d	cpy $0d24			cpy 	tokenBufferIndex
.1a4b	d0 f2		bne $1a3f			bne 	_ILMCopy2
.1a4d	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1a4e					WarmStartEntry:
.1a4e	a2 ff		ldx #$ff			ldx 	#$FF
.1a50	9a		txs				txs
.1a51	a9 02		lda #$02			lda 	#2							; green text.
.1a53	a2 08		ldx #$08		ldx	#8
.1a55	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a58	a2 0c		ldx #$0c		ldx	#12
.1a5a	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a5d	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1a5f	85 28		sta $28				sta 	codePtr
.1a61	a5 2b		lda $2b				lda 	temp0+1
.1a63	85 29		sta $29				sta 	codePtr+1
.1a65	a2 04		ldx #$04		ldx	#4
.1a67	20 bf 14	jsr $14bf		jsr	deviceHandler
.1a6a	a2 06		ldx #$06		ldx	#6
.1a6c	20 25 3c	jsr $3c25		jsr	tokeniserHandler
.1a6f	c9 00		cmp #$00			cmp 	#0
.1a71	f0 25		beq $1a98			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1a73	a9 21		lda #$21			lda 	#(tokenHeader) & $FF
.1a75	85 28		sta $28				sta 	codePtr
.1a77	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1a79	85 29		sta $29				sta 	1+(codePtr)
.1a7b	ad 24 0c	lda $0c24			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1a7e	c9 80		cmp #$80			cmp 	#$80
.1a80	f0 cc		beq $1a4e			beq 	WarmStartEntry
.1a82	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1a84	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1a86	f0 15		beq $1a9d			beq 	HasLineNumber
.1a88	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1a8a	8d 21 0c	sta $0c21			sta 	tokenHeader 				; fake program line.
.1a8d	8d 22 0c	sta $0c22			sta 	tokenHeader+1
.1a90	8d 23 0c	sta $0c23			sta 	tokenHeader+2
.1a93	a2 12		ldx #$12		ldx	#18
.1a95	20 71 31	jsr $3171		jsr	mainHandler
.1a98					WSEError:
.1a98	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.1a9a	20 e0 14	jsr $14e0		jsr	errorHandler
.1a9d					HasLineNumber:
.1a9d	a0 03		ldy #$03			ldy 	#3 							; get line number
.1a9f	a9 00		lda #$00			lda 	#0
.1aa1	a2 06		ldx #$06		ldx	#6
.1aa3	20 71 31	jsr $3171		jsr	mainHandler
.1aa6	a5 58		lda $58				lda 	esInt2		 				; check in range (only 2 bytes)
.1aa8	05 60		ora $60				ora 	esInt3
.1aaa	d0 ec		bne $1a98			bne 	WSEError
.1aac	98		tya				tya 								; make codePtr point to code after the line number.
.1aad	18		clc				clc 								; by skipping over the tokenised number.
.1aae	65 28		adc $28				adc 	codePtr
.1ab0	85 28		sta $28				sta 	codePtr
.1ab2	90 02		bcc $1ab6			bcc		_HLNNoCarry
.1ab4	e6 29		inc $29				inc 	codePtr+1
.1ab6					_HLNNoCarry:
.1ab6	98		tya				tya 								; subtract that offset from the code buffer index
.1ab7	38		sec				sec
.1ab8	49 ff		eor #$ff			eor 	#$FF
.1aba	6d 24 0d	adc $0d24			adc 	tokenBufferIndex
.1abd	18		clc				clc 								; add space allowing for header & $80 trailer
.1abe	69 04		adc #$04			adc 	#4
.1ac0	8d 24 0d	sta $0d24			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1ac3	20 94 19	jsr $1994			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1ac6					_HLNNoDelete:
.1ac6	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1ac9	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1acb	f0 0c		beq $1ad9			beq 	_HLMEditDone
.1acd	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1acf	18		clc				clc 								; workspace (1k)
.1ad0	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1ad2	c5 34		cmp $34				cmp 	highMemory+1
.1ad4	b0 0b		bcs $1ae1			bcs 	_HLMMemory 					; nope, won't allowit.
.1ad6	20 e7 19	jsr $19e7			jsr 	InsertLine 					; insert the line in
.1ad9					_HLMEditDone:
.1ad9	a2 02		ldx #$02		ldx	#2
.1adb	20 71 31	jsr $3171		jsr	mainHandler
.1ade	4c 4e 1a	jmp $1a4e			jmp 	WarmStartEntry
.1ae1					_HLMMemory:
.1ae1	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.1ae3	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1ae6					interactionHandler:
.1ae6	7c e9 1a	jmp ($1ae9,x)			jmp 	(interactionVectors,x)
.1ae9					interactionVectors:
>1ae9	0b 19					.word ColdStartEntry       ; index 0
>1aeb	4e 1a					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1aed					section_end_interaction:
.1aed					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0be7					dataPtr:
>0be7							.fill 	2
.0be9					dataIndex:
>0be9							.fill 	1
.1aed					CommandRead:
.1aed	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1aef	20 24 2a	jsr $2a24			jsr 	EvaluateReference
.1af2	20 33 1b	jsr $1b33			jsr 	SwapDPCP 					; use the data pointer.
.1af5	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1af7	c8		iny				iny
.1af8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1afa	f0 07		beq $1b03			beq 	_CRInData
.1afc	88		dey				dey
.1afd	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1aff	aa		tax				tax
.1b00	20 34 22	jsr $2234			jsr 	ScanForward
.1b03					_CRInData:
.1b03	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1b05	20 d2 29	jsr $29d2			jsr 	Evaluate
.1b08	ca		dex				dex 								; and write the value.
.1b09	20 87 1d	jsr $1d87			jsr 	WriteValue
.1b0c	20 33 1b	jsr $1b33			jsr 	SwapDPCP 					; get the code pointer back.
.1b0f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1b11	c8		iny				iny
.1b12	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1b14	f0 d7		beq $1aed			beq 	CommandRead
.1b16	88		dey				dey
.1b17	60		rts				rts
.1b18					CommandData:
.1b18	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1b1a	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1b1c	20 34 22	jsr $2234			jsr 	ScanForward
.1b1f	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1b20	60		rts				rts
.1b21					CommandRestore:
.1b21	ad c8 0a	lda $0ac8			lda 	basePage
.1b24	8d e7 0b	sta $0be7			sta 	dataPtr
.1b27	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b2a	8d e8 0b	sta $0be8			sta 	dataPtr+1
.1b2d	a9 03		lda #$03			lda 	#3
.1b2f	8d e9 0b	sta $0be9			sta 	dataIndex
.1b32	60		rts				rts
.1b33					SwapDPCP:
.1b33	8a		txa				txa
.1b34	48		pha				pha
.1b35	98		tya				tya 								; swap Y, DataIndex
.1b36	ac e9 0b	ldy $0be9			ldy 	DataIndex
.1b39	8d e9 0b	sta $0be9			sta 	DataIndex
.1b3c	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1b3e	ae e7 0b	ldx $0be7			ldx 	dataptr
.1b41	8d e7 0b	sta $0be7			sta 	dataPtr
.1b44	86 28		stx $28				stx 	codePtr
.1b46	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1b48	ae e8 0b	ldx $0be8			ldx 	dataptr+1
.1b4b	8d e8 0b	sta $0be8			sta 	dataPtr+1
.1b4e	86 29		stx $29				stx 	codePtr+1
.1b50	68		pla				pla
.1b51	aa		tax				tax
.1b52	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1b53					CommandGOSUB:
.1b53	20 ef 29	jsr $29ef			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1b56	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1b58	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1b5a	20 1e 31	jsr $311e			jsr 	RSClaim
.1b5d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1b5f	20 4a 31	jsr $314a			jsr 	RSSavePosition
.1b62	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1b64	f0 1b		beq $1b81			beq 	GotoTOS 					; and do a GOTO there.
.1b66					CommandRETURN:
.1b66	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1b68	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1b6a	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1b6c	f0 05		beq $1b73			beq 	_isok
.1b6e	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1b70	20 e0 14	jsr $14e0		jsr	errorHandler
.1b73					_isok:
.1b73	a9 01		lda #$01			lda 	#1
.1b75	20 5d 31	jsr $315d			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1b78	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1b7a	20 40 31	jsr $3140			jsr 	RSFree
.1b7d	60		rts				rts
.1b7e					CommandGOTO:
.1b7e	20 ef 29	jsr $29ef			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1b81					GotoTOS:
.1b81	20 18 25	jsr $2518			jsr 	ResetCodeAddress 			; simple search.
.1b84					_GotoSearch:
.1b84	a0 00		ldy #$00			ldy 	#0 							; get offset
.1b86	b1 28		lda ($28),y			lda 	(codePtr),y
.1b88	f0 21		beq $1bab			beq 	_GotoError 					; not found.
.1b8a	c8		iny				iny									; check LSB match
.1b8b	b1 28		lda ($28),y			lda 	(codePtr),y
.1b8d	d5 48		cmp $48,x			cmp 	esInt0,x
.1b8f	d0 07		bne $1b98			bne 	_GotoNext
.1b91	c8		iny				iny
.1b92	b1 28		lda ($28),y			lda 	(codePtr),y
.1b94	d5 50		cmp $50,x			cmp 	esInt1,x
.1b96	f0 10		beq $1ba8			beq 	_GotoFound
.1b98					_GotoNext:
.1b98	a0 00		ldy #$00			ldy 	#0 							; go next line
.1b9a	b1 28		lda ($28),y			lda 	(codePtr),y
.1b9c	18		clc				clc
.1b9d	65 28		adc $28				adc 	codePtr
.1b9f	85 28		sta $28				sta 	codePtr
.1ba1	90 e1		bcc $1b84			bcc 	_GotoSearch
.1ba3	e6 29		inc $29				inc 	codePtr+1
.1ba5	4c 84 1b	jmp $1b84			jmp 	_GotoSearch
.1ba8					_GotoFound:
.1ba8	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1baa	60		rts				rts
.1bab					_GotoError:
.1bab	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1bad	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0bea					InputBuffer:
>0bea							.fill 	MaxInputSize+1
.1bb0					Command_Input:
.1bb0	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1bb2	c8		iny				iny
.1bb3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1bb5	f0 f9		beq $1bb0			beq 	Command_Input
.1bb7	88		dey				dey 							; undo consume
.1bb8	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1bba	f0 54		beq $1c10			beq 	_CIExit 				; : or EOL, exit
.1bbc	c9 80		cmp #$80			cmp 	#TOK_EOL
.1bbe	f0 50		beq $1c10			beq 	_CIExit
.1bc0	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1bc2	90 12		bcc $1bd6			bcc 	_CIVariable
.1bc4	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1bc6	d0 43		bne $1c0b			bne 	_CISyntax
.1bc8	a2 00		ldx #$00			ldx 	#0
.1bca	20 e6 29	jsr $29e6			jsr 	EvaluateString 			; evaluate and print string
.1bcd	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0
.1bd0	20 df 1c	jsr $1cdf			jsr 	PrintString
.1bd3	4c b0 1b	jmp $1bb0			jmp 	Command_Input
.1bd6					_CIVariable:
.1bd6	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1bd8	20 24 2a	jsr $2a24			jsr 	EvaluateReference  		; this is where its going
.1bdb					_CIRetry:
.1bdb	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1bdd	a2 14		ldx #$14		ldx	#20
.1bdf	20 bf 14	jsr $14bf		jsr	deviceHandler
.1be2	98		tya				tya
.1be3	48		pha				pha
.1be4	20 24 1c	jsr $1c24			jsr 	InputString 			; input a string (manually)
.1be7	a2 01		ldx #$01			ldx 	#1
.1be9	20 11 1c	jsr $1c11			jsr 	BufferToStackX 			; make stack,x ref input string.
.1bec	a5 40		lda $40				lda 	esType 					; if target type numeric
.1bee	29 40		and #$40			and 	#$40 					; then convert to number
.1bf0	d0 11		bne $1c03			bne 	_CIWrite
.1bf2	a2 01		ldx #$01			ldx 	#1
.1bf4	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1bf7	a9 0a		lda #$0a			lda 	#10
.1bf9	20 f1 2e	jsr $2ef1			jsr 	MInt32FromString 		; convert it back from a string.
.1bfc	68		pla				pla
.1bfd	a8		tay				tay
.1bfe	b0 03		bcs $1c03			bcs 	_CIWrite 				; successfully converted.
.1c00	18		clc				clc 							; default fail FP conversion
.1c01	90 d8		bcc $1bdb			bcc		_CIRetry				; failed, try again.
.1c03					_CIWrite:
.1c03	a2 00		ldx #$00			ldx 	#0
.1c05	20 87 1d	jsr $1d87			jsr 	WriteValue
.1c08	4c b0 1b	jmp $1bb0			jmp 	Command_Input
.1c0b					_CISyntax:
.1c0b	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c0d	20 e0 14	jsr $14e0		jsr	errorHandler
.1c10					_CIExit:
.1c10	60		rts				rts
.1c11					BufferToStackX:
.1c11	a9 ea		lda #$ea			lda 	#InputBuffer & $FF
.1c13	95 48		sta $48,x			sta 	esInt0,x
.1c15	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1c17	95 50		sta $50,x			sta 	esInt1,x
.1c19	a9 00		lda #$00			lda 	#0
.1c1b	95 58		sta $58,x			sta 	esInt2,x
.1c1d	95 60		sta $60,x			sta 	esInt3,x
.1c1f	a9 40		lda #$40			lda 	#$40
.1c21	95 40		sta $40,x			sta 	esType,x
.1c23	60		rts				rts
.1c24					InputString:
.1c24	a9 00		lda #$00			lda 	#0
.1c26	8d ea 0b	sta $0bea			sta 	InputBuffer
.1c29					_InputLoop:
.1c29	a2 00		ldx #$00		ldx	#0
.1c2b	20 bf 14	jsr $14bf		jsr	deviceHandler
.1c2e	a2 0a		ldx #$0a		ldx	#10
.1c30	20 bf 14	jsr $14bf		jsr	deviceHandler
.1c33	c9 00		cmp #$00			cmp 	#0
.1c35	f0 f2		beq $1c29			beq 	_InputLoop
.1c37	c9 08		cmp #$08			cmp 	#8
.1c39	f0 19		beq $1c54			beq 	_InputBackspace
.1c3b	c9 0d		cmp #$0d			cmp 	#13
.1c3d	f0 21		beq $1c60			beq 	_InputExit
.1c3f	ae ea 0b	ldx $0bea			ldx 	InputBuffer
.1c42	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1c44	f0 e3		beq $1c29			beq 	_InputLoop
.1c46	9d eb 0b	sta $0beb,x			sta 	InputBuffer+1,x 		; write char
.1c49	ee ea 0b	inc $0bea			inc 	InputBuffer 			; advance count.
.1c4c					_InputPrintLoop:
.1c4c	a2 14		ldx #$14		ldx	#20
.1c4e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1c51	4c 29 1c	jmp $1c29			jmp	 	_InputLoop
.1c54					_InputBackspace:
.1c54	ad ea 0b	lda $0bea			lda 	InputBuffer 			; at start
.1c57	f0 d0		beq $1c29			beq 	_InputLoop
.1c59	ce ea 0b	dec $0bea			dec 	InputBuffer
.1c5c	a9 08		lda #$08			lda 	#8
.1c5e	d0 ec		bne $1c4c			bne 	_InputPrintLoop
.1c60					_InputExit:
.1c60	a2 04		ldx #$04		ldx	#4
.1c62	20 bf 14	jsr $14bf		jsr	deviceHandler
.1c65	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0c0b					lastPrintToken:
>0c0b							.fill 	1
.1c66					Command_Print:
.1c66	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1c68	8d 0b 0c	sta $0c0b			sta 	lastPrintToken
.1c6b	88		dey				dey
.1c6c					_PrintLoopSkip:
.1c6c	c8		iny				iny
.1c6d					_PrintLoop:
.1c6d	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1c6f	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1c71	f0 5b		beq $1cce			beq 	_PrintExit
.1c73	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1c75	f0 57		beq $1cce			beq 	_PrintExit
.1c77	8d 0b 0c	sta $0c0b			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1c7a	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1c7c	f0 ee		beq $1c6c			beq 	_PrintLoopSkip
.1c7e	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1c80	f0 3c		beq $1cbe			beq	 	_PrintNewLine
.1c82	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1c84	f0 40		beq $1cc6			beq 	_PrintTab
.1c86	20 d0 29	jsr $29d0			jsr 	EvaluateRoot 				; evaluate something at the root
.1c89	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1c8b	85 2a		sta $2a				sta 	temp0
.1c8d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1c8f	85 2b		sta $2b				sta 	1+(temp0)
.1c91	a5 40		lda $40				lda 	esType 						; get type
.1c93	f0 15		beq $1caa			beq		_PrintInteger
.1c95	4a		lsr a				lsr 	a 							; check for floating point
.1c96	b0 08		bcs $1ca0			bcs 	_PrintFloat
.1c98					_PrintString:
.1c98	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1c9a	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0
.1c9d	4c b8 1c	jmp $1cb8			jmp 	_PrintTemp0 				; print no leading space.
.1ca0					_PrintFloat:
.1ca0	a9 00		lda #$00			lda 	#0 							; stack level.
.1ca2	a2 14		ldx #$14		ldx	#20
.1ca4	20 06 19	jsr $1906		jsr	floatingpointHandler
.1ca7	4c b1 1c	jmp $1cb1			jmp 	_PrintSpaceTemp0
.1caa					_PrintInteger:
.1caa	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1cac	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1cae	20 d9 2f	jsr $2fd9			jsr 	MInt32ToString				; convert to text
.1cb1					_PrintSpaceTemp0:
.1cb1	a9 20		lda #$20			lda 	#32
.1cb3	a2 14		ldx #$14		ldx	#20
.1cb5	20 bf 14	jsr $14bf		jsr	deviceHandler
.1cb8					_PrintTemp0:
.1cb8	20 df 1c	jsr $1cdf			jsr 	PrintString
.1cbb	4c 6d 1c	jmp $1c6d			jmp 	_PrintLoop
.1cbe					_PrintNewLine:
.1cbe	a2 04		ldx #$04		ldx	#4
.1cc0	20 bf 14	jsr $14bf		jsr	deviceHandler
.1cc3	4c 6c 1c	jmp $1c6c			jmp 	_PrintLoopSkip
.1cc6					_PrintTab:
.1cc6	a2 1a		ldx #$1a		ldx	#26
.1cc8	20 bf 14	jsr $14bf		jsr	deviceHandler
.1ccb	4c 6c 1c	jmp $1c6c			jmp 	_PrintLoopSkip
.1cce					_PrintExit:
.1cce	ad 0b 0c	lda $0c0b			lda		lastPrintToken 				; check last token
.1cd1	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1cd3	f0 09		beq $1cde			beq 	_PrintExit2
.1cd5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1cd7	f0 05		beq $1cde			beq 	_PrintExit2
.1cd9	a2 04		ldx #$04		ldx	#4
.1cdb	20 bf 14	jsr $14bf		jsr	deviceHandler
.1cde					_PrintExit2:
.1cde	60		rts				rts
.1cdf					PrintString:
.1cdf	8a		txa				txa
.1ce0	48		pha				pha
.1ce1	98		tya				tya
.1ce2	48		pha				pha
.1ce3	a0 00		ldy #$00			ldy 	#0							; get length
.1ce5	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ce7	aa		tax				tax 								; into X
.1ce8	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1cea	f0 10		beq $1cfc			beq 	_PSExit
.1cec	ca		dex				dex
.1ced	8a		txa				txa
.1cee	48		pha				pha
.1cef	c8		iny				iny
.1cf0	b1 2a		lda ($2a),y			lda 	(temp0),y
.1cf2	a2 14		ldx #$14		ldx	#20
.1cf4	20 bf 14	jsr $14bf		jsr	deviceHandler
.1cf7	68		pla				pla
.1cf8	aa		tax				tax
.1cf9	4c e8 1c	jmp $1ce8			jmp 	_PSLoop
.1cfc					_PSExit:
.1cfc	68		pla				pla
.1cfd	a8		tay				tay
.1cfe	68		pla				pla
.1cff	aa		tax				tax
.1d00	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.1d01					Command_CLS:
.1d01	a2 02		ldx #$02		ldx	#2
.1d03	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d06	60		rts				rts
.1d07					Command_Ink:
.1d07	a2 00		ldx #$00			ldx 	#0
.1d09	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger
.1d0c	a2 08		ldx #$08		ldx	#8
.1d0e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d11	60		rts				rts
.1d12					Command_Paper:
.1d12	a2 00		ldx #$00			ldx 	#0
.1d14	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger
.1d17	a2 12		ldx #$12		ldx	#18
.1d19	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d1c	60		rts				rts
.1d1d					Command_Locate:
.1d1d	a2 00		ldx #$00			ldx 	#0
.1d1f	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger
.1d22	20 03 31	jsr $3103			jsr 	CheckComma
.1d25	e8		inx				inx
.1d26	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger
.1d29	98		tya				tya
.1d2a	48		pha				pha
.1d2b	a4 49		ldy $49				ldy 	esInt0+1
.1d2d	a5 48		lda $48				lda 	esInt0
.1d2f	a2 10		ldx #$10		ldx	#16
.1d31	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d34	68		pla				pla
.1d35	a8		tay				tay
.1d36	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.1d37					Command_VDU:
.1d37	20 ef 29	jsr $29ef			jsr 	EvaluateRootInteger 			; get integer at root.
.1d3a	a5 48		lda $48				lda 	esInt0
.1d3c	a2 14		ldx #$14		ldx	#20
.1d3e	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d41					_CVNext:
.1d41	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.1d43	c8		iny				iny
.1d44	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.1d46	f0 ef		beq $1d37			beq 	Command_VDU
.1d48	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1d4a	d0 0a		bne $1d56			bne 	_CVExit
.1d4c	a5 50		lda $50				lda 	esInt1
.1d4e	a2 14		ldx #$14		ldx	#20
.1d50	20 bf 14	jsr $14bf		jsr	deviceHandler
.1d53	4c 41 1d	jmp $1d41			jmp 	_CVNext
.1d56	88		dey		_CVExit:dey
.1d57	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.1d58					Command_Assert:
.1d58	20 ef 29	jsr $29ef			jsr 	EvaluateRootInteger 		; what is being asserted.
.1d5b	20 aa 30	jsr $30aa			jsr 	MInt32Zero 					; is it true ?
.1d5e	f0 01		beq $1d61			beq 	_CAError
.1d60	60		rts				rts
.1d61					_CAError:
.1d61	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1d63	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.1d66					Command_Dim:
.1d66	a2 02		ldx #$02		ldx	#2
.1d68	20 34 3f	jsr $3f34		jsr	variableHandler
.1d6b	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1d6d	c8		iny				iny
.1d6e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1d70	f0 f4		beq $1d66			beq 	Command_Dim
.1d72	88		dey				dey 								; unpick get
.1d73	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.1d74					CommandLet:
.1d74	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1d76	20 24 2a	jsr $2a24			jsr 	EvaluateReference
.1d79	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1d7b	20 eb 30	jsr $30eb			jsr 	CheckToken
.1d7e	e8		inx				inx 								; do RHS
.1d7f	20 d2 29	jsr $29d2			jsr 	Evaluate 					; evaluate and dereference
.1d82	ca		dex				dex
.1d83	20 87 1d	jsr $1d87			jsr 	WriteValue 					; write it out
.1d86	60		rts				rts
.1d87					WriteValue:
.1d87	98		tya				tya
.1d88	48		pha				pha
.1d89	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1d8c	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1d8e	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1d90	29 40		and #$40			and 	#$40
.1d92	d0 50		bne $1de4			bne		_WVType
.1d94	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1d96	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1d98	29 40		and #$40			and 	#$40
.1d9a	d0 1f		bne $1dbb			bne 	_WVCopyString
.1d9c	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1d9e	15 41		ora $41,x			ora 	esType+1,x
.1da0	4a		lsr a				lsr 	a
.1da1	90 22		bcc $1dc5			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1da3	b5 40		lda $40,x			lda 	esType,x
.1da5	4a		lsr a				lsr 	a
.1da6	90 3c		bcc $1de4			bcc 	_WVType
.1da8	e8		inx				inx 								; force the value being written to be a float.
.1da9	20 34 26	jsr $2634			jsr 	BPMakeFloat
.1dac	ca		dex				dex
.1dad	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 					; set Temp0 to write address
.1db0	e8		inx				inx
.1db1	8a		txa				txa
.1db2	a2 20		ldx #$20		ldx	#32
.1db4	20 06 19	jsr $1906		jsr	floatingpointHandler
.1db7	aa		tax				tax
.1db8	4c e1 1d	jmp $1de1			jmp 	_WVCopyExit
.1dbb					_WVCopyString:
.1dbb	8a		txa				txa
.1dbc	a2 0e		ldx #$0e		ldx	#14
.1dbe	20 27 34	jsr $3427		jsr	stringHandler
.1dc1	aa		tax				tax
.1dc2	4c e1 1d	jmp $1de1			jmp 	_WVCopyExit
.1dc5					_WVCopyData4:
.1dc5	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1dc7	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1dc9	d0 10		bne $1ddb			bne 	_WVCopyData1
.1dcb	a0 03		ldy #$03			ldy 	#3
.1dcd	b5 61		lda $61,x			lda 	esInt3+1,x
.1dcf	91 2a		sta ($2a),y			sta 	(temp0),y
.1dd1	88		dey				dey
.1dd2	b5 59		lda $59,x			lda 	esInt2+1,x
.1dd4	91 2a		sta ($2a),y			sta 	(temp0),y
.1dd6	88		dey				dey
.1dd7	b5 51		lda $51,x			lda 	esInt1+1,x
.1dd9	91 2a		sta ($2a),y			sta 	(temp0),y
.1ddb					_WVCopyData1:
.1ddb	a0 00		ldy #$00			ldy 	#0
.1ddd	b5 49		lda $49,x			lda 	esInt0+1,x
.1ddf	91 2a		sta ($2a),y			sta 	(temp0),y
.1de1					_WVCopyExit:
.1de1	68		pla				pla
.1de2	a8		tay				tay
.1de3	60		rts				rts
.1de4					_WVType:
.1de4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1de6	20 e0 14	jsr $14e0		jsr	errorHandler
.1de9					TOSToTemp0:
.1de9	b5 48		lda $48,x			lda 	esInt0,x
.1deb	85 2a		sta $2a				sta 	temp0
.1ded	b5 50		lda $50,x			lda 	esInt1,x
.1def	85 2b		sta $2b				sta 	temp0+1
.1df1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.1df2					Command_Poke:
.1df2	a9 01		lda #$01			lda 	#1
.1df4	d0 06		bne $1dfc			bne 	PokeGeneral
.1df6					Command_Doke:
.1df6	a9 02		lda #$02			lda 	#2
.1df8	d0 02		bne $1dfc			bne 	PokeGeneral
.1dfa					Command_Loke:
.1dfa	a9 03		lda #$03			lda 	#3
.1dfc					PokeGeneral:
.1dfc	48		pha				pha 								; save id (PDL = 123)
.1dfd	20 ef 29	jsr $29ef			jsr 	EvaluateRootInteger 		; target address
.1e00	20 03 31	jsr $3103			jsr	 	CheckComma
.1e03	e8		inx				inx
.1e04	20 f1 29	jsr $29f1			jsr 	EvaluateInteger 			; what value to POKE ?
.1e07	ca		dex				dex
.1e08	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 					; temp0 points to the target address
.1e0b	84 32		sty $32				sty 	tempShort 					; save Y
.1e0d	68		pla				pla 								; get copy type (1-3) and dispatch
.1e0e	aa		tax				tax
.1e0f	ca		dex				dex
.1e10	f0 14		beq $1e26			beq 	_Poke1
.1e12	ca		dex				dex
.1e13	f0 0b		beq $1e20			beq 	_Poke2
.1e15	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1e17	a5 61		lda $61				lda 	esInt3+1
.1e19	91 2a		sta ($2a),y			sta 	(temp0),y
.1e1b	88		dey				dey
.1e1c	a5 59		lda $59				lda 	esInt2+1
.1e1e	91 2a		sta ($2a),y			sta 	(temp0),y
.1e20					_Poke2:
.1e20	a0 01		ldy #$01			ldy 	#1
.1e22	a5 51		lda $51				lda 	esInt1+1
.1e24	91 2a		sta ($2a),y			sta 	(temp0),y
.1e26					_Poke1:
.1e26	a0 00		ldy #$00			ldy 	#0
.1e28	a5 49		lda $49				lda 	esInt0+1
.1e2a	91 2a		sta ($2a),y			sta 	(temp0),y
.1e2c	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1e2e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.1e2f					Command_Rem:
.1e2f					Command_Rem2:
.1e2f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1e31	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1e33	d0 06		bne $1e3b			bne 	_CRNotString
.1e35	c8		iny				iny
.1e36	98		tya				tya
.1e37	38		sec				sec
.1e38	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1e3a	a8		tay				tay
.1e3b					_CRNotString:
.1e3b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.1e3c					CommandStop:
.1e3c	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1e3e	20 e0 14	jsr $14e0		jsr	errorHandler
.1e41					CommandEnd:
.1e41	4c 6c 31	jmp $316c			jmp 	WarmStart
.1e44					CommandXemu:
.1e44	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1e47					AdvanceNextLine:
.1e47	a0 00		ldy #$00			ldy 	#0 							; get offset
.1e49	b1 28		lda ($28),y			lda 	(codePtr),y
.1e4b	18		clc				clc 								; add to codePtr
.1e4c	65 28		adc $28				adc 	codePtr
.1e4e	85 28		sta $28				sta 	codePtr
.1e50	90 02		bcc $1e54			bcc 	_ANLNoCarry
.1e52	e6 29		inc $29				inc 	codePtr+1
.1e54					_ANLNoCarry:
.1e54	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1e56	f0 e9		beq $1e41			beq 	CommandEnd 					; execute END
.1e58	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1e5a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.1e5b					Command_FOR:
.1e5b	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1e5d	a2 0b		ldx #$0b			ldx 	#11
.1e5f	20 1e 31	jsr $311e			jsr 	RSClaim
.1e62	20 74 1d	jsr $1d74			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1e65	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1e67	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1e69	d0 4c		bne $1eb7			bne 	_CFType
.1e6b	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1e6d	20 eb 30	jsr $30eb			jsr 	CheckToken
.1e70	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1e72	20 f1 29	jsr $29f1			jsr 	EvaluateInteger				; get terminal value in stack 1
.1e75	98		tya				tya
.1e76	48		pha				pha
.1e77	a0 04		ldy #$04			ldy 	#4
.1e79	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1e7b	91 37		sta ($37),y			sta 	(rsPointer),y
.1e7d	c8		iny				iny
.1e7e	a5 50		lda $50				lda		esInt1
.1e80	91 37		sta ($37),y			sta 	(rsPointer),y
.1e82	c8		iny				iny
.1e83	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1e85	91 37		sta ($37),y			sta 	(rsPointer),y
.1e87	c8		iny				iny
.1e88	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1e8a	91 37		sta ($37),y			sta 	(rsPointer),y
.1e8c	c8		iny				iny
.1e8d	a5 51		lda $51				lda		esInt1+1
.1e8f	91 37		sta ($37),y			sta 	(rsPointer),y
.1e91	c8		iny				iny
.1e92	a5 59		lda $59				lda		esInt2+1
.1e94	91 37		sta ($37),y			sta 	(rsPointer),y
.1e96	c8		iny				iny
.1e97	a5 61		lda $61				lda		esInt3+1
.1e99	91 37		sta ($37),y			sta 	(rsPointer),y
.1e9b	68		pla				pla
.1e9c	a8		tay				tay
.1e9d	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1e9f	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1ea1	d0 0e		bne $1eb1			bne 	_CFDone
.1ea3	c8		iny				iny									; skip over step.
.1ea4	20 f1 29	jsr $29f1			jsr 	EvaluateInteger 			; get step
.1ea7	98		tya				tya
.1ea8	48		pha				pha
.1ea9	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1eab	a0 06		ldy #$06			ldy 	#6
.1ead	91 37		sta ($37),y			sta 	(rsPointer),y
.1eaf	68		pla				pla
.1eb0	a8		tay				tay
.1eb1					_CFDone:
.1eb1	a9 01		lda #$01			lda 	#1
.1eb3	20 4a 31	jsr $314a			jsr 	RSSavePosition 				; save position.
.1eb6	60		rts				rts
.1eb7					_CFType:
.1eb7	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1eb9	20 e0 14	jsr $14e0		jsr	errorHandler
.1ebc					Command_NEXT:
.1ebc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1ebe	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1ec0	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1ec2	f0 05		beq $1ec9			beq 	_isok
.1ec4	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1ec6	20 e0 14	jsr $14e0		jsr	errorHandler
.1ec9					_isok:
.1ec9	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1ecb	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1ecd	b0 18		bcs $1ee7			bcs 	_CNNoIndex
.1ecf	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1ed1	20 24 2a	jsr $2a24			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1ed4	98		tya				tya
.1ed5	48		pha				pha
.1ed6	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1ed8	b1 37		lda ($37),y			lda 	(rsPointer),y
.1eda	d5 48		cmp $48,x			cmp 	esInt0,x
.1edc	d0 76		bne $1f54			bne 	_CNBadIndex
.1ede	c8		iny				iny
.1edf	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ee1	d5 50		cmp $50,x			cmp 	esInt1,x
.1ee3	d0 6f		bne $1f54			bne 	_CNBadIndex
.1ee5	68		pla				pla
.1ee6	a8		tay				tay
.1ee7					_CNNoIndex:
.1ee7	98		tya				tya
.1ee8	48		pha				pha
.1ee9	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1eeb	b1 37		lda ($37),y			lda 	(rsPointer),y
.1eed	85 2a		sta $2a				sta 	temp0
.1eef	c8		iny				iny
.1ef0	b1 37		lda ($37),y			lda 	(rsPointer),y
.1ef2	85 2b		sta $2b				sta 	temp0+1
.1ef4	c8		iny				iny
.1ef5	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1ef7	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1ef9	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1efb	10 01		bpl $1efe			bpl 	_CNSignX
.1efd	ca		dex				dex  								; X = $FF
.1efe					_CNSignX:
.1efe	18		clc				clc 								; add to the LSB
.1eff	a0 00		ldy #$00			ldy 	#0
.1f01	71 2a		adc ($2a),y			adc 	(temp0),y
.1f03	91 2a		sta ($2a),y			sta 	(temp0),y
.1f05					_CNPropogate:
.1f05	c8		iny				iny  								; add the sign extended in X to the rest.
.1f06	8a		txa				txa
.1f07	71 2a		adc ($2a),y			adc 	(temp0),y
.1f09	91 2a		sta ($2a),y			sta 	(temp0),y
.1f0b	c8		iny				iny
.1f0c	8a		txa				txa
.1f0d	71 2a		adc ($2a),y			adc 	(temp0),y
.1f0f	91 2a		sta ($2a),y			sta 	(temp0),y
.1f11	c8		iny				iny
.1f12	8a		txa				txa
.1f13	71 2a		adc ($2a),y			adc 	(temp0),y
.1f15	91 2a		sta ($2a),y			sta 	(temp0),y
.1f17	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1f18	a5 37		lda $37				lda 	rsPointer
.1f1a	69 07		adc #$07			adc 	#7
.1f1c	85 2c		sta $2c				sta 	temp1
.1f1e	a9 00		lda #$00			lda 	#0
.1f20	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1f22	a8		tay				tay 								; and clear the Y register again.
.1f23	65 38		adc $38				adc 	rsPointer+1
.1f25	85 2d		sta $2d				sta 	temp1+1
.1f27	38		sec				sec 								; calculate current - limit oring interim values.
.1f28	20 60 1f	jsr $1f60			jsr 	_CNCompare 					; each of these does a byte.
.1f2b	20 60 1f	jsr $1f60			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.1f2e	20 60 1f	jsr $1f60			jsr 	_CNCompare 					; and the carry of the subtraction.
.1f31	20 60 1f	jsr $1f60			jsr 	_CNCompare
.1f34	50 02		bvc $1f38			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1f36	49 80		eor #$80			eor 	#$80
.1f38					_CNNoOverflow:
.1f38	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.1f3a	30 1d		bmi $1f59			bmi 	_CNCheckDownto
.1f3c	c9 00		cmp #$00			cmp 	#0
.1f3e	30 0c		bmi $1f4c			bmi 	_CNLoopRound 				; loop round if < =
.1f40	a5 2e		lda $2e				lda 	temp2
.1f42	f0 08		beq $1f4c			beq 	_CNLoopRound
.1f44					_CNLoopExit:
.1f44	68		pla				pla
.1f45	a8		tay				tay
.1f46	a9 0b		lda #$0b			lda 	#11
.1f48	20 40 31	jsr $3140			jsr 	RSFree
.1f4b	60		rts				rts
.1f4c					_CNLoopRound:
.1f4c	68		pla				pla
.1f4d	a8		tay				tay
.1f4e	a9 01		lda #$01			lda 	#1
.1f50	20 5d 31	jsr $315d			jsr 	RSLoadPosition				; go back to the loop top
.1f53	60		rts				rts
.1f54					_CNBadIndex:
.1f54	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.1f56	20 e0 14	jsr $14e0		jsr	errorHandler
.1f59					_CNCheckDownto:
.1f59	c9 00		cmp #$00			cmp 	#0
.1f5b	10 ef		bpl $1f4c			bpl 	_CNLoopRound
.1f5d	4c 44 1f	jmp $1f44			jmp 	_CNLoopExit
.1f60					_CNCompare:
.1f60	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1f62	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1f64	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1f66	85 2e		sta $2e				sta 	temp2
.1f68	c8		iny				iny
.1f69	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.1f6a					CommandIf:
.1f6a	20 ef 29	jsr $29ef			jsr 	EvaluateRootInteger 		; get what's being tested.
.1f6d	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1f6f	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1f71	f0 04		beq $1f77			beq 	_IfSimple
.1f73	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1f75	d0 1b		bne $1f92			bne 	_IfComplex
.1f77					_IfSimple:
.1f77	20 aa 30	jsr $30aa			jsr 	MInt32Zero					; check if TOS zero
.1f7a	f0 10		beq $1f8c			beq 	_IfEOL 						; go to next line.
.1f7c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1f7e	c8		iny				iny
.1f7f	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1f81	f0 0c		beq $1f8f			beq 	_IfGoto 					; do the Goto code
.1f83	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1f85	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1f87	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1f89	f0 04		beq $1f8f			beq 	_IfGoto
.1f8b	60		rts				rts 								; else continue on this line.
.1f8c					_IfEOL:
.1f8c	4c 47 1e	jmp $1e47			jmp 	AdvanceNextLine 			; go to next line
.1f8f					_IfGoto:
.1f8f	4c 7e 1b	jmp $1b7e			jmp 	CommandGoto
.1f92					_IfComplex:
.1f92	20 aa 30	jsr $30aa			jsr 	MInt32Zero 					; is it true ?
.1f95	f0 01		beq $1f98			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1f97	60		rts				rts 								; else continue.
.1f98					_IFSkip:
.1f98	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1f9a	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1f9c	4c 34 22	jmp $2234			jmp		ScanForward
.1f9f					Command_ELSE:
.1f9f	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1fa1	8a		txa				txa
.1fa2	4c 34 22	jmp $2234			jmp		ScanForward
.1fa5					Command_ENDIF:
.1fa5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0c0c					storeSize:
>0c0c							.fill 	1
.1fa6					CommandLocal:
.1fa6	a2 00		ldx #$00			ldx 	#0
.1fa8	20 c4 1f	jsr $1fc4			jsr 	LocaliseVariable 			; localise one.
.1fab					_CLCheckNext:
.1fab	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1fad	c8		iny				iny
.1fae	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1fb0	f0 06		beq $1fb8			beq 	_CLAssignment
.1fb2	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1fb4	f0 f0		beq $1fa6			beq 	CommandLocal
.1fb6	88		dey				dey
.1fb7	60		rts				rts
.1fb8					_CLAssignment:
.1fb8	a2 01		ldx #$01			ldx 	#1
.1fba	20 d2 29	jsr $29d2			jsr 	Evaluate 					; evaluate RHS
.1fbd	ca		dex				dex
.1fbe	20 87 1d	jsr $1d87			jsr 	WriteValue
.1fc1	4c ab 1f	jmp $1fab			jmp 	_CLCheckNext
.1fc4					LocaliseVariable:
.1fc4	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1fc6	c9 40		cmp #$40			cmp 	#$40
.1fc8	b0 67		bcs $2031			bcs 	_LVSyntax
.1fca	8a		txa				txa 								; get the address of that variable.
.1fcb	a2 00		ldx #$00		ldx	#0
.1fcd	20 34 3f	jsr $3f34		jsr	variableHandler
.1fd0	aa		tax				tax
.1fd1	8a		txa				txa
.1fd2	48		pha				pha
.1fd3	98		tya				tya
.1fd4	48		pha				pha
.1fd5	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1fd8	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1fda	0a		asl a				asl 	a
.1fdb	10 16		bpl $1ff3			bpl 	_LVPushNumber
.1fdd	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1fdf	b1 2a		lda ($2a),y			lda 	(temp0),y
.1fe1	c8		iny				iny
.1fe2	85 2c		sta $2c				sta 	temp1
.1fe4	b1 2a		lda ($2a),y			lda 	(temp0),y
.1fe6	85 2d		sta $2d				sta 	temp1+1
.1fe8	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1fea	b1 2c		lda ($2c),y			lda 	(temp1),y
.1fec	aa		tax				tax 								; into X
.1fed	e8		inx				inx 								; +1 for length.
.1fee	a9 24		lda #$24			lda 	#markerString
.1ff0	4c 08 20	jmp $2008			jmp 	_LVWriteFrame
.1ff3					_LVPushNumber:
.1ff3	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1ff5	85 2c		sta $2c				sta 	temp1
.1ff7	a5 2b		lda $2b				lda 	temp0+1
.1ff9	85 2d		sta $2d				sta 	temp1+1
.1ffb	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1ffd	4a		lsr a				lsr 	a
.1ffe	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2000	a2 04		ldx #$04			ldx 	#VarISize
.2002	90 04		bcc $2008			bcc 	_LVIsInteger
.2004	a9 23		lda #$23			lda 	#markerFloat
.2006	a2 06		ldx #$06			ldx 	#VarFSize
.2008					_LVIsInteger:
.2008					_LVWriteFrame:
.2008	8e 0c 0c	stx $0c0c			stx 	storeSize 					; number of bytes to copy from (temp0)
.200b	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.200c	e8		inx				inx
.200d	e8		inx				inx
.200e	20 1e 31	jsr $311e			jsr 	RSClaim 					; create the stack frame.
.2011	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2013	a0 01		ldy #$01			ldy 	#1
.2015	91 37		sta ($37),y			sta 	(rsPointer),y
.2017	c8		iny				iny
.2018	a5 2b		lda $2b				lda 	temp0+1
.201a	91 37		sta ($37),y			sta 	(rsPointer),y
.201c	a0 00		ldy #$00			ldy 	#0
.201e					_LVCopyData:
.201e	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2020	c8		iny				iny 								; write allowing for the header bit.
.2021	c8		iny				iny
.2022	c8		iny				iny
.2023	91 37		sta ($37),y			sta 	(rsPointer),y
.2025	88		dey				dey
.2026	88		dey				dey
.2027	ce 0c 0c	dec $0c0c			dec 	storeSize 					; do it storesize times
.202a	d0 f2		bne $201e			bne 	_LVCopyData
.202c	68		pla				pla
.202d	a8		tay				tay
.202e	68		pla				pla
.202f	aa		tax				tax
.2030	60		rts				rts
.2031					_LVSyntax:
.2031	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2033	20 e0 14	jsr $14e0		jsr	errorHandler
.2036					RestoreLocals:
.2036	a2 00		ldx #$00			ldx 	#0
.2038	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.203a	c9 40		cmp #$40			cmp	 	#64
.203c	90 01		bcc $203f			bcc 	_RLocal
.203e	60		rts				rts
.203f					_RLocal:
.203f	8a		txa				txa
.2040	48		pha				pha
.2041	98		tya				tya
.2042	48		pha				pha
.2043	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2045	b1 37		lda ($37),y			lda 	(rsPointer),y
.2047	85 2a		sta $2a				sta 	temp0
.2049	c8		iny				iny
.204a	b1 37		lda ($37),y			lda 	(rsPointer),y
.204c	85 2b		sta $2b				sta 	temp0+1
.204e	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2050	b1 37		lda ($37),y			lda 	(rsPointer),y
.2052	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2054	f0 28		beq $207e			beq 	_RString
.2056	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2058	c9 25		cmp #$25			cmp 	#markerInt
.205a	f0 02		beq $205e			beq 	_RIsInteger
.205c	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.205e					_RIsInteger:
.205e	8a		txa				txa
.205f	48		pha				pha
.2060	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2062					_RCopyBack:
.2062	b1 37		lda ($37),y			lda 	(rsPointer),y
.2064	88		dey				dey
.2065	88		dey				dey
.2066	88		dey				dey
.2067	91 2a		sta ($2a),y			sta 	(temp0),y
.2069	c8		iny				iny
.206a	c8		iny				iny
.206b	c8		iny				iny
.206c	c8		iny				iny
.206d	ca		dex				dex
.206e	d0 f2		bne $2062			bne 	_RCopyBack
.2070	68		pla				pla 								; get size add 3
.2071	18		clc				clc
.2072	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2074					_RRestoreAAndLoop:
.2074	20 40 31	jsr $3140			jsr 	RSFree
.2077	68		pla				pla
.2078	a8		tay				tay
.2079	68		pla				pla
.207a	aa		tax				tax
.207b	4c 36 20	jmp $2036			jmp 	RestoreLocals 				; go see if there are any more locals.
.207e					_RString:
.207e	a2 00		ldx #$00			ldx 	#0
.2080	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2082	b1 37		lda ($37),y			lda 	(rsPointer),y
.2084	95 48		sta $48,x			sta 	esInt0,x
.2086	c8		iny				iny
.2087	b1 37		lda ($37),y			lda 	(rsPointer),y
.2089	95 50		sta $50,x			sta 	esInt1,x
.208b	18		clc				clc
.208c	a5 37		lda $37				lda 	rsPointer
.208e	69 03		adc #$03			adc 	#3
.2090	95 49		sta $49,x			sta 	esInt0+1,x
.2092	a5 38		lda $38				lda 	rsPointer+1
.2094	69 00		adc #$00			adc 	#0
.2096	95 51		sta $51,x			sta 	esInt1+1,x
.2098	8a		txa				txa
.2099	a2 0e		ldx #$0e		ldx	#14
.209b	20 27 34	jsr $3427		jsr	stringHandler
.209e	a0 03		ldy #$03			ldy 	#3 							; get string length
.20a0	b1 37		lda ($37),y			lda 	(rsPointer),y
.20a2	18		clc				clc
.20a3	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.20a5	4c 74 20	jmp $2074			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0c0d					paramCount:
>0c0d							.fill 	1
.20a8					CallProc:
.20a8	20 30 21	jsr $2130			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.20ab	48		pha				pha 								; save length on stack
.20ac	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.20ae	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.20b0	48		pha				pha
.20b1	a5 2a		lda $2a				lda 	temp0
.20b3	48		pha				pha
.20b4	98		tya				tya 								; calculate Y + length
.20b5	18		clc				clc
.20b6	65 32		adc $32				adc 	tempShort
.20b8	a8		tay				tay
.20b9	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.20bb					_CallProcEvalParams:
.20bb	e8		inx				inx
.20bc	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.20be	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.20c0	f0 0b		beq $20cd			beq 	_CPDoneParams
.20c2	20 d2 29	jsr $29d2			jsr 	Evaluate 					; evaluate a parameter
.20c5	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.20c7	c8		iny				iny
.20c8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.20ca	f0 ef		beq $20bb			beq 	_CallProcEvalParams
.20cc	88		dey				dey 								; undo consumption.
.20cd					_CPDoneParams:
.20cd	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; check closing parenthesis.
.20d0	8e 0d 0c	stx $0c0d			stx 	paramCount 					; store parameter count+1
.20d3	a2 04		ldx #$04			ldx 	#4							; make space on stack
.20d5	a9 50		lda #$50			lda 	#markerPROC
.20d7	20 1e 31	jsr $311e			jsr 	RSClaim
.20da	a9 01		lda #$01			lda 	#1 							; store return address.
.20dc	20 4a 31	jsr $314a			jsr 	RSSavePosition
.20df	68		pla				pla 								; get the new code Ptr
.20e0	85 28		sta $28				sta 	codePtr
.20e2	68		pla				pla
.20e3	85 29		sta $29				sta 	codePtr+1
.20e5	68		pla				pla 								; length of name + 4 is the param start.
.20e6	18		clc				clc
.20e7	69 04		adc #$04			adc 	#4
.20e9	a8		tay				tay
.20ea	a2 ff		ldx #$ff			ldx 	#$FF
.20ec					_CPLoadParameters:
.20ec	e8		inx				inx 								; point to where the address should be loaded.
.20ed	ec 0d 0c	cpx $0c0d			cpx 	paramCount 					; too many parameters in definition ?
.20f0	f0 1e		beq $2110			beq 	_CPParamError
.20f2	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.20f4	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.20f6	f0 0e		beq $2106			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.20f8	20 c4 1f	jsr $1fc4			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.20fb	20 87 1d	jsr $1d87			jsr 	WriteValue 					; copy the evaluated parameter into there.
.20fe	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2100	c8		iny				iny
.2101	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2103	f0 e7		beq $20ec			beq 	_CPLoadParameters
.2105	88		dey				dey 								; no, unconsume and check for )
.2106					_CPParamComplete:
.2106	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; check )
.2109	e8		inx				inx 								; check right number of parameters have been consumed
.210a	ec 0d 0c	cpx $0c0d			cpx 	paramCount
.210d	d0 01		bne $2110			bne 	_CPParamError
.210f	60		rts				rts
.2110					_CPParamError:
.2110	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2112	20 e0 14	jsr $14e0		jsr	errorHandler
.2115					ReturnProc:
.2115	20 36 20	jsr $2036			jsr 	RestoreLocals 				; get the locals back.
.2118	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.211a	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.211c	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.211e	f0 05		beq $2125			beq 	_isok
.2120	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2122	20 e0 14	jsr $14e0		jsr	errorHandler
.2125					_isok:
.2125	a9 01		lda #$01			lda 	#1
.2127	20 5d 31	jsr $315d			jsr 	RSLoadPosition 				; reload the position from offset 1.
.212a	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.212c	20 40 31	jsr $3140			jsr 	RSFree
.212f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0c0e					procList:
>0c0e							.fill 	2		 					; terminated by name high being zero.
.0c10					yInLine:
>0c10							.fill 	1
.2130					FindProcedure:
.2130	8c 10 0c	sty $0c10			sty 	yInLine 					; save current position.
.2133	20 ee 21	jsr $21ee			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2136	85 2c		sta $2c				sta 	temp1
.2138	ad 0e 0c	lda $0c0e			lda		procList 					; put procList address in temp2
.213b	85 2e		sta $2e				sta 	temp2
.213d	ad 0f 0c	lda $0c0f			lda 	procList+1
.2140	85 2f		sta $2f				sta 	temp2+1
.2142	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2144					_FPLoop:
.2144	b1 2e		lda ($2e),y			lda 	(temp2),y
.2146	f0 4f		beq $2197			beq 	_FPError 					; if so, we don't know this procedure.
.2148	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.214a	c8		iny				iny
.214b	b1 2e		lda ($2e),y			lda 	(temp2),y
.214d	85 2a		sta $2a				sta 	temp0
.214f	c8		iny				iny
.2150	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2152	c5 2c		cmp $2c				cmp 	temp1
.2154	d0 2b		bne $2181			bne 	_FPNext 					; hash is different, go to next.
.2156	38		sec				sec
.2157	ad 10 0c	lda $0c10			lda 	yInLine 					; position in line must be at least 4
.215a	e9 04		sbc #$04			sbc 	#4
.215c	18		clc				clc
.215d	65 28		adc $28				adc 	codePtr
.215f	85 30		sta $30				sta 	temp3
.2161	a5 29		lda $29				lda 	codePtr+1
.2163	69 00		adc #$00			adc 	#0
.2165	85 31		sta $31				sta 	temp3+1
.2167	98		tya				tya
.2168	48		pha				pha
.2169	a0 04		ldy #$04			ldy 	#4
.216b					_FPCName:
.216b	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.216d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.216f	d0 0e		bne $217f			bne 	_FPpulYNext 				; if different go to next one.
.2171	c8		iny				iny
.2172	c9 3a		cmp #$3a			cmp 	#$3A
.2174	90 f5		bcc $216b			bcc 	_FPCName 					; compare the whole lot....
.2176	68		pla				pla 								; throw away the saved Y
.2177	98		tya				tya 								; length of name is Y-4
.2178	38		sec				sec
.2179	e9 04		sbc #$04			sbc 	#4
.217b	ac 10 0c	ldy $0c10			ldy 	yInLine  					; get the original Y back
.217e	60		rts				rts
.217f					_FPpulYNext:
.217f	68		pla				pla
.2180	a8		tay				tay
.2181					_FPNext:
.2181	c8		iny				iny 								; next procedure record.
.2182	10 c0		bpl $2144			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2184	98		tya				tya 								; subtract 128 from Y
.2185	38		sec				sec
.2186	e9 80		sbc #$80			sbc 	#128
.2188	a8		tay				tay
.2189	18		clc				clc 								; add 128 to temp2, so we can have more than
.218a	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.218c	69 80		adc #$80			adc 	#128
.218e	85 2e		sta $2e				sta 	temp2
.2190	90 b2		bcc $2144			bcc 	_FPLoop
.2192	e6 2f		inc $2f				inc 	temp2+1
.2194	4c 44 21	jmp $2144			jmp 	_FPLoop
.2197					_FPError:
.2197	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2199	20 e0 14	jsr $14e0		jsr	errorHandler
.219c					ScanProc:
.219c	98		tya				tya
.219d	48		pha				pha
.219e	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.21a0	8d 0e 0c	sta $0c0e			sta 	procList
.21a3	a5 36		lda $36				lda 	lowMemory+1
.21a5	8d 0f 0c	sta $0c0f			sta 	procList+1
.21a8	20 18 25	jsr $2518			jsr 	ResetCodeAddress 			; back to the start.
.21ab					_ScanLoop:
.21ab	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.21ad	b1 28		lda ($28),y			lda 	(codePtr),y
.21af	f0 2a		beq $21db			beq 	_ScanExit
.21b1	a0 03		ldy #$03			ldy 	#3							; get first token
.21b3	b1 28		lda ($28),y			lda 	(codePtr),y
.21b5	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.21b7	d0 12		bne $21cb			bne 	_ScanNext
.21b9	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.21bb	20 e3 21	jsr $21e3			jsr 	_ScanWrite
.21be	a5 28		lda $28				lda 	codePtr
.21c0	20 e3 21	jsr $21e3			jsr 	_ScanWrite
.21c3	a0 04		ldy #$04			ldy 	#4 							; start of name part
.21c5	20 ee 21	jsr $21ee			jsr 	CalculateProcedureHash 		; calculate procedure hash
.21c8	20 e3 21	jsr $21e3			jsr 	_ScanWrite					; and write that
.21cb					_ScanNext:
.21cb	18		clc				clc
.21cc	a0 00		ldy #$00			ldy 	#0
.21ce	b1 28		lda ($28),y			lda 	(codePtr),y
.21d0	65 28		adc $28				adc 	codePtr
.21d2	85 28		sta $28				sta 	codePtr
.21d4	90 d5		bcc $21ab			bcc 	_ScanLoop
.21d6	e6 29		inc $29				inc 	codePtr+1
.21d8	4c ab 21	jmp $21ab			jmp 	_ScanLoop
.21db					_ScanExit:
.21db	a9 00		lda #$00			lda 	#0 							; write ending zero.
.21dd	20 e3 21	jsr $21e3			jsr 	_ScanWrite
.21e0	68		pla				pla
.21e1	a8		tay				tay
.21e2	60		rts				rts
.21e3					_ScanWrite:
.21e3	a0 00		ldy #$00			ldy 	#0
.21e5	91 35		sta ($35),y			sta 	(lowMemory),y
.21e7	e6 35		inc $35				inc 	lowMemory
.21e9	d0 02		bne $21ed			bne 	_SWNoCarry
.21eb	e6 36		inc $36				inc 	lowMemory+1
.21ed					_SWNoCarry:
.21ed	60		rts				rts
.21ee					CalculateProcedureHash:
.21ee	a9 00		lda #$00			lda 	#0 							; clear hash.
.21f0	85 2a		sta $2a				sta 	temp0
.21f2					_CPHLoop:
.21f2	18		clc				clc 								; add character and rotate and add carry back in
.21f3	b1 28		lda ($28),y			lda 	(codePtr),y
.21f5	65 2a		adc $2a				adc 	temp0
.21f7	6a		ror a				ror 	a
.21f8	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.21fa	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.21fc	b1 28		lda ($28),y			lda 	(codePtr),y
.21fe	c8		iny				iny 								; advance incase we go round again.
.21ff	c9 3a		cmp #$3a			cmp 	#$3A
.2201	90 ef		bcc $21f2			bcc 	_CPHLoop
.2203	a5 2a		lda $2a				lda 	temp0
.2205	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2206					Command_Repeat:
.2206	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2208	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.220a	20 1e 31	jsr $311e			jsr 	RSClaim
.220d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.220f	20 4a 31	jsr $314a			jsr 	RSSavePosition
.2212	60		rts				rts
.2213					Command_Until:
.2213	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2215	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2217	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2219	f0 05		beq $2220			beq 	_isok
.221b	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.221d	20 e0 14	jsr $14e0		jsr	errorHandler
.2220					_isok:
.2220	20 ef 29	jsr $29ef			jsr 	EvaluateRootInteger 		; at the bottom.
.2223	20 aa 30	jsr $30aa			jsr 	MInt32Zero					; check if TOS zero
.2226	d0 06		bne $222e			bne 	_CUExit
.2228	a9 01		lda #$01			lda 	#1
.222a	20 5d 31	jsr $315d			jsr 	RSLoadPosition 				; reload the position from offset 1.
.222d	60		rts				rts
.222e					_CUExit:
.222e	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2230	20 40 31	jsr $3140			jsr 	RSFree
.2233	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2234					ScanForward:
.2234	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2236	86 2d		stx $2d				stx 	temp1+1
.2238	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.223a	85 2e		sta $2e				sta 	temp2
.223c	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.223e	c8		iny				iny
.223f	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2241	d0 08		bne $224b			bne 	_SFNoCheck 					; if so, check token against entered values.
.2243	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2245	f0 24		beq $226b			beq 	_SFExit 					; at the same strcture depth.
.2247	c5 2d		cmp $2d				cmp 	temp1+1
.2249	f0 20		beq $226b			beq 	_SFExit
.224b					_SFNoCheck:
.224b	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.224d	90 ed		bcc $223c			bcc 	_SFLoop
.224f	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2251	90 19		bcc $226c			bcc 	_SFSpecials
.2253	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2255	90 e5		bcc $223c			bcc 	_SFLoop
.2257	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2259	b0 e1		bcs $223c			bcs 	_SFLoop
.225b	aa		tax				tax  								; token in X, and look up the adjuster.
.225c	bd 0d 29	lda $290d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.225f	38		sec				sec 								; convert to an offset ($FF,$01)
.2260	e9 81		sbc #$81			sbc 	#$81
.2262	18		clc				clc 								; add to depth
.2263	65 2e		adc $2e				adc 	temp2
.2265	85 2e		sta $2e				sta 	temp2
.2267	10 d3		bpl $223c			bpl 	_SFLoop 					; +ve okay to continue
.2269	30 07		bmi $2272			bmi 	SFError 					; if gone -ve then we have a nesting error
.226b	60		rts		_SFExit:rts
.226c					_SFSpecials:
.226c	20 77 22	jsr $2277			jsr 	ScannerSkipSpecial
.226f	4c 3c 22	jmp $223c			jmp 	_SFLoop
.2272					SFError:
.2272	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2274	20 e0 14	jsr $14e0		jsr	errorHandler
.2277					ScannerSkipSpecial:
.2277	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2279	f0 10		beq $228b			beq 	_SFNextLine
.227b	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.227d	f0 2b		beq $22aa			beq 	_SFFloatSkip
.227f	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2281	f0 02		beq $2285			beq 	_SFSkipString
.2283	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2284	60		rts				rts 								; token.
.2285					_SFSkipString:
.2285	98		tya				tya
.2286	38		sec				sec
.2287	71 28		adc ($28),y			adc 	(codePtr),y
.2289	a8		tay				tay
.228a	60		rts				rts
.228b					_SFNextLine:
.228b	a0 00		ldy #$00			ldy 	#0 							; get offset
.228d	b1 28		lda ($28),y			lda 	(codePtr),y
.228f	18		clc				clc 								; add to code pointer.
.2290	65 28		adc $28				adc 	codePtr
.2292	85 28		sta $28				sta 	codePtr
.2294	90 02		bcc $2298			bcc		_SFNLNoCarry
.2296	e6 29		inc $29				inc 	codePtr+1
.2298					_SFNLNoCarry:
.2298	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.229a	d0 0b		bne $22a7			bne		_SFXNL 						; no go round again
.229c	a5 2c		lda $2c				lda 	temp1
.229e	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.22a0	d0 d0		bne $2272			bne 	SFError 					; read uses this to search for data statements
.22a2	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.22a4	20 e0 14	jsr $14e0		jsr	errorHandler
.22a7	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.22a9	60		rts				rts
.22aa					_SFFloatSkip:
.22aa	98		tya				tya 								; skip over an embedded float.
.22ab	18		clc				clc
.22ac	69 05		adc #$05			adc 	#FloatEmbeddedSize
.22ae	a8		tay				tay
.22af	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.22b0					Command_While:
.22b0	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.22b2	a2 04		ldx #$04			ldx 	#4
.22b4	20 1e 31	jsr $311e			jsr 	RSClaim 					; create on stack.
.22b7	88		dey				dey
.22b8	a9 01		lda #$01			lda 	#1
.22ba	20 4a 31	jsr $314a			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.22bd	c8		iny				iny
.22be	20 f1 29	jsr $29f1			jsr 	EvaluateInteger				; get the conditional
.22c1	20 aa 30	jsr $30aa			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.22c4	f0 01		beq $22c7			beq 	_CWFail
.22c6	60		rts				rts
.22c7					_CWFail:
.22c7	a9 04		lda #$04			lda 	#4
.22c9	20 40 31	jsr $3140			jsr 	RSFree 						; close the just opened position.
.22cc	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.22ce	aa		tax				tax
.22cf	20 34 22	jsr $2234			jsr 	ScanForward
.22d2	60		rts				rts
.22d3					Command_Wend:
.22d3	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22d5	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.22d7	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.22d9	f0 05		beq $22e0			beq 	_isok
.22db	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.22dd	20 e0 14	jsr $14e0		jsr	errorHandler
.22e0					_isok:
.22e0	a9 01		lda #$01			lda 	#1
.22e2	20 5d 31	jsr $315d			jsr 	RSLoadPosition				; go back until true
.22e5	a9 04		lda #$04			lda 	#4
.22e7	20 40 31	jsr $3140			jsr 	RSFree 						; close the loop
.22ea	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.22eb					CommandClear:
.22eb					XCommandClear:
.22eb	98		tya				tya
.22ec	48		pha				pha
.22ed	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.22f0	85 33		sta $33				sta 	highMemory
.22f2	ad cd 0a	lda $0acd			lda 	endMemory+1
.22f5	85 34		sta $34				sta 	highMemory+1
.22f7	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.22fa	85 2a		sta $2a				sta 	temp0
.22fc	ad c9 0a	lda $0ac9			lda 	basePage+1
.22ff	85 2b		sta $2b				sta 	temp0+1
.2301					_CCFindEnd:
.2301	a0 00		ldy #$00			ldy 	#0
.2303	b1 2a		lda ($2a),y			lda 	(temp0),y
.2305	f0 0c		beq $2313			beq 	_CCFoundEnd 				; offset zero is end.
.2307	18		clc				clc
.2308	65 2a		adc $2a				adc 	temp0 						; move to next line
.230a	85 2a		sta $2a				sta 	temp0
.230c	90 f3		bcc $2301			bcc 	_CCFindEnd
.230e	e6 2b		inc $2b				inc 	temp0+1
.2310	4c 01 23	jmp $2301			jmp 	_CCFindEnd
.2313					_CCFoundEnd:
.2313	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2315	85 35		sta $35				sta 	lowMemory
.2317	a5 2b		lda $2b				lda 	temp0+1
.2319	85 36		sta $36				sta 	lowMemory+1
.231b	18		clc				clc 								; put temp0+1 in endProgram
.231c	a5 2a		lda $2a				lda 	temp0
.231e	69 01		adc #$01			adc 	#1
.2320	8d ca 0a	sta $0aca			sta 	endProgram
.2323	a5 2b		lda $2b				lda 	temp0+1
.2325	69 00		adc #$00			adc 	#0
.2327	8d cb 0a	sta $0acb			sta 	endProgram+1
.232a	18		clc				clc 								; put a bit of space in.
.232b	a5 35		lda $35				lda 	lowMemory
.232d	69 04		adc #$04			adc 	#4
.232f	85 35		sta $35				sta 	lowMemory
.2331	90 02		bcc $2335			bcc 	_CCNoCarry
.2333	e6 36		inc $36				inc 	lowMemory+1
.2335					_CCNoCarry:
.2335	20 10 31	jsr $3110			jsr 	RSReset 					; reset the return stack.
.2338	a2 04		ldx #$04		ldx	#4
.233a	20 34 3f	jsr $3f34		jsr	variableHandler
.233d	20 9c 21	jsr $219c			jsr 	ScanProc 					; scan for procedures
.2340	20 21 1b	jsr $1b21			jsr 	CommandRestore 				; do a restore
.2343	68		pla				pla
.2344	a8		tay				tay
.2345	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0c11					structIndent:
>0c11							.fill 	1
.2346					CommandList:
.2346	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2348	8e 11 0c	stx $0c11			stx 	structIndent
.234b	20 83 30	jsr $3083			jsr 	MInt32False
.234e	e8		inx				inx
.234f	20 7f 30	jsr $307f			jsr 	MInt32True
.2352	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2354	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2356	f0 15		beq $236d			beq 	_CLEndLine
.2358	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.235a	30 1b		bmi $2377			bmi 	_CLDoListing 				; do the whole lot.
.235c	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.235e	20 f1 29	jsr $29f1			jsr 	EvaluateInteger
.2361	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2363	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2365	f0 06		beq $236d			beq 	_CLEndLine
.2367	20 c1 2f	jsr $2fc1			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.236a	4c 77 23	jmp $2377			jmp 	_CLDoListing 				; own e.g. list 1100
.236d					_CLEndLine:
.236d	c8		iny				iny 								; skip comma
.236e	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2370	30 05		bmi $2377			bmi 	_CLDoListing
.2372	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2374	20 f1 29	jsr $29f1			jsr 	EvaluateInteger				; get end
.2377					_CLDoListing:
.2377	20 18 25	jsr $2518			jsr 	ResetCodeAddress 			; back to the start.
.237a					_CLCheckLoop:
.237a	a2 00		ldx #$00		ldx	#0
.237c	20 bf 14	jsr $14bf		jsr	deviceHandler
.237f	a0 00		ldy #$00			ldy 	#0							; check end.
.2381	b1 28		lda ($28),y			lda 	(codePtr),y
.2383	f0 41		beq $23c6			beq 	_CLEnd
.2385	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2387	20 c9 23	jsr $23c9			jsr 	CLCompareLineTOS
.238a	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.238c	f0 28		beq $23b6			beq 	_CLNext
.238e	e8		inx				inx
.238f	20 c9 23	jsr $23c9			jsr 	CLCompareLineTOS 			; compare vs higher
.2392	c9 01		cmp #$01			cmp 	#1
.2394	f0 20		beq $23b6			beq 	_CLNext
.2396	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2398	20 eb 23	jsr $23eb			jsr 	CLStructureCheck
.239b	ad 11 0c	lda $0c11			lda 	structIndent 				; indent level.
.239e	10 02		bpl $23a2			bpl 	_CLPositive
.23a0	a9 00		lda #$00			lda 	#0
.23a2					_CLPositive:
.23a2	a2 02		ldx #$02		ldx	#2
.23a4	20 25 3c	jsr $3c25		jsr	tokeniserHandler
.23a7	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.23a9	20 eb 23	jsr $23eb			jsr 	CLStructureCheck
.23ac	ad 11 0c	lda $0c11			lda 	structIndent
.23af	10 05		bpl $23b6			bpl 	_CLNext
.23b1	a9 00		lda #$00			lda 	#0
.23b3	8d 11 0c	sta $0c11			sta 	structIndent
.23b6					_CLNext:
.23b6	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.23b8	b1 28		lda ($28),y			lda 	(codePtr),y
.23ba	18		clc				clc
.23bb	65 28		adc $28				adc 	codePtr
.23bd	85 28		sta $28				sta 	codePtr
.23bf	90 b9		bcc $237a			bcc 	_CLCheckLoop
.23c1	e6 29		inc $29				inc 	codePtr+1
.23c3	4c 7a 23	jmp $237a			jmp 	_CLCheckLoop
.23c6					_CLEnd:
.23c6	4c 6c 31	jmp $316c			jmp 	WarmStart 					; warm start after list.
.23c9					CLCompareLineTOS:
.23c9	a0 01		ldy #$01			ldy 	#1
.23cb	b1 28		lda ($28),y			lda 	(codePtr),y
.23cd	55 48		eor $48,x			eor 	esInt0,x
.23cf	85 2a		sta $2a				sta 	temp0
.23d1	c8		iny				iny
.23d2	b1 28		lda ($28),y			lda 	(codePtr),y
.23d4	55 50		eor $50,x			eor 	esInt1,x
.23d6	05 2a		ora $2a				ora 	temp0
.23d8	f0 10		beq $23ea			beq 	_CLCLTExit
.23da	88		dey				dey
.23db	b1 28		lda ($28),y			lda 	(codePtr),y
.23dd	d5 48		cmp $48,x			cmp 	esInt0,x
.23df	c8		iny				iny
.23e0	b1 28		lda ($28),y			lda 	(codePtr),y
.23e2	f5 50		sbc $50,x			sbc 	esInt1,x
.23e4	a9 ff		lda #$ff			lda 	#255
.23e6	90 02		bcc $23ea			bcc 	_CLCLTExit
.23e8	a9 01		lda #$01			lda 	#1
.23ea					_CLCLTExit:
.23ea	60		rts				rts
.23eb					CLStructureCheck:
.23eb	85 2a		sta $2a				sta 	temp0
.23ed	a0 03		ldy #$03			ldy 	#3
.23ef					_CLSCLoop:
.23ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.23f1	c8		iny				iny
.23f2	c9 80		cmp #$80			cmp 	#$80
.23f4	90 f9		bcc $23ef			bcc 	_CLSCLoop 					; $00-$7F just step over.
.23f6	f0 28		beq $2420			beq		_CLSCExit					; EOL return
.23f8	c9 86		cmp #$86			cmp 	#$86 						; special handler
.23fa	90 1e		bcc $241a			bcc 	_CLSCSpecial
.23fc	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.23fe	90 ef		bcc $23ef			bcc 	_CLSCLoop
.2400	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2402	b0 eb		bcs $23ef			bcs 	_CLSCLoop
.2404	aa		tax				tax 								; get adjustment
.2405	bd 0d 29	lda $290d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2408	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.240a	d0 e3		bne $23ef			bne 	_CLSCLoop
.240c	38		sec				sec
.240d	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.240f	0a		asl a				asl 	a 							; double indent step
.2410	18		clc				clc
.2411	6d 11 0c	adc $0c11			adc 	structIndent 				; add to structure indent
.2414	8d 11 0c	sta $0c11			sta 	structIndent
.2417	4c ef 23	jmp $23ef			jmp 	_CLSCLoop
.241a					_CLSCSpecial:
.241a	20 77 22	jsr $2277			jsr 	ScannerSkipSpecial
.241d	4c ef 23	jmp $23ef			jmp 	_CLSCLoop
.2420					_CLSCExit:
.2420	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2421					CommandLoad:
.2421	20 49 24	jsr $2449			jsr 	CLSParameters 					; get parameters for load.
.2424	08		php				php
.2425	a2 0e		ldx #$0e		ldx	#14
.2427	20 bf 14	jsr $14bf		jsr	deviceHandler
.242a	28		plp				plp
.242b	b0 08		bcs $2435			bcs 	_CLExit 						; if CC then load a program, so warm start.
.242d	20 eb 22	jsr $22eb			jsr 	CommandClear
.2430	a2 02		ldx #$02		ldx	#2
.2432	20 e6 1a	jsr $1ae6		jsr	interactionHandler
.2435					_CLExit
.2435	60		rts				rts
.2436					CommandSave:
.2436	20 49 24	jsr $2449			jsr 	CLSParameters					; get parameters for save
.2439	90 08		bcc $2443			bcc 	_CSNoOverrideAddress
.243b	20 03 31	jsr $3103			jsr 	CheckComma 						; should be a comma.
.243e	a2 02		ldx #$02			ldx 	#2
.2440	20 f1 29	jsr $29f1			jsr 	EvaluateInteger 				; get save end address.
.2443					_CSNoOverrideAddress:
.2443	a2 18		ldx #$18		ldx	#24
.2445	20 bf 14	jsr $14bf		jsr	deviceHandler
.2448	60		rts				rts
.2449					CLSParameters:
.2449	a2 00		ldx #$00			ldx 	#0 								; string
.244b	20 e6 29	jsr $29e6			jsr 	EvaluateString
.244e	e8		inx				inx 									; erase out +1 +2
.244f	20 83 30	jsr $3083			jsr 	MInt32False
.2452	e8		inx				inx
.2453	20 83 30	jsr $3083			jsr 	MInt32False
.2456	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2459	85 49		sta $49				sta 	esInt0+1
.245b	ad c9 0a	lda $0ac9			lda 	basePage+1
.245e	85 51		sta $51				sta 	esInt1+1
.2460	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2463	85 4a		sta $4a				sta 	esInt0+2
.2465	ad cb 0a	lda $0acb			lda 	endProgram+1
.2468	85 52		sta $52				sta 	esInt1+2
.246a	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.246c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.246e	d0 08		bne $2478			bne 	_CLSDefault
.2470	c8		iny				iny 									; skip comma
.2471	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2473	20 f1 29	jsr $29f1			jsr 	EvaluateInteger
.2476	38		sec				sec
.2477	60		rts				rts
.2478					_CLSDefault:
.2478	18		clc				clc
.2479	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.247a					Command_New:
.247a					Command_XNew:
.247a	20 18 25	jsr $2518			jsr 	ResetCodeAddress 			; point to first line
.247d	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.247f	98		tya				tya
.2480	91 28		sta ($28),y			sta 	(codePtr),y
.2482	20 eb 22	jsr $22eb			jsr 	CommandClear 				; clear everything down.
.2485	4c 41 1e	jmp $1e41			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0c12					breakCounter:
>0c12								.fill 	1
.0c13					breakIncrement:
>0c13								.fill 	1
.2488					Command_Run:
.2488					XCommand_Run:
.2488	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.248a	9a		txs				txs
.248b	20 12 25	jsr $2512			jsr 	BreakOn 					; turn break on
.248e	20 eb 22	jsr $22eb			jsr 	CommandClear 				; clear everything.
.2491	20 18 25	jsr $2518			jsr 	ResetCodeAddress 			; back to the start.
.2494					Command_RunFrom:
.2494	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2496					CRNextInstruction:
.2496	64 3a		stz $3a				stz 	softMemAlloc+1
.2498	ad 12 0c	lda $0c12			lda 	breakCounter 				; check for break.
.249b	6d 13 0c	adc $0c13			adc 	breakIncrement
.249e	8d 12 0c	sta $0c12			sta 	breakCounter
.24a1	90 05		bcc $24a8			bcc 	_CRNoChecks
.24a3	a2 00		ldx #$00		ldx	#0
.24a5	20 bf 14	jsr $14bf		jsr	deviceHandler
.24a8					_CRNoChecks
.24a8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.24aa	10 1c		bpl $24c8			bpl 	_CRNotToken
.24ac	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.24ae	b0 0c		bcs $24bc			bcs 	_CRExecute
.24b0	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.24b2	b0 71		bcs $2525			bcs 	Unimplemented
.24b4	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.24b6	b0 04		bcs $24bc			bcs 	_CRExecute
.24b8	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.24ba	b0 16		bcs $24d2			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.24bc					_CRExecute:
.24bc	c8		iny				iny 								; consume it.
.24bd	0a		asl a				asl 	a 							; double it, losing most significant bit.
.24be	aa		tax				tax
.24bf	20 c5 24	jsr $24c5			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.24c2	4c 96 24	jmp $2496			jmp 	CRNextInstruction
.24c5					_CRRunRoutine:
.24c5	7c 2f 25	jmp ($252f,x)			jmp 	(Group0Vectors,x)
.24c8					_CRNotToken:
.24c8	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.24ca	b0 59		bcs $2525			bcs 	Unimplemented
.24cc					_CRDefaultLet:
.24cc	20 74 1d	jsr $1d74			jsr 	CommandLet 					; do the default, LET
.24cf	4c 96 24	jmp $2496			jmp 	CRNextInstruction
.24d2					_CRCheckIndirect:
.24d2	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.24d4	f0 0a		beq $24e0			beq 	_CRAndCommand
.24d6	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.24d8	f0 f2		beq $24cc			beq 	_CRDefaultLet
.24da	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.24dc	f0 ee		beq $24cc			beq 	_CRDefaultLet
.24de	d0 45		bne $2525			bne 	Unimplemented
.24e0					_CRAndCommand:
.24e0	c8		iny				iny 								; skip over the AND token
.24e1	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.24e3	20 fd 24	jsr $24fd			jsr 	CommandAssembler 			; do the assembler command
.24e6	4c 96 24	jmp $2496			jmp 	CRNextInstruction 			; and loop round.
.24e9					CommandShift1:
.24e9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.24eb	10 38		bpl $2525			bpl 	Unimplemented 				; we have an error as this should not happen.
.24ed	c8		iny				iny 								; advance over it.
.24ee	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.24f0	b0 0b		bcs $24fd			bcs 	CommandAssembler
.24f2	0a		asl a				asl 	a 							; double into X
.24f3	aa		tax				tax
.24f4	7c f3 25	jmp ($25f3,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.24f7					CommandShift2:
.24f7	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.24f9	20 f7 17	jsr $17f7		jsr	extensionHandler
.24fc	60		rts				rts
.24fd					CommandAssembler:
.24fd	a2 00		ldx #$00		ldx	#0
.24ff	20 84 13	jsr $1384		jsr	assemblerHandler
.2502	60		rts				rts
.2503					CommandAssemblerLabel:
.2503	a2 02		ldx #$02		ldx	#2
.2505	20 84 13	jsr $1384		jsr	assemblerHandler
.2508	60		rts				rts
.2509					CommandColon:
.2509	60		rts				rts
.250a					CommandBreak:
.250a	20 ef 29	jsr $29ef			jsr 	EvaluateRootInteger
.250d	20 aa 30	jsr $30aa			jsr 	MInt32Zero
.2510	f0 02		beq $2514			beq 	BreakOff
.2512					BreakOn:
.2512	a2 08		ldx #$08			ldx 	#8
.2514					BreakOff:
.2514	8e 13 0c	stx $0c13			stx 	breakIncrement
.2517	60		rts				rts
.2518					ResetCodeAddress:
.2518	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.251b	85 28		sta $28				sta 	codePtr
.251d	ad c9 0a	lda $0ac9			lda 	basePage+1
.2520	85 29		sta $29				sta 	codePtr+1
.2522	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2524	60		rts				rts
.2525					Unimplemented:
.2525	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2527	20 e0 14	jsr $14e0		jsr	errorHandler
.252a					TKErr01:
.252a					TKErr02:
.252a					TKErr03:
.252a					TKErr04:
.252a					TKErr05:
.252a					TKErr06:
.252a					TKErr07:
.252a					TKErr08:
.252a					TKErr09:
.252a					TKErr10:
.252a					TKErr11:
.252a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.252c	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.252f					Group0Vectors:
>252f	47 1e					.word	AdvanceNextLine          ; $80 [[eol]]
>2531	e9 24					.word	CommandShift1            ; $81 [[sh1]]
>2533	f7 24					.word	CommandShift2            ; $82 [[sh2]]
>2535	2a 25					.word	TKErr09                  ; $83 [[sh3]]
>2537	2a 25					.word	TKErr10                  ; $84 [[fpc]]
>2539	2a 25					.word	TKErr08                  ; $85 [[str]]
>253b	d6 26					.word	AndHandler               ; $86 and
>253d	c3 26					.word	OrHandler                ; $87 or
>253f	b0 26					.word	XorHandler               ; $88 xor
>2541	f8 27					.word	CompareGreaterEq         ; $89 >=
>2543	02 28					.word	CompareLessEq            ; $8a <=
>2545	e4 27					.word	CompareGreater           ; $8b >
>2547	da 27					.word	CompareLess              ; $8c <
>2549	d0 27					.word	CompareEquals            ; $8d =
>254b	ee 27					.word	CompareNotEquals         ; $8e <>
>254d	41 26					.word	AddHandler               ; $8f +
>254f	64 26					.word	SubHandler               ; $90 -
>2551	fc 26					.word	ShrHandler               ; $91 >>
>2553	e9 26					.word	ShlHandler               ; $92 <<
>2555	77 26					.word	MulHandler               ; $93 *
>2557	8a 26					.word	DivHandler               ; $94 /
>2559	9d 26					.word	ModHandler               ; $95 mod
>255b	35 27					.word	PowerHandler             ; $96 ^
>255d	0f 27					.word	WordRefHandler           ; $97 !
>255f	22 27					.word	ByteRefHandler           ; $98 ?
>2561	06 22					.word	Command_Repeat           ; $99 repeat
>2563	b0 22					.word	Command_While            ; $9a while
>2565	5b 1e					.word	Command_FOR              ; $9b for
>2567	6a 1f					.word	CommandIf                ; $9c if
>2569	2a 25					.word	TKErr04                  ; $9d defproc
>256b	13 22					.word	Command_Until            ; $9e until
>256d	d3 22					.word	Command_Wend             ; $9f wend
>256f	bc 1e					.word	Command_NEXT             ; $a0 next
>2571	2a 25					.word	TKErr06                  ; $a1 then
>2573	a5 1f					.word	Command_ENDIF            ; $a2 endif
>2575	15 21					.word	ReturnProc               ; $a3 endproc
>2577	5c 29					.word	UnaryParenthesis         ; $a4 (
>2579	38 2b					.word	UnaryLen                 ; $a5 len(
>257b	7c 2b					.word	UnarySgn                 ; $a6 sgn(
>257d	65 2b					.word	UnaryAbs                 ; $a7 abs(
>257f	d5 2b					.word	Unary_Random             ; $a8 random(
>2581	1f 2c					.word	Unary_Page               ; $a9 page
>2583	7f 30					.word	MInt32True               ; $aa true
>2585	83 30					.word	MInt32False              ; $ab false
>2587	ea 2b					.word	Unary_Min                ; $ac min(
>2589	ee 2b					.word	Unary_Max                ; $ad max(
>258b	f7 2c					.word	UnarySys                 ; $ae sys(
>258d	a0 2c					.word	UnaryTimer               ; $af timer(
>258f	b5 2a					.word	EventFunction            ; $b0 event(
>2591	c9 2c					.word	UnaryGet                 ; $b1 get(
>2593	b9 2c					.word	UnaryInkey               ; $b2 inkey(
>2595	70 2c					.word	UnaryAlloc               ; $b3 alloc(
>2597	30 2d					.word	ExecChr                  ; $b4 chr$(
>2599	60 2d					.word	ExecLeft                 ; $b5 left$(
>259b	7d 2d					.word	ExecMid                  ; $b6 mid$(
>259d	a5 2d					.word	ExecRight                ; $b7 right$(
>259f	37 2a					.word	Event_Str                ; $b8 str$(
>25a1	66 2a					.word	UnaryVal                 ; $b9 val(
>25a3	93 2b					.word	UnaryPeek                ; $ba peek(
>25a5	99 2b					.word	UnaryDeek                ; $bb deek(
>25a7	9f 2b					.word	UnaryLeek                ; $bc leek(
>25a9	56 2b					.word	UnaryAsc                 ; $bd asc(
>25ab	4a 2c					.word	UnaryIntToFloat          ; $be int(
>25ad	5d 2c					.word	UnaryFloatToInt          ; $bf float(
>25af	69 2a					.word	UnaryIsVal               ; $c0 isval(
>25b1	47 2d					.word	ExecUpper                ; $c1 upper$(
>25b3	44 2d					.word	ExecLower                ; $c2 lower$(
>25b5	2d 2c					.word	UnaryReference           ; $c3 @
>25b7	43 2c					.word	UnaryComplement          ; $c4 ~
>25b9	40 2c					.word	UnaryHexMarker           ; $c5 &
>25bb	e2 2c					.word	UnaryGetString           ; $c6 get$(
>25bd	e8 2c					.word	UnaryInkeyString         ; $c7 inkey$(
>25bf	1f 2d					.word	UnaryMem                 ; $c8 mem
>25c1	2a 25					.word	TKErr01                  ; $c9 )
>25c3	09 25					.word	CommandColon             ; $ca :
>25c5	2a 25					.word	TKErr02                  ; $cb ,
>25c7	2a 25					.word	TKErr03                  ; $cc ;
>25c9	2f 1e					.word	Command_Rem2             ; $cd '
>25cb	2a 25					.word	TKErr07                  ; $ce to
>25cd	2a 25					.word	TKErr05                  ; $cf step
>25cf	a8 20					.word	CallProc                 ; $d0 proc
>25d1	a6 1f					.word	CommandLocal             ; $d1 local
>25d3	66 1d					.word	Command_Dim              ; $d2 dim
>25d5	2f 1e					.word	Command_Rem              ; $d3 rem
>25d7	74 1d					.word	CommandLet               ; $d4 let
>25d9	b0 1b					.word	Command_Input            ; $d5 input
>25db	9f 1f					.word	Command_ELSE             ; $d6 else
>25dd	37 1d					.word	Command_VDU              ; $d7 vdu
>25df	66 1c					.word	Command_Print            ; $d8 print
>25e1	7e 1b					.word	CommandGOTO              ; $d9 goto
>25e3	53 1b					.word	CommandGOSUB             ; $da gosub
>25e5	66 1b					.word	CommandRETURN            ; $db return
>25e7	18 1b					.word	CommandData              ; $dc data
>25e9	58 1d					.word	Command_Assert           ; $dd assert
>25eb	f2 1d					.word	Command_Poke             ; $de poke
>25ed	f6 1d					.word	Command_Doke             ; $df doke
>25ef	fa 1d					.word	Command_Loke             ; $e0 loke
>25f1	07 1d					.word	Command_Ink              ; $e1 ink
>25f3	12 1d					.word	Command_Paper            ; $e2 paper
>25f5	01 1d					.word	Command_CLS              ; $e3 cls
>25f7	1d 1d					.word	Command_Locate           ; $e4 locate
>25f9	0a 25					.word	CommandBreak             ; $e5 break
>25fb	03 25					.word	CommandAssemblerLabel    ; $e6 .
>25fd	2a 25					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.25ff					Group1Vectors:
>25ff	eb 22					.word	CommandClear             ; $86 clear
>2601	21 24					.word	CommandLoad              ; $87 load
>2603	36 24					.word	CommandSave              ; $88 save
>2605	46 23					.word	CommandList              ; $89 list
>2607	7a 24					.word	Command_New              ; $8a new
>2609	88 24					.word	Command_Run              ; $8b run
>260b	ed 1a					.word	CommandRead              ; $8c read
>260d	21 1b					.word	CommandRestore           ; $8d restore
>260f	41 1e					.word	CommandEnd               ; $8e end
>2611	3c 1e					.word	CommandStop              ; $8f stop
>2613	44 1e					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.2615					BinaryProcess:
.2615	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.2617	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.2619	0a		asl a				asl 	a
.261a	30 0e		bmi $262a			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.261c	18		clc				clc 								; return CC for integer
.261d	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.261f	f0 08		beq $2629			beq 	_BPExit 					; if both integer then return with CC.
.2621	20 2f 26	jsr $262f			jsr 	BPMakeBothFloat 			; make both float
.2624	a9 01		lda #$01			lda 	#$01 						; set result type to float
.2626	95 40		sta $40,x			sta 	esType,x
.2628	38		sec				sec 								; and return with carry set.
.2629					_BPExit:
.2629	60		rts				rts
.262a					_BPStringType:
.262a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.262c	20 e0 14	jsr $14e0		jsr	errorHandler
.262f					BPMakeBothFloat:
.262f	e8		inx				inx
.2630	20 34 26	jsr $2634			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2633	ca		dex				dex
.2634					BPMakeFloat:
.2634	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.2636	4a		lsr a				lsr 	a
.2637	b0 07		bcs $2640			bcs 	_BPIsFloat 					; already a float if set.
.2639	8a		txa				txa
.263a	a2 1a		ldx #$1a		ldx	#26
.263c	20 06 19	jsr $1906		jsr	floatingpointHandler
.263f	aa		tax				tax
.2640					_BPIsFloat:
.2640	60		rts				rts
.2641					AddHandler:
.2641	20 12 28	jsr $2812			jsr 	DereferenceTwo 				; dereference top two on stack.
.2644	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.2646	35 41		and $41,x			and 	esType+1,x
.2648	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.264a	d0 10		bne $265c			bne 	_AHStringConcat				; concatenate strings.
.264c	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.264f	b0 03		bcs $2654			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2651	4c 67 2f	jmp $2f67			jmp 	MInt32Add 							; else do it as integer.
.2654					_IsFPOperation:
.2654	8a		txa				txa 								; call the relevant fp routine
.2655	a2 02		ldx #$02		ldx	#2
.2657	20 06 19	jsr $1906		jsr	floatingpointHandler
.265a	aa		tax				tax
.265b	60		rts				rts
.265c					_AHStringConcat:
.265c	8a		txa				txa 								; handled by the string module.
.265d	a2 04		ldx #$04		ldx	#4
.265f	20 27 34	jsr $3427		jsr	stringHandler
.2662	aa		tax				tax
.2663	60		rts				rts
.2664					SubHandler:
.2664	20 12 28	jsr $2812			jsr 	DereferenceTwo
.2667	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.266a	b0 03		bcs $266f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.266c	4c 81 2f	jmp $2f81			jmp 	MInt32Sub 							; else do it as integer.
.266f					_IsFPOperation:
.266f	8a		txa				txa 								; call the relevant fp routine
.2670	a2 10		ldx #$10		ldx	#16
.2672	20 06 19	jsr $1906		jsr	floatingpointHandler
.2675	aa		tax				tax
.2676	60		rts				rts
.2677					MulHandler:
.2677	20 12 28	jsr $2812			jsr 	DereferenceTwo
.267a	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.267d	b0 03		bcs $2682			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.267f	4c 9b 2f	jmp $2f9b			jmp 	MInt32Multiply 							; else do it as integer.
.2682					_IsFPOperation:
.2682	8a		txa				txa 								; call the relevant fp routine
.2683	a2 0a		ldx #$0a		ldx	#10
.2685	20 06 19	jsr $1906		jsr	floatingpointHandler
.2688	aa		tax				tax
.2689	60		rts				rts
.268a					DivHandler:
.268a	20 12 28	jsr $2812			jsr 	DereferenceTwo
.268d	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.2690	b0 03		bcs $2695			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2692	4c 58 2e	jmp $2e58			jmp 	MInt32SDivide 							; else do it as integer.
.2695					_IsFPOperation:
.2695	8a		txa				txa 								; call the relevant fp routine
.2696	a2 06		ldx #$06		ldx	#6
.2698	20 06 19	jsr $1906		jsr	floatingpointHandler
.269b	aa		tax				tax
.269c	60		rts				rts
.269d					ModHandler:
.269d	20 12 28	jsr $2812			jsr 	DereferenceTwo
.26a0	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.26a3	b0 03		bcs $26a8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26a5	4c d6 2e	jmp $2ed6			jmp 	MInt32Modulus 							; else do it as integer.
.26a8					_IsFPOperation:
.26a8	8a		txa				txa 								; call the relevant fp routine
.26a9	a2 08		ldx #$08		ldx	#8
.26ab	20 06 19	jsr $1906		jsr	floatingpointHandler
.26ae	aa		tax				tax
.26af	60		rts				rts
.26b0					XorHandler:
.26b0	20 12 28	jsr $2812			jsr 	DereferenceTwo
.26b3	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.26b6	b0 03		bcs $26bb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26b8	4c 0a 2e	jmp $2e0a			jmp 	MInt32Xor 							; else do it as integer.
.26bb					_IsFPOperation:
.26bb	8a		txa				txa 								; call the relevant fp routine
.26bc	a2 08		ldx #$08		ldx	#8
.26be	20 06 19	jsr $1906		jsr	floatingpointHandler
.26c1	aa		tax				tax
.26c2	60		rts				rts
.26c3					OrHandler:
.26c3	20 12 28	jsr $2812			jsr 	DereferenceTwo
.26c6	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.26c9	b0 03		bcs $26ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26cb	4c f1 2d	jmp $2df1			jmp 	MInt32Or 							; else do it as integer.
.26ce					_IsFPOperation:
.26ce	8a		txa				txa 								; call the relevant fp routine
.26cf	a2 08		ldx #$08		ldx	#8
.26d1	20 06 19	jsr $1906		jsr	floatingpointHandler
.26d4	aa		tax				tax
.26d5	60		rts				rts
.26d6					AndHandler:
.26d6	20 12 28	jsr $2812			jsr 	DereferenceTwo
.26d9	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.26dc	b0 03		bcs $26e1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26de	4c d8 2d	jmp $2dd8			jmp 	MInt32And 							; else do it as integer.
.26e1					_IsFPOperation:
.26e1	8a		txa				txa 								; call the relevant fp routine
.26e2	a2 08		ldx #$08		ldx	#8
.26e4	20 06 19	jsr $1906		jsr	floatingpointHandler
.26e7	aa		tax				tax
.26e8	60		rts				rts
.26e9					ShlHandler:
.26e9	20 12 28	jsr $2812			jsr 	DereferenceTwo
.26ec	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.26ef	b0 03		bcs $26f4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.26f1	4c 6a 27	jmp $276a			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.26f4					_IsFPOperation:
.26f4	8a		txa				txa 								; call the relevant fp routine
.26f5	a2 08		ldx #$08		ldx	#8
.26f7	20 06 19	jsr $1906		jsr	floatingpointHandler
.26fa	aa		tax				tax
.26fb	60		rts				rts
.26fc					ShrHandler:
.26fc	20 12 28	jsr $2812			jsr 	DereferenceTwo
.26ff	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.2702	b0 03		bcs $2707			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2704	4c 6d 27	jmp $276d			jmp 	MInt32ShiftRightX 							; else do it as integer.
.2707					_IsFPOperation:
.2707	8a		txa				txa 								; call the relevant fp routine
.2708	a2 08		ldx #$08		ldx	#8
.270a	20 06 19	jsr $1906		jsr	floatingpointHandler
.270d	aa		tax				tax
.270e	60		rts				rts
.270f					WordRefHandler:
.270f	20 12 28	jsr $2812			jsr 	DereferenceTwo
.2712	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.2715	b0 03		bcs $271a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2717	4c 5c 27	jmp $275c			jmp 	MInt32WordIndirect 							; else do it as integer.
.271a					_IsFPOperation:
.271a	8a		txa				txa 								; call the relevant fp routine
.271b	a2 08		ldx #$08		ldx	#8
.271d	20 06 19	jsr $1906		jsr	floatingpointHandler
.2720	aa		tax				tax
.2721	60		rts				rts
.2722					ByteRefHandler:
.2722	20 12 28	jsr $2812			jsr 	DereferenceTwo
.2725	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.2728	b0 03		bcs $272d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.272a	4c 60 27	jmp $2760			jmp 	MInt32ByteIndirect 							; else do it as integer.
.272d					_IsFPOperation:
.272d	8a		txa				txa 								; call the relevant fp routine
.272e	a2 08		ldx #$08		ldx	#8
.2730	20 06 19	jsr $1906		jsr	floatingpointHandler
.2733	aa		tax				tax
.2734	60		rts				rts
.2735					PowerHandler:
.2735	20 12 28	jsr $2812			jsr 	DereferenceTwo
.2738	20 15 26	jsr $2615			jsr 	BinaryProcess 				; check to see if either is float
.273b	b0 03		bcs $2740			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.273d	4c 48 27	jmp $2748			jmp 	PowerInteger 							; else do it as integer.
.2740					_IsFPOperation:
.2740	8a		txa				txa 								; call the relevant fp routine
.2741	a2 16		ldx #$16		ldx	#22
.2743	20 06 19	jsr $1906		jsr	floatingpointHandler
.2746	aa		tax				tax
.2747	60		rts				rts
.2748					PowerInteger:
.2748	20 2f 26	jsr $262f			jsr 	BPMakeBothFloat				; make them float.
.274b	8a		txa				txa
.274c	a2 16		ldx #$16		ldx	#22
.274e	20 06 19	jsr $1906		jsr	floatingpointHandler
.2751	a2 12		ldx #$12		ldx	#18
.2753	20 06 19	jsr $1906		jsr	floatingpointHandler
.2756	aa		tax				tax
.2757	a9 00		lda #$00			lda 	#0 							; make type integer
.2759	95 40		sta $40,x			sta 	esType,x
.275b	60		rts				rts
.275c					Mint32WordIndirect:
.275c	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.275e	d0 02		bne $2762			bne 	Min32Indirect
.2760					Mint32ByteIndirect:
.2760	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2762					Min32Indirect:
.2762	48		pha				pha 								; save the indirection
.2763	20 67 2f	jsr $2f67			jsr 	MInt32Add 					; add a!b a?b
.2766	68		pla				pla 								; and set the type to reference.
.2767	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2769	60		rts				rts
.276a					Mint32ShiftLeftX:
.276a	18		clc				clc 								; CC shift left
.276b	90 01		bcc $276e			bcc 	Mint32Shift
.276d					Mint32ShiftRightX:
.276d	38		sec				sec 								; CS shift right
.276e					Mint32Shift:
.276e	08		php				php 								; save carry flag on stack.
.276f	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2771	15 59		ora $59,x			ora 	esInt2+1,x
.2773	15 61		ora $61,x			ora 	esInt3+1,x
.2775	d0 1e		bne $2795			bne 	_MShiftZero
.2777	b5 49		lda $49,x			lda 	esInt0+1,x
.2779	c9 20		cmp #$20			cmp 	#32
.277b	b0 18		bcs $2795			bcs 	_MShiftZero
.277d					_MShiftLoop:
.277d	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.277f	f0 12		beq $2793			beq 	_MShiftExit
.2781	d6 49		dec $49,x			dec 	esInt0+1,x
.2783	28		plp				plp 								; restore and save carry
.2784	08		php				php
.2785	90 06		bcc $278d			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2787	20 a1 30	jsr $30a1			jsr 	Mint32ShiftRight
.278a	4c 7d 27	jmp $277d			jmp 	_MShiftLoop
.278d					_MShiftLeft:
.278d	20 98 30	jsr $3098			jsr 	Mint32ShiftLeft
.2790	4c 7d 27	jmp $277d			jmp 	_MShiftLoop
.2793					_MShiftExit:
.2793	28		plp				plp	 								; throw saved carry and exit
.2794	60		rts				rts
.2795					_MShiftZero:
.2795	4c 83 30	jmp $3083			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2798					PerformComparison:
.2798	20 12 28	jsr $2812			jsr 	DereferenceTwo 				; make both values.
.279b	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.279d	35 41		and $41,x			and 	esType+1,x
.279f	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.27a0	30 1d		bmi $27bf			bmi 	_PCIsString
.27a2	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.27a4	15 41		ora $41,x			ora 	esType+1,x
.27a6	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.27a7	30 22		bmi $27cb			bmi 	_PCError
.27a9	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.27ab	f0 0f		beq $27bc			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.27ad	20 2f 26	jsr $262f			jsr 	BPMakeBothFloat 			; make both float
.27b0	8a		txa				txa
.27b1	a2 04		ldx #$04		ldx	#4
.27b3	20 06 19	jsr $1906		jsr	floatingpointHandler
.27b6	86 32		stx $32				stx 	tempShort 					; save result
.27b8	aa		tax				tax
.27b9	a5 32		lda $32				lda 	tempShort
.27bb	60		rts				rts
.27bc					_PCIsInteger:
.27bc	4c 23 2e	jmp $2e23			jmp 	MInt32Compare
.27bf					_PCIsString:
.27bf	8a		txa				txa 								; A has SP
.27c0	a2 08		ldx #$08		ldx	#8
.27c2	20 27 34	jsr $3427		jsr	stringHandler
.27c5	86 32		stx $32				stx 	tempShort 					; save result
.27c7	aa		tax				tax 								; put SP back in X and get result.
.27c8	a5 32		lda $32				lda 	tempShort
.27ca	60		rts				rts
.27cb					_PCError:
.27cb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.27cd	20 e0 14	jsr $14e0		jsr	errorHandler
.27d0					CompareEquals:
.27d0	20 98 27	jsr $2798			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.27d3	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.27d5	f0 35		beq $280c			beq  	CompareTrue
.27d7	4c 0f 28	jmp $280f			jmp 	CompareFalse
.27da					CompareLess:
.27da	20 98 27	jsr $2798			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.27dd	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.27df	f0 2b		beq $280c			beq  	CompareTrue
.27e1	4c 0f 28	jmp $280f			jmp 	CompareFalse
.27e4					CompareGreater:
.27e4	20 98 27	jsr $2798			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.27e7	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.27e9	f0 21		beq $280c			beq  	CompareTrue
.27eb	4c 0f 28	jmp $280f			jmp 	CompareFalse
.27ee					CompareNotEquals:
.27ee	20 98 27	jsr $2798			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.27f1	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.27f3	d0 17		bne $280c			bne  	CompareTrue
.27f5	4c 0f 28	jmp $280f			jmp 	CompareFalse
.27f8					CompareGreaterEq:
.27f8	20 98 27	jsr $2798			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.27fb	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.27fd	d0 0d		bne $280c			bne  	CompareTrue
.27ff	4c 0f 28	jmp $280f			jmp 	CompareFalse
.2802					CompareLessEq:
.2802	20 98 27	jsr $2798			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2805	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.2807	d0 03		bne $280c			bne  	CompareTrue
.2809	4c 0f 28	jmp $280f			jmp 	CompareFalse
.280c					CompareTrue:
.280c	4c 7f 30	jmp $307f			jmp 	MInt32True
.280f					CompareFalse:
.280f	4c 83 30	jmp $3083			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.2812					DereferenceTwo:
.2812	e8		inx				inx
.2813	20 17 28	jsr $2817			jsr 	DereferenceOne
.2816	ca		dex				dex
.2817					DereferenceOne:
.2817	b5 40		lda $40,x			lda 	esType,x
.2819	10 3d		bpl $2858			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.281b	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.281c	b0 3b		bcs $2859			bcs 	_DRFloatDeReference
.281e	98		tya				tya
.281f	48		pha				pha
.2820	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.2822	85 2a		sta $2a				sta 	temp0
.2824	b5 50		lda $50,x			lda 	esInt1,x
.2826	85 2b		sta $2b				sta 	temp0+1
.2828	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.282a	95 50		sta $50,x			sta 	esInt1,x
.282c	95 58		sta $58,x			sta 	esInt2,x
.282e	95 60		sta $60,x			sta 	esInt3,x
.2830	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.2832	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2834	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2835	30 0d		bmi $2844			bmi 	_DeRefString 				; string, 2 bytes only
.2837	d0 11		bne $284a			bne 	_DeRefByte 					; byte 1 byte only
.2839					_DeRefLong:
.2839	a0 03		ldy #$03			ldy 	#3
.283b	b1 2a		lda ($2a),y			lda 	(temp0),y
.283d	95 60		sta $60,x			sta 	esInt3,x
.283f	88		dey				dey
.2840	b1 2a		lda ($2a),y			lda 	(temp0),y
.2842	95 58		sta $58,x			sta 	esInt2,x
.2844					_DeRefString:
.2844	a0 01		ldy #$01			ldy 	#1
.2846	b1 2a		lda ($2a),y			lda 	(temp0),y
.2848	95 50		sta $50,x			sta 	esInt1,x
.284a					_DeRefByte:
.284a	a0 00		ldy #$00			ldy 	#0
.284c	b1 2a		lda ($2a),y			lda 	(temp0),y
.284e	95 48		sta $48,x			sta 	esInt0,x
.2850	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.2852	29 40		and #$40			and 	#$40
.2854	95 40		sta $40,x			sta 	esType,x
.2856	68		pla				pla
.2857	a8		tay				tay
.2858					_DRNotReference
.2858	60		rts				rts
.2859					_DRFloatDereference:
.2859	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 					; address to deref in temp0
.285c	8a		txa				txa
.285d	a2 1c		ldx #$1c		ldx	#28
.285f	20 06 19	jsr $1906		jsr	floatingpointHandler
.2862	aa		tax				tax
.2863	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2865	95 40		sta $40,x			sta 	esType,x
.2867	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2868					EvaluateLevel:
.2868	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.286a	b0 1e		bcs $288a			bcs 	_ELStack
.286c	48		pha				pha 								; save precedence level.
.286d	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.286f	95 48		sta $48,x			sta 	esInt0,x
.2871	95 50		sta $50,x			sta 	esInt1,x
.2873	95 58		sta $58,x			sta 	esInt2,x
.2875	95 60		sta $60,x			sta 	esInt3,x
.2877	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.2879	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.287b	30 26		bmi $28a3			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.287d	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.287e	30 0f		bmi $288f			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2880	8a		txa				txa 								; stack level in X
.2881	a2 00		ldx #$00		ldx	#0
.2883	20 34 3f	jsr $3f34		jsr	variableHandler
.2886	aa		tax				tax
.2887	4c cc 28	jmp $28cc			jmp		_ELHasTerm
.288a					_ELStack:
.288a	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.288c	20 e0 14	jsr $14e0		jsr	errorHandler
.288f					_ELIsConstant:
.288f	4a		lsr a				lsr 	a 							; get the value back
.2890	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2892	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.2894					_ELCheckNext:
.2894	c8		iny				iny 								; look at next
.2895	b1 28		lda ($28),y			lda 	(codePtr),y
.2897	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2899	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.289b	b0 2f		bcs $28cc			bcs 	_ELHasTerm 					; done getting the constant.
.289d	20 65 29	jsr $2965			jsr 	ELShiftByteIn 				; shift byte into position.
.28a0	4c 94 28	jmp $2894			jmp 	_ELCheckNext
.28a3					_ELIsToken:
.28a3	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.28a5	f0 0f		beq $28b6			beq 	_ELIsString
.28a7	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.28a9	d0 5f		bne $290a			bne 	_ELCheckUnary
.28ab	8a		txa				txa 								; put X into A
.28ac	c8		iny				iny 								; skip over the float marker
.28ad	a2 18		ldx #$18		ldx	#24
.28af	20 06 19	jsr $1906		jsr	floatingpointHandler
.28b2	aa		tax				tax 								; restore X
.28b3	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.28b6					_ELIsString:
.28b6	98		tya				tya 								; address of string is codePtr+y+1
.28b7	38		sec				sec
.28b8	65 28		adc $28				adc 	codePtr
.28ba	95 48		sta $48,x			sta 	esInt0,x
.28bc	a5 29		lda $29				lda 	codePtr+1
.28be	69 00		adc #$00			adc 	#0
.28c0	95 50		sta $50,x			sta 	esInt1,x
.28c2	a9 40		lda #$40			lda 	#$40 						; set type to string value
.28c4	95 40		sta $40,x			sta 	esType,x
.28c6	c8		iny				iny 								; skip over string.
.28c7	98		tya				tya
.28c8	38		sec				sec									; +1 for the length itself.
.28c9	71 28		adc ($28),y			adc 	(codePtr),y
.28cb	a8		tay				tay 								; and fall through to term loop code.
.28cc					_ELHasTerm:
.28cc	b1 28		lda ($28),y			lda 	(codePtr),y
.28ce	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.28d0	90 04		bcc $28d6			bcc 	_ELPopExit
.28d2	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.28d4	90 02		bcc $28d8			bcc 	_ELHasBinaryTerm
.28d6					_ELPopExit:
.28d6	68		pla				pla
.28d7					_ELExit:
.28d7	60		rts				rts
.28d8					_ELHasBinaryTerm:
.28d8	84 32		sty $32				sty 	tempShort 					; save position
.28da	a8		tay				tay 								; use token as an index and get the precedence.
.28db	b9 0d 29	lda $290d,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.28de	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.28e0	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.28e2	68		pla				pla 								; restore current level.
.28e3	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.28e5	b0 f0		bcs $28d7			bcs 	_ELExit
.28e7	48		pha				pha 								; save current level back on the stack.
.28e8	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.28ea	48		pha				pha
.28eb	c8		iny				iny
.28ec	e8		inx				inx 								; calculate the RHS at the operator precedence.
.28ed	a5 32		lda $32				lda 	tempShort
.28ef	20 68 28	jsr $2868			jsr 	EvaluateLevel
.28f2	ca		dex				dex
.28f3	68		pla				pla 								; get the operator back out.
.28f4					_ELExecuteA:
.28f4	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.28f6	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.28f7	aa		tax				tax
.28f8	bd 2f 25	lda $252f,x			lda 	Group0Vectors,x
.28fb	85 2a		sta $2a				sta 	temp0
.28fd	bd 30 25	lda $2530,x			lda 	Group0Vectors+1,x
.2900	85 2b		sta $2b				sta 	temp0+1
.2902	a6 32		ldx $32				ldx 	tempShort
.2904	20 51 29	jsr $2951			jsr 	_ELCallTemp0
.2907	4c cc 28	jmp $28cc			jmp 	_ELHasTerm 					; and loop back round.
.290a					_ELCheckUnary:
.290a	c8		iny				iny 								; skip over token.
.290b	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.290d	f0 19		beq $2928			beq 	_ELMinus
.290f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2911	f0 2c		beq $293f			beq 	_ELIndirect
.2913	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2915	f0 28		beq $293f			beq 	_ELIndirect
.2917	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2919	f0 39		beq $2954			beq 	_ELExtension
.291b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.291d	90 04		bcc $2923			bcc 	_ELUSyntax
.291f	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2921	90 d1		bcc $28f4			bcc 	_ELExecuteA 				; if so do that token.
.2923					_ELUSyntax:
.2923	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2925	20 e0 14	jsr $14e0		jsr	errorHandler
.2928					_ELMinus:
.2928	20 ba 29	jsr $29ba			jsr 	EvaluateNumericTerm 		; get a number to negate.
.292b	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.292d	f0 0a		beq $2939			beq 	_ELMinusInteger
.292f	8a		txa				txa
.2930	a2 0c		ldx #$0c		ldx	#12
.2932	20 06 19	jsr $1906		jsr	floatingpointHandler
.2935	aa		tax				tax
.2936	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.2939					_ELMinusInteger:
.2939	20 3d 30	jsr $303d			jsr 	MInt32Negate 				; do int negate
.293c	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.293f					_ELIndirect:
.293f	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2940	20 c3 29	jsr $29c3			jsr 	EvaluateIntegerTerm 		; integer address
.2943	68		pla				pla
.2944	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2946	f0 02		beq $294a			beq 	_ELHaveModifier
.2948	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.294a					_ELHaveModifier:
.294a	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.294c	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.294e	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.2951					_ELCallTemp0:
.2951	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2954					_ELExtension:
.2954	8a		txa				txa 								; stack pos in A
.2955	20 f7 17	jsr $17f7		jsr	extensionHandler
.2958	aa		tax				tax 								; restore stack
.2959	4c cc 28	jmp $28cc			jmp 	_ELHasTerm
.295c					UnaryParenthesis:
.295c	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.295e	20 68 28	jsr $2868			jsr 	EvaluateLevel
.2961	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; check for )
.2964	60		rts				rts
.2965					ELShiftByteIn:
.2965	48		pha				pha 								; save bits to shift in.
.2966	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.2968	48		pha				pha
.2969	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.296b	95 60		sta $60,x			sta 	esInt3,x
.296d	b5 50		lda $50,x			lda 	esInt1,x
.296f	95 58		sta $58,x			sta 	esInt2,x
.2971	b5 48		lda $48,x			lda 	esInt0,x
.2973	95 50		sta $50,x			sta 	esInt1,x
.2975	a9 00		lda #$00			lda 	#0
.2977	95 48		sta $48,x			sta 	esInt0,x
.2979	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.297a	29 03		and #$03			and 	#3 							; only want lower 2 bits
.297c	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.297e					_ELShiftLoop:
.297e	4a		lsr a				lsr 	a
.297f	76 60		ror $60,x			ror 	esInt3,x
.2981	76 58		ror $58,x			ror 	esInt2,x
.2983	76 50		ror $50,x			ror 	esInt1,x
.2985	76 48		ror $48,x			ror 	esInt0,x
.2987	c9 01		cmp #$01			cmp 	#1
.2989	d0 f3		bne $297e			bne 	_ELShiftLoop
.298b	68		pla				pla 								; get original 6 bit value and OR in.
.298c	29 3f		and #$3f			and 	#$3F
.298e	15 48		ora $48,x			ora 	esInt0,x
.2990	95 48		sta $48,x			sta 	esInt0,x
.2992	60		rts				rts
.2993					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2993	01					.byte	$01			; $86 and
>2994	01					.byte	$01			; $87 or
>2995	01					.byte	$01			; $88 xor
>2996	02					.byte	$02			; $89 >=
>2997	02					.byte	$02			; $8a <=
>2998	02					.byte	$02			; $8b >
>2999	02					.byte	$02			; $8c <
>299a	02					.byte	$02			; $8d =
>299b	02					.byte	$02			; $8e <>
>299c	03					.byte	$03			; $8f +
>299d	03					.byte	$03			; $90 -
>299e	04					.byte	$04			; $91 >>
>299f	04					.byte	$04			; $92 <<
>29a0	04					.byte	$04			; $93 *
>29a1	04					.byte	$04			; $94 /
>29a2	04					.byte	$04			; $95 mod
>29a3	05					.byte	$05			; $96 ^
>29a4	06					.byte	$06			; $97 !
>29a5	06					.byte	$06			; $98 ?
>29a6	82					.byte	$82			; $99 repeat
>29a7	82					.byte	$82			; $9a while
>29a8	82					.byte	$82			; $9b for
>29a9	82					.byte	$82			; $9c if
>29aa	82					.byte	$82			; $9d defproc
>29ab	80					.byte	$80			; $9e until
>29ac	80					.byte	$80			; $9f wend
>29ad	80					.byte	$80			; $a0 next
>29ae	80					.byte	$80			; $a1 then
>29af	80					.byte	$80			; $a2 endif
>29b0	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.29b1					EvaluateTerm:
.29b1	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.29b3	20 68 28	jsr $2868			jsr 	EvaluateLevel
.29b6	20 17 28	jsr $2817			jsr 	DereferenceOne
.29b9	60		rts				rts
.29ba					EvaluateNumericTerm:
.29ba	20 b1 29	jsr $29b1			jsr 	EvaluateTerm
.29bd	b5 40		lda $40,x			lda 	esType,x
.29bf	0a		asl a				asl 	a 							; see if it's a string.
.29c0	30 09		bmi $29cb			bmi 	ENTType
.29c2	60		rts				rts
.29c3					EvaluateIntegerTerm:
.29c3	20 b1 29	jsr $29b1			jsr 	EvaluateTerm
.29c6	b5 40		lda $40,x			lda 	esType,x
.29c8	d0 01		bne $29cb			bne 	ENTType
.29ca	60		rts				rts
.29cb					ENTType:
.29cb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.29cd	20 e0 14	jsr $14e0		jsr	errorHandler
.29d0					EvaluateRoot:
.29d0	a2 00		ldx #$00			ldx 	#0
.29d2					Evaluate:
.29d2	a9 00		lda #$00			lda 	#0
.29d4	20 68 28	jsr $2868			jsr 	EvaluateLevel
.29d7	20 17 28	jsr $2817			jsr 	DereferenceOne
.29da	60		rts				rts
.29db					EvaluateNumeric:
.29db	20 d2 29	jsr $29d2			jsr 	Evaluate
.29de	b5 40		lda $40,x			lda 	esType,x
.29e0	0a		asl a				asl 	a 							; see if it's a string.
.29e1	30 e8		bmi $29cb			bmi 	ENTType
.29e3	4a		lsr a				lsr 	a 							; shift float flag into carry.
.29e4	4a		lsr a				lsr 	a
.29e5	60		rts				rts
.29e6					EvaluateString:
.29e6	20 d2 29	jsr $29d2			jsr 	Evaluate
.29e9	b5 40		lda $40,x			lda 	esType,x
.29eb	0a		asl a				asl 	a 							; see if it's a string.
.29ec	10 dd		bpl $29cb			bpl 	ENTType
.29ee	60		rts				rts
.29ef					EvaluateRootInteger:
.29ef	a2 00		ldx #$00			ldx 	#0
.29f1					EvaluateInteger:
.29f1	20 d2 29	jsr $29d2			jsr 	Evaluate
.29f4	b5 40		lda $40,x			lda 	esType,x
.29f6	d0 d3		bne $29cb			bne 	ENTType
.29f8	60		rts				rts
.29f9					EvaluateSmallInteger:
.29f9	20 f1 29	jsr $29f1			jsr 	EvaluateInteger
.29fc	b5 50		lda $50,x			lda 	esInt1,x
.29fe	15 58		ora $58,x			ora 	esInt2,x
.2a00	15 60		ora $60,x			ora 	esInt3,x
.2a02	d0 03		bne $2a07			bne 	_ESIValue
.2a04	b5 48		lda $48,x			lda 	esInt0,x
.2a06	60		rts				rts
.2a07					_ESIValue:
.2a07	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a09	20 e0 14	jsr $14e0		jsr	errorHandler
.2a0c					LinkEvaluate:
.2a0c	aa		tax				tax
.2a0d	20 d2 29	jsr $29d2			jsr 	Evaluate
.2a10	8a		txa				txa
.2a11	60		rts				rts
.2a12					LinkEvaluateTerm:
.2a12	aa		tax				tax
.2a13	20 b1 29	jsr $29b1			jsr 	EvaluateTerm
.2a16	8a		txa				txa
.2a17	60		rts				rts
.2a18					LinkEvaluateInteger:
.2a18	aa		tax				tax
.2a19	20 f1 29	jsr $29f1			jsr 	EvaluateInteger
.2a1c	8a		txa				txa
.2a1d	60		rts				rts
.2a1e					LinkEvaluateSmallInt:
.2a1e	aa		tax				tax
.2a1f	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger
.2a22	8a		txa				txa
.2a23	60		rts				rts
.2a24					EvaluateReference:
.2a24	ad a4 29	lda $29a4			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2a27	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2a28	e9 01		sbc #$01			sbc 	#1
.2a2a	20 68 28	jsr $2868			jsr 	EvaluateLevel
.2a2d	b5 40		lda $40,x			lda 	esType,x
.2a2f	10 01		bpl $2a32			bpl 	_ERFail
.2a31	60		rts				rts
.2a32					_ERFail:
.2a32	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2a34	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2a37					Event_Str:
.2a37	20 db 29	jsr $29db			jsr 	EvaluateNumeric 			; get a number.
.2a3a	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.2a3c	d0 13		bne $2a51			bne 	_ESFloat
.2a3e	20 94 2a	jsr $2a94			jsr 	ConvertGetBase 				; get base, or default.
.2a41	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2a43	85 2a		sta $2a				sta 	temp0
.2a45	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2a47	85 2b		sta $2b				sta 	1+(temp0)
.2a49	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2a4b	20 d9 2f	jsr $2fd9			jsr 	MInt32ToString 				; convert to string.
.2a4e	4c 5e 2a	jmp $2a5e			jmp 	_ESCloneExit 				; clone and exit.
.2a51					_ESFloat:
.2a51	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; check closing )
.2a54	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2a57	8a		txa				txa
.2a58	a2 14		ldx #$14		ldx	#20
.2a5a	20 06 19	jsr $1906		jsr	floatingpointHandler
.2a5d	aa		tax				tax
.2a5e					_ESCloneExit:
.2a5e	8a		txa				txa
.2a5f	a2 02		ldx #$02		ldx	#2
.2a61	20 27 34	jsr $3427		jsr	stringHandler
.2a64	aa		tax				tax
.2a65	60		rts				rts
.2a66					UnaryVal:
.2a66	38		sec				sec 								; Carry set to return value
.2a67	b0 01		bcs $2a6a			bcs 	ValueMain
.2a69					UnaryIsVal:
.2a69	18		clc				clc									; Carry clear to return legitimacy
.2a6a					ValueMain:
.2a6a	08		php				php 								; save results (CS is value, CC is validation)
.2a6b	20 e6 29	jsr $29e6			jsr 	EvaluateString
.2a6e	20 94 2a	jsr $2a94			jsr 	ConvertGetBase 				; get base, if any.
.2a71	98		tya				tya
.2a72	48		pha				pha
.2a73	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2a76	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2a78	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2a7a	20 f1 2e	jsr $2ef1			jsr 	MInt32FromString 			; convert it back from a string.
.2a7d	b0 0c		bcs $2a8b			bcs 	_VMSuccess 					; successfully converted.
.2a7f	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.2a81	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2a83	f0 00		beq $2a85			beq 	_VMFailed 	 				; so we failed.
.2a85					_VMFailed:
.2a85	68		pla				pla
.2a86	a8		tay				tay
.2a87	28		plp				plp
.2a88	4c 83 30	jmp $3083			jmp 	MInt32False 				; return 0 whatever.
.2a8b					_VMSuccess:
.2a8b	68		pla				pla
.2a8c	a8		tay				tay
.2a8d	28		plp				plp 								; if CS the it was val() so we want the value.
.2a8e	b0 03		bcs $2a93			bcs 	_VMExit
.2a90	4c 7f 30	jmp $307f			jmp 	MInt32True 					; otherwise return true as successful.
.2a93					_VMExit:
.2a93	60		rts				rts
.2a94					ConvertGetBase:
.2a94	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2a96	95 49		sta $49,x			sta 	esInt0+1,x
.2a98	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2a9a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2a9c	d0 0e		bne $2aac			bne 	_CGBDone 					; not found, should be )
.2a9e	e8		inx				inx 								; next level
.2a9f	c8		iny				iny 								; skip comma.
.2aa0	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger		; evaluate the base.
.2aa3	ca		dex				dex
.2aa4	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2aa6	90 08		bcc $2ab0			bcc 	_CGBValue 					; (it should work as high as 37)
.2aa8	c9 11		cmp #$11			cmp 	#17
.2aaa	b0 04		bcs $2ab0			bcs 	_CGBValue
.2aac					_CGBDone:
.2aac	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2aaf	60		rts				rts
.2ab0					_CGBValue:
.2ab0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2ab2	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2ab5					EventFunction:
.2ab5	20 24 2a	jsr $2a24			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2ab8	b5 40		lda $40,x			lda 	esType,x
.2aba	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2abc	d0 5b		bne $2b19			bne 	_EFType
.2abe	20 03 31	jsr $3103			jsr 	CheckComma
.2ac1	e8		inx				inx
.2ac2	20 f1 29	jsr $29f1			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2ac5	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; finish off with the right bracket
.2ac8	ca		dex				dex
.2ac9	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2acb	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2acd	15 58		ora $58,x			ora 	esInt2,x
.2acf	15 60		ora $60,x			ora 	esInt3,x
.2ad1	d0 41		bne $2b14			bne 	_EFValue
.2ad3	98		tya				tya
.2ad4	48		pha				pha
.2ad5	8a		txa				txa
.2ad6	48		pha				pha
.2ad7	a2 1c		ldx #$1c		ldx	#28
.2ad9	20 bf 14	jsr $14bf		jsr	deviceHandler
.2adc	84 2d		sty $2d				sty 	temp1+1
.2ade	85 2c		sta $2c				sta 	temp1
.2ae0	68		pla				pla
.2ae1	aa		tax				tax
.2ae2	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2ae5	a0 03		ldy #$03			ldy 	#3							; if -ve
.2ae7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ae9	30 23		bmi $2b0e			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2aeb	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2aed	b1 2a		lda ($2a),y			lda 	(temp0),y
.2aef	c8		iny				iny
.2af0	11 2a		ora ($2a),y			ora 	(temp0),y
.2af2	f0 17		beq $2b0b			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2af4	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2af6	38		sec				sec
.2af7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2af9	e5 2c		sbc $2c				sbc 	temp1
.2afb	c8		iny				iny
.2afc	b1 2a		lda ($2a),y			lda 	(temp0),y
.2afe	e5 2d		sbc $2d				sbc 	temp1+1
.2b00	10 0c		bpl $2b0e			bpl 	_EFFail 					; if trigger >= timer then return False
.2b02	20 1e 2b	jsr $2b1e			jsr 	SetEventTimer 				; reset the timer for next time.
.2b05	20 7f 30	jsr $307f			jsr	 	MInt32True 					; and treutn true as fired.
.2b08	68		pla				pla
.2b09	a8		tay				tay
.2b0a	60		rts				rts
.2b0b					_EFInitialise:
.2b0b	20 1e 2b	jsr $2b1e			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2b0e					_EFFail:
.2b0e	68		pla				pla
.2b0f	a8		tay				tay
.2b10	20 83 30	jsr $3083			jsr 	MInt32False
.2b13	60		rts				rts
.2b14					_EFValue:
.2b14	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2b16	20 e0 14	jsr $14e0		jsr	errorHandler
.2b19					_EFType:
.2b19	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b1b	20 e0 14	jsr $14e0		jsr	errorHandler
.2b1e					SetEventTimer:
.2b1e	a0 00		ldy #$00			ldy 	#0
.2b20	18		clc				clc
.2b21	a5 2c		lda $2c				lda 	temp1
.2b23	75 49		adc $49,x			adc 	esInt0+1,x
.2b25	91 2a		sta ($2a),y			sta		(temp0),y
.2b27	c8		iny				iny
.2b28	a5 2d		lda $2d				lda 	temp1+1
.2b2a	75 51		adc $51,x			adc 	esInt1+1,x
.2b2c	91 2a		sta ($2a),y			sta		(temp0),y
.2b2e	88		dey				dey
.2b2f	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2b31	d0 04		bne $2b37			bne 	_SETExit 					; zero means initialise.....
.2b33	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2b35	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2b37					_SETExit:
.2b37	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2b38					UnaryLen:
.2b38	20 46 2b	jsr $2b46			jsr 	ULStart
.2b3b					ULFinish:
.2b3b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2b3d	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2b3f	20 92 30	jsr $3092			jsr 	MInt32Set8Bit 				; write it out.
.2b42	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2b45	60		rts				rts
.2b46	20 e6 29	jsr $29e6	ULStart:jsr 	EvaluateString
.2b49	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2b4b	85 2a		sta $2a				sta 	temp0
.2b4d	b5 50		lda $50,x			lda 	esInt1,x
.2b4f	85 2b		sta $2b				sta 	temp0+1
.2b51	84 32		sty $32				sty 	tempShort 					; get length
.2b53	a0 00		ldy #$00			ldy 	#0
.2b55	60		rts				rts
.2b56					UnaryAsc:
.2b56	20 46 2b	jsr $2b46			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2b59	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2b5b	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2b5c	c9 00		cmp #$00			cmp 	#0
.2b5e	d0 db		bne $2b3b			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2b60	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2b62	20 e0 14	jsr $14e0		jsr	errorHandler
.2b65					UnaryAbs:
.2b65	20 db 29	jsr $29db			jsr 	EvaluateNumeric 			; some numeric value
.2b68	b0 07		bcs $2b71			bcs 	_UAFloat 					; CS then float, so use that function
.2b6a	20 38 30	jsr $3038			jsr 	MInt32Absolute 				; int version
.2b6d	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2b70	60		rts				rts
.2b71					_UAFloat:
.2b71	8a		txa				txa 								; float version
.2b72	a2 00		ldx #$00		ldx	#0
.2b74	20 06 19	jsr $1906		jsr	floatingpointHandler
.2b77	aa		tax				tax
.2b78	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2b7b	60		rts				rts
.2b7c					UnarySgn:
.2b7c	20 db 29	jsr $29db			jsr 	EvaluateNumeric 			; same as above but sign of value
.2b7f	b0 07		bcs $2b88			bcs 	_USFloat
.2b81	20 70 30	jsr $3070			jsr 	MInt32Sign
.2b84	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2b87	60		rts				rts
.2b88					_USFloat:
.2b88	8a		txa				txa
.2b89	a2 0e		ldx #$0e		ldx	#14
.2b8b	20 06 19	jsr $1906		jsr	floatingpointHandler
.2b8e	aa		tax				tax
.2b8f	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2b92	60		rts				rts
.2b93					UnaryPeek:
.2b93	20 bf 2b	jsr $2bbf			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2b96	4c b3 2b	jmp $2bb3			jmp 	PDLByte0
.2b99					UnaryDeek:
.2b99	20 bf 2b	jsr $2bbf			jsr 	PDLCode
.2b9c	4c ad 2b	jmp $2bad			jmp 	PDLByte1
.2b9f					UnaryLeek:
.2b9f	20 bf 2b	jsr $2bbf			jsr 	PDLCode
.2ba2	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2ba4	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ba6	95 60		sta $60,x			sta 	esInt3,x
.2ba8	88		dey				dey
.2ba9	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bab	95 58		sta $58,x			sta 	esInt2,x
.2bad					PDLByte1:
.2bad	a0 01		ldy #$01			ldy 	#1
.2baf	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bb1	95 50		sta $50,x			sta 	esInt1,x
.2bb3					PDLByte0:
.2bb3	a0 00		ldy #$00			ldy 	#0
.2bb5	b1 2a		lda ($2a),y			lda 	(temp0),y
.2bb7	95 48		sta $48,x			sta 	esInt0,x
.2bb9	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2bbb	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; check right and return
.2bbe	60		rts				rts
.2bbf					PDLCode:
.2bbf	20 f1 29	jsr $29f1			jsr 	EvaluateInteger 			; some address
.2bc2	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2bc4	85 2a		sta $2a				sta 	temp0
.2bc6	b5 50		lda $50,x			lda 	esInt1,x
.2bc8	85 2b		sta $2b				sta 	temp0+1
.2bca	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2bcc	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2bce	95 58		sta $58,x			sta 	esInt2,x
.2bd0	95 60		sta $60,x			sta 	esInt3,x
.2bd2	84 32		sty $32				sty 	tempShort 					; save Y
.2bd4	60		rts				rts
.2bd5					Unary_Random:
.2bd5	20 b3 30	jsr $30b3			jsr 	MInt32Random 				; generate random number.
.2bd8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2bda	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2bdc	f0 08		beq $2be6			beq 	_URExit
.2bde	e8		inx				inx 								; load range 0..r-1 into +1
.2bdf	20 f1 29	jsr $29f1			jsr 	EvaluateInteger
.2be2	ca		dex				dex
.2be3	20 d6 2e	jsr $2ed6			jsr 	MInt32Modulus 				; calculate random % modulus
.2be6					_URExit:
.2be6	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; check right and return
.2be9	60		rts				rts
.2bea					Unary_Min:
.2bea	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2bec	d0 02		bne $2bf0			bne 	UnaryMBody
.2bee					Unary_Max:
.2bee	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2bf0					UnaryMBody:
.2bf0	48		pha				pha 								; save comparator on stack, shows min or max
.2bf1	20 d2 29	jsr $29d2			jsr 	Evaluate 					; get the first thing to check
.2bf4					_UnaryMLoop:
.2bf4	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2bf6	c8		iny				iny
.2bf7	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2bf9	f0 09		beq $2c04			beq 	_UnaryMExit
.2bfb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2bfd	f0 07		beq $2c06			beq 	_UnaryMCompare
.2bff	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2c01	20 e0 14	jsr $14e0		jsr	errorHandler
.2c04					_UnaryMExit:
.2c04	68		pla				pla 								; done so throw comparator and return.
.2c05	60		rts				rts
.2c06					_UnaryMCompare:
.2c06	e8		inx				inx 								; get the 2nd thing to evaluate
.2c07	20 d2 29	jsr $29d2			jsr 	Evaluate
.2c0a	ca		dex				dex
.2c0b	20 98 27	jsr $2798			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2c0e	85 32		sta $32				sta 	tempShort 					; save result
.2c10	68		pla				pla 								; get what we need
.2c11	48		pha				pha
.2c12	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2c14	d0 de		bne $2bf4			bne 	_UnaryMLoop 				; no, try another value.
.2c16	20 83 30	jsr $3083			jsr 	MInt32False 				; promote 2nd to 1st.
.2c19	20 67 2f	jsr $2f67			jsr 	MInt32Add
.2c1c	4c f4 2b	jmp $2bf4			jmp 	_UnaryMLoop
.2c1f					Unary_Page:
.2c1f	20 83 30	jsr $3083			jsr 	MInt32False 				; zero
.2c22	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2c25	95 48		sta $48,x			sta 	esInt0,x
.2c27	ad c9 0a	lda $0ac9			lda 	basePage+1
.2c2a	95 50		sta $50,x			sta 	esInt1,x
.2c2c	60		rts				rts
.2c2d					UnaryReference:
.2c2d	a9 0f		lda #$0f			lda 	#15
.2c2f	20 68 28	jsr $2868			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2c32	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2c34	10 05		bpl $2c3b			bpl 	UType
.2c36	a9 00		lda #$00			lda 	#0 							; make it an integer
.2c38	95 40		sta $40,x			sta 	esType,x
.2c3a	60		rts				rts
.2c3b					UType:
.2c3b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2c3d	20 e0 14	jsr $14e0		jsr	errorHandler
.2c40					UnaryHexMarker:
.2c40	4c c3 29	jmp $29c3			jmp 	EvaluateIntegerTerm
.2c43					UnaryComplement:
.2c43	20 c3 29	jsr $29c3			jsr 	EvaluateIntegerTerm
.2c46	20 57 30	jsr $3057			jsr 	MInt32Not
.2c49	60		rts				rts
.2c4a					UnaryIntToFloat:
.2c4a	20 db 29	jsr $29db			jsr 	EvaluateNumeric				; some number
.2c4d	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.2c4f	d0 0b		bne $2c5c			bne 	_UIFExit
.2c51	8a		txa				txa 								; convert and set type
.2c52	a2 1a		ldx #$1a		ldx	#26
.2c54	20 06 19	jsr $1906		jsr	floatingpointHandler
.2c57	aa		tax				tax
.2c58	a9 01		lda #$01			lda 	#1
.2c5a	95 40		sta $40,x			sta 	esType,x
.2c5c					_UIFExit:
.2c5c	60		rts				rts
.2c5d					UnaryFloatToInt:
.2c5d	20 db 29	jsr $29db			jsr 	EvaluateNumeric 			; the number
.2c60	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2c62	f0 0b		beq $2c6f			beq 	_UFIExit
.2c64	8a		txa				txa 								; convert to int
.2c65	a2 12		ldx #$12		ldx	#18
.2c67	20 06 19	jsr $1906		jsr	floatingpointHandler
.2c6a	aa		tax				tax
.2c6b	a9 00		lda #$00			lda 	#0 							; set type
.2c6d	95 40		sta $40,x			sta 	esType,x
.2c6f					_UFIExit:
.2c6f	60		rts				rts
.2c70					UnaryAlloc:
.2c70	e8		inx				inx 								; evaluate memory required
.2c71	20 f1 29	jsr $29f1			jsr 	EvaluateInteger
.2c74	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2c77	ca		dex				dex
.2c78	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2c7a	15 61		ora $61,x			ora 	esInt3+1,x
.2c7c	d0 1d		bne $2c9b			bne 	_UABadValue
.2c7e	20 83 30	jsr $3083			jsr 	MInt32False					; zero return.
.2c81	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2c83	95 50		sta $50,x			sta 	esInt1,x
.2c85	a5 35		lda $35				lda 	lowMemory
.2c87	95 48		sta $48,x			sta 	esInt0,x
.2c89	18		clc				clc 								; add alloc required.
.2c8a	75 49		adc $49,x			adc 	esInt0+1,x
.2c8c	85 35		sta $35				sta 	lowMemory
.2c8e	a5 36		lda $36				lda 	lowMemory+1
.2c90	75 51		adc $51,x			adc 	esInt1+1,x
.2c92	85 36		sta $36				sta 	lowMemory+1
.2c94	b0 05		bcs $2c9b			bcs		_UABadValue 				; overflow definitely bad.
.2c96	c5 34		cmp $34				cmp 	highMemory+1
.2c98	b0 01		bcs $2c9b			bcs 	_UABadValue 				; out of memory bad.
.2c9a	60		rts				rts
.2c9b					_UABadValue:
.2c9b	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.2c9d	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.2ca0					UnaryTimer:
.2ca0	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; no parameters
.2ca3	98		tya				tya
.2ca4	48		pha				pha
.2ca5	20 aa 30	jsr $30aa			jsr 	MInt32Zero 					; zero result
.2ca8	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2caa	a2 1c		ldx #$1c		ldx	#28
.2cac	20 bf 14	jsr $14bf		jsr	deviceHandler
.2caf	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2cb1	95 48		sta $48,x			sta 	esInt0,x
.2cb3	98		tya				tya
.2cb4	95 50		sta $50,x			sta 	esInt1,x
.2cb6	68		pla				pla
.2cb7	a8		tay				tay
.2cb8	60		rts				rts
.2cb9					UnaryInkey:
.2cb9	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2cbc	86 2a		stx $2a				stx 	temp0
.2cbe	a2 0a		ldx #$0a		ldx	#10
.2cc0	20 bf 14	jsr $14bf		jsr	deviceHandler
.2cc3	a6 2a		ldx $2a				ldx 	temp0
.2cc5	20 92 30	jsr $3092			jsr 	MInt32Set8Bit
.2cc8	60		rts				rts
.2cc9					UnaryGet:
.2cc9	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2ccc	86 2a		stx $2a				stx 	temp0
.2cce					_UGLoop:
.2cce	a2 00		ldx #$00		ldx	#0
.2cd0	20 bf 14	jsr $14bf		jsr	deviceHandler
.2cd3	a2 0a		ldx #$0a		ldx	#10
.2cd5	20 bf 14	jsr $14bf		jsr	deviceHandler
.2cd8	c9 00		cmp #$00			cmp 	#0
.2cda	f0 f2		beq $2cce			beq 	_UGLoop
.2cdc	a6 2a		ldx $2a				ldx 	temp0
.2cde	20 92 30	jsr $3092			jsr 	MInt32Set8Bit
.2ce1	60		rts				rts
.2ce2					UnaryGetString:
.2ce2	20 c9 2c	jsr $2cc9			jsr 	UnaryGet
.2ce5					UGSDoChr:
.2ce5	4c 36 2d	jmp $2d36			jmp 	ChrCode
.2ce8					UnaryInkeyString:
.2ce8	20 b9 2c	jsr $2cb9			jsr 	UnaryInkey
.2ceb	b5 48		lda $48,x			lda 	esInt0,x
.2ced	d0 f6		bne $2ce5			bne 	UGSDoChr
.2cef	8a		txa				txa
.2cf0	a2 06		ldx #$06		ldx	#6
.2cf2	20 27 34	jsr $3427		jsr	stringHandler
.2cf5	aa		tax				tax
.2cf6	60		rts				rts
.2cf7					UnarySys:
.2cf7	20 f1 29	jsr $29f1			jsr 	EvaluateInteger 				; get the address
.2cfa	20 f6 30	jsr $30f6			jsr 	CheckRightParen
.2cfd	20 e9 1d	jsr $1de9			jsr 	TOSToTemp0 						; copy call address to temp0
.2d00	8a		txa				txa
.2d01	48		pha				pha
.2d02	98		tya				tya
.2d03	48		pha				pha
.2d04	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2d07	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2d0a	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2d0d	20 1c 2d	jsr $2d1c			jsr 	_CallTemp0
.2d10	85 32		sta $32				sta 	tempShort 						; restore YX
.2d12	68		pla				pla
.2d13	a8		tay				tay
.2d14	68		pla				pla
.2d15	aa		tax				tax
.2d16	a5 32		lda $32				lda 	tempShort
.2d18	20 92 30	jsr $3092			jsr 	MInt32Set8Bit 					; return result.
.2d1b	60		rts				rts
.2d1c					_CallTemp0:
.2d1c	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2d1f					UnaryMem:
.2d1f	20 83 30	jsr $3083			jsr 	MInt32False 					; set to false (e.g. 0)
.2d22	38		sec				sec
.2d23	a5 33		lda $33				lda 	highMemory 						; calculate value
.2d25	e5 35		sbc $35				sbc 	lowMemory
.2d27	95 48		sta $48,x			sta 	esInt0,x
.2d29	a5 34		lda $34				lda 	highMemory+1
.2d2b	e5 36		sbc $36				sbc 	lowMemory+1
.2d2d	95 50		sta $50,x			sta 	esInt1,x
.2d2f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.2d30					ExecChr:
.2d30	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger		; character number 0-255
.2d33	20 f6 30	jsr $30f6			jsr 	CheckRightParen				; right bracket
.2d36					ChrCode:
.2d36	98		tya				tya
.2d37	48		pha				pha
.2d38	8a		txa				txa 								; A = stack
.2d39	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2d3b	a2 00		ldx #$00		ldx	#0
.2d3d	20 27 34	jsr $3427		jsr	stringHandler
.2d40	aa		tax				tax 								; X = stack
.2d41	68		pla				pla
.2d42	a8		tay				tay
.2d43	60		rts				rts
.2d44					ExecLower:
.2d44	38		sec				sec 								; set carry is lower
.2d45	b0 01		bcs $2d48			bcs 	ExecUpperLower
.2d47					ExecUpper:
.2d47	18		clc				clc 								; clear carry is upper
.2d48					ExecUpperLower:
.2d48	08		php				php 								; save carry
.2d49	20 e6 29	jsr $29e6			jsr 	EvaluateString 				; string to stack,X
.2d4c	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; check closing right bracket.
.2d4f	28		plp				plp 								; restore carry, save Y
.2d50	98		tya				tya
.2d51	48		pha				pha
.2d52	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2d54	2a		rol a				rol 	a
.2d55	a8		tay				tay 								; now in Y
.2d56	8a		txa				txa 								; do the substring and exit.
.2d57	a2 0a		ldx #$0a		ldx	#10
.2d59	20 27 34	jsr $3427		jsr	stringHandler
.2d5c	aa		tax				tax
.2d5d	68		pla				pla
.2d5e	a8		tay				tay
.2d5f	60		rts				rts
.2d60					ExecLeft:
.2d60	20 e6 29	jsr $29e6			jsr 	EvaluateString 				; string to stack,X
.2d63	20 03 31	jsr $3103			jsr 	CheckComma
.2d66	e8		inx				inx
.2d67	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2d69	20 92 30	jsr $3092			jsr 	MInt32Set8Bit
.2d6c	e8		inx				inx
.2d6d	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2d70					ExecSubstring:
.2d70	ca		dex				dex 								; fix up X
.2d71	ca		dex				dex
.2d72	20 f6 30	jsr $30f6			jsr 	CheckRightParen 			; check closing right bracket.
.2d75	8a		txa				txa 								; do the substring and exit.
.2d76	a2 0c		ldx #$0c		ldx	#12
.2d78	20 27 34	jsr $3427		jsr	stringHandler
.2d7b	aa		tax				tax
.2d7c	60		rts				rts
.2d7d					ExecMid:
.2d7d	20 e6 29	jsr $29e6			jsr 	EvaluateString 				; string to stack,X
.2d80	20 03 31	jsr $3103			jsr 	CheckComma
.2d83	e8		inx				inx
.2d84	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2d87	c9 00		cmp #$00			cmp 	#0
.2d89	f0 15		beq $2da0			beq 	_EMValue
.2d8b	e8		inx				inx
.2d8c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2d8e	20 92 30	jsr $3092			jsr 	MInt32Set8Bit
.2d91	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2d93	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2d95	f0 d9		beq $2d70			beq 	ExecSubString
.2d97	20 03 31	jsr $3103			jsr 	CheckComma
.2d9a	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2d9d	4c 70 2d	jmp $2d70			jmp 	ExecSubString
.2da0					_EMValue:
.2da0	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2da2	20 e0 14	jsr $14e0		jsr	errorHandler
.2da5					ExecRight:
.2da5	20 e6 29	jsr $29e6			jsr 	EvaluateString 				; string to stack,X
.2da8	20 03 31	jsr $3103			jsr 	CheckComma
.2dab	e8		inx				inx
.2dac	20 f9 29	jsr $29f9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2daf	ca		dex				dex
.2db0	98		tya				tya
.2db1	48		pha				pha
.2db2	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2db4	85 2a		sta $2a				sta 	temp0
.2db6	b5 50		lda $50,x			lda 	esInt1,x
.2db8	85 2b		sta $2b				sta 	temp0+1
.2dba	a0 00		ldy #$00			ldy 	#0 							; point to length
.2dbc	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2dbe	18		clc				clc 								; add 1.
.2dbf	69 01		adc #$01			adc 	#1
.2dc1	38		sec				sec
.2dc2	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2dc4	f0 02		beq $2dc8			beq		_ERMake1 					; if zero, make it 1.
.2dc6	b0 02		bcs $2dca			bcs		_EROkay
.2dc8					_ERMake1:
.2dc8	a9 01		lda #$01			lda 	#1 							; start position.
.2dca					_EROkay:
.2dca	e8		inx				inx 								; set start pos.
.2dcb	95 48		sta $48,x			sta 	esInt0,x
.2dcd	e8		inx				inx
.2dce	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2dd0	20 92 30	jsr $3092			jsr 	MInt32Set8Bit
.2dd3	68		pla				pla
.2dd4	a8		tay				tay
.2dd5	4c 70 2d	jmp $2d70			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2dd8					MInt32And:
.2dd8	b5 48		lda $48,x			lda 	esInt0,x
.2dda	35 49		and $49,x			and 	esInt0+1,x
.2ddc	95 48		sta $48,x			sta 	esInt0,x
.2dde	b5 50		lda $50,x			lda 	esInt1,x
.2de0	35 51		and $51,x			and 	esInt1+1,x
.2de2	95 50		sta $50,x			sta 	esInt1,x
.2de4	b5 58		lda $58,x			lda 	esInt2,x
.2de6	35 59		and $59,x			and 	esInt2+1,x
.2de8	95 58		sta $58,x			sta 	esInt2,x
.2dea	b5 60		lda $60,x			lda 	esInt3,x
.2dec	35 61		and $61,x			and 	esInt3+1,x
.2dee	95 60		sta $60,x			sta 	esInt3,x
.2df0	60		rts				rts
.2df1					MInt32Or:
.2df1	b5 48		lda $48,x			lda 	esInt0,x
.2df3	15 49		ora $49,x			ora 	esInt0+1,x
.2df5	95 48		sta $48,x			sta 	esInt0,x
.2df7	b5 50		lda $50,x			lda 	esInt1,x
.2df9	15 51		ora $51,x			ora 	esInt1+1,x
.2dfb	95 50		sta $50,x			sta 	esInt1,x
.2dfd	b5 58		lda $58,x			lda 	esInt2,x
.2dff	15 59		ora $59,x			ora 	esInt2+1,x
.2e01	95 58		sta $58,x			sta 	esInt2,x
.2e03	b5 60		lda $60,x			lda 	esInt3,x
.2e05	15 61		ora $61,x			ora 	esInt3+1,x
.2e07	95 60		sta $60,x			sta 	esInt3,x
.2e09	60		rts				rts
.2e0a					MInt32Xor:
.2e0a	b5 48		lda $48,x			lda 	esInt0,x
.2e0c	55 49		eor $49,x			eor 	esInt0+1,x
.2e0e	95 48		sta $48,x			sta 	esInt0,x
.2e10	b5 50		lda $50,x			lda 	esInt1,x
.2e12	55 51		eor $51,x			eor 	esInt1+1,x
.2e14	95 50		sta $50,x			sta 	esInt1,x
.2e16	b5 58		lda $58,x			lda 	esInt2,x
.2e18	55 59		eor $59,x			eor 	esInt2+1,x
.2e1a	95 58		sta $58,x			sta 	esInt2,x
.2e1c	b5 60		lda $60,x			lda 	esInt3,x
.2e1e	55 61		eor $61,x			eor 	esInt3+1,x
.2e20	95 60		sta $60,x			sta 	esInt3,x
.2e22	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2e23					MInt32Compare:
.2e23	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2e25	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2e27	d0 13		bne $2e3c			bne 	MInt32Compare2
.2e29	b5 50		lda $50,x			lda 	esInt1,x
.2e2b	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2e2d	d0 0d		bne $2e3c			bne 	MInt32Compare2
.2e2f	b5 58		lda $58,x			lda 	esInt2,x
.2e31	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2e33	d0 07		bne $2e3c			bne 	MInt32Compare2
.2e35	b5 60		lda $60,x			lda 	esInt3,x
.2e37	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2e39	d0 01		bne $2e3c			bne 	MInt32Compare2
.2e3b	60		rts				rts
.2e3c					MInt32Compare2:
.2e3c	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2e3e	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2e40	b5 50		lda $50,x			lda		esInt1,x
.2e42	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2e44	b5 58		lda $58,x			lda		esInt2,x
.2e46	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2e48	b5 60		lda $60,x			lda		esInt3,x
.2e4a	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2e4c	50 02		bvc $2e50			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2e4e	49 80		eor #$80			eor 	#$80
.2e50					_I32LNoOverflow
.2e50	30 03		bmi $2e55			bmi 	MInt32CLess					; if -ve then return $FF
.2e52	a9 01		lda #$01			lda 	#$01						; else return $01
.2e54	60		rts				rts
.2e55					MInt32CLess:
.2e55	a9 ff		lda #$ff			lda 	#$FF
.2e57	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2e58					MInt32SDivide:
.2e58	98		tya				tya  								; save Y, which is the count of negations
.2e59	48		pha				pha
.2e5a	a0 00		ldy #$00			ldy 	#0 							; zero count
.2e5c	20 74 2e	jsr $2e74			jsr 	_MInt32SRemSign 			; unsign TOS
.2e5f	e8		inx				inx 								; unsign TOS+1
.2e60	20 74 2e	jsr $2e74			jsr 	_MInt32SRemSign
.2e63	ca		dex				dex
.2e64	98		tya				tya 								; save sign count on stack
.2e65	48		pha				pha
.2e66	20 7d 2e	jsr $2e7d			jsr 	MInt32UDivide 				; unsigned division
.2e69	68		pla				pla 								; get sign count back
.2e6a	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2e6c	f0 03		beq $2e71			beq 	_I32SNoNeg
.2e6e	20 3d 30	jsr $303d			jsr 	MInt32Negate
.2e71					_I32SNoNeg:
.2e71	68		pla				pla 								; restoe Y and exit
.2e72	a8		tay				tay
.2e73	60		rts				rts
.2e74					_MInt32SRemSign:
.2e74	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2e76	10 04		bpl $2e7c			bpl 	_MInt32SRSExit
.2e78	c8		iny				iny 								; increment the sign count
.2e79	20 3d 30	jsr $303d			jsr 	MInt32Negate 				; negate the value.
.2e7c					_MInt32SRSExit:
.2e7c	60		rts				rts
.2e7d					MInt32UDivide:
.2e7d	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2e7f	15 51		ora $51,x			ora 	esInt1+1,x
.2e81	15 52		ora $52,x			ora 	esInt1+2,x
.2e83	15 53		ora $53,x			ora 	esInt1+3,x
.2e85	f0 4a		beq $2ed1			beq 	_MInt32DZero
.2e87	e8		inx				inx 								; clear A
.2e88	e8		inx				inx
.2e89	20 83 30	jsr $3083			jsr 	MInt32False
.2e8c	ca		dex				dex
.2e8d	ca		dex				dex
.2e8e	98		tya				tya 								; save Y on the stack
.2e8f	48		pha				pha
.2e90	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2e92					_MInt32UDLoop:
.2e92	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2e94	36 50		rol $50,x			rol 	esInt1,x
.2e96	36 58		rol $58,x			rol 	esInt2,x
.2e98	36 60		rol $60,x			rol 	esInt3,x
.2e9a	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2e9c	36 52		rol $52,x			rol 	esInt1+2,x
.2e9e	36 5a		rol $5a,x			rol 	esInt2+2,x
.2ea0	36 62		rol $62,x			rol 	esInt3+2,x
.2ea2	38		sec				sec 								; calculate A-M saving result on the stack
.2ea3	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2ea5	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2ea7	48		pha				pha
.2ea8	b5 52		lda $52,x			lda 	esInt1+2,x
.2eaa	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2eac	48		pha				pha
.2ead	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2eaf	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2eb1	48		pha				pha
.2eb2	b5 62		lda $62,x			lda 	esInt3+2,x
.2eb4	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2eb6	90 10		bcc $2ec8			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2eb8	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2eba	68		pla				pla
.2ebb	95 5a		sta $5a,x			sta 	esInt2+2,x
.2ebd	68		pla				pla
.2ebe	95 52		sta $52,x			sta 	esInt1+2,x
.2ec0	68		pla				pla
.2ec1	95 4a		sta $4a,x			sta 	esInt0+2,x
.2ec3	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2ec5	4c cb 2e	jmp $2ecb			jmp 	_MInt32Next 					; do the next iteration
.2ec8					_MInt32NoSubtract:
.2ec8	68		pla				pla
.2ec9	68		pla				pla
.2eca	68		pla				pla
.2ecb					_MInt32Next:
.2ecb	88		dey				dey 								; do this 32 times.
.2ecc	d0 c4		bne $2e92			bne 	_MInt32UDLoop
.2ece	68		pla				pla 								; restore Y and exit
.2ecf	a8		tay				tay
.2ed0	60		rts				rts
.2ed1					_MInt32DZero:
.2ed1	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2ed3	20 e0 14	jsr $14e0		jsr	errorHandler
.2ed6					MInt32Modulus:
.2ed6	20 7d 2e	jsr $2e7d			jsr 	MInt32UDivide 				; do the division.
.2ed9	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2edb	95 60		sta $60,x			sta 	esInt3,x
.2edd	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2edf	95 58		sta $58,x			sta 	esInt2,x
.2ee1	b5 52		lda $52,x			lda 	esInt1+2,x
.2ee3	95 50		sta $50,x			sta 	esInt1,x
.2ee5	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2ee7	95 48		sta $48,x			sta 	esInt0,x
.2ee9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c14					fs32Length:
>0c14							.fill 	1
.2eea					LinkInt32FromString:
.2eea	aa		tax				tax
.2eeb	98		tya				tya
.2eec	20 f1 2e	jsr $2ef1			jsr 	MInt32FromString
.2eef	8a		txa				txa
.2ef0	60		rts				rts
.2ef1					MInt32FromString:
.2ef1	85 32		sta $32				sta 	tempShort 					; save base
.2ef3	98		tya				tya
.2ef4	48		pha				pha
.2ef5	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2ef7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ef9	8d 14 0c	sta $0c14			sta 	fs32Length
.2efc	f0 65		beq $2f63			beq 	_I32FSFail2					; fail if length zero.
.2efe	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2f00	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2f02	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2f04	d0 09		bne $2f0f			bne 	_I32FSNotNegative
.2f06	ad 14 0c	lda $0c14			lda 	fs32Length 					; get length back.
.2f09	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2f0b	f0 56		beq $2f63			beq 	_I32FSFail2
.2f0d	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2f0f					_I32FSNotNegative:
.2f0f	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2f11	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2f13	d0 02		bne $2f17			bne 	_I32FSNN2
.2f15	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2f17					_I32FSNN2:
.2f17	48		pha				pha 								; save base + final sign on stack.
.2f18	20 83 30	jsr $3083			jsr 	MInt32False 				; zero the return value.
.2f1b					_I32FSMainLoop:
.2f1b	68		pla				pla 								; get the base back into tempShort
.2f1c	48		pha				pha
.2f1d	29 7f		and #$7f			and 	#$7F
.2f1f	85 32		sta $32				sta 	tempShort
.2f21	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2f23	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2f25	90 02		bcc $2f29			bcc 	_I32FSNotLC
.2f27	e9 20		sbc #$20			sbc 	#32
.2f29					_I32FSNotLC:
.2f29	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2f2a	e9 30		sbc #$30			sbc 	#"0"
.2f2c	90 34		bcc $2f62			bcc 	_I32FSFail 					; nothing more to do.
.2f2e	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2f30	90 06		bcc $2f38			bcc 	_I32FSValidate
.2f32	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2f34	90 2c		bcc $2f62			bcc 	_I32FSFail
.2f36	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2f38					_I32FSValidate:
.2f38	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2f3a	b0 26		bcs $2f62			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2f3c	48		pha				pha 								; save the new digit value.
.2f3d	e8		inx				inx 								; put base into next slot up on stack
.2f3e	a5 32		lda $32				lda 	tempShort
.2f40	20 92 30	jsr $3092			jsr 	MInt32Set8Bit
.2f43	ca		dex				dex
.2f44	20 9b 2f	jsr $2f9b			jsr 	MInt32Multiply 				; multiply current by the base
.2f47	e8		inx				inx
.2f48	68		pla				pla  								; put additive into next slot
.2f49	20 92 30	jsr $3092			jsr 	MInt32Set8Bit
.2f4c	ca		dex				dex
.2f4d	20 67 2f	jsr $2f67			jsr 	MInt32Add 					; and add it
.2f50	c8		iny				iny 								; bump the character pointer
.2f51	cc 14 0c	cpy $0c14			cpy 	fs32Length 					; until > length.
.2f54	f0 c5		beq $2f1b			beq 	_I32FSMainLoop
.2f56	90 c3		bcc $2f1b			bcc 	_I32FSMainLoop
.2f58					_I32FSDone:
.2f58	68		pla				pla 								; get base/final sign back
.2f59	10 03		bpl $2f5e			bpl 	_I32FSNN3
.2f5b	20 3d 30	jsr $303d			jsr 	MInt32Negate 				; negate the result.
.2f5e					_I32FSNN3:
.2f5e	68		pla				pla
.2f5f	a8		tay				tay
.2f60	38		sec				sec
.2f61	60		rts				rts
.2f62					_I32FSFail:
.2f62	68		pla				pla
.2f63					_I32FSFail2:
.2f63	68		pla				pla
.2f64	a8		tay				tay
.2f65	18		clc				clc
.2f66	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2f67					MInt32Add:
.2f67	18		clc				clc
.2f68	b5 48		lda $48,x			lda 	esInt0,x
.2f6a	75 49		adc $49,x			adc 	esInt0+1,x
.2f6c	95 48		sta $48,x			sta 	esInt0,x
.2f6e	b5 50		lda $50,x			lda 	esInt1,x
.2f70	75 51		adc $51,x			adc 	esInt1+1,x
.2f72	95 50		sta $50,x			sta 	esInt1,x
.2f74	b5 58		lda $58,x			lda 	esInt2,x
.2f76	75 59		adc $59,x			adc 	esInt2+1,x
.2f78	95 58		sta $58,x			sta 	esInt2,x
.2f7a	b5 60		lda $60,x			lda 	esInt3,x
.2f7c	75 61		adc $61,x			adc 	esInt3+1,x
.2f7e	95 60		sta $60,x			sta 	esInt3,x
.2f80	60		rts				rts
.2f81					MInt32Sub:
.2f81	38		sec				sec
.2f82	b5 48		lda $48,x			lda 	esInt0,x
.2f84	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2f86	95 48		sta $48,x			sta 	esInt0,x
.2f88	b5 50		lda $50,x			lda 	esInt1,x
.2f8a	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2f8c	95 50		sta $50,x			sta 	esInt1,x
.2f8e	b5 58		lda $58,x			lda 	esInt2,x
.2f90	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2f92	95 58		sta $58,x			sta 	esInt2,x
.2f94	b5 60		lda $60,x			lda 	esInt3,x
.2f96	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2f98	95 60		sta $60,x			sta 	esInt3,x
.2f9a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2f9b					MInt32Multiply:
.2f9b	e8		inx				inx 								; copy 2nd -> 3rd
.2f9c	20 c1 2f	jsr $2fc1			jsr 	MInt32CopyUp
.2f9f	ca		dex				dex
.2fa0	20 c1 2f	jsr $2fc1			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2fa3	20 83 30	jsr $3083			jsr 	MInt32False 				; zero 1st.
.2fa6					_I32Loop:
.2fa6	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2fa8	29 01		and #$01			and 	#1
.2faa	f0 03		beq $2faf			beq 	_I32NoAdd 					; if set
.2fac	20 67 2f	jsr $2f67			jsr 	MInt32Add 					; add 2nd to 1st.
.2faf					_I32NoAdd:
.2faf	e8		inx				inx 								; shift 2nd left
.2fb0	20 98 30	jsr $3098			jsr 	MInt32ShiftLeft
.2fb3	e8		inx				inx  								; shift 3rd right
.2fb4	20 a1 30	jsr $30a1			jsr 	MInt32ShiftRight
.2fb7	20 aa 30	jsr $30aa			jsr 	MInt32Zero 					; check if zero.
.2fba	08		php				php 								; save status bits
.2fbb	ca		dex				dex 	 							; point back to 1st
.2fbc	ca		dex				dex
.2fbd	28		plp				plp 								; get status bits
.2fbe	d0 e6		bne $2fa6			bne 	_I32Loop 					; if non-zero keep going.
.2fc0	60		rts				rts
.2fc1					MInt32CopyUp:
.2fc1	b5 48		lda $48,x			lda 	esInt0,x
.2fc3	95 49		sta $49,x			sta 	esInt0+1,x
.2fc5	b5 50		lda $50,x			lda 	esInt1,x
.2fc7	95 51		sta $51,x			sta 	esInt1+1,x
.2fc9	b5 58		lda $58,x			lda 	esInt2,x
.2fcb	95 59		sta $59,x			sta 	esInt2+1,x
.2fcd	b5 60		lda $60,x			lda 	esInt3,x
.2fcf	95 61		sta $61,x			sta 	esInt3+1,x
.2fd1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c15					MCharCount:	.fill 	1						; count of converted characters
.2fd2					MLInt32ToString:
.2fd2	aa		tax				tax									; module passes stack in A, base in Y
.2fd3	98		tya				tya
.2fd4	20 d9 2f	jsr $2fd9			jsr 	MInt32ToString
.2fd7	8a		txa				txa
.2fd8	60		rts				rts
.2fd9					MInt32ToString:
.2fd9	48		pha				pha 								; save base
.2fda	85 32		sta $32				sta 	tempShort 					; save target base.
.2fdc	a9 00		lda #$00			lda 	#0
.2fde	8d 15 0c	sta $0c15			sta 	MCharCount 					; clear character count to 0
.2fe1	98		tya				tya
.2fe2	48		pha				pha
.2fe3	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2fe5	10 10		bpl $2ff7			bpl 	_I32TSUnsigned
.2fe7	48		pha				pha 								; save base on stack.
.2fe8	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2fea	10 08		bpl $2ff4			bpl 	_I32TSNoFlip
.2fec	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2fee	20 2a 30	jsr $302a			jsr 	MI32WriteCharacter
.2ff1	20 3d 30	jsr $303d			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2ff4					_I32TSNoFlip:
.2ff4	68		pla				pla 								; get the base back
.2ff5	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2ff7					_I32TSUnsigned:
.2ff7	20 05 30	jsr $3005			jsr 	MI32DivideWrite 			; recursive code to output string.
.2ffa	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2ffc	ad 15 0c	lda $0c15			lda 	MCharCount
.2fff	91 2a		sta ($2a),y			sta 	(temp0),y
.3001	68		pla				pla
.3002	a8		tay				tay
.3003	68		pla				pla
.3004	60		rts				rts
.3005					MI32DivideWrite:
.3005	48		pha				pha 								; save the divisor/base
.3006	e8		inx				inx 								; write in the dividing position.
.3007	20 92 30	jsr $3092			jsr 	MInt32Set8Bit
.300a	ca		dex				dex
.300b	20 7d 2e	jsr $2e7d			jsr 	MInt32UDivide 				; divide number by base.
.300e	68		pla				pla 								; get the base into Y
.300f	a8		tay				tay
.3010	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3012	48		pha				pha
.3013	20 aa 30	jsr $30aa			jsr 	MInt32Zero 					; is the result zero ?
.3016	f0 04		beq $301c			beq 	_I32NoRecurse 				; if so, don't recurse.
.3018	98		tya				tya 								; put base into A
.3019	20 05 30	jsr $3005			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.301c					_I32NoRecurse:
.301c	68		pla				pla 								; get the remainder back
.301d	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.301f	90 02		bcc $3023			bcc 	_I32NotHex
.3021	69 06		adc #$06			adc 	#7-1
.3023					_I32NotHex:
.3023	18		clc				clc 								; make it ASCII
.3024	69 30		adc #$30			adc 	#48
.3026	20 2a 30	jsr $302a			jsr 	MI32WriteCharacter 			; write the character out
.3029	60		rts				rts 								; and exit.
.302a					MI32WriteCharacter:
.302a	ee 15 0c	inc $0c15			inc 	MCharCount 					; bump count (space for leading count)
.302d	ac 15 0c	ldy $0c15			ldy 	MCharCount 					; get position
.3030	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3032	c8		iny				iny
.3033	a9 00		lda #$00			lda 	#0
.3035	91 2a		sta ($2a),y			sta 	(temp0),y
.3037	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c16					MSeed32:	.fill 	4							; random number seed.
.3038					MInt32Absolute:
.3038	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.303a	30 01		bmi $303d			bmi 	MInt32Negate
.303c	60		rts				rts
.303d					MInt32Negate:
.303d	38		sec				sec 								; subtract from zero.
.303e	a9 00		lda #$00			lda 	#0
.3040	f5 48		sbc $48,x			sbc 	esInt0,x
.3042	95 48		sta $48,x			sta 	esInt0,x
.3044	a9 00		lda #$00			lda 	#0
.3046	f5 50		sbc $50,x			sbc 	esInt1,x
.3048	95 50		sta $50,x			sta 	esInt1,x
.304a	a9 00		lda #$00			lda 	#0
.304c	f5 58		sbc $58,x			sbc 	esInt2,x
.304e	95 58		sta $58,x			sta 	esInt2,x
.3050	a9 00		lda #$00			lda 	#0
.3052	f5 60		sbc $60,x			sbc 	esInt3,x
.3054	95 60		sta $60,x			sta 	esInt3,x
.3056	60		rts				rts
.3057					MInt32Not:
.3057	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.3059	49 ff		eor #$ff			eor 	#$FF
.305b	95 48		sta $48,x			sta 	esInt0,x
.305d	b5 50		lda $50,x			lda 	esInt1,x
.305f	49 ff		eor #$ff			eor 	#$FF
.3061	95 50		sta $50,x			sta 	esInt1,x
.3063	b5 58		lda $58,x			lda 	esInt2,x
.3065	49 ff		eor #$ff			eor 	#$FF
.3067	95 58		sta $58,x			sta 	esInt2,x
.3069	b5 60		lda $60,x			lda 	esInt3,x
.306b	49 ff		eor #$ff			eor 	#$FF
.306d	95 60		sta $60,x			sta 	esInt3,x
.306f	60		rts				rts
.3070					MInt32Sign:
.3070	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.3072	30 0b		bmi $307f			bmi 	MInt32True 					; if set return -1 (true)
.3074	20 aa 30	jsr $30aa			jsr 	MInt32Zero 					; is it zero ?
.3077	f0 0a		beq $3083			beq 	MInt32False 				; if zero return 0 (false)
.3079	20 83 30	jsr $3083			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.307c	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.307e	60		rts				rts
.307f					MInt32True:
.307f	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3081	d0 02		bne $3085			bne 	MInt32WriteAll
.3083					MInt32False:
.3083	a9 00		lda #$00			lda 	#0
.3085					MInt32WriteAll:
.3085	95 48		sta $48,x			sta 	esInt0,x
.3087					MInt32Write123:
.3087	95 50		sta $50,x			sta 	esInt1,x
.3089	95 58		sta $58,x			sta 	esInt2,x
.308b	95 60		sta $60,x			sta 	esInt3,x
.308d	a9 00		lda #$00			lda 	#$00						; and make it an integer
.308f	95 40		sta $40,x			sta 	esType,x
.3091	60		rts				rts
.3092					MInt32Set8Bit:
.3092	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.3094	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3096	f0 ef		beq $3087			beq		MInt32Write123
.3098					MInt32ShiftLeft:
.3098	16 48		asl $48,x			asl 	esInt0,x
.309a	36 50		rol $50,x			rol	 	esInt1,x
.309c	36 58		rol $58,x			rol	 	esInt2,x
.309e	36 60		rol $60,x			rol	 	esInt3,x
.30a0	60		rts				rts
.30a1					MInt32ShiftRight:
.30a1	56 60		lsr $60,x			lsr 	esInt3,x
.30a3	76 58		ror $58,x			ror 	esInt2,x
.30a5	76 50		ror $50,x			ror 	esInt1,x
.30a7	76 48		ror $48,x			ror 	esInt0,x
.30a9	60		rts				rts
.30aa					MInt32Zero:
.30aa	b5 48		lda $48,x			lda 	esInt0,x
.30ac	15 50		ora $50,x			ora 	esInt1,x
.30ae	15 58		ora $58,x			ora 	esInt2,x
.30b0	15 60		ora $60,x			ora 	esInt3,x
.30b2	60		rts				rts
.30b3					MInt32Random:
.30b3	98		tya				tya
.30b4	48		pha				pha
.30b5	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.30b7	ad 16 0c	lda $0c16			lda 	MSeed32+0 					; check the seed isn't zero
.30ba	d0 03		bne $30bf			bne 	_Random1
.30bc	a8		tay				tay 								; if so do it 256 times
.30bd	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.30bf					_Random1:
.30bf	0a		asl a				asl 	a
.30c0	2e 17 0c	rol $0c17			rol 	MSeed32+1
.30c3	2e 18 0c	rol $0c18			rol 	MSeed32+2
.30c6	2e 19 0c	rol $0c19			rol 	MSeed32+3
.30c9	90 02		bcc $30cd			bcc 	_Random2
.30cb	49 c5		eor #$c5			eor 	#$C5
.30cd					_Random2:
.30cd	88		dey				dey
.30ce	d0 ef		bne $30bf			bne 	_Random1
.30d0	8d 16 0c	sta $0c16			sta 	MSeed32+0 					; copy the seed in.
.30d3	95 48		sta $48,x			sta 	esInt0,x
.30d5	ad 17 0c	lda $0c17			lda 	MSeed32+1
.30d8	95 50		sta $50,x			sta 	esInt1,x
.30da	ad 18 0c	lda $0c18			lda 	MSeed32+2
.30dd	95 58		sta $58,x			sta 	esInt2,x
.30df	ad 19 0c	lda $0c19			lda 	MSeed32+3
.30e2	95 60		sta $60,x			sta 	esInt3,x
.30e4	68		pla				pla
.30e5	a8		tay				tay
.30e6	a9 00		lda #$00			lda 	#0
.30e8	95 40		sta $40,x			sta 	esType,x
.30ea	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.30eb					CheckToken:
.30eb	d1 28		cmp ($28),y			cmp 	(codePtr),y
.30ed	d0 02		bne $30f1			bne 	_CTError
.30ef	c8		iny				iny
.30f0	60		rts				rts
.30f1					_CTError:
.30f1	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.30f3	20 e0 14	jsr $14e0		jsr	errorHandler
.30f6					CheckRightParen:
.30f6	b1 28		lda ($28),y			lda 	(codePtr),y
.30f8	c8		iny				iny
.30f9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.30fb	d0 01		bne $30fe			bne 	_CRPError
.30fd	60		rts				rts
.30fe					_CRPError:
.30fe	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3100	20 e0 14	jsr $14e0		jsr	errorHandler
.3103					CheckComma:
.3103	b1 28		lda ($28),y			lda 	(codePtr),y
.3105	c8		iny				iny
.3106	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3108	d0 01		bne $310b			bne 	_CCError
.310a	60		rts				rts
.310b					_CCError:
.310b	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.310d	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3110					RSReset:
.3110	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3112	85 37		sta $37				sta 	rsPointer
.3114	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3116	85 38		sta $38				sta 	1+(rsPointer)
.3118	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.311a	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.311d	60		rts				rts
.311e					RSClaim:
.311e	84 32		sty $32				sty 	tempShort 					; preserve Y
.3120	48		pha				pha 								; save marker on stack.
.3121	8a		txa				txa 								; get bytes required.
.3122	38		sec				sec
.3123	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3125	65 37		adc $37				adc 	rsPointer
.3127	85 37		sta $37				sta 	rsPointer
.3129	a5 38		lda $38				lda 	rsPointer+1
.312b	69 ff		adc #$ff			adc 	#$FF
.312d	85 38		sta $38				sta 	rsPointer+1
.312f	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3131	90 08		bcc $313b			bcc 	_RSCOverflow
.3133	68		pla				pla 								; get marker back
.3134	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3136	91 37		sta ($37),y			sta 	(rsPointer),y
.3138	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.313a	60		rts				rts
.313b					_RSCOverflow:
.313b	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.313d	20 e0 14	jsr $14e0		jsr	errorHandler
.3140					RSFree:
.3140	18		clc				clc
.3141	65 37		adc $37				adc 	rsPointer
.3143	85 37		sta $37				sta 	rsPointer
.3145	90 02		bcc $3149			bcc 	_RSFExit
.3147	e6 38		inc $38				inc 	rsPointer+1
.3149					_RSFExit:
.3149	60		rts				rts
.314a					RSSavePosition:
.314a	84 32		sty $32				sty 	tempShort 					; save Y position
.314c	a8		tay				tay 								; this is where we write it.
.314d	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.314f	91 37		sta ($37),y			sta 	(rsPointer),y
.3151	c8		iny				iny
.3152	a5 29		lda $29				lda 	codePtr+1
.3154	91 37		sta ($37),y			sta 	(rsPointer),y
.3156	c8		iny				iny
.3157	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3159	91 37		sta ($37),y			sta 	(rsPointer),y
.315b	a8		tay				tay 								; fix Y back again to original value
.315c	60		rts				rts
.315d					RSLoadPosition:
.315d	a8		tay				tay
.315e	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3160	85 28		sta $28				sta 	codePtr
.3162	c8		iny				iny
.3163	b1 37		lda ($37),y			lda 	(rsPointer),y
.3165	85 29		sta $29				sta 	codePtr+1
.3167	c8		iny				iny
.3168	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.316a	a8		tay				tay 								; to Y
.316b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.316c					WarmStart:
.316c	a2 02		ldx #$02		ldx	#2
.316e	20 e6 1a	jsr $1ae6		jsr	interactionHandler

;******  Return to file: main/main.asm

.3171					mainHandler:
.3171	7c 74 31	jmp ($3174,x)			jmp 	(mainVectors,x)
.3174					mainVectors:
>3174	f6 30					.word CheckRightParen      ; index 0
>3176	eb 22					.word XCommandClear        ; index 2
>3178	0c 2a					.word LinkEvaluate         ; index 4
>317a	18 2a					.word LinkEvaluateInteger  ; index 6
>317c	1e 2a					.word LinkEvaluateSmallInt ; index 8
>317e	12 2a					.word LinkEvaluateTerm     ; index 10
>3180	d2 2f					.word MLInt32ToString      ; index 12
>3182	7a 24					.word Command_XNew         ; index 14
>3184	88 24					.word XCommand_Run         ; index 16
>3186	94 24					.word Command_RunFrom      ; index 18
>3188	ea 2e					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.318a					section_end_main:
.318a					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.318a					StringChrs:
.318a	aa		tax				tax 								; set up stack
.318b	a9 02		lda #$02			lda 	#2
.318d	20 4d 32	jsr $324d			jsr 	AllocateSoftString
.3190	98		tya				tya
.3191	20 73 32	jsr $3273			jsr 	WriteSoftString
.3194					StringUpdate:
.3194	20 a2 31	jsr $31a2			jsr 	ReturnSoftString
.3197	8a		txa				txa
.3198	60		rts				rts
.3199					StringNull:
.3199	aa		tax				tax
.319a	a9 01		lda #$01			lda 	#1
.319c	20 4d 32	jsr $324d			jsr 	AllocateSoftString
.319f	4c 94 31	jmp $3194			jmp 	StringUpdate
.31a2					ReturnSoftString:
.31a2	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.31a4	95 48		sta $48,x			sta 	esInt0,x
.31a6	a5 3a		lda $3a				lda 	softMemAlloc+1
.31a8	95 50		sta $50,x			sta 	esInt1,x
.31aa	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.31ac	95 58		sta $58,x			sta 	esInt2,x
.31ae	95 60		sta $60,x			sta 	esInt3,x
.31b0	a9 40		lda #$40			lda 	#$40 						; type string.
.31b2	95 40		sta $40,x			sta 	esType,x
.31b4	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.31b5					STRCompare:
.31b5	48		pha				pha 								; save A
.31b6	aa		tax				tax 								; put stack pos in X
.31b7	98		tya				tya
.31b8	48		pha				pha
.31b9	20 ed 31	jsr $31ed			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.31bc	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.31be	b1 2a		lda ($2a),y			lda 	(temp0),y
.31c0	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.31c2	90 02		bcc $31c6			bcc 	_SCNotSmaller
.31c4	b1 2c		lda ($2c),y			lda 	(temp1),y
.31c6					_SCNotSmaller:
.31c6	aa		tax				tax 								; put that in X. We compare this many chars first.
.31c7					_SCCompareLoop:
.31c7	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.31c9	f0 0c		beq $31d7			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.31cb	ca		dex				dex 								; decrement chars to compare.
.31cc	c8		iny				iny 								; move to next character
.31cd	38		sec				sec 								; calculate s1[y]-s2[y]
.31ce	b1 2a		lda ($2a),y			lda 	(temp0),y
.31d0	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31d2	d0 0a		bne $31de			bne 	_SCReturnResult 			; if different return sign of A
.31d4	4c c7 31	jmp $31c7			jmp 	_SCCompareLoop
.31d7					_SCSameToEndShortest
.31d7	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.31d9	38		sec				sec
.31da	b1 2a		lda ($2a),y			lda 	(temp0),y
.31dc	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.31de					_SCReturnResult:
.31de	08		php				php 								; set return to zero preserving PSW.
.31df	a2 00		ldx #$00			ldx 	#0
.31e1	28		plp				plp
.31e2	f0 05		beq $31e9			beq 	_SCExit 					; two values equal, then exit
.31e4	ca		dex				dex 								; X = $FF
.31e5	90 02		bcc $31e9			bcc 	_SCExit 					; if 1st < 2nd then -1
.31e7	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.31e9					_SCExit:
.31e9	68		pla				pla
.31ea	a8		tay				tay
.31eb	68		pla				pla
.31ec	60		rts				rts
.31ed					CopyStringPair:
.31ed	b5 49		lda $49,x			lda 	esInt0+1,x
.31ef	85 2c		sta $2c				sta 	temp1
.31f1	b5 51		lda $51,x			lda 	esInt1+1,x
.31f3	85 2d		sta $2d				sta 	temp1+1
.31f5					CopyStringTop:
.31f5	b5 48		lda $48,x			lda 	esInt0,x
.31f7	85 2a		sta $2a				sta 	temp0
.31f9	b5 50		lda $50,x			lda 	esInt1,x
.31fb	85 2b		sta $2b				sta 	temp0+1
.31fd	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.31fe					StringConcat:
.31fe	aa		tax				tax									; stack pos in X
.31ff	98		tya				tya
.3200	48		pha				pha
.3201	20 ed 31	jsr $31ed			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3204	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3205	a0 00		ldy #$00			ldy 	#0
.3207	b1 2a		lda ($2a),y			lda 	(temp0),y
.3209	71 2c		adc ($2c),y			adc 	(temp1),y
.320b	b0 1c		bcs $3229			bcs 	_SCError 					; just too many characters here.
.320d	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.320f	b0 18		bcs $3229			bcs 	_SCError
.3211	20 4d 32	jsr $324d			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3214	20 44 32	jsr $3244			jsr 	CopySoftToStack 			; copy that to the stack.
.3217	20 2e 32	jsr $322e			jsr 	SCCopyTemp0 				; copy temp0
.321a	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.321c	85 2a		sta $2a				sta 	temp0
.321e	a5 2d		lda $2d				lda 	temp1+1
.3220	85 2b		sta $2b				sta 	temp0+1
.3222	20 2e 32	jsr $322e			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3225	68		pla				pla
.3226	a8		tay				tay
.3227	8a		txa				txa 								; and A
.3228	60		rts				rts
.3229					_SCError:
.3229	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.322b	20 e0 14	jsr $14e0		jsr	errorHandler
.322e					SCCopyTemp0:
.322e	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3230	b1 2a		lda ($2a),y			lda 	(temp0),y
.3232	85 2e		sta $2e				sta 	temp2
.3234					_SCCopyLoop:
.3234	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3236	f0 0b		beq $3243			beq 	_SCCopyExit
.3238	c6 2e		dec $2e				dec 	temp2
.323a	c8		iny				iny 								; get next char
.323b	b1 2a		lda ($2a),y			lda 	(temp0),y
.323d	20 73 32	jsr $3273			jsr 	WriteSoftString 			; write to soft string.
.3240	4c 34 32	jmp $3234			jmp 	_SCCopyLoop
.3243					_SCCopyExit:
.3243	60		rts				rts
.3244					CopySoftToStack:
.3244	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3246	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.3248	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.324a	95 50		sta $50,x			sta 	esInt1,x
.324c	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.324d					AllocateSoftString:
.324d	85 32		sta $32				sta 	tempShort 					; save count
.324f	98		tya				tya
.3250	48		pha				pha
.3251	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3253	d0 09		bne $325e			bne 	_ASSDone
.3255	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3257	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3259	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.325b	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.325c	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.325e					_ASSDone:
.325e	38		sec				sec 								; allocate downwards enough memory
.325f	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3261	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3263	85 39		sta $39				sta 	softMemAlloc
.3265	a5 3a		lda $3a				lda 	softMemAlloc+1
.3267	e9 00		sbc #$00			sbc 	#0
.3269	85 3a		sta $3a				sta 	softMemAlloc+1
.326b	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.326d	a8		tay				tay
.326e	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3270	68		pla				pla
.3271	a8		tay				tay
.3272	60		rts				rts
.3273					WriteSoftString:
.3273	84 32		sty $32				sty 	tempShort 					; save Y
.3275	48		pha				pha 								; save character on stack
.3276	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3278	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.327a	18		clc				clc
.327b	69 01		adc #$01			adc 	#1
.327d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.327f	a8		tay				tay 								; offset in Y
.3280	68		pla				pla 								; get char and write.
.3281	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3283	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3285	60		rts				rts
.3286					StrClone:
.3286	aa		tax				tax 								; set up stack.
.3287	98		tya				tya
.3288	48		pha				pha
.3289	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.328b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.328d	18		clc				clc
.328e	69 01		adc #$01			adc 	#1
.3290	20 4d 32	jsr $324d			jsr 	AllocateSoftString 			; allocate soft memory
.3293	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3295	95 48		sta $48,x			sta 	esInt0,x
.3297	a5 3a		lda $3a				lda 	softMemAlloc+1
.3299	95 50		sta $50,x			sta 	esInt1,x
.329b	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.329d	95 58		sta $58,x			sta 	esInt2,x
.329f	95 60		sta $60,x			sta 	esInt3,x
.32a1	a9 40		lda #$40			lda 	#$40 						; set type to string.
.32a3	95 40		sta $40,x			sta 	esType,x
.32a5	20 2e 32	jsr $322e			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.32a8	68		pla				pla
.32a9	a8		tay				tay
.32aa	8a		txa				txa
.32ab	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.32ac					CaseString:
.32ac	48		pha				pha 								; save A and copy to X
.32ad	aa		tax				tax
.32ae	98		tya				tya
.32af	48		pha				pha
.32b0	20 f5 31	jsr $31f5			jsr 	CopyStringTop 				; target string -> temp0
.32b3	a0 00		ldy #$00			ldy 	#0
.32b5	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.32b7	18		clc				clc
.32b8	69 01		adc #$01			adc 	#1 							; one more for length byte
.32ba	20 4d 32	jsr $324d			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.32bd	20 44 32	jsr $3244			jsr 	CopySoftToStack 			; copy that to the stack.
.32c0	a0 00		ldy #$00			ldy 	#0
.32c2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.32c4	aa		tax				tax
.32c5					_CSCopy:
.32c5	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.32c7	f0 24		beq $32ed			beq 	_CSExit
.32c9	ca		dex				dex
.32ca	c8		iny				iny
.32cb	68		pla				pla 								; check direction
.32cc	48		pha				pha
.32cd	f0 0c		beq $32db			beq 	_CSUpper
.32cf	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.32d1	c9 41		cmp #$41			cmp 	#"A"
.32d3	90 12		bcc $32e7			bcc 	_CSWrite
.32d5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.32d7	b0 0e		bcs $32e7			bcs 	_CSWrite
.32d9	90 0a		bcc $32e5			bcc 	_CSFlipWrite
.32db					_CSUpper:
.32db	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.32dd	c9 61		cmp #$61			cmp 	#"a"
.32df	90 06		bcc $32e7			bcc 	_CSWrite
.32e1	c9 7b		cmp #$7b			cmp 	#"z"+1
.32e3	b0 02		bcs $32e7			bcs 	_CSWrite
.32e5					_CSFlipWrite:
.32e5	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.32e7					_CSWrite:
.32e7	20 73 32	jsr $3273			jsr 	WriteSoftString 			; add to soft string.
.32ea	4c c5 32	jmp $32c5			jmp 	_CSCopy
.32ed					_CSExit:
.32ed	68		pla				pla
.32ee	a8		tay				tay
.32ef	68		pla				pla
.32f0	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.32f1					StringSubstring:
.32f1	48		pha				pha
.32f2	aa		tax				tax 								; access stack.
.32f3	98		tya				tya
.32f4	48		pha				pha
.32f5	20 f5 31	jsr $31f5			jsr 	CopyStringTop 				; point temp0 to the string.
.32f8	a0 00		ldy #$00			ldy 	#0 							; get length.
.32fa	b1 2a		lda ($2a),y			lda 	(temp0),Y
.32fc	85 2c		sta $2c				sta 	temp1
.32fe	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.3300	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3302	f0 02		beq $3306			beq 	_SSBOkay
.3304	b0 2a		bcs $3330			bcs 	_SSBReturnNull
.3306					_SSBOkay:
.3306	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3308	18		clc				clc
.3309	69 01		adc #$01			adc 	#1
.330b	38		sec				sec
.330c	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.330e	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.3310	90 02		bcc $3314			bcc		_SSBTrunc
.3312	b5 4a		lda $4a,x			lda 	esInt0+2,x
.3314					_SSBTrunc:
.3314	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3316	18		clc				clc
.3317	69 01		adc #$01			adc 	#1 							; add 1
.3319	20 4d 32	jsr $324d			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.331c	20 44 32	jsr $3244			jsr 	CopySoftToStack 			; copy that to the stack.
.331f	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3321					_SSBCopyLoop:
.3321	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3323	f0 0e		beq $3333			beq 	_SSBExit
.3325	c6 2d		dec $2d				dec 	temp1+1
.3327	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3329	20 73 32	jsr $3273			jsr 	WriteSoftString
.332c	c8		iny				iny
.332d	4c 21 33	jmp $3321			jmp 	_SSBCopyLoop
.3330					_SSBReturnNull:
.3330	20 37 33	jsr $3337			jsr 	ReturnNull
.3333					_SSBExit:
.3333	68		pla				pla
.3334	a8		tay				tay
.3335	68		pla				pla
.3336	60		rts				rts
.3337					ReturnNull:
.3337	a9 00		lda #$00			lda 	#0 							; clear null string
.3339	8d ce 0a	sta $0ace			sta 	NullString
.333c	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.333e	95 48		sta $48,x			sta 	esInt0,x
.3340	a9 0a		lda #$0a			lda 	#NullString >> 8
.3342	95 50		sta $50,x			sta 	esInt1,x
.3344	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0c1a					srcStrLen:
>0c1a							.fill 	1
.3345					StringWrite:
.3345	aa		tax				tax
.3346	48		pha				pha
.3347	98		tya				tya
.3348	48		pha				pha
.3349	20 70 33	jsr $3370			jsr 	CheckOverwriteCurrent
.334c	b0 0d		bcs $335b			bcs		_SWCopyCurrent
.334e	20 ae 33	jsr $33ae			jsr 	RequiresConcretion
.3351	90 0e		bcc $3361			bcc 	_SWWriteReference
.3353	20 11 34	jsr $3411			jsr 	CheckSpecialConcretion
.3356	b0 09		bcs $3361			bcs 	_SWWriteReference
.3358	20 c2 33	jsr $33c2			jsr 	AllocateHardMemory
.335b					_SWCopyCurrent:
.335b	20 f5 33	jsr $33f5			jsr 	CopyStringToHardMemory
.335e	4c 6c 33	jmp $336c			jmp 	_SWExit
.3361					_SWWriteReference
.3361	a0 00		ldy #$00			ldy 	#0
.3363	a5 2a		lda $2a				lda 	temp0
.3365	91 2c		sta ($2c),y			sta 	(temp1),y
.3367	c8		iny				iny
.3368	a5 2b		lda $2b				lda 	temp0+1
.336a	91 2c		sta ($2c),y			sta 	(temp1),y
.336c					_SWExit:
.336c	68		pla				pla
.336d	a8		tay				tay
.336e	68		pla				pla
.336f	60		rts				rts
.3370					CheckOverwriteCurrent:
.3370	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3372	b5 51		lda $51,x			lda 	esInt1+1,x
.3374	85 2b		sta $2b				sta 	temp0+1
.3376	b5 49		lda $49,x			lda 	esInt0+1,x
.3378	85 2a		sta $2a				sta 	temp0
.337a	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.337c	8d 1a 0c	sta $0c1a			sta 	srcStrLen
.337f	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3381	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3383	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.3385	85 2d		sta $2d				sta 	temp1+1
.3387	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3389	b1 2c		lda ($2c),y			lda 	(temp1),y
.338b	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.338d	90 1b		bcc $33aa			bcc 	_COCFail 				; in hard memory.
.338f	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3391	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3393	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3395	85 2e		sta $2e				sta 	temp2
.3397	c8		iny				iny
.3398	b1 2c		lda ($2c),y			lda 	(temp1),y
.339a	e9 00		sbc #$00			sbc 	#0
.339c	85 2f		sta $2f				sta 	temp2+1
.339e	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.33a0	b1 2e		lda ($2e),y			lda 	(temp2),y
.33a2	38		sec				sec  							; maximum character capacity.
.33a3	e9 02		sbc #$02			sbc 	#2
.33a5	cd 1a 0c	cmp $0c1a			cmp 	srcStrLen 				; if >= the required length
.33a8	b0 02		bcs $33ac			bcs 	_COCCanReuse
.33aa					_COCFail:
.33aa	18		clc				clc
.33ab	60		rts				rts
.33ac					_COCCanReuse:
.33ac	38		sec				sec
.33ad	60		rts				rts
.33ae					RequiresConcretion:
.33ae	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33b0	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.33b2	b0 0a		bcs $33be			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.33b4	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.33b6	f0 08		beq $33c0			beq 	_RCFail 				; if not, this cannot be soft memory.
.33b8	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.33ba	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.33bc	90 02		bcc $33c0			bcc 	_RCFail 				; so concreting
.33be					_RCSucceed:
.33be	38		sec				sec
.33bf	60		rts				rts
.33c0					_RCFail:
.33c0	18		clc				clc
.33c1	60		rts				rts
.33c2					AllocateHardMemory:
.33c2	98		tya				tya
.33c3	48		pha				pha
.33c4	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; characters in string
.33c7	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.33c9	b0 04		bcs $33cf			bcs 	_AHMSetMax 				; max out that amount.
.33cb	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.33cd	90 02		bcc $33d1			bcc 	_AHMIsOkay
.33cf					_AHMSetMax:
.33cf	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.33d1					_AHMIsOkay:
.33d1	48		pha				pha	 							; save size to be allocated
.33d2	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.33d4	38		sec				sec  							; and copy result to TOS as target address.
.33d5	65 33		adc $33				adc 	highMemory
.33d7	85 33		sta $33				sta 	highMemory
.33d9	a5 34		lda $34				lda 	highMemory+1
.33db	69 ff		adc #$ff			adc 	#$FF
.33dd	85 34		sta $34				sta 	highMemory+1
.33df	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.33e1	68		pla				pla 							; get the total size of the storage block
.33e2	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.33e4	18		clc				clc
.33e5	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.33e7	69 01		adc #$01			adc 	#1
.33e9	91 2c		sta ($2c),y			sta 	(temp1),y
.33eb	a5 34		lda $34				lda 	highMemory+1
.33ed	69 00		adc #$00			adc 	#0
.33ef	c8		iny				iny
.33f0	91 2c		sta ($2c),y			sta 	(temp1),y
.33f2	68		pla				pla
.33f3	a8		tay				tay
.33f4	60		rts				rts
.33f5					CopyStringToHardMemory:
.33f5	98		tya				tya
.33f6	48		pha				pha
.33f7	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.33f9	b1 2c		lda ($2c),y			lda 	(temp1),y
.33fb	85 2e		sta $2e				sta 	temp2
.33fd	c8		iny				iny
.33fe	b1 2c		lda ($2c),y			lda 	(temp1),y
.3400	85 2f		sta $2f				sta 	temp2+1
.3402	ac 1a 0c	ldy $0c1a			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3405					_CSTHMLoop:
.3405	b1 2a		lda ($2a),y			lda 	(temp0),y
.3407	91 2e		sta ($2e),y			sta 	(temp2),y
.3409	88		dey				dey
.340a	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.340c	d0 f7		bne $3405			bne 	_CSTHMLoop
.340e	68		pla				pla
.340f	a8		tay				tay
.3410	60		rts				rts
.3411					CheckSpecialConcretion:
.3411	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; check string is null e.g. length = 0
.3414	f0 02		beq $3418			beq 	_CSCNullString
.3416	18		clc				clc
.3417	60		rts				rts
.3418					_CSCNullString:
.3418	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.341a	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.341d	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.341f	85 2a		sta $2a				sta 	temp0
.3421	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3423	85 2b		sta $2b				sta 	1+(temp0)
.3425	38		sec				sec
.3426	60		rts				rts

;******  Return to file: string/string.asm

.3427					stringHandler:
.3427	7c 2a 34	jmp ($342a,x)			jmp 	(stringVectors,x)
.342a					stringVectors:
>342a	8a 31					.word StringChrs           ; index 0
>342c	86 32					.word StrClone             ; index 2
>342e	fe 31					.word StringConcat         ; index 4
>3430	99 31					.word StringNull           ; index 6
>3432	b5 31					.word STRCompare           ; index 8
>3434	ac 32					.word CaseString           ; index 10
>3436	f1 32					.word StringSubstring      ; index 12
>3438	45 33					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.343a					section_end_string:
.343a					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1b					deTokeniseVector:
>0c1b							.fill 	2
.0c1d					lastCharacterClass:
>0c1d							.fill 	1
.0c1e					indent:
>0c1e							.fill 	1
.343a					ListLine:
.343a	48		pha				pha								; enter here to list to console. sets the output vector
.343b	a9 6f		lda #$6f			lda 	#(deTokenPrint) & $FF
.343d	8d 1b 0c	sta $0c1b			sta 	deTokeniseVector
.3440	a9 35		lda #$35			lda 	#(deTokenPrint) >> 8
.3442	8d 1c 0c	sta $0c1c			sta 	1+(deTokeniseVector)
.3445	68		pla				pla
.3446					Detokenise:
.3446	18		clc				clc 							; space required for line number.
.3447	69 06		adc #$06			adc 	#6
.3449	8d 1e 0c	sta $0c1e			sta 	indent
.344c	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.344e	8d 1d 0c	sta $0c1d			sta 	lastCharacterClass
.3451	a2 02		ldx #$02			ldx 	#2
.3453	20 83 30	jsr $3083			jsr 	MInt32False
.3456	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3458	b1 28		lda ($28),y			lda 	(codePtr),y
.345a	95 48		sta $48,x			sta 	esInt0,x
.345c	c8		iny				iny
.345d	b1 28		lda ($28),y			lda 	(codePtr),y
.345f	95 50		sta $50,x			sta 	esInt1,x
.3461	a9 84		lda #$84			lda 	#LTYLineNumber
.3463	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.3466	a9 0a		lda #$0a			lda 	#10 					; base 10
.3468	20 0e 35	jsr $350e			jsr 	DTPrintInteger 			; print as integer.
.346b	a0 00		ldy #$00			ldy 	#0 						; get length
.346d	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.346f	aa		tax				tax
.3470					_DTPadOut:
.3470	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3472	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.3475	e8		inx				inx
.3476	ec 1e 0c	cpx $0c1e			cpx 	indent
.3479	d0 f5		bne $3470			bne 	_DTPadOut
.347b	a0 03		ldy #$03			ldy 	#3 						; start position.
.347d					_DTListLoop
.347d	b1 28		lda ($28),y			lda 	(codePtr),y
.347f	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3481	f0 5e		beq $34e1			beq 	_DTIsString
.3483	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3485	f0 56		beq $34dd			beq 	_DTIsFloat
.3487	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3489	f0 16		beq $34a1			beq 	_DTHexConstant
.348b	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.348d	d0 06		bne $3495			bne 	_DTNotEnd
.348f	a9 ff		lda #$ff			lda 	#255 					; print CR
.3491	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.3494	60		rts				rts
.3495					_DTNotEnd:
.3495	c9 00		cmp #$00			cmp 	#0
.3497	30 38		bmi $34d1			bmi 	_DTIsToken
.3499	c9 40		cmp #$40			cmp 	#$40
.349b	90 3a		bcc $34d7			bcc 	_DTIsIdentifier
.349d	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.349f	d0 0d		bne $34ae			bne 	_DTConstant
.34a1					_DTHexConstant:
.34a1	a9 26		lda #$26			lda 	#"&"
.34a3	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.34a6	c8		iny				iny
.34a7	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.34a9	20 8b 35	jsr $358b			jsr 	DTSwitchMode
.34ac	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.34ae					_DTConstant:
.34ae	48		pha				pha
.34af	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.34b1	20 8b 35	jsr $358b			jsr 	DTSwitchMode
.34b4	a9 86		lda #$86			lda 	#LTYConstant
.34b6	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.34b9	a2 02		ldx #$02			ldx 	#2 						; get its value
.34bb	8a		txa				txa
.34bc	a2 0a		ldx #$0a		ldx	#10
.34be	20 71 31	jsr $3171		jsr	mainHandler
.34c1	aa		tax				tax
.34c2	68		pla				pla 							; get base back
.34c3	85 32		sta $32				sta 	tempShort
.34c5	98		tya				tya
.34c6	48		pha				pha
.34c7	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.34c9	20 0e 35	jsr $350e			jsr 	DTPrintInteger
.34cc	68		pla				pla
.34cd	a8		tay				tay
.34ce	4c 7d 34	jmp $347d			jmp 	_DTListLoop
.34d1					_DTIsToken:
.34d1	20 e4 35	jsr $35e4			jsr 	DTDecodeToken
.34d4	4c 7d 34	jmp $347d			jmp 	_DTListLoop
.34d7					_DTIsIdentifier:
.34d7	20 9d 35	jsr $359d			jsr 	DTIdentifier
.34da	4c 7d 34	jmp $347d			jmp 	_DTListLoop
.34dd					_DTIsFloat:
>34dd	db						.byte 	$DB
.34de	4c dd 34	jmp $34dd			jmp 	_DTIsFloat
.34e1					_DTIsString:
.34e1	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.34e3	20 8b 35	jsr $358b			jsr 	DTSwitchMode
.34e6	a9 81		lda #$81			lda 	#LTYString
.34e8	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.34eb	a9 22		lda #$22			lda 	#'"'						; open quote
.34ed	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.34f0	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.34f2	8a		txa				txa
.34f3	a2 0a		ldx #$0a		ldx	#10
.34f5	20 71 31	jsr $3171		jsr	mainHandler
.34f8	aa		tax				tax
.34f9	b5 48		lda $48,x			lda 	esInt0,x 					; copy string address to temp0
.34fb	85 2a		sta $2a				sta 	temp0
.34fd	b5 50		lda $50,x			lda 	esInt1,x
.34ff	85 2b		sta $2b				sta 	temp0+1
.3501	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3503	20 20 35	jsr $3520			jsr 	DTPrintLengthPrefix
.3506	a9 22		lda #$22			lda 	#'"'
.3508	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.350b	4c 7d 34	jmp $347d			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1f					tPrintCount:
>0c1f							.fill 	1
.350e					DTPrintInteger:
.350e	48		pha				pha									; save base
.350f	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3511	85 2a		sta $2a				sta 	temp0
.3513	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3515	85 2b		sta $2b				sta 	1+(temp0)
.3517	68		pla				pla
.3518	a8		tay				tay
.3519	8a		txa				txa
.351a	a2 0c		ldx #$0c		ldx	#12
.351c	20 71 31	jsr $3171		jsr	mainHandler
.351f	aa		tax				tax 								; then drop through here.
.3520					DTPrintLengthPrefix:
.3520	aa		tax				tax 								; A = 0 = don't case convert.
.3521	98		tya				tya
.3522	48		pha				pha
.3523	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3525	b1 2a		lda ($2a),y			lda 	(temp0),y
.3527	8d 1f 0c	sta $0c1f			sta 	tPrintCount
.352a	f0 1b		beq $3547			beq 	_DTPLPExit 					; empty string
.352c					_DTPLPLoop:
.352c	c8		iny				iny 								; get next.
.352d	b1 2a		lda ($2a),y			lda 	(temp0),y
.352f	29 7f		and #$7f			and 	#$7F
.3531	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3533	f0 0a		beq $353f			beq 	_DTPLPNoCase
.3535	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3537	90 06		bcc $353f			bcc 	_DTPLPNoCase
.3539	c9 5b		cmp #$5b			cmp 	#"Z"+1
.353b	b0 02		bcs $353f			bcs 	_DTPLPNoCase
.353d	49 20		eor #$20			eor 	#"A"^"a"
.353f					_DTPLPNoCase
.353f	20 4a 35	jsr $354a			jsr 	ListOutputCharacter 		; call handler
.3542	ce 1f 0c	dec $0c1f			dec 	tPrintCount 				; do all the characters
.3545	d0 e5		bne $352c			bne 	_DTPLPLoop
.3547					_DTPLPExit:
.3547	68		pla				pla
.3548	a8		tay				tay
.3549	60		rts				rts
.354a					ListOutputCharacter:
.354a	85 32		sta $32				sta 	tempShort
.354c	48		pha				pha
.354d	8a		txa				txa
.354e	48		pha				pha
.354f	98		tya				tya
.3550	48		pha				pha
.3551	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3553	c9 20		cmp #$20			cmp 	#32
.3555	b0 0c		bcs $3563			bcs		_LOCHiBit
.3557	09 40		ora #$40			ora 	#64 						; conversion
.3559	c9 40		cmp #$40			cmp 	#64							; make l/c
.355b	f0 06		beq $3563			beq 	_LOCHiBit
.355d	c9 5b		cmp #$5b			cmp 	#65+26
.355f	b0 02		bcs $3563			bcs 	_LOCHiBit
.3561	69 20		adc #$20			adc 	#32
.3563					_LOCHiBit:
.3563	20 6c 35	jsr $356c			jsr 	_LOCCallVector				; call o/p handler routine
.3566	68		pla				pla
.3567	a8		tay				tay
.3568	68		pla				pla
.3569	aa		tax				tax
.356a	68		pla				pla
.356b					_LOCExit:
.356b	60		rts				rts
.356c					_LOCCallVector:
.356c	6c 1b 0c	jmp ($0c1b)			jmp 	(deTokeniseVector)
.356f					deTokenPrint:
.356f	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3571	30 06		bmi $3579			bmi 	_dtpInk
.3573	a2 16		ldx #$16		ldx	#22
.3575	20 bf 14	jsr $14bf		jsr	deviceHandler
.3578	60		rts				rts
.3579	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.357b	f0 08		beq $3585			beq 	_dtpCR						; except $FF => CRLF
.357d	29 07		and #$07			and 	#7
.357f	a2 08		ldx #$08		ldx	#8
.3581	20 bf 14	jsr $14bf		jsr	deviceHandler
.3584	60		rts				rts
.3585					_dtpCR:
.3585	a2 04		ldx #$04		ldx	#4
.3587	20 bf 14	jsr $14bf		jsr	deviceHandler
.358a	60		rts				rts
.358b					DTSwitchMode:
.358b	cd 1d 0c	cmp $0c1d			cmp 	LastCharacterClass 			; if changed, update character class
.358e	f0 04		beq $3594			beq 	_DTSMNoChange
.3590	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.3593					_DTSMExit:
.3593	60		rts				rts
.3594					_DTSMNoChange:
.3594	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3596	f0 fb		beq $3593			beq 	_DTSMExit 					; need a space.
.3598	a9 20		lda #$20			lda 	#" "
.359a	4c 4a 35	jmp $354a			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.359d					DTIdentifier:
.359d	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.359f	20 8b 35	jsr $358b			jsr 	DTSwitchMode
.35a2	a9 87		lda #$87			lda 	#LTYIdentifier
.35a4	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.35a7					_DTILoop:
.35a7	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.35a9	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.35ab	d0 02		bne $35af			bne 	_DTINotUS
.35ad	a9 5f		lda #$5f			lda 	#"_"
.35af					_DTINotUS:
.35af	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.35b2	c8		iny				iny
.35b3	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.35b5	c9 3a		cmp #$3a			cmp 	#$3A
.35b7	90 ee		bcc $35a7			bcc 	_DTILoop
.35b9	c8		iny				iny
.35ba	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.35bc	f0 25		beq $35e3			beq 	_DTIExit 					; no postfix.
.35be	48		pha				pha
.35bf	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.35c1	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.35c4	a9 82		lda #$82			lda 	#LTYPunctuation
.35c6	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.35c9	68		pla				pla
.35ca	c9 3b		cmp #$3b			cmp 	#$3B
.35cc	f0 10		beq $35de			beq 	_DTIArray
.35ce	4a		lsr a				lsr 	a 							; array flag in C
.35cf	08		php				php
.35d0	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.35d2	f0 02		beq $35d6			beq 	_DTIDollar
.35d4	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.35d6					_DTIDollar:
.35d6	49 24		eor #$24			eor 	#"$"
.35d8	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.35db	28		plp				plp
.35dc	90 05		bcc $35e3			bcc 	_DTIExit
.35de					_DTIArray:
.35de	a9 28		lda #$28			lda 	#"("
.35e0	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.35e3					_DTIExit:
.35e3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.35e4					DTDecodeToken:
.35e4	a2 00		ldx #$00			ldx 	#0 							; table number to use
.35e6	b1 28		lda ($28),y			lda 	(codePtr),y
.35e8	c9 84		cmp #$84			cmp 	#$84
.35ea	b0 05		bcs $35f1			bcs 	_DTNotShift
.35ec	29 03		and #$03			and 	#3 							; get the shift 1..3
.35ee	0a		asl a				asl 	a 							; put 2 x in X
.35ef	aa		tax				tax
.35f0	c8		iny				iny
.35f1					_DTNotShift:
.35f1	bd f3 38	lda $38f3,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.35f4	85 2a		sta $2a				sta 	temp0 						; point into temp0
.35f6	bd f4 38	lda $38f4,x			lda 	TokenTableAddress+1,x
.35f9	85 2b		sta $2b				sta 	temp0+1
.35fb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.35fd	c8		iny				iny 								; consume it.
.35fe	aa		tax				tax
.35ff	98		tya				tya
.3600	48		pha				pha
.3601					_DTFindText:
.3601	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3603	f0 11		beq $3616			beq 	_DTFoundText
.3605	ca		dex				dex
.3606	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.3608	38		sec				sec
.3609	b1 2a		lda ($2a),y			lda 	(temp0),y
.360b	65 2a		adc $2a				adc 	temp0
.360d	85 2a		sta $2a				sta 	temp0
.360f	90 f0		bcc $3601			bcc 	_DTFindText
.3611	e6 2b		inc $2b				inc 	temp0+1
.3613	4c 01 36	jmp $3601			jmp 	_DTFindText
.3616					_DTFoundText:
.3616	a0 01		ldy #$01			ldy 	#1 							; get first character
.3618	b1 2a		lda ($2a),y			lda 	(temp0),y
.361a	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.361c	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.361e	90 11		bcc $3631			bcc 	_DTIsPunctuation
.3620	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3622	b0 0d		bcs $3631			bcs 	_DTIsPunctuation
.3624	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3626	20 8b 35	jsr $358b			jsr 	DTSwitchMode
.3629	a9 83		lda #$83			lda 	#LTYKeyword
.362b	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.362e	4c 3b 36	jmp $363b			jmp 	_DTPrint
.3631					_DTIsPunctuation:
.3631	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3633	20 8b 35	jsr $358b			jsr 	DTSwitchMode
.3636	a9 82		lda #$82			lda 	#LTYPunctuation
.3638	20 4a 35	jsr $354a			jsr 	ListOutputCharacter
.363b					_DTPrint:
.363b	a9 01		lda #$01			lda 	#1 							; fix case.
.363d	20 20 35	jsr $3520			jsr 	DTPrintLengthPrefix 		; print it out.
.3640	a0 00		ldy #$00			ldy 	#0
.3642	b1 2a		lda ($2a),y			lda 	(temp0),y
.3644	a8		tay				tay
.3645	b1 2a		lda ($2a),y			lda 	(temp0),y
.3647	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3649	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.364b	90 04		bcc $3651			bcc 	_DTIsNowPunctuation
.364d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.364f	90 05		bcc $3656			bcc 	_DTPExit
.3651					_DTIsNowPunctuation:
.3651	a9 01		lda #$01			lda 	#1
.3653	8d 1d 0c	sta $0c1d			sta		LastCharacterClass
.3656					_DTPExit:
.3656	68		pla				pla
.3657	a8		tay				tay
.3658	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c20					currentSet:
>0c20							.fill 	1
.3659					TokenSearch:
.3659	8a		txa				txa
.365a	48		pha				pha
.365b	98		tya				tya
.365c	48		pha				pha
.365d	a9 00		lda #$00			lda 	#0
.365f	8d 20 0c	sta $0c20			sta 	currentSet
.3662					_TSLoop:
.3662	ad 20 0c	lda $0c20			lda 	currentSet 					; 2 x currentset in X
.3665	0a		asl a				asl 	a
.3666	aa		tax				tax
.3667	bd f3 38	lda $38f3,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.366a	85 2a		sta $2a				sta 	temp0
.366c	bd f4 38	lda $38f4,x			lda 	TokenTableAddress+1,x
.366f	85 2b		sta $2b				sta 	temp0+1
.3671	20 98 36	jsr $3698			jsr 	TokenSearchOne 				; search one table
.3674	b0 0d		bcs $3683			bcs 	_TSFound 					; found a token.
.3676	ee 20 0c	inc $0c20			inc 	currentSet 					; next set
.3679	ad 20 0c	lda $0c20			lda 	currentSet
.367c	c9 04		cmp #$04			cmp 	#4
.367e	d0 e2		bne $3662			bne 	_TSLoop 					; back if not done all four.
.3680	18		clc				clc 								; clear carry and exit
.3681	90 10		bcc $3693			bcc 	_TSExit
.3683					_TSFound:
.3683	48		pha				pha 								; save token
.3684	ad 20 0c	lda $0c20			lda 	currentSet					; if set zero no shift
.3687	f0 05		beq $368e			beq 	_TSNoShift
.3689	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.368b	20 49 37	jsr $3749			jsr 	TokenWrite
.368e					_TSNoShift:
.368e	68		pla				pla 								; get token back
.368f	20 49 37	jsr $3749			jsr 	TokenWrite 					; write it
.3692	38		sec				sec 								; carry set indicating success
.3693					_TSExit:
.3693	68		pla				pla
.3694	a8		tay				tay
.3695	68		pla				pla
.3696	aa		tax				tax
.3697	60		rts				rts
.3698					TokenSearchOne:
.3698	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.369a					_TSOLoop:
.369a	a0 00		ldy #$00			ldy 	#0
.369c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.369e	f0 26		beq $36c6			beq 	_TSOFail 					; if zero, end of table
.36a0	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.36a3	f0 11		beq $36b6			beq 	_TSOCheckText
.36a5					_TSONext:
.36a5	e8		inx				inx 								; bump token
.36a6	a0 00		ldy #$00			ldy 	#0							; get length
.36a8	b1 2a		lda ($2a),y			lda 	(temp0),y
.36aa	38		sec				sec
.36ab	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.36ad	85 2a		sta $2a				sta 	temp0
.36af	90 e9		bcc $369a			bcc 	_TSOLoop
.36b1	e6 2b		inc $2b				inc 	temp0+1
.36b3	4c 9a 36	jmp $369a			jmp 	_TSOLoop
.36b6					_TSOCheckText:
.36b6	a8		tay				tay 								; compare length downto 1.
.36b7					_TSOCheckLoop:
.36b7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.36b9	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.36bc	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.36be	d0 e5		bne $36a5			bne 	_TSONext 					; different goto next.
.36c0	88		dey				dey 								; do all
.36c1	d0 f4		bne $36b7			bne 	_TSOCheckLoop
.36c3	8a		txa				txa 								; return token in A and carry set
.36c4	38		sec				sec
.36c5	60		rts				rts
.36c6					_TSOFail:
.36c6	18		clc				clc
.36c7	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.36c8					TokTest:
.36c8	a2 ff		ldx #$ff				ldx 	#$FF
.36ca	9a		txs					txs
.36cb	a9 e8		lda #$e8			lda 	#(TokenText1) & $FF
.36cd	85 28		sta $28				sta 	codePtr
.36cf	a9 36		lda #$36			lda 	#(TokenText1) >> 8
.36d1	85 29		sta $29				sta 	1+(codePtr)
.36d3	20 e8 36	jsr $36e8				jsr 	Tokenise
.36d6	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.36d8	bd e8 36	lda $36e8,x	_TokCheck:	lda 	TokenBytes1,x
.36db	dd 24 0c	cmp $0c24,x				cmp 	tokenBuffer,x
.36de	d0 fe		bne $36de	_TokFail:	bne 	_TokFail	 		; error.
.36e0	e8		inx					inx
.36e1	c9 80		cmp #$80				cmp 	#$80
.36e3	d0 f3		bne $36d8				bne 	_TokCheck
.36e5	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.36e8					TokenText1:
.36e8					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c21					tokenHeader:
>0c21							.fill 	3
.0c24					tokenBuffer:
>0c24							.fill 	256
.0d24					tokenBufferIndex:
>0d24							.fill 	1
.36e8					Tokenise:
.36e8	20 62 37	jsr $3762			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.36eb					TokeniseASCIIZ:
.36eb	20 73 37	jsr $3773			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.36ee	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.36f0	8d 24 0d	sta $0d24			sta 	tokenBufferIndex
.36f3	a8		tay				tay 								; start pointer
.36f4	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.36f6	8d 24 0c	sta $0c24			sta 	tokenBuffer
.36f9					_TokLoop:
.36f9	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.36fb	f0 46		beq $3743			beq 	_TokExit 					; if zero, then exit.
.36fd	c8		iny				iny 								; skip over spaces.
.36fe	c9 20		cmp #$20			cmp 	#" "
.3700	f0 f7		beq $36f9			beq 	_TokLoop
.3702	88		dey				dey 								; point back to character.
.3703	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3705	f0 18		beq $371f			beq 	_TokHexConst
.3707	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.3709	f0 23		beq $372e			beq 	_TokQString
.370b	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.370d	b0 26		bcs $3735			bcs 	_TokPunctuation
.370f	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3711	b0 29		bcs $373c			bcs 	_TokIdentifier
.3713	c9 3a		cmp #$3a			cmp 	#"9"+1
.3715	b0 1e		bcs $3735			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.3717	c9 30		cmp #$30			cmp 	#"0"
.3719	90 1a		bcc $3735			bcc 	_TokPunctuation 			; < 0, punctuation.
.371b	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.371d	d0 08		bne $3727			bne 	_TokConst
.371f					_TokHexConst:
.371f	c8		iny				iny									; consume token.
.3720	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3722	20 49 37	jsr $3749			jsr 	TokenWrite
.3725	a9 10		lda #$10			lda 	#16
.3727					_TokConst:
.3727	20 31 38	jsr $3831			jsr 	TokeniseInteger
.372a	b0 cd		bcs $36f9			bcs 	_TokLoop
.372c	90 18		bcc $3746			bcc 	_TokFail
.372e					_TokQString:
.372e	20 c7 38	jsr $38c7			jsr 	TokeniseString
.3731	b0 c6		bcs $36f9			bcs 	_TokLoop
.3733	90 11		bcc $3746			bcc 	_TokFail
.3735					_TokPunctuation:
.3735	20 a6 38	jsr $38a6			jsr 	TokenisePunctuation
.3738	b0 bf		bcs $36f9			bcs 	_TokLoop
.373a	90 0a		bcc $3746			bcc 	_TokFail
.373c					_TokIdentifier:
.373c	20 a2 37	jsr $37a2			jsr 	TokeniseIdentifier
.373f	b0 b8		bcs $36f9			bcs 	_TokLoop
.3741	90 03		bcc $3746			bcc 	_TokFail
.3743					_TokExit:
.3743	a9 01		lda #$01			lda 	#1
.3745	60		rts				rts
.3746					_TokFail:
.3746	a9 00		lda #$00			lda 	#0
.3748	60		rts				rts
.3749					TokenWrite:
.3749	85 32		sta $32				sta 	tempShort 					; save XA
.374b	48		pha				pha
.374c	8a		txa				txa
.374d	48		pha				pha
.374e	a5 32		lda $32				lda 	tempShort
.3750	ae 24 0d	ldx $0d24			ldx 	tokenBufferIndex 			; geet index
.3753	9d 24 0c	sta $0c24,x			sta 	tokenBuffer,x 				; write byte to buffer
.3756	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.3758	9d 25 0c	sta $0c25,x			sta 	tokenBuffer+1,x
.375b	ee 24 0d	inc $0d24			inc 	tokenBufferIndex 			; bump index
.375e	68		pla				pla
.375f	aa		tax				tax
.3760	68		pla				pla
.3761	60		rts				rts
.3762					TokeniseMakeASCIIZ:
.3762	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3764	b1 28		lda ($28),y			lda 	(codePtr),y
.3766	a8		tay				tay
.3767	c8		iny				iny 								; +1, the NULL goes here.
.3768	a9 00		lda #$00			lda 	#0
.376a	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.376c	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.376e	d0 02		bne $3772			bne 	_TMKAExit
.3770	e6 29		inc $29				inc 	codePtr+1
.3772					_TMKAExit:
.3772	60		rts				rts
.3773					TokeniseFixCase:
.3773	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3775	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3777					_TFCFlipQ:
.3777	8a		txa				txa
.3778	49 01		eor #$01			eor 	#1
.377a	aa		tax				tax
.377b					_TFCLoop:
.377b	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.377d	f0 22		beq $37a1			beq 	_TFCExit 					; if zero exit.
.377f	c9 20		cmp #$20			cmp 	#32 						; if control
.3781	90 1a		bcc $379d			bcc 	_TFCControl
.3783	c8		iny				iny 								; preconsume
.3784	c9 22		cmp #$22			cmp 	#'"'
.3786	f0 ef		beq $3777			beq 	_TFCFlipQ
.3788	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.378a	90 ef		bcc $377b			bcc 	_TFCLoop
.378c	c9 7b		cmp #$7b			cmp 	#"z"+1
.378e	b0 eb		bcs $377b			bcs 	_TFCLoop
.3790	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3792	d0 e7		bne $377b			bne 	_TFCLoop
.3794	88		dey				dey
.3795	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3797					_TFCWrite:
.3797	91 28		sta ($28),y			sta 	(codePtr),y
.3799	c8		iny				iny
.379a	4c 7b 37	jmp $377b			jmp 	_TFCLoop
.379d					_TFCControl:
.379d	a9 20		lda #$20			lda 	#" "
.379f	d0 f6		bne $3797			bne 	_TFCWrite
.37a1					_TFCExit:
.37a1	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.37a2					TokeniseIdentifier:
.37a2	a2 00		ldx #$00			ldx 	#0
.37a4					_TICopyID:
.37a4	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.37a6	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.37a8	f0 16		beq $37c0			beq 	_TICopyUnderscore
.37aa	c9 2e		cmp #$2e			cmp 	#"."
.37ac	f0 14		beq $37c2			beq 	_TICopyIn
.37ae	c9 30		cmp #$30			cmp 	#"0"
.37b0	90 1b		bcc $37cd			bcc 	_TIEndCopy
.37b2	c9 3a		cmp #$3a			cmp 	#"9"+1
.37b4	90 0c		bcc $37c2			bcc 	_TICopyIn
.37b6	c9 41		cmp #$41			cmp 	#"A"
.37b8	90 13		bcc $37cd			bcc 	_TIEndCopy
.37ba	c9 5b		cmp #$5b			cmp 	#"Z"+1
.37bc	b0 0f		bcs $37cd			bcs		_TIEndCopy
.37be	90 02		bcc $37c2			bcc 	_TICopyIn
.37c0					_TICopyUnderScore:
.37c0	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.37c2					_TICopyIn:
.37c2	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.37c3	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.37c6	8e cf 0a	stx $0acf			stx 	convertBuffer
.37c9	c8		iny				iny 								; next character
.37ca	4c a4 37	jmp $37a4			jmp 	_TICopyID 					; loop round
.37cd					_TIEndCopy:
.37cd	a9 24		lda #$24			lda 	#"$"
.37cf	20 24 38	jsr $3824			jsr 	TIDCheckCopy
.37d2	a9 23		lda #$23			lda 	#"#"
.37d4	20 24 38	jsr $3824			jsr 	TIDCheckCopy
.37d7	a9 28		lda #$28			lda 	#"("
.37d9	20 24 38	jsr $3824			jsr 	TIDCheckCopy
.37dc	20 59 36	jsr $3659			jsr 	TokenSearch 				; is it a token
.37df	b0 41		bcs $3822			bcs 	_TIExit 					; if so, then exit.
.37e1	98		tya				tya
.37e2	48		pha				pha
.37e3	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.37e5	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.37e8	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.37eb	c9 28		cmp #$28			cmp 	#"("
.37ed	d0 02		bne $37f1			bne 	_TINotArray
.37ef	ca		dex				dex 								; yes, remove it and convert to array.
.37f0	c8		iny				iny
.37f1					_TINotArray:
.37f1	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.37f4	c9 24		cmp #$24			cmp 	#"$"
.37f6	d0 03		bne $37fb			bne 	_TINotString
.37f8	ca		dex				dex
.37f9	c8		iny				iny
.37fa	c8		iny				iny
.37fb					_TINotString:
.37fb	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.37fe	c9 23		cmp #$23			cmp 	#"#"
.3800	d0 05		bne $3807			bne 	_TINotFloat
.3802	ca		dex				dex
.3803	c8		iny				iny
.3804	c8		iny				iny
.3805	c8		iny				iny
.3806	c8		iny				iny
.3807					_TINotFloat:
.3807	e8		inx				inx 								; write end marker for identifier.
.3808	98		tya				tya
.3809	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.380c	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.380f	a2 01		ldx #$01			ldx 	#1
.3811					_TIOutput:
.3811	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3814	29 3f		and #$3f			and 	#$3F
.3816	48		pha				pha
.3817	20 49 37	jsr $3749			jsr 	TokenWrite
.381a	e8		inx				inx
.381b	68		pla				pla
.381c	c9 3a		cmp #$3a			cmp 	#$3A
.381e	90 f1		bcc $3811			bcc 	_TIOutput
.3820	68		pla				pla
.3821	a8		tay				tay
.3822					_TIExit:
.3822	38		sec				sec 								; this can't fail.
.3823	60		rts				rts
.3824					TIDCheckCopy:
.3824	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3826	d0 08		bne $3830			bne 	_TIDCCExit
.3828	e8		inx				inx
.3829	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.382c	8e cf 0a	stx $0acf			stx 	convertBuffer
.382f	c8		iny				iny
.3830					_TIDCCExit:
.3830	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3831					TokeniseInteger:
.3831	85 2c		sta $2c				sta 	temp1 						; save base
.3833	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3835	8e cf 0a	stx $0acf			stx 	convertBuffer
.3838					_TIGetChars:
.3838	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.383a	c9 30		cmp #$30			cmp 	#"0"
.383c	90 1f		bcc $385d			bcc 	_TIEndGet
.383e	c9 3a		cmp #$3a			cmp 	#"9"+1
.3840	90 10		bcc $3852			bcc 	_TIHaveChar
.3842	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3844	c9 0a		cmp #$0a			cmp 	#10
.3846	f0 15		beq $385d			beq 	_TIEndGet
.3848	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.384a	c9 41		cmp #$41			cmp 	#"A"
.384c	90 0f		bcc $385d			bcc 	_TIEndGet
.384e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3850	b0 0b		bcs $385d			bcs 	_TIEndGet
.3852					_TIHaveChar:
.3852	e8		inx				inx 								; write into buffer.
.3853	8e cf 0a	stx $0acf			stx 	convertBuffer
.3856	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3859	c8		iny				iny 								; next char
.385a	4c 38 38	jmp $3838			jmp 	_TIGetChars
.385d					_TIEndGet:
.385d	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.385f	f0 1c		beq $387d			beq 	_TIFail
.3861	98		tya				tya
.3862	48		pha				pha
.3863	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3865	85 2a		sta $2a				sta 	temp0
.3867	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3869	85 2b		sta $2b				sta 	1+(temp0)
.386b	a9 00		lda #$00			lda 	#0 							; stack level 0
.386d	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.386f	a2 14		ldx #$14		ldx	#20
.3871	20 71 31	jsr $3171		jsr	mainHandler
.3874	68		pla				pla
.3875	a8		tay				tay
.3876	90 05		bcc $387d			bcc 	_TIFail 					; didn't convert.
.3878	20 7f 38	jsr $387f			jsr 	TIRecursiveOut 				; recursive output ?
.387b	38		sec				sec
.387c	60		rts				rts
.387d					_TIFail:
.387d	18		clc				clc
.387e	60		rts				rts
.387f					TIRecursiveOut:
.387f	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.3881	29 3f		and #$3f			and 	#$3F
.3883	09 40		ora #$40			ora 	#$40
.3885	48		pha				pha
.3886	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.3888	29 c0		and #$c0			and 	#$C0
.388a	05 50		ora $50				ora 	esInt1
.388c	05 58		ora $58				ora 	esInt2
.388e	05 60		ora $60				ora 	esInt3
.3890	f0 10		beq $38a2			beq 	_TIRONoRecursion
.3892	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3894					_TIROShift:
.3894	46 60		lsr $60				lsr 	esInt3
.3896	66 58		ror $58				ror 	esInt2
.3898	66 50		ror $50				ror 	esInt1
.389a	66 48		ror $48				ror 	esInt0
.389c	ca		dex				dex
.389d	d0 f5		bne $3894			bne 	_TIROShift
.389f	20 7f 38	jsr $387f			jsr 	TIRecursiveOut 				; call recursively
.38a2					_TIRONoRecursion:
.38a2	68		pla				pla 								; pull the old bit.
.38a3	4c 49 37	jmp $3749			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.38a6					TokenisePunctuation:
.38a6	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.38a8	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.38ab	c8		iny				iny
.38ac	b1 28		lda ($28),y			lda 	(codePtr),y
.38ae	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.38b1	c8		iny				iny 								; Y is +2
.38b2	a9 02		lda #$02			lda 	#2 							; 2 character string.
.38b4	8d cf 0a	sta $0acf			sta 	convertBuffer
.38b7	20 59 36	jsr $3659			jsr 	TokenSearch 				; search for that token.
.38ba	b0 0a		bcs $38c6			bcs 	_TIFound
.38bc	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.38bf	88		dey				dey 								; Y is now +1
.38c0	20 59 36	jsr $3659			jsr 	TokenSearch 				; search for that token.
.38c3	b0 01		bcs $38c6			bcs 	_TIFound
.38c5	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.38c6					_TIFound:
.38c6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.38c7					TokeniseString:
.38c7	c8		iny				iny 								; skip opening quote
.38c8	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.38ca	84 2a		sty $2a				sty 	temp0 						; save start.
.38cc					_TSGetLength:
.38cc	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.38ce	f0 21		beq $38f1			beq 	_TSFail						; end of line, fail
.38d0	c8		iny				iny
.38d1	e8		inx				inx
.38d2	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.38d4	d0 f6		bne $38cc			bne 	_TSGetLength
.38d6	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.38d8	20 49 37	jsr $3749			jsr 	TokenWrite
.38db	8a		txa				txa 								; output length
.38dc	20 49 37	jsr $3749			jsr 	TokenWrite
.38df	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.38e1	e0 00		cpx #$00			cpx 	#0 							; check ended
.38e3	f0 09		beq $38ee			beq 	_TSExit
.38e5					_TSOutput:
.38e5	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.38e7	20 49 37	jsr $3749			jsr 	TokenWrite
.38ea	c8		iny				iny
.38eb	ca		dex				dex
.38ec	d0 f7		bne $38e5			bne 	_TSOutput
.38ee					_TSExit:
.38ee	c8		iny				iny 								; skip ending quote
.38ef	38		sec				sec 								; return CS.
.38f0	60		rts				rts
.38f1					_TSFail:
.38f1	18		clc				clc
.38f2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.38f3					TokenTableAddress:
>38f3	fb 38						.word 	Group0Text
>38f5	c8 3a						.word 	Group1Text
>38f7	03 3c						.word 	Group2Text
>38f9	16 3c						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.38fb					Group0Text:
>38fb	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>38ff	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3902	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3906	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3909	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>390c	01 be					.byte $01,$be                          ; $8b >
>390e	01 bc					.byte $01,$bc                          ; $8c <
>3910	01 bd					.byte $01,$bd                          ; $8d =
>3912	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3915	01 ab					.byte $01,$ab                          ; $8f +
>3917	01 ad					.byte $01,$ad                          ; $90 -
>3919	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>391c	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>391f	01 aa					.byte $01,$aa                          ; $93 *
>3921	01 af					.byte $01,$af                          ; $94 /
>3923	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3927	01 de					.byte $01,$de                          ; $96 ^
>3929	01 a1					.byte $01,$a1                          ; $97 !
>392b	01 bf					.byte $01,$bf                          ; $98 ?
>392d	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3934	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>393a	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>393e	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3941	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3949	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>394f	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3954	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3959	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>395e	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3964	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>396c	01 a8					.byte $01,$a8                          ; $a4 (
>396e	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3973	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3978	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>397d	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3985	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>398a	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>398f	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3995	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>399a	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>399f	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>39a4	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>39ab	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>39b2	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>39b7	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>39be	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>39c5	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>39cb	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>39d2	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>39d8	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>39e0	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>39e6	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>39eb	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>39f1	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>39f7	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>39fd	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3a02	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3a07	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3a0e	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3a15	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3a1d	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3a25	01 c0					.byte $01,$c0                          ; $c3 @
>3a27	01 fe					.byte $01,$fe                          ; $c4 ~
>3a29	01 a6					.byte $01,$a6                          ; $c5 &
>3a2b	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3a31	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3a39	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3a3d	01 a9					.byte $01,$a9                          ; $c9 )
>3a3f	01 ba					.byte $01,$ba                          ; $ca :
>3a41	01 ac					.byte $01,$ac                          ; $cb ,
>3a43	01 bb					.byte $01,$bb                          ; $cc ;
>3a45	01 a7					.byte $01,$a7                          ; $cd '
>3a47	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3a4a	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3a4f	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3a54	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3a5a	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3a5e	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3a62	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3a66	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3a6c	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3a71	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3a75	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3a7b	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>3a80	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>3a86	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>3a8d	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>3a92	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3a99	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3a9e	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3aa3	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3aa8	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3aac	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3ab2	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3ab6	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3abd	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3ac3	01 ae					.byte $01,$ae                          ; $e6 .
>3ac5	01 a3					.byte $01,$a3                          ; $e7 #
>3ac7	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3ac8					Group1Text:
>3ac8	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3ace	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3ad3	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3ad8	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3add	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3ae1	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3ae5	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3aea	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3af2	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3af6	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3afb	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3b00	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3b04	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3b0a	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>3b0e	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3b12	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3b16	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3b1a	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>3b1e	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3b22	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3b26	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3b2a	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>3b2e	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3b32	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3b36	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3b3a	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>3b3e	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3b42	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3b46	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3b4a	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>3b4e	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>3b52	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>3b56	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>3b5a	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3b5e	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3b62	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3b66	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3b6a	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3b6e	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3b72	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3b76	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3b7a	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3b7e	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3b82	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3b86	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3b8a	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3b8e	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3b92	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3b96	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3b9a	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3b9e	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3ba2	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3ba6	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3baa	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3bae	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3bb2	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3bb6	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3bba	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3bbe	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3bc2	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3bc6	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3bca	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3bce	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3bd2	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3bd6	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3bda	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3bde	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3be2	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3be6	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3bea	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3bee	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3bf2	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3bf6	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3bfa	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3bfe	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3c02	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3c03					Group2Text:
>3c03	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3c09	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3c0f	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3c15	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3c16					Group3Text:
>3c16	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3c1d	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3c24	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3c25					tokeniserHandler:
.3c25	7c 28 3c	jmp ($3c28,x)			jmp 	(tokeniserVectors,x)
.3c28					tokeniserVectors:
>3c28	46 34					.word Detokenise           ; index 0
>3c2a	3a 34					.word ListLine             ; index 2
>3c2c	c8 36					.word TokTest              ; index 4
>3c2e	e8 36					.word Tokenise             ; index 6
>3c30	eb 36					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3c32					section_end_tokeniser:
.3c32					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3c32					AccessArray:
.3c32	e8		inx				inx
.3c33	8a		txa				txa
.3c34	a2 06		ldx #$06		ldx	#6
.3c36	20 71 31	jsr $3171		jsr	mainHandler
.3c39	48		pha				pha
.3c3a	a2 00		ldx #$00		ldx	#0
.3c3c	20 71 31	jsr $3171		jsr	mainHandler
.3c3f	68		pla				pla
.3c40	aa		tax				tax
.3c41	ca		dex				dex
.3c42	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3c44	15 59		ora $59,x			ora 	esInt2+1,x
.3c46	d0 33		bne $3c7b			bne 	_AABadIndex
.3c48	98		tya				tya
.3c49	48		pha				pha
.3c4a	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3c4c	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3c4e	b5 50		lda $50,x			lda 	esInt1,x
.3c50	85 2b		sta $2b				sta 	temp0+1
.3c52	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3c54	b5 49		lda $49,x			lda 	esInt0+1,x
.3c56	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3c58	c8		iny				iny
.3c59	b5 51		lda $51,x			lda 	esInt1+1,x
.3c5b	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3c5d	b0 1c		bcs $3c7b			bcs 	_AABadIndex 				; if >= then fail.
.3c5f	e8		inx				inx 								; point to index
.3c60	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3c62	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c64	20 80 3c	jsr $3c80			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3c67	ca		dex				dex
.3c68	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3c6a	18		clc				clc
.3c6b	b5 49		lda $49,x			lda 	esInt0+1,x
.3c6d	71 2a		adc ($2a),y			adc 	(temp0),y
.3c6f	95 48		sta $48,x			sta 	esInt0,x
.3c71	b5 51		lda $51,x			lda 	esInt1+1,x
.3c73	c8		iny				iny
.3c74	71 2a		adc ($2a),y			adc 	(temp0),y
.3c76	95 50		sta $50,x			sta 	esInt1,x
.3c78	68		pla				pla
.3c79	a8		tay				tay
.3c7a	60		rts				rts
.3c7b					_AABadIndex:
.3c7b	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3c7d	20 e0 14	jsr $14e0		jsr	errorHandler
.3c80					MultiplyTOSByA:
.3c80	48		pha				pha
.3c81	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3c83	85 2c		sta $2c				sta 	temp1
.3c85	b5 50		lda $50,x			lda 	esInt1,x
.3c87	85 2d		sta $2d				sta 	temp1+1
.3c89	68		pla				pla
.3c8a	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3c8c	36 50		rol $50,x			rol 	esInt1,x
.3c8e	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3c90	f0 17		beq $3ca9			beq 	_MTBAExit
.3c92	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3c94	d0 0f		bne $3ca5			bne 	_MTBANotFloat
.3c96	48		pha				pha
.3c97	18		clc				clc 								; so this will make it x 3
.3c98	b5 48		lda $48,x			lda 	esInt0,x
.3c9a	65 2c		adc $2c				adc 	temp1
.3c9c	95 48		sta $48,x			sta 	esInt0,x
.3c9e	b5 50		lda $50,x			lda 	esInt1,x
.3ca0	65 2d		adc $2d				adc 	temp1+1
.3ca2	95 50		sta $50,x			sta 	esInt1,x
.3ca4	68		pla				pla
.3ca5					_MTBANotFloat:
.3ca5	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3ca7	36 50		rol $50,x			rol 	esInt1,x
.3ca9					_MTBAExit:
.3ca9	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.3caa					CreateArray:
.3caa	20 d2 3d	jsr $3dd2			jsr 	AccessSetup 				; set up the basic stuff.
.3cad	ad 26 0d	lda $0d26			lda 	varType 					; is the variable type an array
.3cb0	4a		lsr a				lsr 	a
.3cb1	90 3f		bcc $3cf2			bcc 	_CANotArray 				; no, cause an error.
.3cb3	20 db 3e	jsr $3edb			jsr 	FindVariable 				; does the variable exist already
.3cb6	b0 35		bcs $3ced			bcs 	_CAFound 					; cannot redefine it.
.3cb8	20 0f 3e	jsr $3e0f			jsr 	CreateVariable 				; create the variable entry.
.3cbb	ac 27 0d	ldy $0d27			ldy 	varEnd 						; point Y to the end of the variable entry.
.3cbe	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3cc0	48		pha				pha
.3cc1	a5 2b		lda $2b				lda 	temp0+1
.3cc3	48		pha				pha
.3cc4	ad 26 0d	lda $0d26			lda 	varType 					; push variable type on the stack.
.3cc7	48		pha				pha
.3cc8	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3cca	a2 06		ldx #$06		ldx	#6
.3ccc	20 71 31	jsr $3171		jsr	mainHandler
.3ccf	a2 00		ldx #$00		ldx	#0
.3cd1	20 71 31	jsr $3171		jsr	mainHandler
.3cd4	68		pla				pla 		 						; restore type and position.
.3cd5	8d 26 0d	sta $0d26			sta 	varType
.3cd8	68		pla				pla
.3cd9	85 2b		sta $2b				sta 	temp0+1
.3cdb	68		pla				pla
.3cdc	85 2a		sta $2a				sta 	temp0
.3cde	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3ce0	29 e0		and #$e0			and 	#$E0
.3ce2	05 58		ora $58				ora 	esInt2
.3ce4	05 60		ora $60				ora 	esInt3
.3ce6	f0 0f		beq $3cf7			beq 	_CASizeOk
.3ce8					_CASize:
.3ce8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3cea	20 e0 14	jsr $14e0		jsr	errorHandler
.3ced					_CAFound:
.3ced	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3cef	20 e0 14	jsr $14e0		jsr	errorHandler
.3cf2					_CANotArray:
.3cf2	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3cf4	20 e0 14	jsr $14e0		jsr	errorHandler
.3cf7					_CASizeOk:
.3cf7	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3cf9	d0 02		bne $3cfd			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3cfb	e6 49		inc $49				inc 	esInt0+1
.3cfd					_CANoCarry:
.3cfd	98		tya				tya
.3cfe	48		pha				pha
.3cff	a0 05		ldy #$05			ldy 	#5
.3d01	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3d03	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3d05	c8		iny				iny
.3d06	a5 36		lda $36				lda 	lowMemory+1
.3d08	91 2a		sta ($2a),y			sta 	(temp0),y
.3d0a	c8		iny				iny
.3d0b	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3d0d	91 2a		sta ($2a),y			sta 	(temp0),y
.3d0f	c8		iny				iny
.3d10	a5 50		lda $50				lda 	esInt1
.3d12	91 2a		sta ($2a),y			sta 	(temp0),y
.3d14	c8		iny				iny
.3d15	ae 26 0d	ldx $0d26			ldx 	varType 					; get the length per element
.3d18	bd 24 3d	lda $3d24,x			lda 	_CAActualSize-$3A-1,x
.3d1b	91 2a		sta ($2a),y			sta 	(temp0),y
.3d1d	aa		tax				tax 								; save size in X
.3d1e	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3d20	85 2a		sta $2a				sta 	temp0
.3d22	a5 36		lda $36				lda 	lowMemory+1
.3d24	85 2b		sta $2b				sta 	temp0+1
.3d26	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3d28	85 2c		sta $2c				sta 	temp1
.3d2a	85 2d		sta $2d				sta 	temp1+1
.3d2c					_CAInitialiseArray:
.3d2c	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3d2e	ad 26 0d	lda $0d26			lda 	varType 					; base type of array in A.
.3d31	29 fe		and #$fe			and 	#$FE
.3d33	20 79 3e	jsr $3e79			jsr 	ZeroTemp0Y
.3d36	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3d37	18		clc				clc
.3d38	65 2a		adc $2a				adc 	temp0
.3d3a	85 2a		sta $2a				sta 	temp0
.3d3c	85 35		sta $35				sta 	lowMemory
.3d3e	a5 2b		lda $2b				lda 	temp0+1
.3d40	69 00		adc #$00			adc 	#0
.3d42	85 2b		sta $2b				sta 	temp0+1
.3d44	85 36		sta $36				sta 	lowMemory+1
.3d46	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3d48	b0 1c		bcs $3d66			bcs 	_CAMemory
.3d4a	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3d4c	d0 02		bne $3d50			bne 	_CAIANoCarry
.3d4e	e6 2d		inc $2d				inc 	temp1+1
.3d50					_CAIANoCarry:
.3d50	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3d52	c5 2c		cmp $2c				cmp 	temp1
.3d54	d0 d6		bne $3d2c			bne 	_CAInitialiseArray
.3d56	a5 50		lda $50				lda 	esInt1
.3d58	c5 2d		cmp $2d				cmp 	temp1+1
.3d5a	d0 d0		bne $3d2c			bne 	_CAInitialiseArray
.3d5c	68		pla				pla
.3d5d	a8		tay				tay
.3d5e	60		rts				rts
.3d5f					_CAActualSize:
>3d5f	04 00						.byte 	VarISize,0
>3d61	02 00						.byte 	VarSSize,0
>3d63	06 00						.byte 	VarFSize,0
>3d65	db						.byte 	$DB
.3d66					_CAMemory:
.3d66	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3d68	20 e0 14	jsr $14e0		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0d25					varHash:
>0d25							.fill	1
.0d26					varType:
>0d26							.fill 	1
.0d27					varEnd:
>0d27							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3d6b					AccessVariable:
.3d6b	aa		tax				tax 								; stack in X
.3d6c	c8		iny				iny									; look at second character
.3d6d	b1 28		lda ($28),y			lda 	(codePtr),y
.3d6f	88		dey				dey
.3d70	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3d72	d0 15		bne $3d89			bne 	_AVLong 					; no, always use the hash tables.
.3d74	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3d76	38		sec				sec 	 							; make it 0-25
.3d77	e9 01		sbc #$01			sbc 	#1
.3d79	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3d7a	0a		asl a				asl 	a
.3d7b	95 48		sta $48,x			sta 	esInt0,x
.3d7d	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3d7f	95 50		sta $50,x			sta 	esInt1,x
.3d81	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3d83	95 40		sta $40,x			sta 	esType,x
.3d85	c8		iny				iny 								; skip over the variable reference in the code.
.3d86	c8		iny				iny  								; (1 letter, 1 type)
.3d87	8a		txa				txa 								; stack in A to return.
.3d88	60		rts				rts
.3d89					_AVLong:
.3d89	8a		txa				txa
.3d8a	48		pha				pha
.3d8b	20 d2 3d	jsr $3dd2			jsr 	AccessSetup 				; set up the basic information we need for later
.3d8e	20 db 3e	jsr $3edb			jsr 	FindVariable 				; does the variable exist already ?
.3d91	b0 0e		bcs $3da1			bcs 	_AVFound 					; yes, then its found
.3d93	ad 26 0d	lda $0d26			lda 	varType 					; otherwise, is the variable type an array
.3d96	4a		lsr a				lsr 	a
.3d97	90 05		bcc $3d9e			bcc 	_AVCanCreate 				; if not, we can autocreate
.3d99	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3d9b	20 e0 14	jsr $14e0		jsr	errorHandler
.3d9e					_AVCanCreate:
.3d9e	20 0f 3e	jsr $3e0f			jsr 	CreateVariable 				; variable does not exist, create it.
.3da1					_AVFound:
.3da1	68		pla				pla
.3da2	aa		tax				tax
.3da3	18		clc				clc 								; copy temp0 (variable record address)
.3da4	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3da6	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3da8	95 48		sta $48,x			sta 	esInt0,x
.3daa	a5 2b		lda $2b				lda 	temp0+1
.3dac	69 00		adc #$00			adc 	#0
.3dae	95 50		sta $50,x			sta 	esInt1,x
.3db0	a9 00		lda #$00			lda 	#0
.3db2	95 58		sta $58,x			sta 	esInt2,x
.3db4	95 60		sta $60,x			sta 	esInt3,x
.3db6	ac 26 0d	ldy $0d26			ldy 	varType 					; get the type ID from the type.
.3db9	b9 92 3d	lda $3d92,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3dbc	95 40		sta $40,x			sta 	esType,x
.3dbe	ac 27 0d	ldy $0d27			ldy 	varEnd 						; restore Y
.3dc1	ad 26 0d	lda $0d26			lda 	VarType 					; get variable type, put LSB into C
.3dc4	4a		lsr a				lsr 	a
.3dc5	90 03		bcc $3dca			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3dc7	20 32 3c	jsr $3c32			jsr 	AccessArray 				; array lookup. if LSB was set.
.3dca					_AVNotArray:
.3dca	8a		txa				txa 								; return stack in A and return
.3dcb	60		rts				rts
.3dcc					_AVTypeTable:
>3dcc	80 80						.byte 	$80,$80						; integer
>3dce	c0 c0						.byte 	$C0,$C0 					; string
>3dd0	81 81						.byte 	$81,$81 					; float
.3dd2					AccessSetup:
.3dd2	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3dd4	8d 25 0d	sta $0d25			sta 	varHash
.3dd7	98		tya				tya
.3dd8	48		pha				pha
.3dd9	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3ddb	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3ddd	b0 0b		bcs $3dea			bcs 	_ASComplete
.3ddf	18		clc				clc 								; add to the hash. Might improve this.
.3de0	6d 25 0d	adc $0d25			adc 	varHash
.3de3	8d 25 0d	sta $0d25			sta 	varHash
.3de6	c8		iny				iny 								; next character
.3de7	4c d9 3d	jmp $3dd9			jmp 	_ASLoop
.3dea					_ASComplete:
.3dea	8d 26 0d	sta $0d26			sta 	varType 					; save variable type byte
.3ded	c8		iny				iny
.3dee	8c 27 0d	sty $0d27			sty 	varEnd 						; save the ending position.
.3df1	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3df2	e9 3a		sbc #$3a			sbc 	#$3A
.3df4	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3df5	0a		asl a				asl 	a
.3df6	0a		asl a				asl 	a
.3df7	0a		asl a				asl 	a 							; 2 bytes/word
.3df8	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3dfa	ad 25 0d	lda $0d25			lda 	varHash 					; get hash
.3dfd	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3dff	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3e00	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3e02	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3e04	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3e06	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3e08	69 00		adc #$00			adc 	#0
.3e0a	85 3c		sta $3c				sta 	hashList+1
.3e0c	68		pla				pla
.3e0d	a8		tay				tay
.3e0e	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.3e0f					CreateVariable:
.3e0f	98		tya				tya 								; push Y on the stack twice.
.3e10	48		pha				pha									; position in code of the new variable.
.3e11	48		pha				pha
.3e12	ae 26 0d	ldx $0d26			ldx 	varType 					; get var type 0-5 from the var type
.3e15	bd 39 3e	lda $3e39,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3e18	48		pha				pha 								; save length
.3e19	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3e1b	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3e1d	a5 36		lda $36				lda 	lowMemory+1
.3e1f	85 2b		sta $2b				sta 	temp0+1
.3e21	68		pla				pla 								; get length
.3e22	18		clc				clc 								; add to low memory.
.3e23	65 35		adc $35				adc 	lowMemory
.3e25	85 35		sta $35				sta 	lowMemory
.3e27	90 08		bcc $3e31			bcc 	_CVNoCarry
.3e29	e6 36		inc $36				inc 	lowMemory+1
.3e2b	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3e2d	c5 34		cmp $34				cmp 	highMemory+1
.3e2f	b0 3d		bcs $3e6e			bcs 	_CVMemory
.3e31					_CVNoCarry:
.3e31	ad 25 0d	lda $0d25			lda 	varHash 					; store hash at offset 4.
.3e34	a0 04		ldy #$04			ldy 	#4
.3e36	91 2a		sta ($2a),y			sta 	(temp0),y
.3e38	68		pla				pla 								; offset, work out where the variable name is.
.3e39	18		clc				clc
.3e3a	65 28		adc $28				adc 	codePtr
.3e3c	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3e3e	91 2a		sta ($2a),y			sta 	(temp0),y
.3e40	a5 29		lda $29				lda 	codePtr+1
.3e42	69 00		adc #$00			adc 	#0
.3e44	c8		iny				iny
.3e45	91 2a		sta ($2a),y			sta 	(temp0),y
.3e47	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3e4a	b0 03		bcs $3e4f			bcs 	_CVNotImmediate
.3e4c	20 b1 3e	jsr $3eb1			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3e4f					_CVNotImmediate:
.3e4f	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3e51	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3e53	91 2a		sta ($2a),y			sta 	(temp0),y
.3e55	c8		iny				iny
.3e56	b1 3b		lda ($3b),y			lda 	(hashList),y
.3e58	91 2a		sta ($2a),y			sta 	(temp0),y
.3e5a	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3e5c	91 3b		sta ($3b),y			sta 	(hashList),y
.3e5e	88		dey				dey
.3e5f	a5 2a		lda $2a				lda 	temp0
.3e61	91 3b		sta ($3b),y			sta 	(hashList),y
.3e63	ad 26 0d	lda $0d26			lda 	varType 					; type in A
.3e66	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3e68	20 79 3e	jsr $3e79			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3e6b	68		pla				pla
.3e6c	a8		tay				tay
.3e6d	60		rts				rts
.3e6e					_CVMemory:
.3e6e	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3e70	20 e0 14	jsr $14e0		jsr	errorHandler
>3e73	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3e75	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3e77	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3e79					ZeroTemp0Y:
.3e79	4a		lsr a				lsr 	a 							; bit 0 in carry
.3e7a	0a		asl a				asl 	a
.3e7b	b0 19		bcs $3e96			bcs 	_ZTExit 					; we don't initialise arrays.
.3e7d	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3e7f	f0 16		beq $3e97			beq 	_ZTWriteNullString 			; write "" string
.3e81	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3e83	f0 22		beq $3ea7			beq 	_ZTWriteFloat
.3e85	98		tya				tya
.3e86	48		pha				pha
.3e87	a9 00		lda #$00			lda 	#0
.3e89	91 2a		sta ($2a),y			sta 	(temp0),y
.3e8b	c8		iny				iny
.3e8c	91 2a		sta ($2a),y			sta 	(temp0),y
.3e8e	c8		iny				iny
.3e8f	91 2a		sta ($2a),y			sta 	(temp0),y
.3e91	c8		iny				iny
.3e92	91 2a		sta ($2a),y			sta 	(temp0),y
.3e94	68		pla				pla
.3e95	a8		tay				tay
.3e96					_ZTExit:
.3e96	60		rts				rts
.3e97					_ZTWriteNullString:
.3e97	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3e99	8d ce 0a	sta $0ace			sta 	NullString
.3e9c	a9 ce		lda #$ce			lda 	#NullString & $FF
.3e9e	91 2a		sta ($2a),y			sta 	(temp0),y
.3ea0	a9 0a		lda #$0a			lda 	#NullString >> 8
.3ea2	c8		iny				iny
.3ea3	91 2a		sta ($2a),y			sta 	(temp0),y
.3ea5	88		dey				dey
.3ea6	60		rts				rts
.3ea7					_ZTWriteFloat:
.3ea7	8a		txa				txa
.3ea8	48		pha				pha
.3ea9	a2 1e		ldx #$1e		ldx	#30
.3eab	20 06 19	jsr $1906		jsr	floatingpointHandler
.3eae	68		pla				pla
.3eaf	aa		tax				tax
.3eb0	60		rts				rts
.3eb1					CloneVariableName:
.3eb1	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3eb3	b1 2a		lda ($2a),y			lda 	(temp0),y
.3eb5	85 2e		sta $2e				sta 	temp2
.3eb7	c8		iny				iny
.3eb8	b1 2a		lda ($2a),y			lda 	(temp0),y
.3eba	85 2f		sta $2f				sta 	temp2+1
.3ebc	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3ebe	91 2a		sta ($2a),y			sta 	(temp0),y
.3ec0	88		dey				dey
.3ec1	a5 35		lda $35				lda 	lowMemory
.3ec3	91 2a		sta ($2a),y			sta 	(temp0),y
.3ec5	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3ec7					_CVNCopy:
.3ec7	b1 2e		lda ($2e),y			lda		(temp2),y
.3ec9	91 35		sta ($35),y			sta 	(lowMemory),y
.3ecb	c8		iny				iny
.3ecc	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3ece	90 f7		bcc $3ec7			bcc 	_CVNCopy
.3ed0	98		tya				tya 								; add Y to low memory
.3ed1	18		clc				clc
.3ed2	65 35		adc $35				adc 	lowMemory
.3ed4	85 35		sta $35				sta 	lowMemory
.3ed6	90 02		bcc $3eda			bcc 	_CVNNoCarry
.3ed8	e6 36		inc $36				inc 	lowMemory+1
.3eda					_CVNNoCarry:
.3eda	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.3edb					FindVariable:
.3edb	98		tya				tya
.3edc	48		pha				pha
.3edd	98		tya				tya 								; point temp2 to the actual name
.3ede	18		clc				clc 								; in memory of the variable being created
.3edf	65 28		adc $28				adc 	codePtr
.3ee1	85 2e		sta $2e				sta 	temp2
.3ee3	a5 29		lda $29				lda 	codePtr+1
.3ee5	69 00		adc #$00			adc 	#0
.3ee7	85 2f		sta $2f				sta 	temp2+1
.3ee9	a0 00		ldy #$00			ldy 	#0
.3eeb	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3eed	85 2a		sta $2a				sta 	temp0
.3eef	a5 3c		lda $3c				lda 	hashList+1
.3ef1	85 2b		sta $2b				sta 	temp0+1
.3ef3	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3ef5	b1 2a		lda ($2a),y			lda 	(temp0),y
.3ef7	f0 2c		beq $3f25			beq 	_FVFail
.3ef9	aa		tax				tax
.3efa	88		dey				dey		 							; get LSB
.3efb	b1 2a		lda ($2a),y			lda 	(temp0),y
.3efd	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3eff	86 2b		stx $2b				stx 	temp0+1
.3f01	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3f03	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f05	cd 25 0d	cmp $0d25			cmp 	varHash
.3f08	d0 e9		bne $3ef3			bne 	_FVNext 					; if not, no point in checking the name.
.3f0a	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3f0b	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f0d	85 2d		sta $2d				sta 	temp1+1
.3f0f	88		dey				dey
.3f10	b1 2a		lda ($2a),y			lda 	(temp0),y
.3f12	85 2c		sta $2c				sta 	temp1
.3f14	a0 00		ldy #$00			ldy 	#0
.3f16					_FVCheck:
.3f16	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3f18	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3f1a	d0 d7		bne $3ef3			bne 	_FVNext		 				; fail if different.
.3f1c	c8		iny				iny
.3f1d	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3f1f	90 f5		bcc $3f16			bcc 	_FVCheck
.3f21	68		pla				pla
.3f22	a8		tay				tay
.3f23	38		sec				sec
.3f24	60		rts				rts
.3f25					_FVFail:
.3f25	68		pla				pla
.3f26	a8		tay				tay
.3f27	18		clc				clc
.3f28	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.3f29					HashTableReset:
.3f29	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3f2b	a9 00		lda #$00			lda 	#0
.3f2d					_HTRClear:
.3f2d	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3f30	ca		dex				dex
.3f31	d0 fa		bne $3f2d			bne 	_HTRClear
.3f33	60		rts				rts

;******  Return to file: variable/variable.asm

.3f34					variableHandler:
.3f34	7c 37 3f	jmp ($3f37,x)			jmp 	(variableVectors,x)
.3f37					variableVectors:
>3f37	6b 3d					.word AccessVariable       ; index 0
>3f39	aa 3c					.word CreateArray          ; index 2
>3f3b	29 3f					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3f3d					section_end_variable:
.3f3d					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d28					endStorage:
>3f3d							.align 	256
.4000					programMemory:
>3fff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4000					section_end_footer:

;******  End of listing
