
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Mar 22 12:20:27 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$48					StackAddress = $48
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0048					esType:	.fill 	StackSize  					; type byte (see above)
>0050					esInt0:	.fill 	StackSize 					; integer or mantissa
>0058					esInt1:	.fill 	StackSize
>0060					esInt2:	.fill 	StackSize
>0068					esInt3:	.fill 	StackSize
>0070					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0078					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0080					endOfStack:
=$50					esMant0 = esInt0 							; synonyms.
=$58					esMant1 = esInt1
=$60					esMant2 = esInt2
=$68					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	b5 3a						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 42		lda #$42			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 97 1c	jsr $1c97		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 97 1c	jsr $1c97		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 2b 33	jsr $332b		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 e6 35	jsr $35e6		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 02 3e	jsr $3e02		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 d3 41	jsr $41d3		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 02 3e	jsr $3e02		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 50		sta $50,x			sta 	esInt0,x
.1062	95 58		sta $58,x			sta 	esInt1,x
.1064	95 60		sta $60,x			sta 	esInt2,x
.1066	95 68		sta $68,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 2b 33	jsr $332b		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 2b 33	jsr $332b		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 60		lda $60				lda 	esInt2 						; check the operand is zero.
.10b5	05 68		ora $68				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 2b 33	jsr $332b		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 2b 33	jsr $332b		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 50		lda $50				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 58		lda $58				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 50		lda $50				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 58		lda $58				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 58		lda $58				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 d3 41	jsr $41d3		jsr	variableHandler
.1284	a5 48		lda $48				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 50		lda $50				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 58		lda $58				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 50		lda $50				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 58		lda $58				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 58		sta $58				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 50		sta $50				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 58		inc $58				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 58		lda $58				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 50		lda $50				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 50		sta $50				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 51		lda $51				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 59		lda $59				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 52		ldx $52				ldx 	esInt0+2 					; end address
.13e4	a4 5a		ldy $5a				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 51		ldx $51				ldx 	esInt0+1 					; load address
.1408	a4 59		ldy $59				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 50		lda $50				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 58		lda $58				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 50		ldx $50				ldx 	esInt0 						; name into YX
.1427	a4 58		ldy $58				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 36 18	jsr $1836			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 36 18	jsr $1836			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 50		sta $50,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 58		sta $58,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 60		sta $60,x			sta 	esInt2,x
.156a	95 68		sta $68,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 10		ldx #$10		ldx	#16
.157a	20 2b 33	jsr $332b		jsr	mainHandler
.157d	20 36 18	jsr $1836			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 97 1c	jsr $1c97		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1836					EHPrintAscii:
.1836	a0 00		ldy #$00			ldy 	#0
.1838	b1 2a		lda ($2a),y			lda 	(temp0),y
.183a	aa		tax				tax
.183b	f0 0f		beq $184c			beq 	_EHPExit
.183d					_EHPLoop:
.183d	c8		iny				iny
.183e	8a		txa				txa
.183f	48		pha				pha
.1840	b1 2a		lda ($2a),y			lda 	(temp0),y
.1842	a2 16		ldx #$16		ldx	#22
.1844	20 f6 14	jsr $14f6		jsr	deviceHandler
.1847	68		pla				pla
.1848	aa		tax				tax
.1849	ca		dex				dex
.184a	d0 f1		bne $183d			bne 	_EHPLoop
.184c					_EHPExit:
.184c	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.184d					section_end_error:
.184d					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.184d					ExtensionHandler:
.184d	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.184f	f0 16		beq $1867			beq 	_ExtensionForce
.1851	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1853	d0 08		bne $185d			bne 	_ExtensionUnary 			; is passed in A.
.1855	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1857	c8		iny				iny
.1858	0a		asl a				asl 	a
.1859	aa		tax				tax
.185a	7c 5e 18	jmp ($185e,x)			jmp 	(Group2Vectors-12,x)
.185d					_ExtensionUnary:
.185d	48		pha				pha 								; save stack pos in A
.185e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1860	c8		iny				iny
.1861	0a		asl a				asl 	a
.1862	aa		tax				tax
.1863	68		pla				pla 								; restore stack pos and call group3 command.
.1864	7c 68 18	jmp ($1868,x)			jmp 	(Group3Vectors-12,X)
.1867					_ExtensionForce:
.1867	4c 80 18	jmp $1880			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.186a					Group2Vectors:
>186a	95 19					.word	Command_VPoke            ; $86 vpoke
>186c	98 19					.word	Command_VDoke            ; $87 vdoke
>186e	72 19					.word	Command_VLoad            ; $88 vload
>1870	92 18					.word	CommandMode              ; $89 mode
>1872	3b 19					.word	CommandPalette           ; $8a palette

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.1874					Group3Vectors:
>1874	d9 19					.word	Command_VPeek            ; $86 vpeek(
>1876	dc 19					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1878					XEvaluateInteger:
.1878	8a		txa				txa
.1879	a2 0a		ldx #$0a		ldx	#10
.187b	20 2b 33	jsr $332b		jsr	mainHandler
.187e	aa		tax				tax
.187f	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/mode.asm

.0be6					currentMode:
>0be6							.fill 	4
.1880					ForceMode0:
.1880	a2 00		ldx #$00			ldx 	#0
.1882	86 50		stx $50				stx 	esInt0 						; in case we do it.
.1884					_FMCheck:
.1884	bd 0f 19	lda $190f,x			lda 	CMModeList,x 				; do we need to switch ?
.1887	dd e6 0b	cmp $0be6,x			cmp 	currentMode,x
.188a	d0 11		bne $189d			bne 	CMSetMode 					; different so switch.
.188c	e8		inx				inx
.188d	e0 04		cpx #$04			cpx 	#4
.188f	d0 f3		bne $1884			bne 	_FMCheck
.1891	60		rts				rts
.1892					CommandMode:
.1892	a2 00		ldx #$00			ldx 	#0
.1894	20 78 18	jsr $1878			jsr 	XEvaluateInteger
.1897	a5 68		lda $68				lda 	esInt3
.1899	29 70		and #$70			and 	#$70
.189b	d0 06		bne $18a3			bne 	CMNoExpand
.189d					CMSetMode:
.189d	20 ee 18	jsr $18ee			jsr 	CMExpandMode
.18a0	4c b7 18	jmp $18b7			jmp 	CMUpdateMode
.18a3					CMNoExpand:
.18a3	a5 50		lda $50				lda 	esInt0
.18a5	8d e6 0b	sta $0be6			sta 	currentMode
.18a8	a5 58		lda $58				lda 	esInt1
.18aa	8d e7 0b	sta $0be7			sta 	currentMode+1
.18ad	a5 60		lda $60				lda 	esInt2
.18af	8d e8 0b	sta $0be8			sta 	currentMode+2
.18b2	a5 68		lda $68				lda 	esInt3
.18b4	8d e9 0b	sta $0be9			sta 	currentMode+3
.18b7					CMUpdateMode:
.18b7	a2 11		ldx #$11			ldx 	#$11
.18b9					_CMClear:
.18b9	a9 00		lda #$00			lda 	#0
.18bb	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.18be	ca		dex				dex
.18bf	10 f8		bpl $18b9			bpl 	_CMClear
.18c1	ad e9 0b	lda $0be9			lda 	currentMode+3 				; get current mode
.18c4	48		pha				pha 								; stack twice.
.18c5	48		pha				pha
.18c6	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.18c8	09 01		ora #$01			ora 	#$01 						; turn the output on.
.18ca	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.18cd	68		pla				pla 								; get back
.18ce	20 13 19	jsr $1913			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18d1	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.18d4	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.18d5	4a		lsr a				lsr 	a
.18d6	4a		lsr a				lsr 	a
.18d7	20 13 19	jsr $1913			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.18da	8d 2b 9f	sta $9f2b			sta 	$9F2B
.18dd	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.18df	ad e6 0b	lda $0be6			lda 	currentMode					; get L0 config byte
.18e2	20 1e 19	jsr $191e			jsr 	CMDecodeLayer 				; and decode layer 0
.18e5	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.18e7	ad e7 0b	lda $0be7			lda 	currentMode+1
.18ea	20 1e 19	jsr $191e			jsr 	CMDecodeLayer
.18ed	60		rts				rts
.18ee					CMExpandMode:
.18ee	a5 50		lda $50				lda 	esInt0 						; get mode number
.18f0	c9 01		cmp #$01			cmp 	#(CMEndModeList-CMModeList) >> 2
.18f2	b0 16		bcs $190a			bcs 	_CMModeError
.18f4	0a		asl a				asl 	a 							; x 4 into X
.18f5	0a		asl a				asl 	a
.18f6	aa		tax				tax
.18f7	98		tya				tya
.18f8	48		pha				pha
.18f9	a0 00		ldy #$00			ldy 	#0
.18fb					_CMEMCopy:
.18fb	bd 0f 19	lda $190f,x			lda 	CMModeList,x
.18fe	99 e6 0b	sta $0be6,y			sta 	currentMode,y
.1901	e8		inx				inx
.1902	c8		iny				iny
.1903	c0 04		cpy #$04			cpy 	#4
.1905	d0 f4		bne $18fb			bne 	_CMEMCopy
.1907	68		pla				pla
.1908	a8		tay				tay
.1909	60		rts				rts
.190a					_CMModeError:
.190a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.190c	20 18 15	jsr $1518		jsr	errorHandler
.190f					CMModeList:
>190f	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
.1913					CMEndModeList:
.1913					CMToScale:
.1913	29 03		and #$03			and 	#3 							; lower 2 bits only
.1915	aa		tax				tax 								; put in X for counting
.1916	a9 00		lda #$00			lda 	#0 							; zero result
.1918	38		sec				sec 								; first time rotate CS in
.1919					_CMTSLoop:
.1919	6a		ror a				ror 	a
.191a	ca		dex				dex
.191b	10 fc		bpl $1919			bpl 	_CMTSLoop
.191d	60		rts				rts
.191e					CMDecodeLayer:
.191e	48		pha				pha 								; save it.
.191f	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.1921	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.1924	68		pla				pla 								; get it back
.1925	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.1927	f0 02		beq $192b			beq 	_CMDLNotSet
.1929	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.192b					_CMDLNotSet:
.192b	e0 00		cpx #$00			cpx 	#0
.192d	f0 06		beq $1935			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.192f	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.1931	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.1934	60		rts				rts
.1935					_CMDLayer0:
.1935	09 80		ora #$80			ora 	#$80 						; tile base is $80
.1937	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.193a	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/palette.asm

.193b					CommandPalette:
.193b	a9 00		lda #$00			lda 	#0
.193d	a2 0c		ldx #$0c		ldx	#12
.193f	20 2b 33	jsr $332b		jsr	mainHandler
.1942	a2 02		ldx #$02		ldx	#2
.1944	20 2b 33	jsr $332b		jsr	mainHandler
.1947	a9 01		lda #$01			lda 	#1
.1949	a2 08		ldx #$08		ldx	#8
.194b	20 2b 33	jsr $332b		jsr	mainHandler
.194e	a5 50		lda $50				lda 	esInt0 					; get palette #
.1950	20 60 19	jsr $1960			jsr 	PointToPaletteA			; point to palette register
.1953	a5 51		lda $51				lda 	esInt0+1
.1955	8d 23 9f	sta $9f23			sta 	$9F23
.1958	a5 59		lda $59				lda 	esInt1+1
.195a	29 0f		and #$0f			and 	#$0F
.195c	8d 23 9f	sta $9f23			sta 	$9F23
.195f	60		rts				rts
.1960					PointToPaletteA:
.1960	0a		asl a				asl 	a 							; x 2 -> LSB
.1961	8d 20 9f	sta $9f20			sta 	$9F20
.1964	a9 00		lda #$00			lda 	#0 							; carry into A
.1966	2a		rol a				rol 	a
.1967	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.1969	8d 21 9f	sta $9f21			sta 	$9F21
.196c	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.196e	8d 22 9f	sta $9f22			sta 	$9F22
.1971	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.1972					Command_VLoad:
.1972	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.1974	20 a0 2b	jsr $2ba0			jsr 	EvaluateString
.1977	e8		inx				inx
.1978	20 3d 32	jsr $323d			jsr 	MInt32False
.197b	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.197d	95 50		sta $50,x			sta 	esInt0,x
.197f	a5 36		lda $36				lda 	lowMemory+1
.1981	95 58		sta $58,x			sta 	esInt1,x
.1983	ca		dex				dex
.1984	a2 0e		ldx #$0e		ldx	#14
.1986	20 f6 14	jsr $14f6		jsr	deviceHandler
.1989	a5 51		lda $51				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.198b	85 2a		sta $2a				sta 	temp0
.198d	a5 59		lda $59				lda 	esInt1+1
.198f	85 2b		sta $2b				sta 	temp0+1
.1991	20 fa 19	jsr $19fa			jsr 	LoadVRAMFile 					; load the VRAM file in.
.1994	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.1995					Command_VPoke:
.1995	38		sec				sec 						; one byte , CS
.1996	b0 01		bcs $1999			bcs 	CmdVideoWrite
.1998					Command_VDoke:
.1998	18		clc				clc 						; two bytes, CC
.1999					CmdVideoWrite:
.1999	08		php				php 						; save one or two btes
.199a	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.199c	20 78 18	jsr $1878			jsr 	XEvaluateInteger
.199f	20 bd 32	jsr $32bd			jsr 	CheckComma
.19a2	e8		inx				inx
.19a3	20 78 18	jsr $1878			jsr 	XEvaluateInteger
.19a6	ca		dex				dex
.19a7	20 b8 19	jsr $19b8			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.19aa	a5 51		lda $51				lda 	esInt0+1 			; get MSB of write value
.19ac	8d 23 9f	sta $9f23			sta 	$9F23
.19af	28		plp				plp 						; if it was Poke then exit
.19b0	b0 05		bcs $19b7			bcs 	_CVWExit
.19b2	a5 59		lda $59				lda 	esInt1+1 			; doke, write the MSB.
.19b4	8d 23 9f	sta $9f23			sta 	$9F23
.19b7					_CVWExit:
.19b7	60		rts				rts
.19b8					SetUpTOSVRamAddress:
.19b8	b5 60		lda $60,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.19ba	29 fe		and #$fe			and 	#$FE
.19bc	15 68		ora $68,x			ora 	esInt3,x
.19be	d0 14		bne $19d4			bne 	CVWValue
.19c0	b5 50		lda $50,x			lda 	esInt0,x			; set address up
.19c2	8d 20 9f	sta $9f20			sta 	$9F20
.19c5	b5 58		lda $58,x			lda 	esInt1,x
.19c7	8d 21 9f	sta $9f21			sta	 	$9F21
.19ca	b5 60		lda $60,x			lda 	esInt2,x
.19cc	29 01		and #$01			and 	#1
.19ce	09 10		ora #$10			ora 	#$10 				; step 1.
.19d0	8d 22 9f	sta $9f22			sta 	$9F22
.19d3	60		rts				rts
.19d4					CVWValue:
.19d4	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19d6	20 18 15	jsr $1518		jsr	errorHandler
.19d9					Command_VPeek:
.19d9	38		sec				sec 						; one byte , CS
.19da	b0 01		bcs $19dd			bcs 	CmdVideoRead
.19dc					Command_VDeek:
.19dc	18		clc				clc 						; two bytes, CC
.19dd					CmdVideoRead:
.19dd	08		php				php 						; save action on stack.
.19de	aa		tax				tax 						; save stack position
.19df	20 78 18	jsr $1878			jsr 	XEvaluateInteger 	; address
.19e2	20 b0 32	jsr $32b0			jsr 	CheckRightParen 	; closing right bracket.
.19e5	20 b8 19	jsr $19b8			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.19e8	20 3d 32	jsr $323d			jsr 	MInt32False 		; zero return.
.19eb	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.19ee	95 50		sta $50,x			sta 	esInt0,x
.19f0	28		plp				plp 						; check if DOKE (carry was clear)
.19f1	b0 05		bcs $19f8			bcs 	_CVRExit
.19f3	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.19f6	95 58		sta $58,x			sta 	esInt1,x
.19f8					_CVRExit:
.19f8	8a		txa				txa 						; return X position.
.19f9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0bea					compressMode:
>0bea							.fill 	1
.0beb					imageInfo:
>0beb							.fill 	X16MaxImages
.0c2b					imageAddr2Low:
>0c2b							.fill  	X16MaxImages
.0c6b					imageAddr2High:
>0c6b							.fill  	X16MaxImages
.19fa					LoadVRAMFile:
.19fa	8a		txa				txa
.19fb	48		pha				pha
.19fc	98		tya				tya
.19fd	48		pha				pha
.19fe					_LVRLoop:
.19fe	20 9c 1a	jsr $1a9c			jsr 	LVFGet 						; get the next (never access direct)
.1a01	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.1a03	f0 3e		beq $1a43			beq 	_LVRExit
.1a05	b0 41		bcs $1a48			bcs 	_LVRLoad 					; load data in ?
.1a07	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.1a09	90 0d		bcc $1a18			bcc 	_LVRSetAddress
.1a0b	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1a0d	90 2d		bcc $1a3c			bcc 	_LVRSetCompress
.1a0f	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.1a11	90 43		bcc $1a56			bcc 	_LVRSetSprite
.1a13	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1a15	20 18 15	jsr $1518		jsr	errorHandler
.1a18					_LVRSetAddress:
.1a18	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.1a1a	20 9c 1a	jsr $1a9c			jsr 	LVFGet
.1a1d	85 2c		sta $2c				sta 	temp1
.1a1f	a9 00		lda #$00			lda 	#0
.1a21	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1a23	66 2c		ror $2c				ror 	temp1
.1a25	6a		ror a				ror		a
.1a26	46 2d		lsr $2d				lsr 	temp1+1
.1a28	66 2c		ror $2c				ror 	temp1
.1a2a	6a		ror a				ror		a
.1a2b	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.1a2e	a5 2c		lda $2c				lda 	temp1
.1a30	8d 21 9f	sta $9f21			sta 	$9F21
.1a33	a5 2d		lda $2d				lda 	temp1+1
.1a35	09 10		ora #$10			ora 	#$10
.1a37	8d 22 9f	sta $9f22			sta 	$9F22
.1a3a	d0 c2		bne $19fe			bne 	_LVRLoop
.1a3c					_LVRSetCompress:
.1a3c	29 07		and #$07			and 	#7
.1a3e	8d ea 0b	sta $0bea			sta 	compressMode
.1a41	10 bb		bpl $19fe			bpl 	_LVRLoop
.1a43					_LVRExit:
.1a43	68		pla				pla
.1a44	a8		tay				tay
.1a45	68		pla				pla
.1a46	aa		tax				tax
.1a47	60		rts				rts
.1a48					_LVRLoad:
.1a48	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1a4a	aa		tax				tax
.1a4b					_LVRLCopy:
.1a4b	20 9c 1a	jsr $1a9c			jsr 	LVFGet 						; write to data.
.1a4e	8d 23 9f	sta $9f23			sta 	$9F23
.1a51	ca		dex				dex
.1a52	d0 f7		bne $1a4b			bne 	_LVRLCopy
.1a54	f0 a8		beq $19fe			beq 	_LVRLoop
.1a56					_LVRSetSprite:
.1a56	48		pha				pha 								; save on stack
.1a57	20 9c 1a	jsr $1a9c			jsr 	LVFGet 						; get the sprite number into X
.1a5a	aa		tax				tax
.1a5b	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.1a5d	b0 38		bcs $1a97			bcs 	_LVRSSValue
.1a5f	68		pla				pla 								; restore the data held in the first byte
.1a60	9d eb 0b	sta $0beb,x			sta 	imageInfo,x 				; and write into the sprite image table.
.1a63					_LVRAlignVRAM:
.1a63	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.1a66	29 1f		and #$1f			and 	#$1F
.1a68	f0 07		beq $1a71			beq 	_LVRAligned
.1a6a	a9 00		lda #$00			lda 	#$00
.1a6c	8d 23 9f	sta $9f23			sta 	$9F23
.1a6f	f0 f2		beq $1a63			beq 	_LVRAlignVRAM
.1a71					_LVRAligned:
.1a71	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.1a74	4a		lsr a				lsr 	a 	 						; first halve into temp1
.1a75	ad 21 9f	lda $9f21			lda 	$9F21
.1a78	6a		ror a				ror 	a
.1a79	85 2d		sta $2d				sta 	temp1+1
.1a7b	ad 20 9f	lda $9f20			lda 	$9F20
.1a7e	6a		ror a				ror 	a
.1a7f	85 2c		sta $2c				sta 	temp1
.1a81	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.1a83					_LVRShift:
.1a83	46 2d		lsr $2d				lsr 	temp1+1
.1a85	66 2c		ror $2c				ror 	temp1
.1a87	88		dey				dey
.1a88	d0 f9		bne $1a83			bne 	_LVRShift
.1a8a	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.1a8c	9d 6b 0c	sta $0c6b,x			sta 	imageAddr2High,x
.1a8f	a5 2c		lda $2c				lda 	temp1
.1a91	9d 2b 0c	sta $0c2b,x			sta 	imageAddr2Low,x
.1a94	4c fe 19	jmp $19fe			jmp 	_LVRLoop
.1a97					_LVRSSValue:
.1a97	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a99	20 18 15	jsr $1518		jsr	errorHandler
.1a9c	84 32		sty $32		LVFGet:	sty 	tempShort
.1a9e	a0 00		ldy #$00			ldy 	#0
.1aa0	b1 2a		lda ($2a),y			lda 	(temp0),y
.1aa2	a4 32		ldy $32				ldy	 	tempShort
.1aa4	e6 2a		inc $2a				inc 	temp0
.1aa6	d0 02		bne $1aaa			bne 	_LVFGExit
.1aa8	e6 2b		inc $2b				inc 	temp0+1
.1aaa					_LVFGExit:
.1aaa	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1aab					section_end_extension:
.1aab					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1aab					floatingpointHandler:
.1aab	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1aad	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.1ab0					section_end_floatingpoint:
.1ab0					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1ab0					ColdStartEntry:
.1ab0	a2 ff		ldx #$ff			ldx 	#$FF
.1ab2	9a		txs				txs
.1ab3	20 3c 1b	jsr $1b3c			jsr 	ForceStandardMode
.1ab6	a2 04		ldx #$04		ldx	#4
.1ab8	20 f6 14	jsr $14f6		jsr	deviceHandler
.1abb	a0 ff		ldy #$ff			ldy 	#255
.1abd					_CSBanner:
.1abd	c8		iny				iny
.1abe	b9 e4 1a	lda $1ae4,y			lda 	Intro,y
.1ac1	f0 14		beq $1ad7			beq 	_CSStart
.1ac3	c9 08		cmp #$08			cmp 	#8
.1ac5	90 08		bcc $1acf			bcc 	_CSInk
.1ac7	a2 16		ldx #$16		ldx	#22
.1ac9	20 f6 14	jsr $14f6		jsr	deviceHandler
.1acc	4c bd 1a	jmp $1abd			jmp 	_CSBanner
.1acf					_CSInk:
.1acf	a2 08		ldx #$08		ldx	#8
.1ad1	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ad4	4c bd 1a	jmp $1abd			jmp 	_CSBanner
.1ad7					_CSStart:
.1ad7	a2 14		ldx #$14		ldx	#20
.1ad9	20 2b 33	jsr $332b		jsr	mainHandler
.1adc	a2 06		ldx #$06		ldx	#6
.1ade	20 2b 33	jsr $332b		jsr	mainHandler
.1ae1	4c fc 1b	jmp $1bfc			jmp 	WarmStartEntry
>1ae4	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>1aec	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>1afc	20 2a 2a 2a 0d 0d
>1b02	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>1b0a	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>1b1a	32 30 32 31 0d 0d
>1b20	02 42 61 73 69 63 20				.text 	2,"Basic "
>1b27	30 2e 31 37					.text "0.17"
>1b2b	20 28						.text 	" ("
>1b2d	31 38 2d 4d 61 72 2d 32				.text "18-Mar-2021"
>1b35	30 32 31
>1b38	29 0d 0d 00					.text 	")",13,13,0
.1b3c					ForceStandardMode:
.1b3c	a9 fe		lda #$fe			lda 	#$FE
.1b3e	20 4d 18	jsr $184d		jsr	extensionHandler
.1b41	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.1b42					DeleteLine:
.1b42	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1b45	85 2a		sta $2a				sta 	temp0
.1b47	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b4a	85 2b		sta $2b				sta 	temp0+1
.1b4c	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.1b4e	a5 50		lda $50				lda 	esInt0 						; e.g. the linenumbers match
.1b50	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1b52	d0 07		bne $1b5b			bne 	_DLNext
.1b54	c8		iny				iny
.1b55	a5 58		lda $58				lda 	esInt1
.1b57	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.1b59	f0 06		beq $1b61			beq 	_DLFound
.1b5b	20 7f 1b	jsr $1b7f	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1b5e	d0 ec		bne $1b4c			bne 	_DLLoop
.1b60	60		rts				rts
.1b61					_DLFound:
.1b61	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.1b63	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b65	a8		tay				tay 								; so we copy from (temp0),y
.1b66	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1b68					_DLCopyDown:
.1b68	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.1b6a	81 2a		sta ($2a,x)			sta 	(temp0,x)
.1b6c	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.1b6e	d0 02		bne $1b72			bne 	_DLNoCarry
.1b70	e6 2b		inc $2b				inc 	temp0+1
.1b72					_DLNoCarry:
.1b72	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1b74	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.1b76	d0 f0		bne $1b68			bne 	_DLCopyDown
.1b78	a5 2b		lda $2b				lda 	temp0+1
.1b7a	c5 36		cmp $36				cmp 	lowMemory+1
.1b7c	d0 ea		bne $1b68			bne 	_DLCopyDown
.1b7e	60		rts				rts
.1b7f					IAdvanceTemp0:
.1b7f	84 32		sty $32				sty 	tempShort
.1b81	18		clc				clc
.1b82	a0 00		ldy #$00			ldy 	#0 							; get offset
.1b84	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.1b86	65 2a		adc $2a				adc 	temp0
.1b88	85 2a		sta $2a				sta 	temp0
.1b8a	90 02		bcc $1b8e			bcc 	_IATNoCarry
.1b8c	e6 2b		inc $2b				inc 	temp0+1
.1b8e					_IATNoCarry:
.1b8e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1b90	a4 32		ldy $32				ldy 	tempShort
.1b92	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.1b94	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1b95					InsertLine:
.1b95	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1b98	85 2a		sta $2a				sta 	temp0
.1b9a	ad c9 0a	lda $0ac9			lda 	basePage+1
.1b9d	85 2b		sta $2b				sta 	temp0+1
.1b9f					_ILLoop:
.1b9f	a0 01		ldy #$01			ldy 	#1
.1ba1	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ba3	c5 50		cmp $50				cmp 	esInt0
.1ba5	c8		iny				iny
.1ba6	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ba8	e5 58		sbc $58				sbc 	esInt1
.1baa	b0 05		bcs $1bb1			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.1bac	20 7f 1b	jsr $1b7f			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.1baf	d0 ee		bne $1b9f			bne 	_ILLoop
.1bb1					_ILFound:
.1bb1	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1bb3	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.1bb5	a5 36		lda $36				lda 	lowMemory+1
.1bb7	85 2d		sta $2d				sta 	temp1+1
.1bb9	ad e8 0d	lda $0de8			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.1bbc	18		clc				clc 								; add 3 for the line number and offset.
.1bbd	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.1bbf	a8		tay				tay
.1bc0	a2 00		ldx #$00			ldx 	#0
.1bc2	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.1bc4	91 2c		sta ($2c),y			sta 	(temp1),y
.1bc6	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.1bc8	c5 2a		cmp $2a				cmp 	temp0
.1bca	d0 06		bne $1bd2			bne 	_ILMNext
.1bcc	a5 2d		lda $2d				lda 	temp1+1
.1bce	c5 2b		cmp $2b				cmp 	temp0+1
.1bd0	f0 0b		beq $1bdd			beq 	_ILMCopy
.1bd2					_ILMNext:
.1bd2	a5 2c		lda $2c				lda 	temp1
.1bd4	d0 02		bne $1bd8			bne 	_ILNoBorrow
.1bd6	c6 2d		dec $2d				dec 	temp1+1
.1bd8					_ILNoBorrow:
.1bd8	c6 2c		dec $2c				dec 	temp1
.1bda	4c c2 1b	jmp $1bc2			jmp 	_ILMove 					; and go round again
.1bdd					_ILMCopy:
.1bdd	98		tya				tya 								; Y is the offset of the new line.
.1bde	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.1be0	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1be2	a5 50		lda $50				lda 	esInt0
.1be4	91 2a		sta ($2a),y			sta 	(temp0),y
.1be6	c8		iny				iny
.1be7	a5 58		lda $58				lda 	esInt1
.1be9	91 2a		sta ($2a),y			sta 	(temp0),y
.1beb	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.1bed					_ILMCopy2:
.1bed	b1 28		lda ($28),y			lda 	(codePtr),y
.1bef	c8		iny				iny
.1bf0	c8		iny				iny
.1bf1	c8		iny				iny
.1bf2	91 2a		sta ($2a),y			sta 	(temp0),y
.1bf4	88		dey				dey
.1bf5	88		dey				dey
.1bf6	cc e8 0d	cpy $0de8			cpy 	tokenBufferIndex
.1bf9	d0 f2		bne $1bed			bne 	_ILMCopy2
.1bfb	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.1bfc					WarmStartEntry:
.1bfc	a2 ff		ldx #$ff			ldx 	#$FF
.1bfe	9a		txs				txs
.1bff	20 3c 1b	jsr $1b3c			jsr 	ForceStandardMode
.1c02	a9 02		lda #$02			lda 	#2							; green text.
.1c04	a2 08		ldx #$08		ldx	#8
.1c06	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c09	a2 0c		ldx #$0c		ldx	#12
.1c0b	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c0e	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.1c10	85 28		sta $28				sta 	codePtr
.1c12	a5 2b		lda $2b				lda 	temp0+1
.1c14	85 29		sta $29				sta 	codePtr+1
.1c16	a2 06		ldx #$06		ldx	#6
.1c18	20 f6 14	jsr $14f6		jsr	deviceHandler
.1c1b	a2 08		ldx #$08		ldx	#8
.1c1d	20 02 3e	jsr $3e02		jsr	tokeniserHandler
.1c20	c9 00		cmp #$00			cmp 	#0
.1c22	f0 25		beq $1c49			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.1c24	a9 e5		lda #$e5			lda 	#(tokenHeader) & $FF
.1c26	85 28		sta $28				sta 	codePtr
.1c28	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.1c2a	85 29		sta $29				sta 	1+(codePtr)
.1c2c	ad e8 0c	lda $0ce8			lda 	tokenBuffer 				; is it a blank line, go get another line.
.1c2f	c9 80		cmp #$80			cmp 	#$80
.1c31	f0 c9		beq $1bfc			beq 	WarmStartEntry
.1c33	29 c0		and #$c0			and 	#$C0						; does it start with a number
.1c35	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.1c37	f0 15		beq $1c4e			beq 	HasLineNumber
.1c39	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.1c3b	8d e5 0c	sta $0ce5			sta 	tokenHeader 				; fake program line.
.1c3e	8d e6 0c	sta $0ce6			sta 	tokenHeader+1
.1c41	8d e7 0c	sta $0ce7			sta 	tokenHeader+2
.1c44	a2 16		ldx #$16		ldx	#22
.1c46	20 2b 33	jsr $332b		jsr	mainHandler
.1c49					WSEError:
.1c49	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.1c4b	20 18 15	jsr $1518		jsr	errorHandler
.1c4e					HasLineNumber:
.1c4e	a0 03		ldy #$03			ldy 	#3 							; get line number
.1c50	a9 00		lda #$00			lda 	#0
.1c52	a2 0a		ldx #$0a		ldx	#10
.1c54	20 2b 33	jsr $332b		jsr	mainHandler
.1c57	a5 60		lda $60				lda 	esInt2		 				; check in range (only 2 bytes)
.1c59	05 68		ora $68				ora 	esInt3
.1c5b	d0 ec		bne $1c49			bne 	WSEError
.1c5d	98		tya				tya 								; make codePtr point to code after the line number.
.1c5e	18		clc				clc 								; by skipping over the tokenised number.
.1c5f	65 28		adc $28				adc 	codePtr
.1c61	85 28		sta $28				sta 	codePtr
.1c63	90 02		bcc $1c67			bcc		_HLNNoCarry
.1c65	e6 29		inc $29				inc 	codePtr+1
.1c67					_HLNNoCarry:
.1c67	98		tya				tya 								; subtract that offset from the code buffer index
.1c68	38		sec				sec
.1c69	49 ff		eor #$ff			eor 	#$FF
.1c6b	6d e8 0d	adc $0de8			adc 	tokenBufferIndex
.1c6e	18		clc				clc 								; add space allowing for header & $80 trailer
.1c6f	69 04		adc #$04			adc 	#4
.1c71	8d e8 0d	sta $0de8			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1c74	20 42 1b	jsr $1b42			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1c77					_HLNNoDelete:
.1c77	ad e8 0d	lda $0de8			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1c7a	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1c7c	f0 0c		beq $1c8a			beq 	_HLMEditDone
.1c7e	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1c80	18		clc				clc 								; workspace (1k)
.1c81	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.1c83	c5 34		cmp $34				cmp 	highMemory+1
.1c85	b0 0b		bcs $1c92			bcs 	_HLMMemory 					; nope, won't allowit.
.1c87	20 95 1b	jsr $1b95			jsr 	InsertLine 					; insert the line in
.1c8a					_HLMEditDone:
.1c8a	a2 06		ldx #$06		ldx	#6
.1c8c	20 2b 33	jsr $332b		jsr	mainHandler
.1c8f	4c fc 1b	jmp $1bfc			jmp 	WarmStartEntry
.1c92					_HLMMemory:
.1c92	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.1c94	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1c97					interactionHandler:
.1c97	7c 9a 1c	jmp ($1c9a,x)			jmp 	(interactionVectors,x)
.1c9a					interactionVectors:
>1c9a	a0 1c					.word _DummyControlHandler ; index 0
>1c9c	b0 1a					.word ColdStartEntry       ; index 2
>1c9e	fc 1b					.word WarmStartEntry       ; index 4
.1ca0					_DummyControlHandler:
.1ca0	60		rts			rts

;******  Return to file: basic.asm

.1ca1					section_end_interaction:
.1ca1					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cab					dataPtr:
>0cab							.fill 	2
.0cad					dataIndex:
>0cad							.fill 	1
.1ca1					CommandRead:
.1ca1	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.1ca3	20 de 2b	jsr $2bde			jsr 	EvaluateReference
.1ca6	20 e7 1c	jsr $1ce7			jsr 	SwapDPCP 					; use the data pointer.
.1ca9	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.1cab	c8		iny				iny
.1cac	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1cae	f0 07		beq $1cb7			beq 	_CRInData
.1cb0	88		dey				dey
.1cb1	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.1cb3	aa		tax				tax
.1cb4	20 e8 23	jsr $23e8			jsr 	ScanForward
.1cb7					_CRInData:
.1cb7	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1cb9	20 8c 2b	jsr $2b8c			jsr 	Evaluate
.1cbc	ca		dex				dex 								; and write the value.
.1cbd	20 3b 1f	jsr $1f3b			jsr 	WriteValue
.1cc0	20 e7 1c	jsr $1ce7			jsr 	SwapDPCP 					; get the code pointer back.
.1cc3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1cc5	c8		iny				iny
.1cc6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.1cc8	f0 d7		beq $1ca1			beq 	CommandRead
.1cca	88		dey				dey
.1ccb	60		rts				rts
.1ccc					CommandData:
.1ccc	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1cce	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.1cd0	20 e8 23	jsr $23e8			jsr 	ScanForward
.1cd3	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.1cd4	60		rts				rts
.1cd5					CommandRestore:
.1cd5	ad c8 0a	lda $0ac8			lda 	basePage
.1cd8	8d ab 0c	sta $0cab			sta 	dataPtr
.1cdb	ad c9 0a	lda $0ac9			lda 	basePage+1
.1cde	8d ac 0c	sta $0cac			sta 	dataPtr+1
.1ce1	a9 03		lda #$03			lda 	#3
.1ce3	8d ad 0c	sta $0cad			sta 	dataIndex
.1ce6	60		rts				rts
.1ce7					SwapDPCP:
.1ce7	8a		txa				txa
.1ce8	48		pha				pha
.1ce9	98		tya				tya 								; swap Y, DataIndex
.1cea	ac ad 0c	ldy $0cad			ldy 	DataIndex
.1ced	8d ad 0c	sta $0cad			sta 	DataIndex
.1cf0	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.1cf2	ae ab 0c	ldx $0cab			ldx 	dataptr
.1cf5	8d ab 0c	sta $0cab			sta 	dataPtr
.1cf8	86 28		stx $28				stx 	codePtr
.1cfa	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.1cfc	ae ac 0c	ldx $0cac			ldx 	dataptr+1
.1cff	8d ac 0c	sta $0cac			sta 	dataPtr+1
.1d02	86 29		stx $29				stx 	codePtr+1
.1d04	68		pla				pla
.1d05	aa		tax				tax
.1d06	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.1d07					CommandGOSUB:
.1d07	20 a9 2b	jsr $2ba9			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1d0a	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1d0c	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1d0e	20 d8 32	jsr $32d8			jsr 	RSClaim
.1d11	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1d13	20 04 33	jsr $3304			jsr 	RSSavePosition
.1d16	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1d18	f0 1b		beq $1d35			beq 	GotoTOS 					; and do a GOTO there.
.1d1a					CommandRETURN:
.1d1a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1d1c	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1d1e	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1d20	f0 05		beq $1d27			beq 	_isok
.1d22	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.1d24	20 18 15	jsr $1518		jsr	errorHandler
.1d27					_isok:
.1d27	a9 01		lda #$01			lda 	#1
.1d29	20 17 33	jsr $3317			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1d2c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1d2e	20 fa 32	jsr $32fa			jsr 	RSFree
.1d31	60		rts				rts
.1d32					CommandGOTO:
.1d32	20 a9 2b	jsr $2ba9			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.1d35					GotoTOS:
.1d35	20 cc 26	jsr $26cc			jsr 	ResetCodeAddress 			; simple search.
.1d38					_GotoSearch:
.1d38	a0 00		ldy #$00			ldy 	#0 							; get offset
.1d3a	b1 28		lda ($28),y			lda 	(codePtr),y
.1d3c	f0 21		beq $1d5f			beq 	_GotoError 					; not found.
.1d3e	c8		iny				iny									; check LSB match
.1d3f	b1 28		lda ($28),y			lda 	(codePtr),y
.1d41	d5 50		cmp $50,x			cmp 	esInt0,x
.1d43	d0 07		bne $1d4c			bne 	_GotoNext
.1d45	c8		iny				iny
.1d46	b1 28		lda ($28),y			lda 	(codePtr),y
.1d48	d5 58		cmp $58,x			cmp 	esInt1,x
.1d4a	f0 10		beq $1d5c			beq 	_GotoFound
.1d4c					_GotoNext:
.1d4c	a0 00		ldy #$00			ldy 	#0 							; go next line
.1d4e	b1 28		lda ($28),y			lda 	(codePtr),y
.1d50	18		clc				clc
.1d51	65 28		adc $28				adc 	codePtr
.1d53	85 28		sta $28				sta 	codePtr
.1d55	90 e1		bcc $1d38			bcc 	_GotoSearch
.1d57	e6 29		inc $29				inc 	codePtr+1
.1d59	4c 38 1d	jmp $1d38			jmp 	_GotoSearch
.1d5c					_GotoFound:
.1d5c	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1d5e	60		rts				rts
.1d5f					_GotoError:
.1d5f	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1d61	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cae					InputBuffer:
>0cae							.fill 	MaxInputSize+1
.1d64					Command_Input:
.1d64	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1d66	c8		iny				iny
.1d67	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1d69	f0 f9		beq $1d64			beq 	Command_Input
.1d6b	88		dey				dey 							; undo consume
.1d6c	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1d6e	f0 54		beq $1dc4			beq 	_CIExit 				; : or EOL, exit
.1d70	c9 80		cmp #$80			cmp 	#TOK_EOL
.1d72	f0 50		beq $1dc4			beq 	_CIExit
.1d74	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1d76	90 12		bcc $1d8a			bcc 	_CIVariable
.1d78	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1d7a	d0 43		bne $1dbf			bne 	_CISyntax
.1d7c	a2 00		ldx #$00			ldx 	#0
.1d7e	20 a0 2b	jsr $2ba0			jsr 	EvaluateString 			; evaluate and print string
.1d81	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0
.1d84	20 93 1e	jsr $1e93			jsr 	PrintString
.1d87	4c 64 1d	jmp $1d64			jmp 	Command_Input
.1d8a					_CIVariable:
.1d8a	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1d8c	20 de 2b	jsr $2bde			jsr 	EvaluateReference  		; this is where its going
.1d8f					_CIRetry:
.1d8f	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1d91	a2 14		ldx #$14		ldx	#20
.1d93	20 f6 14	jsr $14f6		jsr	deviceHandler
.1d96	98		tya				tya
.1d97	48		pha				pha
.1d98	20 d8 1d	jsr $1dd8			jsr 	InputString 			; input a string (manually)
.1d9b	a2 01		ldx #$01			ldx 	#1
.1d9d	20 c5 1d	jsr $1dc5			jsr 	BufferToStackX 			; make stack,x ref input string.
.1da0	a5 48		lda $48				lda 	esType 					; if target type numeric
.1da2	29 40		and #$40			and 	#$40 					; then convert to number
.1da4	d0 11		bne $1db7			bne 	_CIWrite
.1da6	a2 01		ldx #$01			ldx 	#1
.1da8	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1dab	a9 0a		lda #$0a			lda 	#10
.1dad	20 ab 30	jsr $30ab			jsr 	MInt32FromString 		; convert it back from a string.
.1db0	68		pla				pla
.1db1	a8		tay				tay
.1db2	b0 03		bcs $1db7			bcs 	_CIWrite 				; successfully converted.
.1db4	18		clc				clc 							; default fail FP conversion
.1db5	90 d8		bcc $1d8f			bcc		_CIRetry				; failed, try again.
.1db7					_CIWrite:
.1db7	a2 00		ldx #$00			ldx 	#0
.1db9	20 3b 1f	jsr $1f3b			jsr 	WriteValue
.1dbc	4c 64 1d	jmp $1d64			jmp 	Command_Input
.1dbf					_CISyntax:
.1dbf	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1dc1	20 18 15	jsr $1518		jsr	errorHandler
.1dc4					_CIExit:
.1dc4	60		rts				rts
.1dc5					BufferToStackX:
.1dc5	a9 ae		lda #$ae			lda 	#InputBuffer & $FF
.1dc7	95 50		sta $50,x			sta 	esInt0,x
.1dc9	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.1dcb	95 58		sta $58,x			sta 	esInt1,x
.1dcd	a9 00		lda #$00			lda 	#0
.1dcf	95 60		sta $60,x			sta 	esInt2,x
.1dd1	95 68		sta $68,x			sta 	esInt3,x
.1dd3	a9 40		lda #$40			lda 	#$40
.1dd5	95 48		sta $48,x			sta 	esType,x
.1dd7	60		rts				rts
.1dd8					InputString:
.1dd8	a9 00		lda #$00			lda 	#0
.1dda	8d ae 0c	sta $0cae			sta 	InputBuffer
.1ddd					_InputLoop:
.1ddd	a2 02		ldx #$02		ldx	#2
.1ddf	20 f6 14	jsr $14f6		jsr	deviceHandler
.1de2	a2 0a		ldx #$0a		ldx	#10
.1de4	20 f6 14	jsr $14f6		jsr	deviceHandler
.1de7	c9 00		cmp #$00			cmp 	#0
.1de9	f0 f2		beq $1ddd			beq 	_InputLoop
.1deb	c9 08		cmp #$08			cmp 	#8
.1ded	f0 19		beq $1e08			beq 	_InputBackspace
.1def	c9 0d		cmp #$0d			cmp 	#13
.1df1	f0 21		beq $1e14			beq 	_InputExit
.1df3	ae ae 0c	ldx $0cae			ldx 	InputBuffer
.1df6	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1df8	f0 e3		beq $1ddd			beq 	_InputLoop
.1dfa	9d af 0c	sta $0caf,x			sta 	InputBuffer+1,x 		; write char
.1dfd	ee ae 0c	inc $0cae			inc 	InputBuffer 			; advance count.
.1e00					_InputPrintLoop:
.1e00	a2 14		ldx #$14		ldx	#20
.1e02	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e05	4c dd 1d	jmp $1ddd			jmp	 	_InputLoop
.1e08					_InputBackspace:
.1e08	ad ae 0c	lda $0cae			lda 	InputBuffer 			; at start
.1e0b	f0 d0		beq $1ddd			beq 	_InputLoop
.1e0d	ce ae 0c	dec $0cae			dec 	InputBuffer
.1e10	a9 08		lda #$08			lda 	#8
.1e12	d0 ec		bne $1e00			bne 	_InputPrintLoop
.1e14					_InputExit:
.1e14	a2 06		ldx #$06		ldx	#6
.1e16	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e19	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0ccf					lastPrintToken:
>0ccf							.fill 	1
.1e1a					Command_Print:
.1e1a	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1e1c	8d cf 0c	sta $0ccf			sta 	lastPrintToken
.1e1f	88		dey				dey
.1e20					_PrintLoopSkip:
.1e20	c8		iny				iny
.1e21					_PrintLoop:
.1e21	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1e23	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1e25	f0 5b		beq $1e82			beq 	_PrintExit
.1e27	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1e29	f0 57		beq $1e82			beq 	_PrintExit
.1e2b	8d cf 0c	sta $0ccf			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1e2e	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1e30	f0 ee		beq $1e20			beq 	_PrintLoopSkip
.1e32	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1e34	f0 3c		beq $1e72			beq	 	_PrintNewLine
.1e36	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1e38	f0 40		beq $1e7a			beq 	_PrintTab
.1e3a	20 8a 2b	jsr $2b8a			jsr 	EvaluateRoot 				; evaluate something at the root
.1e3d	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1e3f	85 2a		sta $2a				sta 	temp0
.1e41	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1e43	85 2b		sta $2b				sta 	1+(temp0)
.1e45	a5 48		lda $48				lda 	esType 						; get type
.1e47	f0 15		beq $1e5e			beq		_PrintInteger
.1e49	4a		lsr a				lsr 	a 							; check for floating point
.1e4a	b0 08		bcs $1e54			bcs 	_PrintFloat
.1e4c					_PrintString:
.1e4c	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1e4e	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0
.1e51	4c 6c 1e	jmp $1e6c			jmp 	_PrintTemp0 				; print no leading space.
.1e54					_PrintFloat:
.1e54	a9 00		lda #$00			lda 	#0 							; stack level.
.1e56	a2 16		ldx #$16		ldx	#22
.1e58	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.1e5b	4c 65 1e	jmp $1e65			jmp 	_PrintSpaceTemp0
.1e5e					_PrintInteger:
.1e5e	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1e60	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1e62	20 93 31	jsr $3193			jsr 	MInt32ToString				; convert to text
.1e65					_PrintSpaceTemp0:
.1e65	a9 20		lda #$20			lda 	#32
.1e67	a2 14		ldx #$14		ldx	#20
.1e69	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e6c					_PrintTemp0:
.1e6c	20 93 1e	jsr $1e93			jsr 	PrintString
.1e6f	4c 21 1e	jmp $1e21			jmp 	_PrintLoop
.1e72					_PrintNewLine:
.1e72	a2 06		ldx #$06		ldx	#6
.1e74	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e77	4c 20 1e	jmp $1e20			jmp 	_PrintLoopSkip
.1e7a					_PrintTab:
.1e7a	a2 1a		ldx #$1a		ldx	#26
.1e7c	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e7f	4c 20 1e	jmp $1e20			jmp 	_PrintLoopSkip
.1e82					_PrintExit:
.1e82	ad cf 0c	lda $0ccf			lda		lastPrintToken 				; check last token
.1e85	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.1e87	f0 09		beq $1e92			beq 	_PrintExit2
.1e89	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1e8b	f0 05		beq $1e92			beq 	_PrintExit2
.1e8d	a2 06		ldx #$06		ldx	#6
.1e8f	20 f6 14	jsr $14f6		jsr	deviceHandler
.1e92					_PrintExit2:
.1e92	60		rts				rts
.1e93					PrintString:
.1e93	8a		txa				txa
.1e94	48		pha				pha
.1e95	98		tya				tya
.1e96	48		pha				pha
.1e97	a0 00		ldy #$00			ldy 	#0							; get length
.1e99	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e9b	aa		tax				tax 								; into X
.1e9c	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.1e9e	f0 10		beq $1eb0			beq 	_PSExit
.1ea0	ca		dex				dex
.1ea1	8a		txa				txa
.1ea2	48		pha				pha
.1ea3	c8		iny				iny
.1ea4	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ea6	a2 14		ldx #$14		ldx	#20
.1ea8	20 f6 14	jsr $14f6		jsr	deviceHandler
.1eab	68		pla				pla
.1eac	aa		tax				tax
.1ead	4c 9c 1e	jmp $1e9c			jmp 	_PSLoop
.1eb0					_PSExit:
.1eb0	68		pla				pla
.1eb1	a8		tay				tay
.1eb2	68		pla				pla
.1eb3	aa		tax				tax
.1eb4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.1eb5					Command_CLS:
.1eb5	a2 04		ldx #$04		ldx	#4
.1eb7	20 f6 14	jsr $14f6		jsr	deviceHandler
.1eba	60		rts				rts
.1ebb					Command_Ink:
.1ebb	a2 00		ldx #$00			ldx 	#0
.1ebd	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger
.1ec0	a2 08		ldx #$08		ldx	#8
.1ec2	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ec5	60		rts				rts
.1ec6					Command_Paper:
.1ec6	a2 00		ldx #$00			ldx 	#0
.1ec8	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger
.1ecb	a2 12		ldx #$12		ldx	#18
.1ecd	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ed0	60		rts				rts
.1ed1					Command_Locate:
.1ed1	a2 00		ldx #$00			ldx 	#0
.1ed3	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger
.1ed6	20 bd 32	jsr $32bd			jsr 	CheckComma
.1ed9	e8		inx				inx
.1eda	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger
.1edd	98		tya				tya
.1ede	48		pha				pha
.1edf	a4 51		ldy $51				ldy 	esInt0+1
.1ee1	a5 50		lda $50				lda 	esInt0
.1ee3	a2 10		ldx #$10		ldx	#16
.1ee5	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ee8	68		pla				pla
.1ee9	a8		tay				tay
.1eea	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.1eeb					Command_VDU:
.1eeb	20 a9 2b	jsr $2ba9			jsr 	EvaluateRootInteger 			; get integer at root.
.1eee	a5 50		lda $50				lda 	esInt0
.1ef0	a2 14		ldx #$14		ldx	#20
.1ef2	20 f6 14	jsr $14f6		jsr	deviceHandler
.1ef5					_CVNext:
.1ef5	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.1ef7	c8		iny				iny
.1ef8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.1efa	f0 ef		beq $1eeb			beq 	Command_VDU
.1efc	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.1efe	d0 0a		bne $1f0a			bne 	_CVExit
.1f00	a5 58		lda $58				lda 	esInt1
.1f02	a2 14		ldx #$14		ldx	#20
.1f04	20 f6 14	jsr $14f6		jsr	deviceHandler
.1f07	4c f5 1e	jmp $1ef5			jmp 	_CVNext
.1f0a	88		dey		_CVExit:dey
.1f0b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.1f0c					Command_Assert:
.1f0c	20 a9 2b	jsr $2ba9			jsr 	EvaluateRootInteger 		; what is being asserted.
.1f0f	20 64 32	jsr $3264			jsr 	MInt32Zero 					; is it true ?
.1f12	f0 01		beq $1f15			beq 	_CAError
.1f14	60		rts				rts
.1f15					_CAError:
.1f15	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1f17	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.1f1a					Command_Dim:
.1f1a	a2 04		ldx #$04		ldx	#4
.1f1c	20 d3 41	jsr $41d3		jsr	variableHandler
.1f1f	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1f21	c8		iny				iny
.1f22	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1f24	f0 f4		beq $1f1a			beq 	Command_Dim
.1f26	88		dey				dey 								; unpick get
.1f27	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.1f28					CommandLet:
.1f28	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1f2a	20 de 2b	jsr $2bde			jsr 	EvaluateReference
.1f2d	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1f2f	20 a5 32	jsr $32a5			jsr 	CheckToken
.1f32	e8		inx				inx 								; do RHS
.1f33	20 8c 2b	jsr $2b8c			jsr 	Evaluate 					; evaluate and dereference
.1f36	ca		dex				dex
.1f37	20 3b 1f	jsr $1f3b			jsr 	WriteValue 					; write it out
.1f3a	60		rts				rts
.1f3b					WriteValue:
.1f3b	98		tya				tya
.1f3c	48		pha				pha
.1f3d	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1f40	b5 48		lda $48,x			lda 	esType,x 					; check the string flags match
.1f42	55 49		eor $49,x			eor 	esType+1,x 					; one string, one number causes an error.
.1f44	29 40		and #$40			and 	#$40
.1f46	d0 50		bne $1f98			bne		_WVType
.1f48	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1f4a	b5 48		lda $48,x			lda 	esType,x 					; check for string assignment
.1f4c	29 40		and #$40			and 	#$40
.1f4e	d0 1f		bne $1f6f			bne 	_WVCopyString
.1f50	b5 48		lda $48,x			lda 	esType,x 					; check both are integer.
.1f52	15 49		ora $49,x			ora 	esType+1,x
.1f54	4a		lsr a				lsr 	a
.1f55	90 22		bcc $1f79			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1f57	b5 48		lda $48,x			lda 	esType,x
.1f59	4a		lsr a				lsr 	a
.1f5a	90 3c		bcc $1f98			bcc 	_WVType
.1f5c	e8		inx				inx 								; force the value being written to be a float.
.1f5d	20 ee 27	jsr $27ee			jsr 	BPMakeFloat
.1f60	ca		dex				dex
.1f61	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 					; set Temp0 to write address
.1f64	e8		inx				inx
.1f65	8a		txa				txa
.1f66	a2 22		ldx #$22		ldx	#34
.1f68	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.1f6b	aa		tax				tax
.1f6c	4c 95 1f	jmp $1f95			jmp 	_WVCopyExit
.1f6f					_WVCopyString:
.1f6f	8a		txa				txa
.1f70	a2 10		ldx #$10		ldx	#16
.1f72	20 e6 35	jsr $35e6		jsr	stringHandler
.1f75	aa		tax				tax
.1f76	4c 95 1f	jmp $1f95			jmp 	_WVCopyExit
.1f79					_WVCopyData4:
.1f79	b5 48		lda $48,x			lda 	esType,x 					; is the int ref a byte ref ?
.1f7b	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1f7d	d0 10		bne $1f8f			bne 	_WVCopyData1
.1f7f	a0 03		ldy #$03			ldy 	#3
.1f81	b5 69		lda $69,x			lda 	esInt3+1,x
.1f83	91 2a		sta ($2a),y			sta 	(temp0),y
.1f85	88		dey				dey
.1f86	b5 61		lda $61,x			lda 	esInt2+1,x
.1f88	91 2a		sta ($2a),y			sta 	(temp0),y
.1f8a	88		dey				dey
.1f8b	b5 59		lda $59,x			lda 	esInt1+1,x
.1f8d	91 2a		sta ($2a),y			sta 	(temp0),y
.1f8f					_WVCopyData1:
.1f8f	a0 00		ldy #$00			ldy 	#0
.1f91	b5 51		lda $51,x			lda 	esInt0+1,x
.1f93	91 2a		sta ($2a),y			sta 	(temp0),y
.1f95					_WVCopyExit:
.1f95	68		pla				pla
.1f96	a8		tay				tay
.1f97	60		rts				rts
.1f98					_WVType:
.1f98	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1f9a	20 18 15	jsr $1518		jsr	errorHandler
.1f9d					TOSToTemp0:
.1f9d	b5 50		lda $50,x			lda 	esInt0,x
.1f9f	85 2a		sta $2a				sta 	temp0
.1fa1	b5 58		lda $58,x			lda 	esInt1,x
.1fa3	85 2b		sta $2b				sta 	temp0+1
.1fa5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.1fa6					Command_Poke:
.1fa6	a9 01		lda #$01			lda 	#1
.1fa8	d0 06		bne $1fb0			bne 	PokeGeneral
.1faa					Command_Doke:
.1faa	a9 02		lda #$02			lda 	#2
.1fac	d0 02		bne $1fb0			bne 	PokeGeneral
.1fae					Command_Loke:
.1fae	a9 03		lda #$03			lda 	#3
.1fb0					PokeGeneral:
.1fb0	48		pha				pha 								; save id (PDL = 123)
.1fb1	20 a9 2b	jsr $2ba9			jsr 	EvaluateRootInteger 		; target address
.1fb4	20 bd 32	jsr $32bd			jsr	 	CheckComma
.1fb7	e8		inx				inx
.1fb8	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger 			; what value to POKE ?
.1fbb	ca		dex				dex
.1fbc	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 					; temp0 points to the target address
.1fbf	84 32		sty $32				sty 	tempShort 					; save Y
.1fc1	68		pla				pla 								; get copy type (1-3) and dispatch
.1fc2	aa		tax				tax
.1fc3	ca		dex				dex
.1fc4	f0 14		beq $1fda			beq 	_Poke1
.1fc6	ca		dex				dex
.1fc7	f0 0b		beq $1fd4			beq 	_Poke2
.1fc9	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1fcb	a5 69		lda $69				lda 	esInt3+1
.1fcd	91 2a		sta ($2a),y			sta 	(temp0),y
.1fcf	88		dey				dey
.1fd0	a5 61		lda $61				lda 	esInt2+1
.1fd2	91 2a		sta ($2a),y			sta 	(temp0),y
.1fd4					_Poke2:
.1fd4	a0 01		ldy #$01			ldy 	#1
.1fd6	a5 59		lda $59				lda 	esInt1+1
.1fd8	91 2a		sta ($2a),y			sta 	(temp0),y
.1fda					_Poke1:
.1fda	a0 00		ldy #$00			ldy 	#0
.1fdc	a5 51		lda $51				lda 	esInt0+1
.1fde	91 2a		sta ($2a),y			sta 	(temp0),y
.1fe0	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1fe2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.1fe3					Command_Rem:
.1fe3					Command_Rem2:
.1fe3	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1fe5	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1fe7	d0 06		bne $1fef			bne 	_CRNotString
.1fe9	c8		iny				iny
.1fea	98		tya				tya
.1feb	38		sec				sec
.1fec	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1fee	a8		tay				tay
.1fef					_CRNotString:
.1fef	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.1ff0					CommandStop:
.1ff0	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1ff2	20 18 15	jsr $1518		jsr	errorHandler
.1ff5					CommandEnd:
.1ff5	4c 26 33	jmp $3326			jmp 	WarmStart
.1ff8					CommandXemu:
.1ff8	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1ffb					AdvanceNextLine:
.1ffb	a0 00		ldy #$00			ldy 	#0 							; get offset
.1ffd	b1 28		lda ($28),y			lda 	(codePtr),y
.1fff	18		clc				clc 								; add to codePtr
.2000	65 28		adc $28				adc 	codePtr
.2002	85 28		sta $28				sta 	codePtr
.2004	90 02		bcc $2008			bcc 	_ANLNoCarry
.2006	e6 29		inc $29				inc 	codePtr+1
.2008					_ANLNoCarry:
.2008	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.200a	f0 e9		beq $1ff5			beq 	CommandEnd 					; execute END
.200c	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.200e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.200f					Command_FOR:
.200f	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.2011	a2 0b		ldx #$0b			ldx 	#11
.2013	20 d8 32	jsr $32d8			jsr 	RSClaim
.2016	20 28 1f	jsr $1f28			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.2019	a5 48		lda $48				lda 	esType 						; check type should be integer reference.
.201b	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.201d	d0 4c		bne $206b			bne 	_CFType
.201f	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.2021	20 a5 32	jsr $32a5			jsr 	CheckToken
.2024	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2026	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger				; get terminal value in stack 1
.2029	98		tya				tya
.202a	48		pha				pha
.202b	a0 04		ldy #$04			ldy 	#4
.202d	a5 50		lda $50				lda		esInt0 						; copy the address of the index variable into 4 and 5
.202f	91 37		sta ($37),y			sta 	(rsPointer),y
.2031	c8		iny				iny
.2032	a5 58		lda $58				lda		esInt1
.2034	91 37		sta ($37),y			sta 	(rsPointer),y
.2036	c8		iny				iny
.2037	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.2039	91 37		sta ($37),y			sta 	(rsPointer),y
.203b	c8		iny				iny
.203c	a5 51		lda $51				lda		esInt0+1 					; terminal value in 7 to 11.
.203e	91 37		sta ($37),y			sta 	(rsPointer),y
.2040	c8		iny				iny
.2041	a5 59		lda $59				lda		esInt1+1
.2043	91 37		sta ($37),y			sta 	(rsPointer),y
.2045	c8		iny				iny
.2046	a5 61		lda $61				lda		esInt2+1
.2048	91 37		sta ($37),y			sta 	(rsPointer),y
.204a	c8		iny				iny
.204b	a5 69		lda $69				lda		esInt3+1
.204d	91 37		sta ($37),y			sta 	(rsPointer),y
.204f	68		pla				pla
.2050	a8		tay				tay
.2051	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.2053	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.2055	d0 0e		bne $2065			bne 	_CFDone
.2057	c8		iny				iny									; skip over step.
.2058	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger 			; get step
.205b	98		tya				tya
.205c	48		pha				pha
.205d	b5 50		lda $50,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.205f	a0 06		ldy #$06			ldy 	#6
.2061	91 37		sta ($37),y			sta 	(rsPointer),y
.2063	68		pla				pla
.2064	a8		tay				tay
.2065					_CFDone:
.2065	a9 01		lda #$01			lda 	#1
.2067	20 04 33	jsr $3304			jsr 	RSSavePosition 				; save position.
.206a	60		rts				rts
.206b					_CFType:
.206b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.206d	20 18 15	jsr $1518		jsr	errorHandler
.2070					Command_NEXT:
.2070	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2072	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2074	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2076	f0 05		beq $207d			beq 	_isok
.2078	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.207a	20 18 15	jsr $1518		jsr	errorHandler
.207d					_isok:
.207d	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.207f	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2081	b0 18		bcs $209b			bcs 	_CNNoIndex
.2083	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2085	20 de 2b	jsr $2bde			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.2088	98		tya				tya
.2089	48		pha				pha
.208a	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.208c	b1 37		lda ($37),y			lda 	(rsPointer),y
.208e	d5 50		cmp $50,x			cmp 	esInt0,x
.2090	d0 76		bne $2108			bne 	_CNBadIndex
.2092	c8		iny				iny
.2093	b1 37		lda ($37),y			lda 	(rsPointer),y
.2095	d5 58		cmp $58,x			cmp 	esInt1,x
.2097	d0 6f		bne $2108			bne 	_CNBadIndex
.2099	68		pla				pla
.209a	a8		tay				tay
.209b					_CNNoIndex:
.209b	98		tya				tya
.209c	48		pha				pha
.209d	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.209f	b1 37		lda ($37),y			lda 	(rsPointer),y
.20a1	85 2a		sta $2a				sta 	temp0
.20a3	c8		iny				iny
.20a4	b1 37		lda ($37),y			lda 	(rsPointer),y
.20a6	85 2b		sta $2b				sta 	temp0+1
.20a8	c8		iny				iny
.20a9	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.20ab	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.20ad	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.20af	10 01		bpl $20b2			bpl 	_CNSignX
.20b1	ca		dex				dex  								; X = $FF
.20b2					_CNSignX:
.20b2	18		clc				clc 								; add to the LSB
.20b3	a0 00		ldy #$00			ldy 	#0
.20b5	71 2a		adc ($2a),y			adc 	(temp0),y
.20b7	91 2a		sta ($2a),y			sta 	(temp0),y
.20b9					_CNPropogate:
.20b9	c8		iny				iny  								; add the sign extended in X to the rest.
.20ba	8a		txa				txa
.20bb	71 2a		adc ($2a),y			adc 	(temp0),y
.20bd	91 2a		sta ($2a),y			sta 	(temp0),y
.20bf	c8		iny				iny
.20c0	8a		txa				txa
.20c1	71 2a		adc ($2a),y			adc 	(temp0),y
.20c3	91 2a		sta ($2a),y			sta 	(temp0),y
.20c5	c8		iny				iny
.20c6	8a		txa				txa
.20c7	71 2a		adc ($2a),y			adc 	(temp0),y
.20c9	91 2a		sta ($2a),y			sta 	(temp0),y
.20cb	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.20cc	a5 37		lda $37				lda 	rsPointer
.20ce	69 07		adc #$07			adc 	#7
.20d0	85 2c		sta $2c				sta 	temp1
.20d2	a9 00		lda #$00			lda 	#0
.20d4	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.20d6	a8		tay				tay 								; and clear the Y register again.
.20d7	65 38		adc $38				adc 	rsPointer+1
.20d9	85 2d		sta $2d				sta 	temp1+1
.20db	38		sec				sec 								; calculate current - limit oring interim values.
.20dc	20 14 21	jsr $2114			jsr 	_CNCompare 					; each of these does a byte.
.20df	20 14 21	jsr $2114			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.20e2	20 14 21	jsr $2114			jsr 	_CNCompare 					; and the carry of the subtraction.
.20e5	20 14 21	jsr $2114			jsr 	_CNCompare
.20e8	50 02		bvc $20ec			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.20ea	49 80		eor #$80			eor 	#$80
.20ec					_CNNoOverflow:
.20ec	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.20ee	30 1d		bmi $210d			bmi 	_CNCheckDownto
.20f0	c9 00		cmp #$00			cmp 	#0
.20f2	30 0c		bmi $2100			bmi 	_CNLoopRound 				; loop round if < =
.20f4	a5 2e		lda $2e				lda 	temp2
.20f6	f0 08		beq $2100			beq 	_CNLoopRound
.20f8					_CNLoopExit:
.20f8	68		pla				pla
.20f9	a8		tay				tay
.20fa	a9 0b		lda #$0b			lda 	#11
.20fc	20 fa 32	jsr $32fa			jsr 	RSFree
.20ff	60		rts				rts
.2100					_CNLoopRound:
.2100	68		pla				pla
.2101	a8		tay				tay
.2102	a9 01		lda #$01			lda 	#1
.2104	20 17 33	jsr $3317			jsr 	RSLoadPosition				; go back to the loop top
.2107	60		rts				rts
.2108					_CNBadIndex:
.2108	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.210a	20 18 15	jsr $1518		jsr	errorHandler
.210d					_CNCheckDownto:
.210d	c9 00		cmp #$00			cmp 	#0
.210f	10 ef		bpl $2100			bpl 	_CNLoopRound
.2111	4c f8 20	jmp $20f8			jmp 	_CNLoopExit
.2114					_CNCompare:
.2114	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2116	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.2118	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.211a	85 2e		sta $2e				sta 	temp2
.211c	c8		iny				iny
.211d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.211e					CommandIf:
.211e	20 a9 2b	jsr $2ba9			jsr 	EvaluateRootInteger 		; get what's being tested.
.2121	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.2123	c9 91		cmp #$91			cmp 	#TKW_GOTO
.2125	f0 04		beq $212b			beq 	_IfSimple
.2127	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.2129	d0 1b		bne $2146			bne 	_IfComplex
.212b					_IfSimple:
.212b	20 64 32	jsr $3264			jsr 	MInt32Zero					; check if TOS zero
.212e	f0 10		beq $2140			beq 	_IfEOL 						; go to next line.
.2130	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.2132	c8		iny				iny
.2133	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.2135	f0 0c		beq $2143			beq 	_IfGoto 					; do the Goto code
.2137	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.2139	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.213b	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.213d	f0 04		beq $2143			beq 	_IfGoto
.213f	60		rts				rts 								; else continue on this line.
.2140					_IfEOL:
.2140	4c fb 1f	jmp $1ffb			jmp 	AdvanceNextLine 			; go to next line
.2143					_IfGoto:
.2143	4c 32 1d	jmp $1d32			jmp 	CommandGoto
.2146					_IfComplex:
.2146	20 64 32	jsr $3264			jsr 	MInt32Zero 					; is it true ?
.2149	f0 01		beq $214c			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.214b	60		rts				rts 								; else continue.
.214c					_IFSkip:
.214c	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.214e	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2150	4c e8 23	jmp $23e8			jmp		ScanForward
.2153					Command_ELSE:
.2153	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2155	8a		txa				txa
.2156	4c e8 23	jmp $23e8			jmp		ScanForward
.2159					Command_ENDIF:
.2159	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cd0					storeSize:
>0cd0							.fill 	1
.215a					CommandLocal:
.215a	a2 00		ldx #$00			ldx 	#0
.215c	20 78 21	jsr $2178			jsr 	LocaliseVariable 			; localise one.
.215f					_CLCheckNext:
.215f	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2161	c8		iny				iny
.2162	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2164	f0 06		beq $216c			beq 	_CLAssignment
.2166	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2168	f0 f0		beq $215a			beq 	CommandLocal
.216a	88		dey				dey
.216b	60		rts				rts
.216c					_CLAssignment:
.216c	a2 01		ldx #$01			ldx 	#1
.216e	20 8c 2b	jsr $2b8c			jsr 	Evaluate 					; evaluate RHS
.2171	ca		dex				dex
.2172	20 3b 1f	jsr $1f3b			jsr 	WriteValue
.2175	4c 5f 21	jmp $215f			jmp 	_CLCheckNext
.2178					LocaliseVariable:
.2178	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.217a	c9 40		cmp #$40			cmp 	#$40
.217c	b0 67		bcs $21e5			bcs 	_LVSyntax
.217e	8a		txa				txa 								; get the address of that variable.
.217f	a2 02		ldx #$02		ldx	#2
.2181	20 d3 41	jsr $41d3		jsr	variableHandler
.2184	aa		tax				tax
.2185	8a		txa				txa
.2186	48		pha				pha
.2187	98		tya				tya
.2188	48		pha				pha
.2189	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.218c	b5 48		lda $48,x			lda 	esType,x 					; get the type
.218e	0a		asl a				asl 	a
.218f	10 16		bpl $21a7			bpl 	_LVPushNumber
.2191	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2193	b1 2a		lda ($2a),y			lda 	(temp0),y
.2195	c8		iny				iny
.2196	85 2c		sta $2c				sta 	temp1
.2198	b1 2a		lda ($2a),y			lda 	(temp0),y
.219a	85 2d		sta $2d				sta 	temp1+1
.219c	a0 00		ldy #$00			ldy 	#0 	 						; get length
.219e	b1 2c		lda ($2c),y			lda 	(temp1),y
.21a0	aa		tax				tax 								; into X
.21a1	e8		inx				inx 								; +1 for length.
.21a2	a9 24		lda #$24			lda 	#markerString
.21a4	4c bc 21	jmp $21bc			jmp 	_LVWriteFrame
.21a7					_LVPushNumber:
.21a7	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.21a9	85 2c		sta $2c				sta 	temp1
.21ab	a5 2b		lda $2b				lda 	temp0+1
.21ad	85 2d		sta $2d				sta 	temp1+1
.21af	b5 48		lda $48,x			lda 	esType,x 					; put float flag into carry.
.21b1	4a		lsr a				lsr 	a
.21b2	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.21b4	a2 04		ldx #$04			ldx 	#VarISize
.21b6	90 04		bcc $21bc			bcc 	_LVIsInteger
.21b8	a9 23		lda #$23			lda 	#markerFloat
.21ba	a2 06		ldx #$06			ldx 	#VarFSize
.21bc					_LVIsInteger:
.21bc					_LVWriteFrame:
.21bc	8e d0 0c	stx $0cd0			stx 	storeSize 					; number of bytes to copy from (temp0)
.21bf	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.21c0	e8		inx				inx
.21c1	e8		inx				inx
.21c2	20 d8 32	jsr $32d8			jsr 	RSClaim 					; create the stack frame.
.21c5	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.21c7	a0 01		ldy #$01			ldy 	#1
.21c9	91 37		sta ($37),y			sta 	(rsPointer),y
.21cb	c8		iny				iny
.21cc	a5 2b		lda $2b				lda 	temp0+1
.21ce	91 37		sta ($37),y			sta 	(rsPointer),y
.21d0	a0 00		ldy #$00			ldy 	#0
.21d2					_LVCopyData:
.21d2	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.21d4	c8		iny				iny 								; write allowing for the header bit.
.21d5	c8		iny				iny
.21d6	c8		iny				iny
.21d7	91 37		sta ($37),y			sta 	(rsPointer),y
.21d9	88		dey				dey
.21da	88		dey				dey
.21db	ce d0 0c	dec $0cd0			dec 	storeSize 					; do it storesize times
.21de	d0 f2		bne $21d2			bne 	_LVCopyData
.21e0	68		pla				pla
.21e1	a8		tay				tay
.21e2	68		pla				pla
.21e3	aa		tax				tax
.21e4	60		rts				rts
.21e5					_LVSyntax:
.21e5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.21e7	20 18 15	jsr $1518		jsr	errorHandler
.21ea					RestoreLocals:
.21ea	a2 00		ldx #$00			ldx 	#0
.21ec	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.21ee	c9 40		cmp #$40			cmp	 	#64
.21f0	90 01		bcc $21f3			bcc 	_RLocal
.21f2	60		rts				rts
.21f3					_RLocal:
.21f3	8a		txa				txa
.21f4	48		pha				pha
.21f5	98		tya				tya
.21f6	48		pha				pha
.21f7	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.21f9	b1 37		lda ($37),y			lda 	(rsPointer),y
.21fb	85 2a		sta $2a				sta 	temp0
.21fd	c8		iny				iny
.21fe	b1 37		lda ($37),y			lda 	(rsPointer),y
.2200	85 2b		sta $2b				sta 	temp0+1
.2202	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2204	b1 37		lda ($37),y			lda 	(rsPointer),y
.2206	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2208	f0 28		beq $2232			beq 	_RString
.220a	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.220c	c9 25		cmp #$25			cmp 	#markerInt
.220e	f0 02		beq $2212			beq 	_RIsInteger
.2210	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2212					_RIsInteger:
.2212	8a		txa				txa
.2213	48		pha				pha
.2214	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2216					_RCopyBack:
.2216	b1 37		lda ($37),y			lda 	(rsPointer),y
.2218	88		dey				dey
.2219	88		dey				dey
.221a	88		dey				dey
.221b	91 2a		sta ($2a),y			sta 	(temp0),y
.221d	c8		iny				iny
.221e	c8		iny				iny
.221f	c8		iny				iny
.2220	c8		iny				iny
.2221	ca		dex				dex
.2222	d0 f2		bne $2216			bne 	_RCopyBack
.2224	68		pla				pla 								; get size add 3
.2225	18		clc				clc
.2226	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2228					_RRestoreAAndLoop:
.2228	20 fa 32	jsr $32fa			jsr 	RSFree
.222b	68		pla				pla
.222c	a8		tay				tay
.222d	68		pla				pla
.222e	aa		tax				tax
.222f	4c ea 21	jmp $21ea			jmp 	RestoreLocals 				; go see if there are any more locals.
.2232					_RString:
.2232	a2 00		ldx #$00			ldx 	#0
.2234	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2236	b1 37		lda ($37),y			lda 	(rsPointer),y
.2238	95 50		sta $50,x			sta 	esInt0,x
.223a	c8		iny				iny
.223b	b1 37		lda ($37),y			lda 	(rsPointer),y
.223d	95 58		sta $58,x			sta 	esInt1,x
.223f	18		clc				clc
.2240	a5 37		lda $37				lda 	rsPointer
.2242	69 03		adc #$03			adc 	#3
.2244	95 51		sta $51,x			sta 	esInt0+1,x
.2246	a5 38		lda $38				lda 	rsPointer+1
.2248	69 00		adc #$00			adc 	#0
.224a	95 59		sta $59,x			sta 	esInt1+1,x
.224c	8a		txa				txa
.224d	a2 10		ldx #$10		ldx	#16
.224f	20 e6 35	jsr $35e6		jsr	stringHandler
.2252	a0 03		ldy #$03			ldy 	#3 							; get string length
.2254	b1 37		lda ($37),y			lda 	(rsPointer),y
.2256	18		clc				clc
.2257	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2259	4c 28 22	jmp $2228			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0cd1					paramCount:
>0cd1							.fill 	1
.225c					CallProc:
.225c	20 e4 22	jsr $22e4			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.225f	48		pha				pha 								; save length on stack
.2260	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2262	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2264	48		pha				pha
.2265	a5 2a		lda $2a				lda 	temp0
.2267	48		pha				pha
.2268	98		tya				tya 								; calculate Y + length
.2269	18		clc				clc
.226a	65 32		adc $32				adc 	tempShort
.226c	a8		tay				tay
.226d	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.226f					_CallProcEvalParams:
.226f	e8		inx				inx
.2270	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2272	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2274	f0 0b		beq $2281			beq 	_CPDoneParams
.2276	20 8c 2b	jsr $2b8c			jsr 	Evaluate 					; evaluate a parameter
.2279	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.227b	c8		iny				iny
.227c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.227e	f0 ef		beq $226f			beq 	_CallProcEvalParams
.2280	88		dey				dey 								; undo consumption.
.2281					_CPDoneParams:
.2281	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; check closing parenthesis.
.2284	8e d1 0c	stx $0cd1			stx 	paramCount 					; store parameter count+1
.2287	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2289	a9 50		lda #$50			lda 	#markerPROC
.228b	20 d8 32	jsr $32d8			jsr 	RSClaim
.228e	a9 01		lda #$01			lda 	#1 							; store return address.
.2290	20 04 33	jsr $3304			jsr 	RSSavePosition
.2293	68		pla				pla 								; get the new code Ptr
.2294	85 28		sta $28				sta 	codePtr
.2296	68		pla				pla
.2297	85 29		sta $29				sta 	codePtr+1
.2299	68		pla				pla 								; length of name + 4 is the param start.
.229a	18		clc				clc
.229b	69 04		adc #$04			adc 	#4
.229d	a8		tay				tay
.229e	a2 ff		ldx #$ff			ldx 	#$FF
.22a0					_CPLoadParameters:
.22a0	e8		inx				inx 								; point to where the address should be loaded.
.22a1	ec d1 0c	cpx $0cd1			cpx 	paramCount 					; too many parameters in definition ?
.22a4	f0 1e		beq $22c4			beq 	_CPParamError
.22a6	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.22a8	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.22aa	f0 0e		beq $22ba			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.22ac	20 78 21	jsr $2178			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.22af	20 3b 1f	jsr $1f3b			jsr 	WriteValue 					; copy the evaluated parameter into there.
.22b2	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.22b4	c8		iny				iny
.22b5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.22b7	f0 e7		beq $22a0			beq 	_CPLoadParameters
.22b9	88		dey				dey 								; no, unconsume and check for )
.22ba					_CPParamComplete:
.22ba	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; check )
.22bd	e8		inx				inx 								; check right number of parameters have been consumed
.22be	ec d1 0c	cpx $0cd1			cpx 	paramCount
.22c1	d0 01		bne $22c4			bne 	_CPParamError
.22c3	60		rts				rts
.22c4					_CPParamError:
.22c4	a2 18		ldx #$18			ldx 	#ErrorID_Params
.22c6	20 18 15	jsr $1518		jsr	errorHandler
.22c9					ReturnProc:
.22c9	20 ea 21	jsr $21ea			jsr 	RestoreLocals 				; get the locals back.
.22cc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.22ce	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.22d0	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.22d2	f0 05		beq $22d9			beq 	_isok
.22d4	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.22d6	20 18 15	jsr $1518		jsr	errorHandler
.22d9					_isok:
.22d9	a9 01		lda #$01			lda 	#1
.22db	20 17 33	jsr $3317			jsr 	RSLoadPosition 				; reload the position from offset 1.
.22de	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.22e0	20 fa 32	jsr $32fa			jsr 	RSFree
.22e3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0cd2					procList:
>0cd2							.fill 	2		 					; terminated by name high being zero.
.0cd4					yInLine:
>0cd4							.fill 	1
.22e4					FindProcedure:
.22e4	8c d4 0c	sty $0cd4			sty 	yInLine 					; save current position.
.22e7	20 a2 23	jsr $23a2			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.22ea	85 2c		sta $2c				sta 	temp1
.22ec	ad d2 0c	lda $0cd2			lda		procList 					; put procList address in temp2
.22ef	85 2e		sta $2e				sta 	temp2
.22f1	ad d3 0c	lda $0cd3			lda 	procList+1
.22f4	85 2f		sta $2f				sta 	temp2+1
.22f6	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.22f8					_FPLoop:
.22f8	b1 2e		lda ($2e),y			lda 	(temp2),y
.22fa	f0 4f		beq $234b			beq 	_FPError 					; if so, we don't know this procedure.
.22fc	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.22fe	c8		iny				iny
.22ff	b1 2e		lda ($2e),y			lda 	(temp2),y
.2301	85 2a		sta $2a				sta 	temp0
.2303	c8		iny				iny
.2304	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2306	c5 2c		cmp $2c				cmp 	temp1
.2308	d0 2b		bne $2335			bne 	_FPNext 					; hash is different, go to next.
.230a	38		sec				sec
.230b	ad d4 0c	lda $0cd4			lda 	yInLine 					; position in line must be at least 4
.230e	e9 04		sbc #$04			sbc 	#4
.2310	18		clc				clc
.2311	65 28		adc $28				adc 	codePtr
.2313	85 30		sta $30				sta 	temp3
.2315	a5 29		lda $29				lda 	codePtr+1
.2317	69 00		adc #$00			adc 	#0
.2319	85 31		sta $31				sta 	temp3+1
.231b	98		tya				tya
.231c	48		pha				pha
.231d	a0 04		ldy #$04			ldy 	#4
.231f					_FPCName:
.231f	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2321	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2323	d0 0e		bne $2333			bne 	_FPpulYNext 				; if different go to next one.
.2325	c8		iny				iny
.2326	c9 3a		cmp #$3a			cmp 	#$3A
.2328	90 f5		bcc $231f			bcc 	_FPCName 					; compare the whole lot....
.232a	68		pla				pla 								; throw away the saved Y
.232b	98		tya				tya 								; length of name is Y-4
.232c	38		sec				sec
.232d	e9 04		sbc #$04			sbc 	#4
.232f	ac d4 0c	ldy $0cd4			ldy 	yInLine  					; get the original Y back
.2332	60		rts				rts
.2333					_FPpulYNext:
.2333	68		pla				pla
.2334	a8		tay				tay
.2335					_FPNext:
.2335	c8		iny				iny 								; next procedure record.
.2336	10 c0		bpl $22f8			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2338	98		tya				tya 								; subtract 128 from Y
.2339	38		sec				sec
.233a	e9 80		sbc #$80			sbc 	#128
.233c	a8		tay				tay
.233d	18		clc				clc 								; add 128 to temp2, so we can have more than
.233e	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2340	69 80		adc #$80			adc 	#128
.2342	85 2e		sta $2e				sta 	temp2
.2344	90 b2		bcc $22f8			bcc 	_FPLoop
.2346	e6 2f		inc $2f				inc 	temp2+1
.2348	4c f8 22	jmp $22f8			jmp 	_FPLoop
.234b					_FPError:
.234b	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.234d	20 18 15	jsr $1518		jsr	errorHandler
.2350					ScanProc:
.2350	98		tya				tya
.2351	48		pha				pha
.2352	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2354	8d d2 0c	sta $0cd2			sta 	procList
.2357	a5 36		lda $36				lda 	lowMemory+1
.2359	8d d3 0c	sta $0cd3			sta 	procList+1
.235c	20 cc 26	jsr $26cc			jsr 	ResetCodeAddress 			; back to the start.
.235f					_ScanLoop:
.235f	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2361	b1 28		lda ($28),y			lda 	(codePtr),y
.2363	f0 2a		beq $238f			beq 	_ScanExit
.2365	a0 03		ldy #$03			ldy 	#3							; get first token
.2367	b1 28		lda ($28),y			lda 	(codePtr),y
.2369	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.236b	d0 12		bne $237f			bne 	_ScanNext
.236d	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.236f	20 97 23	jsr $2397			jsr 	_ScanWrite
.2372	a5 28		lda $28				lda 	codePtr
.2374	20 97 23	jsr $2397			jsr 	_ScanWrite
.2377	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2379	20 a2 23	jsr $23a2			jsr 	CalculateProcedureHash 		; calculate procedure hash
.237c	20 97 23	jsr $2397			jsr 	_ScanWrite					; and write that
.237f					_ScanNext:
.237f	18		clc				clc
.2380	a0 00		ldy #$00			ldy 	#0
.2382	b1 28		lda ($28),y			lda 	(codePtr),y
.2384	65 28		adc $28				adc 	codePtr
.2386	85 28		sta $28				sta 	codePtr
.2388	90 d5		bcc $235f			bcc 	_ScanLoop
.238a	e6 29		inc $29				inc 	codePtr+1
.238c	4c 5f 23	jmp $235f			jmp 	_ScanLoop
.238f					_ScanExit:
.238f	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2391	20 97 23	jsr $2397			jsr 	_ScanWrite
.2394	68		pla				pla
.2395	a8		tay				tay
.2396	60		rts				rts
.2397					_ScanWrite:
.2397	a0 00		ldy #$00			ldy 	#0
.2399	91 35		sta ($35),y			sta 	(lowMemory),y
.239b	e6 35		inc $35				inc 	lowMemory
.239d	d0 02		bne $23a1			bne 	_SWNoCarry
.239f	e6 36		inc $36				inc 	lowMemory+1
.23a1					_SWNoCarry:
.23a1	60		rts				rts
.23a2					CalculateProcedureHash:
.23a2	a9 00		lda #$00			lda 	#0 							; clear hash.
.23a4	85 2a		sta $2a				sta 	temp0
.23a6					_CPHLoop:
.23a6	18		clc				clc 								; add character and rotate and add carry back in
.23a7	b1 28		lda ($28),y			lda 	(codePtr),y
.23a9	65 2a		adc $2a				adc 	temp0
.23ab	6a		ror a				ror 	a
.23ac	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.23ae	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.23b0	b1 28		lda ($28),y			lda 	(codePtr),y
.23b2	c8		iny				iny 								; advance incase we go round again.
.23b3	c9 3a		cmp #$3a			cmp 	#$3A
.23b5	90 ef		bcc $23a6			bcc 	_CPHLoop
.23b7	a5 2a		lda $2a				lda 	temp0
.23b9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.23ba					Command_Repeat:
.23ba	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.23bc	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.23be	20 d8 32	jsr $32d8			jsr 	RSClaim
.23c1	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.23c3	20 04 33	jsr $3304			jsr 	RSSavePosition
.23c6	60		rts				rts
.23c7					Command_Until:
.23c7	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.23c9	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.23cb	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.23cd	f0 05		beq $23d4			beq 	_isok
.23cf	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.23d1	20 18 15	jsr $1518		jsr	errorHandler
.23d4					_isok:
.23d4	20 a9 2b	jsr $2ba9			jsr 	EvaluateRootInteger 		; at the bottom.
.23d7	20 64 32	jsr $3264			jsr 	MInt32Zero					; check if TOS zero
.23da	d0 06		bne $23e2			bne 	_CUExit
.23dc	a9 01		lda #$01			lda 	#1
.23de	20 17 33	jsr $3317			jsr 	RSLoadPosition 				; reload the position from offset 1.
.23e1	60		rts				rts
.23e2					_CUExit:
.23e2	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.23e4	20 fa 32	jsr $32fa			jsr 	RSFree
.23e7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.23e8					ScanForward:
.23e8	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.23ea	86 2d		stx $2d				stx 	temp1+1
.23ec	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.23ee	85 2e		sta $2e				sta 	temp2
.23f0	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.23f2	c8		iny				iny
.23f3	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.23f5	d0 08		bne $23ff			bne 	_SFNoCheck 					; if so, check token against entered values.
.23f7	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.23f9	f0 24		beq $241f			beq 	_SFExit 					; at the same strcture depth.
.23fb	c5 2d		cmp $2d				cmp 	temp1+1
.23fd	f0 20		beq $241f			beq 	_SFExit
.23ff					_SFNoCheck:
.23ff	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2401	90 ed		bcc $23f0			bcc 	_SFLoop
.2403	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2405	90 19		bcc $2420			bcc 	_SFSpecials
.2407	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2409	90 e5		bcc $23f0			bcc 	_SFLoop
.240b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.240d	b0 e1		bcs $23f0			bcs 	_SFLoop
.240f	aa		tax				tax  								; token in X, and look up the adjuster.
.2410	bd c7 2a	lda $2ac7,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2413	38		sec				sec 								; convert to an offset ($FF,$01)
.2414	e9 81		sbc #$81			sbc 	#$81
.2416	18		clc				clc 								; add to depth
.2417	65 2e		adc $2e				adc 	temp2
.2419	85 2e		sta $2e				sta 	temp2
.241b	10 d3		bpl $23f0			bpl 	_SFLoop 					; +ve okay to continue
.241d	30 07		bmi $2426			bmi 	SFError 					; if gone -ve then we have a nesting error
.241f	60		rts		_SFExit:rts
.2420					_SFSpecials:
.2420	20 2b 24	jsr $242b			jsr 	ScannerSkipSpecial
.2423	4c f0 23	jmp $23f0			jmp 	_SFLoop
.2426					SFError:
.2426	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2428	20 18 15	jsr $1518		jsr	errorHandler
.242b					ScannerSkipSpecial:
.242b	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.242d	f0 10		beq $243f			beq 	_SFNextLine
.242f	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2431	f0 2b		beq $245e			beq 	_SFFloatSkip
.2433	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2435	f0 02		beq $2439			beq 	_SFSkipString
.2437	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2438	60		rts				rts 								; token.
.2439					_SFSkipString:
.2439	98		tya				tya
.243a	38		sec				sec
.243b	71 28		adc ($28),y			adc 	(codePtr),y
.243d	a8		tay				tay
.243e	60		rts				rts
.243f					_SFNextLine:
.243f	a0 00		ldy #$00			ldy 	#0 							; get offset
.2441	b1 28		lda ($28),y			lda 	(codePtr),y
.2443	18		clc				clc 								; add to code pointer.
.2444	65 28		adc $28				adc 	codePtr
.2446	85 28		sta $28				sta 	codePtr
.2448	90 02		bcc $244c			bcc		_SFNLNoCarry
.244a	e6 29		inc $29				inc 	codePtr+1
.244c					_SFNLNoCarry:
.244c	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.244e	d0 0b		bne $245b			bne		_SFXNL 						; no go round again
.2450	a5 2c		lda $2c				lda 	temp1
.2452	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2454	d0 d0		bne $2426			bne 	SFError 					; read uses this to search for data statements
.2456	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2458	20 18 15	jsr $1518		jsr	errorHandler
.245b	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.245d	60		rts				rts
.245e					_SFFloatSkip:
.245e	98		tya				tya 								; skip over an embedded float.
.245f	18		clc				clc
.2460	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2462	a8		tay				tay
.2463	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2464					Command_While:
.2464	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2466	a2 04		ldx #$04			ldx 	#4
.2468	20 d8 32	jsr $32d8			jsr 	RSClaim 					; create on stack.
.246b	88		dey				dey
.246c	a9 01		lda #$01			lda 	#1
.246e	20 04 33	jsr $3304			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2471	c8		iny				iny
.2472	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger				; get the conditional
.2475	20 64 32	jsr $3264			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2478	f0 01		beq $247b			beq 	_CWFail
.247a	60		rts				rts
.247b					_CWFail:
.247b	a9 04		lda #$04			lda 	#4
.247d	20 fa 32	jsr $32fa			jsr 	RSFree 						; close the just opened position.
.2480	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2482	aa		tax				tax
.2483	20 e8 23	jsr $23e8			jsr 	ScanForward
.2486	60		rts				rts
.2487					Command_Wend:
.2487	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2489	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.248b	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.248d	f0 05		beq $2494			beq 	_isok
.248f	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2491	20 18 15	jsr $1518		jsr	errorHandler
.2494					_isok:
.2494	a9 01		lda #$01			lda 	#1
.2496	20 17 33	jsr $3317			jsr 	RSLoadPosition				; go back until true
.2499	a9 04		lda #$04			lda 	#4
.249b	20 fa 32	jsr $32fa			jsr 	RSFree 						; close the loop
.249e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.249f					CommandClear:
.249f					XCommandClear:
.249f	98		tya				tya
.24a0	48		pha				pha
.24a1	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.24a4	85 33		sta $33				sta 	highMemory
.24a6	ad cd 0a	lda $0acd			lda 	endMemory+1
.24a9	85 34		sta $34				sta 	highMemory+1
.24ab	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.24ae	85 2a		sta $2a				sta 	temp0
.24b0	ad c9 0a	lda $0ac9			lda 	basePage+1
.24b3	85 2b		sta $2b				sta 	temp0+1
.24b5					_CCFindEnd:
.24b5	a0 00		ldy #$00			ldy 	#0
.24b7	b1 2a		lda ($2a),y			lda 	(temp0),y
.24b9	f0 0c		beq $24c7			beq 	_CCFoundEnd 				; offset zero is end.
.24bb	18		clc				clc
.24bc	65 2a		adc $2a				adc 	temp0 						; move to next line
.24be	85 2a		sta $2a				sta 	temp0
.24c0	90 f3		bcc $24b5			bcc 	_CCFindEnd
.24c2	e6 2b		inc $2b				inc 	temp0+1
.24c4	4c b5 24	jmp $24b5			jmp 	_CCFindEnd
.24c7					_CCFoundEnd:
.24c7	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.24c9	85 35		sta $35				sta 	lowMemory
.24cb	a5 2b		lda $2b				lda 	temp0+1
.24cd	85 36		sta $36				sta 	lowMemory+1
.24cf	18		clc				clc 								; put temp0+1 in endProgram
.24d0	a5 2a		lda $2a				lda 	temp0
.24d2	69 01		adc #$01			adc 	#1
.24d4	8d ca 0a	sta $0aca			sta 	endProgram
.24d7	a5 2b		lda $2b				lda 	temp0+1
.24d9	69 00		adc #$00			adc 	#0
.24db	8d cb 0a	sta $0acb			sta 	endProgram+1
.24de	18		clc				clc 								; put a bit of space in.
.24df	a5 35		lda $35				lda 	lowMemory
.24e1	69 04		adc #$04			adc 	#4
.24e3	85 35		sta $35				sta 	lowMemory
.24e5	90 02		bcc $24e9			bcc 	_CCNoCarry
.24e7	e6 36		inc $36				inc 	lowMemory+1
.24e9					_CCNoCarry:
.24e9	20 ca 32	jsr $32ca			jsr 	RSReset 					; reset the return stack.
.24ec	a2 06		ldx #$06		ldx	#6
.24ee	20 d3 41	jsr $41d3		jsr	variableHandler
.24f1	20 50 23	jsr $2350			jsr 	ScanProc 					; scan for procedures
.24f4	20 d5 1c	jsr $1cd5			jsr 	CommandRestore 				; do a restore
.24f7	68		pla				pla
.24f8	a8		tay				tay
.24f9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0cd5					structIndent:
>0cd5							.fill 	1
.24fa					CommandList:
.24fa	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.24fc	8e d5 0c	stx $0cd5			stx 	structIndent
.24ff	20 3d 32	jsr $323d			jsr 	MInt32False
.2502	e8		inx				inx
.2503	20 39 32	jsr $3239			jsr 	MInt32True
.2506	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2508	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.250a	f0 15		beq $2521			beq 	_CLEndLine
.250c	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.250e	30 1b		bmi $252b			bmi 	_CLDoListing 				; do the whole lot.
.2510	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2512	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger
.2515	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2517	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2519	f0 06		beq $2521			beq 	_CLEndLine
.251b	20 7b 31	jsr $317b			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.251e	4c 2b 25	jmp $252b			jmp 	_CLDoListing 				; own e.g. list 1100
.2521					_CLEndLine:
.2521	c8		iny				iny 								; skip comma
.2522	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2524	30 05		bmi $252b			bmi 	_CLDoListing
.2526	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2528	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger				; get end
.252b					_CLDoListing:
.252b	20 cc 26	jsr $26cc			jsr 	ResetCodeAddress 			; back to the start.
.252e					_CLCheckLoop:
.252e	a2 02		ldx #$02		ldx	#2
.2530	20 f6 14	jsr $14f6		jsr	deviceHandler
.2533	a0 00		ldy #$00			ldy 	#0							; check end.
.2535	b1 28		lda ($28),y			lda 	(codePtr),y
.2537	f0 41		beq $257a			beq 	_CLEnd
.2539	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.253b	20 7d 25	jsr $257d			jsr 	CLCompareLineTOS
.253e	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2540	f0 28		beq $256a			beq 	_CLNext
.2542	e8		inx				inx
.2543	20 7d 25	jsr $257d			jsr 	CLCompareLineTOS 			; compare vs higher
.2546	c9 01		cmp #$01			cmp 	#1
.2548	f0 20		beq $256a			beq 	_CLNext
.254a	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.254c	20 9f 25	jsr $259f			jsr 	CLStructureCheck
.254f	ad d5 0c	lda $0cd5			lda 	structIndent 				; indent level.
.2552	10 02		bpl $2556			bpl 	_CLPositive
.2554	a9 00		lda #$00			lda 	#0
.2556					_CLPositive:
.2556	a2 04		ldx #$04		ldx	#4
.2558	20 02 3e	jsr $3e02		jsr	tokeniserHandler
.255b	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.255d	20 9f 25	jsr $259f			jsr 	CLStructureCheck
.2560	ad d5 0c	lda $0cd5			lda 	structIndent
.2563	10 05		bpl $256a			bpl 	_CLNext
.2565	a9 00		lda #$00			lda 	#0
.2567	8d d5 0c	sta $0cd5			sta 	structIndent
.256a					_CLNext:
.256a	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.256c	b1 28		lda ($28),y			lda 	(codePtr),y
.256e	18		clc				clc
.256f	65 28		adc $28				adc 	codePtr
.2571	85 28		sta $28				sta 	codePtr
.2573	90 b9		bcc $252e			bcc 	_CLCheckLoop
.2575	e6 29		inc $29				inc 	codePtr+1
.2577	4c 2e 25	jmp $252e			jmp 	_CLCheckLoop
.257a					_CLEnd:
.257a	4c 26 33	jmp $3326			jmp 	WarmStart 					; warm start after list.
.257d					CLCompareLineTOS:
.257d	a0 01		ldy #$01			ldy 	#1
.257f	b1 28		lda ($28),y			lda 	(codePtr),y
.2581	55 50		eor $50,x			eor 	esInt0,x
.2583	85 2a		sta $2a				sta 	temp0
.2585	c8		iny				iny
.2586	b1 28		lda ($28),y			lda 	(codePtr),y
.2588	55 58		eor $58,x			eor 	esInt1,x
.258a	05 2a		ora $2a				ora 	temp0
.258c	f0 10		beq $259e			beq 	_CLCLTExit
.258e	88		dey				dey
.258f	b1 28		lda ($28),y			lda 	(codePtr),y
.2591	d5 50		cmp $50,x			cmp 	esInt0,x
.2593	c8		iny				iny
.2594	b1 28		lda ($28),y			lda 	(codePtr),y
.2596	f5 58		sbc $58,x			sbc 	esInt1,x
.2598	a9 ff		lda #$ff			lda 	#255
.259a	90 02		bcc $259e			bcc 	_CLCLTExit
.259c	a9 01		lda #$01			lda 	#1
.259e					_CLCLTExit:
.259e	60		rts				rts
.259f					CLStructureCheck:
.259f	85 2a		sta $2a				sta 	temp0
.25a1	a0 03		ldy #$03			ldy 	#3
.25a3					_CLSCLoop:
.25a3	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.25a5	c8		iny				iny
.25a6	c9 80		cmp #$80			cmp 	#$80
.25a8	90 f9		bcc $25a3			bcc 	_CLSCLoop 					; $00-$7F just step over.
.25aa	f0 28		beq $25d4			beq		_CLSCExit					; EOL return
.25ac	c9 86		cmp #$86			cmp 	#$86 						; special handler
.25ae	90 1e		bcc $25ce			bcc 	_CLSCSpecial
.25b0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.25b2	90 ef		bcc $25a3			bcc 	_CLSCLoop
.25b4	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.25b6	b0 eb		bcs $25a3			bcs 	_CLSCLoop
.25b8	aa		tax				tax 								; get adjustment
.25b9	bd c7 2a	lda $2ac7,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.25bc	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.25be	d0 e3		bne $25a3			bne 	_CLSCLoop
.25c0	38		sec				sec
.25c1	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.25c3	0a		asl a				asl 	a 							; double indent step
.25c4	18		clc				clc
.25c5	6d d5 0c	adc $0cd5			adc 	structIndent 				; add to structure indent
.25c8	8d d5 0c	sta $0cd5			sta 	structIndent
.25cb	4c a3 25	jmp $25a3			jmp 	_CLSCLoop
.25ce					_CLSCSpecial:
.25ce	20 2b 24	jsr $242b			jsr 	ScannerSkipSpecial
.25d1	4c a3 25	jmp $25a3			jmp 	_CLSCLoop
.25d4					_CLSCExit:
.25d4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.25d5					CommandLoad:
.25d5	20 fd 25	jsr $25fd			jsr 	CLSParameters 					; get parameters for load.
.25d8	08		php				php
.25d9	a2 0e		ldx #$0e		ldx	#14
.25db	20 f6 14	jsr $14f6		jsr	deviceHandler
.25de	28		plp				plp
.25df	b0 08		bcs $25e9			bcs 	_CLExit 						; if CC then load a program, so warm start.
.25e1	20 9f 24	jsr $249f			jsr 	CommandClear
.25e4	a2 04		ldx #$04		ldx	#4
.25e6	20 97 1c	jsr $1c97		jsr	interactionHandler
.25e9					_CLExit
.25e9	60		rts				rts
.25ea					CommandSave:
.25ea	20 fd 25	jsr $25fd			jsr 	CLSParameters					; get parameters for save
.25ed	90 08		bcc $25f7			bcc 	_CSNoOverrideAddress
.25ef	20 bd 32	jsr $32bd			jsr 	CheckComma 						; should be a comma.
.25f2	a2 02		ldx #$02			ldx 	#2
.25f4	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger 				; get save end address.
.25f7					_CSNoOverrideAddress:
.25f7	a2 18		ldx #$18		ldx	#24
.25f9	20 f6 14	jsr $14f6		jsr	deviceHandler
.25fc	60		rts				rts
.25fd					CLSParameters:
.25fd	a2 00		ldx #$00			ldx 	#0 								; string
.25ff	20 a0 2b	jsr $2ba0			jsr 	EvaluateString
.2602	e8		inx				inx 									; erase out +1 +2
.2603	20 3d 32	jsr $323d			jsr 	MInt32False
.2606	e8		inx				inx
.2607	20 3d 32	jsr $323d			jsr 	MInt32False
.260a	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.260d	85 51		sta $51				sta 	esInt0+1
.260f	ad c9 0a	lda $0ac9			lda 	basePage+1
.2612	85 59		sta $59				sta 	esInt1+1
.2614	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2617	85 52		sta $52				sta 	esInt0+2
.2619	ad cb 0a	lda $0acb			lda 	endProgram+1
.261c	85 5a		sta $5a				sta 	esInt1+2
.261e	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2620	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2622	d0 08		bne $262c			bne 	_CLSDefault
.2624	c8		iny				iny 									; skip comma
.2625	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2627	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger
.262a	38		sec				sec
.262b	60		rts				rts
.262c					_CLSDefault:
.262c	18		clc				clc
.262d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.262e					Command_New:
.262e					Command_XNew:
.262e	20 cc 26	jsr $26cc			jsr 	ResetCodeAddress 			; point to first line
.2631	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2633	98		tya				tya
.2634	91 28		sta ($28),y			sta 	(codePtr),y
.2636	20 9f 24	jsr $249f			jsr 	CommandClear 				; clear everything down.
.2639	4c f5 1f	jmp $1ff5			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0cd6					breakCounter:
>0cd6								.fill 	1
.0cd7					breakIncrement:
>0cd7								.fill 	1
.263c					Command_Run:
.263c					XCommand_Run:
.263c	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.263e	9a		txs				txs
.263f	20 c6 26	jsr $26c6			jsr 	BreakOn 					; turn break on
.2642	20 9f 24	jsr $249f			jsr 	CommandClear 				; clear everything.
.2645	20 cc 26	jsr $26cc			jsr 	ResetCodeAddress 			; back to the start.
.2648					Command_RunFrom:
.2648	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.264a					CRNextInstruction:
.264a	64 3a		stz $3a				stz 	softMemAlloc+1
.264c	ad d6 0c	lda $0cd6			lda 	breakCounter 				; check for break.
.264f	6d d7 0c	adc $0cd7			adc 	breakIncrement
.2652	8d d6 0c	sta $0cd6			sta 	breakCounter
.2655	90 05		bcc $265c			bcc 	_CRNoChecks
.2657	a2 02		ldx #$02		ldx	#2
.2659	20 f6 14	jsr $14f6		jsr	deviceHandler
.265c					_CRNoChecks
.265c	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.265e	10 1c		bpl $267c			bpl 	_CRNotToken
.2660	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2662	b0 0c		bcs $2670			bcs 	_CRExecute
.2664	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2666	b0 71		bcs $26d9			bcs 	Unimplemented
.2668	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.266a	b0 04		bcs $2670			bcs 	_CRExecute
.266c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.266e	b0 16		bcs $2686			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2670					_CRExecute:
.2670	c8		iny				iny 								; consume it.
.2671	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2672	aa		tax				tax
.2673	20 79 26	jsr $2679			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2676	4c 4a 26	jmp $264a			jmp 	CRNextInstruction
.2679					_CRRunRoutine:
.2679	7c e3 26	jmp ($26e3,x)			jmp 	(Group0Vectors,x)
.267c					_CRNotToken:
.267c	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.267e	b0 59		bcs $26d9			bcs 	Unimplemented
.2680					_CRDefaultLet:
.2680	20 28 1f	jsr $1f28			jsr 	CommandLet 					; do the default, LET
.2683	4c 4a 26	jmp $264a			jmp 	CRNextInstruction
.2686					_CRCheckIndirect:
.2686	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2688	f0 0a		beq $2694			beq 	_CRAndCommand
.268a	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.268c	f0 f2		beq $2680			beq 	_CRDefaultLet
.268e	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2690	f0 ee		beq $2680			beq 	_CRDefaultLet
.2692	d0 45		bne $26d9			bne 	Unimplemented
.2694					_CRAndCommand:
.2694	c8		iny				iny 								; skip over the AND token
.2695	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2697	20 b1 26	jsr $26b1			jsr 	CommandAssembler 			; do the assembler command
.269a	4c 4a 26	jmp $264a			jmp 	CRNextInstruction 			; and loop round.
.269d					CommandShift1:
.269d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.269f	10 38		bpl $26d9			bpl 	Unimplemented 				; we have an error as this should not happen.
.26a1	c8		iny				iny 								; advance over it.
.26a2	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.26a4	b0 0b		bcs $26b1			bcs 	CommandAssembler
.26a6	0a		asl a				asl 	a 							; double into X
.26a7	aa		tax				tax
.26a8	7c a7 27	jmp ($27a7,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.26ab					CommandShift2:
.26ab	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.26ad	20 4d 18	jsr $184d		jsr	extensionHandler
.26b0	60		rts				rts
.26b1					CommandAssembler:
.26b1	a2 02		ldx #$02		ldx	#2
.26b3	20 b4 13	jsr $13b4		jsr	assemblerHandler
.26b6	60		rts				rts
.26b7					CommandAssemblerLabel:
.26b7	a2 04		ldx #$04		ldx	#4
.26b9	20 b4 13	jsr $13b4		jsr	assemblerHandler
.26bc	60		rts				rts
.26bd					CommandColon:
.26bd	60		rts				rts
.26be					CommandBreak:
.26be	20 a9 2b	jsr $2ba9			jsr 	EvaluateRootInteger
.26c1	20 64 32	jsr $3264			jsr 	MInt32Zero
.26c4	f0 02		beq $26c8			beq 	BreakOff
.26c6					BreakOn:
.26c6	a2 08		ldx #$08			ldx 	#8
.26c8					BreakOff:
.26c8	8e d7 0c	stx $0cd7			stx 	breakIncrement
.26cb	60		rts				rts
.26cc					ResetCodeAddress:
.26cc	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.26cf	85 28		sta $28				sta 	codePtr
.26d1	ad c9 0a	lda $0ac9			lda 	basePage+1
.26d4	85 29		sta $29				sta 	codePtr+1
.26d6	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.26d8	60		rts				rts
.26d9					Unimplemented:
.26d9	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.26db	20 18 15	jsr $1518		jsr	errorHandler
.26de					TKErr01:
.26de					TKErr02:
.26de					TKErr03:
.26de					TKErr04:
.26de					TKErr05:
.26de					TKErr06:
.26de					TKErr07:
.26de					TKErr08:
.26de					TKErr09:
.26de					TKErr10:
.26de					TKErr11:
.26de					TKErr12:
.26de					TKErr13:
.26de					TKErr14:
.26de	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.26e0	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.26e3					Group0Vectors:
>26e3	fb 1f					.word	AdvanceNextLine          ; $80 [[eol]]
>26e5	9d 26					.word	CommandShift1            ; $81 [[sh1]]
>26e7	ab 26					.word	CommandShift2            ; $82 [[sh2]]
>26e9	de 26					.word	TKErr09                  ; $83 [[sh3]]
>26eb	de 26					.word	TKErr10                  ; $84 [[fpc]]
>26ed	de 26					.word	TKErr08                  ; $85 [[str]]
>26ef	90 28					.word	AndHandler               ; $86 and
>26f1	7d 28					.word	OrHandler                ; $87 or
>26f3	6a 28					.word	XorHandler               ; $88 xor
>26f5	b2 29					.word	CompareGreaterEq         ; $89 >=
>26f7	bc 29					.word	CompareLessEq            ; $8a <=
>26f9	9e 29					.word	CompareGreater           ; $8b >
>26fb	94 29					.word	CompareLess              ; $8c <
>26fd	8a 29					.word	CompareEquals            ; $8d =
>26ff	a8 29					.word	CompareNotEquals         ; $8e <>
>2701	fb 27					.word	AddHandler               ; $8f +
>2703	1e 28					.word	SubHandler               ; $90 -
>2705	b6 28					.word	ShrHandler               ; $91 >>
>2707	a3 28					.word	ShlHandler               ; $92 <<
>2709	31 28					.word	MulHandler               ; $93 *
>270b	44 28					.word	DivHandler               ; $94 /
>270d	57 28					.word	ModHandler               ; $95 mod
>270f	ef 28					.word	PowerHandler             ; $96 ^
>2711	c9 28					.word	WordRefHandler           ; $97 !
>2713	dc 28					.word	ByteRefHandler           ; $98 ?
>2715	ba 23					.word	Command_Repeat           ; $99 repeat
>2717	64 24					.word	Command_While            ; $9a while
>2719	0f 20					.word	Command_FOR              ; $9b for
>271b	1e 21					.word	CommandIf                ; $9c if
>271d	de 26					.word	TKErr04                  ; $9d defproc
>271f	c7 23					.word	Command_Until            ; $9e until
>2721	87 24					.word	Command_Wend             ; $9f wend
>2723	70 20					.word	Command_NEXT             ; $a0 next
>2725	de 26					.word	TKErr06                  ; $a1 then
>2727	59 21					.word	Command_ENDIF            ; $a2 endif
>2729	c9 22					.word	ReturnProc               ; $a3 endproc
>272b	16 2b					.word	UnaryParenthesis         ; $a4 (
>272d	f2 2c					.word	UnaryLen                 ; $a5 len(
>272f	36 2d					.word	UnarySgn                 ; $a6 sgn(
>2731	1f 2d					.word	UnaryAbs                 ; $a7 abs(
>2733	8f 2d					.word	Unary_Random             ; $a8 random(
>2735	d9 2d					.word	Unary_Page               ; $a9 page
>2737	39 32					.word	MInt32True               ; $aa true
>2739	3d 32					.word	MInt32False              ; $ab false
>273b	a4 2d					.word	Unary_Min                ; $ac min(
>273d	a8 2d					.word	Unary_Max                ; $ad max(
>273f	b1 2e					.word	UnarySys                 ; $ae sys(
>2741	5a 2e					.word	UnaryTimer               ; $af timer(
>2743	6f 2c					.word	EventFunction            ; $b0 event(
>2745	83 2e					.word	UnaryGet                 ; $b1 get(
>2747	73 2e					.word	UnaryInkey               ; $b2 inkey(
>2749	2a 2e					.word	UnaryAlloc               ; $b3 alloc(
>274b	ea 2e					.word	ExecChr                  ; $b4 chr$(
>274d	1a 2f					.word	ExecLeft                 ; $b5 left$(
>274f	37 2f					.word	ExecMid                  ; $b6 mid$(
>2751	5f 2f					.word	ExecRight                ; $b7 right$(
>2753	f1 2b					.word	Event_Str                ; $b8 str$(
>2755	20 2c					.word	UnaryVal                 ; $b9 val(
>2757	4d 2d					.word	UnaryPeek                ; $ba peek(
>2759	53 2d					.word	UnaryDeek                ; $bb deek(
>275b	59 2d					.word	UnaryLeek                ; $bc leek(
>275d	10 2d					.word	UnaryAsc                 ; $bd asc(
>275f	04 2e					.word	UnaryIntToFloat          ; $be int(
>2761	17 2e					.word	UnaryFloatToInt          ; $bf float(
>2763	23 2c					.word	UnaryIsVal               ; $c0 isval(
>2765	01 2f					.word	ExecUpper                ; $c1 upper$(
>2767	fe 2e					.word	ExecLower                ; $c2 lower$(
>2769	e7 2d					.word	UnaryReference           ; $c3 @
>276b	fd 2d					.word	UnaryComplement          ; $c4 ~
>276d	fa 2d					.word	UnaryHexMarker           ; $c5 &
>276f	9c 2e					.word	UnaryGetString           ; $c6 get$(
>2771	a2 2e					.word	UnaryInkeyString         ; $c7 inkey$(
>2773	d9 2e					.word	UnaryMem                 ; $c8 mem
>2775	de 26					.word	TKErr01                  ; $c9 )
>2777	bd 26					.word	CommandColon             ; $ca :
>2779	de 26					.word	TKErr02                  ; $cb ,
>277b	de 26					.word	TKErr03                  ; $cc ;
>277d	e3 1f					.word	Command_Rem2             ; $cd '
>277f	de 26					.word	TKErr07                  ; $ce to
>2781	de 26					.word	TKErr05                  ; $cf step
>2783	5c 22					.word	CallProc                 ; $d0 proc
>2785	5a 21					.word	CommandLocal             ; $d1 local
>2787	1a 1f					.word	Command_Dim              ; $d2 dim
>2789	e3 1f					.word	Command_Rem              ; $d3 rem
>278b	28 1f					.word	CommandLet               ; $d4 let
>278d	64 1d					.word	Command_Input            ; $d5 input
>278f	53 21					.word	Command_ELSE             ; $d6 else
>2791	eb 1e					.word	Command_VDU              ; $d7 vdu
>2793	1a 1e					.word	Command_Print            ; $d8 print
>2795	cc 1c					.word	CommandData              ; $d9 data
>2797	de 26					.word	TKErr13                  ; $da image
>2799	de 26					.word	TKErr12                  ; $db at
>279b	de 26					.word	TKErr14                  ; $dc flip
>279d	0c 1f					.word	Command_Assert           ; $dd assert
>279f	a6 1f					.word	Command_Poke             ; $de poke
>27a1	aa 1f					.word	Command_Doke             ; $df doke
>27a3	ae 1f					.word	Command_Loke             ; $e0 loke
>27a5	bb 1e					.word	Command_Ink              ; $e1 ink
>27a7	c6 1e					.word	Command_Paper            ; $e2 paper
>27a9	b5 1e					.word	Command_CLS              ; $e3 cls
>27ab	d1 1e					.word	Command_Locate           ; $e4 locate
>27ad	be 26					.word	CommandBreak             ; $e5 break
>27af	b7 26					.word	CommandAssemblerLabel    ; $e6 .
>27b1	de 26					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.27b3					Group1Vectors:
>27b3	9f 24					.word	CommandClear             ; $86 clear
>27b5	d5 25					.word	CommandLoad              ; $87 load
>27b7	ea 25					.word	CommandSave              ; $88 save
>27b9	fa 24					.word	CommandList              ; $89 list
>27bb	2e 26					.word	Command_New              ; $8a new
>27bd	3c 26					.word	Command_Run              ; $8b run
>27bf	a1 1c					.word	CommandRead              ; $8c read
>27c1	d5 1c					.word	CommandRestore           ; $8d restore
>27c3	f5 1f					.word	CommandEnd               ; $8e end
>27c5	f0 1f					.word	CommandStop              ; $8f stop
>27c7	f8 1f					.word	CommandXemu              ; $90 xemu
>27c9	32 1d					.word	CommandGOTO              ; $91 goto
>27cb	07 1d					.word	CommandGOSUB             ; $92 gosub
>27cd	1a 1d					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.27cf					BinaryProcess:
.27cf	b5 48		lda $48,x			lda 	esType,x 					; or type bytes together and check bit 6.
.27d1	15 49		ora $49,x			ora 	esType+1,x 					; (the float bit)
.27d3	0a		asl a				asl 	a
.27d4	30 0e		bmi $27e4			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.27d6	18		clc				clc 								; return CC for integer
.27d7	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.27d9	f0 08		beq $27e3			beq 	_BPExit 					; if both integer then return with CC.
.27db	20 e9 27	jsr $27e9			jsr 	BPMakeBothFloat 			; make both float
.27de	a9 01		lda #$01			lda 	#$01 						; set result type to float
.27e0	95 48		sta $48,x			sta 	esType,x
.27e2	38		sec				sec 								; and return with carry set.
.27e3					_BPExit:
.27e3	60		rts				rts
.27e4					_BPStringType:
.27e4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.27e6	20 18 15	jsr $1518		jsr	errorHandler
.27e9					BPMakeBothFloat:
.27e9	e8		inx				inx
.27ea	20 ee 27	jsr $27ee			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.27ed	ca		dex				dex
.27ee					BPMakeFloat:
.27ee	b5 48		lda $48,x			lda 	esType,x 					; get type bit which is in bit 0
.27f0	4a		lsr a				lsr 	a
.27f1	b0 07		bcs $27fa			bcs 	_BPIsFloat 					; already a float if set.
.27f3	8a		txa				txa
.27f4	a2 1c		ldx #$1c		ldx	#28
.27f6	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.27f9	aa		tax				tax
.27fa					_BPIsFloat:
.27fa	60		rts				rts
.27fb					AddHandler:
.27fb	20 cc 29	jsr $29cc			jsr 	DereferenceTwo 				; dereference top two on stack.
.27fe	b5 48		lda $48,x			lda 	esType,x 					; check two strings.
.2800	35 49		and $49,x			and 	esType+1,x
.2802	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2804	d0 10		bne $2816			bne 	_AHStringConcat				; concatenate strings.
.2806	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.2809	b0 03		bcs $280e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.280b	4c 21 31	jmp $3121			jmp 	MInt32Add 							; else do it as integer.
.280e					_IsFPOperation:
.280e	8a		txa				txa 								; call the relevant fp routine
.280f	a2 04		ldx #$04		ldx	#4
.2811	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2814	aa		tax				tax
.2815	60		rts				rts
.2816					_AHStringConcat:
.2816	8a		txa				txa 								; handled by the string module.
.2817	a2 06		ldx #$06		ldx	#6
.2819	20 e6 35	jsr $35e6		jsr	stringHandler
.281c	aa		tax				tax
.281d	60		rts				rts
.281e					SubHandler:
.281e	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.2821	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.2824	b0 03		bcs $2829			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2826	4c 3b 31	jmp $313b			jmp 	MInt32Sub 							; else do it as integer.
.2829					_IsFPOperation:
.2829	8a		txa				txa 								; call the relevant fp routine
.282a	a2 12		ldx #$12		ldx	#18
.282c	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.282f	aa		tax				tax
.2830	60		rts				rts
.2831					MulHandler:
.2831	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.2834	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.2837	b0 03		bcs $283c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2839	4c 55 31	jmp $3155			jmp 	MInt32Multiply 							; else do it as integer.
.283c					_IsFPOperation:
.283c	8a		txa				txa 								; call the relevant fp routine
.283d	a2 0c		ldx #$0c		ldx	#12
.283f	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2842	aa		tax				tax
.2843	60		rts				rts
.2844					DivHandler:
.2844	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.2847	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.284a	b0 03		bcs $284f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.284c	4c 12 30	jmp $3012			jmp 	MInt32SDivide 							; else do it as integer.
.284f					_IsFPOperation:
.284f	8a		txa				txa 								; call the relevant fp routine
.2850	a2 08		ldx #$08		ldx	#8
.2852	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2855	aa		tax				tax
.2856	60		rts				rts
.2857					ModHandler:
.2857	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.285a	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.285d	b0 03		bcs $2862			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.285f	4c 90 30	jmp $3090			jmp 	MInt32Modulus 							; else do it as integer.
.2862					_IsFPOperation:
.2862	8a		txa				txa 								; call the relevant fp routine
.2863	a2 0a		ldx #$0a		ldx	#10
.2865	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2868	aa		tax				tax
.2869	60		rts				rts
.286a					XorHandler:
.286a	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.286d	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.2870	b0 03		bcs $2875			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2872	4c c4 2f	jmp $2fc4			jmp 	MInt32Xor 							; else do it as integer.
.2875					_IsFPOperation:
.2875	8a		txa				txa 								; call the relevant fp routine
.2876	a2 0a		ldx #$0a		ldx	#10
.2878	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.287b	aa		tax				tax
.287c	60		rts				rts
.287d					OrHandler:
.287d	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.2880	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.2883	b0 03		bcs $2888			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2885	4c ab 2f	jmp $2fab			jmp 	MInt32Or 							; else do it as integer.
.2888					_IsFPOperation:
.2888	8a		txa				txa 								; call the relevant fp routine
.2889	a2 0a		ldx #$0a		ldx	#10
.288b	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.288e	aa		tax				tax
.288f	60		rts				rts
.2890					AndHandler:
.2890	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.2893	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.2896	b0 03		bcs $289b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2898	4c 92 2f	jmp $2f92			jmp 	MInt32And 							; else do it as integer.
.289b					_IsFPOperation:
.289b	8a		txa				txa 								; call the relevant fp routine
.289c	a2 0a		ldx #$0a		ldx	#10
.289e	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.28a1	aa		tax				tax
.28a2	60		rts				rts
.28a3					ShlHandler:
.28a3	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.28a6	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.28a9	b0 03		bcs $28ae			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28ab	4c 24 29	jmp $2924			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.28ae					_IsFPOperation:
.28ae	8a		txa				txa 								; call the relevant fp routine
.28af	a2 0a		ldx #$0a		ldx	#10
.28b1	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.28b4	aa		tax				tax
.28b5	60		rts				rts
.28b6					ShrHandler:
.28b6	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.28b9	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.28bc	b0 03		bcs $28c1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28be	4c 27 29	jmp $2927			jmp 	MInt32ShiftRightX 							; else do it as integer.
.28c1					_IsFPOperation:
.28c1	8a		txa				txa 								; call the relevant fp routine
.28c2	a2 0a		ldx #$0a		ldx	#10
.28c4	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.28c7	aa		tax				tax
.28c8	60		rts				rts
.28c9					WordRefHandler:
.28c9	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.28cc	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.28cf	b0 03		bcs $28d4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28d1	4c 16 29	jmp $2916			jmp 	MInt32WordIndirect 							; else do it as integer.
.28d4					_IsFPOperation:
.28d4	8a		txa				txa 								; call the relevant fp routine
.28d5	a2 0a		ldx #$0a		ldx	#10
.28d7	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.28da	aa		tax				tax
.28db	60		rts				rts
.28dc					ByteRefHandler:
.28dc	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.28df	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.28e2	b0 03		bcs $28e7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28e4	4c 1a 29	jmp $291a			jmp 	MInt32ByteIndirect 							; else do it as integer.
.28e7					_IsFPOperation:
.28e7	8a		txa				txa 								; call the relevant fp routine
.28e8	a2 0a		ldx #$0a		ldx	#10
.28ea	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.28ed	aa		tax				tax
.28ee	60		rts				rts
.28ef					PowerHandler:
.28ef	20 cc 29	jsr $29cc			jsr 	DereferenceTwo
.28f2	20 cf 27	jsr $27cf			jsr 	BinaryProcess 				; check to see if either is float
.28f5	b0 03		bcs $28fa			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.28f7	4c 02 29	jmp $2902			jmp 	PowerInteger 							; else do it as integer.
.28fa					_IsFPOperation:
.28fa	8a		txa				txa 								; call the relevant fp routine
.28fb	a2 18		ldx #$18		ldx	#24
.28fd	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2900	aa		tax				tax
.2901	60		rts				rts
.2902					PowerInteger:
.2902	20 e9 27	jsr $27e9			jsr 	BPMakeBothFloat				; make them float.
.2905	8a		txa				txa
.2906	a2 18		ldx #$18		ldx	#24
.2908	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.290b	a2 14		ldx #$14		ldx	#20
.290d	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2910	aa		tax				tax
.2911	a9 00		lda #$00			lda 	#0 							; make type integer
.2913	95 48		sta $48,x			sta 	esType,x
.2915	60		rts				rts
.2916					Mint32WordIndirect:
.2916	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.2918	d0 02		bne $291c			bne 	Min32Indirect
.291a					Mint32ByteIndirect:
.291a	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.291c					Min32Indirect:
.291c	48		pha				pha 								; save the indirection
.291d	20 21 31	jsr $3121			jsr 	MInt32Add 					; add a!b a?b
.2920	68		pla				pla 								; and set the type to reference.
.2921	95 48		sta $48,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2923	60		rts				rts
.2924					Mint32ShiftLeftX:
.2924	18		clc				clc 								; CC shift left
.2925	90 01		bcc $2928			bcc 	Mint32Shift
.2927					Mint32ShiftRightX:
.2927	38		sec				sec 								; CS shift right
.2928					Mint32Shift:
.2928	08		php				php 								; save carry flag on stack.
.2929	b5 59		lda $59,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.292b	15 61		ora $61,x			ora 	esInt2+1,x
.292d	15 69		ora $69,x			ora 	esInt3+1,x
.292f	d0 1e		bne $294f			bne 	_MShiftZero
.2931	b5 51		lda $51,x			lda 	esInt0+1,x
.2933	c9 20		cmp #$20			cmp 	#32
.2935	b0 18		bcs $294f			bcs 	_MShiftZero
.2937					_MShiftLoop:
.2937	b5 51		lda $51,x			lda 	esInt0+1,x 					; check count is zero
.2939	f0 12		beq $294d			beq 	_MShiftExit
.293b	d6 51		dec $51,x			dec 	esInt0+1,x
.293d	28		plp				plp 								; restore and save carry
.293e	08		php				php
.293f	90 06		bcc $2947			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2941	20 5b 32	jsr $325b			jsr 	Mint32ShiftRight
.2944	4c 37 29	jmp $2937			jmp 	_MShiftLoop
.2947					_MShiftLeft:
.2947	20 52 32	jsr $3252			jsr 	Mint32ShiftLeft
.294a	4c 37 29	jmp $2937			jmp 	_MShiftLoop
.294d					_MShiftExit:
.294d	28		plp				plp	 								; throw saved carry and exit
.294e	60		rts				rts
.294f					_MShiftZero:
.294f	4c 3d 32	jmp $323d			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.2952					PerformComparison:
.2952	20 cc 29	jsr $29cc			jsr 	DereferenceTwo 				; make both values.
.2955	b5 48		lda $48,x			lda 	esType,x 					; check for two strings.
.2957	35 49		and $49,x			and 	esType+1,x
.2959	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.295a	30 1d		bmi $2979			bmi 	_PCIsString
.295c	b5 48		lda $48,x			lda 	esType,x 					; check either is floating point.
.295e	15 49		ora $49,x			ora 	esType+1,x
.2960	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2961	30 22		bmi $2985			bmi 	_PCError
.2963	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.2965	f0 0f		beq $2976			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.2967	20 e9 27	jsr $27e9			jsr 	BPMakeBothFloat 			; make both float
.296a	8a		txa				txa
.296b	a2 06		ldx #$06		ldx	#6
.296d	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2970	86 32		stx $32				stx 	tempShort 					; save result
.2972	aa		tax				tax
.2973	a5 32		lda $32				lda 	tempShort
.2975	60		rts				rts
.2976					_PCIsInteger:
.2976	4c dd 2f	jmp $2fdd			jmp 	MInt32Compare
.2979					_PCIsString:
.2979	8a		txa				txa 								; A has SP
.297a	a2 0a		ldx #$0a		ldx	#10
.297c	20 e6 35	jsr $35e6		jsr	stringHandler
.297f	86 32		stx $32				stx 	tempShort 					; save result
.2981	aa		tax				tax 								; put SP back in X and get result.
.2982	a5 32		lda $32				lda 	tempShort
.2984	60		rts				rts
.2985					_PCError:
.2985	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2987	20 18 15	jsr $1518		jsr	errorHandler
.298a					CompareEquals:
.298a	20 52 29	jsr $2952			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.298d	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.298f	f0 35		beq $29c6			beq  	CompareTrue
.2991	4c c9 29	jmp $29c9			jmp 	CompareFalse
.2994					CompareLess:
.2994	20 52 29	jsr $2952			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.2997	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.2999	f0 2b		beq $29c6			beq  	CompareTrue
.299b	4c c9 29	jmp $29c9			jmp 	CompareFalse
.299e					CompareGreater:
.299e	20 52 29	jsr $2952			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.29a1	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.29a3	f0 21		beq $29c6			beq  	CompareTrue
.29a5	4c c9 29	jmp $29c9			jmp 	CompareFalse
.29a8					CompareNotEquals:
.29a8	20 52 29	jsr $2952			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.29ab	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.29ad	d0 17		bne $29c6			bne  	CompareTrue
.29af	4c c9 29	jmp $29c9			jmp 	CompareFalse
.29b2					CompareGreaterEq:
.29b2	20 52 29	jsr $2952			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.29b5	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.29b7	d0 0d		bne $29c6			bne  	CompareTrue
.29b9	4c c9 29	jmp $29c9			jmp 	CompareFalse
.29bc					CompareLessEq:
.29bc	20 52 29	jsr $2952			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.29bf	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.29c1	d0 03		bne $29c6			bne  	CompareTrue
.29c3	4c c9 29	jmp $29c9			jmp 	CompareFalse
.29c6					CompareTrue:
.29c6	4c 39 32	jmp $3239			jmp 	MInt32True
.29c9					CompareFalse:
.29c9	4c 3d 32	jmp $323d			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.29cc					DereferenceTwo:
.29cc	e8		inx				inx
.29cd	20 d1 29	jsr $29d1			jsr 	DereferenceOne
.29d0	ca		dex				dex
.29d1					DereferenceOne:
.29d1	b5 48		lda $48,x			lda 	esType,x
.29d3	10 3d		bpl $2a12			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.29d5	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.29d6	b0 3b		bcs $2a13			bcs 	_DRFloatDeReference
.29d8	98		tya				tya
.29d9	48		pha				pha
.29da	b5 50		lda $50,x			lda 	esInt0,x 					; copy address to temp0
.29dc	85 2a		sta $2a				sta 	temp0
.29de	b5 58		lda $58,x			lda 	esInt1,x
.29e0	85 2b		sta $2b				sta 	temp0+1
.29e2	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.29e4	95 58		sta $58,x			sta 	esInt1,x
.29e6	95 60		sta $60,x			sta 	esInt2,x
.29e8	95 68		sta $68,x			sta 	esInt3,x
.29ea	b5 48		lda $48,x			lda 	esType,x 					; get the type byte.
.29ec	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.29ee	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.29ef	30 0d		bmi $29fe			bmi 	_DeRefString 				; string, 2 bytes only
.29f1	d0 11		bne $2a04			bne 	_DeRefByte 					; byte 1 byte only
.29f3					_DeRefLong:
.29f3	a0 03		ldy #$03			ldy 	#3
.29f5	b1 2a		lda ($2a),y			lda 	(temp0),y
.29f7	95 68		sta $68,x			sta 	esInt3,x
.29f9	88		dey				dey
.29fa	b1 2a		lda ($2a),y			lda 	(temp0),y
.29fc	95 60		sta $60,x			sta 	esInt2,x
.29fe					_DeRefString:
.29fe	a0 01		ldy #$01			ldy 	#1
.2a00	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a02	95 58		sta $58,x			sta 	esInt1,x
.2a04					_DeRefByte:
.2a04	a0 00		ldy #$00			ldy 	#0
.2a06	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a08	95 50		sta $50,x			sta 	esInt0,x
.2a0a	b5 48		lda $48,x			lda 	esType,x 					; clear byte and deref bits.
.2a0c	29 40		and #$40			and 	#$40
.2a0e	95 48		sta $48,x			sta 	esType,x
.2a10	68		pla				pla
.2a11	a8		tay				tay
.2a12					_DRNotReference
.2a12	60		rts				rts
.2a13					_DRFloatDereference:
.2a13	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 					; address to deref in temp0
.2a16	8a		txa				txa
.2a17	a2 1e		ldx #$1e		ldx	#30
.2a19	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2a1c	aa		tax				tax
.2a1d	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.2a1f	95 48		sta $48,x			sta 	esType,x
.2a21	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.2a22					EvaluateLevel:
.2a22	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.2a24	b0 1e		bcs $2a44			bcs 	_ELStack
.2a26	48		pha				pha 								; save precedence level.
.2a27	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.2a29	95 50		sta $50,x			sta 	esInt0,x
.2a2b	95 58		sta $58,x			sta 	esInt1,x
.2a2d	95 60		sta $60,x			sta 	esInt2,x
.2a2f	95 68		sta $68,x			sta 	esInt3,x
.2a31	95 48		sta $48,x			sta 	esType,x 					; zero the type (integer value)
.2a33	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.2a35	30 26		bmi $2a5d			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.2a37	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.2a38	30 0f		bmi $2a49			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.2a3a	8a		txa				txa 								; stack level in X
.2a3b	a2 02		ldx #$02		ldx	#2
.2a3d	20 d3 41	jsr $41d3		jsr	variableHandler
.2a40	aa		tax				tax
.2a41	4c 86 2a	jmp $2a86			jmp		_ELHasTerm
.2a44					_ELStack:
.2a44	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.2a46	20 18 15	jsr $1518		jsr	errorHandler
.2a49					_ELIsConstant:
.2a49	4a		lsr a				lsr 	a 							; get the value back
.2a4a	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.2a4c	95 50		sta $50,x			sta 	esInt0,x 					; and put in LSB.
.2a4e					_ELCheckNext:
.2a4e	c8		iny				iny 								; look at next
.2a4f	b1 28		lda ($28),y			lda 	(codePtr),y
.2a51	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.2a53	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.2a55	b0 2f		bcs $2a86			bcs 	_ELHasTerm 					; done getting the constant.
.2a57	20 1f 2b	jsr $2b1f			jsr 	ELShiftByteIn 				; shift byte into position.
.2a5a	4c 4e 2a	jmp $2a4e			jmp 	_ELCheckNext
.2a5d					_ELIsToken:
.2a5d	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.2a5f	f0 0f		beq $2a70			beq 	_ELIsString
.2a61	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.2a63	d0 5f		bne $2ac4			bne 	_ELCheckUnary
.2a65	8a		txa				txa 								; put X into A
.2a66	c8		iny				iny 								; skip over the float marker
.2a67	a2 1a		ldx #$1a		ldx	#26
.2a69	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2a6c	aa		tax				tax 								; restore X
.2a6d	4c 86 2a	jmp $2a86			jmp 	_ELHasTerm
.2a70					_ELIsString:
.2a70	98		tya				tya 								; address of string is codePtr+y+1
.2a71	38		sec				sec
.2a72	65 28		adc $28				adc 	codePtr
.2a74	95 50		sta $50,x			sta 	esInt0,x
.2a76	a5 29		lda $29				lda 	codePtr+1
.2a78	69 00		adc #$00			adc 	#0
.2a7a	95 58		sta $58,x			sta 	esInt1,x
.2a7c	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2a7e	95 48		sta $48,x			sta 	esType,x
.2a80	c8		iny				iny 								; skip over string.
.2a81	98		tya				tya
.2a82	38		sec				sec									; +1 for the length itself.
.2a83	71 28		adc ($28),y			adc 	(codePtr),y
.2a85	a8		tay				tay 								; and fall through to term loop code.
.2a86					_ELHasTerm:
.2a86	b1 28		lda ($28),y			lda 	(codePtr),y
.2a88	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.2a8a	90 04		bcc $2a90			bcc 	_ELPopExit
.2a8c	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2a8e	90 02		bcc $2a92			bcc 	_ELHasBinaryTerm
.2a90					_ELPopExit:
.2a90	68		pla				pla
.2a91					_ELExit:
.2a91	60		rts				rts
.2a92					_ELHasBinaryTerm:
.2a92	84 32		sty $32				sty 	tempShort 					; save position
.2a94	a8		tay				tay 								; use token as an index and get the precedence.
.2a95	b9 c7 2a	lda $2ac7,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.2a98	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2a9a	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.2a9c	68		pla				pla 								; restore current level.
.2a9d	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2a9f	b0 f0		bcs $2a91			bcs 	_ELExit
.2aa1	48		pha				pha 								; save current level back on the stack.
.2aa2	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2aa4	48		pha				pha
.2aa5	c8		iny				iny
.2aa6	e8		inx				inx 								; calculate the RHS at the operator precedence.
.2aa7	a5 32		lda $32				lda 	tempShort
.2aa9	20 22 2a	jsr $2a22			jsr 	EvaluateLevel
.2aac	ca		dex				dex
.2aad	68		pla				pla 								; get the operator back out.
.2aae					_ELExecuteA:
.2aae	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2ab0	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2ab1	aa		tax				tax
.2ab2	bd e3 26	lda $26e3,x			lda 	Group0Vectors,x
.2ab5	85 2a		sta $2a				sta 	temp0
.2ab7	bd e4 26	lda $26e4,x			lda 	Group0Vectors+1,x
.2aba	85 2b		sta $2b				sta 	temp0+1
.2abc	a6 32		ldx $32				ldx 	tempShort
.2abe	20 0b 2b	jsr $2b0b			jsr 	_ELCallTemp0
.2ac1	4c 86 2a	jmp $2a86			jmp 	_ELHasTerm 					; and loop back round.
.2ac4					_ELCheckUnary:
.2ac4	c8		iny				iny 								; skip over token.
.2ac5	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.2ac7	f0 19		beq $2ae2			beq 	_ELMinus
.2ac9	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.2acb	f0 2c		beq $2af9			beq 	_ELIndirect
.2acd	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2acf	f0 28		beq $2af9			beq 	_ELIndirect
.2ad1	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2ad3	f0 39		beq $2b0e			beq 	_ELExtension
.2ad5	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.2ad7	90 04		bcc $2add			bcc 	_ELUSyntax
.2ad9	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.2adb	90 d1		bcc $2aae			bcc 	_ELExecuteA 				; if so do that token.
.2add					_ELUSyntax:
.2add	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2adf	20 18 15	jsr $1518		jsr	errorHandler
.2ae2					_ELMinus:
.2ae2	20 74 2b	jsr $2b74			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2ae5	b5 48		lda $48,x			lda 	esType,x 					; is it integer
.2ae7	f0 0a		beq $2af3			beq 	_ELMinusInteger
.2ae9	8a		txa				txa
.2aea	a2 0e		ldx #$0e		ldx	#14
.2aec	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2aef	aa		tax				tax
.2af0	4c 86 2a	jmp $2a86			jmp 	_ELHasTerm
.2af3					_ELMinusInteger:
.2af3	20 f7 31	jsr $31f7			jsr 	MInt32Negate 				; do int negate
.2af6	4c 86 2a	jmp $2a86			jmp 	_ELHasTerm
.2af9					_ELIndirect:
.2af9	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.2afa	20 7d 2b	jsr $2b7d			jsr 	EvaluateIntegerTerm 		; integer address
.2afd	68		pla				pla
.2afe	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2b00	f0 02		beq $2b04			beq 	_ELHaveModifier
.2b02	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2b04					_ELHaveModifier:
.2b04	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2b06	95 48		sta $48,x			sta 	esType,x 					; $80 for ! $A0 for ?
.2b08	4c 86 2a	jmp $2a86			jmp 	_ELHasTerm
.2b0b					_ELCallTemp0:
.2b0b	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2b0e					_ELExtension:
.2b0e	8a		txa				txa 								; stack pos in A
.2b0f	20 4d 18	jsr $184d		jsr	extensionHandler
.2b12	aa		tax				tax 								; restore stack
.2b13	4c 86 2a	jmp $2a86			jmp 	_ELHasTerm
.2b16					UnaryParenthesis:
.2b16	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.2b18	20 22 2a	jsr $2a22			jsr 	EvaluateLevel
.2b1b	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; check for )
.2b1e	60		rts				rts
.2b1f					ELShiftByteIn:
.2b1f	48		pha				pha 								; save bits to shift in.
.2b20	b5 68		lda $68,x			lda 	esInt3,x 					; save top most byte
.2b22	48		pha				pha
.2b23	b5 60		lda $60,x			lda 	esInt2,x 					; shift everything left 8 bits
.2b25	95 68		sta $68,x			sta 	esInt3,x
.2b27	b5 58		lda $58,x			lda 	esInt1,x
.2b29	95 60		sta $60,x			sta 	esInt2,x
.2b2b	b5 50		lda $50,x			lda 	esInt0,x
.2b2d	95 58		sta $58,x			sta 	esInt1,x
.2b2f	a9 00		lda #$00			lda 	#0
.2b31	95 50		sta $50,x			sta 	esInt0,x
.2b33	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.2b34	29 03		and #$03			and 	#3 							; only want lower 2 bits
.2b36	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.2b38					_ELShiftLoop:
.2b38	4a		lsr a				lsr 	a
.2b39	76 68		ror $68,x			ror 	esInt3,x
.2b3b	76 60		ror $60,x			ror 	esInt2,x
.2b3d	76 58		ror $58,x			ror 	esInt1,x
.2b3f	76 50		ror $50,x			ror 	esInt0,x
.2b41	c9 01		cmp #$01			cmp 	#1
.2b43	d0 f3		bne $2b38			bne 	_ELShiftLoop
.2b45	68		pla				pla 								; get original 6 bit value and OR in.
.2b46	29 3f		and #$3f			and 	#$3F
.2b48	15 50		ora $50,x			ora 	esInt0,x
.2b4a	95 50		sta $50,x			sta 	esInt0,x
.2b4c	60		rts				rts
.2b4d					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>2b4d	01					.byte	$01			; $86 and
>2b4e	01					.byte	$01			; $87 or
>2b4f	01					.byte	$01			; $88 xor
>2b50	02					.byte	$02			; $89 >=
>2b51	02					.byte	$02			; $8a <=
>2b52	02					.byte	$02			; $8b >
>2b53	02					.byte	$02			; $8c <
>2b54	02					.byte	$02			; $8d =
>2b55	02					.byte	$02			; $8e <>
>2b56	03					.byte	$03			; $8f +
>2b57	03					.byte	$03			; $90 -
>2b58	04					.byte	$04			; $91 >>
>2b59	04					.byte	$04			; $92 <<
>2b5a	04					.byte	$04			; $93 *
>2b5b	04					.byte	$04			; $94 /
>2b5c	04					.byte	$04			; $95 mod
>2b5d	05					.byte	$05			; $96 ^
>2b5e	06					.byte	$06			; $97 !
>2b5f	06					.byte	$06			; $98 ?
>2b60	82					.byte	$82			; $99 repeat
>2b61	82					.byte	$82			; $9a while
>2b62	82					.byte	$82			; $9b for
>2b63	82					.byte	$82			; $9c if
>2b64	82					.byte	$82			; $9d defproc
>2b65	80					.byte	$80			; $9e until
>2b66	80					.byte	$80			; $9f wend
>2b67	80					.byte	$80			; $a0 next
>2b68	80					.byte	$80			; $a1 then
>2b69	80					.byte	$80			; $a2 endif
>2b6a	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2b6b					EvaluateTerm:
.2b6b	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2b6d	20 22 2a	jsr $2a22			jsr 	EvaluateLevel
.2b70	20 d1 29	jsr $29d1			jsr 	DereferenceOne
.2b73	60		rts				rts
.2b74					EvaluateNumericTerm:
.2b74	20 6b 2b	jsr $2b6b			jsr 	EvaluateTerm
.2b77	b5 48		lda $48,x			lda 	esType,x
.2b79	0a		asl a				asl 	a 							; see if it's a string.
.2b7a	30 09		bmi $2b85			bmi 	ENTType
.2b7c	60		rts				rts
.2b7d					EvaluateIntegerTerm:
.2b7d	20 6b 2b	jsr $2b6b			jsr 	EvaluateTerm
.2b80	b5 48		lda $48,x			lda 	esType,x
.2b82	d0 01		bne $2b85			bne 	ENTType
.2b84	60		rts				rts
.2b85					ENTType:
.2b85	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b87	20 18 15	jsr $1518		jsr	errorHandler
.2b8a					EvaluateRoot:
.2b8a	a2 00		ldx #$00			ldx 	#0
.2b8c					Evaluate:
.2b8c	a9 00		lda #$00			lda 	#0
.2b8e	20 22 2a	jsr $2a22			jsr 	EvaluateLevel
.2b91	20 d1 29	jsr $29d1			jsr 	DereferenceOne
.2b94	60		rts				rts
.2b95					EvaluateNumeric:
.2b95	20 8c 2b	jsr $2b8c			jsr 	Evaluate
.2b98	b5 48		lda $48,x			lda 	esType,x
.2b9a	0a		asl a				asl 	a 							; see if it's a string.
.2b9b	30 e8		bmi $2b85			bmi 	ENTType
.2b9d	4a		lsr a				lsr 	a 							; shift float flag into carry.
.2b9e	4a		lsr a				lsr 	a
.2b9f	60		rts				rts
.2ba0					EvaluateString:
.2ba0	20 8c 2b	jsr $2b8c			jsr 	Evaluate
.2ba3	b5 48		lda $48,x			lda 	esType,x
.2ba5	0a		asl a				asl 	a 							; see if it's a string.
.2ba6	10 dd		bpl $2b85			bpl 	ENTType
.2ba8	60		rts				rts
.2ba9					EvaluateRootInteger:
.2ba9	a2 00		ldx #$00			ldx 	#0
.2bab					EvaluateInteger:
.2bab	20 8c 2b	jsr $2b8c			jsr 	Evaluate
.2bae	b5 48		lda $48,x			lda 	esType,x
.2bb0	d0 d3		bne $2b85			bne 	ENTType
.2bb2	60		rts				rts
.2bb3					EvaluateSmallInteger:
.2bb3	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger
.2bb6	b5 58		lda $58,x			lda 	esInt1,x
.2bb8	15 60		ora $60,x			ora 	esInt2,x
.2bba	15 68		ora $68,x			ora 	esInt3,x
.2bbc	d0 03		bne $2bc1			bne 	_ESIValue
.2bbe	b5 50		lda $50,x			lda 	esInt0,x
.2bc0	60		rts				rts
.2bc1					_ESIValue:
.2bc1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2bc3	20 18 15	jsr $1518		jsr	errorHandler
.2bc6					LinkEvaluate:
.2bc6	aa		tax				tax
.2bc7	20 8c 2b	jsr $2b8c			jsr 	Evaluate
.2bca	8a		txa				txa
.2bcb	60		rts				rts
.2bcc					LinkEvaluateTerm:
.2bcc	aa		tax				tax
.2bcd	20 6b 2b	jsr $2b6b			jsr 	EvaluateTerm
.2bd0	8a		txa				txa
.2bd1	60		rts				rts
.2bd2					LinkEvaluateInteger:
.2bd2	aa		tax				tax
.2bd3	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger
.2bd6	8a		txa				txa
.2bd7	60		rts				rts
.2bd8					LinkEvaluateSmallInt:
.2bd8	aa		tax				tax
.2bd9	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger
.2bdc	8a		txa				txa
.2bdd	60		rts				rts
.2bde					EvaluateReference:
.2bde	ad 5e 2b	lda $2b5e			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.2be1	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.2be2	e9 01		sbc #$01			sbc 	#1
.2be4	20 22 2a	jsr $2a22			jsr 	EvaluateLevel
.2be7	b5 48		lda $48,x			lda 	esType,x
.2be9	10 01		bpl $2bec			bpl 	_ERFail
.2beb	60		rts				rts
.2bec					_ERFail:
.2bec	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2bee	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.2bf1					Event_Str:
.2bf1	20 95 2b	jsr $2b95			jsr 	EvaluateNumeric 			; get a number.
.2bf4	b5 48		lda $48,x			lda 	esType,x 					; is it floating point
.2bf6	d0 13		bne $2c0b			bne 	_ESFloat
.2bf8	20 4e 2c	jsr $2c4e			jsr 	ConvertGetBase 				; get base, or default.
.2bfb	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.2bfd	85 2a		sta $2a				sta 	temp0
.2bff	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2c01	85 2b		sta $2b				sta 	1+(temp0)
.2c03	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2c05	20 93 31	jsr $3193			jsr 	MInt32ToString 				; convert to string.
.2c08	4c 18 2c	jmp $2c18			jmp 	_ESCloneExit 				; clone and exit.
.2c0b					_ESFloat:
.2c0b	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; check closing )
.2c0e	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2c11	8a		txa				txa
.2c12	a2 16		ldx #$16		ldx	#22
.2c14	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2c17	aa		tax				tax
.2c18					_ESCloneExit:
.2c18	8a		txa				txa
.2c19	a2 04		ldx #$04		ldx	#4
.2c1b	20 e6 35	jsr $35e6		jsr	stringHandler
.2c1e	aa		tax				tax
.2c1f	60		rts				rts
.2c20					UnaryVal:
.2c20	38		sec				sec 								; Carry set to return value
.2c21	b0 01		bcs $2c24			bcs 	ValueMain
.2c23					UnaryIsVal:
.2c23	18		clc				clc									; Carry clear to return legitimacy
.2c24					ValueMain:
.2c24	08		php				php 								; save results (CS is value, CC is validation)
.2c25	20 a0 2b	jsr $2ba0			jsr 	EvaluateString
.2c28	20 4e 2c	jsr $2c4e			jsr 	ConvertGetBase 				; get base, if any.
.2c2b	98		tya				tya
.2c2c	48		pha				pha
.2c2d	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2c30	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the base
.2c32	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2c34	20 ab 30	jsr $30ab			jsr 	MInt32FromString 			; convert it back from a string.
.2c37	b0 0c		bcs $2c45			bcs 	_VMSuccess 					; successfully converted.
.2c39	b5 51		lda $51,x			lda 	esInt0+1,x 					; is base the default
.2c3b	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.2c3d	f0 00		beq $2c3f			beq 	_VMFailed 	 				; so we failed.
.2c3f					_VMFailed:
.2c3f	68		pla				pla
.2c40	a8		tay				tay
.2c41	28		plp				plp
.2c42	4c 3d 32	jmp $323d			jmp 	MInt32False 				; return 0 whatever.
.2c45					_VMSuccess:
.2c45	68		pla				pla
.2c46	a8		tay				tay
.2c47	28		plp				plp 								; if CS the it was val() so we want the value.
.2c48	b0 03		bcs $2c4d			bcs 	_VMExit
.2c4a	4c 39 32	jmp $3239			jmp 	MInt32True 					; otherwise return true as successful.
.2c4d					_VMExit:
.2c4d	60		rts				rts
.2c4e					ConvertGetBase:
.2c4e	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2c50	95 51		sta $51,x			sta 	esInt0+1,x
.2c52	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2c54	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2c56	d0 0e		bne $2c66			bne 	_CGBDone 					; not found, should be )
.2c58	e8		inx				inx 								; next level
.2c59	c8		iny				iny 								; skip comma.
.2c5a	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger		; evaluate the base.
.2c5d	ca		dex				dex
.2c5e	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2c60	90 08		bcc $2c6a			bcc 	_CGBValue 					; (it should work as high as 37)
.2c62	c9 11		cmp #$11			cmp 	#17
.2c64	b0 04		bcs $2c6a			bcs 	_CGBValue
.2c66					_CGBDone:
.2c66	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2c69	60		rts				rts
.2c6a					_CGBValue:
.2c6a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c6c	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.2c6f					EventFunction:
.2c6f	20 de 2b	jsr $2bde			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2c72	b5 48		lda $48,x			lda 	esType,x
.2c74	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2c76	d0 5b		bne $2cd3			bne 	_EFType
.2c78	20 bd 32	jsr $32bd			jsr 	CheckComma
.2c7b	e8		inx				inx
.2c7c	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.2c7f	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; finish off with the right bracket
.2c82	ca		dex				dex
.2c83	b5 58		lda $58,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2c85	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2c87	15 60		ora $60,x			ora 	esInt2,x
.2c89	15 68		ora $68,x			ora 	esInt3,x
.2c8b	d0 41		bne $2cce			bne 	_EFValue
.2c8d	98		tya				tya
.2c8e	48		pha				pha
.2c8f	8a		txa				txa
.2c90	48		pha				pha
.2c91	a2 1c		ldx #$1c		ldx	#28
.2c93	20 f6 14	jsr $14f6		jsr	deviceHandler
.2c96	84 2d		sty $2d				sty 	temp1+1
.2c98	85 2c		sta $2c				sta 	temp1
.2c9a	68		pla				pla
.2c9b	aa		tax				tax
.2c9c	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.2c9f	a0 03		ldy #$03			ldy 	#3							; if -ve
.2ca1	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ca3	30 23		bmi $2cc8			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2ca5	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2ca7	b1 2a		lda ($2a),y			lda 	(temp0),y
.2ca9	c8		iny				iny
.2caa	11 2a		ora ($2a),y			ora 	(temp0),y
.2cac	f0 17		beq $2cc5			beq 	_EFInitialise 				; if so, initialise the value but return false.
.2cae	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.2cb0	38		sec				sec
.2cb1	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cb3	e5 2c		sbc $2c				sbc 	temp1
.2cb5	c8		iny				iny
.2cb6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2cb8	e5 2d		sbc $2d				sbc 	temp1+1
.2cba	10 0c		bpl $2cc8			bpl 	_EFFail 					; if trigger >= timer then return False
.2cbc	20 d8 2c	jsr $2cd8			jsr 	SetEventTimer 				; reset the timer for next time.
.2cbf	20 39 32	jsr $3239			jsr	 	MInt32True 					; and treutn true as fired.
.2cc2	68		pla				pla
.2cc3	a8		tay				tay
.2cc4	60		rts				rts
.2cc5					_EFInitialise:
.2cc5	20 d8 2c	jsr $2cd8			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2cc8					_EFFail:
.2cc8	68		pla				pla
.2cc9	a8		tay				tay
.2cca	20 3d 32	jsr $323d			jsr 	MInt32False
.2ccd	60		rts				rts
.2cce					_EFValue:
.2cce	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2cd0	20 18 15	jsr $1518		jsr	errorHandler
.2cd3					_EFType:
.2cd3	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2cd5	20 18 15	jsr $1518		jsr	errorHandler
.2cd8					SetEventTimer:
.2cd8	a0 00		ldy #$00			ldy 	#0
.2cda	18		clc				clc
.2cdb	a5 2c		lda $2c				lda 	temp1
.2cdd	75 51		adc $51,x			adc 	esInt0+1,x
.2cdf	91 2a		sta ($2a),y			sta		(temp0),y
.2ce1	c8		iny				iny
.2ce2	a5 2d		lda $2d				lda 	temp1+1
.2ce4	75 59		adc $59,x			adc 	esInt1+1,x
.2ce6	91 2a		sta ($2a),y			sta		(temp0),y
.2ce8	88		dey				dey
.2ce9	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.2ceb	d0 04		bne $2cf1			bne 	_SETExit 					; zero means initialise.....
.2ced	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.2cef	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2cf1					_SETExit:
.2cf1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.2cf2					UnaryLen:
.2cf2	20 00 2d	jsr $2d00			jsr 	ULStart
.2cf5					ULFinish:
.2cf5	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2cf7	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2cf9	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit 				; write it out.
.2cfc	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2cff	60		rts				rts
.2d00	20 a0 2b	jsr $2ba0	ULStart:jsr 	EvaluateString
.2d03	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2d05	85 2a		sta $2a				sta 	temp0
.2d07	b5 58		lda $58,x			lda 	esInt1,x
.2d09	85 2b		sta $2b				sta 	temp0+1
.2d0b	84 32		sty $32				sty 	tempShort 					; get length
.2d0d	a0 00		ldy #$00			ldy 	#0
.2d0f	60		rts				rts
.2d10					UnaryAsc:
.2d10	20 00 2d	jsr $2d00			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2d13	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2d15	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2d16	c9 00		cmp #$00			cmp 	#0
.2d18	d0 db		bne $2cf5			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2d1a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2d1c	20 18 15	jsr $1518		jsr	errorHandler
.2d1f					UnaryAbs:
.2d1f	20 95 2b	jsr $2b95			jsr 	EvaluateNumeric 			; some numeric value
.2d22	b0 07		bcs $2d2b			bcs 	_UAFloat 					; CS then float, so use that function
.2d24	20 f2 31	jsr $31f2			jsr 	MInt32Absolute 				; int version
.2d27	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2d2a	60		rts				rts
.2d2b					_UAFloat:
.2d2b	8a		txa				txa 								; float version
.2d2c	a2 02		ldx #$02		ldx	#2
.2d2e	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2d31	aa		tax				tax
.2d32	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2d35	60		rts				rts
.2d36					UnarySgn:
.2d36	20 95 2b	jsr $2b95			jsr 	EvaluateNumeric 			; same as above but sign of value
.2d39	b0 07		bcs $2d42			bcs 	_USFloat
.2d3b	20 2a 32	jsr $322a			jsr 	MInt32Sign
.2d3e	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2d41	60		rts				rts
.2d42					_USFloat:
.2d42	8a		txa				txa
.2d43	a2 10		ldx #$10		ldx	#16
.2d45	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2d48	aa		tax				tax
.2d49	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2d4c	60		rts				rts
.2d4d					UnaryPeek:
.2d4d	20 79 2d	jsr $2d79			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2d50	4c 6d 2d	jmp $2d6d			jmp 	PDLByte0
.2d53					UnaryDeek:
.2d53	20 79 2d	jsr $2d79			jsr 	PDLCode
.2d56	4c 67 2d	jmp $2d67			jmp 	PDLByte1
.2d59					UnaryLeek:
.2d59	20 79 2d	jsr $2d79			jsr 	PDLCode
.2d5c	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2d5e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d60	95 68		sta $68,x			sta 	esInt3,x
.2d62	88		dey				dey
.2d63	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d65	95 60		sta $60,x			sta 	esInt2,x
.2d67					PDLByte1:
.2d67	a0 01		ldy #$01			ldy 	#1
.2d69	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d6b	95 58		sta $58,x			sta 	esInt1,x
.2d6d					PDLByte0:
.2d6d	a0 00		ldy #$00			ldy 	#0
.2d6f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d71	95 50		sta $50,x			sta 	esInt0,x
.2d73	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2d75	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; check right and return
.2d78	60		rts				rts
.2d79					PDLCode:
.2d79	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger 			; some address
.2d7c	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2d7e	85 2a		sta $2a				sta 	temp0
.2d80	b5 58		lda $58,x			lda 	esInt1,x
.2d82	85 2b		sta $2b				sta 	temp0+1
.2d84	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2d86	95 58		sta $58,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2d88	95 60		sta $60,x			sta 	esInt2,x
.2d8a	95 68		sta $68,x			sta 	esInt3,x
.2d8c	84 32		sty $32				sty 	tempShort 					; save Y
.2d8e	60		rts				rts
.2d8f					Unary_Random:
.2d8f	20 6d 32	jsr $326d			jsr 	MInt32Random 				; generate random number.
.2d92	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2d94	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2d96	f0 08		beq $2da0			beq 	_URExit
.2d98	e8		inx				inx 								; load range 0..r-1 into +1
.2d99	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger
.2d9c	ca		dex				dex
.2d9d	20 90 30	jsr $3090			jsr 	MInt32Modulus 				; calculate random % modulus
.2da0					_URExit:
.2da0	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; check right and return
.2da3	60		rts				rts
.2da4					Unary_Min:
.2da4	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2da6	d0 02		bne $2daa			bne 	UnaryMBody
.2da8					Unary_Max:
.2da8	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2daa					UnaryMBody:
.2daa	48		pha				pha 								; save comparator on stack, shows min or max
.2dab	20 8c 2b	jsr $2b8c			jsr 	Evaluate 					; get the first thing to check
.2dae					_UnaryMLoop:
.2dae	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2db0	c8		iny				iny
.2db1	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2db3	f0 09		beq $2dbe			beq 	_UnaryMExit
.2db5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2db7	f0 07		beq $2dc0			beq 	_UnaryMCompare
.2db9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2dbb	20 18 15	jsr $1518		jsr	errorHandler
.2dbe					_UnaryMExit:
.2dbe	68		pla				pla 								; done so throw comparator and return.
.2dbf	60		rts				rts
.2dc0					_UnaryMCompare:
.2dc0	e8		inx				inx 								; get the 2nd thing to evaluate
.2dc1	20 8c 2b	jsr $2b8c			jsr 	Evaluate
.2dc4	ca		dex				dex
.2dc5	20 52 29	jsr $2952			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2dc8	85 32		sta $32				sta 	tempShort 					; save result
.2dca	68		pla				pla 								; get what we need
.2dcb	48		pha				pha
.2dcc	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2dce	d0 de		bne $2dae			bne 	_UnaryMLoop 				; no, try another value.
.2dd0	20 3d 32	jsr $323d			jsr 	MInt32False 				; promote 2nd to 1st.
.2dd3	20 21 31	jsr $3121			jsr 	MInt32Add
.2dd6	4c ae 2d	jmp $2dae			jmp 	_UnaryMLoop
.2dd9					Unary_Page:
.2dd9	20 3d 32	jsr $323d			jsr 	MInt32False 				; zero
.2ddc	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2ddf	95 50		sta $50,x			sta 	esInt0,x
.2de1	ad c9 0a	lda $0ac9			lda 	basePage+1
.2de4	95 58		sta $58,x			sta 	esInt1,x
.2de6	60		rts				rts
.2de7					UnaryReference:
.2de7	a9 0f		lda #$0f			lda 	#15
.2de9	20 22 2a	jsr $2a22			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2dec	b5 48		lda $48,x			lda 	esType,x 					; check it's a reference.
.2dee	10 05		bpl $2df5			bpl 	UType
.2df0	a9 00		lda #$00			lda 	#0 							; make it an integer
.2df2	95 48		sta $48,x			sta 	esType,x
.2df4	60		rts				rts
.2df5					UType:
.2df5	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2df7	20 18 15	jsr $1518		jsr	errorHandler
.2dfa					UnaryHexMarker:
.2dfa	4c 7d 2b	jmp $2b7d			jmp 	EvaluateIntegerTerm
.2dfd					UnaryComplement:
.2dfd	20 7d 2b	jsr $2b7d			jsr 	EvaluateIntegerTerm
.2e00	20 11 32	jsr $3211			jsr 	MInt32Not
.2e03	60		rts				rts
.2e04					UnaryIntToFloat:
.2e04	20 95 2b	jsr $2b95			jsr 	EvaluateNumeric				; some number
.2e07	b5 48		lda $48,x			lda 	esType,x 					; if float already, exit
.2e09	d0 0b		bne $2e16			bne 	_UIFExit
.2e0b	8a		txa				txa 								; convert and set type
.2e0c	a2 1c		ldx #$1c		ldx	#28
.2e0e	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2e11	aa		tax				tax
.2e12	a9 01		lda #$01			lda 	#1
.2e14	95 48		sta $48,x			sta 	esType,x
.2e16					_UIFExit:
.2e16	60		rts				rts
.2e17					UnaryFloatToInt:
.2e17	20 95 2b	jsr $2b95			jsr 	EvaluateNumeric 			; the number
.2e1a	b5 48		lda $48,x			lda 	esType,x 					; if int already exit
.2e1c	f0 0b		beq $2e29			beq 	_UFIExit
.2e1e	8a		txa				txa 								; convert to int
.2e1f	a2 14		ldx #$14		ldx	#20
.2e21	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.2e24	aa		tax				tax
.2e25	a9 00		lda #$00			lda 	#0 							; set type
.2e27	95 48		sta $48,x			sta 	esType,x
.2e29					_UFIExit:
.2e29	60		rts				rts
.2e2a					UnaryAlloc:
.2e2a	e8		inx				inx 								; evaluate memory required
.2e2b	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger
.2e2e	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2e31	ca		dex				dex
.2e32	b5 61		lda $61,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2e34	15 69		ora $69,x			ora 	esInt3+1,x
.2e36	d0 1d		bne $2e55			bne 	_UABadValue
.2e38	20 3d 32	jsr $323d			jsr 	MInt32False					; zero return.
.2e3b	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2e3d	95 58		sta $58,x			sta 	esInt1,x
.2e3f	a5 35		lda $35				lda 	lowMemory
.2e41	95 50		sta $50,x			sta 	esInt0,x
.2e43	18		clc				clc 								; add alloc required.
.2e44	75 51		adc $51,x			adc 	esInt0+1,x
.2e46	85 35		sta $35				sta 	lowMemory
.2e48	a5 36		lda $36				lda 	lowMemory+1
.2e4a	75 59		adc $59,x			adc 	esInt1+1,x
.2e4c	85 36		sta $36				sta 	lowMemory+1
.2e4e	b0 05		bcs $2e55			bcs		_UABadValue 				; overflow definitely bad.
.2e50	c5 34		cmp $34				cmp 	highMemory+1
.2e52	b0 01		bcs $2e55			bcs 	_UABadValue 				; out of memory bad.
.2e54	60		rts				rts
.2e55					_UABadValue:
.2e55	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.2e57	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.2e5a					UnaryTimer:
.2e5a	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; no parameters
.2e5d	98		tya				tya
.2e5e	48		pha				pha
.2e5f	20 64 32	jsr $3264			jsr 	MInt32Zero 					; zero result
.2e62	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2e64	a2 1c		ldx #$1c		ldx	#28
.2e66	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e69	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2e6b	95 50		sta $50,x			sta 	esInt0,x
.2e6d	98		tya				tya
.2e6e	95 58		sta $58,x			sta 	esInt1,x
.2e70	68		pla				pla
.2e71	a8		tay				tay
.2e72	60		rts				rts
.2e73					UnaryInkey:
.2e73	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2e76	86 2a		stx $2a				stx 	temp0
.2e78	a2 0a		ldx #$0a		ldx	#10
.2e7a	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e7d	a6 2a		ldx $2a				ldx 	temp0
.2e7f	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit
.2e82	60		rts				rts
.2e83					UnaryGet:
.2e83	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2e86	86 2a		stx $2a				stx 	temp0
.2e88					_UGLoop:
.2e88	a2 02		ldx #$02		ldx	#2
.2e8a	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e8d	a2 0a		ldx #$0a		ldx	#10
.2e8f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e92	c9 00		cmp #$00			cmp 	#0
.2e94	f0 f2		beq $2e88			beq 	_UGLoop
.2e96	a6 2a		ldx $2a				ldx 	temp0
.2e98	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit
.2e9b	60		rts				rts
.2e9c					UnaryGetString:
.2e9c	20 83 2e	jsr $2e83			jsr 	UnaryGet
.2e9f					UGSDoChr:
.2e9f	4c f0 2e	jmp $2ef0			jmp 	ChrCode
.2ea2					UnaryInkeyString:
.2ea2	20 73 2e	jsr $2e73			jsr 	UnaryInkey
.2ea5	b5 50		lda $50,x			lda 	esInt0,x
.2ea7	d0 f6		bne $2e9f			bne 	UGSDoChr
.2ea9	8a		txa				txa
.2eaa	a2 08		ldx #$08		ldx	#8
.2eac	20 e6 35	jsr $35e6		jsr	stringHandler
.2eaf	aa		tax				tax
.2eb0	60		rts				rts
.2eb1					UnarySys:
.2eb1	20 ab 2b	jsr $2bab			jsr 	EvaluateInteger 				; get the address
.2eb4	20 b0 32	jsr $32b0			jsr 	CheckRightParen
.2eb7	20 9d 1f	jsr $1f9d			jsr 	TOSToTemp0 						; copy call address to temp0
.2eba	8a		txa				txa
.2ebb	48		pha				pha
.2ebc	98		tya				tya
.2ebd	48		pha				pha
.2ebe	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2ec1	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2ec4	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2ec7	20 d6 2e	jsr $2ed6			jsr 	_CallTemp0
.2eca	85 32		sta $32				sta 	tempShort 						; restore YX
.2ecc	68		pla				pla
.2ecd	a8		tay				tay
.2ece	68		pla				pla
.2ecf	aa		tax				tax
.2ed0	a5 32		lda $32				lda 	tempShort
.2ed2	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit 					; return result.
.2ed5	60		rts				rts
.2ed6					_CallTemp0:
.2ed6	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2ed9					UnaryMem:
.2ed9	20 3d 32	jsr $323d			jsr 	MInt32False 					; set to false (e.g. 0)
.2edc	38		sec				sec
.2edd	a5 33		lda $33				lda 	highMemory 						; calculate value
.2edf	e5 35		sbc $35				sbc 	lowMemory
.2ee1	95 50		sta $50,x			sta 	esInt0,x
.2ee3	a5 34		lda $34				lda 	highMemory+1
.2ee5	e5 36		sbc $36				sbc 	lowMemory+1
.2ee7	95 58		sta $58,x			sta 	esInt1,x
.2ee9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.2eea					ExecChr:
.2eea	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger		; character number 0-255
.2eed	20 b0 32	jsr $32b0			jsr 	CheckRightParen				; right bracket
.2ef0					ChrCode:
.2ef0	98		tya				tya
.2ef1	48		pha				pha
.2ef2	8a		txa				txa 								; A = stack
.2ef3	b4 50		ldy $50,x			ldy 	esInt0,x					; Y = character
.2ef5	a2 02		ldx #$02		ldx	#2
.2ef7	20 e6 35	jsr $35e6		jsr	stringHandler
.2efa	aa		tax				tax 								; X = stack
.2efb	68		pla				pla
.2efc	a8		tay				tay
.2efd	60		rts				rts
.2efe					ExecLower:
.2efe	38		sec				sec 								; set carry is lower
.2eff	b0 01		bcs $2f02			bcs 	ExecUpperLower
.2f01					ExecUpper:
.2f01	18		clc				clc 								; clear carry is upper
.2f02					ExecUpperLower:
.2f02	08		php				php 								; save carry
.2f03	20 a0 2b	jsr $2ba0			jsr 	EvaluateString 				; string to stack,X
.2f06	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; check closing right bracket.
.2f09	28		plp				plp 								; restore carry, save Y
.2f0a	98		tya				tya
.2f0b	48		pha				pha
.2f0c	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2f0e	2a		rol a				rol 	a
.2f0f	a8		tay				tay 								; now in Y
.2f10	8a		txa				txa 								; do the substring and exit.
.2f11	a2 0c		ldx #$0c		ldx	#12
.2f13	20 e6 35	jsr $35e6		jsr	stringHandler
.2f16	aa		tax				tax
.2f17	68		pla				pla
.2f18	a8		tay				tay
.2f19	60		rts				rts
.2f1a					ExecLeft:
.2f1a	20 a0 2b	jsr $2ba0			jsr 	EvaluateString 				; string to stack,X
.2f1d	20 bd 32	jsr $32bd			jsr 	CheckComma
.2f20	e8		inx				inx
.2f21	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2f23	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit
.2f26	e8		inx				inx
.2f27	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2f2a					ExecSubstring:
.2f2a	ca		dex				dex 								; fix up X
.2f2b	ca		dex				dex
.2f2c	20 b0 32	jsr $32b0			jsr 	CheckRightParen 			; check closing right bracket.
.2f2f	8a		txa				txa 								; do the substring and exit.
.2f30	a2 0e		ldx #$0e		ldx	#14
.2f32	20 e6 35	jsr $35e6		jsr	stringHandler
.2f35	aa		tax				tax
.2f36	60		rts				rts
.2f37					ExecMid:
.2f37	20 a0 2b	jsr $2ba0			jsr 	EvaluateString 				; string to stack,X
.2f3a	20 bd 32	jsr $32bd			jsr 	CheckComma
.2f3d	e8		inx				inx
.2f3e	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2f41	c9 00		cmp #$00			cmp 	#0
.2f43	f0 15		beq $2f5a			beq 	_EMValue
.2f45	e8		inx				inx
.2f46	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2f48	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit
.2f4b	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2f4d	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2f4f	f0 d9		beq $2f2a			beq 	ExecSubString
.2f51	20 bd 32	jsr $32bd			jsr 	CheckComma
.2f54	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2f57	4c 2a 2f	jmp $2f2a			jmp 	ExecSubString
.2f5a					_EMValue:
.2f5a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2f5c	20 18 15	jsr $1518		jsr	errorHandler
.2f5f					ExecRight:
.2f5f	20 a0 2b	jsr $2ba0			jsr 	EvaluateString 				; string to stack,X
.2f62	20 bd 32	jsr $32bd			jsr 	CheckComma
.2f65	e8		inx				inx
.2f66	20 b3 2b	jsr $2bb3			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2f69	ca		dex				dex
.2f6a	98		tya				tya
.2f6b	48		pha				pha
.2f6c	b5 50		lda $50,x			lda 	esInt0,x 					; copy address of string to temp0
.2f6e	85 2a		sta $2a				sta 	temp0
.2f70	b5 58		lda $58,x			lda 	esInt1,x
.2f72	85 2b		sta $2b				sta 	temp0+1
.2f74	a0 00		ldy #$00			ldy 	#0 							; point to length
.2f76	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2f78	18		clc				clc 								; add 1.
.2f79	69 01		adc #$01			adc 	#1
.2f7b	38		sec				sec
.2f7c	f5 51		sbc $51,x			sbc 	esInt0+1,x  				; subtract right count.
.2f7e	f0 02		beq $2f82			beq		_ERMake1 					; if zero, make it 1.
.2f80	b0 02		bcs $2f84			bcs		_EROkay
.2f82					_ERMake1:
.2f82	a9 01		lda #$01			lda 	#1 							; start position.
.2f84					_EROkay:
.2f84	e8		inx				inx 								; set start pos.
.2f85	95 50		sta $50,x			sta 	esInt0,x
.2f87	e8		inx				inx
.2f88	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2f8a	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit
.2f8d	68		pla				pla
.2f8e	a8		tay				tay
.2f8f	4c 2a 2f	jmp $2f2a			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2f92					MInt32And:
.2f92	b5 50		lda $50,x			lda 	esInt0,x
.2f94	35 51		and $51,x			and 	esInt0+1,x
.2f96	95 50		sta $50,x			sta 	esInt0,x
.2f98	b5 58		lda $58,x			lda 	esInt1,x
.2f9a	35 59		and $59,x			and 	esInt1+1,x
.2f9c	95 58		sta $58,x			sta 	esInt1,x
.2f9e	b5 60		lda $60,x			lda 	esInt2,x
.2fa0	35 61		and $61,x			and 	esInt2+1,x
.2fa2	95 60		sta $60,x			sta 	esInt2,x
.2fa4	b5 68		lda $68,x			lda 	esInt3,x
.2fa6	35 69		and $69,x			and 	esInt3+1,x
.2fa8	95 68		sta $68,x			sta 	esInt3,x
.2faa	60		rts				rts
.2fab					MInt32Or:
.2fab	b5 50		lda $50,x			lda 	esInt0,x
.2fad	15 51		ora $51,x			ora 	esInt0+1,x
.2faf	95 50		sta $50,x			sta 	esInt0,x
.2fb1	b5 58		lda $58,x			lda 	esInt1,x
.2fb3	15 59		ora $59,x			ora 	esInt1+1,x
.2fb5	95 58		sta $58,x			sta 	esInt1,x
.2fb7	b5 60		lda $60,x			lda 	esInt2,x
.2fb9	15 61		ora $61,x			ora 	esInt2+1,x
.2fbb	95 60		sta $60,x			sta 	esInt2,x
.2fbd	b5 68		lda $68,x			lda 	esInt3,x
.2fbf	15 69		ora $69,x			ora 	esInt3+1,x
.2fc1	95 68		sta $68,x			sta 	esInt3,x
.2fc3	60		rts				rts
.2fc4					MInt32Xor:
.2fc4	b5 50		lda $50,x			lda 	esInt0,x
.2fc6	55 51		eor $51,x			eor 	esInt0+1,x
.2fc8	95 50		sta $50,x			sta 	esInt0,x
.2fca	b5 58		lda $58,x			lda 	esInt1,x
.2fcc	55 59		eor $59,x			eor 	esInt1+1,x
.2fce	95 58		sta $58,x			sta 	esInt1,x
.2fd0	b5 60		lda $60,x			lda 	esInt2,x
.2fd2	55 61		eor $61,x			eor 	esInt2+1,x
.2fd4	95 60		sta $60,x			sta 	esInt2,x
.2fd6	b5 68		lda $68,x			lda 	esInt3,x
.2fd8	55 69		eor $69,x			eor 	esInt3+1,x
.2fda	95 68		sta $68,x			sta 	esInt3,x
.2fdc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2fdd					MInt32Compare:
.2fdd	b5 50		lda $50,x			lda 	esInt0,x 					; equality check first.
.2fdf	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2fe1	d0 13		bne $2ff6			bne 	MInt32Compare2
.2fe3	b5 58		lda $58,x			lda 	esInt1,x
.2fe5	d5 59		cmp $59,x			cmp 	esInt1+1,x
.2fe7	d0 0d		bne $2ff6			bne 	MInt32Compare2
.2fe9	b5 60		lda $60,x			lda 	esInt2,x
.2feb	d5 61		cmp $61,x			cmp 	esInt2+1,x
.2fed	d0 07		bne $2ff6			bne 	MInt32Compare2
.2fef	b5 68		lda $68,x			lda 	esInt3,x
.2ff1	55 69		eor $69,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2ff3	d0 01		bne $2ff6			bne 	MInt32Compare2
.2ff5	60		rts				rts
.2ff6					MInt32Compare2:
.2ff6	b5 50		lda $50,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2ff8	d5 51		cmp $51,x			cmp 	esInt0+1,x
.2ffa	b5 58		lda $58,x			lda		esInt1,x
.2ffc	f5 59		sbc $59,x			sbc 	esInt1+1,x
.2ffe	b5 60		lda $60,x			lda		esInt2,x
.3000	f5 61		sbc $61,x			sbc 	esInt2+1,x
.3002	b5 68		lda $68,x			lda		esInt3,x
.3004	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3006	50 02		bvc $300a			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.3008	49 80		eor #$80			eor 	#$80
.300a					_I32LNoOverflow
.300a	30 03		bmi $300f			bmi 	MInt32CLess					; if -ve then return $FF
.300c	a9 01		lda #$01			lda 	#$01						; else return $01
.300e	60		rts				rts
.300f					MInt32CLess:
.300f	a9 ff		lda #$ff			lda 	#$FF
.3011	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.3012					MInt32SDivide:
.3012	98		tya				tya  								; save Y, which is the count of negations
.3013	48		pha				pha
.3014	a0 00		ldy #$00			ldy 	#0 							; zero count
.3016	20 2e 30	jsr $302e			jsr 	_MInt32SRemSign 			; unsign TOS
.3019	e8		inx				inx 								; unsign TOS+1
.301a	20 2e 30	jsr $302e			jsr 	_MInt32SRemSign
.301d	ca		dex				dex
.301e	98		tya				tya 								; save sign count on stack
.301f	48		pha				pha
.3020	20 37 30	jsr $3037			jsr 	MInt32UDivide 				; unsigned division
.3023	68		pla				pla 								; get sign count back
.3024	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.3026	f0 03		beq $302b			beq 	_I32SNoNeg
.3028	20 f7 31	jsr $31f7			jsr 	MInt32Negate
.302b					_I32SNoNeg:
.302b	68		pla				pla 								; restoe Y and exit
.302c	a8		tay				tay
.302d	60		rts				rts
.302e					_MInt32SRemSign:
.302e	b5 68		lda $68,x			lda 	esInt3,x 					; is it -ve
.3030	10 04		bpl $3036			bpl 	_MInt32SRSExit
.3032	c8		iny				iny 								; increment the sign count
.3033	20 f7 31	jsr $31f7			jsr 	MInt32Negate 				; negate the value.
.3036					_MInt32SRSExit:
.3036	60		rts				rts
.3037					MInt32UDivide:
.3037	b5 51		lda $51,x			lda 	esInt0+1,x 					; check for division by zero
.3039	15 59		ora $59,x			ora 	esInt1+1,x
.303b	15 5a		ora $5a,x			ora 	esInt1+2,x
.303d	15 5b		ora $5b,x			ora 	esInt1+3,x
.303f	f0 4a		beq $308b			beq 	_MInt32DZero
.3041	e8		inx				inx 								; clear A
.3042	e8		inx				inx
.3043	20 3d 32	jsr $323d			jsr 	MInt32False
.3046	ca		dex				dex
.3047	ca		dex				dex
.3048	98		tya				tya 								; save Y on the stack
.3049	48		pha				pha
.304a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.304c					_MInt32UDLoop:
.304c	16 50		asl $50,x			asl 	esInt0,x					; shift QA left. First Q
.304e	36 58		rol $58,x			rol 	esInt1,x
.3050	36 60		rol $60,x			rol 	esInt2,x
.3052	36 68		rol $68,x			rol 	esInt3,x
.3054	36 52		rol $52,x			rol 	esInt0+2,x 					; then A.
.3056	36 5a		rol $5a,x			rol 	esInt1+2,x
.3058	36 62		rol $62,x			rol 	esInt2+2,x
.305a	36 6a		rol $6a,x			rol 	esInt3+2,x
.305c	38		sec				sec 								; calculate A-M saving result on the stack
.305d	b5 52		lda $52,x			lda 	esInt0+2,x
.305f	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3061	48		pha				pha
.3062	b5 5a		lda $5a,x			lda 	esInt1+2,x
.3064	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3066	48		pha				pha
.3067	b5 62		lda $62,x			lda 	esInt2+2,x
.3069	f5 61		sbc $61,x			sbc 	esInt2+1,x
.306b	48		pha				pha
.306c	b5 6a		lda $6a,x			lda 	esInt3+2,x
.306e	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3070	90 10		bcc $3082			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3072	95 6a		sta $6a,x			sta 	esInt3+2,x 					; write result back to A
.3074	68		pla				pla
.3075	95 62		sta $62,x			sta 	esInt2+2,x
.3077	68		pla				pla
.3078	95 5a		sta $5a,x			sta 	esInt1+2,x
.307a	68		pla				pla
.307b	95 52		sta $52,x			sta 	esInt0+2,x
.307d	f6 50		inc $50,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.307f	4c 85 30	jmp $3085			jmp 	_MInt32Next 					; do the next iteration
.3082					_MInt32NoSubtract:
.3082	68		pla				pla
.3083	68		pla				pla
.3084	68		pla				pla
.3085					_MInt32Next:
.3085	88		dey				dey 								; do this 32 times.
.3086	d0 c4		bne $304c			bne 	_MInt32UDLoop
.3088	68		pla				pla 								; restore Y and exit
.3089	a8		tay				tay
.308a	60		rts				rts
.308b					_MInt32DZero:
.308b	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.308d	20 18 15	jsr $1518		jsr	errorHandler
.3090					MInt32Modulus:
.3090	20 37 30	jsr $3037			jsr 	MInt32UDivide 				; do the division.
.3093	b5 6a		lda $6a,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3095	95 68		sta $68,x			sta 	esInt3,x
.3097	b5 62		lda $62,x			lda 	esInt2+2,x
.3099	95 60		sta $60,x			sta 	esInt2,x
.309b	b5 5a		lda $5a,x			lda 	esInt1+2,x
.309d	95 58		sta $58,x			sta 	esInt1,x
.309f	b5 52		lda $52,x			lda 	esInt0+2,x
.30a1	95 50		sta $50,x			sta 	esInt0,x
.30a3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0cd8					fs32Length:
>0cd8							.fill 	1
.30a4					LinkInt32FromString:
.30a4	aa		tax				tax
.30a5	98		tya				tya
.30a6	20 ab 30	jsr $30ab			jsr 	MInt32FromString
.30a9	8a		txa				txa
.30aa	60		rts				rts
.30ab					MInt32FromString:
.30ab	85 32		sta $32				sta 	tempShort 					; save base
.30ad	98		tya				tya
.30ae	48		pha				pha
.30af	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.30b1	b1 2a		lda ($2a),y			lda 	(temp0),y
.30b3	8d d8 0c	sta $0cd8			sta 	fs32Length
.30b6	f0 65		beq $311d			beq 	_I32FSFail2					; fail if length zero.
.30b8	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.30ba	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.30bc	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.30be	d0 09		bne $30c9			bne 	_I32FSNotNegative
.30c0	ad d8 0c	lda $0cd8			lda 	fs32Length 					; get length back.
.30c3	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.30c5	f0 56		beq $311d			beq 	_I32FSFail2
.30c7	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.30c9					_I32FSNotNegative:
.30c9	a5 32		lda $32				lda 	tempShort 					; get the base back.
.30cb	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.30cd	d0 02		bne $30d1			bne 	_I32FSNN2
.30cf	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.30d1					_I32FSNN2:
.30d1	48		pha				pha 								; save base + final sign on stack.
.30d2	20 3d 32	jsr $323d			jsr 	MInt32False 				; zero the return value.
.30d5					_I32FSMainLoop:
.30d5	68		pla				pla 								; get the base back into tempShort
.30d6	48		pha				pha
.30d7	29 7f		and #$7f			and 	#$7F
.30d9	85 32		sta $32				sta 	tempShort
.30db	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.30dd	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.30df	90 02		bcc $30e3			bcc 	_I32FSNotLC
.30e1	e9 20		sbc #$20			sbc 	#32
.30e3					_I32FSNotLC:
.30e3	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.30e4	e9 30		sbc #$30			sbc 	#"0"
.30e6	90 34		bcc $311c			bcc 	_I32FSFail 					; nothing more to do.
.30e8	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.30ea	90 06		bcc $30f2			bcc 	_I32FSValidate
.30ec	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.30ee	90 2c		bcc $311c			bcc 	_I32FSFail
.30f0	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.30f2					_I32FSValidate:
.30f2	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.30f4	b0 26		bcs $311c			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.30f6	48		pha				pha 								; save the new digit value.
.30f7	e8		inx				inx 								; put base into next slot up on stack
.30f8	a5 32		lda $32				lda 	tempShort
.30fa	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit
.30fd	ca		dex				dex
.30fe	20 55 31	jsr $3155			jsr 	MInt32Multiply 				; multiply current by the base
.3101	e8		inx				inx
.3102	68		pla				pla  								; put additive into next slot
.3103	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit
.3106	ca		dex				dex
.3107	20 21 31	jsr $3121			jsr 	MInt32Add 					; and add it
.310a	c8		iny				iny 								; bump the character pointer
.310b	cc d8 0c	cpy $0cd8			cpy 	fs32Length 					; until > length.
.310e	f0 c5		beq $30d5			beq 	_I32FSMainLoop
.3110	90 c3		bcc $30d5			bcc 	_I32FSMainLoop
.3112					_I32FSDone:
.3112	68		pla				pla 								; get base/final sign back
.3113	10 03		bpl $3118			bpl 	_I32FSNN3
.3115	20 f7 31	jsr $31f7			jsr 	MInt32Negate 				; negate the result.
.3118					_I32FSNN3:
.3118	68		pla				pla
.3119	a8		tay				tay
.311a	38		sec				sec
.311b	60		rts				rts
.311c					_I32FSFail:
.311c	68		pla				pla
.311d					_I32FSFail2:
.311d	68		pla				pla
.311e	a8		tay				tay
.311f	18		clc				clc
.3120	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.3121					MInt32Add:
.3121	18		clc				clc
.3122	b5 50		lda $50,x			lda 	esInt0,x
.3124	75 51		adc $51,x			adc 	esInt0+1,x
.3126	95 50		sta $50,x			sta 	esInt0,x
.3128	b5 58		lda $58,x			lda 	esInt1,x
.312a	75 59		adc $59,x			adc 	esInt1+1,x
.312c	95 58		sta $58,x			sta 	esInt1,x
.312e	b5 60		lda $60,x			lda 	esInt2,x
.3130	75 61		adc $61,x			adc 	esInt2+1,x
.3132	95 60		sta $60,x			sta 	esInt2,x
.3134	b5 68		lda $68,x			lda 	esInt3,x
.3136	75 69		adc $69,x			adc 	esInt3+1,x
.3138	95 68		sta $68,x			sta 	esInt3,x
.313a	60		rts				rts
.313b					MInt32Sub:
.313b	38		sec				sec
.313c	b5 50		lda $50,x			lda 	esInt0,x
.313e	f5 51		sbc $51,x			sbc 	esInt0+1,x
.3140	95 50		sta $50,x			sta 	esInt0,x
.3142	b5 58		lda $58,x			lda 	esInt1,x
.3144	f5 59		sbc $59,x			sbc 	esInt1+1,x
.3146	95 58		sta $58,x			sta 	esInt1,x
.3148	b5 60		lda $60,x			lda 	esInt2,x
.314a	f5 61		sbc $61,x			sbc 	esInt2+1,x
.314c	95 60		sta $60,x			sta 	esInt2,x
.314e	b5 68		lda $68,x			lda 	esInt3,x
.3150	f5 69		sbc $69,x			sbc 	esInt3+1,x
.3152	95 68		sta $68,x			sta 	esInt3,x
.3154	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3155					MInt32Multiply:
.3155	e8		inx				inx 								; copy 2nd -> 3rd
.3156	20 7b 31	jsr $317b			jsr 	MInt32CopyUp
.3159	ca		dex				dex
.315a	20 7b 31	jsr $317b			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.315d	20 3d 32	jsr $323d			jsr 	MInt32False 				; zero 1st.
.3160					_I32Loop:
.3160	b5 52		lda $52,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3162	29 01		and #$01			and 	#1
.3164	f0 03		beq $3169			beq 	_I32NoAdd 					; if set
.3166	20 21 31	jsr $3121			jsr 	MInt32Add 					; add 2nd to 1st.
.3169					_I32NoAdd:
.3169	e8		inx				inx 								; shift 2nd left
.316a	20 52 32	jsr $3252			jsr 	MInt32ShiftLeft
.316d	e8		inx				inx  								; shift 3rd right
.316e	20 5b 32	jsr $325b			jsr 	MInt32ShiftRight
.3171	20 64 32	jsr $3264			jsr 	MInt32Zero 					; check if zero.
.3174	08		php				php 								; save status bits
.3175	ca		dex				dex 	 							; point back to 1st
.3176	ca		dex				dex
.3177	28		plp				plp 								; get status bits
.3178	d0 e6		bne $3160			bne 	_I32Loop 					; if non-zero keep going.
.317a	60		rts				rts
.317b					MInt32CopyUp:
.317b	b5 50		lda $50,x			lda 	esInt0,x
.317d	95 51		sta $51,x			sta 	esInt0+1,x
.317f	b5 58		lda $58,x			lda 	esInt1,x
.3181	95 59		sta $59,x			sta 	esInt1+1,x
.3183	b5 60		lda $60,x			lda 	esInt2,x
.3185	95 61		sta $61,x			sta 	esInt2+1,x
.3187	b5 68		lda $68,x			lda 	esInt3,x
.3189	95 69		sta $69,x			sta 	esInt3+1,x
.318b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0cd9					MCharCount:	.fill 	1						; count of converted characters
.318c					MLInt32ToString:
.318c	aa		tax				tax									; module passes stack in A, base in Y
.318d	98		tya				tya
.318e	20 93 31	jsr $3193			jsr 	MInt32ToString
.3191	8a		txa				txa
.3192	60		rts				rts
.3193					MInt32ToString:
.3193	48		pha				pha 								; save base
.3194	85 32		sta $32				sta 	tempShort 					; save target base.
.3196	a9 00		lda #$00			lda 	#0
.3198	8d d9 0c	sta $0cd9			sta 	MCharCount 					; clear character count to 0
.319b	98		tya				tya
.319c	48		pha				pha
.319d	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.319f	10 10		bpl $31b1			bpl 	_I32TSUnsigned
.31a1	48		pha				pha 								; save base on stack.
.31a2	b5 68		lda $68,x			lda 	esInt3,x 					; is it actually negative
.31a4	10 08		bpl $31ae			bpl 	_I32TSNoFlip
.31a6	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.31a8	20 e4 31	jsr $31e4			jsr 	MI32WriteCharacter
.31ab	20 f7 31	jsr $31f7			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.31ae					_I32TSNoFlip:
.31ae	68		pla				pla 								; get the base back
.31af	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.31b1					_I32TSUnsigned:
.31b1	20 bf 31	jsr $31bf			jsr 	MI32DivideWrite 			; recursive code to output string.
.31b4	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.31b6	ad d9 0c	lda $0cd9			lda 	MCharCount
.31b9	91 2a		sta ($2a),y			sta 	(temp0),y
.31bb	68		pla				pla
.31bc	a8		tay				tay
.31bd	68		pla				pla
.31be	60		rts				rts
.31bf					MI32DivideWrite:
.31bf	48		pha				pha 								; save the divisor/base
.31c0	e8		inx				inx 								; write in the dividing position.
.31c1	20 4c 32	jsr $324c			jsr 	MInt32Set8Bit
.31c4	ca		dex				dex
.31c5	20 37 30	jsr $3037			jsr 	MInt32UDivide 				; divide number by base.
.31c8	68		pla				pla 								; get the base into Y
.31c9	a8		tay				tay
.31ca	b5 52		lda $52,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.31cc	48		pha				pha
.31cd	20 64 32	jsr $3264			jsr 	MInt32Zero 					; is the result zero ?
.31d0	f0 04		beq $31d6			beq 	_I32NoRecurse 				; if so, don't recurse.
.31d2	98		tya				tya 								; put base into A
.31d3	20 bf 31	jsr $31bf			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.31d6					_I32NoRecurse:
.31d6	68		pla				pla 								; get the remainder back
.31d7	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.31d9	90 02		bcc $31dd			bcc 	_I32NotHex
.31db	69 06		adc #$06			adc 	#7-1
.31dd					_I32NotHex:
.31dd	18		clc				clc 								; make it ASCII
.31de	69 30		adc #$30			adc 	#48
.31e0	20 e4 31	jsr $31e4			jsr 	MI32WriteCharacter 			; write the character out
.31e3	60		rts				rts 								; and exit.
.31e4					MI32WriteCharacter:
.31e4	ee d9 0c	inc $0cd9			inc 	MCharCount 					; bump count (space for leading count)
.31e7	ac d9 0c	ldy $0cd9			ldy 	MCharCount 					; get position
.31ea	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.31ec	c8		iny				iny
.31ed	a9 00		lda #$00			lda 	#0
.31ef	91 2a		sta ($2a),y			sta 	(temp0),y
.31f1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0cda					MSeed32:	.fill 	4							; random number seed.
.31f2					MInt32Absolute:
.31f2	b5 68		lda $68,x			lda 	esInt3,x 					; use negate code if -ve.
.31f4	30 01		bmi $31f7			bmi 	MInt32Negate
.31f6	60		rts				rts
.31f7					MInt32Negate:
.31f7	38		sec				sec 								; subtract from zero.
.31f8	a9 00		lda #$00			lda 	#0
.31fa	f5 50		sbc $50,x			sbc 	esInt0,x
.31fc	95 50		sta $50,x			sta 	esInt0,x
.31fe	a9 00		lda #$00			lda 	#0
.3200	f5 58		sbc $58,x			sbc 	esInt1,x
.3202	95 58		sta $58,x			sta 	esInt1,x
.3204	a9 00		lda #$00			lda 	#0
.3206	f5 60		sbc $60,x			sbc 	esInt2,x
.3208	95 60		sta $60,x			sta 	esInt2,x
.320a	a9 00		lda #$00			lda 	#0
.320c	f5 68		sbc $68,x			sbc 	esInt3,x
.320e	95 68		sta $68,x			sta 	esInt3,x
.3210	60		rts				rts
.3211					MInt32Not:
.3211	b5 50		lda $50,x			lda 	esInt0,x 					; one's complement all four.
.3213	49 ff		eor #$ff			eor 	#$FF
.3215	95 50		sta $50,x			sta 	esInt0,x
.3217	b5 58		lda $58,x			lda 	esInt1,x
.3219	49 ff		eor #$ff			eor 	#$FF
.321b	95 58		sta $58,x			sta 	esInt1,x
.321d	b5 60		lda $60,x			lda 	esInt2,x
.321f	49 ff		eor #$ff			eor 	#$FF
.3221	95 60		sta $60,x			sta 	esInt2,x
.3223	b5 68		lda $68,x			lda 	esInt3,x
.3225	49 ff		eor #$ff			eor 	#$FF
.3227	95 68		sta $68,x			sta 	esInt3,x
.3229	60		rts				rts
.322a					MInt32Sign:
.322a	b5 68		lda $68,x			lda 	esInt3,x					; look at MSB
.322c	30 0b		bmi $3239			bmi 	MInt32True 					; if set return -1 (true)
.322e	20 64 32	jsr $3264			jsr 	MInt32Zero 					; is it zero ?
.3231	f0 0a		beq $323d			beq 	MInt32False 				; if zero return 0 (false)
.3233	20 3d 32	jsr $323d			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3236	f6 50		inc $50,x			inc 	esInt0,x  					; and bumping the LSB.
.3238	60		rts				rts
.3239					MInt32True:
.3239	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.323b	d0 02		bne $323f			bne 	MInt32WriteAll
.323d					MInt32False:
.323d	a9 00		lda #$00			lda 	#0
.323f					MInt32WriteAll:
.323f	95 50		sta $50,x			sta 	esInt0,x
.3241					MInt32Write123:
.3241	95 58		sta $58,x			sta 	esInt1,x
.3243	95 60		sta $60,x			sta 	esInt2,x
.3245	95 68		sta $68,x			sta 	esInt3,x
.3247	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3249	95 48		sta $48,x			sta 	esType,x
.324b	60		rts				rts
.324c					MInt32Set8Bit:
.324c	95 50		sta $50,x			sta 	esInt0,x 					; coopt above function to write
.324e	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3250	f0 ef		beq $3241			beq		MInt32Write123
.3252					MInt32ShiftLeft:
.3252	16 50		asl $50,x			asl 	esInt0,x
.3254	36 58		rol $58,x			rol	 	esInt1,x
.3256	36 60		rol $60,x			rol	 	esInt2,x
.3258	36 68		rol $68,x			rol	 	esInt3,x
.325a	60		rts				rts
.325b					MInt32ShiftRight:
.325b	56 68		lsr $68,x			lsr 	esInt3,x
.325d	76 60		ror $60,x			ror 	esInt2,x
.325f	76 58		ror $58,x			ror 	esInt1,x
.3261	76 50		ror $50,x			ror 	esInt0,x
.3263	60		rts				rts
.3264					MInt32Zero:
.3264	b5 50		lda $50,x			lda 	esInt0,x
.3266	15 58		ora $58,x			ora 	esInt1,x
.3268	15 60		ora $60,x			ora 	esInt2,x
.326a	15 68		ora $68,x			ora 	esInt3,x
.326c	60		rts				rts
.326d					MInt32Random:
.326d	98		tya				tya
.326e	48		pha				pha
.326f	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3271	ad da 0c	lda $0cda			lda 	MSeed32+0 					; check the seed isn't zero
.3274	d0 03		bne $3279			bne 	_Random1
.3276	a8		tay				tay 								; if so do it 256 times
.3277	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3279					_Random1:
.3279	0a		asl a				asl 	a
.327a	2e db 0c	rol $0cdb			rol 	MSeed32+1
.327d	2e dc 0c	rol $0cdc			rol 	MSeed32+2
.3280	2e dd 0c	rol $0cdd			rol 	MSeed32+3
.3283	90 02		bcc $3287			bcc 	_Random2
.3285	49 c5		eor #$c5			eor 	#$C5
.3287					_Random2:
.3287	88		dey				dey
.3288	d0 ef		bne $3279			bne 	_Random1
.328a	8d da 0c	sta $0cda			sta 	MSeed32+0 					; copy the seed in.
.328d	95 50		sta $50,x			sta 	esInt0,x
.328f	ad db 0c	lda $0cdb			lda 	MSeed32+1
.3292	95 58		sta $58,x			sta 	esInt1,x
.3294	ad dc 0c	lda $0cdc			lda 	MSeed32+2
.3297	95 60		sta $60,x			sta 	esInt2,x
.3299	ad dd 0c	lda $0cdd			lda 	MSeed32+3
.329c	95 68		sta $68,x			sta 	esInt3,x
.329e	68		pla				pla
.329f	a8		tay				tay
.32a0	a9 00		lda #$00			lda 	#0
.32a2	95 48		sta $48,x			sta 	esType,x
.32a4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.32a5					CheckToken:
.32a5	d1 28		cmp ($28),y			cmp 	(codePtr),y
.32a7	d0 02		bne $32ab			bne 	_CTError
.32a9	c8		iny				iny
.32aa	60		rts				rts
.32ab					_CTError:
.32ab	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.32ad	20 18 15	jsr $1518		jsr	errorHandler
.32b0					CheckRightParen:
.32b0	b1 28		lda ($28),y			lda 	(codePtr),y
.32b2	c8		iny				iny
.32b3	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.32b5	d0 01		bne $32b8			bne 	_CRPError
.32b7	60		rts				rts
.32b8					_CRPError:
.32b8	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.32ba	20 18 15	jsr $1518		jsr	errorHandler
.32bd					CheckComma:
.32bd	b1 28		lda ($28),y			lda 	(codePtr),y
.32bf	c8		iny				iny
.32c0	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.32c2	d0 01		bne $32c5			bne 	_CCError
.32c4	60		rts				rts
.32c5					_CCError:
.32c5	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.32c7	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.32ca					RSReset:
.32ca	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.32cc	85 37		sta $37				sta 	rsPointer
.32ce	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.32d0	85 38		sta $38				sta 	1+(rsPointer)
.32d2	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.32d4	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.32d7	60		rts				rts
.32d8					RSClaim:
.32d8	84 32		sty $32				sty 	tempShort 					; preserve Y
.32da	48		pha				pha 								; save marker on stack.
.32db	8a		txa				txa 								; get bytes required.
.32dc	38		sec				sec
.32dd	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.32df	65 37		adc $37				adc 	rsPointer
.32e1	85 37		sta $37				sta 	rsPointer
.32e3	a5 38		lda $38				lda 	rsPointer+1
.32e5	69 ff		adc #$ff			adc 	#$FF
.32e7	85 38		sta $38				sta 	rsPointer+1
.32e9	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.32eb	90 08		bcc $32f5			bcc 	_RSCOverflow
.32ed	68		pla				pla 								; get marker back
.32ee	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.32f0	91 37		sta ($37),y			sta 	(rsPointer),y
.32f2	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.32f4	60		rts				rts
.32f5					_RSCOverflow:
.32f5	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.32f7	20 18 15	jsr $1518		jsr	errorHandler
.32fa					RSFree:
.32fa	18		clc				clc
.32fb	65 37		adc $37				adc 	rsPointer
.32fd	85 37		sta $37				sta 	rsPointer
.32ff	90 02		bcc $3303			bcc 	_RSFExit
.3301	e6 38		inc $38				inc 	rsPointer+1
.3303					_RSFExit:
.3303	60		rts				rts
.3304					RSSavePosition:
.3304	84 32		sty $32				sty 	tempShort 					; save Y position
.3306	a8		tay				tay 								; this is where we write it.
.3307	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3309	91 37		sta ($37),y			sta 	(rsPointer),y
.330b	c8		iny				iny
.330c	a5 29		lda $29				lda 	codePtr+1
.330e	91 37		sta ($37),y			sta 	(rsPointer),y
.3310	c8		iny				iny
.3311	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3313	91 37		sta ($37),y			sta 	(rsPointer),y
.3315	a8		tay				tay 								; fix Y back again to original value
.3316	60		rts				rts
.3317					RSLoadPosition:
.3317	a8		tay				tay
.3318	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.331a	85 28		sta $28				sta 	codePtr
.331c	c8		iny				iny
.331d	b1 37		lda ($37),y			lda 	(rsPointer),y
.331f	85 29		sta $29				sta 	codePtr+1
.3321	c8		iny				iny
.3322	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3324	a8		tay				tay 								; to Y
.3325	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3326					WarmStart:
.3326	a2 04		ldx #$04		ldx	#4
.3328	20 97 1c	jsr $1c97		jsr	interactionHandler

;******  Return to file: main/main.asm

.332b					mainHandler:
.332b	7c 2e 33	jmp ($332e,x)			jmp 	(mainVectors,x)
.332e					mainVectors:
>332e	48 33					.word _DummyControlHandler ; index 0
>3330	bd 32					.word CheckComma           ; index 2
>3332	b0 32					.word CheckRightParen      ; index 4
>3334	9f 24					.word XCommandClear        ; index 6
>3336	c6 2b					.word LinkEvaluate         ; index 8
>3338	d2 2b					.word LinkEvaluateInteger  ; index 10
>333a	d8 2b					.word LinkEvaluateSmallInt ; index 12
>333c	cc 2b					.word LinkEvaluateTerm     ; index 14
>333e	8c 31					.word MLInt32ToString      ; index 16
>3340	2e 26					.word Command_XNew         ; index 18
>3342	3c 26					.word XCommand_Run         ; index 20
>3344	48 26					.word Command_RunFrom      ; index 22
>3346	a4 30					.word LinkInt32FromString  ; index 24
.3348					_DummyControlHandler:
.3348	60		rts			rts

;******  Return to file: basic.asm

.3349					section_end_main:
.3349					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3349					StringChrs:
.3349	aa		tax				tax 								; set up stack
.334a	a9 02		lda #$02			lda 	#2
.334c	20 0c 34	jsr $340c			jsr 	AllocateSoftString
.334f	98		tya				tya
.3350	20 32 34	jsr $3432			jsr 	WriteSoftString
.3353					StringUpdate:
.3353	20 61 33	jsr $3361			jsr 	ReturnSoftString
.3356	8a		txa				txa
.3357	60		rts				rts
.3358					StringNull:
.3358	aa		tax				tax
.3359	a9 01		lda #$01			lda 	#1
.335b	20 0c 34	jsr $340c			jsr 	AllocateSoftString
.335e	4c 53 33	jmp $3353			jmp 	StringUpdate
.3361					ReturnSoftString:
.3361	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3363	95 50		sta $50,x			sta 	esInt0,x
.3365	a5 3a		lda $3a				lda 	softMemAlloc+1
.3367	95 58		sta $58,x			sta 	esInt1,x
.3369	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.336b	95 60		sta $60,x			sta 	esInt2,x
.336d	95 68		sta $68,x			sta 	esInt3,x
.336f	a9 40		lda #$40			lda 	#$40 						; type string.
.3371	95 48		sta $48,x			sta 	esType,x
.3373	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3374					STRCompare:
.3374	48		pha				pha 								; save A
.3375	aa		tax				tax 								; put stack pos in X
.3376	98		tya				tya
.3377	48		pha				pha
.3378	20 ac 33	jsr $33ac			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.337b	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.337d	b1 2a		lda ($2a),y			lda 	(temp0),y
.337f	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3381	90 02		bcc $3385			bcc 	_SCNotSmaller
.3383	b1 2c		lda ($2c),y			lda 	(temp1),y
.3385					_SCNotSmaller:
.3385	aa		tax				tax 								; put that in X. We compare this many chars first.
.3386					_SCCompareLoop:
.3386	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3388	f0 0c		beq $3396			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.338a	ca		dex				dex 								; decrement chars to compare.
.338b	c8		iny				iny 								; move to next character
.338c	38		sec				sec 								; calculate s1[y]-s2[y]
.338d	b1 2a		lda ($2a),y			lda 	(temp0),y
.338f	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3391	d0 0a		bne $339d			bne 	_SCReturnResult 			; if different return sign of A
.3393	4c 86 33	jmp $3386			jmp 	_SCCompareLoop
.3396					_SCSameToEndShortest
.3396	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3398	38		sec				sec
.3399	b1 2a		lda ($2a),y			lda 	(temp0),y
.339b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.339d					_SCReturnResult:
.339d	08		php				php 								; set return to zero preserving PSW.
.339e	a2 00		ldx #$00			ldx 	#0
.33a0	28		plp				plp
.33a1	f0 05		beq $33a8			beq 	_SCExit 					; two values equal, then exit
.33a3	ca		dex				dex 								; X = $FF
.33a4	90 02		bcc $33a8			bcc 	_SCExit 					; if 1st < 2nd then -1
.33a6	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.33a8					_SCExit:
.33a8	68		pla				pla
.33a9	a8		tay				tay
.33aa	68		pla				pla
.33ab	60		rts				rts
.33ac					CopyStringPair:
.33ac	b5 51		lda $51,x			lda 	esInt0+1,x
.33ae	85 2c		sta $2c				sta 	temp1
.33b0	b5 59		lda $59,x			lda 	esInt1+1,x
.33b2	85 2d		sta $2d				sta 	temp1+1
.33b4					CopyStringTop:
.33b4	b5 50		lda $50,x			lda 	esInt0,x
.33b6	85 2a		sta $2a				sta 	temp0
.33b8	b5 58		lda $58,x			lda 	esInt1,x
.33ba	85 2b		sta $2b				sta 	temp0+1
.33bc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.33bd					StringConcat:
.33bd	aa		tax				tax									; stack pos in X
.33be	98		tya				tya
.33bf	48		pha				pha
.33c0	20 ac 33	jsr $33ac			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.33c3	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.33c4	a0 00		ldy #$00			ldy 	#0
.33c6	b1 2a		lda ($2a),y			lda 	(temp0),y
.33c8	71 2c		adc ($2c),y			adc 	(temp1),y
.33ca	b0 1c		bcs $33e8			bcs 	_SCError 					; just too many characters here.
.33cc	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.33ce	b0 18		bcs $33e8			bcs 	_SCError
.33d0	20 0c 34	jsr $340c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.33d3	20 03 34	jsr $3403			jsr 	CopySoftToStack 			; copy that to the stack.
.33d6	20 ed 33	jsr $33ed			jsr 	SCCopyTemp0 				; copy temp0
.33d9	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.33db	85 2a		sta $2a				sta 	temp0
.33dd	a5 2d		lda $2d				lda 	temp1+1
.33df	85 2b		sta $2b				sta 	temp0+1
.33e1	20 ed 33	jsr $33ed			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.33e4	68		pla				pla
.33e5	a8		tay				tay
.33e6	8a		txa				txa 								; and A
.33e7	60		rts				rts
.33e8					_SCError:
.33e8	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.33ea	20 18 15	jsr $1518		jsr	errorHandler
.33ed					SCCopyTemp0:
.33ed	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.33ef	b1 2a		lda ($2a),y			lda 	(temp0),y
.33f1	85 2e		sta $2e				sta 	temp2
.33f3					_SCCopyLoop:
.33f3	a5 2e		lda $2e				lda 	temp2 						; done the lot
.33f5	f0 0b		beq $3402			beq 	_SCCopyExit
.33f7	c6 2e		dec $2e				dec 	temp2
.33f9	c8		iny				iny 								; get next char
.33fa	b1 2a		lda ($2a),y			lda 	(temp0),y
.33fc	20 32 34	jsr $3432			jsr 	WriteSoftString 			; write to soft string.
.33ff	4c f3 33	jmp $33f3			jmp 	_SCCopyLoop
.3402					_SCCopyExit:
.3402	60		rts				rts
.3403					CopySoftToStack:
.3403	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3405	95 50		sta $50,x			sta 	esInt0,x 					; type is already string.
.3407	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3409	95 58		sta $58,x			sta 	esInt1,x
.340b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.340c					AllocateSoftString:
.340c	85 32		sta $32				sta 	tempShort 					; save count
.340e	98		tya				tya
.340f	48		pha				pha
.3410	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3412	d0 09		bne $341d			bne 	_ASSDone
.3414	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3416	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3418	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.341a	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.341b	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.341d					_ASSDone:
.341d	38		sec				sec 								; allocate downwards enough memory
.341e	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3420	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3422	85 39		sta $39				sta 	softMemAlloc
.3424	a5 3a		lda $3a				lda 	softMemAlloc+1
.3426	e9 00		sbc #$00			sbc 	#0
.3428	85 3a		sta $3a				sta 	softMemAlloc+1
.342a	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.342c	a8		tay				tay
.342d	91 39		sta ($39),y			sta 	(softMemAlloc),y
.342f	68		pla				pla
.3430	a8		tay				tay
.3431	60		rts				rts
.3432					WriteSoftString:
.3432	84 32		sty $32				sty 	tempShort 					; save Y
.3434	48		pha				pha 								; save character on stack
.3435	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3437	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3439	18		clc				clc
.343a	69 01		adc #$01			adc 	#1
.343c	91 39		sta ($39),y			sta 	(softMemAlloc),y
.343e	a8		tay				tay 								; offset in Y
.343f	68		pla				pla 								; get char and write.
.3440	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3442	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3444	60		rts				rts
.3445					StrClone:
.3445	aa		tax				tax 								; set up stack.
.3446	98		tya				tya
.3447	48		pha				pha
.3448	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.344a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.344c	18		clc				clc
.344d	69 01		adc #$01			adc 	#1
.344f	20 0c 34	jsr $340c			jsr 	AllocateSoftString 			; allocate soft memory
.3452	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3454	95 50		sta $50,x			sta 	esInt0,x
.3456	a5 3a		lda $3a				lda 	softMemAlloc+1
.3458	95 58		sta $58,x			sta 	esInt1,x
.345a	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.345c	95 60		sta $60,x			sta 	esInt2,x
.345e	95 68		sta $68,x			sta 	esInt3,x
.3460	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3462	95 48		sta $48,x			sta 	esType,x
.3464	20 ed 33	jsr $33ed			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3467	68		pla				pla
.3468	a8		tay				tay
.3469	8a		txa				txa
.346a	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.346b					CaseString:
.346b	48		pha				pha 								; save A and copy to X
.346c	aa		tax				tax
.346d	98		tya				tya
.346e	48		pha				pha
.346f	20 b4 33	jsr $33b4			jsr 	CopyStringTop 				; target string -> temp0
.3472	a0 00		ldy #$00			ldy 	#0
.3474	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3476	18		clc				clc
.3477	69 01		adc #$01			adc 	#1 							; one more for length byte
.3479	20 0c 34	jsr $340c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.347c	20 03 34	jsr $3403			jsr 	CopySoftToStack 			; copy that to the stack.
.347f	a0 00		ldy #$00			ldy 	#0
.3481	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3483	aa		tax				tax
.3484					_CSCopy:
.3484	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3486	f0 24		beq $34ac			beq 	_CSExit
.3488	ca		dex				dex
.3489	c8		iny				iny
.348a	68		pla				pla 								; check direction
.348b	48		pha				pha
.348c	f0 0c		beq $349a			beq 	_CSUpper
.348e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3490	c9 41		cmp #$41			cmp 	#"A"
.3492	90 12		bcc $34a6			bcc 	_CSWrite
.3494	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3496	b0 0e		bcs $34a6			bcs 	_CSWrite
.3498	90 0a		bcc $34a4			bcc 	_CSFlipWrite
.349a					_CSUpper:
.349a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.349c	c9 61		cmp #$61			cmp 	#"a"
.349e	90 06		bcc $34a6			bcc 	_CSWrite
.34a0	c9 7b		cmp #$7b			cmp 	#"z"+1
.34a2	b0 02		bcs $34a6			bcs 	_CSWrite
.34a4					_CSFlipWrite:
.34a4	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.34a6					_CSWrite:
.34a6	20 32 34	jsr $3432			jsr 	WriteSoftString 			; add to soft string.
.34a9	4c 84 34	jmp $3484			jmp 	_CSCopy
.34ac					_CSExit:
.34ac	68		pla				pla
.34ad	a8		tay				tay
.34ae	68		pla				pla
.34af	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.34b0					StringSubstring:
.34b0	48		pha				pha
.34b1	aa		tax				tax 								; access stack.
.34b2	98		tya				tya
.34b3	48		pha				pha
.34b4	20 b4 33	jsr $33b4			jsr 	CopyStringTop 				; point temp0 to the string.
.34b7	a0 00		ldy #$00			ldy 	#0 							; get length.
.34b9	b1 2a		lda ($2a),y			lda 	(temp0),Y
.34bb	85 2c		sta $2c				sta 	temp1
.34bd	b5 51		lda $51,x			lda 	esInt0+1,x 					; get the initial offset
.34bf	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.34c1	f0 02		beq $34c5			beq 	_SSBOkay
.34c3	b0 2a		bcs $34ef			bcs 	_SSBReturnNull
.34c5					_SSBOkay:
.34c5	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.34c7	18		clc				clc
.34c8	69 01		adc #$01			adc 	#1
.34ca	38		sec				sec
.34cb	f5 51		sbc $51,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.34cd	d5 52		cmp $52,x			cmp 	esInt0+2,x  				; check bad >= required
.34cf	90 02		bcc $34d3			bcc		_SSBTrunc
.34d1	b5 52		lda $52,x			lda 	esInt0+2,x
.34d3					_SSBTrunc:
.34d3	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.34d5	18		clc				clc
.34d6	69 01		adc #$01			adc 	#1 							; add 1
.34d8	20 0c 34	jsr $340c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.34db	20 03 34	jsr $3403			jsr 	CopySoftToStack 			; copy that to the stack.
.34de	b4 51		ldy $51,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.34e0					_SSBCopyLoop:
.34e0	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.34e2	f0 0e		beq $34f2			beq 	_SSBExit
.34e4	c6 2d		dec $2d				dec 	temp1+1
.34e6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.34e8	20 32 34	jsr $3432			jsr 	WriteSoftString
.34eb	c8		iny				iny
.34ec	4c e0 34	jmp $34e0			jmp 	_SSBCopyLoop
.34ef					_SSBReturnNull:
.34ef	20 f6 34	jsr $34f6			jsr 	ReturnNull
.34f2					_SSBExit:
.34f2	68		pla				pla
.34f3	a8		tay				tay
.34f4	68		pla				pla
.34f5	60		rts				rts
.34f6					ReturnNull:
.34f6	a9 00		lda #$00			lda 	#0 							; clear null string
.34f8	8d ce 0a	sta $0ace			sta 	NullString
.34fb	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.34fd	95 50		sta $50,x			sta 	esInt0,x
.34ff	a9 0a		lda #$0a			lda 	#NullString >> 8
.3501	95 58		sta $58,x			sta 	esInt1,x
.3503	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0cde					srcStrLen:
>0cde							.fill 	1
.3504					StringWrite:
.3504	aa		tax				tax
.3505	48		pha				pha
.3506	98		tya				tya
.3507	48		pha				pha
.3508	20 2f 35	jsr $352f			jsr 	CheckOverwriteCurrent
.350b	b0 0d		bcs $351a			bcs		_SWCopyCurrent
.350d	20 6d 35	jsr $356d			jsr 	RequiresConcretion
.3510	90 0e		bcc $3520			bcc 	_SWWriteReference
.3512	20 d0 35	jsr $35d0			jsr 	CheckSpecialConcretion
.3515	b0 09		bcs $3520			bcs 	_SWWriteReference
.3517	20 81 35	jsr $3581			jsr 	AllocateHardMemory
.351a					_SWCopyCurrent:
.351a	20 b4 35	jsr $35b4			jsr 	CopyStringToHardMemory
.351d	4c 2b 35	jmp $352b			jmp 	_SWExit
.3520					_SWWriteReference
.3520	a0 00		ldy #$00			ldy 	#0
.3522	a5 2a		lda $2a				lda 	temp0
.3524	91 2c		sta ($2c),y			sta 	(temp1),y
.3526	c8		iny				iny
.3527	a5 2b		lda $2b				lda 	temp0+1
.3529	91 2c		sta ($2c),y			sta 	(temp1),y
.352b					_SWExit:
.352b	68		pla				pla
.352c	a8		tay				tay
.352d	68		pla				pla
.352e	60		rts				rts
.352f					CheckOverwriteCurrent:
.352f	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3531	b5 59		lda $59,x			lda 	esInt1+1,x
.3533	85 2b		sta $2b				sta 	temp0+1
.3535	b5 51		lda $51,x			lda 	esInt0+1,x
.3537	85 2a		sta $2a				sta 	temp0
.3539	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.353b	8d de 0c	sta $0cde			sta 	srcStrLen
.353e	b5 50		lda $50,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3540	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3542	b5 58		lda $58,x			lda 	esInt1,x 				; data record + 5
.3544	85 2d		sta $2d				sta 	temp1+1
.3546	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3548	b1 2c		lda ($2c),y			lda 	(temp1),y
.354a	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.354c	90 1b		bcc $3569			bcc 	_COCFail 				; in hard memory.
.354e	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3550	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3552	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3554	85 2e		sta $2e				sta 	temp2
.3556	c8		iny				iny
.3557	b1 2c		lda ($2c),y			lda 	(temp1),y
.3559	e9 00		sbc #$00			sbc 	#0
.355b	85 2f		sta $2f				sta 	temp2+1
.355d	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.355f	b1 2e		lda ($2e),y			lda 	(temp2),y
.3561	38		sec				sec  							; maximum character capacity.
.3562	e9 02		sbc #$02			sbc 	#2
.3564	cd de 0c	cmp $0cde			cmp 	srcStrLen 				; if >= the required length
.3567	b0 02		bcs $356b			bcs 	_COCCanReuse
.3569					_COCFail:
.3569	18		clc				clc
.356a	60		rts				rts
.356b					_COCCanReuse:
.356b	38		sec				sec
.356c	60		rts				rts
.356d					RequiresConcretion:
.356d	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.356f	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3571	b0 0a		bcs $357d			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3573	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3575	f0 08		beq $357f			beq 	_RCFail 				; if not, this cannot be soft memory.
.3577	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3579	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.357b	90 02		bcc $357f			bcc 	_RCFail 				; so concreting
.357d					_RCSucceed:
.357d	38		sec				sec
.357e	60		rts				rts
.357f					_RCFail:
.357f	18		clc				clc
.3580	60		rts				rts
.3581					AllocateHardMemory:
.3581	98		tya				tya
.3582	48		pha				pha
.3583	ad de 0c	lda $0cde			lda 	srcStrLen 				; characters in string
.3586	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3588	b0 04		bcs $358e			bcs 	_AHMSetMax 				; max out that amount.
.358a	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.358c	90 02		bcc $3590			bcc 	_AHMIsOkay
.358e					_AHMSetMax:
.358e	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3590					_AHMIsOkay:
.3590	48		pha				pha	 							; save size to be allocated
.3591	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3593	38		sec				sec  							; and copy result to TOS as target address.
.3594	65 33		adc $33				adc 	highMemory
.3596	85 33		sta $33				sta 	highMemory
.3598	a5 34		lda $34				lda 	highMemory+1
.359a	69 ff		adc #$ff			adc 	#$FF
.359c	85 34		sta $34				sta 	highMemory+1
.359e	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.35a0	68		pla				pla 							; get the total size of the storage block
.35a1	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.35a3	18		clc				clc
.35a4	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.35a6	69 01		adc #$01			adc 	#1
.35a8	91 2c		sta ($2c),y			sta 	(temp1),y
.35aa	a5 34		lda $34				lda 	highMemory+1
.35ac	69 00		adc #$00			adc 	#0
.35ae	c8		iny				iny
.35af	91 2c		sta ($2c),y			sta 	(temp1),y
.35b1	68		pla				pla
.35b2	a8		tay				tay
.35b3	60		rts				rts
.35b4					CopyStringToHardMemory:
.35b4	98		tya				tya
.35b5	48		pha				pha
.35b6	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.35b8	b1 2c		lda ($2c),y			lda 	(temp1),y
.35ba	85 2e		sta $2e				sta 	temp2
.35bc	c8		iny				iny
.35bd	b1 2c		lda ($2c),y			lda 	(temp1),y
.35bf	85 2f		sta $2f				sta 	temp2+1
.35c1	ac de 0c	ldy $0cde			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.35c4					_CSTHMLoop:
.35c4	b1 2a		lda ($2a),y			lda 	(temp0),y
.35c6	91 2e		sta ($2e),y			sta 	(temp2),y
.35c8	88		dey				dey
.35c9	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.35cb	d0 f7		bne $35c4			bne 	_CSTHMLoop
.35cd	68		pla				pla
.35ce	a8		tay				tay
.35cf	60		rts				rts
.35d0					CheckSpecialConcretion:
.35d0	ad de 0c	lda $0cde			lda 	srcStrLen 				; check string is null e.g. length = 0
.35d3	f0 02		beq $35d7			beq 	_CSCNullString
.35d5	18		clc				clc
.35d6	60		rts				rts
.35d7					_CSCNullString:
.35d7	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.35d9	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.35dc	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.35de	85 2a		sta $2a				sta 	temp0
.35e0	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.35e2	85 2b		sta $2b				sta 	1+(temp0)
.35e4	38		sec				sec
.35e5	60		rts				rts

;******  Return to file: string/string.asm

.35e6					stringHandler:
.35e6	7c e9 35	jmp ($35e9,x)			jmp 	(stringVectors,x)
.35e9					stringVectors:
>35e9	fb 35					.word _DummyControlHandler ; index 0
>35eb	49 33					.word StringChrs           ; index 2
>35ed	45 34					.word StrClone             ; index 4
>35ef	bd 33					.word StringConcat         ; index 6
>35f1	58 33					.word StringNull           ; index 8
>35f3	74 33					.word STRCompare           ; index 10
>35f5	6b 34					.word CaseString           ; index 12
>35f7	b0 34					.word StringSubstring      ; index 14
>35f9	04 35					.word StringWrite          ; index 16
.35fb					_DummyControlHandler:
.35fb	60		rts			rts

;******  Return to file: basic.asm

.35fc					section_end_string:
.35fc					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0cdf					deTokeniseVector:
>0cdf							.fill 	2
.0ce1					lastCharacterClass:
>0ce1							.fill 	1
.0ce2					indent:
>0ce2							.fill 	1
.35fc					ListLine:
.35fc	48		pha				pha								; enter here to list to console. sets the output vector
.35fd	a9 31		lda #$31			lda 	#(deTokenPrint) & $FF
.35ff	8d df 0c	sta $0cdf			sta 	deTokeniseVector
.3602	a9 37		lda #$37			lda 	#(deTokenPrint) >> 8
.3604	8d e0 0c	sta $0ce0			sta 	1+(deTokeniseVector)
.3607	68		pla				pla
.3608					Detokenise:
.3608	18		clc				clc 							; space required for line number.
.3609	69 06		adc #$06			adc 	#6
.360b	8d e2 0c	sta $0ce2			sta 	indent
.360e	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3610	8d e1 0c	sta $0ce1			sta 	lastCharacterClass
.3613	a2 02		ldx #$02			ldx 	#2
.3615	20 3d 32	jsr $323d			jsr 	MInt32False
.3618	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.361a	b1 28		lda ($28),y			lda 	(codePtr),y
.361c	95 50		sta $50,x			sta 	esInt0,x
.361e	c8		iny				iny
.361f	b1 28		lda ($28),y			lda 	(codePtr),y
.3621	95 58		sta $58,x			sta 	esInt1,x
.3623	a9 84		lda #$84			lda 	#LTYLineNumber
.3625	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.3628	a9 0a		lda #$0a			lda 	#10 					; base 10
.362a	20 d0 36	jsr $36d0			jsr 	DTPrintInteger 			; print as integer.
.362d	a0 00		ldy #$00			ldy 	#0 						; get length
.362f	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3631	aa		tax				tax
.3632					_DTPadOut:
.3632	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3634	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.3637	e8		inx				inx
.3638	ec e2 0c	cpx $0ce2			cpx 	indent
.363b	d0 f5		bne $3632			bne 	_DTPadOut
.363d	a0 03		ldy #$03			ldy 	#3 						; start position.
.363f					_DTListLoop
.363f	b1 28		lda ($28),y			lda 	(codePtr),y
.3641	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3643	f0 5e		beq $36a3			beq 	_DTIsString
.3645	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3647	f0 56		beq $369f			beq 	_DTIsFloat
.3649	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.364b	f0 16		beq $3663			beq 	_DTHexConstant
.364d	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.364f	d0 06		bne $3657			bne 	_DTNotEnd
.3651	a9 ff		lda #$ff			lda 	#255 					; print CR
.3653	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.3656	60		rts				rts
.3657					_DTNotEnd:
.3657	c9 00		cmp #$00			cmp 	#0
.3659	30 38		bmi $3693			bmi 	_DTIsToken
.365b	c9 40		cmp #$40			cmp 	#$40
.365d	90 3a		bcc $3699			bcc 	_DTIsIdentifier
.365f	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3661	d0 0d		bne $3670			bne 	_DTConstant
.3663					_DTHexConstant:
.3663	a9 26		lda #$26			lda 	#"&"
.3665	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.3668	c8		iny				iny
.3669	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.366b	20 4d 37	jsr $374d			jsr 	DTSwitchMode
.366e	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3670					_DTConstant:
.3670	48		pha				pha
.3671	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3673	20 4d 37	jsr $374d			jsr 	DTSwitchMode
.3676	a9 86		lda #$86			lda 	#LTYConstant
.3678	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.367b	a2 02		ldx #$02			ldx 	#2 						; get its value
.367d	8a		txa				txa
.367e	a2 0e		ldx #$0e		ldx	#14
.3680	20 2b 33	jsr $332b		jsr	mainHandler
.3683	aa		tax				tax
.3684	68		pla				pla 							; get base back
.3685	85 32		sta $32				sta 	tempShort
.3687	98		tya				tya
.3688	48		pha				pha
.3689	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.368b	20 d0 36	jsr $36d0			jsr 	DTPrintInteger
.368e	68		pla				pla
.368f	a8		tay				tay
.3690	4c 3f 36	jmp $363f			jmp 	_DTListLoop
.3693					_DTIsToken:
.3693	20 a6 37	jsr $37a6			jsr 	DTDecodeToken
.3696	4c 3f 36	jmp $363f			jmp 	_DTListLoop
.3699					_DTIsIdentifier:
.3699	20 5f 37	jsr $375f			jsr 	DTIdentifier
.369c	4c 3f 36	jmp $363f			jmp 	_DTListLoop
.369f					_DTIsFloat:
>369f	db						.byte 	$DB
.36a0	4c 9f 36	jmp $369f			jmp 	_DTIsFloat
.36a3					_DTIsString:
.36a3	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.36a5	20 4d 37	jsr $374d			jsr 	DTSwitchMode
.36a8	a9 81		lda #$81			lda 	#LTYString
.36aa	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.36ad	a9 22		lda #$22			lda 	#'"'						; open quote
.36af	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.36b2	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.36b4	8a		txa				txa
.36b5	a2 0e		ldx #$0e		ldx	#14
.36b7	20 2b 33	jsr $332b		jsr	mainHandler
.36ba	aa		tax				tax
.36bb	b5 50		lda $50,x			lda 	esInt0,x 					; copy string address to temp0
.36bd	85 2a		sta $2a				sta 	temp0
.36bf	b5 58		lda $58,x			lda 	esInt1,x
.36c1	85 2b		sta $2b				sta 	temp0+1
.36c3	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.36c5	20 e2 36	jsr $36e2			jsr 	DTPrintLengthPrefix
.36c8	a9 22		lda #$22			lda 	#'"'
.36ca	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.36cd	4c 3f 36	jmp $363f			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0ce3					tPrintCount:
>0ce3							.fill 	1
.36d0					DTPrintInteger:
.36d0	48		pha				pha									; save base
.36d1	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.36d3	85 2a		sta $2a				sta 	temp0
.36d5	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.36d7	85 2b		sta $2b				sta 	1+(temp0)
.36d9	68		pla				pla
.36da	a8		tay				tay
.36db	8a		txa				txa
.36dc	a2 10		ldx #$10		ldx	#16
.36de	20 2b 33	jsr $332b		jsr	mainHandler
.36e1	aa		tax				tax 								; then drop through here.
.36e2					DTPrintLengthPrefix:
.36e2	aa		tax				tax 								; A = 0 = don't case convert.
.36e3	98		tya				tya
.36e4	48		pha				pha
.36e5	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.36e7	b1 2a		lda ($2a),y			lda 	(temp0),y
.36e9	8d e3 0c	sta $0ce3			sta 	tPrintCount
.36ec	f0 1b		beq $3709			beq 	_DTPLPExit 					; empty string
.36ee					_DTPLPLoop:
.36ee	c8		iny				iny 								; get next.
.36ef	b1 2a		lda ($2a),y			lda 	(temp0),y
.36f1	29 7f		and #$7f			and 	#$7F
.36f3	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.36f5	f0 0a		beq $3701			beq 	_DTPLPNoCase
.36f7	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.36f9	90 06		bcc $3701			bcc 	_DTPLPNoCase
.36fb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.36fd	b0 02		bcs $3701			bcs 	_DTPLPNoCase
.36ff	49 20		eor #$20			eor 	#"A"^"a"
.3701					_DTPLPNoCase
.3701	20 0c 37	jsr $370c			jsr 	ListOutputCharacter 		; call handler
.3704	ce e3 0c	dec $0ce3			dec 	tPrintCount 				; do all the characters
.3707	d0 e5		bne $36ee			bne 	_DTPLPLoop
.3709					_DTPLPExit:
.3709	68		pla				pla
.370a	a8		tay				tay
.370b	60		rts				rts
.370c					ListOutputCharacter:
.370c	85 32		sta $32				sta 	tempShort
.370e	48		pha				pha
.370f	8a		txa				txa
.3710	48		pha				pha
.3711	98		tya				tya
.3712	48		pha				pha
.3713	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3715	c9 20		cmp #$20			cmp 	#32
.3717	b0 0c		bcs $3725			bcs		_LOCHiBit
.3719	09 40		ora #$40			ora 	#64 						; conversion
.371b	c9 40		cmp #$40			cmp 	#64							; make l/c
.371d	f0 06		beq $3725			beq 	_LOCHiBit
.371f	c9 5b		cmp #$5b			cmp 	#65+26
.3721	b0 02		bcs $3725			bcs 	_LOCHiBit
.3723	69 20		adc #$20			adc 	#32
.3725					_LOCHiBit:
.3725	20 2e 37	jsr $372e			jsr 	_LOCCallVector				; call o/p handler routine
.3728	68		pla				pla
.3729	a8		tay				tay
.372a	68		pla				pla
.372b	aa		tax				tax
.372c	68		pla				pla
.372d					_LOCExit:
.372d	60		rts				rts
.372e					_LOCCallVector:
.372e	6c df 0c	jmp ($0cdf)			jmp 	(deTokeniseVector)
.3731					deTokenPrint:
.3731	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3733	30 06		bmi $373b			bmi 	_dtpInk
.3735	a2 16		ldx #$16		ldx	#22
.3737	20 f6 14	jsr $14f6		jsr	deviceHandler
.373a	60		rts				rts
.373b	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.373d	f0 08		beq $3747			beq 	_dtpCR						; except $FF => CRLF
.373f	29 07		and #$07			and 	#7
.3741	a2 08		ldx #$08		ldx	#8
.3743	20 f6 14	jsr $14f6		jsr	deviceHandler
.3746	60		rts				rts
.3747					_dtpCR:
.3747	a2 06		ldx #$06		ldx	#6
.3749	20 f6 14	jsr $14f6		jsr	deviceHandler
.374c	60		rts				rts
.374d					DTSwitchMode:
.374d	cd e1 0c	cmp $0ce1			cmp 	LastCharacterClass 			; if changed, update character class
.3750	f0 04		beq $3756			beq 	_DTSMNoChange
.3752	8d e1 0c	sta $0ce1			sta 	LastCharacterClass
.3755					_DTSMExit:
.3755	60		rts				rts
.3756					_DTSMNoChange:
.3756	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.3758	f0 fb		beq $3755			beq 	_DTSMExit 					; need a space.
.375a	a9 20		lda #$20			lda 	#" "
.375c	4c 0c 37	jmp $370c			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.375f					DTIdentifier:
.375f	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.3761	20 4d 37	jsr $374d			jsr 	DTSwitchMode
.3764	a9 87		lda #$87			lda 	#LTYIdentifier
.3766	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.3769					_DTILoop:
.3769	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.376b	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.376d	d0 02		bne $3771			bne 	_DTINotUS
.376f	a9 5f		lda #$5f			lda 	#"_"
.3771					_DTINotUS:
.3771	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.3774	c8		iny				iny
.3775	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.3777	c9 3a		cmp #$3a			cmp 	#$3A
.3779	90 ee		bcc $3769			bcc 	_DTILoop
.377b	c8		iny				iny
.377c	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.377e	f0 25		beq $37a5			beq 	_DTIExit 					; no postfix.
.3780	48		pha				pha
.3781	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3783	8d e1 0c	sta $0ce1			sta 	LastCharacterClass
.3786	a9 82		lda #$82			lda 	#LTYPunctuation
.3788	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.378b	68		pla				pla
.378c	c9 3b		cmp #$3b			cmp 	#$3B
.378e	f0 10		beq $37a0			beq 	_DTIArray
.3790	4a		lsr a				lsr 	a 							; array flag in C
.3791	08		php				php
.3792	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3794	f0 02		beq $3798			beq 	_DTIDollar
.3796	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.3798					_DTIDollar:
.3798	49 24		eor #$24			eor 	#"$"
.379a	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.379d	28		plp				plp
.379e	90 05		bcc $37a5			bcc 	_DTIExit
.37a0					_DTIArray:
.37a0	a9 28		lda #$28			lda 	#"("
.37a2	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.37a5					_DTIExit:
.37a5	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.37a6					DTDecodeToken:
.37a6	a2 00		ldx #$00			ldx 	#0 							; table number to use
.37a8	b1 28		lda ($28),y			lda 	(codePtr),y
.37aa	c9 84		cmp #$84			cmp 	#$84
.37ac	b0 05		bcs $37b3			bcs 	_DTNotShift
.37ae	29 03		and #$03			and 	#3 							; get the shift 1..3
.37b0	0a		asl a				asl 	a 							; put 2 x in X
.37b1	aa		tax				tax
.37b2	c8		iny				iny
.37b3					_DTNotShift:
.37b3	bd b5 3a	lda $3ab5,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.37b6	85 2a		sta $2a				sta 	temp0 						; point into temp0
.37b8	bd b6 3a	lda $3ab6,x			lda 	TokenTableAddress+1,x
.37bb	85 2b		sta $2b				sta 	temp0+1
.37bd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.37bf	c8		iny				iny 								; consume it.
.37c0	aa		tax				tax
.37c1	98		tya				tya
.37c2	48		pha				pha
.37c3					_DTFindText:
.37c3	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.37c5	f0 11		beq $37d8			beq 	_DTFoundText
.37c7	ca		dex				dex
.37c8	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.37ca	38		sec				sec
.37cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.37cd	65 2a		adc $2a				adc 	temp0
.37cf	85 2a		sta $2a				sta 	temp0
.37d1	90 f0		bcc $37c3			bcc 	_DTFindText
.37d3	e6 2b		inc $2b				inc 	temp0+1
.37d5	4c c3 37	jmp $37c3			jmp 	_DTFindText
.37d8					_DTFoundText:
.37d8	a0 01		ldy #$01			ldy 	#1 							; get first character
.37da	b1 2a		lda ($2a),y			lda 	(temp0),y
.37dc	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.37de	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.37e0	90 11		bcc $37f3			bcc 	_DTIsPunctuation
.37e2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.37e4	b0 0d		bcs $37f3			bcs 	_DTIsPunctuation
.37e6	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.37e8	20 4d 37	jsr $374d			jsr 	DTSwitchMode
.37eb	a9 83		lda #$83			lda 	#LTYKeyword
.37ed	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.37f0	4c fd 37	jmp $37fd			jmp 	_DTPrint
.37f3					_DTIsPunctuation:
.37f3	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.37f5	20 4d 37	jsr $374d			jsr 	DTSwitchMode
.37f8	a9 82		lda #$82			lda 	#LTYPunctuation
.37fa	20 0c 37	jsr $370c			jsr 	ListOutputCharacter
.37fd					_DTPrint:
.37fd	a9 01		lda #$01			lda 	#1 							; fix case.
.37ff	20 e2 36	jsr $36e2			jsr 	DTPrintLengthPrefix 		; print it out.
.3802	a0 00		ldy #$00			ldy 	#0
.3804	b1 2a		lda ($2a),y			lda 	(temp0),y
.3806	a8		tay				tay
.3807	b1 2a		lda ($2a),y			lda 	(temp0),y
.3809	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.380b	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.380d	90 04		bcc $3813			bcc 	_DTIsNowPunctuation
.380f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3811	90 05		bcc $3818			bcc 	_DTPExit
.3813					_DTIsNowPunctuation:
.3813	a9 01		lda #$01			lda 	#1
.3815	8d e1 0c	sta $0ce1			sta		LastCharacterClass
.3818					_DTPExit:
.3818	68		pla				pla
.3819	a8		tay				tay
.381a	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0ce4					currentSet:
>0ce4							.fill 	1
.381b					TokenSearch:
.381b	8a		txa				txa
.381c	48		pha				pha
.381d	98		tya				tya
.381e	48		pha				pha
.381f	a9 00		lda #$00			lda 	#0
.3821	8d e4 0c	sta $0ce4			sta 	currentSet
.3824					_TSLoop:
.3824	ad e4 0c	lda $0ce4			lda 	currentSet 					; 2 x currentset in X
.3827	0a		asl a				asl 	a
.3828	aa		tax				tax
.3829	bd b5 3a	lda $3ab5,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.382c	85 2a		sta $2a				sta 	temp0
.382e	bd b6 3a	lda $3ab6,x			lda 	TokenTableAddress+1,x
.3831	85 2b		sta $2b				sta 	temp0+1
.3833	20 5a 38	jsr $385a			jsr 	TokenSearchOne 				; search one table
.3836	b0 0d		bcs $3845			bcs 	_TSFound 					; found a token.
.3838	ee e4 0c	inc $0ce4			inc 	currentSet 					; next set
.383b	ad e4 0c	lda $0ce4			lda 	currentSet
.383e	c9 04		cmp #$04			cmp 	#4
.3840	d0 e2		bne $3824			bne 	_TSLoop 					; back if not done all four.
.3842	18		clc				clc 								; clear carry and exit
.3843	90 10		bcc $3855			bcc 	_TSExit
.3845					_TSFound:
.3845	48		pha				pha 								; save token
.3846	ad e4 0c	lda $0ce4			lda 	currentSet					; if set zero no shift
.3849	f0 05		beq $3850			beq 	_TSNoShift
.384b	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.384d	20 0b 39	jsr $390b			jsr 	TokenWrite
.3850					_TSNoShift:
.3850	68		pla				pla 								; get token back
.3851	20 0b 39	jsr $390b			jsr 	TokenWrite 					; write it
.3854	38		sec				sec 								; carry set indicating success
.3855					_TSExit:
.3855	68		pla				pla
.3856	a8		tay				tay
.3857	68		pla				pla
.3858	aa		tax				tax
.3859	60		rts				rts
.385a					TokenSearchOne:
.385a	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.385c					_TSOLoop:
.385c	a0 00		ldy #$00			ldy 	#0
.385e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.3860	f0 26		beq $3888			beq 	_TSOFail 					; if zero, end of table
.3862	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.3865	f0 11		beq $3878			beq 	_TSOCheckText
.3867					_TSONext:
.3867	e8		inx				inx 								; bump token
.3868	a0 00		ldy #$00			ldy 	#0							; get length
.386a	b1 2a		lda ($2a),y			lda 	(temp0),y
.386c	38		sec				sec
.386d	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.386f	85 2a		sta $2a				sta 	temp0
.3871	90 e9		bcc $385c			bcc 	_TSOLoop
.3873	e6 2b		inc $2b				inc 	temp0+1
.3875	4c 5c 38	jmp $385c			jmp 	_TSOLoop
.3878					_TSOCheckText:
.3878	a8		tay				tay 								; compare length downto 1.
.3879					_TSOCheckLoop:
.3879	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.387b	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.387e	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3880	d0 e5		bne $3867			bne 	_TSONext 					; different goto next.
.3882	88		dey				dey 								; do all
.3883	d0 f4		bne $3879			bne 	_TSOCheckLoop
.3885	8a		txa				txa 								; return token in A and carry set
.3886	38		sec				sec
.3887	60		rts				rts
.3888					_TSOFail:
.3888	18		clc				clc
.3889	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.388a					TokTest:
.388a	a2 ff		ldx #$ff				ldx 	#$FF
.388c	9a		txs					txs
.388d	a9 aa		lda #$aa			lda 	#(TokenText1) & $FF
.388f	85 28		sta $28				sta 	codePtr
.3891	a9 38		lda #$38			lda 	#(TokenText1) >> 8
.3893	85 29		sta $29				sta 	1+(codePtr)
.3895	20 aa 38	jsr $38aa				jsr 	Tokenise
.3898	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.389a	bd aa 38	lda $38aa,x	_TokCheck:	lda 	TokenBytes1,x
.389d	dd e8 0c	cmp $0ce8,x				cmp 	tokenBuffer,x
.38a0	d0 fe		bne $38a0	_TokFail:	bne 	_TokFail	 		; error.
.38a2	e8		inx					inx
.38a3	c9 80		cmp #$80				cmp 	#$80
.38a5	d0 f3		bne $389a				bne 	_TokCheck
.38a7	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.38aa					TokenText1:
.38aa					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0ce5					tokenHeader:
>0ce5							.fill 	3
.0ce8					tokenBuffer:
>0ce8							.fill 	256
.0de8					tokenBufferIndex:
>0de8							.fill 	1
.38aa					Tokenise:
.38aa	20 24 39	jsr $3924			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.38ad					TokeniseASCIIZ:
.38ad	20 35 39	jsr $3935			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.38b0	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.38b2	8d e8 0d	sta $0de8			sta 	tokenBufferIndex
.38b5	a8		tay				tay 								; start pointer
.38b6	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.38b8	8d e8 0c	sta $0ce8			sta 	tokenBuffer
.38bb					_TokLoop:
.38bb	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.38bd	f0 46		beq $3905			beq 	_TokExit 					; if zero, then exit.
.38bf	c8		iny				iny 								; skip over spaces.
.38c0	c9 20		cmp #$20			cmp 	#" "
.38c2	f0 f7		beq $38bb			beq 	_TokLoop
.38c4	88		dey				dey 								; point back to character.
.38c5	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.38c7	f0 18		beq $38e1			beq 	_TokHexConst
.38c9	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.38cb	f0 23		beq $38f0			beq 	_TokQString
.38cd	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.38cf	b0 26		bcs $38f7			bcs 	_TokPunctuation
.38d1	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.38d3	b0 29		bcs $38fe			bcs 	_TokIdentifier
.38d5	c9 3a		cmp #$3a			cmp 	#"9"+1
.38d7	b0 1e		bcs $38f7			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.38d9	c9 30		cmp #$30			cmp 	#"0"
.38db	90 1a		bcc $38f7			bcc 	_TokPunctuation 			; < 0, punctuation.
.38dd	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.38df	d0 08		bne $38e9			bne 	_TokConst
.38e1					_TokHexConst:
.38e1	c8		iny				iny									; consume token.
.38e2	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.38e4	20 0b 39	jsr $390b			jsr 	TokenWrite
.38e7	a9 10		lda #$10			lda 	#16
.38e9					_TokConst:
.38e9	20 f3 39	jsr $39f3			jsr 	TokeniseInteger
.38ec	b0 cd		bcs $38bb			bcs 	_TokLoop
.38ee	90 18		bcc $3908			bcc 	_TokFail
.38f0					_TokQString:
.38f0	20 89 3a	jsr $3a89			jsr 	TokeniseString
.38f3	b0 c6		bcs $38bb			bcs 	_TokLoop
.38f5	90 11		bcc $3908			bcc 	_TokFail
.38f7					_TokPunctuation:
.38f7	20 68 3a	jsr $3a68			jsr 	TokenisePunctuation
.38fa	b0 bf		bcs $38bb			bcs 	_TokLoop
.38fc	90 0a		bcc $3908			bcc 	_TokFail
.38fe					_TokIdentifier:
.38fe	20 64 39	jsr $3964			jsr 	TokeniseIdentifier
.3901	b0 b8		bcs $38bb			bcs 	_TokLoop
.3903	90 03		bcc $3908			bcc 	_TokFail
.3905					_TokExit:
.3905	a9 01		lda #$01			lda 	#1
.3907	60		rts				rts
.3908					_TokFail:
.3908	a9 00		lda #$00			lda 	#0
.390a	60		rts				rts
.390b					TokenWrite:
.390b	85 32		sta $32				sta 	tempShort 					; save XA
.390d	48		pha				pha
.390e	8a		txa				txa
.390f	48		pha				pha
.3910	a5 32		lda $32				lda 	tempShort
.3912	ae e8 0d	ldx $0de8			ldx 	tokenBufferIndex 			; geet index
.3915	9d e8 0c	sta $0ce8,x			sta 	tokenBuffer,x 				; write byte to buffer
.3918	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.391a	9d e9 0c	sta $0ce9,x			sta 	tokenBuffer+1,x
.391d	ee e8 0d	inc $0de8			inc 	tokenBufferIndex 			; bump index
.3920	68		pla				pla
.3921	aa		tax				tax
.3922	68		pla				pla
.3923	60		rts				rts
.3924					TokeniseMakeASCIIZ:
.3924	a0 00		ldy #$00			ldy 	#0							; get length of string.
.3926	b1 28		lda ($28),y			lda 	(codePtr),y
.3928	a8		tay				tay
.3929	c8		iny				iny 								; +1, the NULL goes here.
.392a	a9 00		lda #$00			lda 	#0
.392c	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.392e	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.3930	d0 02		bne $3934			bne 	_TMKAExit
.3932	e6 29		inc $29				inc 	codePtr+1
.3934					_TMKAExit:
.3934	60		rts				rts
.3935					TokeniseFixCase:
.3935	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.3937	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.3939					_TFCFlipQ:
.3939	8a		txa				txa
.393a	49 01		eor #$01			eor 	#1
.393c	aa		tax				tax
.393d					_TFCLoop:
.393d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.393f	f0 22		beq $3963			beq 	_TFCExit 					; if zero exit.
.3941	c9 20		cmp #$20			cmp 	#32 						; if control
.3943	90 1a		bcc $395f			bcc 	_TFCControl
.3945	c8		iny				iny 								; preconsume
.3946	c9 22		cmp #$22			cmp 	#'"'
.3948	f0 ef		beq $3939			beq 	_TFCFlipQ
.394a	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.394c	90 ef		bcc $393d			bcc 	_TFCLoop
.394e	c9 7b		cmp #$7b			cmp 	#"z"+1
.3950	b0 eb		bcs $393d			bcs 	_TFCLoop
.3952	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.3954	d0 e7		bne $393d			bne 	_TFCLoop
.3956	88		dey				dey
.3957	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.3959					_TFCWrite:
.3959	91 28		sta ($28),y			sta 	(codePtr),y
.395b	c8		iny				iny
.395c	4c 3d 39	jmp $393d			jmp 	_TFCLoop
.395f					_TFCControl:
.395f	a9 20		lda #$20			lda 	#" "
.3961	d0 f6		bne $3959			bne 	_TFCWrite
.3963					_TFCExit:
.3963	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.3964					TokeniseIdentifier:
.3964	a2 00		ldx #$00			ldx 	#0
.3966					_TICopyID:
.3966	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.3968	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.396a	f0 16		beq $3982			beq 	_TICopyUnderscore
.396c	c9 2e		cmp #$2e			cmp 	#"."
.396e	f0 14		beq $3984			beq 	_TICopyIn
.3970	c9 30		cmp #$30			cmp 	#"0"
.3972	90 1b		bcc $398f			bcc 	_TIEndCopy
.3974	c9 3a		cmp #$3a			cmp 	#"9"+1
.3976	90 0c		bcc $3984			bcc 	_TICopyIn
.3978	c9 41		cmp #$41			cmp 	#"A"
.397a	90 13		bcc $398f			bcc 	_TIEndCopy
.397c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.397e	b0 0f		bcs $398f			bcs		_TIEndCopy
.3980	90 02		bcc $3984			bcc 	_TICopyIn
.3982					_TICopyUnderScore:
.3982	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3984					_TICopyIn:
.3984	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3985	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3988	8e cf 0a	stx $0acf			stx 	convertBuffer
.398b	c8		iny				iny 								; next character
.398c	4c 66 39	jmp $3966			jmp 	_TICopyID 					; loop round
.398f					_TIEndCopy:
.398f	a9 24		lda #$24			lda 	#"$"
.3991	20 e6 39	jsr $39e6			jsr 	TIDCheckCopy
.3994	a9 23		lda #$23			lda 	#"#"
.3996	20 e6 39	jsr $39e6			jsr 	TIDCheckCopy
.3999	a9 28		lda #$28			lda 	#"("
.399b	20 e6 39	jsr $39e6			jsr 	TIDCheckCopy
.399e	20 1b 38	jsr $381b			jsr 	TokenSearch 				; is it a token
.39a1	b0 41		bcs $39e4			bcs 	_TIExit 					; if so, then exit.
.39a3	98		tya				tya
.39a4	48		pha				pha
.39a5	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.39a7	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.39aa	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.39ad	c9 28		cmp #$28			cmp 	#"("
.39af	d0 02		bne $39b3			bne 	_TINotArray
.39b1	ca		dex				dex 								; yes, remove it and convert to array.
.39b2	c8		iny				iny
.39b3					_TINotArray:
.39b3	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.39b6	c9 24		cmp #$24			cmp 	#"$"
.39b8	d0 03		bne $39bd			bne 	_TINotString
.39ba	ca		dex				dex
.39bb	c8		iny				iny
.39bc	c8		iny				iny
.39bd					_TINotString:
.39bd	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.39c0	c9 23		cmp #$23			cmp 	#"#"
.39c2	d0 05		bne $39c9			bne 	_TINotFloat
.39c4	ca		dex				dex
.39c5	c8		iny				iny
.39c6	c8		iny				iny
.39c7	c8		iny				iny
.39c8	c8		iny				iny
.39c9					_TINotFloat:
.39c9	e8		inx				inx 								; write end marker for identifier.
.39ca	98		tya				tya
.39cb	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.39ce	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.39d1	a2 01		ldx #$01			ldx 	#1
.39d3					_TIOutput:
.39d3	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.39d6	29 3f		and #$3f			and 	#$3F
.39d8	48		pha				pha
.39d9	20 0b 39	jsr $390b			jsr 	TokenWrite
.39dc	e8		inx				inx
.39dd	68		pla				pla
.39de	c9 3a		cmp #$3a			cmp 	#$3A
.39e0	90 f1		bcc $39d3			bcc 	_TIOutput
.39e2	68		pla				pla
.39e3	a8		tay				tay
.39e4					_TIExit:
.39e4	38		sec				sec 								; this can't fail.
.39e5	60		rts				rts
.39e6					TIDCheckCopy:
.39e6	d1 28		cmp ($28),y			cmp 	(codePtr),y
.39e8	d0 08		bne $39f2			bne 	_TIDCCExit
.39ea	e8		inx				inx
.39eb	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.39ee	8e cf 0a	stx $0acf			stx 	convertBuffer
.39f1	c8		iny				iny
.39f2					_TIDCCExit:
.39f2	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.39f3					TokeniseInteger:
.39f3	85 2c		sta $2c				sta 	temp1 						; save base
.39f5	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.39f7	8e cf 0a	stx $0acf			stx 	convertBuffer
.39fa					_TIGetChars:
.39fa	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.39fc	c9 30		cmp #$30			cmp 	#"0"
.39fe	90 1f		bcc $3a1f			bcc 	_TIEndGet
.3a00	c9 3a		cmp #$3a			cmp 	#"9"+1
.3a02	90 10		bcc $3a14			bcc 	_TIHaveChar
.3a04	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3a06	c9 0a		cmp #$0a			cmp 	#10
.3a08	f0 15		beq $3a1f			beq 	_TIEndGet
.3a0a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.3a0c	c9 41		cmp #$41			cmp 	#"A"
.3a0e	90 0f		bcc $3a1f			bcc 	_TIEndGet
.3a10	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3a12	b0 0b		bcs $3a1f			bcs 	_TIEndGet
.3a14					_TIHaveChar:
.3a14	e8		inx				inx 								; write into buffer.
.3a15	8e cf 0a	stx $0acf			stx 	convertBuffer
.3a18	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3a1b	c8		iny				iny 								; next char
.3a1c	4c fa 39	jmp $39fa			jmp 	_TIGetChars
.3a1f					_TIEndGet:
.3a1f	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.3a21	f0 1c		beq $3a3f			beq 	_TIFail
.3a23	98		tya				tya
.3a24	48		pha				pha
.3a25	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3a27	85 2a		sta $2a				sta 	temp0
.3a29	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3a2b	85 2b		sta $2b				sta 	1+(temp0)
.3a2d	a9 00		lda #$00			lda 	#0 							; stack level 0
.3a2f	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.3a31	a2 18		ldx #$18		ldx	#24
.3a33	20 2b 33	jsr $332b		jsr	mainHandler
.3a36	68		pla				pla
.3a37	a8		tay				tay
.3a38	90 05		bcc $3a3f			bcc 	_TIFail 					; didn't convert.
.3a3a	20 41 3a	jsr $3a41			jsr 	TIRecursiveOut 				; recursive output ?
.3a3d	38		sec				sec
.3a3e	60		rts				rts
.3a3f					_TIFail:
.3a3f	18		clc				clc
.3a40	60		rts				rts
.3a41					TIRecursiveOut:
.3a41	a5 50		lda $50				lda 	esInt0 						; get value to output after possible recursion
.3a43	29 3f		and #$3f			and 	#$3F
.3a45	09 40		ora #$40			ora 	#$40
.3a47	48		pha				pha
.3a48	a5 50		lda $50				lda 	esInt0 						; are we recursing ?
.3a4a	29 c0		and #$c0			and 	#$C0
.3a4c	05 58		ora $58				ora 	esInt1
.3a4e	05 60		ora $60				ora 	esInt2
.3a50	05 68		ora $68				ora 	esInt3
.3a52	f0 10		beq $3a64			beq 	_TIRONoRecursion
.3a54	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.3a56					_TIROShift:
.3a56	46 68		lsr $68				lsr 	esInt3
.3a58	66 60		ror $60				ror 	esInt2
.3a5a	66 58		ror $58				ror 	esInt1
.3a5c	66 50		ror $50				ror 	esInt0
.3a5e	ca		dex				dex
.3a5f	d0 f5		bne $3a56			bne 	_TIROShift
.3a61	20 41 3a	jsr $3a41			jsr 	TIRecursiveOut 				; call recursively
.3a64					_TIRONoRecursion:
.3a64	68		pla				pla 								; pull the old bit.
.3a65	4c 0b 39	jmp $390b			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.3a68					TokenisePunctuation:
.3a68	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.3a6a	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.3a6d	c8		iny				iny
.3a6e	b1 28		lda ($28),y			lda 	(codePtr),y
.3a70	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.3a73	c8		iny				iny 								; Y is +2
.3a74	a9 02		lda #$02			lda 	#2 							; 2 character string.
.3a76	8d cf 0a	sta $0acf			sta 	convertBuffer
.3a79	20 1b 38	jsr $381b			jsr 	TokenSearch 				; search for that token.
.3a7c	b0 0a		bcs $3a88			bcs 	_TIFound
.3a7e	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3a81	88		dey				dey 								; Y is now +1
.3a82	20 1b 38	jsr $381b			jsr 	TokenSearch 				; search for that token.
.3a85	b0 01		bcs $3a88			bcs 	_TIFound
.3a87	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3a88					_TIFound:
.3a88	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3a89					TokeniseString:
.3a89	c8		iny				iny 								; skip opening quote
.3a8a	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.3a8c	84 2a		sty $2a				sty 	temp0 						; save start.
.3a8e					_TSGetLength:
.3a8e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3a90	f0 21		beq $3ab3			beq 	_TSFail						; end of line, fail
.3a92	c8		iny				iny
.3a93	e8		inx				inx
.3a94	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3a96	d0 f6		bne $3a8e			bne 	_TSGetLength
.3a98	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.3a9a	20 0b 39	jsr $390b			jsr 	TokenWrite
.3a9d	8a		txa				txa 								; output length
.3a9e	20 0b 39	jsr $390b			jsr 	TokenWrite
.3aa1	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3aa3	e0 00		cpx #$00			cpx 	#0 							; check ended
.3aa5	f0 09		beq $3ab0			beq 	_TSExit
.3aa7					_TSOutput:
.3aa7	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3aa9	20 0b 39	jsr $390b			jsr 	TokenWrite
.3aac	c8		iny				iny
.3aad	ca		dex				dex
.3aae	d0 f7		bne $3aa7			bne 	_TSOutput
.3ab0					_TSExit:
.3ab0	c8		iny				iny 								; skip ending quote
.3ab1	38		sec				sec 								; return CS.
.3ab2	60		rts				rts
.3ab3					_TSFail:
.3ab3	18		clc				clc
.3ab4	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3ab5					TokenTableAddress:
>3ab5	bd 3a						.word 	Group0Text
>3ab7	86 3c						.word 	Group1Text
>3ab9	d3 3d						.word 	Group2Text
>3abb	f3 3d						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.3abd					Group0Text:
>3abd	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3ac1	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3ac4	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3ac8	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>3acb	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>3ace	01 be					.byte $01,$be                          ; $8b >
>3ad0	01 bc					.byte $01,$bc                          ; $8c <
>3ad2	01 bd					.byte $01,$bd                          ; $8d =
>3ad4	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3ad7	01 ab					.byte $01,$ab                          ; $8f +
>3ad9	01 ad					.byte $01,$ad                          ; $90 -
>3adb	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>3ade	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3ae1	01 aa					.byte $01,$aa                          ; $93 *
>3ae3	01 af					.byte $01,$af                          ; $94 /
>3ae5	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3ae9	01 de					.byte $01,$de                          ; $96 ^
>3aeb	01 a1					.byte $01,$a1                          ; $97 !
>3aed	01 bf					.byte $01,$bf                          ; $98 ?
>3aef	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3af6	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>3afc	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3b00	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3b03	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>3b0b	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3b11	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3b16	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>3b1b	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>3b20	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>3b26	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>3b2e	01 a8					.byte $01,$a8                          ; $a4 (
>3b30	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>3b35	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>3b3a	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>3b3f	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>3b47	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>3b4c	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>3b51	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>3b57	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>3b5c	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>3b61	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>3b66	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>3b6d	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>3b74	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>3b79	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3b80	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3b87	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>3b8d	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3b94	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>3b9a	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3ba2	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3ba8	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>3bad	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3bb3	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3bb9	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>3bbf	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3bc4	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3bc9	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3bd0	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3bd7	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>3bdf	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3be7	01 c0					.byte $01,$c0                          ; $c3 @
>3be9	01 fe					.byte $01,$fe                          ; $c4 ~
>3beb	01 a6					.byte $01,$a6                          ; $c5 &
>3bed	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3bf3	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>3bfb	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>3bff	01 a9					.byte $01,$a9                          ; $c9 )
>3c01	01 ba					.byte $01,$ba                          ; $ca :
>3c03	01 ac					.byte $01,$ac                          ; $cb ,
>3c05	01 bb					.byte $01,$bb                          ; $cc ;
>3c07	01 a7					.byte $01,$a7                          ; $cd '
>3c09	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>3c0c	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3c11	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3c16	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>3c1c	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>3c20	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>3c24	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>3c28	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>3c2e	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>3c33	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>3c37	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>3c3d	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>3c42	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>3c48	02 41 d4				.byte $02,$41,$d4                      ; $db at
>3c4b	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>3c50	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>3c57	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>3c5c	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>3c61	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>3c66	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>3c6a	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>3c70	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>3c74	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>3c7b	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3c81	01 ae					.byte $01,$ae                          ; $e6 .
>3c83	01 a3					.byte $01,$a3                          ; $e7 #
>3c85	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3c86					Group1Text:
>3c86	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3c8c	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3c91	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3c96	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3c9b	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3c9f	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3ca3	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3ca8	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3cb0	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3cb4	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3cb9	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3cbe	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>3cc3	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>3cc9	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>3cd0	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>3cd4	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>3cda	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>3cde	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>3ce2	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>3ce6	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>3cea	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>3cee	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>3cf2	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>3cf6	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>3cfa	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>3cfe	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>3d02	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>3d06	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>3d0a	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>3d0e	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>3d12	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>3d16	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>3d1a	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>3d1e	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>3d22	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>3d26	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>3d2a	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>3d2e	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>3d32	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>3d36	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>3d3a	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>3d3e	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>3d42	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>3d46	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>3d4a	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>3d4e	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>3d52	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>3d56	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>3d5a	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>3d5e	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>3d62	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>3d66	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>3d6a	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>3d6e	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>3d72	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>3d76	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>3d7a	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>3d7e	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>3d82	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>3d86	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>3d8a	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>3d8e	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>3d92	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>3d96	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>3d9a	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>3d9e	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>3da2	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>3da6	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>3daa	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>3dae	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>3db2	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>3db6	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>3dba	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>3dbe	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>3dc2	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>3dc6	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>3dca	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>3dce	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>3dd2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3dd3					Group2Text:
>3dd3	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3dd9	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3ddf	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3de5	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>3dea	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>3df2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3df3					Group3Text:
>3df3	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3dfa	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3e01	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3e02					tokeniserHandler:
.3e02	7c 05 3e	jmp ($3e05,x)			jmp 	(tokeniserVectors,x)
.3e05					tokeniserVectors:
>3e05	11 3e					.word _DummyControlHandler ; index 0
>3e07	08 36					.word Detokenise           ; index 2
>3e09	fc 35					.word ListLine             ; index 4
>3e0b	8a 38					.word TokTest              ; index 6
>3e0d	aa 38					.word Tokenise             ; index 8
>3e0f	ad 38					.word TokeniseASCIIZ       ; index 10
.3e11					_DummyControlHandler:
.3e11	60		rts			rts

;******  Return to file: basic.asm

.3e12					section_end_tokeniser:
.3e12					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.3e12					AccessArray:
.3e12	8a		txa				txa
.3e13	48		pha				pha
.3e14	e8		inx				inx
.3e15	20 de 3e	jsr $3ede			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.3e18	68		pla				pla
.3e19	aa		tax				tax
.3e1a	b5 50		lda $50,x			lda 	esInt0,x 					; restore address to follow in temp0.
.3e1c	85 2a		sta $2a				sta 	temp0
.3e1e	b5 58		lda $58,x			lda 	esInt1,x
.3e20	85 2b		sta $2b				sta 	temp0+1
.3e22	8a		txa				txa
.3e23	48		pha				pha
.3e24	98		tya				tya
.3e25	48		pha				pha
.3e26					_AAFollow:
.3e26	a0 00		ldy #$00			ldy 	#0
.3e28	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e2a	48		pha				pha
.3e2b	c8		iny				iny
.3e2c	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e2e	85 2b		sta $2b				sta 	temp0+1
.3e30	68		pla				pla
.3e31	85 2a		sta $2a				sta 	temp0
.3e33	e8		inx				inx 								; advance to next stack slot.
.3e34	a0 00		ldy #$00			ldy 	#0
.3e36	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.3e38	d5 50		cmp $50,x			cmp 	esInt0,x
.3e3a	c8		iny				iny
.3e3b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.3e3d	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.3e3f	29 7f		and #$7f			and 	#$7F
.3e41	f5 58		sbc $58,x			sbc 	esInt1,x
.3e43	90 50		bcc $3e95			bcc 	_AABadIndex 				; failed on index if max index < required.
.3e45	18		clc				clc
.3e46	a5 2a		lda $2a				lda 	temp0
.3e48	69 02		adc #$02			adc 	#2
.3e4a	85 2a		sta $2a				sta 	temp0
.3e4c	90 02		bcc $3e50			bcc 	_AANoCarry
.3e4e	e6 2b		inc $2b				inc 	temp0+1
.3e50					_AANoCarry:
.3e50	b5 50		lda $50,x			lda 	esInt0,x
.3e52	85 2e		sta $2e				sta 	temp2
.3e54	b5 58		lda $58,x			lda 	esInt1,x
.3e56	85 2f		sta $2f				sta 	temp2+1
.3e58	ac eb 0d	ldy $0deb			ldy 	varType
.3e5b	b9 38 3f	lda $3f38,y			lda 	CAActualSize-$3A,y
.3e5e	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3e60	30 02		bmi $3e64			bmi 	_AANotPointer
.3e62	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3e64					_AANotPointer:
.3e64	20 e2 3f	jsr $3fe2			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.3e67	18		clc				clc
.3e68	a5 2a		lda $2a				lda 	temp0
.3e6a	65 2e		adc $2e				adc 	temp2
.3e6c	85 2a		sta $2a				sta 	temp0
.3e6e	a5 2b		lda $2b				lda 	temp0+1
.3e70	65 2f		adc $2f				adc 	temp2+1
.3e72	85 2b		sta $2b				sta 	temp0+1
.3e74	b5 49		lda $49,x			lda 	esType+1,x
.3e76	30 07		bmi $3e7f			bmi 	_AAUsedAllIndices
.3e78	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.3e7a	10 14		bpl $3e90			bpl 	_AABadDepth 				; no, too many indexes.
.3e7c	4c 26 3e	jmp $3e26			jmp 	_AAFollow 					; otherwise follow them.
.3e7f					_AAUsedAllIndices:
.3e7f	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.3e81	30 0d		bmi $3e90			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.3e83	68		pla				pla
.3e84	a8		tay				tay
.3e85	68		pla				pla
.3e86	aa		tax				tax
.3e87	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.3e89	95 50		sta $50,x			sta 	esInt0,x
.3e8b	a5 2b		lda $2b				lda 	temp0+1
.3e8d	95 58		sta $58,x			sta 	esInt1,x
.3e8f	60		rts				rts
.3e90					_AABadDepth:
.3e90	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.3e92	20 18 15	jsr $1518		jsr	errorHandler
.3e95					_AABadIndex:
.3e95	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3e97	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0de9					elementSize:
>0de9							.fill	 1
.3e9a					CreateArray:
.3e9a	20 71 40	jsr $4071			jsr 	AccessSetup 				; set up the basic stuff.
.3e9d	ad eb 0d	lda $0deb			lda 	varType 					; is the variable type an array
.3ea0	4a		lsr a				lsr 	a
.3ea1	90 36		bcc $3ed9			bcc 	CANotArray 					; no, cause an error.
.3ea3	20 7a 41	jsr $417a			jsr 	FindVariable 				; does the variable exist already
.3ea6	b0 2c		bcs $3ed4			bcs 	CAFound 					; cannot redefine it.
.3ea8	20 ae 40	jsr $40ae			jsr 	CreateVariable 				; create the variable entry.
.3eab	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3ead	48		pha				pha
.3eae	a5 2b		lda $2b				lda 	temp0+1
.3eb0	48		pha				pha
.3eb1	a2 00		ldx #$00			ldx 	#0
.3eb3	20 de 3e	jsr $3ede			jsr 	GetArrayDimensions 			; get the array dimensions
.3eb6	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.3eb8	20 0e 3f	jsr $3f0e			jsr 	CreateArrayLevel 			; level to YA
.3ebb	aa		tax				tax 								; level now in YX
.3ebc	68		pla				pla 								; get address back to temp0 to write.
.3ebd	85 2b		sta $2b				sta 	temp0+1
.3ebf	68		pla				pla
.3ec0	85 2a		sta $2a				sta 	temp0
.3ec2	98		tya				tya 								; write YX there.
.3ec3	a0 06		ldy #$06			ldy 	#6
.3ec5	91 2a		sta ($2a),y			sta 	(temp0),y
.3ec7	88		dey				dey
.3ec8	8a		txa				txa
.3ec9	91 2a		sta ($2a),y			sta 	(temp0),y
.3ecb	ac ec 0d	ldy $0dec			ldy 	varEnd 						; restore Y and exit.
.3ece	60		rts				rts
.3ecf					CASize:
.3ecf	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3ed1	20 18 15	jsr $1518		jsr	errorHandler
.3ed4					CAFound:
.3ed4	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3ed6	20 18 15	jsr $1518		jsr	errorHandler
.3ed9					CANotArray:
.3ed9	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3edb	20 18 15	jsr $1518		jsr	errorHandler
.3ede					GetArrayDimensions:
.3ede	ad eb 0d	lda $0deb			lda 	varType 					; push variable type on the stack.
.3ee1	48		pha				pha
.3ee2	ac ec 0d	ldy $0dec			ldy 	varEnd
.3ee5					_CAGetDimensions:
.3ee5	8a		txa				txa 								; get the next level
.3ee6	a2 0a		ldx #$0a		ldx	#10
.3ee8	20 2b 33	jsr $332b		jsr	mainHandler
.3eeb	aa		tax				tax
.3eec	b5 58		lda $58,x			lda 	esInt1,x 					; index must be < 8192
.3eee	29 e0		and #$e0			and 	#$E0
.3ef0	15 60		ora $60,x			ora 	esInt2,x
.3ef2	15 68		ora $68,x			ora 	esInt3,x
.3ef4	d0 d9		bne $3ecf			bne 	CASize
.3ef6	e8		inx				inx 								; next level.
.3ef7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.3ef9	c8		iny				iny
.3efa	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.3efc	f0 e7		beq $3ee5			beq 	_CAGetDimensions
.3efe	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.3f00	d0 cd		bne $3ecf			bne 	CASize
.3f02	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.3f04	95 48		sta $48,x			sta 	esType,x 					; dimensions there are.
.3f06	68		pla				pla 								; restore the variable type ($3A-$3F)
.3f07	8d eb 0d	sta $0deb			sta 	varType
.3f0a	8c ec 0d	sty $0dec			sty 	varEnd 						; save exit Y value, after dimensions
.3f0d	60		rts				rts
.3f0e					CreateArrayLevel:
.3f0e	ac eb 0d	ldy $0deb			ldy 	varType
.3f11	b9 38 3f	lda $3f38,y			lda 	CAActualSize-$3A,y
.3f14	8d e9 0d	sta $0de9			sta 	elementSize 				; get element size this level.
.3f17	b4 49		ldy $49,x			ldy 	esType+1,x 					; is it top level
.3f19	30 05		bmi $3f20			bmi 	_CANotPointer
.3f1b	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.3f1d	8d e9 0d	sta $0de9			sta 	elementSize
.3f20					_CANotPointer:
.3f20	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.3f22	85 2a		sta $2a				sta 	temp0
.3f24	48		pha				pha
.3f25	a5 36		lda $36				lda 	lowMemory+1
.3f27	85 2b		sta $2b				sta 	temp0+1
.3f29	48		pha				pha
.3f2a	20 ab 3f	jsr $3fab			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.3f2d	a0 00		ldy #$00			ldy 	#0
.3f2f	b5 50		lda $50,x			lda 	esInt0,x
.3f31	91 2a		sta ($2a),y			sta 	(temp0),y
.3f33	c8		iny				iny
.3f34	b5 58		lda $58,x			lda 	esInt1,x
.3f36	91 2a		sta ($2a),y			sta 	(temp0),y
.3f38	b5 49		lda $49,x			lda 	esType+1,x 					; do we have another level ?
.3f3a	30 06		bmi $3f42			bmi 	_CALNotLast
.3f3c	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.3f3e	09 80		ora #$80			ora 	#$80
.3f40	91 2a		sta ($2a),y			sta 	(temp0),y
.3f42					_CALNotLast:
.3f42	a9 02		lda #$02			lda 	#2
.3f44	20 68 3f	jsr $3f68			jsr 	_CALAddTemp0
.3f47	b5 50		lda $50,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.3f49	95 60		sta $60,x			sta 	esInt2,x 					; count.
.3f4b	b5 58		lda $58,x			lda 	esInt1,x
.3f4d	95 68		sta $68,x			sta 	esInt3,x
.3f4f					_CALClear:
.3f4f	20 78 3f	jsr $3f78			jsr 	EraseOneElement
.3f52	ad e9 0d	lda $0de9			lda 	elementSize 				; move to next element
.3f55	20 68 3f	jsr $3f68			jsr 	_CALAddTemp0
.3f58	b5 60		lda $60,x			lda 	esInt2,x 					; decrement counter
.3f5a	d0 02		bne $3f5e			bne 	_CALNoBorrow
.3f5c	d6 68		dec $68,x			dec 	esInt3,x
.3f5e					_CALNoBorrow:
.3f5e	d6 60		dec $60,x			dec 	esInt2,x
.3f60	b5 68		lda $68,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.3f62	10 eb		bpl $3f4f			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.3f64	68		pla				pla 								; restore the start of this into YA.
.3f65	a8		tay				tay
.3f66	68		pla				pla
.3f67	60		rts				rts
.3f68					_CALAddTemp0:
.3f68	18		clc				clc
.3f69	65 2a		adc $2a				adc 	temp0
.3f6b	85 2a		sta $2a				sta 	temp0
.3f6d	90 02		bcc $3f71			bcc 	_CALANoCarry
.3f6f	e6 2b		inc $2b				inc 	temp0+1
.3f71					_CALANoCarry:
.3f71	60		rts				rts
.3f72					CAActualSize:
>3f72	04 04						.byte 	VarISize,VarISize
>3f74	02 02						.byte 	VarSSize,VarSSize
>3f76	06 06						.byte 	VarFSize,VarFSize
.3f78					EraseOneElement:
.3f78	b5 49		lda $49,x			lda 	esType+1,x 					; is this a list of sub arrays
.3f7a	10 09		bpl $3f85			bpl 	_EOESubArray
.3f7c	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.3f7e	ad eb 0d	lda $0deb			lda 	varType
.3f81	20 18 41	jsr $4118			jsr 	ZeroTemp0Y
.3f84	60		rts				rts
.3f85					_EOESubArray:
.3f85	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.3f87	48		pha				pha
.3f88	a5 2b		lda $2b				lda 	temp0+1
.3f8a	48		pha				pha
.3f8b	ad e9 0d	lda $0de9			lda 	elementSize 				; save element size
.3f8e	48		pha				pha
.3f8f	e8		inx				inx 								; create at next level
.3f90	20 0e 3f	jsr $3f0e			jsr 	CreateArrayLevel
.3f93	ca		dex				dex
.3f94	85 32		sta $32				sta 	tempShort 					; save A
.3f96	68		pla				pla  								; restore element size.
.3f97	8d e9 0d	sta $0de9			sta 	elementSize
.3f9a	68		pla				pla 								; restore temp0, which is where this new array level goes.
.3f9b	85 2b		sta $2b				sta 	temp0+1
.3f9d	68		pla				pla
.3f9e	85 2a		sta $2a				sta 	temp0
.3fa0	98		tya				tya 								; store Y/A there
.3fa1	a0 01		ldy #$01			ldy 	#1
.3fa3	91 2a		sta ($2a),y			sta 	(temp0),y
.3fa5	a5 32		lda $32				lda 	tempShort
.3fa7	88		dey				dey
.3fa8	91 2a		sta ($2a),y			sta 	(temp0),y
.3faa	60		rts				rts
.3fab					AllocateArraySpace:
.3fab	18		clc				clc 								; element count + 1 => temp2.
.3fac	b5 50		lda $50,x			lda 	esInt0,x
.3fae	69 01		adc #$01			adc 	#1
.3fb0	85 2e		sta $2e				sta 	temp2
.3fb2	b5 58		lda $58,x			lda 	esInt1,x
.3fb4	69 00		adc #$00			adc 	#0
.3fb6	85 2f		sta $2f				sta 	temp2+1
.3fb8	ad e9 0d	lda $0de9			lda 	elementSize 				; bytes per element
.3fbb	20 e2 3f	jsr $3fe2			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.3fbe	18		clc				clc 								; add 2 for 'max element' byte.
.3fbf	a5 2e		lda $2e				lda 	temp2
.3fc1	69 02		adc #$02			adc 	#2
.3fc3	85 2e		sta $2e				sta 	temp2
.3fc5	90 02		bcc $3fc9			bcc 	_AASNoCarry
.3fc7	e6 2f		inc $2f				inc 	temp2+1
.3fc9					_AASNoCarry:
.3fc9	18		clc				clc 								; add to low memory, allocating space.
.3fca	a5 35		lda $35				lda 	lowMemory
.3fcc	65 2e		adc $2e				adc 	temp2
.3fce	85 35		sta $35				sta 	lowMemory
.3fd0	a5 36		lda $36				lda 	lowMemory+1
.3fd2	65 2f		adc $2f				adc 	temp2+1
.3fd4	85 36		sta $36				sta 	lowMemory+1
.3fd6	b0 05		bcs $3fdd			bcs 	_AASFail 					; out of memory as adding causes wrapround
.3fd8	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.3fda	b0 01		bcs $3fdd			bcs 	_AASFail
.3fdc	60		rts				rts
.3fdd					_AASFail:
.3fdd	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3fdf	20 18 15	jsr $1518		jsr	errorHandler
.3fe2					MultiplyTemp2ByA:
.3fe2	48		pha				pha
.3fe3	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.3fe5	85 30		sta $30				sta 	temp3
.3fe7	a5 2f		lda $2f				lda 	temp2+1
.3fe9	85 31		sta $31				sta 	temp3+1
.3feb	68		pla				pla
.3fec	06 2e		asl $2e				asl 	temp2 						; double it.
.3fee	26 2f		rol $2f				rol 	temp2+1
.3ff0	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3ff2	f0 15		beq $4009			beq 	_MTBAExit
.3ff4	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.3ff6	d0 0d		bne $4005			bne 	_MTBANotFloat
.3ff8	18		clc				clc 								; so this will make it x 3
.3ff9	a5 2e		lda $2e				lda 	temp2
.3ffb	65 30		adc $30				adc 	temp3
.3ffd	85 2e		sta $2e				sta 	temp2
.3fff	a5 2f		lda $2f				lda 	temp2+1
.4001	65 31		adc $31				adc 	temp3+1
.4003	85 2f		sta $2f				sta 	temp2+1
.4005					_MTBANotFloat:
.4005	06 2e		asl $2e				asl 	temp2 						; double it.
.4007	26 2f		rol $2f				rol 	temp2+1
.4009					_MTBAExit:
.4009	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0dea					varHash:
>0dea							.fill	1
.0deb					varType:
>0deb							.fill 	1
.0dec					varEnd:
>0dec							.fill 	1
.003b					hashList:
>003b							.fill 	2
.400a					AccessVariable:
.400a	aa		tax				tax 								; stack in X
.400b	c8		iny				iny									; look at second character
.400c	b1 28		lda ($28),y			lda 	(codePtr),y
.400e	88		dey				dey
.400f	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4011	d0 15		bne $4028			bne 	_AVLong 					; no, always use the hash tables.
.4013	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.4015	38		sec				sec 	 							; make it 0-25
.4016	e9 01		sbc #$01			sbc 	#1
.4018	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4019	0a		asl a				asl 	a
.401a	95 50		sta $50,x			sta 	esInt0,x
.401c	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.401e	95 58		sta $58,x			sta 	esInt1,x
.4020	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.4022	95 48		sta $48,x			sta 	esType,x
.4024	c8		iny				iny 								; skip over the variable reference in the code.
.4025	c8		iny				iny  								; (1 letter, 1 type)
.4026	8a		txa				txa 								; stack in A to return.
.4027	60		rts				rts
.4028					_AVLong:
.4028	8a		txa				txa
.4029	48		pha				pha
.402a	20 71 40	jsr $4071			jsr 	AccessSetup 				; set up the basic information we need for later
.402d	20 7a 41	jsr $417a			jsr 	FindVariable 				; does the variable exist already ?
.4030	b0 0e		bcs $4040			bcs 	_AVFound 					; yes, then its found
.4032	ad eb 0d	lda $0deb			lda 	varType 					; otherwise, is the variable type an array
.4035	4a		lsr a				lsr 	a
.4036	90 05		bcc $403d			bcc 	_AVCanCreate 				; if not, we can autocreate
.4038	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.403a	20 18 15	jsr $1518		jsr	errorHandler
.403d					_AVCanCreate:
.403d	20 ae 40	jsr $40ae			jsr 	CreateVariable 				; variable does not exist, create it.
.4040					_AVFound:
.4040	68		pla				pla
.4041	aa		tax				tax
.4042	18		clc				clc 								; copy temp0 (variable record address)
.4043	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.4045	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.4047	95 50		sta $50,x			sta 	esInt0,x
.4049	a5 2b		lda $2b				lda 	temp0+1
.404b	69 00		adc #$00			adc 	#0
.404d	95 58		sta $58,x			sta 	esInt1,x
.404f	a9 00		lda #$00			lda 	#0
.4051	95 60		sta $60,x			sta 	esInt2,x
.4053	95 68		sta $68,x			sta 	esInt3,x
.4055	ac eb 0d	ldy $0deb			ldy 	varType 					; get the type ID from the type.
.4058	b9 31 40	lda $4031,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.405b	95 48		sta $48,x			sta 	esType,x
.405d	ac ec 0d	ldy $0dec			ldy 	varEnd 						; restore Y
.4060	ad eb 0d	lda $0deb			lda 	VarType 					; get variable type, put LSB into C
.4063	4a		lsr a				lsr 	a
.4064	90 03		bcc $4069			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.4066	20 12 3e	jsr $3e12			jsr 	AccessArray 				; array lookup. if LSB was set.
.4069					_AVNotArray:
.4069	8a		txa				txa 								; return stack in A and return
.406a	60		rts				rts
.406b					_AVTypeTable:
>406b	80 80						.byte 	$80,$80						; integer
>406d	c0 c0						.byte 	$C0,$C0 					; string
>406f	81 81						.byte 	$81,$81 					; float
.4071					AccessSetup:
.4071	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.4073	8d ea 0d	sta $0dea			sta 	varHash
.4076	98		tya				tya
.4077	48		pha				pha
.4078	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.407a	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.407c	b0 0b		bcs $4089			bcs 	_ASComplete
.407e	18		clc				clc 								; add to the hash. Might improve this.
.407f	6d ea 0d	adc $0dea			adc 	varHash
.4082	8d ea 0d	sta $0dea			sta 	varHash
.4085	c8		iny				iny 								; next character
.4086	4c 78 40	jmp $4078			jmp 	_ASLoop
.4089					_ASComplete:
.4089	8d eb 0d	sta $0deb			sta 	varType 					; save variable type byte
.408c	c8		iny				iny
.408d	8c ec 0d	sty $0dec			sty 	varEnd 						; save the ending position.
.4090	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.4091	e9 3a		sbc #$3a			sbc 	#$3A
.4093	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.4094	0a		asl a				asl 	a
.4095	0a		asl a				asl 	a
.4096	0a		asl a				asl 	a 							; 2 bytes/word
.4097	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.4099	ad ea 0d	lda $0dea			lda 	varHash 					; get hash
.409c	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.409e	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.409f	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.40a1	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.40a3	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.40a5	a9 0a		lda #$0a			lda 	#hashTables >> 8
.40a7	69 00		adc #$00			adc 	#0
.40a9	85 3c		sta $3c				sta 	hashList+1
.40ab	68		pla				pla
.40ac	a8		tay				tay
.40ad	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.40ae					CreateVariable:
.40ae	98		tya				tya 								; push Y on the stack twice.
.40af	48		pha				pha									; position in code of the new variable.
.40b0	48		pha				pha
.40b1	ae eb 0d	ldx $0deb			ldx 	varType 					; get var type 0-5 from the var type
.40b4	bd d8 40	lda $40d8,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.40b7	48		pha				pha 								; save length
.40b8	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.40ba	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.40bc	a5 36		lda $36				lda 	lowMemory+1
.40be	85 2b		sta $2b				sta 	temp0+1
.40c0	68		pla				pla 								; get length
.40c1	18		clc				clc 								; add to low memory.
.40c2	65 35		adc $35				adc 	lowMemory
.40c4	85 35		sta $35				sta 	lowMemory
.40c6	90 08		bcc $40d0			bcc 	_CVNoCarry
.40c8	e6 36		inc $36				inc 	lowMemory+1
.40ca	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.40cc	c5 34		cmp $34				cmp 	highMemory+1
.40ce	b0 3d		bcs $410d			bcs 	_CVMemory
.40d0					_CVNoCarry:
.40d0	ad ea 0d	lda $0dea			lda 	varHash 					; store hash at offset 4.
.40d3	a0 04		ldy #$04			ldy 	#4
.40d5	91 2a		sta ($2a),y			sta 	(temp0),y
.40d7	68		pla				pla 								; offset, work out where the variable name is.
.40d8	18		clc				clc
.40d9	65 28		adc $28				adc 	codePtr
.40db	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.40dd	91 2a		sta ($2a),y			sta 	(temp0),y
.40df	a5 29		lda $29				lda 	codePtr+1
.40e1	69 00		adc #$00			adc 	#0
.40e3	c8		iny				iny
.40e4	91 2a		sta ($2a),y			sta 	(temp0),y
.40e6	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.40e9	b0 03		bcs $40ee			bcs 	_CVNotImmediate
.40eb	20 50 41	jsr $4150			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.40ee					_CVNotImmediate:
.40ee	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.40f0	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.40f2	91 2a		sta ($2a),y			sta 	(temp0),y
.40f4	c8		iny				iny
.40f5	b1 3b		lda ($3b),y			lda 	(hashList),y
.40f7	91 2a		sta ($2a),y			sta 	(temp0),y
.40f9	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.40fb	91 3b		sta ($3b),y			sta 	(hashList),y
.40fd	88		dey				dey
.40fe	a5 2a		lda $2a				lda 	temp0
.4100	91 3b		sta ($3b),y			sta 	(hashList),y
.4102	ad eb 0d	lda $0deb			lda 	varType 					; type in A
.4105	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4107	20 18 41	jsr $4118			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.410a	68		pla				pla
.410b	a8		tay				tay
.410c	60		rts				rts
.410d					_CVMemory:
.410d	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.410f	20 18 15	jsr $1518		jsr	errorHandler
>4112	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4114	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4116	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4118					ZeroTemp0Y:
.4118	4a		lsr a				lsr 	a 							; bit 0 in carry
.4119	0a		asl a				asl 	a
.411a	b0 19		bcs $4135			bcs 	_ZTExit 					; we don't initialise arrays.
.411c	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.411e	f0 16		beq $4136			beq 	_ZTWriteNullString 			; write "" string
.4120	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4122	f0 22		beq $4146			beq 	_ZTWriteFloat
.4124	98		tya				tya
.4125	48		pha				pha
.4126	a9 00		lda #$00			lda 	#0
.4128	91 2a		sta ($2a),y			sta 	(temp0),y
.412a	c8		iny				iny
.412b	91 2a		sta ($2a),y			sta 	(temp0),y
.412d	c8		iny				iny
.412e	91 2a		sta ($2a),y			sta 	(temp0),y
.4130	c8		iny				iny
.4131	91 2a		sta ($2a),y			sta 	(temp0),y
.4133	68		pla				pla
.4134	a8		tay				tay
.4135					_ZTExit:
.4135	60		rts				rts
.4136					_ZTWriteNullString:
.4136	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4138	8d ce 0a	sta $0ace			sta 	NullString
.413b	a9 ce		lda #$ce			lda 	#NullString & $FF
.413d	91 2a		sta ($2a),y			sta 	(temp0),y
.413f	a9 0a		lda #$0a			lda 	#NullString >> 8
.4141	c8		iny				iny
.4142	91 2a		sta ($2a),y			sta 	(temp0),y
.4144	88		dey				dey
.4145	60		rts				rts
.4146					_ZTWriteFloat:
.4146	8a		txa				txa
.4147	48		pha				pha
.4148	a2 20		ldx #$20		ldx	#32
.414a	20 ab 1a	jsr $1aab		jsr	floatingpointHandler
.414d	68		pla				pla
.414e	aa		tax				tax
.414f	60		rts				rts
.4150					CloneVariableName:
.4150	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4152	b1 2a		lda ($2a),y			lda 	(temp0),y
.4154	85 2e		sta $2e				sta 	temp2
.4156	c8		iny				iny
.4157	b1 2a		lda ($2a),y			lda 	(temp0),y
.4159	85 2f		sta $2f				sta 	temp2+1
.415b	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.415d	91 2a		sta ($2a),y			sta 	(temp0),y
.415f	88		dey				dey
.4160	a5 35		lda $35				lda 	lowMemory
.4162	91 2a		sta ($2a),y			sta 	(temp0),y
.4164	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4166					_CVNCopy:
.4166	b1 2e		lda ($2e),y			lda		(temp2),y
.4168	91 35		sta ($35),y			sta 	(lowMemory),y
.416a	c8		iny				iny
.416b	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.416d	90 f7		bcc $4166			bcc 	_CVNCopy
.416f	98		tya				tya 								; add Y to low memory
.4170	18		clc				clc
.4171	65 35		adc $35				adc 	lowMemory
.4173	85 35		sta $35				sta 	lowMemory
.4175	90 02		bcc $4179			bcc 	_CVNNoCarry
.4177	e6 36		inc $36				inc 	lowMemory+1
.4179					_CVNNoCarry:
.4179	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.417a					FindVariable:
.417a	98		tya				tya
.417b	48		pha				pha
.417c	98		tya				tya 								; point temp2 to the actual name
.417d	18		clc				clc 								; in memory of the variable being created
.417e	65 28		adc $28				adc 	codePtr
.4180	85 2e		sta $2e				sta 	temp2
.4182	a5 29		lda $29				lda 	codePtr+1
.4184	69 00		adc #$00			adc 	#0
.4186	85 2f		sta $2f				sta 	temp2+1
.4188	a0 00		ldy #$00			ldy 	#0
.418a	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.418c	85 2a		sta $2a				sta 	temp0
.418e	a5 3c		lda $3c				lda 	hashList+1
.4190	85 2b		sta $2b				sta 	temp0+1
.4192	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4194	b1 2a		lda ($2a),y			lda 	(temp0),y
.4196	f0 2c		beq $41c4			beq 	_FVFail
.4198	aa		tax				tax
.4199	88		dey				dey		 							; get LSB
.419a	b1 2a		lda ($2a),y			lda 	(temp0),y
.419c	85 2a		sta $2a				sta 	temp0 						; update pointer.
.419e	86 2b		stx $2b				stx 	temp0+1
.41a0	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.41a2	b1 2a		lda ($2a),y			lda 	(temp0),y
.41a4	cd ea 0d	cmp $0dea			cmp 	varHash
.41a7	d0 e9		bne $4192			bne 	_FVNext 					; if not, no point in checking the name.
.41a9	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.41aa	b1 2a		lda ($2a),y			lda 	(temp0),y
.41ac	85 2d		sta $2d				sta 	temp1+1
.41ae	88		dey				dey
.41af	b1 2a		lda ($2a),y			lda 	(temp0),y
.41b1	85 2c		sta $2c				sta 	temp1
.41b3	a0 00		ldy #$00			ldy 	#0
.41b5					_FVCheck:
.41b5	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.41b7	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.41b9	d0 d7		bne $4192			bne 	_FVNext		 				; fail if different.
.41bb	c8		iny				iny
.41bc	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.41be	90 f5		bcc $41b5			bcc 	_FVCheck
.41c0	68		pla				pla
.41c1	a8		tay				tay
.41c2	38		sec				sec
.41c3	60		rts				rts
.41c4					_FVFail:
.41c4	68		pla				pla
.41c5	a8		tay				tay
.41c6	18		clc				clc
.41c7	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.41c8					HashTableReset:
.41c8	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.41ca	a9 00		lda #$00			lda 	#0
.41cc					_HTRClear:
.41cc	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.41cf	ca		dex				dex
.41d0	d0 fa		bne $41cc			bne 	_HTRClear
.41d2	60		rts				rts

;******  Return to file: variable/variable.asm

.41d3					variableHandler:
.41d3	7c d6 41	jmp ($41d6,x)			jmp 	(variableVectors,x)
.41d6					variableVectors:
>41d6	de 41					.word _DummyControlHandler ; index 0
>41d8	0a 40					.word AccessVariable       ; index 2
>41da	9a 3e					.word CreateArray          ; index 4
>41dc	c8 41					.word HashTableReset       ; index 6
.41de					_DummyControlHandler:
.41de	60		rts			rts

;******  Return to file: basic.asm

.41df					section_end_variable:
.41df					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0ded					endStorage:
>41df							.align 	256
.4200					programMemory:
>41ff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4200					section_end_footer:

;******  End of listing
