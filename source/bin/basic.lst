
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ..\source\bin\basic.lst -l ..\source\bin\basic.lbl -Wall -o ..\source\bin\stub.prg basic.asm
; Fri Apr 02 04:52:01 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$90					StackAddress = $90
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=2					VarASize = 2 								; array [address of first level]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0090					esType:	.fill 	StackSize  					; type byte (see above)
>0098					esInt0:	.fill 	StackSize 					; integer or mantissa
>00a0					esInt1:	.fill 	StackSize
>00a8					esInt2:	.fill 	StackSize
>00b0					esInt3:	.fill 	StackSize
>00b8					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>00c0					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.00c8					endOfStack:
=$98					esMant0 = esInt0 							; synonyms.
=$a0					esMant1 = esInt1
=$a8					esMant2 = esInt2
=$b0					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_ATC                      = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_IMAGE                    = $da ; image
=$db					TKW_AT                       = $db ; at
=$dc					TKW_FLIP                     = $dc ; flip
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_PERIOD                   = $e5 ; .
=$e6					TKW_FROM                     = $e6 ; from
=$e7					TKW_HASH                     = $e7 ; #
=$e8					TKW_CLEAR                    = $e8 ; clear
=$86					TKW_LOAD                     = $86 ; load
=$87					TKW_SAVE                     = $87 ; save
=$88					TKW_LIST                     = $88 ; list
=$89					TKW_NEW                      = $89 ; new
=$8a					TKW_BREAK                    = $8a ; break
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_GOTO                     = $91 ; goto
=$92					TKW_GOSUB                    = $92 ; gosub
=$93					TKW_RETURN                   = $93 ; return
=$94					TKW_ORA                      = $94 ; ora
=$95					TKW_LPARENANDRPAREN          = $95 ; (and)
=$96					TKW_EOR                      = $96 ; eor
=$97					TKW_ADC                      = $97 ; adc
=$98					TKW_STA                      = $98 ; sta
=$99					TKW_LDA                      = $99 ; lda
=$9a					TKW_CMP                      = $9a ; cmp
=$9b					TKW_SBC                      = $9b ; sbc
=$9c					TKW_ASL                      = $9c ; asl
=$9d					TKW_ROL                      = $9d ; rol
=$9e					TKW_LSR                      = $9e ; lsr
=$9f					TKW_ROR                      = $9f ; ror
=$a0					TKW_STX                      = $a0 ; stx
=$a1					TKW_LDX                      = $a1 ; ldx
=$a2					TKW_DEC                      = $a2 ; dec
=$a3					TKW_INC                      = $a3 ; inc
=$a4					TKW_STZ                      = $a4 ; stz
=$a5					TKW_BIT                      = $a5 ; bit
=$a6					TKW_STY                      = $a6 ; sty
=$a7					TKW_LDY                      = $a7 ; ldy
=$a8					TKW_CPY                      = $a8 ; cpy
=$a9					TKW_CPX                      = $a9 ; cpx
=$aa					TKW_TSB                      = $aa ; tsb
=$ab					TKW_TRB                      = $ab ; trb
=$ac					TKW_JSR                      = $ac ; jsr
=$ad					TKW_JMP                      = $ad ; jmp
=$ae					TKW_BPL                      = $ae ; bpl
=$af					TKW_BMI                      = $af ; bmi
=$b0					TKW_BVC                      = $b0 ; bvc
=$b1					TKW_BVS                      = $b1 ; bvs
=$b2					TKW_BCC                      = $b2 ; bcc
=$b3					TKW_BCS                      = $b3 ; bcs
=$b4					TKW_BNE                      = $b4 ; bne
=$b5					TKW_BEQ                      = $b5 ; beq
=$b6					TKW_BRA                      = $b6 ; bra
=$b7					TKW_BRK                      = $b7 ; brk
=$b8					TKW_PHP                      = $b8 ; php
=$b9					TKW_CLC                      = $b9 ; clc
=$ba					TKW_PLP                      = $ba ; plp
=$bb					TKW_SEC                      = $bb ; sec
=$bc					TKW_RTI                      = $bc ; rti
=$bd					TKW_PHA                      = $bd ; pha
=$be					TKW_CLI                      = $be ; cli
=$bf					TKW_PHY                      = $bf ; phy
=$c0					TKW_RTS                      = $c0 ; rts
=$c1					TKW_PLA                      = $c1 ; pla
=$c2					TKW_SEI                      = $c2 ; sei
=$c3					TKW_PLY                      = $c3 ; ply
=$c4					TKW_DEY                      = $c4 ; dey
=$c5					TKW_TXA                      = $c5 ; txa
=$c6					TKW_TYA                      = $c6 ; tya
=$c7					TKW_TXS                      = $c7 ; txs
=$c8					TKW_TAY                      = $c8 ; tay
=$c9					TKW_TAX                      = $c9 ; tax
=$ca					TKW_CLV                      = $ca ; clv
=$cb					TKW_TSX                      = $cb ; tsx
=$cc					TKW_INY                      = $cc ; iny
=$cd					TKW_DEX                      = $cd ; dex
=$ce					TKW_CLD                      = $ce ; cld
=$cf					TKW_PHX                      = $cf ; phx
=$d0					TKW_INX                      = $d0 ; inx
=$d1					TKW_NOP                      = $d1 ; nop
=$d2					TKW_SED                      = $d2 ; sed
=$d3					TKW_PLX                      = $d3 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$89					TKW_MODE                     = $89 ; mode
=$8a					TKW_PALETTE                  = $8a ; palette
=$8b					TKW_SPRITE                   = $8b ; sprite
=$8c					TKW_CLG                      = $8c ; clg
=$8d					TKW_RECT                     = $8d ; rect
=$8e					TKW_FRAME                    = $8e ; frame
=$8f					TKW_DRAW                     = $8f ; draw
=$90					TKW_TEXT                     = $90 ; text
=$91					TKW_PLOT                     = $91 ; plot
=$92					TKW_LINE                     = $92 ; line
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(
=$88					TKW_SPRITEPERIODXLPAREN      = $88 ; sprite.x(
=$89					TKW_SPRITEPERIODYLPAREN      = $89 ; sprite.y(
=$8a					TKW_HITLPAREN                = $8a ; hit(
=$8b					TKW_JOYPERIODXLPAREN         = $8b ; joy.x(
=$8c					TKW_JOYPERIODYLPAREN         = $8c ; joy.y(
=$8d					TKW_JOYPERIODBLPAREN         = $8d ; joy.b(
=$8e					TKW_CLOCKLPAREN              = $8e ; clock(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$94					TKA_GROUP1 = $94
=$9c					TKA_GROUP2 = $9c
=$ae					TKA_GROUP3 = $ae
=$b7					TKA_GROUP4 = $b7
=$d4					TKA_END4 = $d4

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_ArrayDepth = 28 ; Wrong number of array indices
=29					ErrorID_DataError = 29 ; Out of data
=30					ErrorID_Tokenise = 30 ; Cannot tokenise line
=31					ErrorID_Save = 31 ; Save failed
=32					ErrorID_Load = 32 ; Load failed
=33					ErrorID_Break = 33 ; Break
=34					ErrorID_Memory = 34 ; Out of memory
=35					ErrorID_NumStack = 35 ; Expression too complex
=36					ErrorID_Assembler = 36 ; Bad Operand/Mode
=37					ErrorID_Branch = 37 ; Branch out of range
=38					ErrorID_Label = 38 ; Label changed value
=39					ErrorID_NoSprite = 39 ; No Sprite Selected
=40					ErrorID_Hardware = 40 ; Hardware

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: extension/option_x16/x16const.inc

=64					X16MaxImages = 64 							; max # of sprite images.

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/functions/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 58 10	jmp $1058			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	79 43						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 4c		lda #$4c			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	20 26 10	jsr $1026			jsr 	InitialiseAll 				; initialise everything.
.1021	a2 02		ldx #$02		ldx	#2
.1023	20 4e 25	jsr $254e		jsr	interactionHandler

;******  Processing file: header/../generated/initialiseall.asm

.1026					InitialiseAll:
.1026	a9 00		lda #$00		lda #0
.1028	a2 00		ldx #$00		ldx	#0
.102a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.102d	a9 00		lda #$00		lda #0
.102f	a2 00		ldx #$00		ldx	#0
.1031	20 f6 14	jsr $14f6		jsr	deviceHandler
.1034	a9 00		lda #$00		lda #0
.1036	a2 00		ldx #$00		ldx	#0
.1038	20 4e 25	jsr $254e		jsr	interactionHandler
.103b	a9 00		lda #$00		lda #0
.103d	a2 00		ldx #$00		ldx	#0
.103f	20 ea 3b	jsr $3bea		jsr	mainHandler
.1042	a9 00		lda #$00		lda #0
.1044	a2 00		ldx #$00		ldx	#0
.1046	20 a7 3e	jsr $3ea7		jsr	stringHandler
.1049	a9 00		lda #$00		lda #0
.104b	a2 00		ldx #$00		ldx	#0
.104d	20 2a 47	jsr $472a		jsr	tokeniserHandler
.1050	a9 00		lda #$00		lda #0
.1052	a2 00		ldx #$00		ldx	#0
.1054	20 fb 4a	jsr $4afb		jsr	variableHandler
.1057	60		rts			rts

;******  Return to file: header/00start.asm

.1058					GoTokTest:
.1058	a2 06		ldx #$06		ldx	#6
.105a	20 2a 47	jsr $472a		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.105d					section_end_header:
.105d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.105d					AsmGetOperand:
.105d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.105f	8a		txa				txa
.1060	95 98		sta $98,x			sta 	esInt0,x
.1062	95 a0		sta $a0,x			sta 	esInt1,x
.1064	95 a8		sta $a8,x			sta 	esInt2,x
.1066	95 b0		sta $b0,x			sta 	esInt3,x
.1068	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.106a	aa		tax				tax
.106b	a9 02		lda #$02			lda 	#AMD_ACCIMP
.106d	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.106f	f0 41		beq $10b2			beq 	_AGOExit
.1071	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.1073	f0 3d		beq $10b2			beq 	_AGOExit
.1075	c8		iny				iny 								; consume the token
.1076	a9 00		lda #$00			lda 	#AMD_IMM
.1078	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.107a	f0 2d		beq $10a9			beq		_AGOEvalExit 				; with an operand.
.107c	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.107e	f0 40		beq $10c0			beq 	_AGOIndirect
.1080	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.1082	d0 0b		bne $108f			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.1084	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1086	c8		iny				iny
.1087	aa		tax				tax
.1088	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.108a	e0 3a		cpx #$3a			cpx 	#$3A
.108c	f0 24		beq $10b2			beq 	_AGOExit
.108e	88		dey				dey 								; unpick 2 iny
.108f					_AGOZeroPage1:
.108f	88		dey				dey
.1090	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.1092	a2 0a		ldx #$0a		ldx	#10
.1094	20 ea 3b	jsr $3bea		jsr	mainHandler
.1097	20 ef 10	jsr $10ef			jsr 	AsmGetIndexing
.109a	a9 01		lda #$01			lda 	#AMD_ZERO
.109c	90 14		bcc $10b2			bcc 	_AGOExit
.109e	a9 05		lda #$05			lda 	#AMD_ZEROX
.10a0	e0 00		cpx #$00			cpx 	#0
.10a2	f0 0e		beq $10b2			beq 	_AGOExit
.10a4	a9 09		lda #$09			lda 	#AMD_ZEROY
.10a6	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10a9					_AGOEvalExit:
.10a9	48		pha				pha
.10aa	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10ac	a2 0a		ldx #$0a		ldx	#10
.10ae	20 ea 3b	jsr $3bea		jsr	mainHandler
.10b1	68		pla				pla
.10b2					_AGOExit:
.10b2	48		pha				pha 								; save the mode
.10b3	a5 a8		lda $a8				lda 	esInt2 						; check the operand is zero.
.10b5	05 b0		ora $b0				ora 	esInt3
.10b7	d0 02		bne $10bb			bne 	_AGOValue
.10b9	68		pla				pla
.10ba	60		rts				rts
.10bb					_AGOValue:
.10bb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.10bd	20 18 15	jsr $1518		jsr	errorHandler
.10c0					_AGOIndirect:
.10c0	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.10c2	a2 0a		ldx #$0a		ldx	#10
.10c4	20 ea 3b	jsr $3bea		jsr	mainHandler
.10c7	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.10c9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.10cb	f0 11		beq $10de			beq 	_AGOIndIndY
.10cd	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; must be ,X)
.10d0	90 39		bcc $110b			bcc 	AGISyntax
.10d2	e0 00		cpx #$00			cpx 	#0
.10d4	d0 35		bne $110b			bne 	AGISyntax
.10d6	a2 04		ldx #$04		ldx	#4
.10d8	20 ea 3b	jsr $3bea		jsr	mainHandler
.10db	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10dd	60		rts				rts
.10de					_AGOIndIndY:
.10de	c8		iny				iny
.10df	20 ef 10	jsr $10ef			jsr 	ASMGetIndexing 				; get indexing if any
.10e2	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10e4	90 cc		bcc $10b2			bcc 	_AGOExit 					; none then exit
.10e6	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10e8	f0 21		beq $110b			beq 	AGISyntax
.10ea	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10ec	4c b2 10	jmp $10b2			jmp 	_AGOExit
.10ef					AsmGetIndexing:
.10ef	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10f1	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10f3	18		clc				clc
.10f4	d0 14		bne $110a			bne 	_AGIExit 					; no comma, return with CC
.10f6	c8		iny				iny 								; get what SHOULD be X or Y
.10f7	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10f9	38		sec				sec 								; subtract 6 bit ASCII of X
.10fa	e9 18		sbc #$18			sbc 	#"X" & $3F
.10fc	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10fe	b0 0b		bcs $110b			bcs 	AGISyntax
.1100	aa		tax				tax 								; put in index
.1101	c8		iny				iny 								; get what follows that, should be the $3A marker
.1102	b1 28		lda ($28),y			lda 	(codePtr),y
.1104	c8		iny				iny
.1105	c9 3a		cmp #$3a			cmp 	#$3A
.1107	d0 02		bne $110b			bne 	AGISyntax
.1109	38		sec				sec 								; return CS and index mode in X
.110a					_AGIExit:
.110a	60		rts				rts
.110b					AGISyntax:
.110b	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.110d	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.1110					AsmWriteInstruction:
.1110	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.1113	98		tya				tya
.1114	48		pha				pha
.1115	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.1118	29 02		and #$02			and 	#2
.111a	f0 2d		beq $1149			beq 	_ASMWNoEcho 				; if zero then don't echo.
.111c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.111f	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1122	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.1125	20 84 11	jsr $1184			jsr 	AWIWriteHex
.1128	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.112b	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.112e	e0 00		cpx #$00			cpx 	#0
.1130	f0 0e		beq $1140			beq 	_ASMWEchoExit
.1132	a5 98		lda $98				lda 	esInt0
.1134	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1137	e0 01		cpx #$01			cpx 	#1
.1139	f0 05		beq $1140			beq 	_ASMWEchoExit
.113b	a5 a0		lda $a0				lda 	esInt1
.113d	20 7d 11	jsr $117d			jsr 	AWIWriteHexSpace
.1140					_ASMWEchoExit:
.1140	8a		txa				txa
.1141	48		pha				pha
.1142	a2 06		ldx #$06		ldx	#6
.1144	20 f6 14	jsr $14f6		jsr	deviceHandler
.1147	68		pla				pla
.1148	aa		tax				tax
.1149					_ASMWNoEcho:
.1149	ad f2 0a	lda $0af2			lda 	finalOpcode
.114c	20 64 11	jsr $1164			jsr 	AsmWriteByte
.114f	e0 00		cpx #$00			cpx 	#0
.1151	f0 0e		beq $1161			beq 	_ASMWExit
.1153	a5 98		lda $98				lda 	esInt0
.1155	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1158	e0 01		cpx #$01			cpx 	#1
.115a	f0 05		beq $1161			beq 	_ASMWExit
.115c	a5 a0		lda $a0				lda 	esInt1
.115e	20 64 11	jsr $1164			jsr 	AsmWriteByte
.1161					_ASMWExit:
.1161	68		pla				pla
.1162	a8		tay				tay
.1163	60		rts				rts
.1164					AsmWriteByte:
.1164	a0 00		ldy #$00			ldy 	#0
.1166	48		pha				pha
.1167	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.116a	85 2a		sta $2a				sta 	temp0
.116c	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.116f	85 2b		sta $2b				sta 	temp0+1
.1171	68		pla				pla 								; write out the byte.
.1172	91 2a		sta ($2a),y			sta 	(temp0),y
.1174	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1177	d0 03		bne $117c			bne 	_AWBNoCarry
.1179	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.117c					_AWBNoCarry:
.117c	60		rts				rts
.117d					AWIWriteHexSpace:
.117d	48		pha				pha
.117e	a9 20		lda #$20			lda 	#" "
.1180	20 97 11	jsr $1197			jsr 	AWIPrintChar
.1183	68		pla				pla
.1184					AWIWriteHex:
.1184	48		pha				pha
.1185	4a		lsr a				lsr 	a
.1186	4a		lsr a				lsr 	a
.1187	4a		lsr a				lsr 	a
.1188	4a		lsr a				lsr 	a
.1189	20 8d 11	jsr $118d			jsr 	AWIPrintNibble
.118c	68		pla				pla
.118d					AWIPrintNibble:
.118d	29 0f		and #$0f			and 	#15
.118f	c9 0a		cmp #$0a			cmp 	#10
.1191	90 02		bcc $1195			bcc 	_AWIPNDigit
.1193	69 06		adc #$06			adc 	#6
.1195					_AWIPNDigit:
.1195	69 30		adc #$30			adc 	#48
.1197					AWIPrintChar:
.1197	85 32		sta $32				sta 	tempShort
.1199	8a		txa				txa
.119a	48		pha				pha
.119b	a5 32		lda $32				lda 	tempShort
.119d	a2 16		ldx #$16		ldx	#22
.119f	20 f6 14	jsr $14f6		jsr	deviceHandler
.11a2	68		pla				pla
.11a3	aa		tax				tax
.11a4	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.11a5					AssembleOneInstruction:
.11a5	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.11a8	aa		tax				tax
.11a9	bd 72 11	lda $1172,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.11ac	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.11af	20 5d 10	jsr $105d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.11b2	8d f4 0a	sta $0af4			sta 	asmMode
.11b5	a5 a0		lda $a0				lda 	esInt1 						; check if this is a three byte operand.
.11b7	d0 05		bne $11be			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.11b9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.11bc	b0 10		bcs $11ce			bcs 	_AOISuccess 				; worked ok.
.11be					_AOIThreeBytes:
.11be	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.11c1	bd f8 11	lda $11f8,x			lda 	AbsoluteVersionTable,x
.11c4	30 09		bmi $11cf			bmi 	_AOIError					; not possible, no equivalent.
.11c6	8d f4 0a	sta $0af4			sta 	asmMode
.11c9	20 d4 11	jsr $11d4			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.11cc	90 01		bcc $11cf			bcc 	_AOIError 					; didn't work.
.11ce					_AOISuccess:
.11ce	60		rts				rts
.11cf					_AOIError:
.11cf	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.11d1	20 18 15	jsr $1518		jsr	errorHandler
.11d4					AssembleAttempt:
.11d4	20 dd 11	jsr $11dd			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11d7	b0 03		bcs $11dc			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11d9	20 87 13	jsr $1387			jsr 	AssembleSpecialCase
.11dc					_AAExit:
.11dc	60		rts				rts
.11dd					_AADispatch:
.11dd	ad f3 0a	lda $0af3			lda 	asmToken
.11e0	c9 b7		cmp #$b7			cmp 	#TKA_GROUP4
.11e2	b0 11		bcs $11f5			bcs 	_AAGroup4
.11e4	c9 ae		cmp #$ae			cmp 	#TKA_GROUP3
.11e6	b0 0a		bcs $11f2			bcs 	_AAGroup3
.11e8	c9 9c		cmp #$9c			cmp 	#TKA_GROUP2
.11ea	b0 03		bcs $11ef			bcs 	_AAGroup2
.11ec	4c cd 12	jmp $12cd			jmp 	AssembleGroup1
.11ef					_AAGroup2:
.11ef	4c 28 13	jmp $1328			jmp 	AssembleGroup2
.11f2					_AAGroup3:
.11f2	4c 49 13	jmp $1349			jmp 	AssembleGroup3
.11f5					_AAGroup4:
.11f5	4c 7d 13	jmp $137d			jmp 	AssembleGroup4
.11f8					AbsoluteVersionTable:
>11f8	ff						.byte	$FF 			; fail AMD_IMM
>11f9	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11fa	ff						.byte	$FF 			; fail AMD_ACCIMP
>11fb	ff						.byte	$FF 			; fail AMD_ABS
>11fc	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11fd	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11fe	ff						.byte	$FF 			; fail AMD_ABSY
>11ff	ff						.byte	$FF 			; fail AMD_ABSX
>1200	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>1201	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>1202	ff						.byte	$FF 			; fail AMD_ABSIND
>1203	ff						.byte	$FF 			; fail AMD_ABSINDX
>1204	ff						.byte	$FF 			; fail AMD_REL
>1205	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.1206					OpcodeTable:
>1206	01					.byte	$01			; $94 ora
>1207	21					.byte	$21			; $95 (and)
>1208	41					.byte	$41			; $96 eor
>1209	61					.byte	$61			; $97 adc
>120a	81					.byte	$81			; $98 sta
>120b	a1					.byte	$a1			; $99 lda
>120c	c1					.byte	$c1			; $9a cmp
>120d	e1					.byte	$e1			; $9b sbc
>120e	02					.byte	$02			; $9c asl
>120f	22					.byte	$22			; $9d rol
>1210	42					.byte	$42			; $9e lsr
>1211	62					.byte	$62			; $9f ror
>1212	82					.byte	$82			; $a0 stx
>1213	a2					.byte	$a2			; $a1 ldx
>1214	c2					.byte	$c2			; $a2 dec
>1215	e2					.byte	$e2			; $a3 inc
>1216	60					.byte	$60			; $a4 stz
>1217	20					.byte	$20			; $a5 bit
>1218	80					.byte	$80			; $a6 sty
>1219	a0					.byte	$a0			; $a7 ldy
>121a	c0					.byte	$c0			; $a8 cpy
>121b	e0					.byte	$e0			; $a9 cpx
>121c	00					.byte	$00			; $aa tsb
>121d	10					.byte	$10			; $ab trb
>121e	14					.byte	$14			; $ac jsr
>121f	40					.byte	$40			; $ad jmp
>1220	10					.byte	$10			; $ae bpl
>1221	30					.byte	$30			; $af bmi
>1222	50					.byte	$50			; $b0 bvc
>1223	70					.byte	$70			; $b1 bvs
>1224	90					.byte	$90			; $b2 bcc
>1225	b0					.byte	$b0			; $b3 bcs
>1226	d0					.byte	$d0			; $b4 bne
>1227	f0					.byte	$f0			; $b5 beq
>1228	80					.byte	$80			; $b6 bra
>1229	00					.byte	$00			; $b7 brk
>122a	08					.byte	$08			; $b8 php
>122b	18					.byte	$18			; $b9 clc
>122c	28					.byte	$28			; $ba plp
>122d	38					.byte	$38			; $bb sec
>122e	40					.byte	$40			; $bc rti
>122f	48					.byte	$48			; $bd pha
>1230	58					.byte	$58			; $be cli
>1231	5a					.byte	$5a			; $bf phy
>1232	60					.byte	$60			; $c0 rts
>1233	68					.byte	$68			; $c1 pla
>1234	78					.byte	$78			; $c2 sei
>1235	7a					.byte	$7a			; $c3 ply
>1236	88					.byte	$88			; $c4 dey
>1237	8a					.byte	$8a			; $c5 txa
>1238	98					.byte	$98			; $c6 tya
>1239	9a					.byte	$9a			; $c7 txs
>123a	a8					.byte	$a8			; $c8 tay
>123b	aa					.byte	$aa			; $c9 tax
>123c	b8					.byte	$b8			; $ca clv
>123d	ba					.byte	$ba			; $cb tsx
>123e	c8					.byte	$c8			; $cc iny
>123f	ca					.byte	$ca			; $cd dex
>1240	d8					.byte	$d8			; $ce cld
>1241	da					.byte	$da			; $cf phx
>1242	e8					.byte	$e8			; $d0 inx
>1243	ea					.byte	$ea			; $d1 nop
>1244	f8					.byte	$f8			; $d2 sed
>1245	fa					.byte	$fa			; $d3 plx
.1246					Group2OpcodeAvailability:
>1246	ae					.byte	$ae			; $9c asl $02
>1247	ae					.byte	$ae			; $9d rol $22
>1248	ae					.byte	$ae			; $9e lsr $42
>1249	ae					.byte	$ae			; $9f ror $62
>124a	0a					.byte	$0a			; $a0 stx $82
>124b	0b					.byte	$0b			; $a1 ldx $a2
>124c	aa					.byte	$aa			; $a2 dec $c2
>124d	aa					.byte	$aa			; $a3 inc $e2
>124e	22					.byte	$22			; $a4 stz $60
>124f	aa					.byte	$aa			; $a5 bit $20
>1250	2a					.byte	$2a			; $a6 sty $80
>1251	ab					.byte	$ab			; $a7 ldy $a0
>1252	2b					.byte	$2b			; $a8 cpy $c0
>1253	0b					.byte	$0b			; $a9 cpx $e0
>1254	0a					.byte	$0a			; $aa tsb $00
>1255	0a					.byte	$0a			; $ab trb $10
>1256	08					.byte	$08			; $ac jsr $14
>1257	08					.byte	$08			; $ad jmp $40
.1258					AssemblerSpecialCases:
>1258	ad 0a 6c				.byte	$ad,10,$6c		; jmp (abs)
>125b	ad 0b 7c				.byte	$ad,11,$7c		; jmp (abs,x)
>125e	a1 06 be				.byte	$a1,6,$be		; ldx abs,y
>1261	a1 09 b6				.byte	$a1,9,$b6		; ldx zp,y
>1264	a0 09 96				.byte	$a0,9,$96		; stx zp,y
>1267	a3 02 1a				.byte	$a3,2,$1a		; inc acc
>126a	a2 02 3a				.byte	$a2,2,$3a		; dec acc
>126d	a5 00 89				.byte	$a5,0,$89		; bit #
>1270	a4 03 9c				.byte	$a4,3,$9c		; stz abs
>1273	a4 07 9e				.byte	$a4,7,$9e		; stz abs,x
>1276	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1277					AssembleLabel:
.1277	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's followed by a variable name.
.1279	c9 3a		cmp #$3a			cmp 	#$3A
.127b	b0 4b		bcs $12c8			bcs 	_ALSyntax
.127d	a9 00		lda #$00			lda 	#0							; get a variable name on to stack:0
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 fb 4a	jsr $4afb		jsr	variableHandler
.1284	a5 90		lda $90				lda 	esType 						; check integer reference
.1286	c9 80		cmp #$80			cmp 	#$80
.1288	d0 3e		bne $12c8			bne 	_ALSyntax
.128a	a5 98		lda $98				lda 	esInt0 						; copy that reference address to temp0
.128c	85 2a		sta $2a				sta 	temp0
.128e	a5 a0		lda $a0				lda 	esInt1
.1290	85 2b		sta $2b				sta 	temp0+1
.1292	98		tya				tya
.1293	48		pha				pha
.1294	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; are we in Pass 2
.1297	4a		lsr a				lsr 	a
.1298	90 11		bcc $12ab			bcc 	_ALWrite
.129a	a0 00		ldy #$00			ldy 	#0
.129c	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; compare the value in P to the variable
.129f	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a1	d0 20		bne $12c3			bne 	_ALChanged
.12a3	c8		iny				iny
.12a4	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12a7	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.12a9	d0 18		bne $12c3			bne 	_ALChanged
.12ab					_ALWrite:
.12ab	a0 00		ldy #$00			ldy 	#0
.12ad	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy the value in P into the variable
.12b0	91 2a		sta ($2a),y			sta 	(temp0),y
.12b2	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.12b5	c8		iny				iny
.12b6	91 2a		sta ($2a),y			sta 	(temp0),y
.12b8	a9 00		lda #$00			lda 	#0
.12ba	c8		iny				iny
.12bb	91 2a		sta ($2a),y			sta 	(temp0),y
.12bd	c8		iny				iny
.12be	91 2a		sta ($2a),y			sta 	(temp0),y
.12c0	68		pla				pla
.12c1	a8		tay				tay
.12c2	60		rts				rts
.12c3					_ALChanged:
.12c3	a2 26		ldx #$26			ldx 	#ErrorID_Label
.12c5	20 18 15	jsr $1518		jsr	errorHandler
.12c8					_ALSyntax:
.12c8	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.12ca	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.12cd					AssembleGroup1:
.12cd	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.12d0	c9 98		cmp #$98			cmp 	#TKW_STA
.12d2	d0 07		bne $12db			bne 	_AG1NotStoreImm
.12d4	ad f4 0a	lda $0af4			lda 	asmMode
.12d7	c9 00		cmp #$00			cmp 	#AMD_IMM
.12d9	f0 2c		beq $1307			beq 	AG1ModeError
.12db					_AG1NotStoreImm:
.12db	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.12de	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.12e1	48		pha				pha
.12e2	f0 23		beq $1307			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.12e4	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.12e6	d0 02		bne $12ea			bne 	_AG1NotImmediate
.12e8	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.12ea					_AG1NotImmediate:
.12ea	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.12ec	d0 02		bne $12f0			bne 	_AG1NotZX
.12ee	a2 00		ldx #$00			ldx 	#0
.12f0					_AG1NotZX:
.12f0	68		pla				pla 								; restore length
.12f1	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.12f3	b0 10		bcs $1305			bcs 	AG1Fail
.12f5					AG1ReturnValue:
.12f5	85 32		sta $32				sta 	tempShort 					; save size of operand
.12f7	18		clc				clc
.12f8	bd 1a 13	lda $131a,x			lda 	AMDOffsetFromBase,X 		; get the offset for the address mode.
.12fb	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.12fe	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1300	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1303	38		sec				sec
.1304	60		rts				rts
.1305					AG1Fail:
.1305	18		clc				clc
.1306	60		rts				rts
.1307					AG1ModeError:
.1307	a2 24		ldx #$24			ldx 	#ErrorID_Assembler
.1309	20 18 15	jsr $1518		jsr	errorHandler
.130c					AMDOperandSize:
>130c	01 01 00 02					.byte 	1,1,0,2
>1310	01 01 02 02					.byte 	1,1,2,2
>1314	01 01 02 02					.byte 	1,1,2,2
>1318	01 01						.byte 	1,1
.131a					AMDOffsetFromBase:
>131a	00 04 08 0c					.byte 	0,4,8,12
>131e	10 14 18 1c					.byte	16,20,24,28
>1322	11 00 00 00					.byte 	17,0,0,0
>1326	00 00						.byte 	0,0
.1328					AssembleGroup2:
.1328	ad f4 0a	lda $0af4			lda 	asmMode 					; get the mode; if >= 8 cannot be a legit group 2
.132b	c9 08		cmp #$08			cmp 	#8
.132d	b0 18		bcs $1347			bcs 	_AG2Fail
.132f	85 2a		sta $2a				sta 	temp0 						; save in temp9
.1331	ae f3 0a	ldx $0af3			ldx 	asmToken					; get token in X, then get the availability flags for it
.1334	bd aa 11	lda $11aa,x			lda 	Group2OpcodeAvailability-TKA_GROUP2,x
.1337					_AG2Shift:
.1337	4a		lsr a				lsr 	a
.1338	c6 2a		dec $2a				dec 	temp0
.133a	10 fb		bpl $1337			bpl 	_AG2Shift
.133c	90 09		bcc $1347			bcc 	_AG2Fail 					; cannot do that instruction w/that opcode.
.133e	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.1341	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in A
.1344	4c f5 12	jmp $12f5			jmp 	AG1ReturnValue 				; and use that with Group 1's exit code
.1347					_AG2Fail:
.1347	18		clc				clc
.1348	60		rts				rts
.1349					AssembleGroup3:
.1349	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.134c	4a		lsr a				lsr 	a
.134d	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.134f	90 21		bcc $1372			bcc 	_AG3Default
.1351	38		sec				sec	 								; calculate branch offset
.1352	a5 98		lda $98				lda		esInt0
.1354	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.1357	aa		tax				tax
.1358	a5 a0		lda $a0				lda		esInt1
.135a	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.135d	85 a0		sta $a0				sta 	esInt1
.135f	8a		txa				txa 								; add 126, now 128 too many.
.1360	18		clc				clc 								; we can use this to check the range
.1361	69 7e		adc #$7e			adc 	#126
.1363	85 98		sta $98				sta 	esInt0
.1365	90 02		bcc $1369			bcc 	_AG3NoCarry
.1367	e6 a0		inc $a0				inc 	esInt1
.1369					_AG3NoCarry:
.1369	a5 a0		lda $a0				lda 	esInt1 						; check in range.
.136b	d0 0b		bne $1378			bne 	_AG3Range
.136d	a5 98		lda $98				lda 	esInt0 						; fix up branch distance
.136f	38		sec				sec
.1370	e9 80		sbc #$80			sbc 	#128
.1372					_AG3Default:
.1372	85 98		sta $98				sta 	esInt0
.1374					_AG3ExitOk:
.1374	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.1376	d0 07		bne $137f			bne 	AG4Write
.1378					_AG3Range:
.1378	a2 25		ldx #$25			ldx 	#ErrorID_Branch
.137a	20 18 15	jsr $1518		jsr	errorHandler
.137d					AssembleGroup4:
.137d	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.137f					AG4Write:
.137f	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.1382	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.1385	38		sec				sec
.1386	60		rts				rts
.1387					AssembleSpecialCase:
.1387	a2 00		ldx #$00			ldx 	#0
.1389					_ASCScan:
.1389	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; scan token and mode for match
.138c	cd f3 0a	cmp $0af3			cmp 	asmToken
.138f	d0 08		bne $1399			bne 	_ASCNext
.1391	bd 59 12	lda $1259,x			lda 	AssemblerSpecialCases+1,x
.1394	cd f4 0a	cmp $0af4			cmp 	asmMode
.1397	f0 0a		beq $13a3			beq 	_ASCFound
.1399					_ASCNext:
.1399	e8		inx				inx									; next entry
.139a	e8		inx				inx
.139b	e8		inx				inx
.139c	bd 58 12	lda $1258,x			lda 	AssemblerSpecialCases,x 	; until table ends
.139f	d0 e8		bne $1389			bne 	_ASCScan
.13a1	18		clc				clc
.13a2	60		rts				rts
.13a3					_ASCFound:
.13a3	bd 5a 12	lda $125a,x			lda 	AssemblerSpecialCases+2,x 	; get the new opcode.
.13a6	48		pha				pha
.13a7	ae f4 0a	ldx $0af4			ldx  	asmMode 					; mode in X
.13aa	bd 0c 13	lda $130c,x			lda		AMDOperandSize,X 			; get the size of the operand in X
.13ad	aa		tax				tax
.13ae	68		pla				pla 								; opcode back
.13af	20 10 11	jsr $1110			jsr 	AsmWriteInstruction 		; output instruction.
.13b2	38		sec				sec
.13b3	60		rts				rts

;******  Return to file: assembler/assembler.asm

.13b4					assemblerHandler:
.13b4	7c b7 13	jmp ($13b7,x)			jmp 	(assemblerVectors,x)
.13b7					assemblerVectors:
>13b7	bd 13					.word _DummyControlHandler ; index 0
>13b9	a5 11					.word AssembleOneInstruction ; index 2
>13bb	77 12					.word AssembleLabel        ; index 4
.13bd					_DummyControlHandler:
.13bd	60		rts			rts

;******  Return to file: basic.asm

.13be					section_end_assembler:
.13be					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.13be					X16Break:
.13be	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.13c1	f0 01		beq $13c4			beq 	_IsBreak
.13c3	60		rts				rts
.13c4					_IsBreak:
.13c4	a2 21		ldx #$21			ldx 	#ErrorID_Break
.13c6	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.13c9					ExternSave:
.13c9	98		tya				tya
.13ca	48		pha				pha
.13cb	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13ce	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13d1	a9 01		lda #$01			lda 	#1
.13d3	a2 08		ldx #$08			ldx 	#8	 						; device #8
.13d5	a0 00		ldy #$00			ldy 	#0
.13d7	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.13da	a5 99		lda $99				lda 	esInt0+1 					; copy start of save address to temp0
.13dc	85 2a		sta $2a				sta 	temp0
.13de	a5 a1		lda $a1				lda 	esInt1+1
.13e0	85 2b		sta $2b				sta 	temp0+1
.13e2	a6 9a		ldx $9a				ldx 	esInt0+2 					; end address
.13e4	a4 a2		ldy $a2				ldy 	esInt1+2
.13e6	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.13e8	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.13eb	b0 03		bcs $13f0			bcs 	_ESSave
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef	60		rts				rts
.13f0					_ESSave:
.13f0	a2 1f		ldx #$1f			ldx 	#ErrorID_Save
.13f2	20 18 15	jsr $1518		jsr	errorHandler
.13f5					ExternLoad:
.13f5	98		tya				tya
.13f6	48		pha				pha
.13f7	20 19 14	jsr $1419			jsr 	ExternGetLength 			; get length of file into A name YX
.13fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.13fd	a9 01		lda #$01			lda 	#1
.13ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1401	a0 00		ldy #$00			ldy 	#0
.1403	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1406	a6 99		ldx $99				ldx 	esInt0+1 					; load address
.1408	a4 a1		ldy $a1				ldy 	esInt1+1
.140a	a9 00		lda #$00			lda 	#0 							; load command
.140c	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.140f	b0 03		bcs $1414			bcs 	_ESLoad
.1411	68		pla				pla
.1412	a8		tay				tay
.1413	60		rts				rts
.1414					_ESLoad:
.1414	a2 20		ldx #$20			ldx 	#ErrorID_Load
.1416	20 18 15	jsr $1518		jsr	errorHandler
.1419					ExternGetLength:
.1419	a5 98		lda $98				lda 	esInt0 						; length into A.
.141b	85 2a		sta $2a				sta 	temp0
.141d	a5 a0		lda $a0				lda 	esInt1
.141f	85 2b		sta $2b				sta 	temp0+1
.1421	a0 00		ldy #$00			ldy 	#0
.1423	b1 2a		lda ($2a),y			lda 	(temp0),y
.1425	a6 98		ldx $98				ldx 	esInt0 						; name into YX
.1427	a4 a0		ldy $a0				ldy 	esInt1
.1429	e8		inx				inx 								; advance over the length pointer.
.142a	d0 01		bne $142d			bne 	_ESNoCarry
.142c	c8		iny				iny
.142d					_ESNoCarry:
.142d	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.142e					IOControlHandler:
.142e	c9 00		cmp #$00			cmp 	#0
.1430	d0 12		bne $1444			bne		_CHExit
.1432	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.1434	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1437	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1439	20 89 14	jsr $1489			jsr 	IOInk
.143c	a9 00		lda #$00			lda 	#0
.143e	20 9d 14	jsr $149d			jsr 	IOPaper
.1441	20 45 14	jsr $1445			jsr 	IOClearScreen
.1444					_CHExit:
.1444	60		rts				rts
.1445					IOClearScreen:
.1445	48		pha				pha
.1446	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1448	20 5d 14	jsr $145d			jsr 	IOPrintChar
.144b	68		pla				pla
.144c	60		rts				rts
.144d					IONewLine:
.144d	48		pha				pha
.144e	a9 0d		lda #$0d			lda 	#13
.1450	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1453	68		pla				pla
.1454	60		rts				rts
.1455					IOTab:
.1455	48		pha				pha
.1456	a9 20		lda #$20			lda 	#32
.1458	20 5d 14	jsr $145d			jsr 	IOPrintChar
.145b	68		pla				pla
.145c	60		rts				rts
.145d					IOPrintAscii:
.145d					IOPrintChar:
.145d	aa		tax				tax 								; save in X so we can save Y
.145e	5a		phy				phy
.145f	8a		txa				txa
.1460	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.1462	d0 02		bne $1466			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.1464	a9 14		lda #$14			lda 	#$14
.1466					_IOPCNotBS:
.1466	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1469	7a		ply				ply
.146a	60		rts				rts
.146b					IOInkey:
.146b	98		tya				tya
.146c	48		pha				pha
.146d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1470	85 32		sta $32				sta 	tempShort
.1472	68		pla				pla
.1473	a8		tay				tay
.1474	a5 32		lda $32				lda 	tempShort					; no key pressed.
.1476	f0 10		beq $1488			beq 	_IOIExit
.1478	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.147a	f0 0c		beq $1488			beq 	_IOIExit
.147c	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.147e	f0 06		beq $1486			beq 	_IOIBackspace
.1480	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.1482	90 e7		bcc $146b			bcc 	IOInkey
.1484	b0 02		bcs $1488			bcs 	_IOIExit
.1486					_IOIBackspace:
.1486	a9 08		lda #$08			lda 	#8 							; return chr(8)
.1488					_IOIExit:
.1488	60		rts				rts
.1489					IOInk:
.1489	48		pha				pha
.148a	29 07		and #$07			and 	#7 							; 8 primaries
.148c	aa		tax				tax
.148d	bd 95 14	lda $1495,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.1490	20 5d 14	jsr $145d			jsr 	IOPrintChar
.1493	68		pla				pla
.1494	60		rts				rts
.1495					_IOColourTable:
>1495	90						.byte 	$90 					; 0 Black
>1496	96						.byte 	$96 					; 1 Red
>1497	1e						.byte 	$1E 					; 2 Green
>1498	9e						.byte 	$9E 					; 3 Yellow
>1499	9a						.byte 	$9A 					; 4 Blue
>149a	9c						.byte 	$9C 					; 5 Magenta
>149b	9f						.byte 	$9F 					; 6 Cyan
>149c	05						.byte 	$05 					; 7 White
.149d					IOPaper:
.149d	48		pha				pha
.149e	48		pha				pha
.149f	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.14a1	20 5d 14	jsr $145d			jsr 	IOPrintChar 			; and then swap them again.
.14a4	68		pla				pla
.14a5	20 89 14	jsr $1489			jsr 	IOInk
.14a8	a9 01		lda #$01			lda 	#1
.14aa	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14ad	68		pla				pla
.14ae	60		rts				rts
.14af					IOLocate:
.14af	48		pha				pha
.14b0	a9 13		lda #$13			lda 	#$13 					; home cursor code
.14b2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14b5	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.14b7	20 be 14	jsr $14be			jsr 	_IOLoc2
.14ba	68		pla				pla
.14bb	a8		tay				tay
.14bc	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.14be					_IOLoc2:
.14be	c0 00		cpy #$00			cpy 	#0
.14c0	f0 06		beq $14c8			beq 	_IOLocExit
.14c2	20 5d 14	jsr $145d			jsr 	IOPrintChar
.14c5	88		dey				dey
.14c6	d0 f6		bne $14be			bne 	_IOLoc2
.14c8					_IOLocExit:
.14c8	60		rts				rts
.14c9					IOInput:
.14c9	a9 00		lda #$00			lda 	#0
.14cb	8d f6 0a	sta $0af6			sta 	bufferCount
.14ce					_IOILoop:
.14ce	20 cf ff	jsr $ffcf			jsr 	$FFCF
.14d1	c9 0d		cmp #$0d			cmp 	#13
.14d3	f0 10		beq $14e5			beq 	_IOIExit
.14d5	ae f6 0a	ldx $0af6			ldx 	bufferCount
.14d8	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.14da	f0 f2		beq $14ce			beq 	_IOILoop
.14dc	ee f6 0a	inc $0af6			inc 	bufferCount
.14df	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.14e2	4c ce 14	jmp $14ce			jmp 	_IOILoop
.14e5					_IOIExit:
.14e5	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.14e7	85 2a		sta $2a				sta 	temp0
.14e9	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.14eb	85 2b		sta $2b				sta 	1+(temp0)
.14ed	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.14ee					IOReadTimer:
.14ee	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.14f1	48		pha				pha
.14f2	8a		txa				txa
.14f3	a8		tay				tay
.14f4	68		pla				pla
.14f5	60		rts				rts

;******  Return to file: device/device.asm

.14f6					deviceHandler:
.14f6	7c f9 14	jmp ($14f9,x)			jmp 	(deviceVectors,x)
.14f9					deviceVectors:
>14f9	2e 14					.word IOControlHandler     ; index 0
>14fb	be 13					.word X16Break             ; index 2
>14fd	45 14					.word IOClearScreen        ; index 4
>14ff	4d 14					.word IONewLine            ; index 6
>1501	89 14					.word IOInk                ; index 8
>1503	6b 14					.word IOInkey              ; index 10
>1505	c9 14					.word IOInput              ; index 12
>1507	f5 13					.word ExternLoad           ; index 14
>1509	af 14					.word IOLocate             ; index 16
>150b	9d 14					.word IOPaper              ; index 18
>150d	5d 14					.word IOPrintChar          ; index 20
>150f	5d 14					.word IOPrintAscii         ; index 22
>1511	c9 13					.word ExternSave           ; index 24
>1513	55 14					.word IOTab                ; index 26
>1515	ee 14					.word IOReadTimer          ; index 28
.1517					_DummyControlHandler:
.1517	60		rts			rts

;******  Return to file: basic.asm

.1518					section_end_device:
.1518					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.1518					ErrorHandler:
.1518	8a		txa				txa
.1519	48		pha				pha
.151a	a9 01		lda #$01			lda 	#1 							; red
.151c	a2 08		ldx #$08		ldx	#8
.151e	20 f6 14	jsr $14f6		jsr	deviceHandler
.1521	68		pla				pla
.1522	aa		tax				tax
.1523	a9 8e		lda #$8e			lda 	#(ErrorTextList) & $FF
.1525	85 2a		sta $2a				sta 	temp0
.1527	a9 15		lda #$15			lda 	#(ErrorTextList) >> 8
.1529	85 2b		sta $2b				sta 	1+(temp0)
.152b	ca		dex		_EHFind:dex									; errors start at 1
.152c	f0 10		beq $153e			beq 	_EHFound
.152e	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1530	38		sec				sec
.1531	a5 2a		lda $2a				lda 	temp0
.1533	71 2a		adc ($2a),y			adc 	(temp0),y
.1535	85 2a		sta $2a				sta 	temp0
.1537	90 f2		bcc $152b			bcc 	_EHFind
.1539	e6 2b		inc $2b				inc 	temp0+1
.153b	4c 2b 15	jmp $152b			jmp 	_EHFind
.153e					_EHFound:
.153e	20 52 18	jsr $1852			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1541	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.1543	b1 28		lda ($28),y			lda 	(codePtr),y
.1545	f0 39		beq $1580			beq 	_EHNoLine
.1547	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1549	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.154c	90 32		bcc $1580			bcc 	_EHNoLine
.154e	a9 8a		lda #$8a			lda 	#(EHAtMsg) & $FF
.1550	85 2a		sta $2a				sta 	temp0
.1552	a9 15		lda #$15			lda 	#(EHAtMsg) >> 8
.1554	85 2b		sta $2b				sta 	1+(temp0)
.1556	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1559	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.155b	a2 00		ldx #$00			ldx 	#0
.155d	b1 28		lda ($28),y			lda 	(codePtr),y
.155f	95 98		sta $98,x			sta 	esInt0,x
.1561	c8		iny				iny
.1562	b1 28		lda ($28),y			lda 	(codePtr),y
.1564	95 a0		sta $a0,x			sta 	esInt1,x
.1566	a9 00		lda #$00			lda 	#0
.1568	95 a8		sta $a8,x			sta 	esInt2,x
.156a	95 b0		sta $b0,x			sta 	esInt3,x
.156c	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.156e	85 2a		sta $2a				sta 	temp0
.1570	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1572	85 2b		sta $2b				sta 	1+(temp0)
.1574	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.1576	a9 00		lda #$00			lda 	#0							; stack position zero.
.1578	a2 12		ldx #$12		ldx	#18
.157a	20 ea 3b	jsr $3bea		jsr	mainHandler
.157d	20 52 18	jsr $1852			jsr 	EHPrintAscii
.1580					_EHNoLine:
.1580	a2 06		ldx #$06		ldx	#6
.1582	20 f6 14	jsr $14f6		jsr	deviceHandler
.1585	a2 04		ldx #$04		ldx	#4
.1587	20 4e 25	jsr $254e		jsr	interactionHandler
.158a					EHAtMsg:
>158a	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.158e					ErrorTextList:
>158e	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>1596	20 6e 6f 74 20 50 72 65 73 65 6e 74
>15a2	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>15aa	45 72 72 6f 72
>15af	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>15b7	64 69 73 61 62 6c 65 64
>15bf	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>15c7	6f 6e 20 66 61 69 6c 65 64
>15d0	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>15d8	42 79 20 5a 65 72 6f
>15df	04 53 74 6f 70				.text 4,"Stop"
>15e4	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>15ec	73 6d 61 74 63 68
>15f2	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>15fa	20 56 61 6c 75 65
>1600	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>1608	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>1616	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>161e	20 63 6f 6d 6d 61
>1624	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>162c	20 72 65 66 65 72 65 6e 63 65
>1636	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>163e	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>164c	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>1654	74 6f 6f 20 6c 6f 6e 67
>165c	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>1664	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1671	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>1679	69 74 68 6f 75 74 20 52 45 50 45 41 54
>1686	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>168e	74 68 6f 75 74 20 46 4f 52
>1697	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>169f	74 68 6f 75 74 20 57 48 49 4c 45
>16aa	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>16b2	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>16bf	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>16c7	54 20 69 6e 64 65 78
>16ce	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>16d6	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>16e6	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>16ee	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>16fd	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>1705	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>1715	63 65
>1717	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>171f	20 50 72 6f 63 65 64 75 72 65
>1729	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1731	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1741	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1749	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>1757	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>175f	75 69 72 65 73 20 61 72 72 61 79
>176a	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1772	61 79 20 69 6e 64 65 78
>177a	1d 57 72 6f 6e 67 20 6e			.text 29,"Wrong number of array indices"
>1782	75 6d 62 65 72 20 6f 66 20 61 72 72 61 79 20 69
>1792	6e 64 69 63 65 73
>1798	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>17a0	64 61 74 61
>17a4	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>17ac	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>17b9	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>17c1	69 6c 65 64
>17c5	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>17cd	69 6c 65 64
>17d1	05 42 72 65 61 6b			.text 5,"Break"
>17d7	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>17df	6d 65 6d 6f 72 79
>17e5	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>17ed	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>17fc	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>1804	72 61 6e 64 2f 4d 6f 64 65
>180d	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>1815	6f 75 74 20 6f 66 20 72 61 6e 67 65
>1821	13 4c 61 62 65 6c 20 63			.text 19,"Label changed value"
>1829	68 61 6e 67 65 64 20 76 61 6c 75 65
>1835	12 4e 6f 20 53 70 72 69			.text 18,"No Sprite Selected"
>183d	74 65 20 53 65 6c 65 63 74 65 64
>1848	08 48 61 72 64 77 61 72			.text 8,"Hardware"
>1850	65
>1851	00					.byte 0

;******  Return to file: error/errorhandler.asm

.1852					EHPrintAscii:
.1852	a0 00		ldy #$00			ldy 	#0
.1854	b1 2a		lda ($2a),y			lda 	(temp0),y
.1856	aa		tax				tax
.1857	f0 0f		beq $1868			beq 	_EHPExit
.1859					_EHPLoop:
.1859	c8		iny				iny
.185a	8a		txa				txa
.185b	48		pha				pha
.185c	b1 2a		lda ($2a),y			lda 	(temp0),y
.185e	a2 16		ldx #$16		ldx	#22
.1860	20 f6 14	jsr $14f6		jsr	deviceHandler
.1863	68		pla				pla
.1864	aa		tax				tax
.1865	ca		dex				dex
.1866	d0 f1		bne $1859			bne 	_EHPLoop
.1868					_EHPExit:
.1868	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1869					section_end_error:
.1869					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1869					ExtensionHandler:
.1869	c9 fe		cmp #$fe			cmp 	#$FE 						; check for force mode 0
.186b	f0 16		beq $1883			beq 	_ExtensionForce
.186d	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.186f	d0 08		bne $1879			bne 	_ExtensionUnary 			; is passed in A.
.1871	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1873	c8		iny				iny
.1874	0a		asl a				asl 	a
.1875	aa		tax				tax
.1876	7c 7a 18	jmp ($187a,x)			jmp 	(Group2Vectors-12,x)
.1879					_ExtensionUnary:
.1879	48		pha				pha 								; save stack pos in A
.187a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.187c	c8		iny				iny
.187d	0a		asl a				asl 	a
.187e	aa		tax				tax
.187f	68		pla				pla 								; restore stack pos and call group3 command.
.1880	7c 94 18	jmp ($1894,x)			jmp 	(Group3Vectors-12,X)
.1883					_ExtensionForce:
.1883	4c c9 20	jmp $20c9			jmp 	ForceMode0

;******  Processing file: extension/../generated/tokenvectors2.inc

.1886					Group2Vectors:
>1886	fb 21					.word	Command_VPoke            ; $86 vpoke
>1888	fe 21					.word	Command_VDoke            ; $87 vdoke
>188a	d3 21					.word	Command_VLoad            ; $88 vload
>188c	db 20					.word	CommandMode              ; $89 mode
>188e	9c 21					.word	CommandPalette           ; $8a palette
>1890	c6 1e					.word	CommandSprite            ; $8b sprite
>1892	98 21					.word	CommandClg               ; $8c clg
>1894	95 1a					.word	Command_Rect             ; $8d rect
>1896	9d 1a					.word	Command_Frame            ; $8e frame
>1898	90 2f					.word	Unimplemented            ; $8f draw
>189a	90 2f					.word	Unimplemented            ; $90 text
>189c	82 1a					.word	Command_Plot             ; $91 plot
>189e	84 19					.word	Command_Line             ; $92 line

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.18a0					Group3Vectors:
>18a0	47 22					.word	Command_VPeek            ; $86 vpeek(
>18a2	4a 22					.word	Command_VDeek            ; $87 vdeek(
>18a4	99 20					.word	Sprite_GetX              ; $88 sprite.x(
>18a6	9c 20					.word	Sprite_GetY              ; $89 sprite.y(
>18a8	09 1e					.word	FunctionCollide          ; $8a hit(
>18aa	81 1d					.word	Unary_JoyX               ; $8b joy.x(
>18ac	84 1d					.word	Unary_JoyY               ; $8c joy.y(
>18ae	bf 1d					.word	Unary_JButton            ; $8d joy.b(
>18b0	54 1d					.word	Unary_Clock              ; $8e clock(

;******  Return to file: extension/extensionhandler.asm

.18b2					XEvaluateInteger:
.18b2	8a		txa				txa
.18b3	a2 0a		ldx #$0a		ldx	#10
.18b5	20 ea 3b	jsr $3bea		jsr	mainHandler
.18b8	aa		tax				tax
.18b9	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/general.asm

.0be6					gStartStorage:
.0be6					gCurrentXPos:
>0be6							.fill 	2 							; copying the coordinate here, and into x2, and the old
.0be8					gCurrentYPos:
>0be8							.fill 	2
.0bea					gX1:
>0bea							.fill 	2		 					; most recently used. x2,y2 are the most recently used.
.0bec					gY1:
>0bec							.fill 	2
.0bee					gX2:
>0bee							.fill 	2
.0bf0					gY2:
>0bf0							.fill 	2
.0bf2					gError:
>0bf2							.fill 	2
.0bf4					g2Error:
>0bf4							.fill 	2
.0bf6					gdx:
>0bf6							.fill 	2
.0bf8					gdy:
>0bf8							.fill 	2
.0bfa					gModifiers:
.0bfa					gInk:
>0bfa							.fill 	1
.0bfb					gPaper:
>0bfb							.fill 	1
.0bfc					gSize:
>0bfc							.fill 	1
.0bfd					gImage:
>0bfd							.fill 	1
.0bfe					gFlip:
>0bfe							.fill 	1
.0bff					gWordHandler:
>0bff							.fill 	2
.0c01					gEndStorage:
.18ba					GResetStorage:
.18ba	8a		txa				txa
.18bb	48		pha				pha
.18bc	a2 1a		ldx #$1a			ldx 	#gEndStorage-gStartStorage-1 ; fill all storage for gfx with 0
.18be	a9 00		lda #$00			lda 	#0
.18c0					_GRSLoop:
.18c0	9d e6 0b	sta $0be6,x			sta 	gStartStorage,x
.18c3	ca		dex				dex
.18c4	10 fa		bpl $18c0			bpl 	_GRSLoop
.18c6	ee fa 0b	inc $0bfa			inc 	gInk 						; make ink 1.
.18c9	68		pla				pla
.18ca	aa		tax				tax
.18cb	60		rts				rts
.18cc					GHandler:
.18cc	8e 00 0c	stx $0c00			stx 	gWordHandler+1 				; save code that draws the actual line or whatever.
.18cf	8d ff 0b	sta $0bff			sta 	gWordHandler
.18d2	88		dey				dey 								; predecrement
.18d3					_GHLoopNext:
.18d3	c8		iny				iny									; advance one character
.18d4					_GHLoop:
.18d4	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at character.
.18d6	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , go to next
.18d8	f0 f9		beq $18d3			beq 	_GHLoopNext
.18da	c9 80		cmp #$80			cmp 	#TOK_EOL 					; end of line or : , exit
.18dc	f0 58		beq $1936			beq 	_GHExit
.18de	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.18e0	f0 54		beq $1936			beq 	_GHExit
.18e2	c9 db		cmp #$db			cmp 	#TKW_AT 					; have we found AT or TO
.18e4	f0 3f		beq $1925			beq 	_GHCallHandler 				; update post & call the handler
.18e6	c9 ce		cmp #$ce			cmp 	#TKW_TO
.18e8	f0 3b		beq $1925			beq 	_GHCallHandler
.18ea	c9 e6		cmp #$e6			cmp 	#TKW_FROM
.18ec	f0 10		beq $18fe			beq 	_GHCPairSkip
.18ee	a2 00		ldx #$00			ldx 	#0 							; now see if it matches a token modifier (INK,PAPER etc.)
.18f0					_GHCheckTokens:
.18f0	b1 28		lda ($28),y			lda 	(codePtr),y
.18f2	dd 37 19	cmp $1937,x			cmp 	_GHTokenTable,x
.18f5	f0 0e		beq $1905			beq 	_GHFoundToken
.18f7	e8		inx				inx
.18f8	bd 37 19	lda $1937,x			lda 	_GHTokenTable,x
.18fb	d0 f3		bne $18f0			bne 	_GHCheckTokens
.18fd	88		dey				dey
.18fe					_GHCPairSkip:
.18fe	c8		iny				iny
.18ff					_GHCPair:
.18ff	20 3d 19	jsr $193d			jsr 	GHMakeCurrent 				; should be a coordinate pair then.
.1902	4c d4 18	jmp $18d4			jmp 	_GHLoop
.1905					_GHFoundToken:
.1905	c8		iny				iny 								; skip token (INK/PAPER etc.)
.1906	8a		txa				txa
.1907	48		pha				pha
.1908	a9 00		lda #$00			lda 	#0 							; evaluate byte
.190a	a2 0c		ldx #$0c		ldx	#12
.190c	20 ea 3b	jsr $3bea		jsr	mainHandler
.190f	68		pla				pla
.1910	aa		tax				tax
.1911	a5 98		lda $98				lda 	esInt0 						; get evaluated value
.1913	9d fa 0b	sta $0bfa,x			sta 	gModifiers,x 				; update the modifiers
.1916	ad fa 0b	lda $0bfa			lda 	gInk 						; update driver ink and paper.
.1919	20 3e 1d	jsr $1d3e			jsr 	gdSetInk
.191c	ad fb 0b	lda $0bfb			lda 	gPaper
.191f	20 42 1d	jsr $1d42			jsr 	gdSetPaper
.1922	4c d4 18	jmp $18d4			jmp 	_GHLoop 					; and loop back
.1925					_GHCallHandler:
.1925	c8		iny				iny 								; consume AT or TO.
.1926	20 3d 19	jsr $193d			jsr 	GHMakeCurrent 				; update the coordinates.
.1929	98		tya				tya
.192a	48		pha				pha
.192b	20 33 19	jsr $1933			jsr 	_GHCallHandlerCode 			; call the handler code
.192e	68		pla				pla
.192f	a8		tay				tay
.1930	4c d4 18	jmp $18d4			jmp 	_GHLoop 					; and loop round.
.1933					_GHCallHandlerCode:
.1933	6c ff 0b	jmp ($0bff)			jmp 	(gWordHandler)
.1936					_GHExit:
.1936	60		rts				rts
.1937					_GHTokenTable:
>1937	e1 e2 d2 da dc					.byte 	TKW_INK,TKW_PAPER,TKW_DIM,TKW_IMAGE,TKW_FLIP
>193c	00						.byte 	0
.193d					GHMakeCurrent:
.193d	8a		txa				txa
.193e	48		pha				pha
.193f	a2 00		ldx #$00			ldx 	#0 							; do for 0 offset (X)
.1941	20 51 19	jsr $1951			jsr 	_GHMCDoIt
.1944	a2 02		ldx #$02		ldx	#2
.1946	20 ea 3b	jsr $3bea		jsr	mainHandler
.1949	a2 02		ldx #$02			ldx 	#2 							; do for 2 offset (Y)
.194b	20 51 19	jsr $1951			jsr 	_GHMCDoIt
.194e	68		pla				pla
.194f	aa		tax				tax
.1950	60		rts				rts
.1951					_GHMCDoIt:
.1951	bd e6 0b	lda $0be6,x			lda 	gCurrentXPos,x 				; copy the current position to X,Y
.1954	9d ea 0b	sta $0bea,x			sta 	gX1,x
.1957	bd e7 0b	lda $0be7,x			lda 	gCurrentXPos+1,x
.195a	9d eb 0b	sta $0beb,x			sta 	gX1+1,x
.195d	8a		txa				txa
.195e	48		pha				pha
.195f	a9 00		lda #$00			lda 	#0 							; evaluate the parameter, now in esInt0,esInt1
.1961	a2 0a		ldx #$0a		ldx	#10
.1963	20 ea 3b	jsr $3bea		jsr	mainHandler
.1966	68		pla				pla
.1967	aa		tax				tax
.1968	a5 98		lda $98				lda 	esInt0
.196a	9d e6 0b	sta $0be6,x			sta 	gCurrentXPos,x
.196d	9d ee 0b	sta $0bee,x			sta 	gX2,x
.1970	a5 a0		lda $a0				lda 	esInt1
.1972	9d e7 0b	sta $0be7,x			sta 	gCurrentXPos+1,x
.1975	9d ef 0b	sta $0bef,x			sta 	gX2+1,x
.1978	a5 a8		lda $a8				lda 	esInt2 						; check reasonable range.
.197a	05 b0		ora $b0				ora 	esInt3
.197c	d0 01		bne $197f			bne 	_GMHCRange
.197e	60		rts				rts
.197f					_GMHCRange:
.197f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1981	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/line.asm

.0c01					gdySign:
>0c01							.fill 	1
.1984					Command_Line:
.1984	a9 8c		lda #$8c			lda 	#LineHandler & $FF
.1986	a2 19		ldx #$19			ldx 	#LineHandler >> 8
.1988	20 cc 18	jsr $18cc			jsr 	GHandler
.198b	60		rts				rts
.198c					LineHandler:
.198c	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if horizontal, vertical line
.198e	a0 04		ldy #$04			ldy 	#gX2-gX1
.1990	20 58 1b	jsr $1b58			jsr 	CompareCoordsEq
.1993	f0 09		beq $199e			beq 	_LHRectCode
.1995	a2 02		ldx #$02			ldx 	#gY1-gX1
.1997	a0 06		ldy #$06			ldy 	#gY2-gX1
.1999	20 58 1b	jsr $1b58			jsr 	CompareCoordsEq
.199c	d0 03		bne $19a1			bne 	_LHLineDrawer
.199e					_LHRectCode:
.199e	4c a9 1a	jmp $1aa9			jmp 	RectHandler
.19a1					_LHLineDrawer:
.19a1	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1 < X2 e.g. it is sloped to the right.
.19a3	a0 04		ldy #$04			ldy 	#gX2-gX1
.19a5	20 43 1b	jsr $1b43			jsr 	CompareCoords
.19a8	90 0a		bcc $19b4			bcc 	_LHNoSwap
.19aa	20 8b 1b	jsr $1b8b			jsr 	GSwapCoords					; if so swap coords so X2 > X1, may be going up or down.
.19ad	a2 02		ldx #$02			ldx 	#gY1-gX1
.19af	a0 06		ldy #$06			ldy 	#gY2-gX1
.19b1	20 8b 1b	jsr $1b8b			jsr 	GSwapCoords
.19b4					_LHNoSwap:
.19b4	20 e3 19	jsr $19e3			jsr 	BresenhamInitialise 		; initialise Bresenham constants
.19b7	a0 00		ldy #$00			ldy 	#gX1-gX1
.19b9	20 2d 1b	jsr $1b2d			jsr 	SetupXY 					; set up X1,Y1 to draw.
.19bc	b0 1b		bcs $19d9			bcs 	_LHExit 					; line off screen.
.19be	ad f9 0b	lda $0bf9			lda 	gdy+1 						; save sign of dy
.19c1	8d 01 0c	sta $0c01			sta 	gdysign
.19c4					_LHDrawLoop:
.19c4	a2 00		ldx #$00			ldx 	#gX1-gX1 					; check if X1=X2 and Y1 = Y2
.19c6	a0 04		ldy #$04			ldy 	#gX2-gX1
.19c8	20 58 1b	jsr $1b58			jsr 	CompareCoordsEq
.19cb	d0 0d		bne $19da			bne 	_LHNextPixel
.19cd	a2 06		ldx #$06			ldx 	#gY2-gX1
.19cf	a0 06		ldy #$06			ldy 	#gY2-gX1
.19d1	20 58 1b	jsr $1b58			jsr 	CompareCoordsEq
.19d4	d0 04		bne $19da			bne 	_LHNextPixel
.19d6	20 9c 1c	jsr $1c9c			jsr 	gdPlotInk 					; plot the last pixel.
.19d9					_LHExit:
.19d9	60		rts				rts
.19da					_LHNextPixel:
.19da	20 9c 1c	jsr $1c9c			jsr 	gdPlotInk 					; plot the pixel.
.19dd	20 1d 1a	jsr $1a1d			jsr 	BresenhamIteration 			; do one bresenham iteration calculation
.19e0	4c c4 19	jmp $19c4			jmp 	_LHDrawLoop 				; and loop back.
.19e3					BresenhamInitialise:
.19e3	38		sec				sec
.19e4	ad ee 0b	lda $0bee			lda 	gX2
.19e7	ed ea 0b	sbc $0bea			sbc 	gX1
.19ea	8d f6 0b	sta $0bf6			sta 	gdX
.19ed	ad ef 0b	lda $0bef			lda 	gX2+1
.19f0	ed eb 0b	sbc $0beb			sbc 	gX1+1
.19f3	8d f7 0b	sta $0bf7			sta 	gdX+1
.19f6	38		sec				sec
.19f7	ad ec 0b	lda $0bec			lda 	gY1
.19fa	ed f0 0b	sbc $0bf0			sbc 	gY2
.19fd	8d f8 0b	sta $0bf8			sta 	gdy
.1a00	ad ed 0b	lda $0bed			lda 	gY1+1
.1a03	ed f1 0b	sbc $0bf1			sbc 	gY2+1
.1a06	8d f9 0b	sta $0bf9			sta 	gdy+1
.1a09	18		clc				clc
.1a0a	ad f6 0b	lda $0bf6			lda 	gdx
.1a0d	6d f8 0b	adc $0bf8			adc 	gdy
.1a10	8d f2 0b	sta $0bf2			sta 	gError
.1a13	ad f7 0b	lda $0bf7			lda 	gdx+1
.1a16	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a19	8d f3 0b	sta $0bf3			sta 	gError+1
.1a1c	60		rts				rts
.1a1d					BresenhamIteration:
.1a1d	ad f2 0b	lda $0bf2			lda 	gError
.1a20	0a		asl a				asl 	a
.1a21	8d f4 0b	sta $0bf4			sta 	g2Error
.1a24	ad f3 0b	lda $0bf3			lda 	gError+1
.1a27	2a		rol a				rol 	a
.1a28	8d f5 0b	sta $0bf5			sta 	g2Error+1
.1a2b	a2 0a		ldx #$0a			ldx 	#g2Error-gX1
.1a2d	a0 0e		ldy #$0e			ldy 	#gdy-gX1
.1a2f	20 50 1b	jsr $1b50			jsr 	CompareCoordsSigned
.1a32	30 03		bmi $1a37			bmi 	_BINoE2DY
.1a34	20 44 1a	jsr $1a44			jsr 	BresenhamE2GEDY
.1a37					_BINoE2DY:
.1a37	a2 0c		ldx #$0c			ldx 	#gdx-gX1
.1a39	a0 0a		ldy #$0a			ldy 	#g2Error-gX1
.1a3b	20 50 1b	jsr $1b50			jsr 	CompareCoordsSigned
.1a3e	30 03		bmi $1a43			bmi 	_BINoDXE2
.1a40	20 63 1a	jsr $1a63			jsr 	BresenhamDXGEE2
.1a43					_BINoDXE2:
.1a43	60		rts				rts
.1a44					BresenhamE2GEDY:
.1a44	18		clc				clc
.1a45	ad f2 0b	lda $0bf2			lda 	gError
.1a48	6d f8 0b	adc $0bf8			adc 	gdy
.1a4b	8d f2 0b	sta $0bf2			sta 	gError
.1a4e	ad f3 0b	lda $0bf3			lda 	gError+1
.1a51	6d f9 0b	adc $0bf9			adc 	gdy+1
.1a54	8d f3 0b	sta $0bf3			sta 	gError+1
.1a57	ee ea 0b	inc $0bea			inc 	gX1
.1a5a	d0 03		bne $1a5f			bne 	_BE2Skip
.1a5c	ee eb 0b	inc $0beb			inc 	gX1+1
.1a5f					_BE2Skip:
.1a5f	20 a8 1b	jsr $1ba8			jsr 	gdMvRight
.1a62	60		rts				rts
.1a63					BresenhamDXGEE2:
.1a63	18		clc				clc
.1a64	ad f2 0b	lda $0bf2			lda 	gError
.1a67	6d f6 0b	adc $0bf6			adc 	gdx
.1a6a	8d f2 0b	sta $0bf2			sta 	gError
.1a6d	ad f3 0b	lda $0bf3			lda 	gError+1
.1a70	6d f7 0b	adc $0bf7			adc 	gdx+1
.1a73	8d f3 0b	sta $0bf3			sta 	gError+1
.1a76	ee ec 0b	inc $0bec			inc 	gY1
.1a79	d0 03		bne $1a7e			bne 	_BEDXSkip
.1a7b	ee ed 0b	inc $0bed			inc 	gY1+1
.1a7e					_BEDXSkip:
.1a7e	20 f8 1b	jsr $1bf8			jsr 	gdMvDown
.1a81	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/plot.asm

.1a82					Command_Plot:
.1a82	a9 8a		lda #$8a			lda 	#PlotHandler & $FF
.1a84	a2 1a		ldx #$1a			ldx 	#PlotHandler >> 8
.1a86	20 cc 18	jsr $18cc			jsr 	GHandler
.1a89	60		rts				rts
.1a8a					PlotHandler:
.1a8a	a0 00		ldy #$00			ldy 	#gX1-gX1
.1a8c	20 2d 1b	jsr $1b2d			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1a8f	b0 03		bcs $1a94			bcs 	_PHExit 					; off screen, return with CS.
.1a91	20 9c 1c	jsr $1c9c			jsr 	gdPlotInk 					; pixel in Ink.
.1a94	60		rts		_PHExit:rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/rectframe.asm

.0c02					frameFlag:
>0c02							.fill 	1
.1a95					Command_Rect:
.1a95	a9 a9		lda #$a9			lda 	#RectHandler & $FF
.1a97	a2 1a		ldx #$1a			ldx 	#RectHandler >> 8
.1a99	20 cc 18	jsr $18cc			jsr 	GHandler
.1a9c	60		rts				rts
.1a9d					Command_Frame:
.1a9d	a9 a5		lda #$a5			lda 	#FrameHandler & $FF
.1a9f	a2 1a		ldx #$1a			ldx 	#FrameHandler >> 8
.1aa1	20 cc 18	jsr $18cc			jsr 	GHandler
.1aa4	60		rts				rts
.1aa5					FrameHandler:
.1aa5	a9 01		lda #$01			lda 	#1
.1aa7	d0 02		bne $1aab			bne 	RectHandler+2
.1aa9					RectHandler:
.1aa9	a9 00		lda #$00			lda 	#0
.1aab	8d 02 0c	sta $0c02			sta 	frameFlag
.1aae	20 67 1b	jsr $1b67			jsr 	BoxSort 					; sort so topleft/bottom right
.1ab1	20 dc 1a	jsr $1adc			jsr 	DrawBoxPart 				; solid first line
.1ab4	b0 25		bcs $1adb			bcs 	_FHExit
.1ab6					_FHLoop:
.1ab6	a2 02		ldx #$02			ldx 	#gY1-gX1 					; check Y1 = Y2
.1ab8	a0 06		ldy #$06			ldy 	#gY2-gX1
.1aba	20 43 1b	jsr $1b43			jsr 	CompareCoords
.1abd	b0 19		bcs $1ad8			bcs 	_FHLastLine 				; Y1 >= Y2 then end.
.1abf	ad 02 0c	lda $0c02			lda 	frameFlag 					; identify solid or frame ?
.1ac2	f0 06		beq $1aca			beq 	_FHIsSolidRect
.1ac4	20 f8 1a	jsr $1af8			jsr 	DrawBoxEnds
.1ac7	4c cd 1a	jmp $1acd			jmp 	_FHNext
.1aca					_FHIsSolidRect:
.1aca	20 dc 1a	jsr $1adc			jsr 	DrawBoxPart
.1acd					_FHNext:
.1acd	ee ec 0b	inc $0bec			inc 	gY1 						; bump Y1 and loop back.
.1ad0	d0 e4		bne $1ab6			bne 	_FHLoop
.1ad2	ee ed 0b	inc $0bed			inc 	gY1+1
.1ad5	4c b6 1a	jmp $1ab6			jmp 	_FHLoop
.1ad8					_FHLastLine:
.1ad8	20 dc 1a	jsr $1adc			jsr 	DrawBoxPart 				; solid last line whatever
.1adb					_FHExit:
.1adb	60		rts				rts
.1adc					DrawBoxPart:
.1adc	a0 00		ldy #$00			ldy 	#gX1-gX1
.1ade	20 2d 1b	jsr $1b2d			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1ae1	b0 14		bcs $1af7			bcs 	_DBPExit 					; off screen, return with CS.
.1ae3	38		sec				sec 								; calculate line length => temp0
.1ae4	ad ee 0b	lda $0bee			lda 	gX2
.1ae7	ed ea 0b	sbc $0bea			sbc 	gX1
.1aea	48		pha				pha
.1aeb	ad ef 0b	lda $0bef			lda 	gX2+1
.1aee	ed eb 0b	sbc $0beb			sbc 	gx1+1
.1af1	aa		tax				tax
.1af2	68		pla				pla 								; line length in XA.
.1af3	20 14 1b	jsr $1b14			jsr 	DrawHorizontalLine
.1af6	18		clc				clc
.1af7					_DBPExit:
.1af7	60		rts				rts
.1af8					DrawBoxEnds:
.1af8	a0 00		ldy #$00			ldy 	#gX1-gX1
.1afa	20 2d 1b	jsr $1b2d			jsr 	SetupXY 					; set up X1,Y1 to draw.
.1afd	b0 14		bcs $1b13			bcs 	_DBEExit 					; off screen, return with CS.
.1aff	20 9c 1c	jsr $1c9c			jsr 	gdPlotInk 					; LH end.
.1b02	ad ee 0b	lda $0bee			lda 	gX2 						; set position to X2,Y1
.1b05	ae ef 0b	ldx $0bef			ldx 	gX2+1
.1b08	20 46 1d	jsr $1d46			jsr 	gdSetX
.1b0b	20 27 1c	jsr $1c27			jsr 	gdUpdatePixelOffset 		; update position.
.1b0e	b0 03		bcs $1b13			bcs 	_DBEExit 					; off screen, return with CS.
.1b10	20 9c 1c	jsr $1c9c			jsr 	gdPlotInk 					; RH end.
.1b13					_DBEExit:
.1b13	60		rts				rts
.1b14					DrawHorizontalLine:
.1b14	86 2d		stx $2d				stx 	temp1+1
.1b16	85 2c		sta $2c				sta 	temp1
.1b18					_DVLLoop:
.1b18	20 9c 1c	jsr $1c9c			jsr 	gdPlotInk
.1b1b	20 a8 1b	jsr $1ba8			jsr		gdMvRight
.1b1e	b0 0c		bcs $1b2c			bcs 	_DVLExit
.1b20	a5 2c		lda $2c				lda 	temp1
.1b22	d0 02		bne $1b26			bne 	_DVLNoBorrow
.1b24	c6 2d		dec $2d				dec 	temp1+1
.1b26					_DVLNoBorrow:
.1b26	c6 2c		dec $2c				dec 	temp1
.1b28	a5 2d		lda $2d				lda 	temp1+1
.1b2a	10 ec		bpl $1b18			bpl 	_DVLLoop
.1b2c					_DVLExit:
.1b2c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/graphics/utils.asm

.1b2d					SetupXY:
.1b2d	b9 ea 0b	lda $0bea,y			lda 	gX1,y
.1b30	be eb 0b	ldx $0beb,y			ldx 	gX1+1,y
.1b33	20 46 1d	jsr $1d46			jsr 	gdSetX
.1b36	b9 ec 0b	lda $0bec,y			lda 	gY1,y
.1b39	be ed 0b	ldx $0bed,y			ldx 	gY1+1,y
.1b3c	20 4d 1d	jsr $1d4d			jsr 	gdSetY
.1b3f	20 27 1c	jsr $1c27			jsr 	gdUpdatePixelOffset
.1b42	60		rts				rts
.1b43					CompareCoords:
.1b43	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b46	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b49	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b4c	f9 eb 0b	sbc $0beb,y			sbc 	gX1+1,y
.1b4f	60		rts				rts
.1b50					CompareCoordsSigned:
.1b50	20 43 1b	jsr $1b43			jsr 	CompareCoords
.1b53	50 02		bvc $1b57			bvc 	_CCSExit
.1b55	49 80		eor #$80			eor 	#$80
.1b57					_CCSExit:
.1b57	60		rts				rts
.1b58					CompareCoordsEq:
.1b58	bd ea 0b	lda $0bea,x			lda 	gX1,x
.1b5b	d9 ea 0b	cmp $0bea,y			cmp 	gX1,y
.1b5e	d0 06		bne $1b66			bne 	_CCEExit
.1b60	bd eb 0b	lda $0beb,x			lda 	gX1+1,x
.1b63	d9 eb 0b	cmp $0beb,y			cmp 	gX1+1,y
.1b66					_CCEExit:
.1b66	60		rts				rts
.1b67					BoxSort:
.1b67	a2 00		ldx #$00			ldx 	#gx1-gx1
.1b69	a0 04		ldy #$04			ldy 	#gx2-gx1
.1b6b	20 7c 1b	jsr $1b7c			jsr 	GCompareCoords
.1b6e	20 89 1b	jsr $1b89			jsr 	GSortMinMaxCoords
.1b71	a2 02		ldx #$02			ldx 	#gy1-gx1
.1b73	a0 06		ldy #$06			ldy 	#gy2-gx1
.1b75	20 7c 1b	jsr $1b7c			jsr 	GCompareCoords
.1b78	20 89 1b	jsr $1b89			jsr 	GSortMinMaxCoords
.1b7b	60		rts				rts
.1b7c					GCompareCoords:
.1b7c	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1b7f	d9 ea 0b	cmp $0bea,y			cmp 	gx1,y
.1b82	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1b85	f9 eb 0b	sbc $0beb,y			sbc 	gx1+1,y
.1b88	60		rts				rts
.1b89					GSortMinMaxCoords:
.1b89	90 1c		bcc $1ba7			bcc 	GSMMCExit
.1b8b					GSwapCoords:
.1b8b	bd ea 0b	lda $0bea,x			lda 	gx1,x
.1b8e	48		pha				pha
.1b8f	b9 ea 0b	lda $0bea,y			lda 	gx1,y
.1b92	9d ea 0b	sta $0bea,x			sta 	gx1,x
.1b95	68		pla				pla
.1b96	99 ea 0b	sta $0bea,y			sta 	gx1,y
.1b99	bd eb 0b	lda $0beb,x			lda 	gx1+1,x
.1b9c	48		pha				pha
.1b9d	b9 eb 0b	lda $0beb,y			lda 	gx1+1,y
.1ba0	9d eb 0b	sta $0beb,x			sta 	gx1+1,x
.1ba3	68		pla				pla
.1ba4	99 eb 0b	sta $0beb,y			sta 	gx1+1,y
.1ba7					GSMMCExit:
.1ba7	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/coords.asm

.1ba8					gdMvRight:
.1ba8	ee 20 9f	inc $9f20			inc 	$9F20 						; bump $9F20
.1bab	d0 08		bne $1bb5			bne 	_gdMR0
.1bad	ee 21 9f	inc $9f21			inc 	$9F21
.1bb0	d0 03		bne $1bb5			bne 	_gdMR0
.1bb2	ee 22 9f	inc $9f22			inc 	$9F22
.1bb5					_gdMR0:
.1bb5	ee 09 0c	inc $0c09			inc 	gdXPos
.1bb8	d0 03		bne $1bbd			bne 	_gdMR1
.1bba	ee 0a 0c	inc $0c0a			inc 	gdXPos+1
.1bbd					_gdMR1:
.1bbd	ad 0a 0c	lda $0c0a			lda 	gdXPos+1		 			; check MSB
.1bc0	f0 0b		beq $1bcd			beq 	gdMOnScreen
.1bc2	c9 02		cmp #$02			cmp 	#2
.1bc4	b0 09		bcs $1bcf			bcs 	gdmOffScreen
.1bc6	ad 09 0c	lda $0c09			lda 	gdXPos 						; $01xx check < $140
.1bc9	c9 40		cmp #$40			cmp 	#$40
.1bcb	b0 02		bcs $1bcf			bcs 	gdmOffScreen
.1bcd					gdmOnScreen:
.1bcd	18		clc				clc
.1bce	60		rts				rts
.1bcf					gdmOffScreen:
.1bcf	38		sec				sec
.1bd0	60		rts				rts
.1bd1					gdMvUp:
.1bd1	ad 0b 0c	lda $0c0b			lda 	gdYPos 						; decrement Y Pos
.1bd4	d0 03		bne $1bd9			bne 	_gdMU1
.1bd6	ce 0c 0c	dec $0c0c			dec 	gdYPos+1
.1bd9	ce 0b 0c	dec $0c0b	_gdMU1:	dec 	gdYPos
.1bdc	38		sec				sec 								; adjust position by -320
.1bdd	ad 20 9f	lda $9f20			lda 	$9F20
.1be0	e9 40		sbc #$40			sbc 	#64
.1be2	8d 20 9f	sta $9f20			sta 	$9F20
.1be5	ad 21 9f	lda $9f21			lda 	$9F21
.1be8	e9 01		sbc #$01			sbc 	#1
.1bea	8d 21 9f	sta $9f21			sta 	$9F21
.1bed	ad 22 9f	lda $9f22			lda 	$9F22
.1bf0	e9 00		sbc #$00			sbc 	#0
.1bf2	8d 22 9f	sta $9f22			sta 	$9F22
.1bf5	4c 19 1c	jmp $1c19			jmp 	gdCheckYRange
.1bf8					gdMvDown:
.1bf8	ee 0b 0c	inc $0c0b			inc 	gdYPos 						; decrement Y Pos
.1bfb	d0 03		bne $1c00			bne 	_gdMU1
.1bfd	ee 0c 0c	inc $0c0c			inc 	gdYPos+1
.1c00					_gdMU1:
.1c00	18		clc				clc 								; adjust position by -320
.1c01	ad 20 9f	lda $9f20			lda 	$9F20
.1c04	69 40		adc #$40			adc 	#64
.1c06	8d 20 9f	sta $9f20			sta 	$9F20
.1c09	ad 21 9f	lda $9f21			lda 	$9F21
.1c0c	69 01		adc #$01			adc 	#1
.1c0e	8d 21 9f	sta $9f21			sta 	$9F21
.1c11	ad 22 9f	lda $9f22			lda 	$9F22
.1c14	69 00		adc #$00			adc 	#0
.1c16	8d 22 9f	sta $9f22			sta 	$9F22
.1c19					gdCheckYRange:
.1c19	ad 0c 0c	lda $0c0c			lda 	gdYPos+1
.1c1c	d0 b1		bne $1bcf			bne 	gdmOffScreen
.1c1e	ad 0b 0c	lda $0c0b			lda 	gdYPos
.1c21	c9 c8		cmp #$c8			cmp 	#200
.1c23	b0 aa		bcs $1bcf			bcs 	gdmOffScreen
.1c25	90 a6		bcc $1bcd			bcc 	gdmOnScreen
.1c27					gdUpdatePixelOffset:
.1c27	ad 0a 0c	lda $0c0a			lda 	gdXPos+1 					; check X < 320 ($140)
.1c2a	f0 0b		beq $1c37			beq 	_gdUPOCheckY
.1c2c	c9 02		cmp #$02			cmp 	#2
.1c2e	b0 13		bcs $1c43			bcs 	_gdUPOBad
.1c30	ad 09 0c	lda $0c09			lda 	gdXPos
.1c33	c9 40		cmp #$40			cmp 	#$40
.1c35	b0 0c		bcs $1c43			bcs 	_gdUPOBad
.1c37					_gdUPOCheckY:
.1c37	ad 0c 0c	lda $0c0c			lda 	gdYPos+1 					; check Y < 200
.1c3a	d0 0e		bne $1c4a			bne 	_gdUPOCalculate
.1c3c	ad 0b 0c	lda $0c0b			lda 	gdYPos
.1c3f	c9 c8		cmp #$c8			cmp 	#200
.1c41	90 07		bcc $1c4a			bcc 	_gdUPOCalculate
.1c43					_gdUPOBad:
.1c43	a9 00		lda #$00			lda 	#0
.1c45	8d 0d 0c	sta $0c0d			sta 	gdIsPosOkay
.1c48	38		sec				sec
.1c49	60		rts				rts
.1c4a					_gdUPOCalculate:
.1c4a	a9 00		lda #$00			lda 	#0 							; temp0 is LSB of result start as 256 x Y
.1c4c	85 2a		sta $2a				sta 	temp0
.1c4e	ad 0b 0c	lda $0c0b			lda 	gdYPos
.1c51	85 2b		sta $2b				sta 	temp0+1
.1c53	46 2b		lsr $2b				lsr 	temp0+1 					; / 4 so temp0 is YC x 64
.1c55	66 2a		ror $2a				ror 	temp0
.1c57	46 2b		lsr $2b				lsr 	temp0+1
.1c59	66 2a		ror $2a				ror 	temp0
.1c5b	ad 0b 0c	lda $0c0b			lda 	gdYPos 						; add 256 x Y => 320 * Y < 64k
.1c5e	18		clc				clc
.1c5f	65 2b		adc $2b				adc 	temp0+1
.1c61	85 2b		sta $2b				sta 	temp0+1 					; temp0 = 320 x Y now add X => pixeloffset
.1c63	18		clc				clc
.1c64	a5 2a		lda $2a				lda 	temp0
.1c66	6d 09 0c	adc $0c09			adc 	gdXPos
.1c69	8d 07 0c	sta $0c07			sta 	gdPixelOffset
.1c6c	a5 2b		lda $2b				lda 	temp0+1
.1c6e	6d 0a 0c	adc $0c0a			adc 	gdXPos+1
.1c71	8d 08 0c	sta $0c08			sta 	gdPixelOffset+1
.1c74	a9 01		lda #$01			lda 	#1 							; it's legitimate.
.1c76	8d 0d 0c	sta $0c0d			sta 	gdIsPosOkay
.1c79	20 7e 1c	jsr $1c7e			jsr 	gdCopyPosition 				; copy position over
.1c7c	18		clc				clc
.1c7d	60		rts				rts
.1c7e					gdCopyPosition:
.1c7e	48		pha				pha
.1c7f	18		clc				clc
.1c80	ad 04 0c	lda $0c04			lda 	gdBitmapAddress
.1c83	6d 07 0c	adc $0c07			adc 	gdPixelOffset
.1c86	8d 20 9f	sta $9f20			sta 	$9F20
.1c89	ad 05 0c	lda $0c05			lda 	gdBitmapAddress+1
.1c8c	6d 08 0c	adc $0c08			adc 	gdPixelOffset+1
.1c8f	8d 21 9f	sta $9f21			sta 	$9F21
.1c92	ad 06 0c	lda $0c06			lda 	gdBitmapAddress+2
.1c95	69 00		adc #$00			adc 	#0
.1c97	8d 22 9f	sta $9f22			sta 	$9F22
.1c9a	68		pla				pla
.1c9b	60		rts				rts
.1c9c					gdPlotInk:
.1c9c	ad 0e 0c	lda $0c0e			lda 	gdInk
.1c9f	8d 23 9f	sta $9f23			sta 	$9F23
.1ca2	60		rts				rts
.1ca3					gdPlotPaper:
.1ca3	ad 0f 0c	lda $0c0f			lda 	gdPaper
.1ca6	c9 ff		cmp #$ff			cmp 	#$FF
.1ca8	f0 03		beq $1cad			beq 	_gdPPSkip
.1caa	8d 23 9f	sta $9f23			sta 	$9F23
.1cad					_gdPPSkip:
.1cad	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/driver/driver.asm

.0c03					gdEnabled:
>0c03							.fill 	1
.0c04					gdBitmapAddress:
>0c04							.fill 	3
.0c07					gdPixelOffset:
>0c07							.fill 	2
.0c09					gdXPos:
>0c09							.fill 	2
.0c0b					gdYPos:
>0c0b							.fill 	2
.0c0d					gdIsPosOkay:
>0c0d							.fill 	1
.0c0e					gdInk:
>0c0e							.fill 	1
.0c0f					gdPaper:
>0c0f							.fill 	1
.1cae					gdModeChanged:
.1cae	8a		txa				txa
.1caf	48		pha				pha
.1cb0	98		tya				tya
.1cb1	48		pha				pha
.1cb2	a9 00		lda #$00			lda 	#0 							; zero the enabled flag.
.1cb4	8d 03 0c	sta $0c03			sta 	gdEnabled
.1cb7	ad 2a 9f	lda $9f2a			lda 	$9F2A 						; requires $40 for H/V Scale
.1cba	c9 40		cmp #$40			cmp 	#$40
.1cbc	d0 1f		bne $1cdd			bne 	_gdExit
.1cbe	ad 2b 9f	lda $9f2b			lda 	$9F2B
.1cc1	c9 40		cmp #$40			cmp 	#$40
.1cc3	d0 18		bne $1cdd			bne 	_gdExit
.1cc5	ad 29 9f	lda $9f29			lda 	$9F29 						; read DC_Video, see which layers are enabled.
.1cc8	0a		asl a				asl 	a 							;
.1cc9	0a		asl a				asl 	a 							; bit 7 now set if layer 1 enabled.
.1cca	10 09		bpl $1cd5			bpl 	_gdNotLayer1
.1ccc	48		pha				pha 								; save A
.1ccd	a2 07		ldx #$07			ldx 	#7 							; check offset 7 (e.g. start at $9F34)
.1ccf	20 e5 1c	jsr $1ce5			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1cd2	68		pla				pla 								; restore A
.1cd3	b0 08		bcs $1cdd			bcs 	_gdExit 					; if successful then exit
.1cd5					_gdNotLayer1:
.1cd5	0a		asl a				asl 	a 							; bit 7 now set if layer 0 enabled.
.1cd6	10 05		bpl $1cdd			bpl 	_gdExit 					; if not enabled, exit
.1cd8	a2 00		ldx #$00			ldx 	#0 							; check offset 0 (e.g. start at $9F2D)
.1cda	20 e5 1c	jsr $1ce5			jsr 	gdCheckBitmap 				; go see if this is a bitmap
.1cdd					_gdExit:
.1cdd	20 02 1d	jsr $1d02			jsr 	gdClearGraphics 			; clear graphics display.
.1ce0	68		pla				pla
.1ce1	a8		tay				tay
.1ce2	68		pla				pla
.1ce3	aa		tax				tax
.1ce4	60		rts				rts
.1ce5					gdCheckBitmap:
.1ce5	bd 2d 9f	lda $9f2d,x			lda 	$9F2D,x 					; look at bitmap bit.
.1ce8	c9 07		cmp #$07			cmp 	#7 							; must be zero map size, bitmap and 8bpp
.1cea	d0 14		bne $1d00			bne 	_gdCBFail
.1cec	ee 03 0c	inc $0c03			inc 	gdEnabled 					; set the enabled flag to non zero.
.1cef	bd 2f 9f	lda $9f2f,x			lda 	$9F2F,x 					; this is the bitmap address / 2
.1cf2	0a		asl a				asl 	a
.1cf3	8d 05 0c	sta $0c05			sta 	gdBitmapAddress+1
.1cf6	69 00		adc #$00			adc 	#$00 						; set to no move, updated manually.
.1cf8	8d 06 0c	sta $0c06			sta 	gdBitmapAddress+2
.1cfb	a9 00		lda #$00			lda 	#$00
.1cfd	8d 04 0c	sta $0c04			sta 	gdBitmapAddress 			; this is a 17 bit address.
.1d00					_gdCBFail:
.1d00	18		clc				clc
.1d01	60		rts				rts
.1d02					gdClearGraphics:
.1d02	8a		txa				txa
.1d03	48		pha				pha
.1d04	98		tya				tya
.1d05	48		pha				pha
.1d06	ad 03 0c	lda $0c03			lda 	gdEnabled 					; screen enabled
.1d09	f0 2e		beq $1d39			beq 	_gdCGExit
.1d0b	a9 00		lda #$00			lda 	#0 							; reset position
.1d0d	8d 0d 0c	sta $0c0d			sta 	gdIsPosOkay 				; not legal position
.1d10	8d 07 0c	sta $0c07			sta 	gdPixelOffset 				; zero pixel offset.
.1d13	8d 08 0c	sta $0c08			sta 	gdPixelOffset+1
.1d16	8d 0f 0c	sta $0c0f			sta 	gdPaper 					; paper black
.1d19	20 7e 1c	jsr $1c7e			jsr 	gdCopyPosition
.1d1c	ad 22 9f	lda $9f22			lda 	$9F22 						; make it autoincrement.
.1d1f	09 10		ora #$10			ora 	#$10
.1d21	8d 22 9f	sta $9f22			sta 	$9F22
.1d24	a9 01		lda #$01			lda 	#1 							; ink white
.1d26	8d 0e 0c	sta $0c0e			sta 	gdInk
.1d29	a0 fa		ldy #$fa			ldy 	#$FA						; 320 x 200 pixels = $FA00
.1d2b	a2 00		ldx #$00			ldx 	#0
.1d2d	ad 0f 0c	lda $0c0f			lda 	gdPaper
.1d30					_gdCGLoop1:
.1d30	8d 23 9f	sta $9f23			sta 	$9F23
.1d33	ca		dex				dex
.1d34	d0 fa		bne $1d30			bne 	_gdCGLoop1
.1d36	88		dey				dey
.1d37	d0 f7		bne $1d30			bne 	_gdCGLoop1
.1d39					_gdCGExit:
.1d39	68		pla				pla
.1d3a	a8		tay				tay
.1d3b	68		pla				pla
.1d3c	aa		tax				tax
.1d3d	60		rts				rts
.1d3e					gdSetInk:
.1d3e	8d 0e 0c	sta $0c0e			sta 	gdInk
.1d41	60		rts				rts
.1d42					gdSetPaper:
.1d42	8d 0f 0c	sta $0c0f			sta 	gdPaper
.1d45	60		rts				rts
.1d46					gdSetX:
.1d46	8d 09 0c	sta $0c09			sta 	gdXPos
.1d49	8e 0a 0c	stx $0c0a			stx 	gdXPos+1
.1d4c	60		rts				rts
.1d4d					gdSetY:
.1d4d	8d 0b 0c	sta $0c0b			sta 	gdYPos
.1d50	8e 0c 0c	stx $0c0c			stx 	gdYPos+1
.1d53	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/clock.asm

.1d54					Unary_Clock:
.1d54	a2 0c		ldx #$0c		ldx	#12
.1d56	20 ea 3b	jsr $3bea		jsr	mainHandler
.1d59	48		pha				pha 								; save stack pos
.1d5a	a2 04		ldx #$04		ldx	#4
.1d5c	20 ea 3b	jsr $3bea		jsr	mainHandler
.1d5f	98		tya				tya
.1d60	48		pha				pha
.1d61	20 50 ff	jsr $ff50			jsr 	$FF50
.1d64	68		pla				pla
.1d65	a8		tay				tay
.1d66	68		pla				pla 								; restore, repush, put into X to read offset
.1d67	48		pha				pha
.1d68	aa		tax				tax
.1d69	b5 98		lda $98,x			lda 	esInt0,x 					; must be 0-5
.1d6b	c9 06		cmp #$06			cmp 	#6
.1d6d	b0 0d		bcs $1d7c			bcs 	_UCValue
.1d6f	aa		tax				tax 								; index in X and read RTC.
.1d70	b5 02		lda $02,x			lda 	2,x
.1d72	85 32		sta $32				sta 	tempshort
.1d74	68		pla				pla 								; restore number stack index.
.1d75	aa		tax				tax
.1d76	a5 32		lda $32				lda 	tempShort
.1d78	95 98		sta $98,x			sta 	esInt0,x 					; rest are set up.
.1d7a	8a		txa				txa
.1d7b	60		rts				rts
.1d7c					_UCValue:
.1d7c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d7e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/miscellany/joystick.asm

.1d81					Unary_JoyX:
.1d81	38		sec				sec
.1d82	b0 01		bcs $1d85			bcs 	JoystickRead
.1d84					Unary_JoyY:
.1d84	18		clc				clc
.1d85					JoystickRead:
.1d85	48		pha				pha 								; save stack position
.1d86	08		php				php 								; save test flag.
.1d87	a2 04		ldx #$04		ldx	#4
.1d89	20 ea 3b	jsr $3bea		jsr	mainHandler
.1d8c	20 e6 1d	jsr $1de6			jsr 	ReadJoystick 				; read it.
.1d8f	28		plp				plp
.1d90	b0 02		bcs $1d94			bcs 	_JRNoShift 					; if Y, shift right twice so accessing Y buttons
.1d92	4a		lsr a				lsr 	a
.1d93	4a		lsr a				lsr 	a
.1d94					_JRNoShift:
.1d94	29 03		and #$03			and 	#3 							; isolate the test bits.
.1d96	f0 0d		beq $1da5			beq 	JoyReturnA 					; if nothing pressed, return A.
.1d98	c9 03		cmp #$03			cmp 	#3
.1d9a	f0 07		beq $1da3			beq 	JoyReturnFalse 				; could be both on a keyboard.
.1d9c	4a		lsr a				lsr 	a 							; bit 0 set, its +1
.1d9d	b0 16		bcs $1db5			bcs 	JoyReturn1
.1d9f					JoyReturnTrue:
.1d9f	a9 ff		lda #$ff			lda 	#$FF
.1da1	d0 02		bne $1da5			bne 	JoyReturnA
.1da3					JoyReturnFalse:
.1da3	a9 00		lda #$00			lda 	#0
.1da5					JoyReturnA:
.1da5	85 32		sta $32				sta 	tempShort 					; return A
.1da7	68		pla				pla
.1da8	aa		tax				tax
.1da9	a5 32		lda $32				lda 	tempShort
.1dab	95 98		sta $98,x			sta 	esInt0,x
.1dad					JoyReturn13:
.1dad	95 a0		sta $a0,x			sta 	esInt1,x
.1daf	95 a8		sta $a8,x			sta 	esInt2,x
.1db1	95 b0		sta $b0,x			sta 	esInt3,x
.1db3	8a		txa				txa 								; return NSP in A
.1db4	60		rts				rts
.1db5					JoyReturn1:
.1db5	68		pla				pla
.1db6	aa		tax				tax
.1db7	a9 01		lda #$01			lda 	#1
.1db9	95 98		sta $98,x			sta 	esInt0,x
.1dbb	a9 00		lda #$00			lda 	#0
.1dbd	f0 ee		beq $1dad			beq 	JoyReturn13
.1dbf					Unary_JButton:
.1dbf	48		pha				pha 								; save X on stack, put in X
.1dc0	a2 0c		ldx #$0c		ldx	#12
.1dc2	20 ea 3b	jsr $3bea		jsr	mainHandler
.1dc5	aa		tax				tax 								; get value to check, push on stack.
.1dc6	b5 98		lda $98,x			lda 	esInt0,x
.1dc8	c9 04		cmp #$04			cmp 	#4 							; check button 0-3
.1dca	b0 15		bcs $1de1			bcs 	_UJBadValue
.1dcc	69 05		adc #$05			adc 	#5 							; four more shifts to get the bit into carry.
.1dce	48		pha				pha 								; save that shift count on the stack.
.1dcf	a2 04		ldx #$04		ldx	#4
.1dd1	20 ea 3b	jsr $3bea		jsr	mainHandler
.1dd4	68		pla				pla
.1dd5	aa		tax				tax
.1dd6	20 e6 1d	jsr $1de6			jsr 	ReadJoystick 				; joystick read
.1dd9					_UJShift:
.1dd9	4a		lsr a				lsr 	a
.1dda	ca		dex				dex
.1ddb	d0 fc		bne $1dd9			bne 	_UJShift
.1ddd	b0 c0		bcs $1d9f			bcs 	JoyReturnTrue
.1ddf	90 c2		bcc $1da3			bcc 	JoyReturnFalse
.1de1					_UJBadValue:
.1de1	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1de3	20 18 15	jsr $1518		jsr	errorHandler
.1de6					ReadJoystick:
.1de6	8a		txa				txa
.1de7	48		pha				pha
.1de8	98		tya				tya
.1de9	48		pha				pha
.1dea	a9 00		lda #$00			lda 	#0
.1dec	20 56 ff	jsr $ff56			jsr 	$FF56
.1def	c0 00		cpy #$00			cpy 	#0
.1df1	d0 11		bne $1e04			bne 	_RJError
.1df3	c9 00		cmp #$00			cmp 	#0 							; bug, returns $00 initially
.1df5	d0 02		bne $1df9			bne 	_RJNoBug
.1df7	a9 ff		lda #$ff			lda 	#$FF
.1df9					_RJNoBug:
.1df9	85 32		sta $32				sta 	tempShort
.1dfb	68		pla				pla
.1dfc	a8		tay				tay
.1dfd	68		pla				pla
.1dfe	aa		tax				tax
.1dff	a5 32		lda $32				lda 	tempShort
.1e01	49 ff		eor #$ff			eor 	#$FF 						; active 1 bit.
.1e03	60		rts				rts
.1e04					_RJError:
.1e04	a2 28		ldx #$28			ldx 	#ErrorID_Hardware
.1e06	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/collide.asm

.0c10					hitSprite1:
>0c10							.fill 	1 							; this won't work ... if you nest HIT() which
.0c11					hitSprite2:
>0c11							.fill 	1
.0c12					hitRange:
>0c12							.fill 	1
.1e09					FunctionCollide:
.1e09	48		pha				pha 								; save and put index into X
.1e0a	aa		tax				tax
.1e0b	a9 00		lda #$00			lda 	#0 							; set hit range to default.
.1e0d	8d 12 0c	sta $0c12			sta 	hitRange
.1e10	20 b5 1e	jsr $1eb5			jsr 	_FCGetSpriteID
.1e13	8d 10 0c	sta $0c10			sta 	hitSprite1
.1e16	8a		txa				txa
.1e17	48		pha				pha
.1e18	a2 02		ldx #$02		ldx	#2
.1e1a	20 ea 3b	jsr $3bea		jsr	mainHandler
.1e1d	68		pla				pla
.1e1e	aa		tax				tax
.1e1f	20 b5 1e	jsr $1eb5			jsr 	_FCGetSpriteID
.1e22	8d 11 0c	sta $0c11			sta 	hitSprite2
.1e25	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a third parameter
.1e27	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1e29	f0 13		beq $1e3e			beq 	_FCParam2
.1e2b	8a		txa				txa
.1e2c	48		pha				pha
.1e2d	a2 02		ldx #$02		ldx	#2
.1e2f	20 ea 3b	jsr $3bea		jsr	mainHandler
.1e32	68		pla				pla
.1e33	a2 0c		ldx #$0c		ldx	#12
.1e35	20 ea 3b	jsr $3bea		jsr	mainHandler
.1e38	aa		tax				tax
.1e39	b5 98		lda $98,x			lda 	esInt0,x
.1e3b	8d 12 0c	sta $0c12			sta 	hitRange
.1e3e					_FCParam2:
.1e3e	a2 04		ldx #$04		ldx	#4
.1e40	20 ea 3b	jsr $3bea		jsr	mainHandler
.1e43	68		pla				pla 								; set X to point to the stack again.
.1e44	48		pha				pha
.1e45	aa		tax				tax
.1e46	98		tya				tya
.1e47	48		pha				pha
.1e48	18		clc				clc 								; do it with the horizontal values.
.1e49	20 6b 1e	jsr $1e6b			jsr 	_FCCheck
.1e4c	90 0a		bcc $1e58			bcc 	_FCFail
.1e4e	38		sec				sec 								; do it with the vertical values.
.1e4f	20 6b 1e	jsr $1e6b			jsr 	_FCCheck
.1e52	90 04		bcc $1e58			bcc 	_FCFail
.1e54	a9 ff		lda #$ff			lda 	#255 						; pass, return -1
.1e56	d0 02		bne $1e5a			bne 	_FCReturnA
.1e58					_FCFail:
.1e58	a9 00		lda #$00			lda 	#0 							; return 0, it didn't work.
.1e5a					_FCReturnA:
.1e5a	85 32		sta $32				sta 	tempShort 					; put result in tempShort
.1e5c	68		pla				pla
.1e5d	a8		tay				tay
.1e5e	68		pla				pla 								; restore stack, return result and exit.
.1e5f	aa		tax				tax
.1e60	a5 32		lda $32				lda 	tempShort
.1e62	95 98		sta $98,x			sta 	esInt0,x
.1e64	95 a0		sta $a0,x			sta 	esInt1,x
.1e66	95 a8		sta $a8,x			sta 	esInt2,x
.1e68	95 b0		sta $b0,x			sta 	esInt3,x
.1e6a	60		rts				rts
.1e6b					_FCCheck:
.1e6b	08		php				php 								; save the H/V flag twice
.1e6c	08		php				php
.1e6d	ad 10 0c	lda $0c10			lda 	hitSprite1 					; select sprite 1 and read its location
.1e70	20 f3 1f	jsr $1ff3			jsr 	SelectSpriteA 				; into X
.1e73	28		plp				plp
.1e74	20 55 20	jsr $2055			jsr 	SpriteReadCoordinate
.1e77	ad 11 0c	lda $0c11			lda 	hitSprite2					; now repeat for sprite 2 and location X+1
.1e7a	20 f3 1f	jsr $1ff3			jsr 	SelectSpriteA
.1e7d	e8		inx				inx
.1e7e	28		plp				plp
.1e7f	20 55 20	jsr $2055			jsr 	SpriteReadCoordinate
.1e82	ca		dex				dex
.1e83	38		sec				sec 								; calculate |s1.c-s2.c| put in temp0
.1e84	b5 98		lda $98,x			lda 	esInt0,x
.1e86	f5 99		sbc $99,x			sbc 	esInt0+1,x
.1e88	85 2a		sta $2a				sta 	temp0
.1e8a	b5 a0		lda $a0,x			lda 	esInt1,x
.1e8c	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.1e8e	85 2b		sta $2b				sta 	temp0+1
.1e90	10 0d		bpl $1e9f			bpl 	_FCCIsPositive
.1e92	38		sec				sec 								; if -ve calculate |difference|
.1e93	a9 00		lda #$00			lda 	#0
.1e95	e5 2a		sbc $2a				sbc 	temp0
.1e97	85 2a		sta $2a				sta 	temp0
.1e99	a9 00		lda #$00			lda 	#0
.1e9b	e5 2b		sbc $2b				sbc 	temp0+1
.1e9d	85 2b		sta $2b				sta 	temp0+1
.1e9f					_FCCIsPositive:
.1e9f	a5 2b		lda $2b				lda 	temp0+1 					; if range >= 256 then definitely fail.
.1ea1	d0 10		bne $1eb3			bne 	_FCCFail
.1ea3	18		clc				clc 								; work out required min distance which is
.1ea4	b5 b0		lda $b0,x			lda 	esInt3,x 					; the sum of the half width/heights
.1ea6	75 b1		adc $b1,x			adc 	esInt3+1,x
.1ea8	ac 12 0c	ldy $0c12			ldy 	hitRange 					; get the hit range
.1eab	f0 01		beq $1eae			beq 	_FCCNoSetRange 				; override if non zero.
.1ead	98		tya				tya
.1eae					_FCCNoSetRange:
.1eae	c5 2a		cmp $2a				cmp 	temp0 						; result is range > distance
.1eb0	f0 01		beq $1eb3			beq 	_FCCFail
.1eb2	60		rts				rts
.1eb3					_FCCFail:
.1eb3	18		clc				clc
.1eb4	60		rts				rts
.1eb5					_FCGetSpriteID:
.1eb5	8a		txa				txa
.1eb6	a2 0c		ldx #$0c		ldx	#12
.1eb8	20 ea 3b	jsr $3bea		jsr	mainHandler
.1ebb	aa		tax				tax
.1ebc	b5 98		lda $98,x			lda 	esInt0,x
.1ebe	30 01		bmi $1ec1			bmi 	_FCGSValue
.1ec0	60		rts				rts
.1ec1					_FCGSValue:
.1ec1	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1ec3	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/sprite.asm

.0c13					currSprite:
>0c13							.fill 	2
.1ec6					CommandSprite:
.1ec6	20 c8 1f	jsr $1fc8			jsr 	CSCheckOnOff 				; look for TRUE/FALSE
.1ec9	d0 0d		bne $1ed8			bne 	_CSCheckClear
.1ecb	ad 29 9f	lda $9f29			lda 	$9F29 						; sprite enable is bit 6.
.1ece	29 bf		and #$bf			and 	#$BF 						; clear it whatever
.1ed0	90 02		bcc $1ed4			bcc 	_CSNotOn 					; if CS turn on, so set it
.1ed2	09 40		ora #$40			ora 	#$40
.1ed4					_CSNotOn:
.1ed4	8d 29 9f	sta $9f29			sta 	$9F29 						; write it back in new state and exit
.1ed7	60		rts				rts
.1ed8					_CSCheckClear:
.1ed8	a9 00		lda #$00			lda 	#0 							; no sprite currently selected.
.1eda	8d 14 0c	sta $0c14			sta 	currSprite+1
.1edd	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for CLEAR
.1edf	c9 e8		cmp #$e8			cmp 	#TKW_CLEAR
.1ee1	d0 05		bne $1ee8			bne 	_CSCommandLoop 				; not CLEAR, go to main loop
.1ee3	20 d9 1f	jsr $1fd9			jsr 	CSClearSprites 				; clear all the sprites
.1ee6	c8		iny				iny 								; consume CLEAR token and exit.
.1ee7	60		rts				rts
.1ee8					_CSCommandLoop:
.1ee8	20 c8 1f	jsr $1fc8			jsr 	CSCheckOnOff 				; check sprite on/off
.1eeb	f0 2c		beq $1f19			beq 	_CSSetVisibility
.1eed	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume character
.1eef	c9 80		cmp #$80			cmp 	#TOK_EOL					; EOL exit.
.1ef1	f0 25		beq $1f18			beq 	_CSExit
.1ef3	c8		iny				iny									; consume it
.1ef4	c9 ca		cmp #$ca			cmp 	#TKW_COLON 					; colon exit
.1ef6	f0 20		beq $1f18			beq 	_CSExit
.1ef8	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; semantic comma
.1efa	f0 ec		beq $1ee8			beq 	_CSCommandLoop
.1efc	c9 da		cmp #$da			cmp		#TKW_IMAGE 					; image ?
.1efe	f0 69		beq $1f69			beq 	_CSSetImage
.1f00	c9 dc		cmp #$dc			cmp 	#TKW_FLIP 					; flip ?
.1f02	f0 2b		beq $1f2f			beq 	_CSSetFlip
.1f04	c9 ce		cmp #$ce			cmp 	#TKW_TO 					; to ?
.1f06	f0 46		beq $1f4e			beq 	_CSSetPos
.1f08	88		dey				dey 								; unpick DEY
.1f09	a9 00		lda #$00			lda 	#0 							; sprite # now at level 0
.1f0b	a2 0c		ldx #$0c		ldx	#12
.1f0d	20 ea 3b	jsr $3bea		jsr	mainHandler
.1f10	a5 98		lda $98				lda 	esInt0
.1f12	20 f3 1f	jsr $1ff3			jsr 	SelectSpriteA
.1f15	4c e8 1e	jmp $1ee8			jmp 	_CSCommandLoop
.1f18					_CSExit:
.1f18	60		rts				rts
.1f19					_CSSetVisibility:
.1f19	08		php				php 								; save carry
.1f1a	a9 06		lda #$06			lda 	#6 							; set pos to offset 6.
.1f1c	20 af 1f	jsr $1faf			jsr 	SpriteSetTarget
.1f1f	ad 23 9f	lda $9f23			lda 	$9F23 						; read it.
.1f22	29 f3		and #$f3			and 	#$F3 						; clear depth bits, disabling it.
.1f24	28		plp				plp
.1f25	90 02		bcc $1f29			bcc 	_CSSetOff 					; check if carry was set
.1f27	09 0c		ora #$0c			ora 	#$0C 						; otherwise set depth bits to 11, on top.
.1f29					_CSSetOff:
.1f29	8d 23 9f	sta $9f23			sta 	$9F23 						; update and loop back
.1f2c	4c e8 1e	jmp $1ee8			jmp 	_CSCommandLoop
.1f2f					_CSSetFlip:
.1f2f	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f31	a2 0c		ldx #$0c		ldx	#12
.1f33	20 ea 3b	jsr $3bea		jsr	mainHandler
.1f36	a9 06		lda #$06			lda 	#6 							; set sprite position to +6
.1f38	20 af 1f	jsr $1faf			jsr 	SpriteSetTarget
.1f3b	a5 98		lda $98				lda 	esInt0 						; flip value & 3 => temp0
.1f3d	29 03		and #$03			and 	#3
.1f3f	85 2a		sta $2a				sta 	temp0
.1f41	ad 23 9f	lda $9f23			lda 	$9F23 						; update the flip.
.1f44	29 fc		and #$fc			and 	#$FC
.1f46	05 2a		ora $2a				ora 	temp0
.1f48	8d 23 9f	sta $9f23			sta 	$9F23
.1f4b	4c e8 1e	jmp $1ee8			jmp 	_CSCommandLoop
.1f4e					_CSSetPos:
.1f4e	a9 00		lda #$00			lda 	#0 							; X now at level 0
.1f50	a2 0a		ldx #$0a		ldx	#10
.1f52	20 ea 3b	jsr $3bea		jsr	mainHandler
.1f55	a2 02		ldx #$02		ldx	#2
.1f57	20 ea 3b	jsr $3bea		jsr	mainHandler
.1f5a	a9 01		lda #$01			lda 	#1 							; Y now at level 1
.1f5c	a2 0a		ldx #$0a		ldx	#10
.1f5e	20 ea 3b	jsr $3bea		jsr	mainHandler
.1f61	a2 00		ldx #$00			ldx 	#0 							; coords at 0,1
.1f63	20 11 20	jsr $2011			jsr 	SpriteMove 					; move it.
.1f66	4c e8 1e	jmp $1ee8			jmp 	_CSCommandLoop
.1f69					_CSSetImage:
.1f69	a9 00		lda #$00			lda 	#0 							; image # now at level 0
.1f6b	a2 0c		ldx #$0c		ldx	#12
.1f6d	20 ea 3b	jsr $3bea		jsr	mainHandler
.1f70	a9 00		lda #$00			lda 	#0 							; set sprite position to +0
.1f72	20 af 1f	jsr $1faf			jsr 	SpriteSetTarget
.1f75	a6 98		ldx $98				ldx 	esInt0 						; get image # into X
.1f77	bd 5a 0c	lda $0c5a,x			lda 	imageAddr2Low,x 			; copy low address in.
.1f7a	8d 23 9f	sta $9f23			sta 	$9F23
.1f7d	ee 20 9f	inc $9f20			inc 	$9F20 						; bump to offset 1.
.1f80	bd 1a 0c	lda $0c1a,x			lda 	imageInfo,x 				; get 4/8 bit flag from info.
.1f83	29 10		and #$10			and 	#$10
.1f85	0a		asl a				asl 	a
.1f86	0a		asl a				asl		a
.1f87	0a		asl a				asl 	a 							; put into bit 7
.1f88	1d 9a 0c	ora $0c9a,x			ora 	imageAddr2High,x 			; or high address with it.
.1f8b	8d 23 9f	sta $9f23			sta 	$9F23 						; write the high byte.
.1f8e	a9 06		lda #$06			lda 	#6
.1f90	20 af 1f	jsr $1faf			jsr 	SpriteSetTarget 			; set sprite on.
.1f93	ad 23 9f	lda $9f23			lda 	$9F23
.1f96	09 0c		ora #$0c			ora 	#$0C
.1f98	8d 23 9f	sta $9f23			sta 	$9F23
.1f9b	ee 20 9f	inc $9f20			inc 	$9F20 						; point to byte 7 : height/width/palette offset
.1f9e	bd 1a 0c	lda $0c1a,x			lda 	imageInfo,x 				; get image info
.1fa1	0a		asl a				asl 	a 							; shift bits 0-3 to 4-7
.1fa2	0a		asl a				asl 	a
.1fa3	0a		asl a				asl 	a
.1fa4	0a		asl a				asl 	a
.1fa5	b0 02		bcs $1fa9			bcs		_CSNoOffset 				; if bit 4 was set don't set the offset.
.1fa7	09 0f		ora #$0f			ora 	#$0F 						; set palette offset and write back
.1fa9					_CSNoOffset:
.1fa9	8d 23 9f	sta $9f23			sta 	$9F23
.1fac	4c e8 1e	jmp $1ee8			jmp 	_CSCommandLoop
.1faf					SpriteSetTarget:
.1faf	0d 13 0c	ora $0c13			ora 	currSprite
.1fb2	8d 20 9f	sta $9f20			sta 	$9F20
.1fb5	ad 14 0c	lda $0c14			lda 	currSprite+1
.1fb8	f0 09		beq $1fc3			beq 	_SSTNoSet
.1fba	8d 21 9f	sta $9f21			sta 	$9F21
.1fbd	a9 01		lda #$01			lda 	#$01
.1fbf	8d 22 9f	sta $9f22			sta 	$9F22
.1fc2	60		rts				rts
.1fc3					_SSTNoSet:
.1fc3	a2 27		ldx #$27			ldx 	#ErrorID_NoSprite
.1fc5	20 18 15	jsr $1518		jsr	errorHandler
.1fc8					CSCheckOnOff:
.1fc8	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume it.
.1fca	c8		iny				iny
.1fcb	c9 ab		cmp #$ab			cmp 	#TKW_FALSE					; return CC/EQ if FALSE
.1fcd	18		clc				clc
.1fce	f0 08		beq $1fd8			beq 	_CSCOExit
.1fd0	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; return CS/EQ if TRUE
.1fd2	38		sec				sec 								; return NE if neither.
.1fd3	f0 03		beq $1fd8			beq 	_CSCOExit
.1fd5	88		dey				dey 								; undo consume
.1fd6	c9 aa		cmp #$aa			cmp 	#TKW_TRUE 					; and set NE again, DEY will change it.
.1fd8					_CSCOExit:
.1fd8	60		rts				rts
.1fd9					CSClearSprites:
.1fd9	a9 11		lda #$11			lda 	#$11 						; set address to 1FC00 with single bump
.1fdb	8d 22 9f	sta $9f22			sta 	$9F22
.1fde	a9 fc		lda #$fc			lda 	#$FC
.1fe0	8d 21 9f	sta $9f21			sta 	$9F21
.1fe3	a9 00		lda #$00			lda 	#0
.1fe5	8d 20 9f	sta $9f20			sta 	$9F20
.1fe8					_CSClear:
.1fe8	a9 00		lda #$00			lda 	#0 							; set everything to $00
.1fea	8d 23 9f	sta $9f23			sta 	$9F23
.1fed	ad 21 9f	lda $9f21			lda 	$9F21
.1ff0	d0 f6		bne $1fe8			bne 	_CSClear
.1ff2	60		rts				rts
.1ff3					SelectSpriteA:
.1ff3	85 2a		sta $2a				sta 	temp0
.1ff5	a9 00		lda #$00			lda 	#0
.1ff7	06 2a		asl $2a				asl		temp0 						; multiply A:esInt0 by 8
.1ff9	b0 11		bcs $200c			bcs 	_CSBadValue 				; sprites only 0-127
.1ffb	06 2a		asl $2a				asl 	temp0
.1ffd	2a		rol a				rol 	a
.1ffe	06 2a		asl $2a				asl 	temp0
.2000	2a		rol a				rol 	a
.2001	09 fc		ora #$fc			ora 	#$FC 						; MSB of address (barring $01 upper third byte)
.2003	8d 14 0c	sta $0c14			sta 	currSprite+1
.2006	a5 2a		lda $2a				lda 	temp0 						; LSB of address
.2008	8d 13 0c	sta $0c13			sta 	currSprite+0
.200b	60		rts				rts
.200c					_CSBadValue
.200c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.200e	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spritemove.asm

.2011					SpriteMove:
.2011	98		tya				tya
.2012	48		pha				pha
.2013	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.2015	20 af 1f	jsr $1faf			jsr 	SpriteSetTarget
.2018	ad 23 9f	lda $9f23			lda 	$9F23
.201b	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.201c	4a		lsr a				lsr 	a
.201d	4a		lsr a				lsr 	a
.201e	4a		lsr a				lsr 	a
.201f	85 2a		sta $2a				sta 	temp0 								; save these bits so we can work out the centre.
.2021	a9 02		lda #$02			lda 	#2 									; point to X position.Low
.2023	20 af 1f	jsr $1faf			jsr 	SpriteSetTarget
.2026	20 35 20	jsr $2035			jsr 	SMWritePosition 					; write X position out.
.2029	46 2a		lsr $2a				lsr 	temp0 								; shift height bits into 0,1
.202b	46 2a		lsr $2a				lsr 	temp0
.202d	e8		inx				inx 										; get the y position
.202e	20 35 20	jsr $2035			jsr 	SMWritePosition 					; and write that out.
.2031	ca		dex				dex 										; fix X and quit.
.2032	68		pla				pla
.2033	a8		tay				tay
.2034	60		rts				rts
.2035					SMWritePosition:
.2035	a5 2a		lda $2a				lda 	temp0 								; get dim size
.2037	29 03		and #$03			and 	#3 									; in range into Y
.2039	a8		tay				tay
.203a	38		sec				sec
.203b	b5 98		lda $98,x			lda 	esInt0,x
.203d	f9 51 20	sbc $2051,y			sbc 	SMHalfSize,y
.2040	8d 23 9f	sta $9f23			sta 	$9F23
.2043	ee 20 9f	inc $9f20			inc 	$9F20
.2046	b5 a0		lda $a0,x			lda 	esInt1,x
.2048	e9 00		sbc #$00			sbc 	#0
.204a	8d 23 9f	sta $9f23			sta 	$9F23
.204d	ee 20 9f	inc $9f20			inc 	$9F20
.2050	60		rts				rts
.2051					SMHalfSize:
>2051	04 08 10 20					.byte 	4,8,16,32 							; half size each dimension.
.2055					SpriteReadCoordinate:
.2055	98		tya				tya
.2056	48		pha				pha
.2057	08		php				php 										; save CTR on stack
.2058	a9 07		lda #$07			lda 	#7 									; point to height/width byte and read it.
.205a	20 af 1f	jsr $1faf			jsr 	SpriteSetTarget
.205d	ad 23 9f	lda $9f23			lda 	$9F23
.2060	4a		lsr a				lsr 	a 									; A now contains bits 0-1 (width) 2-3 (height)
.2061	4a		lsr a				lsr 	a
.2062	4a		lsr a				lsr 	a
.2063	4a		lsr a				lsr 	a
.2064	28		plp				plp 										; restore CTS
.2065	08		php				php
.2066	90 02		bcc $206a			bcc 	_SPRCNotY1 							; if it is Y, e.g. CS, shift twice more.
.2068	4a		lsr a				lsr 	a
.2069	4a		lsr a				lsr 	a
.206a					_SPRCNotY1:
.206a	29 03		and #$03			and 	#3 									; point into half width/height
.206c	a8		tay				tay
.206d	b9 51 20	lda $2051,y			lda 	SMHalfSize,y 						; get half size -> esInt3,x
.2070	95 b0		sta $b0,x			sta 	esInt3,x
.2072	28		plp				plp 										; CS Y CC X
.2073	a9 00		lda #$00			lda 	#0 									; A = 0 X A = 2 Y
.2075	2a		rol a				rol 	a
.2076	2a		rol a				rol 	a
.2077	69 02		adc #$02			adc 	#2 									; A = 2 X A = 4 Y
.2079	20 af 1f	jsr $1faf			jsr 	SpriteSetTarget 					; set data pointer offset by that
.207c	18		clc				clc 										; read and unfix centre.
.207d	ad 23 9f	lda $9f23			lda 	$9F23
.2080	75 b0		adc $b0,x			adc 	esInt3,x
.2082	95 98		sta $98,x			sta 	esInt0,x
.2084	ee 20 9f	inc $9f20			inc 	$9F20 								; do MSB
.2087	ad 23 9f	lda $9f23			lda 	$9F23
.208a	69 00		adc #$00			adc 	#0
.208c	29 0f		and #$0f			and 	#$0F 								; sign extend on bit 11.
.208e	c9 08		cmp #$08			cmp		#$08
.2090	90 02		bcc $2094			bcc 	_SPRCNoSX
.2092	09 f0		ora #$f0			ora 	#$F0
.2094					_SPRCNoSX:
.2094	95 a0		sta $a0,x			sta 	esInt1,x
.2096	68		pla				pla
.2097	a8		tay				tay
.2098	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/sprites/spriteutils.asm

.2099					Sprite_GetX:
.2099	18		clc				clc
.209a	90 01		bcc $209d			bcc 	SpriteGetCode
.209c					Sprite_GetY:
.209c	38		sec				sec
.209d					SpriteGetCode:
.209d	08		php				php 								; CLC : X SEC: Y, save on stack.
.209e	48		pha				pha 								; save stack position
.209f	20 bb 20	jsr $20bb			jsr 	GetSpriteNumber 			; get # of sprite.
.20a2	a2 04		ldx #$04		ldx	#4
.20a4	20 ea 3b	jsr $3bea		jsr	mainHandler
.20a7	68		pla				pla
.20a8	aa		tax				tax
.20a9	28		plp				plp 								; which one ?
.20aa	20 55 20	jsr $2055			jsr 	SpriteReadCoordinate 		; read appropriate coordinate into esInt0,x
.20ad	b5 a0		lda $a0,x			lda 	esInt1,x 					; get sign bit, sign extend 16->32 bits
.20af	29 80		and #$80			and 	#$80
.20b1	f0 02		beq $20b5			beq 	_SGXYPos
.20b3	a9 ff		lda #$ff			lda 	#$FF
.20b5					_SGXYPos:
.20b5	95 a8		sta $a8,x			sta 	esInt2,x
.20b7	95 b0		sta $b0,x			sta 	esInt3,x
.20b9	8a		txa				txa 								; return NSP in A
.20ba	60		rts				rts
.20bb					GetSpriteNumber:
.20bb	48		pha				pha
.20bc	a2 0c		ldx #$0c		ldx	#12
.20be	20 ea 3b	jsr $3bea		jsr	mainHandler
.20c1	68		pla				pla
.20c2	aa		tax				tax
.20c3	b5 98		lda $98,x			lda 	esInt0,x
.20c5	20 f3 1f	jsr $1ff3			jsr 	SelectSpriteA
.20c8	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/mode.asm

.0c15					currentMode:
>0c15							.fill 	4
.20c9					ForceMode0:
.20c9	a2 00		ldx #$00			ldx 	#0
.20cb	86 98		stx $98				stx 	esInt0 						; in case we do it.
.20cd					_FMCheck:
.20cd	bd 60 21	lda $2160,x			lda 	CMModeList,x 				; do we need to switch ?
.20d0	dd 15 0c	cmp $0c15,x			cmp 	currentMode,x
.20d3	d0 13		bne $20e8			bne 	CMSetMode 					; different so switch.
.20d5	e8		inx				inx
.20d6	e0 04		cpx #$04			cpx 	#4
.20d8	d0 f3		bne $20cd			bne 	_FMCheck
.20da	60		rts				rts
.20db					CommandMode:
.20db	a9 00		lda #$00			lda 	#0
.20dd	a2 0a		ldx #$0a		ldx	#10
.20df	20 ea 3b	jsr $3bea		jsr	mainHandler
.20e2	a5 b0		lda $b0				lda 	esInt3
.20e4	29 70		and #$70			and 	#$70
.20e6	d0 06		bne $20ee			bne 	CMNoExpand
.20e8					CMSetMode:
.20e8	20 3f 21	jsr $213f			jsr 	CMExpandMode
.20eb	4c 02 21	jmp $2102			jmp 	CMUpdateMode
.20ee					CMNoExpand:
.20ee	a5 98		lda $98				lda 	esInt0
.20f0	8d 15 0c	sta $0c15			sta 	currentMode
.20f3	a5 a0		lda $a0				lda 	esInt1
.20f5	8d 16 0c	sta $0c16			sta 	currentMode+1
.20f8	a5 a8		lda $a8				lda 	esInt2
.20fa	8d 17 0c	sta $0c17			sta 	currentMode+2
.20fd	a5 b0		lda $b0				lda 	esInt3
.20ff	8d 18 0c	sta $0c18			sta 	currentMode+3
.2102					CMUpdateMode:
.2102	a2 11		ldx #$11			ldx 	#$11
.2104					_CMClear:
.2104	a9 00		lda #$00			lda 	#0
.2106	9d 29 9f	sta $9f29,x			sta 	$9F29,X
.2109	ca		dex				dex
.210a	10 f8		bpl $2104			bpl 	_CMClear
.210c	ad 18 0c	lda $0c18			lda 	currentMode+3 				; get current mode
.210f	48		pha				pha 								; stack twice.
.2110	48		pha				pha
.2111	29 70		and #$70			and 	#$70 						; isolates bits 6,5,4 (sprites,L1 enable,L0 enable)
.2113	09 01		ora #$01			ora 	#$01 						; turn the output on.
.2115	8d 29 9f	sta $9f29			sta 	$9F29 						; write to DC_VIDEO
.2118	68		pla				pla 								; get back
.2119	20 70 21	jsr $2170			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.211c	8d 2a 9f	sta $9f2a			sta 	$9F2A 						; write to H-Scale
.211f	68		pla				pla 								; get back, convert bits 2,3 to a scale.
.2120	4a		lsr a				lsr 	a
.2121	4a		lsr a				lsr 	a
.2122	20 70 21	jsr $2170			jsr 	CMToScale 					; convert lower 2 bits to a scale.
.2125	8d 2b 9f	sta $9f2b			sta 	$9F2B
.2128	a2 00		ldx #$00			ldx 	#0 							; this is offset from $9F2D to do L0
.212a	ad 15 0c	lda $0c15			lda 	currentMode					; get L0 config byte
.212d	20 7b 21	jsr $217b			jsr 	CMDecodeLayer 				; and decode layer 0
.2130	a2 07		ldx #$07			ldx 	#7 							; when we do layer 1, offset by 7 hence starts at $9F34
.2132	ad 16 0c	lda $0c16			lda 	currentMode+1
.2135	20 7b 21	jsr $217b			jsr 	CMDecodeLayer
.2138	20 ae 1c	jsr $1cae			jsr 	gdModeChanged 				; check the bitmap status.
.213b	20 ba 18	jsr $18ba			jsr 	GResetStorage 				; reset the graphics drawing storage.
.213e	60		rts				rts
.213f					CMExpandMode:
.213f	a5 98		lda $98				lda 	esInt0 						; get mode number
.2141	c9 04		cmp #$04			cmp 	#(CMEndModeList-CMModeList) >> 2
.2143	b0 16		bcs $215b			bcs 	_CMModeError
.2145	0a		asl a				asl 	a 							; x 4 into X
.2146	0a		asl a				asl 	a
.2147	aa		tax				tax
.2148	98		tya				tya
.2149	48		pha				pha
.214a	a0 00		ldy #$00			ldy 	#0
.214c					_CMEMCopy:
.214c	bd 60 21	lda $2160,x			lda 	CMModeList,x
.214f	99 15 0c	sta $0c15,y			sta 	currentMode,y
.2152	e8		inx				inx
.2153	c8		iny				iny
.2154	c0 04		cpy #$04			cpy 	#4
.2156	d0 f4		bne $214c			bne 	_CMEMCopy
.2158	68		pla				pla
.2159	a8		tay				tay
.215a	60		rts				rts
.215b					_CMModeError:
.215b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.215d	20 18 15	jsr $1518		jsr	errorHandler
.2160					CMModeList:
>2160	00 60 00 20					.dword	$20006000 					; Mode 0 which is the standard 80x60 mode, no sprites
>2164	00 60 00 25					.dword 	$25006000					; Mode 1 (40x30)
>2168	00 60 00 2a					.dword 	$2A006000 					; Mode 2 (20x15)
>216c	07 60 00 15					.dword 	$15006007 					; Mode 3 (320x200 256 colour bitmap)
.2170					CMEndModeList:
.2170					CMToScale:
.2170	29 03		and #$03			and 	#3 							; lower 2 bits only
.2172	aa		tax				tax 								; put in X for counting
.2173	a9 00		lda #$00			lda 	#0 							; zero result
.2175	38		sec				sec 								; first time rotate CS in
.2176					_CMTSLoop:
.2176	6a		ror a				ror 	a
.2177	ca		dex				dex
.2178	10 fc		bpl $2176			bpl 	_CMTSLoop
.217a	60		rts				rts
.217b					CMDecodeLayer:
.217b	48		pha				pha 								; save it.
.217c	29 f7		and #$f7			and 	#$F7 						; all the bits except T256C which you can't set using this
.217e	9d 2d 9f	sta $9f2d,x			sta 	$9F2D,X
.2181	68		pla				pla 								; get it back
.2182	29 08		and #$08			and 	#$08 						; the missing bit sets the tile size.
.2184	f0 02		beq $2188			beq 	_CMDLNotSet
.2186	a9 03		lda #$03			lda 	#$03 						; which sets both lower bits, they're square.
.2188					_CMDLNotSet:
.2188	e0 00		cpx #$00			cpx 	#0
.218a	f0 06		beq $2192			beq 	_CMDLayer0 					; layer 1 has standard defaults for tile table, e.g. $7C
.218c	09 7c		ora #$7c			ora 	#$7C 						; so set those bits and write it out.
.218e	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2191	60		rts				rts
.2192					_CMDLayer0:
.2192	09 80		ora #$80			ora 	#$80 						; tile base is $80
.2194	9d 2f 9f	sta $9f2f,x			sta 	$9F2F,X
.2197	60		rts				rts
.2198					CommandClg:
.2198	20 02 1d	jsr $1d02			jsr 	gdClearGraphics
.219b	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/palette.asm

.219c					CommandPalette:
.219c	a9 00		lda #$00			lda 	#0
.219e	a2 0c		ldx #$0c		ldx	#12
.21a0	20 ea 3b	jsr $3bea		jsr	mainHandler
.21a3	a2 02		ldx #$02		ldx	#2
.21a5	20 ea 3b	jsr $3bea		jsr	mainHandler
.21a8	a9 01		lda #$01			lda 	#1
.21aa	a2 08		ldx #$08		ldx	#8
.21ac	20 ea 3b	jsr $3bea		jsr	mainHandler
.21af	a5 98		lda $98				lda 	esInt0 					; get palette #
.21b1	20 c1 21	jsr $21c1			jsr 	PointToPaletteA			; point to palette register
.21b4	a5 99		lda $99				lda 	esInt0+1
.21b6	8d 23 9f	sta $9f23			sta 	$9F23
.21b9	a5 a1		lda $a1				lda 	esInt1+1
.21bb	29 0f		and #$0f			and 	#$0F
.21bd	8d 23 9f	sta $9f23			sta 	$9F23
.21c0	60		rts				rts
.21c1					PointToPaletteA:
.21c1	0a		asl a				asl 	a 							; x 2 -> LSB
.21c2	8d 20 9f	sta $9f20			sta 	$9F20
.21c5	a9 00		lda #$00			lda 	#0 							; carry into A
.21c7	2a		rol a				rol 	a
.21c8	09 fa		ora #$fa			ora 	#$FA 						; make correct address
.21ca	8d 21 9f	sta $9f21			sta 	$9F21
.21cd	a9 11		lda #$11			lda 	#$11 						; $01 and single step => $9F22
.21cf	8d 22 9f	sta $9f22			sta 	$9F22
.21d2	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vload.asm

.21d3					Command_VLoad:
.21d3	a9 00		lda #$00			lda 	#0 								; string which is the file name
.21d5	a2 0e		ldx #$0e		ldx	#14
.21d7	20 ea 3b	jsr $3bea		jsr	mainHandler
.21da	a2 01		ldx #$01			ldx 	#1 								; load address at +1.
.21dc	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.21de	95 98		sta $98,x			sta 	esInt0,x
.21e0	a5 36		lda $36				lda 	lowMemory+1
.21e2	95 a0		sta $a0,x			sta 	esInt1,x
.21e4	a9 00		lda #$00			lda 	#0
.21e6	95 a8		sta $a8,x			sta 	esInt2,x
.21e8	95 b0		sta $b0,x			sta 	esInt3,x
.21ea	a2 0e		ldx #$0e		ldx	#14
.21ec	20 f6 14	jsr $14f6		jsr	deviceHandler
.21ef	a5 99		lda $99				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.21f1	85 2a		sta $2a				sta 	temp0
.21f3	a5 a1		lda $a1				lda 	esInt1+1
.21f5	85 2b		sta $2b				sta 	temp0+1
.21f7	20 73 22	jsr $2273			jsr 	LoadVRAMFile 					; load the VRAM file in.
.21fa	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vpeekpoke.asm

.21fb					Command_VPoke:
.21fb	38		sec				sec 						; one byte , CS
.21fc	b0 01		bcs $21ff			bcs 	CmdVideoWrite
.21fe					Command_VDoke:
.21fe	18		clc				clc 						; two bytes, CC
.21ff					CmdVideoWrite:
.21ff	08		php				php 						; save one or two btes
.2200	a9 00		lda #$00			lda 	#0  				; get address and value into levels 0,1
.2202	a2 0a		ldx #$0a		ldx	#10
.2204	20 ea 3b	jsr $3bea		jsr	mainHandler
.2207	a2 02		ldx #$02		ldx	#2
.2209	20 ea 3b	jsr $3bea		jsr	mainHandler
.220c	a9 01		lda #$01			lda 	#1
.220e	a2 0a		ldx #$0a		ldx	#10
.2210	20 ea 3b	jsr $3bea		jsr	mainHandler
.2213	a2 00		ldx #$00			ldx 	#0
.2215	20 26 22	jsr $2226			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2218	a5 99		lda $99				lda 	esInt0+1 			; get MSB of write value
.221a	8d 23 9f	sta $9f23			sta 	$9F23
.221d	28		plp				plp 						; if it was Poke then exit
.221e	b0 05		bcs $2225			bcs 	_CVWExit
.2220	a5 a1		lda $a1				lda 	esInt1+1 			; doke, write the MSB.
.2222	8d 23 9f	sta $9f23			sta 	$9F23
.2225					_CVWExit:
.2225	60		rts				rts
.2226					SetUpTOSVRamAddress:
.2226	b5 a8		lda $a8,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2228	29 fe		and #$fe			and 	#$FE
.222a	15 b0		ora $b0,x			ora 	esInt3,x
.222c	d0 14		bne $2242			bne 	CVWValue
.222e	b5 98		lda $98,x			lda 	esInt0,x			; set address up
.2230	8d 20 9f	sta $9f20			sta 	$9F20
.2233	b5 a0		lda $a0,x			lda 	esInt1,x
.2235	8d 21 9f	sta $9f21			sta	 	$9F21
.2238	b5 a8		lda $a8,x			lda 	esInt2,x
.223a	29 01		and #$01			and 	#1
.223c	09 10		ora #$10			ora 	#$10 				; step 1.
.223e	8d 22 9f	sta $9f22			sta 	$9F22
.2241	60		rts				rts
.2242					CVWValue:
.2242	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2244	20 18 15	jsr $1518		jsr	errorHandler
.2247					Command_VPeek:
.2247	38		sec				sec 						; one byte , CS
.2248	b0 01		bcs $224b			bcs 	CmdVideoRead
.224a					Command_VDeek:
.224a	18		clc				clc 						; two bytes, CC
.224b					CmdVideoRead:
.224b	08		php				php 						; save action on stack.
.224c	48		pha				pha 						; save stack position
.224d	a2 0a		ldx #$0a		ldx	#10
.224f	20 ea 3b	jsr $3bea		jsr	mainHandler
.2252	a2 04		ldx #$04		ldx	#4
.2254	20 ea 3b	jsr $3bea		jsr	mainHandler
.2257	68		pla				pla
.2258	aa		tax				tax
.2259	20 26 22	jsr $2226			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.225c	a9 00		lda #$00			lda 	#0 					; zero upper 3 bytes
.225e	95 a0		sta $a0,x			sta 	esInt1,x
.2260	95 a8		sta $a8,x			sta 	esInt2,x
.2262	95 b0		sta $b0,x			sta 	esInt3,x
.2264	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2267	95 98		sta $98,x			sta 	esInt0,x
.2269	28		plp				plp 						; check if DOKE (carry was clear)
.226a	b0 05		bcs $2271			bcs 	_CVRExit
.226c	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.226f	95 a0		sta $a0,x			sta 	esInt1,x
.2271					_CVRExit:
.2271	8a		txa				txa 						; return X position.
.2272	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/video/vramprocess.asm

.0c19					compressMode:
>0c19							.fill 	1
.0c1a					imageInfo:
>0c1a							.fill 	X16MaxImages
.0c5a					imageAddr2Low:
>0c5a							.fill  	X16MaxImages
.0c9a					imageAddr2High:
>0c9a							.fill  	X16MaxImages
.2273					LoadVRAMFile:
.2273	8a		txa				txa
.2274	48		pha				pha
.2275	98		tya				tya
.2276	48		pha				pha
.2277					_LVRLoop:
.2277	20 53 23	jsr $2353			jsr 	LVFGet 						; get the next (never access direct)
.227a	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.227c	f0 42		beq $22c0			beq 	_LVRExit
.227e	b0 5c		bcs $22dc			bcs 	_LVRLoad 					; load data in ?
.2280	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.2282	90 11		bcc $2295			bcc 	_LVRSetAddress
.2284	c9 0f		cmp #$0f			cmp 	#$0F 						; is it define palette
.2286	f0 3d		beq $22c5			beq 	_LVRSetPalette
.2288	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.228a	90 2d		bcc $22b9			bcc 	_LVRSetCompress
.228c	c9 64		cmp #$64			cmp 	#$64 						; is it set sprite type.
.228e	90 60		bcc $22f0			bcc 	_LVRSetSprite
.2290	a2 01		ldx #$01			ldx 	#ErrorID_missing
.2292	20 18 15	jsr $1518		jsr	errorHandler
.2295					_LVRSetAddress:
.2295	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.2297	20 53 23	jsr $2353			jsr 	LVFGet
.229a	85 2c		sta $2c				sta 	temp1
.229c	a9 00		lda #$00			lda 	#0
.229e	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.22a0	66 2c		ror $2c				ror 	temp1
.22a2	6a		ror a				ror		a
.22a3	46 2d		lsr $2d				lsr 	temp1+1
.22a5	66 2c		ror $2c				ror 	temp1
.22a7	6a		ror a				ror		a
.22a8	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.22ab	a5 2c		lda $2c				lda 	temp1
.22ad	8d 21 9f	sta $9f21			sta 	$9F21
.22b0	a5 2d		lda $2d				lda 	temp1+1
.22b2	09 10		ora #$10			ora 	#$10
.22b4	8d 22 9f	sta $9f22			sta 	$9F22
.22b7	d0 be		bne $2277			bne 	_LVRLoop
.22b9					_LVRSetCompress:
.22b9	29 07		and #$07			and 	#7
.22bb	8d 19 0c	sta $0c19			sta 	compressMode
.22be	10 b7		bpl $2277			bpl 	_LVRLoop
.22c0					_LVRExit:
.22c0	68		pla				pla
.22c1	a8		tay				tay
.22c2	68		pla				pla
.22c3	aa		tax				tax
.22c4	60		rts				rts
.22c5					_LVRSetPalette:
.22c5	20 53 23	jsr $2353			jsr 	LVFGet 						; get palette id.
.22c8	20 c1 21	jsr $21c1			jsr 	PointToPaletteA 			; in palette.asm
.22cb	20 53 23	jsr $2353			jsr 	LVFGet 						; copy 12 bit palette data in.
.22ce	8d 23 9f	sta $9f23			sta 	$9F23
.22d1	20 53 23	jsr $2353			jsr 	LVFGet
.22d4	29 0f		and #$0f			and 	#$0F
.22d6	8d 23 9f	sta $9f23			sta 	$9F23
.22d9	4c 77 22	jmp $2277			jmp 	_LVRLoop
.22dc					_LVRLoad:
.22dc	ae 19 0c	ldx $0c19			ldx 	compressMode
.22df	d0 55		bne $2336			bne 	_LVRNotMode0
.22e1	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.22e3					_LVRLCopyX:
.22e3	aa		tax				tax
.22e4					_LVRLCopy:
.22e4	20 53 23	jsr $2353			jsr 	LVFGet 						; write to data.
.22e7	8d 23 9f	sta $9f23			sta 	$9F23
.22ea	ca		dex				dex
.22eb	d0 f7		bne $22e4			bne 	_LVRLCopy
.22ed	4c 77 22	jmp $2277			jmp 	_LVRLoop
.22f0					_LVRSetSprite:
.22f0	48		pha				pha 								; save on stack
.22f1	20 53 23	jsr $2353			jsr 	LVFGet 						; get the sprite number into X
.22f4	aa		tax				tax
.22f5	c9 40		cmp #$40			cmp 	#X16MaxImages				; too high ?
.22f7	b0 38		bcs $2331			bcs 	_LVRSSValue
.22f9	68		pla				pla 								; restore the data held in the first byte
.22fa	9d 1a 0c	sta $0c1a,x			sta 	imageInfo,x 				; and write into the sprite image table.
.22fd					_LVRAlignVRAM:
.22fd	ad 20 9f	lda $9f20			lda 	$9F20 						; check VRAM on 32 byte boundary
.2300	29 1f		and #$1f			and 	#$1F
.2302	f0 07		beq $230b			beq 	_LVRAligned
.2304	a9 00		lda #$00			lda 	#$00
.2306	8d 23 9f	sta $9f23			sta 	$9F23
.2309	f0 f2		beq $22fd			beq 	_LVRAlignVRAM
.230b					_LVRAligned:
.230b	ad 22 9f	lda $9f22			lda 	$9F22 						; put address/32 in sprite image table
.230e	4a		lsr a				lsr 	a 	 						; first halve into temp1
.230f	ad 21 9f	lda $9f21			lda 	$9F21
.2312	6a		ror a				ror 	a
.2313	85 2d		sta $2d				sta 	temp1+1
.2315	ad 20 9f	lda $9f20			lda 	$9F20
.2318	6a		ror a				ror 	a
.2319	85 2c		sta $2c				sta 	temp1
.231b	a0 04		ldy #$04			ldy 	#4 							; divide it by 16 in temp1
.231d					_LVRShift:
.231d	46 2d		lsr $2d				lsr 	temp1+1
.231f	66 2c		ror $2c				ror 	temp1
.2321	88		dey				dey
.2322	d0 f9		bne $231d			bne 	_LVRShift
.2324	a5 2d		lda $2d				lda 	temp1+1 					; copy result.
.2326	9d 9a 0c	sta $0c9a,x			sta 	imageAddr2High,x
.2329	a5 2c		lda $2c				lda 	temp1
.232b	9d 5a 0c	sta $0c5a,x			sta 	imageAddr2Low,x
.232e	4c 77 22	jmp $2277			jmp 	_LVRLoop
.2331					_LVRSSValue:
.2331	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2333	20 18 15	jsr $1518		jsr	errorHandler
.2336					_LVRNotMode0:
.2336	e0 01		cpx #$01			cpx 	#1
.2338	d0 15		bne $234f			bne 	_LVRNotMode1
.233a	29 7f		and #$7f			and 	#$7F 						; drop bit 7
.233c	c9 40		cmp #$40			cmp 	#$40
.233e	90 a3		bcc $22e3			bcc 	_LVRLCopyX 					; 00-3F use mode 0's copying code.
.2340					_LVRRLEGroup:
.2340	29 3f		and #$3f			and 	#$3F
.2342	aa		tax				tax
.2343	20 53 23	jsr $2353			jsr 	LVFGet
.2346					_LVRLEGroupLoop:
.2346	8d 23 9f	sta $9f23			sta 	$9F23
.2349	ca		dex				dex
.234a	d0 fa		bne $2346			bne 	_LVRLEGroupLoop
.234c	4c 77 22	jmp $2277			jmp 	_LVRLoop
.234f					_LVRNotMode1:
>234f	db						.byte 	$DB
.2350	4c 4f 23	jmp $234f			jmp 	_LVRNotMode1
.2353	84 32		sty $32		LVFGet:	sty 	tempShort
.2355	a0 00		ldy #$00			ldy 	#0
.2357	b1 2a		lda ($2a),y			lda 	(temp0),y
.2359	a4 32		ldy $32				ldy	 	tempShort
.235b	e6 2a		inc $2a				inc 	temp0
.235d	d0 02		bne $2361			bne 	_LVFGExit
.235f	e6 2b		inc $2b				inc 	temp0+1
.2361					_LVFGExit:
.2361	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2362					section_end_extension:
.2362					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2362					floatingpointHandler:
.2362	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2364	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: basic.asm

.2367					section_end_floatingpoint:
.2367					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.2367					ColdStartEntry:
.2367	a2 ff		ldx #$ff			ldx 	#$FF
.2369	9a		txs				txs
.236a	20 f3 23	jsr $23f3			jsr 	ForceStandardMode
.236d	a2 04		ldx #$04		ldx	#4
.236f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2372	a0 ff		ldy #$ff			ldy 	#255
.2374					_CSBanner:
.2374	c8		iny				iny
.2375	b9 9b 23	lda $239b,y			lda 	Intro,y
.2378	f0 14		beq $238e			beq 	_CSStart
.237a	c9 08		cmp #$08			cmp 	#8
.237c	90 08		bcc $2386			bcc 	_CSInk
.237e	a2 16		ldx #$16		ldx	#22
.2380	20 f6 14	jsr $14f6		jsr	deviceHandler
.2383	4c 74 23	jmp $2374			jmp 	_CSBanner
.2386					_CSInk:
.2386	a2 08		ldx #$08		ldx	#8
.2388	20 f6 14	jsr $14f6		jsr	deviceHandler
.238b	4c 74 23	jmp $2374			jmp 	_CSBanner
.238e					_CSStart:
.238e	a2 16		ldx #$16		ldx	#22
.2390	20 ea 3b	jsr $3bea		jsr	mainHandler
.2393	a2 06		ldx #$06		ldx	#6
.2395	20 ea 3b	jsr $3bea		jsr	mainHandler
.2398	4c b3 24	jmp $24b3			jmp 	WarmStartEntry
>239b	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>23a3	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>23b3	20 2a 2a 2a 0d 0d
>23b9	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>23c1	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>23d1	32 30 32 31 0d 0d
>23d7	02 42 61 73 69 63 20				.text 	2,"Basic "
>23de	30 2e 32 30					.text "0.20"
>23e2	20 28						.text 	" ("
>23e4	33 30 2d 4d 61 72 2d 32				.text "30-Mar-2021"
>23ec	30 32 31
>23ef	29 0d 0d 00					.text 	")",13,13,0
.23f3					ForceStandardMode:
.23f3	a9 fe		lda #$fe			lda 	#$FE
.23f5	20 69 18	jsr $1869		jsr	extensionHandler
.23f8	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.23f9					DeleteLine:
.23f9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.23fc	85 2a		sta $2a				sta 	temp0
.23fe	ad c9 0a	lda $0ac9			lda 	basePage+1
.2401	85 2b		sta $2b				sta 	temp0+1
.2403	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.2405	a5 98		lda $98				lda 	esInt0 						; e.g. the linenumbers match
.2407	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2409	d0 07		bne $2412			bne 	_DLNext
.240b	c8		iny				iny
.240c	a5 a0		lda $a0				lda 	esInt1
.240e	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2410	f0 06		beq $2418			beq 	_DLFound
.2412	20 36 24	jsr $2436	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2415	d0 ec		bne $2403			bne 	_DLLoop
.2417	60		rts				rts
.2418					_DLFound:
.2418	a0 00		ldy #$00			ldy 	#0 							; this is the line to cut, so this offset is the bytes to remove
.241a	b1 2a		lda ($2a),y			lda 	(temp0),y
.241c	a8		tay				tay 								; so we copy from (temp0),y
.241d	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.241f					_DLCopyDown:
.241f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; copy one byte.
.2421	81 2a		sta ($2a,x)			sta 	(temp0,x)
.2423	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.2425	d0 02		bne $2429			bne 	_DLNoCarry
.2427	e6 2b		inc $2b				inc 	temp0+1
.2429					_DLNoCarry:
.2429	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.242b	c5 35		cmp $35				cmp 	lowMemory 					; which is comfortably after End Program.
.242d	d0 f0		bne $241f			bne 	_DLCopyDown
.242f	a5 2b		lda $2b				lda 	temp0+1
.2431	c5 36		cmp $36				cmp 	lowMemory+1
.2433	d0 ea		bne $241f			bne 	_DLCopyDown
.2435	60		rts				rts
.2436					IAdvanceTemp0:
.2436	84 32		sty $32				sty 	tempShort
.2438	18		clc				clc
.2439	a0 00		ldy #$00			ldy 	#0 							; get offset
.243b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; add to temp0
.243d	65 2a		adc $2a				adc 	temp0
.243f	85 2a		sta $2a				sta 	temp0
.2441	90 02		bcc $2445			bcc 	_IATNoCarry
.2443	e6 2b		inc $2b				inc 	temp0+1
.2445					_IATNoCarry:
.2445	b1 2a		lda ($2a),y			lda 	(temp0),y
.2447	a4 32		ldy $32				ldy 	tempShort
.2449	c9 00		cmp #$00			cmp		#0 							; Z set if program end.
.244b	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.244c					InsertLine:
.244c	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.244f	85 2a		sta $2a				sta 	temp0
.2451	ad c9 0a	lda $0ac9			lda 	basePage+1
.2454	85 2b		sta $2b				sta 	temp0+1
.2456					_ILLoop:
.2456	a0 01		ldy #$01			ldy 	#1
.2458	b1 2a		lda ($2a),y			lda 	(temp0),y
.245a	c5 98		cmp $98				cmp 	esInt0
.245c	c8		iny				iny
.245d	b1 2a		lda ($2a),y			lda 	(temp0),y
.245f	e5 a0		sbc $a0				sbc 	esInt1
.2461	b0 05		bcs $2468			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.2463	20 36 24	jsr $2436			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.2466	d0 ee		bne $2456			bne 	_ILLoop
.2468					_ILFound:
.2468	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.246a	85 2c		sta $2c				sta 	temp1             			; this pointer goes backwards
.246c	a5 36		lda $36				lda 	lowMemory+1
.246e	85 2d		sta $2d				sta 	temp1+1
.2470	ad 17 0e	lda $0e17			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.2473	18		clc				clc 								; add 3 for the line number and offset.
.2474	69 03		adc #$03			adc 	#3 							; tokenbuffer already has $80
.2476	a8		tay				tay
.2477	a2 00		ldx #$00			ldx 	#0
.2479	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)					; shift up
.247b	91 2c		sta ($2c),y			sta 	(temp1),y
.247d	a5 2c		lda $2c				lda 	temp1 						; check reached the insert point ?
.247f	c5 2a		cmp $2a				cmp 	temp0
.2481	d0 06		bne $2489			bne 	_ILMNext
.2483	a5 2d		lda $2d				lda 	temp1+1
.2485	c5 2b		cmp $2b				cmp 	temp0+1
.2487	f0 0b		beq $2494			beq 	_ILMCopy
.2489					_ILMNext:
.2489	a5 2c		lda $2c				lda 	temp1
.248b	d0 02		bne $248f			bne 	_ILNoBorrow
.248d	c6 2d		dec $2d				dec 	temp1+1
.248f					_ILNoBorrow:
.248f	c6 2c		dec $2c				dec 	temp1
.2491	4c 79 24	jmp $2479			jmp 	_ILMove 					; and go round again
.2494					_ILMCopy:
.2494	98		tya				tya 								; Y is the offset of the new line.
.2495	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.2497	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.2499	a5 98		lda $98				lda 	esInt0
.249b	91 2a		sta ($2a),y			sta 	(temp0),y
.249d	c8		iny				iny
.249e	a5 a0		lda $a0				lda 	esInt1
.24a0	91 2a		sta ($2a),y			sta 	(temp0),y
.24a2	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.24a4					_ILMCopy2:
.24a4	b1 28		lda ($28),y			lda 	(codePtr),y
.24a6	c8		iny				iny
.24a7	c8		iny				iny
.24a8	c8		iny				iny
.24a9	91 2a		sta ($2a),y			sta 	(temp0),y
.24ab	88		dey				dey
.24ac	88		dey				dey
.24ad	cc 17 0e	cpy $0e17			cpy 	tokenBufferIndex
.24b0	d0 f2		bne $24a4			bne 	_ILMCopy2
.24b2	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.24b3					WarmStartEntry:
.24b3	a2 ff		ldx #$ff			ldx 	#$FF
.24b5	9a		txs				txs
.24b6	20 f3 23	jsr $23f3			jsr 	ForceStandardMode
.24b9	a9 02		lda #$02			lda 	#2							; green text.
.24bb	a2 08		ldx #$08		ldx	#8
.24bd	20 f6 14	jsr $14f6		jsr	deviceHandler
.24c0	a2 0c		ldx #$0c		ldx	#12
.24c2	20 f6 14	jsr $14f6		jsr	deviceHandler
.24c5	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.24c7	85 28		sta $28				sta 	codePtr
.24c9	a5 2b		lda $2b				lda 	temp0+1
.24cb	85 29		sta $29				sta 	codePtr+1
.24cd	a2 06		ldx #$06		ldx	#6
.24cf	20 f6 14	jsr $14f6		jsr	deviceHandler
.24d2	a2 08		ldx #$08		ldx	#8
.24d4	20 2a 47	jsr $472a		jsr	tokeniserHandler
.24d7	c9 00		cmp #$00			cmp 	#0
.24d9	f0 25		beq $2500			beq 	WSEError 					; failed (tokenise can fail if it doesn't know a character e.g. |)
.24db	a9 14		lda #$14			lda 	#(tokenHeader) & $FF
.24dd	85 28		sta $28				sta 	codePtr
.24df	a9 0d		lda #$0d			lda 	#(tokenHeader) >> 8
.24e1	85 29		sta $29				sta 	1+(codePtr)
.24e3	ad 17 0d	lda $0d17			lda 	tokenBuffer 				; is it a blank line, go get another line.
.24e6	c9 80		cmp #$80			cmp 	#$80
.24e8	f0 c9		beq $24b3			beq 	WarmStartEntry
.24ea	29 c0		and #$c0			and 	#$C0						; does it start with a number
.24ec	c9 40		cmp #$40			cmp 	#$40 						; e.g. is it 01xx xxxx
.24ee	f0 15		beq $2505			beq 	HasLineNumber
.24f0	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.24f2	8d 14 0d	sta $0d14			sta 	tokenHeader 				; fake program line.
.24f5	8d 15 0d	sta $0d15			sta 	tokenHeader+1
.24f8	8d 16 0d	sta $0d16			sta 	tokenHeader+2
.24fb	a2 18		ldx #$18		ldx	#24
.24fd	20 ea 3b	jsr $3bea		jsr	mainHandler
.2500					WSEError:
.2500	a2 1e		ldx #$1e			ldx 	#ErrorID_Tokenise
.2502	20 18 15	jsr $1518		jsr	errorHandler
.2505					HasLineNumber:
.2505	a0 03		ldy #$03			ldy 	#3 							; get line number
.2507	a9 00		lda #$00			lda 	#0
.2509	a2 0a		ldx #$0a		ldx	#10
.250b	20 ea 3b	jsr $3bea		jsr	mainHandler
.250e	a5 a8		lda $a8				lda 	esInt2		 				; check in range (only 2 bytes)
.2510	05 b0		ora $b0				ora 	esInt3
.2512	d0 ec		bne $2500			bne 	WSEError
.2514	98		tya				tya 								; make codePtr point to code after the line number.
.2515	18		clc				clc 								; by skipping over the tokenised number.
.2516	65 28		adc $28				adc 	codePtr
.2518	85 28		sta $28				sta 	codePtr
.251a	90 02		bcc $251e			bcc		_HLNNoCarry
.251c	e6 29		inc $29				inc 	codePtr+1
.251e					_HLNNoCarry:
.251e	98		tya				tya 								; subtract that offset from the code buffer index
.251f	38		sec				sec
.2520	49 ff		eor #$ff			eor 	#$FF
.2522	6d 17 0e	adc $0e17			adc 	tokenBufferIndex
.2525	18		clc				clc 								; add space allowing for header & $80 trailer
.2526	69 04		adc #$04			adc 	#4
.2528	8d 17 0e	sta $0e17			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.252b	20 f9 23	jsr $23f9			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.252e					_HLNNoDelete:
.252e	ad 17 0e	lda $0e17			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.2531	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.2533	f0 0c		beq $2541			beq 	_HLMEditDone
.2535	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.2537	18		clc				clc 								; workspace (1k)
.2538	69 04		adc #$04			adc 	#4 							; e.g. 4 x 256
.253a	c5 34		cmp $34				cmp 	highMemory+1
.253c	b0 0b		bcs $2549			bcs 	_HLMMemory 					; nope, won't allowit.
.253e	20 4c 24	jsr $244c			jsr 	InsertLine 					; insert the line in
.2541					_HLMEditDone:
.2541	a2 06		ldx #$06		ldx	#6
.2543	20 ea 3b	jsr $3bea		jsr	mainHandler
.2546	4c b3 24	jmp $24b3			jmp 	WarmStartEntry
.2549					_HLMMemory:
.2549	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.254b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.254e					interactionHandler:
.254e	7c 51 25	jmp ($2551,x)			jmp 	(interactionVectors,x)
.2551					interactionVectors:
>2551	57 25					.word _DummyControlHandler ; index 0
>2553	67 23					.word ColdStartEntry       ; index 2
>2555	b3 24					.word WarmStartEntry       ; index 4
.2557					_DummyControlHandler:
.2557	60		rts			rts

;******  Return to file: basic.asm

.2558					section_end_interaction:
.2558					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/compat/readdata.asm

.0cda					dataPtr:
>0cda							.fill 	2
.0cdc					dataIndex:
>0cdc							.fill 	1
.2558					CommandRead:
.2558	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.255a	20 9d 34	jsr $349d			jsr 	EvaluateReference
.255d	20 9e 25	jsr $259e			jsr 	SwapDPCP 					; use the data pointer.
.2560	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.2562	c8		iny				iny
.2563	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.2565	f0 07		beq $256e			beq 	_CRInData
.2567	88		dey				dey
.2568	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.256a	aa		tax				tax
.256b	20 9f 2c	jsr $2c9f			jsr 	ScanForward
.256e					_CRInData:
.256e	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.2570	20 45 34	jsr $3445			jsr 	Evaluate
.2573	ca		dex				dex 								; and write the value.
.2574	20 f2 27	jsr $27f2			jsr 	WriteValue
.2577	20 9e 25	jsr $259e			jsr 	SwapDPCP 					; get the code pointer back.
.257a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.257c	c8		iny				iny
.257d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.257f	f0 d7		beq $2558			beq 	CommandRead
.2581	88		dey				dey
.2582	60		rts				rts
.2583					CommandData:
.2583	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.2585	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2587	20 9f 2c	jsr $2c9f			jsr 	ScanForward
.258a	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.258b	60		rts				rts
.258c					CommandRestore:
.258c	ad c8 0a	lda $0ac8			lda 	basePage
.258f	8d da 0c	sta $0cda			sta 	dataPtr
.2592	ad c9 0a	lda $0ac9			lda 	basePage+1
.2595	8d db 0c	sta $0cdb			sta 	dataPtr+1
.2598	a9 03		lda #$03			lda 	#3
.259a	8d dc 0c	sta $0cdc			sta 	dataIndex
.259d	60		rts				rts
.259e					SwapDPCP:
.259e	8a		txa				txa
.259f	48		pha				pha
.25a0	98		tya				tya 								; swap Y, DataIndex
.25a1	ac dc 0c	ldy $0cdc			ldy 	DataIndex
.25a4	8d dc 0c	sta $0cdc			sta 	DataIndex
.25a7	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.25a9	ae da 0c	ldx $0cda			ldx 	dataptr
.25ac	8d da 0c	sta $0cda			sta 	dataPtr
.25af	86 28		stx $28				stx 	codePtr
.25b1	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.25b3	ae db 0c	ldx $0cdb			ldx 	dataptr+1
.25b6	8d db 0c	sta $0cdb			sta 	dataPtr+1
.25b9	86 29		stx $29				stx 	codePtr+1
.25bb	68		pla				pla
.25bc	aa		tax				tax
.25bd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/compat/transfer.asm

.25be					CommandGOSUB:
.25be	20 62 34	jsr $3462			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.25c1	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.25c3	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.25c5	20 97 3b	jsr $3b97			jsr 	RSClaim
.25c8	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.25ca	20 c3 3b	jsr $3bc3			jsr 	RSSavePosition
.25cd	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.25cf	f0 1b		beq $25ec			beq 	GotoTOS 					; and do a GOTO there.
.25d1					CommandRETURN:
.25d1	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.25d3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.25d5	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.25d7	f0 05		beq $25de			beq 	_isok
.25d9	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.25db	20 18 15	jsr $1518		jsr	errorHandler
.25de					_isok:
.25de	a9 01		lda #$01			lda 	#1
.25e0	20 d6 3b	jsr $3bd6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.25e3	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.25e5	20 b9 3b	jsr $3bb9			jsr 	RSFree
.25e8	60		rts				rts
.25e9					CommandGOTO:
.25e9	20 62 34	jsr $3462			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.25ec					GotoTOS:
.25ec	20 83 2f	jsr $2f83			jsr 	ResetCodeAddress 			; simple search.
.25ef					_GotoSearch:
.25ef	a0 00		ldy #$00			ldy 	#0 							; get offset
.25f1	b1 28		lda ($28),y			lda 	(codePtr),y
.25f3	f0 21		beq $2616			beq 	_GotoError 					; not found.
.25f5	c8		iny				iny									; check LSB match
.25f6	b1 28		lda ($28),y			lda 	(codePtr),y
.25f8	d5 98		cmp $98,x			cmp 	esInt0,x
.25fa	d0 07		bne $2603			bne 	_GotoNext
.25fc	c8		iny				iny
.25fd	b1 28		lda ($28),y			lda 	(codePtr),y
.25ff	d5 a0		cmp $a0,x			cmp 	esInt1,x
.2601	f0 10		beq $2613			beq 	_GotoFound
.2603					_GotoNext:
.2603	a0 00		ldy #$00			ldy 	#0 							; go next line
.2605	b1 28		lda ($28),y			lda 	(codePtr),y
.2607	18		clc				clc
.2608	65 28		adc $28				adc 	codePtr
.260a	85 28		sta $28				sta 	codePtr
.260c	90 e1		bcc $25ef			bcc 	_GotoSearch
.260e	e6 29		inc $29				inc 	codePtr+1
.2610	4c ef 25	jmp $25ef			jmp 	_GotoSearch
.2613					_GotoFound:
.2613	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2615	60		rts				rts
.2616					_GotoError:
.2616	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2618	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/input.asm

=32					MaxInputSize = 32
.0cdd					InputBuffer:
>0cdd							.fill 	MaxInputSize+1
.261b					Command_Input:
.261b	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.261d	c8		iny				iny
.261e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.2620	f0 f9		beq $261b			beq 	Command_Input
.2622	88		dey				dey 							; undo consume
.2623	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.2625	f0 54		beq $267b			beq 	_CIExit 				; : or EOL, exit
.2627	c9 80		cmp #$80			cmp 	#TOK_EOL
.2629	f0 50		beq $267b			beq 	_CIExit
.262b	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.262d	90 12		bcc $2641			bcc 	_CIVariable
.262f	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.2631	d0 43		bne $2676			bne 	_CISyntax
.2633	a2 00		ldx #$00			ldx 	#0
.2635	20 59 34	jsr $3459			jsr 	EvaluateString 			; evaluate and print string
.2638	20 54 28	jsr $2854			jsr 	TOSToTemp0
.263b	20 4a 27	jsr $274a			jsr 	PrintString
.263e	4c 1b 26	jmp $261b			jmp 	Command_Input
.2641					_CIVariable:
.2641	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.2643	20 9d 34	jsr $349d			jsr 	EvaluateReference  		; this is where its going
.2646					_CIRetry:
.2646	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.2648	a2 14		ldx #$14		ldx	#20
.264a	20 f6 14	jsr $14f6		jsr	deviceHandler
.264d	98		tya				tya
.264e	48		pha				pha
.264f	20 8f 26	jsr $268f			jsr 	InputString 			; input a string (manually)
.2652	a2 01		ldx #$01			ldx 	#1
.2654	20 7c 26	jsr $267c			jsr 	BufferToStackX 			; make stack,x ref input string.
.2657	a5 90		lda $90				lda 	esType 					; if target type numeric
.2659	29 40		and #$40			and 	#$40 					; then convert to number
.265b	d0 11		bne $266e			bne 	_CIWrite
.265d	a2 01		ldx #$01			ldx 	#1
.265f	20 54 28	jsr $2854			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.2662	a9 0a		lda #$0a			lda 	#10
.2664	20 6a 39	jsr $396a			jsr 	MInt32FromString 		; convert it back from a string.
.2667	68		pla				pla
.2668	a8		tay				tay
.2669	b0 03		bcs $266e			bcs 	_CIWrite 				; successfully converted.
.266b	18		clc				clc 							; default fail FP conversion
.266c	90 d8		bcc $2646			bcc		_CIRetry				; failed, try again.
.266e					_CIWrite:
.266e	a2 00		ldx #$00			ldx 	#0
.2670	20 f2 27	jsr $27f2			jsr 	WriteValue
.2673	4c 1b 26	jmp $261b			jmp 	Command_Input
.2676					_CISyntax:
.2676	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2678	20 18 15	jsr $1518		jsr	errorHandler
.267b					_CIExit:
.267b	60		rts				rts
.267c					BufferToStackX:
.267c	a9 dd		lda #$dd			lda 	#InputBuffer & $FF
.267e	95 98		sta $98,x			sta 	esInt0,x
.2680	a9 0c		lda #$0c			lda 	#InputBuffer >> 8
.2682	95 a0		sta $a0,x			sta 	esInt1,x
.2684	a9 00		lda #$00			lda 	#0
.2686	95 a8		sta $a8,x			sta 	esInt2,x
.2688	95 b0		sta $b0,x			sta 	esInt3,x
.268a	a9 40		lda #$40			lda 	#$40
.268c	95 90		sta $90,x			sta 	esType,x
.268e	60		rts				rts
.268f					InputString:
.268f	a9 00		lda #$00			lda 	#0
.2691	8d dd 0c	sta $0cdd			sta 	InputBuffer
.2694					_InputLoop:
.2694	a2 02		ldx #$02		ldx	#2
.2696	20 f6 14	jsr $14f6		jsr	deviceHandler
.2699	a2 0a		ldx #$0a		ldx	#10
.269b	20 f6 14	jsr $14f6		jsr	deviceHandler
.269e	c9 00		cmp #$00			cmp 	#0
.26a0	f0 f2		beq $2694			beq 	_InputLoop
.26a2	c9 08		cmp #$08			cmp 	#8
.26a4	f0 19		beq $26bf			beq 	_InputBackspace
.26a6	c9 0d		cmp #$0d			cmp 	#13
.26a8	f0 21		beq $26cb			beq 	_InputExit
.26aa	ae dd 0c	ldx $0cdd			ldx 	InputBuffer
.26ad	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.26af	f0 e3		beq $2694			beq 	_InputLoop
.26b1	9d de 0c	sta $0cde,x			sta 	InputBuffer+1,x 		; write char
.26b4	ee dd 0c	inc $0cdd			inc 	InputBuffer 			; advance count.
.26b7					_InputPrintLoop:
.26b7	a2 14		ldx #$14		ldx	#20
.26b9	20 f6 14	jsr $14f6		jsr	deviceHandler
.26bc	4c 94 26	jmp $2694			jmp	 	_InputLoop
.26bf					_InputBackspace:
.26bf	ad dd 0c	lda $0cdd			lda 	InputBuffer 			; at start
.26c2	f0 d0		beq $2694			beq 	_InputLoop
.26c4	ce dd 0c	dec $0cdd			dec 	InputBuffer
.26c7	a9 08		lda #$08			lda 	#8
.26c9	d0 ec		bne $26b7			bne 	_InputPrintLoop
.26cb					_InputExit:
.26cb	a2 06		ldx #$06		ldx	#6
.26cd	20 f6 14	jsr $14f6		jsr	deviceHandler
.26d0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/print.asm

.0cfe					lastPrintToken:
>0cfe							.fill 	1
.26d1					Command_Print:
.26d1	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.26d3	8d fe 0c	sta $0cfe			sta 	lastPrintToken
.26d6	88		dey				dey
.26d7					_PrintLoopSkip:
.26d7	c8		iny				iny
.26d8					_PrintLoop:
.26d8	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.26da	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.26dc	f0 5b		beq $2739			beq 	_PrintExit
.26de	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.26e0	f0 57		beq $2739			beq 	_PrintExit
.26e2	8d fe 0c	sta $0cfe			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.26e5	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.26e7	f0 ee		beq $26d7			beq 	_PrintLoopSkip
.26e9	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.26eb	f0 3c		beq $2729			beq	 	_PrintNewLine
.26ed	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.26ef	f0 40		beq $2731			beq 	_PrintTab
.26f1	20 43 34	jsr $3443			jsr 	EvaluateRoot 				; evaluate something at the root
.26f4	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.26f6	85 2a		sta $2a				sta 	temp0
.26f8	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.26fa	85 2b		sta $2b				sta 	1+(temp0)
.26fc	a5 90		lda $90				lda 	esType 						; get type
.26fe	f0 15		beq $2715			beq		_PrintInteger
.2700	4a		lsr a				lsr 	a 							; check for floating point
.2701	b0 08		bcs $270b			bcs 	_PrintFloat
.2703					_PrintString:
.2703	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.2705	20 54 28	jsr $2854			jsr 	TOSToTemp0
.2708	4c 23 27	jmp $2723			jmp 	_PrintTemp0 				; print no leading space.
.270b					_PrintFloat:
.270b	a9 00		lda #$00			lda 	#0 							; stack level.
.270d	a2 16		ldx #$16		ldx	#22
.270f	20 62 23	jsr $2362		jsr	floatingpointHandler
.2712	4c 1c 27	jmp $271c			jmp 	_PrintSpaceTemp0
.2715					_PrintInteger:
.2715	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.2717	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.2719	20 52 3a	jsr $3a52			jsr 	MInt32ToString				; convert to text
.271c					_PrintSpaceTemp0:
.271c	a9 20		lda #$20			lda 	#32
.271e	a2 14		ldx #$14		ldx	#20
.2720	20 f6 14	jsr $14f6		jsr	deviceHandler
.2723					_PrintTemp0:
.2723	20 4a 27	jsr $274a			jsr 	PrintString
.2726	4c d8 26	jmp $26d8			jmp 	_PrintLoop
.2729					_PrintNewLine:
.2729	a2 06		ldx #$06		ldx	#6
.272b	20 f6 14	jsr $14f6		jsr	deviceHandler
.272e	4c d7 26	jmp $26d7			jmp 	_PrintLoopSkip
.2731					_PrintTab:
.2731	a2 1a		ldx #$1a		ldx	#26
.2733	20 f6 14	jsr $14f6		jsr	deviceHandler
.2736	4c d7 26	jmp $26d7			jmp 	_PrintLoopSkip
.2739					_PrintExit:
.2739	ad fe 0c	lda $0cfe			lda		lastPrintToken 				; check last token
.273c	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.273e	f0 09		beq $2749			beq 	_PrintExit2
.2740	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2742	f0 05		beq $2749			beq 	_PrintExit2
.2744	a2 06		ldx #$06		ldx	#6
.2746	20 f6 14	jsr $14f6		jsr	deviceHandler
.2749					_PrintExit2:
.2749	60		rts				rts
.274a					PrintString:
.274a	8a		txa				txa
.274b	48		pha				pha
.274c	98		tya				tya
.274d	48		pha				pha
.274e	a0 00		ldy #$00			ldy 	#0							; get length
.2750	b1 2a		lda ($2a),y			lda 	(temp0),y
.2752	aa		tax				tax 								; into X
.2753	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2755	f0 10		beq $2767			beq 	_PSExit
.2757	ca		dex				dex
.2758	8a		txa				txa
.2759	48		pha				pha
.275a	c8		iny				iny
.275b	b1 2a		lda ($2a),y			lda 	(temp0),y
.275d	a2 14		ldx #$14		ldx	#20
.275f	20 f6 14	jsr $14f6		jsr	deviceHandler
.2762	68		pla				pla
.2763	aa		tax				tax
.2764	4c 53 27	jmp $2753			jmp 	_PSLoop
.2767					_PSExit:
.2767	68		pla				pla
.2768	a8		tay				tay
.2769	68		pla				pla
.276a	aa		tax				tax
.276b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/text.asm

.276c					Command_CLS:
.276c	a2 04		ldx #$04		ldx	#4
.276e	20 f6 14	jsr $14f6		jsr	deviceHandler
.2771	60		rts				rts
.2772					Command_Ink:
.2772	a2 00		ldx #$00			ldx 	#0
.2774	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger
.2777	a2 08		ldx #$08		ldx	#8
.2779	20 f6 14	jsr $14f6		jsr	deviceHandler
.277c	60		rts				rts
.277d					Command_Paper:
.277d	a2 00		ldx #$00			ldx 	#0
.277f	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger
.2782	a2 12		ldx #$12		ldx	#18
.2784	20 f6 14	jsr $14f6		jsr	deviceHandler
.2787	60		rts				rts
.2788					Command_Locate:
.2788	a2 00		ldx #$00			ldx 	#0
.278a	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger
.278d	20 7c 3b	jsr $3b7c			jsr 	CheckComma
.2790	e8		inx				inx
.2791	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger
.2794	98		tya				tya
.2795	48		pha				pha
.2796	a4 99		ldy $99				ldy 	esInt0+1
.2798	a5 98		lda $98				lda 	esInt0
.279a	a2 10		ldx #$10		ldx	#16
.279c	20 f6 14	jsr $14f6		jsr	deviceHandler
.279f	68		pla				pla
.27a0	a8		tay				tay
.27a1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/io/vdu.asm

.27a2					Command_VDU:
.27a2	20 62 34	jsr $3462			jsr 	EvaluateRootInteger 			; get integer at root.
.27a5	a5 98		lda $98				lda 	esInt0
.27a7	a2 14		ldx #$14		ldx	#20
.27a9	20 f6 14	jsr $14f6		jsr	deviceHandler
.27ac					_CVNext:
.27ac	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.27ae	c8		iny				iny
.27af	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.27b1	f0 ef		beq $27a2			beq 	Command_VDU
.27b3	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.27b5	d0 0a		bne $27c1			bne 	_CVExit
.27b7	a5 a0		lda $a0				lda 	esInt1
.27b9	a2 14		ldx #$14		ldx	#20
.27bb	20 f6 14	jsr $14f6		jsr	deviceHandler
.27be	4c ac 27	jmp $27ac			jmp 	_CVNext
.27c1	88		dey		_CVExit:dey
.27c2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/assert.asm

.27c3					Command_Assert:
.27c3	20 62 34	jsr $3462			jsr 	EvaluateRootInteger 		; what is being asserted.
.27c6	20 23 3b	jsr $3b23			jsr 	MInt32Zero 					; is it true ?
.27c9	f0 01		beq $27cc			beq 	_CAError
.27cb	60		rts				rts
.27cc					_CAError:
.27cc	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.27ce	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/dim.asm

.27d1					Command_Dim:
.27d1	a2 04		ldx #$04		ldx	#4
.27d3	20 fb 4a	jsr $4afb		jsr	variableHandler
.27d6	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.27d8	c8		iny				iny
.27d9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.27db	f0 f4		beq $27d1			beq 	Command_Dim
.27dd	88		dey				dey 								; unpick get
.27de	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/let.asm

.27df					CommandLet:
.27df	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.27e1	20 9d 34	jsr $349d			jsr 	EvaluateReference
.27e4	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.27e6	20 64 3b	jsr $3b64			jsr 	CheckToken
.27e9	e8		inx				inx 								; do RHS
.27ea	20 45 34	jsr $3445			jsr 	Evaluate 					; evaluate and dereference
.27ed	ca		dex				dex
.27ee	20 f2 27	jsr $27f2			jsr 	WriteValue 					; write it out
.27f1	60		rts				rts
.27f2					WriteValue:
.27f2	98		tya				tya
.27f3	48		pha				pha
.27f4	20 54 28	jsr $2854			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.27f7	b5 90		lda $90,x			lda 	esType,x 					; check the string flags match
.27f9	55 91		eor $91,x			eor 	esType+1,x 					; one string, one number causes an error.
.27fb	29 40		and #$40			and 	#$40
.27fd	d0 50		bne $284f			bne		_WVType
.27ff	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.2801	b5 90		lda $90,x			lda 	esType,x 					; check for string assignment
.2803	29 40		and #$40			and 	#$40
.2805	d0 1f		bne $2826			bne 	_WVCopyString
.2807	b5 90		lda $90,x			lda 	esType,x 					; check both are integer.
.2809	15 91		ora $91,x			ora 	esType+1,x
.280b	4a		lsr a				lsr 	a
.280c	90 22		bcc $2830			bcc 	_WVCopyData4 				; copy 4 data bytes.
.280e	b5 90		lda $90,x			lda 	esType,x
.2810	4a		lsr a				lsr 	a
.2811	90 3c		bcc $284f			bcc 	_WVType
.2813	e8		inx				inx 								; force the value being written to be a float.
.2814	20 a7 30	jsr $30a7			jsr 	BPMakeFloat
.2817	ca		dex				dex
.2818	20 54 28	jsr $2854			jsr 	TOSToTemp0 					; set Temp0 to write address
.281b	e8		inx				inx
.281c	8a		txa				txa
.281d	a2 22		ldx #$22		ldx	#34
.281f	20 62 23	jsr $2362		jsr	floatingpointHandler
.2822	aa		tax				tax
.2823	4c 4c 28	jmp $284c			jmp 	_WVCopyExit
.2826					_WVCopyString:
.2826	8a		txa				txa
.2827	a2 10		ldx #$10		ldx	#16
.2829	20 a7 3e	jsr $3ea7		jsr	stringHandler
.282c	aa		tax				tax
.282d	4c 4c 28	jmp $284c			jmp 	_WVCopyExit
.2830					_WVCopyData4:
.2830	b5 90		lda $90,x			lda 	esType,x 					; is the int ref a byte ref ?
.2832	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.2834	d0 10		bne $2846			bne 	_WVCopyData1
.2836	a0 03		ldy #$03			ldy 	#3
.2838	b5 b1		lda $b1,x			lda 	esInt3+1,x
.283a	91 2a		sta ($2a),y			sta 	(temp0),y
.283c	88		dey				dey
.283d	b5 a9		lda $a9,x			lda 	esInt2+1,x
.283f	91 2a		sta ($2a),y			sta 	(temp0),y
.2841	88		dey				dey
.2842	b5 a1		lda $a1,x			lda 	esInt1+1,x
.2844	91 2a		sta ($2a),y			sta 	(temp0),y
.2846					_WVCopyData1:
.2846	a0 00		ldy #$00			ldy 	#0
.2848	b5 99		lda $99,x			lda 	esInt0+1,x
.284a	91 2a		sta ($2a),y			sta 	(temp0),y
.284c					_WVCopyExit:
.284c	68		pla				pla
.284d	a8		tay				tay
.284e	60		rts				rts
.284f					_WVType:
.284f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2851	20 18 15	jsr $1518		jsr	errorHandler
.2854					TOSToTemp0:
.2854	b5 98		lda $98,x			lda 	esInt0,x
.2856	85 2a		sta $2a				sta 	temp0
.2858	b5 a0		lda $a0,x			lda 	esInt1,x
.285a	85 2b		sta $2b				sta 	temp0+1
.285c	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/poke.asm

.285d					Command_Poke:
.285d	a9 01		lda #$01			lda 	#1
.285f	d0 06		bne $2867			bne 	PokeGeneral
.2861					Command_Doke:
.2861	a9 02		lda #$02			lda 	#2
.2863	d0 02		bne $2867			bne 	PokeGeneral
.2865					Command_Loke:
.2865	a9 03		lda #$03			lda 	#3
.2867					PokeGeneral:
.2867	48		pha				pha 								; save id (PDL = 123)
.2868	20 62 34	jsr $3462			jsr 	EvaluateRootInteger 		; target address
.286b	20 7c 3b	jsr $3b7c			jsr	 	CheckComma
.286e	e8		inx				inx
.286f	20 64 34	jsr $3464			jsr 	EvaluateInteger 			; what value to POKE ?
.2872	ca		dex				dex
.2873	20 54 28	jsr $2854			jsr 	TOSToTemp0 					; temp0 points to the target address
.2876	84 32		sty $32				sty 	tempShort 					; save Y
.2878	68		pla				pla 								; get copy type (1-3) and dispatch
.2879	aa		tax				tax
.287a	ca		dex				dex
.287b	f0 14		beq $2891			beq 	_Poke1
.287d	ca		dex				dex
.287e	f0 0b		beq $288b			beq 	_Poke2
.2880	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.2882	a5 b1		lda $b1				lda 	esInt3+1
.2884	91 2a		sta ($2a),y			sta 	(temp0),y
.2886	88		dey				dey
.2887	a5 a9		lda $a9				lda 	esInt2+1
.2889	91 2a		sta ($2a),y			sta 	(temp0),y
.288b					_Poke2:
.288b	a0 01		ldy #$01			ldy 	#1
.288d	a5 a1		lda $a1				lda 	esInt1+1
.288f	91 2a		sta ($2a),y			sta 	(temp0),y
.2891					_Poke1:
.2891	a0 00		ldy #$00			ldy 	#0
.2893	a5 99		lda $99				lda 	esInt0+1
.2895	91 2a		sta ($2a),y			sta 	(temp0),y
.2897	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.2899	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/rem.asm

.289a					Command_Rem:
.289a					Command_Rem2:
.289a	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.289c	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.289e	d0 06		bne $28a6			bne 	_CRNotString
.28a0	c8		iny				iny
.28a1	98		tya				tya
.28a2	38		sec				sec
.28a3	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.28a5	a8		tay				tay
.28a6					_CRNotString:
.28a6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/misc/stopend.asm

.28a7					CommandStop:
.28a7	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.28a9	20 18 15	jsr $1518		jsr	errorHandler
.28ac					CommandEnd:
.28ac	4c e5 3b	jmp $3be5			jmp 	WarmStart
.28af					CommandXemu:
.28af	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.28b2					AdvanceNextLine:
.28b2	a0 00		ldy #$00			ldy 	#0 							; get offset
.28b4	b1 28		lda ($28),y			lda 	(codePtr),y
.28b6	18		clc				clc 								; add to codePtr
.28b7	65 28		adc $28				adc 	codePtr
.28b9	85 28		sta $28				sta 	codePtr
.28bb	90 02		bcc $28bf			bcc 	_ANLNoCarry
.28bd	e6 29		inc $29				inc 	codePtr+1
.28bf					_ANLNoCarry:
.28bf	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.28c1	f0 e9		beq $28ac			beq 	CommandEnd 					; execute END
.28c3	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.28c5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/for.asm

.28c6					Command_FOR:
.28c6	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.28c8	a2 0b		ldx #$0b			ldx 	#11
.28ca	20 97 3b	jsr $3b97			jsr 	RSClaim
.28cd	20 df 27	jsr $27df			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.28d0	a5 90		lda $90				lda 	esType 						; check type should be integer reference.
.28d2	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.28d4	d0 4c		bne $2922			bne 	_CFType
.28d6	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.28d8	20 64 3b	jsr $3b64			jsr 	CheckToken
.28db	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.28dd	20 64 34	jsr $3464			jsr 	EvaluateInteger				; get terminal value in stack 1
.28e0	98		tya				tya
.28e1	48		pha				pha
.28e2	a0 04		ldy #$04			ldy 	#4
.28e4	a5 98		lda $98				lda		esInt0 						; copy the address of the index variable into 4 and 5
.28e6	91 37		sta ($37),y			sta 	(rsPointer),y
.28e8	c8		iny				iny
.28e9	a5 a0		lda $a0				lda		esInt1
.28eb	91 37		sta ($37),y			sta 	(rsPointer),y
.28ed	c8		iny				iny
.28ee	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.28f0	91 37		sta ($37),y			sta 	(rsPointer),y
.28f2	c8		iny				iny
.28f3	a5 99		lda $99				lda		esInt0+1 					; terminal value in 7 to 11.
.28f5	91 37		sta ($37),y			sta 	(rsPointer),y
.28f7	c8		iny				iny
.28f8	a5 a1		lda $a1				lda		esInt1+1
.28fa	91 37		sta ($37),y			sta 	(rsPointer),y
.28fc	c8		iny				iny
.28fd	a5 a9		lda $a9				lda		esInt2+1
.28ff	91 37		sta ($37),y			sta 	(rsPointer),y
.2901	c8		iny				iny
.2902	a5 b1		lda $b1				lda		esInt3+1
.2904	91 37		sta ($37),y			sta 	(rsPointer),y
.2906	68		pla				pla
.2907	a8		tay				tay
.2908	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.290a	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.290c	d0 0e		bne $291c			bne 	_CFDone
.290e	c8		iny				iny									; skip over step.
.290f	20 64 34	jsr $3464			jsr 	EvaluateInteger 			; get step
.2912	98		tya				tya
.2913	48		pha				pha
.2914	b5 98		lda $98,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2916	a0 06		ldy #$06			ldy 	#6
.2918	91 37		sta ($37),y			sta 	(rsPointer),y
.291a	68		pla				pla
.291b	a8		tay				tay
.291c					_CFDone:
.291c	a9 01		lda #$01			lda 	#1
.291e	20 c3 3b	jsr $3bc3			jsr 	RSSavePosition 				; save position.
.2921	60		rts				rts
.2922					_CFType:
.2922	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2924	20 18 15	jsr $1518		jsr	errorHandler
.2927					Command_NEXT:
.2927	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2929	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.292b	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.292d	f0 05		beq $2934			beq 	_isok
.292f	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.2931	20 18 15	jsr $1518		jsr	errorHandler
.2934					_isok:
.2934	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.2936	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2938	b0 18		bcs $2952			bcs 	_CNNoIndex
.293a	a2 00		ldx #$00			ldx 	#0 							; start on stack
.293c	20 9d 34	jsr $349d			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.293f	98		tya				tya
.2940	48		pha				pha
.2941	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.2943	b1 37		lda ($37),y			lda 	(rsPointer),y
.2945	d5 98		cmp $98,x			cmp 	esInt0,x
.2947	d0 76		bne $29bf			bne 	_CNBadIndex
.2949	c8		iny				iny
.294a	b1 37		lda ($37),y			lda 	(rsPointer),y
.294c	d5 a0		cmp $a0,x			cmp 	esInt1,x
.294e	d0 6f		bne $29bf			bne 	_CNBadIndex
.2950	68		pla				pla
.2951	a8		tay				tay
.2952					_CNNoIndex:
.2952	98		tya				tya
.2953	48		pha				pha
.2954	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.2956	b1 37		lda ($37),y			lda 	(rsPointer),y
.2958	85 2a		sta $2a				sta 	temp0
.295a	c8		iny				iny
.295b	b1 37		lda ($37),y			lda 	(rsPointer),y
.295d	85 2b		sta $2b				sta 	temp0+1
.295f	c8		iny				iny
.2960	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.2962	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.2964	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.2966	10 01		bpl $2969			bpl 	_CNSignX
.2968	ca		dex				dex  								; X = $FF
.2969					_CNSignX:
.2969	18		clc				clc 								; add to the LSB
.296a	a0 00		ldy #$00			ldy 	#0
.296c	71 2a		adc ($2a),y			adc 	(temp0),y
.296e	91 2a		sta ($2a),y			sta 	(temp0),y
.2970					_CNPropogate:
.2970	c8		iny				iny  								; add the sign extended in X to the rest.
.2971	8a		txa				txa
.2972	71 2a		adc ($2a),y			adc 	(temp0),y
.2974	91 2a		sta ($2a),y			sta 	(temp0),y
.2976	c8		iny				iny
.2977	8a		txa				txa
.2978	71 2a		adc ($2a),y			adc 	(temp0),y
.297a	91 2a		sta ($2a),y			sta 	(temp0),y
.297c	c8		iny				iny
.297d	8a		txa				txa
.297e	71 2a		adc ($2a),y			adc 	(temp0),y
.2980	91 2a		sta ($2a),y			sta 	(temp0),y
.2982	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2983	a5 37		lda $37				lda 	rsPointer
.2985	69 07		adc #$07			adc 	#7
.2987	85 2c		sta $2c				sta 	temp1
.2989	a9 00		lda #$00			lda 	#0
.298b	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.298d	a8		tay				tay 								; and clear the Y register again.
.298e	65 38		adc $38				adc 	rsPointer+1
.2990	85 2d		sta $2d				sta 	temp1+1
.2992	38		sec				sec 								; calculate current - limit oring interim values.
.2993	20 cb 29	jsr $29cb			jsr 	_CNCompare 					; each of these does a byte.
.2996	20 cb 29	jsr $29cb			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.2999	20 cb 29	jsr $29cb			jsr 	_CNCompare 					; and the carry of the subtraction.
.299c	20 cb 29	jsr $29cb			jsr 	_CNCompare
.299f	50 02		bvc $29a3			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.29a1	49 80		eor #$80			eor 	#$80
.29a3					_CNNoOverflow:
.29a3	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.29a5	30 1d		bmi $29c4			bmi 	_CNCheckDownto
.29a7	c9 00		cmp #$00			cmp 	#0
.29a9	30 0c		bmi $29b7			bmi 	_CNLoopRound 				; loop round if < =
.29ab	a5 2e		lda $2e				lda 	temp2
.29ad	f0 08		beq $29b7			beq 	_CNLoopRound
.29af					_CNLoopExit:
.29af	68		pla				pla
.29b0	a8		tay				tay
.29b1	a9 0b		lda #$0b			lda 	#11
.29b3	20 b9 3b	jsr $3bb9			jsr 	RSFree
.29b6	60		rts				rts
.29b7					_CNLoopRound:
.29b7	68		pla				pla
.29b8	a8		tay				tay
.29b9	a9 01		lda #$01			lda 	#1
.29bb	20 d6 3b	jsr $3bd6			jsr 	RSLoadPosition				; go back to the loop top
.29be	60		rts				rts
.29bf					_CNBadIndex:
.29bf	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.29c1	20 18 15	jsr $1518		jsr	errorHandler
.29c4					_CNCheckDownto:
.29c4	c9 00		cmp #$00			cmp 	#0
.29c6	10 ef		bpl $29b7			bpl 	_CNLoopRound
.29c8	4c af 29	jmp $29af			jmp 	_CNLoopExit
.29cb					_CNCompare:
.29cb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.29cd	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.29cf	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.29d1	85 2e		sta $2e				sta 	temp2
.29d3	c8		iny				iny
.29d4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/if.asm

.29d5					CommandIf:
.29d5	20 62 34	jsr $3462			jsr 	EvaluateRootInteger 		; get what's being tested.
.29d8	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.29da	c9 91		cmp #$91			cmp 	#TKW_GOTO
.29dc	f0 04		beq $29e2			beq 	_IfSimple
.29de	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.29e0	d0 1b		bne $29fd			bne 	_IfComplex
.29e2					_IfSimple:
.29e2	20 23 3b	jsr $3b23			jsr 	MInt32Zero					; check if TOS zero
.29e5	f0 10		beq $29f7			beq 	_IfEOL 						; go to next line.
.29e7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.29e9	c8		iny				iny
.29ea	c9 91		cmp #$91			cmp 	#TKW_GOTO 					; was it if GOTO ?
.29ec	f0 0c		beq $29fa			beq 	_IfGoto 					; do the Goto code
.29ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.29f0	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.29f2	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.29f4	f0 04		beq $29fa			beq 	_IfGoto
.29f6	60		rts				rts 								; else continue on this line.
.29f7					_IfEOL:
.29f7	4c b2 28	jmp $28b2			jmp 	AdvanceNextLine 			; go to next line
.29fa					_IfGoto:
.29fa	4c e9 25	jmp $25e9			jmp 	CommandGoto
.29fd					_IfComplex:
.29fd	20 23 3b	jsr $3b23			jsr 	MInt32Zero 					; is it true ?
.2a00	f0 01		beq $2a03			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.2a02	60		rts				rts 								; else continue.
.2a03					_IFSkip:
.2a03	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.2a05	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2a07	4c 9f 2c	jmp $2c9f			jmp		ScanForward
.2a0a					Command_ELSE:
.2a0a	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.2a0c	8a		txa				txa
.2a0d	4c 9f 2c	jmp $2c9f			jmp		ScanForward
.2a10					Command_ENDIF:
.2a10	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/local.asm

.0cff					storeSize:
>0cff							.fill 	1
.2a11					CommandLocal:
.2a11	a2 00		ldx #$00			ldx 	#0
.2a13	20 2f 2a	jsr $2a2f			jsr 	LocaliseVariable 			; localise one.
.2a16					_CLCheckNext:
.2a16	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.2a18	c8		iny				iny
.2a19	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.2a1b	f0 06		beq $2a23			beq 	_CLAssignment
.2a1d	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.2a1f	f0 f0		beq $2a11			beq 	CommandLocal
.2a21	88		dey				dey
.2a22	60		rts				rts
.2a23					_CLAssignment:
.2a23	a2 01		ldx #$01			ldx 	#1
.2a25	20 45 34	jsr $3445			jsr 	Evaluate 					; evaluate RHS
.2a28	ca		dex				dex
.2a29	20 f2 27	jsr $27f2			jsr 	WriteValue
.2a2c	4c 16 2a	jmp $2a16			jmp 	_CLCheckNext
.2a2f					LocaliseVariable:
.2a2f	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.2a31	c9 40		cmp #$40			cmp 	#$40
.2a33	b0 67		bcs $2a9c			bcs 	_LVSyntax
.2a35	8a		txa				txa 								; get the address of that variable.
.2a36	a2 02		ldx #$02		ldx	#2
.2a38	20 fb 4a	jsr $4afb		jsr	variableHandler
.2a3b	aa		tax				tax
.2a3c	8a		txa				txa
.2a3d	48		pha				pha
.2a3e	98		tya				tya
.2a3f	48		pha				pha
.2a40	20 54 28	jsr $2854			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.2a43	b5 90		lda $90,x			lda 	esType,x 					; get the type
.2a45	0a		asl a				asl 	a
.2a46	10 16		bpl $2a5e			bpl 	_LVPushNumber
.2a48	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.2a4a	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a4c	c8		iny				iny
.2a4d	85 2c		sta $2c				sta 	temp1
.2a4f	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a51	85 2d		sta $2d				sta 	temp1+1
.2a53	a0 00		ldy #$00			ldy 	#0 	 						; get length
.2a55	b1 2c		lda ($2c),y			lda 	(temp1),y
.2a57	aa		tax				tax 								; into X
.2a58	e8		inx				inx 								; +1 for length.
.2a59	a9 24		lda #$24			lda 	#markerString
.2a5b	4c 73 2a	jmp $2a73			jmp 	_LVWriteFrame
.2a5e					_LVPushNumber:
.2a5e	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.2a60	85 2c		sta $2c				sta 	temp1
.2a62	a5 2b		lda $2b				lda 	temp0+1
.2a64	85 2d		sta $2d				sta 	temp1+1
.2a66	b5 90		lda $90,x			lda 	esType,x 					; put float flag into carry.
.2a68	4a		lsr a				lsr 	a
.2a69	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.2a6b	a2 04		ldx #$04			ldx 	#VarISize
.2a6d	90 04		bcc $2a73			bcc 	_LVIsInteger
.2a6f	a9 23		lda #$23			lda 	#markerFloat
.2a71	a2 06		ldx #$06			ldx 	#VarFSize
.2a73					_LVIsInteger:
.2a73					_LVWriteFrame:
.2a73	8e ff 0c	stx $0cff			stx 	storeSize 					; number of bytes to copy from (temp0)
.2a76	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.2a77	e8		inx				inx
.2a78	e8		inx				inx
.2a79	20 97 3b	jsr $3b97			jsr 	RSClaim 					; create the stack frame.
.2a7c	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.2a7e	a0 01		ldy #$01			ldy 	#1
.2a80	91 37		sta ($37),y			sta 	(rsPointer),y
.2a82	c8		iny				iny
.2a83	a5 2b		lda $2b				lda 	temp0+1
.2a85	91 37		sta ($37),y			sta 	(rsPointer),y
.2a87	a0 00		ldy #$00			ldy 	#0
.2a89					_LVCopyData:
.2a89	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.2a8b	c8		iny				iny 								; write allowing for the header bit.
.2a8c	c8		iny				iny
.2a8d	c8		iny				iny
.2a8e	91 37		sta ($37),y			sta 	(rsPointer),y
.2a90	88		dey				dey
.2a91	88		dey				dey
.2a92	ce ff 0c	dec $0cff			dec 	storeSize 					; do it storesize times
.2a95	d0 f2		bne $2a89			bne 	_LVCopyData
.2a97	68		pla				pla
.2a98	a8		tay				tay
.2a99	68		pla				pla
.2a9a	aa		tax				tax
.2a9b	60		rts				rts
.2a9c					_LVSyntax:
.2a9c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2a9e	20 18 15	jsr $1518		jsr	errorHandler
.2aa1					RestoreLocals:
.2aa1	a2 00		ldx #$00			ldx 	#0
.2aa3	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2aa5	c9 40		cmp #$40			cmp	 	#64
.2aa7	90 01		bcc $2aaa			bcc 	_RLocal
.2aa9	60		rts				rts
.2aaa					_RLocal:
.2aaa	8a		txa				txa
.2aab	48		pha				pha
.2aac	98		tya				tya
.2aad	48		pha				pha
.2aae	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.2ab0	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ab2	85 2a		sta $2a				sta 	temp0
.2ab4	c8		iny				iny
.2ab5	b1 37		lda ($37),y			lda 	(rsPointer),y
.2ab7	85 2b		sta $2b				sta 	temp0+1
.2ab9	a0 00		ldy #$00			ldy 	#0 							; get type back.
.2abb	b1 37		lda ($37),y			lda 	(rsPointer),y
.2abd	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.2abf	f0 28		beq $2ae9			beq 	_RString
.2ac1	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.2ac3	c9 25		cmp #$25			cmp 	#markerInt
.2ac5	f0 02		beq $2ac9			beq 	_RIsInteger
.2ac7	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.2ac9					_RIsInteger:
.2ac9	8a		txa				txa
.2aca	48		pha				pha
.2acb	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.2acd					_RCopyBack:
.2acd	b1 37		lda ($37),y			lda 	(rsPointer),y
.2acf	88		dey				dey
.2ad0	88		dey				dey
.2ad1	88		dey				dey
.2ad2	91 2a		sta ($2a),y			sta 	(temp0),y
.2ad4	c8		iny				iny
.2ad5	c8		iny				iny
.2ad6	c8		iny				iny
.2ad7	c8		iny				iny
.2ad8	ca		dex				dex
.2ad9	d0 f2		bne $2acd			bne 	_RCopyBack
.2adb	68		pla				pla 								; get size add 3
.2adc	18		clc				clc
.2add	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.2adf					_RRestoreAAndLoop:
.2adf	20 b9 3b	jsr $3bb9			jsr 	RSFree
.2ae2	68		pla				pla
.2ae3	a8		tay				tay
.2ae4	68		pla				pla
.2ae5	aa		tax				tax
.2ae6	4c a1 2a	jmp $2aa1			jmp 	RestoreLocals 				; go see if there are any more locals.
.2ae9					_RString:
.2ae9	a2 00		ldx #$00			ldx 	#0
.2aeb	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.2aed	b1 37		lda ($37),y			lda 	(rsPointer),y
.2aef	95 98		sta $98,x			sta 	esInt0,x
.2af1	c8		iny				iny
.2af2	b1 37		lda ($37),y			lda 	(rsPointer),y
.2af4	95 a0		sta $a0,x			sta 	esInt1,x
.2af6	18		clc				clc
.2af7	a5 37		lda $37				lda 	rsPointer
.2af9	69 03		adc #$03			adc 	#3
.2afb	95 99		sta $99,x			sta 	esInt0+1,x
.2afd	a5 38		lda $38				lda 	rsPointer+1
.2aff	69 00		adc #$00			adc 	#0
.2b01	95 a1		sta $a1,x			sta 	esInt1+1,x
.2b03	8a		txa				txa
.2b04	a2 10		ldx #$10		ldx	#16
.2b06	20 a7 3e	jsr $3ea7		jsr	stringHandler
.2b09	a0 03		ldy #$03			ldy 	#3 							; get string length
.2b0b	b1 37		lda ($37),y			lda 	(rsPointer),y
.2b0d	18		clc				clc
.2b0e	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.2b10	4c df 2a	jmp $2adf			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proc.asm

.0d00					paramCount:
>0d00							.fill 	1
.2b13					CallProc:
.2b13	20 9b 2b	jsr $2b9b			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.2b16	48		pha				pha 								; save length on stack
.2b17	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2b19	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2b1b	48		pha				pha
.2b1c	a5 2a		lda $2a				lda 	temp0
.2b1e	48		pha				pha
.2b1f	98		tya				tya 								; calculate Y + length
.2b20	18		clc				clc
.2b21	65 32		adc $32				adc 	tempShort
.2b23	a8		tay				tay
.2b24	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.2b26					_CallProcEvalParams:
.2b26	e8		inx				inx
.2b27	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2b29	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2b2b	f0 0b		beq $2b38			beq 	_CPDoneParams
.2b2d	20 45 34	jsr $3445			jsr 	Evaluate 					; evaluate a parameter
.2b30	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2b32	c8		iny				iny
.2b33	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.2b35	f0 ef		beq $2b26			beq 	_CallProcEvalParams
.2b37	88		dey				dey 								; undo consumption.
.2b38					_CPDoneParams:
.2b38	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; check closing parenthesis.
.2b3b	8e 00 0d	stx $0d00			stx 	paramCount 					; store parameter count+1
.2b3e	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2b40	a9 50		lda #$50			lda 	#markerPROC
.2b42	20 97 3b	jsr $3b97			jsr 	RSClaim
.2b45	a9 01		lda #$01			lda 	#1 							; store return address.
.2b47	20 c3 3b	jsr $3bc3			jsr 	RSSavePosition
.2b4a	68		pla				pla 								; get the new code Ptr
.2b4b	85 28		sta $28				sta 	codePtr
.2b4d	68		pla				pla
.2b4e	85 29		sta $29				sta 	codePtr+1
.2b50	68		pla				pla 								; length of name + 4 is the param start.
.2b51	18		clc				clc
.2b52	69 04		adc #$04			adc 	#4
.2b54	a8		tay				tay
.2b55	a2 ff		ldx #$ff			ldx 	#$FF
.2b57					_CPLoadParameters:
.2b57	e8		inx				inx 								; point to where the address should be loaded.
.2b58	ec 00 0d	cpx $0d00			cpx 	paramCount 					; too many parameters in definition ?
.2b5b	f0 1e		beq $2b7b			beq 	_CPParamError
.2b5d	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2b5f	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2b61	f0 0e		beq $2b71			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.2b63	20 2f 2a	jsr $2a2f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.2b66	20 f2 27	jsr $27f2			jsr 	WriteValue 					; copy the evaluated parameter into there.
.2b69	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.2b6b	c8		iny				iny
.2b6c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2b6e	f0 e7		beq $2b57			beq 	_CPLoadParameters
.2b70	88		dey				dey 								; no, unconsume and check for )
.2b71					_CPParamComplete:
.2b71	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; check )
.2b74	e8		inx				inx 								; check right number of parameters have been consumed
.2b75	ec 00 0d	cpx $0d00			cpx 	paramCount
.2b78	d0 01		bne $2b7b			bne 	_CPParamError
.2b7a	60		rts				rts
.2b7b					_CPParamError:
.2b7b	a2 18		ldx #$18			ldx 	#ErrorID_Params
.2b7d	20 18 15	jsr $1518		jsr	errorHandler
.2b80					ReturnProc:
.2b80	20 a1 2a	jsr $2aa1			jsr 	RestoreLocals 				; get the locals back.
.2b83	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2b85	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2b87	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.2b89	f0 05		beq $2b90			beq 	_isok
.2b8b	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.2b8d	20 18 15	jsr $1518		jsr	errorHandler
.2b90					_isok:
.2b90	a9 01		lda #$01			lda 	#1
.2b92	20 d6 3b	jsr $3bd6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2b95	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2b97	20 b9 3b	jsr $3bb9			jsr 	RSFree
.2b9a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/proctable.asm

.0d01					procList:
>0d01							.fill 	2		 					; terminated by name high being zero.
.0d03					yInLine:
>0d03							.fill 	1
.2b9b					FindProcedure:
.2b9b	8c 03 0d	sty $0d03			sty 	yInLine 					; save current position.
.2b9e	20 59 2c	jsr $2c59			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2ba1	85 2c		sta $2c				sta 	temp1
.2ba3	ad 01 0d	lda $0d01			lda		procList 					; put procList address in temp2
.2ba6	85 2e		sta $2e				sta 	temp2
.2ba8	ad 02 0d	lda $0d02			lda 	procList+1
.2bab	85 2f		sta $2f				sta 	temp2+1
.2bad	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2baf					_FPLoop:
.2baf	b1 2e		lda ($2e),y			lda 	(temp2),y
.2bb1	f0 4f		beq $2c02			beq 	_FPError 					; if so, we don't know this procedure.
.2bb3	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.2bb5	c8		iny				iny
.2bb6	b1 2e		lda ($2e),y			lda 	(temp2),y
.2bb8	85 2a		sta $2a				sta 	temp0
.2bba	c8		iny				iny
.2bbb	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2bbd	c5 2c		cmp $2c				cmp 	temp1
.2bbf	d0 2b		bne $2bec			bne 	_FPNext 					; hash is different, go to next.
.2bc1	38		sec				sec
.2bc2	ad 03 0d	lda $0d03			lda 	yInLine 					; position in line must be at least 4
.2bc5	e9 04		sbc #$04			sbc 	#4
.2bc7	18		clc				clc
.2bc8	65 28		adc $28				adc 	codePtr
.2bca	85 30		sta $30				sta 	temp3
.2bcc	a5 29		lda $29				lda 	codePtr+1
.2bce	69 00		adc #$00			adc 	#0
.2bd0	85 31		sta $31				sta 	temp3+1
.2bd2	98		tya				tya
.2bd3	48		pha				pha
.2bd4	a0 04		ldy #$04			ldy 	#4
.2bd6					_FPCName:
.2bd6	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.2bd8	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.2bda	d0 0e		bne $2bea			bne 	_FPpulYNext 				; if different go to next one.
.2bdc	c8		iny				iny
.2bdd	c9 3a		cmp #$3a			cmp 	#$3A
.2bdf	90 f5		bcc $2bd6			bcc 	_FPCName 					; compare the whole lot....
.2be1	68		pla				pla 								; throw away the saved Y
.2be2	98		tya				tya 								; length of name is Y-4
.2be3	38		sec				sec
.2be4	e9 04		sbc #$04			sbc 	#4
.2be6	ac 03 0d	ldy $0d03			ldy 	yInLine  					; get the original Y back
.2be9	60		rts				rts
.2bea					_FPpulYNext:
.2bea	68		pla				pla
.2beb	a8		tay				tay
.2bec					_FPNext:
.2bec	c8		iny				iny 								; next procedure record.
.2bed	10 c0		bpl $2baf			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2bef	98		tya				tya 								; subtract 128 from Y
.2bf0	38		sec				sec
.2bf1	e9 80		sbc #$80			sbc 	#128
.2bf3	a8		tay				tay
.2bf4	18		clc				clc 								; add 128 to temp2, so we can have more than
.2bf5	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.2bf7	69 80		adc #$80			adc 	#128
.2bf9	85 2e		sta $2e				sta 	temp2
.2bfb	90 b2		bcc $2baf			bcc 	_FPLoop
.2bfd	e6 2f		inc $2f				inc 	temp2+1
.2bff	4c af 2b	jmp $2baf			jmp 	_FPLoop
.2c02					_FPError:
.2c02	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2c04	20 18 15	jsr $1518		jsr	errorHandler
.2c07					ScanProc:
.2c07	98		tya				tya
.2c08	48		pha				pha
.2c09	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2c0b	8d 01 0d	sta $0d01			sta 	procList
.2c0e	a5 36		lda $36				lda 	lowMemory+1
.2c10	8d 02 0d	sta $0d02			sta 	procList+1
.2c13	20 83 2f	jsr $2f83			jsr 	ResetCodeAddress 			; back to the start.
.2c16					_ScanLoop:
.2c16	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.2c18	b1 28		lda ($28),y			lda 	(codePtr),y
.2c1a	f0 2a		beq $2c46			beq 	_ScanExit
.2c1c	a0 03		ldy #$03			ldy 	#3							; get first token
.2c1e	b1 28		lda ($28),y			lda 	(codePtr),y
.2c20	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2c22	d0 12		bne $2c36			bne 	_ScanNext
.2c24	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.2c26	20 4e 2c	jsr $2c4e			jsr 	_ScanWrite
.2c29	a5 28		lda $28				lda 	codePtr
.2c2b	20 4e 2c	jsr $2c4e			jsr 	_ScanWrite
.2c2e	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2c30	20 59 2c	jsr $2c59			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2c33	20 4e 2c	jsr $2c4e			jsr 	_ScanWrite					; and write that
.2c36					_ScanNext:
.2c36	18		clc				clc
.2c37	a0 00		ldy #$00			ldy 	#0
.2c39	b1 28		lda ($28),y			lda 	(codePtr),y
.2c3b	65 28		adc $28				adc 	codePtr
.2c3d	85 28		sta $28				sta 	codePtr
.2c3f	90 d5		bcc $2c16			bcc 	_ScanLoop
.2c41	e6 29		inc $29				inc 	codePtr+1
.2c43	4c 16 2c	jmp $2c16			jmp 	_ScanLoop
.2c46					_ScanExit:
.2c46	a9 00		lda #$00			lda 	#0 							; write ending zero.
.2c48	20 4e 2c	jsr $2c4e			jsr 	_ScanWrite
.2c4b	68		pla				pla
.2c4c	a8		tay				tay
.2c4d	60		rts				rts
.2c4e					_ScanWrite:
.2c4e	a0 00		ldy #$00			ldy 	#0
.2c50	91 35		sta ($35),y			sta 	(lowMemory),y
.2c52	e6 35		inc $35				inc 	lowMemory
.2c54	d0 02		bne $2c58			bne 	_SWNoCarry
.2c56	e6 36		inc $36				inc 	lowMemory+1
.2c58					_SWNoCarry:
.2c58	60		rts				rts
.2c59					CalculateProcedureHash:
.2c59	a9 00		lda #$00			lda 	#0 							; clear hash.
.2c5b	85 2a		sta $2a				sta 	temp0
.2c5d					_CPHLoop:
.2c5d	18		clc				clc 								; add character and rotate and add carry back in
.2c5e	b1 28		lda ($28),y			lda 	(codePtr),y
.2c60	65 2a		adc $2a				adc 	temp0
.2c62	6a		ror a				ror 	a
.2c63	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.2c65	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.2c67	b1 28		lda ($28),y			lda 	(codePtr),y
.2c69	c8		iny				iny 								; advance incase we go round again.
.2c6a	c9 3a		cmp #$3a			cmp 	#$3A
.2c6c	90 ef		bcc $2c5d			bcc 	_CPHLoop
.2c6e	a5 2a		lda $2a				lda 	temp0
.2c70	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/repeat.asm

.2c71					Command_Repeat:
.2c71	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2c73	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2c75	20 97 3b	jsr $3b97			jsr 	RSClaim
.2c78	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2c7a	20 c3 3b	jsr $3bc3			jsr 	RSSavePosition
.2c7d	60		rts				rts
.2c7e					Command_Until:
.2c7e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2c80	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2c82	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2c84	f0 05		beq $2c8b			beq 	_isok
.2c86	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2c88	20 18 15	jsr $1518		jsr	errorHandler
.2c8b					_isok:
.2c8b	20 62 34	jsr $3462			jsr 	EvaluateRootInteger 		; at the bottom.
.2c8e	20 23 3b	jsr $3b23			jsr 	MInt32Zero					; check if TOS zero
.2c91	d0 06		bne $2c99			bne 	_CUExit
.2c93	a9 01		lda #$01			lda 	#1
.2c95	20 d6 3b	jsr $3bd6			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2c98	60		rts				rts
.2c99					_CUExit:
.2c99	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2c9b	20 b9 3b	jsr $3bb9			jsr 	RSFree
.2c9e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/scanner.asm

.2c9f					ScanForward:
.2c9f	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2ca1	86 2d		stx $2d				stx 	temp1+1
.2ca3	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2ca5	85 2e		sta $2e				sta 	temp2
.2ca7	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2ca9	c8		iny				iny
.2caa	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2cac	d0 08		bne $2cb6			bne 	_SFNoCheck 					; if so, check token against entered values.
.2cae	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2cb0	f0 24		beq $2cd6			beq 	_SFExit 					; at the same strcture depth.
.2cb2	c5 2d		cmp $2d				cmp 	temp1+1
.2cb4	f0 20		beq $2cd6			beq 	_SFExit
.2cb6					_SFNoCheck:
.2cb6	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2cb8	90 ed		bcc $2ca7			bcc 	_SFLoop
.2cba	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2cbc	90 19		bcc $2cd7			bcc 	_SFSpecials
.2cbe	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.2cc0	90 e5		bcc $2ca7			bcc 	_SFLoop
.2cc2	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2cc4	b0 e1		bcs $2ca7			bcs 	_SFLoop
.2cc6	aa		tax				tax  								; token in X, and look up the adjuster.
.2cc7	bd 80 33	lda $3380,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2cca	38		sec				sec 								; convert to an offset ($FF,$01)
.2ccb	e9 81		sbc #$81			sbc 	#$81
.2ccd	18		clc				clc 								; add to depth
.2cce	65 2e		adc $2e				adc 	temp2
.2cd0	85 2e		sta $2e				sta 	temp2
.2cd2	10 d3		bpl $2ca7			bpl 	_SFLoop 					; +ve okay to continue
.2cd4	30 07		bmi $2cdd			bmi 	SFError 					; if gone -ve then we have a nesting error
.2cd6	60		rts		_SFExit:rts
.2cd7					_SFSpecials:
.2cd7	20 e2 2c	jsr $2ce2			jsr 	ScannerSkipSpecial
.2cda	4c a7 2c	jmp $2ca7			jmp 	_SFLoop
.2cdd					SFError:
.2cdd	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.2cdf	20 18 15	jsr $1518		jsr	errorHandler
.2ce2					ScannerSkipSpecial:
.2ce2	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2ce4	f0 10		beq $2cf6			beq 	_SFNextLine
.2ce6	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.2ce8	f0 2b		beq $2d15			beq 	_SFFloatSkip
.2cea	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2cec	f0 02		beq $2cf0			beq 	_SFSkipString
.2cee	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2cef	60		rts				rts 								; token.
.2cf0					_SFSkipString:
.2cf0	98		tya				tya
.2cf1	38		sec				sec
.2cf2	71 28		adc ($28),y			adc 	(codePtr),y
.2cf4	a8		tay				tay
.2cf5	60		rts				rts
.2cf6					_SFNextLine:
.2cf6	a0 00		ldy #$00			ldy 	#0 							; get offset
.2cf8	b1 28		lda ($28),y			lda 	(codePtr),y
.2cfa	18		clc				clc 								; add to code pointer.
.2cfb	65 28		adc $28				adc 	codePtr
.2cfd	85 28		sta $28				sta 	codePtr
.2cff	90 02		bcc $2d03			bcc		_SFNLNoCarry
.2d01	e6 29		inc $29				inc 	codePtr+1
.2d03					_SFNLNoCarry:
.2d03	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.2d05	d0 0b		bne $2d12			bne		_SFXNL 						; no go round again
.2d07	a5 2c		lda $2c				lda 	temp1
.2d09	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.2d0b	d0 d0		bne $2cdd			bne 	SFError 					; read uses this to search for data statements
.2d0d	a2 1d		ldx #$1d			ldx 	#ErrorID_DataError
.2d0f	20 18 15	jsr $1518		jsr	errorHandler
.2d12	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.2d14	60		rts				rts
.2d15					_SFFloatSkip:
.2d15	98		tya				tya 								; skip over an embedded float.
.2d16	18		clc				clc
.2d17	69 05		adc #$05			adc 	#FloatEmbeddedSize
.2d19	a8		tay				tay
.2d1a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/structures/while.asm

.2d1b					Command_While:
.2d1b	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2d1d	a2 04		ldx #$04			ldx 	#4
.2d1f	20 97 3b	jsr $3b97			jsr 	RSClaim 					; create on stack.
.2d22	88		dey				dey
.2d23	a9 01		lda #$01			lda 	#1
.2d25	20 c3 3b	jsr $3bc3			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2d28	c8		iny				iny
.2d29	20 62 34	jsr $3462			jsr 	EvaluateRootInteger			; get the conditional
.2d2c	20 23 3b	jsr $3b23			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.2d2f	f0 01		beq $2d32			beq 	_CWFail
.2d31	60		rts				rts
.2d32					_CWFail:
.2d32	a9 04		lda #$04			lda 	#4
.2d34	20 b9 3b	jsr $3bb9			jsr 	RSFree 						; close the just opened position.
.2d37	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.2d39	aa		tax				tax
.2d3a	20 9f 2c	jsr $2c9f			jsr 	ScanForward
.2d3d	60		rts				rts
.2d3e					Command_Wend:
.2d3e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2d40	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2d42	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2d44	f0 05		beq $2d4b			beq 	_isok
.2d46	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.2d48	20 18 15	jsr $1518		jsr	errorHandler
.2d4b					_isok:
.2d4b	a9 01		lda #$01			lda 	#1
.2d4d	20 d6 3b	jsr $3bd6			jsr 	RSLoadPosition				; go back until true
.2d50	a9 04		lda #$04			lda 	#4
.2d52	20 b9 3b	jsr $3bb9			jsr 	RSFree 						; close the loop
.2d55	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/clear.asm

.2d56					CommandClear:
.2d56					XCommandClear:
.2d56	98		tya				tya
.2d57	48		pha				pha
.2d58	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.2d5b	85 33		sta $33				sta 	highMemory
.2d5d	ad cd 0a	lda $0acd			lda 	endMemory+1
.2d60	85 34		sta $34				sta 	highMemory+1
.2d62	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.2d65	85 2a		sta $2a				sta 	temp0
.2d67	ad c9 0a	lda $0ac9			lda 	basePage+1
.2d6a	85 2b		sta $2b				sta 	temp0+1
.2d6c					_CCFindEnd:
.2d6c	a0 00		ldy #$00			ldy 	#0
.2d6e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2d70	f0 0c		beq $2d7e			beq 	_CCFoundEnd 				; offset zero is end.
.2d72	18		clc				clc
.2d73	65 2a		adc $2a				adc 	temp0 						; move to next line
.2d75	85 2a		sta $2a				sta 	temp0
.2d77	90 f3		bcc $2d6c			bcc 	_CCFindEnd
.2d79	e6 2b		inc $2b				inc 	temp0+1
.2d7b	4c 6c 2d	jmp $2d6c			jmp 	_CCFindEnd
.2d7e					_CCFoundEnd:
.2d7e	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.2d80	85 35		sta $35				sta 	lowMemory
.2d82	a5 2b		lda $2b				lda 	temp0+1
.2d84	85 36		sta $36				sta 	lowMemory+1
.2d86	18		clc				clc 								; put temp0+1 in endProgram
.2d87	a5 2a		lda $2a				lda 	temp0
.2d89	69 01		adc #$01			adc 	#1
.2d8b	8d ca 0a	sta $0aca			sta 	endProgram
.2d8e	a5 2b		lda $2b				lda 	temp0+1
.2d90	69 00		adc #$00			adc 	#0
.2d92	8d cb 0a	sta $0acb			sta 	endProgram+1
.2d95	18		clc				clc 								; put a bit of space in.
.2d96	a5 35		lda $35				lda 	lowMemory
.2d98	69 04		adc #$04			adc 	#4
.2d9a	85 35		sta $35				sta 	lowMemory
.2d9c	90 02		bcc $2da0			bcc 	_CCNoCarry
.2d9e	e6 36		inc $36				inc 	lowMemory+1
.2da0					_CCNoCarry:
.2da0	20 89 3b	jsr $3b89			jsr 	RSReset 					; reset the return stack.
.2da3	a2 06		ldx #$06		ldx	#6
.2da5	20 fb 4a	jsr $4afb		jsr	variableHandler
.2da8	20 07 2c	jsr $2c07			jsr 	ScanProc 					; scan for procedures
.2dab	20 8c 25	jsr $258c			jsr 	CommandRestore 				; do a restore
.2dae	68		pla				pla
.2daf	a8		tay				tay
.2db0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/list.asm

.0d04					structIndent:
>0d04							.fill 	1
.2db1					CommandList:
.2db1	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.2db3	8e 04 0d	stx $0d04			stx 	structIndent
.2db6	20 fc 3a	jsr $3afc			jsr 	MInt32False
.2db9	e8		inx				inx
.2dba	20 f8 3a	jsr $3af8			jsr 	MInt32True
.2dbd	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.2dbf	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.2dc1	f0 15		beq $2dd8			beq 	_CLEndLine
.2dc3	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.2dc5	30 1b		bmi $2de2			bmi 	_CLDoListing 				; do the whole lot.
.2dc7	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.2dc9	20 64 34	jsr $3464			jsr 	EvaluateInteger
.2dcc	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.2dce	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2dd0	f0 06		beq $2dd8			beq 	_CLEndLine
.2dd2	20 3a 3a	jsr $3a3a			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.2dd5	4c e2 2d	jmp $2de2			jmp 	_CLDoListing 				; own e.g. list 1100
.2dd8					_CLEndLine:
.2dd8	c8		iny				iny 								; skip comma
.2dd9	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.2ddb	30 05		bmi $2de2			bmi 	_CLDoListing
.2ddd	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.2ddf	20 64 34	jsr $3464			jsr 	EvaluateInteger				; get end
.2de2					_CLDoListing:
.2de2	20 83 2f	jsr $2f83			jsr 	ResetCodeAddress 			; back to the start.
.2de5					_CLCheckLoop:
.2de5	a2 02		ldx #$02		ldx	#2
.2de7	20 f6 14	jsr $14f6		jsr	deviceHandler
.2dea	a0 00		ldy #$00			ldy 	#0							; check end.
.2dec	b1 28		lda ($28),y			lda 	(codePtr),y
.2dee	f0 41		beq $2e31			beq 	_CLEnd
.2df0	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.2df2	20 34 2e	jsr $2e34			jsr 	CLCompareLineTOS
.2df5	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.2df7	f0 28		beq $2e21			beq 	_CLNext
.2df9	e8		inx				inx
.2dfa	20 34 2e	jsr $2e34			jsr 	CLCompareLineTOS 			; compare vs higher
.2dfd	c9 01		cmp #$01			cmp 	#1
.2dff	f0 20		beq $2e21			beq 	_CLNext
.2e01	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.2e03	20 56 2e	jsr $2e56			jsr 	CLStructureCheck
.2e06	ad 04 0d	lda $0d04			lda 	structIndent 				; indent level.
.2e09	10 02		bpl $2e0d			bpl 	_CLPositive
.2e0b	a9 00		lda #$00			lda 	#0
.2e0d					_CLPositive:
.2e0d	a2 04		ldx #$04		ldx	#4
.2e0f	20 2a 47	jsr $472a		jsr	tokeniserHandler
.2e12	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.2e14	20 56 2e	jsr $2e56			jsr 	CLStructureCheck
.2e17	ad 04 0d	lda $0d04			lda 	structIndent
.2e1a	10 05		bpl $2e21			bpl 	_CLNext
.2e1c	a9 00		lda #$00			lda 	#0
.2e1e	8d 04 0d	sta $0d04			sta 	structIndent
.2e21					_CLNext:
.2e21	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.2e23	b1 28		lda ($28),y			lda 	(codePtr),y
.2e25	18		clc				clc
.2e26	65 28		adc $28				adc 	codePtr
.2e28	85 28		sta $28				sta 	codePtr
.2e2a	90 b9		bcc $2de5			bcc 	_CLCheckLoop
.2e2c	e6 29		inc $29				inc 	codePtr+1
.2e2e	4c e5 2d	jmp $2de5			jmp 	_CLCheckLoop
.2e31					_CLEnd:
.2e31	4c e5 3b	jmp $3be5			jmp 	WarmStart 					; warm start after list.
.2e34					CLCompareLineTOS:
.2e34	a0 01		ldy #$01			ldy 	#1
.2e36	b1 28		lda ($28),y			lda 	(codePtr),y
.2e38	55 98		eor $98,x			eor 	esInt0,x
.2e3a	85 2a		sta $2a				sta 	temp0
.2e3c	c8		iny				iny
.2e3d	b1 28		lda ($28),y			lda 	(codePtr),y
.2e3f	55 a0		eor $a0,x			eor 	esInt1,x
.2e41	05 2a		ora $2a				ora 	temp0
.2e43	f0 10		beq $2e55			beq 	_CLCLTExit
.2e45	88		dey				dey
.2e46	b1 28		lda ($28),y			lda 	(codePtr),y
.2e48	d5 98		cmp $98,x			cmp 	esInt0,x
.2e4a	c8		iny				iny
.2e4b	b1 28		lda ($28),y			lda 	(codePtr),y
.2e4d	f5 a0		sbc $a0,x			sbc 	esInt1,x
.2e4f	a9 ff		lda #$ff			lda 	#255
.2e51	90 02		bcc $2e55			bcc 	_CLCLTExit
.2e53	a9 01		lda #$01			lda 	#1
.2e55					_CLCLTExit:
.2e55	60		rts				rts
.2e56					CLStructureCheck:
.2e56	85 2a		sta $2a				sta 	temp0
.2e58	a0 03		ldy #$03			ldy 	#3
.2e5a					_CLSCLoop:
.2e5a	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.2e5c	c8		iny				iny
.2e5d	c9 80		cmp #$80			cmp 	#$80
.2e5f	90 f9		bcc $2e5a			bcc 	_CLSCLoop 					; $00-$7F just step over.
.2e61	f0 28		beq $2e8b			beq		_CLSCExit					; EOL return
.2e63	c9 86		cmp #$86			cmp 	#$86 						; special handler
.2e65	90 1e		bcc $2e85			bcc 	_CLSCSpecial
.2e67	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.2e69	90 ef		bcc $2e5a			bcc 	_CLSCLoop
.2e6b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.2e6d	b0 eb		bcs $2e5a			bcs 	_CLSCLoop
.2e6f	aa		tax				tax 								; get adjustment
.2e70	bd 80 33	lda $3380,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2e73	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.2e75	d0 e3		bne $2e5a			bne 	_CLSCLoop
.2e77	38		sec				sec
.2e78	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.2e7a	0a		asl a				asl 	a 							; double indent step
.2e7b	18		clc				clc
.2e7c	6d 04 0d	adc $0d04			adc 	structIndent 				; add to structure indent
.2e7f	8d 04 0d	sta $0d04			sta 	structIndent
.2e82	4c 5a 2e	jmp $2e5a			jmp 	_CLSCLoop
.2e85					_CLSCSpecial:
.2e85	20 e2 2c	jsr $2ce2			jsr 	ScannerSkipSpecial
.2e88	4c 5a 2e	jmp $2e5a			jmp 	_CLSCLoop
.2e8b					_CLSCExit:
.2e8b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/loadsave.asm

.2e8c					CommandLoad:
.2e8c	20 b4 2e	jsr $2eb4			jsr 	CLSParameters 					; get parameters for load.
.2e8f	08		php				php
.2e90	a2 0e		ldx #$0e		ldx	#14
.2e92	20 f6 14	jsr $14f6		jsr	deviceHandler
.2e95	28		plp				plp
.2e96	b0 08		bcs $2ea0			bcs 	_CLExit 						; if CC then load a program, so warm start.
.2e98	20 56 2d	jsr $2d56			jsr 	CommandClear
.2e9b	a2 04		ldx #$04		ldx	#4
.2e9d	20 4e 25	jsr $254e		jsr	interactionHandler
.2ea0					_CLExit
.2ea0	60		rts				rts
.2ea1					CommandSave:
.2ea1	20 b4 2e	jsr $2eb4			jsr 	CLSParameters					; get parameters for save
.2ea4	90 08		bcc $2eae			bcc 	_CSNoOverrideAddress
.2ea6	20 7c 3b	jsr $3b7c			jsr 	CheckComma 						; should be a comma.
.2ea9	a2 02		ldx #$02			ldx 	#2
.2eab	20 64 34	jsr $3464			jsr 	EvaluateInteger 				; get save end address.
.2eae					_CSNoOverrideAddress:
.2eae	a2 18		ldx #$18		ldx	#24
.2eb0	20 f6 14	jsr $14f6		jsr	deviceHandler
.2eb3	60		rts				rts
.2eb4					CLSParameters:
.2eb4	a2 00		ldx #$00			ldx 	#0 								; string
.2eb6	20 59 34	jsr $3459			jsr 	EvaluateString
.2eb9	e8		inx				inx 									; erase out +1 +2
.2eba	20 fc 3a	jsr $3afc			jsr 	MInt32False
.2ebd	e8		inx				inx
.2ebe	20 fc 3a	jsr $3afc			jsr 	MInt32False
.2ec1	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.2ec4	85 99		sta $99				sta 	esInt0+1
.2ec6	ad c9 0a	lda $0ac9			lda 	basePage+1
.2ec9	85 a1		sta $a1				sta 	esInt1+1
.2ecb	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.2ece	85 9a		sta $9a				sta 	esInt0+2
.2ed0	ad cb 0a	lda $0acb			lda 	endProgram+1
.2ed3	85 a2		sta $a2				sta 	esInt1+2
.2ed5	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.2ed7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2ed9	d0 08		bne $2ee3			bne 	_CLSDefault
.2edb	c8		iny				iny 									; skip comma
.2edc	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.2ede	20 64 34	jsr $3464			jsr 	EvaluateInteger
.2ee1	38		sec				sec
.2ee2	60		rts				rts
.2ee3					_CLSDefault:
.2ee3	18		clc				clc
.2ee4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/new.asm

.2ee5					Command_New:
.2ee5					Command_XNew:
.2ee5	20 83 2f	jsr $2f83			jsr 	ResetCodeAddress 			; point to first line
.2ee8	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.2eea	98		tya				tya
.2eeb	91 28		sta ($28),y			sta 	(codePtr),y
.2eed	20 56 2d	jsr $2d56			jsr 	CommandClear 				; clear everything down.
.2ef0	4c ac 28	jmp $28ac			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/system/run.asm

.0d05					breakCounter:
>0d05								.fill 	1
.0d06					breakIncrement:
>0d06								.fill 	1
.2ef3					Command_Run:
.2ef3					XCommand_Run:
.2ef3	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2ef5	9a		txs				txs
.2ef6	20 7d 2f	jsr $2f7d			jsr 	BreakOn 					; turn break on
.2ef9	20 56 2d	jsr $2d56			jsr 	CommandClear 				; clear everything.
.2efc	20 83 2f	jsr $2f83			jsr 	ResetCodeAddress 			; back to the start.
.2eff					Command_RunFrom:
.2eff	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2f01					CRNextInstruction:
.2f01	64 3a		stz $3a				stz 	softMemAlloc+1
.2f03	ad 05 0d	lda $0d05			lda 	breakCounter 				; check for break.
.2f06	6d 06 0d	adc $0d06			adc 	breakIncrement
.2f09	8d 05 0d	sta $0d05			sta 	breakCounter
.2f0c	90 05		bcc $2f13			bcc 	_CRNoChecks
.2f0e	a2 02		ldx #$02		ldx	#2
.2f10	20 f6 14	jsr $14f6		jsr	deviceHandler
.2f13					_CRNoChecks
.2f13	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2f15	10 1c		bpl $2f33			bpl 	_CRNotToken
.2f17	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2f19	b0 0c		bcs $2f27			bcs 	_CRExecute
.2f1b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.2f1d	b0 71		bcs $2f90			bcs 	Unimplemented
.2f1f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.2f21	b0 04		bcs $2f27			bcs 	_CRExecute
.2f23	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.2f25	b0 16		bcs $2f3d			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.2f27					_CRExecute:
.2f27	c8		iny				iny 								; consume it.
.2f28	0a		asl a				asl 	a 							; double it, losing most significant bit.
.2f29	aa		tax				tax
.2f2a	20 30 2f	jsr $2f30			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.2f2d	4c 01 2f	jmp $2f01			jmp 	CRNextInstruction
.2f30					_CRRunRoutine:
.2f30	7c 9a 2f	jmp ($2f9a,x)			jmp 	(Group0Vectors,x)
.2f33					_CRNotToken:
.2f33	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.2f35	b0 59		bcs $2f90			bcs 	Unimplemented
.2f37					_CRDefaultLet:
.2f37	20 df 27	jsr $27df			jsr 	CommandLet 					; do the default, LET
.2f3a	4c 01 2f	jmp $2f01			jmp 	CRNextInstruction
.2f3d					_CRCheckIndirect:
.2f3d	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.2f3f	f0 0a		beq $2f4b			beq 	_CRAndCommand
.2f41	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.2f43	f0 f2		beq $2f37			beq 	_CRDefaultLet
.2f45	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.2f47	f0 ee		beq $2f37			beq 	_CRDefaultLet
.2f49	d0 45		bne $2f90			bne 	Unimplemented
.2f4b					_CRAndCommand:
.2f4b	c8		iny				iny 								; skip over the AND token
.2f4c	a9 95		lda #$95			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.2f4e	20 68 2f	jsr $2f68			jsr 	CommandAssembler 			; do the assembler command
.2f51	4c 01 2f	jmp $2f01			jmp 	CRNextInstruction 			; and loop round.
.2f54					CommandShift1:
.2f54	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.2f56	10 38		bpl $2f90			bpl 	Unimplemented 				; we have an error as this should not happen.
.2f58	c8		iny				iny 								; advance over it.
.2f59	c9 94		cmp #$94			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.2f5b	b0 0b		bcs $2f68			bcs 	CommandAssembler
.2f5d	0a		asl a				asl 	a 							; double into X
.2f5e	aa		tax				tax
.2f5f	7c 60 30	jmp ($3060,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.2f62					CommandShift2:
.2f62	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.2f64	20 69 18	jsr $1869		jsr	extensionHandler
.2f67	60		rts				rts
.2f68					CommandAssembler:
.2f68	a2 02		ldx #$02		ldx	#2
.2f6a	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2f6d	60		rts				rts
.2f6e					CommandAssemblerLabel:
.2f6e	a2 04		ldx #$04		ldx	#4
.2f70	20 b4 13	jsr $13b4		jsr	assemblerHandler
.2f73	60		rts				rts
.2f74					CommandColon:
.2f74	60		rts				rts
.2f75					CommandBreak:
.2f75	20 62 34	jsr $3462			jsr 	EvaluateRootInteger
.2f78	20 23 3b	jsr $3b23			jsr 	MInt32Zero
.2f7b	f0 02		beq $2f7f			beq 	BreakOff
.2f7d					BreakOn:
.2f7d	a2 08		ldx #$08			ldx 	#8
.2f7f					BreakOff:
.2f7f	8e 06 0d	stx $0d06			stx 	breakIncrement
.2f82	60		rts				rts
.2f83					ResetCodeAddress:
.2f83	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2f86	85 28		sta $28				sta 	codePtr
.2f88	ad c9 0a	lda $0ac9			lda 	basePage+1
.2f8b	85 29		sta $29				sta 	codePtr+1
.2f8d	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.2f8f	60		rts				rts
.2f90					Unimplemented:
.2f90	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2f92	20 18 15	jsr $1518		jsr	errorHandler
.2f95					TKErr01:
.2f95					TKErr02:
.2f95					TKErr03:
.2f95					TKErr04:
.2f95					TKErr05:
.2f95					TKErr06:
.2f95					TKErr07:
.2f95					TKErr08:
.2f95					TKErr09:
.2f95					TKErr10:
.2f95					TKErr11:
.2f95					TKErr12:
.2f95					TKErr13:
.2f95					TKErr14:
.2f95	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2f97	20 18 15	jsr $1518		jsr	errorHandler

;******  Processing file: main/commands/system/../../../generated/tokenvectors0.inc

.2f9a					Group0Vectors:
>2f9a	b2 28					.word	AdvanceNextLine          ; $80 [[eol]]
>2f9c	54 2f					.word	CommandShift1            ; $81 [[sh1]]
>2f9e	62 2f					.word	CommandShift2            ; $82 [[sh2]]
>2fa0	95 2f					.word	TKErr09                  ; $83 [[sh3]]
>2fa2	95 2f					.word	TKErr10                  ; $84 [[fpc]]
>2fa4	95 2f					.word	TKErr08                  ; $85 [[str]]
>2fa6	49 31					.word	AndHandler               ; $86 and
>2fa8	36 31					.word	OrHandler                ; $87 or
>2faa	23 31					.word	XorHandler               ; $88 xor
>2fac	6b 32					.word	CompareGreaterEq         ; $89 >=
>2fae	75 32					.word	CompareLessEq            ; $8a <=
>2fb0	57 32					.word	CompareGreater           ; $8b >
>2fb2	4d 32					.word	CompareLess              ; $8c <
>2fb4	43 32					.word	CompareEquals            ; $8d =
>2fb6	61 32					.word	CompareNotEquals         ; $8e <>
>2fb8	b4 30					.word	AddHandler               ; $8f +
>2fba	d7 30					.word	SubHandler               ; $90 -
>2fbc	6f 31					.word	ShrHandler               ; $91 >>
>2fbe	5c 31					.word	ShlHandler               ; $92 <<
>2fc0	ea 30					.word	MulHandler               ; $93 *
>2fc2	fd 30					.word	DivHandler               ; $94 /
>2fc4	10 31					.word	ModHandler               ; $95 mod
>2fc6	a8 31					.word	PowerHandler             ; $96 ^
>2fc8	82 31					.word	WordRefHandler           ; $97 !
>2fca	95 31					.word	ByteRefHandler           ; $98 ?
>2fcc	71 2c					.word	Command_Repeat           ; $99 repeat
>2fce	1b 2d					.word	Command_While            ; $9a while
>2fd0	c6 28					.word	Command_FOR              ; $9b for
>2fd2	d5 29					.word	CommandIf                ; $9c if
>2fd4	95 2f					.word	TKErr04                  ; $9d defproc
>2fd6	7e 2c					.word	Command_Until            ; $9e until
>2fd8	3e 2d					.word	Command_Wend             ; $9f wend
>2fda	27 29					.word	Command_NEXT             ; $a0 next
>2fdc	95 2f					.word	TKErr06                  ; $a1 then
>2fde	10 2a					.word	Command_ENDIF            ; $a2 endif
>2fe0	80 2b					.word	ReturnProc               ; $a3 endproc
>2fe2	cf 33					.word	UnaryParenthesis         ; $a4 (
>2fe4	b1 35					.word	UnaryLen                 ; $a5 len(
>2fe6	f5 35					.word	UnarySgn                 ; $a6 sgn(
>2fe8	de 35					.word	UnaryAbs                 ; $a7 abs(
>2fea	4e 36					.word	Unary_Random             ; $a8 random(
>2fec	98 36					.word	Unary_Page               ; $a9 page
>2fee	f8 3a					.word	MInt32True               ; $aa true
>2ff0	fc 3a					.word	MInt32False              ; $ab false
>2ff2	63 36					.word	Unary_Min                ; $ac min(
>2ff4	67 36					.word	Unary_Max                ; $ad max(
>2ff6	70 37					.word	UnarySys                 ; $ae sys(
>2ff8	19 37					.word	UnaryTimer               ; $af timer(
>2ffa	2e 35					.word	EventFunction            ; $b0 event(
>2ffc	42 37					.word	UnaryGet                 ; $b1 get(
>2ffe	32 37					.word	UnaryInkey               ; $b2 inkey(
>3000	e9 36					.word	UnaryAlloc               ; $b3 alloc(
>3002	a9 37					.word	ExecChr                  ; $b4 chr$(
>3004	d9 37					.word	ExecLeft                 ; $b5 left$(
>3006	f6 37					.word	ExecMid                  ; $b6 mid$(
>3008	1e 38					.word	ExecRight                ; $b7 right$(
>300a	b0 34					.word	Event_Str                ; $b8 str$(
>300c	df 34					.word	UnaryVal                 ; $b9 val(
>300e	0c 36					.word	UnaryPeek                ; $ba peek(
>3010	12 36					.word	UnaryDeek                ; $bb deek(
>3012	18 36					.word	UnaryLeek                ; $bc leek(
>3014	cf 35					.word	UnaryAsc                 ; $bd asc(
>3016	c3 36					.word	UnaryIntToFloat          ; $be int(
>3018	d6 36					.word	UnaryFloatToInt          ; $bf float(
>301a	e2 34					.word	UnaryIsVal               ; $c0 isval(
>301c	c0 37					.word	ExecUpper                ; $c1 upper$(
>301e	bd 37					.word	ExecLower                ; $c2 lower$(
>3020	a6 36					.word	UnaryReference           ; $c3 @
>3022	bc 36					.word	UnaryComplement          ; $c4 ~
>3024	b9 36					.word	UnaryHexMarker           ; $c5 &
>3026	5b 37					.word	UnaryGetString           ; $c6 get$(
>3028	61 37					.word	UnaryInkeyString         ; $c7 inkey$(
>302a	98 37					.word	UnaryMem                 ; $c8 mem
>302c	95 2f					.word	TKErr01                  ; $c9 )
>302e	74 2f					.word	CommandColon             ; $ca :
>3030	95 2f					.word	TKErr02                  ; $cb ,
>3032	95 2f					.word	TKErr03                  ; $cc ;
>3034	9a 28					.word	Command_Rem2             ; $cd '
>3036	95 2f					.word	TKErr07                  ; $ce to
>3038	95 2f					.word	TKErr05                  ; $cf step
>303a	13 2b					.word	CallProc                 ; $d0 proc
>303c	11 2a					.word	CommandLocal             ; $d1 local
>303e	d1 27					.word	Command_Dim              ; $d2 dim
>3040	9a 28					.word	Command_Rem              ; $d3 rem
>3042	df 27					.word	CommandLet               ; $d4 let
>3044	1b 26					.word	Command_Input            ; $d5 input
>3046	0a 2a					.word	Command_ELSE             ; $d6 else
>3048	a2 27					.word	Command_VDU              ; $d7 vdu
>304a	d1 26					.word	Command_Print            ; $d8 print
>304c	83 25					.word	CommandData              ; $d9 data
>304e	95 2f					.word	TKErr13                  ; $da image
>3050	95 2f					.word	TKErr12                  ; $db at
>3052	95 2f					.word	TKErr14                  ; $dc flip
>3054	c3 27					.word	Command_Assert           ; $dd assert
>3056	5d 28					.word	Command_Poke             ; $de poke
>3058	61 28					.word	Command_Doke             ; $df doke
>305a	65 28					.word	Command_Loke             ; $e0 loke
>305c	72 27					.word	Command_Ink              ; $e1 ink
>305e	7d 27					.word	Command_Paper            ; $e2 paper
>3060	6c 27					.word	Command_CLS              ; $e3 cls
>3062	88 27					.word	Command_Locate           ; $e4 locate
>3064	6e 2f					.word	CommandAssemblerLabel    ; $e5 .
>3066	90 2f					.word	Unimplemented            ; $e6 from
>3068	95 2f					.word	TKErr11                  ; $e7 #
>306a	56 2d					.word	CommandClear             ; $e8 clear

;******  Return to file: main/commands/system/run.asm


;******  Processing file: main/commands/system/../../../generated/tokenvectors1.inc

.306c					Group1Vectors:
>306c	8c 2e					.word	CommandLoad              ; $86 load
>306e	a1 2e					.word	CommandSave              ; $87 save
>3070	b1 2d					.word	CommandList              ; $88 list
>3072	e5 2e					.word	Command_New              ; $89 new
>3074	75 2f					.word	CommandBreak             ; $8a break
>3076	f3 2e					.word	Command_Run              ; $8b run
>3078	58 25					.word	CommandRead              ; $8c read
>307a	8c 25					.word	CommandRestore           ; $8d restore
>307c	ac 28					.word	CommandEnd               ; $8e end
>307e	a7 28					.word	CommandStop              ; $8f stop
>3080	af 28					.word	CommandXemu              ; $90 xemu
>3082	e9 25					.word	CommandGOTO              ; $91 goto
>3084	be 25					.word	CommandGOSUB             ; $92 gosub
>3086	d1 25					.word	CommandRETURN            ; $93 return

;******  Return to file: main/commands/system/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/binary.asm

.3088					BinaryProcess:
.3088	b5 90		lda $90,x			lda 	esType,x 					; or type bytes together and check bit 6.
.308a	15 91		ora $91,x			ora 	esType+1,x 					; (the float bit)
.308c	0a		asl a				asl 	a
.308d	30 0e		bmi $309d			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.308f	18		clc				clc 								; return CC for integer
.3090	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.3092	f0 08		beq $309c			beq 	_BPExit 					; if both integer then return with CC.
.3094	20 a2 30	jsr $30a2			jsr 	BPMakeBothFloat 			; make both float
.3097	a9 01		lda #$01			lda 	#$01 						; set result type to float
.3099	95 90		sta $90,x			sta 	esType,x
.309b	38		sec				sec 								; and return with carry set.
.309c					_BPExit:
.309c	60		rts				rts
.309d					_BPStringType:
.309d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.309f	20 18 15	jsr $1518		jsr	errorHandler
.30a2					BPMakeBothFloat:
.30a2	e8		inx				inx
.30a3	20 a7 30	jsr $30a7			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.30a6	ca		dex				dex
.30a7					BPMakeFloat:
.30a7	b5 90		lda $90,x			lda 	esType,x 					; get type bit which is in bit 0
.30a9	4a		lsr a				lsr 	a
.30aa	b0 07		bcs $30b3			bcs 	_BPIsFloat 					; already a float if set.
.30ac	8a		txa				txa
.30ad	a2 1c		ldx #$1c		ldx	#28
.30af	20 62 23	jsr $2362		jsr	floatingpointHandler
.30b2	aa		tax				tax
.30b3					_BPIsFloat:
.30b3	60		rts				rts
.30b4					AddHandler:
.30b4	20 85 32	jsr $3285			jsr 	DereferenceTwo 				; dereference top two on stack.
.30b7	b5 90		lda $90,x			lda 	esType,x 					; check two strings.
.30b9	35 91		and $91,x			and 	esType+1,x
.30bb	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.30bd	d0 10		bne $30cf			bne 	_AHStringConcat				; concatenate strings.
.30bf	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.30c2	b0 03		bcs $30c7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30c4	4c e0 39	jmp $39e0			jmp 	MInt32Add 							; else do it as integer.
.30c7					_IsFPOperation:
.30c7	8a		txa				txa 								; call the relevant fp routine
.30c8	a2 04		ldx #$04		ldx	#4
.30ca	20 62 23	jsr $2362		jsr	floatingpointHandler
.30cd	aa		tax				tax
.30ce	60		rts				rts
.30cf					_AHStringConcat:
.30cf	8a		txa				txa 								; handled by the string module.
.30d0	a2 06		ldx #$06		ldx	#6
.30d2	20 a7 3e	jsr $3ea7		jsr	stringHandler
.30d5	aa		tax				tax
.30d6	60		rts				rts
.30d7					SubHandler:
.30d7	20 85 32	jsr $3285			jsr 	DereferenceTwo
.30da	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.30dd	b0 03		bcs $30e2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30df	4c fa 39	jmp $39fa			jmp 	MInt32Sub 							; else do it as integer.
.30e2					_IsFPOperation:
.30e2	8a		txa				txa 								; call the relevant fp routine
.30e3	a2 12		ldx #$12		ldx	#18
.30e5	20 62 23	jsr $2362		jsr	floatingpointHandler
.30e8	aa		tax				tax
.30e9	60		rts				rts
.30ea					MulHandler:
.30ea	20 85 32	jsr $3285			jsr 	DereferenceTwo
.30ed	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.30f0	b0 03		bcs $30f5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.30f2	4c 14 3a	jmp $3a14			jmp 	MInt32Multiply 							; else do it as integer.
.30f5					_IsFPOperation:
.30f5	8a		txa				txa 								; call the relevant fp routine
.30f6	a2 0c		ldx #$0c		ldx	#12
.30f8	20 62 23	jsr $2362		jsr	floatingpointHandler
.30fb	aa		tax				tax
.30fc	60		rts				rts
.30fd					DivHandler:
.30fd	20 85 32	jsr $3285			jsr 	DereferenceTwo
.3100	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.3103	b0 03		bcs $3108			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3105	4c d1 38	jmp $38d1			jmp 	MInt32SDivide 							; else do it as integer.
.3108					_IsFPOperation:
.3108	8a		txa				txa 								; call the relevant fp routine
.3109	a2 08		ldx #$08		ldx	#8
.310b	20 62 23	jsr $2362		jsr	floatingpointHandler
.310e	aa		tax				tax
.310f	60		rts				rts
.3110					ModHandler:
.3110	20 85 32	jsr $3285			jsr 	DereferenceTwo
.3113	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.3116	b0 03		bcs $311b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3118	4c 4f 39	jmp $394f			jmp 	MInt32Modulus 							; else do it as integer.
.311b					_IsFPOperation:
.311b	8a		txa				txa 								; call the relevant fp routine
.311c	a2 0a		ldx #$0a		ldx	#10
.311e	20 62 23	jsr $2362		jsr	floatingpointHandler
.3121	aa		tax				tax
.3122	60		rts				rts
.3123					XorHandler:
.3123	20 85 32	jsr $3285			jsr 	DereferenceTwo
.3126	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.3129	b0 03		bcs $312e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.312b	4c 83 38	jmp $3883			jmp 	MInt32Xor 							; else do it as integer.
.312e					_IsFPOperation:
.312e	8a		txa				txa 								; call the relevant fp routine
.312f	a2 0a		ldx #$0a		ldx	#10
.3131	20 62 23	jsr $2362		jsr	floatingpointHandler
.3134	aa		tax				tax
.3135	60		rts				rts
.3136					OrHandler:
.3136	20 85 32	jsr $3285			jsr 	DereferenceTwo
.3139	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.313c	b0 03		bcs $3141			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.313e	4c 6a 38	jmp $386a			jmp 	MInt32Or 							; else do it as integer.
.3141					_IsFPOperation:
.3141	8a		txa				txa 								; call the relevant fp routine
.3142	a2 0a		ldx #$0a		ldx	#10
.3144	20 62 23	jsr $2362		jsr	floatingpointHandler
.3147	aa		tax				tax
.3148	60		rts				rts
.3149					AndHandler:
.3149	20 85 32	jsr $3285			jsr 	DereferenceTwo
.314c	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.314f	b0 03		bcs $3154			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3151	4c 51 38	jmp $3851			jmp 	MInt32And 							; else do it as integer.
.3154					_IsFPOperation:
.3154	8a		txa				txa 								; call the relevant fp routine
.3155	a2 0a		ldx #$0a		ldx	#10
.3157	20 62 23	jsr $2362		jsr	floatingpointHandler
.315a	aa		tax				tax
.315b	60		rts				rts
.315c					ShlHandler:
.315c	20 85 32	jsr $3285			jsr 	DereferenceTwo
.315f	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.3162	b0 03		bcs $3167			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3164	4c dd 31	jmp $31dd			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.3167					_IsFPOperation:
.3167	8a		txa				txa 								; call the relevant fp routine
.3168	a2 0a		ldx #$0a		ldx	#10
.316a	20 62 23	jsr $2362		jsr	floatingpointHandler
.316d	aa		tax				tax
.316e	60		rts				rts
.316f					ShrHandler:
.316f	20 85 32	jsr $3285			jsr 	DereferenceTwo
.3172	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.3175	b0 03		bcs $317a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.3177	4c e0 31	jmp $31e0			jmp 	MInt32ShiftRightX 							; else do it as integer.
.317a					_IsFPOperation:
.317a	8a		txa				txa 								; call the relevant fp routine
.317b	a2 0a		ldx #$0a		ldx	#10
.317d	20 62 23	jsr $2362		jsr	floatingpointHandler
.3180	aa		tax				tax
.3181	60		rts				rts
.3182					WordRefHandler:
.3182	20 85 32	jsr $3285			jsr 	DereferenceTwo
.3185	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.3188	b0 03		bcs $318d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.318a	4c cf 31	jmp $31cf			jmp 	MInt32WordIndirect 							; else do it as integer.
.318d					_IsFPOperation:
.318d	8a		txa				txa 								; call the relevant fp routine
.318e	a2 0a		ldx #$0a		ldx	#10
.3190	20 62 23	jsr $2362		jsr	floatingpointHandler
.3193	aa		tax				tax
.3194	60		rts				rts
.3195					ByteRefHandler:
.3195	20 85 32	jsr $3285			jsr 	DereferenceTwo
.3198	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.319b	b0 03		bcs $31a0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.319d	4c d3 31	jmp $31d3			jmp 	MInt32ByteIndirect 							; else do it as integer.
.31a0					_IsFPOperation:
.31a0	8a		txa				txa 								; call the relevant fp routine
.31a1	a2 0a		ldx #$0a		ldx	#10
.31a3	20 62 23	jsr $2362		jsr	floatingpointHandler
.31a6	aa		tax				tax
.31a7	60		rts				rts
.31a8					PowerHandler:
.31a8	20 85 32	jsr $3285			jsr 	DereferenceTwo
.31ab	20 88 30	jsr $3088			jsr 	BinaryProcess 				; check to see if either is float
.31ae	b0 03		bcs $31b3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.31b0	4c bb 31	jmp $31bb			jmp 	PowerInteger 							; else do it as integer.
.31b3					_IsFPOperation:
.31b3	8a		txa				txa 								; call the relevant fp routine
.31b4	a2 18		ldx #$18		ldx	#24
.31b6	20 62 23	jsr $2362		jsr	floatingpointHandler
.31b9	aa		tax				tax
.31ba	60		rts				rts
.31bb					PowerInteger:
.31bb	20 a2 30	jsr $30a2			jsr 	BPMakeBothFloat				; make them float.
.31be	8a		txa				txa
.31bf	a2 18		ldx #$18		ldx	#24
.31c1	20 62 23	jsr $2362		jsr	floatingpointHandler
.31c4	a2 14		ldx #$14		ldx	#20
.31c6	20 62 23	jsr $2362		jsr	floatingpointHandler
.31c9	aa		tax				tax
.31ca	a9 00		lda #$00			lda 	#0 							; make type integer
.31cc	95 90		sta $90,x			sta 	esType,x
.31ce	60		rts				rts
.31cf					Mint32WordIndirect:
.31cf	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.31d1	d0 02		bne $31d5			bne 	Min32Indirect
.31d3					Mint32ByteIndirect:
.31d3	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.31d5					Min32Indirect:
.31d5	48		pha				pha 								; save the indirection
.31d6	20 e0 39	jsr $39e0			jsr 	MInt32Add 					; add a!b a?b
.31d9	68		pla				pla 								; and set the type to reference.
.31da	95 90		sta $90,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.31dc	60		rts				rts
.31dd					Mint32ShiftLeftX:
.31dd	18		clc				clc 								; CC shift left
.31de	90 01		bcc $31e1			bcc 	Mint32Shift
.31e0					Mint32ShiftRightX:
.31e0	38		sec				sec 								; CS shift right
.31e1					Mint32Shift:
.31e1	08		php				php 								; save carry flag on stack.
.31e2	b5 a1		lda $a1,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.31e4	15 a9		ora $a9,x			ora 	esInt2+1,x
.31e6	15 b1		ora $b1,x			ora 	esInt3+1,x
.31e8	d0 1e		bne $3208			bne 	_MShiftZero
.31ea	b5 99		lda $99,x			lda 	esInt0+1,x
.31ec	c9 20		cmp #$20			cmp 	#32
.31ee	b0 18		bcs $3208			bcs 	_MShiftZero
.31f0					_MShiftLoop:
.31f0	b5 99		lda $99,x			lda 	esInt0+1,x 					; check count is zero
.31f2	f0 12		beq $3206			beq 	_MShiftExit
.31f4	d6 99		dec $99,x			dec 	esInt0+1,x
.31f6	28		plp				plp 								; restore and save carry
.31f7	08		php				php
.31f8	90 06		bcc $3200			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.31fa	20 1a 3b	jsr $3b1a			jsr 	Mint32ShiftRight
.31fd	4c f0 31	jmp $31f0			jmp 	_MShiftLoop
.3200					_MShiftLeft:
.3200	20 11 3b	jsr $3b11			jsr 	Mint32ShiftLeft
.3203	4c f0 31	jmp $31f0			jmp 	_MShiftLoop
.3206					_MShiftExit:
.3206	28		plp				plp	 								; throw saved carry and exit
.3207	60		rts				rts
.3208					_MShiftZero:
.3208	4c fc 3a	jmp $3afc			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary/compare.asm

.320b					PerformComparison:
.320b	20 85 32	jsr $3285			jsr 	DereferenceTwo 				; make both values.
.320e	b5 90		lda $90,x			lda 	esType,x 					; check for two strings.
.3210	35 91		and $91,x			and 	esType+1,x
.3212	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.3213	30 1d		bmi $3232			bmi 	_PCIsString
.3215	b5 90		lda $90,x			lda 	esType,x 					; check either is floating point.
.3217	15 91		ora $91,x			ora 	esType+1,x
.3219	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.321a	30 22		bmi $323e			bmi 	_PCError
.321c	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.321e	f0 0f		beq $322f			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.3220	20 a2 30	jsr $30a2			jsr 	BPMakeBothFloat 			; make both float
.3223	8a		txa				txa
.3224	a2 06		ldx #$06		ldx	#6
.3226	20 62 23	jsr $2362		jsr	floatingpointHandler
.3229	86 32		stx $32				stx 	tempShort 					; save result
.322b	aa		tax				tax
.322c	a5 32		lda $32				lda 	tempShort
.322e	60		rts				rts
.322f					_PCIsInteger:
.322f	4c 9c 38	jmp $389c			jmp 	MInt32Compare
.3232					_PCIsString:
.3232	8a		txa				txa 								; A has SP
.3233	a2 0a		ldx #$0a		ldx	#10
.3235	20 a7 3e	jsr $3ea7		jsr	stringHandler
.3238	86 32		stx $32				stx 	tempShort 					; save result
.323a	aa		tax				tax 								; put SP back in X and get result.
.323b	a5 32		lda $32				lda 	tempShort
.323d	60		rts				rts
.323e					_PCError:
.323e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3240	20 18 15	jsr $1518		jsr	errorHandler
.3243					CompareEquals:
.3243	20 0b 32	jsr $320b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3246	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3248	f0 35		beq $327f			beq  	CompareTrue
.324a	4c 82 32	jmp $3282			jmp 	CompareFalse
.324d					CompareLess:
.324d	20 0b 32	jsr $320b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3250	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3252	f0 2b		beq $327f			beq  	CompareTrue
.3254	4c 82 32	jmp $3282			jmp 	CompareFalse
.3257					CompareGreater:
.3257	20 0b 32	jsr $320b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.325a	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.325c	f0 21		beq $327f			beq  	CompareTrue
.325e	4c 82 32	jmp $3282			jmp 	CompareFalse
.3261					CompareNotEquals:
.3261	20 0b 32	jsr $320b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3264	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.3266	d0 17		bne $327f			bne  	CompareTrue
.3268	4c 82 32	jmp $3282			jmp 	CompareFalse
.326b					CompareGreaterEq:
.326b	20 0b 32	jsr $320b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.326e	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.3270	d0 0d		bne $327f			bne  	CompareTrue
.3272	4c 82 32	jmp $3282			jmp 	CompareFalse
.3275					CompareLessEq:
.3275	20 0b 32	jsr $320b			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.3278	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.327a	d0 03		bne $327f			bne  	CompareTrue
.327c	4c 82 32	jmp $3282			jmp 	CompareFalse
.327f					CompareTrue:
.327f	4c f8 3a	jmp $3af8			jmp 	MInt32True
.3282					CompareFalse:
.3282	4c fc 3a	jmp $3afc			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.3285					DereferenceTwo:
.3285	e8		inx				inx
.3286	20 8a 32	jsr $328a			jsr 	DereferenceOne
.3289	ca		dex				dex
.328a					DereferenceOne:
.328a	b5 90		lda $90,x			lda 	esType,x
.328c	10 3d		bpl $32cb			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.328e	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.328f	b0 3b		bcs $32cc			bcs 	_DRFloatDeReference
.3291	98		tya				tya
.3292	48		pha				pha
.3293	b5 98		lda $98,x			lda 	esInt0,x 					; copy address to temp0
.3295	85 2a		sta $2a				sta 	temp0
.3297	b5 a0		lda $a0,x			lda 	esInt1,x
.3299	85 2b		sta $2b				sta 	temp0+1
.329b	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.329d	95 a0		sta $a0,x			sta 	esInt1,x
.329f	95 a8		sta $a8,x			sta 	esInt2,x
.32a1	95 b0		sta $b0,x			sta 	esInt3,x
.32a3	b5 90		lda $90,x			lda 	esType,x 					; get the type byte.
.32a5	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.32a7	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.32a8	30 0d		bmi $32b7			bmi 	_DeRefString 				; string, 2 bytes only
.32aa	d0 11		bne $32bd			bne 	_DeRefByte 					; byte 1 byte only
.32ac					_DeRefLong:
.32ac	a0 03		ldy #$03			ldy 	#3
.32ae	b1 2a		lda ($2a),y			lda 	(temp0),y
.32b0	95 b0		sta $b0,x			sta 	esInt3,x
.32b2	88		dey				dey
.32b3	b1 2a		lda ($2a),y			lda 	(temp0),y
.32b5	95 a8		sta $a8,x			sta 	esInt2,x
.32b7					_DeRefString:
.32b7	a0 01		ldy #$01			ldy 	#1
.32b9	b1 2a		lda ($2a),y			lda 	(temp0),y
.32bb	95 a0		sta $a0,x			sta 	esInt1,x
.32bd					_DeRefByte:
.32bd	a0 00		ldy #$00			ldy 	#0
.32bf	b1 2a		lda ($2a),y			lda 	(temp0),y
.32c1	95 98		sta $98,x			sta 	esInt0,x
.32c3	b5 90		lda $90,x			lda 	esType,x 					; clear byte and deref bits.
.32c5	29 40		and #$40			and 	#$40
.32c7	95 90		sta $90,x			sta 	esType,x
.32c9	68		pla				pla
.32ca	a8		tay				tay
.32cb					_DRNotReference
.32cb	60		rts				rts
.32cc					_DRFloatDereference:
.32cc	20 54 28	jsr $2854			jsr 	TOSToTemp0 					; address to deref in temp0
.32cf	8a		txa				txa
.32d0	a2 1e		ldx #$1e		ldx	#30
.32d2	20 62 23	jsr $2362		jsr	floatingpointHandler
.32d5	aa		tax				tax
.32d6	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.32d8	95 90		sta $90,x			sta 	esType,x
.32da	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.32db					EvaluateLevel:
.32db	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.32dd	b0 1e		bcs $32fd			bcs 	_ELStack
.32df	48		pha				pha 								; save precedence level.
.32e0	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.32e2	95 98		sta $98,x			sta 	esInt0,x
.32e4	95 a0		sta $a0,x			sta 	esInt1,x
.32e6	95 a8		sta $a8,x			sta 	esInt2,x
.32e8	95 b0		sta $b0,x			sta 	esInt3,x
.32ea	95 90		sta $90,x			sta 	esType,x 					; zero the type (integer value)
.32ec	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.32ee	30 26		bmi $3316			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.32f0	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.32f1	30 0f		bmi $3302			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.32f3	8a		txa				txa 								; stack level in X
.32f4	a2 02		ldx #$02		ldx	#2
.32f6	20 fb 4a	jsr $4afb		jsr	variableHandler
.32f9	aa		tax				tax
.32fa	4c 3f 33	jmp $333f			jmp		_ELHasTerm
.32fd					_ELStack:
.32fd	a2 23		ldx #$23			ldx 	#ErrorID_NumStack
.32ff	20 18 15	jsr $1518		jsr	errorHandler
.3302					_ELIsConstant:
.3302	4a		lsr a				lsr 	a 							; get the value back
.3303	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.3305	95 98		sta $98,x			sta 	esInt0,x 					; and put in LSB.
.3307					_ELCheckNext:
.3307	c8		iny				iny 								; look at next
.3308	b1 28		lda ($28),y			lda 	(codePtr),y
.330a	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.330c	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.330e	b0 2f		bcs $333f			bcs 	_ELHasTerm 					; done getting the constant.
.3310	20 d8 33	jsr $33d8			jsr 	ELShiftByteIn 				; shift byte into position.
.3313	4c 07 33	jmp $3307			jmp 	_ELCheckNext
.3316					_ELIsToken:
.3316	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.3318	f0 0f		beq $3329			beq 	_ELIsString
.331a	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.331c	d0 5f		bne $337d			bne 	_ELCheckUnary
.331e	8a		txa				txa 								; put X into A
.331f	c8		iny				iny 								; skip over the float marker
.3320	a2 1a		ldx #$1a		ldx	#26
.3322	20 62 23	jsr $2362		jsr	floatingpointHandler
.3325	aa		tax				tax 								; restore X
.3326	4c 3f 33	jmp $333f			jmp 	_ELHasTerm
.3329					_ELIsString:
.3329	98		tya				tya 								; address of string is codePtr+y+1
.332a	38		sec				sec
.332b	65 28		adc $28				adc 	codePtr
.332d	95 98		sta $98,x			sta 	esInt0,x
.332f	a5 29		lda $29				lda 	codePtr+1
.3331	69 00		adc #$00			adc 	#0
.3333	95 a0		sta $a0,x			sta 	esInt1,x
.3335	a9 40		lda #$40			lda 	#$40 						; set type to string value
.3337	95 90		sta $90,x			sta 	esType,x
.3339	c8		iny				iny 								; skip over string.
.333a	98		tya				tya
.333b	38		sec				sec									; +1 for the length itself.
.333c	71 28		adc ($28),y			adc 	(codePtr),y
.333e	a8		tay				tay 								; and fall through to term loop code.
.333f					_ELHasTerm:
.333f	b1 28		lda ($28),y			lda 	(codePtr),y
.3341	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.3343	90 04		bcc $3349			bcc 	_ELPopExit
.3345	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.3347	90 02		bcc $334b			bcc 	_ELHasBinaryTerm
.3349					_ELPopExit:
.3349	68		pla				pla
.334a					_ELExit:
.334a	60		rts				rts
.334b					_ELHasBinaryTerm:
.334b	84 32		sty $32				sty 	tempShort 					; save position
.334d	a8		tay				tay 								; use token as an index and get the precedence.
.334e	b9 80 33	lda $3380,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.3351	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3353	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.3355	68		pla				pla 								; restore current level.
.3356	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.3358	b0 f0		bcs $334a			bcs 	_ELExit
.335a	48		pha				pha 								; save current level back on the stack.
.335b	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.335d	48		pha				pha
.335e	c8		iny				iny
.335f	e8		inx				inx 								; calculate the RHS at the operator precedence.
.3360	a5 32		lda $32				lda 	tempShort
.3362	20 db 32	jsr $32db			jsr 	EvaluateLevel
.3365	ca		dex				dex
.3366	68		pla				pla 								; get the operator back out.
.3367					_ELExecuteA:
.3367	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.3369	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.336a	aa		tax				tax
.336b	bd 9a 2f	lda $2f9a,x			lda 	Group0Vectors,x
.336e	85 2a		sta $2a				sta 	temp0
.3370	bd 9b 2f	lda $2f9b,x			lda 	Group0Vectors+1,x
.3373	85 2b		sta $2b				sta 	temp0+1
.3375	a6 32		ldx $32				ldx 	tempShort
.3377	20 c4 33	jsr $33c4			jsr 	_ELCallTemp0
.337a	4c 3f 33	jmp $333f			jmp 	_ELHasTerm 					; and loop back round.
.337d					_ELCheckUnary:
.337d	c8		iny				iny 								; skip over token.
.337e	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.3380	f0 19		beq $339b			beq 	_ELMinus
.3382	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.3384	f0 2c		beq $33b2			beq 	_ELIndirect
.3386	c9 98		cmp #$98			cmp 	#TKW_QMARK
.3388	f0 28		beq $33b2			beq 	_ELIndirect
.338a	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.338c	f0 39		beq $33c7			beq 	_ELExtension
.338e	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.3390	90 04		bcc $3396			bcc 	_ELUSyntax
.3392	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.3394	90 d1		bcc $3367			bcc 	_ELExecuteA 				; if so do that token.
.3396					_ELUSyntax:
.3396	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3398	20 18 15	jsr $1518		jsr	errorHandler
.339b					_ELMinus:
.339b	20 2d 34	jsr $342d			jsr 	EvaluateNumericTerm 		; get a number to negate.
.339e	b5 90		lda $90,x			lda 	esType,x 					; is it integer
.33a0	f0 0a		beq $33ac			beq 	_ELMinusInteger
.33a2	8a		txa				txa
.33a3	a2 0e		ldx #$0e		ldx	#14
.33a5	20 62 23	jsr $2362		jsr	floatingpointHandler
.33a8	aa		tax				tax
.33a9	4c 3f 33	jmp $333f			jmp 	_ELHasTerm
.33ac					_ELMinusInteger:
.33ac	20 b6 3a	jsr $3ab6			jsr 	MInt32Negate 				; do int negate
.33af	4c 3f 33	jmp $333f			jmp 	_ELHasTerm
.33b2					_ELIndirect:
.33b2	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.33b3	20 36 34	jsr $3436			jsr 	EvaluateIntegerTerm 		; integer address
.33b6	68		pla				pla
.33b7	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.33b9	f0 02		beq $33bd			beq 	_ELHaveModifier
.33bb	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.33bd					_ELHaveModifier:
.33bd	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.33bf	95 90		sta $90,x			sta 	esType,x 					; $80 for ! $A0 for ?
.33c1	4c 3f 33	jmp $333f			jmp 	_ELHasTerm
.33c4					_ELCallTemp0:
.33c4	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.33c7					_ELExtension:
.33c7	8a		txa				txa 								; stack pos in A
.33c8	20 69 18	jsr $1869		jsr	extensionHandler
.33cb	aa		tax				tax 								; restore stack
.33cc	4c 3f 33	jmp $333f			jmp 	_ELHasTerm
.33cf					UnaryParenthesis:
.33cf	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.33d1	20 db 32	jsr $32db			jsr 	EvaluateLevel
.33d4	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; check for )
.33d7	60		rts				rts
.33d8					ELShiftByteIn:
.33d8	48		pha				pha 								; save bits to shift in.
.33d9	b5 b0		lda $b0,x			lda 	esInt3,x 					; save top most byte
.33db	48		pha				pha
.33dc	b5 a8		lda $a8,x			lda 	esInt2,x 					; shift everything left 8 bits
.33de	95 b0		sta $b0,x			sta 	esInt3,x
.33e0	b5 a0		lda $a0,x			lda 	esInt1,x
.33e2	95 a8		sta $a8,x			sta 	esInt2,x
.33e4	b5 98		lda $98,x			lda 	esInt0,x
.33e6	95 a0		sta $a0,x			sta 	esInt1,x
.33e8	a9 00		lda #$00			lda 	#0
.33ea	95 98		sta $98,x			sta 	esInt0,x
.33ec	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.33ed	29 03		and #$03			and 	#3 							; only want lower 2 bits
.33ef	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.33f1					_ELShiftLoop:
.33f1	4a		lsr a				lsr 	a
.33f2	76 b0		ror $b0,x			ror 	esInt3,x
.33f4	76 a8		ror $a8,x			ror 	esInt2,x
.33f6	76 a0		ror $a0,x			ror 	esInt1,x
.33f8	76 98		ror $98,x			ror 	esInt0,x
.33fa	c9 01		cmp #$01			cmp 	#1
.33fc	d0 f3		bne $33f1			bne 	_ELShiftLoop
.33fe	68		pla				pla 								; get original 6 bit value and OR in.
.33ff	29 3f		and #$3f			and 	#$3F
.3401	15 98		ora $98,x			ora 	esInt0,x
.3403	95 98		sta $98,x			sta 	esInt0,x
.3405	60		rts				rts
.3406					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>3406	01					.byte	$01			; $86 and
>3407	01					.byte	$01			; $87 or
>3408	01					.byte	$01			; $88 xor
>3409	02					.byte	$02			; $89 >=
>340a	02					.byte	$02			; $8a <=
>340b	02					.byte	$02			; $8b >
>340c	02					.byte	$02			; $8c <
>340d	02					.byte	$02			; $8d =
>340e	02					.byte	$02			; $8e <>
>340f	03					.byte	$03			; $8f +
>3410	03					.byte	$03			; $90 -
>3411	04					.byte	$04			; $91 >>
>3412	04					.byte	$04			; $92 <<
>3413	04					.byte	$04			; $93 *
>3414	04					.byte	$04			; $94 /
>3415	04					.byte	$04			; $95 mod
>3416	05					.byte	$05			; $96 ^
>3417	06					.byte	$06			; $97 !
>3418	06					.byte	$06			; $98 ?
>3419	82					.byte	$82			; $99 repeat
>341a	82					.byte	$82			; $9a while
>341b	82					.byte	$82			; $9b for
>341c	82					.byte	$82			; $9c if
>341d	82					.byte	$82			; $9d defproc
>341e	80					.byte	$80			; $9e until
>341f	80					.byte	$80			; $9f wend
>3420	80					.byte	$80			; $a0 next
>3421	80					.byte	$80			; $a1 then
>3422	80					.byte	$80			; $a2 endif
>3423	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.3424					EvaluateTerm:
.3424	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.3426	20 db 32	jsr $32db			jsr 	EvaluateLevel
.3429	20 8a 32	jsr $328a			jsr 	DereferenceOne
.342c	60		rts				rts
.342d					EvaluateNumericTerm:
.342d	20 24 34	jsr $3424			jsr 	EvaluateTerm
.3430	b5 90		lda $90,x			lda 	esType,x
.3432	0a		asl a				asl 	a 							; see if it's a string.
.3433	30 09		bmi $343e			bmi 	ENTType
.3435	60		rts				rts
.3436					EvaluateIntegerTerm:
.3436	20 24 34	jsr $3424			jsr 	EvaluateTerm
.3439	b5 90		lda $90,x			lda 	esType,x
.343b	d0 01		bne $343e			bne 	ENTType
.343d	60		rts				rts
.343e					ENTType:
.343e	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3440	20 18 15	jsr $1518		jsr	errorHandler
.3443					EvaluateRoot:
.3443	a2 00		ldx #$00			ldx 	#0
.3445					Evaluate:
.3445	a9 00		lda #$00			lda 	#0
.3447	20 db 32	jsr $32db			jsr 	EvaluateLevel
.344a	20 8a 32	jsr $328a			jsr 	DereferenceOne
.344d	60		rts				rts
.344e					EvaluateNumeric:
.344e	20 45 34	jsr $3445			jsr 	Evaluate
.3451	b5 90		lda $90,x			lda 	esType,x
.3453	0a		asl a				asl 	a 							; see if it's a string.
.3454	30 e8		bmi $343e			bmi 	ENTType
.3456	4a		lsr a				lsr 	a 							; shift float flag into carry.
.3457	4a		lsr a				lsr 	a
.3458	60		rts				rts
.3459					EvaluateString:
.3459	20 45 34	jsr $3445			jsr 	Evaluate
.345c	b5 90		lda $90,x			lda 	esType,x
.345e	0a		asl a				asl 	a 							; see if it's a string.
.345f	10 dd		bpl $343e			bpl 	ENTType
.3461	60		rts				rts
.3462					EvaluateRootInteger:
.3462	a2 00		ldx #$00			ldx 	#0
.3464					EvaluateInteger:
.3464	20 45 34	jsr $3445			jsr 	Evaluate
.3467	b5 90		lda $90,x			lda 	esType,x
.3469	d0 d3		bne $343e			bne 	ENTType
.346b	60		rts				rts
.346c					EvaluateSmallInteger:
.346c	20 64 34	jsr $3464			jsr 	EvaluateInteger
.346f	b5 a0		lda $a0,x			lda 	esInt1,x
.3471	15 a8		ora $a8,x			ora 	esInt2,x
.3473	15 b0		ora $b0,x			ora 	esInt3,x
.3475	d0 03		bne $347a			bne 	_ESIValue
.3477	b5 98		lda $98,x			lda 	esInt0,x
.3479	60		rts				rts
.347a					_ESIValue:
.347a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.347c	20 18 15	jsr $1518		jsr	errorHandler
.347f					LinkEvaluate:
.347f	aa		tax				tax
.3480	20 45 34	jsr $3445			jsr 	Evaluate
.3483	8a		txa				txa
.3484	60		rts				rts
.3485					LinkEvaluateTerm:
.3485	aa		tax				tax
.3486	20 24 34	jsr $3424			jsr 	EvaluateTerm
.3489	8a		txa				txa
.348a	60		rts				rts
.348b					LinkEvaluateInteger:
.348b	aa		tax				tax
.348c	20 64 34	jsr $3464			jsr 	EvaluateInteger
.348f	8a		txa				txa
.3490	60		rts				rts
.3491					LinkEvaluateString:
.3491	aa		tax				tax
.3492	20 59 34	jsr $3459			jsr 	EvaluateString
.3495	8a		txa				txa
.3496	60		rts				rts
.3497					LinkEvaluateSmallInt:
.3497	aa		tax				tax
.3498	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger
.349b	8a		txa				txa
.349c	60		rts				rts
.349d					EvaluateReference:
.349d	ad 17 34	lda $3417			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.34a0	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.34a1	e9 01		sbc #$01			sbc 	#1
.34a3	20 db 32	jsr $32db			jsr 	EvaluateLevel
.34a6	b5 90		lda $90,x			lda 	esType,x
.34a8	10 01		bpl $34ab			bpl 	_ERFail
.34aa	60		rts				rts
.34ab					_ERFail:
.34ab	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.34ad	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/convert.asm

.34b0					Event_Str:
.34b0	20 4e 34	jsr $344e			jsr 	EvaluateNumeric 			; get a number.
.34b3	b5 90		lda $90,x			lda 	esType,x 					; is it floating point
.34b5	d0 13		bne $34ca			bne 	_ESFloat
.34b7	20 0d 35	jsr $350d			jsr 	ConvertGetBase 				; get base, or default.
.34ba	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.34bc	85 2a		sta $2a				sta 	temp0
.34be	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.34c0	85 2b		sta $2b				sta 	1+(temp0)
.34c2	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.34c4	20 52 3a	jsr $3a52			jsr 	MInt32ToString 				; convert to string.
.34c7	4c d7 34	jmp $34d7			jmp 	_ESCloneExit 				; clone and exit.
.34ca					_ESFloat:
.34ca	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; check closing )
.34cd	20 54 28	jsr $2854			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.34d0	8a		txa				txa
.34d1	a2 16		ldx #$16		ldx	#22
.34d3	20 62 23	jsr $2362		jsr	floatingpointHandler
.34d6	aa		tax				tax
.34d7					_ESCloneExit:
.34d7	8a		txa				txa
.34d8	a2 04		ldx #$04		ldx	#4
.34da	20 a7 3e	jsr $3ea7		jsr	stringHandler
.34dd	aa		tax				tax
.34de	60		rts				rts
.34df					UnaryVal:
.34df	38		sec				sec 								; Carry set to return value
.34e0	b0 01		bcs $34e3			bcs 	ValueMain
.34e2					UnaryIsVal:
.34e2	18		clc				clc									; Carry clear to return legitimacy
.34e3					ValueMain:
.34e3	08		php				php 								; save results (CS is value, CC is validation)
.34e4	20 59 34	jsr $3459			jsr 	EvaluateString
.34e7	20 0d 35	jsr $350d			jsr 	ConvertGetBase 				; get base, if any.
.34ea	98		tya				tya
.34eb	48		pha				pha
.34ec	20 54 28	jsr $2854			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.34ef	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the base
.34f1	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.34f3	20 6a 39	jsr $396a			jsr 	MInt32FromString 			; convert it back from a string.
.34f6	b0 0c		bcs $3504			bcs 	_VMSuccess 					; successfully converted.
.34f8	b5 99		lda $99,x			lda 	esInt0+1,x 					; is base the default
.34fa	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.34fc	f0 00		beq $34fe			beq 	_VMFailed 	 				; so we failed.
.34fe					_VMFailed:
.34fe	68		pla				pla
.34ff	a8		tay				tay
.3500	28		plp				plp
.3501	4c fc 3a	jmp $3afc			jmp 	MInt32False 				; return 0 whatever.
.3504					_VMSuccess:
.3504	68		pla				pla
.3505	a8		tay				tay
.3506	28		plp				plp 								; if CS the it was val() so we want the value.
.3507	b0 03		bcs $350c			bcs 	_VMExit
.3509	4c f8 3a	jmp $3af8			jmp 	MInt32True 					; otherwise return true as successful.
.350c					_VMExit:
.350c	60		rts				rts
.350d					ConvertGetBase:
.350d	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.350f	95 99		sta $99,x			sta 	esInt0+1,x
.3511	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.3513	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3515	d0 0e		bne $3525			bne 	_CGBDone 					; not found, should be )
.3517	e8		inx				inx 								; next level
.3518	c8		iny				iny 								; skip comma.
.3519	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger		; evaluate the base.
.351c	ca		dex				dex
.351d	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.351f	90 08		bcc $3529			bcc 	_CGBValue 					; (it should work as high as 37)
.3521	c9 11		cmp #$11			cmp 	#17
.3523	b0 04		bcs $3529			bcs 	_CGBValue
.3525					_CGBDone:
.3525	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.3528	60		rts				rts
.3529					_CGBValue:
.3529	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.352b	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/event.asm

.352e					EventFunction:
.352e	20 9d 34	jsr $349d			jsr 	EvaluateReference			; get the variable reference that tracks the event
.3531	b5 90		lda $90,x			lda 	esType,x
.3533	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.3535	d0 5b		bne $3592			bne 	_EFType
.3537	20 7c 3b	jsr $3b7c			jsr 	CheckComma
.353a	e8		inx				inx
.353b	20 64 34	jsr $3464			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.353e	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; finish off with the right bracket
.3541	ca		dex				dex
.3542	b5 a0		lda $a0,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.3544	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.3546	15 a8		ora $a8,x			ora 	esInt2,x
.3548	15 b0		ora $b0,x			ora 	esInt3,x
.354a	d0 41		bne $358d			bne 	_EFValue
.354c	98		tya				tya
.354d	48		pha				pha
.354e	8a		txa				txa
.354f	48		pha				pha
.3550	a2 1c		ldx #$1c		ldx	#28
.3552	20 f6 14	jsr $14f6		jsr	deviceHandler
.3555	84 2d		sty $2d				sty 	temp1+1
.3557	85 2c		sta $2c				sta 	temp1
.3559	68		pla				pla
.355a	aa		tax				tax
.355b	20 54 28	jsr $2854			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.355e	a0 03		ldy #$03			ldy 	#3							; if -ve
.3560	b1 2a		lda ($2a),y			lda 	(temp0),y
.3562	30 23		bmi $3587			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.3564	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.3566	b1 2a		lda ($2a),y			lda 	(temp0),y
.3568	c8		iny				iny
.3569	11 2a		ora ($2a),y			ora 	(temp0),y
.356b	f0 17		beq $3584			beq 	_EFInitialise 				; if so, initialise the value but return false.
.356d	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.356f	38		sec				sec
.3570	b1 2a		lda ($2a),y			lda 	(temp0),y
.3572	e5 2c		sbc $2c				sbc 	temp1
.3574	c8		iny				iny
.3575	b1 2a		lda ($2a),y			lda 	(temp0),y
.3577	e5 2d		sbc $2d				sbc 	temp1+1
.3579	10 0c		bpl $3587			bpl 	_EFFail 					; if trigger >= timer then return False
.357b	20 97 35	jsr $3597			jsr 	SetEventTimer 				; reset the timer for next time.
.357e	20 f8 3a	jsr $3af8			jsr	 	MInt32True 					; and treutn true as fired.
.3581	68		pla				pla
.3582	a8		tay				tay
.3583	60		rts				rts
.3584					_EFInitialise:
.3584	20 97 35	jsr $3597			jsr		SetEventTimer 				; set trigger time to time + elapsed
.3587					_EFFail:
.3587	68		pla				pla
.3588	a8		tay				tay
.3589	20 fc 3a	jsr $3afc			jsr 	MInt32False
.358c	60		rts				rts
.358d					_EFValue:
.358d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.358f	20 18 15	jsr $1518		jsr	errorHandler
.3592					_EFType:
.3592	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.3594	20 18 15	jsr $1518		jsr	errorHandler
.3597					SetEventTimer:
.3597	a0 00		ldy #$00			ldy 	#0
.3599	18		clc				clc
.359a	a5 2c		lda $2c				lda 	temp1
.359c	75 99		adc $99,x			adc 	esInt0+1,x
.359e	91 2a		sta ($2a),y			sta		(temp0),y
.35a0	c8		iny				iny
.35a1	a5 2d		lda $2d				lda 	temp1+1
.35a3	75 a1		adc $a1,x			adc 	esInt1+1,x
.35a5	91 2a		sta ($2a),y			sta		(temp0),y
.35a7	88		dey				dey
.35a8	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.35aa	d0 04		bne $35b0			bne 	_SETExit 					; zero means initialise.....
.35ac	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.35ae	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.35b0					_SETExit:
.35b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary.asm

.35b1					UnaryLen:
.35b1	20 bf 35	jsr $35bf			jsr 	ULStart
.35b4					ULFinish:
.35b4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.35b6	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.35b8	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit 				; write it out.
.35bb	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.35be	60		rts				rts
.35bf	20 59 34	jsr $3459	ULStart:jsr 	EvaluateString
.35c2	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.35c4	85 2a		sta $2a				sta 	temp0
.35c6	b5 a0		lda $a0,x			lda 	esInt1,x
.35c8	85 2b		sta $2b				sta 	temp0+1
.35ca	84 32		sty $32				sty 	tempShort 					; get length
.35cc	a0 00		ldy #$00			ldy 	#0
.35ce	60		rts				rts
.35cf					UnaryAsc:
.35cf	20 bf 35	jsr $35bf			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.35d2	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.35d4	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.35d5	c9 00		cmp #$00			cmp 	#0
.35d7	d0 db		bne $35b4			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.35d9	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.35db	20 18 15	jsr $1518		jsr	errorHandler
.35de					UnaryAbs:
.35de	20 4e 34	jsr $344e			jsr 	EvaluateNumeric 			; some numeric value
.35e1	b0 07		bcs $35ea			bcs 	_UAFloat 					; CS then float, so use that function
.35e3	20 b1 3a	jsr $3ab1			jsr 	MInt32Absolute 				; int version
.35e6	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.35e9	60		rts				rts
.35ea					_UAFloat:
.35ea	8a		txa				txa 								; float version
.35eb	a2 02		ldx #$02		ldx	#2
.35ed	20 62 23	jsr $2362		jsr	floatingpointHandler
.35f0	aa		tax				tax
.35f1	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.35f4	60		rts				rts
.35f5					UnarySgn:
.35f5	20 4e 34	jsr $344e			jsr 	EvaluateNumeric 			; same as above but sign of value
.35f8	b0 07		bcs $3601			bcs 	_USFloat
.35fa	20 e9 3a	jsr $3ae9			jsr 	MInt32Sign
.35fd	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.3600	60		rts				rts
.3601					_USFloat:
.3601	8a		txa				txa
.3602	a2 10		ldx #$10		ldx	#16
.3604	20 62 23	jsr $2362		jsr	floatingpointHandler
.3607	aa		tax				tax
.3608	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.360b	60		rts				rts
.360c					UnaryPeek:
.360c	20 38 36	jsr $3638			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.360f	4c 2c 36	jmp $362c			jmp 	PDLByte0
.3612					UnaryDeek:
.3612	20 38 36	jsr $3638			jsr 	PDLCode
.3615	4c 26 36	jmp $3626			jmp 	PDLByte1
.3618					UnaryLeek:
.3618	20 38 36	jsr $3638			jsr 	PDLCode
.361b	a0 03		ldy #$03			ldy 	#3							; read 3-2
.361d	b1 2a		lda ($2a),y			lda 	(temp0),y
.361f	95 b0		sta $b0,x			sta 	esInt3,x
.3621	88		dey				dey
.3622	b1 2a		lda ($2a),y			lda 	(temp0),y
.3624	95 a8		sta $a8,x			sta 	esInt2,x
.3626					PDLByte1:
.3626	a0 01		ldy #$01			ldy 	#1
.3628	b1 2a		lda ($2a),y			lda 	(temp0),y
.362a	95 a0		sta $a0,x			sta 	esInt1,x
.362c					PDLByte0:
.362c	a0 00		ldy #$00			ldy 	#0
.362e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3630	95 98		sta $98,x			sta 	esInt0,x
.3632	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.3634	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; check right and return
.3637	60		rts				rts
.3638					PDLCode:
.3638	20 64 34	jsr $3464			jsr 	EvaluateInteger 			; some address
.363b	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.363d	85 2a		sta $2a				sta 	temp0
.363f	b5 a0		lda $a0,x			lda 	esInt1,x
.3641	85 2b		sta $2b				sta 	temp0+1
.3643	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.3645	95 a0		sta $a0,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.3647	95 a8		sta $a8,x			sta 	esInt2,x
.3649	95 b0		sta $b0,x			sta 	esInt3,x
.364b	84 32		sty $32				sty 	tempShort 					; save Y
.364d	60		rts				rts
.364e					Unary_Random:
.364e	20 2c 3b	jsr $3b2c			jsr 	MInt32Random 				; generate random number.
.3651	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.3653	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3655	f0 08		beq $365f			beq 	_URExit
.3657	e8		inx				inx 								; load range 0..r-1 into +1
.3658	20 64 34	jsr $3464			jsr 	EvaluateInteger
.365b	ca		dex				dex
.365c	20 4f 39	jsr $394f			jsr 	MInt32Modulus 				; calculate random % modulus
.365f					_URExit:
.365f	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; check right and return
.3662	60		rts				rts
.3663					Unary_Min:
.3663	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.3665	d0 02		bne $3669			bne 	UnaryMBody
.3667					Unary_Max:
.3667	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.3669					UnaryMBody:
.3669	48		pha				pha 								; save comparator on stack, shows min or max
.366a	20 45 34	jsr $3445			jsr 	Evaluate 					; get the first thing to check
.366d					_UnaryMLoop:
.366d	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.366f	c8		iny				iny
.3670	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3672	f0 09		beq $367d			beq 	_UnaryMExit
.3674	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.3676	f0 07		beq $367f			beq 	_UnaryMCompare
.3678	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.367a	20 18 15	jsr $1518		jsr	errorHandler
.367d					_UnaryMExit:
.367d	68		pla				pla 								; done so throw comparator and return.
.367e	60		rts				rts
.367f					_UnaryMCompare:
.367f	e8		inx				inx 								; get the 2nd thing to evaluate
.3680	20 45 34	jsr $3445			jsr 	Evaluate
.3683	ca		dex				dex
.3684	20 0b 32	jsr $320b			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.3687	85 32		sta $32				sta 	tempShort 					; save result
.3689	68		pla				pla 								; get what we need
.368a	48		pha				pha
.368b	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.368d	d0 de		bne $366d			bne 	_UnaryMLoop 				; no, try another value.
.368f	20 fc 3a	jsr $3afc			jsr 	MInt32False 				; promote 2nd to 1st.
.3692	20 e0 39	jsr $39e0			jsr 	MInt32Add
.3695	4c 6d 36	jmp $366d			jmp 	_UnaryMLoop
.3698					Unary_Page:
.3698	20 fc 3a	jsr $3afc			jsr 	MInt32False 				; zero
.369b	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.369e	95 98		sta $98,x			sta 	esInt0,x
.36a0	ad c9 0a	lda $0ac9			lda 	basePage+1
.36a3	95 a0		sta $a0,x			sta 	esInt1,x
.36a5	60		rts				rts
.36a6					UnaryReference:
.36a6	a9 0f		lda #$0f			lda 	#15
.36a8	20 db 32	jsr $32db			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.36ab	b5 90		lda $90,x			lda 	esType,x 					; check it's a reference.
.36ad	10 05		bpl $36b4			bpl 	UType
.36af	a9 00		lda #$00			lda 	#0 							; make it an integer
.36b1	95 90		sta $90,x			sta 	esType,x
.36b3	60		rts				rts
.36b4					UType:
.36b4	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.36b6	20 18 15	jsr $1518		jsr	errorHandler
.36b9					UnaryHexMarker:
.36b9	4c 36 34	jmp $3436			jmp 	EvaluateIntegerTerm
.36bc					UnaryComplement:
.36bc	20 36 34	jsr $3436			jsr 	EvaluateIntegerTerm
.36bf	20 d0 3a	jsr $3ad0			jsr 	MInt32Not
.36c2	60		rts				rts
.36c3					UnaryIntToFloat:
.36c3	20 4e 34	jsr $344e			jsr 	EvaluateNumeric				; some number
.36c6	b5 90		lda $90,x			lda 	esType,x 					; if float already, exit
.36c8	d0 0b		bne $36d5			bne 	_UIFExit
.36ca	8a		txa				txa 								; convert and set type
.36cb	a2 1c		ldx #$1c		ldx	#28
.36cd	20 62 23	jsr $2362		jsr	floatingpointHandler
.36d0	aa		tax				tax
.36d1	a9 01		lda #$01			lda 	#1
.36d3	95 90		sta $90,x			sta 	esType,x
.36d5					_UIFExit:
.36d5	60		rts				rts
.36d6					UnaryFloatToInt:
.36d6	20 4e 34	jsr $344e			jsr 	EvaluateNumeric 			; the number
.36d9	b5 90		lda $90,x			lda 	esType,x 					; if int already exit
.36db	f0 0b		beq $36e8			beq 	_UFIExit
.36dd	8a		txa				txa 								; convert to int
.36de	a2 14		ldx #$14		ldx	#20
.36e0	20 62 23	jsr $2362		jsr	floatingpointHandler
.36e3	aa		tax				tax
.36e4	a9 00		lda #$00			lda 	#0 							; set type
.36e6	95 90		sta $90,x			sta 	esType,x
.36e8					_UFIExit:
.36e8	60		rts				rts
.36e9					UnaryAlloc:
.36e9	e8		inx				inx 								; evaluate memory required
.36ea	20 64 34	jsr $3464			jsr 	EvaluateInteger
.36ed	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.36f0	ca		dex				dex
.36f1	b5 a9		lda $a9,x			lda 	esInt2+1,x 					; check at least in 64k range.
.36f3	15 b1		ora $b1,x			ora 	esInt3+1,x
.36f5	d0 1d		bne $3714			bne 	_UABadValue
.36f7	20 fc 3a	jsr $3afc			jsr 	MInt32False					; zero return.
.36fa	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.36fc	95 a0		sta $a0,x			sta 	esInt1,x
.36fe	a5 35		lda $35				lda 	lowMemory
.3700	95 98		sta $98,x			sta 	esInt0,x
.3702	18		clc				clc 								; add alloc required.
.3703	75 99		adc $99,x			adc 	esInt0+1,x
.3705	85 35		sta $35				sta 	lowMemory
.3707	a5 36		lda $36				lda 	lowMemory+1
.3709	75 a1		adc $a1,x			adc 	esInt1+1,x
.370b	85 36		sta $36				sta 	lowMemory+1
.370d	b0 05		bcs $3714			bcs		_UABadValue 				; overflow definitely bad.
.370f	c5 34		cmp $34				cmp 	highMemory+1
.3711	b0 01		bcs $3714			bcs 	_UABadValue 				; out of memory bad.
.3713	60		rts				rts
.3714					_UABadValue:
.3714	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.3716	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unary2.asm

.3719					UnaryTimer:
.3719	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; no parameters
.371c	98		tya				tya
.371d	48		pha				pha
.371e	20 23 3b	jsr $3b23			jsr 	MInt32Zero 					; zero result
.3721	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.3723	a2 1c		ldx #$1c		ldx	#28
.3725	20 f6 14	jsr $14f6		jsr	deviceHandler
.3728	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.372a	95 98		sta $98,x			sta 	esInt0,x
.372c	98		tya				tya
.372d	95 a0		sta $a0,x			sta 	esInt1,x
.372f	68		pla				pla
.3730	a8		tay				tay
.3731	60		rts				rts
.3732					UnaryInkey:
.3732	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.3735	86 2a		stx $2a				stx 	temp0
.3737	a2 0a		ldx #$0a		ldx	#10
.3739	20 f6 14	jsr $14f6		jsr	deviceHandler
.373c	a6 2a		ldx $2a				ldx 	temp0
.373e	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit
.3741	60		rts				rts
.3742					UnaryGet:
.3742	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.3745	86 2a		stx $2a				stx 	temp0
.3747					_UGLoop:
.3747	a2 02		ldx #$02		ldx	#2
.3749	20 f6 14	jsr $14f6		jsr	deviceHandler
.374c	a2 0a		ldx #$0a		ldx	#10
.374e	20 f6 14	jsr $14f6		jsr	deviceHandler
.3751	c9 00		cmp #$00			cmp 	#0
.3753	f0 f2		beq $3747			beq 	_UGLoop
.3755	a6 2a		ldx $2a				ldx 	temp0
.3757	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit
.375a	60		rts				rts
.375b					UnaryGetString:
.375b	20 42 37	jsr $3742			jsr 	UnaryGet
.375e					UGSDoChr:
.375e	4c af 37	jmp $37af			jmp 	ChrCode
.3761					UnaryInkeyString:
.3761	20 32 37	jsr $3732			jsr 	UnaryInkey
.3764	b5 98		lda $98,x			lda 	esInt0,x
.3766	d0 f6		bne $375e			bne 	UGSDoChr
.3768	8a		txa				txa
.3769	a2 08		ldx #$08		ldx	#8
.376b	20 a7 3e	jsr $3ea7		jsr	stringHandler
.376e	aa		tax				tax
.376f	60		rts				rts
.3770					UnarySys:
.3770	20 64 34	jsr $3464			jsr 	EvaluateInteger 				; get the address
.3773	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen
.3776	20 54 28	jsr $2854			jsr 	TOSToTemp0 						; copy call address to temp0
.3779	8a		txa				txa
.377a	48		pha				pha
.377b	98		tya				tya
.377c	48		pha				pha
.377d	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.3780	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.3783	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.3786	20 95 37	jsr $3795			jsr 	_CallTemp0
.3789	85 32		sta $32				sta 	tempShort 						; restore YX
.378b	68		pla				pla
.378c	a8		tay				tay
.378d	68		pla				pla
.378e	aa		tax				tax
.378f	a5 32		lda $32				lda 	tempShort
.3791	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit 					; return result.
.3794	60		rts				rts
.3795					_CallTemp0:
.3795	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.3798					UnaryMem:
.3798	20 fc 3a	jsr $3afc			jsr 	MInt32False 					; set to false (e.g. 0)
.379b	38		sec				sec
.379c	a5 33		lda $33				lda 	highMemory 						; calculate value
.379e	e5 35		sbc $35				sbc 	lowMemory
.37a0	95 98		sta $98,x			sta 	esInt0,x
.37a2	a5 34		lda $34				lda 	highMemory+1
.37a4	e5 36		sbc $36				sbc 	lowMemory+1
.37a6	95 a0		sta $a0,x			sta 	esInt1,x
.37a8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary/unarystr.asm

.37a9					ExecChr:
.37a9	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger		; character number 0-255
.37ac	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen				; right bracket
.37af					ChrCode:
.37af	98		tya				tya
.37b0	48		pha				pha
.37b1	8a		txa				txa 								; A = stack
.37b2	b4 98		ldy $98,x			ldy 	esInt0,x					; Y = character
.37b4	a2 02		ldx #$02		ldx	#2
.37b6	20 a7 3e	jsr $3ea7		jsr	stringHandler
.37b9	aa		tax				tax 								; X = stack
.37ba	68		pla				pla
.37bb	a8		tay				tay
.37bc	60		rts				rts
.37bd					ExecLower:
.37bd	38		sec				sec 								; set carry is lower
.37be	b0 01		bcs $37c1			bcs 	ExecUpperLower
.37c0					ExecUpper:
.37c0	18		clc				clc 								; clear carry is upper
.37c1					ExecUpperLower:
.37c1	08		php				php 								; save carry
.37c2	20 59 34	jsr $3459			jsr 	EvaluateString 				; string to stack,X
.37c5	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; check closing right bracket.
.37c8	28		plp				plp 								; restore carry, save Y
.37c9	98		tya				tya
.37ca	48		pha				pha
.37cb	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.37cd	2a		rol a				rol 	a
.37ce	a8		tay				tay 								; now in Y
.37cf	8a		txa				txa 								; do the substring and exit.
.37d0	a2 0c		ldx #$0c		ldx	#12
.37d2	20 a7 3e	jsr $3ea7		jsr	stringHandler
.37d5	aa		tax				tax
.37d6	68		pla				pla
.37d7	a8		tay				tay
.37d8	60		rts				rts
.37d9					ExecLeft:
.37d9	20 59 34	jsr $3459			jsr 	EvaluateString 				; string to stack,X
.37dc	20 7c 3b	jsr $3b7c			jsr 	CheckComma
.37df	e8		inx				inx
.37e0	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.37e2	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit
.37e5	e8		inx				inx
.37e6	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.37e9					ExecSubstring:
.37e9	ca		dex				dex 								; fix up X
.37ea	ca		dex				dex
.37eb	20 6f 3b	jsr $3b6f			jsr 	CheckRightParen 			; check closing right bracket.
.37ee	8a		txa				txa 								; do the substring and exit.
.37ef	a2 0e		ldx #$0e		ldx	#14
.37f1	20 a7 3e	jsr $3ea7		jsr	stringHandler
.37f4	aa		tax				tax
.37f5	60		rts				rts
.37f6					ExecMid:
.37f6	20 59 34	jsr $3459			jsr 	EvaluateString 				; string to stack,X
.37f9	20 7c 3b	jsr $3b7c			jsr 	CheckComma
.37fc	e8		inx				inx
.37fd	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3800	c9 00		cmp #$00			cmp 	#0
.3802	f0 15		beq $3819			beq 	_EMValue
.3804	e8		inx				inx
.3805	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.3807	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit
.380a	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.380c	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.380e	f0 d9		beq $37e9			beq 	ExecSubString
.3810	20 7c 3b	jsr $3b7c			jsr 	CheckComma
.3813	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.3816	4c e9 37	jmp $37e9			jmp 	ExecSubString
.3819					_EMValue:
.3819	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.381b	20 18 15	jsr $1518		jsr	errorHandler
.381e					ExecRight:
.381e	20 59 34	jsr $3459			jsr 	EvaluateString 				; string to stack,X
.3821	20 7c 3b	jsr $3b7c			jsr 	CheckComma
.3824	e8		inx				inx
.3825	20 6c 34	jsr $346c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.3828	ca		dex				dex
.3829	98		tya				tya
.382a	48		pha				pha
.382b	b5 98		lda $98,x			lda 	esInt0,x 					; copy address of string to temp0
.382d	85 2a		sta $2a				sta 	temp0
.382f	b5 a0		lda $a0,x			lda 	esInt1,x
.3831	85 2b		sta $2b				sta 	temp0+1
.3833	a0 00		ldy #$00			ldy 	#0 							; point to length
.3835	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.3837	18		clc				clc 								; add 1.
.3838	69 01		adc #$01			adc 	#1
.383a	38		sec				sec
.383b	f5 99		sbc $99,x			sbc 	esInt0+1,x  				; subtract right count.
.383d	f0 02		beq $3841			beq		_ERMake1 					; if zero, make it 1.
.383f	b0 02		bcs $3843			bcs		_EROkay
.3841					_ERMake1:
.3841	a9 01		lda #$01			lda 	#1 							; start position.
.3843					_EROkay:
.3843	e8		inx				inx 								; set start pos.
.3844	95 98		sta $98,x			sta 	esInt0,x
.3846	e8		inx				inx
.3847	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.3849	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit
.384c	68		pla				pla
.384d	a8		tay				tay
.384e	4c e9 37	jmp $37e9			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.3851					MInt32And:
.3851	b5 98		lda $98,x			lda 	esInt0,x
.3853	35 99		and $99,x			and 	esInt0+1,x
.3855	95 98		sta $98,x			sta 	esInt0,x
.3857	b5 a0		lda $a0,x			lda 	esInt1,x
.3859	35 a1		and $a1,x			and 	esInt1+1,x
.385b	95 a0		sta $a0,x			sta 	esInt1,x
.385d	b5 a8		lda $a8,x			lda 	esInt2,x
.385f	35 a9		and $a9,x			and 	esInt2+1,x
.3861	95 a8		sta $a8,x			sta 	esInt2,x
.3863	b5 b0		lda $b0,x			lda 	esInt3,x
.3865	35 b1		and $b1,x			and 	esInt3+1,x
.3867	95 b0		sta $b0,x			sta 	esInt3,x
.3869	60		rts				rts
.386a					MInt32Or:
.386a	b5 98		lda $98,x			lda 	esInt0,x
.386c	15 99		ora $99,x			ora 	esInt0+1,x
.386e	95 98		sta $98,x			sta 	esInt0,x
.3870	b5 a0		lda $a0,x			lda 	esInt1,x
.3872	15 a1		ora $a1,x			ora 	esInt1+1,x
.3874	95 a0		sta $a0,x			sta 	esInt1,x
.3876	b5 a8		lda $a8,x			lda 	esInt2,x
.3878	15 a9		ora $a9,x			ora 	esInt2+1,x
.387a	95 a8		sta $a8,x			sta 	esInt2,x
.387c	b5 b0		lda $b0,x			lda 	esInt3,x
.387e	15 b1		ora $b1,x			ora 	esInt3+1,x
.3880	95 b0		sta $b0,x			sta 	esInt3,x
.3882	60		rts				rts
.3883					MInt32Xor:
.3883	b5 98		lda $98,x			lda 	esInt0,x
.3885	55 99		eor $99,x			eor 	esInt0+1,x
.3887	95 98		sta $98,x			sta 	esInt0,x
.3889	b5 a0		lda $a0,x			lda 	esInt1,x
.388b	55 a1		eor $a1,x			eor 	esInt1+1,x
.388d	95 a0		sta $a0,x			sta 	esInt1,x
.388f	b5 a8		lda $a8,x			lda 	esInt2,x
.3891	55 a9		eor $a9,x			eor 	esInt2+1,x
.3893	95 a8		sta $a8,x			sta 	esInt2,x
.3895	b5 b0		lda $b0,x			lda 	esInt3,x
.3897	55 b1		eor $b1,x			eor 	esInt3+1,x
.3899	95 b0		sta $b0,x			sta 	esInt3,x
.389b	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.389c					MInt32Compare:
.389c	b5 98		lda $98,x			lda 	esInt0,x 					; equality check first.
.389e	d5 99		cmp $99,x			cmp 	esInt0+1,x
.38a0	d0 13		bne $38b5			bne 	MInt32Compare2
.38a2	b5 a0		lda $a0,x			lda 	esInt1,x
.38a4	d5 a1		cmp $a1,x			cmp 	esInt1+1,x
.38a6	d0 0d		bne $38b5			bne 	MInt32Compare2
.38a8	b5 a8		lda $a8,x			lda 	esInt2,x
.38aa	d5 a9		cmp $a9,x			cmp 	esInt2+1,x
.38ac	d0 07		bne $38b5			bne 	MInt32Compare2
.38ae	b5 b0		lda $b0,x			lda 	esInt3,x
.38b0	55 b1		eor $b1,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.38b2	d0 01		bne $38b5			bne 	MInt32Compare2
.38b4	60		rts				rts
.38b5					MInt32Compare2:
.38b5	b5 98		lda $98,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.38b7	d5 99		cmp $99,x			cmp 	esInt0+1,x
.38b9	b5 a0		lda $a0,x			lda		esInt1,x
.38bb	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.38bd	b5 a8		lda $a8,x			lda		esInt2,x
.38bf	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.38c1	b5 b0		lda $b0,x			lda		esInt3,x
.38c3	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.38c5	50 02		bvc $38c9			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.38c7	49 80		eor #$80			eor 	#$80
.38c9					_I32LNoOverflow
.38c9	30 03		bmi $38ce			bmi 	MInt32CLess					; if -ve then return $FF
.38cb	a9 01		lda #$01			lda 	#$01						; else return $01
.38cd	60		rts				rts
.38ce					MInt32CLess:
.38ce	a9 ff		lda #$ff			lda 	#$FF
.38d0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.38d1					MInt32SDivide:
.38d1	98		tya				tya  								; save Y, which is the count of negations
.38d2	48		pha				pha
.38d3	a0 00		ldy #$00			ldy 	#0 							; zero count
.38d5	20 ed 38	jsr $38ed			jsr 	_MInt32SRemSign 			; unsign TOS
.38d8	e8		inx				inx 								; unsign TOS+1
.38d9	20 ed 38	jsr $38ed			jsr 	_MInt32SRemSign
.38dc	ca		dex				dex
.38dd	98		tya				tya 								; save sign count on stack
.38de	48		pha				pha
.38df	20 f6 38	jsr $38f6			jsr 	MInt32UDivide 				; unsigned division
.38e2	68		pla				pla 								; get sign count back
.38e3	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.38e5	f0 03		beq $38ea			beq 	_I32SNoNeg
.38e7	20 b6 3a	jsr $3ab6			jsr 	MInt32Negate
.38ea					_I32SNoNeg:
.38ea	68		pla				pla 								; restoe Y and exit
.38eb	a8		tay				tay
.38ec	60		rts				rts
.38ed					_MInt32SRemSign:
.38ed	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it -ve
.38ef	10 04		bpl $38f5			bpl 	_MInt32SRSExit
.38f1	c8		iny				iny 								; increment the sign count
.38f2	20 b6 3a	jsr $3ab6			jsr 	MInt32Negate 				; negate the value.
.38f5					_MInt32SRSExit:
.38f5	60		rts				rts
.38f6					MInt32UDivide:
.38f6	b5 99		lda $99,x			lda 	esInt0+1,x 					; check for division by zero
.38f8	15 a1		ora $a1,x			ora 	esInt1+1,x
.38fa	15 a2		ora $a2,x			ora 	esInt1+2,x
.38fc	15 a3		ora $a3,x			ora 	esInt1+3,x
.38fe	f0 4a		beq $394a			beq 	_MInt32DZero
.3900	e8		inx				inx 								; clear A
.3901	e8		inx				inx
.3902	20 fc 3a	jsr $3afc			jsr 	MInt32False
.3905	ca		dex				dex
.3906	ca		dex				dex
.3907	98		tya				tya 								; save Y on the stack
.3908	48		pha				pha
.3909	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.390b					_MInt32UDLoop:
.390b	16 98		asl $98,x			asl 	esInt0,x					; shift QA left. First Q
.390d	36 a0		rol $a0,x			rol 	esInt1,x
.390f	36 a8		rol $a8,x			rol 	esInt2,x
.3911	36 b0		rol $b0,x			rol 	esInt3,x
.3913	36 9a		rol $9a,x			rol 	esInt0+2,x 					; then A.
.3915	36 a2		rol $a2,x			rol 	esInt1+2,x
.3917	36 aa		rol $aa,x			rol 	esInt2+2,x
.3919	36 b2		rol $b2,x			rol 	esInt3+2,x
.391b	38		sec				sec 								; calculate A-M saving result on the stack
.391c	b5 9a		lda $9a,x			lda 	esInt0+2,x
.391e	f5 99		sbc $99,x			sbc 	esInt0+1,x
.3920	48		pha				pha
.3921	b5 a2		lda $a2,x			lda 	esInt1+2,x
.3923	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3925	48		pha				pha
.3926	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3928	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.392a	48		pha				pha
.392b	b5 b2		lda $b2,x			lda 	esInt3+2,x
.392d	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.392f	90 10		bcc $3941			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.3931	95 b2		sta $b2,x			sta 	esInt3+2,x 					; write result back to A
.3933	68		pla				pla
.3934	95 aa		sta $aa,x			sta 	esInt2+2,x
.3936	68		pla				pla
.3937	95 a2		sta $a2,x			sta 	esInt1+2,x
.3939	68		pla				pla
.393a	95 9a		sta $9a,x			sta 	esInt0+2,x
.393c	f6 98		inc $98,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.393e	4c 44 39	jmp $3944			jmp 	_MInt32Next 					; do the next iteration
.3941					_MInt32NoSubtract:
.3941	68		pla				pla
.3942	68		pla				pla
.3943	68		pla				pla
.3944					_MInt32Next:
.3944	88		dey				dey 								; do this 32 times.
.3945	d0 c4		bne $390b			bne 	_MInt32UDLoop
.3947	68		pla				pla 								; restore Y and exit
.3948	a8		tay				tay
.3949	60		rts				rts
.394a					_MInt32DZero:
.394a	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.394c	20 18 15	jsr $1518		jsr	errorHandler
.394f					MInt32Modulus:
.394f	20 f6 38	jsr $38f6			jsr 	MInt32UDivide 				; do the division.
.3952	b5 b2		lda $b2,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.3954	95 b0		sta $b0,x			sta 	esInt3,x
.3956	b5 aa		lda $aa,x			lda 	esInt2+2,x
.3958	95 a8		sta $a8,x			sta 	esInt2,x
.395a	b5 a2		lda $a2,x			lda 	esInt1+2,x
.395c	95 a0		sta $a0,x			sta 	esInt1,x
.395e	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3960	95 98		sta $98,x			sta 	esInt0,x
.3962	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0d07					fs32Length:
>0d07							.fill 	1
.3963					LinkInt32FromString:
.3963	aa		tax				tax
.3964	98		tya				tya
.3965	20 6a 39	jsr $396a			jsr 	MInt32FromString
.3968	8a		txa				txa
.3969	60		rts				rts
.396a					MInt32FromString:
.396a	85 32		sta $32				sta 	tempShort 					; save base
.396c	98		tya				tya
.396d	48		pha				pha
.396e	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.3970	b1 2a		lda ($2a),y			lda 	(temp0),y
.3972	8d 07 0d	sta $0d07			sta 	fs32Length
.3975	f0 65		beq $39dc			beq 	_I32FSFail2					; fail if length zero.
.3977	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.3979	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.397b	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.397d	d0 09		bne $3988			bne 	_I32FSNotNegative
.397f	ad 07 0d	lda $0d07			lda 	fs32Length 					; get length back.
.3982	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.3984	f0 56		beq $39dc			beq 	_I32FSFail2
.3986	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.3988					_I32FSNotNegative:
.3988	a5 32		lda $32				lda 	tempShort 					; get the base back.
.398a	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.398c	d0 02		bne $3990			bne 	_I32FSNN2
.398e	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.3990					_I32FSNN2:
.3990	48		pha				pha 								; save base + final sign on stack.
.3991	20 fc 3a	jsr $3afc			jsr 	MInt32False 				; zero the return value.
.3994					_I32FSMainLoop:
.3994	68		pla				pla 								; get the base back into tempShort
.3995	48		pha				pha
.3996	29 7f		and #$7f			and 	#$7F
.3998	85 32		sta $32				sta 	tempShort
.399a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.399c	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.399e	90 02		bcc $39a2			bcc 	_I32FSNotLC
.39a0	e9 20		sbc #$20			sbc 	#32
.39a2					_I32FSNotLC:
.39a2	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.39a3	e9 30		sbc #$30			sbc 	#"0"
.39a5	90 34		bcc $39db			bcc 	_I32FSFail 					; nothing more to do.
.39a7	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.39a9	90 06		bcc $39b1			bcc 	_I32FSValidate
.39ab	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.39ad	90 2c		bcc $39db			bcc 	_I32FSFail
.39af	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.39b1					_I32FSValidate:
.39b1	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.39b3	b0 26		bcs $39db			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.39b5	48		pha				pha 								; save the new digit value.
.39b6	e8		inx				inx 								; put base into next slot up on stack
.39b7	a5 32		lda $32				lda 	tempShort
.39b9	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit
.39bc	ca		dex				dex
.39bd	20 14 3a	jsr $3a14			jsr 	MInt32Multiply 				; multiply current by the base
.39c0	e8		inx				inx
.39c1	68		pla				pla  								; put additive into next slot
.39c2	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit
.39c5	ca		dex				dex
.39c6	20 e0 39	jsr $39e0			jsr 	MInt32Add 					; and add it
.39c9	c8		iny				iny 								; bump the character pointer
.39ca	cc 07 0d	cpy $0d07			cpy 	fs32Length 					; until > length.
.39cd	f0 c5		beq $3994			beq 	_I32FSMainLoop
.39cf	90 c3		bcc $3994			bcc 	_I32FSMainLoop
.39d1					_I32FSDone:
.39d1	68		pla				pla 								; get base/final sign back
.39d2	10 03		bpl $39d7			bpl 	_I32FSNN3
.39d4	20 b6 3a	jsr $3ab6			jsr 	MInt32Negate 				; negate the result.
.39d7					_I32FSNN3:
.39d7	68		pla				pla
.39d8	a8		tay				tay
.39d9	38		sec				sec
.39da	60		rts				rts
.39db					_I32FSFail:
.39db	68		pla				pla
.39dc					_I32FSFail2:
.39dc	68		pla				pla
.39dd	a8		tay				tay
.39de	18		clc				clc
.39df	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.39e0					MInt32Add:
.39e0	18		clc				clc
.39e1	b5 98		lda $98,x			lda 	esInt0,x
.39e3	75 99		adc $99,x			adc 	esInt0+1,x
.39e5	95 98		sta $98,x			sta 	esInt0,x
.39e7	b5 a0		lda $a0,x			lda 	esInt1,x
.39e9	75 a1		adc $a1,x			adc 	esInt1+1,x
.39eb	95 a0		sta $a0,x			sta 	esInt1,x
.39ed	b5 a8		lda $a8,x			lda 	esInt2,x
.39ef	75 a9		adc $a9,x			adc 	esInt2+1,x
.39f1	95 a8		sta $a8,x			sta 	esInt2,x
.39f3	b5 b0		lda $b0,x			lda 	esInt3,x
.39f5	75 b1		adc $b1,x			adc 	esInt3+1,x
.39f7	95 b0		sta $b0,x			sta 	esInt3,x
.39f9	60		rts				rts
.39fa					MInt32Sub:
.39fa	38		sec				sec
.39fb	b5 98		lda $98,x			lda 	esInt0,x
.39fd	f5 99		sbc $99,x			sbc 	esInt0+1,x
.39ff	95 98		sta $98,x			sta 	esInt0,x
.3a01	b5 a0		lda $a0,x			lda 	esInt1,x
.3a03	f5 a1		sbc $a1,x			sbc 	esInt1+1,x
.3a05	95 a0		sta $a0,x			sta 	esInt1,x
.3a07	b5 a8		lda $a8,x			lda 	esInt2,x
.3a09	f5 a9		sbc $a9,x			sbc 	esInt2+1,x
.3a0b	95 a8		sta $a8,x			sta 	esInt2,x
.3a0d	b5 b0		lda $b0,x			lda 	esInt3,x
.3a0f	f5 b1		sbc $b1,x			sbc 	esInt3+1,x
.3a11	95 b0		sta $b0,x			sta 	esInt3,x
.3a13	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.3a14					MInt32Multiply:
.3a14	e8		inx				inx 								; copy 2nd -> 3rd
.3a15	20 3a 3a	jsr $3a3a			jsr 	MInt32CopyUp
.3a18	ca		dex				dex
.3a19	20 3a 3a	jsr $3a3a			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.3a1c	20 fc 3a	jsr $3afc			jsr 	MInt32False 				; zero 1st.
.3a1f					_I32Loop:
.3a1f	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.3a21	29 01		and #$01			and 	#1
.3a23	f0 03		beq $3a28			beq 	_I32NoAdd 					; if set
.3a25	20 e0 39	jsr $39e0			jsr 	MInt32Add 					; add 2nd to 1st.
.3a28					_I32NoAdd:
.3a28	e8		inx				inx 								; shift 2nd left
.3a29	20 11 3b	jsr $3b11			jsr 	MInt32ShiftLeft
.3a2c	e8		inx				inx  								; shift 3rd right
.3a2d	20 1a 3b	jsr $3b1a			jsr 	MInt32ShiftRight
.3a30	20 23 3b	jsr $3b23			jsr 	MInt32Zero 					; check if zero.
.3a33	08		php				php 								; save status bits
.3a34	ca		dex				dex 	 							; point back to 1st
.3a35	ca		dex				dex
.3a36	28		plp				plp 								; get status bits
.3a37	d0 e6		bne $3a1f			bne 	_I32Loop 					; if non-zero keep going.
.3a39	60		rts				rts
.3a3a					MInt32CopyUp:
.3a3a	b5 98		lda $98,x			lda 	esInt0,x
.3a3c	95 99		sta $99,x			sta 	esInt0+1,x
.3a3e	b5 a0		lda $a0,x			lda 	esInt1,x
.3a40	95 a1		sta $a1,x			sta 	esInt1+1,x
.3a42	b5 a8		lda $a8,x			lda 	esInt2,x
.3a44	95 a9		sta $a9,x			sta 	esInt2+1,x
.3a46	b5 b0		lda $b0,x			lda 	esInt3,x
.3a48	95 b1		sta $b1,x			sta 	esInt3+1,x
.3a4a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0d08					MCharCount:	.fill 	1						; count of converted characters
.3a4b					MLInt32ToString:
.3a4b	aa		tax				tax									; module passes stack in A, base in Y
.3a4c	98		tya				tya
.3a4d	20 52 3a	jsr $3a52			jsr 	MInt32ToString
.3a50	8a		txa				txa
.3a51	60		rts				rts
.3a52					MInt32ToString:
.3a52	48		pha				pha 								; save base
.3a53	85 32		sta $32				sta 	tempShort 					; save target base.
.3a55	a9 00		lda #$00			lda 	#0
.3a57	8d 08 0d	sta $0d08			sta 	MCharCount 					; clear character count to 0
.3a5a	98		tya				tya
.3a5b	48		pha				pha
.3a5c	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.3a5e	10 10		bpl $3a70			bpl 	_I32TSUnsigned
.3a60	48		pha				pha 								; save base on stack.
.3a61	b5 b0		lda $b0,x			lda 	esInt3,x 					; is it actually negative
.3a63	10 08		bpl $3a6d			bpl 	_I32TSNoFlip
.3a65	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.3a67	20 a3 3a	jsr $3aa3			jsr 	MI32WriteCharacter
.3a6a	20 b6 3a	jsr $3ab6			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.3a6d					_I32TSNoFlip:
.3a6d	68		pla				pla 								; get the base back
.3a6e	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.3a70					_I32TSUnsigned:
.3a70	20 7e 3a	jsr $3a7e			jsr 	MI32DivideWrite 			; recursive code to output string.
.3a73	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.3a75	ad 08 0d	lda $0d08			lda 	MCharCount
.3a78	91 2a		sta ($2a),y			sta 	(temp0),y
.3a7a	68		pla				pla
.3a7b	a8		tay				tay
.3a7c	68		pla				pla
.3a7d	60		rts				rts
.3a7e					MI32DivideWrite:
.3a7e	48		pha				pha 								; save the divisor/base
.3a7f	e8		inx				inx 								; write in the dividing position.
.3a80	20 0b 3b	jsr $3b0b			jsr 	MInt32Set8Bit
.3a83	ca		dex				dex
.3a84	20 f6 38	jsr $38f6			jsr 	MInt32UDivide 				; divide number by base.
.3a87	68		pla				pla 								; get the base into Y
.3a88	a8		tay				tay
.3a89	b5 9a		lda $9a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.3a8b	48		pha				pha
.3a8c	20 23 3b	jsr $3b23			jsr 	MInt32Zero 					; is the result zero ?
.3a8f	f0 04		beq $3a95			beq 	_I32NoRecurse 				; if so, don't recurse.
.3a91	98		tya				tya 								; put base into A
.3a92	20 7e 3a	jsr $3a7e			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.3a95					_I32NoRecurse:
.3a95	68		pla				pla 								; get the remainder back
.3a96	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.3a98	90 02		bcc $3a9c			bcc 	_I32NotHex
.3a9a	69 06		adc #$06			adc 	#7-1
.3a9c					_I32NotHex:
.3a9c	18		clc				clc 								; make it ASCII
.3a9d	69 30		adc #$30			adc 	#48
.3a9f	20 a3 3a	jsr $3aa3			jsr 	MI32WriteCharacter 			; write the character out
.3aa2	60		rts				rts 								; and exit.
.3aa3					MI32WriteCharacter:
.3aa3	ee 08 0d	inc $0d08			inc 	MCharCount 					; bump count (space for leading count)
.3aa6	ac 08 0d	ldy $0d08			ldy 	MCharCount 					; get position
.3aa9	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.3aab	c8		iny				iny
.3aac	a9 00		lda #$00			lda 	#0
.3aae	91 2a		sta ($2a),y			sta 	(temp0),y
.3ab0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0d09					MSeed32:	.fill 	4							; random number seed.
.3ab1					MInt32Absolute:
.3ab1	b5 b0		lda $b0,x			lda 	esInt3,x 					; use negate code if -ve.
.3ab3	30 01		bmi $3ab6			bmi 	MInt32Negate
.3ab5	60		rts				rts
.3ab6					MInt32Negate:
.3ab6	38		sec				sec 								; subtract from zero.
.3ab7	a9 00		lda #$00			lda 	#0
.3ab9	f5 98		sbc $98,x			sbc 	esInt0,x
.3abb	95 98		sta $98,x			sta 	esInt0,x
.3abd	a9 00		lda #$00			lda 	#0
.3abf	f5 a0		sbc $a0,x			sbc 	esInt1,x
.3ac1	95 a0		sta $a0,x			sta 	esInt1,x
.3ac3	a9 00		lda #$00			lda 	#0
.3ac5	f5 a8		sbc $a8,x			sbc 	esInt2,x
.3ac7	95 a8		sta $a8,x			sta 	esInt2,x
.3ac9	a9 00		lda #$00			lda 	#0
.3acb	f5 b0		sbc $b0,x			sbc 	esInt3,x
.3acd	95 b0		sta $b0,x			sta 	esInt3,x
.3acf	60		rts				rts
.3ad0					MInt32Not:
.3ad0	b5 98		lda $98,x			lda 	esInt0,x 					; one's complement all four.
.3ad2	49 ff		eor #$ff			eor 	#$FF
.3ad4	95 98		sta $98,x			sta 	esInt0,x
.3ad6	b5 a0		lda $a0,x			lda 	esInt1,x
.3ad8	49 ff		eor #$ff			eor 	#$FF
.3ada	95 a0		sta $a0,x			sta 	esInt1,x
.3adc	b5 a8		lda $a8,x			lda 	esInt2,x
.3ade	49 ff		eor #$ff			eor 	#$FF
.3ae0	95 a8		sta $a8,x			sta 	esInt2,x
.3ae2	b5 b0		lda $b0,x			lda 	esInt3,x
.3ae4	49 ff		eor #$ff			eor 	#$FF
.3ae6	95 b0		sta $b0,x			sta 	esInt3,x
.3ae8	60		rts				rts
.3ae9					MInt32Sign:
.3ae9	b5 b0		lda $b0,x			lda 	esInt3,x					; look at MSB
.3aeb	30 0b		bmi $3af8			bmi 	MInt32True 					; if set return -1 (true)
.3aed	20 23 3b	jsr $3b23			jsr 	MInt32Zero 					; is it zero ?
.3af0	f0 0a		beq $3afc			beq 	MInt32False 				; if zero return 0 (false)
.3af2	20 fc 3a	jsr $3afc			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.3af5	f6 98		inc $98,x			inc 	esInt0,x  					; and bumping the LSB.
.3af7	60		rts				rts
.3af8					MInt32True:
.3af8	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.3afa	d0 02		bne $3afe			bne 	MInt32WriteAll
.3afc					MInt32False:
.3afc	a9 00		lda #$00			lda 	#0
.3afe					MInt32WriteAll:
.3afe	95 98		sta $98,x			sta 	esInt0,x
.3b00					MInt32Write123:
.3b00	95 a0		sta $a0,x			sta 	esInt1,x
.3b02	95 a8		sta $a8,x			sta 	esInt2,x
.3b04	95 b0		sta $b0,x			sta 	esInt3,x
.3b06	a9 00		lda #$00			lda 	#$00						; and make it an integer
.3b08	95 90		sta $90,x			sta 	esType,x
.3b0a	60		rts				rts
.3b0b					MInt32Set8Bit:
.3b0b	95 98		sta $98,x			sta 	esInt0,x 					; coopt above function to write
.3b0d	a9 00		lda #$00			lda 	#0 							; a value 0-255
.3b0f	f0 ef		beq $3b00			beq		MInt32Write123
.3b11					MInt32ShiftLeft:
.3b11	16 98		asl $98,x			asl 	esInt0,x
.3b13	36 a0		rol $a0,x			rol	 	esInt1,x
.3b15	36 a8		rol $a8,x			rol	 	esInt2,x
.3b17	36 b0		rol $b0,x			rol	 	esInt3,x
.3b19	60		rts				rts
.3b1a					MInt32ShiftRight:
.3b1a	56 b0		lsr $b0,x			lsr 	esInt3,x
.3b1c	76 a8		ror $a8,x			ror 	esInt2,x
.3b1e	76 a0		ror $a0,x			ror 	esInt1,x
.3b20	76 98		ror $98,x			ror 	esInt0,x
.3b22	60		rts				rts
.3b23					MInt32Zero:
.3b23	b5 98		lda $98,x			lda 	esInt0,x
.3b25	15 a0		ora $a0,x			ora 	esInt1,x
.3b27	15 a8		ora $a8,x			ora 	esInt2,x
.3b29	15 b0		ora $b0,x			ora 	esInt3,x
.3b2b	60		rts				rts
.3b2c					MInt32Random:
.3b2c	98		tya				tya
.3b2d	48		pha				pha
.3b2e	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.3b30	ad 09 0d	lda $0d09			lda 	MSeed32+0 					; check the seed isn't zero
.3b33	d0 03		bne $3b38			bne 	_Random1
.3b35	a8		tay				tay 								; if so do it 256 times
.3b36	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.3b38					_Random1:
.3b38	0a		asl a				asl 	a
.3b39	2e 0a 0d	rol $0d0a			rol 	MSeed32+1
.3b3c	2e 0b 0d	rol $0d0b			rol 	MSeed32+2
.3b3f	2e 0c 0d	rol $0d0c			rol 	MSeed32+3
.3b42	90 02		bcc $3b46			bcc 	_Random2
.3b44	49 c5		eor #$c5			eor 	#$C5
.3b46					_Random2:
.3b46	88		dey				dey
.3b47	d0 ef		bne $3b38			bne 	_Random1
.3b49	8d 09 0d	sta $0d09			sta 	MSeed32+0 					; copy the seed in.
.3b4c	95 98		sta $98,x			sta 	esInt0,x
.3b4e	ad 0a 0d	lda $0d0a			lda 	MSeed32+1
.3b51	95 a0		sta $a0,x			sta 	esInt1,x
.3b53	ad 0b 0d	lda $0d0b			lda 	MSeed32+2
.3b56	95 a8		sta $a8,x			sta 	esInt2,x
.3b58	ad 0c 0d	lda $0d0c			lda 	MSeed32+3
.3b5b	95 b0		sta $b0,x			sta 	esInt3,x
.3b5d	68		pla				pla
.3b5e	a8		tay				tay
.3b5f	a9 00		lda #$00			lda 	#0
.3b61	95 90		sta $90,x			sta 	esType,x
.3b63	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.3b64					CheckToken:
.3b64	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3b66	d0 02		bne $3b6a			bne 	_CTError
.3b68	c8		iny				iny
.3b69	60		rts				rts
.3b6a					_CTError:
.3b6a	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.3b6c	20 18 15	jsr $1518		jsr	errorHandler
.3b6f					CheckRightParen:
.3b6f	b1 28		lda ($28),y			lda 	(codePtr),y
.3b71	c8		iny				iny
.3b72	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.3b74	d0 01		bne $3b77			bne 	_CRPError
.3b76	60		rts				rts
.3b77					_CRPError:
.3b77	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.3b79	20 18 15	jsr $1518		jsr	errorHandler
.3b7c					CheckComma:
.3b7c	b1 28		lda ($28),y			lda 	(codePtr),y
.3b7e	c8		iny				iny
.3b7f	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.3b81	d0 01		bne $3b84			bne 	_CCError
.3b83	60		rts				rts
.3b84					_CCError:
.3b84	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.3b86	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.3b89					RSReset:
.3b89	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.3b8b	85 37		sta $37				sta 	rsPointer
.3b8d	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3b8f	85 38		sta $38				sta 	1+(rsPointer)
.3b91	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3b93	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3b96	60		rts				rts
.3b97					RSClaim:
.3b97	84 32		sty $32				sty 	tempShort 					; preserve Y
.3b99	48		pha				pha 								; save marker on stack.
.3b9a	8a		txa				txa 								; get bytes required.
.3b9b	38		sec				sec
.3b9c	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3b9e	65 37		adc $37				adc 	rsPointer
.3ba0	85 37		sta $37				sta 	rsPointer
.3ba2	a5 38		lda $38				lda 	rsPointer+1
.3ba4	69 ff		adc #$ff			adc 	#$FF
.3ba6	85 38		sta $38				sta 	rsPointer+1
.3ba8	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.3baa	90 08		bcc $3bb4			bcc 	_RSCOverflow
.3bac	68		pla				pla 								; get marker back
.3bad	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3baf	91 37		sta ($37),y			sta 	(rsPointer),y
.3bb1	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3bb3	60		rts				rts
.3bb4					_RSCOverflow:
.3bb4	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3bb6	20 18 15	jsr $1518		jsr	errorHandler
.3bb9					RSFree:
.3bb9	18		clc				clc
.3bba	65 37		adc $37				adc 	rsPointer
.3bbc	85 37		sta $37				sta 	rsPointer
.3bbe	90 02		bcc $3bc2			bcc 	_RSFExit
.3bc0	e6 38		inc $38				inc 	rsPointer+1
.3bc2					_RSFExit:
.3bc2	60		rts				rts
.3bc3					RSSavePosition:
.3bc3	84 32		sty $32				sty 	tempShort 					; save Y position
.3bc5	a8		tay				tay 								; this is where we write it.
.3bc6	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.3bc8	91 37		sta ($37),y			sta 	(rsPointer),y
.3bca	c8		iny				iny
.3bcb	a5 29		lda $29				lda 	codePtr+1
.3bcd	91 37		sta ($37),y			sta 	(rsPointer),y
.3bcf	c8		iny				iny
.3bd0	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.3bd2	91 37		sta ($37),y			sta 	(rsPointer),y
.3bd4	a8		tay				tay 								; fix Y back again to original value
.3bd5	60		rts				rts
.3bd6					RSLoadPosition:
.3bd6	a8		tay				tay
.3bd7	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.3bd9	85 28		sta $28				sta 	codePtr
.3bdb	c8		iny				iny
.3bdc	b1 37		lda ($37),y			lda 	(rsPointer),y
.3bde	85 29		sta $29				sta 	codePtr+1
.3be0	c8		iny				iny
.3be1	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.3be3	a8		tay				tay 								; to Y
.3be4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.3be5					WarmStart:
.3be5	a2 04		ldx #$04		ldx	#4
.3be7	20 4e 25	jsr $254e		jsr	interactionHandler

;******  Return to file: main/main.asm

.3bea					mainHandler:
.3bea	7c ed 3b	jmp ($3bed,x)			jmp 	(mainVectors,x)
.3bed					mainVectors:
>3bed	09 3c					.word _DummyControlHandler ; index 0
>3bef	7c 3b					.word CheckComma           ; index 2
>3bf1	6f 3b					.word CheckRightParen      ; index 4
>3bf3	56 2d					.word XCommandClear        ; index 6
>3bf5	7f 34					.word LinkEvaluate         ; index 8
>3bf7	8b 34					.word LinkEvaluateInteger  ; index 10
>3bf9	97 34					.word LinkEvaluateSmallInt ; index 12
>3bfb	91 34					.word LinkEvaluateString   ; index 14
>3bfd	85 34					.word LinkEvaluateTerm     ; index 16
>3bff	4b 3a					.word MLInt32ToString      ; index 18
>3c01	e5 2e					.word Command_XNew         ; index 20
>3c03	f3 2e					.word XCommand_Run         ; index 22
>3c05	ff 2e					.word Command_RunFrom      ; index 24
>3c07	63 39					.word LinkInt32FromString  ; index 26
.3c09					_DummyControlHandler:
.3c09	60		rts			rts

;******  Return to file: basic.asm

.3c0a					section_end_main:
.3c0a					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/functions/chr.asm

.3c0a					StringChrs:
.3c0a	aa		tax				tax 								; set up stack
.3c0b	a9 02		lda #$02			lda 	#2
.3c0d	20 cd 3c	jsr $3ccd			jsr 	AllocateSoftString
.3c10	98		tya				tya
.3c11	20 f3 3c	jsr $3cf3			jsr 	WriteSoftString
.3c14					StringUpdate:
.3c14	20 22 3c	jsr $3c22			jsr 	ReturnSoftString
.3c17	8a		txa				txa
.3c18	60		rts				rts
.3c19					StringNull:
.3c19	aa		tax				tax
.3c1a	a9 01		lda #$01			lda 	#1
.3c1c	20 cd 3c	jsr $3ccd			jsr 	AllocateSoftString
.3c1f	4c 14 3c	jmp $3c14			jmp 	StringUpdate
.3c22					ReturnSoftString:
.3c22	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.3c24	95 98		sta $98,x			sta 	esInt0,x
.3c26	a5 3a		lda $3a				lda 	softMemAlloc+1
.3c28	95 a0		sta $a0,x			sta 	esInt1,x
.3c2a	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.3c2c	95 a8		sta $a8,x			sta 	esInt2,x
.3c2e	95 b0		sta $b0,x			sta 	esInt3,x
.3c30	a9 40		lda #$40			lda 	#$40 						; type string.
.3c32	95 90		sta $90,x			sta 	esType,x
.3c34	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/compare.asm

.3c35					STRCompare:
.3c35	48		pha				pha 								; save A
.3c36	aa		tax				tax 								; put stack pos in X
.3c37	98		tya				tya
.3c38	48		pha				pha
.3c39	20 6d 3c	jsr $3c6d			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3c3c	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3c3e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c40	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.3c42	90 02		bcc $3c46			bcc 	_SCNotSmaller
.3c44	b1 2c		lda ($2c),y			lda 	(temp1),y
.3c46					_SCNotSmaller:
.3c46	aa		tax				tax 								; put that in X. We compare this many chars first.
.3c47					_SCCompareLoop:
.3c47	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3c49	f0 0c		beq $3c57			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3c4b	ca		dex				dex 								; decrement chars to compare.
.3c4c	c8		iny				iny 								; move to next character
.3c4d	38		sec				sec 								; calculate s1[y]-s2[y]
.3c4e	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c50	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c52	d0 0a		bne $3c5e			bne 	_SCReturnResult 			; if different return sign of A
.3c54	4c 47 3c	jmp $3c47			jmp 	_SCCompareLoop
.3c57					_SCSameToEndShortest
.3c57	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3c59	38		sec				sec
.3c5a	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c5c	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3c5e					_SCReturnResult:
.3c5e	08		php				php 								; set return to zero preserving PSW.
.3c5f	a2 00		ldx #$00			ldx 	#0
.3c61	28		plp				plp
.3c62	f0 05		beq $3c69			beq 	_SCExit 					; two values equal, then exit
.3c64	ca		dex				dex 								; X = $FF
.3c65	90 02		bcc $3c69			bcc 	_SCExit 					; if 1st < 2nd then -1
.3c67	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3c69					_SCExit:
.3c69	68		pla				pla
.3c6a	a8		tay				tay
.3c6b	68		pla				pla
.3c6c	60		rts				rts
.3c6d					CopyStringPair:
.3c6d	b5 99		lda $99,x			lda 	esInt0+1,x
.3c6f	85 2c		sta $2c				sta 	temp1
.3c71	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3c73	85 2d		sta $2d				sta 	temp1+1
.3c75					CopyStringTop:
.3c75	b5 98		lda $98,x			lda 	esInt0,x
.3c77	85 2a		sta $2a				sta 	temp0
.3c79	b5 a0		lda $a0,x			lda 	esInt1,x
.3c7b	85 2b		sta $2b				sta 	temp0+1
.3c7d	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/concat.asm

.3c7e					StringConcat:
.3c7e	aa		tax				tax									; stack pos in X
.3c7f	98		tya				tya
.3c80	48		pha				pha
.3c81	20 6d 3c	jsr $3c6d			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.3c84	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3c85	a0 00		ldy #$00			ldy 	#0
.3c87	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c89	71 2c		adc ($2c),y			adc 	(temp1),y
.3c8b	b0 1c		bcs $3ca9			bcs 	_SCError 					; just too many characters here.
.3c8d	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.3c8f	b0 18		bcs $3ca9			bcs 	_SCError
.3c91	20 cd 3c	jsr $3ccd			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3c94	20 c4 3c	jsr $3cc4			jsr 	CopySoftToStack 			; copy that to the stack.
.3c97	20 ae 3c	jsr $3cae			jsr 	SCCopyTemp0 				; copy temp0
.3c9a	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3c9c	85 2a		sta $2a				sta 	temp0
.3c9e	a5 2d		lda $2d				lda 	temp1+1
.3ca0	85 2b		sta $2b				sta 	temp0+1
.3ca2	20 ae 3c	jsr $3cae			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3ca5	68		pla				pla
.3ca6	a8		tay				tay
.3ca7	8a		txa				txa 								; and A
.3ca8	60		rts				rts
.3ca9					_SCError:
.3ca9	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3cab	20 18 15	jsr $1518		jsr	errorHandler
.3cae					SCCopyTemp0:
.3cae	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.3cb0	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cb2	85 2e		sta $2e				sta 	temp2
.3cb4					_SCCopyLoop:
.3cb4	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3cb6	f0 0b		beq $3cc3			beq 	_SCCopyExit
.3cb8	c6 2e		dec $2e				dec 	temp2
.3cba	c8		iny				iny 								; get next char
.3cbb	b1 2a		lda ($2a),y			lda 	(temp0),y
.3cbd	20 f3 3c	jsr $3cf3			jsr 	WriteSoftString 			; write to soft string.
.3cc0	4c b4 3c	jmp $3cb4			jmp 	_SCCopyLoop
.3cc3					_SCCopyExit:
.3cc3	60		rts				rts
.3cc4					CopySoftToStack:
.3cc4	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3cc6	95 98		sta $98,x			sta 	esInt0,x 					; type is already string.
.3cc8	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3cca	95 a0		sta $a0,x			sta 	esInt1,x
.3ccc	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3ccd					AllocateSoftString:
.3ccd	85 32		sta $32				sta 	tempShort 					; save count
.3ccf	98		tya				tya
.3cd0	48		pha				pha
.3cd1	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.3cd3	d0 09		bne $3cde			bne 	_ASSDone
.3cd5	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.3cd7	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.3cd9	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.3cdb	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.3cdc	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.3cde					_ASSDone:
.3cde	38		sec				sec 								; allocate downwards enough memory
.3cdf	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.3ce1	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.3ce3	85 39		sta $39				sta 	softMemAlloc
.3ce5	a5 3a		lda $3a				lda 	softMemAlloc+1
.3ce7	e9 00		sbc #$00			sbc 	#0
.3ce9	85 3a		sta $3a				sta 	softMemAlloc+1
.3ceb	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.3ced	a8		tay				tay
.3cee	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3cf0	68		pla				pla
.3cf1	a8		tay				tay
.3cf2	60		rts				rts
.3cf3					WriteSoftString:
.3cf3	84 32		sty $32				sty 	tempShort 					; save Y
.3cf5	48		pha				pha 								; save character on stack
.3cf6	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.3cf8	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.3cfa	18		clc				clc
.3cfb	69 01		adc #$01			adc 	#1
.3cfd	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3cff	a8		tay				tay 								; offset in Y
.3d00	68		pla				pla 								; get char and write.
.3d01	91 39		sta ($39),y			sta 	(softMemAlloc),y
.3d03	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.3d05	60		rts				rts
.3d06					StrClone:
.3d06	aa		tax				tax 								; set up stack.
.3d07	98		tya				tya
.3d08	48		pha				pha
.3d09	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.3d0b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.3d0d	18		clc				clc
.3d0e	69 01		adc #$01			adc 	#1
.3d10	20 cd 3c	jsr $3ccd			jsr 	AllocateSoftString 			; allocate soft memory
.3d13	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.3d15	95 98		sta $98,x			sta 	esInt0,x
.3d17	a5 3a		lda $3a				lda 	softMemAlloc+1
.3d19	95 a0		sta $a0,x			sta 	esInt1,x
.3d1b	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.3d1d	95 a8		sta $a8,x			sta 	esInt2,x
.3d1f	95 b0		sta $b0,x			sta 	esInt3,x
.3d21	a9 40		lda #$40			lda 	#$40 						; set type to string.
.3d23	95 90		sta $90,x			sta 	esType,x
.3d25	20 ae 3c	jsr $3cae			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.3d28	68		pla				pla
.3d29	a8		tay				tay
.3d2a	8a		txa				txa
.3d2b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/setcase.asm

.3d2c					CaseString:
.3d2c	48		pha				pha 								; save A and copy to X
.3d2d	aa		tax				tax
.3d2e	98		tya				tya
.3d2f	48		pha				pha
.3d30	20 75 3c	jsr $3c75			jsr 	CopyStringTop 				; target string -> temp0
.3d33	a0 00		ldy #$00			ldy 	#0
.3d35	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3d37	18		clc				clc
.3d38	69 01		adc #$01			adc 	#1 							; one more for length byte
.3d3a	20 cd 3c	jsr $3ccd			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d3d	20 c4 3c	jsr $3cc4			jsr 	CopySoftToStack 			; copy that to the stack.
.3d40	a0 00		ldy #$00			ldy 	#0
.3d42	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.3d44	aa		tax				tax
.3d45					_CSCopy:
.3d45	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3d47	f0 24		beq $3d6d			beq 	_CSExit
.3d49	ca		dex				dex
.3d4a	c8		iny				iny
.3d4b	68		pla				pla 								; check direction
.3d4c	48		pha				pha
.3d4d	f0 0c		beq $3d5b			beq 	_CSUpper
.3d4f	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.3d51	c9 41		cmp #$41			cmp 	#"A"
.3d53	90 12		bcc $3d67			bcc 	_CSWrite
.3d55	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3d57	b0 0e		bcs $3d67			bcs 	_CSWrite
.3d59	90 0a		bcc $3d65			bcc 	_CSFlipWrite
.3d5b					_CSUpper:
.3d5b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3d5d	c9 61		cmp #$61			cmp 	#"a"
.3d5f	90 06		bcc $3d67			bcc 	_CSWrite
.3d61	c9 7b		cmp #$7b			cmp 	#"z"+1
.3d63	b0 02		bcs $3d67			bcs 	_CSWrite
.3d65					_CSFlipWrite:
.3d65	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3d67					_CSWrite:
.3d67	20 f3 3c	jsr $3cf3			jsr 	WriteSoftString 			; add to soft string.
.3d6a	4c 45 3d	jmp $3d45			jmp 	_CSCopy
.3d6d					_CSExit:
.3d6d	68		pla				pla
.3d6e	a8		tay				tay
.3d6f	68		pla				pla
.3d70	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/substring.asm

.3d71					StringSubstring:
.3d71	48		pha				pha
.3d72	aa		tax				tax 								; access stack.
.3d73	98		tya				tya
.3d74	48		pha				pha
.3d75	20 75 3c	jsr $3c75			jsr 	CopyStringTop 				; point temp0 to the string.
.3d78	a0 00		ldy #$00			ldy 	#0 							; get length.
.3d7a	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3d7c	85 2c		sta $2c				sta 	temp1
.3d7e	b5 99		lda $99,x			lda 	esInt0+1,x 					; get the initial offset
.3d80	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.3d82	f0 02		beq $3d86			beq 	_SSBOkay
.3d84	b0 2a		bcs $3db0			bcs 	_SSBReturnNull
.3d86					_SSBOkay:
.3d86	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3d88	18		clc				clc
.3d89	69 01		adc #$01			adc 	#1
.3d8b	38		sec				sec
.3d8c	f5 99		sbc $99,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3d8e	d5 9a		cmp $9a,x			cmp 	esInt0+2,x  				; check bad >= required
.3d90	90 02		bcc $3d94			bcc		_SSBTrunc
.3d92	b5 9a		lda $9a,x			lda 	esInt0+2,x
.3d94					_SSBTrunc:
.3d94	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3d96	18		clc				clc
.3d97	69 01		adc #$01			adc 	#1 							; add 1
.3d99	20 cd 3c	jsr $3ccd			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3d9c	20 c4 3c	jsr $3cc4			jsr 	CopySoftToStack 			; copy that to the stack.
.3d9f	b4 99		ldy $99,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.3da1					_SSBCopyLoop:
.3da1	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.3da3	f0 0e		beq $3db3			beq 	_SSBExit
.3da5	c6 2d		dec $2d				dec 	temp1+1
.3da7	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3da9	20 f3 3c	jsr $3cf3			jsr 	WriteSoftString
.3dac	c8		iny				iny
.3dad	4c a1 3d	jmp $3da1			jmp 	_SSBCopyLoop
.3db0					_SSBReturnNull:
.3db0	20 b7 3d	jsr $3db7			jsr 	ReturnNull
.3db3					_SSBExit:
.3db3	68		pla				pla
.3db4	a8		tay				tay
.3db5	68		pla				pla
.3db6	60		rts				rts
.3db7					ReturnNull:
.3db7	a9 00		lda #$00			lda 	#0 							; clear null string
.3db9	8d ce 0a	sta $0ace			sta 	NullString
.3dbc	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3dbe	95 98		sta $98,x			sta 	esInt0,x
.3dc0	a9 0a		lda #$0a			lda 	#NullString >> 8
.3dc2	95 a0		sta $a0,x			sta 	esInt1,x
.3dc4	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/functions/write.asm

.0d0d					srcStrLen:
>0d0d							.fill 	1
.3dc5					StringWrite:
.3dc5	aa		tax				tax
.3dc6	48		pha				pha
.3dc7	98		tya				tya
.3dc8	48		pha				pha
.3dc9	20 f0 3d	jsr $3df0			jsr 	CheckOverwriteCurrent
.3dcc	b0 0d		bcs $3ddb			bcs		_SWCopyCurrent
.3dce	20 2e 3e	jsr $3e2e			jsr 	RequiresConcretion
.3dd1	90 0e		bcc $3de1			bcc 	_SWWriteReference
.3dd3	20 91 3e	jsr $3e91			jsr 	CheckSpecialConcretion
.3dd6	b0 09		bcs $3de1			bcs 	_SWWriteReference
.3dd8	20 42 3e	jsr $3e42			jsr 	AllocateHardMemory
.3ddb					_SWCopyCurrent:
.3ddb	20 75 3e	jsr $3e75			jsr 	CopyStringToHardMemory
.3dde	4c ec 3d	jmp $3dec			jmp 	_SWExit
.3de1					_SWWriteReference
.3de1	a0 00		ldy #$00			ldy 	#0
.3de3	a5 2a		lda $2a				lda 	temp0
.3de5	91 2c		sta ($2c),y			sta 	(temp1),y
.3de7	c8		iny				iny
.3de8	a5 2b		lda $2b				lda 	temp0+1
.3dea	91 2c		sta ($2c),y			sta 	(temp1),y
.3dec					_SWExit:
.3dec	68		pla				pla
.3ded	a8		tay				tay
.3dee	68		pla				pla
.3def	60		rts				rts
.3df0					CheckOverwriteCurrent:
.3df0	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.3df2	b5 a1		lda $a1,x			lda 	esInt1+1,x
.3df4	85 2b		sta $2b				sta 	temp0+1
.3df6	b5 99		lda $99,x			lda 	esInt0+1,x
.3df8	85 2a		sta $2a				sta 	temp0
.3dfa	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.3dfc	8d 0d 0d	sta $0d0d			sta 	srcStrLen
.3dff	b5 98		lda $98,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.3e01	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.3e03	b5 a0		lda $a0,x			lda 	esInt1,x 				; data record + 5
.3e05	85 2d		sta $2d				sta 	temp1+1
.3e07	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.3e09	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e0b	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.3e0d	90 1b		bcc $3e2a			bcc 	_COCFail 				; in hard memory.
.3e0f	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.3e11	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.3e13	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.3e15	85 2e		sta $2e				sta 	temp2
.3e17	c8		iny				iny
.3e18	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e1a	e9 00		sbc #$00			sbc 	#0
.3e1c	85 2f		sta $2f				sta 	temp2+1
.3e1e	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.3e20	b1 2e		lda ($2e),y			lda 	(temp2),y
.3e22	38		sec				sec  							; maximum character capacity.
.3e23	e9 02		sbc #$02			sbc 	#2
.3e25	cd 0d 0d	cmp $0d0d			cmp 	srcStrLen 				; if >= the required length
.3e28	b0 02		bcs $3e2c			bcs 	_COCCanReuse
.3e2a					_COCFail:
.3e2a	18		clc				clc
.3e2b	60		rts				rts
.3e2c					_COCCanReuse:
.3e2c	38		sec				sec
.3e2d	60		rts				rts
.3e2e					RequiresConcretion:
.3e2e	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e30	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.3e32	b0 0a		bcs $3e3e			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.3e34	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3e36	f0 08		beq $3e40			beq 	_RCFail 				; if not, this cannot be soft memory.
.3e38	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3e3a	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3e3c	90 02		bcc $3e40			bcc 	_RCFail 				; so concreting
.3e3e					_RCSucceed:
.3e3e	38		sec				sec
.3e3f	60		rts				rts
.3e40					_RCFail:
.3e40	18		clc				clc
.3e41	60		rts				rts
.3e42					AllocateHardMemory:
.3e42	98		tya				tya
.3e43	48		pha				pha
.3e44	ad 0d 0d	lda $0d0d			lda 	srcStrLen 				; characters in string
.3e47	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3e49	b0 04		bcs $3e4f			bcs 	_AHMSetMax 				; max out that amount.
.3e4b	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3e4d	90 02		bcc $3e51			bcc 	_AHMIsOkay
.3e4f					_AHMSetMax:
.3e4f	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.3e51					_AHMIsOkay:
.3e51	48		pha				pha	 							; save size to be allocated
.3e52	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.3e54	38		sec				sec  							; and copy result to TOS as target address.
.3e55	65 33		adc $33				adc 	highMemory
.3e57	85 33		sta $33				sta 	highMemory
.3e59	a5 34		lda $34				lda 	highMemory+1
.3e5b	69 ff		adc #$ff			adc 	#$FF
.3e5d	85 34		sta $34				sta 	highMemory+1
.3e5f	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.3e61	68		pla				pla 							; get the total size of the storage block
.3e62	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.3e64	18		clc				clc
.3e65	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3e67	69 01		adc #$01			adc 	#1
.3e69	91 2c		sta ($2c),y			sta 	(temp1),y
.3e6b	a5 34		lda $34				lda 	highMemory+1
.3e6d	69 00		adc #$00			adc 	#0
.3e6f	c8		iny				iny
.3e70	91 2c		sta ($2c),y			sta 	(temp1),y
.3e72	68		pla				pla
.3e73	a8		tay				tay
.3e74	60		rts				rts
.3e75					CopyStringToHardMemory:
.3e75	98		tya				tya
.3e76	48		pha				pha
.3e77	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3e79	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e7b	85 2e		sta $2e				sta 	temp2
.3e7d	c8		iny				iny
.3e7e	b1 2c		lda ($2c),y			lda 	(temp1),y
.3e80	85 2f		sta $2f				sta 	temp2+1
.3e82	ac 0d 0d	ldy $0d0d			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3e85					_CSTHMLoop:
.3e85	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e87	91 2e		sta ($2e),y			sta 	(temp2),y
.3e89	88		dey				dey
.3e8a	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3e8c	d0 f7		bne $3e85			bne 	_CSTHMLoop
.3e8e	68		pla				pla
.3e8f	a8		tay				tay
.3e90	60		rts				rts
.3e91					CheckSpecialConcretion:
.3e91	ad 0d 0d	lda $0d0d			lda 	srcStrLen 				; check string is null e.g. length = 0
.3e94	f0 02		beq $3e98			beq 	_CSCNullString
.3e96	18		clc				clc
.3e97	60		rts				rts
.3e98					_CSCNullString:
.3e98	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3e9a	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3e9d	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.3e9f	85 2a		sta $2a				sta 	temp0
.3ea1	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.3ea3	85 2b		sta $2b				sta 	1+(temp0)
.3ea5	38		sec				sec
.3ea6	60		rts				rts

;******  Return to file: string/string.asm

.3ea7					stringHandler:
.3ea7	7c aa 3e	jmp ($3eaa,x)			jmp 	(stringVectors,x)
.3eaa					stringVectors:
>3eaa	bc 3e					.word _DummyControlHandler ; index 0
>3eac	0a 3c					.word StringChrs           ; index 2
>3eae	06 3d					.word StrClone             ; index 4
>3eb0	7e 3c					.word StringConcat         ; index 6
>3eb2	19 3c					.word StringNull           ; index 8
>3eb4	35 3c					.word STRCompare           ; index 10
>3eb6	2c 3d					.word CaseString           ; index 12
>3eb8	71 3d					.word StringSubstring      ; index 14
>3eba	c5 3d					.word StringWrite          ; index 16
.3ebc					_DummyControlHandler:
.3ebc	60		rts			rts

;******  Return to file: basic.asm

.3ebd					section_end_string:
.3ebd					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0d0e					deTokeniseVector:
>0d0e							.fill 	2
.0d10					lastCharacterClass:
>0d10							.fill 	1
.0d11					indent:
>0d11							.fill 	1
.3ebd					ListLine:
.3ebd	48		pha				pha								; enter here to list to console. sets the output vector
.3ebe	a9 f5		lda #$f5			lda 	#(deTokenPrint) & $FF
.3ec0	8d 0e 0d	sta $0d0e			sta 	deTokeniseVector
.3ec3	a9 3f		lda #$3f			lda 	#(deTokenPrint) >> 8
.3ec5	8d 0f 0d	sta $0d0f			sta 	1+(deTokeniseVector)
.3ec8	68		pla				pla
.3ec9					Detokenise:
.3ec9	18		clc				clc 							; space required for line number.
.3eca	69 06		adc #$06			adc 	#6
.3ecc	8d 11 0d	sta $0d11			sta 	indent
.3ecf	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3ed1	8d 10 0d	sta $0d10			sta 	lastCharacterClass
.3ed4	a2 02		ldx #$02			ldx 	#2
.3ed6	a9 00		lda #$00			lda 	#0 						; clear upper two bytes
.3ed8	95 a8		sta $a8,x			sta 	esInt2,x
.3eda	95 b0		sta $b0,x			sta 	esInt3,x
.3edc	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1 for list range)
.3ede	b1 28		lda ($28),y			lda 	(codePtr),y
.3ee0	95 98		sta $98,x			sta 	esInt0,x
.3ee2	c8		iny				iny
.3ee3	b1 28		lda ($28),y			lda 	(codePtr),y
.3ee5	95 a0		sta $a0,x			sta 	esInt1,x
.3ee7	a9 84		lda #$84			lda 	#LTYLineNumber
.3ee9	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.3eec	a9 0a		lda #$0a			lda 	#10 					; base 10
.3eee	20 94 3f	jsr $3f94			jsr 	DTPrintInteger 			; print as integer.
.3ef1	a0 00		ldy #$00			ldy 	#0 						; get length
.3ef3	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.3ef5	aa		tax				tax
.3ef6					_DTPadOut:
.3ef6	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.3ef8	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.3efb	e8		inx				inx
.3efc	ec 11 0d	cpx $0d11			cpx 	indent
.3eff	d0 f5		bne $3ef6			bne 	_DTPadOut
.3f01	a0 03		ldy #$03			ldy 	#3 						; start position.
.3f03					_DTListLoop:
.3f03	b1 28		lda ($28),y			lda 	(codePtr),y
.3f05	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.3f07	f0 5e		beq $3f67			beq 	_DTIsString
.3f09	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.3f0b	f0 56		beq $3f63			beq 	_DTIsFloat
.3f0d	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.3f0f	f0 16		beq $3f27			beq 	_DTHexConstant
.3f11	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.3f13	d0 06		bne $3f1b			bne 	_DTNotEnd
.3f15	a9 ff		lda #$ff			lda 	#255 					; print CR
.3f17	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.3f1a	60		rts				rts
.3f1b					_DTNotEnd:
.3f1b	c9 00		cmp #$00			cmp 	#0
.3f1d	30 38		bmi $3f57			bmi 	_DTIsToken
.3f1f	c9 40		cmp #$40			cmp 	#$40
.3f21	90 3a		bcc $3f5d			bcc 	_DTIsIdentifier
.3f23	a9 0a		lda #$0a			lda 	#10 					; this is the base, unsigned decimal
.3f25	d0 0d		bne $3f34			bne 	_DTConstant
.3f27					_DTHexConstant:
.3f27	a9 26		lda #$26			lda 	#"&"
.3f29	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.3f2c	c8		iny				iny
.3f2d	a9 01		lda #$01			lda 	#1 						; switch to spaces so &xxxx is treated like a number.
.3f2f	20 11 40	jsr $4011			jsr 	DTSwitchMode
.3f32	a9 10		lda #$10			lda 	#16						; print line unsigned hex
.3f34					_DTConstant:
.3f34	48		pha				pha
.3f35	a9 00		lda #$00			lda 	#0 						; now constant, may need spaces
.3f37	20 11 40	jsr $4011			jsr 	DTSwitchMode
.3f3a	a9 86		lda #$86			lda 	#LTYConstant
.3f3c	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.3f3f	a2 02		ldx #$02			ldx 	#2 						; get its value
.3f41	8a		txa				txa
.3f42	a2 10		ldx #$10		ldx	#16
.3f44	20 ea 3b	jsr $3bea		jsr	mainHandler
.3f47	aa		tax				tax
.3f48	68		pla				pla 							; get base back
.3f49	85 32		sta $32				sta 	tempShort
.3f4b	98		tya				tya
.3f4c	48		pha				pha
.3f4d	a5 32		lda $32				lda 	tempShort 				; print in base A stck level X
.3f4f	20 94 3f	jsr $3f94			jsr 	DTPrintInteger
.3f52	68		pla				pla
.3f53	a8		tay				tay
.3f54	4c 03 3f	jmp $3f03			jmp 	_DTListLoop
.3f57					_DTIsToken:
.3f57	20 6a 40	jsr $406a			jsr 	DTDecodeToken
.3f5a	4c 03 3f	jmp $3f03			jmp 	_DTListLoop
.3f5d					_DTIsIdentifier:
.3f5d	20 23 40	jsr $4023			jsr 	DTIdentifier
.3f60	4c 03 3f	jmp $3f03			jmp 	_DTListLoop
.3f63					_DTIsFloat:
>3f63	db						.byte 	$DB
.3f64	4c 63 3f	jmp $3f63			jmp 	_DTIsFloat
.3f67					_DTIsString:
.3f67	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3f69	20 11 40	jsr $4011			jsr 	DTSwitchMode
.3f6c	a9 81		lda #$81			lda 	#LTYString
.3f6e	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.3f71	a9 22		lda #$22			lda 	#'"'						; open quote
.3f73	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.3f76	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3f78	8a		txa				txa
.3f79	a2 10		ldx #$10		ldx	#16
.3f7b	20 ea 3b	jsr $3bea		jsr	mainHandler
.3f7e	aa		tax				tax
.3f7f	b5 98		lda $98,x			lda 	esInt0,x 					; copy string address to temp0
.3f81	85 2a		sta $2a				sta 	temp0
.3f83	b5 a0		lda $a0,x			lda 	esInt1,x
.3f85	85 2b		sta $2b				sta 	temp0+1
.3f87	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3f89	20 a6 3f	jsr $3fa6			jsr 	DTPrintLengthPrefix
.3f8c	a9 22		lda #$22			lda 	#'"'
.3f8e	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.3f91	4c 03 3f	jmp $3f03			jmp 	_DTListLoop

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0d12					tPrintCount:
>0d12							.fill 	1
.3f94					DTPrintInteger:
.3f94	48		pha				pha									; save base
.3f95	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3f97	85 2a		sta $2a				sta 	temp0
.3f99	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3f9b	85 2b		sta $2b				sta 	1+(temp0)
.3f9d	68		pla				pla
.3f9e	a8		tay				tay
.3f9f	8a		txa				txa
.3fa0	a2 12		ldx #$12		ldx	#18
.3fa2	20 ea 3b	jsr $3bea		jsr	mainHandler
.3fa5	aa		tax				tax 								; then drop through here.
.3fa6					DTPrintLengthPrefix:
.3fa6	aa		tax				tax 								; A = 0 = don't case convert.
.3fa7	98		tya				tya
.3fa8	48		pha				pha
.3fa9	a0 00		ldy #$00			ldy 	#0 							; get string length = chars to print.
.3fab	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fad	8d 12 0d	sta $0d12			sta 	tPrintCount
.3fb0	f0 1b		beq $3fcd			beq 	_DTPLPExit 					; empty string
.3fb2					_DTPLPLoop:
.3fb2	c8		iny				iny 								; get next.
.3fb3	b1 2a		lda ($2a),y			lda 	(temp0),y
.3fb5	29 7f		and #$7f			and 	#$7F
.3fb7	e0 00		cpx #$00			cpx 	#0 							; skip if not case converting
.3fb9	f0 0a		beq $3fc5			beq 	_DTPLPNoCase
.3fbb	c9 41		cmp #$41			cmp 	#"A" 						; if converting UC -> LC
.3fbd	90 06		bcc $3fc5			bcc 	_DTPLPNoCase
.3fbf	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3fc1	b0 02		bcs $3fc5			bcs 	_DTPLPNoCase
.3fc3	49 20		eor #$20			eor 	#"A"^"a"
.3fc5					_DTPLPNoCase
.3fc5	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter 		; call handler
.3fc8	ce 12 0d	dec $0d12			dec 	tPrintCount 				; do all the characters
.3fcb	d0 e5		bne $3fb2			bne 	_DTPLPLoop
.3fcd					_DTPLPExit:
.3fcd	68		pla				pla
.3fce	a8		tay				tay
.3fcf	60		rts				rts
.3fd0					ListOutputCharacter:
.3fd0	85 32		sta $32				sta 	tempShort
.3fd2	48		pha				pha
.3fd3	8a		txa				txa
.3fd4	48		pha				pha
.3fd5	98		tya				tya
.3fd6	48		pha				pha
.3fd7	a5 32		lda $32				lda 	tempShort 					; convert ASCII 6 bit (0-31) to 7 bit.
.3fd9	c9 20		cmp #$20			cmp 	#32
.3fdb	b0 0c		bcs $3fe9			bcs		_LOCHiBit
.3fdd	09 40		ora #$40			ora 	#64 						; conversion
.3fdf	c9 40		cmp #$40			cmp 	#64							; make l/c
.3fe1	f0 06		beq $3fe9			beq 	_LOCHiBit
.3fe3	c9 5b		cmp #$5b			cmp 	#65+26
.3fe5	b0 02		bcs $3fe9			bcs 	_LOCHiBit
.3fe7	69 20		adc #$20			adc 	#32
.3fe9					_LOCHiBit:
.3fe9	20 f2 3f	jsr $3ff2			jsr 	_LOCCallVector				; call o/p handler routine
.3fec	68		pla				pla
.3fed	a8		tay				tay
.3fee	68		pla				pla
.3fef	aa		tax				tax
.3ff0	68		pla				pla
.3ff1					_LOCExit:
.3ff1	60		rts				rts
.3ff2					_LOCCallVector:
.3ff2	6c 0e 0d	jmp ($0d0e)			jmp 	(deTokeniseVector)
.3ff5					deTokenPrint:
.3ff5	c9 00		cmp #$00			cmp 	#0 							; if bit 7 sets ink colour
.3ff7	30 06		bmi $3fff			bmi 	_dtpInk
.3ff9	a2 16		ldx #$16		ldx	#22
.3ffb	20 f6 14	jsr $14f6		jsr	deviceHandler
.3ffe	60		rts				rts
.3fff	c9 ff		cmp #$ff	_dtpInk:cmp 	#255 						; e.g. herhe, get ink and set it
.4001	f0 08		beq $400b			beq 	_dtpCR						; except $FF => CRLF
.4003	29 07		and #$07			and 	#7
.4005	a2 08		ldx #$08		ldx	#8
.4007	20 f6 14	jsr $14f6		jsr	deviceHandler
.400a	60		rts				rts
.400b					_dtpCR:
.400b	a2 06		ldx #$06		ldx	#6
.400d	20 f6 14	jsr $14f6		jsr	deviceHandler
.4010	60		rts				rts
.4011					DTSwitchMode:
.4011	cd 10 0d	cmp $0d10			cmp 	LastCharacterClass 			; if changed, update character class
.4014	f0 04		beq $401a			beq 	_DTSMNoChange
.4016	8d 10 0d	sta $0d10			sta 	LastCharacterClass
.4019					_DTSMExit:
.4019	60		rts				rts
.401a					_DTSMNoChange:
.401a	c9 01		cmp #$01			cmp 	#1 							; if didn't change to punctuation, two identifiers so we
.401c	f0 fb		beq $4019			beq 	_DTSMExit 					; need a space.
.401e	a9 20		lda #$20			lda 	#" "
.4020	4c d0 3f	jmp $3fd0			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.4023					DTIdentifier:
.4023	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.4025	20 11 40	jsr $4011			jsr 	DTSwitchMode
.4028	a9 87		lda #$87			lda 	#LTYIdentifier
.402a	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.402d					_DTILoop:
.402d	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.402f	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.4031	d0 02		bne $4035			bne 	_DTINotUS
.4033	a9 5f		lda #$5f			lda 	#"_"
.4035					_DTINotUS:
.4035	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.4038	c8		iny				iny
.4039	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.403b	c9 3a		cmp #$3a			cmp 	#$3A
.403d	90 ee		bcc $402d			bcc 	_DTILoop
.403f	c8		iny				iny
.4040	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.4042	f0 25		beq $4069			beq 	_DTIExit 					; no postfix.
.4044	48		pha				pha
.4045	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.4047	8d 10 0d	sta $0d10			sta 	LastCharacterClass
.404a	a9 82		lda #$82			lda 	#LTYPunctuation
.404c	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.404f	68		pla				pla
.4050	c9 3b		cmp #$3b			cmp 	#$3B
.4052	f0 10		beq $4064			beq 	_DTIArray
.4054	4a		lsr a				lsr 	a 							; array flag in C
.4055	08		php				php
.4056	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.4058	f0 02		beq $405c			beq 	_DTIDollar
.405a	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.405c					_DTIDollar:
.405c	49 24		eor #$24			eor 	#"$"
.405e	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.4061	28		plp				plp
.4062	90 05		bcc $4069			bcc 	_DTIExit
.4064					_DTIArray:
.4064	a9 28		lda #$28			lda 	#"("
.4066	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.4069					_DTIExit:
.4069	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.406a					DTDecodeToken:
.406a	a2 00		ldx #$00			ldx 	#0 							; table number to use
.406c	b1 28		lda ($28),y			lda 	(codePtr),y
.406e	c9 84		cmp #$84			cmp 	#$84
.4070	b0 05		bcs $4077			bcs 	_DTNotShift
.4072	29 03		and #$03			and 	#3 							; get the shift 1..3
.4074	0a		asl a				asl 	a 							; put 2 x in X
.4075	aa		tax				tax
.4076	c8		iny				iny
.4077					_DTNotShift:
.4077	bd 79 43	lda $4379,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.407a	85 2a		sta $2a				sta 	temp0 						; point into temp0
.407c	bd 7a 43	lda $437a,x			lda 	TokenTableAddress+1,x
.407f	85 2b		sta $2b				sta 	temp0+1
.4081	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.4083	c8		iny				iny 								; consume it.
.4084	aa		tax				tax
.4085	98		tya				tya
.4086	48		pha				pha
.4087					_DTFindText:
.4087	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.4089	f0 11		beq $409c			beq 	_DTFoundText
.408b	ca		dex				dex
.408c	a0 00		ldy #$00			ldy 	#0 							; add length+1 to temp0
.408e	38		sec				sec
.408f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4091	65 2a		adc $2a				adc 	temp0
.4093	85 2a		sta $2a				sta 	temp0
.4095	90 f0		bcc $4087			bcc 	_DTFindText
.4097	e6 2b		inc $2b				inc 	temp0+1
.4099	4c 87 40	jmp $4087			jmp 	_DTFindText
.409c					_DTFoundText:
.409c	a0 01		ldy #$01			ldy 	#1 							; get first character
.409e	b1 2a		lda ($2a),y			lda 	(temp0),y
.40a0	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.40a2	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.40a4	90 11		bcc $40b7			bcc 	_DTIsPunctuation
.40a6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40a8	b0 0d		bcs $40b7			bcs 	_DTIsPunctuation
.40aa	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.40ac	20 11 40	jsr $4011			jsr 	DTSwitchMode
.40af	a9 83		lda #$83			lda 	#LTYKeyword
.40b1	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.40b4	4c c1 40	jmp $40c1			jmp 	_DTPrint
.40b7					_DTIsPunctuation:
.40b7	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.40b9	20 11 40	jsr $4011			jsr 	DTSwitchMode
.40bc	a9 82		lda #$82			lda 	#LTYPunctuation
.40be	20 d0 3f	jsr $3fd0			jsr 	ListOutputCharacter
.40c1					_DTPrint:
.40c1	a9 01		lda #$01			lda 	#1 							; fix case.
.40c3	20 a6 3f	jsr $3fa6			jsr 	DTPrintLengthPrefix 		; print it out.
.40c6	a0 00		ldy #$00			ldy 	#0
.40c8	b1 2a		lda ($2a),y			lda 	(temp0),y
.40ca	a8		tay				tay
.40cb	b1 2a		lda ($2a),y			lda 	(temp0),y
.40cd	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.40cf	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.40d1	90 04		bcc $40d7			bcc 	_DTIsNowPunctuation
.40d3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.40d5	90 05		bcc $40dc			bcc 	_DTPExit
.40d7					_DTIsNowPunctuation:
.40d7	a9 01		lda #$01			lda 	#1
.40d9	8d 10 0d	sta $0d10			sta		LastCharacterClass
.40dc					_DTPExit:
.40dc	68		pla				pla
.40dd	a8		tay				tay
.40de	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0d13					currentSet:
>0d13							.fill 	1
.40df					TokenSearch:
.40df	8a		txa				txa
.40e0	48		pha				pha
.40e1	98		tya				tya
.40e2	48		pha				pha
.40e3	a9 00		lda #$00			lda 	#0
.40e5	8d 13 0d	sta $0d13			sta 	currentSet
.40e8					_TSLoop:
.40e8	ad 13 0d	lda $0d13			lda 	currentSet 					; 2 x currentset in X
.40eb	0a		asl a				asl 	a
.40ec	aa		tax				tax
.40ed	bd 79 43	lda $4379,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.40f0	85 2a		sta $2a				sta 	temp0
.40f2	bd 7a 43	lda $437a,x			lda 	TokenTableAddress+1,x
.40f5	85 2b		sta $2b				sta 	temp0+1
.40f7	20 1e 41	jsr $411e			jsr 	TokenSearchOne 				; search one table
.40fa	b0 0d		bcs $4109			bcs 	_TSFound 					; found a token.
.40fc	ee 13 0d	inc $0d13			inc 	currentSet 					; next set
.40ff	ad 13 0d	lda $0d13			lda 	currentSet
.4102	c9 04		cmp #$04			cmp 	#4
.4104	d0 e2		bne $40e8			bne 	_TSLoop 					; back if not done all four.
.4106	18		clc				clc 								; clear carry and exit
.4107	90 10		bcc $4119			bcc 	_TSExit
.4109					_TSFound:
.4109	48		pha				pha 								; save token
.410a	ad 13 0d	lda $0d13			lda 	currentSet					; if set zero no shift
.410d	f0 05		beq $4114			beq 	_TSNoShift
.410f	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.4111	20 cf 41	jsr $41cf			jsr 	TokenWrite
.4114					_TSNoShift:
.4114	68		pla				pla 								; get token back
.4115	20 cf 41	jsr $41cf			jsr 	TokenWrite 					; write it
.4118	38		sec				sec 								; carry set indicating success
.4119					_TSExit:
.4119	68		pla				pla
.411a	a8		tay				tay
.411b	68		pla				pla
.411c	aa		tax				tax
.411d	60		rts				rts
.411e					TokenSearchOne:
.411e	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.4120					_TSOLoop:
.4120	a0 00		ldy #$00			ldy 	#0
.4122	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.4124	f0 26		beq $414c			beq 	_TSOFail 					; if zero, end of table
.4126	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.4129	f0 11		beq $413c			beq 	_TSOCheckText
.412b					_TSONext:
.412b	e8		inx				inx 								; bump token
.412c	a0 00		ldy #$00			ldy 	#0							; get length
.412e	b1 2a		lda ($2a),y			lda 	(temp0),y
.4130	38		sec				sec
.4131	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.4133	85 2a		sta $2a				sta 	temp0
.4135	90 e9		bcc $4120			bcc 	_TSOLoop
.4137	e6 2b		inc $2b				inc 	temp0+1
.4139	4c 20 41	jmp $4120			jmp 	_TSOLoop
.413c					_TSOCheckText:
.413c	a8		tay				tay 								; compare length downto 1.
.413d					_TSOCheckLoop:
.413d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.413f	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.4142	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.4144	d0 e5		bne $412b			bne 	_TSONext 					; different goto next.
.4146	88		dey				dey 								; do all
.4147	d0 f4		bne $413d			bne 	_TSOCheckLoop
.4149	8a		txa				txa 								; return token in A and carry set
.414a	38		sec				sec
.414b	60		rts				rts
.414c					_TSOFail:
.414c	18		clc				clc
.414d	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.414e					TokTest:
.414e	a2 ff		ldx #$ff				ldx 	#$FF
.4150	9a		txs					txs
.4151	a9 6e		lda #$6e			lda 	#(TokenText1) & $FF
.4153	85 28		sta $28				sta 	codePtr
.4155	a9 41		lda #$41			lda 	#(TokenText1) >> 8
.4157	85 29		sta $29				sta 	1+(codePtr)
.4159	20 6e 41	jsr $416e				jsr 	Tokenise
.415c	a2 00		ldx #$00	TokStop:	ldx 	#0 					; compare vs precalculated result
.415e	bd 6e 41	lda $416e,x	_TokCheck:	lda 	TokenBytes1,x
.4161	dd 17 0d	cmp $0d17,x				cmp 	tokenBuffer,x
.4164	d0 fe		bne $4164	_TokFail:	bne 	_TokFail	 		; error.
.4166	e8		inx					inx
.4167	c9 80		cmp #$80				cmp 	#$80
.4169	d0 f3		bne $415e				bne 	_TokCheck
.416b	4c ff ff	jmp $ffff				jmp 	$FFFF 				; successfully tokenised then quit.

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.416e					TokenText1:
.416e					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0d14					tokenHeader:
>0d14							.fill 	3
.0d17					tokenBuffer:
>0d17							.fill 	256
.0e17					tokenBufferIndex:
>0e17							.fill 	1
.416e					Tokenise:
.416e	20 e8 41	jsr $41e8			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.4171					TokeniseASCIIZ:
.4171	20 f9 41	jsr $41f9			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.4174	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.4176	8d 17 0e	sta $0e17			sta 	tokenBufferIndex
.4179	a8		tay				tay 								; start pointer
.417a	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.417c	8d 17 0d	sta $0d17			sta 	tokenBuffer
.417f					_TokLoop:
.417f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.4181	f0 46		beq $41c9			beq 	_TokExit 					; if zero, then exit.
.4183	c8		iny				iny 								; skip over spaces.
.4184	c9 20		cmp #$20			cmp 	#" "
.4186	f0 f7		beq $417f			beq 	_TokLoop
.4188	88		dey				dey 								; point back to character.
.4189	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.418b	f0 18		beq $41a5			beq 	_TokHexConst
.418d	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.418f	f0 23		beq $41b4			beq 	_TokQString
.4191	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.4193	b0 26		bcs $41bb			bcs 	_TokPunctuation
.4195	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.4197	b0 29		bcs $41c2			bcs 	_TokIdentifier
.4199	c9 3a		cmp #$3a			cmp 	#"9"+1
.419b	b0 1e		bcs $41bb			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.419d	c9 30		cmp #$30			cmp 	#"0"
.419f	90 1a		bcc $41bb			bcc 	_TokPunctuation 			; < 0, punctuation.
.41a1	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.41a3	d0 08		bne $41ad			bne 	_TokConst
.41a5					_TokHexConst:
.41a5	c8		iny				iny									; consume token.
.41a6	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.41a8	20 cf 41	jsr $41cf			jsr 	TokenWrite
.41ab	a9 10		lda #$10			lda 	#16
.41ad					_TokConst:
.41ad	20 b7 42	jsr $42b7			jsr 	TokeniseInteger
.41b0	b0 cd		bcs $417f			bcs 	_TokLoop
.41b2	90 18		bcc $41cc			bcc 	_TokFail
.41b4					_TokQString:
.41b4	20 4d 43	jsr $434d			jsr 	TokeniseString
.41b7	b0 c6		bcs $417f			bcs 	_TokLoop
.41b9	90 11		bcc $41cc			bcc 	_TokFail
.41bb					_TokPunctuation:
.41bb	20 2c 43	jsr $432c			jsr 	TokenisePunctuation
.41be	b0 bf		bcs $417f			bcs 	_TokLoop
.41c0	90 0a		bcc $41cc			bcc 	_TokFail
.41c2					_TokIdentifier:
.41c2	20 28 42	jsr $4228			jsr 	TokeniseIdentifier
.41c5	b0 b8		bcs $417f			bcs 	_TokLoop
.41c7	90 03		bcc $41cc			bcc 	_TokFail
.41c9					_TokExit:
.41c9	a9 01		lda #$01			lda 	#1
.41cb	60		rts				rts
.41cc					_TokFail:
.41cc	a9 00		lda #$00			lda 	#0
.41ce	60		rts				rts
.41cf					TokenWrite:
.41cf	85 32		sta $32				sta 	tempShort 					; save XA
.41d1	48		pha				pha
.41d2	8a		txa				txa
.41d3	48		pha				pha
.41d4	a5 32		lda $32				lda 	tempShort
.41d6	ae 17 0e	ldx $0e17			ldx 	tokenBufferIndex 			; geet index
.41d9	9d 17 0d	sta $0d17,x			sta 	tokenBuffer,x 				; write byte to buffer
.41dc	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.41de	9d 18 0d	sta $0d18,x			sta 	tokenBuffer+1,x
.41e1	ee 17 0e	inc $0e17			inc 	tokenBufferIndex 			; bump index
.41e4	68		pla				pla
.41e5	aa		tax				tax
.41e6	68		pla				pla
.41e7	60		rts				rts
.41e8					TokeniseMakeASCIIZ:
.41e8	a0 00		ldy #$00			ldy 	#0							; get length of string.
.41ea	b1 28		lda ($28),y			lda 	(codePtr),y
.41ec	a8		tay				tay
.41ed	c8		iny				iny 								; +1, the NULL goes here.
.41ee	a9 00		lda #$00			lda 	#0
.41f0	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.41f2	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.41f4	d0 02		bne $41f8			bne 	_TMKAExit
.41f6	e6 29		inc $29				inc 	codePtr+1
.41f8					_TMKAExit:
.41f8	60		rts				rts
.41f9					TokeniseFixCase:
.41f9	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.41fb	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.41fd					_TFCFlipQ:
.41fd	8a		txa				txa
.41fe	49 01		eor #$01			eor 	#1
.4200	aa		tax				tax
.4201					_TFCLoop:
.4201	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.4203	f0 22		beq $4227			beq 	_TFCExit 					; if zero exit.
.4205	c9 20		cmp #$20			cmp 	#32 						; if control
.4207	90 1a		bcc $4223			bcc 	_TFCControl
.4209	c8		iny				iny 								; preconsume
.420a	c9 22		cmp #$22			cmp 	#'"'
.420c	f0 ef		beq $41fd			beq 	_TFCFlipQ
.420e	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.4210	90 ef		bcc $4201			bcc 	_TFCLoop
.4212	c9 7b		cmp #$7b			cmp 	#"z"+1
.4214	b0 eb		bcs $4201			bcs 	_TFCLoop
.4216	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.4218	d0 e7		bne $4201			bne 	_TFCLoop
.421a	88		dey				dey
.421b	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.421d					_TFCWrite:
.421d	91 28		sta ($28),y			sta 	(codePtr),y
.421f	c8		iny				iny
.4220	4c 01 42	jmp $4201			jmp 	_TFCLoop
.4223					_TFCControl:
.4223	a9 20		lda #$20			lda 	#" "
.4225	d0 f6		bne $421d			bne 	_TFCWrite
.4227					_TFCExit:
.4227	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.4228					TokeniseIdentifier:
.4228	a2 00		ldx #$00			ldx 	#0
.422a					_TICopyID:
.422a	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.422c	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.422e	f0 16		beq $4246			beq 	_TICopyUnderscore
.4230	c9 2e		cmp #$2e			cmp 	#"."
.4232	f0 14		beq $4248			beq 	_TICopyIn
.4234	c9 30		cmp #$30			cmp 	#"0"
.4236	90 1b		bcc $4253			bcc 	_TIEndCopy
.4238	c9 3a		cmp #$3a			cmp 	#"9"+1
.423a	90 0c		bcc $4248			bcc 	_TICopyIn
.423c	c9 41		cmp #$41			cmp 	#"A"
.423e	90 13		bcc $4253			bcc 	_TIEndCopy
.4240	c9 5b		cmp #$5b			cmp 	#"Z"+1
.4242	b0 0f		bcs $4253			bcs		_TIEndCopy
.4244	90 02		bcc $4248			bcc 	_TICopyIn
.4246					_TICopyUnderScore:
.4246	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.4248					_TICopyIn:
.4248	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.4249	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.424c	8e cf 0a	stx $0acf			stx 	convertBuffer
.424f	c8		iny				iny 								; next character
.4250	4c 2a 42	jmp $422a			jmp 	_TICopyID 					; loop round
.4253					_TIEndCopy:
.4253	a9 24		lda #$24			lda 	#"$"
.4255	20 aa 42	jsr $42aa			jsr 	TIDCheckCopy
.4258	a9 23		lda #$23			lda 	#"#"
.425a	20 aa 42	jsr $42aa			jsr 	TIDCheckCopy
.425d	a9 28		lda #$28			lda 	#"("
.425f	20 aa 42	jsr $42aa			jsr 	TIDCheckCopy
.4262	20 df 40	jsr $40df			jsr 	TokenSearch 				; is it a token
.4265	b0 41		bcs $42a8			bcs 	_TIExit 					; if so, then exit.
.4267	98		tya				tya
.4268	48		pha				pha
.4269	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.426b	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.426e	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.4271	c9 28		cmp #$28			cmp 	#"("
.4273	d0 02		bne $4277			bne 	_TINotArray
.4275	ca		dex				dex 								; yes, remove it and convert to array.
.4276	c8		iny				iny
.4277					_TINotArray:
.4277	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.427a	c9 24		cmp #$24			cmp 	#"$"
.427c	d0 03		bne $4281			bne 	_TINotString
.427e	ca		dex				dex
.427f	c8		iny				iny
.4280	c8		iny				iny
.4281					_TINotString:
.4281	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.4284	c9 23		cmp #$23			cmp 	#"#"
.4286	d0 05		bne $428d			bne 	_TINotFloat
.4288	ca		dex				dex
.4289	c8		iny				iny
.428a	c8		iny				iny
.428b	c8		iny				iny
.428c	c8		iny				iny
.428d					_TINotFloat:
.428d	e8		inx				inx 								; write end marker for identifier.
.428e	98		tya				tya
.428f	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.4292	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.4295	a2 01		ldx #$01			ldx 	#1
.4297					_TIOutput:
.4297	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.429a	29 3f		and #$3f			and 	#$3F
.429c	48		pha				pha
.429d	20 cf 41	jsr $41cf			jsr 	TokenWrite
.42a0	e8		inx				inx
.42a1	68		pla				pla
.42a2	c9 3a		cmp #$3a			cmp 	#$3A
.42a4	90 f1		bcc $4297			bcc 	_TIOutput
.42a6	68		pla				pla
.42a7	a8		tay				tay
.42a8					_TIExit:
.42a8	38		sec				sec 								; this can't fail.
.42a9	60		rts				rts
.42aa					TIDCheckCopy:
.42aa	d1 28		cmp ($28),y			cmp 	(codePtr),y
.42ac	d0 08		bne $42b6			bne 	_TIDCCExit
.42ae	e8		inx				inx
.42af	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.42b2	8e cf 0a	stx $0acf			stx 	convertBuffer
.42b5	c8		iny				iny
.42b6					_TIDCCExit:
.42b6	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.42b7					TokeniseInteger:
.42b7	85 2c		sta $2c				sta 	temp1 						; save base
.42b9	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.42bb	8e cf 0a	stx $0acf			stx 	convertBuffer
.42be					_TIGetChars:
.42be	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.42c0	c9 30		cmp #$30			cmp 	#"0"
.42c2	90 1f		bcc $42e3			bcc 	_TIEndGet
.42c4	c9 3a		cmp #$3a			cmp 	#"9"+1
.42c6	90 10		bcc $42d8			bcc 	_TIHaveChar
.42c8	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.42ca	c9 0a		cmp #$0a			cmp 	#10
.42cc	f0 15		beq $42e3			beq 	_TIEndGet
.42ce	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.42d0	c9 41		cmp #$41			cmp 	#"A"
.42d2	90 0f		bcc $42e3			bcc 	_TIEndGet
.42d4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.42d6	b0 0b		bcs $42e3			bcs 	_TIEndGet
.42d8					_TIHaveChar:
.42d8	e8		inx				inx 								; write into buffer.
.42d9	8e cf 0a	stx $0acf			stx 	convertBuffer
.42dc	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.42df	c8		iny				iny 								; next char
.42e0	4c be 42	jmp $42be			jmp 	_TIGetChars
.42e3					_TIEndGet:
.42e3	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.42e5	f0 1c		beq $4303			beq 	_TIFail
.42e7	98		tya				tya
.42e8	48		pha				pha
.42e9	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.42eb	85 2a		sta $2a				sta 	temp0
.42ed	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.42ef	85 2b		sta $2b				sta 	1+(temp0)
.42f1	a9 00		lda #$00			lda 	#0 							; stack level 0
.42f3	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.42f5	a2 1a		ldx #$1a		ldx	#26
.42f7	20 ea 3b	jsr $3bea		jsr	mainHandler
.42fa	68		pla				pla
.42fb	a8		tay				tay
.42fc	90 05		bcc $4303			bcc 	_TIFail 					; didn't convert.
.42fe	20 05 43	jsr $4305			jsr 	TIRecursiveOut 				; recursive output ?
.4301	38		sec				sec
.4302	60		rts				rts
.4303					_TIFail:
.4303	18		clc				clc
.4304	60		rts				rts
.4305					TIRecursiveOut:
.4305	a5 98		lda $98				lda 	esInt0 						; get value to output after possible recursion
.4307	29 3f		and #$3f			and 	#$3F
.4309	09 40		ora #$40			ora 	#$40
.430b	48		pha				pha
.430c	a5 98		lda $98				lda 	esInt0 						; are we recursing ?
.430e	29 c0		and #$c0			and 	#$C0
.4310	05 a0		ora $a0				ora 	esInt1
.4312	05 a8		ora $a8				ora 	esInt2
.4314	05 b0		ora $b0				ora 	esInt3
.4316	f0 10		beq $4328			beq 	_TIRONoRecursion
.4318	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.431a					_TIROShift:
.431a	46 b0		lsr $b0				lsr 	esInt3
.431c	66 a8		ror $a8				ror 	esInt2
.431e	66 a0		ror $a0				ror 	esInt1
.4320	66 98		ror $98				ror 	esInt0
.4322	ca		dex				dex
.4323	d0 f5		bne $431a			bne 	_TIROShift
.4325	20 05 43	jsr $4305			jsr 	TIRecursiveOut 				; call recursively
.4328					_TIRONoRecursion:
.4328	68		pla				pla 								; pull the old bit.
.4329	4c cf 41	jmp $41cf			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.432c					TokenisePunctuation:
.432c	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.432e	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.4331	c8		iny				iny
.4332	b1 28		lda ($28),y			lda 	(codePtr),y
.4334	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.4337	c8		iny				iny 								; Y is +2
.4338	a9 02		lda #$02			lda 	#2 							; 2 character string.
.433a	8d cf 0a	sta $0acf			sta 	convertBuffer
.433d	20 df 40	jsr $40df			jsr 	TokenSearch 				; search for that token.
.4340	b0 0a		bcs $434c			bcs 	_TIFound
.4342	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.4345	88		dey				dey 								; Y is now +1
.4346	20 df 40	jsr $40df			jsr 	TokenSearch 				; search for that token.
.4349	b0 01		bcs $434c			bcs 	_TIFound
.434b	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.434c					_TIFound:
.434c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.434d					TokeniseString:
.434d	c8		iny				iny 								; skip opening quote
.434e	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.4350	84 2a		sty $2a				sty 	temp0 						; save start.
.4352					_TSGetLength:
.4352	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.4354	f0 21		beq $4377			beq 	_TSFail						; end of line, fail
.4356	c8		iny				iny
.4357	e8		inx				inx
.4358	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.435a	d0 f6		bne $4352			bne 	_TSGetLength
.435c	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.435e	20 cf 41	jsr $41cf			jsr 	TokenWrite
.4361	8a		txa				txa 								; output length
.4362	20 cf 41	jsr $41cf			jsr 	TokenWrite
.4365	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.4367	e0 00		cpx #$00			cpx 	#0 							; check ended
.4369	f0 09		beq $4374			beq 	_TSExit
.436b					_TSOutput:
.436b	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.436d	20 cf 41	jsr $41cf			jsr 	TokenWrite
.4370	c8		iny				iny
.4371	ca		dex				dex
.4372	d0 f7		bne $436b			bne 	_TSOutput
.4374					_TSExit:
.4374	c8		iny				iny 								; skip ending quote
.4375	38		sec				sec 								; return CS.
.4376	60		rts				rts
.4377					_TSFail:
.4377	18		clc				clc
.4378	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.4379					TokenTableAddress:
>4379	81 43						.word 	Group0Text
>437b	4f 45						.word 	Group1Text
>437d	9c 46						.word 	Group2Text
>437f	e6 46						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.4381					Group0Text:
>4381	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>4385	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>4388	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>438c	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>438f	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>4392	01 be					.byte $01,$be                          ; $8b >
>4394	01 bc					.byte $01,$bc                          ; $8c <
>4396	01 bd					.byte $01,$bd                          ; $8d =
>4398	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>439b	01 ab					.byte $01,$ab                          ; $8f +
>439d	01 ad					.byte $01,$ad                          ; $90 -
>439f	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>43a2	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>43a5	01 aa					.byte $01,$aa                          ; $93 *
>43a7	01 af					.byte $01,$af                          ; $94 /
>43a9	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>43ad	01 de					.byte $01,$de                          ; $96 ^
>43af	01 a1					.byte $01,$a1                          ; $97 !
>43b1	01 bf					.byte $01,$bf                          ; $98 ?
>43b3	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>43ba	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>43c0	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>43c4	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>43c7	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>43cf	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>43d5	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>43da	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>43df	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>43e4	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>43ea	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>43f2	01 a8					.byte $01,$a8                          ; $a4 (
>43f4	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>43f9	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>43fe	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>4403	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>440b	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>4410	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>4415	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>441b	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>4420	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>4425	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>442a	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>4431	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>4438	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>443d	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>4444	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>444b	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>4451	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>4458	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>445e	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>4466	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>446c	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>4471	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>4477	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>447d	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>4483	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>4488	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>448d	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>4494	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>449b	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>44a3	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>44ab	01 c0					.byte $01,$c0                          ; $c3 @
>44ad	01 fe					.byte $01,$fe                          ; $c4 ~
>44af	01 a6					.byte $01,$a6                          ; $c5 &
>44b1	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>44b7	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>44bf	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>44c3	01 a9					.byte $01,$a9                          ; $c9 )
>44c5	01 ba					.byte $01,$ba                          ; $ca :
>44c7	01 ac					.byte $01,$ac                          ; $cb ,
>44c9	01 bb					.byte $01,$bb                          ; $cc ;
>44cb	01 a7					.byte $01,$a7                          ; $cd '
>44cd	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>44d0	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>44d5	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>44da	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>44e0	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>44e4	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>44e8	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>44ec	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>44f2	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>44f7	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>44fb	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>4501	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $d9 data
>4506	05 49 4d 41 47 c5			.byte $05,$49,$4d,$41,$47,$c5          ; $da image
>450c	02 41 d4				.byte $02,$41,$d4                      ; $db at
>450f	04 46 4c 49 d0				.byte $04,$46,$4c,$49,$d0              ; $dc flip
>4514	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>451b	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>4520	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>4525	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>452a	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>452e	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>4534	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>4538	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>453f	01 ae					.byte $01,$ae                          ; $e5 .
>4541	04 46 52 4f cd				.byte $04,$46,$52,$4f,$cd              ; $e6 from
>4546	01 a3					.byte $01,$a3                          ; $e7 #
>4548	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $e8 clear
>454e	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.454f					Group1Text:
>454f	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $86 load
>4554	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $87 save
>4559	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $88 list
>455e	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $89 new
>4562	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $8a break
>4568	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>456c	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>4571	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>4579	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>457d	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>4582	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>4587	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $91 goto
>458c	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $92 gosub
>4592	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $93 return
>4599	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $94 ora
>459d	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $95 (and)
>45a3	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $96 eor
>45a7	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $97 adc
>45ab	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $98 sta
>45af	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $99 lda
>45b3	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $9a cmp
>45b7	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $9b sbc
>45bb	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $9c asl
>45bf	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9d rol
>45c3	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9e lsr
>45c7	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9f ror
>45cb	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $a0 stx
>45cf	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $a1 ldx
>45d3	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $a2 dec
>45d7	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a3 inc
>45db	03 53 54 da				.byte $03,$53,$54,$da                  ; $a4 stz
>45df	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a5 bit
>45e3	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a6 sty
>45e7	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a7 ldy
>45eb	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a8 cpy
>45ef	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a9 cpx
>45f3	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $aa tsb
>45f7	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $ab trb
>45fb	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $ac jsr
>45ff	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $ad jmp
>4603	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ae bpl
>4607	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $af bmi
>460b	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $b0 bvc
>460f	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $b1 bvs
>4613	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $b2 bcc
>4617	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b3 bcs
>461b	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b4 bne
>461f	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b5 beq
>4623	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b6 bra
>4627	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b7 brk
>462b	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b8 php
>462f	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b9 clc
>4633	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $ba plp
>4637	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $bb sec
>463b	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $bc rti
>463f	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $bd pha
>4643	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $be cli
>4647	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bf phy
>464b	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $c0 rts
>464f	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $c1 pla
>4653	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $c2 sei
>4657	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c3 ply
>465b	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c4 dey
>465f	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c5 txa
>4663	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c6 tya
>4667	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c7 txs
>466b	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c8 tay
>466f	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c9 tax
>4673	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $ca clv
>4677	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $cb tsx
>467b	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $cc iny
>467f	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $cd dex
>4683	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $ce cld
>4687	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cf phx
>468b	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $d0 inx
>468f	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $d1 nop
>4693	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $d2 sed
>4697	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d3 plx
>469b	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.469c					Group2Text:
>469c	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>46a2	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>46a8	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>46ae	04 4d 4f 44 c5				.byte $04,$4d,$4f,$44,$c5              ; $89 mode
>46b3	07 50 41 4c 45 54 54 c5			.byte $07,$50,$41,$4c,$45,$54,$54,$c5  ; $8a palette
>46bb	06 53 50 52 49 54 c5			.byte $06,$53,$50,$52,$49,$54,$c5      ; $8b sprite
>46c2	03 43 4c c7				.byte $03,$43,$4c,$c7                  ; $8c clg
>46c6	04 52 45 43 d4				.byte $04,$52,$45,$43,$d4              ; $8d rect
>46cb	05 46 52 41 4d c5			.byte $05,$46,$52,$41,$4d,$c5          ; $8e frame
>46d1	04 44 52 41 d7				.byte $04,$44,$52,$41,$d7              ; $8f draw
>46d6	04 54 45 58 d4				.byte $04,$54,$45,$58,$d4              ; $90 text
>46db	04 50 4c 4f d4				.byte $04,$50,$4c,$4f,$d4              ; $91 plot
>46e0	04 4c 49 4e c5				.byte $04,$4c,$49,$4e,$c5              ; $92 line
>46e5	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.46e6					Group3Text:
>46e6	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>46ed	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>46f4	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$58,$a8 ; $88 sprite.x(
>46fc	58 a8
>46fe	09 53 50 52 49 54 45 2e			.byte $09,$53,$50,$52,$49,$54,$45,$2e,$59,$a8 ; $89 sprite.y(
>4706	59 a8
>4708	04 48 49 54 a8				.byte $04,$48,$49,$54,$a8              ; $8a hit(
>470d	06 4a 4f 59 2e 58 a8			.byte $06,$4a,$4f,$59,$2e,$58,$a8      ; $8b joy.x(
>4714	06 4a 4f 59 2e 59 a8			.byte $06,$4a,$4f,$59,$2e,$59,$a8      ; $8c joy.y(
>471b	06 4a 4f 59 2e 42 a8			.byte $06,$4a,$4f,$59,$2e,$42,$a8      ; $8d joy.b(
>4722	06 43 4c 4f 43 4b a8			.byte $06,$43,$4c,$4f,$43,$4b,$a8      ; $8e clock(
>4729	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.472a					tokeniserHandler:
.472a	7c 2d 47	jmp ($472d,x)			jmp 	(tokeniserVectors,x)
.472d					tokeniserVectors:
>472d	39 47					.word _DummyControlHandler ; index 0
>472f	c9 3e					.word Detokenise           ; index 2
>4731	bd 3e					.word ListLine             ; index 4
>4733	4e 41					.word TokTest              ; index 6
>4735	6e 41					.word Tokenise             ; index 8
>4737	71 41					.word TokeniseASCIIZ       ; index 10
.4739					_DummyControlHandler:
.4739	60		rts			rts

;******  Return to file: basic.asm

.473a					section_end_tokeniser:
.473a					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/array/access.asm

.473a					AccessArray:
.473a	8a		txa				txa
.473b	48		pha				pha
.473c	e8		inx				inx
.473d	20 06 48	jsr $4806			jsr 	GetArrayDimensions 			; get the array dimensions one up from here.
.4740	68		pla				pla
.4741	aa		tax				tax
.4742	b5 98		lda $98,x			lda 	esInt0,x 					; restore address to follow in temp0.
.4744	85 2a		sta $2a				sta 	temp0
.4746	b5 a0		lda $a0,x			lda 	esInt1,x
.4748	85 2b		sta $2b				sta 	temp0+1
.474a	8a		txa				txa
.474b	48		pha				pha
.474c	98		tya				tya
.474d	48		pha				pha
.474e					_AAFollow:
.474e	a0 00		ldy #$00			ldy 	#0
.4750	b1 2a		lda ($2a),y			lda 	(temp0),y
.4752	48		pha				pha
.4753	c8		iny				iny
.4754	b1 2a		lda ($2a),y			lda 	(temp0),y
.4756	85 2b		sta $2b				sta 	temp0+1
.4758	68		pla				pla
.4759	85 2a		sta $2a				sta 	temp0
.475b	e8		inx				inx 								; advance to next stack slot.
.475c	a0 00		ldy #$00			ldy 	#0
.475e	b1 2a		lda ($2a),y			lda 	(temp0),y 					; compare max index vs required index
.4760	d5 98		cmp $98,x			cmp 	esInt0,x
.4762	c8		iny				iny
.4763	b1 2a		lda ($2a),y			lda 	(temp0),y 					; drop bit 7 of the size, indicates follow.
.4765	85 2c		sta $2c				sta 	temp1 						; save the size in temp1 for later use.
.4767	29 7f		and #$7f			and 	#$7F
.4769	f5 a0		sbc $a0,x			sbc 	esInt1,x
.476b	90 50		bcc $47bd			bcc 	_AABadIndex 				; failed on index if max index < required.
.476d	18		clc				clc
.476e	a5 2a		lda $2a				lda 	temp0
.4770	69 02		adc #$02			adc 	#2
.4772	85 2a		sta $2a				sta 	temp0
.4774	90 02		bcc $4778			bcc 	_AANoCarry
.4776	e6 2b		inc $2b				inc 	temp0+1
.4778					_AANoCarry:
.4778	b5 98		lda $98,x			lda 	esInt0,x
.477a	85 2e		sta $2e				sta 	temp2
.477c	b5 a0		lda $a0,x			lda 	esInt1,x
.477e	85 2f		sta $2f				sta 	temp2+1
.4780	ac 1a 0e	ldy $0e1a			ldy 	varType
.4783	b9 60 48	lda $4860,y			lda 	CAActualSize-$3A,y
.4786	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4788	30 02		bmi $478c			bmi 	_AANotPointer
.478a	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.478c					_AANotPointer:
.478c	20 0a 49	jsr $490a			jsr 	MultiplyTemp2ByA 			; multiply the index by the data size, in temp2.
.478f	18		clc				clc
.4790	a5 2a		lda $2a				lda 	temp0
.4792	65 2e		adc $2e				adc 	temp2
.4794	85 2a		sta $2a				sta 	temp0
.4796	a5 2b		lda $2b				lda 	temp0+1
.4798	65 2f		adc $2f				adc 	temp2+1
.479a	85 2b		sta $2b				sta 	temp0+1
.479c	b5 91		lda $91,x			lda 	esType+1,x
.479e	30 07		bmi $47a7			bmi 	_AAUsedAllIndices
.47a0	a5 2c		lda $2c				lda 	temp1 						; check if this is a pointer array e.g. there are subarrays
.47a2	10 14		bpl $47b8			bpl 	_AABadDepth 				; no, too many indexes.
.47a4	4c 4e 47	jmp $474e			jmp 	_AAFollow 					; otherwise follow them.
.47a7					_AAUsedAllIndices:
.47a7	a5 2c		lda $2c				lda 	temp1 						; get original high length byte.
.47a9	30 0d		bmi $47b8			bmi 	_AABadDepth 				; if -ve then this is an array of pointers.
.47ab	68		pla				pla
.47ac	a8		tay				tay
.47ad	68		pla				pla
.47ae	aa		tax				tax
.47af	a5 2a		lda $2a				lda 	temp0 						; copy address of array element to stack,x
.47b1	95 98		sta $98,x			sta 	esInt0,x
.47b3	a5 2b		lda $2b				lda 	temp0+1
.47b5	95 a0		sta $a0,x			sta 	esInt1,x
.47b7	60		rts				rts
.47b8					_AABadDepth:
.47b8	a2 1c		ldx #$1c			ldx 	#ErrorID_ArrayDepth
.47ba	20 18 15	jsr $1518		jsr	errorHandler
.47bd					_AABadIndex:
.47bd	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.47bf	20 18 15	jsr $1518		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/array/create.asm

.0e18					elementSize:
>0e18							.fill	 1
.47c2					CreateArray:
.47c2	20 99 49	jsr $4999			jsr 	AccessSetup 				; set up the basic stuff.
.47c5	ad 1a 0e	lda $0e1a			lda 	varType 					; is the variable type an array
.47c8	4a		lsr a				lsr 	a
.47c9	90 36		bcc $4801			bcc 	CANotArray 					; no, cause an error.
.47cb	20 a2 4a	jsr $4aa2			jsr 	FindVariable 				; does the variable exist already
.47ce	b0 2c		bcs $47fc			bcs 	CAFound 					; cannot redefine it.
.47d0	20 d6 49	jsr $49d6			jsr 	CreateVariable 				; create the variable entry.
.47d3	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.47d5	48		pha				pha
.47d6	a5 2b		lda $2b				lda 	temp0+1
.47d8	48		pha				pha
.47d9	a2 00		ldx #$00			ldx 	#0
.47db	20 06 48	jsr $4806			jsr 	GetArrayDimensions 			; get the array dimensions
.47de	a2 00		ldx #$00			ldx 	#0 							; create at level $00
.47e0	20 36 48	jsr $4836			jsr 	CreateArrayLevel 			; level to YA
.47e3	aa		tax				tax 								; level now in YX
.47e4	68		pla				pla 								; get address back to temp0 to write.
.47e5	85 2b		sta $2b				sta 	temp0+1
.47e7	68		pla				pla
.47e8	85 2a		sta $2a				sta 	temp0
.47ea	98		tya				tya 								; write YX there.
.47eb	a0 06		ldy #$06			ldy 	#6
.47ed	91 2a		sta ($2a),y			sta 	(temp0),y
.47ef	88		dey				dey
.47f0	8a		txa				txa
.47f1	91 2a		sta ($2a),y			sta 	(temp0),y
.47f3	ac 1b 0e	ldy $0e1b			ldy 	varEnd 						; restore Y and exit.
.47f6	60		rts				rts
.47f7					CASize:
.47f7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.47f9	20 18 15	jsr $1518		jsr	errorHandler
.47fc					CAFound:
.47fc	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.47fe	20 18 15	jsr $1518		jsr	errorHandler
.4801					CANotArray:
.4801	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.4803	20 18 15	jsr $1518		jsr	errorHandler
.4806					GetArrayDimensions:
.4806	ad 1a 0e	lda $0e1a			lda 	varType 					; push variable type on the stack.
.4809	48		pha				pha
.480a	ac 1b 0e	ldy $0e1b			ldy 	varEnd
.480d					_CAGetDimensions:
.480d	8a		txa				txa 								; get the next level
.480e	a2 0a		ldx #$0a		ldx	#10
.4810	20 ea 3b	jsr $3bea		jsr	mainHandler
.4813	aa		tax				tax
.4814	b5 a0		lda $a0,x			lda 	esInt1,x 					; index must be < 8192
.4816	29 e0		and #$e0			and 	#$E0
.4818	15 a8		ora $a8,x			ora 	esInt2,x
.481a	15 b0		ora $b0,x			ora 	esInt3,x
.481c	d0 d9		bne $47f7			bne 	CASize
.481e	e8		inx				inx 								; next level.
.481f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get/consume following character
.4821	c8		iny				iny
.4822	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; loop back if more dimensions
.4824	f0 e7		beq $480d			beq 	_CAGetDimensions
.4826	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; right bracket ?
.4828	d0 cd		bne $47f7			bne 	CASize
.482a	a9 ff		lda #$ff			lda 	#$FF 						; set the type past the end to $FF so we know how many
.482c	95 90		sta $90,x			sta 	esType,x 					; dimensions there are.
.482e	68		pla				pla 								; restore the variable type ($3A-$3F)
.482f	8d 1a 0e	sta $0e1a			sta 	varType
.4832	8c 1b 0e	sty $0e1b			sty 	varEnd 						; save exit Y value, after dimensions
.4835	60		rts				rts
.4836					CreateArrayLevel:
.4836	ac 1a 0e	ldy $0e1a			ldy 	varType
.4839	b9 60 48	lda $4860,y			lda 	CAActualSize-$3A,y
.483c	8d 18 0e	sta $0e18			sta 	elementSize 				; get element size this level.
.483f	b4 91		ldy $91,x			ldy 	esType+1,x 					; is it top level
.4841	30 05		bmi $4848			bmi 	_CANotPointer
.4843	a9 02		lda #$02			lda 	#2 							; array of pointers is 2.
.4845	8d 18 0e	sta $0e18			sta 	elementSize
.4848					_CANotPointer:
.4848	a5 35		lda $35				lda 	lowMemory 					; start creating at temp0, saving start on stack.
.484a	85 2a		sta $2a				sta 	temp0
.484c	48		pha				pha
.484d	a5 36		lda $36				lda 	lowMemory+1
.484f	85 2b		sta $2b				sta 	temp0+1
.4851	48		pha				pha
.4852	20 d3 48	jsr $48d3			jsr 	AllocateArraySpace 			; allocate space for all array stuff at this level.
.4855	a0 00		ldy #$00			ldy 	#0
.4857	b5 98		lda $98,x			lda 	esInt0,x
.4859	91 2a		sta ($2a),y			sta 	(temp0),y
.485b	c8		iny				iny
.485c	b5 a0		lda $a0,x			lda 	esInt1,x
.485e	91 2a		sta ($2a),y			sta 	(temp0),y
.4860	b5 91		lda $91,x			lda 	esType+1,x 					; do we have another level ?
.4862	30 06		bmi $486a			bmi 	_CALNotLast
.4864	b1 2a		lda ($2a),y			lda 	(temp0),y 					; set bit 7, indicates an array of pointers to other levels.
.4866	09 80		ora #$80			ora 	#$80
.4868	91 2a		sta ($2a),y			sta 	(temp0),y
.486a					_CALNotLast:
.486a	a9 02		lda #$02			lda 	#2
.486c	20 90 48	jsr $4890			jsr 	_CALAddTemp0
.486f	b5 98		lda $98,x			lda 	esInt0,x 					; copy stack:01 to stack:23 so we can use it to
.4871	95 a8		sta $a8,x			sta 	esInt2,x 					; count.
.4873	b5 a0		lda $a0,x			lda 	esInt1,x
.4875	95 b0		sta $b0,x			sta 	esInt3,x
.4877					_CALClear:
.4877	20 a0 48	jsr $48a0			jsr 	EraseOneElement
.487a	ad 18 0e	lda $0e18			lda 	elementSize 				; move to next element
.487d	20 90 48	jsr $4890			jsr 	_CALAddTemp0
.4880	b5 a8		lda $a8,x			lda 	esInt2,x 					; decrement counter
.4882	d0 02		bne $4886			bne 	_CALNoBorrow
.4884	d6 b0		dec $b0,x			dec 	esInt3,x
.4886					_CALNoBorrow:
.4886	d6 a8		dec $a8,x			dec 	esInt2,x
.4888	b5 b0		lda $b0,x			lda 	esInt3,x 					; loop back if >= 0 - we need +1 because indices
.488a	10 eb		bpl $4877			bpl 	_CALClear 					; start at 0 e.g. x(10) is actually 11 array entries.
.488c	68		pla				pla 								; restore the start of this into YA.
.488d	a8		tay				tay
.488e	68		pla				pla
.488f	60		rts				rts
.4890					_CALAddTemp0:
.4890	18		clc				clc
.4891	65 2a		adc $2a				adc 	temp0
.4893	85 2a		sta $2a				sta 	temp0
.4895	90 02		bcc $4899			bcc 	_CALANoCarry
.4897	e6 2b		inc $2b				inc 	temp0+1
.4899					_CALANoCarry:
.4899	60		rts				rts
.489a					CAActualSize:
>489a	04 04						.byte 	VarISize,VarISize
>489c	02 02						.byte 	VarSSize,VarSSize
>489e	06 06						.byte 	VarFSize,VarFSize
.48a0					EraseOneElement:
.48a0	b5 91		lda $91,x			lda 	esType+1,x 					; is this a list of sub arrays
.48a2	10 09		bpl $48ad			bpl 	_EOESubArray
.48a4	a0 00		ldy #$00			ldy 	#0 							; write the empty variable value out.
.48a6	ad 1a 0e	lda $0e1a			lda 	varType
.48a9	20 40 4a	jsr $4a40			jsr 	ZeroTemp0Y
.48ac	60		rts				rts
.48ad					_EOESubArray:
.48ad	a5 2a		lda $2a				lda 	temp0 						; save temp0, these are effectively locals.
.48af	48		pha				pha
.48b0	a5 2b		lda $2b				lda 	temp0+1
.48b2	48		pha				pha
.48b3	ad 18 0e	lda $0e18			lda 	elementSize 				; save element size
.48b6	48		pha				pha
.48b7	e8		inx				inx 								; create at next level
.48b8	20 36 48	jsr $4836			jsr 	CreateArrayLevel
.48bb	ca		dex				dex
.48bc	85 32		sta $32				sta 	tempShort 					; save A
.48be	68		pla				pla  								; restore element size.
.48bf	8d 18 0e	sta $0e18			sta 	elementSize
.48c2	68		pla				pla 								; restore temp0, which is where this new array level goes.
.48c3	85 2b		sta $2b				sta 	temp0+1
.48c5	68		pla				pla
.48c6	85 2a		sta $2a				sta 	temp0
.48c8	98		tya				tya 								; store Y/A there
.48c9	a0 01		ldy #$01			ldy 	#1
.48cb	91 2a		sta ($2a),y			sta 	(temp0),y
.48cd	a5 32		lda $32				lda 	tempShort
.48cf	88		dey				dey
.48d0	91 2a		sta ($2a),y			sta 	(temp0),y
.48d2	60		rts				rts
.48d3					AllocateArraySpace:
.48d3	18		clc				clc 								; element count + 1 => temp2.
.48d4	b5 98		lda $98,x			lda 	esInt0,x
.48d6	69 01		adc #$01			adc 	#1
.48d8	85 2e		sta $2e				sta 	temp2
.48da	b5 a0		lda $a0,x			lda 	esInt1,x
.48dc	69 00		adc #$00			adc 	#0
.48de	85 2f		sta $2f				sta 	temp2+1
.48e0	ad 18 0e	lda $0e18			lda 	elementSize 				; bytes per element
.48e3	20 0a 49	jsr $490a			jsr 	MultiplyTemp2ByA 			; temp2 = (count + 1) x bytes per element.
.48e6	18		clc				clc 								; add 2 for 'max element' byte.
.48e7	a5 2e		lda $2e				lda 	temp2
.48e9	69 02		adc #$02			adc 	#2
.48eb	85 2e		sta $2e				sta 	temp2
.48ed	90 02		bcc $48f1			bcc 	_AASNoCarry
.48ef	e6 2f		inc $2f				inc 	temp2+1
.48f1					_AASNoCarry:
.48f1	18		clc				clc 								; add to low memory, allocating space.
.48f2	a5 35		lda $35				lda 	lowMemory
.48f4	65 2e		adc $2e				adc 	temp2
.48f6	85 35		sta $35				sta 	lowMemory
.48f8	a5 36		lda $36				lda 	lowMemory+1
.48fa	65 2f		adc $2f				adc 	temp2+1
.48fc	85 36		sta $36				sta 	lowMemory+1
.48fe	b0 05		bcs $4905			bcs 	_AASFail 					; out of memory as adding causes wrapround
.4900	c5 34		cmp $34				cmp 	highMemory+1 				; >= high memory pointer.
.4902	b0 01		bcs $4905			bcs 	_AASFail
.4904	60		rts				rts
.4905					_AASFail:
.4905	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4907	20 18 15	jsr $1518		jsr	errorHandler
.490a					MultiplyTemp2ByA:
.490a	48		pha				pha
.490b	a5 2e		lda $2e				lda 	temp2 						; copy temp2 to temp3.
.490d	85 30		sta $30				sta 	temp3
.490f	a5 2f		lda $2f				lda 	temp2+1
.4911	85 31		sta $31				sta 	temp3+1
.4913	68		pla				pla
.4914	06 2e		asl $2e				asl 	temp2 						; double it.
.4916	26 2f		rol $2f				rol 	temp2+1
.4918	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.491a	f0 15		beq $4931			beq 	_MTBAExit
.491c	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp3 to temp2
.491e	d0 0d		bne $492d			bne 	_MTBANotFloat
.4920	18		clc				clc 								; so this will make it x 3
.4921	a5 2e		lda $2e				lda 	temp2
.4923	65 30		adc $30				adc 	temp3
.4925	85 2e		sta $2e				sta 	temp2
.4927	a5 2f		lda $2f				lda 	temp2+1
.4929	65 31		adc $31				adc 	temp3+1
.492b	85 2f		sta $2f				sta 	temp2+1
.492d					_MTBANotFloat:
.492d	06 2e		asl $2e				asl 	temp2 						; double it.
.492f	26 2f		rol $2f				rol 	temp2+1
.4931					_MTBAExit:
.4931	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/access.asm

.0e19					varHash:
>0e19							.fill	1
.0e1a					varType:
>0e1a							.fill 	1
.0e1b					varEnd:
>0e1b							.fill 	1
.003b					hashList:
>003b							.fill 	2
.4932					AccessVariable:
.4932	aa		tax				tax 								; stack in X
.4933	c8		iny				iny									; look at second character
.4934	b1 28		lda ($28),y			lda 	(codePtr),y
.4936	88		dey				dey
.4937	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.4939	d0 15		bne $4950			bne 	_AVLong 					; no, always use the hash tables.
.493b	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.493d	38		sec				sec 	 							; make it 0-25
.493e	e9 01		sbc #$01			sbc 	#1
.4940	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.4941	0a		asl a				asl 	a
.4942	95 98		sta $98,x			sta 	esInt0,x
.4944	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.4946	95 a0		sta $a0,x			sta 	esInt1,x
.4948	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.494a	95 90		sta $90,x			sta 	esType,x
.494c	c8		iny				iny 								; skip over the variable reference in the code.
.494d	c8		iny				iny  								; (1 letter, 1 type)
.494e	8a		txa				txa 								; stack in A to return.
.494f	60		rts				rts
.4950					_AVLong:
.4950	8a		txa				txa
.4951	48		pha				pha
.4952	20 99 49	jsr $4999			jsr 	AccessSetup 				; set up the basic information we need for later
.4955	20 a2 4a	jsr $4aa2			jsr 	FindVariable 				; does the variable exist already ?
.4958	b0 0e		bcs $4968			bcs 	_AVFound 					; yes, then its found
.495a	ad 1a 0e	lda $0e1a			lda 	varType 					; otherwise, is the variable type an array
.495d	4a		lsr a				lsr 	a
.495e	90 05		bcc $4965			bcc 	_AVCanCreate 				; if not, we can autocreate
.4960	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.4962	20 18 15	jsr $1518		jsr	errorHandler
.4965					_AVCanCreate:
.4965	20 d6 49	jsr $49d6			jsr 	CreateVariable 				; variable does not exist, create it.
.4968					_AVFound:
.4968	68		pla				pla
.4969	aa		tax				tax
.496a	18		clc				clc 								; copy temp0 (variable record address)
.496b	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.496d	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.496f	95 98		sta $98,x			sta 	esInt0,x
.4971	a5 2b		lda $2b				lda 	temp0+1
.4973	69 00		adc #$00			adc 	#0
.4975	95 a0		sta $a0,x			sta 	esInt1,x
.4977	a9 00		lda #$00			lda 	#0
.4979	95 a8		sta $a8,x			sta 	esInt2,x
.497b	95 b0		sta $b0,x			sta 	esInt3,x
.497d	ac 1a 0e	ldy $0e1a			ldy 	varType 					; get the type ID from the type.
.4980	b9 59 49	lda $4959,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.4983	95 90		sta $90,x			sta 	esType,x
.4985	ac 1b 0e	ldy $0e1b			ldy 	varEnd 						; restore Y
.4988	ad 1a 0e	lda $0e1a			lda 	VarType 					; get variable type, put LSB into C
.498b	4a		lsr a				lsr 	a
.498c	90 03		bcc $4991			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.498e	20 3a 47	jsr $473a			jsr 	AccessArray 				; array lookup. if LSB was set.
.4991					_AVNotArray:
.4991	8a		txa				txa 								; return stack in A and return
.4992	60		rts				rts
.4993					_AVTypeTable:
>4993	80 80						.byte 	$80,$80						; integer
>4995	c0 c0						.byte 	$C0,$C0 					; string
>4997	81 81						.byte 	$81,$81 					; float
.4999					AccessSetup:
.4999	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.499b	8d 19 0e	sta $0e19			sta 	varHash
.499e	98		tya				tya
.499f	48		pha				pha
.49a0	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.49a2	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.49a4	b0 0b		bcs $49b1			bcs 	_ASComplete
.49a6	18		clc				clc 								; add to the hash. Might improve this.
.49a7	6d 19 0e	adc $0e19			adc 	varHash
.49aa	8d 19 0e	sta $0e19			sta 	varHash
.49ad	c8		iny				iny 								; next character
.49ae	4c a0 49	jmp $49a0			jmp 	_ASLoop
.49b1					_ASComplete:
.49b1	8d 1a 0e	sta $0e1a			sta 	varType 					; save variable type byte
.49b4	c8		iny				iny
.49b5	8c 1b 0e	sty $0e1b			sty 	varEnd 						; save the ending position.
.49b8	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.49b9	e9 3a		sbc #$3a			sbc 	#$3A
.49bb	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.49bc	0a		asl a				asl 	a
.49bd	0a		asl a				asl 	a
.49be	0a		asl a				asl 	a 							; 2 bytes/word
.49bf	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.49c1	ad 19 0e	lda $0e19			lda 	varHash 					; get hash
.49c4	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.49c6	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.49c7	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.49c9	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.49cb	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.49cd	a9 0a		lda #$0a			lda 	#hashTables >> 8
.49cf	69 00		adc #$00			adc 	#0
.49d1	85 3c		sta $3c				sta 	hashList+1
.49d3	68		pla				pla
.49d4	a8		tay				tay
.49d5	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/create.asm

.49d6					CreateVariable:
.49d6	98		tya				tya 								; push Y on the stack twice.
.49d7	48		pha				pha									; position in code of the new variable.
.49d8	48		pha				pha
.49d9	ae 1a 0e	ldx $0e1a			ldx 	varType 					; get var type 0-5 from the var type
.49dc	bd 00 4a	lda $4a00,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.49df	48		pha				pha 								; save length
.49e0	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.49e2	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.49e4	a5 36		lda $36				lda 	lowMemory+1
.49e6	85 2b		sta $2b				sta 	temp0+1
.49e8	68		pla				pla 								; get length
.49e9	18		clc				clc 								; add to low memory.
.49ea	65 35		adc $35				adc 	lowMemory
.49ec	85 35		sta $35				sta 	lowMemory
.49ee	90 08		bcc $49f8			bcc 	_CVNoCarry
.49f0	e6 36		inc $36				inc 	lowMemory+1
.49f2	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.49f4	c5 34		cmp $34				cmp 	highMemory+1
.49f6	b0 3d		bcs $4a35			bcs 	_CVMemory
.49f8					_CVNoCarry:
.49f8	ad 19 0e	lda $0e19			lda 	varHash 					; store hash at offset 4.
.49fb	a0 04		ldy #$04			ldy 	#4
.49fd	91 2a		sta ($2a),y			sta 	(temp0),y
.49ff	68		pla				pla 								; offset, work out where the variable name is.
.4a00	18		clc				clc
.4a01	65 28		adc $28				adc 	codePtr
.4a03	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.4a05	91 2a		sta ($2a),y			sta 	(temp0),y
.4a07	a5 29		lda $29				lda 	codePtr+1
.4a09	69 00		adc #$00			adc 	#0
.4a0b	c8		iny				iny
.4a0c	91 2a		sta ($2a),y			sta 	(temp0),y
.4a0e	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.4a11	b0 03		bcs $4a16			bcs 	_CVNotImmediate
.4a13	20 78 4a	jsr $4a78			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.4a16					_CVNotImmediate:
.4a16	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.4a18	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.4a1a	91 2a		sta ($2a),y			sta 	(temp0),y
.4a1c	c8		iny				iny
.4a1d	b1 3b		lda ($3b),y			lda 	(hashList),y
.4a1f	91 2a		sta ($2a),y			sta 	(temp0),y
.4a21	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.4a23	91 3b		sta ($3b),y			sta 	(hashList),y
.4a25	88		dey				dey
.4a26	a5 2a		lda $2a				lda 	temp0
.4a28	91 3b		sta ($3b),y			sta 	(hashList),y
.4a2a	ad 1a 0e	lda $0e1a			lda 	varType 					; type in A
.4a2d	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.4a2f	20 40 4a	jsr $4a40			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.4a32	68		pla				pla
.4a33	a8		tay				tay
.4a34	60		rts				rts
.4a35					_CVMemory:
.4a35	a2 22		ldx #$22			ldx 	#ErrorID_Memory
.4a37	20 18 15	jsr $1518		jsr	errorHandler
>4a3a	09 07				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>4a3c	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>4a3e	0b 07						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.4a40					ZeroTemp0Y:
.4a40	4a		lsr a				lsr 	a 							; bit 0 in carry
.4a41	0a		asl a				asl 	a
.4a42	b0 19		bcs $4a5d			bcs 	_ZTExit 					; we don't initialise arrays.
.4a44	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.4a46	f0 16		beq $4a5e			beq 	_ZTWriteNullString 			; write "" string
.4a48	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.4a4a	f0 22		beq $4a6e			beq 	_ZTWriteFloat
.4a4c	98		tya				tya
.4a4d	48		pha				pha
.4a4e	a9 00		lda #$00			lda 	#0
.4a50	91 2a		sta ($2a),y			sta 	(temp0),y
.4a52	c8		iny				iny
.4a53	91 2a		sta ($2a),y			sta 	(temp0),y
.4a55	c8		iny				iny
.4a56	91 2a		sta ($2a),y			sta 	(temp0),y
.4a58	c8		iny				iny
.4a59	91 2a		sta ($2a),y			sta 	(temp0),y
.4a5b	68		pla				pla
.4a5c	a8		tay				tay
.4a5d					_ZTExit:
.4a5d	60		rts				rts
.4a5e					_ZTWriteNullString:
.4a5e	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.4a60	8d ce 0a	sta $0ace			sta 	NullString
.4a63	a9 ce		lda #$ce			lda 	#NullString & $FF
.4a65	91 2a		sta ($2a),y			sta 	(temp0),y
.4a67	a9 0a		lda #$0a			lda 	#NullString >> 8
.4a69	c8		iny				iny
.4a6a	91 2a		sta ($2a),y			sta 	(temp0),y
.4a6c	88		dey				dey
.4a6d	60		rts				rts
.4a6e					_ZTWriteFloat:
.4a6e	8a		txa				txa
.4a6f	48		pha				pha
.4a70	a2 20		ldx #$20		ldx	#32
.4a72	20 62 23	jsr $2362		jsr	floatingpointHandler
.4a75	68		pla				pla
.4a76	aa		tax				tax
.4a77	60		rts				rts
.4a78					CloneVariableName:
.4a78	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.4a7a	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a7c	85 2e		sta $2e				sta 	temp2
.4a7e	c8		iny				iny
.4a7f	b1 2a		lda ($2a),y			lda 	(temp0),y
.4a81	85 2f		sta $2f				sta 	temp2+1
.4a83	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.4a85	91 2a		sta ($2a),y			sta 	(temp0),y
.4a87	88		dey				dey
.4a88	a5 35		lda $35				lda 	lowMemory
.4a8a	91 2a		sta ($2a),y			sta 	(temp0),y
.4a8c	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.4a8e					_CVNCopy:
.4a8e	b1 2e		lda ($2e),y			lda		(temp2),y
.4a90	91 35		sta ($35),y			sta 	(lowMemory),y
.4a92	c8		iny				iny
.4a93	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.4a95	90 f7		bcc $4a8e			bcc 	_CVNCopy
.4a97	98		tya				tya 								; add Y to low memory
.4a98	18		clc				clc
.4a99	65 35		adc $35				adc 	lowMemory
.4a9b	85 35		sta $35				sta 	lowMemory
.4a9d	90 02		bcc $4aa1			bcc 	_CVNNoCarry
.4a9f	e6 36		inc $36				inc 	lowMemory+1
.4aa1					_CVNNoCarry:
.4aa1	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/find.asm

.4aa2					FindVariable:
.4aa2	98		tya				tya
.4aa3	48		pha				pha
.4aa4	98		tya				tya 								; point temp2 to the actual name
.4aa5	18		clc				clc 								; in memory of the variable being created
.4aa6	65 28		adc $28				adc 	codePtr
.4aa8	85 2e		sta $2e				sta 	temp2
.4aaa	a5 29		lda $29				lda 	codePtr+1
.4aac	69 00		adc #$00			adc 	#0
.4aae	85 2f		sta $2f				sta 	temp2+1
.4ab0	a0 00		ldy #$00			ldy 	#0
.4ab2	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.4ab4	85 2a		sta $2a				sta 	temp0
.4ab6	a5 3c		lda $3c				lda 	hashList+1
.4ab8	85 2b		sta $2b				sta 	temp0+1
.4aba	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.4abc	b1 2a		lda ($2a),y			lda 	(temp0),y
.4abe	f0 2c		beq $4aec			beq 	_FVFail
.4ac0	aa		tax				tax
.4ac1	88		dey				dey		 							; get LSB
.4ac2	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ac4	85 2a		sta $2a				sta 	temp0 						; update pointer.
.4ac6	86 2b		stx $2b				stx 	temp0+1
.4ac8	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.4aca	b1 2a		lda ($2a),y			lda 	(temp0),y
.4acc	cd 19 0e	cmp $0e19			cmp 	varHash
.4acf	d0 e9		bne $4aba			bne 	_FVNext 					; if not, no point in checking the name.
.4ad1	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.4ad2	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ad4	85 2d		sta $2d				sta 	temp1+1
.4ad6	88		dey				dey
.4ad7	b1 2a		lda ($2a),y			lda 	(temp0),y
.4ad9	85 2c		sta $2c				sta 	temp1
.4adb	a0 00		ldy #$00			ldy 	#0
.4add					_FVCheck:
.4add	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.4adf	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.4ae1	d0 d7		bne $4aba			bne 	_FVNext		 				; fail if different.
.4ae3	c8		iny				iny
.4ae4	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.4ae6	90 f5		bcc $4add			bcc 	_FVCheck
.4ae8	68		pla				pla
.4ae9	a8		tay				tay
.4aea	38		sec				sec
.4aeb	60		rts				rts
.4aec					_FVFail:
.4aec	68		pla				pla
.4aed	a8		tay				tay
.4aee	18		clc				clc
.4aef	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/variable/reset.asm

.4af0					HashTableReset:
.4af0	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.4af2	a9 00		lda #$00			lda 	#0
.4af4					_HTRClear:
.4af4	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.4af7	ca		dex				dex
.4af8	d0 fa		bne $4af4			bne 	_HTRClear
.4afa	60		rts				rts

;******  Return to file: variable/variable.asm

.4afb					variableHandler:
.4afb	7c fe 4a	jmp ($4afe,x)			jmp 	(variableVectors,x)
.4afe					variableVectors:
>4afe	06 4b					.word _DummyControlHandler ; index 0
>4b00	32 49					.word AccessVariable       ; index 2
>4b02	c2 47					.word CreateArray          ; index 4
>4b04	f0 4a					.word HashTableReset       ; index 6
.4b06					_DummyControlHandler:
.4b06	60		rts			rts

;******  Return to file: basic.asm

.4b07					section_end_variable:
.4b07					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0e1c					endStorage:
>4b07							.align 	256
.4c00					programMemory:
>4bff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.4c00					section_end_footer:

;******  End of listing
