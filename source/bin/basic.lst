
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Mon Mar  8 16:49:00 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/00header/01common.inc


;******  Processing file: main/00header/../../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/00header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/00header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/00header/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempshort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/00header/../../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c6					TOK_TOKENS=$c6
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_RPAREN                   = $c6 ; )
=$c7					TKW_COLON                    = $c7 ; :
=$c8					TKW_COMMA                    = $c8 ; ,
=$c9					TKW_SEMICOLON                = $c9 ; ;
=$ca					TKW_QUOTE                    = $ca ; '
=$cb					TKW_TO                       = $cb ; to
=$cc					TKW_STEP                     = $cc ; step
=$cd					TKW_PROC                     = $cd ; proc
=$ce					TKW_LOCAL                    = $ce ; local
=$cf					TKW_DIM                      = $cf ; dim
=$d0					TKW_REM                      = $d0 ; rem
=$d1					TKW_LET                      = $d1 ; let
=$d2					TKW_INPUT                    = $d2 ; input
=$d3					TKW_ELSE                     = $d3 ; else
=$d4					TKW_VDU                      = $d4 ; vdu
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_DATA                     = $d9 ; data
=$da					TKW_ASSERT                   = $da ; assert
=$db					TKW_POKE                     = $db ; poke
=$dc					TKW_DOKE                     = $dc ; doke
=$dd					TKW_LOKE                     = $dd ; loke
=$de					TKW_INK                      = $de ; ink
=$df					TKW_PAPER                    = $df ; paper
=$e0					TKW_CLS                      = $e0 ; cls
=$e1					TKW_LOCATE                   = $e1 ; locate
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: main/00header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index.
=28					ErrorID_DataError = 28 ; Out of data

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00header/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	4c 1c 2b	jmp $2b1c			jmp 	TokTest
.1006	a2 04		ldx #$04		ldx	#4
.1008	20 93 23	jsr $2393		jsr	deviceHandler
.100b	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.100d	8d c8 0a	sta $0ac8			sta 	basePage
.1010	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.1012	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1015	a9 00		lda #$00			lda 	#($9800) & $FF
.1017	8d ca 0a	sta $0aca			sta 	endMemory
.101a	a9 98		lda #$98			lda 	#($9800) >> 8
.101c	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.101f	4c dc 14	jmp $14dc			jmp 	Command_Run
.3097					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/00header/../../generated/testcode.inc

>5000	18 01 00 ca 85 11 54 68			.byte 24,1,0,202,133,17,84,104,105,115,32,105,115,32,97,32,99,111,109,109,101,110,116,128,6,2,0,129,137,128,11,3,0,1,49,58,141,144,65,99,128,9,4,0,24,58,141,144,66,128,16,5,0,3,49,60,141,133,6,83,65,86,69,77,69,128,23,6,0,213,133,5,83,84,65,82,84,200,1,49,58,200,3,49,60,200,24,58,128,11,7,0,205,19,8,15,23,59,198,128,30,8,0,205,4,5,13,15,59,106,200,197,82,77,69,89,120,200,133,8,73,78,68,69,77,79,33,33,198,128,11,9,0,205,19,8,15,23,59,198,128,21,10,0,213,133,3,69,78,68,200,1,49,58,200,3,49,60,200,24,58,128,11,11,0,205,19,8,15,23,59,198,128,33,12,0,3,49,60,141,133,19,120,120,120,120,120,120,120,120,120,120,120,120,120,65,65,65,65,65,65,143,133,1,33,128,14,13,0,213,3,49,60,200,165,3,49,60,198,128,11,14,0,205,19,8,15,23,59,198,128,8,15,0,153,199,158,171,128,21,16,0,157,4,5,13,15,59,1,49,58,200,24,58,200,3,49,60,198,128,11,17,0,205,19,8,15,23,59,198,128,18,18,0,3,49,60,141,3,49,60,143,133,4,33,33,33,33,128,11,19,0,205,19,8,15,23,59,198,128,13,20,0,205,24,15,50,59,133,1,42,198,128,43,21,0,213,133,4,68,69,77,79,200,1,49,58,200,3,1,49,60,200,133,1,36,201,184,24,58,200,80,198,200,133,1,36,184,195,3,49,60,200,80,198,128,5,22,0,163,128,13,23,0,157,24,15,50,59,3,49,60,198,128,14,24,0,213,133,3,88,79,50,201,3,49,60,128,5,25,0,163,128,11,26,0,157,19,8,15,23,59,198,128,11,27,0,1,58,141,195,3,49,60,128,26,28,0,213,133,1,36,201,184,187,1,58,198,200,80,198,200,186,187,1,58,198,144,65,198,128,5,29,0,163,128,28,30,0,24,24,58,24,24,59,68,198,24,24,60,24,24,61,68,198,24,24,62,24,24,63,68,198,128,0
>5008	69 73 20 69 73 20 61 20 63 6f 6d 6d 65 6e 74 80
>5018	06 02 00 81 89 80 0b 03 00 01 31 3a 8d 90 41 63
>5028	80 09 04 00 18 3a 8d 90 42 80 10 05 00 03 31 3c
>5038	8d 85 06 53 41 56 45 4d 45 80 17 06 00 d5 85 05
>5048	53 54 41 52 54 c8 01 31 3a c8 03 31 3c c8 18 3a
>5058	80 0b 07 00 cd 13 08 0f 17 3b c6 80 1e 08 00 cd
>5068	04 05 0d 0f 3b 6a c8 c5 52 4d 45 59 78 c8 85 08
>5078	49 4e 44 45 4d 4f 21 21 c6 80 0b 09 00 cd 13 08
>5088	0f 17 3b c6 80 15 0a 00 d5 85 03 45 4e 44 c8 01
>5098	31 3a c8 03 31 3c c8 18 3a 80 0b 0b 00 cd 13 08
>50a8	0f 17 3b c6 80 21 0c 00 03 31 3c 8d 85 13 78 78
>50b8	78 78 78 78 78 78 78 78 78 78 78 41 41 41 41 41
>50c8	41 8f 85 01 21 80 0e 0d 00 d5 03 31 3c c8 a5 03
>50d8	31 3c c6 80 0b 0e 00 cd 13 08 0f 17 3b c6 80 08
>50e8	0f 00 99 c7 9e ab 80 15 10 00 9d 04 05 0d 0f 3b
>50f8	01 31 3a c8 18 3a c8 03 31 3c c6 80 0b 11 00 cd
>5108	13 08 0f 17 3b c6 80 12 12 00 03 31 3c 8d 03 31
>5118	3c 8f 85 04 21 21 21 21 80 0b 13 00 cd 13 08 0f
>5128	17 3b c6 80 0d 14 00 cd 18 0f 32 3b 85 01 2a c6
>5138	80 2b 15 00 d5 85 04 44 45 4d 4f c8 01 31 3a c8
>5148	03 01 31 3c c8 85 01 24 c9 b8 18 3a c8 50 c6 c8
>5158	85 01 24 b8 c3 03 31 3c c8 50 c6 80 05 16 00 a3
>5168	80 0d 17 00 9d 18 0f 32 3b 03 31 3c c6 80 0e 18
>5178	00 d5 85 03 58 4f 32 c9 03 31 3c 80 05 19 00 a3
>5188	80 0b 1a 00 9d 13 08 0f 17 3b c6 80 0b 1b 00 01
>5198	3a 8d c3 03 31 3c 80 1a 1c 00 d5 85 01 24 c9 b8
>51a8	bb 01 3a c6 c8 50 c6 c8 ba bb 01 3a c6 90 41 c6
>51b8	80 05 1d 00 a3 80 1c 1e 00 18 18 3a 18 18 3b 44
>51c8	c6 18 18 3c 18 18 3d 44 c6 18 18 3e 18 18 3f 44
>51d8	c6 80 00

;******  Return to file: main/00header/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1022					Command_Assert:
.1022	20 9f 1c	jsr $1c9f			jsr 	EvaluateRootInteger 		; what is being asserted.
.1025	20 1e 22	jsr $221e			jsr 	MInt32Zero 					; is it true ?
.1028	f0 01		beq $102b			beq 	_CAError
.102a	60		rts				rts
.102b					_CAError:
.102b	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.102d	20 aa 23	jsr $23aa		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1030					CommandClear:
.1030	98		tya				tya
.1031	48		pha				pha
.1032	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.1035	85 0d		sta $0d				sta 	highMemory
.1037	ad cb 0a	lda $0acb			lda 	endMemory+1
.103a	85 0e		sta $0e				sta 	highMemory+1
.103c	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.103f	85 04		sta $04				sta 	temp0
.1041	ad c9 0a	lda $0ac9			lda 	basePage+1
.1044	85 05		sta $05				sta 	temp0+1
.1046					_CCFindEnd:
.1046	a0 00		ldy #$00			ldy 	#0
.1048	b1 04		lda ($04),y			lda 	(temp0),y
.104a	f0 0c		beq $1058			beq 	_CCFoundEnd 				; offset zero is end.
.104c	18		clc				clc
.104d	65 04		adc $04				adc 	temp0 						; move to next line
.104f	85 04		sta $04				sta 	temp0
.1051	90 f3		bcc $1046			bcc 	_CCFindEnd
.1053	e6 05		inc $05				inc 	temp0+1
.1055	4c 46 10	jmp $1046			jmp 	_CCFindEnd
.1058					_CCFoundEnd:
.1058	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.105a	85 0f		sta $0f				sta 	lowMemory
.105c	a5 05		lda $05				lda 	temp0+1
.105e	85 10		sta $10				sta 	lowMemory+1
.1060	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.1062	20 76 10	jsr $1076			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1065	20 84 22	jsr $2284			jsr 	RSReset 					; reset the return stack.
.1068	a2 04		ldx #$04		ldx	#4
.106a	20 8e 30	jsr $308e		jsr	variableHandler
.106d	20 91 16	jsr $1691			jsr 	ScanProc 					; scan for procedures
.1070	20 9d 14	jsr $149d			jsr 	CommandRestore 				; do a restore
.1073	68		pla				pla
.1074	a8		tay				tay
.1075	60		rts				rts
.1076					AdvanceLowMemoryByte:
.1076	18		clc				clc
.1077	65 0f		adc $0f				adc 	lowMemory
.1079	85 0f		sta $0f				sta 	lowMemory
.107b	90 02		bcc $107f			bcc 	_ALMBExit
.107d	e6 10		inc $10				inc 	lowMemory+1
.107f					_ALMBExit:
.107f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1080					Command_Dim:
.1080	a2 02		ldx #$02		ldx	#2
.1082	20 8e 30	jsr $308e		jsr	variableHandler
.1085	b1 02		lda ($02),y			lda 	(codePtr),y 				; see what follows.
.1087	c8		iny				iny
.1088	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.108a	f0 f4		beq $1080			beq 	Command_Dim
.108c	88		dey				dey 								; unpick get
.108d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.3097					Command_FOR:
.3097	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.3099	a2 0b		ldx #$0b			ldx 	#11
.309b	20 92 22	jsr $2292			jsr 	RSClaim
.309e	20 7b 11	jsr $117b			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.30a1	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.30a3	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.30a5	d0 4c		bne $30f3			bne 	_CFType
.30a7	a9 cb		lda #$cb			lda 	#TKW_TO 					; check TO present.
.30a9	20 5f 22	jsr $225f			jsr 	CheckToken
.30ac	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.30ae	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger				; get terminal value in stack 1
.30b1	98		tya				tya
.30b2	48		pha				pha
.30b3	a0 04		ldy #$04			ldy 	#4
.30b5	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.30b7	91 78		sta ($78),y			sta 	(rsPointer),y
.30b9	c8		iny				iny
.30ba	a5 50		lda $50				lda		esInt1
.30bc	91 78		sta ($78),y			sta 	(rsPointer),y
.30be	c8		iny				iny
.30bf	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.30c1	91 78		sta ($78),y			sta 	(rsPointer),y
.30c3	c8		iny				iny
.30c4	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.30c6	91 78		sta ($78),y			sta 	(rsPointer),y
.30c8	c8		iny				iny
.30c9	a5 51		lda $51				lda		esInt1+1
.30cb	91 78		sta ($78),y			sta 	(rsPointer),y
.30cd	c8		iny				iny
.30ce	a5 59		lda $59				lda		esInt2+1
.30d0	91 78		sta ($78),y			sta 	(rsPointer),y
.30d2	c8		iny				iny
.30d3	a5 61		lda $61				lda		esInt3+1
.30d5	91 78		sta ($78),y			sta 	(rsPointer),y
.30d7	68		pla				pla
.30d8	a8		tay				tay
.30d9	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.30db	c9 cc		cmp #$cc			cmp 	#TKW_STEP
.30dd	d0 0e		bne $30ed			bne 	_CFDone
.30df	c8		iny				iny									; skip over step.
.30e0	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger 			; get step
.30e3	98		tya				tya
.30e4	48		pha				pha
.30e5	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.30e7	a0 06		ldy #$06			ldy 	#6
.30e9	91 78		sta ($78),y			sta 	(rsPointer),y
.30eb	68		pla				pla
.30ec	a8		tay				tay
.30ed					_CFDone:
.30ed	a9 01		lda #$01			lda 	#1
.30ef	20 be 22	jsr $22be			jsr 	RSSavePosition 				; save position.
.30f2	60		rts				rts
.30f3					_CFType:
.30f3	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.30f5	20 aa 23	jsr $23aa		jsr	errorHandler
.30f8					Command_NEXT:
.30f8	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.30fa	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.30fc	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.30fe	f0 05		beq $3105			beq 	_isok
.3100	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.3102	20 aa 23	jsr $23aa		jsr	errorHandler
.3105					_isok:
.3105	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.3107	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.3109	b0 18		bcs $3123			bcs 	_CNNoIndex
.310b	a2 00		ldx #$00			ldx 	#0 							; start on stack
.310d	20 d4 1c	jsr $1cd4			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.3110	98		tya				tya
.3111	48		pha				pha
.3112	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.3114	b1 78		lda ($78),y			lda 	(rsPointer),y
.3116	d5 48		cmp $48,x			cmp 	esInt0,x
.3118	d0 76		bne $3190			bne 	_CNBadIndex
.311a	c8		iny				iny
.311b	b1 78		lda ($78),y			lda 	(rsPointer),y
.311d	d5 50		cmp $50,x			cmp 	esInt1,x
.311f	d0 6f		bne $3190			bne 	_CNBadIndex
.3121	68		pla				pla
.3122	a8		tay				tay
.3123					_CNNoIndex:
.3123	98		tya				tya
.3124	48		pha				pha
.3125	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.3127	b1 78		lda ($78),y			lda 	(rsPointer),y
.3129	85 04		sta $04				sta 	temp0
.312b	c8		iny				iny
.312c	b1 78		lda ($78),y			lda 	(rsPointer),y
.312e	85 05		sta $05				sta 	temp0+1
.3130	c8		iny				iny
.3131	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.3133	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.3135	85 09		sta $09				sta 	temp2+1 					; save for later.
.3137	10 01		bpl $313a			bpl 	_CNSignX
.3139	ca		dex				dex  								; X = $FF
.313a					_CNSignX:
.313a	18		clc				clc 								; add to the LSB
.313b	a0 00		ldy #$00			ldy 	#0
.313d	71 04		adc ($04),y			adc 	(temp0),y
.313f	91 04		sta ($04),y			sta 	(temp0),y
.3141					_CNPropogate:
.3141	c8		iny				iny  								; add the sign extended in X to the rest.
.3142	8a		txa				txa
.3143	71 04		adc ($04),y			adc 	(temp0),y
.3145	91 04		sta ($04),y			sta 	(temp0),y
.3147	c8		iny				iny
.3148	8a		txa				txa
.3149	71 04		adc ($04),y			adc 	(temp0),y
.314b	91 04		sta ($04),y			sta 	(temp0),y
.314d	c8		iny				iny
.314e	8a		txa				txa
.314f	71 04		adc ($04),y			adc 	(temp0),y
.3151	91 04		sta ($04),y			sta 	(temp0),y
.3153	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.3154	a5 78		lda $78				lda 	rsPointer
.3156	69 07		adc #$07			adc 	#7
.3158	85 06		sta $06				sta 	temp1
.315a	a9 00		lda #$00			lda 	#0
.315c	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.315e	a8		tay				tay 								; and clear the Y register again.
.315f	65 79		adc $79				adc 	rsPointer+1
.3161	85 07		sta $07				sta 	temp1+1
.3163	38		sec				sec 								; calculate current - limit oring interim values.
.3164	20 9c 31	jsr $319c			jsr 	_CNCompare 					; each of these does a byte.
.3167	20 9c 31	jsr $319c			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.316a	20 9c 31	jsr $319c			jsr 	_CNCompare 					; and the carry of the subtraction.
.316d	20 9c 31	jsr $319c			jsr 	_CNCompare
.3170	50 02		bvc $3174			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.3172	49 80		eor #$80			eor 	#$80
.3174					_CNNoOverflow:
.3174	a4 09		ldy $09				ldy 	temp2+1						; get step back
.3176	30 1d		bmi $3195			bmi 	_CNCheckDownto
.3178	c9 00		cmp #$00			cmp 	#0
.317a	30 0c		bmi $3188			bmi 	_CNLoopRound 				; loop round if < =
.317c	a5 08		lda $08				lda 	temp2
.317e	f0 08		beq $3188			beq 	_CNLoopRound
.3180					_CNLoopExit:
.3180	68		pla				pla
.3181	a8		tay				tay
.3182	a9 0b		lda #$0b			lda 	#11
.3184	20 b4 22	jsr $22b4			jsr 	RSFree
.3187	60		rts				rts
.3188					_CNLoopRound:
.3188	68		pla				pla
.3189	a8		tay				tay
.318a	a9 01		lda #$01			lda 	#1
.318c	20 d1 22	jsr $22d1			jsr 	RSLoadPosition				; go back to the loop top
.318f	60		rts				rts
.3190					_CNBadIndex:
.3190	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.3192	20 aa 23	jsr $23aa		jsr	errorHandler
.3195					_CNCheckDownto:
.3195	c9 00		cmp #$00			cmp 	#0
.3197	10 ef		bpl $3188			bpl 	_CNLoopRound
.3199	4c 80 31	jmp $3180			jmp 	_CNLoopExit
.319c					_CNCompare:
.319c	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.319e	f1 06		sbc ($06),y			sbc 	(temp1),y
.31a0	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.31a2	85 08		sta $08				sta 	temp2
.31a4	c8		iny				iny
.31a5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.108e					CommandIf:
.108e	20 9f 1c	jsr $1c9f			jsr 	EvaluateRootInteger 		; get what's being tested.
.1091	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1093	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1095	f0 04		beq $109b			beq 	_IfSimple
.1097	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1099	d0 1b		bne $10b6			bne 	_IfComplex
.109b					_IfSimple:
.109b	20 1e 22	jsr $221e			jsr 	MInt32Zero					; check if TOS zero
.109e	f0 10		beq $10b0			beq 	_IfEOL 						; go to next line.
.10a0	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.10a2	c8		iny				iny
.10a3	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.10a5	f0 0c		beq $10b3			beq 	_IfGoto 					; do the Goto code
.10a7	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.10a9	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.10ab	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.10ad	f0 04		beq $10b3			beq 	_IfGoto
.10af	60		rts				rts 								; else continue on this line.
.10b0					_IfEOL:
.10b0	4c 05 17	jmp $1705			jmp 	AdvanceNextLine 			; go to next line
.10b3					_IfGoto:
.10b3	4c 7a 17	jmp $177a			jmp 	CommandGoto
.10b6					_IfComplex:
.10b6	20 1e 22	jsr $221e			jsr 	MInt32Zero 					; is it true ?
.10b9	f0 01		beq $10bc			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10bb	60		rts				rts 								; else continue.
.10bc					_IFSkip:
.10bc	a9 d3		lda #$d3			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10be	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10c0	4c 91 32	jmp $3291			jmp		ScanForward
.10c3					Command_ELSE:
.10c3	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10c5	8a		txa				txa
.10c6	4c 91 32	jmp $3291			jmp		ScanForward
.10c9					Command_ENDIF:
.10c9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0af0					InputBuffer:
>0af0							.fill 	MaxInputSize+1
.10ca					Command_Input:
.10ca	b1 02		lda ($02),y			lda 	(codePtr),y 			; see what's next.
.10cc	c8		iny				iny
.10cd	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 				; ignore commas.
.10cf	f0 f9		beq $10ca			beq 	Command_Input
.10d1	88		dey				dey 							; undo consume
.10d2	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.10d4	f0 54		beq $112a			beq 	_CIExit 				; : or EOL, exit
.10d6	c9 80		cmp #$80			cmp 	#TOK_EOL
.10d8	f0 50		beq $112a			beq 	_CIExit
.10da	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.10dc	90 12		bcc $10f0			bcc 	_CIVariable
.10de	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.10e0	d0 43		bne $1125			bne 	_CISyntax
.10e2	a2 00		ldx #$00			ldx 	#0
.10e4	20 96 1c	jsr $1c96			jsr 	EvaluateString 			; evaluate and print string
.10e7	20 f0 11	jsr $11f0			jsr 	TOSToTemp0
.10ea	20 bf 13	jsr $13bf			jsr 	PrintString
.10ed	4c ca 10	jmp $10ca			jmp 	Command_Input
.10f0					_CIVariable:
.10f0	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.10f2	20 d4 1c	jsr $1cd4			jsr 	EvaluateReference
.10f5					_CIRetry:
.10f5	a9 3f		lda #$3f			lda 	#"?"
.10f7	a2 0e		ldx #$0e		ldx	#14
.10f9	20 93 23	jsr $2393		jsr	deviceHandler
.10fc	98		tya				tya
.10fd	48		pha				pha
.10fe	20 3e 11	jsr $113e			jsr 	InputString 			; input a string.
.1101	a2 01		ldx #$01			ldx 	#1
.1103	20 2b 11	jsr $112b			jsr 	BufferToStackX 			; make stack,x ref input string.
.1106	a5 40		lda $40				lda 	esType 					; if target type numeric
.1108	29 40		and #$40			and 	#$40 					; then convert to number
.110a	d0 11		bne $111d			bne 	_CIWrite
.110c	a2 01		ldx #$01			ldx 	#1
.110e	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1111	a9 0a		lda #$0a			lda 	#10
.1113	20 6a 20	jsr $206a			jsr 	MInt32FromString 		; convert it back from a string.
.1116	68		pla				pla
.1117	a8		tay				tay
.1118	b0 03		bcs $111d			bcs 	_CIWrite 				; successfully converted.
.111a	18		clc				clc 							; default fail FP conversion
.111b	90 d8		bcc $10f5			bcc		_CIRetry				; failed, try again.
.111d					_CIWrite:
.111d	a2 00		ldx #$00			ldx 	#0
.111f	20 8e 11	jsr $118e			jsr 	WriteValue
.1122	4c ca 10	jmp $10ca			jmp 	Command_Input
.1125					_CISyntax:
.1125	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1127	20 aa 23	jsr $23aa		jsr	errorHandler
.112a					_CIExit:
.112a	60		rts				rts
.112b					BufferToStackX:
.112b	a9 f0		lda #$f0			lda 	#InputBuffer & $FF
.112d	95 48		sta $48,x			sta 	esInt0,x
.112f	a9 0a		lda #$0a			lda 	#InputBuffer >> 8
.1131	95 50		sta $50,x			sta 	esInt1,x
.1133	a9 00		lda #$00			lda 	#0
.1135	95 58		sta $58,x			sta 	esInt2,x
.1137	95 60		sta $60,x			sta 	esInt3,x
.1139	a9 40		lda #$40			lda 	#$40
.113b	95 40		sta $40,x			sta 	esType,x
.113d	60		rts				rts
.113e					InputString:
.113e	a9 00		lda #$00			lda 	#0
.1140	8d f0 0a	sta $0af0			sta 	InputBuffer
.1143					_InputLoop:
.1143	a2 08		ldx #$08		ldx	#8
.1145	20 93 23	jsr $2393		jsr	deviceHandler
.1148	c9 00		cmp #$00			cmp 	#0
.114a	f0 f7		beq $1143			beq 	_InputLoop
.114c	c9 08		cmp #$08			cmp 	#8
.114e	f0 19		beq $1169			beq 	_InputBackspace
.1150	c9 0d		cmp #$0d			cmp 	#13
.1152	f0 21		beq $1175			beq 	_InputExit
.1154	ae f0 0a	ldx $0af0			ldx 	InputBuffer
.1157	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1159	f0 e8		beq $1143			beq 	_InputLoop
.115b	9d f1 0a	sta $0af1,x			sta 	InputBuffer+1,x 		; write char
.115e	ee f0 0a	inc $0af0			inc 	InputBuffer 			; advance count.
.1161					_InputPrintLoop:
.1161	a2 0e		ldx #$0e		ldx	#14
.1163	20 93 23	jsr $2393		jsr	deviceHandler
.1166	4c 43 11	jmp $1143			jmp	 	_InputLoop
.1169					_InputBackspace:
.1169	ad f0 0a	lda $0af0			lda 	InputBuffer 			; at start
.116c	f0 d5		beq $1143			beq 	_InputLoop
.116e	ce f0 0a	dec $0af0			dec 	InputBuffer
.1171	a9 08		lda #$08			lda 	#8
.1173	d0 ec		bne $1161			bne 	_InputPrintLoop
.1175					_InputExit:
.1175	a2 02		ldx #$02		ldx	#2
.1177	20 93 23	jsr $2393		jsr	deviceHandler
.117a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.117b					CommandLet:
.117b	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.117d	20 d4 1c	jsr $1cd4			jsr 	EvaluateReference
.1180	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1182	20 5f 22	jsr $225f			jsr 	CheckToken
.1185	e8		inx				inx 								; do RHS
.1186	20 82 1c	jsr $1c82			jsr 	Evaluate 					; evaluate and dereference
.1189	ca		dex				dex
.118a	20 8e 11	jsr $118e			jsr 	WriteValue 					; write it out
.118d	60		rts				rts
.118e					WriteValue:
.118e	98		tya				tya
.118f	48		pha				pha
.1190	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1193	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1195	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1197	29 40		and #$40			and 	#$40
.1199	d0 50		bne $11eb			bne		_WVType
.119b	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.119d	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.119f	29 40		and #$40			and 	#$40
.11a1	d0 1f		bne $11c2			bne 	_WVCopyString
.11a3	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.11a5	15 41		ora $41,x			ora 	esType+1,x
.11a7	4a		lsr a				lsr 	a
.11a8	90 22		bcc $11cc			bcc 	_WVCopyData4 				; copy 4 data bytes.
.11aa	b5 40		lda $40,x			lda 	esType,x
.11ac	4a		lsr a				lsr 	a
.11ad	90 3c		bcc $11eb			bcc 	_WVType
.11af	e8		inx				inx 								; force the value being written to be a float.
.11b0	20 ec 17	jsr $17ec			jsr 	BPMakeFloat
.11b3	ca		dex				dex
.11b4	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 					; set Temp0 to write address
.11b7	e8		inx				inx
.11b8	8a		txa				txa
.11b9	a2 20		ldx #$20		ldx	#32
.11bb	20 92 26	jsr $2692		jsr	floatingpointHandler
.11be	aa		tax				tax
.11bf	4c e8 11	jmp $11e8			jmp 	_WVCopyExit
.11c2					_WVCopyString:
.11c2	8a		txa				txa
.11c3	a2 0c		ldx #$0c		ldx	#12
.11c5	20 2e 29	jsr $292e		jsr	stringHandler
.11c8	aa		tax				tax
.11c9	4c e8 11	jmp $11e8			jmp 	_WVCopyExit
.11cc					_WVCopyData4:
.11cc	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.11ce	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.11d0	d0 10		bne $11e2			bne 	_WVCopyData1
.11d2	a0 03		ldy #$03			ldy 	#3
.11d4	b5 61		lda $61,x			lda 	esInt3+1,x
.11d6	91 04		sta ($04),y			sta 	(temp0),y
.11d8	88		dey				dey
.11d9	b5 59		lda $59,x			lda 	esInt2+1,x
.11db	91 04		sta ($04),y			sta 	(temp0),y
.11dd	88		dey				dey
.11de	b5 51		lda $51,x			lda 	esInt1+1,x
.11e0	91 04		sta ($04),y			sta 	(temp0),y
.11e2					_WVCopyData1:
.11e2	a0 00		ldy #$00			ldy 	#0
.11e4	b5 49		lda $49,x			lda 	esInt0+1,x
.11e6	91 04		sta ($04),y			sta 	(temp0),y
.11e8					_WVCopyExit:
.11e8	68		pla				pla
.11e9	a8		tay				tay
.11ea	60		rts				rts
.11eb					_WVType:
.11eb	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.11ed	20 aa 23	jsr $23aa		jsr	errorHandler
.11f0					TOSToTemp0:
.11f0	b5 48		lda $48,x			lda 	esInt0,x
.11f2	85 04		sta $04				sta 	temp0
.11f4	b5 50		lda $50,x			lda 	esInt1,x
.11f6	85 05		sta $05				sta 	temp0+1
.11f8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.31a6					CommandList:
.31a6	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1
.31a8	20 f7 21	jsr $21f7			jsr 	MInt32False
.31ab	e8		inx				inx
.31ac	20 f3 21	jsr $21f3			jsr 	MInt32True
.31af	b1 02		lda ($02),y			lda 	(codePtr),y
.31b1	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; list ,xxxx
.31b3	f0 4e		beq $3203			beq 	_CLEnd
.31b5	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.31b7	30 1b		bmi $31d4			bmi 	_CLDoListing
.31b9	a2 00		ldx #$00			ldx 	#0 							; get start
.31bb	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger
.31be	b1 02		lda ($02),y			lda 	(codePtr),y 				; , follows
.31c0	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.31c2	f0 06		beq $31ca			beq 	_CLEndLine
.31c4	20 3a 21	jsr $213a			jsr 	MInt32CopyUp 				; copy first to second
.31c7	4c d4 31	jmp $31d4			jmp 	_CLDoListing
.31ca					_CLEndLine:
.31ca	c8		iny				iny 								; skip comma
.31cb	b1 02		lda ($02),y			lda 	(codePtr),y  				; no number follows.
.31cd	30 05		bmi $31d4			bmi 	_CLDoListing
.31cf	a2 01		ldx #$01			ldx 	#1
.31d1	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger				; get end
.31d4					_CLDoListing:
.31d4	20 36 15	jsr $1536			jsr 	ResetCodeAddress 			; back to the start.
.31d7					_CLCheckLoop:
.31d7	a0 00		ldy #$00			ldy 	#0							; check end.
.31d9	b1 02		lda ($02),y			lda 	(codePtr),y
.31db	f0 26		beq $3203			beq 	_CLEnd
.31dd	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.31df	20 06 32	jsr $3206			jsr 	CLCompareLineTOS
.31e2	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.31e4	f0 0d		beq $31f3			beq 	_CLNext
.31e6	e8		inx				inx
.31e7	20 06 32	jsr $3206			jsr 	CLCompareLineTOS 			; compare vs higher
.31ea	c9 01		cmp #$01			cmp 	#1
.31ec	f0 05		beq $31f3			beq 	_CLNext
.31ee	a2 02		ldx #$02		ldx	#2
.31f0	20 d3 2d	jsr $2dd3		jsr	tokeniserHandler
.31f3					_CLNext:
.31f3	a0 00		ldy #$00			ldy 	#0
.31f5	b1 02		lda ($02),y			lda 	(codePtr),y
.31f7	18		clc				clc
.31f8	65 02		adc $02				adc 	codePtr
.31fa	85 02		sta $02				sta 	codePtr
.31fc	90 d9		bcc $31d7			bcc 	_CLCheckLoop
.31fe	e6 03		inc $03				inc 	codePtr+1
.3200	4c d7 31	jmp $31d7			jmp 	_CLCheckLoop
.3203					_CLEnd:
.3203	4c 03 32	jmp $3203			jmp 	_CLEnd
.3206					CLCompareLineTOS:
.3206	a0 01		ldy #$01			ldy 	#1
.3208	b1 02		lda ($02),y			lda 	(codePtr),y
.320a	55 48		eor $48,x			eor 	esInt0,x
.320c	85 04		sta $04				sta 	temp0
.320e	c8		iny				iny
.320f	b1 02		lda ($02),y			lda 	(codePtr),y
.3211	55 50		eor $50,x			eor 	esInt1,x
.3213	05 04		ora $04				ora 	temp0
.3215	f0 10		beq $3227			beq 	_CLCLTExit
.3217	88		dey				dey
.3218	b1 02		lda ($02),y			lda 	(codePtr),y
.321a	d5 48		cmp $48,x			cmp 	esInt0,x
.321c	c8		iny				iny
.321d	b1 02		lda ($02),y			lda 	(codePtr),y
.321f	f5 50		sbc $50,x			sbc 	esInt1,x
.3221	a9 ff		lda #$ff			lda 	#255
.3223	90 02		bcc $3227			bcc 	_CLCLTExit
.3225	a9 01		lda #$01			lda 	#1
.3227					_CLCLTExit:
.3227	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0b11					storeSize:
>0b11							.fill 	1
.11f9					CommandLocal:
.11f9	a2 00		ldx #$00			ldx 	#0
.11fb	20 17 12	jsr $1217			jsr 	LocaliseVariable 			; localise one.
.11fe					_CLCheckNext:
.11fe	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.1200	c8		iny				iny
.1201	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; local x = 2 ?
.1203	f0 06		beq $120b			beq 	_CLAssignment
.1205	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; comma try again.
.1207	f0 f0		beq $11f9			beq 	CommandLocal
.1209	88		dey				dey
.120a	60		rts				rts
.120b					_CLAssignment:
.120b	a2 01		ldx #$01			ldx 	#1
.120d	20 82 1c	jsr $1c82			jsr 	Evaluate 					; evaluate RHS
.1210	ca		dex				dex
.1211	20 8e 11	jsr $118e			jsr 	WriteValue
.1214	4c fe 11	jmp $11fe			jmp 	_CLCheckNext
.1217					LocaliseVariable:
.1217	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1219	c9 40		cmp #$40			cmp 	#$40
.121b	b0 67		bcs $1284			bcs 	_LVSyntax
.121d	8a		txa				txa 								; get the address of that variable.
.121e	a2 00		ldx #$00		ldx	#0
.1220	20 8e 30	jsr $308e		jsr	variableHandler
.1223	aa		tax				tax
.1224	8a		txa				txa
.1225	48		pha				pha
.1226	98		tya				tya
.1227	48		pha				pha
.1228	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.122b	b5 40		lda $40,x			lda 	esType,x 					; get the type
.122d	0a		asl a				asl 	a
.122e	10 16		bpl $1246			bpl 	_LVPushNumber
.1230	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1232	b1 04		lda ($04),y			lda 	(temp0),y
.1234	c8		iny				iny
.1235	85 06		sta $06				sta 	temp1
.1237	b1 04		lda ($04),y			lda 	(temp0),y
.1239	85 07		sta $07				sta 	temp1+1
.123b	a0 00		ldy #$00			ldy 	#0 	 						; get length
.123d	b1 06		lda ($06),y			lda 	(temp1),y
.123f	aa		tax				tax 								; into X
.1240	e8		inx				inx 								; +1 for length.
.1241	a9 24		lda #$24			lda 	#markerString
.1243	4c 5b 12	jmp $125b			jmp 	_LVWriteFrame
.1246					_LVPushNumber:
.1246	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1248	85 06		sta $06				sta 	temp1
.124a	a5 05		lda $05				lda 	temp0+1
.124c	85 07		sta $07				sta 	temp1+1
.124e	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1250	4a		lsr a				lsr 	a
.1251	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1253	a2 04		ldx #$04			ldx 	#VarISize
.1255	90 04		bcc $125b			bcc 	_LVIsInteger
.1257	a9 23		lda #$23			lda 	#markerFloat
.1259	a2 06		ldx #$06			ldx 	#VarFSize
.125b					_LVIsInteger:
.125b					_LVWriteFrame:
.125b	8e 11 0b	stx $0b11			stx 	storeSize 					; number of bytes to copy from (temp0)
.125e	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.125f	e8		inx				inx
.1260	e8		inx				inx
.1261	20 92 22	jsr $2292			jsr 	RSClaim 					; create the stack frame.
.1264	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.1266	a0 01		ldy #$01			ldy 	#1
.1268	91 78		sta ($78),y			sta 	(rsPointer),y
.126a	c8		iny				iny
.126b	a5 05		lda $05				lda 	temp0+1
.126d	91 78		sta ($78),y			sta 	(rsPointer),y
.126f	a0 00		ldy #$00			ldy 	#0
.1271					_LVCopyData:
.1271	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.1273	c8		iny				iny 								; write allowing for the header bit.
.1274	c8		iny				iny
.1275	c8		iny				iny
.1276	91 78		sta ($78),y			sta 	(rsPointer),y
.1278	88		dey				dey
.1279	88		dey				dey
.127a	ce 11 0b	dec $0b11			dec 	storeSize 					; do it storesize times
.127d	d0 f2		bne $1271			bne 	_LVCopyData
.127f	68		pla				pla
.1280	a8		tay				tay
.1281	68		pla				pla
.1282	aa		tax				tax
.1283	60		rts				rts
.1284					_LVSyntax:
.1284	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1286	20 aa 23	jsr $23aa		jsr	errorHandler
.1289					RestoreLocals:
.1289	a2 00		ldx #$00			ldx 	#0
.128b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.128d	c9 40		cmp #$40			cmp	 	#64
.128f	90 01		bcc $1292			bcc 	_RLocal
.1291	60		rts				rts
.1292					_RLocal:
.1292	8a		txa				txa
.1293	48		pha				pha
.1294	98		tya				tya
.1295	48		pha				pha
.1296	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1298	b1 78		lda ($78),y			lda 	(rsPointer),y
.129a	85 04		sta $04				sta 	temp0
.129c	c8		iny				iny
.129d	b1 78		lda ($78),y			lda 	(rsPointer),y
.129f	85 05		sta $05				sta 	temp0+1
.12a1	a0 00		ldy #$00			ldy 	#0 							; get type back.
.12a3	b1 78		lda ($78),y			lda 	(rsPointer),y
.12a5	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.12a7	f0 28		beq $12d1			beq 	_RString
.12a9	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.12ab	c9 25		cmp #$25			cmp 	#markerInt
.12ad	f0 02		beq $12b1			beq 	_RIsInteger
.12af	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.12b1					_RIsInteger:
.12b1	8a		txa				txa
.12b2	48		pha				pha
.12b3	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.12b5					_RCopyBack:
.12b5	b1 78		lda ($78),y			lda 	(rsPointer),y
.12b7	88		dey				dey
.12b8	88		dey				dey
.12b9	88		dey				dey
.12ba	91 04		sta ($04),y			sta 	(temp0),y
.12bc	c8		iny				iny
.12bd	c8		iny				iny
.12be	c8		iny				iny
.12bf	c8		iny				iny
.12c0	ca		dex				dex
.12c1	d0 f2		bne $12b5			bne 	_RCopyBack
.12c3	68		pla				pla 								; get size add 3
.12c4	18		clc				clc
.12c5	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.12c7					_RRestoreAAndLoop:
.12c7	20 b4 22	jsr $22b4			jsr 	RSFree
.12ca	68		pla				pla
.12cb	a8		tay				tay
.12cc	68		pla				pla
.12cd	aa		tax				tax
.12ce	4c 89 12	jmp $1289			jmp 	RestoreLocals 				; go see if there are any more locals.
.12d1					_RString:
.12d1	a2 00		ldx #$00			ldx 	#0
.12d3	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.12d5	b1 78		lda ($78),y			lda 	(rsPointer),y
.12d7	95 48		sta $48,x			sta 	esInt0,x
.12d9	c8		iny				iny
.12da	b1 78		lda ($78),y			lda 	(rsPointer),y
.12dc	95 50		sta $50,x			sta 	esInt1,x
.12de	18		clc				clc
.12df	a5 78		lda $78				lda 	rsPointer
.12e1	69 03		adc #$03			adc 	#3
.12e3	95 49		sta $49,x			sta 	esInt0+1,x
.12e5	a5 79		lda $79				lda 	rsPointer+1
.12e7	69 00		adc #$00			adc 	#0
.12e9	95 51		sta $51,x			sta 	esInt1+1,x
.12eb	8a		txa				txa
.12ec	a2 0c		ldx #$0c		ldx	#12
.12ee	20 2e 29	jsr $292e		jsr	stringHandler
.12f1	a0 03		ldy #$03			ldy 	#3 							; get string length
.12f3	b1 78		lda ($78),y			lda 	(rsPointer),y
.12f5	18		clc				clc
.12f6	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.12f8	4c c7 12	jmp $12c7			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.12fb					Command_New:
.12fb	20 36 15	jsr $1536			jsr 	ResetCodeAddress 			; point to first line
.12fe	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1300	98		tya				tya
.1301	91 02		sta ($02),y			sta 	(codePtr),y
.1303	20 30 10	jsr $1030			jsr 	CommandClear 				; clear everything down.
.1306	4c 02 17	jmp $1702			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1309					Command_Poke:
.1309	a9 01		lda #$01			lda 	#1
.130b	d0 06		bne $1313			bne 	PokeGeneral
.130d					Command_Doke:
.130d	a9 02		lda #$02			lda 	#2
.130f	d0 02		bne $1313			bne 	PokeGeneral
.1311					Command_Loke:
.1311	a9 03		lda #$03			lda 	#3
.1313					PokeGeneral:
.1313	48		pha				pha 								; save id (PDL = 123)
.1314	20 9f 1c	jsr $1c9f			jsr 	EvaluateRootInteger 		; target address
.1317	20 77 22	jsr $2277			jsr	 	CheckComma
.131a	e8		inx				inx
.131b	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger 			; what value to POKE ?
.131e	ca		dex				dex
.131f	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 					; temp0 points to the target address
.1322	84 0c		sty $0c				sty 	tempShort 					; save Y
.1324	68		pla				pla 								; get copy type (1-3) and dispatch
.1325	aa		tax				tax
.1326	ca		dex				dex
.1327	f0 14		beq $133d			beq 	_Poke1
.1329	ca		dex				dex
.132a	f0 0b		beq $1337			beq 	_Poke2
.132c	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.132e	a5 61		lda $61				lda 	esInt3+1
.1330	91 04		sta ($04),y			sta 	(temp0),y
.1332	88		dey				dey
.1333	a5 59		lda $59				lda 	esInt2+1
.1335	91 04		sta ($04),y			sta 	(temp0),y
.1337					_Poke2:
.1337	a0 01		ldy #$01			ldy 	#1
.1339	a5 51		lda $51				lda 	esInt1+1
.133b	91 04		sta ($04),y			sta 	(temp0),y
.133d					_Poke1:
.133d	a0 00		ldy #$00			ldy 	#0
.133f	a5 49		lda $49				lda 	esInt0+1
.1341	91 04		sta ($04),y			sta 	(temp0),y
.1343	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.1345	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0b12					lastPrintToken:
>0b12							.fill 	1
.1346					Command_Print:
.1346	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1348	8d 12 0b	sta $0b12			sta 	lastPrintToken
.134b	88		dey				dey
.134c					_PrintLoopSkip:
.134c	c8		iny				iny
.134d					_PrintLoop:
.134d	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.134f	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1351	f0 5b		beq $13ae			beq 	_PrintExit
.1353	c9 c7		cmp #$c7			cmp 	#TKW_COLON
.1355	f0 57		beq $13ae			beq 	_PrintExit
.1357	8d 12 0b	sta $0b12			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.135a	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.135c	f0 ee		beq $134c			beq 	_PrintLoopSkip
.135e	c9 ca		cmp #$ca			cmp 	#TKW_QUOTE 					; ' is new line
.1360	f0 3c		beq $139e			beq	 	_PrintNewLine
.1362	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; , is print tab
.1364	f0 40		beq $13a6			beq 	_PrintTab
.1366	20 80 1c	jsr $1c80			jsr 	EvaluateRoot 				; evaluate something at the root
.1369	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.136b	85 04		sta $04				sta 	temp0
.136d	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.136f	85 05		sta $05				sta 	1+(temp0)
.1371	a5 40		lda $40				lda 	esType 						; get type
.1373	f0 15		beq $138a			beq		_PrintInteger
.1375	4a		lsr a				lsr 	a 							; check for floating point
.1376	b0 08		bcs $1380			bcs 	_PrintFloat
.1378					_PrintString:
.1378	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.137a	20 f0 11	jsr $11f0			jsr 	TOSToTemp0
.137d	4c 98 13	jmp $1398			jmp 	_PrintTemp0 				; print no leading space.
.1380					_PrintFloat:
.1380	a9 00		lda #$00			lda 	#0 							; stack level.
.1382	a2 14		ldx #$14		ldx	#20
.1384	20 92 26	jsr $2692		jsr	floatingpointHandler
.1387	4c 91 13	jmp $1391			jmp 	_PrintSpaceTemp0
.138a					_PrintInteger:
.138a	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.138c	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.138e	20 4d 21	jsr $214d			jsr 	MInt32ToString				; convert to text
.1391					_PrintSpaceTemp0:
.1391	a9 20		lda #$20			lda 	#32
.1393	a2 0e		ldx #$0e		ldx	#14
.1395	20 93 23	jsr $2393		jsr	deviceHandler
.1398					_PrintTemp0:
.1398	20 bf 13	jsr $13bf			jsr 	PrintString
.139b	4c 4d 13	jmp $134d			jmp 	_PrintLoop
.139e					_PrintNewLine:
.139e	a2 02		ldx #$02		ldx	#2
.13a0	20 93 23	jsr $2393		jsr	deviceHandler
.13a3	4c 4c 13	jmp $134c			jmp 	_PrintLoopSkip
.13a6					_PrintTab:
.13a6	a2 10		ldx #$10		ldx	#16
.13a8	20 93 23	jsr $2393		jsr	deviceHandler
.13ab	4c 4c 13	jmp $134c			jmp 	_PrintLoopSkip
.13ae					_PrintExit:
.13ae	ad 12 0b	lda $0b12			lda		lastPrintToken 				; check last token
.13b1	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.13b3	f0 09		beq $13be			beq 	_PrintExit2
.13b5	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.13b7	f0 05		beq $13be			beq 	_PrintExit2
.13b9	a2 02		ldx #$02		ldx	#2
.13bb	20 93 23	jsr $2393		jsr	deviceHandler
.13be					_PrintExit2:
.13be	60		rts				rts
.13bf					PrintString:
.13bf	8a		txa				txa
.13c0	48		pha				pha
.13c1	98		tya				tya
.13c2	48		pha				pha
.13c3	a0 00		ldy #$00			ldy 	#0							; get length
.13c5	b1 04		lda ($04),y			lda 	(temp0),y
.13c7	aa		tax				tax 								; into X
.13c8	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.13ca	f0 10		beq $13dc			beq 	_PSExit
.13cc	ca		dex				dex
.13cd	8a		txa				txa
.13ce	48		pha				pha
.13cf	c8		iny				iny
.13d0	b1 04		lda ($04),y			lda 	(temp0),y
.13d2	a2 0e		ldx #$0e		ldx	#14
.13d4	20 93 23	jsr $2393		jsr	deviceHandler
.13d7	68		pla				pla
.13d8	aa		tax				tax
.13d9	4c c8 13	jmp $13c8			jmp 	_PSLoop
.13dc					_PSExit:
.13dc	68		pla				pla
.13dd	a8		tay				tay
.13de	68		pla				pla
.13df	aa		tax				tax
.13e0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0b13					paramCount:
>0b13							.fill 	1
.13e1					CallProc:
.13e1	20 25 16	jsr $1625			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.13e4	48		pha				pha 								; save length on stack
.13e5	85 0c		sta $0c				sta 	tempShort 					; save length in tempShort
.13e7	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.13e9	48		pha				pha
.13ea	a5 04		lda $04				lda 	temp0
.13ec	48		pha				pha
.13ed	98		tya				tya 								; calculate Y + length
.13ee	18		clc				clc
.13ef	65 0c		adc $0c				adc 	tempShort
.13f1	a8		tay				tay
.13f2	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.13f4					_CallProcEvalParams:
.13f4	e8		inx				inx
.13f5	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.13f7	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.13f9	f0 0b		beq $1406			beq 	_CPDoneParams
.13fb	20 82 1c	jsr $1c82			jsr 	Evaluate 					; evaluate a parameter
.13fe	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.1400	c8		iny				iny
.1401	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.1403	f0 ef		beq $13f4			beq 	_CallProcEvalParams
.1405	88		dey				dey 								; undo consumption.
.1406					_CPDoneParams:
.1406	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; check closing parenthesis.
.1409	8e 13 0b	stx $0b13			stx 	paramCount 					; store parameter count+1
.140c	a2 04		ldx #$04			ldx 	#4							; make space on stack
.140e	a9 50		lda #$50			lda 	#markerPROC
.1410	20 92 22	jsr $2292			jsr 	RSClaim
.1413	a9 01		lda #$01			lda 	#1 							; store return address.
.1415	20 be 22	jsr $22be			jsr 	RSSavePosition
.1418	68		pla				pla 								; get the new code Ptr
.1419	85 02		sta $02				sta 	codePtr
.141b	68		pla				pla
.141c	85 03		sta $03				sta 	codePtr+1
.141e	68		pla				pla 								; length of name + 4 is the param start.
.141f	18		clc				clc
.1420	69 04		adc #$04			adc 	#4
.1422	a8		tay				tay
.1423	a2 ff		ldx #$ff			ldx 	#$FF
.1425					_CPLoadParameters:
.1425	e8		inx				inx 								; point to where the address should be loaded.
.1426	ec 13 0b	cpx $0b13			cpx 	paramCount 					; too many parameters in definition ?
.1429	f0 1e		beq $1449			beq 	_CPParamError
.142b	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.142d	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; is it the right bracket
.142f	f0 0e		beq $143f			beq 	_CPParamComplete 			; done all the parameters
.1431	20 17 12	jsr $1217			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.1434	20 8e 11	jsr $118e			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1437	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1439	c8		iny				iny
.143a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.143c	f0 e7		beq $1425			beq 	_CPLoadParameters
.143e	88		dey				dey 								; no, unconsume and check for )
.143f					_CPParamComplete:
.143f	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; check )
.1442	e8		inx				inx 								; check right number of parameters
.1443	ec 13 0b	cpx $0b13			cpx 	paramCount
.1446	d0 01		bne $1449			bne 	_CPParamError
.1448	60		rts				rts
.1449					_CPParamError:
.1449	a2 18		ldx #$18			ldx 	#ErrorID_Params
.144b	20 aa 23	jsr $23aa		jsr	errorHandler
.144e					ReturnProc:
.144e	20 89 12	jsr $1289			jsr 	RestoreLocals 				; get the locals back.
.1451	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1453	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1455	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1457	f0 05		beq $145e			beq 	_isok
.1459	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.145b	20 aa 23	jsr $23aa		jsr	errorHandler
.145e					_isok:
.145e	a9 01		lda #$01			lda 	#1
.1460	20 d1 22	jsr $22d1			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1463	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1465	20 b4 22	jsr $22b4			jsr 	RSFree
.1468	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0b14					dataPtr:
>0b14							.fill 	2
.0b16					dataIndex:
>0b16							.fill 	1
.1469					CommandRead:
.1469	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.146b	20 d4 1c	jsr $1cd4			jsr 	EvaluateReference
.146e	20 af 14	jsr $14af			jsr 	SwapDPCP 					; use the data pointer.
.1471	b1 02		lda ($02),y			lda 	(codePtr),y 				; see where it is.
.1473	c8		iny				iny
.1474	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.1476	f0 07		beq $147f			beq 	_CRInData
.1478	88		dey				dey
.1479	a9 d9		lda #$d9			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.147b	aa		tax				tax
.147c	20 91 32	jsr $3291			jsr 	ScanForward
.147f					_CRInData:
.147f	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.1481	20 82 1c	jsr $1c82			jsr 	Evaluate
.1484	ca		dex				dex 								; and write the value.
.1485	20 8e 11	jsr $118e			jsr 	WriteValue
.1488	20 af 14	jsr $14af			jsr 	SwapDPCP 					; get the code pointer back.
.148b	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows ?
.148d	c8		iny				iny
.148e	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; if comma, another variable
.1490	f0 d7		beq $1469			beq 	CommandRead
.1492	88		dey				dey
.1493	60		rts				rts
.1494					CommandData:
.1494	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.1496	a2 c7		ldx #$c7			ldx 	#TKW_COLON
.1498	20 91 32	jsr $3291			jsr 	ScanForward
.149b	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.149c	60		rts				rts
.149d					CommandRestore:
.149d	ad c8 0a	lda $0ac8			lda 	basePage
.14a0	8d 14 0b	sta $0b14			sta 	dataPtr
.14a3	ad c9 0a	lda $0ac9			lda 	basePage+1
.14a6	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14a9	a9 03		lda #$03			lda 	#3
.14ab	8d 16 0b	sta $0b16			sta 	dataIndex
.14ae	60		rts				rts
.14af					SwapDPCP:
.14af	8a		txa				txa
.14b0	48		pha				pha
.14b1	98		tya				tya 								; swap Y, DataIndex
.14b2	ac 16 0b	ldy $0b16			ldy 	DataIndex
.14b5	8d 16 0b	sta $0b16			sta 	DataIndex
.14b8	a5 02		lda $02				lda 	codePtr 					; swap code/dataptr low
.14ba	ae 14 0b	ldx $0b14			ldx 	dataptr
.14bd	8d 14 0b	sta $0b14			sta 	dataPtr
.14c0	86 02		stx $02				stx 	codePtr
.14c2	a5 03		lda $03				lda 	codePtr+1 					; swap code/dataptr high.
.14c4	ae 15 0b	ldx $0b15			ldx 	dataptr+1
.14c7	8d 15 0b	sta $0b15			sta 	dataPtr+1
.14ca	86 03		stx $03				stx 	codePtr+1
.14cc	68		pla				pla
.14cd	aa		tax				tax
.14ce	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.14cf					Command_Rem:
.14cf					Command_Rem2:
.14cf	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.14d1	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.14d3	d0 06		bne $14db			bne 	_CRNotString
.14d5	c8		iny				iny
.14d6	98		tya				tya
.14d7	38		sec				sec
.14d8	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.14da	a8		tay				tay
.14db					_CRNotString:
.14db	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.3228					Command_Repeat:
.3228	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.322a	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.322c	20 92 22	jsr $2292			jsr 	RSClaim
.322f	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.3231	20 be 22	jsr $22be			jsr 	RSSavePosition
.3234	60		rts				rts
.3235					Command_Until:
.3235	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.3237	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.3239	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.323b	f0 05		beq $3242			beq 	_isok
.323d	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.323f	20 aa 23	jsr $23aa		jsr	errorHandler
.3242					_isok:
.3242	20 9f 1c	jsr $1c9f			jsr 	EvaluateRootInteger 		; at the bottom.
.3245	20 1e 22	jsr $221e			jsr 	MInt32Zero					; check if TOS zero
.3248	d0 06		bne $3250			bne 	_CUExit
.324a	a9 01		lda #$01			lda 	#1
.324c	20 d1 22	jsr $22d1			jsr 	RSLoadPosition 				; reload the position from offset 1.
.324f	60		rts				rts
.3250					_CUExit:
.3250	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.3252	20 b4 22	jsr $22b4			jsr 	RSFree
.3255	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.14dc					Command_Run:
.14dc	a2 ff		ldx #$ff			ldx 	#$FF
.14de	9a		txs				txs
.14df	20 30 10	jsr $1030			jsr 	CommandClear 				; clear everything.
.14e2	20 36 15	jsr $1536			jsr 	ResetCodeAddress 			; back to the start.
.14e5	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.14e7					CRNextInstruction:
.14e7	64 7b		stz $7b				stz 	softMemAlloc+1
.14e9	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.14eb	10 1c		bpl $1509			bpl 	_CRNotToken
.14ed	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.14ef	b0 0c		bcs $14fd			bcs 	_CRExecute
.14f1	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.14f3	b0 4e		bcs $1543			bcs 	Unimplemented
.14f5	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.14f7	b0 04		bcs $14fd			bcs 	_CRExecute
.14f9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.14fb	b0 16		bcs $1513			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.14fd					_CRExecute:
.14fd	c8		iny				iny 								; consume it.
.14fe	0a		asl a				asl 	a 							; double it, losing most significant bit.
.14ff	aa		tax				tax
.1500	20 06 15	jsr $1506			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1503	4c e7 14	jmp $14e7			jmp 	CRNextInstruction
.1506					_CRRunRoutine:
.1506	7c 4d 15	jmp ($154d,x)			jmp 	(Group0Vectors,x)
.1509					_CRNotToken:
.1509	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.150b	b0 36		bcs $1543			bcs 	Unimplemented
.150d					_CRDefaultLet:
.150d	20 7b 11	jsr $117b			jsr 	CommandLet 					; do the default, LET
.1510	4c e7 14	jmp $14e7			jmp 	CRNextInstruction
.1513					_CRCheckIndirect:
.1513	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1515	f0 f6		beq $150d			beq 	_CRDefaultLet
.1517	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1519	f0 f2		beq $150d			beq 	_CRDefaultLet
.151b	d0 26		bne $1543			bne 	Unimplemented
.151d					CommandShift1:
.151d	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.151f	10 22		bpl $1543			bpl 	Unimplemented 				; we have an error as this should not happen.
.1521	0a		asl a				asl 	a 							; double into X
.1522	aa		tax				tax
.1523	c8		iny				iny 								; advance over it.
.1524	20 2a 15	jsr $152a			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1527	4c e7 14	jmp $14e7			jmp 	CRNextInstruction
.152a					_RunIt:
.152a	7c 05 16	jmp ($1605,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.152d					CommandShift2:
.152d	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.152f	20 07 26	jsr $2607		jsr	extensionHandler
.1532	4c e7 14	jmp $14e7			jmp 	CRNextInstruction
.1535					CommandColon:
.1535	60		rts				rts
.1536					ResetCodeAddress:
.1536	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1539	85 02		sta $02				sta 	codePtr
.153b	ad c9 0a	lda $0ac9			lda 	basePage+1
.153e	85 03		sta $03				sta 	codePtr+1
.1540	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1542	60		rts				rts
.1543					Unimplemented:
.1543	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.1545	20 aa 23	jsr $23aa		jsr	errorHandler
.1548					TKErr01:
.1548					TKErr02:
.1548					TKErr03:
.1548					TKErr04:
.1548					TKErr05:
.1548					TKErr06:
.1548					TKErr07:
.1548					TKErr08:
.1548					TKErr09:
.1548					TKErr10:
.1548	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.154a	20 aa 23	jsr $23aa		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.154d					Group0Vectors:
>154d	05 17					.word	AdvanceNextLine          ; $80 [[eol]]
>154f	1d 15					.word	CommandShift1            ; $81 [[sh1]]
>1551	2d 15					.word	CommandShift2            ; $82 [[sh2]]
>1553	48 15					.word	TKErr09                  ; $83 [[sh3]]
>1555	48 15					.word	TKErr10                  ; $84 [[fpc]]
>1557	48 15					.word	TKErr08                  ; $85 [[str]]
>1559	8e 18					.word	AndHandler               ; $86 and
>155b	7b 18					.word	OrHandler                ; $87 or
>155d	68 18					.word	XorHandler               ; $88 xor
>155f	b0 19					.word	CompareGreaterEq         ; $89 >=
>1561	ba 19					.word	CompareLessEq            ; $8a <=
>1563	9c 19					.word	CompareGreater           ; $8b >
>1565	92 19					.word	CompareLess              ; $8c <
>1567	88 19					.word	CompareEquals            ; $8d =
>1569	a6 19					.word	CompareNotEquals         ; $8e <>
>156b	f9 17					.word	AddHandler               ; $8f +
>156d	1c 18					.word	SubHandler               ; $90 -
>156f	b4 18					.word	ShrHandler               ; $91 >>
>1571	a1 18					.word	ShlHandler               ; $92 <<
>1573	2f 18					.word	MulHandler               ; $93 *
>1575	42 18					.word	DivHandler               ; $94 /
>1577	55 18					.word	ModHandler               ; $95 mod
>1579	ed 18					.word	PowerHandler             ; $96 ^
>157b	c7 18					.word	WordRefHandler           ; $97 !
>157d	da 18					.word	ByteRefHandler           ; $98 ?
>157f	28 32					.word	Command_Repeat           ; $99 repeat
>1581	56 32					.word	Command_While            ; $9a while
>1583	97 30					.word	Command_FOR              ; $9b for
>1585	8e 10					.word	CommandIf                ; $9c if
>1587	48 15					.word	TKErr04                  ; $9d defproc
>1589	35 32					.word	Command_Until            ; $9e until
>158b	79 32					.word	Command_Wend             ; $9f wend
>158d	f8 30					.word	Command_NEXT             ; $a0 next
>158f	48 15					.word	TKErr06                  ; $a1 then
>1591	c9 10					.word	Command_ENDIF            ; $a2 endif
>1593	4e 14					.word	ReturnProc               ; $a3 endproc
>1595	89 1b					.word	UnaryParenthesis         ; $a4 (
>1597	e7 1c					.word	UnaryLen                 ; $a5 len(
>1599	2b 1d					.word	UnarySgn                 ; $a6 sgn(
>159b	14 1d					.word	UnaryAbs                 ; $a7 abs(
>159d	84 1d					.word	Unary_Random             ; $a8 random(
>159f	ce 1d					.word	Unary_Page               ; $a9 page
>15a1	f3 21					.word	MInt32True               ; $aa true
>15a3	f7 21					.word	MInt32False              ; $ab false
>15a5	99 1d					.word	Unary_Min                ; $ac min(
>15a7	9d 1d					.word	Unary_Max                ; $ad max(
>15a9	88 1e					.word	UnarySys                 ; $ae sys(
>15ab	4b 1e					.word	UnaryTimer               ; $af timer(
>15ad	de 1b					.word	EventFunction            ; $b0 event(
>15af	74 1e					.word	UnaryGet                 ; $b1 get(
>15b1	64 1e					.word	UnaryInkey               ; $b2 inkey(
>15b3	1f 1e					.word	UnaryAlloc               ; $b3 alloc(
>15b5	b0 1e					.word	ExecChr                  ; $b4 chr$(
>15b7	e0 1e					.word	ExecLeft                 ; $b5 left$(
>15b9	fd 1e					.word	ExecMid                  ; $b6 mid$(
>15bb	25 1f					.word	ExecRight                ; $b7 right$(
>15bd	ca 19					.word	Event_Str                ; $b8 str$(
>15bf	f9 19					.word	UnaryVal                 ; $b9 val(
>15c1	42 1d					.word	UnaryPeek                ; $ba peek(
>15c3	48 1d					.word	UnaryDeek                ; $bb deek(
>15c5	4e 1d					.word	UnaryLeek                ; $bc leek(
>15c7	05 1d					.word	UnaryAsc                 ; $bd asc(
>15c9	f9 1d					.word	UnaryIntToFloat          ; $be int(
>15cb	0c 1e					.word	UnaryFloatToInt          ; $bf float(
>15cd	fc 19					.word	UnaryIsVal               ; $c0 isval(
>15cf	c7 1e					.word	ExecUpper                ; $c1 upper$(
>15d1	c4 1e					.word	ExecLower                ; $c2 lower$(
>15d3	dc 1d					.word	UnaryReference           ; $c3 @
>15d5	f2 1d					.word	UnaryComplement          ; $c4 ~
>15d7	ef 1d					.word	UnaryHexMarker           ; $c5 &
>15d9	48 15					.word	TKErr01                  ; $c6 )
>15db	35 15					.word	CommandColon             ; $c7 :
>15dd	48 15					.word	TKErr02                  ; $c8 ,
>15df	48 15					.word	TKErr03                  ; $c9 ;
>15e1	cf 14					.word	Command_Rem2             ; $ca '
>15e3	48 15					.word	TKErr07                  ; $cb to
>15e5	48 15					.word	TKErr05                  ; $cc step
>15e7	e1 13					.word	CallProc                 ; $cd proc
>15e9	f9 11					.word	CommandLocal             ; $ce local
>15eb	80 10					.word	Command_Dim              ; $cf dim
>15ed	cf 14					.word	Command_Rem              ; $d0 rem
>15ef	7b 11					.word	CommandLet               ; $d1 let
>15f1	ca 10					.word	Command_Input            ; $d2 input
>15f3	c3 10					.word	Command_ELSE             ; $d3 else
>15f5	ac 17					.word	Command_VDU              ; $d4 vdu
>15f7	46 13					.word	Command_Print            ; $d5 print
>15f9	7a 17					.word	CommandGOTO              ; $d6 goto
>15fb	4f 17					.word	CommandGOSUB             ; $d7 gosub
>15fd	62 17					.word	CommandRETURN            ; $d8 return
>15ff	94 14					.word	CommandData              ; $d9 data
>1601	22 10					.word	Command_Assert           ; $da assert
>1603	09 13					.word	Command_Poke             ; $db poke
>1605	0d 13					.word	Command_Doke             ; $dc doke
>1607	11 13					.word	Command_Loke             ; $dd loke
>1609	1f 17					.word	Command_Ink              ; $de ink
>160b	2a 17					.word	Command_Paper            ; $df paper
>160d	19 17					.word	Command_CLS              ; $e0 cls
>160f	35 17					.word	Command_Locate           ; $e1 locate

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.1611					Group1Vectors:
>1611	30 10					.word	CommandClear             ; $86 clear
>1613	43 15					.word	Unimplemented            ; $87 load
>1615	43 15					.word	Unimplemented            ; $88 save
>1617	a6 31					.word	CommandList              ; $89 list
>1619	fb 12					.word	Command_New              ; $8a new
>161b	dc 14					.word	Command_Run              ; $8b run
>161d	69 14					.word	CommandRead              ; $8c read
>161f	9d 14					.word	CommandRestore           ; $8d restore
>1621	02 17					.word	CommandEnd               ; $8e end
>1623	fd 16					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0b17					procList:
>0b17							.fill 	2		 					; terminated by name high.
.0b19					yInLine:
>0b19							.fill 	1
.1625					FindProcedure:
.1625	8c 19 0b	sty $0b19			sty 	yInLine
.1628	20 e3 16	jsr $16e3			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.162b	85 06		sta $06				sta 	temp1
.162d	ad 17 0b	lda $0b17			lda		procList 					; put procList address in temp2
.1630	85 08		sta $08				sta 	temp2
.1632	ad 18 0b	lda $0b18			lda 	procList+1
.1635	85 09		sta $09				sta 	temp2+1
.1637	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.1639					_FPLoop:
.1639	b1 08		lda ($08),y			lda 	(temp2),y
.163b	f0 4f		beq $168c			beq 	_FPError 					; if so, we don't know this procedure.
.163d	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.163f	c8		iny				iny
.1640	b1 08		lda ($08),y			lda 	(temp2),y
.1642	85 04		sta $04				sta 	temp0
.1644	c8		iny				iny
.1645	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.1647	c5 06		cmp $06				cmp 	temp1
.1649	d0 2b		bne $1676			bne 	_FPNext 					; hash is different, go to next.
.164b	38		sec				sec
.164c	ad 19 0b	lda $0b19			lda 	yInLine 					; position in line must be at least 4
.164f	e9 04		sbc #$04			sbc 	#4
.1651	18		clc				clc
.1652	65 02		adc $02				adc 	codePtr
.1654	85 0a		sta $0a				sta 	temp3
.1656	a5 03		lda $03				lda 	codePtr+1
.1658	69 00		adc #$00			adc 	#0
.165a	85 0b		sta $0b				sta 	temp3+1
.165c	98		tya				tya
.165d	48		pha				pha
.165e	a0 04		ldy #$04			ldy 	#4
.1660					_FPCName:
.1660	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.1662	d1 04		cmp ($04),y			cmp 	(temp0),y
.1664	d0 0e		bne $1674			bne 	_FPpulYNext 				; if different go to next one.
.1666	c8		iny				iny
.1667	c9 3a		cmp #$3a			cmp 	#$3A
.1669	90 f5		bcc $1660			bcc 	_FPCName 					; compare the whole lot....
.166b	68		pla				pla 								; throw away the saved Y
.166c	98		tya				tya 								; length of name is Y-4
.166d	38		sec				sec
.166e	e9 04		sbc #$04			sbc 	#4
.1670	ac 19 0b	ldy $0b19			ldy 	yInLine  					; get the original Y back
.1673	60		rts				rts
.1674					_FPpulYNext:
.1674	68		pla				pla
.1675	a8		tay				tay
.1676					_FPNext:
.1676	c8		iny				iny 								; next procedure record.
.1677	10 c0		bpl $1639			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.1679	98		tya				tya 								; subtract 128 from Y
.167a	38		sec				sec
.167b	e9 80		sbc #$80			sbc 	#128
.167d	a8		tay				tay
.167e	18		clc				clc 								; add 128 to temp2, so we can have more than
.167f	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.1681	69 80		adc #$80			adc 	#128
.1683	85 08		sta $08				sta 	temp2
.1685	90 b2		bcc $1639			bcc 	_FPLoop
.1687	e6 09		inc $09				inc 	temp2+1
.1689	4c 39 16	jmp $1639			jmp 	_FPLoop
.168c					_FPError:
.168c	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.168e	20 aa 23	jsr $23aa		jsr	errorHandler
.1691					ScanProc:
.1691	98		tya				tya
.1692	48		pha				pha
.1693	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.1695	8d 17 0b	sta $0b17			sta 	procList
.1698	a5 10		lda $10				lda 	lowMemory+1
.169a	8d 18 0b	sta $0b18			sta 	procList+1
.169d	20 36 15	jsr $1536			jsr 	ResetCodeAddress 			; back to the start.
.16a0					_ScanLoop:
.16a0	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.16a2	b1 02		lda ($02),y			lda 	(codePtr),y
.16a4	f0 2a		beq $16d0			beq 	_ScanExit
.16a6	a0 03		ldy #$03			ldy 	#3							; get first token
.16a8	b1 02		lda ($02),y			lda 	(codePtr),y
.16aa	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.16ac	d0 12		bne $16c0			bne 	_ScanNext
.16ae	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.16b0	20 d8 16	jsr $16d8			jsr 	_ScanWrite
.16b3	a5 02		lda $02				lda 	codePtr
.16b5	20 d8 16	jsr $16d8			jsr 	_ScanWrite
.16b8	a0 04		ldy #$04			ldy 	#4 							; start of name part
.16ba	20 e3 16	jsr $16e3			jsr 	CalculateProcedureHash 		; calculate procedure hash
.16bd	20 d8 16	jsr $16d8			jsr 	_ScanWrite
.16c0					_ScanNext:
.16c0	18		clc				clc
.16c1	a0 00		ldy #$00			ldy 	#0
.16c3	b1 02		lda ($02),y			lda 	(codePtr),y
.16c5	65 02		adc $02				adc 	codePtr
.16c7	85 02		sta $02				sta 	codePtr
.16c9	90 d5		bcc $16a0			bcc 	_ScanLoop
.16cb	e6 03		inc $03				inc 	codePtr+1
.16cd	4c a0 16	jmp $16a0			jmp 	_ScanLoop
.16d0					_ScanExit:
.16d0	a9 00		lda #$00			lda 	#0 							; write ending zero.
.16d2	20 d8 16	jsr $16d8			jsr 	_ScanWrite
.16d5	68		pla				pla
.16d6	a8		tay				tay
.16d7	60		rts				rts
.16d8					_ScanWrite:
.16d8	a0 00		ldy #$00			ldy 	#0
.16da	91 0f		sta ($0f),y			sta 	(lowMemory),y
.16dc	e6 0f		inc $0f				inc 	lowMemory
.16de	d0 02		bne $16e2			bne 	_SWNoCarry
.16e0	e6 10		inc $10				inc 	lowMemory+1
.16e2					_SWNoCarry:
.16e2	60		rts				rts
.16e3					CalculateProcedureHash:
.16e3	a9 00		lda #$00			lda 	#0 							; clear hash.
.16e5	85 04		sta $04				sta 	temp0
.16e7					_CPHLoop:
.16e7	18		clc				clc 								; add character and rotate and add carry back in
.16e8	b1 02		lda ($02),y			lda 	(codePtr),y
.16ea	65 04		adc $04				adc 	temp0
.16ec	6a		ror a				ror 	a
.16ed	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.16ef	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.16f1	b1 02		lda ($02),y			lda 	(codePtr),y
.16f3	c8		iny				iny 								; advance incase we go round again.
.16f4	c9 3a		cmp #$3a			cmp 	#$3A
.16f6	90 ef		bcc $16e7			bcc 	_CPHLoop
.16f8	a5 04		lda $04				lda 	temp0
.16fa	a9 aa		lda #$aa			lda 	#$AA
.16fc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.16fd					CommandStop:
.16fd	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.16ff	20 aa 23	jsr $23aa		jsr	errorHandler
.1702					CommandEnd:
.1702	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1705					AdvanceNextLine:
.1705	a0 00		ldy #$00			ldy 	#0 							; get offset
.1707	b1 02		lda ($02),y			lda 	(codePtr),y
.1709	18		clc				clc 								; add to codePtr
.170a	65 02		adc $02				adc 	codePtr
.170c	85 02		sta $02				sta 	codePtr
.170e	90 02		bcc $1712			bcc 	_ANLNoCarry
.1710	e6 03		inc $03				inc 	codePtr+1
.1712					_ANLNoCarry:
.1712	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1714	f0 ec		beq $1702			beq 	CommandEnd 					; execute END
.1716	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1718	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.1719					Command_CLS:
.1719	a2 00		ldx #$00		ldx	#0
.171b	20 93 23	jsr $2393		jsr	deviceHandler
.171e	60		rts				rts
.171f					Command_Ink:
.171f	a2 00		ldx #$00			ldx 	#0
.1721	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger
.1724	a2 06		ldx #$06		ldx	#6
.1726	20 93 23	jsr $2393		jsr	deviceHandler
.1729	60		rts				rts
.172a					Command_Paper:
.172a	a2 00		ldx #$00			ldx 	#0
.172c	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger
.172f	a2 0c		ldx #$0c		ldx	#12
.1731	20 93 23	jsr $2393		jsr	deviceHandler
.1734	60		rts				rts
.1735					Command_Locate:
.1735	a2 00		ldx #$00			ldx 	#0
.1737	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger
.173a	20 77 22	jsr $2277			jsr 	CheckComma
.173d	e8		inx				inx
.173e	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger
.1741	98		tya				tya
.1742	48		pha				pha
.1743	a4 49		ldy $49				ldy 	esInt0+1
.1745	a5 48		lda $48				lda 	esInt0
.1747	a2 0a		ldx #$0a		ldx	#10
.1749	20 93 23	jsr $2393		jsr	deviceHandler
.174c	68		pla				pla
.174d	a8		tay				tay
.174e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.174f					CommandGOSUB:
.174f	20 9f 1c	jsr $1c9f			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1752	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1754	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1756	20 92 22	jsr $2292			jsr 	RSClaim
.1759	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.175b	20 be 22	jsr $22be			jsr 	RSSavePosition
.175e	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1760	f0 1b		beq $177d			beq 	GotoTOS 					; and do a GOTO there.
.1762					CommandRETURN:
.1762	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1764	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1766	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1768	f0 05		beq $176f			beq 	_isok
.176a	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.176c	20 aa 23	jsr $23aa		jsr	errorHandler
.176f					_isok:
.176f	a9 01		lda #$01			lda 	#1
.1771	20 d1 22	jsr $22d1			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1774	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1776	20 b4 22	jsr $22b4			jsr 	RSFree
.1779	60		rts				rts
.177a					CommandGOTO:
.177a	20 9f 1c	jsr $1c9f			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.177d					GotoTOS:
.177d	20 36 15	jsr $1536			jsr 	ResetCodeAddress 			; simple search.
.1780					_GotoSearch:
.1780	a0 00		ldy #$00			ldy 	#0 							; get offset
.1782	b1 02		lda ($02),y			lda 	(codePtr),y
.1784	f0 21		beq $17a7			beq 	_GotoError 					; not found.
.1786	c8		iny				iny									; check LSB match
.1787	b1 02		lda ($02),y			lda 	(codePtr),y
.1789	d5 48		cmp $48,x			cmp 	esInt0,x
.178b	d0 07		bne $1794			bne 	_GotoNext
.178d	c8		iny				iny
.178e	b1 02		lda ($02),y			lda 	(codePtr),y
.1790	d5 50		cmp $50,x			cmp 	esInt1,x
.1792	f0 10		beq $17a4			beq 	_GotoFound
.1794					_GotoNext:
.1794	a0 00		ldy #$00			ldy 	#0 							; go next line
.1796	b1 02		lda ($02),y			lda 	(codePtr),y
.1798	18		clc				clc
.1799	65 02		adc $02				adc 	codePtr
.179b	85 02		sta $02				sta 	codePtr
.179d	90 e1		bcc $1780			bcc 	_GotoSearch
.179f	e6 03		inc $03				inc 	codePtr+1
.17a1	4c 80 17	jmp $1780			jmp 	_GotoSearch
.17a4					_GotoFound:
.17a4	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.17a6	60		rts				rts
.17a7					_GotoError:
.17a7	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.17a9	20 aa 23	jsr $23aa		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.17ac					Command_VDU:
.17ac	20 9f 1c	jsr $1c9f			jsr 	EvaluateRootInteger 			; get integer at root.
.17af	a5 48		lda $48				lda 	esInt0
.17b1	a2 0e		ldx #$0e		ldx	#14
.17b3	20 93 23	jsr $2393		jsr	deviceHandler
.17b6					_CVNext:
.17b6	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.17b8	c8		iny				iny
.17b9	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 						; comma, do again
.17bb	f0 ef		beq $17ac			beq 	Command_VDU
.17bd	c9 c9		cmp #$c9			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.17bf	d0 0a		bne $17cb			bne 	_CVExit
.17c1	a5 50		lda $50				lda 	esInt1
.17c3	a2 0e		ldx #$0e		ldx	#14
.17c5	20 93 23	jsr $2393		jsr	deviceHandler
.17c8	4c b6 17	jmp $17b6			jmp 	_CVNext
.17cb	88		dey		_CVExit:dey
.17cc	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.3256					Command_While:
.3256	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.3258	a2 04		ldx #$04			ldx 	#4
.325a	20 92 22	jsr $2292			jsr 	RSClaim 					; create on stack.
.325d	88		dey				dey
.325e	a9 01		lda #$01			lda 	#1
.3260	20 be 22	jsr $22be			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.3263	c8		iny				iny
.3264	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger				; get the conditional
.3267	20 1e 22	jsr $221e			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.326a	f0 01		beq $326d			beq 	_CWFail
.326c	60		rts				rts
.326d					_CWFail:
.326d	a9 04		lda #$04			lda 	#4
.326f	20 b4 22	jsr $22b4			jsr 	RSFree 						; close the just opened position.
.3272	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.3274	aa		tax				tax
.3275	20 91 32	jsr $3291			jsr 	ScanForward
.3278	60		rts				rts
.3279					Command_Wend:
.3279	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.327b	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.327d	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.327f	f0 05		beq $3286			beq 	_isok
.3281	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.3283	20 aa 23	jsr $23aa		jsr	errorHandler
.3286					_isok:
.3286	a9 01		lda #$01			lda 	#1
.3288	20 d1 22	jsr $22d1			jsr 	RSLoadPosition				; go back until true
.328b	a9 04		lda #$04			lda 	#4
.328d	20 b4 22	jsr $22b4			jsr 	RSFree 						; close the loop
.3290	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.17cd					BinaryProcess:
.17cd	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.17cf	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.17d1	0a		asl a				asl 	a
.17d2	30 0e		bmi $17e2			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.17d4	18		clc				clc 								; return CC for integer
.17d5	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.17d7	f0 08		beq $17e1			beq 	_BPExit 					; if both integer then return with CC.
.17d9	20 e7 17	jsr $17e7			jsr 	BPMakeBothFloat 			; make both float
.17dc	a9 01		lda #$01			lda 	#$01 						; set result type to float
.17de	95 40		sta $40,x			sta 	esType,x
.17e0	38		sec				sec 								; and return with carry set.
.17e1					_BPExit:
.17e1	60		rts				rts
.17e2					_BPStringType:
.17e2	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17e4	20 aa 23	jsr $23aa		jsr	errorHandler
.17e7					BPMakeBothFloat:
.17e7	e8		inx				inx
.17e8	20 ec 17	jsr $17ec			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.17eb	ca		dex				dex
.17ec					BPMakeFloat:
.17ec	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.17ee	4a		lsr a				lsr 	a
.17ef	b0 07		bcs $17f8			bcs 	_BPIsFloat 					; already a float if set.
.17f1	8a		txa				txa
.17f2	a2 1a		ldx #$1a		ldx	#26
.17f4	20 92 26	jsr $2692		jsr	floatingpointHandler
.17f7	aa		tax				tax
.17f8					_BPIsFloat:
.17f8	60		rts				rts
.17f9					AddHandler:
.17f9	20 48 1a	jsr $1a48			jsr 	DereferenceTwo 				; dereference top two on stack.
.17fc	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.17fe	35 41		and $41,x			and 	esType+1,x
.1800	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.1802	d0 10		bne $1814			bne 	_AHStringConcat				; concatenate strings.
.1804	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.1807	b0 03		bcs $180c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1809	4c e0 20	jmp $20e0			jmp 	MInt32Add 							; else do it as integer.
.180c					_IsFPOperation:
.180c	8a		txa				txa 								; call the relevant fp routine
.180d	a2 02		ldx #$02		ldx	#2
.180f	20 92 26	jsr $2692		jsr	floatingpointHandler
.1812	aa		tax				tax
.1813	60		rts				rts
.1814					_AHStringConcat:
.1814	aa		tax				tax 								; handled by the string module.
.1815	a2 04		ldx #$04		ldx	#4
.1817	20 2e 29	jsr $292e		jsr	stringHandler
.181a	aa		tax				tax
.181b	60		rts				rts
.181c					SubHandler:
.181c	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.181f	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.1822	b0 03		bcs $1827			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1824	4c fa 20	jmp $20fa			jmp 	MInt32Sub 							; else do it as integer.
.1827					_IsFPOperation:
.1827	8a		txa				txa 								; call the relevant fp routine
.1828	a2 10		ldx #$10		ldx	#16
.182a	20 92 26	jsr $2692		jsr	floatingpointHandler
.182d	aa		tax				tax
.182e	60		rts				rts
.182f					MulHandler:
.182f	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.1832	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.1835	b0 03		bcs $183a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1837	4c 14 21	jmp $2114			jmp 	MInt32Multiply 							; else do it as integer.
.183a					_IsFPOperation:
.183a	8a		txa				txa 								; call the relevant fp routine
.183b	a2 0a		ldx #$0a		ldx	#10
.183d	20 92 26	jsr $2692		jsr	floatingpointHandler
.1840	aa		tax				tax
.1841	60		rts				rts
.1842					DivHandler:
.1842	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.1845	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.1848	b0 03		bcs $184d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.184a	4c d8 1f	jmp $1fd8			jmp 	MInt32SDivide 							; else do it as integer.
.184d					_IsFPOperation:
.184d	8a		txa				txa 								; call the relevant fp routine
.184e	a2 06		ldx #$06		ldx	#6
.1850	20 92 26	jsr $2692		jsr	floatingpointHandler
.1853	aa		tax				tax
.1854	60		rts				rts
.1855					ModHandler:
.1855	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.1858	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.185b	b0 03		bcs $1860			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.185d	4c 56 20	jmp $2056			jmp 	MInt32Modulus 							; else do it as integer.
.1860					_IsFPOperation:
.1860	8a		txa				txa 								; call the relevant fp routine
.1861	a2 08		ldx #$08		ldx	#8
.1863	20 92 26	jsr $2692		jsr	floatingpointHandler
.1866	aa		tax				tax
.1867	60		rts				rts
.1868					XorHandler:
.1868	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.186b	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.186e	b0 03		bcs $1873			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1870	4c 8a 1f	jmp $1f8a			jmp 	MInt32Xor 							; else do it as integer.
.1873					_IsFPOperation:
.1873	8a		txa				txa 								; call the relevant fp routine
.1874	a2 08		ldx #$08		ldx	#8
.1876	20 92 26	jsr $2692		jsr	floatingpointHandler
.1879	aa		tax				tax
.187a	60		rts				rts
.187b					OrHandler:
.187b	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.187e	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.1881	b0 03		bcs $1886			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1883	4c 71 1f	jmp $1f71			jmp 	MInt32Or 							; else do it as integer.
.1886					_IsFPOperation:
.1886	8a		txa				txa 								; call the relevant fp routine
.1887	a2 08		ldx #$08		ldx	#8
.1889	20 92 26	jsr $2692		jsr	floatingpointHandler
.188c	aa		tax				tax
.188d	60		rts				rts
.188e					AndHandler:
.188e	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.1891	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.1894	b0 03		bcs $1899			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1896	4c 58 1f	jmp $1f58			jmp 	MInt32And 							; else do it as integer.
.1899					_IsFPOperation:
.1899	8a		txa				txa 								; call the relevant fp routine
.189a	a2 08		ldx #$08		ldx	#8
.189c	20 92 26	jsr $2692		jsr	floatingpointHandler
.189f	aa		tax				tax
.18a0	60		rts				rts
.18a1					ShlHandler:
.18a1	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.18a4	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.18a7	b0 03		bcs $18ac			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18a9	4c 22 19	jmp $1922			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.18ac					_IsFPOperation:
.18ac	8a		txa				txa 								; call the relevant fp routine
.18ad	a2 08		ldx #$08		ldx	#8
.18af	20 92 26	jsr $2692		jsr	floatingpointHandler
.18b2	aa		tax				tax
.18b3	60		rts				rts
.18b4					ShrHandler:
.18b4	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.18b7	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.18ba	b0 03		bcs $18bf			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18bc	4c 25 19	jmp $1925			jmp 	MInt32ShiftRightX 							; else do it as integer.
.18bf					_IsFPOperation:
.18bf	8a		txa				txa 								; call the relevant fp routine
.18c0	a2 08		ldx #$08		ldx	#8
.18c2	20 92 26	jsr $2692		jsr	floatingpointHandler
.18c5	aa		tax				tax
.18c6	60		rts				rts
.18c7					WordRefHandler:
.18c7	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.18ca	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.18cd	b0 03		bcs $18d2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18cf	4c 14 19	jmp $1914			jmp 	MInt32WordIndirect 							; else do it as integer.
.18d2					_IsFPOperation:
.18d2	8a		txa				txa 								; call the relevant fp routine
.18d3	a2 08		ldx #$08		ldx	#8
.18d5	20 92 26	jsr $2692		jsr	floatingpointHandler
.18d8	aa		tax				tax
.18d9	60		rts				rts
.18da					ByteRefHandler:
.18da	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.18dd	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.18e0	b0 03		bcs $18e5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18e2	4c 18 19	jmp $1918			jmp 	MInt32ByteIndirect 							; else do it as integer.
.18e5					_IsFPOperation:
.18e5	8a		txa				txa 								; call the relevant fp routine
.18e6	a2 08		ldx #$08		ldx	#8
.18e8	20 92 26	jsr $2692		jsr	floatingpointHandler
.18eb	aa		tax				tax
.18ec	60		rts				rts
.18ed					PowerHandler:
.18ed	20 48 1a	jsr $1a48			jsr 	DereferenceTwo
.18f0	20 cd 17	jsr $17cd			jsr 	BinaryProcess 				; check to see if either is float
.18f3	b0 03		bcs $18f8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.18f5	4c 00 19	jmp $1900			jmp 	PowerInteger 							; else do it as integer.
.18f8					_IsFPOperation:
.18f8	8a		txa				txa 								; call the relevant fp routine
.18f9	a2 16		ldx #$16		ldx	#22
.18fb	20 92 26	jsr $2692		jsr	floatingpointHandler
.18fe	aa		tax				tax
.18ff	60		rts				rts
.1900					PowerInteger:
.1900	20 e7 17	jsr $17e7			jsr 	BPMakeBothFloat				; make them float.
.1903	8a		txa				txa
.1904	a2 16		ldx #$16		ldx	#22
.1906	20 92 26	jsr $2692		jsr	floatingpointHandler
.1909	a2 12		ldx #$12		ldx	#18
.190b	20 92 26	jsr $2692		jsr	floatingpointHandler
.190e	aa		tax				tax
.190f	a9 00		lda #$00			lda 	#0 							; make type integer
.1911	95 40		sta $40,x			sta 	esType,x
.1913	60		rts				rts
.1914					Mint32WordIndirect:
.1914	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.1916	d0 02		bne $191a			bne 	Min32Indirect
.1918					Mint32ByteIndirect:
.1918	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.191a					Min32Indirect:
.191a	48		pha				pha 								; save the indirection
.191b	20 e0 20	jsr $20e0			jsr 	MInt32Add 					; add a!b a?b
.191e	68		pla				pla 								; and set the type to reference.
.191f	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.1921	60		rts				rts
.1922					Mint32ShiftLeftX:
.1922	18		clc				clc 								; CC shift left
.1923	90 01		bcc $1926			bcc 	Mint32Shift
.1925					Mint32ShiftRightX:
.1925	38		sec				sec 								; CS shift right
.1926					Mint32Shift:
.1926	08		php				php 								; save carry flag on stack.
.1927	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1929	15 59		ora $59,x			ora 	esInt2+1,x
.192b	15 61		ora $61,x			ora 	esInt3+1,x
.192d	d0 1e		bne $194d			bne 	_MShiftZero
.192f	b5 49		lda $49,x			lda 	esInt0+1,x
.1931	c9 20		cmp #$20			cmp 	#32
.1933	b0 18		bcs $194d			bcs 	_MShiftZero
.1935					_MShiftLoop:
.1935	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1937	f0 12		beq $194b			beq 	_MShiftExit
.1939	d6 49		dec $49,x			dec 	esInt0+1,x
.193b	28		plp				plp 								; restore and save carry
.193c	08		php				php
.193d	90 06		bcc $1945			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.193f	20 15 22	jsr $2215			jsr 	Mint32ShiftRight
.1942	4c 35 19	jmp $1935			jmp 	_MShiftLoop
.1945					_MShiftLeft:
.1945	20 0c 22	jsr $220c			jsr 	Mint32ShiftLeft
.1948	4c 35 19	jmp $1935			jmp 	_MShiftLoop
.194b					_MShiftExit:
.194b	28		plp				plp	 								; throw saved carry and exit
.194c	60		rts				rts
.194d					_MShiftZero:
.194d	4c f7 21	jmp $21f7			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.1950					PerformComparison:
.1950	20 48 1a	jsr $1a48			jsr 	DereferenceTwo 				; make both values.
.1953	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1955	35 41		and $41,x			and 	esType+1,x
.1957	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.1958	30 1d		bmi $1977			bmi 	_PCIsString
.195a	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.195c	15 41		ora $41,x			ora 	esType+1,x
.195e	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.195f	30 22		bmi $1983			bmi 	_PCError
.1961	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1963	f0 0f		beq $1974			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.1965	20 e7 17	jsr $17e7			jsr 	BPMakeBothFloat 			; make both float
.1968	8a		txa				txa
.1969	a2 04		ldx #$04		ldx	#4
.196b	20 92 26	jsr $2692		jsr	floatingpointHandler
.196e	86 0c		stx $0c				stx 	tempShort 					; save result
.1970	aa		tax				tax
.1971	a5 0c		lda $0c				lda 	tempShort
.1973	60		rts				rts
.1974					_PCIsInteger:
.1974	4c a3 1f	jmp $1fa3			jmp 	MInt32Compare
.1977					_PCIsString:
.1977	8a		txa				txa 								; A has SP
.1978	a2 06		ldx #$06		ldx	#6
.197a	20 2e 29	jsr $292e		jsr	stringHandler
.197d	86 0c		stx $0c				stx 	tempShort 					; save result
.197f	aa		tax				tax 								; put SP back in X and get result.
.1980	a5 0c		lda $0c				lda 	tempShort
.1982	60		rts				rts
.1983					_PCError:
.1983	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1985	20 aa 23	jsr $23aa		jsr	errorHandler
.1988					CompareEquals:
.1988	20 50 19	jsr $1950			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.198b	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.198d	f0 35		beq $19c4			beq  	CompareTrue
.198f	4c c7 19	jmp $19c7			jmp 	CompareFalse
.1992					CompareLess:
.1992	20 50 19	jsr $1950			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.1995	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.1997	f0 2b		beq $19c4			beq  	CompareTrue
.1999	4c c7 19	jmp $19c7			jmp 	CompareFalse
.199c					CompareGreater:
.199c	20 50 19	jsr $1950			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.199f	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.19a1	f0 21		beq $19c4			beq  	CompareTrue
.19a3	4c c7 19	jmp $19c7			jmp 	CompareFalse
.19a6					CompareNotEquals:
.19a6	20 50 19	jsr $1950			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19a9	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.19ab	d0 17		bne $19c4			bne  	CompareTrue
.19ad	4c c7 19	jmp $19c7			jmp 	CompareFalse
.19b0					CompareGreaterEq:
.19b0	20 50 19	jsr $1950			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19b3	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.19b5	d0 0d		bne $19c4			bne  	CompareTrue
.19b7	4c c7 19	jmp $19c7			jmp 	CompareFalse
.19ba					CompareLessEq:
.19ba	20 50 19	jsr $1950			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.19bd	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.19bf	d0 03		bne $19c4			bne  	CompareTrue
.19c1	4c c7 19	jmp $19c7			jmp 	CompareFalse
.19c4					CompareTrue:
.19c4	4c f3 21	jmp $21f3			jmp 	MInt32True
.19c7					CompareFalse:
.19c7	4c f7 21	jmp $21f7			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.19ca					Event_Str:
.19ca	20 8b 1c	jsr $1c8b			jsr 	EvaluateNumeric 			; get a number.
.19cd	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.19cf	d0 13		bne $19e4			bne 	_ESFloat
.19d1	20 27 1a	jsr $1a27			jsr 	ConvertGetBase 				; get base, or default.
.19d4	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.19d6	85 04		sta $04				sta 	temp0
.19d8	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.19da	85 05		sta $05				sta 	1+(temp0)
.19dc	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.19de	20 4d 21	jsr $214d			jsr 	MInt32ToString 				; convert to string.
.19e1	4c f1 19	jmp $19f1			jmp 	_ESCloneExit 				; clone and exit.
.19e4					_ESFloat:
.19e4	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; check closing )
.19e7	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.19ea	8a		txa				txa
.19eb	a2 14		ldx #$14		ldx	#20
.19ed	20 92 26	jsr $2692		jsr	floatingpointHandler
.19f0	aa		tax				tax
.19f1					_ESCloneExit:
.19f1	8a		txa				txa
.19f2	a2 02		ldx #$02		ldx	#2
.19f4	20 2e 29	jsr $292e		jsr	stringHandler
.19f7	aa		tax				tax
.19f8	60		rts				rts
.19f9					UnaryVal:
.19f9	38		sec				sec 								; Carry set to return value
.19fa	b0 01		bcs $19fd			bcs 	ValueMain
.19fc					UnaryIsVal:
.19fc	18		clc				clc									; Carry clear to return legitimacy
.19fd					ValueMain:
.19fd	08		php				php 								; save results (CS is value, CC is validation)
.19fe	20 96 1c	jsr $1c96			jsr 	EvaluateString
.1a01	20 27 1a	jsr $1a27			jsr 	ConvertGetBase 				; get base, if any.
.1a04	98		tya				tya
.1a05	48		pha				pha
.1a06	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1a09	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1a0b	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1a0d	20 6a 20	jsr $206a			jsr 	MInt32FromString 			; convert it back from a string.
.1a10	b0 0c		bcs $1a1e			bcs 	_VMSuccess 					; successfully converted.
.1a12	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.1a14	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1a16	f0 00		beq $1a18			beq 	_VMFailed 	 				; so we failed.
.1a18					_VMFailed:
.1a18	68		pla				pla
.1a19	a8		tay				tay
.1a1a	28		plp				plp
.1a1b	4c f7 21	jmp $21f7			jmp 	MInt32False 				; return 0 whatever.
.1a1e					_VMSuccess:
.1a1e	68		pla				pla
.1a1f	a8		tay				tay
.1a20	28		plp				plp 								; if CS the it was val() so we want the value.
.1a21	b0 03		bcs $1a26			bcs 	_VMExit
.1a23	4c f3 21	jmp $21f3			jmp 	MInt32True 					; otherwise return true as successful.
.1a26					_VMExit:
.1a26	60		rts				rts
.1a27					ConvertGetBase:
.1a27	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1a29	95 49		sta $49,x			sta 	esInt0+1,x
.1a2b	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for ,base)
.1a2d	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.1a2f	d0 0e		bne $1a3f			bne 	_CGBDone 					; not found, should be )
.1a31	e8		inx				inx 								; next level
.1a32	c8		iny				iny 								; skip comma.
.1a33	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger		; evaluate the base.
.1a36	ca		dex				dex
.1a37	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.1a39	90 08		bcc $1a43			bcc 	_CGBValue 					; (it should work as high as 37)
.1a3b	c9 11		cmp #$11			cmp 	#17
.1a3d	b0 04		bcs $1a43			bcs 	_CGBValue
.1a3f					_CGBDone:
.1a3f	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1a42	60		rts				rts
.1a43					_CGBValue:
.1a43	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a45	20 aa 23	jsr $23aa		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.1a48					DereferenceTwo:
.1a48	e8		inx				inx
.1a49	20 4d 1a	jsr $1a4d			jsr 	DereferenceOne
.1a4c	ca		dex				dex
.1a4d					DereferenceOne:
.1a4d	b5 40		lda $40,x			lda 	esType,x
.1a4f	10 3d		bpl $1a8e			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.1a51	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1a52	b0 3b		bcs $1a8f			bcs 	_DRFloatDeReference
.1a54	98		tya				tya
.1a55	48		pha				pha
.1a56	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1a58	85 04		sta $04				sta 	temp0
.1a5a	b5 50		lda $50,x			lda 	esInt1,x
.1a5c	85 05		sta $05				sta 	temp0+1
.1a5e	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1a60	95 50		sta $50,x			sta 	esInt1,x
.1a62	95 58		sta $58,x			sta 	esInt2,x
.1a64	95 60		sta $60,x			sta 	esInt3,x
.1a66	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1a68	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1a6a	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1a6b	30 0d		bmi $1a7a			bmi 	_DeRefString 				; string, 2 bytes only
.1a6d	d0 11		bne $1a80			bne 	_DeRefByte 					; byte 1 byte only
.1a6f					_DeRefLong:
.1a6f	a0 03		ldy #$03			ldy 	#3
.1a71	b1 04		lda ($04),y			lda 	(temp0),y
.1a73	95 60		sta $60,x			sta 	esInt3,x
.1a75	88		dey				dey
.1a76	b1 04		lda ($04),y			lda 	(temp0),y
.1a78	95 58		sta $58,x			sta 	esInt2,x
.1a7a					_DeRefString:
.1a7a	a0 01		ldy #$01			ldy 	#1
.1a7c	b1 04		lda ($04),y			lda 	(temp0),y
.1a7e	95 50		sta $50,x			sta 	esInt1,x
.1a80					_DeRefByte:
.1a80	a0 00		ldy #$00			ldy 	#0
.1a82	b1 04		lda ($04),y			lda 	(temp0),y
.1a84	95 48		sta $48,x			sta 	esInt0,x
.1a86	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1a88	29 40		and #$40			and 	#$40
.1a8a	95 40		sta $40,x			sta 	esType,x
.1a8c	68		pla				pla
.1a8d	a8		tay				tay
.1a8e					_DRNotReference
.1a8e	60		rts				rts
.1a8f					_DRFloatDereference:
.1a8f	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 					; address to deref in temp0
.1a92	8a		txa				txa
.1a93	a2 1c		ldx #$1c		ldx	#28
.1a95	20 92 26	jsr $2692		jsr	floatingpointHandler
.1a98	aa		tax				tax
.1a99	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1a9b	95 40		sta $40,x			sta 	esType,x
.1a9d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.1a9e					EvaluateLevel:
.1a9e	48		pha				pha 								; save precedence level.
.1a9f	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1aa1	95 48		sta $48,x			sta 	esInt0,x
.1aa3	95 50		sta $50,x			sta 	esInt1,x
.1aa5	95 58		sta $58,x			sta 	esInt2,x
.1aa7	95 60		sta $60,x			sta 	esInt3,x
.1aa9	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1aab	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1aad	30 21		bmi $1ad0			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1aaf	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1ab0	30 0a		bmi $1abc			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1ab2	8a		txa				txa 								; stack level in X
.1ab3	a2 00		ldx #$00		ldx	#0
.1ab5	20 8e 30	jsr $308e		jsr	variableHandler
.1ab8	aa		tax				tax
.1ab9	4c f9 1a	jmp $1af9			jmp		_ELHasTerm
.1abc					_ELIsConstant:
.1abc	4a		lsr a				lsr 	a 							; get the value back
.1abd	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1abf	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1ac1					_ELCheckNext:
.1ac1	c8		iny				iny 								; look at next
.1ac2	b1 02		lda ($02),y			lda 	(codePtr),y
.1ac4	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1ac6	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1ac8	b0 2f		bcs $1af9			bcs 	_ELHasTerm 					; done getting the constant.
.1aca	20 92 1b	jsr $1b92			jsr 	ELShiftByteIn 				; shift byte into position.
.1acd	4c c1 1a	jmp $1ac1			jmp 	_ELCheckNext
.1ad0					_ELIsToken:
.1ad0	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1ad2	f0 0f		beq $1ae3			beq 	_ELIsString
.1ad4	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1ad6	d0 5f		bne $1b37			bne 	_ELCheckUnary
.1ad8	8a		txa				txa 								; put X into A
.1ad9	c8		iny				iny 								; skip over the float marker
.1ada	a2 18		ldx #$18		ldx	#24
.1adc	20 92 26	jsr $2692		jsr	floatingpointHandler
.1adf	aa		tax				tax 								; restore X
.1ae0	4c f9 1a	jmp $1af9			jmp 	_ELHasTerm
.1ae3					_ELIsString:
.1ae3	98		tya				tya 								; address of string is codePtr+y+1
.1ae4	38		sec				sec
.1ae5	65 02		adc $02				adc 	codePtr
.1ae7	95 48		sta $48,x			sta 	esInt0,x
.1ae9	a5 03		lda $03				lda 	codePtr+1
.1aeb	69 00		adc #$00			adc 	#0
.1aed	95 50		sta $50,x			sta 	esInt1,x
.1aef	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1af1	95 40		sta $40,x			sta 	esType,x
.1af3	c8		iny				iny 								; skip over string.
.1af4	98		tya				tya
.1af5	38		sec				sec									; +1 for the length itself.
.1af6	71 02		adc ($02),y			adc 	(codePtr),y
.1af8	a8		tay				tay 								; and fall through to term loop code.
.1af9					_ELHasTerm:
.1af9	b1 02		lda ($02),y			lda 	(codePtr),y
.1afb	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1afd	90 04		bcc $1b03			bcc 	_ELPopExit
.1aff	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1b01	90 02		bcc $1b05			bcc 	_ELHasBinaryTerm
.1b03					_ELPopExit:
.1b03	68		pla				pla
.1b04					_ELExit:
.1b04	60		rts				rts
.1b05					_ELHasBinaryTerm:
.1b05	84 0c		sty $0c				sty 	tempShort 					; save position
.1b07	a8		tay				tay 								; use token as an index and get the precedence.
.1b08	b9 3a 1b	lda $1b3a,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1b0b	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1b0d	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1b0f	68		pla				pla 								; restore current level.
.1b10	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1b12	b0 f0		bcs $1b04			bcs 	_ELExit
.1b14	48		pha				pha 								; save current level back on the stack.
.1b15	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1b17	48		pha				pha
.1b18	c8		iny				iny
.1b19	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1b1a	a5 0c		lda $0c				lda 	tempShort
.1b1c	20 9e 1a	jsr $1a9e			jsr 	EvaluateLevel
.1b1f	ca		dex				dex
.1b20	68		pla				pla 								; get the operator back out.
.1b21					_ELExecuteA:
.1b21	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1b23	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1b24	aa		tax				tax
.1b25	bd 4d 15	lda $154d,x			lda 	Group0Vectors,x
.1b28	85 04		sta $04				sta 	temp0
.1b2a	bd 4e 15	lda $154e,x			lda 	Group0Vectors+1,x
.1b2d	85 05		sta $05				sta 	temp0+1
.1b2f	a6 0c		ldx $0c				ldx 	tempShort
.1b31	20 7e 1b	jsr $1b7e			jsr 	_ELCallTemp0
.1b34	4c f9 1a	jmp $1af9			jmp 	_ELHasTerm 					; and loop back round.
.1b37					_ELCheckUnary:
.1b37	c8		iny				iny 								; skip over token.
.1b38	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1b3a	f0 19		beq $1b55			beq 	_ELMinus
.1b3c	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1b3e	f0 2c		beq $1b6c			beq 	_ELIndirect
.1b40	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1b42	f0 28		beq $1b6c			beq 	_ELIndirect
.1b44	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.1b46	f0 39		beq $1b81			beq 	_ELExtension
.1b48	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1b4a	90 04		bcc $1b50			bcc 	_ELUSyntax
.1b4c	c9 c6		cmp #$c6			cmp 	#TOK_TOKENS
.1b4e	90 d1		bcc $1b21			bcc 	_ELExecuteA 				; if so do that token.
.1b50					_ELUSyntax:
.1b50	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1b52	20 aa 23	jsr $23aa		jsr	errorHandler
.1b55					_ELMinus:
.1b55	20 6a 1c	jsr $1c6a			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1b58	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1b5a	f0 0a		beq $1b66			beq 	_ELMinusInteger
.1b5c	8a		txa				txa
.1b5d	a2 0c		ldx #$0c		ldx	#12
.1b5f	20 92 26	jsr $2692		jsr	floatingpointHandler
.1b62	aa		tax				tax
.1b63	4c f9 1a	jmp $1af9			jmp 	_ELHasTerm
.1b66					_ELMinusInteger:
.1b66	20 b1 21	jsr $21b1			jsr 	MInt32Negate 				; do int negate
.1b69	4c f9 1a	jmp $1af9			jmp 	_ELHasTerm
.1b6c					_ELIndirect:
.1b6c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1b6d	20 73 1c	jsr $1c73			jsr 	EvaluateIntegerTerm 		; integer address
.1b70	68		pla				pla
.1b71	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1b73	f0 02		beq $1b77			beq 	_ELHaveModifier
.1b75	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1b77					_ELHaveModifier:
.1b77	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1b79	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.1b7b	4c f9 1a	jmp $1af9			jmp 	_ELHasTerm
.1b7e					_ELCallTemp0:
.1b7e	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1b81					_ELExtension:
.1b81	8a		txa				txa 								; stack pos in A
.1b82	20 07 26	jsr $2607		jsr	extensionHandler
.1b85	aa		tax				tax 								; restore stack
.1b86	4c f9 1a	jmp $1af9			jmp 	_ELHasTerm
.1b89					UnaryParenthesis:
.1b89	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1b8b	20 9e 1a	jsr $1a9e			jsr 	EvaluateLevel
.1b8e	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; check for )
.1b91	60		rts				rts
.1b92					ELShiftByteIn:
.1b92	48		pha				pha 								; save bits to shift in.
.1b93	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1b95	48		pha				pha
.1b96	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1b98	95 60		sta $60,x			sta 	esInt3,x
.1b9a	b5 50		lda $50,x			lda 	esInt1,x
.1b9c	95 58		sta $58,x			sta 	esInt2,x
.1b9e	b5 48		lda $48,x			lda 	esInt0,x
.1ba0	95 50		sta $50,x			sta 	esInt1,x
.1ba2	a9 00		lda #$00			lda 	#0
.1ba4	95 48		sta $48,x			sta 	esInt0,x
.1ba6	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1ba7	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1ba9	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1bab					_ELShiftLoop:
.1bab	4a		lsr a				lsr 	a
.1bac	76 60		ror $60,x			ror 	esInt3,x
.1bae	76 58		ror $58,x			ror 	esInt2,x
.1bb0	76 50		ror $50,x			ror 	esInt1,x
.1bb2	76 48		ror $48,x			ror 	esInt0,x
.1bb4	c9 01		cmp #$01			cmp 	#1
.1bb6	d0 f3		bne $1bab			bne 	_ELShiftLoop
.1bb8	68		pla				pla 								; get original 6 bit value and OR in.
.1bb9	29 3f		and #$3f			and 	#$3F
.1bbb	15 48		ora $48,x			ora 	esInt0,x
.1bbd	95 48		sta $48,x			sta 	esInt0,x
.1bbf	60		rts				rts
.1bc0					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1bc0	01					.byte	$01			; $86 and
>1bc1	01					.byte	$01			; $87 or
>1bc2	01					.byte	$01			; $88 xor
>1bc3	02					.byte	$02			; $89 >=
>1bc4	02					.byte	$02			; $8a <=
>1bc5	02					.byte	$02			; $8b >
>1bc6	02					.byte	$02			; $8c <
>1bc7	02					.byte	$02			; $8d =
>1bc8	02					.byte	$02			; $8e <>
>1bc9	03					.byte	$03			; $8f +
>1bca	03					.byte	$03			; $90 -
>1bcb	04					.byte	$04			; $91 >>
>1bcc	04					.byte	$04			; $92 <<
>1bcd	04					.byte	$04			; $93 *
>1bce	04					.byte	$04			; $94 /
>1bcf	04					.byte	$04			; $95 mod
>1bd0	05					.byte	$05			; $96 ^
>1bd1	06					.byte	$06			; $97 !
>1bd2	06					.byte	$06			; $98 ?
>1bd3	82					.byte	$82			; $99 repeat
>1bd4	82					.byte	$82			; $9a while
>1bd5	82					.byte	$82			; $9b for
>1bd6	82					.byte	$82			; $9c if
>1bd7	82					.byte	$82			; $9d defproc
>1bd8	80					.byte	$80			; $9e until
>1bd9	80					.byte	$80			; $9f wend
>1bda	80					.byte	$80			; $a0 next
>1bdb	80					.byte	$80			; $a1 then
>1bdc	80					.byte	$80			; $a2 endif
>1bdd	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1bde					EventFunction:
.1bde	20 d4 1c	jsr $1cd4			jsr 	EvaluateReference			; get the variable reference that tracks the event
.1be1	b5 40		lda $40,x			lda 	esType,x
.1be3	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.1be5	d0 5b		bne $1c42			bne 	_EFType
.1be7	20 77 22	jsr $2277			jsr 	CheckComma
.1bea	e8		inx				inx
.1beb	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1bee	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; finish off with the right bracket
.1bf1	ca		dex				dex
.1bf2	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.1bf4	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.1bf6	15 58		ora $58,x			ora 	esInt2,x
.1bf8	15 60		ora $60,x			ora 	esInt3,x
.1bfa	d0 41		bne $1c3d			bne 	_EFValue
.1bfc	98		tya				tya
.1bfd	48		pha				pha
.1bfe	8a		txa				txa
.1bff	48		pha				pha
.1c00	a2 12		ldx #$12		ldx	#18
.1c02	20 93 23	jsr $2393		jsr	deviceHandler
.1c05	84 07		sty $07				sty 	temp1+1
.1c07	85 06		sta $06				sta 	temp1
.1c09	68		pla				pla
.1c0a	aa		tax				tax
.1c0b	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.1c0e	a0 03		ldy #$03			ldy 	#3							; if -ve
.1c10	b1 04		lda ($04),y			lda 	(temp0),y
.1c12	30 23		bmi $1c37			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.1c14	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1c16	b1 04		lda ($04),y			lda 	(temp0),y
.1c18	c8		iny				iny
.1c19	11 04		ora ($04),y			ora 	(temp0),y
.1c1b	f0 17		beq $1c34			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1c1d	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1c1f	38		sec				sec
.1c20	b1 04		lda ($04),y			lda 	(temp0),y
.1c22	e5 06		sbc $06				sbc 	temp1
.1c24	c8		iny				iny
.1c25	b1 04		lda ($04),y			lda 	(temp0),y
.1c27	e5 07		sbc $07				sbc 	temp1+1
.1c29	10 0c		bpl $1c37			bpl 	_EFFail 					; if trigger >= timer then return False
.1c2b	20 47 1c	jsr $1c47			jsr 	SetEventTimer 				; reset the timer for next time.
.1c2e	20 f3 21	jsr $21f3			jsr	 	MInt32True 					; and treutn true as fired.
.1c31	68		pla				pla
.1c32	a8		tay				tay
.1c33	60		rts				rts
.1c34					_EFInitialise:
.1c34	20 47 1c	jsr $1c47			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1c37					_EFFail:
.1c37	68		pla				pla
.1c38	a8		tay				tay
.1c39	20 f7 21	jsr $21f7			jsr 	MInt32False
.1c3c	60		rts				rts
.1c3d					_EFValue:
.1c3d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c3f	20 aa 23	jsr $23aa		jsr	errorHandler
.1c42					_EFType:
.1c42	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c44	20 aa 23	jsr $23aa		jsr	errorHandler
.1c47					SetEventTimer:
.1c47	a0 00		ldy #$00			ldy 	#0
.1c49	18		clc				clc
.1c4a	a5 06		lda $06				lda 	temp1
.1c4c	75 49		adc $49,x			adc 	esInt0+1,x
.1c4e	91 04		sta ($04),y			sta		(temp0),y
.1c50	c8		iny				iny
.1c51	a5 07		lda $07				lda 	temp1+1
.1c53	75 51		adc $51,x			adc 	esInt1+1,x
.1c55	91 04		sta ($04),y			sta		(temp0),y
.1c57	88		dey				dey
.1c58	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1c5a	d0 04		bne $1c60			bne 	_SETExit 					; zero means initialise.....
.1c5c	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1c5e	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1c60					_SETExit:
.1c60	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.1c61					EvaluateTerm:
.1c61	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.1c63	20 9e 1a	jsr $1a9e			jsr 	EvaluateLevel
.1c66	20 4d 1a	jsr $1a4d			jsr 	DereferenceOne
.1c69	60		rts				rts
.1c6a					EvaluateNumericTerm:
.1c6a	20 61 1c	jsr $1c61			jsr 	EvaluateTerm
.1c6d	b5 40		lda $40,x			lda 	esType,x
.1c6f	0a		asl a				asl 	a 							; see if it's a string.
.1c70	30 09		bmi $1c7b			bmi 	ENTType
.1c72	60		rts				rts
.1c73					EvaluateIntegerTerm:
.1c73	20 61 1c	jsr $1c61			jsr 	EvaluateTerm
.1c76	b5 40		lda $40,x			lda 	esType,x
.1c78	d0 01		bne $1c7b			bne 	ENTType
.1c7a	60		rts				rts
.1c7b					ENTType:
.1c7b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c7d	20 aa 23	jsr $23aa		jsr	errorHandler
.1c80					EvaluateRoot:
.1c80	a2 00		ldx #$00			ldx 	#0
.1c82					Evaluate:
.1c82	a9 00		lda #$00			lda 	#0
.1c84	20 9e 1a	jsr $1a9e			jsr 	EvaluateLevel
.1c87	20 4d 1a	jsr $1a4d			jsr 	DereferenceOne
.1c8a	60		rts				rts
.1c8b					EvaluateNumeric:
.1c8b	20 82 1c	jsr $1c82			jsr 	Evaluate
.1c8e	b5 40		lda $40,x			lda 	esType,x
.1c90	0a		asl a				asl 	a 							; see if it's a string.
.1c91	30 e8		bmi $1c7b			bmi 	ENTType
.1c93	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1c94	4a		lsr a				lsr 	a
.1c95	60		rts				rts
.1c96					EvaluateString:
.1c96	20 82 1c	jsr $1c82			jsr 	Evaluate
.1c99	b5 40		lda $40,x			lda 	esType,x
.1c9b	0a		asl a				asl 	a 							; see if it's a string.
.1c9c	10 dd		bpl $1c7b			bpl 	ENTType
.1c9e	60		rts				rts
.1c9f					EvaluateRootInteger:
.1c9f	a2 00		ldx #$00			ldx 	#0
.1ca1					EvaluateInteger:
.1ca1	20 82 1c	jsr $1c82			jsr 	Evaluate
.1ca4	b5 40		lda $40,x			lda 	esType,x
.1ca6	d0 d3		bne $1c7b			bne 	ENTType
.1ca8	60		rts				rts
.1ca9					EvaluateSmallInteger:
.1ca9	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger
.1cac	b5 50		lda $50,x			lda 	esInt1,x
.1cae	15 58		ora $58,x			ora 	esInt2,x
.1cb0	15 60		ora $60,x			ora 	esInt3,x
.1cb2	d0 03		bne $1cb7			bne 	_ESIValue
.1cb4	b5 48		lda $48,x			lda 	esInt0,x
.1cb6	60		rts				rts
.1cb7					_ESIValue:
.1cb7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1cb9	20 aa 23	jsr $23aa		jsr	errorHandler
.1cbc					LinkEvaluate:
.1cbc	aa		tax				tax
.1cbd	20 82 1c	jsr $1c82			jsr 	Evaluate
.1cc0	8a		txa				txa
.1cc1	60		rts				rts
.1cc2					LinkEvaluateTerm:
.1cc2	aa		tax				tax
.1cc3	20 61 1c	jsr $1c61			jsr 	EvaluateTerm
.1cc6	8a		txa				txa
.1cc7	60		rts				rts
.1cc8					LinkEvaluateInteger:
.1cc8	aa		tax				tax
.1cc9	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger
.1ccc	8a		txa				txa
.1ccd	60		rts				rts
.1cce					LinkEvaluateSmallInt:
.1cce	aa		tax				tax
.1ccf	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger
.1cd2	8a		txa				txa
.1cd3	60		rts				rts
.1cd4					EvaluateReference:
.1cd4	ad d1 1b	lda $1bd1			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1cd7	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1cd8	e9 01		sbc #$01			sbc 	#1
.1cda	20 9e 1a	jsr $1a9e			jsr 	EvaluateLevel
.1cdd	b5 40		lda $40,x			lda 	esType,x
.1cdf	10 01		bpl $1ce2			bpl 	_ERFail
.1ce1	60		rts				rts
.1ce2					_ERFail:
.1ce2	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1ce4	20 aa 23	jsr $23aa		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1ce7					UnaryLen:
.1ce7	20 f5 1c	jsr $1cf5			jsr 	ULStart
.1cea					ULFinish:
.1cea	b1 04		lda ($04),y			lda 	(temp0),y 					; get length prefix
.1cec	a4 0c		ldy $0c				ldy 	tempShort 					; get Y back
.1cee	20 06 22	jsr $2206			jsr 	MInt32Set8Bit 				; write it out.
.1cf1	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1cf4	60		rts				rts
.1cf5	20 96 1c	jsr $1c96	ULStart:jsr 	EvaluateString
.1cf8	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1cfa	85 04		sta $04				sta 	temp0
.1cfc	b5 50		lda $50,x			lda 	esInt1,x
.1cfe	85 05		sta $05				sta 	temp0+1
.1d00	84 0c		sty $0c				sty 	tempShort 					; get length
.1d02	a0 00		ldy #$00			ldy 	#0
.1d04	60		rts				rts
.1d05					UnaryAsc:
.1d05	20 f5 1c	jsr $1cf5			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1d08	b1 04		lda ($04),y			lda 	(temp0),y 					; read length
.1d0a	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1d0b	c9 00		cmp #$00			cmp 	#0
.1d0d	d0 db		bne $1cea			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.1d0f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d11	20 aa 23	jsr $23aa		jsr	errorHandler
.1d14					UnaryAbs:
.1d14	20 8b 1c	jsr $1c8b			jsr 	EvaluateNumeric 			; some numeric value
.1d17	b0 07		bcs $1d20			bcs 	_UAFloat 					; CS then float, so use that function
.1d19	20 ac 21	jsr $21ac			jsr 	MInt32Absolute 				; int version
.1d1c	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1d1f	60		rts				rts
.1d20					_UAFloat:
.1d20	8a		txa				txa 								; float version
.1d21	a2 00		ldx #$00		ldx	#0
.1d23	20 92 26	jsr $2692		jsr	floatingpointHandler
.1d26	aa		tax				tax
.1d27	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1d2a	60		rts				rts
.1d2b					UnarySgn:
.1d2b	20 8b 1c	jsr $1c8b			jsr 	EvaluateNumeric 			; same as above but sign of value
.1d2e	b0 07		bcs $1d37			bcs 	_USFloat
.1d30	20 e4 21	jsr $21e4			jsr 	MInt32Sign
.1d33	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1d36	60		rts				rts
.1d37					_USFloat:
.1d37	8a		txa				txa
.1d38	a2 0e		ldx #$0e		ldx	#14
.1d3a	20 92 26	jsr $2692		jsr	floatingpointHandler
.1d3d	aa		tax				tax
.1d3e	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1d41	60		rts				rts
.1d42					UnaryPeek:
.1d42	20 6e 1d	jsr $1d6e			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.1d45	4c 62 1d	jmp $1d62			jmp 	PDLByte0
.1d48					UnaryDeek:
.1d48	20 6e 1d	jsr $1d6e			jsr 	PDLCode
.1d4b	4c 5c 1d	jmp $1d5c			jmp 	PDLByte1
.1d4e					UnaryLeek:
.1d4e	20 6e 1d	jsr $1d6e			jsr 	PDLCode
.1d51	a0 03		ldy #$03			ldy 	#3							; read 3-2
.1d53	b1 04		lda ($04),y			lda 	(temp0),y
.1d55	95 60		sta $60,x			sta 	esInt3,x
.1d57	88		dey				dey
.1d58	b1 04		lda ($04),y			lda 	(temp0),y
.1d5a	95 58		sta $58,x			sta 	esInt2,x
.1d5c					PDLByte1:
.1d5c	a0 01		ldy #$01			ldy 	#1
.1d5e	b1 04		lda ($04),y			lda 	(temp0),y
.1d60	95 50		sta $50,x			sta 	esInt1,x
.1d62					PDLByte0:
.1d62	a0 00		ldy #$00			ldy 	#0
.1d64	b1 04		lda ($04),y			lda 	(temp0),y
.1d66	95 48		sta $48,x			sta 	esInt0,x
.1d68	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1d6a	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; check right and return
.1d6d	60		rts				rts
.1d6e					PDLCode:
.1d6e	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger 			; some address
.1d71	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d73	85 04		sta $04				sta 	temp0
.1d75	b5 50		lda $50,x			lda 	esInt1,x
.1d77	85 05		sta $05				sta 	temp0+1
.1d79	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1d7b	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.1d7d	95 58		sta $58,x			sta 	esInt2,x
.1d7f	95 60		sta $60,x			sta 	esInt3,x
.1d81	84 0c		sty $0c				sty 	tempShort 					; save Y
.1d83	60		rts				rts
.1d84					Unary_Random:
.1d84	20 27 22	jsr $2227			jsr 	MInt32Random 				; generate random number.
.1d87	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1d89	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1d8b	f0 08		beq $1d95			beq 	_URExit
.1d8d	e8		inx				inx 								; load range 0..r-1 into +1
.1d8e	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger
.1d91	ca		dex				dex
.1d92	20 56 20	jsr $2056			jsr 	MInt32Modulus 				; calculate random % modulus
.1d95					_URExit:
.1d95	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; check right and return
.1d98	60		rts				rts
.1d99					Unary_Min:
.1d99	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1d9b	d0 02		bne $1d9f			bne 	UnaryMBody
.1d9d					Unary_Max:
.1d9d	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1d9f					UnaryMBody:
.1d9f	48		pha				pha 								; save comparator on stack, shows min or max
.1da0	20 82 1c	jsr $1c82			jsr 	Evaluate 					; get the first thing to check
.1da3					_UnaryMLoop:
.1da3	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1da5	c8		iny				iny
.1da6	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.1da8	f0 09		beq $1db3			beq 	_UnaryMExit
.1daa	c9 c8		cmp #$c8			cmp 	#TKW_COMMA 					; found , indicates more.
.1dac	f0 07		beq $1db5			beq 	_UnaryMCompare
.1dae	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1db0	20 aa 23	jsr $23aa		jsr	errorHandler
.1db3					_UnaryMExit:
.1db3	68		pla				pla 								; done so throw comparator and return.
.1db4	60		rts				rts
.1db5					_UnaryMCompare:
.1db5	e8		inx				inx 								; get the 2nd thing to evaluate
.1db6	20 82 1c	jsr $1c82			jsr 	Evaluate
.1db9	ca		dex				dex
.1dba	20 50 19	jsr $1950			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1dbd	85 0c		sta $0c				sta 	tempShort 					; save result
.1dbf	68		pla				pla 								; get what we need
.1dc0	48		pha				pha
.1dc1	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1dc3	d0 de		bne $1da3			bne 	_UnaryMLoop 				; no, try another value.
.1dc5	20 f7 21	jsr $21f7			jsr 	MInt32False 				; promote 2nd to 1st.
.1dc8	20 e0 20	jsr $20e0			jsr 	MInt32Add
.1dcb	4c a3 1d	jmp $1da3			jmp 	_UnaryMLoop
.1dce					Unary_Page:
.1dce	20 f7 21	jsr $21f7			jsr 	MInt32False 				; zero
.1dd1	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1dd4	95 48		sta $48,x			sta 	esInt0,x
.1dd6	ad c9 0a	lda $0ac9			lda 	basePage+1
.1dd9	95 50		sta $50,x			sta 	esInt1,x
.1ddb	60		rts				rts
.1ddc					UnaryReference:
.1ddc	a9 0f		lda #$0f			lda 	#15
.1dde	20 9e 1a	jsr $1a9e			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1de1	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1de3	10 05		bpl $1dea			bpl 	UType
.1de5	a9 00		lda #$00			lda 	#0 							; make it an integer
.1de7	95 40		sta $40,x			sta 	esType,x
.1de9	60		rts				rts
.1dea					UType:
.1dea	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1dec	20 aa 23	jsr $23aa		jsr	errorHandler
.1def					UnaryHexMarker:
.1def	4c 73 1c	jmp $1c73			jmp 	EvaluateIntegerTerm
.1df2					UnaryComplement:
.1df2	20 73 1c	jsr $1c73			jsr 	EvaluateIntegerTerm
.1df5	20 cb 21	jsr $21cb			jsr 	MInt32Not
.1df8	60		rts				rts
.1df9					UnaryIntToFloat:
.1df9	20 8b 1c	jsr $1c8b			jsr 	EvaluateNumeric				; some number
.1dfc	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.1dfe	d0 0b		bne $1e0b			bne 	_UIFExit
.1e00	8a		txa				txa 								; convert and set type
.1e01	a2 1a		ldx #$1a		ldx	#26
.1e03	20 92 26	jsr $2692		jsr	floatingpointHandler
.1e06	aa		tax				tax
.1e07	a9 01		lda #$01			lda 	#1
.1e09	95 40		sta $40,x			sta 	esType,x
.1e0b					_UIFExit:
.1e0b	60		rts				rts
.1e0c					UnaryFloatToInt:
.1e0c	20 8b 1c	jsr $1c8b			jsr 	EvaluateNumeric 			; the number
.1e0f	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.1e11	f0 0b		beq $1e1e			beq 	_UFIExit
.1e13	8a		txa				txa 								; convert to int
.1e14	a2 12		ldx #$12		ldx	#18
.1e16	20 92 26	jsr $2692		jsr	floatingpointHandler
.1e19	aa		tax				tax
.1e1a	a9 00		lda #$00			lda 	#0 							; set type
.1e1c	95 40		sta $40,x			sta 	esType,x
.1e1e					_UFIExit:
.1e1e	60		rts				rts
.1e1f					UnaryAlloc:
.1e1f	e8		inx				inx 								; evaluate memory required
.1e20	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger
.1e23	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1e26	ca		dex				dex
.1e27	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1e29	15 61		ora $61,x			ora 	esInt3+1,x
.1e2b	d0 19		bne $1e46			bne 	_UABadValue
.1e2d	20 f7 21	jsr $21f7			jsr 	MInt32False					; zero return.
.1e30	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1e32	95 50		sta $50,x			sta 	esInt1,x
.1e34	a5 0f		lda $0f				lda 	lowMemory
.1e36	95 48		sta $48,x			sta 	esInt0,x
.1e38	18		clc				clc 								; add alloc required.
.1e39	75 49		adc $49,x			adc 	esInt0+1,x
.1e3b	85 0f		sta $0f				sta 	lowMemory
.1e3d	a5 10		lda $10				lda 	lowMemory+1
.1e3f	75 51		adc $51,x			adc 	esInt1+1,x
.1e41	85 10		sta $10				sta 	lowMemory+1
.1e43	b0 01		bcs $1e46			bcs		_UABadValue 				; overflow definitely bad.
.1e45	60		rts				rts
.1e46					_UABadValue:
.1e46	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1e48	20 aa 23	jsr $23aa		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1e4b					UnaryTimer:
.1e4b	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; no parameters
.1e4e	98		tya				tya
.1e4f	48		pha				pha
.1e50	20 1e 22	jsr $221e			jsr 	MInt32Zero 					; zero result
.1e53	86 04		stx $04				stx 	temp0 						; returning in YA so can't use .pshx
.1e55	a2 12		ldx #$12		ldx	#18
.1e57	20 93 23	jsr $2393		jsr	deviceHandler
.1e5a	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1e5c	95 48		sta $48,x			sta 	esInt0,x
.1e5e	98		tya				tya
.1e5f	95 50		sta $50,x			sta 	esInt1,x
.1e61	68		pla				pla
.1e62	a8		tay				tay
.1e63	60		rts				rts
.1e64					UnaryInkey:
.1e64	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1e67	86 04		stx $04				stx 	temp0
.1e69	a2 08		ldx #$08		ldx	#8
.1e6b	20 93 23	jsr $2393		jsr	deviceHandler
.1e6e	a6 04		ldx $04				ldx 	temp0
.1e70	20 06 22	jsr $2206			jsr 	MInt32Set8Bit
.1e73	60		rts				rts
.1e74					UnaryGet:
.1e74	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1e77	86 04		stx $04				stx 	temp0
.1e79					_UGLoop:
.1e79	a2 08		ldx #$08		ldx	#8
.1e7b	20 93 23	jsr $2393		jsr	deviceHandler
.1e7e	c9 00		cmp #$00			cmp 	#0
.1e80	f0 f7		beq $1e79			beq 	_UGLoop
.1e82	a6 04		ldx $04				ldx 	temp0
.1e84	20 06 22	jsr $2206			jsr 	MInt32Set8Bit
.1e87	60		rts				rts
.1e88					UnarySys:
.1e88	20 a1 1c	jsr $1ca1			jsr 	EvaluateInteger 				; get the address
.1e8b	20 6a 22	jsr $226a			jsr 	CheckRightParen
.1e8e	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 						; copy call address to temp0
.1e91	8a		txa				txa
.1e92	48		pha				pha
.1e93	98		tya				tya
.1e94	48		pha				pha
.1e95	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1e98	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1e9b	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1e9e	20 ad 1e	jsr $1ead			jsr 	_CallTemp0
.1ea1	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1ea3	68		pla				pla
.1ea4	a8		tay				tay
.1ea5	68		pla				pla
.1ea6	aa		tax				tax
.1ea7	a5 0c		lda $0c				lda 	tempShort
.1ea9	20 06 22	jsr $2206			jsr 	MInt32Set8Bit 					; return result.
.1eac	60		rts				rts
.1ead					_CallTemp0:
.1ead	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1eb0					ExecChr:
.1eb0	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger		; character number 0-255
.1eb3	20 6a 22	jsr $226a			jsr 	CheckRightParen				; right bracket
.1eb6	98		tya				tya
.1eb7	48		pha				pha
.1eb8	8a		txa				txa 								; A = stack
.1eb9	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1ebb	a2 00		ldx #$00		ldx	#0
.1ebd	20 2e 29	jsr $292e		jsr	stringHandler
.1ec0	aa		tax				tax 								; X = stack
.1ec1	68		pla				pla
.1ec2	a8		tay				tay
.1ec3	60		rts				rts
.1ec4					ExecLower:
.1ec4	38		sec				sec 								; set carry is lower
.1ec5	b0 01		bcs $1ec8			bcs 	ExecUpperLower
.1ec7					ExecUpper:
.1ec7	18		clc				clc 								; clear carry is upper
.1ec8					ExecUpperLower:
.1ec8	08		php				php 								; save carry
.1ec9	20 96 1c	jsr $1c96			jsr 	EvaluateString 				; string to stack,X
.1ecc	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; check closing right bracket.
.1ecf	28		plp				plp 								; restore carry, save Y
.1ed0	98		tya				tya
.1ed1	48		pha				pha
.1ed2	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.1ed4	2a		rol a				rol 	a
.1ed5	a8		tay				tay 								; now in Y
.1ed6	8a		txa				txa 								; do the substring and exit.
.1ed7	a2 08		ldx #$08		ldx	#8
.1ed9	20 2e 29	jsr $292e		jsr	stringHandler
.1edc	aa		tax				tax
.1edd	68		pla				pla
.1ede	a8		tay				tay
.1edf	60		rts				rts
.1ee0					ExecLeft:
.1ee0	20 96 1c	jsr $1c96			jsr 	EvaluateString 				; string to stack,X
.1ee3	20 77 22	jsr $2277			jsr 	CheckComma
.1ee6	e8		inx				inx
.1ee7	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1ee9	20 06 22	jsr $2206			jsr 	MInt32Set8Bit
.1eec	e8		inx				inx
.1eed	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1ef0					ExecSubstring:
.1ef0	ca		dex				dex 								; fix up X
.1ef1	ca		dex				dex
.1ef2	20 6a 22	jsr $226a			jsr 	CheckRightParen 			; check closing right bracket.
.1ef5	8a		txa				txa 								; do the substring and exit.
.1ef6	a2 0a		ldx #$0a		ldx	#10
.1ef8	20 2e 29	jsr $292e		jsr	stringHandler
.1efb	aa		tax				tax
.1efc	60		rts				rts
.1efd					ExecMid:
.1efd	20 96 1c	jsr $1c96			jsr 	EvaluateString 				; string to stack,X
.1f00	20 77 22	jsr $2277			jsr 	CheckComma
.1f03	e8		inx				inx
.1f04	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f07	c9 00		cmp #$00			cmp 	#0
.1f09	f0 15		beq $1f20			beq 	_EMValue
.1f0b	e8		inx				inx
.1f0c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.1f0e	20 06 22	jsr $2206			jsr 	MInt32Set8Bit
.1f11	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1f13	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1f15	f0 d9		beq $1ef0			beq 	ExecSubString
.1f17	20 77 22	jsr $2277			jsr 	CheckComma
.1f1a	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1f1d	4c f0 1e	jmp $1ef0			jmp 	ExecSubString
.1f20					_EMValue:
.1f20	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1f22	20 aa 23	jsr $23aa		jsr	errorHandler
.1f25					ExecRight:
.1f25	20 96 1c	jsr $1c96			jsr 	EvaluateString 				; string to stack,X
.1f28	20 77 22	jsr $2277			jsr 	CheckComma
.1f2b	e8		inx				inx
.1f2c	20 a9 1c	jsr $1ca9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1f2f	ca		dex				dex
.1f30	98		tya				tya
.1f31	48		pha				pha
.1f32	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1f34	85 04		sta $04				sta 	temp0
.1f36	b5 50		lda $50,x			lda 	esInt1,x
.1f38	85 05		sta $05				sta 	temp0+1
.1f3a	a0 00		ldy #$00			ldy 	#0 							; point to length
.1f3c	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1f3e	18		clc				clc 								; add 1.
.1f3f	69 01		adc #$01			adc 	#1
.1f41	38		sec				sec
.1f42	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1f44	f0 02		beq $1f48			beq		_ERMake1 					; if zero, make it 1.
.1f46	b0 02		bcs $1f4a			bcs		_EROkay
.1f48					_ERMake1:
.1f48	a9 01		lda #$01			lda 	#1 							; start position.
.1f4a					_EROkay:
.1f4a	e8		inx				inx 								; set start pos.
.1f4b	95 48		sta $48,x			sta 	esInt0,x
.1f4d	e8		inx				inx
.1f4e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1f50	20 06 22	jsr $2206			jsr 	MInt32Set8Bit
.1f53	68		pla				pla
.1f54	a8		tay				tay
.1f55	4c f0 1e	jmp $1ef0			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1f58					MInt32And:
.1f58	b5 48		lda $48,x			lda 	esInt0,x
.1f5a	35 49		and $49,x			and 	esInt0+1,x
.1f5c	95 48		sta $48,x			sta 	esInt0,x
.1f5e	b5 50		lda $50,x			lda 	esInt1,x
.1f60	35 51		and $51,x			and 	esInt1+1,x
.1f62	95 50		sta $50,x			sta 	esInt1,x
.1f64	b5 58		lda $58,x			lda 	esInt2,x
.1f66	35 59		and $59,x			and 	esInt2+1,x
.1f68	95 58		sta $58,x			sta 	esInt2,x
.1f6a	b5 60		lda $60,x			lda 	esInt3,x
.1f6c	35 61		and $61,x			and 	esInt3+1,x
.1f6e	95 60		sta $60,x			sta 	esInt3,x
.1f70	60		rts				rts
.1f71					MInt32Or:
.1f71	b5 48		lda $48,x			lda 	esInt0,x
.1f73	15 49		ora $49,x			ora 	esInt0+1,x
.1f75	95 48		sta $48,x			sta 	esInt0,x
.1f77	b5 50		lda $50,x			lda 	esInt1,x
.1f79	15 51		ora $51,x			ora 	esInt1+1,x
.1f7b	95 50		sta $50,x			sta 	esInt1,x
.1f7d	b5 58		lda $58,x			lda 	esInt2,x
.1f7f	15 59		ora $59,x			ora 	esInt2+1,x
.1f81	95 58		sta $58,x			sta 	esInt2,x
.1f83	b5 60		lda $60,x			lda 	esInt3,x
.1f85	15 61		ora $61,x			ora 	esInt3+1,x
.1f87	95 60		sta $60,x			sta 	esInt3,x
.1f89	60		rts				rts
.1f8a					MInt32Xor:
.1f8a	b5 48		lda $48,x			lda 	esInt0,x
.1f8c	55 49		eor $49,x			eor 	esInt0+1,x
.1f8e	95 48		sta $48,x			sta 	esInt0,x
.1f90	b5 50		lda $50,x			lda 	esInt1,x
.1f92	55 51		eor $51,x			eor 	esInt1+1,x
.1f94	95 50		sta $50,x			sta 	esInt1,x
.1f96	b5 58		lda $58,x			lda 	esInt2,x
.1f98	55 59		eor $59,x			eor 	esInt2+1,x
.1f9a	95 58		sta $58,x			sta 	esInt2,x
.1f9c	b5 60		lda $60,x			lda 	esInt3,x
.1f9e	55 61		eor $61,x			eor 	esInt3+1,x
.1fa0	95 60		sta $60,x			sta 	esInt3,x
.1fa2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1fa3					MInt32Compare:
.1fa3	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.1fa5	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fa7	d0 13		bne $1fbc			bne 	MInt32Compare2
.1fa9	b5 50		lda $50,x			lda 	esInt1,x
.1fab	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1fad	d0 0d		bne $1fbc			bne 	MInt32Compare2
.1faf	b5 58		lda $58,x			lda 	esInt2,x
.1fb1	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1fb3	d0 07		bne $1fbc			bne 	MInt32Compare2
.1fb5	b5 60		lda $60,x			lda 	esInt3,x
.1fb7	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.1fb9	d0 01		bne $1fbc			bne 	MInt32Compare2
.1fbb	60		rts				rts
.1fbc					MInt32Compare2:
.1fbc	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1fbe	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1fc0	b5 50		lda $50,x			lda		esInt1,x
.1fc2	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1fc4	b5 58		lda $58,x			lda		esInt2,x
.1fc6	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1fc8	b5 60		lda $60,x			lda		esInt3,x
.1fca	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1fcc	50 02		bvc $1fd0			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.1fce	49 80		eor #$80			eor 	#$80
.1fd0					_I32LNoOverflow
.1fd0	30 03		bmi $1fd5			bmi 	MInt32CLess					; if -ve then return $FF
.1fd2	a9 01		lda #$01			lda 	#$01						; else return $01
.1fd4	60		rts				rts
.1fd5					MInt32CLess:
.1fd5	a9 ff		lda #$ff			lda 	#$FF
.1fd7	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1fd8					MInt32SDivide:
.1fd8	98		tya				tya  								; save Y, which is the count of negations
.1fd9	48		pha				pha
.1fda	a0 00		ldy #$00			ldy 	#0 							; zero count
.1fdc	20 f4 1f	jsr $1ff4			jsr 	_MInt32SRemSign 			; unsign TOS
.1fdf	e8		inx				inx 								; unsign TOS+1
.1fe0	20 f4 1f	jsr $1ff4			jsr 	_MInt32SRemSign
.1fe3	ca		dex				dex
.1fe4	98		tya				tya 								; save sign count on stack
.1fe5	48		pha				pha
.1fe6	20 fd 1f	jsr $1ffd			jsr 	MInt32UDivide 				; unsigned division
.1fe9	68		pla				pla 								; get sign count back
.1fea	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1fec	f0 03		beq $1ff1			beq 	_I32SNoNeg
.1fee	20 b1 21	jsr $21b1			jsr 	MInt32Negate
.1ff1					_I32SNoNeg:
.1ff1	68		pla				pla 								; restoe Y and exit
.1ff2	a8		tay				tay
.1ff3	60		rts				rts
.1ff4					_MInt32SRemSign:
.1ff4	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1ff6	10 04		bpl $1ffc			bpl 	_MInt32SRSExit
.1ff8	c8		iny				iny 								; increment the sign count
.1ff9	20 b1 21	jsr $21b1			jsr 	MInt32Negate 				; negate the value.
.1ffc					_MInt32SRSExit:
.1ffc	60		rts				rts
.1ffd					MInt32UDivide:
.1ffd	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1fff	15 51		ora $51,x			ora 	esInt1+1,x
.2001	15 52		ora $52,x			ora 	esInt1+2,x
.2003	15 53		ora $53,x			ora 	esInt1+3,x
.2005	f0 4a		beq $2051			beq 	_MInt32DZero
.2007	e8		inx				inx 								; clear A
.2008	e8		inx				inx
.2009	20 f7 21	jsr $21f7			jsr 	MInt32False
.200c	ca		dex				dex
.200d	ca		dex				dex
.200e	98		tya				tya 								; save Y on the stack
.200f	48		pha				pha
.2010	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2012					_MInt32UDLoop:
.2012	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2014	36 50		rol $50,x			rol 	esInt1,x
.2016	36 58		rol $58,x			rol 	esInt2,x
.2018	36 60		rol $60,x			rol 	esInt3,x
.201a	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.201c	36 52		rol $52,x			rol 	esInt1+2,x
.201e	36 5a		rol $5a,x			rol 	esInt2+2,x
.2020	36 62		rol $62,x			rol 	esInt3+2,x
.2022	38		sec				sec 								; calculate A-M saving result on the stack
.2023	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2025	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2027	48		pha				pha
.2028	b5 52		lda $52,x			lda 	esInt1+2,x
.202a	f5 51		sbc $51,x			sbc 	esInt1+1,x
.202c	48		pha				pha
.202d	b5 5a		lda $5a,x			lda 	esInt2+2,x
.202f	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2031	48		pha				pha
.2032	b5 62		lda $62,x			lda 	esInt3+2,x
.2034	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2036	90 10		bcc $2048			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2038	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.203a	68		pla				pla
.203b	95 5a		sta $5a,x			sta 	esInt2+2,x
.203d	68		pla				pla
.203e	95 52		sta $52,x			sta 	esInt1+2,x
.2040	68		pla				pla
.2041	95 4a		sta $4a,x			sta 	esInt0+2,x
.2043	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2045	4c 4b 20	jmp $204b			jmp 	_MInt32Next 					; do the next iteration
.2048					_MInt32NoSubtract:
.2048	68		pla				pla
.2049	68		pla				pla
.204a	68		pla				pla
.204b					_MInt32Next:
.204b	88		dey				dey 								; do this 32 times.
.204c	d0 c4		bne $2012			bne 	_MInt32UDLoop
.204e	68		pla				pla 								; restore Y and exit
.204f	a8		tay				tay
.2050	60		rts				rts
.2051					_MInt32DZero:
.2051	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2053	20 aa 23	jsr $23aa		jsr	errorHandler
.2056					MInt32Modulus:
.2056	20 fd 1f	jsr $1ffd			jsr 	MInt32UDivide 				; do the division.
.2059	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.205b	95 60		sta $60,x			sta 	esInt3,x
.205d	b5 5a		lda $5a,x			lda 	esInt2+2,x
.205f	95 58		sta $58,x			sta 	esInt2,x
.2061	b5 52		lda $52,x			lda 	esInt1+2,x
.2063	95 50		sta $50,x			sta 	esInt1,x
.2065	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2067	95 48		sta $48,x			sta 	esInt0,x
.2069	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0b1a					fs32Length:
>0b1a							.fill 	1
.206a					MInt32FromString:
.206a	85 0c		sta $0c				sta 	tempShort 					; save base
.206c	98		tya				tya
.206d	48		pha				pha
.206e	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2070	b1 04		lda ($04),y			lda 	(temp0),y
.2072	8d 1a 0b	sta $0b1a			sta 	fs32Length
.2075	f0 65		beq $20dc			beq 	_I32FSFail2					; fail if length zero.
.2077	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2079	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.207b	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.207d	d0 09		bne $2088			bne 	_I32FSNotNegative
.207f	ad 1a 0b	lda $0b1a			lda 	fs32Length 					; get length back.
.2082	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2084	f0 56		beq $20dc			beq 	_I32FSFail2
.2086	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2088					_I32FSNotNegative:
.2088	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.208a	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.208c	d0 02		bne $2090			bne 	_I32FSNN2
.208e	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2090					_I32FSNN2:
.2090	48		pha				pha 								; save base + final sign on stack.
.2091	20 f7 21	jsr $21f7			jsr 	MInt32False 				; zero the return value.
.2094					_I32FSMainLoop:
.2094	68		pla				pla 								; get the base back into tempShort
.2095	48		pha				pha
.2096	29 7f		and #$7f			and 	#$7F
.2098	85 0c		sta $0c				sta 	tempShort
.209a	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.209c	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.209e	90 02		bcc $20a2			bcc 	_I32FSNotLC
.20a0	e9 20		sbc #$20			sbc 	#32
.20a2					_I32FSNotLC:
.20a2	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.20a3	e9 30		sbc #$30			sbc 	#"0"
.20a5	90 34		bcc $20db			bcc 	_I32FSFail 					; nothing more to do.
.20a7	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.20a9	90 06		bcc $20b1			bcc 	_I32FSValidate
.20ab	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.20ad	90 2c		bcc $20db			bcc 	_I32FSFail
.20af	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.20b1					_I32FSValidate:
.20b1	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.20b3	b0 26		bcs $20db			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.20b5	48		pha				pha 								; save the new digit value.
.20b6	e8		inx				inx 								; put base into next slot up on stack
.20b7	a5 0c		lda $0c				lda 	tempShort
.20b9	20 06 22	jsr $2206			jsr 	MInt32Set8Bit
.20bc	ca		dex				dex
.20bd	20 14 21	jsr $2114			jsr 	MInt32Multiply 				; multiply current by the base
.20c0	e8		inx				inx
.20c1	68		pla				pla  								; put additive into next slot
.20c2	20 06 22	jsr $2206			jsr 	MInt32Set8Bit
.20c5	ca		dex				dex
.20c6	20 e0 20	jsr $20e0			jsr 	MInt32Add 					; and add it
.20c9	c8		iny				iny 								; bump the character pointer
.20ca	cc 1a 0b	cpy $0b1a			cpy 	fs32Length 					; until > length.
.20cd	f0 c5		beq $2094			beq 	_I32FSMainLoop
.20cf	90 c3		bcc $2094			bcc 	_I32FSMainLoop
.20d1					_I32FSDone:
.20d1	68		pla				pla 								; get base/final sign back
.20d2	10 03		bpl $20d7			bpl 	_I32FSNN3
.20d4	20 b1 21	jsr $21b1			jsr 	MInt32Negate 				; negate the result.
.20d7					_I32FSNN3:
.20d7	68		pla				pla
.20d8	a8		tay				tay
.20d9	38		sec				sec
.20da	60		rts				rts
.20db					_I32FSFail:
.20db	68		pla				pla
.20dc					_I32FSFail2:
.20dc	68		pla				pla
.20dd	a8		tay				tay
.20de	18		clc				clc
.20df	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.20e0					MInt32Add:
.20e0	18		clc				clc
.20e1	b5 48		lda $48,x			lda 	esInt0,x
.20e3	75 49		adc $49,x			adc 	esInt0+1,x
.20e5	95 48		sta $48,x			sta 	esInt0,x
.20e7	b5 50		lda $50,x			lda 	esInt1,x
.20e9	75 51		adc $51,x			adc 	esInt1+1,x
.20eb	95 50		sta $50,x			sta 	esInt1,x
.20ed	b5 58		lda $58,x			lda 	esInt2,x
.20ef	75 59		adc $59,x			adc 	esInt2+1,x
.20f1	95 58		sta $58,x			sta 	esInt2,x
.20f3	b5 60		lda $60,x			lda 	esInt3,x
.20f5	75 61		adc $61,x			adc 	esInt3+1,x
.20f7	95 60		sta $60,x			sta 	esInt3,x
.20f9	60		rts				rts
.20fa					MInt32Sub:
.20fa	38		sec				sec
.20fb	b5 48		lda $48,x			lda 	esInt0,x
.20fd	f5 49		sbc $49,x			sbc 	esInt0+1,x
.20ff	95 48		sta $48,x			sta 	esInt0,x
.2101	b5 50		lda $50,x			lda 	esInt1,x
.2103	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2105	95 50		sta $50,x			sta 	esInt1,x
.2107	b5 58		lda $58,x			lda 	esInt2,x
.2109	f5 59		sbc $59,x			sbc 	esInt2+1,x
.210b	95 58		sta $58,x			sta 	esInt2,x
.210d	b5 60		lda $60,x			lda 	esInt3,x
.210f	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2111	95 60		sta $60,x			sta 	esInt3,x
.2113	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2114					MInt32Multiply:
.2114	e8		inx				inx 								; copy 2nd -> 3rd
.2115	20 3a 21	jsr $213a			jsr 	MInt32CopyUp
.2118	ca		dex				dex
.2119	20 3a 21	jsr $213a			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.211c	20 f7 21	jsr $21f7			jsr 	MInt32False 				; zero 1st.
.211f					_I32Loop:
.211f	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2121	29 01		and #$01			and 	#1
.2123	f0 03		beq $2128			beq 	_I32NoAdd 					; if set
.2125	20 e0 20	jsr $20e0			jsr 	MInt32Add 					; add 2nd to 1st.
.2128					_I32NoAdd:
.2128	e8		inx				inx 								; shift 2nd left
.2129	20 0c 22	jsr $220c			jsr 	MInt32ShiftLeft
.212c	e8		inx				inx  								; shift 3rd right
.212d	20 15 22	jsr $2215			jsr 	MInt32ShiftRight
.2130	20 1e 22	jsr $221e			jsr 	MInt32Zero 					; check if zero.
.2133	08		php				php 								; save status bits
.2134	ca		dex				dex 	 							; point back to 1st
.2135	ca		dex				dex
.2136	28		plp				plp 								; get status bits
.2137	d0 e6		bne $211f			bne 	_I32Loop 					; if non-zero keep going.
.2139	60		rts				rts
.213a					MInt32CopyUp:
.213a	b5 48		lda $48,x			lda 	esInt0,x
.213c	95 49		sta $49,x			sta 	esInt0+1,x
.213e	b5 50		lda $50,x			lda 	esInt1,x
.2140	95 51		sta $51,x			sta 	esInt1+1,x
.2142	b5 58		lda $58,x			lda 	esInt2,x
.2144	95 59		sta $59,x			sta 	esInt2+1,x
.2146	b5 60		lda $60,x			lda 	esInt3,x
.2148	95 61		sta $61,x			sta 	esInt3+1,x
.214a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0b1b					MCharCount:	.fill 	1						; count of converted characters
.214b					MLInt32ToString:
.214b	aa		tax				tax									; module passes stack in A, base in Y
.214c	98		tya				tya
.214d					MInt32ToString:
.214d	48		pha				pha 								; save base
.214e	85 0c		sta $0c				sta 	tempShort 					; save target base.
.2150	a9 00		lda #$00			lda 	#0
.2152	8d 1b 0b	sta $0b1b			sta 	MCharCount 					; clear character count to 0
.2155	98		tya				tya
.2156	48		pha				pha
.2157	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.2159	10 10		bpl $216b			bpl 	_I32TSUnsigned
.215b	48		pha				pha 								; save base on stack.
.215c	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.215e	10 08		bpl $2168			bpl 	_I32TSNoFlip
.2160	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2162	20 9e 21	jsr $219e			jsr 	MI32WriteCharacter
.2165	20 b1 21	jsr $21b1			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2168					_I32TSNoFlip:
.2168	68		pla				pla 								; get the base back
.2169	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.216b					_I32TSUnsigned:
.216b	20 79 21	jsr $2179			jsr 	MI32DivideWrite 			; recursive code to output string.
.216e	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2170	ad 1b 0b	lda $0b1b			lda 	MCharCount
.2173	91 04		sta ($04),y			sta 	(temp0),y
.2175	68		pla				pla
.2176	a8		tay				tay
.2177	68		pla				pla
.2178	60		rts				rts
.2179					MI32DivideWrite:
.2179	48		pha				pha 								; save the divisor/base
.217a	e8		inx				inx 								; write in the dividing position.
.217b	20 06 22	jsr $2206			jsr 	MInt32Set8Bit
.217e	ca		dex				dex
.217f	20 fd 1f	jsr $1ffd			jsr 	MInt32UDivide 				; divide number by base.
.2182	68		pla				pla 								; get the base into Y
.2183	a8		tay				tay
.2184	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2186	48		pha				pha
.2187	20 1e 22	jsr $221e			jsr 	MInt32Zero 					; is the result zero ?
.218a	f0 04		beq $2190			beq 	_I32NoRecurse 				; if so, don't recurse.
.218c	98		tya				tya 								; put base into A
.218d	20 79 21	jsr $2179			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2190					_I32NoRecurse:
.2190	68		pla				pla 								; get the remainder back
.2191	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2193	90 02		bcc $2197			bcc 	_I32NotHex
.2195	69 06		adc #$06			adc 	#7-1
.2197					_I32NotHex:
.2197	18		clc				clc 								; make it ASCII
.2198	69 30		adc #$30			adc 	#48
.219a	20 9e 21	jsr $219e			jsr 	MI32WriteCharacter 			; write the character out
.219d	60		rts				rts 								; and exit.
.219e					MI32WriteCharacter:
.219e	ee 1b 0b	inc $0b1b			inc 	MCharCount 					; bump count (space for leading count)
.21a1	ac 1b 0b	ldy $0b1b			ldy 	MCharCount 					; get position
.21a4	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.21a6	c8		iny				iny
.21a7	a9 00		lda #$00			lda 	#0
.21a9	91 04		sta ($04),y			sta 	(temp0),y
.21ab	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0b1c					MSeed32:	.fill 	4							; random number seed.
.21ac					MInt32Absolute:
.21ac	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.21ae	30 01		bmi $21b1			bmi 	MInt32Negate
.21b0	60		rts				rts
.21b1					MInt32Negate:
.21b1	38		sec				sec 								; subtract from zero.
.21b2	a9 00		lda #$00			lda 	#0
.21b4	f5 48		sbc $48,x			sbc 	esInt0,x
.21b6	95 48		sta $48,x			sta 	esInt0,x
.21b8	a9 00		lda #$00			lda 	#0
.21ba	f5 50		sbc $50,x			sbc 	esInt1,x
.21bc	95 50		sta $50,x			sta 	esInt1,x
.21be	a9 00		lda #$00			lda 	#0
.21c0	f5 58		sbc $58,x			sbc 	esInt2,x
.21c2	95 58		sta $58,x			sta 	esInt2,x
.21c4	a9 00		lda #$00			lda 	#0
.21c6	f5 60		sbc $60,x			sbc 	esInt3,x
.21c8	95 60		sta $60,x			sta 	esInt3,x
.21ca	60		rts				rts
.21cb					MInt32Not:
.21cb	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.21cd	49 ff		eor #$ff			eor 	#$FF
.21cf	95 48		sta $48,x			sta 	esInt0,x
.21d1	b5 50		lda $50,x			lda 	esInt1,x
.21d3	49 ff		eor #$ff			eor 	#$FF
.21d5	95 50		sta $50,x			sta 	esInt1,x
.21d7	b5 58		lda $58,x			lda 	esInt2,x
.21d9	49 ff		eor #$ff			eor 	#$FF
.21db	95 58		sta $58,x			sta 	esInt2,x
.21dd	b5 60		lda $60,x			lda 	esInt3,x
.21df	49 ff		eor #$ff			eor 	#$FF
.21e1	95 60		sta $60,x			sta 	esInt3,x
.21e3	60		rts				rts
.21e4					MInt32Sign:
.21e4	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.21e6	30 0b		bmi $21f3			bmi 	MInt32True 					; if set return -1 (true)
.21e8	20 1e 22	jsr $221e			jsr 	MInt32Zero 					; is it zero ?
.21eb	f0 0a		beq $21f7			beq 	MInt32False 				; if zero return 0 (false)
.21ed	20 f7 21	jsr $21f7			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.21f0	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.21f2	60		rts				rts
.21f3					MInt32True:
.21f3	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.21f5	d0 02		bne $21f9			bne 	MInt32WriteAll
.21f7					MInt32False:
.21f7	a9 00		lda #$00			lda 	#0
.21f9					MInt32WriteAll:
.21f9	95 48		sta $48,x			sta 	esInt0,x
.21fb					MInt32Write123:
.21fb	95 50		sta $50,x			sta 	esInt1,x
.21fd	95 58		sta $58,x			sta 	esInt2,x
.21ff	95 60		sta $60,x			sta 	esInt3,x
.2201	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2203	95 40		sta $40,x			sta 	esType,x
.2205	60		rts				rts
.2206					MInt32Set8Bit:
.2206	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2208	a9 00		lda #$00			lda 	#0 							; a value 0-255
.220a	f0 ef		beq $21fb			beq		MInt32Write123
.220c					MInt32ShiftLeft:
.220c	16 48		asl $48,x			asl 	esInt0,x
.220e	36 50		rol $50,x			rol	 	esInt1,x
.2210	36 58		rol $58,x			rol	 	esInt2,x
.2212	36 60		rol $60,x			rol	 	esInt3,x
.2214	60		rts				rts
.2215					MInt32ShiftRight:
.2215	56 60		lsr $60,x			lsr 	esInt3,x
.2217	76 58		ror $58,x			ror 	esInt2,x
.2219	76 50		ror $50,x			ror 	esInt1,x
.221b	76 48		ror $48,x			ror 	esInt0,x
.221d	60		rts				rts
.221e					MInt32Zero:
.221e	b5 48		lda $48,x			lda 	esInt0,x
.2220	15 50		ora $50,x			ora 	esInt1,x
.2222	15 58		ora $58,x			ora 	esInt2,x
.2224	15 60		ora $60,x			ora 	esInt3,x
.2226	60		rts				rts
.2227					MInt32Random:
.2227	98		tya				tya
.2228	48		pha				pha
.2229	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.222b	ad 1c 0b	lda $0b1c			lda 	MSeed32+0 					; check the seed isn't zero
.222e	d0 03		bne $2233			bne 	_Random1
.2230	a8		tay				tay 								; if so do it 256 times
.2231	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2233					_Random1:
.2233	0a		asl a				asl 	a
.2234	2e 1d 0b	rol $0b1d			rol 	MSeed32+1
.2237	2e 1e 0b	rol $0b1e			rol 	MSeed32+2
.223a	2e 1f 0b	rol $0b1f			rol 	MSeed32+3
.223d	90 02		bcc $2241			bcc 	_Random2
.223f	49 c5		eor #$c5			eor 	#$C5
.2241					_Random2:
.2241	88		dey				dey
.2242	d0 ef		bne $2233			bne 	_Random1
.2244	8d 1c 0b	sta $0b1c			sta 	MSeed32+0 					; copy the seed in.
.2247	95 48		sta $48,x			sta 	esInt0,x
.2249	ad 1d 0b	lda $0b1d			lda 	MSeed32+1
.224c	95 50		sta $50,x			sta 	esInt1,x
.224e	ad 1e 0b	lda $0b1e			lda 	MSeed32+2
.2251	95 58		sta $58,x			sta 	esInt2,x
.2253	ad 1f 0b	lda $0b1f			lda 	MSeed32+3
.2256	95 60		sta $60,x			sta 	esInt3,x
.2258	68		pla				pla
.2259	a8		tay				tay
.225a	a9 00		lda #$00			lda 	#0
.225c	95 40		sta $40,x			sta 	esType,x
.225e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.225f					CheckToken:
.225f	d1 02		cmp ($02),y			cmp 	(codePtr),y
.2261	d0 02		bne $2265			bne 	_CTError
.2263	c8		iny				iny
.2264	60		rts				rts
.2265					_CTError:
.2265	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2267	20 aa 23	jsr $23aa		jsr	errorHandler
.226a					CheckRightParen:
.226a	b1 02		lda ($02),y			lda 	(codePtr),y
.226c	c8		iny				iny
.226d	c9 c6		cmp #$c6			cmp 	#TKW_RPAREN
.226f	d0 01		bne $2272			bne 	_CRPError
.2271	60		rts				rts
.2272					_CRPError:
.2272	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2274	20 aa 23	jsr $23aa		jsr	errorHandler
.2277					CheckComma:
.2277	b1 02		lda ($02),y			lda 	(codePtr),y
.2279	c8		iny				iny
.227a	c9 c8		cmp #$c8			cmp 	#TKW_COMMA
.227c	d0 01		bne $227f			bne 	_CCError
.227e	60		rts				rts
.227f					_CCError:
.227f	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2281	20 aa 23	jsr $23aa		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.3291					ScanForward:
.3291	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.3293	86 07		stx $07				stx 	temp1+1
.3295	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.3297	85 08		sta $08				sta 	temp2
.3299	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.329b	c8		iny				iny
.329c	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.329e	d0 08		bne $32a8			bne 	_SFNoCheck 					; if so, check token against entered values.
.32a0	c5 06		cmp $06				cmp 	temp1 						; if either matches, we've reached the token
.32a2	f0 24		beq $32c8			beq 	_SFExit 					; at the same strcture depth.
.32a4	c5 07		cmp $07				cmp 	temp1+1
.32a6	f0 20		beq $32c8			beq 	_SFExit
.32a8					_SFNoCheck:
.32a8	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.32aa	90 ed		bcc $3299			bcc 	_SFLoop
.32ac	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.32ae	90 19		bcc $32c9			bcc 	_SFSpecials
.32b0	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.32b2	90 e5		bcc $3299			bcc 	_SFLoop
.32b4	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.32b6	b0 e1		bcs $3299			bcs 	_SFLoop
.32b8	aa		tax				tax  								; token in X, and look up the adjuster.
.32b9	bd 3a 1b	lda $1b3a,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.32bc	38		sec				sec 								; convert to an offset ($FF,$01)
.32bd	e9 81		sbc #$81			sbc 	#$81
.32bf	18		clc				clc 								; add to depth
.32c0	65 08		adc $08				adc 	temp2
.32c2	85 08		sta $08				sta 	temp2
.32c4	10 d3		bpl $3299			bpl 	_SFLoop 					; +ve okay to continue
.32c6	30 35		bmi $32fd			bmi 	_SFError 					; if gone -ve then we have a nesting error
.32c8	60		rts		_SFExit:rts
.32c9					_SFSpecials:
.32c9	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.32cb	f0 14		beq $32e1			beq 	_SFNextLine
.32cd	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.32cf	f0 31		beq $3302			beq 	_SFFloatSkip
.32d1	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.32d3	f0 04		beq $32d9			beq 	_SFSkipString
.32d5	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.32d6	4c 99 32	jmp $3299			jmp 	_SFLoop 					; token.
.32d9					_SFSkipString:
.32d9	98		tya				tya
.32da	38		sec				sec
.32db	71 02		adc ($02),y			adc 	(codePtr),y
.32dd	a8		tay				tay
.32de	4c 99 32	jmp $3299			jmp 	_SFLoop
.32e1					_SFNextLine:
.32e1	a0 00		ldy #$00			ldy 	#0 							; get offset
.32e3	b1 02		lda ($02),y			lda 	(codePtr),y
.32e5	18		clc				clc 								; add to code pointer.
.32e6	65 02		adc $02				adc 	codePtr
.32e8	85 02		sta $02				sta 	codePtr
.32ea	90 02		bcc $32ee			bcc		_SFNLNoCarry
.32ec	e6 03		inc $03				inc 	codePtr+1
.32ee					_SFNLNoCarry:
.32ee	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.32f0	d0 a7		bne $3299			bne		_SFLoop 					; no go round again
.32f2	a5 06		lda $06				lda 	temp1
.32f4	c9 d9		cmp #$d9			cmp 	#TKW_DATA 					; if searching for Data different error.
.32f6	d0 05		bne $32fd			bne 	_SFError 					; read uses this to search for data statements
.32f8	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.32fa	20 aa 23	jsr $23aa		jsr	errorHandler
.32fd					_SFError:
.32fd	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.32ff	20 aa 23	jsr $23aa		jsr	errorHandler
.3302					_SFFloatSkip:
.3302	4c 43 15	jmp $1543			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.2284					RSReset:
.2284	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.2286	85 78		sta $78				sta 	rsPointer
.2288	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.228a	85 79		sta $79				sta 	1+(rsPointer)
.228c	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.228e	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.2291	60		rts				rts
.2292					RSClaim:
.2292	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.2294	48		pha				pha 								; save marker on stack.
.2295	8a		txa				txa 								; get bytes required.
.2296	38		sec				sec
.2297	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.2299	65 78		adc $78				adc 	rsPointer
.229b	85 78		sta $78				sta 	rsPointer
.229d	a5 79		lda $79				lda 	rsPointer+1
.229f	69 ff		adc #$ff			adc 	#$FF
.22a1	85 79		sta $79				sta 	rsPointer+1
.22a3	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.22a5	90 08		bcc $22af			bcc 	_RSCOverflow
.22a7	68		pla				pla 								; get marker back
.22a8	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.22aa	91 78		sta ($78),y			sta 	(rsPointer),y
.22ac	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.22ae	60		rts				rts
.22af					_RSCOverflow:
.22af	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.22b1	20 aa 23	jsr $23aa		jsr	errorHandler
.22b4					RSFree:
.22b4	18		clc				clc
.22b5	65 78		adc $78				adc 	rsPointer
.22b7	85 78		sta $78				sta 	rsPointer
.22b9	90 02		bcc $22bd			bcc 	_RSFExit
.22bb	e6 79		inc $79				inc 	rsPointer+1
.22bd					_RSFExit:
.22bd	60		rts				rts
.22be					RSSavePosition:
.22be	84 0c		sty $0c				sty 	tempShort 					; save Y position
.22c0	a8		tay				tay 								; this is where we write it.
.22c1	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.22c3	91 78		sta ($78),y			sta 	(rsPointer),y
.22c5	c8		iny				iny
.22c6	a5 03		lda $03				lda 	codePtr+1
.22c8	91 78		sta ($78),y			sta 	(rsPointer),y
.22ca	c8		iny				iny
.22cb	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.22cd	91 78		sta ($78),y			sta 	(rsPointer),y
.22cf	a8		tay				tay 								; fix Y back again to original value
.22d0	60		rts				rts
.22d1					RSLoadPosition:
.22d1	a8		tay				tay
.22d2	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.22d4	85 02		sta $02				sta 	codePtr
.22d6	c8		iny				iny
.22d7	b1 78		lda ($78),y			lda 	(rsPointer),y
.22d9	85 03		sta $03				sta 	codePtr+1
.22db	c8		iny				iny
.22dc	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.22de	a8		tay				tay 								; to Y
.22df	60		rts				rts

;******  Return to file: main/main.asm

.22e0					mainHandler:
.22e0	7c e3 22	jmp ($22e3,x)			jmp 	(mainVectors,x)
.22e3					mainVectors:
>22e3	6a 22					.word CheckRightParen      ; index 0
>22e5	bc 1c					.word LinkEvaluate         ; index 2
>22e7	c8 1c					.word LinkEvaluateInteger  ; index 4
>22e9	ce 1c					.word LinkEvaluateSmallInt ; index 6
>22eb	c2 1c					.word LinkEvaluateTerm     ; index 8
>22ed	4b 21					.word MLInt32ToString      ; index 10
>22ef	bf 13					.word PrintString          ; index 12

;******  Return to file: basic.asm

.22f1					section_end_main:
.22f1					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.22f1					assemblerHandler:
.22f1	7c f4 22	jmp ($22f4,x)			jmp 	(assemblerVectors,x)
.22f4					assemblerVectors:

;******  Return to file: basic.asm

.22f4					section_end_assembler:
.22f4					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

.22f4					IOInitialise:
.22f4	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.22f6	20 1f 23	jsr $231f			jsr 	IOPrintChar
.22f9	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.22fb	20 4b 23	jsr $234b			jsr 	IOInk
.22fe	a9 00		lda #$00			lda 	#0
.2300	20 5f 23	jsr $235f			jsr 	IOPaper
.2303	20 07 23	jsr $2307			jsr 	IOClearScreen
.2306	60		rts				rts
.2307					IOClearScreen:
.2307	48		pha				pha
.2308	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.230a	20 1f 23	jsr $231f			jsr 	IOPrintChar
.230d	68		pla				pla
.230e	60		rts				rts
.230f					IONewLine:
.230f	48		pha				pha
.2310	a9 0d		lda #$0d			lda 	#13
.2312	20 1f 23	jsr $231f			jsr 	IOPrintChar
.2315	68		pla				pla
.2316	60		rts				rts
.2317					IOTab:
.2317	48		pha				pha
.2318	a9 20		lda #$20			lda 	#32
.231a	20 1f 23	jsr $231f			jsr 	IOPrintChar
.231d	68		pla				pla
.231e	60		rts				rts
.231f					IOPrintChar:
.231f	aa		tax				tax 								; save in X so we can save Y
.2320	5a		phy				phy
.2321	8a		txa				txa
.2322	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.2324	d0 02		bne $2328			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.2326	a9 14		lda #$14			lda 	#$14
.2328					_IOPCNotBS:
.2328	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.232b	7a		ply				ply
.232c	60		rts				rts
.232d					IOInkey:
.232d	98		tya				tya
.232e	48		pha				pha
.232f	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2332	85 0c		sta $0c				sta 	tempShort
.2334	68		pla				pla
.2335	a8		tay				tay
.2336	a5 0c		lda $0c				lda 	tempShort					; no key pressed.
.2338	f0 10		beq $234a			beq 	_IOIExit
.233a	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.233c	f0 0c		beq $234a			beq 	_IOIExit
.233e	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.2340	f0 06		beq $2348			beq 	_IOIBackspace
.2342	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.2344	90 e7		bcc $232d			bcc 	IOInkey
.2346	b0 02		bcs $234a			bcs 	_IOIExit
.2348					_IOIBackspace:
.2348	a9 08		lda #$08			lda 	#8 							; return chr(8)
.234a					_IOIExit:
.234a	60		rts				rts
.234b					IOInk:
.234b	48		pha				pha
.234c	29 07		and #$07			and 	#7 							; 8 primaries
.234e	aa		tax				tax
.234f	bd 57 23	lda $2357,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.2352	20 1f 23	jsr $231f			jsr 	IOPrintChar
.2355	68		pla				pla
.2356	60		rts				rts
.2357					_IOColourTable:
>2357	90						.byte 	$90 					; 0 Black
>2358	96						.byte 	$96 					; 1 Red
>2359	1e						.byte 	$1E 					; 2 Green
>235a	9e						.byte 	$9E 					; 3 Yellow
>235b	9a						.byte 	$9A 					; 4 Blue
>235c	9c						.byte 	$9C 					; 5 Magenta
>235d	9f						.byte 	$9F 					; 6 Cyan
>235e	05						.byte 	$05 					; 7 White
.235f					IOPaper:
.235f	48		pha				pha
.2360	48		pha				pha
.2361	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.2363	20 1f 23	jsr $231f			jsr 	IOPrintChar 			; and then swap them again.
.2366	68		pla				pla
.2367	20 4b 23	jsr $234b			jsr 	IOInk
.236a	a9 01		lda #$01			lda 	#1
.236c	20 1f 23	jsr $231f			jsr 	IOPrintChar
.236f	68		pla				pla
.2370	60		rts				rts
.2371					IOLocate:
.2371	48		pha				pha
.2372	a9 13		lda #$13			lda 	#$13 					; home cursor code
.2374	20 1f 23	jsr $231f			jsr 	IOPrintChar
.2377	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.2379	20 80 23	jsr $2380			jsr 	_IOLoc2
.237c	68		pla				pla
.237d	a8		tay				tay
.237e	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.2380					_IOLoc2:
.2380	c0 00		cpy #$00			cpy 	#0
.2382	f0 06		beq $238a			beq 	_IOLocExit
.2384	20 1f 23	jsr $231f			jsr 	IOPrintChar
.2387	88		dey				dey
.2388	d0 f6		bne $2380			bne 	_IOLoc2
.238a					_IOLocExit:
.238a	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.238b					IOReadTimer:
.238b	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.238e	48		pha				pha
.238f	8a		txa				txa
.2390	a8		tay				tay
.2391	68		pla				pla
.2392	60		rts				rts

;******  Return to file: device/device.asm

.2393					deviceHandler:
.2393	7c 96 23	jmp ($2396,x)			jmp 	(deviceVectors,x)
.2396					deviceVectors:
>2396	07 23					.word IOClearScreen        ; index 0
>2398	0f 23					.word IONewLine            ; index 2
>239a	f4 22					.word IOInitialise         ; index 4
>239c	4b 23					.word IOInk                ; index 6
>239e	2d 23					.word IOInkey              ; index 8
>23a0	71 23					.word IOLocate             ; index 10
>23a2	5f 23					.word IOPaper              ; index 12
>23a4	1f 23					.word IOPrintChar          ; index 14
>23a6	17 23					.word IOTab                ; index 16
>23a8	8b 23					.word IOReadTimer          ; index 18

;******  Return to file: basic.asm

.23aa					section_end_device:
.23aa					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.23aa					ErrorHandler:
.23aa	a9 0a		lda #$0a			lda 	#(ErrorTextList) & $FF
.23ac	85 04		sta $04				sta 	temp0
.23ae	a9 24		lda #$24			lda 	#(ErrorTextList) >> 8
.23b0	85 05		sta $05				sta 	1+(temp0)
.23b2	ca		dex		_EHFind:dex									; errors start at 1
.23b3	f0 10		beq $23c5			beq 	_EHFound
.23b5	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.23b7	38		sec				sec
.23b8	a5 04		lda $04				lda 	temp0
.23ba	71 04		adc ($04),y			adc 	(temp0),y
.23bc	85 04		sta $04				sta 	temp0
.23be	90 f2		bcc $23b2			bcc 	_EHFind
.23c0	e6 05		inc $05				inc 	temp0+1
.23c2	4c b2 23	jmp $23b2			jmp 	_EHFind
.23c5					_EHFound:
.23c5	a2 0c		ldx #$0c		ldx	#12
.23c7	20 e0 22	jsr $22e0		jsr	mainHandler
.23ca	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.23cc	b1 02		lda ($02),y			lda 	(codePtr),y
.23ce	f0 33		beq $2403			beq 	_EHNoLine
.23d0	a9 06		lda #$06			lda 	#(EHAtMsg) & $FF
.23d2	85 04		sta $04				sta 	temp0
.23d4	a9 24		lda #$24			lda 	#(EHAtMsg) >> 8
.23d6	85 05		sta $05				sta 	1+(temp0)
.23d8	a2 0c		ldx #$0c		ldx	#12
.23da	20 e0 22	jsr $22e0		jsr	mainHandler
.23dd	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.23df	a2 00		ldx #$00			ldx 	#0
.23e1	20 f7 21	jsr $21f7			jsr 	MInt32False 				; erase slot 0.
.23e4	b1 02		lda ($02),y			lda 	(codePtr),y
.23e6	95 48		sta $48,x			sta 	esInt0,x
.23e8	c8		iny				iny
.23e9	b1 02		lda ($02),y			lda 	(codePtr),y
.23eb	95 50		sta $50,x			sta 	esInt1,x
.23ed	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.23ef	85 04		sta $04				sta 	temp0
.23f1	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.23f3	85 05		sta $05				sta 	1+(temp0)
.23f5	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.23f7	a9 00		lda #$00			lda 	#0							; stack position zero.
.23f9	a2 0a		ldx #$0a		ldx	#10
.23fb	20 e0 22	jsr $22e0		jsr	mainHandler
.23fe	a2 0c		ldx #$0c		ldx	#12
.2400	20 e0 22	jsr $22e0		jsr	mainHandler
.2403					_EHNoLine:
.2403	4c 03 24	jmp $2403	_EHHalt:jmp 	_EHHalt
.2406					EHAtMsg:
>2406	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.240a					ErrorTextList:
>240a	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>2412	20 6e 6f 74 20 50 72 65 73 65 6e 74
>241e	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>2426	45 72 72 6f 72
>242b	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>2433	64 69 73 61 62 6c 65 64
>243b	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>2443	6f 6e 20 66 61 69 6c 65 64
>244c	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>2454	42 79 20 5a 65 72 6f
>245b	04 53 74 6f 70				.text 4,"Stop"
>2460	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>2468	73 6d 61 74 63 68
>246e	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>2476	20 56 61 6c 75 65
>247c	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>2484	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>2492	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>249a	20 63 6f 6d 6d 61
>24a0	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>24a8	20 72 65 66 65 72 65 6e 63 65
>24b2	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>24ba	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>24c8	10 53 74 72 69 6e 67 20			.text 16,"String too long."
>24d0	74 6f 6f 20 6c 6f 6e 67 2e
>24d9	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>24e1	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>24ee	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>24f6	69 74 68 6f 75 74 20 52 45 50 45 41 54
>2503	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>250b	74 68 6f 75 74 20 46 4f 52
>2514	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>251c	74 68 6f 75 74 20 57 48 49 4c 45
>2527	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>252f	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>253c	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>2544	54 20 69 6e 64 65 78
>254b	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>2553	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>2563	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>256b	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>257a	1a 52 65 74 75 72 6e 20			.text 26,"Return stack out of space."
>2582	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>2592	63 65 2e
>2595	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>259d	20 50 72 6f 63 65 64 75 72 65
>25a7	18 50 61 72 61 6d 65 74			.text 24,"Parameters do not match."
>25af	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>25bf	2e
>25c0	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>25c8	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>25d6	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>25de	75 69 72 65 73 20 61 72 72 61 79
>25e9	10 42 61 64 20 61 72 72			.text 16,"Bad array index."
>25f1	61 79 20 69 6e 64 65 78 2e
>25fa	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>2602	64 61 74 61
>2606	00					.byte 0

;******  Return to file: error/errorhandler.asm


;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2607					section_end_error:
.2607					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.2607					ExtensionHandler:
.2607	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.2609	d0 08		bne $2613			bne 	_ExtensionUnary 			; is passed in A.
.260b	b1 02		lda ($02),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.260d	c8		iny				iny
.260e	0a		asl a				asl 	a
.260f	aa		tax				tax
.2610	7c 11 26	jmp ($2611,x)			jmp 	(Group2Vectors-12,x)
.2613					_ExtensionUnary:
.2613	48		pha				pha 								; save stack pos in A
.2614	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted token, double into X
.2616	c8		iny				iny
.2617	0a		asl a				asl 	a
.2618	aa		tax				tax
.2619	68		pla				pla 								; restore stack pos and call group3 command.
.261a	7c 15 26	jmp ($2615,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.261d					Group2Vectors:
>261d	2d 26					.word	Command_VPoke            ; $86 vpoke
>261f	30 26					.word	Command_VDoke            ; $87 vdoke

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.2621					Group3Vectors:
>2621	71 26					.word	Command_VPeek            ; $86 vpeek(
>2623	74 26					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.2625					XEvaluateInteger:
.2625	8a		txa				txa
.2626	a2 04		ldx #$04		ldx	#4
.2628	20 e0 22	jsr $22e0		jsr	mainHandler
.262b	aa		tax				tax
.262c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.262d					Command_VPoke:
.262d	38		sec				sec 						; one byte , CS
.262e	b0 01		bcs $2631			bcs 	CmdVideoWrite
.2630					Command_VDoke:
.2630	18		clc				clc 						; two bytes, CC
.2631					CmdVideoWrite:
.2631	08		php				php 						; save one or two btes
.2632	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.2634	20 25 26	jsr $2625			jsr 	XEvaluateInteger
.2637	20 77 22	jsr $2277			jsr 	CheckComma
.263a	e8		inx				inx
.263b	20 25 26	jsr $2625			jsr 	XEvaluateInteger
.263e	ca		dex				dex
.263f	20 50 26	jsr $2650			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.2642	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.2644	8d 23 9f	sta $9f23			sta 	$9F23
.2647	28		plp				plp 						; if it was Poke then exit
.2648	b0 05		bcs $264f			bcs 	_CVWExit
.264a	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.264c	8d 23 9f	sta $9f23			sta 	$9F23
.264f					_CVWExit:
.264f	60		rts				rts
.2650					SetUpTOSVRamAddress:
.2650	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.2652	29 01		and #$01			and 	#1
.2654	15 60		ora $60,x			ora 	esInt3,x
.2656	d0 14		bne $266c			bne 	CVWValue
.2658	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.265a	8d 20 9f	sta $9f20			sta 	$9F20
.265d	b5 50		lda $50,x			lda 	esInt1,x
.265f	8d 21 9f	sta $9f21			sta	 	$9F21
.2662	b5 58		lda $58,x			lda 	esInt2,x
.2664	29 01		and #$01			and 	#1
.2666	09 10		ora #$10			ora 	#$10 				; step 1.
.2668	8d 22 9f	sta $9f22			sta 	$9F22
.266b	60		rts				rts
.266c					CVWValue:
.266c	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.266e	20 aa 23	jsr $23aa		jsr	errorHandler
.2671					Command_VPeek:
.2671	38		sec				sec 						; one byte , CS
.2672	b0 01		bcs $2675			bcs 	CmdVideoRead
.2674					Command_VDeek:
.2674	18		clc				clc 						; two bytes, CC
.2675					CmdVideoRead:
.2675	08		php				php 						; save action on stack.
.2676	aa		tax				tax 						; save stack position
.2677	20 25 26	jsr $2625			jsr 	XEvaluateInteger 	; address
.267a	20 6a 22	jsr $226a			jsr 	CheckRightParen 	; closing right bracket.
.267d	20 50 26	jsr $2650			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.2680	20 f7 21	jsr $21f7			jsr 	MInt32False 		; zero return.
.2683	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.2686	95 48		sta $48,x			sta 	esInt0,x
.2688	28		plp				plp 						; check if DOKE (carry was clear)
.2689	b0 05		bcs $2690			bcs 	_CVRExit
.268b	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.268e	95 50		sta $50,x			sta 	esInt1,x
.2690					_CVRExit:
.2690	8a		txa				txa 						; return X position.
.2691	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.2692					section_end_extension:
.2692					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2692					floatingpointHandler:
.2692	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2694	20 aa 23	jsr $23aa		jsr	errorHandler

;******  Return to file: basic.asm

.2697					section_end_floatingpoint:
.2697					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.2697					interactionHandler:
.2697	7c 9a 26	jmp ($269a,x)			jmp 	(interactionVectors,x)
.269a					interactionVectors:

;******  Return to file: basic.asm

.269a					section_end_interaction:
.269a					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.269a					StringChrs:
.269a	aa		tax				tax 								; set up stack
.269b	a9 02		lda #$02			lda 	#2
.269d	20 54 27	jsr $2754			jsr 	AllocateSoftString
.26a0	98		tya				tya
.26a1	20 7a 27	jsr $277a			jsr 	WriteSoftString
.26a4	20 a9 26	jsr $26a9			jsr 	ReturnSoftString
.26a7	8a		txa				txa
.26a8	60		rts				rts
.26a9					ReturnSoftString:
.26a9	a5 7a		lda $7a				lda 	softMemAlloc 				; copy address
.26ab	95 48		sta $48,x			sta 	esInt0,x
.26ad	a5 7b		lda $7b				lda 	softMemAlloc+1
.26af	95 50		sta $50,x			sta 	esInt1,x
.26b1	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.26b3	95 58		sta $58,x			sta 	esInt2,x
.26b5	95 60		sta $60,x			sta 	esInt3,x
.26b7	a9 40		lda #$40			lda 	#$40 						; type string.
.26b9	95 40		sta $40,x			sta 	esType,x
.26bb	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.26bc					STRCompare:
.26bc	48		pha				pha 								; save A
.26bd	aa		tax				tax 								; put stack pos in X
.26be	98		tya				tya
.26bf	48		pha				pha
.26c0	20 f4 26	jsr $26f4			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.26c3	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.26c5	b1 04		lda ($04),y			lda 	(temp0),y
.26c7	d1 06		cmp ($06),y			cmp 	(temp1),y
.26c9	90 02		bcc $26cd			bcc 	_SCNotSmaller
.26cb	b1 06		lda ($06),y			lda 	(temp1),y
.26cd					_SCNotSmaller:
.26cd	aa		tax				tax 								; put that in X. We compare this many chars first.
.26ce					_SCCompareLoop:
.26ce	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.26d0	f0 0c		beq $26de			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.26d2	ca		dex				dex 								; decrement chars to compare.
.26d3	c8		iny				iny 								; move to next character
.26d4	38		sec				sec 								; calculate s1[y]-s2[y]
.26d5	b1 04		lda ($04),y			lda 	(temp0),y
.26d7	f1 06		sbc ($06),y			sbc 	(temp1),y
.26d9	d0 0a		bne $26e5			bne 	_SCReturnResult 			; if different return sign of A
.26db	4c ce 26	jmp $26ce			jmp 	_SCCompareLoop
.26de					_SCSameToEndShortest
.26de	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.26e0	38		sec				sec
.26e1	b1 04		lda ($04),y			lda 	(temp0),y
.26e3	f1 06		sbc ($06),y			sbc 	(temp1),y
.26e5					_SCReturnResult:
.26e5	08		php				php 								; set return to zero preserving PSW.
.26e6	a2 00		ldx #$00			ldx 	#0
.26e8	28		plp				plp
.26e9	f0 05		beq $26f0			beq 	_SCExit 					; two values equal, then exit
.26eb	ca		dex				dex 								; X = $FF
.26ec	90 02		bcc $26f0			bcc 	_SCExit 					; if 1st < 2nd then -1
.26ee	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.26f0					_SCExit:
.26f0	68		pla				pla
.26f1	a8		tay				tay
.26f2	68		pla				pla
.26f3	60		rts				rts
.26f4					CopyStringPair:
.26f4	b5 49		lda $49,x			lda 	esInt0+1,x
.26f6	85 06		sta $06				sta 	temp1
.26f8	b5 51		lda $51,x			lda 	esInt1+1,x
.26fa	85 07		sta $07				sta 	temp1+1
.26fc					CopyStringTop:
.26fc	b5 48		lda $48,x			lda 	esInt0,x
.26fe	85 04		sta $04				sta 	temp0
.2700	b5 50		lda $50,x			lda 	esInt1,x
.2702	85 05		sta $05				sta 	temp0+1
.2704	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.2705					StringConcat:
.2705	aa		tax				tax									; stack pos in X
.2706	98		tya				tya
.2707	48		pha				pha
.2708	20 f4 26	jsr $26f4			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.270b	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.270c	a0 00		ldy #$00			ldy 	#0
.270e	b1 04		lda ($04),y			lda 	(temp0),y
.2710	71 06		adc ($06),y			adc 	(temp1),y
.2712	b0 1c		bcs $2730			bcs 	_SCError 					; just too many characters here.
.2714	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.2716	b0 18		bcs $2730			bcs 	_SCError
.2718	20 54 27	jsr $2754			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.271b	20 4b 27	jsr $274b			jsr 	CopySoftToStack 			; copy that to the stack.
.271e	20 35 27	jsr $2735			jsr 	SCCopyTemp0 				; copy temp0
.2721	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.2723	85 04		sta $04				sta 	temp0
.2725	a5 07		lda $07				lda 	temp1+1
.2727	85 05		sta $05				sta 	temp0+1
.2729	20 35 27	jsr $2735			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.272c	68		pla				pla
.272d	a8		tay				tay
.272e	8a		txa				txa 								; and A
.272f	60		rts				rts
.2730					_SCError:
.2730	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.2732	20 aa 23	jsr $23aa		jsr	errorHandler
.2735					SCCopyTemp0:
.2735	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.2737	b1 04		lda ($04),y			lda 	(temp0),y
.2739	85 08		sta $08				sta 	temp2
.273b					_SCCopyLoop:
.273b	a5 08		lda $08				lda 	temp2 						; done the lot
.273d	f0 0b		beq $274a			beq 	_SCCopyExit
.273f	c6 08		dec $08				dec 	temp2
.2741	c8		iny				iny 								; get next char
.2742	b1 04		lda ($04),y			lda 	(temp0),y
.2744	20 7a 27	jsr $277a			jsr 	WriteSoftString 			; write to soft string.
.2747	4c 3b 27	jmp $273b			jmp 	_SCCopyLoop
.274a					_SCCopyExit:
.274a	60		rts				rts
.274b					CopySoftToStack:
.274b	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.274d	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.274f	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2751	95 50		sta $50,x			sta 	esInt1,x
.2753	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2754					AllocateSoftString:
.2754	85 0c		sta $0c				sta 	tempShort 					; save count
.2756	98		tya				tya
.2757	48		pha				pha
.2758	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.275a	d0 09		bne $2765			bne 	_ASSDone
.275c	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.275e	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2760	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2762	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.2763	84 7b		sty $7b				sty 	softMemAlloc+1 				; for a concreted string.
.2765					_ASSDone:
.2765	38		sec				sec 								; allocate downwards enough memory
.2766	a5 7a		lda $7a				lda 	softMemAlloc 				; subtract the memory requirements in A from
.2768	e5 0c		sbc $0c				sbc 	tempShort 					; the soft memory pointer
.276a	85 7a		sta $7a				sta 	softMemAlloc
.276c	a5 7b		lda $7b				lda 	softMemAlloc+1
.276e	e9 00		sbc #$00			sbc 	#0
.2770	85 7b		sta $7b				sta 	softMemAlloc+1
.2772	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2774	a8		tay				tay
.2775	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2777	68		pla				pla
.2778	a8		tay				tay
.2779	60		rts				rts
.277a					WriteSoftString:
.277a	84 0c		sty $0c				sty 	tempShort 					; save Y
.277c	48		pha				pha 								; save character on stack
.277d	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.277f	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2781	18		clc				clc
.2782	69 01		adc #$01			adc 	#1
.2784	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2786	a8		tay				tay 								; offset in Y
.2787	68		pla				pla 								; get char and write.
.2788	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.278a	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.278c	60		rts				rts
.278d					StrClone:
.278d	aa		tax				tax 								; set up stack.
.278e	98		tya				tya
.278f	48		pha				pha
.2790	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2792	b1 04		lda ($04),y			lda 	(temp0),y 					; this is the bytes required.
.2794	18		clc				clc
.2795	69 01		adc #$01			adc 	#1
.2797	20 54 27	jsr $2754			jsr 	AllocateSoftString 			; allocate soft memory
.279a	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.279c	95 48		sta $48,x			sta 	esInt0,x
.279e	a5 7b		lda $7b				lda 	softMemAlloc+1
.27a0	95 50		sta $50,x			sta 	esInt1,x
.27a2	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.27a4	95 58		sta $58,x			sta 	esInt2,x
.27a6	95 60		sta $60,x			sta 	esInt3,x
.27a8	a9 40		lda #$40			lda 	#$40 						; set type to string.
.27aa	95 40		sta $40,x			sta 	esType,x
.27ac	20 35 27	jsr $2735			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.27af	68		pla				pla
.27b0	a8		tay				tay
.27b1	8a		txa				txa
.27b2	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.27b3					CaseString:
.27b3	48		pha				pha 								; save A and copy to X
.27b4	aa		tax				tax
.27b5	98		tya				tya
.27b6	48		pha				pha
.27b7	20 f0 11	jsr $11f0			jsr 	TOSToTemp0 					; target string -> temp0
.27ba	a0 00		ldy #$00			ldy 	#0
.27bc	b1 04		lda ($04),y			lda 	(temp0),y  					; get length,
.27be	18		clc				clc
.27bf	69 01		adc #$01			adc 	#1 							; one more for length byte
.27c1	20 54 27	jsr $2754			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.27c4	20 4b 27	jsr $274b			jsr 	CopySoftToStack 			; copy that to the stack.
.27c7	a0 00		ldy #$00			ldy 	#0
.27c9	b1 04		lda ($04),y			lda 	(temp0),y 					; count to copy in X
.27cb	aa		tax				tax
.27cc					_CSCopy:
.27cc	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.27ce	f0 24		beq $27f4			beq 	_CSExit
.27d0	ca		dex				dex
.27d1	c8		iny				iny
.27d2	68		pla				pla 								; check direction
.27d3	48		pha				pha
.27d4	f0 0c		beq $27e2			beq 	_CSUpper
.27d6	b1 04		lda ($04),y			lda 	(temp0),y 					; lower$() code
.27d8	c9 41		cmp #$41			cmp 	#"A"
.27da	90 12		bcc $27ee			bcc 	_CSWrite
.27dc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.27de	b0 0e		bcs $27ee			bcs 	_CSWrite
.27e0	90 0a		bcc $27ec			bcc 	_CSFlipWrite
.27e2					_CSUpper:
.27e2	b1 04		lda ($04),y			lda 	(temp0),y 					; upper$() code
.27e4	c9 61		cmp #$61			cmp 	#"a"
.27e6	90 06		bcc $27ee			bcc 	_CSWrite
.27e8	c9 7b		cmp #$7b			cmp 	#"z"+1
.27ea	b0 02		bcs $27ee			bcs 	_CSWrite
.27ec					_CSFlipWrite:
.27ec	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.27ee					_CSWrite:
.27ee	20 7a 27	jsr $277a			jsr 	WriteSoftString 			; add to soft string.
.27f1	4c cc 27	jmp $27cc			jmp 	_CSCopy
.27f4					_CSExit:
.27f4	68		pla				pla
.27f5	a8		tay				tay
.27f6	68		pla				pla
.27f7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.27f8					StringSubstring:
.27f8	48		pha				pha
.27f9	aa		tax				tax 								; access stack.
.27fa	98		tya				tya
.27fb	48		pha				pha
.27fc	20 fc 26	jsr $26fc			jsr 	CopyStringTop 				; point temp0 to the string.
.27ff	a0 00		ldy #$00			ldy 	#0 							; get length.
.2801	b1 04		lda ($04),y			lda 	(temp0),Y
.2803	85 06		sta $06				sta 	temp1
.2805	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2807	c5 06		cmp $06				cmp 	temp1 						; return "" if > length.
.2809	f0 02		beq $280d			beq 	_SSBOkay
.280b	b0 2a		bcs $2837			bcs 	_SSBReturnNull
.280d					_SSBOkay:
.280d	a5 06		lda $06				lda 	temp1 						; get the total length +1
.280f	18		clc				clc
.2810	69 01		adc #$01			adc 	#1
.2812	38		sec				sec
.2813	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.2815	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2817	90 02		bcc $281b			bcc		_SSBTrunc
.2819	b5 4a		lda $4a,x			lda 	esInt0+2,x
.281b					_SSBTrunc:
.281b	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.281d	18		clc				clc
.281e	69 01		adc #$01			adc 	#1 							; add 1
.2820	20 54 27	jsr $2754			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2823	20 4b 27	jsr $274b			jsr 	CopySoftToStack 			; copy that to the stack.
.2826	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2828					_SSBCopyLoop:
.2828	a5 07		lda $07				lda 	temp1+1 					; done them all
.282a	f0 0e		beq $283a			beq 	_SSBExit
.282c	c6 07		dec $07				dec 	temp1+1
.282e	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.2830	20 7a 27	jsr $277a			jsr 	WriteSoftString
.2833	c8		iny				iny
.2834	4c 28 28	jmp $2828			jmp 	_SSBCopyLoop
.2837					_SSBReturnNull:
.2837	20 3e 28	jsr $283e			jsr 	ReturnNull
.283a					_SSBExit:
.283a	68		pla				pla
.283b	a8		tay				tay
.283c	68		pla				pla
.283d	60		rts				rts
.283e					ReturnNull:
.283e	a9 00		lda #$00			lda 	#0 							; clear null string
.2840	8d cc 0a	sta $0acc			sta 	NullString
.2843	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.2845	95 48		sta $48,x			sta 	esInt0,x
.2847	a9 0a		lda #$0a			lda 	#NullString >> 8
.2849	95 50		sta $50,x			sta 	esInt1,x
.284b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0b20					srcStrLen:
>0b20							.fill 	1
.284c					StringWrite:
.284c	aa		tax				tax
.284d	48		pha				pha
.284e	98		tya				tya
.284f	48		pha				pha
.2850	20 77 28	jsr $2877			jsr 	CheckOverwriteCurrent
.2853	b0 0d		bcs $2862			bcs		_SWCopyCurrent
.2855	20 b5 28	jsr $28b5			jsr 	RequiresConcretion
.2858	90 0e		bcc $2868			bcc 	_SWWriteReference
.285a	20 18 29	jsr $2918			jsr 	CheckSpecialConcretion
.285d	b0 09		bcs $2868			bcs 	_SWWriteReference
.285f	20 c9 28	jsr $28c9			jsr 	AllocateHardMemory
.2862					_SWCopyCurrent:
.2862	20 fc 28	jsr $28fc			jsr 	CopyStringToHardMemory
.2865	4c 73 28	jmp $2873			jmp 	_SWExit
.2868					_SWWriteReference
.2868	a0 00		ldy #$00			ldy 	#0
.286a	a5 04		lda $04				lda 	temp0
.286c	91 06		sta ($06),y			sta 	(temp1),y
.286e	c8		iny				iny
.286f	a5 05		lda $05				lda 	temp0+1
.2871	91 06		sta ($06),y			sta 	(temp1),y
.2873					_SWExit:
.2873	68		pla				pla
.2874	a8		tay				tay
.2875	68		pla				pla
.2876	60		rts				rts
.2877					CheckOverwriteCurrent:
.2877	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.2879	b5 51		lda $51,x			lda 	esInt1+1,x
.287b	85 05		sta $05				sta 	temp0+1
.287d	b5 49		lda $49,x			lda 	esInt0+1,x
.287f	85 04		sta $04				sta 	temp0
.2881	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.2883	8d 20 0b	sta $0b20			sta 	srcStrLen
.2886	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.2888	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.288a	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.288c	85 07		sta $07				sta 	temp1+1
.288e	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.2890	b1 06		lda ($06),y			lda 	(temp1),y
.2892	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2894	90 1b		bcc $28b1			bcc 	_COCFail 				; in hard memory.
.2896	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2898	b1 06		lda ($06),y			lda 	(temp1),y
.289a	e9 01		sbc #$01			sbc 	#1
.289c	85 08		sta $08				sta 	temp2
.289e	c8		iny				iny
.289f	b1 06		lda ($06),y			lda 	(temp1),y
.28a1	e9 00		sbc #$00			sbc 	#0
.28a3	85 09		sta $09				sta 	temp2+1
.28a5	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.28a7	b1 08		lda ($08),y			lda 	(temp2),y
.28a9	38		sec				sec  							; maximum character capacity.
.28aa	e9 02		sbc #$02			sbc 	#2
.28ac	cd 20 0b	cmp $0b20			cmp 	srcStrLen 				; if >= the required length
.28af	b0 02		bcs $28b3			bcs 	_COCCanReuse
.28b1					_COCFail:
.28b1	18		clc				clc
.28b2	60		rts				rts
.28b3					_COCCanReuse:
.28b3	38		sec				sec
.28b4	60		rts				rts
.28b5					RequiresConcretion:
.28b5	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28b7	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.28b9	b0 0a		bcs $28c5			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.28bb	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.28bd	f0 08		beq $28c7			beq 	_RCFail 				; if not, this cannot be soft memory.
.28bf	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.28c1	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.28c3	90 02		bcc $28c7			bcc 	_RCFail 				; so concreting
.28c5					_RCSucceed:
.28c5	38		sec				sec
.28c6	60		rts				rts
.28c7					_RCFail:
.28c7	18		clc				clc
.28c8	60		rts				rts
.28c9					AllocateHardMemory:
.28c9	98		tya				tya
.28ca	48		pha				pha
.28cb	ad 20 0b	lda $0b20			lda 	srcStrLen 				; characters in string
.28ce	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.28d0	b0 04		bcs $28d6			bcs 	_AHMSetMax 				; max out that amount.
.28d2	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.28d4	90 02		bcc $28d8			bcc 	_AHMIsOkay
.28d6					_AHMSetMax:
.28d6	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.28d8					_AHMIsOkay:
.28d8	48		pha				pha
.28d9	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.28db	38		sec				sec  							; and copy result to TOS as target address.
.28dc	65 0d		adc $0d				adc 	highMemory
.28de	85 0d		sta $0d				sta 	highMemory
.28e0	a5 0e		lda $0e				lda 	highMemory+1
.28e2	69 ff		adc #$ff			adc 	#$FF
.28e4	85 0e		sta $0e				sta 	highMemory+1
.28e6	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.28e8	68		pla				pla 							; get the total size of the storage block
.28e9	91 0d		sta ($0d),y			sta 	(highMemory),y
.28eb	18		clc				clc
.28ec	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.28ee	69 01		adc #$01			adc 	#1
.28f0	91 06		sta ($06),y			sta 	(temp1),y
.28f2	a5 0e		lda $0e				lda 	highMemory+1
.28f4	69 00		adc #$00			adc 	#0
.28f6	c8		iny				iny
.28f7	91 06		sta ($06),y			sta 	(temp1),y
.28f9	68		pla				pla
.28fa	a8		tay				tay
.28fb	60		rts				rts
.28fc					CopyStringToHardMemory:
.28fc	98		tya				tya
.28fd	48		pha				pha
.28fe	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.2900	b1 06		lda ($06),y			lda 	(temp1),y
.2902	85 08		sta $08				sta 	temp2
.2904	c8		iny				iny
.2905	b1 06		lda ($06),y			lda 	(temp1),y
.2907	85 09		sta $09				sta 	temp2+1
.2909	ac 20 0b	ldy $0b20			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.290c					_CSTHMLoop:
.290c	b1 04		lda ($04),y			lda 	(temp0),y
.290e	91 08		sta ($08),y			sta 	(temp2),y
.2910	88		dey				dey
.2911	c0 ff		cpy #$ff			cpy 	#$FF
.2913	d0 f7		bne $290c			bne 	_CSTHMLoop
.2915	68		pla				pla
.2916	a8		tay				tay
.2917	60		rts				rts
.2918					CheckSpecialConcretion:
.2918	ad 20 0b	lda $0b20			lda 	srcStrLen 				; check string is null.
.291b	f0 02		beq $291f			beq 	_CSCNullString
.291d	18		clc				clc
.291e	60		rts				rts
.291f					_CSCNullString:
.291f	a9 00		lda #$00			lda 	#0
.2921	8d cc 0a	sta $0acc			sta 	NullString
.2924	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2926	85 04		sta $04				sta 	temp0
.2928	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.292a	85 05		sta $05				sta 	1+(temp0)
.292c	38		sec				sec
.292d	60		rts				rts

;******  Return to file: string/string.asm

.292e					stringHandler:
.292e	7c 31 29	jmp ($2931,x)			jmp 	(stringVectors,x)
.2931					stringVectors:
>2931	9a 26					.word StringChrs           ; index 0
>2933	8d 27					.word StrClone             ; index 2
>2935	05 27					.word StringConcat         ; index 4
>2937	bc 26					.word STRCompare           ; index 6
>2939	b3 27					.word CaseString           ; index 8
>293b	f8 27					.word StringSubstring      ; index 10
>293d	4c 28					.word StringWrite          ; index 12

;******  Return to file: basic.asm

.293f					section_end_string:
.293f					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0b21					deTokeniseVector:
>0b21							.fill 	2
.0b23					lastCharacterClass:
>0b23							.fill 	1
.293f					ListLine:
.293f	a9 4f		lda #$4f			lda 	#(deTokenPrint) & $FF
.2941	8d 21 0b	sta $0b21			sta 	deTokeniseVector
.2944	a9 2a		lda #$2a			lda 	#(deTokenPrint) >> 8
.2946	8d 22 0b	sta $0b22			sta 	1+(deTokeniseVector)
.2949					Detokenise:
.2949	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.294b	8d 23 0b	sta $0b23			sta 	lastCharacterClass
.294e	a2 02		ldx #$02			ldx 	#2
.2950	20 f7 21	jsr $21f7			jsr 	MInt32False
.2953	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.2955	b1 02		lda ($02),y			lda 	(codePtr),y
.2957	95 48		sta $48,x			sta 	esInt0,x
.2959	c8		iny				iny
.295a	b1 02		lda ($02),y			lda 	(codePtr),y
.295c	95 50		sta $50,x			sta 	esInt1,x
.295e	a9 84		lda #$84			lda 	#LTYLineNumber
.2960	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2963	a9 0a		lda #$0a			lda 	#10 					; base 10
.2965	20 01 2a	jsr $2a01			jsr 	DTPrintInteger 			; print as integer.
.2968	a0 00		ldy #$00			ldy 	#0 						; get length
.296a	b1 04		lda ($04),y			lda 	(temp0),y 				; into X
.296c	aa		tax				tax
.296d					_DTPadOut:
.296d	a9 20		lda #$20			lda 	#" "
.296f	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2972	e8		inx				inx
.2973	e0 06		cpx #$06			cpx 	#6
.2975	d0 f6		bne $296d			bne 	_DTPadOut
.2977	a0 03		ldy #$03			ldy 	#3 						; start position.
.2979					_DTListLoop
.2979	b1 02		lda ($02),y			lda 	(codePtr),y
.297b	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.297d	f0 58		beq $29d7			beq 	_DTIsString
.297f	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.2981	f0 7a		beq $29fd			beq 	_DTIsFloat
.2983	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.2985	f0 16		beq $299d			beq 	_DTHexConstant
.2987	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.2989	d0 06		bne $2991			bne 	_DTNotEnd
.298b	a9 ff		lda #$ff			lda 	#255 					; print CR
.298d	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2990	60		rts				rts
.2991					_DTNotEnd:
.2991	c9 00		cmp #$00			cmp 	#0
.2993	30 36		bmi $29cb			bmi 	_DTIsToken
.2995	c9 40		cmp #$40			cmp 	#$40
.2997	90 38		bcc $29d1			bcc 	_DTIsIdentifier
.2999	a9 0a		lda #$0a			lda 	#10 					; this is the base
.299b	d0 08		bne $29a5			bne 	_DTConstant
.299d					_DTHexConstant:
.299d	a9 26		lda #$26			lda 	#"&"
.299f	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.29a2	c8		iny				iny
.29a3	a9 10		lda #$10			lda 	#16
.29a5					_DTConstant:
.29a5	48		pha				pha
.29a6	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.29a8	20 6b 2a	jsr $2a6b			jsr 	DTSwitchMode
.29ab	a9 86		lda #$86			lda 	#LTYConstant
.29ad	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.29b0	a2 02		ldx #$02			ldx 	#2
.29b2	8a		txa				txa
.29b3	a2 08		ldx #$08		ldx	#8
.29b5	20 e0 22	jsr $22e0		jsr	mainHandler
.29b8	aa		tax				tax
.29b9	20 f0 11	jsr $11f0			jsr 	TOSToTemp0
.29bc	68		pla				pla
.29bd	85 0c		sta $0c				sta 	tempShort
.29bf	98		tya				tya
.29c0	48		pha				pha
.29c1	a5 0c		lda $0c				lda 	tempShort
.29c3	20 01 2a	jsr $2a01			jsr 	DTPrintInteger
.29c6	68		pla				pla
.29c7	a8		tay				tay
.29c8	4c 79 29	jmp $2979			jmp 	_DTListLoop
.29cb					_DTIsToken:
.29cb	20 be 2a	jsr $2abe			jsr 	DTDecodeToken
.29ce	4c 79 29	jmp $2979			jmp 	_DTListLoop
.29d1					_DTIsIdentifier:
.29d1	20 7d 2a	jsr $2a7d			jsr 	DTIdentifier
.29d4	4c 79 29	jmp $2979			jmp 	_DTListLoop
.29d7					_DTIsString:
.29d7	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.29d9	20 6b 2a	jsr $2a6b			jsr 	DTSwitchMode
.29dc	a9 81		lda #$81			lda 	#LTYString
.29de	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.29e1	a9 22		lda #$22			lda 	#'"'						; open quote
.29e3	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.29e6	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.29e8	8a		txa				txa
.29e9	a2 08		ldx #$08		ldx	#8
.29eb	20 e0 22	jsr $22e0		jsr	mainHandler
.29ee	aa		tax				tax
.29ef	20 f0 11	jsr $11f0			jsr 	TOSToTemp0
.29f2	20 13 2a	jsr $2a13			jsr 	DTPrintLengthPrefix
.29f5	a9 22		lda #$22			lda 	#'"'
.29f7	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.29fa	4c 79 29	jmp $2979			jmp 	_DTListLoop
.29fd					_DTIsFloat:
>29fd	db						.byte 	$DB
.29fe	4c fd 29	jmp $29fd			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.2a01					DTPrintInteger:
.2a01	48		pha				pha
.2a02	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.2a04	85 04		sta $04				sta 	temp0
.2a06	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.2a08	85 05		sta $05				sta 	1+(temp0)
.2a0a	68		pla				pla
.2a0b	a8		tay				tay
.2a0c	8a		txa				txa
.2a0d	a2 0a		ldx #$0a		ldx	#10
.2a0f	20 e0 22	jsr $22e0		jsr	mainHandler
.2a12	aa		tax				tax
.2a13					DTPrintLengthPrefix:
.2a13	98		tya				tya
.2a14	48		pha				pha
.2a15	a0 00		ldy #$00			ldy 	#0
.2a17	b1 04		lda ($04),y			lda 	(temp0),y
.2a19	aa		tax				tax
.2a1a	f0 0b		beq $2a27			beq 	_DTPLPExit
.2a1c					_DTPLPLoop:
.2a1c	c8		iny				iny
.2a1d	b1 04		lda ($04),y			lda 	(temp0),y
.2a1f	29 7f		and #$7f			and 	#$7F
.2a21	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2a24	ca		dex				dex
.2a25	d0 f5		bne $2a1c			bne 	_DTPLPLoop
.2a27					_DTPLPExit:
.2a27	68		pla				pla
.2a28	a8		tay				tay
.2a29	60		rts				rts
.2a2a					ListOutputCharacter:
.2a2a	85 0c		sta $0c				sta 	tempShort
.2a2c	48		pha				pha
.2a2d	8a		txa				txa
.2a2e	48		pha				pha
.2a2f	98		tya				tya
.2a30	48		pha				pha
.2a31	a5 0c		lda $0c				lda 	tempShort
.2a33	c9 20		cmp #$20			cmp 	#32
.2a35	b0 0c		bcs $2a43			bcs		_LOCHiBit
.2a37	09 40		ora #$40			ora 	#64
.2a39	c9 40		cmp #$40			cmp 	#64
.2a3b	f0 06		beq $2a43			beq 	_LOCHiBit
.2a3d	c9 5b		cmp #$5b			cmp 	#65+26
.2a3f	b0 02		bcs $2a43			bcs 	_LOCHiBit
.2a41	69 20		adc #$20			adc 	#32
.2a43					_LOCHiBit:
.2a43	20 4c 2a	jsr $2a4c			jsr 	_LOCCallVector
.2a46	68		pla				pla
.2a47	a8		tay				tay
.2a48	68		pla				pla
.2a49	aa		tax				tax
.2a4a	68		pla				pla
.2a4b					_LOCExit:
.2a4b	60		rts				rts
.2a4c					_LOCCallVector:
.2a4c	6c 21 0b	jmp ($0b21)			jmp 	(deTokeniseVector)
.2a4f					deTokenPrint:
.2a4f	c9 00		cmp #$00			cmp 	#0
.2a51	30 06		bmi $2a59			bmi 	_dtpInk
.2a53	a2 0e		ldx #$0e		ldx	#14
.2a55	20 93 23	jsr $2393		jsr	deviceHandler
.2a58	60		rts				rts
.2a59	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.2a5b	f0 08		beq $2a65			beq 	_dtpCR
.2a5d	29 07		and #$07			and 	#7
.2a5f	a2 06		ldx #$06		ldx	#6
.2a61	20 93 23	jsr $2393		jsr	deviceHandler
.2a64	60		rts				rts
.2a65					_dtpCR:
.2a65	a2 02		ldx #$02		ldx	#2
.2a67	20 93 23	jsr $2393		jsr	deviceHandler
.2a6a	60		rts				rts
.2a6b					DTSwitchMode:
.2a6b	cd 23 0b	cmp $0b23			cmp 	LastCharacterClass
.2a6e	f0 04		beq $2a74			beq 	_DTSMNoChange
.2a70	8d 23 0b	sta $0b23			sta 	LastCharacterClass
.2a73					_DTSMExit:
.2a73	60		rts				rts
.2a74					_DTSMNoChange:
.2a74	c9 01		cmp #$01			cmp 	#1
.2a76	f0 fb		beq $2a73			beq 	_DTSMExit
.2a78	a9 20		lda #$20			lda 	#" "
.2a7a	4c 2a 2a	jmp $2a2a			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.2a7d					DTIdentifier:
.2a7d	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2a7f	20 6b 2a	jsr $2a6b			jsr 	DTSwitchMode
.2a82	a9 87		lda #$87			lda 	#LTYIdentifier
.2a84	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2a87					_DTILoop:
.2a87	b1 02		lda ($02),y			lda 	(codePtr),y 				; output main bit of identifier.
.2a89	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2a8c	c8		iny				iny
.2a8d	b1 02		lda ($02),y			lda 	(codePtr),y 				; until end identifier marker.
.2a8f	c9 3a		cmp #$3a			cmp 	#$3A
.2a91	90 f4		bcc $2a87			bcc 	_DTILoop
.2a93	c8		iny				iny
.2a94	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.2a96	f0 25		beq $2abd			beq 	_DTIExit 					; no postfix.
.2a98	48		pha				pha
.2a99	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.2a9b	8d 23 0b	sta $0b23			sta 	LastCharacterClass
.2a9e	a9 82		lda #$82			lda 	#LTYPunctuation
.2aa0	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2aa3	68		pla				pla
.2aa4	c9 3b		cmp #$3b			cmp 	#$3B
.2aa6	f0 10		beq $2ab8			beq 	_DTIArray
.2aa8	4a		lsr a				lsr 	a 							; array flag in C
.2aa9	08		php				php
.2aaa	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.2aac	f0 02		beq $2ab0			beq 	_DTIDollar
.2aae	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.2ab0					_DTIDollar:
.2ab0	49 24		eor #$24			eor 	#"$"
.2ab2	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2ab5	28		plp				plp
.2ab6	90 05		bcc $2abd			bcc 	_DTIExit
.2ab8					_DTIArray:
.2ab8	a9 28		lda #$28			lda 	#"("
.2aba	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2abd					_DTIExit:
.2abd	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.2abe					DTDecodeToken:
.2abe	a2 00		ldx #$00			ldx 	#0 							; table number to use
.2ac0	b1 02		lda ($02),y			lda 	(codePtr),y
.2ac2	c9 84		cmp #$84			cmp 	#$84
.2ac4	b0 05		bcs $2acb			bcs 	_DTNotShift
.2ac6	29 03		and #$03			and 	#3 							; get the shift 1..3
.2ac8	0a		asl a				asl 	a 							; put 2 x in X
.2ac9	aa		tax				tax
.2aca	c8		iny				iny
.2acb					_DTNotShift:
.2acb	bd ca 2b	lda $2bca,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.2ace	85 04		sta $04				sta 	temp0 						; point into temp0
.2ad0	bd cb 2b	lda $2bcb,x			lda 	TokenTableAddress+1,x
.2ad3	85 05		sta $05				sta 	temp0+1
.2ad5	b1 02		lda ($02),y			lda 	(codePtr),y 				; get the token value.
.2ad7	c8		iny				iny 								; consume it.
.2ad8	aa		tax				tax
.2ad9	98		tya				tya
.2ada	48		pha				pha
.2adb					_DTFindText:
.2adb	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.2add	f0 11		beq $2af0			beq 	_DTFoundText
.2adf	ca		dex				dex
.2ae0	a0 00		ldy #$00			ldy 	#0
.2ae2	38		sec				sec
.2ae3	b1 04		lda ($04),y			lda 	(temp0),y
.2ae5	65 04		adc $04				adc 	temp0
.2ae7	85 04		sta $04				sta 	temp0
.2ae9	90 f0		bcc $2adb			bcc 	_DTFindText
.2aeb	e6 05		inc $05				inc 	temp0+1
.2aed	4c db 2a	jmp $2adb			jmp 	_DTFindText
.2af0					_DTFoundText:
.2af0	a0 00		ldy #$00			ldy 	#0 							; get last character
.2af2	b1 04		lda ($04),y			lda 	(temp0),y
.2af4	a8		tay				tay
.2af5	b1 04		lda ($04),y			lda 	(temp0),y
.2af7	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.2af9	f0 11		beq $2b0c			beq 	_DTIsPunctuation
.2afb	c9 1b		cmp #$1b			cmp 	#27
.2afd	b0 0d		bcs $2b0c			bcs 	_DTIsPunctuation
.2aff	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.2b01	20 6b 2a	jsr $2a6b			jsr 	DTSwitchMode
.2b04	a9 83		lda #$83			lda 	#LTYKeyword
.2b06	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2b09	4c 16 2b	jmp $2b16			jmp 	_DTPrint
.2b0c					_DTIsPunctuation:
.2b0c	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.2b0e	20 6b 2a	jsr $2a6b			jsr 	DTSwitchMode
.2b11	a9 82		lda #$82			lda 	#LTYPunctuation
.2b13	20 2a 2a	jsr $2a2a			jsr 	ListOutputCharacter
.2b16					_DTPrint:
.2b16	20 13 2a	jsr $2a13			jsr 	DTPrintLengthPrefix 		; print it out.
.2b19	68		pla				pla
.2b1a	a8		tay				tay
.2b1b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.2b1c					TokTest:
.2b1c	a9 2b		lda #$2b			lda 	#(ttestCode) & $FF
.2b1e	85 02		sta $02				sta 	codePtr
.2b20	a9 2b		lda #$2b			lda 	#(ttestCode) >> 8
.2b22	85 03		sta $03				sta 	1+(codePtr)
.2b24	20 35 2b	jsr $2b35				jsr 	Tokenise
.2b27					TokStop:
>2b27	db						.byte 	$DB
.2b28	4c 27 2b	jmp $2b27				jmp 	TokStop
>2b2b	07				ttestCode:	.byte 	ttEnd-ttestCode-1
>2b2c	34 31 20 26 31 39 46					.text 	'41 &19F'
.2b33					ttEnd:
>2b33	ff ff							.word 	$FFFF

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0b24					tokenBuffer:
>0b24							.fill 	256
.0c24					tokenBufferIndex:
>0c24							.fill 	1
.2b35					Tokenise:
.2b35	20 8a 2b	jsr $2b8a			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.2b38					TokeniseASCIIZ:
.2b38	20 9b 2b	jsr $2b9b			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.2b3b	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.2b3d	8d 24 0c	sta $0c24			sta 	tokenBufferIndex
.2b40	a8		tay				tay 								; start pointer
.2b41					_TokLoop:
>2b41	db						.byte 	$DB
.2b42	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next character
.2b44	f0 29		beq $2b6f			beq 	_TokExit 					; if zero, then exit.
.2b46	c8		iny				iny 								; skip over spaces.
.2b47	c5 20		cmp $20				cmp 	" "
.2b49	f0 f6		beq $2b41			beq 	_TokLoop
.2b4b	88		dey				dey 								; point back to character.
.2b4c	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.2b4e	f0 14		beq $2b64			beq 	_TokHexConst
.2b50	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.2b52	b0 19		bcs $2b6d			bcs 	_TokPunctuation
.2b54	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.2b56	b0 16		bcs $2b6e			bcs 	_TokIdentifier
.2b58	c9 3a		cmp #$3a			cmp 	#"9"+1
.2b5a	b0 11		bcs $2b6d			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.2b5c	c9 30		cmp #$30			cmp 	#"0"
.2b5e	90 0d		bcc $2b6d			bcc 	_TokPunctuation 			; < 0, punctuation.
.2b60	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.2b62	d0 08		bne $2b6c			bne 	_TokConst
.2b64					_TokHexConst:
.2b64	c8		iny				iny									; consume token.
.2b65	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.2b67	20 71 2b	jsr $2b71			jsr 	TokenWrite
.2b6a	a9 10		lda #$10			lda 	#16
.2b6c					_TokConst:
>2b6c	db						.byte 	$DB
.2b6d					_TokPunctuation:
>2b6d	db						.byte 	$DB
.2b6e					_TokIdentifier:
>2b6e	db						.byte 	$DB
.2b6f					_TokExit:
.2b6f	38		sec				sec
.2b70	60		rts				rts
.2b71					TokenWrite:
.2b71	85 0c		sta $0c				sta 	tempShort 					; save XA
.2b73	48		pha				pha
.2b74	8a		txa				txa
.2b75	48		pha				pha
.2b76	a5 0c		lda $0c				lda 	tempShort
.2b78	ae 24 0c	ldx $0c24			ldx 	tokenBufferIndex 			; geet index
.2b7b	9d 24 0b	sta $0b24,x			sta 	tokenBuffer,x 				; write byte to buffer
.2b7e	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.2b80	9d 25 0b	sta $0b25,x			sta 	tokenBuffer+1,x
.2b83	ee 24 0c	inc $0c24			inc 	tokenBufferIndex 			; bump index
.2b86	68		pla				pla
.2b87	aa		tax				tax
.2b88	68		pla				pla
.2b89	60		rts				rts
.2b8a					TokeniseMakeASCIIZ:
.2b8a	a0 00		ldy #$00			ldy 	#0							; get length of string.
.2b8c	b1 02		lda ($02),y			lda 	(codePtr),y
.2b8e	a8		tay				tay
.2b8f	c8		iny				iny 								; +1, the NULL goes here.
.2b90	a9 00		lda #$00			lda 	#0
.2b92	91 02		sta ($02),y			sta 	(codePtr),y 				; write the trailing NULL.
.2b94	e6 02		inc $02				inc 	codePtr 					; bump the pointer.
.2b96	d0 02		bne $2b9a			bne 	_TMKAExit
.2b98	e6 03		inc $03				inc 	codePtr+1
.2b9a					_TMKAExit:
.2b9a	60		rts				rts
.2b9b					TokeniseFixCase:
.2b9b	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.2b9d	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.2b9f					_TFCFlipQ:
.2b9f	8a		txa				txa
.2ba0	49 01		eor #$01			eor 	#1
.2ba2	aa		tax				tax
.2ba3					_TFCLoop:
.2ba3	b1 02		lda ($02),y			lda 	(codePtr),y 				; get character
.2ba5	f0 22		beq $2bc9			beq 	_TFCExit 					; if zero exit.
.2ba7	c9 20		cmp #$20			cmp 	#32 						; if control
.2ba9	90 1a		bcc $2bc5			bcc 	_TFCControl
.2bab	c8		iny				iny 								; preconsume
.2bac	c9 22		cmp #$22			cmp 	#'"'
.2bae	f0 ef		beq $2b9f			beq 	_TFCFlipQ
.2bb0	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.2bb2	90 ef		bcc $2ba3			bcc 	_TFCLoop
.2bb4	c9 7b		cmp #$7b			cmp 	#"z"+1
.2bb6	b0 eb		bcs $2ba3			bcs 	_TFCLoop
.2bb8	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.2bba	d0 e7		bne $2ba3			bne 	_TFCLoop
.2bbc	88		dey				dey
.2bbd	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.2bbf					_TFCWrite:
.2bbf	91 02		sta ($02),y			sta 	(codePtr),y
.2bc1	c8		iny				iny
.2bc2	4c a3 2b	jmp $2ba3			jmp 	_TFCLoop
.2bc5					_TFCControl:
.2bc5	a9 20		lda #$20			lda 	#" "
.2bc7	d0 f6		bne $2bbf			bne 	_TFCWrite
.2bc9					_TFCExit:
.2bc9	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.2bca					TokenTableAddress:
>2bca	d2 2b						.word 	Group0Text
>2bcc	83 2d						.word 	Group1Text
>2bce	b7 2d						.word 	Group2Text
>2bd0	c4 2d						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.2bd2					Group0Text:
>2bd2	03 01 0e 84				.byte $03,$01,$0e,$84                  ; $86 and
>2bd6	02 0f 92				.byte $02,$0f,$92                      ; $87 or
>2bd9	03 18 0f 92				.byte $03,$18,$0f,$92                  ; $88 xor
>2bdd	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>2be0	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>2be3	01 be					.byte $01,$be                          ; $8b >
>2be5	01 bc					.byte $01,$bc                          ; $8c <
>2be7	01 bd					.byte $01,$bd                          ; $8d =
>2be9	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>2bec	01 ab					.byte $01,$ab                          ; $8f +
>2bee	01 ad					.byte $01,$ad                          ; $90 -
>2bf0	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>2bf3	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>2bf6	01 aa					.byte $01,$aa                          ; $93 *
>2bf8	01 af					.byte $01,$af                          ; $94 /
>2bfa	03 0d 0f 84				.byte $03,$0d,$0f,$84                  ; $95 mod
>2bfe	01 9e					.byte $01,$9e                          ; $96 ^
>2c00	01 a1					.byte $01,$a1                          ; $97 !
>2c02	01 bf					.byte $01,$bf                          ; $98 ?
>2c04	06 12 05 10 05 01 94			.byte $06,$12,$05,$10,$05,$01,$94      ; $99 repeat
>2c0b	05 17 08 09 0c 85			.byte $05,$17,$08,$09,$0c,$85          ; $9a while
>2c11	03 06 0f 92				.byte $03,$06,$0f,$92                  ; $9b for
>2c15	02 09 86				.byte $02,$09,$86                      ; $9c if
>2c18	07 04 05 06 10 12 0f 83			.byte $07,$04,$05,$06,$10,$12,$0f,$83  ; $9d defproc
>2c20	05 15 0e 14 09 8c			.byte $05,$15,$0e,$14,$09,$8c          ; $9e until
>2c26	04 17 05 0e 84				.byte $04,$17,$05,$0e,$84              ; $9f wend
>2c2b	04 0e 05 18 94				.byte $04,$0e,$05,$18,$94              ; $a0 next
>2c30	04 14 08 05 8e				.byte $04,$14,$08,$05,$8e              ; $a1 then
>2c35	05 05 0e 04 09 86			.byte $05,$05,$0e,$04,$09,$86          ; $a2 endif
>2c3b	07 05 0e 04 10 12 0f 83			.byte $07,$05,$0e,$04,$10,$12,$0f,$83  ; $a3 endproc
>2c43	01 a8					.byte $01,$a8                          ; $a4 (
>2c45	04 0c 05 0e a8				.byte $04,$0c,$05,$0e,$a8              ; $a5 len(
>2c4a	04 13 07 0e a8				.byte $04,$13,$07,$0e,$a8              ; $a6 sgn(
>2c4f	04 01 02 13 a8				.byte $04,$01,$02,$13,$a8              ; $a7 abs(
>2c54	07 12 01 0e 04 0f 0d a8			.byte $07,$12,$01,$0e,$04,$0f,$0d,$a8  ; $a8 random(
>2c5c	04 10 01 07 85				.byte $04,$10,$01,$07,$85              ; $a9 page
>2c61	04 14 12 15 85				.byte $04,$14,$12,$15,$85              ; $aa true
>2c66	05 06 01 0c 13 85			.byte $05,$06,$01,$0c,$13,$85          ; $ab false
>2c6c	04 0d 09 0e a8				.byte $04,$0d,$09,$0e,$a8              ; $ac min(
>2c71	04 0d 01 18 a8				.byte $04,$0d,$01,$18,$a8              ; $ad max(
>2c76	04 13 19 13 a8				.byte $04,$13,$19,$13,$a8              ; $ae sys(
>2c7b	06 14 09 0d 05 12 a8			.byte $06,$14,$09,$0d,$05,$12,$a8      ; $af timer(
>2c82	06 05 16 05 0e 14 a8			.byte $06,$05,$16,$05,$0e,$14,$a8      ; $b0 event(
>2c89	04 07 05 14 a8				.byte $04,$07,$05,$14,$a8              ; $b1 get(
>2c8e	06 09 0e 0b 05 19 a8			.byte $06,$09,$0e,$0b,$05,$19,$a8      ; $b2 inkey(
>2c95	06 01 0c 0c 0f 03 a8			.byte $06,$01,$0c,$0c,$0f,$03,$a8      ; $b3 alloc(
>2c9c	05 03 08 12 24 a8			.byte $05,$03,$08,$12,$24,$a8          ; $b4 chr$(
>2ca2	06 0c 05 06 14 24 a8			.byte $06,$0c,$05,$06,$14,$24,$a8      ; $b5 left$(
>2ca9	05 0d 09 04 24 a8			.byte $05,$0d,$09,$04,$24,$a8          ; $b6 mid$(
>2caf	07 12 09 07 08 14 24 a8			.byte $07,$12,$09,$07,$08,$14,$24,$a8  ; $b7 right$(
>2cb7	05 13 14 12 24 a8			.byte $05,$13,$14,$12,$24,$a8          ; $b8 str$(
>2cbd	04 16 01 0c a8				.byte $04,$16,$01,$0c,$a8              ; $b9 val(
>2cc2	05 10 05 05 0b a8			.byte $05,$10,$05,$05,$0b,$a8          ; $ba peek(
>2cc8	05 04 05 05 0b a8			.byte $05,$04,$05,$05,$0b,$a8          ; $bb deek(
>2cce	05 0c 05 05 0b a8			.byte $05,$0c,$05,$05,$0b,$a8          ; $bc leek(
>2cd4	04 01 13 03 a8				.byte $04,$01,$13,$03,$a8              ; $bd asc(
>2cd9	04 09 0e 14 a8				.byte $04,$09,$0e,$14,$a8              ; $be int(
>2cde	06 06 0c 0f 01 14 a8			.byte $06,$06,$0c,$0f,$01,$14,$a8      ; $bf float(
>2ce5	06 09 13 16 01 0c a8			.byte $06,$09,$13,$16,$01,$0c,$a8      ; $c0 isval(
>2cec	07 15 10 10 05 12 24 a8			.byte $07,$15,$10,$10,$05,$12,$24,$a8  ; $c1 upper$(
>2cf4	07 0c 0f 17 05 12 24 a8			.byte $07,$0c,$0f,$17,$05,$12,$24,$a8  ; $c2 lower$(
>2cfc	01 80					.byte $01,$80                          ; $c3 @
>2cfe	01 be					.byte $01,$be                          ; $c4 ~
>2d00	01 a6					.byte $01,$a6                          ; $c5 &
>2d02	01 a9					.byte $01,$a9                          ; $c6 )
>2d04	01 ba					.byte $01,$ba                          ; $c7 :
>2d06	01 ac					.byte $01,$ac                          ; $c8 ,
>2d08	01 bb					.byte $01,$bb                          ; $c9 ;
>2d0a	01 a7					.byte $01,$a7                          ; $ca '
>2d0c	02 14 8f				.byte $02,$14,$8f                      ; $cb to
>2d0f	04 13 14 05 90				.byte $04,$13,$14,$05,$90              ; $cc step
>2d14	04 10 12 0f 83				.byte $04,$10,$12,$0f,$83              ; $cd proc
>2d19	05 0c 0f 03 01 8c			.byte $05,$0c,$0f,$03,$01,$8c          ; $ce local
>2d1f	03 04 09 8d				.byte $03,$04,$09,$8d                  ; $cf dim
>2d23	03 12 05 8d				.byte $03,$12,$05,$8d                  ; $d0 rem
>2d27	03 0c 05 94				.byte $03,$0c,$05,$94                  ; $d1 let
>2d2b	05 09 0e 10 15 94			.byte $05,$09,$0e,$10,$15,$94          ; $d2 input
>2d31	04 05 0c 13 85				.byte $04,$05,$0c,$13,$85              ; $d3 else
>2d36	03 16 04 95				.byte $03,$16,$04,$95                  ; $d4 vdu
>2d3a	05 10 12 09 0e 94			.byte $05,$10,$12,$09,$0e,$94          ; $d5 print
>2d40	04 07 0f 14 8f				.byte $04,$07,$0f,$14,$8f              ; $d6 goto
>2d45	05 07 0f 13 15 82			.byte $05,$07,$0f,$13,$15,$82          ; $d7 gosub
>2d4b	06 12 05 14 15 12 8e			.byte $06,$12,$05,$14,$15,$12,$8e      ; $d8 return
>2d52	04 04 01 14 81				.byte $04,$04,$01,$14,$81              ; $d9 data
>2d57	06 01 13 13 05 12 94			.byte $06,$01,$13,$13,$05,$12,$94      ; $da assert
>2d5e	04 10 0f 0b 85				.byte $04,$10,$0f,$0b,$85              ; $db poke
>2d63	04 04 0f 0b 85				.byte $04,$04,$0f,$0b,$85              ; $dc doke
>2d68	04 0c 0f 0b 85				.byte $04,$0c,$0f,$0b,$85              ; $dd loke
>2d6d	03 09 0e 8b				.byte $03,$09,$0e,$8b                  ; $de ink
>2d71	05 10 01 10 05 92			.byte $05,$10,$01,$10,$05,$92          ; $df paper
>2d77	03 03 0c 93				.byte $03,$03,$0c,$93                  ; $e0 cls
>2d7b	06 0c 0f 03 01 14 85			.byte $06,$0c,$0f,$03,$01,$14,$85      ; $e1 locate
>2d82	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.2d83					Group1Text:
>2d83	05 03 0c 05 01 92			.byte $05,$03,$0c,$05,$01,$92          ; $86 clear
>2d89	04 0c 0f 01 84				.byte $04,$0c,$0f,$01,$84              ; $87 load
>2d8e	04 13 01 16 85				.byte $04,$13,$01,$16,$85              ; $88 save
>2d93	04 0c 09 13 94				.byte $04,$0c,$09,$13,$94              ; $89 list
>2d98	03 0e 05 97				.byte $03,$0e,$05,$97                  ; $8a new
>2d9c	03 12 15 8e				.byte $03,$12,$15,$8e                  ; $8b run
>2da0	04 12 05 01 84				.byte $04,$12,$05,$01,$84              ; $8c read
>2da5	07 12 05 13 14 0f 12 85			.byte $07,$12,$05,$13,$14,$0f,$12,$85  ; $8d restore
>2dad	03 05 0e 84				.byte $03,$05,$0e,$84                  ; $8e end
>2db1	04 13 14 0f 90				.byte $04,$13,$14,$0f,$90              ; $8f stop
>2db6	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.2db7					Group2Text:
>2db7	05 16 10 0f 0b 85			.byte $05,$16,$10,$0f,$0b,$85          ; $86 vpoke
>2dbd	05 16 04 0f 0b 85			.byte $05,$16,$04,$0f,$0b,$85          ; $87 vdoke
>2dc3	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.2dc4					Group3Text:
>2dc4	06 16 10 05 05 0b a8			.byte $06,$16,$10,$05,$05,$0b,$a8      ; $86 vpeek(
>2dcb	06 16 04 05 05 0b a8			.byte $06,$16,$04,$05,$05,$0b,$a8      ; $87 vdeek(
>2dd2	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.2dd3					tokeniserHandler:
.2dd3	7c d6 2d	jmp ($2dd6,x)			jmp 	(tokeniserVectors,x)
.2dd6					tokeniserVectors:
>2dd6	49 29					.word Detokenise           ; index 0
>2dd8	3f 29					.word ListLine             ; index 2

;******  Return to file: basic.asm

.2dda					section_end_tokeniser:
.2dda					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0c25					varHash:
>0c25							.fill	1
.0c26					varType:
>0c26							.fill 	1
.0c27					varEnd:
>0c27							.fill 	1
.007c					hashList:
>007c							.fill 	2
.2dda					AccessVariable:
.2dda	aa		tax				tax 								; stack in X
.2ddb	c8		iny				iny
.2ddc	b1 02		lda ($02),y			lda 	(codePtr),y
.2dde	88		dey				dey
.2ddf	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.2de1	d0 15		bne $2df8			bne 	_AVLong
.2de3	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.2de5	38		sec				sec 	 							; make it 0-25
.2de6	e9 01		sbc #$01			sbc 	#1
.2de8	0a		asl a				asl 	a 							; x 4 is LSB of address
.2de9	0a		asl a				asl 	a
.2dea	95 48		sta $48,x			sta 	esInt0,x
.2dec	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.2dee	95 50		sta $50,x			sta 	esInt1,x
.2df0	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.2df2	95 40		sta $40,x			sta 	esType,x
.2df4	c8		iny				iny 								; skip over the variable reference in the code.
.2df5	c8		iny				iny
.2df6	8a		txa				txa 								; stack in A to return.
.2df7	60		rts				rts
.2df8					_AVLong:
.2df8	8a		txa				txa
.2df9	48		pha				pha
.2dfa	20 41 2e	jsr $2e41			jsr 	AccessSetup 				; set up the basic stuff.
.2dfd	20 35 30	jsr $3035			jsr 	FindVariable 				; does the variable exist already
.2e00	b0 0e		bcs $2e10			bcs 	_AVFound
.2e02	ad 26 0c	lda $0c26			lda 	varType 					; is the variable type an array
.2e05	4a		lsr a				lsr 	a
.2e06	90 05		bcc $2e0d			bcc 	_AVCanCreate
.2e08	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.2e0a	20 aa 23	jsr $23aa		jsr	errorHandler
.2e0d					_AVCanCreate:
.2e0d	20 f4 2e	jsr $2ef4			jsr 	CreateVariable 				; no, create it.
.2e10					_AVFound:
.2e10	68		pla				pla
.2e11	aa		tax				tax
.2e12	18		clc				clc 								; copy temp0 (variable record address)
.2e13	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.2e15	69 05		adc #$05			adc 	#5
.2e17	95 48		sta $48,x			sta 	esInt0,x
.2e19	a5 05		lda $05				lda 	temp0+1
.2e1b	69 00		adc #$00			adc 	#0
.2e1d	95 50		sta $50,x			sta 	esInt1,x
.2e1f	a9 00		lda #$00			lda 	#0
.2e21	95 58		sta $58,x			sta 	esInt2,x
.2e23	95 60		sta $60,x			sta 	esInt3,x
.2e25	ac 26 0c	ldy $0c26			ldy 	varType 					; get the type ID from the type.
.2e28	b9 01 2e	lda $2e01,y			lda 	_AVTypeTable-$3A,y
.2e2b	95 40		sta $40,x			sta 	esType,x
.2e2d	ac 27 0c	ldy $0c27			ldy 	varEnd 						; restore Y
.2e30	ad 26 0c	lda $0c26			lda 	VarType 					; get variable type, put LSB into C
.2e33	4a		lsr a				lsr 	a
.2e34	90 03		bcc $2e39			bcc 	_AVNotArray
.2e36	20 7e 2e	jsr $2e7e			jsr 	AccessArray 				; array lookup. if LSB was set.
.2e39					_AVNotArray:
.2e39	8a		txa				txa 								; return stack in A and return
.2e3a	60		rts				rts
.2e3b					_AVTypeTable:
>2e3b	80 80						.byte 	$80,$80						; integer
>2e3d	c0 c0						.byte 	$C0,$C0 					; string
>2e3f	81 81						.byte 	$81,$81 					; float
.2e41					AccessSetup:
.2e41	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.2e43	8d 25 0c	sta $0c25			sta 	varHash
.2e46	98		tya				tya
.2e47	48		pha				pha
.2e48	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.2e4a	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.2e4c	b0 0b		bcs $2e59			bcs 	_ASComplete
.2e4e	18		clc				clc 								; add to the hash. Might improve this.
.2e4f	6d 25 0c	adc $0c25			adc 	varHash
.2e52	8d 25 0c	sta $0c25			sta 	varHash
.2e55	c8		iny				iny 								; next character
.2e56	4c 48 2e	jmp $2e48			jmp 	_ASLoop
.2e59					_ASComplete:
.2e59	8d 26 0c	sta $0c26			sta 	varType 					; save variable type byte
.2e5c	c8		iny				iny
.2e5d	8c 27 0c	sty $0c27			sty 	varEnd 						; save the ending position.
.2e60	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.2e61	e9 3a		sbc #$3a			sbc 	#$3A
.2e63	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.2e64	0a		asl a				asl 	a
.2e65	0a		asl a				asl 	a
.2e66	0a		asl a				asl 	a 							; 2 bytes/word
.2e67	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2e69	ad 25 0c	lda $0c25			lda 	varHash 					; get hash
.2e6c	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2e6e	0a		asl a				asl  	a 							; x 2 (for word) and CC
.2e6f	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.2e71	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.2e73	85 7c		sta $7c				sta 	hashList
.2e75	a9 0a		lda #$0a			lda 	#hashTables >> 8
.2e77	69 00		adc #$00			adc 	#0
.2e79	85 7d		sta $7d				sta 	hashList+1
.2e7b	68		pla				pla
.2e7c	a8		tay				tay
.2e7d	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.2e7e					AccessArray:
.2e7e	e8		inx				inx
.2e7f	8a		txa				txa
.2e80	a2 04		ldx #$04		ldx	#4
.2e82	20 e0 22	jsr $22e0		jsr	mainHandler
.2e85	aa		tax				tax
.2e86	ca		dex				dex
.2e87	a2 00		ldx #$00		ldx	#0
.2e89	20 e0 22	jsr $22e0		jsr	mainHandler
.2e8c	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value
.2e8e	15 59		ora $59,x			ora 	esInt2+1,x
.2e90	d0 33		bne $2ec5			bne 	_AABadIndex
.2e92	98		tya				tya
.2e93	48		pha				pha
.2e94	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.2e96	85 04		sta $04				sta 	temp0 						; address (+0) max (+2) and size (+4)
.2e98	b5 50		lda $50,x			lda 	esInt1,x
.2e9a	85 05		sta $05				sta 	temp0+1
.2e9c	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.2e9e	b5 49		lda $49,x			lda 	esInt0+1,x
.2ea0	d1 04		cmp ($04),y			cmp 	(temp0),y
.2ea2	c8		iny				iny
.2ea3	b5 51		lda $51,x			lda 	esInt1+1,x
.2ea5	f1 04		sbc ($04),y			sbc 	(temp0),y
.2ea7	b0 1c		bcs $2ec5			bcs 	_AABadIndex 				; if >= then fail.
.2ea9	e8		inx				inx 								; point to index
.2eaa	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.2eac	b1 04		lda ($04),y			lda 	(temp0),y
.2eae	20 ca 2e	jsr $2eca			jsr 	MultiplyTOSByA 				; specialist multiplier.
.2eb1	ca		dex				dex
.2eb2	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.2eb4	18		clc				clc
.2eb5	b5 49		lda $49,x			lda 	esInt0+1,x
.2eb7	71 04		adc ($04),y			adc 	(temp0),y
.2eb9	95 48		sta $48,x			sta 	esInt0,x
.2ebb	b5 51		lda $51,x			lda 	esInt1+1,x
.2ebd	c8		iny				iny
.2ebe	71 04		adc ($04),y			adc 	(temp0),y
.2ec0	95 50		sta $50,x			sta 	esInt1,x
.2ec2	68		pla				pla
.2ec3	a8		tay				tay
.2ec4	60		rts				rts
.2ec5					_AABadIndex:
.2ec5	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.2ec7	20 aa 23	jsr $23aa		jsr	errorHandler
.2eca					MultiplyTOSByA:
.2eca	48		pha				pha
.2ecb	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.2ecd	85 06		sta $06				sta 	temp1
.2ecf	b5 50		lda $50,x			lda 	esInt1,x
.2ed1	85 07		sta $07				sta 	temp1+1
.2ed3	68		pla				pla
.2ed4	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.2ed6	36 50		rol $50,x			rol 	esInt1,x
.2ed8	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.2eda	f0 17		beq $2ef3			beq 	_MTBAExit
.2edc	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.2ede	d0 0f		bne $2eef			bne 	_MTBANotFloat
.2ee0	48		pha				pha
.2ee1	18		clc				clc 								; so this will make it x 3
.2ee2	b5 48		lda $48,x			lda 	esInt0,x
.2ee4	65 06		adc $06				adc 	temp1
.2ee6	95 48		sta $48,x			sta 	esInt0,x
.2ee8	b5 50		lda $50,x			lda 	esInt1,x
.2eea	65 07		adc $07				adc 	temp1+1
.2eec	95 50		sta $50,x			sta 	esInt1,x
.2eee	68		pla				pla
.2eef					_MTBANotFloat:
.2eef	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.2ef1	36 50		rol $50,x			rol 	esInt1,x
.2ef3					_MTBAExit:
.2ef3	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2ef4					CreateVariable:
.2ef4	98		tya				tya 								; push Y on the stack twice.
.2ef5	48		pha				pha
.2ef6	48		pha				pha
.2ef7	ae 26 0c	ldx $0c26			ldx 	varType 					; get var type 0-5
.2efa	bd 05 2f	lda $2f05,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.2efd	48		pha				pha 								; save length
.2efe	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.2f00	85 04		sta $04				sta 	temp0 						; (address of the new variable)
.2f02	a5 10		lda $10				lda 	lowMemory+1
.2f04	85 05		sta $05				sta 	temp0+1
.2f06	68		pla				pla 								; get length
.2f07	20 76 10	jsr $1076			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2f0a	ad 25 0c	lda $0c25			lda 	varHash 					; store hash at offset 4.
.2f0d	a0 04		ldy #$04			ldy 	#4
.2f0f	91 04		sta ($04),y			sta 	(temp0),y
.2f11	68		pla				pla 								; offset, work out where the variable name is.
.2f12	18		clc				clc
.2f13	65 02		adc $02				adc 	codePtr
.2f15	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2f17	91 04		sta ($04),y			sta 	(temp0),y
.2f19	a5 03		lda $03				lda 	codePtr+1
.2f1b	69 00		adc #$00			adc 	#0
.2f1d	c8		iny				iny
.2f1e	91 04		sta ($04),y			sta 	(temp0),y
.2f20	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.2f22	b1 7c		lda ($7c),y			lda 	(hashList),y
.2f24	91 04		sta ($04),y			sta 	(temp0),y
.2f26	c8		iny				iny
.2f27	b1 7c		lda ($7c),y			lda 	(hashList),y
.2f29	91 04		sta ($04),y			sta 	(temp0),y
.2f2b	a5 05		lda $05				lda 	temp0+1 					; set new link
.2f2d	91 7c		sta ($7c),y			sta 	(hashList),y
.2f2f	88		dey				dey
.2f30	a5 04		lda $04				lda 	temp0
.2f32	91 7c		sta ($7c),y			sta 	(hashList),y
.2f34	ad 26 0c	lda $0c26			lda 	varType 					; type in A
.2f37	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.2f39	20 45 2f	jsr $2f45			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.2f3c	68		pla				pla
.2f3d	a8		tay				tay
.2f3e	60		rts				rts
>2f3f	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>2f41	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>2f43	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.2f45					ZeroTemp0Y:
.2f45	4a		lsr a				lsr 	a 							; bit 0 in carry
.2f46	0a		asl a				asl 	a
.2f47	b0 19		bcs $2f62			bcs 	_ZTExit 					; we don't initialise arrays.
.2f49	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.2f4b	f0 16		beq $2f63			beq 	_ZTWriteNullString 			; write "" string
.2f4d	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.2f4f	f0 22		beq $2f73			beq 	_ZTWriteFloat
.2f51	98		tya				tya
.2f52	48		pha				pha
.2f53	a9 00		lda #$00			lda 	#0
.2f55	91 04		sta ($04),y			sta 	(temp0),y
.2f57	c8		iny				iny
.2f58	91 04		sta ($04),y			sta 	(temp0),y
.2f5a	c8		iny				iny
.2f5b	91 04		sta ($04),y			sta 	(temp0),y
.2f5d	c8		iny				iny
.2f5e	91 04		sta ($04),y			sta 	(temp0),y
.2f60	68		pla				pla
.2f61	a8		tay				tay
.2f62					_ZTExit:
.2f62	60		rts				rts
.2f63					_ZTWriteNullString:
.2f63	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.2f65	8d cc 0a	sta $0acc			sta 	NullString
.2f68	a9 cc		lda #$cc			lda 	#NullString & $FF
.2f6a	91 04		sta ($04),y			sta 	(temp0),y
.2f6c	a9 0a		lda #$0a			lda 	#NullString >> 8
.2f6e	c8		iny				iny
.2f6f	91 04		sta ($04),y			sta 	(temp0),y
.2f71	88		dey				dey
.2f72	60		rts				rts
.2f73					_ZTWriteFloat:
.2f73	8a		txa				txa
.2f74	48		pha				pha
.2f75	a2 1e		ldx #$1e		ldx	#30
.2f77	20 92 26	jsr $2692		jsr	floatingpointHandler
.2f7a	68		pla				pla
.2f7b	aa		tax				tax
.2f7c	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.2f7d					CreateArray:
.2f7d	20 41 2e	jsr $2e41			jsr 	AccessSetup 				; set up the basic stuff.
.2f80	ad 26 0c	lda $0c26			lda 	varType 					; is the variable type an array
.2f83	4a		lsr a				lsr 	a
.2f84	90 3f		bcc $2fc5			bcc 	_CANotArray 				; no, cause an error.
.2f86	20 35 30	jsr $3035			jsr 	FindVariable 				; does the variable exist already
.2f89	b0 35		bcs $2fc0			bcs 	_CAFound 					; cannot redefine it.
.2f8b	20 f4 2e	jsr $2ef4			jsr 	CreateVariable 				; create the variable entry.
.2f8e	ac 27 0c	ldy $0c27			ldy 	varEnd 						; point Y to the end of the variable entry.
.2f91	a5 04		lda $04				lda 	temp0 						; push address of new variable entry on the stack
.2f93	48		pha				pha
.2f94	a5 05		lda $05				lda 	temp0+1
.2f96	48		pha				pha
.2f97	ad 26 0c	lda $0c26			lda 	varType 					; push variable type on the stack.
.2f9a	48		pha				pha
.2f9b	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.2f9d	a2 04		ldx #$04		ldx	#4
.2f9f	20 e0 22	jsr $22e0		jsr	mainHandler
.2fa2	a2 00		ldx #$00		ldx	#0
.2fa4	20 e0 22	jsr $22e0		jsr	mainHandler
.2fa7	68		pla				pla 		 						; restore type and position.
.2fa8	8d 26 0c	sta $0c26			sta 	varType
.2fab	68		pla				pla
.2fac	85 05		sta $05				sta 	temp0+1
.2fae	68		pla				pla
.2faf	85 04		sta $04				sta 	temp0
.2fb1	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.2fb3	29 e0		and #$e0			and 	#$E0
.2fb5	05 58		ora $58				ora 	esInt2
.2fb7	05 60		ora $60				ora 	esInt3
.2fb9	f0 0f		beq $2fca			beq 	_CASizeOk
.2fbb					_CASize:
.2fbb	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2fbd	20 aa 23	jsr $23aa		jsr	errorHandler
.2fc0					_CAFound:
.2fc0	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.2fc2	20 aa 23	jsr $23aa		jsr	errorHandler
.2fc5					_CANotArray:
.2fc5	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.2fc7	20 aa 23	jsr $23aa		jsr	errorHandler
.2fca					_CASizeOk:
.2fca	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.2fcc	d0 02		bne $2fd0			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.2fce	e6 49		inc $49				inc 	esInt0+1
.2fd0					_CANoCarry:
.2fd0	98		tya				tya
.2fd1	48		pha				pha
.2fd2	a0 05		ldy #$05			ldy 	#5
.2fd4	a5 0f		lda $0f				lda 	lowMemory 					; copy low memory address in +5,+6
.2fd6	91 04		sta ($04),y			sta 	(temp0),y 					; this is where it will come from
.2fd8	c8		iny				iny
.2fd9	a5 10		lda $10				lda 	lowMemory+1
.2fdb	91 04		sta ($04),y			sta 	(temp0),y
.2fdd	c8		iny				iny
.2fde	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.2fe0	91 04		sta ($04),y			sta 	(temp0),y
.2fe2	c8		iny				iny
.2fe3	a5 50		lda $50				lda 	esInt1
.2fe5	91 04		sta ($04),y			sta 	(temp0),y
.2fe7	c8		iny				iny
.2fe8	ae 26 0c	ldx $0c26			ldx 	varType 					; get the length per element
.2feb	bd f3 2f	lda $2ff3,x			lda 	_CAActualSize-$3A-1,x
.2fee	91 04		sta ($04),y			sta 	(temp0),y
.2ff0	aa		tax				tax 								; save size in X
.2ff1	a5 0f		lda $0f				lda 	lowMemory 					; set temp0 to low memory.
.2ff3	85 04		sta $04				sta 	temp0
.2ff5	a5 10		lda $10				lda 	lowMemory+1
.2ff7	85 05		sta $05				sta 	temp0+1
.2ff9	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.2ffb	85 06		sta $06				sta 	temp1
.2ffd	85 07		sta $07				sta 	temp1+1
.2fff					_CAInitialiseArray:
.2fff	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3001	ad 26 0c	lda $0c26			lda 	varType 					; base type of array in A.
.3004	29 fe		and #$fe			and 	#$FE
.3006	20 45 2f	jsr $2f45			jsr 	ZeroTemp0Y
.3009	8a		txa				txa 								; add X to temp0, also updating lowMemory
.300a	18		clc				clc
.300b	65 04		adc $04				adc 	temp0
.300d	85 04		sta $04				sta 	temp0
.300f	85 0f		sta $0f				sta 	lowMemory
.3011	a5 05		lda $05				lda 	temp0+1
.3013	69 00		adc #$00			adc 	#0
.3015	85 05		sta $05				sta 	temp0+1
.3017	85 10		sta $10				sta 	lowMemory+1
.3019	e6 06		inc $06				inc 	temp1 						; bump the counter.
.301b	d0 02		bne $301f			bne 	_CAIANoCarry
.301d	e6 07		inc $07				inc 	temp1+1
.301f					_CAIANoCarry:
.301f	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3021	c5 06		cmp $06				cmp 	temp1
.3023	d0 da		bne $2fff			bne 	_CAInitialiseArray
.3025	a5 50		lda $50				lda 	esInt1
.3027	c5 07		cmp $07				cmp 	temp1+1
.3029	d0 d4		bne $2fff			bne 	_CAInitialiseArray
.302b	68		pla				pla
.302c	a8		tay				tay
.302d	60		rts				rts
.302e					_CAActualSize:
>302e	04 00						.byte 	VarISize,0
>3030	02 00						.byte 	VarSSize,0
>3032	06 00						.byte 	VarFSize,0
>3034	db						.byte 	$DB

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3035					FindVariable:
.3035	98		tya				tya
.3036	48		pha				pha
.3037	98		tya				tya 								; point temp2 to the actual name.
.3038	18		clc				clc
.3039	65 02		adc $02				adc 	codePtr
.303b	85 08		sta $08				sta 	temp2
.303d	a5 03		lda $03				lda 	codePtr+1
.303f	69 00		adc #$00			adc 	#0
.3041	85 09		sta $09				sta 	temp2+1
.3043	a0 00		ldy #$00			ldy 	#0
.3045	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.3047	85 04		sta $04				sta 	temp0
.3049	a5 7d		lda $7d				lda 	hashList+1
.304b	85 05		sta $05				sta 	temp0+1
.304d	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.304f	b1 04		lda ($04),y			lda 	(temp0),y
.3051	f0 2c		beq $307f			beq 	_FVFail
.3053	aa		tax				tax
.3054	88		dey				dey		 							; get LSB
.3055	b1 04		lda ($04),y			lda 	(temp0),y
.3057	85 04		sta $04				sta 	temp0 						; update pointer.
.3059	86 05		stx $05				stx 	temp0+1
.305b	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.305d	b1 04		lda ($04),y			lda 	(temp0),y
.305f	cd 25 0c	cmp $0c25			cmp 	varHash
.3062	d0 e9		bne $304d			bne 	_FVNext 					; if not, no point in checking the name.
.3064	88		dey				dey 								; copy name pointer to temp1.
.3065	b1 04		lda ($04),y			lda 	(temp0),y
.3067	85 07		sta $07				sta 	temp1+1
.3069	88		dey				dey
.306a	b1 04		lda ($04),y			lda 	(temp0),y
.306c	85 06		sta $06				sta 	temp1
.306e	a0 00		ldy #$00			ldy 	#0
.3070					_FVCheck:
.3070	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.3072	d1 08		cmp ($08),y			cmp 	(temp2),y
.3074	d0 d7		bne $304d			bne 	_FVNext		 				; fail if different.
.3076	c8		iny				iny
.3077	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3079	90 f5		bcc $3070			bcc 	_FVCheck
.307b	68		pla				pla
.307c	a8		tay				tay
.307d	38		sec				sec
.307e	60		rts				rts
.307f					_FVFail:
.307f	68		pla				pla
.3080	a8		tay				tay
.3081	18		clc				clc
.3082	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3083					HashTableReset:
.3083	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.3085	a9 00		lda #$00			lda 	#0
.3087					_HTRClear:
.3087	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.308a	ca		dex				dex
.308b	d0 fa		bne $3087			bne 	_HTRClear
.308d	60		rts				rts

;******  Return to file: variable/variable.asm

.308e					variableHandler:
.308e	7c 91 30	jmp ($3091,x)			jmp 	(variableVectors,x)
.3091					variableVectors:
>3091	da 2d					.word AccessVariable       ; index 0
>3093	7d 2f					.word CreateArray          ; index 2
>3095	83 30					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3097					section_end_variable:

;******  End of listing
