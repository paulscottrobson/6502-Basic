
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/basic.prg basic.asm
; Thu Mar  4 17:46:19 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm


;******  Processing file: main/01common.inc


;******  Processing file: main/../generated/installed.inc

=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1

;******  Return to file: main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: main/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
>000a					temp3: 	.fill 	2
.000c					tempShort:
>000c							.fill 	1
.000d					highMemory:
>000d							.fill 	2
.000f					lowMemory:
>000f							.fill 	2
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					NullString:
>0acc							.fill 	1							; don't waste memory concreting null strings.
.0acd					convertBuffer:
>0acd							.fill 	35

;******  Processing file: main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c4					TOK_TOKENS=$c4
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_AT                       = $c1 ; @
=$c2					TKW_WAVY                     = $c2 ; ~
=$c3					TKW_AMP                      = $c3 ; &
=$c4					TKW_RPAREN                   = $c4 ; )
=$c5					TKW_COLON                    = $c5 ; :
=$c6					TKW_COMMA                    = $c6 ; ,
=$c7					TKW_SEMICOLON                = $c7 ; ;
=$c8					TKW_QUOTE                    = $c8 ; '
=$c9					TKW_TO                       = $c9 ; to
=$ca					TKW_STEP                     = $ca ; step
=$cb					TKW_PROC                     = $cb ; proc
=$cc					TKW_LOCAL                    = $cc ; local
=$cd					TKW_DIM                      = $cd ; dim
=$ce					TKW_REM                      = $ce ; rem
=$cf					TKW_LET                      = $cf ; let
=$d0					TKW_INPUT                    = $d0 ; input
=$d1					TKW_ELSE                     = $d1 ; else
=$d2					TKW_VDU                      = $d2 ; vdu
=$d3					TKW_PRINT                    = $d3 ; print
=$d4					TKW_GOTO                     = $d4 ; goto
=$d5					TKW_GOSUB                    = $d5 ; gosub
=$d6					TKW_RETURN                   = $d6 ; return
=$d7					TKW_DATA                     = $d7 ; data
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_POKE                     = $d9 ; poke
=$da					TKW_DOKE                     = $da ; doke
=$db					TKW_LOKE                     = $db ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: basic.asm


;******  Processing file: main/imath/intmacros.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space.
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match.

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm

.1000					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 6f 13	jmp $136f			jmp 	Command_Run
.2511					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: main/../generated/testcode.inc

>5000	0b 0a 00 01 31 3a 8d 90			.byte 11,10,0,1,49,58,141,144,65,99,128,9,11,0,24,58,141,144,66,128,16,12,0,3,49,60,141,133,6,83,65,86,69,77,69,128,23,13,0,211,133,5,83,84,65,82,84,198,1,49,58,198,3,49,60,198,24,58,128,30,14,0,203,4,5,13,15,59,106,198,195,82,77,69,89,120,198,133,8,73,78,68,69,77,79,33,33,196,128,21,15,0,211,133,3,69,78,68,198,1,49,58,198,3,49,60,198,24,58,128,8,16,0,153,197,158,171,128,4,17,0,128,21,18,0,157,4,5,13,15,59,1,49,58,198,24,58,198,3,49,60,196,128,18,19,0,3,49,60,141,3,49,60,143,133,4,33,33,33,33,128,43,20,0,211,133,4,68,69,77,79,198,1,49,58,198,3,1,49,60,198,133,1,36,199,184,24,58,198,80,196,198,133,1,36,184,193,3,49,60,198,80,196,128,8,21,0,153,197,158,171,128,5,22,0,163,128,4,23,0,128,10,24,0,157,24,15,50,59,196,128,10,25,0,211,133,3,88,79,50,128,5,26,0,163,128,4,27,0,128,0
>5008	41 63 80 09 0b 00 18 3a 8d 90 42 80 10 0c 00 03
>5018	31 3c 8d 85 06 53 41 56 45 4d 45 80 17 0d 00 d3
>5028	85 05 53 54 41 52 54 c6 01 31 3a c6 03 31 3c c6
>5038	18 3a 80 1e 0e 00 cb 04 05 0d 0f 3b 6a c6 c3 52
>5048	4d 45 59 78 c6 85 08 49 4e 44 45 4d 4f 21 21 c4
>5058	80 15 0f 00 d3 85 03 45 4e 44 c6 01 31 3a c6 03
>5068	31 3c c6 18 3a 80 08 10 00 99 c5 9e ab 80 04 11
>5078	00 80 15 12 00 9d 04 05 0d 0f 3b 01 31 3a c6 18
>5088	3a c6 03 31 3c c4 80 12 13 00 03 31 3c 8d 03 31
>5098	3c 8f 85 04 21 21 21 21 80 2b 14 00 d3 85 04 44
>50a8	45 4d 4f c6 01 31 3a c6 03 01 31 3c c6 85 01 24
>50b8	c7 b8 18 3a c6 50 c4 c6 85 01 24 b8 c1 03 31 3c
>50c8	c6 50 c4 80 08 15 00 99 c5 9e ab 80 05 16 00 a3
>50d8	80 04 17 00 80 0a 18 00 9d 18 0f 32 3b c4 80 0a
>50e8	19 00 d3 85 03 58 4f 32 80 05 1a 00 a3 80 04 1b
>50f8	00 80 00

;******  Return to file: main/00start.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/assert.asm

.101a					Command_Assert:
.101a	20 17 1a	jsr $1a17			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 37 20	jsr $2037			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 3e 21	jsr $213e			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	85 0d		sta $0d				sta 	highMemory
.102f	ad cb 0a	lda $0acb			lda 	endMemory+1
.1032	85 0e		sta $0e				sta 	highMemory+1
.1034	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1037	85 04		sta $04				sta 	temp0
.1039	ad c9 0a	lda $0ac9			lda 	basePage+1
.103c	85 05		sta $05				sta 	temp0+1
.103e					_CCFindEnd:
.103e	a0 00		ldy #$00			ldy 	#0
.1040	b1 04		lda ($04),y			lda 	(temp0),y
.1042	f0 0c		beq $1050			beq 	_CCFoundEnd 				; offset zero is end.
.1044	18		clc				clc
.1045	65 04		adc $04				adc 	temp0 						; move to next line
.1047	85 04		sta $04				sta 	temp0
.1049	90 f3		bcc $103e			bcc 	_CCFindEnd
.104b	e6 05		inc $05				inc 	temp0+1
.104d	4c 3e 10	jmp $103e			jmp 	_CCFindEnd
.1050					_CCFoundEnd:
.1050	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1052	85 0f		sta $0f				sta 	lowMemory
.1054	a5 05		lda $05				lda 	temp0+1
.1056	85 10		sta $10				sta 	lowMemory+1
.1058	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105a	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.105d	20 9d 20	jsr $209d			jsr 	RSReset 					; reset the return stack.
.1060	a2 02		ldx #$02		ldx	#2
.1062	20 0a 25	jsr $250a		jsr	variableHandler
.1065	20 22 15	jsr $1522			jsr 	ScanProc 					; scan for procedures
.1068	68		pla				pla
.1069	a8		tay				tay
.106a	60		rts				rts
.106b					AdvanceLowMemoryByte:
.106b	18		clc				clc
.106c	65 0f		adc $0f				adc 	lowMemory
.106e	85 0f		sta $0f				sta 	lowMemory
.1070	90 02		bcc $1074			bcc 	_ALMBExit
.1072	e6 10		inc $10				inc 	lowMemory+1
.1074					_ALMBExit:
.1074	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.2511					Command_FOR:
.2511	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2513	a2 0b		ldx #$0b			ldx 	#11
.2515	20 ab 20	jsr $20ab			jsr 	RSClaim
.2518	20 b1 10	jsr $10b1			jsr 	CommandLET 					; do the same as LET.
.251b	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.251d	c9 80		cmp #$80			cmp 	#$80
.251f	d0 4c		bne $256d			bne 	_CFType
.2521	a9 c9		lda #$c9			lda 	#TKW_TO 					; check TO present.
.2523	20 78 20	jsr $2078			jsr 	CheckToken
.2526	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2528	20 19 1a	jsr $1a19			jsr 	EvaluateInteger				; get terminal value in stack 1
.252b	98		tya				tya
.252c	48		pha				pha
.252d	a0 04		ldy #$04			ldy 	#4
.252f	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.2531	91 78		sta ($78),y			sta 	(rsPointer),y
.2533	c8		iny				iny
.2534	a5 50		lda $50				lda		esInt1
.2536	91 78		sta ($78),y			sta 	(rsPointer),y
.2538	c8		iny				iny
.2539	a9 01		lda #$01			lda 	#1  						; the default step in 6
.253b	91 78		sta ($78),y			sta 	(rsPointer),y
.253d	c8		iny				iny
.253e	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.2540	91 78		sta ($78),y			sta 	(rsPointer),y
.2542	c8		iny				iny
.2543	a5 51		lda $51				lda		esInt1+1
.2545	91 78		sta ($78),y			sta 	(rsPointer),y
.2547	c8		iny				iny
.2548	a5 59		lda $59				lda		esInt2+1
.254a	91 78		sta ($78),y			sta 	(rsPointer),y
.254c	c8		iny				iny
.254d	a5 61		lda $61				lda		esInt3+1
.254f	91 78		sta ($78),y			sta 	(rsPointer),y
.2551	68		pla				pla
.2552	a8		tay				tay
.2553	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.2555	c9 ca		cmp #$ca			cmp 	#TKW_STEP
.2557	d0 0e		bne $2567			bne 	_CFDone
.2559	c8		iny				iny									; skip over step.
.255a	20 19 1a	jsr $1a19			jsr 	EvaluateInteger 			; get step
.255d	98		tya				tya
.255e	48		pha				pha
.255f	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.2561	a0 06		ldy #$06			ldy 	#6
.2563	91 78		sta ($78),y			sta 	(rsPointer),y
.2565	68		pla				pla
.2566	a8		tay				tay
.2567					_CFDone:
.2567	a9 01		lda #$01			lda 	#1
.2569	20 d7 20	jsr $20d7			jsr 	RSSavePosition 				; save position.
.256c	60		rts				rts
.256d					_CFType:
.256d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.256f	20 3e 21	jsr $213e			jsr 	ErrorHandler
.2572					Command_NEXT:
.2572	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2574	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2576	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.2578	f0 05		beq $257f			beq 	_isok
.257a	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.257c	20 3e 21	jsr $213e			jsr 	ErrorHandler
.257f					_isok:
.257f	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.2581	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.2583	b0 18		bcs $259d			bcs 	_CNNoIndex
.2585	a2 00		ldx #$00			ldx 	#0 							; start on stack
.2587	20 46 1a	jsr $1a46			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.258a	98		tya				tya
.258b	48		pha				pha
.258c	a0 04		ldy #$04			ldy 	#4 							; check same variable
.258e	b1 78		lda ($78),y			lda 	(rsPointer),y
.2590	d5 48		cmp $48,x			cmp 	esInt0,x
.2592	d0 76		bne $260a			bne 	_CNBadIndex
.2594	c8		iny				iny
.2595	b1 78		lda ($78),y			lda 	(rsPointer),y
.2597	d5 50		cmp $50,x			cmp 	esInt1,x
.2599	d0 6f		bne $260a			bne 	_CNBadIndex
.259b	68		pla				pla
.259c	a8		tay				tay
.259d					_CNNoIndex:
.259d	98		tya				tya
.259e	48		pha				pha
.259f	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.25a1	b1 78		lda ($78),y			lda 	(rsPointer),y
.25a3	85 04		sta $04				sta 	temp0
.25a5	c8		iny				iny
.25a6	b1 78		lda ($78),y			lda 	(rsPointer),y
.25a8	85 05		sta $05				sta 	temp0+1
.25aa	c8		iny				iny
.25ab	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.25ad	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.25af	85 09		sta $09				sta 	temp2+1 					; save for later.
.25b1	10 01		bpl $25b4			bpl 	_CNSignX
.25b3	ca		dex				dex  								; X = $FF
.25b4					_CNSignX:
.25b4	18		clc				clc 								; add to the LSB
.25b5	a0 00		ldy #$00			ldy 	#0
.25b7	71 04		adc ($04),y			adc 	(temp0),y
.25b9	91 04		sta ($04),y			sta 	(temp0),y
.25bb					_CNPropogate:
.25bb	c8		iny				iny  								; add the sign extended in X to the rest.
.25bc	8a		txa				txa
.25bd	71 04		adc ($04),y			adc 	(temp0),y
.25bf	91 04		sta ($04),y			sta 	(temp0),y
.25c1	c8		iny				iny
.25c2	8a		txa				txa
.25c3	71 04		adc ($04),y			adc 	(temp0),y
.25c5	91 04		sta ($04),y			sta 	(temp0),y
.25c7	c8		iny				iny
.25c8	8a		txa				txa
.25c9	71 04		adc ($04),y			adc 	(temp0),y
.25cb	91 04		sta ($04),y			sta 	(temp0),y
.25cd	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.25ce	a5 78		lda $78				lda 	rsPointer
.25d0	69 07		adc #$07			adc 	#7
.25d2	85 06		sta $06				sta 	temp1
.25d4	a9 00		lda #$00			lda 	#0
.25d6	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.25d8	a8		tay				tay 								; and clear the Y register again.
.25d9	65 79		adc $79				adc 	rsPointer+1
.25db	85 07		sta $07				sta 	temp1+1
.25dd	38		sec				sec 								; calculate current - limit oring interim values.
.25de	20 16 26	jsr $2616			jsr 	_CNCompare
.25e1	20 16 26	jsr $2616			jsr 	_CNCompare
.25e4	20 16 26	jsr $2616			jsr 	_CNCompare
.25e7	20 16 26	jsr $2616			jsr 	_CNCompare
.25ea	50 02		bvc $25ee			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.25ec	49 80		eor #$80			eor 	#$80
.25ee					_CNNoOverflow:
.25ee	a4 09		ldy $09				ldy 	temp2+1						; get step back
.25f0	30 1d		bmi $260f			bmi 	_CNCheckDownto
.25f2	c9 00		cmp #$00			cmp 	#0
.25f4	30 0c		bmi $2602			bmi 	_CNLoopRound 				; loop round if < =
.25f6	a5 08		lda $08				lda 	temp2
.25f8	f0 08		beq $2602			beq 	_CNLoopRound
.25fa					_CNLoopExit:
.25fa	68		pla				pla
.25fb	a8		tay				tay
.25fc	a9 0b		lda #$0b			lda 	#11
.25fe	20 cd 20	jsr $20cd			jsr 	RSFree
.2601	60		rts				rts
.2602					_CNLoopRound:
.2602	68		pla				pla
.2603	a8		tay				tay
.2604	a9 01		lda #$01			lda 	#1
.2606	20 ea 20	jsr $20ea			jsr 	RSLoadPosition				; go back to the loop top
.2609	60		rts				rts
.260a					_CNBadIndex:
.260a	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.260c	20 3e 21	jsr $213e			jsr 	ErrorHandler
.260f					_CNCheckDownto:
.260f	c9 00		cmp #$00			cmp 	#0
.2611	10 ef		bpl $2602			bpl 	_CNLoopRound
.2613	4c fa 25	jmp $25fa			jmp 	_CNLoopExit
.2616					_CNCompare:
.2616	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2618	f1 06		sbc ($06),y			sbc 	(temp1),y
.261a	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.261c	85 08		sta $08				sta 	temp2
.261e	c8		iny				iny
.261f	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1075					CommandIf:
.1075	20 17 1a	jsr $1a17			jsr 	EvaluateRootInteger 		; if what ?
.1078	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO
.107c	f0 04		beq $1082			beq 	_IfSimple
.107e	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1080	d0 1b		bne $109d			bne 	_IfComplex
.1082					_IfSimple:
.1082	20 37 20	jsr $2037			jsr 	MInt32Zero					; check if TOS zero
.1085	f0 10		beq $1097			beq 	_IfEOL 						; go to next line.
.1087	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1089	c8		iny				iny
.108a	c9 d4		cmp #$d4			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108c	f0 0c		beq $109a			beq 	_IfGoto 					; do the Goto code
.108e	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1090	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1092	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1094	f0 04		beq $109a			beq 	_IfGoto
.1096	60		rts				rts 								; else continue on this line.
.1097					_IfEOL:
.1097	4c 96 15	jmp $1596			jmp 	AdvanceNextLine 			; go to next line
.109a					_IfGoto:
.109a	4c d5 15	jmp $15d5			jmp 	CommandGoto
.109d					_IfComplex:
.109d	20 37 20	jsr $2037			jsr 	MInt32Zero 					; is it true ?
.10a0	f0 01		beq $10a3			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a2	60		rts				rts 								; else continue.
.10a3					_IFSkip:
.10a3	a9 d1		lda #$d1			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a5	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10a7	4c 89 26	jmp $2689			jmp		ScanForward
.10aa					Command_ELSE:
.10aa	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.10ac	8a		txa				txa
.10ad	4c 89 26	jmp $2689			jmp		ScanForward
.10b0					Command_ENDIF:
.10b0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.10b1					CommandLet:
.10b1	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b3	20 46 1a	jsr $1a46			jsr 	EvaluateReference
.10b6	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b8	20 78 20	jsr $2078			jsr 	CheckToken
.10bb	e8		inx				inx 								; do RHS
.10bc	20 fa 19	jsr $19fa			jsr 	Evaluate 					; evaluate and derefernce
.10bf	ca		dex				dex
.10c0	20 c4 10	jsr $10c4			jsr 	WriteValue 					; write it out
.10c3	60		rts				rts
.10c4					WriteValue:
.10c4	98		tya				tya
.10c5	48		pha				pha
.10c6	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.10c9	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cb	55 41		eor $41,x			eor 	esType+1,x
.10cd	29 40		and #$40			and 	#$40
.10cf	d0 50		bne $1121			bne		_WVType
.10d1	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d3	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d5	29 40		and #$40			and 	#$40
.10d7	d0 1f		bne $10f8			bne 	_WVCopyString
.10d9	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10db	15 41		ora $41,x			ora 	esType+1,x
.10dd	4a		lsr a				lsr 	a
.10de	90 22		bcc $1102			bcc 	_WVCopyData4
.10e0	b5 40		lda $40,x			lda 	esType,x
.10e2	4a		lsr a				lsr 	a
.10e3	90 3c		bcc $1121			bcc 	_WVType
.10e5	e8		inx				inx 								; force the value being written to be a float.
.10e6	20 47 16	jsr $1647			jsr 	BPMakeFloat
.10e9	ca		dex				dex
.10ea	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; set Temp0 to write address
.10ed	e8		inx				inx
.10ee	8a		txa				txa
.10ef	a2 1e		ldx #$1e		ldx	#30
.10f1	20 45 21	jsr $2145		jsr	floatingpointHandler
.10f4	aa		tax				tax
.10f5	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.10f8					_WVCopyString:
.10f8	8a		txa				txa
.10f9	a2 0a		ldx #$0a		ldx	#10
.10fb	20 9c 23	jsr $239c		jsr	stringHandler
.10fe	aa		tax				tax
.10ff	4c 1e 11	jmp $111e			jmp 	_WVCopyExit
.1102					_WVCopyData4:
.1102	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1104	29 20		and #$20			and 	#$20
.1106	d0 10		bne $1118			bne 	_WVCopyData1
.1108	a0 03		ldy #$03			ldy 	#3
.110a	b5 61		lda $61,x			lda 	esInt3+1,x
.110c	91 04		sta ($04),y			sta 	(temp0),y
.110e	88		dey				dey
.110f	b5 59		lda $59,x			lda 	esInt2+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113	88		dey				dey
.1114	b5 51		lda $51,x			lda 	esInt1+1,x
.1116	91 04		sta ($04),y			sta 	(temp0),y
.1118					_WVCopyData1:
.1118	a0 00		ldy #$00			ldy 	#0
.111a	b5 49		lda $49,x			lda 	esInt0+1,x
.111c	91 04		sta ($04),y			sta 	(temp0),y
.111e					_WVCopyExit:
.111e	68		pla				pla
.111f	a8		tay				tay
.1120	60		rts				rts
.1121					_WVType:
.1121	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1123	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1126					TOSToTemp0:
.1126	b5 48		lda $48,x			lda 	esInt0,x
.1128	85 04		sta $04				sta 	temp0
.112a	b5 50		lda $50,x			lda 	esInt1,x
.112c	85 05		sta $05				sta 	temp0+1
.112e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0af0					storeSize:
>0af0							.fill 	1
.112f					LocaliseVariable:
.112f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check it's a variable.
.1131	c9 40		cmp #$40			cmp 	#$40
.1133	b0 67		bcs $119c			bcs 	_LVSyntax
.1135	8a		txa				txa 								; get the address of that variable.
.1136	a2 00		ldx #$00		ldx	#0
.1138	20 0a 25	jsr $250a		jsr	variableHandler
.113b	aa		tax				tax
.113c	8a		txa				txa
.113d	48		pha				pha
.113e	98		tya				tya
.113f	48		pha				pha
.1140	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1143	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1145	0a		asl a				asl 	a
.1146	10 16		bpl $115e			bpl 	_LVPushNumber
.1148	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.114a	b1 04		lda ($04),y			lda 	(temp0),y
.114c	c8		iny				iny
.114d	85 06		sta $06				sta 	temp1
.114f	b1 04		lda ($04),y			lda 	(temp0),y
.1151	85 07		sta $07				sta 	temp1+1
.1153	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1155	b1 06		lda ($06),y			lda 	(temp1),y
.1157	aa		tax				tax 								; into X
.1158	e8		inx				inx 								; +1 for length.
.1159	a9 24		lda #$24			lda 	#markerString
.115b	4c 73 11	jmp $1173			jmp 	_LVWriteFrame
.115e					_LVPushNumber:
.115e	a5 04		lda $04				lda 	temp0 						; storage address and data source are the same
.1160	85 06		sta $06				sta 	temp1
.1162	a5 05		lda $05				lda 	temp0+1
.1164	85 07		sta $07				sta 	temp1+1
.1166	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1168	4a		lsr a				lsr 	a
.1169	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.116b	a2 04		ldx #$04			ldx 	#VarISize
.116d	90 04		bcc $1173			bcc 	_LVIsInteger
.116f	a9 23		lda #$23			lda 	#markerFloat
.1171	a2 06		ldx #$06			ldx 	#VarFSize
.1173					_LVIsInteger:
.1173					_LVWriteFrame:
.1173	8e f0 0a	stx $0af0			stx 	storeSize 					; number of bytes to copy from (temp0)
.1176	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1177	e8		inx				inx
.1178	e8		inx				inx
.1179	20 ab 20	jsr $20ab			jsr 	RSClaim 					; create the stack frame.
.117c	a5 04		lda $04				lda 	temp0 						; copy the target address to slots 1 & 2
.117e	a0 01		ldy #$01			ldy 	#1
.1180	91 78		sta ($78),y			sta 	(rsPointer),y
.1182	c8		iny				iny
.1183	a5 05		lda $05				lda 	temp0+1
.1185	91 78		sta ($78),y			sta 	(rsPointer),y
.1187	a0 00		ldy #$00			ldy 	#0
.1189					_LVCopyData:
.1189	b1 06		lda ($06),y			lda 	(temp1),y 					; get data from source, temp1
.118b	c8		iny				iny 								; write allowing for the header bit.
.118c	c8		iny				iny
.118d	c8		iny				iny
.118e	91 78		sta ($78),y			sta 	(rsPointer),y
.1190	88		dey				dey
.1191	88		dey				dey
.1192	ce f0 0a	dec $0af0			dec 	storeSize 					; do it storesize times
.1195	d0 f2		bne $1189			bne 	_LVCopyData
.1197	68		pla				pla
.1198	a8		tay				tay
.1199	68		pla				pla
.119a	aa		tax				tax
.119b	60		rts				rts
.119c					_LVSyntax:
.119c	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.119e	20 3e 21	jsr $213e			jsr 	ErrorHandler
.11a1					RestoreLocals:
.11a1	a2 00		ldx #$00			ldx 	#0
.11a3	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.11a5	c9 40		cmp #$40			cmp	 	#64
.11a7	90 01		bcc $11aa			bcc 	_RLocal
.11a9	60		rts				rts
.11aa					_RLocal:
.11aa	8a		txa				txa
.11ab	48		pha				pha
.11ac	98		tya				tya
.11ad	48		pha				pha
.11ae	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.11b0	b1 78		lda ($78),y			lda 	(rsPointer),y
.11b2	85 04		sta $04				sta 	temp0
.11b4	c8		iny				iny
.11b5	b1 78		lda ($78),y			lda 	(rsPointer),y
.11b7	85 05		sta $05				sta 	temp0+1
.11b9	a0 00		ldy #$00			ldy 	#0 							; get type back.
.11bb	b1 78		lda ($78),y			lda 	(rsPointer),y
.11bd	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.11bf	f0 28		beq $11e9			beq 	_RString
.11c1	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.11c3	c9 25		cmp #$25			cmp 	#markerInt
.11c5	f0 02		beq $11c9			beq 	_RIsInteger
.11c7	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.11c9					_RIsInteger:
.11c9	8a		txa				txa
.11ca	48		pha				pha
.11cb	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.11cd					_RCopyBack:
.11cd	b1 78		lda ($78),y			lda 	(rsPointer),y
.11cf	88		dey				dey
.11d0	88		dey				dey
.11d1	88		dey				dey
.11d2	91 04		sta ($04),y			sta 	(temp0),y
.11d4	c8		iny				iny
.11d5	c8		iny				iny
.11d6	c8		iny				iny
.11d7	c8		iny				iny
.11d8	ca		dex				dex
.11d9	d0 f2		bne $11cd			bne 	_RCopyBack
.11db	68		pla				pla 								; get size add 3
.11dc	18		clc				clc
.11dd	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.11df					_RRestoreAAndLoop:
.11df	20 cd 20	jsr $20cd			jsr 	RSFree
.11e2	68		pla				pla
.11e3	a8		tay				tay
.11e4	68		pla				pla
.11e5	aa		tax				tax
.11e6	4c a1 11	jmp $11a1			jmp 	RestoreLocals 				; go see if there are any more locals.
.11e9					_RString:
>11e9	db						.byte 	$DB
.11ea	a0 03		ldy #$03			ldy 	#3 							; get string length
.11ec	b1 78		lda ($78),y			lda 	(rsPointer),y
.11ee	18		clc				clc
.11ef	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.11f1	4c df 11	jmp $11df			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.11f4					Command_New:
.11f4	20 d1 13	jsr $13d1			jsr 	ResetCodeAddress 			; point to first line
.11f7	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.11f9	98		tya				tya
.11fa	91 02		sta ($02),y			sta 	(codePtr),y
.11fc	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.11ff	4c 93 15	jmp $1593			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1202					Command_Poke:
.1202	a9 01		lda #$01			lda 	#1
.1204	d0 06		bne $120c			bne 	PokeGeneral
.1206					Command_Doke:
.1206	a9 02		lda #$02			lda 	#2
.1208	d0 02		bne $120c			bne 	PokeGeneral
.120a					Command_Loke:
.120a	a9 03		lda #$03			lda 	#3
.120c					PokeGeneral:
.120c	48		pha				pha 								; save size
.120d	20 17 1a	jsr $1a17			jsr 	EvaluateRootInteger 		; target address
.1210	20 90 20	jsr $2090			jsr	 	CheckComma
.1213	e8		inx				inx
.1214	20 19 1a	jsr $1a19			jsr 	EvaluateInteger 			; what value to POKE ?
.1217	ca		dex				dex
.1218	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; temp0 points to the target address
.121b	84 0c		sty $0c				sty 	tempShort 					; save Y
.121d	68		pla				pla 								; get copy type and dispatch
.121e	aa		tax				tax
.121f	ca		dex				dex
.1220	f0 14		beq $1236			beq 	_Poke1
.1222	ca		dex				dex
.1223	f0 0b		beq $1230			beq 	_Poke2
.1225	a0 03		ldy #$03			ldy 	#3
.1227	a5 61		lda $61				lda 	esInt3+1
.1229	91 04		sta ($04),y			sta 	(temp0),y
.122b	88		dey				dey
.122c	a5 59		lda $59				lda 	esInt2+1
.122e	91 04		sta ($04),y			sta 	(temp0),y
.1230					_Poke2:
.1230	a0 01		ldy #$01			ldy 	#1
.1232	a5 51		lda $51				lda 	esInt1+1
.1234	91 04		sta ($04),y			sta 	(temp0),y
.1236					_Poke1:
.1236	a0 00		ldy #$00			ldy 	#0
.1238	a5 49		lda $49				lda 	esInt0+1
.123a	91 04		sta ($04),y			sta 	(temp0),y
.123c	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.123e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0af1					lastPrintToken:
>0af1							.fill 	1
.123f					Command_Print:
.123f	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1241	8d f1 0a	sta $0af1			sta 	lastPrintToken
.1244	88		dey				dey
.1245					_PrintLoopSkip:
.1245	c8		iny				iny
.1246					_PrintLoop:
.1246	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1248	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.124a	f0 5b		beq $12a7			beq 	_PrintExit
.124c	c9 c5		cmp #$c5			cmp 	#TKW_COLON
.124e	f0 57		beq $12a7			beq 	_PrintExit
.1250	8d f1 0a	sta $0af1			sta 	lastPrintToken 				; update LPT
.1253	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1255	f0 ee		beq $1245			beq 	_PrintLoopSkip
.1257	c9 c8		cmp #$c8			cmp 	#TKW_QUOTE 					; ' is new line
.1259	f0 3c		beq $1297			beq	 	_PrintNewLine
.125b	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; , is print tab
.125d	f0 40		beq $129f			beq 	_PrintTab
.125f	20 f8 19	jsr $19f8			jsr 	EvaluateRoot 				; evaluate something at the root
.1262	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1264	85 04		sta $04				sta 	temp0
.1266	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1268	85 05		sta $05				sta 	1+(temp0)
.126a	a5 40		lda $40				lda 	esType 						; get type
.126c	f0 15		beq $1283			beq		_PrintInteger
.126e	4a		lsr a				lsr 	a 							; check for floating point
.126f	b0 08		bcs $1279			bcs 	_PrintFloat
.1271					_PrintString:
.1271	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1273	20 26 11	jsr $1126			jsr 	TOSToTemp0
.1276	4c 91 12	jmp $1291			jmp 	_PrintTemp0 				; print no leading space.
.1279					_PrintFloat:
.1279	a9 00		lda #$00			lda 	#0 							; stack level.
.127b	a2 14		ldx #$14		ldx	#20
.127d	20 45 21	jsr $2145		jsr	floatingpointHandler
.1280	4c 8a 12	jmp $128a			jmp 	_PrintSpaceTemp0
.1283					_PrintInteger:
.1283	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1285	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1287	20 66 1f	jsr $1f66			jsr 	MInt32ToString				; convert to text
.128a					_PrintSpaceTemp0:
.128a	a9 20		lda #$20			lda 	#32
.128c	a2 04		ldx #$04		ldx	#4
.128e	20 31 21	jsr $2131		jsr	deviceHandler
.1291					_PrintTemp0:
.1291	20 b8 12	jsr $12b8			jsr 	PrintString
.1294	4c 46 12	jmp $1246			jmp 	_PrintLoop
.1297					_PrintNewLine:
.1297	a2 00		ldx #$00		ldx	#0
.1299	20 31 21	jsr $2131		jsr	deviceHandler
.129c	4c 45 12	jmp $1245			jmp 	_PrintLoopSkip
.129f					_PrintTab:
.129f	a2 06		ldx #$06		ldx	#6
.12a1	20 31 21	jsr $2131		jsr	deviceHandler
.12a4	4c 45 12	jmp $1245			jmp 	_PrintLoopSkip
.12a7					_PrintExit:
.12a7	ad f1 0a	lda $0af1			lda		lastPrintToken 				; check last token
.12aa	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.12ac	f0 09		beq $12b7			beq 	_PrintExit2
.12ae	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.12b0	f0 05		beq $12b7			beq 	_PrintExit2
.12b2	a2 00		ldx #$00		ldx	#0
.12b4	20 31 21	jsr $2131		jsr	deviceHandler
.12b7					_PrintExit2:
.12b7	60		rts				rts
.12b8					PrintString:
.12b8	8a		txa				txa
.12b9	48		pha				pha
.12ba	98		tya				tya
.12bb	48		pha				pha
.12bc	a0 00		ldy #$00			ldy 	#0							; get length
.12be	b1 04		lda ($04),y			lda 	(temp0),y
.12c0	aa		tax				tax 								; into X
.12c1	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.12c3	f0 10		beq $12d5			beq 	_PSExit
.12c5	ca		dex				dex
.12c6	8a		txa				txa
.12c7	48		pha				pha
.12c8	c8		iny				iny
.12c9	b1 04		lda ($04),y			lda 	(temp0),y
.12cb	a2 04		ldx #$04		ldx	#4
.12cd	20 31 21	jsr $2131		jsr	deviceHandler
.12d0	68		pla				pla
.12d1	aa		tax				tax
.12d2	4c c1 12	jmp $12c1			jmp 	_PSLoop
.12d5					_PSExit:
.12d5	68		pla				pla
.12d6	a8		tay				tay
.12d7	68		pla				pla
.12d8	aa		tax				tax
.12d9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0af2					paramCount:
>0af2							.fill 	1
.12da					CallProc:
.12da	20 b6 14	jsr $14b6			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.12dd	48		pha				pha 								; save length on stack
.12de	85 0c		sta $0c				sta 	tempShort 					; save length in tempshort
.12e0	a5 05		lda $05				lda 	temp0+1 					; save procedure target on stack.
.12e2	48		pha				pha
.12e3	a5 04		lda $04				lda 	temp0
.12e5	48		pha				pha
.12e6	98		tya				tya 								; calculate Y + length
.12e7	18		clc				clc
.12e8	65 0c		adc $0c				adc 	tempShort
.12ea	a8		tay				tay
.12eb	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.12ed					_CallProcEvalParams:
.12ed	e8		inx				inx
.12ee	b1 02		lda ($02),y			lda 	(codePtr),y 				; do we have ) ?
.12f0	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.12f2	f0 0b		beq $12ff			beq 	_CPDoneParams
.12f4	20 fa 19	jsr $19fa			jsr 	Evaluate 					; evaluate a parameter
.12f7	b1 02		lda ($02),y			lda 	(codePtr),Y 				; get what's next, preconsume
.12f9	c8		iny				iny
.12fa	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.12fc	f0 ef		beq $12ed			beq 	_CallProcEvalParams
.12fe	88		dey				dey 								; undo consumption.
.12ff					_CPDoneParams:
.12ff	20 83 20	jsr $2083			jsr 	CheckRightParen 			; check closing parenthesis.
.1302	8e f2 0a	stx $0af2			stx 	paramCount 					; store parameter count+1
.1305	a2 04		ldx #$04			ldx 	#4							; make space on stack
.1307	a9 50		lda #$50			lda 	#markerPROC
.1309	20 ab 20	jsr $20ab			jsr 	RSClaim
.130c	a9 01		lda #$01			lda 	#1 							; store return address.
.130e	20 d7 20	jsr $20d7			jsr 	RSSavePosition
.1311	68		pla				pla 								; get the new code Ptr
.1312	85 02		sta $02				sta 	codePtr
.1314	68		pla				pla
.1315	85 03		sta $03				sta 	codePtr+1
.1317	68		pla				pla 								; length of name + 4 is the param start.
.1318	18		clc				clc
.1319	69 04		adc #$04			adc 	#4
.131b	a8		tay				tay
.131c	a2 ff		ldx #$ff			ldx 	#$FF
.131e					_CPLoadParameters:
.131e	e8		inx				inx 								; point to where the address should be loaded.
.131f	ec f2 0a	cpx $0af2			cpx 	paramCount 					; too many parameters in definition ?
.1322	f0 1e		beq $1342			beq 	_CPParamError
.1324	b1 02		lda ($02),y			lda 	(codePtr),y					; what follows
.1326	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; is it the right bracket
.1328	f0 0e		beq $1338			beq 	_CPParamComplete 			; done all the parameters
.132a	20 2f 11	jsr $112f			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.132d	20 c4 10	jsr $10c4			jsr 	WriteValue 					; copy the evaluated parameter into there.
.1330	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by a comma ?
.1332	c8		iny				iny
.1333	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.1335	f0 e7		beq $131e			beq 	_CPLoadParameters
.1337	88		dey				dey 								; no, unconsume and check for )
.1338					_CPParamComplete:
.1338	20 83 20	jsr $2083			jsr 	CheckRightParen 			; check )
.133b	e8		inx				inx 								; check right number of parameters
.133c	ec f2 0a	cpx $0af2			cpx 	paramCount
.133f	d0 01		bne $1342			bne 	_CPParamError
.1341	60		rts				rts
.1342					_CPParamError:
.1342	a2 18		ldx #$18			ldx 	#ErrorID_Params
.1344	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1347					ReturnProc:
.1347	20 a1 11	jsr $11a1			jsr 	RestoreLocals 				; get the locals back.
.134a	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.134c	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.134e	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.1350	f0 05		beq $1357			beq 	_isok
.1352	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.1354	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1357					_isok:
.1357	a9 01		lda #$01			lda 	#1
.1359	20 ea 20	jsr $20ea			jsr 	RSLoadPosition 				; reload the position from offset 1.
.135c	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.135e	20 cd 20	jsr $20cd			jsr 	RSFree
.1361	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.1362					Command_Rem:
.1362					Command_Rem2:
.1362	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1364	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1366	d0 06		bne $136e			bne 	_CRNotString
.1368	c8		iny				iny
.1369	98		tya				tya
.136a	38		sec				sec
.136b	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.136d	a8		tay				tay
.136e					_CRNotString:
.136e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2620					Command_Repeat:
.2620	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2622	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2624	20 ab 20	jsr $20ab			jsr 	RSClaim
.2627	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2629	20 d7 20	jsr $20d7			jsr 	RSSavePosition
.262c	60		rts				rts
.262d					Command_Until:
.262d	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.262f	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2631	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2633	f0 05		beq $263a			beq 	_isok
.2635	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2637	20 3e 21	jsr $213e			jsr 	ErrorHandler
.263a					_isok:
.263a	20 17 1a	jsr $1a17			jsr 	EvaluateRootInteger 		; at the bottom.
.263d	20 37 20	jsr $2037			jsr 	MInt32Zero					; check if TOS zero
.2640	d0 06		bne $2648			bne 	_CUExit
.2642	a9 01		lda #$01			lda 	#1
.2644	20 ea 20	jsr $20ea			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2647	60		rts				rts
.2648					_CUExit:
.2648	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.264a	20 cd 20	jsr $20cd			jsr 	RSFree
.264d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.136f					Command_Run:
.136f	a2 ff		ldx #$ff			ldx 	#$FF
.1371	9a		txs				txs
.1372	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1375	20 d1 13	jsr $13d1			jsr 	ResetCodeAddress 			; back to the start.
.1378	a0 03		ldy #$03			ldy 	#3
.137a					CRNextInstruction:
.137a	64 7b		stz $7b				stz 	softMemAlloc+1
.137c	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.137e	10 1c		bpl $139c			bpl 	_CRNotToken
.1380	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1382	b0 0c		bcs $1390			bcs 	_CRExecute
.1384	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.1386	b0 56		bcs $13de			bcs 	Unimplemented
.1388	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.138a	b0 04		bcs $1390			bcs 	_CRExecute
.138c	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.138e	b0 16		bcs $13a6			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1390					_CRExecute:
.1390	c8		iny				iny 								; consume it.
.1391	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1392	aa		tax				tax
.1393	20 99 13	jsr $1399			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1396	4c 7a 13	jmp $137a			jmp 	CRNextInstruction
.1399					_CRRunRoutine:
.1399	7c e8 13	jmp ($13e8,x)			jmp 	(Group0Vectors,x)
.139c					_CRNotToken:
.139c	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.139e	b0 3e		bcs $13de			bcs 	Unimplemented
.13a0					_CRDefaultLet:
.13a0	20 b1 10	jsr $10b1			jsr 	CommandLet 					; do the default, LET
.13a3	4c 7a 13	jmp $137a			jmp 	CRNextInstruction
.13a6					_CRCheckIndirect:
.13a6	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.13a8	f0 f6		beq $13a0			beq 	_CRDefaultLet
.13aa	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.13ac	f0 f2		beq $13a0			beq 	_CRDefaultLet
.13ae	d0 2e		bne $13de			bne 	Unimplemented
.13b0					CommandShift1:
.13b0	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.13b2	10 2a		bpl $13de			bpl 	Unimplemented 				; we have an error as this should not happen.
.13b4	0a		asl a				asl 	a 							; double into X
.13b5	aa		tax				tax
.13b6	c8		iny				iny 								; advance over it.
.13b7	20 bd 13	jsr $13bd			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.13ba	4c 7a 13	jmp $137a			jmp 	CRNextInstruction
.13bd					_RunIt:
.13bd	7c 94 14	jmp ($1494,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.13c0					CommandShift2:
.13c0	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.13c2	10 1a		bpl $13de			bpl 	Unimplemented 				; we have an error as this should not happen.
.13c4	0a		asl a				asl 	a 							; double into X
.13c5	aa		tax				tax
.13c6	c8		iny				iny 								; advance over it.
.13c7	20 cd 13	jsr $13cd			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.13ca	4c 7a 13	jmp $137a			jmp 	CRNextInstruction
.13cd					_RunIt:
.13cd	7c a8 14	jmp ($14a8,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.13d0					CommandColon:
.13d0	60		rts				rts
.13d1					ResetCodeAddress:
.13d1	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.13d4	85 02		sta $02				sta 	codePtr
.13d6	ad c9 0a	lda $0ac9			lda 	basePage+1
.13d9	85 03		sta $03				sta 	codePtr+1
.13db	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.13dd	60		rts				rts
.13de					Unimplemented:
.13de	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.13e0	20 3e 21	jsr $213e			jsr 	ErrorHandler
.13e3					TKErr01:
.13e3					TKErr02:
.13e3					TKErr03:
.13e3					TKErr04:
.13e3					TKErr05:
.13e3					TKErr06:
.13e3					TKErr07:
.13e3					TKErr08:
.13e3	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.13e5	20 3e 21	jsr $213e			jsr 	ErrorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.13e8					Group0Vectors:
>13e8	96 15					.word	AdvanceNextLine          ; $80 [[eol]]
>13ea	b0 13					.word	CommandShift1            ; $81 [[sh1]]
>13ec	c0 13					.word	CommandShift2            ; $82 [[sh2]]
>13ee	de 13					.word	Unimplemented            ; $83 [[sh3]]
>13f0	de 13					.word	Unimplemented            ; $84 [[fpc]]
>13f2	e3 13					.word	TKErr08                  ; $85 [[str]]
>13f4	e9 16					.word	AndHandler               ; $86 and
>13f6	d6 16					.word	OrHandler                ; $87 or
>13f8	c3 16					.word	XorHandler               ; $88 xor
>13fa	0b 18					.word	CompareGreaterEq         ; $89 >=
>13fc	15 18					.word	CompareLessEq            ; $8a <=
>13fe	f7 17					.word	CompareGreater           ; $8b >
>1400	ed 17					.word	CompareLess              ; $8c <
>1402	e3 17					.word	CompareEquals            ; $8d =
>1404	01 18					.word	CompareNotEquals         ; $8e <>
>1406	54 16					.word	AddHandler               ; $8f +
>1408	77 16					.word	SubHandler               ; $90 -
>140a	0f 17					.word	ShrHandler               ; $91 >>
>140c	fc 16					.word	ShlHandler               ; $92 <<
>140e	8a 16					.word	MulHandler               ; $93 *
>1410	9d 16					.word	DivHandler               ; $94 /
>1412	b0 16					.word	ModHandler               ; $95 mod
>1414	48 17					.word	PowerHandler             ; $96 ^
>1416	22 17					.word	WordRefHandler           ; $97 !
>1418	35 17					.word	ByteRefHandler           ; $98 ?
>141a	20 26					.word	Command_Repeat           ; $99 repeat
>141c	4e 26					.word	Command_While            ; $9a while
>141e	11 25					.word	Command_FOR              ; $9b for
>1420	75 10					.word	CommandIf                ; $9c if
>1422	e3 13					.word	TKErr04                  ; $9d defproc
>1424	2d 26					.word	Command_Until            ; $9e until
>1426	71 26					.word	Command_Wend             ; $9f wend
>1428	72 25					.word	Command_NEXT             ; $a0 next
>142a	e3 13					.word	TKErr06                  ; $a1 then
>142c	b0 10					.word	Command_ENDIF            ; $a2 endif
>142e	47 13					.word	ReturnProc               ; $a3 endproc
>1430	d0 19					.word	UnaryParenthesis         ; $a4 (
>1432	22 1b					.word	UnaryLen                 ; $a5 len(
>1434	66 1b					.word	UnarySgn                 ; $a6 sgn(
>1436	4f 1b					.word	UnaryAbs                 ; $a7 abs(
>1438	bf 1b					.word	Unary_Random             ; $a8 random(
>143a	09 1c					.word	Unary_Page               ; $a9 page
>143c	0c 20					.word	MInt32True               ; $aa true
>143e	10 20					.word	MInt32False              ; $ab false
>1440	d4 1b					.word	Unary_Min                ; $ac min(
>1442	d8 1b					.word	Unary_Max                ; $ad max(
>1444	bf 1c					.word	UnarySys                 ; $ae sys(
>1446	82 1c					.word	UnaryTimer               ; $af timer(
>1448	a5 1a					.word	EventFunction            ; $b0 event(
>144a	ab 1c					.word	UnaryGet                 ; $b1 get(
>144c	9b 1c					.word	UnaryInkey               ; $b2 inkey(
>144e	56 1c					.word	UnaryAlloc               ; $b3 alloc(
>1450	e7 1c					.word	ExecChr                  ; $b4 chr$(
>1452	fb 1c					.word	ExecLeft                 ; $b5 left$(
>1454	18 1d					.word	ExecMid                  ; $b6 mid$(
>1456	40 1d					.word	ExecRight                ; $b7 right$(
>1458	25 18					.word	Event_Str                ; $b8 str$(
>145a	54 18					.word	UnaryVal                 ; $b9 val(
>145c	7d 1b					.word	UnaryPeek                ; $ba peek(
>145e	83 1b					.word	UnaryDeek                ; $bb deek(
>1460	89 1b					.word	UnaryLeek                ; $bc leek(
>1462	40 1b					.word	UnaryAsc                 ; $bd asc(
>1464	34 1c					.word	UnaryIntToFloat          ; $be int(
>1466	47 1c					.word	UnaryFloatToInt          ; $bf float(
>1468	57 18					.word	UnaryIsVal               ; $c0 isval(
>146a	17 1c					.word	UnaryReference           ; $c1 @
>146c	2d 1c					.word	UnaryComplement          ; $c2 ~
>146e	2a 1c					.word	UnaryHexMarker           ; $c3 &
>1470	e3 13					.word	TKErr01                  ; $c4 )
>1472	d0 13					.word	CommandColon             ; $c5 :
>1474	e3 13					.word	TKErr02                  ; $c6 ,
>1476	e3 13					.word	TKErr03                  ; $c7 ;
>1478	62 13					.word	Command_Rem2             ; $c8 '
>147a	e3 13					.word	TKErr07                  ; $c9 to
>147c	e3 13					.word	TKErr05                  ; $ca step
>147e	da 12					.word	CallProc                 ; $cb proc
>1480	de 13					.word	Unimplemented            ; $cc local
>1482	de 13					.word	Unimplemented            ; $cd dim
>1484	62 13					.word	Command_Rem              ; $ce rem
>1486	b1 10					.word	CommandLet               ; $cf let
>1488	de 13					.word	Unimplemented            ; $d0 input
>148a	aa 10					.word	Command_ELSE             ; $d1 else
>148c	07 16					.word	Command_VDU              ; $d2 vdu
>148e	3f 12					.word	Command_Print            ; $d3 print
>1490	d5 15					.word	CommandGOTO              ; $d4 goto
>1492	aa 15					.word	CommandGOSUB             ; $d5 gosub
>1494	bd 15					.word	CommandRETURN            ; $d6 return
>1496	de 13					.word	Unimplemented            ; $d7 data
>1498	1a 10					.word	Command_Assert           ; $d8 assert
>149a	02 12					.word	Command_Poke             ; $d9 poke
>149c	06 12					.word	Command_Doke             ; $da doke
>149e	0a 12					.word	Command_Loke             ; $db loke

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.14a0					Group1Vectors:
>14a0	28 10					.word	CommandClear             ; $86 clear
>14a2	de 13					.word	Unimplemented            ; $87 load
>14a4	de 13					.word	Unimplemented            ; $88 save
>14a6	de 13					.word	Unimplemented            ; $89 list
>14a8	f4 11					.word	Command_New              ; $8a new
>14aa	6f 13					.word	Command_Run              ; $8b run
>14ac	de 13					.word	Unimplemented            ; $8c read
>14ae	de 13					.word	Unimplemented            ; $8d restore
>14b0	93 15					.word	CommandEnd               ; $8e end
>14b2	8e 15					.word	CommandStop              ; $8f stop

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors2.inc

.14b4					Group2Vectors:
>14b4	de 13					.word	Unimplemented            ; $86 vpoke

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0af3					procList:
>0af3							.fill 	2		 					; terminated by name high.
.0af5					yInLine:
>0af5							.fill 	1
.14b6					FindProcedure:
.14b6	8c f5 0a	sty $0af5			sty 	yInLine
.14b9	20 74 15	jsr $1574			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.14bc	85 06		sta $06				sta 	temp1
.14be	ad f3 0a	lda $0af3			lda		procList 					; put procList address in temp2
.14c1	85 08		sta $08				sta 	temp2
.14c3	ad f4 0a	lda $0af4			lda 	procList+1
.14c6	85 09		sta $09				sta 	temp2+1
.14c8	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.14ca					_FPLoop:
.14ca	b1 08		lda ($08),y			lda 	(temp2),y
.14cc	f0 4f		beq $151d			beq 	_FPError 					; if so, we don't know this procedure.
.14ce	85 05		sta $05				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.14d0	c8		iny				iny
.14d1	b1 08		lda ($08),y			lda 	(temp2),y
.14d3	85 04		sta $04				sta 	temp0
.14d5	c8		iny				iny
.14d6	b1 08		lda ($08),y			lda 	(temp2),y					; check the procedure hash.
.14d8	c5 06		cmp $06				cmp 	temp1
.14da	d0 2b		bne $1507			bne 	_FPNext 					; hash is different, go to next.
.14dc	38		sec				sec
.14dd	ad f5 0a	lda $0af5			lda 	yInLine 					; position in line must be at least 4
.14e0	e9 04		sbc #$04			sbc 	#4
.14e2	18		clc				clc
.14e3	65 02		adc $02				adc 	codePtr
.14e5	85 0a		sta $0a				sta 	temp3
.14e7	a5 03		lda $03				lda 	codePtr+1
.14e9	69 00		adc #$00			adc 	#0
.14eb	85 0b		sta $0b				sta 	temp3+1
.14ed	98		tya				tya
.14ee	48		pha				pha
.14ef	a0 04		ldy #$04			ldy 	#4
.14f1					_FPCName:
.14f1	b1 0a		lda ($0a),y			lda 	(temp3),y 					; check the same
.14f3	d1 04		cmp ($04),y			cmp 	(temp0),y
.14f5	d0 0e		bne $1505			bne 	_FPPulYNext 				; if different go to next one.
.14f7	c8		iny				iny
.14f8	c9 3a		cmp #$3a			cmp 	#$3A
.14fa	90 f5		bcc $14f1			bcc 	_FPCName 					; compare the whole lot....
.14fc	68		pla				pla 								; throw away the saved Y
.14fd	98		tya				tya 								; length of name is Y-4
.14fe	38		sec				sec
.14ff	e9 04		sbc #$04			sbc 	#4
.1501	ac f5 0a	ldy $0af5			ldy 	yInLine  					; get the original Y back
.1504	60		rts				rts
.1505					_FPPulYNext:
.1505	68		pla				pla
.1506	a8		tay				tay
.1507					_FPNext:
.1507	c8		iny				iny 								; next procedure record.
.1508	10 c0		bpl $14ca			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.150a	98		tya				tya 								; subtract 128 from Y
.150b	38		sec				sec
.150c	e9 80		sbc #$80			sbc 	#128
.150e	a8		tay				tay
.150f	18		clc				clc 								; add 128 to temp2, so we can have more than
.1510	a5 08		lda $08				lda 	temp2 						; 255/3 = 85 procedures
.1512	69 80		adc #$80			adc 	#128
.1514	85 08		sta $08				sta 	temp2
.1516	90 b2		bcc $14ca			bcc 	_FPLoop
.1518	e6 09		inc $09				inc 	temp2+1
.151a	4c ca 14	jmp $14ca			jmp 	_FPLoop
.151d					_FPError:
.151d	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.151f	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1522					ScanProc:
.1522	98		tya				tya
.1523	48		pha				pha
.1524	a5 0f		lda $0f				lda 	lowMemory 					; copy the start of the procList, at low memory
.1526	8d f3 0a	sta $0af3			sta 	procList
.1529	a5 10		lda $10				lda 	lowMemory+1
.152b	8d f4 0a	sta $0af4			sta 	procList+1
.152e	20 d1 13	jsr $13d1			jsr 	ResetCodeAddress 			; back to the start.
.1531					_ScanLoop:
.1531	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.1533	b1 02		lda ($02),y			lda 	(codePtr),y
.1535	f0 2a		beq $1561			beq 	_ScanExit
.1537	a0 03		ldy #$03			ldy 	#3							; get first token
.1539	b1 02		lda ($02),y			lda 	(codePtr),y
.153b	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip next if not DEFPROC
.153d	d0 12		bne $1551			bne 	_ScanNext
.153f	a5 03		lda $03				lda 	codePtr+1 					; write high and low
.1541	20 69 15	jsr $1569			jsr 	_ScanWrite
.1544	a5 02		lda $02				lda 	codePtr
.1546	20 69 15	jsr $1569			jsr 	_ScanWrite
.1549	a0 04		ldy #$04			ldy 	#4 							; start of name part
.154b	20 74 15	jsr $1574			jsr 	CalculateProcedureHash 		; calculate procedure hash
.154e	20 69 15	jsr $1569			jsr 	_ScanWrite
.1551					_ScanNext:
.1551	18		clc				clc
.1552	a0 00		ldy #$00			ldy 	#0
.1554	b1 02		lda ($02),y			lda 	(codePtr),y
.1556	65 02		adc $02				adc 	codePtr
.1558	85 02		sta $02				sta 	codePtr
.155a	90 d5		bcc $1531			bcc 	_ScanLoop
.155c	e6 03		inc $03				inc 	codePtr+1
.155e	4c 31 15	jmp $1531			jmp 	_ScanLoop
.1561					_ScanExit:
.1561	a9 00		lda #$00			lda 	#0 							; write ending zero.
.1563	20 69 15	jsr $1569			jsr 	_ScanWrite
.1566	68		pla				pla
.1567	a8		tay				tay
.1568	60		rts				rts
.1569					_ScanWrite:
.1569	a0 00		ldy #$00			ldy 	#0
.156b	91 0f		sta ($0f),y			sta 	(lowMemory),y
.156d	e6 0f		inc $0f				inc 	lowMemory
.156f	d0 02		bne $1573			bne 	_SWNoCarry
.1571	e6 10		inc $10				inc 	lowMemory+1
.1573					_SWNoCarry:
.1573	60		rts				rts
.1574					CalculateProcedureHash:
.1574	a9 00		lda #$00			lda 	#0 							; clear hash.
.1576	85 04		sta $04				sta 	temp0
.1578					_CPHLoop:
.1578	18		clc				clc 								; add character and rotate and add carry back in
.1579	b1 02		lda ($02),y			lda 	(codePtr),y
.157b	65 04		adc $04				adc 	temp0
.157d	6a		ror a				ror 	a
.157e	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.1580	85 04		sta $04				sta 	temp0 						; (down with this sort of thing)
.1582	b1 02		lda ($02),y			lda 	(codePtr),y
.1584	c8		iny				iny 								; advance incase we go round again.
.1585	c9 3a		cmp #$3a			cmp 	#$3A
.1587	90 ef		bcc $1578			bcc 	_CPHLoop
.1589	a5 04		lda $04				lda 	temp0
.158b	a9 aa		lda #$aa			lda 	#$AA
.158d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.158e					CommandStop:
.158e	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.1590	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1593					CommandEnd:
.1593	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1596					AdvanceNextLine:
.1596	a0 00		ldy #$00			ldy 	#0 							; get offset
.1598	b1 02		lda ($02),y			lda 	(codePtr),y
.159a	18		clc				clc 								; add to codePtr
.159b	65 02		adc $02				adc 	codePtr
.159d	85 02		sta $02				sta 	codePtr
.159f	90 02		bcc $15a3			bcc 	_ANLNoCarry
.15a1	e6 03		inc $03				inc 	codePtr+1
.15a3					_ANLNoCarry:
.15a3	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.15a5	f0 ec		beq $1593			beq 	CommandEnd 					; execute END
.15a7	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.15a9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.15aa					CommandGOSUB:
.15aa	20 17 1a	jsr $1a17			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.15ad	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.15af	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.15b1	20 ab 20	jsr $20ab			jsr 	RSClaim
.15b4	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.15b6	20 d7 20	jsr $20d7			jsr 	RSSavePosition
.15b9	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.15bb	f0 1b		beq $15d8			beq 	GotoTOS 					; and do a GOTO there.
.15bd					CommandRETURN:
.15bd	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.15bf	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.15c1	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.15c3	f0 05		beq $15ca			beq 	_isok
.15c5	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.15c7	20 3e 21	jsr $213e			jsr 	ErrorHandler
.15ca					_isok:
.15ca	a9 01		lda #$01			lda 	#1
.15cc	20 ea 20	jsr $20ea			jsr 	RSLoadPosition 				; reload the position from offset 1.
.15cf	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.15d1	20 cd 20	jsr $20cd			jsr 	RSFree
.15d4	60		rts				rts
.15d5					CommandGOTO:
.15d5	20 17 1a	jsr $1a17			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.15d8					GotoTOS:
.15d8	20 d1 13	jsr $13d1			jsr 	ResetCodeAddress 			; simple search.
.15db					_GotoSearch:
.15db	a0 00		ldy #$00			ldy 	#0 							; get offset
.15dd	b1 02		lda ($02),y			lda 	(codePtr),y
.15df	f0 21		beq $1602			beq 	_GotoError 					; not found.
.15e1	c8		iny				iny									; check LSB match
.15e2	b1 02		lda ($02),y			lda 	(codePtr),y
.15e4	d5 48		cmp $48,x			cmp 	esInt0,x
.15e6	d0 07		bne $15ef			bne 	_GotoNext
.15e8	c8		iny				iny
.15e9	b1 02		lda ($02),y			lda 	(codePtr),y
.15eb	d5 50		cmp $50,x			cmp 	esInt1,x
.15ed	f0 10		beq $15ff			beq 	_GotoFound
.15ef					_GotoNext:
.15ef	a0 00		ldy #$00			ldy 	#0 							; go next line
.15f1	b1 02		lda ($02),y			lda 	(codePtr),y
.15f3	18		clc				clc
.15f4	65 02		adc $02				adc 	codePtr
.15f6	85 02		sta $02				sta 	codePtr
.15f8	90 e1		bcc $15db			bcc 	_GotoSearch
.15fa	e6 03		inc $03				inc 	codePtr+1
.15fc	4c db 15	jmp $15db			jmp 	_GotoSearch
.15ff					_GotoFound:
.15ff	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1601	60		rts				rts
.1602					_GotoError:
.1602	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.1604	20 3e 21	jsr $213e			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.1607					Command_VDU:
.1607	20 17 1a	jsr $1a17			jsr 	EvaluateRootInteger 			; get integer at root.
.160a	a5 48		lda $48				lda 	esInt0
.160c	a2 04		ldx #$04		ldx	#4
.160e	20 31 21	jsr $2131		jsr	deviceHandler
.1611					_CVNext:
.1611	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.1613	c8		iny				iny
.1614	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 						; comma, do again
.1616	f0 ef		beq $1607			beq 	Command_VDU
.1618	c9 c7		cmp #$c7			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.161a	d0 0a		bne $1626			bne 	_CVExit
.161c	a5 50		lda $50				lda 	esInt1
.161e	a2 04		ldx #$04		ldx	#4
.1620	20 31 21	jsr $2131		jsr	deviceHandler
.1623	4c 11 16	jmp $1611			jmp 	_CVNext
.1626	88		dey		_CVExit:dey
.1627	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.264e					Command_While:
.264e	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2650	a2 04		ldx #$04			ldx 	#4
.2652	20 ab 20	jsr $20ab			jsr 	RSClaim 					; create on stack.
.2655	88		dey				dey
.2656	a9 01		lda #$01			lda 	#1
.2658	20 d7 20	jsr $20d7			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.265b	c8		iny				iny
.265c	20 19 1a	jsr $1a19			jsr 	EvaluateInteger				; get the conditional
.265f	20 37 20	jsr $2037			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2662	f0 01		beq $2665			beq 	_CWFail
.2664	60		rts				rts
.2665					_CWFail:
.2665	a9 04		lda #$04			lda 	#4
.2667	20 cd 20	jsr $20cd			jsr 	RSFree 						; close the just opened position.
.266a	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.266c	aa		tax				tax
.266d	20 89 26	jsr $2689			jsr 	ScanForward
.2670	60		rts				rts
.2671					Command_Wend:
.2671	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2673	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2675	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.2677	f0 05		beq $267e			beq 	_isok
.2679	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.267b	20 3e 21	jsr $213e			jsr 	ErrorHandler
.267e					_isok:
.267e	a9 01		lda #$01			lda 	#1
.2680	20 ea 20	jsr $20ea			jsr 	RSLoadPosition				; go back until true
.2683	a9 04		lda #$04			lda 	#4
.2685	20 cd 20	jsr $20cd			jsr 	RSFree 						; close the loop
.2688	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.1628					BinaryProcess:
.1628	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.162a	15 41		ora $41,x			ora 	esType+1,x
.162c	0a		asl a				asl 	a
.162d	30 0e		bmi $163d			bmi 	_BPStringType 				; if one is set, then string type.
.162f	18		clc				clc 								; return CC for integer
.1630	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1632	f0 08		beq $163c			beq 	_BPExit 					; if both integer then return with CC.
.1634	20 42 16	jsr $1642			jsr 	BPMakeBothFloat 			; make both float
.1637	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1639	95 40		sta $40,x			sta 	esType,x
.163b	38		sec				sec 								; and return with carry set.
.163c					_BPExit:
.163c	60		rts				rts
.163d					_BPStringType:
.163d	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.163f	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1642					BPMakeBothFloat:
.1642	e8		inx				inx
.1643	20 47 16	jsr $1647			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1646	ca		dex				dex
.1647					BPMakeFloat:
.1647	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1649	4a		lsr a				lsr 	a
.164a	b0 07		bcs $1653			bcs 	_BPIsFloat
.164c	8a		txa				txa
.164d	a2 1a		ldx #$1a		ldx	#26
.164f	20 45 21	jsr $2145		jsr	floatingpointHandler
.1652	aa		tax				tax
.1653					_BPIsFloat:
.1653	60		rts				rts
.1654					AddHandler:
.1654	20 a3 18	jsr $18a3			jsr 	DereferenceTwo 				; dereference top two on stack.
.1657	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1659	35 41		and $41,x			and 	esType+1,x
.165b	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.165d	d0 10		bne $166f			bne 	_AHStringConcat				; concatenate strings.
.165f	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.1662	b0 03		bcs $1667			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1664	4c fb 1e	jmp $1efb			jmp 	MInt32Add 							; else do it as integer.
.1667					_IsFPOperation:
.1667	8a		txa				txa 								; call the relevant fp routine
.1668	a2 02		ldx #$02		ldx	#2
.166a	20 45 21	jsr $2145		jsr	floatingpointHandler
.166d	aa		tax				tax
.166e	60		rts				rts
.166f					_AHStringConcat:
.166f	8a		txa				txa
.1670	a2 04		ldx #$04		ldx	#4
.1672	20 9c 23	jsr $239c		jsr	stringHandler
.1675	aa		tax				tax
.1676	60		rts				rts
.1677					SubHandler:
.1677	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.167a	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.167d	b0 03		bcs $1682			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.167f	4c 15 1f	jmp $1f15			jmp 	MInt32Sub 							; else do it as integer.
.1682					_IsFPOperation:
.1682	8a		txa				txa 								; call the relevant fp routine
.1683	a2 10		ldx #$10		ldx	#16
.1685	20 45 21	jsr $2145		jsr	floatingpointHandler
.1688	aa		tax				tax
.1689	60		rts				rts
.168a					MulHandler:
.168a	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.168d	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.1690	b0 03		bcs $1695			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1692	4c 2f 1f	jmp $1f2f			jmp 	MInt32Multiply 							; else do it as integer.
.1695					_IsFPOperation:
.1695	8a		txa				txa 								; call the relevant fp routine
.1696	a2 0a		ldx #$0a		ldx	#10
.1698	20 45 21	jsr $2145		jsr	floatingpointHandler
.169b	aa		tax				tax
.169c	60		rts				rts
.169d					DivHandler:
.169d	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.16a0	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.16a3	b0 03		bcs $16a8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16a5	4c f3 1d	jmp $1df3			jmp 	MInt32SDivide 							; else do it as integer.
.16a8					_IsFPOperation:
.16a8	8a		txa				txa 								; call the relevant fp routine
.16a9	a2 06		ldx #$06		ldx	#6
.16ab	20 45 21	jsr $2145		jsr	floatingpointHandler
.16ae	aa		tax				tax
.16af	60		rts				rts
.16b0					ModHandler:
.16b0	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.16b3	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.16b6	b0 03		bcs $16bb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16b8	4c 71 1e	jmp $1e71			jmp 	MInt32Modulus 							; else do it as integer.
.16bb					_IsFPOperation:
.16bb	8a		txa				txa 								; call the relevant fp routine
.16bc	a2 08		ldx #$08		ldx	#8
.16be	20 45 21	jsr $2145		jsr	floatingpointHandler
.16c1	aa		tax				tax
.16c2	60		rts				rts
.16c3					XorHandler:
.16c3	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.16c6	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.16c9	b0 03		bcs $16ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16cb	4c a5 1d	jmp $1da5			jmp 	MInt32Xor 							; else do it as integer.
.16ce					_IsFPOperation:
.16ce	8a		txa				txa 								; call the relevant fp routine
.16cf	a2 08		ldx #$08		ldx	#8
.16d1	20 45 21	jsr $2145		jsr	floatingpointHandler
.16d4	aa		tax				tax
.16d5	60		rts				rts
.16d6					OrHandler:
.16d6	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.16d9	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.16dc	b0 03		bcs $16e1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16de	4c 8c 1d	jmp $1d8c			jmp 	MInt32Or 							; else do it as integer.
.16e1					_IsFPOperation:
.16e1	8a		txa				txa 								; call the relevant fp routine
.16e2	a2 08		ldx #$08		ldx	#8
.16e4	20 45 21	jsr $2145		jsr	floatingpointHandler
.16e7	aa		tax				tax
.16e8	60		rts				rts
.16e9					AndHandler:
.16e9	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.16ec	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.16ef	b0 03		bcs $16f4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.16f1	4c 73 1d	jmp $1d73			jmp 	MInt32And 							; else do it as integer.
.16f4					_IsFPOperation:
.16f4	8a		txa				txa 								; call the relevant fp routine
.16f5	a2 08		ldx #$08		ldx	#8
.16f7	20 45 21	jsr $2145		jsr	floatingpointHandler
.16fa	aa		tax				tax
.16fb	60		rts				rts
.16fc					ShlHandler:
.16fc	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.16ff	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.1702	b0 03		bcs $1707			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1704	4c 7d 17	jmp $177d			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.1707					_IsFPOperation:
.1707	8a		txa				txa 								; call the relevant fp routine
.1708	a2 08		ldx #$08		ldx	#8
.170a	20 45 21	jsr $2145		jsr	floatingpointHandler
.170d	aa		tax				tax
.170e	60		rts				rts
.170f					ShrHandler:
.170f	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.1712	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.1715	b0 03		bcs $171a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1717	4c 80 17	jmp $1780			jmp 	MInt32ShiftRightX 							; else do it as integer.
.171a					_IsFPOperation:
.171a	8a		txa				txa 								; call the relevant fp routine
.171b	a2 08		ldx #$08		ldx	#8
.171d	20 45 21	jsr $2145		jsr	floatingpointHandler
.1720	aa		tax				tax
.1721	60		rts				rts
.1722					WordRefHandler:
.1722	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.1725	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.1728	b0 03		bcs $172d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.172a	4c 6f 17	jmp $176f			jmp 	MInt32WordIndirect 							; else do it as integer.
.172d					_IsFPOperation:
.172d	8a		txa				txa 								; call the relevant fp routine
.172e	a2 08		ldx #$08		ldx	#8
.1730	20 45 21	jsr $2145		jsr	floatingpointHandler
.1733	aa		tax				tax
.1734	60		rts				rts
.1735					ByteRefHandler:
.1735	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.1738	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.173b	b0 03		bcs $1740			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.173d	4c 73 17	jmp $1773			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1740					_IsFPOperation:
.1740	8a		txa				txa 								; call the relevant fp routine
.1741	a2 08		ldx #$08		ldx	#8
.1743	20 45 21	jsr $2145		jsr	floatingpointHandler
.1746	aa		tax				tax
.1747	60		rts				rts
.1748					PowerHandler:
.1748	20 a3 18	jsr $18a3			jsr 	DereferenceTwo
.174b	20 28 16	jsr $1628			jsr 	BinaryProcess 				; check to see if either is float
.174e	b0 03		bcs $1753			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1750	4c 5b 17	jmp $175b			jmp 	PowerInteger 							; else do it as integer.
.1753					_IsFPOperation:
.1753	8a		txa				txa 								; call the relevant fp routine
.1754	a2 16		ldx #$16		ldx	#22
.1756	20 45 21	jsr $2145		jsr	floatingpointHandler
.1759	aa		tax				tax
.175a	60		rts				rts
.175b					PowerInteger:
.175b	20 42 16	jsr $1642			jsr 	BPMakeBothFloat				; make them float.
.175e	8a		txa				txa
.175f	a2 16		ldx #$16		ldx	#22
.1761	20 45 21	jsr $2145		jsr	floatingpointHandler
.1764	a2 12		ldx #$12		ldx	#18
.1766	20 45 21	jsr $2145		jsr	floatingpointHandler
.1769	aa		tax				tax
.176a	a9 00		lda #$00			lda 	#0 							; make type integer
.176c	95 40		sta $40,x			sta 	esType,x
.176e	60		rts				rts
.176f					Mint32WordIndirect:
.176f	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1771	d0 02		bne $1775			bne 	Min32Indirect
.1773					Mint32ByteIndirect:
.1773	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1775					Min32Indirect:
.1775	48		pha				pha 								; save the indirection
.1776	20 fb 1e	jsr $1efb			jsr 	MInt32Add 					; add a!b a?b
.1779	68		pla				pla 								; and set the type to reference.
.177a	95 40		sta $40,x			sta 	esType,x
.177c	60		rts				rts
.177d					Mint32ShiftLeftX:
.177d	18		clc				clc
.177e	90 01		bcc $1781			bcc 	Mint32Shift
.1780					Mint32ShiftRightX:
.1780	38		sec				sec
.1781					Mint32Shift:
.1781	08		php				php 								; save carry flag on stack.
.1782	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1784	15 59		ora $59,x			ora 	esInt2+1,x
.1786	15 61		ora $61,x			ora 	esInt3+1,x
.1788	d0 1e		bne $17a8			bne 	_MShiftZero
.178a	b5 49		lda $49,x			lda 	esInt0+1,x
.178c	c9 20		cmp #$20			cmp 	#32
.178e	b0 18		bcs $17a8			bcs 	_MShiftZero
.1790					_MShiftLoop:
.1790	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1792	f0 12		beq $17a6			beq 	_MShiftExit
.1794	d6 49		dec $49,x			dec 	esInt0+1,x
.1796	28		plp				plp 								; restore and save carry
.1797	08		php				php
.1798	90 06		bcc $17a0			bcc 	_MShiftLeft
.179a	20 2e 20	jsr $202e			jsr 	Mint32ShiftRight
.179d	4c 90 17	jmp $1790			jmp 	_MShiftLoop
.17a0					_MShiftLeft:
.17a0	20 25 20	jsr $2025			jsr 	Mint32ShiftLeft
.17a3	4c 90 17	jmp $1790			jmp 	_MShiftLoop
.17a6					_MShiftExit:
.17a6	28		plp				plp	 								; throw saved carry and exit
.17a7	60		rts				rts
.17a8					_MShiftZero:
.17a8	4c 10 20	jmp $2010			jmp 	MInt32False 				; return 0.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.17ab					PerformComparison:
.17ab	20 a3 18	jsr $18a3			jsr 	DereferenceTwo 				; make both values.
.17ae	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.17b0	35 41		and $41,x			and 	esType+1,x
.17b2	0a		asl a				asl 	a
.17b3	30 1d		bmi $17d2			bmi 	_PCIsString
.17b5	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.17b7	15 41		ora $41,x			ora 	esType+1,x
.17b9	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.17ba	30 22		bmi $17de			bmi 	_PCError
.17bc	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.17be	f0 0f		beq $17cf			beq 	_PCIsInteger 				; if not two integers
.17c0	20 42 16	jsr $1642			jsr 	BPMakeBothFloat 			; make both float
.17c3	8a		txa				txa
.17c4	a2 04		ldx #$04		ldx	#4
.17c6	20 45 21	jsr $2145		jsr	floatingpointHandler
.17c9	86 0c		stx $0c				stx 	tempShort 					; save result
.17cb	aa		tax				tax
.17cc	a5 0c		lda $0c				lda 	tempShort
.17ce	60		rts				rts
.17cf					_PCIsInteger:
.17cf	4c be 1d	jmp $1dbe			jmp 	MInt32Compare
.17d2					_PCIsString:
.17d2	8a		txa				txa 								; A has SP
.17d3	a2 06		ldx #$06		ldx	#6
.17d5	20 9c 23	jsr $239c		jsr	stringHandler
.17d8	86 0c		stx $0c				stx 	tempShort 					; save result
.17da	aa		tax				tax 								; put SP back in X and get result.
.17db	a5 0c		lda $0c				lda 	tempShort
.17dd	60		rts				rts
.17de					_PCError:
.17de	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.17e0	20 3e 21	jsr $213e			jsr 	ErrorHandler
.17e3					CompareEquals:
.17e3	20 ab 17	jsr $17ab			jsr 	PerformComparison
.17e6	c9 00		cmp #$00			cmp 	#$00
.17e8	f0 35		beq $181f			beq  	CompareTrue
.17ea	4c 22 18	jmp $1822			jmp 	CompareFalse
.17ed					CompareLess:
.17ed	20 ab 17	jsr $17ab			jsr 	PerformComparison
.17f0	c9 ff		cmp #$ff			cmp 	#$FF
.17f2	f0 2b		beq $181f			beq  	CompareTrue
.17f4	4c 22 18	jmp $1822			jmp 	CompareFalse
.17f7					CompareGreater:
.17f7	20 ab 17	jsr $17ab			jsr 	PerformComparison
.17fa	c9 01		cmp #$01			cmp 	#$01
.17fc	f0 21		beq $181f			beq  	CompareTrue
.17fe	4c 22 18	jmp $1822			jmp 	CompareFalse
.1801					CompareNotEquals:
.1801	20 ab 17	jsr $17ab			jsr 	PerformComparison
.1804	c9 00		cmp #$00			cmp 	#$00
.1806	d0 17		bne $181f			bne  	CompareTrue
.1808	4c 22 18	jmp $1822			jmp 	CompareFalse
.180b					CompareGreaterEq:
.180b	20 ab 17	jsr $17ab			jsr 	PerformComparison
.180e	c9 ff		cmp #$ff			cmp 	#$FF
.1810	d0 0d		bne $181f			bne  	CompareTrue
.1812	4c 22 18	jmp $1822			jmp 	CompareFalse
.1815					CompareLessEq:
.1815	20 ab 17	jsr $17ab			jsr 	PerformComparison
.1818	c9 01		cmp #$01			cmp 	#$01
.181a	d0 03		bne $181f			bne  	CompareTrue
.181c	4c 22 18	jmp $1822			jmp 	CompareFalse
.181f					CompareTrue:
.181f	4c 0c 20	jmp $200c			jmp 	MInt32True
.1822					CompareFalse:
.1822	4c 10 20	jmp $2010			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.1825					Event_Str:
.1825	20 03 1a	jsr $1a03			jsr 	EvaluateNumeric 			; get a number.
.1828	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.182a	d0 13		bne $183f			bne 	_ESFloat
.182c	20 82 18	jsr $1882			jsr 	ConvertGetBase
.182f	a9 cd		lda #$cd			lda 	#(convertBuffer) & $FF
.1831	85 04		sta $04				sta 	temp0
.1833	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1835	85 05		sta $05				sta 	1+(temp0)
.1837	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1839	20 66 1f	jsr $1f66			jsr 	MInt32ToString 				; convert to string.
.183c	4c 4c 18	jmp $184c			jmp 	_ESCloneExit 				; clone and exit.
.183f					_ESFloat:
.183f	20 83 20	jsr $2083			jsr 	CheckRightParen 			; check closing )
.1842	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1845	8a		txa				txa
.1846	a2 14		ldx #$14		ldx	#20
.1848	20 45 21	jsr $2145		jsr	floatingpointHandler
.184b	aa		tax				tax
.184c					_ESCloneExit:
.184c	8a		txa				txa
.184d	a2 02		ldx #$02		ldx	#2
.184f	20 9c 23	jsr $239c		jsr	stringHandler
.1852	aa		tax				tax
.1853	60		rts				rts
.1854					UnaryVal:
.1854	38		sec				sec
.1855	b0 01		bcs $1858			bcs 	ValueMain
.1857					UnaryIsVal:
.1857	18		clc				clc
.1858					ValueMain:
.1858	08		php				php 								; save results (CS is value, CC is validation)
.1859	20 0e 1a	jsr $1a0e			jsr 	EvaluateString
.185c	20 82 18	jsr $1882			jsr 	ConvertGetBase 				; get base, if any.
.185f	98		tya				tya
.1860	48		pha				pha
.1861	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.1864	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.1866	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.1868	20 85 1e	jsr $1e85			jsr 	MInt32FromString 			; convert it back from a string.
.186b	b0 0c		bcs $1879			bcs 	_VMSuccess 					; successfully converted.
.186d	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.186f	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.1871	f0 00		beq $1873			beq 	_VMFailed 	 				; so we failed.
.1873					_VMFailed:
.1873	68		pla				pla
.1874	a8		tay				tay
.1875	28		plp				plp
.1876	4c 10 20	jmp $2010			jmp 	MInt32False 				; return 0 whatever.
.1879					_VMSuccess:
.1879	68		pla				pla
.187a	a8		tay				tay
.187b	28		plp				plp 								; if CS the it was val() so we want the value.
.187c	b0 03		bcs $1881			bcs 	_VMExit
.187e	4c 0c 20	jmp $200c			jmp 	MInt32True 					; otherwise return true as successful.
.1881					_VMExit:
.1881	60		rts				rts
.1882					ConvertGetBase:
.1882	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.1884	95 49		sta $49,x			sta 	esInt0+1,x
.1886	b1 02		lda ($02),y			lda 	(codePtr),y
.1888	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.188a	d0 0e		bne $189a			bne 	_CGBDone
.188c	e8		inx				inx 								; next level
.188d	c8		iny				iny 								; skip comma.
.188e	20 21 1a	jsr $1a21			jsr 	EvaluateSmallInteger		; evaluate the base.
.1891	ca		dex				dex
.1892	c9 02		cmp #$02			cmp 	#2
.1894	90 08		bcc $189e			bcc 	_CGBValue
.1896	c9 11		cmp #$11			cmp 	#17
.1898	b0 04		bcs $189e			bcs 	_CGBValue
.189a					_CGBDone:
.189a	20 83 20	jsr $2083			jsr 	CheckRightParen
.189d	60		rts				rts
.189e					_CGBValue:
.189e	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.18a0	20 3e 21	jsr $213e			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.18a3					DereferenceTwo:
.18a3	e8		inx				inx
.18a4	20 a8 18	jsr $18a8			jsr 	DereferenceOne
.18a7	ca		dex				dex
.18a8					DereferenceOne:
.18a8	b5 40		lda $40,x			lda 	esType,x
.18aa	10 3d		bpl $18e9			bpl 	_DRNotReference 			; is it a reference ?
.18ac	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.18ad	b0 3b		bcs $18ea			bcs 	_DRFloatDeReference
.18af	98		tya				tya
.18b0	48		pha				pha
.18b1	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.18b3	85 04		sta $04				sta 	temp0
.18b5	b5 50		lda $50,x			lda 	esInt1,x
.18b7	85 05		sta $05				sta 	temp0+1
.18b9	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.18bb	95 50		sta $50,x			sta 	esInt1,x
.18bd	95 58		sta $58,x			sta 	esInt2,x
.18bf	95 60		sta $60,x			sta 	esInt3,x
.18c1	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.18c3	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.18c5	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.18c6	30 0d		bmi $18d5			bmi 	_DeRefString 				; string, 2 bytes only
.18c8	d0 11		bne $18db			bne 	_DeRefByte 					; byte 1 byte only
.18ca					_DeRefLong:
.18ca	a0 03		ldy #$03			ldy 	#3
.18cc	b1 04		lda ($04),y			lda 	(temp0),y
.18ce	95 60		sta $60,x			sta 	esInt3,x
.18d0	88		dey				dey
.18d1	b1 04		lda ($04),y			lda 	(temp0),y
.18d3	95 58		sta $58,x			sta 	esInt2,x
.18d5					_DeRefString:
.18d5	a0 01		ldy #$01			ldy 	#1
.18d7	b1 04		lda ($04),y			lda 	(temp0),y
.18d9	95 50		sta $50,x			sta 	esInt1,x
.18db					_DeRefByte:
.18db	a0 00		ldy #$00			ldy 	#0
.18dd	b1 04		lda ($04),y			lda 	(temp0),y
.18df	95 48		sta $48,x			sta 	esInt0,x
.18e1	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.18e3	29 40		and #$40			and 	#$40
.18e5	95 40		sta $40,x			sta 	esType,x
.18e7	68		pla				pla
.18e8	a8		tay				tay
.18e9					_DRNotReference
.18e9	60		rts				rts
.18ea					_DRFloatDereference:
.18ea	8a		txa				txa
.18eb							floatingpoint_deref
.18eb	aa		tax				tax
.18ec	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.18ee	95 40		sta $40,x			sta 	esType,x
.18f0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.18f1					EvaluateLevel:
.18f1	48		pha				pha 								; save precedence level.
.18f2	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.18f4	95 48		sta $48,x			sta 	esInt0,x
.18f6	95 50		sta $50,x			sta 	esInt1,x
.18f8	95 58		sta $58,x			sta 	esInt2,x
.18fa	95 60		sta $60,x			sta 	esInt3,x
.18fc	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.18fe	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1900	30 21		bmi $1923			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1902	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1903	30 0a		bmi $190f			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1905	8a		txa				txa 								; stack level in X
.1906	a2 00		ldx #$00		ldx	#0
.1908	20 0a 25	jsr $250a		jsr	variableHandler
.190b	aa		tax				tax
.190c	4c 4c 19	jmp $194c			jmp		_ELHasTerm
.190f					_ELIsConstant:
.190f	4a		lsr a				lsr 	a 							; get the value back
.1910	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1912	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1914					_ELCheckNext:
.1914	c8		iny				iny 								; look at next
.1915	b1 02		lda ($02),y			lda 	(codePtr),y
.1917	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1919	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.191b	b0 2f		bcs $194c			bcs 	_ELHasTerm 					; done getting the constant.
.191d	20 59 1a	jsr $1a59			jsr 	ELShiftByteIn 				; shift byte into position.
.1920	4c 14 19	jmp $1914			jmp 	_ELCheckNext
.1923					_ELIsToken:
.1923	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1925	f0 0f		beq $1936			beq 	_ELIsString
.1927	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1929	d0 5f		bne $198a			bne 	_ELCheckUnary
.192b	8a		txa				txa 								; put X into A
.192c	c8		iny				iny 								; skip over the float marker
.192d	a2 18		ldx #$18		ldx	#24
.192f	20 45 21	jsr $2145		jsr	floatingpointHandler
.1932	aa		tax				tax 								; restore X
.1933	4c 4c 19	jmp $194c			jmp 	_ELHasTerm
.1936					_ELIsString:
.1936	98		tya				tya 								; address of string is codePtr+y+1
.1937	38		sec				sec
.1938	65 02		adc $02				adc 	codePtr
.193a	95 48		sta $48,x			sta 	esInt0,x
.193c	a5 03		lda $03				lda 	codePtr+1
.193e	69 00		adc #$00			adc 	#0
.1940	95 50		sta $50,x			sta 	esInt1,x
.1942	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1944	95 40		sta $40,x			sta 	esType,x
.1946	c8		iny				iny 								; skip over string.
.1947	98		tya				tya
.1948	38		sec				sec									; +1 for the length itself.
.1949	71 02		adc ($02),y			adc 	(codePtr),y
.194b	a8		tay				tay 								; and fall through to term loop code.
.194c					_ELHasTerm:
.194c	b1 02		lda ($02),y			lda 	(codePtr),y
.194e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1950	90 04		bcc $1956			bcc 	_ELPopExit
.1952	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1954	90 02		bcc $1958			bcc 	_ELHasBinaryTerm
.1956					_ELPopExit:
.1956	68		pla				pla
.1957					_ELExit:
.1957	60		rts				rts
.1958					_ELHasBinaryTerm:
.1958	84 0c		sty $0c				sty 	tempShort 					; save position
.195a	a8		tay				tay 								; use token as an index and get the precedence.
.195b	b9 01 1a	lda $1a01,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.195e	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1960	85 0c		sta $0c				sta 	tempShort 					; save precedence in memory.
.1962	68		pla				pla 								; restore current level.
.1963	c5 0c		cmp $0c				cmp 	tempShort 					; if current >= operator then exit
.1965	b0 f0		bcs $1957			bcs 	_ELExit
.1967	48		pha				pha 								; save current level back on the stack.
.1968	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.196a	48		pha				pha
.196b	c8		iny				iny
.196c	e8		inx				inx 								; calculate the RHS at the operator precedence.
.196d	a5 0c		lda $0c				lda 	tempShort
.196f	20 f1 18	jsr $18f1			jsr 	EvaluateLevel
.1972	ca		dex				dex
.1973	68		pla				pla 								; get the operator back out.
.1974					_ELExecuteA:
.1974	86 0c		stx $0c				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1976	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1977	aa		tax				tax
.1978	bd e8 13	lda $13e8,x			lda 	Group0Vectors,x
.197b	85 04		sta $04				sta 	temp0
.197d	bd e9 13	lda $13e9,x			lda 	Group0Vectors+1,x
.1980	85 05		sta $05				sta 	temp0+1
.1982	a6 0c		ldx $0c				ldx 	tempShort
.1984	20 cd 19	jsr $19cd			jsr 	_ELCallTemp0
.1987	4c 4c 19	jmp $194c			jmp 	_ELHasTerm 					; and loop back round.
.198a					_ELCheckUnary:
.198a	c8		iny				iny 								; skip over token.
.198b	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.198d	f0 15		beq $19a4			beq 	_ELMinus
.198f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1991	f0 28		beq $19bb			beq 	_ELIndirect
.1993	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1995	f0 24		beq $19bb			beq 	_ELIndirect
.1997	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1999	90 04		bcc $199f			bcc 	_ELUSyntax
.199b	c9 c4		cmp #$c4			cmp 	#TOK_TOKENS
.199d	90 d5		bcc $1974			bcc 	_ELExecuteA 				; if so do that token.
.199f					_ELUSyntax:
.199f	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.19a1	20 3e 21	jsr $213e			jsr 	ErrorHandler
.19a4					_ELMinus:
.19a4	20 e2 19	jsr $19e2			jsr 	EvaluateNumericTerm 		; get a number to negate.
.19a7	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.19a9	f0 0a		beq $19b5			beq 	_ELMinusInteger
.19ab	8a		txa				txa
.19ac	a2 0c		ldx #$0c		ldx	#12
.19ae	20 45 21	jsr $2145		jsr	floatingpointHandler
.19b1	aa		tax				tax
.19b2	4c 4c 19	jmp $194c			jmp 	_ELHasTerm
.19b5					_ELMinusInteger:
.19b5	20 ca 1f	jsr $1fca			jsr 	MInt32Negate 				; do int negate
.19b8	4c 4c 19	jmp $194c			jmp 	_ELHasTerm
.19bb					_ELIndirect:
.19bb	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.19bc	20 eb 19	jsr $19eb			jsr 	EvaluateIntegerTerm 		; integer address
.19bf	68		pla				pla
.19c0	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.19c2	f0 02		beq $19c6			beq 	_ELHaveModifier
.19c4	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.19c6					_ELHaveModifier:
.19c6	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.19c8	95 40		sta $40,x			sta 	esType,x
.19ca	4c 4c 19	jmp $194c			jmp 	_ELHasTerm
.19cd					_ELCallTemp0:
.19cd	6c 04 00	jmp ($0004)			jmp 	(temp0)
.19d0					UnaryParenthesis:
.19d0	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.19d2	20 f1 18	jsr $18f1			jsr 	EvaluateLevel
.19d5	20 83 20	jsr $2083			jsr 	CheckRightParen 			; check for )
.19d8	60		rts				rts
.19d9					EvaluateTerm:
.19d9	a9 0f		lda #$0f			lda 	#15
.19db	20 f1 18	jsr $18f1			jsr 	EvaluateLevel
.19de	20 a8 18	jsr $18a8			jsr 	DereferenceOne
.19e1	60		rts				rts
.19e2					EvaluateNumericTerm:
.19e2	20 d9 19	jsr $19d9			jsr 	EvaluateTerm
.19e5	b5 40		lda $40,x			lda 	esType,x
.19e7	0a		asl a				asl 	a 							; see if it's a string.
.19e8	30 09		bmi $19f3			bmi 	ENTType
.19ea	60		rts				rts
.19eb					EvaluateIntegerTerm:
.19eb	20 d9 19	jsr $19d9			jsr 	EvaluateTerm
.19ee	b5 40		lda $40,x			lda 	esType,x
.19f0	d0 01		bne $19f3			bne 	ENTType
.19f2	60		rts				rts
.19f3					ENTType:
.19f3	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.19f5	20 3e 21	jsr $213e			jsr 	ErrorHandler
.19f8					EvaluateRoot:
.19f8	a2 00		ldx #$00			ldx 	#0
.19fa					Evaluate:
.19fa	a9 00		lda #$00			lda 	#0
.19fc	20 f1 18	jsr $18f1			jsr 	EvaluateLevel
.19ff	20 a8 18	jsr $18a8			jsr 	DereferenceOne
.1a02	60		rts				rts
.1a03					EvaluateNumeric:
.1a03	20 fa 19	jsr $19fa			jsr 	Evaluate
.1a06	b5 40		lda $40,x			lda 	esType,x
.1a08	0a		asl a				asl 	a 							; see if it's a string.
.1a09	30 e8		bmi $19f3			bmi 	ENTType
.1a0b	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1a0c	4a		lsr a				lsr 	a
.1a0d	60		rts				rts
.1a0e					EvaluateString:
.1a0e	20 fa 19	jsr $19fa			jsr 	Evaluate
.1a11	b5 40		lda $40,x			lda 	esType,x
.1a13	0a		asl a				asl 	a 							; see if it's a string.
.1a14	10 dd		bpl $19f3			bpl 	ENTType
.1a16	60		rts				rts
.1a17					EvaluateRootInteger:
.1a17	a2 00		ldx #$00			ldx 	#0
.1a19					EvaluateInteger:
.1a19	20 fa 19	jsr $19fa			jsr 	Evaluate
.1a1c	b5 40		lda $40,x			lda 	esType,x
.1a1e	d0 d3		bne $19f3			bne 	ENTType
.1a20	60		rts				rts
.1a21					EvaluateSmallInteger:
.1a21	20 19 1a	jsr $1a19			jsr 	EvaluateInteger
.1a24	b5 50		lda $50,x			lda 	esInt1,x
.1a26	15 58		ora $58,x			ora 	esInt2,x
.1a28	15 60		ora $60,x			ora 	esInt3,x
.1a2a	d0 03		bne $1a2f			bne 	_ESIValue
.1a2c	b5 48		lda $48,x			lda 	esInt0,x
.1a2e	60		rts				rts
.1a2f					_ESIValue:
.1a2f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1a31	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1a34					LinkEvaluate:
.1a34	aa		tax				tax
.1a35	20 fa 19	jsr $19fa			jsr 	Evaluate
.1a38	8a		txa				txa
.1a39	60		rts				rts
.1a3a					LinkEvaluateInteger:
.1a3a	aa		tax				tax
.1a3b	20 19 1a	jsr $1a19			jsr 	EvaluateInteger
.1a3e	8a		txa				txa
.1a3f	60		rts				rts
.1a40					LinkEvaluateSmallInt:
.1a40	aa		tax				tax
.1a41	20 21 1a	jsr $1a21			jsr 	EvaluateSmallInteger
.1a44	8a		txa				txa
.1a45	60		rts				rts
.1a46					EvaluateReference:
.1a46	ad 98 1a	lda $1a98			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.1a49	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.1a4a	e9 01		sbc #$01			sbc 	#1
.1a4c	20 f1 18	jsr $18f1			jsr 	EvaluateLevel
.1a4f	b5 40		lda $40,x			lda 	esType,x
.1a51	10 01		bpl $1a54			bpl 	_ERFail
.1a53	60		rts				rts
.1a54					_ERFail:
.1a54	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.1a56	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1a59					ELShiftByteIn:
.1a59	48		pha				pha 								; save bits to shift in.
.1a5a	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1a5c	48		pha				pha
.1a5d	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1a5f	95 60		sta $60,x			sta 	esInt3,x
.1a61	b5 50		lda $50,x			lda 	esInt1,x
.1a63	95 58		sta $58,x			sta 	esInt2,x
.1a65	b5 48		lda $48,x			lda 	esInt0,x
.1a67	95 50		sta $50,x			sta 	esInt1,x
.1a69	a9 00		lda #$00			lda 	#0
.1a6b	95 48		sta $48,x			sta 	esInt0,x
.1a6d	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1a6e	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1a70	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1a72					_ELShiftLoop:
.1a72	4a		lsr a				lsr 	a
.1a73	76 60		ror $60,x			ror 	esInt3,x
.1a75	76 58		ror $58,x			ror 	esInt2,x
.1a77	76 50		ror $50,x			ror 	esInt1,x
.1a79	76 48		ror $48,x			ror 	esInt0,x
.1a7b	c9 01		cmp #$01			cmp 	#1
.1a7d	d0 f3		bne $1a72			bne 	_ELShiftLoop
.1a7f	68		pla				pla 								; get original 6 bit value and OR in.
.1a80	29 3f		and #$3f			and 	#$3F
.1a82	15 48		ora $48,x			ora 	esInt0,x
.1a84	95 48		sta $48,x			sta 	esInt0,x
.1a86	60		rts				rts
.1a87					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>1a87	01					.byte	$01			; $86 and
>1a88	01					.byte	$01			; $87 or
>1a89	01					.byte	$01			; $88 xor
>1a8a	02					.byte	$02			; $89 >=
>1a8b	02					.byte	$02			; $8a <=
>1a8c	02					.byte	$02			; $8b >
>1a8d	02					.byte	$02			; $8c <
>1a8e	02					.byte	$02			; $8d =
>1a8f	02					.byte	$02			; $8e <>
>1a90	03					.byte	$03			; $8f +
>1a91	03					.byte	$03			; $90 -
>1a92	04					.byte	$04			; $91 >>
>1a93	04					.byte	$04			; $92 <<
>1a94	04					.byte	$04			; $93 *
>1a95	04					.byte	$04			; $94 /
>1a96	04					.byte	$04			; $95 mod
>1a97	05					.byte	$05			; $96 ^
>1a98	06					.byte	$06			; $97 !
>1a99	06					.byte	$06			; $98 ?
>1a9a	82					.byte	$82			; $99 repeat
>1a9b	82					.byte	$82			; $9a while
>1a9c	82					.byte	$82			; $9b for
>1a9d	82					.byte	$82			; $9c if
>1a9e	82					.byte	$82			; $9d defproc
>1a9f	80					.byte	$80			; $9e until
>1aa0	80					.byte	$80			; $9f wend
>1aa1	80					.byte	$80			; $a0 next
>1aa2	80					.byte	$80			; $a1 then
>1aa3	80					.byte	$80			; $a2 endif
>1aa4	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.1aa5					EventFunction:
.1aa5	20 46 1a	jsr $1a46			jsr 	EvaluateReference			; get the variable reference.
.1aa8	b5 40		lda $40,x			lda 	esType,x
.1aaa	c9 80		cmp #$80			cmp 	#$80 						; must be int ref
.1aac	d0 55		bne $1b03			bne 	_EFType
.1aae	20 90 20	jsr $2090			jsr 	CheckComma
.1ab1	e8		inx				inx
.1ab2	20 19 1a	jsr $1a19			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.1ab5	20 83 20	jsr $2083			jsr 	CheckRightParen 			; finish off with the
.1ab8	ca		dex				dex
.1ab9	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767
.1abb	29 80		and #$80			and 	#$80
.1abd	15 58		ora $58,x			ora 	esInt2,x
.1abf	15 60		ora $60,x			ora 	esInt3,x
.1ac1	d0 3b		bne $1afe			bne 	_EFValue
.1ac3	98		tya				tya
.1ac4	48		pha				pha
.1ac5	8a		txa				txa
.1ac6	48		pha				pha
.1ac7	a2 08		ldx #$08		ldx	#8
.1ac9	20 31 21	jsr $2131		jsr	deviceHandler
.1acc	84 07		sty $07				sty 	temp1+1
.1ace	85 06		sta $06				sta 	temp1
.1ad0	68		pla				pla
.1ad1	aa		tax				tax
.1ad2	20 26 11	jsr $1126			jsr 	TOSToTemp0 					; point temp0 to the variable.
.1ad5	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.1ad7	b1 04		lda ($04),y			lda 	(temp0),y
.1ad9	c8		iny				iny
.1ada	11 04		ora ($04),y			ora 	(temp0),y
.1adc	f0 17		beq $1af5			beq 	_EFInitialise 				; if so, initialise the value but return false.
.1ade	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.1ae0	38		sec				sec
.1ae1	b1 04		lda ($04),y			lda 	(temp0),y
.1ae3	e5 06		sbc $06				sbc 	temp1
.1ae5	c8		iny				iny
.1ae6	b1 04		lda ($04),y			lda 	(temp0),y
.1ae8	e5 07		sbc $07				sbc 	temp1+1
.1aea	10 0c		bpl $1af8			bpl 	_EFFail 					; if trigger >= timer then return False
.1aec	20 08 1b	jsr $1b08			jsr 	SetEventTimer 				; reset the timer for next time.
.1aef	20 0c 20	jsr $200c			jsr	 	MInt32True 					; and treutn true as fired.
.1af2	68		pla				pla
.1af3	a8		tay				tay
.1af4	60		rts				rts
.1af5					_EFInitialise:
.1af5	20 08 1b	jsr $1b08			jsr		SetEventTimer 				; set trigger time to time + elapsed
.1af8					_EFFail:
.1af8	20 10 20	jsr $2010			jsr 	MInt32False
.1afb	68		pla				pla
.1afc	a8		tay				tay
.1afd	60		rts				rts
.1afe					_EFValue:
.1afe	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b00	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1b03					_EFType:
.1b03	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b05	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1b08					SetEventTimer:
.1b08	a0 00		ldy #$00			ldy 	#0 							; add elapsed to current time, store in variable
.1b0a	18		clc				clc
.1b0b	a5 06		lda $06				lda 	temp1
.1b0d	75 49		adc $49,x			adc 	esInt0+1,x
.1b0f	91 04		sta ($04),y			sta		(temp0),y
.1b11	c8		iny				iny
.1b12	a5 07		lda $07				lda 	temp1+1
.1b14	75 51		adc $51,x			adc 	esInt1+1,x
.1b16	91 04		sta ($04),y			sta		(temp0),y
.1b18	88		dey				dey
.1b19	11 04		ora ($04),y			ora 	(temp0),y 					; if the result is non zero, exit
.1b1b	d0 04		bne $1b21			bne 	_SETExit
.1b1d	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.1b1f	91 04		sta ($04),y			sta 	(temp0),y 					; near enough.
.1b21					_SETExit:
.1b21	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.1b22					UnaryLen:
.1b22	20 30 1b	jsr $1b30			jsr 	ULStart
.1b25					ULFinish:
.1b25	b1 04		lda ($04),y			lda 	(temp0),y
.1b27	a4 0c		ldy $0c				ldy 	tempShort
.1b29	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit
.1b2c	20 83 20	jsr $2083			jsr 	CheckRightParen
.1b2f	60		rts				rts
.1b30	20 0e 1a	jsr $1a0e	ULStart:jsr 	EvaluateString
.1b33	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1b35	85 04		sta $04				sta 	temp0
.1b37	b5 50		lda $50,x			lda 	esInt1,x
.1b39	85 05		sta $05				sta 	temp0+1
.1b3b	84 0c		sty $0c				sty 	tempShort 					; get length
.1b3d	a0 00		ldy #$00			ldy 	#0
.1b3f	60		rts				rts
.1b40					UnaryAsc:
.1b40	20 30 1b	jsr $1b30			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1b43	b1 04		lda ($04),y			lda 	(temp0),y
.1b45	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1b46	c9 00		cmp #$00			cmp 	#0
.1b48	d0 db		bne $1b25			bne 	ULFinish
.1b4a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1b4c	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1b4f					UnaryAbs:
.1b4f	20 03 1a	jsr $1a03			jsr 	EvaluateNumeric
.1b52	b0 07		bcs $1b5b			bcs 	_UAFloat
.1b54	20 c5 1f	jsr $1fc5			jsr 	MInt32Absolute
.1b57	20 83 20	jsr $2083			jsr 	CheckRightParen
.1b5a	60		rts				rts
.1b5b					_UAFloat:
.1b5b	8a		txa				txa
.1b5c	a2 00		ldx #$00		ldx	#0
.1b5e	20 45 21	jsr $2145		jsr	floatingpointHandler
.1b61	aa		tax				tax
.1b62	20 83 20	jsr $2083			jsr 	CheckRightParen
.1b65	60		rts				rts
.1b66					UnarySgn:
.1b66	20 03 1a	jsr $1a03			jsr 	EvaluateNumeric
.1b69	b0 07		bcs $1b72			bcs 	_USFloat
.1b6b	20 fd 1f	jsr $1ffd			jsr 	MInt32Sign
.1b6e	20 83 20	jsr $2083			jsr 	CheckRightParen
.1b71	60		rts				rts
.1b72					_USFloat:
.1b72	8a		txa				txa
.1b73	a2 0e		ldx #$0e		ldx	#14
.1b75	20 45 21	jsr $2145		jsr	floatingpointHandler
.1b78	aa		tax				tax
.1b79	20 83 20	jsr $2083			jsr 	CheckRightParen
.1b7c	60		rts				rts
.1b7d					UnaryPeek:
.1b7d	20 a9 1b	jsr $1ba9			jsr 	PDLCode
.1b80	4c 9d 1b	jmp $1b9d			jmp 	PDLByte0
.1b83					UnaryDeek:
.1b83	20 a9 1b	jsr $1ba9			jsr 	PDLCode
.1b86	4c 97 1b	jmp $1b97			jmp 	PDLByte1
.1b89					UnaryLeek:
.1b89	20 a9 1b	jsr $1ba9			jsr 	PDLCode
.1b8c	a0 03		ldy #$03			ldy 	#3
.1b8e	b1 04		lda ($04),y			lda 	(temp0),y
.1b90	95 60		sta $60,x			sta 	esInt3,x
.1b92	88		dey				dey
.1b93	b1 04		lda ($04),y			lda 	(temp0),y
.1b95	95 58		sta $58,x			sta 	esInt2,x
.1b97					PDLByte1:
.1b97	a0 01		ldy #$01			ldy 	#1
.1b99	b1 04		lda ($04),y			lda 	(temp0),y
.1b9b	95 50		sta $50,x			sta 	esInt1,x
.1b9d					PDLByte0:
.1b9d	a0 00		ldy #$00			ldy 	#0
.1b9f	b1 04		lda ($04),y			lda 	(temp0),y
.1ba1	95 48		sta $48,x			sta 	esInt0,x
.1ba3	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y
.1ba5	20 83 20	jsr $2083			jsr 	CheckRightParen 			; check right and return
.1ba8	60		rts				rts
.1ba9					PDLCode:
.1ba9	20 19 1a	jsr $1a19			jsr 	EvaluateInteger
.1bac	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1bae	85 04		sta $04				sta 	temp0
.1bb0	b5 50		lda $50,x			lda 	esInt1,x
.1bb2	85 05		sta $05				sta 	temp0+1
.1bb4	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1bb6	95 50		sta $50,x			sta 	esInt1,x
.1bb8	95 58		sta $58,x			sta 	esInt2,x
.1bba	95 60		sta $60,x			sta 	esInt3,x
.1bbc	84 0c		sty $0c				sty 	tempShort 					; save Y
.1bbe	60		rts				rts
.1bbf					Unary_Random:
.1bbf	20 40 20	jsr $2040			jsr 	MInt32Random 				; generate random number.
.1bc2	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1bc4	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1bc6	f0 08		beq $1bd0			beq 	_URExit
.1bc8	e8		inx				inx 								; load range 0..r-1 into +1
.1bc9	20 19 1a	jsr $1a19			jsr 	EvaluateInteger
.1bcc	ca		dex				dex
.1bcd	20 71 1e	jsr $1e71			jsr 	MInt32Modulus 				; calculate random % modulus
.1bd0					_URExit:
.1bd0	20 83 20	jsr $2083			jsr 	CheckRightParen 			; check right and return
.1bd3	60		rts				rts
.1bd4					Unary_Min:
.1bd4	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1bd6	d0 02		bne $1bda			bne 	UnaryMBody
.1bd8					Unary_Max:
.1bd8	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.1bda					UnaryMBody:
.1bda	48		pha				pha 								; save comparator on stack.
.1bdb	20 fa 19	jsr $19fa			jsr 	Evaluate 					; get the first thing to check
.1bde					_UnaryMLoop:
.1bde	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1be0	c8		iny				iny
.1be1	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.1be3	f0 09		beq $1bee			beq 	_UnaryMExit
.1be5	c9 c6		cmp #$c6			cmp 	#TKW_COMMA 					; found , indicates more.
.1be7	f0 07		beq $1bf0			beq 	_UnaryMCompare
.1be9	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1beb	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1bee					_UnaryMExit:
.1bee	68		pla				pla 								; throw comparator and return.
.1bef	60		rts				rts
.1bf0					_UnaryMCompare:
.1bf0	e8		inx				inx 								; get the 2nd thing to evaluate
.1bf1	20 fa 19	jsr $19fa			jsr 	Evaluate
.1bf4	ca		dex				dex
.1bf5	20 ab 17	jsr $17ab			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.1bf8	85 0c		sta $0c				sta 	tempShort 					; save result
.1bfa	68		pla				pla 								; get what we need
.1bfb	48		pha				pha
.1bfc	c5 0c		cmp $0c				cmp 	tempShort 					; did we get it
.1bfe	d0 de		bne $1bde			bne 	_UnaryMLoop 				; no, try another value.
.1c00	20 10 20	jsr $2010			jsr 	MInt32False 				; promote 2nd to 1st.
.1c03	20 fb 1e	jsr $1efb			jsr 	MInt32Add
.1c06	4c de 1b	jmp $1bde			jmp 	_UnaryMLoop
.1c09					Unary_Page:
.1c09	20 10 20	jsr $2010			jsr 	MInt32False 				; zero
.1c0c	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.1c0f	95 48		sta $48,x			sta 	esInt0,x
.1c11	ad c9 0a	lda $0ac9			lda 	basePage+1
.1c14	95 50		sta $50,x			sta 	esInt1,x
.1c16	60		rts				rts
.1c17					UnaryReference:
.1c17	a9 0f		lda #$0f			lda 	#15
.1c19	20 f1 18	jsr $18f1			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1c1c	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1c1e	10 05		bpl $1c25			bpl 	UType
.1c20	a9 00		lda #$00			lda 	#0 							; make it an integer
.1c22	95 40		sta $40,x			sta 	esType,x
.1c24	60		rts				rts
.1c25					UType:
.1c25	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1c27	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1c2a					UnaryHexMarker:
.1c2a	4c eb 19	jmp $19eb			jmp 	EvaluateIntegerTerm
.1c2d					UnaryComplement:
.1c2d	20 eb 19	jsr $19eb			jsr 	EvaluateIntegerTerm
.1c30	20 e4 1f	jsr $1fe4			jsr 	MInt32Not
.1c33	60		rts				rts
.1c34					UnaryIntToFloat:
.1c34	20 03 1a	jsr $1a03			jsr 	EvaluateNumeric
.1c37	b5 40		lda $40,x			lda 	esType,x
.1c39	d0 0b		bne $1c46			bne 	_UIFExit
.1c3b	8a		txa				txa
.1c3c	a2 1a		ldx #$1a		ldx	#26
.1c3e	20 45 21	jsr $2145		jsr	floatingpointHandler
.1c41	aa		tax				tax
.1c42	a9 01		lda #$01			lda 	#1
.1c44	95 40		sta $40,x			sta 	esType,x
.1c46					_UIFExit:
.1c46	60		rts				rts
.1c47					UnaryFloatToInt:
.1c47	20 03 1a	jsr $1a03			jsr 	EvaluateNumeric
.1c4a	b5 40		lda $40,x			lda 	esType,x
.1c4c	f0 07		beq $1c55			beq 	_UFIExit
.1c4e	8a		txa				txa
.1c4f	a2 12		ldx #$12		ldx	#18
.1c51	20 45 21	jsr $2145		jsr	floatingpointHandler
.1c54	aa		tax				tax
.1c55					_UFIExit:
.1c55	60		rts				rts
.1c56					UnaryAlloc:
.1c56	e8		inx				inx 								; evaluate memory required
.1c57	20 19 1a	jsr $1a19			jsr 	EvaluateInteger
.1c5a	20 83 20	jsr $2083			jsr 	CheckRightParen
.1c5d	ca		dex				dex
.1c5e	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.1c60	15 61		ora $61,x			ora 	esInt3+1,x
.1c62	d0 19		bne $1c7d			bne 	_UABadValue
.1c64	20 10 20	jsr $2010			jsr 	MInt32False					; zero return.
.1c67	a5 10		lda $10				lda 	lowMemory+1 				; copy low memory in
.1c69	95 50		sta $50,x			sta 	esInt1,x
.1c6b	a5 0f		lda $0f				lda 	lowMemory
.1c6d	95 48		sta $48,x			sta 	esInt0,x
.1c6f	18		clc				clc 								; add alloc required.
.1c70	75 49		adc $49,x			adc 	esInt0+1,x
.1c72	85 0f		sta $0f				sta 	lowMemory
.1c74	a5 10		lda $10				lda 	lowMemory+1
.1c76	75 51		adc $51,x			adc 	esInt1+1,x
.1c78	85 10		sta $10				sta 	lowMemory+1
.1c7a	b0 01		bcs $1c7d			bcs		_UABadValue 				; overflow definitely bad.
.1c7c	60		rts				rts
.1c7d					_UABadValue:
.1c7d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1c7f	20 3e 21	jsr $213e			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.1c82					UnaryTimer:
.1c82	20 83 20	jsr $2083			jsr 	CheckRightParen
.1c85	98		tya				tya
.1c86	48		pha				pha
.1c87	20 37 20	jsr $2037			jsr 	MInt32Zero 					; zero result
.1c8a	86 04		stx $04				stx 	temp0 						; returning in YA so can't use pshx
.1c8c	a2 08		ldx #$08		ldx	#8
.1c8e	20 31 21	jsr $2131		jsr	deviceHandler
.1c91	a6 04		ldx $04				ldx 	temp0						; restore X and update 16 bit result
.1c93	95 48		sta $48,x			sta 	esInt0,x
.1c95	98		tya				tya
.1c96	95 50		sta $50,x			sta 	esInt1,x
.1c98	68		pla				pla
.1c99	a8		tay				tay
.1c9a	60		rts				rts
.1c9b					UnaryInkey:
.1c9b	20 83 20	jsr $2083			jsr 	CheckRightParen
.1c9e	86 04		stx $04				stx 	temp0
.1ca0	a2 02		ldx #$02		ldx	#2
.1ca2	20 31 21	jsr $2131		jsr	deviceHandler
.1ca5	a6 04		ldx $04				ldx 	temp0
.1ca7	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit
.1caa	60		rts				rts
.1cab					UnaryGet:
.1cab	20 83 20	jsr $2083			jsr 	CheckRightParen
.1cae	86 04		stx $04				stx 	temp0
.1cb0					_UGLoop:
.1cb0	a2 02		ldx #$02		ldx	#2
.1cb2	20 31 21	jsr $2131		jsr	deviceHandler
.1cb5	c9 00		cmp #$00			cmp 	#0
.1cb7	f0 f7		beq $1cb0			beq 	_UGLoop
.1cb9	a6 04		ldx $04				ldx 	temp0
.1cbb	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit
.1cbe	60		rts				rts
.1cbf					UnarySys:
.1cbf	20 19 1a	jsr $1a19			jsr 	EvaluateInteger 				; get the address
.1cc2	20 83 20	jsr $2083			jsr 	CheckRightParen
.1cc5	20 26 11	jsr $1126			jsr 	TOSToTemp0 						; copy to temp0
.1cc8	8a		txa				txa
.1cc9	48		pha				pha
.1cca	98		tya				tya
.1ccb	48		pha				pha
.1ccc	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.1ccf	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.1cd2	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.1cd5	20 e4 1c	jsr $1ce4			jsr 	_CallTemp0
.1cd8	85 0c		sta $0c				sta 	tempShort 						; restore YX
.1cda	68		pla				pla
.1cdb	a8		tay				tay
.1cdc	68		pla				pla
.1cdd	aa		tax				tax
.1cde	a5 0c		lda $0c				lda 	tempShort
.1ce0	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit 					; return result.
.1ce3	60		rts				rts
.1ce4					_CallTemp0:
.1ce4	6c 04 00	jmp ($0004)			jmp 	(temp0)

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.1ce7					ExecChr:
.1ce7	20 21 1a	jsr $1a21			jsr 	EvaluateSmallInteger		; character number
.1cea	20 83 20	jsr $2083			jsr 	CheckRightParen				; right bracket
.1ced	98		tya				tya
.1cee	48		pha				pha
.1cef	8a		txa				txa 								; A = stack
.1cf0	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1cf2	a2 00		ldx #$00		ldx	#0
.1cf4	20 9c 23	jsr $239c		jsr	stringHandler
.1cf7	aa		tax				tax 								; X = stack
.1cf8	68		pla				pla
.1cf9	a8		tay				tay
.1cfa	60		rts				rts
.1cfb					ExecLeft:
.1cfb	20 0e 1a	jsr $1a0e			jsr 	EvaluateString 				; string to stack,X
.1cfe	20 90 20	jsr $2090			jsr 	CheckComma
.1d01	e8		inx				inx
.1d02	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1d04	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit
.1d07	e8		inx				inx
.1d08	20 21 1a	jsr $1a21			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1d0b					ExecSubstring:
.1d0b	ca		dex				dex 								; fix up X
.1d0c	ca		dex				dex
.1d0d	20 83 20	jsr $2083			jsr 	CheckRightParen 			; check closing right bracket.
.1d10	8a		txa				txa 								; do the substring and exit.
.1d11	a2 08		ldx #$08		ldx	#8
.1d13	20 9c 23	jsr $239c		jsr	stringHandler
.1d16	aa		tax				tax
.1d17	60		rts				rts
.1d18					ExecMid:
.1d18	20 0e 1a	jsr $1a0e			jsr 	EvaluateString 				; string to stack,X
.1d1b	20 90 20	jsr $2090			jsr 	CheckComma
.1d1e	e8		inx				inx
.1d1f	20 21 1a	jsr $1a21			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d22	c9 00		cmp #$00			cmp 	#0
.1d24	f0 15		beq $1d3b			beq 	_EMValue
.1d26	e8		inx				inx
.1d27	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d29	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit
.1d2c	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1d2e	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1d30	f0 d9		beq $1d0b			beq 	ExecSubString
.1d32	20 90 20	jsr $2090			jsr 	CheckComma
.1d35	20 21 1a	jsr $1a21			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1d38	4c 0b 1d	jmp $1d0b			jmp 	ExecSubString
.1d3b					_EMValue:
.1d3b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1d3d	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1d40					ExecRight:
.1d40	20 0e 1a	jsr $1a0e			jsr 	EvaluateString 				; string to stack,X
.1d43	20 90 20	jsr $2090			jsr 	CheckComma
.1d46	e8		inx				inx
.1d47	20 21 1a	jsr $1a21			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1d4a	ca		dex				dex
.1d4b	98		tya				tya
.1d4c	48		pha				pha
.1d4d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1d4f	85 04		sta $04				sta 	temp0
.1d51	b5 50		lda $50,x			lda 	esInt1,x
.1d53	85 05		sta $05				sta 	temp0+1
.1d55	a0 00		ldy #$00			ldy 	#0 							; point to length
.1d57	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.1d59	18		clc				clc 								; add 1.
.1d5a	69 01		adc #$01			adc 	#1
.1d5c	38		sec				sec
.1d5d	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1d5f	f0 02		beq $1d63			beq		_ERMake1 					; if zero, make it 1.
.1d61	b0 02		bcs $1d65			bcs		_EROkay
.1d63					_ERMake1:
.1d63	a9 01		lda #$01			lda 	#1 							; start position.
.1d65					_EROkay:
.1d65	e8		inx				inx 								; set start pos.
.1d66	95 48		sta $48,x			sta 	esInt0,x
.1d68	e8		inx				inx
.1d69	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1d6b	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit
.1d6e	68		pla				pla
.1d6f	a8		tay				tay
.1d70	4c 0b 1d	jmp $1d0b			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.1d73					MInt32And:
.1d73	b5 48		lda $48,x			lda 	esInt0,x
.1d75	35 49		and $49,x			and 	esInt0+1,x
.1d77	95 48		sta $48,x			sta 	esInt0,x
.1d79	b5 50		lda $50,x			lda 	esInt1,x
.1d7b	35 51		and $51,x			and 	esInt1+1,x
.1d7d	95 50		sta $50,x			sta 	esInt1,x
.1d7f	b5 58		lda $58,x			lda 	esInt2,x
.1d81	35 59		and $59,x			and 	esInt2+1,x
.1d83	95 58		sta $58,x			sta 	esInt2,x
.1d85	b5 60		lda $60,x			lda 	esInt3,x
.1d87	35 61		and $61,x			and 	esInt3+1,x
.1d89	95 60		sta $60,x			sta 	esInt3,x
.1d8b	60		rts				rts
.1d8c					MInt32Or:
.1d8c	b5 48		lda $48,x			lda 	esInt0,x
.1d8e	15 49		ora $49,x			ora 	esInt0+1,x
.1d90	95 48		sta $48,x			sta 	esInt0,x
.1d92	b5 50		lda $50,x			lda 	esInt1,x
.1d94	15 51		ora $51,x			ora 	esInt1+1,x
.1d96	95 50		sta $50,x			sta 	esInt1,x
.1d98	b5 58		lda $58,x			lda 	esInt2,x
.1d9a	15 59		ora $59,x			ora 	esInt2+1,x
.1d9c	95 58		sta $58,x			sta 	esInt2,x
.1d9e	b5 60		lda $60,x			lda 	esInt3,x
.1da0	15 61		ora $61,x			ora 	esInt3+1,x
.1da2	95 60		sta $60,x			sta 	esInt3,x
.1da4	60		rts				rts
.1da5					MInt32Xor:
.1da5	b5 48		lda $48,x			lda 	esInt0,x
.1da7	55 49		eor $49,x			eor 	esInt0+1,x
.1da9	95 48		sta $48,x			sta 	esInt0,x
.1dab	b5 50		lda $50,x			lda 	esInt1,x
.1dad	55 51		eor $51,x			eor 	esInt1+1,x
.1daf	95 50		sta $50,x			sta 	esInt1,x
.1db1	b5 58		lda $58,x			lda 	esInt2,x
.1db3	55 59		eor $59,x			eor 	esInt2+1,x
.1db5	95 58		sta $58,x			sta 	esInt2,x
.1db7	b5 60		lda $60,x			lda 	esInt3,x
.1db9	55 61		eor $61,x			eor 	esInt3+1,x
.1dbb	95 60		sta $60,x			sta 	esInt3,x
.1dbd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.1dbe					MInt32Compare:
.1dbe	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1dc0	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1dc2	d0 13		bne $1dd7			bne 	MInt32Compare2
.1dc4	b5 50		lda $50,x			lda 	esInt1,x
.1dc6	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1dc8	d0 0d		bne $1dd7			bne 	MInt32Compare2
.1dca	b5 58		lda $58,x			lda 	esInt2,x
.1dcc	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1dce	d0 07		bne $1dd7			bne 	MInt32Compare2
.1dd0	b5 60		lda $60,x			lda 	esInt3,x
.1dd2	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1dd4	d0 01		bne $1dd7			bne 	MInt32Compare2
.1dd6	60		rts				rts
.1dd7					MInt32Compare2:
.1dd7	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1dd9	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1ddb	b5 50		lda $50,x			lda		esInt1,x
.1ddd	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1ddf	b5 58		lda $58,x			lda		esInt2,x
.1de1	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1de3	b5 60		lda $60,x			lda		esInt3,x
.1de5	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1de7	50 02		bvc $1deb			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1de9	49 80		eor #$80			eor 	#$80
.1deb					_I32LNoOverflow
.1deb	30 03		bmi $1df0			bmi 	MInt32CLess					; if -ve then return $FF
.1ded	a9 01		lda #$01			lda 	#$01						; else return $01
.1def	60		rts				rts
.1df0					MInt32CLess:
.1df0	a9 ff		lda #$ff			lda 	#$FF
.1df2	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.1df3					MInt32SDivide:
.1df3	98		tya				tya  								; save Y, which is the count of negations
.1df4	48		pha				pha
.1df5	a0 00		ldy #$00			ldy 	#0 							; zero count
.1df7	20 0f 1e	jsr $1e0f			jsr 	_MInt32SRemSign 			; unsign TOS
.1dfa	e8		inx				inx 								; unsign TOS+1
.1dfb	20 0f 1e	jsr $1e0f			jsr 	_MInt32SRemSign
.1dfe	ca		dex				dex
.1dff	98		tya				tya 								; save sign count on stack
.1e00	48		pha				pha
.1e01	20 18 1e	jsr $1e18			jsr 	MInt32UDivide 				; unsigned division
.1e04	68		pla				pla 								; get sign count back
.1e05	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1e07	f0 03		beq $1e0c			beq 	_I32SNoNeg
.1e09	20 ca 1f	jsr $1fca			jsr 	MInt32Negate
.1e0c					_I32SNoNeg:
.1e0c	68		pla				pla 								; restoe Y and exit
.1e0d	a8		tay				tay
.1e0e	60		rts				rts
.1e0f					_MInt32SRemSign:
.1e0f	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1e11	10 04		bpl $1e17			bpl 	_MInt32SRSExit
.1e13	c8		iny				iny 								; increment the sign count
.1e14	20 ca 1f	jsr $1fca			jsr 	MInt32Negate 				; negate the value.
.1e17					_MInt32SRSExit:
.1e17	60		rts				rts
.1e18					MInt32UDivide:
.1e18	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1e1a	15 51		ora $51,x			ora 	esInt1+1,x
.1e1c	15 52		ora $52,x			ora 	esInt1+2,x
.1e1e	15 53		ora $53,x			ora 	esInt1+3,x
.1e20	f0 4a		beq $1e6c			beq 	_MInt32DZero
.1e22	e8		inx				inx 								; clear A
.1e23	e8		inx				inx
.1e24	20 10 20	jsr $2010			jsr 	MInt32False
.1e27	ca		dex				dex
.1e28	ca		dex				dex
.1e29	98		tya				tya 								; save Y on the stack
.1e2a	48		pha				pha
.1e2b	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1e2d					_MInt32UDLoop:
.1e2d	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1e2f	36 50		rol $50,x			rol 	esInt1,x
.1e31	36 58		rol $58,x			rol 	esInt2,x
.1e33	36 60		rol $60,x			rol 	esInt3,x
.1e35	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1e37	36 52		rol $52,x			rol 	esInt1+2,x
.1e39	36 5a		rol $5a,x			rol 	esInt2+2,x
.1e3b	36 62		rol $62,x			rol 	esInt3+2,x
.1e3d	38		sec				sec 								; calculate A-M saving result on the stack
.1e3e	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e40	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1e42	48		pha				pha
.1e43	b5 52		lda $52,x			lda 	esInt1+2,x
.1e45	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1e47	48		pha				pha
.1e48	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1e4a	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1e4c	48		pha				pha
.1e4d	b5 62		lda $62,x			lda 	esInt3+2,x
.1e4f	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1e51	90 10		bcc $1e63			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1e53	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1e55	68		pla				pla
.1e56	95 5a		sta $5a,x			sta 	esInt2+2,x
.1e58	68		pla				pla
.1e59	95 52		sta $52,x			sta 	esInt1+2,x
.1e5b	68		pla				pla
.1e5c	95 4a		sta $4a,x			sta 	esInt0+2,x
.1e5e	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1e60	4c 66 1e	jmp $1e66			jmp 	_MInt32Next 					; do the next iteration
.1e63					_MInt32NoSubtract:
.1e63	68		pla				pla
.1e64	68		pla				pla
.1e65	68		pla				pla
.1e66					_MInt32Next:
.1e66	88		dey				dey 								; do this 32 times.
.1e67	d0 c4		bne $1e2d			bne 	_MInt32UDLoop
.1e69	68		pla				pla 								; restore Y and exit
.1e6a	a8		tay				tay
.1e6b	60		rts				rts
.1e6c					_MInt32DZero:
.1e6c	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1e6e	20 3e 21	jsr $213e			jsr 	ErrorHandler
.1e71					MInt32Modulus:
.1e71	20 18 1e	jsr $1e18			jsr 	MInt32UDivide 				; do the division.
.1e74	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1e76	95 60		sta $60,x			sta 	esInt3,x
.1e78	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1e7a	95 58		sta $58,x			sta 	esInt2,x
.1e7c	b5 52		lda $52,x			lda 	esInt1+2,x
.1e7e	95 50		sta $50,x			sta 	esInt1,x
.1e80	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e82	95 48		sta $48,x			sta 	esInt0,x
.1e84	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0af6					fs32Length:
>0af6							.fill 	1
.1e85					MInt32FromString:
.1e85	85 0c		sta $0c				sta 	tempShort 					; save base
.1e87	98		tya				tya
.1e88	48		pha				pha
.1e89	a0 00		ldy #$00			ldy 	#0 							; get length
.1e8b	b1 04		lda ($04),y			lda 	(temp0),y
.1e8d	8d f6 0a	sta $0af6			sta 	fs32Length
.1e90	f0 65		beq $1ef7			beq 	_I32FSFail2					; fail if length zero.
.1e92	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.1e94	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1e96	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1e98	d0 09		bne $1ea3			bne 	_I32FSNotNegative
.1e9a	ad f6 0a	lda $0af6			lda 	fs32Length 					; get length back.
.1e9d	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a '-; so fail.'
.1e9f	f0 56		beq $1ef7			beq 	_I32FSFail2
.1ea1	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.1ea3					_I32FSNotNegative:
.1ea3	a5 0c		lda $0c				lda 	tempShort 					; get the base back.
.1ea5	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.1ea7	d0 02		bne $1eab			bne 	_I32FSNN2
.1ea9	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1eab					_I32FSNN2:
.1eab	48		pha				pha 								; save base + final sign on stack.
.1eac	20 10 20	jsr $2010			jsr 	MInt32False 				; zero the return value.
.1eaf					_I32FSMainLoop:
.1eaf	68		pla				pla 								; get the base back into tempshort
.1eb0	48		pha				pha
.1eb1	29 7f		and #$7f			and 	#$7F
.1eb3	85 0c		sta $0c				sta 	tempShort
.1eb5	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1eb7	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1eb9	90 02		bcc $1ebd			bcc 	_I32FSNotLC
.1ebb	e9 20		sbc #$20			sbc 	#32
.1ebd					_I32FSNotLC:
.1ebd	38		sec				sec 								; subtract 48 (ASCII "0")
.1ebe	e9 30		sbc #$30			sbc 	#"0"
.1ec0	90 34		bcc $1ef6			bcc 	_I32FSFail 					; nothing more to do.
.1ec2	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1ec4	90 06		bcc $1ecc			bcc 	_I32FSValidate
.1ec6	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1ec8	90 2c		bcc $1ef6			bcc 	_I32FSFail
.1eca	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1ecc					_I32FSValidate:
.1ecc	c5 0c		cmp $0c				cmp 	tempShort 					; compare against the base.
.1ece	b0 26		bcs $1ef6			bcs 	_I32FSFail 					; sorry, too large for this base.
.1ed0	48		pha				pha 								; save the new digit value.
.1ed1	e8		inx				inx 								; put base into next slot.
.1ed2	a5 0c		lda $0c				lda 	tempShort
.1ed4	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit
.1ed7	ca		dex				dex
.1ed8	20 2f 1f	jsr $1f2f			jsr 	MInt32Multiply 				; multiply current by the base
.1edb	e8		inx				inx
.1edc	68		pla				pla  								; put additive into next slot
.1edd	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit
.1ee0	ca		dex				dex
.1ee1	20 fb 1e	jsr $1efb			jsr 	MInt32Add 					; and add it
.1ee4	c8		iny				iny 								; look at next character
.1ee5	cc f6 0a	cpy $0af6			cpy 	fs32Length 					; until > length.
.1ee8	f0 c5		beq $1eaf			beq 	_I32FSMainLoop
.1eea	90 c3		bcc $1eaf			bcc 	_I32FSMainLoop
.1eec					_I32FSDone:
.1eec	68		pla				pla 								; get base/final sign back
.1eed	10 03		bpl $1ef2			bpl 	_I32FSNN3
.1eef	20 ca 1f	jsr $1fca			jsr 	MInt32Negate 				; negate the result.
.1ef2					_I32FSNN3:
.1ef2	68		pla				pla
.1ef3	a8		tay				tay
.1ef4	38		sec				sec
.1ef5	60		rts				rts
.1ef6					_I32FSFail:
.1ef6	68		pla				pla
.1ef7					_I32FSFail2:
.1ef7	68		pla				pla
.1ef8	a8		tay				tay
.1ef9	18		clc				clc
.1efa	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.1efb					MInt32Add:
.1efb	18		clc				clc
.1efc	b5 48		lda $48,x			lda 	esInt0,x
.1efe	75 49		adc $49,x			adc 	esInt0+1,x
.1f00	95 48		sta $48,x			sta 	esInt0,x
.1f02	b5 50		lda $50,x			lda 	esInt1,x
.1f04	75 51		adc $51,x			adc 	esInt1+1,x
.1f06	95 50		sta $50,x			sta 	esInt1,x
.1f08	b5 58		lda $58,x			lda 	esInt2,x
.1f0a	75 59		adc $59,x			adc 	esInt2+1,x
.1f0c	95 58		sta $58,x			sta 	esInt2,x
.1f0e	b5 60		lda $60,x			lda 	esInt3,x
.1f10	75 61		adc $61,x			adc 	esInt3+1,x
.1f12	95 60		sta $60,x			sta 	esInt3,x
.1f14	60		rts				rts
.1f15					MInt32Sub:
.1f15	38		sec				sec
.1f16	b5 48		lda $48,x			lda 	esInt0,x
.1f18	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1f1a	95 48		sta $48,x			sta 	esInt0,x
.1f1c	b5 50		lda $50,x			lda 	esInt1,x
.1f1e	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1f20	95 50		sta $50,x			sta 	esInt1,x
.1f22	b5 58		lda $58,x			lda 	esInt2,x
.1f24	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1f26	95 58		sta $58,x			sta 	esInt2,x
.1f28	b5 60		lda $60,x			lda 	esInt3,x
.1f2a	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1f2c	95 60		sta $60,x			sta 	esInt3,x
.1f2e	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.1f2f					MInt32Multiply:
.1f2f	e8		inx				inx 								; copy 2nd -> 3rd
.1f30	20 55 1f	jsr $1f55			jsr 	MInt32CopyUp
.1f33	ca		dex				dex
.1f34	20 55 1f	jsr $1f55			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1f37	20 10 20	jsr $2010			jsr 	MInt32False 					; zero 1st.
.1f3a					_I32Loop:
.1f3a	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1f3c	29 01		and #$01			and 	#1
.1f3e	f0 03		beq $1f43			beq 	_I32NoAdd 					; if set
.1f40	20 fb 1e	jsr $1efb			jsr 	MInt32Add 					; add 2nd to 1st.
.1f43					_I32NoAdd:
.1f43	e8		inx				inx 								; shift 2nd left
.1f44	20 25 20	jsr $2025			jsr 	MInt32ShiftLeft
.1f47	e8		inx				inx  								; shift 3rd right
.1f48	20 2e 20	jsr $202e			jsr 	MInt32ShiftRight
.1f4b	20 37 20	jsr $2037			jsr 	MInt32Zero 					; check if zero.
.1f4e	08		php				php 								; save status bits
.1f4f	ca		dex				dex 	 							; point back to 1st
.1f50	ca		dex				dex
.1f51	28		plp				plp 								; get status bits
.1f52	d0 e6		bne $1f3a			bne 	_I32Loop 					; if non-zero keep going.
.1f54	60		rts				rts
.1f55					MInt32CopyUp:
.1f55	b5 48		lda $48,x			lda 	esInt0,x
.1f57	95 49		sta $49,x			sta 	esInt0+1,x
.1f59	b5 50		lda $50,x			lda 	esInt1,x
.1f5b	95 51		sta $51,x			sta 	esInt1+1,x
.1f5d	b5 58		lda $58,x			lda 	esInt2,x
.1f5f	95 59		sta $59,x			sta 	esInt2+1,x
.1f61	b5 60		lda $60,x			lda 	esInt3,x
.1f63	95 61		sta $61,x			sta 	esInt3+1,x
.1f65	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0af7					MCharCount:	.fill 	1						; count of converted characters
.1f66					MInt32ToString:
.1f66	48		pha				pha 								; save base
.1f67	85 0c		sta $0c				sta 	tempShort 					; save target base.
.1f69	a9 00		lda #$00			lda 	#0
.1f6b	8d f7 0a	sta $0af7			sta 	MCharCount 					; clear character count to 0
.1f6e	98		tya				tya
.1f6f	48		pha				pha
.1f70	a5 0c		lda $0c				lda 	tempShort 					; check if we are signed conversion
.1f72	10 10		bpl $1f84			bpl 	_I32TSUnsigned
.1f74	48		pha				pha 								; save base on stack.
.1f75	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1f77	10 08		bpl $1f81			bpl 	_I32TSNoFlip
.1f79	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1f7b	20 b7 1f	jsr $1fb7			jsr 	MI32WriteCharacter
.1f7e	20 ca 1f	jsr $1fca			jsr 	MInt32Negate 				; negate the value.
.1f81					_I32TSNoFlip:
.1f81	68		pla				pla 								; get the base back
.1f82	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1f84					_I32TSUnsigned:
.1f84	20 92 1f	jsr $1f92			jsr 	MI32DivideWrite 			; recursive code to output string.
.1f87	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1f89	ad f7 0a	lda $0af7			lda 	MCharCount
.1f8c	91 04		sta ($04),y			sta 	(temp0),y
.1f8e	68		pla				pla
.1f8f	a8		tay				tay
.1f90	68		pla				pla
.1f91	60		rts				rts
.1f92					MI32DivideWrite:
.1f92	48		pha				pha 								; save the divisor/base
.1f93	e8		inx				inx 								; write in the dividing position.
.1f94	20 1f 20	jsr $201f			jsr 	MInt32Set8Bit
.1f97	ca		dex				dex
.1f98	20 18 1e	jsr $1e18			jsr 	MInt32UDivide 				; divide number by base.
.1f9b	68		pla				pla 								; get the base into Y
.1f9c	a8		tay				tay
.1f9d	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1f9f	48		pha				pha
.1fa0	20 37 20	jsr $2037			jsr 	MInt32Zero 					; is the result zero ?
.1fa3	f0 04		beq $1fa9			beq 	_I32NoRecurse 				; if so, don't recurse.
.1fa5	98		tya				tya 								; put base into A
.1fa6	20 92 1f	jsr $1f92			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1fa9					_I32NoRecurse:
.1fa9	68		pla				pla 								; get the remainder back
.1faa	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1fac	90 02		bcc $1fb0			bcc 	_I32NotHex
.1fae	69 06		adc #$06			adc 	#7-1
.1fb0					_I32NotHex:
.1fb0	18		clc				clc 								; make it ASCII
.1fb1	69 30		adc #$30			adc 	#48
.1fb3	20 b7 1f	jsr $1fb7			jsr 	MI32WriteCharacter 			; write the character out
.1fb6	60		rts				rts 								; and exit.
.1fb7					MI32WriteCharacter:
.1fb7	ee f7 0a	inc $0af7			inc 	MCharCount 					; bump count (space for leading count)
.1fba	ac f7 0a	ldy $0af7			ldy 	MCharCount 					; get position
.1fbd	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1fbf	c8		iny				iny
.1fc0	a9 00		lda #$00			lda 	#0
.1fc2	91 04		sta ($04),y			sta 	(temp0),y
.1fc4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0af8					MSeed32:	.fill 	4							; random number seed.
.1fc5					MInt32Absolute:
.1fc5	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1fc7	30 01		bmi $1fca			bmi 	MInt32Negate
.1fc9	60		rts				rts
.1fca					MInt32Negate:
.1fca	38		sec				sec
.1fcb	a9 00		lda #$00			lda 	#0
.1fcd	f5 48		sbc $48,x			sbc 	esInt0,x
.1fcf	95 48		sta $48,x			sta 	esInt0,x
.1fd1	a9 00		lda #$00			lda 	#0
.1fd3	f5 50		sbc $50,x			sbc 	esInt1,x
.1fd5	95 50		sta $50,x			sta 	esInt1,x
.1fd7	a9 00		lda #$00			lda 	#0
.1fd9	f5 58		sbc $58,x			sbc 	esInt2,x
.1fdb	95 58		sta $58,x			sta 	esInt2,x
.1fdd	a9 00		lda #$00			lda 	#0
.1fdf	f5 60		sbc $60,x			sbc 	esInt3,x
.1fe1	95 60		sta $60,x			sta 	esInt3,x
.1fe3	60		rts				rts
.1fe4					MInt32Not:
.1fe4	b5 48		lda $48,x			lda 	esInt0,x
.1fe6	49 ff		eor #$ff			eor 	#$FF
.1fe8	95 48		sta $48,x			sta 	esInt0,x
.1fea	b5 50		lda $50,x			lda 	esInt1,x
.1fec	49 ff		eor #$ff			eor 	#$FF
.1fee	95 50		sta $50,x			sta 	esInt1,x
.1ff0	b5 58		lda $58,x			lda 	esInt2,x
.1ff2	49 ff		eor #$ff			eor 	#$FF
.1ff4	95 58		sta $58,x			sta 	esInt2,x
.1ff6	b5 60		lda $60,x			lda 	esInt3,x
.1ff8	49 ff		eor #$ff			eor 	#$FF
.1ffa	95 60		sta $60,x			sta 	esInt3,x
.1ffc	60		rts				rts
.1ffd					MInt32Sign:
.1ffd	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1fff	30 0b		bmi $200c			bmi 	MInt32True 					; if set return -1 (true)
.2001	20 37 20	jsr $2037			jsr 	MInt32Zero 					; is it zero ?
.2004	f0 0a		beq $2010			beq 	MInt32False 					; if zero return 0 (false)
.2006	20 10 20	jsr $2010			jsr 	MInt32False 					; > 0 return 1
.2009	f6 48		inc $48,x			inc 	esInt0,x
.200b	60		rts				rts
.200c					MInt32True:
.200c	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.200e	d0 02		bne $2012			bne 	MInt32WriteAll
.2010					MInt32False:
.2010	a9 00		lda #$00			lda 	#0
.2012					MInt32WriteAll:
.2012	95 48		sta $48,x			sta 	esInt0,x
.2014					MInt32Write123:
.2014	95 50		sta $50,x			sta 	esInt1,x
.2016	95 58		sta $58,x			sta 	esInt2,x
.2018	95 60		sta $60,x			sta 	esInt3,x
.201a	a9 00		lda #$00			lda 	#$00						; and make it an integer
.201c	95 40		sta $40,x			sta 	esType,x
.201e	60		rts				rts
.201f					MInt32Set8Bit:
.201f	95 48		sta $48,x			sta 	esInt0,x
.2021	a9 00		lda #$00			lda 	#0
.2023	f0 ef		beq $2014			beq		MInt32Write123
.2025					MInt32ShiftLeft:
.2025	16 48		asl $48,x			asl 	esInt0,x
.2027	36 50		rol $50,x			rol	 	esInt1,x
.2029	36 58		rol $58,x			rol	 	esInt2,x
.202b	36 60		rol $60,x			rol	 	esInt3,x
.202d	60		rts				rts
.202e					MInt32ShiftRight:
.202e	56 60		lsr $60,x			lsr 	esInt3,x
.2030	76 58		ror $58,x			ror 	esInt2,x
.2032	76 50		ror $50,x			ror 	esInt1,x
.2034	76 48		ror $48,x			ror 	esInt0,x
.2036	60		rts				rts
.2037					MInt32Zero:
.2037	b5 48		lda $48,x			lda 	esInt0,x
.2039	15 50		ora $50,x			ora 	esInt1,x
.203b	15 58		ora $58,x			ora 	esInt2,x
.203d	15 60		ora $60,x			ora 	esInt3,x
.203f	60		rts				rts
.2040					MInt32Random:
.2040	98		tya				tya
.2041	48		pha				pha
.2042	a0 07		ldy #$07			ldy 	#7
.2044	ad f8 0a	lda $0af8			lda 	MSeed32+0
.2047	d0 03		bne $204c			bne 	_Random1
.2049	a8		tay				tay
.204a	a9 aa		lda #$aa			lda		#$AA
.204c					_Random1:
.204c	0a		asl a				asl 	a
.204d	2e f9 0a	rol $0af9			rol 	MSeed32+1
.2050	2e fa 0a	rol $0afa			rol 	MSeed32+2
.2053	2e fb 0a	rol $0afb			rol 	MSeed32+3
.2056	90 02		bcc $205a			bcc 	_Random2
.2058	49 c5		eor #$c5			eor 	#$C5
.205a					_Random2:
.205a	88		dey				dey
.205b	d0 ef		bne $204c			bne 	_Random1
.205d	8d f8 0a	sta $0af8			sta 	MSeed32+0
.2060	95 48		sta $48,x			sta 	esInt0,x
.2062	ad f9 0a	lda $0af9			lda 	MSeed32+1
.2065	95 50		sta $50,x			sta 	esInt1,x
.2067	ad fa 0a	lda $0afa			lda 	MSeed32+2
.206a	95 58		sta $58,x			sta 	esInt2,x
.206c	ad fb 0a	lda $0afb			lda 	MSeed32+3
.206f	95 60		sta $60,x			sta 	esInt3,x
.2071	68		pla				pla
.2072	a8		tay				tay
.2073	a9 00		lda #$00			lda 	#0
.2075	95 40		sta $40,x			sta 	esType,x
.2077	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2078					CheckToken:
.2078	d1 02		cmp ($02),y			cmp 	(codePtr),y
.207a	d0 02		bne $207e			bne 	_CTError
.207c	c8		iny				iny
.207d	60		rts				rts
.207e					_CTError:
.207e	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2080	20 3e 21	jsr $213e			jsr 	ErrorHandler
.2083					CheckRightParen:
.2083	b1 02		lda ($02),y			lda 	(codePtr),y
.2085	c8		iny				iny
.2086	c9 c4		cmp #$c4			cmp 	#TKW_RPAREN
.2088	d0 01		bne $208b			bne 	_CRPError
.208a	60		rts				rts
.208b					_CRPError:
.208b	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.208d	20 3e 21	jsr $213e			jsr 	ErrorHandler
.2090					CheckComma:
.2090	b1 02		lda ($02),y			lda 	(codePtr),y
.2092	c8		iny				iny
.2093	c9 c6		cmp #$c6			cmp 	#TKW_COMMA
.2095	d0 01		bne $2098			bne 	_CCError
.2097	60		rts				rts
.2098					_CCError:
.2098	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.209a	20 3e 21	jsr $213e			jsr 	ErrorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2689					ScanForward:
.2689	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.268b	86 07		stx $07				stx 	temp1+1
.268d	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.268f	85 08		sta $08				sta 	temp2
.2691	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2693	c8		iny				iny
.2694	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.2696	d0 08		bne $26a0			bne 	_SFNoCheck 					; if so, check token against entered values.
.2698	c5 06		cmp $06				cmp 	temp1
.269a	f0 24		beq $26c0			beq 	_SFExit
.269c	c5 07		cmp $07				cmp 	temp1+1
.269e	f0 20		beq $26c0			beq 	_SFExit
.26a0					_SFNoCheck:
.26a0	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.26a2	90 ed		bcc $2691			bcc 	_SFLoop
.26a4	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.26a6	90 19		bcc $26c1			bcc 	_SFSpecials
.26a8	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.26aa	90 e5		bcc $2691			bcc 	_SFLoop
.26ac	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.26ae	b0 e1		bcs $2691			bcs 	_SFLoop
.26b0	aa		tax				tax  								; token in X, and look up the adjuster.
.26b1	bd 01 1a	lda $1a01,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.26b4	38		sec				sec 								; convert to an offset
.26b5	e9 81		sbc #$81			sbc 	#$81
.26b7	18		clc				clc 								; add to depth
.26b8	65 08		adc $08				adc 	temp2
.26ba	85 08		sta $08				sta 	temp2
.26bc	10 d3		bpl $2691			bpl 	_SFLoop 					; +ve okay to continue
.26be	30 2a		bmi $26ea			bmi 	_SFError 					; if gone -ve then we have a nesting error
.26c0	60		rts		_SFExit:rts
.26c1					_SFSpecials:
.26c1	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.26c3	f0 14		beq $26d9			beq 	_SFNextLine
.26c5	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.26c7	f0 26		beq $26ef			beq 	_SFFloatSkip
.26c9	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.26cb	f0 04		beq $26d1			beq 	_SFSkipString
.26cd	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.26ce	4c 91 26	jmp $2691			jmp 	_SFLoop 					; token.
.26d1					_SFSkipString:
.26d1	98		tya				tya
.26d2	38		sec				sec
.26d3	71 02		adc ($02),y			adc 	(codePtr),y
.26d5	a8		tay				tay
.26d6	4c 91 26	jmp $2691			jmp 	_SFLoop
.26d9					_SFNextLine:
.26d9	a0 00		ldy #$00			ldy 	#0 							; get offset
.26db	b1 02		lda ($02),y			lda 	(codePtr),y
.26dd	18		clc				clc 								; add to code pointer.
.26de	65 02		adc $02				adc 	codePtr
.26e0	85 02		sta $02				sta 	codePtr
.26e2	90 02		bcc $26e6			bcc		_SFNLNoCarry
.26e4	e6 03		inc $03				inc 	codePtr+1
.26e6					_SFNLNoCarry:
.26e6	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.26e8	d0 a7		bne $2691			bne		_SFLoop 					; no go round again
.26ea					_SFError:
.26ea	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.26ec	20 3e 21	jsr $213e			jsr 	ErrorHandler
.26ef					_SFFloatSkip:
.26ef	4c de 13	jmp $13de			jmp 	Unimplemented

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.209d					RSReset:
.209d	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.209f	85 78		sta $78				sta 	rsPointer
.20a1	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.20a3	85 79		sta $79				sta 	1+(rsPointer)
.20a5	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.20a7	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.20aa	60		rts				rts
.20ab					RSClaim:
.20ab	84 0c		sty $0c				sty 	tempShort 					; preserve Y
.20ad	48		pha				pha 								; save marker on stack.
.20ae	8a		txa				txa 								; get bytes required.
.20af	38		sec				sec
.20b0	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.20b2	65 78		adc $78				adc 	rsPointer
.20b4	85 78		sta $78				sta 	rsPointer
.20b6	a5 79		lda $79				lda 	rsPointer+1
.20b8	69 ff		adc #$ff			adc 	#$FF
.20ba	85 79		sta $79				sta 	rsPointer+1
.20bc	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.20be	90 08		bcc $20c8			bcc 	_RSCOverflow
.20c0	68		pla				pla 								; get marker back
.20c1	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.20c3	91 78		sta ($78),y			sta 	(rsPointer),y
.20c5	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit
.20c7	60		rts				rts
.20c8					_RSCOverflow:
.20c8	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.20ca	20 3e 21	jsr $213e			jsr 	ErrorHandler
.20cd					RSFree:
.20cd	18		clc				clc
.20ce	65 78		adc $78				adc 	rsPointer
.20d0	85 78		sta $78				sta 	rsPointer
.20d2	90 02		bcc $20d6			bcc 	_RSFExit
.20d4	e6 79		inc $79				inc 	rsPointer+1
.20d6					_RSFExit:
.20d6	60		rts				rts
.20d7					RSSavePosition:
.20d7	84 0c		sty $0c				sty 	tempShort 					; save Y position
.20d9	a8		tay				tay 								; this is where we write it.
.20da	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.20dc	91 78		sta ($78),y			sta 	(rsPointer),y
.20de	c8		iny				iny
.20df	a5 03		lda $03				lda 	codePtr+1
.20e1	91 78		sta ($78),y			sta 	(rsPointer),y
.20e3	c8		iny				iny
.20e4	a5 0c		lda $0c				lda 	tempShort 					; write the Y position out.
.20e6	91 78		sta ($78),y			sta 	(rsPointer),y
.20e8	a8		tay				tay 								; fix Y back again to original value
.20e9	60		rts				rts
.20ea					RSLoadPosition:
.20ea	a8		tay				tay
.20eb	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.20ed	85 02		sta $02				sta 	codePtr
.20ef	c8		iny				iny
.20f0	b1 78		lda ($78),y			lda 	(rsPointer),y
.20f2	85 03		sta $03				sta 	codePtr+1
.20f4	c8		iny				iny
.20f5	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.20f7	a8		tay				tay 								; to Y
.20f8	60		rts				rts

;******  Return to file: main/main.asm

.20f9					mainHandler:
.20f9	7c fc 20	jmp ($20fc,x)			jmp 	(mainVectors,x)
.20fc					mainVectors:
>20fc	34 1a					.word LinkEvaluate         ; index 0
>20fe	3a 1a					.word LinkEvaluateInteger  ; index 2
>2100	40 1a					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: basic.asm

.2102					section_end_main:
.2102					section_start_assembler:

;******  Processing file: assembler/assembler.asm

.2102					assemblerHandler:
.2102	7c 05 21	jmp ($2105,x)			jmp 	(assemblerVectors,x)
.2105					assemblerVectors:

;******  Return to file: basic.asm

.2105					section_end_assembler:
.2105					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/x16/x16io.asm

.2105					IONewLine:
.2105	48		pha				pha
.2106	a9 0d		lda #$0d			lda 	#13
.2108	20 15 21	jsr $2115			jsr 	IOPrintChar
.210b	68		pla				pla
.210c	60		rts				rts
.210d					IOTab:
.210d	48		pha				pha
.210e	a9 20		lda #$20			lda 	#32
.2110	20 15 21	jsr $2115			jsr 	IOPrintChar
.2113	68		pla				pla
.2114	60		rts				rts
.2115					IOPrintChar:
.2115	aa		tax				tax
.2116	5a		phy				phy
.2117	8a		txa				txa
.2118	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.211b	7a		ply				ply
.211c	60		rts				rts
.211d					IOInkey:
.211d	98		tya				tya
.211e	48		pha				pha
.211f	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.2122	85 0c		sta $0c				sta 	tempShort
.2124	68		pla				pla
.2125	a8		tay				tay
.2126	a5 0c		lda $0c				lda 	tempShort
.2128	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/x16/x16timer.asm

.2129					IOReadTimer:
.2129	20 de ff	jsr $ffde			jsr 	$FFDE
.212c	48		pha				pha
.212d	8a		txa				txa
.212e	a8		tay				tay
.212f	68		pla				pla
.2130	60		rts				rts

;******  Return to file: device/device.asm

.2131					deviceHandler:
.2131	7c 34 21	jmp ($2134,x)			jmp 	(deviceVectors,x)
.2134					deviceVectors:
>2134	05 21					.word IONewLine            ; index 0
>2136	1d 21					.word IOInkey              ; index 2
>2138	15 21					.word IOPrintChar          ; index 4
>213a	0d 21					.word IOTab                ; index 6
>213c	29 21					.word IOReadTimer          ; index 8

;******  Return to file: basic.asm

.213e					section_end_device:
.213e					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.213e					ErrorHandler:
.213e	a9 ee		lda #$ee			lda 	#$EE
.2140	a8		tay				tay
>2141	db						.byte 	$DB
.2142	4c 42 21	jmp $2142	_EHHalt:jmp 	_EHHalt

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.2145					section_end_error:
.2145					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.2145					floatingpointHandler:
.2145	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.2147	20 3e 21	jsr $213e			jsr 	ErrorHandler

;******  Return to file: basic.asm

.214a					section_end_floatingpoint:
.214a					section_start_interaction:

;******  Processing file: interaction/interaction.asm

.214a					interactionHandler:
.214a	7c 4d 21	jmp ($214d,x)			jmp 	(interactionVectors,x)
.214d					interactionVectors:

;******  Return to file: basic.asm

.214d					section_end_interaction:
.214d					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.214d					StringChrs:
.214d	aa		tax				tax 								; set up stack
.214e	a9 02		lda #$02			lda 	#2
.2150	20 07 22	jsr $2207			jsr 	AllocateSoftString
.2153	98		tya				tya
.2154	20 2d 22	jsr $222d			jsr 	WriteSoftString
.2157	20 5c 21	jsr $215c			jsr 	ReturnSoftString
.215a	8a		txa				txa
.215b	60		rts				rts
.215c					ReturnSoftString:
.215c	a5 7a		lda $7a				lda 	softMemAlloc
.215e	95 48		sta $48,x			sta 	esInt0,x
.2160	a5 7b		lda $7b				lda 	softMemAlloc+1
.2162	95 50		sta $50,x			sta 	esInt1,x
.2164	a9 00		lda #$00			lda 	#0
.2166	95 58		sta $58,x			sta 	esInt2,x
.2168	95 60		sta $60,x			sta 	esInt3,x
.216a	a9 40		lda #$40			lda 	#$40
.216c	95 40		sta $40,x			sta 	esType,x
.216e	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.216f					STRCompare:
.216f	48		pha				pha 								; save A
.2170	aa		tax				tax 								; put stack pos in X
.2171	98		tya				tya
.2172	48		pha				pha
.2173	20 a7 21	jsr $21a7			jsr 	CopyStringPair
.2176	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.2178	b1 04		lda ($04),y			lda 	(temp0),y
.217a	d1 06		cmp ($06),y			cmp 	(temp1),y
.217c	90 02		bcc $2180			bcc 	_SCNotSmaller
.217e	b1 06		lda ($06),y			lda 	(temp1),y
.2180					_SCNotSmaller:
.2180	aa		tax				tax 								; put that in X. We compare this many chars first.
.2181					_SCCompareLoop:
.2181	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.2183	f0 0c		beq $2191			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.2185	ca		dex				dex 								; decrement chars to compare.
.2186	c8		iny				iny 								; move to next character
.2187	38		sec				sec 								; calculate s1[y]-s2[y]
.2188	b1 04		lda ($04),y			lda 	(temp0),y
.218a	f1 06		sbc ($06),y			sbc 	(temp1),y
.218c	d0 0a		bne $2198			bne 	_SCReturnResult 			; if different return sign of A
.218e	4c 81 21	jmp $2181			jmp 	_SCCompareLoop
.2191					_SCSameToEndShortest
.2191	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.2193	38		sec				sec
.2194	b1 04		lda ($04),y			lda 	(temp0),y
.2196	f1 06		sbc ($06),y			sbc 	(temp1),y
.2198					_SCReturnResult:
.2198	08		php				php 								; set return to zero preserving PSW.
.2199	a2 00		ldx #$00			ldx 	#0
.219b	28		plp				plp
.219c	f0 05		beq $21a3			beq 	_SCExit 					; two values equal, then exit
.219e	ca		dex				dex 								; X = $FF
.219f	90 02		bcc $21a3			bcc 	_SCExit 					; if 1st < 2nd then -1
.21a1	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.21a3					_SCExit:
.21a3	68		pla				pla
.21a4	a8		tay				tay
.21a5	68		pla				pla
.21a6	60		rts				rts
.21a7					CopyStringPair:
.21a7	b5 49		lda $49,x			lda 	esInt0+1,x
.21a9	85 06		sta $06				sta 	temp1
.21ab	b5 51		lda $51,x			lda 	esInt1+1,x
.21ad	85 07		sta $07				sta 	temp1+1
.21af					CopyStringTop:
.21af	b5 48		lda $48,x			lda 	esInt0,x
.21b1	85 04		sta $04				sta 	temp0
.21b3	b5 50		lda $50,x			lda 	esInt1,x
.21b5	85 05		sta $05				sta 	temp0+1
.21b7	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.21b8					StringConcat:
.21b8	aa		tax				tax									; stack pos in X
.21b9	98		tya				tya
.21ba	48		pha				pha
.21bb	20 a7 21	jsr $21a7			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.21be	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.21bf	a0 00		ldy #$00			ldy 	#0
.21c1	b1 04		lda ($04),y			lda 	(temp0),y
.21c3	71 06		adc ($06),y			adc 	(temp1),y
.21c5	b0 1c		bcs $21e3			bcs 	_SCError 					; just too many characters here.
.21c7	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.21c9	b0 18		bcs $21e3			bcs 	_SCError
.21cb	20 07 22	jsr $2207			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.21ce	20 fe 21	jsr $21fe			jsr 	CopySoftToStack 			; copy that to the stack.
.21d1	20 e8 21	jsr $21e8			jsr 	SCCopyTemp0 				; copy temp0
.21d4	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.21d6	85 04		sta $04				sta 	temp0
.21d8	a5 07		lda $07				lda 	temp1+1
.21da	85 05		sta $05				sta 	temp0+1
.21dc	20 e8 21	jsr $21e8			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.21df	68		pla				pla
.21e0	a8		tay				tay
.21e1	8a		txa				txa 								; and A
.21e2	60		rts				rts
.21e3					_SCError:
.21e3	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.21e5	20 3e 21	jsr $213e			jsr 	ErrorHandler
.21e8					SCCopyTemp0:
.21e8	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.21ea	b1 04		lda ($04),y			lda 	(temp0),y
.21ec	85 08		sta $08				sta 	temp2
.21ee					_SCCopyLoop:
.21ee	a5 08		lda $08				lda 	temp2 						; done the lot
.21f0	f0 0b		beq $21fd			beq 	_SCCopyExit
.21f2	c6 08		dec $08				dec 	temp2
.21f4	c8		iny				iny 								; get next char
.21f5	b1 04		lda ($04),y			lda 	(temp0),y
.21f7	20 2d 22	jsr $222d			jsr 	WriteSoftString 			; write to soft string.
.21fa	4c ee 21	jmp $21ee			jmp 	_SCCopyLoop
.21fd					_SCCopyExit:
.21fd	60		rts				rts
.21fe					CopySoftToStack:
.21fe	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.2200	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.2202	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.2204	95 50		sta $50,x			sta 	esInt1,x
.2206	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.2207					AllocateSoftString:
.2207	85 0c		sta $0c				sta 	tempShort 					; save count
.2209	98		tya				tya
.220a	48		pha				pha
.220b	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.220d	d0 09		bne $2218			bne 	_ASSDone
.220f	a5 0d		lda $0d				lda 	highMemory 					; reset the soft memory alloc pointer.
.2211	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.2213	a4 0e		ldy $0e				ldy 	highMemory+1 				; but it needs to be reset before each command.
.2215	88		dey				dey
.2216	84 7b		sty $7b				sty 	softMemAlloc+1
.2218					_ASSDone:
.2218	38		sec				sec 								; allocate downwards enough memory
.2219	a5 7a		lda $7a				lda 	softMemAlloc
.221b	e5 0c		sbc $0c				sbc 	tempShort
.221d	85 7a		sta $7a				sta 	softMemAlloc
.221f	a5 7b		lda $7b				lda 	softMemAlloc+1
.2221	e9 00		sbc #$00			sbc 	#0
.2223	85 7b		sta $7b				sta 	softMemAlloc+1
.2225	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.2227	a8		tay				tay
.2228	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.222a	68		pla				pla
.222b	a8		tay				tay
.222c	60		rts				rts
.222d					WriteSoftString:
.222d	84 0c		sty $0c				sty 	tempShort 					; save Y
.222f	48		pha				pha
.2230	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.2232	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.2234	18		clc				clc
.2235	69 01		adc #$01			adc 	#1
.2237	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.2239	a8		tay				tay 								; pointer in Y
.223a	68		pla				pla 								; get char and write.
.223b	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.223d	a4 0c		ldy $0c				ldy 	tempShort 					; restore Y and exit.
.223f	60		rts				rts
.2240					StrClone:
.2240	aa		tax				tax 								; set up stack.
.2241	98		tya				tya
.2242	48		pha				pha
.2243	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.2245	b1 04		lda ($04),y			lda 	(temp0),y
.2247	18		clc				clc
.2248	69 01		adc #$01			adc 	#1
.224a	20 07 22	jsr $2207			jsr 	AllocateSoftString 			; allocate soft memory
.224d	a5 7a		lda $7a				lda 	softMemAlloc 				; copy that address to TOS
.224f	95 48		sta $48,x			sta 	esInt0,x
.2251	a5 7b		lda $7b				lda 	softMemAlloc+1
.2253	95 50		sta $50,x			sta 	esInt1,x
.2255	a9 00		lda #$00			lda 	#0
.2257	95 58		sta $58,x			sta 	esInt2,x
.2259	95 60		sta $60,x			sta 	esInt3,x
.225b	a9 40		lda #$40			lda 	#$40 						; set type to string.
.225d	95 40		sta $40,x			sta 	esType,x
.225f	20 e8 21	jsr $21e8			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.2262	68		pla				pla
.2263	a8		tay				tay
.2264	8a		txa				txa
.2265	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.2266					StringSubstring:
.2266	48		pha				pha
.2267	aa		tax				tax 								; access stack.
.2268	98		tya				tya
.2269	48		pha				pha
.226a	20 af 21	jsr $21af			jsr 	CopyStringTop 				; point temp0 to the string.
.226d	a0 00		ldy #$00			ldy 	#0 							; get length.
.226f	b1 04		lda ($04),y			lda 	(temp0),Y
.2271	85 06		sta $06				sta 	temp1
.2273	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.2275	c5 06		cmp $06				cmp 	temp1 						;
.2277	f0 02		beq $227b			beq 	_SSBOkay
.2279	b0 2a		bcs $22a5			bcs 	_SSBReturnNull
.227b					_SSBOkay:
.227b	a5 06		lda $06				lda 	temp1 						; get the total length +1
.227d	18		clc				clc
.227e	69 01		adc #$01			adc 	#1
.2280	38		sec				sec
.2281	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.2283	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.2285	90 02		bcc $2289			bcc		_SSBTrunc
.2287	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2289					_SSBTrunc:
.2289	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.228b	18		clc				clc
.228c	69 01		adc #$01			adc 	#1 							; add 1
.228e	20 07 22	jsr $2207			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.2291	20 fe 21	jsr $21fe			jsr 	CopySoftToStack 			; copy that to the stack.
.2294	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.2296					_SSBCopyLoop:
.2296	a5 07		lda $07				lda 	temp1+1 					; done them all
.2298	f0 0e		beq $22a8			beq 	_SSBExit
.229a	c6 07		dec $07				dec 	temp1+1
.229c	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.229e	20 2d 22	jsr $222d			jsr 	WriteSoftString
.22a1	c8		iny				iny
.22a2	4c 96 22	jmp $2296			jmp 	_SSBCopyLoop
.22a5					_SSBReturnNull:
.22a5	20 ac 22	jsr $22ac			jsr 	ReturnNull
.22a8					_SSBExit:
.22a8	68		pla				pla
.22a9	a8		tay				tay
.22aa	68		pla				pla
.22ab	60		rts				rts
.22ac					ReturnNull:
.22ac	a9 00		lda #$00			lda 	#0 							; clear null string
.22ae	8d cc 0a	sta $0acc			sta 	NullString
.22b1	a9 cc		lda #$cc			lda 	#NullString & $FF 			; set a pointer to it
.22b3	95 48		sta $48,x			sta 	esInt0,x
.22b5	a9 0a		lda #$0a			lda 	#NullString >> 8
.22b7	95 50		sta $50,x			sta 	esInt1,x
.22b9	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0afc					srcStrLen:
>0afc							.fill 	1
.22ba					StringWrite:
.22ba	aa		tax				tax
.22bb	48		pha				pha
.22bc	98		tya				tya
.22bd	48		pha				pha
.22be	20 e5 22	jsr $22e5			jsr 	CheckOverwriteCurrent
.22c1	b0 0d		bcs $22d0			bcs		_SWCopyCurrent
.22c3	20 23 23	jsr $2323			jsr 	RequiresConcretion
.22c6	90 0e		bcc $22d6			bcc 	_SWWriteReference
.22c8	20 86 23	jsr $2386			jsr 	CheckSpecialConcretion
.22cb	b0 09		bcs $22d6			bcs 	_SWWriteReference
.22cd	20 37 23	jsr $2337			jsr 	AllocateHardMemory
.22d0					_SWCopyCurrent:
.22d0	20 6a 23	jsr $236a			jsr 	CopyStringToHardMemory
.22d3	4c e1 22	jmp $22e1			jmp 	_SWExit
.22d6					_SWWriteReference
.22d6	a0 00		ldy #$00			ldy 	#0
.22d8	a5 04		lda $04				lda 	temp0
.22da	91 06		sta ($06),y			sta 	(temp1),y
.22dc	c8		iny				iny
.22dd	a5 05		lda $05				lda 	temp0+1
.22df	91 06		sta ($06),y			sta 	(temp1),y
.22e1					_SWExit:
.22e1	68		pla				pla
.22e2	a8		tay				tay
.22e3	68		pla				pla
.22e4	60		rts				rts
.22e5					CheckOverwriteCurrent:
.22e5	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.22e7	b5 51		lda $51,x			lda 	esInt1+1,x
.22e9	85 05		sta $05				sta 	temp0+1
.22eb	b5 49		lda $49,x			lda 	esInt0+1,x
.22ed	85 04		sta $04				sta 	temp0
.22ef	b1 04		lda ($04),y			lda 	(temp0),y 				; get length of string being copied.
.22f1	8d fc 0a	sta $0afc			sta 	srcStrLen
.22f4	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.22f6	85 06		sta $06				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.22f8	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.22fa	85 07		sta $07				sta 	temp1+1
.22fc	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.22fe	b1 06		lda ($06),y			lda 	(temp1),y
.2300	c5 0e		cmp $0e				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.2302	90 1b		bcc $231f			bcc 	_COCFail 				; in hard memory.
.2304	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.2306	b1 06		lda ($06),y			lda 	(temp1),y
.2308	e9 01		sbc #$01			sbc 	#1
.230a	85 08		sta $08				sta 	temp2
.230c	c8		iny				iny
.230d	b1 06		lda ($06),y			lda 	(temp1),y
.230f	e9 00		sbc #$00			sbc 	#0
.2311	85 09		sta $09				sta 	temp2+1
.2313	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.2315	b1 08		lda ($08),y			lda 	(temp2),y
.2317	38		sec				sec  							; maximum character capacity.
.2318	e9 02		sbc #$02			sbc 	#2
.231a	cd fc 0a	cmp $0afc			cmp 	srcStrLen 				; if >= the required length
.231d	b0 02		bcs $2321			bcs 	_COCCanReuse
.231f					_COCFail:
.231f	18		clc				clc
.2320	60		rts				rts
.2321					_COCCanReuse:
.2321	38		sec				sec
.2322	60		rts				rts
.2323					RequiresConcretion:
.2323	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.2325	c5 0e		cmp $0e				cmp 	highMemory+1 			; if >= high memory it is concreted
.2327	b0 0a		bcs $2333			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.2329	a5 7b		lda $7b				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.232b	f0 08		beq $2335			beq 	_RCFail 				; if not, this cannot be soft memory.
.232d	a5 05		lda $05				lda 	temp0+1 				; get MSB of address of string to be written
.232f	c5 7b		cmp $7b				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.2331	90 02		bcc $2335			bcc 	_RCFail 				; so concreting
.2333					_RCSucceed:
.2333	38		sec				sec
.2334	60		rts				rts
.2335					_RCFail:
.2335	18		clc				clc
.2336	60		rts				rts
.2337					AllocateHardMemory:
.2337	98		tya				tya
.2338	48		pha				pha
.2339	ad fc 0a	lda $0afc			lda 	srcStrLen 				; characters in string
.233c	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.233e	b0 04		bcs $2344			bcs 	_AHMSetMax 				; max out that amount.
.2340	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.2342	90 02		bcc $2346			bcc 	_AHMIsOkay
.2344					_AHMSetMax:
.2344	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.2346					_AHMIsOkay:
.2346	48		pha				pha
.2347	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.2349	38		sec				sec  							; and copy result to TOS as target address.
.234a	65 0d		adc $0d				adc 	highMemory
.234c	85 0d		sta $0d				sta 	highMemory
.234e	a5 0e		lda $0e				lda 	highMemory+1
.2350	69 ff		adc #$ff			adc 	#$FF
.2352	85 0e		sta $0e				sta 	highMemory+1
.2354	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.2356	68		pla				pla 							; get the total size of the storage block
.2357	91 0d		sta ($0d),y			sta 	(highMemory),y
.2359	18		clc				clc
.235a	a5 0d		lda $0d				lda		highMemory 				; point the target address to the byte after this.
.235c	69 01		adc #$01			adc 	#1
.235e	91 06		sta ($06),y			sta 	(temp1),y
.2360	a5 0e		lda $0e				lda 	highMemory+1
.2362	69 00		adc #$00			adc 	#0
.2364	c8		iny				iny
.2365	91 06		sta ($06),y			sta 	(temp1),y
.2367	68		pla				pla
.2368	a8		tay				tay
.2369	60		rts				rts
.236a					CopyStringToHardMemory:
.236a	98		tya				tya
.236b	48		pha				pha
.236c	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.236e	b1 06		lda ($06),y			lda 	(temp1),y
.2370	85 08		sta $08				sta 	temp2
.2372	c8		iny				iny
.2373	b1 06		lda ($06),y			lda 	(temp1),y
.2375	85 09		sta $09				sta 	temp2+1
.2377	ac fc 0a	ldy $0afc			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.237a					_CSTHMLoop:
.237a	b1 04		lda ($04),y			lda 	(temp0),y
.237c	91 08		sta ($08),y			sta 	(temp2),y
.237e	88		dey				dey
.237f	c0 ff		cpy #$ff			cpy 	#$FF
.2381	d0 f7		bne $237a			bne 	_CSTHMLoop
.2383	68		pla				pla
.2384	a8		tay				tay
.2385	60		rts				rts
.2386					CheckSpecialConcretion:
.2386	ad fc 0a	lda $0afc			lda 	srcStrLen 				; check string is null.
.2389	f0 02		beq $238d			beq 	_CSCNullString
.238b	18		clc				clc
.238c	60		rts				rts
.238d					_CSCNullString:
.238d	a9 00		lda #$00			lda 	#0
.238f	8d cc 0a	sta $0acc			sta 	NullString
.2392	a9 cc		lda #$cc			lda 	#(NullString) & $FF
.2394	85 04		sta $04				sta 	temp0
.2396	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.2398	85 05		sta $05				sta 	1+(temp0)
.239a	38		sec				sec
.239b	60		rts				rts

;******  Return to file: string/string.asm

.239c					stringHandler:
.239c	7c 9f 23	jmp ($239f,x)			jmp 	(stringVectors,x)
.239f					stringVectors:
>239f	4d 21					.word StringChrs           ; index 0
>23a1	40 22					.word StrClone             ; index 2
>23a3	b8 21					.word StringConcat         ; index 4
>23a5	6f 21					.word STRCompare           ; index 6
>23a7	66 22					.word StringSubstring      ; index 8
>23a9	ba 22					.word StringWrite          ; index 10

;******  Return to file: basic.asm

.23ab					section_end_string:
.23ab					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm

.23ab					tokeniserHandler:
.23ab	7c ae 23	jmp ($23ae,x)			jmp 	(tokeniserVectors,x)
.23ae					tokeniserVectors:

;******  Return to file: basic.asm

.23ae					section_end_tokeniser:
.23ae					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0afd					varHash:
>0afd							.fill	1
.0afe					varType:
>0afe							.fill 	1
.0aff					varEnd:
>0aff							.fill 	1
.007c					hashList:
>007c							.fill 	2
.23ae					AccessVariable:
.23ae	aa		tax				tax 								; stack in X
.23af	c8		iny				iny
.23b0	b1 02		lda ($02),y			lda 	(codePtr),y
.23b2	88		dey				dey
.23b3	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.23b5	d0 15		bne $23cc			bne 	_AVLong
.23b7	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.23b9	38		sec				sec 	 							; make it 0-25
.23ba	e9 01		sbc #$01			sbc 	#1
.23bc	0a		asl a				asl 	a 							; x 4 is LSB of address
.23bd	0a		asl a				asl 	a
.23be	95 48		sta $48,x			sta 	esInt0,x
.23c0	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.23c2	95 50		sta $50,x			sta 	esInt1,x
.23c4	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.23c6	95 40		sta $40,x			sta 	esType,x
.23c8	c8		iny				iny 								; skip over the variable reference in the code.
.23c9	c8		iny				iny
.23ca	8a		txa				txa 								; stack in A to return.
.23cb	60		rts				rts
.23cc					_AVLong:
.23cc	8a		txa				txa
.23cd	48		pha				pha
.23ce	20 0c 24	jsr $240c			jsr 	AccessSetup 				; set up the basic stuff.
.23d1	20 b1 24	jsr $24b1			jsr 	FindVariable 				; does the variable exist already
.23d4	b0 0e		bcs $23e4			bcs 	_AVFound
.23d6	ad fe 0a	lda $0afe			lda 	varType 					; is the variable type an array
.23d9	4a		lsr a				lsr 	a
.23da	90 05		bcc $23e1			bcc 	_AVCanCreate
.23dc	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.23de	20 3e 21	jsr $213e			jsr 	ErrorHandler
.23e1					_AVCanCreate:
.23e1	20 49 24	jsr $2449			jsr 	CreateVariable 				; no, create it.
.23e4					_AVFound:
.23e4	68		pla				pla
.23e5	aa		tax				tax
.23e6	18		clc				clc 								; copy temp0 (variable record address)
.23e7	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.23e9	69 05		adc #$05			adc 	#5
.23eb	95 48		sta $48,x			sta 	esInt0,x
.23ed	a5 05		lda $05				lda 	temp0+1
.23ef	69 00		adc #$00			adc 	#0
.23f1	95 50		sta $50,x			sta 	esInt1,x
.23f3	a9 00		lda #$00			lda 	#0
.23f5	95 58		sta $58,x			sta 	esInt2,x
.23f7	95 60		sta $60,x			sta 	esInt3,x
.23f9	ac fe 0a	ldy $0afe			ldy 	varType 					; get the type ID from the type.
.23fc	b9 cc 23	lda $23cc,y			lda 	_AVTypeTable-$3A,y
.23ff	95 40		sta $40,x			sta 	esType,x
.2401	ac ff 0a	ldy $0aff			ldy 	varEnd 						; restore Y
.2404	8a		txa				txa 								; return stack in A and return
.2405	60		rts				rts
.2406					_AVTypeTable:
>2406	80 80						.byte 	$80,$80						; integer
>2408	c0 c0						.byte 	$C0,$C0 					; string
>240a	81 81						.byte 	$81,$81 					; float
.240c					AccessSetup:
.240c	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.240e	8d fd 0a	sta $0afd			sta 	varHash
.2411	98		tya				tya
.2412	48		pha				pha
.2413	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.2415	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.2417	b0 0b		bcs $2424			bcs 	_ASComplete
.2419	18		clc				clc 								; add to the hash. Might improve this.
.241a	6d fd 0a	adc $0afd			adc 	varHash
.241d	8d fd 0a	sta $0afd			sta 	varHash
.2420	c8		iny				iny 								; next character
.2421	4c 13 24	jmp $2413			jmp 	_ASLoop
.2424					_ASComplete:
.2424	8d fe 0a	sta $0afe			sta 	varType 					; save variable type byte
.2427	c8		iny				iny
.2428	8c ff 0a	sty $0aff			sty 	varEnd 						; save the ending position.
.242b	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.242c	e9 3a		sbc #$3a			sbc 	#$3A
.242e	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.242f	0a		asl a				asl 	a
.2430	0a		asl a				asl 	a
.2431	0a		asl a				asl 	a 							; 2 bytes/word
.2432	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.2434	ad fd 0a	lda $0afd			lda 	varHash 					; get hash
.2437	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.2439	0a		asl a				asl  	a 							; x 2 (for word) and CC
.243a	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.243c	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.243e	85 7c		sta $7c				sta 	hashList
.2440	a9 0a		lda #$0a			lda 	#hashTables >> 8
.2442	69 00		adc #$00			adc 	#0
.2444	85 7d		sta $7d				sta 	hashList+1
.2446	68		pla				pla
.2447	a8		tay				tay
.2448	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.2449					CreateVariable:
.2449	98		tya				tya 								; push Y on the stack twice.
.244a	48		pha				pha
.244b	48		pha				pha
.244c	ae fe 0a	ldx $0afe			ldx 	varType 					; get var type 0-5
.244f	bd 71 24	lda $2471,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.2452	48		pha				pha 								; save length
.2453	a8		tay				tay 								; put into Y.
.2454	a5 0f		lda $0f				lda 	lowMemory 					; set low Memory ptr to temp0
.2456	85 04		sta $04				sta 	temp0
.2458	a5 10		lda $10				lda 	lowMemory+1
.245a	85 05		sta $05				sta 	temp0+1
.245c	68		pla				pla 								; get length
.245d	20 6b 10	jsr $106b			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.2460					_CVClear:
.2460	88		dey				dey
.2461	a9 00		lda #$00			lda 	#0
.2463	91 04		sta ($04),y			sta 	(temp0),y
.2465	c0 04		cpy #$04			cpy 	#4
.2467	d0 f7		bne $2460			bne 	_CVClear
.2469	ad fd 0a	lda $0afd			lda 	varHash 					; store hash at offset 4.
.246c	91 04		sta ($04),y			sta 	(temp0),y
.246e	68		pla				pla 								; offset, work out where the variable name is.
.246f	18		clc				clc
.2470	65 02		adc $02				adc 	codePtr
.2472	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.2474	91 04		sta ($04),y			sta 	(temp0),y
.2476	a5 03		lda $03				lda 	codePtr+1
.2478	69 00		adc #$00			adc 	#0
.247a	c8		iny				iny
.247b	91 04		sta ($04),y			sta 	(temp0),y
.247d	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.247f	b1 7c		lda ($7c),y			lda 	(hashList),y
.2481	91 04		sta ($04),y			sta 	(temp0),y
.2483	c8		iny				iny
.2484	b1 7c		lda ($7c),y			lda 	(hashList),y
.2486	91 04		sta ($04),y			sta 	(temp0),y
.2488	a5 05		lda $05				lda 	temp0+1 					; set new link
.248a	91 7c		sta ($7c),y			sta 	(hashList),y
.248c	88		dey				dey
.248d	a5 04		lda $04				lda 	temp0
.248f	91 7c		sta ($7c),y			sta 	(hashList),y
.2491	ad fe 0a	lda $0afe			lda 	varType 					; is it a string ($3C)
.2494	c9 3c		cmp #$3c			cmp 	#$3C
.2496	d0 10		bne $24a8			bne 	_CVNoDefaultNull
.2498	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.249a	8d cc 0a	sta $0acc			sta 	NullString
.249d	a0 05		ldy #$05			ldy 	#5
.249f	a9 cc		lda #$cc			lda 	#NullString & $FF
.24a1	91 04		sta ($04),y			sta 	(temp0),y
.24a3	a9 0a		lda #$0a			lda 	#NullString >> 8
.24a5	c8		iny				iny
.24a6	91 04		sta ($04),y			sta 	(temp0),y
.24a8					_CVNoDefaultNull:
.24a8	68		pla				pla
.24a9	a8		tay				tay
.24aa	60		rts				rts
>24ab	09 09				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarISize 					; <storage for integer>
>24ad	07 07						.byte 	VarHSize+VarSSize,VarHSize+VarSSize 					; <storage for string>
>24af	0b 0b						.byte 	VarHSize+VarFSize,VarHSize+VarFSize 					; <storage for float>

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.24b1					FindVariable:
.24b1	98		tya				tya
.24b2	48		pha				pha
.24b3	98		tya				tya 								; point temp2 to the actual name.
.24b4	18		clc				clc
.24b5	65 02		adc $02				adc 	codePtr
.24b7	85 08		sta $08				sta 	temp2
.24b9	a5 03		lda $03				lda 	codePtr+1
.24bb	69 00		adc #$00			adc 	#0
.24bd	85 09		sta $09				sta 	temp2+1
.24bf	a0 00		ldy #$00			ldy 	#0
.24c1	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.24c3	85 04		sta $04				sta 	temp0
.24c5	a5 7d		lda $7d				lda 	hashList+1
.24c7	85 05		sta $05				sta 	temp0+1
.24c9	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.24cb	b1 04		lda ($04),y			lda 	(temp0),y
.24cd	f0 2c		beq $24fb			beq 	_FVFail
.24cf	aa		tax				tax
.24d0	88		dey				dey		 							; get LSB
.24d1	b1 04		lda ($04),y			lda 	(temp0),y
.24d3	85 04		sta $04				sta 	temp0 						; update pointer.
.24d5	86 05		stx $05				stx 	temp0+1
.24d7	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.24d9	b1 04		lda ($04),y			lda 	(temp0),y
.24db	cd fd 0a	cmp $0afd			cmp 	varHash
.24de	d0 e9		bne $24c9			bne 	_FVNext 					; if not, no point in checking the name.
.24e0	88		dey				dey 								; copy name pointer to temp1.
.24e1	b1 04		lda ($04),y			lda 	(temp0),y
.24e3	85 07		sta $07				sta 	temp1+1
.24e5	88		dey				dey
.24e6	b1 04		lda ($04),y			lda 	(temp0),y
.24e8	85 06		sta $06				sta 	temp1
.24ea	a0 00		ldy #$00			ldy 	#0
.24ec					_FVCheck:
.24ec	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.24ee	d1 08		cmp ($08),y			cmp 	(temp2),y
.24f0	d0 d7		bne $24c9			bne 	_FVNext		 				; fail if different.
.24f2	c8		iny				iny
.24f3	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.24f5	90 f5		bcc $24ec			bcc 	_FVCheck
.24f7	68		pla				pla
.24f8	a8		tay				tay
.24f9	38		sec				sec
.24fa	60		rts				rts
.24fb					_FVFail:
.24fb	68		pla				pla
.24fc	a8		tay				tay
.24fd	18		clc				clc
.24fe	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.24ff					HashTableReset:
.24ff	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.2501	a9 00		lda #$00			lda 	#0
.2503					_HTRClear:
.2503	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2506	ca		dex				dex
.2507	d0 fa		bne $2503			bne 	_HTRClear
.2509	60		rts				rts

;******  Return to file: variable/variable.asm

.250a					variableHandler:
.250a	7c 0d 25	jmp ($250d,x)			jmp 	(variableVectors,x)
.250d					variableVectors:
>250d	ae 23					.word AccessVariable       ; index 0
>250f	ff 24					.word HashTableReset       ; index 2

;******  Return to file: basic.asm

.2511					section_end_variable:

;******  End of listing
