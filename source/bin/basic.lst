
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -D autorun=1 -D coldstartnew=0 -Walias -Wmacro-prefix -Wall -q -c -L ../source/bin/basic.lst -l ../source/bin/basic.lbl -Wall -o ../source/bin/stub.prg basic.asm
; Mon Mar 15 15:29:49 2021

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					autorun=1
=0					coldstartnew=0

;******  Processing input file: basic.asm


;******  Processing file: header/01common.inc


;******  Processing file: header/../generated/installed.inc

=1					installed_header = 1
=1					installed_main = 1
=1					installed_variable = 1
=1					installed_assembler = 1
=1					installed_error = 1
=1					installed_extension = 1
=1					installed_string = 1
=1					installed_device = 1
=0					installed_floatingpoint = 0
=1					installed_interaction = 1
=1					installed_tokeniser = 1
=1					installed_footer = 1

;******  Return to file: header/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$9f00					EndOfMemory = $9F00
=$28					ZeroPageStorage = $28
=$40					StackAddress = $40
=8					StackSize = 8
=2					retStackSizePages = 2
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'
="P"					markerPROC = 'P'
="$"					markerSTRING = '$'
="#"					markerFLOAT = '#'
="%"					markerINT = '%'
=5					VarHSize = 5 								; header (2 link, 2 name, 1 hash)
=5					VarASize = 5 								; array [address,size,byteSize]
=4					VarISize = 4 								; integer (32 bit)
=6					VarFSize = 6 								; float (4 mantissa, 1 exponent 1 sign/zero)
=2					VarSSize = 2 								; address (2 bytes)

;******  Return to file: basic.asm


;******  Processing file: header/02macros.inc


;******  Return to file: basic.asm


;******  Processing file: header/03data.inc

>0028					codePtr:.fill 	2							; (codePtr),y points to code.
>002a					temp0: 	.fill 	2							; working variables.
>002c					temp1: 	.fill 	2
>002e					temp2: 	.fill 	2
>0030					temp3: 	.fill 	2
.0032					tempshort:
>0032							.fill 	1
.0033					highMemory:
>0033							.fill 	2
.0035					lowMemory:
>0035							.fill 	2
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSizePages * 256
=512					retStackSize = retStackSizePages * 256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					currentStorage:
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent ($80 = 0)
>0070					esZSign:.fill 	StackSize 					; for floating point - sign (bit 7) isZero (bit 6)
.0078					endOfStack:
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endProgram:
>0aca							.fill 	2
.0acc					endMemory:
>0acc							.fill 	2
.0ace					NullString:
>0ace							.fill 	1							; don't waste memory concreting null strings.
.0acf					convertBuffer:
>0acf							.fill 	35

;******  Processing file: header/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a4					TOK_UNARYST=$a4
=$c9					TOK_TOKENS=$c9
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_DEFPROC                  = $9d ; defproc
=$9e					TKW_UNTIL                    = $9e ; until
=$9f					TKW_WEND                     = $9f ; wend
=$a0					TKW_NEXT                     = $a0 ; next
=$a1					TKW_THEN                     = $a1 ; then
=$a2					TKW_ENDIF                    = $a2 ; endif
=$a3					TKW_ENDPROC                  = $a3 ; endproc
=$a4					TKW_LPAREN                   = $a4 ; (
=$a5					TKW_LENLPAREN                = $a5 ; len(
=$a6					TKW_SGNLPAREN                = $a6 ; sgn(
=$a7					TKW_ABSLPAREN                = $a7 ; abs(
=$a8					TKW_RANDOMLPAREN             = $a8 ; random(
=$a9					TKW_PAGE                     = $a9 ; page
=$aa					TKW_TRUE                     = $aa ; true
=$ab					TKW_FALSE                    = $ab ; false
=$ac					TKW_MINLPAREN                = $ac ; min(
=$ad					TKW_MAXLPAREN                = $ad ; max(
=$ae					TKW_SYSLPAREN                = $ae ; sys(
=$af					TKW_TIMERLPAREN              = $af ; timer(
=$b0					TKW_EVENTLPAREN              = $b0 ; event(
=$b1					TKW_GETLPAREN                = $b1 ; get(
=$b2					TKW_INKEYLPAREN              = $b2 ; inkey(
=$b3					TKW_ALLOCLPAREN              = $b3 ; alloc(
=$b4					TKW_CHRDOLLARLPAREN          = $b4 ; chr$(
=$b5					TKW_LEFTDOLLARLPAREN         = $b5 ; left$(
=$b6					TKW_MIDDOLLARLPAREN          = $b6 ; mid$(
=$b7					TKW_RIGHTDOLLARLPAREN        = $b7 ; right$(
=$b8					TKW_STRDOLLARLPAREN          = $b8 ; str$(
=$b9					TKW_VALLPAREN                = $b9 ; val(
=$ba					TKW_PEEKLPAREN               = $ba ; peek(
=$bb					TKW_DEEKLPAREN               = $bb ; deek(
=$bc					TKW_LEEKLPAREN               = $bc ; leek(
=$bd					TKW_ASCLPAREN                = $bd ; asc(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_ISVALLPAREN              = $c0 ; isval(
=$c1					TKW_UPPERDOLLARLPAREN        = $c1 ; upper$(
=$c2					TKW_LOWERDOLLARLPAREN        = $c2 ; lower$(
=$c3					TKW_AT                       = $c3 ; @
=$c4					TKW_WAVY                     = $c4 ; ~
=$c5					TKW_AMP                      = $c5 ; &
=$c6					TKW_GETDOLLARLPAREN          = $c6 ; get$(
=$c7					TKW_INKEYDOLLARLPAREN        = $c7 ; inkey$(
=$c8					TKW_MEM                      = $c8 ; mem
=$c9					TKW_RPAREN                   = $c9 ; )
=$ca					TKW_COLON                    = $ca ; :
=$cb					TKW_COMMA                    = $cb ; ,
=$cc					TKW_SEMICOLON                = $cc ; ;
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_TO                       = $ce ; to
=$cf					TKW_STEP                     = $cf ; step
=$d0					TKW_PROC                     = $d0 ; proc
=$d1					TKW_LOCAL                    = $d1 ; local
=$d2					TKW_DIM                      = $d2 ; dim
=$d3					TKW_REM                      = $d3 ; rem
=$d4					TKW_LET                      = $d4 ; let
=$d5					TKW_INPUT                    = $d5 ; input
=$d6					TKW_ELSE                     = $d6 ; else
=$d7					TKW_VDU                      = $d7 ; vdu
=$d8					TKW_PRINT                    = $d8 ; print
=$d9					TKW_GOTO                     = $d9 ; goto
=$da					TKW_GOSUB                    = $da ; gosub
=$db					TKW_RETURN                   = $db ; return
=$dc					TKW_DATA                     = $dc ; data
=$dd					TKW_ASSERT                   = $dd ; assert
=$de					TKW_POKE                     = $de ; poke
=$df					TKW_DOKE                     = $df ; doke
=$e0					TKW_LOKE                     = $e0 ; loke
=$e1					TKW_INK                      = $e1 ; ink
=$e2					TKW_PAPER                    = $e2 ; paper
=$e3					TKW_CLS                      = $e3 ; cls
=$e4					TKW_LOCATE                   = $e4 ; locate
=$e5					TKW_BREAK                    = $e5 ; break
=$e6					TKW_PERIOD                   = $e6 ; .
=$e7					TKW_HASH                     = $e7 ; #
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_READ                     = $8c ; read
=$8d					TKW_RESTORE                  = $8d ; restore
=$8e					TKW_END                      = $8e ; end
=$8f					TKW_STOP                     = $8f ; stop
=$90					TKW_XEMU                     = $90 ; xemu
=$91					TKW_ORA                      = $91 ; ora
=$92					TKW_LPARENANDRPAREN          = $92 ; (and)
=$93					TKW_EOR                      = $93 ; eor
=$94					TKW_ADC                      = $94 ; adc
=$95					TKW_STA                      = $95 ; sta
=$96					TKW_LDA                      = $96 ; lda
=$97					TKW_CMP                      = $97 ; cmp
=$98					TKW_SBC                      = $98 ; sbc
=$99					TKW_ASL                      = $99 ; asl
=$9a					TKW_ROL                      = $9a ; rol
=$9b					TKW_LSR                      = $9b ; lsr
=$9c					TKW_ROR                      = $9c ; ror
=$9d					TKW_STX                      = $9d ; stx
=$9e					TKW_LDX                      = $9e ; ldx
=$9f					TKW_DEC                      = $9f ; dec
=$a0					TKW_INC                      = $a0 ; inc
=$a1					TKW_STZ                      = $a1 ; stz
=$a2					TKW_BIT                      = $a2 ; bit
=$a3					TKW_STY                      = $a3 ; sty
=$a4					TKW_LDY                      = $a4 ; ldy
=$a5					TKW_CPY                      = $a5 ; cpy
=$a6					TKW_CPX                      = $a6 ; cpx
=$a7					TKW_TSB                      = $a7 ; tsb
=$a8					TKW_TRB                      = $a8 ; trb
=$a9					TKW_JSR                      = $a9 ; jsr
=$aa					TKW_JMP                      = $aa ; jmp
=$ab					TKW_BPL                      = $ab ; bpl
=$ac					TKW_BMI                      = $ac ; bmi
=$ad					TKW_BVC                      = $ad ; bvc
=$ae					TKW_BVS                      = $ae ; bvs
=$af					TKW_BCC                      = $af ; bcc
=$b0					TKW_BCS                      = $b0 ; bcs
=$b1					TKW_BNE                      = $b1 ; bne
=$b2					TKW_BEQ                      = $b2 ; beq
=$b3					TKW_BRA                      = $b3 ; bra
=$b4					TKW_BRK                      = $b4 ; brk
=$b5					TKW_PHP                      = $b5 ; php
=$b6					TKW_CLC                      = $b6 ; clc
=$b7					TKW_PLP                      = $b7 ; plp
=$b8					TKW_SEC                      = $b8 ; sec
=$b9					TKW_RTI                      = $b9 ; rti
=$ba					TKW_PHA                      = $ba ; pha
=$bb					TKW_CLI                      = $bb ; cli
=$bc					TKW_PHY                      = $bc ; phy
=$bd					TKW_RTS                      = $bd ; rts
=$be					TKW_PLA                      = $be ; pla
=$bf					TKW_SEI                      = $bf ; sei
=$c0					TKW_PLY                      = $c0 ; ply
=$c1					TKW_DEY                      = $c1 ; dey
=$c2					TKW_TXA                      = $c2 ; txa
=$c3					TKW_TYA                      = $c3 ; tya
=$c4					TKW_TXS                      = $c4 ; txs
=$c5					TKW_TAY                      = $c5 ; tay
=$c6					TKW_TAX                      = $c6 ; tax
=$c7					TKW_CLV                      = $c7 ; clv
=$c8					TKW_TSX                      = $c8 ; tsx
=$c9					TKW_INY                      = $c9 ; iny
=$ca					TKW_DEX                      = $ca ; dex
=$cb					TKW_CLD                      = $cb ; cld
=$cc					TKW_PHX                      = $cc ; phx
=$cd					TKW_INX                      = $cd ; inx
=$ce					TKW_NOP                      = $ce ; nop
=$cf					TKW_SED                      = $cf ; sed
=$d0					TKW_PLX                      = $d0 ; plx
=$86					TKW_VPOKE                    = $86 ; vpoke
=$87					TKW_VDOKE                    = $87 ; vdoke
=$88					TKW_VLOAD                    = $88 ; vload
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(
=$87					TKW_VDEEKLPAREN              = $87 ; vdeek(

;******  Return to file: header/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Processing file: header/../generated/asmconst.inc

=$91					TKA_GROUP1 = $91
=$99					TKA_GROUP2 = $99
=$ab					TKA_GROUP3 = $ab
=$b4					TKA_GROUP4 = $b4
=$d1					TKA_END4 = $d1

;******  Return to file: header/03data.inc


;******  Return to file: basic.asm


;******  Processing file: header/header.inc


;******  Return to file: basic.asm


;******  Processing file: assembler/asmconst.inc

=0					AMD_IMM		= 0					; Immediate mode.
=1					AMD_ZERO 	= 1					; Zero Page
=2					AMD_ACCIMP	= 2					; Accumulator/Implied
=3					AMD_ABS 	= 3					; Absolute
=4					AMD_ZEROINDY= 4					; Zero Indirect,Y
=5					AMD_ZEROX 	= 5					; Zero Page,X
=6					AMD_ABSY 	= 6					; Absolute,Y
=7					AMD_ABSX 	= 7					; Absolute,X
=8					AMD_ZEROIND = 8					; Zero Indirect
=9					AMD_ZEROY 	= 9					; Zero Page,Y
=10					AMD_ABSIND 	= 10				; Absolute Indirect
=11					AMD_ABSINDX	= 11				; Absolute Indirect Indexed
=12					AMD_REL		= 12				; Relative
=13					AMD_ZEROINDX= 13 				; Zero Indirect,X

;******  Return to file: basic.asm


;******  Processing file: assembler/assembler.inc


;******  Return to file: basic.asm


;******  Processing file: device/device.inc


;******  Return to file: basic.asm


;******  Processing file: error/error.inc


;******  Return to file: basic.asm


;******  Processing file: error/errorhandler.inc


;******  Processing file: error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_endprocErr = 18 ; ENDPROC without PROC
=19					ErrorID_BadIndex = 19 ; Bad NEXT index
=20					ErrorID_Struct = 20 ; Structures nested wrong
=21					ErrorID_NoAuto = 21 ; Cannot create variable
=22					ErrorID_RetStack = 22 ; Return stack out of space
=23					ErrorID_NoProc = 23 ; Unknown Procedure
=24					ErrorID_Params = 24 ; Parameters do not match
=25					ErrorID_DupArray = 25 ; Array already defined
=26					ErrorID_NotArray = 26 ; DIM requires array
=27					ErrorID_ArrayIndex = 27 ; Bad array index
=28					ErrorID_DataError = 28 ; Out of data
=29					ErrorID_Tokenise = 29 ; Cannot tokenise line
=30					ErrorID_Save = 30 ; Save failed
=31					ErrorID_Load = 31 ; Load failed
=32					ErrorID_Break = 32 ; Break
=33					ErrorID_Memory = 33 ; Out of memory
=34					ErrorID_NumStack = 34 ; Expression too complex
=35					ErrorID_Assembler = 35 ; Bad Operand/Mode
=36					ErrorID_Branch = 36 ; Branch out of range

;******  Return to file: error/errorhandler.inc


;******  Return to file: basic.asm


;******  Processing file: extension/extension.inc


;******  Return to file: basic.asm


;******  Processing file: floatingpoint/float.inc

=5					FloatEmbeddedSize = 5

;******  Return to file: basic.asm


;******  Processing file: floatingpoint/floatingpoint.inc


;******  Return to file: basic.asm


;******  Processing file: interaction/interaction.inc


;******  Return to file: basic.asm


;******  Processing file: main/main.inc


;******  Return to file: basic.asm


;******  Processing file: string/memory.inc

=252					MaxStringSize = 252

;******  Return to file: basic.asm


;******  Processing file: string/string.inc


;******  Return to file: basic.asm


;******  Processing file: tokeniser/detokenise/colouring.inc

=$84					LTYLineNumber = $84
=$82					LTYPunctuation = $82
=$87					LTYIdentifier = $87
=$86					LTYConstant = $86
=$83					LTYKeyword = $83
=$81					LTYString = $81

;******  Return to file: basic.asm


;******  Processing file: tokeniser/tokeniser.inc


;******  Return to file: basic.asm


;******  Processing file: variable/variable.inc


;******  Return to file: basic.asm


;******  Processing file: footer/footer.inc


;******  Return to file: basic.asm

.1000					section_start_header:

;******  Processing file: header/header.asm


;******  Processing file: header/00start.asm

.1000					Start:
.1000	4c 0a 10	jmp $100a			jmp 	GoColdStart 				; +0 	boot BASIC
.1003	4c 28 10	jmp $1028			jmp 	GoTokTest					; +3 	run tokeniser test code.
>1006	35 38						.word 	TokenTableAddress
.1008							else
>1008	00 00						.word 	0
.100a					GoColdStart:
.100a	a9 00		lda #$00			lda 	#(programMemory) & $FF
.100c	8d c8 0a	sta $0ac8			sta 	basePage
.100f	a9 3f		lda #$3f			lda 	#(programMemory) >> 8
.1011	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.1014	a9 00		lda #$00			lda 	#(endOfMemory) & $FF
.1016	8d cc 0a	sta $0acc			sta 	endMemory
.1019	a9 9f		lda #$9f			lda 	#(endOfMemory) >> 8
.101b	8d cd 0a	sta $0acd			sta 	1+(endMemory)
.101e	a2 06		ldx #$06		ldx	#6
.1020	20 1e 14	jsr $141e		jsr	deviceHandler
.1023	a2 00		ldx #$00		ldx	#0
.1025	20 31 1a	jsr $1a31		jsr	interactionHandler
.1028					GoTokTest:
.1028	a2 04		ldx #$04		ldx	#4
.102a	20 67 3b	jsr $3b67		jsr	tokeniserHandler

;******  Return to file: header/header.asm


;******  Return to file: basic.asm

.102d					section_end_header:
.102d					section_start_assembler:

;******  Processing file: assembler/assembler.asm


;******  Processing file: assembler/asmoperand.asm

.102d					AsmGetOperand:
.102d	a2 00		ldx #$00			ldx 	#0 							; clear the operand.
.102f	20 52 2f	jsr $2f52			jsr 	MInt32False
.1032	b1 28		lda ($28),y			lda 	(codePtr),y 				; first into X
.1034	aa		tax				tax
.1035	a9 02		lda #$02			lda 	#AMD_ACCIMP
.1037	e0 80		cpx #$80			cpx 	#TOK_EOL 					; if end of line or colon, return implied mode.
.1039	f0 41		beq $107c			beq 	_AGOExit
.103b	e0 ca		cpx #$ca			cpx 	#TKW_COLON
.103d	f0 3d		beq $107c			beq 	_AGOExit
.103f	c8		iny				iny 								; consume the token
.1040	a9 00		lda #$00			lda 	#AMD_IMM
.1042	e0 e7		cpx #$e7			cpx 	#TKW_HASH 					; if a hash present, then immediate mode.
.1044	f0 2d		beq $1073			beq		_AGOEvalExit 				; with an operand.
.1046	e0 a4		cpx #$a4			cpx 	#TKW_LPAREN 				; left bracket ?
.1048	f0 40		beq $108a			beq 	_AGOIndirect
.104a	e0 01		cpx #$01			cpx 	#$01 						; is it "A" e.g. the variable A.
.104c	d0 0b		bne $1059			bne 	_AGOZeroPage1 				; if not it is zero zero,x zero,y, unpick 1 iny
.104e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the second character & consume it
.1050	c8		iny				iny
.1051	aa		tax				tax
.1052	a9 02		lda #$02			lda 	#AMD_ACCIMP 				; and return Acc/Implied if it is just A
.1054	e0 3a		cpx #$3a			cpx 	#$3A
.1056	f0 24		beq $107c			beq 	_AGOExit
.1058	88		dey				dey 								; unpick 2 iny
.1059					_AGOZeroPage1:
.1059	88		dey				dey
.105a	a9 00		lda #$00			lda 	#0 							; get the address into esInt0/1
.105c	a2 06		ldx #$06		ldx	#6
.105e	20 bc 30	jsr $30bc		jsr	mainHandler
.1061	20 b9 10	jsr $10b9			jsr 	AsmGetIndexing
.1064	a9 01		lda #$01			lda 	#AMD_ZERO
.1066	90 14		bcc $107c			bcc 	_AGOExit
.1068	a9 05		lda #$05			lda 	#AMD_ZEROX
.106a	e0 00		cpx #$00			cpx 	#0
.106c	f0 0e		beq $107c			beq 	_AGOExit
.106e	a9 09		lda #$09			lda 	#AMD_ZEROY
.1070	4c 7c 10	jmp $107c			jmp 	_AGOExit
.1073					_AGOEvalExit:
.1073	48		pha				pha
.1074	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.1076	a2 06		ldx #$06		ldx	#6
.1078	20 bc 30	jsr $30bc		jsr	mainHandler
.107b	68		pla				pla
.107c					_AGOExit:
.107c	48		pha				pha 								; save the mode
.107d	a5 58		lda $58				lda 	esInt2 						; check the operand is zero.
.107f	05 60		ora $60				ora 	esInt3
.1081	d0 02		bne $1085			bne 	_AGOValue
.1083	68		pla				pla
.1084	60		rts				rts
.1085					_AGOValue:
.1085	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1087	20 3f 14	jsr $143f		jsr	errorHandler
.108a					_AGOIndirect:
.108a	a9 00		lda #$00			lda 	#0 							; evaluate operand in root.
.108c	a2 06		ldx #$06		ldx	#6
.108e	20 bc 30	jsr $30bc		jsr	mainHandler
.1091	b1 28		lda ($28),y			lda 	(codePtr),y 				; does ) follow ? if so might be ) or ),Y
.1093	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.1095	f0 11		beq $10a8			beq 	_AGOIndIndY
.1097	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; must be ,X)
.109a	90 39		bcc $10d5			bcc 	AGISyntax
.109c	e0 00		cpx #$00			cpx 	#0
.109e	d0 35		bne $10d5			bne 	AGISyntax
.10a0	a2 00		ldx #$00		ldx	#0
.10a2	20 bc 30	jsr $30bc		jsr	mainHandler
.10a5	a9 0d		lda #$0d			lda 	#AMD_ZEROINDX
.10a7	60		rts				rts
.10a8					_AGOIndIndY:
.10a8	c8		iny				iny
.10a9	20 b9 10	jsr $10b9			jsr 	ASMGetIndexing 				; get indexing if any
.10ac	a9 08		lda #$08			lda 	#AMD_ZEROIND
.10ae	90 cc		bcc $107c			bcc 	_AGOExit 					; none then exit
.10b0	e0 00		cpx #$00			cpx 	#0 							; must be ,Y
.10b2	f0 21		beq $10d5			beq 	AGISyntax
.10b4	a9 04		lda #$04			lda 	#AMD_ZEROINDY
.10b6	4c 7c 10	jmp $107c			jmp 	_AGOExit
.10b9					AsmGetIndexing:
.10b9	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for comma
.10bb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.10bd	18		clc				clc
.10be	d0 14		bne $10d4			bne 	_AGIExit 					; no comma, return with CC
.10c0	c8		iny				iny 								; get what SHOULD be X or Y
.10c1	b1 28		lda ($28),y			lda 	(codePtr),y  				; read it
.10c3	38		sec				sec 								; subtract 6 bit ASCII of X
.10c4	e9 18		sbc #$18			sbc 	#"X" & $3F
.10c6	c9 02		cmp #$02			cmp 	#2 							; if unsigned >= 2 then error
.10c8	b0 0b		bcs $10d5			bcs 	AGISyntax
.10ca	aa		tax				tax 								; put in index
.10cb	c8		iny				iny 								; get what follows that, should be the $3A marker
.10cc	b1 28		lda ($28),y			lda 	(codePtr),y
.10ce	c8		iny				iny
.10cf	c9 3a		cmp #$3a			cmp 	#$3A
.10d1	d0 02		bne $10d5			bne 	AGISyntax
.10d3	38		sec				sec 								; return CS and index mode in X
.10d4					_AGIExit:
.10d4	60		rts				rts
.10d5					AGISyntax:
.10d5	a2 02		ldx #$02			ldx 	#ErrorID_syntax
.10d7	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/asmwrite.asm

.0af2					finalOpcode:
>0af2							.fill 	1
.10da					AsmWriteInstruction:
.10da	8d f2 0a	sta $0af2			sta 	finalOpcode					; save opcode.
.10dd	98		tya				tya
.10de	48		pha				pha
.10df	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check O
.10e2	29 02		and #$02			and 	#2
.10e4	f0 2d		beq $1113			beq 	_ASMWNoEcho 				; if zero then don't echo.
.10e6	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1 ; write address in P
.10e9	20 4e 11	jsr $114e			jsr 	AWIWriteHex
.10ec	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4
.10ef	20 4e 11	jsr $114e			jsr 	AWIWriteHex
.10f2	ad f2 0a	lda $0af2			lda 	finalOpcode 				; write opcode
.10f5	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.10f8	e0 00		cpx #$00			cpx 	#0
.10fa	f0 0e		beq $110a			beq 	_ASMWEchoExit
.10fc	a5 48		lda $48				lda 	esInt0
.10fe	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.1101	e0 01		cpx #$01			cpx 	#1
.1103	f0 05		beq $110a			beq 	_ASMWEchoExit
.1105	a5 50		lda $50				lda 	esInt1
.1107	20 47 11	jsr $1147			jsr 	AWIWriteHexSpace
.110a					_ASMWEchoExit:
.110a	8a		txa				txa
.110b	48		pha				pha
.110c	a2 04		ldx #$04		ldx	#4
.110e	20 1e 14	jsr $141e		jsr	deviceHandler
.1111	68		pla				pla
.1112	aa		tax				tax
.1113					_ASMWNoEcho:
.1113	ad f2 0a	lda $0af2			lda 	finalOpcode
.1116	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.1119	e0 00		cpx #$00			cpx 	#0
.111b	f0 0e		beq $112b			beq 	_ASMWExit
.111d	a5 48		lda $48				lda 	esInt0
.111f	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.1122	e0 01		cpx #$01			cpx 	#1
.1124	f0 05		beq $112b			beq 	_ASMWExit
.1126	a5 50		lda $50				lda 	esInt1
.1128	20 2e 11	jsr $112e			jsr 	AsmWriteByte
.112b					_ASMWExit:
.112b	68		pla				pla
.112c	a8		tay				tay
.112d	60		rts				rts
.112e					AsmWriteByte:
.112e	a0 00		ldy #$00			ldy 	#0
.1130	48		pha				pha
.1131	ad 3c 0a	lda $0a3c			lda 	SingleLetterVar+("P"-"A")*4 ; copy address to temp0
.1134	85 2a		sta $2a				sta 	temp0
.1136	ad 3d 0a	lda $0a3d			lda 	SingleLetterVar+("P"-"A")*4+1
.1139	85 2b		sta $2b				sta 	temp0+1
.113b	68		pla				pla 								; write out the byte.
.113c	91 2a		sta ($2a),y			sta 	(temp0),y
.113e	ee 3c 0a	inc $0a3c			inc 	SingleLetterVar+("P"-"A")*4	; increment P
.1141	d0 03		bne $1146			bne 	_AWBNoCarry
.1143	ee 3d 0a	inc $0a3d			inc 	SingleLetterVar+("P"-"A")*4+1
.1146					_AWBNoCarry:
.1146	60		rts				rts
.1147					AWIWriteHexSpace:
.1147	48		pha				pha
.1148	a9 20		lda #$20			lda 	#" "
.114a	20 61 11	jsr $1161			jsr 	AWIPrintChar
.114d	68		pla				pla
.114e					AWIWriteHex:
.114e	48		pha				pha
.114f	4a		lsr a				lsr 	a
.1150	4a		lsr a				lsr 	a
.1151	4a		lsr a				lsr 	a
.1152	4a		lsr a				lsr 	a
.1153	20 57 11	jsr $1157			jsr 	AWIPrintNibble
.1156	68		pla				pla
.1157					AWIPrintNibble:
.1157	29 0f		and #$0f			and 	#15
.1159	c9 0a		cmp #$0a			cmp 	#10
.115b	90 02		bcc $115f			bcc 	_AWIPNDigit
.115d	69 06		adc #$06			adc 	#6
.115f					_AWIPNDigit:
.115f	69 30		adc #$30			adc 	#48
.1161					AWIPrintChar:
.1161	85 32		sta $32				sta 	tempShort
.1163	8a		txa				txa
.1164	48		pha				pha
.1165	a5 32		lda $32				lda 	tempShort
.1167	a2 16		ldx #$16		ldx	#22
.1169	20 1e 14	jsr $141e		jsr	deviceHandler
.116c	68		pla				pla
.116d	aa		tax				tax
.116e	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblecmd.asm

.0af3					asmToken:
>0af3							.fill 	1
.0af4					asmMode:
>0af4							.fill 	1 							; esInt0/1
.0af5					asmBaseOpcode:
>0af5							.fill 	1
.116f					AssembleOneInstruction:
.116f	8d f3 0a	sta $0af3			sta 	asmToken 					; save the token
.1172	aa		tax				tax
.1173	bd 3f 11	lda $113f,x			lda 	OpcodeTable-TKA_GROUP1,x 	; get the base opcode.
.1176	8d f5 0a	sta $0af5			sta 	asmBaseOpcode
.1179	20 2d 10	jsr $102d			jsr 	AsmGetOperand 				; identify the address mode and operand where applicable.
.117c	8d f4 0a	sta $0af4			sta 	asmMode
.117f	a5 50		lda $50				lda 	esInt1 						; check if this is a three byte operand.
.1181	d0 05		bne $1188			bne 	_AOIThreeBytes 				; if so, we have to use three byte
.1183	20 9e 11	jsr $119e			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (2 bytes)
.1186	b0 10		bcs $1198			bcs 	_AOISuccess 				; worked ok.
.1188					_AOIThreeBytes:
.1188	ae f4 0a	ldx $0af4			ldx 	asmMode 					; convert mode to 3 byte version, where possible.
.118b	bd c2 11	lda $11c2,x			lda 	AbsoluteVersionTable,x
.118e	30 09		bmi $1199			bmi 	_AOIError					; not possible, no equivalent.
.1190	8d f4 0a	sta $0af4			sta 	asmMode
.1193	20 9e 11	jsr $119e			jsr 	AssembleAttempt 			; try to assemble token/mode/operand (3 bytes)
.1196	90 01		bcc $1199			bcc 	_AOIError 					; didn't work.
.1198					_AOISuccess:
.1198	60		rts				rts
.1199					_AOIError:
.1199	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.119b	20 3f 14	jsr $143f		jsr	errorHandler
.119e					AssembleAttempt:
.119e	20 a7 11	jsr $11a7			jsr 	_AADispatch 				; go to the code which dispatches to the appropriate
.11a1	b0 03		bcs $11a6			bcs 	_AAExit 					; exit if carry set, e.g. was successful
.11a3	20 e0 12	jsr $12e0			jsr 	AssembleSpecialCase
.11a6					_AAExit:
.11a6	60		rts				rts
.11a7					_AADispatch:
.11a7	ad f3 0a	lda $0af3			lda 	asmToken
.11aa	c9 b4		cmp #$b4			cmp 	#TKA_GROUP4
.11ac	b0 11		bcs $11bf			bcs 	_AAGroup4
.11ae	c9 ab		cmp #$ab			cmp 	#TKA_GROUP3
.11b0	b0 0a		bcs $11bc			bcs 	_AAGroup3
.11b2	c9 99		cmp #$99			cmp 	#TKA_GROUP2
.11b4	b0 03		bcs $11b9			bcs 	_AAGroup2
.11b6	4c 44 12	jmp $1244			jmp 	AssembleGroup1
.11b9					_AAGroup2:
.11b9	4c 9f 12	jmp $129f			jmp 	AssembleGroup2
.11bc					_AAGroup3:
.11bc	4c a2 12	jmp $12a2			jmp 	AssembleGroup3
.11bf					_AAGroup4:
.11bf	4c d6 12	jmp $12d6			jmp 	AssembleGroup4
.11c2					AbsoluteVersionTable:
>11c2	ff						.byte	$FF 			; fail AMD_IMM
>11c3	03						.byte	AMD_ABS 		; absolute AMD_ZERO
>11c4	ff						.byte	$FF 			; fail AMD_ACCIMP
>11c5	ff						.byte	$FF 			; fail AMD_ABS
>11c6	ff						.byte 	$FF 			; fail AMD_ZEROINDY
>11c7	07						.byte	AMD_ABSX 		; absolute AMD_ZEROX
>11c8	ff						.byte	$FF 			; fail AMD_ABSY
>11c9	ff						.byte	$FF 			; fail AMD_ABSX
>11ca	0a						.byte	AMD_ABSIND 		; absolute AMD_ZEROIND
>11cb	06						.byte	AMD_ABSY 		; absolute AMD_ZEROY
>11cc	ff						.byte	$FF 			; fail AMD_ABSIND
>11cd	ff						.byte	$FF 			; fail AMD_ABSINDX
>11ce	ff						.byte	$FF 			; fail AMD_REL
>11cf	0b						.byte 	AMD_ABSINDX 	; absolute AMD_ZEROINDX

;******  Processing file: assembler/../generated/asmtables.inc

.11d0					OpcodeTable:
>11d0	01					.byte	$01			; $91 ora
>11d1	21					.byte	$21			; $92 (and)
>11d2	41					.byte	$41			; $93 eor
>11d3	61					.byte	$61			; $94 adc
>11d4	81					.byte	$81			; $95 sta
>11d5	a1					.byte	$a1			; $96 lda
>11d6	c1					.byte	$c1			; $97 cmp
>11d7	e1					.byte	$e1			; $98 sbc
>11d8	02					.byte	$02			; $99 asl
>11d9	22					.byte	$22			; $9a rol
>11da	42					.byte	$42			; $9b lsr
>11db	62					.byte	$62			; $9c ror
>11dc	82					.byte	$82			; $9d stx
>11dd	a2					.byte	$a2			; $9e ldx
>11de	c2					.byte	$c2			; $9f dec
>11df	e2					.byte	$e2			; $a0 inc
>11e0	60					.byte	$60			; $a1 stz
>11e1	20					.byte	$20			; $a2 bit
>11e2	80					.byte	$80			; $a3 sty
>11e3	a0					.byte	$a0			; $a4 ldy
>11e4	c0					.byte	$c0			; $a5 cpy
>11e5	e0					.byte	$e0			; $a6 cpx
>11e6	00					.byte	$00			; $a7 tsb
>11e7	10					.byte	$10			; $a8 trb
>11e8	14					.byte	$14			; $a9 jsr
>11e9	40					.byte	$40			; $aa jmp
>11ea	10					.byte	$10			; $ab bpl
>11eb	30					.byte	$30			; $ac bmi
>11ec	50					.byte	$50			; $ad bvc
>11ed	70					.byte	$70			; $ae bvs
>11ee	90					.byte	$90			; $af bcc
>11ef	b0					.byte	$b0			; $b0 bcs
>11f0	d0					.byte	$d0			; $b1 bne
>11f1	f0					.byte	$f0			; $b2 beq
>11f2	80					.byte	$80			; $b3 bra
>11f3	00					.byte	$00			; $b4 brk
>11f4	08					.byte	$08			; $b5 php
>11f5	18					.byte	$18			; $b6 clc
>11f6	28					.byte	$28			; $b7 plp
>11f7	38					.byte	$38			; $b8 sec
>11f8	40					.byte	$40			; $b9 rti
>11f9	48					.byte	$48			; $ba pha
>11fa	58					.byte	$58			; $bb cli
>11fb	5a					.byte	$5a			; $bc phy
>11fc	60					.byte	$60			; $bd rts
>11fd	68					.byte	$68			; $be pla
>11fe	78					.byte	$78			; $bf sei
>11ff	7a					.byte	$7a			; $c0 ply
>1200	88					.byte	$88			; $c1 dey
>1201	8a					.byte	$8a			; $c2 txa
>1202	98					.byte	$98			; $c3 tya
>1203	9a					.byte	$9a			; $c4 txs
>1204	a8					.byte	$a8			; $c5 tay
>1205	aa					.byte	$aa			; $c6 tax
>1206	b8					.byte	$b8			; $c7 clv
>1207	ba					.byte	$ba			; $c8 tsx
>1208	c8					.byte	$c8			; $c9 iny
>1209	ca					.byte	$ca			; $ca dex
>120a	d8					.byte	$d8			; $cb cld
>120b	da					.byte	$da			; $cc phx
>120c	e8					.byte	$e8			; $cd inx
>120d	ea					.byte	$ea			; $ce nop
>120e	f8					.byte	$f8			; $cf sed
>120f	fa					.byte	$fa			; $d0 plx
.1210					Group2OpcodeAvailability:
>1210	57					.byte	$57			; $99 asl $02
>1211	57					.byte	$57			; $9a rol $22
>1212	57					.byte	$57			; $9b lsr $42
>1213	57					.byte	$57			; $9c ror $62
>1214	05					.byte	$05			; $9d stx $82
>1215	05					.byte	$05			; $9e ldx $a2
>1216	55					.byte	$55			; $9f dec $c2
>1217	55					.byte	$55			; $a0 inc $e2
>1218	11					.byte	$11			; $a1 stz $60
>1219	55					.byte	$55			; $a2 bit $20
>121a	05					.byte	$05			; $a3 sty $80
>121b	55					.byte	$55			; $a4 ldy $a0
>121c	15					.byte	$15			; $a5 cpy $c0
>121d	05					.byte	$05			; $a6 cpx $e0
>121e	05					.byte	$05			; $a7 tsb $00
>121f	05					.byte	$05			; $a8 trb $10
>1220	04					.byte	$04			; $a9 jsr $14
>1221	04					.byte	$04			; $aa jmp $40
.1222					AssemblerSpecialCases:
>1222	aa 0a 6c				.byte	$aa,10,$6c		; jmp (abs)
>1225	aa 0b 7c				.byte	$aa,11,$7c		; jmp (abs,x)
>1228	9e 06 be				.byte	$9e,6,$be		; ldx abs,y
>122b	9e 09 b6				.byte	$9e,9,$b6		; ldx zp,y
>122e	9d 09 96				.byte	$9d,9,$96		; stx zp,y
>1231	a0 02 1a				.byte	$a0,2,$1a		; inc acc
>1234	9f 02 3a				.byte	$9f,2,$3a		; dec acc
>1237	a2 00 89				.byte	$a2,0,$89		; bit #
>123a	a1 03 9c				.byte	$a1,3,$9c		; stz abs
>123d	a1 07 9e				.byte	$a1,7,$9e		; stz abs,x
>1240	00					.byte	0

;******  Return to file: assembler/assemblecmd.asm


;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/assemblelabel.asm

.1241					AssembleLabel:
>1241	db						.byte 	$DB
.1242	ea		nop				nop
.1243	60		rts				rts

;******  Return to file: assembler/assembler.asm


;******  Processing file: assembler/subgroup.asm

.1244					AssembleGroup1:
.1244	ad f3 0a	lda $0af3			lda 	asmToken 					; firstly, we throw out STA immediate
.1247	c9 95		cmp #$95			cmp 	#TKW_STA
.1249	d0 07		bne $1252			bne 	_AG1NotStoreImm
.124b	ad f4 0a	lda $0af4			lda 	asmMode
.124e	c9 00		cmp #$00			cmp 	#AMD_IMM
.1250	f0 2c		beq $127e			beq 	AG1ModeError
.1252					_AG1NotStoreImm:
.1252	ae f4 0a	ldx $0af4			ldx 	asmMode						; get mode into X.
.1255	bd 83 12	lda $1283,x			lda		AMDOperandSize,X 			; get the size of the operand and push on stack
.1258	48		pha				pha
.1259	f0 23		beq $127e			beq 	AG1ModeError 				; if the size is zero, the mode must be Accumulator
.125b	e0 00		cpx #$00			cpx 	#0 							; if the mode is zero, e.g. immediate
.125d	d0 02		bne $1261			bne 	_AG1NotImmediate
.125f	a2 02		ldx #$02			ldx 	#2 							; then we use offset 2 here. This is how the 6502
.1261					_AG1NotImmediate:
.1261	e0 0d		cpx #$0d			cpx 	#AMD_ZEROINDX 				; (zero,x) uses slot 0.
.1263	d0 02		bne $1267			bne 	_AG1NotZX
.1265	a2 00		ldx #$00			ldx 	#0
.1267					_AG1NotZX:
.1267	e0 09		cpx #$09			cpx 	#9 							; anything > 8 fails.
.1269	b0 11		bcs $127c			bcs 	_AG1Fail
.126b	68		pla				pla 								; restore length
.126c	85 32		sta $32				sta 	tempShort
.126e	18		clc				clc
.126f	bd 91 12	lda $1291,x			lda 	AMDOffsetFromBase,X 				; get the offset
.1272	6d f5 0a	adc $0af5			adc 	asmBaseOpcode 				; add the base opcode.
.1275	a6 32		ldx $32				ldx 	tempShort 					; length in X
.1277	20 da 10	jsr $10da			jsr 	AsmWriteInstruction 		; output instruction.
.127a	38		sec				sec
.127b	60		rts				rts
.127c					_AG1Fail:
.127c	18		clc				clc
.127d	60		rts				rts
.127e					AG1ModeError:
.127e	a2 23		ldx #$23			ldx 	#ErrorID_Assembler
.1280	20 3f 14	jsr $143f		jsr	errorHandler
.1283					AMDOperandSize:
>1283	01 01 00 02					.byte 	1,1,0,2
>1287	01 01 02 02					.byte 	1,1,2,2
>128b	01 01 02 02					.byte 	1,1,2,2
>128f	01 01						.byte 	1,1
.1291					AMDOffsetFromBase:
>1291	00 04 08 0c					.byte 	0,4,8,12
>1295	10 14 18 1c					.byte	16,20,24,28
>1299	11 00 00 00					.byte 	17,0,0,0
>129d	00 00						.byte 	0,0
.129f					AssembleGroup2:
>129f	db						.byte 	$DB
.12a0	18		clc				clc
.12a1	60		rts				rts
.12a2					AssembleGroup3:
.12a2	ad 38 0a	lda $0a38			lda 	SingleLetterVar+("O"-"A")*4	; check bit 0 (pass) of O
.12a5	4a		lsr a				lsr 	a
.12a6	a9 00		lda #$00			lda 	#0 							; if clear, e.g. pass 1, use default zero.
.12a8	90 21		bcc $12cb			bcc 	_AG3Default
.12aa	38		sec				sec	 								; calculate branch offset
.12ab	a5 48		lda $48				lda		esInt0
.12ad	ed 3c 0a	sbc $0a3c			sbc 	SingleLetterVar+("P"-"A")*4
.12b0	aa		tax				tax
.12b1	a5 50		lda $50				lda		esInt1
.12b3	ed 3d 0a	sbc $0a3d			sbc 	SingleLetterVar+("P"-"A")*4+1
.12b6	85 50		sta $50				sta 	esInt1
.12b8	8a		txa				txa 								; add 126, now 128 too many.
.12b9	18		clc				clc 								; we can use this to check the range
.12ba	69 7e		adc #$7e			adc 	#126
.12bc	85 48		sta $48				sta 	esInt0
.12be	90 02		bcc $12c2			bcc 	_AG3NoCarry
.12c0	e6 50		inc $50				inc 	esInt1
.12c2					_AG3NoCarry:
.12c2	a5 50		lda $50				lda 	esInt1 						; check in range.
.12c4	d0 0b		bne $12d1			bne 	_AG3Range
.12c6	a5 48		lda $48				lda 	esInt0 						; fix up branch distance
.12c8	38		sec				sec
.12c9	e9 80		sbc #$80			sbc 	#128
.12cb					_AG3Default:
.12cb	85 48		sta $48				sta 	esInt0
.12cd					_AG3ExitOk:
.12cd	a2 01		ldx #$01			ldx 	#1 							; one opcode, use AG4 Code
.12cf	d0 07		bne $12d8			bne 	AG4Write
.12d1					_AG3Range:
.12d1	a2 24		ldx #$24			ldx 	#ErrorID_Branch
.12d3	20 3f 14	jsr $143f		jsr	errorHandler
.12d6					AssembleGroup4:
.12d6	a2 00		ldx #$00			ldx 	#0 							; no parameters in the opcode.
.12d8					AG4Write:
.12d8	ad f5 0a	lda $0af5			lda 	asmBaseOpcode				; the opcode is the opcode base.
.12db	20 da 10	jsr $10da			jsr 	AsmWriteInstruction 		; output instruction.
.12de	38		sec				sec
.12df	60		rts				rts
.12e0					AssembleSpecialCase:
>12e0	db						.byte 	$DB
.12e1	18		clc				clc
.12e2	60		rts				rts

;******  Return to file: assembler/assembler.asm

.12e3					assemblerHandler:
.12e3	7c e6 12	jmp ($12e6,x)			jmp 	(assemblerVectors,x)
.12e6					assemblerVectors:
>12e6	6f 11					.word AssembleOneInstruction ; index 0
>12e8	41 12					.word AssembleLabel        ; index 2

;******  Return to file: basic.asm

.12ea					section_end_assembler:
.12ea					section_start_device:

;******  Processing file: device/device.asm


;******  Processing file: device/option_x16/x16break.asm

.12ea					X16Break:
.12ea	20 e1 ff	jsr $ffe1			jsr 	$FFE1
.12ed	f0 01		beq $12f0			beq 	_IsBreak
.12ef	60		rts				rts
.12f0					_IsBreak:
.12f0	a2 20		ldx #$20			ldx 	#ErrorID_Break
.12f2	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16file.asm

.12f5					ExternSave:
.12f5	98		tya				tya
.12f6	48		pha				pha
.12f7	20 45 13	jsr $1345			jsr 	ExternGetLength 			; get length of file into A name YX
.12fa	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.12fd	a9 01		lda #$01			lda 	#1
.12ff	a2 08		ldx #$08			ldx 	#8	 						; device #8
.1301	a0 00		ldy #$00			ldy 	#0
.1303	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1306	a5 49		lda $49				lda 	esInt0+1 					; copy start of save address to temp0
.1308	85 2a		sta $2a				sta 	temp0
.130a	a5 51		lda $51				lda 	esInt1+1
.130c	85 2b		sta $2b				sta 	temp0+1
.130e	a6 4a		ldx $4a				ldx 	esInt0+2 					; end address
.1310	a4 52		ldy $52				ldy 	esInt1+2
.1312	a9 2a		lda #$2a			lda 	#temp0 						; ref to start address
.1314	20 d8 ff	jsr $ffd8			jsr 	$FFD8 						; save
.1317	b0 03		bcs $131c			bcs 	_ESSave
.1319	68		pla				pla
.131a	a8		tay				tay
.131b	60		rts				rts
.131c					_ESSave:
.131c	a2 1e		ldx #$1e			ldx 	#ErrorID_Save
.131e	20 3f 14	jsr $143f		jsr	errorHandler
.1321					ExternLoad:
.1321	98		tya				tya
.1322	48		pha				pha
.1323	20 45 13	jsr $1345			jsr 	ExternGetLength 			; get length of file into A name YX
.1326	20 bd ff	jsr $ffbd			jsr 	$FFBD 						; set name
.1329	a9 01		lda #$01			lda 	#1
.132b	a2 08		ldx #$08			ldx 	#8	 						; device #8
.132d	a0 00		ldy #$00			ldy 	#0
.132f	20 ba ff	jsr $ffba			jsr 	$FFBA 						; set LFS
.1332	a6 49		ldx $49				ldx 	esInt0+1 					; load address
.1334	a4 51		ldy $51				ldy 	esInt1+1
.1336	a9 00		lda #$00			lda 	#0 							; load command
.1338	20 d5 ff	jsr $ffd5			jsr 	$FFD5
.133b	b0 03		bcs $1340			bcs 	_ESLoad
.133d	68		pla				pla
.133e	a8		tay				tay
.133f	60		rts				rts
.1340					_ESLoad:
.1340	a2 1f		ldx #$1f			ldx 	#ErrorID_Load
.1342	20 3f 14	jsr $143f		jsr	errorHandler
.1345					ExternGetLength:
.1345	a5 48		lda $48				lda 	esInt0 						; length into A.
.1347	85 2a		sta $2a				sta 	temp0
.1349	a5 50		lda $50				lda 	esInt1
.134b	85 2b		sta $2b				sta 	temp0+1
.134d	a0 00		ldy #$00			ldy 	#0
.134f	b1 2a		lda ($2a),y			lda 	(temp0),y
.1351	a6 48		ldx $48				ldx 	esInt0 						; name into YX
.1353	a4 50		ldy $50				ldy 	esInt1
.1355	e8		inx				inx 								; advance over the length pointer.
.1356	d0 01		bne $1359			bne 	_ESNoCarry
.1358	c8		iny				iny
.1359					_ESNoCarry:
.1359	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16io.asm

=240					MaxLineInputSize = 240
.0af6					bufferCount:
>0af6							.fill 	0
.0af6					bufferStorage:
>0af6							.fill 	MaxLineInputSize
.135a					IOInitialise:
.135a	a9 0f		lda #$0f			lda 	#15 						; switch to upper/lower case mode
.135c	20 85 13	jsr $1385			jsr 	IOPrintChar
.135f	a9 02		lda #$02			lda 	#2 							; green on black and clear screen
.1361	20 b1 13	jsr $13b1			jsr 	IOInk
.1364	a9 00		lda #$00			lda 	#0
.1366	20 c5 13	jsr $13c5			jsr 	IOPaper
.1369	20 6d 13	jsr $136d			jsr 	IOClearScreen
.136c	60		rts				rts
.136d					IOClearScreen:
.136d	48		pha				pha
.136e	a9 93		lda #$93			lda	 	#147 						; char code $93 clears screen
.1370	20 85 13	jsr $1385			jsr 	IOPrintChar
.1373	68		pla				pla
.1374	60		rts				rts
.1375					IONewLine:
.1375	48		pha				pha
.1376	a9 0d		lda #$0d			lda 	#13
.1378	20 85 13	jsr $1385			jsr 	IOPrintChar
.137b	68		pla				pla
.137c	60		rts				rts
.137d					IOTab:
.137d	48		pha				pha
.137e	a9 20		lda #$20			lda 	#32
.1380	20 85 13	jsr $1385			jsr 	IOPrintChar
.1383	68		pla				pla
.1384	60		rts				rts
.1385					IOPrintAscii:
.1385					IOPrintChar:
.1385	aa		tax				tax 								; save in X so we can save Y
.1386	5a		phy				phy
.1387	8a		txa				txa
.1388	c9 08		cmp #$08			cmp 	#8 							; make BS (8) onto CHR$(14) which is the
.138a	d0 02		bne $138e			bne 	_IOPCNotBS 					; Commodore/X16 backspace code.
.138c	a9 14		lda #$14			lda 	#$14
.138e					_IOPCNotBS:
.138e	20 d2 ff	jsr $ffd2			jsr 	$FFD2 						; CBM OS Call.
.1391	7a		ply				ply
.1392	60		rts				rts
.1393					IOInkey:
.1393	98		tya				tya
.1394	48		pha				pha
.1395	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.1398	85 32		sta $32				sta 	tempShort
.139a	68		pla				pla
.139b	a8		tay				tay
.139c	a5 32		lda $32				lda 	tempShort					; no key pressed.
.139e	f0 10		beq $13b0			beq 	_IOIExit
.13a0	c9 0d		cmp #$0d			cmp 	#13 						; allow CR (13)
.13a2	f0 0c		beq $13b0			beq 	_IOIExit
.13a4	c9 14		cmp #$14			cmp 	#$14 						; backspace code ($14) returns 8.
.13a6	f0 06		beq $13ae			beq 	_IOIBackspace
.13a8	c9 20		cmp #$20			cmp 	#32 						; no other control allowed.
.13aa	90 e7		bcc $1393			bcc 	IOInkey
.13ac	b0 02		bcs $13b0			bcs 	_IOIExit
.13ae					_IOIBackspace:
.13ae	a9 08		lda #$08			lda 	#8 							; return chr(8)
.13b0					_IOIExit:
.13b0	60		rts				rts
.13b1					IOInk:
.13b1	48		pha				pha
.13b2	29 07		and #$07			and 	#7 							; 8 primaries
.13b4	aa		tax				tax
.13b5	bd bd 13	lda $13bd,x			lda 	_IOColourTable,x 			; look up CBM code and print it.
.13b8	20 85 13	jsr $1385			jsr 	IOPrintChar
.13bb	68		pla				pla
.13bc	60		rts				rts
.13bd					_IOColourTable:
>13bd	90						.byte 	$90 					; 0 Black
>13be	96						.byte 	$96 					; 1 Red
>13bf	1e						.byte 	$1E 					; 2 Green
>13c0	9e						.byte 	$9E 					; 3 Yellow
>13c1	9a						.byte 	$9A 					; 4 Blue
>13c2	9c						.byte 	$9C 					; 5 Magenta
>13c3	9f						.byte 	$9F 					; 6 Cyan
>13c4	05						.byte 	$05 					; 7 White
.13c5					IOPaper:
.13c5	48		pha				pha
.13c6	48		pha				pha
.13c7	a9 01		lda #$01			lda 	#1 						; 1 swaps fgr/bgr, so we swap them, set fgr
.13c9	20 85 13	jsr $1385			jsr 	IOPrintChar 			; and then swap them again.
.13cc	68		pla				pla
.13cd	20 b1 13	jsr $13b1			jsr 	IOInk
.13d0	a9 01		lda #$01			lda 	#1
.13d2	20 85 13	jsr $1385			jsr 	IOPrintChar
.13d5	68		pla				pla
.13d6	60		rts				rts
.13d7					IOLocate:
.13d7	48		pha				pha
.13d8	a9 13		lda #$13			lda 	#$13 					; home cursor code
.13da	20 85 13	jsr $1385			jsr 	IOPrintChar
.13dd	a9 11		lda #$11			lda 	#$11 	 				; print Y x $11 (down)
.13df	20 e6 13	jsr $13e6			jsr 	_IOLoc2
.13e2	68		pla				pla
.13e3	a8		tay				tay
.13e4	a9 1d		lda #$1d			lda 	#$1D 					; print Y x $1D (right)
.13e6					_IOLoc2:
.13e6	c0 00		cpy #$00			cpy 	#0
.13e8	f0 06		beq $13f0			beq 	_IOLocExit
.13ea	20 85 13	jsr $1385			jsr 	IOPrintChar
.13ed	88		dey				dey
.13ee	d0 f6		bne $13e6			bne 	_IOLoc2
.13f0					_IOLocExit:
.13f0	60		rts				rts
.13f1					IOInput:
.13f1	a9 00		lda #$00			lda 	#0
.13f3	8d f6 0a	sta $0af6			sta 	bufferCount
.13f6					_IOILoop:
.13f6	20 cf ff	jsr $ffcf			jsr 	$FFCF
.13f9	c9 0d		cmp #$0d			cmp 	#13
.13fb	f0 10		beq $140d			beq 	_IOIExit
.13fd	ae f6 0a	ldx $0af6			ldx 	bufferCount
.1400	e0 f0		cpx #$f0			cpx 	#MaxLineInputSize
.1402	f0 f2		beq $13f6			beq 	_IOILoop
.1404	ee f6 0a	inc $0af6			inc 	bufferCount
.1407	9d f7 0a	sta $0af7,x			sta 	bufferStorage+1,x
.140a	4c f6 13	jmp $13f6			jmp 	_IOILoop
.140d					_IOIExit:
.140d	a9 f6		lda #$f6			lda 	#(bufferCount) & $FF
.140f	85 2a		sta $2a				sta 	temp0
.1411	a9 0a		lda #$0a			lda 	#(bufferCount) >> 8
.1413	85 2b		sta $2b				sta 	1+(temp0)
.1415	60		rts				rts

;******  Return to file: device/device.asm


;******  Processing file: device/option_x16/x16timer.asm

.1416					IOReadTimer:
.1416	20 de ff	jsr $ffde			jsr 	$FFDE 						; reads timer into YXA so we want only YA
.1419	48		pha				pha
.141a	8a		txa				txa
.141b	a8		tay				tay
.141c	68		pla				pla
.141d	60		rts				rts

;******  Return to file: device/device.asm

.141e					deviceHandler:
.141e	7c 21 14	jmp ($1421,x)			jmp 	(deviceVectors,x)
.1421					deviceVectors:
>1421	ea 12					.word X16Break             ; index 0
>1423	6d 13					.word IOClearScreen        ; index 2
>1425	75 13					.word IONewLine            ; index 4
>1427	5a 13					.word IOInitialise         ; index 6
>1429	b1 13					.word IOInk                ; index 8
>142b	93 13					.word IOInkey              ; index 10
>142d	f1 13					.word IOInput              ; index 12
>142f	21 13					.word ExternLoad           ; index 14
>1431	d7 13					.word IOLocate             ; index 16
>1433	c5 13					.word IOPaper              ; index 18
>1435	85 13					.word IOPrintChar          ; index 20
>1437	85 13					.word IOPrintAscii         ; index 22
>1439	f5 12					.word ExternSave           ; index 24
>143b	7d 13					.word IOTab                ; index 26
>143d	16 14					.word IOReadTimer          ; index 28

;******  Return to file: basic.asm

.143f					section_end_device:
.143f					section_start_error:

;******  Processing file: error/error.asm


;******  Processing file: error/errorhandler.asm

.143f					ErrorHandler:
.143f	8a		txa				txa
.1440	48		pha				pha
.1441	a9 01		lda #$01			lda 	#1 							; red
.1443	a2 08		ldx #$08		ldx	#8
.1445	20 1e 14	jsr $141e		jsr	deviceHandler
.1448	68		pla				pla
.1449	aa		tax				tax
.144a	a9 b5		lda #$b5			lda 	#(ErrorTextList) & $FF
.144c	85 2a		sta $2a				sta 	temp0
.144e	a9 14		lda #$14			lda 	#(ErrorTextList) >> 8
.1450	85 2b		sta $2b				sta 	1+(temp0)
.1452	ca		dex		_EHFind:dex									; errors start at 1
.1453	f0 10		beq $1465			beq 	_EHFound
.1455	a0 00		ldy #$00			ldy 	#0 							; goto next text message, add length + 1 to the pointer.
.1457	38		sec				sec
.1458	a5 2a		lda $2a				lda 	temp0
.145a	71 2a		adc ($2a),y			adc 	(temp0),y
.145c	85 2a		sta $2a				sta 	temp0
.145e	90 f2		bcc $1452			bcc 	_EHFind
.1460	e6 2b		inc $2b				inc 	temp0+1
.1462	4c 52 14	jmp $1452			jmp 	_EHFind
.1465					_EHFound:
.1465	20 2b 17	jsr $172b			jsr 	EHPrintAscii 				; print the string "temp0" now points to.
.1468	a0 00		ldy #$00			ldy 	#0 							; in a line, e.g. the offset to next is non zero.
.146a	b1 28		lda ($28),y			lda 	(codePtr),y
.146c	f0 39		beq $14a7			beq 	_EHNoLine
.146e	a5 29		lda $29				lda 	codePtr+1 					; code running from the command line.
.1470	cd c9 0a	cmp $0ac9			cmp 	basePage+1
.1473	90 32		bcc $14a7			bcc 	_EHNoLine
.1475	a9 b1		lda #$b1			lda 	#(EHAtMsg) & $FF
.1477	85 2a		sta $2a				sta 	temp0
.1479	a9 14		lda #$14			lda 	#(EHAtMsg) >> 8
.147b	85 2b		sta $2b				sta 	1+(temp0)
.147d	20 2b 17	jsr $172b			jsr 	EHPrintAscii
.1480	a0 01		ldy #$01			ldy 	#1 							; set up line number in TOS
.1482	a2 00		ldx #$00			ldx 	#0
.1484	b1 28		lda ($28),y			lda 	(codePtr),y
.1486	95 48		sta $48,x			sta 	esInt0,x
.1488	c8		iny				iny
.1489	b1 28		lda ($28),y			lda 	(codePtr),y
.148b	95 50		sta $50,x			sta 	esInt1,x
.148d	a9 00		lda #$00			lda 	#0
.148f	95 58		sta $58,x			sta 	esInt2,x
.1491	95 60		sta $60,x			sta 	esInt3,x
.1493	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1495	85 2a		sta $2a				sta 	temp0
.1497	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1499	85 2b		sta $2b				sta 	1+(temp0)
.149b	a0 0a		ldy #$0a			ldy 	#10 						; in base 10.
.149d	a9 00		lda #$00			lda 	#0							; stack position zero.
.149f	a2 0c		ldx #$0c		ldx	#12
.14a1	20 bc 30	jsr $30bc		jsr	mainHandler
.14a4	20 2b 17	jsr $172b			jsr 	EHPrintAscii
.14a7					_EHNoLine:
.14a7	a2 04		ldx #$04		ldx	#4
.14a9	20 1e 14	jsr $141e		jsr	deviceHandler
.14ac	a2 02		ldx #$02		ldx	#2
.14ae	20 31 1a	jsr $1a31		jsr	interactionHandler
.14b1					EHAtMsg:
>14b1	03 20 40 20					.text 	3," @ "

;******  Processing file: error/../generated/errortext.inc

.14b5					ErrorTextList:
>14b5	13 46 65 61 74 75 72 65			.text 19,"Feature not Present"
>14bd	20 6e 6f 74 20 50 72 65 73 65 6e 74
>14c9	0c 53 79 6e 74 61 78 20			.text 12,"Syntax Error"
>14d1	45 72 72 6f 72
>14d6	0f 4d 6f 64 75 6c 65 20			.text 15,"Module disabled"
>14de	64 69 73 61 62 6c 65 64
>14e6	10 41 73 73 65 72 74 69			.text 16,"Assertion failed"
>14ee	6f 6e 20 66 61 69 6c 65 64
>14f7	0e 44 69 76 69 64 65 20			.text 14,"Divide By Zero"
>14ff	42 79 20 5a 65 72 6f
>1506	04 53 74 6f 70				.text 4,"Stop"
>150b	0d 54 79 70 65 20 4d 69			.text 13,"Type Mismatch"
>1513	73 6d 61 74 63 68
>1519	0d 49 6c 6c 65 67 61 6c			.text 13,"Illegal Value"
>1521	20 56 61 6c 75 65
>1527	15 4d 69 73 73 69 6e 67			.text 21,"Missing right bracket"
>152f	20 72 69 67 68 74 20 62 72 61 63 6b 65 74
>153d	0d 4d 69 73 73 69 6e 67			.text 13,"Missing comma"
>1545	20 63 6f 6d 6d 61
>154b	11 4d 69 73 73 69 6e 67			.text 17,"Missing reference"
>1553	20 72 65 66 65 72 65 6e 63 65
>155d	15 4c 69 6e 65 20 4e 75			.text 21,"Line Number not found"
>1565	6d 62 65 72 20 6e 6f 74 20 66 6f 75 6e 64
>1573	0f 53 74 72 69 6e 67 20			.text 15,"String too long"
>157b	74 6f 6f 20 6c 6f 6e 67
>1583	14 52 45 54 55 52 4e 20			.text 20,"RETURN without GOSUB"
>158b	77 69 74 68 6f 75 74 20 47 4f 53 55 42
>1598	14 55 4e 54 49 4c 20 77			.text 20,"UNTIL without REPEAT"
>15a0	69 74 68 6f 75 74 20 52 45 50 45 41 54
>15ad	10 4e 45 58 54 20 77 69			.text 16,"NEXT without FOR"
>15b5	74 68 6f 75 74 20 46 4f 52
>15be	12 57 45 4e 44 20 77 69			.text 18,"WEND without WHILE"
>15c6	74 68 6f 75 74 20 57 48 49 4c 45
>15d1	14 45 4e 44 50 52 4f 43			.text 20,"ENDPROC without PROC"
>15d9	20 77 69 74 68 6f 75 74 20 50 52 4f 43
>15e6	0e 42 61 64 20 4e 45 58			.text 14,"Bad NEXT index"
>15ee	54 20 69 6e 64 65 78
>15f5	17 53 74 72 75 63 74 75			.text 23,"Structures nested wrong"
>15fd	72 65 73 20 6e 65 73 74 65 64 20 77 72 6f 6e 67
>160d	16 43 61 6e 6e 6f 74 20			.text 22,"Cannot create variable"
>1615	63 72 65 61 74 65 20 76 61 72 69 61 62 6c 65
>1624	19 52 65 74 75 72 6e 20			.text 25,"Return stack out of space"
>162c	73 74 61 63 6b 20 6f 75 74 20 6f 66 20 73 70 61
>163c	63 65
>163e	11 55 6e 6b 6e 6f 77 6e			.text 17,"Unknown Procedure"
>1646	20 50 72 6f 63 65 64 75 72 65
>1650	17 50 61 72 61 6d 65 74			.text 23,"Parameters do not match"
>1658	65 72 73 20 64 6f 20 6e 6f 74 20 6d 61 74 63 68
>1668	15 41 72 72 61 79 20 61			.text 21,"Array already defined"
>1670	6c 72 65 61 64 79 20 64 65 66 69 6e 65 64
>167e	12 44 49 4d 20 72 65 71			.text 18,"DIM requires array"
>1686	75 69 72 65 73 20 61 72 72 61 79
>1691	0f 42 61 64 20 61 72 72			.text 15,"Bad array index"
>1699	61 79 20 69 6e 64 65 78
>16a1	0b 4f 75 74 20 6f 66 20			.text 11,"Out of data"
>16a9	64 61 74 61
>16ad	14 43 61 6e 6e 6f 74 20			.text 20,"Cannot tokenise line"
>16b5	74 6f 6b 65 6e 69 73 65 20 6c 69 6e 65
>16c2	0b 53 61 76 65 20 66 61			.text 11,"Save failed"
>16ca	69 6c 65 64
>16ce	0b 4c 6f 61 64 20 66 61			.text 11,"Load failed"
>16d6	69 6c 65 64
>16da	05 42 72 65 61 6b			.text 5,"Break"
>16e0	0d 4f 75 74 20 6f 66 20			.text 13,"Out of memory"
>16e8	6d 65 6d 6f 72 79
>16ee	16 45 78 70 72 65 73 73			.text 22,"Expression too complex"
>16f6	69 6f 6e 20 74 6f 6f 20 63 6f 6d 70 6c 65 78
>1705	10 42 61 64 20 4f 70 65			.text 16,"Bad Operand/Mode"
>170d	72 61 6e 64 2f 4d 6f 64 65
>1716	13 42 72 61 6e 63 68 20			.text 19,"Branch out of range"
>171e	6f 75 74 20 6f 66 20 72 61 6e 67 65
>172a	00					.byte 0

;******  Return to file: error/errorhandler.asm

.172b					EHPrintAscii:
.172b	a0 00		ldy #$00			ldy 	#0
.172d	b1 2a		lda ($2a),y			lda 	(temp0),y
.172f	aa		tax				tax
.1730	f0 0f		beq $1741			beq 	_EHPExit
.1732					_EHPLoop:
.1732	c8		iny				iny
.1733	8a		txa				txa
.1734	48		pha				pha
.1735	b1 2a		lda ($2a),y			lda 	(temp0),y
.1737	a2 16		ldx #$16		ldx	#22
.1739	20 1e 14	jsr $141e		jsr	deviceHandler
.173c	68		pla				pla
.173d	aa		tax				tax
.173e	ca		dex				dex
.173f	d0 f1		bne $1732			bne 	_EHPLoop
.1741					_EHPExit:
.1741	60		rts				rts

;******  Return to file: error/error.asm


;******  Return to file: basic.asm

.1742					section_end_error:
.1742					section_start_extension:

;******  Processing file: extension/extension.asm


;******  Processing file: extension/extensionhandler.asm

.1742					ExtensionHandler:
.1742	c9 ff		cmp #$ff			cmp 	#$FF						; A = $FF command, otherwise unary function stack level.
.1744	d0 08		bne $174e			bne 	_ExtensionUnary 			; is passed in A.
.1746	b1 28		lda ($28),y			lda 	(codePtr),y 				; so this is a command, using Group 2.
.1748	c8		iny				iny
.1749	0a		asl a				asl 	a
.174a	aa		tax				tax
.174b	7c 4c 17	jmp ($174c,x)			jmp 	(Group2Vectors-12,x)
.174e					_ExtensionUnary:
.174e	48		pha				pha 								; save stack pos in A
.174f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted token, double into X
.1751	c8		iny				iny
.1752	0a		asl a				asl 	a
.1753	aa		tax				tax
.1754	68		pla				pla 								; restore stack pos and call group3 command.
.1755	7c 52 17	jmp ($1752,x)			jmp 	(Group3Vectors-12,X)

;******  Processing file: extension/../generated/tokenvectors2.inc

.1758					Group2Vectors:
>1758	8d 17					.word	Command_VPoke            ; $86 vpoke
>175a	90 17					.word	Command_VDoke            ; $87 vdoke
>175c	6a 17					.word	Command_VLoad            ; $88 vload

;******  Return to file: extension/extensionhandler.asm


;******  Processing file: extension/../generated/tokenvectors3.inc

.175e					Group3Vectors:
>175e	d1 17					.word	Command_VPeek            ; $86 vpeek(
>1760	d4 17					.word	Command_VDeek            ; $87 vdeek(

;******  Return to file: extension/extensionhandler.asm

.1762					XEvaluateInteger:
.1762	8a		txa				txa
.1763	a2 06		ldx #$06		ldx	#6
.1765	20 bc 30	jsr $30bc		jsr	mainHandler
.1768	aa		tax				tax
.1769	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vload.asm

.176a					Command_VLoad:
.176a	a2 00		ldx #$00			ldx 	#0 								; string which is the file name
.176c	20 b6 29	jsr $29b6			jsr 	EvaluateString
.176f	e8		inx				inx
.1770	20 52 2f	jsr $2f52			jsr 	MInt32False
.1773	a5 35		lda $35				lda 	lowMemory 						; load it into lowMemory (for now ?)
.1775	95 48		sta $48,x			sta 	esInt0,x
.1777	a5 36		lda $36				lda 	lowMemory+1
.1779	95 50		sta $50,x			sta 	esInt1,x
.177b	ca		dex				dex
.177c	a2 0e		ldx #$0e		ldx	#14
.177e	20 1e 14	jsr $141e		jsr	deviceHandler
.1781	a5 49		lda $49				lda 	esInt0+1 						; (temp0) is where we are decoding from.
.1783	85 2a		sta $2a				sta 	temp0
.1785	a5 51		lda $51				lda 	esInt1+1
.1787	85 2b		sta $2b				sta 	temp0+1
.1789	20 f2 17	jsr $17f2			jsr 	LoadVRAMFile 					; load the VRAM file in.
.178c	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vpeekpoke.asm

.178d					Command_VPoke:
.178d	38		sec				sec 						; one byte , CS
.178e	b0 01		bcs $1791			bcs 	CmdVideoWrite
.1790					Command_VDoke:
.1790	18		clc				clc 						; two bytes, CC
.1791					CmdVideoWrite:
.1791	08		php				php 						; save one or two btes
.1792	a2 00		ldx #$00			ldx 	#0  				; get address and value into levels 0,1
.1794	20 62 17	jsr $1762			jsr 	XEvaluateInteger
.1797	20 d2 2f	jsr $2fd2			jsr 	CheckComma
.179a	e8		inx				inx
.179b	20 62 17	jsr $1762			jsr 	XEvaluateInteger
.179e	ca		dex				dex
.179f	20 b0 17	jsr $17b0			jsr 	SetUpTOSVRamAddress ; copy target address to VRAM address registers
.17a2	a5 49		lda $49				lda 	esInt0+1 			; get MSB of write value
.17a4	8d 23 9f	sta $9f23			sta 	$9F23
.17a7	28		plp				plp 						; if it was Poke then exit
.17a8	b0 05		bcs $17af			bcs 	_CVWExit
.17aa	a5 51		lda $51				lda 	esInt1+1 			; doke, write the MSB.
.17ac	8d 23 9f	sta $9f23			sta 	$9F23
.17af					_CVWExit:
.17af	60		rts				rts
.17b0					SetUpTOSVRamAddress:
.17b0	b5 58		lda $58,x			lda 	esInt2,x 			; check range of address, data to $FFFF
.17b2	29 01		and #$01			and 	#1
.17b4	15 60		ora $60,x			ora 	esInt3,x
.17b6	d0 14		bne $17cc			bne 	CVWValue
.17b8	b5 48		lda $48,x			lda 	esInt0,x			; set address up
.17ba	8d 20 9f	sta $9f20			sta 	$9F20
.17bd	b5 50		lda $50,x			lda 	esInt1,x
.17bf	8d 21 9f	sta $9f21			sta	 	$9F21
.17c2	b5 58		lda $58,x			lda 	esInt2,x
.17c4	29 01		and #$01			and 	#1
.17c6	09 10		ora #$10			ora 	#$10 				; step 1.
.17c8	8d 22 9f	sta $9f22			sta 	$9F22
.17cb	60		rts				rts
.17cc					CVWValue:
.17cc	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.17ce	20 3f 14	jsr $143f		jsr	errorHandler
.17d1					Command_VPeek:
.17d1	38		sec				sec 						; one byte , CS
.17d2	b0 01		bcs $17d5			bcs 	CmdVideoRead
.17d4					Command_VDeek:
.17d4	18		clc				clc 						; two bytes, CC
.17d5					CmdVideoRead:
.17d5	08		php				php 						; save action on stack.
.17d6	aa		tax				tax 						; save stack position
.17d7	20 62 17	jsr $1762			jsr 	XEvaluateInteger 	; address
.17da	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 	; closing right bracket.
.17dd	20 b0 17	jsr $17b0			jsr 	SetUpTOSVRamAddress	; set up VRAM address.
.17e0	20 52 2f	jsr $2f52			jsr 	MInt32False 		; zero return.
.17e3	ad 23 9f	lda $9f23			lda 	$9F23				; copy 1st byte
.17e6	95 48		sta $48,x			sta 	esInt0,x
.17e8	28		plp				plp 						; check if DOKE (carry was clear)
.17e9	b0 05		bcs $17f0			bcs 	_CVRExit
.17eb	ad 23 9f	lda $9f23			lda 	$9F23 				; copy 2nd byte
.17ee	95 50		sta $50,x			sta 	esInt1,x
.17f0					_CVRExit:
.17f0	8a		txa				txa 						; return X position.
.17f1	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Processing file: extension/option_x16/vramprocess.asm

.0be6					compressMode:
>0be6							.fill 	1
.17f2					LoadVRAMFile:
.17f2					_LVRLoop:
.17f2	20 42 18	jsr $1842			jsr 	LVFGet 						; get the next (never access direct)
.17f5	c9 80		cmp #$80			cmp 	#$80 						; exit ?
.17f7	f0 3a		beq $1833			beq 	_LVRExit
.17f9	b0 39		bcs $1834			bcs 	_LVRLoad 					; load data in ?
.17fb	c9 08		cmp #$08			cmp 	#$08 						; is it set address ?
.17fd	90 09		bcc $1808			bcc 	_LVRSetAddress
.17ff	c9 10		cmp #$10			cmp 	#$10 						; is it set compression type ?
.1801	90 29		bcc $182c			bcc 	_LVRSetCompress
.1803	a2 01		ldx #$01			ldx 	#ErrorID_missing
.1805	20 3f 14	jsr $143f		jsr	errorHandler
.1808					_LVRSetAddress:
.1808	85 2d		sta $2d				sta 	temp1+1 					; 24 bit in temp1+1/temp1/A
.180a	20 42 18	jsr $1842			jsr 	LVFGet
.180d	85 2c		sta $2c				sta 	temp1
.180f	a9 00		lda #$00			lda 	#0
.1811	46 2d		lsr $2d				lsr 	temp1+1 					; / 2 twice.
.1813	66 2c		ror $2c				ror 	temp1
.1815	6a		ror a				ror		a
.1816	46 2d		lsr $2d				lsr 	temp1+1
.1818	66 2c		ror $2c				ror 	temp1
.181a	6a		ror a				ror		a
.181b	8d 20 9f	sta $9f20			sta 	$9F20 						; set write address with +1 increment
.181e	a5 2c		lda $2c				lda 	temp1
.1820	8d 21 9f	sta $9f21			sta 	$9F21
.1823	a5 2d		lda $2d				lda 	temp1+1
.1825	09 10		ora #$10			ora 	#$10
.1827	8d 22 9f	sta $9f22			sta 	$9F22
.182a	d0 c6		bne $17f2			bne 	_LVRLoop
.182c					_LVRSetCompress:
.182c	29 07		and #$07			and 	#7
.182e	8d e6 0b	sta $0be6			sta 	compressMode
.1831	10 bf		bpl $17f2			bpl 	_LVRLoop
.1833					_LVRExit:
.1833	60		rts				rts
.1834					_LVRLoad:
.1834	29 7f		and #$7f			and 	#$7F 						; count in X (is > 0)
.1836	aa		tax				tax
.1837					_LVRLCopy:
.1837	20 42 18	jsr $1842			jsr 	LVFGet 						; write to data.
.183a	8d 23 9f	sta $9f23			sta 	$9F23
.183d	ca		dex				dex
.183e	d0 f7		bne $1837			bne 	_LVRLCopy
.1840	f0 b0		beq $17f2			beq 	_LVRLoop
.1842	84 32		sty $32		LVFGet:	sty 	tempShort
.1844	a0 00		ldy #$00			ldy 	#0
.1846	b1 2a		lda ($2a),y			lda 	(temp0),y
.1848	a4 32		ldy $32				ldy	 	tempShort
.184a	e6 2a		inc $2a				inc 	temp0
.184c	d0 02		bne $1850			bne 	_LVFGExit
.184e	e6 2b		inc $2b				inc 	temp0+1
.1850					_LVFGExit:
.1850	60		rts				rts

;******  Return to file: extension/extension.asm


;******  Return to file: basic.asm

.1851					section_end_extension:
.1851					section_start_floatingpoint:

;******  Processing file: floatingpoint/floatingpoint.asm

.1851					floatingpointHandler:
.1851	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1853	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: basic.asm

.1856					section_end_floatingpoint:
.1856					section_start_interaction:

;******  Processing file: interaction/interaction.asm


;******  Processing file: interaction/cold.asm

.1856					ColdStartEntry:
.1856	a2 ff		ldx #$ff			ldx 	#$FF
.1858	9a		txs				txs
.1859	a2 02		ldx #$02		ldx	#2
.185b	20 1e 14	jsr $141e		jsr	deviceHandler
.185e	a0 ff		ldy #$ff			ldy 	#255
.1860					_CSBanner:
.1860	c8		iny				iny
.1861	b9 87 18	lda $1887,y			lda 	Intro,y
.1864	f0 14		beq $187a			beq 	_CSStart
.1866	c9 08		cmp #$08			cmp 	#8
.1868	90 08		bcc $1872			bcc 	_CSInk
.186a	a2 16		ldx #$16		ldx	#22
.186c	20 1e 14	jsr $141e		jsr	deviceHandler
.186f	4c 60 18	jmp $1860			jmp 	_CSBanner
.1872					_CSInk:
.1872	a2 08		ldx #$08		ldx	#8
.1874	20 1e 14	jsr $141e		jsr	deviceHandler
.1877	4c 60 18	jmp $1860			jmp 	_CSBanner
.187a					_CSStart:
.187a	a2 10		ldx #$10		ldx	#16
.187c	20 bc 30	jsr $30bc		jsr	mainHandler
.187f	a2 02		ldx #$02		ldx	#2
.1881	20 bc 30	jsr $30bc		jsr	mainHandler
.1884	4c 9b 19	jmp $199b			jmp 	WarmStartEntry
>1887	06 2a 2a 2a 20 36 35 30		Intro:	.text 	6,"*** 6502 Extended BASIC ***",13,13
>188f	32 20 45 78 74 65 6e 64 65 64 20 42 41 53 49 43
>189f	20 2a 2a 2a 0d 0d
>18a5	03 57 72 69 74 74 65 6e				.text 	3,"Written by Paul Robson 2021",13,13
>18ad	20 62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20
>18bd	32 30 32 31 0d 0d
>18c3	02 42 61 73 69 63 20				.text 	2,"Basic "
>18ca	30 2e 31 35					.text "0.15"
>18ce	20 28						.text 	" ("
>18d0	31 35 2d 4d 61 72 2d 32				.text "15-Mar-21"
>18d8	31
>18d9	29 0d 0d 00					.text 	")",13,13,0

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/delete.asm

.18dd					DeleteLine:
.18dd	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.18e0	85 2a		sta $2a				sta 	temp0
.18e2	ad c9 0a	lda $0ac9			lda 	basePage+1
.18e5	85 2b		sta $2b				sta 	temp0+1
.18e7	a0 01		ldy #$01	_DLLoop:ldy 	#1 							; see if found line ?
.18e9	a5 48		lda $48				lda 	esInt0
.18eb	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.18ed	d0 07		bne $18f6			bne 	_DLNext
.18ef	c8		iny				iny
.18f0	a5 50		lda $50				lda 	esInt1
.18f2	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.18f4	f0 0a		beq $1900			beq 	_DLFound
.18f6	20 1e 19	jsr $191e	_DLNext:jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.18f9	d0 ec		bne $18e7			bne 	_DLLoop
.18fb	a0 00		ldy #$00			ldy 	#0 							; size of chunk to cut out.
.18fd	b1 2a		lda ($2a),y			lda 	(temp0),y
.18ff	60		rts				rts
.1900					_DLFound:
.1900	a0 00		ldy #$00			ldy 	#0 							; from here (temp0),y
.1902	b1 2a		lda ($2a),y			lda 	(temp0),y
.1904	a8		tay				tay
.1905	a2 00		ldx #$00			ldx 	#0  						; to (temp0,x)
.1907					_DLCopyDown:
.1907	b1 2a		lda ($2a),y			lda 	(temp0),y
.1909	81 2a		sta ($2a,x)			sta 	(temp0,x)
.190b	e6 2a		inc $2a				inc 	temp0 						; advance pointer
.190d	d0 02		bne $1911			bne 	_DLNoCarry
.190f	e6 2b		inc $2b				inc 	temp0+1
.1911					_DLNoCarry:
.1911	a5 2a		lda $2a				lda 	temp0 						; until hit low memory
.1913	c5 35		cmp $35				cmp 	lowMemory
.1915	d0 f0		bne $1907			bne 	_DLCopyDown
.1917	a5 2b		lda $2b				lda 	temp0+1
.1919	c5 36		cmp $36				cmp 	lowMemory+1
.191b	d0 ea		bne $1907			bne 	_DLCopyDown
.191d	60		rts				rts
.191e					IAdvanceTemp0:
.191e	84 32		sty $32				sty 	tempShort
.1920	18		clc				clc
.1921	a0 00		ldy #$00			ldy 	#0
.1923	b1 2a		lda ($2a),y			lda 	(temp0),y
.1925	65 2a		adc $2a				adc 	temp0
.1927	85 2a		sta $2a				sta 	temp0
.1929	90 02		bcc $192d			bcc 	_IATNoCarry
.192b	e6 2b		inc $2b				inc 	temp0+1
.192d					_IATNoCarry:
.192d	b1 2a		lda ($2a),y			lda 	(temp0),y
.192f	a4 32		ldy $32				ldy 	tempShort
.1931	c9 00		cmp #$00			cmp		#0
.1933	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/insert.asm

.1934					InsertLine:
.1934	ad c8 0a	lda $0ac8			lda 	basePage 					; copy program base to temp0
.1937	85 2a		sta $2a				sta 	temp0
.1939	ad c9 0a	lda $0ac9			lda 	basePage+1
.193c	85 2b		sta $2b				sta 	temp0+1
.193e					_ILLoop:
.193e	a0 01		ldy #$01			ldy 	#1
.1940	b1 2a		lda ($2a),y			lda 	(temp0),y
.1942	c5 48		cmp $48				cmp 	esInt0
.1944	c8		iny				iny
.1945	b1 2a		lda ($2a),y			lda 	(temp0),y
.1947	e5 50		sbc $50				sbc 	esInt1
.1949	b0 05		bcs $1950			bcs 	_ILFound 					; we know it cannot be equal, it would have been deleted
.194b	20 1e 19	jsr $191e			jsr 	IAdvanceTemp0 				; shift temp0 forward, return Z flag set if end.
.194e	d0 ee		bne $193e			bne 	_ILLoop
.1950					_ILFound:
.1950	a5 35		lda $35				lda 	lowMemory 					; shift lowMemory up to make space for it.
.1952	85 2c		sta $2c				sta 	temp1
.1954	a5 36		lda $36				lda 	lowMemory+1
.1956	85 2d		sta $2d				sta 	temp1+1
.1958	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; space to make in Y, 0 in X.
.195b	18		clc				clc
.195c	69 03		adc #$03			adc 	#3
.195e	a8		tay				tay
.195f	a2 00		ldx #$00			ldx 	#0
.1961	a1 2c		lda ($2c,x)	_ILMove:lda 	(temp1,x)
.1963	91 2c		sta ($2c),y			sta 	(temp1),y
.1965	a5 2c		lda $2c				lda 	temp1
.1967	c5 2a		cmp $2a				cmp 	temp0
.1969	d0 06		bne $1971			bne 	_ILMNext
.196b	a5 2d		lda $2d				lda 	temp1+1
.196d	c5 2b		cmp $2b				cmp 	temp0+1
.196f	f0 0b		beq $197c			beq 	_ILMCopy
.1971					_ILMNext:
.1971	a5 2c		lda $2c				lda 	temp1
.1973	d0 02		bne $1977			bne 	_ILNoBorrow
.1975	c6 2d		dec $2d				dec 	temp1+1
.1977					_ILNoBorrow:
.1977	c6 2c		dec $2c				dec 	temp1
.1979	4c 61 19	jmp $1961			jmp 	_ILMove
.197c					_ILMCopy:
.197c	98		tya				tya 								; Y is the offset of the new line.
.197d	81 2a		sta ($2a,x)			sta 	(temp0,x)					; X = 0 still.
.197f	a0 01		ldy #$01			ldy 	#1 							; copy in line number.
.1981	a5 48		lda $48				lda 	esInt0
.1983	91 2a		sta ($2a),y			sta 	(temp0),y
.1985	c8		iny				iny
.1986	a5 50		lda $50				lda 	esInt1
.1988	91 2a		sta ($2a),y			sta 	(temp0),y
.198a	a0 00		ldy #$00			ldy 	#0 							; copy the body in
.198c					_ILMCopy2:
.198c	b1 28		lda ($28),y			lda 	(codePtr),y
.198e	c8		iny				iny
.198f	c8		iny				iny
.1990	c8		iny				iny
.1991	91 2a		sta ($2a),y			sta 	(temp0),y
.1993	88		dey				dey
.1994	88		dey				dey
.1995	cc 24 0d	cpy $0d24			cpy 	tokenBufferIndex
.1998	d0 f2		bne $198c			bne 	_ILMCopy2
.199a	60		rts				rts

;******  Return to file: interaction/interaction.asm


;******  Processing file: interaction/warm.asm

.199b					WarmStartEntry:
.199b	a2 ff		ldx #$ff			ldx 	#$FF
.199d	9a		txs				txs
.199e	a9 02		lda #$02			lda 	#2							; green text.
.19a0	a2 08		ldx #$08		ldx	#8
.19a2	20 1e 14	jsr $141e		jsr	deviceHandler
.19a5	a2 0c		ldx #$0c		ldx	#12
.19a7	20 1e 14	jsr $141e		jsr	deviceHandler
.19aa	a5 2a		lda $2a				lda 	temp0	 					; copy temp0 to codePtr
.19ac	85 28		sta $28				sta 	codePtr
.19ae	a5 2b		lda $2b				lda 	temp0+1
.19b0	85 29		sta $29				sta 	codePtr+1
.19b2	a2 04		ldx #$04		ldx	#4
.19b4	20 1e 14	jsr $141e		jsr	deviceHandler
.19b7	a2 06		ldx #$06		ldx	#6
.19b9	20 67 3b	jsr $3b67		jsr	tokeniserHandler
.19bc	90 25		bcc $19e3			bcc 	WSEError 					; failed.
.19be	a9 21		lda #$21			lda 	#(tokenHeader) & $FF
.19c0	85 28		sta $28				sta 	codePtr
.19c2	a9 0c		lda #$0c			lda 	#(tokenHeader) >> 8
.19c4	85 29		sta $29				sta 	1+(codePtr)
.19c6	ad 24 0c	lda $0c24			lda 	tokenBuffer 				; is it a blank line, go get another line.
.19c9	c9 80		cmp #$80			cmp 	#$80
.19cb	f0 ce		beq $199b			beq 	WarmStartEntry
.19cd	29 c0		and #$c0			and 	#$C0						; does it start with a number
.19cf	c9 40		cmp #$40			cmp 	#$40
.19d1	f0 15		beq $19e8			beq 	HasLineNumber
.19d3	a9 00		lda #$00			lda 	#0 							; zero the token header, so it will look like a
.19d5	8d 21 0c	sta $0c21			sta 	tokenHeader 				; fake program line.
.19d8	8d 22 0c	sta $0c22			sta 	tokenHeader+1
.19db	8d 23 0c	sta $0c23			sta 	tokenHeader+2
.19de	a2 12		ldx #$12		ldx	#18
.19e0	20 bc 30	jsr $30bc		jsr	mainHandler
.19e3					WSEError:
.19e3	a2 1d		ldx #$1d			ldx 	#ErrorID_Tokenise
.19e5	20 3f 14	jsr $143f		jsr	errorHandler
.19e8					HasLineNumber:
.19e8	a0 03		ldy #$03			ldy 	#3 							; get line number
.19ea	a9 00		lda #$00			lda 	#0
.19ec	a2 06		ldx #$06		ldx	#6
.19ee	20 bc 30	jsr $30bc		jsr	mainHandler
.19f1	a5 58		lda $58				lda 	esInt2		 				; check in range.
.19f3	05 60		ora $60				ora 	esInt3
.19f5	d0 ec		bne $19e3			bne 	WSEError
.19f7	98		tya				tya 								; make codePtr point to code after the line number.
.19f8	18		clc				clc
.19f9	65 28		adc $28				adc 	codePtr
.19fb	85 28		sta $28				sta 	codePtr
.19fd	90 02		bcc $1a01			bcc		_HLNNoCarry
.19ff	e6 29		inc $29				inc 	codePtr+1
.1a01					_HLNNoCarry:
.1a01	98		tya				tya 								; subtract that offset from the code buffer index
.1a02	38		sec				sec
.1a03	49 ff		eor #$ff			eor 	#$FF
.1a05	6d 24 0d	adc $0d24			adc 	tokenBufferIndex
.1a08	18		clc				clc 								; add space allowing for header & $80 trailer
.1a09	69 04		adc #$04			adc 	#4
.1a0b	8d 24 0d	sta $0d24			sta 	tokenBufferIndex 			; this is the number of bytes occupied.
.1a0e	20 dd 18	jsr $18dd			jsr 	DeleteLine 					; always delete the line, it's deleted and reinserted.
.1a11					_HLNNoDelete:
.1a11	ad 24 0d	lda $0d24			lda 	tokenBufferIndex 			; if line was empty, then don't insert
.1a14	c9 01		cmp #$01			cmp 	#1 							; (the one character is the EOL marker)
.1a16	f0 0c		beq $1a24			beq 	_HLMEditDone
.1a18	a5 36		lda $36				lda 	lowMemory+1 				; is there space, if we allow a little bit of
.1a1a	18		clc				clc 								; workspace (1k)
.1a1b	69 04		adc #$04			adc 	#4
.1a1d	c5 34		cmp $34				cmp 	highMemory+1
.1a1f	b0 0b		bcs $1a2c			bcs 	_HLMMemory
.1a21	20 34 19	jsr $1934			jsr 	InsertLine 					; insert the line in
.1a24					_HLMEditDone:
.1a24	a2 02		ldx #$02		ldx	#2
.1a26	20 bc 30	jsr $30bc		jsr	mainHandler
.1a29	4c 9b 19	jmp $199b			jmp 	WarmStartEntry
.1a2c					_HLMMemory:
.1a2c	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.1a2e	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: interaction/interaction.asm

.1a31					interactionHandler:
.1a31	7c 34 1a	jmp ($1a34,x)			jmp 	(interactionVectors,x)
.1a34					interactionVectors:
>1a34	56 18					.word ColdStartEntry       ; index 0
>1a36	9b 19					.word WarmStartEntry       ; index 2

;******  Return to file: basic.asm

.1a38					section_end_interaction:
.1a38					section_start_main:

;******  Processing file: main/main.asm


;******  Processing file: main/commands/assert.asm

.1a38					Command_Assert:
.1a38	20 bf 29	jsr $29bf			jsr 	EvaluateRootInteger 		; what is being asserted.
.1a3b	20 79 2f	jsr $2f79			jsr 	MInt32Zero 					; is it true ?
.1a3e	f0 01		beq $1a41			beq 	_CAError
.1a40	60		rts				rts
.1a41					_CAError:
.1a41	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1a43	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/clear.asm

.1a46					CommandClear:
.1a46					XCommandClear:
.1a46	98		tya				tya
.1a47	48		pha				pha
.1a48	ad cc 0a	lda $0acc			lda 	endMemory					; set high memory = end of memory
.1a4b	85 33		sta $33				sta 	highMemory
.1a4d	ad cd 0a	lda $0acd			lda 	endMemory+1
.1a50	85 34		sta $34				sta 	highMemory+1
.1a52	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1a55	85 2a		sta $2a				sta 	temp0
.1a57	ad c9 0a	lda $0ac9			lda 	basePage+1
.1a5a	85 2b		sta $2b				sta 	temp0+1
.1a5c					_CCFindEnd:
.1a5c	a0 00		ldy #$00			ldy 	#0
.1a5e	b1 2a		lda ($2a),y			lda 	(temp0),y
.1a60	f0 0c		beq $1a6e			beq 	_CCFoundEnd 				; offset zero is end.
.1a62	18		clc				clc
.1a63	65 2a		adc $2a				adc 	temp0 						; move to next line
.1a65	85 2a		sta $2a				sta 	temp0
.1a67	90 f3		bcc $1a5c			bcc 	_CCFindEnd
.1a69	e6 2b		inc $2b				inc 	temp0+1
.1a6b	4c 5c 1a	jmp $1a5c			jmp 	_CCFindEnd
.1a6e					_CCFoundEnd:
.1a6e	a5 2a		lda $2a				lda 	temp0 						; put temp0 in lowMemory
.1a70	85 35		sta $35				sta 	lowMemory
.1a72	a5 2b		lda $2b				lda 	temp0+1
.1a74	85 36		sta $36				sta 	lowMemory+1
.1a76	18		clc				clc 								; put temp0+1 in endProgram
.1a77	a5 2a		lda $2a				lda 	temp0
.1a79	69 01		adc #$01			adc 	#1
.1a7b	8d ca 0a	sta $0aca			sta 	endProgram
.1a7e	a5 2b		lda $2b				lda 	temp0+1
.1a80	69 00		adc #$00			adc 	#0
.1a82	8d cb 0a	sta $0acb			sta 	endProgram+1
.1a85	18		clc				clc 								; put a bit of space in.
.1a86	a5 35		lda $35				lda 	lowMemory
.1a88	69 04		adc #$04			adc 	#4
.1a8a	85 35		sta $35				sta 	lowMemory
.1a8c	90 02		bcc $1a90			bcc 	_CCNoCarry
.1a8e	e6 36		inc $36				inc 	lowMemory+1
.1a90					_CCNoCarry:
.1a90	20 5b 30	jsr $305b			jsr 	RSReset 					; reset the return stack.
.1a93	a2 04		ldx #$04		ldx	#4
.1a95	20 76 3e	jsr $3e76		jsr	variableHandler
.1a98	20 6c 23	jsr $236c			jsr 	ScanProc 					; scan for procedures
.1a9b	20 06 21	jsr $2106			jsr 	CommandRestore 				; do a restore
.1a9e	68		pla				pla
.1a9f	a8		tay				tay
.1aa0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/dim.asm

.1aa1					Command_Dim:
.1aa1	a2 02		ldx #$02		ldx	#2
.1aa3	20 76 3e	jsr $3e76		jsr	variableHandler
.1aa6	b1 28		lda ($28),y			lda 	(codePtr),y 				; see what follows.
.1aa8	c8		iny				iny
.1aa9	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma follows, go back and do next
.1aab	f0 f4		beq $1aa1			beq 	Command_Dim
.1aad	88		dey				dey 								; unpick get
.1aae	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/for.asm

.1aaf					Command_FOR:
.1aaf	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space and set the marker
.1ab1	a2 0b		ldx #$0b			ldx 	#11
.1ab3	20 69 30	jsr $3069			jsr 	RSClaim
.1ab6	20 b0 1c	jsr $1cb0			jsr 	CommandLET 					; do the same as LET FOR [a = 4]
.1ab9	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1abb	c9 80		cmp #$80			cmp 	#$80 						; we do not do FOR floats.
.1abd	d0 4c		bne $1b0b			bne 	_CFType
.1abf	a9 ce		lda #$ce			lda 	#TKW_TO 					; check TO present.
.1ac1	20 ba 2f	jsr $2fba			jsr 	CheckToken
.1ac4	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1ac6	20 c1 29	jsr $29c1			jsr 	EvaluateInteger				; get terminal value in stack 1
.1ac9	98		tya				tya
.1aca	48		pha				pha
.1acb	a0 04		ldy #$04			ldy 	#4
.1acd	a5 48		lda $48				lda		esInt0 						; copy the address of the index variable into 4 and 5
.1acf	91 37		sta ($37),y			sta 	(rsPointer),y
.1ad1	c8		iny				iny
.1ad2	a5 50		lda $50				lda		esInt1
.1ad4	91 37		sta ($37),y			sta 	(rsPointer),y
.1ad6	c8		iny				iny
.1ad7	a9 01		lda #$01			lda 	#1  						; the default step in 6, (-128 .. 127 only)
.1ad9	91 37		sta ($37),y			sta 	(rsPointer),y
.1adb	c8		iny				iny
.1adc	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1ade	91 37		sta ($37),y			sta 	(rsPointer),y
.1ae0	c8		iny				iny
.1ae1	a5 51		lda $51				lda		esInt1+1
.1ae3	91 37		sta ($37),y			sta 	(rsPointer),y
.1ae5	c8		iny				iny
.1ae6	a5 59		lda $59				lda		esInt2+1
.1ae8	91 37		sta ($37),y			sta 	(rsPointer),y
.1aea	c8		iny				iny
.1aeb	a5 61		lda $61				lda		esInt3+1
.1aed	91 37		sta ($37),y			sta 	(rsPointer),y
.1aef	68		pla				pla
.1af0	a8		tay				tay
.1af1	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by STEP.
.1af3	c9 cf		cmp #$cf			cmp 	#TKW_STEP
.1af5	d0 0e		bne $1b05			bne 	_CFDone
.1af7	c8		iny				iny									; skip over step.
.1af8	20 c1 29	jsr $29c1			jsr 	EvaluateInteger 			; get step
.1afb	98		tya				tya
.1afc	48		pha				pha
.1afd	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1aff	a0 06		ldy #$06			ldy 	#6
.1b01	91 37		sta ($37),y			sta 	(rsPointer),y
.1b03	68		pla				pla
.1b04	a8		tay				tay
.1b05					_CFDone:
.1b05	a9 01		lda #$01			lda 	#1
.1b07	20 95 30	jsr $3095			jsr 	RSSavePosition 				; save position.
.1b0a	60		rts				rts
.1b0b					_CFType:
.1b0b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1b0d	20 3f 14	jsr $143f		jsr	errorHandler
.1b10					Command_NEXT:
.1b10	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1b12	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1b14	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1b16	f0 05		beq $1b1d			beq 	_isok
.1b18	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.1b1a	20 3f 14	jsr $143f		jsr	errorHandler
.1b1d					_isok:
.1b1d	b1 28		lda ($28),y			lda 	(codePtr),y 				; is it NEXT <index>
.1b1f	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1b21	b0 18		bcs $1b3b			bcs 	_CNNoIndex
.1b23	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1b25	20 f4 29	jsr $29f4			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1b28	98		tya				tya
.1b29	48		pha				pha
.1b2a	a0 04		ldy #$04			ldy 	#4 							; check same variable as that stored at +4,+5
.1b2c	b1 37		lda ($37),y			lda 	(rsPointer),y
.1b2e	d5 48		cmp $48,x			cmp 	esInt0,x
.1b30	d0 76		bne $1ba8			bne 	_CNBadIndex
.1b32	c8		iny				iny
.1b33	b1 37		lda ($37),y			lda 	(rsPointer),y
.1b35	d5 50		cmp $50,x			cmp 	esInt1,x
.1b37	d0 6f		bne $1ba8			bne 	_CNBadIndex
.1b39	68		pla				pla
.1b3a	a8		tay				tay
.1b3b					_CNNoIndex:
.1b3b	98		tya				tya
.1b3c	48		pha				pha
.1b3d	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1b3f	b1 37		lda ($37),y			lda 	(rsPointer),y
.1b41	85 2a		sta $2a				sta 	temp0
.1b43	c8		iny				iny
.1b44	b1 37		lda ($37),y			lda 	(rsPointer),y
.1b46	85 2b		sta $2b				sta 	temp0+1
.1b48	c8		iny				iny
.1b49	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1b4b	b1 37		lda ($37),y			lda 	(rsPointer),y 				; get the step.
.1b4d	85 2f		sta $2f				sta 	temp2+1 					; save for later.
.1b4f	10 01		bpl $1b52			bpl 	_CNSignX
.1b51	ca		dex				dex  								; X = $FF
.1b52					_CNSignX:
.1b52	18		clc				clc 								; add to the LSB
.1b53	a0 00		ldy #$00			ldy 	#0
.1b55	71 2a		adc ($2a),y			adc 	(temp0),y
.1b57	91 2a		sta ($2a),y			sta 	(temp0),y
.1b59					_CNPropogate:
.1b59	c8		iny				iny  								; add the sign extended in X to the rest.
.1b5a	8a		txa				txa
.1b5b	71 2a		adc ($2a),y			adc 	(temp0),y
.1b5d	91 2a		sta ($2a),y			sta 	(temp0),y
.1b5f	c8		iny				iny
.1b60	8a		txa				txa
.1b61	71 2a		adc ($2a),y			adc 	(temp0),y
.1b63	91 2a		sta ($2a),y			sta 	(temp0),y
.1b65	c8		iny				iny
.1b66	8a		txa				txa
.1b67	71 2a		adc ($2a),y			adc 	(temp0),y
.1b69	91 2a		sta ($2a),y			sta 	(temp0),y
.1b6b	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1b6c	a5 37		lda $37				lda 	rsPointer
.1b6e	69 07		adc #$07			adc 	#7
.1b70	85 2c		sta $2c				sta 	temp1
.1b72	a9 00		lda #$00			lda 	#0
.1b74	85 2e		sta $2e				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1b76	a8		tay				tay 								; and clear the Y register again.
.1b77	65 38		adc $38				adc 	rsPointer+1
.1b79	85 2d		sta $2d				sta 	temp1+1
.1b7b	38		sec				sec 								; calculate current - limit oring interim values.
.1b7c	20 b4 1b	jsr $1bb4			jsr 	_CNCompare 					; each of these does a byte.
.1b7f	20 b4 1b	jsr $1bb4			jsr 	_CNCompare 					; we calculate the OR of all these subtractions.
.1b82	20 b4 1b	jsr $1bb4			jsr 	_CNCompare 					; and the carry of the subtraction.
.1b85	20 b4 1b	jsr $1bb4			jsr 	_CNCompare
.1b88	50 02		bvc $1b8c			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1b8a	49 80		eor #$80			eor 	#$80
.1b8c					_CNNoOverflow:
.1b8c	a4 2f		ldy $2f				ldy 	temp2+1						; get step back
.1b8e	30 1d		bmi $1bad			bmi 	_CNCheckDownto
.1b90	c9 00		cmp #$00			cmp 	#0
.1b92	30 0c		bmi $1ba0			bmi 	_CNLoopRound 				; loop round if < =
.1b94	a5 2e		lda $2e				lda 	temp2
.1b96	f0 08		beq $1ba0			beq 	_CNLoopRound
.1b98					_CNLoopExit:
.1b98	68		pla				pla
.1b99	a8		tay				tay
.1b9a	a9 0b		lda #$0b			lda 	#11
.1b9c	20 8b 30	jsr $308b			jsr 	RSFree
.1b9f	60		rts				rts
.1ba0					_CNLoopRound:
.1ba0	68		pla				pla
.1ba1	a8		tay				tay
.1ba2	a9 01		lda #$01			lda 	#1
.1ba4	20 a8 30	jsr $30a8			jsr 	RSLoadPosition				; go back to the loop top
.1ba7	60		rts				rts
.1ba8					_CNBadIndex:
.1ba8	a2 13		ldx #$13			ldx 	#ErrorID_BadIndex
.1baa	20 3f 14	jsr $143f		jsr	errorHandler
.1bad					_CNCheckDownto:
.1bad	c9 00		cmp #$00			cmp 	#0
.1baf	10 ef		bpl $1ba0			bpl 	_CNLoopRound
.1bb1	4c 98 1b	jmp $1b98			jmp 	_CNLoopExit
.1bb4					_CNCompare:
.1bb4	b1 2a		lda ($2a),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1bb6	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.1bb8	05 2e		ora $2e				ora 	temp2 						; Or into temp2 (does not affect carry)
.1bba	85 2e		sta $2e				sta 	temp2
.1bbc	c8		iny				iny
.1bbd	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/if.asm

.1bbe					CommandIf:
.1bbe	20 bf 29	jsr $29bf			jsr 	EvaluateRootInteger 		; get what's being tested.
.1bc1	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1bc3	c9 d9		cmp #$d9			cmp 	#TKW_GOTO
.1bc5	f0 04		beq $1bcb			beq 	_IfSimple
.1bc7	c9 a1		cmp #$a1			cmp 	#TKW_THEN
.1bc9	d0 1b		bne $1be6			bne 	_IfComplex
.1bcb					_IfSimple:
.1bcb	20 79 2f	jsr $2f79			jsr 	MInt32Zero					; check if TOS zero
.1bce	f0 10		beq $1be0			beq 	_IfEOL 						; go to next line.
.1bd0	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and skip token.
.1bd2	c8		iny				iny
.1bd3	c9 d9		cmp #$d9			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1bd5	f0 0c		beq $1be3			beq 	_IfGoto 					; do the Goto code
.1bd7	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows the THEN ?
.1bd9	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1bdb	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1bdd	f0 04		beq $1be3			beq 	_IfGoto
.1bdf	60		rts				rts 								; else continue on this line.
.1be0					_IfEOL:
.1be0	4c e1 23	jmp $23e1			jmp 	AdvanceNextLine 			; go to next line
.1be3					_IfGoto:
.1be3	4c 56 24	jmp $2456			jmp 	CommandGoto
.1be6					_IfComplex:
.1be6	20 79 2f	jsr $2f79			jsr 	MInt32Zero 					; is it true ?
.1be9	f0 01		beq $1bec			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.1beb	60		rts				rts 								; else continue.
.1bec					_IFSkip:
.1bec	a9 d6		lda #$d6			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.1bee	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1bf0	4c df 2f	jmp $2fdf			jmp		ScanForward
.1bf3					Command_ELSE:
.1bf3	a2 a2		ldx #$a2			ldx 	#TKW_ENDIF
.1bf5	8a		txa				txa
.1bf6	4c df 2f	jmp $2fdf			jmp		ScanForward
.1bf9					Command_ENDIF:
.1bf9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/input.asm

=32					MaxInputSize = 32
.0be7					InputBuffer:
>0be7							.fill 	MaxInputSize+1
.1bfa					Command_Input:
.1bfa	b1 28		lda ($28),y			lda 	(codePtr),y 			; see what's next.
.1bfc	c8		iny				iny
.1bfd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 				; ignore commas.
.1bff	f0 f9		beq $1bfa			beq 	Command_Input
.1c01	88		dey				dey 							; undo consume
.1c02	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1c04	f0 54		beq $1c5a			beq 	_CIExit 				; : or EOL, exit
.1c06	c9 80		cmp #$80			cmp 	#TOK_EOL
.1c08	f0 50		beq $1c5a			beq 	_CIExit
.1c0a	c9 40		cmp #$40			cmp 	#$40 					; variable ?
.1c0c	90 12		bcc $1c20			bcc 	_CIVariable
.1c0e	c9 85		cmp #$85			cmp 	#TOK_STR 				; if not quoted string syntax error.
.1c10	d0 43		bne $1c55			bne 	_CISyntax
.1c12	a2 00		ldx #$00			ldx 	#0
.1c14	20 b6 29	jsr $29b6			jsr 	EvaluateString 			; evaluate and print string
.1c17	20 25 1d	jsr $1d25			jsr 	TOSToTemp0
.1c1a	20 28 20	jsr $2028			jsr 	PrintString
.1c1d	4c fa 1b	jmp $1bfa			jmp 	Command_Input
.1c20					_CIVariable:
.1c20	a2 00		ldx #$00			ldx 	#0 						; evaluate a reference.
.1c22	20 f4 29	jsr $29f4			jsr 	EvaluateReference  		; this is where its going
.1c25					_CIRetry:
.1c25	a9 3f		lda #$3f			lda 	#"?"					; print prompt
.1c27	a2 14		ldx #$14		ldx	#20
.1c29	20 1e 14	jsr $141e		jsr	deviceHandler
.1c2c	98		tya				tya
.1c2d	48		pha				pha
.1c2e	20 6e 1c	jsr $1c6e			jsr 	InputString 			; input a string (manually)
.1c31	a2 01		ldx #$01			ldx 	#1
.1c33	20 5b 1c	jsr $1c5b			jsr 	BufferToStackX 			; make stack,x ref input string.
.1c36	a5 40		lda $40				lda 	esType 					; if target type numeric
.1c38	29 40		and #$40			and 	#$40 					; then convert to number
.1c3a	d0 11		bne $1c4d			bne 	_CIWrite
.1c3c	a2 01		ldx #$01			ldx 	#1
.1c3e	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 				; string address in temp0, goes here.
.1c41	a9 0a		lda #$0a			lda 	#10
.1c43	20 c0 2d	jsr $2dc0			jsr 	MInt32FromString 		; convert it back from a string.
.1c46	68		pla				pla
.1c47	a8		tay				tay
.1c48	b0 03		bcs $1c4d			bcs 	_CIWrite 				; successfully converted.
.1c4a	18		clc				clc 							; default fail FP conversion
.1c4b	90 d8		bcc $1c25			bcc		_CIRetry				; failed, try again.
.1c4d					_CIWrite:
.1c4d	a2 00		ldx #$00			ldx 	#0
.1c4f	20 c3 1c	jsr $1cc3			jsr 	WriteValue
.1c52	4c fa 1b	jmp $1bfa			jmp 	Command_Input
.1c55					_CISyntax:
.1c55	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1c57	20 3f 14	jsr $143f		jsr	errorHandler
.1c5a					_CIExit:
.1c5a	60		rts				rts
.1c5b					BufferToStackX:
.1c5b	a9 e7		lda #$e7			lda 	#InputBuffer & $FF
.1c5d	95 48		sta $48,x			sta 	esInt0,x
.1c5f	a9 0b		lda #$0b			lda 	#InputBuffer >> 8
.1c61	95 50		sta $50,x			sta 	esInt1,x
.1c63	a9 00		lda #$00			lda 	#0
.1c65	95 58		sta $58,x			sta 	esInt2,x
.1c67	95 60		sta $60,x			sta 	esInt3,x
.1c69	a9 40		lda #$40			lda 	#$40
.1c6b	95 40		sta $40,x			sta 	esType,x
.1c6d	60		rts				rts
.1c6e					InputString:
.1c6e	a9 00		lda #$00			lda 	#0
.1c70	8d e7 0b	sta $0be7			sta 	InputBuffer
.1c73					_InputLoop:
.1c73	a2 00		ldx #$00		ldx	#0
.1c75	20 1e 14	jsr $141e		jsr	deviceHandler
.1c78	a2 0a		ldx #$0a		ldx	#10
.1c7a	20 1e 14	jsr $141e		jsr	deviceHandler
.1c7d	c9 00		cmp #$00			cmp 	#0
.1c7f	f0 f2		beq $1c73			beq 	_InputLoop
.1c81	c9 08		cmp #$08			cmp 	#8
.1c83	f0 19		beq $1c9e			beq 	_InputBackspace
.1c85	c9 0d		cmp #$0d			cmp 	#13
.1c87	f0 21		beq $1caa			beq 	_InputExit
.1c89	ae e7 0b	ldx $0be7			ldx 	InputBuffer
.1c8c	e0 20		cpx #$20			cpx 	#MaxInputSize 			; too many characters
.1c8e	f0 e3		beq $1c73			beq 	_InputLoop
.1c90	9d e8 0b	sta $0be8,x			sta 	InputBuffer+1,x 		; write char
.1c93	ee e7 0b	inc $0be7			inc 	InputBuffer 			; advance count.
.1c96					_InputPrintLoop:
.1c96	a2 14		ldx #$14		ldx	#20
.1c98	20 1e 14	jsr $141e		jsr	deviceHandler
.1c9b	4c 73 1c	jmp $1c73			jmp	 	_InputLoop
.1c9e					_InputBackspace:
.1c9e	ad e7 0b	lda $0be7			lda 	InputBuffer 			; at start
.1ca1	f0 d0		beq $1c73			beq 	_InputLoop
.1ca3	ce e7 0b	dec $0be7			dec 	InputBuffer
.1ca6	a9 08		lda #$08			lda 	#8
.1ca8	d0 ec		bne $1c96			bne 	_InputPrintLoop
.1caa					_InputExit:
.1caa	a2 04		ldx #$04		ldx	#4
.1cac	20 1e 14	jsr $141e		jsr	deviceHandler
.1caf	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/let.asm

.1cb0					CommandLet:
.1cb0	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1cb2	20 f4 29	jsr $29f4			jsr 	EvaluateReference
.1cb5	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1cb7	20 ba 2f	jsr $2fba			jsr 	CheckToken
.1cba	e8		inx				inx 								; do RHS
.1cbb	20 a2 29	jsr $29a2			jsr 	Evaluate 					; evaluate and dereference
.1cbe	ca		dex				dex
.1cbf	20 c3 1c	jsr $1cc3			jsr 	WriteValue 					; write it out
.1cc2	60		rts				rts
.1cc3					WriteValue:
.1cc3	98		tya				tya
.1cc4	48		pha				pha
.1cc5	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 					; set temp0 to point to target address.
.1cc8	b5 40		lda $40,x			lda 	esType,x 					; check the string flags match
.1cca	55 41		eor $41,x			eor 	esType+1,x 					; one string, one number causes an error.
.1ccc	29 40		and #$40			and 	#$40
.1cce	d0 50		bne $1d20			bne		_WVType
.1cd0	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1cd2	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1cd4	29 40		and #$40			and 	#$40
.1cd6	d0 1f		bne $1cf7			bne 	_WVCopyString
.1cd8	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.1cda	15 41		ora $41,x			ora 	esType+1,x
.1cdc	4a		lsr a				lsr 	a
.1cdd	90 22		bcc $1d01			bcc 	_WVCopyData4 				; copy 4 data bytes.
.1cdf	b5 40		lda $40,x			lda 	esType,x
.1ce1	4a		lsr a				lsr 	a
.1ce2	90 3c		bcc $1d20			bcc 	_WVType
.1ce4	e8		inx				inx 								; force the value being written to be a float.
.1ce5	20 03 25	jsr $2503			jsr 	BPMakeFloat
.1ce8	ca		dex				dex
.1ce9	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 					; set Temp0 to write address
.1cec	e8		inx				inx
.1ced	8a		txa				txa
.1cee	a2 20		ldx #$20		ldx	#32
.1cf0	20 51 18	jsr $1851		jsr	floatingpointHandler
.1cf3	aa		tax				tax
.1cf4	4c 1d 1d	jmp $1d1d			jmp 	_WVCopyExit
.1cf7					_WVCopyString:
.1cf7	8a		txa				txa
.1cf8	a2 0e		ldx #$0e		ldx	#14
.1cfa	20 72 33	jsr $3372		jsr	stringHandler
.1cfd	aa		tax				tax
.1cfe	4c 1d 1d	jmp $1d1d			jmp 	_WVCopyExit
.1d01					_WVCopyData4:
.1d01	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.1d03	29 20		and #$20			and 	#$20 						; (e.g. is bit 5 set)
.1d05	d0 10		bne $1d17			bne 	_WVCopyData1
.1d07	a0 03		ldy #$03			ldy 	#3
.1d09	b5 61		lda $61,x			lda 	esInt3+1,x
.1d0b	91 2a		sta ($2a),y			sta 	(temp0),y
.1d0d	88		dey				dey
.1d0e	b5 59		lda $59,x			lda 	esInt2+1,x
.1d10	91 2a		sta ($2a),y			sta 	(temp0),y
.1d12	88		dey				dey
.1d13	b5 51		lda $51,x			lda 	esInt1+1,x
.1d15	91 2a		sta ($2a),y			sta 	(temp0),y
.1d17					_WVCopyData1:
.1d17	a0 00		ldy #$00			ldy 	#0
.1d19	b5 49		lda $49,x			lda 	esInt0+1,x
.1d1b	91 2a		sta ($2a),y			sta 	(temp0),y
.1d1d					_WVCopyExit:
.1d1d	68		pla				pla
.1d1e	a8		tay				tay
.1d1f	60		rts				rts
.1d20					_WVType:
.1d20	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1d22	20 3f 14	jsr $143f		jsr	errorHandler
.1d25					TOSToTemp0:
.1d25	b5 48		lda $48,x			lda 	esInt0,x
.1d27	85 2a		sta $2a				sta 	temp0
.1d29	b5 50		lda $50,x			lda 	esInt1,x
.1d2b	85 2b		sta $2b				sta 	temp0+1
.1d2d	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/link.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/list.asm

.0c08					structIndent:
>0c08							.fill 	1
.1d2e					CommandList:
.1d2e	a2 00		ldx #$00			ldx		#0 							; set start/end lines in stack 0/1 to 0 and $FFFF
.1d30	8e 08 0c	stx $0c08			stx 	structIndent
.1d33	20 52 2f	jsr $2f52			jsr 	MInt32False
.1d36	e8		inx				inx
.1d37	20 4e 2f	jsr $2f4e			jsr 	MInt32True
.1d3a	b1 28		lda ($28),y			lda 	(codePtr),y 				; look at first token
.1d3c	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; list ,xxxx
.1d3e	f0 15		beq $1d55			beq 	_CLEndLine
.1d40	c9 00		cmp #$00			cmp 	#0 							; list ... on its own.
.1d42	30 1b		bmi $1d5f			bmi 	_CLDoListing 				; do the whole lot.
.1d44	a2 00		ldx #$00			ldx 	#0 							; get start line at stack:0
.1d46	20 c1 29	jsr $29c1			jsr 	EvaluateInteger
.1d49	b1 28		lda ($28),y			lda 	(codePtr),y 				; , follows ?
.1d4b	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1d4d	f0 06		beq $1d55			beq 	_CLEndLine
.1d4f	20 90 2e	jsr $2e90			jsr 	MInt32CopyUp 				; copy first to second if just a line number on its
.1d52	4c 5f 1d	jmp $1d5f			jmp 	_CLDoListing 				; own e.g. list 1100
.1d55					_CLEndLine:
.1d55	c8		iny				iny 								; skip comma
.1d56	b1 28		lda ($28),y			lda 	(codePtr),y  				; no number follows, then its list 1000,
.1d58	30 05		bmi $1d5f			bmi 	_CLDoListing
.1d5a	a2 01		ldx #$01			ldx 	#1 							; get the last line to list
.1d5c	20 c1 29	jsr $29c1			jsr 	EvaluateInteger				; get end
.1d5f					_CLDoListing:
.1d5f	20 03 22	jsr $2203			jsr 	ResetCodeAddress 			; back to the start.
.1d62					_CLCheckLoop:
.1d62	a2 00		ldx #$00		ldx	#0
.1d64	20 1e 14	jsr $141e		jsr	deviceHandler
.1d67	a0 00		ldy #$00			ldy 	#0							; check end.
.1d69	b1 28		lda ($28),y			lda 	(codePtr),y
.1d6b	f0 41		beq $1dae			beq 	_CLEnd
.1d6d	a2 00		ldx #$00			ldx 	#0 							; compare vs lower.
.1d6f	20 b1 1d	jsr $1db1			jsr 	CLCompareLineTOS
.1d72	c9 ff		cmp #$ff			cmp 	#255 						; if < skip
.1d74	f0 28		beq $1d9e			beq 	_CLNext
.1d76	e8		inx				inx
.1d77	20 b1 1d	jsr $1db1			jsr 	CLCompareLineTOS 			; compare vs higher
.1d7a	c9 01		cmp #$01			cmp 	#1
.1d7c	f0 20		beq $1d9e			beq 	_CLNext
.1d7e	a9 80		lda #$80			lda 	#$80 						; undo any down indents this line.
.1d80	20 d3 1d	jsr $1dd3			jsr 	CLStructureCheck
.1d83	ad 08 0c	lda $0c08			lda 	structIndent 				; indent level.
.1d86	10 02		bpl $1d8a			bpl 	_CLPositive
.1d88	a9 00		lda #$00			lda 	#0
.1d8a					_CLPositive:
.1d8a	a2 02		ldx #$02		ldx	#2
.1d8c	20 67 3b	jsr $3b67		jsr	tokeniserHandler
.1d8f	a9 82		lda #$82			lda 	#$82 						; up indents from this point on.
.1d91	20 d3 1d	jsr $1dd3			jsr 	CLStructureCheck
.1d94	ad 08 0c	lda $0c08			lda 	structIndent
.1d97	10 05		bpl $1d9e			bpl 	_CLNext
.1d99	a9 00		lda #$00			lda 	#0
.1d9b	8d 08 0c	sta $0c08			sta 	structIndent
.1d9e					_CLNext:
.1d9e	a0 00		ldy #$00			ldy 	#0 							; go to next line.
.1da0	b1 28		lda ($28),y			lda 	(codePtr),y
.1da2	18		clc				clc
.1da3	65 28		adc $28				adc 	codePtr
.1da5	85 28		sta $28				sta 	codePtr
.1da7	90 b9		bcc $1d62			bcc 	_CLCheckLoop
.1da9	e6 29		inc $29				inc 	codePtr+1
.1dab	4c 62 1d	jmp $1d62			jmp 	_CLCheckLoop
.1dae					_CLEnd:
.1dae	4c b7 30	jmp $30b7			jmp 	WarmStart 					; warm start after list.
.1db1					CLCompareLineTOS:
.1db1	a0 01		ldy #$01			ldy 	#1
.1db3	b1 28		lda ($28),y			lda 	(codePtr),y
.1db5	55 48		eor $48,x			eor 	esInt0,x
.1db7	85 2a		sta $2a				sta 	temp0
.1db9	c8		iny				iny
.1dba	b1 28		lda ($28),y			lda 	(codePtr),y
.1dbc	55 50		eor $50,x			eor 	esInt1,x
.1dbe	05 2a		ora $2a				ora 	temp0
.1dc0	f0 10		beq $1dd2			beq 	_CLCLTExit
.1dc2	88		dey				dey
.1dc3	b1 28		lda ($28),y			lda 	(codePtr),y
.1dc5	d5 48		cmp $48,x			cmp 	esInt0,x
.1dc7	c8		iny				iny
.1dc8	b1 28		lda ($28),y			lda 	(codePtr),y
.1dca	f5 50		sbc $50,x			sbc 	esInt1,x
.1dcc	a9 ff		lda #$ff			lda 	#255
.1dce	90 02		bcc $1dd2			bcc 	_CLCLTExit
.1dd0	a9 01		lda #$01			lda 	#1
.1dd2					_CLCLTExit:
.1dd2	60		rts				rts
.1dd3					CLStructureCheck:
.1dd3	85 2a		sta $2a				sta 	temp0
.1dd5	a0 03		ldy #$03			ldy 	#3
.1dd7					_CLSCLoop:
.1dd7	b1 28		lda ($28),y			lda 	(codePtr),y 				; get and consume token.
.1dd9	c8		iny				iny
.1dda	c9 80		cmp #$80			cmp 	#$80
.1ddc	90 f9		bcc $1dd7			bcc 	_CLSCLoop 					; $00-$7F just step over.
.1dde	f0 28		beq $1e08			beq		_CLSCExit					; EOL return
.1de0	c9 86		cmp #$86			cmp 	#$86 						; special handler
.1de2	90 1e		bcc $1e02			bcc 	_CLSCSpecial
.1de4	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; check if structure changer.
.1de6	90 ef		bcc $1dd7			bcc 	_CLSCLoop
.1de8	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST
.1dea	b0 eb		bcs $1dd7			bcs 	_CLSCLoop
.1dec	aa		tax				tax 								; get adjustment
.1ded	bd 5a 28	lda $285a,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.1df0	c5 2a		cmp $2a				cmp 	temp0	 					; if what we're searching for
.1df2	d0 e3		bne $1dd7			bne 	_CLSCLoop
.1df4	38		sec				sec
.1df5	e9 81		sbc #$81			sbc 	#$81 						; convert to offset
.1df7	0a		asl a				asl 	a 							; double indent step
.1df8	18		clc				clc
.1df9	6d 08 0c	adc $0c08			adc 	structIndent 				; add to structure indent
.1dfc	8d 08 0c	sta $0c08			sta 	structIndent
.1dff	4c d7 1d	jmp $1dd7			jmp 	_CLSCLoop
.1e02					_CLSCSpecial:
.1e02	20 22 30	jsr $3022			jsr 	ScannerSkipSpecial
.1e05	4c d7 1d	jmp $1dd7			jmp 	_CLSCLoop
.1e08					_CLSCExit:
.1e08	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/loadsave.asm

.1e09					CommandLoad:
.1e09	20 31 1e	jsr $1e31			jsr 	CLSParameters 					; get parameters for load.
.1e0c	08		php				php
.1e0d	a2 0e		ldx #$0e		ldx	#14
.1e0f	20 1e 14	jsr $141e		jsr	deviceHandler
.1e12	28		plp				plp
.1e13	b0 08		bcs $1e1d			bcs 	_CLExit 						; if CC then load a program, so warm start.
.1e15	20 46 1a	jsr $1a46			jsr 	CommandClear
.1e18	a2 02		ldx #$02		ldx	#2
.1e1a	20 31 1a	jsr $1a31		jsr	interactionHandler
.1e1d					_CLExit
.1e1d	60		rts				rts
.1e1e					CommandSave:
.1e1e	20 31 1e	jsr $1e31			jsr 	CLSParameters					; get parameters for save
.1e21	90 08		bcc $1e2b			bcc 	_CSNoOverrideAddress
.1e23	20 d2 2f	jsr $2fd2			jsr 	CheckComma 						; should be a comma.
.1e26	a2 02		ldx #$02			ldx 	#2
.1e28	20 c1 29	jsr $29c1			jsr 	EvaluateInteger 				; get save end address.
.1e2b					_CSNoOverrideAddress:
.1e2b	a2 18		ldx #$18		ldx	#24
.1e2d	20 1e 14	jsr $141e		jsr	deviceHandler
.1e30	60		rts				rts
.1e31					CLSParameters:
.1e31	a2 00		ldx #$00			ldx 	#0 								; string
.1e33	20 b6 29	jsr $29b6			jsr 	EvaluateString
.1e36	e8		inx				inx 									; erase out +1 +2
.1e37	20 52 2f	jsr $2f52			jsr 	MInt32False
.1e3a	e8		inx				inx
.1e3b	20 52 2f	jsr $2f52			jsr 	MInt32False
.1e3e	ad c8 0a	lda $0ac8			lda 	basePage 						; default start address.
.1e41	85 49		sta $49				sta 	esInt0+1
.1e43	ad c9 0a	lda $0ac9			lda 	basePage+1
.1e46	85 51		sta $51				sta 	esInt1+1
.1e48	ad ca 0a	lda $0aca			lda 	endProgram 						; default end address
.1e4b	85 4a		sta $4a				sta 	esInt0+2
.1e4d	ad cb 0a	lda $0acb			lda 	endProgram+1
.1e50	85 52		sta $52				sta 	esInt1+2
.1e52	b1 28		lda ($28),y			lda 	(codePtr),y 					; , following
.1e54	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.1e56	d0 08		bne $1e60			bne 	_CLSDefault
.1e58	c8		iny				iny 									; skip comma
.1e59	a2 01		ldx #$01			ldx 	#1 								; get numeric value.
.1e5b	20 c1 29	jsr $29c1			jsr 	EvaluateInteger
.1e5e	38		sec				sec
.1e5f	60		rts				rts
.1e60					_CLSDefault:
.1e60	18		clc				clc
.1e61	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/local.asm

.0c09					storeSize:
>0c09							.fill 	1
.1e62					CommandLocal:
.1e62	a2 00		ldx #$00			ldx 	#0
.1e64	20 80 1e	jsr $1e80			jsr 	LocaliseVariable 			; localise one.
.1e67					_CLCheckNext:
.1e67	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.1e69	c8		iny				iny
.1e6a	c9 8d		cmp #$8d			cmp 	#TKW_EQUAL 					; something local "x = 2" ?
.1e6c	f0 06		beq $1e74			beq 	_CLAssignment
.1e6e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; comma try again.
.1e70	f0 f0		beq $1e62			beq 	CommandLocal
.1e72	88		dey				dey
.1e73	60		rts				rts
.1e74					_CLAssignment:
.1e74	a2 01		ldx #$01			ldx 	#1
.1e76	20 a2 29	jsr $29a2			jsr 	Evaluate 					; evaluate RHS
.1e79	ca		dex				dex
.1e7a	20 c3 1c	jsr $1cc3			jsr 	WriteValue
.1e7d	4c 67 1e	jmp $1e67			jmp 	_CLCheckNext
.1e80					LocaliseVariable:
.1e80	b1 28		lda ($28),y			lda 	(codePtr),y 				; check it's a variable.
.1e82	c9 40		cmp #$40			cmp 	#$40
.1e84	b0 67		bcs $1eed			bcs 	_LVSyntax
.1e86	8a		txa				txa 								; get the address of that variable.
.1e87	a2 00		ldx #$00		ldx	#0
.1e89	20 76 3e	jsr $3e76		jsr	variableHandler
.1e8c	aa		tax				tax
.1e8d	8a		txa				txa
.1e8e	48		pha				pha
.1e8f	98		tya				tya
.1e90	48		pha				pha
.1e91	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 					; the address of the variable is now in temp0.
.1e94	b5 40		lda $40,x			lda 	esType,x 					; get the type
.1e96	0a		asl a				asl 	a
.1e97	10 16		bpl $1eaf			bpl 	_LVPushNumber
.1e99	a0 00		ldy #$00			ldy 	#0 							; put address of data in temp1
.1e9b	b1 2a		lda ($2a),y			lda 	(temp0),y
.1e9d	c8		iny				iny
.1e9e	85 2c		sta $2c				sta 	temp1
.1ea0	b1 2a		lda ($2a),y			lda 	(temp0),y
.1ea2	85 2d		sta $2d				sta 	temp1+1
.1ea4	a0 00		ldy #$00			ldy 	#0 	 						; get length
.1ea6	b1 2c		lda ($2c),y			lda 	(temp1),y
.1ea8	aa		tax				tax 								; into X
.1ea9	e8		inx				inx 								; +1 for length.
.1eaa	a9 24		lda #$24			lda 	#markerString
.1eac	4c c4 1e	jmp $1ec4			jmp 	_LVWriteFrame
.1eaf					_LVPushNumber:
.1eaf	a5 2a		lda $2a				lda 	temp0 						; storage address and data source are the same
.1eb1	85 2c		sta $2c				sta 	temp1
.1eb3	a5 2b		lda $2b				lda 	temp0+1
.1eb5	85 2d		sta $2d				sta 	temp1+1
.1eb7	b5 40		lda $40,x			lda 	esType,x 					; put float flag into carry.
.1eb9	4a		lsr a				lsr 	a
.1eba	a9 25		lda #$25			lda 	#markerInt 					; get marker and size.
.1ebc	a2 04		ldx #$04			ldx 	#VarISize
.1ebe	90 04		bcc $1ec4			bcc 	_LVIsInteger
.1ec0	a9 23		lda #$23			lda 	#markerFloat
.1ec2	a2 06		ldx #$06			ldx 	#VarFSize
.1ec4					_LVIsInteger:
.1ec4					_LVWriteFrame:
.1ec4	8e 09 0c	stx $0c09			stx 	storeSize 					; number of bytes to copy from (temp0)
.1ec7	e8		inx				inx 								; allocate 3 bytes, 2 for the address, 1 for the marker.
.1ec8	e8		inx				inx
.1ec9	e8		inx				inx
.1eca	20 69 30	jsr $3069			jsr 	RSClaim 					; create the stack frame.
.1ecd	a5 2a		lda $2a				lda 	temp0 						; copy the target address to slots 1 & 2
.1ecf	a0 01		ldy #$01			ldy 	#1
.1ed1	91 37		sta ($37),y			sta 	(rsPointer),y
.1ed3	c8		iny				iny
.1ed4	a5 2b		lda $2b				lda 	temp0+1
.1ed6	91 37		sta ($37),y			sta 	(rsPointer),y
.1ed8	a0 00		ldy #$00			ldy 	#0
.1eda					_LVCopyData:
.1eda	b1 2c		lda ($2c),y			lda 	(temp1),y 					; get data from source, temp1
.1edc	c8		iny				iny 								; write allowing for the header bit.
.1edd	c8		iny				iny
.1ede	c8		iny				iny
.1edf	91 37		sta ($37),y			sta 	(rsPointer),y
.1ee1	88		dey				dey
.1ee2	88		dey				dey
.1ee3	ce 09 0c	dec $0c09			dec 	storeSize 					; do it storesize times
.1ee6	d0 f2		bne $1eda			bne 	_LVCopyData
.1ee8	68		pla				pla
.1ee9	a8		tay				tay
.1eea	68		pla				pla
.1eeb	aa		tax				tax
.1eec	60		rts				rts
.1eed					_LVSyntax:
.1eed	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1eef	20 3f 14	jsr $143f		jsr	errorHandler
.1ef2					RestoreLocals:
.1ef2	a2 00		ldx #$00			ldx 	#0
.1ef4	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.1ef6	c9 40		cmp #$40			cmp	 	#64
.1ef8	90 01		bcc $1efb			bcc 	_RLocal
.1efa	60		rts				rts
.1efb					_RLocal:
.1efb	8a		txa				txa
.1efc	48		pha				pha
.1efd	98		tya				tya
.1efe	48		pha				pha
.1eff	a0 01		ldy #$01			ldy 	#1 							; copy target address to temp0
.1f01	b1 37		lda ($37),y			lda 	(rsPointer),y
.1f03	85 2a		sta $2a				sta 	temp0
.1f05	c8		iny				iny
.1f06	b1 37		lda ($37),y			lda 	(rsPointer),y
.1f08	85 2b		sta $2b				sta 	temp0+1
.1f0a	a0 00		ldy #$00			ldy 	#0 							; get type back.
.1f0c	b1 37		lda ($37),y			lda 	(rsPointer),y
.1f0e	c9 24		cmp #$24			cmp 	#markerString 				; string is ... different :)
.1f10	f0 28		beq $1f3a			beq 	_RString
.1f12	a2 04		ldx #$04			ldx		#VARISize 					; size integer
.1f14	c9 25		cmp #$25			cmp 	#markerInt
.1f16	f0 02		beq $1f1a			beq 	_RIsInteger
.1f18	a2 06		ldx #$06			ldx 	#VARFSize 					; size float
.1f1a					_RIsInteger:
.1f1a	8a		txa				txa
.1f1b	48		pha				pha
.1f1c	a0 03		ldy #$03			ldy 	#3							; start size to copy back from pointer.
.1f1e					_RCopyBack:
.1f1e	b1 37		lda ($37),y			lda 	(rsPointer),y
.1f20	88		dey				dey
.1f21	88		dey				dey
.1f22	88		dey				dey
.1f23	91 2a		sta ($2a),y			sta 	(temp0),y
.1f25	c8		iny				iny
.1f26	c8		iny				iny
.1f27	c8		iny				iny
.1f28	c8		iny				iny
.1f29	ca		dex				dex
.1f2a	d0 f2		bne $1f1e			bne 	_RCopyBack
.1f2c	68		pla				pla 								; get size add 3
.1f2d	18		clc				clc
.1f2e	69 03		adc #$03			adc 	#3 							; (2 for address one for marker)
.1f30					_RRestoreAAndLoop:
.1f30	20 8b 30	jsr $308b			jsr 	RSFree
.1f33	68		pla				pla
.1f34	a8		tay				tay
.1f35	68		pla				pla
.1f36	aa		tax				tax
.1f37	4c f2 1e	jmp $1ef2			jmp 	RestoreLocals 				; go see if there are any more locals.
.1f3a					_RString:
.1f3a	a2 00		ldx #$00			ldx 	#0
.1f3c	a0 01		ldy #$01			ldy 	#1 							; set up for a string write.
.1f3e	b1 37		lda ($37),y			lda 	(rsPointer),y
.1f40	95 48		sta $48,x			sta 	esInt0,x
.1f42	c8		iny				iny
.1f43	b1 37		lda ($37),y			lda 	(rsPointer),y
.1f45	95 50		sta $50,x			sta 	esInt1,x
.1f47	18		clc				clc
.1f48	a5 37		lda $37				lda 	rsPointer
.1f4a	69 03		adc #$03			adc 	#3
.1f4c	95 49		sta $49,x			sta 	esInt0+1,x
.1f4e	a5 38		lda $38				lda 	rsPointer+1
.1f50	69 00		adc #$00			adc 	#0
.1f52	95 51		sta $51,x			sta 	esInt1+1,x
.1f54	8a		txa				txa
.1f55	a2 0e		ldx #$0e		ldx	#14
.1f57	20 72 33	jsr $3372		jsr	stringHandler
.1f5a	a0 03		ldy #$03			ldy 	#3 							; get string length
.1f5c	b1 37		lda ($37),y			lda 	(rsPointer),y
.1f5e	18		clc				clc
.1f5f	69 04		adc #$04			adc 	#4 							; add 4 (pointer, marker, length) to restore.
.1f61	4c 30 1f	jmp $1f30			jmp 	_RRestoreAAndLoop

;******  Return to file: main/main.asm


;******  Processing file: main/commands/new.asm

.1f64					Command_New:
.1f64					Command_XNew:
.1f64	20 03 22	jsr $2203			jsr 	ResetCodeAddress 			; point to first line
.1f67	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1f69	98		tya				tya
.1f6a	91 28		sta ($28),y			sta 	(codePtr),y
.1f6c	20 46 1a	jsr $1a46			jsr 	CommandClear 				; clear everything down.
.1f6f	4c db 23	jmp $23db			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: main/main.asm


;******  Processing file: main/commands/poke.asm

.1f72					Command_Poke:
.1f72	a9 01		lda #$01			lda 	#1
.1f74	d0 06		bne $1f7c			bne 	PokeGeneral
.1f76					Command_Doke:
.1f76	a9 02		lda #$02			lda 	#2
.1f78	d0 02		bne $1f7c			bne 	PokeGeneral
.1f7a					Command_Loke:
.1f7a	a9 03		lda #$03			lda 	#3
.1f7c					PokeGeneral:
.1f7c	48		pha				pha 								; save id (PDL = 123)
.1f7d	20 bf 29	jsr $29bf			jsr 	EvaluateRootInteger 		; target address
.1f80	20 d2 2f	jsr $2fd2			jsr	 	CheckComma
.1f83	e8		inx				inx
.1f84	20 c1 29	jsr $29c1			jsr 	EvaluateInteger 			; what value to POKE ?
.1f87	ca		dex				dex
.1f88	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 					; temp0 points to the target address
.1f8b	84 32		sty $32				sty 	tempShort 					; save Y
.1f8d	68		pla				pla 								; get copy type (1-3) and dispatch
.1f8e	aa		tax				tax
.1f8f	ca		dex				dex
.1f90	f0 14		beq $1fa6			beq 	_Poke1
.1f92	ca		dex				dex
.1f93	f0 0b		beq $1fa0			beq 	_Poke2
.1f95	a0 03		ldy #$03			ldy 	#3							; put 4 bytes
.1f97	a5 61		lda $61				lda 	esInt3+1
.1f99	91 2a		sta ($2a),y			sta 	(temp0),y
.1f9b	88		dey				dey
.1f9c	a5 59		lda $59				lda 	esInt2+1
.1f9e	91 2a		sta ($2a),y			sta 	(temp0),y
.1fa0					_Poke2:
.1fa0	a0 01		ldy #$01			ldy 	#1
.1fa2	a5 51		lda $51				lda 	esInt1+1
.1fa4	91 2a		sta ($2a),y			sta 	(temp0),y
.1fa6					_Poke1:
.1fa6	a0 00		ldy #$00			ldy 	#0
.1fa8	a5 49		lda $49				lda 	esInt0+1
.1faa	91 2a		sta ($2a),y			sta 	(temp0),y
.1fac	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.1fae	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/print.asm

.0c0a					lastPrintToken:
>0c0a							.fill 	1
.1faf					Command_Print:
.1faf	a9 00		lda #$00			lda 	#0 							; clear LPT to a non token
.1fb1	8d 0a 0c	sta $0c0a			sta 	lastPrintToken
.1fb4	88		dey				dey
.1fb5					_PrintLoopSkip:
.1fb5	c8		iny				iny
.1fb6					_PrintLoop:
.1fb6	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.1fb8	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1fba	f0 5b		beq $2017			beq 	_PrintExit
.1fbc	c9 ca		cmp #$ca			cmp 	#TKW_COLON
.1fbe	f0 57		beq $2017			beq 	_PrintExit
.1fc0	8d 0a 0c	sta $0c0a			sta 	lastPrintToken 				; update Last print token, so we check ; and ,
.1fc3	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1fc5	f0 ee		beq $1fb5			beq 	_PrintLoopSkip
.1fc7	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1fc9	f0 3c		beq $2007			beq	 	_PrintNewLine
.1fcb	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; , is print tab
.1fcd	f0 40		beq $200f			beq 	_PrintTab
.1fcf	20 a0 29	jsr $29a0			jsr 	EvaluateRoot 				; evaluate something at the root
.1fd2	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.1fd4	85 2a		sta $2a				sta 	temp0
.1fd6	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.1fd8	85 2b		sta $2b				sta 	1+(temp0)
.1fda	a5 40		lda $40				lda 	esType 						; get type
.1fdc	f0 15		beq $1ff3			beq		_PrintInteger
.1fde	4a		lsr a				lsr 	a 							; check for floating point
.1fdf	b0 08		bcs $1fe9			bcs 	_PrintFloat
.1fe1					_PrintString:
.1fe1	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1fe3	20 25 1d	jsr $1d25			jsr 	TOSToTemp0
.1fe6	4c 01 20	jmp $2001			jmp 	_PrintTemp0 				; print no leading space.
.1fe9					_PrintFloat:
.1fe9	a9 00		lda #$00			lda 	#0 							; stack level.
.1feb	a2 14		ldx #$14		ldx	#20
.1fed	20 51 18	jsr $1851		jsr	floatingpointHandler
.1ff0	4c fa 1f	jmp $1ffa			jmp 	_PrintSpaceTemp0
.1ff3					_PrintInteger:
.1ff3	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.1ff5	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.1ff7	20 a8 2e	jsr $2ea8			jsr 	MInt32ToString				; convert to text
.1ffa					_PrintSpaceTemp0:
.1ffa	a9 20		lda #$20			lda 	#32
.1ffc	a2 14		ldx #$14		ldx	#20
.1ffe	20 1e 14	jsr $141e		jsr	deviceHandler
.2001					_PrintTemp0:
.2001	20 28 20	jsr $2028			jsr 	PrintString
.2004	4c b6 1f	jmp $1fb6			jmp 	_PrintLoop
.2007					_PrintNewLine:
.2007	a2 04		ldx #$04		ldx	#4
.2009	20 1e 14	jsr $141e		jsr	deviceHandler
.200c	4c b5 1f	jmp $1fb5			jmp 	_PrintLoopSkip
.200f					_PrintTab:
.200f	a2 1a		ldx #$1a		ldx	#26
.2011	20 1e 14	jsr $141e		jsr	deviceHandler
.2014	4c b5 1f	jmp $1fb5			jmp 	_PrintLoopSkip
.2017					_PrintExit:
.2017	ad 0a 0c	lda $0c0a			lda		lastPrintToken 				; check last token
.201a	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.201c	f0 09		beq $2027			beq 	_PrintExit2
.201e	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2020	f0 05		beq $2027			beq 	_PrintExit2
.2022	a2 04		ldx #$04		ldx	#4
.2024	20 1e 14	jsr $141e		jsr	deviceHandler
.2027					_PrintExit2:
.2027	60		rts				rts
.2028					PrintString:
.2028	8a		txa				txa
.2029	48		pha				pha
.202a	98		tya				tya
.202b	48		pha				pha
.202c	a0 00		ldy #$00			ldy 	#0							; get length
.202e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2030	aa		tax				tax 								; into X
.2031	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.2033	f0 10		beq $2045			beq 	_PSExit
.2035	ca		dex				dex
.2036	8a		txa				txa
.2037	48		pha				pha
.2038	c8		iny				iny
.2039	b1 2a		lda ($2a),y			lda 	(temp0),y
.203b	a2 14		ldx #$14		ldx	#20
.203d	20 1e 14	jsr $141e		jsr	deviceHandler
.2040	68		pla				pla
.2041	aa		tax				tax
.2042	4c 31 20	jmp $2031			jmp 	_PSLoop
.2045					_PSExit:
.2045	68		pla				pla
.2046	a8		tay				tay
.2047	68		pla				pla
.2048	aa		tax				tax
.2049	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/proc.asm

.0c0b					paramCount:
>0c0b							.fill 	1
.204a					CallProc:
.204a	20 00 23	jsr $2300			jsr 	FindProcedure 				; find procedure, put in temp0. A contains name length.
.204d	48		pha				pha 								; save length on stack
.204e	85 32		sta $32				sta 	tempShort 					; save length in tempShort
.2050	a5 2b		lda $2b				lda 	temp0+1 					; save procedure target on stack.
.2052	48		pha				pha
.2053	a5 2a		lda $2a				lda 	temp0
.2055	48		pha				pha
.2056	98		tya				tya 								; calculate Y + length
.2057	18		clc				clc
.2058	65 32		adc $32				adc 	tempShort
.205a	a8		tay				tay
.205b	a2 00		ldx #$00			ldx 	#0 							; where the first parameter goes - 1
.205d					_CallProcEvalParams:
.205d	e8		inx				inx
.205e	b1 28		lda ($28),y			lda 	(codePtr),y 				; do we have ) , e.g. the end of the parameters ?
.2060	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2062	f0 0b		beq $206f			beq 	_CPDoneParams
.2064	20 a2 29	jsr $29a2			jsr 	Evaluate 					; evaluate a parameter
.2067	b1 28		lda ($28),y			lda 	(codePtr),Y 				; get what's next, preconsume
.2069	c8		iny				iny
.206a	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, go get another parameter
.206c	f0 ef		beq $205d			beq 	_CallProcEvalParams
.206e	88		dey				dey 								; undo consumption.
.206f					_CPDoneParams:
.206f	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; check closing parenthesis.
.2072	8e 0b 0c	stx $0c0b			stx 	paramCount 					; store parameter count+1
.2075	a2 04		ldx #$04			ldx 	#4							; make space on stack
.2077	a9 50		lda #$50			lda 	#markerPROC
.2079	20 69 30	jsr $3069			jsr 	RSClaim
.207c	a9 01		lda #$01			lda 	#1 							; store return address.
.207e	20 95 30	jsr $3095			jsr 	RSSavePosition
.2081	68		pla				pla 								; get the new code Ptr
.2082	85 28		sta $28				sta 	codePtr
.2084	68		pla				pla
.2085	85 29		sta $29				sta 	codePtr+1
.2087	68		pla				pla 								; length of name + 4 is the param start.
.2088	18		clc				clc
.2089	69 04		adc #$04			adc 	#4
.208b	a8		tay				tay
.208c	a2 ff		ldx #$ff			ldx 	#$FF
.208e					_CPLoadParameters:
.208e	e8		inx				inx 								; point to where the address should be loaded.
.208f	ec 0b 0c	cpx $0c0b			cpx 	paramCount 					; too many parameters in definition ?
.2092	f0 1e		beq $20b2			beq 	_CPParamError
.2094	b1 28		lda ($28),y			lda 	(codePtr),y					; what follows
.2096	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; is it the right bracket
.2098	f0 0e		beq $20a8			beq 	_CPParamComplete 			; done all the parameters, perhaps.
.209a	20 80 1e	jsr $1e80			jsr 	LocaliseVariable 			; make following variable local, ref in tos,x
.209d	20 c3 1c	jsr $1cc3			jsr 	WriteValue 					; copy the evaluated parameter into there.
.20a0	b1 28		lda ($28),y			lda 	(codePtr),y 				; followed by a comma ?
.20a2	c8		iny				iny
.20a3	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.20a5	f0 e7		beq $208e			beq 	_CPLoadParameters
.20a7	88		dey				dey 								; no, unconsume and check for )
.20a8					_CPParamComplete:
.20a8	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; check )
.20ab	e8		inx				inx 								; check right number of parameters have been consumed
.20ac	ec 0b 0c	cpx $0c0b			cpx 	paramCount
.20af	d0 01		bne $20b2			bne 	_CPParamError
.20b1	60		rts				rts
.20b2					_CPParamError:
.20b2	a2 18		ldx #$18			ldx 	#ErrorID_Params
.20b4	20 3f 14	jsr $143f		jsr	errorHandler
.20b7					ReturnProc:
.20b7	20 f2 1e	jsr $1ef2			jsr 	RestoreLocals 				; get the locals back.
.20ba	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.20bc	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.20be	c9 50		cmp #$50			cmp 	#markerPROC 						; does it match
.20c0	f0 05		beq $20c7			beq 	_isok
.20c2	a2 12		ldx #$12			ldx 	#ErrorID_endProcErr
.20c4	20 3f 14	jsr $143f		jsr	errorHandler
.20c7					_isok:
.20c7	a9 01		lda #$01			lda 	#1
.20c9	20 a8 30	jsr $30a8			jsr 	RSLoadPosition 				; reload the position from offset 1.
.20cc	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.20ce	20 8b 30	jsr $308b			jsr 	RSFree
.20d1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/readdata.asm

.0c0c					dataPtr:
>0c0c							.fill 	2
.0c0e					dataIndex:
>0c0e							.fill 	1
.20d2					CommandRead:
.20d2	a2 00		ldx #$00			ldx 	#0 							; get a reference to a variable in stack:0
.20d4	20 f4 29	jsr $29f4			jsr 	EvaluateReference
.20d7	20 18 21	jsr $2118			jsr 	SwapDPCP 					; use the data pointer.
.20da	b1 28		lda ($28),y			lda 	(codePtr),y 				; see where it is.
.20dc	c8		iny				iny
.20dd	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if it is on a comma, it is in data.
.20df	f0 07		beq $20e8			beq 	_CRInData
.20e1	88		dey				dey
.20e2	a9 dc		lda #$dc			lda 	#TKW_DATA 					; scan forward to a DATA statement.
.20e4	aa		tax				tax
.20e5	20 df 2f	jsr $2fdf			jsr 	ScanForward
.20e8					_CRInData:
.20e8	a2 01		ldx #$01			ldx 	#1 							; evaluate a value at Stack,1
.20ea	20 a2 29	jsr $29a2			jsr 	Evaluate
.20ed	ca		dex				dex 								; and write the value.
.20ee	20 c3 1c	jsr $1cc3			jsr 	WriteValue
.20f1	20 18 21	jsr $2118			jsr 	SwapDPCP 					; get the code pointer back.
.20f4	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows ?
.20f6	c8		iny				iny
.20f7	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; if comma, another variable
.20f9	f0 d7		beq $20d2			beq 	CommandRead
.20fb	88		dey				dey
.20fc	60		rts				rts
.20fd					CommandData:
.20fd	a9 80		lda #$80			lda 	#TOK_EOL 					; go forward to end of line or colon.
.20ff	a2 ca		ldx #$ca			ldx 	#TKW_COLON
.2101	20 df 2f	jsr $2fdf			jsr 	ScanForward
.2104	88		dey				dey 								; ending on EOL is a scan issue, as it increments
.2105	60		rts				rts
.2106					CommandRestore:
.2106	ad c8 0a	lda $0ac8			lda 	basePage
.2109	8d 0c 0c	sta $0c0c			sta 	dataPtr
.210c	ad c9 0a	lda $0ac9			lda 	basePage+1
.210f	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.2112	a9 03		lda #$03			lda 	#3
.2114	8d 0e 0c	sta $0c0e			sta 	dataIndex
.2117	60		rts				rts
.2118					SwapDPCP:
.2118	8a		txa				txa
.2119	48		pha				pha
.211a	98		tya				tya 								; swap Y, DataIndex
.211b	ac 0e 0c	ldy $0c0e			ldy 	DataIndex
.211e	8d 0e 0c	sta $0c0e			sta 	DataIndex
.2121	a5 28		lda $28				lda 	codePtr 					; swap code/dataptr low
.2123	ae 0c 0c	ldx $0c0c			ldx 	dataptr
.2126	8d 0c 0c	sta $0c0c			sta 	dataPtr
.2129	86 28		stx $28				stx 	codePtr
.212b	a5 29		lda $29				lda 	codePtr+1 					; swap code/dataptr high.
.212d	ae 0d 0c	ldx $0c0d			ldx 	dataptr+1
.2130	8d 0d 0c	sta $0c0d			sta 	dataPtr+1
.2133	86 29		stx $29				stx 	codePtr+1
.2135	68		pla				pla
.2136	aa		tax				tax
.2137	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/rem.asm

.2138					Command_Rem:
.2138					Command_Rem2:
.2138	b1 28		lda ($28),y			lda 	(codePtr),y 				; what follows
.213a	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.213c	d0 06		bne $2144			bne 	_CRNotString
.213e	c8		iny				iny
.213f	98		tya				tya
.2140	38		sec				sec
.2141	71 28		adc ($28),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.2143	a8		tay				tay
.2144					_CRNotString:
.2144	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/repeat.asm

.2145					Command_Repeat:
.2145	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2147	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2149	20 69 30	jsr $3069			jsr 	RSClaim
.214c	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.214e	20 95 30	jsr $3095			jsr 	RSSavePosition
.2151	60		rts				rts
.2152					Command_Until:
.2152	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2154	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2156	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2158	f0 05		beq $215f			beq 	_isok
.215a	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.215c	20 3f 14	jsr $143f		jsr	errorHandler
.215f					_isok:
.215f	20 bf 29	jsr $29bf			jsr 	EvaluateRootInteger 		; at the bottom.
.2162	20 79 2f	jsr $2f79			jsr 	MInt32Zero					; check if TOS zero
.2165	d0 06		bne $216d			bne 	_CUExit
.2167	a9 01		lda #$01			lda 	#1
.2169	20 a8 30	jsr $30a8			jsr 	RSLoadPosition 				; reload the position from offset 1.
.216c	60		rts				rts
.216d					_CUExit:
.216d	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.216f	20 8b 30	jsr $308b			jsr 	RSFree
.2172	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/run.asm

.0c0f					breakCounter:
>0c0f								.fill 	1
.0c10					breakIncrement:
>0c10								.fill 	1
.2173					Command_Run:
.2173					XCommand_Run:
.2173	a2 ff		ldx #$ff			ldx 	#$FF 						; reset the stack.
.2175	9a		txs				txs
.2176	20 fd 21	jsr $21fd			jsr 	BreakOn 					; turn break on
.2179	20 46 1a	jsr $1a46			jsr 	CommandClear 				; clear everything.
.217c	20 03 22	jsr $2203			jsr 	ResetCodeAddress 			; back to the start.
.217f					Command_RunFrom:
.217f	a0 03		ldy #$03			ldy 	#3 							; over offset/line #
.2181					CRNextInstruction:
.2181	64 3a		stz $3a				stz 	softMemAlloc+1
.2183	ad 0f 0c	lda $0c0f			lda 	breakCounter 				; check for break.
.2186	6d 10 0c	adc $0c10			adc 	breakIncrement
.2189	8d 0f 0c	sta $0c0f			sta 	breakCounter
.218c	90 05		bcc $2193			bcc 	_CRNoChecks
.218e	a2 00		ldx #$00		ldx	#0
.2190	20 1e 14	jsr $141e		jsr	deviceHandler
.2193					_CRNoChecks
.2193	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next token.
.2195	10 1c		bpl $21b3			bpl 	_CRNotToken
.2197	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.2199	b0 0c		bcs $21a7			bcs 	_CRExecute
.219b	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; unary is ignored.
.219d	b0 71		bcs $2210			bcs 	Unimplemented
.219f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.21a1	b0 04		bcs $21a7			bcs 	_CRExecute
.21a3	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.21a5	b0 16		bcs $21bd			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ? or AND
.21a7					_CRExecute:
.21a7	c8		iny				iny 								; consume it.
.21a8	0a		asl a				asl 	a 							; double it, losing most significant bit.
.21a9	aa		tax				tax
.21aa	20 b0 21	jsr $21b0			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.21ad	4c 81 21	jmp $2181			jmp 	CRNextInstruction
.21b0					_CRRunRoutine:
.21b0	7c 1a 22	jmp ($221a,x)			jmp 	(Group0Vectors,x)
.21b3					_CRNotToken:
.21b3	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.21b5	b0 59		bcs $2210			bcs 	Unimplemented
.21b7					_CRDefaultLet:
.21b7	20 b0 1c	jsr $1cb0			jsr 	CommandLet 					; do the default, LET
.21ba	4c 81 21	jmp $2181			jmp 	CRNextInstruction
.21bd					_CRCheckIndirect:
.21bd	c9 86		cmp #$86			cmp 	#TKW_AND 					; AND (assembler)
.21bf	f0 0a		beq $21cb			beq 	_CRAndCommand
.21c1	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.21c3	f0 f2		beq $21b7			beq 	_CRDefaultLet
.21c5	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.21c7	f0 ee		beq $21b7			beq 	_CRDefaultLet
.21c9	d0 45		bne $2210			bne 	Unimplemented
.21cb					_CRAndCommand:
.21cb	c8		iny				iny 								; skip over the AND token
.21cc	a9 92		lda #$92			lda 	#TKW_LPARENANDRPAREN 		; replace it with the pseudo-and
.21ce	20 e8 21	jsr $21e8			jsr 	CommandAssembler 			; do the assembler command
.21d1	4c 81 21	jmp $2181			jmp 	CRNextInstruction 			; and loop round.
.21d4					CommandShift1:
.21d4	b1 28		lda ($28),y			lda 	(codePtr),y 				; get shifted value
.21d6	10 38		bpl $2210			bpl 	Unimplemented 				; we have an error as this should not happen.
.21d8	c8		iny				iny 								; advance over it.
.21d9	c9 91		cmp #$91			cmp 	#TKA_GROUP1 				; is it an assembler constant ?
.21db	b0 0b		bcs $21e8			bcs 	CommandAssembler
.21dd	0a		asl a				asl 	a 							; double into X
.21de	aa		tax				tax
.21df	7c de 22	jmp ($22de,x)			jmp 	(Group1Vectors-12,x) 		; and do the code.
.21e2					CommandShift2:
.21e2	a9 ff		lda #$ff			lda 	#$FF 						; $FF means command not unary function.
.21e4	20 42 17	jsr $1742		jsr	extensionHandler
.21e7	60		rts				rts
.21e8					CommandAssembler:
.21e8	a2 00		ldx #$00		ldx	#0
.21ea	20 e3 12	jsr $12e3		jsr	assemblerHandler
.21ed	60		rts				rts
.21ee					CommandAssemblerLabel:
.21ee	a2 02		ldx #$02		ldx	#2
.21f0	20 e3 12	jsr $12e3		jsr	assemblerHandler
.21f3	60		rts				rts
.21f4					CommandColon:
.21f4	60		rts				rts
.21f5					CommandBreak:
.21f5	20 bf 29	jsr $29bf			jsr 	EvaluateRootInteger
.21f8	20 79 2f	jsr $2f79			jsr 	MInt32Zero
.21fb	f0 02		beq $21ff			beq 	BreakOff
.21fd					BreakOn:
.21fd	a2 08		ldx #$08			ldx 	#8
.21ff					BreakOff:
.21ff	8e 10 0c	stx $0c10			stx 	breakIncrement
.2202	60		rts				rts
.2203					ResetCodeAddress:
.2203	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.2206	85 28		sta $28				sta 	codePtr
.2208	ad c9 0a	lda $0ac9			lda 	basePage+1
.220b	85 29		sta $29				sta 	codePtr+1
.220d	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.220f	60		rts				rts
.2210					Unimplemented:
.2210	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.2212	20 3f 14	jsr $143f		jsr	errorHandler
.2215					TKErr01:
.2215					TKErr02:
.2215					TKErr03:
.2215					TKErr04:
.2215					TKErr05:
.2215					TKErr06:
.2215					TKErr07:
.2215					TKErr08:
.2215					TKErr09:
.2215					TKErr10:
.2215					TKErr11:
.2215	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2217	20 3f 14	jsr $143f		jsr	errorHandler

;******  Processing file: main/commands/../../generated/tokenvectors0.inc

.221a					Group0Vectors:
>221a	e1 23					.word	AdvanceNextLine          ; $80 [[eol]]
>221c	d4 21					.word	CommandShift1            ; $81 [[sh1]]
>221e	e2 21					.word	CommandShift2            ; $82 [[sh2]]
>2220	15 22					.word	TKErr09                  ; $83 [[sh3]]
>2222	15 22					.word	TKErr10                  ; $84 [[fpc]]
>2224	15 22					.word	TKErr08                  ; $85 [[str]]
>2226	a5 25					.word	AndHandler               ; $86 and
>2228	92 25					.word	OrHandler                ; $87 or
>222a	7f 25					.word	XorHandler               ; $88 xor
>222c	c7 26					.word	CompareGreaterEq         ; $89 >=
>222e	d1 26					.word	CompareLessEq            ; $8a <=
>2230	b3 26					.word	CompareGreater           ; $8b >
>2232	a9 26					.word	CompareLess              ; $8c <
>2234	9f 26					.word	CompareEquals            ; $8d =
>2236	bd 26					.word	CompareNotEquals         ; $8e <>
>2238	10 25					.word	AddHandler               ; $8f +
>223a	33 25					.word	SubHandler               ; $90 -
>223c	cb 25					.word	ShrHandler               ; $91 >>
>223e	b8 25					.word	ShlHandler               ; $92 <<
>2240	46 25					.word	MulHandler               ; $93 *
>2242	59 25					.word	DivHandler               ; $94 /
>2244	6c 25					.word	ModHandler               ; $95 mod
>2246	04 26					.word	PowerHandler             ; $96 ^
>2248	de 25					.word	WordRefHandler           ; $97 !
>224a	f1 25					.word	ByteRefHandler           ; $98 ?
>224c	45 21					.word	Command_Repeat           ; $99 repeat
>224e	a9 24					.word	Command_While            ; $9a while
>2250	af 1a					.word	Command_FOR              ; $9b for
>2252	be 1b					.word	CommandIf                ; $9c if
>2254	15 22					.word	TKErr04                  ; $9d defproc
>2256	52 21					.word	Command_Until            ; $9e until
>2258	cc 24					.word	Command_Wend             ; $9f wend
>225a	10 1b					.word	Command_NEXT             ; $a0 next
>225c	15 22					.word	TKErr06                  ; $a1 then
>225e	f9 1b					.word	Command_ENDIF            ; $a2 endif
>2260	b7 20					.word	ReturnProc               ; $a3 endproc
>2262	a9 28					.word	UnaryParenthesis         ; $a4 (
>2264	07 2a					.word	UnaryLen                 ; $a5 len(
>2266	4b 2a					.word	UnarySgn                 ; $a6 sgn(
>2268	34 2a					.word	UnaryAbs                 ; $a7 abs(
>226a	a4 2a					.word	Unary_Random             ; $a8 random(
>226c	ee 2a					.word	Unary_Page               ; $a9 page
>226e	4e 2f					.word	MInt32True               ; $aa true
>2270	52 2f					.word	MInt32False              ; $ab false
>2272	b9 2a					.word	Unary_Min                ; $ac min(
>2274	bd 2a					.word	Unary_Max                ; $ad max(
>2276	c6 2b					.word	UnarySys                 ; $ae sys(
>2278	6f 2b					.word	UnaryTimer               ; $af timer(
>227a	fe 28					.word	EventFunction            ; $b0 event(
>227c	98 2b					.word	UnaryGet                 ; $b1 get(
>227e	88 2b					.word	UnaryInkey               ; $b2 inkey(
>2280	3f 2b					.word	UnaryAlloc               ; $b3 alloc(
>2282	ff 2b					.word	ExecChr                  ; $b4 chr$(
>2284	2f 2c					.word	ExecLeft                 ; $b5 left$(
>2286	4c 2c					.word	ExecMid                  ; $b6 mid$(
>2288	74 2c					.word	ExecRight                ; $b7 right$(
>228a	e1 26					.word	Event_Str                ; $b8 str$(
>228c	10 27					.word	UnaryVal                 ; $b9 val(
>228e	62 2a					.word	UnaryPeek                ; $ba peek(
>2290	68 2a					.word	UnaryDeek                ; $bb deek(
>2292	6e 2a					.word	UnaryLeek                ; $bc leek(
>2294	25 2a					.word	UnaryAsc                 ; $bd asc(
>2296	19 2b					.word	UnaryIntToFloat          ; $be int(
>2298	2c 2b					.word	UnaryFloatToInt          ; $bf float(
>229a	13 27					.word	UnaryIsVal               ; $c0 isval(
>229c	16 2c					.word	ExecUpper                ; $c1 upper$(
>229e	13 2c					.word	ExecLower                ; $c2 lower$(
>22a0	fc 2a					.word	UnaryReference           ; $c3 @
>22a2	12 2b					.word	UnaryComplement          ; $c4 ~
>22a4	0f 2b					.word	UnaryHexMarker           ; $c5 &
>22a6	b1 2b					.word	UnaryGetString           ; $c6 get$(
>22a8	b7 2b					.word	UnaryInkeyString         ; $c7 inkey$(
>22aa	ee 2b					.word	UnaryMem                 ; $c8 mem
>22ac	15 22					.word	TKErr01                  ; $c9 )
>22ae	f4 21					.word	CommandColon             ; $ca :
>22b0	15 22					.word	TKErr02                  ; $cb ,
>22b2	15 22					.word	TKErr03                  ; $cc ;
>22b4	38 21					.word	Command_Rem2             ; $cd '
>22b6	15 22					.word	TKErr07                  ; $ce to
>22b8	15 22					.word	TKErr05                  ; $cf step
>22ba	4a 20					.word	CallProc                 ; $d0 proc
>22bc	62 1e					.word	CommandLocal             ; $d1 local
>22be	a1 1a					.word	Command_Dim              ; $d2 dim
>22c0	38 21					.word	Command_Rem              ; $d3 rem
>22c2	b0 1c					.word	CommandLet               ; $d4 let
>22c4	fa 1b					.word	Command_Input            ; $d5 input
>22c6	f3 1b					.word	Command_ELSE             ; $d6 else
>22c8	88 24					.word	Command_VDU              ; $d7 vdu
>22ca	af 1f					.word	Command_Print            ; $d8 print
>22cc	56 24					.word	CommandGOTO              ; $d9 goto
>22ce	2b 24					.word	CommandGOSUB             ; $da gosub
>22d0	3e 24					.word	CommandRETURN            ; $db return
>22d2	fd 20					.word	CommandData              ; $dc data
>22d4	38 1a					.word	Command_Assert           ; $dd assert
>22d6	72 1f					.word	Command_Poke             ; $de poke
>22d8	76 1f					.word	Command_Doke             ; $df doke
>22da	7a 1f					.word	Command_Loke             ; $e0 loke
>22dc	fb 23					.word	Command_Ink              ; $e1 ink
>22de	06 24					.word	Command_Paper            ; $e2 paper
>22e0	f5 23					.word	Command_CLS              ; $e3 cls
>22e2	11 24					.word	Command_Locate           ; $e4 locate
>22e4	f5 21					.word	CommandBreak             ; $e5 break
>22e6	ee 21					.word	CommandAssemblerLabel    ; $e6 .
>22e8	15 22					.word	TKErr11                  ; $e7 #

;******  Return to file: main/commands/run.asm


;******  Processing file: main/commands/../../generated/tokenvectors1.inc

.22ea					Group1Vectors:
>22ea	46 1a					.word	CommandClear             ; $86 clear
>22ec	09 1e					.word	CommandLoad              ; $87 load
>22ee	1e 1e					.word	CommandSave              ; $88 save
>22f0	2e 1d					.word	CommandList              ; $89 list
>22f2	64 1f					.word	Command_New              ; $8a new
>22f4	73 21					.word	Command_Run              ; $8b run
>22f6	d2 20					.word	CommandRead              ; $8c read
>22f8	06 21					.word	CommandRestore           ; $8d restore
>22fa	db 23					.word	CommandEnd               ; $8e end
>22fc	d6 23					.word	CommandStop              ; $8f stop
>22fe	de 23					.word	CommandXemu              ; $90 xemu

;******  Return to file: main/commands/run.asm


;******  Return to file: main/main.asm


;******  Processing file: main/commands/scanner.asm

.0c11					procList:
>0c11							.fill 	2		 					; terminated by name high being zero.
.0c13					yInLine:
>0c13							.fill 	1
.2300					FindProcedure:
.2300	8c 13 0c	sty $0c13			sty 	yInLine 					; save current position.
.2303	20 be 23	jsr $23be			jsr 	CalculateProcedureHash		; calculate the hash of the procedure.
.2306	85 2c		sta $2c				sta 	temp1
.2308	ad 11 0c	lda $0c11			lda		procList 					; put procList address in temp2
.230b	85 2e		sta $2e				sta 	temp2
.230d	ad 12 0c	lda $0c12			lda 	procList+1
.2310	85 2f		sta $2f				sta 	temp2+1
.2312	a0 00		ldy #$00			ldy 	#0 							; position in this table.
.2314					_FPLoop:
.2314	b1 2e		lda ($2e),y			lda 	(temp2),y
.2316	f0 4f		beq $2367			beq 	_FPError 					; if so, we don't know this procedure.
.2318	85 2b		sta $2b				sta 	temp0+1 					; copy MSB/LSB to temp0 as we go.
.231a	c8		iny				iny
.231b	b1 2e		lda ($2e),y			lda 	(temp2),y
.231d	85 2a		sta $2a				sta 	temp0
.231f	c8		iny				iny
.2320	b1 2e		lda ($2e),y			lda 	(temp2),y					; check the procedure hash.
.2322	c5 2c		cmp $2c				cmp 	temp1
.2324	d0 2b		bne $2351			bne 	_FPNext 					; hash is different, go to next.
.2326	38		sec				sec
.2327	ad 13 0c	lda $0c13			lda 	yInLine 					; position in line must be at least 4
.232a	e9 04		sbc #$04			sbc 	#4
.232c	18		clc				clc
.232d	65 28		adc $28				adc 	codePtr
.232f	85 30		sta $30				sta 	temp3
.2331	a5 29		lda $29				lda 	codePtr+1
.2333	69 00		adc #$00			adc 	#0
.2335	85 31		sta $31				sta 	temp3+1
.2337	98		tya				tya
.2338	48		pha				pha
.2339	a0 04		ldy #$04			ldy 	#4
.233b					_FPCName:
.233b	b1 30		lda ($30),y			lda 	(temp3),y 					; check the same
.233d	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.233f	d0 0e		bne $234f			bne 	_FPpulYNext 				; if different go to next one.
.2341	c8		iny				iny
.2342	c9 3a		cmp #$3a			cmp 	#$3A
.2344	90 f5		bcc $233b			bcc 	_FPCName 					; compare the whole lot....
.2346	68		pla				pla 								; throw away the saved Y
.2347	98		tya				tya 								; length of name is Y-4
.2348	38		sec				sec
.2349	e9 04		sbc #$04			sbc 	#4
.234b	ac 13 0c	ldy $0c13			ldy 	yInLine  					; get the original Y back
.234e	60		rts				rts
.234f					_FPpulYNext:
.234f	68		pla				pla
.2350	a8		tay				tay
.2351					_FPNext:
.2351	c8		iny				iny 								; next procedure record.
.2352	10 c0		bpl $2314			bpl 	_FPLoop 					; if done 128 already ... e.g. Y -ve
.2354	98		tya				tya 								; subtract 128 from Y
.2355	38		sec				sec
.2356	e9 80		sbc #$80			sbc 	#128
.2358	a8		tay				tay
.2359	18		clc				clc 								; add 128 to temp2, so we can have more than
.235a	a5 2e		lda $2e				lda 	temp2 						; 255/3 = 85 procedures
.235c	69 80		adc #$80			adc 	#128
.235e	85 2e		sta $2e				sta 	temp2
.2360	90 b2		bcc $2314			bcc 	_FPLoop
.2362	e6 2f		inc $2f				inc 	temp2+1
.2364	4c 14 23	jmp $2314			jmp 	_FPLoop
.2367					_FPError:
.2367	a2 17		ldx #$17			ldx 	#ErrorID_NoProc
.2369	20 3f 14	jsr $143f		jsr	errorHandler
.236c					ScanProc:
.236c	98		tya				tya
.236d	48		pha				pha
.236e	a5 35		lda $35				lda 	lowMemory 					; copy the start of the procList, at low memory
.2370	8d 11 0c	sta $0c11			sta 	procList
.2373	a5 36		lda $36				lda 	lowMemory+1
.2375	8d 12 0c	sta $0c12			sta 	procList+1
.2378	20 03 22	jsr $2203			jsr 	ResetCodeAddress 			; back to the start.
.237b					_ScanLoop:
.237b	a0 00		ldy #$00			ldy 	#0 							; check reached program end
.237d	b1 28		lda ($28),y			lda 	(codePtr),y
.237f	f0 2a		beq $23ab			beq 	_ScanExit
.2381	a0 03		ldy #$03			ldy 	#3							; get first token
.2383	b1 28		lda ($28),y			lda 	(codePtr),y
.2385	c9 9d		cmp #$9d			cmp 	#TKW_DEFPROC				; skip to next if not DEFPROC
.2387	d0 12		bne $239b			bne 	_ScanNext
.2389	a5 29		lda $29				lda 	codePtr+1 					; write high and low address of this line.
.238b	20 b3 23	jsr $23b3			jsr 	_ScanWrite
.238e	a5 28		lda $28				lda 	codePtr
.2390	20 b3 23	jsr $23b3			jsr 	_ScanWrite
.2393	a0 04		ldy #$04			ldy 	#4 							; start of name part
.2395	20 be 23	jsr $23be			jsr 	CalculateProcedureHash 		; calculate procedure hash
.2398	20 b3 23	jsr $23b3			jsr 	_ScanWrite					; and write that
.239b					_ScanNext:
.239b	18		clc				clc
.239c	a0 00		ldy #$00			ldy 	#0
.239e	b1 28		lda ($28),y			lda 	(codePtr),y
.23a0	65 28		adc $28				adc 	codePtr
.23a2	85 28		sta $28				sta 	codePtr
.23a4	90 d5		bcc $237b			bcc 	_ScanLoop
.23a6	e6 29		inc $29				inc 	codePtr+1
.23a8	4c 7b 23	jmp $237b			jmp 	_ScanLoop
.23ab					_ScanExit:
.23ab	a9 00		lda #$00			lda 	#0 							; write ending zero.
.23ad	20 b3 23	jsr $23b3			jsr 	_ScanWrite
.23b0	68		pla				pla
.23b1	a8		tay				tay
.23b2	60		rts				rts
.23b3					_ScanWrite:
.23b3	a0 00		ldy #$00			ldy 	#0
.23b5	91 35		sta ($35),y			sta 	(lowMemory),y
.23b7	e6 35		inc $35				inc 	lowMemory
.23b9	d0 02		bne $23bd			bne 	_SWNoCarry
.23bb	e6 36		inc $36				inc 	lowMemory+1
.23bd					_SWNoCarry:
.23bd	60		rts				rts
.23be					CalculateProcedureHash:
.23be	a9 00		lda #$00			lda 	#0 							; clear hash.
.23c0	85 2a		sta $2a				sta 	temp0
.23c2					_CPHLoop:
.23c2	18		clc				clc 								; add character and rotate and add carry back in
.23c3	b1 28		lda ($28),y			lda 	(codePtr),y
.23c5	65 2a		adc $2a				adc 	temp0
.23c7	6a		ror a				ror 	a
.23c8	69 0d		adc #$0d			adc 	#13 						; primes usually good for this sort of thing.
.23ca	85 2a		sta $2a				sta 	temp0 						; (down with this sort of thing)
.23cc	b1 28		lda ($28),y			lda 	(codePtr),y
.23ce	c8		iny				iny 								; advance incase we go round again.
.23cf	c9 3a		cmp #$3a			cmp 	#$3A
.23d1	90 ef		bcc $23c2			bcc 	_CPHLoop
.23d3	a5 2a		lda $2a				lda 	temp0
.23d5	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/stopend.asm

.23d6					CommandStop:
.23d6	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.23d8	20 3f 14	jsr $143f		jsr	errorHandler
.23db					CommandEnd:
.23db	4c b7 30	jmp $30b7			jmp 	WarmStart
.23de					CommandXemu:
.23de	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.23e1					AdvanceNextLine:
.23e1	a0 00		ldy #$00			ldy 	#0 							; get offset
.23e3	b1 28		lda ($28),y			lda 	(codePtr),y
.23e5	18		clc				clc 								; add to codePtr
.23e6	65 28		adc $28				adc 	codePtr
.23e8	85 28		sta $28				sta 	codePtr
.23ea	90 02		bcc $23ee			bcc 	_ANLNoCarry
.23ec	e6 29		inc $29				inc 	codePtr+1
.23ee					_ANLNoCarry:
.23ee	b1 28		lda ($28),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.23f0	f0 e9		beq $23db			beq 	CommandEnd 					; execute END
.23f2	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.23f4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/text.asm

.23f5					Command_CLS:
.23f5	a2 02		ldx #$02		ldx	#2
.23f7	20 1e 14	jsr $141e		jsr	deviceHandler
.23fa	60		rts				rts
.23fb					Command_Ink:
.23fb	a2 00		ldx #$00			ldx 	#0
.23fd	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger
.2400	a2 08		ldx #$08		ldx	#8
.2402	20 1e 14	jsr $141e		jsr	deviceHandler
.2405	60		rts				rts
.2406					Command_Paper:
.2406	a2 00		ldx #$00			ldx 	#0
.2408	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger
.240b	a2 12		ldx #$12		ldx	#18
.240d	20 1e 14	jsr $141e		jsr	deviceHandler
.2410	60		rts				rts
.2411					Command_Locate:
.2411	a2 00		ldx #$00			ldx 	#0
.2413	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger
.2416	20 d2 2f	jsr $2fd2			jsr 	CheckComma
.2419	e8		inx				inx
.241a	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger
.241d	98		tya				tya
.241e	48		pha				pha
.241f	a4 49		ldy $49				ldy 	esInt0+1
.2421	a5 48		lda $48				lda 	esInt0
.2423	a2 10		ldx #$10		ldx	#16
.2425	20 1e 14	jsr $141e		jsr	deviceHandler
.2428	68		pla				pla
.2429	a8		tay				tay
.242a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/transfer.asm

.242b					CommandGOSUB:
.242b	20 bf 29	jsr $29bf			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.242e	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.2430	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.2432	20 69 30	jsr $3069			jsr 	RSClaim
.2435	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2437	20 95 30	jsr $3095			jsr 	RSSavePosition
.243a	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.243c	f0 1b		beq $2459			beq 	GotoTOS 					; and do a GOTO there.
.243e					CommandRETURN:
.243e	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2440	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.2442	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.2444	f0 05		beq $244b			beq 	_isok
.2446	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.2448	20 3f 14	jsr $143f		jsr	errorHandler
.244b					_isok:
.244b	a9 01		lda #$01			lda 	#1
.244d	20 a8 30	jsr $30a8			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2450	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2452	20 8b 30	jsr $308b			jsr 	RSFree
.2455	60		rts				rts
.2456					CommandGOTO:
.2456	20 bf 29	jsr $29bf			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.2459					GotoTOS:
.2459	20 03 22	jsr $2203			jsr 	ResetCodeAddress 			; simple search.
.245c					_GotoSearch:
.245c	a0 00		ldy #$00			ldy 	#0 							; get offset
.245e	b1 28		lda ($28),y			lda 	(codePtr),y
.2460	f0 21		beq $2483			beq 	_GotoError 					; not found.
.2462	c8		iny				iny									; check LSB match
.2463	b1 28		lda ($28),y			lda 	(codePtr),y
.2465	d5 48		cmp $48,x			cmp 	esInt0,x
.2467	d0 07		bne $2470			bne 	_GotoNext
.2469	c8		iny				iny
.246a	b1 28		lda ($28),y			lda 	(codePtr),y
.246c	d5 50		cmp $50,x			cmp 	esInt1,x
.246e	f0 10		beq $2480			beq 	_GotoFound
.2470					_GotoNext:
.2470	a0 00		ldy #$00			ldy 	#0 							; go next line
.2472	b1 28		lda ($28),y			lda 	(codePtr),y
.2474	18		clc				clc
.2475	65 28		adc $28				adc 	codePtr
.2477	85 28		sta $28				sta 	codePtr
.2479	90 e1		bcc $245c			bcc 	_GotoSearch
.247b	e6 29		inc $29				inc 	codePtr+1
.247d	4c 5c 24	jmp $245c			jmp 	_GotoSearch
.2480					_GotoFound:
.2480	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.2482	60		rts				rts
.2483					_GotoError:
.2483	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.2485	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/commands/vdu.asm

.2488					Command_VDU:
.2488	20 bf 29	jsr $29bf			jsr 	EvaluateRootInteger 			; get integer at root.
.248b	a5 48		lda $48				lda 	esInt0
.248d	a2 14		ldx #$14		ldx	#20
.248f	20 1e 14	jsr $141e		jsr	deviceHandler
.2492					_CVNext:
.2492	b1 28		lda ($28),y			lda 	(codePtr),y 					; what follows ?
.2494	c8		iny				iny
.2495	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 						; comma, do again
.2497	f0 ef		beq $2488			beq 	Command_VDU
.2499	c9 cc		cmp #$cc			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.249b	d0 0a		bne $24a7			bne 	_CVExit
.249d	a5 50		lda $50				lda 	esInt1
.249f	a2 14		ldx #$14		ldx	#20
.24a1	20 1e 14	jsr $141e		jsr	deviceHandler
.24a4	4c 92 24	jmp $2492			jmp 	_CVNext
.24a7	88		dey		_CVExit:dey
.24a8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/commands/while.asm

.24a9					Command_While:
.24a9	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.24ab	a2 04		ldx #$04			ldx 	#4
.24ad	20 69 30	jsr $3069			jsr 	RSClaim 					; create on stack.
.24b0	88		dey				dey
.24b1	a9 01		lda #$01			lda 	#1
.24b3	20 95 30	jsr $3095			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.24b6	c8		iny				iny
.24b7	20 c1 29	jsr $29c1			jsr 	EvaluateInteger				; get the conditional
.24ba	20 79 2f	jsr $2f79			jsr 	MInt32Zero 	 				; if zero, skip forward to the fail code.
.24bd	f0 01		beq $24c0			beq 	_CWFail
.24bf	60		rts				rts
.24c0					_CWFail:
.24c0	a9 04		lda #$04			lda 	#4
.24c2	20 8b 30	jsr $308b			jsr 	RSFree 						; close the just opened position.
.24c5	a9 9f		lda #$9f			lda 	#TKW_WEND 					; scan forward past WEND.
.24c7	aa		tax				tax
.24c8	20 df 2f	jsr $2fdf			jsr 	ScanForward
.24cb	60		rts				rts
.24cc					Command_Wend:
.24cc	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.24ce	a1 37		lda ($37,x)			lda 	(rsPointer,x)
.24d0	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.24d2	f0 05		beq $24d9			beq 	_isok
.24d4	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.24d6	20 3f 14	jsr $143f		jsr	errorHandler
.24d9					_isok:
.24d9	a9 01		lda #$01			lda 	#1
.24db	20 a8 30	jsr $30a8			jsr 	RSLoadPosition				; go back until true
.24de	a9 04		lda #$04			lda 	#4
.24e0	20 8b 30	jsr $308b			jsr 	RSFree 						; close the loop
.24e3	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/binary.asm

.24e4					BinaryProcess:
.24e4	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.24e6	15 41		ora $41,x			ora 	esType+1,x 					; (the float bit)
.24e8	0a		asl a				asl 	a
.24e9	30 0e		bmi $24f9			bmi 	_BPStringType 				; if bit 6 is set, then string type, error
.24eb	18		clc				clc 								; return CC for integer
.24ec	29 02		and #$02			and 	#$02 						; $02 because of ASL A. check original bit 1.
.24ee	f0 08		beq $24f8			beq 	_BPExit 					; if both integer then return with CC.
.24f0	20 fe 24	jsr $24fe			jsr 	BPMakeBothFloat 			; make both float
.24f3	a9 01		lda #$01			lda 	#$01 						; set result type to float
.24f5	95 40		sta $40,x			sta 	esType,x
.24f7	38		sec				sec 								; and return with carry set.
.24f8					_BPExit:
.24f8	60		rts				rts
.24f9					_BPStringType:
.24f9	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.24fb	20 3f 14	jsr $143f		jsr	errorHandler
.24fe					BPMakeBothFloat:
.24fe	e8		inx				inx
.24ff	20 03 25	jsr $2503			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.2502	ca		dex				dex
.2503					BPMakeFloat:
.2503	b5 40		lda $40,x			lda 	esType,x 					; get type bit which is in bit 0
.2505	4a		lsr a				lsr 	a
.2506	b0 07		bcs $250f			bcs 	_BPIsFloat 					; already a float if set.
.2508	8a		txa				txa
.2509	a2 1a		ldx #$1a		ldx	#26
.250b	20 51 18	jsr $1851		jsr	floatingpointHandler
.250e	aa		tax				tax
.250f					_BPIsFloat:
.250f	60		rts				rts
.2510					AddHandler:
.2510	20 5f 27	jsr $275f			jsr 	DereferenceTwo 				; dereference top two on stack.
.2513	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.2515	35 41		and $41,x			and 	esType+1,x
.2517	29 40		and #$40			and 	#$40 						; if both have bit 6 set ... we have two strings
.2519	d0 10		bne $252b			bne 	_AHStringConcat				; concatenate strings.
.251b	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.251e	b0 03		bcs $2523			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2520	4c 36 2e	jmp $2e36			jmp 	MInt32Add 							; else do it as integer.
.2523					_IsFPOperation:
.2523	8a		txa				txa 								; call the relevant fp routine
.2524	a2 02		ldx #$02		ldx	#2
.2526	20 51 18	jsr $1851		jsr	floatingpointHandler
.2529	aa		tax				tax
.252a	60		rts				rts
.252b					_AHStringConcat:
.252b	8a		txa				txa 								; handled by the string module.
.252c	a2 04		ldx #$04		ldx	#4
.252e	20 72 33	jsr $3372		jsr	stringHandler
.2531	aa		tax				tax
.2532	60		rts				rts
.2533					SubHandler:
.2533	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.2536	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.2539	b0 03		bcs $253e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.253b	4c 50 2e	jmp $2e50			jmp 	MInt32Sub 							; else do it as integer.
.253e					_IsFPOperation:
.253e	8a		txa				txa 								; call the relevant fp routine
.253f	a2 10		ldx #$10		ldx	#16
.2541	20 51 18	jsr $1851		jsr	floatingpointHandler
.2544	aa		tax				tax
.2545	60		rts				rts
.2546					MulHandler:
.2546	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.2549	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.254c	b0 03		bcs $2551			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.254e	4c 6a 2e	jmp $2e6a			jmp 	MInt32Multiply 							; else do it as integer.
.2551					_IsFPOperation:
.2551	8a		txa				txa 								; call the relevant fp routine
.2552	a2 0a		ldx #$0a		ldx	#10
.2554	20 51 18	jsr $1851		jsr	floatingpointHandler
.2557	aa		tax				tax
.2558	60		rts				rts
.2559					DivHandler:
.2559	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.255c	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.255f	b0 03		bcs $2564			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2561	4c 27 2d	jmp $2d27			jmp 	MInt32SDivide 							; else do it as integer.
.2564					_IsFPOperation:
.2564	8a		txa				txa 								; call the relevant fp routine
.2565	a2 06		ldx #$06		ldx	#6
.2567	20 51 18	jsr $1851		jsr	floatingpointHandler
.256a	aa		tax				tax
.256b	60		rts				rts
.256c					ModHandler:
.256c	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.256f	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.2572	b0 03		bcs $2577			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2574	4c a5 2d	jmp $2da5			jmp 	MInt32Modulus 							; else do it as integer.
.2577					_IsFPOperation:
.2577	8a		txa				txa 								; call the relevant fp routine
.2578	a2 08		ldx #$08		ldx	#8
.257a	20 51 18	jsr $1851		jsr	floatingpointHandler
.257d	aa		tax				tax
.257e	60		rts				rts
.257f					XorHandler:
.257f	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.2582	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.2585	b0 03		bcs $258a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.2587	4c d9 2c	jmp $2cd9			jmp 	MInt32Xor 							; else do it as integer.
.258a					_IsFPOperation:
.258a	8a		txa				txa 								; call the relevant fp routine
.258b	a2 08		ldx #$08		ldx	#8
.258d	20 51 18	jsr $1851		jsr	floatingpointHandler
.2590	aa		tax				tax
.2591	60		rts				rts
.2592					OrHandler:
.2592	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.2595	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.2598	b0 03		bcs $259d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.259a	4c c0 2c	jmp $2cc0			jmp 	MInt32Or 							; else do it as integer.
.259d					_IsFPOperation:
.259d	8a		txa				txa 								; call the relevant fp routine
.259e	a2 08		ldx #$08		ldx	#8
.25a0	20 51 18	jsr $1851		jsr	floatingpointHandler
.25a3	aa		tax				tax
.25a4	60		rts				rts
.25a5					AndHandler:
.25a5	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.25a8	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.25ab	b0 03		bcs $25b0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25ad	4c a7 2c	jmp $2ca7			jmp 	MInt32And 							; else do it as integer.
.25b0					_IsFPOperation:
.25b0	8a		txa				txa 								; call the relevant fp routine
.25b1	a2 08		ldx #$08		ldx	#8
.25b3	20 51 18	jsr $1851		jsr	floatingpointHandler
.25b6	aa		tax				tax
.25b7	60		rts				rts
.25b8					ShlHandler:
.25b8	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.25bb	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.25be	b0 03		bcs $25c3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25c0	4c 39 26	jmp $2639			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.25c3					_IsFPOperation:
.25c3	8a		txa				txa 								; call the relevant fp routine
.25c4	a2 08		ldx #$08		ldx	#8
.25c6	20 51 18	jsr $1851		jsr	floatingpointHandler
.25c9	aa		tax				tax
.25ca	60		rts				rts
.25cb					ShrHandler:
.25cb	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.25ce	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.25d1	b0 03		bcs $25d6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25d3	4c 3c 26	jmp $263c			jmp 	MInt32ShiftRightX 							; else do it as integer.
.25d6					_IsFPOperation:
.25d6	8a		txa				txa 								; call the relevant fp routine
.25d7	a2 08		ldx #$08		ldx	#8
.25d9	20 51 18	jsr $1851		jsr	floatingpointHandler
.25dc	aa		tax				tax
.25dd	60		rts				rts
.25de					WordRefHandler:
.25de	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.25e1	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.25e4	b0 03		bcs $25e9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25e6	4c 2b 26	jmp $262b			jmp 	MInt32WordIndirect 							; else do it as integer.
.25e9					_IsFPOperation:
.25e9	8a		txa				txa 								; call the relevant fp routine
.25ea	a2 08		ldx #$08		ldx	#8
.25ec	20 51 18	jsr $1851		jsr	floatingpointHandler
.25ef	aa		tax				tax
.25f0	60		rts				rts
.25f1					ByteRefHandler:
.25f1	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.25f4	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.25f7	b0 03		bcs $25fc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.25f9	4c 2f 26	jmp $262f			jmp 	MInt32ByteIndirect 							; else do it as integer.
.25fc					_IsFPOperation:
.25fc	8a		txa				txa 								; call the relevant fp routine
.25fd	a2 08		ldx #$08		ldx	#8
.25ff	20 51 18	jsr $1851		jsr	floatingpointHandler
.2602	aa		tax				tax
.2603	60		rts				rts
.2604					PowerHandler:
.2604	20 5f 27	jsr $275f			jsr 	DereferenceTwo
.2607	20 e4 24	jsr $24e4			jsr 	BinaryProcess 				; check to see if either is float
.260a	b0 03		bcs $260f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.260c	4c 17 26	jmp $2617			jmp 	PowerInteger 							; else do it as integer.
.260f					_IsFPOperation:
.260f	8a		txa				txa 								; call the relevant fp routine
.2610	a2 16		ldx #$16		ldx	#22
.2612	20 51 18	jsr $1851		jsr	floatingpointHandler
.2615	aa		tax				tax
.2616	60		rts				rts
.2617					PowerInteger:
.2617	20 fe 24	jsr $24fe			jsr 	BPMakeBothFloat				; make them float.
.261a	8a		txa				txa
.261b	a2 16		ldx #$16		ldx	#22
.261d	20 51 18	jsr $1851		jsr	floatingpointHandler
.2620	a2 12		ldx #$12		ldx	#18
.2622	20 51 18	jsr $1851		jsr	floatingpointHandler
.2625	aa		tax				tax
.2626	a9 00		lda #$00			lda 	#0 							; make type integer
.2628	95 40		sta $40,x			sta 	esType,x
.262a	60		rts				rts
.262b					Mint32WordIndirect:
.262b	a9 80		lda #$80	 		lda 	#$80 				 		; word reference type (bit 7 set)
.262d	d0 02		bne $2631			bne 	Min32Indirect
.262f					Mint32ByteIndirect:
.262f	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type (bit 7, bit 5 set)
.2631					Min32Indirect:
.2631	48		pha				pha 								; save the indirection
.2632	20 36 2e	jsr $2e36			jsr 	MInt32Add 					; add a!b a?b
.2635	68		pla				pla 								; and set the type to reference.
.2636	95 40		sta $40,x			sta 	esType,x 	 				; so a!b => a+b and it's a reference....
.2638	60		rts				rts
.2639					Mint32ShiftLeftX:
.2639	18		clc				clc 								; CC shift left
.263a	90 01		bcc $263d			bcc 	Mint32Shift
.263c					Mint32ShiftRightX:
.263c	38		sec				sec 								; CS shift right
.263d					Mint32Shift:
.263d	08		php				php 								; save carry flag on stack.
.263e	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.2640	15 59		ora $59,x			ora 	esInt2+1,x
.2642	15 61		ora $61,x			ora 	esInt3+1,x
.2644	d0 1e		bne $2664			bne 	_MShiftZero
.2646	b5 49		lda $49,x			lda 	esInt0+1,x
.2648	c9 20		cmp #$20			cmp 	#32
.264a	b0 18		bcs $2664			bcs 	_MShiftZero
.264c					_MShiftLoop:
.264c	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.264e	f0 12		beq $2662			beq 	_MShiftExit
.2650	d6 49		dec $49,x			dec 	esInt0+1,x
.2652	28		plp				plp 								; restore and save carry
.2653	08		php				php
.2654	90 06		bcc $265c			bcc 	_MShiftLeft 				; and shift left/right accordingly.
.2656	20 70 2f	jsr $2f70			jsr 	Mint32ShiftRight
.2659	4c 4c 26	jmp $264c			jmp 	_MShiftLoop
.265c					_MShiftLeft:
.265c	20 67 2f	jsr $2f67			jsr 	Mint32ShiftLeft
.265f	4c 4c 26	jmp $264c			jmp 	_MShiftLoop
.2662					_MShiftExit:
.2662	28		plp				plp	 								; throw saved carry and exit
.2663	60		rts				rts
.2664					_MShiftZero:
.2664	4c 52 2f	jmp $2f52			jmp 	MInt32False 				; return 0 as shifted >= 32 times.

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/compare.asm

.2667					PerformComparison:
.2667	20 5f 27	jsr $275f			jsr 	DereferenceTwo 				; make both values.
.266a	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.266c	35 41		and $41,x			and 	esType+1,x
.266e	0a		asl a				asl 	a 							; bit 7 set if both bit 6s were set.
.266f	30 1d		bmi $268e			bmi 	_PCIsString
.2671	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.2673	15 41		ora $41,x			ora 	esType+1,x
.2675	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7, mixed types
.2676	30 22		bmi $269a			bmi 	_PCError
.2678	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.267a	f0 0f		beq $268b			beq 	_PCIsInteger 				; if not two integers, e.g. 1 of the bits is set
.267c	20 fe 24	jsr $24fe			jsr 	BPMakeBothFloat 			; make both float
.267f	8a		txa				txa
.2680	a2 04		ldx #$04		ldx	#4
.2682	20 51 18	jsr $1851		jsr	floatingpointHandler
.2685	86 32		stx $32				stx 	tempShort 					; save result
.2687	aa		tax				tax
.2688	a5 32		lda $32				lda 	tempShort
.268a	60		rts				rts
.268b					_PCIsInteger:
.268b	4c f2 2c	jmp $2cf2			jmp 	MInt32Compare
.268e					_PCIsString:
.268e	8a		txa				txa 								; A has SP
.268f	a2 08		ldx #$08		ldx	#8
.2691	20 72 33	jsr $3372		jsr	stringHandler
.2694	86 32		stx $32				stx 	tempShort 					; save result
.2696	aa		tax				tax 								; put SP back in X and get result.
.2697	a5 32		lda $32				lda 	tempShort
.2699	60		rts				rts
.269a					_PCError:
.269a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.269c	20 3f 14	jsr $143f		jsr	errorHandler
.269f					CompareEquals:
.269f	20 67 26	jsr $2667			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.26a2	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.26a4	f0 35		beq $26db			beq  	CompareTrue
.26a6	4c de 26	jmp $26de			jmp 	CompareFalse
.26a9					CompareLess:
.26a9	20 67 26	jsr $2667			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.26ac	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.26ae	f0 2b		beq $26db			beq  	CompareTrue
.26b0	4c de 26	jmp $26de			jmp 	CompareFalse
.26b3					CompareGreater:
.26b3	20 67 26	jsr $2667			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.26b6	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.26b8	f0 21		beq $26db			beq  	CompareTrue
.26ba	4c de 26	jmp $26de			jmp 	CompareFalse
.26bd					CompareNotEquals:
.26bd	20 67 26	jsr $2667			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.26c0	c9 00		cmp #$00			cmp 	#$00 						; and we do something if it is = or <> a value.
.26c2	d0 17		bne $26db			bne  	CompareTrue
.26c4	4c de 26	jmp $26de			jmp 	CompareFalse
.26c7					CompareGreaterEq:
.26c7	20 67 26	jsr $2667			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.26ca	c9 ff		cmp #$ff			cmp 	#$FF 						; and we do something if it is = or <> a value.
.26cc	d0 0d		bne $26db			bne  	CompareTrue
.26ce	4c de 26	jmp $26de			jmp 	CompareFalse
.26d1					CompareLessEq:
.26d1	20 67 26	jsr $2667			jsr 	PerformComparison 			; returns $FF,$00,$01 accordingly
.26d4	c9 01		cmp #$01			cmp 	#$01 						; and we do something if it is = or <> a value.
.26d6	d0 03		bne $26db			bne  	CompareTrue
.26d8	4c de 26	jmp $26de			jmp 	CompareFalse
.26db					CompareTrue:
.26db	4c 4e 2f	jmp $2f4e			jmp 	MInt32True
.26de					CompareFalse:
.26de	4c 52 2f	jmp $2f52			jmp 	MInt32False

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/convert.asm

.26e1					Event_Str:
.26e1	20 ab 29	jsr $29ab			jsr 	EvaluateNumeric 			; get a number.
.26e4	b5 40		lda $40,x			lda 	esType,x 					; is it floating point
.26e6	d0 13		bne $26fb			bne 	_ESFloat
.26e8	20 3e 27	jsr $273e			jsr 	ConvertGetBase 				; get base, or default.
.26eb	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.26ed	85 2a		sta $2a				sta 	temp0
.26ef	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.26f1	85 2b		sta $2b				sta 	1+(temp0)
.26f3	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.26f5	20 a8 2e	jsr $2ea8			jsr 	MInt32ToString 				; convert to string.
.26f8	4c 08 27	jmp $2708			jmp 	_ESCloneExit 				; clone and exit.
.26fb					_ESFloat:
.26fb	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; check closing )
.26fe	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2701	8a		txa				txa
.2702	a2 14		ldx #$14		ldx	#20
.2704	20 51 18	jsr $1851		jsr	floatingpointHandler
.2707	aa		tax				tax
.2708					_ESCloneExit:
.2708	8a		txa				txa
.2709	a2 02		ldx #$02		ldx	#2
.270b	20 72 33	jsr $3372		jsr	stringHandler
.270e	aa		tax				tax
.270f	60		rts				rts
.2710					UnaryVal:
.2710	38		sec				sec 								; Carry set to return value
.2711	b0 01		bcs $2714			bcs 	ValueMain
.2713					UnaryIsVal:
.2713	18		clc				clc									; Carry clear to return legitimacy
.2714					ValueMain:
.2714	08		php				php 								; save results (CS is value, CC is validation)
.2715	20 b6 29	jsr $29b6			jsr 	EvaluateString
.2718	20 3e 27	jsr $273e			jsr 	ConvertGetBase 				; get base, if any.
.271b	98		tya				tya
.271c	48		pha				pha
.271d	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 					; string address in temp0, goes here.
.2720	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the base
.2722	29 7f		and #$7f			and 	#$7F 						; ignore the sign bit.
.2724	20 c0 2d	jsr $2dc0			jsr 	MInt32FromString 			; convert it back from a string.
.2727	b0 0c		bcs $2735			bcs 	_VMSuccess 					; successfully converted.
.2729	b5 49		lda $49,x			lda 	esInt0+1,x 					; is base the default
.272b	c9 8a		cmp #$8a			cmp 	#$80+10 					; if no, then it is integer only.
.272d	f0 00		beq $272f			beq 	_VMFailed 	 				; so we failed.
.272f					_VMFailed:
.272f	68		pla				pla
.2730	a8		tay				tay
.2731	28		plp				plp
.2732	4c 52 2f	jmp $2f52			jmp 	MInt32False 				; return 0 whatever.
.2735					_VMSuccess:
.2735	68		pla				pla
.2736	a8		tay				tay
.2737	28		plp				plp 								; if CS the it was val() so we want the value.
.2738	b0 03		bcs $273d			bcs 	_VMExit
.273a	4c 4e 2f	jmp $2f4e			jmp 	MInt32True 					; otherwise return true as successful.
.273d					_VMExit:
.273d	60		rts				rts
.273e					ConvertGetBase:
.273e	a9 8a		lda #$8a			lda 	#10+$80 					; default base 10 signed.
.2740	95 49		sta $49,x			sta 	esInt0+1,x
.2742	b1 28		lda ($28),y			lda 	(codePtr),y 				; check for ,base)
.2744	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2746	d0 0e		bne $2756			bne 	_CGBDone 					; not found, should be )
.2748	e8		inx				inx 								; next level
.2749	c8		iny				iny 								; skip comma.
.274a	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger		; evaluate the base.
.274d	ca		dex				dex
.274e	c9 02		cmp #$02			cmp 	#2 							; base range is 2..16
.2750	90 08		bcc $275a			bcc 	_CGBValue 					; (it should work as high as 37)
.2752	c9 11		cmp #$11			cmp 	#17
.2754	b0 04		bcs $275a			bcs 	_CGBValue
.2756					_CGBDone:
.2756	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2759	60		rts				rts
.275a					_CGBValue:
.275a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.275c	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/dereference.asm

.275f					DereferenceTwo:
.275f	e8		inx				inx
.2760	20 64 27	jsr $2764			jsr 	DereferenceOne
.2763	ca		dex				dex
.2764					DereferenceOne:
.2764	b5 40		lda $40,x			lda 	esType,x
.2766	10 3d		bpl $27a5			bpl 	_DRNotReference 			; is it a reference ? if not, we don't need to do anything
.2768	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.2769	b0 3b		bcs $27a6			bcs 	_DRFloatDeReference
.276b	98		tya				tya
.276c	48		pha				pha
.276d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.276f	85 2a		sta $2a				sta 	temp0
.2771	b5 50		lda $50,x			lda 	esInt1,x
.2773	85 2b		sta $2b				sta 	temp0+1
.2775	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.2777	95 50		sta $50,x			sta 	esInt1,x
.2779	95 58		sta $58,x			sta 	esInt2,x
.277b	95 60		sta $60,x			sta 	esInt3,x
.277d	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.277f	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.2781	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.2782	30 0d		bmi $2791			bmi 	_DeRefString 				; string, 2 bytes only
.2784	d0 11		bne $2797			bne 	_DeRefByte 					; byte 1 byte only
.2786					_DeRefLong:
.2786	a0 03		ldy #$03			ldy 	#3
.2788	b1 2a		lda ($2a),y			lda 	(temp0),y
.278a	95 60		sta $60,x			sta 	esInt3,x
.278c	88		dey				dey
.278d	b1 2a		lda ($2a),y			lda 	(temp0),y
.278f	95 58		sta $58,x			sta 	esInt2,x
.2791					_DeRefString:
.2791	a0 01		ldy #$01			ldy 	#1
.2793	b1 2a		lda ($2a),y			lda 	(temp0),y
.2795	95 50		sta $50,x			sta 	esInt1,x
.2797					_DeRefByte:
.2797	a0 00		ldy #$00			ldy 	#0
.2799	b1 2a		lda ($2a),y			lda 	(temp0),y
.279b	95 48		sta $48,x			sta 	esInt0,x
.279d	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.279f	29 40		and #$40			and 	#$40
.27a1	95 40		sta $40,x			sta 	esType,x
.27a3	68		pla				pla
.27a4	a8		tay				tay
.27a5					_DRNotReference
.27a5	60		rts				rts
.27a6					_DRFloatDereference:
.27a6	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 					; address to deref in temp0
.27a9	8a		txa				txa
.27aa	a2 1c		ldx #$1c		ldx	#28
.27ac	20 51 18	jsr $1851		jsr	floatingpointHandler
.27af	aa		tax				tax
.27b0	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.27b2	95 40		sta $40,x			sta 	esType,x
.27b4	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/evaluate.asm

.27b5					EvaluateLevel:
.27b5	e0 08		cpx #$08			cpx 	#StackSize 					; check stack overflow
.27b7	b0 1e		bcs $27d7			bcs 	_ELStack
.27b9	48		pha				pha 								; save precedence level.
.27ba	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.27bc	95 48		sta $48,x			sta 	esInt0,x
.27be	95 50		sta $50,x			sta 	esInt1,x
.27c0	95 58		sta $58,x			sta 	esInt2,x
.27c2	95 60		sta $60,x			sta 	esInt3,x
.27c4	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.27c6	b1 28		lda ($28),y			lda 	(codePtr),y	 				; look at first token/character
.27c8	30 26		bmi $27f0			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.27ca	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.27cb	30 0f		bmi $27dc			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.27cd	8a		txa				txa 								; stack level in X
.27ce	a2 00		ldx #$00		ldx	#0
.27d0	20 76 3e	jsr $3e76		jsr	variableHandler
.27d3	aa		tax				tax
.27d4	4c 19 28	jmp $2819			jmp		_ELHasTerm
.27d7					_ELStack:
.27d7	a2 22		ldx #$22			ldx 	#ErrorID_NumStack
.27d9	20 3f 14	jsr $143f		jsr	errorHandler
.27dc					_ELIsConstant:
.27dc	4a		lsr a				lsr 	a 							; get the value back
.27dd	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.27df	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.27e1					_ELCheckNext:
.27e1	c8		iny				iny 								; look at next
.27e2	b1 28		lda ($28),y			lda 	(codePtr),y
.27e4	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.27e6	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.27e8	b0 2f		bcs $2819			bcs 	_ELHasTerm 					; done getting the constant.
.27ea	20 b2 28	jsr $28b2			jsr 	ELShiftByteIn 				; shift byte into position.
.27ed	4c e1 27	jmp $27e1			jmp 	_ELCheckNext
.27f0					_ELIsToken:
.27f0	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.27f2	f0 0f		beq $2803			beq 	_ELIsString
.27f4	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.27f6	d0 5f		bne $2857			bne 	_ELCheckUnary
.27f8	8a		txa				txa 								; put X into A
.27f9	c8		iny				iny 								; skip over the float marker
.27fa	a2 18		ldx #$18		ldx	#24
.27fc	20 51 18	jsr $1851		jsr	floatingpointHandler
.27ff	aa		tax				tax 								; restore X
.2800	4c 19 28	jmp $2819			jmp 	_ELHasTerm
.2803					_ELIsString:
.2803	98		tya				tya 								; address of string is codePtr+y+1
.2804	38		sec				sec
.2805	65 28		adc $28				adc 	codePtr
.2807	95 48		sta $48,x			sta 	esInt0,x
.2809	a5 29		lda $29				lda 	codePtr+1
.280b	69 00		adc #$00			adc 	#0
.280d	95 50		sta $50,x			sta 	esInt1,x
.280f	a9 40		lda #$40			lda 	#$40 						; set type to string value
.2811	95 40		sta $40,x			sta 	esType,x
.2813	c8		iny				iny 								; skip over string.
.2814	98		tya				tya
.2815	38		sec				sec									; +1 for the length itself.
.2816	71 28		adc ($28),y			adc 	(codePtr),y
.2818	a8		tay				tay 								; and fall through to term loop code.
.2819					_ELHasTerm:
.2819	b1 28		lda ($28),y			lda 	(codePtr),y
.281b	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.281d	90 04		bcc $2823			bcc 	_ELPopExit
.281f	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.2821	90 02		bcc $2825			bcc 	_ELHasBinaryTerm
.2823					_ELPopExit:
.2823	68		pla				pla
.2824					_ELExit:
.2824	60		rts				rts
.2825					_ELHasBinaryTerm:
.2825	84 32		sty $32				sty 	tempShort 					; save position
.2827	a8		tay				tay 								; use token as an index and get the precedence.
.2828	b9 5a 28	lda $285a,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.282b	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.282d	85 32		sta $32				sta 	tempShort 					; save precedence in memory.
.282f	68		pla				pla 								; restore current level.
.2830	c5 32		cmp $32				cmp 	tempShort 					; if current >= operator then exit
.2832	b0 f0		bcs $2824			bcs 	_ELExit
.2834	48		pha				pha 								; save current level back on the stack.
.2835	b1 28		lda ($28),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.2837	48		pha				pha
.2838	c8		iny				iny
.2839	e8		inx				inx 								; calculate the RHS at the operator precedence.
.283a	a5 32		lda $32				lda 	tempShort
.283c	20 b5 27	jsr $27b5			jsr 	EvaluateLevel
.283f	ca		dex				dex
.2840	68		pla				pla 								; get the operator back out.
.2841					_ELExecuteA:
.2841	86 32		stx $32				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.2843	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.2844	aa		tax				tax
.2845	bd 1a 22	lda $221a,x			lda 	Group0Vectors,x
.2848	85 2a		sta $2a				sta 	temp0
.284a	bd 1b 22	lda $221b,x			lda 	Group0Vectors+1,x
.284d	85 2b		sta $2b				sta 	temp0+1
.284f	a6 32		ldx $32				ldx 	tempShort
.2851	20 9e 28	jsr $289e			jsr 	_ELCallTemp0
.2854	4c 19 28	jmp $2819			jmp 	_ELHasTerm 					; and loop back round.
.2857					_ELCheckUnary:
.2857	c8		iny				iny 								; skip over token.
.2858	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.285a	f0 19		beq $2875			beq 	_ELMinus
.285c	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.285e	f0 2c		beq $288c			beq 	_ELIndirect
.2860	c9 98		cmp #$98			cmp 	#TKW_QMARK
.2862	f0 28		beq $288c			beq 	_ELIndirect
.2864	c9 83		cmp #$83			cmp 	#TOK_SHIFT3 				; is it the unary extension.
.2866	f0 39		beq $28a1			beq 	_ELExtension
.2868	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.286a	90 04		bcc $2870			bcc 	_ELUSyntax
.286c	c9 c9		cmp #$c9			cmp 	#TOK_TOKENS
.286e	90 d1		bcc $2841			bcc 	_ELExecuteA 				; if so do that token.
.2870					_ELUSyntax:
.2870	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2872	20 3f 14	jsr $143f		jsr	errorHandler
.2875					_ELMinus:
.2875	20 8a 29	jsr $298a			jsr 	EvaluateNumericTerm 		; get a number to negate.
.2878	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.287a	f0 0a		beq $2886			beq 	_ELMinusInteger
.287c	8a		txa				txa
.287d	a2 0c		ldx #$0c		ldx	#12
.287f	20 51 18	jsr $1851		jsr	floatingpointHandler
.2882	aa		tax				tax
.2883	4c 19 28	jmp $2819			jmp 	_ELHasTerm
.2886					_ELMinusInteger:
.2886	20 0c 2f	jsr $2f0c			jsr 	MInt32Negate 				; do int negate
.2889	4c 19 28	jmp $2819			jmp 	_ELHasTerm
.288c					_ELIndirect:
.288c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.288d	20 93 29	jsr $2993			jsr 	EvaluateIntegerTerm 		; integer address
.2890	68		pla				pla
.2891	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.2893	f0 02		beq $2897			beq 	_ELHaveModifier
.2895	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.2897					_ELHaveModifier:
.2897	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.2899	95 40		sta $40,x			sta 	esType,x 					; $80 for ! $A0 for ?
.289b	4c 19 28	jmp $2819			jmp 	_ELHasTerm
.289e					_ELCallTemp0:
.289e	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.28a1					_ELExtension:
.28a1	8a		txa				txa 								; stack pos in A
.28a2	20 42 17	jsr $1742		jsr	extensionHandler
.28a5	aa		tax				tax 								; restore stack
.28a6	4c 19 28	jmp $2819			jmp 	_ELHasTerm
.28a9					UnaryParenthesis:
.28a9	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.28ab	20 b5 27	jsr $27b5			jsr 	EvaluateLevel
.28ae	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; check for )
.28b1	60		rts				rts
.28b2					ELShiftByteIn:
.28b2	48		pha				pha 								; save bits to shift in.
.28b3	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.28b5	48		pha				pha
.28b6	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.28b8	95 60		sta $60,x			sta 	esInt3,x
.28ba	b5 50		lda $50,x			lda 	esInt1,x
.28bc	95 58		sta $58,x			sta 	esInt2,x
.28be	b5 48		lda $48,x			lda 	esInt0,x
.28c0	95 50		sta $50,x			sta 	esInt1,x
.28c2	a9 00		lda #$00			lda 	#0
.28c4	95 48		sta $48,x			sta 	esInt0,x
.28c6	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.28c7	29 03		and #$03			and 	#3 							; only want lower 2 bits
.28c9	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.28cb					_ELShiftLoop:
.28cb	4a		lsr a				lsr 	a
.28cc	76 60		ror $60,x			ror 	esInt3,x
.28ce	76 58		ror $58,x			ror 	esInt2,x
.28d0	76 50		ror $50,x			ror 	esInt1,x
.28d2	76 48		ror $48,x			ror 	esInt0,x
.28d4	c9 01		cmp #$01			cmp 	#1
.28d6	d0 f3		bne $28cb			bne 	_ELShiftLoop
.28d8	68		pla				pla 								; get original 6 bit value and OR in.
.28d9	29 3f		and #$3f			and 	#$3F
.28db	15 48		ora $48,x			ora 	esInt0,x
.28dd	95 48		sta $48,x			sta 	esInt0,x
.28df	60		rts				rts
.28e0					ELBinaryOperatorInfo:

;******  Processing file: main/evaluate/../../generated/binarystructinfo.inc

>28e0	01					.byte	$01			; $86 and
>28e1	01					.byte	$01			; $87 or
>28e2	01					.byte	$01			; $88 xor
>28e3	02					.byte	$02			; $89 >=
>28e4	02					.byte	$02			; $8a <=
>28e5	02					.byte	$02			; $8b >
>28e6	02					.byte	$02			; $8c <
>28e7	02					.byte	$02			; $8d =
>28e8	02					.byte	$02			; $8e <>
>28e9	03					.byte	$03			; $8f +
>28ea	03					.byte	$03			; $90 -
>28eb	04					.byte	$04			; $91 >>
>28ec	04					.byte	$04			; $92 <<
>28ed	04					.byte	$04			; $93 *
>28ee	04					.byte	$04			; $94 /
>28ef	04					.byte	$04			; $95 mod
>28f0	05					.byte	$05			; $96 ^
>28f1	06					.byte	$06			; $97 !
>28f2	06					.byte	$06			; $98 ?
>28f3	82					.byte	$82			; $99 repeat
>28f4	82					.byte	$82			; $9a while
>28f5	82					.byte	$82			; $9b for
>28f6	82					.byte	$82			; $9c if
>28f7	82					.byte	$82			; $9d defproc
>28f8	80					.byte	$80			; $9e until
>28f9	80					.byte	$80			; $9f wend
>28fa	80					.byte	$80			; $a0 next
>28fb	80					.byte	$80			; $a1 then
>28fc	80					.byte	$80			; $a2 endif
>28fd	80					.byte	$80			; $a3 endproc

;******  Return to file: main/evaluate/evaluate.asm


;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/event.asm

.28fe					EventFunction:
.28fe	20 f4 29	jsr $29f4			jsr 	EvaluateReference			; get the variable reference that tracks the event
.2901	b5 40		lda $40,x			lda 	esType,x
.2903	c9 80		cmp #$80			cmp 	#$80 						; must be integer reference
.2905	d0 5b		bne $2962			bne 	_EFType
.2907	20 d2 2f	jsr $2fd2			jsr 	CheckComma
.290a	e8		inx				inx
.290b	20 c1 29	jsr $29c1			jsr 	EvaluateInteger		 		; get the elapsed time between firing.
.290e	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; finish off with the right bracket
.2911	ca		dex				dex
.2912	b5 50		lda $50,x			lda 	esInt1,x 					; check max of 32767, we use 16 bit for timers and
.2914	29 80		and #$80			and 	#$80 						; it doesn't work > 32767
.2916	15 58		ora $58,x			ora 	esInt2,x
.2918	15 60		ora $60,x			ora 	esInt3,x
.291a	d0 41		bne $295d			bne 	_EFValue
.291c	98		tya				tya
.291d	48		pha				pha
.291e	8a		txa				txa
.291f	48		pha				pha
.2920	a2 1c		ldx #$1c		ldx	#28
.2922	20 1e 14	jsr $141e		jsr	deviceHandler
.2925	84 2d		sty $2d				sty 	temp1+1
.2927	85 2c		sta $2c				sta 	temp1
.2929	68		pla				pla
.292a	aa		tax				tax
.292b	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 					; set temp0 to the address of the event variable
.292e	a0 03		ldy #$03			ldy 	#3							; if -ve
.2930	b1 2a		lda ($2a),y			lda 	(temp0),y
.2932	30 23		bmi $2957			bmi 	_EFFail 	 				; straight out with fail, means "on pause".
.2934	a0 00		ldy #$00			ldy 	#0 							; is the fire time zero ?
.2936	b1 2a		lda ($2a),y			lda 	(temp0),y
.2938	c8		iny				iny
.2939	11 2a		ora ($2a),y			ora 	(temp0),y
.293b	f0 17		beq $2954			beq 	_EFInitialise 				; if so, initialise the value but return false.
.293d	a0 00		ldy #$00			ldy 	#0 							; calculate trigger - timer
.293f	38		sec				sec
.2940	b1 2a		lda ($2a),y			lda 	(temp0),y
.2942	e5 2c		sbc $2c				sbc 	temp1
.2944	c8		iny				iny
.2945	b1 2a		lda ($2a),y			lda 	(temp0),y
.2947	e5 2d		sbc $2d				sbc 	temp1+1
.2949	10 0c		bpl $2957			bpl 	_EFFail 					; if trigger >= timer then return False
.294b	20 67 29	jsr $2967			jsr 	SetEventTimer 				; reset the timer for next time.
.294e	20 4e 2f	jsr $2f4e			jsr	 	MInt32True 					; and treutn true as fired.
.2951	68		pla				pla
.2952	a8		tay				tay
.2953	60		rts				rts
.2954					_EFInitialise:
.2954	20 67 29	jsr $2967			jsr		SetEventTimer 				; set trigger time to time + elapsed
.2957					_EFFail:
.2957	68		pla				pla
.2958	a8		tay				tay
.2959	20 52 2f	jsr $2f52			jsr 	MInt32False
.295c	60		rts				rts
.295d					_EFValue:
.295d	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.295f	20 3f 14	jsr $143f		jsr	errorHandler
.2962					_EFType:
.2962	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2964	20 3f 14	jsr $143f		jsr	errorHandler
.2967					SetEventTimer:
.2967	a0 00		ldy #$00			ldy 	#0
.2969	18		clc				clc
.296a	a5 2c		lda $2c				lda 	temp1
.296c	75 49		adc $49,x			adc 	esInt0+1,x
.296e	91 2a		sta ($2a),y			sta		(temp0),y
.2970	c8		iny				iny
.2971	a5 2d		lda $2d				lda 	temp1+1
.2973	75 51		adc $51,x			adc 	esInt1+1,x
.2975	91 2a		sta ($2a),y			sta		(temp0),y
.2977	88		dey				dey
.2978	11 2a		ora ($2a),y			ora 	(temp0),y 					; if the result is non zero, exit
.297a	d0 04		bne $2980			bne 	_SETExit 					; zero means initialise.....
.297c	a9 01		lda #$01			lda 	#1 							; timer zero won't work, so make it 1, which is
.297e	91 2a		sta ($2a),y			sta 	(temp0),y 					; near enough.
.2980					_SETExit:
.2980	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/support.asm

.2981					EvaluateTerm:
.2981	a9 0f		lda #$0f			lda 	#15 						; no binary operator has this high a precedence.
.2983	20 b5 27	jsr $27b5			jsr 	EvaluateLevel
.2986	20 64 27	jsr $2764			jsr 	DereferenceOne
.2989	60		rts				rts
.298a					EvaluateNumericTerm:
.298a	20 81 29	jsr $2981			jsr 	EvaluateTerm
.298d	b5 40		lda $40,x			lda 	esType,x
.298f	0a		asl a				asl 	a 							; see if it's a string.
.2990	30 09		bmi $299b			bmi 	ENTType
.2992	60		rts				rts
.2993					EvaluateIntegerTerm:
.2993	20 81 29	jsr $2981			jsr 	EvaluateTerm
.2996	b5 40		lda $40,x			lda 	esType,x
.2998	d0 01		bne $299b			bne 	ENTType
.299a	60		rts				rts
.299b					ENTType:
.299b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.299d	20 3f 14	jsr $143f		jsr	errorHandler
.29a0					EvaluateRoot:
.29a0	a2 00		ldx #$00			ldx 	#0
.29a2					Evaluate:
.29a2	a9 00		lda #$00			lda 	#0
.29a4	20 b5 27	jsr $27b5			jsr 	EvaluateLevel
.29a7	20 64 27	jsr $2764			jsr 	DereferenceOne
.29aa	60		rts				rts
.29ab					EvaluateNumeric:
.29ab	20 a2 29	jsr $29a2			jsr 	Evaluate
.29ae	b5 40		lda $40,x			lda 	esType,x
.29b0	0a		asl a				asl 	a 							; see if it's a string.
.29b1	30 e8		bmi $299b			bmi 	ENTType
.29b3	4a		lsr a				lsr 	a 							; shift float flag into carry.
.29b4	4a		lsr a				lsr 	a
.29b5	60		rts				rts
.29b6					EvaluateString:
.29b6	20 a2 29	jsr $29a2			jsr 	Evaluate
.29b9	b5 40		lda $40,x			lda 	esType,x
.29bb	0a		asl a				asl 	a 							; see if it's a string.
.29bc	10 dd		bpl $299b			bpl 	ENTType
.29be	60		rts				rts
.29bf					EvaluateRootInteger:
.29bf	a2 00		ldx #$00			ldx 	#0
.29c1					EvaluateInteger:
.29c1	20 a2 29	jsr $29a2			jsr 	Evaluate
.29c4	b5 40		lda $40,x			lda 	esType,x
.29c6	d0 d3		bne $299b			bne 	ENTType
.29c8	60		rts				rts
.29c9					EvaluateSmallInteger:
.29c9	20 c1 29	jsr $29c1			jsr 	EvaluateInteger
.29cc	b5 50		lda $50,x			lda 	esInt1,x
.29ce	15 58		ora $58,x			ora 	esInt2,x
.29d0	15 60		ora $60,x			ora 	esInt3,x
.29d2	d0 03		bne $29d7			bne 	_ESIValue
.29d4	b5 48		lda $48,x			lda 	esInt0,x
.29d6	60		rts				rts
.29d7					_ESIValue:
.29d7	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.29d9	20 3f 14	jsr $143f		jsr	errorHandler
.29dc					LinkEvaluate:
.29dc	aa		tax				tax
.29dd	20 a2 29	jsr $29a2			jsr 	Evaluate
.29e0	8a		txa				txa
.29e1	60		rts				rts
.29e2					LinkEvaluateTerm:
.29e2	aa		tax				tax
.29e3	20 81 29	jsr $2981			jsr 	EvaluateTerm
.29e6	8a		txa				txa
.29e7	60		rts				rts
.29e8					LinkEvaluateInteger:
.29e8	aa		tax				tax
.29e9	20 c1 29	jsr $29c1			jsr 	EvaluateInteger
.29ec	8a		txa				txa
.29ed	60		rts				rts
.29ee					LinkEvaluateSmallInt:
.29ee	aa		tax				tax
.29ef	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger
.29f2	8a		txa				txa
.29f3	60		rts				rts
.29f4					EvaluateReference:
.29f4	ad f1 28	lda $28f1			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.29f7	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.29f8	e9 01		sbc #$01			sbc 	#1
.29fa	20 b5 27	jsr $27b5			jsr 	EvaluateLevel
.29fd	b5 40		lda $40,x			lda 	esType,x
.29ff	10 01		bpl $2a02			bpl 	_ERFail
.2a01	60		rts				rts
.2a02					_ERFail:
.2a02	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.2a04	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary.asm

.2a07					UnaryLen:
.2a07	20 15 2a	jsr $2a15			jsr 	ULStart
.2a0a					ULFinish:
.2a0a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length prefix
.2a0c	a4 32		ldy $32				ldy 	tempShort 					; get Y back
.2a0e	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit 				; write it out.
.2a11	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2a14	60		rts				rts
.2a15	20 b6 29	jsr $29b6	ULStart:jsr 	EvaluateString
.2a18	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2a1a	85 2a		sta $2a				sta 	temp0
.2a1c	b5 50		lda $50,x			lda 	esInt1,x
.2a1e	85 2b		sta $2b				sta 	temp0+1
.2a20	84 32		sty $32				sty 	tempShort 					; get length
.2a22	a0 00		ldy #$00			ldy 	#0
.2a24	60		rts				rts
.2a25					UnaryAsc:
.2a25	20 15 2a	jsr $2a15			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.2a28	b1 2a		lda ($2a),y			lda 	(temp0),y 					; read length
.2a2a	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.2a2b	c9 00		cmp #$00			cmp 	#0
.2a2d	d0 db		bne $2a0a			bne 	ULFinish 					; if length = 0 then error : asc("") -> error.
.2a2f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2a31	20 3f 14	jsr $143f		jsr	errorHandler
.2a34					UnaryAbs:
.2a34	20 ab 29	jsr $29ab			jsr 	EvaluateNumeric 			; some numeric value
.2a37	b0 07		bcs $2a40			bcs 	_UAFloat 					; CS then float, so use that function
.2a39	20 07 2f	jsr $2f07			jsr 	MInt32Absolute 				; int version
.2a3c	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2a3f	60		rts				rts
.2a40					_UAFloat:
.2a40	8a		txa				txa 								; float version
.2a41	a2 00		ldx #$00		ldx	#0
.2a43	20 51 18	jsr $1851		jsr	floatingpointHandler
.2a46	aa		tax				tax
.2a47	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2a4a	60		rts				rts
.2a4b					UnarySgn:
.2a4b	20 ab 29	jsr $29ab			jsr 	EvaluateNumeric 			; same as above but sign of value
.2a4e	b0 07		bcs $2a57			bcs 	_USFloat
.2a50	20 3f 2f	jsr $2f3f			jsr 	MInt32Sign
.2a53	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2a56	60		rts				rts
.2a57					_USFloat:
.2a57	8a		txa				txa
.2a58	a2 0e		ldx #$0e		ldx	#14
.2a5a	20 51 18	jsr $1851		jsr	floatingpointHandler
.2a5d	aa		tax				tax
.2a5e	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2a61	60		rts				rts
.2a62					UnaryPeek:
.2a62	20 8e 2a	jsr $2a8e			jsr 	PDLCode 					; each has common setup code put reads 1,2 or 4 bytes
.2a65	4c 82 2a	jmp $2a82			jmp 	PDLByte0
.2a68					UnaryDeek:
.2a68	20 8e 2a	jsr $2a8e			jsr 	PDLCode
.2a6b	4c 7c 2a	jmp $2a7c			jmp 	PDLByte1
.2a6e					UnaryLeek:
.2a6e	20 8e 2a	jsr $2a8e			jsr 	PDLCode
.2a71	a0 03		ldy #$03			ldy 	#3							; read 3-2
.2a73	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a75	95 60		sta $60,x			sta 	esInt3,x
.2a77	88		dey				dey
.2a78	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a7a	95 58		sta $58,x			sta 	esInt2,x
.2a7c					PDLByte1:
.2a7c	a0 01		ldy #$01			ldy 	#1
.2a7e	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a80	95 50		sta $50,x			sta 	esInt1,x
.2a82					PDLByte0:
.2a82	a0 00		ldy #$00			ldy 	#0
.2a84	b1 2a		lda ($2a),y			lda 	(temp0),y
.2a86	95 48		sta $48,x			sta 	esInt0,x
.2a88	a4 32		ldy $32				ldy 	tempShort 					; restore Y
.2a8a	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; check right and return
.2a8d	60		rts				rts
.2a8e					PDLCode:
.2a8e	20 c1 29	jsr $29c1			jsr 	EvaluateInteger 			; some address
.2a91	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2a93	85 2a		sta $2a				sta 	temp0
.2a95	b5 50		lda $50,x			lda 	esInt1,x
.2a97	85 2b		sta $2b				sta 	temp0+1
.2a99	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.2a9b	95 50		sta $50,x			sta 	esInt1,x 					; PEEK needs upper 3 cleared
.2a9d	95 58		sta $58,x			sta 	esInt2,x
.2a9f	95 60		sta $60,x			sta 	esInt3,x
.2aa1	84 32		sty $32				sty 	tempShort 					; save Y
.2aa3	60		rts				rts
.2aa4					Unary_Random:
.2aa4	20 82 2f	jsr $2f82			jsr 	MInt32Random 				; generate random number.
.2aa7	b1 28		lda ($28),y			lda 	(codePtr),y 				; check followed by )
.2aa9	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2aab	f0 08		beq $2ab5			beq 	_URExit
.2aad	e8		inx				inx 								; load range 0..r-1 into +1
.2aae	20 c1 29	jsr $29c1			jsr 	EvaluateInteger
.2ab1	ca		dex				dex
.2ab2	20 a5 2d	jsr $2da5			jsr 	MInt32Modulus 				; calculate random % modulus
.2ab5					_URExit:
.2ab5	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; check right and return
.2ab8	60		rts				rts
.2ab9					Unary_Min:
.2ab9	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.2abb	d0 02		bne $2abf			bne 	UnaryMBody
.2abd					Unary_Max:
.2abd	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.2abf					UnaryMBody:
.2abf	48		pha				pha 								; save comparator on stack, shows min or max
.2ac0	20 a2 29	jsr $29a2			jsr 	Evaluate 					; get the first thing to check
.2ac3					_UnaryMLoop:
.2ac3	b1 28		lda ($28),y			lda 	(codePtr),y 				; found ), indicates end.
.2ac5	c8		iny				iny
.2ac6	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2ac8	f0 09		beq $2ad3			beq 	_UnaryMExit
.2aca	c9 cb		cmp #$cb			cmp 	#TKW_COMMA 					; found , indicates more.
.2acc	f0 07		beq $2ad5			beq 	_UnaryMCompare
.2ace	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2ad0	20 3f 14	jsr $143f		jsr	errorHandler
.2ad3					_UnaryMExit:
.2ad3	68		pla				pla 								; done so throw comparator and return.
.2ad4	60		rts				rts
.2ad5					_UnaryMCompare:
.2ad5	e8		inx				inx 								; get the 2nd thing to evaluate
.2ad6	20 a2 29	jsr $29a2			jsr 	Evaluate
.2ad9	ca		dex				dex
.2ada	20 67 26	jsr $2667			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.2add	85 32		sta $32				sta 	tempShort 					; save result
.2adf	68		pla				pla 								; get what we need
.2ae0	48		pha				pha
.2ae1	c5 32		cmp $32				cmp 	tempShort 					; did we get it
.2ae3	d0 de		bne $2ac3			bne 	_UnaryMLoop 				; no, try another value.
.2ae5	20 52 2f	jsr $2f52			jsr 	MInt32False 				; promote 2nd to 1st.
.2ae8	20 36 2e	jsr $2e36			jsr 	MInt32Add
.2aeb	4c c3 2a	jmp $2ac3			jmp 	_UnaryMLoop
.2aee					Unary_Page:
.2aee	20 52 2f	jsr $2f52			jsr 	MInt32False 				; zero
.2af1	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.2af4	95 48		sta $48,x			sta 	esInt0,x
.2af6	ad c9 0a	lda $0ac9			lda 	basePage+1
.2af9	95 50		sta $50,x			sta 	esInt1,x
.2afb	60		rts				rts
.2afc					UnaryReference:
.2afc	a9 0f		lda #$0f			lda 	#15
.2afe	20 b5 27	jsr $27b5			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.2b01	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.2b03	10 05		bpl $2b0a			bpl 	UType
.2b05	a9 00		lda #$00			lda 	#0 							; make it an integer
.2b07	95 40		sta $40,x			sta 	esType,x
.2b09	60		rts				rts
.2b0a					UType:
.2b0a	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.2b0c	20 3f 14	jsr $143f		jsr	errorHandler
.2b0f					UnaryHexMarker:
.2b0f	4c 93 29	jmp $2993			jmp 	EvaluateIntegerTerm
.2b12					UnaryComplement:
.2b12	20 93 29	jsr $2993			jsr 	EvaluateIntegerTerm
.2b15	20 26 2f	jsr $2f26			jsr 	MInt32Not
.2b18	60		rts				rts
.2b19					UnaryIntToFloat:
.2b19	20 ab 29	jsr $29ab			jsr 	EvaluateNumeric				; some number
.2b1c	b5 40		lda $40,x			lda 	esType,x 					; if float already, exit
.2b1e	d0 0b		bne $2b2b			bne 	_UIFExit
.2b20	8a		txa				txa 								; convert and set type
.2b21	a2 1a		ldx #$1a		ldx	#26
.2b23	20 51 18	jsr $1851		jsr	floatingpointHandler
.2b26	aa		tax				tax
.2b27	a9 01		lda #$01			lda 	#1
.2b29	95 40		sta $40,x			sta 	esType,x
.2b2b					_UIFExit:
.2b2b	60		rts				rts
.2b2c					UnaryFloatToInt:
.2b2c	20 ab 29	jsr $29ab			jsr 	EvaluateNumeric 			; the number
.2b2f	b5 40		lda $40,x			lda 	esType,x 					; if int already exit
.2b31	f0 0b		beq $2b3e			beq 	_UFIExit
.2b33	8a		txa				txa 								; convert to int
.2b34	a2 12		ldx #$12		ldx	#18
.2b36	20 51 18	jsr $1851		jsr	floatingpointHandler
.2b39	aa		tax				tax
.2b3a	a9 00		lda #$00			lda 	#0 							; set type
.2b3c	95 40		sta $40,x			sta 	esType,x
.2b3e					_UFIExit:
.2b3e	60		rts				rts
.2b3f					UnaryAlloc:
.2b3f	e8		inx				inx 								; evaluate memory required
.2b40	20 c1 29	jsr $29c1			jsr 	EvaluateInteger
.2b43	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2b46	ca		dex				dex
.2b47	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.2b49	15 61		ora $61,x			ora 	esInt3+1,x
.2b4b	d0 1d		bne $2b6a			bne 	_UABadValue
.2b4d	20 52 2f	jsr $2f52			jsr 	MInt32False					; zero return.
.2b50	a5 36		lda $36				lda 	lowMemory+1 				; copy low memory in
.2b52	95 50		sta $50,x			sta 	esInt1,x
.2b54	a5 35		lda $35				lda 	lowMemory
.2b56	95 48		sta $48,x			sta 	esInt0,x
.2b58	18		clc				clc 								; add alloc required.
.2b59	75 49		adc $49,x			adc 	esInt0+1,x
.2b5b	85 35		sta $35				sta 	lowMemory
.2b5d	a5 36		lda $36				lda 	lowMemory+1
.2b5f	75 51		adc $51,x			adc 	esInt1+1,x
.2b61	85 36		sta $36				sta 	lowMemory+1
.2b63	b0 05		bcs $2b6a			bcs		_UABadValue 				; overflow definitely bad.
.2b65	c5 34		cmp $34				cmp 	highMemory+1
.2b67	b0 01		bcs $2b6a			bcs 	_UABadValue 				; out of memory bad.
.2b69	60		rts				rts
.2b6a					_UABadValue:
.2b6a	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.2b6c	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unary2.asm

.2b6f					UnaryTimer:
.2b6f	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; no parameters
.2b72	98		tya				tya
.2b73	48		pha				pha
.2b74	20 79 2f	jsr $2f79			jsr 	MInt32Zero 					; zero result
.2b77	86 2a		stx $2a				stx 	temp0 						; returning in YA so can't use .pshx
.2b79	a2 1c		ldx #$1c		ldx	#28
.2b7b	20 1e 14	jsr $141e		jsr	deviceHandler
.2b7e	a6 2a		ldx $2a				ldx 	temp0						; restore X and update 16 bit result
.2b80	95 48		sta $48,x			sta 	esInt0,x
.2b82	98		tya				tya
.2b83	95 50		sta $50,x			sta 	esInt1,x
.2b85	68		pla				pla
.2b86	a8		tay				tay
.2b87	60		rts				rts
.2b88					UnaryInkey:
.2b88	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2b8b	86 2a		stx $2a				stx 	temp0
.2b8d	a2 0a		ldx #$0a		ldx	#10
.2b8f	20 1e 14	jsr $141e		jsr	deviceHandler
.2b92	a6 2a		ldx $2a				ldx 	temp0
.2b94	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit
.2b97	60		rts				rts
.2b98					UnaryGet:
.2b98	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2b9b	86 2a		stx $2a				stx 	temp0
.2b9d					_UGLoop:
.2b9d	a2 00		ldx #$00		ldx	#0
.2b9f	20 1e 14	jsr $141e		jsr	deviceHandler
.2ba2	a2 0a		ldx #$0a		ldx	#10
.2ba4	20 1e 14	jsr $141e		jsr	deviceHandler
.2ba7	c9 00		cmp #$00			cmp 	#0
.2ba9	f0 f2		beq $2b9d			beq 	_UGLoop
.2bab	a6 2a		ldx $2a				ldx 	temp0
.2bad	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit
.2bb0	60		rts				rts
.2bb1					UnaryGetString:
.2bb1	20 98 2b	jsr $2b98			jsr 	UnaryGet
.2bb4					UGSDoChr:
.2bb4	4c 05 2c	jmp $2c05			jmp 	ChrCode
.2bb7					UnaryInkeyString:
.2bb7	20 88 2b	jsr $2b88			jsr 	UnaryInkey
.2bba	b5 48		lda $48,x			lda 	esInt0,x
.2bbc	d0 f6		bne $2bb4			bne 	UGSDoChr
.2bbe	8a		txa				txa
.2bbf	a2 06		ldx #$06		ldx	#6
.2bc1	20 72 33	jsr $3372		jsr	stringHandler
.2bc4	aa		tax				tax
.2bc5	60		rts				rts
.2bc6					UnarySys:
.2bc6	20 c1 29	jsr $29c1			jsr 	EvaluateInteger 				; get the address
.2bc9	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen
.2bcc	20 25 1d	jsr $1d25			jsr 	TOSToTemp0 						; copy call address to temp0
.2bcf	8a		txa				txa
.2bd0	48		pha				pha
.2bd1	98		tya				tya
.2bd2	48		pha				pha
.2bd3	ad 00 0a	lda $0a00			lda 	("A"-"A")*4+SingleLetterVar 	; load AXY
.2bd6	ae 5c 0a	ldx $0a5c			ldx 	("X"-"A")*4+SingleLetterVar
.2bd9	ac 60 0a	ldy $0a60			ldy 	("Y"-"A")*4+SingleLetterVar
.2bdc	20 eb 2b	jsr $2beb			jsr 	_CallTemp0
.2bdf	85 32		sta $32				sta 	tempShort 						; restore YX
.2be1	68		pla				pla
.2be2	a8		tay				tay
.2be3	68		pla				pla
.2be4	aa		tax				tax
.2be5	a5 32		lda $32				lda 	tempShort
.2be7	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit 					; return result.
.2bea	60		rts				rts
.2beb					_CallTemp0:
.2beb	6c 2a 00	jmp ($002a)			jmp 	(temp0)
.2bee					UnaryMem:
.2bee	20 52 2f	jsr $2f52			jsr 	MInt32False 					; set to false (e.g. 0)
.2bf1	38		sec				sec
.2bf2	a5 33		lda $33				lda 	highMemory 						; calculate value
.2bf4	e5 35		sbc $35				sbc 	lowMemory
.2bf6	95 48		sta $48,x			sta 	esInt0,x
.2bf8	a5 34		lda $34				lda 	highMemory+1
.2bfa	e5 36		sbc $36				sbc 	lowMemory+1
.2bfc	95 50		sta $50,x			sta 	esInt1,x
.2bfe	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/evaluate/unarystr.asm

.2bff					ExecChr:
.2bff	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger		; character number 0-255
.2c02	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen				; right bracket
.2c05					ChrCode:
.2c05	98		tya				tya
.2c06	48		pha				pha
.2c07	8a		txa				txa 								; A = stack
.2c08	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.2c0a	a2 00		ldx #$00		ldx	#0
.2c0c	20 72 33	jsr $3372		jsr	stringHandler
.2c0f	aa		tax				tax 								; X = stack
.2c10	68		pla				pla
.2c11	a8		tay				tay
.2c12	60		rts				rts
.2c13					ExecLower:
.2c13	38		sec				sec 								; set carry is lower
.2c14	b0 01		bcs $2c17			bcs 	ExecUpperLower
.2c16					ExecUpper:
.2c16	18		clc				clc 								; clear carry is upper
.2c17					ExecUpperLower:
.2c17	08		php				php 								; save carry
.2c18	20 b6 29	jsr $29b6			jsr 	EvaluateString 				; string to stack,X
.2c1b	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; check closing right bracket.
.2c1e	28		plp				plp 								; restore carry, save Y
.2c1f	98		tya				tya
.2c20	48		pha				pha
.2c21	a9 00		lda #$00			lda 	#0 							; A zero if upper, 1 if lower.
.2c23	2a		rol a				rol 	a
.2c24	a8		tay				tay 								; now in Y
.2c25	8a		txa				txa 								; do the substring and exit.
.2c26	a2 0a		ldx #$0a		ldx	#10
.2c28	20 72 33	jsr $3372		jsr	stringHandler
.2c2b	aa		tax				tax
.2c2c	68		pla				pla
.2c2d	a8		tay				tay
.2c2e	60		rts				rts
.2c2f					ExecLeft:
.2c2f	20 b6 29	jsr $29b6			jsr 	EvaluateString 				; string to stack,X
.2c32	20 d2 2f	jsr $2fd2			jsr 	CheckComma
.2c35	e8		inx				inx
.2c36	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.2c38	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit
.2c3b	e8		inx				inx
.2c3c	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.2c3f					ExecSubstring:
.2c3f	ca		dex				dex 								; fix up X
.2c40	ca		dex				dex
.2c41	20 c5 2f	jsr $2fc5			jsr 	CheckRightParen 			; check closing right bracket.
.2c44	8a		txa				txa 								; do the substring and exit.
.2c45	a2 0c		ldx #$0c		ldx	#12
.2c47	20 72 33	jsr $3372		jsr	stringHandler
.2c4a	aa		tax				tax
.2c4b	60		rts				rts
.2c4c					ExecMid:
.2c4c	20 b6 29	jsr $29b6			jsr 	EvaluateString 				; string to stack,X
.2c4f	20 d2 2f	jsr $2fd2			jsr 	CheckComma
.2c52	e8		inx				inx
.2c53	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2c56	c9 00		cmp #$00			cmp 	#0
.2c58	f0 15		beq $2c6f			beq 	_EMValue
.2c5a	e8		inx				inx
.2c5b	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter - this is optional.
.2c5d	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit
.2c60	b1 28		lda ($28),y			lda 	(codePtr),y 				; is there a ) next
.2c62	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.2c64	f0 d9		beq $2c3f			beq 	ExecSubString
.2c66	20 d2 2f	jsr $2fd2			jsr 	CheckComma
.2c69	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.2c6c	4c 3f 2c	jmp $2c3f			jmp 	ExecSubString
.2c6f					_EMValue:
.2c6f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.2c71	20 3f 14	jsr $143f		jsr	errorHandler
.2c74					ExecRight:
.2c74	20 b6 29	jsr $29b6			jsr 	EvaluateString 				; string to stack,X
.2c77	20 d2 2f	jsr $2fd2			jsr 	CheckComma
.2c7a	e8		inx				inx
.2c7b	20 c9 29	jsr $29c9			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.2c7e	ca		dex				dex
.2c7f	98		tya				tya
.2c80	48		pha				pha
.2c81	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.2c83	85 2a		sta $2a				sta 	temp0
.2c85	b5 50		lda $50,x			lda 	esInt1,x
.2c87	85 2b		sta $2b				sta 	temp0+1
.2c89	a0 00		ldy #$00			ldy 	#0 							; point to length
.2c8b	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get the length.
.2c8d	18		clc				clc 								; add 1.
.2c8e	69 01		adc #$01			adc 	#1
.2c90	38		sec				sec
.2c91	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.2c93	f0 02		beq $2c97			beq		_ERMake1 					; if zero, make it 1.
.2c95	b0 02		bcs $2c99			bcs		_EROkay
.2c97					_ERMake1:
.2c97	a9 01		lda #$01			lda 	#1 							; start position.
.2c99					_EROkay:
.2c99	e8		inx				inx 								; set start pos.
.2c9a	95 48		sta $48,x			sta 	esInt0,x
.2c9c	e8		inx				inx
.2c9d	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.2c9f	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit
.2ca2	68		pla				pla
.2ca3	a8		tay				tay
.2ca4	4c 3f 2c	jmp $2c3f			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32binary.asm

.2ca7					MInt32And:
.2ca7	b5 48		lda $48,x			lda 	esInt0,x
.2ca9	35 49		and $49,x			and 	esInt0+1,x
.2cab	95 48		sta $48,x			sta 	esInt0,x
.2cad	b5 50		lda $50,x			lda 	esInt1,x
.2caf	35 51		and $51,x			and 	esInt1+1,x
.2cb1	95 50		sta $50,x			sta 	esInt1,x
.2cb3	b5 58		lda $58,x			lda 	esInt2,x
.2cb5	35 59		and $59,x			and 	esInt2+1,x
.2cb7	95 58		sta $58,x			sta 	esInt2,x
.2cb9	b5 60		lda $60,x			lda 	esInt3,x
.2cbb	35 61		and $61,x			and 	esInt3+1,x
.2cbd	95 60		sta $60,x			sta 	esInt3,x
.2cbf	60		rts				rts
.2cc0					MInt32Or:
.2cc0	b5 48		lda $48,x			lda 	esInt0,x
.2cc2	15 49		ora $49,x			ora 	esInt0+1,x
.2cc4	95 48		sta $48,x			sta 	esInt0,x
.2cc6	b5 50		lda $50,x			lda 	esInt1,x
.2cc8	15 51		ora $51,x			ora 	esInt1+1,x
.2cca	95 50		sta $50,x			sta 	esInt1,x
.2ccc	b5 58		lda $58,x			lda 	esInt2,x
.2cce	15 59		ora $59,x			ora 	esInt2+1,x
.2cd0	95 58		sta $58,x			sta 	esInt2,x
.2cd2	b5 60		lda $60,x			lda 	esInt3,x
.2cd4	15 61		ora $61,x			ora 	esInt3+1,x
.2cd6	95 60		sta $60,x			sta 	esInt3,x
.2cd8	60		rts				rts
.2cd9					MInt32Xor:
.2cd9	b5 48		lda $48,x			lda 	esInt0,x
.2cdb	55 49		eor $49,x			eor 	esInt0+1,x
.2cdd	95 48		sta $48,x			sta 	esInt0,x
.2cdf	b5 50		lda $50,x			lda 	esInt1,x
.2ce1	55 51		eor $51,x			eor 	esInt1+1,x
.2ce3	95 50		sta $50,x			sta 	esInt1,x
.2ce5	b5 58		lda $58,x			lda 	esInt2,x
.2ce7	55 59		eor $59,x			eor 	esInt2+1,x
.2ce9	95 58		sta $58,x			sta 	esInt2,x
.2ceb	b5 60		lda $60,x			lda 	esInt3,x
.2ced	55 61		eor $61,x			eor 	esInt3+1,x
.2cef	95 60		sta $60,x			sta 	esInt3,x
.2cf1	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32compare.asm

.2cf2					MInt32Compare:
.2cf2	b5 48		lda $48,x			lda 	esInt0,x 					; equality check first.
.2cf4	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2cf6	d0 13		bne $2d0b			bne 	MInt32Compare2
.2cf8	b5 50		lda $50,x			lda 	esInt1,x
.2cfa	d5 51		cmp $51,x			cmp 	esInt1+1,x
.2cfc	d0 0d		bne $2d0b			bne 	MInt32Compare2
.2cfe	b5 58		lda $58,x			lda 	esInt2,x
.2d00	d5 59		cmp $59,x			cmp 	esInt2+1,x
.2d02	d0 07		bne $2d0b			bne 	MInt32Compare2
.2d04	b5 60		lda $60,x			lda 	esInt3,x
.2d06	55 61		eor $61,x			eor 	esInt3+1,x 					; EOR will return 0 if the same.
.2d08	d0 01		bne $2d0b			bne 	MInt32Compare2
.2d0a	60		rts				rts
.2d0b					MInt32Compare2:
.2d0b	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.2d0d	d5 49		cmp $49,x			cmp 	esInt0+1,x
.2d0f	b5 50		lda $50,x			lda		esInt1,x
.2d11	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2d13	b5 58		lda $58,x			lda		esInt2,x
.2d15	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2d17	b5 60		lda $60,x			lda		esInt3,x
.2d19	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2d1b	50 02		bvc $2d1f			bvc 	_I32LNoOverflow 			; make it signed 32 bit comparison
.2d1d	49 80		eor #$80			eor 	#$80
.2d1f					_I32LNoOverflow
.2d1f	30 03		bmi $2d24			bmi 	MInt32CLess					; if -ve then return $FF
.2d21	a9 01		lda #$01			lda 	#$01						; else return $01
.2d23	60		rts				rts
.2d24					MInt32CLess:
.2d24	a9 ff		lda #$ff			lda 	#$FF
.2d26	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32divide.asm

.2d27					MInt32SDivide:
.2d27	98		tya				tya  								; save Y, which is the count of negations
.2d28	48		pha				pha
.2d29	a0 00		ldy #$00			ldy 	#0 							; zero count
.2d2b	20 43 2d	jsr $2d43			jsr 	_MInt32SRemSign 			; unsign TOS
.2d2e	e8		inx				inx 								; unsign TOS+1
.2d2f	20 43 2d	jsr $2d43			jsr 	_MInt32SRemSign
.2d32	ca		dex				dex
.2d33	98		tya				tya 								; save sign count on stack
.2d34	48		pha				pha
.2d35	20 4c 2d	jsr $2d4c			jsr 	MInt32UDivide 				; unsigned division
.2d38	68		pla				pla 								; get sign count back
.2d39	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.2d3b	f0 03		beq $2d40			beq 	_I32SNoNeg
.2d3d	20 0c 2f	jsr $2f0c			jsr 	MInt32Negate
.2d40					_I32SNoNeg:
.2d40	68		pla				pla 								; restoe Y and exit
.2d41	a8		tay				tay
.2d42	60		rts				rts
.2d43					_MInt32SRemSign:
.2d43	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.2d45	10 04		bpl $2d4b			bpl 	_MInt32SRSExit
.2d47	c8		iny				iny 								; increment the sign count
.2d48	20 0c 2f	jsr $2f0c			jsr 	MInt32Negate 				; negate the value.
.2d4b					_MInt32SRSExit:
.2d4b	60		rts				rts
.2d4c					MInt32UDivide:
.2d4c	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.2d4e	15 51		ora $51,x			ora 	esInt1+1,x
.2d50	15 52		ora $52,x			ora 	esInt1+2,x
.2d52	15 53		ora $53,x			ora 	esInt1+3,x
.2d54	f0 4a		beq $2da0			beq 	_MInt32DZero
.2d56	e8		inx				inx 								; clear A
.2d57	e8		inx				inx
.2d58	20 52 2f	jsr $2f52			jsr 	MInt32False
.2d5b	ca		dex				dex
.2d5c	ca		dex				dex
.2d5d	98		tya				tya 								; save Y on the stack
.2d5e	48		pha				pha
.2d5f	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.2d61					_MInt32UDLoop:
.2d61	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.2d63	36 50		rol $50,x			rol 	esInt1,x
.2d65	36 58		rol $58,x			rol 	esInt2,x
.2d67	36 60		rol $60,x			rol 	esInt3,x
.2d69	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.2d6b	36 52		rol $52,x			rol 	esInt1+2,x
.2d6d	36 5a		rol $5a,x			rol 	esInt2+2,x
.2d6f	36 62		rol $62,x			rol 	esInt3+2,x
.2d71	38		sec				sec 								; calculate A-M saving result on the stack
.2d72	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2d74	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2d76	48		pha				pha
.2d77	b5 52		lda $52,x			lda 	esInt1+2,x
.2d79	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2d7b	48		pha				pha
.2d7c	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2d7e	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2d80	48		pha				pha
.2d81	b5 62		lda $62,x			lda 	esInt3+2,x
.2d83	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2d85	90 10		bcc $2d97			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.2d87	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.2d89	68		pla				pla
.2d8a	95 5a		sta $5a,x			sta 	esInt2+2,x
.2d8c	68		pla				pla
.2d8d	95 52		sta $52,x			sta 	esInt1+2,x
.2d8f	68		pla				pla
.2d90	95 4a		sta $4a,x			sta 	esInt0+2,x
.2d92	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.2d94	4c 9a 2d	jmp $2d9a			jmp 	_MInt32Next 					; do the next iteration
.2d97					_MInt32NoSubtract:
.2d97	68		pla				pla
.2d98	68		pla				pla
.2d99	68		pla				pla
.2d9a					_MInt32Next:
.2d9a	88		dey				dey 								; do this 32 times.
.2d9b	d0 c4		bne $2d61			bne 	_MInt32UDLoop
.2d9d	68		pla				pla 								; restore Y and exit
.2d9e	a8		tay				tay
.2d9f	60		rts				rts
.2da0					_MInt32DZero:
.2da0	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.2da2	20 3f 14	jsr $143f		jsr	errorHandler
.2da5					MInt32Modulus:
.2da5	20 4c 2d	jsr $2d4c			jsr 	MInt32UDivide 				; do the division.
.2da8	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.2daa	95 60		sta $60,x			sta 	esInt3,x
.2dac	b5 5a		lda $5a,x			lda 	esInt2+2,x
.2dae	95 58		sta $58,x			sta 	esInt2,x
.2db0	b5 52		lda $52,x			lda 	esInt1+2,x
.2db2	95 50		sta $50,x			sta 	esInt1,x
.2db4	b5 4a		lda $4a,x			lda 	esInt0+2,x
.2db6	95 48		sta $48,x			sta 	esInt0,x
.2db8	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32fromstr.asm

.0c14					fs32Length:
>0c14							.fill 	1
.2db9					LinkInt32FromString:
.2db9	aa		tax				tax
.2dba	98		tya				tya
.2dbb	20 c0 2d	jsr $2dc0			jsr 	MInt32FromString
.2dbe	8a		txa				txa
.2dbf	60		rts				rts
.2dc0					MInt32FromString:
.2dc0	85 32		sta $32				sta 	tempShort 					; save base
.2dc2	98		tya				tya
.2dc3	48		pha				pha
.2dc4	a0 00		ldy #$00			ldy 	#0 							; get length of string to convert
.2dc6	b1 2a		lda ($2a),y			lda 	(temp0),y
.2dc8	8d 14 0c	sta $0c14			sta 	fs32Length
.2dcb	f0 65		beq $2e32			beq 	_I32FSFail2					; fail if length zero.
.2dcd	a0 01		ldy #$01			ldy 	#1 							; set index into string being read
.2dcf	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at first character
.2dd1	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.2dd3	d0 09		bne $2dde			bne 	_I32FSNotNegative
.2dd5	ad 14 0c	lda $0c14			lda 	fs32Length 					; get length back.
.2dd8	c9 01		cmp #$01			cmp 	#1 							; if 1 it is just a - on its own so fail.
.2dda	f0 56		beq $2e32			beq 	_I32FSFail2
.2ddc	a0 02		ldy #$02			ldy 	#2 							; first digit of the number.
.2dde					_I32FSNotNegative:
.2dde	a5 32		lda $32				lda 	tempShort 					; get the base back.
.2de0	c0 02		cpy #$02			cpy 	#2 							; if we read a -ve (e.g. Y == 2)
.2de2	d0 02		bne $2de6			bne 	_I32FSNN2
.2de4	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.2de6					_I32FSNN2:
.2de6	48		pha				pha 								; save base + final sign on stack.
.2de7	20 52 2f	jsr $2f52			jsr 	MInt32False 				; zero the return value.
.2dea					_I32FSMainLoop:
.2dea	68		pla				pla 								; get the base back into tempShort
.2deb	48		pha				pha
.2dec	29 7f		and #$7f			and 	#$7F
.2dee	85 32		sta $32				sta 	tempShort
.2df0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; look at next character.
.2df2	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.2df4	90 02		bcc $2df8			bcc 	_I32FSNotLC
.2df6	e9 20		sbc #$20			sbc 	#32
.2df8					_I32FSNotLC:
.2df8	38		sec				sec 								; subtract 48 (ASCII "0") - ASCII to Hex conversion
.2df9	e9 30		sbc #$30			sbc 	#"0"
.2dfb	90 34		bcc $2e31			bcc 	_I32FSFail 					; nothing more to do.
.2dfd	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.2dff	90 06		bcc $2e07			bcc 	_I32FSValidate
.2e01	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.2e03	90 2c		bcc $2e31			bcc 	_I32FSFail
.2e05	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.2e07					_I32FSValidate:
.2e07	c5 32		cmp $32				cmp 	tempShort 					; compare against the base.
.2e09	b0 26		bcs $2e31			bcs 	_I32FSFail 					; sorry, too large for this base, so fail.
.2e0b	48		pha				pha 								; save the new digit value.
.2e0c	e8		inx				inx 								; put base into next slot up on stack
.2e0d	a5 32		lda $32				lda 	tempShort
.2e0f	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit
.2e12	ca		dex				dex
.2e13	20 6a 2e	jsr $2e6a			jsr 	MInt32Multiply 				; multiply current by the base
.2e16	e8		inx				inx
.2e17	68		pla				pla  								; put additive into next slot
.2e18	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit
.2e1b	ca		dex				dex
.2e1c	20 36 2e	jsr $2e36			jsr 	MInt32Add 					; and add it
.2e1f	c8		iny				iny 								; bump the character pointer
.2e20	cc 14 0c	cpy $0c14			cpy 	fs32Length 					; until > length.
.2e23	f0 c5		beq $2dea			beq 	_I32FSMainLoop
.2e25	90 c3		bcc $2dea			bcc 	_I32FSMainLoop
.2e27					_I32FSDone:
.2e27	68		pla				pla 								; get base/final sign back
.2e28	10 03		bpl $2e2d			bpl 	_I32FSNN3
.2e2a	20 0c 2f	jsr $2f0c			jsr 	MInt32Negate 				; negate the result.
.2e2d					_I32FSNN3:
.2e2d	68		pla				pla
.2e2e	a8		tay				tay
.2e2f	38		sec				sec
.2e30	60		rts				rts
.2e31					_I32FSFail:
.2e31	68		pla				pla
.2e32					_I32FSFail2:
.2e32	68		pla				pla
.2e33	a8		tay				tay
.2e34	18		clc				clc
.2e35	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32math.asm

.2e36					MInt32Add:
.2e36	18		clc				clc
.2e37	b5 48		lda $48,x			lda 	esInt0,x
.2e39	75 49		adc $49,x			adc 	esInt0+1,x
.2e3b	95 48		sta $48,x			sta 	esInt0,x
.2e3d	b5 50		lda $50,x			lda 	esInt1,x
.2e3f	75 51		adc $51,x			adc 	esInt1+1,x
.2e41	95 50		sta $50,x			sta 	esInt1,x
.2e43	b5 58		lda $58,x			lda 	esInt2,x
.2e45	75 59		adc $59,x			adc 	esInt2+1,x
.2e47	95 58		sta $58,x			sta 	esInt2,x
.2e49	b5 60		lda $60,x			lda 	esInt3,x
.2e4b	75 61		adc $61,x			adc 	esInt3+1,x
.2e4d	95 60		sta $60,x			sta 	esInt3,x
.2e4f	60		rts				rts
.2e50					MInt32Sub:
.2e50	38		sec				sec
.2e51	b5 48		lda $48,x			lda 	esInt0,x
.2e53	f5 49		sbc $49,x			sbc 	esInt0+1,x
.2e55	95 48		sta $48,x			sta 	esInt0,x
.2e57	b5 50		lda $50,x			lda 	esInt1,x
.2e59	f5 51		sbc $51,x			sbc 	esInt1+1,x
.2e5b	95 50		sta $50,x			sta 	esInt1,x
.2e5d	b5 58		lda $58,x			lda 	esInt2,x
.2e5f	f5 59		sbc $59,x			sbc 	esInt2+1,x
.2e61	95 58		sta $58,x			sta 	esInt2,x
.2e63	b5 60		lda $60,x			lda 	esInt3,x
.2e65	f5 61		sbc $61,x			sbc 	esInt3+1,x
.2e67	95 60		sta $60,x			sta 	esInt3,x
.2e69	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32multiply.asm

.2e6a					MInt32Multiply:
.2e6a	e8		inx				inx 								; copy 2nd -> 3rd
.2e6b	20 90 2e	jsr $2e90			jsr 	MInt32CopyUp
.2e6e	ca		dex				dex
.2e6f	20 90 2e	jsr $2e90			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.2e72	20 52 2f	jsr $2f52			jsr 	MInt32False 				; zero 1st.
.2e75					_I32Loop:
.2e75	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.2e77	29 01		and #$01			and 	#1
.2e79	f0 03		beq $2e7e			beq 	_I32NoAdd 					; if set
.2e7b	20 36 2e	jsr $2e36			jsr 	MInt32Add 					; add 2nd to 1st.
.2e7e					_I32NoAdd:
.2e7e	e8		inx				inx 								; shift 2nd left
.2e7f	20 67 2f	jsr $2f67			jsr 	MInt32ShiftLeft
.2e82	e8		inx				inx  								; shift 3rd right
.2e83	20 70 2f	jsr $2f70			jsr 	MInt32ShiftRight
.2e86	20 79 2f	jsr $2f79			jsr 	MInt32Zero 					; check if zero.
.2e89	08		php				php 								; save status bits
.2e8a	ca		dex				dex 	 							; point back to 1st
.2e8b	ca		dex				dex
.2e8c	28		plp				plp 								; get status bits
.2e8d	d0 e6		bne $2e75			bne 	_I32Loop 					; if non-zero keep going.
.2e8f	60		rts				rts
.2e90					MInt32CopyUp:
.2e90	b5 48		lda $48,x			lda 	esInt0,x
.2e92	95 49		sta $49,x			sta 	esInt0+1,x
.2e94	b5 50		lda $50,x			lda 	esInt1,x
.2e96	95 51		sta $51,x			sta 	esInt1+1,x
.2e98	b5 58		lda $58,x			lda 	esInt2,x
.2e9a	95 59		sta $59,x			sta 	esInt2+1,x
.2e9c	b5 60		lda $60,x			lda 	esInt3,x
.2e9e	95 61		sta $61,x			sta 	esInt3+1,x
.2ea0	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32tostr.asm

>0c15					MCharCount:	.fill 	1						; count of converted characters
.2ea1					MLInt32ToString:
.2ea1	aa		tax				tax									; module passes stack in A, base in Y
.2ea2	98		tya				tya
.2ea3	20 a8 2e	jsr $2ea8			jsr 	MInt32ToString
.2ea6	8a		txa				txa
.2ea7	60		rts				rts
.2ea8					MInt32ToString:
.2ea8	48		pha				pha 								; save base
.2ea9	85 32		sta $32				sta 	tempShort 					; save target base.
.2eab	a9 00		lda #$00			lda 	#0
.2ead	8d 15 0c	sta $0c15			sta 	MCharCount 					; clear character count to 0
.2eb0	98		tya				tya
.2eb1	48		pha				pha
.2eb2	a5 32		lda $32				lda 	tempShort 					; check if we are signed conversion
.2eb4	10 10		bpl $2ec6			bpl 	_I32TSUnsigned
.2eb6	48		pha				pha 								; save base on stack.
.2eb7	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.2eb9	10 08		bpl $2ec3			bpl 	_I32TSNoFlip
.2ebb	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.2ebd	20 f9 2e	jsr $2ef9			jsr 	MI32WriteCharacter
.2ec0	20 0c 2f	jsr $2f0c			jsr 	MInt32Negate 				; negate the value, so now it's positive.
.2ec3					_I32TSNoFlip:
.2ec3	68		pla				pla 								; get the base back
.2ec4	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.2ec6					_I32TSUnsigned:
.2ec6	20 d4 2e	jsr $2ed4			jsr 	MI32DivideWrite 			; recursive code to output string.
.2ec9	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.2ecb	ad 15 0c	lda $0c15			lda 	MCharCount
.2ece	91 2a		sta ($2a),y			sta 	(temp0),y
.2ed0	68		pla				pla
.2ed1	a8		tay				tay
.2ed2	68		pla				pla
.2ed3	60		rts				rts
.2ed4					MI32DivideWrite:
.2ed4	48		pha				pha 								; save the divisor/base
.2ed5	e8		inx				inx 								; write in the dividing position.
.2ed6	20 61 2f	jsr $2f61			jsr 	MInt32Set8Bit
.2ed9	ca		dex				dex
.2eda	20 4c 2d	jsr $2d4c			jsr 	MInt32UDivide 				; divide number by base.
.2edd	68		pla				pla 								; get the base into Y
.2ede	a8		tay				tay
.2edf	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.2ee1	48		pha				pha
.2ee2	20 79 2f	jsr $2f79			jsr 	MInt32Zero 					; is the result zero ?
.2ee5	f0 04		beq $2eeb			beq 	_I32NoRecurse 				; if so, don't recurse.
.2ee7	98		tya				tya 								; put base into A
.2ee8	20 d4 2e	jsr $2ed4			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.2eeb					_I32NoRecurse:
.2eeb	68		pla				pla 								; get the remainder back
.2eec	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals, now converting to ASCII
.2eee	90 02		bcc $2ef2			bcc 	_I32NotHex
.2ef0	69 06		adc #$06			adc 	#7-1
.2ef2					_I32NotHex:
.2ef2	18		clc				clc 								; make it ASCII
.2ef3	69 30		adc #$30			adc 	#48
.2ef5	20 f9 2e	jsr $2ef9			jsr 	MI32WriteCharacter 			; write the character out
.2ef8	60		rts				rts 								; and exit.
.2ef9					MI32WriteCharacter:
.2ef9	ee 15 0c	inc $0c15			inc 	MCharCount 					; bump count (space for leading count)
.2efc	ac 15 0c	ldy $0c15			ldy 	MCharCount 					; get position
.2eff	91 2a		sta ($2a),y			sta 	(temp0),y 					; write out with trailing 0
.2f01	c8		iny				iny
.2f02	a9 00		lda #$00			lda 	#0
.2f04	91 2a		sta ($2a),y			sta 	(temp0),y
.2f06	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/imath/int32unary.asm

>0c16					MSeed32:	.fill 	4							; random number seed.
.2f07					MInt32Absolute:
.2f07	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.2f09	30 01		bmi $2f0c			bmi 	MInt32Negate
.2f0b	60		rts				rts
.2f0c					MInt32Negate:
.2f0c	38		sec				sec 								; subtract from zero.
.2f0d	a9 00		lda #$00			lda 	#0
.2f0f	f5 48		sbc $48,x			sbc 	esInt0,x
.2f11	95 48		sta $48,x			sta 	esInt0,x
.2f13	a9 00		lda #$00			lda 	#0
.2f15	f5 50		sbc $50,x			sbc 	esInt1,x
.2f17	95 50		sta $50,x			sta 	esInt1,x
.2f19	a9 00		lda #$00			lda 	#0
.2f1b	f5 58		sbc $58,x			sbc 	esInt2,x
.2f1d	95 58		sta $58,x			sta 	esInt2,x
.2f1f	a9 00		lda #$00			lda 	#0
.2f21	f5 60		sbc $60,x			sbc 	esInt3,x
.2f23	95 60		sta $60,x			sta 	esInt3,x
.2f25	60		rts				rts
.2f26					MInt32Not:
.2f26	b5 48		lda $48,x			lda 	esInt0,x 					; one's complement all four.
.2f28	49 ff		eor #$ff			eor 	#$FF
.2f2a	95 48		sta $48,x			sta 	esInt0,x
.2f2c	b5 50		lda $50,x			lda 	esInt1,x
.2f2e	49 ff		eor #$ff			eor 	#$FF
.2f30	95 50		sta $50,x			sta 	esInt1,x
.2f32	b5 58		lda $58,x			lda 	esInt2,x
.2f34	49 ff		eor #$ff			eor 	#$FF
.2f36	95 58		sta $58,x			sta 	esInt2,x
.2f38	b5 60		lda $60,x			lda 	esInt3,x
.2f3a	49 ff		eor #$ff			eor 	#$FF
.2f3c	95 60		sta $60,x			sta 	esInt3,x
.2f3e	60		rts				rts
.2f3f					MInt32Sign:
.2f3f	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.2f41	30 0b		bmi $2f4e			bmi 	MInt32True 					; if set return -1 (true)
.2f43	20 79 2f	jsr $2f79			jsr 	MInt32Zero 					; is it zero ?
.2f46	f0 0a		beq $2f52			beq 	MInt32False 				; if zero return 0 (false)
.2f48	20 52 2f	jsr $2f52			jsr 	MInt32False 				; > 0 return 1, by setting it to zero
.2f4b	f6 48		inc $48,x			inc 	esInt0,x  					; and bumping the LSB.
.2f4d	60		rts				rts
.2f4e					MInt32True:
.2f4e	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.2f50	d0 02		bne $2f54			bne 	MInt32WriteAll
.2f52					MInt32False:
.2f52	a9 00		lda #$00			lda 	#0
.2f54					MInt32WriteAll:
.2f54	95 48		sta $48,x			sta 	esInt0,x
.2f56					MInt32Write123:
.2f56	95 50		sta $50,x			sta 	esInt1,x
.2f58	95 58		sta $58,x			sta 	esInt2,x
.2f5a	95 60		sta $60,x			sta 	esInt3,x
.2f5c	a9 00		lda #$00			lda 	#$00						; and make it an integer
.2f5e	95 40		sta $40,x			sta 	esType,x
.2f60	60		rts				rts
.2f61					MInt32Set8Bit:
.2f61	95 48		sta $48,x			sta 	esInt0,x 					; coopt above function to write
.2f63	a9 00		lda #$00			lda 	#0 							; a value 0-255
.2f65	f0 ef		beq $2f56			beq		MInt32Write123
.2f67					MInt32ShiftLeft:
.2f67	16 48		asl $48,x			asl 	esInt0,x
.2f69	36 50		rol $50,x			rol	 	esInt1,x
.2f6b	36 58		rol $58,x			rol	 	esInt2,x
.2f6d	36 60		rol $60,x			rol	 	esInt3,x
.2f6f	60		rts				rts
.2f70					MInt32ShiftRight:
.2f70	56 60		lsr $60,x			lsr 	esInt3,x
.2f72	76 58		ror $58,x			ror 	esInt2,x
.2f74	76 50		ror $50,x			ror 	esInt1,x
.2f76	76 48		ror $48,x			ror 	esInt0,x
.2f78	60		rts				rts
.2f79					MInt32Zero:
.2f79	b5 48		lda $48,x			lda 	esInt0,x
.2f7b	15 50		ora $50,x			ora 	esInt1,x
.2f7d	15 58		ora $58,x			ora 	esInt2,x
.2f7f	15 60		ora $60,x			ora 	esInt3,x
.2f81	60		rts				rts
.2f82					MInt32Random:
.2f82	98		tya				tya
.2f83	48		pha				pha
.2f84	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.2f86	ad 16 0c	lda $0c16			lda 	MSeed32+0 					; check the seed isn't zero
.2f89	d0 03		bne $2f8e			bne 	_Random1
.2f8b	a8		tay				tay 								; if so do it 256 times
.2f8c	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.2f8e					_Random1:
.2f8e	0a		asl a				asl 	a
.2f8f	2e 17 0c	rol $0c17			rol 	MSeed32+1
.2f92	2e 18 0c	rol $0c18			rol 	MSeed32+2
.2f95	2e 19 0c	rol $0c19			rol 	MSeed32+3
.2f98	90 02		bcc $2f9c			bcc 	_Random2
.2f9a	49 c5		eor #$c5			eor 	#$C5
.2f9c					_Random2:
.2f9c	88		dey				dey
.2f9d	d0 ef		bne $2f8e			bne 	_Random1
.2f9f	8d 16 0c	sta $0c16			sta 	MSeed32+0 					; copy the seed in.
.2fa2	95 48		sta $48,x			sta 	esInt0,x
.2fa4	ad 17 0c	lda $0c17			lda 	MSeed32+1
.2fa7	95 50		sta $50,x			sta 	esInt1,x
.2fa9	ad 18 0c	lda $0c18			lda 	MSeed32+2
.2fac	95 58		sta $58,x			sta 	esInt2,x
.2fae	ad 19 0c	lda $0c19			lda 	MSeed32+3
.2fb1	95 60		sta $60,x			sta 	esInt3,x
.2fb3	68		pla				pla
.2fb4	a8		tay				tay
.2fb5	a9 00		lda #$00			lda 	#0
.2fb7	95 40		sta $40,x			sta 	esType,x
.2fb9	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/check.asm

.2fba					CheckToken:
.2fba	d1 28		cmp ($28),y			cmp 	(codePtr),y
.2fbc	d0 02		bne $2fc0			bne 	_CTError
.2fbe	c8		iny				iny
.2fbf	60		rts				rts
.2fc0					_CTError:
.2fc0	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.2fc2	20 3f 14	jsr $143f		jsr	errorHandler
.2fc5					CheckRightParen:
.2fc5	b1 28		lda ($28),y			lda 	(codePtr),y
.2fc7	c8		iny				iny
.2fc8	c9 c9		cmp #$c9			cmp 	#TKW_RPAREN
.2fca	d0 01		bne $2fcd			bne 	_CRPError
.2fcc	60		rts				rts
.2fcd					_CRPError:
.2fcd	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.2fcf	20 3f 14	jsr $143f		jsr	errorHandler
.2fd2					CheckComma:
.2fd2	b1 28		lda ($28),y			lda 	(codePtr),y
.2fd4	c8		iny				iny
.2fd5	c9 cb		cmp #$cb			cmp 	#TKW_COMMA
.2fd7	d0 01		bne $2fda			bne 	_CCError
.2fd9	60		rts				rts
.2fda					_CCError:
.2fda	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.2fdc	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: main/main.asm


;******  Processing file: main/utility/scanner.asm

.2fdf					ScanForward:
.2fdf	85 2c		sta $2c				sta 	temp1 						; save tokens to search in temp1/temp1+1
.2fe1	86 2d		stx $2d				stx 	temp1+1
.2fe3	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2fe5	85 2e		sta $2e				sta 	temp2
.2fe7	b1 28		lda ($28),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2fe9	c8		iny				iny
.2fea	a6 2e		ldx $2e				ldx 	temp2 						; check structure levels are zero.
.2fec	d0 08		bne $2ff6			bne 	_SFNoCheck 					; if so, check token against entered values.
.2fee	c5 2c		cmp $2c				cmp 	temp1 						; if either matches, we've reached the token
.2ff0	f0 24		beq $3016			beq 	_SFExit 					; at the same strcture depth.
.2ff2	c5 2d		cmp $2d				cmp 	temp1+1
.2ff4	f0 20		beq $3016			beq 	_SFExit
.2ff6					_SFNoCheck:
.2ff6	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2ff8	90 ed		bcc $2fe7			bcc 	_SFLoop
.2ffa	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2ffc	90 19		bcc $3017			bcc 	_SFSpecials
.2ffe	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.3000	90 e5		bcc $2fe7			bcc 	_SFLoop
.3002	c9 a4		cmp #$a4			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.3004	b0 e1		bcs $2fe7			bcs 	_SFLoop
.3006	aa		tax				tax  								; token in X, and look up the adjuster.
.3007	bd 5a 28	lda $285a,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.300a	38		sec				sec 								; convert to an offset ($FF,$01)
.300b	e9 81		sbc #$81			sbc 	#$81
.300d	18		clc				clc 								; add to depth
.300e	65 2e		adc $2e				adc 	temp2
.3010	85 2e		sta $2e				sta 	temp2
.3012	10 d3		bpl $2fe7			bpl 	_SFLoop 					; +ve okay to continue
.3014	30 07		bmi $301d			bmi 	SFError 					; if gone -ve then we have a nesting error
.3016	60		rts		_SFExit:rts
.3017					_SFSpecials:
.3017	20 22 30	jsr $3022			jsr 	ScannerSkipSpecial
.301a	4c e7 2f	jmp $2fe7			jmp 	_SFLoop
.301d					SFError:
.301d	a2 14		ldx #$14			ldx 	#ErrorID_Struct
.301f	20 3f 14	jsr $143f		jsr	errorHandler
.3022					ScannerSkipSpecial:
.3022	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.3024	f0 10		beq $3036			beq 	_SFNextLine
.3026	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.3028	f0 2b		beq $3055			beq 	_SFFloatSkip
.302a	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.302c	f0 02		beq $3030			beq 	_SFSkipString
.302e	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.302f	60		rts				rts 								; token.
.3030					_SFSkipString:
.3030	98		tya				tya
.3031	38		sec				sec
.3032	71 28		adc ($28),y			adc 	(codePtr),y
.3034	a8		tay				tay
.3035	60		rts				rts
.3036					_SFNextLine:
.3036	a0 00		ldy #$00			ldy 	#0 							; get offset
.3038	b1 28		lda ($28),y			lda 	(codePtr),y
.303a	18		clc				clc 								; add to code pointer.
.303b	65 28		adc $28				adc 	codePtr
.303d	85 28		sta $28				sta 	codePtr
.303f	90 02		bcc $3043			bcc		_SFNLNoCarry
.3041	e6 29		inc $29				inc 	codePtr+1
.3043					_SFNLNoCarry:
.3043	b1 28		lda ($28),y			lda 	(codePtr),y 				; reached the end of the program.
.3045	d0 0b		bne $3052			bne		_SFXNL 						; no go round again
.3047	a5 2c		lda $2c				lda 	temp1
.3049	c9 dc		cmp #$dc			cmp 	#TKW_DATA 					; if searching for Data different error.
.304b	d0 d0		bne $301d			bne 	SFError 					; read uses this to search for data statements
.304d	a2 1c		ldx #$1c			ldx 	#ErrorID_DataError
.304f	20 3f 14	jsr $143f		jsr	errorHandler
.3052	a0 03		ldy #$03	_SFXNL:	ldy 	#3
.3054	60		rts				rts
.3055					_SFFloatSkip:
.3055	98		tya				tya 								; skip over an embedded float.
.3056	18		clc				clc
.3057	69 05		adc #$05			adc 	#FloatEmbeddedSize
.3059	a8		tay				tay
.305a	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/stack.asm

.0037					rsPointer:
>0037							.fill 	2							; to TOS, which is the current top-token.
.305b					RSReset:
.305b	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.305d	85 37		sta $37				sta 	rsPointer
.305f	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.3061	85 38		sta $38				sta 	1+(rsPointer)
.3063	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.3065	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.3068	60		rts				rts
.3069					RSClaim:
.3069	84 32		sty $32				sty 	tempShort 					; preserve Y
.306b	48		pha				pha 								; save marker on stack.
.306c	8a		txa				txa 								; get bytes required.
.306d	38		sec				sec
.306e	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.3070	65 37		adc $37				adc 	rsPointer
.3072	85 37		sta $37				sta 	rsPointer
.3074	a5 38		lda $38				lda 	rsPointer+1
.3076	69 ff		adc #$ff			adc 	#$FF
.3078	85 38		sta $38				sta 	rsPointer+1
.307a	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.307c	90 08		bcc $3086			bcc 	_RSCOverflow
.307e	68		pla				pla 								; get marker back
.307f	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.3081	91 37		sta ($37),y			sta 	(rsPointer),y
.3083	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit
.3085	60		rts				rts
.3086					_RSCOverflow:
.3086	a2 16		ldx #$16			ldx 	#ErrorID_RetStack
.3088	20 3f 14	jsr $143f		jsr	errorHandler
.308b					RSFree:
.308b	18		clc				clc
.308c	65 37		adc $37				adc 	rsPointer
.308e	85 37		sta $37				sta 	rsPointer
.3090	90 02		bcc $3094			bcc 	_RSFExit
.3092	e6 38		inc $38				inc 	rsPointer+1
.3094					_RSFExit:
.3094	60		rts				rts
.3095					RSSavePosition:
.3095	84 32		sty $32				sty 	tempShort 					; save Y position
.3097	a8		tay				tay 								; this is where we write it.
.3098	a5 28		lda $28				lda 	codePtr 					; write codePointer out
.309a	91 37		sta ($37),y			sta 	(rsPointer),y
.309c	c8		iny				iny
.309d	a5 29		lda $29				lda 	codePtr+1
.309f	91 37		sta ($37),y			sta 	(rsPointer),y
.30a1	c8		iny				iny
.30a2	a5 32		lda $32				lda 	tempShort 					; write the Y position out.
.30a4	91 37		sta ($37),y			sta 	(rsPointer),y
.30a6	a8		tay				tay 								; fix Y back again to original value
.30a7	60		rts				rts
.30a8					RSLoadPosition:
.30a8	a8		tay				tay
.30a9	b1 37		lda ($37),y			lda 	(rsPointer),y 				; read codePointer back
.30ab	85 28		sta $28				sta 	codePtr
.30ad	c8		iny				iny
.30ae	b1 37		lda ($37),y			lda 	(rsPointer),y
.30b0	85 29		sta $29				sta 	codePtr+1
.30b2	c8		iny				iny
.30b3	b1 37		lda ($37),y			lda 	(rsPointer),y 				; and the offset
.30b5	a8		tay				tay 								; to Y
.30b6	60		rts				rts

;******  Return to file: main/main.asm


;******  Processing file: main/utility/warmstart.asm

.30b7					WarmStart:
.30b7	a2 02		ldx #$02		ldx	#2
.30b9	20 31 1a	jsr $1a31		jsr	interactionHandler

;******  Return to file: main/main.asm

.30bc					mainHandler:
.30bc	7c bf 30	jmp ($30bf,x)			jmp 	(mainVectors,x)
.30bf					mainVectors:
>30bf	c5 2f					.word CheckRightParen      ; index 0
>30c1	46 1a					.word XCommandClear        ; index 2
>30c3	dc 29					.word LinkEvaluate         ; index 4
>30c5	e8 29					.word LinkEvaluateInteger  ; index 6
>30c7	ee 29					.word LinkEvaluateSmallInt ; index 8
>30c9	e2 29					.word LinkEvaluateTerm     ; index 10
>30cb	a1 2e					.word MLInt32ToString      ; index 12
>30cd	64 1f					.word Command_XNew         ; index 14
>30cf	73 21					.word XCommand_Run         ; index 16
>30d1	7f 21					.word Command_RunFrom      ; index 18
>30d3	b9 2d					.word LinkInt32FromString  ; index 20

;******  Return to file: basic.asm

.30d5					section_end_main:
.30d5					section_start_string:

;******  Processing file: string/string.asm


;******  Processing file: string/chr.asm

.30d5					StringChrs:
.30d5	aa		tax				tax 								; set up stack
.30d6	a9 02		lda #$02			lda 	#2
.30d8	20 98 31	jsr $3198			jsr 	AllocateSoftString
.30db	98		tya				tya
.30dc	20 be 31	jsr $31be			jsr 	WriteSoftString
.30df					StringUpdate:
.30df	20 ed 30	jsr $30ed			jsr 	ReturnSoftString
.30e2	8a		txa				txa
.30e3	60		rts				rts
.30e4					StringNull:
.30e4	aa		tax				tax
.30e5	a9 01		lda #$01			lda 	#1
.30e7	20 98 31	jsr $3198			jsr 	AllocateSoftString
.30ea	4c df 30	jmp $30df			jmp 	StringUpdate
.30ed					ReturnSoftString:
.30ed	a5 39		lda $39				lda 	softMemAlloc 				; copy address
.30ef	95 48		sta $48,x			sta 	esInt0,x
.30f1	a5 3a		lda $3a				lda 	softMemAlloc+1
.30f3	95 50		sta $50,x			sta 	esInt1,x
.30f5	a9 00		lda #$00			lda 	#0 							; zero upper bytes
.30f7	95 58		sta $58,x			sta 	esInt2,x
.30f9	95 60		sta $60,x			sta 	esInt3,x
.30fb	a9 40		lda #$40			lda 	#$40 						; type string.
.30fd	95 40		sta $40,x			sta 	esType,x
.30ff	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/compare.asm

.3100					STRCompare:
.3100	48		pha				pha 								; save A
.3101	aa		tax				tax 								; put stack pos in X
.3102	98		tya				tya
.3103	48		pha				pha
.3104	20 38 31	jsr $3138			jsr 	CopyStringPair 				; copy strings to temp0,temp1
.3107	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.3109	b1 2a		lda ($2a),y			lda 	(temp0),y
.310b	d1 2c		cmp ($2c),y			cmp 	(temp1),y
.310d	90 02		bcc $3111			bcc 	_SCNotSmaller
.310f	b1 2c		lda ($2c),y			lda 	(temp1),y
.3111					_SCNotSmaller:
.3111	aa		tax				tax 								; put that in X. We compare this many chars first.
.3112					_SCCompareLoop:
.3112	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.3114	f0 0c		beq $3122			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.3116	ca		dex				dex 								; decrement chars to compare.
.3117	c8		iny				iny 								; move to next character
.3118	38		sec				sec 								; calculate s1[y]-s2[y]
.3119	b1 2a		lda ($2a),y			lda 	(temp0),y
.311b	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.311d	d0 0a		bne $3129			bne 	_SCReturnResult 			; if different return sign of A
.311f	4c 12 31	jmp $3112			jmp 	_SCCompareLoop
.3122					_SCSameToEndShortest
.3122	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.3124	38		sec				sec
.3125	b1 2a		lda ($2a),y			lda 	(temp0),y
.3127	f1 2c		sbc ($2c),y			sbc 	(temp1),y
.3129					_SCReturnResult:
.3129	08		php				php 								; set return to zero preserving PSW.
.312a	a2 00		ldx #$00			ldx 	#0
.312c	28		plp				plp
.312d	f0 05		beq $3134			beq 	_SCExit 					; two values equal, then exit
.312f	ca		dex				dex 								; X = $FF
.3130	90 02		bcc $3134			bcc 	_SCExit 					; if 1st < 2nd then -1
.3132	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.3134					_SCExit:
.3134	68		pla				pla
.3135	a8		tay				tay
.3136	68		pla				pla
.3137	60		rts				rts
.3138					CopyStringPair:
.3138	b5 49		lda $49,x			lda 	esInt0+1,x
.313a	85 2c		sta $2c				sta 	temp1
.313c	b5 51		lda $51,x			lda 	esInt1+1,x
.313e	85 2d		sta $2d				sta 	temp1+1
.3140					CopyStringTop:
.3140	b5 48		lda $48,x			lda 	esInt0,x
.3142	85 2a		sta $2a				sta 	temp0
.3144	b5 50		lda $50,x			lda 	esInt1,x
.3146	85 2b		sta $2b				sta 	temp0+1
.3148	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/concat.asm

.3149					StringConcat:
.3149	aa		tax				tax									; stack pos in X
.314a	98		tya				tya
.314b	48		pha				pha
.314c	20 38 31	jsr $3138			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.314f	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.3150	a0 00		ldy #$00			ldy 	#0
.3152	b1 2a		lda ($2a),y			lda 	(temp0),y
.3154	71 2c		adc ($2c),y			adc 	(temp1),y
.3156	b0 1c		bcs $3174			bcs 	_SCError 					; just too many characters here.
.3158	c9 fc		cmp #$fc			cmp 	#MaxStringSize
.315a	b0 18		bcs $3174			bcs 	_SCError
.315c	20 98 31	jsr $3198			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.315f	20 8f 31	jsr $318f			jsr 	CopySoftToStack 			; copy that to the stack.
.3162	20 79 31	jsr $3179			jsr 	SCCopyTemp0 				; copy temp0
.3165	a5 2c		lda $2c				lda 	temp1 						; copy temp1 to temp0
.3167	85 2a		sta $2a				sta 	temp0
.3169	a5 2d		lda $2d				lda 	temp1+1
.316b	85 2b		sta $2b				sta 	temp0+1
.316d	20 79 31	jsr $3179			jsr 	SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.3170	68		pla				pla
.3171	a8		tay				tay
.3172	8a		txa				txa 								; and A
.3173	60		rts				rts
.3174					_SCError:
.3174	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.3176	20 3f 14	jsr $143f		jsr	errorHandler
.3179					SCCopyTemp0:
.3179	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.317b	b1 2a		lda ($2a),y			lda 	(temp0),y
.317d	85 2e		sta $2e				sta 	temp2
.317f					_SCCopyLoop:
.317f	a5 2e		lda $2e				lda 	temp2 						; done the lot
.3181	f0 0b		beq $318e			beq 	_SCCopyExit
.3183	c6 2e		dec $2e				dec 	temp2
.3185	c8		iny				iny 								; get next char
.3186	b1 2a		lda ($2a),y			lda 	(temp0),y
.3188	20 be 31	jsr $31be			jsr 	WriteSoftString 			; write to soft string.
.318b	4c 7f 31	jmp $317f			jmp 	_SCCopyLoop
.318e					_SCCopyExit:
.318e	60		rts				rts
.318f					CopySoftToStack:
.318f	a5 39		lda $39				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.3191	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.3193	a5 3a		lda $3a				lda 	SoftMemAlloc+1
.3195	95 50		sta $50,x			sta 	esInt1,x
.3197	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/memory.asm

.0039					softMemAlloc:
>0039							.fill 	2  							; if MSB is zero needs resetting on allocation.
.3198					AllocateSoftString:
.3198	85 32		sta $32				sta 	tempShort 					; save count
.319a	98		tya				tya
.319b	48		pha				pha
.319c	a5 3a		lda $3a				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.319e	d0 09		bne $31a9			bne 	_ASSDone
.31a0	a5 33		lda $33				lda 	highMemory 					; reset the soft memory alloc pointer.
.31a2	85 39		sta $39				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.31a4	a4 34		ldy $34				ldy 	highMemory+1 				; but it needs to be reset before each command.
.31a6	88		dey				dey 								; it is set to 1/4k below high memory, allowing space
.31a7	84 3a		sty $3a				sty 	softMemAlloc+1 				; for a concreted string.
.31a9					_ASSDone:
.31a9	38		sec				sec 								; allocate downwards enough memory
.31aa	a5 39		lda $39				lda 	softMemAlloc 				; subtract the memory requirements in A from
.31ac	e5 32		sbc $32				sbc 	tempShort 					; the soft memory pointer
.31ae	85 39		sta $39				sta 	softMemAlloc
.31b0	a5 3a		lda $3a				lda 	softMemAlloc+1
.31b2	e9 00		sbc #$00			sbc 	#0
.31b4	85 3a		sta $3a				sta 	softMemAlloc+1
.31b6	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.31b8	a8		tay				tay
.31b9	91 39		sta ($39),y			sta 	(softMemAlloc),y
.31bb	68		pla				pla
.31bc	a8		tay				tay
.31bd	60		rts				rts
.31be					WriteSoftString:
.31be	84 32		sty $32				sty 	tempShort 					; save Y
.31c0	48		pha				pha 								; save character on stack
.31c1	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.31c3	b1 39		lda ($39),y			lda 	(softMemAlloc),y
.31c5	18		clc				clc
.31c6	69 01		adc #$01			adc 	#1
.31c8	91 39		sta ($39),y			sta 	(softMemAlloc),y
.31ca	a8		tay				tay 								; offset in Y
.31cb	68		pla				pla 								; get char and write.
.31cc	91 39		sta ($39),y			sta 	(softMemAlloc),y
.31ce	a4 32		ldy $32				ldy 	tempShort 					; restore Y and exit.
.31d0	60		rts				rts
.31d1					StrClone:
.31d1	aa		tax				tax 								; set up stack.
.31d2	98		tya				tya
.31d3	48		pha				pha
.31d4	a0 00		ldy #$00			ldy 	#0 							; get length, add 1 for length
.31d6	b1 2a		lda ($2a),y			lda 	(temp0),y 					; this is the bytes required.
.31d8	18		clc				clc
.31d9	69 01		adc #$01			adc 	#1
.31db	20 98 31	jsr $3198			jsr 	AllocateSoftString 			; allocate soft memory
.31de	a5 39		lda $39				lda 	softMemAlloc 				; copy that address to TOS
.31e0	95 48		sta $48,x			sta 	esInt0,x
.31e2	a5 3a		lda $3a				lda 	softMemAlloc+1
.31e4	95 50		sta $50,x			sta 	esInt1,x
.31e6	a9 00		lda #$00			lda 	#0 							; zero upper 2 bytes
.31e8	95 58		sta $58,x			sta 	esInt2,x
.31ea	95 60		sta $60,x			sta 	esInt3,x
.31ec	a9 40		lda #$40			lda 	#$40 						; set type to string.
.31ee	95 40		sta $40,x			sta 	esType,x
.31f0	20 79 31	jsr $3179			jsr 	SCCopyTemp0 				; copy temp0 string to soft memory copy (concat.asm)
.31f3	68		pla				pla
.31f4	a8		tay				tay
.31f5	8a		txa				txa
.31f6	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/setcase.asm

.31f7					CaseString:
.31f7	48		pha				pha 								; save A and copy to X
.31f8	aa		tax				tax
.31f9	98		tya				tya
.31fa	48		pha				pha
.31fb	20 40 31	jsr $3140			jsr 	CopyStringTop 				; target string -> temp0
.31fe	a0 00		ldy #$00			ldy 	#0
.3200	b1 2a		lda ($2a),y			lda 	(temp0),y  					; get length,
.3202	18		clc				clc
.3203	69 01		adc #$01			adc 	#1 							; one more for length byte
.3205	20 98 31	jsr $3198			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3208	20 8f 31	jsr $318f			jsr 	CopySoftToStack 			; copy that to the stack.
.320b	a0 00		ldy #$00			ldy 	#0
.320d	b1 2a		lda ($2a),y			lda 	(temp0),y 					; count to copy in X
.320f	aa		tax				tax
.3210					_CSCopy:
.3210	e0 00		cpx #$00			cpx 	#0 							; finished if 0.
.3212	f0 24		beq $3238			beq 	_CSExit
.3214	ca		dex				dex
.3215	c8		iny				iny
.3216	68		pla				pla 								; check direction
.3217	48		pha				pha
.3218	f0 0c		beq $3226			beq 	_CSUpper
.321a	b1 2a		lda ($2a),y			lda 	(temp0),y 					; lower$() code
.321c	c9 41		cmp #$41			cmp 	#"A"
.321e	90 12		bcc $3232			bcc 	_CSWrite
.3220	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3222	b0 0e		bcs $3232			bcs 	_CSWrite
.3224	90 0a		bcc $3230			bcc 	_CSFlipWrite
.3226					_CSUpper:
.3226	b1 2a		lda ($2a),y			lda 	(temp0),y 					; upper$() code
.3228	c9 61		cmp #$61			cmp 	#"a"
.322a	90 06		bcc $3232			bcc 	_CSWrite
.322c	c9 7b		cmp #$7b			cmp 	#"z"+1
.322e	b0 02		bcs $3232			bcs 	_CSWrite
.3230					_CSFlipWrite:
.3230	49 20		eor #$20			eor 	#"A"^"a" 					; switch case.
.3232					_CSWrite:
.3232	20 be 31	jsr $31be			jsr 	WriteSoftString 			; add to soft string.
.3235	4c 10 32	jmp $3210			jmp 	_CSCopy
.3238					_CSExit:
.3238	68		pla				pla
.3239	a8		tay				tay
.323a	68		pla				pla
.323b	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/substring.asm

.323c					StringSubstring:
.323c	48		pha				pha
.323d	aa		tax				tax 								; access stack.
.323e	98		tya				tya
.323f	48		pha				pha
.3240	20 40 31	jsr $3140			jsr 	CopyStringTop 				; point temp0 to the string.
.3243	a0 00		ldy #$00			ldy 	#0 							; get length.
.3245	b1 2a		lda ($2a),y			lda 	(temp0),Y
.3247	85 2c		sta $2c				sta 	temp1
.3249	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.324b	c5 2c		cmp $2c				cmp 	temp1 						; return "" if > length.
.324d	f0 02		beq $3251			beq 	_SSBOkay
.324f	b0 2a		bcs $327b			bcs 	_SSBReturnNull
.3251					_SSBOkay:
.3251	a5 2c		lda $2c				lda 	temp1 						; get the total length +1
.3253	18		clc				clc
.3254	69 01		adc #$01			adc 	#1
.3256	38		sec				sec
.3257	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad - max size
.3259	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.325b	90 02		bcc $325f			bcc		_SSBTrunc
.325d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.325f					_SSBTrunc:
.325f	85 2d		sta $2d				sta 	temp1+1 					; characters to copy.
.3261	18		clc				clc
.3262	69 01		adc #$01			adc 	#1 							; add 1
.3264	20 98 31	jsr $3198			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.3267	20 8f 31	jsr $318f			jsr 	CopySoftToStack 			; copy that to the stack.
.326a	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.326c					_SSBCopyLoop:
.326c	a5 2d		lda $2d				lda 	temp1+1 					; done them all
.326e	f0 0e		beq $327e			beq 	_SSBExit
.3270	c6 2d		dec $2d				dec 	temp1+1
.3272	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get and write character
.3274	20 be 31	jsr $31be			jsr 	WriteSoftString
.3277	c8		iny				iny
.3278	4c 6c 32	jmp $326c			jmp 	_SSBCopyLoop
.327b					_SSBReturnNull:
.327b	20 82 32	jsr $3282			jsr 	ReturnNull
.327e					_SSBExit:
.327e	68		pla				pla
.327f	a8		tay				tay
.3280	68		pla				pla
.3281	60		rts				rts
.3282					ReturnNull:
.3282	a9 00		lda #$00			lda 	#0 							; clear null string
.3284	8d ce 0a	sta $0ace			sta 	NullString
.3287	a9 ce		lda #$ce			lda 	#NullString & $FF 			; set a pointer to it
.3289	95 48		sta $48,x			sta 	esInt0,x
.328b	a9 0a		lda #$0a			lda 	#NullString >> 8
.328d	95 50		sta $50,x			sta 	esInt1,x
.328f	60		rts				rts

;******  Return to file: string/string.asm


;******  Processing file: string/write.asm

.0c1a					srcStrLen:
>0c1a							.fill 	1
.3290					StringWrite:
.3290	aa		tax				tax
.3291	48		pha				pha
.3292	98		tya				tya
.3293	48		pha				pha
.3294	20 bb 32	jsr $32bb			jsr 	CheckOverwriteCurrent
.3297	b0 0d		bcs $32a6			bcs		_SWCopyCurrent
.3299	20 f9 32	jsr $32f9			jsr 	RequiresConcretion
.329c	90 0e		bcc $32ac			bcc 	_SWWriteReference
.329e	20 5c 33	jsr $335c			jsr 	CheckSpecialConcretion
.32a1	b0 09		bcs $32ac			bcs 	_SWWriteReference
.32a3	20 0d 33	jsr $330d			jsr 	AllocateHardMemory
.32a6					_SWCopyCurrent:
.32a6	20 40 33	jsr $3340			jsr 	CopyStringToHardMemory
.32a9	4c b7 32	jmp $32b7			jmp 	_SWExit
.32ac					_SWWriteReference
.32ac	a0 00		ldy #$00			ldy 	#0
.32ae	a5 2a		lda $2a				lda 	temp0
.32b0	91 2c		sta ($2c),y			sta 	(temp1),y
.32b2	c8		iny				iny
.32b3	a5 2b		lda $2b				lda 	temp0+1
.32b5	91 2c		sta ($2c),y			sta 	(temp1),y
.32b7					_SWExit:
.32b7	68		pla				pla
.32b8	a8		tay				tay
.32b9	68		pla				pla
.32ba	60		rts				rts
.32bb					CheckOverwriteCurrent:
.32bb	a0 00		ldy #$00			ldy 	#0 						; get address of string being written to temp0
.32bd	b5 51		lda $51,x			lda 	esInt1+1,x
.32bf	85 2b		sta $2b				sta 	temp0+1
.32c1	b5 49		lda $49,x			lda 	esInt0+1,x
.32c3	85 2a		sta $2a				sta 	temp0
.32c5	b1 2a		lda ($2a),y			lda 	(temp0),y 				; get length of string being copied and save it.
.32c7	8d 1a 0c	sta $0c1a			sta 	srcStrLen
.32ca	b5 48		lda $48,x			lda 	esInt0,x 				; copy where the final address it being written to temp1.
.32cc	85 2c		sta $2c				sta 	temp1 					; e.g. if it is ax$ then temp1 will point to the ax$
.32ce	b5 50		lda $50,x			lda 	esInt1,x 				; data record + 5
.32d0	85 2d		sta $2d				sta 	temp1+1
.32d2	a0 01		ldy #$01			ldy 	#1 						; get the MSB of the address of string currently stored there.
.32d4	b1 2c		lda ($2c),y			lda 	(temp1),y
.32d6	c5 34		cmp $34				cmp 	highMemory+1 			; if < high memory then it cannot be something stored
.32d8	90 1b		bcc $32f5			bcc 	_COCFail 				; in hard memory.
.32da	a0 00		ldy #$00			ldy 	#0 						; copy target address - 1 into temp2
.32dc	b1 2c		lda ($2c),y			lda 	(temp1),y 				; when allocating hard memory, the overall size is
.32de	e9 01		sbc #$01			sbc 	#1 						; in the previous byte.
.32e0	85 2e		sta $2e				sta 	temp2
.32e2	c8		iny				iny
.32e3	b1 2c		lda ($2c),y			lda 	(temp1),y
.32e5	e9 00		sbc #$00			sbc 	#0
.32e7	85 2f		sta $2f				sta 	temp2+1
.32e9	a0 00		ldy #$00			ldy 	#0 						; how large is this physical chunk.
.32eb	b1 2e		lda ($2e),y			lda 	(temp2),y
.32ed	38		sec				sec  							; maximum character capacity.
.32ee	e9 02		sbc #$02			sbc 	#2
.32f0	cd 1a 0c	cmp $0c1a			cmp 	srcStrLen 				; if >= the required length
.32f3	b0 02		bcs $32f7			bcs 	_COCCanReuse
.32f5					_COCFail:
.32f5	18		clc				clc
.32f6	60		rts				rts
.32f7					_COCCanReuse:
.32f7	38		sec				sec
.32f8	60		rts				rts
.32f9					RequiresConcretion:
.32f9	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.32fb	c5 34		cmp $34				cmp 	highMemory+1 			; if >= high memory it is concreted
.32fd	b0 0a		bcs $3309			bcs 	_RCSucceed 				; so it needs concreting again - duplication.
.32ff	a5 3a		lda $3a				lda 	softMemAlloc+1 			; have we allocated any soft memory yet ?
.3301	f0 08		beq $330b			beq 	_RCFail 				; if not, this cannot be soft memory.
.3303	a5 2b		lda $2b				lda 	temp0+1 				; get MSB of address of string to be written
.3305	c5 3a		cmp $3a				cmp 	softMemAlloc+1 			; if >= soft mem alloc it is either soft
.3307	90 02		bcc $330b			bcc 	_RCFail 				; so concreting
.3309					_RCSucceed:
.3309	38		sec				sec
.330a	60		rts				rts
.330b					_RCFail:
.330b	18		clc				clc
.330c	60		rts				rts
.330d					AllocateHardMemory:
.330d	98		tya				tya
.330e	48		pha				pha
.330f	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; characters in string
.3312	69 0a		adc #$0a			adc 	#1+1+8 					; one for hard memory size, one for string size, extra for expansion
.3314	b0 04		bcs $331a			bcs 	_AHMSetMax 				; max out that amount.
.3316	c9 fe		cmp #$fe			cmp 	#MaxStringSize+2
.3318	90 02		bcc $331c			bcc 	_AHMIsOkay
.331a					_AHMSetMax:
.331a	a9 fe		lda #$fe			lda 	#MaxStringSize+2
.331c					_AHMIsOkay:
.331c	48		pha				pha	 							; save size to be allocated
.331d	49 ff		eor #$ff			eor 	#$FF 					; complement and add to high Memory
.331f	38		sec				sec  							; and copy result to TOS as target address.
.3320	65 33		adc $33				adc 	highMemory
.3322	85 33		sta $33				sta 	highMemory
.3324	a5 34		lda $34				lda 	highMemory+1
.3326	69 ff		adc #$ff			adc 	#$FF
.3328	85 34		sta $34				sta 	highMemory+1
.332a	a0 00		ldy #$00			ldy 	#0 						; Y = 0
.332c	68		pla				pla 							; get the total size of the storage block
.332d	91 33		sta ($33),y			sta 	(highMemory),y 			; and set it
.332f	18		clc				clc
.3330	a5 33		lda $33				lda		highMemory 				; point the target address to the byte after this.
.3332	69 01		adc #$01			adc 	#1
.3334	91 2c		sta ($2c),y			sta 	(temp1),y
.3336	a5 34		lda $34				lda 	highMemory+1
.3338	69 00		adc #$00			adc 	#0
.333a	c8		iny				iny
.333b	91 2c		sta ($2c),y			sta 	(temp1),y
.333d	68		pla				pla
.333e	a8		tay				tay
.333f	60		rts				rts
.3340					CopyStringToHardMemory:
.3340	98		tya				tya
.3341	48		pha				pha
.3342	a0 00		ldy #$00			ldy 	#0 						; copy target address to temp2
.3344	b1 2c		lda ($2c),y			lda 	(temp1),y
.3346	85 2e		sta $2e				sta 	temp2
.3348	c8		iny				iny
.3349	b1 2c		lda ($2c),y			lda 	(temp1),y
.334b	85 2f		sta $2f				sta 	temp2+1
.334d	ac 1a 0c	ldy $0c1a			ldy 	srcStrLen 				; copy this + 1 characters, (length too) hence $FF compare
.3350					_CSTHMLoop:
.3350	b1 2a		lda ($2a),y			lda 	(temp0),y
.3352	91 2e		sta ($2e),y			sta 	(temp2),y
.3354	88		dey				dey
.3355	c0 ff		cpy #$ff			cpy 	#$FF 					; this does the +1
.3357	d0 f7		bne $3350			bne 	_CSTHMLoop
.3359	68		pla				pla
.335a	a8		tay				tay
.335b	60		rts				rts
.335c					CheckSpecialConcretion:
.335c	ad 1a 0c	lda $0c1a			lda 	srcStrLen 				; check string is null e.g. length = 0
.335f	f0 02		beq $3363			beq 	_CSCNullString
.3361	18		clc				clc
.3362	60		rts				rts
.3363					_CSCNullString:
.3363	a9 00		lda #$00			lda 	#0 						; by always returning this address we don't waste
.3365	8d ce 0a	sta $0ace			sta 	NullString		 		; storage on null strings.
.3368	a9 ce		lda #$ce			lda 	#(NullString) & $FF
.336a	85 2a		sta $2a				sta 	temp0
.336c	a9 0a		lda #$0a			lda 	#(NullString) >> 8
.336e	85 2b		sta $2b				sta 	1+(temp0)
.3370	38		sec				sec
.3371	60		rts				rts

;******  Return to file: string/string.asm

.3372					stringHandler:
.3372	7c 75 33	jmp ($3375,x)			jmp 	(stringVectors,x)
.3375					stringVectors:
>3375	d5 30					.word StringChrs           ; index 0
>3377	d1 31					.word StrClone             ; index 2
>3379	49 31					.word StringConcat         ; index 4
>337b	e4 30					.word StringNull           ; index 6
>337d	00 31					.word STRCompare           ; index 8
>337f	f7 31					.word CaseString           ; index 10
>3381	3c 32					.word StringSubstring      ; index 12
>3383	90 32					.word StringWrite          ; index 14

;******  Return to file: basic.asm

.3385					section_end_string:
.3385					section_start_tokeniser:

;******  Processing file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/detokenise.asm

.0c1b					deTokeniseVector:
>0c1b							.fill 	2
.0c1d					lastCharacterClass:
>0c1d							.fill 	1
.0c1e					indent:
>0c1e							.fill 	1
.3385					ListLine:
.3385	48		pha				pha
.3386	a9 b3		lda #$b3			lda 	#(deTokenPrint) & $FF
.3388	8d 1b 0c	sta $0c1b			sta 	deTokeniseVector
.338b	a9 34		lda #$34			lda 	#(deTokenPrint) >> 8
.338d	8d 1c 0c	sta $0c1c			sta 	1+(deTokeniseVector)
.3390	68		pla				pla
.3391					Detokenise:
.3391	18		clc				clc
.3392	69 06		adc #$06			adc 	#6
.3394	8d 1e 0c	sta $0c1e			sta 	indent
.3397	a9 ff		lda #$ff			lda 	#$FF 					; last thing printed is a dummy value.
.3399	8d 1d 0c	sta $0c1d			sta 	lastCharacterClass
.339c	a2 02		ldx #$02			ldx 	#2
.339e	20 52 2f	jsr $2f52			jsr 	MInt32False
.33a1	a0 01		ldy #$01			ldy 	#1 						; copy line number to stack,2 (as using stack 0,1)
.33a3	b1 28		lda ($28),y			lda 	(codePtr),y
.33a5	95 48		sta $48,x			sta 	esInt0,x
.33a7	c8		iny				iny
.33a8	b1 28		lda ($28),y			lda 	(codePtr),y
.33aa	95 50		sta $50,x			sta 	esInt1,x
.33ac	a9 84		lda #$84			lda 	#LTYLineNumber
.33ae	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.33b1	a9 0a		lda #$0a			lda 	#10 					; base 10
.33b3	20 52 34	jsr $3452			jsr 	DTPrintInteger 			; print as integer.
.33b6	a0 00		ldy #$00			ldy 	#0 						; get length
.33b8	b1 2a		lda ($2a),y			lda 	(temp0),y 				; into X
.33ba	aa		tax				tax
.33bb					_DTPadOut:
.33bb	a9 20		lda #$20			lda 	#" " 					; pad out to indent.
.33bd	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.33c0	e8		inx				inx
.33c1	ec 1e 0c	cpx $0c1e			cpx 	indent
.33c4	d0 f5		bne $33bb			bne 	_DTPadOut
.33c6	a0 03		ldy #$03			ldy 	#3 						; start position.
.33c8					_DTListLoop
.33c8	b1 28		lda ($28),y			lda 	(codePtr),y
.33ca	c9 85		cmp #$85			cmp 	#TOK_STR 				; Inline string.
.33cc	f0 58		beq $3426			beq 	_DTIsString
.33ce	c9 84		cmp #$84			cmp 	#TOK_FPC 				; Floating point
.33d0	f0 7c		beq $344e			beq 	_DTIsFloat
.33d2	c9 c5		cmp #$c5			cmp 	#TKW_AMP 				; & hex marker
.33d4	f0 16		beq $33ec			beq 	_DTHexConstant
.33d6	c9 80		cmp #$80			cmp 	#TOK_EOL 				; End of Line
.33d8	d0 06		bne $33e0			bne 	_DTNotEnd
.33da	a9 ff		lda #$ff			lda 	#255 					; print CR
.33dc	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.33df	60		rts				rts
.33e0					_DTNotEnd:
.33e0	c9 00		cmp #$00			cmp 	#0
.33e2	30 36		bmi $341a			bmi 	_DTIsToken
.33e4	c9 40		cmp #$40			cmp 	#$40
.33e6	90 38		bcc $3420			bcc 	_DTIsIdentifier
.33e8	a9 0a		lda #$0a			lda 	#10 					; this is the base
.33ea	d0 08		bne $33f4			bne 	_DTConstant
.33ec					_DTHexConstant:
.33ec	a9 26		lda #$26			lda 	#"&"
.33ee	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.33f1	c8		iny				iny
.33f2	a9 10		lda #$10			lda 	#16
.33f4					_DTConstant:
.33f4	48		pha				pha
.33f5	a9 00		lda #$00			lda 	#0 							; now constant, may need spaces
.33f7	20 cf 34	jsr $34cf			jsr 	DTSwitchMode
.33fa	a9 86		lda #$86			lda 	#LTYConstant
.33fc	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.33ff	a2 02		ldx #$02			ldx 	#2
.3401	8a		txa				txa
.3402	a2 0a		ldx #$0a		ldx	#10
.3404	20 bc 30	jsr $30bc		jsr	mainHandler
.3407	aa		tax				tax
.3408	20 25 1d	jsr $1d25			jsr 	TOSToTemp0
.340b	68		pla				pla
.340c	85 32		sta $32				sta 	tempShort
.340e	98		tya				tya
.340f	48		pha				pha
.3410	a5 32		lda $32				lda 	tempShort
.3412	20 52 34	jsr $3452			jsr 	DTPrintInteger
.3415	68		pla				pla
.3416	a8		tay				tay
.3417	4c c8 33	jmp $33c8			jmp 	_DTListLoop
.341a					_DTIsToken:
.341a	20 28 35	jsr $3528			jsr 	DTDecodeToken
.341d	4c c8 33	jmp $33c8			jmp 	_DTListLoop
.3420					_DTIsIdentifier:
.3420	20 e1 34	jsr $34e1			jsr 	DTIdentifier
.3423	4c c8 33	jmp $33c8			jmp 	_DTListLoop
.3426					_DTIsString:
.3426	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3428	20 cf 34	jsr $34cf			jsr 	DTSwitchMode
.342b	a9 81		lda #$81			lda 	#LTYString
.342d	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.3430	a9 22		lda #$22			lda 	#'"'						; open quote
.3432	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.3435	a2 02		ldx #$02			ldx 	#2 							; evaluate string to TOS2.
.3437	8a		txa				txa
.3438	a2 0a		ldx #$0a		ldx	#10
.343a	20 bc 30	jsr $30bc		jsr	mainHandler
.343d	aa		tax				tax
.343e	20 25 1d	jsr $1d25			jsr 	TOSToTemp0
.3441	a9 00		lda #$00			lda 	#0 							; don't capitalise.
.3443	20 64 34	jsr $3464			jsr 	DTPrintLengthPrefix
.3446	a9 22		lda #$22			lda 	#'"'
.3448	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.344b	4c c8 33	jmp $33c8			jmp 	_DTListLoop
.344e					_DTIsFloat:
>344e	db						.byte 	$DB
.344f	4c 4e 34	jmp $344e			jmp 	_DTIsFloat

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/dtprint.asm

.0c1f					tPrintCount:
>0c1f							.fill 	1
.3452					DTPrintInteger:
.3452	48		pha				pha
.3453	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.3455	85 2a		sta $2a				sta 	temp0
.3457	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.3459	85 2b		sta $2b				sta 	1+(temp0)
.345b	68		pla				pla
.345c	a8		tay				tay
.345d	8a		txa				txa
.345e	a2 0c		ldx #$0c		ldx	#12
.3460	20 bc 30	jsr $30bc		jsr	mainHandler
.3463	aa		tax				tax
.3464					DTPrintLengthPrefix:
.3464	aa		tax				tax
.3465	98		tya				tya
.3466	48		pha				pha
.3467	a0 00		ldy #$00			ldy 	#0
.3469	b1 2a		lda ($2a),y			lda 	(temp0),y
.346b	8d 1f 0c	sta $0c1f			sta 	tPrintCount
.346e	f0 1b		beq $348b			beq 	_DTPLPExit
.3470					_DTPLPLoop:
.3470	c8		iny				iny
.3471	b1 2a		lda ($2a),y			lda 	(temp0),y
.3473	29 7f		and #$7f			and 	#$7F
.3475	e0 00		cpx #$00			cpx 	#0
.3477	f0 0a		beq $3483			beq 	_DTPLPNoCase
.3479	c9 41		cmp #$41			cmp 	#"A"
.347b	90 06		bcc $3483			bcc 	_DTPLPNoCase
.347d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.347f	b0 02		bcs $3483			bcs 	_DTPLPNoCase
.3481	49 20		eor #$20			eor 	#"A"^"a"
.3483					_DTPLPNoCase
.3483	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.3486	ce 1f 0c	dec $0c1f			dec 	tPrintCount
.3489	d0 e5		bne $3470			bne 	_DTPLPLoop
.348b					_DTPLPExit:
.348b	68		pla				pla
.348c	a8		tay				tay
.348d	60		rts				rts
.348e					ListOutputCharacter:
.348e	85 32		sta $32				sta 	tempShort
.3490	48		pha				pha
.3491	8a		txa				txa
.3492	48		pha				pha
.3493	98		tya				tya
.3494	48		pha				pha
.3495	a5 32		lda $32				lda 	tempShort
.3497	c9 20		cmp #$20			cmp 	#32
.3499	b0 0c		bcs $34a7			bcs		_LOCHiBit
.349b	09 40		ora #$40			ora 	#64
.349d	c9 40		cmp #$40			cmp 	#64
.349f	f0 06		beq $34a7			beq 	_LOCHiBit
.34a1	c9 5b		cmp #$5b			cmp 	#65+26
.34a3	b0 02		bcs $34a7			bcs 	_LOCHiBit
.34a5	69 20		adc #$20			adc 	#32
.34a7					_LOCHiBit:
.34a7	20 b0 34	jsr $34b0			jsr 	_LOCCallVector
.34aa	68		pla				pla
.34ab	a8		tay				tay
.34ac	68		pla				pla
.34ad	aa		tax				tax
.34ae	68		pla				pla
.34af					_LOCExit:
.34af	60		rts				rts
.34b0					_LOCCallVector:
.34b0	6c 1b 0c	jmp ($0c1b)			jmp 	(deTokeniseVector)
.34b3					deTokenPrint:
.34b3	c9 00		cmp #$00			cmp 	#0
.34b5	30 06		bmi $34bd			bmi 	_dtpInk
.34b7	a2 16		ldx #$16		ldx	#22
.34b9	20 1e 14	jsr $141e		jsr	deviceHandler
.34bc	60		rts				rts
.34bd	c9 ff		cmp #$ff	_dtpInk:cmp 	#255
.34bf	f0 08		beq $34c9			beq 	_dtpCR
.34c1	29 07		and #$07			and 	#7
.34c3	a2 08		ldx #$08		ldx	#8
.34c5	20 1e 14	jsr $141e		jsr	deviceHandler
.34c8	60		rts				rts
.34c9					_dtpCR:
.34c9	a2 04		ldx #$04		ldx	#4
.34cb	20 1e 14	jsr $141e		jsr	deviceHandler
.34ce	60		rts				rts
.34cf					DTSwitchMode:
.34cf	cd 1d 0c	cmp $0c1d			cmp 	LastCharacterClass
.34d2	f0 04		beq $34d8			beq 	_DTSMNoChange
.34d4	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.34d7					_DTSMExit:
.34d7	60		rts				rts
.34d8					_DTSMNoChange:
.34d8	c9 01		cmp #$01			cmp 	#1
.34da	f0 fb		beq $34d7			beq 	_DTSMExit
.34dc	a9 20		lda #$20			lda 	#" "
.34de	4c 8e 34	jmp $348e			jmp 	ListOutputCharacter

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/identifier.asm

.34e1					DTIdentifier:
.34e1	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.34e3	20 cf 34	jsr $34cf			jsr 	DTSwitchMode
.34e6	a9 87		lda #$87			lda 	#LTYIdentifier
.34e8	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.34eb					_DTILoop:
.34eb	b1 28		lda ($28),y			lda 	(codePtr),y 				; output main bit of identifier.
.34ed	c9 2d		cmp #$2d			cmp 	#"-"						; make - back to _
.34ef	d0 02		bne $34f3			bne 	_DTINotUS
.34f1	a9 5f		lda #$5f			lda 	#"_"
.34f3					_DTINotUS:
.34f3	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.34f6	c8		iny				iny
.34f7	b1 28		lda ($28),y			lda 	(codePtr),y 				; until end identifier marker.
.34f9	c9 3a		cmp #$3a			cmp 	#$3A
.34fb	90 ee		bcc $34eb			bcc 	_DTILoop
.34fd	c8		iny				iny
.34fe	c9 3a		cmp #$3a			cmp 	#$3A 						; is it integer non array
.3500	f0 25		beq $3527			beq 	_DTIExit 					; no postfix.
.3502	48		pha				pha
.3503	a9 01		lda #$01			lda  	#1 							; it ends in punctuation
.3505	8d 1d 0c	sta $0c1d			sta 	LastCharacterClass
.3508	a9 82		lda #$82			lda 	#LTYPunctuation
.350a	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.350d	68		pla				pla
.350e	c9 3b		cmp #$3b			cmp 	#$3B
.3510	f0 10		beq $3522			beq 	_DTIArray
.3512	4a		lsr a				lsr 	a 							; array flag in C
.3513	08		php				php
.3514	49 1e		eor #$1e			eor 	#$3C/2 						; check if $
.3516	f0 02		beq $351a			beq 	_DTIDollar
.3518	a9 07		lda #$07			lda 	#"$"^"#" 					; this if #, 0 if $
.351a					_DTIDollar:
.351a	49 24		eor #$24			eor 	#"$"
.351c	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.351f	28		plp				plp
.3520	90 05		bcc $3527			bcc 	_DTIExit
.3522					_DTIArray:
.3522	a9 28		lda #$28			lda 	#"("
.3524	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.3527					_DTIExit:
.3527	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/detokenise/token.asm

.3528					DTDecodeToken:
.3528	a2 00		ldx #$00			ldx 	#0 							; table number to use
.352a	b1 28		lda ($28),y			lda 	(codePtr),y
.352c	c9 84		cmp #$84			cmp 	#$84
.352e	b0 05		bcs $3535			bcs 	_DTNotShift
.3530	29 03		and #$03			and 	#3 							; get the shift 1..3
.3532	0a		asl a				asl 	a 							; put 2 x in X
.3533	aa		tax				tax
.3534	c8		iny				iny
.3535					_DTNotShift:
.3535	bd 35 38	lda $3835,x			lda 	TokenTableAddress,x 		; get the token table to use to decode it.
.3538	85 2a		sta $2a				sta 	temp0 						; point into temp0
.353a	bd 36 38	lda $3836,x			lda 	TokenTableAddress+1,x
.353d	85 2b		sta $2b				sta 	temp0+1
.353f	b1 28		lda ($28),y			lda 	(codePtr),y 				; get the token value.
.3541	c8		iny				iny 								; consume it.
.3542	aa		tax				tax
.3543	98		tya				tya
.3544	48		pha				pha
.3545					_DTFindText:
.3545	e0 86		cpx #$86			cpx 	#$86 						; finished ?
.3547	f0 11		beq $355a			beq 	_DTFoundText
.3549	ca		dex				dex
.354a	a0 00		ldy #$00			ldy 	#0
.354c	38		sec				sec
.354d	b1 2a		lda ($2a),y			lda 	(temp0),y
.354f	65 2a		adc $2a				adc 	temp0
.3551	85 2a		sta $2a				sta 	temp0
.3553	90 f0		bcc $3545			bcc 	_DTFindText
.3555	e6 2b		inc $2b				inc 	temp0+1
.3557	4c 45 35	jmp $3545			jmp 	_DTFindText
.355a					_DTFoundText:
.355a	a0 01		ldy #$01			ldy 	#1 							; get first character
.355c	b1 2a		lda ($2a),y			lda 	(temp0),y
.355e	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.3560	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.3562	90 11		bcc $3575			bcc 	_DTIsPunctuation
.3564	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3566	b0 0d		bcs $3575			bcs 	_DTIsPunctuation
.3568	a9 00		lda #$00			lda 	#0 							; now text, may need spaces
.356a	20 cf 34	jsr $34cf			jsr 	DTSwitchMode
.356d	a9 83		lda #$83			lda 	#LTYKeyword
.356f	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.3572	4c 7f 35	jmp $357f			jmp 	_DTPrint
.3575					_DTIsPunctuation:
.3575	a9 01		lda #$01			lda 	#1 							; now punctuation, may need spaces
.3577	20 cf 34	jsr $34cf			jsr 	DTSwitchMode
.357a	a9 82		lda #$82			lda 	#LTYPunctuation
.357c	20 8e 34	jsr $348e			jsr 	ListOutputCharacter
.357f					_DTPrint:
.357f	a9 01		lda #$01			lda 	#1 							; fix case.
.3581	20 64 34	jsr $3464			jsr 	DTPrintLengthPrefix 		; print it out.
.3584	a0 00		ldy #$00			ldy 	#0
.3586	b1 2a		lda ($2a),y			lda 	(temp0),y
.3588	a8		tay				tay
.3589	b1 2a		lda ($2a),y			lda 	(temp0),y
.358b	29 7f		and #$7f			and 	#$7F 						; will have bit 7 set.
.358d	c9 41		cmp #$41			cmp 	#"A" 						; check for punctuation.
.358f	90 04		bcc $3595			bcc 	_DTIsNowPunctuation
.3591	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3593	90 05		bcc $359a			bcc 	_DTPExit
.3595					_DTIsNowPunctuation:
.3595	a9 01		lda #$01			lda 	#1
.3597	8d 1d 0c	sta $0c1d			sta		LastCharacterClass
.359a					_DTPExit:
.359a	68		pla				pla
.359b	a8		tay				tay
.359c	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/search.asm

.0c20					currentSet:
>0c20							.fill 	1
.359d					TokenSearch:
.359d	8a		txa				txa
.359e	48		pha				pha
.359f	98		tya				tya
.35a0	48		pha				pha
.35a1	a9 00		lda #$00			lda 	#0
.35a3	8d 20 0c	sta $0c20			sta 	currentSet
.35a6					_TSLoop:
.35a6	ad 20 0c	lda $0c20			lda 	currentSet 					; 2 x currentset in X
.35a9	0a		asl a				asl 	a
.35aa	aa		tax				tax
.35ab	bd 35 38	lda $3835,x			lda 	TokenTableAddress,x 		; set temp0 to the table address
.35ae	85 2a		sta $2a				sta 	temp0
.35b0	bd 36 38	lda $3836,x			lda 	TokenTableAddress+1,x
.35b3	85 2b		sta $2b				sta 	temp0+1
.35b5	20 dc 35	jsr $35dc			jsr 	TokenSearchOne 				; search one table
.35b8	b0 0d		bcs $35c7			bcs 	_TSFound 					; found a token.
.35ba	ee 20 0c	inc $0c20			inc 	currentSet 					; next set
.35bd	ad 20 0c	lda $0c20			lda 	currentSet
.35c0	c9 04		cmp #$04			cmp 	#4
.35c2	d0 e2		bne $35a6			bne 	_TSLoop 					; back if not done all four.
.35c4	18		clc				clc 								; clear carry and exit
.35c5	90 10		bcc $35d7			bcc 	_TSExit
.35c7					_TSFound:
.35c7	48		pha				pha 								; save token
.35c8	ad 20 0c	lda $0c20			lda 	currentSet					; if set zero no shift
.35cb	f0 05		beq $35d2			beq 	_TSNoShift
.35cd	09 80		ora #$80			ora 	#$80 						; Write as $81-$83
.35cf	20 8b 36	jsr $368b			jsr 	TokenWrite
.35d2					_TSNoShift:
.35d2	68		pla				pla 								; get token back
.35d3	20 8b 36	jsr $368b			jsr 	TokenWrite 					; write it
.35d6	38		sec				sec 								; carry set indicating success
.35d7					_TSExit:
.35d7	68		pla				pla
.35d8	a8		tay				tay
.35d9	68		pla				pla
.35da	aa		tax				tax
.35db	60		rts				rts
.35dc					TokenSearchOne:
.35dc	a2 86		ldx #$86			ldx 	#$86 						; current token being tested.
.35de					_TSOLoop:
.35de	a0 00		ldy #$00			ldy 	#0
.35e0	b1 2a		lda ($2a),y			lda 	(temp0),y 					; get length of token
.35e2	f0 26		beq $360a			beq 	_TSOFail 					; if zero, end of table
.35e4	cd cf 0a	cmp $0acf			cmp 	convertBuffer 				; length is the same, compare the text matches.
.35e7	f0 11		beq $35fa			beq 	_TSOCheckText
.35e9					_TSONext:
.35e9	e8		inx				inx 								; bump token
.35ea	a0 00		ldy #$00			ldy 	#0							; get length
.35ec	b1 2a		lda ($2a),y			lda 	(temp0),y
.35ee	38		sec				sec
.35ef	65 2a		adc $2a				adc 	temp0 						; add to temp0 + 1
.35f1	85 2a		sta $2a				sta 	temp0
.35f3	90 e9		bcc $35de			bcc 	_TSOLoop
.35f5	e6 2b		inc $2b				inc 	temp0+1
.35f7	4c de 35	jmp $35de			jmp 	_TSOLoop
.35fa					_TSOCheckText:
.35fa	a8		tay				tay 								; compare length downto 1.
.35fb					_TSOCheckLoop:
.35fb	b1 2a		lda ($2a),y			lda 	(temp0),y 					; use EOR to compare
.35fd	59 cf 0a	eor $0acf,y			eor 	convertBuffer,y
.3600	29 7f		and #$7f			and 	#$7F 						; ignore bit 7
.3602	d0 e5		bne $35e9			bne 	_TSONext 					; different goto next.
.3604	88		dey				dey 								; do all
.3605	d0 f4		bne $35fb			bne 	_TSOCheckLoop
.3607	8a		txa				txa 								; return token in A and carry set
.3608	38		sec				sec
.3609	60		rts				rts
.360a					_TSOFail:
.360a	18		clc				clc
.360b	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/test.asm

.360c					TokTest:
.360c	a2 ff		ldx #$ff				ldx 	#$FF
.360e	9a		txs					txs
.360f	a9 2c		lda #$2c			lda 	#(TokenText1) & $FF
.3611	85 28		sta $28				sta 	codePtr
.3613	a9 36		lda #$36			lda 	#(TokenText1) >> 8
.3615	85 29		sta $29				sta 	1+(codePtr)
.3617	20 2c 36	jsr $362c				jsr 	Tokenise
.361a	a2 00		ldx #$00	TokStop:	ldx 	#0
.361c	bd 2c 36	lda $362c,x	_TokCheck:	lda 	TokenBytes1,x
.361f	dd 24 0c	cmp $0c24,x				cmp 	tokenBuffer,x
.3622	d0 fe		bne $3622	_TokFail:	bne 	_TokFail
.3624	e8		inx					inx
.3625	c9 80		cmp #$80				cmp 	#$80
.3627	d0 f3		bne $361c				bne 	_TokCheck
.3629	4c ff ff	jmp $ffff				jmp 	$FFFF

;******  Processing file: tokeniser/tokenise/../../generated/toktest.inc

.362c					TokenText1:
.362c					TokenBytes1:

;******  Return to file: tokeniser/tokenise/test.asm


;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokenise.asm

.0c21					tokenHeader:
>0c21							.fill 	3
.0c24					tokenBuffer:
>0c24							.fill 	256
.0d24					tokenBufferIndex:
>0d24							.fill 	1
.362c					Tokenise:
.362c	20 a4 36	jsr $36a4			jsr 	TokeniseMakeASCIIZ 			; convert to ASCIIZ string.
.362f					TokeniseASCIIZ:
.362f	20 b5 36	jsr $36b5			jsr 	TokeniseFixCase 			; remove controls and lower case outside quotes.
.3632	a9 00		lda #$00			lda 	#0 							; reset the token buffer index
.3634	8d 24 0d	sta $0d24			sta 	tokenBufferIndex
.3637	a8		tay				tay 								; start pointer
.3638	a9 80		lda #$80			lda 	#$80 						; empty token buffer ($80 ends it)
.363a	8d 24 0c	sta $0c24			sta 	tokenBuffer
.363d					_TokLoop:
.363d	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next character
.363f	f0 46		beq $3687			beq 	_TokExit 					; if zero, then exit.
.3641	c8		iny				iny 								; skip over spaces.
.3642	c9 20		cmp #$20			cmp 	#" "
.3644	f0 f7		beq $363d			beq 	_TokLoop
.3646	88		dey				dey 								; point back to character.
.3647	c9 26		cmp #$26			cmp 	#"&"						; Hexadecimal constant.
.3649	f0 18		beq $3663			beq 	_TokHexConst
.364b	c9 22		cmp #$22			cmp 	#'"'						; Quoted String
.364d	f0 23		beq $3672			beq 	_TokQString
.364f	c9 5b		cmp #$5b			cmp 	#"Z"+1 						; > 'Z' is punctuation
.3651	b0 26		bcs $3679			bcs 	_TokPunctuation
.3653	c9 41		cmp #$41			cmp 	#"A" 						; A..Z identifier
.3655	b0 29		bcs $3680			bcs 	_TokIdentifier
.3657	c9 3a		cmp #$3a			cmp 	#"9"+1
.3659	b0 1e		bcs $3679			bcs 	_TokPunctuation 			; between 9 and A exclusive, punctuation
.365b	c9 30		cmp #$30			cmp 	#"0"
.365d	90 1a		bcc $3679			bcc 	_TokPunctuation 			; < 0, punctuation.
.365f	a9 0a		lda #$0a			lda 	#10  						; 0..9 constant in base 10.
.3661	d0 08		bne $366b			bne 	_TokConst
.3663					_TokHexConst:
.3663	c8		iny				iny									; consume token.
.3664	a9 c5		lda #$c5			lda 	#TKW_AMP 					; Write ampersand token out
.3666	20 8b 36	jsr $368b			jsr 	TokenWrite
.3669	a9 10		lda #$10			lda 	#16
.366b					_TokConst:
.366b	20 73 37	jsr $3773			jsr 	TokeniseInteger
.366e	b0 cd		bcs $363d			bcs 	_TokLoop
.3670	90 17		bcc $3689			bcc 	_TokFail
.3672					_TokQString:
.3672	20 09 38	jsr $3809			jsr 	TokeniseString
.3675	b0 c6		bcs $363d			bcs 	_TokLoop
.3677	90 10		bcc $3689			bcc 	_TokFail
.3679					_TokPunctuation:
.3679	20 e8 37	jsr $37e8			jsr 	TokenisePunctuation
.367c	b0 bf		bcs $363d			bcs 	_TokLoop
.367e	90 09		bcc $3689			bcc 	_TokFail
.3680					_TokIdentifier:
.3680	20 e4 36	jsr $36e4			jsr 	TokeniseIdentifier
.3683	b0 b8		bcs $363d			bcs 	_TokLoop
.3685	90 02		bcc $3689			bcc 	_TokFail
.3687					_TokExit:
.3687	38		sec				sec
.3688	60		rts				rts
.3689					_TokFail:
.3689	18		clc				clc
.368a	60		rts				rts
.368b					TokenWrite:
.368b	85 32		sta $32				sta 	tempShort 					; save XA
.368d	48		pha				pha
.368e	8a		txa				txa
.368f	48		pha				pha
.3690	a5 32		lda $32				lda 	tempShort
.3692	ae 24 0d	ldx $0d24			ldx 	tokenBufferIndex 			; geet index
.3695	9d 24 0c	sta $0c24,x			sta 	tokenBuffer,x 				; write byte to buffer
.3698	a9 80		lda #$80			lda 	#TOK_EOL 					; pre-emptively write EOL marker after
.369a	9d 25 0c	sta $0c25,x			sta 	tokenBuffer+1,x
.369d	ee 24 0d	inc $0d24			inc 	tokenBufferIndex 			; bump index
.36a0	68		pla				pla
.36a1	aa		tax				tax
.36a2	68		pla				pla
.36a3	60		rts				rts
.36a4					TokeniseMakeASCIIZ:
.36a4	a0 00		ldy #$00			ldy 	#0							; get length of string.
.36a6	b1 28		lda ($28),y			lda 	(codePtr),y
.36a8	a8		tay				tay
.36a9	c8		iny				iny 								; +1, the NULL goes here.
.36aa	a9 00		lda #$00			lda 	#0
.36ac	91 28		sta ($28),y			sta 	(codePtr),y 				; write the trailing NULL.
.36ae	e6 28		inc $28				inc 	codePtr 					; bump the pointer.
.36b0	d0 02		bne $36b4			bne 	_TMKAExit
.36b2	e6 29		inc $29				inc 	codePtr+1
.36b4					_TMKAExit:
.36b4	60		rts				rts
.36b5					TokeniseFixCase:
.36b5	a0 00		ldy #$00			ldy 	#0 							; position in buffer.
.36b7	a2 01		ldx #$01			ldx 	#1 							; bit 0 of this is 'in quotes'
.36b9					_TFCFlipQ:
.36b9	8a		txa				txa
.36ba	49 01		eor #$01			eor 	#1
.36bc	aa		tax				tax
.36bd					_TFCLoop:
.36bd	b1 28		lda ($28),y			lda 	(codePtr),y 				; get character
.36bf	f0 22		beq $36e3			beq 	_TFCExit 					; if zero exit.
.36c1	c9 20		cmp #$20			cmp 	#32 						; if control
.36c3	90 1a		bcc $36df			bcc 	_TFCControl
.36c5	c8		iny				iny 								; preconsume
.36c6	c9 22		cmp #$22			cmp 	#'"'
.36c8	f0 ef		beq $36b9			beq 	_TFCFlipQ
.36ca	c9 61		cmp #$61			cmp 	#"a"						; check if L/C
.36cc	90 ef		bcc $36bd			bcc 	_TFCLoop
.36ce	c9 7b		cmp #$7b			cmp 	#"z"+1
.36d0	b0 eb		bcs $36bd			bcs 	_TFCLoop
.36d2	e0 00		cpx #$00			cpx 	#0 							; in quotes, if so, leave alone.
.36d4	d0 e7		bne $36bd			bne 	_TFCLoop
.36d6	88		dey				dey
.36d7	49 20		eor #$20			eor 	#"A"^"a"					; make U/C
.36d9					_TFCWrite:
.36d9	91 28		sta ($28),y			sta 	(codePtr),y
.36db	c8		iny				iny
.36dc	4c bd 36	jmp $36bd			jmp 	_TFCLoop
.36df					_TFCControl:
.36df	a9 20		lda #$20			lda 	#" "
.36e1	d0 f6		bne $36d9			bne 	_TFCWrite
.36e3					_TFCExit:
.36e3	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokident.asm

.36e4					TokeniseIdentifier:
.36e4	a2 00		ldx #$00			ldx 	#0
.36e6					_TICopyID:
.36e6	b1 28		lda ($28),y			lda 	(codePtr),y					; get characters
.36e8	c9 5f		cmp #$5f			cmp 	#"_" 						; underscore converted to minus internally.
.36ea	f0 16		beq $3702			beq 	_TICopyUnderscore
.36ec	c9 2e		cmp #$2e			cmp 	#"."
.36ee	f0 14		beq $3704			beq 	_TICopyIn
.36f0	c9 30		cmp #$30			cmp 	#"0"
.36f2	90 1b		bcc $370f			bcc 	_TIEndCopy
.36f4	c9 3a		cmp #$3a			cmp 	#"9"+1
.36f6	90 0c		bcc $3704			bcc 	_TICopyIn
.36f8	c9 41		cmp #$41			cmp 	#"A"
.36fa	90 13		bcc $370f			bcc 	_TIEndCopy
.36fc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.36fe	b0 0f		bcs $370f			bcs		_TIEndCopy
.3700	90 02		bcc $3704			bcc 	_TICopyIn
.3702					_TICopyUnderScore:
.3702	a9 2d		lda #$2d			lda 	#"-"						; _ is mapped to -
.3704					_TICopyIn:
.3704	e8		inx				inx 								; write into buffer in 7 bit ASCII form
.3705	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.3708	8e cf 0a	stx $0acf			stx 	convertBuffer
.370b	c8		iny				iny 								; next character
.370c	4c e6 36	jmp $36e6			jmp 	_TICopyID 					; loop round
.370f					_TIEndCopy:
.370f	a9 24		lda #$24			lda 	#"$"
.3711	20 66 37	jsr $3766			jsr 	TIDCheckCopy
.3714	a9 23		lda #$23			lda 	#"#"
.3716	20 66 37	jsr $3766			jsr 	TIDCheckCopy
.3719	a9 28		lda #$28			lda 	#"("
.371b	20 66 37	jsr $3766			jsr 	TIDCheckCopy
.371e	20 9d 35	jsr $359d			jsr 	TokenSearch 				; is it a token
.3721	b0 41		bcs $3764			bcs 	_TIExit 					; if so, then exit.
.3723	98		tya				tya
.3724	48		pha				pha
.3725	a0 3a		ldy #$3a			ldy 	#$3A 						; default type.
.3727	ae cf 0a	ldx $0acf			ldx 	convertBuffer 				; is last character (
.372a	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.372d	c9 28		cmp #$28			cmp 	#"("
.372f	d0 02		bne $3733			bne 	_TINotArray
.3731	ca		dex				dex 								; yes, remove it and convert to array.
.3732	c8		iny				iny
.3733					_TINotArray:
.3733	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for $
.3736	c9 24		cmp #$24			cmp 	#"$"
.3738	d0 03		bne $373d			bne 	_TINotString
.373a	ca		dex				dex
.373b	c8		iny				iny
.373c	c8		iny				iny
.373d					_TINotString:
.373d	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x 			; check for #
.3740	c9 23		cmp #$23			cmp 	#"#"
.3742	d0 05		bne $3749			bne 	_TINotFloat
.3744	ca		dex				dex
.3745	c8		iny				iny
.3746	c8		iny				iny
.3747	c8		iny				iny
.3748	c8		iny				iny
.3749					_TINotFloat:
.3749	e8		inx				inx 								; write end marker for identifier.
.374a	98		tya				tya
.374b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.374e	8e cf 0a	stx $0acf			stx 	convertBuffer 				; update length.
.3751	a2 01		ldx #$01			ldx 	#1
.3753					_TIOutput:
.3753	bd cf 0a	lda $0acf,x			lda 	convertBuffer,x
.3756	29 3f		and #$3f			and 	#$3F
.3758	48		pha				pha
.3759	20 8b 36	jsr $368b			jsr 	TokenWrite
.375c	e8		inx				inx
.375d	68		pla				pla
.375e	c9 3a		cmp #$3a			cmp 	#$3A
.3760	90 f1		bcc $3753			bcc 	_TIOutput
.3762	68		pla				pla
.3763	a8		tay				tay
.3764					_TIExit:
.3764	38		sec				sec 								; this can't fail.
.3765	60		rts				rts
.3766					TIDCheckCopy:
.3766	d1 28		cmp ($28),y			cmp 	(codePtr),y
.3768	d0 08		bne $3772			bne 	_TIDCCExit
.376a	e8		inx				inx
.376b	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.376e	8e cf 0a	stx $0acf			stx 	convertBuffer
.3771	c8		iny				iny
.3772					_TIDCCExit:
.3772	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokinteger.asm

.3773					TokeniseInteger:
.3773	85 2c		sta $2c				sta 	temp1 						; save base
.3775	a2 00		ldx #$00			ldx 	#0							; count of chars so far
.3777	8e cf 0a	stx $0acf			stx 	convertBuffer
.377a					_TIGetChars:
.377a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check character is numeric
.377c	c9 30		cmp #$30			cmp 	#"0"
.377e	90 1f		bcc $379f			bcc 	_TIEndGet
.3780	c9 3a		cmp #$3a			cmp 	#"9"+1
.3782	90 10		bcc $3794			bcc 	_TIHaveChar
.3784	a5 2c		lda $2c				lda 	temp1 						; fail if not hex mode
.3786	c9 0a		cmp #$0a			cmp 	#10
.3788	f0 15		beq $379f			beq 	_TIEndGet
.378a	b1 28		lda ($28),y			lda 	(codePtr),y 				; check legitimate hex.
.378c	c9 41		cmp #$41			cmp 	#"A"
.378e	90 0f		bcc $379f			bcc 	_TIEndGet
.3790	c9 5b		cmp #$5b			cmp 	#"Z"+1
.3792	b0 0b		bcs $379f			bcs 	_TIEndGet
.3794					_TIHaveChar:
.3794	e8		inx				inx 								; write into buffer.
.3795	8e cf 0a	stx $0acf			stx 	convertBuffer
.3798	9d cf 0a	sta $0acf,x			sta 	convertBuffer,x
.379b	c8		iny				iny 								; next char
.379c	4c 7a 37	jmp $377a			jmp 	_TIGetChars
.379f					_TIEndGet:
.379f	e0 00		cpx #$00			cpx 	#0 							; no char acquired.
.37a1	f0 1c		beq $37bf			beq 	_TIFail
.37a3	98		tya				tya
.37a4	48		pha				pha
.37a5	a9 cf		lda #$cf			lda 	#(convertBuffer) & $FF
.37a7	85 2a		sta $2a				sta 	temp0
.37a9	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.37ab	85 2b		sta $2b				sta 	1+(temp0)
.37ad	a9 00		lda #$00			lda 	#0 							; stack 0
.37af	a4 2c		ldy $2c				ldy 	temp1 						; base Y
.37b1	a2 14		ldx #$14		ldx	#20
.37b3	20 bc 30	jsr $30bc		jsr	mainHandler
.37b6	68		pla				pla
.37b7	a8		tay				tay
.37b8	90 05		bcc $37bf			bcc 	_TIFail 					; didn't convert.
.37ba	20 c1 37	jsr $37c1			jsr 	TIRecursiveOut 				; recursive output ?
.37bd	38		sec				sec
.37be	60		rts				rts
.37bf					_TIFail:
.37bf	18		clc				clc
.37c0	60		rts				rts
.37c1					TIRecursiveOut:
.37c1	a5 48		lda $48				lda 	esInt0 						; get value to output after possible recursion
.37c3	29 3f		and #$3f			and 	#$3F
.37c5	09 40		ora #$40			ora 	#$40
.37c7	48		pha				pha
.37c8	a5 48		lda $48				lda 	esInt0 						; are we recursing ?
.37ca	29 c0		and #$c0			and 	#$C0
.37cc	05 50		ora $50				ora 	esInt1
.37ce	05 58		ora $58				ora 	esInt2
.37d0	05 60		ora $60				ora 	esInt3
.37d2	f0 10		beq $37e4			beq 	_TIRONoRecursion
.37d4	a2 06		ldx #$06			ldx 	#6 							; shift right x 6
.37d6					_TIROShift:
.37d6	46 60		lsr $60				lsr 	esInt3
.37d8	66 58		ror $58				ror 	esInt2
.37da	66 50		ror $50				ror 	esInt1
.37dc	66 48		ror $48				ror 	esInt0
.37de	ca		dex				dex
.37df	d0 f5		bne $37d6			bne 	_TIROShift
.37e1	20 c1 37	jsr $37c1			jsr 	TIRecursiveOut 				; call recursively
.37e4					_TIRONoRecursion:
.37e4	68		pla				pla 								; pull the old bit.
.37e5	4c 8b 36	jmp $368b			jmp 	TokenWrite

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokpunct.asm

.37e8					TokenisePunctuation:
.37e8	b1 28		lda ($28),y			lda	 	(codePtr),y 				; copy next 2 chars into convertBuffer
.37ea	8d d0 0a	sta $0ad0			sta 	convertBuffer+1
.37ed	c8		iny				iny
.37ee	b1 28		lda ($28),y			lda 	(codePtr),y
.37f0	8d d1 0a	sta $0ad1			sta 	convertBuffer+2
.37f3	c8		iny				iny 								; Y is +2
.37f4	a9 02		lda #$02			lda 	#2 							; 2 character string.
.37f6	8d cf 0a	sta $0acf			sta 	convertBuffer
.37f9	20 9d 35	jsr $359d			jsr 	TokenSearch 				; search for that token.
.37fc	b0 0a		bcs $3808			bcs 	_TIFound
.37fe	ce cf 0a	dec $0acf			dec 	convertBuffer 				; make it a 1 character string
.3801	88		dey				dey 								; Y is now +1
.3802	20 9d 35	jsr $359d			jsr 	TokenSearch 				; search for that token.
.3805	b0 01		bcs $3808			bcs 	_TIFound
.3807	88		dey				dey 								; Y is now +0, carry clear indicating failure.
.3808					_TIFound:
.3808	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokenise/tokstring.asm

.3809					TokeniseString:
.3809	c8		iny				iny 								; skip opening quote
.380a	a2 ff		ldx #$ff			ldx 	#255 						; count length of string.
.380c	84 2a		sty $2a				sty 	temp0 						; save start.
.380e					_TSGetLength:
.380e	b1 28		lda ($28),y			lda 	(codePtr),y 				; get next
.3810	f0 21		beq $3833			beq 	_TSFail						; end of line, fail
.3812	c8		iny				iny
.3813	e8		inx				inx
.3814	c9 22		cmp #$22			cmp 	#'"' 						; until end quote found.
.3816	d0 f6		bne $380e			bne 	_TSGetLength
.3818	a9 85		lda #$85			lda 	#TOK_STR 					; write string token out
.381a	20 8b 36	jsr $368b			jsr 	TokenWrite
.381d	8a		txa				txa 								; output length
.381e	20 8b 36	jsr $368b			jsr 	TokenWrite
.3821	a4 2a		ldy $2a				ldy 	temp0 						; get original position
.3823	e0 00		cpx #$00			cpx 	#0 							; check ended
.3825	f0 09		beq $3830			beq 	_TSExit
.3827					_TSOutput:
.3827	b1 28		lda ($28),y			lda 	(codePtr),y					; output character
.3829	20 8b 36	jsr $368b			jsr 	TokenWrite
.382c	c8		iny				iny
.382d	ca		dex				dex
.382e	d0 f7		bne $3827			bne 	_TSOutput
.3830					_TSExit:
.3830	c8		iny				iny 								; skip ending quote
.3831	38		sec				sec 								; return CS.
.3832	60		rts				rts
.3833					_TSFail:
.3833	18		clc				clc
.3834	60		rts				rts

;******  Return to file: tokeniser/tokeniser.asm


;******  Processing file: tokeniser/tokentext.asm

.3835					TokenTableAddress:
>3835	3d 38						.word 	Group0Text
>3837	0a 3a						.word 	Group1Text
>3839	45 3b						.word 	Group2Text
>383b	58 3b						.word 	Group3Text

;******  Processing file: tokeniser/../generated/tokentext0.inc

.383d					Group0Text:
>383d	03 41 4e c4				.byte $03,$41,$4e,$c4                  ; $86 and
>3841	02 4f d2				.byte $02,$4f,$d2                      ; $87 or
>3844	03 58 4f d2				.byte $03,$58,$4f,$d2                  ; $88 xor
>3848	02 3e bd				.byte $02,$3e,$bd                      ; $89 >=
>384b	02 3c bd				.byte $02,$3c,$bd                      ; $8a <=
>384e	01 be					.byte $01,$be                          ; $8b >
>3850	01 bc					.byte $01,$bc                          ; $8c <
>3852	01 bd					.byte $01,$bd                          ; $8d =
>3854	02 3c be				.byte $02,$3c,$be                      ; $8e <>
>3857	01 ab					.byte $01,$ab                          ; $8f +
>3859	01 ad					.byte $01,$ad                          ; $90 -
>385b	02 3e be				.byte $02,$3e,$be                      ; $91 >>
>385e	02 3c bc				.byte $02,$3c,$bc                      ; $92 <<
>3861	01 aa					.byte $01,$aa                          ; $93 *
>3863	01 af					.byte $01,$af                          ; $94 /
>3865	03 4d 4f c4				.byte $03,$4d,$4f,$c4                  ; $95 mod
>3869	01 de					.byte $01,$de                          ; $96 ^
>386b	01 a1					.byte $01,$a1                          ; $97 !
>386d	01 bf					.byte $01,$bf                          ; $98 ?
>386f	06 52 45 50 45 41 d4			.byte $06,$52,$45,$50,$45,$41,$d4      ; $99 repeat
>3876	05 57 48 49 4c c5			.byte $05,$57,$48,$49,$4c,$c5          ; $9a while
>387c	03 46 4f d2				.byte $03,$46,$4f,$d2                  ; $9b for
>3880	02 49 c6				.byte $02,$49,$c6                      ; $9c if
>3883	07 44 45 46 50 52 4f c3			.byte $07,$44,$45,$46,$50,$52,$4f,$c3  ; $9d defproc
>388b	05 55 4e 54 49 cc			.byte $05,$55,$4e,$54,$49,$cc          ; $9e until
>3891	04 57 45 4e c4				.byte $04,$57,$45,$4e,$c4              ; $9f wend
>3896	04 4e 45 58 d4				.byte $04,$4e,$45,$58,$d4              ; $a0 next
>389b	04 54 48 45 ce				.byte $04,$54,$48,$45,$ce              ; $a1 then
>38a0	05 45 4e 44 49 c6			.byte $05,$45,$4e,$44,$49,$c6          ; $a2 endif
>38a6	07 45 4e 44 50 52 4f c3			.byte $07,$45,$4e,$44,$50,$52,$4f,$c3  ; $a3 endproc
>38ae	01 a8					.byte $01,$a8                          ; $a4 (
>38b0	04 4c 45 4e a8				.byte $04,$4c,$45,$4e,$a8              ; $a5 len(
>38b5	04 53 47 4e a8				.byte $04,$53,$47,$4e,$a8              ; $a6 sgn(
>38ba	04 41 42 53 a8				.byte $04,$41,$42,$53,$a8              ; $a7 abs(
>38bf	07 52 41 4e 44 4f 4d a8			.byte $07,$52,$41,$4e,$44,$4f,$4d,$a8  ; $a8 random(
>38c7	04 50 41 47 c5				.byte $04,$50,$41,$47,$c5              ; $a9 page
>38cc	04 54 52 55 c5				.byte $04,$54,$52,$55,$c5              ; $aa true
>38d1	05 46 41 4c 53 c5			.byte $05,$46,$41,$4c,$53,$c5          ; $ab false
>38d7	04 4d 49 4e a8				.byte $04,$4d,$49,$4e,$a8              ; $ac min(
>38dc	04 4d 41 58 a8				.byte $04,$4d,$41,$58,$a8              ; $ad max(
>38e1	04 53 59 53 a8				.byte $04,$53,$59,$53,$a8              ; $ae sys(
>38e6	06 54 49 4d 45 52 a8			.byte $06,$54,$49,$4d,$45,$52,$a8      ; $af timer(
>38ed	06 45 56 45 4e 54 a8			.byte $06,$45,$56,$45,$4e,$54,$a8      ; $b0 event(
>38f4	04 47 45 54 a8				.byte $04,$47,$45,$54,$a8              ; $b1 get(
>38f9	06 49 4e 4b 45 59 a8			.byte $06,$49,$4e,$4b,$45,$59,$a8      ; $b2 inkey(
>3900	06 41 4c 4c 4f 43 a8			.byte $06,$41,$4c,$4c,$4f,$43,$a8      ; $b3 alloc(
>3907	05 43 48 52 24 a8			.byte $05,$43,$48,$52,$24,$a8          ; $b4 chr$(
>390d	06 4c 45 46 54 24 a8			.byte $06,$4c,$45,$46,$54,$24,$a8      ; $b5 left$(
>3914	05 4d 49 44 24 a8			.byte $05,$4d,$49,$44,$24,$a8          ; $b6 mid$(
>391a	07 52 49 47 48 54 24 a8			.byte $07,$52,$49,$47,$48,$54,$24,$a8  ; $b7 right$(
>3922	05 53 54 52 24 a8			.byte $05,$53,$54,$52,$24,$a8          ; $b8 str$(
>3928	04 56 41 4c a8				.byte $04,$56,$41,$4c,$a8              ; $b9 val(
>392d	05 50 45 45 4b a8			.byte $05,$50,$45,$45,$4b,$a8          ; $ba peek(
>3933	05 44 45 45 4b a8			.byte $05,$44,$45,$45,$4b,$a8          ; $bb deek(
>3939	05 4c 45 45 4b a8			.byte $05,$4c,$45,$45,$4b,$a8          ; $bc leek(
>393f	04 41 53 43 a8				.byte $04,$41,$53,$43,$a8              ; $bd asc(
>3944	04 49 4e 54 a8				.byte $04,$49,$4e,$54,$a8              ; $be int(
>3949	06 46 4c 4f 41 54 a8			.byte $06,$46,$4c,$4f,$41,$54,$a8      ; $bf float(
>3950	06 49 53 56 41 4c a8			.byte $06,$49,$53,$56,$41,$4c,$a8      ; $c0 isval(
>3957	07 55 50 50 45 52 24 a8			.byte $07,$55,$50,$50,$45,$52,$24,$a8  ; $c1 upper$(
>395f	07 4c 4f 57 45 52 24 a8			.byte $07,$4c,$4f,$57,$45,$52,$24,$a8  ; $c2 lower$(
>3967	01 c0					.byte $01,$c0                          ; $c3 @
>3969	01 fe					.byte $01,$fe                          ; $c4 ~
>396b	01 a6					.byte $01,$a6                          ; $c5 &
>396d	05 47 45 54 24 a8			.byte $05,$47,$45,$54,$24,$a8          ; $c6 get$(
>3973	07 49 4e 4b 45 59 24 a8			.byte $07,$49,$4e,$4b,$45,$59,$24,$a8  ; $c7 inkey$(
>397b	03 4d 45 cd				.byte $03,$4d,$45,$cd                  ; $c8 mem
>397f	01 a9					.byte $01,$a9                          ; $c9 )
>3981	01 ba					.byte $01,$ba                          ; $ca :
>3983	01 ac					.byte $01,$ac                          ; $cb ,
>3985	01 bb					.byte $01,$bb                          ; $cc ;
>3987	01 a7					.byte $01,$a7                          ; $cd '
>3989	02 54 cf				.byte $02,$54,$cf                      ; $ce to
>398c	04 53 54 45 d0				.byte $04,$53,$54,$45,$d0              ; $cf step
>3991	04 50 52 4f c3				.byte $04,$50,$52,$4f,$c3              ; $d0 proc
>3996	05 4c 4f 43 41 cc			.byte $05,$4c,$4f,$43,$41,$cc          ; $d1 local
>399c	03 44 49 cd				.byte $03,$44,$49,$cd                  ; $d2 dim
>39a0	03 52 45 cd				.byte $03,$52,$45,$cd                  ; $d3 rem
>39a4	03 4c 45 d4				.byte $03,$4c,$45,$d4                  ; $d4 let
>39a8	05 49 4e 50 55 d4			.byte $05,$49,$4e,$50,$55,$d4          ; $d5 input
>39ae	04 45 4c 53 c5				.byte $04,$45,$4c,$53,$c5              ; $d6 else
>39b3	03 56 44 d5				.byte $03,$56,$44,$d5                  ; $d7 vdu
>39b7	05 50 52 49 4e d4			.byte $05,$50,$52,$49,$4e,$d4          ; $d8 print
>39bd	04 47 4f 54 cf				.byte $04,$47,$4f,$54,$cf              ; $d9 goto
>39c2	05 47 4f 53 55 c2			.byte $05,$47,$4f,$53,$55,$c2          ; $da gosub
>39c8	06 52 45 54 55 52 ce			.byte $06,$52,$45,$54,$55,$52,$ce      ; $db return
>39cf	04 44 41 54 c1				.byte $04,$44,$41,$54,$c1              ; $dc data
>39d4	06 41 53 53 45 52 d4			.byte $06,$41,$53,$53,$45,$52,$d4      ; $dd assert
>39db	04 50 4f 4b c5				.byte $04,$50,$4f,$4b,$c5              ; $de poke
>39e0	04 44 4f 4b c5				.byte $04,$44,$4f,$4b,$c5              ; $df doke
>39e5	04 4c 4f 4b c5				.byte $04,$4c,$4f,$4b,$c5              ; $e0 loke
>39ea	03 49 4e cb				.byte $03,$49,$4e,$cb                  ; $e1 ink
>39ee	05 50 41 50 45 d2			.byte $05,$50,$41,$50,$45,$d2          ; $e2 paper
>39f4	03 43 4c d3				.byte $03,$43,$4c,$d3                  ; $e3 cls
>39f8	06 4c 4f 43 41 54 c5			.byte $06,$4c,$4f,$43,$41,$54,$c5      ; $e4 locate
>39ff	05 42 52 45 41 cb			.byte $05,$42,$52,$45,$41,$cb          ; $e5 break
>3a05	01 ae					.byte $01,$ae                          ; $e6 .
>3a07	01 a3					.byte $01,$a3                          ; $e7 #
>3a09	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext1.inc

.3a0a					Group1Text:
>3a0a	05 43 4c 45 41 d2			.byte $05,$43,$4c,$45,$41,$d2          ; $86 clear
>3a10	04 4c 4f 41 c4				.byte $04,$4c,$4f,$41,$c4              ; $87 load
>3a15	04 53 41 56 c5				.byte $04,$53,$41,$56,$c5              ; $88 save
>3a1a	04 4c 49 53 d4				.byte $04,$4c,$49,$53,$d4              ; $89 list
>3a1f	03 4e 45 d7				.byte $03,$4e,$45,$d7                  ; $8a new
>3a23	03 52 55 ce				.byte $03,$52,$55,$ce                  ; $8b run
>3a27	04 52 45 41 c4				.byte $04,$52,$45,$41,$c4              ; $8c read
>3a2c	07 52 45 53 54 4f 52 c5			.byte $07,$52,$45,$53,$54,$4f,$52,$c5  ; $8d restore
>3a34	03 45 4e c4				.byte $03,$45,$4e,$c4                  ; $8e end
>3a38	04 53 54 4f d0				.byte $04,$53,$54,$4f,$d0              ; $8f stop
>3a3d	04 58 45 4d d5				.byte $04,$58,$45,$4d,$d5              ; $90 xemu
>3a42	03 4f 52 c1				.byte $03,$4f,$52,$c1                  ; $91 ora
>3a46	05 28 41 4e 44 a9			.byte $05,$28,$41,$4e,$44,$a9          ; $92 (and)
>3a4c	03 45 4f d2				.byte $03,$45,$4f,$d2                  ; $93 eor
>3a50	03 41 44 c3				.byte $03,$41,$44,$c3                  ; $94 adc
>3a54	03 53 54 c1				.byte $03,$53,$54,$c1                  ; $95 sta
>3a58	03 4c 44 c1				.byte $03,$4c,$44,$c1                  ; $96 lda
>3a5c	03 43 4d d0				.byte $03,$43,$4d,$d0                  ; $97 cmp
>3a60	03 53 42 c3				.byte $03,$53,$42,$c3                  ; $98 sbc
>3a64	03 41 53 cc				.byte $03,$41,$53,$cc                  ; $99 asl
>3a68	03 52 4f cc				.byte $03,$52,$4f,$cc                  ; $9a rol
>3a6c	03 4c 53 d2				.byte $03,$4c,$53,$d2                  ; $9b lsr
>3a70	03 52 4f d2				.byte $03,$52,$4f,$d2                  ; $9c ror
>3a74	03 53 54 d8				.byte $03,$53,$54,$d8                  ; $9d stx
>3a78	03 4c 44 d8				.byte $03,$4c,$44,$d8                  ; $9e ldx
>3a7c	03 44 45 c3				.byte $03,$44,$45,$c3                  ; $9f dec
>3a80	03 49 4e c3				.byte $03,$49,$4e,$c3                  ; $a0 inc
>3a84	03 53 54 da				.byte $03,$53,$54,$da                  ; $a1 stz
>3a88	03 42 49 d4				.byte $03,$42,$49,$d4                  ; $a2 bit
>3a8c	03 53 54 d9				.byte $03,$53,$54,$d9                  ; $a3 sty
>3a90	03 4c 44 d9				.byte $03,$4c,$44,$d9                  ; $a4 ldy
>3a94	03 43 50 d9				.byte $03,$43,$50,$d9                  ; $a5 cpy
>3a98	03 43 50 d8				.byte $03,$43,$50,$d8                  ; $a6 cpx
>3a9c	03 54 53 c2				.byte $03,$54,$53,$c2                  ; $a7 tsb
>3aa0	03 54 52 c2				.byte $03,$54,$52,$c2                  ; $a8 trb
>3aa4	03 4a 53 d2				.byte $03,$4a,$53,$d2                  ; $a9 jsr
>3aa8	03 4a 4d d0				.byte $03,$4a,$4d,$d0                  ; $aa jmp
>3aac	03 42 50 cc				.byte $03,$42,$50,$cc                  ; $ab bpl
>3ab0	03 42 4d c9				.byte $03,$42,$4d,$c9                  ; $ac bmi
>3ab4	03 42 56 c3				.byte $03,$42,$56,$c3                  ; $ad bvc
>3ab8	03 42 56 d3				.byte $03,$42,$56,$d3                  ; $ae bvs
>3abc	03 42 43 c3				.byte $03,$42,$43,$c3                  ; $af bcc
>3ac0	03 42 43 d3				.byte $03,$42,$43,$d3                  ; $b0 bcs
>3ac4	03 42 4e c5				.byte $03,$42,$4e,$c5                  ; $b1 bne
>3ac8	03 42 45 d1				.byte $03,$42,$45,$d1                  ; $b2 beq
>3acc	03 42 52 c1				.byte $03,$42,$52,$c1                  ; $b3 bra
>3ad0	03 42 52 cb				.byte $03,$42,$52,$cb                  ; $b4 brk
>3ad4	03 50 48 d0				.byte $03,$50,$48,$d0                  ; $b5 php
>3ad8	03 43 4c c3				.byte $03,$43,$4c,$c3                  ; $b6 clc
>3adc	03 50 4c d0				.byte $03,$50,$4c,$d0                  ; $b7 plp
>3ae0	03 53 45 c3				.byte $03,$53,$45,$c3                  ; $b8 sec
>3ae4	03 52 54 c9				.byte $03,$52,$54,$c9                  ; $b9 rti
>3ae8	03 50 48 c1				.byte $03,$50,$48,$c1                  ; $ba pha
>3aec	03 43 4c c9				.byte $03,$43,$4c,$c9                  ; $bb cli
>3af0	03 50 48 d9				.byte $03,$50,$48,$d9                  ; $bc phy
>3af4	03 52 54 d3				.byte $03,$52,$54,$d3                  ; $bd rts
>3af8	03 50 4c c1				.byte $03,$50,$4c,$c1                  ; $be pla
>3afc	03 53 45 c9				.byte $03,$53,$45,$c9                  ; $bf sei
>3b00	03 50 4c d9				.byte $03,$50,$4c,$d9                  ; $c0 ply
>3b04	03 44 45 d9				.byte $03,$44,$45,$d9                  ; $c1 dey
>3b08	03 54 58 c1				.byte $03,$54,$58,$c1                  ; $c2 txa
>3b0c	03 54 59 c1				.byte $03,$54,$59,$c1                  ; $c3 tya
>3b10	03 54 58 d3				.byte $03,$54,$58,$d3                  ; $c4 txs
>3b14	03 54 41 d9				.byte $03,$54,$41,$d9                  ; $c5 tay
>3b18	03 54 41 d8				.byte $03,$54,$41,$d8                  ; $c6 tax
>3b1c	03 43 4c d6				.byte $03,$43,$4c,$d6                  ; $c7 clv
>3b20	03 54 53 d8				.byte $03,$54,$53,$d8                  ; $c8 tsx
>3b24	03 49 4e d9				.byte $03,$49,$4e,$d9                  ; $c9 iny
>3b28	03 44 45 d8				.byte $03,$44,$45,$d8                  ; $ca dex
>3b2c	03 43 4c c4				.byte $03,$43,$4c,$c4                  ; $cb cld
>3b30	03 50 48 d8				.byte $03,$50,$48,$d8                  ; $cc phx
>3b34	03 49 4e d8				.byte $03,$49,$4e,$d8                  ; $cd inx
>3b38	03 4e 4f d0				.byte $03,$4e,$4f,$d0                  ; $ce nop
>3b3c	03 53 45 c4				.byte $03,$53,$45,$c4                  ; $cf sed
>3b40	03 50 4c d8				.byte $03,$50,$4c,$d8                  ; $d0 plx
>3b44	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext2.inc

.3b45					Group2Text:
>3b45	05 56 50 4f 4b c5			.byte $05,$56,$50,$4f,$4b,$c5          ; $86 vpoke
>3b4b	05 56 44 4f 4b c5			.byte $05,$56,$44,$4f,$4b,$c5          ; $87 vdoke
>3b51	05 56 4c 4f 41 c4			.byte $05,$56,$4c,$4f,$41,$c4          ; $88 vload
>3b57	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Processing file: tokeniser/../generated/tokentext3.inc

.3b58					Group3Text:
>3b58	06 56 50 45 45 4b a8			.byte $06,$56,$50,$45,$45,$4b,$a8      ; $86 vpeek(
>3b5f	06 56 44 45 45 4b a8			.byte $06,$56,$44,$45,$45,$4b,$a8      ; $87 vdeek(
>3b66	00					.byte $00

;******  Return to file: tokeniser/tokentext.asm


;******  Return to file: tokeniser/tokeniser.asm

.3b67					tokeniserHandler:
.3b67	7c 6a 3b	jmp ($3b6a,x)			jmp 	(tokeniserVectors,x)
.3b6a					tokeniserVectors:
>3b6a	91 33					.word Detokenise           ; index 0
>3b6c	85 33					.word ListLine             ; index 2
>3b6e	0c 36					.word TokTest              ; index 4
>3b70	2c 36					.word Tokenise             ; index 6
>3b72	2f 36					.word TokeniseASCIIZ       ; index 8

;******  Return to file: basic.asm

.3b74					section_end_tokeniser:
.3b74					section_start_variable:

;******  Processing file: variable/variable.asm


;******  Processing file: variable/access.asm

.0d25					varHash:
>0d25							.fill	1
.0d26					varType:
>0d26							.fill 	1
.0d27					varEnd:
>0d27							.fill 	1
.003b					hashList:
>003b							.fill 	2
.3b74					AccessVariable:
.3b74	aa		tax				tax 								; stack in X
.3b75	c8		iny				iny									; look at second character
.3b76	b1 28		lda ($28),y			lda 	(codePtr),y
.3b78	88		dey				dey
.3b79	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it the integer marker ($3A)
.3b7b	d0 15		bne $3b92			bne 	_AVLong 					; no, always use the hash tables.
.3b7d	b1 28		lda ($28),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.3b7f	38		sec				sec 	 							; make it 0-25
.3b80	e9 01		sbc #$01			sbc 	#1
.3b82	0a		asl a				asl 	a 							; x 4 as 4 bytes / variable.
.3b83	0a		asl a				asl 	a
.3b84	95 48		sta $48,x			sta 	esInt0,x
.3b86	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.3b88	95 50		sta $50,x			sta 	esInt1,x
.3b8a	a9 80		lda #$80			lda 	#$80 						; type is an integer reference.
.3b8c	95 40		sta $40,x			sta 	esType,x
.3b8e	c8		iny				iny 								; skip over the variable reference in the code.
.3b8f	c8		iny				iny  								; (1 letter, 1 type)
.3b90	8a		txa				txa 								; stack in A to return.
.3b91	60		rts				rts
.3b92					_AVLong:
.3b92	8a		txa				txa
.3b93	48		pha				pha
.3b94	20 db 3b	jsr $3bdb			jsr 	AccessSetup 				; set up the basic information we need for later
.3b97	20 1d 3e	jsr $3e1d			jsr 	FindVariable 				; does the variable exist already ?
.3b9a	b0 0e		bcs $3baa			bcs 	_AVFound 					; yes, then its found
.3b9c	ad 26 0d	lda $0d26			lda 	varType 					; otherwise, is the variable type an array
.3b9f	4a		lsr a				lsr 	a
.3ba0	90 05		bcc $3ba7			bcc 	_AVCanCreate 				; if not, we can autocreate
.3ba2	a2 15		ldx #$15			ldx 	#ErrorID_noauto
.3ba4	20 3f 14	jsr $143f		jsr	errorHandler
.3ba7					_AVCanCreate:
.3ba7	20 90 3c	jsr $3c90			jsr 	CreateVariable 				; variable does not exist, create it.
.3baa					_AVFound:
.3baa	68		pla				pla
.3bab	aa		tax				tax
.3bac	18		clc				clc 								; copy temp0 (variable record address)
.3bad	a5 2a		lda $2a				lda 	temp0 						; +5 (to point to the data)
.3baf	69 05		adc #$05			adc 	#5 							; (first 5 bytes are link, name, hash)
.3bb1	95 48		sta $48,x			sta 	esInt0,x
.3bb3	a5 2b		lda $2b				lda 	temp0+1
.3bb5	69 00		adc #$00			adc 	#0
.3bb7	95 50		sta $50,x			sta 	esInt1,x
.3bb9	a9 00		lda #$00			lda 	#0
.3bbb	95 58		sta $58,x			sta 	esInt2,x
.3bbd	95 60		sta $60,x			sta 	esInt3,x
.3bbf	ac 26 0d	ldy $0d26			ldy 	varType 					; get the type ID from the type.
.3bc2	b9 9b 3b	lda $3b9b,y			lda 	_AVTypeTable-$3A,y 			; e.g. a reference to int/float/string.
.3bc5	95 40		sta $40,x			sta 	esType,x
.3bc7	ac 27 0d	ldy $0d27			ldy 	varEnd 						; restore Y
.3bca	ad 26 0d	lda $0d26			lda 	VarType 					; get variable type, put LSB into C
.3bcd	4a		lsr a				lsr 	a
.3bce	90 03		bcc $3bd3			bcc 	_AVNotArray 				; if carry set,it is an array variable.
.3bd0	20 18 3c	jsr $3c18			jsr 	AccessArray 				; array lookup. if LSB was set.
.3bd3					_AVNotArray:
.3bd3	8a		txa				txa 								; return stack in A and return
.3bd4	60		rts				rts
.3bd5					_AVTypeTable:
>3bd5	80 80						.byte 	$80,$80						; integer
>3bd7	c0 c0						.byte 	$C0,$C0 					; string
>3bd9	81 81						.byte 	$81,$81 					; float
.3bdb					AccessSetup:
.3bdb	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.3bdd	8d 25 0d	sta $0d25			sta 	varHash
.3be0	98		tya				tya
.3be1	48		pha				pha
.3be2	b1 28		lda ($28),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.3be4	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.3be6	b0 0b		bcs $3bf3			bcs 	_ASComplete
.3be8	18		clc				clc 								; add to the hash. Might improve this.
.3be9	6d 25 0d	adc $0d25			adc 	varHash
.3bec	8d 25 0d	sta $0d25			sta 	varHash
.3bef	c8		iny				iny 								; next character
.3bf0	4c e2 3b	jmp $3be2			jmp 	_ASLoop
.3bf3					_ASComplete:
.3bf3	8d 26 0d	sta $0d26			sta 	varType 					; save variable type byte
.3bf6	c8		iny				iny
.3bf7	8c 27 0d	sty $0d27			sty 	varEnd 						; save the ending position.
.3bfa	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.3bfb	e9 3a		sbc #$3a			sbc 	#$3A
.3bfd	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.3bfe	0a		asl a				asl 	a
.3bff	0a		asl a				asl 	a
.3c00	0a		asl a				asl 	a 							; 2 bytes/word
.3c01	85 2a		sta $2a				sta 	temp0 						; this is the offset to the start of the table.
.3c03	ad 25 0d	lda $0d25			lda 	varHash 					; get hash
.3c06	29 07		and #$07			and 	#(hashTableSize-1)			; force into range (for 8,0..7)
.3c08	0a		asl a				asl  	a 							; x 2 (for word) and clear carry
.3c09	65 2a		adc $2a				adc 	temp0 						; now offset from the start of the hash table.
.3c0b	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.3c0d	85 3b		sta $3b				sta 	hashList 					; making hashLists point to the head of the link list.
.3c0f	a9 0a		lda #$0a			lda 	#hashTables >> 8
.3c11	69 00		adc #$00			adc 	#0
.3c13	85 3c		sta $3c				sta 	hashList+1
.3c15	68		pla				pla
.3c16	a8		tay				tay
.3c17	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/accessarray.asm

.3c18					AccessArray:
.3c18	e8		inx				inx
.3c19	8a		txa				txa
.3c1a	a2 06		ldx #$06		ldx	#6
.3c1c	20 bc 30	jsr $30bc		jsr	mainHandler
.3c1f	48		pha				pha
.3c20	a2 00		ldx #$00		ldx	#0
.3c22	20 bc 30	jsr $30bc		jsr	mainHandler
.3c25	68		pla				pla
.3c26	aa		tax				tax
.3c27	ca		dex				dex
.3c28	b5 61		lda $61,x			lda 	esInt3+1,x 					; check index value at least < 64k
.3c2a	15 59		ora $59,x			ora 	esInt2+1,x
.3c2c	d0 33		bne $3c61			bne 	_AABadIndex
.3c2e	98		tya				tya
.3c2f	48		pha				pha
.3c30	b5 48		lda $48,x			lda 	esInt0,x 					; put array info ptr in temp0 - this points to the
.3c32	85 2a		sta $2a				sta 	temp0 						; address (+0) max (+2) and size (+4)
.3c34	b5 50		lda $50,x			lda 	esInt1,x
.3c36	85 2b		sta $2b				sta 	temp0+1
.3c38	a0 02		ldy #$02			ldy 	#2 							; check out of range, compare against max index.
.3c3a	b5 49		lda $49,x			lda 	esInt0+1,x
.3c3c	d1 2a		cmp ($2a),y			cmp 	(temp0),y
.3c3e	c8		iny				iny
.3c3f	b5 51		lda $51,x			lda 	esInt1+1,x
.3c41	f1 2a		sbc ($2a),y			sbc 	(temp0),y
.3c43	b0 1c		bcs $3c61			bcs 	_AABadIndex 				; if >= then fail.
.3c45	e8		inx				inx 								; point to index
.3c46	a0 04		ldy #$04			ldy 	#4 							; get the size byte.
.3c48	b1 2a		lda ($2a),y			lda 	(temp0),y
.3c4a	20 66 3c	jsr $3c66			jsr 	MultiplyTOSByA 				; specialist multiplier.
.3c4d	ca		dex				dex
.3c4e	a0 00		ldy #$00			ldy 	#0 							; add this to the array base as the new address
.3c50	18		clc				clc
.3c51	b5 49		lda $49,x			lda 	esInt0+1,x
.3c53	71 2a		adc ($2a),y			adc 	(temp0),y
.3c55	95 48		sta $48,x			sta 	esInt0,x
.3c57	b5 51		lda $51,x			lda 	esInt1+1,x
.3c59	c8		iny				iny
.3c5a	71 2a		adc ($2a),y			adc 	(temp0),y
.3c5c	95 50		sta $50,x			sta 	esInt1,x
.3c5e	68		pla				pla
.3c5f	a8		tay				tay
.3c60	60		rts				rts
.3c61					_AABadIndex:
.3c61	a2 1b		ldx #$1b			ldx 	#ErrorID_ArrayIndex
.3c63	20 3f 14	jsr $143f		jsr	errorHandler
.3c66					MultiplyTOSByA:
.3c66	48		pha				pha
.3c67	b5 48		lda $48,x			lda 	esInt0,x 					; copy index to temp1
.3c69	85 2c		sta $2c				sta 	temp1
.3c6b	b5 50		lda $50,x			lda 	esInt1,x
.3c6d	85 2d		sta $2d				sta 	temp1+1
.3c6f	68		pla				pla
.3c70	16 48		asl $48,x			asl 	esInt0,x 					; double it.
.3c72	36 50		rol $50,x			rol 	esInt1,x
.3c74	c9 02		cmp #$02			cmp 	#2 							; if x 2 then exit.
.3c76	f0 17		beq $3c8f			beq 	_MTBAExit
.3c78	c9 06		cmp #$06			cmp 	#6 							; if x 6 then add temp1 to index
.3c7a	d0 0f		bne $3c8b			bne 	_MTBANotFloat
.3c7c	48		pha				pha
.3c7d	18		clc				clc 								; so this will make it x 3
.3c7e	b5 48		lda $48,x			lda 	esInt0,x
.3c80	65 2c		adc $2c				adc 	temp1
.3c82	95 48		sta $48,x			sta 	esInt0,x
.3c84	b5 50		lda $50,x			lda 	esInt1,x
.3c86	65 2d		adc $2d				adc 	temp1+1
.3c88	95 50		sta $50,x			sta 	esInt1,x
.3c8a	68		pla				pla
.3c8b					_MTBANotFloat:
.3c8b	16 48		asl $48,x			asl 	esInt0,x					; now it is x 4 or x 6
.3c8d	36 50		rol $50,x			rol 	esInt1,x
.3c8f					_MTBAExit:
.3c8f	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/create.asm

.3c90					CreateVariable:
.3c90	98		tya				tya 								; push Y on the stack twice.
.3c91	48		pha				pha									; position in code of the new variable.
.3c92	48		pha				pha
.3c93	ae 26 0d	ldx $0d26			ldx 	varType 					; get var type 0-5 from the var type
.3c96	bd ba 3c	lda $3cba,x			lda		_CVSize-$3A,x 				; the bytes required for this new variable.
.3c99	48		pha				pha 								; save length
.3c9a	a5 35		lda $35				lda 	lowMemory 					; set low Memory ptr to temp0
.3c9c	85 2a		sta $2a				sta 	temp0 						; (address of the new variable)
.3c9e	a5 36		lda $36				lda 	lowMemory+1
.3ca0	85 2b		sta $2b				sta 	temp0+1
.3ca2	68		pla				pla 								; get length
.3ca3	18		clc				clc 								; add to low memory.
.3ca4	65 35		adc $35				adc 	lowMemory
.3ca6	85 35		sta $35				sta 	lowMemory
.3ca8	90 08		bcc $3cb2			bcc 	_CVNoCarry
.3caa	e6 36		inc $36				inc 	lowMemory+1
.3cac	a5 36		lda $36				lda 	lowMemory+1 				; check out of memory.
.3cae	c5 34		cmp $34				cmp 	highMemory+1
.3cb0	b0 3d		bcs $3cef			bcs 	_CVMemory
.3cb2					_CVNoCarry:
.3cb2	ad 25 0d	lda $0d25			lda 	varHash 					; store hash at offset 4.
.3cb5	a0 04		ldy #$04			ldy 	#4
.3cb7	91 2a		sta ($2a),y			sta 	(temp0),y
.3cb9	68		pla				pla 								; offset, work out where the variable name is.
.3cba	18		clc				clc
.3cbb	65 28		adc $28				adc 	codePtr
.3cbd	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.3cbf	91 2a		sta ($2a),y			sta 	(temp0),y
.3cc1	a5 29		lda $29				lda 	codePtr+1
.3cc3	69 00		adc #$00			adc 	#0
.3cc5	c8		iny				iny
.3cc6	91 2a		sta ($2a),y			sta 	(temp0),y
.3cc8	cd c9 0a	cmp $0ac9			cmp 	basePage+1 					; compare against the program base.
.3ccb	b0 03		bcs $3cd0			bcs 	_CVNotImmediate
.3ccd	20 32 3d	jsr $3d32			jsr 	CloneVariableName 			; we need to clone the variable name (immediate mode)
.3cd0					_CVNotImmediate:
.3cd0	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.3cd2	b1 3b		lda ($3b),y			lda 	(hashList),y 				; so we're inserting it in the front of a linked list
.3cd4	91 2a		sta ($2a),y			sta 	(temp0),y
.3cd6	c8		iny				iny
.3cd7	b1 3b		lda ($3b),y			lda 	(hashList),y
.3cd9	91 2a		sta ($2a),y			sta 	(temp0),y
.3cdb	a5 2b		lda $2b				lda 	temp0+1 					; set new link
.3cdd	91 3b		sta ($3b),y			sta 	(hashList),y
.3cdf	88		dey				dey
.3ce0	a5 2a		lda $2a				lda 	temp0
.3ce2	91 3b		sta ($3b),y			sta 	(hashList),y
.3ce4	ad 26 0d	lda $0d26			lda 	varType 					; type in A
.3ce7	a0 05		ldy #$05			ldy 	#5 							; offset in Y
.3ce9	20 fa 3c	jsr $3cfa			jsr 	ZeroTemp0Y 					; zero (temp0),y with whatever type.
.3cec	68		pla				pla
.3ced	a8		tay				tay
.3cee	60		rts				rts
.3cef					_CVMemory:
.3cef	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3cf1	20 3f 14	jsr $143f		jsr	errorHandler
>3cf4	09 0a				_CVSize:.byte 	VarHSize+VarISize,VarHSize+VarASize 					; <storage for integer>
>3cf6	07 0a						.byte 	VarHSize+VarSSize,VarHSize+VarASize 					; <storage for string>
>3cf8	0b 0a						.byte 	VarHSize+VarFSize,VarHSize+VarASize 					; <storage for float>
.3cfa					ZeroTemp0Y:
.3cfa	4a		lsr a				lsr 	a 							; bit 0 in carry
.3cfb	0a		asl a				asl 	a
.3cfc	b0 19		bcs $3d17			bcs 	_ZTExit 					; we don't initialise arrays.
.3cfe	c9 3c		cmp #$3c			cmp 	#$3C 						; check string
.3d00	f0 16		beq $3d18			beq 	_ZTWriteNullString 			; write "" string
.3d02	c9 3e		cmp #$3e			cmp 	#$3E 						; check float
.3d04	f0 22		beq $3d28			beq 	_ZTWriteFloat
.3d06	98		tya				tya
.3d07	48		pha				pha
.3d08	a9 00		lda #$00			lda 	#0
.3d0a	91 2a		sta ($2a),y			sta 	(temp0),y
.3d0c	c8		iny				iny
.3d0d	91 2a		sta ($2a),y			sta 	(temp0),y
.3d0f	c8		iny				iny
.3d10	91 2a		sta ($2a),y			sta 	(temp0),y
.3d12	c8		iny				iny
.3d13	91 2a		sta ($2a),y			sta 	(temp0),y
.3d15	68		pla				pla
.3d16	a8		tay				tay
.3d17					_ZTExit:
.3d17	60		rts				rts
.3d18					_ZTWriteNullString:
.3d18	a9 00		lda #$00			lda 	#0 							; put a reference to null string as the default value.
.3d1a	8d ce 0a	sta $0ace			sta 	NullString
.3d1d	a9 ce		lda #$ce			lda 	#NullString & $FF
.3d1f	91 2a		sta ($2a),y			sta 	(temp0),y
.3d21	a9 0a		lda #$0a			lda 	#NullString >> 8
.3d23	c8		iny				iny
.3d24	91 2a		sta ($2a),y			sta 	(temp0),y
.3d26	88		dey				dey
.3d27	60		rts				rts
.3d28					_ZTWriteFloat:
.3d28	8a		txa				txa
.3d29	48		pha				pha
.3d2a	a2 1e		ldx #$1e		ldx	#30
.3d2c	20 51 18	jsr $1851		jsr	floatingpointHandler
.3d2f	68		pla				pla
.3d30	aa		tax				tax
.3d31	60		rts				rts
.3d32					CloneVariableName:
.3d32	a0 02		ldy #$02			ldy 	#2 							; copy vname address to temp2
.3d34	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d36	85 2e		sta $2e				sta 	temp2
.3d38	c8		iny				iny
.3d39	b1 2a		lda ($2a),y			lda 	(temp0),y
.3d3b	85 2f		sta $2f				sta 	temp2+1
.3d3d	a5 36		lda $36				lda 	lowMemory+1 				; copy lowMemory address to (temp0),2/3
.3d3f	91 2a		sta ($2a),y			sta 	(temp0),y
.3d41	88		dey				dey
.3d42	a5 35		lda $35				lda 	lowMemory
.3d44	91 2a		sta ($2a),y			sta 	(temp0),y
.3d46	a0 00		ldy #$00			ldy 	#0 							; copy data from (temp2) to (lowMemory)
.3d48					_CVNCopy:
.3d48	b1 2e		lda ($2e),y			lda		(temp2),y
.3d4a	91 35		sta ($35),y			sta 	(lowMemory),y
.3d4c	c8		iny				iny
.3d4d	c9 3a		cmp #$3a			cmp 	#$3A 						; until the whole name has been copied.
.3d4f	90 f7		bcc $3d48			bcc 	_CVNCopy
.3d51	98		tya				tya 								; add Y to low memory
.3d52	18		clc				clc
.3d53	65 35		adc $35				adc 	lowMemory
.3d55	85 35		sta $35				sta 	lowMemory
.3d57	90 02		bcc $3d5b			bcc 	_CVNNoCarry
.3d59	e6 36		inc $36				inc 	lowMemory+1
.3d5b					_CVNNoCarry:
.3d5b	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/createarray.asm

.3d5c					CreateArray:
.3d5c	20 db 3b	jsr $3bdb			jsr 	AccessSetup 				; set up the basic stuff.
.3d5f	ad 26 0d	lda $0d26			lda 	varType 					; is the variable type an array
.3d62	4a		lsr a				lsr 	a
.3d63	90 3f		bcc $3da4			bcc 	_CANotArray 				; no, cause an error.
.3d65	20 1d 3e	jsr $3e1d			jsr 	FindVariable 				; does the variable exist already
.3d68	b0 35		bcs $3d9f			bcs 	_CAFound 					; cannot redefine it.
.3d6a	20 90 3c	jsr $3c90			jsr 	CreateVariable 				; create the variable entry.
.3d6d	ac 27 0d	ldy $0d27			ldy 	varEnd 						; point Y to the end of the variable entry.
.3d70	a5 2a		lda $2a				lda 	temp0 						; push address of new variable entry on the stack
.3d72	48		pha				pha
.3d73	a5 2b		lda $2b				lda 	temp0+1
.3d75	48		pha				pha
.3d76	ad 26 0d	lda $0d26			lda 	varType 					; push variable type on the stack.
.3d79	48		pha				pha
.3d7a	a9 00		lda #$00			lda 	#0 							; work out the array dimension on TOS.
.3d7c	a2 06		ldx #$06		ldx	#6
.3d7e	20 bc 30	jsr $30bc		jsr	mainHandler
.3d81	a2 00		ldx #$00		ldx	#0
.3d83	20 bc 30	jsr $30bc		jsr	mainHandler
.3d86	68		pla				pla 		 						; restore type and position.
.3d87	8d 26 0d	sta $0d26			sta 	varType
.3d8a	68		pla				pla
.3d8b	85 2b		sta $2b				sta 	temp0+1
.3d8d	68		pla				pla
.3d8e	85 2a		sta $2a				sta 	temp0
.3d90	a5 50		lda $50				lda 	esInt1 						; limit array max to 4096.
.3d92	29 e0		and #$e0			and 	#$E0
.3d94	05 58		ora $58				ora 	esInt2
.3d96	05 60		ora $60				ora 	esInt3
.3d98	f0 0f		beq $3da9			beq 	_CASizeOk
.3d9a					_CASize:
.3d9a	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.3d9c	20 3f 14	jsr $143f		jsr	errorHandler
.3d9f					_CAFound:
.3d9f	a2 19		ldx #$19			ldx 	#ErrorID_DupArray
.3da1	20 3f 14	jsr $143f		jsr	errorHandler
.3da4					_CANotArray:
.3da4	a2 1a		ldx #$1a			ldx 	#ErrorID_NotArray
.3da6	20 3f 14	jsr $143f		jsr	errorHandler
.3da9					_CASizeOk:
.3da9	e6 48		inc $48				inc 	esInt0 						; bump it by one, as we index from 0
.3dab	d0 02		bne $3daf			bne 	_CANoCarry 					; e.g. DIM A(10) ... A(0) - A(10)
.3dad	e6 49		inc $49				inc 	esInt0+1
.3daf					_CANoCarry:
.3daf	98		tya				tya
.3db0	48		pha				pha
.3db1	a0 05		ldy #$05			ldy 	#5
.3db3	a5 35		lda $35				lda 	lowMemory 					; copy low memory address in +5,+6
.3db5	91 2a		sta ($2a),y			sta 	(temp0),y 					; this is where it will come from
.3db7	c8		iny				iny
.3db8	a5 36		lda $36				lda 	lowMemory+1
.3dba	91 2a		sta ($2a),y			sta 	(temp0),y
.3dbc	c8		iny				iny
.3dbd	a5 48		lda $48				lda 	esInt0 						; copy maximum index value to +7,+8
.3dbf	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc1	c8		iny				iny
.3dc2	a5 50		lda $50				lda 	esInt1
.3dc4	91 2a		sta ($2a),y			sta 	(temp0),y
.3dc6	c8		iny				iny
.3dc7	ae 26 0d	ldx $0d26			ldx 	varType 					; get the length per element
.3dca	bd d6 3d	lda $3dd6,x			lda 	_CAActualSize-$3A-1,x
.3dcd	91 2a		sta ($2a),y			sta 	(temp0),y
.3dcf	aa		tax				tax 								; save size in X
.3dd0	a5 35		lda $35				lda 	lowMemory 					; set temp0 to low memory.
.3dd2	85 2a		sta $2a				sta 	temp0
.3dd4	a5 36		lda $36				lda 	lowMemory+1
.3dd6	85 2b		sta $2b				sta 	temp0+1
.3dd8	a9 00		lda #$00			lda 	#0 							; temp1 is the counter.
.3dda	85 2c		sta $2c				sta 	temp1
.3ddc	85 2d		sta $2d				sta 	temp1+1
.3dde					_CAInitialiseArray:
.3dde	a0 00		ldy #$00			ldy 	#0 							; write a null record at temp0
.3de0	ad 26 0d	lda $0d26			lda 	varType 					; base type of array in A.
.3de3	29 fe		and #$fe			and 	#$FE
.3de5	20 fa 3c	jsr $3cfa			jsr 	ZeroTemp0Y
.3de8	8a		txa				txa 								; add X to temp0, also updating lowMemory
.3de9	18		clc				clc
.3dea	65 2a		adc $2a				adc 	temp0
.3dec	85 2a		sta $2a				sta 	temp0
.3dee	85 35		sta $35				sta 	lowMemory
.3df0	a5 2b		lda $2b				lda 	temp0+1
.3df2	69 00		adc #$00			adc 	#0
.3df4	85 2b		sta $2b				sta 	temp0+1
.3df6	85 36		sta $36				sta 	lowMemory+1
.3df8	c5 34		cmp $34				cmp 	highMemory+1				; out of memory check
.3dfa	b0 1c		bcs $3e18			bcs 	_CAMemory
.3dfc	e6 2c		inc $2c				inc 	temp1 						; bump the counter.
.3dfe	d0 02		bne $3e02			bne 	_CAIANoCarry
.3e00	e6 2d		inc $2d				inc 	temp1+1
.3e02					_CAIANoCarry:
.3e02	a5 48		lda $48				lda 	esInt0 						; counter reached max index
.3e04	c5 2c		cmp $2c				cmp 	temp1
.3e06	d0 d6		bne $3dde			bne 	_CAInitialiseArray
.3e08	a5 50		lda $50				lda 	esInt1
.3e0a	c5 2d		cmp $2d				cmp 	temp1+1
.3e0c	d0 d0		bne $3dde			bne 	_CAInitialiseArray
.3e0e	68		pla				pla
.3e0f	a8		tay				tay
.3e10	60		rts				rts
.3e11					_CAActualSize:
>3e11	04 00						.byte 	VarISize,0
>3e13	02 00						.byte 	VarSSize,0
>3e15	06 00						.byte 	VarFSize,0
>3e17	db						.byte 	$DB
.3e18					_CAMemory:
.3e18	a2 21		ldx #$21			ldx 	#ErrorID_Memory
.3e1a	20 3f 14	jsr $143f		jsr	errorHandler

;******  Return to file: variable/variable.asm


;******  Processing file: variable/find.asm

.3e1d					FindVariable:
.3e1d	98		tya				tya
.3e1e	48		pha				pha
.3e1f	98		tya				tya 								; point temp2 to the actual name
.3e20	18		clc				clc 								; in memory of the variable being created
.3e21	65 28		adc $28				adc 	codePtr
.3e23	85 2e		sta $2e				sta 	temp2
.3e25	a5 29		lda $29				lda 	codePtr+1
.3e27	69 00		adc #$00			adc 	#0
.3e29	85 2f		sta $2f				sta 	temp2+1
.3e2b	a0 00		ldy #$00			ldy 	#0
.3e2d	a5 3b		lda $3b				lda 	hashList 					; copy hashlist to temp0
.3e2f	85 2a		sta $2a				sta 	temp0
.3e31	a5 3c		lda $3c				lda 	hashList+1
.3e33	85 2b		sta $2b				sta 	temp0+1
.3e35	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.3e37	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e39	f0 2c		beq $3e67			beq 	_FVFail
.3e3b	aa		tax				tax
.3e3c	88		dey				dey		 							; get LSB
.3e3d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e3f	85 2a		sta $2a				sta 	temp0 						; update pointer.
.3e41	86 2b		stx $2b				stx 	temp0+1
.3e43	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.3e45	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e47	cd 25 0d	cmp $0d25			cmp 	varHash
.3e4a	d0 e9		bne $3e35			bne 	_FVNext 					; if not, no point in checking the name.
.3e4c	88		dey				dey 								; copy name pointer (+2,+3) to temp1.
.3e4d	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e4f	85 2d		sta $2d				sta 	temp1+1
.3e51	88		dey				dey
.3e52	b1 2a		lda ($2a),y			lda 	(temp0),y
.3e54	85 2c		sta $2c				sta 	temp1
.3e56	a0 00		ldy #$00			ldy 	#0
.3e58					_FVCheck:
.3e58	b1 2c		lda ($2c),y			lda 	(temp1),y 					; compare names
.3e5a	d1 2e		cmp ($2e),y			cmp 	(temp2),y
.3e5c	d0 d7		bne $3e35			bne 	_FVNext		 				; fail if different.
.3e5e	c8		iny				iny
.3e5f	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.3e61	90 f5		bcc $3e58			bcc 	_FVCheck
.3e63	68		pla				pla
.3e64	a8		tay				tay
.3e65	38		sec				sec
.3e66	60		rts				rts
.3e67					_FVFail:
.3e67	68		pla				pla
.3e68	a8		tay				tay
.3e69	18		clc				clc
.3e6a	60		rts				rts

;******  Return to file: variable/variable.asm


;******  Processing file: variable/reset.asm

.3e6b					HashTableReset:
.3e6b	a2 60		ldx #$60			ldx 	#6*2*hashTableSize			; 6 types, 2 bytes per table entry.
.3e6d	a9 00		lda #$00			lda 	#0
.3e6f					_HTRClear:
.3e6f	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.3e72	ca		dex				dex
.3e73	d0 fa		bne $3e6f			bne 	_HTRClear
.3e75	60		rts				rts

;******  Return to file: variable/variable.asm

.3e76					variableHandler:
.3e76	7c 79 3e	jmp ($3e79,x)			jmp 	(variableVectors,x)
.3e79					variableVectors:
>3e79	74 3b					.word AccessVariable       ; index 0
>3e7b	5c 3d					.word CreateArray          ; index 2
>3e7d	6b 3e					.word HashTableReset       ; index 4

;******  Return to file: basic.asm

.3e7f					section_end_variable:
.3e7f					section_start_footer:

;******  Processing file: footer/footer.asm


;******  Processing file: footer/99end.asm

.003d					endZeroPage:
.0d28					endStorage:
>3e7f							.align 	256
.3f00					programMemory:
>3eff	ff						.byte 	$FF

;******  Return to file: footer/footer.asm


;******  Return to file: basic.asm

.3f00					section_end_footer:

;******  End of listing
