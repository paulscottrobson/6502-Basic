
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ../source/basic.asm
; Mon Mar  1 15:31:42 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/basic.asm


;******  Processing file: ../source/main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/02macros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					highMemory:
>0acc							.fill 	2
.0ace					lowMemory:
>0ace							.fill 	2
.0ad0					convertBuffer:
>0ad0							.fill 	35

;******  Processing file: ../source/main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ../source/main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/imath/intmacros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/errorhandler.inc


;******  Processing file: ../source/error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assertion failed
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma
=10					ErrorID_NoReference = 10 ; Missing reference
=11					ErrorID_LineNumber = 11 ; Line Number not found
=12					ErrorID_StrLen = 12 ; String too long.
=13					ErrorID_ReturnErr = 13 ; RETURN without GOSUB
=14					ErrorID_UntilErr = 14 ; UNTIL without REPEAT
=15					ErrorID_NextErr = 15 ; NEXT without FOR
=16					ErrorID_WendErr = 16 ; WEND without WHILE
=17					ErrorID_BadIndex = 17 ; Bad NEXT index
=18					ErrorID_Struct = 18 ; Structures nested wrong
=19					ErrorID_NoAuto = 19 ; Cannot create variable

;******  Return to file: ../source/error/errorhandler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/memory.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.asm


;******  Processing file: ../source/main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 1d 12	jmp $121d			jmp 	Command_Run
.1f48					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ../source/main/../generated/testcode.inc

>5000	09 0a 00 01 02 3e 8d 6a			.byte 9,10,0,1,2,62,141,106,128,0
>5008	80 00

;******  Return to file: ../source/main/00start.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/assert.asm

.101a					Command_Assert:
.101a	20 72 17	jsr $1772			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 6c 1c	jsr $1c6c			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.1025	20 52 1d	jsr $1d52			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	8d cc 0a	sta $0acc			sta 	highMemory
.1030	ad cb 0a	lda $0acb			lda 	endMemory+1
.1033	8d cd 0a	sta $0acd			sta 	highMemory+1
.1036	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad c9 0a	lda $0ac9			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d ce 0a	sta $0ace			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d cf 0a	sta $0acf			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 6c 10	jsr $106c			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	20 d2 1c	jsr $1cd2			jsr 	RSReset 					; reset the return stack.
.1064	a2 02		ldx #$02		ldx	#2
.1066	20 41 1f	jsr $1f41		jsr	variableHandler
.1069	68		pla				pla
.106a	a8		tay				tay
.106b	60		rts				rts
.106c					AdvanceLowMemoryByte:
.106c	18		clc				clc
.106d	6d ce 0a	adc $0ace			adc 	lowMemory
.1070	8d ce 0a	sta $0ace			sta 	lowMemory
.1073	90 03		bcc $1078			bcc 	_ALMBExit
.1075	ee cf 0a	inc $0acf			inc 	lowMemory+1
.1078					_ALMBExit:
.1078	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/for.asm

.1f48					Command_FOR:
.1f48	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.1f4a	a2 0b		ldx #$0b			ldx 	#11
.1f4c	20 e0 1c	jsr $1ce0			jsr 	RSClaim
.1f4f	20 b5 10	jsr $10b5			jsr 	CommandLET 					; do the same as LET.
.1f52	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1f54	c9 80		cmp #$80			cmp 	#$80
.1f56	d0 4c		bne $1fa4			bne 	_CFType
.1f58	a9 c6		lda #$c6			lda 	#TKW_TO 					; check TO present.
.1f5a	20 ad 1c	jsr $1cad			jsr 	CheckToken
.1f5d	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1f5f	20 74 17	jsr $1774			jsr 	EvaluateInteger				; get terminal value in stack 1
.1f62	98		tya				tya
.1f63	48		pha				pha
.1f64	a0 04		ldy #$04			ldy 	#4
.1f66	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.1f68	91 78		sta ($78),y			sta 	(rsPointer),y
.1f6a	c8		iny				iny
.1f6b	a5 50		lda $50				lda		esInt1
.1f6d	91 78		sta ($78),y			sta 	(rsPointer),y
.1f6f	c8		iny				iny
.1f70	a9 01		lda #$01			lda 	#1  						; the default step in 6
.1f72	91 78		sta ($78),y			sta 	(rsPointer),y
.1f74	c8		iny				iny
.1f75	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1f77	91 78		sta ($78),y			sta 	(rsPointer),y
.1f79	c8		iny				iny
.1f7a	a5 51		lda $51				lda		esInt1+1
.1f7c	91 78		sta ($78),y			sta 	(rsPointer),y
.1f7e	c8		iny				iny
.1f7f	a5 59		lda $59				lda		esInt2+1
.1f81	91 78		sta ($78),y			sta 	(rsPointer),y
.1f83	c8		iny				iny
.1f84	a5 61		lda $61				lda		esInt3+1
.1f86	91 78		sta ($78),y			sta 	(rsPointer),y
.1f88	68		pla				pla
.1f89	a8		tay				tay
.1f8a	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.1f8c	c9 c7		cmp #$c7			cmp 	#TKW_STEP
.1f8e	d0 0e		bne $1f9e			bne 	_CFDone
.1f90	c8		iny				iny									; skip over step.
.1f91	20 74 17	jsr $1774			jsr 	EvaluateInteger 			; get step
.1f94	98		tya				tya
.1f95	48		pha				pha
.1f96	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1f98	a0 06		ldy #$06			ldy 	#6
.1f9a	91 78		sta ($78),y			sta 	(rsPointer),y
.1f9c	68		pla				pla
.1f9d	a8		tay				tay
.1f9e					_CFDone:
.1f9e	a9 01		lda #$01			lda 	#1
.1fa0	20 03 1d	jsr $1d03			jsr 	RSSavePosition 				; save position.
.1fa3	60		rts				rts
.1fa4					_CFType:
.1fa4	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1fa6	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1fa9					Command_NEXT:
.1fa9	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1fab	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1fad	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1faf	f0 05		beq $1fb6			beq 	_isok
.1fb1	a2 0f		ldx #$0f			ldx 	#ErrorID_nextErr
.1fb3	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1fb6					_isok:
.1fb6	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.1fb8	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1fba	b0 18		bcs $1fd4			bcs 	_CNNoIndex
.1fbc	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1fbe	20 a1 17	jsr $17a1			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1fc1	98		tya				tya
.1fc2	48		pha				pha
.1fc3	a0 04		ldy #$04			ldy 	#4 							; check same variable
.1fc5	b1 78		lda ($78),y			lda 	(rsPointer),y
.1fc7	d5 48		cmp $48,x			cmp 	esInt0,x
.1fc9	d0 76		bne $2041			bne 	_CNBadIndex
.1fcb	c8		iny				iny
.1fcc	b1 78		lda ($78),y			lda 	(rsPointer),y
.1fce	d5 50		cmp $50,x			cmp 	esInt1,x
.1fd0	d0 6f		bne $2041			bne 	_CNBadIndex
.1fd2	68		pla				pla
.1fd3	a8		tay				tay
.1fd4					_CNNoIndex:
.1fd4	98		tya				tya
.1fd5	48		pha				pha
.1fd6	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1fd8	b1 78		lda ($78),y			lda 	(rsPointer),y
.1fda	85 04		sta $04				sta 	temp0
.1fdc	c8		iny				iny
.1fdd	b1 78		lda ($78),y			lda 	(rsPointer),y
.1fdf	85 05		sta $05				sta 	temp0+1
.1fe1	c8		iny				iny
.1fe2	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1fe4	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.1fe6	85 09		sta $09				sta 	temp2+1 					; save for later.
.1fe8	10 01		bpl $1feb			bpl 	_CNSignX
.1fea	ca		dex				dex  								; X = $FF
.1feb					_CNSignX:
.1feb	18		clc				clc 								; add to the LSB
.1fec	a0 00		ldy #$00			ldy 	#0
.1fee	71 04		adc ($04),y			adc 	(temp0),y
.1ff0	91 04		sta ($04),y			sta 	(temp0),y
.1ff2					_CNPropogate:
.1ff2	c8		iny				iny  								; add the sign extended in X to the rest.
.1ff3	8a		txa				txa
.1ff4	71 04		adc ($04),y			adc 	(temp0),y
.1ff6	91 04		sta ($04),y			sta 	(temp0),y
.1ff8	c8		iny				iny
.1ff9	8a		txa				txa
.1ffa	71 04		adc ($04),y			adc 	(temp0),y
.1ffc	91 04		sta ($04),y			sta 	(temp0),y
.1ffe	c8		iny				iny
.1fff	8a		txa				txa
.2000	71 04		adc ($04),y			adc 	(temp0),y
.2002	91 04		sta ($04),y			sta 	(temp0),y
.2004	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.2005	a5 78		lda $78				lda 	rsPointer
.2007	69 07		adc #$07			adc 	#7
.2009	85 06		sta $06				sta 	temp1
.200b	a9 00		lda #$00			lda 	#0
.200d	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.200f	a8		tay				tay 								; and clear the Y register again.
.2010	65 79		adc $79				adc 	rsPointer+1
.2012	85 07		sta $07				sta 	temp1+1
.2014	38		sec				sec 								; calculate current - limit oring interim values.
.2015	20 4d 20	jsr $204d			jsr 	_CNCompare
.2018	20 4d 20	jsr $204d			jsr 	_CNCompare
.201b	20 4d 20	jsr $204d			jsr 	_CNCompare
.201e	20 4d 20	jsr $204d			jsr 	_CNCompare
.2021	50 02		bvc $2025			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.2023	49 80		eor #$80			eor 	#$80
.2025					_CNNoOverflow:
.2025	a4 09		ldy $09				ldy 	temp2+1						; get step back
.2027	30 1d		bmi $2046			bmi 	_CNCheckDownto
.2029	c9 00		cmp #$00			cmp 	#0
.202b	30 0c		bmi $2039			bmi 	_CNLoopRound 				; loop round if < =
.202d	a5 08		lda $08				lda 	temp2
.202f	f0 08		beq $2039			beq 	_CNLoopRound
.2031					_CNLoopExit:
.2031	68		pla				pla
.2032	a8		tay				tay
.2033	a9 0b		lda #$0b			lda 	#11
.2035	20 f9 1c	jsr $1cf9			jsr 	RSFree
.2038	60		rts				rts
.2039					_CNLoopRound:
.2039	68		pla				pla
.203a	a8		tay				tay
.203b	a9 01		lda #$01			lda 	#1
.203d	20 16 1d	jsr $1d16			jsr 	RSLoadPosition				; go back to the loop top
.2040	60		rts				rts
.2041					_CNBadIndex:
.2041	a2 11		ldx #$11			ldx 	#ErrorID_BadIndex
.2043	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.2046					_CNCheckDownto:
.2046	c9 00		cmp #$00			cmp 	#0
.2048	10 ef		bpl $2039			bpl 	_CNLoopRound
.204a	4c 31 20	jmp $2031			jmp 	_CNLoopExit
.204d					_CNCompare:
.204d	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.204f	f1 06		sbc ($06),y			sbc 	(temp1),y
.2051	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.2053	85 08		sta $08				sta 	temp2
.2055	c8		iny				iny
.2056	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/if.asm

.1079					CommandIf:
.1079	20 72 17	jsr $1772			jsr 	EvaluateRootInteger 		; if what ?
.107c	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107e	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1080	f0 04		beq $1086			beq 	_IfSimple
.1082	c9 a0		cmp #$a0			cmp 	#TKW_THEN
.1084	d0 1b		bne $10a1			bne 	_IfComplex
.1086					_IfSimple:
.1086	20 6c 1c	jsr $1c6c			jsr 	MInt32Zero					; check if TOS zero
.1089	f0 10		beq $109b			beq 	_IfEOL 						; go to next line.
.108b	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.108d	c8		iny				iny
.108e	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1090	f0 0c		beq $109e			beq 	_IfGoto 					; do the Goto code
.1092	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1094	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1096	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1098	f0 04		beq $109e			beq 	_IfGoto
.109a	60		rts				rts 								; else continue on this line.
.109b					_IfEOL:
.109b	4c 6f 13	jmp $136f			jmp 	AdvanceNextLine 			; go to next line
.109e					_IfGoto:
.109e	4c ae 13	jmp $13ae			jmp 	CommandGoto
.10a1					_IfComplex:
.10a1	20 6c 1c	jsr $1c6c			jsr 	MInt32Zero 					; is it true ?
.10a4	f0 01		beq $10a7			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a6	60		rts				rts 								; else continue.
.10a7					_IFSkip:
.10a7	a9 d0		lda #$d0			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a9	a2 a1		ldx #$a1			ldx 	#TKW_ENDIF
.10ab	4c c0 20	jmp $20c0			jmp		ScanForward
.10ae					Command_ELSE:
.10ae	a2 a1		ldx #$a1			ldx 	#TKW_ENDIF
.10b0	8a		txa				txa
.10b1	4c c0 20	jmp $20c0			jmp		ScanForward
.10b4					Command_ENDIF:
.10b4	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/let.asm

.10b5					CommandLet:
.10b5	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b7	20 a1 17	jsr $17a1			jsr 	EvaluateReference
.10ba	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10bc	20 ad 1c	jsr $1cad			jsr 	CheckToken
.10bf	e8		inx				inx 								; do RHS
.10c0	20 55 17	jsr $1755			jsr 	Evaluate 					; evaluate and derefernce
.10c3	ca		dex				dex
.10c4	20 c8 10	jsr $10c8			jsr 	WriteValue 					; write it out
.10c7	60		rts				rts
.10c8					WriteValue:
.10c8	98		tya				tya
.10c9	48		pha				pha
.10ca	20 21 11	jsr $1121			jsr 	WVSetTemp0 					; set temp0 to point to target address.
.10cd	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cf	55 41		eor $41,x			eor 	esType+1,x
.10d1	29 40		and #$40			and 	#$40
.10d3	d0 47		bne $111c			bne		_WVType
.10d5	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d7	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d9	29 40		and #$40			and 	#$40
.10db	d0 30		bne $110d			bne 	_WVCopyData2
.10dd	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10df	15 41		ora $41,x			ora 	esType+1,x
.10e1	4a		lsr a				lsr 	a
.10e2	90 18		bcc $10fc			bcc 	_WVCopyData4
.10e4	b5 40		lda $40,x			lda 	esType,x
.10e6	4a		lsr a				lsr 	a
.10e7	90 33		bcc $111c			bcc 	_WVType
.10e9	e8		inx				inx 								; force the value being written to be a float.
.10ea	20 20 14	jsr $1420			jsr 	BPMakeFloat
.10ed	ca		dex				dex
.10ee	20 21 11	jsr $1121			jsr 	WVSetTemp0 					; set Temp0 to write address
.10f1	e8		inx				inx
.10f2	8a		txa				txa
.10f3	a2 1e		ldx #$1e		ldx	#30
.10f5	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.10f8	aa		tax				tax
.10f9	4c 19 11	jmp $1119			jmp 	_WVCopyExit
.10fc					_WVCopyData4:
.10fc	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.10fe	29 20		and #$20			and 	#$20
.1100	d0 11		bne $1113			bne 	_WVCopyData1
.1102	a0 03		ldy #$03			ldy 	#3
.1104	b5 61		lda $61,x			lda 	esInt3+1,x
.1106	91 04		sta ($04),y			sta 	(temp0),y
.1108	88		dey				dey
.1109	b5 59		lda $59,x			lda 	esInt2+1,x
.110b	91 04		sta ($04),y			sta 	(temp0),y
.110d					_WVCopyData2:
.110d	a0 01		ldy #$01			ldy 	#1
.110f	b5 51		lda $51,x			lda 	esInt1+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113					_WVCopyData1:
.1113	a0 00		ldy #$00			ldy 	#0
.1115	b5 49		lda $49,x			lda 	esInt0+1,x
.1117	91 04		sta ($04),y			sta 	(temp0),y
.1119					_WVCopyExit:
.1119	68		pla				pla
.111a	a8		tay				tay
.111b	60		rts				rts
.111c					_WVType:
.111c	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.111e	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1121					WVSetTemp0:
.1121	b5 48		lda $48,x			lda 	esInt0,x
.1123	85 04		sta $04				sta 	temp0
.1125	b5 50		lda $50,x			lda 	esInt1,x
.1127	85 05		sta $05				sta 	temp0+1
.1129	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/new.asm

.112a					Command_New:
.112a	20 7f 12	jsr $127f			jsr 	ResetCodeAddress 			; point to first line
.112d	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.112f	98		tya				tya
.1130	91 02		sta ($02),y			sta 	(codePtr),y
.1132	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.1135	4c 6c 13	jmp $136c			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/poke.asm

.1138					Command_Poke:
.1138	a9 01		lda #$01			lda 	#1
.113a	d0 06		bne $1142			bne 	PokeGeneral
.113c					Command_Doke:
.113c	a9 02		lda #$02			lda 	#2
.113e	d0 02		bne $1142			bne 	PokeGeneral
.1140					Command_Loke:
.1140	a9 03		lda #$03			lda 	#3
.1142					PokeGeneral:
.1142	48		pha				pha 								; save size
.1143	20 72 17	jsr $1772			jsr 	EvaluateRootInteger 		; target address
.1146	20 c5 1c	jsr $1cc5			jsr	 	CheckComma
.1149	e8		inx				inx
.114a	20 74 17	jsr $1774			jsr 	EvaluateInteger 			; what value to POKE ?
.114d	ca		dex				dex
.114e	20 21 11	jsr $1121			jsr 	WVSetTemp0 					; temp0 points to the target address
.1151	84 0a		sty $0a				sty 	tempShort 					; save Y
.1153	68		pla				pla 								; get copy type and dispatch
.1154	aa		tax				tax
.1155	ca		dex				dex
.1156	f0 14		beq $116c			beq 	_Poke1
.1158	ca		dex				dex
.1159	f0 0b		beq $1166			beq 	_Poke2
.115b	a0 03		ldy #$03			ldy 	#3
.115d	a5 61		lda $61				lda 	esInt3+1
.115f	91 04		sta ($04),y			sta 	(temp0),y
.1161	88		dey				dey
.1162	a5 59		lda $59				lda 	esInt2+1
.1164	91 04		sta ($04),y			sta 	(temp0),y
.1166					_Poke2:
.1166	a0 01		ldy #$01			ldy 	#1
.1168	a5 51		lda $51				lda 	esInt1+1
.116a	91 04		sta ($04),y			sta 	(temp0),y
.116c					_Poke1:
.116c	a0 00		ldy #$00			ldy 	#0
.116e	a5 49		lda $49				lda 	esInt0+1
.1170	91 04		sta ($04),y			sta 	(temp0),y
.1172	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1174	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/print.asm

.0af3					lastPrintToken:
>0af3							.fill 	1
.1175					Command_Print:
.1175	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1177	8d f3 0a	sta $0af3			sta 	lastPrintToken
.117a	88		dey				dey
.117b					_PrintLoopSkip:
.117b	c8		iny				iny
.117c					_PrintLoop:
.117c	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.117e	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1180	f0 5b		beq $11dd			beq 	_PrintExit
.1182	c9 c2		cmp #$c2			cmp 	#TKW_COLON
.1184	f0 57		beq $11dd			beq 	_PrintExit
.1186	8d f3 0a	sta $0af3			sta 	lastPrintToken 				; update LPT
.1189	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.118b	f0 ee		beq $117b			beq 	_PrintLoopSkip
.118d	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.118f	f0 3c		beq $11cd			beq	 	_PrintNewLine
.1191	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; , is print tab
.1193	f0 40		beq $11d5			beq 	_PrintTab
.1195	20 53 17	jsr $1753			jsr 	EvaluateRoot 				; evaluate something at the root
.1198	a9 d0		lda #$d0			lda 	#(convertBuffer) & $FF
.119a	85 04		sta $04				sta 	temp0
.119c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.119e	85 05		sta $05				sta 	1+(temp0)
.11a0	a5 40		lda $40				lda 	esType 						; get type
.11a2	f0 15		beq $11b9			beq		_PrintInteger
.11a4	4a		lsr a				lsr 	a 							; check for floating point
.11a5	b0 08		bcs $11af			bcs 	_PrintFloat
.11a7					_PrintString:
.11a7	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11a9	20 21 11	jsr $1121			jsr 	WVSetTemp0
.11ac	4c c7 11	jmp $11c7			jmp 	_PrintTemp0 				; print no leading space.
.11af					_PrintFloat:
.11af	a9 00		lda #$00			lda 	#0 							; stack level.
.11b1	a2 14		ldx #$14		ldx	#20
.11b3	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.11b6	4c c0 11	jmp $11c0			jmp 	_PrintSpaceTemp0
.11b9					_PrintInteger:
.11b9	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11bb	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11bd	20 9b 1b	jsr $1b9b			jsr 	MInt32ToString				; convert to text
.11c0					_PrintSpaceTemp0:
.11c0	a9 20		lda #$20			lda 	#32
.11c2	a2 02		ldx #$02		ldx	#2
.11c4	20 49 1d	jsr $1d49		jsr	deviceHandler
.11c7					_PrintTemp0:
.11c7	20 ee 11	jsr $11ee			jsr 	PrintString
.11ca	4c 7c 11	jmp $117c			jmp 	_PrintLoop
.11cd					_PrintNewLine:
.11cd	a2 00		ldx #$00		ldx	#0
.11cf	20 49 1d	jsr $1d49		jsr	deviceHandler
.11d2	4c 7b 11	jmp $117b			jmp 	_PrintLoopSkip
.11d5					_PrintTab:
.11d5	a2 04		ldx #$04		ldx	#4
.11d7	20 49 1d	jsr $1d49		jsr	deviceHandler
.11da	4c 7b 11	jmp $117b			jmp 	_PrintLoopSkip
.11dd					_PrintExit:
.11dd	ad f3 0a	lda $0af3			lda		lastPrintToken 				; check last token
.11e0	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11e2	f0 09		beq $11ed			beq 	_PrintExit2
.11e4	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.11e6	f0 05		beq $11ed			beq 	_PrintExit2
.11e8	a2 00		ldx #$00		ldx	#0
.11ea	20 49 1d	jsr $1d49		jsr	deviceHandler
.11ed					_PrintExit2:
.11ed	60		rts				rts
.11ee					PrintString:
.11ee	8a		txa				txa
.11ef	48		pha				pha
.11f0	98		tya				tya
.11f1	48		pha				pha
.11f2	a0 00		ldy #$00			ldy 	#0							; get length
.11f4	b1 04		lda ($04),y			lda 	(temp0),y
.11f6	aa		tax				tax 								; into X
.11f7	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.11f9	f0 10		beq $120b			beq 	_PSExit
.11fb	ca		dex				dex
.11fc	8a		txa				txa
.11fd	48		pha				pha
.11fe	c8		iny				iny
.11ff	b1 04		lda ($04),y			lda 	(temp0),y
.1201	a2 02		ldx #$02		ldx	#2
.1203	20 49 1d	jsr $1d49		jsr	deviceHandler
.1206	68		pla				pla
.1207	aa		tax				tax
.1208	4c f7 11	jmp $11f7			jmp 	_PSLoop
.120b					_PSExit:
.120b	68		pla				pla
.120c	a8		tay				tay
.120d	68		pla				pla
.120e	aa		tax				tax
.120f	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/rem.asm

.1210					Command_Rem:
.1210					Command_Rem2:
.1210	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1212	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1214	d0 06		bne $121c			bne 	_CRNotString
.1216	c8		iny				iny
.1217	98		tya				tya
.1218	38		sec				sec
.1219	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.121b	a8		tay				tay
.121c					_CRNotString:
.121c	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/repeat.asm

.2057					Command_Repeat:
.2057	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2059	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.205b	20 e0 1c	jsr $1ce0			jsr 	RSClaim
.205e	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2060	20 03 1d	jsr $1d03			jsr 	RSSavePosition
.2063	60		rts				rts
.2064					Command_Until:
.2064	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2066	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2068	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.206a	f0 05		beq $2071			beq 	_isok
.206c	a2 0e		ldx #$0e			ldx 	#ErrorID_untilErr
.206e	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.2071					_isok:
.2071	20 72 17	jsr $1772			jsr 	EvaluateRootInteger 		; at the bottom.
.2074	20 6c 1c	jsr $1c6c			jsr 	MInt32Zero					; check if TOS zero
.2077	d0 06		bne $207f			bne 	_CUExit
.2079	a9 01		lda #$01			lda 	#1
.207b	20 16 1d	jsr $1d16			jsr 	RSLoadPosition 				; reload the position from offset 1.
.207e	60		rts				rts
.207f					_CUExit:
.207f	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2081	20 f9 1c	jsr $1cf9			jsr 	RSFree
.2084	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/run.asm

.121d					Command_Run:
.121d	a2 ff		ldx #$ff			ldx 	#$FF
.121f	9a		txs				txs
.1220	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1223	20 7f 12	jsr $127f			jsr 	ResetCodeAddress
.1226	a0 03		ldy #$03			ldy 	#3
.1228					CRNextInstruction:
.1228	64 7b		stz $7b				stz 	softMemAlloc+1
.122a	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.122c	10 1c		bpl $124a			bpl 	_CRNotToken
.122e	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1230	b0 0c		bcs $123e			bcs 	_CRExecute
.1232	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; unary is ignored.
.1234	b0 56		bcs $128c			bcs 	Unimplemented
.1236	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1238	b0 04		bcs $123e			bcs 	_CRExecute
.123a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.123c	b0 16		bcs $1254			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.123e					_CRExecute:
.123e	c8		iny				iny 								; consume it.
.123f	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1240	aa		tax				tax
.1241	20 47 12	jsr $1247			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1244	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.1247					_CRRunRoutine:
.1247	7c 95 12	jmp ($1295,x)			jmp 	(Group0Vectors,x)
.124a					_CRNotToken:
.124a	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.124c	b0 3e		bcs $128c			bcs 	Unimplemented
.124e					_CRDefaultLet:
.124e	20 b5 10	jsr $10b5			jsr 	CommandLet 					; do the default, LET
.1251	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.1254					_CRCheckIndirect:
.1254	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1256	f0 f6		beq $124e			beq 	_CRDefaultLet
.1258	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.125a	f0 f2		beq $124e			beq 	_CRDefaultLet
.125c	d0 2e		bne $128c			bne 	Unimplemented
.125e					CommandShift1:
.125e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1260	10 2a		bpl $128c			bpl 	Unimplemented 				; we have an error as this should not happen.
.1262	0a		asl a				asl 	a 							; double into X
.1263	aa		tax				tax
.1264	c8		iny				iny 								; advance over it.
.1265	20 6b 12	jsr $126b			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1268	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.126b					_RunIt:
.126b	7c 49 13	jmp ($1349,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.126e					CommandShift2:
.126e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1270	10 1a		bpl $128c			bpl 	Unimplemented 				; we have an error as this should not happen.
.1272	0a		asl a				asl 	a 							; double into X
.1273	aa		tax				tax
.1274	c8		iny				iny 								; advance over it.
.1275	20 7b 12	jsr $127b			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1278	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.127b					_RunIt:
.127b	7c 59 13	jmp ($1359,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.127e					CommandColon:
.127e	60		rts				rts
.127f					ResetCodeAddress:
.127f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1282	85 02		sta $02				sta 	codePtr
.1284	ad c9 0a	lda $0ac9			lda 	basePage+1
.1287	85 03		sta $03				sta 	codePtr+1
.1289	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.128b	60		rts				rts
.128c					Unimplemented:
>128c	db						.byte 	$DB
.128d	4c 8c 12	jmp $128c			jmp 	Unimplemented
.1290					TKErr01:
.1290					TKErr02:
.1290					TKErr03:
.1290					TKErr04:
.1290					TKErr05:
.1290					TKErr06:
.1290					TKErr07:
.1290					TKErr08:
.1290	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1292	20 52 1d	jsr $1d52			jsr 	ErrorHandler

;******  Processing file: ../source/main/commands/../../generated/tokenvectors0.inc

.1295					Group0Vectors:
>1295	6f 13					.word	AdvanceNextLine          ; $80 [[eol]]
>1297	5e 12					.word	CommandShift1            ; $81 [[sh1]]
>1299	6e 12					.word	CommandShift2            ; $82 [[sh2]]
>129b	8c 12					.word	Unimplemented            ; $83 [[sh3]]
>129d	8c 12					.word	Unimplemented            ; $84 [[fpc]]
>129f	90 12					.word	TKErr08                  ; $85 [[str]]
>12a1	c2 14					.word	AndHandler               ; $86 and
>12a3	af 14					.word	OrHandler                ; $87 or
>12a5	9c 14					.word	XorHandler               ; $88 xor
>12a7	e4 15					.word	CompareGreaterEq         ; $89 >=
>12a9	ee 15					.word	CompareLessEq            ; $8a <=
>12ab	d0 15					.word	CompareGreater           ; $8b >
>12ad	c6 15					.word	CompareLess              ; $8c <
>12af	bc 15					.word	CompareEquals            ; $8d =
>12b1	da 15					.word	CompareNotEquals         ; $8e <>
>12b3	2d 14					.word	AddHandler               ; $8f +
>12b5	50 14					.word	SubHandler               ; $90 -
>12b7	e8 14					.word	ShrHandler               ; $91 >>
>12b9	d5 14					.word	ShlHandler               ; $92 <<
>12bb	63 14					.word	MulHandler               ; $93 *
>12bd	76 14					.word	DivHandler               ; $94 /
>12bf	89 14					.word	ModHandler               ; $95 mod
>12c1	21 15					.word	PowerHandler             ; $96 ^
>12c3	fb 14					.word	WordRefHandler           ; $97 !
>12c5	0e 15					.word	ByteRefHandler           ; $98 ?
>12c7	57 20					.word	Command_Repeat           ; $99 repeat
>12c9	85 20					.word	Command_While            ; $9a while
>12cb	48 1f					.word	Command_FOR              ; $9b for
>12cd	79 10					.word	CommandIf                ; $9c if
>12cf	64 20					.word	Command_Until            ; $9d until
>12d1	a8 20					.word	Command_Wend             ; $9e wend
>12d3	a9 1f					.word	Command_NEXT             ; $9f next
>12d5	90 12					.word	TKErr06                  ; $a0 then
>12d7	b4 10					.word	Command_ENDIF            ; $a1 endif
>12d9	2b 17					.word	UnaryParenthesis         ; $a2 (
>12db	fe 17					.word	UnaryLen                 ; $a3 len(
>12dd	42 18					.word	UnarySgn                 ; $a4 sgn(
>12df	2b 18					.word	UnaryAbs                 ; $a5 abs(
>12e1	9b 18					.word	Unary_Random             ; $a6 random(
>12e3	e5 18					.word	Unary_Page               ; $a7 page
>12e5	41 1c					.word	MInt32True               ; $a8 true
>12e7	45 1c					.word	MInt32False              ; $a9 false
>12e9	b0 18					.word	Unary_Min                ; $aa min(
>12eb	b4 18					.word	Unary_Max                ; $ab max(
>12ed	8c 12					.word	Unimplemented            ; $ac sys(
>12ef	8c 12					.word	Unimplemented            ; $ad timer(
>12f1	8c 12					.word	Unimplemented            ; $ae event(
>12f3	8c 12					.word	Unimplemented            ; $af get(
>12f5	8c 12					.word	Unimplemented            ; $b0 inkey(
>12f7	8c 12					.word	Unimplemented            ; $b1 alloc(
>12f9	32 19					.word	ExecChr                  ; $b2 chr$(
>12fb	46 19					.word	ExecLeft                 ; $b3 left$(
>12fd	63 19					.word	ExecMid                  ; $b4 mid$(
>12ff	8b 19					.word	ExecRight                ; $b5 right$(
>1301	8c 12					.word	Unimplemented            ; $b6 str$(
>1303	8c 12					.word	Unimplemented            ; $b7 val(
>1305	59 18					.word	UnaryPeek                ; $b8 peek(
>1307	5f 18					.word	UnaryDeek                ; $b9 deek(
>1309	65 18					.word	UnaryLeek                ; $ba leek(
>130b	1c 18					.word	UnaryAsc                 ; $bb asc(
>130d	10 19					.word	UnaryIntToFloat          ; $bc int(
>130f	23 19					.word	UnaryFloatToInt          ; $bd float(
>1311	f3 18					.word	UnaryReference           ; $be @
>1313	09 19					.word	UnaryComplement          ; $bf ~
>1315	06 19					.word	UnaryHexMarker           ; $c0 &
>1317	90 12					.word	TKErr01                  ; $c1 )
>1319	7e 12					.word	CommandColon             ; $c2 :
>131b	90 12					.word	TKErr02                  ; $c3 ,
>131d	90 12					.word	TKErr03                  ; $c4 ;
>131f	8c 12					.word	Unimplemented            ; $c5 ]
>1321	90 12					.word	TKErr07                  ; $c6 to
>1323	90 12					.word	TKErr05                  ; $c7 step
>1325	90 12					.word	TKErr04                  ; $c8 proc
>1327	8c 12					.word	Unimplemented            ; $c9 endproc
>1329	8c 12					.word	Unimplemented            ; $ca local
>132b	10 12					.word	Command_Rem              ; $cb rem
>132d	b5 10					.word	CommandLet               ; $cc let
>132f	10 12					.word	Command_Rem2             ; $cd '
>1331	8c 12					.word	Unimplemented            ; $ce [
>1333	8c 12					.word	Unimplemented            ; $cf input
>1335	ae 10					.word	Command_ELSE             ; $d0 else
>1337	e0 13					.word	Command_VDU              ; $d1 vdu
>1339	8c 12					.word	Unimplemented            ; $d2 read
>133b	8c 12					.word	Unimplemented            ; $d3 data
>133d	8c 12					.word	Unimplemented            ; $d4 restore
>133f	75 11					.word	Command_Print            ; $d5 print
>1341	ae 13					.word	CommandGOTO              ; $d6 goto
>1343	83 13					.word	CommandGOSUB             ; $d7 gosub
>1345	96 13					.word	CommandRETURN            ; $d8 return
>1347	1a 10					.word	Command_Assert           ; $d9 assert
>1349	67 13					.word	CommandStop              ; $da stop
>134b	6c 13					.word	CommandEnd               ; $db end
>134d	8c 12					.word	Unimplemented            ; $dc dim
>134f	38 11					.word	Command_Poke             ; $dd poke
>1351	3c 11					.word	Command_Doke             ; $de doke
>1353	40 11					.word	Command_Loke             ; $df loke

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors1.inc

.1355					Group1Vectors:
>1355	28 10					.word	CommandClear             ; $86 clear
>1357	8c 12					.word	Unimplemented            ; $87 load
>1359	8c 12					.word	Unimplemented            ; $88 save
>135b	8c 12					.word	Unimplemented            ; $89 list
>135d	2a 11					.word	Command_New              ; $8a new
>135f	1d 12					.word	Command_Run              ; $8b run
>1361	8c 12					.word	Unimplemented            ; $8c code
>1363	8c 12					.word	Unimplemented            ; $8d option

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors2.inc

.1365					Group2Vectors:
>1365	8c 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: ../source/main/commands/run.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/stopend.asm

.1367					CommandStop:
.1367	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.1369	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.136c					CommandEnd:
.136c	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.136f					AdvanceNextLine:
.136f	a0 00		ldy #$00			ldy 	#0 							; get offset
.1371	b1 02		lda ($02),y			lda 	(codePtr),y
.1373	18		clc				clc 								; add to codePtr
.1374	65 02		adc $02				adc 	codePtr
.1376	85 02		sta $02				sta 	codePtr
.1378	90 02		bcc $137c			bcc 	_ANLNoCarry
.137a	e6 03		inc $03				inc 	codePtr+1
.137c					_ANLNoCarry:
.137c	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.137e	f0 ec		beq $136c			beq 	CommandEnd 					; execute END
.1380	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1382	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/transfer.asm

.1383					CommandGOSUB:
.1383	20 72 17	jsr $1772			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1386	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1388	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.138a	20 e0 1c	jsr $1ce0			jsr 	RSClaim
.138d	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.138f	20 03 1d	jsr $1d03			jsr 	RSSavePosition
.1392	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1394	f0 1b		beq $13b1			beq 	GotoTOS 					; and do a GOTO there.
.1396					CommandRETURN:
.1396	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1398	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.139a	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.139c	f0 05		beq $13a3			beq 	_isok
.139e	a2 0d		ldx #$0d			ldx 	#ErrorID_returnErr
.13a0	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.13a3					_isok:
.13a3	a9 01		lda #$01			lda 	#1
.13a5	20 16 1d	jsr $1d16			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13a8	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13aa	20 f9 1c	jsr $1cf9			jsr 	RSFree
.13ad	60		rts				rts
.13ae					CommandGOTO:
.13ae	20 72 17	jsr $1772			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.13b1					GotoTOS:
.13b1	20 7f 12	jsr $127f			jsr 	ResetCodeAddress 			; simple search.
.13b4					_GotoSearch:
.13b4	a0 00		ldy #$00			ldy 	#0 							; get offset
.13b6	b1 02		lda ($02),y			lda 	(codePtr),y
.13b8	f0 21		beq $13db			beq 	_GotoError 					; not found.
.13ba	c8		iny				iny									; check LSB match
.13bb	b1 02		lda ($02),y			lda 	(codePtr),y
.13bd	d5 48		cmp $48,x			cmp 	esInt0,x
.13bf	d0 07		bne $13c8			bne 	_GotoNext
.13c1	c8		iny				iny
.13c2	b1 02		lda ($02),y			lda 	(codePtr),y
.13c4	d5 50		cmp $50,x			cmp 	esInt1,x
.13c6	f0 10		beq $13d8			beq 	_GotoFound
.13c8					_GotoNext:
.13c8	a0 00		ldy #$00			ldy 	#0 							; go next line
.13ca	b1 02		lda ($02),y			lda 	(codePtr),y
.13cc	18		clc				clc
.13cd	65 02		adc $02				adc 	codePtr
.13cf	85 02		sta $02				sta 	codePtr
.13d1	90 e1		bcc $13b4			bcc 	_GotoSearch
.13d3	e6 03		inc $03				inc 	codePtr+1
.13d5	4c b4 13	jmp $13b4			jmp 	_GotoSearch
.13d8					_GotoFound:
.13d8	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.13da	60		rts				rts
.13db					_GotoError:
.13db	a2 0b		ldx #$0b			ldx 	#ErrorID_LineNumber
.13dd	20 52 1d	jsr $1d52			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/vdu.asm

.13e0					Command_VDU:
.13e0	20 72 17	jsr $1772			jsr 	EvaluateRootInteger 			; get integer at root.
.13e3	a5 48		lda $48				lda 	esInt0
.13e5	a2 02		ldx #$02		ldx	#2
.13e7	20 49 1d	jsr $1d49		jsr	deviceHandler
.13ea					_CVNext:
.13ea	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.13ec	c8		iny				iny
.13ed	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 						; comma, do again
.13ef	f0 ef		beq $13e0			beq 	Command_VDU
.13f1	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.13f3	d0 0a		bne $13ff			bne 	_CVExit
.13f5	a5 50		lda $50				lda 	esInt1
.13f7	a2 02		ldx #$02		ldx	#2
.13f9	20 49 1d	jsr $1d49		jsr	deviceHandler
.13fc	4c ea 13	jmp $13ea			jmp 	_CVNext
.13ff	88		dey		_CVExit:dey
.1400	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/while.asm

.2085					Command_While:
.2085	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2087	a2 04		ldx #$04			ldx 	#4
.2089	20 e0 1c	jsr $1ce0			jsr 	RSClaim 					; create on stack.
.208c	88		dey				dey
.208d	a9 01		lda #$01			lda 	#1
.208f	20 03 1d	jsr $1d03			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2092	c8		iny				iny
.2093	20 74 17	jsr $1774			jsr 	EvaluateInteger				; get the conditional
.2096	20 6c 1c	jsr $1c6c			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2099	f0 01		beq $209c			beq 	_CWFail
.209b	60		rts				rts
.209c					_CWFail:
.209c	a9 04		lda #$04			lda 	#4
.209e	20 f9 1c	jsr $1cf9			jsr 	RSFree 						; close the just opened position.
.20a1	a9 9e		lda #$9e			lda 	#TKW_WEND 					; scan forward past WEND.
.20a3	aa		tax				tax
.20a4	20 c0 20	jsr $20c0			jsr 	ScanForward
.20a7	60		rts				rts
.20a8					Command_Wend:
.20a8	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.20aa	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.20ac	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.20ae	f0 05		beq $20b5			beq 	_isok
.20b0	a2 10		ldx #$10			ldx 	#ErrorID_wendErr
.20b2	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.20b5					_isok:
.20b5	a9 01		lda #$01			lda 	#1
.20b7	20 16 1d	jsr $1d16			jsr 	RSLoadPosition				; go back until true
.20ba	a9 04		lda #$04			lda 	#4
.20bc	20 f9 1c	jsr $1cf9			jsr 	RSFree 						; close the loop
.20bf	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/binary.asm

.1401					BinaryProcess:
.1401	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1403	15 41		ora $41,x			ora 	esType+1,x
.1405	0a		asl a				asl 	a
.1406	30 0e		bmi $1416			bmi 	_BPStringType 				; if one is set, then string type.
.1408	18		clc				clc 								; return CC for integer
.1409	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.140b	f0 08		beq $1415			beq 	_BPExit 					; if both integer then return with CC.
.140d	20 1b 14	jsr $141b			jsr 	BPMakeBothFloat 			; make both float
.1410	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1412	95 40		sta $40,x			sta 	esType,x
.1414	38		sec				sec 								; and return with carry set.
.1415					_BPExit:
.1415	60		rts				rts
.1416					_BPStringType:
.1416	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1418	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.141b					BPMakeBothFloat:
.141b	e8		inx				inx
.141c	20 20 14	jsr $1420			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.141f	ca		dex				dex
.1420					BPMakeFloat:
.1420	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1422	4a		lsr a				lsr 	a
.1423	b0 07		bcs $142c			bcs 	_BPIsFloat
.1425	8a		txa				txa
.1426	a2 1a		ldx #$1a		ldx	#26
.1428	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.142b	aa		tax				tax
.142c					_BPIsFloat:
.142c	60		rts				rts
.142d					AddHandler:
.142d	20 fe 15	jsr $15fe			jsr 	DereferenceTwo 				; dereference top two on stack.
.1430	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1432	35 41		and $41,x			and 	esType+1,x
.1434	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1436	d0 10		bne $1448			bne 	_AHStringConcat				; concatenate strings.
.1438	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.143b	b0 03		bcs $1440			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.143d	4c 30 1b	jmp $1b30			jmp 	MInt32Add 							; else do it as integer.
.1440					_IsFPOperation:
.1440	8a		txa				txa 								; call the relevant fp routine
.1441	a2 02		ldx #$02		ldx	#2
.1443	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.1446	aa		tax				tax
.1447	60		rts				rts
.1448					_AHStringConcat:
.1448	8a		txa				txa
.1449	a2 02		ldx #$02		ldx	#2
.144b	20 a6 1e	jsr $1ea6		jsr	stringHandler
.144e	aa		tax				tax
.144f	60		rts				rts
.1450					SubHandler:
.1450	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.1453	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.1456	b0 03		bcs $145b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1458	4c 4a 1b	jmp $1b4a			jmp 	MInt32Sub 							; else do it as integer.
.145b					_IsFPOperation:
.145b	8a		txa				txa 								; call the relevant fp routine
.145c	a2 10		ldx #$10		ldx	#16
.145e	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.1461	aa		tax				tax
.1462	60		rts				rts
.1463					MulHandler:
.1463	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.1466	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.1469	b0 03		bcs $146e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.146b	4c 64 1b	jmp $1b64			jmp 	MInt32Multiply 							; else do it as integer.
.146e					_IsFPOperation:
.146e	8a		txa				txa 								; call the relevant fp routine
.146f	a2 0a		ldx #$0a		ldx	#10
.1471	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.1474	aa		tax				tax
.1475	60		rts				rts
.1476					DivHandler:
.1476	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.1479	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.147c	b0 03		bcs $1481			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.147e	4c 3e 1a	jmp $1a3e			jmp 	MInt32SDivide 							; else do it as integer.
.1481					_IsFPOperation:
.1481	8a		txa				txa 								; call the relevant fp routine
.1482	a2 06		ldx #$06		ldx	#6
.1484	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.1487	aa		tax				tax
.1488	60		rts				rts
.1489					ModHandler:
.1489	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.148c	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.148f	b0 03		bcs $1494			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1491	4c bc 1a	jmp $1abc			jmp 	MInt32Modulus 							; else do it as integer.
.1494					_IsFPOperation:
.1494	8a		txa				txa 								; call the relevant fp routine
.1495	a2 08		ldx #$08		ldx	#8
.1497	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.149a	aa		tax				tax
.149b	60		rts				rts
.149c					XorHandler:
.149c	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.149f	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.14a2	b0 03		bcs $14a7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14a4	4c f0 19	jmp $19f0			jmp 	MInt32Xor 							; else do it as integer.
.14a7					_IsFPOperation:
.14a7	8a		txa				txa 								; call the relevant fp routine
.14a8	a2 08		ldx #$08		ldx	#8
.14aa	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.14ad	aa		tax				tax
.14ae	60		rts				rts
.14af					OrHandler:
.14af	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.14b2	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.14b5	b0 03		bcs $14ba			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14b7	4c d7 19	jmp $19d7			jmp 	MInt32Or 							; else do it as integer.
.14ba					_IsFPOperation:
.14ba	8a		txa				txa 								; call the relevant fp routine
.14bb	a2 08		ldx #$08		ldx	#8
.14bd	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.14c0	aa		tax				tax
.14c1	60		rts				rts
.14c2					AndHandler:
.14c2	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.14c5	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.14c8	b0 03		bcs $14cd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14ca	4c be 19	jmp $19be			jmp 	MInt32And 							; else do it as integer.
.14cd					_IsFPOperation:
.14cd	8a		txa				txa 								; call the relevant fp routine
.14ce	a2 08		ldx #$08		ldx	#8
.14d0	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.14d3	aa		tax				tax
.14d4	60		rts				rts
.14d5					ShlHandler:
.14d5	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.14d8	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.14db	b0 03		bcs $14e0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14dd	4c 56 15	jmp $1556			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.14e0					_IsFPOperation:
.14e0	8a		txa				txa 								; call the relevant fp routine
.14e1	a2 08		ldx #$08		ldx	#8
.14e3	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.14e6	aa		tax				tax
.14e7	60		rts				rts
.14e8					ShrHandler:
.14e8	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.14eb	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.14ee	b0 03		bcs $14f3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14f0	4c 59 15	jmp $1559			jmp 	MInt32ShiftRightX 							; else do it as integer.
.14f3					_IsFPOperation:
.14f3	8a		txa				txa 								; call the relevant fp routine
.14f4	a2 08		ldx #$08		ldx	#8
.14f6	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.14f9	aa		tax				tax
.14fa	60		rts				rts
.14fb					WordRefHandler:
.14fb	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.14fe	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.1501	b0 03		bcs $1506			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1503	4c 48 15	jmp $1548			jmp 	MInt32WordIndirect 							; else do it as integer.
.1506					_IsFPOperation:
.1506	8a		txa				txa 								; call the relevant fp routine
.1507	a2 08		ldx #$08		ldx	#8
.1509	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.150c	aa		tax				tax
.150d	60		rts				rts
.150e					ByteRefHandler:
.150e	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.1511	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.1514	b0 03		bcs $1519			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1516	4c 4c 15	jmp $154c			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1519					_IsFPOperation:
.1519	8a		txa				txa 								; call the relevant fp routine
.151a	a2 08		ldx #$08		ldx	#8
.151c	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.151f	aa		tax				tax
.1520	60		rts				rts
.1521					PowerHandler:
.1521	20 fe 15	jsr $15fe			jsr 	DereferenceTwo
.1524	20 01 14	jsr $1401			jsr 	BinaryProcess 				; check to see if either is float
.1527	b0 03		bcs $152c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1529	4c 34 15	jmp $1534			jmp 	PowerInteger 							; else do it as integer.
.152c					_IsFPOperation:
.152c	8a		txa				txa 								; call the relevant fp routine
.152d	a2 16		ldx #$16		ldx	#22
.152f	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.1532	aa		tax				tax
.1533	60		rts				rts
.1534					PowerInteger:
.1534	20 1b 14	jsr $141b			jsr 	BPMakeBothFloat				; make them float.
.1537	8a		txa				txa
.1538	a2 16		ldx #$16		ldx	#22
.153a	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.153d	a2 12		ldx #$12		ldx	#18
.153f	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.1542	aa		tax				tax
.1543	a9 00		lda #$00			lda 	#0 							; make type integer
.1545	95 40		sta $40,x			sta 	esType,x
.1547	60		rts				rts
.1548					Mint32WordIndirect:
.1548	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.154a	d0 02		bne $154e			bne 	Min32Indirect
.154c					Mint32ByteIndirect:
.154c	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.154e					Min32Indirect:
.154e	48		pha				pha 								; save the indirection
.154f	20 30 1b	jsr $1b30			jsr 	MInt32Add 					; add a!b a?b
.1552	68		pla				pla 								; and set the type to reference.
.1553	95 40		sta $40,x			sta 	esType,x
.1555	60		rts				rts
.1556					Mint32ShiftLeftX:
.1556	18		clc				clc
.1557	90 01		bcc $155a			bcc 	Mint32Shift
.1559					Mint32ShiftRightX:
.1559	38		sec				sec
.155a					Mint32Shift:
.155a	08		php				php 								; save carry flag on stack.
.155b	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.155d	15 59		ora $59,x			ora 	esInt2+1,x
.155f	15 61		ora $61,x			ora 	esInt3+1,x
.1561	d0 1e		bne $1581			bne 	_MShiftZero
.1563	b5 49		lda $49,x			lda 	esInt0+1,x
.1565	c9 20		cmp #$20			cmp 	#32
.1567	b0 18		bcs $1581			bcs 	_MShiftZero
.1569					_MShiftLoop:
.1569	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.156b	f0 12		beq $157f			beq 	_MShiftExit
.156d	d6 49		dec $49,x			dec 	esInt0+1,x
.156f	28		plp				plp 								; restore and save carry
.1570	08		php				php
.1571	90 06		bcc $1579			bcc 	_MShiftLeft
.1573	20 63 1c	jsr $1c63			jsr 	Mint32ShiftRight
.1576	4c 69 15	jmp $1569			jmp 	_MShiftLoop
.1579					_MShiftLeft:
.1579	20 5a 1c	jsr $1c5a			jsr 	Mint32ShiftLeft
.157c	4c 69 15	jmp $1569			jmp 	_MShiftLoop
.157f					_MShiftExit:
.157f	28		plp				plp	 								; throw saved carry and exit
.1580	60		rts				rts
.1581					_MShiftZero:
.1581	4c 45 1c	jmp $1c45			jmp 	MInt32False 				; return 0.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/compare.asm

.1584					PerformComparison:
.1584	20 fe 15	jsr $15fe			jsr 	DereferenceTwo 				; make both values.
.1587	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1589	35 41		and $41,x			and 	esType+1,x
.158b	0a		asl a				asl 	a
.158c	30 1d		bmi $15ab			bmi 	_PCIsString
.158e	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1590	15 41		ora $41,x			ora 	esType+1,x
.1592	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1593	30 22		bmi $15b7			bmi 	_PCError
.1595	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1597	f0 0f		beq $15a8			beq 	_PCIsInteger 				; if not two integers
.1599	20 1b 14	jsr $141b			jsr 	BPMakeBothFloat 			; make both float
.159c	8a		txa				txa
.159d	a2 04		ldx #$04		ldx	#4
.159f	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.15a2	86 0a		stx $0a				stx 	tempShort 					; save result
.15a4	aa		tax				tax
.15a5	a5 0a		lda $0a				lda 	tempShort
.15a7	60		rts				rts
.15a8					_PCIsInteger:
.15a8	4c 09 1a	jmp $1a09			jmp 	MInt32Compare
.15ab					_PCIsString:
.15ab	8a		txa				txa 								; A has SP
.15ac	a2 04		ldx #$04		ldx	#4
.15ae	20 a6 1e	jsr $1ea6		jsr	stringHandler
.15b1	86 0a		stx $0a				stx 	tempShort 					; save result
.15b3	aa		tax				tax 								; put SP back in X and get result.
.15b4	a5 0a		lda $0a				lda 	tempShort
.15b6	60		rts				rts
.15b7					_PCError:
.15b7	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.15b9	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.15bc					CompareEquals:
.15bc	20 84 15	jsr $1584			jsr 	PerformComparison
.15bf	c9 00		cmp #$00			cmp 	#$00
.15c1	f0 35		beq $15f8			beq  	CompareTrue
.15c3	4c fb 15	jmp $15fb			jmp 	CompareFalse
.15c6					CompareLess:
.15c6	20 84 15	jsr $1584			jsr 	PerformComparison
.15c9	c9 ff		cmp #$ff			cmp 	#$FF
.15cb	f0 2b		beq $15f8			beq  	CompareTrue
.15cd	4c fb 15	jmp $15fb			jmp 	CompareFalse
.15d0					CompareGreater:
.15d0	20 84 15	jsr $1584			jsr 	PerformComparison
.15d3	c9 01		cmp #$01			cmp 	#$01
.15d5	f0 21		beq $15f8			beq  	CompareTrue
.15d7	4c fb 15	jmp $15fb			jmp 	CompareFalse
.15da					CompareNotEquals:
.15da	20 84 15	jsr $1584			jsr 	PerformComparison
.15dd	c9 00		cmp #$00			cmp 	#$00
.15df	d0 17		bne $15f8			bne  	CompareTrue
.15e1	4c fb 15	jmp $15fb			jmp 	CompareFalse
.15e4					CompareGreaterEq:
.15e4	20 84 15	jsr $1584			jsr 	PerformComparison
.15e7	c9 ff		cmp #$ff			cmp 	#$FF
.15e9	d0 0d		bne $15f8			bne  	CompareTrue
.15eb	4c fb 15	jmp $15fb			jmp 	CompareFalse
.15ee					CompareLessEq:
.15ee	20 84 15	jsr $1584			jsr 	PerformComparison
.15f1	c9 01		cmp #$01			cmp 	#$01
.15f3	d0 03		bne $15f8			bne  	CompareTrue
.15f5	4c fb 15	jmp $15fb			jmp 	CompareFalse
.15f8					CompareTrue:
.15f8	4c 41 1c	jmp $1c41			jmp 	MInt32True
.15fb					CompareFalse:
.15fb	4c 45 1c	jmp $1c45			jmp 	MInt32False

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/dereference.asm

.15fe					DereferenceTwo:
.15fe	e8		inx				inx
.15ff	20 03 16	jsr $1603			jsr 	DereferenceOne
.1602	ca		dex				dex
.1603					DereferenceOne:
.1603	b5 40		lda $40,x			lda 	esType,x
.1605	10 3d		bpl $1644			bpl 	_DRNotReference 			; is it a reference ?
.1607	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1608	b0 3b		bcs $1645			bcs 	_DRFloatDeReference
.160a	98		tya				tya
.160b	48		pha				pha
.160c	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.160e	85 04		sta $04				sta 	temp0
.1610	b5 50		lda $50,x			lda 	esInt1,x
.1612	85 05		sta $05				sta 	temp0+1
.1614	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1616	95 50		sta $50,x			sta 	esInt1,x
.1618	95 58		sta $58,x			sta 	esInt2,x
.161a	95 60		sta $60,x			sta 	esInt3,x
.161c	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.161e	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1620	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1621	30 0d		bmi $1630			bmi 	_DeRefString 				; string, 2 bytes only
.1623	d0 11		bne $1636			bne 	_DeRefByte 					; byte 1 byte only
.1625					_DeRefLong:
.1625	a0 03		ldy #$03			ldy 	#3
.1627	b1 04		lda ($04),y			lda 	(temp0),y
.1629	95 60		sta $60,x			sta 	esInt3,x
.162b	88		dey				dey
.162c	b1 04		lda ($04),y			lda 	(temp0),y
.162e	95 58		sta $58,x			sta 	esInt2,x
.1630					_DeRefString:
.1630	a0 01		ldy #$01			ldy 	#1
.1632	b1 04		lda ($04),y			lda 	(temp0),y
.1634	95 50		sta $50,x			sta 	esInt1,x
.1636					_DeRefByte:
.1636	a0 00		ldy #$00			ldy 	#0
.1638	b1 04		lda ($04),y			lda 	(temp0),y
.163a	95 48		sta $48,x			sta 	esInt0,x
.163c	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.163e	29 40		and #$40			and 	#$40
.1640	95 40		sta $40,x			sta 	esType,x
.1642	68		pla				pla
.1643	a8		tay				tay
.1644					_DRNotReference
.1644	60		rts				rts
.1645					_DRFloatDereference:
.1645	8a		txa				txa
.1646							floatingpoint_deref
.1646	aa		tax				tax
.1647	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1649	95 40		sta $40,x			sta 	esType,x
.164b	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/evaluate.asm

.164c					EvaluateLevel:
.164c	48		pha				pha 								; save precedence level.
.164d	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.164f	95 48		sta $48,x			sta 	esInt0,x
.1651	95 50		sta $50,x			sta 	esInt1,x
.1653	95 58		sta $58,x			sta 	esInt2,x
.1655	95 60		sta $60,x			sta 	esInt3,x
.1657	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1659	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.165b	30 21		bmi $167e			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.165d	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.165e	30 0a		bmi $166a			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1660	8a		txa				txa 								; stack level in X
.1661	a2 00		ldx #$00		ldx	#0
.1663	20 41 1f	jsr $1f41		jsr	variableHandler
.1666	aa		tax				tax
.1667	4c a7 16	jmp $16a7			jmp		_ELHasTerm
.166a					_ELIsConstant:
.166a	4a		lsr a				lsr 	a 							; get the value back
.166b	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.166d	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.166f					_ELCheckNext:
.166f	c8		iny				iny 								; look at next
.1670	b1 02		lda ($02),y			lda 	(codePtr),y
.1672	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1674	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1676	b0 2f		bcs $16a7			bcs 	_ELHasTerm 					; done getting the constant.
.1678	20 b4 17	jsr $17b4			jsr 	ELShiftByteIn 				; shift byte into position.
.167b	4c 6f 16	jmp $166f			jmp 	_ELCheckNext
.167e					_ELIsToken:
.167e	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1680	f0 0f		beq $1691			beq 	_ELIsString
.1682	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1684	d0 5f		bne $16e5			bne 	_ELCheckUnary
.1686	8a		txa				txa 								; put X into A
.1687	c8		iny				iny 								; skip over the float marker
.1688	a2 18		ldx #$18		ldx	#24
.168a	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.168d	aa		tax				tax 								; restore X
.168e	4c a7 16	jmp $16a7			jmp 	_ELHasTerm
.1691					_ELIsString:
.1691	98		tya				tya 								; address of string is codePtr+y+1
.1692	38		sec				sec
.1693	65 02		adc $02				adc 	codePtr
.1695	95 48		sta $48,x			sta 	esInt0,x
.1697	a5 03		lda $03				lda 	codePtr+1
.1699	69 00		adc #$00			adc 	#0
.169b	95 50		sta $50,x			sta 	esInt1,x
.169d	a9 40		lda #$40			lda 	#$40 						; set type to string value
.169f	95 40		sta $40,x			sta 	esType,x
.16a1	c8		iny				iny 								; skip over string.
.16a2	98		tya				tya
.16a3	38		sec				sec									; +1 for the length itself.
.16a4	71 02		adc ($02),y			adc 	(codePtr),y
.16a6	a8		tay				tay 								; and fall through to term loop code.
.16a7					_ELHasTerm:
.16a7	b1 02		lda ($02),y			lda 	(codePtr),y
.16a9	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.16ab	90 04		bcc $16b1			bcc 	_ELPopExit
.16ad	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.16af	90 02		bcc $16b3			bcc 	_ELHasBinaryTerm
.16b1					_ELPopExit:
.16b1	68		pla				pla
.16b2					_ELExit:
.16b2	60		rts				rts
.16b3					_ELHasBinaryTerm:
.16b3	84 0a		sty $0a				sty 	tempShort 					; save position
.16b5	a8		tay				tay 								; use token as an index and get the precedence.
.16b6	b9 5c 17	lda $175c,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.16b9	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16bb	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.16bd	68		pla				pla 								; restore current level.
.16be	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.16c0	b0 f0		bcs $16b2			bcs 	_ELExit
.16c2	48		pha				pha 								; save current level back on the stack.
.16c3	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.16c5	48		pha				pha
.16c6	c8		iny				iny
.16c7	e8		inx				inx 								; calculate the RHS at the operator precedence.
.16c8	a5 0a		lda $0a				lda 	tempShort
.16ca	20 4c 16	jsr $164c			jsr 	EvaluateLevel
.16cd	ca		dex				dex
.16ce	68		pla				pla 								; get the operator back out.
.16cf					_ELExecuteA:
.16cf	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.16d1	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.16d2	aa		tax				tax
.16d3	bd 95 12	lda $1295,x			lda 	Group0Vectors,x
.16d6	85 04		sta $04				sta 	temp0
.16d8	bd 96 12	lda $1296,x			lda 	Group0Vectors+1,x
.16db	85 05		sta $05				sta 	temp0+1
.16dd	a6 0a		ldx $0a				ldx 	tempShort
.16df	20 28 17	jsr $1728			jsr 	_ELCallTemp0
.16e2	4c a7 16	jmp $16a7			jmp 	_ELHasTerm 					; and loop back round.
.16e5					_ELCheckUnary:
.16e5	c8		iny				iny 								; skip over token.
.16e6	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.16e8	f0 15		beq $16ff			beq 	_ELMinus
.16ea	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.16ec	f0 28		beq $1716			beq 	_ELIndirect
.16ee	c9 98		cmp #$98			cmp 	#TKW_QMARK
.16f0	f0 24		beq $1716			beq 	_ELIndirect
.16f2	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.16f4	90 04		bcc $16fa			bcc 	_ELUSyntax
.16f6	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.16f8	90 d5		bcc $16cf			bcc 	_ELExecuteA 				; if so do that token.
.16fa					_ELUSyntax:
.16fa	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.16fc	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.16ff					_ELMinus:
.16ff	20 3d 17	jsr $173d			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1702	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1704	f0 0a		beq $1710			beq 	_ELMinusInteger
.1706	8a		txa				txa
.1707	a2 0c		ldx #$0c		ldx	#12
.1709	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.170c	aa		tax				tax
.170d	4c a7 16	jmp $16a7			jmp 	_ELHasTerm
.1710					_ELMinusInteger:
.1710	20 ff 1b	jsr $1bff			jsr 	MInt32Negate 				; do int negate
.1713	4c a7 16	jmp $16a7			jmp 	_ELHasTerm
.1716					_ELIndirect:
.1716	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1717	20 46 17	jsr $1746			jsr 	EvaluateIntegerTerm 		; integer address
.171a	68		pla				pla
.171b	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.171d	f0 02		beq $1721			beq 	_ELHaveModifier
.171f	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1721					_ELHaveModifier:
.1721	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1723	95 40		sta $40,x			sta 	esType,x
.1725	4c a7 16	jmp $16a7			jmp 	_ELHasTerm
.1728					_ELCallTemp0:
.1728	6c 04 00	jmp ($0004)			jmp 	(temp0)
.172b					UnaryParenthesis:
.172b	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.172d	20 4c 16	jsr $164c			jsr 	EvaluateLevel
.1730	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen 			; check for )
.1733	60		rts				rts
.1734					EvaluateTerm:
.1734	a9 0f		lda #$0f			lda 	#15
.1736	20 4c 16	jsr $164c			jsr 	EvaluateLevel
.1739	20 03 16	jsr $1603			jsr 	DereferenceOne
.173c	60		rts				rts
.173d					EvaluateNumericTerm:
.173d	20 34 17	jsr $1734			jsr 	EvaluateTerm
.1740	b5 40		lda $40,x			lda 	esType,x
.1742	0a		asl a				asl 	a 							; see if it's a string.
.1743	30 09		bmi $174e			bmi 	ENTType
.1745	60		rts				rts
.1746					EvaluateIntegerTerm:
.1746	20 34 17	jsr $1734			jsr 	EvaluateTerm
.1749	b5 40		lda $40,x			lda 	esType,x
.174b	d0 01		bne $174e			bne 	ENTType
.174d	60		rts				rts
.174e					ENTType:
.174e	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1750	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1753					EvaluateRoot:
.1753	a2 00		ldx #$00			ldx 	#0
.1755					Evaluate:
.1755	a9 00		lda #$00			lda 	#0
.1757	20 4c 16	jsr $164c			jsr 	EvaluateLevel
.175a	20 03 16	jsr $1603			jsr 	DereferenceOne
.175d	60		rts				rts
.175e					EvaluateNumeric:
.175e	20 55 17	jsr $1755			jsr 	Evaluate
.1761	b5 40		lda $40,x			lda 	esType,x
.1763	0a		asl a				asl 	a 							; see if it's a string.
.1764	30 e8		bmi $174e			bmi 	ENTType
.1766	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1767	4a		lsr a				lsr 	a
.1768	60		rts				rts
.1769					EvaluateString:
.1769	20 55 17	jsr $1755			jsr 	Evaluate
.176c	b5 40		lda $40,x			lda 	esType,x
.176e	0a		asl a				asl 	a 							; see if it's a string.
.176f	10 dd		bpl $174e			bpl 	ENTType
.1771	60		rts				rts
.1772					EvaluateRootInteger:
.1772	a2 00		ldx #$00			ldx 	#0
.1774					EvaluateInteger:
.1774	20 55 17	jsr $1755			jsr 	Evaluate
.1777	b5 40		lda $40,x			lda 	esType,x
.1779	d0 d3		bne $174e			bne 	ENTType
.177b	60		rts				rts
.177c					EvaluateSmallInteger:
.177c	20 74 17	jsr $1774			jsr 	EvaluateInteger
.177f	b5 50		lda $50,x			lda 	esInt1,x
.1781	15 58		ora $58,x			ora 	esInt2,x
.1783	15 60		ora $60,x			ora 	esInt3,x
.1785	d0 03		bne $178a			bne 	_ESIValue
.1787	b5 48		lda $48,x			lda 	esInt0,x
.1789	60		rts				rts
.178a					_ESIValue:
.178a	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.178c	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.178f					LinkEvaluate:
.178f	aa		tax				tax
.1790	20 55 17	jsr $1755			jsr 	Evaluate
.1793	8a		txa				txa
.1794	60		rts				rts
.1795					LinkEvaluateInteger:
.1795	aa		tax				tax
.1796	20 74 17	jsr $1774			jsr 	EvaluateInteger
.1799	8a		txa				txa
.179a	60		rts				rts
.179b					LinkEvaluateSmallInt:
.179b	aa		tax				tax
.179c	20 7c 17	jsr $177c			jsr 	EvaluateSmallInteger
.179f	8a		txa				txa
.17a0	60		rts				rts
.17a1					EvaluateReference:
.17a1	ad f3 17	lda $17f3			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.17a4	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.17a5	e9 01		sbc #$01			sbc 	#1
.17a7	20 4c 16	jsr $164c			jsr 	EvaluateLevel
.17aa	b5 40		lda $40,x			lda 	esType,x
.17ac	10 01		bpl $17af			bpl 	_ERFail
.17ae	60		rts				rts
.17af					_ERFail:
.17af	a2 0a		ldx #$0a			ldx 	#ErrorID_NoReference
.17b1	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.17b4					ELShiftByteIn:
.17b4	48		pha				pha 								; save bits to shift in.
.17b5	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.17b7	48		pha				pha
.17b8	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.17ba	95 60		sta $60,x			sta 	esInt3,x
.17bc	b5 50		lda $50,x			lda 	esInt1,x
.17be	95 58		sta $58,x			sta 	esInt2,x
.17c0	b5 48		lda $48,x			lda 	esInt0,x
.17c2	95 50		sta $50,x			sta 	esInt1,x
.17c4	a9 00		lda #$00			lda 	#0
.17c6	95 48		sta $48,x			sta 	esInt0,x
.17c8	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.17c9	29 03		and #$03			and 	#3 							; only want lower 2 bits
.17cb	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.17cd					_ELShiftLoop:
.17cd	4a		lsr a				lsr 	a
.17ce	76 60		ror $60,x			ror 	esInt3,x
.17d0	76 58		ror $58,x			ror 	esInt2,x
.17d2	76 50		ror $50,x			ror 	esInt1,x
.17d4	76 48		ror $48,x			ror 	esInt0,x
.17d6	c9 01		cmp #$01			cmp 	#1
.17d8	d0 f3		bne $17cd			bne 	_ELShiftLoop
.17da	68		pla				pla 								; get original 6 bit value and OR in.
.17db	29 3f		and #$3f			and 	#$3F
.17dd	15 48		ora $48,x			ora 	esInt0,x
.17df	95 48		sta $48,x			sta 	esInt0,x
.17e1	60		rts				rts
.17e2					ELBinaryOperatorInfo:

;******  Processing file: ../source/main/evaluate/../../generated/binarystructinfo.inc

>17e2	01					.byte	$01			; $86 and
>17e3	01					.byte	$01			; $87 or
>17e4	01					.byte	$01			; $88 xor
>17e5	02					.byte	$02			; $89 >=
>17e6	02					.byte	$02			; $8a <=
>17e7	02					.byte	$02			; $8b >
>17e8	02					.byte	$02			; $8c <
>17e9	02					.byte	$02			; $8d =
>17ea	02					.byte	$02			; $8e <>
>17eb	03					.byte	$03			; $8f +
>17ec	03					.byte	$03			; $90 -
>17ed	04					.byte	$04			; $91 >>
>17ee	04					.byte	$04			; $92 <<
>17ef	04					.byte	$04			; $93 *
>17f0	04					.byte	$04			; $94 /
>17f1	04					.byte	$04			; $95 mod
>17f2	05					.byte	$05			; $96 ^
>17f3	06					.byte	$06			; $97 !
>17f4	06					.byte	$06			; $98 ?
>17f5	82					.byte	$82			; $99 repeat
>17f6	82					.byte	$82			; $9a while
>17f7	82					.byte	$82			; $9b for
>17f8	82					.byte	$82			; $9c if
>17f9	80					.byte	$80			; $9d until
>17fa	80					.byte	$80			; $9e wend
>17fb	80					.byte	$80			; $9f next
>17fc	80					.byte	$80			; $a0 then
>17fd	80					.byte	$80			; $a1 endif

;******  Return to file: ../source/main/evaluate/evaluate.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unary.asm

.17fe					UnaryLen:
.17fe	20 0c 18	jsr $180c			jsr 	ULStart
.1801					ULFinish:
.1801	b1 04		lda ($04),y			lda 	(temp0),y
.1803	a4 0a		ldy $0a				ldy 	tempShort
.1805	20 54 1c	jsr $1c54			jsr 	MInt32Set8Bit
.1808	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen
.180b	60		rts				rts
.180c	20 69 17	jsr $1769	ULStart:jsr 	EvaluateString
.180f	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1811	85 04		sta $04				sta 	temp0
.1813	b5 50		lda $50,x			lda 	esInt1,x
.1815	85 05		sta $05				sta 	temp0+1
.1817	84 0a		sty $0a				sty 	tempShort 					; get length
.1819	a0 00		ldy #$00			ldy 	#0
.181b	60		rts				rts
.181c					UnaryAsc:
.181c	20 0c 18	jsr $180c			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.181f	b1 04		lda ($04),y			lda 	(temp0),y
.1821	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1822	c9 00		cmp #$00			cmp 	#0
.1824	d0 db		bne $1801			bne 	ULFinish
.1826	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1828	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.182b					UnaryAbs:
.182b	20 5e 17	jsr $175e			jsr 	EvaluateNumeric
.182e	b0 07		bcs $1837			bcs 	_UAFloat
.1830	20 fa 1b	jsr $1bfa			jsr 	MInt32Absolute
.1833	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen
.1836	60		rts				rts
.1837					_UAFloat:
.1837	8a		txa				txa
.1838	a2 00		ldx #$00		ldx	#0
.183a	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.183d	aa		tax				tax
.183e	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen
.1841	60		rts				rts
.1842					UnarySgn:
.1842	20 5e 17	jsr $175e			jsr 	EvaluateNumeric
.1845	b0 07		bcs $184e			bcs 	_USFloat
.1847	20 32 1c	jsr $1c32			jsr 	MInt32Sign
.184a	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen
.184d	60		rts				rts
.184e					_USFloat:
.184e	8a		txa				txa
.184f	a2 0e		ldx #$0e		ldx	#14
.1851	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.1854	aa		tax				tax
.1855	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen
.1858	60		rts				rts
.1859					UnaryPeek:
.1859	20 85 18	jsr $1885			jsr 	PDLCode
.185c	4c 79 18	jmp $1879			jmp 	PDLByte0
.185f					UnaryDeek:
.185f	20 85 18	jsr $1885			jsr 	PDLCode
.1862	4c 73 18	jmp $1873			jmp 	PDLByte1
.1865					UnaryLeek:
.1865	20 85 18	jsr $1885			jsr 	PDLCode
.1868	a0 03		ldy #$03			ldy 	#3
.186a	b1 04		lda ($04),y			lda 	(temp0),y
.186c	95 60		sta $60,x			sta 	esInt3,x
.186e	88		dey				dey
.186f	b1 04		lda ($04),y			lda 	(temp0),y
.1871	95 58		sta $58,x			sta 	esInt2,x
.1873					PDLByte1:
.1873	a0 01		ldy #$01			ldy 	#1
.1875	b1 04		lda ($04),y			lda 	(temp0),y
.1877	95 50		sta $50,x			sta 	esInt1,x
.1879					PDLByte0:
.1879	a0 00		ldy #$00			ldy 	#0
.187b	b1 04		lda ($04),y			lda 	(temp0),y
.187d	95 48		sta $48,x			sta 	esInt0,x
.187f	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1881	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen 			; check right and return
.1884	60		rts				rts
.1885					PDLCode:
.1885	20 74 17	jsr $1774			jsr 	EvaluateInteger
.1888	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.188a	85 04		sta $04				sta 	temp0
.188c	b5 50		lda $50,x			lda 	esInt1,x
.188e	85 05		sta $05				sta 	temp0+1
.1890	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1892	95 50		sta $50,x			sta 	esInt1,x
.1894	95 58		sta $58,x			sta 	esInt2,x
.1896	95 60		sta $60,x			sta 	esInt3,x
.1898	84 0a		sty $0a				sty 	tempShort 					; save Y
.189a	60		rts				rts
.189b					Unary_Random:
.189b	20 75 1c	jsr $1c75			jsr 	MInt32Random 				; generate random number.
.189e	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.18a0	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.18a2	f0 08		beq $18ac			beq 	_URExit
.18a4	e8		inx				inx 								; load range 0..r-1 into +1
.18a5	20 74 17	jsr $1774			jsr 	EvaluateInteger
.18a8	ca		dex				dex
.18a9	20 bc 1a	jsr $1abc			jsr 	MInt32Modulus 				; calculate random % modulus
.18ac					_URExit:
.18ac	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen 			; check right and return
.18af	60		rts				rts
.18b0					Unary_Min:
.18b0	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.18b2	d0 02		bne $18b6			bne 	UnaryMBody
.18b4					Unary_Max:
.18b4	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.18b6					UnaryMBody:
.18b6	48		pha				pha 								; save comparator on stack.
.18b7	20 55 17	jsr $1755			jsr 	Evaluate 					; get the first thing to check
.18ba					_UnaryMLoop:
.18ba	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.18bc	c8		iny				iny
.18bd	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.18bf	f0 09		beq $18ca			beq 	_UnaryMExit
.18c1	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.18c3	f0 07		beq $18cc			beq 	_UnaryMCompare
.18c5	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.18c7	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.18ca					_UnaryMExit:
.18ca	68		pla				pla 								; throw comparator and return.
.18cb	60		rts				rts
.18cc					_UnaryMCompare:
.18cc	e8		inx				inx 								; get the 2nd thing to evaluate
.18cd	20 55 17	jsr $1755			jsr 	Evaluate
.18d0	ca		dex				dex
.18d1	20 84 15	jsr $1584			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.18d4	85 0a		sta $0a				sta 	tempShort 					; save result
.18d6	68		pla				pla 								; get what we need
.18d7	48		pha				pha
.18d8	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.18da	d0 de		bne $18ba			bne 	_UnaryMLoop 				; no, try another value.
.18dc	20 45 1c	jsr $1c45			jsr 	MInt32False 				; promote 2nd to 1st.
.18df	20 30 1b	jsr $1b30			jsr 	MInt32Add
.18e2	4c ba 18	jmp $18ba			jmp 	_UnaryMLoop
.18e5					Unary_Page:
.18e5	20 45 1c	jsr $1c45			jsr 	MInt32False 				; zero
.18e8	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.18eb	95 48		sta $48,x			sta 	esInt0,x
.18ed	ad c9 0a	lda $0ac9			lda 	basePage+1
.18f0	95 50		sta $50,x			sta 	esInt1,x
.18f2	60		rts				rts
.18f3					UnaryReference:
.18f3	a9 0f		lda #$0f			lda 	#15
.18f5	20 4c 16	jsr $164c			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.18f8	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.18fa	10 05		bpl $1901			bpl 	UType
.18fc	a9 00		lda #$00			lda 	#0 							; make it an integer
.18fe	95 40		sta $40,x			sta 	esType,x
.1900	60		rts				rts
.1901					UType:
.1901	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1903	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1906					UnaryHexMarker:
.1906	4c 46 17	jmp $1746			jmp 	EvaluateIntegerTerm
.1909					UnaryComplement:
.1909	20 46 17	jsr $1746			jsr 	EvaluateIntegerTerm
.190c	20 19 1c	jsr $1c19			jsr 	MInt32Not
.190f	60		rts				rts
.1910					UnaryIntToFloat:
.1910	20 5e 17	jsr $175e			jsr 	EvaluateNumeric
.1913	b5 40		lda $40,x			lda 	esType,x
.1915	d0 0b		bne $1922			bne 	_UIFExit
.1917	8a		txa				txa
.1918	a2 1a		ldx #$1a		ldx	#26
.191a	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.191d	aa		tax				tax
.191e	a9 01		lda #$01			lda 	#1
.1920	95 40		sta $40,x			sta 	esType,x
.1922					_UIFExit:
.1922	60		rts				rts
.1923					UnaryFloatToInt:
.1923	20 5e 17	jsr $175e			jsr 	EvaluateNumeric
.1926	b5 40		lda $40,x			lda 	esType,x
.1928	f0 07		beq $1931			beq 	_UFIExit
.192a	8a		txa				txa
.192b	a2 12		ldx #$12		ldx	#18
.192d	20 59 1d	jsr $1d59		jsr	floatingpointHandler
.1930	aa		tax				tax
.1931					_UFIExit:
.1931	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unarystr.asm

.1932					ExecChr:
.1932	20 7c 17	jsr $177c			jsr 	EvaluateSmallInteger		; character number
.1935	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen				; right bracket
.1938	98		tya				tya
.1939	48		pha				pha
.193a	8a		txa				txa 								; A = stack
.193b	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.193d	a2 00		ldx #$00		ldx	#0
.193f	20 a6 1e	jsr $1ea6		jsr	stringHandler
.1942	aa		tax				tax 								; X = stack
.1943	68		pla				pla
.1944	a8		tay				tay
.1945	60		rts				rts
.1946					ExecLeft:
.1946	20 69 17	jsr $1769			jsr 	EvaluateString 				; string to stack,X
.1949	20 c5 1c	jsr $1cc5			jsr 	CheckComma
.194c	e8		inx				inx
.194d	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.194f	20 54 1c	jsr $1c54			jsr 	MInt32Set8Bit
.1952	e8		inx				inx
.1953	20 7c 17	jsr $177c			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1956					ExecSubstring:
.1956	ca		dex				dex 								; fix up X
.1957	ca		dex				dex
.1958	20 b8 1c	jsr $1cb8			jsr 	CheckRightParen 			; check closing right bracket.
.195b	8a		txa				txa 								; do the substring and exit.
.195c	a2 06		ldx #$06		ldx	#6
.195e	20 a6 1e	jsr $1ea6		jsr	stringHandler
.1961	aa		tax				tax
.1962	60		rts				rts
.1963					ExecMid:
.1963	20 69 17	jsr $1769			jsr 	EvaluateString 				; string to stack,X
.1966	20 c5 1c	jsr $1cc5			jsr 	CheckComma
.1969	e8		inx				inx
.196a	20 7c 17	jsr $177c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.196d	c9 00		cmp #$00			cmp 	#0
.196f	f0 15		beq $1986			beq 	_EMValue
.1971	e8		inx				inx
.1972	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.1974	20 54 1c	jsr $1c54			jsr 	MInt32Set8Bit
.1977	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1979	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.197b	f0 d9		beq $1956			beq 	ExecSubString
.197d	20 c5 1c	jsr $1cc5			jsr 	CheckComma
.1980	20 7c 17	jsr $177c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1983	4c 56 19	jmp $1956			jmp 	ExecSubString
.1986					_EMValue:
.1986	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1988	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.198b					ExecRight:
.198b	20 69 17	jsr $1769			jsr 	EvaluateString 				; string to stack,X
.198e	20 c5 1c	jsr $1cc5			jsr 	CheckComma
.1991	e8		inx				inx
.1992	20 7c 17	jsr $177c			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1995	ca		dex				dex
.1996	98		tya				tya
.1997	48		pha				pha
.1998	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.199a	85 04		sta $04				sta 	temp0
.199c	b5 50		lda $50,x			lda 	esInt1,x
.199e	85 05		sta $05				sta 	temp0+1
.19a0	a0 00		ldy #$00			ldy 	#0 							; point to length
.19a2	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.19a4	18		clc				clc 								; add 1.
.19a5	69 01		adc #$01			adc 	#1
.19a7	38		sec				sec
.19a8	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.19aa	f0 02		beq $19ae			beq		_ERMake1 					; if zero, make it 1.
.19ac	b0 02		bcs $19b0			bcs		_EROkay
.19ae					_ERMake1:
.19ae	a9 01		lda #$01			lda 	#1 							; start position.
.19b0					_EROkay:
.19b0	e8		inx				inx 								; set start pos.
.19b1	95 48		sta $48,x			sta 	esInt0,x
.19b3	e8		inx				inx
.19b4	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.19b6	20 54 1c	jsr $1c54			jsr 	MInt32Set8Bit
.19b9	68		pla				pla
.19ba	a8		tay				tay
.19bb	4c 56 19	jmp $1956			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32binary.asm

.19be					MInt32And:
.19be	b5 48		lda $48,x			lda 	esInt0,x
.19c0	35 49		and $49,x			and 	esInt0+1,x
.19c2	95 48		sta $48,x			sta 	esInt0,x
.19c4	b5 50		lda $50,x			lda 	esInt1,x
.19c6	35 51		and $51,x			and 	esInt1+1,x
.19c8	95 50		sta $50,x			sta 	esInt1,x
.19ca	b5 58		lda $58,x			lda 	esInt2,x
.19cc	35 59		and $59,x			and 	esInt2+1,x
.19ce	95 58		sta $58,x			sta 	esInt2,x
.19d0	b5 60		lda $60,x			lda 	esInt3,x
.19d2	35 61		and $61,x			and 	esInt3+1,x
.19d4	95 60		sta $60,x			sta 	esInt3,x
.19d6	60		rts				rts
.19d7					MInt32Or:
.19d7	b5 48		lda $48,x			lda 	esInt0,x
.19d9	15 49		ora $49,x			ora 	esInt0+1,x
.19db	95 48		sta $48,x			sta 	esInt0,x
.19dd	b5 50		lda $50,x			lda 	esInt1,x
.19df	15 51		ora $51,x			ora 	esInt1+1,x
.19e1	95 50		sta $50,x			sta 	esInt1,x
.19e3	b5 58		lda $58,x			lda 	esInt2,x
.19e5	15 59		ora $59,x			ora 	esInt2+1,x
.19e7	95 58		sta $58,x			sta 	esInt2,x
.19e9	b5 60		lda $60,x			lda 	esInt3,x
.19eb	15 61		ora $61,x			ora 	esInt3+1,x
.19ed	95 60		sta $60,x			sta 	esInt3,x
.19ef	60		rts				rts
.19f0					MInt32Xor:
.19f0	b5 48		lda $48,x			lda 	esInt0,x
.19f2	55 49		eor $49,x			eor 	esInt0+1,x
.19f4	95 48		sta $48,x			sta 	esInt0,x
.19f6	b5 50		lda $50,x			lda 	esInt1,x
.19f8	55 51		eor $51,x			eor 	esInt1+1,x
.19fa	95 50		sta $50,x			sta 	esInt1,x
.19fc	b5 58		lda $58,x			lda 	esInt2,x
.19fe	55 59		eor $59,x			eor 	esInt2+1,x
.1a00	95 58		sta $58,x			sta 	esInt2,x
.1a02	b5 60		lda $60,x			lda 	esInt3,x
.1a04	55 61		eor $61,x			eor 	esInt3+1,x
.1a06	95 60		sta $60,x			sta 	esInt3,x
.1a08	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32compare.asm

.1a09					MInt32Compare:
.1a09	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1a0b	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1a0d	d0 13		bne $1a22			bne 	MInt32Compare2
.1a0f	b5 50		lda $50,x			lda 	esInt1,x
.1a11	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1a13	d0 0d		bne $1a22			bne 	MInt32Compare2
.1a15	b5 58		lda $58,x			lda 	esInt2,x
.1a17	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1a19	d0 07		bne $1a22			bne 	MInt32Compare2
.1a1b	b5 60		lda $60,x			lda 	esInt3,x
.1a1d	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1a1f	d0 01		bne $1a22			bne 	MInt32Compare2
.1a21	60		rts				rts
.1a22					MInt32Compare2:
.1a22	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1a24	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1a26	b5 50		lda $50,x			lda		esInt1,x
.1a28	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1a2a	b5 58		lda $58,x			lda		esInt2,x
.1a2c	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1a2e	b5 60		lda $60,x			lda		esInt3,x
.1a30	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1a32	50 02		bvc $1a36			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1a34	49 80		eor #$80			eor 	#$80
.1a36					_I32LNoOverflow
.1a36	30 03		bmi $1a3b			bmi 	MInt32CLess					; if -ve then return $FF
.1a38	a9 01		lda #$01			lda 	#$01						; else return $01
.1a3a	60		rts				rts
.1a3b					MInt32CLess:
.1a3b	a9 ff		lda #$ff			lda 	#$FF
.1a3d	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32divide.asm

.1a3e					MInt32SDivide:
.1a3e	98		tya				tya  								; save Y, which is the count of negations
.1a3f	48		pha				pha
.1a40	a0 00		ldy #$00			ldy 	#0 							; zero count
.1a42	20 5a 1a	jsr $1a5a			jsr 	_MInt32SRemSign 			; unsign TOS
.1a45	e8		inx				inx 								; unsign TOS+1
.1a46	20 5a 1a	jsr $1a5a			jsr 	_MInt32SRemSign
.1a49	ca		dex				dex
.1a4a	98		tya				tya 								; save sign count on stack
.1a4b	48		pha				pha
.1a4c	20 63 1a	jsr $1a63			jsr 	MInt32UDivide 				; unsigned division
.1a4f	68		pla				pla 								; get sign count back
.1a50	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1a52	f0 03		beq $1a57			beq 	_I32SNoNeg
.1a54	20 ff 1b	jsr $1bff			jsr 	MInt32Negate
.1a57					_I32SNoNeg:
.1a57	68		pla				pla 								; restoe Y and exit
.1a58	a8		tay				tay
.1a59	60		rts				rts
.1a5a					_MInt32SRemSign:
.1a5a	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1a5c	10 04		bpl $1a62			bpl 	_MInt32SRSExit
.1a5e	c8		iny				iny 								; increment the sign count
.1a5f	20 ff 1b	jsr $1bff			jsr 	MInt32Negate 				; negate the value.
.1a62					_MInt32SRSExit:
.1a62	60		rts				rts
.1a63					MInt32UDivide:
.1a63	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1a65	15 51		ora $51,x			ora 	esInt1+1,x
.1a67	15 52		ora $52,x			ora 	esInt1+2,x
.1a69	15 53		ora $53,x			ora 	esInt1+3,x
.1a6b	f0 4a		beq $1ab7			beq 	_MInt32DZero
.1a6d	e8		inx				inx 								; clear A
.1a6e	e8		inx				inx
.1a6f	20 45 1c	jsr $1c45			jsr 	MInt32False
.1a72	ca		dex				dex
.1a73	ca		dex				dex
.1a74	98		tya				tya 								; save Y on the stack
.1a75	48		pha				pha
.1a76	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1a78					_MInt32UDLoop:
.1a78	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1a7a	36 50		rol $50,x			rol 	esInt1,x
.1a7c	36 58		rol $58,x			rol 	esInt2,x
.1a7e	36 60		rol $60,x			rol 	esInt3,x
.1a80	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1a82	36 52		rol $52,x			rol 	esInt1+2,x
.1a84	36 5a		rol $5a,x			rol 	esInt2+2,x
.1a86	36 62		rol $62,x			rol 	esInt3+2,x
.1a88	38		sec				sec 								; calculate A-M saving result on the stack
.1a89	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1a8b	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1a8d	48		pha				pha
.1a8e	b5 52		lda $52,x			lda 	esInt1+2,x
.1a90	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1a92	48		pha				pha
.1a93	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1a95	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1a97	48		pha				pha
.1a98	b5 62		lda $62,x			lda 	esInt3+2,x
.1a9a	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1a9c	90 10		bcc $1aae			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1a9e	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1aa0	68		pla				pla
.1aa1	95 5a		sta $5a,x			sta 	esInt2+2,x
.1aa3	68		pla				pla
.1aa4	95 52		sta $52,x			sta 	esInt1+2,x
.1aa6	68		pla				pla
.1aa7	95 4a		sta $4a,x			sta 	esInt0+2,x
.1aa9	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1aab	4c b1 1a	jmp $1ab1			jmp 	_MInt32Next 					; do the next iteration
.1aae					_MInt32NoSubtract:
.1aae	68		pla				pla
.1aaf	68		pla				pla
.1ab0	68		pla				pla
.1ab1					_MInt32Next:
.1ab1	88		dey				dey 								; do this 32 times.
.1ab2	d0 c4		bne $1a78			bne 	_MInt32UDLoop
.1ab4	68		pla				pla 								; restore Y and exit
.1ab5	a8		tay				tay
.1ab6	60		rts				rts
.1ab7					_MInt32DZero:
.1ab7	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.1ab9	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1abc					MInt32Modulus:
.1abc	20 63 1a	jsr $1a63			jsr 	MInt32UDivide 				; do the division.
.1abf	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1ac1	95 60		sta $60,x			sta 	esInt3,x
.1ac3	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1ac5	95 58		sta $58,x			sta 	esInt2,x
.1ac7	b5 52		lda $52,x			lda 	esInt1+2,x
.1ac9	95 50		sta $50,x			sta 	esInt1,x
.1acb	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1acd	95 48		sta $48,x			sta 	esInt0,x
.1acf	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32fromstr.asm

.1ad0					MInt32FromString:
.1ad0	85 0a		sta $0a				sta 	tempShort 					; save base
.1ad2	98		tya				tya
.1ad3	48		pha				pha
.1ad4	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1ad6	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1ad8	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1ada	d0 01		bne $1add			bne 	_I32FSNotNegative
.1adc	c8		iny				iny 								; if so consume it.
.1add					_I32FSNotNegative:
.1add	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1adf	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1ae1	f0 02		beq $1ae5			beq 	_I32FSNN2
.1ae3	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1ae5					_I32FSNN2:
.1ae5	48		pha				pha 								; save base + final sign on stack.
.1ae6	20 45 1c	jsr $1c45			jsr 	MInt32False 					; zero the return value.
.1ae9					I32FSMainLoop:
.1ae9	68		pla				pla 								; get the base back into tempshort
.1aea	48		pha				pha
.1aeb	29 7f		and #$7f			and 	#$7F
.1aed	85 0a		sta $0a				sta 	tempShort
.1aef	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1af1	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1af3	90 02		bcc $1af7			bcc 	_I32FSNotLC
.1af5	e9 20		sbc #$20			sbc 	#32
.1af7					_I32FSNotLC:
.1af7	38		sec				sec 								; subtract 48 (ASCII "0")
.1af8	e9 30		sbc #$30			sbc 	#"0"
.1afa	90 26		bcc $1b22			bcc 	_I32FSDone 					; nothing more to do.
.1afc	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1afe	90 06		bcc $1b06			bcc 	_I32FSValidate
.1b00	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1b02	90 1e		bcc $1b22			bcc 	_I32FSDone
.1b04	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1b06					_I32FSValidate:
.1b06	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1b08	b0 18		bcs $1b22			bcs 	_I32FSDone 					; sorry, too large for this base.
.1b0a	48		pha				pha 								; save the new digit value.
.1b0b	e8		inx				inx 								; put base into next slot.
.1b0c	a5 0a		lda $0a				lda 	tempShort
.1b0e	20 54 1c	jsr $1c54			jsr 	MInt32Set8Bit
.1b11	ca		dex				dex
.1b12	20 64 1b	jsr $1b64			jsr 	MInt32Multiply 				; multiply current by the base
.1b15	e8		inx				inx
.1b16	68		pla				pla  								; put additive into next slot
.1b17	20 54 1c	jsr $1c54			jsr 	MInt32Set8Bit
.1b1a	ca		dex				dex
.1b1b	20 30 1b	jsr $1b30			jsr 	MInt32Add 					; and add it
.1b1e	c8		iny				iny 								; look at next character
.1b1f	4c e9 1a	jmp $1ae9			jmp 	I32FSMainLoop 				; and go round again.
.1b22					_I32FSDone:
.1b22	68		pla				pla 								; get base/final sign back
.1b23	10 04		bpl $1b29			bpl 	_I32FSNN3
.1b25	88		dey				dey 								; one fewer character to allow for the - prefix.
.1b26	20 ff 1b	jsr $1bff			jsr 	MInt32Negate 				; negate the result.
.1b29					_I32FSNN3:
.1b29	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1b2b	68		pla				pla
.1b2c	a8		tay				tay
.1b2d	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1b2f	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32math.asm

.1b30					MInt32Add:
.1b30	18		clc				clc
.1b31	b5 48		lda $48,x			lda 	esInt0,x
.1b33	75 49		adc $49,x			adc 	esInt0+1,x
.1b35	95 48		sta $48,x			sta 	esInt0,x
.1b37	b5 50		lda $50,x			lda 	esInt1,x
.1b39	75 51		adc $51,x			adc 	esInt1+1,x
.1b3b	95 50		sta $50,x			sta 	esInt1,x
.1b3d	b5 58		lda $58,x			lda 	esInt2,x
.1b3f	75 59		adc $59,x			adc 	esInt2+1,x
.1b41	95 58		sta $58,x			sta 	esInt2,x
.1b43	b5 60		lda $60,x			lda 	esInt3,x
.1b45	75 61		adc $61,x			adc 	esInt3+1,x
.1b47	95 60		sta $60,x			sta 	esInt3,x
.1b49	60		rts				rts
.1b4a					MInt32Sub:
.1b4a	38		sec				sec
.1b4b	b5 48		lda $48,x			lda 	esInt0,x
.1b4d	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1b4f	95 48		sta $48,x			sta 	esInt0,x
.1b51	b5 50		lda $50,x			lda 	esInt1,x
.1b53	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1b55	95 50		sta $50,x			sta 	esInt1,x
.1b57	b5 58		lda $58,x			lda 	esInt2,x
.1b59	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1b5b	95 58		sta $58,x			sta 	esInt2,x
.1b5d	b5 60		lda $60,x			lda 	esInt3,x
.1b5f	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1b61	95 60		sta $60,x			sta 	esInt3,x
.1b63	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32multiply.asm

.1b64					MInt32Multiply:
.1b64	e8		inx				inx 								; copy 2nd -> 3rd
.1b65	20 8a 1b	jsr $1b8a			jsr 	MInt32CopyUp
.1b68	ca		dex				dex
.1b69	20 8a 1b	jsr $1b8a			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1b6c	20 45 1c	jsr $1c45			jsr 	MInt32False 					; zero 1st.
.1b6f					_I32Loop:
.1b6f	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1b71	29 01		and #$01			and 	#1
.1b73	f0 03		beq $1b78			beq 	_I32NoAdd 					; if set
.1b75	20 30 1b	jsr $1b30			jsr 	MInt32Add 					; add 2nd to 1st.
.1b78					_I32NoAdd:
.1b78	e8		inx				inx 								; shift 2nd left
.1b79	20 5a 1c	jsr $1c5a			jsr 	MInt32ShiftLeft
.1b7c	e8		inx				inx  								; shift 3rd right
.1b7d	20 63 1c	jsr $1c63			jsr 	MInt32ShiftRight
.1b80	20 6c 1c	jsr $1c6c			jsr 	MInt32Zero 					; check if zero.
.1b83	08		php				php 								; save status bits
.1b84	ca		dex				dex 	 							; point back to 1st
.1b85	ca		dex				dex
.1b86	28		plp				plp 								; get status bits
.1b87	d0 e6		bne $1b6f			bne 	_I32Loop 					; if non-zero keep going.
.1b89	60		rts				rts
.1b8a					MInt32CopyUp:
.1b8a	b5 48		lda $48,x			lda 	esInt0,x
.1b8c	95 49		sta $49,x			sta 	esInt0+1,x
.1b8e	b5 50		lda $50,x			lda 	esInt1,x
.1b90	95 51		sta $51,x			sta 	esInt1+1,x
.1b92	b5 58		lda $58,x			lda 	esInt2,x
.1b94	95 59		sta $59,x			sta 	esInt2+1,x
.1b96	b5 60		lda $60,x			lda 	esInt3,x
.1b98	95 61		sta $61,x			sta 	esInt3+1,x
.1b9a	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32tostr.asm

>0af4					MCharCount:	.fill 	1						; count of converted characters
.1b9b					MInt32ToString:
.1b9b	48		pha				pha 								; save base
.1b9c	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1b9e	a9 00		lda #$00			lda 	#0
.1ba0	8d f4 0a	sta $0af4			sta 	MCharCount 					; clear character count to 0
.1ba3	98		tya				tya
.1ba4	48		pha				pha
.1ba5	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1ba7	10 10		bpl $1bb9			bpl 	_I32TSUnsigned
.1ba9	48		pha				pha 								; save base on stack.
.1baa	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1bac	10 08		bpl $1bb6			bpl 	_I32TSNoFlip
.1bae	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1bb0	20 ec 1b	jsr $1bec			jsr 	MI32WriteCharacter
.1bb3	20 ff 1b	jsr $1bff			jsr 	MInt32Negate 				; negate the value.
.1bb6					_I32TSNoFlip:
.1bb6	68		pla				pla 								; get the base back
.1bb7	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1bb9					_I32TSUnsigned:
.1bb9	20 c7 1b	jsr $1bc7			jsr 	MI32DivideWrite 			; recursive code to output string.
.1bbc	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1bbe	ad f4 0a	lda $0af4			lda 	MCharCount
.1bc1	91 04		sta ($04),y			sta 	(temp0),y
.1bc3	68		pla				pla
.1bc4	a8		tay				tay
.1bc5	68		pla				pla
.1bc6	60		rts				rts
.1bc7					MI32DivideWrite:
.1bc7	48		pha				pha 								; save the divisor/base
.1bc8	e8		inx				inx 								; write in the dividing position.
.1bc9	20 54 1c	jsr $1c54			jsr 	MInt32Set8Bit
.1bcc	ca		dex				dex
.1bcd	20 63 1a	jsr $1a63			jsr 	MInt32UDivide 				; divide number by base.
.1bd0	68		pla				pla 								; get the base into Y
.1bd1	a8		tay				tay
.1bd2	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1bd4	48		pha				pha
.1bd5	20 6c 1c	jsr $1c6c			jsr 	MInt32Zero 					; is the result zero ?
.1bd8	f0 04		beq $1bde			beq 	_I32NoRecurse 				; if so, don't recurse.
.1bda	98		tya				tya 								; put base into A
.1bdb	20 c7 1b	jsr $1bc7			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1bde					_I32NoRecurse:
.1bde	68		pla				pla 								; get the remainder back
.1bdf	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1be1	90 02		bcc $1be5			bcc 	_I32NotHex
.1be3	69 06		adc #$06			adc 	#7-1
.1be5					_I32NotHex:
.1be5	18		clc				clc 								; make it ASCII
.1be6	69 30		adc #$30			adc 	#48
.1be8	20 ec 1b	jsr $1bec			jsr 	MI32WriteCharacter 			; write the character out
.1beb	60		rts				rts 								; and exit.
.1bec					MI32WriteCharacter:
.1bec	ee f4 0a	inc $0af4			inc 	MCharCount 					; bump count (space for leading count)
.1bef	ac f4 0a	ldy $0af4			ldy 	MCharCount 					; get position
.1bf2	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1bf4	c8		iny				iny
.1bf5	a9 00		lda #$00			lda 	#0
.1bf7	91 04		sta ($04),y			sta 	(temp0),y
.1bf9	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32unary.asm

>0af5					MSeed32:	.fill 	4							; random number seed.
.1bfa					MInt32Absolute:
.1bfa	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1bfc	30 01		bmi $1bff			bmi 	MInt32Negate
.1bfe	60		rts				rts
.1bff					MInt32Negate:
.1bff	38		sec				sec
.1c00	a9 00		lda #$00			lda 	#0
.1c02	f5 48		sbc $48,x			sbc 	esInt0,x
.1c04	95 48		sta $48,x			sta 	esInt0,x
.1c06	a9 00		lda #$00			lda 	#0
.1c08	f5 50		sbc $50,x			sbc 	esInt1,x
.1c0a	95 50		sta $50,x			sta 	esInt1,x
.1c0c	a9 00		lda #$00			lda 	#0
.1c0e	f5 58		sbc $58,x			sbc 	esInt2,x
.1c10	95 58		sta $58,x			sta 	esInt2,x
.1c12	a9 00		lda #$00			lda 	#0
.1c14	f5 60		sbc $60,x			sbc 	esInt3,x
.1c16	95 60		sta $60,x			sta 	esInt3,x
.1c18	60		rts				rts
.1c19					MInt32Not:
.1c19	b5 48		lda $48,x			lda 	esInt0,x
.1c1b	49 ff		eor #$ff			eor 	#$FF
.1c1d	95 48		sta $48,x			sta 	esInt0,x
.1c1f	b5 50		lda $50,x			lda 	esInt1,x
.1c21	49 ff		eor #$ff			eor 	#$FF
.1c23	95 50		sta $50,x			sta 	esInt1,x
.1c25	b5 58		lda $58,x			lda 	esInt2,x
.1c27	49 ff		eor #$ff			eor 	#$FF
.1c29	95 58		sta $58,x			sta 	esInt2,x
.1c2b	b5 60		lda $60,x			lda 	esInt3,x
.1c2d	49 ff		eor #$ff			eor 	#$FF
.1c2f	95 60		sta $60,x			sta 	esInt3,x
.1c31	60		rts				rts
.1c32					MInt32Sign:
.1c32	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1c34	30 0b		bmi $1c41			bmi 	MInt32True 					; if set return -1 (true)
.1c36	20 6c 1c	jsr $1c6c			jsr 	MInt32Zero 					; is it zero ?
.1c39	f0 0a		beq $1c45			beq 	MInt32False 					; if zero return 0 (false)
.1c3b	20 45 1c	jsr $1c45			jsr 	MInt32False 					; > 0 return 1
.1c3e	f6 48		inc $48,x			inc 	esInt0,x
.1c40	60		rts				rts
.1c41					MInt32True:
.1c41	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1c43	d0 02		bne $1c47			bne 	MInt32WriteAll
.1c45					MInt32False:
.1c45	a9 00		lda #$00			lda 	#0
.1c47					MInt32WriteAll:
.1c47	95 48		sta $48,x			sta 	esInt0,x
.1c49					MInt32Write123:
.1c49	95 50		sta $50,x			sta 	esInt1,x
.1c4b	95 58		sta $58,x			sta 	esInt2,x
.1c4d	95 60		sta $60,x			sta 	esInt3,x
.1c4f	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1c51	95 40		sta $40,x			sta 	esType,x
.1c53	60		rts				rts
.1c54					MInt32Set8Bit:
.1c54	95 48		sta $48,x			sta 	esInt0,x
.1c56	a9 00		lda #$00			lda 	#0
.1c58	f0 ef		beq $1c49			beq		MInt32Write123
.1c5a					MInt32ShiftLeft:
.1c5a	16 48		asl $48,x			asl 	esInt0,x
.1c5c	36 50		rol $50,x			rol	 	esInt1,x
.1c5e	36 58		rol $58,x			rol	 	esInt2,x
.1c60	36 60		rol $60,x			rol	 	esInt3,x
.1c62	60		rts				rts
.1c63					MInt32ShiftRight:
.1c63	56 60		lsr $60,x			lsr 	esInt3,x
.1c65	76 58		ror $58,x			ror 	esInt2,x
.1c67	76 50		ror $50,x			ror 	esInt1,x
.1c69	76 48		ror $48,x			ror 	esInt0,x
.1c6b	60		rts				rts
.1c6c					MInt32Zero:
.1c6c	b5 48		lda $48,x			lda 	esInt0,x
.1c6e	15 50		ora $50,x			ora 	esInt1,x
.1c70	15 58		ora $58,x			ora 	esInt2,x
.1c72	15 60		ora $60,x			ora 	esInt3,x
.1c74	60		rts				rts
.1c75					MInt32Random:
.1c75	98		tya				tya
.1c76	48		pha				pha
.1c77	a0 07		ldy #$07			ldy 	#7
.1c79	ad f5 0a	lda $0af5			lda 	MSeed32+0
.1c7c	d0 03		bne $1c81			bne 	_Random1
.1c7e	a8		tay				tay
.1c7f	a9 aa		lda #$aa			lda		#$AA
.1c81					_Random1:
.1c81	0a		asl a				asl 	a
.1c82	2e f6 0a	rol $0af6			rol 	MSeed32+1
.1c85	2e f7 0a	rol $0af7			rol 	MSeed32+2
.1c88	2e f8 0a	rol $0af8			rol 	MSeed32+3
.1c8b	90 02		bcc $1c8f			bcc 	_Random2
.1c8d	49 c5		eor #$c5			eor 	#$C5
.1c8f					_Random2:
.1c8f	88		dey				dey
.1c90	d0 ef		bne $1c81			bne 	_Random1
.1c92	8d f5 0a	sta $0af5			sta 	MSeed32+0
.1c95	95 48		sta $48,x			sta 	esInt0,x
.1c97	ad f6 0a	lda $0af6			lda 	MSeed32+1
.1c9a	95 50		sta $50,x			sta 	esInt1,x
.1c9c	ad f7 0a	lda $0af7			lda 	MSeed32+2
.1c9f	95 58		sta $58,x			sta 	esInt2,x
.1ca1	ad f8 0a	lda $0af8			lda 	MSeed32+3
.1ca4	95 60		sta $60,x			sta 	esInt3,x
.1ca6	68		pla				pla
.1ca7	a8		tay				tay
.1ca8	a9 00		lda #$00			lda 	#0
.1caa	95 40		sta $40,x			sta 	esType,x
.1cac	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/check.asm

.1cad					CheckToken:
.1cad	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1caf	d0 02		bne $1cb3			bne 	_CTError
.1cb1	c8		iny				iny
.1cb2	60		rts				rts
.1cb3					_CTError:
.1cb3	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1cb5	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1cb8					CheckRightParen:
.1cb8	b1 02		lda ($02),y			lda 	(codePtr),y
.1cba	c8		iny				iny
.1cbb	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1cbd	d0 01		bne $1cc0			bne 	_CRPError
.1cbf	60		rts				rts
.1cc0					_CRPError:
.1cc0	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.1cc2	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1cc5					CheckComma:
.1cc5	b1 02		lda ($02),y			lda 	(codePtr),y
.1cc7	c8		iny				iny
.1cc8	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1cca	d0 01		bne $1ccd			bne 	_CCError
.1ccc	60		rts				rts
.1ccd					_CCError:
.1ccd	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.1ccf	20 52 1d	jsr $1d52			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/scanner.asm

.20c0					ScanForward:
.20c0	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.20c2	86 07		stx $07				stx 	temp1+1
.20c4	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.20c6	85 08		sta $08				sta 	temp2
.20c8	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.20ca	c8		iny				iny
.20cb	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.20cd	d0 08		bne $20d7			bne 	_SFNoCheck 					; if so, check token against entered values.
.20cf	c5 06		cmp $06				cmp 	temp1
.20d1	f0 24		beq $20f7			beq 	_SFExit
.20d3	c5 07		cmp $07				cmp 	temp1+1
.20d5	f0 20		beq $20f7			beq 	_SFExit
.20d7					_SFNoCheck:
.20d7	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.20d9	90 ed		bcc $20c8			bcc 	_SFLoop
.20db	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.20dd	90 19		bcc $20f8			bcc 	_SFSpecials
.20df	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.20e1	90 e5		bcc $20c8			bcc 	_SFLoop
.20e3	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.20e5	b0 e1		bcs $20c8			bcs 	_SFLoop
.20e7	aa		tax				tax  								; token in X, and look up the adjuster.
.20e8	bd 5c 17	lda $175c,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.20eb	38		sec				sec 								; convert to an offset
.20ec	e9 81		sbc #$81			sbc 	#$81
.20ee	18		clc				clc 								; add to depth
.20ef	65 08		adc $08				adc 	temp2
.20f1	85 08		sta $08				sta 	temp2
.20f3	10 d3		bpl $20c8			bpl 	_SFLoop 					; +ve okay to continue
.20f5	30 2a		bmi $2121			bmi 	_SFError 					; if gone -ve then we have a nesting error
.20f7	60		rts		_SFExit:rts
.20f8					_SFSpecials:
.20f8	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.20fa	f0 14		beq $2110			beq 	_SFNextLine
.20fc	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.20fe	f0 26		beq $2126			beq 	_SFFloatSkip
.2100	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.2102	f0 04		beq $2108			beq 	_SFSkipString
.2104	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2105	4c c8 20	jmp $20c8			jmp 	_SFLoop 					; token.
.2108					_SFSkipString:
.2108	98		tya				tya
.2109	38		sec				sec
.210a	71 02		adc ($02),y			adc 	(codePtr),y
.210c	a8		tay				tay
.210d	4c c8 20	jmp $20c8			jmp 	_SFLoop
.2110					_SFNextLine:
.2110	a0 00		ldy #$00			ldy 	#0 							; get offset
.2112	b1 02		lda ($02),y			lda 	(codePtr),y
.2114	18		clc				clc 								; add to code pointer.
.2115	65 02		adc $02				adc 	codePtr
.2117	85 02		sta $02				sta 	codePtr
.2119	90 02		bcc $211d			bcc		_SFNLNoCarry
.211b	e6 03		inc $03				inc 	codePtr+1
.211d					_SFNLNoCarry:
.211d	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.211f	d0 a7		bne $20c8			bne		_SFLoop 					; no go round again
.2121					_SFError:
.2121	a2 12		ldx #$12			ldx 	#ErrorID_Struct
.2123	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.2126					_SFFloatSkip:
.2126	4c 8c 12	jmp $128c			jmp 	Unimplemented

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.1cd2					RSReset:
.1cd2	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.1cd4	85 78		sta $78				sta 	rsPointer
.1cd6	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.1cd8	85 79		sta $79				sta 	1+(rsPointer)
.1cda	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1cdc	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.1cdf	60		rts				rts
.1ce0					RSClaim:
.1ce0	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1ce2	48		pha				pha 								; save marker on stack.
.1ce3	8a		txa				txa 								; get bytes required.
.1ce4	38		sec				sec
.1ce5	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1ce7	65 78		adc $78				adc 	rsPointer
.1ce9	85 78		sta $78				sta 	rsPointer
.1ceb	a5 79		lda $79				lda 	rsPointer+1
.1ced	69 ff		adc #$ff			adc 	#$FF
.1cef	85 79		sta $79				sta 	rsPointer+1
.1cf1	68		pla				pla 								; get marker back
.1cf2	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1cf4	91 78		sta ($78),y			sta 	(rsPointer),y
.1cf6	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1cf8	60		rts				rts
.1cf9					RSFree:
.1cf9	18		clc				clc
.1cfa	65 78		adc $78				adc 	rsPointer
.1cfc	85 78		sta $78				sta 	rsPointer
.1cfe	90 02		bcc $1d02			bcc 	_RSFExit
.1d00	e6 79		inc $79				inc 	rsPointer+1
.1d02					_RSFExit:
.1d02	60		rts				rts
.1d03					RSSavePosition:
.1d03	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1d05	a8		tay				tay 								; this is where we write it.
.1d06	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1d08	91 78		sta ($78),y			sta 	(rsPointer),y
.1d0a	c8		iny				iny
.1d0b	a5 03		lda $03				lda 	codePtr+1
.1d0d	91 78		sta ($78),y			sta 	(rsPointer),y
.1d0f	c8		iny				iny
.1d10	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1d12	91 78		sta ($78),y			sta 	(rsPointer),y
.1d14	a8		tay				tay 								; fix Y back again to original value
.1d15	60		rts				rts
.1d16					RSLoadPosition:
.1d16	a8		tay				tay
.1d17	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1d19	85 02		sta $02				sta 	codePtr
.1d1b	c8		iny				iny
.1d1c	b1 78		lda ($78),y			lda 	(rsPointer),y
.1d1e	85 03		sta $03				sta 	codePtr+1
.1d20	c8		iny				iny
.1d21	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1d23	a8		tay				tay 								; to Y
.1d24	60		rts				rts

;******  Return to file: ../source/main/main.asm

.1d25					mainHandler:
.1d25	7c 28 1d	jmp ($1d28,x)			jmp 	(mainVectors,x)
.1d28					mainVectors:
>1d28	8f 17					.word LinkEvaluate         ; index 0
>1d2a	95 17					.word LinkEvaluateInteger  ; index 2
>1d2c	9b 17					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.asm

.1d2e					assemblerHandler:
.1d2e	7c 31 1d	jmp ($1d31,x)			jmp 	(assemblerVectors,x)
.1d31					assemblerVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.asm


;******  Processing file: ../source/device/x16/x16io.asm

.1d31					IONewLine:
.1d31	48		pha				pha
.1d32	a9 0d		lda #$0d			lda 	#13
.1d34	20 41 1d	jsr $1d41			jsr 	IOPrintChar
.1d37	68		pla				pla
.1d38	60		rts				rts
.1d39					IOTab:
.1d39	48		pha				pha
.1d3a	a9 20		lda #$20			lda 	#32
.1d3c	20 41 1d	jsr $1d41			jsr 	IOPrintChar
.1d3f	68		pla				pla
.1d40	60		rts				rts
.1d41					IOPrintChar:
.1d41	aa		tax				tax
.1d42	5a		phy				phy
.1d43	8a		txa				txa
.1d44	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1d47	7a		ply				ply
.1d48	60		rts				rts

;******  Return to file: ../source/device/device.asm

.1d49					deviceHandler:
.1d49	7c 4c 1d	jmp ($1d4c,x)			jmp 	(deviceVectors,x)
.1d4c					deviceVectors:
>1d4c	31 1d					.word IONewLine            ; index 0
>1d4e	41 1d					.word IOPrintChar          ; index 2
>1d50	39 1d					.word IOTab                ; index 4

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.asm


;******  Processing file: ../source/error/errorhandler.asm

.1d52					ErrorHandler:
.1d52	a9 ee		lda #$ee			lda 	#$EE
.1d54	a8		tay				tay
>1d55	db						.byte 	$DB
.1d56	4c 56 1d	jmp $1d56	_EHHalt:jmp 	_EHHalt

;******  Return to file: ../source/error/error.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.asm

.1d59					floatingpointHandler:
.1d59	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.1d5b	20 52 1d	jsr $1d52			jsr 	ErrorHandler

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.asm

.1d5e					interactionHandler:
.1d5e	7c 61 1d	jmp ($1d61,x)			jmp 	(interactionVectors,x)
.1d61					interactionVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.asm


;******  Processing file: ../source/string/chr.asm

.1d61					StringChrs:
.1d61	aa		tax				tax 								; set up stack
.1d62	a9 02		lda #$02			lda 	#2
.1d64	20 17 1e	jsr $1e17			jsr 	AllocateSoftString
.1d67	98		tya				tya
.1d68	20 3f 1e	jsr $1e3f			jsr 	WriteSoftString
.1d6b	20 70 1d	jsr $1d70			jsr 	ReturnSoftString
.1d6e	8a		txa				txa
.1d6f	60		rts				rts
.1d70					ReturnSoftString:
.1d70	a5 7a		lda $7a				lda 	softMemAlloc
.1d72	95 48		sta $48,x			sta 	esInt0,x
.1d74	a5 7b		lda $7b				lda 	softMemAlloc+1
.1d76	95 50		sta $50,x			sta 	esInt1,x
.1d78	a9 00		lda #$00			lda 	#0
.1d7a	95 58		sta $58,x			sta 	esInt2,x
.1d7c	95 60		sta $60,x			sta 	esInt3,x
.1d7e	a9 40		lda #$40			lda 	#$40
.1d80	95 40		sta $40,x			sta 	esType,x
.1d82	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/compare.asm

.1d83					STRCompare:
.1d83	48		pha				pha 								; save A
.1d84	aa		tax				tax 								; put stack pos in X
.1d85	98		tya				tya
.1d86	48		pha				pha
.1d87	20 bb 1d	jsr $1dbb			jsr 	CopyStringPair
.1d8a	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1d8c	b1 04		lda ($04),y			lda 	(temp0),y
.1d8e	d1 06		cmp ($06),y			cmp 	(temp1),y
.1d90	90 02		bcc $1d94			bcc 	_SCNotSmaller
.1d92	b1 06		lda ($06),y			lda 	(temp1),y
.1d94					_SCNotSmaller:
.1d94	aa		tax				tax 								; put that in X. We compare this many chars first.
.1d95					_SCCompareLoop:
.1d95	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1d97	f0 0c		beq $1da5			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1d99	ca		dex				dex 								; decrement chars to compare.
.1d9a	c8		iny				iny 								; move to next character
.1d9b	38		sec				sec 								; calculate s1[y]-s2[y]
.1d9c	b1 04		lda ($04),y			lda 	(temp0),y
.1d9e	f1 06		sbc ($06),y			sbc 	(temp1),y
.1da0	d0 0a		bne $1dac			bne 	_SCReturnResult 			; if different return sign of A
.1da2	4c 95 1d	jmp $1d95			jmp 	_SCCompareLoop
.1da5					_SCSameToEndShortest
.1da5	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1da7	38		sec				sec
.1da8	b1 04		lda ($04),y			lda 	(temp0),y
.1daa	f1 06		sbc ($06),y			sbc 	(temp1),y
.1dac					_SCReturnResult:
.1dac	08		php				php 								; set return to zero preserving PSW.
.1dad	a2 00		ldx #$00			ldx 	#0
.1daf	28		plp				plp
.1db0	f0 05		beq $1db7			beq 	_SCExit 					; two values equal, then exit
.1db2	ca		dex				dex 								; X = $FF
.1db3	90 02		bcc $1db7			bcc 	_SCExit 					; if 1st < 2nd then -1
.1db5	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1db7					_SCExit:
.1db7	68		pla				pla
.1db8	a8		tay				tay
.1db9	68		pla				pla
.1dba	60		rts				rts
.1dbb					CopyStringPair:
.1dbb	b5 49		lda $49,x			lda 	esInt0+1,x
.1dbd	85 06		sta $06				sta 	temp1
.1dbf	b5 51		lda $51,x			lda 	esInt1+1,x
.1dc1	85 07		sta $07				sta 	temp1+1
.1dc3					CopyStringTop:
.1dc3	b5 48		lda $48,x			lda 	esInt0,x
.1dc5	85 04		sta $04				sta 	temp0
.1dc7	b5 50		lda $50,x			lda 	esInt1,x
.1dc9	85 05		sta $05				sta 	temp0+1
.1dcb	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/concat.asm

.1dcc					StringConcat:
.1dcc	aa		tax				tax									; stack pos in X
.1dcd	98		tya				tya
.1dce	48		pha				pha
.1dcf	20 bb 1d	jsr $1dbb			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1dd2	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1dd3	a0 00		ldy #$00			ldy 	#0
.1dd5	b1 04		lda ($04),y			lda 	(temp0),y
.1dd7	71 06		adc ($06),y			adc 	(temp1),y
.1dd9	b0 18		bcs $1df3			bcs 	_SCError 					; just too many characters here.
.1ddb	20 17 1e	jsr $1e17			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1dde	20 0e 1e	jsr $1e0e			jsr 	CopySoftToStack 			; copy that to the stack.
.1de1	20 f8 1d	jsr $1df8			jsr 	_SCCopyTemp0 				; copy temp0
.1de4	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1de6	85 04		sta $04				sta 	temp0
.1de8	a5 07		lda $07				lda 	temp1+1
.1dea	85 05		sta $05				sta 	temp0+1
.1dec	20 f8 1d	jsr $1df8			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1def	68		pla				pla
.1df0	a8		tay				tay
.1df1	8a		txa				txa 								; and A
.1df2	60		rts				rts
.1df3					_SCError:
.1df3	a2 0c		ldx #$0c			ldx 	#ErrorID_StrLen
.1df5	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1df8					_SCCopyTemp0:
.1df8	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1dfa	b1 04		lda ($04),y			lda 	(temp0),y
.1dfc	85 08		sta $08				sta 	temp2
.1dfe					_SCCopyLoop:
.1dfe	a5 08		lda $08				lda 	temp2 						; done the lot
.1e00	f0 0b		beq $1e0d			beq 	_SCCopyExit
.1e02	c6 08		dec $08				dec 	temp2
.1e04	c8		iny				iny 								; get next char
.1e05	b1 04		lda ($04),y			lda 	(temp0),y
.1e07	20 3f 1e	jsr $1e3f			jsr 	WriteSoftString 			; write to soft string.
.1e0a	4c fe 1d	jmp $1dfe			jmp 	_SCCopyLoop
.1e0d					_SCCopyExit:
.1e0d	60		rts				rts
.1e0e					CopySoftToStack:
.1e0e	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1e10	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1e12	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1e14	95 50		sta $50,x			sta 	esInt1,x
.1e16	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1e17					AllocateSoftString:
.1e17	85 0a		sta $0a				sta 	tempShort 					; save count
.1e19	98		tya				tya
.1e1a	48		pha				pha
.1e1b	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1e1d	d0 0b		bne $1e2a			bne 	_ASSDone
.1e1f	ad cc 0a	lda $0acc			lda 	highMemory 					; reset the soft memory alloc pointer.
.1e22	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1e24	ac cd 0a	ldy $0acd			ldy 	highMemory+1 				; but it needs to be reset before each command.
.1e27	88		dey				dey
.1e28	84 7b		sty $7b				sty 	softMemAlloc+1
.1e2a					_ASSDone:
.1e2a	38		sec				sec 								; allocate downwards enough memory
.1e2b	a5 7a		lda $7a				lda 	softMemAlloc
.1e2d	e5 0a		sbc $0a				sbc 	tempShort
.1e2f	85 7a		sta $7a				sta 	softMemAlloc
.1e31	a5 7b		lda $7b				lda 	softMemAlloc+1
.1e33	e9 00		sbc #$00			sbc 	#0
.1e35	85 7b		sta $7b				sta 	softMemAlloc+1
.1e37	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1e39	a8		tay				tay
.1e3a	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e3c	68		pla				pla
.1e3d	a8		tay				tay
.1e3e	60		rts				rts
.1e3f					WriteSoftString:
.1e3f	84 0a		sty $0a				sty 	tempShort 					; save Y
.1e41	48		pha				pha
.1e42	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1e44	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1e46	18		clc				clc
.1e47	69 01		adc #$01			adc 	#1
.1e49	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e4b	a8		tay				tay 								; pointer in Y
.1e4c	68		pla				pla 								; get char and write.
.1e4d	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e4f	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1e51	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/substring.asm

.0af9					NullString:
>0af9							.fill 	1							; don't waste memory concreting null strings.
.1e52					StringSubstring:
.1e52	48		pha				pha
.1e53	aa		tax				tax 								; access stack.
.1e54	98		tya				tya
.1e55	48		pha				pha
.1e56	20 c3 1d	jsr $1dc3			jsr 	CopyStringTop 				; point temp0 to the string.
.1e59	a0 00		ldy #$00			ldy 	#0 							; get length.
.1e5b	b1 04		lda ($04),y			lda 	(temp0),Y
.1e5d	85 06		sta $06				sta 	temp1
.1e5f	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.1e61	c5 06		cmp $06				cmp 	temp1 						;
.1e63	f0 02		beq $1e67			beq 	_SSBOkay
.1e65	b0 2a		bcs $1e91			bcs 	_SSBReturnNull
.1e67					_SSBOkay:
.1e67	a5 06		lda $06				lda 	temp1 						; get the total length +1
.1e69	18		clc				clc
.1e6a	69 01		adc #$01			adc 	#1
.1e6c	38		sec				sec
.1e6d	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.1e6f	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.1e71	90 02		bcc $1e75			bcc		_SSBTrunc
.1e73	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e75					_SSBTrunc:
.1e75	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.1e77	18		clc				clc
.1e78	69 01		adc #$01			adc 	#1 							; add 1
.1e7a	20 17 1e	jsr $1e17			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1e7d	20 0e 1e	jsr $1e0e			jsr 	CopySoftToStack 			; copy that to the stack.
.1e80	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.1e82					_SSBCopyLoop:
.1e82	a5 07		lda $07				lda 	temp1+1 					; done them all
.1e84	f0 0e		beq $1e94			beq 	_SSBExit
.1e86	c6 07		dec $07				dec 	temp1+1
.1e88	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.1e8a	20 3f 1e	jsr $1e3f			jsr 	WriteSoftString
.1e8d	c8		iny				iny
.1e8e	4c 82 1e	jmp $1e82			jmp 	_SSBCopyLoop
.1e91					_SSBReturnNull:
.1e91	20 98 1e	jsr $1e98			jsr 	ReturnNull
.1e94					_SSBExit:
.1e94	68		pla				pla
.1e95	a8		tay				tay
.1e96	68		pla				pla
.1e97	60		rts				rts
.1e98					ReturnNull:
.1e98	a9 00		lda #$00			lda 	#0 							; clear null string
.1e9a	8d f9 0a	sta $0af9			sta 	NullString
.1e9d	a9 f9		lda #$f9			lda 	#NullString & $FF 			; set a pointer to it
.1e9f	95 48		sta $48,x			sta 	esInt0,x
.1ea1	a9 0a		lda #$0a			lda 	#NullString >> 8
.1ea3	95 50		sta $50,x			sta 	esInt1,x
.1ea5	60		rts				rts

;******  Return to file: ../source/string/string.asm

.1ea6					stringHandler:
.1ea6	7c a9 1e	jmp ($1ea9,x)			jmp 	(stringVectors,x)
.1ea9					stringVectors:
>1ea9	61 1d					.word StringChrs           ; index 0
>1eab	cc 1d					.word StringConcat         ; index 2
>1ead	83 1d					.word STRCompare           ; index 4
>1eaf	52 1e					.word StringSubstring      ; index 6

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.asm

.1eb1					tokeniserHandler:
.1eb1	7c b4 1e	jmp ($1eb4,x)			jmp 	(tokeniserVectors,x)
.1eb4					tokeniserVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/access.asm

.0afa					varHash:
>0afa							.fill	1
.0afb					varType:
>0afb							.fill 	1
.0afc					varEnd:
>0afc							.fill 	1
.0afd					hashList:
>0afd							.fill 	2
.1eb4					AccessVariable:
.1eb4	aa		tax				tax 								; stack in X
.1eb5	c8		iny				iny
.1eb6	b1 02		lda ($02),y			lda 	(codePtr),y
.1eb8	88		dey				dey
.1eb9	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1ebb	d0 15		bne $1ed2			bne 	_AVLong
.1ebd	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1ebf	38		sec				sec 	 							; make it 0-25
.1ec0	e9 01		sbc #$01			sbc 	#1
.1ec2	0a		asl a				asl 	a 							; x 4 is LSB of address
.1ec3	0a		asl a				asl 	a
.1ec4	95 48		sta $48,x			sta 	esInt0,x
.1ec6	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.1ec8	95 50		sta $50,x			sta 	esInt1,x
.1eca	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1ecc	95 40		sta $40,x			sta 	esType,x
.1ece	c8		iny				iny 								; skip over the variable reference in the code.
.1ecf	c8		iny				iny
.1ed0	8a		txa				txa 								; stack in A to return.
.1ed1	60		rts				rts
.1ed2					_AVLong:
.1ed2	8a		txa				txa
.1ed3	48		pha				pha
.1ed4	20 f3 1e	jsr $1ef3			jsr 	AccessSetup 				; set up the basic stuff.
.1ed7	20 34 1f	jsr $1f34			jsr 	FindVariable 				; does the variable exist already
.1eda	b0 0e		bcs $1eea			bcs 	_AVFound
.1edc	ad fb 0a	lda $0afb			lda 	varType 					; is the variable type an array
.1edf	4a		lsr a				lsr 	a
.1ee0	90 05		bcc $1ee7			bcc 	_AVCanCreate
.1ee2	a2 13		ldx #$13			ldx 	#ErrorID_noauto
.1ee4	20 52 1d	jsr $1d52			jsr 	ErrorHandler
.1ee7					_AVCanCreate:
.1ee7	20 33 1f	jsr $1f33			jsr 	CreateVariable 				; no, create it.
.1eea					_AVFound:
.1eea	68		pla				pla
.1eeb	aa		tax				tax
.1eec	ac fc 0a	ldy $0afc			ldy 	varEnd 						; restore Y
.1eef	68		pla				pla
.1ef0	aa		tax				tax
.1ef1	8a		txa				txa 								; return stack in A and return
.1ef2	60		rts				rts
.1ef3					AccessSetup:
.1ef3	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.1ef5	8d fa 0a	sta $0afa			sta 	varHash
.1ef8	98		tya				tya
.1ef9	48		pha				pha
.1efa	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.1efc	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.1efe	b0 0b		bcs $1f0b			bcs 	_ASComplete
.1f00	18		clc				clc 								; add to the hash. Might improve this.
.1f01	6d fa 0a	adc $0afa			adc 	varHash
.1f04	8d fa 0a	sta $0afa			sta 	varHash
.1f07	c8		iny				iny 								; next character
.1f08	4c fa 1e	jmp $1efa			jmp 	_ASLoop
.1f0b					_ASComplete:
.1f0b	8d fb 0a	sta $0afb			sta 	varType 					; save variable type byte
.1f0e	c8		iny				iny
.1f0f	8c fc 0a	sty $0afc			sty 	varEnd 						; save the ending position.
.1f12	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.1f13	e9 3a		sbc #$3a			sbc 	#$3A
>1f15	db						.byte 	$DB
.1f16	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.1f17	0a		asl a				asl 	a
.1f18	0a		asl a				asl 	a
.1f19	0a		asl a				asl 	a 							; 2 bytes/word
.1f1a	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.1f1c	ad fa 0a	lda $0afa			lda 	varHash 					; get hash
.1f1f	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.1f21	0a		asl a				asl  	a 							; x 2 (for word) and CC
.1f22	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.1f24	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.1f26	8d fd 0a	sta $0afd			sta 	hashList
.1f29	a9 0a		lda #$0a			lda 	#hashTables >> 8
.1f2b	69 00		adc #$00			adc 	#0
.1f2d	8d fe 0a	sta $0afe			sta 	hashList+1
.1f30	68		pla				pla
.1f31	a8		tay				tay
.1f32	60		rts				rts

;******  Return to file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/create.asm

.1f33					CreateVariable:
>1f33	db						.byte 	$DB

;******  Return to file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/find.asm

.1f34					FindVariable:
.1f34	18		clc				clc
.1f35	60		rts				rts

;******  Return to file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/reset.asm

.1f36					HashTableReset:
.1f36	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.1f38	a9 00		lda #$00			lda 	#0
.1f3a					_HTRClear:
.1f3a	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.1f3d	ca		dex				dex
.1f3e	d0 fa		bne $1f3a			bne 	_HTRClear
.1f40	60		rts				rts

;******  Return to file: ../source/variable/variable.asm

.1f41					variableHandler:
.1f41	7c 44 1f	jmp ($1f44,x)			jmp 	(variableVectors,x)
.1f44					variableVectors:
>1f44	b4 1e					.word AccessVariable       ; index 0
>1f46	36 1f					.word HashTableReset       ; index 2

;******  Return to file: ../source/basic.asm


;******  End of listing
