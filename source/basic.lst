
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ../source/basic.asm
; Sun Feb 28 05:59:15 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/basic.asm


;******  Processing file: ../source/main/01common.inc

=8					StackSize = 8

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/02macros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.
.0868					basePage:
>0868							.fill 	2
.086a					endMemory:
>086a							.fill 	2
.086c					highMemory:
>086c							.fill 	2
.086e					lowMemory:
>086e							.fill 	2

;******  Processing file: ../source/main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$9d					TOK_STRUCTST=$9d
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ../source/main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/imath/intmacros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/errorhandler.inc


;******  Processing file: ../source/error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assert
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma
=10					ErrorID_NoReference = 10 ; Missing reference

;******  Return to file: ../source/error/errorhandler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/memory.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.asm


;******  Processing file: ../source/main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d 68 08	sta $0868			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d 69 08	sta $0869			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d 6a 08	sta $086a			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d 6b 08	sta $086b			sta 	1+(endMemory)
.1017	4c e6 10	jmp $10e6			jmp 	Command_Run
.1a8a					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ../source/main/../generated/testcode.inc

>5000	09 64 00 04 3a 8d 90 42			.byte 9,100,0,4,58,141,144,66,128,8,110,0,5,58,141,106,128,8,120,0,1,58,141,64,128,11,130,0,1,58,141,1,58,143,65,128,16,140,0,151,192,100,64,141,192,66,88,93,101,80,114,128,10,150,0,6,58,141,192,100,64,128,11,160,0,6,58,151,68,141,144,65,128,9,170,0,152,6,58,141,65,128,10,180,0,6,58,152,66,141,67,128,5,190,0,218,128,5,200,0,219,128,0
>5008	80 08 6e 00 05 3a 8d 6a 80 08 78 00 01 3a 8d 40
>5018	80 0b 82 00 01 3a 8d 01 3a 8f 41 80 10 8c 00 97
>5028	c0 64 40 8d c0 42 58 5d 65 50 72 80 0a 96 00 06
>5038	3a 8d c0 64 40 80 0b a0 00 06 3a 97 44 8d 90 41
>5048	80 09 aa 00 98 06 3a 8d 41 80 0a b4 00 06 3a 98
>5058	42 8d 43 80 05 be 00 da 80 05 c8 00 db 80 00

;******  Return to file: ../source/main/00start.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/assert.asm

.101a					Command_Assert:
.101a	20 86 15	jsr $1586			jsr 	EvaluateRoot 				; what is being asserted.
.101d	20 d6 19	jsr $19d6			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.1025	20 45 1a	jsr $1a45			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad 6a 08	lda $086a			lda 	endMemory					; set high memory = end of memory
.102d	8d 6c 08	sta $086c			sta 	highMemory
.1030	ad 6b 08	lda $086b			lda 	endMemory+1
.1033	8d 6d 08	sta $086d			sta 	highMemory+1
.1036	ad 68 08	lda $0868			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad 69 08	lda $0869			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d 6e 08	sta $086e			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d 6f 08	sta $086f			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 64 10	jsr $1064			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	68		pla				pla
.1062	a8		tay				tay
.1063	60		rts				rts
.1064					AdvanceLowMemoryByte:
.1064	18		clc				clc
.1065	6d 6e 08	adc $086e			adc 	lowMemory
.1068	8d 6e 08	sta $086e			sta 	lowMemory
.106b	90 03		bcc $1070			bcc 	_ALMBExit
.106d	ee 6f 08	inc $086f			inc 	lowMemory+1
.1070					_ALMBExit:
.1070	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/let.asm

.1071					CommandLet:
.1071	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1073	20 c0 15	jsr $15c0			jsr 	EvaluateReference
.1076	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.1078	20 17 1a	jsr $1a17			jsr 	CheckToken
.107b	e8		inx				inx 								; do RHS
.107c	20 88 15	jsr $1588			jsr 	Evaluate 					; evaluate and derefernce
.107f	ca		dex				dex
.1080	20 84 10	jsr $1084			jsr 	WriteValue 					; write it out
.1083	60		rts				rts
.1084					WriteValue:
.1084	98		tya				tya
.1085	48		pha				pha
.1086	20 d8 10	jsr $10d8			jsr 	_WVSetTemp0 				; set temp0 to point to target address.
.1089	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.108b	55 41		eor $41,x			eor 	esType+1,x
.108d	29 40		and #$40			and 	#$40
.108f	d0 50		bne $10e1			bne		_WVType
.1091	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.1093	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.1095	29 40		and #$40			and 	#$40
.1097	d0 30		bne $10c9			bne 	_WVCopyData2
.1099	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.109b	15 41		ora $41,x			ora 	esType+1,x
.109d	4a		lsr a				lsr 	a
.109e	90 18		bcc $10b8			bcc 	_WVCopyData4
.10a0	b5 40		lda $40,x			lda 	esType,x
.10a2	4a		lsr a				lsr 	a
.10a3	90 3c		bcc $10e1			bcc 	_WVType
.10a5	e8		inx				inx 								; force the value being written to be a float.
.10a6	20 5e 12	jsr $125e			jsr 	BPMakeFloat
.10a9	ca		dex				dex
.10aa	20 d8 10	jsr $10d8			jsr 	_WVSetTemp0 				; set Temp0 to write address
.10ad	e8		inx				inx
.10ae	8a		txa				txa
.10af	a2 1c		ldx #$1c		ldx	#28
.10b1	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.10b4	aa		tax				tax
.10b5	4c d5 10	jmp $10d5			jmp 	_WVCopyExit
.10b8					_WVCopyData4:
.10b8	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.10ba	29 20		and #$20			and 	#$20
.10bc	d0 11		bne $10cf			bne 	_WVCopyData1
.10be	a0 03		ldy #$03			ldy 	#3
.10c0	b5 61		lda $61,x			lda 	esInt3+1,x
.10c2	91 04		sta ($04),y			sta 	(temp0),y
.10c4	88		dey				dey
.10c5	b5 59		lda $59,x			lda 	esInt2+1,x
.10c7	91 04		sta ($04),y			sta 	(temp0),y
.10c9					_WVCopyData2:
.10c9	a0 01		ldy #$01			ldy 	#1
.10cb	b5 51		lda $51,x			lda 	esInt1+1,x
.10cd	91 04		sta ($04),y			sta 	(temp0),y
.10cf					_WVCopyData1:
.10cf	a0 00		ldy #$00			ldy 	#0
.10d1	b5 49		lda $49,x			lda 	esInt0+1,x
.10d3	91 04		sta ($04),y			sta 	(temp0),y
.10d5					_WVCopyExit:
.10d5	68		pla				pla
.10d6	a8		tay				tay
.10d7	60		rts				rts
.10d8					_WVSetTemp0:
.10d8	b5 48		lda $48,x			lda 	esInt0,x
.10da	85 04		sta $04				sta 	temp0
.10dc	b5 50		lda $50,x			lda 	esInt1,x
.10de	85 05		sta $05				sta 	temp0+1
.10e0	60		rts				rts
.10e1					_WVType:
.10e1	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.10e3	20 45 1a	jsr $1a45			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/run.asm

.10e6					Command_Run:
.10e6	a2 ff		ldx #$ff			ldx 	#$FF
.10e8	9a		txs				txs
.10e9	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.10ec	20 40 11	jsr $1140			jsr 	ResetCodeAddress
.10ef	a0 03		ldy #$03			ldy 	#3
.10f1					CRNextInstruction:
.10f1	64 79		stz $79				stz 	softMemAlloc+1
.10f3	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.10f5	10 14		bpl $110b			bpl 	_CRNotToken
.10f7	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.10f9	b0 04		bcs $10ff			bcs 	_CRExecute
.10fb	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.10fd	b0 16		bcs $1115			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.10ff					_CRExecute:
.10ff	c8		iny				iny 								; consume it.
.1100	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1101	aa		tax				tax
.1102	20 08 11	jsr $1108			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1105	4c f1 10	jmp $10f1			jmp 	CRNextInstruction
.1108					_CRRunRoutine:
.1108	7c 51 11	jmp ($1151,x)			jmp 	(Group0Vectors,x)
.110b					_CRNotToken:
.110b	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.110d	b0 3e		bcs $114d			bcs 	Unimplemented
.110f					_CRDefaultLet:
.110f	20 71 10	jsr $1071			jsr 	CommandLet 					; do the default, LET
.1112	4c f1 10	jmp $10f1			jmp 	CRNextInstruction
.1115					_CRCheckIndirect:
.1115	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1117	f0 f6		beq $110f			beq 	_CRDefaultLet
.1119	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.111b	f0 f2		beq $110f			beq 	_CRDefaultLet
.111d	d0 2e		bne $114d			bne 	Unimplemented
.111f					CommandShift1:
.111f	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1121	10 2a		bpl $114d			bpl 	Unimplemented 				; we have an error as this should not happen.
.1123	0a		asl a				asl 	a 							; double into X
.1124	aa		tax				tax
.1125	c8		iny				iny 								; advance over it.
.1126	20 2c 11	jsr $112c			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1129	4c f1 10	jmp $10f1			jmp 	CRNextInstruction
.112c					_RunIt:
.112c	7c 05 12	jmp ($1205,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.112f					CommandShift2:
.112f	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1131	10 1a		bpl $114d			bpl 	Unimplemented 				; we have an error as this should not happen.
.1133	0a		asl a				asl 	a 							; double into X
.1134	aa		tax				tax
.1135	c8		iny				iny 								; advance over it.
.1136	20 3c 11	jsr $113c			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1139	4c f1 10	jmp $10f1			jmp 	CRNextInstruction
.113c					_RunIt:
.113c	7c 15 12	jmp ($1215,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.113f					CommandColon:
.113f	60		rts				rts
.1140					ResetCodeAddress:
.1140	ad 68 08	lda $0868			lda 	basePage 					; copy basePage to code Pointer
.1143	85 02		sta $02				sta 	codePtr
.1145	ad 69 08	lda $0869			lda 	basePage+1
.1148	85 03		sta $03				sta 	codePtr+1
.114a	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.114c	60		rts				rts
.114d					Unimplemented:
>114d	db						.byte 	$DB
.114e	4c 4d 11	jmp $114d			jmp 	Unimplemented

;******  Processing file: ../source/main/commands/../../generated/tokenvectors0.inc

.1151					Group0Vectors:
>1151	2b 12					.word	AdvanceNextLine          ; $80 [[eol]]
>1153	1f 11					.word	CommandShift1            ; $81 [[sh1]]
>1155	2f 11					.word	CommandShift2            ; $82 [[sh2]]
>1157	4d 11					.word	Unimplemented            ; $83 [[sh3]]
>1159	4d 11					.word	Unimplemented            ; $84 [[fpc]]
>115b	4d 11					.word	Unimplemented            ; $85 [[str]]
>115d	00 13					.word	AndHandler               ; $86 and
>115f	ed 12					.word	OrHandler                ; $87 or
>1161	da 12					.word	XorHandler               ; $88 xor
>1163	17 14					.word	CompareGreaterEq         ; $89 >=
>1165	21 14					.word	CompareLessEq            ; $8a <=
>1167	03 14					.word	CompareGreater           ; $8b >
>1169	f9 13					.word	CompareLess              ; $8c <
>116b	ef 13					.word	CompareEquals            ; $8d =
>116d	0d 14					.word	CompareNotEquals         ; $8e <>
>116f	6b 12					.word	AddHandler               ; $8f +
>1171	8e 12					.word	SubHandler               ; $90 -
>1173	26 13					.word	ShrHandler               ; $91 >>
>1175	13 13					.word	ShlHandler               ; $92 <<
>1177	a1 12					.word	MulHandler               ; $93 *
>1179	b4 12					.word	DivHandler               ; $94 /
>117b	c7 12					.word	ModHandler               ; $95 mod
>117d	5f 13					.word	PowerHandler             ; $96 ^
>117f	39 13					.word	WordRefHandler           ; $97 !
>1181	4c 13					.word	ByteRefHandler           ; $98 ?
>1183	4d 11					.word	Unimplemented            ; $99 repeat
>1185	4d 11					.word	Unimplemented            ; $9a while
>1187	4d 11					.word	Unimplemented            ; $9b for
>1189	4d 11					.word	Unimplemented            ; $9c if
>118b	4d 11					.word	Unimplemented            ; $9d until
>118d	4d 11					.word	Unimplemented            ; $9e wend
>118f	4d 11					.word	Unimplemented            ; $9f next
>1191	4d 11					.word	Unimplemented            ; $a0 then
>1193	4d 11					.word	Unimplemented            ; $a1 endif
>1195	5e 15					.word	UnaryParenthesis         ; $a2 (
>1197	1d 16					.word	UnaryLen                 ; $a3 len(
>1199	61 16					.word	UnarySgn                 ; $a4 sgn(
>119b	4a 16					.word	UnaryAbs                 ; $a5 abs(
>119d	ba 16					.word	Unary_Random             ; $a6 random(
>119f	04 17					.word	Unary_Page               ; $a7 page
>11a1	ab 19					.word	MInt32True               ; $a8 true
>11a3	af 19					.word	MInt32False              ; $a9 false
>11a5	cf 16					.word	Unary_Min                ; $aa min(
>11a7	d3 16					.word	Unary_Max                ; $ab max(
>11a9	4d 11					.word	Unimplemented            ; $ac sys(
>11ab	4d 11					.word	Unimplemented            ; $ad timer(
>11ad	4d 11					.word	Unimplemented            ; $ae event(
>11af	4d 11					.word	Unimplemented            ; $af get(
>11b1	4d 11					.word	Unimplemented            ; $b0 inkey(
>11b3	4d 11					.word	Unimplemented            ; $b1 alloc(
>11b5	4d 11					.word	Unimplemented            ; $b2 chr$(
>11b7	4d 11					.word	Unimplemented            ; $b3 left$(
>11b9	4d 11					.word	Unimplemented            ; $b4 mid$(
>11bb	4d 11					.word	Unimplemented            ; $b5 right$(
>11bd	4d 11					.word	Unimplemented            ; $b6 str$(
>11bf	4d 11					.word	Unimplemented            ; $b7 val(
>11c1	78 16					.word	UnaryPeek                ; $b8 peek(
>11c3	7e 16					.word	UnaryDeek                ; $b9 deek(
>11c5	84 16					.word	UnaryLeek                ; $ba leek(
>11c7	3b 16					.word	UnaryAsc                 ; $bb asc(
>11c9	4d 11					.word	Unimplemented            ; $bc int(
>11cb	4d 11					.word	Unimplemented            ; $bd float(
>11cd	12 17					.word	UnaryReference           ; $be @
>11cf	28 17					.word	UnaryComplement          ; $bf ~
>11d1	25 17					.word	UnaryHexMarker           ; $c0 &
>11d3	4d 11					.word	Unimplemented            ; $c1 )
>11d5	3f 11					.word	CommandColon             ; $c2 :
>11d7	4d 11					.word	Unimplemented            ; $c3 ,
>11d9	4d 11					.word	Unimplemented            ; $c4 ;
>11db	4d 11					.word	Unimplemented            ; $c5 ]
>11dd	4d 11					.word	Unimplemented            ; $c6 to
>11df	4d 11					.word	Unimplemented            ; $c7 step
>11e1	4d 11					.word	Unimplemented            ; $c8 proc
>11e3	4d 11					.word	Unimplemented            ; $c9 endproc
>11e5	4d 11					.word	Unimplemented            ; $ca local
>11e7	4d 11					.word	Unimplemented            ; $cb rem
>11e9	4d 11					.word	Unimplemented            ; $cc let
>11eb	4d 11					.word	Unimplemented            ; $cd '
>11ed	4d 11					.word	Unimplemented            ; $ce [
>11ef	4d 11					.word	Unimplemented            ; $cf input
>11f1	4d 11					.word	Unimplemented            ; $d0 else
>11f3	4d 11					.word	Unimplemented            ; $d1 vdu
>11f5	4d 11					.word	Unimplemented            ; $d2 read
>11f7	4d 11					.word	Unimplemented            ; $d3 data
>11f9	4d 11					.word	Unimplemented            ; $d4 restore
>11fb	4d 11					.word	Unimplemented            ; $d5 print
>11fd	4d 11					.word	Unimplemented            ; $d6 goto
>11ff	4d 11					.word	Unimplemented            ; $d7 gosub
>1201	4d 11					.word	Unimplemented            ; $d8 return
>1203	1a 10					.word	Command_Assert           ; $d9 assert
>1205	23 12					.word	CommandStop              ; $da stop
>1207	28 12					.word	CommandEnd               ; $db end
>1209	4d 11					.word	Unimplemented            ; $dc dim
>120b	4d 11					.word	Unimplemented            ; $dd poke
>120d	4d 11					.word	Unimplemented            ; $de doke
>120f	4d 11					.word	Unimplemented            ; $df loke

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors1.inc

.1211					Group1Vectors:
>1211	28 10					.word	CommandClear             ; $86 clear
>1213	4d 11					.word	Unimplemented            ; $87 load
>1215	4d 11					.word	Unimplemented            ; $88 save
>1217	4d 11					.word	Unimplemented            ; $89 list
>1219	4d 11					.word	Unimplemented            ; $8a new
>121b	e6 10					.word	Command_Run              ; $8b run
>121d	4d 11					.word	Unimplemented            ; $8c code
>121f	4d 11					.word	Unimplemented            ; $8d option

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors2.inc

.1221					Group2Vectors:
>1221	4d 11					.word	Unimplemented            ; $86 vpoke

;******  Return to file: ../source/main/commands/run.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/stopend.asm

.1223					CommandStop:
.1223	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.1225	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.1228					CommandEnd:
.1228	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.122b					AdvanceNextLine:
.122b	a0 00		ldy #$00			ldy 	#0 							; get offset
.122d	b1 02		lda ($02),y			lda 	(codePtr),y
.122f	18		clc				clc 								; add to codePtr
.1230	65 02		adc $02				adc 	codePtr
.1232	85 02		sta $02				sta 	codePtr
.1234	90 02		bcc $1238			bcc 	_ANLNoCarry
.1236	e6 03		inc $03				inc 	codePtr+1
.1238					_ANLNoCarry:
.1238	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.123a	f0 ec		beq $1228			beq 	CommandEnd 					; execute END
.123c	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.123e	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/binary.asm

.123f					BinaryProcess:
.123f	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1241	15 41		ora $41,x			ora 	esType+1,x
.1243	0a		asl a				asl 	a
.1244	30 0e		bmi $1254			bmi 	_BPStringType 				; if one is set, then string type.
.1246	18		clc				clc 								; return CC for integer
.1247	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1249	f0 08		beq $1253			beq 	_BPExit 					; if both integer then return with CC.
.124b	20 59 12	jsr $1259			jsr 	BPMakeBothFloat 			; make both float
.124e	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1250	95 40		sta $40,x			sta 	esType,x
.1252	38		sec				sec 								; and return with carry set.
.1253					_BPExit:
.1253	60		rts				rts
.1254					_BPStringType:
.1254	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1256	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.1259					BPMakeBothFloat:
.1259	e8		inx				inx
.125a	20 5e 12	jsr $125e			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.125d	ca		dex				dex
.125e					BPMakeFloat:
.125e	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1260	4a		lsr a				lsr 	a
.1261	b0 07		bcs $126a			bcs 	_BPIsFloat
.1263	8a		txa				txa
.1264	a2 18		ldx #$18		ldx	#24
.1266	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.1269	aa		tax				tax
.126a					_BPIsFloat:
.126a	60		rts				rts
.126b					AddHandler:
.126b	20 31 14	jsr $1431			jsr 	DereferenceTwo 				; dereference top two on stack.
.126e	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1270	35 41		and $41,x			and 	esType+1,x
.1272	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1274	d0 10		bne $1286			bne 	_AHStringConcat				; concatenate strings.
.1276	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.1279	b0 03		bcs $127e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.127b	4c a1 18	jmp $18a1			jmp 	MInt32Add 							; else do it as integer.
.127e					_IsFPOperation:
.127e	8a		txa				txa 								; call the relevant fp routine
.127f	a2 02		ldx #$02		ldx	#2
.1281	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.1284	aa		tax				tax
.1285	60		rts				rts
.1286					_AHStringConcat:
.1286	8a		txa				txa
.1287	a2 00		ldx #$00		ldx	#0
.1289	20 5b 1a	jsr $1a5b		jsr	stringHandler
.128c	aa		tax				tax
.128d	60		rts				rts
.128e					SubHandler:
.128e	20 31 14	jsr $1431			jsr 	DereferenceTwo
.1291	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.1294	b0 03		bcs $1299			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1296	4c bb 18	jmp $18bb			jmp 	MInt32Sub 							; else do it as integer.
.1299					_IsFPOperation:
.1299	8a		txa				txa 								; call the relevant fp routine
.129a	a2 10		ldx #$10		ldx	#16
.129c	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.129f	aa		tax				tax
.12a0	60		rts				rts
.12a1					MulHandler:
.12a1	20 31 14	jsr $1431			jsr 	DereferenceTwo
.12a4	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.12a7	b0 03		bcs $12ac			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12a9	4c d5 18	jmp $18d5			jmp 	MInt32Multiply 							; else do it as integer.
.12ac					_IsFPOperation:
.12ac	8a		txa				txa 								; call the relevant fp routine
.12ad	a2 0a		ldx #$0a		ldx	#10
.12af	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.12b2	aa		tax				tax
.12b3	60		rts				rts
.12b4					DivHandler:
.12b4	20 31 14	jsr $1431			jsr 	DereferenceTwo
.12b7	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.12ba	b0 03		bcs $12bf			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12bc	4c af 17	jmp $17af			jmp 	MInt32SDivide 							; else do it as integer.
.12bf					_IsFPOperation:
.12bf	8a		txa				txa 								; call the relevant fp routine
.12c0	a2 06		ldx #$06		ldx	#6
.12c2	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.12c5	aa		tax				tax
.12c6	60		rts				rts
.12c7					ModHandler:
.12c7	20 31 14	jsr $1431			jsr 	DereferenceTwo
.12ca	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.12cd	b0 03		bcs $12d2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12cf	4c 2d 18	jmp $182d			jmp 	MInt32Modulus 							; else do it as integer.
.12d2					_IsFPOperation:
.12d2	8a		txa				txa 								; call the relevant fp routine
.12d3	a2 08		ldx #$08		ldx	#8
.12d5	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.12d8	aa		tax				tax
.12d9	60		rts				rts
.12da					XorHandler:
.12da	20 31 14	jsr $1431			jsr 	DereferenceTwo
.12dd	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.12e0	b0 03		bcs $12e5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12e2	4c 61 17	jmp $1761			jmp 	MInt32Xor 							; else do it as integer.
.12e5					_IsFPOperation:
.12e5	8a		txa				txa 								; call the relevant fp routine
.12e6	a2 08		ldx #$08		ldx	#8
.12e8	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.12eb	aa		tax				tax
.12ec	60		rts				rts
.12ed					OrHandler:
.12ed	20 31 14	jsr $1431			jsr 	DereferenceTwo
.12f0	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.12f3	b0 03		bcs $12f8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12f5	4c 48 17	jmp $1748			jmp 	MInt32Or 							; else do it as integer.
.12f8					_IsFPOperation:
.12f8	8a		txa				txa 								; call the relevant fp routine
.12f9	a2 08		ldx #$08		ldx	#8
.12fb	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.12fe	aa		tax				tax
.12ff	60		rts				rts
.1300					AndHandler:
.1300	20 31 14	jsr $1431			jsr 	DereferenceTwo
.1303	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.1306	b0 03		bcs $130b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1308	4c 2f 17	jmp $172f			jmp 	MInt32And 							; else do it as integer.
.130b					_IsFPOperation:
.130b	8a		txa				txa 								; call the relevant fp routine
.130c	a2 08		ldx #$08		ldx	#8
.130e	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.1311	aa		tax				tax
.1312	60		rts				rts
.1313					ShlHandler:
.1313	20 31 14	jsr $1431			jsr 	DereferenceTwo
.1316	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.1319	b0 03		bcs $131e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.131b	4c 94 13	jmp $1394			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.131e					_IsFPOperation:
.131e	8a		txa				txa 								; call the relevant fp routine
.131f	a2 08		ldx #$08		ldx	#8
.1321	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.1324	aa		tax				tax
.1325	60		rts				rts
.1326					ShrHandler:
.1326	20 31 14	jsr $1431			jsr 	DereferenceTwo
.1329	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.132c	b0 03		bcs $1331			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.132e	4c 97 13	jmp $1397			jmp 	MInt32ShiftRightX 							; else do it as integer.
.1331					_IsFPOperation:
.1331	8a		txa				txa 								; call the relevant fp routine
.1332	a2 08		ldx #$08		ldx	#8
.1334	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.1337	aa		tax				tax
.1338	60		rts				rts
.1339					WordRefHandler:
.1339	20 31 14	jsr $1431			jsr 	DereferenceTwo
.133c	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.133f	b0 03		bcs $1344			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1341	4c 86 13	jmp $1386			jmp 	MInt32WordIndirect 							; else do it as integer.
.1344					_IsFPOperation:
.1344	8a		txa				txa 								; call the relevant fp routine
.1345	a2 08		ldx #$08		ldx	#8
.1347	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.134a	aa		tax				tax
.134b	60		rts				rts
.134c					ByteRefHandler:
.134c	20 31 14	jsr $1431			jsr 	DereferenceTwo
.134f	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.1352	b0 03		bcs $1357			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1354	4c 8a 13	jmp $138a			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1357					_IsFPOperation:
.1357	8a		txa				txa 								; call the relevant fp routine
.1358	a2 08		ldx #$08		ldx	#8
.135a	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.135d	aa		tax				tax
.135e	60		rts				rts
.135f					PowerHandler:
.135f	20 31 14	jsr $1431			jsr 	DereferenceTwo
.1362	20 3f 12	jsr $123f			jsr 	BinaryProcess 				; check to see if either is float
.1365	b0 03		bcs $136a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1367	4c 72 13	jmp $1372			jmp 	PowerInteger 							; else do it as integer.
.136a					_IsFPOperation:
.136a	8a		txa				txa 								; call the relevant fp routine
.136b	a2 14		ldx #$14		ldx	#20
.136d	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.1370	aa		tax				tax
.1371	60		rts				rts
.1372					PowerInteger:
.1372	20 59 12	jsr $1259			jsr 	BPMakeBothFloat				; make them float.
.1375	8a		txa				txa
.1376	a2 14		ldx #$14		ldx	#20
.1378	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.137b	a2 12		ldx #$12		ldx	#18
.137d	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.1380	aa		tax				tax
.1381	a9 00		lda #$00			lda 	#0 							; make type integer
.1383	95 40		sta $40,x			sta 	esType,x
.1385	60		rts				rts
.1386					Mint32WordIndirect:
.1386	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1388	d0 02		bne $138c			bne 	Min32Indirect
.138a					Mint32ByteIndirect:
.138a	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.138c					Min32Indirect:
.138c	48		pha				pha 								; save the indirection
.138d	20 a1 18	jsr $18a1			jsr 	MInt32Add 					; add a!b a?b
.1390	68		pla				pla 								; and set the type to reference.
.1391	95 40		sta $40,x			sta 	esType,x
.1393	60		rts				rts
.1394					Mint32ShiftLeftX:
.1394	18		clc				clc
.1395	90 01		bcc $1398			bcc 	Mint32Shift
.1397					Mint32ShiftRightX:
.1397	38		sec				sec
.1398					Mint32Shift:
.1398	08		php				php 								; save carry flag on stack.
.1399	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.139b	15 59		ora $59,x			ora 	esInt2+1,x
.139d	15 61		ora $61,x			ora 	esInt3+1,x
.139f	d0 1e		bne $13bf			bne 	_MShiftZero
.13a1	b5 49		lda $49,x			lda 	esInt0+1,x
.13a3	c9 20		cmp #$20			cmp 	#32
.13a5	b0 18		bcs $13bf			bcs 	_MShiftZero
.13a7					_MShiftLoop:
.13a7	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.13a9	f0 12		beq $13bd			beq 	_MShiftExit
.13ab	d6 49		dec $49,x			dec 	esInt0+1,x
.13ad	28		plp				plp 								; restore and save carry
.13ae	08		php				php
.13af	90 06		bcc $13b7			bcc 	_MShiftLeft
.13b1	20 cd 19	jsr $19cd			jsr 	Mint32ShiftRight
.13b4	4c a7 13	jmp $13a7			jmp 	_MShiftLoop
.13b7					_MShiftLeft:
.13b7	20 c4 19	jsr $19c4			jsr 	Mint32ShiftLeft
.13ba	4c a7 13	jmp $13a7			jmp 	_MShiftLoop
.13bd					_MShiftExit:
.13bd	28		plp				plp	 								; throw saved carry and exit
.13be	60		rts				rts
.13bf					_MShiftZero:
.13bf	4c af 19	jmp $19af			jmp 	MInt32False 				; return 0.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/compare.asm

.13c2					PerformComparison:
.13c2	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.13c4	35 41		and $41,x			and 	esType+1,x
.13c6	0a		asl a				asl 	a
.13c7	30 19		bmi $13e2			bmi 	_PCIsString
.13c9	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.13cb	15 41		ora $41,x			ora 	esType+1,x
.13cd	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.13ce	30 1a		bmi $13ea			bmi 	_PCError
.13d0	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.13d2	f0 0b		beq $13df			beq 	_PCIsInteger 				; if not two integers
.13d4	20 59 12	jsr $1259			jsr 	BPMakeBothFloat 			; make both float
.13d7	8a		txa				txa
.13d8	a2 04		ldx #$04		ldx	#4
.13da	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.13dd	aa		tax				tax
.13de	60		rts				rts
.13df					_PCIsInteger:
.13df	4c 7a 17	jmp $177a			jmp 	MInt32Compare
.13e2					_PCIsString:
.13e2	8a		txa				txa
.13e3	a2 02		ldx #$02		ldx	#2
.13e5	20 5b 1a	jsr $1a5b		jsr	stringHandler
.13e8	aa		tax				tax
.13e9	60		rts				rts
.13ea					_PCError:
.13ea	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.13ec	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.13ef					CompareEquals:
.13ef	20 c2 13	jsr $13c2			jsr 	PerformComparison
.13f2	c9 00		cmp #$00			cmp 	#$00
.13f4	f0 35		beq $142b			beq  	CompareTrue
.13f6	4c 2e 14	jmp $142e			jmp 	CompareFalse
.13f9					CompareLess:
.13f9	20 c2 13	jsr $13c2			jsr 	PerformComparison
.13fc	c9 ff		cmp #$ff			cmp 	#$FF
.13fe	f0 2b		beq $142b			beq  	CompareTrue
.1400	4c 2e 14	jmp $142e			jmp 	CompareFalse
.1403					CompareGreater:
.1403	20 c2 13	jsr $13c2			jsr 	PerformComparison
.1406	c9 01		cmp #$01			cmp 	#$01
.1408	f0 21		beq $142b			beq  	CompareTrue
.140a	4c 2e 14	jmp $142e			jmp 	CompareFalse
.140d					CompareNotEquals:
.140d	20 c2 13	jsr $13c2			jsr 	PerformComparison
.1410	c9 00		cmp #$00			cmp 	#$00
.1412	d0 17		bne $142b			bne  	CompareTrue
.1414	4c 2e 14	jmp $142e			jmp 	CompareFalse
.1417					CompareGreaterEq:
.1417	20 c2 13	jsr $13c2			jsr 	PerformComparison
.141a	c9 ff		cmp #$ff			cmp 	#$FF
.141c	d0 0d		bne $142b			bne  	CompareTrue
.141e	4c 2e 14	jmp $142e			jmp 	CompareFalse
.1421					CompareLessEq:
.1421	20 c2 13	jsr $13c2			jsr 	PerformComparison
.1424	c9 01		cmp #$01			cmp 	#$01
.1426	d0 03		bne $142b			bne  	CompareTrue
.1428	4c 2e 14	jmp $142e			jmp 	CompareFalse
.142b					CompareTrue:
.142b	4c ab 19	jmp $19ab			jmp 	MInt32True
.142e					CompareFalse:
.142e	4c af 19	jmp $19af			jmp 	MInt32False

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/dereference.asm

.1431					DereferenceTwo:
.1431	e8		inx				inx
.1432	20 36 14	jsr $1436			jsr 	DereferenceOne
.1435	ca		dex				dex
.1436					DereferenceOne:
.1436	b5 40		lda $40,x			lda 	esType,x
.1438	10 3d		bpl $1477			bpl 	_DRNotReference 			; is it a reference ?
.143a	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.143b	b0 3b		bcs $1478			bcs 	_DRFloatDeReference
.143d	98		tya				tya
.143e	48		pha				pha
.143f	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1441	85 04		sta $04				sta 	temp0
.1443	b5 50		lda $50,x			lda 	esInt1,x
.1445	85 05		sta $05				sta 	temp0+1
.1447	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1449	95 50		sta $50,x			sta 	esInt1,x
.144b	95 58		sta $58,x			sta 	esInt2,x
.144d	95 60		sta $60,x			sta 	esInt3,x
.144f	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1451	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1453	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1454	30 0d		bmi $1463			bmi 	_DeRefString 				; string, 2 bytes only
.1456	d0 11		bne $1469			bne 	_DeRefByte 					; byte 1 byte only
.1458					_DeRefLong:
.1458	a0 03		ldy #$03			ldy 	#3
.145a	b1 04		lda ($04),y			lda 	(temp0),y
.145c	95 60		sta $60,x			sta 	esInt3,x
.145e	88		dey				dey
.145f	b1 04		lda ($04),y			lda 	(temp0),y
.1461	95 58		sta $58,x			sta 	esInt2,x
.1463					_DeRefString:
.1463	a0 01		ldy #$01			ldy 	#1
.1465	b1 04		lda ($04),y			lda 	(temp0),y
.1467	95 50		sta $50,x			sta 	esInt1,x
.1469					_DeRefByte:
.1469	a0 00		ldy #$00			ldy 	#0
.146b	b1 04		lda ($04),y			lda 	(temp0),y
.146d	95 48		sta $48,x			sta 	esInt0,x
.146f	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1471	29 40		and #$40			and 	#$40
.1473	95 40		sta $40,x			sta 	esType,x
.1475	68		pla				pla
.1476	a8		tay				tay
.1477					_DRNotReference
.1477	60		rts				rts
.1478					_DRFloatDereference:
.1478	8a		txa				txa
.1479							floatingpoint_deref
.1479	aa		tax				tax
.147a	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.147c	95 40		sta $40,x			sta 	esType,x
.147e	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/evaluate.asm

.147f					EvaluateLevel:
.147f	48		pha				pha 								; save precedence level.
.1480	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1482	95 48		sta $48,x			sta 	esInt0,x
.1484	95 50		sta $50,x			sta 	esInt1,x
.1486	95 58		sta $58,x			sta 	esInt2,x
.1488	95 60		sta $60,x			sta 	esInt3,x
.148a	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.148c	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.148e	30 21		bmi $14b1			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1490	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1491	30 0a		bmi $149d			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1493	8a		txa				txa 								; stack level in X
.1494	a2 00		ldx #$00		ldx	#0
.1496	20 85 1a	jsr $1a85		jsr	variableHandler
.1499	aa		tax				tax
.149a	4c da 14	jmp $14da			jmp		_ELHasTerm
.149d					_ELIsConstant:
.149d	4a		lsr a				lsr 	a 							; get the value back
.149e	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.14a0	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.14a2					_ELCheckNext:
.14a2	c8		iny				iny 								; look at next
.14a3	b1 02		lda ($02),y			lda 	(codePtr),y
.14a5	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.14a7	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.14a9	b0 2f		bcs $14da			bcs 	_ELHasTerm 					; done getting the constant.
.14ab	20 d3 15	jsr $15d3			jsr 	ELShiftByteIn 				; shift byte into position.
.14ae	4c a2 14	jmp $14a2			jmp 	_ELCheckNext
.14b1					_ELIsToken:
.14b1	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.14b3	f0 0f		beq $14c4			beq 	_ELIsString
.14b5	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.14b7	d0 5f		bne $1518			bne 	_ELCheckUnary
.14b9	8a		txa				txa 								; put X into A
.14ba	c8		iny				iny 								; skip over the float marker
.14bb	a2 16		ldx #$16		ldx	#22
.14bd	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.14c0	aa		tax				tax 								; restore X
.14c1	4c da 14	jmp $14da			jmp 	_ELHasTerm
.14c4					_ELIsString:
.14c4	98		tya				tya 								; address of string is codePtr+y+1
.14c5	38		sec				sec
.14c6	65 02		adc $02				adc 	codePtr
.14c8	95 48		sta $48,x			sta 	esInt0,x
.14ca	a5 03		lda $03				lda 	codePtr+1
.14cc	69 00		adc #$00			adc 	#0
.14ce	95 50		sta $50,x			sta 	esInt1,x
.14d0	a9 40		lda #$40			lda 	#$40 						; set type to string value
.14d2	95 40		sta $40,x			sta 	esType,x
.14d4	c8		iny				iny 								; skip over string.
.14d5	98		tya				tya
.14d6	38		sec				sec									; +1 for the length itself.
.14d7	71 02		adc ($02),y			adc 	(codePtr),y
.14d9	a8		tay				tay 								; and fall through to term loop code.
.14da					_ELHasTerm:
.14da	b1 02		lda ($02),y			lda 	(codePtr),y
.14dc	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.14de	90 04		bcc $14e4			bcc 	_ELPopExit
.14e0	c9 9d		cmp #$9d			cmp 	#TOK_STRUCTST
.14e2	90 02		bcc $14e6			bcc 	_ELHasBinaryTerm
.14e4					_ELPopExit:
.14e4	68		pla				pla
.14e5					_ELExit:
.14e5	60		rts				rts
.14e6					_ELHasBinaryTerm:
.14e6	84 0a		sty $0a				sty 	tempShort 					; save position
.14e8	a8		tay				tay 								; use token as an index and get the precedence.
.14e9	b9 7b 15	lda $157b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.14ec	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.14ee	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.14f0	68		pla				pla 								; restore current level.
.14f1	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.14f3	b0 f0		bcs $14e5			bcs 	_ELExit
.14f5	48		pha				pha 								; save current level back on the stack.
.14f6	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.14f8	48		pha				pha
.14f9	c8		iny				iny
.14fa	e8		inx				inx 								; calculate the RHS at the operator precedence.
.14fb	a5 0a		lda $0a				lda 	tempShort
.14fd	20 7f 14	jsr $147f			jsr 	EvaluateLevel
.1500	ca		dex				dex
.1501	68		pla				pla 								; get the operator back out.
.1502					_ELExecuteA:
.1502	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1504	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1505	aa		tax				tax
.1506	bd 51 11	lda $1151,x			lda 	Group0Vectors,x
.1509	85 04		sta $04				sta 	temp0
.150b	bd 52 11	lda $1152,x			lda 	Group0Vectors+1,x
.150e	85 05		sta $05				sta 	temp0+1
.1510	a6 0a		ldx $0a				ldx 	tempShort
.1512	20 5b 15	jsr $155b			jsr 	_ELCallTemp0
.1515	4c da 14	jmp $14da			jmp 	_ELHasTerm 					; and loop back round.
.1518					_ELCheckUnary:
.1518	c8		iny				iny 								; skip over token.
.1519	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.151b	f0 15		beq $1532			beq 	_ELMinus
.151d	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.151f	f0 28		beq $1549			beq 	_ELIndirect
.1521	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1523	f0 24		beq $1549			beq 	_ELIndirect
.1525	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.1527	90 04		bcc $152d			bcc 	_ELUSyntax
.1529	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.152b	90 d5		bcc $1502			bcc 	_ELExecuteA 				; if so do that token.
.152d					_ELUSyntax:
.152d	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.152f	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.1532					_ELMinus:
.1532	20 70 15	jsr $1570			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1535	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1537	f0 0a		beq $1543			beq 	_ELMinusInteger
.1539	8a		txa				txa
.153a	a2 0c		ldx #$0c		ldx	#12
.153c	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.153f	aa		tax				tax
.1540	4c da 14	jmp $14da			jmp 	_ELHasTerm
.1543					_ELMinusInteger:
.1543	20 69 19	jsr $1969			jsr 	MInt32Negate 				; do int negate
.1546	4c da 14	jmp $14da			jmp 	_ELHasTerm
.1549					_ELIndirect:
.1549	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.154a	20 79 15	jsr $1579			jsr 	EvaluateIntegerTerm 		; integer address
.154d	68		pla				pla
.154e	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1550	f0 02		beq $1554			beq 	_ELHaveModifier
.1552	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1554					_ELHaveModifier:
.1554	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1556	95 40		sta $40,x			sta 	esType,x
.1558	4c da 14	jmp $14da			jmp 	_ELHasTerm
.155b					_ELCallTemp0:
.155b	6c 04 00	jmp ($0004)			jmp 	(temp0)
.155e					UnaryParenthesis:
.155e	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1560	20 7f 14	jsr $147f			jsr 	EvaluateLevel
.1563	20 22 1a	jsr $1a22			jsr 	CheckRightParen 			; check for )
.1566	60		rts				rts
.1567					EvaluateTerm:
.1567	a9 0f		lda #$0f			lda 	#15
.1569	20 7f 14	jsr $147f			jsr 	EvaluateLevel
.156c	20 36 14	jsr $1436			jsr 	DereferenceOne
.156f	60		rts				rts
.1570					EvaluateNumericTerm:
.1570	20 67 15	jsr $1567			jsr 	EvaluateTerm
.1573	b5 40		lda $40,x			lda 	esType,x
.1575	0a		asl a				asl 	a 							; see if it's a string.
.1576	30 09		bmi $1581			bmi 	ENTType
.1578	60		rts				rts
.1579					EvaluateIntegerTerm:
.1579	20 67 15	jsr $1567			jsr 	EvaluateTerm
.157c	b5 40		lda $40,x			lda 	esType,x
.157e	d0 01		bne $1581			bne 	ENTType
.1580	60		rts				rts
.1581					ENTType:
.1581	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1583	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.1586					EvaluateRoot:
.1586	a2 00		ldx #$00			ldx 	#0
.1588					Evaluate:
.1588	a9 00		lda #$00			lda 	#0
.158a	20 7f 14	jsr $147f			jsr 	EvaluateLevel
.158d	20 36 14	jsr $1436			jsr 	DereferenceOne
.1590	60		rts				rts
.1591					EvaluateNumeric:
.1591	20 88 15	jsr $1588			jsr 	Evaluate
.1594	b5 40		lda $40,x			lda 	esType,x
.1596	0a		asl a				asl 	a 							; see if it's a string.
.1597	30 e8		bmi $1581			bmi 	ENTType
.1599	4a		lsr a				lsr 	a 							; shift float flag into carry.
.159a	4a		lsr a				lsr 	a
.159b	60		rts				rts
.159c					EvaluateString:
.159c	20 88 15	jsr $1588			jsr 	Evaluate
.159f	b5 40		lda $40,x			lda 	esType,x
.15a1	0a		asl a				asl 	a 							; see if it's a string.
.15a2	10 dd		bpl $1581			bpl 	ENTType
.15a4	60		rts				rts
.15a5					EvaluateInteger:
.15a5	20 88 15	jsr $1588			jsr 	Evaluate
.15a8	b5 40		lda $40,x			lda 	esType,x
.15aa	d0 d5		bne $1581			bne 	ENTType
.15ac	60		rts				rts
.15ad					EvaluateSmallInteger:
.15ad	20 a5 15	jsr $15a5			jsr 	EvaluateInteger
.15b0	b5 41		lda $41,x			lda 	esType+1,x
.15b2	15 42		ora $42,x			ora 	esType+2,x
.15b4	15 43		ora $43,x			ora 	esType+3,x
.15b6	d0 03		bne $15bb			bne 	_ESIValue
.15b8	b5 40		lda $40,x			lda 	esType,x
.15ba	60		rts				rts
.15bb					_ESIValue:
.15bb	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.15bd	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.15c0					EvaluateReference:
.15c0	ad 12 16	lda $1612			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.15c3	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.15c4	e9 01		sbc #$01			sbc 	#1
.15c6	20 7f 14	jsr $147f			jsr 	EvaluateLevel
.15c9	b5 40		lda $40,x			lda 	esType,x
.15cb	10 01		bpl $15ce			bpl 	_ERFail
.15cd	60		rts				rts
.15ce					_ERFail:
.15ce	a2 0a		ldx #$0a			ldx 	#ErrorID_NoReference
.15d0	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.15d3					ELShiftByteIn:
.15d3	48		pha				pha 								; save bits to shift in.
.15d4	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.15d6	48		pha				pha
.15d7	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.15d9	95 60		sta $60,x			sta 	esInt3,x
.15db	b5 50		lda $50,x			lda 	esInt1,x
.15dd	95 58		sta $58,x			sta 	esInt2,x
.15df	b5 48		lda $48,x			lda 	esInt0,x
.15e1	95 50		sta $50,x			sta 	esInt1,x
.15e3	a9 00		lda #$00			lda 	#0
.15e5	95 48		sta $48,x			sta 	esInt0,x
.15e7	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.15e8	29 03		and #$03			and 	#3 							; only want lower 2 bits
.15ea	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.15ec					_ELShiftLoop:
.15ec	4a		lsr a				lsr 	a
.15ed	76 60		ror $60,x			ror 	esInt3,x
.15ef	76 58		ror $58,x			ror 	esInt2,x
.15f1	76 50		ror $50,x			ror 	esInt1,x
.15f3	76 48		ror $48,x			ror 	esInt0,x
.15f5	c9 01		cmp #$01			cmp 	#1
.15f7	d0 f3		bne $15ec			bne 	_ELShiftLoop
.15f9	68		pla				pla 								; get original 6 bit value and OR in.
.15fa	29 3f		and #$3f			and 	#$3F
.15fc	15 48		ora $48,x			ora 	esInt0,x
.15fe	95 48		sta $48,x			sta 	esInt0,x
.1600	60		rts				rts
.1601					ELBinaryOperatorInfo:

;******  Processing file: ../source/main/evaluate/../../generated/binarystructinfo.inc

>1601	01					.byte	$01			; $86 and
>1602	01					.byte	$01			; $87 or
>1603	01					.byte	$01			; $88 xor
>1604	02					.byte	$02			; $89 >=
>1605	02					.byte	$02			; $8a <=
>1606	02					.byte	$02			; $8b >
>1607	02					.byte	$02			; $8c <
>1608	02					.byte	$02			; $8d =
>1609	02					.byte	$02			; $8e <>
>160a	03					.byte	$03			; $8f +
>160b	03					.byte	$03			; $90 -
>160c	04					.byte	$04			; $91 >>
>160d	04					.byte	$04			; $92 <<
>160e	04					.byte	$04			; $93 *
>160f	04					.byte	$04			; $94 /
>1610	04					.byte	$04			; $95 mod
>1611	05					.byte	$05			; $96 ^
>1612	06					.byte	$06			; $97 !
>1613	06					.byte	$06			; $98 ?
>1614	82					.byte	$82			; $99 repeat
>1615	82					.byte	$82			; $9a while
>1616	82					.byte	$82			; $9b for
>1617	82					.byte	$82			; $9c if
>1618	80					.byte	$80			; $9d until
>1619	80					.byte	$80			; $9e wend
>161a	80					.byte	$80			; $9f next
>161b	80					.byte	$80			; $a0 then
>161c	80					.byte	$80			; $a1 endif

;******  Return to file: ../source/main/evaluate/evaluate.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unary.asm

.161d					UnaryLen:
.161d	20 2b 16	jsr $162b			jsr 	ULStart
.1620					ULFinish:
.1620	b1 04		lda ($04),y			lda 	(temp0),y
.1622	a4 0a		ldy $0a				ldy 	tempShort
.1624	20 be 19	jsr $19be			jsr 	MInt32Set8Bit
.1627	20 22 1a	jsr $1a22			jsr 	CheckRightParen
.162a	60		rts				rts
.162b	20 9c 15	jsr $159c	ULStart:jsr 	EvaluateString
.162e	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1630	85 04		sta $04				sta 	temp0
.1632	b5 50		lda $50,x			lda 	esInt1,x
.1634	85 05		sta $05				sta 	temp0+1
.1636	84 0a		sty $0a				sty 	tempShort 					; get length
.1638	a0 00		ldy #$00			ldy 	#0
.163a	60		rts				rts
.163b					UnaryAsc:
.163b	20 2b 16	jsr $162b			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.163e	b1 04		lda ($04),y			lda 	(temp0),y
.1640	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1641	c9 00		cmp #$00			cmp 	#0
.1643	d0 db		bne $1620			bne 	ULFinish
.1645	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1647	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.164a					UnaryAbs:
.164a	20 91 15	jsr $1591			jsr 	EvaluateNumeric
.164d	b0 07		bcs $1656			bcs 	_UAFloat
.164f	20 64 19	jsr $1964			jsr 	MInt32Absolute
.1652	20 22 1a	jsr $1a22			jsr 	CheckRightParen
.1655	60		rts				rts
.1656					_UAFloat:
.1656	8a		txa				txa
.1657	a2 00		ldx #$00		ldx	#0
.1659	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.165c	aa		tax				tax
.165d	20 22 1a	jsr $1a22			jsr 	CheckRightParen
.1660	60		rts				rts
.1661					UnarySgn:
.1661	20 91 15	jsr $1591			jsr 	EvaluateNumeric
.1664	b0 07		bcs $166d			bcs 	_USFloat
.1666	20 9c 19	jsr $199c			jsr 	MInt32Sign
.1669	20 22 1a	jsr $1a22			jsr 	CheckRightParen
.166c	60		rts				rts
.166d					_USFloat:
.166d	8a		txa				txa
.166e	a2 0e		ldx #$0e		ldx	#14
.1670	20 4c 1a	jsr $1a4c		jsr	floatingpointHandler
.1673	aa		tax				tax
.1674	20 22 1a	jsr $1a22			jsr 	CheckRightParen
.1677	60		rts				rts
.1678					UnaryPeek:
.1678	20 a4 16	jsr $16a4			jsr 	PDLCode
.167b	4c 98 16	jmp $1698			jmp 	PDLByte0
.167e					UnaryDeek:
.167e	20 a4 16	jsr $16a4			jsr 	PDLCode
.1681	4c 92 16	jmp $1692			jmp 	PDLByte1
.1684					UnaryLeek:
.1684	20 a4 16	jsr $16a4			jsr 	PDLCode
.1687	a0 03		ldy #$03			ldy 	#3
.1689	b1 04		lda ($04),y			lda 	(temp0),y
.168b	95 60		sta $60,x			sta 	esInt3,x
.168d	88		dey				dey
.168e	b1 04		lda ($04),y			lda 	(temp0),y
.1690	95 58		sta $58,x			sta 	esInt2,x
.1692					PDLByte1:
.1692	a0 01		ldy #$01			ldy 	#1
.1694	b1 04		lda ($04),y			lda 	(temp0),y
.1696	95 50		sta $50,x			sta 	esInt1,x
.1698					PDLByte0:
.1698	a0 00		ldy #$00			ldy 	#0
.169a	b1 04		lda ($04),y			lda 	(temp0),y
.169c	95 48		sta $48,x			sta 	esInt0,x
.169e	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16a0	20 22 1a	jsr $1a22			jsr 	CheckRightParen 			; check right and return
.16a3	60		rts				rts
.16a4					PDLCode:
.16a4	20 a5 15	jsr $15a5			jsr 	EvaluateInteger
.16a7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.16a9	85 04		sta $04				sta 	temp0
.16ab	b5 50		lda $50,x			lda 	esInt1,x
.16ad	85 05		sta $05				sta 	temp0+1
.16af	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.16b1	95 50		sta $50,x			sta 	esInt1,x
.16b3	95 58		sta $58,x			sta 	esInt2,x
.16b5	95 60		sta $60,x			sta 	esInt3,x
.16b7	84 0a		sty $0a				sty 	tempShort 					; save Y
.16b9	60		rts				rts
.16ba					Unary_Random:
.16ba	20 df 19	jsr $19df			jsr 	MInt32Random 				; generate random number.
.16bd	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.16bf	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.16c1	f0 08		beq $16cb			beq 	_URExit
.16c3	e8		inx				inx 								; load range 0..r-1 into +1
.16c4	20 a5 15	jsr $15a5			jsr 	EvaluateInteger
.16c7	ca		dex				dex
.16c8	20 2d 18	jsr $182d			jsr 	MInt32Modulus 				; calculate random % modulus
.16cb					_URExit:
.16cb	20 22 1a	jsr $1a22			jsr 	CheckRightParen 			; check right and return
.16ce	60		rts				rts
.16cf					Unary_Min:
.16cf	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.16d1	d0 02		bne $16d5			bne 	UnaryMBody
.16d3					Unary_Max:
.16d3	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.16d5					UnaryMBody:
.16d5	48		pha				pha 								; save comparator on stack.
.16d6	20 88 15	jsr $1588			jsr 	Evaluate 					; get the first thing to check
.16d9					_UnaryMLoop:
.16d9	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.16db	c8		iny				iny
.16dc	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.16de	f0 09		beq $16e9			beq 	_UnaryMExit
.16e0	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.16e2	f0 07		beq $16eb			beq 	_UnaryMCompare
.16e4	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.16e6	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.16e9					_UnaryMExit:
.16e9	68		pla				pla 								; throw comparator and return.
.16ea	60		rts				rts
.16eb					_UnaryMCompare:
.16eb	e8		inx				inx 								; get the 2nd thing to evaluate
.16ec	20 88 15	jsr $1588			jsr 	Evaluate
.16ef	ca		dex				dex
.16f0	20 c2 13	jsr $13c2			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.16f3	85 0a		sta $0a				sta 	tempShort 					; save result
.16f5	68		pla				pla 								; get what we need
.16f6	48		pha				pha
.16f7	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.16f9	d0 de		bne $16d9			bne 	_UnaryMLoop 				; no, try another value.
.16fb	20 af 19	jsr $19af			jsr 	MInt32False 				; promote 2nd to 1st.
.16fe	20 a1 18	jsr $18a1			jsr 	MInt32Add
.1701	4c d9 16	jmp $16d9			jmp 	_UnaryMLoop
.1704					Unary_Page:
.1704	20 af 19	jsr $19af			jsr 	MInt32False 				; zero
.1707	ad 68 08	lda $0868			lda 	basePage 					; copy base page address in.
.170a	95 48		sta $48,x			sta 	esInt0,x
.170c	ad 69 08	lda $0869			lda 	basePage+1
.170f	95 50		sta $50,x			sta 	esInt1,x
.1711	60		rts				rts
.1712					UnaryReference:
.1712	a9 0f		lda #$0f			lda 	#15
.1714	20 7f 14	jsr $147f			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1717	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1719	10 05		bpl $1720			bpl 	UType
.171b	a9 00		lda #$00			lda 	#0 							; make it an integer
.171d	95 40		sta $40,x			sta 	esType,x
.171f	60		rts				rts
.1720					UType:
.1720	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1722	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.1725					UnaryHexMarker:
.1725	4c 79 15	jmp $1579			jmp 	EvaluateIntegerTerm
.1728					UnaryComplement:
.1728	20 79 15	jsr $1579			jsr 	EvaluateIntegerTerm
.172b	20 83 19	jsr $1983			jsr 	MInt32Not
.172e	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32binary.asm

.172f					MInt32And:
.172f	b5 48		lda $48,x			lda 	esInt0,x
.1731	35 49		and $49,x			and 	esInt0+1,x
.1733	95 48		sta $48,x			sta 	esInt0,x
.1735	b5 50		lda $50,x			lda 	esInt1,x
.1737	35 51		and $51,x			and 	esInt1+1,x
.1739	95 50		sta $50,x			sta 	esInt1,x
.173b	b5 58		lda $58,x			lda 	esInt2,x
.173d	35 59		and $59,x			and 	esInt2+1,x
.173f	95 58		sta $58,x			sta 	esInt2,x
.1741	b5 60		lda $60,x			lda 	esInt3,x
.1743	35 61		and $61,x			and 	esInt3+1,x
.1745	95 60		sta $60,x			sta 	esInt3,x
.1747	60		rts				rts
.1748					MInt32Or:
.1748	b5 48		lda $48,x			lda 	esInt0,x
.174a	15 49		ora $49,x			ora 	esInt0+1,x
.174c	95 48		sta $48,x			sta 	esInt0,x
.174e	b5 50		lda $50,x			lda 	esInt1,x
.1750	15 51		ora $51,x			ora 	esInt1+1,x
.1752	95 50		sta $50,x			sta 	esInt1,x
.1754	b5 58		lda $58,x			lda 	esInt2,x
.1756	15 59		ora $59,x			ora 	esInt2+1,x
.1758	95 58		sta $58,x			sta 	esInt2,x
.175a	b5 60		lda $60,x			lda 	esInt3,x
.175c	15 61		ora $61,x			ora 	esInt3+1,x
.175e	95 60		sta $60,x			sta 	esInt3,x
.1760	60		rts				rts
.1761					MInt32Xor:
.1761	b5 48		lda $48,x			lda 	esInt0,x
.1763	55 49		eor $49,x			eor 	esInt0+1,x
.1765	95 48		sta $48,x			sta 	esInt0,x
.1767	b5 50		lda $50,x			lda 	esInt1,x
.1769	55 51		eor $51,x			eor 	esInt1+1,x
.176b	95 50		sta $50,x			sta 	esInt1,x
.176d	b5 58		lda $58,x			lda 	esInt2,x
.176f	55 59		eor $59,x			eor 	esInt2+1,x
.1771	95 58		sta $58,x			sta 	esInt2,x
.1773	b5 60		lda $60,x			lda 	esInt3,x
.1775	55 61		eor $61,x			eor 	esInt3+1,x
.1777	95 60		sta $60,x			sta 	esInt3,x
.1779	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32compare.asm

.177a					MInt32Compare:
.177a	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.177c	d5 49		cmp $49,x			cmp 	esInt0+1,x
.177e	d0 13		bne $1793			bne 	MInt32Compare2
.1780	b5 50		lda $50,x			lda 	esInt1,x
.1782	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1784	d0 0d		bne $1793			bne 	MInt32Compare2
.1786	b5 58		lda $58,x			lda 	esInt2,x
.1788	d5 59		cmp $59,x			cmp 	esInt2+1,x
.178a	d0 07		bne $1793			bne 	MInt32Compare2
.178c	b5 60		lda $60,x			lda 	esInt3,x
.178e	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1790	d0 01		bne $1793			bne 	MInt32Compare2
.1792	60		rts				rts
.1793					MInt32Compare2:
.1793	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1795	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1797	b5 50		lda $50,x			lda		esInt1,x
.1799	f5 51		sbc $51,x			sbc 	esInt1+1,x
.179b	b5 58		lda $58,x			lda		esInt2,x
.179d	f5 59		sbc $59,x			sbc 	esInt2+1,x
.179f	b5 60		lda $60,x			lda		esInt3,x
.17a1	f5 61		sbc $61,x			sbc 	esInt3+1,x
.17a3	50 02		bvc $17a7			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.17a5	49 80		eor #$80			eor 	#$80
.17a7					_I32LNoOverflow
.17a7	30 03		bmi $17ac			bmi 	MInt32CLess					; if -ve then return $FF
.17a9	a9 01		lda #$01			lda 	#$01						; else return $01
.17ab	60		rts				rts
.17ac					MInt32CLess:
.17ac	a9 ff		lda #$ff			lda 	#$FF
.17ae	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32divide.asm

.17af					MInt32SDivide:
.17af	98		tya				tya  								; save Y, which is the count of negations
.17b0	48		pha				pha
.17b1	a0 00		ldy #$00			ldy 	#0 							; zero count
.17b3	20 cb 17	jsr $17cb			jsr 	_MInt32SRemSign 			; unsign TOS
.17b6	e8		inx				inx 								; unsign TOS+1
.17b7	20 cb 17	jsr $17cb			jsr 	_MInt32SRemSign
.17ba	ca		dex				dex
.17bb	98		tya				tya 								; save sign count on stack
.17bc	48		pha				pha
.17bd	20 d4 17	jsr $17d4			jsr 	MInt32UDivide 				; unsigned division
.17c0	68		pla				pla 								; get sign count back
.17c1	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.17c3	f0 03		beq $17c8			beq 	_I32SNoNeg
.17c5	20 69 19	jsr $1969			jsr 	MInt32Negate
.17c8					_I32SNoNeg:
.17c8	68		pla				pla 								; restoe Y and exit
.17c9	a8		tay				tay
.17ca	60		rts				rts
.17cb					_MInt32SRemSign:
.17cb	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.17cd	10 04		bpl $17d3			bpl 	_MInt32SRSExit
.17cf	c8		iny				iny 								; increment the sign count
.17d0	20 69 19	jsr $1969			jsr 	MInt32Negate 				; negate the value.
.17d3					_MInt32SRSExit:
.17d3	60		rts				rts
.17d4					MInt32UDivide:
.17d4	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.17d6	15 51		ora $51,x			ora 	esInt1+1,x
.17d8	15 52		ora $52,x			ora 	esInt1+2,x
.17da	15 53		ora $53,x			ora 	esInt1+3,x
.17dc	f0 4a		beq $1828			beq 	_MInt32DZero
.17de	e8		inx				inx 								; clear A
.17df	e8		inx				inx
.17e0	20 af 19	jsr $19af			jsr 	MInt32False
.17e3	ca		dex				dex
.17e4	ca		dex				dex
.17e5	98		tya				tya 								; save Y on the stack
.17e6	48		pha				pha
.17e7	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.17e9					_MInt32UDLoop:
.17e9	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.17eb	36 50		rol $50,x			rol 	esInt1,x
.17ed	36 58		rol $58,x			rol 	esInt2,x
.17ef	36 60		rol $60,x			rol 	esInt3,x
.17f1	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.17f3	36 52		rol $52,x			rol 	esInt1+2,x
.17f5	36 5a		rol $5a,x			rol 	esInt2+2,x
.17f7	36 62		rol $62,x			rol 	esInt3+2,x
.17f9	38		sec				sec 								; calculate A-M saving result on the stack
.17fa	b5 4a		lda $4a,x			lda 	esInt0+2,x
.17fc	f5 49		sbc $49,x			sbc 	esInt0+1,x
.17fe	48		pha				pha
.17ff	b5 52		lda $52,x			lda 	esInt1+2,x
.1801	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1803	48		pha				pha
.1804	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1806	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1808	48		pha				pha
.1809	b5 62		lda $62,x			lda 	esInt3+2,x
.180b	f5 61		sbc $61,x			sbc 	esInt3+1,x
.180d	90 10		bcc $181f			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.180f	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1811	68		pla				pla
.1812	95 5a		sta $5a,x			sta 	esInt2+2,x
.1814	68		pla				pla
.1815	95 52		sta $52,x			sta 	esInt1+2,x
.1817	68		pla				pla
.1818	95 4a		sta $4a,x			sta 	esInt0+2,x
.181a	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.181c	4c 22 18	jmp $1822			jmp 	_MInt32Next 					; do the next iteration
.181f					_MInt32NoSubtract:
.181f	68		pla				pla
.1820	68		pla				pla
.1821	68		pla				pla
.1822					_MInt32Next:
.1822	88		dey				dey 								; do this 32 times.
.1823	d0 c4		bne $17e9			bne 	_MInt32UDLoop
.1825	68		pla				pla 								; restore Y and exit
.1826	a8		tay				tay
.1827	60		rts				rts
.1828					_MInt32DZero:
.1828	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.182a	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.182d					MInt32Modulus:
.182d	20 d4 17	jsr $17d4			jsr 	MInt32UDivide 				; do the division.
.1830	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1832	95 60		sta $60,x			sta 	esInt3,x
.1834	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1836	95 58		sta $58,x			sta 	esInt2,x
.1838	b5 52		lda $52,x			lda 	esInt1+2,x
.183a	95 50		sta $50,x			sta 	esInt1,x
.183c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.183e	95 48		sta $48,x			sta 	esInt0,x
.1840	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32fromstr.asm

.1841					MInt32FromString:
.1841	85 0a		sta $0a				sta 	tempShort 					; save base
.1843	98		tya				tya
.1844	48		pha				pha
.1845	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1847	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1849	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.184b	d0 01		bne $184e			bne 	_I32FSNotNegative
.184d	c8		iny				iny 								; if so consume it.
.184e					_I32FSNotNegative:
.184e	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1850	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1852	f0 02		beq $1856			beq 	_I32FSNN2
.1854	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1856					_I32FSNN2:
.1856	48		pha				pha 								; save base + final sign on stack.
.1857	20 af 19	jsr $19af			jsr 	MInt32False 					; zero the return value.
.185a					I32FSMainLoop:
.185a	68		pla				pla 								; get the base back into tempshort
.185b	48		pha				pha
.185c	29 7f		and #$7f			and 	#$7F
.185e	85 0a		sta $0a				sta 	tempShort
.1860	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1862	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1864	90 02		bcc $1868			bcc 	_I32FSNotLC
.1866	e9 20		sbc #$20			sbc 	#32
.1868					_I32FSNotLC:
.1868	38		sec				sec 								; subtract 48 (ASCII "0")
.1869	e9 30		sbc #$30			sbc 	#"0"
.186b	90 26		bcc $1893			bcc 	_I32FSDone 					; nothing more to do.
.186d	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.186f	90 06		bcc $1877			bcc 	_I32FSValidate
.1871	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1873	90 1e		bcc $1893			bcc 	_I32FSDone
.1875	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1877					_I32FSValidate:
.1877	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1879	b0 18		bcs $1893			bcs 	_I32FSDone 					; sorry, too large for this base.
.187b	48		pha				pha 								; save the new digit value.
.187c	e8		inx				inx 								; put base into next slot.
.187d	a5 0a		lda $0a				lda 	tempShort
.187f	20 be 19	jsr $19be			jsr 	MInt32Set8Bit
.1882	ca		dex				dex
.1883	20 d5 18	jsr $18d5			jsr 	MInt32Multiply 				; multiply current by the base
.1886	e8		inx				inx
.1887	68		pla				pla  								; put additive into next slot
.1888	20 be 19	jsr $19be			jsr 	MInt32Set8Bit
.188b	ca		dex				dex
.188c	20 a1 18	jsr $18a1			jsr 	MInt32Add 					; and add it
.188f	c8		iny				iny 								; look at next character
.1890	4c 5a 18	jmp $185a			jmp 	I32FSMainLoop 				; and go round again.
.1893					_I32FSDone:
.1893	68		pla				pla 								; get base/final sign back
.1894	10 04		bpl $189a			bpl 	_I32FSNN3
.1896	88		dey				dey 								; one fewer character to allow for the - prefix.
.1897	20 69 19	jsr $1969			jsr 	MInt32Negate 				; negate the result.
.189a					_I32FSNN3:
.189a	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.189c	68		pla				pla
.189d	a8		tay				tay
.189e	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.18a0	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32math.asm

.18a1					MInt32Add:
.18a1	18		clc				clc
.18a2	b5 48		lda $48,x			lda 	esInt0,x
.18a4	75 49		adc $49,x			adc 	esInt0+1,x
.18a6	95 48		sta $48,x			sta 	esInt0,x
.18a8	b5 50		lda $50,x			lda 	esInt1,x
.18aa	75 51		adc $51,x			adc 	esInt1+1,x
.18ac	95 50		sta $50,x			sta 	esInt1,x
.18ae	b5 58		lda $58,x			lda 	esInt2,x
.18b0	75 59		adc $59,x			adc 	esInt2+1,x
.18b2	95 58		sta $58,x			sta 	esInt2,x
.18b4	b5 60		lda $60,x			lda 	esInt3,x
.18b6	75 61		adc $61,x			adc 	esInt3+1,x
.18b8	95 60		sta $60,x			sta 	esInt3,x
.18ba	60		rts				rts
.18bb					MInt32Sub:
.18bb	38		sec				sec
.18bc	b5 48		lda $48,x			lda 	esInt0,x
.18be	f5 49		sbc $49,x			sbc 	esInt0+1,x
.18c0	95 48		sta $48,x			sta 	esInt0,x
.18c2	b5 50		lda $50,x			lda 	esInt1,x
.18c4	f5 51		sbc $51,x			sbc 	esInt1+1,x
.18c6	95 50		sta $50,x			sta 	esInt1,x
.18c8	b5 58		lda $58,x			lda 	esInt2,x
.18ca	f5 59		sbc $59,x			sbc 	esInt2+1,x
.18cc	95 58		sta $58,x			sta 	esInt2,x
.18ce	b5 60		lda $60,x			lda 	esInt3,x
.18d0	f5 61		sbc $61,x			sbc 	esInt3+1,x
.18d2	95 60		sta $60,x			sta 	esInt3,x
.18d4	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32multiply.asm

.18d5					MInt32Multiply:
.18d5	e8		inx				inx 								; copy 2nd -> 3rd
.18d6	20 fb 18	jsr $18fb			jsr 	MInt32CopyUp
.18d9	ca		dex				dex
.18da	20 fb 18	jsr $18fb			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.18dd	20 af 19	jsr $19af			jsr 	MInt32False 					; zero 1st.
.18e0					_I32Loop:
.18e0	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.18e2	29 01		and #$01			and 	#1
.18e4	f0 03		beq $18e9			beq 	_I32NoAdd 					; if set
.18e6	20 a1 18	jsr $18a1			jsr 	MInt32Add 					; add 2nd to 1st.
.18e9					_I32NoAdd:
.18e9	e8		inx				inx 								; shift 2nd left
.18ea	20 c4 19	jsr $19c4			jsr 	MInt32ShiftLeft
.18ed	e8		inx				inx  								; shift 3rd right
.18ee	20 cd 19	jsr $19cd			jsr 	MInt32ShiftRight
.18f1	20 d6 19	jsr $19d6			jsr 	MInt32Zero 					; check if zero.
.18f4	08		php				php 								; save status bits
.18f5	ca		dex				dex 	 							; point back to 1st
.18f6	ca		dex				dex
.18f7	28		plp				plp 								; get status bits
.18f8	d0 e6		bne $18e0			bne 	_I32Loop 					; if non-zero keep going.
.18fa	60		rts				rts
.18fb					MInt32CopyUp:
.18fb	b5 48		lda $48,x			lda 	esInt0,x
.18fd	95 49		sta $49,x			sta 	esInt0+1,x
.18ff	b5 50		lda $50,x			lda 	esInt1,x
.1901	95 51		sta $51,x			sta 	esInt1+1,x
.1903	b5 58		lda $58,x			lda 	esInt2,x
.1905	95 59		sta $59,x			sta 	esInt2+1,x
.1907	b5 60		lda $60,x			lda 	esInt3,x
.1909	95 61		sta $61,x			sta 	esInt3+1,x
.190b	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32tostr.asm

>0870					MCharCount:	.fill 	1						; count of converted characters
.190c					MInt32ToString:
.190c	48		pha				pha 								; save base
.190d	85 0a		sta $0a				sta 	tempShort 					; save target base.
.190f	a9 00		lda #$00			lda 	#0
.1911	8d 70 08	sta $0870			sta 	MCharCount 					; clear character count.
.1914	98		tya				tya
.1915	48		pha				pha
.1916	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1918	10 10		bpl $192a			bpl 	_I32TSUnsigned
.191a	48		pha				pha 								; save base on stack.
.191b	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.191d	10 08		bpl $1927			bpl 	_I32TSNoFlip
.191f	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1921	20 56 19	jsr $1956			jsr 	MI32WriteCharacter
.1924	20 69 19	jsr $1969			jsr 	MInt32Negate 				; negate the value.
.1927					_I32TSNoFlip:
.1927	68		pla				pla 								; get the base back
.1928	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.192a					_I32TSUnsigned:
.192a	20 31 19	jsr $1931			jsr 	MI32DivideWrite 				; recursive code to output string.
.192d	68		pla				pla
.192e	a8		tay				tay
.192f	68		pla				pla
.1930	60		rts				rts
.1931					MI32DivideWrite:
.1931	48		pha				pha 								; save the divisor/base
.1932	e8		inx				inx 								; write in the dividing position.
.1933	20 be 19	jsr $19be			jsr 	MInt32Set8Bit
.1936	ca		dex				dex
.1937	20 d4 17	jsr $17d4			jsr 	MInt32UDivide 				; divide number by base.
.193a	68		pla				pla 								; get the base into Y
.193b	a8		tay				tay
.193c	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.193e	48		pha				pha
.193f	20 d6 19	jsr $19d6			jsr 	MInt32Zero 					; is the result zero ?
.1942	f0 04		beq $1948			beq 	_I32NoRecurse 				; if so, don't recurse.
.1944	98		tya				tya 								; put base into A
.1945	20 31 19	jsr $1931			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1948					_I32NoRecurse:
.1948	68		pla				pla 								; get the remainder back
.1949	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.194b	90 02		bcc $194f			bcc 	_I32NotHex
.194d	69 06		adc #$06			adc 	#7-1
.194f					_I32NotHex:
.194f	18		clc				clc 								; make it ASCII
.1950	69 30		adc #$30			adc 	#48
.1952	20 56 19	jsr $1956			jsr 	MI32WriteCharacter 			; write the character out
.1955	60		rts				rts 								; and exit.
.1956					MI32WriteCharacter:
.1956	ac 70 08	ldy $0870			ldy 	MCharCount 					; get position
.1959	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.195b	c8		iny				iny
.195c	a9 00		lda #$00			lda 	#0
.195e	91 04		sta ($04),y			sta 	(temp0),y
.1960	ee 70 08	inc $0870			inc 	MCharCount 					; bump count
.1963	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32unary.asm

>0871					MSeed32:	.fill 	4							; random number seed.
.1964					MInt32Absolute:
.1964	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1966	30 01		bmi $1969			bmi 	MInt32Negate
.1968	60		rts				rts
.1969					MInt32Negate:
.1969	38		sec				sec
.196a	a9 00		lda #$00			lda 	#0
.196c	f5 48		sbc $48,x			sbc 	esInt0,x
.196e	95 48		sta $48,x			sta 	esInt0,x
.1970	a9 00		lda #$00			lda 	#0
.1972	f5 50		sbc $50,x			sbc 	esInt1,x
.1974	95 50		sta $50,x			sta 	esInt1,x
.1976	a9 00		lda #$00			lda 	#0
.1978	f5 58		sbc $58,x			sbc 	esInt2,x
.197a	95 58		sta $58,x			sta 	esInt2,x
.197c	a9 00		lda #$00			lda 	#0
.197e	f5 60		sbc $60,x			sbc 	esInt3,x
.1980	95 60		sta $60,x			sta 	esInt3,x
.1982	60		rts				rts
.1983					MInt32Not:
.1983	b5 48		lda $48,x			lda 	esInt0,x
.1985	49 ff		eor #$ff			eor 	#$FF
.1987	95 48		sta $48,x			sta 	esInt0,x
.1989	b5 50		lda $50,x			lda 	esInt1,x
.198b	49 ff		eor #$ff			eor 	#$FF
.198d	95 50		sta $50,x			sta 	esInt1,x
.198f	b5 58		lda $58,x			lda 	esInt2,x
.1991	49 ff		eor #$ff			eor 	#$FF
.1993	95 58		sta $58,x			sta 	esInt2,x
.1995	b5 60		lda $60,x			lda 	esInt3,x
.1997	49 ff		eor #$ff			eor 	#$FF
.1999	95 60		sta $60,x			sta 	esInt3,x
.199b	60		rts				rts
.199c					MInt32Sign:
.199c	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.199e	30 0b		bmi $19ab			bmi 	MInt32True 					; if set return -1 (true)
.19a0	20 d6 19	jsr $19d6			jsr 	MInt32Zero 					; is it zero ?
.19a3	f0 0a		beq $19af			beq 	MInt32False 					; if zero return 0 (false)
.19a5	20 af 19	jsr $19af			jsr 	MInt32False 					; > 0 return 1
.19a8	f6 48		inc $48,x			inc 	esInt0,x
.19aa	60		rts				rts
.19ab					MInt32True:
.19ab	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.19ad	d0 02		bne $19b1			bne 	MInt32WriteAll
.19af					MInt32False:
.19af	a9 00		lda #$00			lda 	#0
.19b1					MInt32WriteAll:
.19b1	95 48		sta $48,x			sta 	esInt0,x
.19b3					MInt32Write123:
.19b3	95 50		sta $50,x			sta 	esInt1,x
.19b5	95 58		sta $58,x			sta 	esInt2,x
.19b7	95 60		sta $60,x			sta 	esInt3,x
.19b9	a9 00		lda #$00			lda 	#$00						; and make it an integer
.19bb	95 40		sta $40,x			sta 	esType,x
.19bd	60		rts				rts
.19be					MInt32Set8Bit:
.19be	95 48		sta $48,x			sta 	esInt0,x
.19c0	a9 00		lda #$00			lda 	#0
.19c2	f0 ef		beq $19b3			beq		MInt32Write123
.19c4					MInt32ShiftLeft:
.19c4	16 48		asl $48,x			asl 	esInt0,x
.19c6	36 50		rol $50,x			rol	 	esInt1,x
.19c8	36 58		rol $58,x			rol	 	esInt2,x
.19ca	36 60		rol $60,x			rol	 	esInt3,x
.19cc	60		rts				rts
.19cd					MInt32ShiftRight:
.19cd	56 60		lsr $60,x			lsr 	esInt3,x
.19cf	76 58		ror $58,x			ror 	esInt2,x
.19d1	76 50		ror $50,x			ror 	esInt1,x
.19d3	76 48		ror $48,x			ror 	esInt0,x
.19d5	60		rts				rts
.19d6					MInt32Zero:
.19d6	b5 48		lda $48,x			lda 	esInt0,x
.19d8	15 50		ora $50,x			ora 	esInt1,x
.19da	15 58		ora $58,x			ora 	esInt2,x
.19dc	15 60		ora $60,x			ora 	esInt3,x
.19de	60		rts				rts
.19df					MInt32Random:
.19df	98		tya				tya
.19e0	48		pha				pha
.19e1	a0 07		ldy #$07			ldy 	#7
.19e3	ad 71 08	lda $0871			lda 	MSeed32+0
.19e6	d0 03		bne $19eb			bne 	_Random1
.19e8	a8		tay				tay
.19e9	a9 aa		lda #$aa			lda		#$AA
.19eb					_Random1:
.19eb	0a		asl a				asl 	a
.19ec	2e 72 08	rol $0872			rol 	MSeed32+1
.19ef	2e 73 08	rol $0873			rol 	MSeed32+2
.19f2	2e 74 08	rol $0874			rol 	MSeed32+3
.19f5	90 02		bcc $19f9			bcc 	_Random2
.19f7	49 c5		eor #$c5			eor 	#$C5
.19f9					_Random2:
.19f9	88		dey				dey
.19fa	d0 ef		bne $19eb			bne 	_Random1
.19fc	8d 71 08	sta $0871			sta 	MSeed32+0
.19ff	95 48		sta $48,x			sta 	esInt0,x
.1a01	ad 72 08	lda $0872			lda 	MSeed32+1
.1a04	95 50		sta $50,x			sta 	esInt1,x
.1a06	ad 73 08	lda $0873			lda 	MSeed32+2
.1a09	95 58		sta $58,x			sta 	esInt2,x
.1a0b	ad 74 08	lda $0874			lda 	MSeed32+3
.1a0e	95 60		sta $60,x			sta 	esInt3,x
.1a10	68		pla				pla
.1a11	a8		tay				tay
.1a12	a9 00		lda #$00			lda 	#0
.1a14	95 40		sta $40,x			sta 	esType,x
.1a16	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/check.asm

.1a17					CheckToken:
.1a17	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1a19	d0 02		bne $1a1d			bne 	_CTError
.1a1b	c8		iny				iny
.1a1c	60		rts				rts
.1a1d					_CTError:
.1a1d	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1a1f	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.1a22					CheckRightParen:
.1a22	b1 02		lda ($02),y			lda 	(codePtr),y
.1a24	c8		iny				iny
.1a25	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1a27	d0 01		bne $1a2a			bne 	_CRPError
.1a29	60		rts				rts
.1a2a					_CRPError:
.1a2a	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.1a2c	20 45 1a	jsr $1a45			jsr 	ErrorHandler
.1a2f					CheckComma:
.1a2f	b1 02		lda ($02),y			lda 	(codePtr),y
.1a31	c8		iny				iny
.1a32	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1a34	d0 01		bne $1a37			bne 	_CCError
.1a36	60		rts				rts
.1a37					_CCError:
.1a37	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.1a39	20 45 1a	jsr $1a45			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm

.1a3c					mainHandler:
.1a3c	7c 3f 1a	jmp ($1a3f,x)			jmp 	(mainVectors,x)
.1a3f					mainVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.asm

.1a3f					assemblerHandler:
.1a3f	7c 42 1a	jmp ($1a42,x)			jmp 	(assemblerVectors,x)
.1a42					assemblerVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.asm

.1a42					deviceHandler:
.1a42	7c 45 1a	jmp ($1a45,x)			jmp 	(deviceVectors,x)
.1a45					deviceVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.asm


;******  Processing file: ../source/error/errorhandler.asm

.1a45					ErrorHandler:
.1a45	a9 ee		lda #$ee			lda 	#$EE
.1a47	a8		tay				tay
>1a48	db						.byte 	$DB
.1a49	4c 49 1a	jmp $1a49	_EHHalt:jmp 	_EHHalt

;******  Return to file: ../source/error/error.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.asm

.1a4c					floatingpointHandler:
.1a4c	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.1a4e	20 45 1a	jsr $1a45			jsr 	ErrorHandler

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.asm

.1a51					interactionHandler:
.1a51	7c 54 1a	jmp ($1a54,x)			jmp 	(interactionVectors,x)
.1a54					interactionVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.asm


;******  Processing file: ../source/string/compare.asm

.1a54					STRCompare:
>1a54	db						.byte 	$DB
.1a55	4c 54 1a	jmp $1a54			jmp 	STRCompare

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/concat.asm

.1a58					StringConcat:
>1a58	db						.byte 	$DB
.1a59	80 fd		bra $1a58			bra 	StringConcat

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/memory.asm

.0078					softMemAlloc:
>0078							.fill 	2  							; if MSB is zero needs resetting on allocation.

;******  Return to file: ../source/string/string.asm

.1a5b					stringHandler:
.1a5b	7c 5e 1a	jmp ($1a5e,x)			jmp 	(stringVectors,x)
.1a5e					stringVectors:
>1a5e	58 1a					.word StringConcat         ; index 0
>1a60	54 1a					.word STRCompare           ; index 2

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.asm

.1a62					tokeniserHandler:
.1a62	7c 65 1a	jmp ($1a65,x)			jmp 	(tokeniserVectors,x)
.1a65					tokeniserVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/access.asm

.1a65					AccessVariable:
.1a65	aa		tax				tax 								; stack in X
.1a66	c8		iny				iny
.1a67	b1 02		lda ($02),y			lda 	(codePtr),y
.1a69	88		dey				dey
.1a6a	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1a6c	d0 15		bne $1a83			bne 	_AVLong
.1a6e	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1a70	38		sec				sec 	 							; make it 0-25
.1a71	e9 01		sbc #$01			sbc 	#1
.1a73	0a		asl a				asl 	a 							; x 4 is LSB of address
.1a74	0a		asl a				asl 	a
.1a75	95 48		sta $48,x			sta 	esInt0,x
.1a77	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.1a79	95 50		sta $50,x			sta 	esInt1,x
.1a7b	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1a7d	95 40		sta $40,x			sta 	esType,x
.1a7f	c8		iny				iny 								; skip over the variable reference in the code.
.1a80	c8		iny				iny
.1a81	8a		txa				txa 								; stack in A to return.
.1a82	60		rts				rts
.1a83					_AVLong:
.1a83	80 fe		bra $1a83			bra 	_AVLong

;******  Return to file: ../source/variable/variable.asm

.1a85					variableHandler:
.1a85	7c 88 1a	jmp ($1a88,x)			jmp 	(variableVectors,x)
.1a88					variableVectors:
>1a88	65 1a					.word AccessVariable       ; index 0

;******  Return to file: ../source/basic.asm


;******  End of listing
