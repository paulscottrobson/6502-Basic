
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ../source/basic.asm
; Mon Mar  1 09:26:01 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/basic.asm


;******  Processing file: ../source/main/01common.inc

=8					StackSize = 8
=512					retStackSize = 512
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/02macros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.
.0868					basePage:
>0868							.fill 	2
.086a					endMemory:
>086a							.fill 	2
.086c					highMemory:
>086c							.fill 	2
.086e					lowMemory:
>086e							.fill 	2
.0870					convertBuffer:
>0870							.fill 	35

;******  Processing file: ../source/main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ../source/main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/imath/intmacros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/errorhandler.inc


;******  Processing file: ../source/error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assertion failed
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma
=10					ErrorID_NoReference = 10 ; Missing reference
=11					ErrorID_LineNumber = 11 ; Line Number not found
=12					ErrorID_StrLen = 12 ; String too long.
=13					ErrorID_ReturnErr = 13 ; RETURN without GOSUB
=14					ErrorID_UntilErr = 14 ; UNTIL without REPEAT
=15					ErrorID_NextErr = 15 ; NEXT without FOR
=16					ErrorID_BadIndex = 16 ; Bad NEXT index

;******  Return to file: ../source/error/errorhandler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/memory.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.asm


;******  Processing file: ../source/main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d 68 08	sta $0868			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d 69 08	sta $0869			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d 6a 08	sta $086a			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d 6b 08	sta $086b			sta 	1+(endMemory)
.1017	4c 07 12	jmp $1207			jmp 	Command_Run
.1ec3					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ../source/main/../generated/testcode.inc

>5000	0b 0a 00 9b 01 3a 8d 41			.byte 11,10,0,155,1,58,141,65,198,74,128,11,11,0,155,2,58,141,65,198,67,128,10,12,0,213,1,58,195,2,58,128,11,13,0,159,1,58,194,159,1,58,128,8,14,0,153,194,157,169,128,0
>5008	c6 4a 80 0b 0b 00 9b 02 3a 8d 41 c6 43 80 0a 0c
>5018	00 d5 01 3a c3 02 3a 80 0b 0d 00 9f 01 3a c2 9f
>5028	01 3a 80 08 0e 00 99 c2 9d a9 80 00

;******  Return to file: ../source/main/00start.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/assert.asm

.101a					Command_Assert:
.101a	20 5c 17	jsr $175c			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 56 1c	jsr $1c56			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.1025	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad 6a 08	lda $086a			lda 	endMemory					; set high memory = end of memory
.102d	8d 6c 08	sta $086c			sta 	highMemory
.1030	ad 6b 08	lda $086b			lda 	endMemory+1
.1033	8d 6d 08	sta $086d			sta 	highMemory+1
.1036	ad 68 08	lda $0868			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad 69 08	lda $0869			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d 6e 08	sta $086e			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d 6f 08	sta $086f			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 67 10	jsr $1067			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	20 bc 1c	jsr $1cbc			jsr 	RSReset 					; reset the return stack.
.1064	68		pla				pla
.1065	a8		tay				tay
.1066	60		rts				rts
.1067					AdvanceLowMemoryByte:
.1067	18		clc				clc
.1068	6d 6e 08	adc $086e			adc 	lowMemory
.106b	8d 6e 08	sta $086e			sta 	lowMemory
.106e	90 03		bcc $1073			bcc 	_ALMBExit
.1070	ee 6f 08	inc $086f			inc 	lowMemory+1
.1073					_ALMBExit:
.1073	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/for.asm

.1ec3					Command_FOR:
.1ec3	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.1ec5	a2 0b		ldx #$0b			ldx 	#11
.1ec7	20 ca 1c	jsr $1cca			jsr 	RSClaim
.1eca	20 9f 10	jsr $109f			jsr 	CommandLET 					; do the same as LET.
.1ecd	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1ecf	c9 80		cmp #$80			cmp 	#$80
.1ed1	d0 4c		bne $1f1f			bne 	_CFType
.1ed3	a9 c6		lda #$c6			lda 	#TKW_TO 					; check TO present.
.1ed5	20 97 1c	jsr $1c97			jsr 	CheckToken
.1ed8	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1eda	20 5e 17	jsr $175e			jsr 	EvaluateInteger				; get terminal value in stack 1
.1edd	98		tya				tya
.1ede	48		pha				pha
.1edf	a0 04		ldy #$04			ldy 	#4
.1ee1	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.1ee3	91 78		sta ($78),y			sta 	(rsPointer),y
.1ee5	c8		iny				iny
.1ee6	a5 50		lda $50				lda		esInt1
.1ee8	91 78		sta ($78),y			sta 	(rsPointer),y
.1eea	c8		iny				iny
.1eeb	a9 01		lda #$01			lda 	#1  						; the default step in 6
.1eed	91 78		sta ($78),y			sta 	(rsPointer),y
.1eef	c8		iny				iny
.1ef0	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1ef2	91 78		sta ($78),y			sta 	(rsPointer),y
.1ef4	c8		iny				iny
.1ef5	a5 51		lda $51				lda		esInt1+1
.1ef7	91 78		sta ($78),y			sta 	(rsPointer),y
.1ef9	c8		iny				iny
.1efa	a5 59		lda $59				lda		esInt2+1
.1efc	91 78		sta ($78),y			sta 	(rsPointer),y
.1efe	c8		iny				iny
.1eff	a5 61		lda $61				lda		esInt3+1
.1f01	91 78		sta ($78),y			sta 	(rsPointer),y
.1f03	68		pla				pla
.1f04	a8		tay				tay
.1f05	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.1f07	c9 c7		cmp #$c7			cmp 	#TKW_STEP
.1f09	d0 0e		bne $1f19			bne 	_CFDone
.1f0b	c8		iny				iny									; skip over step.
.1f0c	20 5e 17	jsr $175e			jsr 	EvaluateInteger 			; get step
.1f0f	98		tya				tya
.1f10	48		pha				pha
.1f11	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1f13	a0 06		ldy #$06			ldy 	#6
.1f15	91 78		sta ($78),y			sta 	(rsPointer),y
.1f17	68		pla				pla
.1f18	a8		tay				tay
.1f19					_CFDone:
.1f19	a9 01		lda #$01			lda 	#1
.1f1b	20 ed 1c	jsr $1ced			jsr 	RSSavePosition 				; save position.
.1f1e	60		rts				rts
.1f1f					_CFType:
.1f1f	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1f21	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1f24					Command_NEXT:
.1f24	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1f26	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1f28	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1f2a	f0 05		beq $1f31			beq 	_isok
.1f2c	a2 0f		ldx #$0f			ldx 	#ErrorID_nextErr
.1f2e	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1f31					_isok:
.1f31	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.1f33	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1f35	b0 18		bcs $1f4f			bcs 	_CNNoIndex
.1f37	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1f39	20 8b 17	jsr $178b			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1f3c	98		tya				tya
.1f3d	48		pha				pha
.1f3e	a0 04		ldy #$04			ldy 	#4 							; check same variable
.1f40	b1 78		lda ($78),y			lda 	(rsPointer),y
.1f42	d5 48		cmp $48,x			cmp 	esInt0,x
.1f44	d0 76		bne $1fbc			bne 	_CNBadIndex
.1f46	c8		iny				iny
.1f47	b1 78		lda ($78),y			lda 	(rsPointer),y
.1f49	d5 50		cmp $50,x			cmp 	esInt1,x
.1f4b	d0 6f		bne $1fbc			bne 	_CNBadIndex
.1f4d	68		pla				pla
.1f4e	a8		tay				tay
.1f4f					_CNNoIndex:
.1f4f	98		tya				tya
.1f50	48		pha				pha
.1f51	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1f53	b1 78		lda ($78),y			lda 	(rsPointer),y
.1f55	85 04		sta $04				sta 	temp0
.1f57	c8		iny				iny
.1f58	b1 78		lda ($78),y			lda 	(rsPointer),y
.1f5a	85 05		sta $05				sta 	temp0+1
.1f5c	c8		iny				iny
.1f5d	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1f5f	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.1f61	85 09		sta $09				sta 	temp2+1 					; save for later.
.1f63	10 01		bpl $1f66			bpl 	_CNSignX
.1f65	ca		dex				dex  								; X = $FF
.1f66					_CNSignX:
.1f66	18		clc				clc 								; add to the LSB
.1f67	a0 00		ldy #$00			ldy 	#0
.1f69	71 04		adc ($04),y			adc 	(temp0),y
.1f6b	91 04		sta ($04),y			sta 	(temp0),y
.1f6d					_CNPropogate:
.1f6d	c8		iny				iny  								; add the sign extended in X to the rest.
.1f6e	8a		txa				txa
.1f6f	71 04		adc ($04),y			adc 	(temp0),y
.1f71	91 04		sta ($04),y			sta 	(temp0),y
.1f73	c8		iny				iny
.1f74	8a		txa				txa
.1f75	71 04		adc ($04),y			adc 	(temp0),y
.1f77	91 04		sta ($04),y			sta 	(temp0),y
.1f79	c8		iny				iny
.1f7a	8a		txa				txa
.1f7b	71 04		adc ($04),y			adc 	(temp0),y
.1f7d	91 04		sta ($04),y			sta 	(temp0),y
.1f7f	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1f80	a5 78		lda $78				lda 	rsPointer
.1f82	69 07		adc #$07			adc 	#7
.1f84	85 06		sta $06				sta 	temp1
.1f86	a9 00		lda #$00			lda 	#0
.1f88	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1f8a	a8		tay				tay 								; and clear the Y register again.
.1f8b	65 79		adc $79				adc 	rsPointer+1
.1f8d	85 07		sta $07				sta 	temp1+1
.1f8f	38		sec				sec 								; calculate current - limit oring interim values.
.1f90	20 c8 1f	jsr $1fc8			jsr 	_CNCompare
.1f93	20 c8 1f	jsr $1fc8			jsr 	_CNCompare
.1f96	20 c8 1f	jsr $1fc8			jsr 	_CNCompare
.1f99	20 c8 1f	jsr $1fc8			jsr 	_CNCompare
.1f9c	50 02		bvc $1fa0			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1f9e	49 80		eor #$80			eor 	#$80
.1fa0					_CNNoOverflow:
.1fa0	a4 09		ldy $09				ldy 	temp2+1						; get step back
.1fa2	30 1d		bmi $1fc1			bmi 	_CNCheckDownto
.1fa4	c9 00		cmp #$00			cmp 	#0
.1fa6	30 0c		bmi $1fb4			bmi 	_CNLoopRound 				; loop round if < =
.1fa8	a5 08		lda $08				lda 	temp2
.1faa	f0 08		beq $1fb4			beq 	_CNLoopRound
.1fac					_CNLoopExit:
.1fac	68		pla				pla
.1fad	a8		tay				tay
.1fae	a9 0b		lda #$0b			lda 	#11
.1fb0	20 e3 1c	jsr $1ce3			jsr 	RSFree
.1fb3	60		rts				rts
.1fb4					_CNLoopRound:
.1fb4	68		pla				pla
.1fb5	a8		tay				tay
.1fb6	a9 01		lda #$01			lda 	#1
.1fb8	20 00 1d	jsr $1d00			jsr 	RSLoadPosition				; go back to the loop top
.1fbb	60		rts				rts
.1fbc					_CNBadIndex:
.1fbc	a2 10		ldx #$10			ldx 	#ErrorID_BadIndex
.1fbe	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1fc1					_CNCheckDownto:
.1fc1	c9 00		cmp #$00			cmp 	#0
.1fc3	10 ef		bpl $1fb4			bpl 	_CNLoopRound
.1fc5	4c ac 1f	jmp $1fac			jmp 	_CNLoopExit
.1fc8					_CNCompare:
.1fc8	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1fca	f1 06		sbc ($06),y			sbc 	(temp1),y
.1fcc	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.1fce	85 08		sta $08				sta 	temp2
.1fd0	c8		iny				iny
.1fd1	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/if.asm

.1074					CommandIf:
.1074	20 5c 17	jsr $175c			jsr 	EvaluateRootInteger 		; if what ?
.1077	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1079	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.107b	f0 04		beq $1081			beq 	_IfSimple
.107d	c9 a0		cmp #$a0			cmp 	#TKW_THEN
.107f	d0 1b		bne $109c			bne 	_IfComplex
.1081					_IfSimple:
.1081	20 56 1c	jsr $1c56			jsr 	MInt32Zero					; check if TOS zero
.1084	f0 10		beq $1096			beq 	_IfEOL 						; go to next line.
.1086	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1088	c8		iny				iny
.1089	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108b	f0 0c		beq $1099			beq 	_IfGoto 					; do the Goto code
.108d	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.108f	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1091	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1093	f0 04		beq $1099			beq 	_IfGoto
.1095	60		rts				rts 								; else continue on this line.
.1096					_IfEOL:
.1096	4c 59 13	jmp $1359			jmp 	AdvanceNextLine 			; go to next line
.1099					_IfGoto:
.1099	4c 98 13	jmp $1398			jmp 	CommandGoto
.109c					_IfComplex:
.109c	4c 76 12	jmp $1276			jmp 	Unimplemented

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/let.asm

.109f					CommandLet:
.109f	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10a1	20 8b 17	jsr $178b			jsr 	EvaluateReference
.10a4	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10a6	20 97 1c	jsr $1c97			jsr 	CheckToken
.10a9	e8		inx				inx 								; do RHS
.10aa	20 3f 17	jsr $173f			jsr 	Evaluate 					; evaluate and derefernce
.10ad	ca		dex				dex
.10ae	20 b2 10	jsr $10b2			jsr 	WriteValue 					; write it out
.10b1	60		rts				rts
.10b2					WriteValue:
.10b2	98		tya				tya
.10b3	48		pha				pha
.10b4	20 0b 11	jsr $110b			jsr 	WVSetTemp0 					; set temp0 to point to target address.
.10b7	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10b9	55 41		eor $41,x			eor 	esType+1,x
.10bb	29 40		and #$40			and 	#$40
.10bd	d0 47		bne $1106			bne		_WVType
.10bf	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10c1	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10c3	29 40		and #$40			and 	#$40
.10c5	d0 30		bne $10f7			bne 	_WVCopyData2
.10c7	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10c9	15 41		ora $41,x			ora 	esType+1,x
.10cb	4a		lsr a				lsr 	a
.10cc	90 18		bcc $10e6			bcc 	_WVCopyData4
.10ce	b5 40		lda $40,x			lda 	esType,x
.10d0	4a		lsr a				lsr 	a
.10d1	90 33		bcc $1106			bcc 	_WVType
.10d3	e8		inx				inx 								; force the value being written to be a float.
.10d4	20 0a 14	jsr $140a			jsr 	BPMakeFloat
.10d7	ca		dex				dex
.10d8	20 0b 11	jsr $110b			jsr 	WVSetTemp0 					; set Temp0 to write address
.10db	e8		inx				inx
.10dc	8a		txa				txa
.10dd	a2 1e		ldx #$1e		ldx	#30
.10df	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.10e2	aa		tax				tax
.10e3	4c 03 11	jmp $1103			jmp 	_WVCopyExit
.10e6					_WVCopyData4:
.10e6	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.10e8	29 20		and #$20			and 	#$20
.10ea	d0 11		bne $10fd			bne 	_WVCopyData1
.10ec	a0 03		ldy #$03			ldy 	#3
.10ee	b5 61		lda $61,x			lda 	esInt3+1,x
.10f0	91 04		sta ($04),y			sta 	(temp0),y
.10f2	88		dey				dey
.10f3	b5 59		lda $59,x			lda 	esInt2+1,x
.10f5	91 04		sta ($04),y			sta 	(temp0),y
.10f7					_WVCopyData2:
.10f7	a0 01		ldy #$01			ldy 	#1
.10f9	b5 51		lda $51,x			lda 	esInt1+1,x
.10fb	91 04		sta ($04),y			sta 	(temp0),y
.10fd					_WVCopyData1:
.10fd	a0 00		ldy #$00			ldy 	#0
.10ff	b5 49		lda $49,x			lda 	esInt0+1,x
.1101	91 04		sta ($04),y			sta 	(temp0),y
.1103					_WVCopyExit:
.1103	68		pla				pla
.1104	a8		tay				tay
.1105	60		rts				rts
.1106					_WVType:
.1106	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1108	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.110b					WVSetTemp0:
.110b	b5 48		lda $48,x			lda 	esInt0,x
.110d	85 04		sta $04				sta 	temp0
.110f	b5 50		lda $50,x			lda 	esInt1,x
.1111	85 05		sta $05				sta 	temp0+1
.1113	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/new.asm

.1114					Command_New:
.1114	20 69 12	jsr $1269			jsr 	ResetCodeAddress 			; point to first line
.1117	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1119	98		tya				tya
.111a	91 02		sta ($02),y			sta 	(codePtr),y
.111c	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.111f	4c 56 13	jmp $1356			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/poke.asm

.1122					Command_Poke:
.1122	a9 01		lda #$01			lda 	#1
.1124	d0 06		bne $112c			bne 	PokeGeneral
.1126					Command_Doke:
.1126	a9 02		lda #$02			lda 	#2
.1128	d0 02		bne $112c			bne 	PokeGeneral
.112a					Command_Loke:
.112a	a9 03		lda #$03			lda 	#3
.112c					PokeGeneral:
.112c	48		pha				pha 								; save size
.112d	20 5c 17	jsr $175c			jsr 	EvaluateRootInteger 		; target address
.1130	20 af 1c	jsr $1caf			jsr	 	CheckComma
.1133	e8		inx				inx
.1134	20 5e 17	jsr $175e			jsr 	EvaluateInteger 			; what value to POKE ?
.1137	ca		dex				dex
.1138	20 0b 11	jsr $110b			jsr 	WVSetTemp0 					; temp0 points to the target address
.113b	84 0a		sty $0a				sty 	tempShort 					; save Y
.113d	68		pla				pla 								; get copy type and dispatch
.113e	aa		tax				tax
.113f	ca		dex				dex
.1140	f0 14		beq $1156			beq 	_Poke1
.1142	ca		dex				dex
.1143	f0 0b		beq $1150			beq 	_Poke2
.1145	a0 03		ldy #$03			ldy 	#3
.1147	a5 61		lda $61				lda 	esInt3+1
.1149	91 04		sta ($04),y			sta 	(temp0),y
.114b	88		dey				dey
.114c	a5 59		lda $59				lda 	esInt2+1
.114e	91 04		sta ($04),y			sta 	(temp0),y
.1150					_Poke2:
.1150	a0 01		ldy #$01			ldy 	#1
.1152	a5 51		lda $51				lda 	esInt1+1
.1154	91 04		sta ($04),y			sta 	(temp0),y
.1156					_Poke1:
.1156	a0 00		ldy #$00			ldy 	#0
.1158	a5 49		lda $49				lda 	esInt0+1
.115a	91 04		sta ($04),y			sta 	(temp0),y
.115c	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.115e	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/print.asm

.0893					lastPrintToken:
>0893							.fill 	1
.115f					Command_Print:
.115f	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1161	8d 93 08	sta $0893			sta 	lastPrintToken
.1164	88		dey				dey
.1165					_PrintLoopSkip:
.1165	c8		iny				iny
.1166					_PrintLoop:
.1166	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1168	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.116a	f0 5b		beq $11c7			beq 	_PrintExit
.116c	c9 c2		cmp #$c2			cmp 	#TKW_COLON
.116e	f0 57		beq $11c7			beq 	_PrintExit
.1170	8d 93 08	sta $0893			sta 	lastPrintToken 				; update LPT
.1173	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1175	f0 ee		beq $1165			beq 	_PrintLoopSkip
.1177	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.1179	f0 3c		beq $11b7			beq	 	_PrintNewLine
.117b	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; , is print tab
.117d	f0 40		beq $11bf			beq 	_PrintTab
.117f	20 3d 17	jsr $173d			jsr 	EvaluateRoot 				; evaluate something at the root
.1182	a9 70		lda #$70			lda 	#(convertBuffer) & $FF
.1184	85 04		sta $04				sta 	temp0
.1186	a9 08		lda #$08			lda 	#(convertBuffer) >> 8
.1188	85 05		sta $05				sta 	1+(temp0)
.118a	a5 40		lda $40				lda 	esType 						; get type
.118c	f0 15		beq $11a3			beq		_PrintInteger
.118e	4a		lsr a				lsr 	a 							; check for floating point
.118f	b0 08		bcs $1199			bcs 	_PrintFloat
.1191					_PrintString:
.1191	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.1193	20 0b 11	jsr $110b			jsr 	WVSetTemp0
.1196	4c b1 11	jmp $11b1			jmp 	_PrintTemp0 				; print no leading space.
.1199					_PrintFloat:
.1199	a9 00		lda #$00			lda 	#0 							; stack level.
.119b	a2 14		ldx #$14		ldx	#20
.119d	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.11a0	4c aa 11	jmp $11aa			jmp 	_PrintSpaceTemp0
.11a3					_PrintInteger:
.11a3	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11a5	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11a7	20 85 1b	jsr $1b85			jsr 	MInt32ToString				; convert to text
.11aa					_PrintSpaceTemp0:
.11aa	a9 20		lda #$20			lda 	#32
.11ac	a2 02		ldx #$02		ldx	#2
.11ae	20 33 1d	jsr $1d33		jsr	deviceHandler
.11b1					_PrintTemp0:
.11b1	20 d8 11	jsr $11d8			jsr 	PrintString
.11b4	4c 66 11	jmp $1166			jmp 	_PrintLoop
.11b7					_PrintNewLine:
.11b7	a2 00		ldx #$00		ldx	#0
.11b9	20 33 1d	jsr $1d33		jsr	deviceHandler
.11bc	4c 65 11	jmp $1165			jmp 	_PrintLoopSkip
.11bf					_PrintTab:
.11bf	a2 04		ldx #$04		ldx	#4
.11c1	20 33 1d	jsr $1d33		jsr	deviceHandler
.11c4	4c 65 11	jmp $1165			jmp 	_PrintLoopSkip
.11c7					_PrintExit:
.11c7	ad 93 08	lda $0893			lda		lastPrintToken 				; check last token
.11ca	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11cc	f0 09		beq $11d7			beq 	_PrintExit2
.11ce	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.11d0	f0 05		beq $11d7			beq 	_PrintExit2
.11d2	a2 00		ldx #$00		ldx	#0
.11d4	20 33 1d	jsr $1d33		jsr	deviceHandler
.11d7					_PrintExit2:
.11d7	60		rts				rts
.11d8					PrintString:
.11d8	8a		txa				txa
.11d9	48		pha				pha
.11da	98		tya				tya
.11db	48		pha				pha
.11dc	a0 00		ldy #$00			ldy 	#0							; get length
.11de	b1 04		lda ($04),y			lda 	(temp0),y
.11e0	aa		tax				tax 								; into X
.11e1	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.11e3	f0 10		beq $11f5			beq 	_PSExit
.11e5	ca		dex				dex
.11e6	8a		txa				txa
.11e7	48		pha				pha
.11e8	c8		iny				iny
.11e9	b1 04		lda ($04),y			lda 	(temp0),y
.11eb	a2 02		ldx #$02		ldx	#2
.11ed	20 33 1d	jsr $1d33		jsr	deviceHandler
.11f0	68		pla				pla
.11f1	aa		tax				tax
.11f2	4c e1 11	jmp $11e1			jmp 	_PSLoop
.11f5					_PSExit:
.11f5	68		pla				pla
.11f6	a8		tay				tay
.11f7	68		pla				pla
.11f8	aa		tax				tax
.11f9	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/rem.asm

.11fa					Command_Rem:
.11fa					Command_Rem2:
.11fa	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.11fc	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.11fe	d0 06		bne $1206			bne 	_CRNotString
.1200	c8		iny				iny
.1201	98		tya				tya
.1202	38		sec				sec
.1203	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1205	a8		tay				tay
.1206					_CRNotString:
.1206	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/repeat.asm

.1fd2					Command_Repeat:
.1fd2	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1fd4	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1fd6	20 ca 1c	jsr $1cca			jsr 	RSClaim
.1fd9	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1fdb	20 ed 1c	jsr $1ced			jsr 	RSSavePosition
.1fde	60		rts				rts
.1fdf					Command_Until:
.1fdf	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1fe1	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1fe3	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1fe5	f0 05		beq $1fec			beq 	_isok
.1fe7	a2 0e		ldx #$0e			ldx 	#ErrorID_untilErr
.1fe9	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1fec					_isok:
.1fec	20 5c 17	jsr $175c			jsr 	EvaluateRootInteger 		; at the bottom.
.1fef	20 56 1c	jsr $1c56			jsr 	MInt32Zero					; check if TOS zero
.1ff2	d0 06		bne $1ffa			bne 	_CUExit
.1ff4	a9 01		lda #$01			lda 	#1
.1ff6	20 00 1d	jsr $1d00			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1ff9	60		rts				rts
.1ffa					_CUExit:
.1ffa	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1ffc	20 e3 1c	jsr $1ce3			jsr 	RSFree
.1fff	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/run.asm

.1207					Command_Run:
.1207	a2 ff		ldx #$ff			ldx 	#$FF
.1209	9a		txs				txs
.120a	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.120d	20 69 12	jsr $1269			jsr 	ResetCodeAddress
.1210	a0 03		ldy #$03			ldy 	#3
.1212					CRNextInstruction:
.1212	64 7b		stz $7b				stz 	softMemAlloc+1
.1214	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1216	10 1c		bpl $1234			bpl 	_CRNotToken
.1218	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.121a	b0 0c		bcs $1228			bcs 	_CRExecute
.121c	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; unary is ignored.
.121e	b0 56		bcs $1276			bcs 	Unimplemented
.1220	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1222	b0 04		bcs $1228			bcs 	_CRExecute
.1224	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1226	b0 16		bcs $123e			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1228					_CRExecute:
.1228	c8		iny				iny 								; consume it.
.1229	0a		asl a				asl 	a 							; double it, losing most significant bit.
.122a	aa		tax				tax
.122b	20 31 12	jsr $1231			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.122e	4c 12 12	jmp $1212			jmp 	CRNextInstruction
.1231					_CRRunRoutine:
.1231	7c 7f 12	jmp ($127f,x)			jmp 	(Group0Vectors,x)
.1234					_CRNotToken:
.1234	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1236	b0 3e		bcs $1276			bcs 	Unimplemented
.1238					_CRDefaultLet:
.1238	20 9f 10	jsr $109f			jsr 	CommandLet 					; do the default, LET
.123b	4c 12 12	jmp $1212			jmp 	CRNextInstruction
.123e					_CRCheckIndirect:
.123e	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1240	f0 f6		beq $1238			beq 	_CRDefaultLet
.1242	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1244	f0 f2		beq $1238			beq 	_CRDefaultLet
.1246	d0 2e		bne $1276			bne 	Unimplemented
.1248					CommandShift1:
.1248	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.124a	10 2a		bpl $1276			bpl 	Unimplemented 				; we have an error as this should not happen.
.124c	0a		asl a				asl 	a 							; double into X
.124d	aa		tax				tax
.124e	c8		iny				iny 								; advance over it.
.124f	20 55 12	jsr $1255			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1252	4c 12 12	jmp $1212			jmp 	CRNextInstruction
.1255					_RunIt:
.1255	7c 33 13	jmp ($1333,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.1258					CommandShift2:
.1258	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.125a	10 1a		bpl $1276			bpl 	Unimplemented 				; we have an error as this should not happen.
.125c	0a		asl a				asl 	a 							; double into X
.125d	aa		tax				tax
.125e	c8		iny				iny 								; advance over it.
.125f	20 65 12	jsr $1265			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1262	4c 12 12	jmp $1212			jmp 	CRNextInstruction
.1265					_RunIt:
.1265	7c 43 13	jmp ($1343,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.1268					CommandColon:
.1268	60		rts				rts
.1269					ResetCodeAddress:
.1269	ad 68 08	lda $0868			lda 	basePage 					; copy basePage to code Pointer
.126c	85 02		sta $02				sta 	codePtr
.126e	ad 69 08	lda $0869			lda 	basePage+1
.1271	85 03		sta $03				sta 	codePtr+1
.1273	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1275	60		rts				rts
.1276					Unimplemented:
>1276	db						.byte 	$DB
.1277	4c 76 12	jmp $1276			jmp 	Unimplemented
.127a					TKErr01:
.127a					TKErr02:
.127a					TKErr03:
.127a					TKErr04:
.127a					TKErr05:
.127a					TKErr06:
.127a					TKErr07:
.127a					TKErr08:
.127a	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.127c	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler

;******  Processing file: ../source/main/commands/../../generated/tokenvectors0.inc

.127f					Group0Vectors:
>127f	59 13					.word	AdvanceNextLine          ; $80 [[eol]]
>1281	48 12					.word	CommandShift1            ; $81 [[sh1]]
>1283	58 12					.word	CommandShift2            ; $82 [[sh2]]
>1285	76 12					.word	Unimplemented            ; $83 [[sh3]]
>1287	76 12					.word	Unimplemented            ; $84 [[fpc]]
>1289	7a 12					.word	TKErr08                  ; $85 [[str]]
>128b	ac 14					.word	AndHandler               ; $86 and
>128d	99 14					.word	OrHandler                ; $87 or
>128f	86 14					.word	XorHandler               ; $88 xor
>1291	ce 15					.word	CompareGreaterEq         ; $89 >=
>1293	d8 15					.word	CompareLessEq            ; $8a <=
>1295	ba 15					.word	CompareGreater           ; $8b >
>1297	b0 15					.word	CompareLess              ; $8c <
>1299	a6 15					.word	CompareEquals            ; $8d =
>129b	c4 15					.word	CompareNotEquals         ; $8e <>
>129d	17 14					.word	AddHandler               ; $8f +
>129f	3a 14					.word	SubHandler               ; $90 -
>12a1	d2 14					.word	ShrHandler               ; $91 >>
>12a3	bf 14					.word	ShlHandler               ; $92 <<
>12a5	4d 14					.word	MulHandler               ; $93 *
>12a7	60 14					.word	DivHandler               ; $94 /
>12a9	73 14					.word	ModHandler               ; $95 mod
>12ab	0b 15					.word	PowerHandler             ; $96 ^
>12ad	e5 14					.word	WordRefHandler           ; $97 !
>12af	f8 14					.word	ByteRefHandler           ; $98 ?
>12b1	d2 1f					.word	Command_Repeat           ; $99 repeat
>12b3	76 12					.word	Unimplemented            ; $9a while
>12b5	c3 1e					.word	Command_FOR              ; $9b for
>12b7	74 10					.word	CommandIf                ; $9c if
>12b9	df 1f					.word	Command_Until            ; $9d until
>12bb	76 12					.word	Unimplemented            ; $9e wend
>12bd	24 1f					.word	Command_NEXT             ; $9f next
>12bf	7a 12					.word	TKErr06                  ; $a0 then
>12c1	76 12					.word	Unimplemented            ; $a1 endif
>12c3	15 17					.word	UnaryParenthesis         ; $a2 (
>12c5	e8 17					.word	UnaryLen                 ; $a3 len(
>12c7	2c 18					.word	UnarySgn                 ; $a4 sgn(
>12c9	15 18					.word	UnaryAbs                 ; $a5 abs(
>12cb	85 18					.word	Unary_Random             ; $a6 random(
>12cd	cf 18					.word	Unary_Page               ; $a7 page
>12cf	2b 1c					.word	MInt32True               ; $a8 true
>12d1	2f 1c					.word	MInt32False              ; $a9 false
>12d3	9a 18					.word	Unary_Min                ; $aa min(
>12d5	9e 18					.word	Unary_Max                ; $ab max(
>12d7	76 12					.word	Unimplemented            ; $ac sys(
>12d9	76 12					.word	Unimplemented            ; $ad timer(
>12db	76 12					.word	Unimplemented            ; $ae event(
>12dd	76 12					.word	Unimplemented            ; $af get(
>12df	76 12					.word	Unimplemented            ; $b0 inkey(
>12e1	76 12					.word	Unimplemented            ; $b1 alloc(
>12e3	1c 19					.word	ExecChr                  ; $b2 chr$(
>12e5	30 19					.word	ExecLeft                 ; $b3 left$(
>12e7	4d 19					.word	ExecMid                  ; $b4 mid$(
>12e9	75 19					.word	ExecRight                ; $b5 right$(
>12eb	76 12					.word	Unimplemented            ; $b6 str$(
>12ed	76 12					.word	Unimplemented            ; $b7 val(
>12ef	43 18					.word	UnaryPeek                ; $b8 peek(
>12f1	49 18					.word	UnaryDeek                ; $b9 deek(
>12f3	4f 18					.word	UnaryLeek                ; $ba leek(
>12f5	06 18					.word	UnaryAsc                 ; $bb asc(
>12f7	fa 18					.word	UnaryIntToFloat          ; $bc int(
>12f9	0d 19					.word	UnaryFloatToInt          ; $bd float(
>12fb	dd 18					.word	UnaryReference           ; $be @
>12fd	f3 18					.word	UnaryComplement          ; $bf ~
>12ff	f0 18					.word	UnaryHexMarker           ; $c0 &
>1301	7a 12					.word	TKErr01                  ; $c1 )
>1303	68 12					.word	CommandColon             ; $c2 :
>1305	7a 12					.word	TKErr02                  ; $c3 ,
>1307	7a 12					.word	TKErr03                  ; $c4 ;
>1309	76 12					.word	Unimplemented            ; $c5 ]
>130b	7a 12					.word	TKErr07                  ; $c6 to
>130d	7a 12					.word	TKErr05                  ; $c7 step
>130f	7a 12					.word	TKErr04                  ; $c8 proc
>1311	76 12					.word	Unimplemented            ; $c9 endproc
>1313	76 12					.word	Unimplemented            ; $ca local
>1315	fa 11					.word	Command_Rem              ; $cb rem
>1317	9f 10					.word	CommandLet               ; $cc let
>1319	fa 11					.word	Command_Rem2             ; $cd '
>131b	76 12					.word	Unimplemented            ; $ce [
>131d	76 12					.word	Unimplemented            ; $cf input
>131f	76 12					.word	Unimplemented            ; $d0 else
>1321	ca 13					.word	Command_VDU              ; $d1 vdu
>1323	76 12					.word	Unimplemented            ; $d2 read
>1325	76 12					.word	Unimplemented            ; $d3 data
>1327	76 12					.word	Unimplemented            ; $d4 restore
>1329	5f 11					.word	Command_Print            ; $d5 print
>132b	98 13					.word	CommandGOTO              ; $d6 goto
>132d	6d 13					.word	CommandGOSUB             ; $d7 gosub
>132f	80 13					.word	CommandRETURN            ; $d8 return
>1331	1a 10					.word	Command_Assert           ; $d9 assert
>1333	51 13					.word	CommandStop              ; $da stop
>1335	56 13					.word	CommandEnd               ; $db end
>1337	76 12					.word	Unimplemented            ; $dc dim
>1339	22 11					.word	Command_Poke             ; $dd poke
>133b	26 11					.word	Command_Doke             ; $de doke
>133d	2a 11					.word	Command_Loke             ; $df loke

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors1.inc

.133f					Group1Vectors:
>133f	28 10					.word	CommandClear             ; $86 clear
>1341	76 12					.word	Unimplemented            ; $87 load
>1343	76 12					.word	Unimplemented            ; $88 save
>1345	76 12					.word	Unimplemented            ; $89 list
>1347	14 11					.word	Command_New              ; $8a new
>1349	07 12					.word	Command_Run              ; $8b run
>134b	76 12					.word	Unimplemented            ; $8c code
>134d	76 12					.word	Unimplemented            ; $8d option

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors2.inc

.134f					Group2Vectors:
>134f	76 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: ../source/main/commands/run.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/stopend.asm

.1351					CommandStop:
.1351	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.1353	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1356					CommandEnd:
.1356	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1359					AdvanceNextLine:
.1359	a0 00		ldy #$00			ldy 	#0 							; get offset
.135b	b1 02		lda ($02),y			lda 	(codePtr),y
.135d	18		clc				clc 								; add to codePtr
.135e	65 02		adc $02				adc 	codePtr
.1360	85 02		sta $02				sta 	codePtr
.1362	90 02		bcc $1366			bcc 	_ANLNoCarry
.1364	e6 03		inc $03				inc 	codePtr+1
.1366					_ANLNoCarry:
.1366	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1368	f0 ec		beq $1356			beq 	CommandEnd 					; execute END
.136a	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.136c	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/transfer.asm

.136d					CommandGOSUB:
.136d	20 5c 17	jsr $175c			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1370	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1372	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1374	20 ca 1c	jsr $1cca			jsr 	RSClaim
.1377	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1379	20 ed 1c	jsr $1ced			jsr 	RSSavePosition
.137c	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.137e	f0 1b		beq $139b			beq 	GotoTOS 					; and do a GOTO there.
.1380					CommandRETURN:
.1380	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1382	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1384	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1386	f0 05		beq $138d			beq 	_isok
.1388	a2 0d		ldx #$0d			ldx 	#ErrorID_returnErr
.138a	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.138d					_isok:
.138d	a9 01		lda #$01			lda 	#1
.138f	20 00 1d	jsr $1d00			jsr 	RSLoadPosition 				; reload the position from offset 1.
.1392	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.1394	20 e3 1c	jsr $1ce3			jsr 	RSFree
.1397	60		rts				rts
.1398					CommandGOTO:
.1398	20 5c 17	jsr $175c			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.139b					GotoTOS:
.139b	20 69 12	jsr $1269			jsr 	ResetCodeAddress 			; simple search.
.139e					_GotoSearch:
.139e	a0 00		ldy #$00			ldy 	#0 							; get offset
.13a0	b1 02		lda ($02),y			lda 	(codePtr),y
.13a2	f0 21		beq $13c5			beq 	_GotoError 					; not found.
.13a4	c8		iny				iny									; check LSB match
.13a5	b1 02		lda ($02),y			lda 	(codePtr),y
.13a7	d5 48		cmp $48,x			cmp 	esInt0,x
.13a9	d0 07		bne $13b2			bne 	_GotoNext
.13ab	c8		iny				iny
.13ac	b1 02		lda ($02),y			lda 	(codePtr),y
.13ae	d5 50		cmp $50,x			cmp 	esInt1,x
.13b0	f0 10		beq $13c2			beq 	_GotoFound
.13b2					_GotoNext:
.13b2	a0 00		ldy #$00			ldy 	#0 							; go next line
.13b4	b1 02		lda ($02),y			lda 	(codePtr),y
.13b6	18		clc				clc
.13b7	65 02		adc $02				adc 	codePtr
.13b9	85 02		sta $02				sta 	codePtr
.13bb	90 e1		bcc $139e			bcc 	_GotoSearch
.13bd	e6 03		inc $03				inc 	codePtr+1
.13bf	4c 9e 13	jmp $139e			jmp 	_GotoSearch
.13c2					_GotoFound:
.13c2	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.13c4	60		rts				rts
.13c5					_GotoError:
.13c5	a2 0b		ldx #$0b			ldx 	#ErrorID_LineNumber
.13c7	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/vdu.asm

.13ca					Command_VDU:
.13ca	20 5c 17	jsr $175c			jsr 	EvaluateRootInteger 			; get integer at root.
.13cd	a5 48		lda $48				lda 	esInt0
.13cf	a2 02		ldx #$02		ldx	#2
.13d1	20 33 1d	jsr $1d33		jsr	deviceHandler
.13d4					_CVNext:
.13d4	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.13d6	c8		iny				iny
.13d7	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 						; comma, do again
.13d9	f0 ef		beq $13ca			beq 	Command_VDU
.13db	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.13dd	d0 0a		bne $13e9			bne 	_CVExit
.13df	a5 50		lda $50				lda 	esInt1
.13e1	a2 02		ldx #$02		ldx	#2
.13e3	20 33 1d	jsr $1d33		jsr	deviceHandler
.13e6	4c d4 13	jmp $13d4			jmp 	_CVNext
.13e9	88		dey		_CVExit:dey
.13ea	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/binary.asm

.13eb					BinaryProcess:
.13eb	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.13ed	15 41		ora $41,x			ora 	esType+1,x
.13ef	0a		asl a				asl 	a
.13f0	30 0e		bmi $1400			bmi 	_BPStringType 				; if one is set, then string type.
.13f2	18		clc				clc 								; return CC for integer
.13f3	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.13f5	f0 08		beq $13ff			beq 	_BPExit 					; if both integer then return with CC.
.13f7	20 05 14	jsr $1405			jsr 	BPMakeBothFloat 			; make both float
.13fa	a9 01		lda #$01			lda 	#$01 						; set result type to float
.13fc	95 40		sta $40,x			sta 	esType,x
.13fe	38		sec				sec 								; and return with carry set.
.13ff					_BPExit:
.13ff	60		rts				rts
.1400					_BPStringType:
.1400	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1402	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1405					BPMakeBothFloat:
.1405	e8		inx				inx
.1406	20 0a 14	jsr $140a			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1409	ca		dex				dex
.140a					BPMakeFloat:
.140a	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.140c	4a		lsr a				lsr 	a
.140d	b0 07		bcs $1416			bcs 	_BPIsFloat
.140f	8a		txa				txa
.1410	a2 1a		ldx #$1a		ldx	#26
.1412	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1415	aa		tax				tax
.1416					_BPIsFloat:
.1416	60		rts				rts
.1417					AddHandler:
.1417	20 e8 15	jsr $15e8			jsr 	DereferenceTwo 				; dereference top two on stack.
.141a	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.141c	35 41		and $41,x			and 	esType+1,x
.141e	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1420	d0 10		bne $1432			bne 	_AHStringConcat				; concatenate strings.
.1422	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.1425	b0 03		bcs $142a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1427	4c 1a 1b	jmp $1b1a			jmp 	MInt32Add 							; else do it as integer.
.142a					_IsFPOperation:
.142a	8a		txa				txa 								; call the relevant fp routine
.142b	a2 02		ldx #$02		ldx	#2
.142d	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1430	aa		tax				tax
.1431	60		rts				rts
.1432					_AHStringConcat:
.1432	8a		txa				txa
.1433	a2 02		ldx #$02		ldx	#2
.1435	20 90 1e	jsr $1e90		jsr	stringHandler
.1438	aa		tax				tax
.1439	60		rts				rts
.143a					SubHandler:
.143a	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.143d	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.1440	b0 03		bcs $1445			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1442	4c 34 1b	jmp $1b34			jmp 	MInt32Sub 							; else do it as integer.
.1445					_IsFPOperation:
.1445	8a		txa				txa 								; call the relevant fp routine
.1446	a2 10		ldx #$10		ldx	#16
.1448	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.144b	aa		tax				tax
.144c	60		rts				rts
.144d					MulHandler:
.144d	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.1450	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.1453	b0 03		bcs $1458			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1455	4c 4e 1b	jmp $1b4e			jmp 	MInt32Multiply 							; else do it as integer.
.1458					_IsFPOperation:
.1458	8a		txa				txa 								; call the relevant fp routine
.1459	a2 0a		ldx #$0a		ldx	#10
.145b	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.145e	aa		tax				tax
.145f	60		rts				rts
.1460					DivHandler:
.1460	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.1463	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.1466	b0 03		bcs $146b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1468	4c 28 1a	jmp $1a28			jmp 	MInt32SDivide 							; else do it as integer.
.146b					_IsFPOperation:
.146b	8a		txa				txa 								; call the relevant fp routine
.146c	a2 06		ldx #$06		ldx	#6
.146e	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1471	aa		tax				tax
.1472	60		rts				rts
.1473					ModHandler:
.1473	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.1476	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.1479	b0 03		bcs $147e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.147b	4c a6 1a	jmp $1aa6			jmp 	MInt32Modulus 							; else do it as integer.
.147e					_IsFPOperation:
.147e	8a		txa				txa 								; call the relevant fp routine
.147f	a2 08		ldx #$08		ldx	#8
.1481	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1484	aa		tax				tax
.1485	60		rts				rts
.1486					XorHandler:
.1486	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.1489	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.148c	b0 03		bcs $1491			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.148e	4c da 19	jmp $19da			jmp 	MInt32Xor 							; else do it as integer.
.1491					_IsFPOperation:
.1491	8a		txa				txa 								; call the relevant fp routine
.1492	a2 08		ldx #$08		ldx	#8
.1494	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1497	aa		tax				tax
.1498	60		rts				rts
.1499					OrHandler:
.1499	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.149c	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.149f	b0 03		bcs $14a4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14a1	4c c1 19	jmp $19c1			jmp 	MInt32Or 							; else do it as integer.
.14a4					_IsFPOperation:
.14a4	8a		txa				txa 								; call the relevant fp routine
.14a5	a2 08		ldx #$08		ldx	#8
.14a7	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.14aa	aa		tax				tax
.14ab	60		rts				rts
.14ac					AndHandler:
.14ac	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.14af	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.14b2	b0 03		bcs $14b7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14b4	4c a8 19	jmp $19a8			jmp 	MInt32And 							; else do it as integer.
.14b7					_IsFPOperation:
.14b7	8a		txa				txa 								; call the relevant fp routine
.14b8	a2 08		ldx #$08		ldx	#8
.14ba	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.14bd	aa		tax				tax
.14be	60		rts				rts
.14bf					ShlHandler:
.14bf	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.14c2	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.14c5	b0 03		bcs $14ca			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14c7	4c 40 15	jmp $1540			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.14ca					_IsFPOperation:
.14ca	8a		txa				txa 								; call the relevant fp routine
.14cb	a2 08		ldx #$08		ldx	#8
.14cd	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.14d0	aa		tax				tax
.14d1	60		rts				rts
.14d2					ShrHandler:
.14d2	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.14d5	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.14d8	b0 03		bcs $14dd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14da	4c 43 15	jmp $1543			jmp 	MInt32ShiftRightX 							; else do it as integer.
.14dd					_IsFPOperation:
.14dd	8a		txa				txa 								; call the relevant fp routine
.14de	a2 08		ldx #$08		ldx	#8
.14e0	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.14e3	aa		tax				tax
.14e4	60		rts				rts
.14e5					WordRefHandler:
.14e5	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.14e8	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.14eb	b0 03		bcs $14f0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14ed	4c 32 15	jmp $1532			jmp 	MInt32WordIndirect 							; else do it as integer.
.14f0					_IsFPOperation:
.14f0	8a		txa				txa 								; call the relevant fp routine
.14f1	a2 08		ldx #$08		ldx	#8
.14f3	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.14f6	aa		tax				tax
.14f7	60		rts				rts
.14f8					ByteRefHandler:
.14f8	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.14fb	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.14fe	b0 03		bcs $1503			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1500	4c 36 15	jmp $1536			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1503					_IsFPOperation:
.1503	8a		txa				txa 								; call the relevant fp routine
.1504	a2 08		ldx #$08		ldx	#8
.1506	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1509	aa		tax				tax
.150a	60		rts				rts
.150b					PowerHandler:
.150b	20 e8 15	jsr $15e8			jsr 	DereferenceTwo
.150e	20 eb 13	jsr $13eb			jsr 	BinaryProcess 				; check to see if either is float
.1511	b0 03		bcs $1516			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1513	4c 1e 15	jmp $151e			jmp 	PowerInteger 							; else do it as integer.
.1516					_IsFPOperation:
.1516	8a		txa				txa 								; call the relevant fp routine
.1517	a2 16		ldx #$16		ldx	#22
.1519	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.151c	aa		tax				tax
.151d	60		rts				rts
.151e					PowerInteger:
.151e	20 05 14	jsr $1405			jsr 	BPMakeBothFloat				; make them float.
.1521	8a		txa				txa
.1522	a2 16		ldx #$16		ldx	#22
.1524	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1527	a2 12		ldx #$12		ldx	#18
.1529	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.152c	aa		tax				tax
.152d	a9 00		lda #$00			lda 	#0 							; make type integer
.152f	95 40		sta $40,x			sta 	esType,x
.1531	60		rts				rts
.1532					Mint32WordIndirect:
.1532	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1534	d0 02		bne $1538			bne 	Min32Indirect
.1536					Mint32ByteIndirect:
.1536	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1538					Min32Indirect:
.1538	48		pha				pha 								; save the indirection
.1539	20 1a 1b	jsr $1b1a			jsr 	MInt32Add 					; add a!b a?b
.153c	68		pla				pla 								; and set the type to reference.
.153d	95 40		sta $40,x			sta 	esType,x
.153f	60		rts				rts
.1540					Mint32ShiftLeftX:
.1540	18		clc				clc
.1541	90 01		bcc $1544			bcc 	Mint32Shift
.1543					Mint32ShiftRightX:
.1543	38		sec				sec
.1544					Mint32Shift:
.1544	08		php				php 								; save carry flag on stack.
.1545	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1547	15 59		ora $59,x			ora 	esInt2+1,x
.1549	15 61		ora $61,x			ora 	esInt3+1,x
.154b	d0 1e		bne $156b			bne 	_MShiftZero
.154d	b5 49		lda $49,x			lda 	esInt0+1,x
.154f	c9 20		cmp #$20			cmp 	#32
.1551	b0 18		bcs $156b			bcs 	_MShiftZero
.1553					_MShiftLoop:
.1553	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1555	f0 12		beq $1569			beq 	_MShiftExit
.1557	d6 49		dec $49,x			dec 	esInt0+1,x
.1559	28		plp				plp 								; restore and save carry
.155a	08		php				php
.155b	90 06		bcc $1563			bcc 	_MShiftLeft
.155d	20 4d 1c	jsr $1c4d			jsr 	Mint32ShiftRight
.1560	4c 53 15	jmp $1553			jmp 	_MShiftLoop
.1563					_MShiftLeft:
.1563	20 44 1c	jsr $1c44			jsr 	Mint32ShiftLeft
.1566	4c 53 15	jmp $1553			jmp 	_MShiftLoop
.1569					_MShiftExit:
.1569	28		plp				plp	 								; throw saved carry and exit
.156a	60		rts				rts
.156b					_MShiftZero:
.156b	4c 2f 1c	jmp $1c2f			jmp 	MInt32False 				; return 0.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/compare.asm

.156e					PerformComparison:
.156e	20 e8 15	jsr $15e8			jsr 	DereferenceTwo 				; make both values.
.1571	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1573	35 41		and $41,x			and 	esType+1,x
.1575	0a		asl a				asl 	a
.1576	30 1d		bmi $1595			bmi 	_PCIsString
.1578	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.157a	15 41		ora $41,x			ora 	esType+1,x
.157c	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.157d	30 22		bmi $15a1			bmi 	_PCError
.157f	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1581	f0 0f		beq $1592			beq 	_PCIsInteger 				; if not two integers
.1583	20 05 14	jsr $1405			jsr 	BPMakeBothFloat 			; make both float
.1586	8a		txa				txa
.1587	a2 04		ldx #$04		ldx	#4
.1589	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.158c	86 0a		stx $0a				stx 	tempShort 					; save result
.158e	aa		tax				tax
.158f	a5 0a		lda $0a				lda 	tempShort
.1591	60		rts				rts
.1592					_PCIsInteger:
.1592	4c f3 19	jmp $19f3			jmp 	MInt32Compare
.1595					_PCIsString:
.1595	8a		txa				txa 								; A has SP
.1596	a2 04		ldx #$04		ldx	#4
.1598	20 90 1e	jsr $1e90		jsr	stringHandler
.159b	86 0a		stx $0a				stx 	tempShort 					; save result
.159d	aa		tax				tax 								; put SP back in X and get result.
.159e	a5 0a		lda $0a				lda 	tempShort
.15a0	60		rts				rts
.15a1					_PCError:
.15a1	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.15a3	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.15a6					CompareEquals:
.15a6	20 6e 15	jsr $156e			jsr 	PerformComparison
.15a9	c9 00		cmp #$00			cmp 	#$00
.15ab	f0 35		beq $15e2			beq  	CompareTrue
.15ad	4c e5 15	jmp $15e5			jmp 	CompareFalse
.15b0					CompareLess:
.15b0	20 6e 15	jsr $156e			jsr 	PerformComparison
.15b3	c9 ff		cmp #$ff			cmp 	#$FF
.15b5	f0 2b		beq $15e2			beq  	CompareTrue
.15b7	4c e5 15	jmp $15e5			jmp 	CompareFalse
.15ba					CompareGreater:
.15ba	20 6e 15	jsr $156e			jsr 	PerformComparison
.15bd	c9 01		cmp #$01			cmp 	#$01
.15bf	f0 21		beq $15e2			beq  	CompareTrue
.15c1	4c e5 15	jmp $15e5			jmp 	CompareFalse
.15c4					CompareNotEquals:
.15c4	20 6e 15	jsr $156e			jsr 	PerformComparison
.15c7	c9 00		cmp #$00			cmp 	#$00
.15c9	d0 17		bne $15e2			bne  	CompareTrue
.15cb	4c e5 15	jmp $15e5			jmp 	CompareFalse
.15ce					CompareGreaterEq:
.15ce	20 6e 15	jsr $156e			jsr 	PerformComparison
.15d1	c9 ff		cmp #$ff			cmp 	#$FF
.15d3	d0 0d		bne $15e2			bne  	CompareTrue
.15d5	4c e5 15	jmp $15e5			jmp 	CompareFalse
.15d8					CompareLessEq:
.15d8	20 6e 15	jsr $156e			jsr 	PerformComparison
.15db	c9 01		cmp #$01			cmp 	#$01
.15dd	d0 03		bne $15e2			bne  	CompareTrue
.15df	4c e5 15	jmp $15e5			jmp 	CompareFalse
.15e2					CompareTrue:
.15e2	4c 2b 1c	jmp $1c2b			jmp 	MInt32True
.15e5					CompareFalse:
.15e5	4c 2f 1c	jmp $1c2f			jmp 	MInt32False

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/dereference.asm

.15e8					DereferenceTwo:
.15e8	e8		inx				inx
.15e9	20 ed 15	jsr $15ed			jsr 	DereferenceOne
.15ec	ca		dex				dex
.15ed					DereferenceOne:
.15ed	b5 40		lda $40,x			lda 	esType,x
.15ef	10 3d		bpl $162e			bpl 	_DRNotReference 			; is it a reference ?
.15f1	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.15f2	b0 3b		bcs $162f			bcs 	_DRFloatDeReference
.15f4	98		tya				tya
.15f5	48		pha				pha
.15f6	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.15f8	85 04		sta $04				sta 	temp0
.15fa	b5 50		lda $50,x			lda 	esInt1,x
.15fc	85 05		sta $05				sta 	temp0+1
.15fe	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1600	95 50		sta $50,x			sta 	esInt1,x
.1602	95 58		sta $58,x			sta 	esInt2,x
.1604	95 60		sta $60,x			sta 	esInt3,x
.1606	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1608	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.160a	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.160b	30 0d		bmi $161a			bmi 	_DeRefString 				; string, 2 bytes only
.160d	d0 11		bne $1620			bne 	_DeRefByte 					; byte 1 byte only
.160f					_DeRefLong:
.160f	a0 03		ldy #$03			ldy 	#3
.1611	b1 04		lda ($04),y			lda 	(temp0),y
.1613	95 60		sta $60,x			sta 	esInt3,x
.1615	88		dey				dey
.1616	b1 04		lda ($04),y			lda 	(temp0),y
.1618	95 58		sta $58,x			sta 	esInt2,x
.161a					_DeRefString:
.161a	a0 01		ldy #$01			ldy 	#1
.161c	b1 04		lda ($04),y			lda 	(temp0),y
.161e	95 50		sta $50,x			sta 	esInt1,x
.1620					_DeRefByte:
.1620	a0 00		ldy #$00			ldy 	#0
.1622	b1 04		lda ($04),y			lda 	(temp0),y
.1624	95 48		sta $48,x			sta 	esInt0,x
.1626	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1628	29 40		and #$40			and 	#$40
.162a	95 40		sta $40,x			sta 	esType,x
.162c	68		pla				pla
.162d	a8		tay				tay
.162e					_DRNotReference
.162e	60		rts				rts
.162f					_DRFloatDereference:
.162f	8a		txa				txa
.1630							floatingpoint_deref
.1630	aa		tax				tax
.1631	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1633	95 40		sta $40,x			sta 	esType,x
.1635	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/evaluate.asm

.1636					EvaluateLevel:
.1636	48		pha				pha 								; save precedence level.
.1637	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1639	95 48		sta $48,x			sta 	esInt0,x
.163b	95 50		sta $50,x			sta 	esInt1,x
.163d	95 58		sta $58,x			sta 	esInt2,x
.163f	95 60		sta $60,x			sta 	esInt3,x
.1641	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1643	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1645	30 21		bmi $1668			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1647	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1648	30 0a		bmi $1654			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.164a	8a		txa				txa 								; stack level in X
.164b	a2 00		ldx #$00		ldx	#0
.164d	20 be 1e	jsr $1ebe		jsr	variableHandler
.1650	aa		tax				tax
.1651	4c 91 16	jmp $1691			jmp		_ELHasTerm
.1654					_ELIsConstant:
.1654	4a		lsr a				lsr 	a 							; get the value back
.1655	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1657	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1659					_ELCheckNext:
.1659	c8		iny				iny 								; look at next
.165a	b1 02		lda ($02),y			lda 	(codePtr),y
.165c	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.165e	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1660	b0 2f		bcs $1691			bcs 	_ELHasTerm 					; done getting the constant.
.1662	20 9e 17	jsr $179e			jsr 	ELShiftByteIn 				; shift byte into position.
.1665	4c 59 16	jmp $1659			jmp 	_ELCheckNext
.1668					_ELIsToken:
.1668	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.166a	f0 0f		beq $167b			beq 	_ELIsString
.166c	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.166e	d0 5f		bne $16cf			bne 	_ELCheckUnary
.1670	8a		txa				txa 								; put X into A
.1671	c8		iny				iny 								; skip over the float marker
.1672	a2 18		ldx #$18		ldx	#24
.1674	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1677	aa		tax				tax 								; restore X
.1678	4c 91 16	jmp $1691			jmp 	_ELHasTerm
.167b					_ELIsString:
.167b	98		tya				tya 								; address of string is codePtr+y+1
.167c	38		sec				sec
.167d	65 02		adc $02				adc 	codePtr
.167f	95 48		sta $48,x			sta 	esInt0,x
.1681	a5 03		lda $03				lda 	codePtr+1
.1683	69 00		adc #$00			adc 	#0
.1685	95 50		sta $50,x			sta 	esInt1,x
.1687	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1689	95 40		sta $40,x			sta 	esType,x
.168b	c8		iny				iny 								; skip over string.
.168c	98		tya				tya
.168d	38		sec				sec									; +1 for the length itself.
.168e	71 02		adc ($02),y			adc 	(codePtr),y
.1690	a8		tay				tay 								; and fall through to term loop code.
.1691					_ELHasTerm:
.1691	b1 02		lda ($02),y			lda 	(codePtr),y
.1693	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1695	90 04		bcc $169b			bcc 	_ELPopExit
.1697	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.1699	90 02		bcc $169d			bcc 	_ELHasBinaryTerm
.169b					_ELPopExit:
.169b	68		pla				pla
.169c					_ELExit:
.169c	60		rts				rts
.169d					_ELHasBinaryTerm:
.169d	84 0a		sty $0a				sty 	tempShort 					; save position
.169f	a8		tay				tay 								; use token as an index and get the precedence.
.16a0	b9 46 17	lda $1746,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.16a3	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16a5	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.16a7	68		pla				pla 								; restore current level.
.16a8	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.16aa	b0 f0		bcs $169c			bcs 	_ELExit
.16ac	48		pha				pha 								; save current level back on the stack.
.16ad	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.16af	48		pha				pha
.16b0	c8		iny				iny
.16b1	e8		inx				inx 								; calculate the RHS at the operator precedence.
.16b2	a5 0a		lda $0a				lda 	tempShort
.16b4	20 36 16	jsr $1636			jsr 	EvaluateLevel
.16b7	ca		dex				dex
.16b8	68		pla				pla 								; get the operator back out.
.16b9					_ELExecuteA:
.16b9	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.16bb	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.16bc	aa		tax				tax
.16bd	bd 7f 12	lda $127f,x			lda 	Group0Vectors,x
.16c0	85 04		sta $04				sta 	temp0
.16c2	bd 80 12	lda $1280,x			lda 	Group0Vectors+1,x
.16c5	85 05		sta $05				sta 	temp0+1
.16c7	a6 0a		ldx $0a				ldx 	tempShort
.16c9	20 12 17	jsr $1712			jsr 	_ELCallTemp0
.16cc	4c 91 16	jmp $1691			jmp 	_ELHasTerm 					; and loop back round.
.16cf					_ELCheckUnary:
.16cf	c8		iny				iny 								; skip over token.
.16d0	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.16d2	f0 15		beq $16e9			beq 	_ELMinus
.16d4	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.16d6	f0 28		beq $1700			beq 	_ELIndirect
.16d8	c9 98		cmp #$98			cmp 	#TKW_QMARK
.16da	f0 24		beq $1700			beq 	_ELIndirect
.16dc	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.16de	90 04		bcc $16e4			bcc 	_ELUSyntax
.16e0	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.16e2	90 d5		bcc $16b9			bcc 	_ELExecuteA 				; if so do that token.
.16e4					_ELUSyntax:
.16e4	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.16e6	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.16e9					_ELMinus:
.16e9	20 27 17	jsr $1727			jsr 	EvaluateNumericTerm 		; get a number to negate.
.16ec	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.16ee	f0 0a		beq $16fa			beq 	_ELMinusInteger
.16f0	8a		txa				txa
.16f1	a2 0c		ldx #$0c		ldx	#12
.16f3	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.16f6	aa		tax				tax
.16f7	4c 91 16	jmp $1691			jmp 	_ELHasTerm
.16fa					_ELMinusInteger:
.16fa	20 e9 1b	jsr $1be9			jsr 	MInt32Negate 				; do int negate
.16fd	4c 91 16	jmp $1691			jmp 	_ELHasTerm
.1700					_ELIndirect:
.1700	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1701	20 30 17	jsr $1730			jsr 	EvaluateIntegerTerm 		; integer address
.1704	68		pla				pla
.1705	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1707	f0 02		beq $170b			beq 	_ELHaveModifier
.1709	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.170b					_ELHaveModifier:
.170b	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.170d	95 40		sta $40,x			sta 	esType,x
.170f	4c 91 16	jmp $1691			jmp 	_ELHasTerm
.1712					_ELCallTemp0:
.1712	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1715					UnaryParenthesis:
.1715	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1717	20 36 16	jsr $1636			jsr 	EvaluateLevel
.171a	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen 			; check for )
.171d	60		rts				rts
.171e					EvaluateTerm:
.171e	a9 0f		lda #$0f			lda 	#15
.1720	20 36 16	jsr $1636			jsr 	EvaluateLevel
.1723	20 ed 15	jsr $15ed			jsr 	DereferenceOne
.1726	60		rts				rts
.1727					EvaluateNumericTerm:
.1727	20 1e 17	jsr $171e			jsr 	EvaluateTerm
.172a	b5 40		lda $40,x			lda 	esType,x
.172c	0a		asl a				asl 	a 							; see if it's a string.
.172d	30 09		bmi $1738			bmi 	ENTType
.172f	60		rts				rts
.1730					EvaluateIntegerTerm:
.1730	20 1e 17	jsr $171e			jsr 	EvaluateTerm
.1733	b5 40		lda $40,x			lda 	esType,x
.1735	d0 01		bne $1738			bne 	ENTType
.1737	60		rts				rts
.1738					ENTType:
.1738	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.173a	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.173d					EvaluateRoot:
.173d	a2 00		ldx #$00			ldx 	#0
.173f					Evaluate:
.173f	a9 00		lda #$00			lda 	#0
.1741	20 36 16	jsr $1636			jsr 	EvaluateLevel
.1744	20 ed 15	jsr $15ed			jsr 	DereferenceOne
.1747	60		rts				rts
.1748					EvaluateNumeric:
.1748	20 3f 17	jsr $173f			jsr 	Evaluate
.174b	b5 40		lda $40,x			lda 	esType,x
.174d	0a		asl a				asl 	a 							; see if it's a string.
.174e	30 e8		bmi $1738			bmi 	ENTType
.1750	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1751	4a		lsr a				lsr 	a
.1752	60		rts				rts
.1753					EvaluateString:
.1753	20 3f 17	jsr $173f			jsr 	Evaluate
.1756	b5 40		lda $40,x			lda 	esType,x
.1758	0a		asl a				asl 	a 							; see if it's a string.
.1759	10 dd		bpl $1738			bpl 	ENTType
.175b	60		rts				rts
.175c					EvaluateRootInteger:
.175c	a2 00		ldx #$00			ldx 	#0
.175e					EvaluateInteger:
.175e	20 3f 17	jsr $173f			jsr 	Evaluate
.1761	b5 40		lda $40,x			lda 	esType,x
.1763	d0 d3		bne $1738			bne 	ENTType
.1765	60		rts				rts
.1766					EvaluateSmallInteger:
.1766	20 5e 17	jsr $175e			jsr 	EvaluateInteger
.1769	b5 50		lda $50,x			lda 	esInt1,x
.176b	15 58		ora $58,x			ora 	esInt2,x
.176d	15 60		ora $60,x			ora 	esInt3,x
.176f	d0 03		bne $1774			bne 	_ESIValue
.1771	b5 48		lda $48,x			lda 	esInt0,x
.1773	60		rts				rts
.1774					_ESIValue:
.1774	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1776	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1779					LinkEvaluate:
.1779	aa		tax				tax
.177a	20 3f 17	jsr $173f			jsr 	Evaluate
.177d	8a		txa				txa
.177e	60		rts				rts
.177f					LinkEvaluateInteger:
.177f	aa		tax				tax
.1780	20 5e 17	jsr $175e			jsr 	EvaluateInteger
.1783	8a		txa				txa
.1784	60		rts				rts
.1785					LinkEvaluateSmallInt:
.1785	aa		tax				tax
.1786	20 66 17	jsr $1766			jsr 	EvaluateSmallInteger
.1789	8a		txa				txa
.178a	60		rts				rts
.178b					EvaluateReference:
.178b	ad dd 17	lda $17dd			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.178e	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.178f	e9 01		sbc #$01			sbc 	#1
.1791	20 36 16	jsr $1636			jsr 	EvaluateLevel
.1794	b5 40		lda $40,x			lda 	esType,x
.1796	10 01		bpl $1799			bpl 	_ERFail
.1798	60		rts				rts
.1799					_ERFail:
.1799	a2 0a		ldx #$0a			ldx 	#ErrorID_NoReference
.179b	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.179e					ELShiftByteIn:
.179e	48		pha				pha 								; save bits to shift in.
.179f	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.17a1	48		pha				pha
.17a2	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.17a4	95 60		sta $60,x			sta 	esInt3,x
.17a6	b5 50		lda $50,x			lda 	esInt1,x
.17a8	95 58		sta $58,x			sta 	esInt2,x
.17aa	b5 48		lda $48,x			lda 	esInt0,x
.17ac	95 50		sta $50,x			sta 	esInt1,x
.17ae	a9 00		lda #$00			lda 	#0
.17b0	95 48		sta $48,x			sta 	esInt0,x
.17b2	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.17b3	29 03		and #$03			and 	#3 							; only want lower 2 bits
.17b5	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.17b7					_ELShiftLoop:
.17b7	4a		lsr a				lsr 	a
.17b8	76 60		ror $60,x			ror 	esInt3,x
.17ba	76 58		ror $58,x			ror 	esInt2,x
.17bc	76 50		ror $50,x			ror 	esInt1,x
.17be	76 48		ror $48,x			ror 	esInt0,x
.17c0	c9 01		cmp #$01			cmp 	#1
.17c2	d0 f3		bne $17b7			bne 	_ELShiftLoop
.17c4	68		pla				pla 								; get original 6 bit value and OR in.
.17c5	29 3f		and #$3f			and 	#$3F
.17c7	15 48		ora $48,x			ora 	esInt0,x
.17c9	95 48		sta $48,x			sta 	esInt0,x
.17cb	60		rts				rts
.17cc					ELBinaryOperatorInfo:

;******  Processing file: ../source/main/evaluate/../../generated/binarystructinfo.inc

>17cc	01					.byte	$01			; $86 and
>17cd	01					.byte	$01			; $87 or
>17ce	01					.byte	$01			; $88 xor
>17cf	02					.byte	$02			; $89 >=
>17d0	02					.byte	$02			; $8a <=
>17d1	02					.byte	$02			; $8b >
>17d2	02					.byte	$02			; $8c <
>17d3	02					.byte	$02			; $8d =
>17d4	02					.byte	$02			; $8e <>
>17d5	03					.byte	$03			; $8f +
>17d6	03					.byte	$03			; $90 -
>17d7	04					.byte	$04			; $91 >>
>17d8	04					.byte	$04			; $92 <<
>17d9	04					.byte	$04			; $93 *
>17da	04					.byte	$04			; $94 /
>17db	04					.byte	$04			; $95 mod
>17dc	05					.byte	$05			; $96 ^
>17dd	06					.byte	$06			; $97 !
>17de	06					.byte	$06			; $98 ?
>17df	82					.byte	$82			; $99 repeat
>17e0	82					.byte	$82			; $9a while
>17e1	82					.byte	$82			; $9b for
>17e2	82					.byte	$82			; $9c if
>17e3	80					.byte	$80			; $9d until
>17e4	80					.byte	$80			; $9e wend
>17e5	80					.byte	$80			; $9f next
>17e6	80					.byte	$80			; $a0 then
>17e7	80					.byte	$80			; $a1 endif

;******  Return to file: ../source/main/evaluate/evaluate.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unary.asm

.17e8					UnaryLen:
.17e8	20 f6 17	jsr $17f6			jsr 	ULStart
.17eb					ULFinish:
.17eb	b1 04		lda ($04),y			lda 	(temp0),y
.17ed	a4 0a		ldy $0a				ldy 	tempShort
.17ef	20 3e 1c	jsr $1c3e			jsr 	MInt32Set8Bit
.17f2	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen
.17f5	60		rts				rts
.17f6	20 53 17	jsr $1753	ULStart:jsr 	EvaluateString
.17f9	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.17fb	85 04		sta $04				sta 	temp0
.17fd	b5 50		lda $50,x			lda 	esInt1,x
.17ff	85 05		sta $05				sta 	temp0+1
.1801	84 0a		sty $0a				sty 	tempShort 					; get length
.1803	a0 00		ldy #$00			ldy 	#0
.1805	60		rts				rts
.1806					UnaryAsc:
.1806	20 f6 17	jsr $17f6			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1809	b1 04		lda ($04),y			lda 	(temp0),y
.180b	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.180c	c9 00		cmp #$00			cmp 	#0
.180e	d0 db		bne $17eb			bne 	ULFinish
.1810	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1812	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1815					UnaryAbs:
.1815	20 48 17	jsr $1748			jsr 	EvaluateNumeric
.1818	b0 07		bcs $1821			bcs 	_UAFloat
.181a	20 e4 1b	jsr $1be4			jsr 	MInt32Absolute
.181d	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen
.1820	60		rts				rts
.1821					_UAFloat:
.1821	8a		txa				txa
.1822	a2 00		ldx #$00		ldx	#0
.1824	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1827	aa		tax				tax
.1828	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen
.182b	60		rts				rts
.182c					UnarySgn:
.182c	20 48 17	jsr $1748			jsr 	EvaluateNumeric
.182f	b0 07		bcs $1838			bcs 	_USFloat
.1831	20 1c 1c	jsr $1c1c			jsr 	MInt32Sign
.1834	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen
.1837	60		rts				rts
.1838					_USFloat:
.1838	8a		txa				txa
.1839	a2 0e		ldx #$0e		ldx	#14
.183b	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.183e	aa		tax				tax
.183f	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen
.1842	60		rts				rts
.1843					UnaryPeek:
.1843	20 6f 18	jsr $186f			jsr 	PDLCode
.1846	4c 63 18	jmp $1863			jmp 	PDLByte0
.1849					UnaryDeek:
.1849	20 6f 18	jsr $186f			jsr 	PDLCode
.184c	4c 5d 18	jmp $185d			jmp 	PDLByte1
.184f					UnaryLeek:
.184f	20 6f 18	jsr $186f			jsr 	PDLCode
.1852	a0 03		ldy #$03			ldy 	#3
.1854	b1 04		lda ($04),y			lda 	(temp0),y
.1856	95 60		sta $60,x			sta 	esInt3,x
.1858	88		dey				dey
.1859	b1 04		lda ($04),y			lda 	(temp0),y
.185b	95 58		sta $58,x			sta 	esInt2,x
.185d					PDLByte1:
.185d	a0 01		ldy #$01			ldy 	#1
.185f	b1 04		lda ($04),y			lda 	(temp0),y
.1861	95 50		sta $50,x			sta 	esInt1,x
.1863					PDLByte0:
.1863	a0 00		ldy #$00			ldy 	#0
.1865	b1 04		lda ($04),y			lda 	(temp0),y
.1867	95 48		sta $48,x			sta 	esInt0,x
.1869	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.186b	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen 			; check right and return
.186e	60		rts				rts
.186f					PDLCode:
.186f	20 5e 17	jsr $175e			jsr 	EvaluateInteger
.1872	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1874	85 04		sta $04				sta 	temp0
.1876	b5 50		lda $50,x			lda 	esInt1,x
.1878	85 05		sta $05				sta 	temp0+1
.187a	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.187c	95 50		sta $50,x			sta 	esInt1,x
.187e	95 58		sta $58,x			sta 	esInt2,x
.1880	95 60		sta $60,x			sta 	esInt3,x
.1882	84 0a		sty $0a				sty 	tempShort 					; save Y
.1884	60		rts				rts
.1885					Unary_Random:
.1885	20 5f 1c	jsr $1c5f			jsr 	MInt32Random 				; generate random number.
.1888	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.188a	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.188c	f0 08		beq $1896			beq 	_URExit
.188e	e8		inx				inx 								; load range 0..r-1 into +1
.188f	20 5e 17	jsr $175e			jsr 	EvaluateInteger
.1892	ca		dex				dex
.1893	20 a6 1a	jsr $1aa6			jsr 	MInt32Modulus 				; calculate random % modulus
.1896					_URExit:
.1896	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen 			; check right and return
.1899	60		rts				rts
.189a					Unary_Min:
.189a	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.189c	d0 02		bne $18a0			bne 	UnaryMBody
.189e					Unary_Max:
.189e	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.18a0					UnaryMBody:
.18a0	48		pha				pha 								; save comparator on stack.
.18a1	20 3f 17	jsr $173f			jsr 	Evaluate 					; get the first thing to check
.18a4					_UnaryMLoop:
.18a4	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.18a6	c8		iny				iny
.18a7	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.18a9	f0 09		beq $18b4			beq 	_UnaryMExit
.18ab	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.18ad	f0 07		beq $18b6			beq 	_UnaryMCompare
.18af	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.18b1	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.18b4					_UnaryMExit:
.18b4	68		pla				pla 								; throw comparator and return.
.18b5	60		rts				rts
.18b6					_UnaryMCompare:
.18b6	e8		inx				inx 								; get the 2nd thing to evaluate
.18b7	20 3f 17	jsr $173f			jsr 	Evaluate
.18ba	ca		dex				dex
.18bb	20 6e 15	jsr $156e			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.18be	85 0a		sta $0a				sta 	tempShort 					; save result
.18c0	68		pla				pla 								; get what we need
.18c1	48		pha				pha
.18c2	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.18c4	d0 de		bne $18a4			bne 	_UnaryMLoop 				; no, try another value.
.18c6	20 2f 1c	jsr $1c2f			jsr 	MInt32False 				; promote 2nd to 1st.
.18c9	20 1a 1b	jsr $1b1a			jsr 	MInt32Add
.18cc	4c a4 18	jmp $18a4			jmp 	_UnaryMLoop
.18cf					Unary_Page:
.18cf	20 2f 1c	jsr $1c2f			jsr 	MInt32False 				; zero
.18d2	ad 68 08	lda $0868			lda 	basePage 					; copy base page address in.
.18d5	95 48		sta $48,x			sta 	esInt0,x
.18d7	ad 69 08	lda $0869			lda 	basePage+1
.18da	95 50		sta $50,x			sta 	esInt1,x
.18dc	60		rts				rts
.18dd					UnaryReference:
.18dd	a9 0f		lda #$0f			lda 	#15
.18df	20 36 16	jsr $1636			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.18e2	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.18e4	10 05		bpl $18eb			bpl 	UType
.18e6	a9 00		lda #$00			lda 	#0 							; make it an integer
.18e8	95 40		sta $40,x			sta 	esType,x
.18ea	60		rts				rts
.18eb					UType:
.18eb	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.18ed	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.18f0					UnaryHexMarker:
.18f0	4c 30 17	jmp $1730			jmp 	EvaluateIntegerTerm
.18f3					UnaryComplement:
.18f3	20 30 17	jsr $1730			jsr 	EvaluateIntegerTerm
.18f6	20 03 1c	jsr $1c03			jsr 	MInt32Not
.18f9	60		rts				rts
.18fa					UnaryIntToFloat:
.18fa	20 48 17	jsr $1748			jsr 	EvaluateNumeric
.18fd	b5 40		lda $40,x			lda 	esType,x
.18ff	d0 0b		bne $190c			bne 	_UIFExit
.1901	8a		txa				txa
.1902	a2 1a		ldx #$1a		ldx	#26
.1904	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.1907	aa		tax				tax
.1908	a9 01		lda #$01			lda 	#1
.190a	95 40		sta $40,x			sta 	esType,x
.190c					_UIFExit:
.190c	60		rts				rts
.190d					UnaryFloatToInt:
.190d	20 48 17	jsr $1748			jsr 	EvaluateNumeric
.1910	b5 40		lda $40,x			lda 	esType,x
.1912	f0 07		beq $191b			beq 	_UFIExit
.1914	8a		txa				txa
.1915	a2 12		ldx #$12		ldx	#18
.1917	20 43 1d	jsr $1d43		jsr	floatingpointHandler
.191a	aa		tax				tax
.191b					_UFIExit:
.191b	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unarystr.asm

.191c					ExecChr:
.191c	20 66 17	jsr $1766			jsr 	EvaluateSmallInteger		; character number
.191f	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen				; right bracket
.1922	98		tya				tya
.1923	48		pha				pha
.1924	8a		txa				txa 								; A = stack
.1925	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1927	a2 00		ldx #$00		ldx	#0
.1929	20 90 1e	jsr $1e90		jsr	stringHandler
.192c	aa		tax				tax 								; X = stack
.192d	68		pla				pla
.192e	a8		tay				tay
.192f	60		rts				rts
.1930					ExecLeft:
.1930	20 53 17	jsr $1753			jsr 	EvaluateString 				; string to stack,X
.1933	20 af 1c	jsr $1caf			jsr 	CheckComma
.1936	e8		inx				inx
.1937	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1939	20 3e 1c	jsr $1c3e			jsr 	MInt32Set8Bit
.193c	e8		inx				inx
.193d	20 66 17	jsr $1766			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1940					ExecSubstring:
.1940	ca		dex				dex 								; fix up X
.1941	ca		dex				dex
.1942	20 a2 1c	jsr $1ca2			jsr 	CheckRightParen 			; check closing right bracket.
.1945	8a		txa				txa 								; do the substring and exit.
.1946	a2 06		ldx #$06		ldx	#6
.1948	20 90 1e	jsr $1e90		jsr	stringHandler
.194b	aa		tax				tax
.194c	60		rts				rts
.194d					ExecMid:
.194d	20 53 17	jsr $1753			jsr 	EvaluateString 				; string to stack,X
.1950	20 af 1c	jsr $1caf			jsr 	CheckComma
.1953	e8		inx				inx
.1954	20 66 17	jsr $1766			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1957	c9 00		cmp #$00			cmp 	#0
.1959	f0 15		beq $1970			beq 	_EMValue
.195b	e8		inx				inx
.195c	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.195e	20 3e 1c	jsr $1c3e			jsr 	MInt32Set8Bit
.1961	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1963	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1965	f0 d9		beq $1940			beq 	ExecSubString
.1967	20 af 1c	jsr $1caf			jsr 	CheckComma
.196a	20 66 17	jsr $1766			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.196d	4c 40 19	jmp $1940			jmp 	ExecSubString
.1970					_EMValue:
.1970	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1972	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1975					ExecRight:
.1975	20 53 17	jsr $1753			jsr 	EvaluateString 				; string to stack,X
.1978	20 af 1c	jsr $1caf			jsr 	CheckComma
.197b	e8		inx				inx
.197c	20 66 17	jsr $1766			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.197f	ca		dex				dex
.1980	98		tya				tya
.1981	48		pha				pha
.1982	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1984	85 04		sta $04				sta 	temp0
.1986	b5 50		lda $50,x			lda 	esInt1,x
.1988	85 05		sta $05				sta 	temp0+1
.198a	a0 00		ldy #$00			ldy 	#0 							; point to length
.198c	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.198e	18		clc				clc 								; add 1.
.198f	69 01		adc #$01			adc 	#1
.1991	38		sec				sec
.1992	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.1994	f0 02		beq $1998			beq		_ERMake1 					; if zero, make it 1.
.1996	b0 02		bcs $199a			bcs		_EROkay
.1998					_ERMake1:
.1998	a9 01		lda #$01			lda 	#1 							; start position.
.199a					_EROkay:
.199a	e8		inx				inx 								; set start pos.
.199b	95 48		sta $48,x			sta 	esInt0,x
.199d	e8		inx				inx
.199e	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.19a0	20 3e 1c	jsr $1c3e			jsr 	MInt32Set8Bit
.19a3	68		pla				pla
.19a4	a8		tay				tay
.19a5	4c 40 19	jmp $1940			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32binary.asm

.19a8					MInt32And:
.19a8	b5 48		lda $48,x			lda 	esInt0,x
.19aa	35 49		and $49,x			and 	esInt0+1,x
.19ac	95 48		sta $48,x			sta 	esInt0,x
.19ae	b5 50		lda $50,x			lda 	esInt1,x
.19b0	35 51		and $51,x			and 	esInt1+1,x
.19b2	95 50		sta $50,x			sta 	esInt1,x
.19b4	b5 58		lda $58,x			lda 	esInt2,x
.19b6	35 59		and $59,x			and 	esInt2+1,x
.19b8	95 58		sta $58,x			sta 	esInt2,x
.19ba	b5 60		lda $60,x			lda 	esInt3,x
.19bc	35 61		and $61,x			and 	esInt3+1,x
.19be	95 60		sta $60,x			sta 	esInt3,x
.19c0	60		rts				rts
.19c1					MInt32Or:
.19c1	b5 48		lda $48,x			lda 	esInt0,x
.19c3	15 49		ora $49,x			ora 	esInt0+1,x
.19c5	95 48		sta $48,x			sta 	esInt0,x
.19c7	b5 50		lda $50,x			lda 	esInt1,x
.19c9	15 51		ora $51,x			ora 	esInt1+1,x
.19cb	95 50		sta $50,x			sta 	esInt1,x
.19cd	b5 58		lda $58,x			lda 	esInt2,x
.19cf	15 59		ora $59,x			ora 	esInt2+1,x
.19d1	95 58		sta $58,x			sta 	esInt2,x
.19d3	b5 60		lda $60,x			lda 	esInt3,x
.19d5	15 61		ora $61,x			ora 	esInt3+1,x
.19d7	95 60		sta $60,x			sta 	esInt3,x
.19d9	60		rts				rts
.19da					MInt32Xor:
.19da	b5 48		lda $48,x			lda 	esInt0,x
.19dc	55 49		eor $49,x			eor 	esInt0+1,x
.19de	95 48		sta $48,x			sta 	esInt0,x
.19e0	b5 50		lda $50,x			lda 	esInt1,x
.19e2	55 51		eor $51,x			eor 	esInt1+1,x
.19e4	95 50		sta $50,x			sta 	esInt1,x
.19e6	b5 58		lda $58,x			lda 	esInt2,x
.19e8	55 59		eor $59,x			eor 	esInt2+1,x
.19ea	95 58		sta $58,x			sta 	esInt2,x
.19ec	b5 60		lda $60,x			lda 	esInt3,x
.19ee	55 61		eor $61,x			eor 	esInt3+1,x
.19f0	95 60		sta $60,x			sta 	esInt3,x
.19f2	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32compare.asm

.19f3					MInt32Compare:
.19f3	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.19f5	d5 49		cmp $49,x			cmp 	esInt0+1,x
.19f7	d0 13		bne $1a0c			bne 	MInt32Compare2
.19f9	b5 50		lda $50,x			lda 	esInt1,x
.19fb	d5 51		cmp $51,x			cmp 	esInt1+1,x
.19fd	d0 0d		bne $1a0c			bne 	MInt32Compare2
.19ff	b5 58		lda $58,x			lda 	esInt2,x
.1a01	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1a03	d0 07		bne $1a0c			bne 	MInt32Compare2
.1a05	b5 60		lda $60,x			lda 	esInt3,x
.1a07	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1a09	d0 01		bne $1a0c			bne 	MInt32Compare2
.1a0b	60		rts				rts
.1a0c					MInt32Compare2:
.1a0c	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1a0e	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1a10	b5 50		lda $50,x			lda		esInt1,x
.1a12	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1a14	b5 58		lda $58,x			lda		esInt2,x
.1a16	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1a18	b5 60		lda $60,x			lda		esInt3,x
.1a1a	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1a1c	50 02		bvc $1a20			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1a1e	49 80		eor #$80			eor 	#$80
.1a20					_I32LNoOverflow
.1a20	30 03		bmi $1a25			bmi 	MInt32CLess					; if -ve then return $FF
.1a22	a9 01		lda #$01			lda 	#$01						; else return $01
.1a24	60		rts				rts
.1a25					MInt32CLess:
.1a25	a9 ff		lda #$ff			lda 	#$FF
.1a27	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32divide.asm

.1a28					MInt32SDivide:
.1a28	98		tya				tya  								; save Y, which is the count of negations
.1a29	48		pha				pha
.1a2a	a0 00		ldy #$00			ldy 	#0 							; zero count
.1a2c	20 44 1a	jsr $1a44			jsr 	_MInt32SRemSign 			; unsign TOS
.1a2f	e8		inx				inx 								; unsign TOS+1
.1a30	20 44 1a	jsr $1a44			jsr 	_MInt32SRemSign
.1a33	ca		dex				dex
.1a34	98		tya				tya 								; save sign count on stack
.1a35	48		pha				pha
.1a36	20 4d 1a	jsr $1a4d			jsr 	MInt32UDivide 				; unsigned division
.1a39	68		pla				pla 								; get sign count back
.1a3a	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1a3c	f0 03		beq $1a41			beq 	_I32SNoNeg
.1a3e	20 e9 1b	jsr $1be9			jsr 	MInt32Negate
.1a41					_I32SNoNeg:
.1a41	68		pla				pla 								; restoe Y and exit
.1a42	a8		tay				tay
.1a43	60		rts				rts
.1a44					_MInt32SRemSign:
.1a44	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1a46	10 04		bpl $1a4c			bpl 	_MInt32SRSExit
.1a48	c8		iny				iny 								; increment the sign count
.1a49	20 e9 1b	jsr $1be9			jsr 	MInt32Negate 				; negate the value.
.1a4c					_MInt32SRSExit:
.1a4c	60		rts				rts
.1a4d					MInt32UDivide:
.1a4d	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1a4f	15 51		ora $51,x			ora 	esInt1+1,x
.1a51	15 52		ora $52,x			ora 	esInt1+2,x
.1a53	15 53		ora $53,x			ora 	esInt1+3,x
.1a55	f0 4a		beq $1aa1			beq 	_MInt32DZero
.1a57	e8		inx				inx 								; clear A
.1a58	e8		inx				inx
.1a59	20 2f 1c	jsr $1c2f			jsr 	MInt32False
.1a5c	ca		dex				dex
.1a5d	ca		dex				dex
.1a5e	98		tya				tya 								; save Y on the stack
.1a5f	48		pha				pha
.1a60	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1a62					_MInt32UDLoop:
.1a62	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1a64	36 50		rol $50,x			rol 	esInt1,x
.1a66	36 58		rol $58,x			rol 	esInt2,x
.1a68	36 60		rol $60,x			rol 	esInt3,x
.1a6a	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1a6c	36 52		rol $52,x			rol 	esInt1+2,x
.1a6e	36 5a		rol $5a,x			rol 	esInt2+2,x
.1a70	36 62		rol $62,x			rol 	esInt3+2,x
.1a72	38		sec				sec 								; calculate A-M saving result on the stack
.1a73	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1a75	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1a77	48		pha				pha
.1a78	b5 52		lda $52,x			lda 	esInt1+2,x
.1a7a	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1a7c	48		pha				pha
.1a7d	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1a7f	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1a81	48		pha				pha
.1a82	b5 62		lda $62,x			lda 	esInt3+2,x
.1a84	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1a86	90 10		bcc $1a98			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1a88	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1a8a	68		pla				pla
.1a8b	95 5a		sta $5a,x			sta 	esInt2+2,x
.1a8d	68		pla				pla
.1a8e	95 52		sta $52,x			sta 	esInt1+2,x
.1a90	68		pla				pla
.1a91	95 4a		sta $4a,x			sta 	esInt0+2,x
.1a93	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1a95	4c 9b 1a	jmp $1a9b			jmp 	_MInt32Next 					; do the next iteration
.1a98					_MInt32NoSubtract:
.1a98	68		pla				pla
.1a99	68		pla				pla
.1a9a	68		pla				pla
.1a9b					_MInt32Next:
.1a9b	88		dey				dey 								; do this 32 times.
.1a9c	d0 c4		bne $1a62			bne 	_MInt32UDLoop
.1a9e	68		pla				pla 								; restore Y and exit
.1a9f	a8		tay				tay
.1aa0	60		rts				rts
.1aa1					_MInt32DZero:
.1aa1	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.1aa3	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1aa6					MInt32Modulus:
.1aa6	20 4d 1a	jsr $1a4d			jsr 	MInt32UDivide 				; do the division.
.1aa9	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1aab	95 60		sta $60,x			sta 	esInt3,x
.1aad	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1aaf	95 58		sta $58,x			sta 	esInt2,x
.1ab1	b5 52		lda $52,x			lda 	esInt1+2,x
.1ab3	95 50		sta $50,x			sta 	esInt1,x
.1ab5	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1ab7	95 48		sta $48,x			sta 	esInt0,x
.1ab9	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32fromstr.asm

.1aba					MInt32FromString:
.1aba	85 0a		sta $0a				sta 	tempShort 					; save base
.1abc	98		tya				tya
.1abd	48		pha				pha
.1abe	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1ac0	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1ac2	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1ac4	d0 01		bne $1ac7			bne 	_I32FSNotNegative
.1ac6	c8		iny				iny 								; if so consume it.
.1ac7					_I32FSNotNegative:
.1ac7	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1ac9	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1acb	f0 02		beq $1acf			beq 	_I32FSNN2
.1acd	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1acf					_I32FSNN2:
.1acf	48		pha				pha 								; save base + final sign on stack.
.1ad0	20 2f 1c	jsr $1c2f			jsr 	MInt32False 					; zero the return value.
.1ad3					I32FSMainLoop:
.1ad3	68		pla				pla 								; get the base back into tempshort
.1ad4	48		pha				pha
.1ad5	29 7f		and #$7f			and 	#$7F
.1ad7	85 0a		sta $0a				sta 	tempShort
.1ad9	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1adb	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1add	90 02		bcc $1ae1			bcc 	_I32FSNotLC
.1adf	e9 20		sbc #$20			sbc 	#32
.1ae1					_I32FSNotLC:
.1ae1	38		sec				sec 								; subtract 48 (ASCII "0")
.1ae2	e9 30		sbc #$30			sbc 	#"0"
.1ae4	90 26		bcc $1b0c			bcc 	_I32FSDone 					; nothing more to do.
.1ae6	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1ae8	90 06		bcc $1af0			bcc 	_I32FSValidate
.1aea	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1aec	90 1e		bcc $1b0c			bcc 	_I32FSDone
.1aee	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1af0					_I32FSValidate:
.1af0	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1af2	b0 18		bcs $1b0c			bcs 	_I32FSDone 					; sorry, too large for this base.
.1af4	48		pha				pha 								; save the new digit value.
.1af5	e8		inx				inx 								; put base into next slot.
.1af6	a5 0a		lda $0a				lda 	tempShort
.1af8	20 3e 1c	jsr $1c3e			jsr 	MInt32Set8Bit
.1afb	ca		dex				dex
.1afc	20 4e 1b	jsr $1b4e			jsr 	MInt32Multiply 				; multiply current by the base
.1aff	e8		inx				inx
.1b00	68		pla				pla  								; put additive into next slot
.1b01	20 3e 1c	jsr $1c3e			jsr 	MInt32Set8Bit
.1b04	ca		dex				dex
.1b05	20 1a 1b	jsr $1b1a			jsr 	MInt32Add 					; and add it
.1b08	c8		iny				iny 								; look at next character
.1b09	4c d3 1a	jmp $1ad3			jmp 	I32FSMainLoop 				; and go round again.
.1b0c					_I32FSDone:
.1b0c	68		pla				pla 								; get base/final sign back
.1b0d	10 04		bpl $1b13			bpl 	_I32FSNN3
.1b0f	88		dey				dey 								; one fewer character to allow for the - prefix.
.1b10	20 e9 1b	jsr $1be9			jsr 	MInt32Negate 				; negate the result.
.1b13					_I32FSNN3:
.1b13	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1b15	68		pla				pla
.1b16	a8		tay				tay
.1b17	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1b19	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32math.asm

.1b1a					MInt32Add:
.1b1a	18		clc				clc
.1b1b	b5 48		lda $48,x			lda 	esInt0,x
.1b1d	75 49		adc $49,x			adc 	esInt0+1,x
.1b1f	95 48		sta $48,x			sta 	esInt0,x
.1b21	b5 50		lda $50,x			lda 	esInt1,x
.1b23	75 51		adc $51,x			adc 	esInt1+1,x
.1b25	95 50		sta $50,x			sta 	esInt1,x
.1b27	b5 58		lda $58,x			lda 	esInt2,x
.1b29	75 59		adc $59,x			adc 	esInt2+1,x
.1b2b	95 58		sta $58,x			sta 	esInt2,x
.1b2d	b5 60		lda $60,x			lda 	esInt3,x
.1b2f	75 61		adc $61,x			adc 	esInt3+1,x
.1b31	95 60		sta $60,x			sta 	esInt3,x
.1b33	60		rts				rts
.1b34					MInt32Sub:
.1b34	38		sec				sec
.1b35	b5 48		lda $48,x			lda 	esInt0,x
.1b37	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1b39	95 48		sta $48,x			sta 	esInt0,x
.1b3b	b5 50		lda $50,x			lda 	esInt1,x
.1b3d	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1b3f	95 50		sta $50,x			sta 	esInt1,x
.1b41	b5 58		lda $58,x			lda 	esInt2,x
.1b43	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1b45	95 58		sta $58,x			sta 	esInt2,x
.1b47	b5 60		lda $60,x			lda 	esInt3,x
.1b49	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1b4b	95 60		sta $60,x			sta 	esInt3,x
.1b4d	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32multiply.asm

.1b4e					MInt32Multiply:
.1b4e	e8		inx				inx 								; copy 2nd -> 3rd
.1b4f	20 74 1b	jsr $1b74			jsr 	MInt32CopyUp
.1b52	ca		dex				dex
.1b53	20 74 1b	jsr $1b74			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1b56	20 2f 1c	jsr $1c2f			jsr 	MInt32False 					; zero 1st.
.1b59					_I32Loop:
.1b59	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1b5b	29 01		and #$01			and 	#1
.1b5d	f0 03		beq $1b62			beq 	_I32NoAdd 					; if set
.1b5f	20 1a 1b	jsr $1b1a			jsr 	MInt32Add 					; add 2nd to 1st.
.1b62					_I32NoAdd:
.1b62	e8		inx				inx 								; shift 2nd left
.1b63	20 44 1c	jsr $1c44			jsr 	MInt32ShiftLeft
.1b66	e8		inx				inx  								; shift 3rd right
.1b67	20 4d 1c	jsr $1c4d			jsr 	MInt32ShiftRight
.1b6a	20 56 1c	jsr $1c56			jsr 	MInt32Zero 					; check if zero.
.1b6d	08		php				php 								; save status bits
.1b6e	ca		dex				dex 	 							; point back to 1st
.1b6f	ca		dex				dex
.1b70	28		plp				plp 								; get status bits
.1b71	d0 e6		bne $1b59			bne 	_I32Loop 					; if non-zero keep going.
.1b73	60		rts				rts
.1b74					MInt32CopyUp:
.1b74	b5 48		lda $48,x			lda 	esInt0,x
.1b76	95 49		sta $49,x			sta 	esInt0+1,x
.1b78	b5 50		lda $50,x			lda 	esInt1,x
.1b7a	95 51		sta $51,x			sta 	esInt1+1,x
.1b7c	b5 58		lda $58,x			lda 	esInt2,x
.1b7e	95 59		sta $59,x			sta 	esInt2+1,x
.1b80	b5 60		lda $60,x			lda 	esInt3,x
.1b82	95 61		sta $61,x			sta 	esInt3+1,x
.1b84	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32tostr.asm

>0894					MCharCount:	.fill 	1						; count of converted characters
.1b85					MInt32ToString:
.1b85	48		pha				pha 								; save base
.1b86	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1b88	a9 00		lda #$00			lda 	#0
.1b8a	8d 94 08	sta $0894			sta 	MCharCount 					; clear character count to 0
.1b8d	98		tya				tya
.1b8e	48		pha				pha
.1b8f	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1b91	10 10		bpl $1ba3			bpl 	_I32TSUnsigned
.1b93	48		pha				pha 								; save base on stack.
.1b94	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1b96	10 08		bpl $1ba0			bpl 	_I32TSNoFlip
.1b98	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1b9a	20 d6 1b	jsr $1bd6			jsr 	MI32WriteCharacter
.1b9d	20 e9 1b	jsr $1be9			jsr 	MInt32Negate 				; negate the value.
.1ba0					_I32TSNoFlip:
.1ba0	68		pla				pla 								; get the base back
.1ba1	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1ba3					_I32TSUnsigned:
.1ba3	20 b1 1b	jsr $1bb1			jsr 	MI32DivideWrite 			; recursive code to output string.
.1ba6	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1ba8	ad 94 08	lda $0894			lda 	MCharCount
.1bab	91 04		sta ($04),y			sta 	(temp0),y
.1bad	68		pla				pla
.1bae	a8		tay				tay
.1baf	68		pla				pla
.1bb0	60		rts				rts
.1bb1					MI32DivideWrite:
.1bb1	48		pha				pha 								; save the divisor/base
.1bb2	e8		inx				inx 								; write in the dividing position.
.1bb3	20 3e 1c	jsr $1c3e			jsr 	MInt32Set8Bit
.1bb6	ca		dex				dex
.1bb7	20 4d 1a	jsr $1a4d			jsr 	MInt32UDivide 				; divide number by base.
.1bba	68		pla				pla 								; get the base into Y
.1bbb	a8		tay				tay
.1bbc	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1bbe	48		pha				pha
.1bbf	20 56 1c	jsr $1c56			jsr 	MInt32Zero 					; is the result zero ?
.1bc2	f0 04		beq $1bc8			beq 	_I32NoRecurse 				; if so, don't recurse.
.1bc4	98		tya				tya 								; put base into A
.1bc5	20 b1 1b	jsr $1bb1			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1bc8					_I32NoRecurse:
.1bc8	68		pla				pla 								; get the remainder back
.1bc9	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1bcb	90 02		bcc $1bcf			bcc 	_I32NotHex
.1bcd	69 06		adc #$06			adc 	#7-1
.1bcf					_I32NotHex:
.1bcf	18		clc				clc 								; make it ASCII
.1bd0	69 30		adc #$30			adc 	#48
.1bd2	20 d6 1b	jsr $1bd6			jsr 	MI32WriteCharacter 			; write the character out
.1bd5	60		rts				rts 								; and exit.
.1bd6					MI32WriteCharacter:
.1bd6	ee 94 08	inc $0894			inc 	MCharCount 					; bump count (space for leading count)
.1bd9	ac 94 08	ldy $0894			ldy 	MCharCount 					; get position
.1bdc	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1bde	c8		iny				iny
.1bdf	a9 00		lda #$00			lda 	#0
.1be1	91 04		sta ($04),y			sta 	(temp0),y
.1be3	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32unary.asm

>0895					MSeed32:	.fill 	4							; random number seed.
.1be4					MInt32Absolute:
.1be4	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1be6	30 01		bmi $1be9			bmi 	MInt32Negate
.1be8	60		rts				rts
.1be9					MInt32Negate:
.1be9	38		sec				sec
.1bea	a9 00		lda #$00			lda 	#0
.1bec	f5 48		sbc $48,x			sbc 	esInt0,x
.1bee	95 48		sta $48,x			sta 	esInt0,x
.1bf0	a9 00		lda #$00			lda 	#0
.1bf2	f5 50		sbc $50,x			sbc 	esInt1,x
.1bf4	95 50		sta $50,x			sta 	esInt1,x
.1bf6	a9 00		lda #$00			lda 	#0
.1bf8	f5 58		sbc $58,x			sbc 	esInt2,x
.1bfa	95 58		sta $58,x			sta 	esInt2,x
.1bfc	a9 00		lda #$00			lda 	#0
.1bfe	f5 60		sbc $60,x			sbc 	esInt3,x
.1c00	95 60		sta $60,x			sta 	esInt3,x
.1c02	60		rts				rts
.1c03					MInt32Not:
.1c03	b5 48		lda $48,x			lda 	esInt0,x
.1c05	49 ff		eor #$ff			eor 	#$FF
.1c07	95 48		sta $48,x			sta 	esInt0,x
.1c09	b5 50		lda $50,x			lda 	esInt1,x
.1c0b	49 ff		eor #$ff			eor 	#$FF
.1c0d	95 50		sta $50,x			sta 	esInt1,x
.1c0f	b5 58		lda $58,x			lda 	esInt2,x
.1c11	49 ff		eor #$ff			eor 	#$FF
.1c13	95 58		sta $58,x			sta 	esInt2,x
.1c15	b5 60		lda $60,x			lda 	esInt3,x
.1c17	49 ff		eor #$ff			eor 	#$FF
.1c19	95 60		sta $60,x			sta 	esInt3,x
.1c1b	60		rts				rts
.1c1c					MInt32Sign:
.1c1c	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1c1e	30 0b		bmi $1c2b			bmi 	MInt32True 					; if set return -1 (true)
.1c20	20 56 1c	jsr $1c56			jsr 	MInt32Zero 					; is it zero ?
.1c23	f0 0a		beq $1c2f			beq 	MInt32False 					; if zero return 0 (false)
.1c25	20 2f 1c	jsr $1c2f			jsr 	MInt32False 					; > 0 return 1
.1c28	f6 48		inc $48,x			inc 	esInt0,x
.1c2a	60		rts				rts
.1c2b					MInt32True:
.1c2b	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1c2d	d0 02		bne $1c31			bne 	MInt32WriteAll
.1c2f					MInt32False:
.1c2f	a9 00		lda #$00			lda 	#0
.1c31					MInt32WriteAll:
.1c31	95 48		sta $48,x			sta 	esInt0,x
.1c33					MInt32Write123:
.1c33	95 50		sta $50,x			sta 	esInt1,x
.1c35	95 58		sta $58,x			sta 	esInt2,x
.1c37	95 60		sta $60,x			sta 	esInt3,x
.1c39	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1c3b	95 40		sta $40,x			sta 	esType,x
.1c3d	60		rts				rts
.1c3e					MInt32Set8Bit:
.1c3e	95 48		sta $48,x			sta 	esInt0,x
.1c40	a9 00		lda #$00			lda 	#0
.1c42	f0 ef		beq $1c33			beq		MInt32Write123
.1c44					MInt32ShiftLeft:
.1c44	16 48		asl $48,x			asl 	esInt0,x
.1c46	36 50		rol $50,x			rol	 	esInt1,x
.1c48	36 58		rol $58,x			rol	 	esInt2,x
.1c4a	36 60		rol $60,x			rol	 	esInt3,x
.1c4c	60		rts				rts
.1c4d					MInt32ShiftRight:
.1c4d	56 60		lsr $60,x			lsr 	esInt3,x
.1c4f	76 58		ror $58,x			ror 	esInt2,x
.1c51	76 50		ror $50,x			ror 	esInt1,x
.1c53	76 48		ror $48,x			ror 	esInt0,x
.1c55	60		rts				rts
.1c56					MInt32Zero:
.1c56	b5 48		lda $48,x			lda 	esInt0,x
.1c58	15 50		ora $50,x			ora 	esInt1,x
.1c5a	15 58		ora $58,x			ora 	esInt2,x
.1c5c	15 60		ora $60,x			ora 	esInt3,x
.1c5e	60		rts				rts
.1c5f					MInt32Random:
.1c5f	98		tya				tya
.1c60	48		pha				pha
.1c61	a0 07		ldy #$07			ldy 	#7
.1c63	ad 95 08	lda $0895			lda 	MSeed32+0
.1c66	d0 03		bne $1c6b			bne 	_Random1
.1c68	a8		tay				tay
.1c69	a9 aa		lda #$aa			lda		#$AA
.1c6b					_Random1:
.1c6b	0a		asl a				asl 	a
.1c6c	2e 96 08	rol $0896			rol 	MSeed32+1
.1c6f	2e 97 08	rol $0897			rol 	MSeed32+2
.1c72	2e 98 08	rol $0898			rol 	MSeed32+3
.1c75	90 02		bcc $1c79			bcc 	_Random2
.1c77	49 c5		eor #$c5			eor 	#$C5
.1c79					_Random2:
.1c79	88		dey				dey
.1c7a	d0 ef		bne $1c6b			bne 	_Random1
.1c7c	8d 95 08	sta $0895			sta 	MSeed32+0
.1c7f	95 48		sta $48,x			sta 	esInt0,x
.1c81	ad 96 08	lda $0896			lda 	MSeed32+1
.1c84	95 50		sta $50,x			sta 	esInt1,x
.1c86	ad 97 08	lda $0897			lda 	MSeed32+2
.1c89	95 58		sta $58,x			sta 	esInt2,x
.1c8b	ad 98 08	lda $0898			lda 	MSeed32+3
.1c8e	95 60		sta $60,x			sta 	esInt3,x
.1c90	68		pla				pla
.1c91	a8		tay				tay
.1c92	a9 00		lda #$00			lda 	#0
.1c94	95 40		sta $40,x			sta 	esType,x
.1c96	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/check.asm

.1c97					CheckToken:
.1c97	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1c99	d0 02		bne $1c9d			bne 	_CTError
.1c9b	c8		iny				iny
.1c9c	60		rts				rts
.1c9d					_CTError:
.1c9d	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1c9f	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1ca2					CheckRightParen:
.1ca2	b1 02		lda ($02),y			lda 	(codePtr),y
.1ca4	c8		iny				iny
.1ca5	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1ca7	d0 01		bne $1caa			bne 	_CRPError
.1ca9	60		rts				rts
.1caa					_CRPError:
.1caa	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.1cac	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1caf					CheckComma:
.1caf	b1 02		lda ($02),y			lda 	(codePtr),y
.1cb1	c8		iny				iny
.1cb2	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1cb4	d0 01		bne $1cb7			bne 	_CCError
.1cb6	60		rts				rts
.1cb7					_CCError:
.1cb7	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.1cb9	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.0899					returnStack:
>0899							.fill 	retStackSize
.1cbc					RSReset:
.1cbc	a9 98		lda #$98			lda 	#(returnStack+retStackSize-1) & $FF
.1cbe	85 78		sta $78				sta 	rsPointer
.1cc0	a9 0a		lda #$0a			lda 	#(returnStack+retStackSize-1) >> 8
.1cc2	85 79		sta $79				sta 	1+(rsPointer)
.1cc4	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1cc6	8d 98 0a	sta $0a98			sta 	returnStack+retStackSize-1
.1cc9	60		rts				rts
.1cca					RSClaim:
.1cca	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1ccc	48		pha				pha 								; save marker on stack.
.1ccd	8a		txa				txa 								; get bytes required.
.1cce	38		sec				sec
.1ccf	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1cd1	65 78		adc $78				adc 	rsPointer
.1cd3	85 78		sta $78				sta 	rsPointer
.1cd5	a5 79		lda $79				lda 	rsPointer+1
.1cd7	69 ff		adc #$ff			adc 	#$FF
.1cd9	85 79		sta $79				sta 	rsPointer+1
.1cdb	68		pla				pla 								; get marker back
.1cdc	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1cde	91 78		sta ($78),y			sta 	(rsPointer),y
.1ce0	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1ce2	60		rts				rts
.1ce3					RSFree:
.1ce3	18		clc				clc
.1ce4	65 78		adc $78				adc 	rsPointer
.1ce6	85 78		sta $78				sta 	rsPointer
.1ce8	90 02		bcc $1cec			bcc 	_RSFExit
.1cea	e6 79		inc $79				inc 	rsPointer+1
.1cec					_RSFExit:
.1cec	60		rts				rts
.1ced					RSSavePosition:
.1ced	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1cef	a8		tay				tay 								; this is where we write it.
.1cf0	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1cf2	91 78		sta ($78),y			sta 	(rsPointer),y
.1cf4	c8		iny				iny
.1cf5	a5 03		lda $03				lda 	codePtr+1
.1cf7	91 78		sta ($78),y			sta 	(rsPointer),y
.1cf9	c8		iny				iny
.1cfa	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1cfc	91 78		sta ($78),y			sta 	(rsPointer),y
.1cfe	a8		tay				tay 								; fix Y back again to original value
.1cff	60		rts				rts
.1d00					RSLoadPosition:
.1d00	a8		tay				tay
.1d01	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1d03	85 02		sta $02				sta 	codePtr
.1d05	c8		iny				iny
.1d06	b1 78		lda ($78),y			lda 	(rsPointer),y
.1d08	85 03		sta $03				sta 	codePtr+1
.1d0a	c8		iny				iny
.1d0b	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1d0d	a8		tay				tay 								; to Y
.1d0e	60		rts				rts

;******  Return to file: ../source/main/main.asm

.1d0f					mainHandler:
.1d0f	7c 12 1d	jmp ($1d12,x)			jmp 	(mainVectors,x)
.1d12					mainVectors:
>1d12	79 17					.word LinkEvaluate         ; index 0
>1d14	7f 17					.word LinkEvaluateInteger  ; index 2
>1d16	85 17					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.asm

.1d18					assemblerHandler:
.1d18	7c 1b 1d	jmp ($1d1b,x)			jmp 	(assemblerVectors,x)
.1d1b					assemblerVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.asm


;******  Processing file: ../source/device/x16/x16io.asm

.1d1b					IONewLine:
.1d1b	48		pha				pha
.1d1c	a9 0d		lda #$0d			lda 	#13
.1d1e	20 2b 1d	jsr $1d2b			jsr 	IOPrintChar
.1d21	68		pla				pla
.1d22	60		rts				rts
.1d23					IOTab:
.1d23	48		pha				pha
.1d24	a9 20		lda #$20			lda 	#32
.1d26	20 2b 1d	jsr $1d2b			jsr 	IOPrintChar
.1d29	68		pla				pla
.1d2a	60		rts				rts
.1d2b					IOPrintChar:
.1d2b	aa		tax				tax
.1d2c	5a		phy				phy
.1d2d	8a		txa				txa
.1d2e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1d31	7a		ply				ply
.1d32	60		rts				rts

;******  Return to file: ../source/device/device.asm

.1d33					deviceHandler:
.1d33	7c 36 1d	jmp ($1d36,x)			jmp 	(deviceVectors,x)
.1d36					deviceVectors:
>1d36	1b 1d					.word IONewLine            ; index 0
>1d38	2b 1d					.word IOPrintChar          ; index 2
>1d3a	23 1d					.word IOTab                ; index 4

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.asm


;******  Processing file: ../source/error/errorhandler.asm

.1d3c					ErrorHandler:
.1d3c	a9 ee		lda #$ee			lda 	#$EE
.1d3e	a8		tay				tay
>1d3f	db						.byte 	$DB
.1d40	4c 40 1d	jmp $1d40	_EHHalt:jmp 	_EHHalt

;******  Return to file: ../source/error/error.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.asm

.1d43					floatingpointHandler:
.1d43	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.1d45	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.asm

.1d48					interactionHandler:
.1d48	7c 4b 1d	jmp ($1d4b,x)			jmp 	(interactionVectors,x)
.1d4b					interactionVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.asm


;******  Processing file: ../source/string/chr.asm

.1d4b					StringChrs:
.1d4b	aa		tax				tax 								; set up stack
.1d4c	a9 02		lda #$02			lda 	#2
.1d4e	20 01 1e	jsr $1e01			jsr 	AllocateSoftString
.1d51	98		tya				tya
.1d52	20 29 1e	jsr $1e29			jsr 	WriteSoftString
.1d55	20 5a 1d	jsr $1d5a			jsr 	ReturnSoftString
.1d58	8a		txa				txa
.1d59	60		rts				rts
.1d5a					ReturnSoftString:
.1d5a	a5 7a		lda $7a				lda 	softMemAlloc
.1d5c	95 48		sta $48,x			sta 	esInt0,x
.1d5e	a5 7b		lda $7b				lda 	softMemAlloc+1
.1d60	95 50		sta $50,x			sta 	esInt1,x
.1d62	a9 00		lda #$00			lda 	#0
.1d64	95 58		sta $58,x			sta 	esInt2,x
.1d66	95 60		sta $60,x			sta 	esInt3,x
.1d68	a9 40		lda #$40			lda 	#$40
.1d6a	95 40		sta $40,x			sta 	esType,x
.1d6c	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/compare.asm

.1d6d					STRCompare:
.1d6d	48		pha				pha 								; save A
.1d6e	aa		tax				tax 								; put stack pos in X
.1d6f	98		tya				tya
.1d70	48		pha				pha
.1d71	20 a5 1d	jsr $1da5			jsr 	CopyStringPair
.1d74	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1d76	b1 04		lda ($04),y			lda 	(temp0),y
.1d78	d1 06		cmp ($06),y			cmp 	(temp1),y
.1d7a	90 02		bcc $1d7e			bcc 	_SCNotSmaller
.1d7c	b1 06		lda ($06),y			lda 	(temp1),y
.1d7e					_SCNotSmaller:
.1d7e	aa		tax				tax 								; put that in X. We compare this many chars first.
.1d7f					_SCCompareLoop:
.1d7f	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1d81	f0 0c		beq $1d8f			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1d83	ca		dex				dex 								; decrement chars to compare.
.1d84	c8		iny				iny 								; move to next character
.1d85	38		sec				sec 								; calculate s1[y]-s2[y]
.1d86	b1 04		lda ($04),y			lda 	(temp0),y
.1d88	f1 06		sbc ($06),y			sbc 	(temp1),y
.1d8a	d0 0a		bne $1d96			bne 	_SCReturnResult 			; if different return sign of A
.1d8c	4c 7f 1d	jmp $1d7f			jmp 	_SCCompareLoop
.1d8f					_SCSameToEndShortest
.1d8f	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1d91	38		sec				sec
.1d92	b1 04		lda ($04),y			lda 	(temp0),y
.1d94	f1 06		sbc ($06),y			sbc 	(temp1),y
.1d96					_SCReturnResult:
.1d96	08		php				php 								; set return to zero preserving PSW.
.1d97	a2 00		ldx #$00			ldx 	#0
.1d99	28		plp				plp
.1d9a	f0 05		beq $1da1			beq 	_SCExit 					; two values equal, then exit
.1d9c	ca		dex				dex 								; X = $FF
.1d9d	90 02		bcc $1da1			bcc 	_SCExit 					; if 1st < 2nd then -1
.1d9f	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1da1					_SCExit:
.1da1	68		pla				pla
.1da2	a8		tay				tay
.1da3	68		pla				pla
.1da4	60		rts				rts
.1da5					CopyStringPair:
.1da5	b5 49		lda $49,x			lda 	esInt0+1,x
.1da7	85 06		sta $06				sta 	temp1
.1da9	b5 51		lda $51,x			lda 	esInt1+1,x
.1dab	85 07		sta $07				sta 	temp1+1
.1dad					CopyStringTop:
.1dad	b5 48		lda $48,x			lda 	esInt0,x
.1daf	85 04		sta $04				sta 	temp0
.1db1	b5 50		lda $50,x			lda 	esInt1,x
.1db3	85 05		sta $05				sta 	temp0+1
.1db5	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/concat.asm

.1db6					StringConcat:
.1db6	aa		tax				tax									; stack pos in X
.1db7	98		tya				tya
.1db8	48		pha				pha
.1db9	20 a5 1d	jsr $1da5			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1dbc	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1dbd	a0 00		ldy #$00			ldy 	#0
.1dbf	b1 04		lda ($04),y			lda 	(temp0),y
.1dc1	71 06		adc ($06),y			adc 	(temp1),y
.1dc3	b0 18		bcs $1ddd			bcs 	_SCError 					; just too many characters here.
.1dc5	20 01 1e	jsr $1e01			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1dc8	20 f8 1d	jsr $1df8			jsr 	CopySoftToStack 			; copy that to the stack.
.1dcb	20 e2 1d	jsr $1de2			jsr 	_SCCopyTemp0 				; copy temp0
.1dce	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1dd0	85 04		sta $04				sta 	temp0
.1dd2	a5 07		lda $07				lda 	temp1+1
.1dd4	85 05		sta $05				sta 	temp0+1
.1dd6	20 e2 1d	jsr $1de2			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1dd9	68		pla				pla
.1dda	a8		tay				tay
.1ddb	8a		txa				txa 								; and A
.1ddc	60		rts				rts
.1ddd					_SCError:
.1ddd	a2 0c		ldx #$0c			ldx 	#ErrorID_StrLen
.1ddf	20 3c 1d	jsr $1d3c			jsr 	ErrorHandler
.1de2					_SCCopyTemp0:
.1de2	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1de4	b1 04		lda ($04),y			lda 	(temp0),y
.1de6	85 08		sta $08				sta 	temp2
.1de8					_SCCopyLoop:
.1de8	a5 08		lda $08				lda 	temp2 						; done the lot
.1dea	f0 0b		beq $1df7			beq 	_SCCopyExit
.1dec	c6 08		dec $08				dec 	temp2
.1dee	c8		iny				iny 								; get next char
.1def	b1 04		lda ($04),y			lda 	(temp0),y
.1df1	20 29 1e	jsr $1e29			jsr 	WriteSoftString 			; write to soft string.
.1df4	4c e8 1d	jmp $1de8			jmp 	_SCCopyLoop
.1df7					_SCCopyExit:
.1df7	60		rts				rts
.1df8					CopySoftToStack:
.1df8	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1dfa	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1dfc	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1dfe	95 50		sta $50,x			sta 	esInt1,x
.1e00	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1e01					AllocateSoftString:
.1e01	85 0a		sta $0a				sta 	tempShort 					; save count
.1e03	98		tya				tya
.1e04	48		pha				pha
.1e05	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1e07	d0 0b		bne $1e14			bne 	_ASSDone
.1e09	ad 6c 08	lda $086c			lda 	highMemory 					; reset the soft memory alloc pointer.
.1e0c	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1e0e	ac 6d 08	ldy $086d			ldy 	highMemory+1 				; but it needs to be reset before each command.
.1e11	88		dey				dey
.1e12	84 7b		sty $7b				sty 	softMemAlloc+1
.1e14					_ASSDone:
.1e14	38		sec				sec 								; allocate downwards enough memory
.1e15	a5 7a		lda $7a				lda 	softMemAlloc
.1e17	e5 0a		sbc $0a				sbc 	tempShort
.1e19	85 7a		sta $7a				sta 	softMemAlloc
.1e1b	a5 7b		lda $7b				lda 	softMemAlloc+1
.1e1d	e9 00		sbc #$00			sbc 	#0
.1e1f	85 7b		sta $7b				sta 	softMemAlloc+1
.1e21	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1e23	a8		tay				tay
.1e24	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e26	68		pla				pla
.1e27	a8		tay				tay
.1e28	60		rts				rts
.1e29					WriteSoftString:
.1e29	84 0a		sty $0a				sty 	tempShort 					; save Y
.1e2b	48		pha				pha
.1e2c	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1e2e	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1e30	18		clc				clc
.1e31	69 01		adc #$01			adc 	#1
.1e33	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e35	a8		tay				tay 								; pointer in Y
.1e36	68		pla				pla 								; get char and write.
.1e37	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e39	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1e3b	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/substring.asm

.0a99					NullString:
>0a99							.fill 	1							; don't waste memory concreting null strings.
.1e3c					StringSubstring:
.1e3c	48		pha				pha
.1e3d	aa		tax				tax 								; access stack.
.1e3e	98		tya				tya
.1e3f	48		pha				pha
.1e40	20 ad 1d	jsr $1dad			jsr 	CopyStringTop 				; point temp0 to the string.
.1e43	a0 00		ldy #$00			ldy 	#0 							; get length.
.1e45	b1 04		lda ($04),y			lda 	(temp0),Y
.1e47	85 06		sta $06				sta 	temp1
.1e49	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.1e4b	c5 06		cmp $06				cmp 	temp1 						;
.1e4d	f0 02		beq $1e51			beq 	_SSBOkay
.1e4f	b0 2a		bcs $1e7b			bcs 	_SSBReturnNull
.1e51					_SSBOkay:
.1e51	a5 06		lda $06				lda 	temp1 						; get the total length +1
.1e53	18		clc				clc
.1e54	69 01		adc #$01			adc 	#1
.1e56	38		sec				sec
.1e57	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.1e59	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.1e5b	90 02		bcc $1e5f			bcc		_SSBTrunc
.1e5d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e5f					_SSBTrunc:
.1e5f	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.1e61	18		clc				clc
.1e62	69 01		adc #$01			adc 	#1 							; add 1
.1e64	20 01 1e	jsr $1e01			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1e67	20 f8 1d	jsr $1df8			jsr 	CopySoftToStack 			; copy that to the stack.
.1e6a	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.1e6c					_SSBCopyLoop:
.1e6c	a5 07		lda $07				lda 	temp1+1 					; done them all
.1e6e	f0 0e		beq $1e7e			beq 	_SSBExit
.1e70	c6 07		dec $07				dec 	temp1+1
.1e72	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.1e74	20 29 1e	jsr $1e29			jsr 	WriteSoftString
.1e77	c8		iny				iny
.1e78	4c 6c 1e	jmp $1e6c			jmp 	_SSBCopyLoop
.1e7b					_SSBReturnNull:
.1e7b	20 82 1e	jsr $1e82			jsr 	ReturnNull
.1e7e					_SSBExit:
.1e7e	68		pla				pla
.1e7f	a8		tay				tay
.1e80	68		pla				pla
.1e81	60		rts				rts
.1e82					ReturnNull:
.1e82	a9 00		lda #$00			lda 	#0 							; clear null string
.1e84	8d 99 0a	sta $0a99			sta 	NullString
.1e87	a9 99		lda #$99			lda 	#NullString & $FF 			; set a pointer to it
.1e89	95 48		sta $48,x			sta 	esInt0,x
.1e8b	a9 0a		lda #$0a			lda 	#NullString >> 8
.1e8d	95 50		sta $50,x			sta 	esInt1,x
.1e8f	60		rts				rts

;******  Return to file: ../source/string/string.asm

.1e90					stringHandler:
.1e90	7c 93 1e	jmp ($1e93,x)			jmp 	(stringVectors,x)
.1e93					stringVectors:
>1e93	4b 1d					.word StringChrs           ; index 0
>1e95	b6 1d					.word StringConcat         ; index 2
>1e97	6d 1d					.word STRCompare           ; index 4
>1e99	3c 1e					.word StringSubstring      ; index 6

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.asm

.1e9b					tokeniserHandler:
.1e9b	7c 9e 1e	jmp ($1e9e,x)			jmp 	(tokeniserVectors,x)
.1e9e					tokeniserVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/access.asm

.1e9e					AccessVariable:
.1e9e	aa		tax				tax 								; stack in X
.1e9f	c8		iny				iny
.1ea0	b1 02		lda ($02),y			lda 	(codePtr),y
.1ea2	88		dey				dey
.1ea3	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1ea5	d0 15		bne $1ebc			bne 	_AVLong
.1ea7	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1ea9	38		sec				sec 	 							; make it 0-25
.1eaa	e9 01		sbc #$01			sbc 	#1
.1eac	0a		asl a				asl 	a 							; x 4 is LSB of address
.1ead	0a		asl a				asl 	a
.1eae	95 48		sta $48,x			sta 	esInt0,x
.1eb0	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.1eb2	95 50		sta $50,x			sta 	esInt1,x
.1eb4	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1eb6	95 40		sta $40,x			sta 	esType,x
.1eb8	c8		iny				iny 								; skip over the variable reference in the code.
.1eb9	c8		iny				iny
.1eba	8a		txa				txa 								; stack in A to return.
.1ebb	60		rts				rts
.1ebc					_AVLong:
.1ebc	80 fe		bra $1ebc			bra 	_AVLong

;******  Return to file: ../source/variable/variable.asm

.1ebe					variableHandler:
.1ebe	7c c1 1e	jmp ($1ec1,x)			jmp 	(variableVectors,x)
.1ec1					variableVectors:
>1ec1	9e 1e					.word AccessVariable       ; index 0

;******  Return to file: ../source/basic.asm


;******  End of listing
