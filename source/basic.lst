
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ..\source\basic.asm
; Fri Feb 26 01:12:23 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\basic.asm


;******  Processing file: ..\source\main/01common.inc

=8					StackSize = 8

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/02macros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.

;******  Processing file: ..\source\main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$9d					TOK_STRUCTST=$9d
=$a2					TOK_UNARYST=$a2
=$be					TOK_TOKENS=$be
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ..\source\main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/imath/intmacros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/errorhandler.inc


;******  Processing file: ..\source\error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_DivZero = 2 ; Divide By Zero
=3					ErrorID_Stop = 3 ; Stop
=4					ErrorID_BadType = 4 ; Type Mismatch
=5					ErrorID_BadValue = 5 ; Illegal Value
=6					ErrorID_MissingRP = 6 ; Missing right bracket
=7					ErrorID_MissingComma = 7 ; Missing comma

;******  Return to file: ..\source\error/errorhandler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.asm


;******  Processing file: ..\source\main/00start.asm

.1000					Start:
.1000	a9 1c		lda #$1c			lda 	#(TestCode) & $FF
.1002	85 02		sta $02				sta 	codePtr
.1004	a9 10		lda #$10			lda 	#(TestCode) >> 8
.1006	85 03		sta $03				sta 	1+(codePtr)
.1008	a0 00		ldy #$00			ldy 	#0
.100a	a9 00		lda #$00			lda 	#0
.100c	a2 00		ldx #$00			ldx 	#0
.100e	20 2c 13	jsr $132c			jsr 	EvaluateLevel
.1011	20 de 12	jsr $12de			jsr 	DeReferenceOne
>1014	db						.byte 	$DB
.1015	4c 15 10	jmp $1015	halt:	jmp 	halt
.1018					Unimplemented:
>1018	db						.byte 	$DB
.1019	4c 18 10	jmp $1018			jmp 	Unimplemented

;******  Processing file: ..\source\main/../generated/testcode.inc

.101c					TestCode:
>101c	a6 46 c1 80				.byte 166,70,193,128

;******  Return to file: ..\source\main/00start.asm


;******  Processing file: ..\source\main/../generated/tokenvectors0.inc

.1020					Group0Vectors:
>1020	18 10					.word	Unimplemented            ; $80 [[eol]]
>1022	18 10					.word	Unimplemented            ; $81 [[sh1]]
>1024	18 10					.word	Unimplemented            ; $82 [[sh2]]
>1026	18 10					.word	Unimplemented            ; $83 [[sh3]]
>1028	18 10					.word	Unimplemented            ; $84 [[fpc]]
>102a	18 10					.word	Unimplemented            ; $85 [[str]]
>102c	a8 11					.word	AndHandler               ; $86 and
>102e	95 11					.word	OrHandler                ; $87 or
>1030	82 11					.word	XorHandler               ; $88 xor
>1032	bf 12					.word	CompareGreaterEq         ; $89 >=
>1034	c9 12					.word	CompareLessEq            ; $8a <=
>1036	ab 12					.word	CompareGreater           ; $8b >
>1038	a1 12					.word	CompareLess              ; $8c <
>103a	97 12					.word	CompareEquals            ; $8d =
>103c	b5 12					.word	CompareNotEquals         ; $8e <>
>103e	13 11					.word	AddHandler               ; $8f +
>1040	36 11					.word	SubHandler               ; $90 -
>1042	ce 11					.word	ShrHandler               ; $91 >>
>1044	bb 11					.word	ShlHandler               ; $92 <<
>1046	49 11					.word	MulHandler               ; $93 *
>1048	5c 11					.word	DivHandler               ; $94 /
>104a	6f 11					.word	ModHandler               ; $95 mod
>104c	07 12					.word	PowerHandler             ; $96 ^
>104e	e1 11					.word	WordRefHandler           ; $97 !
>1050	f4 11					.word	ByteRefHandler           ; $98 ?
>1052	18 10					.word	Unimplemented            ; $99 repeat
>1054	18 10					.word	Unimplemented            ; $9a while
>1056	18 10					.word	Unimplemented            ; $9b for
>1058	18 10					.word	Unimplemented            ; $9c if
>105a	18 10					.word	Unimplemented            ; $9d until
>105c	18 10					.word	Unimplemented            ; $9e wend
>105e	18 10					.word	Unimplemented            ; $9f next
>1060	18 10					.word	Unimplemented            ; $a0 then
>1062	18 10					.word	Unimplemented            ; $a1 endif
>1064	36 14					.word	UnaryParenthesis         ; $a2 (
>1066	cd 14					.word	UnaryLen                 ; $a3 len(
>1068	11 15					.word	UnarySgn                 ; $a4 sgn(
>106a	fa 14					.word	UnaryAbs                 ; $a5 abs(
>106c	6a 15					.word	Unary_Random             ; $a6 random(
>106e	18 10					.word	Unimplemented            ; $a7 page
>1070	fc 17					.word	MInt32True               ; $a8 true
>1072	00 18					.word	MInt32False              ; $a9 false
>1074	18 10					.word	Unimplemented            ; $aa min(
>1076	18 10					.word	Unimplemented            ; $ab max(
>1078	18 10					.word	Unimplemented            ; $ac sys(
>107a	18 10					.word	Unimplemented            ; $ad timer(
>107c	18 10					.word	Unimplemented            ; $ae event(
>107e	18 10					.word	Unimplemented            ; $af get(
>1080	18 10					.word	Unimplemented            ; $b0 inkey(
>1082	18 10					.word	Unimplemented            ; $b1 alloc(
>1084	18 10					.word	Unimplemented            ; $b2 chr$(
>1086	18 10					.word	Unimplemented            ; $b3 left$(
>1088	18 10					.word	Unimplemented            ; $b4 mid$(
>108a	18 10					.word	Unimplemented            ; $b5 right$(
>108c	18 10					.word	Unimplemented            ; $b6 str$(
>108e	18 10					.word	Unimplemented            ; $b7 val(
>1090	28 15					.word	UnaryPeek                ; $b8 peek(
>1092	2e 15					.word	UnaryDeek                ; $b9 deek(
>1094	34 15					.word	UnaryLeek                ; $ba leek(
>1096	eb 14					.word	UnaryAsc                 ; $bb asc(
>1098	18 10					.word	Unimplemented            ; $bc int(
>109a	18 10					.word	Unimplemented            ; $bd float(
>109c	18 10					.word	Unimplemented            ; $be @
>109e	18 10					.word	Unimplemented            ; $bf ~
>10a0	18 10					.word	Unimplemented            ; $c0 &
>10a2	18 10					.word	Unimplemented            ; $c1 )
>10a4	18 10					.word	Unimplemented            ; $c2 :
>10a6	18 10					.word	Unimplemented            ; $c3 ,
>10a8	18 10					.word	Unimplemented            ; $c4 ;
>10aa	18 10					.word	Unimplemented            ; $c5 ]
>10ac	18 10					.word	Unimplemented            ; $c6 to
>10ae	18 10					.word	Unimplemented            ; $c7 step
>10b0	18 10					.word	Unimplemented            ; $c8 proc
>10b2	18 10					.word	Unimplemented            ; $c9 endproc
>10b4	18 10					.word	Unimplemented            ; $ca local
>10b6	18 10					.word	Unimplemented            ; $cb rem
>10b8	18 10					.word	Unimplemented            ; $cc let
>10ba	18 10					.word	Unimplemented            ; $cd '
>10bc	18 10					.word	Unimplemented            ; $ce [
>10be	18 10					.word	Unimplemented            ; $cf input
>10c0	18 10					.word	Unimplemented            ; $d0 else
>10c2	18 10					.word	Unimplemented            ; $d1 vdu
>10c4	18 10					.word	Unimplemented            ; $d2 read
>10c6	18 10					.word	Unimplemented            ; $d3 data
>10c8	18 10					.word	Unimplemented            ; $d4 restore
>10ca	18 10					.word	Unimplemented            ; $d5 print
>10cc	18 10					.word	Unimplemented            ; $d6 goto
>10ce	18 10					.word	Unimplemented            ; $d7 gosub
>10d0	18 10					.word	Unimplemented            ; $d8 return
>10d2	18 10					.word	Unimplemented            ; $d9 assert
>10d4	18 10					.word	Unimplemented            ; $da stop
>10d6	18 10					.word	Unimplemented            ; $db end
>10d8	18 10					.word	Unimplemented            ; $dc dim
>10da	18 10					.word	Unimplemented            ; $dd poke
>10dc	18 10					.word	Unimplemented            ; $de doke
>10de	18 10					.word	Unimplemented            ; $df loke

;******  Return to file: ..\source\main/00start.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/binary.asm

.10e7					BinaryProcess:
.10e7	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.10e9	15 41		ora $41,x			ora 	esType+1,x
.10eb	0a		asl a				asl 	a
.10ec	30 0e		bmi $10fc			bmi 	_BPStringType 				; if one is set, then string type.
.10ee	18		clc				clc 								; return CC for integer
.10ef	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.10f1	f0 08		beq $10fb			beq 	_BPExit 					; if both integer then return with CC.
.10f3	20 01 11	jsr $1101			jsr 	BPMakeBothFloat 			; make both float
.10f6	a9 01		lda #$01			lda 	#$01 						; set result type to float
.10f8	95 40		sta $40,x			sta 	esType,x
.10fa	38		sec				sec 								; and return with carry set.
.10fb					_BPExit:
.10fb	60		rts				rts
.10fc					_BPStringType:
.10fc	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.10fe	20 e0 10	jsr $10e0			jsr 	ErrorHandler
.1101					BPMakeBothFloat:
.1101	e8		inx				inx
.1102	20 06 11	jsr $1106			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1105	ca		dex				dex
.1106					BPMakeFloat:
.1106	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1108	4a		lsr a				lsr 	a
.1109	b0 07		bcs $1112			bcs 	_BPIsFloat
.110b	8a		txa				txa
.110c	a2 1a		ldx #$1a		ldx	#26
.110e	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1111	aa		tax				tax
.1112					_BPIsFloat:
.1112	60		rts				rts
.1113					AddHandler:
.1113	20 d9 12	jsr $12d9			jsr 	DereferenceTwo 				; dereference top two on stack.
.1116	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1118	35 41		and $41,x			and 	esType+1,x
.111a	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.111c	d0 10		bne $112e			bne 	_AHStringConcat				; concatenate strings.
.111e	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.1121	b0 03		bcs $1126			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1123	4c f2 16	jmp $16f2			jmp 	MInt32Add 							; else do it as integer.
.1126					_IsFPOperation:
.1126	8a		txa				txa 								; call the relevant fp routine
.1127	a2 04		ldx #$04		ldx	#4
.1129	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.112c	aa		tax				tax
.112d	60		rts				rts
.112e					_AHStringConcat:
.112e	8a		txa				txa
.112f	a2 00		ldx #$00		ldx	#0
.1131	20 ed 18	jsr $18ed		jsr	stringHandler
.1134	aa		tax				tax
.1135	60		rts				rts
.1136					SubHandler:
.1136	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.1139	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.113c	b0 03		bcs $1141			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.113e	4c 0c 17	jmp $170c			jmp 	MInt32Sub 							; else do it as integer.
.1141					_IsFPOperation:
.1141	8a		txa				txa 								; call the relevant fp routine
.1142	a2 12		ldx #$12		ldx	#18
.1144	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1147	aa		tax				tax
.1148	60		rts				rts
.1149					MulHandler:
.1149	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.114c	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.114f	b0 03		bcs $1154			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1151	4c 26 17	jmp $1726			jmp 	MInt32Multiply 							; else do it as integer.
.1154					_IsFPOperation:
.1154	8a		txa				txa 								; call the relevant fp routine
.1155	a2 0c		ldx #$0c		ldx	#12
.1157	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.115a	aa		tax				tax
.115b	60		rts				rts
.115c					DivHandler:
.115c	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.115f	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.1162	b0 03		bcs $1167			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1164	4c 00 16	jmp $1600			jmp 	MInt32SDivide 							; else do it as integer.
.1167					_IsFPOperation:
.1167	8a		txa				txa 								; call the relevant fp routine
.1168	a2 08		ldx #$08		ldx	#8
.116a	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.116d	aa		tax				tax
.116e	60		rts				rts
.116f					ModHandler:
.116f	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.1172	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.1175	b0 03		bcs $117a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1177	4c 7e 16	jmp $167e			jmp 	MInt32Modulus 							; else do it as integer.
.117a					_IsFPOperation:
.117a	8a		txa				txa 								; call the relevant fp routine
.117b	a2 0a		ldx #$0a		ldx	#10
.117d	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1180	aa		tax				tax
.1181	60		rts				rts
.1182					XorHandler:
.1182	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.1185	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.1188	b0 03		bcs $118d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.118a	4c b2 15	jmp $15b2			jmp 	MInt32Xor 							; else do it as integer.
.118d					_IsFPOperation:
.118d	8a		txa				txa 								; call the relevant fp routine
.118e	a2 0a		ldx #$0a		ldx	#10
.1190	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1193	aa		tax				tax
.1194	60		rts				rts
.1195					OrHandler:
.1195	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.1198	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.119b	b0 03		bcs $11a0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.119d	4c 99 15	jmp $1599			jmp 	MInt32Or 							; else do it as integer.
.11a0					_IsFPOperation:
.11a0	8a		txa				txa 								; call the relevant fp routine
.11a1	a2 0a		ldx #$0a		ldx	#10
.11a3	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.11a6	aa		tax				tax
.11a7	60		rts				rts
.11a8					AndHandler:
.11a8	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.11ab	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.11ae	b0 03		bcs $11b3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11b0	4c 80 15	jmp $1580			jmp 	MInt32And 							; else do it as integer.
.11b3					_IsFPOperation:
.11b3	8a		txa				txa 								; call the relevant fp routine
.11b4	a2 0a		ldx #$0a		ldx	#10
.11b6	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.11b9	aa		tax				tax
.11ba	60		rts				rts
.11bb					ShlHandler:
.11bb	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.11be	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.11c1	b0 03		bcs $11c6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11c3	4c 3c 12	jmp $123c			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.11c6					_IsFPOperation:
.11c6	8a		txa				txa 								; call the relevant fp routine
.11c7	a2 0a		ldx #$0a		ldx	#10
.11c9	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.11cc	aa		tax				tax
.11cd	60		rts				rts
.11ce					ShrHandler:
.11ce	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.11d1	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.11d4	b0 03		bcs $11d9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11d6	4c 3f 12	jmp $123f			jmp 	MInt32ShiftRightX 							; else do it as integer.
.11d9					_IsFPOperation:
.11d9	8a		txa				txa 								; call the relevant fp routine
.11da	a2 0a		ldx #$0a		ldx	#10
.11dc	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.11df	aa		tax				tax
.11e0	60		rts				rts
.11e1					WordRefHandler:
.11e1	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.11e4	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.11e7	b0 03		bcs $11ec			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11e9	4c 2e 12	jmp $122e			jmp 	MInt32WordIndirect 							; else do it as integer.
.11ec					_IsFPOperation:
.11ec	8a		txa				txa 								; call the relevant fp routine
.11ed	a2 0a		ldx #$0a		ldx	#10
.11ef	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.11f2	aa		tax				tax
.11f3	60		rts				rts
.11f4					ByteRefHandler:
.11f4	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.11f7	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.11fa	b0 03		bcs $11ff			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11fc	4c 32 12	jmp $1232			jmp 	MInt32ByteIndirect 							; else do it as integer.
.11ff					_IsFPOperation:
.11ff	8a		txa				txa 								; call the relevant fp routine
.1200	a2 0a		ldx #$0a		ldx	#10
.1202	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1205	aa		tax				tax
.1206	60		rts				rts
.1207					PowerHandler:
.1207	20 d9 12	jsr $12d9			jsr 	DereferenceTwo
.120a	20 e7 10	jsr $10e7			jsr 	BinaryProcess 				; check to see if either is float
.120d	b0 03		bcs $1212			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.120f	4c 1a 12	jmp $121a			jmp 	PowerInteger 							; else do it as integer.
.1212					_IsFPOperation:
.1212	8a		txa				txa 								; call the relevant fp routine
.1213	a2 16		ldx #$16		ldx	#22
.1215	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1218	aa		tax				tax
.1219	60		rts				rts
.121a					PowerInteger:
.121a	20 01 11	jsr $1101			jsr 	BPMakeBothFloat				; make them float.
.121d	8a		txa				txa
.121e	a2 16		ldx #$16		ldx	#22
.1220	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1223	a2 14		ldx #$14		ldx	#20
.1225	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1228	aa		tax				tax
.1229	a9 00		lda #$00			lda 	#0 							; make type integer
.122b	95 40		sta $40,x			sta 	esType,x
.122d	60		rts				rts
.122e					Mint32WordIndirect:
.122e	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1230	d0 02		bne $1234			bne 	Min32Indirect
.1232					Mint32ByteIndirect:
.1232	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1234					Min32Indirect:
.1234	48		pha				pha 								; save the indirection
.1235	20 f2 16	jsr $16f2			jsr 	MInt32Add 					; add a!b a?b
.1238	68		pla				pla 								; and set the type to reference.
.1239	95 40		sta $40,x			sta 	esType,x
.123b	60		rts				rts
.123c					Mint32ShiftLeftX:
.123c	18		clc				clc
.123d	90 01		bcc $1240			bcc 	Mint32Shift
.123f					Mint32ShiftRightX:
.123f	38		sec				sec
.1240					Mint32Shift:
.1240	08		php				php 								; save carry flag on stack.
.1241	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1243	15 59		ora $59,x			ora 	esInt2+1,x
.1245	15 61		ora $61,x			ora 	esInt3+1,x
.1247	d0 1e		bne $1267			bne 	_MShiftZero
.1249	b5 49		lda $49,x			lda 	esInt0+1,x
.124b	c9 20		cmp #$20			cmp 	#32
.124d	b0 18		bcs $1267			bcs 	_MShiftZero
.124f					_MShiftLoop:
.124f	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1251	f0 12		beq $1265			beq 	_MShiftExit
.1253	d6 49		dec $49,x			dec 	esInt0+1,x
.1255	28		plp				plp 								; restore and save carry
.1256	08		php				php
.1257	90 06		bcc $125f			bcc 	_MShiftLeft
.1259	20 1e 18	jsr $181e			jsr 	Mint32ShiftRight
.125c	4c 4f 12	jmp $124f			jmp 	_MShiftLoop
.125f					_MShiftLeft:
.125f	20 15 18	jsr $1815			jsr 	Mint32ShiftLeft
.1262	4c 4f 12	jmp $124f			jmp 	_MShiftLoop
.1265					_MShiftExit:
.1265	28		plp				plp	 								; throw saved carry and exit
.1266	60		rts				rts
.1267					_MShiftZero:
.1267	4c 00 18	jmp $1800			jmp 	MInt32False 				; return 0.

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/compare.asm

.126a					PerformComparison:
.126a	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.126c	35 41		and $41,x			and 	esType+1,x
.126e	0a		asl a				asl 	a
.126f	30 19		bmi $128a			bmi 	_PCIsString
.1271	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1273	15 41		ora $41,x			ora 	esType+1,x
.1275	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1276	30 1a		bmi $1292			bmi 	_PCError
.1278	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.127a	f0 0b		beq $1287			beq 	_PCIsInteger 				; if not two integers
.127c	20 01 11	jsr $1101			jsr 	BPMakeBothFloat 			; make both float
.127f	8a		txa				txa
.1280	a2 06		ldx #$06		ldx	#6
.1282	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1285	aa		tax				tax
.1286	60		rts				rts
.1287					_PCIsInteger:
.1287	4c cb 15	jmp $15cb			jmp 	MInt32Compare
.128a					_PCIsString:
.128a	8a		txa				txa
.128b	a2 02		ldx #$02		ldx	#2
.128d	20 ed 18	jsr $18ed		jsr	stringHandler
.1290	aa		tax				tax
.1291	60		rts				rts
.1292					_PCError:
.1292	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.1294	20 e0 10	jsr $10e0			jsr 	ErrorHandler
.1297					CompareEquals:
.1297	20 6a 12	jsr $126a			jsr 	PerformComparison
.129a	c9 00		cmp #$00			cmp 	#$00
.129c	f0 35		beq $12d3			beq  	CompareTrue
.129e	4c d6 12	jmp $12d6			jmp 	CompareFalse
.12a1					CompareLess:
.12a1	20 6a 12	jsr $126a			jsr 	PerformComparison
.12a4	c9 ff		cmp #$ff			cmp 	#$FF
.12a6	f0 2b		beq $12d3			beq  	CompareTrue
.12a8	4c d6 12	jmp $12d6			jmp 	CompareFalse
.12ab					CompareGreater:
.12ab	20 6a 12	jsr $126a			jsr 	PerformComparison
.12ae	c9 01		cmp #$01			cmp 	#$01
.12b0	f0 21		beq $12d3			beq  	CompareTrue
.12b2	4c d6 12	jmp $12d6			jmp 	CompareFalse
.12b5					CompareNotEquals:
.12b5	20 6a 12	jsr $126a			jsr 	PerformComparison
.12b8	c9 00		cmp #$00			cmp 	#$00
.12ba	d0 17		bne $12d3			bne  	CompareTrue
.12bc	4c d6 12	jmp $12d6			jmp 	CompareFalse
.12bf					CompareGreaterEq:
.12bf	20 6a 12	jsr $126a			jsr 	PerformComparison
.12c2	c9 ff		cmp #$ff			cmp 	#$FF
.12c4	d0 0d		bne $12d3			bne  	CompareTrue
.12c6	4c d6 12	jmp $12d6			jmp 	CompareFalse
.12c9					CompareLessEq:
.12c9	20 6a 12	jsr $126a			jsr 	PerformComparison
.12cc	c9 01		cmp #$01			cmp 	#$01
.12ce	d0 03		bne $12d3			bne  	CompareTrue
.12d0	4c d6 12	jmp $12d6			jmp 	CompareFalse
.12d3					CompareTrue:
.12d3	4c fc 17	jmp $17fc			jmp 	MInt32True
.12d6					CompareFalse:
.12d6	4c 00 18	jmp $1800			jmp 	MInt32False

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/dereference.asm

.12d9					DereferenceTwo:
.12d9	e8		inx				inx
.12da	20 de 12	jsr $12de			jsr 	DereferenceOne
.12dd	ca		dex				dex
.12de					DereferenceOne:
.12de	b5 40		lda $40,x			lda 	esType,x
.12e0	10 3d		bpl $131f			bpl 	_DRNotReference 			; is it a reference ?
.12e2	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.12e3	b0 3b		bcs $1320			bcs 	_DRFloatDeReference
.12e5	98		tya				tya
.12e6	48		pha				pha
.12e7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.12e9	85 04		sta $04				sta 	temp0
.12eb	b5 50		lda $50,x			lda 	esInt1,x
.12ed	85 05		sta $05				sta 	temp0+1
.12ef	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.12f1	95 50		sta $50,x			sta 	esInt1,x
.12f3	95 58		sta $58,x			sta 	esInt2,x
.12f5	95 60		sta $60,x			sta 	esInt3,x
.12f7	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.12f9	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.12fb	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.12fc	30 0d		bmi $130b			bmi 	_DeRefString 				; string, 2 bytes only
.12fe	d0 11		bne $1311			bne 	_DeRefByte 					; byte 1 byte only
.1300					_DeRefLong:
.1300	a0 03		ldy #$03			ldy 	#3
.1302	b1 04		lda ($04),y			lda 	(temp0),y
.1304	95 60		sta $60,x			sta 	esInt3,x
.1306	88		dey				dey
.1307	b1 04		lda ($04),y			lda 	(temp0),y
.1309	95 58		sta $58,x			sta 	esInt2,x
.130b					_DeRefString:
.130b	a0 01		ldy #$01			ldy 	#1
.130d	b1 04		lda ($04),y			lda 	(temp0),y
.130f	95 50		sta $50,x			sta 	esInt1,x
.1311					_DeRefByte:
.1311	a0 00		ldy #$00			ldy 	#0
.1313	b1 04		lda ($04),y			lda 	(temp0),y
.1315	95 48		sta $48,x			sta 	esInt0,x
.1317	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1319	29 40		and #$40			and 	#$40
.131b	95 40		sta $40,x			sta 	esType,x
.131d	68		pla				pla
.131e	a8		tay				tay
.131f					_DRNotReference
.131f	60		rts				rts
.1320					_DRFloatDereference:
.1320	8a		txa				txa
.1321	a2 00		ldx #$00		ldx	#0
.1323	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1326	aa		tax				tax
.1327	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1329	95 40		sta $40,x			sta 	esType,x
.132b	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/evaluate.asm

.132c					EvaluateLevel:
.132c	48		pha				pha 								; save precedence level.
.132d	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.132f	95 48		sta $48,x			sta 	esInt0,x
.1331	95 50		sta $50,x			sta 	esInt1,x
.1333	95 58		sta $58,x			sta 	esInt2,x
.1335	95 60		sta $60,x			sta 	esInt3,x
.1337	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1339	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.133b	30 21		bmi $135e			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.133d	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.133e	30 0a		bmi $134a			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1340	8a		txa				txa 								; stack level in X
.1341	a2 00		ldx #$00		ldx	#0
.1343	20 17 19	jsr $1917		jsr	variableHandler
.1346	aa		tax				tax
.1347	4c 87 13	jmp $1387			jmp		_ELHasTerm
.134a					_ELIsConstant:
.134a	4a		lsr a				lsr 	a 							; get the value back
.134b	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.134d	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.134f					_ELCheckNext:
.134f	c8		iny				iny 								; look at next
.1350	b1 02		lda ($02),y			lda 	(codePtr),y
.1352	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1354	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1356	b0 2f		bcs $1387			bcs 	_ELHasTerm 					; done getting the constant.
.1358	20 83 14	jsr $1483			jsr 	ELShiftByteIn 				; shift byte into position.
.135b	4c 4f 13	jmp $134f			jmp 	_ELCheckNext
.135e					_ELIsToken:
.135e	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1360	f0 0f		beq $1371			beq 	_ELIsString
.1362	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1364	d0 5f		bne $13c5			bne 	_ELCheckUnary
.1366	8a		txa				txa 								; put X into A
.1367	c8		iny				iny 								; skip over the float marker
.1368	a2 18		ldx #$18		ldx	#24
.136a	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.136d	aa		tax				tax 								; restore X
.136e	4c 87 13	jmp $1387			jmp 	_ELHasTerm
.1371					_ELIsString:
.1371	98		tya				tya 								; address of string is codePtr+y+1
.1372	38		sec				sec
.1373	65 02		adc $02				adc 	codePtr
.1375	95 48		sta $48,x			sta 	esInt0,x
.1377	a5 03		lda $03				lda 	codePtr+1
.1379	69 00		adc #$00			adc 	#0
.137b	95 50		sta $50,x			sta 	esInt1,x
.137d	a9 40		lda #$40			lda 	#$40 						; set type to string value
.137f	95 40		sta $40,x			sta 	esType,x
.1381	c8		iny				iny 								; skip over string.
.1382	98		tya				tya
.1383	38		sec				sec									; +1 for the length itself.
.1384	71 02		adc ($02),y			adc 	(codePtr),y
.1386	a8		tay				tay 								; and fall through to term loop code.
.1387					_ELHasTerm:
.1387	b1 02		lda ($02),y			lda 	(codePtr),y
.1389	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.138b	90 04		bcc $1391			bcc 	_ELPopExit
.138d	c9 9d		cmp #$9d			cmp 	#TOK_STRUCTST
.138f	90 02		bcc $1393			bcc 	_ELHasBinaryTerm
.1391					_ELPopExit:
.1391	68		pla				pla
.1392					_ELExit:
.1392	60		rts				rts
.1393					_ELHasBinaryTerm:
.1393	84 0a		sty $0a				sty 	tempShort 					; save position
.1395	a8		tay				tay 								; use token as an index and get the precedence.
.1396	b9 2b 14	lda $142b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1399	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.139b	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.139d	68		pla				pla 								; restore current level.
.139e	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.13a0	b0 f0		bcs $1392			bcs 	_ELExit
.13a2	48		pha				pha 								; save current level back on the stack.
.13a3	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.13a5	48		pha				pha
.13a6	c8		iny				iny
.13a7	e8		inx				inx 								; calculate the RHS at the operator precedence.
.13a8	a5 0a		lda $0a				lda 	tempShort
.13aa	20 2c 13	jsr $132c			jsr 	EvaluateLevel
.13ad	ca		dex				dex
.13ae	68		pla				pla 								; get the operator back out.
.13af					_ELExecuteA:
.13af	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.13b1	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.13b2	aa		tax				tax
.13b3	bd 20 10	lda $1020,x			lda 	Group0Vectors,x
.13b6	85 04		sta $04				sta 	temp0
.13b8	bd 21 10	lda $1021,x			lda 	Group0Vectors+1,x
.13bb	85 05		sta $05				sta 	temp0+1
.13bd	a6 0a		ldx $0a				ldx 	tempShort
.13bf	20 33 14	jsr $1433			jsr 	_ELCallTemp0
.13c2	4c 87 13	jmp $1387			jmp 	_ELHasTerm 					; and loop back round.
.13c5					_ELCheckUnary:
.13c5	c8		iny				iny 								; skip over token.
.13c6	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.13c8	f0 21		beq $13eb			beq 	_ELMinus
.13ca	c9 bf		cmp #$bf			cmp 	#TKW_WAVY 					; is it ~ tern
.13cc	f0 34		beq $1402			beq 	_ELComplement
.13ce	c9 be		cmp #$be			cmp 	#TKW_AT 					; is it @ term
.13d0	f0 39		beq $140b			beq 	_ELReference
.13d2	c9 c0		cmp #$c0			cmp 	#TKW_AMP 					; is it & term
.13d4	f0 45		beq $141b			beq 	_ELAmpersand
.13d6	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.13d8	f0 47		beq $1421			beq 	_ELIndirect
.13da	c9 98		cmp #$98			cmp 	#TKW_QMARK
.13dc	f0 43		beq $1421			beq 	_ELIndirect
.13de	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.13e0	90 04		bcc $13e6			bcc 	_ELUSyntax
.13e2	c9 be		cmp #$be			cmp 	#TOK_TOKENS
.13e4	90 c9		bcc $13af			bcc 	_ELExecuteA 				; if so do that token.
.13e6					_ELUSyntax:
.13e6	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.13e8	20 e0 10	jsr $10e0			jsr 	ErrorHandler
.13eb					_ELMinus:
.13eb	20 48 14	jsr $1448			jsr 	EvaluateNumericTerm 		; get a number to negate.
.13ee	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.13f0	f0 0a		beq $13fc			beq 	_ELMinusInteger
.13f2	8a		txa				txa
.13f3	a2 0e		ldx #$0e		ldx	#14
.13f5	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.13f8	aa		tax				tax
.13f9	4c 87 13	jmp $1387			jmp 	_ELHasTerm
.13fc					_ELMinusInteger:
.13fc	20 ba 17	jsr $17ba			jsr 	MInt32Negate 				; do int negate
.13ff	4c 87 13	jmp $1387			jmp 	_ELHasTerm
.1402					_ELComplement:
.1402	20 51 14	jsr $1451			jsr 	EvaluateIntegerTerm
.1405	20 d4 17	jsr $17d4			jsr 	MInt32Not
.1408	4c 87 13	jmp $1387			jmp 	_ELHasTerm
.140b					_ELReference:
.140b	a9 0f		lda #$0f			lda 	#15
.140d	20 2c 13	jsr $132c			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1410	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1412	10 45		bpl $1459			bpl 	ENTType
.1414	a9 00		lda #$00			lda 	#0 							; make it an integer
.1416	95 40		sta $40,x			sta 	esType,x
.1418	4c 87 13	jmp $1387			jmp 	_ELHasTerm
.141b					_ELAmpersand:
.141b	20 51 14	jsr $1451			jsr 	EvaluateIntegerTerm
.141e	4c 87 13	jmp $1387			jmp 	_ELHasTerm
.1421					_ELIndirect:
.1421	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1422	20 51 14	jsr $1451			jsr 	EvaluateIntegerTerm 		; integer address
.1425	68		pla				pla
.1426	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1428	f0 02		beq $142c			beq 	_ELHaveModifier
.142a	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.142c					_ELHaveModifier:
.142c	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.142e	95 40		sta $40,x			sta 	esType,x
.1430	4c 87 13	jmp $1387			jmp 	_ELHasTerm
.1433					_ELCallTemp0:
.1433	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1436					UnaryParenthesis:
.1436	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1438	20 2c 13	jsr $132c			jsr 	EvaluateLevel
.143b	20 68 18	jsr $1868			jsr 	CheckRightParen 			; check for )
.143e	60		rts				rts
.143f					EvaluateTerm:
.143f	a9 0f		lda #$0f			lda 	#15
.1441	20 2c 13	jsr $132c			jsr 	EvaluateLevel
.1444	20 de 12	jsr $12de			jsr 	DereferenceOne
.1447	60		rts				rts
.1448					EvaluateNumericTerm:
.1448	20 3f 14	jsr $143f			jsr 	EvaluateTerm
.144b	b5 40		lda $40,x			lda 	esType,x
.144d	0a		asl a				asl 	a 							; see if it's a string.
.144e	30 09		bmi $1459			bmi 	ENTType
.1450	60		rts				rts
.1451					EvaluateIntegerTerm:
.1451	20 3f 14	jsr $143f			jsr 	EvaluateTerm
.1454	b5 40		lda $40,x			lda 	esType,x
.1456	d0 01		bne $1459			bne 	ENTType
.1458	60		rts				rts
.1459					ENTType:
.1459	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.145b	20 e0 10	jsr $10e0			jsr 	ErrorHandler
.145e					Evaluate:
.145e	a9 00		lda #$00			lda 	#0
.1460	20 2c 13	jsr $132c			jsr 	EvaluateLevel
.1463	20 de 12	jsr $12de			jsr 	DereferenceOne
.1466	60		rts				rts
.1467					EvaluateNumeric:
.1467	20 5e 14	jsr $145e			jsr 	Evaluate
.146a	b5 40		lda $40,x			lda 	esType,x
.146c	0a		asl a				asl 	a 							; see if it's a string.
.146d	30 ea		bmi $1459			bmi 	ENTType
.146f	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1470	4a		lsr a				lsr 	a
.1471	60		rts				rts
.1472					EvaluateString:
.1472	20 5e 14	jsr $145e			jsr 	Evaluate
.1475	b5 40		lda $40,x			lda 	esType,x
.1477	0a		asl a				asl 	a 							; see if it's a string.
.1478	10 df		bpl $1459			bpl 	ENTType
.147a	60		rts				rts
.147b					EvaluateInteger:
.147b	20 5e 14	jsr $145e			jsr 	Evaluate
.147e	b5 40		lda $40,x			lda 	esType,x
.1480	d0 d7		bne $1459			bne 	ENTType
.1482	60		rts				rts
.1483					ELShiftByteIn:
.1483	48		pha				pha 								; save bits to shift in.
.1484	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1486	48		pha				pha
.1487	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1489	95 60		sta $60,x			sta 	esInt3,x
.148b	b5 50		lda $50,x			lda 	esInt1,x
.148d	95 58		sta $58,x			sta 	esInt2,x
.148f	b5 48		lda $48,x			lda 	esInt0,x
.1491	95 50		sta $50,x			sta 	esInt1,x
.1493	a9 00		lda #$00			lda 	#0
.1495	95 48		sta $48,x			sta 	esInt0,x
.1497	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1498	29 03		and #$03			and 	#3 							; only want lower 2 bits
.149a	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.149c					_ELShiftLoop:
.149c	4a		lsr a				lsr 	a
.149d	76 60		ror $60,x			ror 	esInt3,x
.149f	76 58		ror $58,x			ror 	esInt2,x
.14a1	76 50		ror $50,x			ror 	esInt1,x
.14a3	76 48		ror $48,x			ror 	esInt0,x
.14a5	c9 01		cmp #$01			cmp 	#1
.14a7	d0 f3		bne $149c			bne 	_ELShiftLoop
.14a9	68		pla				pla 								; get original 6 bit value and OR in.
.14aa	29 3f		and #$3f			and 	#$3F
.14ac	15 48		ora $48,x			ora 	esInt0,x
.14ae	95 48		sta $48,x			sta 	esInt0,x
.14b0	60		rts				rts
.14b1					ELBinaryOperatorInfo:

;******  Processing file: ..\source\main/evaluate/../../generated/binarystructinfo.inc

>14b1	01					.byte	$01			; $86 and
>14b2	01					.byte	$01			; $87 or
>14b3	01					.byte	$01			; $88 xor
>14b4	02					.byte	$02			; $89 >=
>14b5	02					.byte	$02			; $8a <=
>14b6	02					.byte	$02			; $8b >
>14b7	02					.byte	$02			; $8c <
>14b8	02					.byte	$02			; $8d =
>14b9	02					.byte	$02			; $8e <>
>14ba	03					.byte	$03			; $8f +
>14bb	03					.byte	$03			; $90 -
>14bc	04					.byte	$04			; $91 >>
>14bd	04					.byte	$04			; $92 <<
>14be	04					.byte	$04			; $93 *
>14bf	04					.byte	$04			; $94 /
>14c0	04					.byte	$04			; $95 mod
>14c1	05					.byte	$05			; $96 ^
>14c2	06					.byte	$06			; $97 !
>14c3	06					.byte	$06			; $98 ?
>14c4	82					.byte	$82			; $99 repeat
>14c5	82					.byte	$82			; $9a while
>14c6	82					.byte	$82			; $9b for
>14c7	82					.byte	$82			; $9c if
>14c8	80					.byte	$80			; $9d until
>14c9	80					.byte	$80			; $9e wend
>14ca	80					.byte	$80			; $9f next
>14cb	80					.byte	$80			; $a0 then
>14cc	80					.byte	$80			; $a1 endif

;******  Return to file: ..\source\main/evaluate/evaluate.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/unary.asm

.14cd					UnaryLen:
.14cd	20 db 14	jsr $14db			jsr 	ULStart
.14d0					ULFinish:
.14d0	b1 04		lda ($04),y			lda 	(temp0),y
.14d2	a4 0a		ldy $0a				ldy 	tempShort
.14d4	20 0f 18	jsr $180f			jsr 	MInt32Set8Bit
.14d7	20 68 18	jsr $1868			jsr 	CheckRightParen
.14da	60		rts				rts
.14db	20 72 14	jsr $1472	ULStart:jsr 	EvaluateString
.14de	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.14e0	85 04		sta $04				sta 	temp0
.14e2	b5 50		lda $50,x			lda 	esInt1,x
.14e4	85 05		sta $05				sta 	temp0+1
.14e6	84 0a		sty $0a				sty 	tempShort 					; get length
.14e8	a0 00		ldy #$00			ldy 	#0
.14ea	60		rts				rts
.14eb					UnaryAsc:
.14eb	20 db 14	jsr $14db			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.14ee	b1 04		lda ($04),y			lda 	(temp0),y
.14f0	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.14f1	c9 00		cmp #$00			cmp 	#0
.14f3	d0 db		bne $14d0			bne 	ULFinish
.14f5	a2 05		ldx #$05			ldx 	#ErrorID_BadValue
.14f7	20 e0 10	jsr $10e0			jsr 	ErrorHandler
.14fa					UnaryAbs:
.14fa	20 67 14	jsr $1467			jsr 	EvaluateNumeric
.14fd	b0 07		bcs $1506			bcs 	_UAFloat
.14ff	20 b5 17	jsr $17b5			jsr 	MInt32Absolute
.1502	20 68 18	jsr $1868			jsr 	CheckRightParen
.1505	60		rts				rts
.1506					_UAFloat:
.1506	8a		txa				txa
.1507	a2 02		ldx #$02		ldx	#2
.1509	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.150c	aa		tax				tax
.150d	20 68 18	jsr $1868			jsr 	CheckRightParen
.1510	60		rts				rts
.1511					UnarySgn:
.1511	20 67 14	jsr $1467			jsr 	EvaluateNumeric
.1514	b0 07		bcs $151d			bcs 	_USFloat
.1516	20 ed 17	jsr $17ed			jsr 	MInt32Sign
.1519	20 68 18	jsr $1868			jsr 	CheckRightParen
.151c	60		rts				rts
.151d					_USFloat:
.151d	8a		txa				txa
.151e	a2 10		ldx #$10		ldx	#16
.1520	20 c4 18	jsr $18c4		jsr	floatingpointHandler
.1523	aa		tax				tax
.1524	20 68 18	jsr $1868			jsr 	CheckRightParen
.1527	60		rts				rts
.1528					UnaryPeek:
.1528	20 54 15	jsr $1554			jsr 	PDLCode
.152b	4c 48 15	jmp $1548			jmp 	PDLByte0
.152e					UnaryDeek:
.152e	20 54 15	jsr $1554			jsr 	PDLCode
.1531	4c 42 15	jmp $1542			jmp 	PDLByte1
.1534					UnaryLeek:
.1534	20 54 15	jsr $1554			jsr 	PDLCode
.1537	a0 03		ldy #$03			ldy 	#3
.1539	b1 04		lda ($04),y			lda 	(temp0),y
.153b	95 60		sta $60,x			sta 	esInt3,x
.153d	88		dey				dey
.153e	b1 04		lda ($04),y			lda 	(temp0),y
.1540	95 58		sta $58,x			sta 	esInt2,x
.1542					PDLByte1:
.1542	a0 01		ldy #$01			ldy 	#1
.1544	b1 04		lda ($04),y			lda 	(temp0),y
.1546	95 50		sta $50,x			sta 	esInt1,x
.1548					PDLByte0:
.1548	a0 00		ldy #$00			ldy 	#0
.154a	b1 04		lda ($04),y			lda 	(temp0),y
.154c	95 48		sta $48,x			sta 	esInt0,x
.154e	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1550	20 68 18	jsr $1868			jsr 	CheckRightParen 			; check right and return
.1553	60		rts				rts
.1554					PDLCode:
.1554	20 7b 14	jsr $147b			jsr 	EvaluateInteger
.1557	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1559	85 04		sta $04				sta 	temp0
.155b	b5 50		lda $50,x			lda 	esInt1,x
.155d	85 05		sta $05				sta 	temp0+1
.155f	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1561	95 50		sta $50,x			sta 	esInt1,x
.1563	95 58		sta $58,x			sta 	esInt2,x
.1565	95 60		sta $60,x			sta 	esInt3,x
.1567	84 0a		sty $0a				sty 	tempShort 					; save Y
.1569	60		rts				rts
.156a					Unary_Random:
.156a	20 30 18	jsr $1830			jsr 	MInt32Random 				; generate random number.
.156d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.156f	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1571	f0 09		beq $157c			beq 	_URExit
>1573	db						.byte 	$DB
.1574	e8		inx				inx 								; load range 0..r-1 into +1
.1575	20 7b 14	jsr $147b			jsr 	EvaluateInteger
.1578	ca		dex				dex
.1579	20 7e 16	jsr $167e			jsr 	MInt32Modulus 				; calculate random % modulus
.157c					_URExit:
.157c	20 68 18	jsr $1868			jsr 	CheckRightParen 			; check right and return
.157f	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32binary.asm

.1580					MInt32And:
.1580	b5 48		lda $48,x			lda 	esInt0,x
.1582	35 49		and $49,x			and 	esInt0+1,x
.1584	95 48		sta $48,x			sta 	esInt0,x
.1586	b5 50		lda $50,x			lda 	esInt1,x
.1588	35 51		and $51,x			and 	esInt1+1,x
.158a	95 50		sta $50,x			sta 	esInt1,x
.158c	b5 58		lda $58,x			lda 	esInt2,x
.158e	35 59		and $59,x			and 	esInt2+1,x
.1590	95 58		sta $58,x			sta 	esInt2,x
.1592	b5 60		lda $60,x			lda 	esInt3,x
.1594	35 61		and $61,x			and 	esInt3+1,x
.1596	95 60		sta $60,x			sta 	esInt3,x
.1598	60		rts				rts
.1599					MInt32Or:
.1599	b5 48		lda $48,x			lda 	esInt0,x
.159b	15 49		ora $49,x			ora 	esInt0+1,x
.159d	95 48		sta $48,x			sta 	esInt0,x
.159f	b5 50		lda $50,x			lda 	esInt1,x
.15a1	15 51		ora $51,x			ora 	esInt1+1,x
.15a3	95 50		sta $50,x			sta 	esInt1,x
.15a5	b5 58		lda $58,x			lda 	esInt2,x
.15a7	15 59		ora $59,x			ora 	esInt2+1,x
.15a9	95 58		sta $58,x			sta 	esInt2,x
.15ab	b5 60		lda $60,x			lda 	esInt3,x
.15ad	15 61		ora $61,x			ora 	esInt3+1,x
.15af	95 60		sta $60,x			sta 	esInt3,x
.15b1	60		rts				rts
.15b2					MInt32Xor:
.15b2	b5 48		lda $48,x			lda 	esInt0,x
.15b4	55 49		eor $49,x			eor 	esInt0+1,x
.15b6	95 48		sta $48,x			sta 	esInt0,x
.15b8	b5 50		lda $50,x			lda 	esInt1,x
.15ba	55 51		eor $51,x			eor 	esInt1+1,x
.15bc	95 50		sta $50,x			sta 	esInt1,x
.15be	b5 58		lda $58,x			lda 	esInt2,x
.15c0	55 59		eor $59,x			eor 	esInt2+1,x
.15c2	95 58		sta $58,x			sta 	esInt2,x
.15c4	b5 60		lda $60,x			lda 	esInt3,x
.15c6	55 61		eor $61,x			eor 	esInt3+1,x
.15c8	95 60		sta $60,x			sta 	esInt3,x
.15ca	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32compare.asm

.15cb					MInt32Compare:
.15cb	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.15cd	d5 49		cmp $49,x			cmp 	esInt0+1,x
.15cf	d0 13		bne $15e4			bne 	MInt32Compare2
.15d1	b5 50		lda $50,x			lda 	esInt1,x
.15d3	d5 51		cmp $51,x			cmp 	esInt1+1,x
.15d5	d0 0d		bne $15e4			bne 	MInt32Compare2
.15d7	b5 58		lda $58,x			lda 	esInt2,x
.15d9	d5 59		cmp $59,x			cmp 	esInt2+1,x
.15db	d0 07		bne $15e4			bne 	MInt32Compare2
.15dd	b5 60		lda $60,x			lda 	esInt3,x
.15df	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.15e1	d0 01		bne $15e4			bne 	MInt32Compare2
.15e3	60		rts				rts
.15e4					MInt32Compare2:
.15e4	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.15e6	d5 49		cmp $49,x			cmp 	esInt0+1,x
.15e8	b5 50		lda $50,x			lda		esInt1,x
.15ea	f5 51		sbc $51,x			sbc 	esInt1+1,x
.15ec	b5 58		lda $58,x			lda		esInt2,x
.15ee	f5 59		sbc $59,x			sbc 	esInt2+1,x
.15f0	b5 60		lda $60,x			lda		esInt3,x
.15f2	f5 61		sbc $61,x			sbc 	esInt3+1,x
.15f4	50 02		bvc $15f8			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.15f6	49 80		eor #$80			eor 	#$80
.15f8					_I32LNoOverflow
.15f8	30 03		bmi $15fd			bmi 	MInt32CLess					; if -ve then return $FF
.15fa	a9 01		lda #$01			lda 	#$01						; else return $01
.15fc	60		rts				rts
.15fd					MInt32CLess:
.15fd	a9 ff		lda #$ff			lda 	#$FF
.15ff	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32divide.asm

.1600					MInt32SDivide:
.1600	98		tya				tya  								; save Y, which is the count of negations
.1601	48		pha				pha
.1602	a0 00		ldy #$00			ldy 	#0 							; zero count
.1604	20 1c 16	jsr $161c			jsr 	_MInt32SRemSign 			; unsign TOS
.1607	e8		inx				inx 								; unsign TOS+1
.1608	20 1c 16	jsr $161c			jsr 	_MInt32SRemSign
.160b	ca		dex				dex
.160c	98		tya				tya 								; save sign count on stack
.160d	48		pha				pha
.160e	20 25 16	jsr $1625			jsr 	MInt32UDivide 				; unsigned division
.1611	68		pla				pla 								; get sign count back
.1612	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1614	f0 03		beq $1619			beq 	_I32SNoNeg
.1616	20 ba 17	jsr $17ba			jsr 	MInt32Negate
.1619					_I32SNoNeg:
.1619	68		pla				pla 								; restoe Y and exit
.161a	a8		tay				tay
.161b	60		rts				rts
.161c					_MInt32SRemSign:
.161c	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.161e	10 04		bpl $1624			bpl 	_MInt32SRSExit
.1620	c8		iny				iny 								; increment the sign count
.1621	20 ba 17	jsr $17ba			jsr 	MInt32Negate 				; negate the value.
.1624					_MInt32SRSExit:
.1624	60		rts				rts
.1625					MInt32UDivide:
.1625	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1627	15 51		ora $51,x			ora 	esInt1+1,x
.1629	15 52		ora $52,x			ora 	esInt1+2,x
.162b	15 53		ora $53,x			ora 	esInt1+3,x
.162d	f0 4a		beq $1679			beq 	_MInt32DZero
.162f	e8		inx				inx 								; clear A
.1630	e8		inx				inx
.1631	20 00 18	jsr $1800			jsr 	MInt32False
.1634	ca		dex				dex
.1635	ca		dex				dex
.1636	98		tya				tya 								; save Y on the stack
.1637	48		pha				pha
.1638	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.163a					_MInt32UDLoop:
.163a	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.163c	36 50		rol $50,x			rol 	esInt1,x
.163e	36 58		rol $58,x			rol 	esInt2,x
.1640	36 60		rol $60,x			rol 	esInt3,x
.1642	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1644	36 52		rol $52,x			rol 	esInt1+2,x
.1646	36 5a		rol $5a,x			rol 	esInt2+2,x
.1648	36 62		rol $62,x			rol 	esInt3+2,x
.164a	38		sec				sec 								; calculate A-M saving result on the stack
.164b	b5 4a		lda $4a,x			lda 	esInt0+2,x
.164d	f5 49		sbc $49,x			sbc 	esInt0+1,x
.164f	48		pha				pha
.1650	b5 52		lda $52,x			lda 	esInt1+2,x
.1652	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1654	48		pha				pha
.1655	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1657	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1659	48		pha				pha
.165a	b5 62		lda $62,x			lda 	esInt3+2,x
.165c	f5 61		sbc $61,x			sbc 	esInt3+1,x
.165e	90 10		bcc $1670			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1660	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1662	68		pla				pla
.1663	95 5a		sta $5a,x			sta 	esInt2+2,x
.1665	68		pla				pla
.1666	95 52		sta $52,x			sta 	esInt1+2,x
.1668	68		pla				pla
.1669	95 4a		sta $4a,x			sta 	esInt0+2,x
.166b	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.166d	4c 73 16	jmp $1673			jmp 	_MInt32Next 					; do the next iteration
.1670					_MInt32NoSubtract:
.1670	68		pla				pla
.1671	68		pla				pla
.1672	68		pla				pla
.1673					_MInt32Next:
.1673	88		dey				dey 								; do this 32 times.
.1674	d0 c4		bne $163a			bne 	_MInt32UDLoop
.1676	68		pla				pla 								; restore Y and exit
.1677	a8		tay				tay
.1678	60		rts				rts
.1679					_MInt32DZero:
.1679	a2 02		ldx #$02			ldx 	#ErrorID_DivZero
.167b	20 e0 10	jsr $10e0			jsr 	ErrorHandler
.167e					MInt32Modulus:
.167e	20 25 16	jsr $1625			jsr 	MInt32UDivide 				; do the division.
.1681	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1683	95 60		sta $60,x			sta 	esInt3,x
.1685	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1687	95 58		sta $58,x			sta 	esInt2,x
.1689	b5 52		lda $52,x			lda 	esInt1+2,x
.168b	95 50		sta $50,x			sta 	esInt1,x
.168d	b5 4a		lda $4a,x			lda 	esInt0+2,x
.168f	95 48		sta $48,x			sta 	esInt0,x
.1691	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32fromstr.asm

.1692					MInt32FromString:
.1692	85 0a		sta $0a				sta 	tempShort 					; save base
.1694	98		tya				tya
.1695	48		pha				pha
.1696	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1698	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.169a	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.169c	d0 01		bne $169f			bne 	_I32FSNotNegative
.169e	c8		iny				iny 								; if so consume it.
.169f					_I32FSNotNegative:
.169f	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.16a1	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.16a3	f0 02		beq $16a7			beq 	_I32FSNN2
.16a5	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.16a7					_I32FSNN2:
.16a7	48		pha				pha 								; save base + final sign on stack.
.16a8	20 00 18	jsr $1800			jsr 	MInt32False 					; zero the return value.
.16ab					I32FSMainLoop:
.16ab	68		pla				pla 								; get the base back into tempshort
.16ac	48		pha				pha
.16ad	29 7f		and #$7f			and 	#$7F
.16af	85 0a		sta $0a				sta 	tempShort
.16b1	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.16b3	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.16b5	90 02		bcc $16b9			bcc 	_I32FSNotLC
.16b7	e9 20		sbc #$20			sbc 	#32
.16b9					_I32FSNotLC:
.16b9	38		sec				sec 								; subtract 48 (ASCII "0")
.16ba	e9 30		sbc #$30			sbc 	#"0"
.16bc	90 26		bcc $16e4			bcc 	_I32FSDone 					; nothing more to do.
.16be	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.16c0	90 06		bcc $16c8			bcc 	_I32FSValidate
.16c2	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.16c4	90 1e		bcc $16e4			bcc 	_I32FSDone
.16c6	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.16c8					_I32FSValidate:
.16c8	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.16ca	b0 18		bcs $16e4			bcs 	_I32FSDone 					; sorry, too large for this base.
.16cc	48		pha				pha 								; save the new digit value.
.16cd	e8		inx				inx 								; put base into next slot.
.16ce	a5 0a		lda $0a				lda 	tempShort
.16d0	20 0f 18	jsr $180f			jsr 	MInt32Set8Bit
.16d3	ca		dex				dex
.16d4	20 26 17	jsr $1726			jsr 	MInt32Multiply 				; multiply current by the base
.16d7	e8		inx				inx
.16d8	68		pla				pla  								; put additive into next slot
.16d9	20 0f 18	jsr $180f			jsr 	MInt32Set8Bit
.16dc	ca		dex				dex
.16dd	20 f2 16	jsr $16f2			jsr 	MInt32Add 					; and add it
.16e0	c8		iny				iny 								; look at next character
.16e1	4c ab 16	jmp $16ab			jmp 	I32FSMainLoop 				; and go round again.
.16e4					_I32FSDone:
.16e4	68		pla				pla 								; get base/final sign back
.16e5	10 04		bpl $16eb			bpl 	_I32FSNN3
.16e7	88		dey				dey 								; one fewer character to allow for the - prefix.
.16e8	20 ba 17	jsr $17ba			jsr 	MInt32Negate 				; negate the result.
.16eb					_I32FSNN3:
.16eb	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.16ed	68		pla				pla
.16ee	a8		tay				tay
.16ef	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.16f1	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32math.asm

.16f2					MInt32Add:
.16f2	18		clc				clc
.16f3	b5 48		lda $48,x			lda 	esInt0,x
.16f5	75 49		adc $49,x			adc 	esInt0+1,x
.16f7	95 48		sta $48,x			sta 	esInt0,x
.16f9	b5 50		lda $50,x			lda 	esInt1,x
.16fb	75 51		adc $51,x			adc 	esInt1+1,x
.16fd	95 50		sta $50,x			sta 	esInt1,x
.16ff	b5 58		lda $58,x			lda 	esInt2,x
.1701	75 59		adc $59,x			adc 	esInt2+1,x
.1703	95 58		sta $58,x			sta 	esInt2,x
.1705	b5 60		lda $60,x			lda 	esInt3,x
.1707	75 61		adc $61,x			adc 	esInt3+1,x
.1709	95 60		sta $60,x			sta 	esInt3,x
.170b	60		rts				rts
.170c					MInt32Sub:
.170c	38		sec				sec
.170d	b5 48		lda $48,x			lda 	esInt0,x
.170f	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1711	95 48		sta $48,x			sta 	esInt0,x
.1713	b5 50		lda $50,x			lda 	esInt1,x
.1715	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1717	95 50		sta $50,x			sta 	esInt1,x
.1719	b5 58		lda $58,x			lda 	esInt2,x
.171b	f5 59		sbc $59,x			sbc 	esInt2+1,x
.171d	95 58		sta $58,x			sta 	esInt2,x
.171f	b5 60		lda $60,x			lda 	esInt3,x
.1721	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1723	95 60		sta $60,x			sta 	esInt3,x
.1725	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32multiply.asm

.1726					MInt32Multiply:
.1726	e8		inx				inx 								; copy 2nd -> 3rd
.1727	20 4c 17	jsr $174c			jsr 	MInt32CopyUp
.172a	ca		dex				dex
.172b	20 4c 17	jsr $174c			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.172e	20 00 18	jsr $1800			jsr 	MInt32False 					; zero 1st.
.1731					_I32Loop:
.1731	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1733	29 01		and #$01			and 	#1
.1735	f0 03		beq $173a			beq 	_I32NoAdd 					; if set
.1737	20 f2 16	jsr $16f2			jsr 	MInt32Add 					; add 2nd to 1st.
.173a					_I32NoAdd:
.173a	e8		inx				inx 								; shift 2nd left
.173b	20 15 18	jsr $1815			jsr 	MInt32ShiftLeft
.173e	e8		inx				inx  								; shift 3rd right
.173f	20 1e 18	jsr $181e			jsr 	MInt32ShiftRight
.1742	20 27 18	jsr $1827			jsr 	MInt32Zero 					; check if zero.
.1745	08		php				php 								; save status bits
.1746	ca		dex				dex 	 							; point back to 1st
.1747	ca		dex				dex
.1748	28		plp				plp 								; get status bits
.1749	d0 e6		bne $1731			bne 	_I32Loop 					; if non-zero keep going.
.174b	60		rts				rts
.174c					MInt32CopyUp:
.174c	b5 48		lda $48,x			lda 	esInt0,x
.174e	95 49		sta $49,x			sta 	esInt0+1,x
.1750	b5 50		lda $50,x			lda 	esInt1,x
.1752	95 51		sta $51,x			sta 	esInt1+1,x
.1754	b5 58		lda $58,x			lda 	esInt2,x
.1756	95 59		sta $59,x			sta 	esInt2+1,x
.1758	b5 60		lda $60,x			lda 	esInt3,x
.175a	95 61		sta $61,x			sta 	esInt3+1,x
.175c	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32tostr.asm

>0868					MCharCount:	.fill 	1						; count of converted characters
.175d					MInt32ToString:
.175d	48		pha				pha 								; save base
.175e	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1760	a9 00		lda #$00			lda 	#0
.1762	8d 68 08	sta $0868			sta 	MCharCount 					; clear character count.
.1765	98		tya				tya
.1766	48		pha				pha
.1767	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1769	10 10		bpl $177b			bpl 	_I32TSUnsigned
.176b	48		pha				pha 								; save base on stack.
.176c	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.176e	10 08		bpl $1778			bpl 	_I32TSNoFlip
.1770	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1772	20 a7 17	jsr $17a7			jsr 	MI32WriteCharacter
.1775	20 ba 17	jsr $17ba			jsr 	MInt32Negate 				; negate the value.
.1778					_I32TSNoFlip:
.1778	68		pla				pla 								; get the base back
.1779	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.177b					_I32TSUnsigned:
.177b	20 82 17	jsr $1782			jsr 	MI32DivideWrite 				; recursive code to output string.
.177e	68		pla				pla
.177f	a8		tay				tay
.1780	68		pla				pla
.1781	60		rts				rts
.1782					MI32DivideWrite:
.1782	48		pha				pha 								; save the divisor/base
.1783	e8		inx				inx 								; write in the dividing position.
.1784	20 0f 18	jsr $180f			jsr 	MInt32Set8Bit
.1787	ca		dex				dex
.1788	20 25 16	jsr $1625			jsr 	MInt32UDivide 				; divide number by base.
.178b	68		pla				pla 								; get the base into Y
.178c	a8		tay				tay
.178d	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.178f	48		pha				pha
.1790	20 27 18	jsr $1827			jsr 	MInt32Zero 					; is the result zero ?
.1793	f0 04		beq $1799			beq 	_I32NoRecurse 				; if so, don't recurse.
.1795	98		tya				tya 								; put base into A
.1796	20 82 17	jsr $1782			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1799					_I32NoRecurse:
.1799	68		pla				pla 								; get the remainder back
.179a	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.179c	90 02		bcc $17a0			bcc 	_I32NotHex
.179e	69 06		adc #$06			adc 	#7-1
.17a0					_I32NotHex:
.17a0	18		clc				clc 								; make it ASCII
.17a1	69 30		adc #$30			adc 	#48
.17a3	20 a7 17	jsr $17a7			jsr 	MI32WriteCharacter 			; write the character out
.17a6	60		rts				rts 								; and exit.
.17a7					MI32WriteCharacter:
.17a7	ac 68 08	ldy $0868			ldy 	MCharCount 					; get position
.17aa	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.17ac	c8		iny				iny
.17ad	a9 00		lda #$00			lda 	#0
.17af	91 04		sta ($04),y			sta 	(temp0),y
.17b1	ee 68 08	inc $0868			inc 	MCharCount 					; bump count
.17b4	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32unary.asm

>0869					MSeed32:	.fill 	4							; random number seed.
.17b5					MInt32Absolute:
.17b5	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.17b7	30 01		bmi $17ba			bmi 	MInt32Negate
.17b9	60		rts				rts
.17ba					MInt32Negate:
.17ba	38		sec				sec
.17bb	a9 00		lda #$00			lda 	#0
.17bd	f5 48		sbc $48,x			sbc 	esInt0,x
.17bf	95 48		sta $48,x			sta 	esInt0,x
.17c1	a9 00		lda #$00			lda 	#0
.17c3	f5 50		sbc $50,x			sbc 	esInt1,x
.17c5	95 50		sta $50,x			sta 	esInt1,x
.17c7	a9 00		lda #$00			lda 	#0
.17c9	f5 58		sbc $58,x			sbc 	esInt2,x
.17cb	95 58		sta $58,x			sta 	esInt2,x
.17cd	a9 00		lda #$00			lda 	#0
.17cf	f5 60		sbc $60,x			sbc 	esInt3,x
.17d1	95 60		sta $60,x			sta 	esInt3,x
.17d3	60		rts				rts
.17d4					MInt32Not:
.17d4	b5 48		lda $48,x			lda 	esInt0,x
.17d6	49 ff		eor #$ff			eor 	#$FF
.17d8	95 48		sta $48,x			sta 	esInt0,x
.17da	b5 50		lda $50,x			lda 	esInt1,x
.17dc	49 ff		eor #$ff			eor 	#$FF
.17de	95 50		sta $50,x			sta 	esInt1,x
.17e0	b5 58		lda $58,x			lda 	esInt2,x
.17e2	49 ff		eor #$ff			eor 	#$FF
.17e4	95 58		sta $58,x			sta 	esInt2,x
.17e6	b5 60		lda $60,x			lda 	esInt3,x
.17e8	49 ff		eor #$ff			eor 	#$FF
.17ea	95 60		sta $60,x			sta 	esInt3,x
.17ec	60		rts				rts
.17ed					MInt32Sign:
.17ed	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.17ef	30 0b		bmi $17fc			bmi 	MInt32True 					; if set return -1 (true)
.17f1	20 27 18	jsr $1827			jsr 	MInt32Zero 					; is it zero ?
.17f4	f0 0a		beq $1800			beq 	MInt32False 					; if zero return 0 (false)
.17f6	20 00 18	jsr $1800			jsr 	MInt32False 					; > 0 return 1
.17f9	f6 48		inc $48,x			inc 	esInt0,x
.17fb	60		rts				rts
.17fc					MInt32True:
.17fc	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.17fe	d0 02		bne $1802			bne 	MInt32WriteAll
.1800					MInt32False:
.1800	a9 00		lda #$00			lda 	#0
.1802					MInt32WriteAll:
.1802	95 48		sta $48,x			sta 	esInt0,x
.1804					MInt32Write123:
.1804	95 50		sta $50,x			sta 	esInt1,x
.1806	95 58		sta $58,x			sta 	esInt2,x
.1808	95 60		sta $60,x			sta 	esInt3,x
.180a	a9 00		lda #$00			lda 	#$00						; and make it an integer
.180c	95 40		sta $40,x			sta 	esType,x
.180e	60		rts				rts
.180f					MInt32Set8Bit:
.180f	95 48		sta $48,x			sta 	esInt0,x
.1811	a9 00		lda #$00			lda 	#0
.1813	f0 ef		beq $1804			beq		MInt32Write123
.1815					MInt32ShiftLeft:
.1815	16 48		asl $48,x			asl 	esInt0,x
.1817	36 50		rol $50,x			rol	 	esInt1,x
.1819	36 58		rol $58,x			rol	 	esInt2,x
.181b	36 60		rol $60,x			rol	 	esInt3,x
.181d	60		rts				rts
.181e					MInt32ShiftRight:
.181e	56 60		lsr $60,x			lsr 	esInt3,x
.1820	76 58		ror $58,x			ror 	esInt2,x
.1822	76 50		ror $50,x			ror 	esInt1,x
.1824	76 48		ror $48,x			ror 	esInt0,x
.1826	60		rts				rts
.1827					MInt32Zero:
.1827	b5 48		lda $48,x			lda 	esInt0,x
.1829	15 50		ora $50,x			ora 	esInt1,x
.182b	15 58		ora $58,x			ora 	esInt2,x
.182d	15 60		ora $60,x			ora 	esInt3,x
.182f	60		rts				rts
.1830					MInt32Random:
.1830	98		tya				tya
.1831	48		pha				pha
.1832	a0 07		ldy #$07			ldy 	#7
.1834	ad 69 08	lda $0869			lda 	MSeed32+0
.1837	d0 03		bne $183c			bne 	_Random1
.1839	a8		tay				tay
.183a	a9 aa		lda #$aa			lda		#$AA
.183c					_Random1:
.183c	0a		asl a				asl 	a
.183d	2e 6a 08	rol $086a			rol 	MSeed32+1
.1840	2e 6b 08	rol $086b			rol 	MSeed32+2
.1843	2e 6c 08	rol $086c			rol 	MSeed32+3
.1846	90 02		bcc $184a			bcc 	_Random2
.1848	49 c5		eor #$c5			eor 	#$C5
.184a					_Random2:
.184a	88		dey				dey
.184b	d0 ef		bne $183c			bne 	_Random1
.184d	8d 69 08	sta $0869			sta 	MSeed32+0
.1850	95 48		sta $48,x			sta 	esInt0,x
.1852	ad 6a 08	lda $086a			lda 	MSeed32+1
.1855	95 50		sta $50,x			sta 	esInt1,x
.1857	ad 6b 08	lda $086b			lda 	MSeed32+2
.185a	95 58		sta $58,x			sta 	esInt2,x
.185c	ad 6c 08	lda $086c			lda 	MSeed32+3
.185f	95 60		sta $60,x			sta 	esInt3,x
.1861	68		pla				pla
.1862	a8		tay				tay
.1863	a9 00		lda #$00			lda 	#0
.1865	95 40		sta $40,x			sta 	esType,x
.1867	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/utility/check.asm

.1868					CheckRightParen:
.1868	b1 02		lda ($02),y			lda 	(codePtr),y
.186a	c8		iny				iny
.186b	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.186d	d0 01		bne $1870			bne 	_CRPError
.186f	60		rts				rts
.1870					_CRPError:
.1870	a2 06		ldx #$06			ldx 	#ErrorID_MissingRP
.1872	20 e0 10	jsr $10e0			jsr 	ErrorHandler
.1875					CheckComma:
.1875	b1 02		lda ($02),y			lda 	(codePtr),y
.1877	c8		iny				iny
.1878	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.187a	d0 01		bne $187d			bne 	_CCError
.187c	60		rts				rts
.187d					_CCError:
.187d	a2 07		ldx #$07			ldx 	#ErrorID_MissingComma
.187f	20 e0 10	jsr $10e0			jsr 	ErrorHandler

;******  Return to file: ..\source\main/main.asm

.1882					mainHandler:
.1882	7c 85 18	jmp ($1885,x)			jmp 	(mainVectors,x)
.1885					mainVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.asm

.1885					assemblerHandler:
.1885	7c 88 18	jmp ($1888,x)			jmp 	(assemblerVectors,x)
.1888					assemblerVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.asm

.1888					deviceHandler:
.1888	7c 8b 18	jmp ($188b,x)			jmp 	(deviceVectors,x)
.188b					deviceVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.asm


;******  Processing file: ..\source\error/errorhandler.asm

.10e0					ErrorHandler:
.10e0	a9 ee		lda #$ee			lda 	#$EE
.10e2	a8		tay				tay
>10e3	db						.byte 	$DB
.10e4	4c e4 10	jmp $10e4	_EHHalt:jmp 	_EHHalt

;******  Return to file: ..\source\error/error.asm


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/addsub.asm

.188b					FPAdd:
>188b	db						.byte 	$DB
.188c	4c 8b 18	jmp $188b			jmp 	FPAdd
.188f					FPSubtract:
>188f	db						.byte 	$DB
.1890	4c 8f 18	jmp $188f			jmp 	FPSubtract

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/compare.asm

.1893					FLTCompare:
>1893	db						.byte 	$DB
.1894	4c 93 18	jmp $1893			jmp 	FLTCompare

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/convert.asm

.1897					FPItoF:
>1897	db						.byte 	$DB
.1898	4c 97 18	jmp $1897			jmp 	FPItoF
.189b					FPFtoI:
>189b	db						.byte 	$DB
.189c	4c 9b 18	jmp $189b			jmp 	FPFtoI

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/importexport.asm

.189f					FPImport:
>189f	db						.byte 	$DB
.18a0	4c 9f 18	jmp $189f			jmp 	FPImport

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/loadstore.asm

.18a3					FPLoad:
>18a3	db						.byte 	$DB
.18a4	4c a3 18	jmp $18a3			jmp 	FPLoad

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/muldiv.asm

.18a7					FPMultiply:
>18a7	db						.byte 	$DB
.18a8	4c a7 18	jmp $18a7			jmp 	FPMultiply
.18ab					FPDivide:
>18ab	db						.byte 	$DB
.18ac	4c ab 18	jmp $18ab			jmp 	FPDivide
.18af					FPImpossible:
.18af	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.18b1	20 e0 10	jsr $10e0			jsr 	ErrorHandler
.18b4					FPPower:
>18b4	db						.byte 	$DB
.18b5	4c b4 18	jmp $18b4			jmp 	FPPower

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/unary.asm

.18b8					FNegate:
>18b8	db						.byte 	$DB
.18b9	4c b8 18	jmp $18b8			jmp 	FNegate
.18bc					FAbs:
>18bc	db						.byte 	$DB
.18bd	4c bc 18	jmp $18bc			jmp 	FAbs
.18c0					FSgn:
>18c0	db						.byte 	$DB
.18c1	4c c0 18	jmp $18c0			jmp 	FSgn

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm

.18c4					floatingpointHandler:
.18c4	7c c7 18	jmp ($18c7,x)			jmp 	(floatingpointVectors,x)
.18c7					floatingpointVectors:
>18c7	a3 18					.word FPLoad               ; index 0
>18c9	bc 18					.word FAbs                 ; index 2
>18cb	8b 18					.word FPAdd                ; index 4
>18cd	93 18					.word FLTCompare           ; index 6
>18cf	ab 18					.word FPDivide             ; index 8
>18d1	af 18					.word FPImpossible         ; index 10
>18d3	a7 18					.word FPMultiply           ; index 12
>18d5	b8 18					.word FNegate              ; index 14
>18d7	c0 18					.word FSgn                 ; index 16
>18d9	8f 18					.word FPSubtract           ; index 18
>18db	9b 18					.word FPFtoI               ; index 20
>18dd	b4 18					.word FPPower              ; index 22
>18df	9f 18					.word FPImport             ; index 24
>18e1	97 18					.word FPItoF               ; index 26

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.asm

.18e3					interactionHandler:
.18e3	7c e6 18	jmp ($18e6,x)			jmp 	(interactionVectors,x)
.18e6					interactionVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.asm


;******  Processing file: ..\source\string/compare.asm

.18e6					STRCompare:
>18e6	db						.byte 	$DB
.18e7	4c e6 18	jmp $18e6			jmp 	STRCompare

;******  Return to file: ..\source\string/string.asm


;******  Processing file: ..\source\string/concat.asm

.18ea					StringConcat:
>18ea	db						.byte 	$DB
.18eb	80 fd		bra $18ea			bra 	StringConcat

;******  Return to file: ..\source\string/string.asm

.18ed					stringHandler:
.18ed	7c f0 18	jmp ($18f0,x)			jmp 	(stringVectors,x)
.18f0					stringVectors:
>18f0	ea 18					.word StringConcat         ; index 0
>18f2	e6 18					.word STRCompare           ; index 2

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.asm

.18f4					tokeniserHandler:
.18f4	7c f7 18	jmp ($18f7,x)			jmp 	(tokeniserVectors,x)
.18f7					tokeniserVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.asm


;******  Processing file: ..\source\variable/access.asm

.18f7					AccessVariable:
.18f7	aa		tax				tax 								; stack in X
.18f8	c8		iny				iny
.18f9	b1 02		lda ($02),y			lda 	(codePtr),y
.18fb	88		dey				dey
.18fc	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.18fe	d0 15		bne $1915			bne 	_AVLong
.1900	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1902	38		sec				sec 	 							; make it 0-25
.1903	e9 01		sbc #$01			sbc 	#1
.1905	0a		asl a				asl 	a 							; x 4 is LSB of address
.1906	0a		asl a				asl 	a
.1907	95 48		sta $48,x			sta 	esInt0,x
.1909	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.190b	95 50		sta $50,x			sta 	esInt1,x
.190d	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.190f	95 40		sta $40,x			sta 	esType,x
.1911	c8		iny				iny 								; skip over the variable reference in the code.
.1912	c8		iny				iny
.1913	8a		txa				txa 								; stack in A to return.
.1914	60		rts				rts
.1915					_AVLong:
.1915	80 fe		bra $1915			bra 	_AVLong

;******  Return to file: ..\source\variable/variable.asm

.1917					variableHandler:
.1917	7c 1a 19	jmp ($191a,x)			jmp 	(variableVectors,x)
.191a					variableVectors:
>191a	f7 18					.word AccessVariable       ; index 0

;******  Return to file: ..\source\basic.asm


;******  End of listing
