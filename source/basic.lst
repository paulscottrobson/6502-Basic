
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ../source/basic.asm
; Mon Mar  1 10:23:02 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/basic.asm


;******  Processing file: ../source/main/01common.inc

=8					StackSize = 8
=512					retStackSize = 512
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/02macros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.
.0868					basePage:
>0868							.fill 	2
.086a					endMemory:
>086a							.fill 	2
.086c					highMemory:
>086c							.fill 	2
.086e					lowMemory:
>086e							.fill 	2
.0870					convertBuffer:
>0870							.fill 	35

;******  Processing file: ../source/main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ../source/main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/imath/intmacros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/errorhandler.inc


;******  Processing file: ../source/error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assertion failed
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma
=10					ErrorID_NoReference = 10 ; Missing reference
=11					ErrorID_LineNumber = 11 ; Line Number not found
=12					ErrorID_StrLen = 12 ; String too long.
=13					ErrorID_ReturnErr = 13 ; RETURN without GOSUB
=14					ErrorID_UntilErr = 14 ; UNTIL without REPEAT
=15					ErrorID_NextErr = 15 ; NEXT without FOR
=16					ErrorID_WendErr = 16 ; WEND without WHILE
=17					ErrorID_BadIndex = 17 ; Bad NEXT index
=18					ErrorID_Struct = 18 ; Structures nested wrong

;******  Return to file: ../source/error/errorhandler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/memory.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.asm


;******  Processing file: ../source/main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d 68 08	sta $0868			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d 69 08	sta $0869			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d 6a 08	sta $086a			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d 6b 08	sta $086b			sta 	1+(endMemory)
.1017	4c 18 12	jmp $1218			jmp 	Command_Run
.1ed4					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ../source/main/../generated/testcode.inc

>5000	08 0a 00 01 3a 8d 44 80			.byte 8,10,0,1,58,141,68,128,9,11,0,154,1,58,137,64,128,15,12,0,213,133,5,86,65,76,85,69,195,1,58,128,11,13,0,156,1,58,149,66,141,64,128,11,14,0,213,133,4,69,86,69,78,128,5,15,0,208,128,10,16,0,213,133,3,79,68,68,128,20,17,0,156,1,58,141,67,194,213,133,5,73,84,83,32,51,194,161,128,5,18,0,161,128,11,19,0,1,58,141,1,58,144,65,128,5,20,0,158,128,11,21,0,213,133,4,68,79,78,69,128,8,22,0,153,194,157,169,128,0
>5008	09 0b 00 9a 01 3a 89 40 80 0f 0c 00 d5 85 05 56
>5018	41 4c 55 45 c3 01 3a 80 0b 0d 00 9c 01 3a 95 42
>5028	8d 40 80 0b 0e 00 d5 85 04 45 56 45 4e 80 05 0f
>5038	00 d0 80 0a 10 00 d5 85 03 4f 44 44 80 14 11 00
>5048	9c 01 3a 8d 43 c2 d5 85 05 49 54 53 20 33 c2 a1
>5058	80 05 12 00 a1 80 0b 13 00 01 3a 8d 01 3a 90 41
>5068	80 05 14 00 9e 80 0b 15 00 d5 85 04 44 4f 4e 45
>5078	80 08 16 00 99 c2 9d a9 80 00

;******  Return to file: ../source/main/00start.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/assert.asm

.101a					Command_Assert:
.101a	20 6d 17	jsr $176d			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 67 1c	jsr $1c67			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.1025	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad 6a 08	lda $086a			lda 	endMemory					; set high memory = end of memory
.102d	8d 6c 08	sta $086c			sta 	highMemory
.1030	ad 6b 08	lda $086b			lda 	endMemory+1
.1033	8d 6d 08	sta $086d			sta 	highMemory+1
.1036	ad 68 08	lda $0868			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad 69 08	lda $0869			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d 6e 08	sta $086e			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d 6f 08	sta $086f			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 67 10	jsr $1067			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	20 cd 1c	jsr $1ccd			jsr 	RSReset 					; reset the return stack.
.1064	68		pla				pla
.1065	a8		tay				tay
.1066	60		rts				rts
.1067					AdvanceLowMemoryByte:
.1067	18		clc				clc
.1068	6d 6e 08	adc $086e			adc 	lowMemory
.106b	8d 6e 08	sta $086e			sta 	lowMemory
.106e	90 03		bcc $1073			bcc 	_ALMBExit
.1070	ee 6f 08	inc $086f			inc 	lowMemory+1
.1073					_ALMBExit:
.1073	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/for.asm

.1ed4					Command_FOR:
.1ed4	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.1ed6	a2 0b		ldx #$0b			ldx 	#11
.1ed8	20 db 1c	jsr $1cdb			jsr 	RSClaim
.1edb	20 b0 10	jsr $10b0			jsr 	CommandLET 					; do the same as LET.
.1ede	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.1ee0	c9 80		cmp #$80			cmp 	#$80
.1ee2	d0 4c		bne $1f30			bne 	_CFType
.1ee4	a9 c6		lda #$c6			lda 	#TKW_TO 					; check TO present.
.1ee6	20 a8 1c	jsr $1ca8			jsr 	CheckToken
.1ee9	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.1eeb	20 6f 17	jsr $176f			jsr 	EvaluateInteger				; get terminal value in stack 1
.1eee	98		tya				tya
.1eef	48		pha				pha
.1ef0	a0 04		ldy #$04			ldy 	#4
.1ef2	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.1ef4	91 78		sta ($78),y			sta 	(rsPointer),y
.1ef6	c8		iny				iny
.1ef7	a5 50		lda $50				lda		esInt1
.1ef9	91 78		sta ($78),y			sta 	(rsPointer),y
.1efb	c8		iny				iny
.1efc	a9 01		lda #$01			lda 	#1  						; the default step in 6
.1efe	91 78		sta ($78),y			sta 	(rsPointer),y
.1f00	c8		iny				iny
.1f01	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.1f03	91 78		sta ($78),y			sta 	(rsPointer),y
.1f05	c8		iny				iny
.1f06	a5 51		lda $51				lda		esInt1+1
.1f08	91 78		sta ($78),y			sta 	(rsPointer),y
.1f0a	c8		iny				iny
.1f0b	a5 59		lda $59				lda		esInt2+1
.1f0d	91 78		sta ($78),y			sta 	(rsPointer),y
.1f0f	c8		iny				iny
.1f10	a5 61		lda $61				lda		esInt3+1
.1f12	91 78		sta ($78),y			sta 	(rsPointer),y
.1f14	68		pla				pla
.1f15	a8		tay				tay
.1f16	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.1f18	c9 c7		cmp #$c7			cmp 	#TKW_STEP
.1f1a	d0 0e		bne $1f2a			bne 	_CFDone
.1f1c	c8		iny				iny									; skip over step.
.1f1d	20 6f 17	jsr $176f			jsr 	EvaluateInteger 			; get step
.1f20	98		tya				tya
.1f21	48		pha				pha
.1f22	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.1f24	a0 06		ldy #$06			ldy 	#6
.1f26	91 78		sta ($78),y			sta 	(rsPointer),y
.1f28	68		pla				pla
.1f29	a8		tay				tay
.1f2a					_CFDone:
.1f2a	a9 01		lda #$01			lda 	#1
.1f2c	20 fe 1c	jsr $1cfe			jsr 	RSSavePosition 				; save position.
.1f2f	60		rts				rts
.1f30					_CFType:
.1f30	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1f32	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1f35					Command_NEXT:
.1f35	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1f37	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1f39	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.1f3b	f0 05		beq $1f42			beq 	_isok
.1f3d	a2 0f		ldx #$0f			ldx 	#ErrorID_nextErr
.1f3f	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1f42					_isok:
.1f42	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.1f44	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.1f46	b0 18		bcs $1f60			bcs 	_CNNoIndex
.1f48	a2 00		ldx #$00			ldx 	#0 							; start on stack
.1f4a	20 9c 17	jsr $179c			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.1f4d	98		tya				tya
.1f4e	48		pha				pha
.1f4f	a0 04		ldy #$04			ldy 	#4 							; check same variable
.1f51	b1 78		lda ($78),y			lda 	(rsPointer),y
.1f53	d5 48		cmp $48,x			cmp 	esInt0,x
.1f55	d0 76		bne $1fcd			bne 	_CNBadIndex
.1f57	c8		iny				iny
.1f58	b1 78		lda ($78),y			lda 	(rsPointer),y
.1f5a	d5 50		cmp $50,x			cmp 	esInt1,x
.1f5c	d0 6f		bne $1fcd			bne 	_CNBadIndex
.1f5e	68		pla				pla
.1f5f	a8		tay				tay
.1f60					_CNNoIndex:
.1f60	98		tya				tya
.1f61	48		pha				pha
.1f62	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.1f64	b1 78		lda ($78),y			lda 	(rsPointer),y
.1f66	85 04		sta $04				sta 	temp0
.1f68	c8		iny				iny
.1f69	b1 78		lda ($78),y			lda 	(rsPointer),y
.1f6b	85 05		sta $05				sta 	temp0+1
.1f6d	c8		iny				iny
.1f6e	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.1f70	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.1f72	85 09		sta $09				sta 	temp2+1 					; save for later.
.1f74	10 01		bpl $1f77			bpl 	_CNSignX
.1f76	ca		dex				dex  								; X = $FF
.1f77					_CNSignX:
.1f77	18		clc				clc 								; add to the LSB
.1f78	a0 00		ldy #$00			ldy 	#0
.1f7a	71 04		adc ($04),y			adc 	(temp0),y
.1f7c	91 04		sta ($04),y			sta 	(temp0),y
.1f7e					_CNPropogate:
.1f7e	c8		iny				iny  								; add the sign extended in X to the rest.
.1f7f	8a		txa				txa
.1f80	71 04		adc ($04),y			adc 	(temp0),y
.1f82	91 04		sta ($04),y			sta 	(temp0),y
.1f84	c8		iny				iny
.1f85	8a		txa				txa
.1f86	71 04		adc ($04),y			adc 	(temp0),y
.1f88	91 04		sta ($04),y			sta 	(temp0),y
.1f8a	c8		iny				iny
.1f8b	8a		txa				txa
.1f8c	71 04		adc ($04),y			adc 	(temp0),y
.1f8e	91 04		sta ($04),y			sta 	(temp0),y
.1f90	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.1f91	a5 78		lda $78				lda 	rsPointer
.1f93	69 07		adc #$07			adc 	#7
.1f95	85 06		sta $06				sta 	temp1
.1f97	a9 00		lda #$00			lda 	#0
.1f99	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.1f9b	a8		tay				tay 								; and clear the Y register again.
.1f9c	65 79		adc $79				adc 	rsPointer+1
.1f9e	85 07		sta $07				sta 	temp1+1
.1fa0	38		sec				sec 								; calculate current - limit oring interim values.
.1fa1	20 d9 1f	jsr $1fd9			jsr 	_CNCompare
.1fa4	20 d9 1f	jsr $1fd9			jsr 	_CNCompare
.1fa7	20 d9 1f	jsr $1fd9			jsr 	_CNCompare
.1faa	20 d9 1f	jsr $1fd9			jsr 	_CNCompare
.1fad	50 02		bvc $1fb1			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.1faf	49 80		eor #$80			eor 	#$80
.1fb1					_CNNoOverflow:
.1fb1	a4 09		ldy $09				ldy 	temp2+1						; get step back
.1fb3	30 1d		bmi $1fd2			bmi 	_CNCheckDownto
.1fb5	c9 00		cmp #$00			cmp 	#0
.1fb7	30 0c		bmi $1fc5			bmi 	_CNLoopRound 				; loop round if < =
.1fb9	a5 08		lda $08				lda 	temp2
.1fbb	f0 08		beq $1fc5			beq 	_CNLoopRound
.1fbd					_CNLoopExit:
.1fbd	68		pla				pla
.1fbe	a8		tay				tay
.1fbf	a9 0b		lda #$0b			lda 	#11
.1fc1	20 f4 1c	jsr $1cf4			jsr 	RSFree
.1fc4	60		rts				rts
.1fc5					_CNLoopRound:
.1fc5	68		pla				pla
.1fc6	a8		tay				tay
.1fc7	a9 01		lda #$01			lda 	#1
.1fc9	20 11 1d	jsr $1d11			jsr 	RSLoadPosition				; go back to the loop top
.1fcc	60		rts				rts
.1fcd					_CNBadIndex:
.1fcd	a2 11		ldx #$11			ldx 	#ErrorID_BadIndex
.1fcf	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1fd2					_CNCheckDownto:
.1fd2	c9 00		cmp #$00			cmp 	#0
.1fd4	10 ef		bpl $1fc5			bpl 	_CNLoopRound
.1fd6	4c bd 1f	jmp $1fbd			jmp 	_CNLoopExit
.1fd9					_CNCompare:
.1fd9	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.1fdb	f1 06		sbc ($06),y			sbc 	(temp1),y
.1fdd	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.1fdf	85 08		sta $08				sta 	temp2
.1fe1	c8		iny				iny
.1fe2	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/if.asm

.1074					CommandIf:
.1074	20 6d 17	jsr $176d			jsr 	EvaluateRootInteger 		; if what ?
.1077	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1079	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.107b	f0 04		beq $1081			beq 	_IfSimple
.107d	c9 a0		cmp #$a0			cmp 	#TKW_THEN
.107f	d0 1b		bne $109c			bne 	_IfComplex
.1081					_IfSimple:
.1081	20 67 1c	jsr $1c67			jsr 	MInt32Zero					; check if TOS zero
.1084	f0 10		beq $1096			beq 	_IfEOL 						; go to next line.
.1086	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1088	c8		iny				iny
.1089	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.108b	f0 0c		beq $1099			beq 	_IfGoto 					; do the Goto code
.108d	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.108f	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1091	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1093	f0 04		beq $1099			beq 	_IfGoto
.1095	60		rts				rts 								; else continue on this line.
.1096					_IfEOL:
.1096	4c 6a 13	jmp $136a			jmp 	AdvanceNextLine 			; go to next line
.1099					_IfGoto:
.1099	4c a9 13	jmp $13a9			jmp 	CommandGoto
.109c					_IfComplex:
.109c	20 67 1c	jsr $1c67			jsr 	MInt32Zero 					; is it true ?
.109f	f0 01		beq $10a2			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a1	60		rts				rts 								; else continue.
.10a2					_IFSkip:
.10a2	a9 d0		lda #$d0			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a4	a2 a1		ldx #$a1			ldx 	#TKW_ENDIF
.10a6	4c 4c 20	jmp $204c			jmp		ScanForward
.10a9					Command_ELSE:
.10a9	a2 a1		ldx #$a1			ldx 	#TKW_ENDIF
.10ab	8a		txa				txa
.10ac	4c 4c 20	jmp $204c			jmp		ScanForward
.10af					Command_ENDIF:
.10af	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/let.asm

.10b0					CommandLet:
.10b0	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b2	20 9c 17	jsr $179c			jsr 	EvaluateReference
.10b5	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10b7	20 a8 1c	jsr $1ca8			jsr 	CheckToken
.10ba	e8		inx				inx 								; do RHS
.10bb	20 50 17	jsr $1750			jsr 	Evaluate 					; evaluate and derefernce
.10be	ca		dex				dex
.10bf	20 c3 10	jsr $10c3			jsr 	WriteValue 					; write it out
.10c2	60		rts				rts
.10c3					WriteValue:
.10c3	98		tya				tya
.10c4	48		pha				pha
.10c5	20 1c 11	jsr $111c			jsr 	WVSetTemp0 					; set temp0 to point to target address.
.10c8	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10ca	55 41		eor $41,x			eor 	esType+1,x
.10cc	29 40		and #$40			and 	#$40
.10ce	d0 47		bne $1117			bne		_WVType
.10d0	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d2	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d4	29 40		and #$40			and 	#$40
.10d6	d0 30		bne $1108			bne 	_WVCopyData2
.10d8	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10da	15 41		ora $41,x			ora 	esType+1,x
.10dc	4a		lsr a				lsr 	a
.10dd	90 18		bcc $10f7			bcc 	_WVCopyData4
.10df	b5 40		lda $40,x			lda 	esType,x
.10e1	4a		lsr a				lsr 	a
.10e2	90 33		bcc $1117			bcc 	_WVType
.10e4	e8		inx				inx 								; force the value being written to be a float.
.10e5	20 1b 14	jsr $141b			jsr 	BPMakeFloat
.10e8	ca		dex				dex
.10e9	20 1c 11	jsr $111c			jsr 	WVSetTemp0 					; set Temp0 to write address
.10ec	e8		inx				inx
.10ed	8a		txa				txa
.10ee	a2 1e		ldx #$1e		ldx	#30
.10f0	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.10f3	aa		tax				tax
.10f4	4c 14 11	jmp $1114			jmp 	_WVCopyExit
.10f7					_WVCopyData4:
.10f7	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.10f9	29 20		and #$20			and 	#$20
.10fb	d0 11		bne $110e			bne 	_WVCopyData1
.10fd	a0 03		ldy #$03			ldy 	#3
.10ff	b5 61		lda $61,x			lda 	esInt3+1,x
.1101	91 04		sta ($04),y			sta 	(temp0),y
.1103	88		dey				dey
.1104	b5 59		lda $59,x			lda 	esInt2+1,x
.1106	91 04		sta ($04),y			sta 	(temp0),y
.1108					_WVCopyData2:
.1108	a0 01		ldy #$01			ldy 	#1
.110a	b5 51		lda $51,x			lda 	esInt1+1,x
.110c	91 04		sta ($04),y			sta 	(temp0),y
.110e					_WVCopyData1:
.110e	a0 00		ldy #$00			ldy 	#0
.1110	b5 49		lda $49,x			lda 	esInt0+1,x
.1112	91 04		sta ($04),y			sta 	(temp0),y
.1114					_WVCopyExit:
.1114	68		pla				pla
.1115	a8		tay				tay
.1116	60		rts				rts
.1117					_WVType:
.1117	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1119	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.111c					WVSetTemp0:
.111c	b5 48		lda $48,x			lda 	esInt0,x
.111e	85 04		sta $04				sta 	temp0
.1120	b5 50		lda $50,x			lda 	esInt1,x
.1122	85 05		sta $05				sta 	temp0+1
.1124	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/new.asm

.1125					Command_New:
.1125	20 7a 12	jsr $127a			jsr 	ResetCodeAddress 			; point to first line
.1128	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.112a	98		tya				tya
.112b	91 02		sta ($02),y			sta 	(codePtr),y
.112d	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.1130	4c 67 13	jmp $1367			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/poke.asm

.1133					Command_Poke:
.1133	a9 01		lda #$01			lda 	#1
.1135	d0 06		bne $113d			bne 	PokeGeneral
.1137					Command_Doke:
.1137	a9 02		lda #$02			lda 	#2
.1139	d0 02		bne $113d			bne 	PokeGeneral
.113b					Command_Loke:
.113b	a9 03		lda #$03			lda 	#3
.113d					PokeGeneral:
.113d	48		pha				pha 								; save size
.113e	20 6d 17	jsr $176d			jsr 	EvaluateRootInteger 		; target address
.1141	20 c0 1c	jsr $1cc0			jsr	 	CheckComma
.1144	e8		inx				inx
.1145	20 6f 17	jsr $176f			jsr 	EvaluateInteger 			; what value to POKE ?
.1148	ca		dex				dex
.1149	20 1c 11	jsr $111c			jsr 	WVSetTemp0 					; temp0 points to the target address
.114c	84 0a		sty $0a				sty 	tempShort 					; save Y
.114e	68		pla				pla 								; get copy type and dispatch
.114f	aa		tax				tax
.1150	ca		dex				dex
.1151	f0 14		beq $1167			beq 	_Poke1
.1153	ca		dex				dex
.1154	f0 0b		beq $1161			beq 	_Poke2
.1156	a0 03		ldy #$03			ldy 	#3
.1158	a5 61		lda $61				lda 	esInt3+1
.115a	91 04		sta ($04),y			sta 	(temp0),y
.115c	88		dey				dey
.115d	a5 59		lda $59				lda 	esInt2+1
.115f	91 04		sta ($04),y			sta 	(temp0),y
.1161					_Poke2:
.1161	a0 01		ldy #$01			ldy 	#1
.1163	a5 51		lda $51				lda 	esInt1+1
.1165	91 04		sta ($04),y			sta 	(temp0),y
.1167					_Poke1:
.1167	a0 00		ldy #$00			ldy 	#0
.1169	a5 49		lda $49				lda 	esInt0+1
.116b	91 04		sta ($04),y			sta 	(temp0),y
.116d	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.116f	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/print.asm

.0893					lastPrintToken:
>0893							.fill 	1
.1170					Command_Print:
.1170	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1172	8d 93 08	sta $0893			sta 	lastPrintToken
.1175	88		dey				dey
.1176					_PrintLoopSkip:
.1176	c8		iny				iny
.1177					_PrintLoop:
.1177	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1179	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.117b	f0 5b		beq $11d8			beq 	_PrintExit
.117d	c9 c2		cmp #$c2			cmp 	#TKW_COLON
.117f	f0 57		beq $11d8			beq 	_PrintExit
.1181	8d 93 08	sta $0893			sta 	lastPrintToken 				; update LPT
.1184	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.1186	f0 ee		beq $1176			beq 	_PrintLoopSkip
.1188	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.118a	f0 3c		beq $11c8			beq	 	_PrintNewLine
.118c	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; , is print tab
.118e	f0 40		beq $11d0			beq 	_PrintTab
.1190	20 4e 17	jsr $174e			jsr 	EvaluateRoot 				; evaluate something at the root
.1193	a9 70		lda #$70			lda 	#(convertBuffer) & $FF
.1195	85 04		sta $04				sta 	temp0
.1197	a9 08		lda #$08			lda 	#(convertBuffer) >> 8
.1199	85 05		sta $05				sta 	1+(temp0)
.119b	a5 40		lda $40				lda 	esType 						; get type
.119d	f0 15		beq $11b4			beq		_PrintInteger
.119f	4a		lsr a				lsr 	a 							; check for floating point
.11a0	b0 08		bcs $11aa			bcs 	_PrintFloat
.11a2					_PrintString:
.11a2	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11a4	20 1c 11	jsr $111c			jsr 	WVSetTemp0
.11a7	4c c2 11	jmp $11c2			jmp 	_PrintTemp0 				; print no leading space.
.11aa					_PrintFloat:
.11aa	a9 00		lda #$00			lda 	#0 							; stack level.
.11ac	a2 14		ldx #$14		ldx	#20
.11ae	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.11b1	4c bb 11	jmp $11bb			jmp 	_PrintSpaceTemp0
.11b4					_PrintInteger:
.11b4	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11b6	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11b8	20 96 1b	jsr $1b96			jsr 	MInt32ToString				; convert to text
.11bb					_PrintSpaceTemp0:
.11bb	a9 20		lda #$20			lda 	#32
.11bd	a2 02		ldx #$02		ldx	#2
.11bf	20 44 1d	jsr $1d44		jsr	deviceHandler
.11c2					_PrintTemp0:
.11c2	20 e9 11	jsr $11e9			jsr 	PrintString
.11c5	4c 77 11	jmp $1177			jmp 	_PrintLoop
.11c8					_PrintNewLine:
.11c8	a2 00		ldx #$00		ldx	#0
.11ca	20 44 1d	jsr $1d44		jsr	deviceHandler
.11cd	4c 76 11	jmp $1176			jmp 	_PrintLoopSkip
.11d0					_PrintTab:
.11d0	a2 04		ldx #$04		ldx	#4
.11d2	20 44 1d	jsr $1d44		jsr	deviceHandler
.11d5	4c 76 11	jmp $1176			jmp 	_PrintLoopSkip
.11d8					_PrintExit:
.11d8	ad 93 08	lda $0893			lda		lastPrintToken 				; check last token
.11db	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11dd	f0 09		beq $11e8			beq 	_PrintExit2
.11df	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.11e1	f0 05		beq $11e8			beq 	_PrintExit2
.11e3	a2 00		ldx #$00		ldx	#0
.11e5	20 44 1d	jsr $1d44		jsr	deviceHandler
.11e8					_PrintExit2:
.11e8	60		rts				rts
.11e9					PrintString:
.11e9	8a		txa				txa
.11ea	48		pha				pha
.11eb	98		tya				tya
.11ec	48		pha				pha
.11ed	a0 00		ldy #$00			ldy 	#0							; get length
.11ef	b1 04		lda ($04),y			lda 	(temp0),y
.11f1	aa		tax				tax 								; into X
.11f2	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.11f4	f0 10		beq $1206			beq 	_PSExit
.11f6	ca		dex				dex
.11f7	8a		txa				txa
.11f8	48		pha				pha
.11f9	c8		iny				iny
.11fa	b1 04		lda ($04),y			lda 	(temp0),y
.11fc	a2 02		ldx #$02		ldx	#2
.11fe	20 44 1d	jsr $1d44		jsr	deviceHandler
.1201	68		pla				pla
.1202	aa		tax				tax
.1203	4c f2 11	jmp $11f2			jmp 	_PSLoop
.1206					_PSExit:
.1206	68		pla				pla
.1207	a8		tay				tay
.1208	68		pla				pla
.1209	aa		tax				tax
.120a	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/rem.asm

.120b					Command_Rem:
.120b					Command_Rem2:
.120b	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.120d	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.120f	d0 06		bne $1217			bne 	_CRNotString
.1211	c8		iny				iny
.1212	98		tya				tya
.1213	38		sec				sec
.1214	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1216	a8		tay				tay
.1217					_CRNotString:
.1217	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/repeat.asm

.1fe3					Command_Repeat:
.1fe3	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.1fe5	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.1fe7	20 db 1c	jsr $1cdb			jsr 	RSClaim
.1fea	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1fec	20 fe 1c	jsr $1cfe			jsr 	RSSavePosition
.1fef	60		rts				rts
.1ff0					Command_Until:
.1ff0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1ff2	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1ff4	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.1ff6	f0 05		beq $1ffd			beq 	_isok
.1ff8	a2 0e		ldx #$0e			ldx 	#ErrorID_untilErr
.1ffa	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1ffd					_isok:
.1ffd	20 6d 17	jsr $176d			jsr 	EvaluateRootInteger 		; at the bottom.
.2000	20 67 1c	jsr $1c67			jsr 	MInt32Zero					; check if TOS zero
.2003	d0 06		bne $200b			bne 	_CUExit
.2005	a9 01		lda #$01			lda 	#1
.2007	20 11 1d	jsr $1d11			jsr 	RSLoadPosition 				; reload the position from offset 1.
.200a	60		rts				rts
.200b					_CUExit:
.200b	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.200d	20 f4 1c	jsr $1cf4			jsr 	RSFree
.2010	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/run.asm

.1218					Command_Run:
.1218	a2 ff		ldx #$ff			ldx 	#$FF
.121a	9a		txs				txs
.121b	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.121e	20 7a 12	jsr $127a			jsr 	ResetCodeAddress
.1221	a0 03		ldy #$03			ldy 	#3
.1223					CRNextInstruction:
.1223	64 7b		stz $7b				stz 	softMemAlloc+1
.1225	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1227	10 1c		bpl $1245			bpl 	_CRNotToken
.1229	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.122b	b0 0c		bcs $1239			bcs 	_CRExecute
.122d	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; unary is ignored.
.122f	b0 56		bcs $1287			bcs 	Unimplemented
.1231	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1233	b0 04		bcs $1239			bcs 	_CRExecute
.1235	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1237	b0 16		bcs $124f			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1239					_CRExecute:
.1239	c8		iny				iny 								; consume it.
.123a	0a		asl a				asl 	a 							; double it, losing most significant bit.
.123b	aa		tax				tax
.123c	20 42 12	jsr $1242			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.123f	4c 23 12	jmp $1223			jmp 	CRNextInstruction
.1242					_CRRunRoutine:
.1242	7c 90 12	jmp ($1290,x)			jmp 	(Group0Vectors,x)
.1245					_CRNotToken:
.1245	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1247	b0 3e		bcs $1287			bcs 	Unimplemented
.1249					_CRDefaultLet:
.1249	20 b0 10	jsr $10b0			jsr 	CommandLet 					; do the default, LET
.124c	4c 23 12	jmp $1223			jmp 	CRNextInstruction
.124f					_CRCheckIndirect:
.124f	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1251	f0 f6		beq $1249			beq 	_CRDefaultLet
.1253	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1255	f0 f2		beq $1249			beq 	_CRDefaultLet
.1257	d0 2e		bne $1287			bne 	Unimplemented
.1259					CommandShift1:
.1259	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.125b	10 2a		bpl $1287			bpl 	Unimplemented 				; we have an error as this should not happen.
.125d	0a		asl a				asl 	a 							; double into X
.125e	aa		tax				tax
.125f	c8		iny				iny 								; advance over it.
.1260	20 66 12	jsr $1266			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1263	4c 23 12	jmp $1223			jmp 	CRNextInstruction
.1266					_RunIt:
.1266	7c 44 13	jmp ($1344,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.1269					CommandShift2:
.1269	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.126b	10 1a		bpl $1287			bpl 	Unimplemented 				; we have an error as this should not happen.
.126d	0a		asl a				asl 	a 							; double into X
.126e	aa		tax				tax
.126f	c8		iny				iny 								; advance over it.
.1270	20 76 12	jsr $1276			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1273	4c 23 12	jmp $1223			jmp 	CRNextInstruction
.1276					_RunIt:
.1276	7c 54 13	jmp ($1354,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.1279					CommandColon:
.1279	60		rts				rts
.127a					ResetCodeAddress:
.127a	ad 68 08	lda $0868			lda 	basePage 					; copy basePage to code Pointer
.127d	85 02		sta $02				sta 	codePtr
.127f	ad 69 08	lda $0869			lda 	basePage+1
.1282	85 03		sta $03				sta 	codePtr+1
.1284	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1286	60		rts				rts
.1287					Unimplemented:
>1287	db						.byte 	$DB
.1288	4c 87 12	jmp $1287			jmp 	Unimplemented
.128b					TKErr01:
.128b					TKErr02:
.128b					TKErr03:
.128b					TKErr04:
.128b					TKErr05:
.128b					TKErr06:
.128b					TKErr07:
.128b					TKErr08:
.128b	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.128d	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler

;******  Processing file: ../source/main/commands/../../generated/tokenvectors0.inc

.1290					Group0Vectors:
>1290	6a 13					.word	AdvanceNextLine          ; $80 [[eol]]
>1292	59 12					.word	CommandShift1            ; $81 [[sh1]]
>1294	69 12					.word	CommandShift2            ; $82 [[sh2]]
>1296	87 12					.word	Unimplemented            ; $83 [[sh3]]
>1298	87 12					.word	Unimplemented            ; $84 [[fpc]]
>129a	8b 12					.word	TKErr08                  ; $85 [[str]]
>129c	bd 14					.word	AndHandler               ; $86 and
>129e	aa 14					.word	OrHandler                ; $87 or
>12a0	97 14					.word	XorHandler               ; $88 xor
>12a2	df 15					.word	CompareGreaterEq         ; $89 >=
>12a4	e9 15					.word	CompareLessEq            ; $8a <=
>12a6	cb 15					.word	CompareGreater           ; $8b >
>12a8	c1 15					.word	CompareLess              ; $8c <
>12aa	b7 15					.word	CompareEquals            ; $8d =
>12ac	d5 15					.word	CompareNotEquals         ; $8e <>
>12ae	28 14					.word	AddHandler               ; $8f +
>12b0	4b 14					.word	SubHandler               ; $90 -
>12b2	e3 14					.word	ShrHandler               ; $91 >>
>12b4	d0 14					.word	ShlHandler               ; $92 <<
>12b6	5e 14					.word	MulHandler               ; $93 *
>12b8	71 14					.word	DivHandler               ; $94 /
>12ba	84 14					.word	ModHandler               ; $95 mod
>12bc	1c 15					.word	PowerHandler             ; $96 ^
>12be	f6 14					.word	WordRefHandler           ; $97 !
>12c0	09 15					.word	ByteRefHandler           ; $98 ?
>12c2	e3 1f					.word	Command_Repeat           ; $99 repeat
>12c4	11 20					.word	Command_While            ; $9a while
>12c6	d4 1e					.word	Command_FOR              ; $9b for
>12c8	74 10					.word	CommandIf                ; $9c if
>12ca	f0 1f					.word	Command_Until            ; $9d until
>12cc	34 20					.word	Command_Wend             ; $9e wend
>12ce	35 1f					.word	Command_NEXT             ; $9f next
>12d0	8b 12					.word	TKErr06                  ; $a0 then
>12d2	af 10					.word	Command_ENDIF            ; $a1 endif
>12d4	26 17					.word	UnaryParenthesis         ; $a2 (
>12d6	f9 17					.word	UnaryLen                 ; $a3 len(
>12d8	3d 18					.word	UnarySgn                 ; $a4 sgn(
>12da	26 18					.word	UnaryAbs                 ; $a5 abs(
>12dc	96 18					.word	Unary_Random             ; $a6 random(
>12de	e0 18					.word	Unary_Page               ; $a7 page
>12e0	3c 1c					.word	MInt32True               ; $a8 true
>12e2	40 1c					.word	MInt32False              ; $a9 false
>12e4	ab 18					.word	Unary_Min                ; $aa min(
>12e6	af 18					.word	Unary_Max                ; $ab max(
>12e8	87 12					.word	Unimplemented            ; $ac sys(
>12ea	87 12					.word	Unimplemented            ; $ad timer(
>12ec	87 12					.word	Unimplemented            ; $ae event(
>12ee	87 12					.word	Unimplemented            ; $af get(
>12f0	87 12					.word	Unimplemented            ; $b0 inkey(
>12f2	87 12					.word	Unimplemented            ; $b1 alloc(
>12f4	2d 19					.word	ExecChr                  ; $b2 chr$(
>12f6	41 19					.word	ExecLeft                 ; $b3 left$(
>12f8	5e 19					.word	ExecMid                  ; $b4 mid$(
>12fa	86 19					.word	ExecRight                ; $b5 right$(
>12fc	87 12					.word	Unimplemented            ; $b6 str$(
>12fe	87 12					.word	Unimplemented            ; $b7 val(
>1300	54 18					.word	UnaryPeek                ; $b8 peek(
>1302	5a 18					.word	UnaryDeek                ; $b9 deek(
>1304	60 18					.word	UnaryLeek                ; $ba leek(
>1306	17 18					.word	UnaryAsc                 ; $bb asc(
>1308	0b 19					.word	UnaryIntToFloat          ; $bc int(
>130a	1e 19					.word	UnaryFloatToInt          ; $bd float(
>130c	ee 18					.word	UnaryReference           ; $be @
>130e	04 19					.word	UnaryComplement          ; $bf ~
>1310	01 19					.word	UnaryHexMarker           ; $c0 &
>1312	8b 12					.word	TKErr01                  ; $c1 )
>1314	79 12					.word	CommandColon             ; $c2 :
>1316	8b 12					.word	TKErr02                  ; $c3 ,
>1318	8b 12					.word	TKErr03                  ; $c4 ;
>131a	87 12					.word	Unimplemented            ; $c5 ]
>131c	8b 12					.word	TKErr07                  ; $c6 to
>131e	8b 12					.word	TKErr05                  ; $c7 step
>1320	8b 12					.word	TKErr04                  ; $c8 proc
>1322	87 12					.word	Unimplemented            ; $c9 endproc
>1324	87 12					.word	Unimplemented            ; $ca local
>1326	0b 12					.word	Command_Rem              ; $cb rem
>1328	b0 10					.word	CommandLet               ; $cc let
>132a	0b 12					.word	Command_Rem2             ; $cd '
>132c	87 12					.word	Unimplemented            ; $ce [
>132e	87 12					.word	Unimplemented            ; $cf input
>1330	a9 10					.word	Command_ELSE             ; $d0 else
>1332	db 13					.word	Command_VDU              ; $d1 vdu
>1334	87 12					.word	Unimplemented            ; $d2 read
>1336	87 12					.word	Unimplemented            ; $d3 data
>1338	87 12					.word	Unimplemented            ; $d4 restore
>133a	70 11					.word	Command_Print            ; $d5 print
>133c	a9 13					.word	CommandGOTO              ; $d6 goto
>133e	7e 13					.word	CommandGOSUB             ; $d7 gosub
>1340	91 13					.word	CommandRETURN            ; $d8 return
>1342	1a 10					.word	Command_Assert           ; $d9 assert
>1344	62 13					.word	CommandStop              ; $da stop
>1346	67 13					.word	CommandEnd               ; $db end
>1348	87 12					.word	Unimplemented            ; $dc dim
>134a	33 11					.word	Command_Poke             ; $dd poke
>134c	37 11					.word	Command_Doke             ; $de doke
>134e	3b 11					.word	Command_Loke             ; $df loke

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors1.inc

.1350					Group1Vectors:
>1350	28 10					.word	CommandClear             ; $86 clear
>1352	87 12					.word	Unimplemented            ; $87 load
>1354	87 12					.word	Unimplemented            ; $88 save
>1356	87 12					.word	Unimplemented            ; $89 list
>1358	25 11					.word	Command_New              ; $8a new
>135a	18 12					.word	Command_Run              ; $8b run
>135c	87 12					.word	Unimplemented            ; $8c code
>135e	87 12					.word	Unimplemented            ; $8d option

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors2.inc

.1360					Group2Vectors:
>1360	87 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: ../source/main/commands/run.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/stopend.asm

.1362					CommandStop:
.1362	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.1364	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1367					CommandEnd:
.1367	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.136a					AdvanceNextLine:
.136a	a0 00		ldy #$00			ldy 	#0 							; get offset
.136c	b1 02		lda ($02),y			lda 	(codePtr),y
.136e	18		clc				clc 								; add to codePtr
.136f	65 02		adc $02				adc 	codePtr
.1371	85 02		sta $02				sta 	codePtr
.1373	90 02		bcc $1377			bcc 	_ANLNoCarry
.1375	e6 03		inc $03				inc 	codePtr+1
.1377					_ANLNoCarry:
.1377	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1379	f0 ec		beq $1367			beq 	CommandEnd 					; execute END
.137b	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.137d	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/transfer.asm

.137e					CommandGOSUB:
.137e	20 6d 17	jsr $176d			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1381	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1383	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.1385	20 db 1c	jsr $1cdb			jsr 	RSClaim
.1388	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.138a	20 fe 1c	jsr $1cfe			jsr 	RSSavePosition
.138d	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.138f	f0 1b		beq $13ac			beq 	GotoTOS 					; and do a GOTO there.
.1391					CommandRETURN:
.1391	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1393	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.1395	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.1397	f0 05		beq $139e			beq 	_isok
.1399	a2 0d		ldx #$0d			ldx 	#ErrorID_returnErr
.139b	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.139e					_isok:
.139e	a9 01		lda #$01			lda 	#1
.13a0	20 11 1d	jsr $1d11			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13a3	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13a5	20 f4 1c	jsr $1cf4			jsr 	RSFree
.13a8	60		rts				rts
.13a9					CommandGOTO:
.13a9	20 6d 17	jsr $176d			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.13ac					GotoTOS:
.13ac	20 7a 12	jsr $127a			jsr 	ResetCodeAddress 			; simple search.
.13af					_GotoSearch:
.13af	a0 00		ldy #$00			ldy 	#0 							; get offset
.13b1	b1 02		lda ($02),y			lda 	(codePtr),y
.13b3	f0 21		beq $13d6			beq 	_GotoError 					; not found.
.13b5	c8		iny				iny									; check LSB match
.13b6	b1 02		lda ($02),y			lda 	(codePtr),y
.13b8	d5 48		cmp $48,x			cmp 	esInt0,x
.13ba	d0 07		bne $13c3			bne 	_GotoNext
.13bc	c8		iny				iny
.13bd	b1 02		lda ($02),y			lda 	(codePtr),y
.13bf	d5 50		cmp $50,x			cmp 	esInt1,x
.13c1	f0 10		beq $13d3			beq 	_GotoFound
.13c3					_GotoNext:
.13c3	a0 00		ldy #$00			ldy 	#0 							; go next line
.13c5	b1 02		lda ($02),y			lda 	(codePtr),y
.13c7	18		clc				clc
.13c8	65 02		adc $02				adc 	codePtr
.13ca	85 02		sta $02				sta 	codePtr
.13cc	90 e1		bcc $13af			bcc 	_GotoSearch
.13ce	e6 03		inc $03				inc 	codePtr+1
.13d0	4c af 13	jmp $13af			jmp 	_GotoSearch
.13d3					_GotoFound:
.13d3	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.13d5	60		rts				rts
.13d6					_GotoError:
.13d6	a2 0b		ldx #$0b			ldx 	#ErrorID_LineNumber
.13d8	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/vdu.asm

.13db					Command_VDU:
.13db	20 6d 17	jsr $176d			jsr 	EvaluateRootInteger 			; get integer at root.
.13de	a5 48		lda $48				lda 	esInt0
.13e0	a2 02		ldx #$02		ldx	#2
.13e2	20 44 1d	jsr $1d44		jsr	deviceHandler
.13e5					_CVNext:
.13e5	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.13e7	c8		iny				iny
.13e8	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 						; comma, do again
.13ea	f0 ef		beq $13db			beq 	Command_VDU
.13ec	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.13ee	d0 0a		bne $13fa			bne 	_CVExit
.13f0	a5 50		lda $50				lda 	esInt1
.13f2	a2 02		ldx #$02		ldx	#2
.13f4	20 44 1d	jsr $1d44		jsr	deviceHandler
.13f7	4c e5 13	jmp $13e5			jmp 	_CVNext
.13fa	88		dey		_CVExit:dey
.13fb	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/while.asm

.2011					Command_While:
.2011	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.2013	a2 04		ldx #$04			ldx 	#4
.2015	20 db 1c	jsr $1cdb			jsr 	RSClaim 					; create on stack.
.2018	88		dey				dey
.2019	a9 01		lda #$01			lda 	#1
.201b	20 fe 1c	jsr $1cfe			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.201e	c8		iny				iny
.201f	20 6f 17	jsr $176f			jsr 	EvaluateInteger				; get the conditional
.2022	20 67 1c	jsr $1c67			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2025	f0 01		beq $2028			beq 	_CWFail
.2027	60		rts				rts
.2028					_CWFail:
.2028	a9 04		lda #$04			lda 	#4
.202a	20 f4 1c	jsr $1cf4			jsr 	RSFree 						; close the just opened position.
.202d	a9 9e		lda #$9e			lda 	#TKW_WEND 					; scan forward past WEND.
.202f	aa		tax				tax
.2030	20 4c 20	jsr $204c			jsr 	ScanForward
.2033	60		rts				rts
.2034					Command_Wend:
.2034	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.2036	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.2038	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.203a	f0 05		beq $2041			beq 	_isok
.203c	a2 10		ldx #$10			ldx 	#ErrorID_wendErr
.203e	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.2041					_isok:
.2041	a9 01		lda #$01			lda 	#1
.2043	20 11 1d	jsr $1d11			jsr 	RSLoadPosition				; go back until true
.2046	a9 04		lda #$04			lda 	#4
.2048	20 f4 1c	jsr $1cf4			jsr 	RSFree 						; close the loop
.204b	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/binary.asm

.13fc					BinaryProcess:
.13fc	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.13fe	15 41		ora $41,x			ora 	esType+1,x
.1400	0a		asl a				asl 	a
.1401	30 0e		bmi $1411			bmi 	_BPStringType 				; if one is set, then string type.
.1403	18		clc				clc 								; return CC for integer
.1404	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1406	f0 08		beq $1410			beq 	_BPExit 					; if both integer then return with CC.
.1408	20 16 14	jsr $1416			jsr 	BPMakeBothFloat 			; make both float
.140b	a9 01		lda #$01			lda 	#$01 						; set result type to float
.140d	95 40		sta $40,x			sta 	esType,x
.140f	38		sec				sec 								; and return with carry set.
.1410					_BPExit:
.1410	60		rts				rts
.1411					_BPStringType:
.1411	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1413	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1416					BPMakeBothFloat:
.1416	e8		inx				inx
.1417	20 1b 14	jsr $141b			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.141a	ca		dex				dex
.141b					BPMakeFloat:
.141b	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.141d	4a		lsr a				lsr 	a
.141e	b0 07		bcs $1427			bcs 	_BPIsFloat
.1420	8a		txa				txa
.1421	a2 1a		ldx #$1a		ldx	#26
.1423	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1426	aa		tax				tax
.1427					_BPIsFloat:
.1427	60		rts				rts
.1428					AddHandler:
.1428	20 f9 15	jsr $15f9			jsr 	DereferenceTwo 				; dereference top two on stack.
.142b	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.142d	35 41		and $41,x			and 	esType+1,x
.142f	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1431	d0 10		bne $1443			bne 	_AHStringConcat				; concatenate strings.
.1433	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.1436	b0 03		bcs $143b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1438	4c 2b 1b	jmp $1b2b			jmp 	MInt32Add 							; else do it as integer.
.143b					_IsFPOperation:
.143b	8a		txa				txa 								; call the relevant fp routine
.143c	a2 02		ldx #$02		ldx	#2
.143e	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1441	aa		tax				tax
.1442	60		rts				rts
.1443					_AHStringConcat:
.1443	8a		txa				txa
.1444	a2 02		ldx #$02		ldx	#2
.1446	20 a1 1e	jsr $1ea1		jsr	stringHandler
.1449	aa		tax				tax
.144a	60		rts				rts
.144b					SubHandler:
.144b	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.144e	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.1451	b0 03		bcs $1456			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1453	4c 45 1b	jmp $1b45			jmp 	MInt32Sub 							; else do it as integer.
.1456					_IsFPOperation:
.1456	8a		txa				txa 								; call the relevant fp routine
.1457	a2 10		ldx #$10		ldx	#16
.1459	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.145c	aa		tax				tax
.145d	60		rts				rts
.145e					MulHandler:
.145e	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.1461	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.1464	b0 03		bcs $1469			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1466	4c 5f 1b	jmp $1b5f			jmp 	MInt32Multiply 							; else do it as integer.
.1469					_IsFPOperation:
.1469	8a		txa				txa 								; call the relevant fp routine
.146a	a2 0a		ldx #$0a		ldx	#10
.146c	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.146f	aa		tax				tax
.1470	60		rts				rts
.1471					DivHandler:
.1471	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.1474	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.1477	b0 03		bcs $147c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1479	4c 39 1a	jmp $1a39			jmp 	MInt32SDivide 							; else do it as integer.
.147c					_IsFPOperation:
.147c	8a		txa				txa 								; call the relevant fp routine
.147d	a2 06		ldx #$06		ldx	#6
.147f	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1482	aa		tax				tax
.1483	60		rts				rts
.1484					ModHandler:
.1484	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.1487	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.148a	b0 03		bcs $148f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.148c	4c b7 1a	jmp $1ab7			jmp 	MInt32Modulus 							; else do it as integer.
.148f					_IsFPOperation:
.148f	8a		txa				txa 								; call the relevant fp routine
.1490	a2 08		ldx #$08		ldx	#8
.1492	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1495	aa		tax				tax
.1496	60		rts				rts
.1497					XorHandler:
.1497	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.149a	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.149d	b0 03		bcs $14a2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.149f	4c eb 19	jmp $19eb			jmp 	MInt32Xor 							; else do it as integer.
.14a2					_IsFPOperation:
.14a2	8a		txa				txa 								; call the relevant fp routine
.14a3	a2 08		ldx #$08		ldx	#8
.14a5	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.14a8	aa		tax				tax
.14a9	60		rts				rts
.14aa					OrHandler:
.14aa	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.14ad	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.14b0	b0 03		bcs $14b5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14b2	4c d2 19	jmp $19d2			jmp 	MInt32Or 							; else do it as integer.
.14b5					_IsFPOperation:
.14b5	8a		txa				txa 								; call the relevant fp routine
.14b6	a2 08		ldx #$08		ldx	#8
.14b8	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.14bb	aa		tax				tax
.14bc	60		rts				rts
.14bd					AndHandler:
.14bd	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.14c0	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.14c3	b0 03		bcs $14c8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14c5	4c b9 19	jmp $19b9			jmp 	MInt32And 							; else do it as integer.
.14c8					_IsFPOperation:
.14c8	8a		txa				txa 								; call the relevant fp routine
.14c9	a2 08		ldx #$08		ldx	#8
.14cb	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.14ce	aa		tax				tax
.14cf	60		rts				rts
.14d0					ShlHandler:
.14d0	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.14d3	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.14d6	b0 03		bcs $14db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14d8	4c 51 15	jmp $1551			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.14db					_IsFPOperation:
.14db	8a		txa				txa 								; call the relevant fp routine
.14dc	a2 08		ldx #$08		ldx	#8
.14de	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.14e1	aa		tax				tax
.14e2	60		rts				rts
.14e3					ShrHandler:
.14e3	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.14e6	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.14e9	b0 03		bcs $14ee			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14eb	4c 54 15	jmp $1554			jmp 	MInt32ShiftRightX 							; else do it as integer.
.14ee					_IsFPOperation:
.14ee	8a		txa				txa 								; call the relevant fp routine
.14ef	a2 08		ldx #$08		ldx	#8
.14f1	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.14f4	aa		tax				tax
.14f5	60		rts				rts
.14f6					WordRefHandler:
.14f6	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.14f9	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.14fc	b0 03		bcs $1501			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14fe	4c 43 15	jmp $1543			jmp 	MInt32WordIndirect 							; else do it as integer.
.1501					_IsFPOperation:
.1501	8a		txa				txa 								; call the relevant fp routine
.1502	a2 08		ldx #$08		ldx	#8
.1504	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1507	aa		tax				tax
.1508	60		rts				rts
.1509					ByteRefHandler:
.1509	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.150c	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.150f	b0 03		bcs $1514			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1511	4c 47 15	jmp $1547			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1514					_IsFPOperation:
.1514	8a		txa				txa 								; call the relevant fp routine
.1515	a2 08		ldx #$08		ldx	#8
.1517	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.151a	aa		tax				tax
.151b	60		rts				rts
.151c					PowerHandler:
.151c	20 f9 15	jsr $15f9			jsr 	DereferenceTwo
.151f	20 fc 13	jsr $13fc			jsr 	BinaryProcess 				; check to see if either is float
.1522	b0 03		bcs $1527			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1524	4c 2f 15	jmp $152f			jmp 	PowerInteger 							; else do it as integer.
.1527					_IsFPOperation:
.1527	8a		txa				txa 								; call the relevant fp routine
.1528	a2 16		ldx #$16		ldx	#22
.152a	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.152d	aa		tax				tax
.152e	60		rts				rts
.152f					PowerInteger:
.152f	20 16 14	jsr $1416			jsr 	BPMakeBothFloat				; make them float.
.1532	8a		txa				txa
.1533	a2 16		ldx #$16		ldx	#22
.1535	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1538	a2 12		ldx #$12		ldx	#18
.153a	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.153d	aa		tax				tax
.153e	a9 00		lda #$00			lda 	#0 							; make type integer
.1540	95 40		sta $40,x			sta 	esType,x
.1542	60		rts				rts
.1543					Mint32WordIndirect:
.1543	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1545	d0 02		bne $1549			bne 	Min32Indirect
.1547					Mint32ByteIndirect:
.1547	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1549					Min32Indirect:
.1549	48		pha				pha 								; save the indirection
.154a	20 2b 1b	jsr $1b2b			jsr 	MInt32Add 					; add a!b a?b
.154d	68		pla				pla 								; and set the type to reference.
.154e	95 40		sta $40,x			sta 	esType,x
.1550	60		rts				rts
.1551					Mint32ShiftLeftX:
.1551	18		clc				clc
.1552	90 01		bcc $1555			bcc 	Mint32Shift
.1554					Mint32ShiftRightX:
.1554	38		sec				sec
.1555					Mint32Shift:
.1555	08		php				php 								; save carry flag on stack.
.1556	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1558	15 59		ora $59,x			ora 	esInt2+1,x
.155a	15 61		ora $61,x			ora 	esInt3+1,x
.155c	d0 1e		bne $157c			bne 	_MShiftZero
.155e	b5 49		lda $49,x			lda 	esInt0+1,x
.1560	c9 20		cmp #$20			cmp 	#32
.1562	b0 18		bcs $157c			bcs 	_MShiftZero
.1564					_MShiftLoop:
.1564	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1566	f0 12		beq $157a			beq 	_MShiftExit
.1568	d6 49		dec $49,x			dec 	esInt0+1,x
.156a	28		plp				plp 								; restore and save carry
.156b	08		php				php
.156c	90 06		bcc $1574			bcc 	_MShiftLeft
.156e	20 5e 1c	jsr $1c5e			jsr 	Mint32ShiftRight
.1571	4c 64 15	jmp $1564			jmp 	_MShiftLoop
.1574					_MShiftLeft:
.1574	20 55 1c	jsr $1c55			jsr 	Mint32ShiftLeft
.1577	4c 64 15	jmp $1564			jmp 	_MShiftLoop
.157a					_MShiftExit:
.157a	28		plp				plp	 								; throw saved carry and exit
.157b	60		rts				rts
.157c					_MShiftZero:
.157c	4c 40 1c	jmp $1c40			jmp 	MInt32False 				; return 0.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/compare.asm

.157f					PerformComparison:
.157f	20 f9 15	jsr $15f9			jsr 	DereferenceTwo 				; make both values.
.1582	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1584	35 41		and $41,x			and 	esType+1,x
.1586	0a		asl a				asl 	a
.1587	30 1d		bmi $15a6			bmi 	_PCIsString
.1589	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.158b	15 41		ora $41,x			ora 	esType+1,x
.158d	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.158e	30 22		bmi $15b2			bmi 	_PCError
.1590	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1592	f0 0f		beq $15a3			beq 	_PCIsInteger 				; if not two integers
.1594	20 16 14	jsr $1416			jsr 	BPMakeBothFloat 			; make both float
.1597	8a		txa				txa
.1598	a2 04		ldx #$04		ldx	#4
.159a	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.159d	86 0a		stx $0a				stx 	tempShort 					; save result
.159f	aa		tax				tax
.15a0	a5 0a		lda $0a				lda 	tempShort
.15a2	60		rts				rts
.15a3					_PCIsInteger:
.15a3	4c 04 1a	jmp $1a04			jmp 	MInt32Compare
.15a6					_PCIsString:
.15a6	8a		txa				txa 								; A has SP
.15a7	a2 04		ldx #$04		ldx	#4
.15a9	20 a1 1e	jsr $1ea1		jsr	stringHandler
.15ac	86 0a		stx $0a				stx 	tempShort 					; save result
.15ae	aa		tax				tax 								; put SP back in X and get result.
.15af	a5 0a		lda $0a				lda 	tempShort
.15b1	60		rts				rts
.15b2					_PCError:
.15b2	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.15b4	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.15b7					CompareEquals:
.15b7	20 7f 15	jsr $157f			jsr 	PerformComparison
.15ba	c9 00		cmp #$00			cmp 	#$00
.15bc	f0 35		beq $15f3			beq  	CompareTrue
.15be	4c f6 15	jmp $15f6			jmp 	CompareFalse
.15c1					CompareLess:
.15c1	20 7f 15	jsr $157f			jsr 	PerformComparison
.15c4	c9 ff		cmp #$ff			cmp 	#$FF
.15c6	f0 2b		beq $15f3			beq  	CompareTrue
.15c8	4c f6 15	jmp $15f6			jmp 	CompareFalse
.15cb					CompareGreater:
.15cb	20 7f 15	jsr $157f			jsr 	PerformComparison
.15ce	c9 01		cmp #$01			cmp 	#$01
.15d0	f0 21		beq $15f3			beq  	CompareTrue
.15d2	4c f6 15	jmp $15f6			jmp 	CompareFalse
.15d5					CompareNotEquals:
.15d5	20 7f 15	jsr $157f			jsr 	PerformComparison
.15d8	c9 00		cmp #$00			cmp 	#$00
.15da	d0 17		bne $15f3			bne  	CompareTrue
.15dc	4c f6 15	jmp $15f6			jmp 	CompareFalse
.15df					CompareGreaterEq:
.15df	20 7f 15	jsr $157f			jsr 	PerformComparison
.15e2	c9 ff		cmp #$ff			cmp 	#$FF
.15e4	d0 0d		bne $15f3			bne  	CompareTrue
.15e6	4c f6 15	jmp $15f6			jmp 	CompareFalse
.15e9					CompareLessEq:
.15e9	20 7f 15	jsr $157f			jsr 	PerformComparison
.15ec	c9 01		cmp #$01			cmp 	#$01
.15ee	d0 03		bne $15f3			bne  	CompareTrue
.15f0	4c f6 15	jmp $15f6			jmp 	CompareFalse
.15f3					CompareTrue:
.15f3	4c 3c 1c	jmp $1c3c			jmp 	MInt32True
.15f6					CompareFalse:
.15f6	4c 40 1c	jmp $1c40			jmp 	MInt32False

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/dereference.asm

.15f9					DereferenceTwo:
.15f9	e8		inx				inx
.15fa	20 fe 15	jsr $15fe			jsr 	DereferenceOne
.15fd	ca		dex				dex
.15fe					DereferenceOne:
.15fe	b5 40		lda $40,x			lda 	esType,x
.1600	10 3d		bpl $163f			bpl 	_DRNotReference 			; is it a reference ?
.1602	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1603	b0 3b		bcs $1640			bcs 	_DRFloatDeReference
.1605	98		tya				tya
.1606	48		pha				pha
.1607	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1609	85 04		sta $04				sta 	temp0
.160b	b5 50		lda $50,x			lda 	esInt1,x
.160d	85 05		sta $05				sta 	temp0+1
.160f	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1611	95 50		sta $50,x			sta 	esInt1,x
.1613	95 58		sta $58,x			sta 	esInt2,x
.1615	95 60		sta $60,x			sta 	esInt3,x
.1617	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1619	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.161b	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.161c	30 0d		bmi $162b			bmi 	_DeRefString 				; string, 2 bytes only
.161e	d0 11		bne $1631			bne 	_DeRefByte 					; byte 1 byte only
.1620					_DeRefLong:
.1620	a0 03		ldy #$03			ldy 	#3
.1622	b1 04		lda ($04),y			lda 	(temp0),y
.1624	95 60		sta $60,x			sta 	esInt3,x
.1626	88		dey				dey
.1627	b1 04		lda ($04),y			lda 	(temp0),y
.1629	95 58		sta $58,x			sta 	esInt2,x
.162b					_DeRefString:
.162b	a0 01		ldy #$01			ldy 	#1
.162d	b1 04		lda ($04),y			lda 	(temp0),y
.162f	95 50		sta $50,x			sta 	esInt1,x
.1631					_DeRefByte:
.1631	a0 00		ldy #$00			ldy 	#0
.1633	b1 04		lda ($04),y			lda 	(temp0),y
.1635	95 48		sta $48,x			sta 	esInt0,x
.1637	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1639	29 40		and #$40			and 	#$40
.163b	95 40		sta $40,x			sta 	esType,x
.163d	68		pla				pla
.163e	a8		tay				tay
.163f					_DRNotReference
.163f	60		rts				rts
.1640					_DRFloatDereference:
.1640	8a		txa				txa
.1641							floatingpoint_deref
.1641	aa		tax				tax
.1642	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.1644	95 40		sta $40,x			sta 	esType,x
.1646	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/evaluate.asm

.1647					EvaluateLevel:
.1647	48		pha				pha 								; save precedence level.
.1648	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.164a	95 48		sta $48,x			sta 	esInt0,x
.164c	95 50		sta $50,x			sta 	esInt1,x
.164e	95 58		sta $58,x			sta 	esInt2,x
.1650	95 60		sta $60,x			sta 	esInt3,x
.1652	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1654	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1656	30 21		bmi $1679			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1658	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1659	30 0a		bmi $1665			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.165b	8a		txa				txa 								; stack level in X
.165c	a2 00		ldx #$00		ldx	#0
.165e	20 cf 1e	jsr $1ecf		jsr	variableHandler
.1661	aa		tax				tax
.1662	4c a2 16	jmp $16a2			jmp		_ELHasTerm
.1665					_ELIsConstant:
.1665	4a		lsr a				lsr 	a 							; get the value back
.1666	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1668	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.166a					_ELCheckNext:
.166a	c8		iny				iny 								; look at next
.166b	b1 02		lda ($02),y			lda 	(codePtr),y
.166d	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.166f	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1671	b0 2f		bcs $16a2			bcs 	_ELHasTerm 					; done getting the constant.
.1673	20 af 17	jsr $17af			jsr 	ELShiftByteIn 				; shift byte into position.
.1676	4c 6a 16	jmp $166a			jmp 	_ELCheckNext
.1679					_ELIsToken:
.1679	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.167b	f0 0f		beq $168c			beq 	_ELIsString
.167d	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.167f	d0 5f		bne $16e0			bne 	_ELCheckUnary
.1681	8a		txa				txa 								; put X into A
.1682	c8		iny				iny 								; skip over the float marker
.1683	a2 18		ldx #$18		ldx	#24
.1685	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1688	aa		tax				tax 								; restore X
.1689	4c a2 16	jmp $16a2			jmp 	_ELHasTerm
.168c					_ELIsString:
.168c	98		tya				tya 								; address of string is codePtr+y+1
.168d	38		sec				sec
.168e	65 02		adc $02				adc 	codePtr
.1690	95 48		sta $48,x			sta 	esInt0,x
.1692	a5 03		lda $03				lda 	codePtr+1
.1694	69 00		adc #$00			adc 	#0
.1696	95 50		sta $50,x			sta 	esInt1,x
.1698	a9 40		lda #$40			lda 	#$40 						; set type to string value
.169a	95 40		sta $40,x			sta 	esType,x
.169c	c8		iny				iny 								; skip over string.
.169d	98		tya				tya
.169e	38		sec				sec									; +1 for the length itself.
.169f	71 02		adc ($02),y			adc 	(codePtr),y
.16a1	a8		tay				tay 								; and fall through to term loop code.
.16a2					_ELHasTerm:
.16a2	b1 02		lda ($02),y			lda 	(codePtr),y
.16a4	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.16a6	90 04		bcc $16ac			bcc 	_ELPopExit
.16a8	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.16aa	90 02		bcc $16ae			bcc 	_ELHasBinaryTerm
.16ac					_ELPopExit:
.16ac	68		pla				pla
.16ad					_ELExit:
.16ad	60		rts				rts
.16ae					_ELHasBinaryTerm:
.16ae	84 0a		sty $0a				sty 	tempShort 					; save position
.16b0	a8		tay				tay 								; use token as an index and get the precedence.
.16b1	b9 57 17	lda $1757,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.16b4	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16b6	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.16b8	68		pla				pla 								; restore current level.
.16b9	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.16bb	b0 f0		bcs $16ad			bcs 	_ELExit
.16bd	48		pha				pha 								; save current level back on the stack.
.16be	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.16c0	48		pha				pha
.16c1	c8		iny				iny
.16c2	e8		inx				inx 								; calculate the RHS at the operator precedence.
.16c3	a5 0a		lda $0a				lda 	tempShort
.16c5	20 47 16	jsr $1647			jsr 	EvaluateLevel
.16c8	ca		dex				dex
.16c9	68		pla				pla 								; get the operator back out.
.16ca					_ELExecuteA:
.16ca	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.16cc	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.16cd	aa		tax				tax
.16ce	bd 90 12	lda $1290,x			lda 	Group0Vectors,x
.16d1	85 04		sta $04				sta 	temp0
.16d3	bd 91 12	lda $1291,x			lda 	Group0Vectors+1,x
.16d6	85 05		sta $05				sta 	temp0+1
.16d8	a6 0a		ldx $0a				ldx 	tempShort
.16da	20 23 17	jsr $1723			jsr 	_ELCallTemp0
.16dd	4c a2 16	jmp $16a2			jmp 	_ELHasTerm 					; and loop back round.
.16e0					_ELCheckUnary:
.16e0	c8		iny				iny 								; skip over token.
.16e1	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.16e3	f0 15		beq $16fa			beq 	_ELMinus
.16e5	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.16e7	f0 28		beq $1711			beq 	_ELIndirect
.16e9	c9 98		cmp #$98			cmp 	#TKW_QMARK
.16eb	f0 24		beq $1711			beq 	_ELIndirect
.16ed	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.16ef	90 04		bcc $16f5			bcc 	_ELUSyntax
.16f1	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.16f3	90 d5		bcc $16ca			bcc 	_ELExecuteA 				; if so do that token.
.16f5					_ELUSyntax:
.16f5	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.16f7	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.16fa					_ELMinus:
.16fa	20 38 17	jsr $1738			jsr 	EvaluateNumericTerm 		; get a number to negate.
.16fd	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.16ff	f0 0a		beq $170b			beq 	_ELMinusInteger
.1701	8a		txa				txa
.1702	a2 0c		ldx #$0c		ldx	#12
.1704	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1707	aa		tax				tax
.1708	4c a2 16	jmp $16a2			jmp 	_ELHasTerm
.170b					_ELMinusInteger:
.170b	20 fa 1b	jsr $1bfa			jsr 	MInt32Negate 				; do int negate
.170e	4c a2 16	jmp $16a2			jmp 	_ELHasTerm
.1711					_ELIndirect:
.1711	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1712	20 41 17	jsr $1741			jsr 	EvaluateIntegerTerm 		; integer address
.1715	68		pla				pla
.1716	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1718	f0 02		beq $171c			beq 	_ELHaveModifier
.171a	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.171c					_ELHaveModifier:
.171c	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.171e	95 40		sta $40,x			sta 	esType,x
.1720	4c a2 16	jmp $16a2			jmp 	_ELHasTerm
.1723					_ELCallTemp0:
.1723	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1726					UnaryParenthesis:
.1726	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1728	20 47 16	jsr $1647			jsr 	EvaluateLevel
.172b	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen 			; check for )
.172e	60		rts				rts
.172f					EvaluateTerm:
.172f	a9 0f		lda #$0f			lda 	#15
.1731	20 47 16	jsr $1647			jsr 	EvaluateLevel
.1734	20 fe 15	jsr $15fe			jsr 	DereferenceOne
.1737	60		rts				rts
.1738					EvaluateNumericTerm:
.1738	20 2f 17	jsr $172f			jsr 	EvaluateTerm
.173b	b5 40		lda $40,x			lda 	esType,x
.173d	0a		asl a				asl 	a 							; see if it's a string.
.173e	30 09		bmi $1749			bmi 	ENTType
.1740	60		rts				rts
.1741					EvaluateIntegerTerm:
.1741	20 2f 17	jsr $172f			jsr 	EvaluateTerm
.1744	b5 40		lda $40,x			lda 	esType,x
.1746	d0 01		bne $1749			bne 	ENTType
.1748	60		rts				rts
.1749					ENTType:
.1749	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.174b	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.174e					EvaluateRoot:
.174e	a2 00		ldx #$00			ldx 	#0
.1750					Evaluate:
.1750	a9 00		lda #$00			lda 	#0
.1752	20 47 16	jsr $1647			jsr 	EvaluateLevel
.1755	20 fe 15	jsr $15fe			jsr 	DereferenceOne
.1758	60		rts				rts
.1759					EvaluateNumeric:
.1759	20 50 17	jsr $1750			jsr 	Evaluate
.175c	b5 40		lda $40,x			lda 	esType,x
.175e	0a		asl a				asl 	a 							; see if it's a string.
.175f	30 e8		bmi $1749			bmi 	ENTType
.1761	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1762	4a		lsr a				lsr 	a
.1763	60		rts				rts
.1764					EvaluateString:
.1764	20 50 17	jsr $1750			jsr 	Evaluate
.1767	b5 40		lda $40,x			lda 	esType,x
.1769	0a		asl a				asl 	a 							; see if it's a string.
.176a	10 dd		bpl $1749			bpl 	ENTType
.176c	60		rts				rts
.176d					EvaluateRootInteger:
.176d	a2 00		ldx #$00			ldx 	#0
.176f					EvaluateInteger:
.176f	20 50 17	jsr $1750			jsr 	Evaluate
.1772	b5 40		lda $40,x			lda 	esType,x
.1774	d0 d3		bne $1749			bne 	ENTType
.1776	60		rts				rts
.1777					EvaluateSmallInteger:
.1777	20 6f 17	jsr $176f			jsr 	EvaluateInteger
.177a	b5 50		lda $50,x			lda 	esInt1,x
.177c	15 58		ora $58,x			ora 	esInt2,x
.177e	15 60		ora $60,x			ora 	esInt3,x
.1780	d0 03		bne $1785			bne 	_ESIValue
.1782	b5 48		lda $48,x			lda 	esInt0,x
.1784	60		rts				rts
.1785					_ESIValue:
.1785	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1787	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.178a					LinkEvaluate:
.178a	aa		tax				tax
.178b	20 50 17	jsr $1750			jsr 	Evaluate
.178e	8a		txa				txa
.178f	60		rts				rts
.1790					LinkEvaluateInteger:
.1790	aa		tax				tax
.1791	20 6f 17	jsr $176f			jsr 	EvaluateInteger
.1794	8a		txa				txa
.1795	60		rts				rts
.1796					LinkEvaluateSmallInt:
.1796	aa		tax				tax
.1797	20 77 17	jsr $1777			jsr 	EvaluateSmallInteger
.179a	8a		txa				txa
.179b	60		rts				rts
.179c					EvaluateReference:
.179c	ad ee 17	lda $17ee			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.179f	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.17a0	e9 01		sbc #$01			sbc 	#1
.17a2	20 47 16	jsr $1647			jsr 	EvaluateLevel
.17a5	b5 40		lda $40,x			lda 	esType,x
.17a7	10 01		bpl $17aa			bpl 	_ERFail
.17a9	60		rts				rts
.17aa					_ERFail:
.17aa	a2 0a		ldx #$0a			ldx 	#ErrorID_NoReference
.17ac	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.17af					ELShiftByteIn:
.17af	48		pha				pha 								; save bits to shift in.
.17b0	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.17b2	48		pha				pha
.17b3	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.17b5	95 60		sta $60,x			sta 	esInt3,x
.17b7	b5 50		lda $50,x			lda 	esInt1,x
.17b9	95 58		sta $58,x			sta 	esInt2,x
.17bb	b5 48		lda $48,x			lda 	esInt0,x
.17bd	95 50		sta $50,x			sta 	esInt1,x
.17bf	a9 00		lda #$00			lda 	#0
.17c1	95 48		sta $48,x			sta 	esInt0,x
.17c3	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.17c4	29 03		and #$03			and 	#3 							; only want lower 2 bits
.17c6	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.17c8					_ELShiftLoop:
.17c8	4a		lsr a				lsr 	a
.17c9	76 60		ror $60,x			ror 	esInt3,x
.17cb	76 58		ror $58,x			ror 	esInt2,x
.17cd	76 50		ror $50,x			ror 	esInt1,x
.17cf	76 48		ror $48,x			ror 	esInt0,x
.17d1	c9 01		cmp #$01			cmp 	#1
.17d3	d0 f3		bne $17c8			bne 	_ELShiftLoop
.17d5	68		pla				pla 								; get original 6 bit value and OR in.
.17d6	29 3f		and #$3f			and 	#$3F
.17d8	15 48		ora $48,x			ora 	esInt0,x
.17da	95 48		sta $48,x			sta 	esInt0,x
.17dc	60		rts				rts
.17dd					ELBinaryOperatorInfo:

;******  Processing file: ../source/main/evaluate/../../generated/binarystructinfo.inc

>17dd	01					.byte	$01			; $86 and
>17de	01					.byte	$01			; $87 or
>17df	01					.byte	$01			; $88 xor
>17e0	02					.byte	$02			; $89 >=
>17e1	02					.byte	$02			; $8a <=
>17e2	02					.byte	$02			; $8b >
>17e3	02					.byte	$02			; $8c <
>17e4	02					.byte	$02			; $8d =
>17e5	02					.byte	$02			; $8e <>
>17e6	03					.byte	$03			; $8f +
>17e7	03					.byte	$03			; $90 -
>17e8	04					.byte	$04			; $91 >>
>17e9	04					.byte	$04			; $92 <<
>17ea	04					.byte	$04			; $93 *
>17eb	04					.byte	$04			; $94 /
>17ec	04					.byte	$04			; $95 mod
>17ed	05					.byte	$05			; $96 ^
>17ee	06					.byte	$06			; $97 !
>17ef	06					.byte	$06			; $98 ?
>17f0	82					.byte	$82			; $99 repeat
>17f1	82					.byte	$82			; $9a while
>17f2	82					.byte	$82			; $9b for
>17f3	82					.byte	$82			; $9c if
>17f4	80					.byte	$80			; $9d until
>17f5	80					.byte	$80			; $9e wend
>17f6	80					.byte	$80			; $9f next
>17f7	80					.byte	$80			; $a0 then
>17f8	80					.byte	$80			; $a1 endif

;******  Return to file: ../source/main/evaluate/evaluate.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unary.asm

.17f9					UnaryLen:
.17f9	20 07 18	jsr $1807			jsr 	ULStart
.17fc					ULFinish:
.17fc	b1 04		lda ($04),y			lda 	(temp0),y
.17fe	a4 0a		ldy $0a				ldy 	tempShort
.1800	20 4f 1c	jsr $1c4f			jsr 	MInt32Set8Bit
.1803	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen
.1806	60		rts				rts
.1807	20 64 17	jsr $1764	ULStart:jsr 	EvaluateString
.180a	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.180c	85 04		sta $04				sta 	temp0
.180e	b5 50		lda $50,x			lda 	esInt1,x
.1810	85 05		sta $05				sta 	temp0+1
.1812	84 0a		sty $0a				sty 	tempShort 					; get length
.1814	a0 00		ldy #$00			ldy 	#0
.1816	60		rts				rts
.1817					UnaryAsc:
.1817	20 07 18	jsr $1807			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.181a	b1 04		lda ($04),y			lda 	(temp0),y
.181c	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.181d	c9 00		cmp #$00			cmp 	#0
.181f	d0 db		bne $17fc			bne 	ULFinish
.1821	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1823	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1826					UnaryAbs:
.1826	20 59 17	jsr $1759			jsr 	EvaluateNumeric
.1829	b0 07		bcs $1832			bcs 	_UAFloat
.182b	20 f5 1b	jsr $1bf5			jsr 	MInt32Absolute
.182e	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen
.1831	60		rts				rts
.1832					_UAFloat:
.1832	8a		txa				txa
.1833	a2 00		ldx #$00		ldx	#0
.1835	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1838	aa		tax				tax
.1839	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen
.183c	60		rts				rts
.183d					UnarySgn:
.183d	20 59 17	jsr $1759			jsr 	EvaluateNumeric
.1840	b0 07		bcs $1849			bcs 	_USFloat
.1842	20 2d 1c	jsr $1c2d			jsr 	MInt32Sign
.1845	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen
.1848	60		rts				rts
.1849					_USFloat:
.1849	8a		txa				txa
.184a	a2 0e		ldx #$0e		ldx	#14
.184c	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.184f	aa		tax				tax
.1850	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen
.1853	60		rts				rts
.1854					UnaryPeek:
.1854	20 80 18	jsr $1880			jsr 	PDLCode
.1857	4c 74 18	jmp $1874			jmp 	PDLByte0
.185a					UnaryDeek:
.185a	20 80 18	jsr $1880			jsr 	PDLCode
.185d	4c 6e 18	jmp $186e			jmp 	PDLByte1
.1860					UnaryLeek:
.1860	20 80 18	jsr $1880			jsr 	PDLCode
.1863	a0 03		ldy #$03			ldy 	#3
.1865	b1 04		lda ($04),y			lda 	(temp0),y
.1867	95 60		sta $60,x			sta 	esInt3,x
.1869	88		dey				dey
.186a	b1 04		lda ($04),y			lda 	(temp0),y
.186c	95 58		sta $58,x			sta 	esInt2,x
.186e					PDLByte1:
.186e	a0 01		ldy #$01			ldy 	#1
.1870	b1 04		lda ($04),y			lda 	(temp0),y
.1872	95 50		sta $50,x			sta 	esInt1,x
.1874					PDLByte0:
.1874	a0 00		ldy #$00			ldy 	#0
.1876	b1 04		lda ($04),y			lda 	(temp0),y
.1878	95 48		sta $48,x			sta 	esInt0,x
.187a	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.187c	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen 			; check right and return
.187f	60		rts				rts
.1880					PDLCode:
.1880	20 6f 17	jsr $176f			jsr 	EvaluateInteger
.1883	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1885	85 04		sta $04				sta 	temp0
.1887	b5 50		lda $50,x			lda 	esInt1,x
.1889	85 05		sta $05				sta 	temp0+1
.188b	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.188d	95 50		sta $50,x			sta 	esInt1,x
.188f	95 58		sta $58,x			sta 	esInt2,x
.1891	95 60		sta $60,x			sta 	esInt3,x
.1893	84 0a		sty $0a				sty 	tempShort 					; save Y
.1895	60		rts				rts
.1896					Unary_Random:
.1896	20 70 1c	jsr $1c70			jsr 	MInt32Random 				; generate random number.
.1899	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.189b	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.189d	f0 08		beq $18a7			beq 	_URExit
.189f	e8		inx				inx 								; load range 0..r-1 into +1
.18a0	20 6f 17	jsr $176f			jsr 	EvaluateInteger
.18a3	ca		dex				dex
.18a4	20 b7 1a	jsr $1ab7			jsr 	MInt32Modulus 				; calculate random % modulus
.18a7					_URExit:
.18a7	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen 			; check right and return
.18aa	60		rts				rts
.18ab					Unary_Min:
.18ab	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.18ad	d0 02		bne $18b1			bne 	UnaryMBody
.18af					Unary_Max:
.18af	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.18b1					UnaryMBody:
.18b1	48		pha				pha 								; save comparator on stack.
.18b2	20 50 17	jsr $1750			jsr 	Evaluate 					; get the first thing to check
.18b5					_UnaryMLoop:
.18b5	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.18b7	c8		iny				iny
.18b8	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.18ba	f0 09		beq $18c5			beq 	_UnaryMExit
.18bc	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.18be	f0 07		beq $18c7			beq 	_UnaryMCompare
.18c0	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.18c2	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.18c5					_UnaryMExit:
.18c5	68		pla				pla 								; throw comparator and return.
.18c6	60		rts				rts
.18c7					_UnaryMCompare:
.18c7	e8		inx				inx 								; get the 2nd thing to evaluate
.18c8	20 50 17	jsr $1750			jsr 	Evaluate
.18cb	ca		dex				dex
.18cc	20 7f 15	jsr $157f			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.18cf	85 0a		sta $0a				sta 	tempShort 					; save result
.18d1	68		pla				pla 								; get what we need
.18d2	48		pha				pha
.18d3	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.18d5	d0 de		bne $18b5			bne 	_UnaryMLoop 				; no, try another value.
.18d7	20 40 1c	jsr $1c40			jsr 	MInt32False 				; promote 2nd to 1st.
.18da	20 2b 1b	jsr $1b2b			jsr 	MInt32Add
.18dd	4c b5 18	jmp $18b5			jmp 	_UnaryMLoop
.18e0					Unary_Page:
.18e0	20 40 1c	jsr $1c40			jsr 	MInt32False 				; zero
.18e3	ad 68 08	lda $0868			lda 	basePage 					; copy base page address in.
.18e6	95 48		sta $48,x			sta 	esInt0,x
.18e8	ad 69 08	lda $0869			lda 	basePage+1
.18eb	95 50		sta $50,x			sta 	esInt1,x
.18ed	60		rts				rts
.18ee					UnaryReference:
.18ee	a9 0f		lda #$0f			lda 	#15
.18f0	20 47 16	jsr $1647			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.18f3	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.18f5	10 05		bpl $18fc			bpl 	UType
.18f7	a9 00		lda #$00			lda 	#0 							; make it an integer
.18f9	95 40		sta $40,x			sta 	esType,x
.18fb	60		rts				rts
.18fc					UType:
.18fc	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.18fe	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1901					UnaryHexMarker:
.1901	4c 41 17	jmp $1741			jmp 	EvaluateIntegerTerm
.1904					UnaryComplement:
.1904	20 41 17	jsr $1741			jsr 	EvaluateIntegerTerm
.1907	20 14 1c	jsr $1c14			jsr 	MInt32Not
.190a	60		rts				rts
.190b					UnaryIntToFloat:
.190b	20 59 17	jsr $1759			jsr 	EvaluateNumeric
.190e	b5 40		lda $40,x			lda 	esType,x
.1910	d0 0b		bne $191d			bne 	_UIFExit
.1912	8a		txa				txa
.1913	a2 1a		ldx #$1a		ldx	#26
.1915	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.1918	aa		tax				tax
.1919	a9 01		lda #$01			lda 	#1
.191b	95 40		sta $40,x			sta 	esType,x
.191d					_UIFExit:
.191d	60		rts				rts
.191e					UnaryFloatToInt:
.191e	20 59 17	jsr $1759			jsr 	EvaluateNumeric
.1921	b5 40		lda $40,x			lda 	esType,x
.1923	f0 07		beq $192c			beq 	_UFIExit
.1925	8a		txa				txa
.1926	a2 12		ldx #$12		ldx	#18
.1928	20 54 1d	jsr $1d54		jsr	floatingpointHandler
.192b	aa		tax				tax
.192c					_UFIExit:
.192c	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unarystr.asm

.192d					ExecChr:
.192d	20 77 17	jsr $1777			jsr 	EvaluateSmallInteger		; character number
.1930	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen				; right bracket
.1933	98		tya				tya
.1934	48		pha				pha
.1935	8a		txa				txa 								; A = stack
.1936	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1938	a2 00		ldx #$00		ldx	#0
.193a	20 a1 1e	jsr $1ea1		jsr	stringHandler
.193d	aa		tax				tax 								; X = stack
.193e	68		pla				pla
.193f	a8		tay				tay
.1940	60		rts				rts
.1941					ExecLeft:
.1941	20 64 17	jsr $1764			jsr 	EvaluateString 				; string to stack,X
.1944	20 c0 1c	jsr $1cc0			jsr 	CheckComma
.1947	e8		inx				inx
.1948	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.194a	20 4f 1c	jsr $1c4f			jsr 	MInt32Set8Bit
.194d	e8		inx				inx
.194e	20 77 17	jsr $1777			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1951					ExecSubstring:
.1951	ca		dex				dex 								; fix up X
.1952	ca		dex				dex
.1953	20 b3 1c	jsr $1cb3			jsr 	CheckRightParen 			; check closing right bracket.
.1956	8a		txa				txa 								; do the substring and exit.
.1957	a2 06		ldx #$06		ldx	#6
.1959	20 a1 1e	jsr $1ea1		jsr	stringHandler
.195c	aa		tax				tax
.195d	60		rts				rts
.195e					ExecMid:
.195e	20 64 17	jsr $1764			jsr 	EvaluateString 				; string to stack,X
.1961	20 c0 1c	jsr $1cc0			jsr 	CheckComma
.1964	e8		inx				inx
.1965	20 77 17	jsr $1777			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1968	c9 00		cmp #$00			cmp 	#0
.196a	f0 15		beq $1981			beq 	_EMValue
.196c	e8		inx				inx
.196d	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.196f	20 4f 1c	jsr $1c4f			jsr 	MInt32Set8Bit
.1972	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.1974	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.1976	f0 d9		beq $1951			beq 	ExecSubString
.1978	20 c0 1c	jsr $1cc0			jsr 	CheckComma
.197b	20 77 17	jsr $1777			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.197e	4c 51 19	jmp $1951			jmp 	ExecSubString
.1981					_EMValue:
.1981	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1983	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1986					ExecRight:
.1986	20 64 17	jsr $1764			jsr 	EvaluateString 				; string to stack,X
.1989	20 c0 1c	jsr $1cc0			jsr 	CheckComma
.198c	e8		inx				inx
.198d	20 77 17	jsr $1777			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.1990	ca		dex				dex
.1991	98		tya				tya
.1992	48		pha				pha
.1993	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1995	85 04		sta $04				sta 	temp0
.1997	b5 50		lda $50,x			lda 	esInt1,x
.1999	85 05		sta $05				sta 	temp0+1
.199b	a0 00		ldy #$00			ldy 	#0 							; point to length
.199d	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.199f	18		clc				clc 								; add 1.
.19a0	69 01		adc #$01			adc 	#1
.19a2	38		sec				sec
.19a3	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.19a5	f0 02		beq $19a9			beq		_ERMake1 					; if zero, make it 1.
.19a7	b0 02		bcs $19ab			bcs		_EROkay
.19a9					_ERMake1:
.19a9	a9 01		lda #$01			lda 	#1 							; start position.
.19ab					_EROkay:
.19ab	e8		inx				inx 								; set start pos.
.19ac	95 48		sta $48,x			sta 	esInt0,x
.19ae	e8		inx				inx
.19af	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.19b1	20 4f 1c	jsr $1c4f			jsr 	MInt32Set8Bit
.19b4	68		pla				pla
.19b5	a8		tay				tay
.19b6	4c 51 19	jmp $1951			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32binary.asm

.19b9					MInt32And:
.19b9	b5 48		lda $48,x			lda 	esInt0,x
.19bb	35 49		and $49,x			and 	esInt0+1,x
.19bd	95 48		sta $48,x			sta 	esInt0,x
.19bf	b5 50		lda $50,x			lda 	esInt1,x
.19c1	35 51		and $51,x			and 	esInt1+1,x
.19c3	95 50		sta $50,x			sta 	esInt1,x
.19c5	b5 58		lda $58,x			lda 	esInt2,x
.19c7	35 59		and $59,x			and 	esInt2+1,x
.19c9	95 58		sta $58,x			sta 	esInt2,x
.19cb	b5 60		lda $60,x			lda 	esInt3,x
.19cd	35 61		and $61,x			and 	esInt3+1,x
.19cf	95 60		sta $60,x			sta 	esInt3,x
.19d1	60		rts				rts
.19d2					MInt32Or:
.19d2	b5 48		lda $48,x			lda 	esInt0,x
.19d4	15 49		ora $49,x			ora 	esInt0+1,x
.19d6	95 48		sta $48,x			sta 	esInt0,x
.19d8	b5 50		lda $50,x			lda 	esInt1,x
.19da	15 51		ora $51,x			ora 	esInt1+1,x
.19dc	95 50		sta $50,x			sta 	esInt1,x
.19de	b5 58		lda $58,x			lda 	esInt2,x
.19e0	15 59		ora $59,x			ora 	esInt2+1,x
.19e2	95 58		sta $58,x			sta 	esInt2,x
.19e4	b5 60		lda $60,x			lda 	esInt3,x
.19e6	15 61		ora $61,x			ora 	esInt3+1,x
.19e8	95 60		sta $60,x			sta 	esInt3,x
.19ea	60		rts				rts
.19eb					MInt32Xor:
.19eb	b5 48		lda $48,x			lda 	esInt0,x
.19ed	55 49		eor $49,x			eor 	esInt0+1,x
.19ef	95 48		sta $48,x			sta 	esInt0,x
.19f1	b5 50		lda $50,x			lda 	esInt1,x
.19f3	55 51		eor $51,x			eor 	esInt1+1,x
.19f5	95 50		sta $50,x			sta 	esInt1,x
.19f7	b5 58		lda $58,x			lda 	esInt2,x
.19f9	55 59		eor $59,x			eor 	esInt2+1,x
.19fb	95 58		sta $58,x			sta 	esInt2,x
.19fd	b5 60		lda $60,x			lda 	esInt3,x
.19ff	55 61		eor $61,x			eor 	esInt3+1,x
.1a01	95 60		sta $60,x			sta 	esInt3,x
.1a03	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32compare.asm

.1a04					MInt32Compare:
.1a04	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1a06	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1a08	d0 13		bne $1a1d			bne 	MInt32Compare2
.1a0a	b5 50		lda $50,x			lda 	esInt1,x
.1a0c	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1a0e	d0 0d		bne $1a1d			bne 	MInt32Compare2
.1a10	b5 58		lda $58,x			lda 	esInt2,x
.1a12	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1a14	d0 07		bne $1a1d			bne 	MInt32Compare2
.1a16	b5 60		lda $60,x			lda 	esInt3,x
.1a18	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1a1a	d0 01		bne $1a1d			bne 	MInt32Compare2
.1a1c	60		rts				rts
.1a1d					MInt32Compare2:
.1a1d	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1a1f	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1a21	b5 50		lda $50,x			lda		esInt1,x
.1a23	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1a25	b5 58		lda $58,x			lda		esInt2,x
.1a27	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1a29	b5 60		lda $60,x			lda		esInt3,x
.1a2b	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1a2d	50 02		bvc $1a31			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1a2f	49 80		eor #$80			eor 	#$80
.1a31					_I32LNoOverflow
.1a31	30 03		bmi $1a36			bmi 	MInt32CLess					; if -ve then return $FF
.1a33	a9 01		lda #$01			lda 	#$01						; else return $01
.1a35	60		rts				rts
.1a36					MInt32CLess:
.1a36	a9 ff		lda #$ff			lda 	#$FF
.1a38	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32divide.asm

.1a39					MInt32SDivide:
.1a39	98		tya				tya  								; save Y, which is the count of negations
.1a3a	48		pha				pha
.1a3b	a0 00		ldy #$00			ldy 	#0 							; zero count
.1a3d	20 55 1a	jsr $1a55			jsr 	_MInt32SRemSign 			; unsign TOS
.1a40	e8		inx				inx 								; unsign TOS+1
.1a41	20 55 1a	jsr $1a55			jsr 	_MInt32SRemSign
.1a44	ca		dex				dex
.1a45	98		tya				tya 								; save sign count on stack
.1a46	48		pha				pha
.1a47	20 5e 1a	jsr $1a5e			jsr 	MInt32UDivide 				; unsigned division
.1a4a	68		pla				pla 								; get sign count back
.1a4b	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1a4d	f0 03		beq $1a52			beq 	_I32SNoNeg
.1a4f	20 fa 1b	jsr $1bfa			jsr 	MInt32Negate
.1a52					_I32SNoNeg:
.1a52	68		pla				pla 								; restoe Y and exit
.1a53	a8		tay				tay
.1a54	60		rts				rts
.1a55					_MInt32SRemSign:
.1a55	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1a57	10 04		bpl $1a5d			bpl 	_MInt32SRSExit
.1a59	c8		iny				iny 								; increment the sign count
.1a5a	20 fa 1b	jsr $1bfa			jsr 	MInt32Negate 				; negate the value.
.1a5d					_MInt32SRSExit:
.1a5d	60		rts				rts
.1a5e					MInt32UDivide:
.1a5e	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1a60	15 51		ora $51,x			ora 	esInt1+1,x
.1a62	15 52		ora $52,x			ora 	esInt1+2,x
.1a64	15 53		ora $53,x			ora 	esInt1+3,x
.1a66	f0 4a		beq $1ab2			beq 	_MInt32DZero
.1a68	e8		inx				inx 								; clear A
.1a69	e8		inx				inx
.1a6a	20 40 1c	jsr $1c40			jsr 	MInt32False
.1a6d	ca		dex				dex
.1a6e	ca		dex				dex
.1a6f	98		tya				tya 								; save Y on the stack
.1a70	48		pha				pha
.1a71	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1a73					_MInt32UDLoop:
.1a73	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1a75	36 50		rol $50,x			rol 	esInt1,x
.1a77	36 58		rol $58,x			rol 	esInt2,x
.1a79	36 60		rol $60,x			rol 	esInt3,x
.1a7b	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1a7d	36 52		rol $52,x			rol 	esInt1+2,x
.1a7f	36 5a		rol $5a,x			rol 	esInt2+2,x
.1a81	36 62		rol $62,x			rol 	esInt3+2,x
.1a83	38		sec				sec 								; calculate A-M saving result on the stack
.1a84	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1a86	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1a88	48		pha				pha
.1a89	b5 52		lda $52,x			lda 	esInt1+2,x
.1a8b	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1a8d	48		pha				pha
.1a8e	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1a90	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1a92	48		pha				pha
.1a93	b5 62		lda $62,x			lda 	esInt3+2,x
.1a95	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1a97	90 10		bcc $1aa9			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1a99	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1a9b	68		pla				pla
.1a9c	95 5a		sta $5a,x			sta 	esInt2+2,x
.1a9e	68		pla				pla
.1a9f	95 52		sta $52,x			sta 	esInt1+2,x
.1aa1	68		pla				pla
.1aa2	95 4a		sta $4a,x			sta 	esInt0+2,x
.1aa4	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1aa6	4c ac 1a	jmp $1aac			jmp 	_MInt32Next 					; do the next iteration
.1aa9					_MInt32NoSubtract:
.1aa9	68		pla				pla
.1aaa	68		pla				pla
.1aab	68		pla				pla
.1aac					_MInt32Next:
.1aac	88		dey				dey 								; do this 32 times.
.1aad	d0 c4		bne $1a73			bne 	_MInt32UDLoop
.1aaf	68		pla				pla 								; restore Y and exit
.1ab0	a8		tay				tay
.1ab1	60		rts				rts
.1ab2					_MInt32DZero:
.1ab2	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.1ab4	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1ab7					MInt32Modulus:
.1ab7	20 5e 1a	jsr $1a5e			jsr 	MInt32UDivide 				; do the division.
.1aba	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1abc	95 60		sta $60,x			sta 	esInt3,x
.1abe	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1ac0	95 58		sta $58,x			sta 	esInt2,x
.1ac2	b5 52		lda $52,x			lda 	esInt1+2,x
.1ac4	95 50		sta $50,x			sta 	esInt1,x
.1ac6	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1ac8	95 48		sta $48,x			sta 	esInt0,x
.1aca	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32fromstr.asm

.1acb					MInt32FromString:
.1acb	85 0a		sta $0a				sta 	tempShort 					; save base
.1acd	98		tya				tya
.1ace	48		pha				pha
.1acf	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1ad1	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1ad3	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1ad5	d0 01		bne $1ad8			bne 	_I32FSNotNegative
.1ad7	c8		iny				iny 								; if so consume it.
.1ad8					_I32FSNotNegative:
.1ad8	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1ada	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1adc	f0 02		beq $1ae0			beq 	_I32FSNN2
.1ade	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1ae0					_I32FSNN2:
.1ae0	48		pha				pha 								; save base + final sign on stack.
.1ae1	20 40 1c	jsr $1c40			jsr 	MInt32False 					; zero the return value.
.1ae4					I32FSMainLoop:
.1ae4	68		pla				pla 								; get the base back into tempshort
.1ae5	48		pha				pha
.1ae6	29 7f		and #$7f			and 	#$7F
.1ae8	85 0a		sta $0a				sta 	tempShort
.1aea	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1aec	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1aee	90 02		bcc $1af2			bcc 	_I32FSNotLC
.1af0	e9 20		sbc #$20			sbc 	#32
.1af2					_I32FSNotLC:
.1af2	38		sec				sec 								; subtract 48 (ASCII "0")
.1af3	e9 30		sbc #$30			sbc 	#"0"
.1af5	90 26		bcc $1b1d			bcc 	_I32FSDone 					; nothing more to do.
.1af7	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1af9	90 06		bcc $1b01			bcc 	_I32FSValidate
.1afb	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1afd	90 1e		bcc $1b1d			bcc 	_I32FSDone
.1aff	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1b01					_I32FSValidate:
.1b01	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1b03	b0 18		bcs $1b1d			bcs 	_I32FSDone 					; sorry, too large for this base.
.1b05	48		pha				pha 								; save the new digit value.
.1b06	e8		inx				inx 								; put base into next slot.
.1b07	a5 0a		lda $0a				lda 	tempShort
.1b09	20 4f 1c	jsr $1c4f			jsr 	MInt32Set8Bit
.1b0c	ca		dex				dex
.1b0d	20 5f 1b	jsr $1b5f			jsr 	MInt32Multiply 				; multiply current by the base
.1b10	e8		inx				inx
.1b11	68		pla				pla  								; put additive into next slot
.1b12	20 4f 1c	jsr $1c4f			jsr 	MInt32Set8Bit
.1b15	ca		dex				dex
.1b16	20 2b 1b	jsr $1b2b			jsr 	MInt32Add 					; and add it
.1b19	c8		iny				iny 								; look at next character
.1b1a	4c e4 1a	jmp $1ae4			jmp 	I32FSMainLoop 				; and go round again.
.1b1d					_I32FSDone:
.1b1d	68		pla				pla 								; get base/final sign back
.1b1e	10 04		bpl $1b24			bpl 	_I32FSNN3
.1b20	88		dey				dey 								; one fewer character to allow for the - prefix.
.1b21	20 fa 1b	jsr $1bfa			jsr 	MInt32Negate 				; negate the result.
.1b24					_I32FSNN3:
.1b24	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1b26	68		pla				pla
.1b27	a8		tay				tay
.1b28	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1b2a	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32math.asm

.1b2b					MInt32Add:
.1b2b	18		clc				clc
.1b2c	b5 48		lda $48,x			lda 	esInt0,x
.1b2e	75 49		adc $49,x			adc 	esInt0+1,x
.1b30	95 48		sta $48,x			sta 	esInt0,x
.1b32	b5 50		lda $50,x			lda 	esInt1,x
.1b34	75 51		adc $51,x			adc 	esInt1+1,x
.1b36	95 50		sta $50,x			sta 	esInt1,x
.1b38	b5 58		lda $58,x			lda 	esInt2,x
.1b3a	75 59		adc $59,x			adc 	esInt2+1,x
.1b3c	95 58		sta $58,x			sta 	esInt2,x
.1b3e	b5 60		lda $60,x			lda 	esInt3,x
.1b40	75 61		adc $61,x			adc 	esInt3+1,x
.1b42	95 60		sta $60,x			sta 	esInt3,x
.1b44	60		rts				rts
.1b45					MInt32Sub:
.1b45	38		sec				sec
.1b46	b5 48		lda $48,x			lda 	esInt0,x
.1b48	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1b4a	95 48		sta $48,x			sta 	esInt0,x
.1b4c	b5 50		lda $50,x			lda 	esInt1,x
.1b4e	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1b50	95 50		sta $50,x			sta 	esInt1,x
.1b52	b5 58		lda $58,x			lda 	esInt2,x
.1b54	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1b56	95 58		sta $58,x			sta 	esInt2,x
.1b58	b5 60		lda $60,x			lda 	esInt3,x
.1b5a	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1b5c	95 60		sta $60,x			sta 	esInt3,x
.1b5e	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32multiply.asm

.1b5f					MInt32Multiply:
.1b5f	e8		inx				inx 								; copy 2nd -> 3rd
.1b60	20 85 1b	jsr $1b85			jsr 	MInt32CopyUp
.1b63	ca		dex				dex
.1b64	20 85 1b	jsr $1b85			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1b67	20 40 1c	jsr $1c40			jsr 	MInt32False 					; zero 1st.
.1b6a					_I32Loop:
.1b6a	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1b6c	29 01		and #$01			and 	#1
.1b6e	f0 03		beq $1b73			beq 	_I32NoAdd 					; if set
.1b70	20 2b 1b	jsr $1b2b			jsr 	MInt32Add 					; add 2nd to 1st.
.1b73					_I32NoAdd:
.1b73	e8		inx				inx 								; shift 2nd left
.1b74	20 55 1c	jsr $1c55			jsr 	MInt32ShiftLeft
.1b77	e8		inx				inx  								; shift 3rd right
.1b78	20 5e 1c	jsr $1c5e			jsr 	MInt32ShiftRight
.1b7b	20 67 1c	jsr $1c67			jsr 	MInt32Zero 					; check if zero.
.1b7e	08		php				php 								; save status bits
.1b7f	ca		dex				dex 	 							; point back to 1st
.1b80	ca		dex				dex
.1b81	28		plp				plp 								; get status bits
.1b82	d0 e6		bne $1b6a			bne 	_I32Loop 					; if non-zero keep going.
.1b84	60		rts				rts
.1b85					MInt32CopyUp:
.1b85	b5 48		lda $48,x			lda 	esInt0,x
.1b87	95 49		sta $49,x			sta 	esInt0+1,x
.1b89	b5 50		lda $50,x			lda 	esInt1,x
.1b8b	95 51		sta $51,x			sta 	esInt1+1,x
.1b8d	b5 58		lda $58,x			lda 	esInt2,x
.1b8f	95 59		sta $59,x			sta 	esInt2+1,x
.1b91	b5 60		lda $60,x			lda 	esInt3,x
.1b93	95 61		sta $61,x			sta 	esInt3+1,x
.1b95	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32tostr.asm

>0894					MCharCount:	.fill 	1						; count of converted characters
.1b96					MInt32ToString:
.1b96	48		pha				pha 								; save base
.1b97	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1b99	a9 00		lda #$00			lda 	#0
.1b9b	8d 94 08	sta $0894			sta 	MCharCount 					; clear character count to 0
.1b9e	98		tya				tya
.1b9f	48		pha				pha
.1ba0	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1ba2	10 10		bpl $1bb4			bpl 	_I32TSUnsigned
.1ba4	48		pha				pha 								; save base on stack.
.1ba5	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1ba7	10 08		bpl $1bb1			bpl 	_I32TSNoFlip
.1ba9	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1bab	20 e7 1b	jsr $1be7			jsr 	MI32WriteCharacter
.1bae	20 fa 1b	jsr $1bfa			jsr 	MInt32Negate 				; negate the value.
.1bb1					_I32TSNoFlip:
.1bb1	68		pla				pla 								; get the base back
.1bb2	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1bb4					_I32TSUnsigned:
.1bb4	20 c2 1b	jsr $1bc2			jsr 	MI32DivideWrite 			; recursive code to output string.
.1bb7	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1bb9	ad 94 08	lda $0894			lda 	MCharCount
.1bbc	91 04		sta ($04),y			sta 	(temp0),y
.1bbe	68		pla				pla
.1bbf	a8		tay				tay
.1bc0	68		pla				pla
.1bc1	60		rts				rts
.1bc2					MI32DivideWrite:
.1bc2	48		pha				pha 								; save the divisor/base
.1bc3	e8		inx				inx 								; write in the dividing position.
.1bc4	20 4f 1c	jsr $1c4f			jsr 	MInt32Set8Bit
.1bc7	ca		dex				dex
.1bc8	20 5e 1a	jsr $1a5e			jsr 	MInt32UDivide 				; divide number by base.
.1bcb	68		pla				pla 								; get the base into Y
.1bcc	a8		tay				tay
.1bcd	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1bcf	48		pha				pha
.1bd0	20 67 1c	jsr $1c67			jsr 	MInt32Zero 					; is the result zero ?
.1bd3	f0 04		beq $1bd9			beq 	_I32NoRecurse 				; if so, don't recurse.
.1bd5	98		tya				tya 								; put base into A
.1bd6	20 c2 1b	jsr $1bc2			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1bd9					_I32NoRecurse:
.1bd9	68		pla				pla 								; get the remainder back
.1bda	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1bdc	90 02		bcc $1be0			bcc 	_I32NotHex
.1bde	69 06		adc #$06			adc 	#7-1
.1be0					_I32NotHex:
.1be0	18		clc				clc 								; make it ASCII
.1be1	69 30		adc #$30			adc 	#48
.1be3	20 e7 1b	jsr $1be7			jsr 	MI32WriteCharacter 			; write the character out
.1be6	60		rts				rts 								; and exit.
.1be7					MI32WriteCharacter:
.1be7	ee 94 08	inc $0894			inc 	MCharCount 					; bump count (space for leading count)
.1bea	ac 94 08	ldy $0894			ldy 	MCharCount 					; get position
.1bed	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1bef	c8		iny				iny
.1bf0	a9 00		lda #$00			lda 	#0
.1bf2	91 04		sta ($04),y			sta 	(temp0),y
.1bf4	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32unary.asm

>0895					MSeed32:	.fill 	4							; random number seed.
.1bf5					MInt32Absolute:
.1bf5	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1bf7	30 01		bmi $1bfa			bmi 	MInt32Negate
.1bf9	60		rts				rts
.1bfa					MInt32Negate:
.1bfa	38		sec				sec
.1bfb	a9 00		lda #$00			lda 	#0
.1bfd	f5 48		sbc $48,x			sbc 	esInt0,x
.1bff	95 48		sta $48,x			sta 	esInt0,x
.1c01	a9 00		lda #$00			lda 	#0
.1c03	f5 50		sbc $50,x			sbc 	esInt1,x
.1c05	95 50		sta $50,x			sta 	esInt1,x
.1c07	a9 00		lda #$00			lda 	#0
.1c09	f5 58		sbc $58,x			sbc 	esInt2,x
.1c0b	95 58		sta $58,x			sta 	esInt2,x
.1c0d	a9 00		lda #$00			lda 	#0
.1c0f	f5 60		sbc $60,x			sbc 	esInt3,x
.1c11	95 60		sta $60,x			sta 	esInt3,x
.1c13	60		rts				rts
.1c14					MInt32Not:
.1c14	b5 48		lda $48,x			lda 	esInt0,x
.1c16	49 ff		eor #$ff			eor 	#$FF
.1c18	95 48		sta $48,x			sta 	esInt0,x
.1c1a	b5 50		lda $50,x			lda 	esInt1,x
.1c1c	49 ff		eor #$ff			eor 	#$FF
.1c1e	95 50		sta $50,x			sta 	esInt1,x
.1c20	b5 58		lda $58,x			lda 	esInt2,x
.1c22	49 ff		eor #$ff			eor 	#$FF
.1c24	95 58		sta $58,x			sta 	esInt2,x
.1c26	b5 60		lda $60,x			lda 	esInt3,x
.1c28	49 ff		eor #$ff			eor 	#$FF
.1c2a	95 60		sta $60,x			sta 	esInt3,x
.1c2c	60		rts				rts
.1c2d					MInt32Sign:
.1c2d	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1c2f	30 0b		bmi $1c3c			bmi 	MInt32True 					; if set return -1 (true)
.1c31	20 67 1c	jsr $1c67			jsr 	MInt32Zero 					; is it zero ?
.1c34	f0 0a		beq $1c40			beq 	MInt32False 					; if zero return 0 (false)
.1c36	20 40 1c	jsr $1c40			jsr 	MInt32False 					; > 0 return 1
.1c39	f6 48		inc $48,x			inc 	esInt0,x
.1c3b	60		rts				rts
.1c3c					MInt32True:
.1c3c	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1c3e	d0 02		bne $1c42			bne 	MInt32WriteAll
.1c40					MInt32False:
.1c40	a9 00		lda #$00			lda 	#0
.1c42					MInt32WriteAll:
.1c42	95 48		sta $48,x			sta 	esInt0,x
.1c44					MInt32Write123:
.1c44	95 50		sta $50,x			sta 	esInt1,x
.1c46	95 58		sta $58,x			sta 	esInt2,x
.1c48	95 60		sta $60,x			sta 	esInt3,x
.1c4a	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1c4c	95 40		sta $40,x			sta 	esType,x
.1c4e	60		rts				rts
.1c4f					MInt32Set8Bit:
.1c4f	95 48		sta $48,x			sta 	esInt0,x
.1c51	a9 00		lda #$00			lda 	#0
.1c53	f0 ef		beq $1c44			beq		MInt32Write123
.1c55					MInt32ShiftLeft:
.1c55	16 48		asl $48,x			asl 	esInt0,x
.1c57	36 50		rol $50,x			rol	 	esInt1,x
.1c59	36 58		rol $58,x			rol	 	esInt2,x
.1c5b	36 60		rol $60,x			rol	 	esInt3,x
.1c5d	60		rts				rts
.1c5e					MInt32ShiftRight:
.1c5e	56 60		lsr $60,x			lsr 	esInt3,x
.1c60	76 58		ror $58,x			ror 	esInt2,x
.1c62	76 50		ror $50,x			ror 	esInt1,x
.1c64	76 48		ror $48,x			ror 	esInt0,x
.1c66	60		rts				rts
.1c67					MInt32Zero:
.1c67	b5 48		lda $48,x			lda 	esInt0,x
.1c69	15 50		ora $50,x			ora 	esInt1,x
.1c6b	15 58		ora $58,x			ora 	esInt2,x
.1c6d	15 60		ora $60,x			ora 	esInt3,x
.1c6f	60		rts				rts
.1c70					MInt32Random:
.1c70	98		tya				tya
.1c71	48		pha				pha
.1c72	a0 07		ldy #$07			ldy 	#7
.1c74	ad 95 08	lda $0895			lda 	MSeed32+0
.1c77	d0 03		bne $1c7c			bne 	_Random1
.1c79	a8		tay				tay
.1c7a	a9 aa		lda #$aa			lda		#$AA
.1c7c					_Random1:
.1c7c	0a		asl a				asl 	a
.1c7d	2e 96 08	rol $0896			rol 	MSeed32+1
.1c80	2e 97 08	rol $0897			rol 	MSeed32+2
.1c83	2e 98 08	rol $0898			rol 	MSeed32+3
.1c86	90 02		bcc $1c8a			bcc 	_Random2
.1c88	49 c5		eor #$c5			eor 	#$C5
.1c8a					_Random2:
.1c8a	88		dey				dey
.1c8b	d0 ef		bne $1c7c			bne 	_Random1
.1c8d	8d 95 08	sta $0895			sta 	MSeed32+0
.1c90	95 48		sta $48,x			sta 	esInt0,x
.1c92	ad 96 08	lda $0896			lda 	MSeed32+1
.1c95	95 50		sta $50,x			sta 	esInt1,x
.1c97	ad 97 08	lda $0897			lda 	MSeed32+2
.1c9a	95 58		sta $58,x			sta 	esInt2,x
.1c9c	ad 98 08	lda $0898			lda 	MSeed32+3
.1c9f	95 60		sta $60,x			sta 	esInt3,x
.1ca1	68		pla				pla
.1ca2	a8		tay				tay
.1ca3	a9 00		lda #$00			lda 	#0
.1ca5	95 40		sta $40,x			sta 	esType,x
.1ca7	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/check.asm

.1ca8					CheckToken:
.1ca8	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1caa	d0 02		bne $1cae			bne 	_CTError
.1cac	c8		iny				iny
.1cad	60		rts				rts
.1cae					_CTError:
.1cae	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1cb0	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1cb3					CheckRightParen:
.1cb3	b1 02		lda ($02),y			lda 	(codePtr),y
.1cb5	c8		iny				iny
.1cb6	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1cb8	d0 01		bne $1cbb			bne 	_CRPError
.1cba	60		rts				rts
.1cbb					_CRPError:
.1cbb	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.1cbd	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1cc0					CheckComma:
.1cc0	b1 02		lda ($02),y			lda 	(codePtr),y
.1cc2	c8		iny				iny
.1cc3	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1cc5	d0 01		bne $1cc8			bne 	_CCError
.1cc7	60		rts				rts
.1cc8					_CCError:
.1cc8	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.1cca	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/scanner.asm

.204c					ScanForward:
.204c	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.204e	86 07		stx $07				stx 	temp1+1
.2050	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.2052	85 08		sta $08				sta 	temp2
.2054	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.2056	c8		iny				iny
.2057	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.2059	d0 08		bne $2063			bne 	_SFNoCheck 					; if so, check token against entered values.
.205b	c5 06		cmp $06				cmp 	temp1
.205d	f0 24		beq $2083			beq 	_SFExit
.205f	c5 07		cmp $07				cmp 	temp1+1
.2061	f0 20		beq $2083			beq 	_SFExit
.2063					_SFNoCheck:
.2063	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.2065	90 ed		bcc $2054			bcc 	_SFLoop
.2067	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.2069	90 19		bcc $2084			bcc 	_SFSpecials
.206b	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.206d	90 e5		bcc $2054			bcc 	_SFLoop
.206f	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.2071	b0 e1		bcs $2054			bcs 	_SFLoop
.2073	aa		tax				tax  								; token in X, and look up the adjuster.
.2074	bd 57 17	lda $1757,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.2077	38		sec				sec 								; convert to an offset
.2078	e9 81		sbc #$81			sbc 	#$81
.207a	18		clc				clc 								; add to depth
.207b	65 08		adc $08				adc 	temp2
.207d	85 08		sta $08				sta 	temp2
.207f	10 d3		bpl $2054			bpl 	_SFLoop 					; +ve okay to continue
.2081	30 2a		bmi $20ad			bmi 	_SFError 					; if gone -ve then we have a nesting error
.2083	60		rts		_SFExit:rts
.2084					_SFSpecials:
.2084	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.2086	f0 14		beq $209c			beq 	_SFNextLine
.2088	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.208a	f0 26		beq $20b2			beq 	_SFFloatSkip
.208c	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.208e	f0 04		beq $2094			beq 	_SFSkipString
.2090	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.2091	4c 54 20	jmp $2054			jmp 	_SFLoop 					; token.
.2094					_SFSkipString:
.2094	98		tya				tya
.2095	38		sec				sec
.2096	71 02		adc ($02),y			adc 	(codePtr),y
.2098	a8		tay				tay
.2099	4c 54 20	jmp $2054			jmp 	_SFLoop
.209c					_SFNextLine:
.209c	a0 00		ldy #$00			ldy 	#0 							; get offset
.209e	b1 02		lda ($02),y			lda 	(codePtr),y
.20a0	18		clc				clc 								; add to code pointer.
.20a1	65 02		adc $02				adc 	codePtr
.20a3	85 02		sta $02				sta 	codePtr
.20a5	90 02		bcc $20a9			bcc		_SFNLNoCarry
.20a7	e6 03		inc $03				inc 	codePtr+1
.20a9					_SFNLNoCarry:
.20a9	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.20ab	d0 a7		bne $2054			bne		_SFLoop 					; no go round again
.20ad					_SFError:
.20ad	a2 12		ldx #$12			ldx 	#ErrorID_Struct
.20af	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.20b2					_SFFloatSkip:
.20b2	4c 87 12	jmp $1287			jmp 	Unimplemented

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.0899					returnStack:
>0899							.fill 	retStackSize
.1ccd					RSReset:
.1ccd	a9 98		lda #$98			lda 	#(returnStack+retStackSize-1) & $FF
.1ccf	85 78		sta $78				sta 	rsPointer
.1cd1	a9 0a		lda #$0a			lda 	#(returnStack+retStackSize-1) >> 8
.1cd3	85 79		sta $79				sta 	1+(rsPointer)
.1cd5	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1cd7	8d 98 0a	sta $0a98			sta 	returnStack+retStackSize-1
.1cda	60		rts				rts
.1cdb					RSClaim:
.1cdb	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1cdd	48		pha				pha 								; save marker on stack.
.1cde	8a		txa				txa 								; get bytes required.
.1cdf	38		sec				sec
.1ce0	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1ce2	65 78		adc $78				adc 	rsPointer
.1ce4	85 78		sta $78				sta 	rsPointer
.1ce6	a5 79		lda $79				lda 	rsPointer+1
.1ce8	69 ff		adc #$ff			adc 	#$FF
.1cea	85 79		sta $79				sta 	rsPointer+1
.1cec	68		pla				pla 								; get marker back
.1ced	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1cef	91 78		sta ($78),y			sta 	(rsPointer),y
.1cf1	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1cf3	60		rts				rts
.1cf4					RSFree:
.1cf4	18		clc				clc
.1cf5	65 78		adc $78				adc 	rsPointer
.1cf7	85 78		sta $78				sta 	rsPointer
.1cf9	90 02		bcc $1cfd			bcc 	_RSFExit
.1cfb	e6 79		inc $79				inc 	rsPointer+1
.1cfd					_RSFExit:
.1cfd	60		rts				rts
.1cfe					RSSavePosition:
.1cfe	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1d00	a8		tay				tay 								; this is where we write it.
.1d01	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1d03	91 78		sta ($78),y			sta 	(rsPointer),y
.1d05	c8		iny				iny
.1d06	a5 03		lda $03				lda 	codePtr+1
.1d08	91 78		sta ($78),y			sta 	(rsPointer),y
.1d0a	c8		iny				iny
.1d0b	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1d0d	91 78		sta ($78),y			sta 	(rsPointer),y
.1d0f	a8		tay				tay 								; fix Y back again to original value
.1d10	60		rts				rts
.1d11					RSLoadPosition:
.1d11	a8		tay				tay
.1d12	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1d14	85 02		sta $02				sta 	codePtr
.1d16	c8		iny				iny
.1d17	b1 78		lda ($78),y			lda 	(rsPointer),y
.1d19	85 03		sta $03				sta 	codePtr+1
.1d1b	c8		iny				iny
.1d1c	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1d1e	a8		tay				tay 								; to Y
.1d1f	60		rts				rts

;******  Return to file: ../source/main/main.asm

.1d20					mainHandler:
.1d20	7c 23 1d	jmp ($1d23,x)			jmp 	(mainVectors,x)
.1d23					mainVectors:
>1d23	8a 17					.word LinkEvaluate         ; index 0
>1d25	90 17					.word LinkEvaluateInteger  ; index 2
>1d27	96 17					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.asm

.1d29					assemblerHandler:
.1d29	7c 2c 1d	jmp ($1d2c,x)			jmp 	(assemblerVectors,x)
.1d2c					assemblerVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.asm


;******  Processing file: ../source/device/x16/x16io.asm

.1d2c					IONewLine:
.1d2c	48		pha				pha
.1d2d	a9 0d		lda #$0d			lda 	#13
.1d2f	20 3c 1d	jsr $1d3c			jsr 	IOPrintChar
.1d32	68		pla				pla
.1d33	60		rts				rts
.1d34					IOTab:
.1d34	48		pha				pha
.1d35	a9 20		lda #$20			lda 	#32
.1d37	20 3c 1d	jsr $1d3c			jsr 	IOPrintChar
.1d3a	68		pla				pla
.1d3b	60		rts				rts
.1d3c					IOPrintChar:
.1d3c	aa		tax				tax
.1d3d	5a		phy				phy
.1d3e	8a		txa				txa
.1d3f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1d42	7a		ply				ply
.1d43	60		rts				rts

;******  Return to file: ../source/device/device.asm

.1d44					deviceHandler:
.1d44	7c 47 1d	jmp ($1d47,x)			jmp 	(deviceVectors,x)
.1d47					deviceVectors:
>1d47	2c 1d					.word IONewLine            ; index 0
>1d49	3c 1d					.word IOPrintChar          ; index 2
>1d4b	34 1d					.word IOTab                ; index 4

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.asm


;******  Processing file: ../source/error/errorhandler.asm

.1d4d					ErrorHandler:
.1d4d	a9 ee		lda #$ee			lda 	#$EE
.1d4f	a8		tay				tay
>1d50	db						.byte 	$DB
.1d51	4c 51 1d	jmp $1d51	_EHHalt:jmp 	_EHHalt

;******  Return to file: ../source/error/error.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.asm

.1d54					floatingpointHandler:
.1d54	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.1d56	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.asm

.1d59					interactionHandler:
.1d59	7c 5c 1d	jmp ($1d5c,x)			jmp 	(interactionVectors,x)
.1d5c					interactionVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.asm


;******  Processing file: ../source/string/chr.asm

.1d5c					StringChrs:
.1d5c	aa		tax				tax 								; set up stack
.1d5d	a9 02		lda #$02			lda 	#2
.1d5f	20 12 1e	jsr $1e12			jsr 	AllocateSoftString
.1d62	98		tya				tya
.1d63	20 3a 1e	jsr $1e3a			jsr 	WriteSoftString
.1d66	20 6b 1d	jsr $1d6b			jsr 	ReturnSoftString
.1d69	8a		txa				txa
.1d6a	60		rts				rts
.1d6b					ReturnSoftString:
.1d6b	a5 7a		lda $7a				lda 	softMemAlloc
.1d6d	95 48		sta $48,x			sta 	esInt0,x
.1d6f	a5 7b		lda $7b				lda 	softMemAlloc+1
.1d71	95 50		sta $50,x			sta 	esInt1,x
.1d73	a9 00		lda #$00			lda 	#0
.1d75	95 58		sta $58,x			sta 	esInt2,x
.1d77	95 60		sta $60,x			sta 	esInt3,x
.1d79	a9 40		lda #$40			lda 	#$40
.1d7b	95 40		sta $40,x			sta 	esType,x
.1d7d	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/compare.asm

.1d7e					STRCompare:
.1d7e	48		pha				pha 								; save A
.1d7f	aa		tax				tax 								; put stack pos in X
.1d80	98		tya				tya
.1d81	48		pha				pha
.1d82	20 b6 1d	jsr $1db6			jsr 	CopyStringPair
.1d85	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1d87	b1 04		lda ($04),y			lda 	(temp0),y
.1d89	d1 06		cmp ($06),y			cmp 	(temp1),y
.1d8b	90 02		bcc $1d8f			bcc 	_SCNotSmaller
.1d8d	b1 06		lda ($06),y			lda 	(temp1),y
.1d8f					_SCNotSmaller:
.1d8f	aa		tax				tax 								; put that in X. We compare this many chars first.
.1d90					_SCCompareLoop:
.1d90	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1d92	f0 0c		beq $1da0			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1d94	ca		dex				dex 								; decrement chars to compare.
.1d95	c8		iny				iny 								; move to next character
.1d96	38		sec				sec 								; calculate s1[y]-s2[y]
.1d97	b1 04		lda ($04),y			lda 	(temp0),y
.1d99	f1 06		sbc ($06),y			sbc 	(temp1),y
.1d9b	d0 0a		bne $1da7			bne 	_SCReturnResult 			; if different return sign of A
.1d9d	4c 90 1d	jmp $1d90			jmp 	_SCCompareLoop
.1da0					_SCSameToEndShortest
.1da0	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1da2	38		sec				sec
.1da3	b1 04		lda ($04),y			lda 	(temp0),y
.1da5	f1 06		sbc ($06),y			sbc 	(temp1),y
.1da7					_SCReturnResult:
.1da7	08		php				php 								; set return to zero preserving PSW.
.1da8	a2 00		ldx #$00			ldx 	#0
.1daa	28		plp				plp
.1dab	f0 05		beq $1db2			beq 	_SCExit 					; two values equal, then exit
.1dad	ca		dex				dex 								; X = $FF
.1dae	90 02		bcc $1db2			bcc 	_SCExit 					; if 1st < 2nd then -1
.1db0	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1db2					_SCExit:
.1db2	68		pla				pla
.1db3	a8		tay				tay
.1db4	68		pla				pla
.1db5	60		rts				rts
.1db6					CopyStringPair:
.1db6	b5 49		lda $49,x			lda 	esInt0+1,x
.1db8	85 06		sta $06				sta 	temp1
.1dba	b5 51		lda $51,x			lda 	esInt1+1,x
.1dbc	85 07		sta $07				sta 	temp1+1
.1dbe					CopyStringTop:
.1dbe	b5 48		lda $48,x			lda 	esInt0,x
.1dc0	85 04		sta $04				sta 	temp0
.1dc2	b5 50		lda $50,x			lda 	esInt1,x
.1dc4	85 05		sta $05				sta 	temp0+1
.1dc6	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/concat.asm

.1dc7					StringConcat:
.1dc7	aa		tax				tax									; stack pos in X
.1dc8	98		tya				tya
.1dc9	48		pha				pha
.1dca	20 b6 1d	jsr $1db6			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1dcd	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1dce	a0 00		ldy #$00			ldy 	#0
.1dd0	b1 04		lda ($04),y			lda 	(temp0),y
.1dd2	71 06		adc ($06),y			adc 	(temp1),y
.1dd4	b0 18		bcs $1dee			bcs 	_SCError 					; just too many characters here.
.1dd6	20 12 1e	jsr $1e12			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1dd9	20 09 1e	jsr $1e09			jsr 	CopySoftToStack 			; copy that to the stack.
.1ddc	20 f3 1d	jsr $1df3			jsr 	_SCCopyTemp0 				; copy temp0
.1ddf	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1de1	85 04		sta $04				sta 	temp0
.1de3	a5 07		lda $07				lda 	temp1+1
.1de5	85 05		sta $05				sta 	temp0+1
.1de7	20 f3 1d	jsr $1df3			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1dea	68		pla				pla
.1deb	a8		tay				tay
.1dec	8a		txa				txa 								; and A
.1ded	60		rts				rts
.1dee					_SCError:
.1dee	a2 0c		ldx #$0c			ldx 	#ErrorID_StrLen
.1df0	20 4d 1d	jsr $1d4d			jsr 	ErrorHandler
.1df3					_SCCopyTemp0:
.1df3	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1df5	b1 04		lda ($04),y			lda 	(temp0),y
.1df7	85 08		sta $08				sta 	temp2
.1df9					_SCCopyLoop:
.1df9	a5 08		lda $08				lda 	temp2 						; done the lot
.1dfb	f0 0b		beq $1e08			beq 	_SCCopyExit
.1dfd	c6 08		dec $08				dec 	temp2
.1dff	c8		iny				iny 								; get next char
.1e00	b1 04		lda ($04),y			lda 	(temp0),y
.1e02	20 3a 1e	jsr $1e3a			jsr 	WriteSoftString 			; write to soft string.
.1e05	4c f9 1d	jmp $1df9			jmp 	_SCCopyLoop
.1e08					_SCCopyExit:
.1e08	60		rts				rts
.1e09					CopySoftToStack:
.1e09	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1e0b	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1e0d	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1e0f	95 50		sta $50,x			sta 	esInt1,x
.1e11	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1e12					AllocateSoftString:
.1e12	85 0a		sta $0a				sta 	tempShort 					; save count
.1e14	98		tya				tya
.1e15	48		pha				pha
.1e16	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1e18	d0 0b		bne $1e25			bne 	_ASSDone
.1e1a	ad 6c 08	lda $086c			lda 	highMemory 					; reset the soft memory alloc pointer.
.1e1d	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1e1f	ac 6d 08	ldy $086d			ldy 	highMemory+1 				; but it needs to be reset before each command.
.1e22	88		dey				dey
.1e23	84 7b		sty $7b				sty 	softMemAlloc+1
.1e25					_ASSDone:
.1e25	38		sec				sec 								; allocate downwards enough memory
.1e26	a5 7a		lda $7a				lda 	softMemAlloc
.1e28	e5 0a		sbc $0a				sbc 	tempShort
.1e2a	85 7a		sta $7a				sta 	softMemAlloc
.1e2c	a5 7b		lda $7b				lda 	softMemAlloc+1
.1e2e	e9 00		sbc #$00			sbc 	#0
.1e30	85 7b		sta $7b				sta 	softMemAlloc+1
.1e32	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1e34	a8		tay				tay
.1e35	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e37	68		pla				pla
.1e38	a8		tay				tay
.1e39	60		rts				rts
.1e3a					WriteSoftString:
.1e3a	84 0a		sty $0a				sty 	tempShort 					; save Y
.1e3c	48		pha				pha
.1e3d	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1e3f	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1e41	18		clc				clc
.1e42	69 01		adc #$01			adc 	#1
.1e44	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e46	a8		tay				tay 								; pointer in Y
.1e47	68		pla				pla 								; get char and write.
.1e48	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e4a	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1e4c	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/substring.asm

.0a99					NullString:
>0a99							.fill 	1							; don't waste memory concreting null strings.
.1e4d					StringSubstring:
.1e4d	48		pha				pha
.1e4e	aa		tax				tax 								; access stack.
.1e4f	98		tya				tya
.1e50	48		pha				pha
.1e51	20 be 1d	jsr $1dbe			jsr 	CopyStringTop 				; point temp0 to the string.
.1e54	a0 00		ldy #$00			ldy 	#0 							; get length.
.1e56	b1 04		lda ($04),y			lda 	(temp0),Y
.1e58	85 06		sta $06				sta 	temp1
.1e5a	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.1e5c	c5 06		cmp $06				cmp 	temp1 						;
.1e5e	f0 02		beq $1e62			beq 	_SSBOkay
.1e60	b0 2a		bcs $1e8c			bcs 	_SSBReturnNull
.1e62					_SSBOkay:
.1e62	a5 06		lda $06				lda 	temp1 						; get the total length +1
.1e64	18		clc				clc
.1e65	69 01		adc #$01			adc 	#1
.1e67	38		sec				sec
.1e68	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.1e6a	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.1e6c	90 02		bcc $1e70			bcc		_SSBTrunc
.1e6e	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1e70					_SSBTrunc:
.1e70	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.1e72	18		clc				clc
.1e73	69 01		adc #$01			adc 	#1 							; add 1
.1e75	20 12 1e	jsr $1e12			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1e78	20 09 1e	jsr $1e09			jsr 	CopySoftToStack 			; copy that to the stack.
.1e7b	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.1e7d					_SSBCopyLoop:
.1e7d	a5 07		lda $07				lda 	temp1+1 					; done them all
.1e7f	f0 0e		beq $1e8f			beq 	_SSBExit
.1e81	c6 07		dec $07				dec 	temp1+1
.1e83	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.1e85	20 3a 1e	jsr $1e3a			jsr 	WriteSoftString
.1e88	c8		iny				iny
.1e89	4c 7d 1e	jmp $1e7d			jmp 	_SSBCopyLoop
.1e8c					_SSBReturnNull:
.1e8c	20 93 1e	jsr $1e93			jsr 	ReturnNull
.1e8f					_SSBExit:
.1e8f	68		pla				pla
.1e90	a8		tay				tay
.1e91	68		pla				pla
.1e92	60		rts				rts
.1e93					ReturnNull:
.1e93	a9 00		lda #$00			lda 	#0 							; clear null string
.1e95	8d 99 0a	sta $0a99			sta 	NullString
.1e98	a9 99		lda #$99			lda 	#NullString & $FF 			; set a pointer to it
.1e9a	95 48		sta $48,x			sta 	esInt0,x
.1e9c	a9 0a		lda #$0a			lda 	#NullString >> 8
.1e9e	95 50		sta $50,x			sta 	esInt1,x
.1ea0	60		rts				rts

;******  Return to file: ../source/string/string.asm

.1ea1					stringHandler:
.1ea1	7c a4 1e	jmp ($1ea4,x)			jmp 	(stringVectors,x)
.1ea4					stringVectors:
>1ea4	5c 1d					.word StringChrs           ; index 0
>1ea6	c7 1d					.word StringConcat         ; index 2
>1ea8	7e 1d					.word STRCompare           ; index 4
>1eaa	4d 1e					.word StringSubstring      ; index 6

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.asm

.1eac					tokeniserHandler:
.1eac	7c af 1e	jmp ($1eaf,x)			jmp 	(tokeniserVectors,x)
.1eaf					tokeniserVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/access.asm

.1eaf					AccessVariable:
.1eaf	aa		tax				tax 								; stack in X
.1eb0	c8		iny				iny
.1eb1	b1 02		lda ($02),y			lda 	(codePtr),y
.1eb3	88		dey				dey
.1eb4	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1eb6	d0 15		bne $1ecd			bne 	_AVLong
.1eb8	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1eba	38		sec				sec 	 							; make it 0-25
.1ebb	e9 01		sbc #$01			sbc 	#1
.1ebd	0a		asl a				asl 	a 							; x 4 is LSB of address
.1ebe	0a		asl a				asl 	a
.1ebf	95 48		sta $48,x			sta 	esInt0,x
.1ec1	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.1ec3	95 50		sta $50,x			sta 	esInt1,x
.1ec5	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1ec7	95 40		sta $40,x			sta 	esType,x
.1ec9	c8		iny				iny 								; skip over the variable reference in the code.
.1eca	c8		iny				iny
.1ecb	8a		txa				txa 								; stack in A to return.
.1ecc	60		rts				rts
.1ecd					_AVLong:
.1ecd	80 fe		bra $1ecd			bra 	_AVLong

;******  Return to file: ../source/variable/variable.asm

.1ecf					variableHandler:
.1ecf	7c d2 1e	jmp ($1ed2,x)			jmp 	(variableVectors,x)
.1ed2					variableVectors:
>1ed2	af 1e					.word AccessVariable       ; index 0

;******  Return to file: ../source/basic.asm


;******  End of listing
