
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ..\source\basic.asm
; Tue Feb 23 15:44:55 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\basic.asm


;******  Processing file: ..\source\main/01common.inc

=8					StackSize = 8

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/02macros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize
>0048					esInt0:	.fill 	StackSize
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize
=$48					esMant0 = esInt0
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3

;******  Processing file: ..\source\main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$9d					TOK_STRUCTST=$9d
=$a2					TOK_UNARYST=$a2
=$c0					TOK_TOKENS=$c0
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_WAVY                     = $a2 ; ~
=$a3					TKW_LPAREN                   = $a3 ; (
=$a4					TKW_AMP                      = $a4 ; &
=$a5					TKW_AT                       = $a5 ; @
=$a6					TKW_LENLPAREN                = $a6 ; len(
=$a7					TKW_SGNLPAREN                = $a7 ; sgn(
=$a8					TKW_ABSLPAREN                = $a8 ; abs(
=$a9					TKW_RANDOMLPAREN             = $a9 ; random(
=$aa					TKW_PAGE                     = $aa ; page
=$ab					TKW_TRUE                     = $ab ; true
=$ac					TKW_FALSE                    = $ac ; false
=$ad					TKW_MINLPAREN                = $ad ; min(
=$ae					TKW_MAXLPAREN                = $ae ; max(
=$af					TKW_SYSLPAREN                = $af ; sys(
=$b0					TKW_TIMERLPAREN              = $b0 ; timer(
=$b1					TKW_EVENTLPAREN              = $b1 ; event(
=$b2					TKW_GETLPAREN                = $b2 ; get(
=$b3					TKW_INKEYLPAREN              = $b3 ; inkey(
=$b4					TKW_ALLOCLPAREN              = $b4 ; alloc(
=$b5					TKW_CHRDOLLARLPAREN          = $b5 ; chr$(
=$b6					TKW_LEFTDOLLARLPAREN         = $b6 ; left$(
=$b7					TKW_MIDDOLLARLPAREN          = $b7 ; mid$(
=$b8					TKW_RIGHTDOLLARLPAREN        = $b8 ; right$(
=$b9					TKW_STRDOLLARLPAREN          = $b9 ; str$(
=$ba					TKW_VALLPAREN                = $ba ; val(
=$bb					TKW_PEEKLPAREN               = $bb ; peek(
=$bc					TKW_DEEKLPAREN               = $bc ; deek(
=$bd					TKW_LEEKLPAREN               = $bd ; leek(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_RPAREN                   = $c0 ; )
=$c1					TKW_COLON                    = $c1 ; :
=$c2					TKW_COMMA                    = $c2 ; ,
=$c3					TKW_SEMICOLON                = $c3 ; ;
=$c4					TKW_RSQPAREN                 = $c4 ; ]
=$c5					TKW_TO                       = $c5 ; to
=$c6					TKW_STEP                     = $c6 ; step
=$c7					TKW_PROC                     = $c7 ; proc
=$c8					TKW_ENDPROC                  = $c8 ; endproc
=$c9					TKW_LOCAL                    = $c9 ; local
=$ca					TKW_REM                      = $ca ; rem
=$cb					TKW_LET                      = $cb ; let
=$cc					TKW_QUOTE                    = $cc ; '
=$cd					TKW_LSQPAREN                 = $cd ; [
=$ce					TKW_INPUT                    = $ce ; input
=$cf					TKW_ELSE                     = $cf ; else
=$d0					TKW_VDU                      = $d0 ; vdu
=$d1					TKW_READ                     = $d1 ; read
=$d2					TKW_DATA                     = $d2 ; data
=$d3					TKW_RESTORE                  = $d3 ; restore
=$d4					TKW_PRINT                    = $d4 ; print
=$d5					TKW_GOTO                     = $d5 ; goto
=$d6					TKW_GOSUB                    = $d6 ; gosub
=$d7					TKW_RETURN                   = $d7 ; return
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_STOP                     = $d9 ; stop
=$da					TKW_END                      = $da ; end
=$db					TKW_DIM                      = $db ; dim
=$dc					TKW_POKE                     = $dc ; poke
=$dd					TKW_DOKE                     = $dd ; doke
=$de					TKW_LOKE                     = $de ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ..\source\main/03data.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/imath/intmacros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/errorhandler.inc


;******  Processing file: ..\source\error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_DivZero = 2 ; Divide By Zero
=3					ErrorID_Stop = 3 ; Stop
=4					ErrorID_BadType = 4 ; BadType

;******  Return to file: ..\source\error/errorhandler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.asm


;******  Processing file: ..\source\main/00start.asm

.1000					Start:
.1000	a9 19		lda #$19			lda 	#(TestCode) & $FF
.1002	85 02		sta $02				sta 	codePtr
.1004	a9 10		lda #$10			lda 	#(TestCode) >> 8
.1006	85 03		sta $03				sta 	1+(codePtr)
.1008	a0 00		ldy #$00			ldy 	#0
.100a	a9 00		lda #$00			lda 	#0
.100c	a2 00		ldx #$00			ldx 	#0
.100e	20 b5 12	jsr $12b5			jsr 	EvaluateLevel
>1011	db						.byte 	$DB
.1012	4c 12 10	jmp $1012	halt:	jmp 	halt
.1015					Unimplemented:
>1015	db						.byte 	$DB
.1016	4c 15 10	jmp $1015			jmp 	Unimplemented

;******  Processing file: ..\source\main/../generated/testcode.inc

.1019					TestCode:
>1019	7f 7f 98 41 80				.byte 127,127,152,65,128

;******  Return to file: ..\source\main/00start.asm


;******  Processing file: ..\source\main/../generated/tokenvectors0.inc

.101e					Group0Vectors:
>101e	15 10					.word	Unimplemented            ; $80 [[eol]]
>1020	15 10					.word	Unimplemented            ; $81 [[sh1]]
>1022	15 10					.word	Unimplemented            ; $82 [[sh2]]
>1024	15 10					.word	Unimplemented            ; $83 [[sh3]]
>1026	15 10					.word	Unimplemented            ; $84 [[fpc]]
>1028	15 10					.word	Unimplemented            ; $85 [[str]]
>102a	a4 11					.word	AndHandler               ; $86 and
>102c	91 11					.word	OrHandler                ; $87 or
>102e	7e 11					.word	XorHandler               ; $88 xor
>1030	90 12					.word	CompareGreaterEq         ; $89 >=
>1032	9a 12					.word	CompareLessEq            ; $8a <=
>1034	7c 12					.word	CompareGreater           ; $8b >
>1036	72 12					.word	CompareLess              ; $8c <
>1038	68 12					.word	CompareEquals            ; $8d =
>103a	86 12					.word	CompareNotEquals         ; $8e <>
>103c	0f 11					.word	AddHandler               ; $8f +
>103e	32 11					.word	SubHandler               ; $90 -
>1040	ca 11					.word	ShrHandler               ; $91 >>
>1042	b7 11					.word	ShlHandler               ; $92 <<
>1044	45 11					.word	MulHandler               ; $93 *
>1046	58 11					.word	DivHandler               ; $94 /
>1048	6b 11					.word	ModHandler               ; $95 mod
>104a	15 10					.word	Unimplemented            ; $96 ^
>104c	dd 11					.word	WordRefHandler           ; $97 !
>104e	f0 11					.word	ByteRefHandler           ; $98 ?
>1050	15 10					.word	Unimplemented            ; $99 repeat
>1052	15 10					.word	Unimplemented            ; $9a while
>1054	15 10					.word	Unimplemented            ; $9b for
>1056	15 10					.word	Unimplemented            ; $9c if
>1058	15 10					.word	Unimplemented            ; $9d until
>105a	15 10					.word	Unimplemented            ; $9e wend
>105c	15 10					.word	Unimplemented            ; $9f next
>105e	15 10					.word	Unimplemented            ; $a0 then
>1060	15 10					.word	Unimplemented            ; $a1 endif
>1062	15 10					.word	Unimplemented            ; $a2 ~
>1064	15 10					.word	Unimplemented            ; $a3 (
>1066	15 10					.word	Unimplemented            ; $a4 &
>1068	15 10					.word	Unimplemented            ; $a5 @
>106a	15 10					.word	Unimplemented            ; $a6 len(
>106c	15 10					.word	Unimplemented            ; $a7 sgn(
>106e	15 10					.word	Unimplemented            ; $a8 abs(
>1070	15 10					.word	Unimplemented            ; $a9 random(
>1072	15 10					.word	Unimplemented            ; $aa page
>1074	15 10					.word	Unimplemented            ; $ab true
>1076	15 10					.word	Unimplemented            ; $ac false
>1078	15 10					.word	Unimplemented            ; $ad min(
>107a	15 10					.word	Unimplemented            ; $ae max(
>107c	15 10					.word	Unimplemented            ; $af sys(
>107e	15 10					.word	Unimplemented            ; $b0 timer(
>1080	15 10					.word	Unimplemented            ; $b1 event(
>1082	15 10					.word	Unimplemented            ; $b2 get(
>1084	15 10					.word	Unimplemented            ; $b3 inkey(
>1086	15 10					.word	Unimplemented            ; $b4 alloc(
>1088	15 10					.word	Unimplemented            ; $b5 chr$(
>108a	15 10					.word	Unimplemented            ; $b6 left$(
>108c	15 10					.word	Unimplemented            ; $b7 mid$(
>108e	15 10					.word	Unimplemented            ; $b8 right$(
>1090	15 10					.word	Unimplemented            ; $b9 str$(
>1092	15 10					.word	Unimplemented            ; $ba val(
>1094	15 10					.word	Unimplemented            ; $bb peek(
>1096	15 10					.word	Unimplemented            ; $bc deek(
>1098	15 10					.word	Unimplemented            ; $bd leek(
>109a	15 10					.word	Unimplemented            ; $be int(
>109c	15 10					.word	Unimplemented            ; $bf float(
>109e	15 10					.word	Unimplemented            ; $c0 )
>10a0	15 10					.word	Unimplemented            ; $c1 :
>10a2	15 10					.word	Unimplemented            ; $c2 ,
>10a4	15 10					.word	Unimplemented            ; $c3 ;
>10a6	15 10					.word	Unimplemented            ; $c4 ]
>10a8	15 10					.word	Unimplemented            ; $c5 to
>10aa	15 10					.word	Unimplemented            ; $c6 step
>10ac	15 10					.word	Unimplemented            ; $c7 proc
>10ae	15 10					.word	Unimplemented            ; $c8 endproc
>10b0	15 10					.word	Unimplemented            ; $c9 local
>10b2	15 10					.word	Unimplemented            ; $ca rem
>10b4	15 10					.word	Unimplemented            ; $cb let
>10b6	15 10					.word	Unimplemented            ; $cc '
>10b8	15 10					.word	Unimplemented            ; $cd [
>10ba	15 10					.word	Unimplemented            ; $ce input
>10bc	15 10					.word	Unimplemented            ; $cf else
>10be	15 10					.word	Unimplemented            ; $d0 vdu
>10c0	15 10					.word	Unimplemented            ; $d1 read
>10c2	15 10					.word	Unimplemented            ; $d2 data
>10c4	15 10					.word	Unimplemented            ; $d3 restore
>10c6	15 10					.word	Unimplemented            ; $d4 print
>10c8	15 10					.word	Unimplemented            ; $d5 goto
>10ca	15 10					.word	Unimplemented            ; $d6 gosub
>10cc	15 10					.word	Unimplemented            ; $d7 return
>10ce	15 10					.word	Unimplemented            ; $d8 assert
>10d0	15 10					.word	Unimplemented            ; $d9 stop
>10d2	15 10					.word	Unimplemented            ; $da end
>10d4	15 10					.word	Unimplemented            ; $db dim
>10d6	15 10					.word	Unimplemented            ; $dc poke
>10d8	15 10					.word	Unimplemented            ; $dd doke
>10da	15 10					.word	Unimplemented            ; $de loke

;******  Return to file: ..\source\main/00start.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/binary.asm

.10e3					BinaryProcess:
.10e3	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.10e5	15 41		ora $41,x			ora 	esType+1,x
.10e7	0a		asl a				asl 	a
.10e8	30 0e		bmi $10f8			bmi 	_BPStringType 				; if one is set, then string type.
.10ea	18		clc				clc 								; return CC for integer
.10eb	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.10ed	f0 08		beq $10f7			beq 	_BPExit 					; if both integer then return with CC.
.10ef	20 fd 10	jsr $10fd			jsr 	BPMakeBothFloat 			; make both float
.10f2	a9 01		lda #$01			lda 	#$01 						; set result type to float
.10f4	95 40		sta $40,x			sta 	esType,x
.10f6	38		sec				sec 								; and return with carry set.
.10f7					_BPExit:
.10f7	60		rts				rts
.10f8					_BPStringType:
.10f8	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.10fa	20 dc 10	jsr $10dc			jsr 	ErrorHandler
.10fd					BPMakeBothFloat:
.10fd	e8		inx				inx
.10fe	20 02 11	jsr $1102			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1101	ca		dex				dex
.1102					BPMakeFloat:
.1102	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1104	4a		lsr a				lsr 	a
.1105	b0 07		bcs $110e			bcs 	_BPIsFloat
.1107	8a		txa				txa
.1108	a2 10		ldx #$10		ldx	#16
.110a	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.110d	aa		tax				tax
.110e					_BPIsFloat:
.110e	60		rts				rts
.110f					AddHandler:
.110f	20 aa 12	jsr $12aa			jsr 	DereferenceTwo 				; dereference top two on stack.
.1112	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1114	35 41		and $41,x			and 	esType+1,x
.1116	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1118	d0 10		bne $112a			bne 	_AHStringConcat				; concatenate strings.
.111a	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.111d	b0 03		bcs $1122			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.111f	4c 0d 15	jmp $150d			jmp 	MInt32Add 							; else do it as integer.
.1122					_IsFPOperation:
.1122	8a		txa				txa 								; call the relevant fp routine
.1123	a2 00		ldx #$00		ldx	#0
.1125	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.1128	aa		tax				tax
.1129	60		rts				rts
.112a					_AHStringConcat:
.112a	8a		txa				txa
.112b	a2 00		ldx #$00		ldx	#0
.112d	20 cc 16	jsr $16cc		jsr	stringHandler
.1130	aa		tax				tax
.1131	60		rts				rts
.1132					SubHandler:
.1132	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.1135	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.1138	b0 03		bcs $113d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.113a	4c 27 15	jmp $1527			jmp 	MInt32Sub 							; else do it as integer.
.113d					_IsFPOperation:
.113d	8a		txa				txa 								; call the relevant fp routine
.113e	a2 0a		ldx #$0a		ldx	#10
.1140	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.1143	aa		tax				tax
.1144	60		rts				rts
.1145					MulHandler:
.1145	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.1148	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.114b	b0 03		bcs $1150			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.114d	4c 41 15	jmp $1541			jmp 	MInt32Multiply 							; else do it as integer.
.1150					_IsFPOperation:
.1150	8a		txa				txa 								; call the relevant fp routine
.1151	a2 08		ldx #$08		ldx	#8
.1153	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.1156	aa		tax				tax
.1157	60		rts				rts
.1158					DivHandler:
.1158	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.115b	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.115e	b0 03		bcs $1163			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1160	4c 1b 14	jmp $141b			jmp 	MInt32SDivide 							; else do it as integer.
.1163					_IsFPOperation:
.1163	8a		txa				txa 								; call the relevant fp routine
.1164	a2 04		ldx #$04		ldx	#4
.1166	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.1169	aa		tax				tax
.116a	60		rts				rts
.116b					ModHandler:
.116b	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.116e	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.1171	b0 03		bcs $1176			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1173	4c 99 14	jmp $1499			jmp 	MInt32Modulus 							; else do it as integer.
.1176					_IsFPOperation:
.1176	8a		txa				txa 								; call the relevant fp routine
.1177	a2 06		ldx #$06		ldx	#6
.1179	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.117c	aa		tax				tax
.117d	60		rts				rts
.117e					XorHandler:
.117e	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.1181	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.1184	b0 03		bcs $1189			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1186	4c cd 13	jmp $13cd			jmp 	MInt32Xor 							; else do it as integer.
.1189					_IsFPOperation:
.1189	8a		txa				txa 								; call the relevant fp routine
.118a	a2 06		ldx #$06		ldx	#6
.118c	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.118f	aa		tax				tax
.1190	60		rts				rts
.1191					OrHandler:
.1191	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.1194	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.1197	b0 03		bcs $119c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1199	4c b4 13	jmp $13b4			jmp 	MInt32Or 							; else do it as integer.
.119c					_IsFPOperation:
.119c	8a		txa				txa 								; call the relevant fp routine
.119d	a2 06		ldx #$06		ldx	#6
.119f	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.11a2	aa		tax				tax
.11a3	60		rts				rts
.11a4					AndHandler:
.11a4	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.11a7	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.11aa	b0 03		bcs $11af			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11ac	4c 9b 13	jmp $139b			jmp 	MInt32And 							; else do it as integer.
.11af					_IsFPOperation:
.11af	8a		txa				txa 								; call the relevant fp routine
.11b0	a2 06		ldx #$06		ldx	#6
.11b2	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.11b5	aa		tax				tax
.11b6	60		rts				rts
.11b7					ShlHandler:
.11b7	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.11ba	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.11bd	b0 03		bcs $11c2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11bf	4c 11 12	jmp $1211			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.11c2					_IsFPOperation:
.11c2	8a		txa				txa 								; call the relevant fp routine
.11c3	a2 06		ldx #$06		ldx	#6
.11c5	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.11c8	aa		tax				tax
.11c9	60		rts				rts
.11ca					ShrHandler:
.11ca	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.11cd	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.11d0	b0 03		bcs $11d5			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11d2	4c 14 12	jmp $1214			jmp 	MInt32ShiftRightX 							; else do it as integer.
.11d5					_IsFPOperation:
.11d5	8a		txa				txa 								; call the relevant fp routine
.11d6	a2 06		ldx #$06		ldx	#6
.11d8	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.11db	aa		tax				tax
.11dc	60		rts				rts
.11dd					WordRefHandler:
.11dd	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.11e0	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.11e3	b0 03		bcs $11e8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11e5	4c 03 12	jmp $1203			jmp 	MInt32WordIndirect 							; else do it as integer.
.11e8					_IsFPOperation:
.11e8	8a		txa				txa 								; call the relevant fp routine
.11e9	a2 06		ldx #$06		ldx	#6
.11eb	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.11ee	aa		tax				tax
.11ef	60		rts				rts
.11f0					ByteRefHandler:
.11f0	20 aa 12	jsr $12aa			jsr 	DereferenceTwo
.11f3	20 e3 10	jsr $10e3			jsr 	BinaryProcess 				; check to see if either is float
.11f6	b0 03		bcs $11fb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11f8	4c 07 12	jmp $1207			jmp 	MInt32ByteIndirect 							; else do it as integer.
.11fb					_IsFPOperation:
.11fb	8a		txa				txa 								; call the relevant fp routine
.11fc	a2 06		ldx #$06		ldx	#6
.11fe	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.1201	aa		tax				tax
.1202	60		rts				rts
.1203					Mint32WordIndirect:
.1203	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1205	d0 02		bne $1209			bne 	Min32Indirect
.1207					Mint32ByteIndirect:
.1207	a9 82		lda #$82			lda 	#$82 						; byte reference type
.1209					Min32Indirect:
.1209	48		pha				pha 								; save the indirection
.120a	20 0d 15	jsr $150d			jsr 	MInt32Add 					; add a!b a?b
.120d	68		pla				pla 								; and set the type to reference.
.120e	95 40		sta $40,x			sta 	esType,x
.1210	60		rts				rts
.1211					Mint32ShiftLeftX:
.1211	18		clc				clc
.1212	90 01		bcc $1215			bcc 	Mint32Shift
.1214					Mint32ShiftRightX:
.1214	38		sec				sec
.1215					Mint32Shift:
.1215	08		php				php 								; save carry flag on stack.
.1216	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1218	15 59		ora $59,x			ora 	esInt2+1,x
.121a	15 61		ora $61,x			ora 	esInt3+1,x
.121c	d0 1e		bne $123c			bne 	_MShiftZero
.121e	b5 49		lda $49,x			lda 	esInt0+1,x
.1220	c9 20		cmp #$20			cmp 	#32
.1222	b0 18		bcs $123c			bcs 	_MShiftZero
.1224					_MShiftLoop:
.1224	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1226	f0 12		beq $123a			beq 	_MShiftExit
.1228	d6 49		dec $49,x			dec 	esInt0+1,x
.122a	28		plp				plp 								; restore and save carry
.122b	08		php				php
.122c	90 06		bcc $1234			bcc 	_MShiftLeft
.122e	20 39 16	jsr $1639			jsr 	Mint32ShiftRight
.1231	4c 24 12	jmp $1224			jmp 	_MShiftLoop
.1234					_MShiftLeft:
.1234	20 30 16	jsr $1630			jsr 	Mint32ShiftLeft
.1237	4c 24 12	jmp $1224			jmp 	_MShiftLoop
.123a					_MShiftExit:
.123a	28		plp				plp	 								; throw saved carry and exit
.123b	60		rts				rts
.123c					_MShiftZero:
.123c	4c 1b 16	jmp $161b			jmp 	MInt32False 				; return 0.

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/compare.asm

.123f					PerformComparison:
.123f	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1241	35 41		and $41,x			and 	esType+1,x
.1243	0a		asl a				asl 	a
.1244	30 17		bmi $125d			bmi 	_PCIsString
.1246	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1248	15 41		ora $41,x			ora 	esType+1,x
.124a	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.124b	30 16		bmi $1263			bmi 	_PCError
.124d	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.124f	f0 09		beq $125a			beq 	_PCIsInteger 				; if not two integers
.1251	20 fd 10	jsr $10fd			jsr 	BPMakeBothFloat 			; make both float
.1254	a2 02		ldx #$02		ldx	#2
.1256	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.1259	60		rts				rts
.125a					_PCIsInteger:
.125a	4c e6 13	jmp $13e6			jmp 	MInt32Compare
.125d					_PCIsString:
.125d	a2 02		ldx #$02		ldx	#2
.125f	20 cc 16	jsr $16cc		jsr	stringHandler
.1262	60		rts				rts
.1263					_PCError:
.1263	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.1265	20 dc 10	jsr $10dc			jsr 	ErrorHandler
.1268					CompareEquals:
.1268	20 3f 12	jsr $123f			jsr 	PerformComparison
.126b	c9 00		cmp #$00			cmp 	#$00
.126d	f0 35		beq $12a4			beq  	CompareTrue
.126f	4c a7 12	jmp $12a7			jmp 	CompareFalse
.1272					CompareLess:
.1272	20 3f 12	jsr $123f			jsr 	PerformComparison
.1275	c9 ff		cmp #$ff			cmp 	#$FF
.1277	f0 2b		beq $12a4			beq  	CompareTrue
.1279	4c a7 12	jmp $12a7			jmp 	CompareFalse
.127c					CompareGreater:
.127c	20 3f 12	jsr $123f			jsr 	PerformComparison
.127f	c9 01		cmp #$01			cmp 	#$01
.1281	f0 21		beq $12a4			beq  	CompareTrue
.1283	4c a7 12	jmp $12a7			jmp 	CompareFalse
.1286					CompareNotEquals:
.1286	20 3f 12	jsr $123f			jsr 	PerformComparison
.1289	c9 00		cmp #$00			cmp 	#$00
.128b	d0 17		bne $12a4			bne  	CompareTrue
.128d	4c a7 12	jmp $12a7			jmp 	CompareFalse
.1290					CompareGreaterEq:
.1290	20 3f 12	jsr $123f			jsr 	PerformComparison
.1293	c9 ff		cmp #$ff			cmp 	#$FF
.1295	d0 0d		bne $12a4			bne  	CompareTrue
.1297	4c a7 12	jmp $12a7			jmp 	CompareFalse
.129a					CompareLessEq:
.129a	20 3f 12	jsr $123f			jsr 	PerformComparison
.129d	c9 01		cmp #$01			cmp 	#$01
.129f	d0 03		bne $12a4			bne  	CompareTrue
.12a1	4c a7 12	jmp $12a7			jmp 	CompareFalse
.12a4					CompareTrue:
.12a4	4c 17 16	jmp $1617			jmp 	MInt32True
.12a7					CompareFalse:
.12a7	4c 1b 16	jmp $161b			jmp 	MInt32False

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/dereference.asm

.12aa					DereferenceTwo:
.12aa	e8		inx				inx
.12ab	20 af 12	jsr $12af			jsr 	DereferenceOne
.12ae	ca		dex				dex
.12af					DereferenceOne:
.12af	b5 40		lda $40,x			lda 	esType,x
.12b1	10 01		bpl $12b4			bpl 	_DRNotReference 			; is it a reference ?
>12b3	db						.byte 	$DB
.12b4					_DRNotReference
.12b4	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/evaluate.asm

.12b5					EvaluateLevel:
.12b5	48		pha				pha 								; save precedence level.
.12b6	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.12b8	95 48		sta $48,x			sta 	esInt0,x
.12ba	95 50		sta $50,x			sta 	esInt1,x
.12bc	95 58		sta $58,x			sta 	esInt2,x
.12be	95 60		sta $60,x			sta 	esInt3,x
.12c0	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.12c2	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.12c4	30 21		bmi $12e7			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.12c6	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.12c7	30 0a		bmi $12d3			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.12c9	8a		txa				txa 								; stack level in X
.12ca	a2 00		ldx #$00		ldx	#0
.12cc	20 d9 16	jsr $16d9		jsr	variableHandler
.12cf	aa		tax				tax
.12d0	4c 10 13	jmp $1310			jmp		_ELHasTerm
.12d3					_ELIsConstant:
.12d3	4a		lsr a				lsr 	a 							; get the value back
.12d4	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.12d6	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.12d8					_ELCheckNext:
.12d8	c8		iny				iny 								; look at next
.12d9	b1 02		lda ($02),y			lda 	(codePtr),y
.12db	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.12dd	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.12df	b0 2f		bcs $1310			bcs 	_ELHasTerm 					; done getting the constant.
.12e1	20 51 13	jsr $1351			jsr 	ELShiftByteIn 				; shift byte into position.
.12e4	4c d8 12	jmp $12d8			jmp 	_ELCheckNext
.12e7					_ELIsToken:
.12e7	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.12e9	f0 0f		beq $12fa			beq 	_ELIsString
.12eb	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.12ed	d0 5f		bne $134e			bne 	_ELCheckUnary
.12ef	8a		txa				txa 								; put X into A
.12f0	c8		iny				iny 								; skip over the float marker
.12f1	a2 0e		ldx #$0e		ldx	#14
.12f3	20 ad 16	jsr $16ad		jsr	floatingpointHandler
.12f6	aa		tax				tax 								; restore X
.12f7	4c 10 13	jmp $1310			jmp 	_ELHasTerm
.12fa					_ELIsString:
.12fa	98		tya				tya 								; address of string is codePtr+y+1
.12fb	38		sec				sec
.12fc	65 02		adc $02				adc 	codePtr
.12fe	95 48		sta $48,x			sta 	esInt0,x
.1300	a5 03		lda $03				lda 	codePtr+1
.1302	69 00		adc #$00			adc 	#0
.1304	95 50		sta $50,x			sta 	esInt1,x
.1306	a9 40		lda #$40			lda 	#$40 						; set type to string value
.1308	95 40		sta $40,x			sta 	esType,x
.130a	c8		iny				iny 								; skip over string.
.130b	98		tya				tya
.130c	38		sec				sec									; +1 for the length itself.
.130d	71 02		adc ($02),y			adc 	(codePtr),y
.130f	a8		tay				tay 								; and fall through to term loop code.
.1310					_ELHasTerm:
.1310	b1 02		lda ($02),y			lda 	(codePtr),y
.1312	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1314	90 04		bcc $131a			bcc 	_ELPopExit
.1316	c9 9d		cmp #$9d			cmp 	#TOK_STRUCTST
.1318	90 02		bcc $131c			bcc 	_ELHasBinaryTerm
.131a					_ELPopExit:
.131a	68		pla				pla
.131b					_ELExit:
.131b	60		rts				rts
.131c					_ELHasBinaryTerm:
.131c	84 0a		sty $0a				sty 	tempShort 					; save position
.131e	a8		tay				tay 								; use token as an index and get the precedence.
.131f	b9 f9 12	lda $12f9,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1322	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1324	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.1326	68		pla				pla 								; restore current level.
.1327	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.1329	b0 f0		bcs $131b			bcs 	_ELExit
.132b	48		pha				pha 								; save current level back on the stack.
.132c	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.132e	48		pha				pha
.132f	c8		iny				iny
.1330	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1331	a5 0a		lda $0a				lda 	tempShort
.1333	20 b5 12	jsr $12b5			jsr 	EvaluateLevel
.1336	ca		dex				dex
.1337	68		pla				pla 								; get the operator back out.
.1338	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.133a	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.133b	aa		tax				tax
.133c	bd 1e 10	lda $101e,x			lda 	Group0Vectors,x
.133f	85 04		sta $04				sta 	temp0
.1341	bd 1f 10	lda $101f,x			lda 	Group0Vectors+1,x
.1344	85 05		sta $05				sta 	temp0+1
.1346	a6 0a		ldx $0a				ldx 	tempShort
.1348	20 4e 13	jsr $134e			jsr 	_ELCallTemp0
.134b	4c 10 13	jmp $1310			jmp 	_ELHasTerm 					; and loop back round.
.134e					_ELCheckUnary:
.134e					_ELCallTemp0:
.134e	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1351					ELShiftByteIn:
.1351	48		pha				pha 								; save bits to shift in.
.1352	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1354	48		pha				pha
.1355	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1357	95 60		sta $60,x			sta 	esInt3,x
.1359	b5 50		lda $50,x			lda 	esInt1,x
.135b	95 58		sta $58,x			sta 	esInt2,x
.135d	b5 48		lda $48,x			lda 	esInt0,x
.135f	95 50		sta $50,x			sta 	esInt1,x
.1361	a9 00		lda #$00			lda 	#0
.1363	95 48		sta $48,x			sta 	esInt0,x
.1365	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1366	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1368	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.136a					_ELShiftLoop:
.136a	4a		lsr a				lsr 	a
.136b	76 60		ror $60,x			ror 	esInt3,x
.136d	76 58		ror $58,x			ror 	esInt2,x
.136f	76 50		ror $50,x			ror 	esInt1,x
.1371	76 48		ror $48,x			ror 	esInt0,x
.1373	c9 01		cmp #$01			cmp 	#1
.1375	d0 f3		bne $136a			bne 	_ELShiftLoop
.1377	68		pla				pla 								; get original 6 bit value and OR in.
.1378	29 3f		and #$3f			and 	#$3F
.137a	15 48		ora $48,x			ora 	esInt0,x
.137c	95 48		sta $48,x			sta 	esInt0,x
.137e	60		rts				rts
.137f					ELBinaryOperatorInfo:

;******  Processing file: ..\source\main/evaluate/../../generated/binarystructinfo.inc

>137f	01					.byte	$01			; $86 and
>1380	01					.byte	$01			; $87 or
>1381	01					.byte	$01			; $88 xor
>1382	02					.byte	$02			; $89 >=
>1383	02					.byte	$02			; $8a <=
>1384	02					.byte	$02			; $8b >
>1385	02					.byte	$02			; $8c <
>1386	02					.byte	$02			; $8d =
>1387	02					.byte	$02			; $8e <>
>1388	03					.byte	$03			; $8f +
>1389	03					.byte	$03			; $90 -
>138a	04					.byte	$04			; $91 >>
>138b	04					.byte	$04			; $92 <<
>138c	04					.byte	$04			; $93 *
>138d	04					.byte	$04			; $94 /
>138e	04					.byte	$04			; $95 mod
>138f	05					.byte	$05			; $96 ^
>1390	06					.byte	$06			; $97 !
>1391	06					.byte	$06			; $98 ?
>1392	82					.byte	$82			; $99 repeat
>1393	82					.byte	$82			; $9a while
>1394	82					.byte	$82			; $9b for
>1395	82					.byte	$82			; $9c if
>1396	80					.byte	$80			; $9d until
>1397	80					.byte	$80			; $9e wend
>1398	80					.byte	$80			; $9f next
>1399	80					.byte	$80			; $a0 then
>139a	80					.byte	$80			; $a1 endif

;******  Return to file: ..\source\main/evaluate/evaluate.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32binary.asm

.139b					MInt32And:
.139b	b5 48		lda $48,x			lda 	esInt0,x
.139d	35 49		and $49,x			and 	esInt0+1,x
.139f	95 48		sta $48,x			sta 	esInt0,x
.13a1	b5 50		lda $50,x			lda 	esInt1,x
.13a3	35 51		and $51,x			and 	esInt1+1,x
.13a5	95 50		sta $50,x			sta 	esInt1,x
.13a7	b5 58		lda $58,x			lda 	esInt2,x
.13a9	35 59		and $59,x			and 	esInt2+1,x
.13ab	95 58		sta $58,x			sta 	esInt2,x
.13ad	b5 60		lda $60,x			lda 	esInt3,x
.13af	35 61		and $61,x			and 	esInt3+1,x
.13b1	95 60		sta $60,x			sta 	esInt3,x
.13b3	60		rts				rts
.13b4					MInt32Or:
.13b4	b5 48		lda $48,x			lda 	esInt0,x
.13b6	15 49		ora $49,x			ora 	esInt0+1,x
.13b8	95 48		sta $48,x			sta 	esInt0,x
.13ba	b5 50		lda $50,x			lda 	esInt1,x
.13bc	15 51		ora $51,x			ora 	esInt1+1,x
.13be	95 50		sta $50,x			sta 	esInt1,x
.13c0	b5 58		lda $58,x			lda 	esInt2,x
.13c2	15 59		ora $59,x			ora 	esInt2+1,x
.13c4	95 58		sta $58,x			sta 	esInt2,x
.13c6	b5 60		lda $60,x			lda 	esInt3,x
.13c8	15 61		ora $61,x			ora 	esInt3+1,x
.13ca	95 60		sta $60,x			sta 	esInt3,x
.13cc	60		rts				rts
.13cd					MInt32Xor:
.13cd	b5 48		lda $48,x			lda 	esInt0,x
.13cf	55 49		eor $49,x			eor 	esInt0+1,x
.13d1	95 48		sta $48,x			sta 	esInt0,x
.13d3	b5 50		lda $50,x			lda 	esInt1,x
.13d5	55 51		eor $51,x			eor 	esInt1+1,x
.13d7	95 50		sta $50,x			sta 	esInt1,x
.13d9	b5 58		lda $58,x			lda 	esInt2,x
.13db	55 59		eor $59,x			eor 	esInt2+1,x
.13dd	95 58		sta $58,x			sta 	esInt2,x
.13df	b5 60		lda $60,x			lda 	esInt3,x
.13e1	55 61		eor $61,x			eor 	esInt3+1,x
.13e3	95 60		sta $60,x			sta 	esInt3,x
.13e5	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32compare.asm

.13e6					MInt32Compare:
.13e6	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.13e8	d5 49		cmp $49,x			cmp 	esInt0+1,x
.13ea	d0 13		bne $13ff			bne 	MInt32Compare2
.13ec	b5 50		lda $50,x			lda 	esInt1,x
.13ee	d5 51		cmp $51,x			cmp 	esInt1+1,x
.13f0	d0 0d		bne $13ff			bne 	MInt32Compare2
.13f2	b5 58		lda $58,x			lda 	esInt2,x
.13f4	d5 59		cmp $59,x			cmp 	esInt2+1,x
.13f6	d0 07		bne $13ff			bne 	MInt32Compare2
.13f8	b5 60		lda $60,x			lda 	esInt3,x
.13fa	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.13fc	d0 01		bne $13ff			bne 	MInt32Compare2
.13fe	60		rts				rts
.13ff					MInt32Compare2:
.13ff	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1401	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1403	b5 50		lda $50,x			lda		esInt1,x
.1405	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1407	b5 58		lda $58,x			lda		esInt2,x
.1409	f5 59		sbc $59,x			sbc 	esInt2+1,x
.140b	b5 60		lda $60,x			lda		esInt3,x
.140d	f5 61		sbc $61,x			sbc 	esInt3+1,x
.140f	50 02		bvc $1413			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1411	49 80		eor #$80			eor 	#$80
.1413					_I32LNoOverflow
.1413	30 03		bmi $1418			bmi 	MInt32CLess					; if -ve then return $FF
.1415	a9 01		lda #$01			lda 	#$01						; else return $01
.1417	60		rts				rts
.1418					MInt32CLess:
.1418	a9 ff		lda #$ff			lda 	#$FF
.141a	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32divide.asm

.141b					MInt32SDivide:
.141b	98		tya				tya  								; save Y, which is the count of negations
.141c	48		pha				pha
.141d	a0 00		ldy #$00			ldy 	#0 							; zero count
.141f	20 37 14	jsr $1437			jsr 	_MInt32SRemSign 			; unsign TOS
.1422	e8		inx				inx 								; unsign TOS+1
.1423	20 37 14	jsr $1437			jsr 	_MInt32SRemSign
.1426	ca		dex				dex
.1427	98		tya				tya 								; save sign count on stack
.1428	48		pha				pha
.1429	20 40 14	jsr $1440			jsr 	MInt32UDivide 				; unsigned division
.142c	68		pla				pla 								; get sign count back
.142d	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.142f	f0 03		beq $1434			beq 	_I32SNoNeg
.1431	20 d5 15	jsr $15d5			jsr 	MInt32Negate
.1434					_I32SNoNeg:
.1434	68		pla				pla 								; restoe Y and exit
.1435	a8		tay				tay
.1436	60		rts				rts
.1437					_MInt32SRemSign:
.1437	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1439	10 04		bpl $143f			bpl 	_MInt32SRSExit
.143b	c8		iny				iny 								; increment the sign count
.143c	20 d5 15	jsr $15d5			jsr 	MInt32Negate 				; negate the value.
.143f					_MInt32SRSExit:
.143f	60		rts				rts
.1440					MInt32UDivide:
.1440	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1442	15 51		ora $51,x			ora 	esInt1+1,x
.1444	15 52		ora $52,x			ora 	esInt1+2,x
.1446	15 53		ora $53,x			ora 	esInt1+3,x
.1448	f0 4a		beq $1494			beq 	_MInt32DZero
.144a	e8		inx				inx 								; clear A
.144b	e8		inx				inx
.144c	20 1b 16	jsr $161b			jsr 	MInt32False
.144f	ca		dex				dex
.1450	ca		dex				dex
.1451	98		tya				tya 								; save Y on the stack
.1452	48		pha				pha
.1453	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1455					_MInt32UDLoop:
.1455	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1457	36 50		rol $50,x			rol 	esInt1,x
.1459	36 58		rol $58,x			rol 	esInt2,x
.145b	36 60		rol $60,x			rol 	esInt3,x
.145d	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.145f	36 52		rol $52,x			rol 	esInt1+2,x
.1461	36 5a		rol $5a,x			rol 	esInt2+2,x
.1463	36 62		rol $62,x			rol 	esInt3+2,x
.1465	38		sec				sec 								; calculate A-M saving result on the stack
.1466	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1468	f5 49		sbc $49,x			sbc 	esInt0+1,x
.146a	48		pha				pha
.146b	b5 52		lda $52,x			lda 	esInt1+2,x
.146d	f5 51		sbc $51,x			sbc 	esInt1+1,x
.146f	48		pha				pha
.1470	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1472	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1474	48		pha				pha
.1475	b5 62		lda $62,x			lda 	esInt3+2,x
.1477	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1479	90 10		bcc $148b			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.147b	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.147d	68		pla				pla
.147e	95 5a		sta $5a,x			sta 	esInt2+2,x
.1480	68		pla				pla
.1481	95 52		sta $52,x			sta 	esInt1+2,x
.1483	68		pla				pla
.1484	95 4a		sta $4a,x			sta 	esInt0+2,x
.1486	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1488	4c 8e 14	jmp $148e			jmp 	_MInt32Next 					; do the next iteration
.148b					_MInt32NoSubtract:
.148b	68		pla				pla
.148c	68		pla				pla
.148d	68		pla				pla
.148e					_MInt32Next:
.148e	88		dey				dey 								; do this 32 times.
.148f	d0 c4		bne $1455			bne 	_MInt32UDLoop
.1491	68		pla				pla 								; restore Y and exit
.1492	a8		tay				tay
.1493	60		rts				rts
.1494					_MInt32DZero:
.1494	a2 02		ldx #$02			ldx 	#ErrorID_DivZero
.1496	20 dc 10	jsr $10dc			jsr 	ErrorHandler
.1499					MInt32Modulus:
.1499	20 40 14	jsr $1440			jsr 	MInt32UDivide 				; do the division.
.149c	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.149e	95 60		sta $60,x			sta 	esInt3,x
.14a0	b5 5a		lda $5a,x			lda 	esInt2+2,x
.14a2	95 58		sta $58,x			sta 	esInt2,x
.14a4	b5 52		lda $52,x			lda 	esInt1+2,x
.14a6	95 50		sta $50,x			sta 	esInt1,x
.14a8	b5 4a		lda $4a,x			lda 	esInt0+2,x
.14aa	95 48		sta $48,x			sta 	esInt0,x
.14ac	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32fromstr.asm

.14ad					MInt32FromString:
.14ad	85 0a		sta $0a				sta 	tempShort 					; save base
.14af	98		tya				tya
.14b0	48		pha				pha
.14b1	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.14b3	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.14b5	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.14b7	d0 01		bne $14ba			bne 	_I32FSNotNegative
.14b9	c8		iny				iny 								; if so consume it.
.14ba					_I32FSNotNegative:
.14ba	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.14bc	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.14be	f0 02		beq $14c2			beq 	_I32FSNN2
.14c0	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.14c2					_I32FSNN2:
.14c2	48		pha				pha 								; save base + final sign on stack.
.14c3	20 1b 16	jsr $161b			jsr 	MInt32False 					; zero the return value.
.14c6					I32FSMainLoop:
.14c6	68		pla				pla 								; get the base back into tempshort
.14c7	48		pha				pha
.14c8	29 7f		and #$7f			and 	#$7F
.14ca	85 0a		sta $0a				sta 	tempShort
.14cc	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.14ce	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.14d0	90 02		bcc $14d4			bcc 	_I32FSNotLC
.14d2	e9 20		sbc #$20			sbc 	#32
.14d4					_I32FSNotLC:
.14d4	38		sec				sec 								; subtract 48 (ASCII "0")
.14d5	e9 30		sbc #$30			sbc 	#"0"
.14d7	90 26		bcc $14ff			bcc 	_I32FSDone 					; nothing more to do.
.14d9	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.14db	90 06		bcc $14e3			bcc 	_I32FSValidate
.14dd	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.14df	90 1e		bcc $14ff			bcc 	_I32FSDone
.14e1	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.14e3					_I32FSValidate:
.14e3	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.14e5	b0 18		bcs $14ff			bcs 	_I32FSDone 					; sorry, too large for this base.
.14e7	48		pha				pha 								; save the new digit value.
.14e8	e8		inx				inx 								; put base into next slot.
.14e9	a5 0a		lda $0a				lda 	tempShort
.14eb	20 2a 16	jsr $162a			jsr 	MInt32Set8Bit
.14ee	ca		dex				dex
.14ef	20 41 15	jsr $1541			jsr 	MInt32Multiply 				; multiply current by the base
.14f2	e8		inx				inx
.14f3	68		pla				pla  								; put additive into next slot
.14f4	20 2a 16	jsr $162a			jsr 	MInt32Set8Bit
.14f7	ca		dex				dex
.14f8	20 0d 15	jsr $150d			jsr 	MInt32Add 					; and add it
.14fb	c8		iny				iny 								; look at next character
.14fc	4c c6 14	jmp $14c6			jmp 	I32FSMainLoop 				; and go round again.
.14ff					_I32FSDone:
.14ff	68		pla				pla 								; get base/final sign back
.1500	10 04		bpl $1506			bpl 	_I32FSNN3
.1502	88		dey				dey 								; one fewer character to allow for the - prefix.
.1503	20 d5 15	jsr $15d5			jsr 	MInt32Negate 				; negate the result.
.1506					_I32FSNN3:
.1506	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1508	68		pla				pla
.1509	a8		tay				tay
.150a	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.150c	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32math.asm

.150d					MInt32Add:
.150d	18		clc				clc
.150e	b5 48		lda $48,x			lda 	esInt0,x
.1510	75 49		adc $49,x			adc 	esInt0+1,x
.1512	95 48		sta $48,x			sta 	esInt0,x
.1514	b5 50		lda $50,x			lda 	esInt1,x
.1516	75 51		adc $51,x			adc 	esInt1+1,x
.1518	95 50		sta $50,x			sta 	esInt1,x
.151a	b5 58		lda $58,x			lda 	esInt2,x
.151c	75 59		adc $59,x			adc 	esInt2+1,x
.151e	95 58		sta $58,x			sta 	esInt2,x
.1520	b5 60		lda $60,x			lda 	esInt3,x
.1522	75 61		adc $61,x			adc 	esInt3+1,x
.1524	95 60		sta $60,x			sta 	esInt3,x
.1526	60		rts				rts
.1527					MInt32Sub:
.1527	38		sec				sec
.1528	b5 48		lda $48,x			lda 	esInt0,x
.152a	f5 49		sbc $49,x			sbc 	esInt0+1,x
.152c	95 48		sta $48,x			sta 	esInt0,x
.152e	b5 50		lda $50,x			lda 	esInt1,x
.1530	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1532	95 50		sta $50,x			sta 	esInt1,x
.1534	b5 58		lda $58,x			lda 	esInt2,x
.1536	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1538	95 58		sta $58,x			sta 	esInt2,x
.153a	b5 60		lda $60,x			lda 	esInt3,x
.153c	f5 61		sbc $61,x			sbc 	esInt3+1,x
.153e	95 60		sta $60,x			sta 	esInt3,x
.1540	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32multiply.asm

.1541					MInt32Multiply:
.1541	e8		inx				inx 								; copy 2nd -> 3rd
.1542	20 67 15	jsr $1567			jsr 	MInt32CopyUp
.1545	ca		dex				dex
.1546	20 67 15	jsr $1567			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1549	20 1b 16	jsr $161b			jsr 	MInt32False 					; zero 1st.
.154c					_I32Loop:
.154c	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.154e	29 01		and #$01			and 	#1
.1550	f0 03		beq $1555			beq 	_I32NoAdd 					; if set
.1552	20 0d 15	jsr $150d			jsr 	MInt32Add 					; add 2nd to 1st.
.1555					_I32NoAdd:
.1555	e8		inx				inx 								; shift 2nd left
.1556	20 30 16	jsr $1630			jsr 	MInt32ShiftLeft
.1559	e8		inx				inx  								; shift 3rd right
.155a	20 39 16	jsr $1639			jsr 	MInt32ShiftRight
.155d	20 42 16	jsr $1642			jsr 	MInt32Zero 					; check if zero.
.1560	08		php				php 								; save status bits
.1561	ca		dex				dex 	 							; point back to 1st
.1562	ca		dex				dex
.1563	28		plp				plp 								; get status bits
.1564	d0 e6		bne $154c			bne 	_I32Loop 					; if non-zero keep going.
.1566	60		rts				rts
.1567					MInt32CopyUp:
.1567	b5 48		lda $48,x			lda 	esInt0,x
.1569	95 49		sta $49,x			sta 	esInt0+1,x
.156b	b5 50		lda $50,x			lda 	esInt1,x
.156d	95 51		sta $51,x			sta 	esInt1+1,x
.156f	b5 58		lda $58,x			lda 	esInt2,x
.1571	95 59		sta $59,x			sta 	esInt2+1,x
.1573	b5 60		lda $60,x			lda 	esInt3,x
.1575	95 61		sta $61,x			sta 	esInt3+1,x
.1577	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32tostr.asm

>0800					MCharCount:	.fill 	1						; count of converted characters
.1578					MInt32ToString:
.1578	48		pha				pha 								; save base
.1579	85 0a		sta $0a				sta 	tempShort 					; save target base.
.157b	a9 00		lda #$00			lda 	#0
.157d	8d 00 08	sta $0800			sta 	MCharCount 					; clear character count.
.1580	98		tya				tya
.1581	48		pha				pha
.1582	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1584	10 10		bpl $1596			bpl 	_I32TSUnsigned
.1586	48		pha				pha 								; save base on stack.
.1587	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1589	10 08		bpl $1593			bpl 	_I32TSNoFlip
.158b	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.158d	20 c2 15	jsr $15c2			jsr 	MI32WriteCharacter
.1590	20 d5 15	jsr $15d5			jsr 	MInt32Negate 				; negate the value.
.1593					_I32TSNoFlip:
.1593	68		pla				pla 								; get the base back
.1594	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1596					_I32TSUnsigned:
.1596	20 9d 15	jsr $159d			jsr 	MI32DivideWrite 				; recursive code to output string.
.1599	68		pla				pla
.159a	a8		tay				tay
.159b	68		pla				pla
.159c	60		rts				rts
.159d					MI32DivideWrite:
.159d	48		pha				pha 								; save the divisor/base
.159e	e8		inx				inx 								; write in the dividing position.
.159f	20 2a 16	jsr $162a			jsr 	MInt32Set8Bit
.15a2	ca		dex				dex
.15a3	20 40 14	jsr $1440			jsr 	MInt32UDivide 				; divide number by base.
.15a6	68		pla				pla 								; get the base into Y
.15a7	a8		tay				tay
.15a8	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.15aa	48		pha				pha
.15ab	20 42 16	jsr $1642			jsr 	MInt32Zero 					; is the result zero ?
.15ae	f0 04		beq $15b4			beq 	_I32NoRecurse 				; if so, don't recurse.
.15b0	98		tya				tya 								; put base into A
.15b1	20 9d 15	jsr $159d			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.15b4					_I32NoRecurse:
.15b4	68		pla				pla 								; get the remainder back
.15b5	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.15b7	90 02		bcc $15bb			bcc 	_I32NotHex
.15b9	69 06		adc #$06			adc 	#7-1
.15bb					_I32NotHex:
.15bb	18		clc				clc 								; make it ASCII
.15bc	69 30		adc #$30			adc 	#48
.15be	20 c2 15	jsr $15c2			jsr 	MI32WriteCharacter 			; write the character out
.15c1	60		rts				rts 								; and exit.
.15c2					MI32WriteCharacter:
.15c2	ac 00 08	ldy $0800			ldy 	MCharCount 					; get position
.15c5	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.15c7	c8		iny				iny
.15c8	a9 00		lda #$00			lda 	#0
.15ca	91 04		sta ($04),y			sta 	(temp0),y
.15cc	ee 00 08	inc $0800			inc 	MCharCount 					; bump count
.15cf	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32unary.asm

>0801					MSeed32:	.fill 	4							; random number seed.
.15d0					MInt32Absolute:
.15d0	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.15d2	30 01		bmi $15d5			bmi 	MInt32Negate
.15d4	60		rts				rts
.15d5					MInt32Negate:
.15d5	38		sec				sec
.15d6	a9 00		lda #$00			lda 	#0
.15d8	f5 48		sbc $48,x			sbc 	esInt0,x
.15da	95 48		sta $48,x			sta 	esInt0,x
.15dc	a9 00		lda #$00			lda 	#0
.15de	f5 50		sbc $50,x			sbc 	esInt1,x
.15e0	95 50		sta $50,x			sta 	esInt1,x
.15e2	a9 00		lda #$00			lda 	#0
.15e4	f5 58		sbc $58,x			sbc 	esInt2,x
.15e6	95 58		sta $58,x			sta 	esInt2,x
.15e8	a9 00		lda #$00			lda 	#0
.15ea	f5 60		sbc $60,x			sbc 	esInt3,x
.15ec	95 60		sta $60,x			sta 	esInt3,x
.15ee	60		rts				rts
.15ef					MInt32Not:
.15ef	b5 48		lda $48,x			lda 	esInt0,x
.15f1	49 ff		eor #$ff			eor 	#$FF
.15f3	95 48		sta $48,x			sta 	esInt0,x
.15f5	b5 50		lda $50,x			lda 	esInt1,x
.15f7	49 ff		eor #$ff			eor 	#$FF
.15f9	95 50		sta $50,x			sta 	esInt1,x
.15fb	b5 58		lda $58,x			lda 	esInt2,x
.15fd	49 ff		eor #$ff			eor 	#$FF
.15ff	95 58		sta $58,x			sta 	esInt2,x
.1601	b5 60		lda $60,x			lda 	esInt3,x
.1603	49 ff		eor #$ff			eor 	#$FF
.1605	95 60		sta $60,x			sta 	esInt3,x
.1607	60		rts				rts
.1608					MInt32Sign:
.1608	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.160a	30 0b		bmi $1617			bmi 	MInt32True 					; if set return -1 (true)
.160c	20 42 16	jsr $1642			jsr 	MInt32Zero 					; is it zero ?
.160f	f0 0a		beq $161b			beq 	MInt32False 					; if zero return 0 (false)
.1611	20 1b 16	jsr $161b			jsr 	MInt32False 					; > 0 return 1
.1614	f6 48		inc $48,x			inc 	esInt0,x
.1616	60		rts				rts
.1617					MInt32True:
.1617	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1619	d0 02		bne $161d			bne 	MInt32WriteAll
.161b					MInt32False:
.161b	a9 00		lda #$00			lda 	#0
.161d					MInt32WriteAll:
.161d	95 48		sta $48,x			sta 	esInt0,x
.161f					MInt32Write123:
.161f	95 50		sta $50,x			sta 	esInt1,x
.1621	95 58		sta $58,x			sta 	esInt2,x
.1623	95 60		sta $60,x			sta 	esInt3,x
.1625	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1627	95 40		sta $40,x			sta 	esType,x
.1629	60		rts				rts
.162a					MInt32Set8Bit:
.162a	95 48		sta $48,x			sta 	esInt0,x
.162c	a9 00		lda #$00			lda 	#0
.162e	f0 ef		beq $161f			beq		MInt32Write123
.1630					MInt32ShiftLeft:
.1630	16 48		asl $48,x			asl 	esInt0,x
.1632	36 50		rol $50,x			rol	 	esInt1,x
.1634	36 58		rol $58,x			rol	 	esInt2,x
.1636	36 60		rol $60,x			rol	 	esInt3,x
.1638	60		rts				rts
.1639					MInt32ShiftRight:
.1639	56 60		lsr $60,x			lsr 	esInt3,x
.163b	76 58		ror $58,x			ror 	esInt2,x
.163d	76 50		ror $50,x			ror 	esInt1,x
.163f	76 48		ror $48,x			ror 	esInt0,x
.1641	60		rts				rts
.1642					MInt32Zero:
.1642	b5 48		lda $48,x			lda 	esInt0,x
.1644	15 50		ora $50,x			ora 	esInt1,x
.1646	15 58		ora $58,x			ora 	esInt2,x
.1648	15 60		ora $60,x			ora 	esInt3,x
.164a	60		rts				rts
.164b					MInt32Random:
.164b	98		tya				tya
.164c	48		pha				pha
.164d	a0 07		ldy #$07			ldy 	#7
.164f	ad 01 08	lda $0801			lda 	MSeed32+0
.1652	d0 03		bne $1657			bne 	_Random1
.1654	a8		tay				tay
.1655	a9 aa		lda #$aa			lda		#$AA
.1657					_Random1:
.1657	0a		asl a				asl 	a
.1658	2e 02 08	rol $0802			rol 	MSeed32+1
.165b	2e 03 08	rol $0803			rol 	MSeed32+2
.165e	2e 04 08	rol $0804			rol 	MSeed32+3
.1661	90 02		bcc $1665			bcc 	_Random2
.1663	49 c5		eor #$c5			eor 	#$C5
.1665					_Random2:
.1665	88		dey				dey
.1666	d0 ef		bne $1657			bne 	_Random1
.1668	8d 01 08	sta $0801			sta 	MSeed32+0
.166b	95 48		sta $48,x			sta 	esInt0,x
.166d	ad 02 08	lda $0802			lda 	MSeed32+1
.1670	95 50		sta $50,x			sta 	esInt1,x
.1672	ad 03 08	lda $0803			lda 	MSeed32+2
.1675	95 58		sta $58,x			sta 	esInt2,x
.1677	ad 04 08	lda $0804			lda 	MSeed32+3
.167a	95 60		sta $60,x			sta 	esInt3,x
.167c	68		pla				pla
.167d	a8		tay				tay
.167e	60		rts				rts

;******  Return to file: ..\source\main/main.asm

.167f					mainHandler:
.167f	7c 82 16	jmp ($1682,x)			jmp 	(mainVectors,x)
.1682					mainVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.asm

.1682					assemblerHandler:
.1682	7c 85 16	jmp ($1685,x)			jmp 	(assemblerVectors,x)
.1685					assemblerVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.asm

.1685					deviceHandler:
.1685	7c 88 16	jmp ($1688,x)			jmp 	(deviceVectors,x)
.1688					deviceVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.asm


;******  Processing file: ..\source\error/errorhandler.asm

.10dc					ErrorHandler:
.10dc	a9 ee		lda #$ee			lda 	#$EE
.10de	a8		tay				tay
>10df	db						.byte 	$DB
.10e0	4c e0 10	jmp $10e0	_EHHalt:jmp 	_EHHalt

;******  Return to file: ..\source\error/error.asm


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/addsub.asm

.1688					FPAdd:
>1688	db						.byte 	$DB
.1689	4c 88 16	jmp $1688			jmp 	FPAdd
.168c					FPSubtract:
>168c	db						.byte 	$DB
.168d	4c 8c 16	jmp $168c			jmp 	FPSubtract

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/compare.asm

.1690					FLTCompare:
>1690	db						.byte 	$DB
.1691	4c 90 16	jmp $1690			jmp 	FLTCompare

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/convert.asm

.1694					FPItoF:
>1694	db						.byte 	$DB
.1695	4c 94 16	jmp $1694			jmp 	FPItoF
.1698					FPFtoI:
>1698	db						.byte 	$DB
.1699	4c 98 16	jmp $1698			jmp 	FPFtoI

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/importexport.asm

.169c					FPImport:
>169c	db						.byte 	$DB
.169d	4c 9c 16	jmp $169c			jmp 	FPImport

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/muldiv.asm

.16a0					FPMultiply:
>16a0	db						.byte 	$DB
.16a1	4c a0 16	jmp $16a0			jmp 	FPMultiply
.16a4					FPDivide:
>16a4	db						.byte 	$DB
.16a5	4c a4 16	jmp $16a4			jmp 	FPDivide
.16a8					FPImpossible:
.16a8	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.16aa	20 dc 10	jsr $10dc			jsr 	ErrorHandler

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm

.16ad					floatingpointHandler:
.16ad	7c b0 16	jmp ($16b0,x)			jmp 	(floatingpointVectors,x)
.16b0					floatingpointVectors:
>16b0	88 16					.word FPAdd                ; index 0
>16b2	90 16					.word FLTCompare           ; index 2
>16b4	a4 16					.word FPDivide             ; index 4
>16b6	a8 16					.word FPImpossible         ; index 6
>16b8	a0 16					.word FPMultiply           ; index 8
>16ba	8c 16					.word FPSubtract           ; index 10
>16bc	98 16					.word FPFtoI               ; index 12
>16be	9c 16					.word FPImport             ; index 14
>16c0	94 16					.word FPItoF               ; index 16

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.asm

.16c2					interactionHandler:
.16c2	7c c5 16	jmp ($16c5,x)			jmp 	(interactionVectors,x)
.16c5					interactionVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.asm


;******  Processing file: ..\source\string/compare.asm

.16c5					STRCompare:
>16c5	db						.byte 	$DB
.16c6	4c c5 16	jmp $16c5			jmp 	STRCompare

;******  Return to file: ..\source\string/string.asm


;******  Processing file: ..\source\string/concat.asm

.16c9					StringConcat:
>16c9	db						.byte 	$DB
.16ca	80 fd		bra $16c9			bra 	StringConcat

;******  Return to file: ..\source\string/string.asm

.16cc					stringHandler:
.16cc	7c cf 16	jmp ($16cf,x)			jmp 	(stringVectors,x)
.16cf					stringVectors:
>16cf	c9 16					.word StringConcat         ; index 0
>16d1	c5 16					.word STRCompare           ; index 2

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.asm

.16d3					tokeniserHandler:
.16d3	7c d6 16	jmp ($16d6,x)			jmp 	(tokeniserVectors,x)
.16d6					tokeniserVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.asm


;******  Processing file: ..\source\variable/access.asm

.16d6					AccessVariable:
>16d6	db						.byte 	$DB
.16d7	80 fd		bra $16d6			bra 	AccessVariable

;******  Return to file: ..\source\variable/variable.asm

.16d9					variableHandler:
.16d9	7c dc 16	jmp ($16dc,x)			jmp 	(variableVectors,x)
.16dc					variableVectors:
>16dc	d6 16					.word AccessVariable       ; index 0

;******  Return to file: ..\source\basic.asm


;******  End of listing
