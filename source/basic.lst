
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ../source/basic.asm
; Sat Feb 27 18:38:38 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/basic.asm


;******  Processing file: ../source/main/01common.inc

=8					StackSize = 8

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/02macros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.
.0868					basePage:
>0868							.fill 	2
.086a					endMemory:
>086a							.fill 	2
.086c					highMemory:
>086c							.fill 	2
.086e					lowMemory:
>086e							.fill 	2

;******  Processing file: ../source/main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$9d					TOK_STRUCTST=$9d
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ../source/main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/imath/intmacros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/errorhandler.inc


;******  Processing file: ../source/error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assert
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma

;******  Return to file: ../source/error/errorhandler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/memory.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.asm


;******  Processing file: ../source/main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d 68 08	sta $0868			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d 69 08	sta $0869			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d 6a 08	sta $086a			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d 6b 08	sta $086b			sta 	1+(endMemory)
.1017	4c 71 10	jmp $1071			jmp 	Command_Run
.19e9					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ../source/main/../generated/testcode.inc

>5000	06 64 00 81 86 80 08 6e			.byte 6,100,0,129,134,128,8,110,0,217,65,141,65,128,8,120,0,217,66,141,66,128,5,130,0,219,128,0
>5008	00 d9 41 8d 41 80 08 78 00 d9 42 8d 42 80 05 82
>5018	00 db 80 00

;******  Return to file: ../source/main/00start.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/assert.asm

.101a					Command_Assert:
.101a	20 03 15	jsr $1503			jsr 	EvaluateRoot 				; what is being asserted.
.101d	20 40 19	jsr $1940			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.1025	20 a4 19	jsr $19a4			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad 6a 08	lda $086a			lda 	endMemory					; set high memory = end of memory
.102d	8d 6c 08	sta $086c			sta 	highMemory
.1030	ad 6b 08	lda $086b			lda 	endMemory+1
.1033	8d 6d 08	sta $086d			sta 	highMemory+1
.1036	ad 68 08	lda $0868			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad 69 08	lda $0869			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d 6e 08	sta $086e			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d 6f 08	sta $086f			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 64 10	jsr $1064			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	68		pla				pla
.1062	a8		tay				tay
.1063	60		rts				rts
.1064					AdvanceLowMemoryByte:
.1064	18		clc				clc
.1065	6d 6e 08	adc $086e			adc 	lowMemory
.1068	8d 6e 08	sta $086e			sta 	lowMemory
.106b	90 03		bcc $1070			bcc 	_ALMBExit
.106d	ee 6f 08	inc $086f			inc 	lowMemory+1
.1070					_ALMBExit:
.1070	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/run.asm

.1071					Command_Run:
.1071	a2 ff		ldx #$ff			ldx 	#$FF
.1073	9a		txs				txs
.1074	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1077	20 b8 10	jsr $10b8			jsr 	ResetCodeAddress
.107a	a0 03		ldy #$03			ldy 	#3
.107c					CRNextInstruction:
.107c	64 79		stz $79				stz 	softMemAlloc+1
.107e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1080	10 14		bpl $1096			bpl 	_CRNotToken
.1082	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1084	b0 04		bcs $108a			bcs 	_CRExecute
.1086	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1088	b0 3b		bcs $10c5			bcs 	Unimplemented 				; else not implemented.
.108a					_CRExecute:
.108a	c8		iny				iny 								; consume it.
.108b	0a		asl a				asl 	a 							; double it, losing most significant bit.
.108c	aa		tax				tax
.108d	20 93 10	jsr $1093			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1090	4c 7c 10	jmp $107c			jmp 	CRNextInstruction
.1093					_CRRunRoutine:
.1093	7c c9 10	jmp ($10c9,x)			jmp 	(Group0Vectors,x)
.1096					_CRNotToken:
>1096	db						.byte 	$DB
.1097					CommandShift1:
.1097	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1099	10 2a		bpl $10c5			bpl 	Unimplemented 				; we have an error as this should not happen.
.109b	0a		asl a				asl 	a 							; double into X
.109c	aa		tax				tax
.109d	c8		iny				iny 								; advance over it.
.109e	20 a4 10	jsr $10a4			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.10a1	4c 7c 10	jmp $107c			jmp 	CRNextInstruction
.10a4					_RunIt:
.10a4	7c 7d 11	jmp ($117d,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.10a7					CommandShift2:
.10a7	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.10a9	10 1a		bpl $10c5			bpl 	Unimplemented 				; we have an error as this should not happen.
.10ab	0a		asl a				asl 	a 							; double into X
.10ac	aa		tax				tax
.10ad	c8		iny				iny 								; advance over it.
.10ae	20 b4 10	jsr $10b4			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.10b1	4c 7c 10	jmp $107c			jmp 	CRNextInstruction
.10b4					_RunIt:
.10b4	7c 8d 11	jmp ($118d,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.10b7					CommandColon:
.10b7	60		rts				rts
.10b8					ResetCodeAddress:
.10b8	ad 68 08	lda $0868			lda 	basePage 					; copy basePage to code Pointer
.10bb	85 02		sta $02				sta 	codePtr
.10bd	ad 69 08	lda $0869			lda 	basePage+1
.10c0	85 03		sta $03				sta 	codePtr+1
.10c2	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.10c4	60		rts				rts
.10c5					Unimplemented:
>10c5	db						.byte 	$DB
.10c6	4c c5 10	jmp $10c5			jmp 	Unimplemented

;******  Processing file: ../source/main/commands/../../generated/tokenvectors0.inc

.10c9					Group0Vectors:
>10c9	a3 11					.word	AdvanceNextLine          ; $80 [[eol]]
>10cb	97 10					.word	CommandShift1            ; $81 [[sh1]]
>10cd	a7 10					.word	CommandShift2            ; $82 [[sh2]]
>10cf	c5 10					.word	Unimplemented            ; $83 [[sh3]]
>10d1	c5 10					.word	Unimplemented            ; $84 [[fpc]]
>10d3	c5 10					.word	Unimplemented            ; $85 [[str]]
>10d5	78 12					.word	AndHandler               ; $86 and
>10d7	65 12					.word	OrHandler                ; $87 or
>10d9	52 12					.word	XorHandler               ; $88 xor
>10db	8f 13					.word	CompareGreaterEq         ; $89 >=
>10dd	99 13					.word	CompareLessEq            ; $8a <=
>10df	7b 13					.word	CompareGreater           ; $8b >
>10e1	71 13					.word	CompareLess              ; $8c <
>10e3	67 13					.word	CompareEquals            ; $8d =
>10e5	85 13					.word	CompareNotEquals         ; $8e <>
>10e7	e3 11					.word	AddHandler               ; $8f +
>10e9	06 12					.word	SubHandler               ; $90 -
>10eb	9e 12					.word	ShrHandler               ; $91 >>
>10ed	8b 12					.word	ShlHandler               ; $92 <<
>10ef	19 12					.word	MulHandler               ; $93 *
>10f1	2c 12					.word	DivHandler               ; $94 /
>10f3	3f 12					.word	ModHandler               ; $95 mod
>10f5	d7 12					.word	PowerHandler             ; $96 ^
>10f7	b1 12					.word	WordRefHandler           ; $97 !
>10f9	c4 12					.word	ByteRefHandler           ; $98 ?
>10fb	c5 10					.word	Unimplemented            ; $99 repeat
>10fd	c5 10					.word	Unimplemented            ; $9a while
>10ff	c5 10					.word	Unimplemented            ; $9b for
>1101	c5 10					.word	Unimplemented            ; $9c if
>1103	c5 10					.word	Unimplemented            ; $9d until
>1105	c5 10					.word	Unimplemented            ; $9e wend
>1107	c5 10					.word	Unimplemented            ; $9f next
>1109	c5 10					.word	Unimplemented            ; $a0 then
>110b	c5 10					.word	Unimplemented            ; $a1 endif
>110d	db 14					.word	UnaryParenthesis         ; $a2 (
>110f	87 15					.word	UnaryLen                 ; $a3 len(
>1111	cb 15					.word	UnarySgn                 ; $a4 sgn(
>1113	b4 15					.word	UnaryAbs                 ; $a5 abs(
>1115	24 16					.word	Unary_Random             ; $a6 random(
>1117	6e 16					.word	Unary_Page               ; $a7 page
>1119	15 19					.word	MInt32True               ; $a8 true
>111b	19 19					.word	MInt32False              ; $a9 false
>111d	39 16					.word	Unary_Min                ; $aa min(
>111f	3d 16					.word	Unary_Max                ; $ab max(
>1121	c5 10					.word	Unimplemented            ; $ac sys(
>1123	c5 10					.word	Unimplemented            ; $ad timer(
>1125	c5 10					.word	Unimplemented            ; $ae event(
>1127	c5 10					.word	Unimplemented            ; $af get(
>1129	c5 10					.word	Unimplemented            ; $b0 inkey(
>112b	c5 10					.word	Unimplemented            ; $b1 alloc(
>112d	c5 10					.word	Unimplemented            ; $b2 chr$(
>112f	c5 10					.word	Unimplemented            ; $b3 left$(
>1131	c5 10					.word	Unimplemented            ; $b4 mid$(
>1133	c5 10					.word	Unimplemented            ; $b5 right$(
>1135	c5 10					.word	Unimplemented            ; $b6 str$(
>1137	c5 10					.word	Unimplemented            ; $b7 val(
>1139	e2 15					.word	UnaryPeek                ; $b8 peek(
>113b	e8 15					.word	UnaryDeek                ; $b9 deek(
>113d	ee 15					.word	UnaryLeek                ; $ba leek(
>113f	a5 15					.word	UnaryAsc                 ; $bb asc(
>1141	c5 10					.word	Unimplemented            ; $bc int(
>1143	c5 10					.word	Unimplemented            ; $bd float(
>1145	7c 16					.word	UnaryReference           ; $be @
>1147	92 16					.word	UnaryComplement          ; $bf ~
>1149	8f 16					.word	UnaryHexMarker           ; $c0 &
>114b	c5 10					.word	Unimplemented            ; $c1 )
>114d	b7 10					.word	CommandColon             ; $c2 :
>114f	c5 10					.word	Unimplemented            ; $c3 ,
>1151	c5 10					.word	Unimplemented            ; $c4 ;
>1153	c5 10					.word	Unimplemented            ; $c5 ]
>1155	c5 10					.word	Unimplemented            ; $c6 to
>1157	c5 10					.word	Unimplemented            ; $c7 step
>1159	c5 10					.word	Unimplemented            ; $c8 proc
>115b	c5 10					.word	Unimplemented            ; $c9 endproc
>115d	c5 10					.word	Unimplemented            ; $ca local
>115f	c5 10					.word	Unimplemented            ; $cb rem
>1161	c5 10					.word	Unimplemented            ; $cc let
>1163	c5 10					.word	Unimplemented            ; $cd '
>1165	c5 10					.word	Unimplemented            ; $ce [
>1167	c5 10					.word	Unimplemented            ; $cf input
>1169	c5 10					.word	Unimplemented            ; $d0 else
>116b	c5 10					.word	Unimplemented            ; $d1 vdu
>116d	c5 10					.word	Unimplemented            ; $d2 read
>116f	c5 10					.word	Unimplemented            ; $d3 data
>1171	c5 10					.word	Unimplemented            ; $d4 restore
>1173	c5 10					.word	Unimplemented            ; $d5 print
>1175	c5 10					.word	Unimplemented            ; $d6 goto
>1177	c5 10					.word	Unimplemented            ; $d7 gosub
>1179	c5 10					.word	Unimplemented            ; $d8 return
>117b	1a 10					.word	Command_Assert           ; $d9 assert
>117d	9b 11					.word	CommandStop              ; $da stop
>117f	a0 11					.word	CommandEnd               ; $db end
>1181	c5 10					.word	Unimplemented            ; $dc dim
>1183	c5 10					.word	Unimplemented            ; $dd poke
>1185	c5 10					.word	Unimplemented            ; $de doke
>1187	c5 10					.word	Unimplemented            ; $df loke

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors1.inc

.1189					Group1Vectors:
>1189	28 10					.word	CommandClear             ; $86 clear
>118b	c5 10					.word	Unimplemented            ; $87 load
>118d	c5 10					.word	Unimplemented            ; $88 save
>118f	c5 10					.word	Unimplemented            ; $89 list
>1191	c5 10					.word	Unimplemented            ; $8a new
>1193	71 10					.word	Command_Run              ; $8b run
>1195	c5 10					.word	Unimplemented            ; $8c code
>1197	c5 10					.word	Unimplemented            ; $8d option

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors2.inc

.1199					Group2Vectors:
>1199	c5 10					.word	Unimplemented            ; $86 vpoke

;******  Return to file: ../source/main/commands/run.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/stopend.asm

.119b					CommandStop:
.119b	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.119d	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.11a0					CommandEnd:
.11a0	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.11a3					AdvanceNextLine:
.11a3	a0 00		ldy #$00			ldy 	#0 							; get offset
.11a5	b1 02		lda ($02),y			lda 	(codePtr),y
.11a7	18		clc				clc 								; add to codePtr
.11a8	65 02		adc $02				adc 	codePtr
.11aa	85 02		sta $02				sta 	codePtr
.11ac	90 02		bcc $11b0			bcc 	_ANLNoCarry
.11ae	e6 03		inc $03				inc 	codePtr+1
.11b0					_ANLNoCarry:
.11b0	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.11b2	f0 ec		beq $11a0			beq 	CommandEnd 					; execute END
.11b4	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.11b6	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/binary.asm

.11b7					BinaryProcess:
.11b7	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.11b9	15 41		ora $41,x			ora 	esType+1,x
.11bb	0a		asl a				asl 	a
.11bc	30 0e		bmi $11cc			bmi 	_BPStringType 				; if one is set, then string type.
.11be	18		clc				clc 								; return CC for integer
.11bf	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.11c1	f0 08		beq $11cb			beq 	_BPExit 					; if both integer then return with CC.
.11c3	20 d1 11	jsr $11d1			jsr 	BPMakeBothFloat 			; make both float
.11c6	a9 01		lda #$01			lda 	#$01 						; set result type to float
.11c8	95 40		sta $40,x			sta 	esType,x
.11ca	38		sec				sec 								; and return with carry set.
.11cb					_BPExit:
.11cb	60		rts				rts
.11cc					_BPStringType:
.11cc	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.11ce	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.11d1					BPMakeBothFloat:
.11d1	e8		inx				inx
.11d2	20 d6 11	jsr $11d6			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.11d5	ca		dex				dex
.11d6					BPMakeFloat:
.11d6	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.11d8	4a		lsr a				lsr 	a
.11d9	b0 07		bcs $11e2			bcs 	_BPIsFloat
.11db	8a		txa				txa
.11dc	a2 1a		ldx #$1a		ldx	#26
.11de	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.11e1	aa		tax				tax
.11e2					_BPIsFloat:
.11e2	60		rts				rts
.11e3					AddHandler:
.11e3	20 a9 13	jsr $13a9			jsr 	DereferenceTwo 				; dereference top two on stack.
.11e6	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.11e8	35 41		and $41,x			and 	esType+1,x
.11ea	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.11ec	d0 10		bne $11fe			bne 	_AHStringConcat				; concatenate strings.
.11ee	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.11f1	b0 03		bcs $11f6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11f3	4c 0b 18	jmp $180b			jmp 	MInt32Add 							; else do it as integer.
.11f6					_IsFPOperation:
.11f6	8a		txa				txa 								; call the relevant fp routine
.11f7	a2 04		ldx #$04		ldx	#4
.11f9	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.11fc	aa		tax				tax
.11fd	60		rts				rts
.11fe					_AHStringConcat:
.11fe	8a		txa				txa
.11ff	a2 00		ldx #$00		ldx	#0
.1201	20 ba 19	jsr $19ba		jsr	stringHandler
.1204	aa		tax				tax
.1205	60		rts				rts
.1206					SubHandler:
.1206	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.1209	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.120c	b0 03		bcs $1211			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.120e	4c 25 18	jmp $1825			jmp 	MInt32Sub 							; else do it as integer.
.1211					_IsFPOperation:
.1211	8a		txa				txa 								; call the relevant fp routine
.1212	a2 12		ldx #$12		ldx	#18
.1214	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.1217	aa		tax				tax
.1218	60		rts				rts
.1219					MulHandler:
.1219	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.121c	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.121f	b0 03		bcs $1224			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1221	4c 3f 18	jmp $183f			jmp 	MInt32Multiply 							; else do it as integer.
.1224					_IsFPOperation:
.1224	8a		txa				txa 								; call the relevant fp routine
.1225	a2 0c		ldx #$0c		ldx	#12
.1227	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.122a	aa		tax				tax
.122b	60		rts				rts
.122c					DivHandler:
.122c	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.122f	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.1232	b0 03		bcs $1237			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1234	4c 19 17	jmp $1719			jmp 	MInt32SDivide 							; else do it as integer.
.1237					_IsFPOperation:
.1237	8a		txa				txa 								; call the relevant fp routine
.1238	a2 08		ldx #$08		ldx	#8
.123a	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.123d	aa		tax				tax
.123e	60		rts				rts
.123f					ModHandler:
.123f	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.1242	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.1245	b0 03		bcs $124a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1247	4c 97 17	jmp $1797			jmp 	MInt32Modulus 							; else do it as integer.
.124a					_IsFPOperation:
.124a	8a		txa				txa 								; call the relevant fp routine
.124b	a2 0a		ldx #$0a		ldx	#10
.124d	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.1250	aa		tax				tax
.1251	60		rts				rts
.1252					XorHandler:
.1252	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.1255	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.1258	b0 03		bcs $125d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.125a	4c cb 16	jmp $16cb			jmp 	MInt32Xor 							; else do it as integer.
.125d					_IsFPOperation:
.125d	8a		txa				txa 								; call the relevant fp routine
.125e	a2 0a		ldx #$0a		ldx	#10
.1260	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.1263	aa		tax				tax
.1264	60		rts				rts
.1265					OrHandler:
.1265	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.1268	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.126b	b0 03		bcs $1270			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.126d	4c b2 16	jmp $16b2			jmp 	MInt32Or 							; else do it as integer.
.1270					_IsFPOperation:
.1270	8a		txa				txa 								; call the relevant fp routine
.1271	a2 0a		ldx #$0a		ldx	#10
.1273	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.1276	aa		tax				tax
.1277	60		rts				rts
.1278					AndHandler:
.1278	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.127b	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.127e	b0 03		bcs $1283			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1280	4c 99 16	jmp $1699			jmp 	MInt32And 							; else do it as integer.
.1283					_IsFPOperation:
.1283	8a		txa				txa 								; call the relevant fp routine
.1284	a2 0a		ldx #$0a		ldx	#10
.1286	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.1289	aa		tax				tax
.128a	60		rts				rts
.128b					ShlHandler:
.128b	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.128e	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.1291	b0 03		bcs $1296			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1293	4c 0c 13	jmp $130c			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.1296					_IsFPOperation:
.1296	8a		txa				txa 								; call the relevant fp routine
.1297	a2 0a		ldx #$0a		ldx	#10
.1299	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.129c	aa		tax				tax
.129d	60		rts				rts
.129e					ShrHandler:
.129e	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.12a1	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.12a4	b0 03		bcs $12a9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12a6	4c 0f 13	jmp $130f			jmp 	MInt32ShiftRightX 							; else do it as integer.
.12a9					_IsFPOperation:
.12a9	8a		txa				txa 								; call the relevant fp routine
.12aa	a2 0a		ldx #$0a		ldx	#10
.12ac	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.12af	aa		tax				tax
.12b0	60		rts				rts
.12b1					WordRefHandler:
.12b1	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.12b4	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.12b7	b0 03		bcs $12bc			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12b9	4c fe 12	jmp $12fe			jmp 	MInt32WordIndirect 							; else do it as integer.
.12bc					_IsFPOperation:
.12bc	8a		txa				txa 								; call the relevant fp routine
.12bd	a2 0a		ldx #$0a		ldx	#10
.12bf	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.12c2	aa		tax				tax
.12c3	60		rts				rts
.12c4					ByteRefHandler:
.12c4	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.12c7	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.12ca	b0 03		bcs $12cf			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12cc	4c 02 13	jmp $1302			jmp 	MInt32ByteIndirect 							; else do it as integer.
.12cf					_IsFPOperation:
.12cf	8a		txa				txa 								; call the relevant fp routine
.12d0	a2 0a		ldx #$0a		ldx	#10
.12d2	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.12d5	aa		tax				tax
.12d6	60		rts				rts
.12d7					PowerHandler:
.12d7	20 a9 13	jsr $13a9			jsr 	DereferenceTwo
.12da	20 b7 11	jsr $11b7			jsr 	BinaryProcess 				; check to see if either is float
.12dd	b0 03		bcs $12e2			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12df	4c ea 12	jmp $12ea			jmp 	PowerInteger 							; else do it as integer.
.12e2					_IsFPOperation:
.12e2	8a		txa				txa 								; call the relevant fp routine
.12e3	a2 16		ldx #$16		ldx	#22
.12e5	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.12e8	aa		tax				tax
.12e9	60		rts				rts
.12ea					PowerInteger:
.12ea	20 d1 11	jsr $11d1			jsr 	BPMakeBothFloat				; make them float.
.12ed	8a		txa				txa
.12ee	a2 16		ldx #$16		ldx	#22
.12f0	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.12f3	a2 14		ldx #$14		ldx	#20
.12f5	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.12f8	aa		tax				tax
.12f9	a9 00		lda #$00			lda 	#0 							; make type integer
.12fb	95 40		sta $40,x			sta 	esType,x
.12fd	60		rts				rts
.12fe					Mint32WordIndirect:
.12fe	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1300	d0 02		bne $1304			bne 	Min32Indirect
.1302					Mint32ByteIndirect:
.1302	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1304					Min32Indirect:
.1304	48		pha				pha 								; save the indirection
.1305	20 0b 18	jsr $180b			jsr 	MInt32Add 					; add a!b a?b
.1308	68		pla				pla 								; and set the type to reference.
.1309	95 40		sta $40,x			sta 	esType,x
.130b	60		rts				rts
.130c					Mint32ShiftLeftX:
.130c	18		clc				clc
.130d	90 01		bcc $1310			bcc 	Mint32Shift
.130f					Mint32ShiftRightX:
.130f	38		sec				sec
.1310					Mint32Shift:
.1310	08		php				php 								; save carry flag on stack.
.1311	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1313	15 59		ora $59,x			ora 	esInt2+1,x
.1315	15 61		ora $61,x			ora 	esInt3+1,x
.1317	d0 1e		bne $1337			bne 	_MShiftZero
.1319	b5 49		lda $49,x			lda 	esInt0+1,x
.131b	c9 20		cmp #$20			cmp 	#32
.131d	b0 18		bcs $1337			bcs 	_MShiftZero
.131f					_MShiftLoop:
.131f	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1321	f0 12		beq $1335			beq 	_MShiftExit
.1323	d6 49		dec $49,x			dec 	esInt0+1,x
.1325	28		plp				plp 								; restore and save carry
.1326	08		php				php
.1327	90 06		bcc $132f			bcc 	_MShiftLeft
.1329	20 37 19	jsr $1937			jsr 	Mint32ShiftRight
.132c	4c 1f 13	jmp $131f			jmp 	_MShiftLoop
.132f					_MShiftLeft:
.132f	20 2e 19	jsr $192e			jsr 	Mint32ShiftLeft
.1332	4c 1f 13	jmp $131f			jmp 	_MShiftLoop
.1335					_MShiftExit:
.1335	28		plp				plp	 								; throw saved carry and exit
.1336	60		rts				rts
.1337					_MShiftZero:
.1337	4c 19 19	jmp $1919			jmp 	MInt32False 				; return 0.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/compare.asm

.133a					PerformComparison:
.133a	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.133c	35 41		and $41,x			and 	esType+1,x
.133e	0a		asl a				asl 	a
.133f	30 19		bmi $135a			bmi 	_PCIsString
.1341	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1343	15 41		ora $41,x			ora 	esType+1,x
.1345	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1346	30 1a		bmi $1362			bmi 	_PCError
.1348	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.134a	f0 0b		beq $1357			beq 	_PCIsInteger 				; if not two integers
.134c	20 d1 11	jsr $11d1			jsr 	BPMakeBothFloat 			; make both float
.134f	8a		txa				txa
.1350	a2 06		ldx #$06		ldx	#6
.1352	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.1355	aa		tax				tax
.1356	60		rts				rts
.1357					_PCIsInteger:
.1357	4c e4 16	jmp $16e4			jmp 	MInt32Compare
.135a					_PCIsString:
.135a	8a		txa				txa
.135b	a2 02		ldx #$02		ldx	#2
.135d	20 ba 19	jsr $19ba		jsr	stringHandler
.1360	aa		tax				tax
.1361	60		rts				rts
.1362					_PCError:
.1362	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1364	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.1367					CompareEquals:
.1367	20 3a 13	jsr $133a			jsr 	PerformComparison
.136a	c9 00		cmp #$00			cmp 	#$00
.136c	f0 35		beq $13a3			beq  	CompareTrue
.136e	4c a6 13	jmp $13a6			jmp 	CompareFalse
.1371					CompareLess:
.1371	20 3a 13	jsr $133a			jsr 	PerformComparison
.1374	c9 ff		cmp #$ff			cmp 	#$FF
.1376	f0 2b		beq $13a3			beq  	CompareTrue
.1378	4c a6 13	jmp $13a6			jmp 	CompareFalse
.137b					CompareGreater:
.137b	20 3a 13	jsr $133a			jsr 	PerformComparison
.137e	c9 01		cmp #$01			cmp 	#$01
.1380	f0 21		beq $13a3			beq  	CompareTrue
.1382	4c a6 13	jmp $13a6			jmp 	CompareFalse
.1385					CompareNotEquals:
.1385	20 3a 13	jsr $133a			jsr 	PerformComparison
.1388	c9 00		cmp #$00			cmp 	#$00
.138a	d0 17		bne $13a3			bne  	CompareTrue
.138c	4c a6 13	jmp $13a6			jmp 	CompareFalse
.138f					CompareGreaterEq:
.138f	20 3a 13	jsr $133a			jsr 	PerformComparison
.1392	c9 ff		cmp #$ff			cmp 	#$FF
.1394	d0 0d		bne $13a3			bne  	CompareTrue
.1396	4c a6 13	jmp $13a6			jmp 	CompareFalse
.1399					CompareLessEq:
.1399	20 3a 13	jsr $133a			jsr 	PerformComparison
.139c	c9 01		cmp #$01			cmp 	#$01
.139e	d0 03		bne $13a3			bne  	CompareTrue
.13a0	4c a6 13	jmp $13a6			jmp 	CompareFalse
.13a3					CompareTrue:
.13a3	4c 15 19	jmp $1915			jmp 	MInt32True
.13a6					CompareFalse:
.13a6	4c 19 19	jmp $1919			jmp 	MInt32False

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/dereference.asm

.13a9					DereferenceTwo:
.13a9	e8		inx				inx
.13aa	20 ae 13	jsr $13ae			jsr 	DereferenceOne
.13ad	ca		dex				dex
.13ae					DereferenceOne:
.13ae	b5 40		lda $40,x			lda 	esType,x
.13b0	10 3d		bpl $13ef			bpl 	_DRNotReference 			; is it a reference ?
.13b2	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.13b3	b0 3b		bcs $13f0			bcs 	_DRFloatDeReference
.13b5	98		tya				tya
.13b6	48		pha				pha
.13b7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.13b9	85 04		sta $04				sta 	temp0
.13bb	b5 50		lda $50,x			lda 	esInt1,x
.13bd	85 05		sta $05				sta 	temp0+1
.13bf	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.13c1	95 50		sta $50,x			sta 	esInt1,x
.13c3	95 58		sta $58,x			sta 	esInt2,x
.13c5	95 60		sta $60,x			sta 	esInt3,x
.13c7	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.13c9	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.13cb	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.13cc	30 0d		bmi $13db			bmi 	_DeRefString 				; string, 2 bytes only
.13ce	d0 11		bne $13e1			bne 	_DeRefByte 					; byte 1 byte only
.13d0					_DeRefLong:
.13d0	a0 03		ldy #$03			ldy 	#3
.13d2	b1 04		lda ($04),y			lda 	(temp0),y
.13d4	95 60		sta $60,x			sta 	esInt3,x
.13d6	88		dey				dey
.13d7	b1 04		lda ($04),y			lda 	(temp0),y
.13d9	95 58		sta $58,x			sta 	esInt2,x
.13db					_DeRefString:
.13db	a0 01		ldy #$01			ldy 	#1
.13dd	b1 04		lda ($04),y			lda 	(temp0),y
.13df	95 50		sta $50,x			sta 	esInt1,x
.13e1					_DeRefByte:
.13e1	a0 00		ldy #$00			ldy 	#0
.13e3	b1 04		lda ($04),y			lda 	(temp0),y
.13e5	95 48		sta $48,x			sta 	esInt0,x
.13e7	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.13e9	29 40		and #$40			and 	#$40
.13eb	95 40		sta $40,x			sta 	esType,x
.13ed	68		pla				pla
.13ee	a8		tay				tay
.13ef					_DRNotReference
.13ef	60		rts				rts
.13f0					_DRFloatDereference:
.13f0	8a		txa				txa
.13f1	a2 00		ldx #$00		ldx	#0
.13f3	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.13f6	aa		tax				tax
.13f7	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.13f9	95 40		sta $40,x			sta 	esType,x
.13fb	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/evaluate.asm

.13fc					EvaluateLevel:
.13fc	48		pha				pha 								; save precedence level.
.13fd	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.13ff	95 48		sta $48,x			sta 	esInt0,x
.1401	95 50		sta $50,x			sta 	esInt1,x
.1403	95 58		sta $58,x			sta 	esInt2,x
.1405	95 60		sta $60,x			sta 	esInt3,x
.1407	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1409	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.140b	30 21		bmi $142e			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.140d	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.140e	30 0a		bmi $141a			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1410	8a		txa				txa 								; stack level in X
.1411	a2 00		ldx #$00		ldx	#0
.1413	20 e4 19	jsr $19e4		jsr	variableHandler
.1416	aa		tax				tax
.1417	4c 57 14	jmp $1457			jmp		_ELHasTerm
.141a					_ELIsConstant:
.141a	4a		lsr a				lsr 	a 							; get the value back
.141b	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.141d	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.141f					_ELCheckNext:
.141f	c8		iny				iny 								; look at next
.1420	b1 02		lda ($02),y			lda 	(codePtr),y
.1422	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1424	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1426	b0 2f		bcs $1457			bcs 	_ELHasTerm 					; done getting the constant.
.1428	20 3d 15	jsr $153d			jsr 	ELShiftByteIn 				; shift byte into position.
.142b	4c 1f 14	jmp $141f			jmp 	_ELCheckNext
.142e					_ELIsToken:
.142e	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1430	f0 0f		beq $1441			beq 	_ELIsString
.1432	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1434	d0 5f		bne $1495			bne 	_ELCheckUnary
.1436	8a		txa				txa 								; put X into A
.1437	c8		iny				iny 								; skip over the float marker
.1438	a2 18		ldx #$18		ldx	#24
.143a	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.143d	aa		tax				tax 								; restore X
.143e	4c 57 14	jmp $1457			jmp 	_ELHasTerm
.1441					_ELIsString:
.1441	98		tya				tya 								; address of string is codePtr+y+1
.1442	38		sec				sec
.1443	65 02		adc $02				adc 	codePtr
.1445	95 48		sta $48,x			sta 	esInt0,x
.1447	a5 03		lda $03				lda 	codePtr+1
.1449	69 00		adc #$00			adc 	#0
.144b	95 50		sta $50,x			sta 	esInt1,x
.144d	a9 40		lda #$40			lda 	#$40 						; set type to string value
.144f	95 40		sta $40,x			sta 	esType,x
.1451	c8		iny				iny 								; skip over string.
.1452	98		tya				tya
.1453	38		sec				sec									; +1 for the length itself.
.1454	71 02		adc ($02),y			adc 	(codePtr),y
.1456	a8		tay				tay 								; and fall through to term loop code.
.1457					_ELHasTerm:
.1457	b1 02		lda ($02),y			lda 	(codePtr),y
.1459	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.145b	90 04		bcc $1461			bcc 	_ELPopExit
.145d	c9 9d		cmp #$9d			cmp 	#TOK_STRUCTST
.145f	90 02		bcc $1463			bcc 	_ELHasBinaryTerm
.1461					_ELPopExit:
.1461	68		pla				pla
.1462					_ELExit:
.1462	60		rts				rts
.1463					_ELHasBinaryTerm:
.1463	84 0a		sty $0a				sty 	tempShort 					; save position
.1465	a8		tay				tay 								; use token as an index and get the precedence.
.1466	b9 e5 14	lda $14e5,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1469	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.146b	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.146d	68		pla				pla 								; restore current level.
.146e	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.1470	b0 f0		bcs $1462			bcs 	_ELExit
.1472	48		pha				pha 								; save current level back on the stack.
.1473	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1475	48		pha				pha
.1476	c8		iny				iny
.1477	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1478	a5 0a		lda $0a				lda 	tempShort
.147a	20 fc 13	jsr $13fc			jsr 	EvaluateLevel
.147d	ca		dex				dex
.147e	68		pla				pla 								; get the operator back out.
.147f					_ELExecuteA:
.147f	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.1481	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.1482	aa		tax				tax
.1483	bd c9 10	lda $10c9,x			lda 	Group0Vectors,x
.1486	85 04		sta $04				sta 	temp0
.1488	bd ca 10	lda $10ca,x			lda 	Group0Vectors+1,x
.148b	85 05		sta $05				sta 	temp0+1
.148d	a6 0a		ldx $0a				ldx 	tempShort
.148f	20 d8 14	jsr $14d8			jsr 	_ELCallTemp0
.1492	4c 57 14	jmp $1457			jmp 	_ELHasTerm 					; and loop back round.
.1495					_ELCheckUnary:
.1495	c8		iny				iny 								; skip over token.
.1496	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1498	f0 15		beq $14af			beq 	_ELMinus
.149a	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.149c	f0 28		beq $14c6			beq 	_ELIndirect
.149e	c9 98		cmp #$98			cmp 	#TKW_QMARK
.14a0	f0 24		beq $14c6			beq 	_ELIndirect
.14a2	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.14a4	90 04		bcc $14aa			bcc 	_ELUSyntax
.14a6	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.14a8	90 d5		bcc $147f			bcc 	_ELExecuteA 				; if so do that token.
.14aa					_ELUSyntax:
.14aa	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.14ac	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.14af					_ELMinus:
.14af	20 ed 14	jsr $14ed			jsr 	EvaluateNumericTerm 		; get a number to negate.
.14b2	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.14b4	f0 0a		beq $14c0			beq 	_ELMinusInteger
.14b6	8a		txa				txa
.14b7	a2 0e		ldx #$0e		ldx	#14
.14b9	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.14bc	aa		tax				tax
.14bd	4c 57 14	jmp $1457			jmp 	_ELHasTerm
.14c0					_ELMinusInteger:
.14c0	20 d3 18	jsr $18d3			jsr 	MInt32Negate 				; do int negate
.14c3	4c 57 14	jmp $1457			jmp 	_ELHasTerm
.14c6					_ELIndirect:
.14c6	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.14c7	20 f6 14	jsr $14f6			jsr 	EvaluateIntegerTerm 		; integer address
.14ca	68		pla				pla
.14cb	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.14cd	f0 02		beq $14d1			beq 	_ELHaveModifier
.14cf	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.14d1					_ELHaveModifier:
.14d1	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.14d3	95 40		sta $40,x			sta 	esType,x
.14d5	4c 57 14	jmp $1457			jmp 	_ELHasTerm
.14d8					_ELCallTemp0:
.14d8	6c 04 00	jmp ($0004)			jmp 	(temp0)
.14db					UnaryParenthesis:
.14db	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.14dd	20 fc 13	jsr $13fc			jsr 	EvaluateLevel
.14e0	20 81 19	jsr $1981			jsr 	CheckRightParen 			; check for )
.14e3	60		rts				rts
.14e4					EvaluateTerm:
.14e4	a9 0f		lda #$0f			lda 	#15
.14e6	20 fc 13	jsr $13fc			jsr 	EvaluateLevel
.14e9	20 ae 13	jsr $13ae			jsr 	DereferenceOne
.14ec	60		rts				rts
.14ed					EvaluateNumericTerm:
.14ed	20 e4 14	jsr $14e4			jsr 	EvaluateTerm
.14f0	b5 40		lda $40,x			lda 	esType,x
.14f2	0a		asl a				asl 	a 							; see if it's a string.
.14f3	30 09		bmi $14fe			bmi 	ENTType
.14f5	60		rts				rts
.14f6					EvaluateIntegerTerm:
.14f6	20 e4 14	jsr $14e4			jsr 	EvaluateTerm
.14f9	b5 40		lda $40,x			lda 	esType,x
.14fb	d0 01		bne $14fe			bne 	ENTType
.14fd	60		rts				rts
.14fe					ENTType:
.14fe	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1500	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.1503					EvaluateRoot:
.1503	a2 00		ldx #$00			ldx 	#0
.1505					Evaluate:
.1505	a9 00		lda #$00			lda 	#0
.1507	20 fc 13	jsr $13fc			jsr 	EvaluateLevel
.150a	20 ae 13	jsr $13ae			jsr 	DereferenceOne
.150d	60		rts				rts
.150e					EvaluateNumeric:
.150e	20 05 15	jsr $1505			jsr 	Evaluate
.1511	b5 40		lda $40,x			lda 	esType,x
.1513	0a		asl a				asl 	a 							; see if it's a string.
.1514	30 e8		bmi $14fe			bmi 	ENTType
.1516	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1517	4a		lsr a				lsr 	a
.1518	60		rts				rts
.1519					EvaluateString:
.1519	20 05 15	jsr $1505			jsr 	Evaluate
.151c	b5 40		lda $40,x			lda 	esType,x
.151e	0a		asl a				asl 	a 							; see if it's a string.
.151f	10 dd		bpl $14fe			bpl 	ENTType
.1521	60		rts				rts
.1522					EvaluateInteger:
.1522	20 05 15	jsr $1505			jsr 	Evaluate
.1525	b5 40		lda $40,x			lda 	esType,x
.1527	d0 d5		bne $14fe			bne 	ENTType
.1529	60		rts				rts
.152a					EvaluateSmallInteger:
.152a	20 22 15	jsr $1522			jsr 	EvaluateInteger
.152d	b5 41		lda $41,x			lda 	esType+1,x
.152f	15 42		ora $42,x			ora 	esType+2,x
.1531	15 43		ora $43,x			ora 	esType+3,x
.1533	d0 03		bne $1538			bne 	_ESIValue
.1535	b5 40		lda $40,x			lda 	esType,x
.1537	60		rts				rts
.1538					_ESIValue:
.1538	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.153a	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.153d					ELShiftByteIn:
.153d	48		pha				pha 								; save bits to shift in.
.153e	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.1540	48		pha				pha
.1541	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1543	95 60		sta $60,x			sta 	esInt3,x
.1545	b5 50		lda $50,x			lda 	esInt1,x
.1547	95 58		sta $58,x			sta 	esInt2,x
.1549	b5 48		lda $48,x			lda 	esInt0,x
.154b	95 50		sta $50,x			sta 	esInt1,x
.154d	a9 00		lda #$00			lda 	#0
.154f	95 48		sta $48,x			sta 	esInt0,x
.1551	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1552	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1554	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1556					_ELShiftLoop:
.1556	4a		lsr a				lsr 	a
.1557	76 60		ror $60,x			ror 	esInt3,x
.1559	76 58		ror $58,x			ror 	esInt2,x
.155b	76 50		ror $50,x			ror 	esInt1,x
.155d	76 48		ror $48,x			ror 	esInt0,x
.155f	c9 01		cmp #$01			cmp 	#1
.1561	d0 f3		bne $1556			bne 	_ELShiftLoop
.1563	68		pla				pla 								; get original 6 bit value and OR in.
.1564	29 3f		and #$3f			and 	#$3F
.1566	15 48		ora $48,x			ora 	esInt0,x
.1568	95 48		sta $48,x			sta 	esInt0,x
.156a	60		rts				rts
.156b					ELBinaryOperatorInfo:

;******  Processing file: ../source/main/evaluate/../../generated/binarystructinfo.inc

>156b	01					.byte	$01			; $86 and
>156c	01					.byte	$01			; $87 or
>156d	01					.byte	$01			; $88 xor
>156e	02					.byte	$02			; $89 >=
>156f	02					.byte	$02			; $8a <=
>1570	02					.byte	$02			; $8b >
>1571	02					.byte	$02			; $8c <
>1572	02					.byte	$02			; $8d =
>1573	02					.byte	$02			; $8e <>
>1574	03					.byte	$03			; $8f +
>1575	03					.byte	$03			; $90 -
>1576	04					.byte	$04			; $91 >>
>1577	04					.byte	$04			; $92 <<
>1578	04					.byte	$04			; $93 *
>1579	04					.byte	$04			; $94 /
>157a	04					.byte	$04			; $95 mod
>157b	05					.byte	$05			; $96 ^
>157c	06					.byte	$06			; $97 !
>157d	06					.byte	$06			; $98 ?
>157e	82					.byte	$82			; $99 repeat
>157f	82					.byte	$82			; $9a while
>1580	82					.byte	$82			; $9b for
>1581	82					.byte	$82			; $9c if
>1582	80					.byte	$80			; $9d until
>1583	80					.byte	$80			; $9e wend
>1584	80					.byte	$80			; $9f next
>1585	80					.byte	$80			; $a0 then
>1586	80					.byte	$80			; $a1 endif

;******  Return to file: ../source/main/evaluate/evaluate.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unary.asm

.1587					UnaryLen:
.1587	20 95 15	jsr $1595			jsr 	ULStart
.158a					ULFinish:
.158a	b1 04		lda ($04),y			lda 	(temp0),y
.158c	a4 0a		ldy $0a				ldy 	tempShort
.158e	20 28 19	jsr $1928			jsr 	MInt32Set8Bit
.1591	20 81 19	jsr $1981			jsr 	CheckRightParen
.1594	60		rts				rts
.1595	20 19 15	jsr $1519	ULStart:jsr 	EvaluateString
.1598	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.159a	85 04		sta $04				sta 	temp0
.159c	b5 50		lda $50,x			lda 	esInt1,x
.159e	85 05		sta $05				sta 	temp0+1
.15a0	84 0a		sty $0a				sty 	tempShort 					; get length
.15a2	a0 00		ldy #$00			ldy 	#0
.15a4	60		rts				rts
.15a5					UnaryAsc:
.15a5	20 95 15	jsr $1595			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.15a8	b1 04		lda ($04),y			lda 	(temp0),y
.15aa	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.15ab	c9 00		cmp #$00			cmp 	#0
.15ad	d0 db		bne $158a			bne 	ULFinish
.15af	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.15b1	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.15b4					UnaryAbs:
.15b4	20 0e 15	jsr $150e			jsr 	EvaluateNumeric
.15b7	b0 07		bcs $15c0			bcs 	_UAFloat
.15b9	20 ce 18	jsr $18ce			jsr 	MInt32Absolute
.15bc	20 81 19	jsr $1981			jsr 	CheckRightParen
.15bf	60		rts				rts
.15c0					_UAFloat:
.15c0	8a		txa				txa
.15c1	a2 02		ldx #$02		ldx	#2
.15c3	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.15c6	aa		tax				tax
.15c7	20 81 19	jsr $1981			jsr 	CheckRightParen
.15ca	60		rts				rts
.15cb					UnarySgn:
.15cb	20 0e 15	jsr $150e			jsr 	EvaluateNumeric
.15ce	b0 07		bcs $15d7			bcs 	_USFloat
.15d0	20 06 19	jsr $1906			jsr 	MInt32Sign
.15d3	20 81 19	jsr $1981			jsr 	CheckRightParen
.15d6	60		rts				rts
.15d7					_USFloat:
.15d7	8a		txa				txa
.15d8	a2 10		ldx #$10		ldx	#16
.15da	20 ab 19	jsr $19ab		jsr	floatingpointHandler
.15dd	aa		tax				tax
.15de	20 81 19	jsr $1981			jsr 	CheckRightParen
.15e1	60		rts				rts
.15e2					UnaryPeek:
.15e2	20 0e 16	jsr $160e			jsr 	PDLCode
.15e5	4c 02 16	jmp $1602			jmp 	PDLByte0
.15e8					UnaryDeek:
.15e8	20 0e 16	jsr $160e			jsr 	PDLCode
.15eb	4c fc 15	jmp $15fc			jmp 	PDLByte1
.15ee					UnaryLeek:
.15ee	20 0e 16	jsr $160e			jsr 	PDLCode
.15f1	a0 03		ldy #$03			ldy 	#3
.15f3	b1 04		lda ($04),y			lda 	(temp0),y
.15f5	95 60		sta $60,x			sta 	esInt3,x
.15f7	88		dey				dey
.15f8	b1 04		lda ($04),y			lda 	(temp0),y
.15fa	95 58		sta $58,x			sta 	esInt2,x
.15fc					PDLByte1:
.15fc	a0 01		ldy #$01			ldy 	#1
.15fe	b1 04		lda ($04),y			lda 	(temp0),y
.1600	95 50		sta $50,x			sta 	esInt1,x
.1602					PDLByte0:
.1602	a0 00		ldy #$00			ldy 	#0
.1604	b1 04		lda ($04),y			lda 	(temp0),y
.1606	95 48		sta $48,x			sta 	esInt0,x
.1608	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.160a	20 81 19	jsr $1981			jsr 	CheckRightParen 			; check right and return
.160d	60		rts				rts
.160e					PDLCode:
.160e	20 22 15	jsr $1522			jsr 	EvaluateInteger
.1611	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1613	85 04		sta $04				sta 	temp0
.1615	b5 50		lda $50,x			lda 	esInt1,x
.1617	85 05		sta $05				sta 	temp0+1
.1619	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.161b	95 50		sta $50,x			sta 	esInt1,x
.161d	95 58		sta $58,x			sta 	esInt2,x
.161f	95 60		sta $60,x			sta 	esInt3,x
.1621	84 0a		sty $0a				sty 	tempShort 					; save Y
.1623	60		rts				rts
.1624					Unary_Random:
.1624	20 49 19	jsr $1949			jsr 	MInt32Random 				; generate random number.
.1627	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1629	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.162b	f0 08		beq $1635			beq 	_URExit
.162d	e8		inx				inx 								; load range 0..r-1 into +1
.162e	20 22 15	jsr $1522			jsr 	EvaluateInteger
.1631	ca		dex				dex
.1632	20 97 17	jsr $1797			jsr 	MInt32Modulus 				; calculate random % modulus
.1635					_URExit:
.1635	20 81 19	jsr $1981			jsr 	CheckRightParen 			; check right and return
.1638	60		rts				rts
.1639					Unary_Min:
.1639	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.163b	d0 02		bne $163f			bne 	UnaryMBody
.163d					Unary_Max:
.163d	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.163f					UnaryMBody:
.163f	48		pha				pha 								; save comparator on stack.
.1640	20 05 15	jsr $1505			jsr 	Evaluate 					; get the first thing to check
.1643					_UnaryMLoop:
.1643	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1645	c8		iny				iny
.1646	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1648	f0 09		beq $1653			beq 	_UnaryMExit
.164a	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.164c	f0 07		beq $1655			beq 	_UnaryMCompare
.164e	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1650	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.1653					_UnaryMExit:
.1653	68		pla				pla 								; throw comparator and return.
.1654	60		rts				rts
.1655					_UnaryMCompare:
.1655	e8		inx				inx 								; get the 2nd thing to evaluate
.1656	20 05 15	jsr $1505			jsr 	Evaluate
.1659	ca		dex				dex
.165a	20 3a 13	jsr $133a			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.165d	85 0a		sta $0a				sta 	tempShort 					; save result
.165f	68		pla				pla 								; get what we need
.1660	48		pha				pha
.1661	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.1663	d0 de		bne $1643			bne 	_UnaryMLoop 				; no, try another value.
.1665	20 19 19	jsr $1919			jsr 	MInt32False 				; promote 2nd to 1st.
.1668	20 0b 18	jsr $180b			jsr 	MInt32Add
.166b	4c 43 16	jmp $1643			jmp 	_UnaryMLoop
.166e					Unary_Page:
.166e	20 19 19	jsr $1919			jsr 	MInt32False 				; zero
.1671	ad 68 08	lda $0868			lda 	basePage 					; copy base page address in.
.1674	95 48		sta $48,x			sta 	esInt0,x
.1676	ad 69 08	lda $0869			lda 	basePage+1
.1679	95 50		sta $50,x			sta 	esInt1,x
.167b	60		rts				rts
.167c					UnaryReference:
.167c	a9 0f		lda #$0f			lda 	#15
.167e	20 fc 13	jsr $13fc			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.1681	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1683	10 05		bpl $168a			bpl 	UType
.1685	a9 00		lda #$00			lda 	#0 							; make it an integer
.1687	95 40		sta $40,x			sta 	esType,x
.1689	60		rts				rts
.168a					UType:
.168a	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.168c	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.168f					UnaryHexMarker:
.168f	4c f6 14	jmp $14f6			jmp 	EvaluateIntegerTerm
.1692					UnaryComplement:
.1692	20 f6 14	jsr $14f6			jsr 	EvaluateIntegerTerm
.1695	20 ed 18	jsr $18ed			jsr 	MInt32Not
.1698	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32binary.asm

.1699					MInt32And:
.1699	b5 48		lda $48,x			lda 	esInt0,x
.169b	35 49		and $49,x			and 	esInt0+1,x
.169d	95 48		sta $48,x			sta 	esInt0,x
.169f	b5 50		lda $50,x			lda 	esInt1,x
.16a1	35 51		and $51,x			and 	esInt1+1,x
.16a3	95 50		sta $50,x			sta 	esInt1,x
.16a5	b5 58		lda $58,x			lda 	esInt2,x
.16a7	35 59		and $59,x			and 	esInt2+1,x
.16a9	95 58		sta $58,x			sta 	esInt2,x
.16ab	b5 60		lda $60,x			lda 	esInt3,x
.16ad	35 61		and $61,x			and 	esInt3+1,x
.16af	95 60		sta $60,x			sta 	esInt3,x
.16b1	60		rts				rts
.16b2					MInt32Or:
.16b2	b5 48		lda $48,x			lda 	esInt0,x
.16b4	15 49		ora $49,x			ora 	esInt0+1,x
.16b6	95 48		sta $48,x			sta 	esInt0,x
.16b8	b5 50		lda $50,x			lda 	esInt1,x
.16ba	15 51		ora $51,x			ora 	esInt1+1,x
.16bc	95 50		sta $50,x			sta 	esInt1,x
.16be	b5 58		lda $58,x			lda 	esInt2,x
.16c0	15 59		ora $59,x			ora 	esInt2+1,x
.16c2	95 58		sta $58,x			sta 	esInt2,x
.16c4	b5 60		lda $60,x			lda 	esInt3,x
.16c6	15 61		ora $61,x			ora 	esInt3+1,x
.16c8	95 60		sta $60,x			sta 	esInt3,x
.16ca	60		rts				rts
.16cb					MInt32Xor:
.16cb	b5 48		lda $48,x			lda 	esInt0,x
.16cd	55 49		eor $49,x			eor 	esInt0+1,x
.16cf	95 48		sta $48,x			sta 	esInt0,x
.16d1	b5 50		lda $50,x			lda 	esInt1,x
.16d3	55 51		eor $51,x			eor 	esInt1+1,x
.16d5	95 50		sta $50,x			sta 	esInt1,x
.16d7	b5 58		lda $58,x			lda 	esInt2,x
.16d9	55 59		eor $59,x			eor 	esInt2+1,x
.16db	95 58		sta $58,x			sta 	esInt2,x
.16dd	b5 60		lda $60,x			lda 	esInt3,x
.16df	55 61		eor $61,x			eor 	esInt3+1,x
.16e1	95 60		sta $60,x			sta 	esInt3,x
.16e3	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32compare.asm

.16e4					MInt32Compare:
.16e4	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.16e6	d5 49		cmp $49,x			cmp 	esInt0+1,x
.16e8	d0 13		bne $16fd			bne 	MInt32Compare2
.16ea	b5 50		lda $50,x			lda 	esInt1,x
.16ec	d5 51		cmp $51,x			cmp 	esInt1+1,x
.16ee	d0 0d		bne $16fd			bne 	MInt32Compare2
.16f0	b5 58		lda $58,x			lda 	esInt2,x
.16f2	d5 59		cmp $59,x			cmp 	esInt2+1,x
.16f4	d0 07		bne $16fd			bne 	MInt32Compare2
.16f6	b5 60		lda $60,x			lda 	esInt3,x
.16f8	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.16fa	d0 01		bne $16fd			bne 	MInt32Compare2
.16fc	60		rts				rts
.16fd					MInt32Compare2:
.16fd	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.16ff	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1701	b5 50		lda $50,x			lda		esInt1,x
.1703	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1705	b5 58		lda $58,x			lda		esInt2,x
.1707	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1709	b5 60		lda $60,x			lda		esInt3,x
.170b	f5 61		sbc $61,x			sbc 	esInt3+1,x
.170d	50 02		bvc $1711			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.170f	49 80		eor #$80			eor 	#$80
.1711					_I32LNoOverflow
.1711	30 03		bmi $1716			bmi 	MInt32CLess					; if -ve then return $FF
.1713	a9 01		lda #$01			lda 	#$01						; else return $01
.1715	60		rts				rts
.1716					MInt32CLess:
.1716	a9 ff		lda #$ff			lda 	#$FF
.1718	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32divide.asm

.1719					MInt32SDivide:
.1719	98		tya				tya  								; save Y, which is the count of negations
.171a	48		pha				pha
.171b	a0 00		ldy #$00			ldy 	#0 							; zero count
.171d	20 35 17	jsr $1735			jsr 	_MInt32SRemSign 			; unsign TOS
.1720	e8		inx				inx 								; unsign TOS+1
.1721	20 35 17	jsr $1735			jsr 	_MInt32SRemSign
.1724	ca		dex				dex
.1725	98		tya				tya 								; save sign count on stack
.1726	48		pha				pha
.1727	20 3e 17	jsr $173e			jsr 	MInt32UDivide 				; unsigned division
.172a	68		pla				pla 								; get sign count back
.172b	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.172d	f0 03		beq $1732			beq 	_I32SNoNeg
.172f	20 d3 18	jsr $18d3			jsr 	MInt32Negate
.1732					_I32SNoNeg:
.1732	68		pla				pla 								; restoe Y and exit
.1733	a8		tay				tay
.1734	60		rts				rts
.1735					_MInt32SRemSign:
.1735	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1737	10 04		bpl $173d			bpl 	_MInt32SRSExit
.1739	c8		iny				iny 								; increment the sign count
.173a	20 d3 18	jsr $18d3			jsr 	MInt32Negate 				; negate the value.
.173d					_MInt32SRSExit:
.173d	60		rts				rts
.173e					MInt32UDivide:
.173e	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1740	15 51		ora $51,x			ora 	esInt1+1,x
.1742	15 52		ora $52,x			ora 	esInt1+2,x
.1744	15 53		ora $53,x			ora 	esInt1+3,x
.1746	f0 4a		beq $1792			beq 	_MInt32DZero
.1748	e8		inx				inx 								; clear A
.1749	e8		inx				inx
.174a	20 19 19	jsr $1919			jsr 	MInt32False
.174d	ca		dex				dex
.174e	ca		dex				dex
.174f	98		tya				tya 								; save Y on the stack
.1750	48		pha				pha
.1751	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1753					_MInt32UDLoop:
.1753	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1755	36 50		rol $50,x			rol 	esInt1,x
.1757	36 58		rol $58,x			rol 	esInt2,x
.1759	36 60		rol $60,x			rol 	esInt3,x
.175b	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.175d	36 52		rol $52,x			rol 	esInt1+2,x
.175f	36 5a		rol $5a,x			rol 	esInt2+2,x
.1761	36 62		rol $62,x			rol 	esInt3+2,x
.1763	38		sec				sec 								; calculate A-M saving result on the stack
.1764	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1766	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1768	48		pha				pha
.1769	b5 52		lda $52,x			lda 	esInt1+2,x
.176b	f5 51		sbc $51,x			sbc 	esInt1+1,x
.176d	48		pha				pha
.176e	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1770	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1772	48		pha				pha
.1773	b5 62		lda $62,x			lda 	esInt3+2,x
.1775	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1777	90 10		bcc $1789			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1779	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.177b	68		pla				pla
.177c	95 5a		sta $5a,x			sta 	esInt2+2,x
.177e	68		pla				pla
.177f	95 52		sta $52,x			sta 	esInt1+2,x
.1781	68		pla				pla
.1782	95 4a		sta $4a,x			sta 	esInt0+2,x
.1784	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1786	4c 8c 17	jmp $178c			jmp 	_MInt32Next 					; do the next iteration
.1789					_MInt32NoSubtract:
.1789	68		pla				pla
.178a	68		pla				pla
.178b	68		pla				pla
.178c					_MInt32Next:
.178c	88		dey				dey 								; do this 32 times.
.178d	d0 c4		bne $1753			bne 	_MInt32UDLoop
.178f	68		pla				pla 								; restore Y and exit
.1790	a8		tay				tay
.1791	60		rts				rts
.1792					_MInt32DZero:
.1792	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.1794	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.1797					MInt32Modulus:
.1797	20 3e 17	jsr $173e			jsr 	MInt32UDivide 				; do the division.
.179a	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.179c	95 60		sta $60,x			sta 	esInt3,x
.179e	b5 5a		lda $5a,x			lda 	esInt2+2,x
.17a0	95 58		sta $58,x			sta 	esInt2,x
.17a2	b5 52		lda $52,x			lda 	esInt1+2,x
.17a4	95 50		sta $50,x			sta 	esInt1,x
.17a6	b5 4a		lda $4a,x			lda 	esInt0+2,x
.17a8	95 48		sta $48,x			sta 	esInt0,x
.17aa	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32fromstr.asm

.17ab					MInt32FromString:
.17ab	85 0a		sta $0a				sta 	tempShort 					; save base
.17ad	98		tya				tya
.17ae	48		pha				pha
.17af	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.17b1	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.17b3	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.17b5	d0 01		bne $17b8			bne 	_I32FSNotNegative
.17b7	c8		iny				iny 								; if so consume it.
.17b8					_I32FSNotNegative:
.17b8	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.17ba	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.17bc	f0 02		beq $17c0			beq 	_I32FSNN2
.17be	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.17c0					_I32FSNN2:
.17c0	48		pha				pha 								; save base + final sign on stack.
.17c1	20 19 19	jsr $1919			jsr 	MInt32False 					; zero the return value.
.17c4					I32FSMainLoop:
.17c4	68		pla				pla 								; get the base back into tempshort
.17c5	48		pha				pha
.17c6	29 7f		and #$7f			and 	#$7F
.17c8	85 0a		sta $0a				sta 	tempShort
.17ca	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.17cc	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.17ce	90 02		bcc $17d2			bcc 	_I32FSNotLC
.17d0	e9 20		sbc #$20			sbc 	#32
.17d2					_I32FSNotLC:
.17d2	38		sec				sec 								; subtract 48 (ASCII "0")
.17d3	e9 30		sbc #$30			sbc 	#"0"
.17d5	90 26		bcc $17fd			bcc 	_I32FSDone 					; nothing more to do.
.17d7	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.17d9	90 06		bcc $17e1			bcc 	_I32FSValidate
.17db	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.17dd	90 1e		bcc $17fd			bcc 	_I32FSDone
.17df	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.17e1					_I32FSValidate:
.17e1	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.17e3	b0 18		bcs $17fd			bcs 	_I32FSDone 					; sorry, too large for this base.
.17e5	48		pha				pha 								; save the new digit value.
.17e6	e8		inx				inx 								; put base into next slot.
.17e7	a5 0a		lda $0a				lda 	tempShort
.17e9	20 28 19	jsr $1928			jsr 	MInt32Set8Bit
.17ec	ca		dex				dex
.17ed	20 3f 18	jsr $183f			jsr 	MInt32Multiply 				; multiply current by the base
.17f0	e8		inx				inx
.17f1	68		pla				pla  								; put additive into next slot
.17f2	20 28 19	jsr $1928			jsr 	MInt32Set8Bit
.17f5	ca		dex				dex
.17f6	20 0b 18	jsr $180b			jsr 	MInt32Add 					; and add it
.17f9	c8		iny				iny 								; look at next character
.17fa	4c c4 17	jmp $17c4			jmp 	I32FSMainLoop 				; and go round again.
.17fd					_I32FSDone:
.17fd	68		pla				pla 								; get base/final sign back
.17fe	10 04		bpl $1804			bpl 	_I32FSNN3
.1800	88		dey				dey 								; one fewer character to allow for the - prefix.
.1801	20 d3 18	jsr $18d3			jsr 	MInt32Negate 				; negate the result.
.1804					_I32FSNN3:
.1804	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1806	68		pla				pla
.1807	a8		tay				tay
.1808	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.180a	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32math.asm

.180b					MInt32Add:
.180b	18		clc				clc
.180c	b5 48		lda $48,x			lda 	esInt0,x
.180e	75 49		adc $49,x			adc 	esInt0+1,x
.1810	95 48		sta $48,x			sta 	esInt0,x
.1812	b5 50		lda $50,x			lda 	esInt1,x
.1814	75 51		adc $51,x			adc 	esInt1+1,x
.1816	95 50		sta $50,x			sta 	esInt1,x
.1818	b5 58		lda $58,x			lda 	esInt2,x
.181a	75 59		adc $59,x			adc 	esInt2+1,x
.181c	95 58		sta $58,x			sta 	esInt2,x
.181e	b5 60		lda $60,x			lda 	esInt3,x
.1820	75 61		adc $61,x			adc 	esInt3+1,x
.1822	95 60		sta $60,x			sta 	esInt3,x
.1824	60		rts				rts
.1825					MInt32Sub:
.1825	38		sec				sec
.1826	b5 48		lda $48,x			lda 	esInt0,x
.1828	f5 49		sbc $49,x			sbc 	esInt0+1,x
.182a	95 48		sta $48,x			sta 	esInt0,x
.182c	b5 50		lda $50,x			lda 	esInt1,x
.182e	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1830	95 50		sta $50,x			sta 	esInt1,x
.1832	b5 58		lda $58,x			lda 	esInt2,x
.1834	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1836	95 58		sta $58,x			sta 	esInt2,x
.1838	b5 60		lda $60,x			lda 	esInt3,x
.183a	f5 61		sbc $61,x			sbc 	esInt3+1,x
.183c	95 60		sta $60,x			sta 	esInt3,x
.183e	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32multiply.asm

.183f					MInt32Multiply:
.183f	e8		inx				inx 								; copy 2nd -> 3rd
.1840	20 65 18	jsr $1865			jsr 	MInt32CopyUp
.1843	ca		dex				dex
.1844	20 65 18	jsr $1865			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1847	20 19 19	jsr $1919			jsr 	MInt32False 					; zero 1st.
.184a					_I32Loop:
.184a	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.184c	29 01		and #$01			and 	#1
.184e	f0 03		beq $1853			beq 	_I32NoAdd 					; if set
.1850	20 0b 18	jsr $180b			jsr 	MInt32Add 					; add 2nd to 1st.
.1853					_I32NoAdd:
.1853	e8		inx				inx 								; shift 2nd left
.1854	20 2e 19	jsr $192e			jsr 	MInt32ShiftLeft
.1857	e8		inx				inx  								; shift 3rd right
.1858	20 37 19	jsr $1937			jsr 	MInt32ShiftRight
.185b	20 40 19	jsr $1940			jsr 	MInt32Zero 					; check if zero.
.185e	08		php				php 								; save status bits
.185f	ca		dex				dex 	 							; point back to 1st
.1860	ca		dex				dex
.1861	28		plp				plp 								; get status bits
.1862	d0 e6		bne $184a			bne 	_I32Loop 					; if non-zero keep going.
.1864	60		rts				rts
.1865					MInt32CopyUp:
.1865	b5 48		lda $48,x			lda 	esInt0,x
.1867	95 49		sta $49,x			sta 	esInt0+1,x
.1869	b5 50		lda $50,x			lda 	esInt1,x
.186b	95 51		sta $51,x			sta 	esInt1+1,x
.186d	b5 58		lda $58,x			lda 	esInt2,x
.186f	95 59		sta $59,x			sta 	esInt2+1,x
.1871	b5 60		lda $60,x			lda 	esInt3,x
.1873	95 61		sta $61,x			sta 	esInt3+1,x
.1875	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32tostr.asm

>0870					MCharCount:	.fill 	1						; count of converted characters
.1876					MInt32ToString:
.1876	48		pha				pha 								; save base
.1877	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1879	a9 00		lda #$00			lda 	#0
.187b	8d 70 08	sta $0870			sta 	MCharCount 					; clear character count.
.187e	98		tya				tya
.187f	48		pha				pha
.1880	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1882	10 10		bpl $1894			bpl 	_I32TSUnsigned
.1884	48		pha				pha 								; save base on stack.
.1885	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1887	10 08		bpl $1891			bpl 	_I32TSNoFlip
.1889	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.188b	20 c0 18	jsr $18c0			jsr 	MI32WriteCharacter
.188e	20 d3 18	jsr $18d3			jsr 	MInt32Negate 				; negate the value.
.1891					_I32TSNoFlip:
.1891	68		pla				pla 								; get the base back
.1892	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1894					_I32TSUnsigned:
.1894	20 9b 18	jsr $189b			jsr 	MI32DivideWrite 				; recursive code to output string.
.1897	68		pla				pla
.1898	a8		tay				tay
.1899	68		pla				pla
.189a	60		rts				rts
.189b					MI32DivideWrite:
.189b	48		pha				pha 								; save the divisor/base
.189c	e8		inx				inx 								; write in the dividing position.
.189d	20 28 19	jsr $1928			jsr 	MInt32Set8Bit
.18a0	ca		dex				dex
.18a1	20 3e 17	jsr $173e			jsr 	MInt32UDivide 				; divide number by base.
.18a4	68		pla				pla 								; get the base into Y
.18a5	a8		tay				tay
.18a6	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.18a8	48		pha				pha
.18a9	20 40 19	jsr $1940			jsr 	MInt32Zero 					; is the result zero ?
.18ac	f0 04		beq $18b2			beq 	_I32NoRecurse 				; if so, don't recurse.
.18ae	98		tya				tya 								; put base into A
.18af	20 9b 18	jsr $189b			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.18b2					_I32NoRecurse:
.18b2	68		pla				pla 								; get the remainder back
.18b3	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.18b5	90 02		bcc $18b9			bcc 	_I32NotHex
.18b7	69 06		adc #$06			adc 	#7-1
.18b9					_I32NotHex:
.18b9	18		clc				clc 								; make it ASCII
.18ba	69 30		adc #$30			adc 	#48
.18bc	20 c0 18	jsr $18c0			jsr 	MI32WriteCharacter 			; write the character out
.18bf	60		rts				rts 								; and exit.
.18c0					MI32WriteCharacter:
.18c0	ac 70 08	ldy $0870			ldy 	MCharCount 					; get position
.18c3	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.18c5	c8		iny				iny
.18c6	a9 00		lda #$00			lda 	#0
.18c8	91 04		sta ($04),y			sta 	(temp0),y
.18ca	ee 70 08	inc $0870			inc 	MCharCount 					; bump count
.18cd	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32unary.asm

>0871					MSeed32:	.fill 	4							; random number seed.
.18ce					MInt32Absolute:
.18ce	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.18d0	30 01		bmi $18d3			bmi 	MInt32Negate
.18d2	60		rts				rts
.18d3					MInt32Negate:
.18d3	38		sec				sec
.18d4	a9 00		lda #$00			lda 	#0
.18d6	f5 48		sbc $48,x			sbc 	esInt0,x
.18d8	95 48		sta $48,x			sta 	esInt0,x
.18da	a9 00		lda #$00			lda 	#0
.18dc	f5 50		sbc $50,x			sbc 	esInt1,x
.18de	95 50		sta $50,x			sta 	esInt1,x
.18e0	a9 00		lda #$00			lda 	#0
.18e2	f5 58		sbc $58,x			sbc 	esInt2,x
.18e4	95 58		sta $58,x			sta 	esInt2,x
.18e6	a9 00		lda #$00			lda 	#0
.18e8	f5 60		sbc $60,x			sbc 	esInt3,x
.18ea	95 60		sta $60,x			sta 	esInt3,x
.18ec	60		rts				rts
.18ed					MInt32Not:
.18ed	b5 48		lda $48,x			lda 	esInt0,x
.18ef	49 ff		eor #$ff			eor 	#$FF
.18f1	95 48		sta $48,x			sta 	esInt0,x
.18f3	b5 50		lda $50,x			lda 	esInt1,x
.18f5	49 ff		eor #$ff			eor 	#$FF
.18f7	95 50		sta $50,x			sta 	esInt1,x
.18f9	b5 58		lda $58,x			lda 	esInt2,x
.18fb	49 ff		eor #$ff			eor 	#$FF
.18fd	95 58		sta $58,x			sta 	esInt2,x
.18ff	b5 60		lda $60,x			lda 	esInt3,x
.1901	49 ff		eor #$ff			eor 	#$FF
.1903	95 60		sta $60,x			sta 	esInt3,x
.1905	60		rts				rts
.1906					MInt32Sign:
.1906	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1908	30 0b		bmi $1915			bmi 	MInt32True 					; if set return -1 (true)
.190a	20 40 19	jsr $1940			jsr 	MInt32Zero 					; is it zero ?
.190d	f0 0a		beq $1919			beq 	MInt32False 					; if zero return 0 (false)
.190f	20 19 19	jsr $1919			jsr 	MInt32False 					; > 0 return 1
.1912	f6 48		inc $48,x			inc 	esInt0,x
.1914	60		rts				rts
.1915					MInt32True:
.1915	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1917	d0 02		bne $191b			bne 	MInt32WriteAll
.1919					MInt32False:
.1919	a9 00		lda #$00			lda 	#0
.191b					MInt32WriteAll:
.191b	95 48		sta $48,x			sta 	esInt0,x
.191d					MInt32Write123:
.191d	95 50		sta $50,x			sta 	esInt1,x
.191f	95 58		sta $58,x			sta 	esInt2,x
.1921	95 60		sta $60,x			sta 	esInt3,x
.1923	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1925	95 40		sta $40,x			sta 	esType,x
.1927	60		rts				rts
.1928					MInt32Set8Bit:
.1928	95 48		sta $48,x			sta 	esInt0,x
.192a	a9 00		lda #$00			lda 	#0
.192c	f0 ef		beq $191d			beq		MInt32Write123
.192e					MInt32ShiftLeft:
.192e	16 48		asl $48,x			asl 	esInt0,x
.1930	36 50		rol $50,x			rol	 	esInt1,x
.1932	36 58		rol $58,x			rol	 	esInt2,x
.1934	36 60		rol $60,x			rol	 	esInt3,x
.1936	60		rts				rts
.1937					MInt32ShiftRight:
.1937	56 60		lsr $60,x			lsr 	esInt3,x
.1939	76 58		ror $58,x			ror 	esInt2,x
.193b	76 50		ror $50,x			ror 	esInt1,x
.193d	76 48		ror $48,x			ror 	esInt0,x
.193f	60		rts				rts
.1940					MInt32Zero:
.1940	b5 48		lda $48,x			lda 	esInt0,x
.1942	15 50		ora $50,x			ora 	esInt1,x
.1944	15 58		ora $58,x			ora 	esInt2,x
.1946	15 60		ora $60,x			ora 	esInt3,x
.1948	60		rts				rts
.1949					MInt32Random:
.1949	98		tya				tya
.194a	48		pha				pha
.194b	a0 07		ldy #$07			ldy 	#7
.194d	ad 71 08	lda $0871			lda 	MSeed32+0
.1950	d0 03		bne $1955			bne 	_Random1
.1952	a8		tay				tay
.1953	a9 aa		lda #$aa			lda		#$AA
.1955					_Random1:
.1955	0a		asl a				asl 	a
.1956	2e 72 08	rol $0872			rol 	MSeed32+1
.1959	2e 73 08	rol $0873			rol 	MSeed32+2
.195c	2e 74 08	rol $0874			rol 	MSeed32+3
.195f	90 02		bcc $1963			bcc 	_Random2
.1961	49 c5		eor #$c5			eor 	#$C5
.1963					_Random2:
.1963	88		dey				dey
.1964	d0 ef		bne $1955			bne 	_Random1
.1966	8d 71 08	sta $0871			sta 	MSeed32+0
.1969	95 48		sta $48,x			sta 	esInt0,x
.196b	ad 72 08	lda $0872			lda 	MSeed32+1
.196e	95 50		sta $50,x			sta 	esInt1,x
.1970	ad 73 08	lda $0873			lda 	MSeed32+2
.1973	95 58		sta $58,x			sta 	esInt2,x
.1975	ad 74 08	lda $0874			lda 	MSeed32+3
.1978	95 60		sta $60,x			sta 	esInt3,x
.197a	68		pla				pla
.197b	a8		tay				tay
.197c	a9 00		lda #$00			lda 	#0
.197e	95 40		sta $40,x			sta 	esType,x
.1980	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/check.asm

.1981					CheckRightParen:
.1981	b1 02		lda ($02),y			lda 	(codePtr),y
.1983	c8		iny				iny
.1984	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1986	d0 01		bne $1989			bne 	_CRPError
.1988	60		rts				rts
.1989					_CRPError:
.1989	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.198b	20 a4 19	jsr $19a4			jsr 	ErrorHandler
.198e					CheckComma:
.198e	b1 02		lda ($02),y			lda 	(codePtr),y
.1990	c8		iny				iny
.1991	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1993	d0 01		bne $1996			bne 	_CCError
.1995	60		rts				rts
.1996					_CCError:
.1996	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.1998	20 a4 19	jsr $19a4			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm

.199b					mainHandler:
.199b	7c 9e 19	jmp ($199e,x)			jmp 	(mainVectors,x)
.199e					mainVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.asm

.199e					assemblerHandler:
.199e	7c a1 19	jmp ($19a1,x)			jmp 	(assemblerVectors,x)
.19a1					assemblerVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.asm

.19a1					deviceHandler:
.19a1	7c a4 19	jmp ($19a4,x)			jmp 	(deviceVectors,x)
.19a4					deviceVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.asm


;******  Processing file: ../source/error/errorhandler.asm

.19a4					ErrorHandler:
.19a4	a9 ee		lda #$ee			lda 	#$EE
.19a6	a8		tay				tay
>19a7	db						.byte 	$DB
.19a8	4c a8 19	jmp $19a8	_EHHalt:jmp 	_EHHalt

;******  Return to file: ../source/error/error.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.asm

.19ab					floatingpointHandler:
.19ab	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.19ad	20 a4 19	jsr $19a4			jsr 	ErrorHandler

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.asm

.19b0					interactionHandler:
.19b0	7c b3 19	jmp ($19b3,x)			jmp 	(interactionVectors,x)
.19b3					interactionVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.asm


;******  Processing file: ../source/string/compare.asm

.19b3					STRCompare:
>19b3	db						.byte 	$DB
.19b4	4c b3 19	jmp $19b3			jmp 	STRCompare

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/concat.asm

.19b7					StringConcat:
>19b7	db						.byte 	$DB
.19b8	80 fd		bra $19b7			bra 	StringConcat

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/memory.asm

.0078					softMemAlloc:
>0078							.fill 	2  							; if MSB is zero needs resetting on allocation.

;******  Return to file: ../source/string/string.asm

.19ba					stringHandler:
.19ba	7c bd 19	jmp ($19bd,x)			jmp 	(stringVectors,x)
.19bd					stringVectors:
>19bd	b7 19					.word StringConcat         ; index 0
>19bf	b3 19					.word STRCompare           ; index 2

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.asm

.19c1					tokeniserHandler:
.19c1	7c c4 19	jmp ($19c4,x)			jmp 	(tokeniserVectors,x)
.19c4					tokeniserVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/access.asm

.19c4					AccessVariable:
.19c4	aa		tax				tax 								; stack in X
.19c5	c8		iny				iny
.19c6	b1 02		lda ($02),y			lda 	(codePtr),y
.19c8	88		dey				dey
.19c9	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.19cb	d0 15		bne $19e2			bne 	_AVLong
.19cd	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.19cf	38		sec				sec 	 							; make it 0-25
.19d0	e9 01		sbc #$01			sbc 	#1
.19d2	0a		asl a				asl 	a 							; x 4 is LSB of address
.19d3	0a		asl a				asl 	a
.19d4	95 48		sta $48,x			sta 	esInt0,x
.19d6	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.19d8	95 50		sta $50,x			sta 	esInt1,x
.19da	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.19dc	95 40		sta $40,x			sta 	esType,x
.19de	c8		iny				iny 								; skip over the variable reference in the code.
.19df	c8		iny				iny
.19e0	8a		txa				txa 								; stack in A to return.
.19e1	60		rts				rts
.19e2					_AVLong:
.19e2	80 fe		bra $19e2			bra 	_AVLong

;******  Return to file: ../source/variable/variable.asm

.19e4					variableHandler:
.19e4	7c e7 19	jmp ($19e7,x)			jmp 	(variableVectors,x)
.19e7					variableVectors:
>19e7	c4 19					.word AccessVariable       ; index 0

;******  Return to file: ../source/basic.asm


;******  End of listing
