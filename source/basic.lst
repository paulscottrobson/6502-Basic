
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ../source/basic.asm
; Sat Feb 27 09:33:45 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/basic.asm


;******  Processing file: ../source/main/01common.inc

=8					StackSize = 8

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/02macros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.
.0868					basePage:
>0868							.fill 	2

;******  Processing file: ../source/main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$9d					TOK_STRUCTST=$9d
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ../source/main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/imath/intmacros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/errorhandler.inc


;******  Processing file: ../source/error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assert
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma

;******  Return to file: ../source/error/errorhandler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.asm


;******  Processing file: ../source/main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d 68 08	sta $0868			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d 69 08	sta $0869			sta 	1+(basePage)
.100d	4c 1e 10	jmp $101e			jmp 	Command_Run
.195f					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ../source/main/../generated/testcode.inc

>5000	12 64 00 d9 a2 66 49 47			.byte 18,100,0,217,162,102,73,71,111,141,75,67,106,93,193,141,64,128,22,110,0,217,162,144,80,118,101,64,134,93,67,75,92,193,141,77,65,75,64,128,22,120,0,217,162,98,85,93,66,135,144,98,113,66,95,193,141,144,96,66,93,128,21,130,0,217,162,70,124,84,65,143,88,96,105,94,193,141,95,92,125,95,128,19,140,0,217,162,144,94,68,82,124,141,87,82,71,112,193,141,64,128,21,150,0,217,162,79,103,82,78,135,84,106,119,101,193,141,95,111,119,111,128,21,160,0,217,162,144,91,76,81,134,87,111,120,119,193,141,87,100,112,103,128,21,170,0,217,162,76,71,71,118,135,83,126,70,111,193,141,95,127,71,127,128,21,180,0,217,162,68,67,73,105,149,91,80,107,68,193,141,68,67,73,105,128,21,190,0,217,162,82,115,72,107,143,81,105,88,89,193,141,100,92,97,68,128,24,200,0,217,162,144,96,78,90,77,143,144,88,106,104,86,193,141,144,120,121,66,99,128,19,210,0,217,162,85,68,126,102,141,144,96,95,69,103,193,141,64,128,18,220,0,217,162,69,88,105,122,139,90,117,121,125,193,141,64,128,20,230,0,217,162,144,85,89,68,87,140,93,72,81,64,193,141,144,65,128,18,240,0,217,162,76,103,82,80,148,72,103,119,94,193,141,65,128,20,250,0,217,162,144,76,119,100,90,148,65,93,119,96,193,141,144,72,128,17,4,1,217,162,69,82,103,141,84,75,99,95,193,141,64,128,23,14,1,217,162,144,74,103,106,97,136,144,90,97,64,65,193,141,80,70,106,96,128,22,24,1,217,162,144,74,117,90,123,134,101,79,88,83,193,141,101,74,64,65,128,24,34,1,217,162,144,86,84,72,100,144,144,81,124,126,94,193,141,144,68,87,74,70,128,20,44,1,217,162,144,82,93,124,94,142,78,88,110,112,193,141,144,65,128,20,54,1,217,162,85,87,97,76,148,144,68,99,89,193,141,144,68,108,128,21,64,1,217,162,144,97,64,70,70,142,144,85,87,96,80,193,141,144,65,128,19,74,1,217,162,76,67,67,107,140,87,103,67,97,193,141,144,65,128,20,84,1,217,162,144,94,69,88,98,148,144,73,93,112,111,193,141,67,128,19,94,1,217,162,144,79,93,97,65,148,100,104,71,66,193,141,64,128,18,104,1,217,162,84,112,117,122,138,74,84,100,94,193,141,64,128,21,114,1,217,162,144,97,71,126,65,138,144,74,121,97,74,193,141,144,65,128,23,124,1,217,162,144,91,108,109,87,136,144,87,86,125,110,193,141,76,122,80,123,128,21,134,1,217,162,144,95,100,92,74,138,144,87,117,117,108,193,141,144,65,128,21,144,1,217,162,74,107,121,73,136,90,103,107,89,193,141,80,76,82,80,128,21,154,1,217,162,94,119,84,93,149,82,85,67,100,193,141,76,98,80,121,128,18,164,1,217,162,91,116,116,116,148,81,86,91,72,193,141,65,128,21,174,1,217,162,101,82,94,93,149,92,74,96,78,193,141,73,71,126,79,128,19,184,1,217,162,99,96,84,123,142,66,122,114,111,193,141,144,65,128,18,194,1,217,162,78,75,120,108,141,88,102,97,86,193,141,64,128,21,204,1,217,162,144,69,121,79,90,139,144,77,72,110,117,193,141,144,65,128,21,214,1,217,162,83,70,84,101,135,98,84,116,89,193,141,115,86,116,125,128,22,224,1,217,162,144,67,114,120,84,134,72,85,69,69,193,141,72,69,69,68,128,19,234,1,217,162,66,83,114,124,140,144,90,77,83,120,193,141,64,128,20,244,1,217,162,69,71,117,135,76,91,105,97,193,141,76,95,111,117,128,23,254,1,217,162,144,97,88,117,108,144,144,102,72,66,98,193,141,68,111,76,118,128,23,8,2,217,162,144,65,78,105,105,135,86,93,93,77,193,141,144,65,66,96,97,128,19,18,2,217,162,99,96,115,114,137,94,81,75,116,193,141,144,65,128,21,28,2,217,162,88,90,75,80,149,89,109,104,105,193,141,88,90,75,80,128,23,38,2,217,162,144,88,111,125,115,136,144,91,117,94,115,193,141,67,90,99,64,128,23,48,2,217,162,144,78,94,94,92,136,71,76,80,83,193,141,144,73,82,78,73,128,20,58,2,217,162,144,99,102,113,91,138,72,73,71,82,193,141,144,65,128,18,68,2,217,162,71,122,80,64,137,90,76,100,95,193,141,64,128,21,78,2,217,162,94,116,93,123,134,69,69,126,74,193,141,68,68,92,74,128,21,88,2,217,162,71,83,105,120,149,89,93,126,107,193,141,71,83,105,120,128,24,98,2,217,162,144,79,90,114,115,135,144,82,109,69,113,193,141,144,66,72,64,113,128,18,108,2,217,162,73,77,88,109,137,80,126,103,100,193,141,64,128,20,118,2,217,162,144,72,97,112,105,138,92,116,79,75,193,141,144,65,128,21,128,2,217,162,144,79,117,75,105,137,144,96,107,87,98,193,141,144,65,128,21,138,2,217,162,99,111,78,84,149,76,102,123,77,193,141,74,97,87,122,128,23,148,2,217,162,78,84,116,119,143,144,94,91,74,94,193,141,144,80,70,85,103,128,19,158,2,217,162,144,74,113,102,80,137,79,113,97,106,193,141,64,128,21,168,2,217,162,144,65,114,80,98,142,144,87,116,74,105,193,141,144,65,128,18,178,2,217,162,70,80,66,81,148,82,70,68,111,193,141,64,128,22,188,2,217,162,92,65,94,116,143,144,80,97,85,115,193,141,75,96,73,65,128,19,198,2,217,162,97,76,79,93,141,144,71,71,121,125,193,141,64,128,24,208,2,217,162,144,91,96,77,119,143,144,72,67,67,97,193,141,144,99,99,81,88,128,20,218,2,217,162,144,97,115,127,84,148,72,109,118,104,193,141,144,67,128,23,228,2,217,162,144,90,123,83,76,144,70,122,126,76,193,141,144,97,118,81,88,128,20,238,2,217,162,144,85,124,114,69,138,83,90,76,125,193,141,144,65,128,21,248,2,217,162,88,70,124,100,143,99,114,120,118,193,141,123,121,117,90,128,19,2,3,217,162,144,76,76,109,65,137,97,102,71,117,193,141,64,128,18,12,3,217,162,65,95,85,81,139,71,82,122,124,193,141,64,128,20,22,3,217,162,69,74,118,117,142,144,65,96,100,90,193,141,144,65,128,20,32,3,217,162,144,68,125,66,70,148,144,69,98,85,83,193,141,64,128,20,42,3,217,162,144,67,73,114,78,138,98,80,76,88,193,141,144,65,128,20,52,3,217,162,144,94,100,99,97,137,144,76,122,105,65,193,141,64,128,20,62,3,217,162,144,88,77,80,110,140,71,66,110,76,193,141,144,65,128,19,72,3,217,162,82,76,98,112,138,144,69,73,82,126,193,141,64,128,20,82,3,217,162,81,75,65,103,137,144,99,109,75,83,193,141,144,65,128,23,92,3,217,162,95,111,66,123,135,144,98,116,79,113,193,141,144,96,80,77,65,128,23,102,3,217,162,144,68,123,104,77,144,80,75,86,84,193,141,144,85,70,126,97,128,23,112,3,217,162,84,95,112,81,136,144,83,73,122,90,193,141,144,71,86,74,73,128,20,122,3,217,162,88,82,70,127,142,144,67,98,96,68,193,141,144,65,128,21,132,3,217,162,87,125,95,116,134,144,95,68,75,103,193,141,121,84,80,128,23,142,3,217,162,144,78,110,87,113,136,144,75,67,87,95,193,141,69,109,64,110,128,22,152,3,217,162,144,89,70,68,120,134,67,126,110,70,193,141,66,120,106,64,128,18,162,3,217,162,88,90,104,120,141,92,115,87,71,193,141,64,128,20,172,3,217,162,144,96,104,94,103,140,99,95,94,122,193,141,144,65,128,19,182,3,217,162,82,92,83,70,138,144,86,98,67,119,193,141,64,128,21,192,3,217,162,69,126,107,89,149,68,114,118,67,193,141,65,75,117,86,128,18,202,3,217,162,93,84,72,104,138,70,99,83,125,193,141,64,128,20,212,3,217,162,144,81,119,93,68,148,144,69,111,99,83,193,141,67,128,21,222,3,217,162,90,95,102,98,135,95,102,89,127,193,141,95,127,127,127,128,24,232,3,217,162,144,83,65,94,80,143,144,80,120,84,126,193,141,144,99,121,115,78,128,19,242,3,217,162,144,65,90,107,84,141,83,77,109,101,193,141,64,128,23,252,3,217,162,84,120,117,76,136,144,88,78,99,90,193,141,144,76,118,86,86,128,22,6,4,217,162,75,67,110,102,143,144,73,84,123,114,193,141,65,110,114,116,128,19,16,4,217,162,144,79,76,83,106,139,93,67,116,114,193,141,64,128,19,26,4,217,162,66,79,88,127,141,144,101,99,65,74,193,141,64,128,17,36,4,217,162,127,81,117,137,91,91,96,92,193,141,64,128,20,46,4,217,162,144,91,67,74,98,138,77,66,90,104,193,141,144,65,128,23,56,4,217,162,144,92,106,83,85,144,81,84,95,122,193,141,144,109,126,115,79,128,20,66,4,217,162,92,88,115,106,148,144,66,125,80,114,193,141,144,73,128,20,76,4,217,162,68,107,123,102,139,144,84,67,100,79,193,141,144,65,128,21,86,4,217,162,76,78,73,83,136,96,119,93,109,193,141,108,121,84,126,128,19,96,4,217,162,144,95,126,112,98,141,92,112,66,97,193,141,64,128,20,106,4,217,162,144,85,81,95,91,137,144,74,117,80,77,193,141,64,128,19,116,4,217,162,144,92,107,85,114,139,93,114,111,70,193,141,64,128,19,126,4,217,162,144,98,119,93,109,141,84,85,99,126,193,141,64,128,20,136,4,217,162,144,77,123,108,106,140,144,100,67,88,102,193,141,64,128,24,146,4,217,162,144,93,82,117,79,134,144,91,114,103,83,193,141,144,95,114,119,95,128,20,156,4,217,162,70,121,90,123,144,70,97,88,92,193,141,88,66,95,128,19,166,4,217,162,85,109,66,99,138,102,72,108,118,193,141,144,65,128,24,176,4,217,162,144,91,126,73,117,135,144,94,96,109,119,193,141,144,90,96,73,117,128,18,186,4,217,162,82,70,75,104,148,102,64,78,91,193,141,64,128,18,196,4,217,162,87,114,83,70,138,65,84,82,96,193,141,64,128,23,206,4,217,162,144,72,89,71,84,136,68,102,78,120,193,141,144,76,127,73,108,128,21,216,4,217,162,91,122,96,124,136,78,111,66,114,193,141,85,85,98,78,128,22,226,4,217,162,95,97,73,125,134,144,98,73,122,81,193,141,93,96,65,109,128,20,236,4,217,162,144,98,94,77,90,140,84,79,120,92,193,141,144,65,128,19,246,4,217,162,72,106,118,110,140,99,94,88,116,193,141,144,65,128,21,0,5,217,162,68,71,76,107,149,100,119,101,108,193,141,68,71,76,107,128,21,10,5,217,162,66,113,99,110,134,144,111,84,118,193,141,66,80,99,74,128,20,20,5,217,162,144,99,109,115,111,138,144,115,110,107,193,141,144,65,128,19,30,5,217,162,98,89,113,73,138,144,89,95,127,74,193,141,64,128,23,40,5,217,162,68,106,118,87,143,144,99,119,69,121,193,141,144,95,76,79,98,128,20,50,5,217,162,144,98,96,88,125,141,144,94,102,100,102,193,141,64,128,23,60,5,217,162,144,85,82,75,122,136,94,78,93,71,193,141,144,75,92,86,127,128,20,70,5,217,162,144,83,91,118,114,142,96,84,124,87,193,141,144,65,128,23,80,5,217,162,85,82,98,87,135,144,88,102,66,77,193,141,144,72,100,64,73,128,18,90,5,217,162,96,109,123,103,140,75,118,108,120,193,141,64,128,18,100,5,217,162,67,95,109,122,137,85,90,92,123,193,141,64,128,23,110,5,217,162,144,86,71,66,125,136,144,91,65,118,109,193,141,77,70,116,80,128,23,120,5,217,162,71,73,74,107,136,144,80,101,67,71,193,141,144,87,108,73,110,128,19,130,5,217,162,144,81,75,66,114,137,84,100,101,78,193,141,64,128,23,140,5,217,162,98,126,86,75,135,144,77,90,88,91,193,141,144,77,64,72,81,128,19,150,5,217,162,71,117,102,118,141,144,81,64,103,110,193,141,64,128,22,160,5,217,162,96,107,67,78,144,101,70,116,115,193,141,144,68,91,113,101,128,20,170,5,217,162,144,88,80,100,99,138,98,76,105,94,193,141,144,65,128,20,180,5,217,162,88,65,115,127,139,144,100,71,67,86,193,141,144,65,128,19,190,5,217,162,144,86,101,65,66,139,95,101,105,120,193,141,64,128,23,200,5,217,162,144,88,99,92,64,143,68,117,80,79,193,141,144,83,110,75,113,128,20,210,5,217,162,76,102,64,81,139,144,100,76,73,109,193,141,144,65,128,24,220,5,217,162,144,97,122,93,113,144,144,75,78,100,126,193,141,144,86,107,120,115,128,23,230,5,217,162,69,111,69,91,143,144,91,122,113,119,193,141,144,86,75,108,92,128,19,240,5,217,162,144,91,125,87,90,139,84,123,101,83,193,141,64,128,20,250,5,217,162,144,100,92,122,94,142,92,126,91,81,193,141,144,65,128,20,4,6,217,162,144,72,66,123,119,140,99,72,85,87,193,141,144,65,128,19,14,6,217,162,98,115,78,105,140,144,67,77,110,87,193,141,64,128,23,24,6,217,162,144,76,95,100,96,136,83,111,73,78,193,141,144,95,112,109,82,128,21,34,6,217,162,92,82,117,122,136,88,66,97,127,193,141,68,80,84,69,128,21,44,6,217,162,144,86,89,76,65,140,144,68,70,95,119,193,141,144,65,128,22,54,6,217,162,87,86,127,76,134,144,101,91,111,96,193,141,82,68,80,64,128,18,64,6,217,162,98,84,124,106,148,68,69,69,83,193,141,72,128,20,74,6,217,162,144,69,93,81,112,138,144,87,85,118,85,193,141,64,128,18,84,6,217,162,70,92,104,103,139,91,106,104,96,193,141,64,128,21,94,6,217,162,144,78,74,75,119,140,144,65,98,65,106,193,141,144,65,128,23,104,6,217,162,101,66,96,98,135,144,85,78,123,103,193,141,144,80,76,91,69,128,21,114,6,217,162,88,116,90,87,135,77,113,71,73,193,141,93,117,95,95,128,23,124,6,217,162,144,65,127,88,107,136,144,84,69,67,67,193,141,85,122,91,104,128,24,134,6,217,162,144,98,117,73,107,134,144,96,81,83,118,193,141,144,98,117,92,64,128,19,144,6,217,162,144,71,108,85,75,139,71,116,88,105,193,141,64,128,18,154,6,217,162,66,127,118,76,141,97,121,76,104,193,141,64,128,23,164,6,217,162,144,91,97,112,83,144,85,103,77,68,193,141,144,113,72,125,87,128,22,174,6,217,162,77,86,84,71,134,144,82,83,65,123,193,141,77,68,84,69,128,21,184,6,217,162,81,96,88,111,149,71,111,70,74,193,141,66,66,76,91,128,18,194,6,217,162,82,94,89,65,139,83,99,127,122,193,141,64,128,20,204,6,217,162,67,97,70,111,142,144,70,116,64,76,193,141,144,65,128,20,214,6,217,162,98,121,105,136,86,89,125,110,193,141,86,123,68,71,128,21,224,6,217,162,101,76,86,108,135,66,123,97,110,193,141,103,127,119,110,128,24,234,6,217,162,144,94,101,83,121,134,144,77,105,71,121,193,141,144,95,109,87,121,128,19,244,6,217,162,70,111,77,77,138,144,97,87,108,111,193,141,64,128,23,254,6,217,162,144,77,104,121,93,144,73,100,81,74,193,141,144,87,77,74,103,128,19,8,7,217,162,94,91,75,101,138,99,124,107,119,193,141,144,65,128,21,18,7,217,162,67,86,73,67,136,73,86,110,65,193,141,74,64,103,66,128,19,28,7,217,162,69,64,113,96,141,144,90,117,71,114,193,141,64,128,21,38,7,217,162,95,106,83,103,144,90,91,95,124,193,141,69,78,115,107,128,24,48,7,217,162,144,90,115,118,91,134,144,74,98,70,88,193,141,144,90,115,118,96,128,20,58,7,217,162,144,65,65,121,124,140,80,106,77,120,193,141,144,65,128,20,68,7,217,162,144,85,116,117,118,137,144,84,106,112,66,193,141,64,128,21,78,7,217,162,144,86,115,93,65,138,144,69,114,70,109,193,141,144,65,128,23,88,7,217,162,144,86,66,86,68,144,81,79,69,97,193,141,144,103,81,91,101,128,20,98,7,217,162,72,121,99,83,148,144,69,82,98,97,193,141,144,65,128,20,108,7,217,162,144,73,118,115,88,141,144,70,124,97,77,193,141,64,128,24,118,7,217,162,144,80,83,109,71,143,144,82,94,92,113,193,141,144,98,114,73,120,128,19,128,7,217,162,144,93,106,96,96,142,76,108,76,193,141,144,65,128,18,138,7,217,162,85,119,94,84,138,72,109,64,88,193,141,64,128,23,148,7,217,162,144,77,124,84,96,144,144,92,82,112,105,193,141,78,86,92,73,128,18,158,7,217,162,102,84,79,138,144,83,106,123,100,193,141,64,128,22,168,7,217,162,89,122,72,109,134,144,83,103,116,71,193,141,72,88,72,105,128,20,178,7,217,162,144,75,116,92,119,142,91,87,65,119,193,141,144,65,128,19,188,7,217,162,144,73,111,123,104,137,74,106,82,84,193,141,64,128,21,198,7,217,162,101,75,86,90,134,85,123,79,122,193,141,69,75,70,90,128,24,208,7,217,162,144,95,77,96,104,143,144,89,75,89,102,193,141,144,120,88,122,78,128,23,218,7,217,162,144,87,81,98,114,136,72,100,102,77,193,141,144,95,117,68,125,128,19,228,7,217,162,144,86,100,123,105,141,84,104,123,81,193,141,64,128,20,238,7,217,162,144,80,86,104,114,142,94,89,106,82,193,141,144,65,128,22,248,7,217,162,144,96,98,93,96,143,99,85,108,82,193,141,66,115,78,114,128,19,2,8,217,162,144,67,123,112,140,144,92,123,91,99,193,141,64,128,19,12,8,217,162,144,91,108,111,93,140,96,85,94,193,141,144,65,128,22,22,8,217,162,88,64,121,109,143,144,86,123,92,120,193,141,65,69,92,117,128,18,32,8,217,162,81,111,91,88,141,90,72,108,64,193,141,64,128,19,42,8,217,162,81,127,106,117,141,144,73,82,94,97,193,141,64,128,21,52,8,217,162,144,70,85,93,107,142,144,97,85,76,117,193,141,144,65,128,23,62,8,217,162,144,97,127,121,100,143,81,89,118,95,193,141,144,80,102,67,69,128,19,72,8,217,162,144,86,115,106,81,139,73,64,99,64,193,141,64,128,19,82,8,217,162,144,94,111,106,106,141,86,105,110,94,193,141,64,128,19,92,8,217,162,144,93,104,86,85,137,144,105,86,112,193,141,64,128,24,102,8,217,162,144,66,108,101,98,134,144,84,65,68,113,193,141,144,86,109,101,114,128,21,112,8,217,162,91,76,113,76,149,93,80,102,74,193,141,91,76,113,76,128,19,122,8,217,162,101,84,122,117,142,95,90,111,122,193,141,144,65,128,21,132,8,217,162,144,84,119,80,92,139,144,87,83,104,96,193,141,144,65,128,20,142,8,217,162,101,105,101,71,148,144,94,84,67,75,193,141,144,65,128,21,152,8,217,162,94,112,104,79,149,74,127,65,66,193,141,72,114,102,75,128,19,162,8,217,162,100,82,96,121,140,144,90,112,93,75,193,141,64,128,19,172,8,217,162,144,68,96,104,72,141,87,107,122,90,193,141,64,128,23,182,8,217,162,144,90,70,74,111,135,144,96,85,83,99,193,141,144,68,66,99,128,23,192,8,217,162,82,123,92,77,136,144,100,105,105,93,193,141,144,118,82,117,82,128,19,202,8,217,162,99,66,64,101,138,144,69,95,105,88,193,141,64,128,21,212,8,217,162,144,77,126,102,126,139,144,90,69,127,126,193,141,144,65,128,18,222,8,217,162,74,67,120,97,137,85,87,122,96,193,141,64,128,18,232,8,217,162,78,81,127,80,141,102,66,118,118,193,141,64,128,19,242,8,217,162,144,66,117,121,102,137,97,125,118,64,193,141,64,128,21,252,8,217,162,144,83,65,106,64,142,144,97,117,126,113,193,141,144,65,128,21,6,9,217,162,95,112,107,68,149,78,76,92,94,193,141,67,87,114,72,128,22,16,9,217,162,144,73,74,84,98,134,88,103,72,70,193,141,80,101,72,70,128,24,26,9,217,162,144,76,77,108,106,143,144,68,113,81,90,193,141,144,80,126,126,68,128,20,36,9,217,162,144,96,111,103,71,138,77,77,119,82,193,141,144,65,128,20,46,9,217,162,144,80,125,87,69,137,144,73,89,118,83,193,141,64,128,20,56,9,217,162,77,114,117,127,142,144,78,75,74,111,193,141,144,65,128,19,66,9,217,162,86,82,76,124,142,89,95,77,68,193,141,144,65,128,20,76,9,217,162,144,97,90,117,75,141,144,97,78,123,82,193,141,64,128,23,86,9,217,162,99,76,119,124,136,144,74,125,82,109,193,141,144,105,113,101,81,128,19,96,9,217,162,144,88,69,83,79,137,91,96,117,108,193,141,64,128,21,106,9,217,162,144,69,118,80,95,142,144,76,122,88,75,193,141,144,65,128,23,116,9,217,162,144,99,71,80,79,136,91,119,124,70,193,141,144,120,112,108,73,128,23,126,9,217,162,144,65,83,103,64,135,144,76,95,87,77,193,141,144,83,70,77,128,23,136,9,217,162,144,87,69,64,87,136,144,69,100,94,115,193,141,82,97,94,100,128,19,146,9,217,162,68,66,80,83,138,144,68,73,111,126,193,141,64,128,20,156,9,217,162,144,98,121,79,89,138,68,64,116,77,193,141,144,65,128,22,166,9,217,162,144,100,100,114,126,135,100,67,74,78,193,141,144,100,112,114,128,21,176,9,217,162,93,69,114,70,135,92,64,74,120,193,141,93,69,122,126,128,23,186,9,217,162,81,99,114,68,143,144,97,79,65,69,193,141,144,79,107,79,65,128,18,196,9,217,162,73,90,80,85,139,79,79,67,105,193,141,64,128,18,206,9,217,162,98,98,102,68,141,66,122,101,120,193,141,64,128,21,216,9,217,162,76,109,85,109,144,73,116,79,109,193,141,66,121,70,64,128,20,226,9,217,162,144,99,75,77,104,142,81,111,73,81,193,141,144,65,128,19,236,9,217,162,83,115,87,83,142,85,93,70,66,193,141,144,65,128,20,246,9,217,162,144,93,111,84,80,138,144,98,90,79,124,193,141,64,128,22,0,10,217,162,68,116,79,127,134,144,98,123,85,77,193,141,68,68,74,115,128,20,10,10,217,162,144,72,90,80,69,140,97,67,90,95,193,141,144,65,128,20,20,10,217,162,93,122,78,120,139,144,92,126,85,83,193,141,144,65,128,18,30,10,217,162,66,94,96,113,137,97,126,80,113,193,141,64,128,21,40,10,217,162,83,64,96,126,136,94,70,91,121,193,141,77,70,123,71,128,21,50,10,217,162,78,69,103,67,149,66,117,96,94,193,141,66,111,101,75,128,20,60,10,217,162,71,74,117,80,137,144,89,100,70,78,193,141,144,65,128,20,70,10,217,162,75,106,94,110,148,144,69,92,114,122,193,141,144,66,128,18,80,10,217,162,87,126,96,73,138,144,68,85,65,193,141,64,128,22,90,10,217,162,144,82,104,76,123,134,78,109,87,73,193,141,76,69,83,65,128,21,100,10,217,162,95,126,72,103,144,93,125,74,74,193,141,66,64,126,93,128,21,110,10,217,162,91,72,109,80,143,89,108,112,113,193,141,116,117,94,65,128,23,120,10,217,162,80,120,87,125,136,144,94,68,75,98,193,141,144,78,124,92,93,128,20,130,10,217,162,144,91,118,108,112,148,144,66,78,91,104,193,141,76,128,21,140,10,217,162,77,104,79,73,149,69,115,114,76,193,141,66,64,106,113,128,20,150,10,217,162,73,115,98,72,148,144,67,121,123,85,193,141,144,66,128,21,160,10,217,162,78,80,125,95,135,79,65,88,87,193,141,79,81,125,95,128,19,170,10,217,162,144,74,82,73,99,141,85,73,65,75,193,141,64,128,19,180,10,217,162,86,93,118,149,93,71,125,97,193,141,86,93,118,128,21,190,10,217,162,144,97,82,85,89,142,144,86,99,120,69,193,141,144,65,128,21,200,10,217,162,144,93,105,115,90,139,144,100,89,107,73,193,141,144,65,128,19,210,10,217,162,144,77,91,96,105,139,75,65,112,89,193,141,64,128,24,220,10,217,162,144,79,98,95,93,134,144,85,115,86,85,193,141,144,95,115,95,93,128,21,230,10,217,162,96,123,96,110,136,77,70,111,118,193,141,109,125,79,88,128,18,240,10,217,162,97,106,74,70,141,80,123,107,124,193,141,64,128,23,250,10,217,162,144,84,82,106,95,144,93,64,67,67,193,141,144,113,82,109,98,128,24,4,11,217,162,144,84,80,65,106,135,144,90,73,92,76,193,141,144,80,64,64,74,128,23,14,11,217,162,144,73,119,102,97,136,144,74,120,68,104,193,141,67,79,98,71,128,20,24,11,217,162,144,83,111,105,71,148,144,96,66,122,118,193,141,64,128,20,34,11,217,162,144,82,70,84,93,142,102,65,72,77,193,141,144,65,128,23,44,11,217,162,144,85,91,109,64,144,98,119,75,98,193,141,144,120,82,120,98,128,18,54,11,217,162,95,64,64,73,138,77,124,92,83,193,141,64,128,20,64,11,217,162,144,69,74,82,92,138,144,85,73,111,72,193,141,64,128,20,74,11,217,162,144,68,98,91,75,148,144,75,98,85,80,193,141,64,128,19,84,11,217,162,86,82,72,109,139,83,76,80,85,193,141,144,65,128,19,94,11,217,162,77,95,67,126,142,89,77,121,109,193,141,144,65,128,20,104,11,217,162,100,105,86,100,139,144,80,96,117,69,193,141,144,65,128,20,114,11,217,162,144,91,68,126,89,148,144,90,102,121,108,193,141,65,128,20,124,11,217,162,144,91,81,80,84,142,95,83,76,102,193,141,144,65,128,21,134,11,217,162,144,83,75,76,99,137,144,96,71,83,103,193,141,144,65,128,20,144,11,217,162,144,95,117,110,102,142,101,67,123,80,193,141,144,65,128,19,154,11,217,162,76,69,125,121,138,144,94,120,125,101,193,141,64,128,21,164,11,217,162,77,103,84,83,149,69,91,107,65,193,141,66,111,126,81,128,20,174,11,217,162,144,85,84,105,75,140,144,92,73,104,78,193,141,64,128,18,184,11,217,162,73,97,115,125,148,71,78,81,94,193,141,65,128,22,194,11,217,162,95,120,117,123,134,144,79,103,68,70,193,141,80,88,113,122,128,23,204,11,217,162,68,100,113,99,135,144,94,127,116,78,193,141,144,90,91,68,77,128,20,214,11,217,162,74,115,74,122,139,144,69,120,90,84,193,141,144,65,128,21,224,11,217,162,99,120,72,65,143,144,72,79,89,193,141,99,111,120,104,128,20,234,11,217,162,101,93,117,119,137,144,81,118,103,96,193,141,144,65,128,23,244,11,217,162,144,70,114,80,81,144,144,76,87,125,92,193,141,69,101,109,75,128,24,254,11,217,162,144,83,73,117,102,134,144,91,78,98,121,193,141,144,91,79,119,126,128,21,8,12,217,162,70,75,78,127,149,80,90,74,121,193,141,70,75,78,127,128,23,18,12,217,162,144,86,126,92,112,144,144,89,81,86,93,193,141,66,82,121,109,128,19,28,12,217,162,144,70,111,115,99,148,78,122,124,119,193,141,64,128,18,38,12,217,162,77,111,110,93,141,69,86,106,96,193,141,64,128,19,48,12,217,162,97,88,74,78,139,88,74,72,74,193,141,144,65,128,23,58,12,217,162,144,75,82,79,93,136,144,71,76,106,97,193,141,76,94,101,124,128,20,68,12,217,162,144,96,103,122,83,148,80,81,68,124,193,141,144,66,128,21,78,12,217,162,144,69,78,108,93,142,144,85,106,72,115,193,141,144,65,128,21,88,12,217,162,86,114,114,103,143,82,113,68,100,193,141,105,99,119,75,128,23,98,12,217,162,144,75,86,122,100,135,80,121,101,104,193,141,144,75,70,90,68,128,21,108,12,217,162,144,87,90,101,80,138,144,77,71,105,123,193,141,144,65,128,23,118,12,217,162,144,101,72,80,92,143,78,127,64,89,193,141,144,86,73,80,67,128,23,128,12,217,162,144,86,67,103,65,136,144,93,100,82,107,193,141,75,103,117,106,128,19,138,12,217,162,144,73,113,126,115,141,92,95,84,72,193,141,64,128,20,148,12,217,162,144,77,69,86,83,140,144,96,72,85,97,193,141,64,128,24,158,12,217,162,144,89,81,114,69,144,144,87,83,98,95,193,141,144,65,126,79,102,128,23,168,12,217,162,144,91,118,102,120,136,144,77,92,64,111,193,141,86,106,102,89,128,20,178,12,217,162,144,81,125,118,127,138,144,99,103,84,67,193,141,64,128,21,188,12,217,162,144,73,103,94,143,86,84,108,123,193,141,86,75,69,93,128,21,198,12,217,162,99,111,88,78,135,76,84,90,81,193,141,111,127,90,95,128,22,208,12,217,162,144,92,113,64,136,76,70,123,123,193,141,144,76,90,75,69,128,19,218,12,217,162,71,73,86,100,148,144,75,89,113,119,193,141,64,128,20,228,12,217,162,144,85,76,113,105,137,144,69,121,105,127,193,141,64,128,24,238,12,217,162,144,99,71,94,119,144,144,97,82,94,93,193,141,144,65,117,64,90,128,22,248,12,217,162,144,65,71,105,83,135,67,120,114,82,193,141,144,71,73,65,128,21,2,13,217,162,75,99,99,122,135,85,68,96,99,193,141,95,103,99,123,128,20,12,13,217,162,144,95,111,114,75,141,144,75,67,77,112,193,141,64,128,20,22,13,217,162,144,70,96,83,93,142,75,88,127,90,193,141,144,65,128,23,32,13,217,162,144,71,82,78,88,136,144,73,92,102,116,193,141,78,78,104,100,128,21,42,13,217,162,86,84,76,78,144,85,78,67,73,193,141,65,70,73,69,128,21,52,13,217,162,90,115,117,65,149,78,97,66,125,193,141,76,82,114,68,128,23,62,13,217,162,144,81,86,74,93,136,144,91,74,92,76,193,141,74,92,86,87,128,21,72,13,217,162,144,70,120,94,100,137,144,75,108,99,123,193,141,144,65,128,22,82,13,217,162,119,122,70,135,144,93,65,75,123,193,141,144,93,64,65,121,128,23,92,13,217,162,144,78,66,123,84,136,77,107,68,65,193,141,144,67,105,127,83,128,21,102,13,217,162,144,69,71,126,98,137,144,84,110,111,77,193,141,144,65,128,21,112,13,217,162,72,124,99,65,149,88,83,125,79,193,141,72,124,99,65,128,20,122,13,217,162,81,66,64,123,142,144,80,65,84,72,193,141,144,65,128,20,132,13,217,162,144,89,67,112,123,137,144,85,96,65,100,193,141,64,128,21,142,13,217,162,74,110,119,108,149,100,82,117,98,193,141,74,110,119,108,128,23,152,13,217,162,144,92,101,101,119,136,83,119,87,116,193,141,144,79,82,114,67,128,21,162,13,217,162,82,66,116,82,134,83,111,95,121,193,141,82,66,84,80,128,21,172,13,217,162,144,74,123,117,112,137,144,100,67,87,73,193,141,144,65,128,18,182,13,217,162,81,111,120,92,138,70,118,97,96,193,141,64,128,20,192,13,217,162,144,72,73,64,82,148,144,92,103,116,103,193,141,64,128,24,202,13,217,162,144,96,95,106,110,143,144,92,68,108,66,193,141,144,124,100,86,112,128,19,212,13,217,162,97,126,64,78,141,144,96,74,64,88,193,141,64,128,19,222,13,217,162,86,111,101,114,140,144,87,102,111,112,193,141,64,128,19,232,13,217,162,90,103,95,86,141,144,81,123,112,103,193,141,64,128,22,242,13,217,162,144,80,66,66,99,134,66,80,119,93,193,141,66,80,117,93,128,21,252,13,217,162,144,74,105,97,109,142,144,85,73,102,103,193,141,144,65,128,19,6,14,217,162,144,83,76,82,120,148,87,112,94,105,193,141,64,128,21,16,14,217,162,144,96,97,86,90,142,144,100,121,90,95,193,141,144,65,128,21,26,14,217,162,96,98,64,85,149,88,117,108,81,193,141,71,108,84,68,128,21,36,14,217,162,89,76,93,121,149,85,101,83,125,193,141,67,103,73,124,128,19,46,14,217,162,84,77,108,76,142,83,116,120,66,193,141,144,65,128,23,56,14,217,162,144,68,84,102,90,144,76,123,117,102,193,141,144,81,80,92,64,128,22,66,14,217,162,144,77,67,122,71,134,70,74,106,123,193,141,66,72,64,121,128,19,76,14,217,162,67,105,74,66,148,144,85,107,93,107,193,141,64,128,21,86,14,217,162,68,110,73,84,136,80,77,73,92,193,141,84,99,64,72,128,19,96,14,217,162,144,78,72,122,102,137,69,126,84,82,193,141,64,128,20,106,14,217,162,67,110,88,89,134,68,98,118,98,193,141,98,80,64,128,20,116,14,217,162,144,111,109,118,137,144,69,83,91,105,193,141,144,65,128,20,126,14,217,162,83,102,120,105,142,144,87,102,82,111,193,141,144,65,128,21,136,14,217,162,101,115,93,78,149,77,123,112,78,193,141,73,123,124,114,128,23,146,14,217,162,101,77,114,84,135,144,89,125,76,119,193,141,144,88,112,76,99,128,18,156,14,217,162,71,85,109,102,141,85,125,123,109,193,141,64,128,21,166,14,217,162,144,93,90,115,126,142,144,68,80,106,113,193,141,144,65,128,21,176,14,217,162,92,115,86,115,149,84,66,96,105,193,141,72,112,118,74,128,19,186,14,217,162,97,108,69,114,142,78,81,66,120,193,141,144,65,128,21,196,14,217,162,144,65,82,124,76,139,144,85,90,67,82,193,141,144,65,128,20,206,14,217,162,92,91,87,117,148,144,78,115,121,100,193,141,144,65,128,18,216,14,217,162,72,125,113,71,139,83,97,76,122,193,141,64,128,21,226,14,217,162,92,87,118,76,144,88,64,72,126,193,141,68,87,109,78,128,21,236,14,217,162,144,68,88,70,99,143,68,124,118,66,193,141,100,111,95,128,19,246,14,217,162,91,113,123,100,138,144,77,90,101,77,193,141,64,128,20,0,15,217,162,144,97,114,117,85,137,144,77,120,86,74,193,141,64,128,19,10,15,217,162,144,71,106,105,72,137,100,99,127,85,193,141,64,128,19,20,15,217,162,78,101,76,112,142,75,73,114,117,193,141,144,65,128,19,30,15,217,162,144,90,112,78,93,137,87,70,119,77,193,141,64,128,20,40,15,217,162,93,101,70,115,134,66,73,96,81,193,141,65,64,81,128,23,50,15,217,162,144,68,105,81,100,144,71,98,108,94,193,141,144,76,75,126,66,128,21,60,15,217,162,144,89,77,92,95,138,144,79,89,126,101,193,141,144,65,128,22,70,15,217,162,88,88,100,120,144,144,85,119,111,103,193,141,110,80,84,95,128,21,80,15,217,162,65,109,74,78,143,77,119,84,87,193,141,79,100,94,101,128,21,90,15,217,162,101,121,84,79,135,67,124,74,117,193,141,103,125,94,127,128,21,100,15,217,162,93,111,121,105,134,65,70,65,117,193,141,65,70,65,97,128,20,110,15,217,162,144,101,121,106,79,139,144,86,68,107,103,193,141,64,128,18,120,15,217,162,92,69,121,74,141,100,123,67,100,193,141,64,128,20,130,15,217,162,144,68,126,76,65,140,80,103,113,112,193,141,144,65,128,18,140,15,217,162,66,73,115,114,139,86,114,92,101,193,141,64,128,22,150,15,217,162,144,85,102,91,82,134,77,121,67,121,193,141,72,89,64,104,128,18,160,15,217,162,77,98,124,121,141,81,79,110,85,193,141,64,128,21,170,15,217,162,84,124,121,104,143,100,113,70,87,193,141,121,109,127,127,128,19,180,15,217,162,96,120,116,81,137,69,102,106,64,193,141,144,65,128,18,190,15,217,162,95,78,81,102,141,80,106,124,69,193,141,64,128,19,200,15,217,162,79,126,70,96,142,68,98,81,105,193,141,144,65,128,24,210,15,217,162,144,93,98,78,78,144,144,87,120,91,64,193,141,144,69,105,115,78,128,20,220,15,217,162,144,94,83,93,85,139,144,78,119,64,64,193,141,64,128,18,230,15,217,162,98,90,100,66,141,98,70,83,107,193,141,64,128,19,240,15,217,162,97,118,93,84,141,144,85,80,104,87,193,141,64,128,19,250,15,217,162,144,77,64,71,125,141,99,96,79,114,193,141,64,128,19,4,16,217,162,100,80,91,75,140,144,95,99,113,97,193,141,64,128,20,14,16,217,162,144,90,127,84,91,148,144,93,124,85,93,193,141,64,128,22,24,16,217,162,92,96,80,100,144,144,92,83,104,106,193,141,120,115,121,78,128,24,34,16,217,162,144,85,88,67,69,134,144,78,84,97,92,193,141,144,95,92,99,96,128,20,44,16,217,162,93,109,104,124,148,144,67,114,118,69,193,141,144,71,128,20,54,16,217,162,87,72,112,84,148,144,77,105,114,97,193,141,144,65,128,22,64,16,217,162,144,85,124,80,109,136,144,85,75,107,116,193,141,119,123,95,128,22,74,16,217,162,78,74,71,124,144,79,87,106,79,193,141,144,65,77,98,83,128,24,84,16,217,162,144,98,121,93,74,134,144,92,126,72,81,193,141,144,126,127,93,90,128,21,94,16,217,162,79,100,82,124,144,76,70,101,104,193,141,67,93,109,84,128,21,104,16,217,162,144,93,105,64,101,142,144,87,127,95,113,193,141,144,65,128,20,114,16,217,162,100,71,115,107,144,99,116,94,108,193,141,83,84,127,128,19,124,16,217,162,95,102,82,97,141,144,83,67,70,121,193,141,64,128,20,134,16,217,162,79,78,102,87,142,144,91,98,70,78,193,141,144,65,128,23,144,16,217,162,144,83,119,85,87,136,144,71,90,71,110,193,141,84,109,82,123,128,18,154,16,217,162,89,70,126,142,80,110,100,80,193,141,144,65,128,19,164,16,217,162,144,89,68,107,107,137,91,88,78,92,193,141,64,128,21,174,16,217,162,79,104,72,90,135,95,107,102,72,193,141,95,107,110,90,128,20,184,16,217,162,144,76,88,93,85,148,144,80,90,65,126,193,141,64,128,18,194,16,217,162,80,79,117,88,148,97,110,82,103,193,141,64,128,19,204,16,217,162,144,72,121,83,103,148,94,67,101,65,193,141,64,128,21,214,16,217,162,96,86,72,113,149,79,102,85,112,193,141,65,73,93,81,128,18,224,16,217,162,99,97,102,80,148,87,96,104,77,193,141,65,128,18,234,16,217,162,90,75,90,82,138,81,79,84,119,193,141,64,128,20,244,16,217,162,86,105,113,83,149,86,101,98,106,193,141,68,78,105,128,20,254,16,217,162,144,70,95,126,119,138,68,64,95,83,193,141,144,65,128,21,8,17,217,162,144,97,64,104,103,142,144,88,81,99,78,193,141,144,65,128,19,18,17,217,162,99,83,104,95,141,144,92,110,119,85,193,141,64,128,21,28,17,217,162,101,66,118,126,135,93,67,85,83,193,141,125,67,119,127,128,20,38,17,217,162,144,101,110,86,89,148,144,98,64,72,65,193,141,65,128,18,48,17,217,162,75,124,72,121,148,88,113,96,126,193,141,64,128,21,58,17,217,162,77,93,116,81,143,75,89,95,71,193,141,88,119,83,88,128,20,68,17,217,162,144,83,102,110,84,148,144,68,75,106,81,193,141,68,128,24,78,17,217,162,144,99,127,123,77,134,144,84,125,79,111,193,141,144,119,127,127,111,128,23,88,17,217,162,144,76,91,69,74,136,144,73,72,86,86,193,141,69,83,83,92,128,20,98,17,217,162,69,74,116,82,139,144,93,127,117,64,193,141,144,65,128,20,108,17,217,162,144,73,89,120,70,140,76,71,115,122,193,141,144,65,128,23,118,17,217,162,144,86,89,82,98,136,144,96,78,93,81,193,141,118,87,79,113,128,20,128,17,217,162,85,70,99,127,137,144,94,71,121,102,193,141,144,65,128,20,138,17,217,162,144,101,82,75,81,148,83,80,95,124,193,141,144,65,128,19,148,17,217,162,144,74,113,83,119,139,93,94,126,81,193,141,64,128,19,158,17,217,162,69,104,114,88,142,79,112,126,103,193,141,144,65,128,21,168,17,217,162,81,100,116,64,135,88,108,106,109,193,141,89,108,126,109,128,22,178,17,217,162,144,91,109,73,124,143,94,103,83,193,141,144,91,78,98,105,128,24,188,17,217,162,144,73,99,78,105,143,144,93,121,91,78,193,141,144,103,92,105,119,128,21,198,17,217,162,73,71,100,99,149,94,65,78,100,193,141,73,71,100,99,128,20,208,17,217,162,144,77,70,93,112,140,72,70,112,115,193,141,144,65,128,20,218,17,217,162,67,66,85,86,137,144,77,120,100,69,193,141,144,65,128,22,228,17,217,162,82,110,120,86,144,86,69,90,72,193,141,144,67,86,97,114,128,22,238,17,217,162,99,112,95,95,134,144,92,101,121,115,193,141,99,80,70,77,128,23,248,17,217,162,66,109,85,67,143,144,91,121,70,95,193,141,144,89,75,113,92,128,21,2,18,217,162,92,91,70,127,149,80,73,85,66,193,141,76,81,113,125,128,23,12,18,217,162,144,95,92,125,124,143,82,69,123,87,193,141,144,77,87,66,101,128,21,22,18,217,162,83,124,83,103,136,74,84,66,84,193,141,89,104,81,115,128,21,32,18,217,162,108,116,120,144,90,94,81,66,193,141,144,89,113,92,74,128,21,42,18,217,162,97,122,103,103,149,100,110,125,118,193,141,97,122,103,103,128,23,52,18,217,162,93,120,108,68,135,144,71,76,86,103,193,141,144,66,68,82,99,128,20,62,18,217,162,144,75,85,110,121,140,72,110,110,74,193,141,144,65,128,21,72,18,217,162,80,73,118,88,149,96,69,101,83,193,141,80,73,118,88,128,21,82,18,217,162,72,75,83,125,136,94,91,92,84,193,141,86,80,79,105,128,22,92,18,217,162,144,68,118,97,101,134,74,67,108,124,193,141,74,65,76,88,128,25,102,18,217,162,144,100,89,91,67,143,144,93,81,75,94,193,141,144,65,65,106,102,97,128,19,112,18,217,162,98,95,108,100,137,73,83,126,117,193,141,144,65,128,23,122,18,217,162,144,81,118,120,123,136,74,91,87,84,193,141,144,91,109,111,111,128,21,132,18,217,162,144,92,112,111,77,142,144,76,100,120,98,193,141,144,65,128,24,142,18,217,162,144,82,81,78,103,143,144,68,114,89,97,193,141,144,87,67,104,72,128,24,152,18,217,162,144,73,110,107,107,134,144,84,84,104,85,193,141,144,93,126,107,127,128,21,162,18,217,162,144,67,68,108,123,137,144,74,124,71,99,193,141,144,65,128,22,172,18,217,162,101,74,78,114,134,144,65,70,86,107,193,141,100,72,72,80,128,19,182,18,217,162,85,82,125,113,137,67,126,116,103,193,141,144,65,128,20,192,18,217,162,144,94,122,96,127,137,144,73,78,78,89,193,141,64,128,18,202,18,217,162,71,106,90,113,148,79,95,88,115,193,141,64,128,20,212,18,217,162,144,101,123,85,89,139,144,91,127,87,95,193,141,64,128,19,222,18,217,162,85,115,68,80,140,87,65,106,126,193,141,144,65,128,21,232,18,217,162,86,86,124,108,149,80,72,91,67,193,141,70,78,97,105,128,21,242,18,217,162,144,76,97,109,115,142,144,81,66,69,114,193,141,144,65,128,21,252,18,217,162,77,111,88,77,149,85,84,92,107,193,141,77,111,88,77,128,20,6,19,217,162,144,78,78,110,104,139,144,67,108,73,125,193,141,64,128,23,16,19,217,162,68,111,119,110,143,144,82,75,66,97,193,141,144,77,91,74,115,128,24,26,19,217,162,144,68,76,73,81,143,144,66,126,114,90,193,141,144,71,74,123,107,128,19,36,19,217,162,93,75,64,103,139,81,122,84,127,193,141,144,65,128,21,46,19,217,162,144,95,110,65,76,134,87,124,69,105,193,141,80,68,96,128,19,56,19,217,162,144,81,114,91,109,139,79,85,114,106,193,141,64,128,21,66,19,217,162,76,84,78,69,149,72,90,98,84,193,141,67,121,107,113,128,22,76,19,217,162,144,97,78,69,118,134,82,124,111,120,193,141,82,112,106,72,128,18,86,19,217,162,94,108,73,88,140,90,69,82,105,193,141,64,128,20,96,19,217,162,144,65,127,75,120,148,144,72,80,68,71,193,141,64,128,19,106,19,217,162,89,114,70,105,137,72,72,107,110,193,141,144,65,128,23,116,19,217,162,144,75,73,111,71,136,90,106,114,102,193,141,144,81,99,93,97,128,20,126,19,217,162,69,82,123,114,139,144,90,65,115,107,193,141,144,65,128,24,136,19,217,162,144,75,88,117,117,134,144,95,68,110,72,193,141,144,95,92,127,120,128,21,146,19,217,162,75,69,70,101,134,91,92,71,81,193,141,75,68,70,65,128,18,156,19,217,162,76,124,109,142,65,99,91,100,193,141,144,65,128,18,166,19,217,162,73,98,99,110,139,88,112,65,75,193,141,64,128,23,176,19,217,162,89,115,127,123,136,144,71,80,64,93,193,141,144,94,99,127,104,128,24,186,19,217,162,144,89,104,110,70,135,144,71,83,108,68,193,141,144,65,64,108,66,128,19,196,19,217,162,144,72,110,83,83,139,97,109,83,64,193,141,64,128,19,206,19,217,162,144,95,86,72,88,141,84,67,111,125,193,141,64,128,19,216,19,217,162,144,76,126,90,85,139,80,119,118,112,193,141,64,128,24,226,19,217,162,144,75,73,82,106,143,144,76,91,103,67,193,141,144,87,100,121,109,128,5,236,19,219,128,0
>5008	6f 8d 4b 43 6a 5d c1 8d 40 80 16 6e 00 d9 a2 90
>5018	50 76 65 40 86 5d 43 4b 5c c1 8d 4d 41 4b 40 80
>5028	16 78 00 d9 a2 62 55 5d 42 87 90 62 71 42 5f c1
>5038	8d 90 60 42 5d 80 15 82 00 d9 a2 46 7c 54 41 8f
>5048	58 60 69 5e c1 8d 5f 5c 7d 5f 80 13 8c 00 d9 a2
>5058	90 5e 44 52 7c 8d 57 52 47 70 c1 8d 40 80 15 96
>5068	00 d9 a2 4f 67 52 4e 87 54 6a 77 65 c1 8d 5f 6f
>5078	77 6f 80 15 a0 00 d9 a2 90 5b 4c 51 86 57 6f 78
>5088	77 c1 8d 57 64 70 67 80 15 aa 00 d9 a2 4c 47 47
>5098	76 87 53 7e 46 6f c1 8d 5f 7f 47 7f 80 15 b4 00
>50a8	d9 a2 44 43 49 69 95 5b 50 6b 44 c1 8d 44 43 49
>50b8	69 80 15 be 00 d9 a2 52 73 48 6b 8f 51 69 58 59
>50c8	c1 8d 64 5c 61 44 80 18 c8 00 d9 a2 90 60 4e 5a
>50d8	4d 8f 90 58 6a 68 56 c1 8d 90 78 79 42 63 80 13
>50e8	d2 00 d9 a2 55 44 7e 66 8d 90 60 5f 45 67 c1 8d
>50f8	40 80 12 dc 00 d9 a2 45 58 69 7a 8b 5a 75 79 7d
>5108	c1 8d 40 80 14 e6 00 d9 a2 90 55 59 44 57 8c 5d
>5118	48 51 40 c1 8d 90 41 80 12 f0 00 d9 a2 4c 67 52
>5128	50 94 48 67 77 5e c1 8d 41 80 14 fa 00 d9 a2 90
>5138	4c 77 64 5a 94 41 5d 77 60 c1 8d 90 48 80 11 04
>5148	01 d9 a2 45 52 67 8d 54 4b 63 5f c1 8d 40 80 17
>5158	0e 01 d9 a2 90 4a 67 6a 61 88 90 5a 61 40 41 c1
>5168	8d 50 46 6a 60 80 16 18 01 d9 a2 90 4a 75 5a 7b
>5178	86 65 4f 58 53 c1 8d 65 4a 40 41 80 18 22 01 d9
>5188	a2 90 56 54 48 64 90 90 51 7c 7e 5e c1 8d 90 44
>5198	57 4a 46 80 14 2c 01 d9 a2 90 52 5d 7c 5e 8e 4e
>51a8	58 6e 70 c1 8d 90 41 80 14 36 01 d9 a2 55 57 61
>51b8	4c 94 90 44 63 59 c1 8d 90 44 6c 80 15 40 01 d9
>51c8	a2 90 61 40 46 46 8e 90 55 57 60 50 c1 8d 90 41
>51d8	80 13 4a 01 d9 a2 4c 43 43 6b 8c 57 67 43 61 c1
>51e8	8d 90 41 80 14 54 01 d9 a2 90 5e 45 58 62 94 90
>51f8	49 5d 70 6f c1 8d 43 80 13 5e 01 d9 a2 90 4f 5d
>5208	61 41 94 64 68 47 42 c1 8d 40 80 12 68 01 d9 a2
>5218	54 70 75 7a 8a 4a 54 64 5e c1 8d 40 80 15 72 01
>5228	d9 a2 90 61 47 7e 41 8a 90 4a 79 61 4a c1 8d 90
>5238	41 80 17 7c 01 d9 a2 90 5b 6c 6d 57 88 90 57 56
>5248	7d 6e c1 8d 4c 7a 50 7b 80 15 86 01 d9 a2 90 5f
>5258	64 5c 4a 8a 90 57 75 75 6c c1 8d 90 41 80 15 90
>5268	01 d9 a2 4a 6b 79 49 88 5a 67 6b 59 c1 8d 50 4c
>5278	52 50 80 15 9a 01 d9 a2 5e 77 54 5d 95 52 55 43
>5288	64 c1 8d 4c 62 50 79 80 12 a4 01 d9 a2 5b 74 74
>5298	74 94 51 56 5b 48 c1 8d 41 80 15 ae 01 d9 a2 65
>52a8	52 5e 5d 95 5c 4a 60 4e c1 8d 49 47 7e 4f 80 13
>52b8	b8 01 d9 a2 63 60 54 7b 8e 42 7a 72 6f c1 8d 90
>52c8	41 80 12 c2 01 d9 a2 4e 4b 78 6c 8d 58 66 61 56
>52d8	c1 8d 40 80 15 cc 01 d9 a2 90 45 79 4f 5a 8b 90
>52e8	4d 48 6e 75 c1 8d 90 41 80 15 d6 01 d9 a2 53 46
>52f8	54 65 87 62 54 74 59 c1 8d 73 56 74 7d 80 16 e0
>5308	01 d9 a2 90 43 72 78 54 86 48 55 45 45 c1 8d 48
>5318	45 45 44 80 13 ea 01 d9 a2 42 53 72 7c 8c 90 5a
>5328	4d 53 78 c1 8d 40 80 14 f4 01 d9 a2 45 47 75 87
>5338	4c 5b 69 61 c1 8d 4c 5f 6f 75 80 17 fe 01 d9 a2
>5348	90 61 58 75 6c 90 90 66 48 42 62 c1 8d 44 6f 4c
>5358	76 80 17 08 02 d9 a2 90 41 4e 69 69 87 56 5d 5d
>5368	4d c1 8d 90 41 42 60 61 80 13 12 02 d9 a2 63 60
>5378	73 72 89 5e 51 4b 74 c1 8d 90 41 80 15 1c 02 d9
>5388	a2 58 5a 4b 50 95 59 6d 68 69 c1 8d 58 5a 4b 50
>5398	80 17 26 02 d9 a2 90 58 6f 7d 73 88 90 5b 75 5e
>53a8	73 c1 8d 43 5a 63 40 80 17 30 02 d9 a2 90 4e 5e
>53b8	5e 5c 88 47 4c 50 53 c1 8d 90 49 52 4e 49 80 14
>53c8	3a 02 d9 a2 90 63 66 71 5b 8a 48 49 47 52 c1 8d
>53d8	90 41 80 12 44 02 d9 a2 47 7a 50 40 89 5a 4c 64
>53e8	5f c1 8d 40 80 15 4e 02 d9 a2 5e 74 5d 7b 86 45
>53f8	45 7e 4a c1 8d 44 44 5c 4a 80 15 58 02 d9 a2 47
>5408	53 69 78 95 59 5d 7e 6b c1 8d 47 53 69 78 80 18
>5418	62 02 d9 a2 90 4f 5a 72 73 87 90 52 6d 45 71 c1
>5428	8d 90 42 48 40 71 80 12 6c 02 d9 a2 49 4d 58 6d
>5438	89 50 7e 67 64 c1 8d 40 80 14 76 02 d9 a2 90 48
>5448	61 70 69 8a 5c 74 4f 4b c1 8d 90 41 80 15 80 02
>5458	d9 a2 90 4f 75 4b 69 89 90 60 6b 57 62 c1 8d 90
>5468	41 80 15 8a 02 d9 a2 63 6f 4e 54 95 4c 66 7b 4d
>5478	c1 8d 4a 61 57 7a 80 17 94 02 d9 a2 4e 54 74 77
>5488	8f 90 5e 5b 4a 5e c1 8d 90 50 46 55 67 80 13 9e
>5498	02 d9 a2 90 4a 71 66 50 89 4f 71 61 6a c1 8d 40
>54a8	80 15 a8 02 d9 a2 90 41 72 50 62 8e 90 57 74 4a
>54b8	69 c1 8d 90 41 80 12 b2 02 d9 a2 46 50 42 51 94
>54c8	52 46 44 6f c1 8d 40 80 16 bc 02 d9 a2 5c 41 5e
>54d8	74 8f 90 50 61 55 73 c1 8d 4b 60 49 41 80 13 c6
>54e8	02 d9 a2 61 4c 4f 5d 8d 90 47 47 79 7d c1 8d 40
>54f8	80 18 d0 02 d9 a2 90 5b 60 4d 77 8f 90 48 43 43
>5508	61 c1 8d 90 63 63 51 58 80 14 da 02 d9 a2 90 61
>5518	73 7f 54 94 48 6d 76 68 c1 8d 90 43 80 17 e4 02
>5528	d9 a2 90 5a 7b 53 4c 90 46 7a 7e 4c c1 8d 90 61
>5538	76 51 58 80 14 ee 02 d9 a2 90 55 7c 72 45 8a 53
>5548	5a 4c 7d c1 8d 90 41 80 15 f8 02 d9 a2 58 46 7c
>5558	64 8f 63 72 78 76 c1 8d 7b 79 75 5a 80 13 02 03
>5568	d9 a2 90 4c 4c 6d 41 89 61 66 47 75 c1 8d 40 80
>5578	12 0c 03 d9 a2 41 5f 55 51 8b 47 52 7a 7c c1 8d
>5588	40 80 14 16 03 d9 a2 45 4a 76 75 8e 90 41 60 64
>5598	5a c1 8d 90 41 80 14 20 03 d9 a2 90 44 7d 42 46
>55a8	94 90 45 62 55 53 c1 8d 40 80 14 2a 03 d9 a2 90
>55b8	43 49 72 4e 8a 62 50 4c 58 c1 8d 90 41 80 14 34
>55c8	03 d9 a2 90 5e 64 63 61 89 90 4c 7a 69 41 c1 8d
>55d8	40 80 14 3e 03 d9 a2 90 58 4d 50 6e 8c 47 42 6e
>55e8	4c c1 8d 90 41 80 13 48 03 d9 a2 52 4c 62 70 8a
>55f8	90 45 49 52 7e c1 8d 40 80 14 52 03 d9 a2 51 4b
>5608	41 67 89 90 63 6d 4b 53 c1 8d 90 41 80 17 5c 03
>5618	d9 a2 5f 6f 42 7b 87 90 62 74 4f 71 c1 8d 90 60
>5628	50 4d 41 80 17 66 03 d9 a2 90 44 7b 68 4d 90 50
>5638	4b 56 54 c1 8d 90 55 46 7e 61 80 17 70 03 d9 a2
>5648	54 5f 70 51 88 90 53 49 7a 5a c1 8d 90 47 56 4a
>5658	49 80 14 7a 03 d9 a2 58 52 46 7f 8e 90 43 62 60
>5668	44 c1 8d 90 41 80 15 84 03 d9 a2 57 7d 5f 74 86
>5678	90 5f 44 4b 67 c1 8d 79 54 50 80 17 8e 03 d9 a2
>5688	90 4e 6e 57 71 88 90 4b 43 57 5f c1 8d 45 6d 40
>5698	6e 80 16 98 03 d9 a2 90 59 46 44 78 86 43 7e 6e
>56a8	46 c1 8d 42 78 6a 40 80 12 a2 03 d9 a2 58 5a 68
>56b8	78 8d 5c 73 57 47 c1 8d 40 80 14 ac 03 d9 a2 90
>56c8	60 68 5e 67 8c 63 5f 5e 7a c1 8d 90 41 80 13 b6
>56d8	03 d9 a2 52 5c 53 46 8a 90 56 62 43 77 c1 8d 40
>56e8	80 15 c0 03 d9 a2 45 7e 6b 59 95 44 72 76 43 c1
>56f8	8d 41 4b 75 56 80 12 ca 03 d9 a2 5d 54 48 68 8a
>5708	46 63 53 7d c1 8d 40 80 14 d4 03 d9 a2 90 51 77
>5718	5d 44 94 90 45 6f 63 53 c1 8d 43 80 15 de 03 d9
>5728	a2 5a 5f 66 62 87 5f 66 59 7f c1 8d 5f 7f 7f 7f
>5738	80 18 e8 03 d9 a2 90 53 41 5e 50 8f 90 50 78 54
>5748	7e c1 8d 90 63 79 73 4e 80 13 f2 03 d9 a2 90 41
>5758	5a 6b 54 8d 53 4d 6d 65 c1 8d 40 80 17 fc 03 d9
>5768	a2 54 78 75 4c 88 90 58 4e 63 5a c1 8d 90 4c 76
>5778	56 56 80 16 06 04 d9 a2 4b 43 6e 66 8f 90 49 54
>5788	7b 72 c1 8d 41 6e 72 74 80 13 10 04 d9 a2 90 4f
>5798	4c 53 6a 8b 5d 43 74 72 c1 8d 40 80 13 1a 04 d9
>57a8	a2 42 4f 58 7f 8d 90 65 63 41 4a c1 8d 40 80 11
>57b8	24 04 d9 a2 7f 51 75 89 5b 5b 60 5c c1 8d 40 80
>57c8	14 2e 04 d9 a2 90 5b 43 4a 62 8a 4d 42 5a 68 c1
>57d8	8d 90 41 80 17 38 04 d9 a2 90 5c 6a 53 55 90 51
>57e8	54 5f 7a c1 8d 90 6d 7e 73 4f 80 14 42 04 d9 a2
>57f8	5c 58 73 6a 94 90 42 7d 50 72 c1 8d 90 49 80 14
>5808	4c 04 d9 a2 44 6b 7b 66 8b 90 54 43 64 4f c1 8d
>5818	90 41 80 15 56 04 d9 a2 4c 4e 49 53 88 60 77 5d
>5828	6d c1 8d 6c 79 54 7e 80 13 60 04 d9 a2 90 5f 7e
>5838	70 62 8d 5c 70 42 61 c1 8d 40 80 14 6a 04 d9 a2
>5848	90 55 51 5f 5b 89 90 4a 75 50 4d c1 8d 40 80 13
>5858	74 04 d9 a2 90 5c 6b 55 72 8b 5d 72 6f 46 c1 8d
>5868	40 80 13 7e 04 d9 a2 90 62 77 5d 6d 8d 54 55 63
>5878	7e c1 8d 40 80 14 88 04 d9 a2 90 4d 7b 6c 6a 8c
>5888	90 64 43 58 66 c1 8d 40 80 18 92 04 d9 a2 90 5d
>5898	52 75 4f 86 90 5b 72 67 53 c1 8d 90 5f 72 77 5f
>58a8	80 14 9c 04 d9 a2 46 79 5a 7b 90 46 61 58 5c c1
>58b8	8d 58 42 5f 80 13 a6 04 d9 a2 55 6d 42 63 8a 66
>58c8	48 6c 76 c1 8d 90 41 80 18 b0 04 d9 a2 90 5b 7e
>58d8	49 75 87 90 5e 60 6d 77 c1 8d 90 5a 60 49 75 80
>58e8	12 ba 04 d9 a2 52 46 4b 68 94 66 40 4e 5b c1 8d
>58f8	40 80 12 c4 04 d9 a2 57 72 53 46 8a 41 54 52 60
>5908	c1 8d 40 80 17 ce 04 d9 a2 90 48 59 47 54 88 44
>5918	66 4e 78 c1 8d 90 4c 7f 49 6c 80 15 d8 04 d9 a2
>5928	5b 7a 60 7c 88 4e 6f 42 72 c1 8d 55 55 62 4e 80
>5938	16 e2 04 d9 a2 5f 61 49 7d 86 90 62 49 7a 51 c1
>5948	8d 5d 60 41 6d 80 14 ec 04 d9 a2 90 62 5e 4d 5a
>5958	8c 54 4f 78 5c c1 8d 90 41 80 13 f6 04 d9 a2 48
>5968	6a 76 6e 8c 63 5e 58 74 c1 8d 90 41 80 15 00 05
>5978	d9 a2 44 47 4c 6b 95 64 77 65 6c c1 8d 44 47 4c
>5988	6b 80 15 0a 05 d9 a2 42 71 63 6e 86 90 6f 54 76
>5998	c1 8d 42 50 63 4a 80 14 14 05 d9 a2 90 63 6d 73
>59a8	6f 8a 90 73 6e 6b c1 8d 90 41 80 13 1e 05 d9 a2
>59b8	62 59 71 49 8a 90 59 5f 7f 4a c1 8d 40 80 17 28
>59c8	05 d9 a2 44 6a 76 57 8f 90 63 77 45 79 c1 8d 90
>59d8	5f 4c 4f 62 80 14 32 05 d9 a2 90 62 60 58 7d 8d
>59e8	90 5e 66 64 66 c1 8d 40 80 17 3c 05 d9 a2 90 55
>59f8	52 4b 7a 88 5e 4e 5d 47 c1 8d 90 4b 5c 56 7f 80
>5a08	14 46 05 d9 a2 90 53 5b 76 72 8e 60 54 7c 57 c1
>5a18	8d 90 41 80 17 50 05 d9 a2 55 52 62 57 87 90 58
>5a28	66 42 4d c1 8d 90 48 64 40 49 80 12 5a 05 d9 a2
>5a38	60 6d 7b 67 8c 4b 76 6c 78 c1 8d 40 80 12 64 05
>5a48	d9 a2 43 5f 6d 7a 89 55 5a 5c 7b c1 8d 40 80 17
>5a58	6e 05 d9 a2 90 56 47 42 7d 88 90 5b 41 76 6d c1
>5a68	8d 4d 46 74 50 80 17 78 05 d9 a2 47 49 4a 6b 88
>5a78	90 50 65 43 47 c1 8d 90 57 6c 49 6e 80 13 82 05
>5a88	d9 a2 90 51 4b 42 72 89 54 64 65 4e c1 8d 40 80
>5a98	17 8c 05 d9 a2 62 7e 56 4b 87 90 4d 5a 58 5b c1
>5aa8	8d 90 4d 40 48 51 80 13 96 05 d9 a2 47 75 66 76
>5ab8	8d 90 51 40 67 6e c1 8d 40 80 16 a0 05 d9 a2 60
>5ac8	6b 43 4e 90 65 46 74 73 c1 8d 90 44 5b 71 65 80
>5ad8	14 aa 05 d9 a2 90 58 50 64 63 8a 62 4c 69 5e c1
>5ae8	8d 90 41 80 14 b4 05 d9 a2 58 41 73 7f 8b 90 64
>5af8	47 43 56 c1 8d 90 41 80 13 be 05 d9 a2 90 56 65
>5b08	41 42 8b 5f 65 69 78 c1 8d 40 80 17 c8 05 d9 a2
>5b18	90 58 63 5c 40 8f 44 75 50 4f c1 8d 90 53 6e 4b
>5b28	71 80 14 d2 05 d9 a2 4c 66 40 51 8b 90 64 4c 49
>5b38	6d c1 8d 90 41 80 18 dc 05 d9 a2 90 61 7a 5d 71
>5b48	90 90 4b 4e 64 7e c1 8d 90 56 6b 78 73 80 17 e6
>5b58	05 d9 a2 45 6f 45 5b 8f 90 5b 7a 71 77 c1 8d 90
>5b68	56 4b 6c 5c 80 13 f0 05 d9 a2 90 5b 7d 57 5a 8b
>5b78	54 7b 65 53 c1 8d 40 80 14 fa 05 d9 a2 90 64 5c
>5b88	7a 5e 8e 5c 7e 5b 51 c1 8d 90 41 80 14 04 06 d9
>5b98	a2 90 48 42 7b 77 8c 63 48 55 57 c1 8d 90 41 80
>5ba8	13 0e 06 d9 a2 62 73 4e 69 8c 90 43 4d 6e 57 c1
>5bb8	8d 40 80 17 18 06 d9 a2 90 4c 5f 64 60 88 53 6f
>5bc8	49 4e c1 8d 90 5f 70 6d 52 80 15 22 06 d9 a2 5c
>5bd8	52 75 7a 88 58 42 61 7f c1 8d 44 50 54 45 80 15
>5be8	2c 06 d9 a2 90 56 59 4c 41 8c 90 44 46 5f 77 c1
>5bf8	8d 90 41 80 16 36 06 d9 a2 57 56 7f 4c 86 90 65
>5c08	5b 6f 60 c1 8d 52 44 50 40 80 12 40 06 d9 a2 62
>5c18	54 7c 6a 94 44 45 45 53 c1 8d 48 80 14 4a 06 d9
>5c28	a2 90 45 5d 51 70 8a 90 57 55 76 55 c1 8d 40 80
>5c38	12 54 06 d9 a2 46 5c 68 67 8b 5b 6a 68 60 c1 8d
>5c48	40 80 15 5e 06 d9 a2 90 4e 4a 4b 77 8c 90 41 62
>5c58	41 6a c1 8d 90 41 80 17 68 06 d9 a2 65 42 60 62
>5c68	87 90 55 4e 7b 67 c1 8d 90 50 4c 5b 45 80 15 72
>5c78	06 d9 a2 58 74 5a 57 87 4d 71 47 49 c1 8d 5d 75
>5c88	5f 5f 80 17 7c 06 d9 a2 90 41 7f 58 6b 88 90 54
>5c98	45 43 43 c1 8d 55 7a 5b 68 80 18 86 06 d9 a2 90
>5ca8	62 75 49 6b 86 90 60 51 53 76 c1 8d 90 62 75 5c
>5cb8	40 80 13 90 06 d9 a2 90 47 6c 55 4b 8b 47 74 58
>5cc8	69 c1 8d 40 80 12 9a 06 d9 a2 42 7f 76 4c 8d 61
>5cd8	79 4c 68 c1 8d 40 80 17 a4 06 d9 a2 90 5b 61 70
>5ce8	53 90 55 67 4d 44 c1 8d 90 71 48 7d 57 80 16 ae
>5cf8	06 d9 a2 4d 56 54 47 86 90 52 53 41 7b c1 8d 4d
>5d08	44 54 45 80 15 b8 06 d9 a2 51 60 58 6f 95 47 6f
>5d18	46 4a c1 8d 42 42 4c 5b 80 12 c2 06 d9 a2 52 5e
>5d28	59 41 8b 53 63 7f 7a c1 8d 40 80 14 cc 06 d9 a2
>5d38	43 61 46 6f 8e 90 46 74 40 4c c1 8d 90 41 80 14
>5d48	d6 06 d9 a2 62 79 69 88 56 59 7d 6e c1 8d 56 7b
>5d58	44 47 80 15 e0 06 d9 a2 65 4c 56 6c 87 42 7b 61
>5d68	6e c1 8d 67 7f 77 6e 80 18 ea 06 d9 a2 90 5e 65
>5d78	53 79 86 90 4d 69 47 79 c1 8d 90 5f 6d 57 79 80
>5d88	13 f4 06 d9 a2 46 6f 4d 4d 8a 90 61 57 6c 6f c1
>5d98	8d 40 80 17 fe 06 d9 a2 90 4d 68 79 5d 90 49 64
>5da8	51 4a c1 8d 90 57 4d 4a 67 80 13 08 07 d9 a2 5e
>5db8	5b 4b 65 8a 63 7c 6b 77 c1 8d 90 41 80 15 12 07
>5dc8	d9 a2 43 56 49 43 88 49 56 6e 41 c1 8d 4a 40 67
>5dd8	42 80 13 1c 07 d9 a2 45 40 71 60 8d 90 5a 75 47
>5de8	72 c1 8d 40 80 15 26 07 d9 a2 5f 6a 53 67 90 5a
>5df8	5b 5f 7c c1 8d 45 4e 73 6b 80 18 30 07 d9 a2 90
>5e08	5a 73 76 5b 86 90 4a 62 46 58 c1 8d 90 5a 73 76
>5e18	60 80 14 3a 07 d9 a2 90 41 41 79 7c 8c 50 6a 4d
>5e28	78 c1 8d 90 41 80 14 44 07 d9 a2 90 55 74 75 76
>5e38	89 90 54 6a 70 42 c1 8d 40 80 15 4e 07 d9 a2 90
>5e48	56 73 5d 41 8a 90 45 72 46 6d c1 8d 90 41 80 17
>5e58	58 07 d9 a2 90 56 42 56 44 90 51 4f 45 61 c1 8d
>5e68	90 67 51 5b 65 80 14 62 07 d9 a2 48 79 63 53 94
>5e78	90 45 52 62 61 c1 8d 90 41 80 14 6c 07 d9 a2 90
>5e88	49 76 73 58 8d 90 46 7c 61 4d c1 8d 40 80 18 76
>5e98	07 d9 a2 90 50 53 6d 47 8f 90 52 5e 5c 71 c1 8d
>5ea8	90 62 72 49 78 80 13 80 07 d9 a2 90 5d 6a 60 60
>5eb8	8e 4c 6c 4c c1 8d 90 41 80 12 8a 07 d9 a2 55 77
>5ec8	5e 54 8a 48 6d 40 58 c1 8d 40 80 17 94 07 d9 a2
>5ed8	90 4d 7c 54 60 90 90 5c 52 70 69 c1 8d 4e 56 5c
>5ee8	49 80 12 9e 07 d9 a2 66 54 4f 8a 90 53 6a 7b 64
>5ef8	c1 8d 40 80 16 a8 07 d9 a2 59 7a 48 6d 86 90 53
>5f08	67 74 47 c1 8d 48 58 48 69 80 14 b2 07 d9 a2 90
>5f18	4b 74 5c 77 8e 5b 57 41 77 c1 8d 90 41 80 13 bc
>5f28	07 d9 a2 90 49 6f 7b 68 89 4a 6a 52 54 c1 8d 40
>5f38	80 15 c6 07 d9 a2 65 4b 56 5a 86 55 7b 4f 7a c1
>5f48	8d 45 4b 46 5a 80 18 d0 07 d9 a2 90 5f 4d 60 68
>5f58	8f 90 59 4b 59 66 c1 8d 90 78 58 7a 4e 80 17 da
>5f68	07 d9 a2 90 57 51 62 72 88 48 64 66 4d c1 8d 90
>5f78	5f 75 44 7d 80 13 e4 07 d9 a2 90 56 64 7b 69 8d
>5f88	54 68 7b 51 c1 8d 40 80 14 ee 07 d9 a2 90 50 56
>5f98	68 72 8e 5e 59 6a 52 c1 8d 90 41 80 16 f8 07 d9
>5fa8	a2 90 60 62 5d 60 8f 63 55 6c 52 c1 8d 42 73 4e
>5fb8	72 80 13 02 08 d9 a2 90 43 7b 70 8c 90 5c 7b 5b
>5fc8	63 c1 8d 40 80 13 0c 08 d9 a2 90 5b 6c 6f 5d 8c
>5fd8	60 55 5e c1 8d 90 41 80 16 16 08 d9 a2 58 40 79
>5fe8	6d 8f 90 56 7b 5c 78 c1 8d 41 45 5c 75 80 12 20
>5ff8	08 d9 a2 51 6f 5b 58 8d 5a 48 6c 40 c1 8d 40 80
>6008	13 2a 08 d9 a2 51 7f 6a 75 8d 90 49 52 5e 61 c1
>6018	8d 40 80 15 34 08 d9 a2 90 46 55 5d 6b 8e 90 61
>6028	55 4c 75 c1 8d 90 41 80 17 3e 08 d9 a2 90 61 7f
>6038	79 64 8f 51 59 76 5f c1 8d 90 50 66 43 45 80 13
>6048	48 08 d9 a2 90 56 73 6a 51 8b 49 40 63 40 c1 8d
>6058	40 80 13 52 08 d9 a2 90 5e 6f 6a 6a 8d 56 69 6e
>6068	5e c1 8d 40 80 13 5c 08 d9 a2 90 5d 68 56 55 89
>6078	90 69 56 70 c1 8d 40 80 18 66 08 d9 a2 90 42 6c
>6088	65 62 86 90 54 41 44 71 c1 8d 90 56 6d 65 72 80
>6098	15 70 08 d9 a2 5b 4c 71 4c 95 5d 50 66 4a c1 8d
>60a8	5b 4c 71 4c 80 13 7a 08 d9 a2 65 54 7a 75 8e 5f
>60b8	5a 6f 7a c1 8d 90 41 80 15 84 08 d9 a2 90 54 77
>60c8	50 5c 8b 90 57 53 68 60 c1 8d 90 41 80 14 8e 08
>60d8	d9 a2 65 69 65 47 94 90 5e 54 43 4b c1 8d 90 41
>60e8	80 15 98 08 d9 a2 5e 70 68 4f 95 4a 7f 41 42 c1
>60f8	8d 48 72 66 4b 80 13 a2 08 d9 a2 64 52 60 79 8c
>6108	90 5a 70 5d 4b c1 8d 40 80 13 ac 08 d9 a2 90 44
>6118	60 68 48 8d 57 6b 7a 5a c1 8d 40 80 17 b6 08 d9
>6128	a2 90 5a 46 4a 6f 87 90 60 55 53 63 c1 8d 90 44
>6138	42 63 80 17 c0 08 d9 a2 52 7b 5c 4d 88 90 64 69
>6148	69 5d c1 8d 90 76 52 75 52 80 13 ca 08 d9 a2 63
>6158	42 40 65 8a 90 45 5f 69 58 c1 8d 40 80 15 d4 08
>6168	d9 a2 90 4d 7e 66 7e 8b 90 5a 45 7f 7e c1 8d 90
>6178	41 80 12 de 08 d9 a2 4a 43 78 61 89 55 57 7a 60
>6188	c1 8d 40 80 12 e8 08 d9 a2 4e 51 7f 50 8d 66 42
>6198	76 76 c1 8d 40 80 13 f2 08 d9 a2 90 42 75 79 66
>61a8	89 61 7d 76 40 c1 8d 40 80 15 fc 08 d9 a2 90 53
>61b8	41 6a 40 8e 90 61 75 7e 71 c1 8d 90 41 80 15 06
>61c8	09 d9 a2 5f 70 6b 44 95 4e 4c 5c 5e c1 8d 43 57
>61d8	72 48 80 16 10 09 d9 a2 90 49 4a 54 62 86 58 67
>61e8	48 46 c1 8d 50 65 48 46 80 18 1a 09 d9 a2 90 4c
>61f8	4d 6c 6a 8f 90 44 71 51 5a c1 8d 90 50 7e 7e 44
>6208	80 14 24 09 d9 a2 90 60 6f 67 47 8a 4d 4d 77 52
>6218	c1 8d 90 41 80 14 2e 09 d9 a2 90 50 7d 57 45 89
>6228	90 49 59 76 53 c1 8d 40 80 14 38 09 d9 a2 4d 72
>6238	75 7f 8e 90 4e 4b 4a 6f c1 8d 90 41 80 13 42 09
>6248	d9 a2 56 52 4c 7c 8e 59 5f 4d 44 c1 8d 90 41 80
>6258	14 4c 09 d9 a2 90 61 5a 75 4b 8d 90 61 4e 7b 52
>6268	c1 8d 40 80 17 56 09 d9 a2 63 4c 77 7c 88 90 4a
>6278	7d 52 6d c1 8d 90 69 71 65 51 80 13 60 09 d9 a2
>6288	90 58 45 53 4f 89 5b 60 75 6c c1 8d 40 80 15 6a
>6298	09 d9 a2 90 45 76 50 5f 8e 90 4c 7a 58 4b c1 8d
>62a8	90 41 80 17 74 09 d9 a2 90 63 47 50 4f 88 5b 77
>62b8	7c 46 c1 8d 90 78 70 6c 49 80 17 7e 09 d9 a2 90
>62c8	41 53 67 40 87 90 4c 5f 57 4d c1 8d 90 53 46 4d
>62d8	80 17 88 09 d9 a2 90 57 45 40 57 88 90 45 64 5e
>62e8	73 c1 8d 52 61 5e 64 80 13 92 09 d9 a2 44 42 50
>62f8	53 8a 90 44 49 6f 7e c1 8d 40 80 14 9c 09 d9 a2
>6308	90 62 79 4f 59 8a 44 40 74 4d c1 8d 90 41 80 16
>6318	a6 09 d9 a2 90 64 64 72 7e 87 64 43 4a 4e c1 8d
>6328	90 64 70 72 80 15 b0 09 d9 a2 5d 45 72 46 87 5c
>6338	40 4a 78 c1 8d 5d 45 7a 7e 80 17 ba 09 d9 a2 51
>6348	63 72 44 8f 90 61 4f 41 45 c1 8d 90 4f 6b 4f 41
>6358	80 12 c4 09 d9 a2 49 5a 50 55 8b 4f 4f 43 69 c1
>6368	8d 40 80 12 ce 09 d9 a2 62 62 66 44 8d 42 7a 65
>6378	78 c1 8d 40 80 15 d8 09 d9 a2 4c 6d 55 6d 90 49
>6388	74 4f 6d c1 8d 42 79 46 40 80 14 e2 09 d9 a2 90
>6398	63 4b 4d 68 8e 51 6f 49 51 c1 8d 90 41 80 13 ec
>63a8	09 d9 a2 53 73 57 53 8e 55 5d 46 42 c1 8d 90 41
>63b8	80 14 f6 09 d9 a2 90 5d 6f 54 50 8a 90 62 5a 4f
>63c8	7c c1 8d 40 80 16 00 0a d9 a2 44 74 4f 7f 86 90
>63d8	62 7b 55 4d c1 8d 44 44 4a 73 80 14 0a 0a d9 a2
>63e8	90 48 5a 50 45 8c 61 43 5a 5f c1 8d 90 41 80 14
>63f8	14 0a d9 a2 5d 7a 4e 78 8b 90 5c 7e 55 53 c1 8d
>6408	90 41 80 12 1e 0a d9 a2 42 5e 60 71 89 61 7e 50
>6418	71 c1 8d 40 80 15 28 0a d9 a2 53 40 60 7e 88 5e
>6428	46 5b 79 c1 8d 4d 46 7b 47 80 15 32 0a d9 a2 4e
>6438	45 67 43 95 42 75 60 5e c1 8d 42 6f 65 4b 80 14
>6448	3c 0a d9 a2 47 4a 75 50 89 90 59 64 46 4e c1 8d
>6458	90 41 80 14 46 0a d9 a2 4b 6a 5e 6e 94 90 45 5c
>6468	72 7a c1 8d 90 42 80 12 50 0a d9 a2 57 7e 60 49
>6478	8a 90 44 55 41 c1 8d 40 80 16 5a 0a d9 a2 90 52
>6488	68 4c 7b 86 4e 6d 57 49 c1 8d 4c 45 53 41 80 15
>6498	64 0a d9 a2 5f 7e 48 67 90 5d 7d 4a 4a c1 8d 42
>64a8	40 7e 5d 80 15 6e 0a d9 a2 5b 48 6d 50 8f 59 6c
>64b8	70 71 c1 8d 74 75 5e 41 80 17 78 0a d9 a2 50 78
>64c8	57 7d 88 90 5e 44 4b 62 c1 8d 90 4e 7c 5c 5d 80
>64d8	14 82 0a d9 a2 90 5b 76 6c 70 94 90 42 4e 5b 68
>64e8	c1 8d 4c 80 15 8c 0a d9 a2 4d 68 4f 49 95 45 73
>64f8	72 4c c1 8d 42 40 6a 71 80 14 96 0a d9 a2 49 73
>6508	62 48 94 90 43 79 7b 55 c1 8d 90 42 80 15 a0 0a
>6518	d9 a2 4e 50 7d 5f 87 4f 41 58 57 c1 8d 4f 51 7d
>6528	5f 80 13 aa 0a d9 a2 90 4a 52 49 63 8d 55 49 41
>6538	4b c1 8d 40 80 13 b4 0a d9 a2 56 5d 76 95 5d 47
>6548	7d 61 c1 8d 56 5d 76 80 15 be 0a d9 a2 90 61 52
>6558	55 59 8e 90 56 63 78 45 c1 8d 90 41 80 15 c8 0a
>6568	d9 a2 90 5d 69 73 5a 8b 90 64 59 6b 49 c1 8d 90
>6578	41 80 13 d2 0a d9 a2 90 4d 5b 60 69 8b 4b 41 70
>6588	59 c1 8d 40 80 18 dc 0a d9 a2 90 4f 62 5f 5d 86
>6598	90 55 73 56 55 c1 8d 90 5f 73 5f 5d 80 15 e6 0a
>65a8	d9 a2 60 7b 60 6e 88 4d 46 6f 76 c1 8d 6d 7d 4f
>65b8	58 80 12 f0 0a d9 a2 61 6a 4a 46 8d 50 7b 6b 7c
>65c8	c1 8d 40 80 17 fa 0a d9 a2 90 54 52 6a 5f 90 5d
>65d8	40 43 43 c1 8d 90 71 52 6d 62 80 18 04 0b d9 a2
>65e8	90 54 50 41 6a 87 90 5a 49 5c 4c c1 8d 90 50 40
>65f8	40 4a 80 17 0e 0b d9 a2 90 49 77 66 61 88 90 4a
>6608	78 44 68 c1 8d 43 4f 62 47 80 14 18 0b d9 a2 90
>6618	53 6f 69 47 94 90 60 42 7a 76 c1 8d 40 80 14 22
>6628	0b d9 a2 90 52 46 54 5d 8e 66 41 48 4d c1 8d 90
>6638	41 80 17 2c 0b d9 a2 90 55 5b 6d 40 90 62 77 4b
>6648	62 c1 8d 90 78 52 78 62 80 12 36 0b d9 a2 5f 40
>6658	40 49 8a 4d 7c 5c 53 c1 8d 40 80 14 40 0b d9 a2
>6668	90 45 4a 52 5c 8a 90 55 49 6f 48 c1 8d 40 80 14
>6678	4a 0b d9 a2 90 44 62 5b 4b 94 90 4b 62 55 50 c1
>6688	8d 40 80 13 54 0b d9 a2 56 52 48 6d 8b 53 4c 50
>6698	55 c1 8d 90 41 80 13 5e 0b d9 a2 4d 5f 43 7e 8e
>66a8	59 4d 79 6d c1 8d 90 41 80 14 68 0b d9 a2 64 69
>66b8	56 64 8b 90 50 60 75 45 c1 8d 90 41 80 14 72 0b
>66c8	d9 a2 90 5b 44 7e 59 94 90 5a 66 79 6c c1 8d 41
>66d8	80 14 7c 0b d9 a2 90 5b 51 50 54 8e 5f 53 4c 66
>66e8	c1 8d 90 41 80 15 86 0b d9 a2 90 53 4b 4c 63 89
>66f8	90 60 47 53 67 c1 8d 90 41 80 14 90 0b d9 a2 90
>6708	5f 75 6e 66 8e 65 43 7b 50 c1 8d 90 41 80 13 9a
>6718	0b d9 a2 4c 45 7d 79 8a 90 5e 78 7d 65 c1 8d 40
>6728	80 15 a4 0b d9 a2 4d 67 54 53 95 45 5b 6b 41 c1
>6738	8d 42 6f 7e 51 80 14 ae 0b d9 a2 90 55 54 69 4b
>6748	8c 90 5c 49 68 4e c1 8d 40 80 12 b8 0b d9 a2 49
>6758	61 73 7d 94 47 4e 51 5e c1 8d 41 80 16 c2 0b d9
>6768	a2 5f 78 75 7b 86 90 4f 67 44 46 c1 8d 50 58 71
>6778	7a 80 17 cc 0b d9 a2 44 64 71 63 87 90 5e 7f 74
>6788	4e c1 8d 90 5a 5b 44 4d 80 14 d6 0b d9 a2 4a 73
>6798	4a 7a 8b 90 45 78 5a 54 c1 8d 90 41 80 15 e0 0b
>67a8	d9 a2 63 78 48 41 8f 90 48 4f 59 c1 8d 63 6f 78
>67b8	68 80 14 ea 0b d9 a2 65 5d 75 77 89 90 51 76 67
>67c8	60 c1 8d 90 41 80 17 f4 0b d9 a2 90 46 72 50 51
>67d8	90 90 4c 57 7d 5c c1 8d 45 65 6d 4b 80 18 fe 0b
>67e8	d9 a2 90 53 49 75 66 86 90 5b 4e 62 79 c1 8d 90
>67f8	5b 4f 77 7e 80 15 08 0c d9 a2 46 4b 4e 7f 95 50
>6808	5a 4a 79 c1 8d 46 4b 4e 7f 80 17 12 0c d9 a2 90
>6818	56 7e 5c 70 90 90 59 51 56 5d c1 8d 42 52 79 6d
>6828	80 13 1c 0c d9 a2 90 46 6f 73 63 94 4e 7a 7c 77
>6838	c1 8d 40 80 12 26 0c d9 a2 4d 6f 6e 5d 8d 45 56
>6848	6a 60 c1 8d 40 80 13 30 0c d9 a2 61 58 4a 4e 8b
>6858	58 4a 48 4a c1 8d 90 41 80 17 3a 0c d9 a2 90 4b
>6868	52 4f 5d 88 90 47 4c 6a 61 c1 8d 4c 5e 65 7c 80
>6878	14 44 0c d9 a2 90 60 67 7a 53 94 50 51 44 7c c1
>6888	8d 90 42 80 15 4e 0c d9 a2 90 45 4e 6c 5d 8e 90
>6898	55 6a 48 73 c1 8d 90 41 80 15 58 0c d9 a2 56 72
>68a8	72 67 8f 52 71 44 64 c1 8d 69 63 77 4b 80 17 62
>68b8	0c d9 a2 90 4b 56 7a 64 87 50 79 65 68 c1 8d 90
>68c8	4b 46 5a 44 80 15 6c 0c d9 a2 90 57 5a 65 50 8a
>68d8	90 4d 47 69 7b c1 8d 90 41 80 17 76 0c d9 a2 90
>68e8	65 48 50 5c 8f 4e 7f 40 59 c1 8d 90 56 49 50 43
>68f8	80 17 80 0c d9 a2 90 56 43 67 41 88 90 5d 64 52
>6908	6b c1 8d 4b 67 75 6a 80 13 8a 0c d9 a2 90 49 71
>6918	7e 73 8d 5c 5f 54 48 c1 8d 40 80 14 94 0c d9 a2
>6928	90 4d 45 56 53 8c 90 60 48 55 61 c1 8d 40 80 18
>6938	9e 0c d9 a2 90 59 51 72 45 90 90 57 53 62 5f c1
>6948	8d 90 41 7e 4f 66 80 17 a8 0c d9 a2 90 5b 76 66
>6958	78 88 90 4d 5c 40 6f c1 8d 56 6a 66 59 80 14 b2
>6968	0c d9 a2 90 51 7d 76 7f 8a 90 63 67 54 43 c1 8d
>6978	40 80 15 bc 0c d9 a2 90 49 67 5e 8f 56 54 6c 7b
>6988	c1 8d 56 4b 45 5d 80 15 c6 0c d9 a2 63 6f 58 4e
>6998	87 4c 54 5a 51 c1 8d 6f 7f 5a 5f 80 16 d0 0c d9
>69a8	a2 90 5c 71 40 88 4c 46 7b 7b c1 8d 90 4c 5a 4b
>69b8	45 80 13 da 0c d9 a2 47 49 56 64 94 90 4b 59 71
>69c8	77 c1 8d 40 80 14 e4 0c d9 a2 90 55 4c 71 69 89
>69d8	90 45 79 69 7f c1 8d 40 80 18 ee 0c d9 a2 90 63
>69e8	47 5e 77 90 90 61 52 5e 5d c1 8d 90 41 75 40 5a
>69f8	80 16 f8 0c d9 a2 90 41 47 69 53 87 43 78 72 52
>6a08	c1 8d 90 47 49 41 80 15 02 0d d9 a2 4b 63 63 7a
>6a18	87 55 44 60 63 c1 8d 5f 67 63 7b 80 14 0c 0d d9
>6a28	a2 90 5f 6f 72 4b 8d 90 4b 43 4d 70 c1 8d 40 80
>6a38	14 16 0d d9 a2 90 46 60 53 5d 8e 4b 58 7f 5a c1
>6a48	8d 90 41 80 17 20 0d d9 a2 90 47 52 4e 58 88 90
>6a58	49 5c 66 74 c1 8d 4e 4e 68 64 80 15 2a 0d d9 a2
>6a68	56 54 4c 4e 90 55 4e 43 49 c1 8d 41 46 49 45 80
>6a78	15 34 0d d9 a2 5a 73 75 41 95 4e 61 42 7d c1 8d
>6a88	4c 52 72 44 80 17 3e 0d d9 a2 90 51 56 4a 5d 88
>6a98	90 5b 4a 5c 4c c1 8d 4a 5c 56 57 80 15 48 0d d9
>6aa8	a2 90 46 78 5e 64 89 90 4b 6c 63 7b c1 8d 90 41
>6ab8	80 16 52 0d d9 a2 77 7a 46 87 90 5d 41 4b 7b c1
>6ac8	8d 90 5d 40 41 79 80 17 5c 0d d9 a2 90 4e 42 7b
>6ad8	54 88 4d 6b 44 41 c1 8d 90 43 69 7f 53 80 15 66
>6ae8	0d d9 a2 90 45 47 7e 62 89 90 54 6e 6f 4d c1 8d
>6af8	90 41 80 15 70 0d d9 a2 48 7c 63 41 95 58 53 7d
>6b08	4f c1 8d 48 7c 63 41 80 14 7a 0d d9 a2 51 42 40
>6b18	7b 8e 90 50 41 54 48 c1 8d 90 41 80 14 84 0d d9
>6b28	a2 90 59 43 70 7b 89 90 55 60 41 64 c1 8d 40 80
>6b38	15 8e 0d d9 a2 4a 6e 77 6c 95 64 52 75 62 c1 8d
>6b48	4a 6e 77 6c 80 17 98 0d d9 a2 90 5c 65 65 77 88
>6b58	53 77 57 74 c1 8d 90 4f 52 72 43 80 15 a2 0d d9
>6b68	a2 52 42 74 52 86 53 6f 5f 79 c1 8d 52 42 54 50
>6b78	80 15 ac 0d d9 a2 90 4a 7b 75 70 89 90 64 43 57
>6b88	49 c1 8d 90 41 80 12 b6 0d d9 a2 51 6f 78 5c 8a
>6b98	46 76 61 60 c1 8d 40 80 14 c0 0d d9 a2 90 48 49
>6ba8	40 52 94 90 5c 67 74 67 c1 8d 40 80 18 ca 0d d9
>6bb8	a2 90 60 5f 6a 6e 8f 90 5c 44 6c 42 c1 8d 90 7c
>6bc8	64 56 70 80 13 d4 0d d9 a2 61 7e 40 4e 8d 90 60
>6bd8	4a 40 58 c1 8d 40 80 13 de 0d d9 a2 56 6f 65 72
>6be8	8c 90 57 66 6f 70 c1 8d 40 80 13 e8 0d d9 a2 5a
>6bf8	67 5f 56 8d 90 51 7b 70 67 c1 8d 40 80 16 f2 0d
>6c08	d9 a2 90 50 42 42 63 86 42 50 77 5d c1 8d 42 50
>6c18	75 5d 80 15 fc 0d d9 a2 90 4a 69 61 6d 8e 90 55
>6c28	49 66 67 c1 8d 90 41 80 13 06 0e d9 a2 90 53 4c
>6c38	52 78 94 57 70 5e 69 c1 8d 40 80 15 10 0e d9 a2
>6c48	90 60 61 56 5a 8e 90 64 79 5a 5f c1 8d 90 41 80
>6c58	15 1a 0e d9 a2 60 62 40 55 95 58 75 6c 51 c1 8d
>6c68	47 6c 54 44 80 15 24 0e d9 a2 59 4c 5d 79 95 55
>6c78	65 53 7d c1 8d 43 67 49 7c 80 13 2e 0e d9 a2 54
>6c88	4d 6c 4c 8e 53 74 78 42 c1 8d 90 41 80 17 38 0e
>6c98	d9 a2 90 44 54 66 5a 90 4c 7b 75 66 c1 8d 90 51
>6ca8	50 5c 40 80 16 42 0e d9 a2 90 4d 43 7a 47 86 46
>6cb8	4a 6a 7b c1 8d 42 48 40 79 80 13 4c 0e d9 a2 43
>6cc8	69 4a 42 94 90 55 6b 5d 6b c1 8d 40 80 15 56 0e
>6cd8	d9 a2 44 6e 49 54 88 50 4d 49 5c c1 8d 54 63 40
>6ce8	48 80 13 60 0e d9 a2 90 4e 48 7a 66 89 45 7e 54
>6cf8	52 c1 8d 40 80 14 6a 0e d9 a2 43 6e 58 59 86 44
>6d08	62 76 62 c1 8d 62 50 40 80 14 74 0e d9 a2 90 6f
>6d18	6d 76 89 90 45 53 5b 69 c1 8d 90 41 80 14 7e 0e
>6d28	d9 a2 53 66 78 69 8e 90 57 66 52 6f c1 8d 90 41
>6d38	80 15 88 0e d9 a2 65 73 5d 4e 95 4d 7b 70 4e c1
>6d48	8d 49 7b 7c 72 80 17 92 0e d9 a2 65 4d 72 54 87
>6d58	90 59 7d 4c 77 c1 8d 90 58 70 4c 63 80 12 9c 0e
>6d68	d9 a2 47 55 6d 66 8d 55 7d 7b 6d c1 8d 40 80 15
>6d78	a6 0e d9 a2 90 5d 5a 73 7e 8e 90 44 50 6a 71 c1
>6d88	8d 90 41 80 15 b0 0e d9 a2 5c 73 56 73 95 54 42
>6d98	60 69 c1 8d 48 70 76 4a 80 13 ba 0e d9 a2 61 6c
>6da8	45 72 8e 4e 51 42 78 c1 8d 90 41 80 15 c4 0e d9
>6db8	a2 90 41 52 7c 4c 8b 90 55 5a 43 52 c1 8d 90 41
>6dc8	80 14 ce 0e d9 a2 5c 5b 57 75 94 90 4e 73 79 64
>6dd8	c1 8d 90 41 80 12 d8 0e d9 a2 48 7d 71 47 8b 53
>6de8	61 4c 7a c1 8d 40 80 15 e2 0e d9 a2 5c 57 76 4c
>6df8	90 58 40 48 7e c1 8d 44 57 6d 4e 80 15 ec 0e d9
>6e08	a2 90 44 58 46 63 8f 44 7c 76 42 c1 8d 64 6f 5f
>6e18	80 13 f6 0e d9 a2 5b 71 7b 64 8a 90 4d 5a 65 4d
>6e28	c1 8d 40 80 14 00 0f d9 a2 90 61 72 75 55 89 90
>6e38	4d 78 56 4a c1 8d 40 80 13 0a 0f d9 a2 90 47 6a
>6e48	69 48 89 64 63 7f 55 c1 8d 40 80 13 14 0f d9 a2
>6e58	4e 65 4c 70 8e 4b 49 72 75 c1 8d 90 41 80 13 1e
>6e68	0f d9 a2 90 5a 70 4e 5d 89 57 46 77 4d c1 8d 40
>6e78	80 14 28 0f d9 a2 5d 65 46 73 86 42 49 60 51 c1
>6e88	8d 41 40 51 80 17 32 0f d9 a2 90 44 69 51 64 90
>6e98	47 62 6c 5e c1 8d 90 4c 4b 7e 42 80 15 3c 0f d9
>6ea8	a2 90 59 4d 5c 5f 8a 90 4f 59 7e 65 c1 8d 90 41
>6eb8	80 16 46 0f d9 a2 58 58 64 78 90 90 55 77 6f 67
>6ec8	c1 8d 6e 50 54 5f 80 15 50 0f d9 a2 41 6d 4a 4e
>6ed8	8f 4d 77 54 57 c1 8d 4f 64 5e 65 80 15 5a 0f d9
>6ee8	a2 65 79 54 4f 87 43 7c 4a 75 c1 8d 67 7d 5e 7f
>6ef8	80 15 64 0f d9 a2 5d 6f 79 69 86 41 46 41 75 c1
>6f08	8d 41 46 41 61 80 14 6e 0f d9 a2 90 65 79 6a 4f
>6f18	8b 90 56 44 6b 67 c1 8d 40 80 12 78 0f d9 a2 5c
>6f28	45 79 4a 8d 64 7b 43 64 c1 8d 40 80 14 82 0f d9
>6f38	a2 90 44 7e 4c 41 8c 50 67 71 70 c1 8d 90 41 80
>6f48	12 8c 0f d9 a2 42 49 73 72 8b 56 72 5c 65 c1 8d
>6f58	40 80 16 96 0f d9 a2 90 55 66 5b 52 86 4d 79 43
>6f68	79 c1 8d 48 59 40 68 80 12 a0 0f d9 a2 4d 62 7c
>6f78	79 8d 51 4f 6e 55 c1 8d 40 80 15 aa 0f d9 a2 54
>6f88	7c 79 68 8f 64 71 46 57 c1 8d 79 6d 7f 7f 80 13
>6f98	b4 0f d9 a2 60 78 74 51 89 45 66 6a 40 c1 8d 90
>6fa8	41 80 12 be 0f d9 a2 5f 4e 51 66 8d 50 6a 7c 45
>6fb8	c1 8d 40 80 13 c8 0f d9 a2 4f 7e 46 60 8e 44 62
>6fc8	51 69 c1 8d 90 41 80 18 d2 0f d9 a2 90 5d 62 4e
>6fd8	4e 90 90 57 78 5b 40 c1 8d 90 45 69 73 4e 80 14
>6fe8	dc 0f d9 a2 90 5e 53 5d 55 8b 90 4e 77 40 40 c1
>6ff8	8d 40 80 12 e6 0f d9 a2 62 5a 64 42 8d 62 46 53
>7008	6b c1 8d 40 80 13 f0 0f d9 a2 61 76 5d 54 8d 90
>7018	55 50 68 57 c1 8d 40 80 13 fa 0f d9 a2 90 4d 40
>7028	47 7d 8d 63 60 4f 72 c1 8d 40 80 13 04 10 d9 a2
>7038	64 50 5b 4b 8c 90 5f 63 71 61 c1 8d 40 80 14 0e
>7048	10 d9 a2 90 5a 7f 54 5b 94 90 5d 7c 55 5d c1 8d
>7058	40 80 16 18 10 d9 a2 5c 60 50 64 90 90 5c 53 68
>7068	6a c1 8d 78 73 79 4e 80 18 22 10 d9 a2 90 55 58
>7078	43 45 86 90 4e 54 61 5c c1 8d 90 5f 5c 63 60 80
>7088	14 2c 10 d9 a2 5d 6d 68 7c 94 90 43 72 76 45 c1
>7098	8d 90 47 80 14 36 10 d9 a2 57 48 70 54 94 90 4d
>70a8	69 72 61 c1 8d 90 41 80 16 40 10 d9 a2 90 55 7c
>70b8	50 6d 88 90 55 4b 6b 74 c1 8d 77 7b 5f 80 16 4a
>70c8	10 d9 a2 4e 4a 47 7c 90 4f 57 6a 4f c1 8d 90 41
>70d8	4d 62 53 80 18 54 10 d9 a2 90 62 79 5d 4a 86 90
>70e8	5c 7e 48 51 c1 8d 90 7e 7f 5d 5a 80 15 5e 10 d9
>70f8	a2 4f 64 52 7c 90 4c 46 65 68 c1 8d 43 5d 6d 54
>7108	80 15 68 10 d9 a2 90 5d 69 40 65 8e 90 57 7f 5f
>7118	71 c1 8d 90 41 80 14 72 10 d9 a2 64 47 73 6b 90
>7128	63 74 5e 6c c1 8d 53 54 7f 80 13 7c 10 d9 a2 5f
>7138	66 52 61 8d 90 53 43 46 79 c1 8d 40 80 14 86 10
>7148	d9 a2 4f 4e 66 57 8e 90 5b 62 46 4e c1 8d 90 41
>7158	80 17 90 10 d9 a2 90 53 77 55 57 88 90 47 5a 47
>7168	6e c1 8d 54 6d 52 7b 80 12 9a 10 d9 a2 59 46 7e
>7178	8e 50 6e 64 50 c1 8d 90 41 80 13 a4 10 d9 a2 90
>7188	59 44 6b 6b 89 5b 58 4e 5c c1 8d 40 80 15 ae 10
>7198	d9 a2 4f 68 48 5a 87 5f 6b 66 48 c1 8d 5f 6b 6e
>71a8	5a 80 14 b8 10 d9 a2 90 4c 58 5d 55 94 90 50 5a
>71b8	41 7e c1 8d 40 80 12 c2 10 d9 a2 50 4f 75 58 94
>71c8	61 6e 52 67 c1 8d 40 80 13 cc 10 d9 a2 90 48 79
>71d8	53 67 94 5e 43 65 41 c1 8d 40 80 15 d6 10 d9 a2
>71e8	60 56 48 71 95 4f 66 55 70 c1 8d 41 49 5d 51 80
>71f8	12 e0 10 d9 a2 63 61 66 50 94 57 60 68 4d c1 8d
>7208	41 80 12 ea 10 d9 a2 5a 4b 5a 52 8a 51 4f 54 77
>7218	c1 8d 40 80 14 f4 10 d9 a2 56 69 71 53 95 56 65
>7228	62 6a c1 8d 44 4e 69 80 14 fe 10 d9 a2 90 46 5f
>7238	7e 77 8a 44 40 5f 53 c1 8d 90 41 80 15 08 11 d9
>7248	a2 90 61 40 68 67 8e 90 58 51 63 4e c1 8d 90 41
>7258	80 13 12 11 d9 a2 63 53 68 5f 8d 90 5c 6e 77 55
>7268	c1 8d 40 80 15 1c 11 d9 a2 65 42 76 7e 87 5d 43
>7278	55 53 c1 8d 7d 43 77 7f 80 14 26 11 d9 a2 90 65
>7288	6e 56 59 94 90 62 40 48 41 c1 8d 41 80 12 30 11
>7298	d9 a2 4b 7c 48 79 94 58 71 60 7e c1 8d 40 80 15
>72a8	3a 11 d9 a2 4d 5d 74 51 8f 4b 59 5f 47 c1 8d 58
>72b8	77 53 58 80 14 44 11 d9 a2 90 53 66 6e 54 94 90
>72c8	44 4b 6a 51 c1 8d 44 80 18 4e 11 d9 a2 90 63 7f
>72d8	7b 4d 86 90 54 7d 4f 6f c1 8d 90 77 7f 7f 6f 80
>72e8	17 58 11 d9 a2 90 4c 5b 45 4a 88 90 49 48 56 56
>72f8	c1 8d 45 53 53 5c 80 14 62 11 d9 a2 45 4a 74 52
>7308	8b 90 5d 7f 75 40 c1 8d 90 41 80 14 6c 11 d9 a2
>7318	90 49 59 78 46 8c 4c 47 73 7a c1 8d 90 41 80 17
>7328	76 11 d9 a2 90 56 59 52 62 88 90 60 4e 5d 51 c1
>7338	8d 76 57 4f 71 80 14 80 11 d9 a2 55 46 63 7f 89
>7348	90 5e 47 79 66 c1 8d 90 41 80 14 8a 11 d9 a2 90
>7358	65 52 4b 51 94 53 50 5f 7c c1 8d 90 41 80 13 94
>7368	11 d9 a2 90 4a 71 53 77 8b 5d 5e 7e 51 c1 8d 40
>7378	80 13 9e 11 d9 a2 45 68 72 58 8e 4f 70 7e 67 c1
>7388	8d 90 41 80 15 a8 11 d9 a2 51 64 74 40 87 58 6c
>7398	6a 6d c1 8d 59 6c 7e 6d 80 16 b2 11 d9 a2 90 5b
>73a8	6d 49 7c 8f 5e 67 53 c1 8d 90 5b 4e 62 69 80 18
>73b8	bc 11 d9 a2 90 49 63 4e 69 8f 90 5d 79 5b 4e c1
>73c8	8d 90 67 5c 69 77 80 15 c6 11 d9 a2 49 47 64 63
>73d8	95 5e 41 4e 64 c1 8d 49 47 64 63 80 14 d0 11 d9
>73e8	a2 90 4d 46 5d 70 8c 48 46 70 73 c1 8d 90 41 80
>73f8	14 da 11 d9 a2 43 42 55 56 89 90 4d 78 64 45 c1
>7408	8d 90 41 80 16 e4 11 d9 a2 52 6e 78 56 90 56 45
>7418	5a 48 c1 8d 90 43 56 61 72 80 16 ee 11 d9 a2 63
>7428	70 5f 5f 86 90 5c 65 79 73 c1 8d 63 50 46 4d 80
>7438	17 f8 11 d9 a2 42 6d 55 43 8f 90 5b 79 46 5f c1
>7448	8d 90 59 4b 71 5c 80 15 02 12 d9 a2 5c 5b 46 7f
>7458	95 50 49 55 42 c1 8d 4c 51 71 7d 80 17 0c 12 d9
>7468	a2 90 5f 5c 7d 7c 8f 52 45 7b 57 c1 8d 90 4d 57
>7478	42 65 80 15 16 12 d9 a2 53 7c 53 67 88 4a 54 42
>7488	54 c1 8d 59 68 51 73 80 15 20 12 d9 a2 6c 74 78
>7498	90 5a 5e 51 42 c1 8d 90 59 71 5c 4a 80 15 2a 12
>74a8	d9 a2 61 7a 67 67 95 64 6e 7d 76 c1 8d 61 7a 67
>74b8	67 80 17 34 12 d9 a2 5d 78 6c 44 87 90 47 4c 56
>74c8	67 c1 8d 90 42 44 52 63 80 14 3e 12 d9 a2 90 4b
>74d8	55 6e 79 8c 48 6e 6e 4a c1 8d 90 41 80 15 48 12
>74e8	d9 a2 50 49 76 58 95 60 45 65 53 c1 8d 50 49 76
>74f8	58 80 15 52 12 d9 a2 48 4b 53 7d 88 5e 5b 5c 54
>7508	c1 8d 56 50 4f 69 80 16 5c 12 d9 a2 90 44 76 61
>7518	65 86 4a 43 6c 7c c1 8d 4a 41 4c 58 80 19 66 12
>7528	d9 a2 90 64 59 5b 43 8f 90 5d 51 4b 5e c1 8d 90
>7538	41 41 6a 66 61 80 13 70 12 d9 a2 62 5f 6c 64 89
>7548	49 53 7e 75 c1 8d 90 41 80 17 7a 12 d9 a2 90 51
>7558	76 78 7b 88 4a 5b 57 54 c1 8d 90 5b 6d 6f 6f 80
>7568	15 84 12 d9 a2 90 5c 70 6f 4d 8e 90 4c 64 78 62
>7578	c1 8d 90 41 80 18 8e 12 d9 a2 90 52 51 4e 67 8f
>7588	90 44 72 59 61 c1 8d 90 57 43 68 48 80 18 98 12
>7598	d9 a2 90 49 6e 6b 6b 86 90 54 54 68 55 c1 8d 90
>75a8	5d 7e 6b 7f 80 15 a2 12 d9 a2 90 43 44 6c 7b 89
>75b8	90 4a 7c 47 63 c1 8d 90 41 80 16 ac 12 d9 a2 65
>75c8	4a 4e 72 86 90 41 46 56 6b c1 8d 64 48 48 50 80
>75d8	13 b6 12 d9 a2 55 52 7d 71 89 43 7e 74 67 c1 8d
>75e8	90 41 80 14 c0 12 d9 a2 90 5e 7a 60 7f 89 90 49
>75f8	4e 4e 59 c1 8d 40 80 12 ca 12 d9 a2 47 6a 5a 71
>7608	94 4f 5f 58 73 c1 8d 40 80 14 d4 12 d9 a2 90 65
>7618	7b 55 59 8b 90 5b 7f 57 5f c1 8d 40 80 13 de 12
>7628	d9 a2 55 73 44 50 8c 57 41 6a 7e c1 8d 90 41 80
>7638	15 e8 12 d9 a2 56 56 7c 6c 95 50 48 5b 43 c1 8d
>7648	46 4e 61 69 80 15 f2 12 d9 a2 90 4c 61 6d 73 8e
>7658	90 51 42 45 72 c1 8d 90 41 80 15 fc 12 d9 a2 4d
>7668	6f 58 4d 95 55 54 5c 6b c1 8d 4d 6f 58 4d 80 14
>7678	06 13 d9 a2 90 4e 4e 6e 68 8b 90 43 6c 49 7d c1
>7688	8d 40 80 17 10 13 d9 a2 44 6f 77 6e 8f 90 52 4b
>7698	42 61 c1 8d 90 4d 5b 4a 73 80 18 1a 13 d9 a2 90
>76a8	44 4c 49 51 8f 90 42 7e 72 5a c1 8d 90 47 4a 7b
>76b8	6b 80 13 24 13 d9 a2 5d 4b 40 67 8b 51 7a 54 7f
>76c8	c1 8d 90 41 80 15 2e 13 d9 a2 90 5f 6e 41 4c 86
>76d8	57 7c 45 69 c1 8d 50 44 60 80 13 38 13 d9 a2 90
>76e8	51 72 5b 6d 8b 4f 55 72 6a c1 8d 40 80 15 42 13
>76f8	d9 a2 4c 54 4e 45 95 48 5a 62 54 c1 8d 43 79 6b
>7708	71 80 16 4c 13 d9 a2 90 61 4e 45 76 86 52 7c 6f
>7718	78 c1 8d 52 70 6a 48 80 12 56 13 d9 a2 5e 6c 49
>7728	58 8c 5a 45 52 69 c1 8d 40 80 14 60 13 d9 a2 90
>7738	41 7f 4b 78 94 90 48 50 44 47 c1 8d 40 80 13 6a
>7748	13 d9 a2 59 72 46 69 89 48 48 6b 6e c1 8d 90 41
>7758	80 17 74 13 d9 a2 90 4b 49 6f 47 88 5a 6a 72 66
>7768	c1 8d 90 51 63 5d 61 80 14 7e 13 d9 a2 45 52 7b
>7778	72 8b 90 5a 41 73 6b c1 8d 90 41 80 18 88 13 d9
>7788	a2 90 4b 58 75 75 86 90 5f 44 6e 48 c1 8d 90 5f
>7798	5c 7f 78 80 15 92 13 d9 a2 4b 45 46 65 86 5b 5c
>77a8	47 51 c1 8d 4b 44 46 41 80 12 9c 13 d9 a2 4c 7c
>77b8	6d 8e 41 63 5b 64 c1 8d 90 41 80 12 a6 13 d9 a2
>77c8	49 62 63 6e 8b 58 70 41 4b c1 8d 40 80 17 b0 13
>77d8	d9 a2 59 73 7f 7b 88 90 47 50 40 5d c1 8d 90 5e
>77e8	63 7f 68 80 18 ba 13 d9 a2 90 59 68 6e 46 87 90
>77f8	47 53 6c 44 c1 8d 90 41 40 6c 42 80 13 c4 13 d9
>7808	a2 90 48 6e 53 53 8b 61 6d 53 40 c1 8d 40 80 13
>7818	ce 13 d9 a2 90 5f 56 48 58 8d 54 43 6f 7d c1 8d
>7828	40 80 13 d8 13 d9 a2 90 4c 7e 5a 55 8b 50 77 76
>7838	70 c1 8d 40 80 18 e2 13 d9 a2 90 4b 49 52 6a 8f
>7848	90 4c 5b 67 43 c1 8d 90 57 64 79 6d 80 05 ec 13
>7858	db 80 00

;******  Return to file: ../source/main/00start.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/assert.asm

.1010					Command_Assert:
.1010	20 79 14	jsr $1479			jsr 	EvaluateRoot 				; what is being asserted.
.1013	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; is it true ?
.1016	f0 01		beq $1019			beq 	_CAError
.1018	60		rts				rts
.1019					_CAError:
.1019	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.101b	20 1a 19	jsr $191a			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/run.asm

.101e					Command_Run:
.101e	a2 ff		ldx #$ff			ldx 	#$FF
.1020	9a		txs				txs
.1021	20 40 10	jsr $1040			jsr 	ResetCodeAddress
.1024	a0 03		ldy #$03			ldy 	#3
.1026					CRNextInstruction:
.1026	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1028	10 14		bpl $103e			bpl 	_CRNotToken
.102a	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.102c	b0 04		bcs $1032			bcs 	_CRExecute
.102e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1030	b0 1b		bcs $104d			bcs 	Unimplemented 				; else not implemented.
.1032					_CRExecute:
.1032	c8		iny				iny 								; consume it.
.1033	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1034	aa		tax				tax
.1035	20 3b 10	jsr $103b			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1038	4c 26 10	jmp $1026			jmp 	CRNextInstruction
.103b					_CRRunRoutine:
.103b	7c 51 10	jmp ($1051,x)			jmp 	(Group0Vectors,x)
.103e					_CRNotToken:
>103e	db						.byte 	$DB
.103f					CommandColon:
.103f	60		rts				rts
.1040					ResetCodeAddress:
.1040	ad 68 08	lda $0868			lda 	basePage 					; copy basePage to code Pointer
.1043	85 02		sta $02				sta 	codePtr
.1045	ad 69 08	lda $0869			lda 	basePage+1
.1048	85 03		sta $03				sta 	codePtr+1
.104a	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.104c	60		rts				rts
.104d					Unimplemented:
>104d	db						.byte 	$DB
.104e	4c 4d 10	jmp $104d			jmp 	Unimplemented

;******  Processing file: ../source/main/commands/../../generated/tokenvectors0.inc

.1051					Group0Vectors:
>1051	19 11					.word	AdvanceNextLine          ; $80 [[eol]]
>1053	4d 10					.word	Unimplemented            ; $81 [[sh1]]
>1055	4d 10					.word	Unimplemented            ; $82 [[sh2]]
>1057	4d 10					.word	Unimplemented            ; $83 [[sh3]]
>1059	4d 10					.word	Unimplemented            ; $84 [[fpc]]
>105b	4d 10					.word	Unimplemented            ; $85 [[str]]
>105d	ee 11					.word	AndHandler               ; $86 and
>105f	db 11					.word	OrHandler                ; $87 or
>1061	c8 11					.word	XorHandler               ; $88 xor
>1063	05 13					.word	CompareGreaterEq         ; $89 >=
>1065	0f 13					.word	CompareLessEq            ; $8a <=
>1067	f1 12					.word	CompareGreater           ; $8b >
>1069	e7 12					.word	CompareLess              ; $8c <
>106b	dd 12					.word	CompareEquals            ; $8d =
>106d	fb 12					.word	CompareNotEquals         ; $8e <>
>106f	59 11					.word	AddHandler               ; $8f +
>1071	7c 11					.word	SubHandler               ; $90 -
>1073	14 12					.word	ShrHandler               ; $91 >>
>1075	01 12					.word	ShlHandler               ; $92 <<
>1077	8f 11					.word	MulHandler               ; $93 *
>1079	a2 11					.word	DivHandler               ; $94 /
>107b	b5 11					.word	ModHandler               ; $95 mod
>107d	4d 12					.word	PowerHandler             ; $96 ^
>107f	27 12					.word	WordRefHandler           ; $97 !
>1081	3a 12					.word	ByteRefHandler           ; $98 ?
>1083	4d 10					.word	Unimplemented            ; $99 repeat
>1085	4d 10					.word	Unimplemented            ; $9a while
>1087	4d 10					.word	Unimplemented            ; $9b for
>1089	4d 10					.word	Unimplemented            ; $9c if
>108b	4d 10					.word	Unimplemented            ; $9d until
>108d	4d 10					.word	Unimplemented            ; $9e wend
>108f	4d 10					.word	Unimplemented            ; $9f next
>1091	4d 10					.word	Unimplemented            ; $a0 then
>1093	4d 10					.word	Unimplemented            ; $a1 endif
>1095	51 14					.word	UnaryParenthesis         ; $a2 (
>1097	fd 14					.word	UnaryLen                 ; $a3 len(
>1099	41 15					.word	UnarySgn                 ; $a4 sgn(
>109b	2a 15					.word	UnaryAbs                 ; $a5 abs(
>109d	9a 15					.word	Unary_Random             ; $a6 random(
>109f	e4 15					.word	Unary_Page               ; $a7 page
>10a1	8b 18					.word	MInt32True               ; $a8 true
>10a3	8f 18					.word	MInt32False              ; $a9 false
>10a5	af 15					.word	Unary_Min                ; $aa min(
>10a7	b3 15					.word	Unary_Max                ; $ab max(
>10a9	4d 10					.word	Unimplemented            ; $ac sys(
>10ab	4d 10					.word	Unimplemented            ; $ad timer(
>10ad	4d 10					.word	Unimplemented            ; $ae event(
>10af	4d 10					.word	Unimplemented            ; $af get(
>10b1	4d 10					.word	Unimplemented            ; $b0 inkey(
>10b3	4d 10					.word	Unimplemented            ; $b1 alloc(
>10b5	4d 10					.word	Unimplemented            ; $b2 chr$(
>10b7	4d 10					.word	Unimplemented            ; $b3 left$(
>10b9	4d 10					.word	Unimplemented            ; $b4 mid$(
>10bb	4d 10					.word	Unimplemented            ; $b5 right$(
>10bd	4d 10					.word	Unimplemented            ; $b6 str$(
>10bf	4d 10					.word	Unimplemented            ; $b7 val(
>10c1	58 15					.word	UnaryPeek                ; $b8 peek(
>10c3	5e 15					.word	UnaryDeek                ; $b9 deek(
>10c5	64 15					.word	UnaryLeek                ; $ba leek(
>10c7	1b 15					.word	UnaryAsc                 ; $bb asc(
>10c9	4d 10					.word	Unimplemented            ; $bc int(
>10cb	4d 10					.word	Unimplemented            ; $bd float(
>10cd	f2 15					.word	UnaryReference           ; $be @
>10cf	08 16					.word	UnaryComplement          ; $bf ~
>10d1	05 16					.word	UnaryHexMarker           ; $c0 &
>10d3	4d 10					.word	Unimplemented            ; $c1 )
>10d5	3f 10					.word	CommandColon             ; $c2 :
>10d7	4d 10					.word	Unimplemented            ; $c3 ,
>10d9	4d 10					.word	Unimplemented            ; $c4 ;
>10db	4d 10					.word	Unimplemented            ; $c5 ]
>10dd	4d 10					.word	Unimplemented            ; $c6 to
>10df	4d 10					.word	Unimplemented            ; $c7 step
>10e1	4d 10					.word	Unimplemented            ; $c8 proc
>10e3	4d 10					.word	Unimplemented            ; $c9 endproc
>10e5	4d 10					.word	Unimplemented            ; $ca local
>10e7	4d 10					.word	Unimplemented            ; $cb rem
>10e9	4d 10					.word	Unimplemented            ; $cc let
>10eb	4d 10					.word	Unimplemented            ; $cd '
>10ed	4d 10					.word	Unimplemented            ; $ce [
>10ef	4d 10					.word	Unimplemented            ; $cf input
>10f1	4d 10					.word	Unimplemented            ; $d0 else
>10f3	4d 10					.word	Unimplemented            ; $d1 vdu
>10f5	4d 10					.word	Unimplemented            ; $d2 read
>10f7	4d 10					.word	Unimplemented            ; $d3 data
>10f9	4d 10					.word	Unimplemented            ; $d4 restore
>10fb	4d 10					.word	Unimplemented            ; $d5 print
>10fd	4d 10					.word	Unimplemented            ; $d6 goto
>10ff	4d 10					.word	Unimplemented            ; $d7 gosub
>1101	4d 10					.word	Unimplemented            ; $d8 return
>1103	10 10					.word	Command_Assert           ; $d9 assert
>1105	11 11					.word	CommandStop              ; $da stop
>1107	16 11					.word	CommandEnd               ; $db end
>1109	4d 10					.word	Unimplemented            ; $dc dim
>110b	4d 10					.word	Unimplemented            ; $dd poke
>110d	4d 10					.word	Unimplemented            ; $de doke
>110f	4d 10					.word	Unimplemented            ; $df loke

;******  Return to file: ../source/main/commands/run.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/stopend.asm

.1111					CommandStop:
.1111	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.1113	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1116					CommandEnd:
.1116	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1119					AdvanceNextLine:
.1119	a0 00		ldy #$00			ldy 	#0 							; get offset
.111b	b1 02		lda ($02),y			lda 	(codePtr),y
.111d	18		clc				clc 								; add to codePtr
.111e	65 02		adc $02				adc 	codePtr
.1120	85 02		sta $02				sta 	codePtr
.1122	90 02		bcc $1126			bcc 	_ANLNoCarry
.1124	e6 03		inc $03				inc 	codePtr+1
.1126					_ANLNoCarry:
.1126	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1128	f0 ec		beq $1116			beq 	CommandEnd 					; execute END
.112a	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.112c	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/binary.asm

.112d					BinaryProcess:
.112d	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.112f	15 41		ora $41,x			ora 	esType+1,x
.1131	0a		asl a				asl 	a
.1132	30 0e		bmi $1142			bmi 	_BPStringType 				; if one is set, then string type.
.1134	18		clc				clc 								; return CC for integer
.1135	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1137	f0 08		beq $1141			beq 	_BPExit 					; if both integer then return with CC.
.1139	20 47 11	jsr $1147			jsr 	BPMakeBothFloat 			; make both float
.113c	a9 01		lda #$01			lda 	#$01 						; set result type to float
.113e	95 40		sta $40,x			sta 	esType,x
.1140	38		sec				sec 								; and return with carry set.
.1141					_BPExit:
.1141	60		rts				rts
.1142					_BPStringType:
.1142	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1144	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1147					BPMakeBothFloat:
.1147	e8		inx				inx
.1148	20 4c 11	jsr $114c			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.114b	ca		dex				dex
.114c					BPMakeFloat:
.114c	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.114e	4a		lsr a				lsr 	a
.114f	b0 07		bcs $1158			bcs 	_BPIsFloat
.1151	8a		txa				txa
.1152	a2 1a		ldx #$1a		ldx	#26
.1154	20 21 19	jsr $1921		jsr	floatingpointHandler
.1157	aa		tax				tax
.1158					_BPIsFloat:
.1158	60		rts				rts
.1159					AddHandler:
.1159	20 1f 13	jsr $131f			jsr 	DereferenceTwo 				; dereference top two on stack.
.115c	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.115e	35 41		and $41,x			and 	esType+1,x
.1160	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1162	d0 10		bne $1174			bne 	_AHStringConcat				; concatenate strings.
.1164	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1167	b0 03		bcs $116c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1169	4c 81 17	jmp $1781			jmp 	MInt32Add 							; else do it as integer.
.116c					_IsFPOperation:
.116c	8a		txa				txa 								; call the relevant fp routine
.116d	a2 04		ldx #$04		ldx	#4
.116f	20 21 19	jsr $1921		jsr	floatingpointHandler
.1172	aa		tax				tax
.1173	60		rts				rts
.1174					_AHStringConcat:
.1174	8a		txa				txa
.1175	a2 00		ldx #$00		ldx	#0
.1177	20 30 19	jsr $1930		jsr	stringHandler
.117a	aa		tax				tax
.117b	60		rts				rts
.117c					SubHandler:
.117c	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.117f	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1182	b0 03		bcs $1187			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1184	4c 9b 17	jmp $179b			jmp 	MInt32Sub 							; else do it as integer.
.1187					_IsFPOperation:
.1187	8a		txa				txa 								; call the relevant fp routine
.1188	a2 12		ldx #$12		ldx	#18
.118a	20 21 19	jsr $1921		jsr	floatingpointHandler
.118d	aa		tax				tax
.118e	60		rts				rts
.118f					MulHandler:
.118f	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1192	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1195	b0 03		bcs $119a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1197	4c b5 17	jmp $17b5			jmp 	MInt32Multiply 							; else do it as integer.
.119a					_IsFPOperation:
.119a	8a		txa				txa 								; call the relevant fp routine
.119b	a2 0c		ldx #$0c		ldx	#12
.119d	20 21 19	jsr $1921		jsr	floatingpointHandler
.11a0	aa		tax				tax
.11a1	60		rts				rts
.11a2					DivHandler:
.11a2	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11a5	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11a8	b0 03		bcs $11ad			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11aa	4c 8f 16	jmp $168f			jmp 	MInt32SDivide 							; else do it as integer.
.11ad					_IsFPOperation:
.11ad	8a		txa				txa 								; call the relevant fp routine
.11ae	a2 08		ldx #$08		ldx	#8
.11b0	20 21 19	jsr $1921		jsr	floatingpointHandler
.11b3	aa		tax				tax
.11b4	60		rts				rts
.11b5					ModHandler:
.11b5	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11b8	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11bb	b0 03		bcs $11c0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11bd	4c 0d 17	jmp $170d			jmp 	MInt32Modulus 							; else do it as integer.
.11c0					_IsFPOperation:
.11c0	8a		txa				txa 								; call the relevant fp routine
.11c1	a2 0a		ldx #$0a		ldx	#10
.11c3	20 21 19	jsr $1921		jsr	floatingpointHandler
.11c6	aa		tax				tax
.11c7	60		rts				rts
.11c8					XorHandler:
.11c8	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11cb	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11ce	b0 03		bcs $11d3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11d0	4c 41 16	jmp $1641			jmp 	MInt32Xor 							; else do it as integer.
.11d3					_IsFPOperation:
.11d3	8a		txa				txa 								; call the relevant fp routine
.11d4	a2 0a		ldx #$0a		ldx	#10
.11d6	20 21 19	jsr $1921		jsr	floatingpointHandler
.11d9	aa		tax				tax
.11da	60		rts				rts
.11db					OrHandler:
.11db	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11de	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11e1	b0 03		bcs $11e6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11e3	4c 28 16	jmp $1628			jmp 	MInt32Or 							; else do it as integer.
.11e6					_IsFPOperation:
.11e6	8a		txa				txa 								; call the relevant fp routine
.11e7	a2 0a		ldx #$0a		ldx	#10
.11e9	20 21 19	jsr $1921		jsr	floatingpointHandler
.11ec	aa		tax				tax
.11ed	60		rts				rts
.11ee					AndHandler:
.11ee	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11f1	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11f4	b0 03		bcs $11f9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11f6	4c 0f 16	jmp $160f			jmp 	MInt32And 							; else do it as integer.
.11f9					_IsFPOperation:
.11f9	8a		txa				txa 								; call the relevant fp routine
.11fa	a2 0a		ldx #$0a		ldx	#10
.11fc	20 21 19	jsr $1921		jsr	floatingpointHandler
.11ff	aa		tax				tax
.1200	60		rts				rts
.1201					ShlHandler:
.1201	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1204	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1207	b0 03		bcs $120c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1209	4c 82 12	jmp $1282			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.120c					_IsFPOperation:
.120c	8a		txa				txa 								; call the relevant fp routine
.120d	a2 0a		ldx #$0a		ldx	#10
.120f	20 21 19	jsr $1921		jsr	floatingpointHandler
.1212	aa		tax				tax
.1213	60		rts				rts
.1214					ShrHandler:
.1214	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1217	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.121a	b0 03		bcs $121f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.121c	4c 85 12	jmp $1285			jmp 	MInt32ShiftRightX 							; else do it as integer.
.121f					_IsFPOperation:
.121f	8a		txa				txa 								; call the relevant fp routine
.1220	a2 0a		ldx #$0a		ldx	#10
.1222	20 21 19	jsr $1921		jsr	floatingpointHandler
.1225	aa		tax				tax
.1226	60		rts				rts
.1227					WordRefHandler:
.1227	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.122a	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.122d	b0 03		bcs $1232			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.122f	4c 74 12	jmp $1274			jmp 	MInt32WordIndirect 							; else do it as integer.
.1232					_IsFPOperation:
.1232	8a		txa				txa 								; call the relevant fp routine
.1233	a2 0a		ldx #$0a		ldx	#10
.1235	20 21 19	jsr $1921		jsr	floatingpointHandler
.1238	aa		tax				tax
.1239	60		rts				rts
.123a					ByteRefHandler:
.123a	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.123d	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1240	b0 03		bcs $1245			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1242	4c 78 12	jmp $1278			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1245					_IsFPOperation:
.1245	8a		txa				txa 								; call the relevant fp routine
.1246	a2 0a		ldx #$0a		ldx	#10
.1248	20 21 19	jsr $1921		jsr	floatingpointHandler
.124b	aa		tax				tax
.124c	60		rts				rts
.124d					PowerHandler:
.124d	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1250	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1253	b0 03		bcs $1258			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1255	4c 60 12	jmp $1260			jmp 	PowerInteger 							; else do it as integer.
.1258					_IsFPOperation:
.1258	8a		txa				txa 								; call the relevant fp routine
.1259	a2 16		ldx #$16		ldx	#22
.125b	20 21 19	jsr $1921		jsr	floatingpointHandler
.125e	aa		tax				tax
.125f	60		rts				rts
.1260					PowerInteger:
.1260	20 47 11	jsr $1147			jsr 	BPMakeBothFloat				; make them float.
.1263	8a		txa				txa
.1264	a2 16		ldx #$16		ldx	#22
.1266	20 21 19	jsr $1921		jsr	floatingpointHandler
.1269	a2 14		ldx #$14		ldx	#20
.126b	20 21 19	jsr $1921		jsr	floatingpointHandler
.126e	aa		tax				tax
.126f	a9 00		lda #$00			lda 	#0 							; make type integer
.1271	95 40		sta $40,x			sta 	esType,x
.1273	60		rts				rts
.1274					Mint32WordIndirect:
.1274	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1276	d0 02		bne $127a			bne 	Min32Indirect
.1278					Mint32ByteIndirect:
.1278	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.127a					Min32Indirect:
.127a	48		pha				pha 								; save the indirection
.127b	20 81 17	jsr $1781			jsr 	MInt32Add 					; add a!b a?b
.127e	68		pla				pla 								; and set the type to reference.
.127f	95 40		sta $40,x			sta 	esType,x
.1281	60		rts				rts
.1282					Mint32ShiftLeftX:
.1282	18		clc				clc
.1283	90 01		bcc $1286			bcc 	Mint32Shift
.1285					Mint32ShiftRightX:
.1285	38		sec				sec
.1286					Mint32Shift:
.1286	08		php				php 								; save carry flag on stack.
.1287	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1289	15 59		ora $59,x			ora 	esInt2+1,x
.128b	15 61		ora $61,x			ora 	esInt3+1,x
.128d	d0 1e		bne $12ad			bne 	_MShiftZero
.128f	b5 49		lda $49,x			lda 	esInt0+1,x
.1291	c9 20		cmp #$20			cmp 	#32
.1293	b0 18		bcs $12ad			bcs 	_MShiftZero
.1295					_MShiftLoop:
.1295	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1297	f0 12		beq $12ab			beq 	_MShiftExit
.1299	d6 49		dec $49,x			dec 	esInt0+1,x
.129b	28		plp				plp 								; restore and save carry
.129c	08		php				php
.129d	90 06		bcc $12a5			bcc 	_MShiftLeft
.129f	20 ad 18	jsr $18ad			jsr 	Mint32ShiftRight
.12a2	4c 95 12	jmp $1295			jmp 	_MShiftLoop
.12a5					_MShiftLeft:
.12a5	20 a4 18	jsr $18a4			jsr 	Mint32ShiftLeft
.12a8	4c 95 12	jmp $1295			jmp 	_MShiftLoop
.12ab					_MShiftExit:
.12ab	28		plp				plp	 								; throw saved carry and exit
.12ac	60		rts				rts
.12ad					_MShiftZero:
.12ad	4c 8f 18	jmp $188f			jmp 	MInt32False 				; return 0.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/compare.asm

.12b0					PerformComparison:
.12b0	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.12b2	35 41		and $41,x			and 	esType+1,x
.12b4	0a		asl a				asl 	a
.12b5	30 19		bmi $12d0			bmi 	_PCIsString
.12b7	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.12b9	15 41		ora $41,x			ora 	esType+1,x
.12bb	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.12bc	30 1a		bmi $12d8			bmi 	_PCError
.12be	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.12c0	f0 0b		beq $12cd			beq 	_PCIsInteger 				; if not two integers
.12c2	20 47 11	jsr $1147			jsr 	BPMakeBothFloat 			; make both float
.12c5	8a		txa				txa
.12c6	a2 06		ldx #$06		ldx	#6
.12c8	20 21 19	jsr $1921		jsr	floatingpointHandler
.12cb	aa		tax				tax
.12cc	60		rts				rts
.12cd					_PCIsInteger:
.12cd	4c 5a 16	jmp $165a			jmp 	MInt32Compare
.12d0					_PCIsString:
.12d0	8a		txa				txa
.12d1	a2 02		ldx #$02		ldx	#2
.12d3	20 30 19	jsr $1930		jsr	stringHandler
.12d6	aa		tax				tax
.12d7	60		rts				rts
.12d8					_PCError:
.12d8	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.12da	20 1a 19	jsr $191a			jsr 	ErrorHandler
.12dd					CompareEquals:
.12dd	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12e0	c9 00		cmp #$00			cmp 	#$00
.12e2	f0 35		beq $1319			beq  	CompareTrue
.12e4	4c 1c 13	jmp $131c			jmp 	CompareFalse
.12e7					CompareLess:
.12e7	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12ea	c9 ff		cmp #$ff			cmp 	#$FF
.12ec	f0 2b		beq $1319			beq  	CompareTrue
.12ee	4c 1c 13	jmp $131c			jmp 	CompareFalse
.12f1					CompareGreater:
.12f1	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12f4	c9 01		cmp #$01			cmp 	#$01
.12f6	f0 21		beq $1319			beq  	CompareTrue
.12f8	4c 1c 13	jmp $131c			jmp 	CompareFalse
.12fb					CompareNotEquals:
.12fb	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12fe	c9 00		cmp #$00			cmp 	#$00
.1300	d0 17		bne $1319			bne  	CompareTrue
.1302	4c 1c 13	jmp $131c			jmp 	CompareFalse
.1305					CompareGreaterEq:
.1305	20 b0 12	jsr $12b0			jsr 	PerformComparison
.1308	c9 ff		cmp #$ff			cmp 	#$FF
.130a	d0 0d		bne $1319			bne  	CompareTrue
.130c	4c 1c 13	jmp $131c			jmp 	CompareFalse
.130f					CompareLessEq:
.130f	20 b0 12	jsr $12b0			jsr 	PerformComparison
.1312	c9 01		cmp #$01			cmp 	#$01
.1314	d0 03		bne $1319			bne  	CompareTrue
.1316	4c 1c 13	jmp $131c			jmp 	CompareFalse
.1319					CompareTrue:
.1319	4c 8b 18	jmp $188b			jmp 	MInt32True
.131c					CompareFalse:
.131c	4c 8f 18	jmp $188f			jmp 	MInt32False

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/dereference.asm

.131f					DereferenceTwo:
.131f	e8		inx				inx
.1320	20 24 13	jsr $1324			jsr 	DereferenceOne
.1323	ca		dex				dex
.1324					DereferenceOne:
.1324	b5 40		lda $40,x			lda 	esType,x
.1326	10 3d		bpl $1365			bpl 	_DRNotReference 			; is it a reference ?
.1328	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1329	b0 3b		bcs $1366			bcs 	_DRFloatDeReference
.132b	98		tya				tya
.132c	48		pha				pha
.132d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.132f	85 04		sta $04				sta 	temp0
.1331	b5 50		lda $50,x			lda 	esInt1,x
.1333	85 05		sta $05				sta 	temp0+1
.1335	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1337	95 50		sta $50,x			sta 	esInt1,x
.1339	95 58		sta $58,x			sta 	esInt2,x
.133b	95 60		sta $60,x			sta 	esInt3,x
.133d	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.133f	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1341	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1342	30 0d		bmi $1351			bmi 	_DeRefString 				; string, 2 bytes only
.1344	d0 11		bne $1357			bne 	_DeRefByte 					; byte 1 byte only
.1346					_DeRefLong:
.1346	a0 03		ldy #$03			ldy 	#3
.1348	b1 04		lda ($04),y			lda 	(temp0),y
.134a	95 60		sta $60,x			sta 	esInt3,x
.134c	88		dey				dey
.134d	b1 04		lda ($04),y			lda 	(temp0),y
.134f	95 58		sta $58,x			sta 	esInt2,x
.1351					_DeRefString:
.1351	a0 01		ldy #$01			ldy 	#1
.1353	b1 04		lda ($04),y			lda 	(temp0),y
.1355	95 50		sta $50,x			sta 	esInt1,x
.1357					_DeRefByte:
.1357	a0 00		ldy #$00			ldy 	#0
.1359	b1 04		lda ($04),y			lda 	(temp0),y
.135b	95 48		sta $48,x			sta 	esInt0,x
.135d	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.135f	29 40		and #$40			and 	#$40
.1361	95 40		sta $40,x			sta 	esType,x
.1363	68		pla				pla
.1364	a8		tay				tay
.1365					_DRNotReference
.1365	60		rts				rts
.1366					_DRFloatDereference:
.1366	8a		txa				txa
.1367	a2 00		ldx #$00		ldx	#0
.1369	20 21 19	jsr $1921		jsr	floatingpointHandler
.136c	aa		tax				tax
.136d	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.136f	95 40		sta $40,x			sta 	esType,x
.1371	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/evaluate.asm

.1372					EvaluateLevel:
.1372	48		pha				pha 								; save precedence level.
.1373	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1375	95 48		sta $48,x			sta 	esInt0,x
.1377	95 50		sta $50,x			sta 	esInt1,x
.1379	95 58		sta $58,x			sta 	esInt2,x
.137b	95 60		sta $60,x			sta 	esInt3,x
.137d	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.137f	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1381	30 21		bmi $13a4			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1383	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1384	30 0a		bmi $1390			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1386	8a		txa				txa 								; stack level in X
.1387	a2 00		ldx #$00		ldx	#0
.1389	20 5a 19	jsr $195a		jsr	variableHandler
.138c	aa		tax				tax
.138d	4c cd 13	jmp $13cd			jmp		_ELHasTerm
.1390					_ELIsConstant:
.1390	4a		lsr a				lsr 	a 							; get the value back
.1391	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1393	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1395					_ELCheckNext:
.1395	c8		iny				iny 								; look at next
.1396	b1 02		lda ($02),y			lda 	(codePtr),y
.1398	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.139a	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.139c	b0 2f		bcs $13cd			bcs 	_ELHasTerm 					; done getting the constant.
.139e	20 b3 14	jsr $14b3			jsr 	ELShiftByteIn 				; shift byte into position.
.13a1	4c 95 13	jmp $1395			jmp 	_ELCheckNext
.13a4					_ELIsToken:
.13a4	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.13a6	f0 0f		beq $13b7			beq 	_ELIsString
.13a8	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.13aa	d0 5f		bne $140b			bne 	_ELCheckUnary
.13ac	8a		txa				txa 								; put X into A
.13ad	c8		iny				iny 								; skip over the float marker
.13ae	a2 18		ldx #$18		ldx	#24
.13b0	20 21 19	jsr $1921		jsr	floatingpointHandler
.13b3	aa		tax				tax 								; restore X
.13b4	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.13b7					_ELIsString:
.13b7	98		tya				tya 								; address of string is codePtr+y+1
.13b8	38		sec				sec
.13b9	65 02		adc $02				adc 	codePtr
.13bb	95 48		sta $48,x			sta 	esInt0,x
.13bd	a5 03		lda $03				lda 	codePtr+1
.13bf	69 00		adc #$00			adc 	#0
.13c1	95 50		sta $50,x			sta 	esInt1,x
.13c3	a9 40		lda #$40			lda 	#$40 						; set type to string value
.13c5	95 40		sta $40,x			sta 	esType,x
.13c7	c8		iny				iny 								; skip over string.
.13c8	98		tya				tya
.13c9	38		sec				sec									; +1 for the length itself.
.13ca	71 02		adc ($02),y			adc 	(codePtr),y
.13cc	a8		tay				tay 								; and fall through to term loop code.
.13cd					_ELHasTerm:
.13cd	b1 02		lda ($02),y			lda 	(codePtr),y
.13cf	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.13d1	90 04		bcc $13d7			bcc 	_ELPopExit
.13d3	c9 9d		cmp #$9d			cmp 	#TOK_STRUCTST
.13d5	90 02		bcc $13d9			bcc 	_ELHasBinaryTerm
.13d7					_ELPopExit:
.13d7	68		pla				pla
.13d8					_ELExit:
.13d8	60		rts				rts
.13d9					_ELHasBinaryTerm:
.13d9	84 0a		sty $0a				sty 	tempShort 					; save position
.13db	a8		tay				tay 								; use token as an index and get the precedence.
.13dc	b9 5b 14	lda $145b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.13df	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.13e1	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.13e3	68		pla				pla 								; restore current level.
.13e4	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.13e6	b0 f0		bcs $13d8			bcs 	_ELExit
.13e8	48		pha				pha 								; save current level back on the stack.
.13e9	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.13eb	48		pha				pha
.13ec	c8		iny				iny
.13ed	e8		inx				inx 								; calculate the RHS at the operator precedence.
.13ee	a5 0a		lda $0a				lda 	tempShort
.13f0	20 72 13	jsr $1372			jsr 	EvaluateLevel
.13f3	ca		dex				dex
.13f4	68		pla				pla 								; get the operator back out.
.13f5					_ELExecuteA:
.13f5	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.13f7	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.13f8	aa		tax				tax
.13f9	bd 51 10	lda $1051,x			lda 	Group0Vectors,x
.13fc	85 04		sta $04				sta 	temp0
.13fe	bd 52 10	lda $1052,x			lda 	Group0Vectors+1,x
.1401	85 05		sta $05				sta 	temp0+1
.1403	a6 0a		ldx $0a				ldx 	tempShort
.1405	20 4e 14	jsr $144e			jsr 	_ELCallTemp0
.1408	4c cd 13	jmp $13cd			jmp 	_ELHasTerm 					; and loop back round.
.140b					_ELCheckUnary:
.140b	c8		iny				iny 								; skip over token.
.140c	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.140e	f0 15		beq $1425			beq 	_ELMinus
.1410	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1412	f0 28		beq $143c			beq 	_ELIndirect
.1414	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1416	f0 24		beq $143c			beq 	_ELIndirect
.1418	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.141a	90 04		bcc $1420			bcc 	_ELUSyntax
.141c	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.141e	90 d5		bcc $13f5			bcc 	_ELExecuteA 				; if so do that token.
.1420					_ELUSyntax:
.1420	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1422	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1425					_ELMinus:
.1425	20 63 14	jsr $1463			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1428	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.142a	f0 0a		beq $1436			beq 	_ELMinusInteger
.142c	8a		txa				txa
.142d	a2 0e		ldx #$0e		ldx	#14
.142f	20 21 19	jsr $1921		jsr	floatingpointHandler
.1432	aa		tax				tax
.1433	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.1436					_ELMinusInteger:
.1436	20 49 18	jsr $1849			jsr 	MInt32Negate 				; do int negate
.1439	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.143c					_ELIndirect:
.143c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.143d	20 6c 14	jsr $146c			jsr 	EvaluateIntegerTerm 		; integer address
.1440	68		pla				pla
.1441	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1443	f0 02		beq $1447			beq 	_ELHaveModifier
.1445	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1447					_ELHaveModifier:
.1447	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1449	95 40		sta $40,x			sta 	esType,x
.144b	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.144e					_ELCallTemp0:
.144e	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1451					UnaryParenthesis:
.1451	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1453	20 72 13	jsr $1372			jsr 	EvaluateLevel
.1456	20 f7 18	jsr $18f7			jsr 	CheckRightParen 			; check for )
.1459	60		rts				rts
.145a					EvaluateTerm:
.145a	a9 0f		lda #$0f			lda 	#15
.145c	20 72 13	jsr $1372			jsr 	EvaluateLevel
.145f	20 24 13	jsr $1324			jsr 	DereferenceOne
.1462	60		rts				rts
.1463					EvaluateNumericTerm:
.1463	20 5a 14	jsr $145a			jsr 	EvaluateTerm
.1466	b5 40		lda $40,x			lda 	esType,x
.1468	0a		asl a				asl 	a 							; see if it's a string.
.1469	30 09		bmi $1474			bmi 	ENTType
.146b	60		rts				rts
.146c					EvaluateIntegerTerm:
.146c	20 5a 14	jsr $145a			jsr 	EvaluateTerm
.146f	b5 40		lda $40,x			lda 	esType,x
.1471	d0 01		bne $1474			bne 	ENTType
.1473	60		rts				rts
.1474					ENTType:
.1474	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1476	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1479					EvaluateRoot:
.1479	a2 00		ldx #$00			ldx 	#0
.147b					Evaluate:
.147b	a9 00		lda #$00			lda 	#0
.147d	20 72 13	jsr $1372			jsr 	EvaluateLevel
.1480	20 24 13	jsr $1324			jsr 	DereferenceOne
.1483	60		rts				rts
.1484					EvaluateNumeric:
.1484	20 7b 14	jsr $147b			jsr 	Evaluate
.1487	b5 40		lda $40,x			lda 	esType,x
.1489	0a		asl a				asl 	a 							; see if it's a string.
.148a	30 e8		bmi $1474			bmi 	ENTType
.148c	4a		lsr a				lsr 	a 							; shift float flag into carry.
.148d	4a		lsr a				lsr 	a
.148e	60		rts				rts
.148f					EvaluateString:
.148f	20 7b 14	jsr $147b			jsr 	Evaluate
.1492	b5 40		lda $40,x			lda 	esType,x
.1494	0a		asl a				asl 	a 							; see if it's a string.
.1495	10 dd		bpl $1474			bpl 	ENTType
.1497	60		rts				rts
.1498					EvaluateInteger:
.1498	20 7b 14	jsr $147b			jsr 	Evaluate
.149b	b5 40		lda $40,x			lda 	esType,x
.149d	d0 d5		bne $1474			bne 	ENTType
.149f	60		rts				rts
.14a0					EvaluateSmallInteger:
.14a0	20 98 14	jsr $1498			jsr 	EvaluateInteger
.14a3	b5 41		lda $41,x			lda 	esType+1,x
.14a5	15 42		ora $42,x			ora 	esType+2,x
.14a7	15 43		ora $43,x			ora 	esType+3,x
.14a9	d0 03		bne $14ae			bne 	_ESIValue
.14ab	b5 40		lda $40,x			lda 	esType,x
.14ad	60		rts				rts
.14ae					_ESIValue:
.14ae	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.14b0	20 1a 19	jsr $191a			jsr 	ErrorHandler
.14b3					ELShiftByteIn:
.14b3	48		pha				pha 								; save bits to shift in.
.14b4	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.14b6	48		pha				pha
.14b7	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.14b9	95 60		sta $60,x			sta 	esInt3,x
.14bb	b5 50		lda $50,x			lda 	esInt1,x
.14bd	95 58		sta $58,x			sta 	esInt2,x
.14bf	b5 48		lda $48,x			lda 	esInt0,x
.14c1	95 50		sta $50,x			sta 	esInt1,x
.14c3	a9 00		lda #$00			lda 	#0
.14c5	95 48		sta $48,x			sta 	esInt0,x
.14c7	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.14c8	29 03		and #$03			and 	#3 							; only want lower 2 bits
.14ca	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.14cc					_ELShiftLoop:
.14cc	4a		lsr a				lsr 	a
.14cd	76 60		ror $60,x			ror 	esInt3,x
.14cf	76 58		ror $58,x			ror 	esInt2,x
.14d1	76 50		ror $50,x			ror 	esInt1,x
.14d3	76 48		ror $48,x			ror 	esInt0,x
.14d5	c9 01		cmp #$01			cmp 	#1
.14d7	d0 f3		bne $14cc			bne 	_ELShiftLoop
.14d9	68		pla				pla 								; get original 6 bit value and OR in.
.14da	29 3f		and #$3f			and 	#$3F
.14dc	15 48		ora $48,x			ora 	esInt0,x
.14de	95 48		sta $48,x			sta 	esInt0,x
.14e0	60		rts				rts
.14e1					ELBinaryOperatorInfo:

;******  Processing file: ../source/main/evaluate/../../generated/binarystructinfo.inc

>14e1	01					.byte	$01			; $86 and
>14e2	01					.byte	$01			; $87 or
>14e3	01					.byte	$01			; $88 xor
>14e4	02					.byte	$02			; $89 >=
>14e5	02					.byte	$02			; $8a <=
>14e6	02					.byte	$02			; $8b >
>14e7	02					.byte	$02			; $8c <
>14e8	02					.byte	$02			; $8d =
>14e9	02					.byte	$02			; $8e <>
>14ea	03					.byte	$03			; $8f +
>14eb	03					.byte	$03			; $90 -
>14ec	04					.byte	$04			; $91 >>
>14ed	04					.byte	$04			; $92 <<
>14ee	04					.byte	$04			; $93 *
>14ef	04					.byte	$04			; $94 /
>14f0	04					.byte	$04			; $95 mod
>14f1	05					.byte	$05			; $96 ^
>14f2	06					.byte	$06			; $97 !
>14f3	06					.byte	$06			; $98 ?
>14f4	82					.byte	$82			; $99 repeat
>14f5	82					.byte	$82			; $9a while
>14f6	82					.byte	$82			; $9b for
>14f7	82					.byte	$82			; $9c if
>14f8	80					.byte	$80			; $9d until
>14f9	80					.byte	$80			; $9e wend
>14fa	80					.byte	$80			; $9f next
>14fb	80					.byte	$80			; $a0 then
>14fc	80					.byte	$80			; $a1 endif

;******  Return to file: ../source/main/evaluate/evaluate.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unary.asm

.14fd					UnaryLen:
.14fd	20 0b 15	jsr $150b			jsr 	ULStart
.1500					ULFinish:
.1500	b1 04		lda ($04),y			lda 	(temp0),y
.1502	a4 0a		ldy $0a				ldy 	tempShort
.1504	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.1507	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.150a	60		rts				rts
.150b	20 8f 14	jsr $148f	ULStart:jsr 	EvaluateString
.150e	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1510	85 04		sta $04				sta 	temp0
.1512	b5 50		lda $50,x			lda 	esInt1,x
.1514	85 05		sta $05				sta 	temp0+1
.1516	84 0a		sty $0a				sty 	tempShort 					; get length
.1518	a0 00		ldy #$00			ldy 	#0
.151a	60		rts				rts
.151b					UnaryAsc:
.151b	20 0b 15	jsr $150b			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.151e	b1 04		lda ($04),y			lda 	(temp0),y
.1520	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1521	c9 00		cmp #$00			cmp 	#0
.1523	d0 db		bne $1500			bne 	ULFinish
.1525	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1527	20 1a 19	jsr $191a			jsr 	ErrorHandler
.152a					UnaryAbs:
.152a	20 84 14	jsr $1484			jsr 	EvaluateNumeric
.152d	b0 07		bcs $1536			bcs 	_UAFloat
.152f	20 44 18	jsr $1844			jsr 	MInt32Absolute
.1532	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.1535	60		rts				rts
.1536					_UAFloat:
.1536	8a		txa				txa
.1537	a2 02		ldx #$02		ldx	#2
.1539	20 21 19	jsr $1921		jsr	floatingpointHandler
.153c	aa		tax				tax
.153d	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.1540	60		rts				rts
.1541					UnarySgn:
.1541	20 84 14	jsr $1484			jsr 	EvaluateNumeric
.1544	b0 07		bcs $154d			bcs 	_USFloat
.1546	20 7c 18	jsr $187c			jsr 	MInt32Sign
.1549	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.154c	60		rts				rts
.154d					_USFloat:
.154d	8a		txa				txa
.154e	a2 10		ldx #$10		ldx	#16
.1550	20 21 19	jsr $1921		jsr	floatingpointHandler
.1553	aa		tax				tax
.1554	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.1557	60		rts				rts
.1558					UnaryPeek:
.1558	20 84 15	jsr $1584			jsr 	PDLCode
.155b	4c 78 15	jmp $1578			jmp 	PDLByte0
.155e					UnaryDeek:
.155e	20 84 15	jsr $1584			jsr 	PDLCode
.1561	4c 72 15	jmp $1572			jmp 	PDLByte1
.1564					UnaryLeek:
.1564	20 84 15	jsr $1584			jsr 	PDLCode
.1567	a0 03		ldy #$03			ldy 	#3
.1569	b1 04		lda ($04),y			lda 	(temp0),y
.156b	95 60		sta $60,x			sta 	esInt3,x
.156d	88		dey				dey
.156e	b1 04		lda ($04),y			lda 	(temp0),y
.1570	95 58		sta $58,x			sta 	esInt2,x
.1572					PDLByte1:
.1572	a0 01		ldy #$01			ldy 	#1
.1574	b1 04		lda ($04),y			lda 	(temp0),y
.1576	95 50		sta $50,x			sta 	esInt1,x
.1578					PDLByte0:
.1578	a0 00		ldy #$00			ldy 	#0
.157a	b1 04		lda ($04),y			lda 	(temp0),y
.157c	95 48		sta $48,x			sta 	esInt0,x
.157e	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1580	20 f7 18	jsr $18f7			jsr 	CheckRightParen 			; check right and return
.1583	60		rts				rts
.1584					PDLCode:
.1584	20 98 14	jsr $1498			jsr 	EvaluateInteger
.1587	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1589	85 04		sta $04				sta 	temp0
.158b	b5 50		lda $50,x			lda 	esInt1,x
.158d	85 05		sta $05				sta 	temp0+1
.158f	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1591	95 50		sta $50,x			sta 	esInt1,x
.1593	95 58		sta $58,x			sta 	esInt2,x
.1595	95 60		sta $60,x			sta 	esInt3,x
.1597	84 0a		sty $0a				sty 	tempShort 					; save Y
.1599	60		rts				rts
.159a					Unary_Random:
.159a	20 bf 18	jsr $18bf			jsr 	MInt32Random 				; generate random number.
.159d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.159f	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.15a1	f0 08		beq $15ab			beq 	_URExit
.15a3	e8		inx				inx 								; load range 0..r-1 into +1
.15a4	20 98 14	jsr $1498			jsr 	EvaluateInteger
.15a7	ca		dex				dex
.15a8	20 0d 17	jsr $170d			jsr 	MInt32Modulus 				; calculate random % modulus
.15ab					_URExit:
.15ab	20 f7 18	jsr $18f7			jsr 	CheckRightParen 			; check right and return
.15ae	60		rts				rts
.15af					Unary_Min:
.15af	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.15b1	d0 02		bne $15b5			bne 	UnaryMBody
.15b3					Unary_Max:
.15b3	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.15b5					UnaryMBody:
.15b5	48		pha				pha 								; save comparator on stack.
.15b6	20 7b 14	jsr $147b			jsr 	Evaluate 					; get the first thing to check
.15b9					_UnaryMLoop:
.15b9	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.15bb	c8		iny				iny
.15bc	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.15be	f0 09		beq $15c9			beq 	_UnaryMExit
.15c0	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.15c2	f0 07		beq $15cb			beq 	_UnaryMCompare
.15c4	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.15c6	20 1a 19	jsr $191a			jsr 	ErrorHandler
.15c9					_UnaryMExit:
.15c9	68		pla				pla 								; throw comparator and return.
.15ca	60		rts				rts
.15cb					_UnaryMCompare:
.15cb	e8		inx				inx 								; get the 2nd thing to evaluate
.15cc	20 7b 14	jsr $147b			jsr 	Evaluate
.15cf	ca		dex				dex
.15d0	20 b0 12	jsr $12b0			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.15d3	85 0a		sta $0a				sta 	tempShort 					; save result
.15d5	68		pla				pla 								; get what we need
.15d6	48		pha				pha
.15d7	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.15d9	d0 de		bne $15b9			bne 	_UnaryMLoop 				; no, try another value.
.15db	20 8f 18	jsr $188f			jsr 	MInt32False 				; promote 2nd to 1st.
.15de	20 81 17	jsr $1781			jsr 	MInt32Add
.15e1	4c b9 15	jmp $15b9			jmp 	_UnaryMLoop
.15e4					Unary_Page:
.15e4	20 8f 18	jsr $188f			jsr 	MInt32False 				; zero
.15e7	ad 68 08	lda $0868			lda 	basePage 					; copy base page address in.
.15ea	95 48		sta $48,x			sta 	esInt0,x
.15ec	ad 69 08	lda $0869			lda 	basePage+1
.15ef	95 50		sta $50,x			sta 	esInt1,x
.15f1	60		rts				rts
.15f2					UnaryReference:
.15f2	a9 0f		lda #$0f			lda 	#15
.15f4	20 72 13	jsr $1372			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.15f7	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.15f9	10 05		bpl $1600			bpl 	UType
.15fb	a9 00		lda #$00			lda 	#0 							; make it an integer
.15fd	95 40		sta $40,x			sta 	esType,x
.15ff	60		rts				rts
.1600					UType:
.1600	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1602	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1605					UnaryHexMarker:
.1605	4c 6c 14	jmp $146c			jmp 	EvaluateIntegerTerm
.1608					UnaryComplement:
.1608	20 6c 14	jsr $146c			jsr 	EvaluateIntegerTerm
.160b	20 63 18	jsr $1863			jsr 	MInt32Not
.160e	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32binary.asm

.160f					MInt32And:
.160f	b5 48		lda $48,x			lda 	esInt0,x
.1611	35 49		and $49,x			and 	esInt0+1,x
.1613	95 48		sta $48,x			sta 	esInt0,x
.1615	b5 50		lda $50,x			lda 	esInt1,x
.1617	35 51		and $51,x			and 	esInt1+1,x
.1619	95 50		sta $50,x			sta 	esInt1,x
.161b	b5 58		lda $58,x			lda 	esInt2,x
.161d	35 59		and $59,x			and 	esInt2+1,x
.161f	95 58		sta $58,x			sta 	esInt2,x
.1621	b5 60		lda $60,x			lda 	esInt3,x
.1623	35 61		and $61,x			and 	esInt3+1,x
.1625	95 60		sta $60,x			sta 	esInt3,x
.1627	60		rts				rts
.1628					MInt32Or:
.1628	b5 48		lda $48,x			lda 	esInt0,x
.162a	15 49		ora $49,x			ora 	esInt0+1,x
.162c	95 48		sta $48,x			sta 	esInt0,x
.162e	b5 50		lda $50,x			lda 	esInt1,x
.1630	15 51		ora $51,x			ora 	esInt1+1,x
.1632	95 50		sta $50,x			sta 	esInt1,x
.1634	b5 58		lda $58,x			lda 	esInt2,x
.1636	15 59		ora $59,x			ora 	esInt2+1,x
.1638	95 58		sta $58,x			sta 	esInt2,x
.163a	b5 60		lda $60,x			lda 	esInt3,x
.163c	15 61		ora $61,x			ora 	esInt3+1,x
.163e	95 60		sta $60,x			sta 	esInt3,x
.1640	60		rts				rts
.1641					MInt32Xor:
.1641	b5 48		lda $48,x			lda 	esInt0,x
.1643	55 49		eor $49,x			eor 	esInt0+1,x
.1645	95 48		sta $48,x			sta 	esInt0,x
.1647	b5 50		lda $50,x			lda 	esInt1,x
.1649	55 51		eor $51,x			eor 	esInt1+1,x
.164b	95 50		sta $50,x			sta 	esInt1,x
.164d	b5 58		lda $58,x			lda 	esInt2,x
.164f	55 59		eor $59,x			eor 	esInt2+1,x
.1651	95 58		sta $58,x			sta 	esInt2,x
.1653	b5 60		lda $60,x			lda 	esInt3,x
.1655	55 61		eor $61,x			eor 	esInt3+1,x
.1657	95 60		sta $60,x			sta 	esInt3,x
.1659	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32compare.asm

.165a					MInt32Compare:
.165a	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.165c	d5 49		cmp $49,x			cmp 	esInt0+1,x
.165e	d0 13		bne $1673			bne 	MInt32Compare2
.1660	b5 50		lda $50,x			lda 	esInt1,x
.1662	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1664	d0 0d		bne $1673			bne 	MInt32Compare2
.1666	b5 58		lda $58,x			lda 	esInt2,x
.1668	d5 59		cmp $59,x			cmp 	esInt2+1,x
.166a	d0 07		bne $1673			bne 	MInt32Compare2
.166c	b5 60		lda $60,x			lda 	esInt3,x
.166e	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1670	d0 01		bne $1673			bne 	MInt32Compare2
.1672	60		rts				rts
.1673					MInt32Compare2:
.1673	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1675	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1677	b5 50		lda $50,x			lda		esInt1,x
.1679	f5 51		sbc $51,x			sbc 	esInt1+1,x
.167b	b5 58		lda $58,x			lda		esInt2,x
.167d	f5 59		sbc $59,x			sbc 	esInt2+1,x
.167f	b5 60		lda $60,x			lda		esInt3,x
.1681	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1683	50 02		bvc $1687			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1685	49 80		eor #$80			eor 	#$80
.1687					_I32LNoOverflow
.1687	30 03		bmi $168c			bmi 	MInt32CLess					; if -ve then return $FF
.1689	a9 01		lda #$01			lda 	#$01						; else return $01
.168b	60		rts				rts
.168c					MInt32CLess:
.168c	a9 ff		lda #$ff			lda 	#$FF
.168e	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32divide.asm

.168f					MInt32SDivide:
.168f	98		tya				tya  								; save Y, which is the count of negations
.1690	48		pha				pha
.1691	a0 00		ldy #$00			ldy 	#0 							; zero count
.1693	20 ab 16	jsr $16ab			jsr 	_MInt32SRemSign 			; unsign TOS
.1696	e8		inx				inx 								; unsign TOS+1
.1697	20 ab 16	jsr $16ab			jsr 	_MInt32SRemSign
.169a	ca		dex				dex
.169b	98		tya				tya 								; save sign count on stack
.169c	48		pha				pha
.169d	20 b4 16	jsr $16b4			jsr 	MInt32UDivide 				; unsigned division
.16a0	68		pla				pla 								; get sign count back
.16a1	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.16a3	f0 03		beq $16a8			beq 	_I32SNoNeg
.16a5	20 49 18	jsr $1849			jsr 	MInt32Negate
.16a8					_I32SNoNeg:
.16a8	68		pla				pla 								; restoe Y and exit
.16a9	a8		tay				tay
.16aa	60		rts				rts
.16ab					_MInt32SRemSign:
.16ab	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.16ad	10 04		bpl $16b3			bpl 	_MInt32SRSExit
.16af	c8		iny				iny 								; increment the sign count
.16b0	20 49 18	jsr $1849			jsr 	MInt32Negate 				; negate the value.
.16b3					_MInt32SRSExit:
.16b3	60		rts				rts
.16b4					MInt32UDivide:
.16b4	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.16b6	15 51		ora $51,x			ora 	esInt1+1,x
.16b8	15 52		ora $52,x			ora 	esInt1+2,x
.16ba	15 53		ora $53,x			ora 	esInt1+3,x
.16bc	f0 4a		beq $1708			beq 	_MInt32DZero
.16be	e8		inx				inx 								; clear A
.16bf	e8		inx				inx
.16c0	20 8f 18	jsr $188f			jsr 	MInt32False
.16c3	ca		dex				dex
.16c4	ca		dex				dex
.16c5	98		tya				tya 								; save Y on the stack
.16c6	48		pha				pha
.16c7	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.16c9					_MInt32UDLoop:
.16c9	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.16cb	36 50		rol $50,x			rol 	esInt1,x
.16cd	36 58		rol $58,x			rol 	esInt2,x
.16cf	36 60		rol $60,x			rol 	esInt3,x
.16d1	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.16d3	36 52		rol $52,x			rol 	esInt1+2,x
.16d5	36 5a		rol $5a,x			rol 	esInt2+2,x
.16d7	36 62		rol $62,x			rol 	esInt3+2,x
.16d9	38		sec				sec 								; calculate A-M saving result on the stack
.16da	b5 4a		lda $4a,x			lda 	esInt0+2,x
.16dc	f5 49		sbc $49,x			sbc 	esInt0+1,x
.16de	48		pha				pha
.16df	b5 52		lda $52,x			lda 	esInt1+2,x
.16e1	f5 51		sbc $51,x			sbc 	esInt1+1,x
.16e3	48		pha				pha
.16e4	b5 5a		lda $5a,x			lda 	esInt2+2,x
.16e6	f5 59		sbc $59,x			sbc 	esInt2+1,x
.16e8	48		pha				pha
.16e9	b5 62		lda $62,x			lda 	esInt3+2,x
.16eb	f5 61		sbc $61,x			sbc 	esInt3+1,x
.16ed	90 10		bcc $16ff			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.16ef	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.16f1	68		pla				pla
.16f2	95 5a		sta $5a,x			sta 	esInt2+2,x
.16f4	68		pla				pla
.16f5	95 52		sta $52,x			sta 	esInt1+2,x
.16f7	68		pla				pla
.16f8	95 4a		sta $4a,x			sta 	esInt0+2,x
.16fa	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.16fc	4c 02 17	jmp $1702			jmp 	_MInt32Next 					; do the next iteration
.16ff					_MInt32NoSubtract:
.16ff	68		pla				pla
.1700	68		pla				pla
.1701	68		pla				pla
.1702					_MInt32Next:
.1702	88		dey				dey 								; do this 32 times.
.1703	d0 c4		bne $16c9			bne 	_MInt32UDLoop
.1705	68		pla				pla 								; restore Y and exit
.1706	a8		tay				tay
.1707	60		rts				rts
.1708					_MInt32DZero:
.1708	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.170a	20 1a 19	jsr $191a			jsr 	ErrorHandler
.170d					MInt32Modulus:
.170d	20 b4 16	jsr $16b4			jsr 	MInt32UDivide 				; do the division.
.1710	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1712	95 60		sta $60,x			sta 	esInt3,x
.1714	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1716	95 58		sta $58,x			sta 	esInt2,x
.1718	b5 52		lda $52,x			lda 	esInt1+2,x
.171a	95 50		sta $50,x			sta 	esInt1,x
.171c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.171e	95 48		sta $48,x			sta 	esInt0,x
.1720	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32fromstr.asm

.1721					MInt32FromString:
.1721	85 0a		sta $0a				sta 	tempShort 					; save base
.1723	98		tya				tya
.1724	48		pha				pha
.1725	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1727	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1729	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.172b	d0 01		bne $172e			bne 	_I32FSNotNegative
.172d	c8		iny				iny 								; if so consume it.
.172e					_I32FSNotNegative:
.172e	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1730	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1732	f0 02		beq $1736			beq 	_I32FSNN2
.1734	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1736					_I32FSNN2:
.1736	48		pha				pha 								; save base + final sign on stack.
.1737	20 8f 18	jsr $188f			jsr 	MInt32False 					; zero the return value.
.173a					I32FSMainLoop:
.173a	68		pla				pla 								; get the base back into tempshort
.173b	48		pha				pha
.173c	29 7f		and #$7f			and 	#$7F
.173e	85 0a		sta $0a				sta 	tempShort
.1740	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1742	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1744	90 02		bcc $1748			bcc 	_I32FSNotLC
.1746	e9 20		sbc #$20			sbc 	#32
.1748					_I32FSNotLC:
.1748	38		sec				sec 								; subtract 48 (ASCII "0")
.1749	e9 30		sbc #$30			sbc 	#"0"
.174b	90 26		bcc $1773			bcc 	_I32FSDone 					; nothing more to do.
.174d	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.174f	90 06		bcc $1757			bcc 	_I32FSValidate
.1751	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1753	90 1e		bcc $1773			bcc 	_I32FSDone
.1755	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1757					_I32FSValidate:
.1757	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1759	b0 18		bcs $1773			bcs 	_I32FSDone 					; sorry, too large for this base.
.175b	48		pha				pha 								; save the new digit value.
.175c	e8		inx				inx 								; put base into next slot.
.175d	a5 0a		lda $0a				lda 	tempShort
.175f	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.1762	ca		dex				dex
.1763	20 b5 17	jsr $17b5			jsr 	MInt32Multiply 				; multiply current by the base
.1766	e8		inx				inx
.1767	68		pla				pla  								; put additive into next slot
.1768	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.176b	ca		dex				dex
.176c	20 81 17	jsr $1781			jsr 	MInt32Add 					; and add it
.176f	c8		iny				iny 								; look at next character
.1770	4c 3a 17	jmp $173a			jmp 	I32FSMainLoop 				; and go round again.
.1773					_I32FSDone:
.1773	68		pla				pla 								; get base/final sign back
.1774	10 04		bpl $177a			bpl 	_I32FSNN3
.1776	88		dey				dey 								; one fewer character to allow for the - prefix.
.1777	20 49 18	jsr $1849			jsr 	MInt32Negate 				; negate the result.
.177a					_I32FSNN3:
.177a	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.177c	68		pla				pla
.177d	a8		tay				tay
.177e	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1780	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32math.asm

.1781					MInt32Add:
.1781	18		clc				clc
.1782	b5 48		lda $48,x			lda 	esInt0,x
.1784	75 49		adc $49,x			adc 	esInt0+1,x
.1786	95 48		sta $48,x			sta 	esInt0,x
.1788	b5 50		lda $50,x			lda 	esInt1,x
.178a	75 51		adc $51,x			adc 	esInt1+1,x
.178c	95 50		sta $50,x			sta 	esInt1,x
.178e	b5 58		lda $58,x			lda 	esInt2,x
.1790	75 59		adc $59,x			adc 	esInt2+1,x
.1792	95 58		sta $58,x			sta 	esInt2,x
.1794	b5 60		lda $60,x			lda 	esInt3,x
.1796	75 61		adc $61,x			adc 	esInt3+1,x
.1798	95 60		sta $60,x			sta 	esInt3,x
.179a	60		rts				rts
.179b					MInt32Sub:
.179b	38		sec				sec
.179c	b5 48		lda $48,x			lda 	esInt0,x
.179e	f5 49		sbc $49,x			sbc 	esInt0+1,x
.17a0	95 48		sta $48,x			sta 	esInt0,x
.17a2	b5 50		lda $50,x			lda 	esInt1,x
.17a4	f5 51		sbc $51,x			sbc 	esInt1+1,x
.17a6	95 50		sta $50,x			sta 	esInt1,x
.17a8	b5 58		lda $58,x			lda 	esInt2,x
.17aa	f5 59		sbc $59,x			sbc 	esInt2+1,x
.17ac	95 58		sta $58,x			sta 	esInt2,x
.17ae	b5 60		lda $60,x			lda 	esInt3,x
.17b0	f5 61		sbc $61,x			sbc 	esInt3+1,x
.17b2	95 60		sta $60,x			sta 	esInt3,x
.17b4	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32multiply.asm

.17b5					MInt32Multiply:
.17b5	e8		inx				inx 								; copy 2nd -> 3rd
.17b6	20 db 17	jsr $17db			jsr 	MInt32CopyUp
.17b9	ca		dex				dex
.17ba	20 db 17	jsr $17db			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.17bd	20 8f 18	jsr $188f			jsr 	MInt32False 					; zero 1st.
.17c0					_I32Loop:
.17c0	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.17c2	29 01		and #$01			and 	#1
.17c4	f0 03		beq $17c9			beq 	_I32NoAdd 					; if set
.17c6	20 81 17	jsr $1781			jsr 	MInt32Add 					; add 2nd to 1st.
.17c9					_I32NoAdd:
.17c9	e8		inx				inx 								; shift 2nd left
.17ca	20 a4 18	jsr $18a4			jsr 	MInt32ShiftLeft
.17cd	e8		inx				inx  								; shift 3rd right
.17ce	20 ad 18	jsr $18ad			jsr 	MInt32ShiftRight
.17d1	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; check if zero.
.17d4	08		php				php 								; save status bits
.17d5	ca		dex				dex 	 							; point back to 1st
.17d6	ca		dex				dex
.17d7	28		plp				plp 								; get status bits
.17d8	d0 e6		bne $17c0			bne 	_I32Loop 					; if non-zero keep going.
.17da	60		rts				rts
.17db					MInt32CopyUp:
.17db	b5 48		lda $48,x			lda 	esInt0,x
.17dd	95 49		sta $49,x			sta 	esInt0+1,x
.17df	b5 50		lda $50,x			lda 	esInt1,x
.17e1	95 51		sta $51,x			sta 	esInt1+1,x
.17e3	b5 58		lda $58,x			lda 	esInt2,x
.17e5	95 59		sta $59,x			sta 	esInt2+1,x
.17e7	b5 60		lda $60,x			lda 	esInt3,x
.17e9	95 61		sta $61,x			sta 	esInt3+1,x
.17eb	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32tostr.asm

>086a					MCharCount:	.fill 	1						; count of converted characters
.17ec					MInt32ToString:
.17ec	48		pha				pha 								; save base
.17ed	85 0a		sta $0a				sta 	tempShort 					; save target base.
.17ef	a9 00		lda #$00			lda 	#0
.17f1	8d 6a 08	sta $086a			sta 	MCharCount 					; clear character count.
.17f4	98		tya				tya
.17f5	48		pha				pha
.17f6	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.17f8	10 10		bpl $180a			bpl 	_I32TSUnsigned
.17fa	48		pha				pha 								; save base on stack.
.17fb	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.17fd	10 08		bpl $1807			bpl 	_I32TSNoFlip
.17ff	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1801	20 36 18	jsr $1836			jsr 	MI32WriteCharacter
.1804	20 49 18	jsr $1849			jsr 	MInt32Negate 				; negate the value.
.1807					_I32TSNoFlip:
.1807	68		pla				pla 								; get the base back
.1808	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.180a					_I32TSUnsigned:
.180a	20 11 18	jsr $1811			jsr 	MI32DivideWrite 				; recursive code to output string.
.180d	68		pla				pla
.180e	a8		tay				tay
.180f	68		pla				pla
.1810	60		rts				rts
.1811					MI32DivideWrite:
.1811	48		pha				pha 								; save the divisor/base
.1812	e8		inx				inx 								; write in the dividing position.
.1813	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.1816	ca		dex				dex
.1817	20 b4 16	jsr $16b4			jsr 	MInt32UDivide 				; divide number by base.
.181a	68		pla				pla 								; get the base into Y
.181b	a8		tay				tay
.181c	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.181e	48		pha				pha
.181f	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; is the result zero ?
.1822	f0 04		beq $1828			beq 	_I32NoRecurse 				; if so, don't recurse.
.1824	98		tya				tya 								; put base into A
.1825	20 11 18	jsr $1811			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1828					_I32NoRecurse:
.1828	68		pla				pla 								; get the remainder back
.1829	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.182b	90 02		bcc $182f			bcc 	_I32NotHex
.182d	69 06		adc #$06			adc 	#7-1
.182f					_I32NotHex:
.182f	18		clc				clc 								; make it ASCII
.1830	69 30		adc #$30			adc 	#48
.1832	20 36 18	jsr $1836			jsr 	MI32WriteCharacter 			; write the character out
.1835	60		rts				rts 								; and exit.
.1836					MI32WriteCharacter:
.1836	ac 6a 08	ldy $086a			ldy 	MCharCount 					; get position
.1839	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.183b	c8		iny				iny
.183c	a9 00		lda #$00			lda 	#0
.183e	91 04		sta ($04),y			sta 	(temp0),y
.1840	ee 6a 08	inc $086a			inc 	MCharCount 					; bump count
.1843	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32unary.asm

>086b					MSeed32:	.fill 	4							; random number seed.
.1844					MInt32Absolute:
.1844	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1846	30 01		bmi $1849			bmi 	MInt32Negate
.1848	60		rts				rts
.1849					MInt32Negate:
.1849	38		sec				sec
.184a	a9 00		lda #$00			lda 	#0
.184c	f5 48		sbc $48,x			sbc 	esInt0,x
.184e	95 48		sta $48,x			sta 	esInt0,x
.1850	a9 00		lda #$00			lda 	#0
.1852	f5 50		sbc $50,x			sbc 	esInt1,x
.1854	95 50		sta $50,x			sta 	esInt1,x
.1856	a9 00		lda #$00			lda 	#0
.1858	f5 58		sbc $58,x			sbc 	esInt2,x
.185a	95 58		sta $58,x			sta 	esInt2,x
.185c	a9 00		lda #$00			lda 	#0
.185e	f5 60		sbc $60,x			sbc 	esInt3,x
.1860	95 60		sta $60,x			sta 	esInt3,x
.1862	60		rts				rts
.1863					MInt32Not:
.1863	b5 48		lda $48,x			lda 	esInt0,x
.1865	49 ff		eor #$ff			eor 	#$FF
.1867	95 48		sta $48,x			sta 	esInt0,x
.1869	b5 50		lda $50,x			lda 	esInt1,x
.186b	49 ff		eor #$ff			eor 	#$FF
.186d	95 50		sta $50,x			sta 	esInt1,x
.186f	b5 58		lda $58,x			lda 	esInt2,x
.1871	49 ff		eor #$ff			eor 	#$FF
.1873	95 58		sta $58,x			sta 	esInt2,x
.1875	b5 60		lda $60,x			lda 	esInt3,x
.1877	49 ff		eor #$ff			eor 	#$FF
.1879	95 60		sta $60,x			sta 	esInt3,x
.187b	60		rts				rts
.187c					MInt32Sign:
.187c	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.187e	30 0b		bmi $188b			bmi 	MInt32True 					; if set return -1 (true)
.1880	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; is it zero ?
.1883	f0 0a		beq $188f			beq 	MInt32False 					; if zero return 0 (false)
.1885	20 8f 18	jsr $188f			jsr 	MInt32False 					; > 0 return 1
.1888	f6 48		inc $48,x			inc 	esInt0,x
.188a	60		rts				rts
.188b					MInt32True:
.188b	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.188d	d0 02		bne $1891			bne 	MInt32WriteAll
.188f					MInt32False:
.188f	a9 00		lda #$00			lda 	#0
.1891					MInt32WriteAll:
.1891	95 48		sta $48,x			sta 	esInt0,x
.1893					MInt32Write123:
.1893	95 50		sta $50,x			sta 	esInt1,x
.1895	95 58		sta $58,x			sta 	esInt2,x
.1897	95 60		sta $60,x			sta 	esInt3,x
.1899	a9 00		lda #$00			lda 	#$00						; and make it an integer
.189b	95 40		sta $40,x			sta 	esType,x
.189d	60		rts				rts
.189e					MInt32Set8Bit:
.189e	95 48		sta $48,x			sta 	esInt0,x
.18a0	a9 00		lda #$00			lda 	#0
.18a2	f0 ef		beq $1893			beq		MInt32Write123
.18a4					MInt32ShiftLeft:
.18a4	16 48		asl $48,x			asl 	esInt0,x
.18a6	36 50		rol $50,x			rol	 	esInt1,x
.18a8	36 58		rol $58,x			rol	 	esInt2,x
.18aa	36 60		rol $60,x			rol	 	esInt3,x
.18ac	60		rts				rts
.18ad					MInt32ShiftRight:
.18ad	56 60		lsr $60,x			lsr 	esInt3,x
.18af	76 58		ror $58,x			ror 	esInt2,x
.18b1	76 50		ror $50,x			ror 	esInt1,x
.18b3	76 48		ror $48,x			ror 	esInt0,x
.18b5	60		rts				rts
.18b6					MInt32Zero:
.18b6	b5 48		lda $48,x			lda 	esInt0,x
.18b8	15 50		ora $50,x			ora 	esInt1,x
.18ba	15 58		ora $58,x			ora 	esInt2,x
.18bc	15 60		ora $60,x			ora 	esInt3,x
.18be	60		rts				rts
.18bf					MInt32Random:
.18bf	98		tya				tya
.18c0	48		pha				pha
.18c1	a0 07		ldy #$07			ldy 	#7
.18c3	ad 6b 08	lda $086b			lda 	MSeed32+0
.18c6	d0 03		bne $18cb			bne 	_Random1
.18c8	a8		tay				tay
.18c9	a9 aa		lda #$aa			lda		#$AA
.18cb					_Random1:
.18cb	0a		asl a				asl 	a
.18cc	2e 6c 08	rol $086c			rol 	MSeed32+1
.18cf	2e 6d 08	rol $086d			rol 	MSeed32+2
.18d2	2e 6e 08	rol $086e			rol 	MSeed32+3
.18d5	90 02		bcc $18d9			bcc 	_Random2
.18d7	49 c5		eor #$c5			eor 	#$C5
.18d9					_Random2:
.18d9	88		dey				dey
.18da	d0 ef		bne $18cb			bne 	_Random1
.18dc	8d 6b 08	sta $086b			sta 	MSeed32+0
.18df	95 48		sta $48,x			sta 	esInt0,x
.18e1	ad 6c 08	lda $086c			lda 	MSeed32+1
.18e4	95 50		sta $50,x			sta 	esInt1,x
.18e6	ad 6d 08	lda $086d			lda 	MSeed32+2
.18e9	95 58		sta $58,x			sta 	esInt2,x
.18eb	ad 6e 08	lda $086e			lda 	MSeed32+3
.18ee	95 60		sta $60,x			sta 	esInt3,x
.18f0	68		pla				pla
.18f1	a8		tay				tay
.18f2	a9 00		lda #$00			lda 	#0
.18f4	95 40		sta $40,x			sta 	esType,x
.18f6	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/check.asm

.18f7					CheckRightParen:
.18f7	b1 02		lda ($02),y			lda 	(codePtr),y
.18f9	c8		iny				iny
.18fa	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.18fc	d0 01		bne $18ff			bne 	_CRPError
.18fe	60		rts				rts
.18ff					_CRPError:
.18ff	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.1901	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1904					CheckComma:
.1904	b1 02		lda ($02),y			lda 	(codePtr),y
.1906	c8		iny				iny
.1907	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1909	d0 01		bne $190c			bne 	_CCError
.190b	60		rts				rts
.190c					_CCError:
.190c	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.190e	20 1a 19	jsr $191a			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm

.1911					mainHandler:
.1911	7c 14 19	jmp ($1914,x)			jmp 	(mainVectors,x)
.1914					mainVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.asm

.1914					assemblerHandler:
.1914	7c 17 19	jmp ($1917,x)			jmp 	(assemblerVectors,x)
.1917					assemblerVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.asm

.1917					deviceHandler:
.1917	7c 1a 19	jmp ($191a,x)			jmp 	(deviceVectors,x)
.191a					deviceVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.asm


;******  Processing file: ../source/error/errorhandler.asm

.191a					ErrorHandler:
.191a	a9 ee		lda #$ee			lda 	#$EE
.191c	a8		tay				tay
>191d	db						.byte 	$DB
.191e	4c 1e 19	jmp $191e	_EHHalt:jmp 	_EHHalt

;******  Return to file: ../source/error/error.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.asm

.1921					floatingpointHandler:
.1921	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.1923	20 1a 19	jsr $191a			jsr 	ErrorHandler

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.asm

.1926					interactionHandler:
.1926	7c 29 19	jmp ($1929,x)			jmp 	(interactionVectors,x)
.1929					interactionVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.asm


;******  Processing file: ../source/string/compare.asm

.1929					STRCompare:
>1929	db						.byte 	$DB
.192a	4c 29 19	jmp $1929			jmp 	STRCompare

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/concat.asm

.192d					StringConcat:
>192d	db						.byte 	$DB
.192e	80 fd		bra $192d			bra 	StringConcat

;******  Return to file: ../source/string/string.asm

.1930					stringHandler:
.1930	7c 33 19	jmp ($1933,x)			jmp 	(stringVectors,x)
.1933					stringVectors:
>1933	2d 19					.word StringConcat         ; index 0
>1935	29 19					.word STRCompare           ; index 2

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.asm

.1937					tokeniserHandler:
.1937	7c 3a 19	jmp ($193a,x)			jmp 	(tokeniserVectors,x)
.193a					tokeniserVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/access.asm

.193a					AccessVariable:
.193a	aa		tax				tax 								; stack in X
.193b	c8		iny				iny
.193c	b1 02		lda ($02),y			lda 	(codePtr),y
.193e	88		dey				dey
.193f	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1941	d0 15		bne $1958			bne 	_AVLong
.1943	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1945	38		sec				sec 	 							; make it 0-25
.1946	e9 01		sbc #$01			sbc 	#1
.1948	0a		asl a				asl 	a 							; x 4 is LSB of address
.1949	0a		asl a				asl 	a
.194a	95 48		sta $48,x			sta 	esInt0,x
.194c	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.194e	95 50		sta $50,x			sta 	esInt1,x
.1950	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1952	95 40		sta $40,x			sta 	esType,x
.1954	c8		iny				iny 								; skip over the variable reference in the code.
.1955	c8		iny				iny
.1956	8a		txa				txa 								; stack in A to return.
.1957	60		rts				rts
.1958					_AVLong:
.1958	80 fe		bra $1958			bra 	_AVLong

;******  Return to file: ../source/variable/variable.asm

.195a					variableHandler:
.195a	7c 5d 19	jmp ($195d,x)			jmp 	(variableVectors,x)
.195d					variableVectors:
>195d	3a 19					.word AccessVariable       ; index 0

;******  Return to file: ../source/basic.asm


;******  End of listing
