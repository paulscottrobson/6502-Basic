
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ../source/basic.asm
; Mon Mar  1 19:57:09 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/basic.asm


;******  Processing file: ../source/main/01common.inc

=$1000					CodeStart = $1000
=$800					MemoryStorage = $800
=$02					ZeroPageStorage = $02
=8					StackSize = 8
=512					retStackSize = 512
=8					hashTableSize = 8			; if this changes, the calculation is AccessSetup has to match it.
="G"					markerGOSUB = 'G'
="R"					markerREPEAT = 'R'
="F"					markerFOR = 'F'
="W"					markerWHILE = 'W'

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/02macros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					returnStack:
>0800							.fill 	retStackSize
>0a00							.align	256
.0a00					SingleLetterVar:
>0a00					 		.fill 	26*4
.0a68					hashTables:
>0a68							.fill 	6*2*hashTableSize
.0ac8					basePage:
>0ac8							.fill 	2
.0aca					endMemory:
>0aca							.fill 	2
.0acc					highMemory:
>0acc							.fill 	2
.0ace					lowMemory:
>0ace							.fill 	2
.0ad0					convertBuffer:
>0ad0							.fill 	35

;******  Processing file: ../source/main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ../source/main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/imath/intmacros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/errorhandler.inc


;******  Processing file: ../source/error/../generated/errorid.inc

=1					ErrorID_Missing = 1 ; Feature not Present
=2					ErrorID_Syntax = 2 ; Syntax Error
=3					ErrorID_NoModule = 3 ; Module disabled
=4					ErrorID_Assert = 4 ; Assertion failed
=5					ErrorID_DivZero = 5 ; Divide By Zero
=6					ErrorID_Stop = 6 ; Stop
=7					ErrorID_BadType = 7 ; Type Mismatch
=8					ErrorID_BadValue = 8 ; Illegal Value
=9					ErrorID_MissingRP = 9 ; Missing right bracket
=10					ErrorID_MissingComma = 10 ; Missing comma
=11					ErrorID_NoReference = 11 ; Missing reference
=12					ErrorID_LineNumber = 12 ; Line Number not found
=13					ErrorID_StrLen = 13 ; String too long.
=14					ErrorID_ReturnErr = 14 ; RETURN without GOSUB
=15					ErrorID_UntilErr = 15 ; UNTIL without REPEAT
=16					ErrorID_NextErr = 16 ; NEXT without FOR
=17					ErrorID_WendErr = 17 ; WEND without WHILE
=18					ErrorID_BadIndex = 18 ; Bad NEXT index
=19					ErrorID_Struct = 19 ; Structures nested wrong
=20					ErrorID_NoAuto = 20 ; Cannot create variable
=21					ErrorID_RetStack = 21 ; Return stack out of space.

;******  Return to file: ../source/error/errorhandler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/memory.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.asm


;******  Processing file: ../source/main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d c8 0a	sta $0ac8			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d c9 0a	sta $0ac9			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d ca 0a	sta $0aca			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d cb 0a	sta $0acb			sta 	1+(endMemory)
.1017	4c 1d 12	jmp $121d			jmp 	Command_Run
.203f					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ../source/main/../generated/testcode.inc

>5000	09 0a 00 0a 3c 8d 85 00			.byte 9,10,0,10,60,141,133,0,128,18,11,0,20,21,13,60,141,133,7,70,71,80,84,78,80,69,128,9,12,0,19,58,141,66,103,128,12,13,0,20,2,3,7,58,141,76,65,128,10,14,0,3,17,60,141,133,0,128,11,15,0,6,19,11,58,141,65,83,128,9,16,0,12,60,141,133,0,128,10,17,0,19,6,58,141,75,106,128,11,18,0,20,16,18,58,141,65,87,128,15,19,0,20,21,13,60,141,133,4,72,84,83,83,128,15,20,0,17,13,60,141,133,5,85,81,85,83,66,128,10,21,0,2,5,60,141,133,0,128,14,22,0,3,5,9,60,141,133,3,75,78,70,128,9,23,0,10,58,141,69,74,128,13,24,0,10,15,6,5,8,58,141,74,90,128,13,25,0,10,15,6,5,8,60,141,133,0,128,15,26,0,6,16,13,60,141,133,4,74,78,74,81,128,11,27,0,3,5,9,58,141,66,103,128,9,28,0,1,58,141,68,118,128,10,29,0,1,60,141,133,1,72,128,17,30,0,10,7,21,8,60,141,133,5,73,67,77,82,73,128,14,31,0,15,20,60,141,133,4,79,73,67,70,128,17,32,0,18,4,14,60,141,133,6,67,69,75,71,82,85,128,11,33,0,16,11,2,58,141,68,72,128,11,34,0,14,15,60,141,133,1,82,128,15,35,0,12,18,15,19,60,141,133,3,78,66,75,128,19,36,0,2,13,9,10,60,141,133,7,77,81,79,65,78,69,74,128,11,37,0,6,16,13,58,141,79,75,128,12,38,0,2,13,9,10,60,141,133,0,128,12,39,0,4,3,1,11,58,141,70,87,128,16,40,0,10,7,21,8,60,141,133,4,80,72,68,73,128,14,41,0,11,60,141,133,5,77,70,75,72,66,128,11,42,0,6,60,141,133,2,80,66,128,9,43,0,11,58,141,79,64,128,11,44,0,3,5,9,58,141,79,78,128,12,45,0,2,13,9,10,58,141,77,125,128,11,46,0,18,11,11,58,141,78,112,128,17,47,0,20,2,3,7,60,141,133,5,66,69,83,77,76,128,11,48,0,8,12,5,60,141,133,0,128,10,49,0,8,11,58,141,75,76,128,14,50,0,11,60,141,133,5,81,71,77,77,80,128,8,51,0,17,58,141,122,128,17,52,0,3,5,9,60,141,133,6,83,75,74,71,67,77,128,11,53,0,2,15,7,58,141,67,105,128,9,54,0,19,6,58,141,69,128,13,55,0,10,15,6,5,8,58,141,71,108,128,10,56,0,17,60,141,133,1,73,128,12,57,0,12,18,15,19,58,141,68,71,128,11,58,0,16,11,2,58,141,65,113,128,12,59,0,2,13,9,10,60,141,133,0,128,15,60,0,10,60,141,133,6,71,76,78,78,83,79,128,13,61,0,1,18,5,7,6,58,141,69,64,128,12,62,0,8,12,5,60,141,133,1,76,128,12,63,0,10,60,141,133,3,82,78,68,128,16,64,0,20,2,3,7,60,141,133,4,68,82,70,83,128,10,65,0,15,20,58,141,66,68,128,18,66,0,3,5,9,60,141,133,7,77,78,76,80,73,66,80,128,16,67,0,20,21,13,60,141,133,5,79,85,70,70,66,128,11,68,0,2,15,7,58,141,79,65,128,14,69,0,8,11,60,141,133,4,70,81,69,77,128,20,70,0,10,15,6,5,8,60,141,133,7,70,82,72,71,65,65,76,128,17,71,0,12,18,15,19,60,141,133,5,84,65,68,70,79,128,16,72,0,12,60,141,133,7,70,82,69,69,73,66,75,128,16,73,0,15,20,60,141,133,6,83,82,83,72,77,78,128,12,74,0,3,5,9,60,141,133,1,71,128,12,75,0,16,17,18,20,58,141,71,116,128,10,76,0,16,15,58,141,77,91,128,9,77,0,12,58,141,68,68,128,9,78,0,11,58,141,78,79,128,11,79,0,3,5,9,58,141,66,98,128,8,80,0,6,58,141,121,128,12,81,0,20,16,18,60,141,133,1,72,128,11,82,0,5,11,13,11,58,141,74,128,19,83,0,10,7,21,8,60,141,133,7,79,83,82,69,81,75,76,128,12,84,0,2,15,7,60,141,133,1,75,128,13,85,0,17,60,141,133,4,82,68,76,67,128,12,86,0,1,18,5,7,6,58,141,105,128,16,87,0,10,15,6,5,8,60,141,133,3,76,85,82,128,9,88,0,12,58,141,76,86,128,19,89,0,1,18,5,7,6,60,141,133,6,75,74,84,74,76,72,128,10,90,0,19,6,58,141,70,87,128,13,91,0,1,18,5,7,6,58,141,72,111,128,9,92,0,12,58,141,75,91,128,9,93,0,19,58,141,67,114,128,11,94,0,20,16,18,58,141,70,82,128,18,95,0,12,18,15,19,60,141,133,6,78,73,71,84,69,75,128,15,96,0,8,11,60,141,133,5,85,65,73,75,76,128,8,97,0,4,58,141,91,128,12,98,0,17,60,141,133,3,85,79,82,128,12,99,0,12,18,15,19,58,141,73,72,128,13,100,0,19,60,141,133,4,74,76,83,71,128,10,101,0,6,60,141,133,1,78,128,17,102,0,14,15,60,141,133,7,71,85,83,75,78,74,78,128,16,103,0,6,60,141,133,7,80,83,71,81,78,70,69,128,13,104,0,2,13,9,10,60,141,133,1,80,128,9,105,0,4,58,141,75,67,128,12,106,0,18,11,11,60,141,133,1,77,128,11,107,0,3,8,9,58,141,69,88,128,12,108,0,5,11,13,11,58,141,73,70,128,12,109,0,2,15,7,60,141,133,1,77,128,16,110,0,4,3,1,11,60,141,133,4,69,71,84,71,128,11,111,0,16,11,2,58,141,77,80,128,19,112,0,16,17,18,20,60,141,133,7,78,83,85,66,69,82,72,128,17,113,0,3,17,60,141,133,7,74,66,75,66,68,81,76,128,18,114,0,3,8,9,60,141,133,7,69,71,73,85,76,69,66,128,11,115,0,8,12,5,58,141,76,125,128,13,116,0,10,6,12,3,19,58,141,70,87,128,10,117,0,20,16,18,58,141,71,128,12,118,0,20,2,3,7,58,141,67,72,128,15,119,0,18,11,11,60,141,133,4,79,82,79,79,128,11,120,0,3,8,9,58,141,70,114,128,17,121,0,8,11,60,141,133,7,76,74,79,73,73,70,72,128,12,122,0,12,18,15,19,58,141,77,91,128,12,123,0,20,2,3,7,60,141,133,0,128,16,124,0,10,15,6,5,8,60,141,133,3,73,74,68,128,11,125,0,3,5,9,58,141,71,87,128,14,126,0,19,6,60,141,133,4,67,71,83,68,128,12,127,0,5,11,13,11,58,141,71,75,128,10,128,0,17,13,58,141,75,89,128,12,129,0,12,18,15,19,58,141,77,113,128,13,130,0,10,6,12,3,19,58,141,70,88,128,11,131,0,6,19,11,60,141,133,0,128,11,132,0,20,16,18,58,141,76,126,128,11,133,0,19,6,60,141,133,1,65,128,13,134,0,1,18,5,7,6,58,141,75,107,128,11,135,0,3,5,9,58,141,73,68,128,11,136,0,16,11,2,60,141,133,0,128,15,137,0,8,12,5,60,141,133,4,85,79,68,79,128,18,138,0,18,11,11,60,141,133,7,82,65,69,67,68,71,85,128,16,139,0,3,5,9,60,141,133,5,76,85,85,67,74,128,16,140,0,3,17,60,141,133,6,82,82,82,78,68,69,128,16,141,0,1,60,141,133,7,68,65,76,73,84,79,67,128,10,142,0,3,5,9,58,141,86,128,19,143,0,12,18,15,19,60,141,133,7,75,75,72,84,74,69,71,128,16,144,0,12,60,141,133,7,72,79,65,82,80,72,82,128,12,145,0,17,13,60,141,133,2,79,75,128,11,146,0,18,11,11,58,141,72,67,128,15,147,0,19,60,141,133,6,74,85,76,75,66,85,128,12,148,0,2,13,9,10,58,141,78,121,128,19,149,0,10,7,21,8,60,141,133,7,85,84,75,71,74,71,82,128,16,150,0,6,60,141,133,7,83,76,68,71,80,75,76,128,16,151,0,15,11,16,5,3,60,141,133,3,72,65,80,128,11,152,0,18,11,11,58,141,70,94,128,14,153,0,12,18,15,19,60,141,133,2,72,65,128,11,154,0,20,21,13,58,141,72,65,128,11,155,0,3,8,9,58,141,79,66,128,13,156,0,2,15,7,60,141,133,2,73,76,128,17,157,0,1,18,5,7,6,60,141,133,4,71,79,82,73,128,19,158,0,10,6,12,3,19,60,141,133,6,76,85,73,73,78,77,128,16,159,0,20,16,18,60,141,133,5,74,71,68,67,75,128,10,160,0,2,5,58,141,75,114,128,15,161,0,17,13,60,141,133,5,65,84,71,65,65,128,17,162,0,1,18,5,7,6,60,141,133,4,74,82,69,70,128,9,163,0,10,58,141,76,121,128,9,164,0,12,58,141,76,87,128,18,165,0,3,5,9,60,141,133,7,72,72,69,85,70,67,78,128,12,166,0,20,2,3,7,58,141,65,65,128,15,167,0,14,15,60,141,133,5,83,74,69,82,80,128,14,168,0,20,21,13,60,141,133,3,84,83,66,128,11,169,0,2,15,7,58,141,73,92,128,16,170,0,3,8,9,60,141,133,5,75,71,72,85,65,128,10,171,0,16,15,58,141,77,101,128,15,172,0,18,11,11,60,141,133,4,80,78,72,72,128,12,173,0,16,17,18,20,60,141,133,0,128,11,174,0,2,15,7,60,141,133,0,128,15,175,0,12,60,141,133,6,76,80,81,78,74,76,128,10,176,0,17,60,141,133,1,84,128,12,177,0,16,17,18,20,58,141,69,74,128,15,178,0,3,17,60,141,133,5,76,82,82,74,65,128,9,179,0,11,58,141,76,88,128,16,180,0,16,11,2,60,141,133,5,76,77,83,73,76,128,10,181,0,16,15,58,141,76,79,128,14,182,0,3,17,60,141,133,4,76,72,72,65,128,13,183,0,10,6,12,3,19,58,141,71,87,128,17,184,0,6,19,11,60,141,133,6,75,75,77,79,79,69,128,15,185,0,20,2,3,7,60,141,133,3,85,83,72,128,10,186,0,19,6,58,141,69,76,128,12,187,0,3,8,9,60,141,133,1,79,128,12,188,0,12,18,15,19,60,141,133,0,128,12,189,0,5,11,13,11,58,141,72,126,128,12,190,0,14,15,60,141,133,2,79,65,128,9,191,0,17,58,141,68,87,128,17,192,0,4,3,1,11,60,141,133,5,72,74,74,80,78,128,11,193,0,6,19,11,58,141,70,99,128,14,194,0,20,2,3,7,60,141,133,2,81,73,128,10,195,0,8,11,58,141,68,92,128,9,196,0,5,58,141,74,88,128,11,197,0,3,5,9,58,141,67,72,128,16,198,0,3,17,60,141,133,6,68,77,69,72,81,75,128,10,199,0,17,13,58,141,66,120,128,17,200,0,15,11,16,5,3,60,141,133,4,79,76,68,67,128,10,201,0,2,15,7,58,141,108,128,14,202,0,16,17,18,20,60,141,133,2,82,69,128,18,203,0,16,11,2,60,141,133,7,73,85,78,81,77,75,79,128,17,204,0,6,16,13,60,141,133,6,74,80,72,84,72,81,128,12,205,0,11,60,141,133,3,66,67,80,128,16,206,0,18,11,11,60,141,133,5,79,80,67,68,83,128,10,207,0,19,6,58,141,77,71,128,17,208,0,19,6,60,141,133,7,74,81,85,74,81,73,68,128,11,209,0,18,4,14,58,141,73,74,128,11,210,0,20,16,18,58,141,70,120,128,12,211,0,18,11,11,60,141,133,1,75,128,13,212,0,6,60,141,133,4,78,70,75,77,128,18,213,0,6,19,11,60,141,133,7,78,65,81,81,80,81,74,128,9,214,0,19,58,141,75,69,128,10,215,0,16,15,60,141,133,0,128,16,216,0,19,6,60,141,133,6,80,84,83,75,69,65,128,15,217,0,14,15,60,141,133,5,74,79,69,78,82,128,14,218,0,11,60,141,133,5,77,85,82,71,80,128,16,219,0,8,12,5,60,141,133,5,69,65,80,75,84,128,17,220,0,3,5,9,60,141,133,6,76,79,78,65,76,67,128,10,221,0,8,11,60,141,133,0,128,18,222,0,20,2,3,7,60,141,133,6,70,65,73,78,82,76,128,13,223,0,1,18,5,7,6,58,141,74,125,128,18,224,0,6,19,11,60,141,133,7,84,74,66,82,80,77,85,128,14,225,0,15,11,16,5,3,60,141,133,1,74,128,9,226,0,4,58,141,70,103,128,9,227,0,17,58,141,67,104,128,12,228,0,5,11,13,11,58,141,66,108,128,11,229,0,6,16,13,58,141,76,68,128,10,230,0,19,6,58,141,79,66,128,14,231,0,20,16,18,60,141,133,3,76,79,66,128,13,232,0,10,6,12,3,19,58,141,76,82,128,10,233,0,16,15,58,141,71,85,128,10,234,0,17,13,58,141,66,74,128,10,235,0,15,20,58,141,66,68,128,11,236,0,20,16,18,58,141,72,72,128,12,237,0,5,11,13,11,58,141,78,78,128,16,238,0,4,60,141,133,7,71,73,67,80,85,76,85,128,12,239,0,6,16,13,60,141,133,1,73,128,16,240,0,17,60,141,133,7,76,79,71,71,66,67,82,128,11,241,0,18,4,14,58,141,75,80,128,13,242,0,10,15,6,5,8,58,141,65,113,128,9,243,0,11,58,141,77,104,128,15,244,0,12,60,141,133,6,69,66,79,81,80,76,128,18,245,0,8,12,5,60,141,133,7,73,82,66,73,76,67,75,128,14,246,0,6,60,141,133,5,66,75,67,80,72,128,11,247,0,12,18,15,19,58,141,74,128,16,248,0,20,16,18,60,141,133,5,65,69,78,73,74,128,17,249,0,16,11,2,60,141,133,6,68,79,83,72,68,84,128,11,250,0,3,5,9,58,141,77,82,128,10,251,0,20,21,13,58,141,110,128,9,252,0,12,58,141,68,71,128,19,253,0,1,18,5,7,6,60,141,133,6,79,75,71,84,72,81,128,9,254,0,17,58,141,73,122,128,10,255,0,14,15,58,141,74,82,128,12,0,1,16,17,18,20,58,141,69,126,128,13,1,1,15,20,60,141,133,3,74,71,66,128,12,2,1,10,60,141,133,3,74,83,78,128,17,3,1,6,16,13,60,141,133,6,72,79,79,74,67,85,128,12,4,1,15,11,16,5,3,58,141,100,128,12,5,1,20,2,3,7,58,141,69,88,128,16,6,1,6,60,141,133,7,71,70,77,69,67,74,76,128,16,7,1,19,6,60,141,133,6,81,77,68,78,78,78,128,10,8,1,19,6,58,141,70,103,128,14,9,1,3,17,60,141,133,4,69,81,75,81,128,11,10,1,18,4,14,58,141,70,126,128,14,11,1,1,18,5,7,6,60,141,133,1,65,128,11,12,1,20,16,18,58,141,74,98,128,11,13,1,3,5,9,58,141,76,117,128,11,14,1,16,11,2,58,141,77,91,128,10,15,1,15,20,58,141,69,116,128,10,16,1,19,6,58,141,67,100,128,18,17,1,6,19,11,60,141,133,7,82,70,72,85,71,78,68,128,11,18,1,6,19,11,58,141,70,91,128,12,19,1,12,18,15,19,58,141,68,70,128,9,20,1,17,58,141,74,68,128,11,21,1,3,5,9,60,141,133,0,128,10,22,1,19,6,60,141,133,0,128,10,23,1,15,20,58,141,74,74,128,12,24,1,5,11,13,11,58,141,76,86,128,9,25,1,6,58,141,70,92,128,11,26,1,6,16,13,58,141,74,121,128,10,27,1,17,13,58,141,78,103,128,11,28,1,18,4,14,58,141,71,86,128,9,29,1,5,58,141,73,77,128,20,30,1,10,15,6,5,8,60,141,133,7,84,81,72,85,67,67,69,128,10,31,1,19,60,141,133,1,82,128,12,32,1,4,3,1,11,60,141,133,0,128,16,33,1,1,60,141,133,7,80,78,70,79,73,69,81,128,18,34,1,3,5,9,60,141,133,7,77,79,84,71,80,84,73,128,9,35,1,4,58,141,78,67,128,11,36,1,8,12,5,58,141,70,85,128,13,37,1,1,18,5,7,6,58,141,73,91,128,12,38,1,10,7,21,8,58,141,75,72,128,12,39,1,15,11,16,5,3,58,141,104,128,16,40,1,3,8,9,60,141,133,5,75,77,66,80,74,128,10,41,1,15,20,60,141,133,0,128,12,42,1,14,15,60,141,133,2,83,71,128,14,43,1,6,16,13,60,141,133,3,78,74,75,128,10,44,1,2,5,58,141,66,68,128,10,45,1,2,5,58,141,73,100,128,9,46,1,4,58,141,76,116,128,19,47,1,10,6,12,3,19,60,141,133,6,69,67,83,73,72,82,128,11,48,1,2,15,7,58,141,69,117,128,16,49,1,20,2,3,7,60,141,133,4,66,74,82,78,128,11,50,1,6,19,11,58,141,65,100,128,13,51,1,11,60,141,133,4,70,76,82,79,128,14,52,1,1,18,5,7,6,60,141,133,1,76,128,10,53,1,14,15,58,141,74,76,128,13,54,1,17,60,141,133,4,77,83,83,75,128,11,55,1,3,5,9,58,141,79,74,128,17,56,1,6,16,13,60,141,133,6,73,80,72,68,80,82,128,11,57,1,20,16,18,60,141,133,0,128,10,58,1,11,60,141,133,1,83,128,10,59,1,15,20,58,141,66,104,128,17,60,1,16,17,18,20,60,141,133,5,67,80,69,71,73,128,11,61,1,4,3,1,11,58,141,66,128,11,62,1,6,19,11,58,141,72,81,128,12,63,1,5,11,13,11,58,141,78,117,128,9,64,1,6,60,141,133,0,128,12,65,1,1,18,5,7,6,58,141,82,128,9,66,1,10,58,141,77,83,128,12,67,1,4,3,1,11,58,141,71,73,128,12,68,1,10,7,21,8,58,141,69,110,128,11,69,1,3,8,9,58,141,67,126,128,13,70,1,20,2,3,7,60,141,133,1,74,128,15,71,1,8,11,60,141,133,5,66,66,77,78,84,128,14,72,1,10,6,12,3,19,60,141,133,1,67,128,16,73,1,2,13,9,10,60,141,133,4,76,65,78,68,128,12,74,1,5,11,13,11,60,141,133,0,128,16,75,1,5,60,141,133,7,74,82,84,84,78,79,81,128,12,76,1,10,60,141,133,3,74,72,75,128,14,77,1,16,11,2,60,141,133,3,80,76,78,128,13,78,1,5,11,13,11,60,141,133,1,79,128,16,79,1,17,60,141,133,7,73,85,70,80,65,82,80,128,10,80,1,2,5,58,141,67,71,128,18,81,1,15,11,16,5,3,60,141,133,5,83,70,66,78,82,128,15,82,1,19,60,141,133,6,76,72,73,66,81,66,128,16,83,1,12,18,15,19,60,141,133,4,77,83,85,77,128,11,84,1,6,19,11,58,141,77,108,128,12,85,1,2,13,9,10,58,141,78,123,128,13,86,1,15,11,16,5,3,58,141,79,99,128,13,87,1,10,6,12,3,19,58,141,71,122,128,9,88,1,12,58,141,71,66,128,11,89,1,20,16,18,60,141,133,0,128,14,90,1,20,21,13,60,141,133,3,77,68,66,128,12,91,1,16,17,18,20,58,141,70,111,128,10,92,1,17,13,58,141,68,83,128,10,93,1,16,15,60,141,133,0,128,8,94,1,19,58,141,104,128,12,95,1,4,60,141,133,3,75,76,69,128,13,96,1,10,6,12,3,19,58,141,67,109,128,13,97,1,15,11,16,5,3,58,141,77,76,128,12,98,1,2,5,60,141,133,2,65,69,128,16,99,1,17,13,60,141,133,6,83,69,74,81,83,70,128,10,100,1,14,15,58,141,78,109,128,10,101,1,20,21,13,58,141,73,128,10,102,1,8,11,58,141,78,111,128,9,103,1,1,58,141,73,89,128,11,104,1,2,15,7,58,141,66,109,128,15,105,1,18,4,14,60,141,133,4,68,66,83,77,128,15,106,1,10,15,6,5,8,60,141,133,2,65,73,128,16,107,1,12,60,141,133,7,75,71,67,66,72,65,75,128,14,108,1,2,15,7,60,141,133,3,84,66,82,128,10,109,1,2,5,58,141,77,100,128,9,110,1,6,58,141,68,115,128,11,111,1,20,16,18,58,141,70,106,128,12,112,1,17,13,60,141,133,2,69,76,128,13,113,1,10,15,6,5,8,58,141,73,94,128,11,114,1,18,11,11,58,141,74,101,128,9,115,1,11,58,141,73,65,128,12,116,1,10,7,21,8,58,141,72,96,128,12,117,1,5,11,13,11,58,141,75,102,128,15,118,1,4,3,1,11,60,141,133,3,69,65,79,128,12,119,1,5,11,13,11,60,141,133,0,128,13,120,1,5,11,13,11,60,141,133,1,66,128,19,121,1,5,11,13,11,60,141,133,7,78,73,66,71,81,73,66,128,19,122,1,2,13,9,10,60,141,133,7,77,76,67,84,69,68,75,128,11,123,1,3,5,9,58,141,74,79,128,9,124,1,10,58,141,65,74,128,13,125,1,12,60,141,133,4,76,77,81,66,128,11,126,1,3,5,9,58,141,67,69,128,10,127,1,3,17,58,141,74,116,128,14,128,1,3,5,9,60,141,133,3,67,76,78,128,9,129,1,1,58,141,75,89,128,15,130,1,4,60,141,133,6,78,75,66,69,84,73,128,12,131,1,4,3,1,11,58,141,65,105,128,16,132,1,17,60,141,133,7,84,85,72,68,67,69,70,128,11,133,1,18,11,11,58,141,68,81,128,12,134,1,18,4,14,60,141,133,1,79,128,13,135,1,5,60,141,133,4,69,75,84,75,128,18,136,1,2,13,9,10,60,141,133,6,84,81,85,78,85,70,128,9,137,1,17,60,141,133,0,128,9,138,1,4,58,141,73,83,128,11,139,1,18,11,11,58,141,78,96,128,12,140,1,20,2,3,7,58,141,73,98,128,14,141,1,10,6,12,3,19,60,141,133,1,73,128,12,142,1,10,60,141,133,3,85,76,74,128,17,143,1,20,2,3,7,60,141,133,5,70,69,79,72,73,128,13,144,1,4,60,141,133,4,79,85,71,78,128,16,145,1,19,60,141,133,7,79,74,85,69,85,80,78,128,10,146,1,8,11,58,141,77,93,128,12,147,1,20,2,3,7,60,141,133,0,128,10,148,1,19,60,141,133,1,68,128,11,149,1,8,12,5,58,141,76,74,128,20,150,1,1,18,5,7,6,60,141,133,7,84,66,69,82,85,71,74,128,9,151,1,15,20,58,141,81,128,11,152,1,16,11,2,58,141,70,98,128,15,153,1,10,60,141,133,6,78,66,81,71,65,78,128,9,154,1,11,58,141,65,124,128,10,155,1,16,15,60,141,133,0,128,10,156,1,14,15,58,141,70,100,128,11,157,1,3,8,9,58,141,72,117,128,9,158,1,4,58,141,72,110,128,14,159,1,8,11,60,141,133,4,66,81,84,70,128,11,160,1,16,11,2,58,141,77,84,128,11,161,1,6,16,13,58,141,75,91,128,13,162,1,10,60,141,133,4,65,84,82,80,128,11,163,1,11,60,141,133,2,77,84,128,15,164,1,19,60,141,133,6,80,80,67,84,66,84,128,16,165,1,19,6,60,141,133,6,70,70,84,69,72,74,128,16,166,1,10,7,21,8,60,141,133,4,84,70,76,78,128,9,167,1,6,58,141,69,103,128,11,168,1,6,16,13,58,141,73,82,128,11,169,1,20,21,13,58,141,78,83,128,13,170,1,15,11,16,5,3,58,141,76,64,128,11,171,1,20,21,13,58,141,71,120,128,13,172,1,10,15,6,5,8,58,141,65,115,128,12,173,1,10,60,141,133,3,79,80,71,128,15,174,1,6,16,13,60,141,133,4,85,81,65,84,128,16,175,1,6,16,13,60,141,133,5,76,73,85,80,65,128,14,176,1,15,11,16,5,3,60,141,133,1,71,128,11,177,1,8,12,5,60,141,133,0,128,12,178,1,12,18,15,19,58,141,69,81,128,11,179,1,8,12,5,58,141,71,97,128,9,180,1,5,58,141,68,76,128,10,181,1,15,20,58,141,68,104,128,10,182,1,5,60,141,133,1,67,128,12,183,1,2,13,9,10,58,141,67,90,128,12,184,1,20,2,3,7,58,141,72,77,128,17,185,1,6,19,11,60,141,133,6,83,73,75,79,81,78,128,10,186,1,19,6,60,141,133,0,128,14,187,1,1,60,141,133,5,74,66,68,69,76,128,10,188,1,1,60,141,133,1,74,128,12,189,1,4,3,1,11,60,141,133,0,128,11,190,1,14,15,60,141,133,1,84,128,11,191,1,3,5,9,58,141,78,94,128,13,192,1,16,11,2,60,141,133,2,80,69,128,17,193,1,2,13,9,10,60,141,133,5,71,73,69,65,77,128,12,194,1,20,2,3,7,58,141,71,104,128,11,195,1,3,5,9,58,141,65,78,128,13,196,1,2,15,7,60,141,133,2,79,73,128,14,197,1,10,15,6,5,8,60,141,133,1,79,128,15,198,1,2,13,9,10,60,141,133,3,81,84,65,128,13,199,1,10,15,6,5,8,58,141,72,69,128,11,200,1,6,19,11,58,141,72,112,128,13,201,1,12,18,15,19,60,141,133,1,78,128,10,202,1,16,15,58,141,68,127,128,12,203,1,16,17,18,20,60,141,133,0,128,11,204,1,2,15,7,58,141,66,125,128,16,205,1,11,60,141,133,7,76,67,84,83,85,65,85,128,9,206,1,5,58,141,74,85,128,14,207,1,5,60,141,133,5,71,78,67,75,72,128,9,208,1,17,58,141,72,103,128,11,209,1,8,12,5,58,141,71,127,128,10,210,1,16,15,58,141,69,87,128,11,211,1,3,5,9,60,141,133,0,128,16,212,1,5,11,13,11,60,141,133,4,74,71,85,79,128,12,213,1,16,17,18,20,58,141,76,71,128,16,214,1,4,60,141,133,7,84,82,85,78,67,77,69,128,13,215,1,6,16,13,60,141,133,2,78,83,128,12,216,1,8,12,5,60,141,133,1,72,128,10,217,1,3,17,58,141,76,104,128,13,218,1,3,8,9,60,141,133,2,74,66,128,12,219,1,5,60,141,133,3,80,70,65,128,18,220,1,8,12,5,60,141,133,7,75,85,81,71,69,73,77,128,17,221,1,10,6,12,3,19,60,141,133,4,81,75,73,84,128,12,222,1,16,17,18,20,58,141,77,68,128,11,223,1,6,19,11,58,141,68,106,128,11,224,1,20,21,13,58,141,76,118,128,17,225,1,16,17,18,20,60,141,133,5,80,79,77,80,68,128,15,226,1,15,11,16,5,3,60,141,133,2,71,80,128,13,227,1,15,11,16,5,3,58,141,71,97,128,17,228,1,2,15,7,60,141,133,6,72,75,73,80,73,68,128,11,229,1,20,21,13,58,141,72,108,128,12,230,1,16,17,18,20,58,141,77,88,128,11,231,1,16,15,60,141,133,1,77,128,9,232,1,6,58,141,72,78,128,12,233,1,12,18,15,19,60,141,133,0,128,12,234,1,18,11,11,60,141,133,1,67,128,8,235,1,4,58,141,121,128,13,236,1,3,5,9,60,141,133,2,73,83,128,15,237,1,16,17,18,20,60,141,133,3,81,67,78,128,17,238,1,18,11,11,60,141,133,6,67,81,75,84,76,80,128,11,239,1,6,16,13,58,141,72,102,128,9,240,1,5,58,141,66,101,128,10,241,1,15,20,58,141,65,100,128,19,242,1,10,7,21,8,60,141,133,7,84,65,72,83,84,83,79,128,10,243,1,19,6,60,141,133,0,128,9,244,1,11,58,141,78,75,128,12,245,1,16,15,60,141,133,2,68,80,128,16,246,1,3,5,9,60,141,133,5,77,82,72,83,71,128,9,247,1,4,58,141,75,72,128,11,248,1,16,15,60,141,133,1,73,128,13,249,1,16,17,18,20,60,141,133,1,79,128,12,250,1,16,17,18,20,58,141,74,80,128,12,251,1,19,6,60,141,133,2,84,69,128,12,252,1,12,18,15,19,60,141,133,0,128,9,253,1,4,58,141,78,114,128,12,254,1,217,20,21,13,58,141,72,108,128,9,255,1,217,19,58,141,104,128,10,0,2,217,5,58,141,66,101,128,11,1,2,217,8,11,58,141,77,93,128,12,2,2,217,18,11,11,58,141,78,96,128,11,3,2,217,19,6,58,141,67,100,128,11,4,2,217,2,5,58,141,77,100,128,14,5,2,217,10,15,6,5,8,58,141,72,69,128,11,6,2,217,14,15,58,141,70,100,128,10,7,2,217,17,58,141,72,103,128,10,8,2,217,4,58,141,78,114,128,12,9,2,217,2,15,7,58,141,66,125,128,13,10,2,217,12,18,15,19,58,141,69,81,128,12,11,2,217,20,16,18,58,141,70,106,128,12,12,2,217,16,11,2,58,141,77,84,128,13,13,2,217,1,18,5,7,6,58,141,82,128,10,14,2,217,6,58,141,72,78,128,14,15,2,217,15,11,16,5,3,58,141,71,97,128,13,16,2,217,20,2,3,7,58,141,71,104,128,10,17,2,217,10,58,141,65,74,128,10,18,2,217,1,58,141,75,89,128,10,19,2,217,12,58,141,71,66,128,14,20,2,217,10,6,12,3,19,58,141,67,109,128,12,21,2,217,3,5,9,58,141,65,78,128,13,22,2,217,5,11,13,11,58,141,75,102,128,13,23,2,217,16,17,18,20,58,141,74,80,128,12,24,2,217,18,4,14,58,141,71,86,128,11,25,2,217,3,17,58,141,76,104,128,13,26,2,217,10,7,21,8,58,141,72,96,128,12,27,2,217,8,12,5,58,141,71,127,128,13,28,2,217,2,13,9,10,58,141,67,90,128,12,29,2,217,6,16,13,58,141,72,102,128,11,30,2,217,16,15,58,141,69,87,128,12,31,2,217,6,19,11,58,141,68,106,128,13,32,2,217,4,3,1,11,58,141,65,105,128,11,33,2,217,17,13,58,141,68,83,128,10,34,2,217,11,58,141,78,75,128,12,35,2,217,3,8,9,58,141,72,117,128,11,36,2,217,15,20,58,141,65,100,128,5,37,2,219,128,0
>5008	80 12 0b 00 14 15 0d 3c 8d 85 07 46 47 50 54 4e
>5018	50 45 80 09 0c 00 13 3a 8d 42 67 80 0c 0d 00 14
>5028	02 03 07 3a 8d 4c 41 80 0a 0e 00 03 11 3c 8d 85
>5038	00 80 0b 0f 00 06 13 0b 3a 8d 41 53 80 09 10 00
>5048	0c 3c 8d 85 00 80 0a 11 00 13 06 3a 8d 4b 6a 80
>5058	0b 12 00 14 10 12 3a 8d 41 57 80 0f 13 00 14 15
>5068	0d 3c 8d 85 04 48 54 53 53 80 0f 14 00 11 0d 3c
>5078	8d 85 05 55 51 55 53 42 80 0a 15 00 02 05 3c 8d
>5088	85 00 80 0e 16 00 03 05 09 3c 8d 85 03 4b 4e 46
>5098	80 09 17 00 0a 3a 8d 45 4a 80 0d 18 00 0a 0f 06
>50a8	05 08 3a 8d 4a 5a 80 0d 19 00 0a 0f 06 05 08 3c
>50b8	8d 85 00 80 0f 1a 00 06 10 0d 3c 8d 85 04 4a 4e
>50c8	4a 51 80 0b 1b 00 03 05 09 3a 8d 42 67 80 09 1c
>50d8	00 01 3a 8d 44 76 80 0a 1d 00 01 3c 8d 85 01 48
>50e8	80 11 1e 00 0a 07 15 08 3c 8d 85 05 49 43 4d 52
>50f8	49 80 0e 1f 00 0f 14 3c 8d 85 04 4f 49 43 46 80
>5108	11 20 00 12 04 0e 3c 8d 85 06 43 45 4b 47 52 55
>5118	80 0b 21 00 10 0b 02 3a 8d 44 48 80 0b 22 00 0e
>5128	0f 3c 8d 85 01 52 80 0f 23 00 0c 12 0f 13 3c 8d
>5138	85 03 4e 42 4b 80 13 24 00 02 0d 09 0a 3c 8d 85
>5148	07 4d 51 4f 41 4e 45 4a 80 0b 25 00 06 10 0d 3a
>5158	8d 4f 4b 80 0c 26 00 02 0d 09 0a 3c 8d 85 00 80
>5168	0c 27 00 04 03 01 0b 3a 8d 46 57 80 10 28 00 0a
>5178	07 15 08 3c 8d 85 04 50 48 44 49 80 0e 29 00 0b
>5188	3c 8d 85 05 4d 46 4b 48 42 80 0b 2a 00 06 3c 8d
>5198	85 02 50 42 80 09 2b 00 0b 3a 8d 4f 40 80 0b 2c
>51a8	00 03 05 09 3a 8d 4f 4e 80 0c 2d 00 02 0d 09 0a
>51b8	3a 8d 4d 7d 80 0b 2e 00 12 0b 0b 3a 8d 4e 70 80
>51c8	11 2f 00 14 02 03 07 3c 8d 85 05 42 45 53 4d 4c
>51d8	80 0b 30 00 08 0c 05 3c 8d 85 00 80 0a 31 00 08
>51e8	0b 3a 8d 4b 4c 80 0e 32 00 0b 3c 8d 85 05 51 47
>51f8	4d 4d 50 80 08 33 00 11 3a 8d 7a 80 11 34 00 03
>5208	05 09 3c 8d 85 06 53 4b 4a 47 43 4d 80 0b 35 00
>5218	02 0f 07 3a 8d 43 69 80 09 36 00 13 06 3a 8d 45
>5228	80 0d 37 00 0a 0f 06 05 08 3a 8d 47 6c 80 0a 38
>5238	00 11 3c 8d 85 01 49 80 0c 39 00 0c 12 0f 13 3a
>5248	8d 44 47 80 0b 3a 00 10 0b 02 3a 8d 41 71 80 0c
>5258	3b 00 02 0d 09 0a 3c 8d 85 00 80 0f 3c 00 0a 3c
>5268	8d 85 06 47 4c 4e 4e 53 4f 80 0d 3d 00 01 12 05
>5278	07 06 3a 8d 45 40 80 0c 3e 00 08 0c 05 3c 8d 85
>5288	01 4c 80 0c 3f 00 0a 3c 8d 85 03 52 4e 44 80 10
>5298	40 00 14 02 03 07 3c 8d 85 04 44 52 46 53 80 0a
>52a8	41 00 0f 14 3a 8d 42 44 80 12 42 00 03 05 09 3c
>52b8	8d 85 07 4d 4e 4c 50 49 42 50 80 10 43 00 14 15
>52c8	0d 3c 8d 85 05 4f 55 46 46 42 80 0b 44 00 02 0f
>52d8	07 3a 8d 4f 41 80 0e 45 00 08 0b 3c 8d 85 04 46
>52e8	51 45 4d 80 14 46 00 0a 0f 06 05 08 3c 8d 85 07
>52f8	46 52 48 47 41 41 4c 80 11 47 00 0c 12 0f 13 3c
>5308	8d 85 05 54 41 44 46 4f 80 10 48 00 0c 3c 8d 85
>5318	07 46 52 45 45 49 42 4b 80 10 49 00 0f 14 3c 8d
>5328	85 06 53 52 53 48 4d 4e 80 0c 4a 00 03 05 09 3c
>5338	8d 85 01 47 80 0c 4b 00 10 11 12 14 3a 8d 47 74
>5348	80 0a 4c 00 10 0f 3a 8d 4d 5b 80 09 4d 00 0c 3a
>5358	8d 44 44 80 09 4e 00 0b 3a 8d 4e 4f 80 0b 4f 00
>5368	03 05 09 3a 8d 42 62 80 08 50 00 06 3a 8d 79 80
>5378	0c 51 00 14 10 12 3c 8d 85 01 48 80 0b 52 00 05
>5388	0b 0d 0b 3a 8d 4a 80 13 53 00 0a 07 15 08 3c 8d
>5398	85 07 4f 53 52 45 51 4b 4c 80 0c 54 00 02 0f 07
>53a8	3c 8d 85 01 4b 80 0d 55 00 11 3c 8d 85 04 52 44
>53b8	4c 43 80 0c 56 00 01 12 05 07 06 3a 8d 69 80 10
>53c8	57 00 0a 0f 06 05 08 3c 8d 85 03 4c 55 52 80 09
>53d8	58 00 0c 3a 8d 4c 56 80 13 59 00 01 12 05 07 06
>53e8	3c 8d 85 06 4b 4a 54 4a 4c 48 80 0a 5a 00 13 06
>53f8	3a 8d 46 57 80 0d 5b 00 01 12 05 07 06 3a 8d 48
>5408	6f 80 09 5c 00 0c 3a 8d 4b 5b 80 09 5d 00 13 3a
>5418	8d 43 72 80 0b 5e 00 14 10 12 3a 8d 46 52 80 12
>5428	5f 00 0c 12 0f 13 3c 8d 85 06 4e 49 47 54 45 4b
>5438	80 0f 60 00 08 0b 3c 8d 85 05 55 41 49 4b 4c 80
>5448	08 61 00 04 3a 8d 5b 80 0c 62 00 11 3c 8d 85 03
>5458	55 4f 52 80 0c 63 00 0c 12 0f 13 3a 8d 49 48 80
>5468	0d 64 00 13 3c 8d 85 04 4a 4c 53 47 80 0a 65 00
>5478	06 3c 8d 85 01 4e 80 11 66 00 0e 0f 3c 8d 85 07
>5488	47 55 53 4b 4e 4a 4e 80 10 67 00 06 3c 8d 85 07
>5498	50 53 47 51 4e 46 45 80 0d 68 00 02 0d 09 0a 3c
>54a8	8d 85 01 50 80 09 69 00 04 3a 8d 4b 43 80 0c 6a
>54b8	00 12 0b 0b 3c 8d 85 01 4d 80 0b 6b 00 03 08 09
>54c8	3a 8d 45 58 80 0c 6c 00 05 0b 0d 0b 3a 8d 49 46
>54d8	80 0c 6d 00 02 0f 07 3c 8d 85 01 4d 80 10 6e 00
>54e8	04 03 01 0b 3c 8d 85 04 45 47 54 47 80 0b 6f 00
>54f8	10 0b 02 3a 8d 4d 50 80 13 70 00 10 11 12 14 3c
>5508	8d 85 07 4e 53 55 42 45 52 48 80 11 71 00 03 11
>5518	3c 8d 85 07 4a 42 4b 42 44 51 4c 80 12 72 00 03
>5528	08 09 3c 8d 85 07 45 47 49 55 4c 45 42 80 0b 73
>5538	00 08 0c 05 3a 8d 4c 7d 80 0d 74 00 0a 06 0c 03
>5548	13 3a 8d 46 57 80 0a 75 00 14 10 12 3a 8d 47 80
>5558	0c 76 00 14 02 03 07 3a 8d 43 48 80 0f 77 00 12
>5568	0b 0b 3c 8d 85 04 4f 52 4f 4f 80 0b 78 00 03 08
>5578	09 3a 8d 46 72 80 11 79 00 08 0b 3c 8d 85 07 4c
>5588	4a 4f 49 49 46 48 80 0c 7a 00 0c 12 0f 13 3a 8d
>5598	4d 5b 80 0c 7b 00 14 02 03 07 3c 8d 85 00 80 10
>55a8	7c 00 0a 0f 06 05 08 3c 8d 85 03 49 4a 44 80 0b
>55b8	7d 00 03 05 09 3a 8d 47 57 80 0e 7e 00 13 06 3c
>55c8	8d 85 04 43 47 53 44 80 0c 7f 00 05 0b 0d 0b 3a
>55d8	8d 47 4b 80 0a 80 00 11 0d 3a 8d 4b 59 80 0c 81
>55e8	00 0c 12 0f 13 3a 8d 4d 71 80 0d 82 00 0a 06 0c
>55f8	03 13 3a 8d 46 58 80 0b 83 00 06 13 0b 3c 8d 85
>5608	00 80 0b 84 00 14 10 12 3a 8d 4c 7e 80 0b 85 00
>5618	13 06 3c 8d 85 01 41 80 0d 86 00 01 12 05 07 06
>5628	3a 8d 4b 6b 80 0b 87 00 03 05 09 3a 8d 49 44 80
>5638	0b 88 00 10 0b 02 3c 8d 85 00 80 0f 89 00 08 0c
>5648	05 3c 8d 85 04 55 4f 44 4f 80 12 8a 00 12 0b 0b
>5658	3c 8d 85 07 52 41 45 43 44 47 55 80 10 8b 00 03
>5668	05 09 3c 8d 85 05 4c 55 55 43 4a 80 10 8c 00 03
>5678	11 3c 8d 85 06 52 52 52 4e 44 45 80 10 8d 00 01
>5688	3c 8d 85 07 44 41 4c 49 54 4f 43 80 0a 8e 00 03
>5698	05 09 3a 8d 56 80 13 8f 00 0c 12 0f 13 3c 8d 85
>56a8	07 4b 4b 48 54 4a 45 47 80 10 90 00 0c 3c 8d 85
>56b8	07 48 4f 41 52 50 48 52 80 0c 91 00 11 0d 3c 8d
>56c8	85 02 4f 4b 80 0b 92 00 12 0b 0b 3a 8d 48 43 80
>56d8	0f 93 00 13 3c 8d 85 06 4a 55 4c 4b 42 55 80 0c
>56e8	94 00 02 0d 09 0a 3a 8d 4e 79 80 13 95 00 0a 07
>56f8	15 08 3c 8d 85 07 55 54 4b 47 4a 47 52 80 10 96
>5708	00 06 3c 8d 85 07 53 4c 44 47 50 4b 4c 80 10 97
>5718	00 0f 0b 10 05 03 3c 8d 85 03 48 41 50 80 0b 98
>5728	00 12 0b 0b 3a 8d 46 5e 80 0e 99 00 0c 12 0f 13
>5738	3c 8d 85 02 48 41 80 0b 9a 00 14 15 0d 3a 8d 48
>5748	41 80 0b 9b 00 03 08 09 3a 8d 4f 42 80 0d 9c 00
>5758	02 0f 07 3c 8d 85 02 49 4c 80 11 9d 00 01 12 05
>5768	07 06 3c 8d 85 04 47 4f 52 49 80 13 9e 00 0a 06
>5778	0c 03 13 3c 8d 85 06 4c 55 49 49 4e 4d 80 10 9f
>5788	00 14 10 12 3c 8d 85 05 4a 47 44 43 4b 80 0a a0
>5798	00 02 05 3a 8d 4b 72 80 0f a1 00 11 0d 3c 8d 85
>57a8	05 41 54 47 41 41 80 11 a2 00 01 12 05 07 06 3c
>57b8	8d 85 04 4a 52 45 46 80 09 a3 00 0a 3a 8d 4c 79
>57c8	80 09 a4 00 0c 3a 8d 4c 57 80 12 a5 00 03 05 09
>57d8	3c 8d 85 07 48 48 45 55 46 43 4e 80 0c a6 00 14
>57e8	02 03 07 3a 8d 41 41 80 0f a7 00 0e 0f 3c 8d 85
>57f8	05 53 4a 45 52 50 80 0e a8 00 14 15 0d 3c 8d 85
>5808	03 54 53 42 80 0b a9 00 02 0f 07 3a 8d 49 5c 80
>5818	10 aa 00 03 08 09 3c 8d 85 05 4b 47 48 55 41 80
>5828	0a ab 00 10 0f 3a 8d 4d 65 80 0f ac 00 12 0b 0b
>5838	3c 8d 85 04 50 4e 48 48 80 0c ad 00 10 11 12 14
>5848	3c 8d 85 00 80 0b ae 00 02 0f 07 3c 8d 85 00 80
>5858	0f af 00 0c 3c 8d 85 06 4c 50 51 4e 4a 4c 80 0a
>5868	b0 00 11 3c 8d 85 01 54 80 0c b1 00 10 11 12 14
>5878	3a 8d 45 4a 80 0f b2 00 03 11 3c 8d 85 05 4c 52
>5888	52 4a 41 80 09 b3 00 0b 3a 8d 4c 58 80 10 b4 00
>5898	10 0b 02 3c 8d 85 05 4c 4d 53 49 4c 80 0a b5 00
>58a8	10 0f 3a 8d 4c 4f 80 0e b6 00 03 11 3c 8d 85 04
>58b8	4c 48 48 41 80 0d b7 00 0a 06 0c 03 13 3a 8d 47
>58c8	57 80 11 b8 00 06 13 0b 3c 8d 85 06 4b 4b 4d 4f
>58d8	4f 45 80 0f b9 00 14 02 03 07 3c 8d 85 03 55 53
>58e8	48 80 0a ba 00 13 06 3a 8d 45 4c 80 0c bb 00 03
>58f8	08 09 3c 8d 85 01 4f 80 0c bc 00 0c 12 0f 13 3c
>5908	8d 85 00 80 0c bd 00 05 0b 0d 0b 3a 8d 48 7e 80
>5918	0c be 00 0e 0f 3c 8d 85 02 4f 41 80 09 bf 00 11
>5928	3a 8d 44 57 80 11 c0 00 04 03 01 0b 3c 8d 85 05
>5938	48 4a 4a 50 4e 80 0b c1 00 06 13 0b 3a 8d 46 63
>5948	80 0e c2 00 14 02 03 07 3c 8d 85 02 51 49 80 0a
>5958	c3 00 08 0b 3a 8d 44 5c 80 09 c4 00 05 3a 8d 4a
>5968	58 80 0b c5 00 03 05 09 3a 8d 43 48 80 10 c6 00
>5978	03 11 3c 8d 85 06 44 4d 45 48 51 4b 80 0a c7 00
>5988	11 0d 3a 8d 42 78 80 11 c8 00 0f 0b 10 05 03 3c
>5998	8d 85 04 4f 4c 44 43 80 0a c9 00 02 0f 07 3a 8d
>59a8	6c 80 0e ca 00 10 11 12 14 3c 8d 85 02 52 45 80
>59b8	12 cb 00 10 0b 02 3c 8d 85 07 49 55 4e 51 4d 4b
>59c8	4f 80 11 cc 00 06 10 0d 3c 8d 85 06 4a 50 48 54
>59d8	48 51 80 0c cd 00 0b 3c 8d 85 03 42 43 50 80 10
>59e8	ce 00 12 0b 0b 3c 8d 85 05 4f 50 43 44 53 80 0a
>59f8	cf 00 13 06 3a 8d 4d 47 80 11 d0 00 13 06 3c 8d
>5a08	85 07 4a 51 55 4a 51 49 44 80 0b d1 00 12 04 0e
>5a18	3a 8d 49 4a 80 0b d2 00 14 10 12 3a 8d 46 78 80
>5a28	0c d3 00 12 0b 0b 3c 8d 85 01 4b 80 0d d4 00 06
>5a38	3c 8d 85 04 4e 46 4b 4d 80 12 d5 00 06 13 0b 3c
>5a48	8d 85 07 4e 41 51 51 50 51 4a 80 09 d6 00 13 3a
>5a58	8d 4b 45 80 0a d7 00 10 0f 3c 8d 85 00 80 10 d8
>5a68	00 13 06 3c 8d 85 06 50 54 53 4b 45 41 80 0f d9
>5a78	00 0e 0f 3c 8d 85 05 4a 4f 45 4e 52 80 0e da 00
>5a88	0b 3c 8d 85 05 4d 55 52 47 50 80 10 db 00 08 0c
>5a98	05 3c 8d 85 05 45 41 50 4b 54 80 11 dc 00 03 05
>5aa8	09 3c 8d 85 06 4c 4f 4e 41 4c 43 80 0a dd 00 08
>5ab8	0b 3c 8d 85 00 80 12 de 00 14 02 03 07 3c 8d 85
>5ac8	06 46 41 49 4e 52 4c 80 0d df 00 01 12 05 07 06
>5ad8	3a 8d 4a 7d 80 12 e0 00 06 13 0b 3c 8d 85 07 54
>5ae8	4a 42 52 50 4d 55 80 0e e1 00 0f 0b 10 05 03 3c
>5af8	8d 85 01 4a 80 09 e2 00 04 3a 8d 46 67 80 09 e3
>5b08	00 11 3a 8d 43 68 80 0c e4 00 05 0b 0d 0b 3a 8d
>5b18	42 6c 80 0b e5 00 06 10 0d 3a 8d 4c 44 80 0a e6
>5b28	00 13 06 3a 8d 4f 42 80 0e e7 00 14 10 12 3c 8d
>5b38	85 03 4c 4f 42 80 0d e8 00 0a 06 0c 03 13 3a 8d
>5b48	4c 52 80 0a e9 00 10 0f 3a 8d 47 55 80 0a ea 00
>5b58	11 0d 3a 8d 42 4a 80 0a eb 00 0f 14 3a 8d 42 44
>5b68	80 0b ec 00 14 10 12 3a 8d 48 48 80 0c ed 00 05
>5b78	0b 0d 0b 3a 8d 4e 4e 80 10 ee 00 04 3c 8d 85 07
>5b88	47 49 43 50 55 4c 55 80 0c ef 00 06 10 0d 3c 8d
>5b98	85 01 49 80 10 f0 00 11 3c 8d 85 07 4c 4f 47 47
>5ba8	42 43 52 80 0b f1 00 12 04 0e 3a 8d 4b 50 80 0d
>5bb8	f2 00 0a 0f 06 05 08 3a 8d 41 71 80 09 f3 00 0b
>5bc8	3a 8d 4d 68 80 0f f4 00 0c 3c 8d 85 06 45 42 4f
>5bd8	51 50 4c 80 12 f5 00 08 0c 05 3c 8d 85 07 49 52
>5be8	42 49 4c 43 4b 80 0e f6 00 06 3c 8d 85 05 42 4b
>5bf8	43 50 48 80 0b f7 00 0c 12 0f 13 3a 8d 4a 80 10
>5c08	f8 00 14 10 12 3c 8d 85 05 41 45 4e 49 4a 80 11
>5c18	f9 00 10 0b 02 3c 8d 85 06 44 4f 53 48 44 54 80
>5c28	0b fa 00 03 05 09 3a 8d 4d 52 80 0a fb 00 14 15
>5c38	0d 3a 8d 6e 80 09 fc 00 0c 3a 8d 44 47 80 13 fd
>5c48	00 01 12 05 07 06 3c 8d 85 06 4f 4b 47 54 48 51
>5c58	80 09 fe 00 11 3a 8d 49 7a 80 0a ff 00 0e 0f 3a
>5c68	8d 4a 52 80 0c 00 01 10 11 12 14 3a 8d 45 7e 80
>5c78	0d 01 01 0f 14 3c 8d 85 03 4a 47 42 80 0c 02 01
>5c88	0a 3c 8d 85 03 4a 53 4e 80 11 03 01 06 10 0d 3c
>5c98	8d 85 06 48 4f 4f 4a 43 55 80 0c 04 01 0f 0b 10
>5ca8	05 03 3a 8d 64 80 0c 05 01 14 02 03 07 3a 8d 45
>5cb8	58 80 10 06 01 06 3c 8d 85 07 47 46 4d 45 43 4a
>5cc8	4c 80 10 07 01 13 06 3c 8d 85 06 51 4d 44 4e 4e
>5cd8	4e 80 0a 08 01 13 06 3a 8d 46 67 80 0e 09 01 03
>5ce8	11 3c 8d 85 04 45 51 4b 51 80 0b 0a 01 12 04 0e
>5cf8	3a 8d 46 7e 80 0e 0b 01 01 12 05 07 06 3c 8d 85
>5d08	01 41 80 0b 0c 01 14 10 12 3a 8d 4a 62 80 0b 0d
>5d18	01 03 05 09 3a 8d 4c 75 80 0b 0e 01 10 0b 02 3a
>5d28	8d 4d 5b 80 0a 0f 01 0f 14 3a 8d 45 74 80 0a 10
>5d38	01 13 06 3a 8d 43 64 80 12 11 01 06 13 0b 3c 8d
>5d48	85 07 52 46 48 55 47 4e 44 80 0b 12 01 06 13 0b
>5d58	3a 8d 46 5b 80 0c 13 01 0c 12 0f 13 3a 8d 44 46
>5d68	80 09 14 01 11 3a 8d 4a 44 80 0b 15 01 03 05 09
>5d78	3c 8d 85 00 80 0a 16 01 13 06 3c 8d 85 00 80 0a
>5d88	17 01 0f 14 3a 8d 4a 4a 80 0c 18 01 05 0b 0d 0b
>5d98	3a 8d 4c 56 80 09 19 01 06 3a 8d 46 5c 80 0b 1a
>5da8	01 06 10 0d 3a 8d 4a 79 80 0a 1b 01 11 0d 3a 8d
>5db8	4e 67 80 0b 1c 01 12 04 0e 3a 8d 47 56 80 09 1d
>5dc8	01 05 3a 8d 49 4d 80 14 1e 01 0a 0f 06 05 08 3c
>5dd8	8d 85 07 54 51 48 55 43 43 45 80 0a 1f 01 13 3c
>5de8	8d 85 01 52 80 0c 20 01 04 03 01 0b 3c 8d 85 00
>5df8	80 10 21 01 01 3c 8d 85 07 50 4e 46 4f 49 45 51
>5e08	80 12 22 01 03 05 09 3c 8d 85 07 4d 4f 54 47 50
>5e18	54 49 80 09 23 01 04 3a 8d 4e 43 80 0b 24 01 08
>5e28	0c 05 3a 8d 46 55 80 0d 25 01 01 12 05 07 06 3a
>5e38	8d 49 5b 80 0c 26 01 0a 07 15 08 3a 8d 4b 48 80
>5e48	0c 27 01 0f 0b 10 05 03 3a 8d 68 80 10 28 01 03
>5e58	08 09 3c 8d 85 05 4b 4d 42 50 4a 80 0a 29 01 0f
>5e68	14 3c 8d 85 00 80 0c 2a 01 0e 0f 3c 8d 85 02 53
>5e78	47 80 0e 2b 01 06 10 0d 3c 8d 85 03 4e 4a 4b 80
>5e88	0a 2c 01 02 05 3a 8d 42 44 80 0a 2d 01 02 05 3a
>5e98	8d 49 64 80 09 2e 01 04 3a 8d 4c 74 80 13 2f 01
>5ea8	0a 06 0c 03 13 3c 8d 85 06 45 43 53 49 48 52 80
>5eb8	0b 30 01 02 0f 07 3a 8d 45 75 80 10 31 01 14 02
>5ec8	03 07 3c 8d 85 04 42 4a 52 4e 80 0b 32 01 06 13
>5ed8	0b 3a 8d 41 64 80 0d 33 01 0b 3c 8d 85 04 46 4c
>5ee8	52 4f 80 0e 34 01 01 12 05 07 06 3c 8d 85 01 4c
>5ef8	80 0a 35 01 0e 0f 3a 8d 4a 4c 80 0d 36 01 11 3c
>5f08	8d 85 04 4d 53 53 4b 80 0b 37 01 03 05 09 3a 8d
>5f18	4f 4a 80 11 38 01 06 10 0d 3c 8d 85 06 49 50 48
>5f28	44 50 52 80 0b 39 01 14 10 12 3c 8d 85 00 80 0a
>5f38	3a 01 0b 3c 8d 85 01 53 80 0a 3b 01 0f 14 3a 8d
>5f48	42 68 80 11 3c 01 10 11 12 14 3c 8d 85 05 43 50
>5f58	45 47 49 80 0b 3d 01 04 03 01 0b 3a 8d 42 80 0b
>5f68	3e 01 06 13 0b 3a 8d 48 51 80 0c 3f 01 05 0b 0d
>5f78	0b 3a 8d 4e 75 80 09 40 01 06 3c 8d 85 00 80 0c
>5f88	41 01 01 12 05 07 06 3a 8d 52 80 09 42 01 0a 3a
>5f98	8d 4d 53 80 0c 43 01 04 03 01 0b 3a 8d 47 49 80
>5fa8	0c 44 01 0a 07 15 08 3a 8d 45 6e 80 0b 45 01 03
>5fb8	08 09 3a 8d 43 7e 80 0d 46 01 14 02 03 07 3c 8d
>5fc8	85 01 4a 80 0f 47 01 08 0b 3c 8d 85 05 42 42 4d
>5fd8	4e 54 80 0e 48 01 0a 06 0c 03 13 3c 8d 85 01 43
>5fe8	80 10 49 01 02 0d 09 0a 3c 8d 85 04 4c 41 4e 44
>5ff8	80 0c 4a 01 05 0b 0d 0b 3c 8d 85 00 80 10 4b 01
>6008	05 3c 8d 85 07 4a 52 54 54 4e 4f 51 80 0c 4c 01
>6018	0a 3c 8d 85 03 4a 48 4b 80 0e 4d 01 10 0b 02 3c
>6028	8d 85 03 50 4c 4e 80 0d 4e 01 05 0b 0d 0b 3c 8d
>6038	85 01 4f 80 10 4f 01 11 3c 8d 85 07 49 55 46 50
>6048	41 52 50 80 0a 50 01 02 05 3a 8d 43 47 80 12 51
>6058	01 0f 0b 10 05 03 3c 8d 85 05 53 46 42 4e 52 80
>6068	0f 52 01 13 3c 8d 85 06 4c 48 49 42 51 42 80 10
>6078	53 01 0c 12 0f 13 3c 8d 85 04 4d 53 55 4d 80 0b
>6088	54 01 06 13 0b 3a 8d 4d 6c 80 0c 55 01 02 0d 09
>6098	0a 3a 8d 4e 7b 80 0d 56 01 0f 0b 10 05 03 3a 8d
>60a8	4f 63 80 0d 57 01 0a 06 0c 03 13 3a 8d 47 7a 80
>60b8	09 58 01 0c 3a 8d 47 42 80 0b 59 01 14 10 12 3c
>60c8	8d 85 00 80 0e 5a 01 14 15 0d 3c 8d 85 03 4d 44
>60d8	42 80 0c 5b 01 10 11 12 14 3a 8d 46 6f 80 0a 5c
>60e8	01 11 0d 3a 8d 44 53 80 0a 5d 01 10 0f 3c 8d 85
>60f8	00 80 08 5e 01 13 3a 8d 68 80 0c 5f 01 04 3c 8d
>6108	85 03 4b 4c 45 80 0d 60 01 0a 06 0c 03 13 3a 8d
>6118	43 6d 80 0d 61 01 0f 0b 10 05 03 3a 8d 4d 4c 80
>6128	0c 62 01 02 05 3c 8d 85 02 41 45 80 10 63 01 11
>6138	0d 3c 8d 85 06 53 45 4a 51 53 46 80 0a 64 01 0e
>6148	0f 3a 8d 4e 6d 80 0a 65 01 14 15 0d 3a 8d 49 80
>6158	0a 66 01 08 0b 3a 8d 4e 6f 80 09 67 01 01 3a 8d
>6168	49 59 80 0b 68 01 02 0f 07 3a 8d 42 6d 80 0f 69
>6178	01 12 04 0e 3c 8d 85 04 44 42 53 4d 80 0f 6a 01
>6188	0a 0f 06 05 08 3c 8d 85 02 41 49 80 10 6b 01 0c
>6198	3c 8d 85 07 4b 47 43 42 48 41 4b 80 0e 6c 01 02
>61a8	0f 07 3c 8d 85 03 54 42 52 80 0a 6d 01 02 05 3a
>61b8	8d 4d 64 80 09 6e 01 06 3a 8d 44 73 80 0b 6f 01
>61c8	14 10 12 3a 8d 46 6a 80 0c 70 01 11 0d 3c 8d 85
>61d8	02 45 4c 80 0d 71 01 0a 0f 06 05 08 3a 8d 49 5e
>61e8	80 0b 72 01 12 0b 0b 3a 8d 4a 65 80 09 73 01 0b
>61f8	3a 8d 49 41 80 0c 74 01 0a 07 15 08 3a 8d 48 60
>6208	80 0c 75 01 05 0b 0d 0b 3a 8d 4b 66 80 0f 76 01
>6218	04 03 01 0b 3c 8d 85 03 45 41 4f 80 0c 77 01 05
>6228	0b 0d 0b 3c 8d 85 00 80 0d 78 01 05 0b 0d 0b 3c
>6238	8d 85 01 42 80 13 79 01 05 0b 0d 0b 3c 8d 85 07
>6248	4e 49 42 47 51 49 42 80 13 7a 01 02 0d 09 0a 3c
>6258	8d 85 07 4d 4c 43 54 45 44 4b 80 0b 7b 01 03 05
>6268	09 3a 8d 4a 4f 80 09 7c 01 0a 3a 8d 41 4a 80 0d
>6278	7d 01 0c 3c 8d 85 04 4c 4d 51 42 80 0b 7e 01 03
>6288	05 09 3a 8d 43 45 80 0a 7f 01 03 11 3a 8d 4a 74
>6298	80 0e 80 01 03 05 09 3c 8d 85 03 43 4c 4e 80 09
>62a8	81 01 01 3a 8d 4b 59 80 0f 82 01 04 3c 8d 85 06
>62b8	4e 4b 42 45 54 49 80 0c 83 01 04 03 01 0b 3a 8d
>62c8	41 69 80 10 84 01 11 3c 8d 85 07 54 55 48 44 43
>62d8	45 46 80 0b 85 01 12 0b 0b 3a 8d 44 51 80 0c 86
>62e8	01 12 04 0e 3c 8d 85 01 4f 80 0d 87 01 05 3c 8d
>62f8	85 04 45 4b 54 4b 80 12 88 01 02 0d 09 0a 3c 8d
>6308	85 06 54 51 55 4e 55 46 80 09 89 01 11 3c 8d 85
>6318	00 80 09 8a 01 04 3a 8d 49 53 80 0b 8b 01 12 0b
>6328	0b 3a 8d 4e 60 80 0c 8c 01 14 02 03 07 3a 8d 49
>6338	62 80 0e 8d 01 0a 06 0c 03 13 3c 8d 85 01 49 80
>6348	0c 8e 01 0a 3c 8d 85 03 55 4c 4a 80 11 8f 01 14
>6358	02 03 07 3c 8d 85 05 46 45 4f 48 49 80 0d 90 01
>6368	04 3c 8d 85 04 4f 55 47 4e 80 10 91 01 13 3c 8d
>6378	85 07 4f 4a 55 45 55 50 4e 80 0a 92 01 08 0b 3a
>6388	8d 4d 5d 80 0c 93 01 14 02 03 07 3c 8d 85 00 80
>6398	0a 94 01 13 3c 8d 85 01 44 80 0b 95 01 08 0c 05
>63a8	3a 8d 4c 4a 80 14 96 01 01 12 05 07 06 3c 8d 85
>63b8	07 54 42 45 52 55 47 4a 80 09 97 01 0f 14 3a 8d
>63c8	51 80 0b 98 01 10 0b 02 3a 8d 46 62 80 0f 99 01
>63d8	0a 3c 8d 85 06 4e 42 51 47 41 4e 80 09 9a 01 0b
>63e8	3a 8d 41 7c 80 0a 9b 01 10 0f 3c 8d 85 00 80 0a
>63f8	9c 01 0e 0f 3a 8d 46 64 80 0b 9d 01 03 08 09 3a
>6408	8d 48 75 80 09 9e 01 04 3a 8d 48 6e 80 0e 9f 01
>6418	08 0b 3c 8d 85 04 42 51 54 46 80 0b a0 01 10 0b
>6428	02 3a 8d 4d 54 80 0b a1 01 06 10 0d 3a 8d 4b 5b
>6438	80 0d a2 01 0a 3c 8d 85 04 41 54 52 50 80 0b a3
>6448	01 0b 3c 8d 85 02 4d 54 80 0f a4 01 13 3c 8d 85
>6458	06 50 50 43 54 42 54 80 10 a5 01 13 06 3c 8d 85
>6468	06 46 46 54 45 48 4a 80 10 a6 01 0a 07 15 08 3c
>6478	8d 85 04 54 46 4c 4e 80 09 a7 01 06 3a 8d 45 67
>6488	80 0b a8 01 06 10 0d 3a 8d 49 52 80 0b a9 01 14
>6498	15 0d 3a 8d 4e 53 80 0d aa 01 0f 0b 10 05 03 3a
>64a8	8d 4c 40 80 0b ab 01 14 15 0d 3a 8d 47 78 80 0d
>64b8	ac 01 0a 0f 06 05 08 3a 8d 41 73 80 0c ad 01 0a
>64c8	3c 8d 85 03 4f 50 47 80 0f ae 01 06 10 0d 3c 8d
>64d8	85 04 55 51 41 54 80 10 af 01 06 10 0d 3c 8d 85
>64e8	05 4c 49 55 50 41 80 0e b0 01 0f 0b 10 05 03 3c
>64f8	8d 85 01 47 80 0b b1 01 08 0c 05 3c 8d 85 00 80
>6508	0c b2 01 0c 12 0f 13 3a 8d 45 51 80 0b b3 01 08
>6518	0c 05 3a 8d 47 61 80 09 b4 01 05 3a 8d 44 4c 80
>6528	0a b5 01 0f 14 3a 8d 44 68 80 0a b6 01 05 3c 8d
>6538	85 01 43 80 0c b7 01 02 0d 09 0a 3a 8d 43 5a 80
>6548	0c b8 01 14 02 03 07 3a 8d 48 4d 80 11 b9 01 06
>6558	13 0b 3c 8d 85 06 53 49 4b 4f 51 4e 80 0a ba 01
>6568	13 06 3c 8d 85 00 80 0e bb 01 01 3c 8d 85 05 4a
>6578	42 44 45 4c 80 0a bc 01 01 3c 8d 85 01 4a 80 0c
>6588	bd 01 04 03 01 0b 3c 8d 85 00 80 0b be 01 0e 0f
>6598	3c 8d 85 01 54 80 0b bf 01 03 05 09 3a 8d 4e 5e
>65a8	80 0d c0 01 10 0b 02 3c 8d 85 02 50 45 80 11 c1
>65b8	01 02 0d 09 0a 3c 8d 85 05 47 49 45 41 4d 80 0c
>65c8	c2 01 14 02 03 07 3a 8d 47 68 80 0b c3 01 03 05
>65d8	09 3a 8d 41 4e 80 0d c4 01 02 0f 07 3c 8d 85 02
>65e8	4f 49 80 0e c5 01 0a 0f 06 05 08 3c 8d 85 01 4f
>65f8	80 0f c6 01 02 0d 09 0a 3c 8d 85 03 51 54 41 80
>6608	0d c7 01 0a 0f 06 05 08 3a 8d 48 45 80 0b c8 01
>6618	06 13 0b 3a 8d 48 70 80 0d c9 01 0c 12 0f 13 3c
>6628	8d 85 01 4e 80 0a ca 01 10 0f 3a 8d 44 7f 80 0c
>6638	cb 01 10 11 12 14 3c 8d 85 00 80 0b cc 01 02 0f
>6648	07 3a 8d 42 7d 80 10 cd 01 0b 3c 8d 85 07 4c 43
>6658	54 53 55 41 55 80 09 ce 01 05 3a 8d 4a 55 80 0e
>6668	cf 01 05 3c 8d 85 05 47 4e 43 4b 48 80 09 d0 01
>6678	11 3a 8d 48 67 80 0b d1 01 08 0c 05 3a 8d 47 7f
>6688	80 0a d2 01 10 0f 3a 8d 45 57 80 0b d3 01 03 05
>6698	09 3c 8d 85 00 80 10 d4 01 05 0b 0d 0b 3c 8d 85
>66a8	04 4a 47 55 4f 80 0c d5 01 10 11 12 14 3a 8d 4c
>66b8	47 80 10 d6 01 04 3c 8d 85 07 54 52 55 4e 43 4d
>66c8	45 80 0d d7 01 06 10 0d 3c 8d 85 02 4e 53 80 0c
>66d8	d8 01 08 0c 05 3c 8d 85 01 48 80 0a d9 01 03 11
>66e8	3a 8d 4c 68 80 0d da 01 03 08 09 3c 8d 85 02 4a
>66f8	42 80 0c db 01 05 3c 8d 85 03 50 46 41 80 12 dc
>6708	01 08 0c 05 3c 8d 85 07 4b 55 51 47 45 49 4d 80
>6718	11 dd 01 0a 06 0c 03 13 3c 8d 85 04 51 4b 49 54
>6728	80 0c de 01 10 11 12 14 3a 8d 4d 44 80 0b df 01
>6738	06 13 0b 3a 8d 44 6a 80 0b e0 01 14 15 0d 3a 8d
>6748	4c 76 80 11 e1 01 10 11 12 14 3c 8d 85 05 50 4f
>6758	4d 50 44 80 0f e2 01 0f 0b 10 05 03 3c 8d 85 02
>6768	47 50 80 0d e3 01 0f 0b 10 05 03 3a 8d 47 61 80
>6778	11 e4 01 02 0f 07 3c 8d 85 06 48 4b 49 50 49 44
>6788	80 0b e5 01 14 15 0d 3a 8d 48 6c 80 0c e6 01 10
>6798	11 12 14 3a 8d 4d 58 80 0b e7 01 10 0f 3c 8d 85
>67a8	01 4d 80 09 e8 01 06 3a 8d 48 4e 80 0c e9 01 0c
>67b8	12 0f 13 3c 8d 85 00 80 0c ea 01 12 0b 0b 3c 8d
>67c8	85 01 43 80 08 eb 01 04 3a 8d 79 80 0d ec 01 03
>67d8	05 09 3c 8d 85 02 49 53 80 0f ed 01 10 11 12 14
>67e8	3c 8d 85 03 51 43 4e 80 11 ee 01 12 0b 0b 3c 8d
>67f8	85 06 43 51 4b 54 4c 50 80 0b ef 01 06 10 0d 3a
>6808	8d 48 66 80 09 f0 01 05 3a 8d 42 65 80 0a f1 01
>6818	0f 14 3a 8d 41 64 80 13 f2 01 0a 07 15 08 3c 8d
>6828	85 07 54 41 48 53 54 53 4f 80 0a f3 01 13 06 3c
>6838	8d 85 00 80 09 f4 01 0b 3a 8d 4e 4b 80 0c f5 01
>6848	10 0f 3c 8d 85 02 44 50 80 10 f6 01 03 05 09 3c
>6858	8d 85 05 4d 52 48 53 47 80 09 f7 01 04 3a 8d 4b
>6868	48 80 0b f8 01 10 0f 3c 8d 85 01 49 80 0d f9 01
>6878	10 11 12 14 3c 8d 85 01 4f 80 0c fa 01 10 11 12
>6888	14 3a 8d 4a 50 80 0c fb 01 13 06 3c 8d 85 02 54
>6898	45 80 0c fc 01 0c 12 0f 13 3c 8d 85 00 80 09 fd
>68a8	01 04 3a 8d 4e 72 80 0c fe 01 d9 14 15 0d 3a 8d
>68b8	48 6c 80 09 ff 01 d9 13 3a 8d 68 80 0a 00 02 d9
>68c8	05 3a 8d 42 65 80 0b 01 02 d9 08 0b 3a 8d 4d 5d
>68d8	80 0c 02 02 d9 12 0b 0b 3a 8d 4e 60 80 0b 03 02
>68e8	d9 13 06 3a 8d 43 64 80 0b 04 02 d9 02 05 3a 8d
>68f8	4d 64 80 0e 05 02 d9 0a 0f 06 05 08 3a 8d 48 45
>6908	80 0b 06 02 d9 0e 0f 3a 8d 46 64 80 0a 07 02 d9
>6918	11 3a 8d 48 67 80 0a 08 02 d9 04 3a 8d 4e 72 80
>6928	0c 09 02 d9 02 0f 07 3a 8d 42 7d 80 0d 0a 02 d9
>6938	0c 12 0f 13 3a 8d 45 51 80 0c 0b 02 d9 14 10 12
>6948	3a 8d 46 6a 80 0c 0c 02 d9 10 0b 02 3a 8d 4d 54
>6958	80 0d 0d 02 d9 01 12 05 07 06 3a 8d 52 80 0a 0e
>6968	02 d9 06 3a 8d 48 4e 80 0e 0f 02 d9 0f 0b 10 05
>6978	03 3a 8d 47 61 80 0d 10 02 d9 14 02 03 07 3a 8d
>6988	47 68 80 0a 11 02 d9 0a 3a 8d 41 4a 80 0a 12 02
>6998	d9 01 3a 8d 4b 59 80 0a 13 02 d9 0c 3a 8d 47 42
>69a8	80 0e 14 02 d9 0a 06 0c 03 13 3a 8d 43 6d 80 0c
>69b8	15 02 d9 03 05 09 3a 8d 41 4e 80 0d 16 02 d9 05
>69c8	0b 0d 0b 3a 8d 4b 66 80 0d 17 02 d9 10 11 12 14
>69d8	3a 8d 4a 50 80 0c 18 02 d9 12 04 0e 3a 8d 47 56
>69e8	80 0b 19 02 d9 03 11 3a 8d 4c 68 80 0d 1a 02 d9
>69f8	0a 07 15 08 3a 8d 48 60 80 0c 1b 02 d9 08 0c 05
>6a08	3a 8d 47 7f 80 0d 1c 02 d9 02 0d 09 0a 3a 8d 43
>6a18	5a 80 0c 1d 02 d9 06 10 0d 3a 8d 48 66 80 0b 1e
>6a28	02 d9 10 0f 3a 8d 45 57 80 0c 1f 02 d9 06 13 0b
>6a38	3a 8d 44 6a 80 0d 20 02 d9 04 03 01 0b 3a 8d 41
>6a48	69 80 0b 21 02 d9 11 0d 3a 8d 44 53 80 0a 22 02
>6a58	d9 0b 3a 8d 4e 4b 80 0c 23 02 d9 03 08 09 3a 8d
>6a68	48 75 80 0b 24 02 d9 0f 14 3a 8d 41 64 80 05 25
>6a78	02 db 80 00

;******  Return to file: ../source/main/00start.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/assert.asm

.101a					Command_Assert:
.101a	20 73 17	jsr $1773			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 9e 1c	jsr $1c9e			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 04		ldx #$04			ldx 	#ErrorID_Assert
.1025	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad ca 0a	lda $0aca			lda 	endMemory					; set high memory = end of memory
.102d	8d cc 0a	sta $0acc			sta 	highMemory
.1030	ad cb 0a	lda $0acb			lda 	endMemory+1
.1033	8d cd 0a	sta $0acd			sta 	highMemory+1
.1036	ad c8 0a	lda $0ac8			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad c9 0a	lda $0ac9			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d ce 0a	sta $0ace			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d cf 0a	sta $0acf			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 6c 10	jsr $106c			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	20 04 1d	jsr $1d04			jsr 	RSReset 					; reset the return stack.
.1064	a2 02		ldx #$02		ldx	#2
.1066	20 38 20	jsr $2038		jsr	variableHandler
.1069	68		pla				pla
.106a	a8		tay				tay
.106b	60		rts				rts
.106c					AdvanceLowMemoryByte:
.106c	18		clc				clc
.106d	6d ce 0a	adc $0ace			adc 	lowMemory
.1070	8d ce 0a	sta $0ace			sta 	lowMemory
.1073	90 03		bcc $1078			bcc 	_ALMBExit
.1075	ee cf 0a	inc $0acf			inc 	lowMemory+1
.1078					_ALMBExit:
.1078	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/for.asm

.203f					Command_FOR:
.203f	a9 46		lda #$46			lda 	#markerFOR 					; allocate the space.
.2041	a2 0b		ldx #$0b			ldx 	#11
.2043	20 12 1d	jsr $1d12			jsr 	RSClaim
.2046	20 b5 10	jsr $10b5			jsr 	CommandLET 					; do the same as LET.
.2049	a5 40		lda $40				lda 	esType 						; check type should be integer reference.
.204b	c9 80		cmp #$80			cmp 	#$80
.204d	d0 4c		bne $209b			bne 	_CFType
.204f	a9 c6		lda #$c6			lda 	#TKW_TO 					; check TO present.
.2051	20 df 1c	jsr $1cdf			jsr 	CheckToken
.2054	a2 01		ldx #$01			ldx 	#1 							; keep the variable address in stack 0
.2056	20 75 17	jsr $1775			jsr 	EvaluateInteger				; get terminal value in stack 1
.2059	98		tya				tya
.205a	48		pha				pha
.205b	a0 04		ldy #$04			ldy 	#4
.205d	a5 48		lda $48				lda		esInt0 						; the address of the index into 4 and 5
.205f	91 78		sta ($78),y			sta 	(rsPointer),y
.2061	c8		iny				iny
.2062	a5 50		lda $50				lda		esInt1
.2064	91 78		sta ($78),y			sta 	(rsPointer),y
.2066	c8		iny				iny
.2067	a9 01		lda #$01			lda 	#1  						; the default step in 6
.2069	91 78		sta ($78),y			sta 	(rsPointer),y
.206b	c8		iny				iny
.206c	a5 49		lda $49				lda		esInt0+1 					; terminal value in 7 to 11.
.206e	91 78		sta ($78),y			sta 	(rsPointer),y
.2070	c8		iny				iny
.2071	a5 51		lda $51				lda		esInt1+1
.2073	91 78		sta ($78),y			sta 	(rsPointer),y
.2075	c8		iny				iny
.2076	a5 59		lda $59				lda		esInt2+1
.2078	91 78		sta ($78),y			sta 	(rsPointer),y
.207a	c8		iny				iny
.207b	a5 61		lda $61				lda		esInt3+1
.207d	91 78		sta ($78),y			sta 	(rsPointer),y
.207f	68		pla				pla
.2080	a8		tay				tay
.2081	b1 02		lda ($02),y			lda 	(codePtr),y 				; followed by STEP.
.2083	c9 c7		cmp #$c7			cmp 	#TKW_STEP
.2085	d0 0e		bne $2095			bne 	_CFDone
.2087	c8		iny				iny									; skip over step.
.2088	20 75 17	jsr $1775			jsr 	EvaluateInteger 			; get step
.208b	98		tya				tya
.208c	48		pha				pha
.208d	b5 48		lda $48,x			lda 	esInt0,x 					; copy it into step (bit lazy here)
.208f	a0 06		ldy #$06			ldy 	#6
.2091	91 78		sta ($78),y			sta 	(rsPointer),y
.2093	68		pla				pla
.2094	a8		tay				tay
.2095					_CFDone:
.2095	a9 01		lda #$01			lda 	#1
.2097	20 3e 1d	jsr $1d3e			jsr 	RSSavePosition 				; save position.
.209a	60		rts				rts
.209b					_CFType:
.209b	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.209d	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.20a0					Command_NEXT:
.20a0	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.20a2	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.20a4	c9 46		cmp #$46			cmp 	#markerFOR 						; does it match
.20a6	f0 05		beq $20ad			beq 	_isok
.20a8	a2 10		ldx #$10			ldx 	#ErrorID_nextErr
.20aa	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.20ad					_isok:
.20ad	b1 02		lda ($02),y			lda 	(codePtr),y 				; is it NEXT <index>
.20af	c9 40		cmp #$40			cmp 	#$40 						; e.g. a variable follows 00-3F
.20b1	b0 18		bcs $20cb			bcs 	_CNNoIndex
.20b3	a2 00		ldx #$00			ldx 	#0 							; start on stack
.20b5	20 a2 17	jsr $17a2			jsr 	EvaluateReference 			; this is the variable/parameter to localise.
.20b8	98		tya				tya
.20b9	48		pha				pha
.20ba	a0 04		ldy #$04			ldy 	#4 							; check same variable
.20bc	b1 78		lda ($78),y			lda 	(rsPointer),y
.20be	d5 48		cmp $48,x			cmp 	esInt0,x
.20c0	d0 76		bne $2138			bne 	_CNBadIndex
.20c2	c8		iny				iny
.20c3	b1 78		lda ($78),y			lda 	(rsPointer),y
.20c5	d5 50		cmp $50,x			cmp 	esInt1,x
.20c7	d0 6f		bne $2138			bne 	_CNBadIndex
.20c9	68		pla				pla
.20ca	a8		tay				tay
.20cb					_CNNoIndex:
.20cb	98		tya				tya
.20cc	48		pha				pha
.20cd	a0 04		ldy #$04			ldy 	#4 							; make temp0 point to the index
.20cf	b1 78		lda ($78),y			lda 	(rsPointer),y
.20d1	85 04		sta $04				sta 	temp0
.20d3	c8		iny				iny
.20d4	b1 78		lda ($78),y			lda 	(rsPointer),y
.20d6	85 05		sta $05				sta 	temp0+1
.20d8	c8		iny				iny
.20d9	a2 00		ldx #$00			ldx 	#0 							; X is the sign extend part of the step.
.20db	b1 78		lda ($78),y			lda 	(rsPointer),y 				; get the step.
.20dd	85 09		sta $09				sta 	temp2+1 					; save for later.
.20df	10 01		bpl $20e2			bpl 	_CNSignX
.20e1	ca		dex				dex  								; X = $FF
.20e2					_CNSignX:
.20e2	18		clc				clc 								; add to the LSB
.20e3	a0 00		ldy #$00			ldy 	#0
.20e5	71 04		adc ($04),y			adc 	(temp0),y
.20e7	91 04		sta ($04),y			sta 	(temp0),y
.20e9					_CNPropogate:
.20e9	c8		iny				iny  								; add the sign extended in X to the rest.
.20ea	8a		txa				txa
.20eb	71 04		adc ($04),y			adc 	(temp0),y
.20ed	91 04		sta ($04),y			sta 	(temp0),y
.20ef	c8		iny				iny
.20f0	8a		txa				txa
.20f1	71 04		adc ($04),y			adc 	(temp0),y
.20f3	91 04		sta ($04),y			sta 	(temp0),y
.20f5	c8		iny				iny
.20f6	8a		txa				txa
.20f7	71 04		adc ($04),y			adc 	(temp0),y
.20f9	91 04		sta ($04),y			sta 	(temp0),y
.20fb	18		clc				clc 								; point temp1 to the terminal value stored in the stack.
.20fc	a5 78		lda $78				lda 	rsPointer
.20fe	69 07		adc #$07			adc 	#7
.2100	85 06		sta $06				sta 	temp1
.2102	a9 00		lda #$00			lda 	#0
.2104	85 08		sta $08				sta 	temp2 						; clear temp2, which is the OR of all the subtractions.
.2106	a8		tay				tay 								; and clear the Y register again.
.2107	65 79		adc $79				adc 	rsPointer+1
.2109	85 07		sta $07				sta 	temp1+1
.210b	38		sec				sec 								; calculate current - limit oring interim values.
.210c	20 44 21	jsr $2144			jsr 	_CNCompare
.210f	20 44 21	jsr $2144			jsr 	_CNCompare
.2112	20 44 21	jsr $2144			jsr 	_CNCompare
.2115	20 44 21	jsr $2144			jsr 	_CNCompare
.2118	50 02		bvc $211c			bvc 	_CNNoOverflow 				; converts to a signed comparison on the sign bit.
.211a	49 80		eor #$80			eor 	#$80
.211c					_CNNoOverflow:
.211c	a4 09		ldy $09				ldy 	temp2+1						; get step back
.211e	30 1d		bmi $213d			bmi 	_CNCheckDownto
.2120	c9 00		cmp #$00			cmp 	#0
.2122	30 0c		bmi $2130			bmi 	_CNLoopRound 				; loop round if < =
.2124	a5 08		lda $08				lda 	temp2
.2126	f0 08		beq $2130			beq 	_CNLoopRound
.2128					_CNLoopExit:
.2128	68		pla				pla
.2129	a8		tay				tay
.212a	a9 0b		lda #$0b			lda 	#11
.212c	20 34 1d	jsr $1d34			jsr 	RSFree
.212f	60		rts				rts
.2130					_CNLoopRound:
.2130	68		pla				pla
.2131	a8		tay				tay
.2132	a9 01		lda #$01			lda 	#1
.2134	20 51 1d	jsr $1d51			jsr 	RSLoadPosition				; go back to the loop top
.2137	60		rts				rts
.2138					_CNBadIndex:
.2138	a2 12		ldx #$12			ldx 	#ErrorID_BadIndex
.213a	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.213d					_CNCheckDownto:
.213d	c9 00		cmp #$00			cmp 	#0
.213f	10 ef		bpl $2130			bpl 	_CNLoopRound
.2141	4c 28 21	jmp $2128			jmp 	_CNLoopExit
.2144					_CNCompare:
.2144	b1 04		lda ($04),y			lda 	(temp0),y 					; do the subtraction - compare don't care about answer
.2146	f1 06		sbc ($06),y			sbc 	(temp1),y
.2148	05 08		ora $08				ora 	temp2 						; Or into temp2 (does not affect carry)
.214a	85 08		sta $08				sta 	temp2
.214c	c8		iny				iny
.214d	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/if.asm

.1079					CommandIf:
.1079	20 73 17	jsr $1773			jsr 	EvaluateRootInteger 		; if what ?
.107c	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.107e	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1080	f0 04		beq $1086			beq 	_IfSimple
.1082	c9 a0		cmp #$a0			cmp 	#TKW_THEN
.1084	d0 1b		bne $10a1			bne 	_IfComplex
.1086					_IfSimple:
.1086	20 9e 1c	jsr $1c9e			jsr 	MInt32Zero					; check if TOS zero
.1089	f0 10		beq $109b			beq 	_IfEOL 						; go to next line.
.108b	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.108d	c8		iny				iny
.108e	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; was it if GOTO ?
.1090	f0 0c		beq $109e			beq 	_IfGoto 					; do the Goto code
.1092	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows the THEN ?
.1094	29 c0		and #$c0			and 	#$C0 						; check $40-$7F
.1096	c9 40		cmp #$40			cmp 	#$40 						; e.g. number IF x = 0 THEN 170
.1098	f0 04		beq $109e			beq 	_IfGoto
.109a	60		rts				rts 								; else continue on this line.
.109b					_IfEOL:
.109b	4c 70 13	jmp $1370			jmp 	AdvanceNextLine 			; go to next line
.109e					_IfGoto:
.109e	4c af 13	jmp $13af			jmp 	CommandGoto
.10a1					_IfComplex:
.10a1	20 9e 1c	jsr $1c9e			jsr 	MInt32Zero 					; is it true ?
.10a4	f0 01		beq $10a7			beq 	_IFSkip 					; if non-zero then skip to ELSE/ENDIF
.10a6	60		rts				rts 								; else continue.
.10a7					_IFSkip:
.10a7	a9 d0		lda #$d0			lda	 	#TKW_ELSE 					; test failed, go to ELSE or ENDIF whichever comes first.
.10a9	a2 a1		ldx #$a1			ldx 	#TKW_ENDIF
.10ab	4c b7 21	jmp $21b7			jmp		ScanForward
.10ae					Command_ELSE:
.10ae	a2 a1		ldx #$a1			ldx 	#TKW_ENDIF
.10b0	8a		txa				txa
.10b1	4c b7 21	jmp $21b7			jmp		ScanForward
.10b4					Command_ENDIF:
.10b4	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/let.asm

.10b5					CommandLet:
.10b5	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.10b7	20 a2 17	jsr $17a2			jsr 	EvaluateReference
.10ba	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.10bc	20 df 1c	jsr $1cdf			jsr 	CheckToken
.10bf	e8		inx				inx 								; do RHS
.10c0	20 56 17	jsr $1756			jsr 	Evaluate 					; evaluate and derefernce
.10c3	ca		dex				dex
.10c4	20 c8 10	jsr $10c8			jsr 	WriteValue 					; write it out
.10c7	60		rts				rts
.10c8					WriteValue:
.10c8	98		tya				tya
.10c9	48		pha				pha
.10ca	20 21 11	jsr $1121			jsr 	WVSetTemp0 					; set temp0 to point to target address.
.10cd	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10cf	55 41		eor $41,x			eor 	esType+1,x
.10d1	29 40		and #$40			and 	#$40
.10d3	d0 47		bne $111c			bne		_WVType
.10d5	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10d7	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10d9	29 40		and #$40			and 	#$40
.10db	d0 30		bne $110d			bne 	_WVCopyData2
.10dd	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10df	15 41		ora $41,x			ora 	esType+1,x
.10e1	4a		lsr a				lsr 	a
.10e2	90 18		bcc $10fc			bcc 	_WVCopyData4
.10e4	b5 40		lda $40,x			lda 	esType,x
.10e6	4a		lsr a				lsr 	a
.10e7	90 33		bcc $111c			bcc 	_WVType
.10e9	e8		inx				inx 								; force the value being written to be a float.
.10ea	20 21 14	jsr $1421			jsr 	BPMakeFloat
.10ed	ca		dex				dex
.10ee	20 21 11	jsr $1121			jsr 	WVSetTemp0 					; set Temp0 to write address
.10f1	e8		inx				inx
.10f2	8a		txa				txa
.10f3	a2 1e		ldx #$1e		ldx	#30
.10f5	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.10f8	aa		tax				tax
.10f9	4c 19 11	jmp $1119			jmp 	_WVCopyExit
.10fc					_WVCopyData4:
.10fc	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.10fe	29 20		and #$20			and 	#$20
.1100	d0 11		bne $1113			bne 	_WVCopyData1
.1102	a0 03		ldy #$03			ldy 	#3
.1104	b5 61		lda $61,x			lda 	esInt3+1,x
.1106	91 04		sta ($04),y			sta 	(temp0),y
.1108	88		dey				dey
.1109	b5 59		lda $59,x			lda 	esInt2+1,x
.110b	91 04		sta ($04),y			sta 	(temp0),y
.110d					_WVCopyData2:
.110d	a0 01		ldy #$01			ldy 	#1
.110f	b5 51		lda $51,x			lda 	esInt1+1,x
.1111	91 04		sta ($04),y			sta 	(temp0),y
.1113					_WVCopyData1:
.1113	a0 00		ldy #$00			ldy 	#0
.1115	b5 49		lda $49,x			lda 	esInt0+1,x
.1117	91 04		sta ($04),y			sta 	(temp0),y
.1119					_WVCopyExit:
.1119	68		pla				pla
.111a	a8		tay				tay
.111b	60		rts				rts
.111c					_WVType:
.111c	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.111e	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1121					WVSetTemp0:
.1121	b5 48		lda $48,x			lda 	esInt0,x
.1123	85 04		sta $04				sta 	temp0
.1125	b5 50		lda $50,x			lda 	esInt1,x
.1127	85 05		sta $05				sta 	temp0+1
.1129	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/new.asm

.112a					Command_New:
.112a	20 7f 12	jsr $127f			jsr 	ResetCodeAddress 			; point to first line
.112d	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.112f	98		tya				tya
.1130	91 02		sta ($02),y			sta 	(codePtr),y
.1132	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.1135	4c 6d 13	jmp $136d			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/poke.asm

.1138					Command_Poke:
.1138	a9 01		lda #$01			lda 	#1
.113a	d0 06		bne $1142			bne 	PokeGeneral
.113c					Command_Doke:
.113c	a9 02		lda #$02			lda 	#2
.113e	d0 02		bne $1142			bne 	PokeGeneral
.1140					Command_Loke:
.1140	a9 03		lda #$03			lda 	#3
.1142					PokeGeneral:
.1142	48		pha				pha 								; save size
.1143	20 73 17	jsr $1773			jsr 	EvaluateRootInteger 		; target address
.1146	20 f7 1c	jsr $1cf7			jsr	 	CheckComma
.1149	e8		inx				inx
.114a	20 75 17	jsr $1775			jsr 	EvaluateInteger 			; what value to POKE ?
.114d	ca		dex				dex
.114e	20 21 11	jsr $1121			jsr 	WVSetTemp0 					; temp0 points to the target address
.1151	84 0a		sty $0a				sty 	tempShort 					; save Y
.1153	68		pla				pla 								; get copy type and dispatch
.1154	aa		tax				tax
.1155	ca		dex				dex
.1156	f0 14		beq $116c			beq 	_Poke1
.1158	ca		dex				dex
.1159	f0 0b		beq $1166			beq 	_Poke2
.115b	a0 03		ldy #$03			ldy 	#3
.115d	a5 61		lda $61				lda 	esInt3+1
.115f	91 04		sta ($04),y			sta 	(temp0),y
.1161	88		dey				dey
.1162	a5 59		lda $59				lda 	esInt2+1
.1164	91 04		sta ($04),y			sta 	(temp0),y
.1166					_Poke2:
.1166	a0 01		ldy #$01			ldy 	#1
.1168	a5 51		lda $51				lda 	esInt1+1
.116a	91 04		sta ($04),y			sta 	(temp0),y
.116c					_Poke1:
.116c	a0 00		ldy #$00			ldy 	#0
.116e	a5 49		lda $49				lda 	esInt0+1
.1170	91 04		sta ($04),y			sta 	(temp0),y
.1172	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1174	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/print.asm

.0af3					lastPrintToken:
>0af3							.fill 	1
.1175					Command_Print:
.1175	a9 00		lda #$00			lda 	#0 							; clear LPT flag
.1177	8d f3 0a	sta $0af3			sta 	lastPrintToken
.117a	88		dey				dey
.117b					_PrintLoopSkip:
.117b	c8		iny				iny
.117c					_PrintLoop:
.117c	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.117e	c9 80		cmp #$80			cmp 	#TOK_EOL  					; done if end of line or colon
.1180	f0 5b		beq $11dd			beq 	_PrintExit
.1182	c9 c2		cmp #$c2			cmp 	#TKW_COLON
.1184	f0 57		beq $11dd			beq 	_PrintExit
.1186	8d f3 0a	sta $0af3			sta 	lastPrintToken 				; update LPT
.1189	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 				; ignore semicolon
.118b	f0 ee		beq $117b			beq 	_PrintLoopSkip
.118d	c9 cd		cmp #$cd			cmp 	#TKW_QUOTE 					; ' is new line
.118f	f0 3c		beq $11cd			beq	 	_PrintNewLine
.1191	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; , is print tab
.1193	f0 40		beq $11d5			beq 	_PrintTab
.1195	20 54 17	jsr $1754			jsr 	EvaluateRoot 				; evaluate something at the root
.1198	a9 d0		lda #$d0			lda 	#(convertBuffer) & $FF
.119a	85 04		sta $04				sta 	temp0
.119c	a9 0a		lda #$0a			lda 	#(convertBuffer) >> 8
.119e	85 05		sta $05				sta 	1+(temp0)
.11a0	a5 40		lda $40				lda 	esType 						; get type
.11a2	f0 15		beq $11b9			beq		_PrintInteger
.11a4	4a		lsr a				lsr 	a 							; check for floating point
.11a5	b0 08		bcs $11af			bcs 	_PrintFloat
.11a7					_PrintString:
.11a7	a2 00		ldx #$00			ldx 	#0 							; bottom string to temp0
.11a9	20 21 11	jsr $1121			jsr 	WVSetTemp0
.11ac	4c c7 11	jmp $11c7			jmp 	_PrintTemp0 				; print no leading space.
.11af					_PrintFloat:
.11af	a9 00		lda #$00			lda 	#0 							; stack level.
.11b1	a2 14		ldx #$14		ldx	#20
.11b3	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.11b6	4c c0 11	jmp $11c0			jmp 	_PrintSpaceTemp0
.11b9					_PrintInteger:
.11b9	a9 8a		lda #$8a			lda 	#10+$80 					; base 10 signed
.11bb	a2 00		ldx #$00			ldx 	#0 							; bottom stack element
.11bd	20 cd 1b	jsr $1bcd			jsr 	MInt32ToString				; convert to text
.11c0					_PrintSpaceTemp0:
.11c0	a9 20		lda #$20			lda 	#32
.11c2	a2 02		ldx #$02		ldx	#2
.11c4	20 84 1d	jsr $1d84		jsr	deviceHandler
.11c7					_PrintTemp0:
.11c7	20 ee 11	jsr $11ee			jsr 	PrintString
.11ca	4c 7c 11	jmp $117c			jmp 	_PrintLoop
.11cd					_PrintNewLine:
.11cd	a2 00		ldx #$00		ldx	#0
.11cf	20 84 1d	jsr $1d84		jsr	deviceHandler
.11d2	4c 7b 11	jmp $117b			jmp 	_PrintLoopSkip
.11d5					_PrintTab:
.11d5	a2 04		ldx #$04		ldx	#4
.11d7	20 84 1d	jsr $1d84		jsr	deviceHandler
.11da	4c 7b 11	jmp $117b			jmp 	_PrintLoopSkip
.11dd					_PrintExit:
.11dd	ad f3 0a	lda $0af3			lda		lastPrintToken 				; check last token
.11e0	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 				; if , or ; do not print NL
.11e2	f0 09		beq $11ed			beq 	_PrintExit2
.11e4	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.11e6	f0 05		beq $11ed			beq 	_PrintExit2
.11e8	a2 00		ldx #$00		ldx	#0
.11ea	20 84 1d	jsr $1d84		jsr	deviceHandler
.11ed					_PrintExit2:
.11ed	60		rts				rts
.11ee					PrintString:
.11ee	8a		txa				txa
.11ef	48		pha				pha
.11f0	98		tya				tya
.11f1	48		pha				pha
.11f2	a0 00		ldy #$00			ldy 	#0							; get length
.11f4	b1 04		lda ($04),y			lda 	(temp0),y
.11f6	aa		tax				tax 								; into X
.11f7	e0 00		cpx #$00	_PSLoop:cpx 	#0 							; finished ?
.11f9	f0 10		beq $120b			beq 	_PSExit
.11fb	ca		dex				dex
.11fc	8a		txa				txa
.11fd	48		pha				pha
.11fe	c8		iny				iny
.11ff	b1 04		lda ($04),y			lda 	(temp0),y
.1201	a2 02		ldx #$02		ldx	#2
.1203	20 84 1d	jsr $1d84		jsr	deviceHandler
.1206	68		pla				pla
.1207	aa		tax				tax
.1208	4c f7 11	jmp $11f7			jmp 	_PSLoop
.120b					_PSExit:
.120b	68		pla				pla
.120c	a8		tay				tay
.120d	68		pla				pla
.120e	aa		tax				tax
.120f	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/rem.asm

.1210					Command_Rem:
.1210					Command_Rem2:
.1210	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1212	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.1214	d0 06		bne $121c			bne 	_CRNotString
.1216	c8		iny				iny
.1217	98		tya				tya
.1218	38		sec				sec
.1219	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.121b	a8		tay				tay
.121c					_CRNotString:
.121c	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/repeat.asm

.214e					Command_Repeat:
.214e	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for REPEAT
.2150	a9 52		lda #$52			lda 	#markerREPEAT 				; repeat marker allocate 4 bytes
.2152	20 12 1d	jsr $1d12			jsr 	RSClaim
.2155	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.2157	20 3e 1d	jsr $1d3e			jsr 	RSSavePosition
.215a	60		rts				rts
.215b					Command_Until:
.215b	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.215d	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.215f	c9 52		cmp #$52			cmp 	#markerREPEAT 						; does it match
.2161	f0 05		beq $2168			beq 	_isok
.2163	a2 0f		ldx #$0f			ldx 	#ErrorID_untilErr
.2165	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.2168					_isok:
.2168	20 73 17	jsr $1773			jsr 	EvaluateRootInteger 		; at the bottom.
.216b	20 9e 1c	jsr $1c9e			jsr 	MInt32Zero					; check if TOS zero
.216e	d0 06		bne $2176			bne 	_CUExit
.2170	a9 01		lda #$01			lda 	#1
.2172	20 51 1d	jsr $1d51			jsr 	RSLoadPosition 				; reload the position from offset 1.
.2175	60		rts				rts
.2176					_CUExit:
.2176	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.2178	20 34 1d	jsr $1d34			jsr 	RSFree
.217b	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/run.asm

.121d					Command_Run:
.121d	a2 ff		ldx #$ff			ldx 	#$FF
.121f	9a		txs				txs
.1220	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.1223	20 7f 12	jsr $127f			jsr 	ResetCodeAddress
.1226	a0 03		ldy #$03			ldy 	#3
.1228					CRNextInstruction:
.1228	64 7b		stz $7b				stz 	softMemAlloc+1
.122a	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.122c	10 1c		bpl $124a			bpl 	_CRNotToken
.122e	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1230	b0 0c		bcs $123e			bcs 	_CRExecute
.1232	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; unary is ignored.
.1234	b0 56		bcs $128c			bcs 	Unimplemented
.1236	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1238	b0 04		bcs $123e			bcs 	_CRExecute
.123a	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.123c	b0 16		bcs $1254			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.123e					_CRExecute:
.123e	c8		iny				iny 								; consume it.
.123f	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1240	aa		tax				tax
.1241	20 47 12	jsr $1247			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1244	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.1247					_CRRunRoutine:
.1247	7c 96 12	jmp ($1296,x)			jmp 	(Group0Vectors,x)
.124a					_CRNotToken:
.124a	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.124c	b0 3e		bcs $128c			bcs 	Unimplemented
.124e					_CRDefaultLet:
.124e	20 b5 10	jsr $10b5			jsr 	CommandLet 					; do the default, LET
.1251	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.1254					_CRCheckIndirect:
.1254	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1256	f0 f6		beq $124e			beq 	_CRDefaultLet
.1258	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.125a	f0 f2		beq $124e			beq 	_CRDefaultLet
.125c	d0 2e		bne $128c			bne 	Unimplemented
.125e					CommandShift1:
.125e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1260	10 2a		bpl $128c			bpl 	Unimplemented 				; we have an error as this should not happen.
.1262	0a		asl a				asl 	a 							; double into X
.1263	aa		tax				tax
.1264	c8		iny				iny 								; advance over it.
.1265	20 6b 12	jsr $126b			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1268	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.126b					_RunIt:
.126b	7c 4a 13	jmp ($134a,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.126e					CommandShift2:
.126e	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.1270	10 1a		bpl $128c			bpl 	Unimplemented 				; we have an error as this should not happen.
.1272	0a		asl a				asl 	a 							; double into X
.1273	aa		tax				tax
.1274	c8		iny				iny 								; advance over it.
.1275	20 7b 12	jsr $127b			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1278	4c 28 12	jmp $1228			jmp 	CRNextInstruction
.127b					_RunIt:
.127b	7c 5a 13	jmp ($135a,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.127e					CommandColon:
.127e	60		rts				rts
.127f					ResetCodeAddress:
.127f	ad c8 0a	lda $0ac8			lda 	basePage 					; copy basePage to code Pointer
.1282	85 02		sta $02				sta 	codePtr
.1284	ad c9 0a	lda $0ac9			lda 	basePage+1
.1287	85 03		sta $03				sta 	codePtr+1
.1289	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.128b	60		rts				rts
.128c					Unimplemented:
.128c	a2 01		ldx #$01			ldx 	#ErrorID_Missing
.128e	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1291					TKErr01:
.1291					TKErr02:
.1291					TKErr03:
.1291					TKErr04:
.1291					TKErr05:
.1291					TKErr06:
.1291					TKErr07:
.1291					TKErr08:
.1291	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1293	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler

;******  Processing file: ../source/main/commands/../../generated/tokenvectors0.inc

.1296					Group0Vectors:
>1296	70 13					.word	AdvanceNextLine          ; $80 [[eol]]
>1298	5e 12					.word	CommandShift1            ; $81 [[sh1]]
>129a	6e 12					.word	CommandShift2            ; $82 [[sh2]]
>129c	8c 12					.word	Unimplemented            ; $83 [[sh3]]
>129e	8c 12					.word	Unimplemented            ; $84 [[fpc]]
>12a0	91 12					.word	TKErr08                  ; $85 [[str]]
>12a2	c3 14					.word	AndHandler               ; $86 and
>12a4	b0 14					.word	OrHandler                ; $87 or
>12a6	9d 14					.word	XorHandler               ; $88 xor
>12a8	e5 15					.word	CompareGreaterEq         ; $89 >=
>12aa	ef 15					.word	CompareLessEq            ; $8a <=
>12ac	d1 15					.word	CompareGreater           ; $8b >
>12ae	c7 15					.word	CompareLess              ; $8c <
>12b0	bd 15					.word	CompareEquals            ; $8d =
>12b2	db 15					.word	CompareNotEquals         ; $8e <>
>12b4	2e 14					.word	AddHandler               ; $8f +
>12b6	51 14					.word	SubHandler               ; $90 -
>12b8	e9 14					.word	ShrHandler               ; $91 >>
>12ba	d6 14					.word	ShlHandler               ; $92 <<
>12bc	64 14					.word	MulHandler               ; $93 *
>12be	77 14					.word	DivHandler               ; $94 /
>12c0	8a 14					.word	ModHandler               ; $95 mod
>12c2	22 15					.word	PowerHandler             ; $96 ^
>12c4	fc 14					.word	WordRefHandler           ; $97 !
>12c6	0f 15					.word	ByteRefHandler           ; $98 ?
>12c8	4e 21					.word	Command_Repeat           ; $99 repeat
>12ca	7c 21					.word	Command_While            ; $9a while
>12cc	3f 20					.word	Command_FOR              ; $9b for
>12ce	79 10					.word	CommandIf                ; $9c if
>12d0	5b 21					.word	Command_Until            ; $9d until
>12d2	9f 21					.word	Command_Wend             ; $9e wend
>12d4	a0 20					.word	Command_NEXT             ; $9f next
>12d6	91 12					.word	TKErr06                  ; $a0 then
>12d8	b4 10					.word	Command_ENDIF            ; $a1 endif
>12da	2c 17					.word	UnaryParenthesis         ; $a2 (
>12dc	ff 17					.word	UnaryLen                 ; $a3 len(
>12de	43 18					.word	UnarySgn                 ; $a4 sgn(
>12e0	2c 18					.word	UnaryAbs                 ; $a5 abs(
>12e2	9c 18					.word	Unary_Random             ; $a6 random(
>12e4	e6 18					.word	Unary_Page               ; $a7 page
>12e6	73 1c					.word	MInt32True               ; $a8 true
>12e8	77 1c					.word	MInt32False              ; $a9 false
>12ea	b1 18					.word	Unary_Min                ; $aa min(
>12ec	b5 18					.word	Unary_Max                ; $ab max(
>12ee	8c 12					.word	Unimplemented            ; $ac sys(
>12f0	8c 12					.word	Unimplemented            ; $ad timer(
>12f2	8c 12					.word	Unimplemented            ; $ae event(
>12f4	8c 12					.word	Unimplemented            ; $af get(
>12f6	8c 12					.word	Unimplemented            ; $b0 inkey(
>12f8	33 19					.word	UnaryAlloc               ; $b1 alloc(
>12fa	64 19					.word	ExecChr                  ; $b2 chr$(
>12fc	78 19					.word	ExecLeft                 ; $b3 left$(
>12fe	95 19					.word	ExecMid                  ; $b4 mid$(
>1300	bd 19					.word	ExecRight                ; $b5 right$(
>1302	8c 12					.word	Unimplemented            ; $b6 str$(
>1304	8c 12					.word	Unimplemented            ; $b7 val(
>1306	5a 18					.word	UnaryPeek                ; $b8 peek(
>1308	60 18					.word	UnaryDeek                ; $b9 deek(
>130a	66 18					.word	UnaryLeek                ; $ba leek(
>130c	1d 18					.word	UnaryAsc                 ; $bb asc(
>130e	11 19					.word	UnaryIntToFloat          ; $bc int(
>1310	24 19					.word	UnaryFloatToInt          ; $bd float(
>1312	f4 18					.word	UnaryReference           ; $be @
>1314	0a 19					.word	UnaryComplement          ; $bf ~
>1316	07 19					.word	UnaryHexMarker           ; $c0 &
>1318	91 12					.word	TKErr01                  ; $c1 )
>131a	7e 12					.word	CommandColon             ; $c2 :
>131c	91 12					.word	TKErr02                  ; $c3 ,
>131e	91 12					.word	TKErr03                  ; $c4 ;
>1320	8c 12					.word	Unimplemented            ; $c5 ]
>1322	91 12					.word	TKErr07                  ; $c6 to
>1324	91 12					.word	TKErr05                  ; $c7 step
>1326	91 12					.word	TKErr04                  ; $c8 proc
>1328	8c 12					.word	Unimplemented            ; $c9 endproc
>132a	8c 12					.word	Unimplemented            ; $ca local
>132c	10 12					.word	Command_Rem              ; $cb rem
>132e	b5 10					.word	CommandLet               ; $cc let
>1330	10 12					.word	Command_Rem2             ; $cd '
>1332	8c 12					.word	Unimplemented            ; $ce [
>1334	8c 12					.word	Unimplemented            ; $cf input
>1336	ae 10					.word	Command_ELSE             ; $d0 else
>1338	e1 13					.word	Command_VDU              ; $d1 vdu
>133a	8c 12					.word	Unimplemented            ; $d2 read
>133c	8c 12					.word	Unimplemented            ; $d3 data
>133e	8c 12					.word	Unimplemented            ; $d4 restore
>1340	75 11					.word	Command_Print            ; $d5 print
>1342	af 13					.word	CommandGOTO              ; $d6 goto
>1344	84 13					.word	CommandGOSUB             ; $d7 gosub
>1346	97 13					.word	CommandRETURN            ; $d8 return
>1348	1a 10					.word	Command_Assert           ; $d9 assert
>134a	68 13					.word	CommandStop              ; $da stop
>134c	6d 13					.word	CommandEnd               ; $db end
>134e	8c 12					.word	Unimplemented            ; $dc dim
>1350	38 11					.word	Command_Poke             ; $dd poke
>1352	3c 11					.word	Command_Doke             ; $de doke
>1354	40 11					.word	Command_Loke             ; $df loke

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors1.inc

.1356					Group1Vectors:
>1356	28 10					.word	CommandClear             ; $86 clear
>1358	8c 12					.word	Unimplemented            ; $87 load
>135a	8c 12					.word	Unimplemented            ; $88 save
>135c	8c 12					.word	Unimplemented            ; $89 list
>135e	2a 11					.word	Command_New              ; $8a new
>1360	1d 12					.word	Command_Run              ; $8b run
>1362	8c 12					.word	Unimplemented            ; $8c code
>1364	8c 12					.word	Unimplemented            ; $8d option

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors2.inc

.1366					Group2Vectors:
>1366	8c 12					.word	Unimplemented            ; $86 vpoke

;******  Return to file: ../source/main/commands/run.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/stopend.asm

.1368					CommandStop:
.1368	a2 06		ldx #$06			ldx 	#ErrorID_Stop
.136a	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.136d					CommandEnd:
.136d	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1370					AdvanceNextLine:
.1370	a0 00		ldy #$00			ldy 	#0 							; get offset
.1372	b1 02		lda ($02),y			lda 	(codePtr),y
.1374	18		clc				clc 								; add to codePtr
.1375	65 02		adc $02				adc 	codePtr
.1377	85 02		sta $02				sta 	codePtr
.1379	90 02		bcc $137d			bcc 	_ANLNoCarry
.137b	e6 03		inc $03				inc 	codePtr+1
.137d					_ANLNoCarry:
.137d	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.137f	f0 ec		beq $136d			beq 	CommandEnd 					; execute END
.1381	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1383	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/transfer.asm

.1384					CommandGOSUB:
.1384	20 73 17	jsr $1773			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.1387	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.1389	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.138b	20 12 1d	jsr $1d12			jsr 	RSClaim
.138e	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.1390	20 3e 1d	jsr $1d3e			jsr 	RSSavePosition
.1393	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.1395	f0 1b		beq $13b2			beq 	GotoTOS 					; and do a GOTO there.
.1397					CommandRETURN:
.1397	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.1399	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.139b	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.139d	f0 05		beq $13a4			beq 	_isok
.139f	a2 0e		ldx #$0e			ldx 	#ErrorID_returnErr
.13a1	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.13a4					_isok:
.13a4	a9 01		lda #$01			lda 	#1
.13a6	20 51 1d	jsr $1d51			jsr 	RSLoadPosition 				; reload the position from offset 1.
.13a9	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.13ab	20 34 1d	jsr $1d34			jsr 	RSFree
.13ae	60		rts				rts
.13af					CommandGOTO:
.13af	20 73 17	jsr $1773			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.13b2					GotoTOS:
.13b2	20 7f 12	jsr $127f			jsr 	ResetCodeAddress 			; simple search.
.13b5					_GotoSearch:
.13b5	a0 00		ldy #$00			ldy 	#0 							; get offset
.13b7	b1 02		lda ($02),y			lda 	(codePtr),y
.13b9	f0 21		beq $13dc			beq 	_GotoError 					; not found.
.13bb	c8		iny				iny									; check LSB match
.13bc	b1 02		lda ($02),y			lda 	(codePtr),y
.13be	d5 48		cmp $48,x			cmp 	esInt0,x
.13c0	d0 07		bne $13c9			bne 	_GotoNext
.13c2	c8		iny				iny
.13c3	b1 02		lda ($02),y			lda 	(codePtr),y
.13c5	d5 50		cmp $50,x			cmp 	esInt1,x
.13c7	f0 10		beq $13d9			beq 	_GotoFound
.13c9					_GotoNext:
.13c9	a0 00		ldy #$00			ldy 	#0 							; go next line
.13cb	b1 02		lda ($02),y			lda 	(codePtr),y
.13cd	18		clc				clc
.13ce	65 02		adc $02				adc 	codePtr
.13d0	85 02		sta $02				sta 	codePtr
.13d2	90 e1		bcc $13b5			bcc 	_GotoSearch
.13d4	e6 03		inc $03				inc 	codePtr+1
.13d6	4c b5 13	jmp $13b5			jmp 	_GotoSearch
.13d9					_GotoFound:
.13d9	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.13db	60		rts				rts
.13dc					_GotoError:
.13dc	a2 0c		ldx #$0c			ldx 	#ErrorID_LineNumber
.13de	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/vdu.asm

.13e1					Command_VDU:
.13e1	20 73 17	jsr $1773			jsr 	EvaluateRootInteger 			; get integer at root.
.13e4	a5 48		lda $48				lda 	esInt0
.13e6	a2 02		ldx #$02		ldx	#2
.13e8	20 84 1d	jsr $1d84		jsr	deviceHandler
.13eb					_CVNext:
.13eb	b1 02		lda ($02),y			lda 	(codePtr),y 					; what follows ?
.13ed	c8		iny				iny
.13ee	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 						; comma, do again
.13f0	f0 ef		beq $13e1			beq 	Command_VDU
.13f2	c9 c4		cmp #$c4			cmp 	#TKW_SEMICOLON 					; semicolon, print MSB
.13f4	d0 0a		bne $1400			bne 	_CVExit
.13f6	a5 50		lda $50				lda 	esInt1
.13f8	a2 02		ldx #$02		ldx	#2
.13fa	20 84 1d	jsr $1d84		jsr	deviceHandler
.13fd	4c eb 13	jmp $13eb			jmp 	_CVNext
.1400	88		dey		_CVExit:dey
.1401	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/while.asm

.217c					Command_While:
.217c	a9 57		lda #$57			lda 	#markerWhile 				; gosub marker allocate 4 bytes.
.217e	a2 04		ldx #$04			ldx 	#4
.2180	20 12 1d	jsr $1d12			jsr 	RSClaim 					; create on stack.
.2183	88		dey				dey
.2184	a9 01		lda #$01			lda 	#1
.2186	20 3e 1d	jsr $1d3e			jsr 	RSSavePosition 				; save position before the WHILE keyword.
.2189	c8		iny				iny
.218a	20 75 17	jsr $1775			jsr 	EvaluateInteger				; get the conditional
.218d	20 9e 1c	jsr $1c9e			jsr 	MInt32Zero 	 				; if zero, skip forward.
.2190	f0 01		beq $2193			beq 	_CWFail
.2192	60		rts				rts
.2193					_CWFail:
.2193	a9 04		lda #$04			lda 	#4
.2195	20 34 1d	jsr $1d34			jsr 	RSFree 						; close the just opened position.
.2198	a9 9e		lda #$9e			lda 	#TKW_WEND 					; scan forward past WEND.
.219a	aa		tax				tax
.219b	20 b7 21	jsr $21b7			jsr 	ScanForward
.219e	60		rts				rts
.219f					Command_Wend:
.219f	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.21a1	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.21a3	c9 57		cmp #$57			cmp 	#markerWHILE 						; does it match
.21a5	f0 05		beq $21ac			beq 	_isok
.21a7	a2 11		ldx #$11			ldx 	#ErrorID_wendErr
.21a9	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.21ac					_isok:
.21ac	a9 01		lda #$01			lda 	#1
.21ae	20 51 1d	jsr $1d51			jsr 	RSLoadPosition				; go back until true
.21b1	a9 04		lda #$04			lda 	#4
.21b3	20 34 1d	jsr $1d34			jsr 	RSFree 						; close the loop
.21b6	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/binary.asm

.1402					BinaryProcess:
.1402	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1404	15 41		ora $41,x			ora 	esType+1,x
.1406	0a		asl a				asl 	a
.1407	30 0e		bmi $1417			bmi 	_BPStringType 				; if one is set, then string type.
.1409	18		clc				clc 								; return CC for integer
.140a	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.140c	f0 08		beq $1416			beq 	_BPExit 					; if both integer then return with CC.
.140e	20 1c 14	jsr $141c			jsr 	BPMakeBothFloat 			; make both float
.1411	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1413	95 40		sta $40,x			sta 	esType,x
.1415	38		sec				sec 								; and return with carry set.
.1416					_BPExit:
.1416	60		rts				rts
.1417					_BPStringType:
.1417	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1419	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.141c					BPMakeBothFloat:
.141c	e8		inx				inx
.141d	20 21 14	jsr $1421			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1420	ca		dex				dex
.1421					BPMakeFloat:
.1421	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1423	4a		lsr a				lsr 	a
.1424	b0 07		bcs $142d			bcs 	_BPIsFloat
.1426	8a		txa				txa
.1427	a2 1a		ldx #$1a		ldx	#26
.1429	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.142c	aa		tax				tax
.142d					_BPIsFloat:
.142d	60		rts				rts
.142e					AddHandler:
.142e	20 ff 15	jsr $15ff			jsr 	DereferenceTwo 				; dereference top two on stack.
.1431	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1433	35 41		and $41,x			and 	esType+1,x
.1435	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1437	d0 10		bne $1449			bne 	_AHStringConcat				; concatenate strings.
.1439	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.143c	b0 03		bcs $1441			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.143e	4c 62 1b	jmp $1b62			jmp 	MInt32Add 							; else do it as integer.
.1441					_IsFPOperation:
.1441	8a		txa				txa 								; call the relevant fp routine
.1442	a2 02		ldx #$02		ldx	#2
.1444	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.1447	aa		tax				tax
.1448	60		rts				rts
.1449					_AHStringConcat:
.1449	8a		txa				txa
.144a	a2 02		ldx #$02		ldx	#2
.144c	20 e1 1e	jsr $1ee1		jsr	stringHandler
.144f	aa		tax				tax
.1450	60		rts				rts
.1451					SubHandler:
.1451	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.1454	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.1457	b0 03		bcs $145c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1459	4c 7c 1b	jmp $1b7c			jmp 	MInt32Sub 							; else do it as integer.
.145c					_IsFPOperation:
.145c	8a		txa				txa 								; call the relevant fp routine
.145d	a2 10		ldx #$10		ldx	#16
.145f	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.1462	aa		tax				tax
.1463	60		rts				rts
.1464					MulHandler:
.1464	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.1467	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.146a	b0 03		bcs $146f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.146c	4c 96 1b	jmp $1b96			jmp 	MInt32Multiply 							; else do it as integer.
.146f					_IsFPOperation:
.146f	8a		txa				txa 								; call the relevant fp routine
.1470	a2 0a		ldx #$0a		ldx	#10
.1472	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.1475	aa		tax				tax
.1476	60		rts				rts
.1477					DivHandler:
.1477	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.147a	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.147d	b0 03		bcs $1482			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.147f	4c 70 1a	jmp $1a70			jmp 	MInt32SDivide 							; else do it as integer.
.1482					_IsFPOperation:
.1482	8a		txa				txa 								; call the relevant fp routine
.1483	a2 06		ldx #$06		ldx	#6
.1485	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.1488	aa		tax				tax
.1489	60		rts				rts
.148a					ModHandler:
.148a	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.148d	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.1490	b0 03		bcs $1495			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1492	4c ee 1a	jmp $1aee			jmp 	MInt32Modulus 							; else do it as integer.
.1495					_IsFPOperation:
.1495	8a		txa				txa 								; call the relevant fp routine
.1496	a2 08		ldx #$08		ldx	#8
.1498	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.149b	aa		tax				tax
.149c	60		rts				rts
.149d					XorHandler:
.149d	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.14a0	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.14a3	b0 03		bcs $14a8			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14a5	4c 22 1a	jmp $1a22			jmp 	MInt32Xor 							; else do it as integer.
.14a8					_IsFPOperation:
.14a8	8a		txa				txa 								; call the relevant fp routine
.14a9	a2 08		ldx #$08		ldx	#8
.14ab	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.14ae	aa		tax				tax
.14af	60		rts				rts
.14b0					OrHandler:
.14b0	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.14b3	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.14b6	b0 03		bcs $14bb			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14b8	4c 09 1a	jmp $1a09			jmp 	MInt32Or 							; else do it as integer.
.14bb					_IsFPOperation:
.14bb	8a		txa				txa 								; call the relevant fp routine
.14bc	a2 08		ldx #$08		ldx	#8
.14be	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.14c1	aa		tax				tax
.14c2	60		rts				rts
.14c3					AndHandler:
.14c3	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.14c6	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.14c9	b0 03		bcs $14ce			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14cb	4c f0 19	jmp $19f0			jmp 	MInt32And 							; else do it as integer.
.14ce					_IsFPOperation:
.14ce	8a		txa				txa 								; call the relevant fp routine
.14cf	a2 08		ldx #$08		ldx	#8
.14d1	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.14d4	aa		tax				tax
.14d5	60		rts				rts
.14d6					ShlHandler:
.14d6	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.14d9	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.14dc	b0 03		bcs $14e1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14de	4c 57 15	jmp $1557			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.14e1					_IsFPOperation:
.14e1	8a		txa				txa 								; call the relevant fp routine
.14e2	a2 08		ldx #$08		ldx	#8
.14e4	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.14e7	aa		tax				tax
.14e8	60		rts				rts
.14e9					ShrHandler:
.14e9	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.14ec	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.14ef	b0 03		bcs $14f4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.14f1	4c 5a 15	jmp $155a			jmp 	MInt32ShiftRightX 							; else do it as integer.
.14f4					_IsFPOperation:
.14f4	8a		txa				txa 								; call the relevant fp routine
.14f5	a2 08		ldx #$08		ldx	#8
.14f7	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.14fa	aa		tax				tax
.14fb	60		rts				rts
.14fc					WordRefHandler:
.14fc	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.14ff	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.1502	b0 03		bcs $1507			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1504	4c 49 15	jmp $1549			jmp 	MInt32WordIndirect 							; else do it as integer.
.1507					_IsFPOperation:
.1507	8a		txa				txa 								; call the relevant fp routine
.1508	a2 08		ldx #$08		ldx	#8
.150a	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.150d	aa		tax				tax
.150e	60		rts				rts
.150f					ByteRefHandler:
.150f	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.1512	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.1515	b0 03		bcs $151a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1517	4c 4d 15	jmp $154d			jmp 	MInt32ByteIndirect 							; else do it as integer.
.151a					_IsFPOperation:
.151a	8a		txa				txa 								; call the relevant fp routine
.151b	a2 08		ldx #$08		ldx	#8
.151d	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.1520	aa		tax				tax
.1521	60		rts				rts
.1522					PowerHandler:
.1522	20 ff 15	jsr $15ff			jsr 	DereferenceTwo
.1525	20 02 14	jsr $1402			jsr 	BinaryProcess 				; check to see if either is float
.1528	b0 03		bcs $152d			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.152a	4c 35 15	jmp $1535			jmp 	PowerInteger 							; else do it as integer.
.152d					_IsFPOperation:
.152d	8a		txa				txa 								; call the relevant fp routine
.152e	a2 16		ldx #$16		ldx	#22
.1530	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.1533	aa		tax				tax
.1534	60		rts				rts
.1535					PowerInteger:
.1535	20 1c 14	jsr $141c			jsr 	BPMakeBothFloat				; make them float.
.1538	8a		txa				txa
.1539	a2 16		ldx #$16		ldx	#22
.153b	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.153e	a2 12		ldx #$12		ldx	#18
.1540	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.1543	aa		tax				tax
.1544	a9 00		lda #$00			lda 	#0 							; make type integer
.1546	95 40		sta $40,x			sta 	esType,x
.1548	60		rts				rts
.1549					Mint32WordIndirect:
.1549	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.154b	d0 02		bne $154f			bne 	Min32Indirect
.154d					Mint32ByteIndirect:
.154d	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.154f					Min32Indirect:
.154f	48		pha				pha 								; save the indirection
.1550	20 62 1b	jsr $1b62			jsr 	MInt32Add 					; add a!b a?b
.1553	68		pla				pla 								; and set the type to reference.
.1554	95 40		sta $40,x			sta 	esType,x
.1556	60		rts				rts
.1557					Mint32ShiftLeftX:
.1557	18		clc				clc
.1558	90 01		bcc $155b			bcc 	Mint32Shift
.155a					Mint32ShiftRightX:
.155a	38		sec				sec
.155b					Mint32Shift:
.155b	08		php				php 								; save carry flag on stack.
.155c	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.155e	15 59		ora $59,x			ora 	esInt2+1,x
.1560	15 61		ora $61,x			ora 	esInt3+1,x
.1562	d0 1e		bne $1582			bne 	_MShiftZero
.1564	b5 49		lda $49,x			lda 	esInt0+1,x
.1566	c9 20		cmp #$20			cmp 	#32
.1568	b0 18		bcs $1582			bcs 	_MShiftZero
.156a					_MShiftLoop:
.156a	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.156c	f0 12		beq $1580			beq 	_MShiftExit
.156e	d6 49		dec $49,x			dec 	esInt0+1,x
.1570	28		plp				plp 								; restore and save carry
.1571	08		php				php
.1572	90 06		bcc $157a			bcc 	_MShiftLeft
.1574	20 95 1c	jsr $1c95			jsr 	Mint32ShiftRight
.1577	4c 6a 15	jmp $156a			jmp 	_MShiftLoop
.157a					_MShiftLeft:
.157a	20 8c 1c	jsr $1c8c			jsr 	Mint32ShiftLeft
.157d	4c 6a 15	jmp $156a			jmp 	_MShiftLoop
.1580					_MShiftExit:
.1580	28		plp				plp	 								; throw saved carry and exit
.1581	60		rts				rts
.1582					_MShiftZero:
.1582	4c 77 1c	jmp $1c77			jmp 	MInt32False 				; return 0.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/compare.asm

.1585					PerformComparison:
.1585	20 ff 15	jsr $15ff			jsr 	DereferenceTwo 				; make both values.
.1588	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.158a	35 41		and $41,x			and 	esType+1,x
.158c	0a		asl a				asl 	a
.158d	30 1d		bmi $15ac			bmi 	_PCIsString
.158f	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.1591	15 41		ora $41,x			ora 	esType+1,x
.1593	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.1594	30 22		bmi $15b8			bmi 	_PCError
.1596	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1598	f0 0f		beq $15a9			beq 	_PCIsInteger 				; if not two integers
.159a	20 1c 14	jsr $141c			jsr 	BPMakeBothFloat 			; make both float
.159d	8a		txa				txa
.159e	a2 04		ldx #$04		ldx	#4
.15a0	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.15a3	86 0a		stx $0a				stx 	tempShort 					; save result
.15a5	aa		tax				tax
.15a6	a5 0a		lda $0a				lda 	tempShort
.15a8	60		rts				rts
.15a9					_PCIsInteger:
.15a9	4c 3b 1a	jmp $1a3b			jmp 	MInt32Compare
.15ac					_PCIsString:
.15ac	8a		txa				txa 								; A has SP
.15ad	a2 04		ldx #$04		ldx	#4
.15af	20 e1 1e	jsr $1ee1		jsr	stringHandler
.15b2	86 0a		stx $0a				stx 	tempShort 					; save result
.15b4	aa		tax				tax 								; put SP back in X and get result.
.15b5	a5 0a		lda $0a				lda 	tempShort
.15b7	60		rts				rts
.15b8					_PCError:
.15b8	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.15ba	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.15bd					CompareEquals:
.15bd	20 85 15	jsr $1585			jsr 	PerformComparison
.15c0	c9 00		cmp #$00			cmp 	#$00
.15c2	f0 35		beq $15f9			beq  	CompareTrue
.15c4	4c fc 15	jmp $15fc			jmp 	CompareFalse
.15c7					CompareLess:
.15c7	20 85 15	jsr $1585			jsr 	PerformComparison
.15ca	c9 ff		cmp #$ff			cmp 	#$FF
.15cc	f0 2b		beq $15f9			beq  	CompareTrue
.15ce	4c fc 15	jmp $15fc			jmp 	CompareFalse
.15d1					CompareGreater:
.15d1	20 85 15	jsr $1585			jsr 	PerformComparison
.15d4	c9 01		cmp #$01			cmp 	#$01
.15d6	f0 21		beq $15f9			beq  	CompareTrue
.15d8	4c fc 15	jmp $15fc			jmp 	CompareFalse
.15db					CompareNotEquals:
.15db	20 85 15	jsr $1585			jsr 	PerformComparison
.15de	c9 00		cmp #$00			cmp 	#$00
.15e0	d0 17		bne $15f9			bne  	CompareTrue
.15e2	4c fc 15	jmp $15fc			jmp 	CompareFalse
.15e5					CompareGreaterEq:
.15e5	20 85 15	jsr $1585			jsr 	PerformComparison
.15e8	c9 ff		cmp #$ff			cmp 	#$FF
.15ea	d0 0d		bne $15f9			bne  	CompareTrue
.15ec	4c fc 15	jmp $15fc			jmp 	CompareFalse
.15ef					CompareLessEq:
.15ef	20 85 15	jsr $1585			jsr 	PerformComparison
.15f2	c9 01		cmp #$01			cmp 	#$01
.15f4	d0 03		bne $15f9			bne  	CompareTrue
.15f6	4c fc 15	jmp $15fc			jmp 	CompareFalse
.15f9					CompareTrue:
.15f9	4c 73 1c	jmp $1c73			jmp 	MInt32True
.15fc					CompareFalse:
.15fc	4c 77 1c	jmp $1c77			jmp 	MInt32False

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/dereference.asm

.15ff					DereferenceTwo:
.15ff	e8		inx				inx
.1600	20 04 16	jsr $1604			jsr 	DereferenceOne
.1603	ca		dex				dex
.1604					DereferenceOne:
.1604	b5 40		lda $40,x			lda 	esType,x
.1606	10 3d		bpl $1645			bpl 	_DRNotReference 			; is it a reference ?
.1608	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1609	b0 3b		bcs $1646			bcs 	_DRFloatDeReference
.160b	98		tya				tya
.160c	48		pha				pha
.160d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.160f	85 04		sta $04				sta 	temp0
.1611	b5 50		lda $50,x			lda 	esInt1,x
.1613	85 05		sta $05				sta 	temp0+1
.1615	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1617	95 50		sta $50,x			sta 	esInt1,x
.1619	95 58		sta $58,x			sta 	esInt2,x
.161b	95 60		sta $60,x			sta 	esInt3,x
.161d	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.161f	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1621	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1622	30 0d		bmi $1631			bmi 	_DeRefString 				; string, 2 bytes only
.1624	d0 11		bne $1637			bne 	_DeRefByte 					; byte 1 byte only
.1626					_DeRefLong:
.1626	a0 03		ldy #$03			ldy 	#3
.1628	b1 04		lda ($04),y			lda 	(temp0),y
.162a	95 60		sta $60,x			sta 	esInt3,x
.162c	88		dey				dey
.162d	b1 04		lda ($04),y			lda 	(temp0),y
.162f	95 58		sta $58,x			sta 	esInt2,x
.1631					_DeRefString:
.1631	a0 01		ldy #$01			ldy 	#1
.1633	b1 04		lda ($04),y			lda 	(temp0),y
.1635	95 50		sta $50,x			sta 	esInt1,x
.1637					_DeRefByte:
.1637	a0 00		ldy #$00			ldy 	#0
.1639	b1 04		lda ($04),y			lda 	(temp0),y
.163b	95 48		sta $48,x			sta 	esInt0,x
.163d	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.163f	29 40		and #$40			and 	#$40
.1641	95 40		sta $40,x			sta 	esType,x
.1643	68		pla				pla
.1644	a8		tay				tay
.1645					_DRNotReference
.1645	60		rts				rts
.1646					_DRFloatDereference:
.1646	8a		txa				txa
.1647							floatingpoint_deref
.1647	aa		tax				tax
.1648	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.164a	95 40		sta $40,x			sta 	esType,x
.164c	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/evaluate.asm

.164d					EvaluateLevel:
.164d	48		pha				pha 								; save precedence level.
.164e	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1650	95 48		sta $48,x			sta 	esInt0,x
.1652	95 50		sta $50,x			sta 	esInt1,x
.1654	95 58		sta $58,x			sta 	esInt2,x
.1656	95 60		sta $60,x			sta 	esInt3,x
.1658	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.165a	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.165c	30 21		bmi $167f			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.165e	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.165f	30 0a		bmi $166b			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1661	8a		txa				txa 								; stack level in X
.1662	a2 00		ldx #$00		ldx	#0
.1664	20 38 20	jsr $2038		jsr	variableHandler
.1667	aa		tax				tax
.1668	4c a8 16	jmp $16a8			jmp		_ELHasTerm
.166b					_ELIsConstant:
.166b	4a		lsr a				lsr 	a 							; get the value back
.166c	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.166e	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1670					_ELCheckNext:
.1670	c8		iny				iny 								; look at next
.1671	b1 02		lda ($02),y			lda 	(codePtr),y
.1673	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1675	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1677	b0 2f		bcs $16a8			bcs 	_ELHasTerm 					; done getting the constant.
.1679	20 b5 17	jsr $17b5			jsr 	ELShiftByteIn 				; shift byte into position.
.167c	4c 70 16	jmp $1670			jmp 	_ELCheckNext
.167f					_ELIsToken:
.167f	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1681	f0 0f		beq $1692			beq 	_ELIsString
.1683	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1685	d0 5f		bne $16e6			bne 	_ELCheckUnary
.1687	8a		txa				txa 								; put X into A
.1688	c8		iny				iny 								; skip over the float marker
.1689	a2 18		ldx #$18		ldx	#24
.168b	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.168e	aa		tax				tax 								; restore X
.168f	4c a8 16	jmp $16a8			jmp 	_ELHasTerm
.1692					_ELIsString:
.1692	98		tya				tya 								; address of string is codePtr+y+1
.1693	38		sec				sec
.1694	65 02		adc $02				adc 	codePtr
.1696	95 48		sta $48,x			sta 	esInt0,x
.1698	a5 03		lda $03				lda 	codePtr+1
.169a	69 00		adc #$00			adc 	#0
.169c	95 50		sta $50,x			sta 	esInt1,x
.169e	a9 40		lda #$40			lda 	#$40 						; set type to string value
.16a0	95 40		sta $40,x			sta 	esType,x
.16a2	c8		iny				iny 								; skip over string.
.16a3	98		tya				tya
.16a4	38		sec				sec									; +1 for the length itself.
.16a5	71 02		adc ($02),y			adc 	(codePtr),y
.16a7	a8		tay				tay 								; and fall through to term loop code.
.16a8					_ELHasTerm:
.16a8	b1 02		lda ($02),y			lda 	(codePtr),y
.16aa	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.16ac	90 04		bcc $16b2			bcc 	_ELPopExit
.16ae	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.16b0	90 02		bcc $16b4			bcc 	_ELHasBinaryTerm
.16b2					_ELPopExit:
.16b2	68		pla				pla
.16b3					_ELExit:
.16b3	60		rts				rts
.16b4					_ELHasBinaryTerm:
.16b4	84 0a		sty $0a				sty 	tempShort 					; save position
.16b6	a8		tay				tay 								; use token as an index and get the precedence.
.16b7	b9 5d 17	lda $175d,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.16ba	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.16bc	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.16be	68		pla				pla 								; restore current level.
.16bf	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.16c1	b0 f0		bcs $16b3			bcs 	_ELExit
.16c3	48		pha				pha 								; save current level back on the stack.
.16c4	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.16c6	48		pha				pha
.16c7	c8		iny				iny
.16c8	e8		inx				inx 								; calculate the RHS at the operator precedence.
.16c9	a5 0a		lda $0a				lda 	tempShort
.16cb	20 4d 16	jsr $164d			jsr 	EvaluateLevel
.16ce	ca		dex				dex
.16cf	68		pla				pla 								; get the operator back out.
.16d0					_ELExecuteA:
.16d0	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.16d2	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.16d3	aa		tax				tax
.16d4	bd 96 12	lda $1296,x			lda 	Group0Vectors,x
.16d7	85 04		sta $04				sta 	temp0
.16d9	bd 97 12	lda $1297,x			lda 	Group0Vectors+1,x
.16dc	85 05		sta $05				sta 	temp0+1
.16de	a6 0a		ldx $0a				ldx 	tempShort
.16e0	20 29 17	jsr $1729			jsr 	_ELCallTemp0
.16e3	4c a8 16	jmp $16a8			jmp 	_ELHasTerm 					; and loop back round.
.16e6					_ELCheckUnary:
.16e6	c8		iny				iny 								; skip over token.
.16e7	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.16e9	f0 15		beq $1700			beq 	_ELMinus
.16eb	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.16ed	f0 28		beq $1717			beq 	_ELIndirect
.16ef	c9 98		cmp #$98			cmp 	#TKW_QMARK
.16f1	f0 24		beq $1717			beq 	_ELIndirect
.16f3	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.16f5	90 04		bcc $16fb			bcc 	_ELUSyntax
.16f7	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.16f9	90 d5		bcc $16d0			bcc 	_ELExecuteA 				; if so do that token.
.16fb					_ELUSyntax:
.16fb	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.16fd	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1700					_ELMinus:
.1700	20 3e 17	jsr $173e			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1703	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.1705	f0 0a		beq $1711			beq 	_ELMinusInteger
.1707	8a		txa				txa
.1708	a2 0c		ldx #$0c		ldx	#12
.170a	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.170d	aa		tax				tax
.170e	4c a8 16	jmp $16a8			jmp 	_ELHasTerm
.1711					_ELMinusInteger:
.1711	20 31 1c	jsr $1c31			jsr 	MInt32Negate 				; do int negate
.1714	4c a8 16	jmp $16a8			jmp 	_ELHasTerm
.1717					_ELIndirect:
.1717	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.1718	20 47 17	jsr $1747			jsr 	EvaluateIntegerTerm 		; integer address
.171b	68		pla				pla
.171c	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.171e	f0 02		beq $1722			beq 	_ELHaveModifier
.1720	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1722					_ELHaveModifier:
.1722	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1724	95 40		sta $40,x			sta 	esType,x
.1726	4c a8 16	jmp $16a8			jmp 	_ELHasTerm
.1729					_ELCallTemp0:
.1729	6c 04 00	jmp ($0004)			jmp 	(temp0)
.172c					UnaryParenthesis:
.172c	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.172e	20 4d 16	jsr $164d			jsr 	EvaluateLevel
.1731	20 ea 1c	jsr $1cea			jsr 	CheckRightParen 			; check for )
.1734	60		rts				rts
.1735					EvaluateTerm:
.1735	a9 0f		lda #$0f			lda 	#15
.1737	20 4d 16	jsr $164d			jsr 	EvaluateLevel
.173a	20 04 16	jsr $1604			jsr 	DereferenceOne
.173d	60		rts				rts
.173e					EvaluateNumericTerm:
.173e	20 35 17	jsr $1735			jsr 	EvaluateTerm
.1741	b5 40		lda $40,x			lda 	esType,x
.1743	0a		asl a				asl 	a 							; see if it's a string.
.1744	30 09		bmi $174f			bmi 	ENTType
.1746	60		rts				rts
.1747					EvaluateIntegerTerm:
.1747	20 35 17	jsr $1735			jsr 	EvaluateTerm
.174a	b5 40		lda $40,x			lda 	esType,x
.174c	d0 01		bne $174f			bne 	ENTType
.174e	60		rts				rts
.174f					ENTType:
.174f	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1751	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1754					EvaluateRoot:
.1754	a2 00		ldx #$00			ldx 	#0
.1756					Evaluate:
.1756	a9 00		lda #$00			lda 	#0
.1758	20 4d 16	jsr $164d			jsr 	EvaluateLevel
.175b	20 04 16	jsr $1604			jsr 	DereferenceOne
.175e	60		rts				rts
.175f					EvaluateNumeric:
.175f	20 56 17	jsr $1756			jsr 	Evaluate
.1762	b5 40		lda $40,x			lda 	esType,x
.1764	0a		asl a				asl 	a 							; see if it's a string.
.1765	30 e8		bmi $174f			bmi 	ENTType
.1767	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1768	4a		lsr a				lsr 	a
.1769	60		rts				rts
.176a					EvaluateString:
.176a	20 56 17	jsr $1756			jsr 	Evaluate
.176d	b5 40		lda $40,x			lda 	esType,x
.176f	0a		asl a				asl 	a 							; see if it's a string.
.1770	10 dd		bpl $174f			bpl 	ENTType
.1772	60		rts				rts
.1773					EvaluateRootInteger:
.1773	a2 00		ldx #$00			ldx 	#0
.1775					EvaluateInteger:
.1775	20 56 17	jsr $1756			jsr 	Evaluate
.1778	b5 40		lda $40,x			lda 	esType,x
.177a	d0 d3		bne $174f			bne 	ENTType
.177c	60		rts				rts
.177d					EvaluateSmallInteger:
.177d	20 75 17	jsr $1775			jsr 	EvaluateInteger
.1780	b5 50		lda $50,x			lda 	esInt1,x
.1782	15 58		ora $58,x			ora 	esInt2,x
.1784	15 60		ora $60,x			ora 	esInt3,x
.1786	d0 03		bne $178b			bne 	_ESIValue
.1788	b5 48		lda $48,x			lda 	esInt0,x
.178a	60		rts				rts
.178b					_ESIValue:
.178b	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.178d	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1790					LinkEvaluate:
.1790	aa		tax				tax
.1791	20 56 17	jsr $1756			jsr 	Evaluate
.1794	8a		txa				txa
.1795	60		rts				rts
.1796					LinkEvaluateInteger:
.1796	aa		tax				tax
.1797	20 75 17	jsr $1775			jsr 	EvaluateInteger
.179a	8a		txa				txa
.179b	60		rts				rts
.179c					LinkEvaluateSmallInt:
.179c	aa		tax				tax
.179d	20 7d 17	jsr $177d			jsr 	EvaluateSmallInteger
.17a0	8a		txa				txa
.17a1	60		rts				rts
.17a2					EvaluateReference:
.17a2	ad f4 17	lda $17f4			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.17a5	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.17a6	e9 01		sbc #$01			sbc 	#1
.17a8	20 4d 16	jsr $164d			jsr 	EvaluateLevel
.17ab	b5 40		lda $40,x			lda 	esType,x
.17ad	10 01		bpl $17b0			bpl 	_ERFail
.17af	60		rts				rts
.17b0					_ERFail:
.17b0	a2 0b		ldx #$0b			ldx 	#ErrorID_NoReference
.17b2	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.17b5					ELShiftByteIn:
.17b5	48		pha				pha 								; save bits to shift in.
.17b6	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.17b8	48		pha				pha
.17b9	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.17bb	95 60		sta $60,x			sta 	esInt3,x
.17bd	b5 50		lda $50,x			lda 	esInt1,x
.17bf	95 58		sta $58,x			sta 	esInt2,x
.17c1	b5 48		lda $48,x			lda 	esInt0,x
.17c3	95 50		sta $50,x			sta 	esInt1,x
.17c5	a9 00		lda #$00			lda 	#0
.17c7	95 48		sta $48,x			sta 	esInt0,x
.17c9	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.17ca	29 03		and #$03			and 	#3 							; only want lower 2 bits
.17cc	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.17ce					_ELShiftLoop:
.17ce	4a		lsr a				lsr 	a
.17cf	76 60		ror $60,x			ror 	esInt3,x
.17d1	76 58		ror $58,x			ror 	esInt2,x
.17d3	76 50		ror $50,x			ror 	esInt1,x
.17d5	76 48		ror $48,x			ror 	esInt0,x
.17d7	c9 01		cmp #$01			cmp 	#1
.17d9	d0 f3		bne $17ce			bne 	_ELShiftLoop
.17db	68		pla				pla 								; get original 6 bit value and OR in.
.17dc	29 3f		and #$3f			and 	#$3F
.17de	15 48		ora $48,x			ora 	esInt0,x
.17e0	95 48		sta $48,x			sta 	esInt0,x
.17e2	60		rts				rts
.17e3					ELBinaryOperatorInfo:

;******  Processing file: ../source/main/evaluate/../../generated/binarystructinfo.inc

>17e3	01					.byte	$01			; $86 and
>17e4	01					.byte	$01			; $87 or
>17e5	01					.byte	$01			; $88 xor
>17e6	02					.byte	$02			; $89 >=
>17e7	02					.byte	$02			; $8a <=
>17e8	02					.byte	$02			; $8b >
>17e9	02					.byte	$02			; $8c <
>17ea	02					.byte	$02			; $8d =
>17eb	02					.byte	$02			; $8e <>
>17ec	03					.byte	$03			; $8f +
>17ed	03					.byte	$03			; $90 -
>17ee	04					.byte	$04			; $91 >>
>17ef	04					.byte	$04			; $92 <<
>17f0	04					.byte	$04			; $93 *
>17f1	04					.byte	$04			; $94 /
>17f2	04					.byte	$04			; $95 mod
>17f3	05					.byte	$05			; $96 ^
>17f4	06					.byte	$06			; $97 !
>17f5	06					.byte	$06			; $98 ?
>17f6	82					.byte	$82			; $99 repeat
>17f7	82					.byte	$82			; $9a while
>17f8	82					.byte	$82			; $9b for
>17f9	82					.byte	$82			; $9c if
>17fa	80					.byte	$80			; $9d until
>17fb	80					.byte	$80			; $9e wend
>17fc	80					.byte	$80			; $9f next
>17fd	80					.byte	$80			; $a0 then
>17fe	80					.byte	$80			; $a1 endif

;******  Return to file: ../source/main/evaluate/evaluate.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unary.asm

.17ff					UnaryLen:
.17ff	20 0d 18	jsr $180d			jsr 	ULStart
.1802					ULFinish:
.1802	b1 04		lda ($04),y			lda 	(temp0),y
.1804	a4 0a		ldy $0a				ldy 	tempShort
.1806	20 86 1c	jsr $1c86			jsr 	MInt32Set8Bit
.1809	20 ea 1c	jsr $1cea			jsr 	CheckRightParen
.180c	60		rts				rts
.180d	20 6a 17	jsr $176a	ULStart:jsr 	EvaluateString
.1810	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1812	85 04		sta $04				sta 	temp0
.1814	b5 50		lda $50,x			lda 	esInt1,x
.1816	85 05		sta $05				sta 	temp0+1
.1818	84 0a		sty $0a				sty 	tempShort 					; get length
.181a	a0 00		ldy #$00			ldy 	#0
.181c	60		rts				rts
.181d					UnaryAsc:
.181d	20 0d 18	jsr $180d			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1820	b1 04		lda ($04),y			lda 	(temp0),y
.1822	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1823	c9 00		cmp #$00			cmp 	#0
.1825	d0 db		bne $1802			bne 	ULFinish
.1827	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1829	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.182c					UnaryAbs:
.182c	20 5f 17	jsr $175f			jsr 	EvaluateNumeric
.182f	b0 07		bcs $1838			bcs 	_UAFloat
.1831	20 2c 1c	jsr $1c2c			jsr 	MInt32Absolute
.1834	20 ea 1c	jsr $1cea			jsr 	CheckRightParen
.1837	60		rts				rts
.1838					_UAFloat:
.1838	8a		txa				txa
.1839	a2 00		ldx #$00		ldx	#0
.183b	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.183e	aa		tax				tax
.183f	20 ea 1c	jsr $1cea			jsr 	CheckRightParen
.1842	60		rts				rts
.1843					UnarySgn:
.1843	20 5f 17	jsr $175f			jsr 	EvaluateNumeric
.1846	b0 07		bcs $184f			bcs 	_USFloat
.1848	20 64 1c	jsr $1c64			jsr 	MInt32Sign
.184b	20 ea 1c	jsr $1cea			jsr 	CheckRightParen
.184e	60		rts				rts
.184f					_USFloat:
.184f	8a		txa				txa
.1850	a2 0e		ldx #$0e		ldx	#14
.1852	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.1855	aa		tax				tax
.1856	20 ea 1c	jsr $1cea			jsr 	CheckRightParen
.1859	60		rts				rts
.185a					UnaryPeek:
.185a	20 86 18	jsr $1886			jsr 	PDLCode
.185d	4c 7a 18	jmp $187a			jmp 	PDLByte0
.1860					UnaryDeek:
.1860	20 86 18	jsr $1886			jsr 	PDLCode
.1863	4c 74 18	jmp $1874			jmp 	PDLByte1
.1866					UnaryLeek:
.1866	20 86 18	jsr $1886			jsr 	PDLCode
.1869	a0 03		ldy #$03			ldy 	#3
.186b	b1 04		lda ($04),y			lda 	(temp0),y
.186d	95 60		sta $60,x			sta 	esInt3,x
.186f	88		dey				dey
.1870	b1 04		lda ($04),y			lda 	(temp0),y
.1872	95 58		sta $58,x			sta 	esInt2,x
.1874					PDLByte1:
.1874	a0 01		ldy #$01			ldy 	#1
.1876	b1 04		lda ($04),y			lda 	(temp0),y
.1878	95 50		sta $50,x			sta 	esInt1,x
.187a					PDLByte0:
.187a	a0 00		ldy #$00			ldy 	#0
.187c	b1 04		lda ($04),y			lda 	(temp0),y
.187e	95 48		sta $48,x			sta 	esInt0,x
.1880	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1882	20 ea 1c	jsr $1cea			jsr 	CheckRightParen 			; check right and return
.1885	60		rts				rts
.1886					PDLCode:
.1886	20 75 17	jsr $1775			jsr 	EvaluateInteger
.1889	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.188b	85 04		sta $04				sta 	temp0
.188d	b5 50		lda $50,x			lda 	esInt1,x
.188f	85 05		sta $05				sta 	temp0+1
.1891	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1893	95 50		sta $50,x			sta 	esInt1,x
.1895	95 58		sta $58,x			sta 	esInt2,x
.1897	95 60		sta $60,x			sta 	esInt3,x
.1899	84 0a		sty $0a				sty 	tempShort 					; save Y
.189b	60		rts				rts
.189c					Unary_Random:
.189c	20 a7 1c	jsr $1ca7			jsr 	MInt32Random 				; generate random number.
.189f	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.18a1	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.18a3	f0 08		beq $18ad			beq 	_URExit
.18a5	e8		inx				inx 								; load range 0..r-1 into +1
.18a6	20 75 17	jsr $1775			jsr 	EvaluateInteger
.18a9	ca		dex				dex
.18aa	20 ee 1a	jsr $1aee			jsr 	MInt32Modulus 				; calculate random % modulus
.18ad					_URExit:
.18ad	20 ea 1c	jsr $1cea			jsr 	CheckRightParen 			; check right and return
.18b0	60		rts				rts
.18b1					Unary_Min:
.18b1	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.18b3	d0 02		bne $18b7			bne 	UnaryMBody
.18b5					Unary_Max:
.18b5	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.18b7					UnaryMBody:
.18b7	48		pha				pha 								; save comparator on stack.
.18b8	20 56 17	jsr $1756			jsr 	Evaluate 					; get the first thing to check
.18bb					_UnaryMLoop:
.18bb	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.18bd	c8		iny				iny
.18be	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.18c0	f0 09		beq $18cb			beq 	_UnaryMExit
.18c2	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.18c4	f0 07		beq $18cd			beq 	_UnaryMCompare
.18c6	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.18c8	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.18cb					_UnaryMExit:
.18cb	68		pla				pla 								; throw comparator and return.
.18cc	60		rts				rts
.18cd					_UnaryMCompare:
.18cd	e8		inx				inx 								; get the 2nd thing to evaluate
.18ce	20 56 17	jsr $1756			jsr 	Evaluate
.18d1	ca		dex				dex
.18d2	20 85 15	jsr $1585			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.18d5	85 0a		sta $0a				sta 	tempShort 					; save result
.18d7	68		pla				pla 								; get what we need
.18d8	48		pha				pha
.18d9	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.18db	d0 de		bne $18bb			bne 	_UnaryMLoop 				; no, try another value.
.18dd	20 77 1c	jsr $1c77			jsr 	MInt32False 				; promote 2nd to 1st.
.18e0	20 62 1b	jsr $1b62			jsr 	MInt32Add
.18e3	4c bb 18	jmp $18bb			jmp 	_UnaryMLoop
.18e6					Unary_Page:
.18e6	20 77 1c	jsr $1c77			jsr 	MInt32False 				; zero
.18e9	ad c8 0a	lda $0ac8			lda 	basePage 					; copy base page address in.
.18ec	95 48		sta $48,x			sta 	esInt0,x
.18ee	ad c9 0a	lda $0ac9			lda 	basePage+1
.18f1	95 50		sta $50,x			sta 	esInt1,x
.18f3	60		rts				rts
.18f4					UnaryReference:
.18f4	a9 0f		lda #$0f			lda 	#15
.18f6	20 4d 16	jsr $164d			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.18f9	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.18fb	10 05		bpl $1902			bpl 	UType
.18fd	a9 00		lda #$00			lda 	#0 							; make it an integer
.18ff	95 40		sta $40,x			sta 	esType,x
.1901	60		rts				rts
.1902					UType:
.1902	a2 07		ldx #$07			ldx 	#ErrorID_BadType
.1904	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1907					UnaryHexMarker:
.1907	4c 47 17	jmp $1747			jmp 	EvaluateIntegerTerm
.190a					UnaryComplement:
.190a	20 47 17	jsr $1747			jsr 	EvaluateIntegerTerm
.190d	20 4b 1c	jsr $1c4b			jsr 	MInt32Not
.1910	60		rts				rts
.1911					UnaryIntToFloat:
.1911	20 5f 17	jsr $175f			jsr 	EvaluateNumeric
.1914	b5 40		lda $40,x			lda 	esType,x
.1916	d0 0b		bne $1923			bne 	_UIFExit
.1918	8a		txa				txa
.1919	a2 1a		ldx #$1a		ldx	#26
.191b	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.191e	aa		tax				tax
.191f	a9 01		lda #$01			lda 	#1
.1921	95 40		sta $40,x			sta 	esType,x
.1923					_UIFExit:
.1923	60		rts				rts
.1924					UnaryFloatToInt:
.1924	20 5f 17	jsr $175f			jsr 	EvaluateNumeric
.1927	b5 40		lda $40,x			lda 	esType,x
.1929	f0 07		beq $1932			beq 	_UFIExit
.192b	8a		txa				txa
.192c	a2 12		ldx #$12		ldx	#18
.192e	20 94 1d	jsr $1d94		jsr	floatingpointHandler
.1931	aa		tax				tax
.1932					_UFIExit:
.1932	60		rts				rts
.1933					UnaryAlloc:
.1933	e8		inx				inx 								; evaluate memory required
.1934	20 75 17	jsr $1775			jsr 	EvaluateInteger
.1937	20 ea 1c	jsr $1cea			jsr 	CheckRightParen
.193a	ca		dex				dex
.193b	b5 59		lda $59,x			lda 	esInt2+1,x 					; check at least in 64k range.
.193d	15 61		ora $61,x			ora 	esInt3+1,x
.193f	d0 1e		bne $195f			bne 	_UABadValue
.1941	20 77 1c	jsr $1c77			jsr 	MInt32False					; zero return.
.1944	ad cf 0a	lda $0acf			lda 	lowMemory+1 				; copy low memory in
.1947	95 50		sta $50,x			sta 	esInt1,x
.1949	ad ce 0a	lda $0ace			lda 	lowMemory
.194c	95 48		sta $48,x			sta 	esInt0,x
.194e	18		clc				clc 								; add alloc required.
.194f	75 49		adc $49,x			adc 	esInt0+1,x
.1951	8d ce 0a	sta $0ace			sta 	lowMemory
.1954	ad cf 0a	lda $0acf			lda 	lowMemory+1
.1957	75 51		adc $51,x			adc 	esInt1+1,x
.1959	8d cf 0a	sta $0acf			sta 	lowMemory+1
.195c	b0 01		bcs $195f			bcs		_UABadValue 				; overflow definitely bad.
.195e	60		rts				rts
.195f					_UABadValue:
.195f	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.1961	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unarystr.asm

.1964					ExecChr:
.1964	20 7d 17	jsr $177d			jsr 	EvaluateSmallInteger		; character number
.1967	20 ea 1c	jsr $1cea			jsr 	CheckRightParen				; right bracket
.196a	98		tya				tya
.196b	48		pha				pha
.196c	8a		txa				txa 								; A = stack
.196d	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.196f	a2 00		ldx #$00		ldx	#0
.1971	20 e1 1e	jsr $1ee1		jsr	stringHandler
.1974	aa		tax				tax 								; X = stack
.1975	68		pla				pla
.1976	a8		tay				tay
.1977	60		rts				rts
.1978					ExecLeft:
.1978	20 6a 17	jsr $176a			jsr 	EvaluateString 				; string to stack,X
.197b	20 f7 1c	jsr $1cf7			jsr 	CheckComma
.197e	e8		inx				inx
.197f	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1981	20 86 1c	jsr $1c86			jsr 	MInt32Set8Bit
.1984	e8		inx				inx
.1985	20 7d 17	jsr $177d			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.1988					ExecSubstring:
.1988	ca		dex				dex 								; fix up X
.1989	ca		dex				dex
.198a	20 ea 1c	jsr $1cea			jsr 	CheckRightParen 			; check closing right bracket.
.198d	8a		txa				txa 								; do the substring and exit.
.198e	a2 06		ldx #$06		ldx	#6
.1990	20 e1 1e	jsr $1ee1		jsr	stringHandler
.1993	aa		tax				tax
.1994	60		rts				rts
.1995					ExecMid:
.1995	20 6a 17	jsr $176a			jsr 	EvaluateString 				; string to stack,X
.1998	20 f7 1c	jsr $1cf7			jsr 	CheckComma
.199b	e8		inx				inx
.199c	20 7d 17	jsr $177d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.199f	c9 00		cmp #$00			cmp 	#0
.19a1	f0 15		beq $19b8			beq 	_EMValue
.19a3	e8		inx				inx
.19a4	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.19a6	20 86 1c	jsr $1c86			jsr 	MInt32Set8Bit
.19a9	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.19ab	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.19ad	f0 d9		beq $1988			beq 	ExecSubString
.19af	20 f7 1c	jsr $1cf7			jsr 	CheckComma
.19b2	20 7d 17	jsr $177d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.19b5	4c 88 19	jmp $1988			jmp 	ExecSubString
.19b8					_EMValue:
.19b8	a2 08		ldx #$08			ldx 	#ErrorID_BadValue
.19ba	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.19bd					ExecRight:
.19bd	20 6a 17	jsr $176a			jsr 	EvaluateString 				; string to stack,X
.19c0	20 f7 1c	jsr $1cf7			jsr 	CheckComma
.19c3	e8		inx				inx
.19c4	20 7d 17	jsr $177d			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.19c7	ca		dex				dex
.19c8	98		tya				tya
.19c9	48		pha				pha
.19ca	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.19cc	85 04		sta $04				sta 	temp0
.19ce	b5 50		lda $50,x			lda 	esInt1,x
.19d0	85 05		sta $05				sta 	temp0+1
.19d2	a0 00		ldy #$00			ldy 	#0 							; point to length
.19d4	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.19d6	18		clc				clc 								; add 1.
.19d7	69 01		adc #$01			adc 	#1
.19d9	38		sec				sec
.19da	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.19dc	f0 02		beq $19e0			beq		_ERMake1 					; if zero, make it 1.
.19de	b0 02		bcs $19e2			bcs		_EROkay
.19e0					_ERMake1:
.19e0	a9 01		lda #$01			lda 	#1 							; start position.
.19e2					_EROkay:
.19e2	e8		inx				inx 								; set start pos.
.19e3	95 48		sta $48,x			sta 	esInt0,x
.19e5	e8		inx				inx
.19e6	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.19e8	20 86 1c	jsr $1c86			jsr 	MInt32Set8Bit
.19eb	68		pla				pla
.19ec	a8		tay				tay
.19ed	4c 88 19	jmp $1988			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32binary.asm

.19f0					MInt32And:
.19f0	b5 48		lda $48,x			lda 	esInt0,x
.19f2	35 49		and $49,x			and 	esInt0+1,x
.19f4	95 48		sta $48,x			sta 	esInt0,x
.19f6	b5 50		lda $50,x			lda 	esInt1,x
.19f8	35 51		and $51,x			and 	esInt1+1,x
.19fa	95 50		sta $50,x			sta 	esInt1,x
.19fc	b5 58		lda $58,x			lda 	esInt2,x
.19fe	35 59		and $59,x			and 	esInt2+1,x
.1a00	95 58		sta $58,x			sta 	esInt2,x
.1a02	b5 60		lda $60,x			lda 	esInt3,x
.1a04	35 61		and $61,x			and 	esInt3+1,x
.1a06	95 60		sta $60,x			sta 	esInt3,x
.1a08	60		rts				rts
.1a09					MInt32Or:
.1a09	b5 48		lda $48,x			lda 	esInt0,x
.1a0b	15 49		ora $49,x			ora 	esInt0+1,x
.1a0d	95 48		sta $48,x			sta 	esInt0,x
.1a0f	b5 50		lda $50,x			lda 	esInt1,x
.1a11	15 51		ora $51,x			ora 	esInt1+1,x
.1a13	95 50		sta $50,x			sta 	esInt1,x
.1a15	b5 58		lda $58,x			lda 	esInt2,x
.1a17	15 59		ora $59,x			ora 	esInt2+1,x
.1a19	95 58		sta $58,x			sta 	esInt2,x
.1a1b	b5 60		lda $60,x			lda 	esInt3,x
.1a1d	15 61		ora $61,x			ora 	esInt3+1,x
.1a1f	95 60		sta $60,x			sta 	esInt3,x
.1a21	60		rts				rts
.1a22					MInt32Xor:
.1a22	b5 48		lda $48,x			lda 	esInt0,x
.1a24	55 49		eor $49,x			eor 	esInt0+1,x
.1a26	95 48		sta $48,x			sta 	esInt0,x
.1a28	b5 50		lda $50,x			lda 	esInt1,x
.1a2a	55 51		eor $51,x			eor 	esInt1+1,x
.1a2c	95 50		sta $50,x			sta 	esInt1,x
.1a2e	b5 58		lda $58,x			lda 	esInt2,x
.1a30	55 59		eor $59,x			eor 	esInt2+1,x
.1a32	95 58		sta $58,x			sta 	esInt2,x
.1a34	b5 60		lda $60,x			lda 	esInt3,x
.1a36	55 61		eor $61,x			eor 	esInt3+1,x
.1a38	95 60		sta $60,x			sta 	esInt3,x
.1a3a	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32compare.asm

.1a3b					MInt32Compare:
.1a3b	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.1a3d	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1a3f	d0 13		bne $1a54			bne 	MInt32Compare2
.1a41	b5 50		lda $50,x			lda 	esInt1,x
.1a43	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1a45	d0 0d		bne $1a54			bne 	MInt32Compare2
.1a47	b5 58		lda $58,x			lda 	esInt2,x
.1a49	d5 59		cmp $59,x			cmp 	esInt2+1,x
.1a4b	d0 07		bne $1a54			bne 	MInt32Compare2
.1a4d	b5 60		lda $60,x			lda 	esInt3,x
.1a4f	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1a51	d0 01		bne $1a54			bne 	MInt32Compare2
.1a53	60		rts				rts
.1a54					MInt32Compare2:
.1a54	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1a56	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1a58	b5 50		lda $50,x			lda		esInt1,x
.1a5a	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1a5c	b5 58		lda $58,x			lda		esInt2,x
.1a5e	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1a60	b5 60		lda $60,x			lda		esInt3,x
.1a62	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1a64	50 02		bvc $1a68			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1a66	49 80		eor #$80			eor 	#$80
.1a68					_I32LNoOverflow
.1a68	30 03		bmi $1a6d			bmi 	MInt32CLess					; if -ve then return $FF
.1a6a	a9 01		lda #$01			lda 	#$01						; else return $01
.1a6c	60		rts				rts
.1a6d					MInt32CLess:
.1a6d	a9 ff		lda #$ff			lda 	#$FF
.1a6f	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32divide.asm

.1a70					MInt32SDivide:
.1a70	98		tya				tya  								; save Y, which is the count of negations
.1a71	48		pha				pha
.1a72	a0 00		ldy #$00			ldy 	#0 							; zero count
.1a74	20 8c 1a	jsr $1a8c			jsr 	_MInt32SRemSign 			; unsign TOS
.1a77	e8		inx				inx 								; unsign TOS+1
.1a78	20 8c 1a	jsr $1a8c			jsr 	_MInt32SRemSign
.1a7b	ca		dex				dex
.1a7c	98		tya				tya 								; save sign count on stack
.1a7d	48		pha				pha
.1a7e	20 95 1a	jsr $1a95			jsr 	MInt32UDivide 				; unsigned division
.1a81	68		pla				pla 								; get sign count back
.1a82	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1a84	f0 03		beq $1a89			beq 	_I32SNoNeg
.1a86	20 31 1c	jsr $1c31			jsr 	MInt32Negate
.1a89					_I32SNoNeg:
.1a89	68		pla				pla 								; restoe Y and exit
.1a8a	a8		tay				tay
.1a8b	60		rts				rts
.1a8c					_MInt32SRemSign:
.1a8c	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1a8e	10 04		bpl $1a94			bpl 	_MInt32SRSExit
.1a90	c8		iny				iny 								; increment the sign count
.1a91	20 31 1c	jsr $1c31			jsr 	MInt32Negate 				; negate the value.
.1a94					_MInt32SRSExit:
.1a94	60		rts				rts
.1a95					MInt32UDivide:
.1a95	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1a97	15 51		ora $51,x			ora 	esInt1+1,x
.1a99	15 52		ora $52,x			ora 	esInt1+2,x
.1a9b	15 53		ora $53,x			ora 	esInt1+3,x
.1a9d	f0 4a		beq $1ae9			beq 	_MInt32DZero
.1a9f	e8		inx				inx 								; clear A
.1aa0	e8		inx				inx
.1aa1	20 77 1c	jsr $1c77			jsr 	MInt32False
.1aa4	ca		dex				dex
.1aa5	ca		dex				dex
.1aa6	98		tya				tya 								; save Y on the stack
.1aa7	48		pha				pha
.1aa8	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1aaa					_MInt32UDLoop:
.1aaa	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1aac	36 50		rol $50,x			rol 	esInt1,x
.1aae	36 58		rol $58,x			rol 	esInt2,x
.1ab0	36 60		rol $60,x			rol 	esInt3,x
.1ab2	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.1ab4	36 52		rol $52,x			rol 	esInt1+2,x
.1ab6	36 5a		rol $5a,x			rol 	esInt2+2,x
.1ab8	36 62		rol $62,x			rol 	esInt3+2,x
.1aba	38		sec				sec 								; calculate A-M saving result on the stack
.1abb	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1abd	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1abf	48		pha				pha
.1ac0	b5 52		lda $52,x			lda 	esInt1+2,x
.1ac2	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1ac4	48		pha				pha
.1ac5	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1ac7	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1ac9	48		pha				pha
.1aca	b5 62		lda $62,x			lda 	esInt3+2,x
.1acc	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1ace	90 10		bcc $1ae0			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1ad0	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1ad2	68		pla				pla
.1ad3	95 5a		sta $5a,x			sta 	esInt2+2,x
.1ad5	68		pla				pla
.1ad6	95 52		sta $52,x			sta 	esInt1+2,x
.1ad8	68		pla				pla
.1ad9	95 4a		sta $4a,x			sta 	esInt0+2,x
.1adb	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1add	4c e3 1a	jmp $1ae3			jmp 	_MInt32Next 					; do the next iteration
.1ae0					_MInt32NoSubtract:
.1ae0	68		pla				pla
.1ae1	68		pla				pla
.1ae2	68		pla				pla
.1ae3					_MInt32Next:
.1ae3	88		dey				dey 								; do this 32 times.
.1ae4	d0 c4		bne $1aaa			bne 	_MInt32UDLoop
.1ae6	68		pla				pla 								; restore Y and exit
.1ae7	a8		tay				tay
.1ae8	60		rts				rts
.1ae9					_MInt32DZero:
.1ae9	a2 05		ldx #$05			ldx 	#ErrorID_DivZero
.1aeb	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1aee					MInt32Modulus:
.1aee	20 95 1a	jsr $1a95			jsr 	MInt32UDivide 				; do the division.
.1af1	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1af3	95 60		sta $60,x			sta 	esInt3,x
.1af5	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1af7	95 58		sta $58,x			sta 	esInt2,x
.1af9	b5 52		lda $52,x			lda 	esInt1+2,x
.1afb	95 50		sta $50,x			sta 	esInt1,x
.1afd	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1aff	95 48		sta $48,x			sta 	esInt0,x
.1b01	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32fromstr.asm

.1b02					MInt32FromString:
.1b02	85 0a		sta $0a				sta 	tempShort 					; save base
.1b04	98		tya				tya
.1b05	48		pha				pha
.1b06	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1b08	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1b0a	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.1b0c	d0 01		bne $1b0f			bne 	_I32FSNotNegative
.1b0e	c8		iny				iny 								; if so consume it.
.1b0f					_I32FSNotNegative:
.1b0f	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1b11	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1b13	f0 02		beq $1b17			beq 	_I32FSNN2
.1b15	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1b17					_I32FSNN2:
.1b17	48		pha				pha 								; save base + final sign on stack.
.1b18	20 77 1c	jsr $1c77			jsr 	MInt32False 					; zero the return value.
.1b1b					I32FSMainLoop:
.1b1b	68		pla				pla 								; get the base back into tempshort
.1b1c	48		pha				pha
.1b1d	29 7f		and #$7f			and 	#$7F
.1b1f	85 0a		sta $0a				sta 	tempShort
.1b21	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1b23	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1b25	90 02		bcc $1b29			bcc 	_I32FSNotLC
.1b27	e9 20		sbc #$20			sbc 	#32
.1b29					_I32FSNotLC:
.1b29	38		sec				sec 								; subtract 48 (ASCII "0")
.1b2a	e9 30		sbc #$30			sbc 	#"0"
.1b2c	90 26		bcc $1b54			bcc 	_I32FSDone 					; nothing more to do.
.1b2e	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1b30	90 06		bcc $1b38			bcc 	_I32FSValidate
.1b32	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1b34	90 1e		bcc $1b54			bcc 	_I32FSDone
.1b36	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1b38					_I32FSValidate:
.1b38	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1b3a	b0 18		bcs $1b54			bcs 	_I32FSDone 					; sorry, too large for this base.
.1b3c	48		pha				pha 								; save the new digit value.
.1b3d	e8		inx				inx 								; put base into next slot.
.1b3e	a5 0a		lda $0a				lda 	tempShort
.1b40	20 86 1c	jsr $1c86			jsr 	MInt32Set8Bit
.1b43	ca		dex				dex
.1b44	20 96 1b	jsr $1b96			jsr 	MInt32Multiply 				; multiply current by the base
.1b47	e8		inx				inx
.1b48	68		pla				pla  								; put additive into next slot
.1b49	20 86 1c	jsr $1c86			jsr 	MInt32Set8Bit
.1b4c	ca		dex				dex
.1b4d	20 62 1b	jsr $1b62			jsr 	MInt32Add 					; and add it
.1b50	c8		iny				iny 								; look at next character
.1b51	4c 1b 1b	jmp $1b1b			jmp 	I32FSMainLoop 				; and go round again.
.1b54					_I32FSDone:
.1b54	68		pla				pla 								; get base/final sign back
.1b55	10 04		bpl $1b5b			bpl 	_I32FSNN3
.1b57	88		dey				dey 								; one fewer character to allow for the - prefix.
.1b58	20 31 1c	jsr $1c31			jsr 	MInt32Negate 				; negate the result.
.1b5b					_I32FSNN3:
.1b5b	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1b5d	68		pla				pla
.1b5e	a8		tay				tay
.1b5f	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1b61	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32math.asm

.1b62					MInt32Add:
.1b62	18		clc				clc
.1b63	b5 48		lda $48,x			lda 	esInt0,x
.1b65	75 49		adc $49,x			adc 	esInt0+1,x
.1b67	95 48		sta $48,x			sta 	esInt0,x
.1b69	b5 50		lda $50,x			lda 	esInt1,x
.1b6b	75 51		adc $51,x			adc 	esInt1+1,x
.1b6d	95 50		sta $50,x			sta 	esInt1,x
.1b6f	b5 58		lda $58,x			lda 	esInt2,x
.1b71	75 59		adc $59,x			adc 	esInt2+1,x
.1b73	95 58		sta $58,x			sta 	esInt2,x
.1b75	b5 60		lda $60,x			lda 	esInt3,x
.1b77	75 61		adc $61,x			adc 	esInt3+1,x
.1b79	95 60		sta $60,x			sta 	esInt3,x
.1b7b	60		rts				rts
.1b7c					MInt32Sub:
.1b7c	38		sec				sec
.1b7d	b5 48		lda $48,x			lda 	esInt0,x
.1b7f	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1b81	95 48		sta $48,x			sta 	esInt0,x
.1b83	b5 50		lda $50,x			lda 	esInt1,x
.1b85	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1b87	95 50		sta $50,x			sta 	esInt1,x
.1b89	b5 58		lda $58,x			lda 	esInt2,x
.1b8b	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1b8d	95 58		sta $58,x			sta 	esInt2,x
.1b8f	b5 60		lda $60,x			lda 	esInt3,x
.1b91	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1b93	95 60		sta $60,x			sta 	esInt3,x
.1b95	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32multiply.asm

.1b96					MInt32Multiply:
.1b96	e8		inx				inx 								; copy 2nd -> 3rd
.1b97	20 bc 1b	jsr $1bbc			jsr 	MInt32CopyUp
.1b9a	ca		dex				dex
.1b9b	20 bc 1b	jsr $1bbc			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1b9e	20 77 1c	jsr $1c77			jsr 	MInt32False 					; zero 1st.
.1ba1					_I32Loop:
.1ba1	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1ba3	29 01		and #$01			and 	#1
.1ba5	f0 03		beq $1baa			beq 	_I32NoAdd 					; if set
.1ba7	20 62 1b	jsr $1b62			jsr 	MInt32Add 					; add 2nd to 1st.
.1baa					_I32NoAdd:
.1baa	e8		inx				inx 								; shift 2nd left
.1bab	20 8c 1c	jsr $1c8c			jsr 	MInt32ShiftLeft
.1bae	e8		inx				inx  								; shift 3rd right
.1baf	20 95 1c	jsr $1c95			jsr 	MInt32ShiftRight
.1bb2	20 9e 1c	jsr $1c9e			jsr 	MInt32Zero 					; check if zero.
.1bb5	08		php				php 								; save status bits
.1bb6	ca		dex				dex 	 							; point back to 1st
.1bb7	ca		dex				dex
.1bb8	28		plp				plp 								; get status bits
.1bb9	d0 e6		bne $1ba1			bne 	_I32Loop 					; if non-zero keep going.
.1bbb	60		rts				rts
.1bbc					MInt32CopyUp:
.1bbc	b5 48		lda $48,x			lda 	esInt0,x
.1bbe	95 49		sta $49,x			sta 	esInt0+1,x
.1bc0	b5 50		lda $50,x			lda 	esInt1,x
.1bc2	95 51		sta $51,x			sta 	esInt1+1,x
.1bc4	b5 58		lda $58,x			lda 	esInt2,x
.1bc6	95 59		sta $59,x			sta 	esInt2+1,x
.1bc8	b5 60		lda $60,x			lda 	esInt3,x
.1bca	95 61		sta $61,x			sta 	esInt3+1,x
.1bcc	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32tostr.asm

>0af4					MCharCount:	.fill 	1						; count of converted characters
.1bcd					MInt32ToString:
.1bcd	48		pha				pha 								; save base
.1bce	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1bd0	a9 00		lda #$00			lda 	#0
.1bd2	8d f4 0a	sta $0af4			sta 	MCharCount 					; clear character count to 0
.1bd5	98		tya				tya
.1bd6	48		pha				pha
.1bd7	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1bd9	10 10		bpl $1beb			bpl 	_I32TSUnsigned
.1bdb	48		pha				pha 								; save base on stack.
.1bdc	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1bde	10 08		bpl $1be8			bpl 	_I32TSNoFlip
.1be0	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1be2	20 1e 1c	jsr $1c1e			jsr 	MI32WriteCharacter
.1be5	20 31 1c	jsr $1c31			jsr 	MInt32Negate 				; negate the value.
.1be8					_I32TSNoFlip:
.1be8	68		pla				pla 								; get the base back
.1be9	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1beb					_I32TSUnsigned:
.1beb	20 f9 1b	jsr $1bf9			jsr 	MI32DivideWrite 			; recursive code to output string.
.1bee	a0 00		ldy #$00			ldy 	#0 							; write charcount to first character.
.1bf0	ad f4 0a	lda $0af4			lda 	MCharCount
.1bf3	91 04		sta ($04),y			sta 	(temp0),y
.1bf5	68		pla				pla
.1bf6	a8		tay				tay
.1bf7	68		pla				pla
.1bf8	60		rts				rts
.1bf9					MI32DivideWrite:
.1bf9	48		pha				pha 								; save the divisor/base
.1bfa	e8		inx				inx 								; write in the dividing position.
.1bfb	20 86 1c	jsr $1c86			jsr 	MInt32Set8Bit
.1bfe	ca		dex				dex
.1bff	20 95 1a	jsr $1a95			jsr 	MInt32UDivide 				; divide number by base.
.1c02	68		pla				pla 								; get the base into Y
.1c03	a8		tay				tay
.1c04	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1c06	48		pha				pha
.1c07	20 9e 1c	jsr $1c9e			jsr 	MInt32Zero 					; is the result zero ?
.1c0a	f0 04		beq $1c10			beq 	_I32NoRecurse 				; if so, don't recurse.
.1c0c	98		tya				tya 								; put base into A
.1c0d	20 f9 1b	jsr $1bf9			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1c10					_I32NoRecurse:
.1c10	68		pla				pla 								; get the remainder back
.1c11	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1c13	90 02		bcc $1c17			bcc 	_I32NotHex
.1c15	69 06		adc #$06			adc 	#7-1
.1c17					_I32NotHex:
.1c17	18		clc				clc 								; make it ASCII
.1c18	69 30		adc #$30			adc 	#48
.1c1a	20 1e 1c	jsr $1c1e			jsr 	MI32WriteCharacter 			; write the character out
.1c1d	60		rts				rts 								; and exit.
.1c1e					MI32WriteCharacter:
.1c1e	ee f4 0a	inc $0af4			inc 	MCharCount 					; bump count (space for leading count)
.1c21	ac f4 0a	ldy $0af4			ldy 	MCharCount 					; get position
.1c24	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1c26	c8		iny				iny
.1c27	a9 00		lda #$00			lda 	#0
.1c29	91 04		sta ($04),y			sta 	(temp0),y
.1c2b	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32unary.asm

>0af5					MSeed32:	.fill 	4							; random number seed.
.1c2c					MInt32Absolute:
.1c2c	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1c2e	30 01		bmi $1c31			bmi 	MInt32Negate
.1c30	60		rts				rts
.1c31					MInt32Negate:
.1c31	38		sec				sec
.1c32	a9 00		lda #$00			lda 	#0
.1c34	f5 48		sbc $48,x			sbc 	esInt0,x
.1c36	95 48		sta $48,x			sta 	esInt0,x
.1c38	a9 00		lda #$00			lda 	#0
.1c3a	f5 50		sbc $50,x			sbc 	esInt1,x
.1c3c	95 50		sta $50,x			sta 	esInt1,x
.1c3e	a9 00		lda #$00			lda 	#0
.1c40	f5 58		sbc $58,x			sbc 	esInt2,x
.1c42	95 58		sta $58,x			sta 	esInt2,x
.1c44	a9 00		lda #$00			lda 	#0
.1c46	f5 60		sbc $60,x			sbc 	esInt3,x
.1c48	95 60		sta $60,x			sta 	esInt3,x
.1c4a	60		rts				rts
.1c4b					MInt32Not:
.1c4b	b5 48		lda $48,x			lda 	esInt0,x
.1c4d	49 ff		eor #$ff			eor 	#$FF
.1c4f	95 48		sta $48,x			sta 	esInt0,x
.1c51	b5 50		lda $50,x			lda 	esInt1,x
.1c53	49 ff		eor #$ff			eor 	#$FF
.1c55	95 50		sta $50,x			sta 	esInt1,x
.1c57	b5 58		lda $58,x			lda 	esInt2,x
.1c59	49 ff		eor #$ff			eor 	#$FF
.1c5b	95 58		sta $58,x			sta 	esInt2,x
.1c5d	b5 60		lda $60,x			lda 	esInt3,x
.1c5f	49 ff		eor #$ff			eor 	#$FF
.1c61	95 60		sta $60,x			sta 	esInt3,x
.1c63	60		rts				rts
.1c64					MInt32Sign:
.1c64	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1c66	30 0b		bmi $1c73			bmi 	MInt32True 					; if set return -1 (true)
.1c68	20 9e 1c	jsr $1c9e			jsr 	MInt32Zero 					; is it zero ?
.1c6b	f0 0a		beq $1c77			beq 	MInt32False 					; if zero return 0 (false)
.1c6d	20 77 1c	jsr $1c77			jsr 	MInt32False 					; > 0 return 1
.1c70	f6 48		inc $48,x			inc 	esInt0,x
.1c72	60		rts				rts
.1c73					MInt32True:
.1c73	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1c75	d0 02		bne $1c79			bne 	MInt32WriteAll
.1c77					MInt32False:
.1c77	a9 00		lda #$00			lda 	#0
.1c79					MInt32WriteAll:
.1c79	95 48		sta $48,x			sta 	esInt0,x
.1c7b					MInt32Write123:
.1c7b	95 50		sta $50,x			sta 	esInt1,x
.1c7d	95 58		sta $58,x			sta 	esInt2,x
.1c7f	95 60		sta $60,x			sta 	esInt3,x
.1c81	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1c83	95 40		sta $40,x			sta 	esType,x
.1c85	60		rts				rts
.1c86					MInt32Set8Bit:
.1c86	95 48		sta $48,x			sta 	esInt0,x
.1c88	a9 00		lda #$00			lda 	#0
.1c8a	f0 ef		beq $1c7b			beq		MInt32Write123
.1c8c					MInt32ShiftLeft:
.1c8c	16 48		asl $48,x			asl 	esInt0,x
.1c8e	36 50		rol $50,x			rol	 	esInt1,x
.1c90	36 58		rol $58,x			rol	 	esInt2,x
.1c92	36 60		rol $60,x			rol	 	esInt3,x
.1c94	60		rts				rts
.1c95					MInt32ShiftRight:
.1c95	56 60		lsr $60,x			lsr 	esInt3,x
.1c97	76 58		ror $58,x			ror 	esInt2,x
.1c99	76 50		ror $50,x			ror 	esInt1,x
.1c9b	76 48		ror $48,x			ror 	esInt0,x
.1c9d	60		rts				rts
.1c9e					MInt32Zero:
.1c9e	b5 48		lda $48,x			lda 	esInt0,x
.1ca0	15 50		ora $50,x			ora 	esInt1,x
.1ca2	15 58		ora $58,x			ora 	esInt2,x
.1ca4	15 60		ora $60,x			ora 	esInt3,x
.1ca6	60		rts				rts
.1ca7					MInt32Random:
.1ca7	98		tya				tya
.1ca8	48		pha				pha
.1ca9	a0 07		ldy #$07			ldy 	#7
.1cab	ad f5 0a	lda $0af5			lda 	MSeed32+0
.1cae	d0 03		bne $1cb3			bne 	_Random1
.1cb0	a8		tay				tay
.1cb1	a9 aa		lda #$aa			lda		#$AA
.1cb3					_Random1:
.1cb3	0a		asl a				asl 	a
.1cb4	2e f6 0a	rol $0af6			rol 	MSeed32+1
.1cb7	2e f7 0a	rol $0af7			rol 	MSeed32+2
.1cba	2e f8 0a	rol $0af8			rol 	MSeed32+3
.1cbd	90 02		bcc $1cc1			bcc 	_Random2
.1cbf	49 c5		eor #$c5			eor 	#$C5
.1cc1					_Random2:
.1cc1	88		dey				dey
.1cc2	d0 ef		bne $1cb3			bne 	_Random1
.1cc4	8d f5 0a	sta $0af5			sta 	MSeed32+0
.1cc7	95 48		sta $48,x			sta 	esInt0,x
.1cc9	ad f6 0a	lda $0af6			lda 	MSeed32+1
.1ccc	95 50		sta $50,x			sta 	esInt1,x
.1cce	ad f7 0a	lda $0af7			lda 	MSeed32+2
.1cd1	95 58		sta $58,x			sta 	esInt2,x
.1cd3	ad f8 0a	lda $0af8			lda 	MSeed32+3
.1cd6	95 60		sta $60,x			sta 	esInt3,x
.1cd8	68		pla				pla
.1cd9	a8		tay				tay
.1cda	a9 00		lda #$00			lda 	#0
.1cdc	95 40		sta $40,x			sta 	esType,x
.1cde	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/check.asm

.1cdf					CheckToken:
.1cdf	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1ce1	d0 02		bne $1ce5			bne 	_CTError
.1ce3	c8		iny				iny
.1ce4	60		rts				rts
.1ce5					_CTError:
.1ce5	a2 02		ldx #$02			ldx 	#ErrorID_Syntax
.1ce7	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1cea					CheckRightParen:
.1cea	b1 02		lda ($02),y			lda 	(codePtr),y
.1cec	c8		iny				iny
.1ced	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1cef	d0 01		bne $1cf2			bne 	_CRPError
.1cf1	60		rts				rts
.1cf2					_CRPError:
.1cf2	a2 09		ldx #$09			ldx 	#ErrorID_MissingRP
.1cf4	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1cf7					CheckComma:
.1cf7	b1 02		lda ($02),y			lda 	(codePtr),y
.1cf9	c8		iny				iny
.1cfa	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1cfc	d0 01		bne $1cff			bne 	_CCError
.1cfe	60		rts				rts
.1cff					_CCError:
.1cff	a2 0a		ldx #$0a			ldx 	#ErrorID_MissingComma
.1d01	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/scanner.asm

.21b7					ScanForward:
.21b7	85 06		sta $06				sta 	temp1 						; save tokens to search in temp1/temp1+1
.21b9	86 07		stx $07				stx 	temp1+1
.21bb	a9 00		lda #$00			lda 	#0 							; temp2 counts structure levels.
.21bd	85 08		sta $08				sta 	temp2
.21bf	b1 02		lda ($02),y	_SFLoop:lda 	(codePtr),y 				; look at the next token.
.21c1	c8		iny				iny
.21c2	a6 08		ldx $08				ldx 	temp2 						; check structure levels are zero.
.21c4	d0 08		bne $21ce			bne 	_SFNoCheck 					; if so, check token against entered values.
.21c6	c5 06		cmp $06				cmp 	temp1
.21c8	f0 24		beq $21ee			beq 	_SFExit
.21ca	c5 07		cmp $07				cmp 	temp1+1
.21cc	f0 20		beq $21ee			beq 	_SFExit
.21ce					_SFNoCheck:
.21ce	c9 80		cmp #$80			cmp 	#$80 						; if it is 00-7F (variable/number) just skip it.
.21d0	90 ed		bcc $21bf			bcc 	_SFLoop
.21d2	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; $80-$85 is various specials.
.21d4	90 19		bcc $21ef			bcc 	_SFSpecials
.21d6	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; if < structure start then continue
.21d8	90 e5		bcc $21bf			bcc 	_SFLoop
.21da	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; if >= unary start (after structure) then continue.
.21dc	b0 e1		bcs $21bf			bcs 	_SFLoop
.21de	aa		tax				tax  								; token in X, and look up the adjuster.
.21df	bd 5d 17	lda $175d,x			lda 	ELBinaryOperatorInfo-TOK_BINARYST,x
.21e2	38		sec				sec 								; convert to an offset
.21e3	e9 81		sbc #$81			sbc 	#$81
.21e5	18		clc				clc 								; add to depth
.21e6	65 08		adc $08				adc 	temp2
.21e8	85 08		sta $08				sta 	temp2
.21ea	10 d3		bpl $21bf			bpl 	_SFLoop 					; +ve okay to continue
.21ec	30 2a		bmi $2218			bmi 	_SFError 					; if gone -ve then we have a nesting error
.21ee	60		rts		_SFExit:rts
.21ef					_SFSpecials:
.21ef	c9 80		cmp #$80			cmp 	#TOK_EOL 					; $80, advance to next line.
.21f1	f0 14		beq $2207			beq 	_SFNextLine
.21f3	c9 84		cmp #$84			cmp 	#TOK_FPC					; $84, skip embedded float
.21f5	f0 26		beq $221d			beq 	_SFFloatSkip
.21f7	c9 85		cmp #$85			cmp 	#TOK_STR 					; $85, skip string
.21f9	f0 04		beq $21ff			beq 	_SFSkipString
.21fb	c8		iny				iny									; $81,$82,$83 shift, so just advance over the shifted
.21fc	4c bf 21	jmp $21bf			jmp 	_SFLoop 					; token.
.21ff					_SFSkipString:
.21ff	98		tya				tya
.2200	38		sec				sec
.2201	71 02		adc ($02),y			adc 	(codePtr),y
.2203	a8		tay				tay
.2204	4c bf 21	jmp $21bf			jmp 	_SFLoop
.2207					_SFNextLine:
.2207	a0 00		ldy #$00			ldy 	#0 							; get offset
.2209	b1 02		lda ($02),y			lda 	(codePtr),y
.220b	18		clc				clc 								; add to code pointer.
.220c	65 02		adc $02				adc 	codePtr
.220e	85 02		sta $02				sta 	codePtr
.2210	90 02		bcc $2214			bcc		_SFNLNoCarry
.2212	e6 03		inc $03				inc 	codePtr+1
.2214					_SFNLNoCarry:
.2214	b1 02		lda ($02),y			lda 	(codePtr),y 				; reached the end of the program.
.2216	d0 a7		bne $21bf			bne		_SFLoop 					; no go round again
.2218					_SFError:
.2218	a2 13		ldx #$13			ldx 	#ErrorID_Struct
.221a	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.221d					_SFFloatSkip:
.221d	4c 8c 12	jmp $128c			jmp 	Unimplemented

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.1d04					RSReset:
.1d04	a9 ff		lda #$ff			lda 	#(returnStack+retStackSize-1) & $FF
.1d06	85 78		sta $78				sta 	rsPointer
.1d08	a9 09		lda #$09			lda 	#(returnStack+retStackSize-1) >> 8
.1d0a	85 79		sta $79				sta 	1+(rsPointer)
.1d0c	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1d0e	8d ff 09	sta $09ff			sta 	returnStack+retStackSize-1
.1d11	60		rts				rts
.1d12					RSClaim:
.1d12	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1d14	48		pha				pha 								; save marker on stack.
.1d15	8a		txa				txa 								; get bytes required.
.1d16	38		sec				sec
.1d17	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1d19	65 78		adc $78				adc 	rsPointer
.1d1b	85 78		sta $78				sta 	rsPointer
.1d1d	a5 79		lda $79				lda 	rsPointer+1
.1d1f	69 ff		adc #$ff			adc 	#$FF
.1d21	85 79		sta $79				sta 	rsPointer+1
.1d23	c9 08		cmp #$08			cmp 	#returnStack>>8 			; overflow. underflow actually :)
.1d25	90 08		bcc $1d2f			bcc 	_RSCOverflow
.1d27	68		pla				pla 								; get marker back
.1d28	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1d2a	91 78		sta ($78),y			sta 	(rsPointer),y
.1d2c	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1d2e	60		rts				rts
.1d2f					_RSCOverflow:
.1d2f	a2 15		ldx #$15			ldx 	#ErrorID_RetStack
.1d31	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1d34					RSFree:
.1d34	18		clc				clc
.1d35	65 78		adc $78				adc 	rsPointer
.1d37	85 78		sta $78				sta 	rsPointer
.1d39	90 02		bcc $1d3d			bcc 	_RSFExit
.1d3b	e6 79		inc $79				inc 	rsPointer+1
.1d3d					_RSFExit:
.1d3d	60		rts				rts
.1d3e					RSSavePosition:
.1d3e	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1d40	a8		tay				tay 								; this is where we write it.
.1d41	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1d43	91 78		sta ($78),y			sta 	(rsPointer),y
.1d45	c8		iny				iny
.1d46	a5 03		lda $03				lda 	codePtr+1
.1d48	91 78		sta ($78),y			sta 	(rsPointer),y
.1d4a	c8		iny				iny
.1d4b	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1d4d	91 78		sta ($78),y			sta 	(rsPointer),y
.1d4f	a8		tay				tay 								; fix Y back again to original value
.1d50	60		rts				rts
.1d51					RSLoadPosition:
.1d51	a8		tay				tay
.1d52	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1d54	85 02		sta $02				sta 	codePtr
.1d56	c8		iny				iny
.1d57	b1 78		lda ($78),y			lda 	(rsPointer),y
.1d59	85 03		sta $03				sta 	codePtr+1
.1d5b	c8		iny				iny
.1d5c	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1d5e	a8		tay				tay 								; to Y
.1d5f	60		rts				rts

;******  Return to file: ../source/main/main.asm

.1d60					mainHandler:
.1d60	7c 63 1d	jmp ($1d63,x)			jmp 	(mainVectors,x)
.1d63					mainVectors:
>1d63	90 17					.word LinkEvaluate         ; index 0
>1d65	96 17					.word LinkEvaluateInteger  ; index 2
>1d67	9c 17					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.asm

.1d69					assemblerHandler:
.1d69	7c 6c 1d	jmp ($1d6c,x)			jmp 	(assemblerVectors,x)
.1d6c					assemblerVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.asm


;******  Processing file: ../source/device/x16/x16io.asm

.1d6c					IONewLine:
.1d6c	48		pha				pha
.1d6d	a9 0d		lda #$0d			lda 	#13
.1d6f	20 7c 1d	jsr $1d7c			jsr 	IOPrintChar
.1d72	68		pla				pla
.1d73	60		rts				rts
.1d74					IOTab:
.1d74	48		pha				pha
.1d75	a9 20		lda #$20			lda 	#32
.1d77	20 7c 1d	jsr $1d7c			jsr 	IOPrintChar
.1d7a	68		pla				pla
.1d7b	60		rts				rts
.1d7c					IOPrintChar:
.1d7c	aa		tax				tax
.1d7d	5a		phy				phy
.1d7e	8a		txa				txa
.1d7f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.1d82	7a		ply				ply
.1d83	60		rts				rts

;******  Return to file: ../source/device/device.asm

.1d84					deviceHandler:
.1d84	7c 87 1d	jmp ($1d87,x)			jmp 	(deviceVectors,x)
.1d87					deviceVectors:
>1d87	6c 1d					.word IONewLine            ; index 0
>1d89	7c 1d					.word IOPrintChar          ; index 2
>1d8b	74 1d					.word IOTab                ; index 4

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.asm


;******  Processing file: ../source/error/errorhandler.asm

.1d8d					ErrorHandler:
.1d8d	a9 ee		lda #$ee			lda 	#$EE
.1d8f	a8		tay				tay
>1d90	db						.byte 	$DB
.1d91	4c 91 1d	jmp $1d91	_EHHalt:jmp 	_EHHalt

;******  Return to file: ../source/error/error.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.asm

.1d94					floatingpointHandler:
.1d94	a2 03		ldx #$03			ldx 	#ErrorID_NoModule
.1d96	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.asm

.1d99					interactionHandler:
.1d99	7c 9c 1d	jmp ($1d9c,x)			jmp 	(interactionVectors,x)
.1d9c					interactionVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.asm


;******  Processing file: ../source/string/chr.asm

.1d9c					StringChrs:
.1d9c	aa		tax				tax 								; set up stack
.1d9d	a9 02		lda #$02			lda 	#2
.1d9f	20 52 1e	jsr $1e52			jsr 	AllocateSoftString
.1da2	98		tya				tya
.1da3	20 7a 1e	jsr $1e7a			jsr 	WriteSoftString
.1da6	20 ab 1d	jsr $1dab			jsr 	ReturnSoftString
.1da9	8a		txa				txa
.1daa	60		rts				rts
.1dab					ReturnSoftString:
.1dab	a5 7a		lda $7a				lda 	softMemAlloc
.1dad	95 48		sta $48,x			sta 	esInt0,x
.1daf	a5 7b		lda $7b				lda 	softMemAlloc+1
.1db1	95 50		sta $50,x			sta 	esInt1,x
.1db3	a9 00		lda #$00			lda 	#0
.1db5	95 58		sta $58,x			sta 	esInt2,x
.1db7	95 60		sta $60,x			sta 	esInt3,x
.1db9	a9 40		lda #$40			lda 	#$40
.1dbb	95 40		sta $40,x			sta 	esType,x
.1dbd	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/compare.asm

.1dbe					STRCompare:
.1dbe	48		pha				pha 								; save A
.1dbf	aa		tax				tax 								; put stack pos in X
.1dc0	98		tya				tya
.1dc1	48		pha				pha
.1dc2	20 f6 1d	jsr $1df6			jsr 	CopyStringPair
.1dc5	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1dc7	b1 04		lda ($04),y			lda 	(temp0),y
.1dc9	d1 06		cmp ($06),y			cmp 	(temp1),y
.1dcb	90 02		bcc $1dcf			bcc 	_SCNotSmaller
.1dcd	b1 06		lda ($06),y			lda 	(temp1),y
.1dcf					_SCNotSmaller:
.1dcf	aa		tax				tax 								; put that in X. We compare this many chars first.
.1dd0					_SCCompareLoop:
.1dd0	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1dd2	f0 0c		beq $1de0			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1dd4	ca		dex				dex 								; decrement chars to compare.
.1dd5	c8		iny				iny 								; move to next character
.1dd6	38		sec				sec 								; calculate s1[y]-s2[y]
.1dd7	b1 04		lda ($04),y			lda 	(temp0),y
.1dd9	f1 06		sbc ($06),y			sbc 	(temp1),y
.1ddb	d0 0a		bne $1de7			bne 	_SCReturnResult 			; if different return sign of A
.1ddd	4c d0 1d	jmp $1dd0			jmp 	_SCCompareLoop
.1de0					_SCSameToEndShortest
.1de0	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1de2	38		sec				sec
.1de3	b1 04		lda ($04),y			lda 	(temp0),y
.1de5	f1 06		sbc ($06),y			sbc 	(temp1),y
.1de7					_SCReturnResult:
.1de7	08		php				php 								; set return to zero preserving PSW.
.1de8	a2 00		ldx #$00			ldx 	#0
.1dea	28		plp				plp
.1deb	f0 05		beq $1df2			beq 	_SCExit 					; two values equal, then exit
.1ded	ca		dex				dex 								; X = $FF
.1dee	90 02		bcc $1df2			bcc 	_SCExit 					; if 1st < 2nd then -1
.1df0	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1df2					_SCExit:
.1df2	68		pla				pla
.1df3	a8		tay				tay
.1df4	68		pla				pla
.1df5	60		rts				rts
.1df6					CopyStringPair:
.1df6	b5 49		lda $49,x			lda 	esInt0+1,x
.1df8	85 06		sta $06				sta 	temp1
.1dfa	b5 51		lda $51,x			lda 	esInt1+1,x
.1dfc	85 07		sta $07				sta 	temp1+1
.1dfe					CopyStringTop:
.1dfe	b5 48		lda $48,x			lda 	esInt0,x
.1e00	85 04		sta $04				sta 	temp0
.1e02	b5 50		lda $50,x			lda 	esInt1,x
.1e04	85 05		sta $05				sta 	temp0+1
.1e06	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/concat.asm

.1e07					StringConcat:
.1e07	aa		tax				tax									; stack pos in X
.1e08	98		tya				tya
.1e09	48		pha				pha
.1e0a	20 f6 1d	jsr $1df6			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1e0d	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1e0e	a0 00		ldy #$00			ldy 	#0
.1e10	b1 04		lda ($04),y			lda 	(temp0),y
.1e12	71 06		adc ($06),y			adc 	(temp1),y
.1e14	b0 18		bcs $1e2e			bcs 	_SCError 					; just too many characters here.
.1e16	20 52 1e	jsr $1e52			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1e19	20 49 1e	jsr $1e49			jsr 	CopySoftToStack 			; copy that to the stack.
.1e1c	20 33 1e	jsr $1e33			jsr 	_SCCopyTemp0 				; copy temp0
.1e1f	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1e21	85 04		sta $04				sta 	temp0
.1e23	a5 07		lda $07				lda 	temp1+1
.1e25	85 05		sta $05				sta 	temp0+1
.1e27	20 33 1e	jsr $1e33			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1e2a	68		pla				pla
.1e2b	a8		tay				tay
.1e2c	8a		txa				txa 								; and A
.1e2d	60		rts				rts
.1e2e					_SCError:
.1e2e	a2 0d		ldx #$0d			ldx 	#ErrorID_StrLen
.1e30	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1e33					_SCCopyTemp0:
.1e33	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1e35	b1 04		lda ($04),y			lda 	(temp0),y
.1e37	85 08		sta $08				sta 	temp2
.1e39					_SCCopyLoop:
.1e39	a5 08		lda $08				lda 	temp2 						; done the lot
.1e3b	f0 0b		beq $1e48			beq 	_SCCopyExit
.1e3d	c6 08		dec $08				dec 	temp2
.1e3f	c8		iny				iny 								; get next char
.1e40	b1 04		lda ($04),y			lda 	(temp0),y
.1e42	20 7a 1e	jsr $1e7a			jsr 	WriteSoftString 			; write to soft string.
.1e45	4c 39 1e	jmp $1e39			jmp 	_SCCopyLoop
.1e48					_SCCopyExit:
.1e48	60		rts				rts
.1e49					CopySoftToStack:
.1e49	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1e4b	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1e4d	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1e4f	95 50		sta $50,x			sta 	esInt1,x
.1e51	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1e52					AllocateSoftString:
.1e52	85 0a		sta $0a				sta 	tempShort 					; save count
.1e54	98		tya				tya
.1e55	48		pha				pha
.1e56	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1e58	d0 0b		bne $1e65			bne 	_ASSDone
.1e5a	ad cc 0a	lda $0acc			lda 	highMemory 					; reset the soft memory alloc pointer.
.1e5d	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1e5f	ac cd 0a	ldy $0acd			ldy 	highMemory+1 				; but it needs to be reset before each command.
.1e62	88		dey				dey
.1e63	84 7b		sty $7b				sty 	softMemAlloc+1
.1e65					_ASSDone:
.1e65	38		sec				sec 								; allocate downwards enough memory
.1e66	a5 7a		lda $7a				lda 	softMemAlloc
.1e68	e5 0a		sbc $0a				sbc 	tempShort
.1e6a	85 7a		sta $7a				sta 	softMemAlloc
.1e6c	a5 7b		lda $7b				lda 	softMemAlloc+1
.1e6e	e9 00		sbc #$00			sbc 	#0
.1e70	85 7b		sta $7b				sta 	softMemAlloc+1
.1e72	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1e74	a8		tay				tay
.1e75	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e77	68		pla				pla
.1e78	a8		tay				tay
.1e79	60		rts				rts
.1e7a					WriteSoftString:
.1e7a	84 0a		sty $0a				sty 	tempShort 					; save Y
.1e7c	48		pha				pha
.1e7d	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1e7f	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1e81	18		clc				clc
.1e82	69 01		adc #$01			adc 	#1
.1e84	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e86	a8		tay				tay 								; pointer in Y
.1e87	68		pla				pla 								; get char and write.
.1e88	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1e8a	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1e8c	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/substring.asm

.0af9					NullString:
>0af9							.fill 	1							; don't waste memory concreting null strings.
.1e8d					StringSubstring:
.1e8d	48		pha				pha
.1e8e	aa		tax				tax 								; access stack.
.1e8f	98		tya				tya
.1e90	48		pha				pha
.1e91	20 fe 1d	jsr $1dfe			jsr 	CopyStringTop 				; point temp0 to the string.
.1e94	a0 00		ldy #$00			ldy 	#0 							; get length.
.1e96	b1 04		lda ($04),y			lda 	(temp0),Y
.1e98	85 06		sta $06				sta 	temp1
.1e9a	b5 49		lda $49,x			lda 	esInt0+1,x 					; get the initial offset
.1e9c	c5 06		cmp $06				cmp 	temp1 						;
.1e9e	f0 02		beq $1ea2			beq 	_SSBOkay
.1ea0	b0 2a		bcs $1ecc			bcs 	_SSBReturnNull
.1ea2					_SSBOkay:
.1ea2	a5 06		lda $06				lda 	temp1 						; get the total length +1
.1ea4	18		clc				clc
.1ea5	69 01		adc #$01			adc 	#1
.1ea7	38		sec				sec
.1ea8	f5 49		sbc $49,x			sbc 	esInt0+1,x 					; the anything >= this is bad.
.1eaa	d5 4a		cmp $4a,x			cmp 	esInt0+2,x  				; check bad >= required
.1eac	90 02		bcc $1eb0			bcc		_SSBTrunc
.1eae	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1eb0					_SSBTrunc:
.1eb0	85 07		sta $07				sta 	temp1+1 					; characters to copy.
.1eb2	18		clc				clc
.1eb3	69 01		adc #$01			adc 	#1 							; add 1
.1eb5	20 52 1e	jsr $1e52			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1eb8	20 49 1e	jsr $1e49			jsr 	CopySoftToStack 			; copy that to the stack.
.1ebb	b4 49		ldy $49,x			ldy 	esInt0+1,x 					; get initial position of char to copy
.1ebd					_SSBCopyLoop:
.1ebd	a5 07		lda $07				lda 	temp1+1 					; done them all
.1ebf	f0 0e		beq $1ecf			beq 	_SSBExit
.1ec1	c6 07		dec $07				dec 	temp1+1
.1ec3	b1 04		lda ($04),y			lda 	(temp0),y 					; get and write character
.1ec5	20 7a 1e	jsr $1e7a			jsr 	WriteSoftString
.1ec8	c8		iny				iny
.1ec9	4c bd 1e	jmp $1ebd			jmp 	_SSBCopyLoop
.1ecc					_SSBReturnNull:
.1ecc	20 d3 1e	jsr $1ed3			jsr 	ReturnNull
.1ecf					_SSBExit:
.1ecf	68		pla				pla
.1ed0	a8		tay				tay
.1ed1	68		pla				pla
.1ed2	60		rts				rts
.1ed3					ReturnNull:
.1ed3	a9 00		lda #$00			lda 	#0 							; clear null string
.1ed5	8d f9 0a	sta $0af9			sta 	NullString
.1ed8	a9 f9		lda #$f9			lda 	#NullString & $FF 			; set a pointer to it
.1eda	95 48		sta $48,x			sta 	esInt0,x
.1edc	a9 0a		lda #$0a			lda 	#NullString >> 8
.1ede	95 50		sta $50,x			sta 	esInt1,x
.1ee0	60		rts				rts

;******  Return to file: ../source/string/string.asm

.1ee1					stringHandler:
.1ee1	7c e4 1e	jmp ($1ee4,x)			jmp 	(stringVectors,x)
.1ee4					stringVectors:
>1ee4	9c 1d					.word StringChrs           ; index 0
>1ee6	07 1e					.word StringConcat         ; index 2
>1ee8	be 1d					.word STRCompare           ; index 4
>1eea	8d 1e					.word StringSubstring      ; index 6

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.asm

.1eec					tokeniserHandler:
.1eec	7c ef 1e	jmp ($1eef,x)			jmp 	(tokeniserVectors,x)
.1eef					tokeniserVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/access.asm

.0afa					varHash:
>0afa							.fill	1
.0afb					varType:
>0afb							.fill 	1
.0afc					varEnd:
>0afc							.fill 	1
.007c					hashList:
>007c							.fill 	2
.1eef					AccessVariable:
.1eef	aa		tax				tax 								; stack in X
.1ef0	c8		iny				iny
.1ef1	b1 02		lda ($02),y			lda 	(codePtr),y
.1ef3	88		dey				dey
.1ef4	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1ef6	d0 15		bne $1f0d			bne 	_AVLong
.1ef8	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1efa	38		sec				sec 	 							; make it 0-25
.1efb	e9 01		sbc #$01			sbc 	#1
.1efd	0a		asl a				asl 	a 							; x 4 is LSB of address
.1efe	0a		asl a				asl 	a
.1eff	95 48		sta $48,x			sta 	esInt0,x
.1f01	a9 0a		lda #$0a			lda 	#SingleLetterVar >> 8 		; make it an address
.1f03	95 50		sta $50,x			sta 	esInt1,x
.1f05	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1f07	95 40		sta $40,x			sta 	esType,x
.1f09	c8		iny				iny 								; skip over the variable reference in the code.
.1f0a	c8		iny				iny
.1f0b	8a		txa				txa 								; stack in A to return.
.1f0c	60		rts				rts
.1f0d					_AVLong:
.1f0d	8a		txa				txa
.1f0e	48		pha				pha
.1f0f	20 4d 1f	jsr $1f4d			jsr 	AccessSetup 				; set up the basic stuff.
.1f12	20 df 1f	jsr $1fdf			jsr 	FindVariable 				; does the variable exist already
.1f15	b0 0e		bcs $1f25			bcs 	_AVFound
.1f17	ad fb 0a	lda $0afb			lda 	varType 					; is the variable type an array
.1f1a	4a		lsr a				lsr 	a
.1f1b	90 05		bcc $1f22			bcc 	_AVCanCreate
.1f1d	a2 14		ldx #$14			ldx 	#ErrorID_noauto
.1f1f	20 8d 1d	jsr $1d8d			jsr 	ErrorHandler
.1f22					_AVCanCreate:
.1f22	20 8c 1f	jsr $1f8c			jsr 	CreateVariable 				; no, create it.
.1f25					_AVFound:
.1f25	68		pla				pla
.1f26	aa		tax				tax
.1f27	18		clc				clc 								; copy temp0 (variable record address)
.1f28	a5 04		lda $04				lda 	temp0 						; +5 (to point to the data)
.1f2a	69 05		adc #$05			adc 	#5
.1f2c	95 48		sta $48,x			sta 	esInt0,x
.1f2e	a5 05		lda $05				lda 	temp0+1
.1f30	69 00		adc #$00			adc 	#0
.1f32	95 50		sta $50,x			sta 	esInt1,x
.1f34	a9 00		lda #$00			lda 	#0
.1f36	95 58		sta $58,x			sta 	esInt2,x
.1f38	95 60		sta $60,x			sta 	esInt3,x
.1f3a	ac fb 0a	ldy $0afb			ldy 	varType 					; get the type ID from the type.
.1f3d	b9 0d 1f	lda $1f0d,y			lda 	_AVTypeTable-$3A,y
.1f40	95 40		sta $40,x			sta 	esType,x
.1f42	ac fc 0a	ldy $0afc			ldy 	varEnd 						; restore Y
.1f45	8a		txa				txa 								; return stack in A and return
.1f46	60		rts				rts
.1f47					_AVTypeTable:
>1f47	80 80						.byte 	$80,$80						; integer
>1f49	c0 c0						.byte 	$C0,$C0 					; string
>1f4b	81 81						.byte 	$81,$81 					; float
.1f4d					AccessSetup:
.1f4d	a9 00		lda #$00			lda 	#0 							; zero the hash byte.
.1f4f	8d fa 0a	sta $0afa			sta 	varHash
.1f52	98		tya				tya
.1f53	48		pha				pha
.1f54	b1 02		lda ($02),y	_ASLoop:lda 	(codePtr),y					; get next identifier character
.1f56	c9 3a		cmp #$3a			cmp 	#$3A 						; is it 3A-3F which end all identifiers ?
.1f58	b0 0d		bcs $1f67			bcs 	_ASComplete
.1f5a	18		clc				clc 								; add to the hash. Might improve this.
.1f5b	6d fa 0a	adc $0afa			adc 	varHash
.1f5e	a9 00		lda #$00			lda 	#0
.1f60	8d fa 0a	sta $0afa			sta 	varHash
.1f63	c8		iny				iny 								; next character
.1f64	4c 54 1f	jmp $1f54			jmp 	_ASLoop
.1f67					_ASComplete:
.1f67	8d fb 0a	sta $0afb			sta 	varType 					; save variable type byte
.1f6a	c8		iny				iny
.1f6b	8c fc 0a	sty $0afc			sty 	varEnd 						; save the ending position.
.1f6e	38		sec				sec 								; convert type byte from $3A-$3F to 0..5
.1f6f	e9 3a		sbc #$3a			sbc 	#$3A
.1f71	0a		asl a				asl 	a 							; multiply by hashTableSize (8 in this case)
.1f72	0a		asl a				asl 	a
.1f73	0a		asl a				asl 	a
.1f74	0a		asl a				asl 	a 							; 2 bytes/word
.1f75	85 04		sta $04				sta 	temp0 						; this is the offset to the start of the table.
.1f77	ad fa 0a	lda $0afa			lda 	varHash 					; get hash
.1f7a	29 07		and #$07			and 	#(hashTableSize-1)			; force into range
.1f7c	0a		asl a				asl  	a 							; x 2 (for word) and CC
.1f7d	65 04		adc $04				adc 	temp0 						; now offset from the start of the hash table.
.1f7f	69 68		adc #$68			adc 	#hashTables & $FF 			; add to hash table base address
.1f81	85 7c		sta $7c				sta 	hashList
.1f83	a9 0a		lda #$0a			lda 	#hashTables >> 8
.1f85	69 00		adc #$00			adc 	#0
.1f87	85 7d		sta $7d				sta 	hashList+1
.1f89	68		pla				pla
.1f8a	a8		tay				tay
.1f8b	60		rts				rts

;******  Return to file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/create.asm

.1f8c					CreateVariable:
.1f8c	98		tya				tya 								; push Y on the stack twice.
.1f8d	48		pha				pha
.1f8e	48		pha				pha
.1f8f	ae fb 0a	ldx $0afb			ldx 	varType 					; get var type 0-5
.1f92	bd 9f 1f	lda $1f9f,x			lda		_CVSize-$3A,x 				; the bytes for this new variable.
.1f95	48		pha				pha 								; save length
.1f96	a8		tay				tay 								; put into Y.
.1f97	ad ce 0a	lda $0ace			lda 	lowMemory 					; set low Memory ptr to temp0
.1f9a	85 04		sta $04				sta 	temp0
.1f9c	ad cf 0a	lda $0acf			lda 	lowMemory+1
.1f9f	85 05		sta $05				sta 	temp0+1
.1fa1	68		pla				pla 								; get length
.1fa2	20 6c 10	jsr $106c			jsr 	AdvanceLowMemoryByte 		; shift alloc memory forward by the length.
.1fa5					_CVClear:
.1fa5	88		dey				dey
.1fa6	a9 00		lda #$00			lda 	#0
.1fa8	91 04		sta ($04),y			sta 	(temp0),y
.1faa	c0 04		cpy #$04			cpy 	#4
.1fac	d0 f7		bne $1fa5			bne 	_CVClear
.1fae	ad fa 0a	lda $0afa			lda 	varHash 					; store hash at offset 4.
.1fb1	91 04		sta ($04),y			sta 	(temp0),y
.1fb3	68		pla				pla 								; offset, work out where the variable name is.
.1fb4	18		clc				clc
.1fb5	65 02		adc $02				adc 	codePtr
.1fb7	a0 02		ldy #$02			ldy 	#2 							; copy that into slots 2 + 3.
.1fb9	91 04		sta ($04),y			sta 	(temp0),y
.1fbb	a5 03		lda $03				lda 	codePtr+1
.1fbd	69 00		adc #$00			adc 	#0
.1fbf	c8		iny				iny
.1fc0	91 04		sta ($04),y			sta 	(temp0),y
.1fc2	a0 00		ldy #$00			ldy 	#0 							; copy current hash pointer in link
.1fc4	b1 7c		lda ($7c),y			lda 	(hashList),y
.1fc6	91 04		sta ($04),y			sta 	(temp0),y
.1fc8	c8		iny				iny
.1fc9	b1 7c		lda ($7c),y			lda 	(hashList),y
.1fcb	91 04		sta ($04),y			sta 	(temp0),y
.1fcd	a5 05		lda $05				lda 	temp0+1 					; set new link
.1fcf	91 7c		sta ($7c),y			sta 	(hashList),y
.1fd1	88		dey				dey
.1fd2	a5 04		lda $04				lda 	temp0
.1fd4	91 7c		sta ($7c),y			sta 	(hashList),y
.1fd6	68		pla				pla
.1fd7	a8		tay				tay
.1fd8	60		rts				rts
>1fd9	09 09				_CVSize:.byte 	5+4,5+4 					; <storage for integer>
>1fdb	07 07						.byte 	5+2,5+2 					; <storage for string>
>1fdd	0b 0b						.byte 	5+6,5+6 					; <storage for float>

;******  Return to file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/find.asm

.1fdf					FindVariable:
.1fdf	98		tya				tya
.1fe0	48		pha				pha
.1fe1	98		tya				tya 								; point temp2 to the actual name.
.1fe2	18		clc				clc
.1fe3	65 02		adc $02				adc 	codePtr
.1fe5	85 08		sta $08				sta 	temp2
.1fe7	a5 03		lda $03				lda 	codePtr+1
.1fe9	69 00		adc #$00			adc 	#0
.1feb	85 09		sta $09				sta 	temp2+1
.1fed	a0 00		ldy #$00			ldy 	#0
.1fef	a5 7c		lda $7c				lda 	hashList 					; copy hashlist to temp0
.1ff1	85 04		sta $04				sta 	temp0
.1ff3	a5 7d		lda $7d				lda 	hashList+1
.1ff5	85 05		sta $05				sta 	temp0+1
.1ff7	a0 01		ldy #$01	_FVNext:ldy 	#1 							; get MSB
.1ff9	b1 04		lda ($04),y			lda 	(temp0),y
.1ffb	f0 2c		beq $2029			beq 	_FVFail
.1ffd	aa		tax				tax
.1ffe	88		dey				dey		 							; get LSB
.1fff	b1 04		lda ($04),y			lda 	(temp0),y
.2001	85 04		sta $04				sta 	temp0 						; update pointer.
.2003	86 05		stx $05				stx 	temp0+1
.2005	a0 04		ldy #$04			ldy 	#4 							; check hashes match
.2007	b1 04		lda ($04),y			lda 	(temp0),y
.2009	cd fa 0a	cmp $0afa			cmp 	varHash
.200c	d0 e9		bne $1ff7			bne 	_FVNext 					; if not, no point in checking the name.
.200e	88		dey				dey 								; copy name pointer to temp1.
.200f	b1 04		lda ($04),y			lda 	(temp0),y
.2011	85 07		sta $07				sta 	temp1+1
.2013	88		dey				dey
.2014	b1 04		lda ($04),y			lda 	(temp0),y
.2016	85 06		sta $06				sta 	temp1
.2018	a0 00		ldy #$00			ldy 	#0
.201a					_FVCheck:
.201a	b1 06		lda ($06),y			lda 	(temp1),y 					; compare names
.201c	d1 08		cmp ($08),y			cmp 	(temp2),y
.201e	d0 d7		bne $1ff7			bne 	_FVNext		 				; fail if different.
.2020	c8		iny				iny
.2021	c9 3a		cmp #$3a			cmp 	#$3A 						; until reached the end marker.
.2023	90 f5		bcc $201a			bcc 	_FVCheck
.2025	68		pla				pla
.2026	a8		tay				tay
.2027	38		sec				sec
.2028	60		rts				rts
.2029					_FVFail:
.2029	68		pla				pla
.202a	a8		tay				tay
.202b	18		clc				clc
.202c	60		rts				rts

;******  Return to file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/reset.asm

.202d					HashTableReset:
.202d	a2 60		ldx #$60			ldx 	#6*2*hashTableSize
.202f	a9 00		lda #$00			lda 	#0
.2031					_HTRClear:
.2031	9d 67 0a	sta $0a67,x			sta 	hashTables-1,x
.2034	ca		dex				dex
.2035	d0 fa		bne $2031			bne 	_HTRClear
.2037	60		rts				rts

;******  Return to file: ../source/variable/variable.asm

.2038					variableHandler:
.2038	7c 3b 20	jmp ($203b,x)			jmp 	(variableVectors,x)
.203b					variableVectors:
>203b	ef 1e					.word AccessVariable       ; index 0
>203d	2d 20					.word HashTableReset       ; index 2

;******  Return to file: ../source/basic.asm


;******  End of listing
