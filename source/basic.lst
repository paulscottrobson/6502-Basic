
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ..\source\basic.asm
; Tue Feb 23 15:33:17 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\basic.asm


;******  Processing file: ..\source\main/01common.inc

=8					StackSize = 8

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/02macros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize
>0048					esInt0:	.fill 	StackSize
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize
=$48					esMant0 = esInt0
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3

;******  Processing file: ..\source\main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$9d					TOK_STRUCTST=$9d
=$a2					TOK_UNARYST=$a2
=$c0					TOK_TOKENS=$c0
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_WAVY                     = $a2 ; ~
=$a3					TKW_LPAREN                   = $a3 ; (
=$a4					TKW_AMP                      = $a4 ; &
=$a5					TKW_AT                       = $a5 ; @
=$a6					TKW_LENLPAREN                = $a6 ; len(
=$a7					TKW_SGNLPAREN                = $a7 ; sgn(
=$a8					TKW_ABSLPAREN                = $a8 ; abs(
=$a9					TKW_RANDOMLPAREN             = $a9 ; random(
=$aa					TKW_PAGE                     = $aa ; page
=$ab					TKW_TRUE                     = $ab ; true
=$ac					TKW_FALSE                    = $ac ; false
=$ad					TKW_MINLPAREN                = $ad ; min(
=$ae					TKW_MAXLPAREN                = $ae ; max(
=$af					TKW_SYSLPAREN                = $af ; sys(
=$b0					TKW_TIMERLPAREN              = $b0 ; timer(
=$b1					TKW_EVENTLPAREN              = $b1 ; event(
=$b2					TKW_GETLPAREN                = $b2 ; get(
=$b3					TKW_INKEYLPAREN              = $b3 ; inkey(
=$b4					TKW_ALLOCLPAREN              = $b4 ; alloc(
=$b5					TKW_CHRDOLLARLPAREN          = $b5 ; chr$(
=$b6					TKW_LEFTDOLLARLPAREN         = $b6 ; left$(
=$b7					TKW_MIDDOLLARLPAREN          = $b7 ; mid$(
=$b8					TKW_RIGHTDOLLARLPAREN        = $b8 ; right$(
=$b9					TKW_STRDOLLARLPAREN          = $b9 ; str$(
=$ba					TKW_VALLPAREN                = $ba ; val(
=$bb					TKW_PEEKLPAREN               = $bb ; peek(
=$bc					TKW_DEEKLPAREN               = $bc ; deek(
=$bd					TKW_LEEKLPAREN               = $bd ; leek(
=$be					TKW_INTLPAREN                = $be ; int(
=$bf					TKW_FLOATLPAREN              = $bf ; float(
=$c0					TKW_RPAREN                   = $c0 ; )
=$c1					TKW_COLON                    = $c1 ; :
=$c2					TKW_COMMA                    = $c2 ; ,
=$c3					TKW_SEMICOLON                = $c3 ; ;
=$c4					TKW_RSQPAREN                 = $c4 ; ]
=$c5					TKW_TO                       = $c5 ; to
=$c6					TKW_STEP                     = $c6 ; step
=$c7					TKW_PROC                     = $c7 ; proc
=$c8					TKW_ENDPROC                  = $c8 ; endproc
=$c9					TKW_LOCAL                    = $c9 ; local
=$ca					TKW_REM                      = $ca ; rem
=$cb					TKW_LET                      = $cb ; let
=$cc					TKW_QUOTE                    = $cc ; '
=$cd					TKW_LSQPAREN                 = $cd ; [
=$ce					TKW_INPUT                    = $ce ; input
=$cf					TKW_ELSE                     = $cf ; else
=$d0					TKW_VDU                      = $d0 ; vdu
=$d1					TKW_READ                     = $d1 ; read
=$d2					TKW_DATA                     = $d2 ; data
=$d3					TKW_RESTORE                  = $d3 ; restore
=$d4					TKW_PRINT                    = $d4 ; print
=$d5					TKW_GOTO                     = $d5 ; goto
=$d6					TKW_GOSUB                    = $d6 ; gosub
=$d7					TKW_RETURN                   = $d7 ; return
=$d8					TKW_ASSERT                   = $d8 ; assert
=$d9					TKW_STOP                     = $d9 ; stop
=$da					TKW_END                      = $da ; end
=$db					TKW_DIM                      = $db ; dim
=$dc					TKW_POKE                     = $dc ; poke
=$dd					TKW_DOKE                     = $dd ; doke
=$de					TKW_LOKE                     = $de ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ..\source\main/03data.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/imath/intmacros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/errorhandler.inc


;******  Processing file: ..\source\error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_DivZero = 2 ; Divide By Zero
=3					ErrorID_Stop = 3 ; Stop
=4					ErrorID_BadType = 4 ; BadType

;******  Return to file: ..\source\error/errorhandler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.asm


;******  Processing file: ..\source\main/00start.asm

.1000					Start:
.1000	a9 19		lda #$19			lda 	#(TestCode) & $FF
.1002	85 02		sta $02				sta 	codePtr
.1004	a9 10		lda #$10			lda 	#(TestCode) >> 8
.1006	85 03		sta $03				sta 	1+(codePtr)
.1008	a0 00		ldy #$00			ldy 	#0
.100a	a9 00		lda #$00			lda 	#0
.100c	a2 00		ldx #$00			ldx 	#0
.100e	20 2c 12	jsr $122c			jsr 	EvaluateLevel
>1011	db						.byte 	$DB
.1012	4c 12 10	jmp $1012	halt:	jmp 	halt
.1015					Unimplemented:
>1015	db						.byte 	$DB
.1016	4c 15 10	jmp $1015			jmp 	Unimplemented

;******  Processing file: ..\source\main/../generated/testcode.inc

.1019					TestCode:
>1019	45 8b 46 80				.byte 69,139,70,128

;******  Return to file: ..\source\main/00start.asm


;******  Processing file: ..\source\main/../generated/tokenvectors0.inc

.101d					Group0Vectors:
>101d	15 10					.word	Unimplemented            ; $80 [[eol]]
>101f	15 10					.word	Unimplemented            ; $81 [[sh1]]
>1021	15 10					.word	Unimplemented            ; $82 [[sh2]]
>1023	15 10					.word	Unimplemented            ; $83 [[sh3]]
>1025	15 10					.word	Unimplemented            ; $84 [[fpc]]
>1027	15 10					.word	Unimplemented            ; $85 [[str]]
>1029	a3 11					.word	AndHandler               ; $86 and
>102b	90 11					.word	OrHandler                ; $87 or
>102d	7d 11					.word	XorHandler               ; $88 xor
>102f	07 12					.word	CompareGreaterEq         ; $89 >=
>1031	11 12					.word	CompareLessEq            ; $8a <=
>1033	f3 11					.word	CompareGreater           ; $8b >
>1035	e9 11					.word	CompareLess              ; $8c <
>1037	df 11					.word	CompareEquals            ; $8d =
>1039	fd 11					.word	CompareNotEquals         ; $8e <>
>103b	0e 11					.word	AddHandler               ; $8f +
>103d	31 11					.word	SubHandler               ; $90 -
>103f	15 10					.word	Unimplemented            ; $91 >>
>1041	15 10					.word	Unimplemented            ; $92 <<
>1043	44 11					.word	MulHandler               ; $93 *
>1045	57 11					.word	DivHandler               ; $94 /
>1047	6a 11					.word	ModHandler               ; $95 mod
>1049	15 10					.word	Unimplemented            ; $96 ^
>104b	15 10					.word	Unimplemented            ; $97 !
>104d	15 10					.word	Unimplemented            ; $98 ?
>104f	15 10					.word	Unimplemented            ; $99 repeat
>1051	15 10					.word	Unimplemented            ; $9a while
>1053	15 10					.word	Unimplemented            ; $9b for
>1055	15 10					.word	Unimplemented            ; $9c if
>1057	15 10					.word	Unimplemented            ; $9d until
>1059	15 10					.word	Unimplemented            ; $9e wend
>105b	15 10					.word	Unimplemented            ; $9f next
>105d	15 10					.word	Unimplemented            ; $a0 then
>105f	15 10					.word	Unimplemented            ; $a1 endif
>1061	15 10					.word	Unimplemented            ; $a2 ~
>1063	15 10					.word	Unimplemented            ; $a3 (
>1065	15 10					.word	Unimplemented            ; $a4 &
>1067	15 10					.word	Unimplemented            ; $a5 @
>1069	15 10					.word	Unimplemented            ; $a6 len(
>106b	15 10					.word	Unimplemented            ; $a7 sgn(
>106d	15 10					.word	Unimplemented            ; $a8 abs(
>106f	15 10					.word	Unimplemented            ; $a9 random(
>1071	15 10					.word	Unimplemented            ; $aa page
>1073	15 10					.word	Unimplemented            ; $ab true
>1075	15 10					.word	Unimplemented            ; $ac false
>1077	15 10					.word	Unimplemented            ; $ad min(
>1079	15 10					.word	Unimplemented            ; $ae max(
>107b	15 10					.word	Unimplemented            ; $af sys(
>107d	15 10					.word	Unimplemented            ; $b0 timer(
>107f	15 10					.word	Unimplemented            ; $b1 event(
>1081	15 10					.word	Unimplemented            ; $b2 get(
>1083	15 10					.word	Unimplemented            ; $b3 inkey(
>1085	15 10					.word	Unimplemented            ; $b4 alloc(
>1087	15 10					.word	Unimplemented            ; $b5 chr$(
>1089	15 10					.word	Unimplemented            ; $b6 left$(
>108b	15 10					.word	Unimplemented            ; $b7 mid$(
>108d	15 10					.word	Unimplemented            ; $b8 right$(
>108f	15 10					.word	Unimplemented            ; $b9 str$(
>1091	15 10					.word	Unimplemented            ; $ba val(
>1093	15 10					.word	Unimplemented            ; $bb peek(
>1095	15 10					.word	Unimplemented            ; $bc deek(
>1097	15 10					.word	Unimplemented            ; $bd leek(
>1099	15 10					.word	Unimplemented            ; $be int(
>109b	15 10					.word	Unimplemented            ; $bf float(
>109d	15 10					.word	Unimplemented            ; $c0 )
>109f	15 10					.word	Unimplemented            ; $c1 :
>10a1	15 10					.word	Unimplemented            ; $c2 ,
>10a3	15 10					.word	Unimplemented            ; $c3 ;
>10a5	15 10					.word	Unimplemented            ; $c4 ]
>10a7	15 10					.word	Unimplemented            ; $c5 to
>10a9	15 10					.word	Unimplemented            ; $c6 step
>10ab	15 10					.word	Unimplemented            ; $c7 proc
>10ad	15 10					.word	Unimplemented            ; $c8 endproc
>10af	15 10					.word	Unimplemented            ; $c9 local
>10b1	15 10					.word	Unimplemented            ; $ca rem
>10b3	15 10					.word	Unimplemented            ; $cb let
>10b5	15 10					.word	Unimplemented            ; $cc '
>10b7	15 10					.word	Unimplemented            ; $cd [
>10b9	15 10					.word	Unimplemented            ; $ce input
>10bb	15 10					.word	Unimplemented            ; $cf else
>10bd	15 10					.word	Unimplemented            ; $d0 vdu
>10bf	15 10					.word	Unimplemented            ; $d1 read
>10c1	15 10					.word	Unimplemented            ; $d2 data
>10c3	15 10					.word	Unimplemented            ; $d3 restore
>10c5	15 10					.word	Unimplemented            ; $d4 print
>10c7	15 10					.word	Unimplemented            ; $d5 goto
>10c9	15 10					.word	Unimplemented            ; $d6 gosub
>10cb	15 10					.word	Unimplemented            ; $d7 return
>10cd	15 10					.word	Unimplemented            ; $d8 assert
>10cf	15 10					.word	Unimplemented            ; $d9 stop
>10d1	15 10					.word	Unimplemented            ; $da end
>10d3	15 10					.word	Unimplemented            ; $db dim
>10d5	15 10					.word	Unimplemented            ; $dc poke
>10d7	15 10					.word	Unimplemented            ; $dd doke
>10d9	15 10					.word	Unimplemented            ; $de loke

;******  Return to file: ..\source\main/00start.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/binary.asm

.10e2					BinaryProcess:
.10e2	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.10e4	15 41		ora $41,x			ora 	esType+1,x
.10e6	0a		asl a				asl 	a
.10e7	30 0e		bmi $10f7			bmi 	_BPStringType 				; if one is set, then string type.
.10e9	18		clc				clc 								; return CC for integer
.10ea	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.10ec	f0 08		beq $10f6			beq 	_BPExit 					; if both integer then return with CC.
.10ee	20 fc 10	jsr $10fc			jsr 	BPMakeBothFloat 			; make both float
.10f1	a9 01		lda #$01			lda 	#$01 						; set result type to float
.10f3	95 40		sta $40,x			sta 	esType,x
.10f5	38		sec				sec 								; and return with carry set.
.10f6					_BPExit:
.10f6	60		rts				rts
.10f7					_BPStringType:
.10f7	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.10f9	20 db 10	jsr $10db			jsr 	ErrorHandler
.10fc					BPMakeBothFloat:
.10fc	e8		inx				inx
.10fd	20 01 11	jsr $1101			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1100	ca		dex				dex
.1101					BPMakeFloat:
.1101	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1103	4a		lsr a				lsr 	a
.1104	b0 07		bcs $110d			bcs 	_BPIsFloat
.1106	8a		txa				txa
.1107	a2 10		ldx #$10		ldx	#16
.1109	20 24 16	jsr $1624		jsr	floatingpointHandler
.110c	aa		tax				tax
.110d					_BPIsFloat:
.110d	60		rts				rts
.110e					AddHandler:
.110e	20 21 12	jsr $1221			jsr 	DereferenceTwo 				; dereference top two on stack.
.1111	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1113	35 41		and $41,x			and 	esType+1,x
.1115	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1117	d0 10		bne $1129			bne 	_AHStringConcat				; concatenate strings.
.1119	20 e2 10	jsr $10e2			jsr 	BinaryProcess 				; check to see if either is float
.111c	b0 03		bcs $1121			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.111e	4c 84 14	jmp $1484			jmp 	MInt32Add 							; else do it as integer.
.1121					_IsFPOperation:
.1121	8a		txa				txa 								; call the relevant fp routine
.1122	a2 00		ldx #$00		ldx	#0
.1124	20 24 16	jsr $1624		jsr	floatingpointHandler
.1127	aa		tax				tax
.1128	60		rts				rts
.1129					_AHStringConcat:
.1129	8a		txa				txa
.112a	a2 00		ldx #$00		ldx	#0
.112c	20 43 16	jsr $1643		jsr	stringHandler
.112f	aa		tax				tax
.1130	60		rts				rts
.1131					SubHandler:
.1131	20 21 12	jsr $1221			jsr 	DereferenceTwo
.1134	20 e2 10	jsr $10e2			jsr 	BinaryProcess 				; check to see if either is float
.1137	b0 03		bcs $113c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1139	4c 9e 14	jmp $149e			jmp 	MInt32Sub 							; else do it as integer.
.113c					_IsFPOperation:
.113c	8a		txa				txa 								; call the relevant fp routine
.113d	a2 0a		ldx #$0a		ldx	#10
.113f	20 24 16	jsr $1624		jsr	floatingpointHandler
.1142	aa		tax				tax
.1143	60		rts				rts
.1144					MulHandler:
.1144	20 21 12	jsr $1221			jsr 	DereferenceTwo
.1147	20 e2 10	jsr $10e2			jsr 	BinaryProcess 				; check to see if either is float
.114a	b0 03		bcs $114f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.114c	4c b8 14	jmp $14b8			jmp 	MInt32Multiply 							; else do it as integer.
.114f					_IsFPOperation:
.114f	8a		txa				txa 								; call the relevant fp routine
.1150	a2 08		ldx #$08		ldx	#8
.1152	20 24 16	jsr $1624		jsr	floatingpointHandler
.1155	aa		tax				tax
.1156	60		rts				rts
.1157					DivHandler:
.1157	20 21 12	jsr $1221			jsr 	DereferenceTwo
.115a	20 e2 10	jsr $10e2			jsr 	BinaryProcess 				; check to see if either is float
.115d	b0 03		bcs $1162			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.115f	4c 92 13	jmp $1392			jmp 	MInt32SDivide 							; else do it as integer.
.1162					_IsFPOperation:
.1162	8a		txa				txa 								; call the relevant fp routine
.1163	a2 04		ldx #$04		ldx	#4
.1165	20 24 16	jsr $1624		jsr	floatingpointHandler
.1168	aa		tax				tax
.1169	60		rts				rts
.116a					ModHandler:
.116a	20 21 12	jsr $1221			jsr 	DereferenceTwo
.116d	20 e2 10	jsr $10e2			jsr 	BinaryProcess 				; check to see if either is float
.1170	b0 03		bcs $1175			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1172	4c 10 14	jmp $1410			jmp 	MInt32Modulus 							; else do it as integer.
.1175					_IsFPOperation:
.1175	8a		txa				txa 								; call the relevant fp routine
.1176	a2 06		ldx #$06		ldx	#6
.1178	20 24 16	jsr $1624		jsr	floatingpointHandler
.117b	aa		tax				tax
.117c	60		rts				rts
.117d					XorHandler:
.117d	20 21 12	jsr $1221			jsr 	DereferenceTwo
.1180	20 e2 10	jsr $10e2			jsr 	BinaryProcess 				; check to see if either is float
.1183	b0 03		bcs $1188			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1185	4c 44 13	jmp $1344			jmp 	MInt32Xor 							; else do it as integer.
.1188					_IsFPOperation:
.1188	8a		txa				txa 								; call the relevant fp routine
.1189	a2 06		ldx #$06		ldx	#6
.118b	20 24 16	jsr $1624		jsr	floatingpointHandler
.118e	aa		tax				tax
.118f	60		rts				rts
.1190					OrHandler:
.1190	20 21 12	jsr $1221			jsr 	DereferenceTwo
.1193	20 e2 10	jsr $10e2			jsr 	BinaryProcess 				; check to see if either is float
.1196	b0 03		bcs $119b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1198	4c 2b 13	jmp $132b			jmp 	MInt32Or 							; else do it as integer.
.119b					_IsFPOperation:
.119b	8a		txa				txa 								; call the relevant fp routine
.119c	a2 06		ldx #$06		ldx	#6
.119e	20 24 16	jsr $1624		jsr	floatingpointHandler
.11a1	aa		tax				tax
.11a2	60		rts				rts
.11a3					AndHandler:
.11a3	20 21 12	jsr $1221			jsr 	DereferenceTwo
.11a6	20 e2 10	jsr $10e2			jsr 	BinaryProcess 				; check to see if either is float
.11a9	b0 03		bcs $11ae			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11ab	4c 12 13	jmp $1312			jmp 	MInt32And 							; else do it as integer.
.11ae					_IsFPOperation:
.11ae	8a		txa				txa 								; call the relevant fp routine
.11af	a2 06		ldx #$06		ldx	#6
.11b1	20 24 16	jsr $1624		jsr	floatingpointHandler
.11b4	aa		tax				tax
.11b5	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/compare.asm

.11b6					PerformComparison:
.11b6	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.11b8	35 41		and $41,x			and 	esType+1,x
.11ba	0a		asl a				asl 	a
.11bb	30 17		bmi $11d4			bmi 	_PCIsString
.11bd	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.11bf	15 41		ora $41,x			ora 	esType+1,x
.11c1	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.11c2	30 16		bmi $11da			bmi 	_PCError
.11c4	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.11c6	f0 09		beq $11d1			beq 	_PCIsInteger 				; if not two integers
.11c8	20 fc 10	jsr $10fc			jsr 	BPMakeBothFloat 			; make both float
.11cb	a2 02		ldx #$02		ldx	#2
.11cd	20 24 16	jsr $1624		jsr	floatingpointHandler
.11d0	60		rts				rts
.11d1					_PCIsInteger:
.11d1	4c 5d 13	jmp $135d			jmp 	MInt32Compare
.11d4					_PCIsString:
.11d4	a2 02		ldx #$02		ldx	#2
.11d6	20 43 16	jsr $1643		jsr	stringHandler
.11d9	60		rts				rts
.11da					_PCError:
.11da	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.11dc	20 db 10	jsr $10db			jsr 	ErrorHandler
.11df					CompareEquals:
.11df	20 b6 11	jsr $11b6			jsr 	PerformComparison
.11e2	c9 00		cmp #$00			cmp 	#$00
.11e4	f0 35		beq $121b			beq  	CompareTrue
.11e6	4c 1e 12	jmp $121e			jmp 	CompareFalse
.11e9					CompareLess:
.11e9	20 b6 11	jsr $11b6			jsr 	PerformComparison
.11ec	c9 ff		cmp #$ff			cmp 	#$FF
.11ee	f0 2b		beq $121b			beq  	CompareTrue
.11f0	4c 1e 12	jmp $121e			jmp 	CompareFalse
.11f3					CompareGreater:
.11f3	20 b6 11	jsr $11b6			jsr 	PerformComparison
.11f6	c9 01		cmp #$01			cmp 	#$01
.11f8	f0 21		beq $121b			beq  	CompareTrue
.11fa	4c 1e 12	jmp $121e			jmp 	CompareFalse
.11fd					CompareNotEquals:
.11fd	20 b6 11	jsr $11b6			jsr 	PerformComparison
.1200	c9 00		cmp #$00			cmp 	#$00
.1202	d0 17		bne $121b			bne  	CompareTrue
.1204	4c 1e 12	jmp $121e			jmp 	CompareFalse
.1207					CompareGreaterEq:
.1207	20 b6 11	jsr $11b6			jsr 	PerformComparison
.120a	c9 ff		cmp #$ff			cmp 	#$FF
.120c	d0 0d		bne $121b			bne  	CompareTrue
.120e	4c 1e 12	jmp $121e			jmp 	CompareFalse
.1211					CompareLessEq:
.1211	20 b6 11	jsr $11b6			jsr 	PerformComparison
.1214	c9 01		cmp #$01			cmp 	#$01
.1216	d0 03		bne $121b			bne  	CompareTrue
.1218	4c 1e 12	jmp $121e			jmp 	CompareFalse
.121b					CompareTrue:
.121b	4c 8e 15	jmp $158e			jmp 	MInt32True
.121e					CompareFalse:
.121e	4c 92 15	jmp $1592			jmp 	MInt32False

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/dereference.asm

.1221					DereferenceTwo:
.1221	e8		inx				inx
.1222	20 26 12	jsr $1226			jsr 	DereferenceOne
.1225	ca		dex				dex
.1226					DereferenceOne:
.1226	b5 40		lda $40,x			lda 	esType,x
.1228	10 01		bpl $122b			bpl 	_DRNotReference 			; is it a reference ?
>122a	db						.byte 	$DB
.122b					_DRNotReference
.122b	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/evaluate.asm

.122c					EvaluateLevel:
.122c	48		pha				pha 								; save precedence level.
.122d	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.122f	95 48		sta $48,x			sta 	esInt0,x
.1231	95 50		sta $50,x			sta 	esInt1,x
.1233	95 58		sta $58,x			sta 	esInt2,x
.1235	95 60		sta $60,x			sta 	esInt3,x
.1237	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.1239	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.123b	30 21		bmi $125e			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.123d	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.123e	30 0a		bmi $124a			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1240	8a		txa				txa 								; stack level in X
.1241	a2 00		ldx #$00		ldx	#0
.1243	20 50 16	jsr $1650		jsr	variableHandler
.1246	aa		tax				tax
.1247	4c 87 12	jmp $1287			jmp		_ELHasTerm
.124a					_ELIsConstant:
.124a	4a		lsr a				lsr 	a 							; get the value back
.124b	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.124d	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.124f					_ELCheckNext:
.124f	c8		iny				iny 								; look at next
.1250	b1 02		lda ($02),y			lda 	(codePtr),y
.1252	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.1254	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1256	b0 2f		bcs $1287			bcs 	_ELHasTerm 					; done getting the constant.
.1258	20 c8 12	jsr $12c8			jsr 	ELShiftByteIn 				; shift byte into position.
.125b	4c 4f 12	jmp $124f			jmp 	_ELCheckNext
.125e					_ELIsToken:
.125e	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.1260	f0 0f		beq $1271			beq 	_ELIsString
.1262	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.1264	d0 5f		bne $12c5			bne 	_ELCheckUnary
.1266	8a		txa				txa 								; put X into A
.1267	c8		iny				iny 								; skip over the float marker
.1268	a2 0e		ldx #$0e		ldx	#14
.126a	20 24 16	jsr $1624		jsr	floatingpointHandler
.126d	aa		tax				tax 								; restore X
.126e	4c 87 12	jmp $1287			jmp 	_ELHasTerm
.1271					_ELIsString:
.1271	98		tya				tya 								; address of string is codePtr+y+1
.1272	38		sec				sec
.1273	65 02		adc $02				adc 	codePtr
.1275	95 48		sta $48,x			sta 	esInt0,x
.1277	a5 03		lda $03				lda 	codePtr+1
.1279	69 00		adc #$00			adc 	#0
.127b	95 50		sta $50,x			sta 	esInt1,x
.127d	a9 40		lda #$40			lda 	#$40 						; set type to string value
.127f	95 40		sta $40,x			sta 	esType,x
.1281	c8		iny				iny 								; skip over string.
.1282	98		tya				tya
.1283	38		sec				sec									; +1 for the length itself.
.1284	71 02		adc ($02),y			adc 	(codePtr),y
.1286	a8		tay				tay 								; and fall through to term loop code.
.1287					_ELHasTerm:
.1287	b1 02		lda ($02),y			lda 	(codePtr),y
.1289	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.128b	90 04		bcc $1291			bcc 	_ELPopExit
.128d	c9 9d		cmp #$9d			cmp 	#TOK_STRUCTST
.128f	90 02		bcc $1293			bcc 	_ELHasBinaryTerm
.1291					_ELPopExit:
.1291	68		pla				pla
.1292					_ELExit:
.1292	60		rts				rts
.1293					_ELHasBinaryTerm:
.1293	84 0a		sty $0a				sty 	tempShort 					; save position
.1295	a8		tay				tay 								; use token as an index and get the precedence.
.1296	b9 70 12	lda $1270,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1299	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.129b	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.129d	68		pla				pla 								; restore current level.
.129e	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.12a0	b0 f0		bcs $1292			bcs 	_ELExit
.12a2	48		pha				pha 								; save current level back on the stack.
.12a3	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.12a5	48		pha				pha
.12a6	c8		iny				iny
.12a7	e8		inx				inx 								; calculate the RHS at the operator precedence.
.12a8	a5 0a		lda $0a				lda 	tempShort
.12aa	20 2c 12	jsr $122c			jsr 	EvaluateLevel
.12ad	ca		dex				dex
.12ae	68		pla				pla 								; get the operator back out.
.12af	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.12b1	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.12b2	aa		tax				tax
.12b3	bd 1d 10	lda $101d,x			lda 	Group0Vectors,x
.12b6	85 04		sta $04				sta 	temp0
.12b8	bd 1e 10	lda $101e,x			lda 	Group0Vectors+1,x
.12bb	85 05		sta $05				sta 	temp0+1
.12bd	a6 0a		ldx $0a				ldx 	tempShort
.12bf	20 c5 12	jsr $12c5			jsr 	_ELCallTemp0
.12c2	4c 87 12	jmp $1287			jmp 	_ELHasTerm 					; and loop back round.
.12c5					_ELCheckUnary:
.12c5					_ELCallTemp0:
.12c5	6c 04 00	jmp ($0004)			jmp 	(temp0)
.12c8					ELShiftByteIn:
.12c8	48		pha				pha 								; save bits to shift in.
.12c9	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.12cb	48		pha				pha
.12cc	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.12ce	95 60		sta $60,x			sta 	esInt3,x
.12d0	b5 50		lda $50,x			lda 	esInt1,x
.12d2	95 58		sta $58,x			sta 	esInt2,x
.12d4	b5 48		lda $48,x			lda 	esInt0,x
.12d6	95 50		sta $50,x			sta 	esInt1,x
.12d8	a9 00		lda #$00			lda 	#0
.12da	95 48		sta $48,x			sta 	esInt0,x
.12dc	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.12dd	29 03		and #$03			and 	#3 							; only want lower 2 bits
.12df	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.12e1					_ELShiftLoop:
.12e1	4a		lsr a				lsr 	a
.12e2	76 60		ror $60,x			ror 	esInt3,x
.12e4	76 58		ror $58,x			ror 	esInt2,x
.12e6	76 50		ror $50,x			ror 	esInt1,x
.12e8	76 48		ror $48,x			ror 	esInt0,x
.12ea	c9 01		cmp #$01			cmp 	#1
.12ec	d0 f3		bne $12e1			bne 	_ELShiftLoop
.12ee	68		pla				pla 								; get original 6 bit value and OR in.
.12ef	29 3f		and #$3f			and 	#$3F
.12f1	15 48		ora $48,x			ora 	esInt0,x
.12f3	95 48		sta $48,x			sta 	esInt0,x
.12f5	60		rts				rts
.12f6					ELBinaryOperatorInfo:

;******  Processing file: ..\source\main/evaluate/../../generated/binarystructinfo.inc

>12f6	01					.byte	$01			; $86 and
>12f7	01					.byte	$01			; $87 or
>12f8	01					.byte	$01			; $88 xor
>12f9	02					.byte	$02			; $89 >=
>12fa	02					.byte	$02			; $8a <=
>12fb	02					.byte	$02			; $8b >
>12fc	02					.byte	$02			; $8c <
>12fd	02					.byte	$02			; $8d =
>12fe	02					.byte	$02			; $8e <>
>12ff	03					.byte	$03			; $8f +
>1300	03					.byte	$03			; $90 -
>1301	04					.byte	$04			; $91 >>
>1302	04					.byte	$04			; $92 <<
>1303	04					.byte	$04			; $93 *
>1304	04					.byte	$04			; $94 /
>1305	04					.byte	$04			; $95 mod
>1306	05					.byte	$05			; $96 ^
>1307	06					.byte	$06			; $97 !
>1308	06					.byte	$06			; $98 ?
>1309	82					.byte	$82			; $99 repeat
>130a	82					.byte	$82			; $9a while
>130b	82					.byte	$82			; $9b for
>130c	82					.byte	$82			; $9c if
>130d	80					.byte	$80			; $9d until
>130e	80					.byte	$80			; $9e wend
>130f	80					.byte	$80			; $9f next
>1310	80					.byte	$80			; $a0 then
>1311	80					.byte	$80			; $a1 endif

;******  Return to file: ..\source\main/evaluate/evaluate.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32binary.asm

.1312					MInt32And:
.1312	b5 48		lda $48,x			lda 	esInt0,x
.1314	35 49		and $49,x			and 	esInt0+1,x
.1316	95 48		sta $48,x			sta 	esInt0,x
.1318	b5 50		lda $50,x			lda 	esInt1,x
.131a	35 51		and $51,x			and 	esInt1+1,x
.131c	95 50		sta $50,x			sta 	esInt1,x
.131e	b5 58		lda $58,x			lda 	esInt2,x
.1320	35 59		and $59,x			and 	esInt2+1,x
.1322	95 58		sta $58,x			sta 	esInt2,x
.1324	b5 60		lda $60,x			lda 	esInt3,x
.1326	35 61		and $61,x			and 	esInt3+1,x
.1328	95 60		sta $60,x			sta 	esInt3,x
.132a	60		rts				rts
.132b					MInt32Or:
.132b	b5 48		lda $48,x			lda 	esInt0,x
.132d	15 49		ora $49,x			ora 	esInt0+1,x
.132f	95 48		sta $48,x			sta 	esInt0,x
.1331	b5 50		lda $50,x			lda 	esInt1,x
.1333	15 51		ora $51,x			ora 	esInt1+1,x
.1335	95 50		sta $50,x			sta 	esInt1,x
.1337	b5 58		lda $58,x			lda 	esInt2,x
.1339	15 59		ora $59,x			ora 	esInt2+1,x
.133b	95 58		sta $58,x			sta 	esInt2,x
.133d	b5 60		lda $60,x			lda 	esInt3,x
.133f	15 61		ora $61,x			ora 	esInt3+1,x
.1341	95 60		sta $60,x			sta 	esInt3,x
.1343	60		rts				rts
.1344					MInt32Xor:
.1344	b5 48		lda $48,x			lda 	esInt0,x
.1346	55 49		eor $49,x			eor 	esInt0+1,x
.1348	95 48		sta $48,x			sta 	esInt0,x
.134a	b5 50		lda $50,x			lda 	esInt1,x
.134c	55 51		eor $51,x			eor 	esInt1+1,x
.134e	95 50		sta $50,x			sta 	esInt1,x
.1350	b5 58		lda $58,x			lda 	esInt2,x
.1352	55 59		eor $59,x			eor 	esInt2+1,x
.1354	95 58		sta $58,x			sta 	esInt2,x
.1356	b5 60		lda $60,x			lda 	esInt3,x
.1358	55 61		eor $61,x			eor 	esInt3+1,x
.135a	95 60		sta $60,x			sta 	esInt3,x
.135c	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32compare.asm

.135d					MInt32Compare:
.135d	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.135f	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1361	d0 13		bne $1376			bne 	MInt32Compare2
.1363	b5 50		lda $50,x			lda 	esInt1,x
.1365	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1367	d0 0d		bne $1376			bne 	MInt32Compare2
.1369	b5 58		lda $58,x			lda 	esInt2,x
.136b	d5 59		cmp $59,x			cmp 	esInt2+1,x
.136d	d0 07		bne $1376			bne 	MInt32Compare2
.136f	b5 60		lda $60,x			lda 	esInt3,x
.1371	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1373	d0 01		bne $1376			bne 	MInt32Compare2
.1375	60		rts				rts
.1376					MInt32Compare2:
.1376	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1378	d5 49		cmp $49,x			cmp 	esInt0+1,x
.137a	b5 50		lda $50,x			lda		esInt1,x
.137c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.137e	b5 58		lda $58,x			lda		esInt2,x
.1380	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1382	b5 60		lda $60,x			lda		esInt3,x
.1384	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1386	50 02		bvc $138a			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1388	49 80		eor #$80			eor 	#$80
.138a					_I32LNoOverflow
.138a	30 03		bmi $138f			bmi 	MInt32CLess					; if -ve then return $FF
.138c	a9 01		lda #$01			lda 	#$01						; else return $01
.138e	60		rts				rts
.138f					MInt32CLess:
.138f	a9 ff		lda #$ff			lda 	#$FF
.1391	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32divide.asm

.1392					MInt32SDivide:
.1392	98		tya				tya  								; save Y, which is the count of negations
.1393	48		pha				pha
.1394	a0 00		ldy #$00			ldy 	#0 							; zero count
.1396	20 ae 13	jsr $13ae			jsr 	_MInt32SRemSign 			; unsign TOS
.1399	e8		inx				inx 								; unsign TOS+1
.139a	20 ae 13	jsr $13ae			jsr 	_MInt32SRemSign
.139d	ca		dex				dex
.139e	98		tya				tya 								; save sign count on stack
.139f	48		pha				pha
.13a0	20 b7 13	jsr $13b7			jsr 	MInt32UDivide 				; unsigned division
.13a3	68		pla				pla 								; get sign count back
.13a4	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.13a6	f0 03		beq $13ab			beq 	_I32SNoNeg
.13a8	20 4c 15	jsr $154c			jsr 	MInt32Negate
.13ab					_I32SNoNeg:
.13ab	68		pla				pla 								; restoe Y and exit
.13ac	a8		tay				tay
.13ad	60		rts				rts
.13ae					_MInt32SRemSign:
.13ae	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.13b0	10 04		bpl $13b6			bpl 	_MInt32SRSExit
.13b2	c8		iny				iny 								; increment the sign count
.13b3	20 4c 15	jsr $154c			jsr 	MInt32Negate 				; negate the value.
.13b6					_MInt32SRSExit:
.13b6	60		rts				rts
.13b7					MInt32UDivide:
.13b7	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.13b9	15 51		ora $51,x			ora 	esInt1+1,x
.13bb	15 52		ora $52,x			ora 	esInt1+2,x
.13bd	15 53		ora $53,x			ora 	esInt1+3,x
.13bf	f0 4a		beq $140b			beq 	_MInt32DZero
.13c1	e8		inx				inx 								; clear A
.13c2	e8		inx				inx
.13c3	20 92 15	jsr $1592			jsr 	MInt32False
.13c6	ca		dex				dex
.13c7	ca		dex				dex
.13c8	98		tya				tya 								; save Y on the stack
.13c9	48		pha				pha
.13ca	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.13cc					_MInt32UDLoop:
.13cc	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.13ce	36 50		rol $50,x			rol 	esInt1,x
.13d0	36 58		rol $58,x			rol 	esInt2,x
.13d2	36 60		rol $60,x			rol 	esInt3,x
.13d4	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.13d6	36 52		rol $52,x			rol 	esInt1+2,x
.13d8	36 5a		rol $5a,x			rol 	esInt2+2,x
.13da	36 62		rol $62,x			rol 	esInt3+2,x
.13dc	38		sec				sec 								; calculate A-M saving result on the stack
.13dd	b5 4a		lda $4a,x			lda 	esInt0+2,x
.13df	f5 49		sbc $49,x			sbc 	esInt0+1,x
.13e1	48		pha				pha
.13e2	b5 52		lda $52,x			lda 	esInt1+2,x
.13e4	f5 51		sbc $51,x			sbc 	esInt1+1,x
.13e6	48		pha				pha
.13e7	b5 5a		lda $5a,x			lda 	esInt2+2,x
.13e9	f5 59		sbc $59,x			sbc 	esInt2+1,x
.13eb	48		pha				pha
.13ec	b5 62		lda $62,x			lda 	esInt3+2,x
.13ee	f5 61		sbc $61,x			sbc 	esInt3+1,x
.13f0	90 10		bcc $1402			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.13f2	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.13f4	68		pla				pla
.13f5	95 5a		sta $5a,x			sta 	esInt2+2,x
.13f7	68		pla				pla
.13f8	95 52		sta $52,x			sta 	esInt1+2,x
.13fa	68		pla				pla
.13fb	95 4a		sta $4a,x			sta 	esInt0+2,x
.13fd	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.13ff	4c 05 14	jmp $1405			jmp 	_MInt32Next 					; do the next iteration
.1402					_MInt32NoSubtract:
.1402	68		pla				pla
.1403	68		pla				pla
.1404	68		pla				pla
.1405					_MInt32Next:
.1405	88		dey				dey 								; do this 32 times.
.1406	d0 c4		bne $13cc			bne 	_MInt32UDLoop
.1408	68		pla				pla 								; restore Y and exit
.1409	a8		tay				tay
.140a	60		rts				rts
.140b					_MInt32DZero:
.140b	a2 02		ldx #$02			ldx 	#ErrorID_DivZero
.140d	20 db 10	jsr $10db			jsr 	ErrorHandler
.1410					MInt32Modulus:
.1410	20 b7 13	jsr $13b7			jsr 	MInt32UDivide 				; do the division.
.1413	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1415	95 60		sta $60,x			sta 	esInt3,x
.1417	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1419	95 58		sta $58,x			sta 	esInt2,x
.141b	b5 52		lda $52,x			lda 	esInt1+2,x
.141d	95 50		sta $50,x			sta 	esInt1,x
.141f	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1421	95 48		sta $48,x			sta 	esInt0,x
.1423	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32fromstr.asm

.1424					MInt32FromString:
.1424	85 0a		sta $0a				sta 	tempShort 					; save base
.1426	98		tya				tya
.1427	48		pha				pha
.1428	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.142a	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.142c	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.142e	d0 01		bne $1431			bne 	_I32FSNotNegative
.1430	c8		iny				iny 								; if so consume it.
.1431					_I32FSNotNegative:
.1431	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1433	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1435	f0 02		beq $1439			beq 	_I32FSNN2
.1437	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1439					_I32FSNN2:
.1439	48		pha				pha 								; save base + final sign on stack.
.143a	20 92 15	jsr $1592			jsr 	MInt32False 					; zero the return value.
.143d					I32FSMainLoop:
.143d	68		pla				pla 								; get the base back into tempshort
.143e	48		pha				pha
.143f	29 7f		and #$7f			and 	#$7F
.1441	85 0a		sta $0a				sta 	tempShort
.1443	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1445	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1447	90 02		bcc $144b			bcc 	_I32FSNotLC
.1449	e9 20		sbc #$20			sbc 	#32
.144b					_I32FSNotLC:
.144b	38		sec				sec 								; subtract 48 (ASCII "0")
.144c	e9 30		sbc #$30			sbc 	#"0"
.144e	90 26		bcc $1476			bcc 	_I32FSDone 					; nothing more to do.
.1450	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1452	90 06		bcc $145a			bcc 	_I32FSValidate
.1454	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1456	90 1e		bcc $1476			bcc 	_I32FSDone
.1458	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.145a					_I32FSValidate:
.145a	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.145c	b0 18		bcs $1476			bcs 	_I32FSDone 					; sorry, too large for this base.
.145e	48		pha				pha 								; save the new digit value.
.145f	e8		inx				inx 								; put base into next slot.
.1460	a5 0a		lda $0a				lda 	tempShort
.1462	20 a1 15	jsr $15a1			jsr 	MInt32Set8Bit
.1465	ca		dex				dex
.1466	20 b8 14	jsr $14b8			jsr 	MInt32Multiply 				; multiply current by the base
.1469	e8		inx				inx
.146a	68		pla				pla  								; put additive into next slot
.146b	20 a1 15	jsr $15a1			jsr 	MInt32Set8Bit
.146e	ca		dex				dex
.146f	20 84 14	jsr $1484			jsr 	MInt32Add 					; and add it
.1472	c8		iny				iny 								; look at next character
.1473	4c 3d 14	jmp $143d			jmp 	I32FSMainLoop 				; and go round again.
.1476					_I32FSDone:
.1476	68		pla				pla 								; get base/final sign back
.1477	10 04		bpl $147d			bpl 	_I32FSNN3
.1479	88		dey				dey 								; one fewer character to allow for the - prefix.
.147a	20 4c 15	jsr $154c			jsr 	MInt32Negate 				; negate the result.
.147d					_I32FSNN3:
.147d	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.147f	68		pla				pla
.1480	a8		tay				tay
.1481	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1483	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32math.asm

.1484					MInt32Add:
.1484	18		clc				clc
.1485	b5 48		lda $48,x			lda 	esInt0,x
.1487	75 49		adc $49,x			adc 	esInt0+1,x
.1489	95 48		sta $48,x			sta 	esInt0,x
.148b	b5 50		lda $50,x			lda 	esInt1,x
.148d	75 51		adc $51,x			adc 	esInt1+1,x
.148f	95 50		sta $50,x			sta 	esInt1,x
.1491	b5 58		lda $58,x			lda 	esInt2,x
.1493	75 59		adc $59,x			adc 	esInt2+1,x
.1495	95 58		sta $58,x			sta 	esInt2,x
.1497	b5 60		lda $60,x			lda 	esInt3,x
.1499	75 61		adc $61,x			adc 	esInt3+1,x
.149b	95 60		sta $60,x			sta 	esInt3,x
.149d	60		rts				rts
.149e					MInt32Sub:
.149e	38		sec				sec
.149f	b5 48		lda $48,x			lda 	esInt0,x
.14a1	f5 49		sbc $49,x			sbc 	esInt0+1,x
.14a3	95 48		sta $48,x			sta 	esInt0,x
.14a5	b5 50		lda $50,x			lda 	esInt1,x
.14a7	f5 51		sbc $51,x			sbc 	esInt1+1,x
.14a9	95 50		sta $50,x			sta 	esInt1,x
.14ab	b5 58		lda $58,x			lda 	esInt2,x
.14ad	f5 59		sbc $59,x			sbc 	esInt2+1,x
.14af	95 58		sta $58,x			sta 	esInt2,x
.14b1	b5 60		lda $60,x			lda 	esInt3,x
.14b3	f5 61		sbc $61,x			sbc 	esInt3+1,x
.14b5	95 60		sta $60,x			sta 	esInt3,x
.14b7	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32multiply.asm

.14b8					MInt32Multiply:
.14b8	e8		inx				inx 								; copy 2nd -> 3rd
.14b9	20 de 14	jsr $14de			jsr 	MInt32CopyUp
.14bc	ca		dex				dex
.14bd	20 de 14	jsr $14de			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.14c0	20 92 15	jsr $1592			jsr 	MInt32False 					; zero 1st.
.14c3					_I32Loop:
.14c3	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.14c5	29 01		and #$01			and 	#1
.14c7	f0 03		beq $14cc			beq 	_I32NoAdd 					; if set
.14c9	20 84 14	jsr $1484			jsr 	MInt32Add 					; add 2nd to 1st.
.14cc					_I32NoAdd:
.14cc	e8		inx				inx 								; shift 2nd left
.14cd	20 a7 15	jsr $15a7			jsr 	MInt32ShiftLeft
.14d0	e8		inx				inx  								; shift 3rd right
.14d1	20 b0 15	jsr $15b0			jsr 	MInt32ShiftRight
.14d4	20 b9 15	jsr $15b9			jsr 	MInt32Zero 					; check if zero.
.14d7	08		php				php 								; save status bits
.14d8	ca		dex				dex 	 							; point back to 1st
.14d9	ca		dex				dex
.14da	28		plp				plp 								; get status bits
.14db	d0 e6		bne $14c3			bne 	_I32Loop 					; if non-zero keep going.
.14dd	60		rts				rts
.14de					MInt32CopyUp:
.14de	b5 48		lda $48,x			lda 	esInt0,x
.14e0	95 49		sta $49,x			sta 	esInt0+1,x
.14e2	b5 50		lda $50,x			lda 	esInt1,x
.14e4	95 51		sta $51,x			sta 	esInt1+1,x
.14e6	b5 58		lda $58,x			lda 	esInt2,x
.14e8	95 59		sta $59,x			sta 	esInt2+1,x
.14ea	b5 60		lda $60,x			lda 	esInt3,x
.14ec	95 61		sta $61,x			sta 	esInt3+1,x
.14ee	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32tostr.asm

>0800					MCharCount:	.fill 	1						; count of converted characters
.14ef					MInt32ToString:
.14ef	48		pha				pha 								; save base
.14f0	85 0a		sta $0a				sta 	tempShort 					; save target base.
.14f2	a9 00		lda #$00			lda 	#0
.14f4	8d 00 08	sta $0800			sta 	MCharCount 					; clear character count.
.14f7	98		tya				tya
.14f8	48		pha				pha
.14f9	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.14fb	10 10		bpl $150d			bpl 	_I32TSUnsigned
.14fd	48		pha				pha 								; save base on stack.
.14fe	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1500	10 08		bpl $150a			bpl 	_I32TSNoFlip
.1502	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1504	20 39 15	jsr $1539			jsr 	MI32WriteCharacter
.1507	20 4c 15	jsr $154c			jsr 	MInt32Negate 				; negate the value.
.150a					_I32TSNoFlip:
.150a	68		pla				pla 								; get the base back
.150b	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.150d					_I32TSUnsigned:
.150d	20 14 15	jsr $1514			jsr 	MI32DivideWrite 				; recursive code to output string.
.1510	68		pla				pla
.1511	a8		tay				tay
.1512	68		pla				pla
.1513	60		rts				rts
.1514					MI32DivideWrite:
.1514	48		pha				pha 								; save the divisor/base
.1515	e8		inx				inx 								; write in the dividing position.
.1516	20 a1 15	jsr $15a1			jsr 	MInt32Set8Bit
.1519	ca		dex				dex
.151a	20 b7 13	jsr $13b7			jsr 	MInt32UDivide 				; divide number by base.
.151d	68		pla				pla 								; get the base into Y
.151e	a8		tay				tay
.151f	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1521	48		pha				pha
.1522	20 b9 15	jsr $15b9			jsr 	MInt32Zero 					; is the result zero ?
.1525	f0 04		beq $152b			beq 	_I32NoRecurse 				; if so, don't recurse.
.1527	98		tya				tya 								; put base into A
.1528	20 14 15	jsr $1514			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.152b					_I32NoRecurse:
.152b	68		pla				pla 								; get the remainder back
.152c	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.152e	90 02		bcc $1532			bcc 	_I32NotHex
.1530	69 06		adc #$06			adc 	#7-1
.1532					_I32NotHex:
.1532	18		clc				clc 								; make it ASCII
.1533	69 30		adc #$30			adc 	#48
.1535	20 39 15	jsr $1539			jsr 	MI32WriteCharacter 			; write the character out
.1538	60		rts				rts 								; and exit.
.1539					MI32WriteCharacter:
.1539	ac 00 08	ldy $0800			ldy 	MCharCount 					; get position
.153c	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.153e	c8		iny				iny
.153f	a9 00		lda #$00			lda 	#0
.1541	91 04		sta ($04),y			sta 	(temp0),y
.1543	ee 00 08	inc $0800			inc 	MCharCount 					; bump count
.1546	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32unary.asm

>0801					MSeed32:	.fill 	4							; random number seed.
.1547					MInt32Absolute:
.1547	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1549	30 01		bmi $154c			bmi 	MInt32Negate
.154b	60		rts				rts
.154c					MInt32Negate:
.154c	38		sec				sec
.154d	a9 00		lda #$00			lda 	#0
.154f	f5 48		sbc $48,x			sbc 	esInt0,x
.1551	95 48		sta $48,x			sta 	esInt0,x
.1553	a9 00		lda #$00			lda 	#0
.1555	f5 50		sbc $50,x			sbc 	esInt1,x
.1557	95 50		sta $50,x			sta 	esInt1,x
.1559	a9 00		lda #$00			lda 	#0
.155b	f5 58		sbc $58,x			sbc 	esInt2,x
.155d	95 58		sta $58,x			sta 	esInt2,x
.155f	a9 00		lda #$00			lda 	#0
.1561	f5 60		sbc $60,x			sbc 	esInt3,x
.1563	95 60		sta $60,x			sta 	esInt3,x
.1565	60		rts				rts
.1566					MInt32Not:
.1566	b5 48		lda $48,x			lda 	esInt0,x
.1568	49 ff		eor #$ff			eor 	#$FF
.156a	95 48		sta $48,x			sta 	esInt0,x
.156c	b5 50		lda $50,x			lda 	esInt1,x
.156e	49 ff		eor #$ff			eor 	#$FF
.1570	95 50		sta $50,x			sta 	esInt1,x
.1572	b5 58		lda $58,x			lda 	esInt2,x
.1574	49 ff		eor #$ff			eor 	#$FF
.1576	95 58		sta $58,x			sta 	esInt2,x
.1578	b5 60		lda $60,x			lda 	esInt3,x
.157a	49 ff		eor #$ff			eor 	#$FF
.157c	95 60		sta $60,x			sta 	esInt3,x
.157e	60		rts				rts
.157f					MInt32Sign:
.157f	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1581	30 0b		bmi $158e			bmi 	MInt32True 					; if set return -1 (true)
.1583	20 b9 15	jsr $15b9			jsr 	MInt32Zero 					; is it zero ?
.1586	f0 0a		beq $1592			beq 	MInt32False 					; if zero return 0 (false)
.1588	20 92 15	jsr $1592			jsr 	MInt32False 					; > 0 return 1
.158b	f6 48		inc $48,x			inc 	esInt0,x
.158d	60		rts				rts
.158e					MInt32True:
.158e	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1590	d0 02		bne $1594			bne 	MInt32WriteAll
.1592					MInt32False:
.1592	a9 00		lda #$00			lda 	#0
.1594					MInt32WriteAll:
.1594	95 48		sta $48,x			sta 	esInt0,x
.1596					MInt32Write123:
.1596	95 50		sta $50,x			sta 	esInt1,x
.1598	95 58		sta $58,x			sta 	esInt2,x
.159a	95 60		sta $60,x			sta 	esInt3,x
.159c	a9 00		lda #$00			lda 	#$00						; and make it an integer
.159e	95 40		sta $40,x			sta 	esType,x
.15a0	60		rts				rts
.15a1					MInt32Set8Bit:
.15a1	95 48		sta $48,x			sta 	esInt0,x
.15a3	a9 00		lda #$00			lda 	#0
.15a5	f0 ef		beq $1596			beq		MInt32Write123
.15a7					MInt32ShiftLeft:
.15a7	16 48		asl $48,x			asl 	esInt0,x
.15a9	36 50		rol $50,x			rol	 	esInt1,x
.15ab	36 58		rol $58,x			rol	 	esInt2,x
.15ad	36 60		rol $60,x			rol	 	esInt3,x
.15af	60		rts				rts
.15b0					MInt32ShiftRight:
.15b0	56 60		lsr $60,x			lsr 	esInt3,x
.15b2	76 58		ror $58,x			ror 	esInt2,x
.15b4	76 50		ror $50,x			ror 	esInt1,x
.15b6	76 48		ror $48,x			ror 	esInt0,x
.15b8	60		rts				rts
.15b9					MInt32Zero:
.15b9	b5 48		lda $48,x			lda 	esInt0,x
.15bb	15 50		ora $50,x			ora 	esInt1,x
.15bd	15 58		ora $58,x			ora 	esInt2,x
.15bf	15 60		ora $60,x			ora 	esInt3,x
.15c1	60		rts				rts
.15c2					MInt32Random:
.15c2	98		tya				tya
.15c3	48		pha				pha
.15c4	a0 07		ldy #$07			ldy 	#7
.15c6	ad 01 08	lda $0801			lda 	MSeed32+0
.15c9	d0 03		bne $15ce			bne 	_Random1
.15cb	a8		tay				tay
.15cc	a9 aa		lda #$aa			lda		#$AA
.15ce					_Random1:
.15ce	0a		asl a				asl 	a
.15cf	2e 02 08	rol $0802			rol 	MSeed32+1
.15d2	2e 03 08	rol $0803			rol 	MSeed32+2
.15d5	2e 04 08	rol $0804			rol 	MSeed32+3
.15d8	90 02		bcc $15dc			bcc 	_Random2
.15da	49 c5		eor #$c5			eor 	#$C5
.15dc					_Random2:
.15dc	88		dey				dey
.15dd	d0 ef		bne $15ce			bne 	_Random1
.15df	8d 01 08	sta $0801			sta 	MSeed32+0
.15e2	95 48		sta $48,x			sta 	esInt0,x
.15e4	ad 02 08	lda $0802			lda 	MSeed32+1
.15e7	95 50		sta $50,x			sta 	esInt1,x
.15e9	ad 03 08	lda $0803			lda 	MSeed32+2
.15ec	95 58		sta $58,x			sta 	esInt2,x
.15ee	ad 04 08	lda $0804			lda 	MSeed32+3
.15f1	95 60		sta $60,x			sta 	esInt3,x
.15f3	68		pla				pla
.15f4	a8		tay				tay
.15f5	60		rts				rts

;******  Return to file: ..\source\main/main.asm

.15f6					mainHandler:
.15f6	7c f9 15	jmp ($15f9,x)			jmp 	(mainVectors,x)
.15f9					mainVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.asm

.15f9					assemblerHandler:
.15f9	7c fc 15	jmp ($15fc,x)			jmp 	(assemblerVectors,x)
.15fc					assemblerVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.asm

.15fc					deviceHandler:
.15fc	7c ff 15	jmp ($15ff,x)			jmp 	(deviceVectors,x)
.15ff					deviceVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.asm


;******  Processing file: ..\source\error/errorhandler.asm

.10db					ErrorHandler:
.10db	a9 ee		lda #$ee			lda 	#$EE
.10dd	a8		tay				tay
>10de	db						.byte 	$DB
.10df	4c df 10	jmp $10df	_EHHalt:jmp 	_EHHalt

;******  Return to file: ..\source\error/error.asm


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/addsub.asm

.15ff					FPAdd:
>15ff	db						.byte 	$DB
.1600	4c ff 15	jmp $15ff			jmp 	FPAdd
.1603					FPSubtract:
>1603	db						.byte 	$DB
.1604	4c 03 16	jmp $1603			jmp 	FPSubtract

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/compare.asm

.1607					FLTCompare:
>1607	db						.byte 	$DB
.1608	4c 07 16	jmp $1607			jmp 	FLTCompare

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/convert.asm

.160b					FPItoF:
>160b	db						.byte 	$DB
.160c	4c 0b 16	jmp $160b			jmp 	FPItoF
.160f					FPFtoI:
>160f	db						.byte 	$DB
.1610	4c 0f 16	jmp $160f			jmp 	FPFtoI

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/importexport.asm

.1613					FPImport:
>1613	db						.byte 	$DB
.1614	4c 13 16	jmp $1613			jmp 	FPImport

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm


;******  Processing file: ..\source\floatingpoint/muldiv.asm

.1617					FPMultiply:
>1617	db						.byte 	$DB
.1618	4c 17 16	jmp $1617			jmp 	FPMultiply
.161b					FPDivide:
>161b	db						.byte 	$DB
.161c	4c 1b 16	jmp $161b			jmp 	FPDivide
.161f					FPImpossible:
.161f	a2 04		ldx #$04			ldx 	#ErrorID_BadType
.1621	20 db 10	jsr $10db			jsr 	ErrorHandler

;******  Return to file: ..\source\floatingpoint/floatingpoint.asm

.1624					floatingpointHandler:
.1624	7c 27 16	jmp ($1627,x)			jmp 	(floatingpointVectors,x)
.1627					floatingpointVectors:
>1627	ff 15					.word FPAdd                ; index 0
>1629	07 16					.word FLTCompare           ; index 2
>162b	1b 16					.word FPDivide             ; index 4
>162d	1f 16					.word FPImpossible         ; index 6
>162f	17 16					.word FPMultiply           ; index 8
>1631	03 16					.word FPSubtract           ; index 10
>1633	0f 16					.word FPFtoI               ; index 12
>1635	13 16					.word FPImport             ; index 14
>1637	0b 16					.word FPItoF               ; index 16

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.asm

.1639					interactionHandler:
.1639	7c 3c 16	jmp ($163c,x)			jmp 	(interactionVectors,x)
.163c					interactionVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.asm


;******  Processing file: ..\source\string/compare.asm

.163c					STRCompare:
>163c	db						.byte 	$DB
.163d	4c 3c 16	jmp $163c			jmp 	STRCompare

;******  Return to file: ..\source\string/string.asm


;******  Processing file: ..\source\string/concat.asm

.1640					StringConcat:
>1640	db						.byte 	$DB
.1641	80 fd		bra $1640			bra 	StringConcat

;******  Return to file: ..\source\string/string.asm

.1643					stringHandler:
.1643	7c 46 16	jmp ($1646,x)			jmp 	(stringVectors,x)
.1646					stringVectors:
>1646	40 16					.word StringConcat         ; index 0
>1648	3c 16					.word STRCompare           ; index 2

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.asm

.164a					tokeniserHandler:
.164a	7c 4d 16	jmp ($164d,x)			jmp 	(tokeniserVectors,x)
.164d					tokeniserVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.asm


;******  Processing file: ..\source\variable/access.asm

.164d					AccessVariable:
>164d	db						.byte 	$DB
.164e	80 fd		bra $164d			bra 	AccessVariable

;******  Return to file: ..\source\variable/variable.asm

.1650					variableHandler:
.1650	7c 53 16	jmp ($1653,x)			jmp 	(variableVectors,x)
.1653					variableVectors:
>1653	4d 16					.word AccessVariable       ; index 0

;******  Return to file: ..\source\basic.asm


;******  End of listing
