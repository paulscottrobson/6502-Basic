
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ../source/basic.asm
; Sun Feb 28 09:52:07 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/basic.asm


;******  Processing file: ../source/main/01common.inc

=8					StackSize = 8

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/02macros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.
.0868					basePage:
>0868							.fill 	2
.086a					endMemory:
>086a							.fill 	2
.086c					highMemory:
>086c							.fill 	2
.086e					lowMemory:
>086e							.fill 	2

;******  Processing file: ../source/main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ../source/main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/imath/intmacros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/errorhandler.inc


;******  Processing file: ../source/error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assert
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma
=10					ErrorID_NoReference = 10 ; Missing reference
=11					ErrorID_LineNumber = 11 ; Line Number not found
=12					ErrorID_StrLen = 12 ; String too long.

;******  Return to file: ../source/error/errorhandler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/memory.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.asm


;******  Processing file: ../source/main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d 68 08	sta $0868			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d 69 08	sta $0869			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d 6a 08	sta $086a			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d 6b 08	sta $086b			sta 	1+(endMemory)
.1017	4c 09 11	jmp $1109			jmp 	Command_Run
.1bb6					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ../source/main/../generated/testcode.inc

>5000	12 0a 00 d9 a2 85 01 64			.byte 18,10,0,217,162,133,1,100,140,133,2,100,98,193,141,144,65,128,25,20,0,217,162,133,2,100,100,143,133,3,98,99,100,193,141,133,5,100,100,98,99,100,128,21,30,0,217,162,133,4,99,97,100,100,141,133,3,97,98,97,193,141,64,128,19,40,0,217,162,133,1,98,143,133,1,99,193,141,133,2,98,99,128,23,50,0,217,162,133,4,99,100,98,99,143,133,0,193,141,133,4,99,100,98,99,128,17,60,0,217,162,133,1,97,143,133,0,193,141,133,1,97,128,17,70,0,217,162,133,1,100,143,133,0,193,141,133,1,100,128,16,80,0,217,162,133,0,140,133,1,99,193,141,144,65,128,18,90,0,217,162,133,1,98,140,133,2,98,99,193,141,144,65,128,19,100,0,217,162,133,0,138,133,4,97,97,100,100,193,141,144,65,128,17,110,0,217,162,133,0,143,133,1,99,193,141,133,1,99,128,23,120,0,217,162,133,1,98,143,133,3,98,98,99,193,141,133,4,98,98,98,99,128,22,130,0,217,162,133,4,100,97,99,97,137,133,3,99,99,98,193,141,144,65,128,18,140,0,217,162,133,2,100,98,142,133,2,100,98,193,141,64,128,20,150,0,217,162,133,4,97,97,98,100,139,133,2,100,97,193,141,64,128,29,160,0,217,162,133,4,99,98,100,99,143,133,3,99,97,99,193,141,133,7,99,98,100,99,99,97,99,128,21,170,0,217,162,133,0,143,133,3,98,98,100,193,141,133,3,98,98,100,128,23,180,0,217,162,133,4,97,100,98,98,143,133,0,193,141,133,4,97,100,98,98,128,18,190,0,217,162,133,2,97,97,138,133,1,98,193,141,144,65,128,29,200,0,217,162,133,3,98,100,97,143,133,4,97,100,97,100,193,141,133,7,98,100,97,97,100,97,100,128,29,210,0,217,162,133,4,97,97,97,97,143,133,3,98,100,99,193,141,133,7,97,97,97,97,98,100,99,128,14,220,0,217,162,133,0,140,133,0,193,141,64,128,17,230,0,217,162,133,1,98,139,133,2,99,98,193,141,64,128,16,240,0,217,162,133,1,98,139,133,1,98,193,141,64,128,17,250,0,217,162,133,1,97,142,133,1,99,193,141,144,65,128,22,4,1,217,162,133,4,98,97,100,99,137,133,4,100,99,97,98,193,141,64,128,21,14,1,217,162,133,3,99,99,99,143,133,0,193,141,133,3,99,99,99,128,29,24,1,217,162,133,3,98,99,97,143,133,4,97,99,99,100,193,141,133,7,98,99,97,97,99,99,100,128,23,34,1,217,162,133,2,99,98,143,133,2,100,99,193,141,133,4,99,98,100,99,128,19,44,1,217,162,133,4,98,97,100,98,142,133,0,193,141,144,65,128,23,54,1,217,162,133,4,97,98,98,98,140,133,4,100,100,98,100,193,141,144,65,128,15,64,1,217,162,133,0,137,133,1,99,193,141,64,128,29,74,1,217,162,133,3,100,100,100,143,133,4,100,99,100,98,193,141,133,7,100,100,100,100,99,100,98,128,21,84,1,217,162,133,1,100,143,133,2,99,99,193,141,133,3,100,99,99,128,15,94,1,217,162,133,0,143,133,0,193,141,133,0,128,17,104,1,217,162,133,2,97,99,137,133,1,98,193,141,64,128,19,114,1,217,162,133,2,98,97,143,133,0,193,141,133,2,98,97,128,19,124,1,217,162,133,1,99,138,133,4,98,99,100,100,193,141,64,128,17,134,1,217,162,133,0,142,133,2,100,99,193,141,144,65,128,14,144,1,217,162,133,0,142,133,0,193,141,64,128,21,154,1,217,162,133,3,99,98,98,143,133,0,193,141,133,3,99,98,98,128,21,164,1,217,162,133,2,99,98,143,133,1,100,193,141,133,3,99,98,100,128,18,174,1,217,162,133,1,98,139,133,3,100,98,100,193,141,64,128,25,184,1,217,162,133,2,97,98,143,133,3,98,98,98,193,141,133,5,97,98,98,98,98,128,25,194,1,217,162,133,3,99,99,97,143,133,2,100,99,193,141,133,5,99,99,97,100,99,128,18,204,1,217,162,133,0,142,133,3,99,97,99,193,141,144,65,128,17,214,1,217,162,133,0,143,133,1,97,193,141,133,1,97,128,19,224,1,217,162,133,2,99,100,143,133,0,193,141,133,2,99,100,128,27,234,1,217,162,133,4,98,99,97,98,143,133,2,98,99,193,141,133,6,98,99,97,98,98,99,128,16,244,1,217,162,133,1,97,141,133,1,100,193,141,64,128,29,254,1,217,162,133,3,99,100,98,143,133,4,99,98,98,100,193,141,133,7,99,100,98,99,98,98,100,128,22,8,2,217,162,133,4,100,99,97,99,142,133,3,99,98,97,193,141,144,65,128,21,18,2,217,162,133,2,99,98,137,133,4,98,99,100,99,193,141,144,65,128,17,28,2,217,162,133,1,97,140,133,1,98,193,141,144,65,128,15,38,2,217,162,133,0,143,133,0,193,141,133,0,128,31,48,2,217,162,133,4,98,99,99,97,143,133,4,98,98,99,99,193,141,133,8,98,99,99,97,98,98,99,99,128,20,58,2,217,162,133,2,100,100,139,133,3,99,100,98,193,141,144,65,128,20,68,2,217,162,133,3,97,100,100,139,133,2,97,100,193,141,144,65,128,19,78,2,217,162,133,1,97,140,133,3,97,98,98,193,141,144,65,128,23,88,2,217,162,133,1,99,143,133,3,99,97,99,193,141,133,4,99,99,97,99,128,18,98,2,217,162,133,0,138,133,3,99,98,100,193,141,144,65,128,18,108,2,217,162,133,3,98,98,98,138,133,1,97,193,141,64,128,29,118,2,217,162,133,3,97,98,97,143,133,4,97,99,97,97,193,141,133,7,97,98,97,97,99,97,97,128,25,128,2,217,162,133,2,97,100,143,133,3,100,100,99,193,141,133,5,97,100,100,100,99,128,21,138,2,217,162,133,3,99,100,97,138,133,4,97,98,97,97,193,141,64,128,27,148,2,217,162,133,3,98,98,97,143,133,3,97,99,97,193,141,133,6,98,98,97,97,99,97,128,19,158,2,217,162,133,1,97,142,133,3,99,98,98,193,141,144,65,128,27,168,2,217,162,133,3,97,99,98,143,133,3,98,100,100,193,141,133,6,97,99,98,98,100,100,128,23,178,2,217,162,133,3,98,97,99,143,133,1,97,193,141,133,4,98,97,99,97,128,29,188,2,217,162,133,4,98,99,98,100,143,133,3,98,98,100,193,141,133,7,98,99,98,100,98,98,100,128,17,198,2,217,162,133,2,99,97,142,133,0,193,141,144,65,128,29,208,2,217,162,133,4,99,98,98,98,143,133,3,97,99,97,193,141,133,7,99,98,98,98,97,99,97,128,31,218,2,217,162,133,4,97,97,100,100,143,133,4,97,98,100,100,193,141,133,8,97,97,100,100,97,98,100,100,128,19,228,2,217,162,133,3,97,97,98,142,133,1,100,193,141,144,65,128,21,238,2,217,162,133,1,100,143,133,2,99,100,193,141,133,3,100,99,100,128,18,248,2,217,162,133,0,140,133,3,97,99,100,193,141,144,65,128,22,2,3,217,162,133,4,100,97,99,98,141,133,4,99,99,98,98,193,141,64,128,19,12,3,217,162,133,1,97,143,133,1,99,193,141,133,2,97,99,128,21,22,3,217,162,133,4,100,98,97,97,139,133,3,100,98,99,193,141,64,128,19,32,3,217,162,133,2,98,100,143,133,0,193,141,133,2,98,100,128,21,42,3,217,162,133,4,98,100,100,100,140,133,2,99,97,193,141,144,65,128,17,52,3,217,162,133,0,143,133,1,100,193,141,133,1,100,128,21,62,3,217,162,133,3,99,98,100,141,133,4,97,98,99,99,193,141,64,128,16,72,3,217,162,133,0,140,133,1,97,193,141,144,65,128,20,82,3,217,162,133,2,100,100,139,133,4,100,100,100,98,193,141,64,128,31,92,3,217,162,133,4,99,97,100,99,143,133,4,100,100,97,97,193,141,133,8,99,97,100,99,100,100,97,97,128,23,102,3,217,162,133,0,143,133,4,100,98,99,98,193,141,133,4,100,98,99,98,128,27,112,3,217,162,133,2,100,99,143,133,4,100,99,97,98,193,141,133,6,100,99,100,99,97,98,128,21,122,3,217,162,133,2,97,99,143,133,1,98,193,141,133,3,97,99,98,128,21,132,3,217,162,133,3,97,100,100,142,133,3,98,99,100,193,141,144,65,128,20,142,3,217,162,133,4,97,100,99,97,140,133,1,99,193,141,144,65,128,19,152,3,217,162,133,1,99,141,133,4,97,97,99,97,193,141,64,128,22,162,3,217,162,133,4,99,100,98,98,140,133,4,98,99,98,100,193,141,64,128,19,172,3,217,162,133,4,97,98,97,99,137,133,0,193,141,144,65,128,19,182,3,217,162,133,1,98,139,133,4,99,99,99,97,193,141,64,128,27,192,3,217,162,133,3,98,97,100,143,133,3,100,99,99,193,141,133,6,98,97,100,100,99,99,128,19,202,3,217,162,133,0,140,133,4,100,97,99,97,193,141,144,65,128,19,212,3,217,162,133,0,140,133,4,98,100,97,98,193,141,144,65,128,21,222,3,217,162,133,3,100,97,99,143,133,0,193,141,133,3,100,97,99,128,21,232,3,217,162,133,0,143,133,3,100,99,100,193,141,133,3,100,99,100,128,25,242,3,217,162,133,3,98,99,99,143,133,2,97,99,193,141,133,5,98,99,99,97,99,128,19,252,3,217,162,133,1,99,143,133,1,98,193,141,133,2,99,98,128,15,6,4,217,162,133,0,141,133,1,99,193,141,64,128,21,16,4,217,162,133,1,100,143,133,2,98,98,193,141,133,3,100,98,98,128,14,26,4,217,162,133,0,139,133,0,193,141,64,128,23,36,4,217,162,133,3,99,98,100,143,133,1,100,193,141,133,4,99,98,100,100,128,25,46,4,217,162,133,2,98,98,143,133,3,97,99,100,193,141,133,5,98,98,97,99,100,128,17,56,4,217,162,133,1,98,137,133,2,99,97,193,141,64,128,23,66,4,217,162,133,3,100,98,99,143,133,1,100,193,141,133,4,100,98,99,100,128,29,76,4,217,162,133,3,98,97,98,143,133,4,100,98,99,98,193,141,133,7,98,97,98,100,98,99,98,128,29,86,4,217,162,133,4,100,97,98,97,143,133,3,100,99,100,193,141,133,7,100,97,98,97,100,99,100,128,17,96,4,217,162,133,0,139,133,3,99,98,98,193,141,64,128,22,106,4,217,162,133,4,100,99,97,97,138,133,3,100,99,98,193,141,144,65,128,17,116,4,217,162,133,0,143,133,1,98,193,141,133,1,98,128,19,126,4,217,162,133,3,98,100,99,141,133,2,98,98,193,141,64,128,20,136,4,217,162,133,2,97,98,140,133,3,100,99,97,193,141,144,65,128,25,146,4,217,162,133,1,99,143,133,4,99,99,100,97,193,141,133,5,99,99,99,100,97,128,20,156,4,217,162,133,2,99,98,141,133,4,98,99,98,97,193,141,64,128,25,166,4,217,162,133,4,99,99,99,99,143,133,1,97,193,141,133,5,99,99,99,99,97,128,27,176,4,217,162,133,2,100,99,143,133,4,98,100,100,99,193,141,133,6,100,99,98,100,100,99,128,25,186,4,217,162,133,2,97,99,143,133,3,100,99,98,193,141,133,5,97,99,100,99,98,128,29,196,4,217,162,133,4,100,99,97,97,143,133,3,98,97,100,193,141,133,7,100,99,97,97,98,97,100,128,19,206,4,217,162,133,2,98,97,143,133,0,193,141,133,2,98,97,128,21,216,4,217,162,133,0,143,133,3,100,99,98,193,141,133,3,100,99,98,128,27,226,4,217,162,133,4,97,98,98,100,143,133,2,99,98,193,141,133,6,97,98,98,100,99,98,128,16,236,4,217,162,133,1,97,139,133,0,193,141,144,65,128,16,246,4,217,162,133,1,100,142,133,0,193,141,144,65,128,18,0,5,217,162,133,4,100,97,100,98,138,133,0,193,141,64,128,18,10,5,217,162,133,0,142,133,3,98,99,100,193,141,144,65,128,29,20,5,217,162,133,4,100,100,98,100,143,133,3,100,97,97,193,141,133,7,100,100,98,100,100,97,97,128,23,30,5,217,162,133,1,100,143,133,3,98,100,99,193,141,133,4,100,98,100,99,128,16,40,5,217,162,133,1,99,140,133,1,98,193,141,64,128,17,50,5,217,162,133,1,98,142,133,1,100,193,141,144,65,128,29,60,5,217,162,133,3,100,99,100,143,133,4,99,100,100,100,193,141,133,7,100,99,100,99,100,100,100,128,16,70,5,217,162,133,1,100,138,133,1,97,193,141,64,128,20,80,5,217,162,133,1,100,142,133,4,99,99,99,97,193,141,144,65,128,18,90,5,217,162,133,1,100,140,133,3,98,99,98,193,141,64,128,19,100,5,217,162,133,0,143,133,2,97,98,193,141,133,2,97,98,128,23,110,5,217,162,133,4,98,99,100,98,143,133,0,193,141,133,4,98,99,100,98,128,23,120,5,217,162,133,0,143,133,4,99,97,98,100,193,141,133,4,99,97,98,100,128,20,130,5,217,162,133,1,100,138,133,4,100,99,97,98,193,141,144,65,128,19,140,5,217,162,133,4,98,97,99,100,139,133,0,193,141,144,65,128,23,150,5,217,162,133,3,98,99,100,143,133,1,99,193,141,133,4,98,99,100,99,128,20,160,5,217,162,133,1,97,140,133,4,97,100,100,97,193,141,144,65,128,19,170,5,217,162,133,1,100,141,133,4,98,97,100,100,193,141,64,128,18,180,5,217,162,133,1,99,142,133,2,100,97,193,141,144,65,128,22,190,5,217,162,133,3,98,97,100,139,133,4,97,98,98,98,193,141,144,65,128,17,200,5,217,162,133,1,100,140,133,2,99,100,193,141,64,128,17,210,5,217,162,133,0,141,133,3,98,98,100,193,141,64,128,31,220,5,217,162,133,4,99,98,99,99,143,133,4,100,97,99,97,193,141,133,8,99,98,99,99,100,97,99,97,128,16,230,5,217,162,133,0,140,133,1,97,193,141,144,65,128,16,240,5,217,162,133,0,139,133,2,98,98,193,141,64,128,22,250,5,217,162,133,3,99,100,100,137,133,4,97,98,100,97,193,141,144,65,128,25,4,6,217,162,133,1,99,143,133,4,100,100,99,97,193,141,133,5,99,100,100,99,97,128,19,14,6,217,162,133,4,98,99,98,97,140,133,1,98,193,141,64,128,21,24,6,217,162,133,3,100,98,97,143,133,0,193,141,133,3,100,98,97,128,17,34,6,217,162,133,0,139,133,3,97,97,99,193,141,64,128,25,44,6,217,162,133,4,97,99,98,97,143,133,1,97,193,141,133,5,97,99,98,97,97,128,21,54,6,217,162,133,3,97,98,97,143,133,0,193,141,133,3,97,98,97,128,21,64,6,217,162,133,4,97,97,97,100,140,133,2,100,99,193,141,144,65,128,20,74,6,217,162,133,2,100,99,140,133,4,98,100,99,100,193,141,64,128,20,84,6,217,162,133,4,98,99,98,97,139,133,2,100,100,193,141,64,128,25,94,6,217,162,133,1,100,143,133,4,99,98,99,99,193,141,133,5,100,99,98,99,99,128,21,104,6,217,162,133,1,98,143,133,2,97,98,193,141,133,3,98,97,98,128,16,114,6,217,162,133,1,99,139,133,1,100,193,141,64,128,19,124,6,217,162,133,0,143,133,2,100,100,193,141,133,2,100,100,128,27,134,6,217,162,133,2,100,97,143,133,4,99,97,98,97,193,141,133,6,100,97,99,97,98,97,128,21,144,6,217,162,133,2,98,100,143,133,1,98,193,141,133,3,98,100,98,128,20,154,6,217,162,133,2,100,97,141,133,4,100,97,100,100,193,141,64,128,22,164,6,217,162,133,4,98,97,98,99,137,133,4,100,98,97,100,193,141,64,128,23,174,6,217,162,133,2,98,97,143,133,2,98,99,193,141,133,4,98,97,98,99,128,20,184,6,217,162,133,2,97,99,137,133,4,100,99,98,98,193,141,64,128,21,194,6,217,162,133,0,143,133,3,98,98,99,193,141,133,3,98,98,99,128,16,204,6,217,162,133,2,98,99,141,133,0,193,141,64,128,20,214,6,217,162,133,4,100,99,99,97,137,133,1,98,193,141,144,65,128,20,224,6,217,162,133,3,98,97,98,138,133,2,99,99,193,141,144,65,128,19,234,6,217,162,133,4,99,98,98,98,142,133,0,193,141,144,65,128,19,244,6,217,162,133,1,97,138,133,3,99,98,100,193,141,144,65,128,27,254,6,217,162,133,4,97,100,98,100,143,133,2,97,100,193,141,133,6,97,100,98,100,97,100,128,21,8,7,217,162,133,1,98,143,133,2,99,100,193,141,133,3,98,99,100,128,23,18,7,217,162,133,0,143,133,4,100,99,99,100,193,141,133,4,100,99,99,100,128,25,28,7,217,162,133,3,99,99,99,143,133,2,97,100,193,141,133,5,99,99,99,97,100,128,25,38,7,217,162,133,1,99,143,133,4,98,97,99,97,193,141,133,5,99,98,97,99,97,128,21,48,7,217,162,133,4,97,100,97,98,139,133,3,99,100,99,193,141,64,128,23,58,7,217,162,133,3,97,97,99,143,133,1,97,193,141,133,4,97,97,99,97,128,21,68,7,217,162,133,2,99,99,143,133,1,100,193,141,133,3,99,99,100,128,21,78,7,217,162,133,2,98,98,143,133,1,100,193,141,133,3,98,98,100,128,23,88,7,217,162,133,1,99,143,133,3,98,98,99,193,141,133,4,99,98,98,99,128,22,98,7,217,162,133,3,97,97,98,140,133,4,99,99,100,98,193,141,144,65,128,23,108,7,217,162,133,4,100,100,100,99,143,133,0,193,141,133,4,100,100,100,99,128,18,118,7,217,162,133,3,97,97,98,137,133,0,193,141,144,65,128,17,128,7,217,162,133,2,97,98,139,133,1,98,193,141,64,128,19,138,7,217,162,133,2,98,98,143,133,0,193,141,133,2,98,98,128,15,148,7,217,162,133,0,137,133,1,100,193,141,64,128,20,158,7,217,162,133,1,99,137,133,4,97,99,99,97,193,141,144,65,128,17,168,7,217,162,133,0,143,133,1,100,193,141,133,1,100,128,17,178,7,217,162,133,0,143,133,1,99,193,141,133,1,99,128,25,188,7,217,162,133,3,100,97,97,143,133,2,100,100,193,141,133,5,100,97,97,100,100,128,17,198,7,217,162,133,1,99,137,133,1,97,193,141,144,65,128,18,208,7,217,162,133,1,97,137,133,3,99,99,99,193,141,64,128,16,218,7,217,162,133,1,99,140,133,1,97,193,141,64,128,17,228,7,217,162,133,1,98,137,133,2,99,100,193,141,64,128,16,238,7,217,162,133,1,98,138,133,1,97,193,141,64,128,27,248,7,217,162,133,3,97,100,100,143,133,3,97,97,97,193,141,133,6,97,100,100,97,97,97,128,20,2,8,217,162,133,3,97,98,97,142,133,2,99,98,193,141,144,65,128,19,12,8,217,162,133,0,143,133,2,100,98,193,141,133,2,100,98,128,21,22,8,217,162,133,2,97,98,142,133,4,97,97,100,99,193,141,144,65,128,19,32,8,217,162,133,0,143,133,2,98,97,193,141,133,2,98,97,128,19,42,8,217,162,133,1,100,142,133,3,99,99,97,193,141,144,65,128,19,52,8,217,162,133,3,98,99,97,139,133,1,98,193,141,144,65,128,16,62,8,217,162,133,0,140,133,1,100,193,141,144,65,128,19,72,8,217,162,133,1,99,140,133,3,99,97,100,193,141,144,65,128,27,82,8,217,162,133,3,97,98,100,143,133,3,99,99,99,193,141,133,6,97,98,100,99,99,99,128,23,92,8,217,162,133,4,100,97,98,99,143,133,0,193,141,133,4,100,97,98,99,128,20,102,8,217,162,133,4,97,99,97,100,141,133,2,100,99,193,141,64,128,31,112,8,217,162,133,4,97,100,97,100,143,133,4,97,97,98,98,193,141,133,8,97,100,97,100,97,97,98,98,128,29,122,8,217,162,133,4,100,99,97,97,143,133,3,100,99,97,193,141,133,7,100,99,97,97,100,99,97,128,17,132,8,217,162,133,1,97,143,133,0,193,141,133,1,97,128,31,142,8,217,162,133,4,98,98,99,98,143,133,4,99,99,98,98,193,141,133,8,98,98,99,98,99,99,98,98,128,31,152,8,217,162,133,4,99,100,99,100,143,133,4,100,98,97,100,193,141,133,8,99,100,99,100,100,98,97,100,128,20,162,8,217,162,133,2,100,98,137,133,3,98,99,97,193,141,144,65,128,18,172,8,217,162,133,2,98,97,139,133,1,97,193,141,144,65,128,27,182,8,217,162,133,4,98,98,97,98,143,133,2,98,100,193,141,133,6,98,98,97,98,98,100,128,23,192,8,217,162,133,4,97,98,98,98,143,133,0,193,141,133,4,97,98,98,98,128,29,202,8,217,162,133,3,97,100,97,143,133,4,98,97,99,100,193,141,133,7,97,100,97,98,97,99,100,128,23,212,8,217,162,133,0,143,133,4,99,100,99,98,193,141,133,4,99,100,99,98,128,22,222,8,217,162,133,4,100,100,97,98,142,133,3,100,98,98,193,141,144,65,128,21,232,8,217,162,133,1,97,143,133,2,100,100,193,141,133,3,97,100,100,128,19,242,8,217,162,133,1,98,139,133,4,99,99,98,98,193,141,64,128,21,252,8,217,162,133,4,98,99,98,97,142,133,2,97,97,193,141,144,65,128,16,6,9,217,162,133,1,99,141,133,1,97,193,141,64,128,23,16,9,217,162,133,1,100,143,133,3,100,100,100,193,141,133,4,100,100,100,100,128,27,26,9,217,162,133,4,97,97,99,99,143,133,2,99,97,193,141,133,6,97,97,99,99,99,97,128,17,36,9,217,162,133,0,143,133,1,98,193,141,133,1,98,128,19,46,9,217,162,133,1,97,143,133,1,99,193,141,133,2,97,99,128,31,56,9,217,162,133,4,98,97,99,100,143,133,4,100,99,97,99,193,141,133,8,98,97,99,100,100,99,97,99,128,29,66,9,217,162,133,3,97,98,98,143,133,4,98,98,98,98,193,141,133,7,97,98,98,98,98,98,98,128,21,76,9,217,162,133,2,100,99,143,133,1,97,193,141,133,3,100,99,97,128,20,86,9,217,162,133,2,100,99,140,133,4,98,98,99,98,193,141,64,128,19,96,9,217,162,133,4,97,99,98,97,139,133,0,193,141,144,65,128,19,106,9,217,162,133,3,97,100,98,137,133,2,99,100,193,141,64,128,15,116,9,217,162,133,0,138,133,0,193,141,144,65,128,17,126,9,217,162,133,0,139,133,3,97,97,98,193,141,64,128,27,136,9,217,162,133,4,100,97,99,100,143,133,2,99,99,193,141,133,6,100,97,99,100,99,99,128,19,146,9,217,162,133,1,99,143,133,1,99,193,141,133,2,99,99,128,27,156,9,217,162,133,2,100,98,143,133,4,99,98,97,97,193,141,133,6,100,98,99,98,97,97,128,18,166,9,217,162,133,3,100,98,97,142,133,0,193,141,144,65,128,23,176,9,217,162,133,2,100,99,143,133,2,100,97,193,141,133,4,100,99,100,97,128,25,186,9,217,162,133,1,100,143,133,4,99,100,98,100,193,141,133,5,100,99,100,98,100,128,21,196,9,217,162,133,3,100,100,97,143,133,0,193,141,133,3,100,100,97,128,21,206,9,217,162,133,1,99,143,133,2,100,98,193,141,133,3,99,100,98,128,18,216,9,217,162,133,1,99,137,133,3,99,98,98,193,141,64,128,21,226,9,217,162,133,1,99,143,133,2,97,100,193,141,133,3,99,97,100,128,19,236,9,217,162,133,2,100,100,141,133,3,97,97,100,193,141,64,128,19,246,9,217,162,133,1,100,141,133,4,100,97,100,100,193,141,64,128,21,0,10,217,162,133,0,143,133,3,99,97,97,193,141,133,3,99,97,97,128,17,10,10,217,162,133,0,138,133,2,98,98,193,141,144,65,128,22,20,10,217,162,133,4,100,99,100,99,137,133,3,100,99,98,193,141,144,65,128,19,30,10,217,162,133,4,99,97,99,100,141,133,1,98,193,141,64,128,27,40,10,217,162,133,3,98,97,100,143,133,3,100,100,99,193,141,133,6,98,97,100,100,100,99,128,21,50,10,217,162,133,0,143,133,3,97,97,98,193,141,133,3,97,97,98,128,25,60,10,217,162,133,2,98,100,143,133,3,99,98,98,193,141,133,5,98,100,99,98,98,128,22,70,10,217,162,133,4,100,97,100,98,139,133,4,100,100,98,97,193,141,64,128,19,80,10,217,162,133,1,97,137,133,4,98,100,97,98,193,141,64,128,23,90,10,217,162,133,3,97,99,100,143,133,1,100,193,141,133,4,97,99,100,100,128,15,100,10,217,162,133,0,143,133,0,193,141,133,0,128,15,110,10,217,162,133,0,143,133,0,193,141,133,0,128,21,120,10,217,162,133,2,98,99,143,133,1,97,193,141,133,3,98,99,97,128,25,130,10,217,162,133,1,100,143,133,4,98,98,100,97,193,141,133,5,100,98,98,100,97,128,23,140,10,217,162,133,0,143,133,4,99,97,98,98,193,141,133,4,99,97,98,98,128,23,150,10,217,162,133,4,98,98,99,99,138,133,4,99,99,98,99,193,141,144,65,128,23,160,10,217,162,133,4,100,99,99,99,143,133,0,193,141,133,4,100,99,99,99,128,20,170,10,217,162,133,1,99,140,133,4,100,98,98,98,193,141,144,65,128,27,180,10,217,162,133,4,98,99,97,99,143,133,2,98,98,193,141,133,6,98,99,97,99,98,98,128,15,190,10,217,162,133,0,143,133,0,193,141,133,0,128,22,200,10,217,162,133,4,98,99,98,100,141,133,4,100,99,100,98,193,141,64,128,21,210,10,217,162,133,1,100,143,133,2,100,99,193,141,133,3,100,100,99,128,17,220,10,217,162,133,2,99,98,139,133,0,193,141,144,65,128,21,230,10,217,162,133,3,97,100,99,143,133,0,193,141,133,3,97,100,99,128,23,240,10,217,162,133,4,100,99,98,100,143,133,0,193,141,133,4,100,99,98,100,128,23,250,10,217,162,133,2,100,100,143,133,2,100,98,193,141,133,4,100,100,100,98,128,18,4,11,217,162,133,2,99,98,137,133,1,99,193,141,144,65,128,15,14,11,217,162,133,0,143,133,0,193,141,133,0,128,19,24,11,217,162,133,0,143,133,2,100,99,193,141,133,2,100,99,128,17,34,11,217,162,133,2,97,100,141,133,1,99,193,141,64,128,23,44,11,217,162,133,3,97,97,99,143,133,1,98,193,141,133,4,97,97,99,98,128,21,54,11,217,162,133,3,100,98,100,143,133,0,193,141,133,3,100,98,100,128,17,64,11,217,162,133,0,143,133,1,98,193,141,133,1,98,128,21,74,11,217,162,133,3,98,98,98,143,133,0,193,141,133,3,98,98,98,128,17,84,11,217,162,133,2,100,100,138,133,1,99,193,141,64,128,19,94,11,217,162,133,0,143,133,2,97,97,193,141,133,2,97,97,128,23,104,11,217,162,133,2,99,98,143,133,2,98,100,193,141,133,4,99,98,98,100,128,19,114,11,217,162,133,0,143,133,2,97,99,193,141,133,2,97,99,128,15,124,11,217,162,133,0,143,133,0,193,141,133,0,128,15,134,11,217,162,133,0,137,133,1,99,193,141,64,128,21,144,11,217,162,133,4,97,98,97,98,142,133,2,97,99,193,141,144,65,128,23,154,11,217,162,133,3,98,99,100,143,133,1,98,193,141,133,4,98,99,100,98,128,18,164,11,217,162,133,4,98,98,100,99,138,133,0,193,141,64,128,16,174,11,217,162,133,2,100,97,138,133,0,193,141,64,128,20,184,11,217,162,133,3,97,99,99,138,133,2,99,97,193,141,144,65,128,20,194,11,217,162,133,2,99,98,142,133,3,98,98,98,193,141,144,65,128,25,204,11,217,162,133,4,99,98,98,97,143,133,1,99,193,141,133,5,99,98,98,97,99,128,16,214,11,217,162,133,1,99,141,133,1,98,193,141,64,128,20,224,11,217,162,133,2,97,98,138,133,3,99,98,97,193,141,144,65,128,21,234,11,217,162,133,2,98,99,140,133,4,99,100,98,97,193,141,144,65,128,18,244,11,217,162,133,0,139,133,4,99,99,100,100,193,141,64,128,19,254,11,217,162,133,2,99,97,138,133,3,98,97,100,193,141,64,128,18,8,12,217,162,133,3,100,98,99,139,133,0,193,141,144,65,128,21,18,12,217,162,133,3,98,98,97,138,133,3,99,100,100,193,141,144,65,128,17,28,12,217,162,133,0,143,133,1,97,193,141,133,1,97,128,25,38,12,217,162,133,3,99,98,99,143,133,2,98,100,193,141,133,5,99,98,99,98,100,128,18,48,12,217,162,133,3,97,100,97,142,133,0,193,141,144,65,128,17,58,12,217,162,133,1,100,143,133,0,193,141,133,1,100,128,17,68,12,217,162,133,2,100,97,137,133,0,193,141,144,65,128,25,78,12,217,162,133,3,97,97,98,143,133,2,98,97,193,141,133,5,97,97,98,98,97,128,25,88,12,217,162,133,4,99,99,99,99,143,133,1,98,193,141,133,5,99,99,99,99,98,128,16,98,12,217,162,133,1,97,142,133,1,97,193,141,64,128,16,108,12,217,162,133,2,100,97,141,133,0,193,141,64,128,17,118,12,217,162,133,0,141,133,3,100,99,97,193,141,64,128,17,128,12,217,162,133,0,143,133,1,97,193,141,133,1,97,128,25,138,12,217,162,133,2,98,100,143,133,3,98,97,99,193,141,133,5,98,100,98,97,99,128,19,148,12,217,162,133,2,100,99,137,133,3,100,99,97,193,141,64,128,23,158,12,217,162,133,4,98,97,97,98,140,133,4,99,100,100,100,193,141,144,65,128,27,168,12,217,162,133,2,99,97,143,133,4,98,99,97,97,193,141,133,6,99,97,98,99,97,97,128,17,178,12,217,162,133,0,143,133,1,99,193,141,133,1,99,128,20,188,12,217,162,133,4,97,97,99,99,139,133,2,98,98,193,141,64,128,20,198,12,217,162,133,3,98,97,97,141,133,3,97,98,99,193,141,64,128,17,208,12,217,162,133,1,100,143,133,0,193,141,133,1,100,128,21,218,12,217,162,133,0,143,133,3,100,99,97,193,141,133,3,100,99,97,128,15,228,12,217,162,133,0,137,133,1,100,193,141,64,128,29,238,12,217,162,133,3,99,100,99,143,133,4,99,98,97,97,193,141,133,7,99,100,99,99,98,97,97,128,16,248,12,217,162,133,1,98,141,133,1,97,193,141,64,128,17,2,13,217,162,133,1,98,137,133,2,99,97,193,141,64,128,21,12,13,217,162,133,2,99,98,143,133,1,99,193,141,133,3,99,98,99,128,19,22,13,217,162,133,4,100,97,99,98,139,133,0,193,141,144,65,128,18,32,13,217,162,133,3,100,99,97,139,133,0,193,141,144,65,128,18,42,13,217,162,133,1,98,137,133,3,100,98,99,193,141,64,128,29,52,13,217,162,133,3,97,97,97,143,133,4,98,97,100,97,193,141,133,7,97,97,97,98,97,100,97,128,25,62,13,217,162,133,3,100,100,98,143,133,2,100,100,193,141,133,5,100,100,98,100,100,128,21,72,13,217,162,133,4,99,97,98,97,142,133,2,99,100,193,141,144,65,128,22,82,13,217,162,133,4,97,100,98,99,142,133,3,100,99,97,193,141,144,65,128,25,92,13,217,162,133,3,100,99,98,143,133,2,100,98,193,141,133,5,100,99,98,100,98,128,19,102,13,217,162,133,4,99,98,99,97,137,133,0,193,141,144,65,128,29,112,13,217,162,133,3,98,98,100,143,133,4,98,97,100,97,193,141,133,7,98,98,100,98,97,100,97,128,21,122,13,217,162,133,2,98,97,142,133,4,99,100,100,97,193,141,144,65,128,15,132,13,217,162,133,0,143,133,0,193,141,133,0,128,18,142,13,217,162,133,3,99,97,100,141,133,1,100,193,141,64,128,19,152,13,217,162,133,2,98,99,139,133,2,98,97,193,141,144,65,128,21,162,13,217,162,133,3,99,98,99,142,133,3,99,97,98,193,141,144,65,128,16,172,13,217,162,133,1,100,138,133,1,98,193,141,64,128,21,182,13,217,162,133,3,97,99,99,143,133,0,193,141,133,3,97,99,99,128,31,192,13,217,162,133,4,97,98,99,98,143,133,4,97,100,97,98,193,141,133,8,97,98,99,98,97,100,97,98,128,21,202,13,217,162,133,3,98,98,98,143,133,0,193,141,133,3,98,98,98,128,21,212,13,217,162,133,4,98,98,97,100,141,133,3,98,99,98,193,141,64,128,23,222,13,217,162,133,1,99,143,133,3,99,98,99,193,141,133,4,99,99,98,99,128,19,232,13,217,162,133,1,97,143,133,1,99,193,141,133,2,97,99,128,25,242,13,217,162,133,4,98,98,97,99,143,133,1,98,193,141,133,5,98,98,97,99,98,128,25,252,13,217,162,133,2,99,100,143,133,3,100,97,100,193,141,133,5,99,100,100,97,100,128,19,6,14,217,162,133,4,98,100,97,98,142,133,0,193,141,144,65,128,21,16,14,217,162,133,2,98,99,143,133,1,99,193,141,133,3,98,99,99,128,27,26,14,217,162,133,3,100,97,98,143,133,3,97,99,99,193,141,133,6,100,97,98,97,99,99,128,23,36,14,217,162,133,2,100,98,143,133,2,98,98,193,141,133,4,100,98,98,98,128,25,46,14,217,162,133,3,97,98,99,143,133,2,97,100,193,141,133,5,97,98,99,97,100,128,21,56,14,217,162,133,0,143,133,3,98,99,99,193,141,133,3,98,99,99,128,21,66,14,217,162,133,2,100,99,138,133,4,100,99,99,99,193,141,144,65,128,17,76,14,217,162,133,0,143,133,1,97,193,141,133,1,97,128,23,86,14,217,162,133,0,143,133,4,99,97,97,97,193,141,133,4,99,97,97,97,128,17,96,14,217,162,133,3,99,99,99,141,133,0,193,141,64,128,19,106,14,217,162,133,4,99,98,97,99,140,133,1,97,193,141,64,128,21,116,14,217,162,133,4,100,100,98,99,138,133,3,100,98,97,193,141,64,128,21,126,14,217,162,133,1,98,143,133,2,99,100,193,141,133,3,98,99,100,128,29,136,14,217,162,133,3,98,97,99,143,133,4,97,100,100,99,193,141,133,7,98,97,99,97,100,100,99,128,18,146,14,217,162,133,0,139,133,4,99,100,99,98,193,141,64,128,14,156,14,217,162,133,0,140,133,0,193,141,64,128,23,166,14,217,162,133,1,97,143,133,3,98,100,100,193,141,133,4,97,98,100,100,128,21,176,14,217,162,133,4,100,99,97,100,137,133,2,99,100,193,141,144,65,128,31,186,14,217,162,133,4,99,97,99,100,143,133,4,100,99,98,100,193,141,133,8,99,97,99,100,100,99,98,100,128,22,196,14,217,162,133,4,98,100,100,99,141,133,4,99,97,99,97,193,141,64,128,23,206,14,217,162,133,0,143,133,4,99,98,97,100,193,141,133,4,99,98,97,100,128,21,216,14,217,162,133,0,143,133,3,97,99,98,193,141,133,3,97,99,98,128,19,226,14,217,162,133,1,99,143,133,1,97,193,141,133,2,99,97,128,27,236,14,217,162,133,3,100,100,100,143,133,3,97,97,98,193,141,133,6,100,100,100,97,97,98,128,25,246,14,217,162,133,3,99,98,97,143,133,2,99,98,193,141,133,5,99,98,97,99,98,128,19,0,15,217,162,133,0,143,133,2,100,100,193,141,133,2,100,100,128,27,10,15,217,162,133,4,99,100,97,99,143,133,2,99,98,193,141,133,6,99,100,97,99,99,98,128,20,20,15,217,162,133,1,97,140,133,4,97,97,99,99,193,141,144,65,128,23,30,15,217,162,133,2,97,98,143,133,2,97,98,193,141,133,4,97,98,97,98,128,23,40,15,217,162,133,2,100,98,143,133,2,98,100,193,141,133,4,100,98,98,100,128,16,50,15,217,162,133,2,100,100,141,133,0,193,141,64,128,20,60,15,217,162,133,2,99,99,139,133,3,98,100,97,193,141,144,65,128,23,70,15,217,162,133,1,99,143,133,3,98,97,97,193,141,133,4,99,98,97,97,128,25,80,15,217,162,133,1,100,143,133,4,98,100,100,99,193,141,133,5,100,98,100,100,99,128,19,90,15,217,162,133,1,100,143,133,1,97,193,141,133,2,100,97,128,21,100,15,217,162,133,3,97,100,98,140,133,3,98,98,98,193,141,144,65,128,23,110,15,217,162,133,0,143,133,4,100,99,97,98,193,141,133,4,100,99,97,98,128,16,120,15,217,162,133,0,137,133,2,100,99,193,141,64,128,19,130,15,217,162,133,1,99,138,133,4,97,99,98,97,193,141,64,128,31,140,15,217,162,133,4,97,97,98,99,143,133,4,97,99,100,98,193,141,133,8,97,97,98,99,97,99,100,98,128,18,150,15,217,162,133,1,100,140,133,2,100,97,193,141,144,65,128,17,160,15,217,162,133,1,98,143,133,0,193,141,133,1,98,128,19,170,15,217,162,133,3,98,98,97,139,133,2,100,97,193,141,64,128,25,180,15,217,162,133,1,97,143,133,4,97,98,98,97,193,141,133,5,97,97,98,98,97,128,16,190,15,217,162,133,0,137,133,2,98,98,193,141,64,128,16,200,15,217,162,133,2,99,100,140,133,0,193,141,64,128,25,210,15,217,162,133,3,98,99,99,143,133,2,99,97,193,141,133,5,98,99,99,99,97,128,27,220,15,217,162,133,2,97,98,143,133,4,99,97,98,98,193,141,133,6,97,98,99,97,98,98,128,20,230,15,217,162,133,3,100,100,98,138,133,3,99,100,100,193,141,64,128,29,240,15,217,162,133,3,99,98,99,143,133,4,100,99,100,98,193,141,133,7,99,98,99,100,99,100,98,128,23,250,15,217,162,133,3,100,97,99,143,133,1,97,193,141,133,4,100,97,99,97,128,27,4,16,217,162,133,3,100,100,97,143,133,3,100,100,97,193,141,133,6,100,100,97,100,100,97,128,25,14,16,217,162,133,3,100,97,98,143,133,2,99,99,193,141,133,5,100,97,98,99,99,128,17,24,16,217,162,133,1,98,143,133,0,193,141,133,1,98,128,17,34,16,217,162,133,1,97,142,133,1,100,193,141,144,65,128,20,44,16,217,162,133,3,97,99,97,139,133,2,97,99,193,141,144,65,128,27,54,16,217,162,133,2,100,99,143,133,4,99,97,100,99,193,141,133,6,100,99,99,97,100,99,128,14,64,16,217,162,133,0,142,133,0,193,141,64,128,23,74,16,217,162,133,0,143,133,4,97,98,97,99,193,141,133,4,97,98,97,99,128,19,84,16,217,162,133,1,97,143,133,1,99,193,141,133,2,97,99,128,21,94,16,217,162,133,3,97,99,97,143,133,0,193,141,133,3,97,99,97,128,16,104,16,217,162,133,0,141,133,2,98,99,193,141,64,128,17,114,16,217,162,133,2,100,97,139,133,0,193,141,144,65,128,17,124,16,217,162,133,1,98,143,133,0,193,141,133,1,98,128,20,134,16,217,162,133,4,100,100,100,100,139,133,1,98,193,141,144,65,128,23,144,16,217,162,133,4,99,99,98,98,143,133,0,193,141,133,4,99,99,98,98,128,21,154,16,217,162,133,2,99,99,142,133,4,98,98,97,98,193,141,144,65,128,25,164,16,217,162,133,2,97,99,143,133,3,100,97,97,193,141,133,5,97,99,100,97,97,128,20,174,16,217,162,133,3,98,97,99,140,133,3,97,100,99,193,141,64,128,18,184,16,217,162,133,0,141,133,4,98,98,97,100,193,141,64,128,31,194,16,217,162,133,4,98,98,98,97,143,133,4,98,100,99,98,193,141,133,8,98,98,98,97,98,100,99,98,128,31,204,16,217,162,133,4,100,97,98,99,143,133,4,98,97,100,97,193,141,133,8,100,97,98,99,98,97,100,97,128,23,214,16,217,162,133,3,98,99,99,143,133,1,100,193,141,133,4,98,99,99,100,128,17,224,16,217,162,133,1,100,138,133,2,98,100,193,141,64,128,16,234,16,217,162,133,0,142,133,1,99,193,141,144,65,128,22,244,16,217,162,133,4,99,98,99,99,137,133,3,99,98,98,193,141,144,65,128,19,254,16,217,162,133,3,98,97,97,137,133,1,98,193,141,144,65,128,18,8,17,217,162,133,0,140,133,3,100,99,97,193,141,144,65,128,20,18,17,217,162,133,2,97,98,137,133,4,98,97,97,99,193,141,64,128,14,28,17,217,162,133,0,142,133,0,193,141,64,128,22,38,17,217,162,133,4,97,99,99,100,139,133,4,99,99,100,100,193,141,64,128,27,48,17,217,162,133,4,97,100,97,100,143,133,2,97,99,193,141,133,6,97,100,97,100,97,99,128,22,58,17,217,162,133,4,98,100,98,100,139,133,3,97,97,100,193,141,144,65,128,21,68,17,217,162,133,3,100,97,99,137,133,4,100,100,97,99,193,141,64,128,19,78,17,217,162,133,1,100,143,133,1,98,193,141,133,2,100,98,128,31,88,17,217,162,133,4,98,97,97,98,143,133,4,100,97,100,99,193,141,133,8,98,97,97,98,100,97,100,99,128,18,98,17,217,162,133,0,141,133,4,99,100,100,100,193,141,64,128,21,108,17,217,162,133,3,98,97,98,140,133,3,99,100,99,193,141,144,65,128,29,118,17,217,162,133,4,97,100,99,100,143,133,3,97,97,98,193,141,133,7,97,100,99,100,97,97,98,128,17,128,17,217,162,133,1,98,143,133,0,193,141,133,1,98,128,25,138,17,217,162,133,1,99,143,133,4,99,97,99,99,193,141,133,5,99,99,97,99,99,128,20,148,17,217,162,133,1,97,142,133,4,99,99,97,100,193,141,144,65,128,19,158,17,217,162,133,1,99,139,133,3,98,99,98,193,141,144,65,128,20,168,17,217,162,133,3,98,100,99,141,133,3,99,98,99,193,141,64,128,17,178,17,217,162,133,0,143,133,1,99,193,141,133,1,99,128,19,188,17,217,162,133,0,142,133,4,100,98,99,99,193,141,144,65,128,16,198,17,217,162,133,1,99,142,133,0,193,141,144,65,128,19,208,17,217,162,133,1,98,141,133,4,98,99,98,97,193,141,64,128,29,218,17,217,162,133,3,100,97,100,143,133,4,100,100,100,98,193,141,133,7,100,97,100,100,100,100,98,128,16,228,17,217,162,133,1,98,142,133,0,193,141,144,65,128,18,238,17,217,162,133,4,98,100,98,100,140,133,0,193,141,64,128,18,248,17,217,162,133,0,140,133,3,97,99,100,193,141,144,65,128,15,2,18,217,162,133,1,99,141,133,0,193,141,64,128,29,12,18,217,162,133,3,97,99,98,143,133,4,99,99,100,98,193,141,133,7,97,99,98,99,99,100,98,128,27,22,18,217,162,133,2,100,100,143,133,4,98,99,98,99,193,141,133,6,100,100,98,99,98,99,128,16,32,18,217,162,133,0,140,133,1,100,193,141,144,65,128,23,42,18,217,162,133,4,99,97,99,99,143,133,0,193,141,133,4,99,97,99,99,128,16,52,18,217,162,133,0,141,133,2,97,98,193,141,64,128,25,62,18,217,162,133,4,97,98,97,99,143,133,1,98,193,141,133,5,97,98,97,99,98,128,23,72,18,217,162,133,0,143,133,4,100,98,98,97,193,141,133,4,100,98,98,97,128,27,82,18,217,162,133,3,100,99,99,143,133,3,98,97,98,193,141,133,6,100,99,99,98,97,98,128,23,92,18,217,162,133,1,98,143,133,3,98,97,98,193,141,133,4,98,98,97,98,128,23,102,18,217,162,133,3,99,97,97,143,133,1,100,193,141,133,4,99,97,97,100,128,29,112,18,217,162,133,3,100,97,99,143,133,4,100,97,97,98,193,141,133,7,100,97,99,100,97,97,98,128,16,122,18,217,162,133,1,97,142,133,0,193,141,144,65,128,25,132,18,217,162,133,4,97,97,100,99,143,133,1,99,193,141,133,5,97,97,100,99,99,128,21,142,18,217,162,133,0,143,133,3,100,99,100,193,141,133,3,100,99,100,128,23,152,18,217,162,133,0,143,133,4,97,97,98,97,193,141,133,4,97,97,98,97,128,17,162,18,217,162,133,0,140,133,2,97,99,193,141,144,65,128,15,172,18,217,162,133,0,137,133,1,100,193,141,64,128,25,182,18,217,162,133,1,99,143,133,4,97,100,99,100,193,141,133,5,99,97,100,99,100,128,18,192,18,217,162,133,0,139,133,4,100,99,97,97,193,141,64,128,21,202,18,217,162,133,3,98,100,99,143,133,0,193,141,133,3,98,100,99,128,19,212,18,217,162,133,2,97,98,141,133,3,97,100,99,193,141,64,128,23,222,18,217,162,133,2,97,98,143,133,2,97,100,193,141,133,4,97,98,97,100,128,20,232,18,217,162,133,3,99,100,97,137,133,2,97,97,193,141,144,65,128,19,242,18,217,162,133,2,100,99,143,133,0,193,141,133,2,100,99,128,19,252,18,217,162,133,2,97,100,143,133,0,193,141,133,2,97,100,128,14,6,19,217,162,133,0,142,133,0,193,141,64,128,19,16,19,217,162,133,0,143,133,2,98,98,193,141,133,2,98,98,128,27,26,19,217,162,133,2,97,97,143,133,4,98,100,97,99,193,141,133,6,97,97,98,100,97,99,128,16,36,19,217,162,133,2,99,98,138,133,0,193,141,64,128,23,46,19,217,162,133,0,143,133,4,98,98,98,100,193,141,133,4,98,98,98,100,128,20,56,19,217,162,133,4,100,99,99,100,141,133,2,99,97,193,141,64,128,23,66,19,217,162,133,1,98,143,133,3,97,99,99,193,141,133,4,98,97,99,99,128,27,76,19,217,162,133,4,98,97,97,100,143,133,2,98,100,193,141,133,6,98,97,97,100,98,100,128,21,86,19,217,162,133,1,99,143,133,2,100,100,193,141,133,3,99,100,100,128,27,96,19,217,162,133,4,100,99,97,97,143,133,2,98,100,193,141,133,6,100,99,97,97,98,100,128,17,106,19,217,162,133,0,139,133,3,100,100,97,193,141,64,128,21,116,19,217,162,133,1,99,143,133,2,97,99,193,141,133,3,99,97,99,128,18,126,19,217,162,133,1,99,137,133,2,98,99,193,141,144,65,128,18,136,19,217,162,133,0,138,133,3,99,99,97,193,141,144,65,128,5,146,19,219,128,0
>5008	8c 85 02 64 62 c1 8d 90 41 80 19 14 00 d9 a2 85
>5018	02 64 64 8f 85 03 62 63 64 c1 8d 85 05 64 64 62
>5028	63 64 80 15 1e 00 d9 a2 85 04 63 61 64 64 8d 85
>5038	03 61 62 61 c1 8d 40 80 13 28 00 d9 a2 85 01 62
>5048	8f 85 01 63 c1 8d 85 02 62 63 80 17 32 00 d9 a2
>5058	85 04 63 64 62 63 8f 85 00 c1 8d 85 04 63 64 62
>5068	63 80 11 3c 00 d9 a2 85 01 61 8f 85 00 c1 8d 85
>5078	01 61 80 11 46 00 d9 a2 85 01 64 8f 85 00 c1 8d
>5088	85 01 64 80 10 50 00 d9 a2 85 00 8c 85 01 63 c1
>5098	8d 90 41 80 12 5a 00 d9 a2 85 01 62 8c 85 02 62
>50a8	63 c1 8d 90 41 80 13 64 00 d9 a2 85 00 8a 85 04
>50b8	61 61 64 64 c1 8d 90 41 80 11 6e 00 d9 a2 85 00
>50c8	8f 85 01 63 c1 8d 85 01 63 80 17 78 00 d9 a2 85
>50d8	01 62 8f 85 03 62 62 63 c1 8d 85 04 62 62 62 63
>50e8	80 16 82 00 d9 a2 85 04 64 61 63 61 89 85 03 63
>50f8	63 62 c1 8d 90 41 80 12 8c 00 d9 a2 85 02 64 62
>5108	8e 85 02 64 62 c1 8d 40 80 14 96 00 d9 a2 85 04
>5118	61 61 62 64 8b 85 02 64 61 c1 8d 40 80 1d a0 00
>5128	d9 a2 85 04 63 62 64 63 8f 85 03 63 61 63 c1 8d
>5138	85 07 63 62 64 63 63 61 63 80 15 aa 00 d9 a2 85
>5148	00 8f 85 03 62 62 64 c1 8d 85 03 62 62 64 80 17
>5158	b4 00 d9 a2 85 04 61 64 62 62 8f 85 00 c1 8d 85
>5168	04 61 64 62 62 80 12 be 00 d9 a2 85 02 61 61 8a
>5178	85 01 62 c1 8d 90 41 80 1d c8 00 d9 a2 85 03 62
>5188	64 61 8f 85 04 61 64 61 64 c1 8d 85 07 62 64 61
>5198	61 64 61 64 80 1d d2 00 d9 a2 85 04 61 61 61 61
>51a8	8f 85 03 62 64 63 c1 8d 85 07 61 61 61 61 62 64
>51b8	63 80 0e dc 00 d9 a2 85 00 8c 85 00 c1 8d 40 80
>51c8	11 e6 00 d9 a2 85 01 62 8b 85 02 63 62 c1 8d 40
>51d8	80 10 f0 00 d9 a2 85 01 62 8b 85 01 62 c1 8d 40
>51e8	80 11 fa 00 d9 a2 85 01 61 8e 85 01 63 c1 8d 90
>51f8	41 80 16 04 01 d9 a2 85 04 62 61 64 63 89 85 04
>5208	64 63 61 62 c1 8d 40 80 15 0e 01 d9 a2 85 03 63
>5218	63 63 8f 85 00 c1 8d 85 03 63 63 63 80 1d 18 01
>5228	d9 a2 85 03 62 63 61 8f 85 04 61 63 63 64 c1 8d
>5238	85 07 62 63 61 61 63 63 64 80 17 22 01 d9 a2 85
>5248	02 63 62 8f 85 02 64 63 c1 8d 85 04 63 62 64 63
>5258	80 13 2c 01 d9 a2 85 04 62 61 64 62 8e 85 00 c1
>5268	8d 90 41 80 17 36 01 d9 a2 85 04 61 62 62 62 8c
>5278	85 04 64 64 62 64 c1 8d 90 41 80 0f 40 01 d9 a2
>5288	85 00 89 85 01 63 c1 8d 40 80 1d 4a 01 d9 a2 85
>5298	03 64 64 64 8f 85 04 64 63 64 62 c1 8d 85 07 64
>52a8	64 64 64 63 64 62 80 15 54 01 d9 a2 85 01 64 8f
>52b8	85 02 63 63 c1 8d 85 03 64 63 63 80 0f 5e 01 d9
>52c8	a2 85 00 8f 85 00 c1 8d 85 00 80 11 68 01 d9 a2
>52d8	85 02 61 63 89 85 01 62 c1 8d 40 80 13 72 01 d9
>52e8	a2 85 02 62 61 8f 85 00 c1 8d 85 02 62 61 80 13
>52f8	7c 01 d9 a2 85 01 63 8a 85 04 62 63 64 64 c1 8d
>5308	40 80 11 86 01 d9 a2 85 00 8e 85 02 64 63 c1 8d
>5318	90 41 80 0e 90 01 d9 a2 85 00 8e 85 00 c1 8d 40
>5328	80 15 9a 01 d9 a2 85 03 63 62 62 8f 85 00 c1 8d
>5338	85 03 63 62 62 80 15 a4 01 d9 a2 85 02 63 62 8f
>5348	85 01 64 c1 8d 85 03 63 62 64 80 12 ae 01 d9 a2
>5358	85 01 62 8b 85 03 64 62 64 c1 8d 40 80 19 b8 01
>5368	d9 a2 85 02 61 62 8f 85 03 62 62 62 c1 8d 85 05
>5378	61 62 62 62 62 80 19 c2 01 d9 a2 85 03 63 63 61
>5388	8f 85 02 64 63 c1 8d 85 05 63 63 61 64 63 80 12
>5398	cc 01 d9 a2 85 00 8e 85 03 63 61 63 c1 8d 90 41
>53a8	80 11 d6 01 d9 a2 85 00 8f 85 01 61 c1 8d 85 01
>53b8	61 80 13 e0 01 d9 a2 85 02 63 64 8f 85 00 c1 8d
>53c8	85 02 63 64 80 1b ea 01 d9 a2 85 04 62 63 61 62
>53d8	8f 85 02 62 63 c1 8d 85 06 62 63 61 62 62 63 80
>53e8	10 f4 01 d9 a2 85 01 61 8d 85 01 64 c1 8d 40 80
>53f8	1d fe 01 d9 a2 85 03 63 64 62 8f 85 04 63 62 62
>5408	64 c1 8d 85 07 63 64 62 63 62 62 64 80 16 08 02
>5418	d9 a2 85 04 64 63 61 63 8e 85 03 63 62 61 c1 8d
>5428	90 41 80 15 12 02 d9 a2 85 02 63 62 89 85 04 62
>5438	63 64 63 c1 8d 90 41 80 11 1c 02 d9 a2 85 01 61
>5448	8c 85 01 62 c1 8d 90 41 80 0f 26 02 d9 a2 85 00
>5458	8f 85 00 c1 8d 85 00 80 1f 30 02 d9 a2 85 04 62
>5468	63 63 61 8f 85 04 62 62 63 63 c1 8d 85 08 62 63
>5478	63 61 62 62 63 63 80 14 3a 02 d9 a2 85 02 64 64
>5488	8b 85 03 63 64 62 c1 8d 90 41 80 14 44 02 d9 a2
>5498	85 03 61 64 64 8b 85 02 61 64 c1 8d 90 41 80 13
>54a8	4e 02 d9 a2 85 01 61 8c 85 03 61 62 62 c1 8d 90
>54b8	41 80 17 58 02 d9 a2 85 01 63 8f 85 03 63 61 63
>54c8	c1 8d 85 04 63 63 61 63 80 12 62 02 d9 a2 85 00
>54d8	8a 85 03 63 62 64 c1 8d 90 41 80 12 6c 02 d9 a2
>54e8	85 03 62 62 62 8a 85 01 61 c1 8d 40 80 1d 76 02
>54f8	d9 a2 85 03 61 62 61 8f 85 04 61 63 61 61 c1 8d
>5508	85 07 61 62 61 61 63 61 61 80 19 80 02 d9 a2 85
>5518	02 61 64 8f 85 03 64 64 63 c1 8d 85 05 61 64 64
>5528	64 63 80 15 8a 02 d9 a2 85 03 63 64 61 8a 85 04
>5538	61 62 61 61 c1 8d 40 80 1b 94 02 d9 a2 85 03 62
>5548	62 61 8f 85 03 61 63 61 c1 8d 85 06 62 62 61 61
>5558	63 61 80 13 9e 02 d9 a2 85 01 61 8e 85 03 63 62
>5568	62 c1 8d 90 41 80 1b a8 02 d9 a2 85 03 61 63 62
>5578	8f 85 03 62 64 64 c1 8d 85 06 61 63 62 62 64 64
>5588	80 17 b2 02 d9 a2 85 03 62 61 63 8f 85 01 61 c1
>5598	8d 85 04 62 61 63 61 80 1d bc 02 d9 a2 85 04 62
>55a8	63 62 64 8f 85 03 62 62 64 c1 8d 85 07 62 63 62
>55b8	64 62 62 64 80 11 c6 02 d9 a2 85 02 63 61 8e 85
>55c8	00 c1 8d 90 41 80 1d d0 02 d9 a2 85 04 63 62 62
>55d8	62 8f 85 03 61 63 61 c1 8d 85 07 63 62 62 62 61
>55e8	63 61 80 1f da 02 d9 a2 85 04 61 61 64 64 8f 85
>55f8	04 61 62 64 64 c1 8d 85 08 61 61 64 64 61 62 64
>5608	64 80 13 e4 02 d9 a2 85 03 61 61 62 8e 85 01 64
>5618	c1 8d 90 41 80 15 ee 02 d9 a2 85 01 64 8f 85 02
>5628	63 64 c1 8d 85 03 64 63 64 80 12 f8 02 d9 a2 85
>5638	00 8c 85 03 61 63 64 c1 8d 90 41 80 16 02 03 d9
>5648	a2 85 04 64 61 63 62 8d 85 04 63 63 62 62 c1 8d
>5658	40 80 13 0c 03 d9 a2 85 01 61 8f 85 01 63 c1 8d
>5668	85 02 61 63 80 15 16 03 d9 a2 85 04 64 62 61 61
>5678	8b 85 03 64 62 63 c1 8d 40 80 13 20 03 d9 a2 85
>5688	02 62 64 8f 85 00 c1 8d 85 02 62 64 80 15 2a 03
>5698	d9 a2 85 04 62 64 64 64 8c 85 02 63 61 c1 8d 90
>56a8	41 80 11 34 03 d9 a2 85 00 8f 85 01 64 c1 8d 85
>56b8	01 64 80 15 3e 03 d9 a2 85 03 63 62 64 8d 85 04
>56c8	61 62 63 63 c1 8d 40 80 10 48 03 d9 a2 85 00 8c
>56d8	85 01 61 c1 8d 90 41 80 14 52 03 d9 a2 85 02 64
>56e8	64 8b 85 04 64 64 64 62 c1 8d 40 80 1f 5c 03 d9
>56f8	a2 85 04 63 61 64 63 8f 85 04 64 64 61 61 c1 8d
>5708	85 08 63 61 64 63 64 64 61 61 80 17 66 03 d9 a2
>5718	85 00 8f 85 04 64 62 63 62 c1 8d 85 04 64 62 63
>5728	62 80 1b 70 03 d9 a2 85 02 64 63 8f 85 04 64 63
>5738	61 62 c1 8d 85 06 64 63 64 63 61 62 80 15 7a 03
>5748	d9 a2 85 02 61 63 8f 85 01 62 c1 8d 85 03 61 63
>5758	62 80 15 84 03 d9 a2 85 03 61 64 64 8e 85 03 62
>5768	63 64 c1 8d 90 41 80 14 8e 03 d9 a2 85 04 61 64
>5778	63 61 8c 85 01 63 c1 8d 90 41 80 13 98 03 d9 a2
>5788	85 01 63 8d 85 04 61 61 63 61 c1 8d 40 80 16 a2
>5798	03 d9 a2 85 04 63 64 62 62 8c 85 04 62 63 62 64
>57a8	c1 8d 40 80 13 ac 03 d9 a2 85 04 61 62 61 63 89
>57b8	85 00 c1 8d 90 41 80 13 b6 03 d9 a2 85 01 62 8b
>57c8	85 04 63 63 63 61 c1 8d 40 80 1b c0 03 d9 a2 85
>57d8	03 62 61 64 8f 85 03 64 63 63 c1 8d 85 06 62 61
>57e8	64 64 63 63 80 13 ca 03 d9 a2 85 00 8c 85 04 64
>57f8	61 63 61 c1 8d 90 41 80 13 d4 03 d9 a2 85 00 8c
>5808	85 04 62 64 61 62 c1 8d 90 41 80 15 de 03 d9 a2
>5818	85 03 64 61 63 8f 85 00 c1 8d 85 03 64 61 63 80
>5828	15 e8 03 d9 a2 85 00 8f 85 03 64 63 64 c1 8d 85
>5838	03 64 63 64 80 19 f2 03 d9 a2 85 03 62 63 63 8f
>5848	85 02 61 63 c1 8d 85 05 62 63 63 61 63 80 13 fc
>5858	03 d9 a2 85 01 63 8f 85 01 62 c1 8d 85 02 63 62
>5868	80 0f 06 04 d9 a2 85 00 8d 85 01 63 c1 8d 40 80
>5878	15 10 04 d9 a2 85 01 64 8f 85 02 62 62 c1 8d 85
>5888	03 64 62 62 80 0e 1a 04 d9 a2 85 00 8b 85 00 c1
>5898	8d 40 80 17 24 04 d9 a2 85 03 63 62 64 8f 85 01
>58a8	64 c1 8d 85 04 63 62 64 64 80 19 2e 04 d9 a2 85
>58b8	02 62 62 8f 85 03 61 63 64 c1 8d 85 05 62 62 61
>58c8	63 64 80 11 38 04 d9 a2 85 01 62 89 85 02 63 61
>58d8	c1 8d 40 80 17 42 04 d9 a2 85 03 64 62 63 8f 85
>58e8	01 64 c1 8d 85 04 64 62 63 64 80 1d 4c 04 d9 a2
>58f8	85 03 62 61 62 8f 85 04 64 62 63 62 c1 8d 85 07
>5908	62 61 62 64 62 63 62 80 1d 56 04 d9 a2 85 04 64
>5918	61 62 61 8f 85 03 64 63 64 c1 8d 85 07 64 61 62
>5928	61 64 63 64 80 11 60 04 d9 a2 85 00 8b 85 03 63
>5938	62 62 c1 8d 40 80 16 6a 04 d9 a2 85 04 64 63 61
>5948	61 8a 85 03 64 63 62 c1 8d 90 41 80 11 74 04 d9
>5958	a2 85 00 8f 85 01 62 c1 8d 85 01 62 80 13 7e 04
>5968	d9 a2 85 03 62 64 63 8d 85 02 62 62 c1 8d 40 80
>5978	14 88 04 d9 a2 85 02 61 62 8c 85 03 64 63 61 c1
>5988	8d 90 41 80 19 92 04 d9 a2 85 01 63 8f 85 04 63
>5998	63 64 61 c1 8d 85 05 63 63 63 64 61 80 14 9c 04
>59a8	d9 a2 85 02 63 62 8d 85 04 62 63 62 61 c1 8d 40
>59b8	80 19 a6 04 d9 a2 85 04 63 63 63 63 8f 85 01 61
>59c8	c1 8d 85 05 63 63 63 63 61 80 1b b0 04 d9 a2 85
>59d8	02 64 63 8f 85 04 62 64 64 63 c1 8d 85 06 64 63
>59e8	62 64 64 63 80 19 ba 04 d9 a2 85 02 61 63 8f 85
>59f8	03 64 63 62 c1 8d 85 05 61 63 64 63 62 80 1d c4
>5a08	04 d9 a2 85 04 64 63 61 61 8f 85 03 62 61 64 c1
>5a18	8d 85 07 64 63 61 61 62 61 64 80 13 ce 04 d9 a2
>5a28	85 02 62 61 8f 85 00 c1 8d 85 02 62 61 80 15 d8
>5a38	04 d9 a2 85 00 8f 85 03 64 63 62 c1 8d 85 03 64
>5a48	63 62 80 1b e2 04 d9 a2 85 04 61 62 62 64 8f 85
>5a58	02 63 62 c1 8d 85 06 61 62 62 64 63 62 80 10 ec
>5a68	04 d9 a2 85 01 61 8b 85 00 c1 8d 90 41 80 10 f6
>5a78	04 d9 a2 85 01 64 8e 85 00 c1 8d 90 41 80 12 00
>5a88	05 d9 a2 85 04 64 61 64 62 8a 85 00 c1 8d 40 80
>5a98	12 0a 05 d9 a2 85 00 8e 85 03 62 63 64 c1 8d 90
>5aa8	41 80 1d 14 05 d9 a2 85 04 64 64 62 64 8f 85 03
>5ab8	64 61 61 c1 8d 85 07 64 64 62 64 64 61 61 80 17
>5ac8	1e 05 d9 a2 85 01 64 8f 85 03 62 64 63 c1 8d 85
>5ad8	04 64 62 64 63 80 10 28 05 d9 a2 85 01 63 8c 85
>5ae8	01 62 c1 8d 40 80 11 32 05 d9 a2 85 01 62 8e 85
>5af8	01 64 c1 8d 90 41 80 1d 3c 05 d9 a2 85 03 64 63
>5b08	64 8f 85 04 63 64 64 64 c1 8d 85 07 64 63 64 63
>5b18	64 64 64 80 10 46 05 d9 a2 85 01 64 8a 85 01 61
>5b28	c1 8d 40 80 14 50 05 d9 a2 85 01 64 8e 85 04 63
>5b38	63 63 61 c1 8d 90 41 80 12 5a 05 d9 a2 85 01 64
>5b48	8c 85 03 62 63 62 c1 8d 40 80 13 64 05 d9 a2 85
>5b58	00 8f 85 02 61 62 c1 8d 85 02 61 62 80 17 6e 05
>5b68	d9 a2 85 04 62 63 64 62 8f 85 00 c1 8d 85 04 62
>5b78	63 64 62 80 17 78 05 d9 a2 85 00 8f 85 04 63 61
>5b88	62 64 c1 8d 85 04 63 61 62 64 80 14 82 05 d9 a2
>5b98	85 01 64 8a 85 04 64 63 61 62 c1 8d 90 41 80 13
>5ba8	8c 05 d9 a2 85 04 62 61 63 64 8b 85 00 c1 8d 90
>5bb8	41 80 17 96 05 d9 a2 85 03 62 63 64 8f 85 01 63
>5bc8	c1 8d 85 04 62 63 64 63 80 14 a0 05 d9 a2 85 01
>5bd8	61 8c 85 04 61 64 64 61 c1 8d 90 41 80 13 aa 05
>5be8	d9 a2 85 01 64 8d 85 04 62 61 64 64 c1 8d 40 80
>5bf8	12 b4 05 d9 a2 85 01 63 8e 85 02 64 61 c1 8d 90
>5c08	41 80 16 be 05 d9 a2 85 03 62 61 64 8b 85 04 61
>5c18	62 62 62 c1 8d 90 41 80 11 c8 05 d9 a2 85 01 64
>5c28	8c 85 02 63 64 c1 8d 40 80 11 d2 05 d9 a2 85 00
>5c38	8d 85 03 62 62 64 c1 8d 40 80 1f dc 05 d9 a2 85
>5c48	04 63 62 63 63 8f 85 04 64 61 63 61 c1 8d 85 08
>5c58	63 62 63 63 64 61 63 61 80 10 e6 05 d9 a2 85 00
>5c68	8c 85 01 61 c1 8d 90 41 80 10 f0 05 d9 a2 85 00
>5c78	8b 85 02 62 62 c1 8d 40 80 16 fa 05 d9 a2 85 03
>5c88	63 64 64 89 85 04 61 62 64 61 c1 8d 90 41 80 19
>5c98	04 06 d9 a2 85 01 63 8f 85 04 64 64 63 61 c1 8d
>5ca8	85 05 63 64 64 63 61 80 13 0e 06 d9 a2 85 04 62
>5cb8	63 62 61 8c 85 01 62 c1 8d 40 80 15 18 06 d9 a2
>5cc8	85 03 64 62 61 8f 85 00 c1 8d 85 03 64 62 61 80
>5cd8	11 22 06 d9 a2 85 00 8b 85 03 61 61 63 c1 8d 40
>5ce8	80 19 2c 06 d9 a2 85 04 61 63 62 61 8f 85 01 61
>5cf8	c1 8d 85 05 61 63 62 61 61 80 15 36 06 d9 a2 85
>5d08	03 61 62 61 8f 85 00 c1 8d 85 03 61 62 61 80 15
>5d18	40 06 d9 a2 85 04 61 61 61 64 8c 85 02 64 63 c1
>5d28	8d 90 41 80 14 4a 06 d9 a2 85 02 64 63 8c 85 04
>5d38	62 64 63 64 c1 8d 40 80 14 54 06 d9 a2 85 04 62
>5d48	63 62 61 8b 85 02 64 64 c1 8d 40 80 19 5e 06 d9
>5d58	a2 85 01 64 8f 85 04 63 62 63 63 c1 8d 85 05 64
>5d68	63 62 63 63 80 15 68 06 d9 a2 85 01 62 8f 85 02
>5d78	61 62 c1 8d 85 03 62 61 62 80 10 72 06 d9 a2 85
>5d88	01 63 8b 85 01 64 c1 8d 40 80 13 7c 06 d9 a2 85
>5d98	00 8f 85 02 64 64 c1 8d 85 02 64 64 80 1b 86 06
>5da8	d9 a2 85 02 64 61 8f 85 04 63 61 62 61 c1 8d 85
>5db8	06 64 61 63 61 62 61 80 15 90 06 d9 a2 85 02 62
>5dc8	64 8f 85 01 62 c1 8d 85 03 62 64 62 80 14 9a 06
>5dd8	d9 a2 85 02 64 61 8d 85 04 64 61 64 64 c1 8d 40
>5de8	80 16 a4 06 d9 a2 85 04 62 61 62 63 89 85 04 64
>5df8	62 61 64 c1 8d 40 80 17 ae 06 d9 a2 85 02 62 61
>5e08	8f 85 02 62 63 c1 8d 85 04 62 61 62 63 80 14 b8
>5e18	06 d9 a2 85 02 61 63 89 85 04 64 63 62 62 c1 8d
>5e28	40 80 15 c2 06 d9 a2 85 00 8f 85 03 62 62 63 c1
>5e38	8d 85 03 62 62 63 80 10 cc 06 d9 a2 85 02 62 63
>5e48	8d 85 00 c1 8d 40 80 14 d6 06 d9 a2 85 04 64 63
>5e58	63 61 89 85 01 62 c1 8d 90 41 80 14 e0 06 d9 a2
>5e68	85 03 62 61 62 8a 85 02 63 63 c1 8d 90 41 80 13
>5e78	ea 06 d9 a2 85 04 63 62 62 62 8e 85 00 c1 8d 90
>5e88	41 80 13 f4 06 d9 a2 85 01 61 8a 85 03 63 62 64
>5e98	c1 8d 90 41 80 1b fe 06 d9 a2 85 04 61 64 62 64
>5ea8	8f 85 02 61 64 c1 8d 85 06 61 64 62 64 61 64 80
>5eb8	15 08 07 d9 a2 85 01 62 8f 85 02 63 64 c1 8d 85
>5ec8	03 62 63 64 80 17 12 07 d9 a2 85 00 8f 85 04 64
>5ed8	63 63 64 c1 8d 85 04 64 63 63 64 80 19 1c 07 d9
>5ee8	a2 85 03 63 63 63 8f 85 02 61 64 c1 8d 85 05 63
>5ef8	63 63 61 64 80 19 26 07 d9 a2 85 01 63 8f 85 04
>5f08	62 61 63 61 c1 8d 85 05 63 62 61 63 61 80 15 30
>5f18	07 d9 a2 85 04 61 64 61 62 8b 85 03 63 64 63 c1
>5f28	8d 40 80 17 3a 07 d9 a2 85 03 61 61 63 8f 85 01
>5f38	61 c1 8d 85 04 61 61 63 61 80 15 44 07 d9 a2 85
>5f48	02 63 63 8f 85 01 64 c1 8d 85 03 63 63 64 80 15
>5f58	4e 07 d9 a2 85 02 62 62 8f 85 01 64 c1 8d 85 03
>5f68	62 62 64 80 17 58 07 d9 a2 85 01 63 8f 85 03 62
>5f78	62 63 c1 8d 85 04 63 62 62 63 80 16 62 07 d9 a2
>5f88	85 03 61 61 62 8c 85 04 63 63 64 62 c1 8d 90 41
>5f98	80 17 6c 07 d9 a2 85 04 64 64 64 63 8f 85 00 c1
>5fa8	8d 85 04 64 64 64 63 80 12 76 07 d9 a2 85 03 61
>5fb8	61 62 89 85 00 c1 8d 90 41 80 11 80 07 d9 a2 85
>5fc8	02 61 62 8b 85 01 62 c1 8d 40 80 13 8a 07 d9 a2
>5fd8	85 02 62 62 8f 85 00 c1 8d 85 02 62 62 80 0f 94
>5fe8	07 d9 a2 85 00 89 85 01 64 c1 8d 40 80 14 9e 07
>5ff8	d9 a2 85 01 63 89 85 04 61 63 63 61 c1 8d 90 41
>6008	80 11 a8 07 d9 a2 85 00 8f 85 01 64 c1 8d 85 01
>6018	64 80 11 b2 07 d9 a2 85 00 8f 85 01 63 c1 8d 85
>6028	01 63 80 19 bc 07 d9 a2 85 03 64 61 61 8f 85 02
>6038	64 64 c1 8d 85 05 64 61 61 64 64 80 11 c6 07 d9
>6048	a2 85 01 63 89 85 01 61 c1 8d 90 41 80 12 d0 07
>6058	d9 a2 85 01 61 89 85 03 63 63 63 c1 8d 40 80 10
>6068	da 07 d9 a2 85 01 63 8c 85 01 61 c1 8d 40 80 11
>6078	e4 07 d9 a2 85 01 62 89 85 02 63 64 c1 8d 40 80
>6088	10 ee 07 d9 a2 85 01 62 8a 85 01 61 c1 8d 40 80
>6098	1b f8 07 d9 a2 85 03 61 64 64 8f 85 03 61 61 61
>60a8	c1 8d 85 06 61 64 64 61 61 61 80 14 02 08 d9 a2
>60b8	85 03 61 62 61 8e 85 02 63 62 c1 8d 90 41 80 13
>60c8	0c 08 d9 a2 85 00 8f 85 02 64 62 c1 8d 85 02 64
>60d8	62 80 15 16 08 d9 a2 85 02 61 62 8e 85 04 61 61
>60e8	64 63 c1 8d 90 41 80 13 20 08 d9 a2 85 00 8f 85
>60f8	02 62 61 c1 8d 85 02 62 61 80 13 2a 08 d9 a2 85
>6108	01 64 8e 85 03 63 63 61 c1 8d 90 41 80 13 34 08
>6118	d9 a2 85 03 62 63 61 8b 85 01 62 c1 8d 90 41 80
>6128	10 3e 08 d9 a2 85 00 8c 85 01 64 c1 8d 90 41 80
>6138	13 48 08 d9 a2 85 01 63 8c 85 03 63 61 64 c1 8d
>6148	90 41 80 1b 52 08 d9 a2 85 03 61 62 64 8f 85 03
>6158	63 63 63 c1 8d 85 06 61 62 64 63 63 63 80 17 5c
>6168	08 d9 a2 85 04 64 61 62 63 8f 85 00 c1 8d 85 04
>6178	64 61 62 63 80 14 66 08 d9 a2 85 04 61 63 61 64
>6188	8d 85 02 64 63 c1 8d 40 80 1f 70 08 d9 a2 85 04
>6198	61 64 61 64 8f 85 04 61 61 62 62 c1 8d 85 08 61
>61a8	64 61 64 61 61 62 62 80 1d 7a 08 d9 a2 85 04 64
>61b8	63 61 61 8f 85 03 64 63 61 c1 8d 85 07 64 63 61
>61c8	61 64 63 61 80 11 84 08 d9 a2 85 01 61 8f 85 00
>61d8	c1 8d 85 01 61 80 1f 8e 08 d9 a2 85 04 62 62 63
>61e8	62 8f 85 04 63 63 62 62 c1 8d 85 08 62 62 63 62
>61f8	63 63 62 62 80 1f 98 08 d9 a2 85 04 63 64 63 64
>6208	8f 85 04 64 62 61 64 c1 8d 85 08 63 64 63 64 64
>6218	62 61 64 80 14 a2 08 d9 a2 85 02 64 62 89 85 03
>6228	62 63 61 c1 8d 90 41 80 12 ac 08 d9 a2 85 02 62
>6238	61 8b 85 01 61 c1 8d 90 41 80 1b b6 08 d9 a2 85
>6248	04 62 62 61 62 8f 85 02 62 64 c1 8d 85 06 62 62
>6258	61 62 62 64 80 17 c0 08 d9 a2 85 04 61 62 62 62
>6268	8f 85 00 c1 8d 85 04 61 62 62 62 80 1d ca 08 d9
>6278	a2 85 03 61 64 61 8f 85 04 62 61 63 64 c1 8d 85
>6288	07 61 64 61 62 61 63 64 80 17 d4 08 d9 a2 85 00
>6298	8f 85 04 63 64 63 62 c1 8d 85 04 63 64 63 62 80
>62a8	16 de 08 d9 a2 85 04 64 64 61 62 8e 85 03 64 62
>62b8	62 c1 8d 90 41 80 15 e8 08 d9 a2 85 01 61 8f 85
>62c8	02 64 64 c1 8d 85 03 61 64 64 80 13 f2 08 d9 a2
>62d8	85 01 62 8b 85 04 63 63 62 62 c1 8d 40 80 15 fc
>62e8	08 d9 a2 85 04 62 63 62 61 8e 85 02 61 61 c1 8d
>62f8	90 41 80 10 06 09 d9 a2 85 01 63 8d 85 01 61 c1
>6308	8d 40 80 17 10 09 d9 a2 85 01 64 8f 85 03 64 64
>6318	64 c1 8d 85 04 64 64 64 64 80 1b 1a 09 d9 a2 85
>6328	04 61 61 63 63 8f 85 02 63 61 c1 8d 85 06 61 61
>6338	63 63 63 61 80 11 24 09 d9 a2 85 00 8f 85 01 62
>6348	c1 8d 85 01 62 80 13 2e 09 d9 a2 85 01 61 8f 85
>6358	01 63 c1 8d 85 02 61 63 80 1f 38 09 d9 a2 85 04
>6368	62 61 63 64 8f 85 04 64 63 61 63 c1 8d 85 08 62
>6378	61 63 64 64 63 61 63 80 1d 42 09 d9 a2 85 03 61
>6388	62 62 8f 85 04 62 62 62 62 c1 8d 85 07 61 62 62
>6398	62 62 62 62 80 15 4c 09 d9 a2 85 02 64 63 8f 85
>63a8	01 61 c1 8d 85 03 64 63 61 80 14 56 09 d9 a2 85
>63b8	02 64 63 8c 85 04 62 62 63 62 c1 8d 40 80 13 60
>63c8	09 d9 a2 85 04 61 63 62 61 8b 85 00 c1 8d 90 41
>63d8	80 13 6a 09 d9 a2 85 03 61 64 62 89 85 02 63 64
>63e8	c1 8d 40 80 0f 74 09 d9 a2 85 00 8a 85 00 c1 8d
>63f8	90 41 80 11 7e 09 d9 a2 85 00 8b 85 03 61 61 62
>6408	c1 8d 40 80 1b 88 09 d9 a2 85 04 64 61 63 64 8f
>6418	85 02 63 63 c1 8d 85 06 64 61 63 64 63 63 80 13
>6428	92 09 d9 a2 85 01 63 8f 85 01 63 c1 8d 85 02 63
>6438	63 80 1b 9c 09 d9 a2 85 02 64 62 8f 85 04 63 62
>6448	61 61 c1 8d 85 06 64 62 63 62 61 61 80 12 a6 09
>6458	d9 a2 85 03 64 62 61 8e 85 00 c1 8d 90 41 80 17
>6468	b0 09 d9 a2 85 02 64 63 8f 85 02 64 61 c1 8d 85
>6478	04 64 63 64 61 80 19 ba 09 d9 a2 85 01 64 8f 85
>6488	04 63 64 62 64 c1 8d 85 05 64 63 64 62 64 80 15
>6498	c4 09 d9 a2 85 03 64 64 61 8f 85 00 c1 8d 85 03
>64a8	64 64 61 80 15 ce 09 d9 a2 85 01 63 8f 85 02 64
>64b8	62 c1 8d 85 03 63 64 62 80 12 d8 09 d9 a2 85 01
>64c8	63 89 85 03 63 62 62 c1 8d 40 80 15 e2 09 d9 a2
>64d8	85 01 63 8f 85 02 61 64 c1 8d 85 03 63 61 64 80
>64e8	13 ec 09 d9 a2 85 02 64 64 8d 85 03 61 61 64 c1
>64f8	8d 40 80 13 f6 09 d9 a2 85 01 64 8d 85 04 64 61
>6508	64 64 c1 8d 40 80 15 00 0a d9 a2 85 00 8f 85 03
>6518	63 61 61 c1 8d 85 03 63 61 61 80 11 0a 0a d9 a2
>6528	85 00 8a 85 02 62 62 c1 8d 90 41 80 16 14 0a d9
>6538	a2 85 04 64 63 64 63 89 85 03 64 63 62 c1 8d 90
>6548	41 80 13 1e 0a d9 a2 85 04 63 61 63 64 8d 85 01
>6558	62 c1 8d 40 80 1b 28 0a d9 a2 85 03 62 61 64 8f
>6568	85 03 64 64 63 c1 8d 85 06 62 61 64 64 64 63 80
>6578	15 32 0a d9 a2 85 00 8f 85 03 61 61 62 c1 8d 85
>6588	03 61 61 62 80 19 3c 0a d9 a2 85 02 62 64 8f 85
>6598	03 63 62 62 c1 8d 85 05 62 64 63 62 62 80 16 46
>65a8	0a d9 a2 85 04 64 61 64 62 8b 85 04 64 64 62 61
>65b8	c1 8d 40 80 13 50 0a d9 a2 85 01 61 89 85 04 62
>65c8	64 61 62 c1 8d 40 80 17 5a 0a d9 a2 85 03 61 63
>65d8	64 8f 85 01 64 c1 8d 85 04 61 63 64 64 80 0f 64
>65e8	0a d9 a2 85 00 8f 85 00 c1 8d 85 00 80 0f 6e 0a
>65f8	d9 a2 85 00 8f 85 00 c1 8d 85 00 80 15 78 0a d9
>6608	a2 85 02 62 63 8f 85 01 61 c1 8d 85 03 62 63 61
>6618	80 19 82 0a d9 a2 85 01 64 8f 85 04 62 62 64 61
>6628	c1 8d 85 05 64 62 62 64 61 80 17 8c 0a d9 a2 85
>6638	00 8f 85 04 63 61 62 62 c1 8d 85 04 63 61 62 62
>6648	80 17 96 0a d9 a2 85 04 62 62 63 63 8a 85 04 63
>6658	63 62 63 c1 8d 90 41 80 17 a0 0a d9 a2 85 04 64
>6668	63 63 63 8f 85 00 c1 8d 85 04 64 63 63 63 80 14
>6678	aa 0a d9 a2 85 01 63 8c 85 04 64 62 62 62 c1 8d
>6688	90 41 80 1b b4 0a d9 a2 85 04 62 63 61 63 8f 85
>6698	02 62 62 c1 8d 85 06 62 63 61 63 62 62 80 0f be
>66a8	0a d9 a2 85 00 8f 85 00 c1 8d 85 00 80 16 c8 0a
>66b8	d9 a2 85 04 62 63 62 64 8d 85 04 64 63 64 62 c1
>66c8	8d 40 80 15 d2 0a d9 a2 85 01 64 8f 85 02 64 63
>66d8	c1 8d 85 03 64 64 63 80 11 dc 0a d9 a2 85 02 63
>66e8	62 8b 85 00 c1 8d 90 41 80 15 e6 0a d9 a2 85 03
>66f8	61 64 63 8f 85 00 c1 8d 85 03 61 64 63 80 17 f0
>6708	0a d9 a2 85 04 64 63 62 64 8f 85 00 c1 8d 85 04
>6718	64 63 62 64 80 17 fa 0a d9 a2 85 02 64 64 8f 85
>6728	02 64 62 c1 8d 85 04 64 64 64 62 80 12 04 0b d9
>6738	a2 85 02 63 62 89 85 01 63 c1 8d 90 41 80 0f 0e
>6748	0b d9 a2 85 00 8f 85 00 c1 8d 85 00 80 13 18 0b
>6758	d9 a2 85 00 8f 85 02 64 63 c1 8d 85 02 64 63 80
>6768	11 22 0b d9 a2 85 02 61 64 8d 85 01 63 c1 8d 40
>6778	80 17 2c 0b d9 a2 85 03 61 61 63 8f 85 01 62 c1
>6788	8d 85 04 61 61 63 62 80 15 36 0b d9 a2 85 03 64
>6798	62 64 8f 85 00 c1 8d 85 03 64 62 64 80 11 40 0b
>67a8	d9 a2 85 00 8f 85 01 62 c1 8d 85 01 62 80 15 4a
>67b8	0b d9 a2 85 03 62 62 62 8f 85 00 c1 8d 85 03 62
>67c8	62 62 80 11 54 0b d9 a2 85 02 64 64 8a 85 01 63
>67d8	c1 8d 40 80 13 5e 0b d9 a2 85 00 8f 85 02 61 61
>67e8	c1 8d 85 02 61 61 80 17 68 0b d9 a2 85 02 63 62
>67f8	8f 85 02 62 64 c1 8d 85 04 63 62 62 64 80 13 72
>6808	0b d9 a2 85 00 8f 85 02 61 63 c1 8d 85 02 61 63
>6818	80 0f 7c 0b d9 a2 85 00 8f 85 00 c1 8d 85 00 80
>6828	0f 86 0b d9 a2 85 00 89 85 01 63 c1 8d 40 80 15
>6838	90 0b d9 a2 85 04 61 62 61 62 8e 85 02 61 63 c1
>6848	8d 90 41 80 17 9a 0b d9 a2 85 03 62 63 64 8f 85
>6858	01 62 c1 8d 85 04 62 63 64 62 80 12 a4 0b d9 a2
>6868	85 04 62 62 64 63 8a 85 00 c1 8d 40 80 10 ae 0b
>6878	d9 a2 85 02 64 61 8a 85 00 c1 8d 40 80 14 b8 0b
>6888	d9 a2 85 03 61 63 63 8a 85 02 63 61 c1 8d 90 41
>6898	80 14 c2 0b d9 a2 85 02 63 62 8e 85 03 62 62 62
>68a8	c1 8d 90 41 80 19 cc 0b d9 a2 85 04 63 62 62 61
>68b8	8f 85 01 63 c1 8d 85 05 63 62 62 61 63 80 10 d6
>68c8	0b d9 a2 85 01 63 8d 85 01 62 c1 8d 40 80 14 e0
>68d8	0b d9 a2 85 02 61 62 8a 85 03 63 62 61 c1 8d 90
>68e8	41 80 15 ea 0b d9 a2 85 02 62 63 8c 85 04 63 64
>68f8	62 61 c1 8d 90 41 80 12 f4 0b d9 a2 85 00 8b 85
>6908	04 63 63 64 64 c1 8d 40 80 13 fe 0b d9 a2 85 02
>6918	63 61 8a 85 03 62 61 64 c1 8d 40 80 12 08 0c d9
>6928	a2 85 03 64 62 63 8b 85 00 c1 8d 90 41 80 15 12
>6938	0c d9 a2 85 03 62 62 61 8a 85 03 63 64 64 c1 8d
>6948	90 41 80 11 1c 0c d9 a2 85 00 8f 85 01 61 c1 8d
>6958	85 01 61 80 19 26 0c d9 a2 85 03 63 62 63 8f 85
>6968	02 62 64 c1 8d 85 05 63 62 63 62 64 80 12 30 0c
>6978	d9 a2 85 03 61 64 61 8e 85 00 c1 8d 90 41 80 11
>6988	3a 0c d9 a2 85 01 64 8f 85 00 c1 8d 85 01 64 80
>6998	11 44 0c d9 a2 85 02 64 61 89 85 00 c1 8d 90 41
>69a8	80 19 4e 0c d9 a2 85 03 61 61 62 8f 85 02 62 61
>69b8	c1 8d 85 05 61 61 62 62 61 80 19 58 0c d9 a2 85
>69c8	04 63 63 63 63 8f 85 01 62 c1 8d 85 05 63 63 63
>69d8	63 62 80 10 62 0c d9 a2 85 01 61 8e 85 01 61 c1
>69e8	8d 40 80 10 6c 0c d9 a2 85 02 64 61 8d 85 00 c1
>69f8	8d 40 80 11 76 0c d9 a2 85 00 8d 85 03 64 63 61
>6a08	c1 8d 40 80 11 80 0c d9 a2 85 00 8f 85 01 61 c1
>6a18	8d 85 01 61 80 19 8a 0c d9 a2 85 02 62 64 8f 85
>6a28	03 62 61 63 c1 8d 85 05 62 64 62 61 63 80 13 94
>6a38	0c d9 a2 85 02 64 63 89 85 03 64 63 61 c1 8d 40
>6a48	80 17 9e 0c d9 a2 85 04 62 61 61 62 8c 85 04 63
>6a58	64 64 64 c1 8d 90 41 80 1b a8 0c d9 a2 85 02 63
>6a68	61 8f 85 04 62 63 61 61 c1 8d 85 06 63 61 62 63
>6a78	61 61 80 11 b2 0c d9 a2 85 00 8f 85 01 63 c1 8d
>6a88	85 01 63 80 14 bc 0c d9 a2 85 04 61 61 63 63 8b
>6a98	85 02 62 62 c1 8d 40 80 14 c6 0c d9 a2 85 03 62
>6aa8	61 61 8d 85 03 61 62 63 c1 8d 40 80 11 d0 0c d9
>6ab8	a2 85 01 64 8f 85 00 c1 8d 85 01 64 80 15 da 0c
>6ac8	d9 a2 85 00 8f 85 03 64 63 61 c1 8d 85 03 64 63
>6ad8	61 80 0f e4 0c d9 a2 85 00 89 85 01 64 c1 8d 40
>6ae8	80 1d ee 0c d9 a2 85 03 63 64 63 8f 85 04 63 62
>6af8	61 61 c1 8d 85 07 63 64 63 63 62 61 61 80 10 f8
>6b08	0c d9 a2 85 01 62 8d 85 01 61 c1 8d 40 80 11 02
>6b18	0d d9 a2 85 01 62 89 85 02 63 61 c1 8d 40 80 15
>6b28	0c 0d d9 a2 85 02 63 62 8f 85 01 63 c1 8d 85 03
>6b38	63 62 63 80 13 16 0d d9 a2 85 04 64 61 63 62 8b
>6b48	85 00 c1 8d 90 41 80 12 20 0d d9 a2 85 03 64 63
>6b58	61 8b 85 00 c1 8d 90 41 80 12 2a 0d d9 a2 85 01
>6b68	62 89 85 03 64 62 63 c1 8d 40 80 1d 34 0d d9 a2
>6b78	85 03 61 61 61 8f 85 04 62 61 64 61 c1 8d 85 07
>6b88	61 61 61 62 61 64 61 80 19 3e 0d d9 a2 85 03 64
>6b98	64 62 8f 85 02 64 64 c1 8d 85 05 64 64 62 64 64
>6ba8	80 15 48 0d d9 a2 85 04 63 61 62 61 8e 85 02 63
>6bb8	64 c1 8d 90 41 80 16 52 0d d9 a2 85 04 61 64 62
>6bc8	63 8e 85 03 64 63 61 c1 8d 90 41 80 19 5c 0d d9
>6bd8	a2 85 03 64 63 62 8f 85 02 64 62 c1 8d 85 05 64
>6be8	63 62 64 62 80 13 66 0d d9 a2 85 04 63 62 63 61
>6bf8	89 85 00 c1 8d 90 41 80 1d 70 0d d9 a2 85 03 62
>6c08	62 64 8f 85 04 62 61 64 61 c1 8d 85 07 62 62 64
>6c18	62 61 64 61 80 15 7a 0d d9 a2 85 02 62 61 8e 85
>6c28	04 63 64 64 61 c1 8d 90 41 80 0f 84 0d d9 a2 85
>6c38	00 8f 85 00 c1 8d 85 00 80 12 8e 0d d9 a2 85 03
>6c48	63 61 64 8d 85 01 64 c1 8d 40 80 13 98 0d d9 a2
>6c58	85 02 62 63 8b 85 02 62 61 c1 8d 90 41 80 15 a2
>6c68	0d d9 a2 85 03 63 62 63 8e 85 03 63 61 62 c1 8d
>6c78	90 41 80 10 ac 0d d9 a2 85 01 64 8a 85 01 62 c1
>6c88	8d 40 80 15 b6 0d d9 a2 85 03 61 63 63 8f 85 00
>6c98	c1 8d 85 03 61 63 63 80 1f c0 0d d9 a2 85 04 61
>6ca8	62 63 62 8f 85 04 61 64 61 62 c1 8d 85 08 61 62
>6cb8	63 62 61 64 61 62 80 15 ca 0d d9 a2 85 03 62 62
>6cc8	62 8f 85 00 c1 8d 85 03 62 62 62 80 15 d4 0d d9
>6cd8	a2 85 04 62 62 61 64 8d 85 03 62 63 62 c1 8d 40
>6ce8	80 17 de 0d d9 a2 85 01 63 8f 85 03 63 62 63 c1
>6cf8	8d 85 04 63 63 62 63 80 13 e8 0d d9 a2 85 01 61
>6d08	8f 85 01 63 c1 8d 85 02 61 63 80 19 f2 0d d9 a2
>6d18	85 04 62 62 61 63 8f 85 01 62 c1 8d 85 05 62 62
>6d28	61 63 62 80 19 fc 0d d9 a2 85 02 63 64 8f 85 03
>6d38	64 61 64 c1 8d 85 05 63 64 64 61 64 80 13 06 0e
>6d48	d9 a2 85 04 62 64 61 62 8e 85 00 c1 8d 90 41 80
>6d58	15 10 0e d9 a2 85 02 62 63 8f 85 01 63 c1 8d 85
>6d68	03 62 63 63 80 1b 1a 0e d9 a2 85 03 64 61 62 8f
>6d78	85 03 61 63 63 c1 8d 85 06 64 61 62 61 63 63 80
>6d88	17 24 0e d9 a2 85 02 64 62 8f 85 02 62 62 c1 8d
>6d98	85 04 64 62 62 62 80 19 2e 0e d9 a2 85 03 61 62
>6da8	63 8f 85 02 61 64 c1 8d 85 05 61 62 63 61 64 80
>6db8	15 38 0e d9 a2 85 00 8f 85 03 62 63 63 c1 8d 85
>6dc8	03 62 63 63 80 15 42 0e d9 a2 85 02 64 63 8a 85
>6dd8	04 64 63 63 63 c1 8d 90 41 80 11 4c 0e d9 a2 85
>6de8	00 8f 85 01 61 c1 8d 85 01 61 80 17 56 0e d9 a2
>6df8	85 00 8f 85 04 63 61 61 61 c1 8d 85 04 63 61 61
>6e08	61 80 11 60 0e d9 a2 85 03 63 63 63 8d 85 00 c1
>6e18	8d 40 80 13 6a 0e d9 a2 85 04 63 62 61 63 8c 85
>6e28	01 61 c1 8d 40 80 15 74 0e d9 a2 85 04 64 64 62
>6e38	63 8a 85 03 64 62 61 c1 8d 40 80 15 7e 0e d9 a2
>6e48	85 01 62 8f 85 02 63 64 c1 8d 85 03 62 63 64 80
>6e58	1d 88 0e d9 a2 85 03 62 61 63 8f 85 04 61 64 64
>6e68	63 c1 8d 85 07 62 61 63 61 64 64 63 80 12 92 0e
>6e78	d9 a2 85 00 8b 85 04 63 64 63 62 c1 8d 40 80 0e
>6e88	9c 0e d9 a2 85 00 8c 85 00 c1 8d 40 80 17 a6 0e
>6e98	d9 a2 85 01 61 8f 85 03 62 64 64 c1 8d 85 04 61
>6ea8	62 64 64 80 15 b0 0e d9 a2 85 04 64 63 61 64 89
>6eb8	85 02 63 64 c1 8d 90 41 80 1f ba 0e d9 a2 85 04
>6ec8	63 61 63 64 8f 85 04 64 63 62 64 c1 8d 85 08 63
>6ed8	61 63 64 64 63 62 64 80 16 c4 0e d9 a2 85 04 62
>6ee8	64 64 63 8d 85 04 63 61 63 61 c1 8d 40 80 17 ce
>6ef8	0e d9 a2 85 00 8f 85 04 63 62 61 64 c1 8d 85 04
>6f08	63 62 61 64 80 15 d8 0e d9 a2 85 00 8f 85 03 61
>6f18	63 62 c1 8d 85 03 61 63 62 80 13 e2 0e d9 a2 85
>6f28	01 63 8f 85 01 61 c1 8d 85 02 63 61 80 1b ec 0e
>6f38	d9 a2 85 03 64 64 64 8f 85 03 61 61 62 c1 8d 85
>6f48	06 64 64 64 61 61 62 80 19 f6 0e d9 a2 85 03 63
>6f58	62 61 8f 85 02 63 62 c1 8d 85 05 63 62 61 63 62
>6f68	80 13 00 0f d9 a2 85 00 8f 85 02 64 64 c1 8d 85
>6f78	02 64 64 80 1b 0a 0f d9 a2 85 04 63 64 61 63 8f
>6f88	85 02 63 62 c1 8d 85 06 63 64 61 63 63 62 80 14
>6f98	14 0f d9 a2 85 01 61 8c 85 04 61 61 63 63 c1 8d
>6fa8	90 41 80 17 1e 0f d9 a2 85 02 61 62 8f 85 02 61
>6fb8	62 c1 8d 85 04 61 62 61 62 80 17 28 0f d9 a2 85
>6fc8	02 64 62 8f 85 02 62 64 c1 8d 85 04 64 62 62 64
>6fd8	80 10 32 0f d9 a2 85 02 64 64 8d 85 00 c1 8d 40
>6fe8	80 14 3c 0f d9 a2 85 02 63 63 8b 85 03 62 64 61
>6ff8	c1 8d 90 41 80 17 46 0f d9 a2 85 01 63 8f 85 03
>7008	62 61 61 c1 8d 85 04 63 62 61 61 80 19 50 0f d9
>7018	a2 85 01 64 8f 85 04 62 64 64 63 c1 8d 85 05 64
>7028	62 64 64 63 80 13 5a 0f d9 a2 85 01 64 8f 85 01
>7038	61 c1 8d 85 02 64 61 80 15 64 0f d9 a2 85 03 61
>7048	64 62 8c 85 03 62 62 62 c1 8d 90 41 80 17 6e 0f
>7058	d9 a2 85 00 8f 85 04 64 63 61 62 c1 8d 85 04 64
>7068	63 61 62 80 10 78 0f d9 a2 85 00 89 85 02 64 63
>7078	c1 8d 40 80 13 82 0f d9 a2 85 01 63 8a 85 04 61
>7088	63 62 61 c1 8d 40 80 1f 8c 0f d9 a2 85 04 61 61
>7098	62 63 8f 85 04 61 63 64 62 c1 8d 85 08 61 61 62
>70a8	63 61 63 64 62 80 12 96 0f d9 a2 85 01 64 8c 85
>70b8	02 64 61 c1 8d 90 41 80 11 a0 0f d9 a2 85 01 62
>70c8	8f 85 00 c1 8d 85 01 62 80 13 aa 0f d9 a2 85 03
>70d8	62 62 61 8b 85 02 64 61 c1 8d 40 80 19 b4 0f d9
>70e8	a2 85 01 61 8f 85 04 61 62 62 61 c1 8d 85 05 61
>70f8	61 62 62 61 80 10 be 0f d9 a2 85 00 89 85 02 62
>7108	62 c1 8d 40 80 10 c8 0f d9 a2 85 02 63 64 8c 85
>7118	00 c1 8d 40 80 19 d2 0f d9 a2 85 03 62 63 63 8f
>7128	85 02 63 61 c1 8d 85 05 62 63 63 63 61 80 1b dc
>7138	0f d9 a2 85 02 61 62 8f 85 04 63 61 62 62 c1 8d
>7148	85 06 61 62 63 61 62 62 80 14 e6 0f d9 a2 85 03
>7158	64 64 62 8a 85 03 63 64 64 c1 8d 40 80 1d f0 0f
>7168	d9 a2 85 03 63 62 63 8f 85 04 64 63 64 62 c1 8d
>7178	85 07 63 62 63 64 63 64 62 80 17 fa 0f d9 a2 85
>7188	03 64 61 63 8f 85 01 61 c1 8d 85 04 64 61 63 61
>7198	80 1b 04 10 d9 a2 85 03 64 64 61 8f 85 03 64 64
>71a8	61 c1 8d 85 06 64 64 61 64 64 61 80 19 0e 10 d9
>71b8	a2 85 03 64 61 62 8f 85 02 63 63 c1 8d 85 05 64
>71c8	61 62 63 63 80 11 18 10 d9 a2 85 01 62 8f 85 00
>71d8	c1 8d 85 01 62 80 11 22 10 d9 a2 85 01 61 8e 85
>71e8	01 64 c1 8d 90 41 80 14 2c 10 d9 a2 85 03 61 63
>71f8	61 8b 85 02 61 63 c1 8d 90 41 80 1b 36 10 d9 a2
>7208	85 02 64 63 8f 85 04 63 61 64 63 c1 8d 85 06 64
>7218	63 63 61 64 63 80 0e 40 10 d9 a2 85 00 8e 85 00
>7228	c1 8d 40 80 17 4a 10 d9 a2 85 00 8f 85 04 61 62
>7238	61 63 c1 8d 85 04 61 62 61 63 80 13 54 10 d9 a2
>7248	85 01 61 8f 85 01 63 c1 8d 85 02 61 63 80 15 5e
>7258	10 d9 a2 85 03 61 63 61 8f 85 00 c1 8d 85 03 61
>7268	63 61 80 10 68 10 d9 a2 85 00 8d 85 02 62 63 c1
>7278	8d 40 80 11 72 10 d9 a2 85 02 64 61 8b 85 00 c1
>7288	8d 90 41 80 11 7c 10 d9 a2 85 01 62 8f 85 00 c1
>7298	8d 85 01 62 80 14 86 10 d9 a2 85 04 64 64 64 64
>72a8	8b 85 01 62 c1 8d 90 41 80 17 90 10 d9 a2 85 04
>72b8	63 63 62 62 8f 85 00 c1 8d 85 04 63 63 62 62 80
>72c8	15 9a 10 d9 a2 85 02 63 63 8e 85 04 62 62 61 62
>72d8	c1 8d 90 41 80 19 a4 10 d9 a2 85 02 61 63 8f 85
>72e8	03 64 61 61 c1 8d 85 05 61 63 64 61 61 80 14 ae
>72f8	10 d9 a2 85 03 62 61 63 8c 85 03 61 64 63 c1 8d
>7308	40 80 12 b8 10 d9 a2 85 00 8d 85 04 62 62 61 64
>7318	c1 8d 40 80 1f c2 10 d9 a2 85 04 62 62 62 61 8f
>7328	85 04 62 64 63 62 c1 8d 85 08 62 62 62 61 62 64
>7338	63 62 80 1f cc 10 d9 a2 85 04 64 61 62 63 8f 85
>7348	04 62 61 64 61 c1 8d 85 08 64 61 62 63 62 61 64
>7358	61 80 17 d6 10 d9 a2 85 03 62 63 63 8f 85 01 64
>7368	c1 8d 85 04 62 63 63 64 80 11 e0 10 d9 a2 85 01
>7378	64 8a 85 02 62 64 c1 8d 40 80 10 ea 10 d9 a2 85
>7388	00 8e 85 01 63 c1 8d 90 41 80 16 f4 10 d9 a2 85
>7398	04 63 62 63 63 89 85 03 63 62 62 c1 8d 90 41 80
>73a8	13 fe 10 d9 a2 85 03 62 61 61 89 85 01 62 c1 8d
>73b8	90 41 80 12 08 11 d9 a2 85 00 8c 85 03 64 63 61
>73c8	c1 8d 90 41 80 14 12 11 d9 a2 85 02 61 62 89 85
>73d8	04 62 61 61 63 c1 8d 40 80 0e 1c 11 d9 a2 85 00
>73e8	8e 85 00 c1 8d 40 80 16 26 11 d9 a2 85 04 61 63
>73f8	63 64 8b 85 04 63 63 64 64 c1 8d 40 80 1b 30 11
>7408	d9 a2 85 04 61 64 61 64 8f 85 02 61 63 c1 8d 85
>7418	06 61 64 61 64 61 63 80 16 3a 11 d9 a2 85 04 62
>7428	64 62 64 8b 85 03 61 61 64 c1 8d 90 41 80 15 44
>7438	11 d9 a2 85 03 64 61 63 89 85 04 64 64 61 63 c1
>7448	8d 40 80 13 4e 11 d9 a2 85 01 64 8f 85 01 62 c1
>7458	8d 85 02 64 62 80 1f 58 11 d9 a2 85 04 62 61 61
>7468	62 8f 85 04 64 61 64 63 c1 8d 85 08 62 61 61 62
>7478	64 61 64 63 80 12 62 11 d9 a2 85 00 8d 85 04 63
>7488	64 64 64 c1 8d 40 80 15 6c 11 d9 a2 85 03 62 61
>7498	62 8c 85 03 63 64 63 c1 8d 90 41 80 1d 76 11 d9
>74a8	a2 85 04 61 64 63 64 8f 85 03 61 61 62 c1 8d 85
>74b8	07 61 64 63 64 61 61 62 80 11 80 11 d9 a2 85 01
>74c8	62 8f 85 00 c1 8d 85 01 62 80 19 8a 11 d9 a2 85
>74d8	01 63 8f 85 04 63 61 63 63 c1 8d 85 05 63 63 61
>74e8	63 63 80 14 94 11 d9 a2 85 01 61 8e 85 04 63 63
>74f8	61 64 c1 8d 90 41 80 13 9e 11 d9 a2 85 01 63 8b
>7508	85 03 62 63 62 c1 8d 90 41 80 14 a8 11 d9 a2 85
>7518	03 62 64 63 8d 85 03 63 62 63 c1 8d 40 80 11 b2
>7528	11 d9 a2 85 00 8f 85 01 63 c1 8d 85 01 63 80 13
>7538	bc 11 d9 a2 85 00 8e 85 04 64 62 63 63 c1 8d 90
>7548	41 80 10 c6 11 d9 a2 85 01 63 8e 85 00 c1 8d 90
>7558	41 80 13 d0 11 d9 a2 85 01 62 8d 85 04 62 63 62
>7568	61 c1 8d 40 80 1d da 11 d9 a2 85 03 64 61 64 8f
>7578	85 04 64 64 64 62 c1 8d 85 07 64 61 64 64 64 64
>7588	62 80 10 e4 11 d9 a2 85 01 62 8e 85 00 c1 8d 90
>7598	41 80 12 ee 11 d9 a2 85 04 62 64 62 64 8c 85 00
>75a8	c1 8d 40 80 12 f8 11 d9 a2 85 00 8c 85 03 61 63
>75b8	64 c1 8d 90 41 80 0f 02 12 d9 a2 85 01 63 8d 85
>75c8	00 c1 8d 40 80 1d 0c 12 d9 a2 85 03 61 63 62 8f
>75d8	85 04 63 63 64 62 c1 8d 85 07 61 63 62 63 63 64
>75e8	62 80 1b 16 12 d9 a2 85 02 64 64 8f 85 04 62 63
>75f8	62 63 c1 8d 85 06 64 64 62 63 62 63 80 10 20 12
>7608	d9 a2 85 00 8c 85 01 64 c1 8d 90 41 80 17 2a 12
>7618	d9 a2 85 04 63 61 63 63 8f 85 00 c1 8d 85 04 63
>7628	61 63 63 80 10 34 12 d9 a2 85 00 8d 85 02 61 62
>7638	c1 8d 40 80 19 3e 12 d9 a2 85 04 61 62 61 63 8f
>7648	85 01 62 c1 8d 85 05 61 62 61 63 62 80 17 48 12
>7658	d9 a2 85 00 8f 85 04 64 62 62 61 c1 8d 85 04 64
>7668	62 62 61 80 1b 52 12 d9 a2 85 03 64 63 63 8f 85
>7678	03 62 61 62 c1 8d 85 06 64 63 63 62 61 62 80 17
>7688	5c 12 d9 a2 85 01 62 8f 85 03 62 61 62 c1 8d 85
>7698	04 62 62 61 62 80 17 66 12 d9 a2 85 03 63 61 61
>76a8	8f 85 01 64 c1 8d 85 04 63 61 61 64 80 1d 70 12
>76b8	d9 a2 85 03 64 61 63 8f 85 04 64 61 61 62 c1 8d
>76c8	85 07 64 61 63 64 61 61 62 80 10 7a 12 d9 a2 85
>76d8	01 61 8e 85 00 c1 8d 90 41 80 19 84 12 d9 a2 85
>76e8	04 61 61 64 63 8f 85 01 63 c1 8d 85 05 61 61 64
>76f8	63 63 80 15 8e 12 d9 a2 85 00 8f 85 03 64 63 64
>7708	c1 8d 85 03 64 63 64 80 17 98 12 d9 a2 85 00 8f
>7718	85 04 61 61 62 61 c1 8d 85 04 61 61 62 61 80 11
>7728	a2 12 d9 a2 85 00 8c 85 02 61 63 c1 8d 90 41 80
>7738	0f ac 12 d9 a2 85 00 89 85 01 64 c1 8d 40 80 19
>7748	b6 12 d9 a2 85 01 63 8f 85 04 61 64 63 64 c1 8d
>7758	85 05 63 61 64 63 64 80 12 c0 12 d9 a2 85 00 8b
>7768	85 04 64 63 61 61 c1 8d 40 80 15 ca 12 d9 a2 85
>7778	03 62 64 63 8f 85 00 c1 8d 85 03 62 64 63 80 13
>7788	d4 12 d9 a2 85 02 61 62 8d 85 03 61 64 63 c1 8d
>7798	40 80 17 de 12 d9 a2 85 02 61 62 8f 85 02 61 64
>77a8	c1 8d 85 04 61 62 61 64 80 14 e8 12 d9 a2 85 03
>77b8	63 64 61 89 85 02 61 61 c1 8d 90 41 80 13 f2 12
>77c8	d9 a2 85 02 64 63 8f 85 00 c1 8d 85 02 64 63 80
>77d8	13 fc 12 d9 a2 85 02 61 64 8f 85 00 c1 8d 85 02
>77e8	61 64 80 0e 06 13 d9 a2 85 00 8e 85 00 c1 8d 40
>77f8	80 13 10 13 d9 a2 85 00 8f 85 02 62 62 c1 8d 85
>7808	02 62 62 80 1b 1a 13 d9 a2 85 02 61 61 8f 85 04
>7818	62 64 61 63 c1 8d 85 06 61 61 62 64 61 63 80 10
>7828	24 13 d9 a2 85 02 63 62 8a 85 00 c1 8d 40 80 17
>7838	2e 13 d9 a2 85 00 8f 85 04 62 62 62 64 c1 8d 85
>7848	04 62 62 62 64 80 14 38 13 d9 a2 85 04 64 63 63
>7858	64 8d 85 02 63 61 c1 8d 40 80 17 42 13 d9 a2 85
>7868	01 62 8f 85 03 61 63 63 c1 8d 85 04 62 61 63 63
>7878	80 1b 4c 13 d9 a2 85 04 62 61 61 64 8f 85 02 62
>7888	64 c1 8d 85 06 62 61 61 64 62 64 80 15 56 13 d9
>7898	a2 85 01 63 8f 85 02 64 64 c1 8d 85 03 63 64 64
>78a8	80 1b 60 13 d9 a2 85 04 64 63 61 61 8f 85 02 62
>78b8	64 c1 8d 85 06 64 63 61 61 62 64 80 11 6a 13 d9
>78c8	a2 85 00 8b 85 03 64 64 61 c1 8d 40 80 15 74 13
>78d8	d9 a2 85 01 63 8f 85 02 61 63 c1 8d 85 03 63 61
>78e8	63 80 12 7e 13 d9 a2 85 01 63 89 85 02 62 63 c1
>78f8	8d 90 41 80 12 88 13 d9 a2 85 00 8a 85 03 63 63
>7908	61 c1 8d 90 41 80 05 92 13 db 80 00

;******  Return to file: ../source/main/00start.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/assert.asm

.101a					Command_Assert:
.101a	20 ee 15	jsr $15ee			jsr 	EvaluateRoot 				; what is being asserted.
.101d	20 3e 1a	jsr $1a3e			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.1025	20 ad 1a	jsr $1aad			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad 6a 08	lda $086a			lda 	endMemory					; set high memory = end of memory
.102d	8d 6c 08	sta $086c			sta 	highMemory
.1030	ad 6b 08	lda $086b			lda 	endMemory+1
.1033	8d 6d 08	sta $086d			sta 	highMemory+1
.1036	ad 68 08	lda $0868			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad 69 08	lda $0869			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d 6e 08	sta $086e			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d 6f 08	sta $086f			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 64 10	jsr $1064			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	68		pla				pla
.1062	a8		tay				tay
.1063	60		rts				rts
.1064					AdvanceLowMemoryByte:
.1064	18		clc				clc
.1065	6d 6e 08	adc $086e			adc 	lowMemory
.1068	8d 6e 08	sta $086e			sta 	lowMemory
.106b	90 03		bcc $1070			bcc 	_ALMBExit
.106d	ee 6f 08	inc $086f			inc 	lowMemory+1
.1070					_ALMBExit:
.1070	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/if.asm

.1071					CommandIf:
.1071	20 ee 15	jsr $15ee			jsr 	EvaluateRoot 				; if what ?
.1074	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1076	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.1078	f0 04		beq $107e			beq 	_IfSimple
.107a	c9 a0		cmp #$a0			cmp 	#TKW_THEN
.107c	d0 13		bne $1091			bne 	_IfComplex
.107e					_IfSimple:
.107e	20 3e 1a	jsr $1a3e			jsr 	MInt32Zero					; check if TOS zero
.1081	f0 08		beq $108b			beq 	_IfEOL 						; go to next line.
.1083	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1085	c8		iny				iny
.1086	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; is it GOTO ?
.1088	f0 04		beq $108e			beq 	_IfGoto 					; do the Goto code
.108a	60		rts				rts 								; else continue on this line.
.108b					_IfEOL:
.108b	4c 56 12	jmp $1256			jmp 	AdvanceNextLine 			; go to next line
.108e					_IfGoto:
.108e	4c 6a 12	jmp $126a			jmp 	CommandGoto
.1091					_IfComplex:
.1091	4c 78 11	jmp $1178			jmp 	Unimplemented

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/let.asm

.1094					CommandLet:
.1094	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1096	20 28 16	jsr $1628			jsr 	EvaluateReference
.1099	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.109b	20 7f 1a	jsr $1a7f			jsr 	CheckToken
.109e	e8		inx				inx 								; do RHS
.109f	20 f0 15	jsr $15f0			jsr 	Evaluate 					; evaluate and derefernce
.10a2	ca		dex				dex
.10a3	20 a7 10	jsr $10a7			jsr 	WriteValue 					; write it out
.10a6	60		rts				rts
.10a7					WriteValue:
.10a7	98		tya				tya
.10a8	48		pha				pha
.10a9	20 fb 10	jsr $10fb			jsr 	_WVSetTemp0 				; set temp0 to point to target address.
.10ac	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10ae	55 41		eor $41,x			eor 	esType+1,x
.10b0	29 40		and #$40			and 	#$40
.10b2	d0 50		bne $1104			bne		_WVType
.10b4	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10b6	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10b8	29 40		and #$40			and 	#$40
.10ba	d0 30		bne $10ec			bne 	_WVCopyData2
.10bc	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10be	15 41		ora $41,x			ora 	esType+1,x
.10c0	4a		lsr a				lsr 	a
.10c1	90 18		bcc $10db			bcc 	_WVCopyData4
.10c3	b5 40		lda $40,x			lda 	esType,x
.10c5	4a		lsr a				lsr 	a
.10c6	90 3c		bcc $1104			bcc 	_WVType
.10c8	e8		inx				inx 								; force the value being written to be a float.
.10c9	20 bb 12	jsr $12bb			jsr 	BPMakeFloat
.10cc	ca		dex				dex
.10cd	20 fb 10	jsr $10fb			jsr 	_WVSetTemp0 				; set Temp0 to write address
.10d0	e8		inx				inx
.10d1	8a		txa				txa
.10d2	a2 1c		ldx #$1c		ldx	#28
.10d4	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.10d7	aa		tax				tax
.10d8	4c f8 10	jmp $10f8			jmp 	_WVCopyExit
.10db					_WVCopyData4:
.10db	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.10dd	29 20		and #$20			and 	#$20
.10df	d0 11		bne $10f2			bne 	_WVCopyData1
.10e1	a0 03		ldy #$03			ldy 	#3
.10e3	b5 61		lda $61,x			lda 	esInt3+1,x
.10e5	91 04		sta ($04),y			sta 	(temp0),y
.10e7	88		dey				dey
.10e8	b5 59		lda $59,x			lda 	esInt2+1,x
.10ea	91 04		sta ($04),y			sta 	(temp0),y
.10ec					_WVCopyData2:
.10ec	a0 01		ldy #$01			ldy 	#1
.10ee	b5 51		lda $51,x			lda 	esInt1+1,x
.10f0	91 04		sta ($04),y			sta 	(temp0),y
.10f2					_WVCopyData1:
.10f2	a0 00		ldy #$00			ldy 	#0
.10f4	b5 49		lda $49,x			lda 	esInt0+1,x
.10f6	91 04		sta ($04),y			sta 	(temp0),y
.10f8					_WVCopyExit:
.10f8	68		pla				pla
.10f9	a8		tay				tay
.10fa	60		rts				rts
.10fb					_WVSetTemp0:
.10fb	b5 48		lda $48,x			lda 	esInt0,x
.10fd	85 04		sta $04				sta 	temp0
.10ff	b5 50		lda $50,x			lda 	esInt1,x
.1101	85 05		sta $05				sta 	temp0+1
.1103	60		rts				rts
.1104					_WVType:
.1104	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1106	20 ad 1a	jsr $1aad			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/run.asm

.1109					Command_Run:
.1109	a2 ff		ldx #$ff			ldx 	#$FF
.110b	9a		txs				txs
.110c	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.110f	20 6b 11	jsr $116b			jsr 	ResetCodeAddress
.1112	a0 03		ldy #$03			ldy 	#3
.1114					CRNextInstruction:
.1114	64 79		stz $79				stz 	softMemAlloc+1
.1116	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1118	10 1c		bpl $1136			bpl 	_CRNotToken
.111a	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.111c	b0 0c		bcs $112a			bcs 	_CRExecute
.111e	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; unary is ignored.
.1120	b0 56		bcs $1178			bcs 	Unimplemented
.1122	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.1124	b0 04		bcs $112a			bcs 	_CRExecute
.1126	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1128	b0 16		bcs $1140			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.112a					_CRExecute:
.112a	c8		iny				iny 								; consume it.
.112b	0a		asl a				asl 	a 							; double it, losing most significant bit.
.112c	aa		tax				tax
.112d	20 33 11	jsr $1133			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1130	4c 14 11	jmp $1114			jmp 	CRNextInstruction
.1133					_CRRunRoutine:
.1133	7c 7c 11	jmp ($117c,x)			jmp 	(Group0Vectors,x)
.1136					_CRNotToken:
.1136	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1138	b0 3e		bcs $1178			bcs 	Unimplemented
.113a					_CRDefaultLet:
.113a	20 94 10	jsr $1094			jsr 	CommandLet 					; do the default, LET
.113d	4c 14 11	jmp $1114			jmp 	CRNextInstruction
.1140					_CRCheckIndirect:
.1140	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.1142	f0 f6		beq $113a			beq 	_CRDefaultLet
.1144	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.1146	f0 f2		beq $113a			beq 	_CRDefaultLet
.1148	d0 2e		bne $1178			bne 	Unimplemented
.114a					CommandShift1:
.114a	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.114c	10 2a		bpl $1178			bpl 	Unimplemented 				; we have an error as this should not happen.
.114e	0a		asl a				asl 	a 							; double into X
.114f	aa		tax				tax
.1150	c8		iny				iny 								; advance over it.
.1151	20 57 11	jsr $1157			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1154	4c 14 11	jmp $1114			jmp 	CRNextInstruction
.1157					_RunIt:
.1157	7c 30 12	jmp ($1230,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.115a					CommandShift2:
.115a	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.115c	10 1a		bpl $1178			bpl 	Unimplemented 				; we have an error as this should not happen.
.115e	0a		asl a				asl 	a 							; double into X
.115f	aa		tax				tax
.1160	c8		iny				iny 								; advance over it.
.1161	20 67 11	jsr $1167			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.1164	4c 14 11	jmp $1114			jmp 	CRNextInstruction
.1167					_RunIt:
.1167	7c 40 12	jmp ($1240,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.116a					CommandColon:
.116a	60		rts				rts
.116b					ResetCodeAddress:
.116b	ad 68 08	lda $0868			lda 	basePage 					; copy basePage to code Pointer
.116e	85 02		sta $02				sta 	codePtr
.1170	ad 69 08	lda $0869			lda 	basePage+1
.1173	85 03		sta $03				sta 	codePtr+1
.1175	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.1177	60		rts				rts
.1178					Unimplemented:
>1178	db						.byte 	$DB
.1179	4c 78 11	jmp $1178			jmp 	Unimplemented

;******  Processing file: ../source/main/commands/../../generated/tokenvectors0.inc

.117c					Group0Vectors:
>117c	56 12					.word	AdvanceNextLine          ; $80 [[eol]]
>117e	4a 11					.word	CommandShift1            ; $81 [[sh1]]
>1180	5a 11					.word	CommandShift2            ; $82 [[sh2]]
>1182	78 11					.word	Unimplemented            ; $83 [[sh3]]
>1184	78 11					.word	Unimplemented            ; $84 [[fpc]]
>1186	78 11					.word	Unimplemented            ; $85 [[str]]
>1188	5d 13					.word	AndHandler               ; $86 and
>118a	4a 13					.word	OrHandler                ; $87 or
>118c	37 13					.word	XorHandler               ; $88 xor
>118e	7f 14					.word	CompareGreaterEq         ; $89 >=
>1190	89 14					.word	CompareLessEq            ; $8a <=
>1192	6b 14					.word	CompareGreater           ; $8b >
>1194	61 14					.word	CompareLess              ; $8c <
>1196	57 14					.word	CompareEquals            ; $8d =
>1198	75 14					.word	CompareNotEquals         ; $8e <>
>119a	c8 12					.word	AddHandler               ; $8f +
>119c	eb 12					.word	SubHandler               ; $90 -
>119e	83 13					.word	ShrHandler               ; $91 >>
>11a0	70 13					.word	ShlHandler               ; $92 <<
>11a2	fe 12					.word	MulHandler               ; $93 *
>11a4	11 13					.word	DivHandler               ; $94 /
>11a6	24 13					.word	ModHandler               ; $95 mod
>11a8	bc 13					.word	PowerHandler             ; $96 ^
>11aa	96 13					.word	WordRefHandler           ; $97 !
>11ac	a9 13					.word	ByteRefHandler           ; $98 ?
>11ae	78 11					.word	Unimplemented            ; $99 repeat
>11b0	78 11					.word	Unimplemented            ; $9a while
>11b2	78 11					.word	Unimplemented            ; $9b for
>11b4	71 10					.word	CommandIf                ; $9c if
>11b6	78 11					.word	Unimplemented            ; $9d until
>11b8	78 11					.word	Unimplemented            ; $9e wend
>11ba	78 11					.word	Unimplemented            ; $9f next
>11bc	78 11					.word	Unimplemented            ; $a0 then
>11be	78 11					.word	Unimplemented            ; $a1 endif
>11c0	c6 15					.word	UnaryParenthesis         ; $a2 (
>11c2	85 16					.word	UnaryLen                 ; $a3 len(
>11c4	c9 16					.word	UnarySgn                 ; $a4 sgn(
>11c6	b2 16					.word	UnaryAbs                 ; $a5 abs(
>11c8	22 17					.word	Unary_Random             ; $a6 random(
>11ca	6c 17					.word	Unary_Page               ; $a7 page
>11cc	13 1a					.word	MInt32True               ; $a8 true
>11ce	17 1a					.word	MInt32False              ; $a9 false
>11d0	37 17					.word	Unary_Min                ; $aa min(
>11d2	3b 17					.word	Unary_Max                ; $ab max(
>11d4	78 11					.word	Unimplemented            ; $ac sys(
>11d6	78 11					.word	Unimplemented            ; $ad timer(
>11d8	78 11					.word	Unimplemented            ; $ae event(
>11da	78 11					.word	Unimplemented            ; $af get(
>11dc	78 11					.word	Unimplemented            ; $b0 inkey(
>11de	78 11					.word	Unimplemented            ; $b1 alloc(
>11e0	78 11					.word	Unimplemented            ; $b2 chr$(
>11e2	78 11					.word	Unimplemented            ; $b3 left$(
>11e4	78 11					.word	Unimplemented            ; $b4 mid$(
>11e6	78 11					.word	Unimplemented            ; $b5 right$(
>11e8	78 11					.word	Unimplemented            ; $b6 str$(
>11ea	78 11					.word	Unimplemented            ; $b7 val(
>11ec	e0 16					.word	UnaryPeek                ; $b8 peek(
>11ee	e6 16					.word	UnaryDeek                ; $b9 deek(
>11f0	ec 16					.word	UnaryLeek                ; $ba leek(
>11f2	a3 16					.word	UnaryAsc                 ; $bb asc(
>11f4	78 11					.word	Unimplemented            ; $bc int(
>11f6	78 11					.word	Unimplemented            ; $bd float(
>11f8	7a 17					.word	UnaryReference           ; $be @
>11fa	90 17					.word	UnaryComplement          ; $bf ~
>11fc	8d 17					.word	UnaryHexMarker           ; $c0 &
>11fe	78 11					.word	Unimplemented            ; $c1 )
>1200	6a 11					.word	CommandColon             ; $c2 :
>1202	78 11					.word	Unimplemented            ; $c3 ,
>1204	78 11					.word	Unimplemented            ; $c4 ;
>1206	78 11					.word	Unimplemented            ; $c5 ]
>1208	78 11					.word	Unimplemented            ; $c6 to
>120a	78 11					.word	Unimplemented            ; $c7 step
>120c	78 11					.word	Unimplemented            ; $c8 proc
>120e	78 11					.word	Unimplemented            ; $c9 endproc
>1210	78 11					.word	Unimplemented            ; $ca local
>1212	78 11					.word	Unimplemented            ; $cb rem
>1214	94 10					.word	CommandLet               ; $cc let
>1216	78 11					.word	Unimplemented            ; $cd '
>1218	78 11					.word	Unimplemented            ; $ce [
>121a	78 11					.word	Unimplemented            ; $cf input
>121c	78 11					.word	Unimplemented            ; $d0 else
>121e	78 11					.word	Unimplemented            ; $d1 vdu
>1220	78 11					.word	Unimplemented            ; $d2 read
>1222	78 11					.word	Unimplemented            ; $d3 data
>1224	78 11					.word	Unimplemented            ; $d4 restore
>1226	78 11					.word	Unimplemented            ; $d5 print
>1228	6a 12					.word	CommandGOTO              ; $d6 goto
>122a	78 11					.word	Unimplemented            ; $d7 gosub
>122c	78 11					.word	Unimplemented            ; $d8 return
>122e	1a 10					.word	Command_Assert           ; $d9 assert
>1230	4e 12					.word	CommandStop              ; $da stop
>1232	53 12					.word	CommandEnd               ; $db end
>1234	78 11					.word	Unimplemented            ; $dc dim
>1236	78 11					.word	Unimplemented            ; $dd poke
>1238	78 11					.word	Unimplemented            ; $de doke
>123a	78 11					.word	Unimplemented            ; $df loke

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors1.inc

.123c					Group1Vectors:
>123c	28 10					.word	CommandClear             ; $86 clear
>123e	78 11					.word	Unimplemented            ; $87 load
>1240	78 11					.word	Unimplemented            ; $88 save
>1242	78 11					.word	Unimplemented            ; $89 list
>1244	78 11					.word	Unimplemented            ; $8a new
>1246	09 11					.word	Command_Run              ; $8b run
>1248	78 11					.word	Unimplemented            ; $8c code
>124a	78 11					.word	Unimplemented            ; $8d option

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors2.inc

.124c					Group2Vectors:
>124c	78 11					.word	Unimplemented            ; $86 vpoke

;******  Return to file: ../source/main/commands/run.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/stopend.asm

.124e					CommandStop:
.124e	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.1250	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.1253					CommandEnd:
.1253	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1256					AdvanceNextLine:
.1256	a0 00		ldy #$00			ldy 	#0 							; get offset
.1258	b1 02		lda ($02),y			lda 	(codePtr),y
.125a	18		clc				clc 								; add to codePtr
.125b	65 02		adc $02				adc 	codePtr
.125d	85 02		sta $02				sta 	codePtr
.125f	90 02		bcc $1263			bcc 	_ANLNoCarry
.1261	e6 03		inc $03				inc 	codePtr+1
.1263					_ANLNoCarry:
.1263	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1265	f0 ec		beq $1253			beq 	CommandEnd 					; execute END
.1267	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.1269	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/transfer.asm

.126a					CommandGOTO:
.126a	20 ee 15	jsr $15ee			jsr 	EvaluateRoot 				; get GOTO line from stack top.
.126d					GotoTOS:
.126d	20 6b 11	jsr $116b			jsr 	ResetCodeAddress 			; simple search.
.1270					_GotoSearch:
.1270	a0 00		ldy #$00			ldy 	#0 							; get offset
.1272	b1 02		lda ($02),y			lda 	(codePtr),y
.1274	f0 21		beq $1297			beq 	_GotoError 					; not found.
.1276	c8		iny				iny									; check LSB match
.1277	b1 02		lda ($02),y			lda 	(codePtr),y
.1279	d5 48		cmp $48,x			cmp 	esInt0,x
.127b	d0 07		bne $1284			bne 	_GotoNext
.127d	c8		iny				iny
.127e	b1 02		lda ($02),y			lda 	(codePtr),y
.1280	d5 50		cmp $50,x			cmp 	esInt1,x
.1282	f0 10		beq $1294			beq 	_GotoFound
.1284					_GotoNext:
.1284	a0 00		ldy #$00			ldy 	#0 							; go next line
.1286	b1 02		lda ($02),y			lda 	(codePtr),y
.1288	18		clc				clc
.1289	65 02		adc $02				adc 	codePtr
.128b	85 02		sta $02				sta 	codePtr
.128d	90 e1		bcc $1270			bcc 	_GotoSearch
.128f	e6 03		inc $03				inc 	codePtr+1
.1291	4c 70 12	jmp $1270			jmp 	_GotoSearch
.1294					_GotoFound:
.1294	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1296	60		rts				rts
.1297					_GotoError:
.1297	a2 0b		ldx #$0b			ldx 	#ErrorID_LineNumber
.1299	20 ad 1a	jsr $1aad			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/binary.asm

.129c					BinaryProcess:
.129c	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.129e	15 41		ora $41,x			ora 	esType+1,x
.12a0	0a		asl a				asl 	a
.12a1	30 0e		bmi $12b1			bmi 	_BPStringType 				; if one is set, then string type.
.12a3	18		clc				clc 								; return CC for integer
.12a4	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.12a6	f0 08		beq $12b0			beq 	_BPExit 					; if both integer then return with CC.
.12a8	20 b6 12	jsr $12b6			jsr 	BPMakeBothFloat 			; make both float
.12ab	a9 01		lda #$01			lda 	#$01 						; set result type to float
.12ad	95 40		sta $40,x			sta 	esType,x
.12af	38		sec				sec 								; and return with carry set.
.12b0					_BPExit:
.12b0	60		rts				rts
.12b1					_BPStringType:
.12b1	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.12b3	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.12b6					BPMakeBothFloat:
.12b6	e8		inx				inx
.12b7	20 bb 12	jsr $12bb			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.12ba	ca		dex				dex
.12bb					BPMakeFloat:
.12bb	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.12bd	4a		lsr a				lsr 	a
.12be	b0 07		bcs $12c7			bcs 	_BPIsFloat
.12c0	8a		txa				txa
.12c1	a2 18		ldx #$18		ldx	#24
.12c3	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.12c6	aa		tax				tax
.12c7					_BPIsFloat:
.12c7	60		rts				rts
.12c8					AddHandler:
.12c8	20 99 14	jsr $1499			jsr 	DereferenceTwo 				; dereference top two on stack.
.12cb	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.12cd	35 41		and $41,x			and 	esType+1,x
.12cf	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.12d1	d0 10		bne $12e3			bne 	_AHStringConcat				; concatenate strings.
.12d3	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.12d6	b0 03		bcs $12db			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12d8	4c 09 19	jmp $1909			jmp 	MInt32Add 							; else do it as integer.
.12db					_IsFPOperation:
.12db	8a		txa				txa 								; call the relevant fp routine
.12dc	a2 02		ldx #$02		ldx	#2
.12de	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.12e1	aa		tax				tax
.12e2	60		rts				rts
.12e3					_AHStringConcat:
.12e3	8a		txa				txa
.12e4	a2 00		ldx #$00		ldx	#0
.12e6	20 87 1b	jsr $1b87		jsr	stringHandler
.12e9	aa		tax				tax
.12ea	60		rts				rts
.12eb					SubHandler:
.12eb	20 99 14	jsr $1499			jsr 	DereferenceTwo
.12ee	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.12f1	b0 03		bcs $12f6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.12f3	4c 23 19	jmp $1923			jmp 	MInt32Sub 							; else do it as integer.
.12f6					_IsFPOperation:
.12f6	8a		txa				txa 								; call the relevant fp routine
.12f7	a2 10		ldx #$10		ldx	#16
.12f9	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.12fc	aa		tax				tax
.12fd	60		rts				rts
.12fe					MulHandler:
.12fe	20 99 14	jsr $1499			jsr 	DereferenceTwo
.1301	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.1304	b0 03		bcs $1309			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1306	4c 3d 19	jmp $193d			jmp 	MInt32Multiply 							; else do it as integer.
.1309					_IsFPOperation:
.1309	8a		txa				txa 								; call the relevant fp routine
.130a	a2 0a		ldx #$0a		ldx	#10
.130c	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.130f	aa		tax				tax
.1310	60		rts				rts
.1311					DivHandler:
.1311	20 99 14	jsr $1499			jsr 	DereferenceTwo
.1314	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.1317	b0 03		bcs $131c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1319	4c 17 18	jmp $1817			jmp 	MInt32SDivide 							; else do it as integer.
.131c					_IsFPOperation:
.131c	8a		txa				txa 								; call the relevant fp routine
.131d	a2 06		ldx #$06		ldx	#6
.131f	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.1322	aa		tax				tax
.1323	60		rts				rts
.1324					ModHandler:
.1324	20 99 14	jsr $1499			jsr 	DereferenceTwo
.1327	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.132a	b0 03		bcs $132f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.132c	4c 95 18	jmp $1895			jmp 	MInt32Modulus 							; else do it as integer.
.132f					_IsFPOperation:
.132f	8a		txa				txa 								; call the relevant fp routine
.1330	a2 08		ldx #$08		ldx	#8
.1332	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.1335	aa		tax				tax
.1336	60		rts				rts
.1337					XorHandler:
.1337	20 99 14	jsr $1499			jsr 	DereferenceTwo
.133a	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.133d	b0 03		bcs $1342			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.133f	4c c9 17	jmp $17c9			jmp 	MInt32Xor 							; else do it as integer.
.1342					_IsFPOperation:
.1342	8a		txa				txa 								; call the relevant fp routine
.1343	a2 08		ldx #$08		ldx	#8
.1345	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.1348	aa		tax				tax
.1349	60		rts				rts
.134a					OrHandler:
.134a	20 99 14	jsr $1499			jsr 	DereferenceTwo
.134d	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.1350	b0 03		bcs $1355			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1352	4c b0 17	jmp $17b0			jmp 	MInt32Or 							; else do it as integer.
.1355					_IsFPOperation:
.1355	8a		txa				txa 								; call the relevant fp routine
.1356	a2 08		ldx #$08		ldx	#8
.1358	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.135b	aa		tax				tax
.135c	60		rts				rts
.135d					AndHandler:
.135d	20 99 14	jsr $1499			jsr 	DereferenceTwo
.1360	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.1363	b0 03		bcs $1368			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1365	4c 97 17	jmp $1797			jmp 	MInt32And 							; else do it as integer.
.1368					_IsFPOperation:
.1368	8a		txa				txa 								; call the relevant fp routine
.1369	a2 08		ldx #$08		ldx	#8
.136b	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.136e	aa		tax				tax
.136f	60		rts				rts
.1370					ShlHandler:
.1370	20 99 14	jsr $1499			jsr 	DereferenceTwo
.1373	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.1376	b0 03		bcs $137b			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1378	4c f1 13	jmp $13f1			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.137b					_IsFPOperation:
.137b	8a		txa				txa 								; call the relevant fp routine
.137c	a2 08		ldx #$08		ldx	#8
.137e	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.1381	aa		tax				tax
.1382	60		rts				rts
.1383					ShrHandler:
.1383	20 99 14	jsr $1499			jsr 	DereferenceTwo
.1386	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.1389	b0 03		bcs $138e			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.138b	4c f4 13	jmp $13f4			jmp 	MInt32ShiftRightX 							; else do it as integer.
.138e					_IsFPOperation:
.138e	8a		txa				txa 								; call the relevant fp routine
.138f	a2 08		ldx #$08		ldx	#8
.1391	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.1394	aa		tax				tax
.1395	60		rts				rts
.1396					WordRefHandler:
.1396	20 99 14	jsr $1499			jsr 	DereferenceTwo
.1399	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.139c	b0 03		bcs $13a1			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.139e	4c e3 13	jmp $13e3			jmp 	MInt32WordIndirect 							; else do it as integer.
.13a1					_IsFPOperation:
.13a1	8a		txa				txa 								; call the relevant fp routine
.13a2	a2 08		ldx #$08		ldx	#8
.13a4	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.13a7	aa		tax				tax
.13a8	60		rts				rts
.13a9					ByteRefHandler:
.13a9	20 99 14	jsr $1499			jsr 	DereferenceTwo
.13ac	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.13af	b0 03		bcs $13b4			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.13b1	4c e7 13	jmp $13e7			jmp 	MInt32ByteIndirect 							; else do it as integer.
.13b4					_IsFPOperation:
.13b4	8a		txa				txa 								; call the relevant fp routine
.13b5	a2 08		ldx #$08		ldx	#8
.13b7	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.13ba	aa		tax				tax
.13bb	60		rts				rts
.13bc					PowerHandler:
.13bc	20 99 14	jsr $1499			jsr 	DereferenceTwo
.13bf	20 9c 12	jsr $129c			jsr 	BinaryProcess 				; check to see if either is float
.13c2	b0 03		bcs $13c7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.13c4	4c cf 13	jmp $13cf			jmp 	PowerInteger 							; else do it as integer.
.13c7					_IsFPOperation:
.13c7	8a		txa				txa 								; call the relevant fp routine
.13c8	a2 14		ldx #$14		ldx	#20
.13ca	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.13cd	aa		tax				tax
.13ce	60		rts				rts
.13cf					PowerInteger:
.13cf	20 b6 12	jsr $12b6			jsr 	BPMakeBothFloat				; make them float.
.13d2	8a		txa				txa
.13d3	a2 14		ldx #$14		ldx	#20
.13d5	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.13d8	a2 12		ldx #$12		ldx	#18
.13da	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.13dd	aa		tax				tax
.13de	a9 00		lda #$00			lda 	#0 							; make type integer
.13e0	95 40		sta $40,x			sta 	esType,x
.13e2	60		rts				rts
.13e3					Mint32WordIndirect:
.13e3	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.13e5	d0 02		bne $13e9			bne 	Min32Indirect
.13e7					Mint32ByteIndirect:
.13e7	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.13e9					Min32Indirect:
.13e9	48		pha				pha 								; save the indirection
.13ea	20 09 19	jsr $1909			jsr 	MInt32Add 					; add a!b a?b
.13ed	68		pla				pla 								; and set the type to reference.
.13ee	95 40		sta $40,x			sta 	esType,x
.13f0	60		rts				rts
.13f1					Mint32ShiftLeftX:
.13f1	18		clc				clc
.13f2	90 01		bcc $13f5			bcc 	Mint32Shift
.13f4					Mint32ShiftRightX:
.13f4	38		sec				sec
.13f5					Mint32Shift:
.13f5	08		php				php 								; save carry flag on stack.
.13f6	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.13f8	15 59		ora $59,x			ora 	esInt2+1,x
.13fa	15 61		ora $61,x			ora 	esInt3+1,x
.13fc	d0 1e		bne $141c			bne 	_MShiftZero
.13fe	b5 49		lda $49,x			lda 	esInt0+1,x
.1400	c9 20		cmp #$20			cmp 	#32
.1402	b0 18		bcs $141c			bcs 	_MShiftZero
.1404					_MShiftLoop:
.1404	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1406	f0 12		beq $141a			beq 	_MShiftExit
.1408	d6 49		dec $49,x			dec 	esInt0+1,x
.140a	28		plp				plp 								; restore and save carry
.140b	08		php				php
.140c	90 06		bcc $1414			bcc 	_MShiftLeft
.140e	20 35 1a	jsr $1a35			jsr 	Mint32ShiftRight
.1411	4c 04 14	jmp $1404			jmp 	_MShiftLoop
.1414					_MShiftLeft:
.1414	20 2c 1a	jsr $1a2c			jsr 	Mint32ShiftLeft
.1417	4c 04 14	jmp $1404			jmp 	_MShiftLoop
.141a					_MShiftExit:
.141a	28		plp				plp	 								; throw saved carry and exit
.141b	60		rts				rts
.141c					_MShiftZero:
.141c	4c 17 1a	jmp $1a17			jmp 	MInt32False 				; return 0.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/compare.asm

.141f					PerformComparison:
.141f	20 99 14	jsr $1499			jsr 	DereferenceTwo 				; make both values.
.1422	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.1424	35 41		and $41,x			and 	esType+1,x
.1426	0a		asl a				asl 	a
.1427	30 1d		bmi $1446			bmi 	_PCIsString
.1429	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.142b	15 41		ora $41,x			ora 	esType+1,x
.142d	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.142e	30 22		bmi $1452			bmi 	_PCError
.1430	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.1432	f0 0f		beq $1443			beq 	_PCIsInteger 				; if not two integers
.1434	20 b6 12	jsr $12b6			jsr 	BPMakeBothFloat 			; make both float
.1437	8a		txa				txa
.1438	a2 04		ldx #$04		ldx	#4
.143a	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.143d	86 0a		stx $0a				stx 	tempShort 					; save result
.143f	aa		tax				tax
.1440	a5 0a		lda $0a				lda 	tempShort
.1442	60		rts				rts
.1443					_PCIsInteger:
.1443	4c e2 17	jmp $17e2			jmp 	MInt32Compare
.1446					_PCIsString:
.1446	8a		txa				txa 								; A has SP
.1447	a2 02		ldx #$02		ldx	#2
.1449	20 87 1b	jsr $1b87		jsr	stringHandler
.144c	86 0a		stx $0a				stx 	tempShort 					; save result
.144e	aa		tax				tax 								; put SP back in X and get result.
.144f	a5 0a		lda $0a				lda 	tempShort
.1451	60		rts				rts
.1452					_PCError:
.1452	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1454	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.1457					CompareEquals:
.1457	20 1f 14	jsr $141f			jsr 	PerformComparison
.145a	c9 00		cmp #$00			cmp 	#$00
.145c	f0 35		beq $1493			beq  	CompareTrue
.145e	4c 96 14	jmp $1496			jmp 	CompareFalse
.1461					CompareLess:
.1461	20 1f 14	jsr $141f			jsr 	PerformComparison
.1464	c9 ff		cmp #$ff			cmp 	#$FF
.1466	f0 2b		beq $1493			beq  	CompareTrue
.1468	4c 96 14	jmp $1496			jmp 	CompareFalse
.146b					CompareGreater:
.146b	20 1f 14	jsr $141f			jsr 	PerformComparison
.146e	c9 01		cmp #$01			cmp 	#$01
.1470	f0 21		beq $1493			beq  	CompareTrue
.1472	4c 96 14	jmp $1496			jmp 	CompareFalse
.1475					CompareNotEquals:
.1475	20 1f 14	jsr $141f			jsr 	PerformComparison
.1478	c9 00		cmp #$00			cmp 	#$00
.147a	d0 17		bne $1493			bne  	CompareTrue
.147c	4c 96 14	jmp $1496			jmp 	CompareFalse
.147f					CompareGreaterEq:
.147f	20 1f 14	jsr $141f			jsr 	PerformComparison
.1482	c9 ff		cmp #$ff			cmp 	#$FF
.1484	d0 0d		bne $1493			bne  	CompareTrue
.1486	4c 96 14	jmp $1496			jmp 	CompareFalse
.1489					CompareLessEq:
.1489	20 1f 14	jsr $141f			jsr 	PerformComparison
.148c	c9 01		cmp #$01			cmp 	#$01
.148e	d0 03		bne $1493			bne  	CompareTrue
.1490	4c 96 14	jmp $1496			jmp 	CompareFalse
.1493					CompareTrue:
.1493	4c 13 1a	jmp $1a13			jmp 	MInt32True
.1496					CompareFalse:
.1496	4c 17 1a	jmp $1a17			jmp 	MInt32False

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/dereference.asm

.1499					DereferenceTwo:
.1499	e8		inx				inx
.149a	20 9e 14	jsr $149e			jsr 	DereferenceOne
.149d	ca		dex				dex
.149e					DereferenceOne:
.149e	b5 40		lda $40,x			lda 	esType,x
.14a0	10 3d		bpl $14df			bpl 	_DRNotReference 			; is it a reference ?
.14a2	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.14a3	b0 3b		bcs $14e0			bcs 	_DRFloatDeReference
.14a5	98		tya				tya
.14a6	48		pha				pha
.14a7	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.14a9	85 04		sta $04				sta 	temp0
.14ab	b5 50		lda $50,x			lda 	esInt1,x
.14ad	85 05		sta $05				sta 	temp0+1
.14af	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.14b1	95 50		sta $50,x			sta 	esInt1,x
.14b3	95 58		sta $58,x			sta 	esInt2,x
.14b5	95 60		sta $60,x			sta 	esInt3,x
.14b7	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.14b9	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.14bb	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.14bc	30 0d		bmi $14cb			bmi 	_DeRefString 				; string, 2 bytes only
.14be	d0 11		bne $14d1			bne 	_DeRefByte 					; byte 1 byte only
.14c0					_DeRefLong:
.14c0	a0 03		ldy #$03			ldy 	#3
.14c2	b1 04		lda ($04),y			lda 	(temp0),y
.14c4	95 60		sta $60,x			sta 	esInt3,x
.14c6	88		dey				dey
.14c7	b1 04		lda ($04),y			lda 	(temp0),y
.14c9	95 58		sta $58,x			sta 	esInt2,x
.14cb					_DeRefString:
.14cb	a0 01		ldy #$01			ldy 	#1
.14cd	b1 04		lda ($04),y			lda 	(temp0),y
.14cf	95 50		sta $50,x			sta 	esInt1,x
.14d1					_DeRefByte:
.14d1	a0 00		ldy #$00			ldy 	#0
.14d3	b1 04		lda ($04),y			lda 	(temp0),y
.14d5	95 48		sta $48,x			sta 	esInt0,x
.14d7	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.14d9	29 40		and #$40			and 	#$40
.14db	95 40		sta $40,x			sta 	esType,x
.14dd	68		pla				pla
.14de	a8		tay				tay
.14df					_DRNotReference
.14df	60		rts				rts
.14e0					_DRFloatDereference:
.14e0	8a		txa				txa
.14e1							floatingpoint_deref
.14e1	aa		tax				tax
.14e2	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.14e4	95 40		sta $40,x			sta 	esType,x
.14e6	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/evaluate.asm

.14e7					EvaluateLevel:
.14e7	48		pha				pha 								; save precedence level.
.14e8	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.14ea	95 48		sta $48,x			sta 	esInt0,x
.14ec	95 50		sta $50,x			sta 	esInt1,x
.14ee	95 58		sta $58,x			sta 	esInt2,x
.14f0	95 60		sta $60,x			sta 	esInt3,x
.14f2	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.14f4	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.14f6	30 21		bmi $1519			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.14f8	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.14f9	30 0a		bmi $1505			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.14fb	8a		txa				txa 								; stack level in X
.14fc	a2 00		ldx #$00		ldx	#0
.14fe	20 b1 1b	jsr $1bb1		jsr	variableHandler
.1501	aa		tax				tax
.1502	4c 42 15	jmp $1542			jmp		_ELHasTerm
.1505					_ELIsConstant:
.1505	4a		lsr a				lsr 	a 							; get the value back
.1506	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1508	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.150a					_ELCheckNext:
.150a	c8		iny				iny 								; look at next
.150b	b1 02		lda ($02),y			lda 	(codePtr),y
.150d	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.150f	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.1511	b0 2f		bcs $1542			bcs 	_ELHasTerm 					; done getting the constant.
.1513	20 3b 16	jsr $163b			jsr 	ELShiftByteIn 				; shift byte into position.
.1516	4c 0a 15	jmp $150a			jmp 	_ELCheckNext
.1519					_ELIsToken:
.1519	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.151b	f0 0f		beq $152c			beq 	_ELIsString
.151d	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.151f	d0 5f		bne $1580			bne 	_ELCheckUnary
.1521	8a		txa				txa 								; put X into A
.1522	c8		iny				iny 								; skip over the float marker
.1523	a2 16		ldx #$16		ldx	#22
.1525	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.1528	aa		tax				tax 								; restore X
.1529	4c 42 15	jmp $1542			jmp 	_ELHasTerm
.152c					_ELIsString:
.152c	98		tya				tya 								; address of string is codePtr+y+1
.152d	38		sec				sec
.152e	65 02		adc $02				adc 	codePtr
.1530	95 48		sta $48,x			sta 	esInt0,x
.1532	a5 03		lda $03				lda 	codePtr+1
.1534	69 00		adc #$00			adc 	#0
.1536	95 50		sta $50,x			sta 	esInt1,x
.1538	a9 40		lda #$40			lda 	#$40 						; set type to string value
.153a	95 40		sta $40,x			sta 	esType,x
.153c	c8		iny				iny 								; skip over string.
.153d	98		tya				tya
.153e	38		sec				sec									; +1 for the length itself.
.153f	71 02		adc ($02),y			adc 	(codePtr),y
.1541	a8		tay				tay 								; and fall through to term loop code.
.1542					_ELHasTerm:
.1542	b1 02		lda ($02),y			lda 	(codePtr),y
.1544	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.1546	90 04		bcc $154c			bcc 	_ELPopExit
.1548	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.154a	90 02		bcc $154e			bcc 	_ELHasBinaryTerm
.154c					_ELPopExit:
.154c	68		pla				pla
.154d					_ELExit:
.154d	60		rts				rts
.154e					_ELHasBinaryTerm:
.154e	84 0a		sty $0a				sty 	tempShort 					; save position
.1550	a8		tay				tay 								; use token as an index and get the precedence.
.1551	b9 e3 15	lda $15e3,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.1554	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1556	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.1558	68		pla				pla 								; restore current level.
.1559	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.155b	b0 f0		bcs $154d			bcs 	_ELExit
.155d	48		pha				pha 								; save current level back on the stack.
.155e	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.1560	48		pha				pha
.1561	c8		iny				iny
.1562	e8		inx				inx 								; calculate the RHS at the operator precedence.
.1563	a5 0a		lda $0a				lda 	tempShort
.1565	20 e7 14	jsr $14e7			jsr 	EvaluateLevel
.1568	ca		dex				dex
.1569	68		pla				pla 								; get the operator back out.
.156a					_ELExecuteA:
.156a	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.156c	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.156d	aa		tax				tax
.156e	bd 7c 11	lda $117c,x			lda 	Group0Vectors,x
.1571	85 04		sta $04				sta 	temp0
.1573	bd 7d 11	lda $117d,x			lda 	Group0Vectors+1,x
.1576	85 05		sta $05				sta 	temp0+1
.1578	a6 0a		ldx $0a				ldx 	tempShort
.157a	20 c3 15	jsr $15c3			jsr 	_ELCallTemp0
.157d	4c 42 15	jmp $1542			jmp 	_ELHasTerm 					; and loop back round.
.1580					_ELCheckUnary:
.1580	c8		iny				iny 								; skip over token.
.1581	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.1583	f0 15		beq $159a			beq 	_ELMinus
.1585	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1587	f0 28		beq $15b1			beq 	_ELIndirect
.1589	c9 98		cmp #$98			cmp 	#TKW_QMARK
.158b	f0 24		beq $15b1			beq 	_ELIndirect
.158d	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.158f	90 04		bcc $1595			bcc 	_ELUSyntax
.1591	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.1593	90 d5		bcc $156a			bcc 	_ELExecuteA 				; if so do that token.
.1595					_ELUSyntax:
.1595	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1597	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.159a					_ELMinus:
.159a	20 d8 15	jsr $15d8			jsr 	EvaluateNumericTerm 		; get a number to negate.
.159d	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.159f	f0 0a		beq $15ab			beq 	_ELMinusInteger
.15a1	8a		txa				txa
.15a2	a2 0c		ldx #$0c		ldx	#12
.15a4	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.15a7	aa		tax				tax
.15a8	4c 42 15	jmp $1542			jmp 	_ELHasTerm
.15ab					_ELMinusInteger:
.15ab	20 d1 19	jsr $19d1			jsr 	MInt32Negate 				; do int negate
.15ae	4c 42 15	jmp $1542			jmp 	_ELHasTerm
.15b1					_ELIndirect:
.15b1	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.15b2	20 e1 15	jsr $15e1			jsr 	EvaluateIntegerTerm 		; integer address
.15b5	68		pla				pla
.15b6	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.15b8	f0 02		beq $15bc			beq 	_ELHaveModifier
.15ba	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.15bc					_ELHaveModifier:
.15bc	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.15be	95 40		sta $40,x			sta 	esType,x
.15c0	4c 42 15	jmp $1542			jmp 	_ELHasTerm
.15c3					_ELCallTemp0:
.15c3	6c 04 00	jmp ($0004)			jmp 	(temp0)
.15c6					UnaryParenthesis:
.15c6	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.15c8	20 e7 14	jsr $14e7			jsr 	EvaluateLevel
.15cb	20 8a 1a	jsr $1a8a			jsr 	CheckRightParen 			; check for )
.15ce	60		rts				rts
.15cf					EvaluateTerm:
.15cf	a9 0f		lda #$0f			lda 	#15
.15d1	20 e7 14	jsr $14e7			jsr 	EvaluateLevel
.15d4	20 9e 14	jsr $149e			jsr 	DereferenceOne
.15d7	60		rts				rts
.15d8					EvaluateNumericTerm:
.15d8	20 cf 15	jsr $15cf			jsr 	EvaluateTerm
.15db	b5 40		lda $40,x			lda 	esType,x
.15dd	0a		asl a				asl 	a 							; see if it's a string.
.15de	30 09		bmi $15e9			bmi 	ENTType
.15e0	60		rts				rts
.15e1					EvaluateIntegerTerm:
.15e1	20 cf 15	jsr $15cf			jsr 	EvaluateTerm
.15e4	b5 40		lda $40,x			lda 	esType,x
.15e6	d0 01		bne $15e9			bne 	ENTType
.15e8	60		rts				rts
.15e9					ENTType:
.15e9	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.15eb	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.15ee					EvaluateRoot:
.15ee	a2 00		ldx #$00			ldx 	#0
.15f0					Evaluate:
.15f0	a9 00		lda #$00			lda 	#0
.15f2	20 e7 14	jsr $14e7			jsr 	EvaluateLevel
.15f5	20 9e 14	jsr $149e			jsr 	DereferenceOne
.15f8	60		rts				rts
.15f9					EvaluateNumeric:
.15f9	20 f0 15	jsr $15f0			jsr 	Evaluate
.15fc	b5 40		lda $40,x			lda 	esType,x
.15fe	0a		asl a				asl 	a 							; see if it's a string.
.15ff	30 e8		bmi $15e9			bmi 	ENTType
.1601	4a		lsr a				lsr 	a 							; shift float flag into carry.
.1602	4a		lsr a				lsr 	a
.1603	60		rts				rts
.1604					EvaluateString:
.1604	20 f0 15	jsr $15f0			jsr 	Evaluate
.1607	b5 40		lda $40,x			lda 	esType,x
.1609	0a		asl a				asl 	a 							; see if it's a string.
.160a	10 dd		bpl $15e9			bpl 	ENTType
.160c	60		rts				rts
.160d					EvaluateInteger:
.160d	20 f0 15	jsr $15f0			jsr 	Evaluate
.1610	b5 40		lda $40,x			lda 	esType,x
.1612	d0 d5		bne $15e9			bne 	ENTType
.1614	60		rts				rts
.1615					EvaluateSmallInteger:
.1615	20 0d 16	jsr $160d			jsr 	EvaluateInteger
.1618	b5 41		lda $41,x			lda 	esType+1,x
.161a	15 42		ora $42,x			ora 	esType+2,x
.161c	15 43		ora $43,x			ora 	esType+3,x
.161e	d0 03		bne $1623			bne 	_ESIValue
.1620	b5 40		lda $40,x			lda 	esType,x
.1622	60		rts				rts
.1623					_ESIValue:
.1623	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1625	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.1628					EvaluateReference:
.1628	ad 7a 16	lda $167a			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.162b	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.162c	e9 01		sbc #$01			sbc 	#1
.162e	20 e7 14	jsr $14e7			jsr 	EvaluateLevel
.1631	b5 40		lda $40,x			lda 	esType,x
.1633	10 01		bpl $1636			bpl 	_ERFail
.1635	60		rts				rts
.1636					_ERFail:
.1636	a2 0a		ldx #$0a			ldx 	#ErrorID_NoReference
.1638	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.163b					ELShiftByteIn:
.163b	48		pha				pha 								; save bits to shift in.
.163c	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.163e	48		pha				pha
.163f	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.1641	95 60		sta $60,x			sta 	esInt3,x
.1643	b5 50		lda $50,x			lda 	esInt1,x
.1645	95 58		sta $58,x			sta 	esInt2,x
.1647	b5 48		lda $48,x			lda 	esInt0,x
.1649	95 50		sta $50,x			sta 	esInt1,x
.164b	a9 00		lda #$00			lda 	#0
.164d	95 48		sta $48,x			sta 	esInt0,x
.164f	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.1650	29 03		and #$03			and 	#3 							; only want lower 2 bits
.1652	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.1654					_ELShiftLoop:
.1654	4a		lsr a				lsr 	a
.1655	76 60		ror $60,x			ror 	esInt3,x
.1657	76 58		ror $58,x			ror 	esInt2,x
.1659	76 50		ror $50,x			ror 	esInt1,x
.165b	76 48		ror $48,x			ror 	esInt0,x
.165d	c9 01		cmp #$01			cmp 	#1
.165f	d0 f3		bne $1654			bne 	_ELShiftLoop
.1661	68		pla				pla 								; get original 6 bit value and OR in.
.1662	29 3f		and #$3f			and 	#$3F
.1664	15 48		ora $48,x			ora 	esInt0,x
.1666	95 48		sta $48,x			sta 	esInt0,x
.1668	60		rts				rts
.1669					ELBinaryOperatorInfo:

;******  Processing file: ../source/main/evaluate/../../generated/binarystructinfo.inc

>1669	01					.byte	$01			; $86 and
>166a	01					.byte	$01			; $87 or
>166b	01					.byte	$01			; $88 xor
>166c	02					.byte	$02			; $89 >=
>166d	02					.byte	$02			; $8a <=
>166e	02					.byte	$02			; $8b >
>166f	02					.byte	$02			; $8c <
>1670	02					.byte	$02			; $8d =
>1671	02					.byte	$02			; $8e <>
>1672	03					.byte	$03			; $8f +
>1673	03					.byte	$03			; $90 -
>1674	04					.byte	$04			; $91 >>
>1675	04					.byte	$04			; $92 <<
>1676	04					.byte	$04			; $93 *
>1677	04					.byte	$04			; $94 /
>1678	04					.byte	$04			; $95 mod
>1679	05					.byte	$05			; $96 ^
>167a	06					.byte	$06			; $97 !
>167b	06					.byte	$06			; $98 ?
>167c	82					.byte	$82			; $99 repeat
>167d	82					.byte	$82			; $9a while
>167e	82					.byte	$82			; $9b for
>167f	82					.byte	$82			; $9c if
>1680	80					.byte	$80			; $9d until
>1681	80					.byte	$80			; $9e wend
>1682	80					.byte	$80			; $9f next
>1683	80					.byte	$80			; $a0 then
>1684	80					.byte	$80			; $a1 endif

;******  Return to file: ../source/main/evaluate/evaluate.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unary.asm

.1685					UnaryLen:
.1685	20 93 16	jsr $1693			jsr 	ULStart
.1688					ULFinish:
.1688	b1 04		lda ($04),y			lda 	(temp0),y
.168a	a4 0a		ldy $0a				ldy 	tempShort
.168c	20 26 1a	jsr $1a26			jsr 	MInt32Set8Bit
.168f	20 8a 1a	jsr $1a8a			jsr 	CheckRightParen
.1692	60		rts				rts
.1693	20 04 16	jsr $1604	ULStart:jsr 	EvaluateString
.1696	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1698	85 04		sta $04				sta 	temp0
.169a	b5 50		lda $50,x			lda 	esInt1,x
.169c	85 05		sta $05				sta 	temp0+1
.169e	84 0a		sty $0a				sty 	tempShort 					; get length
.16a0	a0 00		ldy #$00			ldy 	#0
.16a2	60		rts				rts
.16a3					UnaryAsc:
.16a3	20 93 16	jsr $1693			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.16a6	b1 04		lda ($04),y			lda 	(temp0),y
.16a8	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.16a9	c9 00		cmp #$00			cmp 	#0
.16ab	d0 db		bne $1688			bne 	ULFinish
.16ad	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.16af	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.16b2					UnaryAbs:
.16b2	20 f9 15	jsr $15f9			jsr 	EvaluateNumeric
.16b5	b0 07		bcs $16be			bcs 	_UAFloat
.16b7	20 cc 19	jsr $19cc			jsr 	MInt32Absolute
.16ba	20 8a 1a	jsr $1a8a			jsr 	CheckRightParen
.16bd	60		rts				rts
.16be					_UAFloat:
.16be	8a		txa				txa
.16bf	a2 00		ldx #$00		ldx	#0
.16c1	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.16c4	aa		tax				tax
.16c5	20 8a 1a	jsr $1a8a			jsr 	CheckRightParen
.16c8	60		rts				rts
.16c9					UnarySgn:
.16c9	20 f9 15	jsr $15f9			jsr 	EvaluateNumeric
.16cc	b0 07		bcs $16d5			bcs 	_USFloat
.16ce	20 04 1a	jsr $1a04			jsr 	MInt32Sign
.16d1	20 8a 1a	jsr $1a8a			jsr 	CheckRightParen
.16d4	60		rts				rts
.16d5					_USFloat:
.16d5	8a		txa				txa
.16d6	a2 0e		ldx #$0e		ldx	#14
.16d8	20 b4 1a	jsr $1ab4		jsr	floatingpointHandler
.16db	aa		tax				tax
.16dc	20 8a 1a	jsr $1a8a			jsr 	CheckRightParen
.16df	60		rts				rts
.16e0					UnaryPeek:
.16e0	20 0c 17	jsr $170c			jsr 	PDLCode
.16e3	4c 00 17	jmp $1700			jmp 	PDLByte0
.16e6					UnaryDeek:
.16e6	20 0c 17	jsr $170c			jsr 	PDLCode
.16e9	4c fa 16	jmp $16fa			jmp 	PDLByte1
.16ec					UnaryLeek:
.16ec	20 0c 17	jsr $170c			jsr 	PDLCode
.16ef	a0 03		ldy #$03			ldy 	#3
.16f1	b1 04		lda ($04),y			lda 	(temp0),y
.16f3	95 60		sta $60,x			sta 	esInt3,x
.16f5	88		dey				dey
.16f6	b1 04		lda ($04),y			lda 	(temp0),y
.16f8	95 58		sta $58,x			sta 	esInt2,x
.16fa					PDLByte1:
.16fa	a0 01		ldy #$01			ldy 	#1
.16fc	b1 04		lda ($04),y			lda 	(temp0),y
.16fe	95 50		sta $50,x			sta 	esInt1,x
.1700					PDLByte0:
.1700	a0 00		ldy #$00			ldy 	#0
.1702	b1 04		lda ($04),y			lda 	(temp0),y
.1704	95 48		sta $48,x			sta 	esInt0,x
.1706	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1708	20 8a 1a	jsr $1a8a			jsr 	CheckRightParen 			; check right and return
.170b	60		rts				rts
.170c					PDLCode:
.170c	20 0d 16	jsr $160d			jsr 	EvaluateInteger
.170f	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1711	85 04		sta $04				sta 	temp0
.1713	b5 50		lda $50,x			lda 	esInt1,x
.1715	85 05		sta $05				sta 	temp0+1
.1717	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1719	95 50		sta $50,x			sta 	esInt1,x
.171b	95 58		sta $58,x			sta 	esInt2,x
.171d	95 60		sta $60,x			sta 	esInt3,x
.171f	84 0a		sty $0a				sty 	tempShort 					; save Y
.1721	60		rts				rts
.1722					Unary_Random:
.1722	20 47 1a	jsr $1a47			jsr 	MInt32Random 				; generate random number.
.1725	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.1727	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1729	f0 08		beq $1733			beq 	_URExit
.172b	e8		inx				inx 								; load range 0..r-1 into +1
.172c	20 0d 16	jsr $160d			jsr 	EvaluateInteger
.172f	ca		dex				dex
.1730	20 95 18	jsr $1895			jsr 	MInt32Modulus 				; calculate random % modulus
.1733					_URExit:
.1733	20 8a 1a	jsr $1a8a			jsr 	CheckRightParen 			; check right and return
.1736	60		rts				rts
.1737					Unary_Min:
.1737	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.1739	d0 02		bne $173d			bne 	UnaryMBody
.173b					Unary_Max:
.173b	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.173d					UnaryMBody:
.173d	48		pha				pha 								; save comparator on stack.
.173e	20 f0 15	jsr $15f0			jsr 	Evaluate 					; get the first thing to check
.1741					_UnaryMLoop:
.1741	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.1743	c8		iny				iny
.1744	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1746	f0 09		beq $1751			beq 	_UnaryMExit
.1748	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.174a	f0 07		beq $1753			beq 	_UnaryMCompare
.174c	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.174e	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.1751					_UnaryMExit:
.1751	68		pla				pla 								; throw comparator and return.
.1752	60		rts				rts
.1753					_UnaryMCompare:
.1753	e8		inx				inx 								; get the 2nd thing to evaluate
.1754	20 f0 15	jsr $15f0			jsr 	Evaluate
.1757	ca		dex				dex
.1758	20 1f 14	jsr $141f			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.175b	85 0a		sta $0a				sta 	tempShort 					; save result
.175d	68		pla				pla 								; get what we need
.175e	48		pha				pha
.175f	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.1761	d0 de		bne $1741			bne 	_UnaryMLoop 				; no, try another value.
.1763	20 17 1a	jsr $1a17			jsr 	MInt32False 				; promote 2nd to 1st.
.1766	20 09 19	jsr $1909			jsr 	MInt32Add
.1769	4c 41 17	jmp $1741			jmp 	_UnaryMLoop
.176c					Unary_Page:
.176c	20 17 1a	jsr $1a17			jsr 	MInt32False 				; zero
.176f	ad 68 08	lda $0868			lda 	basePage 					; copy base page address in.
.1772	95 48		sta $48,x			sta 	esInt0,x
.1774	ad 69 08	lda $0869			lda 	basePage+1
.1777	95 50		sta $50,x			sta 	esInt1,x
.1779	60		rts				rts
.177a					UnaryReference:
.177a	a9 0f		lda #$0f			lda 	#15
.177c	20 e7 14	jsr $14e7			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.177f	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1781	10 05		bpl $1788			bpl 	UType
.1783	a9 00		lda #$00			lda 	#0 							; make it an integer
.1785	95 40		sta $40,x			sta 	esType,x
.1787	60		rts				rts
.1788					UType:
.1788	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.178a	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.178d					UnaryHexMarker:
.178d	4c e1 15	jmp $15e1			jmp 	EvaluateIntegerTerm
.1790					UnaryComplement:
.1790	20 e1 15	jsr $15e1			jsr 	EvaluateIntegerTerm
.1793	20 eb 19	jsr $19eb			jsr 	MInt32Not
.1796	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32binary.asm

.1797					MInt32And:
.1797	b5 48		lda $48,x			lda 	esInt0,x
.1799	35 49		and $49,x			and 	esInt0+1,x
.179b	95 48		sta $48,x			sta 	esInt0,x
.179d	b5 50		lda $50,x			lda 	esInt1,x
.179f	35 51		and $51,x			and 	esInt1+1,x
.17a1	95 50		sta $50,x			sta 	esInt1,x
.17a3	b5 58		lda $58,x			lda 	esInt2,x
.17a5	35 59		and $59,x			and 	esInt2+1,x
.17a7	95 58		sta $58,x			sta 	esInt2,x
.17a9	b5 60		lda $60,x			lda 	esInt3,x
.17ab	35 61		and $61,x			and 	esInt3+1,x
.17ad	95 60		sta $60,x			sta 	esInt3,x
.17af	60		rts				rts
.17b0					MInt32Or:
.17b0	b5 48		lda $48,x			lda 	esInt0,x
.17b2	15 49		ora $49,x			ora 	esInt0+1,x
.17b4	95 48		sta $48,x			sta 	esInt0,x
.17b6	b5 50		lda $50,x			lda 	esInt1,x
.17b8	15 51		ora $51,x			ora 	esInt1+1,x
.17ba	95 50		sta $50,x			sta 	esInt1,x
.17bc	b5 58		lda $58,x			lda 	esInt2,x
.17be	15 59		ora $59,x			ora 	esInt2+1,x
.17c0	95 58		sta $58,x			sta 	esInt2,x
.17c2	b5 60		lda $60,x			lda 	esInt3,x
.17c4	15 61		ora $61,x			ora 	esInt3+1,x
.17c6	95 60		sta $60,x			sta 	esInt3,x
.17c8	60		rts				rts
.17c9					MInt32Xor:
.17c9	b5 48		lda $48,x			lda 	esInt0,x
.17cb	55 49		eor $49,x			eor 	esInt0+1,x
.17cd	95 48		sta $48,x			sta 	esInt0,x
.17cf	b5 50		lda $50,x			lda 	esInt1,x
.17d1	55 51		eor $51,x			eor 	esInt1+1,x
.17d3	95 50		sta $50,x			sta 	esInt1,x
.17d5	b5 58		lda $58,x			lda 	esInt2,x
.17d7	55 59		eor $59,x			eor 	esInt2+1,x
.17d9	95 58		sta $58,x			sta 	esInt2,x
.17db	b5 60		lda $60,x			lda 	esInt3,x
.17dd	55 61		eor $61,x			eor 	esInt3+1,x
.17df	95 60		sta $60,x			sta 	esInt3,x
.17e1	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32compare.asm

.17e2					MInt32Compare:
.17e2	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.17e4	d5 49		cmp $49,x			cmp 	esInt0+1,x
.17e6	d0 13		bne $17fb			bne 	MInt32Compare2
.17e8	b5 50		lda $50,x			lda 	esInt1,x
.17ea	d5 51		cmp $51,x			cmp 	esInt1+1,x
.17ec	d0 0d		bne $17fb			bne 	MInt32Compare2
.17ee	b5 58		lda $58,x			lda 	esInt2,x
.17f0	d5 59		cmp $59,x			cmp 	esInt2+1,x
.17f2	d0 07		bne $17fb			bne 	MInt32Compare2
.17f4	b5 60		lda $60,x			lda 	esInt3,x
.17f6	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.17f8	d0 01		bne $17fb			bne 	MInt32Compare2
.17fa	60		rts				rts
.17fb					MInt32Compare2:
.17fb	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.17fd	d5 49		cmp $49,x			cmp 	esInt0+1,x
.17ff	b5 50		lda $50,x			lda		esInt1,x
.1801	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1803	b5 58		lda $58,x			lda		esInt2,x
.1805	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1807	b5 60		lda $60,x			lda		esInt3,x
.1809	f5 61		sbc $61,x			sbc 	esInt3+1,x
.180b	50 02		bvc $180f			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.180d	49 80		eor #$80			eor 	#$80
.180f					_I32LNoOverflow
.180f	30 03		bmi $1814			bmi 	MInt32CLess					; if -ve then return $FF
.1811	a9 01		lda #$01			lda 	#$01						; else return $01
.1813	60		rts				rts
.1814					MInt32CLess:
.1814	a9 ff		lda #$ff			lda 	#$FF
.1816	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32divide.asm

.1817					MInt32SDivide:
.1817	98		tya				tya  								; save Y, which is the count of negations
.1818	48		pha				pha
.1819	a0 00		ldy #$00			ldy 	#0 							; zero count
.181b	20 33 18	jsr $1833			jsr 	_MInt32SRemSign 			; unsign TOS
.181e	e8		inx				inx 								; unsign TOS+1
.181f	20 33 18	jsr $1833			jsr 	_MInt32SRemSign
.1822	ca		dex				dex
.1823	98		tya				tya 								; save sign count on stack
.1824	48		pha				pha
.1825	20 3c 18	jsr $183c			jsr 	MInt32UDivide 				; unsigned division
.1828	68		pla				pla 								; get sign count back
.1829	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.182b	f0 03		beq $1830			beq 	_I32SNoNeg
.182d	20 d1 19	jsr $19d1			jsr 	MInt32Negate
.1830					_I32SNoNeg:
.1830	68		pla				pla 								; restoe Y and exit
.1831	a8		tay				tay
.1832	60		rts				rts
.1833					_MInt32SRemSign:
.1833	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1835	10 04		bpl $183b			bpl 	_MInt32SRSExit
.1837	c8		iny				iny 								; increment the sign count
.1838	20 d1 19	jsr $19d1			jsr 	MInt32Negate 				; negate the value.
.183b					_MInt32SRSExit:
.183b	60		rts				rts
.183c					MInt32UDivide:
.183c	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.183e	15 51		ora $51,x			ora 	esInt1+1,x
.1840	15 52		ora $52,x			ora 	esInt1+2,x
.1842	15 53		ora $53,x			ora 	esInt1+3,x
.1844	f0 4a		beq $1890			beq 	_MInt32DZero
.1846	e8		inx				inx 								; clear A
.1847	e8		inx				inx
.1848	20 17 1a	jsr $1a17			jsr 	MInt32False
.184b	ca		dex				dex
.184c	ca		dex				dex
.184d	98		tya				tya 								; save Y on the stack
.184e	48		pha				pha
.184f	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.1851					_MInt32UDLoop:
.1851	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.1853	36 50		rol $50,x			rol 	esInt1,x
.1855	36 58		rol $58,x			rol 	esInt2,x
.1857	36 60		rol $60,x			rol 	esInt3,x
.1859	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.185b	36 52		rol $52,x			rol 	esInt1+2,x
.185d	36 5a		rol $5a,x			rol 	esInt2+2,x
.185f	36 62		rol $62,x			rol 	esInt3+2,x
.1861	38		sec				sec 								; calculate A-M saving result on the stack
.1862	b5 4a		lda $4a,x			lda 	esInt0+2,x
.1864	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1866	48		pha				pha
.1867	b5 52		lda $52,x			lda 	esInt1+2,x
.1869	f5 51		sbc $51,x			sbc 	esInt1+1,x
.186b	48		pha				pha
.186c	b5 5a		lda $5a,x			lda 	esInt2+2,x
.186e	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1870	48		pha				pha
.1871	b5 62		lda $62,x			lda 	esInt3+2,x
.1873	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1875	90 10		bcc $1887			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.1877	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.1879	68		pla				pla
.187a	95 5a		sta $5a,x			sta 	esInt2+2,x
.187c	68		pla				pla
.187d	95 52		sta $52,x			sta 	esInt1+2,x
.187f	68		pla				pla
.1880	95 4a		sta $4a,x			sta 	esInt0+2,x
.1882	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.1884	4c 8a 18	jmp $188a			jmp 	_MInt32Next 					; do the next iteration
.1887					_MInt32NoSubtract:
.1887	68		pla				pla
.1888	68		pla				pla
.1889	68		pla				pla
.188a					_MInt32Next:
.188a	88		dey				dey 								; do this 32 times.
.188b	d0 c4		bne $1851			bne 	_MInt32UDLoop
.188d	68		pla				pla 								; restore Y and exit
.188e	a8		tay				tay
.188f	60		rts				rts
.1890					_MInt32DZero:
.1890	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.1892	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.1895					MInt32Modulus:
.1895	20 3c 18	jsr $183c			jsr 	MInt32UDivide 				; do the division.
.1898	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.189a	95 60		sta $60,x			sta 	esInt3,x
.189c	b5 5a		lda $5a,x			lda 	esInt2+2,x
.189e	95 58		sta $58,x			sta 	esInt2,x
.18a0	b5 52		lda $52,x			lda 	esInt1+2,x
.18a2	95 50		sta $50,x			sta 	esInt1,x
.18a4	b5 4a		lda $4a,x			lda 	esInt0+2,x
.18a6	95 48		sta $48,x			sta 	esInt0,x
.18a8	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32fromstr.asm

.18a9					MInt32FromString:
.18a9	85 0a		sta $0a				sta 	tempShort 					; save base
.18ab	98		tya				tya
.18ac	48		pha				pha
.18ad	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.18af	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.18b1	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.18b3	d0 01		bne $18b6			bne 	_I32FSNotNegative
.18b5	c8		iny				iny 								; if so consume it.
.18b6					_I32FSNotNegative:
.18b6	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.18b8	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.18ba	f0 02		beq $18be			beq 	_I32FSNN2
.18bc	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.18be					_I32FSNN2:
.18be	48		pha				pha 								; save base + final sign on stack.
.18bf	20 17 1a	jsr $1a17			jsr 	MInt32False 					; zero the return value.
.18c2					I32FSMainLoop:
.18c2	68		pla				pla 								; get the base back into tempshort
.18c3	48		pha				pha
.18c4	29 7f		and #$7f			and 	#$7F
.18c6	85 0a		sta $0a				sta 	tempShort
.18c8	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.18ca	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.18cc	90 02		bcc $18d0			bcc 	_I32FSNotLC
.18ce	e9 20		sbc #$20			sbc 	#32
.18d0					_I32FSNotLC:
.18d0	38		sec				sec 								; subtract 48 (ASCII "0")
.18d1	e9 30		sbc #$30			sbc 	#"0"
.18d3	90 26		bcc $18fb			bcc 	_I32FSDone 					; nothing more to do.
.18d5	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.18d7	90 06		bcc $18df			bcc 	_I32FSValidate
.18d9	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.18db	90 1e		bcc $18fb			bcc 	_I32FSDone
.18dd	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.18df					_I32FSValidate:
.18df	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.18e1	b0 18		bcs $18fb			bcs 	_I32FSDone 					; sorry, too large for this base.
.18e3	48		pha				pha 								; save the new digit value.
.18e4	e8		inx				inx 								; put base into next slot.
.18e5	a5 0a		lda $0a				lda 	tempShort
.18e7	20 26 1a	jsr $1a26			jsr 	MInt32Set8Bit
.18ea	ca		dex				dex
.18eb	20 3d 19	jsr $193d			jsr 	MInt32Multiply 				; multiply current by the base
.18ee	e8		inx				inx
.18ef	68		pla				pla  								; put additive into next slot
.18f0	20 26 1a	jsr $1a26			jsr 	MInt32Set8Bit
.18f3	ca		dex				dex
.18f4	20 09 19	jsr $1909			jsr 	MInt32Add 					; and add it
.18f7	c8		iny				iny 								; look at next character
.18f8	4c c2 18	jmp $18c2			jmp 	I32FSMainLoop 				; and go round again.
.18fb					_I32FSDone:
.18fb	68		pla				pla 								; get base/final sign back
.18fc	10 04		bpl $1902			bpl 	_I32FSNN3
.18fe	88		dey				dey 								; one fewer character to allow for the - prefix.
.18ff	20 d1 19	jsr $19d1			jsr 	MInt32Negate 				; negate the result.
.1902					_I32FSNN3:
.1902	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1904	68		pla				pla
.1905	a8		tay				tay
.1906	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1908	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32math.asm

.1909					MInt32Add:
.1909	18		clc				clc
.190a	b5 48		lda $48,x			lda 	esInt0,x
.190c	75 49		adc $49,x			adc 	esInt0+1,x
.190e	95 48		sta $48,x			sta 	esInt0,x
.1910	b5 50		lda $50,x			lda 	esInt1,x
.1912	75 51		adc $51,x			adc 	esInt1+1,x
.1914	95 50		sta $50,x			sta 	esInt1,x
.1916	b5 58		lda $58,x			lda 	esInt2,x
.1918	75 59		adc $59,x			adc 	esInt2+1,x
.191a	95 58		sta $58,x			sta 	esInt2,x
.191c	b5 60		lda $60,x			lda 	esInt3,x
.191e	75 61		adc $61,x			adc 	esInt3+1,x
.1920	95 60		sta $60,x			sta 	esInt3,x
.1922	60		rts				rts
.1923					MInt32Sub:
.1923	38		sec				sec
.1924	b5 48		lda $48,x			lda 	esInt0,x
.1926	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1928	95 48		sta $48,x			sta 	esInt0,x
.192a	b5 50		lda $50,x			lda 	esInt1,x
.192c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.192e	95 50		sta $50,x			sta 	esInt1,x
.1930	b5 58		lda $58,x			lda 	esInt2,x
.1932	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1934	95 58		sta $58,x			sta 	esInt2,x
.1936	b5 60		lda $60,x			lda 	esInt3,x
.1938	f5 61		sbc $61,x			sbc 	esInt3+1,x
.193a	95 60		sta $60,x			sta 	esInt3,x
.193c	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32multiply.asm

.193d					MInt32Multiply:
.193d	e8		inx				inx 								; copy 2nd -> 3rd
.193e	20 63 19	jsr $1963			jsr 	MInt32CopyUp
.1941	ca		dex				dex
.1942	20 63 19	jsr $1963			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1945	20 17 1a	jsr $1a17			jsr 	MInt32False 					; zero 1st.
.1948					_I32Loop:
.1948	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.194a	29 01		and #$01			and 	#1
.194c	f0 03		beq $1951			beq 	_I32NoAdd 					; if set
.194e	20 09 19	jsr $1909			jsr 	MInt32Add 					; add 2nd to 1st.
.1951					_I32NoAdd:
.1951	e8		inx				inx 								; shift 2nd left
.1952	20 2c 1a	jsr $1a2c			jsr 	MInt32ShiftLeft
.1955	e8		inx				inx  								; shift 3rd right
.1956	20 35 1a	jsr $1a35			jsr 	MInt32ShiftRight
.1959	20 3e 1a	jsr $1a3e			jsr 	MInt32Zero 					; check if zero.
.195c	08		php				php 								; save status bits
.195d	ca		dex				dex 	 							; point back to 1st
.195e	ca		dex				dex
.195f	28		plp				plp 								; get status bits
.1960	d0 e6		bne $1948			bne 	_I32Loop 					; if non-zero keep going.
.1962	60		rts				rts
.1963					MInt32CopyUp:
.1963	b5 48		lda $48,x			lda 	esInt0,x
.1965	95 49		sta $49,x			sta 	esInt0+1,x
.1967	b5 50		lda $50,x			lda 	esInt1,x
.1969	95 51		sta $51,x			sta 	esInt1+1,x
.196b	b5 58		lda $58,x			lda 	esInt2,x
.196d	95 59		sta $59,x			sta 	esInt2+1,x
.196f	b5 60		lda $60,x			lda 	esInt3,x
.1971	95 61		sta $61,x			sta 	esInt3+1,x
.1973	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32tostr.asm

>0870					MCharCount:	.fill 	1						; count of converted characters
.1974					MInt32ToString:
.1974	48		pha				pha 								; save base
.1975	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1977	a9 00		lda #$00			lda 	#0
.1979	8d 70 08	sta $0870			sta 	MCharCount 					; clear character count.
.197c	98		tya				tya
.197d	48		pha				pha
.197e	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1980	10 10		bpl $1992			bpl 	_I32TSUnsigned
.1982	48		pha				pha 								; save base on stack.
.1983	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1985	10 08		bpl $198f			bpl 	_I32TSNoFlip
.1987	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1989	20 be 19	jsr $19be			jsr 	MI32WriteCharacter
.198c	20 d1 19	jsr $19d1			jsr 	MInt32Negate 				; negate the value.
.198f					_I32TSNoFlip:
.198f	68		pla				pla 								; get the base back
.1990	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1992					_I32TSUnsigned:
.1992	20 99 19	jsr $1999			jsr 	MI32DivideWrite 				; recursive code to output string.
.1995	68		pla				pla
.1996	a8		tay				tay
.1997	68		pla				pla
.1998	60		rts				rts
.1999					MI32DivideWrite:
.1999	48		pha				pha 								; save the divisor/base
.199a	e8		inx				inx 								; write in the dividing position.
.199b	20 26 1a	jsr $1a26			jsr 	MInt32Set8Bit
.199e	ca		dex				dex
.199f	20 3c 18	jsr $183c			jsr 	MInt32UDivide 				; divide number by base.
.19a2	68		pla				pla 								; get the base into Y
.19a3	a8		tay				tay
.19a4	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.19a6	48		pha				pha
.19a7	20 3e 1a	jsr $1a3e			jsr 	MInt32Zero 					; is the result zero ?
.19aa	f0 04		beq $19b0			beq 	_I32NoRecurse 				; if so, don't recurse.
.19ac	98		tya				tya 								; put base into A
.19ad	20 99 19	jsr $1999			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.19b0					_I32NoRecurse:
.19b0	68		pla				pla 								; get the remainder back
.19b1	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.19b3	90 02		bcc $19b7			bcc 	_I32NotHex
.19b5	69 06		adc #$06			adc 	#7-1
.19b7					_I32NotHex:
.19b7	18		clc				clc 								; make it ASCII
.19b8	69 30		adc #$30			adc 	#48
.19ba	20 be 19	jsr $19be			jsr 	MI32WriteCharacter 			; write the character out
.19bd	60		rts				rts 								; and exit.
.19be					MI32WriteCharacter:
.19be	ac 70 08	ldy $0870			ldy 	MCharCount 					; get position
.19c1	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.19c3	c8		iny				iny
.19c4	a9 00		lda #$00			lda 	#0
.19c6	91 04		sta ($04),y			sta 	(temp0),y
.19c8	ee 70 08	inc $0870			inc 	MCharCount 					; bump count
.19cb	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32unary.asm

>0871					MSeed32:	.fill 	4							; random number seed.
.19cc					MInt32Absolute:
.19cc	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.19ce	30 01		bmi $19d1			bmi 	MInt32Negate
.19d0	60		rts				rts
.19d1					MInt32Negate:
.19d1	38		sec				sec
.19d2	a9 00		lda #$00			lda 	#0
.19d4	f5 48		sbc $48,x			sbc 	esInt0,x
.19d6	95 48		sta $48,x			sta 	esInt0,x
.19d8	a9 00		lda #$00			lda 	#0
.19da	f5 50		sbc $50,x			sbc 	esInt1,x
.19dc	95 50		sta $50,x			sta 	esInt1,x
.19de	a9 00		lda #$00			lda 	#0
.19e0	f5 58		sbc $58,x			sbc 	esInt2,x
.19e2	95 58		sta $58,x			sta 	esInt2,x
.19e4	a9 00		lda #$00			lda 	#0
.19e6	f5 60		sbc $60,x			sbc 	esInt3,x
.19e8	95 60		sta $60,x			sta 	esInt3,x
.19ea	60		rts				rts
.19eb					MInt32Not:
.19eb	b5 48		lda $48,x			lda 	esInt0,x
.19ed	49 ff		eor #$ff			eor 	#$FF
.19ef	95 48		sta $48,x			sta 	esInt0,x
.19f1	b5 50		lda $50,x			lda 	esInt1,x
.19f3	49 ff		eor #$ff			eor 	#$FF
.19f5	95 50		sta $50,x			sta 	esInt1,x
.19f7	b5 58		lda $58,x			lda 	esInt2,x
.19f9	49 ff		eor #$ff			eor 	#$FF
.19fb	95 58		sta $58,x			sta 	esInt2,x
.19fd	b5 60		lda $60,x			lda 	esInt3,x
.19ff	49 ff		eor #$ff			eor 	#$FF
.1a01	95 60		sta $60,x			sta 	esInt3,x
.1a03	60		rts				rts
.1a04					MInt32Sign:
.1a04	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1a06	30 0b		bmi $1a13			bmi 	MInt32True 					; if set return -1 (true)
.1a08	20 3e 1a	jsr $1a3e			jsr 	MInt32Zero 					; is it zero ?
.1a0b	f0 0a		beq $1a17			beq 	MInt32False 					; if zero return 0 (false)
.1a0d	20 17 1a	jsr $1a17			jsr 	MInt32False 					; > 0 return 1
.1a10	f6 48		inc $48,x			inc 	esInt0,x
.1a12	60		rts				rts
.1a13					MInt32True:
.1a13	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1a15	d0 02		bne $1a19			bne 	MInt32WriteAll
.1a17					MInt32False:
.1a17	a9 00		lda #$00			lda 	#0
.1a19					MInt32WriteAll:
.1a19	95 48		sta $48,x			sta 	esInt0,x
.1a1b					MInt32Write123:
.1a1b	95 50		sta $50,x			sta 	esInt1,x
.1a1d	95 58		sta $58,x			sta 	esInt2,x
.1a1f	95 60		sta $60,x			sta 	esInt3,x
.1a21	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1a23	95 40		sta $40,x			sta 	esType,x
.1a25	60		rts				rts
.1a26					MInt32Set8Bit:
.1a26	95 48		sta $48,x			sta 	esInt0,x
.1a28	a9 00		lda #$00			lda 	#0
.1a2a	f0 ef		beq $1a1b			beq		MInt32Write123
.1a2c					MInt32ShiftLeft:
.1a2c	16 48		asl $48,x			asl 	esInt0,x
.1a2e	36 50		rol $50,x			rol	 	esInt1,x
.1a30	36 58		rol $58,x			rol	 	esInt2,x
.1a32	36 60		rol $60,x			rol	 	esInt3,x
.1a34	60		rts				rts
.1a35					MInt32ShiftRight:
.1a35	56 60		lsr $60,x			lsr 	esInt3,x
.1a37	76 58		ror $58,x			ror 	esInt2,x
.1a39	76 50		ror $50,x			ror 	esInt1,x
.1a3b	76 48		ror $48,x			ror 	esInt0,x
.1a3d	60		rts				rts
.1a3e					MInt32Zero:
.1a3e	b5 48		lda $48,x			lda 	esInt0,x
.1a40	15 50		ora $50,x			ora 	esInt1,x
.1a42	15 58		ora $58,x			ora 	esInt2,x
.1a44	15 60		ora $60,x			ora 	esInt3,x
.1a46	60		rts				rts
.1a47					MInt32Random:
.1a47	98		tya				tya
.1a48	48		pha				pha
.1a49	a0 07		ldy #$07			ldy 	#7
.1a4b	ad 71 08	lda $0871			lda 	MSeed32+0
.1a4e	d0 03		bne $1a53			bne 	_Random1
.1a50	a8		tay				tay
.1a51	a9 aa		lda #$aa			lda		#$AA
.1a53					_Random1:
.1a53	0a		asl a				asl 	a
.1a54	2e 72 08	rol $0872			rol 	MSeed32+1
.1a57	2e 73 08	rol $0873			rol 	MSeed32+2
.1a5a	2e 74 08	rol $0874			rol 	MSeed32+3
.1a5d	90 02		bcc $1a61			bcc 	_Random2
.1a5f	49 c5		eor #$c5			eor 	#$C5
.1a61					_Random2:
.1a61	88		dey				dey
.1a62	d0 ef		bne $1a53			bne 	_Random1
.1a64	8d 71 08	sta $0871			sta 	MSeed32+0
.1a67	95 48		sta $48,x			sta 	esInt0,x
.1a69	ad 72 08	lda $0872			lda 	MSeed32+1
.1a6c	95 50		sta $50,x			sta 	esInt1,x
.1a6e	ad 73 08	lda $0873			lda 	MSeed32+2
.1a71	95 58		sta $58,x			sta 	esInt2,x
.1a73	ad 74 08	lda $0874			lda 	MSeed32+3
.1a76	95 60		sta $60,x			sta 	esInt3,x
.1a78	68		pla				pla
.1a79	a8		tay				tay
.1a7a	a9 00		lda #$00			lda 	#0
.1a7c	95 40		sta $40,x			sta 	esType,x
.1a7e	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/check.asm

.1a7f					CheckToken:
.1a7f	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1a81	d0 02		bne $1a85			bne 	_CTError
.1a83	c8		iny				iny
.1a84	60		rts				rts
.1a85					_CTError:
.1a85	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1a87	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.1a8a					CheckRightParen:
.1a8a	b1 02		lda ($02),y			lda 	(codePtr),y
.1a8c	c8		iny				iny
.1a8d	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1a8f	d0 01		bne $1a92			bne 	_CRPError
.1a91	60		rts				rts
.1a92					_CRPError:
.1a92	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.1a94	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.1a97					CheckComma:
.1a97	b1 02		lda ($02),y			lda 	(codePtr),y
.1a99	c8		iny				iny
.1a9a	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1a9c	d0 01		bne $1a9f			bne 	_CCError
.1a9e	60		rts				rts
.1a9f					_CCError:
.1a9f	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.1aa1	20 ad 1a	jsr $1aad			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm

.1aa4					mainHandler:
.1aa4	7c a7 1a	jmp ($1aa7,x)			jmp 	(mainVectors,x)
.1aa7					mainVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.asm

.1aa7					assemblerHandler:
.1aa7	7c aa 1a	jmp ($1aaa,x)			jmp 	(assemblerVectors,x)
.1aaa					assemblerVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.asm

.1aaa					deviceHandler:
.1aaa	7c ad 1a	jmp ($1aad,x)			jmp 	(deviceVectors,x)
.1aad					deviceVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.asm


;******  Processing file: ../source/error/errorhandler.asm

.1aad					ErrorHandler:
.1aad	a9 ee		lda #$ee			lda 	#$EE
.1aaf	a8		tay				tay
>1ab0	db						.byte 	$DB
.1ab1	4c b1 1a	jmp $1ab1	_EHHalt:jmp 	_EHHalt

;******  Return to file: ../source/error/error.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.asm

.1ab4					floatingpointHandler:
.1ab4	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.1ab6	20 ad 1a	jsr $1aad			jsr 	ErrorHandler

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.asm

.1ab9					interactionHandler:
.1ab9	7c bc 1a	jmp ($1abc,x)			jmp 	(interactionVectors,x)
.1abc					interactionVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.asm


;******  Processing file: ../source/string/compare.asm

.1abc					STRCompare:
.1abc	48		pha				pha 								; save A
.1abd	aa		tax				tax 								; put stack pos in X
.1abe	98		tya				tya
.1abf	48		pha				pha
.1ac0	20 f4 1a	jsr $1af4			jsr 	CopyStringPair
.1ac3	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1ac5	b1 04		lda ($04),y			lda 	(temp0),y
.1ac7	d1 06		cmp ($06),y			cmp 	(temp1),y
.1ac9	90 02		bcc $1acd			bcc 	_SCNotSmaller
.1acb	b1 06		lda ($06),y			lda 	(temp1),y
.1acd					_SCNotSmaller:
.1acd	aa		tax				tax 								; put that in X. We compare this many chars first.
.1ace					_SCCompareLoop:
.1ace	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1ad0	f0 0c		beq $1ade			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1ad2	ca		dex				dex 								; decrement chars to compare.
.1ad3	c8		iny				iny 								; move to next character
.1ad4	38		sec				sec 								; calculate s1[y]-s2[y]
.1ad5	b1 04		lda ($04),y			lda 	(temp0),y
.1ad7	f1 06		sbc ($06),y			sbc 	(temp1),y
.1ad9	d0 0a		bne $1ae5			bne 	_SCReturnResult 			; if different return sign of A
.1adb	4c ce 1a	jmp $1ace			jmp 	_SCCompareLoop
.1ade					_SCSameToEndShortest
.1ade	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1ae0	38		sec				sec
.1ae1	b1 04		lda ($04),y			lda 	(temp0),y
.1ae3	f1 06		sbc ($06),y			sbc 	(temp1),y
.1ae5					_SCReturnResult:
.1ae5	08		php				php 								; set return to zero preserving PSW.
.1ae6	a2 00		ldx #$00			ldx 	#0
.1ae8	28		plp				plp
.1ae9	f0 05		beq $1af0			beq 	_SCExit 					; two values equal, then exit
.1aeb	ca		dex				dex 								; X = $FF
.1aec	90 02		bcc $1af0			bcc 	_SCExit 					; if 1st < 2nd then -1
.1aee	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1af0					_SCExit:
.1af0	68		pla				pla
.1af1	a8		tay				tay
.1af2	68		pla				pla
.1af3	60		rts				rts
.1af4					CopyStringPair:
.1af4	b5 48		lda $48,x			lda 	esInt0,x
.1af6	85 04		sta $04				sta 	temp0
.1af8	b5 50		lda $50,x			lda 	esInt1,x
.1afa	85 05		sta $05				sta 	temp0+1
.1afc	b5 49		lda $49,x			lda 	esInt0+1,x
.1afe	85 06		sta $06				sta 	temp1
.1b00	b5 51		lda $51,x			lda 	esInt1+1,x
.1b02	85 07		sta $07				sta 	temp1+1
.1b04	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/concat.asm

.1b05					StringConcat:
.1b05	aa		tax				tax									; stack pos in X
.1b06	98		tya				tya
.1b07	48		pha				pha
.1b08	20 f4 1a	jsr $1af4			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1b0b	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1b0c	a0 00		ldy #$00			ldy 	#0
.1b0e	b1 04		lda ($04),y			lda 	(temp0),y
.1b10	71 06		adc ($06),y			adc 	(temp1),y
.1b12	b0 1d		bcs $1b31			bcs 	_SCError 					; just too many characters here.
.1b14	20 4c 1b	jsr $1b4c			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1b17	a5 78		lda $78				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1b19	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1b1b	a5 79		lda $79				lda 	SoftMemAlloc+1
.1b1d	95 50		sta $50,x			sta 	esInt1,x
.1b1f	20 36 1b	jsr $1b36			jsr 	_SCCopyTemp0 				; copy temp0
.1b22	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1b24	85 04		sta $04				sta 	temp0
.1b26	a5 07		lda $07				lda 	temp1+1
.1b28	85 05		sta $05				sta 	temp0+1
.1b2a	20 36 1b	jsr $1b36			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1b2d	68		pla				pla
.1b2e	a8		tay				tay
.1b2f	8a		txa				txa 								; and A
.1b30	60		rts				rts
.1b31					_SCError:
.1b31	a2 0c		ldx #$0c			ldx 	#ErrorID_StrLen
.1b33	20 ad 1a	jsr $1aad			jsr 	ErrorHandler
.1b36					_SCCopyTemp0:
.1b36	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1b38	b1 04		lda ($04),y			lda 	(temp0),y
.1b3a	85 08		sta $08				sta 	temp2
.1b3c					_SCCopyLoop:
.1b3c	a5 08		lda $08				lda 	temp2 						; done the lot
.1b3e	f0 0b		beq $1b4b			beq 	_SCCopyExit
.1b40	c6 08		dec $08				dec 	temp2
.1b42	c8		iny				iny 								; get next char
.1b43	b1 04		lda ($04),y			lda 	(temp0),y
.1b45	20 74 1b	jsr $1b74			jsr 	WriteSoftString 			; write to soft string.
.1b48	4c 3c 1b	jmp $1b3c			jmp 	_SCCopyLoop
.1b4b					_SCCopyExit:
.1b4b	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/memory.asm

.0078					softMemAlloc:
>0078							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1b4c					AllocateSoftString:
.1b4c	85 0a		sta $0a				sta 	tempShort 					; save count
.1b4e	98		tya				tya
.1b4f	48		pha				pha
.1b50	a5 79		lda $79				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1b52	d0 0b		bne $1b5f			bne 	_ASSDone
.1b54	ad 6c 08	lda $086c			lda 	highMemory 					; reset the soft memory alloc pointer.
.1b57	85 78		sta $78				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1b59	ac 6d 08	ldy $086d			ldy 	highMemory+1 				; but it needs to be reset before each command.
.1b5c	88		dey				dey
.1b5d	84 79		sty $79				sty 	softMemAlloc+1
.1b5f					_ASSDone:
.1b5f	38		sec				sec 								; allocate downwards enough memory
.1b60	a5 78		lda $78				lda 	softMemAlloc
.1b62	e5 0a		sbc $0a				sbc 	tempShort
.1b64	85 78		sta $78				sta 	softMemAlloc
.1b66	a5 79		lda $79				lda 	softMemAlloc+1
.1b68	e9 00		sbc #$00			sbc 	#0
.1b6a	85 79		sta $79				sta 	softMemAlloc+1
.1b6c	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1b6e	a8		tay				tay
.1b6f	91 78		sta ($78),y			sta 	(softMemAlloc),y
.1b71	68		pla				pla
.1b72	a8		tay				tay
.1b73	60		rts				rts
.1b74					WriteSoftString:
.1b74	84 0a		sty $0a				sty 	tempShort 					; save Y
.1b76	48		pha				pha
.1b77	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1b79	b1 78		lda ($78),y			lda 	(softMemAlloc),y
.1b7b	18		clc				clc
.1b7c	69 01		adc #$01			adc 	#1
.1b7e	91 78		sta ($78),y			sta 	(softMemAlloc),y
.1b80	a8		tay				tay 								; pointer in Y
.1b81	68		pla				pla 								; get char and write.
.1b82	91 78		sta ($78),y			sta 	(softMemAlloc),y
.1b84	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1b86	60		rts				rts

;******  Return to file: ../source/string/string.asm

.1b87					stringHandler:
.1b87	7c 8a 1b	jmp ($1b8a,x)			jmp 	(stringVectors,x)
.1b8a					stringVectors:
>1b8a	05 1b					.word StringConcat         ; index 0
>1b8c	bc 1a					.word STRCompare           ; index 2

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.asm

.1b8e					tokeniserHandler:
.1b8e	7c 91 1b	jmp ($1b91,x)			jmp 	(tokeniserVectors,x)
.1b91					tokeniserVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/access.asm

.1b91					AccessVariable:
.1b91	aa		tax				tax 								; stack in X
.1b92	c8		iny				iny
.1b93	b1 02		lda ($02),y			lda 	(codePtr),y
.1b95	88		dey				dey
.1b96	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1b98	d0 15		bne $1baf			bne 	_AVLong
.1b9a	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1b9c	38		sec				sec 	 							; make it 0-25
.1b9d	e9 01		sbc #$01			sbc 	#1
.1b9f	0a		asl a				asl 	a 							; x 4 is LSB of address
.1ba0	0a		asl a				asl 	a
.1ba1	95 48		sta $48,x			sta 	esInt0,x
.1ba3	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.1ba5	95 50		sta $50,x			sta 	esInt1,x
.1ba7	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1ba9	95 40		sta $40,x			sta 	esType,x
.1bab	c8		iny				iny 								; skip over the variable reference in the code.
.1bac	c8		iny				iny
.1bad	8a		txa				txa 								; stack in A to return.
.1bae	60		rts				rts
.1baf					_AVLong:
.1baf	80 fe		bra $1baf			bra 	_AVLong

;******  Return to file: ../source/variable/variable.asm

.1bb1					variableHandler:
.1bb1	7c b4 1b	jmp ($1bb4,x)			jmp 	(variableVectors,x)
.1bb4					variableVectors:
>1bb4	91 1b					.word AccessVariable       ; index 0

;******  Return to file: ../source/basic.asm


;******  End of listing
