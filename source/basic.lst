
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ..\source\basic.asm
; Fri Feb 26 17:31:05 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\basic.asm


;******  Processing file: ..\source\main/01common.inc

=8					StackSize = 8

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/02macros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.
.0868					basePage:
>0868							.fill 	2

;******  Processing file: ..\source\main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$9d					TOK_STRUCTST=$9d
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ..\source\main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/imath/intmacros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/errorhandler.inc


;******  Processing file: ..\source\error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assert
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma

;******  Return to file: ..\source\error/errorhandler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.asm


;******  Processing file: ..\source\main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d 68 08	sta $0868			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d 69 08	sta $0869			sta 	1+(basePage)
.100d	4c 1e 10	jmp $101e			jmp 	Command_Run
.195f					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ..\source\main/../generated/testcode.inc

>5000	17 64 00 d9 a2 90 61 73			.byte 23,100,0,217,162,144,97,115,72,72,136,70,100,81,81,193,141,144,103,87,89,87,128,19,110,0,217,162,96,92,79,86,141,144,79,92,123,111,193,141,64,128,20,120,0,217,162,144,79,96,89,86,148,144,93,76,92,114,193,141,64,128,21,130,0,217,162,144,69,65,65,66,139,144,87,81,118,74,193,141,144,65,128,19,140,0,217,162,78,116,102,69,142,71,64,75,64,193,141,144,65,128,21,150,0,217,162,87,116,115,85,134,75,102,88,116,193,141,67,100,80,84,128,20,160,0,217,162,144,72,87,110,84,140,144,73,108,92,76,193,141,64,128,21,170,0,217,162,79,68,91,107,149,84,72,112,65,193,141,79,68,91,107,128,22,180,0,217,162,81,95,101,96,134,144,101,126,90,115,193,141,80,65,101,64,128,20,190,0,217,162,71,85,103,106,142,144,85,126,97,89,193,141,144,65,128,18,200,0,217,162,101,70,101,90,140,67,122,84,111,193,141,64,128,21,210,0,217,162,144,81,114,90,104,142,144,98,81,65,69,193,141,144,65,128,23,220,0,217,162,73,78,64,65,135,144,67,110,81,94,193,141,144,66,96,81,93,128,22,230,0,217,162,144,65,108,66,68,134,91,125,64,119,193,141,90,81,64,116,128,20,240,0,217,162,144,93,69,65,122,138,144,100,111,126,71,193,141,64,128,19,250,0,217,162,144,97,69,70,102,137,89,86,124,88,193,141,64,128,21,4,1,217,162,144,90,74,126,112,142,144,100,68,113,103,193,141,144,65,128,19,14,1,217,162,96,65,120,78,140,144,100,113,114,103,193,141,64,128,20,24,1,217,162,82,115,78,96,139,144,81,109,64,78,193,141,144,65,128,20,34,1,217,162,144,91,101,104,106,142,86,104,102,80,193,141,144,65,128,19,44,1,217,162,99,104,105,73,142,74,104,87,126,193,141,144,65,128,22,54,1,217,162,76,81,101,104,134,144,74,91,104,76,193,141,68,64,69,96,128,21,64,1,217,162,67,64,111,85,135,95,76,90,97,193,141,95,76,127,117,128,20,74,1,217,162,94,81,108,65,142,144,94,67,127,125,193,141,144,65,128,21,84,1,217,162,69,90,106,90,149,99,117,82,114,193,141,69,90,106,90,128,22,94,1,217,162,85,125,108,120,144,93,89,103,99,193,141,144,71,91,122,107,128,22,104,1,217,162,144,75,125,122,107,134,89,102,96,78,193,141,80,66,64,68,128,18,114,1,217,162,96,120,119,90,148,94,89,94,89,193,141,65,128,23,124,1,217,162,99,109,110,90,135,144,88,64,79,99,193,141,144,88,64,65,97,128,22,134,1,217,162,75,66,112,98,144,80,115,74,65,193,141,144,69,112,89,95,128,18,144,1,217,162,144,84,71,78,137,100,123,72,81,193,141,64,128,22,154,1,217,162,70,77,108,113,134,144,80,71,72,99,193,141,70,72,100,81,128,23,164,1,217,162,144,83,113,110,83,144,144,92,75,87,116,193,141,72,89,105,97,128,18,174,1,217,162,101,121,76,115,141,81,110,127,88,193,141,64,128,18,184,1,217,162,94,86,119,127,148,86,126,125,78,193,141,65,128,23,194,1,217,162,144,81,91,71,82,136,144,71,121,121,89,193,141,86,98,126,73,128,19,204,1,217,162,68,124,108,100,140,84,125,69,97,193,141,144,65,128,19,214,1,217,162,76,75,86,103,138,144,88,96,99,90,193,141,64,128,20,224,1,217,162,144,65,89,96,103,138,73,81,86,103,193,141,144,65,128,19,234,1,217,162,144,103,120,99,141,144,96,111,120,101,193,141,64,128,19,244,1,217,162,144,86,118,65,83,148,94,90,113,76,193,141,64,128,20,254,1,217,162,144,66,71,85,116,142,83,96,65,83,193,141,144,65,128,20,8,2,217,162,77,98,72,117,137,144,88,83,72,77,193,141,144,65,128,21,18,2,217,162,87,111,97,99,135,144,67,102,99,77,193,141,144,66,77,128,19,28,2,217,162,99,69,77,84,139,96,91,124,80,193,141,144,65,128,20,38,2,217,162,144,90,120,88,77,148,90,93,117,93,193,141,144,65,128,23,48,2,217,162,67,82,125,82,135,144,77,78,116,74,193,141,144,76,76,64,74,128,23,58,2,217,162,144,76,98,113,124,144,144,98,107,81,119,193,141,86,72,95,123,128,21,68,2,217,162,144,82,121,74,107,138,144,77,127,98,108,193,141,144,65,128,23,78,2,217,162,95,101,105,118,136,144,72,74,83,95,193,141,144,87,111,122,105,128,20,88,2,217,162,144,101,91,82,72,137,144,67,91,108,64,193,141,64,128,20,98,2,217,162,144,88,119,69,123,141,144,84,90,87,79,193,141,64,128,19,108,2,217,162,90,107,70,119,137,85,77,84,88,193,141,144,65,128,20,118,2,217,162,144,81,98,91,96,140,86,101,82,86,193,141,144,65,128,24,128,2,217,162,144,90,108,115,111,144,144,88,106,83,67,193,141,144,66,66,96,108,128,20,138,2,217,162,65,99,75,64,142,144,72,65,124,102,193,141,144,65,128,21,148,2,217,162,73,70,123,85,149,100,92,81,104,193,141,73,70,123,85,128,17,158,2,217,162,82,127,116,148,86,125,89,75,193,141,64,128,18,168,2,217,162,92,94,69,123,140,67,74,102,106,193,141,64,128,21,178,2,217,162,144,92,105,90,79,140,144,79,103,85,69,193,141,144,65,128,19,188,2,217,162,87,94,115,95,139,69,81,72,76,193,141,144,65,128,21,198,2,217,162,73,66,100,97,136,85,77,110,116,193,141,92,79,74,85,128,24,208,2,217,162,144,73,107,64,116,135,144,97,92,121,96,193,141,144,65,72,64,84,128,19,218,2,217,162,144,86,74,66,98,137,94,69,106,103,193,141,64,128,20,228,2,217,162,97,105,106,76,135,66,85,113,193,141,97,107,127,125,128,23,238,2,217,162,93,110,89,86,136,144,67,89,69,81,193,141,144,94,119,92,71,128,21,248,2,217,162,68,90,67,77,135,98,97,67,78,193,141,102,123,67,79,128,23,2,3,217,162,76,102,112,123,135,144,66,80,70,94,193,141,144,66,80,70,69,128,21,12,3,217,162,144,69,108,114,77,139,144,72,108,88,71,193,141,144,65,128,19,22,3,217,162,144,66,124,81,68,141,82,125,123,100,193,141,64,128,22,32,3,217,162,102,65,77,96,143,144,68,88,90,123,193,141,97,104,114,101,128,20,42,3,217,162,144,81,92,88,72,141,144,87,79,78,106,193,141,64,128,19,52,3,217,162,144,95,107,123,103,142,76,127,78,193,141,144,65,128,20,62,3,217,162,144,75,67,72,96,135,144,124,119,91,193,141,144,91,128,20,72,3,217,162,72,94,79,76,142,144,74,107,109,77,193,141,144,65,128,19,82,3,217,162,95,116,111,74,142,101,106,98,107,193,141,144,65,128,22,92,3,217,162,75,66,89,71,144,144,79,125,107,79,193,141,91,64,68,86,128,23,102,3,217,162,144,68,104,95,82,144,91,88,103,125,193,141,144,96,65,71,79,128,23,112,3,217,162,144,65,89,79,101,135,76,102,82,65,193,141,144,65,89,77,101,128,21,122,3,217,162,67,112,74,96,143,86,105,81,68,193,141,90,89,91,100,128,23,132,3,217,162,144,94,100,123,73,135,66,126,113,73,193,141,144,92,64,74,65,128,21,142,3,217,162,144,70,71,96,69,137,144,87,111,113,80,193,141,144,65,128,21,152,3,217,162,144,93,107,111,104,142,144,101,70,101,89,193,141,144,65,128,19,162,3,217,162,144,96,67,86,116,137,85,103,81,85,193,141,64,128,18,172,3,217,162,78,97,108,99,141,75,71,89,114,193,141,64,128,20,182,3,217,162,91,85,80,96,142,144,67,122,64,106,193,141,144,65,128,19,192,3,217,162,87,66,86,85,138,90,127,66,125,193,141,144,65,128,20,202,3,217,162,144,84,91,67,88,142,81,117,89,114,193,141,144,65,128,21,212,3,217,162,92,101,83,68,136,98,84,111,112,193,141,126,113,124,116,128,21,222,3,217,162,76,104,104,68,149,82,90,66,125,193,141,76,104,104,68,128,19,232,3,217,162,144,67,95,83,106,139,99,119,101,100,193,141,64,128,21,242,3,217,162,144,70,68,121,99,137,144,92,98,126,64,193,141,144,65,128,21,252,3,217,162,144,100,66,105,74,134,96,86,70,93,193,141,84,70,84,128,25,6,4,217,162,144,98,66,113,93,143,144,98,104,77,89,193,141,144,65,68,106,126,118,128,21,16,4,217,162,97,122,67,114,135,85,75,70,75,193,141,117,123,71,123,128,19,26,4,217,162,70,123,93,110,140,100,69,90,67,193,141,144,65,128,20,36,4,217,162,68,119,85,82,142,144,78,120,82,64,193,141,144,65,128,21,46,4,217,162,144,91,98,106,68,140,144,83,126,94,65,193,141,144,65,128,21,56,4,217,162,72,82,81,116,135,81,97,91,117,193,141,89,115,91,117,128,22,66,4,217,162,68,107,68,95,144,101,94,119,99,193,141,144,96,115,115,68,128,19,76,4,217,162,85,73,119,125,138,144,93,92,78,104,193,141,64,128,19,86,4,217,162,79,89,126,81,139,67,70,75,125,193,141,144,65,128,19,96,4,217,162,144,67,109,117,75,137,70,81,110,86,193,141,64,128,22,106,4,217,162,65,100,120,68,144,87,98,116,81,193,141,144,85,125,124,77,128,18,116,4,217,162,81,83,124,72,141,86,101,87,82,193,141,64,128,23,126,4,217,162,144,81,74,111,81,136,99,90,86,69,193,141,144,114,80,121,86,128,17,136,4,217,162,75,83,101,71,138,86,93,122,193,141,64,128,20,146,4,217,162,144,82,69,93,97,148,144,68,98,75,104,193,141,67,128,23,156,4,217,162,79,89,94,86,143,144,85,77,92,101,193,141,144,69,115,126,79,128,20,166,4,217,162,65,106,117,127,137,144,94,85,64,67,193,141,144,65,128,19,176,4,217,162,144,86,100,84,81,148,93,85,106,84,193,141,64,128,23,186,4,217,162,101,127,88,67,135,144,81,108,114,114,193,141,144,80,64,98,113,128,20,196,4,217,162,88,87,109,67,134,66,109,113,81,193,141,69,97,65,128,19,206,4,217,162,95,105,81,105,141,144,86,127,64,116,193,141,64,128,21,216,4,217,162,144,72,103,120,120,137,144,87,78,121,95,193,141,144,65,128,20,226,4,217,162,144,80,123,88,93,141,144,79,104,68,83,193,141,64,128,21,236,4,217,162,73,72,101,82,149,83,72,82,68,193,141,73,72,101,82,128,20,246,4,217,162,77,100,65,79,142,144,85,80,78,112,193,141,144,65,128,20,0,5,217,162,144,89,105,86,100,140,144,99,81,78,89,193,141,64,128,18,10,5,217,162,98,78,107,72,139,99,77,106,87,193,141,64,128,22,20,5,217,162,144,72,109,83,120,143,80,105,106,105,193,141,71,124,86,113,128,20,30,5,217,162,144,90,103,99,116,138,78,84,87,65,193,141,144,65,128,20,40,5,217,162,98,123,125,83,137,144,66,120,106,120,193,141,144,65,128,22,50,5,217,162,144,81,81,119,102,134,83,74,68,83,193,141,66,74,64,82,128,21,60,5,217,162,144,89,87,96,97,137,144,99,109,118,74,193,141,144,65,128,21,70,5,217,162,101,85,75,75,149,95,87,116,88,193,141,69,125,86,115,128,19,80,5,217,162,83,97,115,92,140,144,79,70,100,125,193,141,64,128,21,90,5,217,162,89,99,87,94,144,73,105,78,64,193,141,79,122,73,94,128,21,100,5,217,162,144,85,76,99,119,139,144,101,110,118,74,193,141,144,65,128,20,110,5,217,162,144,96,66,116,108,137,144,92,121,79,120,193,141,64,128,19,120,5,217,162,67,104,76,74,140,88,121,127,126,193,141,144,65,128,22,130,5,217,162,144,66,117,101,106,134,85,100,93,66,193,141,85,64,88,66,128,20,140,5,217,162,68,108,69,90,142,144,101,126,90,117,193,141,144,65,128,21,150,5,217,162,77,104,92,87,149,68,110,120,116,193,141,68,74,106,111,128,18,160,5,217,162,74,113,107,115,137,84,82,126,74,193,141,64,128,21,170,5,217,162,87,102,97,99,149,92,74,103,78,193,141,87,102,97,99,128,21,180,5,217,162,144,68,104,85,78,139,144,71,81,99,90,193,141,144,65,128,23,190,5,217,162,144,84,102,83,92,136,144,88,103,123,90,193,141,76,65,104,66,128,24,200,5,217,162,144,93,97,72,117,134,144,74,66,102,93,193,141,144,95,99,110,125,128,20,210,5,217,162,101,118,73,122,137,144,93,97,122,66,193,141,144,65,128,23,220,5,217,162,87,85,112,80,136,144,84,108,106,116,193,141,144,67,121,90,100,128,22,230,5,217,162,80,116,92,91,136,144,93,74,86,193,141,144,80,105,86,79,128,18,240,5,217,162,93,70,85,125,141,94,87,79,110,193,141,64,128,22,250,5,217,162,79,84,110,97,134,144,94,102,88,70,193,141,65,80,102,96,128,20,4,6,217,162,144,88,67,127,124,138,86,86,67,70,193,141,144,65,128,20,14,6,217,162,90,85,113,116,137,144,82,126,125,126,193,141,144,65,128,20,24,6,217,162,144,70,92,96,104,148,70,90,72,65,193,141,144,65,128,19,34,6,217,162,89,104,95,68,138,144,67,77,95,123,193,141,64,128,22,44,6,217,162,89,94,111,114,134,144,86,98,121,119,193,141,73,92,70,64,128,22,54,6,217,162,77,121,101,69,144,144,94,123,109,66,193,141,108,117,82,71,128,23,64,6,217,162,71,79,116,99,136,144,90,105,127,71,193,141,144,93,102,75,102,128,20,74,6,217,162,144,96,93,74,136,144,127,89,117,193,141,95,68,125,128,21,84,6,217,162,144,92,70,78,110,140,144,74,92,87,95,193,141,144,65,128,22,94,6,217,162,144,68,73,64,127,143,70,85,102,91,193,141,66,76,101,92,128,19,104,6,217,162,89,81,74,68,139,65,103,115,86,193,141,144,65,128,23,114,6,217,162,71,87,76,124,135,144,100,126,97,97,193,141,144,96,104,97,65,128,20,124,6,217,162,144,83,127,94,126,137,144,65,114,122,89,193,141,64,128,19,134,6,217,162,82,101,74,98,140,144,74,87,113,86,193,141,64,128,22,144,6,217,162,75,85,92,79,134,144,70,90,118,98,193,141,73,69,72,78,128,20,154,6,217,162,94,67,120,74,142,144,94,68,111,99,193,141,144,65,128,18,164,6,217,162,97,119,112,109,140,87,119,75,122,193,141,64,128,17,174,6,217,162,85,118,71,139,91,97,111,119,193,141,64,128,21,184,6,217,162,83,86,107,102,149,101,124,82,114,193,141,83,86,107,102,128,20,194,6,217,162,144,72,127,121,78,140,81,94,90,69,193,141,144,65,128,20,204,6,217,162,76,111,121,95,142,144,70,87,111,69,193,141,144,65,128,24,214,6,217,162,144,89,73,85,103,135,144,81,67,104,72,193,141,144,81,65,64,71,128,21,224,6,217,162,71,76,64,71,135,96,105,125,85,193,141,103,109,125,87,128,20,234,6,217,162,144,80,75,119,71,138,85,107,97,112,193,141,144,65,128,20,244,6,217,162,119,68,89,136,77,82,109,67,193,141,77,101,105,90,128,18,254,6,217,162,90,67,117,121,148,73,95,115,85,193,141,66,128,22,8,7,217,162,97,107,66,83,143,99,125,107,109,193,141,65,69,104,110,64,128,21,18,7,217,162,144,92,79,100,64,137,144,101,121,90,64,193,141,144,65,128,19,28,7,217,162,144,80,98,85,111,139,90,101,87,77,193,141,64,128,20,38,7,217,162,144,95,72,95,64,141,144,94,88,123,102,193,141,64,128,21,48,7,217,162,81,72,89,109,143,75,122,64,65,193,141,93,66,89,110,128,18,58,7,217,162,100,126,114,112,138,67,77,95,123,193,141,64,128,18,68,7,217,162,95,126,126,104,148,71,113,88,77,193,141,68,128,19,78,7,217,162,144,80,96,85,83,139,65,125,120,125,193,141,64,128,19,88,7,217,162,95,69,115,121,138,144,92,98,114,104,193,141,64,128,19,98,7,217,162,144,95,73,124,72,137,70,118,99,75,193,141,64,128,19,108,7,217,162,144,72,90,120,114,148,79,117,122,98,193,141,64,128,24,118,7,217,162,144,96,83,92,110,144,144,95,77,85,125,193,141,144,65,70,70,113,128,20,128,7,217,162,144,81,106,74,83,140,144,91,125,89,91,193,141,64,128,22,138,7,217,162,79,89,127,86,134,144,101,114,101,65,193,141,74,73,90,86,128,21,148,7,217,162,75,115,91,64,143,65,98,106,104,193,141,77,86,69,104,128,20,158,7,217,162,67,112,115,88,139,144,101,101,109,118,193,141,144,65,128,20,168,7,217,162,144,65,98,119,84,141,144,75,96,71,117,193,141,64,128,24,178,7,217,162,144,89,111,117,119,135,144,74,123,73,115,193,141,144,72,107,65,115,128,23,188,7,217,162,144,71,94,66,96,144,144,100,80,112,92,193,141,92,114,109,124,128,19,198,7,217,162,144,93,70,93,114,137,102,70,85,119,193,141,64,128,19,208,7,217,162,101,90,111,68,142,98,108,112,86,193,141,144,65,128,22,218,7,217,162,144,75,116,73,87,134,96,118,95,76,193,141,96,66,86,72,128,20,228,7,217,162,97,66,116,114,142,144,93,100,106,85,193,141,144,65,128,24,238,7,217,162,144,83,85,80,105,144,144,76,64,85,97,193,141,144,71,84,123,72,128,22,248,7,217,162,80,78,114,143,144,78,97,74,77,193,141,144,78,80,123,91,128,21,2,8,217,162,144,82,98,102,104,142,144,79,92,116,96,193,141,144,65,128,23,12,8,217,162,144,83,69,111,120,136,73,100,67,85,193,141,144,90,97,108,99,128,21,22,8,217,162,144,75,123,79,78,142,144,81,125,99,114,193,141,144,65,128,19,32,8,217,162,74,109,94,71,142,97,124,80,104,193,141,144,65,128,21,42,8,217,162,90,95,115,102,135,80,72,90,119,193,141,90,95,123,119,128,19,52,8,217,162,144,102,64,103,107,141,76,64,79,65,193,141,64,128,23,62,8,217,162,144,100,105,95,106,143,92,102,95,103,193,141,144,72,67,64,67,128,24,72,8,217,162,144,90,68,77,125,144,144,87,118,121,81,193,141,144,66,77,84,108,128,22,82,8,217,162,94,68,127,100,134,144,79,69,109,93,193,141,80,64,82,96,128,20,92,8,217,162,98,106,112,101,142,144,97,119,80,92,193,141,144,65,128,23,102,8,217,162,144,79,119,65,100,136,101,127,118,85,193,141,144,106,72,119,119,128,21,112,8,217,162,65,116,114,112,136,69,111,91,91,193,141,68,91,105,107,128,21,122,8,217,162,75,119,81,84,135,144,67,118,115,73,193,141,144,98,73,128,20,132,8,217,162,85,65,92,96,137,144,79,90,101,111,193,141,144,65,128,19,142,8,217,162,79,97,126,77,142,74,127,82,121,193,141,144,65,128,20,152,8,217,162,144,97,115,89,103,142,93,86,86,92,193,141,144,65,128,19,162,8,217,162,144,86,101,91,114,137,96,79,98,89,193,141,64,128,19,172,8,217,162,144,72,113,104,81,139,94,96,99,95,193,141,64,128,19,182,8,217,162,144,84,81,67,107,139,96,75,73,81,193,141,64,128,19,192,8,217,162,65,115,108,74,148,144,97,93,91,107,193,141,64,128,20,202,8,217,162,144,79,73,105,97,138,144,89,70,99,81,193,141,64,128,20,212,8,217,162,144,67,97,99,69,140,66,97,114,97,193,141,144,65,128,21,222,8,217,162,90,112,80,114,149,88,64,66,83,193,141,66,112,78,95,128,23,232,8,217,162,99,121,92,74,136,144,66,80,110,70,193,141,144,97,105,114,80,128,21,242,8,217,162,74,77,82,112,149,78,89,70,98,193,141,74,77,82,112,128,19,252,8,217,162,70,71,80,83,141,144,87,79,115,97,193,141,64,128,20,6,9,217,162,97,103,114,96,148,144,96,84,109,119,193,141,144,65,128,24,16,9,217,162,144,75,125,116,106,134,144,100,121,76,106,193,141,144,111,125,124,106,128,20,26,9,217,162,85,91,68,82,137,144,101,114,110,88,193,141,144,65,128,23,36,9,217,162,144,85,82,110,103,144,89,76,104,102,193,141,144,110,95,87,77,128,19,46,9,217,162,144,77,80,74,87,137,99,76,122,107,193,141,64,128,20,56,9,217,162,144,74,66,111,118,140,97,113,99,124,193,141,144,65,128,20,66,9,217,162,144,73,93,96,72,148,69,66,64,111,193,141,144,65,128,23,76,9,217,162,76,116,98,90,135,144,80,83,110,90,193,141,144,80,67,76,66,128,24,86,9,217,162,144,71,79,118,75,143,144,90,74,114,86,193,141,144,97,90,104,97,128,22,96,9,217,162,144,77,113,103,88,134,98,96,125,107,193,141,98,64,88,104,128,23,106,9,217,162,144,93,85,84,123,135,69,104,86,118,193,141,144,88,85,64,73,128,23,116,9,217,162,144,86,75,98,98,136,67,91,123,103,193,141,144,85,80,89,71,128,20,126,9,217,162,144,78,66,94,78,148,144,77,116,84,120,193,141,65,128,20,136,9,217,162,98,67,120,92,142,144,90,87,77,88,193,141,144,65,128,21,146,9,217,162,144,88,112,103,101,142,144,93,76,92,104,193,141,144,65,128,20,156,9,217,162,89,76,88,84,134,68,86,82,92,193,141,68,80,84,128,21,166,9,217,162,100,121,110,77,136,84,80,82,77,193,141,112,105,124,64,128,18,176,9,217,162,92,84,70,106,138,81,122,85,106,193,141,64,128,23,186,9,217,162,75,69,96,99,136,144,93,125,92,74,193,141,144,86,120,124,107,128,24,196,9,217,162,144,85,111,98,77,135,144,99,112,101,96,193,141,144,65,96,96,77,128,20,206,9,217,162,88,71,107,107,139,144,84,90,121,87,193,141,144,65,128,23,216,9,217,162,144,77,120,96,65,136,87,83,88,120,193,141,144,90,107,120,121,128,19,226,9,217,162,144,71,87,101,142,144,75,66,124,193,141,144,65,128,22,236,9,217,162,144,69,93,84,96,136,69,79,77,98,193,141,144,82,89,126,128,24,246,9,217,162,144,75,76,116,65,144,144,69,88,123,99,193,141,144,69,115,120,94,128,18,0,10,217,162,97,117,67,82,148,73,78,112,96,193,141,67,128,19,10,10,217,162,90,94,104,80,142,70,111,119,72,193,141,144,65,128,21,20,10,217,162,70,90,66,103,149,85,124,101,116,193,141,70,90,66,103,128,23,30,10,217,162,80,96,81,111,135,144,78,65,67,119,193,141,144,78,65,66,81,128,20,40,10,217,162,144,69,101,99,85,142,92,114,121,105,193,141,144,65,128,21,50,10,217,162,144,94,88,113,71,142,144,72,98,67,64,193,141,144,65,128,19,60,10,217,162,144,83,107,86,101,148,100,95,123,95,193,141,64,128,21,70,10,217,162,90,75,98,86,149,68,87,83,79,193,141,68,87,66,75,128,20,80,10,217,162,144,83,65,125,88,138,144,99,79,118,92,193,141,64,128,20,90,10,217,162,93,93,115,65,142,144,97,126,84,127,193,141,144,65,128,21,100,10,217,162,144,96,127,72,96,140,144,67,99,114,122,193,141,144,65,128,21,110,10,217,162,89,66,75,106,149,95,69,127,84,193,141,89,66,75,106,128,24,120,10,217,162,144,87,122,66,77,134,144,80,89,65,116,193,141,144,87,123,68,64,128,21,130,10,217,162,69,73,99,86,149,76,95,106,112,193,141,69,73,99,86,128,24,140,10,217,162,144,69,117,75,77,134,144,81,99,91,75,193,141,144,85,119,91,79,128,23,150,10,217,162,144,97,96,112,117,136,66,72,107,100,193,141,144,99,104,91,81,128,20,160,10,217,162,144,96,104,91,97,148,65,118,80,65,193,141,144,81,128,21,170,10,217,162,144,94,119,91,134,94,100,114,64,193,141,94,96,64,64,128,20,180,10,217,162,94,99,122,102,137,144,68,121,71,104,193,141,144,65,128,19,190,10,217,162,89,122,86,113,141,144,89,115,86,102,193,141,64,128,19,200,10,217,162,85,103,112,78,141,144,87,88,100,108,193,141,64,128,21,210,10,217,162,144,69,83,108,88,139,144,85,68,107,95,193,141,144,65,128,18,220,10,217,162,90,79,115,96,140,77,114,108,124,193,141,64,128,19,230,10,217,162,78,114,101,92,140,144,76,93,127,80,193,141,64,128,19,240,10,217,162,65,70,73,109,142,70,95,68,100,193,141,144,65,128,20,250,10,217,162,144,81,74,118,96,148,79,74,121,118,193,141,144,65,128,20,4,11,217,162,144,66,87,99,76,140,144,82,120,89,67,193,141,64,128,22,14,11,217,162,144,68,121,114,121,135,86,100,83,102,193,141,144,89,96,89,128,19,24,11,217,162,144,95,97,73,120,137,66,120,86,95,193,141,64,128,20,34,11,217,162,83,83,83,115,137,144,67,111,74,78,193,141,144,65,128,23,44,11,217,162,144,101,93,102,117,136,86,125,84,94,193,141,144,115,96,114,107,128,19,54,11,217,162,97,86,113,113,137,72,99,119,98,193,141,144,65,128,21,64,11,217,162,144,72,97,98,115,142,144,74,113,92,123,193,141,144,65,128,20,74,11,217,162,144,84,75,107,81,142,96,92,105,67,193,141,144,65,128,18,84,11,217,162,144,68,114,97,148,86,65,71,79,193,141,64,128,19,94,11,217,162,84,86,81,111,138,144,67,127,106,88,193,141,64,128,20,104,11,217,162,97,72,123,74,142,144,96,71,88,65,193,141,144,65,128,18,114,11,217,162,99,81,117,109,140,68,115,126,83,193,141,64,128,19,124,11,217,162,93,78,83,124,148,144,95,108,86,71,193,141,64,128,21,134,11,217,162,78,69,85,66,149,93,91,111,87,193,141,78,69,85,66,128,23,144,11,217,162,144,101,83,114,99,144,144,85,86,66,193,141,144,100,126,92,97,128,22,154,11,217,162,78,109,107,103,144,144,81,109,74,82,193,141,96,90,117,121,128,18,164,11,217,162,94,84,91,80,148,86,103,90,81,193,141,65,128,19,174,11,217,162,94,116,122,84,141,144,80,83,107,69,193,141,64,128,21,184,11,217,162,78,115,122,77,135,91,97,68,68,193,141,95,115,126,77,128,21,194,11,217,162,144,86,106,112,73,137,144,88,118,119,105,193,141,144,65,128,24,204,11,217,162,144,88,74,118,117,135,144,92,70,87,66,193,141,144,88,66,86,65,128,21,214,11,217,162,86,98,117,73,149,66,107,72,86,193,141,65,73,114,89,128,18,224,11,217,162,127,84,100,148,144,92,90,116,103,193,141,64,128,19,234,11,217,162,88,92,72,118,142,69,124,70,106,193,141,144,65,128,21,244,11,217,162,97,80,78,113,149,80,114,124,121,193,141,80,93,81,120,128,22,254,11,217,162,74,109,81,114,143,144,71,93,127,86,193,141,67,79,82,92,128,21,8,12,217,162,90,75,88,79,143,100,94,115,88,193,141,126,106,75,103,128,24,18,12,217,162,144,80,94,100,118,134,144,76,106,88,117,193,141,144,92,126,124,118,128,19,28,12,217,162,67,64,86,106,141,144,67,123,83,114,193,141,64,128,24,38,12,217,162,144,99,74,115,108,134,144,95,69,114,64,193,141,144,127,79,116,64,128,20,48,12,217,162,144,83,114,108,69,138,95,79,65,69,193,141,144,65,128,23,58,12,217,162,144,77,82,117,126,135,87,93,94,64,193,141,144,72,66,97,126,128,21,68,12,217,162,79,66,87,92,144,74,84,66,74,193,141,68,110,85,82,128,22,78,12,217,162,97,64,81,118,134,144,85,118,69,74,193,141,96,64,80,118,128,21,88,12,217,162,144,81,100,93,74,138,144,72,82,117,86,193,141,144,65,128,18,98,12,217,162,83,86,108,115,139,98,92,95,112,193,141,64,128,21,108,12,217,162,69,94,84,144,144,76,71,91,121,193,141,76,76,122,77,128,20,118,12,217,162,144,98,106,70,107,141,144,84,102,109,96,193,141,64,128,18,128,12,217,162,73,125,117,103,148,87,95,126,77,193,141,64,128,18,138,12,217,162,74,77,110,110,137,90,79,113,71,193,141,64,128,23,148,12,217,162,144,69,79,93,86,144,144,96,89,82,110,193,141,91,73,117,88,128,20,158,12,217,162,144,91,81,86,97,142,91,112,84,91,193,141,144,65,128,21,168,12,217,162,92,80,116,97,143,65,84,118,77,193,141,93,101,106,110,128,19,178,12,217,162,82,70,85,77,138,90,91,115,108,193,141,144,65,128,22,188,12,217,162,96,95,101,115,144,144,83,79,103,118,193,141,115,111,77,105,128,21,198,12,217,162,144,100,116,120,104,142,144,72,103,112,70,193,141,144,65,128,23,208,12,217,162,144,70,100,100,98,136,144,84,103,90,126,193,141,82,67,126,92,128,20,218,12,217,162,99,109,77,125,142,144,70,68,126,65,193,141,144,65,128,22,228,12,217,162,94,86,91,106,143,98,110,102,79,193,141,65,65,69,65,121,128,23,238,12,217,162,144,71,113,101,109,144,74,71,66,120,193,141,144,81,120,104,101,128,23,248,12,217,162,144,82,66,80,105,135,144,96,103,121,87,193,141,144,66,80,65,128,18,2,13,217,162,144,65,120,127,141,82,93,115,69,193,141,64,128,21,12,13,217,162,144,87,68,77,91,142,144,94,76,91,120,193,141,144,65,128,20,22,13,217,162,144,88,127,94,94,140,144,84,124,71,193,141,144,65,128,21,32,13,217,162,65,72,83,105,143,92,76,103,103,193,141,93,84,123,80,128,18,42,13,217,162,79,93,82,83,148,83,79,74,83,193,141,64,128,22,52,13,217,162,144,91,114,83,122,143,99,85,90,74,193,141,71,99,70,80,128,22,62,13,217,162,94,95,88,107,134,144,71,97,114,86,193,141,88,94,72,106,128,24,72,13,217,162,144,97,89,80,84,135,144,79,103,108,77,193,141,144,65,65,64,65,128,22,82,13,217,162,91,89,76,76,135,144,88,77,68,106,193,141,144,68,64,98,128,20,92,13,217,162,82,84,65,108,148,144,68,94,107,91,193,141,144,68,128,20,102,13,217,162,144,80,91,119,117,140,87,104,70,86,193,141,144,65,128,20,112,13,217,162,144,87,122,98,72,140,144,93,122,78,193,141,144,65,128,23,122,13,217,162,144,87,99,106,80,144,84,98,97,68,193,141,144,108,70,75,84,128,23,132,13,217,162,144,78,94,102,127,136,144,99,85,109,124,193,141,109,75,75,69,128,19,142,13,217,162,94,93,90,102,140,99,87,83,78,193,141,144,65,128,18,152,13,217,162,100,125,87,126,148,84,86,86,85,193,141,65,128,23,162,13,217,162,144,93,103,90,75,136,91,108,101,72,193,141,144,70,75,127,67,128,19,172,13,217,162,144,90,107,65,140,144,88,68,64,64,193,141,64,128,24,182,13,217,162,144,79,83,98,125,135,144,78,77,85,84,193,141,144,78,65,64,81,128,20,192,13,217,162,144,76,76,120,111,138,144,80,113,65,100,193,141,64,128,23,202,13,217,162,144,101,119,119,93,143,72,118,107,72,193,141,144,93,65,76,85,128,18,212,13,217,162,92,125,126,81,148,71,82,118,104,193,141,67,128,21,222,13,217,162,144,78,81,65,115,134,74,84,89,107,193,141,68,88,73,128,22,232,13,217,162,82,77,103,97,134,144,69,106,110,95,193,141,82,69,65,97,128,22,242,13,217,162,69,103,73,117,134,144,73,111,69,102,193,141,68,64,72,80,128,20,252,13,217,162,83,101,94,126,149,73,101,71,120,193,141,91,79,78,128,21,6,14,217,162,65,93,84,127,149,71,99,113,84,193,141,65,93,84,127,128,20,16,14,217,162,144,67,69,77,87,138,144,79,70,73,104,193,141,64,128,20,26,14,217,162,144,79,101,86,87,138,144,92,68,113,66,193,141,64,128,20,36,14,217,162,144,92,76,77,90,138,100,93,67,93,193,141,144,65,128,20,46,14,217,162,65,90,77,102,134,74,104,88,116,193,141,72,72,100,128,20,56,14,217,162,144,84,100,102,110,140,144,84,123,73,64,193,141,64,128,21,66,14,217,162,144,81,105,68,70,142,144,89,98,106,100,193,141,144,65,128,23,76,14,217,162,144,78,80,102,68,135,93,124,92,69,193,141,144,66,64,98,67,128,21,86,14,217,162,95,122,116,120,135,85,123,112,90,193,141,95,123,116,122,128,22,96,14,217,162,144,100,96,111,102,134,66,107,96,87,193,141,66,75,64,82,128,20,106,14,217,162,144,74,97,114,114,140,144,82,69,97,109,193,141,64,128,21,116,14,217,162,92,70,106,65,135,100,76,96,66,193,141,124,78,106,67,128,23,126,14,217,162,70,109,122,82,136,144,76,93,115,70,193,141,144,74,112,73,88,128,21,136,14,217,162,89,109,109,76,149,101,67,67,82,193,141,89,109,109,76,128,19,146,14,217,162,83,110,93,137,144,80,79,97,93,193,141,144,65,128,19,156,14,217,162,144,70,83,88,116,138,84,115,80,193,141,144,65,128,22,166,14,217,162,76,83,116,72,144,144,78,119,82,84,193,141,91,75,70,92,128,18,176,14,217,162,76,106,113,65,141,98,88,116,127,193,141,64,128,21,186,14,217,162,67,68,115,68,134,144,75,99,113,84,193,141,68,66,68,128,19,196,14,217,162,96,68,115,80,137,68,65,109,108,193,141,144,65,128,22,206,14,217,162,78,98,123,101,135,144,68,92,71,89,193,141,144,92,68,89,128,20,216,14,217,162,72,97,76,66,137,144,95,80,126,93,193,141,144,65,128,19,226,14,217,162,90,89,125,104,140,99,69,78,65,193,141,144,65,128,21,236,14,217,162,77,85,78,126,134,65,68,87,127,193,141,65,68,70,126,128,24,246,14,217,162,144,86,66,72,105,143,144,65,90,87,94,193,141,144,87,92,96,71,128,23,0,15,217,162,65,91,76,83,143,144,66,110,125,118,193,141,144,65,83,113,99,128,19,10,15,217,162,144,65,127,121,100,141,85,126,76,64,193,141,64,128,20,20,15,217,162,144,87,94,64,104,140,71,96,107,113,193,141,144,65,128,21,30,15,217,162,144,65,126,115,104,139,144,73,74,79,90,193,141,144,65,128,19,40,15,217,162,81,113,109,72,137,81,89,116,76,193,141,144,65,128,21,50,15,217,162,88,127,70,108,149,69,94,92,92,193,141,67,69,84,124,128,20,60,15,217,162,144,67,116,86,72,142,97,68,119,114,193,141,144,65,128,21,70,15,217,162,69,122,124,112,149,94,98,93,110,193,141,69,122,124,112,128,21,80,15,217,162,74,112,90,87,134,82,107,83,104,193,141,66,96,82,64,128,19,90,15,217,162,144,82,117,76,112,148,101,67,64,71,193,141,64,128,19,100,15,217,162,70,88,81,87,138,144,77,98,126,73,193,141,64,128,23,110,15,217,162,144,83,110,119,91,144,98,75,66,67,193,141,144,117,121,121,94,128,20,120,15,217,162,71,96,66,89,137,144,80,126,98,118,193,141,144,65,128,22,130,15,217,162,87,77,105,95,134,144,77,66,76,103,193,141,82,77,97,89,128,23,140,15,217,162,144,65,88,125,75,135,92,103,89,107,193,141,144,65,88,100,65,128,23,150,15,217,162,144,89,73,74,120,143,74,66,115,79,193,141,144,79,70,87,105,128,18,160,15,217,162,76,121,79,65,137,94,82,65,90,193,141,64,128,24,170,15,217,162,144,89,121,84,118,134,144,73,97,109,68,193,141,144,89,121,125,120,128,20,180,15,217,162,144,75,109,124,97,148,75,81,94,122,193,141,144,65,128,21,190,15,217,162,144,71,70,93,75,138,144,70,80,85,107,193,141,144,65,128,18,200,15,217,162,90,123,67,86,141,95,68,93,127,193,141,64,128,19,210,15,217,162,87,89,67,87,139,70,71,76,104,193,141,144,65,128,18,220,15,217,162,88,109,71,79,138,87,69,122,78,193,141,64,128,19,230,15,217,162,82,108,89,120,137,66,119,116,117,193,141,144,65,128,23,240,15,217,162,144,65,79,106,125,136,144,90,105,117,119,193,141,91,102,95,74,128,20,250,15,217,162,78,85,105,75,139,144,79,90,72,92,193,141,144,65,128,21,4,16,217,162,81,111,64,115,149,66,110,96,114,193,141,65,87,124,71,128,22,14,16,217,162,144,72,77,99,105,135,144,98,114,81,96,193,141,144,65,73,128,20,24,16,217,162,144,79,114,87,109,140,78,116,117,101,193,141,144,65,128,21,34,16,217,162,144,74,110,101,107,139,144,82,110,122,107,193,141,144,65,128,23,44,16,217,162,144,88,94,112,80,144,144,96,74,70,112,193,141,71,107,86,96,128,21,54,16,217,162,144,74,92,117,80,137,144,100,95,95,67,193,141,144,65,128,20,64,16,217,162,144,72,104,102,123,140,71,102,106,127,193,141,144,65,128,20,74,16,217,162,84,94,72,91,137,144,74,71,67,115,193,141,144,65,128,22,84,16,217,162,144,86,77,74,67,134,78,99,98,90,193,141,72,98,96,88,128,19,94,16,217,162,86,102,126,122,140,101,99,99,115,193,141,144,65,128,21,104,16,217,162,144,99,105,91,72,140,144,76,87,115,94,193,141,144,65,128,21,114,16,217,162,92,64,89,122,143,77,90,76,80,193,141,105,90,102,74,128,23,124,16,217,162,144,95,72,93,80,136,144,98,64,112,75,193,141,125,72,109,69,128,20,134,16,217,162,87,66,68,124,142,144,65,119,123,69,193,141,144,65,128,21,144,16,217,162,83,127,105,76,143,65,94,106,79,193,141,85,94,83,91,128,23,154,16,217,162,144,100,64,124,110,135,96,89,67,100,193,141,144,68,64,124,74,128,21,164,16,217,162,144,88,76,81,127,138,144,65,86,104,124,193,141,144,65,128,21,174,16,217,162,144,91,68,76,98,138,144,66,116,64,97,193,141,144,65,128,20,184,16,217,162,144,72,66,122,97,140,144,93,78,115,64,193,141,64,128,23,194,16,217,162,68,87,107,82,143,144,96,75,70,98,193,141,144,91,115,91,80,128,21,204,16,217,162,90,116,119,120,149,76,65,82,110,193,141,66,114,82,92,128,23,214,16,217,162,144,91,96,118,78,136,66,68,96,99,193,141,144,89,100,86,111,128,19,224,16,217,162,65,93,111,95,142,80,107,102,93,193,141,144,65,128,22,234,16,217,162,144,67,85,95,120,143,70,73,126,83,193,141,66,116,94,91,128,23,244,16,217,162,144,85,96,102,85,143,70,85,65,106,193,141,144,79,75,100,107,128,20,254,16,217,162,68,118,126,69,149,68,93,72,115,193,141,89,117,82,128,24,8,17,217,162,144,87,123,85,109,143,144,75,102,109,100,193,141,144,99,98,67,81,128,22,18,17,217,162,144,95,92,101,88,136,95,110,64,76,193,141,144,114,101,92,128,19,28,17,217,162,67,121,92,69,138,144,89,77,71,82,193,141,64,128,24,38,17,217,162,144,85,71,67,67,135,144,100,114,84,119,193,141,144,68,66,64,67,128,18,48,17,217,162,76,89,65,104,141,73,85,123,119,193,141,64,128,18,58,17,217,162,93,74,105,89,140,66,103,107,76,193,141,64,128,21,68,17,217,162,65,126,103,117,149,85,89,82,71,193,141,65,126,103,117,128,19,78,17,217,162,144,75,100,105,80,148,76,81,99,64,193,141,64,128,24,88,17,217,162,144,69,64,83,87,143,144,100,121,104,110,193,141,144,105,121,124,69,128,22,98,17,217,162,144,76,113,102,89,143,86,72,66,95,193,141,73,86,92,70,128,19,108,17,217,162,144,97,87,86,64,137,96,72,114,70,193,141,64,128,21,118,17,217,162,78,125,125,82,134,87,93,118,113,193,141,70,93,116,80,128,19,128,17,217,162,85,107,121,108,138,144,100,107,69,71,193,141,64,128,20,138,17,217,162,144,85,81,110,111,142,87,69,113,70,193,141,144,65,128,20,148,17,217,162,144,72,121,65,94,142,75,121,79,118,193,141,144,65,128,18,158,17,217,162,99,96,76,83,138,70,100,116,87,193,141,64,128,19,168,17,217,162,144,96,85,88,122,141,73,102,120,98,193,141,64,128,21,178,17,217,162,101,103,124,95,144,86,125,94,96,193,141,78,106,93,127,128,24,188,17,217,162,144,90,64,104,109,134,144,69,74,114,114,193,141,144,95,74,122,126,128,19,198,17,217,162,84,123,120,86,140,144,91,86,123,119,193,141,64,128,20,208,17,217,162,92,79,96,65,137,144,90,89,74,80,193,141,144,65,128,19,218,17,217,162,97,94,123,68,138,144,65,92,90,125,193,141,64,128,19,228,17,217,162,144,95,124,78,78,137,93,75,120,110,193,141,64,128,20,238,17,217,162,144,77,120,84,83,139,144,65,68,106,69,193,141,64,128,22,248,17,217,162,144,97,80,109,69,143,97,77,66,78,193,141,144,67,106,119,128,22,2,18,217,162,144,89,104,100,136,144,73,104,117,85,193,141,73,113,93,119,128,23,12,18,217,162,144,81,103,70,80,144,144,91,127,104,68,193,141,74,88,97,116,128,21,22,18,217,162,69,124,89,94,149,93,81,92,115,193,141,69,124,89,94,128,23,32,18,217,162,144,66,93,93,108,144,76,97,79,97,193,141,144,78,126,109,77,128,21,42,18,217,162,78,118,110,120,143,91,108,77,123,193,141,106,98,124,115,128,22,52,18,217,162,144,82,106,127,68,134,85,71,68,79,193,141,69,69,64,76,128,24,62,18,217,162,144,75,90,111,83,135,144,65,114,124,114,193,141,144,65,82,108,81,128,20,72,18,217,162,144,111,100,119,142,144,100,103,86,107,193,141,144,65,128,24,82,18,217,162,144,88,102,101,104,134,144,66,126,82,103,193,141,144,90,126,119,104,128,20,92,18,217,162,84,120,75,109,139,144,101,83,100,72,193,141,144,65,128,21,102,18,217,162,144,65,67,96,127,139,144,100,87,64,106,193,141,144,65,128,23,112,18,217,162,144,85,102,124,122,136,144,91,96,110,105,193,141,78,70,82,81,128,19,122,18,217,162,144,74,68,117,96,137,69,85,107,105,193,141,64,128,23,132,18,217,162,144,98,112,113,107,136,144,86,68,91,82,193,141,116,116,106,123,128,21,142,18,217,162,80,106,115,111,149,86,87,97,105,193,141,80,106,115,111,128,18,152,18,217,162,88,122,96,86,148,97,64,97,81,193,141,64,128,20,162,18,217,162,87,90,112,83,149,71,94,91,79,193,141,127,94,102,128,22,172,18,217,162,75,96,97,91,134,144,98,67,65,79,193,141,73,96,96,81,128,23,182,18,217,162,144,92,71,108,114,135,69,73,90,68,193,141,144,88,70,100,114,128,20,192,18,217,162,144,80,112,101,127,141,144,96,83,122,73,193,141,64,128,21,202,18,217,162,95,118,75,86,149,74,74,112,83,193,141,65,85,122,93,128,19,212,18,217,162,92,110,72,82,139,65,70,91,66,193,141,144,65,128,19,222,18,217,162,144,66,101,89,112,141,81,65,105,88,193,141,64,128,21,232,18,217,162,67,119,120,75,143,67,86,75,101,193,141,71,78,67,112,128,19,242,18,217,162,144,106,101,108,141,144,77,86,84,95,193,141,64,128,21,252,18,217,162,101,108,92,105,149,68,112,93,85,193,141,68,89,79,86,128,21,6,19,217,162,144,77,103,110,97,142,144,81,76,84,82,193,141,144,65,128,22,16,19,217,162,144,81,71,87,80,135,91,94,111,113,193,141,144,65,80,79,128,24,26,19,217,162,144,76,109,96,118,135,144,70,103,122,72,193,141,144,68,101,96,70,128,21,36,19,217,162,83,67,90,106,136,99,83,96,68,193,141,112,80,122,110,128,19,46,19,217,162,67,107,102,92,138,144,84,127,108,98,193,141,64,128,22,56,19,217,162,66,115,124,89,144,144,102,70,125,108,193,141,104,122,122,69,128,20,66,19,217,162,144,94,120,121,96,140,77,91,69,71,193,141,144,65,128,20,76,19,217,162,144,99,75,121,91,142,96,65,83,100,193,141,144,65,128,23,86,19,217,162,144,76,117,109,101,144,88,108,106,90,193,141,144,101,98,87,127,128,22,96,19,217,162,82,68,70,95,134,144,88,83,65,107,193,141,66,68,70,85,128,24,106,19,217,162,144,75,85,126,88,143,144,68,102,90,89,193,141,144,79,124,88,113,128,18,116,19,217,162,65,99,81,74,137,95,75,64,67,193,141,64,128,21,126,19,217,162,98,123,121,90,135,144,98,112,77,119,193,141,144,68,101,128,21,136,19,217,162,91,104,87,72,144,79,88,112,114,193,141,76,79,102,86,128,19,146,19,217,162,144,81,117,122,101,137,79,109,112,74,193,141,64,128,19,156,19,217,162,79,114,65,67,140,144,98,102,127,78,193,141,64,128,21,166,19,217,162,76,73,79,144,144,79,114,76,67,193,141,79,126,85,82,128,21,176,19,217,162,91,84,112,78,149,73,122,78,82,193,141,71,96,83,106,128,23,186,19,217,162,98,124,95,115,144,144,97,114,104,86,193,141,65,68,111,72,73,128,21,196,19,217,162,94,100,92,103,136,69,74,119,71,193,141,91,110,107,96,128,19,206,19,217,162,65,70,71,109,140,81,108,126,81,193,141,144,65,128,18,216,19,217,162,85,99,113,116,141,90,70,70,125,193,141,64,128,21,226,19,217,162,74,94,106,127,143,96,117,86,86,193,141,107,84,65,85,128,5,236,19,219,128,0
>5008	48 48 88 46 64 51 51 c1 8d 90 67 57 59 57 80 13
>5018	6e 00 d9 a2 60 5c 4f 56 8d 90 4f 5c 7b 6f c1 8d
>5028	40 80 14 78 00 d9 a2 90 4f 60 59 56 94 90 5d 4c
>5038	5c 72 c1 8d 40 80 15 82 00 d9 a2 90 45 41 41 42
>5048	8b 90 57 51 76 4a c1 8d 90 41 80 13 8c 00 d9 a2
>5058	4e 74 66 45 8e 47 40 4b 40 c1 8d 90 41 80 15 96
>5068	00 d9 a2 57 74 73 55 86 4b 66 58 74 c1 8d 43 64
>5078	50 54 80 14 a0 00 d9 a2 90 48 57 6e 54 8c 90 49
>5088	6c 5c 4c c1 8d 40 80 15 aa 00 d9 a2 4f 44 5b 6b
>5098	95 54 48 70 41 c1 8d 4f 44 5b 6b 80 16 b4 00 d9
>50a8	a2 51 5f 65 60 86 90 65 7e 5a 73 c1 8d 50 41 65
>50b8	40 80 14 be 00 d9 a2 47 55 67 6a 8e 90 55 7e 61
>50c8	59 c1 8d 90 41 80 12 c8 00 d9 a2 65 46 65 5a 8c
>50d8	43 7a 54 6f c1 8d 40 80 15 d2 00 d9 a2 90 51 72
>50e8	5a 68 8e 90 62 51 41 45 c1 8d 90 41 80 17 dc 00
>50f8	d9 a2 49 4e 40 41 87 90 43 6e 51 5e c1 8d 90 42
>5108	60 51 5d 80 16 e6 00 d9 a2 90 41 6c 42 44 86 5b
>5118	7d 40 77 c1 8d 5a 51 40 74 80 14 f0 00 d9 a2 90
>5128	5d 45 41 7a 8a 90 64 6f 7e 47 c1 8d 40 80 13 fa
>5138	00 d9 a2 90 61 45 46 66 89 59 56 7c 58 c1 8d 40
>5148	80 15 04 01 d9 a2 90 5a 4a 7e 70 8e 90 64 44 71
>5158	67 c1 8d 90 41 80 13 0e 01 d9 a2 60 41 78 4e 8c
>5168	90 64 71 72 67 c1 8d 40 80 14 18 01 d9 a2 52 73
>5178	4e 60 8b 90 51 6d 40 4e c1 8d 90 41 80 14 22 01
>5188	d9 a2 90 5b 65 68 6a 8e 56 68 66 50 c1 8d 90 41
>5198	80 13 2c 01 d9 a2 63 68 69 49 8e 4a 68 57 7e c1
>51a8	8d 90 41 80 16 36 01 d9 a2 4c 51 65 68 86 90 4a
>51b8	5b 68 4c c1 8d 44 40 45 60 80 15 40 01 d9 a2 43
>51c8	40 6f 55 87 5f 4c 5a 61 c1 8d 5f 4c 7f 75 80 14
>51d8	4a 01 d9 a2 5e 51 6c 41 8e 90 5e 43 7f 7d c1 8d
>51e8	90 41 80 15 54 01 d9 a2 45 5a 6a 5a 95 63 75 52
>51f8	72 c1 8d 45 5a 6a 5a 80 16 5e 01 d9 a2 55 7d 6c
>5208	78 90 5d 59 67 63 c1 8d 90 47 5b 7a 6b 80 16 68
>5218	01 d9 a2 90 4b 7d 7a 6b 86 59 66 60 4e c1 8d 50
>5228	42 40 44 80 12 72 01 d9 a2 60 78 77 5a 94 5e 59
>5238	5e 59 c1 8d 41 80 17 7c 01 d9 a2 63 6d 6e 5a 87
>5248	90 58 40 4f 63 c1 8d 90 58 40 41 61 80 16 86 01
>5258	d9 a2 4b 42 70 62 90 50 73 4a 41 c1 8d 90 45 70
>5268	59 5f 80 12 90 01 d9 a2 90 54 47 4e 89 64 7b 48
>5278	51 c1 8d 40 80 16 9a 01 d9 a2 46 4d 6c 71 86 90
>5288	50 47 48 63 c1 8d 46 48 64 51 80 17 a4 01 d9 a2
>5298	90 53 71 6e 53 90 90 5c 4b 57 74 c1 8d 48 59 69
>52a8	61 80 12 ae 01 d9 a2 65 79 4c 73 8d 51 6e 7f 58
>52b8	c1 8d 40 80 12 b8 01 d9 a2 5e 56 77 7f 94 56 7e
>52c8	7d 4e c1 8d 41 80 17 c2 01 d9 a2 90 51 5b 47 52
>52d8	88 90 47 79 79 59 c1 8d 56 62 7e 49 80 13 cc 01
>52e8	d9 a2 44 7c 6c 64 8c 54 7d 45 61 c1 8d 90 41 80
>52f8	13 d6 01 d9 a2 4c 4b 56 67 8a 90 58 60 63 5a c1
>5308	8d 40 80 14 e0 01 d9 a2 90 41 59 60 67 8a 49 51
>5318	56 67 c1 8d 90 41 80 13 ea 01 d9 a2 90 67 78 63
>5328	8d 90 60 6f 78 65 c1 8d 40 80 13 f4 01 d9 a2 90
>5338	56 76 41 53 94 5e 5a 71 4c c1 8d 40 80 14 fe 01
>5348	d9 a2 90 42 47 55 74 8e 53 60 41 53 c1 8d 90 41
>5358	80 14 08 02 d9 a2 4d 62 48 75 89 90 58 53 48 4d
>5368	c1 8d 90 41 80 15 12 02 d9 a2 57 6f 61 63 87 90
>5378	43 66 63 4d c1 8d 90 42 4d 80 13 1c 02 d9 a2 63
>5388	45 4d 54 8b 60 5b 7c 50 c1 8d 90 41 80 14 26 02
>5398	d9 a2 90 5a 78 58 4d 94 5a 5d 75 5d c1 8d 90 41
>53a8	80 17 30 02 d9 a2 43 52 7d 52 87 90 4d 4e 74 4a
>53b8	c1 8d 90 4c 4c 40 4a 80 17 3a 02 d9 a2 90 4c 62
>53c8	71 7c 90 90 62 6b 51 77 c1 8d 56 48 5f 7b 80 15
>53d8	44 02 d9 a2 90 52 79 4a 6b 8a 90 4d 7f 62 6c c1
>53e8	8d 90 41 80 17 4e 02 d9 a2 5f 65 69 76 88 90 48
>53f8	4a 53 5f c1 8d 90 57 6f 7a 69 80 14 58 02 d9 a2
>5408	90 65 5b 52 48 89 90 43 5b 6c 40 c1 8d 40 80 14
>5418	62 02 d9 a2 90 58 77 45 7b 8d 90 54 5a 57 4f c1
>5428	8d 40 80 13 6c 02 d9 a2 5a 6b 46 77 89 55 4d 54
>5438	58 c1 8d 90 41 80 14 76 02 d9 a2 90 51 62 5b 60
>5448	8c 56 65 52 56 c1 8d 90 41 80 18 80 02 d9 a2 90
>5458	5a 6c 73 6f 90 90 58 6a 53 43 c1 8d 90 42 42 60
>5468	6c 80 14 8a 02 d9 a2 41 63 4b 40 8e 90 48 41 7c
>5478	66 c1 8d 90 41 80 15 94 02 d9 a2 49 46 7b 55 95
>5488	64 5c 51 68 c1 8d 49 46 7b 55 80 11 9e 02 d9 a2
>5498	52 7f 74 94 56 7d 59 4b c1 8d 40 80 12 a8 02 d9
>54a8	a2 5c 5e 45 7b 8c 43 4a 66 6a c1 8d 40 80 15 b2
>54b8	02 d9 a2 90 5c 69 5a 4f 8c 90 4f 67 55 45 c1 8d
>54c8	90 41 80 13 bc 02 d9 a2 57 5e 73 5f 8b 45 51 48
>54d8	4c c1 8d 90 41 80 15 c6 02 d9 a2 49 42 64 61 88
>54e8	55 4d 6e 74 c1 8d 5c 4f 4a 55 80 18 d0 02 d9 a2
>54f8	90 49 6b 40 74 87 90 61 5c 79 60 c1 8d 90 41 48
>5508	40 54 80 13 da 02 d9 a2 90 56 4a 42 62 89 5e 45
>5518	6a 67 c1 8d 40 80 14 e4 02 d9 a2 61 69 6a 4c 87
>5528	42 55 71 c1 8d 61 6b 7f 7d 80 17 ee 02 d9 a2 5d
>5538	6e 59 56 88 90 43 59 45 51 c1 8d 90 5e 77 5c 47
>5548	80 15 f8 02 d9 a2 44 5a 43 4d 87 62 61 43 4e c1
>5558	8d 66 7b 43 4f 80 17 02 03 d9 a2 4c 66 70 7b 87
>5568	90 42 50 46 5e c1 8d 90 42 50 46 45 80 15 0c 03
>5578	d9 a2 90 45 6c 72 4d 8b 90 48 6c 58 47 c1 8d 90
>5588	41 80 13 16 03 d9 a2 90 42 7c 51 44 8d 52 7d 7b
>5598	64 c1 8d 40 80 16 20 03 d9 a2 66 41 4d 60 8f 90
>55a8	44 58 5a 7b c1 8d 61 68 72 65 80 14 2a 03 d9 a2
>55b8	90 51 5c 58 48 8d 90 57 4f 4e 6a c1 8d 40 80 13
>55c8	34 03 d9 a2 90 5f 6b 7b 67 8e 4c 7f 4e c1 8d 90
>55d8	41 80 14 3e 03 d9 a2 90 4b 43 48 60 87 90 7c 77
>55e8	5b c1 8d 90 5b 80 14 48 03 d9 a2 48 5e 4f 4c 8e
>55f8	90 4a 6b 6d 4d c1 8d 90 41 80 13 52 03 d9 a2 5f
>5608	74 6f 4a 8e 65 6a 62 6b c1 8d 90 41 80 16 5c 03
>5618	d9 a2 4b 42 59 47 90 90 4f 7d 6b 4f c1 8d 5b 40
>5628	44 56 80 17 66 03 d9 a2 90 44 68 5f 52 90 5b 58
>5638	67 7d c1 8d 90 60 41 47 4f 80 17 70 03 d9 a2 90
>5648	41 59 4f 65 87 4c 66 52 41 c1 8d 90 41 59 4d 65
>5658	80 15 7a 03 d9 a2 43 70 4a 60 8f 56 69 51 44 c1
>5668	8d 5a 59 5b 64 80 17 84 03 d9 a2 90 5e 64 7b 49
>5678	87 42 7e 71 49 c1 8d 90 5c 40 4a 41 80 15 8e 03
>5688	d9 a2 90 46 47 60 45 89 90 57 6f 71 50 c1 8d 90
>5698	41 80 15 98 03 d9 a2 90 5d 6b 6f 68 8e 90 65 46
>56a8	65 59 c1 8d 90 41 80 13 a2 03 d9 a2 90 60 43 56
>56b8	74 89 55 67 51 55 c1 8d 40 80 12 ac 03 d9 a2 4e
>56c8	61 6c 63 8d 4b 47 59 72 c1 8d 40 80 14 b6 03 d9
>56d8	a2 5b 55 50 60 8e 90 43 7a 40 6a c1 8d 90 41 80
>56e8	13 c0 03 d9 a2 57 42 56 55 8a 5a 7f 42 7d c1 8d
>56f8	90 41 80 14 ca 03 d9 a2 90 54 5b 43 58 8e 51 75
>5708	59 72 c1 8d 90 41 80 15 d4 03 d9 a2 5c 65 53 44
>5718	88 62 54 6f 70 c1 8d 7e 71 7c 74 80 15 de 03 d9
>5728	a2 4c 68 68 44 95 52 5a 42 7d c1 8d 4c 68 68 44
>5738	80 13 e8 03 d9 a2 90 43 5f 53 6a 8b 63 77 65 64
>5748	c1 8d 40 80 15 f2 03 d9 a2 90 46 44 79 63 89 90
>5758	5c 62 7e 40 c1 8d 90 41 80 15 fc 03 d9 a2 90 64
>5768	42 69 4a 86 60 56 46 5d c1 8d 54 46 54 80 19 06
>5778	04 d9 a2 90 62 42 71 5d 8f 90 62 68 4d 59 c1 8d
>5788	90 41 44 6a 7e 76 80 15 10 04 d9 a2 61 7a 43 72
>5798	87 55 4b 46 4b c1 8d 75 7b 47 7b 80 13 1a 04 d9
>57a8	a2 46 7b 5d 6e 8c 64 45 5a 43 c1 8d 90 41 80 14
>57b8	24 04 d9 a2 44 77 55 52 8e 90 4e 78 52 40 c1 8d
>57c8	90 41 80 15 2e 04 d9 a2 90 5b 62 6a 44 8c 90 53
>57d8	7e 5e 41 c1 8d 90 41 80 15 38 04 d9 a2 48 52 51
>57e8	74 87 51 61 5b 75 c1 8d 59 73 5b 75 80 16 42 04
>57f8	d9 a2 44 6b 44 5f 90 65 5e 77 63 c1 8d 90 60 73
>5808	73 44 80 13 4c 04 d9 a2 55 49 77 7d 8a 90 5d 5c
>5818	4e 68 c1 8d 40 80 13 56 04 d9 a2 4f 59 7e 51 8b
>5828	43 46 4b 7d c1 8d 90 41 80 13 60 04 d9 a2 90 43
>5838	6d 75 4b 89 46 51 6e 56 c1 8d 40 80 16 6a 04 d9
>5848	a2 41 64 78 44 90 57 62 74 51 c1 8d 90 55 7d 7c
>5858	4d 80 12 74 04 d9 a2 51 53 7c 48 8d 56 65 57 52
>5868	c1 8d 40 80 17 7e 04 d9 a2 90 51 4a 6f 51 88 63
>5878	5a 56 45 c1 8d 90 72 50 79 56 80 11 88 04 d9 a2
>5888	4b 53 65 47 8a 56 5d 7a c1 8d 40 80 14 92 04 d9
>5898	a2 90 52 45 5d 61 94 90 44 62 4b 68 c1 8d 43 80
>58a8	17 9c 04 d9 a2 4f 59 5e 56 8f 90 55 4d 5c 65 c1
>58b8	8d 90 45 73 7e 4f 80 14 a6 04 d9 a2 41 6a 75 7f
>58c8	89 90 5e 55 40 43 c1 8d 90 41 80 13 b0 04 d9 a2
>58d8	90 56 64 54 51 94 5d 55 6a 54 c1 8d 40 80 17 ba
>58e8	04 d9 a2 65 7f 58 43 87 90 51 6c 72 72 c1 8d 90
>58f8	50 40 62 71 80 14 c4 04 d9 a2 58 57 6d 43 86 42
>5908	6d 71 51 c1 8d 45 61 41 80 13 ce 04 d9 a2 5f 69
>5918	51 69 8d 90 56 7f 40 74 c1 8d 40 80 15 d8 04 d9
>5928	a2 90 48 67 78 78 89 90 57 4e 79 5f c1 8d 90 41
>5938	80 14 e2 04 d9 a2 90 50 7b 58 5d 8d 90 4f 68 44
>5948	53 c1 8d 40 80 15 ec 04 d9 a2 49 48 65 52 95 53
>5958	48 52 44 c1 8d 49 48 65 52 80 14 f6 04 d9 a2 4d
>5968	64 41 4f 8e 90 55 50 4e 70 c1 8d 90 41 80 14 00
>5978	05 d9 a2 90 59 69 56 64 8c 90 63 51 4e 59 c1 8d
>5988	40 80 12 0a 05 d9 a2 62 4e 6b 48 8b 63 4d 6a 57
>5998	c1 8d 40 80 16 14 05 d9 a2 90 48 6d 53 78 8f 50
>59a8	69 6a 69 c1 8d 47 7c 56 71 80 14 1e 05 d9 a2 90
>59b8	5a 67 63 74 8a 4e 54 57 41 c1 8d 90 41 80 14 28
>59c8	05 d9 a2 62 7b 7d 53 89 90 42 78 6a 78 c1 8d 90
>59d8	41 80 16 32 05 d9 a2 90 51 51 77 66 86 53 4a 44
>59e8	53 c1 8d 42 4a 40 52 80 15 3c 05 d9 a2 90 59 57
>59f8	60 61 89 90 63 6d 76 4a c1 8d 90 41 80 15 46 05
>5a08	d9 a2 65 55 4b 4b 95 5f 57 74 58 c1 8d 45 7d 56
>5a18	73 80 13 50 05 d9 a2 53 61 73 5c 8c 90 4f 46 64
>5a28	7d c1 8d 40 80 15 5a 05 d9 a2 59 63 57 5e 90 49
>5a38	69 4e 40 c1 8d 4f 7a 49 5e 80 15 64 05 d9 a2 90
>5a48	55 4c 63 77 8b 90 65 6e 76 4a c1 8d 90 41 80 14
>5a58	6e 05 d9 a2 90 60 42 74 6c 89 90 5c 79 4f 78 c1
>5a68	8d 40 80 13 78 05 d9 a2 43 68 4c 4a 8c 58 79 7f
>5a78	7e c1 8d 90 41 80 16 82 05 d9 a2 90 42 75 65 6a
>5a88	86 55 64 5d 42 c1 8d 55 40 58 42 80 14 8c 05 d9
>5a98	a2 44 6c 45 5a 8e 90 65 7e 5a 75 c1 8d 90 41 80
>5aa8	15 96 05 d9 a2 4d 68 5c 57 95 44 6e 78 74 c1 8d
>5ab8	44 4a 6a 6f 80 12 a0 05 d9 a2 4a 71 6b 73 89 54
>5ac8	52 7e 4a c1 8d 40 80 15 aa 05 d9 a2 57 66 61 63
>5ad8	95 5c 4a 67 4e c1 8d 57 66 61 63 80 15 b4 05 d9
>5ae8	a2 90 44 68 55 4e 8b 90 47 51 63 5a c1 8d 90 41
>5af8	80 17 be 05 d9 a2 90 54 66 53 5c 88 90 58 67 7b
>5b08	5a c1 8d 4c 41 68 42 80 18 c8 05 d9 a2 90 5d 61
>5b18	48 75 86 90 4a 42 66 5d c1 8d 90 5f 63 6e 7d 80
>5b28	14 d2 05 d9 a2 65 76 49 7a 89 90 5d 61 7a 42 c1
>5b38	8d 90 41 80 17 dc 05 d9 a2 57 55 70 50 88 90 54
>5b48	6c 6a 74 c1 8d 90 43 79 5a 64 80 16 e6 05 d9 a2
>5b58	50 74 5c 5b 88 90 5d 4a 56 c1 8d 90 50 69 56 4f
>5b68	80 12 f0 05 d9 a2 5d 46 55 7d 8d 5e 57 4f 6e c1
>5b78	8d 40 80 16 fa 05 d9 a2 4f 54 6e 61 86 90 5e 66
>5b88	58 46 c1 8d 41 50 66 60 80 14 04 06 d9 a2 90 58
>5b98	43 7f 7c 8a 56 56 43 46 c1 8d 90 41 80 14 0e 06
>5ba8	d9 a2 5a 55 71 74 89 90 52 7e 7d 7e c1 8d 90 41
>5bb8	80 14 18 06 d9 a2 90 46 5c 60 68 94 46 5a 48 41
>5bc8	c1 8d 90 41 80 13 22 06 d9 a2 59 68 5f 44 8a 90
>5bd8	43 4d 5f 7b c1 8d 40 80 16 2c 06 d9 a2 59 5e 6f
>5be8	72 86 90 56 62 79 77 c1 8d 49 5c 46 40 80 16 36
>5bf8	06 d9 a2 4d 79 65 45 90 90 5e 7b 6d 42 c1 8d 6c
>5c08	75 52 47 80 17 40 06 d9 a2 47 4f 74 63 88 90 5a
>5c18	69 7f 47 c1 8d 90 5d 66 4b 66 80 14 4a 06 d9 a2
>5c28	90 60 5d 4a 88 90 7f 59 75 c1 8d 5f 44 7d 80 15
>5c38	54 06 d9 a2 90 5c 46 4e 6e 8c 90 4a 5c 57 5f c1
>5c48	8d 90 41 80 16 5e 06 d9 a2 90 44 49 40 7f 8f 46
>5c58	55 66 5b c1 8d 42 4c 65 5c 80 13 68 06 d9 a2 59
>5c68	51 4a 44 8b 41 67 73 56 c1 8d 90 41 80 17 72 06
>5c78	d9 a2 47 57 4c 7c 87 90 64 7e 61 61 c1 8d 90 60
>5c88	68 61 41 80 14 7c 06 d9 a2 90 53 7f 5e 7e 89 90
>5c98	41 72 7a 59 c1 8d 40 80 13 86 06 d9 a2 52 65 4a
>5ca8	62 8c 90 4a 57 71 56 c1 8d 40 80 16 90 06 d9 a2
>5cb8	4b 55 5c 4f 86 90 46 5a 76 62 c1 8d 49 45 48 4e
>5cc8	80 14 9a 06 d9 a2 5e 43 78 4a 8e 90 5e 44 6f 63
>5cd8	c1 8d 90 41 80 12 a4 06 d9 a2 61 77 70 6d 8c 57
>5ce8	77 4b 7a c1 8d 40 80 11 ae 06 d9 a2 55 76 47 8b
>5cf8	5b 61 6f 77 c1 8d 40 80 15 b8 06 d9 a2 53 56 6b
>5d08	66 95 65 7c 52 72 c1 8d 53 56 6b 66 80 14 c2 06
>5d18	d9 a2 90 48 7f 79 4e 8c 51 5e 5a 45 c1 8d 90 41
>5d28	80 14 cc 06 d9 a2 4c 6f 79 5f 8e 90 46 57 6f 45
>5d38	c1 8d 90 41 80 18 d6 06 d9 a2 90 59 49 55 67 87
>5d48	90 51 43 68 48 c1 8d 90 51 41 40 47 80 15 e0 06
>5d58	d9 a2 47 4c 40 47 87 60 69 7d 55 c1 8d 67 6d 7d
>5d68	57 80 14 ea 06 d9 a2 90 50 4b 77 47 8a 55 6b 61
>5d78	70 c1 8d 90 41 80 14 f4 06 d9 a2 77 44 59 88 4d
>5d88	52 6d 43 c1 8d 4d 65 69 5a 80 12 fe 06 d9 a2 5a
>5d98	43 75 79 94 49 5f 73 55 c1 8d 42 80 16 08 07 d9
>5da8	a2 61 6b 42 53 8f 63 7d 6b 6d c1 8d 41 45 68 6e
>5db8	40 80 15 12 07 d9 a2 90 5c 4f 64 40 89 90 65 79
>5dc8	5a 40 c1 8d 90 41 80 13 1c 07 d9 a2 90 50 62 55
>5dd8	6f 8b 5a 65 57 4d c1 8d 40 80 14 26 07 d9 a2 90
>5de8	5f 48 5f 40 8d 90 5e 58 7b 66 c1 8d 40 80 15 30
>5df8	07 d9 a2 51 48 59 6d 8f 4b 7a 40 41 c1 8d 5d 42
>5e08	59 6e 80 12 3a 07 d9 a2 64 7e 72 70 8a 43 4d 5f
>5e18	7b c1 8d 40 80 12 44 07 d9 a2 5f 7e 7e 68 94 47
>5e28	71 58 4d c1 8d 44 80 13 4e 07 d9 a2 90 50 60 55
>5e38	53 8b 41 7d 78 7d c1 8d 40 80 13 58 07 d9 a2 5f
>5e48	45 73 79 8a 90 5c 62 72 68 c1 8d 40 80 13 62 07
>5e58	d9 a2 90 5f 49 7c 48 89 46 76 63 4b c1 8d 40 80
>5e68	13 6c 07 d9 a2 90 48 5a 78 72 94 4f 75 7a 62 c1
>5e78	8d 40 80 18 76 07 d9 a2 90 60 53 5c 6e 90 90 5f
>5e88	4d 55 7d c1 8d 90 41 46 46 71 80 14 80 07 d9 a2
>5e98	90 51 6a 4a 53 8c 90 5b 7d 59 5b c1 8d 40 80 16
>5ea8	8a 07 d9 a2 4f 59 7f 56 86 90 65 72 65 41 c1 8d
>5eb8	4a 49 5a 56 80 15 94 07 d9 a2 4b 73 5b 40 8f 41
>5ec8	62 6a 68 c1 8d 4d 56 45 68 80 14 9e 07 d9 a2 43
>5ed8	70 73 58 8b 90 65 65 6d 76 c1 8d 90 41 80 14 a8
>5ee8	07 d9 a2 90 41 62 77 54 8d 90 4b 60 47 75 c1 8d
>5ef8	40 80 18 b2 07 d9 a2 90 59 6f 75 77 87 90 4a 7b
>5f08	49 73 c1 8d 90 48 6b 41 73 80 17 bc 07 d9 a2 90
>5f18	47 5e 42 60 90 90 64 50 70 5c c1 8d 5c 72 6d 7c
>5f28	80 13 c6 07 d9 a2 90 5d 46 5d 72 89 66 46 55 77
>5f38	c1 8d 40 80 13 d0 07 d9 a2 65 5a 6f 44 8e 62 6c
>5f48	70 56 c1 8d 90 41 80 16 da 07 d9 a2 90 4b 74 49
>5f58	57 86 60 76 5f 4c c1 8d 60 42 56 48 80 14 e4 07
>5f68	d9 a2 61 42 74 72 8e 90 5d 64 6a 55 c1 8d 90 41
>5f78	80 18 ee 07 d9 a2 90 53 55 50 69 90 90 4c 40 55
>5f88	61 c1 8d 90 47 54 7b 48 80 16 f8 07 d9 a2 50 4e
>5f98	72 8f 90 4e 61 4a 4d c1 8d 90 4e 50 7b 5b 80 15
>5fa8	02 08 d9 a2 90 52 62 66 68 8e 90 4f 5c 74 60 c1
>5fb8	8d 90 41 80 17 0c 08 d9 a2 90 53 45 6f 78 88 49
>5fc8	64 43 55 c1 8d 90 5a 61 6c 63 80 15 16 08 d9 a2
>5fd8	90 4b 7b 4f 4e 8e 90 51 7d 63 72 c1 8d 90 41 80
>5fe8	13 20 08 d9 a2 4a 6d 5e 47 8e 61 7c 50 68 c1 8d
>5ff8	90 41 80 15 2a 08 d9 a2 5a 5f 73 66 87 50 48 5a
>6008	77 c1 8d 5a 5f 7b 77 80 13 34 08 d9 a2 90 66 40
>6018	67 6b 8d 4c 40 4f 41 c1 8d 40 80 17 3e 08 d9 a2
>6028	90 64 69 5f 6a 8f 5c 66 5f 67 c1 8d 90 48 43 40
>6038	43 80 18 48 08 d9 a2 90 5a 44 4d 7d 90 90 57 76
>6048	79 51 c1 8d 90 42 4d 54 6c 80 16 52 08 d9 a2 5e
>6058	44 7f 64 86 90 4f 45 6d 5d c1 8d 50 40 52 60 80
>6068	14 5c 08 d9 a2 62 6a 70 65 8e 90 61 77 50 5c c1
>6078	8d 90 41 80 17 66 08 d9 a2 90 4f 77 41 64 88 65
>6088	7f 76 55 c1 8d 90 6a 48 77 77 80 15 70 08 d9 a2
>6098	41 74 72 70 88 45 6f 5b 5b c1 8d 44 5b 69 6b 80
>60a8	15 7a 08 d9 a2 4b 77 51 54 87 90 43 76 73 49 c1
>60b8	8d 90 62 49 80 14 84 08 d9 a2 55 41 5c 60 89 90
>60c8	4f 5a 65 6f c1 8d 90 41 80 13 8e 08 d9 a2 4f 61
>60d8	7e 4d 8e 4a 7f 52 79 c1 8d 90 41 80 14 98 08 d9
>60e8	a2 90 61 73 59 67 8e 5d 56 56 5c c1 8d 90 41 80
>60f8	13 a2 08 d9 a2 90 56 65 5b 72 89 60 4f 62 59 c1
>6108	8d 40 80 13 ac 08 d9 a2 90 48 71 68 51 8b 5e 60
>6118	63 5f c1 8d 40 80 13 b6 08 d9 a2 90 54 51 43 6b
>6128	8b 60 4b 49 51 c1 8d 40 80 13 c0 08 d9 a2 41 73
>6138	6c 4a 94 90 61 5d 5b 6b c1 8d 40 80 14 ca 08 d9
>6148	a2 90 4f 49 69 61 8a 90 59 46 63 51 c1 8d 40 80
>6158	14 d4 08 d9 a2 90 43 61 63 45 8c 42 61 72 61 c1
>6168	8d 90 41 80 15 de 08 d9 a2 5a 70 50 72 95 58 40
>6178	42 53 c1 8d 42 70 4e 5f 80 17 e8 08 d9 a2 63 79
>6188	5c 4a 88 90 42 50 6e 46 c1 8d 90 61 69 72 50 80
>6198	15 f2 08 d9 a2 4a 4d 52 70 95 4e 59 46 62 c1 8d
>61a8	4a 4d 52 70 80 13 fc 08 d9 a2 46 47 50 53 8d 90
>61b8	57 4f 73 61 c1 8d 40 80 14 06 09 d9 a2 61 67 72
>61c8	60 94 90 60 54 6d 77 c1 8d 90 41 80 18 10 09 d9
>61d8	a2 90 4b 7d 74 6a 86 90 64 79 4c 6a c1 8d 90 6f
>61e8	7d 7c 6a 80 14 1a 09 d9 a2 55 5b 44 52 89 90 65
>61f8	72 6e 58 c1 8d 90 41 80 17 24 09 d9 a2 90 55 52
>6208	6e 67 90 59 4c 68 66 c1 8d 90 6e 5f 57 4d 80 13
>6218	2e 09 d9 a2 90 4d 50 4a 57 89 63 4c 7a 6b c1 8d
>6228	40 80 14 38 09 d9 a2 90 4a 42 6f 76 8c 61 71 63
>6238	7c c1 8d 90 41 80 14 42 09 d9 a2 90 49 5d 60 48
>6248	94 45 42 40 6f c1 8d 90 41 80 17 4c 09 d9 a2 4c
>6258	74 62 5a 87 90 50 53 6e 5a c1 8d 90 50 43 4c 42
>6268	80 18 56 09 d9 a2 90 47 4f 76 4b 8f 90 5a 4a 72
>6278	56 c1 8d 90 61 5a 68 61 80 16 60 09 d9 a2 90 4d
>6288	71 67 58 86 62 60 7d 6b c1 8d 62 40 58 68 80 17
>6298	6a 09 d9 a2 90 5d 55 54 7b 87 45 68 56 76 c1 8d
>62a8	90 58 55 40 49 80 17 74 09 d9 a2 90 56 4b 62 62
>62b8	88 43 5b 7b 67 c1 8d 90 55 50 59 47 80 14 7e 09
>62c8	d9 a2 90 4e 42 5e 4e 94 90 4d 74 54 78 c1 8d 41
>62d8	80 14 88 09 d9 a2 62 43 78 5c 8e 90 5a 57 4d 58
>62e8	c1 8d 90 41 80 15 92 09 d9 a2 90 58 70 67 65 8e
>62f8	90 5d 4c 5c 68 c1 8d 90 41 80 14 9c 09 d9 a2 59
>6308	4c 58 54 86 44 56 52 5c c1 8d 44 50 54 80 15 a6
>6318	09 d9 a2 64 79 6e 4d 88 54 50 52 4d c1 8d 70 69
>6328	7c 40 80 12 b0 09 d9 a2 5c 54 46 6a 8a 51 7a 55
>6338	6a c1 8d 40 80 17 ba 09 d9 a2 4b 45 60 63 88 90
>6348	5d 7d 5c 4a c1 8d 90 56 78 7c 6b 80 18 c4 09 d9
>6358	a2 90 55 6f 62 4d 87 90 63 70 65 60 c1 8d 90 41
>6368	60 60 4d 80 14 ce 09 d9 a2 58 47 6b 6b 8b 90 54
>6378	5a 79 57 c1 8d 90 41 80 17 d8 09 d9 a2 90 4d 78
>6388	60 41 88 57 53 58 78 c1 8d 90 5a 6b 78 79 80 13
>6398	e2 09 d9 a2 90 47 57 65 8e 90 4b 42 7c c1 8d 90
>63a8	41 80 16 ec 09 d9 a2 90 45 5d 54 60 88 45 4f 4d
>63b8	62 c1 8d 90 52 59 7e 80 18 f6 09 d9 a2 90 4b 4c
>63c8	74 41 90 90 45 58 7b 63 c1 8d 90 45 73 78 5e 80
>63d8	12 00 0a d9 a2 61 75 43 52 94 49 4e 70 60 c1 8d
>63e8	43 80 13 0a 0a d9 a2 5a 5e 68 50 8e 46 6f 77 48
>63f8	c1 8d 90 41 80 15 14 0a d9 a2 46 5a 42 67 95 55
>6408	7c 65 74 c1 8d 46 5a 42 67 80 17 1e 0a d9 a2 50
>6418	60 51 6f 87 90 4e 41 43 77 c1 8d 90 4e 41 42 51
>6428	80 14 28 0a d9 a2 90 45 65 63 55 8e 5c 72 79 69
>6438	c1 8d 90 41 80 15 32 0a d9 a2 90 5e 58 71 47 8e
>6448	90 48 62 43 40 c1 8d 90 41 80 13 3c 0a d9 a2 90
>6458	53 6b 56 65 94 64 5f 7b 5f c1 8d 40 80 15 46 0a
>6468	d9 a2 5a 4b 62 56 95 44 57 53 4f c1 8d 44 57 42
>6478	4b 80 14 50 0a d9 a2 90 53 41 7d 58 8a 90 63 4f
>6488	76 5c c1 8d 40 80 14 5a 0a d9 a2 5d 5d 73 41 8e
>6498	90 61 7e 54 7f c1 8d 90 41 80 15 64 0a d9 a2 90
>64a8	60 7f 48 60 8c 90 43 63 72 7a c1 8d 90 41 80 15
>64b8	6e 0a d9 a2 59 42 4b 6a 95 5f 45 7f 54 c1 8d 59
>64c8	42 4b 6a 80 18 78 0a d9 a2 90 57 7a 42 4d 86 90
>64d8	50 59 41 74 c1 8d 90 57 7b 44 40 80 15 82 0a d9
>64e8	a2 45 49 63 56 95 4c 5f 6a 70 c1 8d 45 49 63 56
>64f8	80 18 8c 0a d9 a2 90 45 75 4b 4d 86 90 51 63 5b
>6508	4b c1 8d 90 55 77 5b 4f 80 17 96 0a d9 a2 90 61
>6518	60 70 75 88 42 48 6b 64 c1 8d 90 63 68 5b 51 80
>6528	14 a0 0a d9 a2 90 60 68 5b 61 94 41 76 50 41 c1
>6538	8d 90 51 80 15 aa 0a d9 a2 90 5e 77 5b 86 5e 64
>6548	72 40 c1 8d 5e 60 40 40 80 14 b4 0a d9 a2 5e 63
>6558	7a 66 89 90 44 79 47 68 c1 8d 90 41 80 13 be 0a
>6568	d9 a2 59 7a 56 71 8d 90 59 73 56 66 c1 8d 40 80
>6578	13 c8 0a d9 a2 55 67 70 4e 8d 90 57 58 64 6c c1
>6588	8d 40 80 15 d2 0a d9 a2 90 45 53 6c 58 8b 90 55
>6598	44 6b 5f c1 8d 90 41 80 12 dc 0a d9 a2 5a 4f 73
>65a8	60 8c 4d 72 6c 7c c1 8d 40 80 13 e6 0a d9 a2 4e
>65b8	72 65 5c 8c 90 4c 5d 7f 50 c1 8d 40 80 13 f0 0a
>65c8	d9 a2 41 46 49 6d 8e 46 5f 44 64 c1 8d 90 41 80
>65d8	14 fa 0a d9 a2 90 51 4a 76 60 94 4f 4a 79 76 c1
>65e8	8d 90 41 80 14 04 0b d9 a2 90 42 57 63 4c 8c 90
>65f8	52 78 59 43 c1 8d 40 80 16 0e 0b d9 a2 90 44 79
>6608	72 79 87 56 64 53 66 c1 8d 90 59 60 59 80 13 18
>6618	0b d9 a2 90 5f 61 49 78 89 42 78 56 5f c1 8d 40
>6628	80 14 22 0b d9 a2 53 53 53 73 89 90 43 6f 4a 4e
>6638	c1 8d 90 41 80 17 2c 0b d9 a2 90 65 5d 66 75 88
>6648	56 7d 54 5e c1 8d 90 73 60 72 6b 80 13 36 0b d9
>6658	a2 61 56 71 71 89 48 63 77 62 c1 8d 90 41 80 15
>6668	40 0b d9 a2 90 48 61 62 73 8e 90 4a 71 5c 7b c1
>6678	8d 90 41 80 14 4a 0b d9 a2 90 54 4b 6b 51 8e 60
>6688	5c 69 43 c1 8d 90 41 80 12 54 0b d9 a2 90 44 72
>6698	61 94 56 41 47 4f c1 8d 40 80 13 5e 0b d9 a2 54
>66a8	56 51 6f 8a 90 43 7f 6a 58 c1 8d 40 80 14 68 0b
>66b8	d9 a2 61 48 7b 4a 8e 90 60 47 58 41 c1 8d 90 41
>66c8	80 12 72 0b d9 a2 63 51 75 6d 8c 44 73 7e 53 c1
>66d8	8d 40 80 13 7c 0b d9 a2 5d 4e 53 7c 94 90 5f 6c
>66e8	56 47 c1 8d 40 80 15 86 0b d9 a2 4e 45 55 42 95
>66f8	5d 5b 6f 57 c1 8d 4e 45 55 42 80 17 90 0b d9 a2
>6708	90 65 53 72 63 90 90 55 56 42 c1 8d 90 64 7e 5c
>6718	61 80 16 9a 0b d9 a2 4e 6d 6b 67 90 90 51 6d 4a
>6728	52 c1 8d 60 5a 75 79 80 12 a4 0b d9 a2 5e 54 5b
>6738	50 94 56 67 5a 51 c1 8d 41 80 13 ae 0b d9 a2 5e
>6748	74 7a 54 8d 90 50 53 6b 45 c1 8d 40 80 15 b8 0b
>6758	d9 a2 4e 73 7a 4d 87 5b 61 44 44 c1 8d 5f 73 7e
>6768	4d 80 15 c2 0b d9 a2 90 56 6a 70 49 89 90 58 76
>6778	77 69 c1 8d 90 41 80 18 cc 0b d9 a2 90 58 4a 76
>6788	75 87 90 5c 46 57 42 c1 8d 90 58 42 56 41 80 15
>6798	d6 0b d9 a2 56 62 75 49 95 42 6b 48 56 c1 8d 41
>67a8	49 72 59 80 12 e0 0b d9 a2 7f 54 64 94 90 5c 5a
>67b8	74 67 c1 8d 40 80 13 ea 0b d9 a2 58 5c 48 76 8e
>67c8	45 7c 46 6a c1 8d 90 41 80 15 f4 0b d9 a2 61 50
>67d8	4e 71 95 50 72 7c 79 c1 8d 50 5d 51 78 80 16 fe
>67e8	0b d9 a2 4a 6d 51 72 8f 90 47 5d 7f 56 c1 8d 43
>67f8	4f 52 5c 80 15 08 0c d9 a2 5a 4b 58 4f 8f 64 5e
>6808	73 58 c1 8d 7e 6a 4b 67 80 18 12 0c d9 a2 90 50
>6818	5e 64 76 86 90 4c 6a 58 75 c1 8d 90 5c 7e 7c 76
>6828	80 13 1c 0c d9 a2 43 40 56 6a 8d 90 43 7b 53 72
>6838	c1 8d 40 80 18 26 0c d9 a2 90 63 4a 73 6c 86 90
>6848	5f 45 72 40 c1 8d 90 7f 4f 74 40 80 14 30 0c d9
>6858	a2 90 53 72 6c 45 8a 5f 4f 41 45 c1 8d 90 41 80
>6868	17 3a 0c d9 a2 90 4d 52 75 7e 87 57 5d 5e 40 c1
>6878	8d 90 48 42 61 7e 80 15 44 0c d9 a2 4f 42 57 5c
>6888	90 4a 54 42 4a c1 8d 44 6e 55 52 80 16 4e 0c d9
>6898	a2 61 40 51 76 86 90 55 76 45 4a c1 8d 60 40 50
>68a8	76 80 15 58 0c d9 a2 90 51 64 5d 4a 8a 90 48 52
>68b8	75 56 c1 8d 90 41 80 12 62 0c d9 a2 53 56 6c 73
>68c8	8b 62 5c 5f 70 c1 8d 40 80 15 6c 0c d9 a2 45 5e
>68d8	54 90 90 4c 47 5b 79 c1 8d 4c 4c 7a 4d 80 14 76
>68e8	0c d9 a2 90 62 6a 46 6b 8d 90 54 66 6d 60 c1 8d
>68f8	40 80 12 80 0c d9 a2 49 7d 75 67 94 57 5f 7e 4d
>6908	c1 8d 40 80 12 8a 0c d9 a2 4a 4d 6e 6e 89 5a 4f
>6918	71 47 c1 8d 40 80 17 94 0c d9 a2 90 45 4f 5d 56
>6928	90 90 60 59 52 6e c1 8d 5b 49 75 58 80 14 9e 0c
>6938	d9 a2 90 5b 51 56 61 8e 5b 70 54 5b c1 8d 90 41
>6948	80 15 a8 0c d9 a2 5c 50 74 61 8f 41 54 76 4d c1
>6958	8d 5d 65 6a 6e 80 13 b2 0c d9 a2 52 46 55 4d 8a
>6968	5a 5b 73 6c c1 8d 90 41 80 16 bc 0c d9 a2 60 5f
>6978	65 73 90 90 53 4f 67 76 c1 8d 73 6f 4d 69 80 15
>6988	c6 0c d9 a2 90 64 74 78 68 8e 90 48 67 70 46 c1
>6998	8d 90 41 80 17 d0 0c d9 a2 90 46 64 64 62 88 90
>69a8	54 67 5a 7e c1 8d 52 43 7e 5c 80 14 da 0c d9 a2
>69b8	63 6d 4d 7d 8e 90 46 44 7e 41 c1 8d 90 41 80 16
>69c8	e4 0c d9 a2 5e 56 5b 6a 8f 62 6e 66 4f c1 8d 41
>69d8	41 45 41 79 80 17 ee 0c d9 a2 90 47 71 65 6d 90
>69e8	4a 47 42 78 c1 8d 90 51 78 68 65 80 17 f8 0c d9
>69f8	a2 90 52 42 50 69 87 90 60 67 79 57 c1 8d 90 42
>6a08	50 41 80 12 02 0d d9 a2 90 41 78 7f 8d 52 5d 73
>6a18	45 c1 8d 40 80 15 0c 0d d9 a2 90 57 44 4d 5b 8e
>6a28	90 5e 4c 5b 78 c1 8d 90 41 80 14 16 0d d9 a2 90
>6a38	58 7f 5e 5e 8c 90 54 7c 47 c1 8d 90 41 80 15 20
>6a48	0d d9 a2 41 48 53 69 8f 5c 4c 67 67 c1 8d 5d 54
>6a58	7b 50 80 12 2a 0d d9 a2 4f 5d 52 53 94 53 4f 4a
>6a68	53 c1 8d 40 80 16 34 0d d9 a2 90 5b 72 53 7a 8f
>6a78	63 55 5a 4a c1 8d 47 63 46 50 80 16 3e 0d d9 a2
>6a88	5e 5f 58 6b 86 90 47 61 72 56 c1 8d 58 5e 48 6a
>6a98	80 18 48 0d d9 a2 90 61 59 50 54 87 90 4f 67 6c
>6aa8	4d c1 8d 90 41 41 40 41 80 16 52 0d d9 a2 5b 59
>6ab8	4c 4c 87 90 58 4d 44 6a c1 8d 90 44 40 62 80 14
>6ac8	5c 0d d9 a2 52 54 41 6c 94 90 44 5e 6b 5b c1 8d
>6ad8	90 44 80 14 66 0d d9 a2 90 50 5b 77 75 8c 57 68
>6ae8	46 56 c1 8d 90 41 80 14 70 0d d9 a2 90 57 7a 62
>6af8	48 8c 90 5d 7a 4e c1 8d 90 41 80 17 7a 0d d9 a2
>6b08	90 57 63 6a 50 90 54 62 61 44 c1 8d 90 6c 46 4b
>6b18	54 80 17 84 0d d9 a2 90 4e 5e 66 7f 88 90 63 55
>6b28	6d 7c c1 8d 6d 4b 4b 45 80 13 8e 0d d9 a2 5e 5d
>6b38	5a 66 8c 63 57 53 4e c1 8d 90 41 80 12 98 0d d9
>6b48	a2 64 7d 57 7e 94 54 56 56 55 c1 8d 41 80 17 a2
>6b58	0d d9 a2 90 5d 67 5a 4b 88 5b 6c 65 48 c1 8d 90
>6b68	46 4b 7f 43 80 13 ac 0d d9 a2 90 5a 6b 41 8c 90
>6b78	58 44 40 40 c1 8d 40 80 18 b6 0d d9 a2 90 4f 53
>6b88	62 7d 87 90 4e 4d 55 54 c1 8d 90 4e 41 40 51 80
>6b98	14 c0 0d d9 a2 90 4c 4c 78 6f 8a 90 50 71 41 64
>6ba8	c1 8d 40 80 17 ca 0d d9 a2 90 65 77 77 5d 8f 48
>6bb8	76 6b 48 c1 8d 90 5d 41 4c 55 80 12 d4 0d d9 a2
>6bc8	5c 7d 7e 51 94 47 52 76 68 c1 8d 43 80 15 de 0d
>6bd8	d9 a2 90 4e 51 41 73 86 4a 54 59 6b c1 8d 44 58
>6be8	49 80 16 e8 0d d9 a2 52 4d 67 61 86 90 45 6a 6e
>6bf8	5f c1 8d 52 45 41 61 80 16 f2 0d d9 a2 45 67 49
>6c08	75 86 90 49 6f 45 66 c1 8d 44 40 48 50 80 14 fc
>6c18	0d d9 a2 53 65 5e 7e 95 49 65 47 78 c1 8d 5b 4f
>6c28	4e 80 15 06 0e d9 a2 41 5d 54 7f 95 47 63 71 54
>6c38	c1 8d 41 5d 54 7f 80 14 10 0e d9 a2 90 43 45 4d
>6c48	57 8a 90 4f 46 49 68 c1 8d 40 80 14 1a 0e d9 a2
>6c58	90 4f 65 56 57 8a 90 5c 44 71 42 c1 8d 40 80 14
>6c68	24 0e d9 a2 90 5c 4c 4d 5a 8a 64 5d 43 5d c1 8d
>6c78	90 41 80 14 2e 0e d9 a2 41 5a 4d 66 86 4a 68 58
>6c88	74 c1 8d 48 48 64 80 14 38 0e d9 a2 90 54 64 66
>6c98	6e 8c 90 54 7b 49 40 c1 8d 40 80 15 42 0e d9 a2
>6ca8	90 51 69 44 46 8e 90 59 62 6a 64 c1 8d 90 41 80
>6cb8	17 4c 0e d9 a2 90 4e 50 66 44 87 5d 7c 5c 45 c1
>6cc8	8d 90 42 40 62 43 80 15 56 0e d9 a2 5f 7a 74 78
>6cd8	87 55 7b 70 5a c1 8d 5f 7b 74 7a 80 16 60 0e d9
>6ce8	a2 90 64 60 6f 66 86 42 6b 60 57 c1 8d 42 4b 40
>6cf8	52 80 14 6a 0e d9 a2 90 4a 61 72 72 8c 90 52 45
>6d08	61 6d c1 8d 40 80 15 74 0e d9 a2 5c 46 6a 41 87
>6d18	64 4c 60 42 c1 8d 7c 4e 6a 43 80 17 7e 0e d9 a2
>6d28	46 6d 7a 52 88 90 4c 5d 73 46 c1 8d 90 4a 70 49
>6d38	58 80 15 88 0e d9 a2 59 6d 6d 4c 95 65 43 43 52
>6d48	c1 8d 59 6d 6d 4c 80 13 92 0e d9 a2 53 6e 5d 89
>6d58	90 50 4f 61 5d c1 8d 90 41 80 13 9c 0e d9 a2 90
>6d68	46 53 58 74 8a 54 73 50 c1 8d 90 41 80 16 a6 0e
>6d78	d9 a2 4c 53 74 48 90 90 4e 77 52 54 c1 8d 5b 4b
>6d88	46 5c 80 12 b0 0e d9 a2 4c 6a 71 41 8d 62 58 74
>6d98	7f c1 8d 40 80 15 ba 0e d9 a2 43 44 73 44 86 90
>6da8	4b 63 71 54 c1 8d 44 42 44 80 13 c4 0e d9 a2 60
>6db8	44 73 50 89 44 41 6d 6c c1 8d 90 41 80 16 ce 0e
>6dc8	d9 a2 4e 62 7b 65 87 90 44 5c 47 59 c1 8d 90 5c
>6dd8	44 59 80 14 d8 0e d9 a2 48 61 4c 42 89 90 5f 50
>6de8	7e 5d c1 8d 90 41 80 13 e2 0e d9 a2 5a 59 7d 68
>6df8	8c 63 45 4e 41 c1 8d 90 41 80 15 ec 0e d9 a2 4d
>6e08	55 4e 7e 86 41 44 57 7f c1 8d 41 44 46 7e 80 18
>6e18	f6 0e d9 a2 90 56 42 48 69 8f 90 41 5a 57 5e c1
>6e28	8d 90 57 5c 60 47 80 17 00 0f d9 a2 41 5b 4c 53
>6e38	8f 90 42 6e 7d 76 c1 8d 90 41 53 71 63 80 13 0a
>6e48	0f d9 a2 90 41 7f 79 64 8d 55 7e 4c 40 c1 8d 40
>6e58	80 14 14 0f d9 a2 90 57 5e 40 68 8c 47 60 6b 71
>6e68	c1 8d 90 41 80 15 1e 0f d9 a2 90 41 7e 73 68 8b
>6e78	90 49 4a 4f 5a c1 8d 90 41 80 13 28 0f d9 a2 51
>6e88	71 6d 48 89 51 59 74 4c c1 8d 90 41 80 15 32 0f
>6e98	d9 a2 58 7f 46 6c 95 45 5e 5c 5c c1 8d 43 45 54
>6ea8	7c 80 14 3c 0f d9 a2 90 43 74 56 48 8e 61 44 77
>6eb8	72 c1 8d 90 41 80 15 46 0f d9 a2 45 7a 7c 70 95
>6ec8	5e 62 5d 6e c1 8d 45 7a 7c 70 80 15 50 0f d9 a2
>6ed8	4a 70 5a 57 86 52 6b 53 68 c1 8d 42 60 52 40 80
>6ee8	13 5a 0f d9 a2 90 52 75 4c 70 94 65 43 40 47 c1
>6ef8	8d 40 80 13 64 0f d9 a2 46 58 51 57 8a 90 4d 62
>6f08	7e 49 c1 8d 40 80 17 6e 0f d9 a2 90 53 6e 77 5b
>6f18	90 62 4b 42 43 c1 8d 90 75 79 79 5e 80 14 78 0f
>6f28	d9 a2 47 60 42 59 89 90 50 7e 62 76 c1 8d 90 41
>6f38	80 16 82 0f d9 a2 57 4d 69 5f 86 90 4d 42 4c 67
>6f48	c1 8d 52 4d 61 59 80 17 8c 0f d9 a2 90 41 58 7d
>6f58	4b 87 5c 67 59 6b c1 8d 90 41 58 64 41 80 17 96
>6f68	0f d9 a2 90 59 49 4a 78 8f 4a 42 73 4f c1 8d 90
>6f78	4f 46 57 69 80 12 a0 0f d9 a2 4c 79 4f 41 89 5e
>6f88	52 41 5a c1 8d 40 80 18 aa 0f d9 a2 90 59 79 54
>6f98	76 86 90 49 61 6d 44 c1 8d 90 59 79 7d 78 80 14
>6fa8	b4 0f d9 a2 90 4b 6d 7c 61 94 4b 51 5e 7a c1 8d
>6fb8	90 41 80 15 be 0f d9 a2 90 47 46 5d 4b 8a 90 46
>6fc8	50 55 6b c1 8d 90 41 80 12 c8 0f d9 a2 5a 7b 43
>6fd8	56 8d 5f 44 5d 7f c1 8d 40 80 13 d2 0f d9 a2 57
>6fe8	59 43 57 8b 46 47 4c 68 c1 8d 90 41 80 12 dc 0f
>6ff8	d9 a2 58 6d 47 4f 8a 57 45 7a 4e c1 8d 40 80 13
>7008	e6 0f d9 a2 52 6c 59 78 89 42 77 74 75 c1 8d 90
>7018	41 80 17 f0 0f d9 a2 90 41 4f 6a 7d 88 90 5a 69
>7028	75 77 c1 8d 5b 66 5f 4a 80 14 fa 0f d9 a2 4e 55
>7038	69 4b 8b 90 4f 5a 48 5c c1 8d 90 41 80 15 04 10
>7048	d9 a2 51 6f 40 73 95 42 6e 60 72 c1 8d 41 57 7c
>7058	47 80 16 0e 10 d9 a2 90 48 4d 63 69 87 90 62 72
>7068	51 60 c1 8d 90 41 49 80 14 18 10 d9 a2 90 4f 72
>7078	57 6d 8c 4e 74 75 65 c1 8d 90 41 80 15 22 10 d9
>7088	a2 90 4a 6e 65 6b 8b 90 52 6e 7a 6b c1 8d 90 41
>7098	80 17 2c 10 d9 a2 90 58 5e 70 50 90 90 60 4a 46
>70a8	70 c1 8d 47 6b 56 60 80 15 36 10 d9 a2 90 4a 5c
>70b8	75 50 89 90 64 5f 5f 43 c1 8d 90 41 80 14 40 10
>70c8	d9 a2 90 48 68 66 7b 8c 47 66 6a 7f c1 8d 90 41
>70d8	80 14 4a 10 d9 a2 54 5e 48 5b 89 90 4a 47 43 73
>70e8	c1 8d 90 41 80 16 54 10 d9 a2 90 56 4d 4a 43 86
>70f8	4e 63 62 5a c1 8d 48 62 60 58 80 13 5e 10 d9 a2
>7108	56 66 7e 7a 8c 65 63 63 73 c1 8d 90 41 80 15 68
>7118	10 d9 a2 90 63 69 5b 48 8c 90 4c 57 73 5e c1 8d
>7128	90 41 80 15 72 10 d9 a2 5c 40 59 7a 8f 4d 5a 4c
>7138	50 c1 8d 69 5a 66 4a 80 17 7c 10 d9 a2 90 5f 48
>7148	5d 50 88 90 62 40 70 4b c1 8d 7d 48 6d 45 80 14
>7158	86 10 d9 a2 57 42 44 7c 8e 90 41 77 7b 45 c1 8d
>7168	90 41 80 15 90 10 d9 a2 53 7f 69 4c 8f 41 5e 6a
>7178	4f c1 8d 55 5e 53 5b 80 17 9a 10 d9 a2 90 64 40
>7188	7c 6e 87 60 59 43 64 c1 8d 90 44 40 7c 4a 80 15
>7198	a4 10 d9 a2 90 58 4c 51 7f 8a 90 41 56 68 7c c1
>71a8	8d 90 41 80 15 ae 10 d9 a2 90 5b 44 4c 62 8a 90
>71b8	42 74 40 61 c1 8d 90 41 80 14 b8 10 d9 a2 90 48
>71c8	42 7a 61 8c 90 5d 4e 73 40 c1 8d 40 80 17 c2 10
>71d8	d9 a2 44 57 6b 52 8f 90 60 4b 46 62 c1 8d 90 5b
>71e8	73 5b 50 80 15 cc 10 d9 a2 5a 74 77 78 95 4c 41
>71f8	52 6e c1 8d 42 72 52 5c 80 17 d6 10 d9 a2 90 5b
>7208	60 76 4e 88 42 44 60 63 c1 8d 90 59 64 56 6f 80
>7218	13 e0 10 d9 a2 41 5d 6f 5f 8e 50 6b 66 5d c1 8d
>7228	90 41 80 16 ea 10 d9 a2 90 43 55 5f 78 8f 46 49
>7238	7e 53 c1 8d 42 74 5e 5b 80 17 f4 10 d9 a2 90 55
>7248	60 66 55 8f 46 55 41 6a c1 8d 90 4f 4b 64 6b 80
>7258	14 fe 10 d9 a2 44 76 7e 45 95 44 5d 48 73 c1 8d
>7268	59 75 52 80 18 08 11 d9 a2 90 57 7b 55 6d 8f 90
>7278	4b 66 6d 64 c1 8d 90 63 62 43 51 80 16 12 11 d9
>7288	a2 90 5f 5c 65 58 88 5f 6e 40 4c c1 8d 90 72 65
>7298	5c 80 13 1c 11 d9 a2 43 79 5c 45 8a 90 59 4d 47
>72a8	52 c1 8d 40 80 18 26 11 d9 a2 90 55 47 43 43 87
>72b8	90 64 72 54 77 c1 8d 90 44 42 40 43 80 12 30 11
>72c8	d9 a2 4c 59 41 68 8d 49 55 7b 77 c1 8d 40 80 12
>72d8	3a 11 d9 a2 5d 4a 69 59 8c 42 67 6b 4c c1 8d 40
>72e8	80 15 44 11 d9 a2 41 7e 67 75 95 55 59 52 47 c1
>72f8	8d 41 7e 67 75 80 13 4e 11 d9 a2 90 4b 64 69 50
>7308	94 4c 51 63 40 c1 8d 40 80 18 58 11 d9 a2 90 45
>7318	40 53 57 8f 90 64 79 68 6e c1 8d 90 69 79 7c 45
>7328	80 16 62 11 d9 a2 90 4c 71 66 59 8f 56 48 42 5f
>7338	c1 8d 49 56 5c 46 80 13 6c 11 d9 a2 90 61 57 56
>7348	40 89 60 48 72 46 c1 8d 40 80 15 76 11 d9 a2 4e
>7358	7d 7d 52 86 57 5d 76 71 c1 8d 46 5d 74 50 80 13
>7368	80 11 d9 a2 55 6b 79 6c 8a 90 64 6b 45 47 c1 8d
>7378	40 80 14 8a 11 d9 a2 90 55 51 6e 6f 8e 57 45 71
>7388	46 c1 8d 90 41 80 14 94 11 d9 a2 90 48 79 41 5e
>7398	8e 4b 79 4f 76 c1 8d 90 41 80 12 9e 11 d9 a2 63
>73a8	60 4c 53 8a 46 64 74 57 c1 8d 40 80 13 a8 11 d9
>73b8	a2 90 60 55 58 7a 8d 49 66 78 62 c1 8d 40 80 15
>73c8	b2 11 d9 a2 65 67 7c 5f 90 56 7d 5e 60 c1 8d 4e
>73d8	6a 5d 7f 80 18 bc 11 d9 a2 90 5a 40 68 6d 86 90
>73e8	45 4a 72 72 c1 8d 90 5f 4a 7a 7e 80 13 c6 11 d9
>73f8	a2 54 7b 78 56 8c 90 5b 56 7b 77 c1 8d 40 80 14
>7408	d0 11 d9 a2 5c 4f 60 41 89 90 5a 59 4a 50 c1 8d
>7418	90 41 80 13 da 11 d9 a2 61 5e 7b 44 8a 90 41 5c
>7428	5a 7d c1 8d 40 80 13 e4 11 d9 a2 90 5f 7c 4e 4e
>7438	89 5d 4b 78 6e c1 8d 40 80 14 ee 11 d9 a2 90 4d
>7448	78 54 53 8b 90 41 44 6a 45 c1 8d 40 80 16 f8 11
>7458	d9 a2 90 61 50 6d 45 8f 61 4d 42 4e c1 8d 90 43
>7468	6a 77 80 16 02 12 d9 a2 90 59 68 64 88 90 49 68
>7478	75 55 c1 8d 49 71 5d 77 80 17 0c 12 d9 a2 90 51
>7488	67 46 50 90 90 5b 7f 68 44 c1 8d 4a 58 61 74 80
>7498	15 16 12 d9 a2 45 7c 59 5e 95 5d 51 5c 73 c1 8d
>74a8	45 7c 59 5e 80 17 20 12 d9 a2 90 42 5d 5d 6c 90
>74b8	4c 61 4f 61 c1 8d 90 4e 7e 6d 4d 80 15 2a 12 d9
>74c8	a2 4e 76 6e 78 8f 5b 6c 4d 7b c1 8d 6a 62 7c 73
>74d8	80 16 34 12 d9 a2 90 52 6a 7f 44 86 55 47 44 4f
>74e8	c1 8d 45 45 40 4c 80 18 3e 12 d9 a2 90 4b 5a 6f
>74f8	53 87 90 41 72 7c 72 c1 8d 90 41 52 6c 51 80 14
>7508	48 12 d9 a2 90 6f 64 77 8e 90 64 67 56 6b c1 8d
>7518	90 41 80 18 52 12 d9 a2 90 58 66 65 68 86 90 42
>7528	7e 52 67 c1 8d 90 5a 7e 77 68 80 14 5c 12 d9 a2
>7538	54 78 4b 6d 8b 90 65 53 64 48 c1 8d 90 41 80 15
>7548	66 12 d9 a2 90 41 43 60 7f 8b 90 64 57 40 6a c1
>7558	8d 90 41 80 17 70 12 d9 a2 90 55 66 7c 7a 88 90
>7568	5b 60 6e 69 c1 8d 4e 46 52 51 80 13 7a 12 d9 a2
>7578	90 4a 44 75 60 89 45 55 6b 69 c1 8d 40 80 17 84
>7588	12 d9 a2 90 62 70 71 6b 88 90 56 44 5b 52 c1 8d
>7598	74 74 6a 7b 80 15 8e 12 d9 a2 50 6a 73 6f 95 56
>75a8	57 61 69 c1 8d 50 6a 73 6f 80 12 98 12 d9 a2 58
>75b8	7a 60 56 94 61 40 61 51 c1 8d 40 80 14 a2 12 d9
>75c8	a2 57 5a 70 53 95 47 5e 5b 4f c1 8d 7f 5e 66 80
>75d8	16 ac 12 d9 a2 4b 60 61 5b 86 90 62 43 41 4f c1
>75e8	8d 49 60 60 51 80 17 b6 12 d9 a2 90 5c 47 6c 72
>75f8	87 45 49 5a 44 c1 8d 90 58 46 64 72 80 14 c0 12
>7608	d9 a2 90 50 70 65 7f 8d 90 60 53 7a 49 c1 8d 40
>7618	80 15 ca 12 d9 a2 5f 76 4b 56 95 4a 4a 70 53 c1
>7628	8d 41 55 7a 5d 80 13 d4 12 d9 a2 5c 6e 48 52 8b
>7638	41 46 5b 42 c1 8d 90 41 80 13 de 12 d9 a2 90 42
>7648	65 59 70 8d 51 41 69 58 c1 8d 40 80 15 e8 12 d9
>7658	a2 43 77 78 4b 8f 43 56 4b 65 c1 8d 47 4e 43 70
>7668	80 13 f2 12 d9 a2 90 6a 65 6c 8d 90 4d 56 54 5f
>7678	c1 8d 40 80 15 fc 12 d9 a2 65 6c 5c 69 95 44 70
>7688	5d 55 c1 8d 44 59 4f 56 80 15 06 13 d9 a2 90 4d
>7698	67 6e 61 8e 90 51 4c 54 52 c1 8d 90 41 80 16 10
>76a8	13 d9 a2 90 51 47 57 50 87 5b 5e 6f 71 c1 8d 90
>76b8	41 50 4f 80 18 1a 13 d9 a2 90 4c 6d 60 76 87 90
>76c8	46 67 7a 48 c1 8d 90 44 65 60 46 80 15 24 13 d9
>76d8	a2 53 43 5a 6a 88 63 53 60 44 c1 8d 70 50 7a 6e
>76e8	80 13 2e 13 d9 a2 43 6b 66 5c 8a 90 54 7f 6c 62
>76f8	c1 8d 40 80 16 38 13 d9 a2 42 73 7c 59 90 90 66
>7708	46 7d 6c c1 8d 68 7a 7a 45 80 14 42 13 d9 a2 90
>7718	5e 78 79 60 8c 4d 5b 45 47 c1 8d 90 41 80 14 4c
>7728	13 d9 a2 90 63 4b 79 5b 8e 60 41 53 64 c1 8d 90
>7738	41 80 17 56 13 d9 a2 90 4c 75 6d 65 90 58 6c 6a
>7748	5a c1 8d 90 65 62 57 7f 80 16 60 13 d9 a2 52 44
>7758	46 5f 86 90 58 53 41 6b c1 8d 42 44 46 55 80 18
>7768	6a 13 d9 a2 90 4b 55 7e 58 8f 90 44 66 5a 59 c1
>7778	8d 90 4f 7c 58 71 80 12 74 13 d9 a2 41 63 51 4a
>7788	89 5f 4b 40 43 c1 8d 40 80 15 7e 13 d9 a2 62 7b
>7798	79 5a 87 90 62 70 4d 77 c1 8d 90 44 65 80 15 88
>77a8	13 d9 a2 5b 68 57 48 90 4f 58 70 72 c1 8d 4c 4f
>77b8	66 56 80 13 92 13 d9 a2 90 51 75 7a 65 89 4f 6d
>77c8	70 4a c1 8d 40 80 13 9c 13 d9 a2 4f 72 41 43 8c
>77d8	90 62 66 7f 4e c1 8d 40 80 15 a6 13 d9 a2 4c 49
>77e8	4f 90 90 4f 72 4c 43 c1 8d 4f 7e 55 52 80 15 b0
>77f8	13 d9 a2 5b 54 70 4e 95 49 7a 4e 52 c1 8d 47 60
>7808	53 6a 80 17 ba 13 d9 a2 62 7c 5f 73 90 90 61 72
>7818	68 56 c1 8d 41 44 6f 48 49 80 15 c4 13 d9 a2 5e
>7828	64 5c 67 88 45 4a 77 47 c1 8d 5b 6e 6b 60 80 13
>7838	ce 13 d9 a2 41 46 47 6d 8c 51 6c 7e 51 c1 8d 90
>7848	41 80 12 d8 13 d9 a2 55 63 71 74 8d 5a 46 46 7d
>7858	c1 8d 40 80 15 e2 13 d9 a2 4a 5e 6a 7f 8f 60 75
>7868	56 56 c1 8d 6b 54 41 55 80 05 ec 13 db 80 00

;******  Return to file: ..\source\main/00start.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/commands/assert.asm

.1010					Command_Assert:
.1010	20 79 14	jsr $1479			jsr 	EvaluateRoot 				; what is being asserted.
.1013	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; is it true ?
.1016	f0 01		beq $1019			beq 	_CAError
.1018	60		rts				rts
.1019					_CAError:
.1019	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.101b	20 1a 19	jsr $191a			jsr 	ErrorHandler

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/commands/run.asm

.101e					Command_Run:
.101e	a2 ff		ldx #$ff			ldx 	#$FF
.1020	9a		txs				txs
.1021	20 40 10	jsr $1040			jsr 	ResetCodeAddress
.1024	a0 03		ldy #$03			ldy 	#3
.1026					CRNextInstruction:
.1026	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1028	10 14		bpl $103e			bpl 	_CRNotToken
.102a	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.102c	b0 04		bcs $1032			bcs 	_CRExecute
.102e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1030	b0 1b		bcs $104d			bcs 	Unimplemented 				; else not implemented.
.1032					_CRExecute:
.1032	c8		iny				iny 								; consume it.
.1033	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1034	aa		tax				tax
.1035	20 3b 10	jsr $103b			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1038	4c 26 10	jmp $1026			jmp 	CRNextInstruction
.103b					_CRRunRoutine:
.103b	7c 51 10	jmp ($1051,x)			jmp 	(Group0Vectors,x)
.103e					_CRNotToken:
>103e	db						.byte 	$DB
.103f					CommandColon:
.103f	60		rts				rts
.1040					ResetCodeAddress:
.1040	ad 68 08	lda $0868			lda 	basePage 					; copy basePage to code Pointer
.1043	85 02		sta $02				sta 	codePtr
.1045	ad 69 08	lda $0869			lda 	basePage+1
.1048	85 03		sta $03				sta 	codePtr+1
.104a	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.104c	60		rts				rts
.104d					Unimplemented:
>104d	db						.byte 	$DB
.104e	4c 4d 10	jmp $104d			jmp 	Unimplemented

;******  Processing file: ..\source\main/commands/../../generated/tokenvectors0.inc

.1051					Group0Vectors:
>1051	19 11					.word	AdvanceNextLine          ; $80 [[eol]]
>1053	4d 10					.word	Unimplemented            ; $81 [[sh1]]
>1055	4d 10					.word	Unimplemented            ; $82 [[sh2]]
>1057	4d 10					.word	Unimplemented            ; $83 [[sh3]]
>1059	4d 10					.word	Unimplemented            ; $84 [[fpc]]
>105b	4d 10					.word	Unimplemented            ; $85 [[str]]
>105d	ee 11					.word	AndHandler               ; $86 and
>105f	db 11					.word	OrHandler                ; $87 or
>1061	c8 11					.word	XorHandler               ; $88 xor
>1063	05 13					.word	CompareGreaterEq         ; $89 >=
>1065	0f 13					.word	CompareLessEq            ; $8a <=
>1067	f1 12					.word	CompareGreater           ; $8b >
>1069	e7 12					.word	CompareLess              ; $8c <
>106b	dd 12					.word	CompareEquals            ; $8d =
>106d	fb 12					.word	CompareNotEquals         ; $8e <>
>106f	59 11					.word	AddHandler               ; $8f +
>1071	7c 11					.word	SubHandler               ; $90 -
>1073	14 12					.word	ShrHandler               ; $91 >>
>1075	01 12					.word	ShlHandler               ; $92 <<
>1077	8f 11					.word	MulHandler               ; $93 *
>1079	a2 11					.word	DivHandler               ; $94 /
>107b	b5 11					.word	ModHandler               ; $95 mod
>107d	4d 12					.word	PowerHandler             ; $96 ^
>107f	27 12					.word	WordRefHandler           ; $97 !
>1081	3a 12					.word	ByteRefHandler           ; $98 ?
>1083	4d 10					.word	Unimplemented            ; $99 repeat
>1085	4d 10					.word	Unimplemented            ; $9a while
>1087	4d 10					.word	Unimplemented            ; $9b for
>1089	4d 10					.word	Unimplemented            ; $9c if
>108b	4d 10					.word	Unimplemented            ; $9d until
>108d	4d 10					.word	Unimplemented            ; $9e wend
>108f	4d 10					.word	Unimplemented            ; $9f next
>1091	4d 10					.word	Unimplemented            ; $a0 then
>1093	4d 10					.word	Unimplemented            ; $a1 endif
>1095	51 14					.word	UnaryParenthesis         ; $a2 (
>1097	fd 14					.word	UnaryLen                 ; $a3 len(
>1099	41 15					.word	UnarySgn                 ; $a4 sgn(
>109b	2a 15					.word	UnaryAbs                 ; $a5 abs(
>109d	9a 15					.word	Unary_Random             ; $a6 random(
>109f	e4 15					.word	Unary_Page               ; $a7 page
>10a1	8b 18					.word	MInt32True               ; $a8 true
>10a3	8f 18					.word	MInt32False              ; $a9 false
>10a5	af 15					.word	Unary_Min                ; $aa min(
>10a7	b3 15					.word	Unary_Max                ; $ab max(
>10a9	4d 10					.word	Unimplemented            ; $ac sys(
>10ab	4d 10					.word	Unimplemented            ; $ad timer(
>10ad	4d 10					.word	Unimplemented            ; $ae event(
>10af	4d 10					.word	Unimplemented            ; $af get(
>10b1	4d 10					.word	Unimplemented            ; $b0 inkey(
>10b3	4d 10					.word	Unimplemented            ; $b1 alloc(
>10b5	4d 10					.word	Unimplemented            ; $b2 chr$(
>10b7	4d 10					.word	Unimplemented            ; $b3 left$(
>10b9	4d 10					.word	Unimplemented            ; $b4 mid$(
>10bb	4d 10					.word	Unimplemented            ; $b5 right$(
>10bd	4d 10					.word	Unimplemented            ; $b6 str$(
>10bf	4d 10					.word	Unimplemented            ; $b7 val(
>10c1	58 15					.word	UnaryPeek                ; $b8 peek(
>10c3	5e 15					.word	UnaryDeek                ; $b9 deek(
>10c5	64 15					.word	UnaryLeek                ; $ba leek(
>10c7	1b 15					.word	UnaryAsc                 ; $bb asc(
>10c9	4d 10					.word	Unimplemented            ; $bc int(
>10cb	4d 10					.word	Unimplemented            ; $bd float(
>10cd	f2 15					.word	UnaryReference           ; $be @
>10cf	08 16					.word	UnaryComplement          ; $bf ~
>10d1	05 16					.word	UnaryHexMarker           ; $c0 &
>10d3	4d 10					.word	Unimplemented            ; $c1 )
>10d5	3f 10					.word	CommandColon             ; $c2 :
>10d7	4d 10					.word	Unimplemented            ; $c3 ,
>10d9	4d 10					.word	Unimplemented            ; $c4 ;
>10db	4d 10					.word	Unimplemented            ; $c5 ]
>10dd	4d 10					.word	Unimplemented            ; $c6 to
>10df	4d 10					.word	Unimplemented            ; $c7 step
>10e1	4d 10					.word	Unimplemented            ; $c8 proc
>10e3	4d 10					.word	Unimplemented            ; $c9 endproc
>10e5	4d 10					.word	Unimplemented            ; $ca local
>10e7	4d 10					.word	Unimplemented            ; $cb rem
>10e9	4d 10					.word	Unimplemented            ; $cc let
>10eb	4d 10					.word	Unimplemented            ; $cd '
>10ed	4d 10					.word	Unimplemented            ; $ce [
>10ef	4d 10					.word	Unimplemented            ; $cf input
>10f1	4d 10					.word	Unimplemented            ; $d0 else
>10f3	4d 10					.word	Unimplemented            ; $d1 vdu
>10f5	4d 10					.word	Unimplemented            ; $d2 read
>10f7	4d 10					.word	Unimplemented            ; $d3 data
>10f9	4d 10					.word	Unimplemented            ; $d4 restore
>10fb	4d 10					.word	Unimplemented            ; $d5 print
>10fd	4d 10					.word	Unimplemented            ; $d6 goto
>10ff	4d 10					.word	Unimplemented            ; $d7 gosub
>1101	4d 10					.word	Unimplemented            ; $d8 return
>1103	10 10					.word	Command_Assert           ; $d9 assert
>1105	11 11					.word	CommandStop              ; $da stop
>1107	16 11					.word	CommandEnd               ; $db end
>1109	4d 10					.word	Unimplemented            ; $dc dim
>110b	4d 10					.word	Unimplemented            ; $dd poke
>110d	4d 10					.word	Unimplemented            ; $de doke
>110f	4d 10					.word	Unimplemented            ; $df loke

;******  Return to file: ..\source\main/commands/run.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/commands/stopend.asm

.1111					CommandStop:
.1111	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.1113	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1116					CommandEnd:
.1116	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1119					AdvanceNextLine:
.1119	a0 00		ldy #$00			ldy 	#0 							; get offset
.111b	b1 02		lda ($02),y			lda 	(codePtr),y
.111d	18		clc				clc 								; add to codePtr
.111e	65 02		adc $02				adc 	codePtr
.1120	85 02		sta $02				sta 	codePtr
.1122	90 02		bcc $1126			bcc 	_ANLNoCarry
.1124	e6 03		inc $03				inc 	codePtr+1
.1126					_ANLNoCarry:
.1126	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1128	f0 ec		beq $1116			beq 	CommandEnd 					; execute END
.112a	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.112c	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/binary.asm

.112d					BinaryProcess:
.112d	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.112f	15 41		ora $41,x			ora 	esType+1,x
.1131	0a		asl a				asl 	a
.1132	30 0e		bmi $1142			bmi 	_BPStringType 				; if one is set, then string type.
.1134	18		clc				clc 								; return CC for integer
.1135	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1137	f0 08		beq $1141			beq 	_BPExit 					; if both integer then return with CC.
.1139	20 47 11	jsr $1147			jsr 	BPMakeBothFloat 			; make both float
.113c	a9 01		lda #$01			lda 	#$01 						; set result type to float
.113e	95 40		sta $40,x			sta 	esType,x
.1140	38		sec				sec 								; and return with carry set.
.1141					_BPExit:
.1141	60		rts				rts
.1142					_BPStringType:
.1142	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1144	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1147					BPMakeBothFloat:
.1147	e8		inx				inx
.1148	20 4c 11	jsr $114c			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.114b	ca		dex				dex
.114c					BPMakeFloat:
.114c	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.114e	4a		lsr a				lsr 	a
.114f	b0 07		bcs $1158			bcs 	_BPIsFloat
.1151	8a		txa				txa
.1152	a2 1a		ldx #$1a		ldx	#26
.1154	20 21 19	jsr $1921		jsr	floatingpointHandler
.1157	aa		tax				tax
.1158					_BPIsFloat:
.1158	60		rts				rts
.1159					AddHandler:
.1159	20 1f 13	jsr $131f			jsr 	DereferenceTwo 				; dereference top two on stack.
.115c	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.115e	35 41		and $41,x			and 	esType+1,x
.1160	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1162	d0 10		bne $1174			bne 	_AHStringConcat				; concatenate strings.
.1164	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1167	b0 03		bcs $116c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1169	4c 81 17	jmp $1781			jmp 	MInt32Add 							; else do it as integer.
.116c					_IsFPOperation:
.116c	8a		txa				txa 								; call the relevant fp routine
.116d	a2 04		ldx #$04		ldx	#4
.116f	20 21 19	jsr $1921		jsr	floatingpointHandler
.1172	aa		tax				tax
.1173	60		rts				rts
.1174					_AHStringConcat:
.1174	8a		txa				txa
.1175	a2 00		ldx #$00		ldx	#0
.1177	20 30 19	jsr $1930		jsr	stringHandler
.117a	aa		tax				tax
.117b	60		rts				rts
.117c					SubHandler:
.117c	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.117f	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1182	b0 03		bcs $1187			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1184	4c 9b 17	jmp $179b			jmp 	MInt32Sub 							; else do it as integer.
.1187					_IsFPOperation:
.1187	8a		txa				txa 								; call the relevant fp routine
.1188	a2 12		ldx #$12		ldx	#18
.118a	20 21 19	jsr $1921		jsr	floatingpointHandler
.118d	aa		tax				tax
.118e	60		rts				rts
.118f					MulHandler:
.118f	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1192	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1195	b0 03		bcs $119a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1197	4c b5 17	jmp $17b5			jmp 	MInt32Multiply 							; else do it as integer.
.119a					_IsFPOperation:
.119a	8a		txa				txa 								; call the relevant fp routine
.119b	a2 0c		ldx #$0c		ldx	#12
.119d	20 21 19	jsr $1921		jsr	floatingpointHandler
.11a0	aa		tax				tax
.11a1	60		rts				rts
.11a2					DivHandler:
.11a2	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11a5	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11a8	b0 03		bcs $11ad			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11aa	4c 8f 16	jmp $168f			jmp 	MInt32SDivide 							; else do it as integer.
.11ad					_IsFPOperation:
.11ad	8a		txa				txa 								; call the relevant fp routine
.11ae	a2 08		ldx #$08		ldx	#8
.11b0	20 21 19	jsr $1921		jsr	floatingpointHandler
.11b3	aa		tax				tax
.11b4	60		rts				rts
.11b5					ModHandler:
.11b5	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11b8	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11bb	b0 03		bcs $11c0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11bd	4c 0d 17	jmp $170d			jmp 	MInt32Modulus 							; else do it as integer.
.11c0					_IsFPOperation:
.11c0	8a		txa				txa 								; call the relevant fp routine
.11c1	a2 0a		ldx #$0a		ldx	#10
.11c3	20 21 19	jsr $1921		jsr	floatingpointHandler
.11c6	aa		tax				tax
.11c7	60		rts				rts
.11c8					XorHandler:
.11c8	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11cb	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11ce	b0 03		bcs $11d3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11d0	4c 41 16	jmp $1641			jmp 	MInt32Xor 							; else do it as integer.
.11d3					_IsFPOperation:
.11d3	8a		txa				txa 								; call the relevant fp routine
.11d4	a2 0a		ldx #$0a		ldx	#10
.11d6	20 21 19	jsr $1921		jsr	floatingpointHandler
.11d9	aa		tax				tax
.11da	60		rts				rts
.11db					OrHandler:
.11db	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11de	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11e1	b0 03		bcs $11e6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11e3	4c 28 16	jmp $1628			jmp 	MInt32Or 							; else do it as integer.
.11e6					_IsFPOperation:
.11e6	8a		txa				txa 								; call the relevant fp routine
.11e7	a2 0a		ldx #$0a		ldx	#10
.11e9	20 21 19	jsr $1921		jsr	floatingpointHandler
.11ec	aa		tax				tax
.11ed	60		rts				rts
.11ee					AndHandler:
.11ee	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11f1	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11f4	b0 03		bcs $11f9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11f6	4c 0f 16	jmp $160f			jmp 	MInt32And 							; else do it as integer.
.11f9					_IsFPOperation:
.11f9	8a		txa				txa 								; call the relevant fp routine
.11fa	a2 0a		ldx #$0a		ldx	#10
.11fc	20 21 19	jsr $1921		jsr	floatingpointHandler
.11ff	aa		tax				tax
.1200	60		rts				rts
.1201					ShlHandler:
.1201	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1204	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1207	b0 03		bcs $120c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1209	4c 82 12	jmp $1282			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.120c					_IsFPOperation:
.120c	8a		txa				txa 								; call the relevant fp routine
.120d	a2 0a		ldx #$0a		ldx	#10
.120f	20 21 19	jsr $1921		jsr	floatingpointHandler
.1212	aa		tax				tax
.1213	60		rts				rts
.1214					ShrHandler:
.1214	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1217	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.121a	b0 03		bcs $121f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.121c	4c 85 12	jmp $1285			jmp 	MInt32ShiftRightX 							; else do it as integer.
.121f					_IsFPOperation:
.121f	8a		txa				txa 								; call the relevant fp routine
.1220	a2 0a		ldx #$0a		ldx	#10
.1222	20 21 19	jsr $1921		jsr	floatingpointHandler
.1225	aa		tax				tax
.1226	60		rts				rts
.1227					WordRefHandler:
.1227	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.122a	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.122d	b0 03		bcs $1232			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.122f	4c 74 12	jmp $1274			jmp 	MInt32WordIndirect 							; else do it as integer.
.1232					_IsFPOperation:
.1232	8a		txa				txa 								; call the relevant fp routine
.1233	a2 0a		ldx #$0a		ldx	#10
.1235	20 21 19	jsr $1921		jsr	floatingpointHandler
.1238	aa		tax				tax
.1239	60		rts				rts
.123a					ByteRefHandler:
.123a	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.123d	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1240	b0 03		bcs $1245			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1242	4c 78 12	jmp $1278			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1245					_IsFPOperation:
.1245	8a		txa				txa 								; call the relevant fp routine
.1246	a2 0a		ldx #$0a		ldx	#10
.1248	20 21 19	jsr $1921		jsr	floatingpointHandler
.124b	aa		tax				tax
.124c	60		rts				rts
.124d					PowerHandler:
.124d	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1250	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1253	b0 03		bcs $1258			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1255	4c 60 12	jmp $1260			jmp 	PowerInteger 							; else do it as integer.
.1258					_IsFPOperation:
.1258	8a		txa				txa 								; call the relevant fp routine
.1259	a2 16		ldx #$16		ldx	#22
.125b	20 21 19	jsr $1921		jsr	floatingpointHandler
.125e	aa		tax				tax
.125f	60		rts				rts
.1260					PowerInteger:
.1260	20 47 11	jsr $1147			jsr 	BPMakeBothFloat				; make them float.
.1263	8a		txa				txa
.1264	a2 16		ldx #$16		ldx	#22
.1266	20 21 19	jsr $1921		jsr	floatingpointHandler
.1269	a2 14		ldx #$14		ldx	#20
.126b	20 21 19	jsr $1921		jsr	floatingpointHandler
.126e	aa		tax				tax
.126f	a9 00		lda #$00			lda 	#0 							; make type integer
.1271	95 40		sta $40,x			sta 	esType,x
.1273	60		rts				rts
.1274					Mint32WordIndirect:
.1274	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1276	d0 02		bne $127a			bne 	Min32Indirect
.1278					Mint32ByteIndirect:
.1278	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.127a					Min32Indirect:
.127a	48		pha				pha 								; save the indirection
.127b	20 81 17	jsr $1781			jsr 	MInt32Add 					; add a!b a?b
.127e	68		pla				pla 								; and set the type to reference.
.127f	95 40		sta $40,x			sta 	esType,x
.1281	60		rts				rts
.1282					Mint32ShiftLeftX:
.1282	18		clc				clc
.1283	90 01		bcc $1286			bcc 	Mint32Shift
.1285					Mint32ShiftRightX:
.1285	38		sec				sec
.1286					Mint32Shift:
.1286	08		php				php 								; save carry flag on stack.
.1287	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1289	15 59		ora $59,x			ora 	esInt2+1,x
.128b	15 61		ora $61,x			ora 	esInt3+1,x
.128d	d0 1e		bne $12ad			bne 	_MShiftZero
.128f	b5 49		lda $49,x			lda 	esInt0+1,x
.1291	c9 20		cmp #$20			cmp 	#32
.1293	b0 18		bcs $12ad			bcs 	_MShiftZero
.1295					_MShiftLoop:
.1295	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1297	f0 12		beq $12ab			beq 	_MShiftExit
.1299	d6 49		dec $49,x			dec 	esInt0+1,x
.129b	28		plp				plp 								; restore and save carry
.129c	08		php				php
.129d	90 06		bcc $12a5			bcc 	_MShiftLeft
.129f	20 ad 18	jsr $18ad			jsr 	Mint32ShiftRight
.12a2	4c 95 12	jmp $1295			jmp 	_MShiftLoop
.12a5					_MShiftLeft:
.12a5	20 a4 18	jsr $18a4			jsr 	Mint32ShiftLeft
.12a8	4c 95 12	jmp $1295			jmp 	_MShiftLoop
.12ab					_MShiftExit:
.12ab	28		plp				plp	 								; throw saved carry and exit
.12ac	60		rts				rts
.12ad					_MShiftZero:
.12ad	4c 8f 18	jmp $188f			jmp 	MInt32False 				; return 0.

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/compare.asm

.12b0					PerformComparison:
.12b0	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.12b2	35 41		and $41,x			and 	esType+1,x
.12b4	0a		asl a				asl 	a
.12b5	30 19		bmi $12d0			bmi 	_PCIsString
.12b7	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.12b9	15 41		ora $41,x			ora 	esType+1,x
.12bb	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.12bc	30 1a		bmi $12d8			bmi 	_PCError
.12be	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.12c0	f0 0b		beq $12cd			beq 	_PCIsInteger 				; if not two integers
.12c2	20 47 11	jsr $1147			jsr 	BPMakeBothFloat 			; make both float
.12c5	8a		txa				txa
.12c6	a2 06		ldx #$06		ldx	#6
.12c8	20 21 19	jsr $1921		jsr	floatingpointHandler
.12cb	aa		tax				tax
.12cc	60		rts				rts
.12cd					_PCIsInteger:
.12cd	4c 5a 16	jmp $165a			jmp 	MInt32Compare
.12d0					_PCIsString:
.12d0	8a		txa				txa
.12d1	a2 02		ldx #$02		ldx	#2
.12d3	20 30 19	jsr $1930		jsr	stringHandler
.12d6	aa		tax				tax
.12d7	60		rts				rts
.12d8					_PCError:
.12d8	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.12da	20 1a 19	jsr $191a			jsr 	ErrorHandler
.12dd					CompareEquals:
.12dd	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12e0	c9 00		cmp #$00			cmp 	#$00
.12e2	f0 35		beq $1319			beq  	CompareTrue
.12e4	4c 1c 13	jmp $131c			jmp 	CompareFalse
.12e7					CompareLess:
.12e7	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12ea	c9 ff		cmp #$ff			cmp 	#$FF
.12ec	f0 2b		beq $1319			beq  	CompareTrue
.12ee	4c 1c 13	jmp $131c			jmp 	CompareFalse
.12f1					CompareGreater:
.12f1	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12f4	c9 01		cmp #$01			cmp 	#$01
.12f6	f0 21		beq $1319			beq  	CompareTrue
.12f8	4c 1c 13	jmp $131c			jmp 	CompareFalse
.12fb					CompareNotEquals:
.12fb	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12fe	c9 00		cmp #$00			cmp 	#$00
.1300	d0 17		bne $1319			bne  	CompareTrue
.1302	4c 1c 13	jmp $131c			jmp 	CompareFalse
.1305					CompareGreaterEq:
.1305	20 b0 12	jsr $12b0			jsr 	PerformComparison
.1308	c9 ff		cmp #$ff			cmp 	#$FF
.130a	d0 0d		bne $1319			bne  	CompareTrue
.130c	4c 1c 13	jmp $131c			jmp 	CompareFalse
.130f					CompareLessEq:
.130f	20 b0 12	jsr $12b0			jsr 	PerformComparison
.1312	c9 01		cmp #$01			cmp 	#$01
.1314	d0 03		bne $1319			bne  	CompareTrue
.1316	4c 1c 13	jmp $131c			jmp 	CompareFalse
.1319					CompareTrue:
.1319	4c 8b 18	jmp $188b			jmp 	MInt32True
.131c					CompareFalse:
.131c	4c 8f 18	jmp $188f			jmp 	MInt32False

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/dereference.asm

.131f					DereferenceTwo:
.131f	e8		inx				inx
.1320	20 24 13	jsr $1324			jsr 	DereferenceOne
.1323	ca		dex				dex
.1324					DereferenceOne:
.1324	b5 40		lda $40,x			lda 	esType,x
.1326	10 3d		bpl $1365			bpl 	_DRNotReference 			; is it a reference ?
.1328	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1329	b0 3b		bcs $1366			bcs 	_DRFloatDeReference
.132b	98		tya				tya
.132c	48		pha				pha
.132d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.132f	85 04		sta $04				sta 	temp0
.1331	b5 50		lda $50,x			lda 	esInt1,x
.1333	85 05		sta $05				sta 	temp0+1
.1335	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1337	95 50		sta $50,x			sta 	esInt1,x
.1339	95 58		sta $58,x			sta 	esInt2,x
.133b	95 60		sta $60,x			sta 	esInt3,x
.133d	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.133f	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1341	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1342	30 0d		bmi $1351			bmi 	_DeRefString 				; string, 2 bytes only
.1344	d0 11		bne $1357			bne 	_DeRefByte 					; byte 1 byte only
.1346					_DeRefLong:
.1346	a0 03		ldy #$03			ldy 	#3
.1348	b1 04		lda ($04),y			lda 	(temp0),y
.134a	95 60		sta $60,x			sta 	esInt3,x
.134c	88		dey				dey
.134d	b1 04		lda ($04),y			lda 	(temp0),y
.134f	95 58		sta $58,x			sta 	esInt2,x
.1351					_DeRefString:
.1351	a0 01		ldy #$01			ldy 	#1
.1353	b1 04		lda ($04),y			lda 	(temp0),y
.1355	95 50		sta $50,x			sta 	esInt1,x
.1357					_DeRefByte:
.1357	a0 00		ldy #$00			ldy 	#0
.1359	b1 04		lda ($04),y			lda 	(temp0),y
.135b	95 48		sta $48,x			sta 	esInt0,x
.135d	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.135f	29 40		and #$40			and 	#$40
.1361	95 40		sta $40,x			sta 	esType,x
.1363	68		pla				pla
.1364	a8		tay				tay
.1365					_DRNotReference
.1365	60		rts				rts
.1366					_DRFloatDereference:
.1366	8a		txa				txa
.1367	a2 00		ldx #$00		ldx	#0
.1369	20 21 19	jsr $1921		jsr	floatingpointHandler
.136c	aa		tax				tax
.136d	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.136f	95 40		sta $40,x			sta 	esType,x
.1371	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/evaluate.asm

.1372					EvaluateLevel:
.1372	48		pha				pha 								; save precedence level.
.1373	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1375	95 48		sta $48,x			sta 	esInt0,x
.1377	95 50		sta $50,x			sta 	esInt1,x
.1379	95 58		sta $58,x			sta 	esInt2,x
.137b	95 60		sta $60,x			sta 	esInt3,x
.137d	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.137f	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1381	30 21		bmi $13a4			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1383	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1384	30 0a		bmi $1390			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1386	8a		txa				txa 								; stack level in X
.1387	a2 00		ldx #$00		ldx	#0
.1389	20 5a 19	jsr $195a		jsr	variableHandler
.138c	aa		tax				tax
.138d	4c cd 13	jmp $13cd			jmp		_ELHasTerm
.1390					_ELIsConstant:
.1390	4a		lsr a				lsr 	a 							; get the value back
.1391	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1393	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1395					_ELCheckNext:
.1395	c8		iny				iny 								; look at next
.1396	b1 02		lda ($02),y			lda 	(codePtr),y
.1398	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.139a	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.139c	b0 2f		bcs $13cd			bcs 	_ELHasTerm 					; done getting the constant.
.139e	20 b3 14	jsr $14b3			jsr 	ELShiftByteIn 				; shift byte into position.
.13a1	4c 95 13	jmp $1395			jmp 	_ELCheckNext
.13a4					_ELIsToken:
.13a4	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.13a6	f0 0f		beq $13b7			beq 	_ELIsString
.13a8	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.13aa	d0 5f		bne $140b			bne 	_ELCheckUnary
.13ac	8a		txa				txa 								; put X into A
.13ad	c8		iny				iny 								; skip over the float marker
.13ae	a2 18		ldx #$18		ldx	#24
.13b0	20 21 19	jsr $1921		jsr	floatingpointHandler
.13b3	aa		tax				tax 								; restore X
.13b4	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.13b7					_ELIsString:
.13b7	98		tya				tya 								; address of string is codePtr+y+1
.13b8	38		sec				sec
.13b9	65 02		adc $02				adc 	codePtr
.13bb	95 48		sta $48,x			sta 	esInt0,x
.13bd	a5 03		lda $03				lda 	codePtr+1
.13bf	69 00		adc #$00			adc 	#0
.13c1	95 50		sta $50,x			sta 	esInt1,x
.13c3	a9 40		lda #$40			lda 	#$40 						; set type to string value
.13c5	95 40		sta $40,x			sta 	esType,x
.13c7	c8		iny				iny 								; skip over string.
.13c8	98		tya				tya
.13c9	38		sec				sec									; +1 for the length itself.
.13ca	71 02		adc ($02),y			adc 	(codePtr),y
.13cc	a8		tay				tay 								; and fall through to term loop code.
.13cd					_ELHasTerm:
.13cd	b1 02		lda ($02),y			lda 	(codePtr),y
.13cf	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.13d1	90 04		bcc $13d7			bcc 	_ELPopExit
.13d3	c9 9d		cmp #$9d			cmp 	#TOK_STRUCTST
.13d5	90 02		bcc $13d9			bcc 	_ELHasBinaryTerm
.13d7					_ELPopExit:
.13d7	68		pla				pla
.13d8					_ELExit:
.13d8	60		rts				rts
.13d9					_ELHasBinaryTerm:
.13d9	84 0a		sty $0a				sty 	tempShort 					; save position
.13db	a8		tay				tay 								; use token as an index and get the precedence.
.13dc	b9 5b 14	lda $145b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.13df	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.13e1	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.13e3	68		pla				pla 								; restore current level.
.13e4	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.13e6	b0 f0		bcs $13d8			bcs 	_ELExit
.13e8	48		pha				pha 								; save current level back on the stack.
.13e9	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.13eb	48		pha				pha
.13ec	c8		iny				iny
.13ed	e8		inx				inx 								; calculate the RHS at the operator precedence.
.13ee	a5 0a		lda $0a				lda 	tempShort
.13f0	20 72 13	jsr $1372			jsr 	EvaluateLevel
.13f3	ca		dex				dex
.13f4	68		pla				pla 								; get the operator back out.
.13f5					_ELExecuteA:
.13f5	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.13f7	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.13f8	aa		tax				tax
.13f9	bd 51 10	lda $1051,x			lda 	Group0Vectors,x
.13fc	85 04		sta $04				sta 	temp0
.13fe	bd 52 10	lda $1052,x			lda 	Group0Vectors+1,x
.1401	85 05		sta $05				sta 	temp0+1
.1403	a6 0a		ldx $0a				ldx 	tempShort
.1405	20 4e 14	jsr $144e			jsr 	_ELCallTemp0
.1408	4c cd 13	jmp $13cd			jmp 	_ELHasTerm 					; and loop back round.
.140b					_ELCheckUnary:
.140b	c8		iny				iny 								; skip over token.
.140c	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.140e	f0 15		beq $1425			beq 	_ELMinus
.1410	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1412	f0 28		beq $143c			beq 	_ELIndirect
.1414	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1416	f0 24		beq $143c			beq 	_ELIndirect
.1418	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.141a	90 04		bcc $1420			bcc 	_ELUSyntax
.141c	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.141e	90 d5		bcc $13f5			bcc 	_ELExecuteA 				; if so do that token.
.1420					_ELUSyntax:
.1420	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1422	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1425					_ELMinus:
.1425	20 63 14	jsr $1463			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1428	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.142a	f0 0a		beq $1436			beq 	_ELMinusInteger
.142c	8a		txa				txa
.142d	a2 0e		ldx #$0e		ldx	#14
.142f	20 21 19	jsr $1921		jsr	floatingpointHandler
.1432	aa		tax				tax
.1433	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.1436					_ELMinusInteger:
.1436	20 49 18	jsr $1849			jsr 	MInt32Negate 				; do int negate
.1439	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.143c					_ELIndirect:
.143c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.143d	20 6c 14	jsr $146c			jsr 	EvaluateIntegerTerm 		; integer address
.1440	68		pla				pla
.1441	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1443	f0 02		beq $1447			beq 	_ELHaveModifier
.1445	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1447					_ELHaveModifier:
.1447	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1449	95 40		sta $40,x			sta 	esType,x
.144b	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.144e					_ELCallTemp0:
.144e	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1451					UnaryParenthesis:
.1451	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1453	20 72 13	jsr $1372			jsr 	EvaluateLevel
.1456	20 f7 18	jsr $18f7			jsr 	CheckRightParen 			; check for )
.1459	60		rts				rts
.145a					EvaluateTerm:
.145a	a9 0f		lda #$0f			lda 	#15
.145c	20 72 13	jsr $1372			jsr 	EvaluateLevel
.145f	20 24 13	jsr $1324			jsr 	DereferenceOne
.1462	60		rts				rts
.1463					EvaluateNumericTerm:
.1463	20 5a 14	jsr $145a			jsr 	EvaluateTerm
.1466	b5 40		lda $40,x			lda 	esType,x
.1468	0a		asl a				asl 	a 							; see if it's a string.
.1469	30 09		bmi $1474			bmi 	ENTType
.146b	60		rts				rts
.146c					EvaluateIntegerTerm:
.146c	20 5a 14	jsr $145a			jsr 	EvaluateTerm
.146f	b5 40		lda $40,x			lda 	esType,x
.1471	d0 01		bne $1474			bne 	ENTType
.1473	60		rts				rts
.1474					ENTType:
.1474	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1476	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1479					EvaluateRoot:
.1479	a2 00		ldx #$00			ldx 	#0
.147b					Evaluate:
.147b	a9 00		lda #$00			lda 	#0
.147d	20 72 13	jsr $1372			jsr 	EvaluateLevel
.1480	20 24 13	jsr $1324			jsr 	DereferenceOne
.1483	60		rts				rts
.1484					EvaluateNumeric:
.1484	20 7b 14	jsr $147b			jsr 	Evaluate
.1487	b5 40		lda $40,x			lda 	esType,x
.1489	0a		asl a				asl 	a 							; see if it's a string.
.148a	30 e8		bmi $1474			bmi 	ENTType
.148c	4a		lsr a				lsr 	a 							; shift float flag into carry.
.148d	4a		lsr a				lsr 	a
.148e	60		rts				rts
.148f					EvaluateString:
.148f	20 7b 14	jsr $147b			jsr 	Evaluate
.1492	b5 40		lda $40,x			lda 	esType,x
.1494	0a		asl a				asl 	a 							; see if it's a string.
.1495	10 dd		bpl $1474			bpl 	ENTType
.1497	60		rts				rts
.1498					EvaluateInteger:
.1498	20 7b 14	jsr $147b			jsr 	Evaluate
.149b	b5 40		lda $40,x			lda 	esType,x
.149d	d0 d5		bne $1474			bne 	ENTType
.149f	60		rts				rts
.14a0					EvaluateSmallInteger:
.14a0	20 98 14	jsr $1498			jsr 	EvaluateInteger
.14a3	b5 41		lda $41,x			lda 	esType+1,x
.14a5	15 42		ora $42,x			ora 	esType+2,x
.14a7	15 43		ora $43,x			ora 	esType+3,x
.14a9	d0 03		bne $14ae			bne 	_ESIValue
.14ab	b5 40		lda $40,x			lda 	esType,x
.14ad	60		rts				rts
.14ae					_ESIValue:
.14ae	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.14b0	20 1a 19	jsr $191a			jsr 	ErrorHandler
.14b3					ELShiftByteIn:
.14b3	48		pha				pha 								; save bits to shift in.
.14b4	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.14b6	48		pha				pha
.14b7	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.14b9	95 60		sta $60,x			sta 	esInt3,x
.14bb	b5 50		lda $50,x			lda 	esInt1,x
.14bd	95 58		sta $58,x			sta 	esInt2,x
.14bf	b5 48		lda $48,x			lda 	esInt0,x
.14c1	95 50		sta $50,x			sta 	esInt1,x
.14c3	a9 00		lda #$00			lda 	#0
.14c5	95 48		sta $48,x			sta 	esInt0,x
.14c7	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.14c8	29 03		and #$03			and 	#3 							; only want lower 2 bits
.14ca	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.14cc					_ELShiftLoop:
.14cc	4a		lsr a				lsr 	a
.14cd	76 60		ror $60,x			ror 	esInt3,x
.14cf	76 58		ror $58,x			ror 	esInt2,x
.14d1	76 50		ror $50,x			ror 	esInt1,x
.14d3	76 48		ror $48,x			ror 	esInt0,x
.14d5	c9 01		cmp #$01			cmp 	#1
.14d7	d0 f3		bne $14cc			bne 	_ELShiftLoop
.14d9	68		pla				pla 								; get original 6 bit value and OR in.
.14da	29 3f		and #$3f			and 	#$3F
.14dc	15 48		ora $48,x			ora 	esInt0,x
.14de	95 48		sta $48,x			sta 	esInt0,x
.14e0	60		rts				rts
.14e1					ELBinaryOperatorInfo:

;******  Processing file: ..\source\main/evaluate/../../generated/binarystructinfo.inc

>14e1	01					.byte	$01			; $86 and
>14e2	01					.byte	$01			; $87 or
>14e3	01					.byte	$01			; $88 xor
>14e4	02					.byte	$02			; $89 >=
>14e5	02					.byte	$02			; $8a <=
>14e6	02					.byte	$02			; $8b >
>14e7	02					.byte	$02			; $8c <
>14e8	02					.byte	$02			; $8d =
>14e9	02					.byte	$02			; $8e <>
>14ea	03					.byte	$03			; $8f +
>14eb	03					.byte	$03			; $90 -
>14ec	04					.byte	$04			; $91 >>
>14ed	04					.byte	$04			; $92 <<
>14ee	04					.byte	$04			; $93 *
>14ef	04					.byte	$04			; $94 /
>14f0	04					.byte	$04			; $95 mod
>14f1	05					.byte	$05			; $96 ^
>14f2	06					.byte	$06			; $97 !
>14f3	06					.byte	$06			; $98 ?
>14f4	82					.byte	$82			; $99 repeat
>14f5	82					.byte	$82			; $9a while
>14f6	82					.byte	$82			; $9b for
>14f7	82					.byte	$82			; $9c if
>14f8	80					.byte	$80			; $9d until
>14f9	80					.byte	$80			; $9e wend
>14fa	80					.byte	$80			; $9f next
>14fb	80					.byte	$80			; $a0 then
>14fc	80					.byte	$80			; $a1 endif

;******  Return to file: ..\source\main/evaluate/evaluate.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/unary.asm

.14fd					UnaryLen:
.14fd	20 0b 15	jsr $150b			jsr 	ULStart
.1500					ULFinish:
.1500	b1 04		lda ($04),y			lda 	(temp0),y
.1502	a4 0a		ldy $0a				ldy 	tempShort
.1504	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.1507	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.150a	60		rts				rts
.150b	20 8f 14	jsr $148f	ULStart:jsr 	EvaluateString
.150e	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1510	85 04		sta $04				sta 	temp0
.1512	b5 50		lda $50,x			lda 	esInt1,x
.1514	85 05		sta $05				sta 	temp0+1
.1516	84 0a		sty $0a				sty 	tempShort 					; get length
.1518	a0 00		ldy #$00			ldy 	#0
.151a	60		rts				rts
.151b					UnaryAsc:
.151b	20 0b 15	jsr $150b			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.151e	b1 04		lda ($04),y			lda 	(temp0),y
.1520	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1521	c9 00		cmp #$00			cmp 	#0
.1523	d0 db		bne $1500			bne 	ULFinish
.1525	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1527	20 1a 19	jsr $191a			jsr 	ErrorHandler
.152a					UnaryAbs:
.152a	20 84 14	jsr $1484			jsr 	EvaluateNumeric
.152d	b0 07		bcs $1536			bcs 	_UAFloat
.152f	20 44 18	jsr $1844			jsr 	MInt32Absolute
.1532	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.1535	60		rts				rts
.1536					_UAFloat:
.1536	8a		txa				txa
.1537	a2 02		ldx #$02		ldx	#2
.1539	20 21 19	jsr $1921		jsr	floatingpointHandler
.153c	aa		tax				tax
.153d	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.1540	60		rts				rts
.1541					UnarySgn:
.1541	20 84 14	jsr $1484			jsr 	EvaluateNumeric
.1544	b0 07		bcs $154d			bcs 	_USFloat
.1546	20 7c 18	jsr $187c			jsr 	MInt32Sign
.1549	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.154c	60		rts				rts
.154d					_USFloat:
.154d	8a		txa				txa
.154e	a2 10		ldx #$10		ldx	#16
.1550	20 21 19	jsr $1921		jsr	floatingpointHandler
.1553	aa		tax				tax
.1554	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.1557	60		rts				rts
.1558					UnaryPeek:
.1558	20 84 15	jsr $1584			jsr 	PDLCode
.155b	4c 78 15	jmp $1578			jmp 	PDLByte0
.155e					UnaryDeek:
.155e	20 84 15	jsr $1584			jsr 	PDLCode
.1561	4c 72 15	jmp $1572			jmp 	PDLByte1
.1564					UnaryLeek:
.1564	20 84 15	jsr $1584			jsr 	PDLCode
.1567	a0 03		ldy #$03			ldy 	#3
.1569	b1 04		lda ($04),y			lda 	(temp0),y
.156b	95 60		sta $60,x			sta 	esInt3,x
.156d	88		dey				dey
.156e	b1 04		lda ($04),y			lda 	(temp0),y
.1570	95 58		sta $58,x			sta 	esInt2,x
.1572					PDLByte1:
.1572	a0 01		ldy #$01			ldy 	#1
.1574	b1 04		lda ($04),y			lda 	(temp0),y
.1576	95 50		sta $50,x			sta 	esInt1,x
.1578					PDLByte0:
.1578	a0 00		ldy #$00			ldy 	#0
.157a	b1 04		lda ($04),y			lda 	(temp0),y
.157c	95 48		sta $48,x			sta 	esInt0,x
.157e	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1580	20 f7 18	jsr $18f7			jsr 	CheckRightParen 			; check right and return
.1583	60		rts				rts
.1584					PDLCode:
.1584	20 98 14	jsr $1498			jsr 	EvaluateInteger
.1587	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1589	85 04		sta $04				sta 	temp0
.158b	b5 50		lda $50,x			lda 	esInt1,x
.158d	85 05		sta $05				sta 	temp0+1
.158f	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1591	95 50		sta $50,x			sta 	esInt1,x
.1593	95 58		sta $58,x			sta 	esInt2,x
.1595	95 60		sta $60,x			sta 	esInt3,x
.1597	84 0a		sty $0a				sty 	tempShort 					; save Y
.1599	60		rts				rts
.159a					Unary_Random:
.159a	20 bf 18	jsr $18bf			jsr 	MInt32Random 				; generate random number.
.159d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.159f	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.15a1	f0 08		beq $15ab			beq 	_URExit
.15a3	e8		inx				inx 								; load range 0..r-1 into +1
.15a4	20 98 14	jsr $1498			jsr 	EvaluateInteger
.15a7	ca		dex				dex
.15a8	20 0d 17	jsr $170d			jsr 	MInt32Modulus 				; calculate random % modulus
.15ab					_URExit:
.15ab	20 f7 18	jsr $18f7			jsr 	CheckRightParen 			; check right and return
.15ae	60		rts				rts
.15af					Unary_Min:
.15af	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.15b1	d0 02		bne $15b5			bne 	UnaryMBody
.15b3					Unary_Max:
.15b3	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.15b5					UnaryMBody:
.15b5	48		pha				pha 								; save comparator on stack.
.15b6	20 7b 14	jsr $147b			jsr 	Evaluate 					; get the first thing to check
.15b9					_UnaryMLoop:
.15b9	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.15bb	c8		iny				iny
.15bc	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.15be	f0 09		beq $15c9			beq 	_UnaryMExit
.15c0	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.15c2	f0 07		beq $15cb			beq 	_UnaryMCompare
.15c4	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.15c6	20 1a 19	jsr $191a			jsr 	ErrorHandler
.15c9					_UnaryMExit:
.15c9	68		pla				pla 								; throw comparator and return.
.15ca	60		rts				rts
.15cb					_UnaryMCompare:
.15cb	e8		inx				inx 								; get the 2nd thing to evaluate
.15cc	20 7b 14	jsr $147b			jsr 	Evaluate
.15cf	ca		dex				dex
.15d0	20 b0 12	jsr $12b0			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.15d3	85 0a		sta $0a				sta 	tempShort 					; save result
.15d5	68		pla				pla 								; get what we need
.15d6	48		pha				pha
.15d7	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.15d9	d0 de		bne $15b9			bne 	_UnaryMLoop 				; no, try another value.
.15db	20 8f 18	jsr $188f			jsr 	MInt32False 				; promote 2nd to 1st.
.15de	20 81 17	jsr $1781			jsr 	MInt32Add
.15e1	4c b9 15	jmp $15b9			jmp 	_UnaryMLoop
.15e4					Unary_Page:
.15e4	20 8f 18	jsr $188f			jsr 	MInt32False 				; zero
.15e7	ad 68 08	lda $0868			lda 	basePage 					; copy base page address in.
.15ea	95 48		sta $48,x			sta 	esInt0,x
.15ec	ad 69 08	lda $0869			lda 	basePage+1
.15ef	95 50		sta $50,x			sta 	esInt1,x
.15f1	60		rts				rts
.15f2					UnaryReference:
.15f2	a9 0f		lda #$0f			lda 	#15
.15f4	20 72 13	jsr $1372			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.15f7	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.15f9	10 05		bpl $1600			bpl 	UType
.15fb	a9 00		lda #$00			lda 	#0 							; make it an integer
.15fd	95 40		sta $40,x			sta 	esType,x
.15ff	60		rts				rts
.1600					UType:
.1600	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1602	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1605					UnaryHexMarker:
.1605	4c 6c 14	jmp $146c			jmp 	EvaluateIntegerTerm
.1608					UnaryComplement:
.1608	20 6c 14	jsr $146c			jsr 	EvaluateIntegerTerm
.160b	20 63 18	jsr $1863			jsr 	MInt32Not
.160e	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32binary.asm

.160f					MInt32And:
.160f	b5 48		lda $48,x			lda 	esInt0,x
.1611	35 49		and $49,x			and 	esInt0+1,x
.1613	95 48		sta $48,x			sta 	esInt0,x
.1615	b5 50		lda $50,x			lda 	esInt1,x
.1617	35 51		and $51,x			and 	esInt1+1,x
.1619	95 50		sta $50,x			sta 	esInt1,x
.161b	b5 58		lda $58,x			lda 	esInt2,x
.161d	35 59		and $59,x			and 	esInt2+1,x
.161f	95 58		sta $58,x			sta 	esInt2,x
.1621	b5 60		lda $60,x			lda 	esInt3,x
.1623	35 61		and $61,x			and 	esInt3+1,x
.1625	95 60		sta $60,x			sta 	esInt3,x
.1627	60		rts				rts
.1628					MInt32Or:
.1628	b5 48		lda $48,x			lda 	esInt0,x
.162a	15 49		ora $49,x			ora 	esInt0+1,x
.162c	95 48		sta $48,x			sta 	esInt0,x
.162e	b5 50		lda $50,x			lda 	esInt1,x
.1630	15 51		ora $51,x			ora 	esInt1+1,x
.1632	95 50		sta $50,x			sta 	esInt1,x
.1634	b5 58		lda $58,x			lda 	esInt2,x
.1636	15 59		ora $59,x			ora 	esInt2+1,x
.1638	95 58		sta $58,x			sta 	esInt2,x
.163a	b5 60		lda $60,x			lda 	esInt3,x
.163c	15 61		ora $61,x			ora 	esInt3+1,x
.163e	95 60		sta $60,x			sta 	esInt3,x
.1640	60		rts				rts
.1641					MInt32Xor:
.1641	b5 48		lda $48,x			lda 	esInt0,x
.1643	55 49		eor $49,x			eor 	esInt0+1,x
.1645	95 48		sta $48,x			sta 	esInt0,x
.1647	b5 50		lda $50,x			lda 	esInt1,x
.1649	55 51		eor $51,x			eor 	esInt1+1,x
.164b	95 50		sta $50,x			sta 	esInt1,x
.164d	b5 58		lda $58,x			lda 	esInt2,x
.164f	55 59		eor $59,x			eor 	esInt2+1,x
.1651	95 58		sta $58,x			sta 	esInt2,x
.1653	b5 60		lda $60,x			lda 	esInt3,x
.1655	55 61		eor $61,x			eor 	esInt3+1,x
.1657	95 60		sta $60,x			sta 	esInt3,x
.1659	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32compare.asm

.165a					MInt32Compare:
.165a	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.165c	d5 49		cmp $49,x			cmp 	esInt0+1,x
.165e	d0 13		bne $1673			bne 	MInt32Compare2
.1660	b5 50		lda $50,x			lda 	esInt1,x
.1662	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1664	d0 0d		bne $1673			bne 	MInt32Compare2
.1666	b5 58		lda $58,x			lda 	esInt2,x
.1668	d5 59		cmp $59,x			cmp 	esInt2+1,x
.166a	d0 07		bne $1673			bne 	MInt32Compare2
.166c	b5 60		lda $60,x			lda 	esInt3,x
.166e	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1670	d0 01		bne $1673			bne 	MInt32Compare2
.1672	60		rts				rts
.1673					MInt32Compare2:
.1673	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1675	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1677	b5 50		lda $50,x			lda		esInt1,x
.1679	f5 51		sbc $51,x			sbc 	esInt1+1,x
.167b	b5 58		lda $58,x			lda		esInt2,x
.167d	f5 59		sbc $59,x			sbc 	esInt2+1,x
.167f	b5 60		lda $60,x			lda		esInt3,x
.1681	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1683	50 02		bvc $1687			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1685	49 80		eor #$80			eor 	#$80
.1687					_I32LNoOverflow
.1687	30 03		bmi $168c			bmi 	MInt32CLess					; if -ve then return $FF
.1689	a9 01		lda #$01			lda 	#$01						; else return $01
.168b	60		rts				rts
.168c					MInt32CLess:
.168c	a9 ff		lda #$ff			lda 	#$FF
.168e	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32divide.asm

.168f					MInt32SDivide:
.168f	98		tya				tya  								; save Y, which is the count of negations
.1690	48		pha				pha
.1691	a0 00		ldy #$00			ldy 	#0 							; zero count
.1693	20 ab 16	jsr $16ab			jsr 	_MInt32SRemSign 			; unsign TOS
.1696	e8		inx				inx 								; unsign TOS+1
.1697	20 ab 16	jsr $16ab			jsr 	_MInt32SRemSign
.169a	ca		dex				dex
.169b	98		tya				tya 								; save sign count on stack
.169c	48		pha				pha
.169d	20 b4 16	jsr $16b4			jsr 	MInt32UDivide 				; unsigned division
.16a0	68		pla				pla 								; get sign count back
.16a1	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.16a3	f0 03		beq $16a8			beq 	_I32SNoNeg
.16a5	20 49 18	jsr $1849			jsr 	MInt32Negate
.16a8					_I32SNoNeg:
.16a8	68		pla				pla 								; restoe Y and exit
.16a9	a8		tay				tay
.16aa	60		rts				rts
.16ab					_MInt32SRemSign:
.16ab	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.16ad	10 04		bpl $16b3			bpl 	_MInt32SRSExit
.16af	c8		iny				iny 								; increment the sign count
.16b0	20 49 18	jsr $1849			jsr 	MInt32Negate 				; negate the value.
.16b3					_MInt32SRSExit:
.16b3	60		rts				rts
.16b4					MInt32UDivide:
.16b4	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.16b6	15 51		ora $51,x			ora 	esInt1+1,x
.16b8	15 52		ora $52,x			ora 	esInt1+2,x
.16ba	15 53		ora $53,x			ora 	esInt1+3,x
.16bc	f0 4a		beq $1708			beq 	_MInt32DZero
.16be	e8		inx				inx 								; clear A
.16bf	e8		inx				inx
.16c0	20 8f 18	jsr $188f			jsr 	MInt32False
.16c3	ca		dex				dex
.16c4	ca		dex				dex
.16c5	98		tya				tya 								; save Y on the stack
.16c6	48		pha				pha
.16c7	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.16c9					_MInt32UDLoop:
.16c9	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.16cb	36 50		rol $50,x			rol 	esInt1,x
.16cd	36 58		rol $58,x			rol 	esInt2,x
.16cf	36 60		rol $60,x			rol 	esInt3,x
.16d1	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.16d3	36 52		rol $52,x			rol 	esInt1+2,x
.16d5	36 5a		rol $5a,x			rol 	esInt2+2,x
.16d7	36 62		rol $62,x			rol 	esInt3+2,x
.16d9	38		sec				sec 								; calculate A-M saving result on the stack
.16da	b5 4a		lda $4a,x			lda 	esInt0+2,x
.16dc	f5 49		sbc $49,x			sbc 	esInt0+1,x
.16de	48		pha				pha
.16df	b5 52		lda $52,x			lda 	esInt1+2,x
.16e1	f5 51		sbc $51,x			sbc 	esInt1+1,x
.16e3	48		pha				pha
.16e4	b5 5a		lda $5a,x			lda 	esInt2+2,x
.16e6	f5 59		sbc $59,x			sbc 	esInt2+1,x
.16e8	48		pha				pha
.16e9	b5 62		lda $62,x			lda 	esInt3+2,x
.16eb	f5 61		sbc $61,x			sbc 	esInt3+1,x
.16ed	90 10		bcc $16ff			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.16ef	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.16f1	68		pla				pla
.16f2	95 5a		sta $5a,x			sta 	esInt2+2,x
.16f4	68		pla				pla
.16f5	95 52		sta $52,x			sta 	esInt1+2,x
.16f7	68		pla				pla
.16f8	95 4a		sta $4a,x			sta 	esInt0+2,x
.16fa	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.16fc	4c 02 17	jmp $1702			jmp 	_MInt32Next 					; do the next iteration
.16ff					_MInt32NoSubtract:
.16ff	68		pla				pla
.1700	68		pla				pla
.1701	68		pla				pla
.1702					_MInt32Next:
.1702	88		dey				dey 								; do this 32 times.
.1703	d0 c4		bne $16c9			bne 	_MInt32UDLoop
.1705	68		pla				pla 								; restore Y and exit
.1706	a8		tay				tay
.1707	60		rts				rts
.1708					_MInt32DZero:
.1708	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.170a	20 1a 19	jsr $191a			jsr 	ErrorHandler
.170d					MInt32Modulus:
.170d	20 b4 16	jsr $16b4			jsr 	MInt32UDivide 				; do the division.
.1710	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1712	95 60		sta $60,x			sta 	esInt3,x
.1714	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1716	95 58		sta $58,x			sta 	esInt2,x
.1718	b5 52		lda $52,x			lda 	esInt1+2,x
.171a	95 50		sta $50,x			sta 	esInt1,x
.171c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.171e	95 48		sta $48,x			sta 	esInt0,x
.1720	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32fromstr.asm

.1721					MInt32FromString:
.1721	85 0a		sta $0a				sta 	tempShort 					; save base
.1723	98		tya				tya
.1724	48		pha				pha
.1725	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1727	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1729	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.172b	d0 01		bne $172e			bne 	_I32FSNotNegative
.172d	c8		iny				iny 								; if so consume it.
.172e					_I32FSNotNegative:
.172e	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1730	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1732	f0 02		beq $1736			beq 	_I32FSNN2
.1734	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1736					_I32FSNN2:
.1736	48		pha				pha 								; save base + final sign on stack.
.1737	20 8f 18	jsr $188f			jsr 	MInt32False 					; zero the return value.
.173a					I32FSMainLoop:
.173a	68		pla				pla 								; get the base back into tempshort
.173b	48		pha				pha
.173c	29 7f		and #$7f			and 	#$7F
.173e	85 0a		sta $0a				sta 	tempShort
.1740	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1742	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1744	90 02		bcc $1748			bcc 	_I32FSNotLC
.1746	e9 20		sbc #$20			sbc 	#32
.1748					_I32FSNotLC:
.1748	38		sec				sec 								; subtract 48 (ASCII "0")
.1749	e9 30		sbc #$30			sbc 	#"0"
.174b	90 26		bcc $1773			bcc 	_I32FSDone 					; nothing more to do.
.174d	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.174f	90 06		bcc $1757			bcc 	_I32FSValidate
.1751	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1753	90 1e		bcc $1773			bcc 	_I32FSDone
.1755	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1757					_I32FSValidate:
.1757	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1759	b0 18		bcs $1773			bcs 	_I32FSDone 					; sorry, too large for this base.
.175b	48		pha				pha 								; save the new digit value.
.175c	e8		inx				inx 								; put base into next slot.
.175d	a5 0a		lda $0a				lda 	tempShort
.175f	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.1762	ca		dex				dex
.1763	20 b5 17	jsr $17b5			jsr 	MInt32Multiply 				; multiply current by the base
.1766	e8		inx				inx
.1767	68		pla				pla  								; put additive into next slot
.1768	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.176b	ca		dex				dex
.176c	20 81 17	jsr $1781			jsr 	MInt32Add 					; and add it
.176f	c8		iny				iny 								; look at next character
.1770	4c 3a 17	jmp $173a			jmp 	I32FSMainLoop 				; and go round again.
.1773					_I32FSDone:
.1773	68		pla				pla 								; get base/final sign back
.1774	10 04		bpl $177a			bpl 	_I32FSNN3
.1776	88		dey				dey 								; one fewer character to allow for the - prefix.
.1777	20 49 18	jsr $1849			jsr 	MInt32Negate 				; negate the result.
.177a					_I32FSNN3:
.177a	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.177c	68		pla				pla
.177d	a8		tay				tay
.177e	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1780	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32math.asm

.1781					MInt32Add:
.1781	18		clc				clc
.1782	b5 48		lda $48,x			lda 	esInt0,x
.1784	75 49		adc $49,x			adc 	esInt0+1,x
.1786	95 48		sta $48,x			sta 	esInt0,x
.1788	b5 50		lda $50,x			lda 	esInt1,x
.178a	75 51		adc $51,x			adc 	esInt1+1,x
.178c	95 50		sta $50,x			sta 	esInt1,x
.178e	b5 58		lda $58,x			lda 	esInt2,x
.1790	75 59		adc $59,x			adc 	esInt2+1,x
.1792	95 58		sta $58,x			sta 	esInt2,x
.1794	b5 60		lda $60,x			lda 	esInt3,x
.1796	75 61		adc $61,x			adc 	esInt3+1,x
.1798	95 60		sta $60,x			sta 	esInt3,x
.179a	60		rts				rts
.179b					MInt32Sub:
.179b	38		sec				sec
.179c	b5 48		lda $48,x			lda 	esInt0,x
.179e	f5 49		sbc $49,x			sbc 	esInt0+1,x
.17a0	95 48		sta $48,x			sta 	esInt0,x
.17a2	b5 50		lda $50,x			lda 	esInt1,x
.17a4	f5 51		sbc $51,x			sbc 	esInt1+1,x
.17a6	95 50		sta $50,x			sta 	esInt1,x
.17a8	b5 58		lda $58,x			lda 	esInt2,x
.17aa	f5 59		sbc $59,x			sbc 	esInt2+1,x
.17ac	95 58		sta $58,x			sta 	esInt2,x
.17ae	b5 60		lda $60,x			lda 	esInt3,x
.17b0	f5 61		sbc $61,x			sbc 	esInt3+1,x
.17b2	95 60		sta $60,x			sta 	esInt3,x
.17b4	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32multiply.asm

.17b5					MInt32Multiply:
.17b5	e8		inx				inx 								; copy 2nd -> 3rd
.17b6	20 db 17	jsr $17db			jsr 	MInt32CopyUp
.17b9	ca		dex				dex
.17ba	20 db 17	jsr $17db			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.17bd	20 8f 18	jsr $188f			jsr 	MInt32False 					; zero 1st.
.17c0					_I32Loop:
.17c0	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.17c2	29 01		and #$01			and 	#1
.17c4	f0 03		beq $17c9			beq 	_I32NoAdd 					; if set
.17c6	20 81 17	jsr $1781			jsr 	MInt32Add 					; add 2nd to 1st.
.17c9					_I32NoAdd:
.17c9	e8		inx				inx 								; shift 2nd left
.17ca	20 a4 18	jsr $18a4			jsr 	MInt32ShiftLeft
.17cd	e8		inx				inx  								; shift 3rd right
.17ce	20 ad 18	jsr $18ad			jsr 	MInt32ShiftRight
.17d1	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; check if zero.
.17d4	08		php				php 								; save status bits
.17d5	ca		dex				dex 	 							; point back to 1st
.17d6	ca		dex				dex
.17d7	28		plp				plp 								; get status bits
.17d8	d0 e6		bne $17c0			bne 	_I32Loop 					; if non-zero keep going.
.17da	60		rts				rts
.17db					MInt32CopyUp:
.17db	b5 48		lda $48,x			lda 	esInt0,x
.17dd	95 49		sta $49,x			sta 	esInt0+1,x
.17df	b5 50		lda $50,x			lda 	esInt1,x
.17e1	95 51		sta $51,x			sta 	esInt1+1,x
.17e3	b5 58		lda $58,x			lda 	esInt2,x
.17e5	95 59		sta $59,x			sta 	esInt2+1,x
.17e7	b5 60		lda $60,x			lda 	esInt3,x
.17e9	95 61		sta $61,x			sta 	esInt3+1,x
.17eb	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32tostr.asm

>086a					MCharCount:	.fill 	1						; count of converted characters
.17ec					MInt32ToString:
.17ec	48		pha				pha 								; save base
.17ed	85 0a		sta $0a				sta 	tempShort 					; save target base.
.17ef	a9 00		lda #$00			lda 	#0
.17f1	8d 6a 08	sta $086a			sta 	MCharCount 					; clear character count.
.17f4	98		tya				tya
.17f5	48		pha				pha
.17f6	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.17f8	10 10		bpl $180a			bpl 	_I32TSUnsigned
.17fa	48		pha				pha 								; save base on stack.
.17fb	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.17fd	10 08		bpl $1807			bpl 	_I32TSNoFlip
.17ff	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1801	20 36 18	jsr $1836			jsr 	MI32WriteCharacter
.1804	20 49 18	jsr $1849			jsr 	MInt32Negate 				; negate the value.
.1807					_I32TSNoFlip:
.1807	68		pla				pla 								; get the base back
.1808	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.180a					_I32TSUnsigned:
.180a	20 11 18	jsr $1811			jsr 	MI32DivideWrite 				; recursive code to output string.
.180d	68		pla				pla
.180e	a8		tay				tay
.180f	68		pla				pla
.1810	60		rts				rts
.1811					MI32DivideWrite:
.1811	48		pha				pha 								; save the divisor/base
.1812	e8		inx				inx 								; write in the dividing position.
.1813	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.1816	ca		dex				dex
.1817	20 b4 16	jsr $16b4			jsr 	MInt32UDivide 				; divide number by base.
.181a	68		pla				pla 								; get the base into Y
.181b	a8		tay				tay
.181c	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.181e	48		pha				pha
.181f	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; is the result zero ?
.1822	f0 04		beq $1828			beq 	_I32NoRecurse 				; if so, don't recurse.
.1824	98		tya				tya 								; put base into A
.1825	20 11 18	jsr $1811			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1828					_I32NoRecurse:
.1828	68		pla				pla 								; get the remainder back
.1829	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.182b	90 02		bcc $182f			bcc 	_I32NotHex
.182d	69 06		adc #$06			adc 	#7-1
.182f					_I32NotHex:
.182f	18		clc				clc 								; make it ASCII
.1830	69 30		adc #$30			adc 	#48
.1832	20 36 18	jsr $1836			jsr 	MI32WriteCharacter 			; write the character out
.1835	60		rts				rts 								; and exit.
.1836					MI32WriteCharacter:
.1836	ac 6a 08	ldy $086a			ldy 	MCharCount 					; get position
.1839	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.183b	c8		iny				iny
.183c	a9 00		lda #$00			lda 	#0
.183e	91 04		sta ($04),y			sta 	(temp0),y
.1840	ee 6a 08	inc $086a			inc 	MCharCount 					; bump count
.1843	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32unary.asm

>086b					MSeed32:	.fill 	4							; random number seed.
.1844					MInt32Absolute:
.1844	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1846	30 01		bmi $1849			bmi 	MInt32Negate
.1848	60		rts				rts
.1849					MInt32Negate:
.1849	38		sec				sec
.184a	a9 00		lda #$00			lda 	#0
.184c	f5 48		sbc $48,x			sbc 	esInt0,x
.184e	95 48		sta $48,x			sta 	esInt0,x
.1850	a9 00		lda #$00			lda 	#0
.1852	f5 50		sbc $50,x			sbc 	esInt1,x
.1854	95 50		sta $50,x			sta 	esInt1,x
.1856	a9 00		lda #$00			lda 	#0
.1858	f5 58		sbc $58,x			sbc 	esInt2,x
.185a	95 58		sta $58,x			sta 	esInt2,x
.185c	a9 00		lda #$00			lda 	#0
.185e	f5 60		sbc $60,x			sbc 	esInt3,x
.1860	95 60		sta $60,x			sta 	esInt3,x
.1862	60		rts				rts
.1863					MInt32Not:
.1863	b5 48		lda $48,x			lda 	esInt0,x
.1865	49 ff		eor #$ff			eor 	#$FF
.1867	95 48		sta $48,x			sta 	esInt0,x
.1869	b5 50		lda $50,x			lda 	esInt1,x
.186b	49 ff		eor #$ff			eor 	#$FF
.186d	95 50		sta $50,x			sta 	esInt1,x
.186f	b5 58		lda $58,x			lda 	esInt2,x
.1871	49 ff		eor #$ff			eor 	#$FF
.1873	95 58		sta $58,x			sta 	esInt2,x
.1875	b5 60		lda $60,x			lda 	esInt3,x
.1877	49 ff		eor #$ff			eor 	#$FF
.1879	95 60		sta $60,x			sta 	esInt3,x
.187b	60		rts				rts
.187c					MInt32Sign:
.187c	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.187e	30 0b		bmi $188b			bmi 	MInt32True 					; if set return -1 (true)
.1880	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; is it zero ?
.1883	f0 0a		beq $188f			beq 	MInt32False 					; if zero return 0 (false)
.1885	20 8f 18	jsr $188f			jsr 	MInt32False 					; > 0 return 1
.1888	f6 48		inc $48,x			inc 	esInt0,x
.188a	60		rts				rts
.188b					MInt32True:
.188b	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.188d	d0 02		bne $1891			bne 	MInt32WriteAll
.188f					MInt32False:
.188f	a9 00		lda #$00			lda 	#0
.1891					MInt32WriteAll:
.1891	95 48		sta $48,x			sta 	esInt0,x
.1893					MInt32Write123:
.1893	95 50		sta $50,x			sta 	esInt1,x
.1895	95 58		sta $58,x			sta 	esInt2,x
.1897	95 60		sta $60,x			sta 	esInt3,x
.1899	a9 00		lda #$00			lda 	#$00						; and make it an integer
.189b	95 40		sta $40,x			sta 	esType,x
.189d	60		rts				rts
.189e					MInt32Set8Bit:
.189e	95 48		sta $48,x			sta 	esInt0,x
.18a0	a9 00		lda #$00			lda 	#0
.18a2	f0 ef		beq $1893			beq		MInt32Write123
.18a4					MInt32ShiftLeft:
.18a4	16 48		asl $48,x			asl 	esInt0,x
.18a6	36 50		rol $50,x			rol	 	esInt1,x
.18a8	36 58		rol $58,x			rol	 	esInt2,x
.18aa	36 60		rol $60,x			rol	 	esInt3,x
.18ac	60		rts				rts
.18ad					MInt32ShiftRight:
.18ad	56 60		lsr $60,x			lsr 	esInt3,x
.18af	76 58		ror $58,x			ror 	esInt2,x
.18b1	76 50		ror $50,x			ror 	esInt1,x
.18b3	76 48		ror $48,x			ror 	esInt0,x
.18b5	60		rts				rts
.18b6					MInt32Zero:
.18b6	b5 48		lda $48,x			lda 	esInt0,x
.18b8	15 50		ora $50,x			ora 	esInt1,x
.18ba	15 58		ora $58,x			ora 	esInt2,x
.18bc	15 60		ora $60,x			ora 	esInt3,x
.18be	60		rts				rts
.18bf					MInt32Random:
.18bf	98		tya				tya
.18c0	48		pha				pha
.18c1	a0 07		ldy #$07			ldy 	#7
.18c3	ad 6b 08	lda $086b			lda 	MSeed32+0
.18c6	d0 03		bne $18cb			bne 	_Random1
.18c8	a8		tay				tay
.18c9	a9 aa		lda #$aa			lda		#$AA
.18cb					_Random1:
.18cb	0a		asl a				asl 	a
.18cc	2e 6c 08	rol $086c			rol 	MSeed32+1
.18cf	2e 6d 08	rol $086d			rol 	MSeed32+2
.18d2	2e 6e 08	rol $086e			rol 	MSeed32+3
.18d5	90 02		bcc $18d9			bcc 	_Random2
.18d7	49 c5		eor #$c5			eor 	#$C5
.18d9					_Random2:
.18d9	88		dey				dey
.18da	d0 ef		bne $18cb			bne 	_Random1
.18dc	8d 6b 08	sta $086b			sta 	MSeed32+0
.18df	95 48		sta $48,x			sta 	esInt0,x
.18e1	ad 6c 08	lda $086c			lda 	MSeed32+1
.18e4	95 50		sta $50,x			sta 	esInt1,x
.18e6	ad 6d 08	lda $086d			lda 	MSeed32+2
.18e9	95 58		sta $58,x			sta 	esInt2,x
.18eb	ad 6e 08	lda $086e			lda 	MSeed32+3
.18ee	95 60		sta $60,x			sta 	esInt3,x
.18f0	68		pla				pla
.18f1	a8		tay				tay
.18f2	a9 00		lda #$00			lda 	#0
.18f4	95 40		sta $40,x			sta 	esType,x
.18f6	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/utility/check.asm

.18f7					CheckRightParen:
.18f7	b1 02		lda ($02),y			lda 	(codePtr),y
.18f9	c8		iny				iny
.18fa	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.18fc	d0 01		bne $18ff			bne 	_CRPError
.18fe	60		rts				rts
.18ff					_CRPError:
.18ff	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.1901	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1904					CheckComma:
.1904	b1 02		lda ($02),y			lda 	(codePtr),y
.1906	c8		iny				iny
.1907	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1909	d0 01		bne $190c			bne 	_CCError
.190b	60		rts				rts
.190c					_CCError:
.190c	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.190e	20 1a 19	jsr $191a			jsr 	ErrorHandler

;******  Return to file: ..\source\main/main.asm

.1911					mainHandler:
.1911	7c 14 19	jmp ($1914,x)			jmp 	(mainVectors,x)
.1914					mainVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.asm

.1914					assemblerHandler:
.1914	7c 17 19	jmp ($1917,x)			jmp 	(assemblerVectors,x)
.1917					assemblerVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.asm

.1917					deviceHandler:
.1917	7c 1a 19	jmp ($191a,x)			jmp 	(deviceVectors,x)
.191a					deviceVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.asm


;******  Processing file: ..\source\error/errorhandler.asm

.191a					ErrorHandler:
.191a	a9 ee		lda #$ee			lda 	#$EE
.191c	a8		tay				tay
>191d	db						.byte 	$DB
.191e	4c 1e 19	jmp $191e	_EHHalt:jmp 	_EHHalt

;******  Return to file: ..\source\error/error.asm


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.asm

.1921					floatingpointHandler:
.1921	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.1923	20 1a 19	jsr $191a			jsr 	ErrorHandler

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.asm

.1926					interactionHandler:
.1926	7c 29 19	jmp ($1929,x)			jmp 	(interactionVectors,x)
.1929					interactionVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.asm


;******  Processing file: ..\source\string/compare.asm

.1929					STRCompare:
>1929	db						.byte 	$DB
.192a	4c 29 19	jmp $1929			jmp 	STRCompare

;******  Return to file: ..\source\string/string.asm


;******  Processing file: ..\source\string/concat.asm

.192d					StringConcat:
>192d	db						.byte 	$DB
.192e	80 fd		bra $192d			bra 	StringConcat

;******  Return to file: ..\source\string/string.asm

.1930					stringHandler:
.1930	7c 33 19	jmp ($1933,x)			jmp 	(stringVectors,x)
.1933					stringVectors:
>1933	2d 19					.word StringConcat         ; index 0
>1935	29 19					.word STRCompare           ; index 2

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.asm

.1937					tokeniserHandler:
.1937	7c 3a 19	jmp ($193a,x)			jmp 	(tokeniserVectors,x)
.193a					tokeniserVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.asm


;******  Processing file: ..\source\variable/access.asm

.193a					AccessVariable:
.193a	aa		tax				tax 								; stack in X
.193b	c8		iny				iny
.193c	b1 02		lda ($02),y			lda 	(codePtr),y
.193e	88		dey				dey
.193f	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1941	d0 15		bne $1958			bne 	_AVLong
.1943	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1945	38		sec				sec 	 							; make it 0-25
.1946	e9 01		sbc #$01			sbc 	#1
.1948	0a		asl a				asl 	a 							; x 4 is LSB of address
.1949	0a		asl a				asl 	a
.194a	95 48		sta $48,x			sta 	esInt0,x
.194c	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.194e	95 50		sta $50,x			sta 	esInt1,x
.1950	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1952	95 40		sta $40,x			sta 	esType,x
.1954	c8		iny				iny 								; skip over the variable reference in the code.
.1955	c8		iny				iny
.1956	8a		txa				txa 								; stack in A to return.
.1957	60		rts				rts
.1958					_AVLong:
.1958	80 fe		bra $1958			bra 	_AVLong

;******  Return to file: ..\source\variable/variable.asm

.195a					variableHandler:
.195a	7c 5d 19	jmp ($195d,x)			jmp 	(variableVectors,x)
.195d					variableVectors:
>195d	3a 19					.word AccessVariable       ; index 0

;******  Return to file: ..\source\basic.asm


;******  End of listing
