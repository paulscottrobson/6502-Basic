
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ../source/basic.asm
; Sun Feb 28 15:25:21 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ../source/basic.asm


;******  Processing file: ../source/main/01common.inc

=8					StackSize = 8
=512					retStackSize = 512
="G"					markerGOSUB = 'G'

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/02macros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.
.0868					basePage:
>0868							.fill 	2
.086a					endMemory:
>086a							.fill 	2
.086c					highMemory:
>086c							.fill 	2
.086e					lowMemory:
>086e							.fill 	2

;******  Processing file: ../source/main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$99					TOK_STRUCTST=$99
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ../source/main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/imath/intmacros.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/errorhandler.inc


;******  Processing file: ../source/error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assert
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma
=10					ErrorID_NoReference = 10 ; Missing reference
=11					ErrorID_LineNumber = 11 ; Line Number not found
=12					ErrorID_StrLen = 12 ; String too long.
=13					ErrorID_ReturnErr = 13 ; RETURN without GOSUB

;******  Return to file: ../source/error/errorhandler.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/memory.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.inc


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/main/main.asm


;******  Processing file: ../source/main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d 68 08	sta $0868			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d 69 08	sta $0869			sta 	1+(basePage)
.100d	a9 00		lda #$00			lda 	#($9800) & $FF
.100f	8d 6a 08	sta $086a			sta 	endMemory
.1012	a9 98		lda #$98			lda 	#($9800) >> 8
.1014	8d 6b 08	sta $086b			sta 	1+(endMemory)
.1017	4c 64 11	jmp $1164			jmp 	Command_Run
.1d86					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ../source/main/../generated/testcode.inc

>5000	12 0a 00 d9 b4 85 05 61			.byte 18,10,0,217,180,133,5,97,98,99,100,101,195,66,195,69,193,128,5,11,0,219,128,0
>5008	62 63 64 65 c3 42 c3 45 c1 80 05 0b 00 db 80 00

;******  Return to file: ../source/main/00start.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/assert.asm

.101a					Command_Assert:
.101a	20 98 16	jsr $1698			jsr 	EvaluateRootInteger 		; what is being asserted.
.101d	20 89 1b	jsr $1b89			jsr 	MInt32Zero 					; is it true ?
.1020	f0 01		beq $1023			beq 	_CAError
.1022	60		rts				rts
.1023					_CAError:
.1023	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.1025	20 51 1c	jsr $1c51			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/clear.asm

.1028					CommandClear:
.1028	98		tya				tya
.1029	48		pha				pha
.102a	ad 6a 08	lda $086a			lda 	endMemory					; set high memory = end of memory
.102d	8d 6c 08	sta $086c			sta 	highMemory
.1030	ad 6b 08	lda $086b			lda 	endMemory+1
.1033	8d 6d 08	sta $086d			sta 	highMemory+1
.1036	ad 68 08	lda $0868			lda 	basePage 					; work out where the program ends.
.1039	85 04		sta $04				sta 	temp0
.103b	ad 69 08	lda $0869			lda 	basePage+1
.103e	85 05		sta $05				sta 	temp0+1
.1040					_CCFindEnd:
.1040	a0 00		ldy #$00			ldy 	#0
.1042	b1 04		lda ($04),y			lda 	(temp0),y
.1044	f0 0c		beq $1052			beq 	_CCFoundEnd 				; offset zero is end.
.1046	18		clc				clc
.1047	65 04		adc $04				adc 	temp0 						; move to next line
.1049	85 04		sta $04				sta 	temp0
.104b	90 f3		bcc $1040			bcc 	_CCFindEnd
.104d	e6 05		inc $05				inc 	temp0+1
.104f	4c 40 10	jmp $1040			jmp 	_CCFindEnd
.1052					_CCFoundEnd:
.1052	a5 04		lda $04				lda 	temp0 						; put temp0 in lowMemory
.1054	8d 6e 08	sta $086e			sta 	lowMemory
.1057	a5 05		lda $05				lda 	temp0+1
.1059	8d 6f 08	sta $086f			sta 	lowMemory+1
.105c	a9 04		lda #$04			lda 	#4 							; skip low free memory clear, leave a gap.
.105e	20 67 10	jsr $1067			jsr 	AdvanceLowMemoryByte		; need at least one here, to skip the end of program zero offset.
.1061	20 ca 1b	jsr $1bca			jsr 	RSReset 					; reset the return stack.
.1064	68		pla				pla
.1065	a8		tay				tay
.1066	60		rts				rts
.1067					AdvanceLowMemoryByte:
.1067	18		clc				clc
.1068	6d 6e 08	adc $086e			adc 	lowMemory
.106b	8d 6e 08	sta $086e			sta 	lowMemory
.106e	90 03		bcc $1073			bcc 	_ALMBExit
.1070	ee 6f 08	inc $086f			inc 	lowMemory+1
.1073					_ALMBExit:
.1073	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/if.asm

.1074					CommandIf:
.1074	20 98 16	jsr $1698			jsr 	EvaluateRootInteger 		; if what ?
.1077	b1 02		lda ($02),y			lda 	(codePtr),y 				; check for IF .. THEN or IF .. GOTO which are single lines.
.1079	c9 d6		cmp #$d6			cmp 	#TKW_GOTO
.107b	f0 04		beq $1081			beq 	_IfSimple
.107d	c9 a0		cmp #$a0			cmp 	#TKW_THEN
.107f	d0 13		bne $1094			bne 	_IfComplex
.1081					_IfSimple:
.1081	20 89 1b	jsr $1b89			jsr 	MInt32Zero					; check if TOS zero
.1084	f0 08		beq $108e			beq 	_IfEOL 						; go to next line.
.1086	b1 02		lda ($02),y			lda 	(codePtr),y 				; get and skip token.
.1088	c8		iny				iny
.1089	c9 d6		cmp #$d6			cmp 	#TKW_GOTO 					; is it GOTO ?
.108b	f0 04		beq $1091			beq 	_IfGoto 					; do the Goto code
.108d	60		rts				rts 								; else continue on this line.
.108e					_IfEOL:
.108e	4c b6 12	jmp $12b6			jmp 	AdvanceNextLine 			; go to next line
.1091					_IfGoto:
.1091	4c f5 12	jmp $12f5			jmp 	CommandGoto
.1094					_IfComplex:
.1094	4c d3 11	jmp $11d3			jmp 	Unimplemented

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/let.asm

.1097					CommandLet:
.1097	a2 00		ldx #$00			ldx 	#0  						; get address to write.
.1099	20 c7 16	jsr $16c7			jsr 	EvaluateReference
.109c	a9 8d		lda #$8d			lda 	#TKW_EQUAL 					; check for equals
.109e	20 1d 1c	jsr $1c1d			jsr 	CheckToken
.10a1	e8		inx				inx 								; do RHS
.10a2	20 7b 16	jsr $167b			jsr 	Evaluate 					; evaluate and derefernce
.10a5	ca		dex				dex
.10a6	20 aa 10	jsr $10aa			jsr 	WriteValue 					; write it out
.10a9	60		rts				rts
.10aa					WriteValue:
.10aa	98		tya				tya
.10ab	48		pha				pha
.10ac	20 03 11	jsr $1103			jsr 	WVSetTemp0 					; set temp0 to point to target address.
.10af	b5 40		lda $40,x			lda 	esType,x 					; check the string/integer flags match
.10b1	55 41		eor $41,x			eor 	esType+1,x
.10b3	29 40		and #$40			and 	#$40
.10b5	d0 47		bne $10fe			bne		_WVType
.10b7	a0 01		ldy #$01			ldy 	#1 							; for string, copy 0 and 1.
.10b9	b5 40		lda $40,x			lda 	esType,x 					; check for string assignment
.10bb	29 40		and #$40			and 	#$40
.10bd	d0 30		bne $10ef			bne 	_WVCopyData2
.10bf	b5 40		lda $40,x			lda 	esType,x 					; check both are integer.
.10c1	15 41		ora $41,x			ora 	esType+1,x
.10c3	4a		lsr a				lsr 	a
.10c4	90 18		bcc $10de			bcc 	_WVCopyData4
.10c6	b5 40		lda $40,x			lda 	esType,x
.10c8	4a		lsr a				lsr 	a
.10c9	90 33		bcc $10fe			bcc 	_WVType
.10cb	e8		inx				inx 								; force the value being written to be a float.
.10cc	20 46 13	jsr $1346			jsr 	BPMakeFloat
.10cf	ca		dex				dex
.10d0	20 03 11	jsr $1103			jsr 	WVSetTemp0 					; set Temp0 to write address
.10d3	e8		inx				inx
.10d4	8a		txa				txa
.10d5	a2 1c		ldx #$1c		ldx	#28
.10d7	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.10da	aa		tax				tax
.10db	4c fb 10	jmp $10fb			jmp 	_WVCopyExit
.10de					_WVCopyData4:
.10de	b5 40		lda $40,x			lda 	esType,x 					; is the int ref a byte ref ?
.10e0	29 20		and #$20			and 	#$20
.10e2	d0 11		bne $10f5			bne 	_WVCopyData1
.10e4	a0 03		ldy #$03			ldy 	#3
.10e6	b5 61		lda $61,x			lda 	esInt3+1,x
.10e8	91 04		sta ($04),y			sta 	(temp0),y
.10ea	88		dey				dey
.10eb	b5 59		lda $59,x			lda 	esInt2+1,x
.10ed	91 04		sta ($04),y			sta 	(temp0),y
.10ef					_WVCopyData2:
.10ef	a0 01		ldy #$01			ldy 	#1
.10f1	b5 51		lda $51,x			lda 	esInt1+1,x
.10f3	91 04		sta ($04),y			sta 	(temp0),y
.10f5					_WVCopyData1:
.10f5	a0 00		ldy #$00			ldy 	#0
.10f7	b5 49		lda $49,x			lda 	esInt0+1,x
.10f9	91 04		sta ($04),y			sta 	(temp0),y
.10fb					_WVCopyExit:
.10fb	68		pla				pla
.10fc	a8		tay				tay
.10fd	60		rts				rts
.10fe					_WVType:
.10fe	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1100	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.1103					WVSetTemp0:
.1103	b5 48		lda $48,x			lda 	esInt0,x
.1105	85 04		sta $04				sta 	temp0
.1107	b5 50		lda $50,x			lda 	esInt1,x
.1109	85 05		sta $05				sta 	temp0+1
.110b	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/new.asm

.110c					Command_New:
.110c	20 c6 11	jsr $11c6			jsr 	ResetCodeAddress 			; point to first line
.110f	a0 00		ldy #$00			ldy 	#0 							; and zap it.
.1111	98		tya				tya
.1112	91 02		sta ($02),y			sta 	(codePtr),y
.1114	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything down.
.1117	4c b3 12	jmp $12b3			jmp 	CommandEND 					; do END code, as there's nothing to run.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/poke.asm

.111a					Command_Poke:
.111a	a9 01		lda #$01			lda 	#1
.111c	d0 06		bne $1124			bne 	PokeGeneral
.111e					Command_Doke:
.111e	a9 02		lda #$02			lda 	#2
.1120	d0 02		bne $1124			bne 	PokeGeneral
.1122					Command_Loke:
.1122	a9 03		lda #$03			lda 	#3
.1124					PokeGeneral:
.1124	48		pha				pha 								; save size
.1125	20 98 16	jsr $1698			jsr 	EvaluateRootInteger 		; target address
.1128	20 35 1c	jsr $1c35			jsr	 	CheckComma
.112b	e8		inx				inx
.112c	20 9a 16	jsr $169a			jsr 	EvaluateInteger 			; what value to POKE ?
.112f	ca		dex				dex
.1130	20 03 11	jsr $1103			jsr 	WVSetTemp0 					; temp0 points to the target address
.1133	84 0a		sty $0a				sty 	tempShort 					; save Y
.1135	68		pla				pla 								; get copy type and dispatch
.1136	aa		tax				tax
.1137	ca		dex				dex
.1138	f0 14		beq $114e			beq 	_Poke1
.113a	ca		dex				dex
.113b	f0 0b		beq $1148			beq 	_Poke2
.113d	a0 03		ldy #$03			ldy 	#3
.113f	a5 61		lda $61				lda 	esInt3+1
.1141	91 04		sta ($04),y			sta 	(temp0),y
.1143	88		dey				dey
.1144	a5 59		lda $59				lda 	esInt2+1
.1146	91 04		sta ($04),y			sta 	(temp0),y
.1148					_Poke2:
.1148	a0 01		ldy #$01			ldy 	#1
.114a	a5 51		lda $51				lda 	esInt1+1
.114c	91 04		sta ($04),y			sta 	(temp0),y
.114e					_Poke1:
.114e	a0 00		ldy #$00			ldy 	#0
.1150	a5 49		lda $49				lda 	esInt0+1
.1152	91 04		sta ($04),y			sta 	(temp0),y
.1154	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1156	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/rem.asm

.1157					Command_Rem:
.1157					Command_Rem2:
.1157	b1 02		lda ($02),y			lda 	(codePtr),y 				; what follows
.1159	c9 85		cmp #$85			cmp 	#TOK_STR 					; if it is a string then skip it.
.115b	d0 06		bne $1163			bne 	_CRNotString
.115d	c8		iny				iny
.115e	98		tya				tya
.115f	38		sec				sec
.1160	71 02		adc ($02),y			adc 	(codePtr),y 				; get string size, add to Y, +1 for the length
.1162	a8		tay				tay
.1163					_CRNotString:
.1163	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/run.asm

.1164					Command_Run:
.1164	a2 ff		ldx #$ff			ldx 	#$FF
.1166	9a		txs				txs
.1167	20 28 10	jsr $1028			jsr 	CommandClear 				; clear everything.
.116a	20 c6 11	jsr $11c6			jsr 	ResetCodeAddress
.116d	a0 03		ldy #$03			ldy 	#3
.116f					CRNextInstruction:
.116f	64 7b		stz $7b				stz 	softMemAlloc+1
.1171	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1173	10 1c		bpl $1191			bpl 	_CRNotToken
.1175	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.1177	b0 0c		bcs $1185			bcs 	_CRExecute
.1179	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; unary is ignored.
.117b	b0 56		bcs $11d3			bcs 	Unimplemented
.117d	c9 99		cmp #$99			cmp 	#TOK_STRUCTST 				; execute structures.
.117f	b0 04		bcs $1185			bcs 	_CRExecute
.1181	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1183	b0 16		bcs $119b			bcs 	_CRCheckIndirect 			; if in that unused range check for ! or ?
.1185					_CRExecute:
.1185	c8		iny				iny 								; consume it.
.1186	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1187	aa		tax				tax
.1188	20 8e 11	jsr $118e			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.118b	4c 6f 11	jmp $116f			jmp 	CRNextInstruction
.118e					_CRRunRoutine:
.118e	7c dc 11	jmp ($11dc,x)			jmp 	(Group0Vectors,x)
.1191					_CRNotToken:
.1191	c9 40		cmp #$40			cmp 	#$40 						; if 0-3F then it is a letter
.1193	b0 3e		bcs $11d3			bcs 	Unimplemented
.1195					_CRDefaultLet:
.1195	20 97 10	jsr $1097			jsr 	CommandLet 					; do the default, LET
.1198	4c 6f 11	jmp $116f			jmp 	CRNextInstruction
.119b					_CRCheckIndirect:
.119b	c9 97		cmp #$97			cmp 	#TKW_PLING 					; !<term> =
.119d	f0 f6		beq $1195			beq 	_CRDefaultLet
.119f	c9 98		cmp #$98			cmp 	#TKW_QMARK 					; ?<term> =
.11a1	f0 f2		beq $1195			beq 	_CRDefaultLet
.11a3	d0 2e		bne $11d3			bne 	Unimplemented
.11a5					CommandShift1:
.11a5	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.11a7	10 2a		bpl $11d3			bpl 	Unimplemented 				; we have an error as this should not happen.
.11a9	0a		asl a				asl 	a 							; double into X
.11aa	aa		tax				tax
.11ab	c8		iny				iny 								; advance over it.
.11ac	20 b2 11	jsr $11b2			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.11af	4c 6f 11	jmp $116f			jmp 	CRNextInstruction
.11b2					_RunIt:
.11b2	7c 90 12	jmp ($1290,x)			jmp 	(Group1Vectors-6*2,x) 					; and do the code.
.11b5					CommandShift2:
.11b5	b1 02		lda ($02),y			lda 	(codePtr),y 				; get shifted value
.11b7	10 1a		bpl $11d3			bpl 	Unimplemented 				; we have an error as this should not happen.
.11b9	0a		asl a				asl 	a 							; double into X
.11ba	aa		tax				tax
.11bb	c8		iny				iny 								; advance over it.
.11bc	20 c2 11	jsr $11c2			jsr 	_RunIt 						; we have no jsr (aaaa,X)
.11bf	4c 6f 11	jmp $116f			jmp 	CRNextInstruction
.11c2					_RunIt:
.11c2	7c a0 12	jmp ($12a0,x)			jmp 	(Group2Vectors-6*2,x) 					; and do the code.
.11c5					CommandColon:
.11c5	60		rts				rts
.11c6					ResetCodeAddress:
.11c6	ad 68 08	lda $0868			lda 	basePage 					; copy basePage to code Pointer
.11c9	85 02		sta $02				sta 	codePtr
.11cb	ad 69 08	lda $0869			lda 	basePage+1
.11ce	85 03		sta $03				sta 	codePtr+1
.11d0	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.11d2	60		rts				rts
.11d3					Unimplemented:
>11d3	db						.byte 	$DB
.11d4	4c d3 11	jmp $11d3			jmp 	Unimplemented
.11d7					TKErr01:
.11d7					TKErr02:
.11d7					TKErr03:
.11d7					TKErr04:
.11d7					TKErr05:
.11d7					TKErr06:
.11d7					TKErr07:
.11d7					TKErr08:
.11d7	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.11d9	20 51 1c	jsr $1c51			jsr 	ErrorHandler

;******  Processing file: ../source/main/commands/../../generated/tokenvectors0.inc

.11dc					Group0Vectors:
>11dc	b6 12					.word	AdvanceNextLine          ; $80 [[eol]]
>11de	a5 11					.word	CommandShift1            ; $81 [[sh1]]
>11e0	b5 11					.word	CommandShift2            ; $82 [[sh2]]
>11e2	d3 11					.word	Unimplemented            ; $83 [[sh3]]
>11e4	d3 11					.word	Unimplemented            ; $84 [[fpc]]
>11e6	d7 11					.word	TKErr08                  ; $85 [[str]]
>11e8	e8 13					.word	AndHandler               ; $86 and
>11ea	d5 13					.word	OrHandler                ; $87 or
>11ec	c2 13					.word	XorHandler               ; $88 xor
>11ee	0a 15					.word	CompareGreaterEq         ; $89 >=
>11f0	14 15					.word	CompareLessEq            ; $8a <=
>11f2	f6 14					.word	CompareGreater           ; $8b >
>11f4	ec 14					.word	CompareLess              ; $8c <
>11f6	e2 14					.word	CompareEquals            ; $8d =
>11f8	00 15					.word	CompareNotEquals         ; $8e <>
>11fa	53 13					.word	AddHandler               ; $8f +
>11fc	76 13					.word	SubHandler               ; $90 -
>11fe	0e 14					.word	ShrHandler               ; $91 >>
>1200	fb 13					.word	ShlHandler               ; $92 <<
>1202	89 13					.word	MulHandler               ; $93 *
>1204	9c 13					.word	DivHandler               ; $94 /
>1206	af 13					.word	ModHandler               ; $95 mod
>1208	47 14					.word	PowerHandler             ; $96 ^
>120a	21 14					.word	WordRefHandler           ; $97 !
>120c	34 14					.word	ByteRefHandler           ; $98 ?
>120e	d3 11					.word	Unimplemented            ; $99 repeat
>1210	d3 11					.word	Unimplemented            ; $9a while
>1212	d3 11					.word	Unimplemented            ; $9b for
>1214	74 10					.word	CommandIf                ; $9c if
>1216	d3 11					.word	Unimplemented            ; $9d until
>1218	d3 11					.word	Unimplemented            ; $9e wend
>121a	d3 11					.word	Unimplemented            ; $9f next
>121c	d7 11					.word	TKErr06                  ; $a0 then
>121e	d3 11					.word	Unimplemented            ; $a1 endif
>1220	51 16					.word	UnaryParenthesis         ; $a2 (
>1222	24 17					.word	UnaryLen                 ; $a3 len(
>1224	68 17					.word	UnarySgn                 ; $a4 sgn(
>1226	51 17					.word	UnaryAbs                 ; $a5 abs(
>1228	c1 17					.word	Unary_Random             ; $a6 random(
>122a	0b 18					.word	Unary_Page               ; $a7 page
>122c	5e 1b					.word	MInt32True               ; $a8 true
>122e	62 1b					.word	MInt32False              ; $a9 false
>1230	d6 17					.word	Unary_Min                ; $aa min(
>1232	da 17					.word	Unary_Max                ; $ab max(
>1234	d3 11					.word	Unimplemented            ; $ac sys(
>1236	d3 11					.word	Unimplemented            ; $ad timer(
>1238	d3 11					.word	Unimplemented            ; $ae event(
>123a	d3 11					.word	Unimplemented            ; $af get(
>123c	d3 11					.word	Unimplemented            ; $b0 inkey(
>123e	d3 11					.word	Unimplemented            ; $b1 alloc(
>1240	58 18					.word	ExecChr                  ; $b2 chr$(
>1242	6c 18					.word	ExecLeft                 ; $b3 left$(
>1244	89 18					.word	ExecMid                  ; $b4 mid$(
>1246	b1 18					.word	ExecRight                ; $b5 right$(
>1248	d3 11					.word	Unimplemented            ; $b6 str$(
>124a	d3 11					.word	Unimplemented            ; $b7 val(
>124c	7f 17					.word	UnaryPeek                ; $b8 peek(
>124e	85 17					.word	UnaryDeek                ; $b9 deek(
>1250	8b 17					.word	UnaryLeek                ; $ba leek(
>1252	42 17					.word	UnaryAsc                 ; $bb asc(
>1254	36 18					.word	UnaryIntToFloat          ; $bc int(
>1256	49 18					.word	UnaryFloatToInt          ; $bd float(
>1258	19 18					.word	UnaryReference           ; $be @
>125a	2f 18					.word	UnaryComplement          ; $bf ~
>125c	2c 18					.word	UnaryHexMarker           ; $c0 &
>125e	d7 11					.word	TKErr01                  ; $c1 )
>1260	c5 11					.word	CommandColon             ; $c2 :
>1262	d7 11					.word	TKErr02                  ; $c3 ,
>1264	d7 11					.word	TKErr03                  ; $c4 ;
>1266	d3 11					.word	Unimplemented            ; $c5 ]
>1268	d7 11					.word	TKErr07                  ; $c6 to
>126a	d7 11					.word	TKErr05                  ; $c7 step
>126c	d7 11					.word	TKErr04                  ; $c8 proc
>126e	d3 11					.word	Unimplemented            ; $c9 endproc
>1270	d3 11					.word	Unimplemented            ; $ca local
>1272	57 11					.word	Command_Rem              ; $cb rem
>1274	97 10					.word	CommandLet               ; $cc let
>1276	57 11					.word	Command_Rem2             ; $cd '
>1278	d3 11					.word	Unimplemented            ; $ce [
>127a	d3 11					.word	Unimplemented            ; $cf input
>127c	d3 11					.word	Unimplemented            ; $d0 else
>127e	d3 11					.word	Unimplemented            ; $d1 vdu
>1280	d3 11					.word	Unimplemented            ; $d2 read
>1282	d3 11					.word	Unimplemented            ; $d3 data
>1284	d3 11					.word	Unimplemented            ; $d4 restore
>1286	d3 11					.word	Unimplemented            ; $d5 print
>1288	f5 12					.word	CommandGOTO              ; $d6 goto
>128a	ca 12					.word	CommandGOSUB             ; $d7 gosub
>128c	dd 12					.word	CommandRETURN            ; $d8 return
>128e	1a 10					.word	Command_Assert           ; $d9 assert
>1290	ae 12					.word	CommandStop              ; $da stop
>1292	b3 12					.word	CommandEnd               ; $db end
>1294	d3 11					.word	Unimplemented            ; $dc dim
>1296	1a 11					.word	Command_Poke             ; $dd poke
>1298	1e 11					.word	Command_Doke             ; $de doke
>129a	22 11					.word	Command_Loke             ; $df loke

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors1.inc

.129c					Group1Vectors:
>129c	28 10					.word	CommandClear             ; $86 clear
>129e	d3 11					.word	Unimplemented            ; $87 load
>12a0	d3 11					.word	Unimplemented            ; $88 save
>12a2	d3 11					.word	Unimplemented            ; $89 list
>12a4	0c 11					.word	Command_New              ; $8a new
>12a6	64 11					.word	Command_Run              ; $8b run
>12a8	d3 11					.word	Unimplemented            ; $8c code
>12aa	d3 11					.word	Unimplemented            ; $8d option

;******  Return to file: ../source/main/commands/run.asm


;******  Processing file: ../source/main/commands/../../generated/tokenvectors2.inc

.12ac					Group2Vectors:
>12ac	d3 11					.word	Unimplemented            ; $86 vpoke

;******  Return to file: ../source/main/commands/run.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/stopend.asm

.12ae					CommandStop:
.12ae	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.12b0	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.12b3					CommandEnd:
.12b3	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.12b6					AdvanceNextLine:
.12b6	a0 00		ldy #$00			ldy 	#0 							; get offset
.12b8	b1 02		lda ($02),y			lda 	(codePtr),y
.12ba	18		clc				clc 								; add to codePtr
.12bb	65 02		adc $02				adc 	codePtr
.12bd	85 02		sta $02				sta 	codePtr
.12bf	90 02		bcc $12c3			bcc 	_ANLNoCarry
.12c1	e6 03		inc $03				inc 	codePtr+1
.12c3					_ANLNoCarry:
.12c3	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.12c5	f0 ec		beq $12b3			beq 	CommandEnd 					; execute END
.12c7	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.12c9	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/commands/transfer.asm

.12ca					CommandGOSUB:
.12ca	20 98 16	jsr $1698			jsr 	EvaluateRootInteger			; get GOSUB line on stack top.
.12cd	a2 04		ldx #$04			ldx 	#4 							; allocate 4 bytes on stack for GOSUB
.12cf	a9 47		lda #$47			lda 	#markerGOSUB  				; <marker> <return addr/offset>
.12d1	20 d8 1b	jsr $1bd8			jsr 	RSClaim
.12d4	a9 01		lda #$01			lda 	#1 							; save position at offset 1.
.12d6	20 fb 1b	jsr $1bfb			jsr 	RSSavePosition
.12d9	a2 00		ldx #$00			ldx 	#0 							; point back at GOSUB line
.12db	f0 1b		beq $12f8			beq 	GotoTOS 					; and do a GOTO there.
.12dd					CommandRETURN:
.12dd	a2 00		ldx #$00			ldx 	#0 							; get TOS return stack
.12df	a1 78		lda ($78,x)			lda 	(rsPointer,x)
.12e1	c9 47		cmp #$47			cmp 	#markerGOSUB 						; does it match
.12e3	f0 05		beq $12ea			beq 	_isok
.12e5	a2 0d		ldx #$0d			ldx 	#ErrorID_returnErr
.12e7	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.12ea					_isok:
.12ea	a9 01		lda #$01			lda 	#1
.12ec	20 0e 1c	jsr $1c0e			jsr 	RSLoadPosition 				; reload the position from offset 1.
.12ef	a9 04		lda #$04			lda 	#4 							; throw 4 bytes from stack.
.12f1	20 f1 1b	jsr $1bf1			jsr 	RSFree
.12f4	60		rts				rts
.12f5					CommandGOTO:
.12f5	20 98 16	jsr $1698			jsr 	EvaluateRootInteger 		; get GOTO line on stack top.
.12f8					GotoTOS:
.12f8	20 c6 11	jsr $11c6			jsr 	ResetCodeAddress 			; simple search.
.12fb					_GotoSearch:
.12fb	a0 00		ldy #$00			ldy 	#0 							; get offset
.12fd	b1 02		lda ($02),y			lda 	(codePtr),y
.12ff	f0 21		beq $1322			beq 	_GotoError 					; not found.
.1301	c8		iny				iny									; check LSB match
.1302	b1 02		lda ($02),y			lda 	(codePtr),y
.1304	d5 48		cmp $48,x			cmp 	esInt0,x
.1306	d0 07		bne $130f			bne 	_GotoNext
.1308	c8		iny				iny
.1309	b1 02		lda ($02),y			lda 	(codePtr),y
.130b	d5 50		cmp $50,x			cmp 	esInt1,x
.130d	f0 10		beq $131f			beq 	_GotoFound
.130f					_GotoNext:
.130f	a0 00		ldy #$00			ldy 	#0 							; go next line
.1311	b1 02		lda ($02),y			lda 	(codePtr),y
.1313	18		clc				clc
.1314	65 02		adc $02				adc 	codePtr
.1316	85 02		sta $02				sta 	codePtr
.1318	90 e1		bcc $12fb			bcc 	_GotoSearch
.131a	e6 03		inc $03				inc 	codePtr+1
.131c	4c fb 12	jmp $12fb			jmp 	_GotoSearch
.131f					_GotoFound:
.131f	a0 03		ldy #$03			ldy 	#3 							; continue from that line
.1321	60		rts				rts
.1322					_GotoError:
.1322	a2 0b		ldx #$0b			ldx 	#ErrorID_LineNumber
.1324	20 51 1c	jsr $1c51			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/binary.asm

.1327					BinaryProcess:
.1327	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.1329	15 41		ora $41,x			ora 	esType+1,x
.132b	0a		asl a				asl 	a
.132c	30 0e		bmi $133c			bmi 	_BPStringType 				; if one is set, then string type.
.132e	18		clc				clc 								; return CC for integer
.132f	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1331	f0 08		beq $133b			beq 	_BPExit 					; if both integer then return with CC.
.1333	20 41 13	jsr $1341			jsr 	BPMakeBothFloat 			; make both float
.1336	a9 01		lda #$01			lda 	#$01 						; set result type to float
.1338	95 40		sta $40,x			sta 	esType,x
.133a	38		sec				sec 								; and return with carry set.
.133b					_BPExit:
.133b	60		rts				rts
.133c					_BPStringType:
.133c	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.133e	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.1341					BPMakeBothFloat:
.1341	e8		inx				inx
.1342	20 46 13	jsr $1346			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.1345	ca		dex				dex
.1346					BPMakeFloat:
.1346	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.1348	4a		lsr a				lsr 	a
.1349	b0 07		bcs $1352			bcs 	_BPIsFloat
.134b	8a		txa				txa
.134c	a2 18		ldx #$18		ldx	#24
.134e	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1351	aa		tax				tax
.1352					_BPIsFloat:
.1352	60		rts				rts
.1353					AddHandler:
.1353	20 24 15	jsr $1524			jsr 	DereferenceTwo 				; dereference top two on stack.
.1356	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.1358	35 41		and $41,x			and 	esType+1,x
.135a	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.135c	d0 10		bne $136e			bne 	_AHStringConcat				; concatenate strings.
.135e	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.1361	b0 03		bcs $1366			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1363	4c 54 1a	jmp $1a54			jmp 	MInt32Add 							; else do it as integer.
.1366					_IsFPOperation:
.1366	8a		txa				txa 								; call the relevant fp routine
.1367	a2 02		ldx #$02		ldx	#2
.1369	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.136c	aa		tax				tax
.136d	60		rts				rts
.136e					_AHStringConcat:
.136e	8a		txa				txa
.136f	a2 02		ldx #$02		ldx	#2
.1371	20 53 1d	jsr $1d53		jsr	stringHandler
.1374	aa		tax				tax
.1375	60		rts				rts
.1376					SubHandler:
.1376	20 24 15	jsr $1524			jsr 	DereferenceTwo
.1379	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.137c	b0 03		bcs $1381			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.137e	4c 6e 1a	jmp $1a6e			jmp 	MInt32Sub 							; else do it as integer.
.1381					_IsFPOperation:
.1381	8a		txa				txa 								; call the relevant fp routine
.1382	a2 10		ldx #$10		ldx	#16
.1384	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1387	aa		tax				tax
.1388	60		rts				rts
.1389					MulHandler:
.1389	20 24 15	jsr $1524			jsr 	DereferenceTwo
.138c	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.138f	b0 03		bcs $1394			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1391	4c 88 1a	jmp $1a88			jmp 	MInt32Multiply 							; else do it as integer.
.1394					_IsFPOperation:
.1394	8a		txa				txa 								; call the relevant fp routine
.1395	a2 0a		ldx #$0a		ldx	#10
.1397	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.139a	aa		tax				tax
.139b	60		rts				rts
.139c					DivHandler:
.139c	20 24 15	jsr $1524			jsr 	DereferenceTwo
.139f	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.13a2	b0 03		bcs $13a7			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.13a4	4c 62 19	jmp $1962			jmp 	MInt32SDivide 							; else do it as integer.
.13a7					_IsFPOperation:
.13a7	8a		txa				txa 								; call the relevant fp routine
.13a8	a2 06		ldx #$06		ldx	#6
.13aa	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.13ad	aa		tax				tax
.13ae	60		rts				rts
.13af					ModHandler:
.13af	20 24 15	jsr $1524			jsr 	DereferenceTwo
.13b2	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.13b5	b0 03		bcs $13ba			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.13b7	4c e0 19	jmp $19e0			jmp 	MInt32Modulus 							; else do it as integer.
.13ba					_IsFPOperation:
.13ba	8a		txa				txa 								; call the relevant fp routine
.13bb	a2 08		ldx #$08		ldx	#8
.13bd	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.13c0	aa		tax				tax
.13c1	60		rts				rts
.13c2					XorHandler:
.13c2	20 24 15	jsr $1524			jsr 	DereferenceTwo
.13c5	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.13c8	b0 03		bcs $13cd			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.13ca	4c 14 19	jmp $1914			jmp 	MInt32Xor 							; else do it as integer.
.13cd					_IsFPOperation:
.13cd	8a		txa				txa 								; call the relevant fp routine
.13ce	a2 08		ldx #$08		ldx	#8
.13d0	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.13d3	aa		tax				tax
.13d4	60		rts				rts
.13d5					OrHandler:
.13d5	20 24 15	jsr $1524			jsr 	DereferenceTwo
.13d8	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.13db	b0 03		bcs $13e0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.13dd	4c fb 18	jmp $18fb			jmp 	MInt32Or 							; else do it as integer.
.13e0					_IsFPOperation:
.13e0	8a		txa				txa 								; call the relevant fp routine
.13e1	a2 08		ldx #$08		ldx	#8
.13e3	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.13e6	aa		tax				tax
.13e7	60		rts				rts
.13e8					AndHandler:
.13e8	20 24 15	jsr $1524			jsr 	DereferenceTwo
.13eb	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.13ee	b0 03		bcs $13f3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.13f0	4c e2 18	jmp $18e2			jmp 	MInt32And 							; else do it as integer.
.13f3					_IsFPOperation:
.13f3	8a		txa				txa 								; call the relevant fp routine
.13f4	a2 08		ldx #$08		ldx	#8
.13f6	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.13f9	aa		tax				tax
.13fa	60		rts				rts
.13fb					ShlHandler:
.13fb	20 24 15	jsr $1524			jsr 	DereferenceTwo
.13fe	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.1401	b0 03		bcs $1406			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1403	4c 7c 14	jmp $147c			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.1406					_IsFPOperation:
.1406	8a		txa				txa 								; call the relevant fp routine
.1407	a2 08		ldx #$08		ldx	#8
.1409	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.140c	aa		tax				tax
.140d	60		rts				rts
.140e					ShrHandler:
.140e	20 24 15	jsr $1524			jsr 	DereferenceTwo
.1411	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.1414	b0 03		bcs $1419			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1416	4c 7f 14	jmp $147f			jmp 	MInt32ShiftRightX 							; else do it as integer.
.1419					_IsFPOperation:
.1419	8a		txa				txa 								; call the relevant fp routine
.141a	a2 08		ldx #$08		ldx	#8
.141c	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.141f	aa		tax				tax
.1420	60		rts				rts
.1421					WordRefHandler:
.1421	20 24 15	jsr $1524			jsr 	DereferenceTwo
.1424	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.1427	b0 03		bcs $142c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1429	4c 6e 14	jmp $146e			jmp 	MInt32WordIndirect 							; else do it as integer.
.142c					_IsFPOperation:
.142c	8a		txa				txa 								; call the relevant fp routine
.142d	a2 08		ldx #$08		ldx	#8
.142f	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1432	aa		tax				tax
.1433	60		rts				rts
.1434					ByteRefHandler:
.1434	20 24 15	jsr $1524			jsr 	DereferenceTwo
.1437	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.143a	b0 03		bcs $143f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.143c	4c 72 14	jmp $1472			jmp 	MInt32ByteIndirect 							; else do it as integer.
.143f					_IsFPOperation:
.143f	8a		txa				txa 								; call the relevant fp routine
.1440	a2 08		ldx #$08		ldx	#8
.1442	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1445	aa		tax				tax
.1446	60		rts				rts
.1447					PowerHandler:
.1447	20 24 15	jsr $1524			jsr 	DereferenceTwo
.144a	20 27 13	jsr $1327			jsr 	BinaryProcess 				; check to see if either is float
.144d	b0 03		bcs $1452			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.144f	4c 5a 14	jmp $145a			jmp 	PowerInteger 							; else do it as integer.
.1452					_IsFPOperation:
.1452	8a		txa				txa 								; call the relevant fp routine
.1453	a2 14		ldx #$14		ldx	#20
.1455	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1458	aa		tax				tax
.1459	60		rts				rts
.145a					PowerInteger:
.145a	20 41 13	jsr $1341			jsr 	BPMakeBothFloat				; make them float.
.145d	8a		txa				txa
.145e	a2 14		ldx #$14		ldx	#20
.1460	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1463	a2 12		ldx #$12		ldx	#18
.1465	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1468	aa		tax				tax
.1469	a9 00		lda #$00			lda 	#0 							; make type integer
.146b	95 40		sta $40,x			sta 	esType,x
.146d	60		rts				rts
.146e					Mint32WordIndirect:
.146e	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1470	d0 02		bne $1474			bne 	Min32Indirect
.1472					Mint32ByteIndirect:
.1472	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.1474					Min32Indirect:
.1474	48		pha				pha 								; save the indirection
.1475	20 54 1a	jsr $1a54			jsr 	MInt32Add 					; add a!b a?b
.1478	68		pla				pla 								; and set the type to reference.
.1479	95 40		sta $40,x			sta 	esType,x
.147b	60		rts				rts
.147c					Mint32ShiftLeftX:
.147c	18		clc				clc
.147d	90 01		bcc $1480			bcc 	Mint32Shift
.147f					Mint32ShiftRightX:
.147f	38		sec				sec
.1480					Mint32Shift:
.1480	08		php				php 								; save carry flag on stack.
.1481	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1483	15 59		ora $59,x			ora 	esInt2+1,x
.1485	15 61		ora $61,x			ora 	esInt3+1,x
.1487	d0 1e		bne $14a7			bne 	_MShiftZero
.1489	b5 49		lda $49,x			lda 	esInt0+1,x
.148b	c9 20		cmp #$20			cmp 	#32
.148d	b0 18		bcs $14a7			bcs 	_MShiftZero
.148f					_MShiftLoop:
.148f	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1491	f0 12		beq $14a5			beq 	_MShiftExit
.1493	d6 49		dec $49,x			dec 	esInt0+1,x
.1495	28		plp				plp 								; restore and save carry
.1496	08		php				php
.1497	90 06		bcc $149f			bcc 	_MShiftLeft
.1499	20 80 1b	jsr $1b80			jsr 	Mint32ShiftRight
.149c	4c 8f 14	jmp $148f			jmp 	_MShiftLoop
.149f					_MShiftLeft:
.149f	20 77 1b	jsr $1b77			jsr 	Mint32ShiftLeft
.14a2	4c 8f 14	jmp $148f			jmp 	_MShiftLoop
.14a5					_MShiftExit:
.14a5	28		plp				plp	 								; throw saved carry and exit
.14a6	60		rts				rts
.14a7					_MShiftZero:
.14a7	4c 62 1b	jmp $1b62			jmp 	MInt32False 				; return 0.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/compare.asm

.14aa					PerformComparison:
.14aa	20 24 15	jsr $1524			jsr 	DereferenceTwo 				; make both values.
.14ad	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.14af	35 41		and $41,x			and 	esType+1,x
.14b1	0a		asl a				asl 	a
.14b2	30 1d		bmi $14d1			bmi 	_PCIsString
.14b4	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.14b6	15 41		ora $41,x			ora 	esType+1,x
.14b8	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.14b9	30 22		bmi $14dd			bmi 	_PCError
.14bb	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.14bd	f0 0f		beq $14ce			beq 	_PCIsInteger 				; if not two integers
.14bf	20 41 13	jsr $1341			jsr 	BPMakeBothFloat 			; make both float
.14c2	8a		txa				txa
.14c3	a2 04		ldx #$04		ldx	#4
.14c5	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.14c8	86 0a		stx $0a				stx 	tempShort 					; save result
.14ca	aa		tax				tax
.14cb	a5 0a		lda $0a				lda 	tempShort
.14cd	60		rts				rts
.14ce					_PCIsInteger:
.14ce	4c 2d 19	jmp $192d			jmp 	MInt32Compare
.14d1					_PCIsString:
.14d1	8a		txa				txa 								; A has SP
.14d2	a2 04		ldx #$04		ldx	#4
.14d4	20 53 1d	jsr $1d53		jsr	stringHandler
.14d7	86 0a		stx $0a				stx 	tempShort 					; save result
.14d9	aa		tax				tax 								; put SP back in X and get result.
.14da	a5 0a		lda $0a				lda 	tempShort
.14dc	60		rts				rts
.14dd					_PCError:
.14dd	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.14df	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.14e2					CompareEquals:
.14e2	20 aa 14	jsr $14aa			jsr 	PerformComparison
.14e5	c9 00		cmp #$00			cmp 	#$00
.14e7	f0 35		beq $151e			beq  	CompareTrue
.14e9	4c 21 15	jmp $1521			jmp 	CompareFalse
.14ec					CompareLess:
.14ec	20 aa 14	jsr $14aa			jsr 	PerformComparison
.14ef	c9 ff		cmp #$ff			cmp 	#$FF
.14f1	f0 2b		beq $151e			beq  	CompareTrue
.14f3	4c 21 15	jmp $1521			jmp 	CompareFalse
.14f6					CompareGreater:
.14f6	20 aa 14	jsr $14aa			jsr 	PerformComparison
.14f9	c9 01		cmp #$01			cmp 	#$01
.14fb	f0 21		beq $151e			beq  	CompareTrue
.14fd	4c 21 15	jmp $1521			jmp 	CompareFalse
.1500					CompareNotEquals:
.1500	20 aa 14	jsr $14aa			jsr 	PerformComparison
.1503	c9 00		cmp #$00			cmp 	#$00
.1505	d0 17		bne $151e			bne  	CompareTrue
.1507	4c 21 15	jmp $1521			jmp 	CompareFalse
.150a					CompareGreaterEq:
.150a	20 aa 14	jsr $14aa			jsr 	PerformComparison
.150d	c9 ff		cmp #$ff			cmp 	#$FF
.150f	d0 0d		bne $151e			bne  	CompareTrue
.1511	4c 21 15	jmp $1521			jmp 	CompareFalse
.1514					CompareLessEq:
.1514	20 aa 14	jsr $14aa			jsr 	PerformComparison
.1517	c9 01		cmp #$01			cmp 	#$01
.1519	d0 03		bne $151e			bne  	CompareTrue
.151b	4c 21 15	jmp $1521			jmp 	CompareFalse
.151e					CompareTrue:
.151e	4c 5e 1b	jmp $1b5e			jmp 	MInt32True
.1521					CompareFalse:
.1521	4c 62 1b	jmp $1b62			jmp 	MInt32False

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/dereference.asm

.1524					DereferenceTwo:
.1524	e8		inx				inx
.1525	20 29 15	jsr $1529			jsr 	DereferenceOne
.1528	ca		dex				dex
.1529					DereferenceOne:
.1529	b5 40		lda $40,x			lda 	esType,x
.152b	10 3d		bpl $156a			bpl 	_DRNotReference 			; is it a reference ?
.152d	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.152e	b0 3b		bcs $156b			bcs 	_DRFloatDeReference
.1530	98		tya				tya
.1531	48		pha				pha
.1532	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.1534	85 04		sta $04				sta 	temp0
.1536	b5 50		lda $50,x			lda 	esInt1,x
.1538	85 05		sta $05				sta 	temp0+1
.153a	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.153c	95 50		sta $50,x			sta 	esInt1,x
.153e	95 58		sta $58,x			sta 	esInt2,x
.1540	95 60		sta $60,x			sta 	esInt3,x
.1542	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.1544	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1546	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1547	30 0d		bmi $1556			bmi 	_DeRefString 				; string, 2 bytes only
.1549	d0 11		bne $155c			bne 	_DeRefByte 					; byte 1 byte only
.154b					_DeRefLong:
.154b	a0 03		ldy #$03			ldy 	#3
.154d	b1 04		lda ($04),y			lda 	(temp0),y
.154f	95 60		sta $60,x			sta 	esInt3,x
.1551	88		dey				dey
.1552	b1 04		lda ($04),y			lda 	(temp0),y
.1554	95 58		sta $58,x			sta 	esInt2,x
.1556					_DeRefString:
.1556	a0 01		ldy #$01			ldy 	#1
.1558	b1 04		lda ($04),y			lda 	(temp0),y
.155a	95 50		sta $50,x			sta 	esInt1,x
.155c					_DeRefByte:
.155c	a0 00		ldy #$00			ldy 	#0
.155e	b1 04		lda ($04),y			lda 	(temp0),y
.1560	95 48		sta $48,x			sta 	esInt0,x
.1562	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.1564	29 40		and #$40			and 	#$40
.1566	95 40		sta $40,x			sta 	esType,x
.1568	68		pla				pla
.1569	a8		tay				tay
.156a					_DRNotReference
.156a	60		rts				rts
.156b					_DRFloatDereference:
.156b	8a		txa				txa
.156c							floatingpoint_deref
.156c	aa		tax				tax
.156d	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.156f	95 40		sta $40,x			sta 	esType,x
.1571	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/evaluate.asm

.1572					EvaluateLevel:
.1572	48		pha				pha 								; save precedence level.
.1573	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1575	95 48		sta $48,x			sta 	esInt0,x
.1577	95 50		sta $50,x			sta 	esInt1,x
.1579	95 58		sta $58,x			sta 	esInt2,x
.157b	95 60		sta $60,x			sta 	esInt3,x
.157d	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.157f	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1581	30 21		bmi $15a4			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1583	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1584	30 0a		bmi $1590			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1586	8a		txa				txa 								; stack level in X
.1587	a2 00		ldx #$00		ldx	#0
.1589	20 81 1d	jsr $1d81		jsr	variableHandler
.158c	aa		tax				tax
.158d	4c cd 15	jmp $15cd			jmp		_ELHasTerm
.1590					_ELIsConstant:
.1590	4a		lsr a				lsr 	a 							; get the value back
.1591	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1593	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1595					_ELCheckNext:
.1595	c8		iny				iny 								; look at next
.1596	b1 02		lda ($02),y			lda 	(codePtr),y
.1598	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.159a	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.159c	b0 2f		bcs $15cd			bcs 	_ELHasTerm 					; done getting the constant.
.159e	20 da 16	jsr $16da			jsr 	ELShiftByteIn 				; shift byte into position.
.15a1	4c 95 15	jmp $1595			jmp 	_ELCheckNext
.15a4					_ELIsToken:
.15a4	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.15a6	f0 0f		beq $15b7			beq 	_ELIsString
.15a8	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.15aa	d0 5f		bne $160b			bne 	_ELCheckUnary
.15ac	8a		txa				txa 								; put X into A
.15ad	c8		iny				iny 								; skip over the float marker
.15ae	a2 16		ldx #$16		ldx	#22
.15b0	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.15b3	aa		tax				tax 								; restore X
.15b4	4c cd 15	jmp $15cd			jmp 	_ELHasTerm
.15b7					_ELIsString:
.15b7	98		tya				tya 								; address of string is codePtr+y+1
.15b8	38		sec				sec
.15b9	65 02		adc $02				adc 	codePtr
.15bb	95 48		sta $48,x			sta 	esInt0,x
.15bd	a5 03		lda $03				lda 	codePtr+1
.15bf	69 00		adc #$00			adc 	#0
.15c1	95 50		sta $50,x			sta 	esInt1,x
.15c3	a9 40		lda #$40			lda 	#$40 						; set type to string value
.15c5	95 40		sta $40,x			sta 	esType,x
.15c7	c8		iny				iny 								; skip over string.
.15c8	98		tya				tya
.15c9	38		sec				sec									; +1 for the length itself.
.15ca	71 02		adc ($02),y			adc 	(codePtr),y
.15cc	a8		tay				tay 								; and fall through to term loop code.
.15cd					_ELHasTerm:
.15cd	b1 02		lda ($02),y			lda 	(codePtr),y
.15cf	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.15d1	90 04		bcc $15d7			bcc 	_ELPopExit
.15d3	c9 99		cmp #$99			cmp 	#TOK_STRUCTST
.15d5	90 02		bcc $15d9			bcc 	_ELHasBinaryTerm
.15d7					_ELPopExit:
.15d7	68		pla				pla
.15d8					_ELExit:
.15d8	60		rts				rts
.15d9					_ELHasBinaryTerm:
.15d9	84 0a		sty $0a				sty 	tempShort 					; save position
.15db	a8		tay				tay 								; use token as an index and get the precedence.
.15dc	b9 82 16	lda $1682,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.15df	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.15e1	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.15e3	68		pla				pla 								; restore current level.
.15e4	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.15e6	b0 f0		bcs $15d8			bcs 	_ELExit
.15e8	48		pha				pha 								; save current level back on the stack.
.15e9	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.15eb	48		pha				pha
.15ec	c8		iny				iny
.15ed	e8		inx				inx 								; calculate the RHS at the operator precedence.
.15ee	a5 0a		lda $0a				lda 	tempShort
.15f0	20 72 15	jsr $1572			jsr 	EvaluateLevel
.15f3	ca		dex				dex
.15f4	68		pla				pla 								; get the operator back out.
.15f5					_ELExecuteA:
.15f5	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.15f7	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.15f8	aa		tax				tax
.15f9	bd dc 11	lda $11dc,x			lda 	Group0Vectors,x
.15fc	85 04		sta $04				sta 	temp0
.15fe	bd dd 11	lda $11dd,x			lda 	Group0Vectors+1,x
.1601	85 05		sta $05				sta 	temp0+1
.1603	a6 0a		ldx $0a				ldx 	tempShort
.1605	20 4e 16	jsr $164e			jsr 	_ELCallTemp0
.1608	4c cd 15	jmp $15cd			jmp 	_ELHasTerm 					; and loop back round.
.160b					_ELCheckUnary:
.160b	c8		iny				iny 								; skip over token.
.160c	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.160e	f0 15		beq $1625			beq 	_ELMinus
.1610	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1612	f0 28		beq $163c			beq 	_ELIndirect
.1614	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1616	f0 24		beq $163c			beq 	_ELIndirect
.1618	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.161a	90 04		bcc $1620			bcc 	_ELUSyntax
.161c	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.161e	90 d5		bcc $15f5			bcc 	_ELExecuteA 				; if so do that token.
.1620					_ELUSyntax:
.1620	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1622	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.1625					_ELMinus:
.1625	20 63 16	jsr $1663			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1628	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.162a	f0 0a		beq $1636			beq 	_ELMinusInteger
.162c	8a		txa				txa
.162d	a2 0c		ldx #$0c		ldx	#12
.162f	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1632	aa		tax				tax
.1633	4c cd 15	jmp $15cd			jmp 	_ELHasTerm
.1636					_ELMinusInteger:
.1636	20 1c 1b	jsr $1b1c			jsr 	MInt32Negate 				; do int negate
.1639	4c cd 15	jmp $15cd			jmp 	_ELHasTerm
.163c					_ELIndirect:
.163c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.163d	20 6c 16	jsr $166c			jsr 	EvaluateIntegerTerm 		; integer address
.1640	68		pla				pla
.1641	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1643	f0 02		beq $1647			beq 	_ELHaveModifier
.1645	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1647					_ELHaveModifier:
.1647	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1649	95 40		sta $40,x			sta 	esType,x
.164b	4c cd 15	jmp $15cd			jmp 	_ELHasTerm
.164e					_ELCallTemp0:
.164e	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1651					UnaryParenthesis:
.1651	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1653	20 72 15	jsr $1572			jsr 	EvaluateLevel
.1656	20 28 1c	jsr $1c28			jsr 	CheckRightParen 			; check for )
.1659	60		rts				rts
.165a					EvaluateTerm:
.165a	a9 0f		lda #$0f			lda 	#15
.165c	20 72 15	jsr $1572			jsr 	EvaluateLevel
.165f	20 29 15	jsr $1529			jsr 	DereferenceOne
.1662	60		rts				rts
.1663					EvaluateNumericTerm:
.1663	20 5a 16	jsr $165a			jsr 	EvaluateTerm
.1666	b5 40		lda $40,x			lda 	esType,x
.1668	0a		asl a				asl 	a 							; see if it's a string.
.1669	30 09		bmi $1674			bmi 	ENTType
.166b	60		rts				rts
.166c					EvaluateIntegerTerm:
.166c	20 5a 16	jsr $165a			jsr 	EvaluateTerm
.166f	b5 40		lda $40,x			lda 	esType,x
.1671	d0 01		bne $1674			bne 	ENTType
.1673	60		rts				rts
.1674					ENTType:
.1674	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1676	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.1679					EvaluateRoot:
.1679	a2 00		ldx #$00			ldx 	#0
.167b					Evaluate:
.167b	a9 00		lda #$00			lda 	#0
.167d	20 72 15	jsr $1572			jsr 	EvaluateLevel
.1680	20 29 15	jsr $1529			jsr 	DereferenceOne
.1683	60		rts				rts
.1684					EvaluateNumeric:
.1684	20 7b 16	jsr $167b			jsr 	Evaluate
.1687	b5 40		lda $40,x			lda 	esType,x
.1689	0a		asl a				asl 	a 							; see if it's a string.
.168a	30 e8		bmi $1674			bmi 	ENTType
.168c	4a		lsr a				lsr 	a 							; shift float flag into carry.
.168d	4a		lsr a				lsr 	a
.168e	60		rts				rts
.168f					EvaluateString:
.168f	20 7b 16	jsr $167b			jsr 	Evaluate
.1692	b5 40		lda $40,x			lda 	esType,x
.1694	0a		asl a				asl 	a 							; see if it's a string.
.1695	10 dd		bpl $1674			bpl 	ENTType
.1697	60		rts				rts
.1698					EvaluateRootInteger:
.1698	a2 00		ldx #$00			ldx 	#0
.169a					EvaluateInteger:
.169a	20 7b 16	jsr $167b			jsr 	Evaluate
.169d	b5 40		lda $40,x			lda 	esType,x
.169f	d0 d3		bne $1674			bne 	ENTType
.16a1	60		rts				rts
.16a2					EvaluateSmallInteger:
.16a2	20 9a 16	jsr $169a			jsr 	EvaluateInteger
.16a5	b5 50		lda $50,x			lda 	esInt1,x
.16a7	15 58		ora $58,x			ora 	esInt2,x
.16a9	15 60		ora $60,x			ora 	esInt3,x
.16ab	d0 03		bne $16b0			bne 	_ESIValue
.16ad	b5 48		lda $48,x			lda 	esInt0,x
.16af	60		rts				rts
.16b0					_ESIValue:
.16b0	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.16b2	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.16b5					LinkEvaluate:
.16b5	aa		tax				tax
.16b6	20 7b 16	jsr $167b			jsr 	Evaluate
.16b9	8a		txa				txa
.16ba	60		rts				rts
.16bb					LinkEvaluateInteger:
.16bb	aa		tax				tax
.16bc	20 9a 16	jsr $169a			jsr 	EvaluateInteger
.16bf	8a		txa				txa
.16c0	60		rts				rts
.16c1					LinkEvaluateSmallInt:
.16c1	aa		tax				tax
.16c2	20 a2 16	jsr $16a2			jsr 	EvaluateSmallInteger
.16c5	8a		txa				txa
.16c6	60		rts				rts
.16c7					EvaluateReference:
.16c7	ad 19 17	lda $1719			lda 	ELBinaryOperatorInfo+TKW_PLING-TOK_BINARYST
.16ca	38		sec				sec 								; sub 1 to allow a!x b?x to work.
.16cb	e9 01		sbc #$01			sbc 	#1
.16cd	20 72 15	jsr $1572			jsr 	EvaluateLevel
.16d0	b5 40		lda $40,x			lda 	esType,x
.16d2	10 01		bpl $16d5			bpl 	_ERFail
.16d4	60		rts				rts
.16d5					_ERFail:
.16d5	a2 0a		ldx #$0a			ldx 	#ErrorID_NoReference
.16d7	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.16da					ELShiftByteIn:
.16da	48		pha				pha 								; save bits to shift in.
.16db	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.16dd	48		pha				pha
.16de	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.16e0	95 60		sta $60,x			sta 	esInt3,x
.16e2	b5 50		lda $50,x			lda 	esInt1,x
.16e4	95 58		sta $58,x			sta 	esInt2,x
.16e6	b5 48		lda $48,x			lda 	esInt0,x
.16e8	95 50		sta $50,x			sta 	esInt1,x
.16ea	a9 00		lda #$00			lda 	#0
.16ec	95 48		sta $48,x			sta 	esInt0,x
.16ee	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.16ef	29 03		and #$03			and 	#3 							; only want lower 2 bits
.16f1	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.16f3					_ELShiftLoop:
.16f3	4a		lsr a				lsr 	a
.16f4	76 60		ror $60,x			ror 	esInt3,x
.16f6	76 58		ror $58,x			ror 	esInt2,x
.16f8	76 50		ror $50,x			ror 	esInt1,x
.16fa	76 48		ror $48,x			ror 	esInt0,x
.16fc	c9 01		cmp #$01			cmp 	#1
.16fe	d0 f3		bne $16f3			bne 	_ELShiftLoop
.1700	68		pla				pla 								; get original 6 bit value and OR in.
.1701	29 3f		and #$3f			and 	#$3F
.1703	15 48		ora $48,x			ora 	esInt0,x
.1705	95 48		sta $48,x			sta 	esInt0,x
.1707	60		rts				rts
.1708					ELBinaryOperatorInfo:

;******  Processing file: ../source/main/evaluate/../../generated/binarystructinfo.inc

>1708	01					.byte	$01			; $86 and
>1709	01					.byte	$01			; $87 or
>170a	01					.byte	$01			; $88 xor
>170b	02					.byte	$02			; $89 >=
>170c	02					.byte	$02			; $8a <=
>170d	02					.byte	$02			; $8b >
>170e	02					.byte	$02			; $8c <
>170f	02					.byte	$02			; $8d =
>1710	02					.byte	$02			; $8e <>
>1711	03					.byte	$03			; $8f +
>1712	03					.byte	$03			; $90 -
>1713	04					.byte	$04			; $91 >>
>1714	04					.byte	$04			; $92 <<
>1715	04					.byte	$04			; $93 *
>1716	04					.byte	$04			; $94 /
>1717	04					.byte	$04			; $95 mod
>1718	05					.byte	$05			; $96 ^
>1719	06					.byte	$06			; $97 !
>171a	06					.byte	$06			; $98 ?
>171b	82					.byte	$82			; $99 repeat
>171c	82					.byte	$82			; $9a while
>171d	82					.byte	$82			; $9b for
>171e	82					.byte	$82			; $9c if
>171f	80					.byte	$80			; $9d until
>1720	80					.byte	$80			; $9e wend
>1721	80					.byte	$80			; $9f next
>1722	80					.byte	$80			; $a0 then
>1723	80					.byte	$80			; $a1 endif

;******  Return to file: ../source/main/evaluate/evaluate.asm


;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unary.asm

.1724					UnaryLen:
.1724	20 32 17	jsr $1732			jsr 	ULStart
.1727					ULFinish:
.1727	b1 04		lda ($04),y			lda 	(temp0),y
.1729	a4 0a		ldy $0a				ldy 	tempShort
.172b	20 71 1b	jsr $1b71			jsr 	MInt32Set8Bit
.172e	20 28 1c	jsr $1c28			jsr 	CheckRightParen
.1731	60		rts				rts
.1732	20 8f 16	jsr $168f	ULStart:jsr 	EvaluateString
.1735	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1737	85 04		sta $04				sta 	temp0
.1739	b5 50		lda $50,x			lda 	esInt1,x
.173b	85 05		sta $05				sta 	temp0+1
.173d	84 0a		sty $0a				sty 	tempShort 					; get length
.173f	a0 00		ldy #$00			ldy 	#0
.1741	60		rts				rts
.1742					UnaryAsc:
.1742	20 32 17	jsr $1732			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.1745	b1 04		lda ($04),y			lda 	(temp0),y
.1747	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1748	c9 00		cmp #$00			cmp 	#0
.174a	d0 db		bne $1727			bne 	ULFinish
.174c	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.174e	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.1751					UnaryAbs:
.1751	20 84 16	jsr $1684			jsr 	EvaluateNumeric
.1754	b0 07		bcs $175d			bcs 	_UAFloat
.1756	20 17 1b	jsr $1b17			jsr 	MInt32Absolute
.1759	20 28 1c	jsr $1c28			jsr 	CheckRightParen
.175c	60		rts				rts
.175d					_UAFloat:
.175d	8a		txa				txa
.175e	a2 00		ldx #$00		ldx	#0
.1760	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1763	aa		tax				tax
.1764	20 28 1c	jsr $1c28			jsr 	CheckRightParen
.1767	60		rts				rts
.1768					UnarySgn:
.1768	20 84 16	jsr $1684			jsr 	EvaluateNumeric
.176b	b0 07		bcs $1774			bcs 	_USFloat
.176d	20 4f 1b	jsr $1b4f			jsr 	MInt32Sign
.1770	20 28 1c	jsr $1c28			jsr 	CheckRightParen
.1773	60		rts				rts
.1774					_USFloat:
.1774	8a		txa				txa
.1775	a2 0e		ldx #$0e		ldx	#14
.1777	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.177a	aa		tax				tax
.177b	20 28 1c	jsr $1c28			jsr 	CheckRightParen
.177e	60		rts				rts
.177f					UnaryPeek:
.177f	20 ab 17	jsr $17ab			jsr 	PDLCode
.1782	4c 9f 17	jmp $179f			jmp 	PDLByte0
.1785					UnaryDeek:
.1785	20 ab 17	jsr $17ab			jsr 	PDLCode
.1788	4c 99 17	jmp $1799			jmp 	PDLByte1
.178b					UnaryLeek:
.178b	20 ab 17	jsr $17ab			jsr 	PDLCode
.178e	a0 03		ldy #$03			ldy 	#3
.1790	b1 04		lda ($04),y			lda 	(temp0),y
.1792	95 60		sta $60,x			sta 	esInt3,x
.1794	88		dey				dey
.1795	b1 04		lda ($04),y			lda 	(temp0),y
.1797	95 58		sta $58,x			sta 	esInt2,x
.1799					PDLByte1:
.1799	a0 01		ldy #$01			ldy 	#1
.179b	b1 04		lda ($04),y			lda 	(temp0),y
.179d	95 50		sta $50,x			sta 	esInt1,x
.179f					PDLByte0:
.179f	a0 00		ldy #$00			ldy 	#0
.17a1	b1 04		lda ($04),y			lda 	(temp0),y
.17a3	95 48		sta $48,x			sta 	esInt0,x
.17a5	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.17a7	20 28 1c	jsr $1c28			jsr 	CheckRightParen 			; check right and return
.17aa	60		rts				rts
.17ab					PDLCode:
.17ab	20 9a 16	jsr $169a			jsr 	EvaluateInteger
.17ae	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.17b0	85 04		sta $04				sta 	temp0
.17b2	b5 50		lda $50,x			lda 	esInt1,x
.17b4	85 05		sta $05				sta 	temp0+1
.17b6	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.17b8	95 50		sta $50,x			sta 	esInt1,x
.17ba	95 58		sta $58,x			sta 	esInt2,x
.17bc	95 60		sta $60,x			sta 	esInt3,x
.17be	84 0a		sty $0a				sty 	tempShort 					; save Y
.17c0	60		rts				rts
.17c1					Unary_Random:
.17c1	20 92 1b	jsr $1b92			jsr 	MInt32Random 				; generate random number.
.17c4	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.17c6	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.17c8	f0 08		beq $17d2			beq 	_URExit
.17ca	e8		inx				inx 								; load range 0..r-1 into +1
.17cb	20 9a 16	jsr $169a			jsr 	EvaluateInteger
.17ce	ca		dex				dex
.17cf	20 e0 19	jsr $19e0			jsr 	MInt32Modulus 				; calculate random % modulus
.17d2					_URExit:
.17d2	20 28 1c	jsr $1c28			jsr 	CheckRightParen 			; check right and return
.17d5	60		rts				rts
.17d6					Unary_Min:
.17d6	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.17d8	d0 02		bne $17dc			bne 	UnaryMBody
.17da					Unary_Max:
.17da	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.17dc					UnaryMBody:
.17dc	48		pha				pha 								; save comparator on stack.
.17dd	20 7b 16	jsr $167b			jsr 	Evaluate 					; get the first thing to check
.17e0					_UnaryMLoop:
.17e0	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.17e2	c8		iny				iny
.17e3	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.17e5	f0 09		beq $17f0			beq 	_UnaryMExit
.17e7	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.17e9	f0 07		beq $17f2			beq 	_UnaryMCompare
.17eb	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.17ed	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.17f0					_UnaryMExit:
.17f0	68		pla				pla 								; throw comparator and return.
.17f1	60		rts				rts
.17f2					_UnaryMCompare:
.17f2	e8		inx				inx 								; get the 2nd thing to evaluate
.17f3	20 7b 16	jsr $167b			jsr 	Evaluate
.17f6	ca		dex				dex
.17f7	20 aa 14	jsr $14aa			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.17fa	85 0a		sta $0a				sta 	tempShort 					; save result
.17fc	68		pla				pla 								; get what we need
.17fd	48		pha				pha
.17fe	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.1800	d0 de		bne $17e0			bne 	_UnaryMLoop 				; no, try another value.
.1802	20 62 1b	jsr $1b62			jsr 	MInt32False 				; promote 2nd to 1st.
.1805	20 54 1a	jsr $1a54			jsr 	MInt32Add
.1808	4c e0 17	jmp $17e0			jmp 	_UnaryMLoop
.180b					Unary_Page:
.180b	20 62 1b	jsr $1b62			jsr 	MInt32False 				; zero
.180e	ad 68 08	lda $0868			lda 	basePage 					; copy base page address in.
.1811	95 48		sta $48,x			sta 	esInt0,x
.1813	ad 69 08	lda $0869			lda 	basePage+1
.1816	95 50		sta $50,x			sta 	esInt1,x
.1818	60		rts				rts
.1819					UnaryReference:
.1819	a9 0f		lda #$0f			lda 	#15
.181b	20 72 15	jsr $1572			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.181e	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.1820	10 05		bpl $1827			bpl 	UType
.1822	a9 00		lda #$00			lda 	#0 							; make it an integer
.1824	95 40		sta $40,x			sta 	esType,x
.1826	60		rts				rts
.1827					UType:
.1827	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1829	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.182c					UnaryHexMarker:
.182c	4c 6c 16	jmp $166c			jmp 	EvaluateIntegerTerm
.182f					UnaryComplement:
.182f	20 6c 16	jsr $166c			jsr 	EvaluateIntegerTerm
.1832	20 36 1b	jsr $1b36			jsr 	MInt32Not
.1835	60		rts				rts
.1836					UnaryIntToFloat:
.1836	20 84 16	jsr $1684			jsr 	EvaluateNumeric
.1839	b5 40		lda $40,x			lda 	esType,x
.183b	d0 0b		bne $1848			bne 	_UIFExit
.183d	8a		txa				txa
.183e	a2 18		ldx #$18		ldx	#24
.1840	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1843	aa		tax				tax
.1844	a9 01		lda #$01			lda 	#1
.1846	95 40		sta $40,x			sta 	esType,x
.1848					_UIFExit:
.1848	60		rts				rts
.1849					UnaryFloatToInt:
.1849	20 84 16	jsr $1684			jsr 	EvaluateNumeric
.184c	b5 40		lda $40,x			lda 	esType,x
.184e	f0 07		beq $1857			beq 	_UFIExit
.1850	8a		txa				txa
.1851	a2 12		ldx #$12		ldx	#18
.1853	20 58 1c	jsr $1c58		jsr	floatingpointHandler
.1856	aa		tax				tax
.1857					_UFIExit:
.1857	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/evaluate/unarystr.asm

.1858					ExecChr:
.1858	20 a2 16	jsr $16a2			jsr 	EvaluateSmallInteger		; character number
.185b	20 28 1c	jsr $1c28			jsr 	CheckRightParen				; right bracket
.185e	98		tya				tya
.185f	48		pha				pha
.1860	8a		txa				txa 								; A = stack
.1861	b4 48		ldy $48,x			ldy 	esInt0,x					; Y = character
.1863	a2 00		ldx #$00		ldx	#0
.1865	20 53 1d	jsr $1d53		jsr	stringHandler
.1868	aa		tax				tax 								; X = stack
.1869	68		pla				pla
.186a	a8		tay				tay
.186b	60		rts				rts
.186c					ExecLeft:
.186c	20 8f 16	jsr $168f			jsr 	EvaluateString 				; string to stack,X
.186f	20 35 1c	jsr $1c35			jsr 	CheckComma
.1872	e8		inx				inx
.1873	a9 01		lda #$01			lda 	#1 							; 1 for 2nd parameter.
.1875	20 71 1b	jsr $1b71			jsr 	MInt32Set8Bit
.1878	e8		inx				inx
.1879	20 a2 16	jsr $16a2			jsr 	EvaluateSmallInteger 		; smallint 3rd parameter
.187c					ExecSubstring:
.187c	ca		dex				dex 								; fix up X
.187d	ca		dex				dex
.187e	20 28 1c	jsr $1c28			jsr 	CheckRightParen 			; check closing right bracket.
.1881	8a		txa				txa 								; do the substring and exit.
.1882	a2 06		ldx #$06		ldx	#6
.1884	20 53 1d	jsr $1d53		jsr	stringHandler
.1887	aa		tax				tax
.1888	60		rts				rts
.1889					ExecMid:
.1889	20 8f 16	jsr $168f			jsr 	EvaluateString 				; string to stack,X
.188c	20 35 1c	jsr $1c35			jsr 	CheckComma
.188f	e8		inx				inx
.1890	20 a2 16	jsr $16a2			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.1893	c9 00		cmp #$00			cmp 	#0
.1895	f0 15		beq $18ac			beq 	_EMValue
.1897	e8		inx				inx
.1898	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.189a	20 71 1b	jsr $1b71			jsr 	MInt32Set8Bit
.189d	b1 02		lda ($02),y			lda 	(codePtr),y 				; is there a ) next
.189f	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN 				; if so, just MID$(a$,2)
.18a1	f0 d9		beq $187c			beq 	ExecSubString
.18a3	20 35 1c	jsr $1c35			jsr 	CheckComma
.18a6	20 a2 16	jsr $16a2			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter
.18a9	4c 7c 18	jmp $187c			jmp 	ExecSubString
.18ac					_EMValue:
.18ac	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.18ae	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.18b1					ExecRight:
.18b1	20 8f 16	jsr $168f			jsr 	EvaluateString 				; string to stack,X
.18b4	20 35 1c	jsr $1c35			jsr 	CheckComma
.18b7	e8		inx				inx
.18b8	20 a2 16	jsr $16a2			jsr 	EvaluateSmallInteger 		; smallint 2nd parameter.
.18bb	ca		dex				dex
.18bc	98		tya				tya
.18bd	48		pha				pha
.18be	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.18c0	85 04		sta $04				sta 	temp0
.18c2	b5 50		lda $50,x			lda 	esInt1,x
.18c4	85 05		sta $05				sta 	temp0+1
.18c6	a0 00		ldy #$00			ldy 	#0 							; point to length
.18c8	b1 04		lda ($04),y			lda 	(temp0),y 					; get the length.
.18ca	18		clc				clc 								; add 1.
.18cb	69 01		adc #$01			adc 	#1
.18cd	38		sec				sec
.18ce	f5 49		sbc $49,x			sbc 	esInt0+1,x  				; subtract right count.
.18d0	f0 02		beq $18d4			beq		_ERMake1 					; if zero, make it 1.
.18d2	b0 02		bcs $18d6			bcs		_EROkay
.18d4					_ERMake1:
.18d4	a9 01		lda #$01			lda 	#1 							; start position.
.18d6					_EROkay:
.18d6	e8		inx				inx 								; set start pos.
.18d7	95 48		sta $48,x			sta 	esInt0,x
.18d9	e8		inx				inx
.18da	a9 ff		lda #$ff			lda 	#255 						; 255 default for 3nd parameter.
.18dc	20 71 1b	jsr $1b71			jsr 	MInt32Set8Bit
.18df	4c 7c 18	jmp $187c			jmp 	ExecSubString 				; do the substring code.

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32binary.asm

.18e2					MInt32And:
.18e2	b5 48		lda $48,x			lda 	esInt0,x
.18e4	35 49		and $49,x			and 	esInt0+1,x
.18e6	95 48		sta $48,x			sta 	esInt0,x
.18e8	b5 50		lda $50,x			lda 	esInt1,x
.18ea	35 51		and $51,x			and 	esInt1+1,x
.18ec	95 50		sta $50,x			sta 	esInt1,x
.18ee	b5 58		lda $58,x			lda 	esInt2,x
.18f0	35 59		and $59,x			and 	esInt2+1,x
.18f2	95 58		sta $58,x			sta 	esInt2,x
.18f4	b5 60		lda $60,x			lda 	esInt3,x
.18f6	35 61		and $61,x			and 	esInt3+1,x
.18f8	95 60		sta $60,x			sta 	esInt3,x
.18fa	60		rts				rts
.18fb					MInt32Or:
.18fb	b5 48		lda $48,x			lda 	esInt0,x
.18fd	15 49		ora $49,x			ora 	esInt0+1,x
.18ff	95 48		sta $48,x			sta 	esInt0,x
.1901	b5 50		lda $50,x			lda 	esInt1,x
.1903	15 51		ora $51,x			ora 	esInt1+1,x
.1905	95 50		sta $50,x			sta 	esInt1,x
.1907	b5 58		lda $58,x			lda 	esInt2,x
.1909	15 59		ora $59,x			ora 	esInt2+1,x
.190b	95 58		sta $58,x			sta 	esInt2,x
.190d	b5 60		lda $60,x			lda 	esInt3,x
.190f	15 61		ora $61,x			ora 	esInt3+1,x
.1911	95 60		sta $60,x			sta 	esInt3,x
.1913	60		rts				rts
.1914					MInt32Xor:
.1914	b5 48		lda $48,x			lda 	esInt0,x
.1916	55 49		eor $49,x			eor 	esInt0+1,x
.1918	95 48		sta $48,x			sta 	esInt0,x
.191a	b5 50		lda $50,x			lda 	esInt1,x
.191c	55 51		eor $51,x			eor 	esInt1+1,x
.191e	95 50		sta $50,x			sta 	esInt1,x
.1920	b5 58		lda $58,x			lda 	esInt2,x
.1922	55 59		eor $59,x			eor 	esInt2+1,x
.1924	95 58		sta $58,x			sta 	esInt2,x
.1926	b5 60		lda $60,x			lda 	esInt3,x
.1928	55 61		eor $61,x			eor 	esInt3+1,x
.192a	95 60		sta $60,x			sta 	esInt3,x
.192c	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32compare.asm

.192d					MInt32Compare:
.192d	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.192f	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1931	d0 13		bne $1946			bne 	MInt32Compare2
.1933	b5 50		lda $50,x			lda 	esInt1,x
.1935	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1937	d0 0d		bne $1946			bne 	MInt32Compare2
.1939	b5 58		lda $58,x			lda 	esInt2,x
.193b	d5 59		cmp $59,x			cmp 	esInt2+1,x
.193d	d0 07		bne $1946			bne 	MInt32Compare2
.193f	b5 60		lda $60,x			lda 	esInt3,x
.1941	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1943	d0 01		bne $1946			bne 	MInt32Compare2
.1945	60		rts				rts
.1946					MInt32Compare2:
.1946	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1948	d5 49		cmp $49,x			cmp 	esInt0+1,x
.194a	b5 50		lda $50,x			lda		esInt1,x
.194c	f5 51		sbc $51,x			sbc 	esInt1+1,x
.194e	b5 58		lda $58,x			lda		esInt2,x
.1950	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1952	b5 60		lda $60,x			lda		esInt3,x
.1954	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1956	50 02		bvc $195a			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1958	49 80		eor #$80			eor 	#$80
.195a					_I32LNoOverflow
.195a	30 03		bmi $195f			bmi 	MInt32CLess					; if -ve then return $FF
.195c	a9 01		lda #$01			lda 	#$01						; else return $01
.195e	60		rts				rts
.195f					MInt32CLess:
.195f	a9 ff		lda #$ff			lda 	#$FF
.1961	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32divide.asm

.1962					MInt32SDivide:
.1962	98		tya				tya  								; save Y, which is the count of negations
.1963	48		pha				pha
.1964	a0 00		ldy #$00			ldy 	#0 							; zero count
.1966	20 7e 19	jsr $197e			jsr 	_MInt32SRemSign 			; unsign TOS
.1969	e8		inx				inx 								; unsign TOS+1
.196a	20 7e 19	jsr $197e			jsr 	_MInt32SRemSign
.196d	ca		dex				dex
.196e	98		tya				tya 								; save sign count on stack
.196f	48		pha				pha
.1970	20 87 19	jsr $1987			jsr 	MInt32UDivide 				; unsigned division
.1973	68		pla				pla 								; get sign count back
.1974	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.1976	f0 03		beq $197b			beq 	_I32SNoNeg
.1978	20 1c 1b	jsr $1b1c			jsr 	MInt32Negate
.197b					_I32SNoNeg:
.197b	68		pla				pla 								; restoe Y and exit
.197c	a8		tay				tay
.197d	60		rts				rts
.197e					_MInt32SRemSign:
.197e	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.1980	10 04		bpl $1986			bpl 	_MInt32SRSExit
.1982	c8		iny				iny 								; increment the sign count
.1983	20 1c 1b	jsr $1b1c			jsr 	MInt32Negate 				; negate the value.
.1986					_MInt32SRSExit:
.1986	60		rts				rts
.1987					MInt32UDivide:
.1987	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.1989	15 51		ora $51,x			ora 	esInt1+1,x
.198b	15 52		ora $52,x			ora 	esInt1+2,x
.198d	15 53		ora $53,x			ora 	esInt1+3,x
.198f	f0 4a		beq $19db			beq 	_MInt32DZero
.1991	e8		inx				inx 								; clear A
.1992	e8		inx				inx
.1993	20 62 1b	jsr $1b62			jsr 	MInt32False
.1996	ca		dex				dex
.1997	ca		dex				dex
.1998	98		tya				tya 								; save Y on the stack
.1999	48		pha				pha
.199a	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.199c					_MInt32UDLoop:
.199c	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.199e	36 50		rol $50,x			rol 	esInt1,x
.19a0	36 58		rol $58,x			rol 	esInt2,x
.19a2	36 60		rol $60,x			rol 	esInt3,x
.19a4	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.19a6	36 52		rol $52,x			rol 	esInt1+2,x
.19a8	36 5a		rol $5a,x			rol 	esInt2+2,x
.19aa	36 62		rol $62,x			rol 	esInt3+2,x
.19ac	38		sec				sec 								; calculate A-M saving result on the stack
.19ad	b5 4a		lda $4a,x			lda 	esInt0+2,x
.19af	f5 49		sbc $49,x			sbc 	esInt0+1,x
.19b1	48		pha				pha
.19b2	b5 52		lda $52,x			lda 	esInt1+2,x
.19b4	f5 51		sbc $51,x			sbc 	esInt1+1,x
.19b6	48		pha				pha
.19b7	b5 5a		lda $5a,x			lda 	esInt2+2,x
.19b9	f5 59		sbc $59,x			sbc 	esInt2+1,x
.19bb	48		pha				pha
.19bc	b5 62		lda $62,x			lda 	esInt3+2,x
.19be	f5 61		sbc $61,x			sbc 	esInt3+1,x
.19c0	90 10		bcc $19d2			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.19c2	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.19c4	68		pla				pla
.19c5	95 5a		sta $5a,x			sta 	esInt2+2,x
.19c7	68		pla				pla
.19c8	95 52		sta $52,x			sta 	esInt1+2,x
.19ca	68		pla				pla
.19cb	95 4a		sta $4a,x			sta 	esInt0+2,x
.19cd	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.19cf	4c d5 19	jmp $19d5			jmp 	_MInt32Next 					; do the next iteration
.19d2					_MInt32NoSubtract:
.19d2	68		pla				pla
.19d3	68		pla				pla
.19d4	68		pla				pla
.19d5					_MInt32Next:
.19d5	88		dey				dey 								; do this 32 times.
.19d6	d0 c4		bne $199c			bne 	_MInt32UDLoop
.19d8	68		pla				pla 								; restore Y and exit
.19d9	a8		tay				tay
.19da	60		rts				rts
.19db					_MInt32DZero:
.19db	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.19dd	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.19e0					MInt32Modulus:
.19e0	20 87 19	jsr $1987			jsr 	MInt32UDivide 				; do the division.
.19e3	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.19e5	95 60		sta $60,x			sta 	esInt3,x
.19e7	b5 5a		lda $5a,x			lda 	esInt2+2,x
.19e9	95 58		sta $58,x			sta 	esInt2,x
.19eb	b5 52		lda $52,x			lda 	esInt1+2,x
.19ed	95 50		sta $50,x			sta 	esInt1,x
.19ef	b5 4a		lda $4a,x			lda 	esInt0+2,x
.19f1	95 48		sta $48,x			sta 	esInt0,x
.19f3	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32fromstr.asm

.19f4					MInt32FromString:
.19f4	85 0a		sta $0a				sta 	tempShort 					; save base
.19f6	98		tya				tya
.19f7	48		pha				pha
.19f8	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.19fa	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.19fc	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.19fe	d0 01		bne $1a01			bne 	_I32FSNotNegative
.1a00	c8		iny				iny 								; if so consume it.
.1a01					_I32FSNotNegative:
.1a01	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1a03	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1a05	f0 02		beq $1a09			beq 	_I32FSNN2
.1a07	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1a09					_I32FSNN2:
.1a09	48		pha				pha 								; save base + final sign on stack.
.1a0a	20 62 1b	jsr $1b62			jsr 	MInt32False 					; zero the return value.
.1a0d					I32FSMainLoop:
.1a0d	68		pla				pla 								; get the base back into tempshort
.1a0e	48		pha				pha
.1a0f	29 7f		and #$7f			and 	#$7F
.1a11	85 0a		sta $0a				sta 	tempShort
.1a13	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1a15	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1a17	90 02		bcc $1a1b			bcc 	_I32FSNotLC
.1a19	e9 20		sbc #$20			sbc 	#32
.1a1b					_I32FSNotLC:
.1a1b	38		sec				sec 								; subtract 48 (ASCII "0")
.1a1c	e9 30		sbc #$30			sbc 	#"0"
.1a1e	90 26		bcc $1a46			bcc 	_I32FSDone 					; nothing more to do.
.1a20	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.1a22	90 06		bcc $1a2a			bcc 	_I32FSValidate
.1a24	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1a26	90 1e		bcc $1a46			bcc 	_I32FSDone
.1a28	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1a2a					_I32FSValidate:
.1a2a	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1a2c	b0 18		bcs $1a46			bcs 	_I32FSDone 					; sorry, too large for this base.
.1a2e	48		pha				pha 								; save the new digit value.
.1a2f	e8		inx				inx 								; put base into next slot.
.1a30	a5 0a		lda $0a				lda 	tempShort
.1a32	20 71 1b	jsr $1b71			jsr 	MInt32Set8Bit
.1a35	ca		dex				dex
.1a36	20 88 1a	jsr $1a88			jsr 	MInt32Multiply 				; multiply current by the base
.1a39	e8		inx				inx
.1a3a	68		pla				pla  								; put additive into next slot
.1a3b	20 71 1b	jsr $1b71			jsr 	MInt32Set8Bit
.1a3e	ca		dex				dex
.1a3f	20 54 1a	jsr $1a54			jsr 	MInt32Add 					; and add it
.1a42	c8		iny				iny 								; look at next character
.1a43	4c 0d 1a	jmp $1a0d			jmp 	I32FSMainLoop 				; and go round again.
.1a46					_I32FSDone:
.1a46	68		pla				pla 								; get base/final sign back
.1a47	10 04		bpl $1a4d			bpl 	_I32FSNN3
.1a49	88		dey				dey 								; one fewer character to allow for the - prefix.
.1a4a	20 1c 1b	jsr $1b1c			jsr 	MInt32Negate 				; negate the result.
.1a4d					_I32FSNN3:
.1a4d	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.1a4f	68		pla				pla
.1a50	a8		tay				tay
.1a51	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1a53	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32math.asm

.1a54					MInt32Add:
.1a54	18		clc				clc
.1a55	b5 48		lda $48,x			lda 	esInt0,x
.1a57	75 49		adc $49,x			adc 	esInt0+1,x
.1a59	95 48		sta $48,x			sta 	esInt0,x
.1a5b	b5 50		lda $50,x			lda 	esInt1,x
.1a5d	75 51		adc $51,x			adc 	esInt1+1,x
.1a5f	95 50		sta $50,x			sta 	esInt1,x
.1a61	b5 58		lda $58,x			lda 	esInt2,x
.1a63	75 59		adc $59,x			adc 	esInt2+1,x
.1a65	95 58		sta $58,x			sta 	esInt2,x
.1a67	b5 60		lda $60,x			lda 	esInt3,x
.1a69	75 61		adc $61,x			adc 	esInt3+1,x
.1a6b	95 60		sta $60,x			sta 	esInt3,x
.1a6d	60		rts				rts
.1a6e					MInt32Sub:
.1a6e	38		sec				sec
.1a6f	b5 48		lda $48,x			lda 	esInt0,x
.1a71	f5 49		sbc $49,x			sbc 	esInt0+1,x
.1a73	95 48		sta $48,x			sta 	esInt0,x
.1a75	b5 50		lda $50,x			lda 	esInt1,x
.1a77	f5 51		sbc $51,x			sbc 	esInt1+1,x
.1a79	95 50		sta $50,x			sta 	esInt1,x
.1a7b	b5 58		lda $58,x			lda 	esInt2,x
.1a7d	f5 59		sbc $59,x			sbc 	esInt2+1,x
.1a7f	95 58		sta $58,x			sta 	esInt2,x
.1a81	b5 60		lda $60,x			lda 	esInt3,x
.1a83	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1a85	95 60		sta $60,x			sta 	esInt3,x
.1a87	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32multiply.asm

.1a88					MInt32Multiply:
.1a88	e8		inx				inx 								; copy 2nd -> 3rd
.1a89	20 ae 1a	jsr $1aae			jsr 	MInt32CopyUp
.1a8c	ca		dex				dex
.1a8d	20 ae 1a	jsr $1aae			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.1a90	20 62 1b	jsr $1b62			jsr 	MInt32False 					; zero 1st.
.1a93					_I32Loop:
.1a93	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.1a95	29 01		and #$01			and 	#1
.1a97	f0 03		beq $1a9c			beq 	_I32NoAdd 					; if set
.1a99	20 54 1a	jsr $1a54			jsr 	MInt32Add 					; add 2nd to 1st.
.1a9c					_I32NoAdd:
.1a9c	e8		inx				inx 								; shift 2nd left
.1a9d	20 77 1b	jsr $1b77			jsr 	MInt32ShiftLeft
.1aa0	e8		inx				inx  								; shift 3rd right
.1aa1	20 80 1b	jsr $1b80			jsr 	MInt32ShiftRight
.1aa4	20 89 1b	jsr $1b89			jsr 	MInt32Zero 					; check if zero.
.1aa7	08		php				php 								; save status bits
.1aa8	ca		dex				dex 	 							; point back to 1st
.1aa9	ca		dex				dex
.1aaa	28		plp				plp 								; get status bits
.1aab	d0 e6		bne $1a93			bne 	_I32Loop 					; if non-zero keep going.
.1aad	60		rts				rts
.1aae					MInt32CopyUp:
.1aae	b5 48		lda $48,x			lda 	esInt0,x
.1ab0	95 49		sta $49,x			sta 	esInt0+1,x
.1ab2	b5 50		lda $50,x			lda 	esInt1,x
.1ab4	95 51		sta $51,x			sta 	esInt1+1,x
.1ab6	b5 58		lda $58,x			lda 	esInt2,x
.1ab8	95 59		sta $59,x			sta 	esInt2+1,x
.1aba	b5 60		lda $60,x			lda 	esInt3,x
.1abc	95 61		sta $61,x			sta 	esInt3+1,x
.1abe	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32tostr.asm

>0870					MCharCount:	.fill 	1						; count of converted characters
.1abf					MInt32ToString:
.1abf	48		pha				pha 								; save base
.1ac0	85 0a		sta $0a				sta 	tempShort 					; save target base.
.1ac2	a9 00		lda #$00			lda 	#0
.1ac4	8d 70 08	sta $0870			sta 	MCharCount 					; clear character count.
.1ac7	98		tya				tya
.1ac8	48		pha				pha
.1ac9	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.1acb	10 10		bpl $1add			bpl 	_I32TSUnsigned
.1acd	48		pha				pha 								; save base on stack.
.1ace	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.1ad0	10 08		bpl $1ada			bpl 	_I32TSNoFlip
.1ad2	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1ad4	20 09 1b	jsr $1b09			jsr 	MI32WriteCharacter
.1ad7	20 1c 1b	jsr $1b1c			jsr 	MInt32Negate 				; negate the value.
.1ada					_I32TSNoFlip:
.1ada	68		pla				pla 								; get the base back
.1adb	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.1add					_I32TSUnsigned:
.1add	20 e4 1a	jsr $1ae4			jsr 	MI32DivideWrite 				; recursive code to output string.
.1ae0	68		pla				pla
.1ae1	a8		tay				tay
.1ae2	68		pla				pla
.1ae3	60		rts				rts
.1ae4					MI32DivideWrite:
.1ae4	48		pha				pha 								; save the divisor/base
.1ae5	e8		inx				inx 								; write in the dividing position.
.1ae6	20 71 1b	jsr $1b71			jsr 	MInt32Set8Bit
.1ae9	ca		dex				dex
.1aea	20 87 19	jsr $1987			jsr 	MInt32UDivide 				; divide number by base.
.1aed	68		pla				pla 								; get the base into Y
.1aee	a8		tay				tay
.1aef	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.1af1	48		pha				pha
.1af2	20 89 1b	jsr $1b89			jsr 	MInt32Zero 					; is the result zero ?
.1af5	f0 04		beq $1afb			beq 	_I32NoRecurse 				; if so, don't recurse.
.1af7	98		tya				tya 								; put base into A
.1af8	20 e4 1a	jsr $1ae4			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1afb					_I32NoRecurse:
.1afb	68		pla				pla 								; get the remainder back
.1afc	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.1afe	90 02		bcc $1b02			bcc 	_I32NotHex
.1b00	69 06		adc #$06			adc 	#7-1
.1b02					_I32NotHex:
.1b02	18		clc				clc 								; make it ASCII
.1b03	69 30		adc #$30			adc 	#48
.1b05	20 09 1b	jsr $1b09			jsr 	MI32WriteCharacter 			; write the character out
.1b08	60		rts				rts 								; and exit.
.1b09					MI32WriteCharacter:
.1b09	ac 70 08	ldy $0870			ldy 	MCharCount 					; get position
.1b0c	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.1b0e	c8		iny				iny
.1b0f	a9 00		lda #$00			lda 	#0
.1b11	91 04		sta ($04),y			sta 	(temp0),y
.1b13	ee 70 08	inc $0870			inc 	MCharCount 					; bump count
.1b16	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/imath/int32unary.asm

>0871					MSeed32:	.fill 	4							; random number seed.
.1b17					MInt32Absolute:
.1b17	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1b19	30 01		bmi $1b1c			bmi 	MInt32Negate
.1b1b	60		rts				rts
.1b1c					MInt32Negate:
.1b1c	38		sec				sec
.1b1d	a9 00		lda #$00			lda 	#0
.1b1f	f5 48		sbc $48,x			sbc 	esInt0,x
.1b21	95 48		sta $48,x			sta 	esInt0,x
.1b23	a9 00		lda #$00			lda 	#0
.1b25	f5 50		sbc $50,x			sbc 	esInt1,x
.1b27	95 50		sta $50,x			sta 	esInt1,x
.1b29	a9 00		lda #$00			lda 	#0
.1b2b	f5 58		sbc $58,x			sbc 	esInt2,x
.1b2d	95 58		sta $58,x			sta 	esInt2,x
.1b2f	a9 00		lda #$00			lda 	#0
.1b31	f5 60		sbc $60,x			sbc 	esInt3,x
.1b33	95 60		sta $60,x			sta 	esInt3,x
.1b35	60		rts				rts
.1b36					MInt32Not:
.1b36	b5 48		lda $48,x			lda 	esInt0,x
.1b38	49 ff		eor #$ff			eor 	#$FF
.1b3a	95 48		sta $48,x			sta 	esInt0,x
.1b3c	b5 50		lda $50,x			lda 	esInt1,x
.1b3e	49 ff		eor #$ff			eor 	#$FF
.1b40	95 50		sta $50,x			sta 	esInt1,x
.1b42	b5 58		lda $58,x			lda 	esInt2,x
.1b44	49 ff		eor #$ff			eor 	#$FF
.1b46	95 58		sta $58,x			sta 	esInt2,x
.1b48	b5 60		lda $60,x			lda 	esInt3,x
.1b4a	49 ff		eor #$ff			eor 	#$FF
.1b4c	95 60		sta $60,x			sta 	esInt3,x
.1b4e	60		rts				rts
.1b4f					MInt32Sign:
.1b4f	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.1b51	30 0b		bmi $1b5e			bmi 	MInt32True 					; if set return -1 (true)
.1b53	20 89 1b	jsr $1b89			jsr 	MInt32Zero 					; is it zero ?
.1b56	f0 0a		beq $1b62			beq 	MInt32False 					; if zero return 0 (false)
.1b58	20 62 1b	jsr $1b62			jsr 	MInt32False 					; > 0 return 1
.1b5b	f6 48		inc $48,x			inc 	esInt0,x
.1b5d	60		rts				rts
.1b5e					MInt32True:
.1b5e	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.1b60	d0 02		bne $1b64			bne 	MInt32WriteAll
.1b62					MInt32False:
.1b62	a9 00		lda #$00			lda 	#0
.1b64					MInt32WriteAll:
.1b64	95 48		sta $48,x			sta 	esInt0,x
.1b66					MInt32Write123:
.1b66	95 50		sta $50,x			sta 	esInt1,x
.1b68	95 58		sta $58,x			sta 	esInt2,x
.1b6a	95 60		sta $60,x			sta 	esInt3,x
.1b6c	a9 00		lda #$00			lda 	#$00						; and make it an integer
.1b6e	95 40		sta $40,x			sta 	esType,x
.1b70	60		rts				rts
.1b71					MInt32Set8Bit:
.1b71	95 48		sta $48,x			sta 	esInt0,x
.1b73	a9 00		lda #$00			lda 	#0
.1b75	f0 ef		beq $1b66			beq		MInt32Write123
.1b77					MInt32ShiftLeft:
.1b77	16 48		asl $48,x			asl 	esInt0,x
.1b79	36 50		rol $50,x			rol	 	esInt1,x
.1b7b	36 58		rol $58,x			rol	 	esInt2,x
.1b7d	36 60		rol $60,x			rol	 	esInt3,x
.1b7f	60		rts				rts
.1b80					MInt32ShiftRight:
.1b80	56 60		lsr $60,x			lsr 	esInt3,x
.1b82	76 58		ror $58,x			ror 	esInt2,x
.1b84	76 50		ror $50,x			ror 	esInt1,x
.1b86	76 48		ror $48,x			ror 	esInt0,x
.1b88	60		rts				rts
.1b89					MInt32Zero:
.1b89	b5 48		lda $48,x			lda 	esInt0,x
.1b8b	15 50		ora $50,x			ora 	esInt1,x
.1b8d	15 58		ora $58,x			ora 	esInt2,x
.1b8f	15 60		ora $60,x			ora 	esInt3,x
.1b91	60		rts				rts
.1b92					MInt32Random:
.1b92	98		tya				tya
.1b93	48		pha				pha
.1b94	a0 07		ldy #$07			ldy 	#7
.1b96	ad 71 08	lda $0871			lda 	MSeed32+0
.1b99	d0 03		bne $1b9e			bne 	_Random1
.1b9b	a8		tay				tay
.1b9c	a9 aa		lda #$aa			lda		#$AA
.1b9e					_Random1:
.1b9e	0a		asl a				asl 	a
.1b9f	2e 72 08	rol $0872			rol 	MSeed32+1
.1ba2	2e 73 08	rol $0873			rol 	MSeed32+2
.1ba5	2e 74 08	rol $0874			rol 	MSeed32+3
.1ba8	90 02		bcc $1bac			bcc 	_Random2
.1baa	49 c5		eor #$c5			eor 	#$C5
.1bac					_Random2:
.1bac	88		dey				dey
.1bad	d0 ef		bne $1b9e			bne 	_Random1
.1baf	8d 71 08	sta $0871			sta 	MSeed32+0
.1bb2	95 48		sta $48,x			sta 	esInt0,x
.1bb4	ad 72 08	lda $0872			lda 	MSeed32+1
.1bb7	95 50		sta $50,x			sta 	esInt1,x
.1bb9	ad 73 08	lda $0873			lda 	MSeed32+2
.1bbc	95 58		sta $58,x			sta 	esInt2,x
.1bbe	ad 74 08	lda $0874			lda 	MSeed32+3
.1bc1	95 60		sta $60,x			sta 	esInt3,x
.1bc3	68		pla				pla
.1bc4	a8		tay				tay
.1bc5	a9 00		lda #$00			lda 	#0
.1bc7	95 40		sta $40,x			sta 	esType,x
.1bc9	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/stack.asm

.0078					rsPointer:
>0078							.fill 	2							; to TOS, which is the current top-token.
.0875					returnStack:
>0875							.fill 	retStackSize
.1bca					RSReset:
.1bca	a9 74		lda #$74			lda 	#(returnStack+retStackSize-1) & $FF
.1bcc	85 78		sta $78				sta 	rsPointer
.1bce	a9 0a		lda #$0a			lda 	#(returnStack+retStackSize-1) >> 8
.1bd0	85 79		sta $79				sta 	1+(rsPointer)
.1bd2	a9 ff		lda #$ff			lda 	#$FF 						; put a duff marker on TOS, so nothing will pop
.1bd4	8d 74 0a	sta $0a74			sta 	returnStack+retStackSize-1
.1bd7	60		rts				rts
.1bd8					RSClaim:
.1bd8	84 0a		sty $0a				sty 	tempShort 					; preserve Y
.1bda	48		pha				pha 								; save marker on stack.
.1bdb	8a		txa				txa 								; get bytes required.
.1bdc	38		sec				sec
.1bdd	49 ff		eor #$ff			eor 	#$FF 						; add to rsPointer using 2's complement.
.1bdf	65 78		adc $78				adc 	rsPointer
.1be1	85 78		sta $78				sta 	rsPointer
.1be3	a5 79		lda $79				lda 	rsPointer+1
.1be5	69 ff		adc #$ff			adc 	#$FF
.1be7	85 79		sta $79				sta 	rsPointer+1
.1be9	68		pla				pla 								; get marker back
.1bea	a0 00		ldy #$00			ldy 	#0 							; write marker out.
.1bec	91 78		sta ($78),y			sta 	(rsPointer),y
.1bee	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit
.1bf0	60		rts				rts
.1bf1					RSFree:
.1bf1	18		clc				clc
.1bf2	65 78		adc $78				adc 	rsPointer
.1bf4	85 78		sta $78				sta 	rsPointer
.1bf6	90 02		bcc $1bfa			bcc 	_RSFExit
.1bf8	e6 79		inc $79				inc 	rsPointer+1
.1bfa					_RSFExit:
.1bfa	60		rts				rts
.1bfb					RSSavePosition:
.1bfb	84 0a		sty $0a				sty 	tempShort 					; save Y position
.1bfd	a8		tay				tay 								; this is where we write it.
.1bfe	a5 02		lda $02				lda 	codePtr 					; write codePointer out
.1c00	91 78		sta ($78),y			sta 	(rsPointer),y
.1c02	c8		iny				iny
.1c03	a5 03		lda $03				lda 	codePtr+1
.1c05	91 78		sta ($78),y			sta 	(rsPointer),y
.1c07	c8		iny				iny
.1c08	a5 0a		lda $0a				lda 	tempShort 					; write the Y position out.
.1c0a	91 78		sta ($78),y			sta 	(rsPointer),y
.1c0c	a8		tay				tay 								; fix Y back again to original value
.1c0d	60		rts				rts
.1c0e					RSLoadPosition:
.1c0e	a8		tay				tay
.1c0f	b1 78		lda ($78),y			lda 	(rsPointer),y 				; read codePointer back
.1c11	85 02		sta $02				sta 	codePtr
.1c13	c8		iny				iny
.1c14	b1 78		lda ($78),y			lda 	(rsPointer),y
.1c16	85 03		sta $03				sta 	codePtr+1
.1c18	c8		iny				iny
.1c19	b1 78		lda ($78),y			lda 	(rsPointer),y 				; and the offset
.1c1b	a8		tay				tay 								; to Y
.1c1c	60		rts				rts

;******  Return to file: ../source/main/main.asm


;******  Processing file: ../source/main/utility/check.asm

.1c1d					CheckToken:
.1c1d	d1 02		cmp ($02),y			cmp 	(codePtr),y
.1c1f	d0 02		bne $1c23			bne 	_CTError
.1c21	c8		iny				iny
.1c22	60		rts				rts
.1c23					_CTError:
.1c23	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1c25	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.1c28					CheckRightParen:
.1c28	b1 02		lda ($02),y			lda 	(codePtr),y
.1c2a	c8		iny				iny
.1c2b	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.1c2d	d0 01		bne $1c30			bne 	_CRPError
.1c2f	60		rts				rts
.1c30					_CRPError:
.1c30	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.1c32	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.1c35					CheckComma:
.1c35	b1 02		lda ($02),y			lda 	(codePtr),y
.1c37	c8		iny				iny
.1c38	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1c3a	d0 01		bne $1c3d			bne 	_CCError
.1c3c	60		rts				rts
.1c3d					_CCError:
.1c3d	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.1c3f	20 51 1c	jsr $1c51			jsr 	ErrorHandler

;******  Return to file: ../source/main/main.asm

.1c42					mainHandler:
.1c42	7c 45 1c	jmp ($1c45,x)			jmp 	(mainVectors,x)
.1c45					mainVectors:
>1c45	b5 16					.word LinkEvaluate         ; index 0
>1c47	bb 16					.word LinkEvaluateInteger  ; index 2
>1c49	c1 16					.word LinkEvaluateSmallInt ; index 4

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/assembler/assembler.asm

.1c4b					assemblerHandler:
.1c4b	7c 4e 1c	jmp ($1c4e,x)			jmp 	(assemblerVectors,x)
.1c4e					assemblerVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/device/device.asm

.1c4e					deviceHandler:
.1c4e	7c 51 1c	jmp ($1c51,x)			jmp 	(deviceVectors,x)
.1c51					deviceVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/error/error.asm


;******  Processing file: ../source/error/errorhandler.asm

.1c51					ErrorHandler:
.1c51	a9 ee		lda #$ee			lda 	#$EE
.1c53	a8		tay				tay
>1c54	db						.byte 	$DB
.1c55	4c 55 1c	jmp $1c55	_EHHalt:jmp 	_EHHalt

;******  Return to file: ../source/error/error.asm


;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/floatingpoint/floatingpoint.asm

.1c58					floatingpointHandler:
.1c58	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.1c5a	20 51 1c	jsr $1c51			jsr 	ErrorHandler

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/interaction/interaction.asm

.1c5d					interactionHandler:
.1c5d	7c 60 1c	jmp ($1c60,x)			jmp 	(interactionVectors,x)
.1c60					interactionVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/string/string.asm


;******  Processing file: ../source/string/chr.asm

.1c60					StringChrs:
.1c60	aa		tax				tax 								; set up stack
.1c61	a9 02		lda #$02			lda 	#2
.1c63	20 12 1d	jsr $1d12			jsr 	AllocateSoftString
.1c66	98		tya				tya
.1c67	20 3a 1d	jsr $1d3a			jsr 	WriteSoftString
.1c6a	20 6f 1c	jsr $1c6f			jsr 	ReturnSoftString
.1c6d	8a		txa				txa
.1c6e	60		rts				rts
.1c6f					ReturnSoftString:
.1c6f	a5 7a		lda $7a				lda 	softMemAlloc
.1c71	95 48		sta $48,x			sta 	esInt0,x
.1c73	a5 7b		lda $7b				lda 	softMemAlloc+1
.1c75	95 50		sta $50,x			sta 	esInt1,x
.1c77	a9 00		lda #$00			lda 	#0
.1c79	95 58		sta $58,x			sta 	esInt2,x
.1c7b	95 60		sta $60,x			sta 	esInt3,x
.1c7d	a9 40		lda #$40			lda 	#$40
.1c7f	95 40		sta $40,x			sta 	esType,x
.1c81	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/compare.asm

.1c82					STRCompare:
.1c82	48		pha				pha 								; save A
.1c83	aa		tax				tax 								; put stack pos in X
.1c84	98		tya				tya
.1c85	48		pha				pha
.1c86	20 ba 1c	jsr $1cba			jsr 	CopyStringPair
.1c89	a0 00		ldy #$00			ldy 	#0 							; get the smaller of the two string sizes.
.1c8b	b1 04		lda ($04),y			lda 	(temp0),y
.1c8d	d1 06		cmp ($06),y			cmp 	(temp1),y
.1c8f	90 02		bcc $1c93			bcc 	_SCNotSmaller
.1c91	b1 06		lda ($06),y			lda 	(temp1),y
.1c93					_SCNotSmaller:
.1c93	aa		tax				tax 								; put that in X. We compare this many chars first.
.1c94					_SCCompareLoop:
.1c94	e0 00		cpx #$00			cpx 	#0 							; if compared all the smaller, then it is the shorter
.1c96	f0 0c		beq $1ca4			beq 	_SCSameToEndShortest 		; one that is the smallest if they are different lengths.
.1c98	ca		dex				dex 								; decrement chars to compare.
.1c99	c8		iny				iny 								; move to next character
.1c9a	38		sec				sec 								; calculate s1[y]-s2[y]
.1c9b	b1 04		lda ($04),y			lda 	(temp0),y
.1c9d	f1 06		sbc ($06),y			sbc 	(temp1),y
.1c9f	d0 0a		bne $1cab			bne 	_SCReturnResult 			; if different return sign of A
.1ca1	4c 94 1c	jmp $1c94			jmp 	_SCCompareLoop
.1ca4					_SCSameToEndShortest
.1ca4	a0 00		ldy #$00			ldy 	#0 							; compare len(s1) - len(s2)
.1ca6	38		sec				sec
.1ca7	b1 04		lda ($04),y			lda 	(temp0),y
.1ca9	f1 06		sbc ($06),y			sbc 	(temp1),y
.1cab					_SCReturnResult:
.1cab	08		php				php 								; set return to zero preserving PSW.
.1cac	a2 00		ldx #$00			ldx 	#0
.1cae	28		plp				plp
.1caf	f0 05		beq $1cb6			beq 	_SCExit 					; two values equal, then exit
.1cb1	ca		dex				dex 								; X = $FF
.1cb2	90 02		bcc $1cb6			bcc 	_SCExit 					; if 1st < 2nd then -1
.1cb4	a2 01		ldx #$01			ldx 	#1 							; X = $01 if greater
.1cb6					_SCExit:
.1cb6	68		pla				pla
.1cb7	a8		tay				tay
.1cb8	68		pla				pla
.1cb9	60		rts				rts
.1cba					CopyStringPair:
.1cba	b5 48		lda $48,x			lda 	esInt0,x
.1cbc	85 04		sta $04				sta 	temp0
.1cbe	b5 50		lda $50,x			lda 	esInt1,x
.1cc0	85 05		sta $05				sta 	temp0+1
.1cc2	b5 49		lda $49,x			lda 	esInt0+1,x
.1cc4	85 06		sta $06				sta 	temp1
.1cc6	b5 51		lda $51,x			lda 	esInt1+1,x
.1cc8	85 07		sta $07				sta 	temp1+1
.1cca	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/concat.asm

.1ccb					StringConcat:
.1ccb	aa		tax				tax									; stack pos in X
.1ccc	98		tya				tya
.1ccd	48		pha				pha
.1cce	20 ba 1c	jsr $1cba			jsr 	CopyStringPair 				; temp0 and temp1 point to strings to concat.
.1cd1	38		sec				sec 								; calculate alloc strings. lengths added + 1 for size.
.1cd2	a0 00		ldy #$00			ldy 	#0
.1cd4	b1 04		lda ($04),y			lda 	(temp0),y
.1cd6	71 06		adc ($06),y			adc 	(temp1),y
.1cd8	b0 1d		bcs $1cf7			bcs 	_SCError 					; just too many characters here.
.1cda	20 12 1d	jsr $1d12			jsr 	AllocateSoftString 			; allocate soft string memory, set pointer.
.1cdd	a5 7a		lda $7a				lda 	SoftMemAlloc 				; copy the memory allocation pointer to the stack.
.1cdf	95 48		sta $48,x			sta 	esInt0,x 					; type is already string.
.1ce1	a5 7b		lda $7b				lda 	SoftMemAlloc+1
.1ce3	95 50		sta $50,x			sta 	esInt1,x
.1ce5	20 fc 1c	jsr $1cfc			jsr 	_SCCopyTemp0 				; copy temp0
.1ce8	a5 06		lda $06				lda 	temp1 						; copy temp1 to temp0
.1cea	85 04		sta $04				sta 	temp0
.1cec	a5 07		lda $07				lda 	temp1+1
.1cee	85 05		sta $05				sta 	temp0+1
.1cf0	20 fc 1c	jsr $1cfc			jsr 	_SCCopyTemp0 				; copy temp0 e.g. what was temp1.
.1cf3	68		pla				pla
.1cf4	a8		tay				tay
.1cf5	8a		txa				txa 								; and A
.1cf6	60		rts				rts
.1cf7					_SCError:
.1cf7	a2 0c		ldx #$0c			ldx 	#ErrorID_StrLen
.1cf9	20 51 1c	jsr $1c51			jsr 	ErrorHandler
.1cfc					_SCCopyTemp0:
.1cfc	a0 00		ldy #$00			ldy 	#0 							; put count in temp2
.1cfe	b1 04		lda ($04),y			lda 	(temp0),y
.1d00	85 08		sta $08				sta 	temp2
.1d02					_SCCopyLoop:
.1d02	a5 08		lda $08				lda 	temp2 						; done the lot
.1d04	f0 0b		beq $1d11			beq 	_SCCopyExit
.1d06	c6 08		dec $08				dec 	temp2
.1d08	c8		iny				iny 								; get next char
.1d09	b1 04		lda ($04),y			lda 	(temp0),y
.1d0b	20 3a 1d	jsr $1d3a			jsr 	WriteSoftString 			; write to soft string.
.1d0e	4c 02 1d	jmp $1d02			jmp 	_SCCopyLoop
.1d11					_SCCopyExit:
.1d11	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/memory.asm

.007a					softMemAlloc:
>007a							.fill 	2  							; if MSB is zero needs resetting on allocation.
.1d12					AllocateSoftString:
.1d12	85 0a		sta $0a				sta 	tempShort 					; save count
.1d14	98		tya				tya
.1d15	48		pha				pha
.1d16	a5 7b		lda $7b				lda 	softMemAlloc+1 				; if the high byte is zero, it needs allocating.
.1d18	d0 0b		bne $1d25			bne 	_ASSDone
.1d1a	ad 6c 08	lda $086c			lda 	highMemory 					; reset the soft memory alloc pointer.
.1d1d	85 7a		sta $7a				sta 	softMemAlloc 				; to speed up slightly, we only reset this when we first need it
.1d1f	ac 6d 08	ldy $086d			ldy 	highMemory+1 				; but it needs to be reset before each command.
.1d22	88		dey				dey
.1d23	84 7b		sty $7b				sty 	softMemAlloc+1
.1d25					_ASSDone:
.1d25	38		sec				sec 								; allocate downwards enough memory
.1d26	a5 7a		lda $7a				lda 	softMemAlloc
.1d28	e5 0a		sbc $0a				sbc 	tempShort
.1d2a	85 7a		sta $7a				sta 	softMemAlloc
.1d2c	a5 7b		lda $7b				lda 	softMemAlloc+1
.1d2e	e9 00		sbc #$00			sbc 	#0
.1d30	85 7b		sta $7b				sta 	softMemAlloc+1
.1d32	a9 00		lda #$00			lda 	#0 							; empty that string, set the length = 0.
.1d34	a8		tay				tay
.1d35	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1d37	68		pla				pla
.1d38	a8		tay				tay
.1d39	60		rts				rts
.1d3a					WriteSoftString:
.1d3a	84 0a		sty $0a				sty 	tempShort 					; save Y
.1d3c	48		pha				pha
.1d3d	a0 00		ldy #$00			ldy 	#0 							; get and bump length
.1d3f	b1 7a		lda ($7a),y			lda 	(softMemAlloc),y
.1d41	18		clc				clc
.1d42	69 01		adc #$01			adc 	#1
.1d44	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1d46	a8		tay				tay 								; pointer in Y
.1d47	68		pla				pla 								; get char and write.
.1d48	91 7a		sta ($7a),y			sta 	(softMemAlloc),y
.1d4a	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y and exit.
.1d4c	60		rts				rts

;******  Return to file: ../source/string/string.asm


;******  Processing file: ../source/string/substring.asm

.1d4d					StringSubstring:
.1d4d	48		pha				pha
.1d4e	aa		tax				tax 								; access stack.
>1d4f	db						.byte 	$DB
.1d50	ea		nop				nop
.1d51	68		pla				pla
.1d52	60		rts				rts

;******  Return to file: ../source/string/string.asm

.1d53					stringHandler:
.1d53	7c 56 1d	jmp ($1d56,x)			jmp 	(stringVectors,x)
.1d56					stringVectors:
>1d56	60 1c					.word StringChrs           ; index 0
>1d58	cb 1c					.word StringConcat         ; index 2
>1d5a	82 1c					.word STRCompare           ; index 4
>1d5c	4d 1d					.word StringSubstring      ; index 6

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/tokeniser/tokeniser.asm

.1d5e					tokeniserHandler:
.1d5e	7c 61 1d	jmp ($1d61,x)			jmp 	(tokeniserVectors,x)
.1d61					tokeniserVectors:

;******  Return to file: ../source/basic.asm


;******  Processing file: ../source/variable/variable.asm


;******  Processing file: ../source/variable/access.asm

.1d61					AccessVariable:
.1d61	aa		tax				tax 								; stack in X
.1d62	c8		iny				iny
.1d63	b1 02		lda ($02),y			lda 	(codePtr),y
.1d65	88		dey				dey
.1d66	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1d68	d0 15		bne $1d7f			bne 	_AVLong
.1d6a	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1d6c	38		sec				sec 	 							; make it 0-25
.1d6d	e9 01		sbc #$01			sbc 	#1
.1d6f	0a		asl a				asl 	a 							; x 4 is LSB of address
.1d70	0a		asl a				asl 	a
.1d71	95 48		sta $48,x			sta 	esInt0,x
.1d73	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.1d75	95 50		sta $50,x			sta 	esInt1,x
.1d77	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1d79	95 40		sta $40,x			sta 	esType,x
.1d7b	c8		iny				iny 								; skip over the variable reference in the code.
.1d7c	c8		iny				iny
.1d7d	8a		txa				txa 								; stack in A to return.
.1d7e	60		rts				rts
.1d7f					_AVLong:
.1d7f	80 fe		bra $1d7f			bra 	_AVLong

;******  Return to file: ../source/variable/variable.asm

.1d81					variableHandler:
.1d81	7c 84 1d	jmp ($1d84,x)			jmp 	(variableVectors,x)
.1d84					variableVectors:
>1d84	61 1d					.word AccessVariable       ; index 0

;******  Return to file: ../source/basic.asm


;******  End of listing
