
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass -Wall -q -c -L basic.lst -l basic.lbl -Wall -o basic.prg ..\source\basic.asm
; Fri Feb 26 17:09:34 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: ..\source\basic.asm


;******  Processing file: ..\source\main/01common.inc

=8					StackSize = 8

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/02macros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/03data.inc

>0002					codePtr:.fill 	2							; (codePtr),y points to code.
>0004					temp0: 	.fill 	2							; working variables.
>0006					temp1: 	.fill 	2
>0008					temp2: 	.fill 	2
.000a					tempShort:
>000a							.fill 	1
>0040					esType:	.fill 	StackSize  					; type byte (see above)
>0048					esInt0:	.fill 	StackSize 					; integer or mantissa
>0050					esInt1:	.fill 	StackSize
>0058					esInt2:	.fill 	StackSize
>0060					esInt3:	.fill 	StackSize
>0068					esExp:	.fill 	StackSize 					; exponent
>0070					esSign: .fill 	StackSize 					; sign byte for floating point only
=$48					esMant0 = esInt0 							; synonyms.
=$50					esMant1 = esInt1
=$58					esMant2 = esInt2
=$60					esMant3 = esInt3
>0800							.align	256
.0800					SingleLetterVar:
>0800					 		.fill 	26*4 						; storage for variable A-Z.
.0868					basePage:
>0868							.fill 	2

;******  Processing file: ..\source\main/../generated/tokenconst.inc

=$80					TOK_EOL=$80
=$81					TOK_SHIFT1=$81
=$82					TOK_SHIFT2=$82
=$83					TOK_SHIFT3=$83
=$84					TOK_FPC=$84
=$85					TOK_STR=$85
=$86					TOK_BINARYST=$86
=$9d					TOK_STRUCTST=$9d
=$a2					TOK_UNARYST=$a2
=$c1					TOK_TOKENS=$c1
=$86					TKW_AND                      = $86 ; and
=$87					TKW_OR                       = $87 ; or
=$88					TKW_XOR                      = $88 ; xor
=$89					TKW_GREATEREQUAL             = $89 ; >=
=$8a					TKW_LESSEQUAL                = $8a ; <=
=$8b					TKW_GREATER                  = $8b ; >
=$8c					TKW_LESS                     = $8c ; <
=$8d					TKW_EQUAL                    = $8d ; =
=$8e					TKW_LESSGREATER              = $8e ; <>
=$8f					TKW_PLUS                     = $8f ; +
=$90					TKW_MINUS                    = $90 ; -
=$91					TKW_GREATERGREATER           = $91 ; >>
=$92					TKW_LESSLESS                 = $92 ; <<
=$93					TKW_STAR                     = $93 ; *
=$94					TKW_SLASH                    = $94 ; /
=$95					TKW_MOD                      = $95 ; mod
=$96					TKW_HAT                      = $96 ; ^
=$97					TKW_PLING                    = $97 ; !
=$98					TKW_QMARK                    = $98 ; ?
=$99					TKW_REPEAT                   = $99 ; repeat
=$9a					TKW_WHILE                    = $9a ; while
=$9b					TKW_FOR                      = $9b ; for
=$9c					TKW_IF                       = $9c ; if
=$9d					TKW_UNTIL                    = $9d ; until
=$9e					TKW_WEND                     = $9e ; wend
=$9f					TKW_NEXT                     = $9f ; next
=$a0					TKW_THEN                     = $a0 ; then
=$a1					TKW_ENDIF                    = $a1 ; endif
=$a2					TKW_LPAREN                   = $a2 ; (
=$a3					TKW_LENLPAREN                = $a3 ; len(
=$a4					TKW_SGNLPAREN                = $a4 ; sgn(
=$a5					TKW_ABSLPAREN                = $a5 ; abs(
=$a6					TKW_RANDOMLPAREN             = $a6 ; random(
=$a7					TKW_PAGE                     = $a7 ; page
=$a8					TKW_TRUE                     = $a8 ; true
=$a9					TKW_FALSE                    = $a9 ; false
=$aa					TKW_MINLPAREN                = $aa ; min(
=$ab					TKW_MAXLPAREN                = $ab ; max(
=$ac					TKW_SYSLPAREN                = $ac ; sys(
=$ad					TKW_TIMERLPAREN              = $ad ; timer(
=$ae					TKW_EVENTLPAREN              = $ae ; event(
=$af					TKW_GETLPAREN                = $af ; get(
=$b0					TKW_INKEYLPAREN              = $b0 ; inkey(
=$b1					TKW_ALLOCLPAREN              = $b1 ; alloc(
=$b2					TKW_CHRDOLLARLPAREN          = $b2 ; chr$(
=$b3					TKW_LEFTDOLLARLPAREN         = $b3 ; left$(
=$b4					TKW_MIDDOLLARLPAREN          = $b4 ; mid$(
=$b5					TKW_RIGHTDOLLARLPAREN        = $b5 ; right$(
=$b6					TKW_STRDOLLARLPAREN          = $b6 ; str$(
=$b7					TKW_VALLPAREN                = $b7 ; val(
=$b8					TKW_PEEKLPAREN               = $b8 ; peek(
=$b9					TKW_DEEKLPAREN               = $b9 ; deek(
=$ba					TKW_LEEKLPAREN               = $ba ; leek(
=$bb					TKW_ASCLPAREN                = $bb ; asc(
=$bc					TKW_INTLPAREN                = $bc ; int(
=$bd					TKW_FLOATLPAREN              = $bd ; float(
=$be					TKW_AT                       = $be ; @
=$bf					TKW_WAVY                     = $bf ; ~
=$c0					TKW_AMP                      = $c0 ; &
=$c1					TKW_RPAREN                   = $c1 ; )
=$c2					TKW_COLON                    = $c2 ; :
=$c3					TKW_COMMA                    = $c3 ; ,
=$c4					TKW_SEMICOLON                = $c4 ; ;
=$c5					TKW_RSQPAREN                 = $c5 ; ]
=$c6					TKW_TO                       = $c6 ; to
=$c7					TKW_STEP                     = $c7 ; step
=$c8					TKW_PROC                     = $c8 ; proc
=$c9					TKW_ENDPROC                  = $c9 ; endproc
=$ca					TKW_LOCAL                    = $ca ; local
=$cb					TKW_REM                      = $cb ; rem
=$cc					TKW_LET                      = $cc ; let
=$cd					TKW_QUOTE                    = $cd ; '
=$ce					TKW_LSQPAREN                 = $ce ; [
=$cf					TKW_INPUT                    = $cf ; input
=$d0					TKW_ELSE                     = $d0 ; else
=$d1					TKW_VDU                      = $d1 ; vdu
=$d2					TKW_READ                     = $d2 ; read
=$d3					TKW_DATA                     = $d3 ; data
=$d4					TKW_RESTORE                  = $d4 ; restore
=$d5					TKW_PRINT                    = $d5 ; print
=$d6					TKW_GOTO                     = $d6 ; goto
=$d7					TKW_GOSUB                    = $d7 ; gosub
=$d8					TKW_RETURN                   = $d8 ; return
=$d9					TKW_ASSERT                   = $d9 ; assert
=$da					TKW_STOP                     = $da ; stop
=$db					TKW_END                      = $db ; end
=$dc					TKW_DIM                      = $dc ; dim
=$dd					TKW_POKE                     = $dd ; poke
=$de					TKW_DOKE                     = $de ; doke
=$df					TKW_LOKE                     = $df ; loke
=$86					TKW_CLEAR                    = $86 ; clear
=$87					TKW_LOAD                     = $87 ; load
=$88					TKW_SAVE                     = $88 ; save
=$89					TKW_LIST                     = $89 ; list
=$8a					TKW_NEW                      = $8a ; new
=$8b					TKW_RUN                      = $8b ; run
=$8c					TKW_CODE                     = $8c ; code
=$8d					TKW_OPTION                   = $8d ; option
=$86					TKW_VPOKE                    = $86 ; vpoke
=$86					TKW_VPEEKLPAREN              = $86 ; vpeek(

;******  Return to file: ..\source\main/03data.inc

=$3a					TYPE_INT =		($3A) 						; type bytes that end identifier.
=$3b					TYPE_INTARRAY =	($3B)
=$3c					TYPE_STR =		($3C)
=$3d					TYPE_STRARRAY =	($3D)
=$3e					TYPE_FLOAT =	($3E)
=$3f					TYPE_FLOATARRAY=($3F)

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/imath/intmacros.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/errorhandler.inc


;******  Processing file: ..\source\error/../generated/errorid.inc

=1					ErrorID_Syntax = 1 ; Syntax Error
=2					ErrorID_NoModule = 2 ; Module disabled
=3					ErrorID_Assert = 3 ; Assert
=4					ErrorID_DivZero = 4 ; Divide By Zero
=5					ErrorID_Stop = 5 ; Stop
=6					ErrorID_BadType = 6 ; Type Mismatch
=7					ErrorID_BadValue = 7 ; Illegal Value
=8					ErrorID_MissingRP = 8 ; Missing right bracket
=9					ErrorID_MissingComma = 9 ; Missing comma

;******  Return to file: ..\source\error/errorhandler.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.inc


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\main/main.asm


;******  Processing file: ..\source\main/00start.asm

.1000	a2 ff		ldx #$ff	Start:	ldx 	#$FF
.1002	9a		txs				txs
.1003	a9 00		lda #$00			lda 	#(testBaseAddress) & $FF
.1005	8d 68 08	sta $0868			sta 	basePage
.1008	a9 50		lda #$50			lda 	#(testBaseAddress) >> 8
.100a	8d 69 08	sta $0869			sta 	1+(basePage)
.100d	4c 1e 10	jmp $101e			jmp 	Command_Run
.195f					ReturnPos:
.5000					testBaseAddress:

;******  Processing file: ..\source\main/../generated/testcode.inc

>5000	16 64 00 d9 a2 65 69 7e			.byte 22,100,0,217,162,101,105,126,104,144,144,89,108,122,114,193,141,127,86,121,90,128,19,110,0,217,162,92,122,126,69,148,144,97,114,94,98,193,141,64,128,21,120,0,217,162,70,110,71,123,149,91,108,65,117,193,141,70,110,71,123,128,20,130,0,217,162,144,97,110,65,118,140,144,105,108,97,193,141,144,65,128,19,140,0,217,162,84,91,116,97,142,97,75,124,86,193,141,144,65,128,20,150,0,217,162,144,69,97,94,84,139,144,66,93,87,85,193,141,64,128,21,160,0,217,162,90,112,96,72,136,95,95,107,75,193,141,69,111,75,67,128,20,170,0,217,162,144,77,93,77,95,140,144,80,70,97,72,193,141,64,128,19,180,0,217,162,70,97,90,84,140,144,88,64,100,120,193,141,64,128,23,190,0,217,162,144,78,125,123,83,136,92,65,108,67,193,141,144,82,124,87,82,128,23,200,0,217,162,144,82,126,86,66,136,78,106,93,64,193,141,144,92,84,75,66,128,19,210,0,217,162,93,87,98,117,139,66,81,81,90,193,141,144,65,128,20,220,0,217,162,144,72,77,121,98,138,80,120,70,109,193,141,144,65,128,21,230,0,217,162,82,96,125,77,134,80,67,72,101,193,141,80,64,72,69,128,21,240,0,217,162,144,68,97,122,88,139,144,69,101,105,80,193,141,144,65,128,22,250,0,217,162,76,68,73,66,135,144,76,127,112,67,193,141,144,123,112,65,128,20,4,1,217,162,92,106,118,90,137,144,66,93,112,84,193,141,144,65,128,21,14,1,217,162,144,72,71,105,87,138,144,66,95,78,112,193,141,144,65,128,21,24,1,217,162,144,100,117,118,68,142,144,91,119,108,101,193,141,144,65,128,19,34,1,217,162,144,80,102,97,66,148,144,100,126,84,193,141,92,128,23,44,1,217,162,144,94,106,114,83,136,72,110,124,95,193,141,144,86,68,78,78,128,19,54,1,217,162,99,81,107,118,140,144,81,98,68,112,193,141,64,128,18,64,1,217,162,90,92,80,72,141,68,70,120,95,193,141,64,128,20,74,1,217,162,144,75,126,83,120,138,144,96,71,126,119,193,141,64,128,21,84,1,217,162,144,74,97,108,91,139,144,91,82,79,101,193,141,144,65,128,18,94,1,217,162,80,115,78,101,148,71,82,121,106,193,141,66,128,19,104,1,217,162,91,102,88,83,140,144,81,93,70,99,193,141,64,128,24,114,1,217,162,144,68,75,106,67,135,144,76,125,101,87,193,141,144,68,73,96,67,128,22,124,1,217,162,144,68,64,96,94,143,77,96,113,79,193,141,73,96,80,113,128,21,134,1,217,162,98,103,74,94,144,66,75,69,97,193,141,96,92,68,125,128,18,144,1,217,162,67,104,75,66,139,100,118,115,88,193,141,64,128,22,154,1,217,162,144,65,98,100,69,134,91,118,95,94,193,141,90,84,91,90,128,23,164,1,217,162,144,100,105,73,95,143,94,86,113,116,193,141,144,70,82,87,107,128,19,174,1,217,162,67,92,123,118,140,73,123,107,102,193,141,144,65,128,20,184,1,217,162,144,70,68,89,90,141,144,85,103,91,85,193,141,64,128,23,194,1,217,162,144,94,115,95,105,144,80,75,96,127,193,141,144,110,127,64,104,128,18,204,1,217,162,73,117,114,120,137,100,114,97,81,193,141,64,128,18,214,1,217,162,97,108,120,72,141,69,103,127,82,193,141,64,128,21,224,1,217,162,144,77,77,87,116,140,144,75,111,112,100,193,141,144,65,128,19,234,1,217,162,99,84,123,79,141,144,83,87,124,103,193,141,64,128,20,244,1,217,162,144,88,96,69,85,142,101,118,77,126,193,141,144,65,128,21,254,1,217,162,73,79,91,95,135,90,74,94,113,193,141,91,79,95,127,128,21,8,2,217,162,144,65,65,75,104,137,144,74,74,89,69,193,141,144,65,128,20,18,2,217,162,144,86,70,95,97,141,144,90,93,71,117,193,141,64,128,20,28,2,217,162,144,79,108,120,96,148,78,125,117,110,193,141,144,65,128,18,38,2,217,162,102,67,109,100,141,97,86,119,68,193,141,64,128,19,48,2,217,162,66,80,120,69,142,71,80,79,117,193,141,144,65,128,23,58,2,217,162,69,127,90,123,135,144,81,123,76,88,193,141,144,80,64,68,69,128,24,68,2,217,162,144,85,79,122,65,134,144,100,84,70,78,193,141,144,117,95,126,78,128,20,78,2,217,162,144,76,118,102,124,148,144,79,109,120,119,193,141,64,128,24,88,2,217,162,144,89,79,108,71,144,144,67,94,113,94,193,141,144,85,112,122,105,128,21,98,2,217,162,78,82,75,92,149,74,83,70,119,193,141,67,127,68,101,128,21,108,2,217,162,66,74,82,91,134,144,86,105,78,126,193,141,66,80,66,128,17,118,2,217,162,70,107,110,122,148,126,73,75,193,141,70,128,20,128,2,217,162,144,72,98,92,96,138,144,102,67,108,83,193,141,64,128,19,138,2,217,162,72,122,95,89,138,144,91,91,67,120,193,141,64,128,22,148,2,217,162,67,69,93,69,134,144,73,119,76,68,193,141,66,64,81,68,128,23,158,2,217,162,144,69,114,79,111,136,95,117,112,78,193,141,144,90,71,127,97,128,21,168,2,217,162,87,94,86,123,143,96,118,96,83,193,141,120,84,119,78,128,21,178,2,217,162,75,76,101,69,149,79,77,114,104,193,141,75,76,101,69,128,22,188,2,217,162,84,77,83,108,144,92,79,89,79,193,141,144,72,66,69,99,128,22,198,2,217,162,100,102,80,105,134,144,97,104,112,127,193,141,68,70,64,65,128,20,208,2,217,162,144,66,73,86,67,140,144,66,75,83,80,193,141,64,128,19,218,2,217,162,93,86,105,83,142,90,110,118,87,193,141,144,65,128,19,228,2,217,162,68,76,89,69,141,144,93,89,68,122,193,141,64,128,18,238,2,217,162,94,75,77,82,148,88,116,122,101,193,141,65,128,19,248,2,217,162,87,78,78,94,138,92,99,94,93,193,141,144,65,128,20,2,3,217,162,144,89,115,88,89,142,87,115,70,120,193,141,144,65,128,22,12,3,217,162,94,126,85,106,143,144,94,127,118,124,193,141,144,65,97,82,128,19,22,3,217,162,71,73,125,65,148,144,90,104,95,64,193,141,64,128,19,32,3,217,162,93,125,107,114,138,144,94,82,102,90,193,141,64,128,23,42,3,217,162,144,85,68,81,83,144,144,93,88,121,81,193,141,72,84,103,126,128,20,52,3,217,162,82,65,88,116,142,144,69,82,81,73,193,141,144,65,128,20,62,3,217,162,144,73,122,101,82,137,144,70,97,118,119,193,141,64,128,23,72,3,217,162,144,75,71,107,89,144,144,94,127,92,103,193,141,83,119,113,78,128,18,82,3,217,162,74,106,89,95,141,96,67,82,99,193,141,64,128,23,92,3,217,162,144,68,120,111,115,144,144,98,82,88,103,193,141,93,89,104,116,128,19,102,3,217,162,144,66,111,127,78,141,84,116,116,81,193,141,64,128,21,112,3,217,162,87,108,119,64,149,76,101,114,110,193,141,75,71,68,82,128,24,122,3,217,162,144,84,77,65,107,144,144,79,80,126,96,193,141,144,68,124,67,75,128,21,132,3,217,162,87,89,85,102,143,71,91,124,116,193,141,94,117,82,90,128,23,142,3,217,162,73,70,113,91,136,144,67,126,88,111,193,141,144,74,120,105,118,128,17,152,3,217,162,69,77,70,141,97,121,76,124,193,141,64,128,22,162,3,217,162,88,87,117,119,143,144,79,100,104,64,193,141,72,115,77,119,128,19,172,3,217,162,144,96,78,95,95,139,69,119,82,115,193,141,64,128,20,182,3,217,162,144,76,98,106,76,142,95,72,112,117,193,141,144,65,128,20,192,3,217,162,144,101,71,124,86,140,90,83,119,70,193,141,144,65,128,19,202,3,217,162,80,105,87,69,140,144,71,96,121,103,193,141,64,128,19,212,3,217,162,87,86,99,82,138,144,93,74,125,95,193,141,64,128,23,222,3,217,162,102,65,72,115,136,144,67,96,88,116,193,141,144,101,97,80,65,128,22,232,3,217,162,68,78,89,127,144,144,83,89,105,124,193,141,87,104,67,123,128,19,242,3,217,162,144,115,74,81,138,73,75,92,76,193,141,144,65,128,20,252,3,217,162,76,66,79,122,139,144,79,110,77,79,193,141,144,65,128,18,6,4,217,162,67,64,77,141,144,99,72,105,99,193,141,64,128,21,16,4,217,162,75,109,64,102,134,144,102,79,110,193,141,75,73,64,66,128,20,26,4,217,162,68,64,115,88,149,65,76,108,67,193,141,90,111,79,128,18,36,4,217,162,67,87,80,101,137,97,83,88,123,193,141,64,128,18,46,4,217,162,87,89,104,111,140,81,73,75,110,193,141,64,128,20,56,4,217,162,144,73,66,94,109,148,70,97,105,105,193,141,144,65,128,20,66,4,217,162,96,69,73,88,137,144,65,74,77,73,193,141,144,65,128,24,76,4,217,162,144,78,72,126,66,134,144,93,94,80,113,193,141,144,95,94,126,114,128,21,86,4,217,162,85,108,67,91,149,84,81,104,91,193,141,65,90,91,64,128,22,96,4,217,162,66,102,83,122,144,144,98,120,68,92,193,141,101,94,88,86,128,24,106,4,217,162,144,83,69,69,116,134,144,87,82,90,66,193,141,144,87,87,95,116,128,24,116,4,217,162,144,67,114,105,66,134,144,93,114,102,85,193,141,144,95,114,111,86,128,19,126,4,217,162,81,88,81,65,141,144,75,85,98,106,193,141,64,128,24,136,4,217,162,144,85,113,83,73,135,144,71,83,101,127,193,141,144,69,81,65,73,128,20,146,4,217,162,144,67,123,88,109,138,144,88,85,110,80,193,141,64,128,19,156,4,217,162,83,111,88,87,141,144,66,78,80,94,193,141,64,128,18,166,4,217,162,76,73,125,106,141,96,94,127,65,193,141,64,128,21,176,4,217,162,144,95,116,86,134,99,84,122,70,193,141,99,64,74,66,128,19,186,4,217,162,67,81,91,72,141,144,76,117,117,96,193,141,64,128,21,196,4,217,162,82,94,125,100,149,88,88,107,75,193,141,82,94,125,100,128,21,206,4,217,162,100,121,90,66,134,84,90,124,84,193,141,68,88,88,64,128,19,216,4,217,162,72,70,80,82,141,144,66,65,96,72,193,141,64,128,23,226,4,217,162,144,75,88,105,118,135,84,77,68,79,193,141,144,75,80,105,113,128,23,236,4,217,162,144,79,102,64,112,144,144,98,77,97,64,193,141,82,103,96,80,128,23,246,4,217,162,144,95,121,122,90,144,74,116,114,106,193,141,144,106,110,109,68,128,21,0,5,217,162,85,67,127,100,149,77,124,74,110,193,141,71,71,116,118,128,21,10,5,217,162,87,105,78,68,149,90,92,108,107,193,141,87,105,78,68,128,19,20,5,217,162,144,70,95,94,101,139,74,96,92,80,193,141,64,128,20,30,5,217,162,144,80,77,103,110,148,144,98,82,89,72,193,141,64,128,19,40,5,217,162,144,94,97,93,117,141,91,77,94,124,193,141,64,128,20,50,5,217,162,99,71,88,95,142,144,72,124,109,119,193,141,144,65,128,24,60,5,217,162,144,79,94,106,115,143,144,93,114,95,83,193,141,144,109,81,74,70,128,19,70,5,217,162,144,69,115,75,92,141,100,109,84,105,193,141,64,128,22,80,5,217,162,82,83,124,83,143,144,66,127,79,100,193,141,79,84,108,111,128,21,90,5,217,162,68,106,87,115,135,144,94,92,79,193,141,144,84,72,77,128,19,100,5,217,162,85,106,116,87,148,144,96,97,112,79,193,141,64,128,24,110,5,217,162,144,78,123,107,124,135,144,89,65,120,97,193,141,144,72,65,104,97,128,21,120,5,217,162,92,101,118,88,143,73,127,98,77,193,141,102,101,88,101,128,17,130,5,217,162,119,70,104,139,86,119,104,64,193,141,64,128,20,140,5,217,162,144,74,93,92,77,140,93,110,71,91,193,141,144,65,128,20,150,5,217,162,144,99,92,106,105,140,69,76,121,88,193,141,144,65,128,19,160,5,217,162,80,124,89,126,141,144,77,68,67,75,193,141,64,128,20,170,5,217,162,83,92,100,120,142,144,89,74,70,66,193,141,144,65,128,20,180,5,217,162,144,90,85,108,79,141,144,70,106,125,126,193,141,64,128,23,190,5,217,162,144,74,65,99,110,136,144,71,100,81,112,193,141,77,101,114,66,128,20,200,5,217,162,71,88,91,87,139,144,75,87,109,84,193,141,144,65,128,23,210,5,217,162,144,80,121,102,96,143,67,67,95,117,193,141,144,77,118,70,107,128,21,220,5,217,162,73,100,112,69,136,99,99,96,77,193,141,106,71,80,72,128,20,230,5,217,162,88,85,65,87,148,144,81,95,102,106,193,141,144,65,128,18,240,5,217,162,93,102,106,123,139,94,112,107,70,193,141,64,128,22,250,5,217,162,86,102,91,70,144,91,72,112,107,193,141,144,68,98,85,101,128,22,4,6,217,162,144,80,118,93,113,143,83,70,70,83,193,141,66,79,104,98,128,18,14,6,217,162,87,117,87,109,148,87,116,81,110,193,141,65,128,24,24,6,217,162,144,91,70,122,113,135,144,94,91,68,111,193,141,144,90,66,64,97,128,21,34,6,217,162,89,126,113,93,134,76,83,115,80,193,141,72,82,113,80,128,22,44,6,217,162,144,83,85,108,144,144,82,89,112,110,193,141,82,70,91,66,128,19,54,6,217,162,144,79,65,80,114,148,84,76,67,120,193,141,64,128,20,64,6,217,162,144,100,92,83,73,142,93,82,112,94,193,141,144,65,128,20,74,6,217,162,144,90,110,80,92,137,144,86,80,91,64,193,141,64,128,23,84,6,217,162,144,67,111,81,114,144,72,85,94,80,193,141,144,76,68,112,66,128,21,94,6,217,162,92,124,126,71,149,99,91,70,109,193,141,92,124,126,71,128,23,104,6,217,162,68,94,114,86,136,144,90,70,71,99,193,141,144,94,88,117,117,128,20,114,6,217,162,67,93,84,116,142,144,75,68,123,101,193,141,144,65,128,23,124,6,217,162,144,85,96,102,71,144,144,85,75,125,111,193,141,144,84,104,88,128,20,134,6,217,162,97,93,84,88,142,144,101,86,117,94,193,141,144,65,128,22,144,6,217,162,74,105,69,92,144,95,76,86,75,193,141,144,84,99,80,111,128,22,154,6,217,162,144,100,79,91,102,134,76,67,116,84,193,141,72,64,100,80,128,19,164,6,217,162,101,122,90,70,140,144,67,108,112,116,193,141,64,128,21,174,6,217,162,93,80,119,109,149,90,104,88,75,193,141,66,104,95,98,128,22,184,6,217,162,67,93,79,111,144,144,65,91,109,67,193,141,68,120,124,114,128,20,194,6,217,162,89,98,118,123,139,144,68,67,126,90,193,141,144,65,128,19,204,6,217,162,67,83,103,74,141,144,92,107,113,89,193,141,64,128,20,214,6,217,162,144,66,69,117,127,138,144,84,86,86,95,193,141,64,128,21,224,6,217,162,144,77,118,86,70,134,68,99,90,76,193,141,65,72,72,128,19,234,6,217,162,144,99,72,88,70,141,77,123,70,107,193,141,64,128,18,244,6,217,162,90,101,109,80,148,98,89,115,100,193,141,64,128,21,254,6,217,162,75,111,109,89,136,86,95,87,83,193,141,93,112,122,74,128,18,8,7,217,162,78,102,127,95,148,76,120,112,103,193,141,65,128,21,18,7,217,162,144,94,123,119,77,140,144,74,70,111,65,193,141,144,65,128,23,28,7,217,162,144,105,104,97,143,144,85,107,110,81,193,141,144,86,85,86,114,128,19,38,7,217,162,144,74,118,96,101,139,71,84,117,124,193,141,64,128,23,48,7,217,162,144,84,75,115,79,136,94,98,79,86,193,141,144,74,105,124,89,128,22,58,7,217,162,144,72,102,121,110,143,77,96,83,94,193,141,68,121,89,112,128,20,68,7,217,162,144,81,115,72,87,138,144,94,71,114,89,193,141,64,128,20,78,7,217,162,67,117,67,134,144,94,96,103,76,193,141,67,80,64,128,23,88,7,217,162,144,99,77,125,104,136,78,99,99,94,193,141,144,109,110,94,122,128,19,98,7,217,162,79,97,77,113,142,91,113,73,112,193,141,144,65,128,22,108,7,217,162,144,73,107,81,115,135,144,99,107,84,193,141,144,99,65,83,128,23,118,7,217,162,144,70,89,108,101,144,65,68,122,93,193,141,144,71,94,103,66,128,19,128,7,217,162,97,102,65,74,142,72,82,64,121,193,141,144,65,128,23,138,7,217,162,92,68,95,121,136,144,80,89,124,124,193,141,144,76,93,99,67,128,24,148,7,217,162,144,95,76,65,79,135,144,68,109,73,118,193,141,144,68,76,65,69,128,21,158,7,217,162,78,112,81,83,149,90,87,83,74,193,141,78,112,81,83,128,19,168,7,217,162,79,115,111,80,140,144,66,84,116,125,193,141,64,128,22,178,7,217,162,144,68,83,73,73,135,144,81,108,85,97,193,141,144,65,65,128,19,188,7,217,162,66,95,65,90,148,144,98,89,79,122,193,141,64,128,22,198,7,217,162,92,124,69,69,144,94,107,95,100,193,141,144,65,111,90,95,128,21,208,7,217,162,90,95,64,64,149,85,89,91,106,193,141,69,69,100,86,128,23,218,7,217,162,81,114,94,65,143,144,86,74,76,74,193,141,144,68,87,110,73,128,22,228,7,217,162,96,121,121,119,143,144,81,104,124,90,193,141,79,80,125,93,128,20,238,7,217,162,144,72,86,106,100,138,85,69,80,77,193,141,144,65,128,23,248,7,217,162,84,88,77,78,135,144,97,127,91,126,193,141,144,97,103,82,114,128,18,2,8,217,162,86,92,127,116,138,69,68,115,101,193,141,64,128,19,12,8,217,162,90,73,81,67,141,144,81,125,64,107,193,141,64,128,22,22,8,217,162,70,106,71,123,134,144,100,124,116,74,193,141,66,66,67,114,128,23,32,8,217,162,144,87,82,75,111,144,99,65,122,92,193,141,144,122,84,70,75,128,20,42,8,217,162,81,124,86,71,142,144,99,87,106,68,193,141,144,65,128,21,52,8,217,162,144,89,127,117,84,142,144,71,83,126,80,193,141,144,65,128,21,62,8,217,162,85,85,112,99,149,101,64,102,77,193,141,85,85,112,99,128,23,72,8,217,162,144,88,101,77,107,136,144,95,118,76,71,193,141,71,83,65,108,128,20,82,8,217,162,144,66,120,116,107,141,144,86,115,105,94,193,141,64,128,23,92,8,217,162,144,79,116,95,76,135,144,96,93,114,120,193,141,144,84,82,68,128,21,102,8,217,162,84,81,105,72,143,74,101,123,74,193,141,94,119,100,82,128,22,112,8,217,162,144,92,96,72,98,134,78,102,120,99,193,141,66,70,112,66,128,18,122,8,217,162,95,92,123,140,144,94,106,94,100,193,141,64,128,18,132,8,217,162,95,103,107,119,138,144,69,126,117,193,141,64,128,19,142,8,217,162,74,119,85,71,138,144,87,123,122,111,193,141,64,128,21,152,8,217,162,83,88,79,80,149,92,69,112,79,193,141,83,88,79,80,128,20,162,8,217,162,100,70,125,88,142,144,84,104,64,77,193,141,144,65,128,20,172,8,217,162,144,74,120,120,85,142,94,111,73,99,193,141,144,65,128,19,182,8,217,162,67,92,88,90,138,91,111,85,112,193,141,144,65,128,22,192,8,217,162,144,67,98,80,79,136,144,91,76,83,193,141,67,121,92,92,128,23,202,8,217,162,69,78,96,89,135,144,83,108,76,111,193,141,144,82,96,76,103,128,20,212,8,217,162,144,73,85,84,84,138,100,70,98,104,193,141,144,65,128,21,222,8,217,162,91,85,112,127,136,67,87,79,95,193,141,88,66,127,96,128,21,232,8,217,162,88,69,97,114,135,68,126,66,111,193,141,92,127,99,127,128,20,242,8,217,162,144,89,87,68,86,141,144,76,95,92,65,193,141,64,128,22,252,8,217,162,144,101,70,116,73,136,144,78,110,67,193,141,101,72,90,74,128,19,6,9,217,162,76,75,93,81,141,144,101,105,67,79,193,141,64,128,18,16,9,217,162,99,96,96,70,139,107,86,123,193,141,144,65,128,22,26,9,217,162,89,107,81,67,134,144,96,64,64,127,193,141,89,107,81,65,128,19,36,9,217,162,144,85,123,113,115,139,74,76,105,86,193,141,64,128,20,46,9,217,162,144,98,76,77,111,148,144,99,80,111,65,193,141,64,128,23,56,9,217,162,80,106,74,101,136,144,83,107,121,107,193,141,144,67,65,115,80,128,22,66,9,217,162,88,126,74,76,143,144,82,90,117,97,193,141,70,99,84,107,128,23,76,9,217,162,144,101,122,94,85,144,88,89,127,116,193,141,144,126,84,94,73,128,22,86,9,217,162,95,76,102,97,144,144,86,114,79,66,193,141,117,126,117,99,128,24,96,9,217,162,144,89,92,87,117,134,144,68,85,106,94,193,141,144,93,93,127,126,128,21,106,9,217,162,95,108,93,74,149,82,121,77,127,193,141,76,115,79,75,128,19,116,9,217,162,144,84,112,88,84,139,82,115,65,70,193,141,64,128,20,126,9,217,162,144,85,100,96,121,138,92,89,78,120,193,141,144,65,128,20,136,9,217,162,144,90,125,74,66,148,144,85,125,114,68,193,141,65,128,19,146,9,217,162,76,76,94,68,138,83,118,67,73,193,141,144,65,128,18,156,9,217,162,67,78,93,111,141,73,98,114,120,193,141,64,128,21,166,9,217,162,83,68,82,77,149,94,89,64,102,193,141,83,68,82,77,128,21,176,9,217,162,72,110,127,75,149,79,127,83,122,193,141,72,110,127,75,128,19,186,9,217,162,70,110,79,116,140,80,72,103,99,193,141,144,65,128,22,196,9,217,162,96,77,123,67,143,144,84,75,119,120,193,141,76,66,67,75,128,23,206,9,217,162,93,124,127,101,136,144,98,70,124,69,193,141,144,127,122,67,98,128,21,216,9,217,162,144,82,124,113,86,140,144,66,116,101,103,193,141,144,65,128,21,226,9,217,162,97,108,112,71,149,91,122,107,72,193,141,69,114,68,127,128,24,236,9,217,162,144,96,126,66,105,134,144,92,105,70,76,193,141,144,124,127,70,108,128,19,246,9,217,162,144,67,99,117,83,137,88,93,97,94,193,141,64,128,18,0,10,217,162,102,71,86,99,140,95,98,104,70,193,141,64,128,22,10,10,217,162,144,101,87,117,86,134,90,105,103,71,193,141,90,104,66,66,128,24,20,10,217,162,144,96,66,109,92,144,144,74,78,103,117,193,141,144,85,116,69,103,128,21,30,10,217,162,81,91,119,121,149,88,97,99,93,193,141,81,91,119,121,128,20,40,10,217,162,144,93,104,102,66,141,144,78,111,119,112,193,141,64,128,20,50,10,217,162,91,100,86,126,149,91,87,88,102,193,141,76,126,88,128,20,60,10,217,162,144,72,123,110,85,138,92,108,98,124,193,141,144,65,128,18,70,10,217,162,98,116,108,120,141,79,87,123,117,193,141,64,128,19,80,10,217,162,67,119,86,81,148,144,75,116,108,65,193,141,64,128,21,90,10,217,162,79,81,97,78,135,88,106,98,119,193,141,95,123,99,127,128,20,100,10,217,162,144,95,80,97,122,140,88,122,65,119,193,141,144,65,128,19,110,10,217,162,79,123,108,66,139,73,118,80,67,193,141,144,65,128,23,120,10,217,162,144,88,118,98,82,144,68,71,114,92,193,141,144,92,126,84,110,128,21,130,10,217,162,144,85,95,90,98,142,144,81,66,123,122,193,141,144,65,128,20,140,10,217,162,144,74,117,77,121,139,144,72,73,118,113,193,141,64,128,19,150,10,217,162,144,67,96,64,74,141,96,88,77,116,193,141,64,128,20,160,10,217,162,144,66,97,112,84,138,90,91,125,118,193,141,144,65,128,21,170,10,217,162,65,64,120,126,149,71,65,116,84,193,141,65,64,120,126,128,23,180,10,217,162,73,96,69,125,143,144,92,89,87,95,193,141,144,82,121,81,98,128,20,190,10,217,162,144,92,89,95,112,138,101,108,108,66,193,141,144,65,128,22,200,10,217,162,84,113,118,81,134,144,83,90,110,80,193,141,68,97,80,80,128,22,210,10,217,162,80,121,67,93,143,144,72,80,70,80,193,141,72,104,125,77,128,21,220,10,217,162,67,99,93,115,149,100,98,64,73,193,141,67,99,93,115,128,20,230,10,217,162,144,72,116,65,119,142,73,93,81,116,193,141,144,65,128,18,240,10,217,162,144,93,99,113,139,91,115,81,100,193,141,64,128,21,250,10,217,162,86,93,71,127,136,73,80,79,101,193,141,95,77,72,90,128,19,4,11,217,162,99,78,108,79,142,78,106,79,98,193,141,144,65,128,20,14,11,217,162,144,82,126,82,114,139,144,72,111,83,64,193,141,64,128,23,24,11,217,162,96,84,111,119,135,144,78,118,102,107,193,141,144,78,98,64,73,128,21,34,11,217,162,72,92,98,107,134,144,88,71,104,67,193,141,88,66,105,128,21,44,11,217,162,93,102,77,64,143,94,65,113,72,193,141,123,103,126,72,128,24,54,11,217,162,144,94,68,67,107,144,144,70,114,96,100,193,141,144,87,81,99,71,128,21,64,11,217,162,69,84,67,72,149,91,108,92,95,193,141,69,84,67,72,128,18,74,11,217,162,86,123,75,89,148,74,99,100,87,193,141,66,128,20,84,11,217,162,144,95,84,77,90,140,79,64,96,84,193,141,144,65,128,21,94,11,217,162,144,91,67,110,90,138,144,85,111,112,100,193,141,144,65,128,19,104,11,217,162,71,109,111,112,137,66,98,110,106,193,141,144,65,128,19,114,11,217,162,80,115,105,118,148,144,94,105,100,71,193,141,64,128,21,124,11,217,162,99,67,109,105,149,82,102,120,101,193,141,80,92,117,68,128,18,134,11,217,162,82,75,110,142,88,127,108,122,193,141,144,65,128,20,144,11,217,162,144,80,72,72,86,142,93,117,72,75,193,141,144,65,128,19,154,11,217,162,144,77,102,112,71,137,88,86,80,91,193,141,64,128,20,164,11,217,162,77,87,88,84,142,144,86,88,105,71,193,141,144,65,128,19,174,11,217,162,80,76,80,149,96,94,116,126,193,141,80,76,80,128,18,184,11,217,162,101,82,115,121,140,81,64,103,68,193,141,64,128,23,194,11,217,162,144,98,113,96,120,135,93,80,74,105,193,141,144,98,97,96,87,128,19,204,11,217,162,72,115,81,126,134,67,76,113,120,193,141,81,120,128,23,214,11,217,162,144,78,121,102,72,135,90,127,65,65,193,141,144,68,64,102,71,128,22,224,11,217,162,144,68,90,120,117,143,92,113,122,96,193,141,88,87,65,107,128,23,234,11,217,162,80,108,121,84,136,144,89,127,110,125,193,141,144,73,83,87,105,128,23,244,11,217,162,144,80,74,64,103,143,75,97,76,79,193,141,144,68,104,116,88,128,20,254,11,217,162,71,85,74,118,137,144,84,102,80,77,193,141,144,65,128,22,8,12,217,162,144,68,126,108,102,135,95,124,96,120,193,141,144,66,76,70,128,19,18,12,217,162,84,87,99,89,138,94,72,113,84,193,141,144,65,128,23,28,12,217,162,97,93,102,69,135,144,80,125,66,116,193,141,144,80,96,64,115,128,21,38,12,217,162,144,71,67,122,119,137,144,78,121,118,96,193,141,144,65,128,23,48,12,217,162,80,89,127,72,135,144,74,124,124,82,193,141,144,74,100,64,82,128,19,58,12,217,162,144,86,124,123,103,139,94,82,91,126,193,141,64,128,20,68,12,217,162,95,102,107,87,148,144,69,95,71,79,193,141,144,69,128,20,78,12,217,162,144,65,126,112,83,138,97,81,66,100,193,141,144,65,128,21,88,12,217,162,144,101,98,77,68,140,144,77,127,126,64,193,141,144,65,128,22,98,12,217,162,87,95,100,88,143,144,72,94,100,92,193,141,79,64,127,124,128,21,108,12,217,162,78,111,120,102,134,74,83,75,98,193,141,74,67,72,98,128,23,118,12,217,162,144,67,121,85,115,136,94,80,69,102,193,141,144,93,105,80,85,128,24,128,12,217,162,144,101,73,115,94,144,144,71,118,114,90,193,141,144,93,83,65,68,128,22,138,12,217,162,90,92,64,106,134,144,92,66,115,121,193,141,66,92,64,66,128,21,148,12,217,162,81,112,70,89,144,79,115,97,120,193,141,65,124,100,97,128,19,158,12,217,162,144,100,109,104,90,141,144,116,81,89,193,141,64,128,21,168,12,217,162,100,103,110,94,149,90,114,95,113,193,141,73,117,78,109,128,23,178,12,217,162,144,99,103,100,125,143,82,69,106,125,193,141,144,81,97,122,64,128,18,188,12,217,162,69,125,79,93,139,80,89,101,101,193,141,64,128,20,198,12,217,162,91,122,109,84,142,144,76,92,65,104,193,141,144,65,128,23,208,12,217,162,144,97,81,85,101,143,92,84,122,66,193,141,144,68,124,91,99,128,20,218,12,217,162,144,80,68,67,79,142,73,64,104,105,193,141,144,65,128,19,228,12,217,162,98,91,117,115,137,96,70,123,72,193,141,144,65,128,24,238,12,217,162,144,100,127,119,111,134,144,85,100,98,105,193,141,144,117,127,119,111,128,23,248,12,217,162,144,80,100,109,121,144,144,95,100,72,78,193,141,78,127,90,85,128,19,2,13,217,162,82,73,64,103,142,79,77,64,68,193,141,144,65,128,20,12,13,217,162,144,70,123,103,94,142,98,79,87,116,193,141,144,65,128,20,22,13,217,162,100,123,103,92,137,144,71,77,121,81,193,141,144,65,128,20,32,13,217,162,97,121,124,94,142,144,71,73,113,102,193,141,144,65,128,21,42,13,217,162,87,100,118,120,149,92,70,126,103,193,141,87,100,118,120,128,18,52,13,217,162,144,65,107,76,137,67,87,101,68,193,141,64,128,19,62,13,217,162,74,84,127,71,138,95,79,125,76,193,141,144,65,128,23,72,13,217,162,144,87,88,123,86,143,65,71,86,102,193,141,144,86,81,100,112,128,23,82,13,217,162,144,93,71,86,127,143,89,101,122,108,193,141,144,67,97,92,83,128,19,92,13,217,162,70,90,102,114,142,99,90,83,124,193,141,144,65,128,19,102,13,217,162,144,73,126,101,122,139,86,73,114,124,193,141,64,128,21,112,13,217,162,73,113,110,91,149,90,96,113,115,193,141,73,113,110,91,128,20,122,13,217,162,144,78,80,92,75,138,67,90,107,74,193,141,144,65,128,23,132,13,217,162,144,87,87,83,92,135,144,72,108,68,87,193,141,144,68,64,83,128,23,142,13,217,162,82,96,93,115,136,144,74,117,66,80,193,141,144,88,85,95,125,128,19,152,13,217,162,81,103,85,92,140,144,95,106,104,107,193,141,64,128,20,162,13,217,162,81,92,97,83,148,144,73,106,75,122,193,141,144,65,128,23,172,13,217,162,144,71,64,92,78,144,144,95,111,94,112,193,141,88,111,66,98,128,20,182,13,217,162,144,74,84,119,102,141,144,92,77,72,115,193,141,64,128,21,192,13,217,162,100,81,104,117,134,101,87,88,107,193,141,100,81,72,97,128,22,202,13,217,162,102,69,69,125,143,92,74,103,83,193,141,65,66,79,109,80,128,18,212,13,217,162,77,90,72,88,148,95,111,119,100,193,141,64,128,21,222,13,217,162,66,66,64,67,143,70,74,91,70,193,141,72,76,91,73,128,22,232,13,217,162,144,67,125,105,125,143,96,126,125,124,193,141,93,65,83,127,128,20,242,13,217,162,94,93,67,82,137,144,97,127,97,127,193,141,144,65,128,22,252,13,217,162,80,65,84,91,143,144,73,124,103,74,193,141,70,68,109,81,128,21,6,14,217,162,96,122,97,92,143,76,119,83,98,193,141,109,113,116,126,128,23,16,14,217,162,144,87,112,106,82,135,75,95,79,76,193,141,144,84,96,96,82,128,21,26,14,217,162,69,108,91,97,149,73,107,110,97,193,141,69,108,91,97,128,19,36,14,217,162,101,102,70,97,139,70,64,121,93,193,141,144,65,128,23,46,14,217,162,69,65,118,121,135,144,93,82,109,85,193,141,144,88,82,73,69,128,19,56,14,217,162,99,120,120,95,149,105,79,99,193,141,92,97,90,128,21,66,14,217,162,94,78,67,87,143,93,81,126,125,193,141,123,96,66,84,128,19,76,14,217,162,144,81,77,80,86,139,66,92,103,101,193,141,64,128,20,86,14,217,162,144,82,123,74,127,142,86,107,70,111,193,141,144,65,128,23,96,14,217,162,84,93,100,95,136,144,85,78,103,106,193,141,144,65,83,67,119,128,18,106,14,217,162,91,97,73,64,148,83,75,103,90,193,141,65,128,21,116,14,217,162,96,76,70,99,149,79,82,106,68,193,141,65,102,114,91,128,21,126,14,217,162,90,101,121,109,149,72,66,124,85,193,141,66,93,68,110,128,21,136,14,217,162,85,120,76,71,136,90,127,64,100,193,141,79,71,76,99,128,23,146,14,217,162,144,70,93,103,95,144,144,100,95,85,84,193,141,94,65,109,117,128,20,156,14,217,162,144,72,90,120,122,141,144,75,89,99,95,193,141,64,128,23,166,14,217,162,66,65,117,69,135,144,87,77,126,97,193,141,144,85,76,74,97,128,19,176,14,217,162,87,77,100,116,140,144,97,98,71,66,193,141,64,128,20,186,14,217,162,99,96,72,143,101,122,108,99,193,141,102,94,76,107,128,21,196,14,217,162,78,70,87,93,149,79,109,120,69,193,141,78,70,87,93,128,20,206,14,217,162,144,73,95,101,93,148,144,98,126,99,98,193,141,64,128,20,216,14,217,162,144,71,90,108,81,138,144,91,68,78,125,193,141,64,128,19,226,14,217,162,92,94,85,65,138,101,125,75,67,193,141,144,65,128,24,236,14,217,162,144,97,88,104,109,144,144,76,100,125,72,193,141,144,84,115,107,101,128,24,246,14,217,162,144,93,80,104,77,134,144,72,75,80,76,193,141,144,93,91,120,80,128,20,0,15,217,162,74,86,73,100,137,144,94,74,96,112,193,141,144,65,128,23,10,15,217,162,86,124,97,122,136,144,85,120,95,81,193,141,144,67,68,126,107,128,21,20,15,217,162,71,84,115,82,136,66,87,124,121,193,141,69,67,79,107,128,20,30,15,217,162,144,71,116,84,114,140,144,98,73,65,73,193,141,64,128,20,40,15,217,162,144,67,83,93,75,148,144,78,107,101,94,193,141,64,128,22,50,15,217,162,144,87,126,91,64,134,74,103,109,98,193,141,72,65,101,64,128,21,60,15,217,162,119,69,67,144,144,68,65,83,114,193,141,68,120,88,117,128,21,70,15,217,162,81,118,115,92,149,87,107,118,76,193,141,81,118,115,92,128,23,80,15,217,162,144,72,66,115,108,135,85,73,124,118,193,141,144,72,66,67,74,128,18,90,15,217,162,108,97,69,142,91,83,96,115,193,141,144,65,128,23,100,15,217,162,69,112,75,99,135,144,82,98,90,111,193,141,144,82,66,80,77,128,19,110,15,217,162,85,126,117,71,140,93,69,113,83,193,141,144,65,128,18,120,15,217,162,94,127,110,77,138,91,96,101,110,193,141,64,128,18,130,15,217,162,89,106,97,101,138,88,85,76,77,193,141,64,128,21,140,15,217,162,74,73,107,89,149,71,86,106,67,193,141,66,115,65,86,128,21,150,15,217,162,67,117,122,71,149,82,116,117,111,193,141,67,117,122,71,128,19,160,15,217,162,94,107,71,125,139,72,98,121,103,193,141,144,65,128,23,170,15,217,162,144,73,90,83,68,135,84,67,101,113,193,141,144,73,88,82,67,128,20,180,15,217,162,144,69,116,88,100,142,89,73,104,100,193,141,144,65,128,21,190,15,217,162,86,77,118,67,149,75,111,126,109,193,141,74,93,119,86,128,22,200,15,217,162,90,85,101,91,144,144,79,95,86,106,193,141,105,116,124,69,128,18,210,15,217,162,73,71,70,113,140,72,74,96,83,193,141,64,128,20,220,15,217,162,144,69,69,70,111,142,92,71,111,106,193,141,144,65,128,21,230,15,217,162,144,73,65,114,93,140,144,65,100,106,127,193,141,144,65,128,20,240,15,217,162,99,76,73,101,137,144,98,117,93,102,193,141,144,65,128,22,250,15,217,162,87,116,88,94,144,144,71,101,78,96,193,141,95,89,102,126,128,19,4,16,217,162,81,99,95,120,139,66,106,64,89,193,141,144,65,128,20,14,16,217,162,86,95,88,70,142,144,89,96,123,74,193,141,144,65,128,23,24,16,217,162,144,75,111,89,124,144,144,79,115,90,100,193,141,68,68,64,104,128,23,34,16,217,162,74,78,66,108,136,144,95,79,85,90,193,141,144,85,65,87,118,128,21,44,16,217,162,144,72,107,119,73,137,144,95,125,76,67,193,141,144,65,128,24,54,16,217,162,144,75,126,125,121,143,144,68,94,68,84,193,141,144,80,93,66,77,128,18,64,16,217,162,75,84,110,92,141,80,106,93,118,193,141,64,128,18,74,16,217,162,100,72,90,122,148,79,125,79,112,193,141,66,128,20,84,16,217,162,144,89,112,106,93,141,144,71,87,113,118,193,141,64,128,23,94,16,217,162,84,77,99,103,135,144,74,93,84,100,193,141,144,74,80,84,65,128,22,104,16,217,162,144,72,99,87,126,134,90,79,111,82,193,141,82,76,104,66,128,20,114,16,217,162,87,118,76,86,148,144,68,127,78,102,193,141,144,68,128,18,124,16,217,162,65,80,105,83,141,91,74,87,84,193,141,64,128,20,134,16,217,162,82,70,114,88,142,144,80,72,95,84,193,141,144,65,128,20,144,16,217,162,144,74,119,112,85,141,144,98,75,86,122,193,141,64,128,18,154,16,217,162,65,79,86,97,141,83,76,87,127,193,141,64,128,21,164,16,217,162,93,78,112,74,144,88,127,81,106,193,141,68,79,94,96,128,20,174,16,217,162,144,96,66,70,75,140,74,91,87,78,193,141,144,65,128,23,184,16,217,162,144,77,121,115,107,136,95,66,95,101,193,141,144,82,123,108,80,128,24,194,16,217,162,144,91,101,68,91,135,144,101,67,107,125,193,141,144,65,65,64,89,128,18,204,16,217,162,68,121,76,114,142,96,72,107,193,141,144,65,128,21,214,16,217,162,88,81,75,127,149,95,65,121,99,193,141,88,81,75,127,128,22,224,16,217,162,73,85,97,81,144,144,67,84,71,102,193,141,76,105,104,119,128,22,234,16,217,162,144,97,74,88,69,143,96,100,69,68,193,141,144,102,83,65,128,21,244,16,217,162,101,75,123,97,135,144,69,64,117,78,193,141,144,68,77,128,20,254,16,217,162,144,68,69,100,124,140,144,80,65,70,86,193,141,64,128,23,8,17,217,162,144,73,107,80,118,143,144,124,69,124,193,141,144,74,103,86,114,128,19,18,17,217,162,144,85,83,108,97,137,68,116,87,115,193,141,64,128,22,28,17,217,162,144,84,82,109,93,134,77,106,100,126,193,141,73,104,64,98,128,23,38,17,217,162,144,99,64,78,75,136,144,95,109,103,107,193,141,124,109,105,96,128,21,48,17,217,162,144,91,126,78,71,140,144,74,81,102,88,193,141,144,65,128,21,58,17,217,162,67,69,69,85,149,69,125,91,95,193,141,67,69,69,85,128,23,68,17,217,162,89,80,90,80,136,144,81,75,101,77,193,141,144,72,91,127,93,128,21,78,17,217,162,144,91,109,84,94,138,144,72,83,94,123,193,141,144,65,128,18,88,17,217,162,78,118,84,74,140,76,75,103,80,193,141,64,128,23,98,17,217,162,144,92,121,118,81,135,144,66,74,82,93,193,141,144,72,82,81,128,19,108,17,217,162,67,123,88,109,140,144,96,111,95,124,193,141,64,128,22,118,17,217,162,101,86,108,104,134,144,90,67,107,70,193,141,101,84,68,104,128,21,128,17,217,162,144,95,117,80,86,140,144,94,99,105,67,193,141,144,65,128,23,138,17,217,162,144,94,77,77,90,135,85,118,70,83,193,141,144,74,73,73,73,128,21,148,17,217,162,144,82,83,69,73,142,144,66,80,105,117,193,141,144,65,128,19,158,17,217,162,144,80,71,109,125,141,94,105,99,106,193,141,64,128,20,168,17,217,162,86,106,89,117,142,144,68,86,109,95,193,141,144,65,128,20,178,17,217,162,99,106,121,81,148,144,70,107,102,80,193,141,144,69,128,19,188,17,217,162,144,96,86,119,112,137,91,74,123,121,193,141,64,128,22,198,17,217,162,99,122,81,125,143,96,92,100,95,193,141,65,68,86,118,92,128,22,208,17,217,162,79,105,107,77,134,144,73,120,99,66,193,141,70,65,72,76,128,19,218,17,217,162,144,84,86,121,124,139,101,70,121,83,193,141,64,128,20,228,17,217,162,144,93,99,99,99,148,77,111,117,108,193,141,144,66,128,21,238,17,217,162,85,100,118,90,134,144,93,68,88,120,193,141,96,102,72,128,24,248,17,217,162,144,95,73,120,87,135,144,71,91,127,77,193,141,144,71,73,120,69,128,18,2,18,217,162,75,110,70,99,148,67,81,108,75,193,141,67,128,22,12,18,217,162,82,112,80,81,135,144,82,88,78,69,193,141,144,72,78,69,128,21,22,18,217,162,144,65,102,119,100,139,144,69,98,74,95,193,141,144,65,128,21,32,18,217,162,66,70,65,124,135,74,107,73,87,193,141,74,111,73,127,128,19,42,18,217,162,78,100,102,117,138,144,69,87,99,94,193,141,64,128,21,52,18,217,162,144,77,78,86,117,142,144,84,70,67,98,193,141,144,65,128,22,62,18,217,162,80,75,86,127,144,144,84,108,83,101,193,141,100,119,106,100,128,19,72,18,217,162,144,83,85,112,140,144,83,68,90,84,193,141,64,128,20,82,18,217,162,84,68,105,92,139,144,78,97,85,117,193,141,144,65,128,21,92,18,217,162,144,87,95,65,78,142,144,84,65,102,118,193,141,144,65,128,21,102,18,217,162,90,112,103,84,134,87,111,94,115,193,141,82,96,70,80,128,19,112,18,217,162,70,67,103,108,140,78,84,79,112,193,141,144,65,128,23,122,18,217,162,70,108,95,123,143,144,100,114,89,105,193,141,144,94,69,121,110,128,20,132,18,217,162,144,84,119,120,68,148,144,73,70,110,123,193,141,66,128,20,142,18,217,162,144,88,76,119,108,141,144,86,123,76,120,193,141,64,128,21,152,18,217,162,100,120,91,109,143,81,105,71,121,193,141,118,97,99,102,128,19,162,18,217,162,82,101,86,81,140,144,93,99,100,113,193,141,64,128,18,172,18,217,162,69,83,102,111,148,75,83,75,115,193,141,64,128,21,182,18,217,162,92,91,92,127,136,71,100,65,88,193,141,91,127,93,103,128,20,192,18,217,162,144,75,97,99,76,140,90,90,95,102,193,141,144,65,128,19,202,18,217,162,69,119,127,66,142,94,93,81,70,193,141,144,65,128,20,212,18,217,162,81,120,105,127,149,81,116,121,74,193,141,67,112,117,128,21,222,18,217,162,144,93,106,114,77,140,144,69,73,127,98,193,141,144,65,128,19,232,18,217,162,144,74,83,123,64,141,102,71,71,103,193,141,64,128,23,242,18,217,162,144,71,124,93,118,136,144,99,112,100,94,193,141,100,76,121,104,128,19,252,18,217,162,72,103,87,66,141,144,77,116,125,71,193,141,64,128,21,6,19,217,162,89,97,100,127,149,66,109,127,65,193,141,65,67,109,118,128,21,16,19,217,162,82,90,120,71,149,66,113,113,101,193,141,65,112,78,105,128,18,26,19,217,162,77,78,122,117,138,68,117,115,126,193,141,64,128,22,36,19,217,162,144,76,82,108,70,134,65,73,84,71,193,141,65,73,80,66,128,23,46,19,217,162,144,86,106,111,84,143,77,105,68,105,193,141,144,73,65,106,107,128,23,56,19,217,162,77,99,87,96,136,144,78,76,101,89,193,141,144,67,111,114,121,128,19,66,19,217,162,80,78,121,120,141,144,85,77,118,79,193,141,64,128,23,76,19,217,162,68,82,101,103,136,144,74,111,85,88,193,141,144,78,125,112,113,128,24,86,19,217,162,144,86,119,93,64,144,144,67,115,66,107,193,141,144,83,68,90,85,128,20,96,19,217,162,74,99,71,89,142,144,94,87,85,114,193,141,144,65,128,18,106,19,217,162,92,97,119,79,140,75,85,82,119,193,141,64,128,20,116,19,217,162,144,69,78,125,93,142,94,79,113,95,193,141,144,65,128,22,126,19,217,162,77,96,72,98,134,144,72,68,96,76,193,141,69,96,72,96,128,20,136,19,217,162,144,69,73,106,68,148,144,77,88,115,109,193,141,64,128,18,146,19,217,162,88,102,79,69,140,70,71,127,89,193,141,64,128,21,156,19,217,162,79,107,65,100,135,66,92,112,101,193,141,79,127,113,101,128,24,166,19,217,162,144,74,93,104,68,143,144,81,74,72,74,193,141,144,91,103,112,78,128,23,176,19,217,162,144,70,127,65,76,136,144,65,69,88,69,193,141,71,122,89,79,128,24,186,19,217,162,144,82,96,114,123,134,144,86,67,68,119,193,141,144,86,99,118,127,128,18,196,19,217,162,72,93,95,110,137,83,74,84,91,193,141,64,128,18,206,19,217,162,97,120,100,94,140,67,84,88,99,193,141,64,128,19,216,19,217,162,144,82,82,125,96,148,96,124,101,125,193,141,64,128,19,226,19,217,162,65,97,113,73,140,144,68,114,80,114,193,141,64,128,5,236,19,219,128,0
>5008	68 90 90 59 6c 7a 72 c1 8d 7f 56 79 5a 80 13 6e
>5018	00 d9 a2 5c 7a 7e 45 94 90 61 72 5e 62 c1 8d 40
>5028	80 15 78 00 d9 a2 46 6e 47 7b 95 5b 6c 41 75 c1
>5038	8d 46 6e 47 7b 80 14 82 00 d9 a2 90 61 6e 41 76
>5048	8c 90 69 6c 61 c1 8d 90 41 80 13 8c 00 d9 a2 54
>5058	5b 74 61 8e 61 4b 7c 56 c1 8d 90 41 80 14 96 00
>5068	d9 a2 90 45 61 5e 54 8b 90 42 5d 57 55 c1 8d 40
>5078	80 15 a0 00 d9 a2 5a 70 60 48 88 5f 5f 6b 4b c1
>5088	8d 45 6f 4b 43 80 14 aa 00 d9 a2 90 4d 5d 4d 5f
>5098	8c 90 50 46 61 48 c1 8d 40 80 13 b4 00 d9 a2 46
>50a8	61 5a 54 8c 90 58 40 64 78 c1 8d 40 80 17 be 00
>50b8	d9 a2 90 4e 7d 7b 53 88 5c 41 6c 43 c1 8d 90 52
>50c8	7c 57 52 80 17 c8 00 d9 a2 90 52 7e 56 42 88 4e
>50d8	6a 5d 40 c1 8d 90 5c 54 4b 42 80 13 d2 00 d9 a2
>50e8	5d 57 62 75 8b 42 51 51 5a c1 8d 90 41 80 14 dc
>50f8	00 d9 a2 90 48 4d 79 62 8a 50 78 46 6d c1 8d 90
>5108	41 80 15 e6 00 d9 a2 52 60 7d 4d 86 50 43 48 65
>5118	c1 8d 50 40 48 45 80 15 f0 00 d9 a2 90 44 61 7a
>5128	58 8b 90 45 65 69 50 c1 8d 90 41 80 16 fa 00 d9
>5138	a2 4c 44 49 42 87 90 4c 7f 70 43 c1 8d 90 7b 70
>5148	41 80 14 04 01 d9 a2 5c 6a 76 5a 89 90 42 5d 70
>5158	54 c1 8d 90 41 80 15 0e 01 d9 a2 90 48 47 69 57
>5168	8a 90 42 5f 4e 70 c1 8d 90 41 80 15 18 01 d9 a2
>5178	90 64 75 76 44 8e 90 5b 77 6c 65 c1 8d 90 41 80
>5188	13 22 01 d9 a2 90 50 66 61 42 94 90 64 7e 54 c1
>5198	8d 5c 80 17 2c 01 d9 a2 90 5e 6a 72 53 88 48 6e
>51a8	7c 5f c1 8d 90 56 44 4e 4e 80 13 36 01 d9 a2 63
>51b8	51 6b 76 8c 90 51 62 44 70 c1 8d 40 80 12 40 01
>51c8	d9 a2 5a 5c 50 48 8d 44 46 78 5f c1 8d 40 80 14
>51d8	4a 01 d9 a2 90 4b 7e 53 78 8a 90 60 47 7e 77 c1
>51e8	8d 40 80 15 54 01 d9 a2 90 4a 61 6c 5b 8b 90 5b
>51f8	52 4f 65 c1 8d 90 41 80 12 5e 01 d9 a2 50 73 4e
>5208	65 94 47 52 79 6a c1 8d 42 80 13 68 01 d9 a2 5b
>5218	66 58 53 8c 90 51 5d 46 63 c1 8d 40 80 18 72 01
>5228	d9 a2 90 44 4b 6a 43 87 90 4c 7d 65 57 c1 8d 90
>5238	44 49 60 43 80 16 7c 01 d9 a2 90 44 40 60 5e 8f
>5248	4d 60 71 4f c1 8d 49 60 50 71 80 15 86 01 d9 a2
>5258	62 67 4a 5e 90 42 4b 45 61 c1 8d 60 5c 44 7d 80
>5268	12 90 01 d9 a2 43 68 4b 42 8b 64 76 73 58 c1 8d
>5278	40 80 16 9a 01 d9 a2 90 41 62 64 45 86 5b 76 5f
>5288	5e c1 8d 5a 54 5b 5a 80 17 a4 01 d9 a2 90 64 69
>5298	49 5f 8f 5e 56 71 74 c1 8d 90 46 52 57 6b 80 13
>52a8	ae 01 d9 a2 43 5c 7b 76 8c 49 7b 6b 66 c1 8d 90
>52b8	41 80 14 b8 01 d9 a2 90 46 44 59 5a 8d 90 55 67
>52c8	5b 55 c1 8d 40 80 17 c2 01 d9 a2 90 5e 73 5f 69
>52d8	90 50 4b 60 7f c1 8d 90 6e 7f 40 68 80 12 cc 01
>52e8	d9 a2 49 75 72 78 89 64 72 61 51 c1 8d 40 80 12
>52f8	d6 01 d9 a2 61 6c 78 48 8d 45 67 7f 52 c1 8d 40
>5308	80 15 e0 01 d9 a2 90 4d 4d 57 74 8c 90 4b 6f 70
>5318	64 c1 8d 90 41 80 13 ea 01 d9 a2 63 54 7b 4f 8d
>5328	90 53 57 7c 67 c1 8d 40 80 14 f4 01 d9 a2 90 58
>5338	60 45 55 8e 65 76 4d 7e c1 8d 90 41 80 15 fe 01
>5348	d9 a2 49 4f 5b 5f 87 5a 4a 5e 71 c1 8d 5b 4f 5f
>5358	7f 80 15 08 02 d9 a2 90 41 41 4b 68 89 90 4a 4a
>5368	59 45 c1 8d 90 41 80 14 12 02 d9 a2 90 56 46 5f
>5378	61 8d 90 5a 5d 47 75 c1 8d 40 80 14 1c 02 d9 a2
>5388	90 4f 6c 78 60 94 4e 7d 75 6e c1 8d 90 41 80 12
>5398	26 02 d9 a2 66 43 6d 64 8d 61 56 77 44 c1 8d 40
>53a8	80 13 30 02 d9 a2 42 50 78 45 8e 47 50 4f 75 c1
>53b8	8d 90 41 80 17 3a 02 d9 a2 45 7f 5a 7b 87 90 51
>53c8	7b 4c 58 c1 8d 90 50 40 44 45 80 18 44 02 d9 a2
>53d8	90 55 4f 7a 41 86 90 64 54 46 4e c1 8d 90 75 5f
>53e8	7e 4e 80 14 4e 02 d9 a2 90 4c 76 66 7c 94 90 4f
>53f8	6d 78 77 c1 8d 40 80 18 58 02 d9 a2 90 59 4f 6c
>5408	47 90 90 43 5e 71 5e c1 8d 90 55 70 7a 69 80 15
>5418	62 02 d9 a2 4e 52 4b 5c 95 4a 53 46 77 c1 8d 43
>5428	7f 44 65 80 15 6c 02 d9 a2 42 4a 52 5b 86 90 56
>5438	69 4e 7e c1 8d 42 50 42 80 11 76 02 d9 a2 46 6b
>5448	6e 7a 94 7e 49 4b c1 8d 46 80 14 80 02 d9 a2 90
>5458	48 62 5c 60 8a 90 66 43 6c 53 c1 8d 40 80 13 8a
>5468	02 d9 a2 48 7a 5f 59 8a 90 5b 5b 43 78 c1 8d 40
>5478	80 16 94 02 d9 a2 43 45 5d 45 86 90 49 77 4c 44
>5488	c1 8d 42 40 51 44 80 17 9e 02 d9 a2 90 45 72 4f
>5498	6f 88 5f 75 70 4e c1 8d 90 5a 47 7f 61 80 15 a8
>54a8	02 d9 a2 57 5e 56 7b 8f 60 76 60 53 c1 8d 78 54
>54b8	77 4e 80 15 b2 02 d9 a2 4b 4c 65 45 95 4f 4d 72
>54c8	68 c1 8d 4b 4c 65 45 80 16 bc 02 d9 a2 54 4d 53
>54d8	6c 90 5c 4f 59 4f c1 8d 90 48 42 45 63 80 16 c6
>54e8	02 d9 a2 64 66 50 69 86 90 61 68 70 7f c1 8d 44
>54f8	46 40 41 80 14 d0 02 d9 a2 90 42 49 56 43 8c 90
>5508	42 4b 53 50 c1 8d 40 80 13 da 02 d9 a2 5d 56 69
>5518	53 8e 5a 6e 76 57 c1 8d 90 41 80 13 e4 02 d9 a2
>5528	44 4c 59 45 8d 90 5d 59 44 7a c1 8d 40 80 12 ee
>5538	02 d9 a2 5e 4b 4d 52 94 58 74 7a 65 c1 8d 41 80
>5548	13 f8 02 d9 a2 57 4e 4e 5e 8a 5c 63 5e 5d c1 8d
>5558	90 41 80 14 02 03 d9 a2 90 59 73 58 59 8e 57 73
>5568	46 78 c1 8d 90 41 80 16 0c 03 d9 a2 5e 7e 55 6a
>5578	8f 90 5e 7f 76 7c c1 8d 90 41 61 52 80 13 16 03
>5588	d9 a2 47 49 7d 41 94 90 5a 68 5f 40 c1 8d 40 80
>5598	13 20 03 d9 a2 5d 7d 6b 72 8a 90 5e 52 66 5a c1
>55a8	8d 40 80 17 2a 03 d9 a2 90 55 44 51 53 90 90 5d
>55b8	58 79 51 c1 8d 48 54 67 7e 80 14 34 03 d9 a2 52
>55c8	41 58 74 8e 90 45 52 51 49 c1 8d 90 41 80 14 3e
>55d8	03 d9 a2 90 49 7a 65 52 89 90 46 61 76 77 c1 8d
>55e8	40 80 17 48 03 d9 a2 90 4b 47 6b 59 90 90 5e 7f
>55f8	5c 67 c1 8d 53 77 71 4e 80 12 52 03 d9 a2 4a 6a
>5608	59 5f 8d 60 43 52 63 c1 8d 40 80 17 5c 03 d9 a2
>5618	90 44 78 6f 73 90 90 62 52 58 67 c1 8d 5d 59 68
>5628	74 80 13 66 03 d9 a2 90 42 6f 7f 4e 8d 54 74 74
>5638	51 c1 8d 40 80 15 70 03 d9 a2 57 6c 77 40 95 4c
>5648	65 72 6e c1 8d 4b 47 44 52 80 18 7a 03 d9 a2 90
>5658	54 4d 41 6b 90 90 4f 50 7e 60 c1 8d 90 44 7c 43
>5668	4b 80 15 84 03 d9 a2 57 59 55 66 8f 47 5b 7c 74
>5678	c1 8d 5e 75 52 5a 80 17 8e 03 d9 a2 49 46 71 5b
>5688	88 90 43 7e 58 6f c1 8d 90 4a 78 69 76 80 11 98
>5698	03 d9 a2 45 4d 46 8d 61 79 4c 7c c1 8d 40 80 16
>56a8	a2 03 d9 a2 58 57 75 77 8f 90 4f 64 68 40 c1 8d
>56b8	48 73 4d 77 80 13 ac 03 d9 a2 90 60 4e 5f 5f 8b
>56c8	45 77 52 73 c1 8d 40 80 14 b6 03 d9 a2 90 4c 62
>56d8	6a 4c 8e 5f 48 70 75 c1 8d 90 41 80 14 c0 03 d9
>56e8	a2 90 65 47 7c 56 8c 5a 53 77 46 c1 8d 90 41 80
>56f8	13 ca 03 d9 a2 50 69 57 45 8c 90 47 60 79 67 c1
>5708	8d 40 80 13 d4 03 d9 a2 57 56 63 52 8a 90 5d 4a
>5718	7d 5f c1 8d 40 80 17 de 03 d9 a2 66 41 48 73 88
>5728	90 43 60 58 74 c1 8d 90 65 61 50 41 80 16 e8 03
>5738	d9 a2 44 4e 59 7f 90 90 53 59 69 7c c1 8d 57 68
>5748	43 7b 80 13 f2 03 d9 a2 90 73 4a 51 8a 49 4b 5c
>5758	4c c1 8d 90 41 80 14 fc 03 d9 a2 4c 42 4f 7a 8b
>5768	90 4f 6e 4d 4f c1 8d 90 41 80 12 06 04 d9 a2 43
>5778	40 4d 8d 90 63 48 69 63 c1 8d 40 80 15 10 04 d9
>5788	a2 4b 6d 40 66 86 90 66 4f 6e c1 8d 4b 49 40 42
>5798	80 14 1a 04 d9 a2 44 40 73 58 95 41 4c 6c 43 c1
>57a8	8d 5a 6f 4f 80 12 24 04 d9 a2 43 57 50 65 89 61
>57b8	53 58 7b c1 8d 40 80 12 2e 04 d9 a2 57 59 68 6f
>57c8	8c 51 49 4b 6e c1 8d 40 80 14 38 04 d9 a2 90 49
>57d8	42 5e 6d 94 46 61 69 69 c1 8d 90 41 80 14 42 04
>57e8	d9 a2 60 45 49 58 89 90 41 4a 4d 49 c1 8d 90 41
>57f8	80 18 4c 04 d9 a2 90 4e 48 7e 42 86 90 5d 5e 50
>5808	71 c1 8d 90 5f 5e 7e 72 80 15 56 04 d9 a2 55 6c
>5818	43 5b 95 54 51 68 5b c1 8d 41 5a 5b 40 80 16 60
>5828	04 d9 a2 42 66 53 7a 90 90 62 78 44 5c c1 8d 65
>5838	5e 58 56 80 18 6a 04 d9 a2 90 53 45 45 74 86 90
>5848	57 52 5a 42 c1 8d 90 57 57 5f 74 80 18 74 04 d9
>5858	a2 90 43 72 69 42 86 90 5d 72 66 55 c1 8d 90 5f
>5868	72 6f 56 80 13 7e 04 d9 a2 51 58 51 41 8d 90 4b
>5878	55 62 6a c1 8d 40 80 18 88 04 d9 a2 90 55 71 53
>5888	49 87 90 47 53 65 7f c1 8d 90 45 51 41 49 80 14
>5898	92 04 d9 a2 90 43 7b 58 6d 8a 90 58 55 6e 50 c1
>58a8	8d 40 80 13 9c 04 d9 a2 53 6f 58 57 8d 90 42 4e
>58b8	50 5e c1 8d 40 80 12 a6 04 d9 a2 4c 49 7d 6a 8d
>58c8	60 5e 7f 41 c1 8d 40 80 15 b0 04 d9 a2 90 5f 74
>58d8	56 86 63 54 7a 46 c1 8d 63 40 4a 42 80 13 ba 04
>58e8	d9 a2 43 51 5b 48 8d 90 4c 75 75 60 c1 8d 40 80
>58f8	15 c4 04 d9 a2 52 5e 7d 64 95 58 58 6b 4b c1 8d
>5908	52 5e 7d 64 80 15 ce 04 d9 a2 64 79 5a 42 86 54
>5918	5a 7c 54 c1 8d 44 58 58 40 80 13 d8 04 d9 a2 48
>5928	46 50 52 8d 90 42 41 60 48 c1 8d 40 80 17 e2 04
>5938	d9 a2 90 4b 58 69 76 87 54 4d 44 4f c1 8d 90 4b
>5948	50 69 71 80 17 ec 04 d9 a2 90 4f 66 40 70 90 90
>5958	62 4d 61 40 c1 8d 52 67 60 50 80 17 f6 04 d9 a2
>5968	90 5f 79 7a 5a 90 4a 74 72 6a c1 8d 90 6a 6e 6d
>5978	44 80 15 00 05 d9 a2 55 43 7f 64 95 4d 7c 4a 6e
>5988	c1 8d 47 47 74 76 80 15 0a 05 d9 a2 57 69 4e 44
>5998	95 5a 5c 6c 6b c1 8d 57 69 4e 44 80 13 14 05 d9
>59a8	a2 90 46 5f 5e 65 8b 4a 60 5c 50 c1 8d 40 80 14
>59b8	1e 05 d9 a2 90 50 4d 67 6e 94 90 62 52 59 48 c1
>59c8	8d 40 80 13 28 05 d9 a2 90 5e 61 5d 75 8d 5b 4d
>59d8	5e 7c c1 8d 40 80 14 32 05 d9 a2 63 47 58 5f 8e
>59e8	90 48 7c 6d 77 c1 8d 90 41 80 18 3c 05 d9 a2 90
>59f8	4f 5e 6a 73 8f 90 5d 72 5f 53 c1 8d 90 6d 51 4a
>5a08	46 80 13 46 05 d9 a2 90 45 73 4b 5c 8d 64 6d 54
>5a18	69 c1 8d 40 80 16 50 05 d9 a2 52 53 7c 53 8f 90
>5a28	42 7f 4f 64 c1 8d 4f 54 6c 6f 80 15 5a 05 d9 a2
>5a38	44 6a 57 73 87 90 5e 5c 4f c1 8d 90 54 48 4d 80
>5a48	13 64 05 d9 a2 55 6a 74 57 94 90 60 61 70 4f c1
>5a58	8d 40 80 18 6e 05 d9 a2 90 4e 7b 6b 7c 87 90 59
>5a68	41 78 61 c1 8d 90 48 41 68 61 80 15 78 05 d9 a2
>5a78	5c 65 76 58 8f 49 7f 62 4d c1 8d 66 65 58 65 80
>5a88	11 82 05 d9 a2 77 46 68 8b 56 77 68 40 c1 8d 40
>5a98	80 14 8c 05 d9 a2 90 4a 5d 5c 4d 8c 5d 6e 47 5b
>5aa8	c1 8d 90 41 80 14 96 05 d9 a2 90 63 5c 6a 69 8c
>5ab8	45 4c 79 58 c1 8d 90 41 80 13 a0 05 d9 a2 50 7c
>5ac8	59 7e 8d 90 4d 44 43 4b c1 8d 40 80 14 aa 05 d9
>5ad8	a2 53 5c 64 78 8e 90 59 4a 46 42 c1 8d 90 41 80
>5ae8	14 b4 05 d9 a2 90 5a 55 6c 4f 8d 90 46 6a 7d 7e
>5af8	c1 8d 40 80 17 be 05 d9 a2 90 4a 41 63 6e 88 90
>5b08	47 64 51 70 c1 8d 4d 65 72 42 80 14 c8 05 d9 a2
>5b18	47 58 5b 57 8b 90 4b 57 6d 54 c1 8d 90 41 80 17
>5b28	d2 05 d9 a2 90 50 79 66 60 8f 43 43 5f 75 c1 8d
>5b38	90 4d 76 46 6b 80 15 dc 05 d9 a2 49 64 70 45 88
>5b48	63 63 60 4d c1 8d 6a 47 50 48 80 14 e6 05 d9 a2
>5b58	58 55 41 57 94 90 51 5f 66 6a c1 8d 90 41 80 12
>5b68	f0 05 d9 a2 5d 66 6a 7b 8b 5e 70 6b 46 c1 8d 40
>5b78	80 16 fa 05 d9 a2 56 66 5b 46 90 5b 48 70 6b c1
>5b88	8d 90 44 62 55 65 80 16 04 06 d9 a2 90 50 76 5d
>5b98	71 8f 53 46 46 53 c1 8d 42 4f 68 62 80 12 0e 06
>5ba8	d9 a2 57 75 57 6d 94 57 74 51 6e c1 8d 41 80 18
>5bb8	18 06 d9 a2 90 5b 46 7a 71 87 90 5e 5b 44 6f c1
>5bc8	8d 90 5a 42 40 61 80 15 22 06 d9 a2 59 7e 71 5d
>5bd8	86 4c 53 73 50 c1 8d 48 52 71 50 80 16 2c 06 d9
>5be8	a2 90 53 55 6c 90 90 52 59 70 6e c1 8d 52 46 5b
>5bf8	42 80 13 36 06 d9 a2 90 4f 41 50 72 94 54 4c 43
>5c08	78 c1 8d 40 80 14 40 06 d9 a2 90 64 5c 53 49 8e
>5c18	5d 52 70 5e c1 8d 90 41 80 14 4a 06 d9 a2 90 5a
>5c28	6e 50 5c 89 90 56 50 5b 40 c1 8d 40 80 17 54 06
>5c38	d9 a2 90 43 6f 51 72 90 48 55 5e 50 c1 8d 90 4c
>5c48	44 70 42 80 15 5e 06 d9 a2 5c 7c 7e 47 95 63 5b
>5c58	46 6d c1 8d 5c 7c 7e 47 80 17 68 06 d9 a2 44 5e
>5c68	72 56 88 90 5a 46 47 63 c1 8d 90 5e 58 75 75 80
>5c78	14 72 06 d9 a2 43 5d 54 74 8e 90 4b 44 7b 65 c1
>5c88	8d 90 41 80 17 7c 06 d9 a2 90 55 60 66 47 90 90
>5c98	55 4b 7d 6f c1 8d 90 54 68 58 80 14 86 06 d9 a2
>5ca8	61 5d 54 58 8e 90 65 56 75 5e c1 8d 90 41 80 16
>5cb8	90 06 d9 a2 4a 69 45 5c 90 5f 4c 56 4b c1 8d 90
>5cc8	54 63 50 6f 80 16 9a 06 d9 a2 90 64 4f 5b 66 86
>5cd8	4c 43 74 54 c1 8d 48 40 64 50 80 13 a4 06 d9 a2
>5ce8	65 7a 5a 46 8c 90 43 6c 70 74 c1 8d 40 80 15 ae
>5cf8	06 d9 a2 5d 50 77 6d 95 5a 68 58 4b c1 8d 42 68
>5d08	5f 62 80 16 b8 06 d9 a2 43 5d 4f 6f 90 90 41 5b
>5d18	6d 43 c1 8d 44 78 7c 72 80 14 c2 06 d9 a2 59 62
>5d28	76 7b 8b 90 44 43 7e 5a c1 8d 90 41 80 13 cc 06
>5d38	d9 a2 43 53 67 4a 8d 90 5c 6b 71 59 c1 8d 40 80
>5d48	14 d6 06 d9 a2 90 42 45 75 7f 8a 90 54 56 56 5f
>5d58	c1 8d 40 80 15 e0 06 d9 a2 90 4d 76 56 46 86 44
>5d68	63 5a 4c c1 8d 41 48 48 80 13 ea 06 d9 a2 90 63
>5d78	48 58 46 8d 4d 7b 46 6b c1 8d 40 80 12 f4 06 d9
>5d88	a2 5a 65 6d 50 94 62 59 73 64 c1 8d 40 80 15 fe
>5d98	06 d9 a2 4b 6f 6d 59 88 56 5f 57 53 c1 8d 5d 70
>5da8	7a 4a 80 12 08 07 d9 a2 4e 66 7f 5f 94 4c 78 70
>5db8	67 c1 8d 41 80 15 12 07 d9 a2 90 5e 7b 77 4d 8c
>5dc8	90 4a 46 6f 41 c1 8d 90 41 80 17 1c 07 d9 a2 90
>5dd8	69 68 61 8f 90 55 6b 6e 51 c1 8d 90 56 55 56 72
>5de8	80 13 26 07 d9 a2 90 4a 76 60 65 8b 47 54 75 7c
>5df8	c1 8d 40 80 17 30 07 d9 a2 90 54 4b 73 4f 88 5e
>5e08	62 4f 56 c1 8d 90 4a 69 7c 59 80 16 3a 07 d9 a2
>5e18	90 48 66 79 6e 8f 4d 60 53 5e c1 8d 44 79 59 70
>5e28	80 14 44 07 d9 a2 90 51 73 48 57 8a 90 5e 47 72
>5e38	59 c1 8d 40 80 14 4e 07 d9 a2 43 75 43 86 90 5e
>5e48	60 67 4c c1 8d 43 50 40 80 17 58 07 d9 a2 90 63
>5e58	4d 7d 68 88 4e 63 63 5e c1 8d 90 6d 6e 5e 7a 80
>5e68	13 62 07 d9 a2 4f 61 4d 71 8e 5b 71 49 70 c1 8d
>5e78	90 41 80 16 6c 07 d9 a2 90 49 6b 51 73 87 90 63
>5e88	6b 54 c1 8d 90 63 41 53 80 17 76 07 d9 a2 90 46
>5e98	59 6c 65 90 41 44 7a 5d c1 8d 90 47 5e 67 42 80
>5ea8	13 80 07 d9 a2 61 66 41 4a 8e 48 52 40 79 c1 8d
>5eb8	90 41 80 17 8a 07 d9 a2 5c 44 5f 79 88 90 50 59
>5ec8	7c 7c c1 8d 90 4c 5d 63 43 80 18 94 07 d9 a2 90
>5ed8	5f 4c 41 4f 87 90 44 6d 49 76 c1 8d 90 44 4c 41
>5ee8	45 80 15 9e 07 d9 a2 4e 70 51 53 95 5a 57 53 4a
>5ef8	c1 8d 4e 70 51 53 80 13 a8 07 d9 a2 4f 73 6f 50
>5f08	8c 90 42 54 74 7d c1 8d 40 80 16 b2 07 d9 a2 90
>5f18	44 53 49 49 87 90 51 6c 55 61 c1 8d 90 41 41 80
>5f28	13 bc 07 d9 a2 42 5f 41 5a 94 90 62 59 4f 7a c1
>5f38	8d 40 80 16 c6 07 d9 a2 5c 7c 45 45 90 5e 6b 5f
>5f48	64 c1 8d 90 41 6f 5a 5f 80 15 d0 07 d9 a2 5a 5f
>5f58	40 40 95 55 59 5b 6a c1 8d 45 45 64 56 80 17 da
>5f68	07 d9 a2 51 72 5e 41 8f 90 56 4a 4c 4a c1 8d 90
>5f78	44 57 6e 49 80 16 e4 07 d9 a2 60 79 79 77 8f 90
>5f88	51 68 7c 5a c1 8d 4f 50 7d 5d 80 14 ee 07 d9 a2
>5f98	90 48 56 6a 64 8a 55 45 50 4d c1 8d 90 41 80 17
>5fa8	f8 07 d9 a2 54 58 4d 4e 87 90 61 7f 5b 7e c1 8d
>5fb8	90 61 67 52 72 80 12 02 08 d9 a2 56 5c 7f 74 8a
>5fc8	45 44 73 65 c1 8d 40 80 13 0c 08 d9 a2 5a 49 51
>5fd8	43 8d 90 51 7d 40 6b c1 8d 40 80 16 16 08 d9 a2
>5fe8	46 6a 47 7b 86 90 64 7c 74 4a c1 8d 42 42 43 72
>5ff8	80 17 20 08 d9 a2 90 57 52 4b 6f 90 63 41 7a 5c
>6008	c1 8d 90 7a 54 46 4b 80 14 2a 08 d9 a2 51 7c 56
>6018	47 8e 90 63 57 6a 44 c1 8d 90 41 80 15 34 08 d9
>6028	a2 90 59 7f 75 54 8e 90 47 53 7e 50 c1 8d 90 41
>6038	80 15 3e 08 d9 a2 55 55 70 63 95 65 40 66 4d c1
>6048	8d 55 55 70 63 80 17 48 08 d9 a2 90 58 65 4d 6b
>6058	88 90 5f 76 4c 47 c1 8d 47 53 41 6c 80 14 52 08
>6068	d9 a2 90 42 78 74 6b 8d 90 56 73 69 5e c1 8d 40
>6078	80 17 5c 08 d9 a2 90 4f 74 5f 4c 87 90 60 5d 72
>6088	78 c1 8d 90 54 52 44 80 15 66 08 d9 a2 54 51 69
>6098	48 8f 4a 65 7b 4a c1 8d 5e 77 64 52 80 16 70 08
>60a8	d9 a2 90 5c 60 48 62 86 4e 66 78 63 c1 8d 42 46
>60b8	70 42 80 12 7a 08 d9 a2 5f 5c 7b 8c 90 5e 6a 5e
>60c8	64 c1 8d 40 80 12 84 08 d9 a2 5f 67 6b 77 8a 90
>60d8	45 7e 75 c1 8d 40 80 13 8e 08 d9 a2 4a 77 55 47
>60e8	8a 90 57 7b 7a 6f c1 8d 40 80 15 98 08 d9 a2 53
>60f8	58 4f 50 95 5c 45 70 4f c1 8d 53 58 4f 50 80 14
>6108	a2 08 d9 a2 64 46 7d 58 8e 90 54 68 40 4d c1 8d
>6118	90 41 80 14 ac 08 d9 a2 90 4a 78 78 55 8e 5e 6f
>6128	49 63 c1 8d 90 41 80 13 b6 08 d9 a2 43 5c 58 5a
>6138	8a 5b 6f 55 70 c1 8d 90 41 80 16 c0 08 d9 a2 90
>6148	43 62 50 4f 88 90 5b 4c 53 c1 8d 43 79 5c 5c 80
>6158	17 ca 08 d9 a2 45 4e 60 59 87 90 53 6c 4c 6f c1
>6168	8d 90 52 60 4c 67 80 14 d4 08 d9 a2 90 49 55 54
>6178	54 8a 64 46 62 68 c1 8d 90 41 80 15 de 08 d9 a2
>6188	5b 55 70 7f 88 43 57 4f 5f c1 8d 58 42 7f 60 80
>6198	15 e8 08 d9 a2 58 45 61 72 87 44 7e 42 6f c1 8d
>61a8	5c 7f 63 7f 80 14 f2 08 d9 a2 90 59 57 44 56 8d
>61b8	90 4c 5f 5c 41 c1 8d 40 80 16 fc 08 d9 a2 90 65
>61c8	46 74 49 88 90 4e 6e 43 c1 8d 65 48 5a 4a 80 13
>61d8	06 09 d9 a2 4c 4b 5d 51 8d 90 65 69 43 4f c1 8d
>61e8	40 80 12 10 09 d9 a2 63 60 60 46 8b 6b 56 7b c1
>61f8	8d 90 41 80 16 1a 09 d9 a2 59 6b 51 43 86 90 60
>6208	40 40 7f c1 8d 59 6b 51 41 80 13 24 09 d9 a2 90
>6218	55 7b 71 73 8b 4a 4c 69 56 c1 8d 40 80 14 2e 09
>6228	d9 a2 90 62 4c 4d 6f 94 90 63 50 6f 41 c1 8d 40
>6238	80 17 38 09 d9 a2 50 6a 4a 65 88 90 53 6b 79 6b
>6248	c1 8d 90 43 41 73 50 80 16 42 09 d9 a2 58 7e 4a
>6258	4c 8f 90 52 5a 75 61 c1 8d 46 63 54 6b 80 17 4c
>6268	09 d9 a2 90 65 7a 5e 55 90 58 59 7f 74 c1 8d 90
>6278	7e 54 5e 49 80 16 56 09 d9 a2 5f 4c 66 61 90 90
>6288	56 72 4f 42 c1 8d 75 7e 75 63 80 18 60 09 d9 a2
>6298	90 59 5c 57 75 86 90 44 55 6a 5e c1 8d 90 5d 5d
>62a8	7f 7e 80 15 6a 09 d9 a2 5f 6c 5d 4a 95 52 79 4d
>62b8	7f c1 8d 4c 73 4f 4b 80 13 74 09 d9 a2 90 54 70
>62c8	58 54 8b 52 73 41 46 c1 8d 40 80 14 7e 09 d9 a2
>62d8	90 55 64 60 79 8a 5c 59 4e 78 c1 8d 90 41 80 14
>62e8	88 09 d9 a2 90 5a 7d 4a 42 94 90 55 7d 72 44 c1
>62f8	8d 41 80 13 92 09 d9 a2 4c 4c 5e 44 8a 53 76 43
>6308	49 c1 8d 90 41 80 12 9c 09 d9 a2 43 4e 5d 6f 8d
>6318	49 62 72 78 c1 8d 40 80 15 a6 09 d9 a2 53 44 52
>6328	4d 95 5e 59 40 66 c1 8d 53 44 52 4d 80 15 b0 09
>6338	d9 a2 48 6e 7f 4b 95 4f 7f 53 7a c1 8d 48 6e 7f
>6348	4b 80 13 ba 09 d9 a2 46 6e 4f 74 8c 50 48 67 63
>6358	c1 8d 90 41 80 16 c4 09 d9 a2 60 4d 7b 43 8f 90
>6368	54 4b 77 78 c1 8d 4c 42 43 4b 80 17 ce 09 d9 a2
>6378	5d 7c 7f 65 88 90 62 46 7c 45 c1 8d 90 7f 7a 43
>6388	62 80 15 d8 09 d9 a2 90 52 7c 71 56 8c 90 42 74
>6398	65 67 c1 8d 90 41 80 15 e2 09 d9 a2 61 6c 70 47
>63a8	95 5b 7a 6b 48 c1 8d 45 72 44 7f 80 18 ec 09 d9
>63b8	a2 90 60 7e 42 69 86 90 5c 69 46 4c c1 8d 90 7c
>63c8	7f 46 6c 80 13 f6 09 d9 a2 90 43 63 75 53 89 58
>63d8	5d 61 5e c1 8d 40 80 12 00 0a d9 a2 66 47 56 63
>63e8	8c 5f 62 68 46 c1 8d 40 80 16 0a 0a d9 a2 90 65
>63f8	57 75 56 86 5a 69 67 47 c1 8d 5a 68 42 42 80 18
>6408	14 0a d9 a2 90 60 42 6d 5c 90 90 4a 4e 67 75 c1
>6418	8d 90 55 74 45 67 80 15 1e 0a d9 a2 51 5b 77 79
>6428	95 58 61 63 5d c1 8d 51 5b 77 79 80 14 28 0a d9
>6438	a2 90 5d 68 66 42 8d 90 4e 6f 77 70 c1 8d 40 80
>6448	14 32 0a d9 a2 5b 64 56 7e 95 5b 57 58 66 c1 8d
>6458	4c 7e 58 80 14 3c 0a d9 a2 90 48 7b 6e 55 8a 5c
>6468	6c 62 7c c1 8d 90 41 80 12 46 0a d9 a2 62 74 6c
>6478	78 8d 4f 57 7b 75 c1 8d 40 80 13 50 0a d9 a2 43
>6488	77 56 51 94 90 4b 74 6c 41 c1 8d 40 80 15 5a 0a
>6498	d9 a2 4f 51 61 4e 87 58 6a 62 77 c1 8d 5f 7b 63
>64a8	7f 80 14 64 0a d9 a2 90 5f 50 61 7a 8c 58 7a 41
>64b8	77 c1 8d 90 41 80 13 6e 0a d9 a2 4f 7b 6c 42 8b
>64c8	49 76 50 43 c1 8d 90 41 80 17 78 0a d9 a2 90 58
>64d8	76 62 52 90 44 47 72 5c c1 8d 90 5c 7e 54 6e 80
>64e8	15 82 0a d9 a2 90 55 5f 5a 62 8e 90 51 42 7b 7a
>64f8	c1 8d 90 41 80 14 8c 0a d9 a2 90 4a 75 4d 79 8b
>6508	90 48 49 76 71 c1 8d 40 80 13 96 0a d9 a2 90 43
>6518	60 40 4a 8d 60 58 4d 74 c1 8d 40 80 14 a0 0a d9
>6528	a2 90 42 61 70 54 8a 5a 5b 7d 76 c1 8d 90 41 80
>6538	15 aa 0a d9 a2 41 40 78 7e 95 47 41 74 54 c1 8d
>6548	41 40 78 7e 80 17 b4 0a d9 a2 49 60 45 7d 8f 90
>6558	5c 59 57 5f c1 8d 90 52 79 51 62 80 14 be 0a d9
>6568	a2 90 5c 59 5f 70 8a 65 6c 6c 42 c1 8d 90 41 80
>6578	16 c8 0a d9 a2 54 71 76 51 86 90 53 5a 6e 50 c1
>6588	8d 44 61 50 50 80 16 d2 0a d9 a2 50 79 43 5d 8f
>6598	90 48 50 46 50 c1 8d 48 68 7d 4d 80 15 dc 0a d9
>65a8	a2 43 63 5d 73 95 64 62 40 49 c1 8d 43 63 5d 73
>65b8	80 14 e6 0a d9 a2 90 48 74 41 77 8e 49 5d 51 74
>65c8	c1 8d 90 41 80 12 f0 0a d9 a2 90 5d 63 71 8b 5b
>65d8	73 51 64 c1 8d 40 80 15 fa 0a d9 a2 56 5d 47 7f
>65e8	88 49 50 4f 65 c1 8d 5f 4d 48 5a 80 13 04 0b d9
>65f8	a2 63 4e 6c 4f 8e 4e 6a 4f 62 c1 8d 90 41 80 14
>6608	0e 0b d9 a2 90 52 7e 52 72 8b 90 48 6f 53 40 c1
>6618	8d 40 80 17 18 0b d9 a2 60 54 6f 77 87 90 4e 76
>6628	66 6b c1 8d 90 4e 62 40 49 80 15 22 0b d9 a2 48
>6638	5c 62 6b 86 90 58 47 68 43 c1 8d 58 42 69 80 15
>6648	2c 0b d9 a2 5d 66 4d 40 8f 5e 41 71 48 c1 8d 7b
>6658	67 7e 48 80 18 36 0b d9 a2 90 5e 44 43 6b 90 90
>6668	46 72 60 64 c1 8d 90 57 51 63 47 80 15 40 0b d9
>6678	a2 45 54 43 48 95 5b 6c 5c 5f c1 8d 45 54 43 48
>6688	80 12 4a 0b d9 a2 56 7b 4b 59 94 4a 63 64 57 c1
>6698	8d 42 80 14 54 0b d9 a2 90 5f 54 4d 5a 8c 4f 40
>66a8	60 54 c1 8d 90 41 80 15 5e 0b d9 a2 90 5b 43 6e
>66b8	5a 8a 90 55 6f 70 64 c1 8d 90 41 80 13 68 0b d9
>66c8	a2 47 6d 6f 70 89 42 62 6e 6a c1 8d 90 41 80 13
>66d8	72 0b d9 a2 50 73 69 76 94 90 5e 69 64 47 c1 8d
>66e8	40 80 15 7c 0b d9 a2 63 43 6d 69 95 52 66 78 65
>66f8	c1 8d 50 5c 75 44 80 12 86 0b d9 a2 52 4b 6e 8e
>6708	58 7f 6c 7a c1 8d 90 41 80 14 90 0b d9 a2 90 50
>6718	48 48 56 8e 5d 75 48 4b c1 8d 90 41 80 13 9a 0b
>6728	d9 a2 90 4d 66 70 47 89 58 56 50 5b c1 8d 40 80
>6738	14 a4 0b d9 a2 4d 57 58 54 8e 90 56 58 69 47 c1
>6748	8d 90 41 80 13 ae 0b d9 a2 50 4c 50 95 60 5e 74
>6758	7e c1 8d 50 4c 50 80 12 b8 0b d9 a2 65 52 73 79
>6768	8c 51 40 67 44 c1 8d 40 80 17 c2 0b d9 a2 90 62
>6778	71 60 78 87 5d 50 4a 69 c1 8d 90 62 61 60 57 80
>6788	13 cc 0b d9 a2 48 73 51 7e 86 43 4c 71 78 c1 8d
>6798	51 78 80 17 d6 0b d9 a2 90 4e 79 66 48 87 5a 7f
>67a8	41 41 c1 8d 90 44 40 66 47 80 16 e0 0b d9 a2 90
>67b8	44 5a 78 75 8f 5c 71 7a 60 c1 8d 58 57 41 6b 80
>67c8	17 ea 0b d9 a2 50 6c 79 54 88 90 59 7f 6e 7d c1
>67d8	8d 90 49 53 57 69 80 17 f4 0b d9 a2 90 50 4a 40
>67e8	67 8f 4b 61 4c 4f c1 8d 90 44 68 74 58 80 14 fe
>67f8	0b d9 a2 47 55 4a 76 89 90 54 66 50 4d c1 8d 90
>6808	41 80 16 08 0c d9 a2 90 44 7e 6c 66 87 5f 7c 60
>6818	78 c1 8d 90 42 4c 46 80 13 12 0c d9 a2 54 57 63
>6828	59 8a 5e 48 71 54 c1 8d 90 41 80 17 1c 0c d9 a2
>6838	61 5d 66 45 87 90 50 7d 42 74 c1 8d 90 50 60 40
>6848	73 80 15 26 0c d9 a2 90 47 43 7a 77 89 90 4e 79
>6858	76 60 c1 8d 90 41 80 17 30 0c d9 a2 50 59 7f 48
>6868	87 90 4a 7c 7c 52 c1 8d 90 4a 64 40 52 80 13 3a
>6878	0c d9 a2 90 56 7c 7b 67 8b 5e 52 5b 7e c1 8d 40
>6888	80 14 44 0c d9 a2 5f 66 6b 57 94 90 45 5f 47 4f
>6898	c1 8d 90 45 80 14 4e 0c d9 a2 90 41 7e 70 53 8a
>68a8	61 51 42 64 c1 8d 90 41 80 15 58 0c d9 a2 90 65
>68b8	62 4d 44 8c 90 4d 7f 7e 40 c1 8d 90 41 80 16 62
>68c8	0c d9 a2 57 5f 64 58 8f 90 48 5e 64 5c c1 8d 4f
>68d8	40 7f 7c 80 15 6c 0c d9 a2 4e 6f 78 66 86 4a 53
>68e8	4b 62 c1 8d 4a 43 48 62 80 17 76 0c d9 a2 90 43
>68f8	79 55 73 88 5e 50 45 66 c1 8d 90 5d 69 50 55 80
>6908	18 80 0c d9 a2 90 65 49 73 5e 90 90 47 76 72 5a
>6918	c1 8d 90 5d 53 41 44 80 16 8a 0c d9 a2 5a 5c 40
>6928	6a 86 90 5c 42 73 79 c1 8d 42 5c 40 42 80 15 94
>6938	0c d9 a2 51 70 46 59 90 4f 73 61 78 c1 8d 41 7c
>6948	64 61 80 13 9e 0c d9 a2 90 64 6d 68 5a 8d 90 74
>6958	51 59 c1 8d 40 80 15 a8 0c d9 a2 64 67 6e 5e 95
>6968	5a 72 5f 71 c1 8d 49 75 4e 6d 80 17 b2 0c d9 a2
>6978	90 63 67 64 7d 8f 52 45 6a 7d c1 8d 90 51 61 7a
>6988	40 80 12 bc 0c d9 a2 45 7d 4f 5d 8b 50 59 65 65
>6998	c1 8d 40 80 14 c6 0c d9 a2 5b 7a 6d 54 8e 90 4c
>69a8	5c 41 68 c1 8d 90 41 80 17 d0 0c d9 a2 90 61 51
>69b8	55 65 8f 5c 54 7a 42 c1 8d 90 44 7c 5b 63 80 14
>69c8	da 0c d9 a2 90 50 44 43 4f 8e 49 40 68 69 c1 8d
>69d8	90 41 80 13 e4 0c d9 a2 62 5b 75 73 89 60 46 7b
>69e8	48 c1 8d 90 41 80 18 ee 0c d9 a2 90 64 7f 77 6f
>69f8	86 90 55 64 62 69 c1 8d 90 75 7f 77 6f 80 17 f8
>6a08	0c d9 a2 90 50 64 6d 79 90 90 5f 64 48 4e c1 8d
>6a18	4e 7f 5a 55 80 13 02 0d d9 a2 52 49 40 67 8e 4f
>6a28	4d 40 44 c1 8d 90 41 80 14 0c 0d d9 a2 90 46 7b
>6a38	67 5e 8e 62 4f 57 74 c1 8d 90 41 80 14 16 0d d9
>6a48	a2 64 7b 67 5c 89 90 47 4d 79 51 c1 8d 90 41 80
>6a58	14 20 0d d9 a2 61 79 7c 5e 8e 90 47 49 71 66 c1
>6a68	8d 90 41 80 15 2a 0d d9 a2 57 64 76 78 95 5c 46
>6a78	7e 67 c1 8d 57 64 76 78 80 12 34 0d d9 a2 90 41
>6a88	6b 4c 89 43 57 65 44 c1 8d 40 80 13 3e 0d d9 a2
>6a98	4a 54 7f 47 8a 5f 4f 7d 4c c1 8d 90 41 80 17 48
>6aa8	0d d9 a2 90 57 58 7b 56 8f 41 47 56 66 c1 8d 90
>6ab8	56 51 64 70 80 17 52 0d d9 a2 90 5d 47 56 7f 8f
>6ac8	59 65 7a 6c c1 8d 90 43 61 5c 53 80 13 5c 0d d9
>6ad8	a2 46 5a 66 72 8e 63 5a 53 7c c1 8d 90 41 80 13
>6ae8	66 0d d9 a2 90 49 7e 65 7a 8b 56 49 72 7c c1 8d
>6af8	40 80 15 70 0d d9 a2 49 71 6e 5b 95 5a 60 71 73
>6b08	c1 8d 49 71 6e 5b 80 14 7a 0d d9 a2 90 4e 50 5c
>6b18	4b 8a 43 5a 6b 4a c1 8d 90 41 80 17 84 0d d9 a2
>6b28	90 57 57 53 5c 87 90 48 6c 44 57 c1 8d 90 44 40
>6b38	53 80 17 8e 0d d9 a2 52 60 5d 73 88 90 4a 75 42
>6b48	50 c1 8d 90 58 55 5f 7d 80 13 98 0d d9 a2 51 67
>6b58	55 5c 8c 90 5f 6a 68 6b c1 8d 40 80 14 a2 0d d9
>6b68	a2 51 5c 61 53 94 90 49 6a 4b 7a c1 8d 90 41 80
>6b78	17 ac 0d d9 a2 90 47 40 5c 4e 90 90 5f 6f 5e 70
>6b88	c1 8d 58 6f 42 62 80 14 b6 0d d9 a2 90 4a 54 77
>6b98	66 8d 90 5c 4d 48 73 c1 8d 40 80 15 c0 0d d9 a2
>6ba8	64 51 68 75 86 65 57 58 6b c1 8d 64 51 48 61 80
>6bb8	16 ca 0d d9 a2 66 45 45 7d 8f 5c 4a 67 53 c1 8d
>6bc8	41 42 4f 6d 50 80 12 d4 0d d9 a2 4d 5a 48 58 94
>6bd8	5f 6f 77 64 c1 8d 40 80 15 de 0d d9 a2 42 42 40
>6be8	43 8f 46 4a 5b 46 c1 8d 48 4c 5b 49 80 16 e8 0d
>6bf8	d9 a2 90 43 7d 69 7d 8f 60 7e 7d 7c c1 8d 5d 41
>6c08	53 7f 80 14 f2 0d d9 a2 5e 5d 43 52 89 90 61 7f
>6c18	61 7f c1 8d 90 41 80 16 fc 0d d9 a2 50 41 54 5b
>6c28	8f 90 49 7c 67 4a c1 8d 46 44 6d 51 80 15 06 0e
>6c38	d9 a2 60 7a 61 5c 8f 4c 77 53 62 c1 8d 6d 71 74
>6c48	7e 80 17 10 0e d9 a2 90 57 70 6a 52 87 4b 5f 4f
>6c58	4c c1 8d 90 54 60 60 52 80 15 1a 0e d9 a2 45 6c
>6c68	5b 61 95 49 6b 6e 61 c1 8d 45 6c 5b 61 80 13 24
>6c78	0e d9 a2 65 66 46 61 8b 46 40 79 5d c1 8d 90 41
>6c88	80 17 2e 0e d9 a2 45 41 76 79 87 90 5d 52 6d 55
>6c98	c1 8d 90 58 52 49 45 80 13 38 0e d9 a2 63 78 78
>6ca8	5f 95 69 4f 63 c1 8d 5c 61 5a 80 15 42 0e d9 a2
>6cb8	5e 4e 43 57 8f 5d 51 7e 7d c1 8d 7b 60 42 54 80
>6cc8	13 4c 0e d9 a2 90 51 4d 50 56 8b 42 5c 67 65 c1
>6cd8	8d 40 80 14 56 0e d9 a2 90 52 7b 4a 7f 8e 56 6b
>6ce8	46 6f c1 8d 90 41 80 17 60 0e d9 a2 54 5d 64 5f
>6cf8	88 90 55 4e 67 6a c1 8d 90 41 53 43 77 80 12 6a
>6d08	0e d9 a2 5b 61 49 40 94 53 4b 67 5a c1 8d 41 80
>6d18	15 74 0e d9 a2 60 4c 46 63 95 4f 52 6a 44 c1 8d
>6d28	41 66 72 5b 80 15 7e 0e d9 a2 5a 65 79 6d 95 48
>6d38	42 7c 55 c1 8d 42 5d 44 6e 80 15 88 0e d9 a2 55
>6d48	78 4c 47 88 5a 7f 40 64 c1 8d 4f 47 4c 63 80 17
>6d58	92 0e d9 a2 90 46 5d 67 5f 90 90 64 5f 55 54 c1
>6d68	8d 5e 41 6d 75 80 14 9c 0e d9 a2 90 48 5a 78 7a
>6d78	8d 90 4b 59 63 5f c1 8d 40 80 17 a6 0e d9 a2 42
>6d88	41 75 45 87 90 57 4d 7e 61 c1 8d 90 55 4c 4a 61
>6d98	80 13 b0 0e d9 a2 57 4d 64 74 8c 90 61 62 47 42
>6da8	c1 8d 40 80 14 ba 0e d9 a2 63 60 48 8f 65 7a 6c
>6db8	63 c1 8d 66 5e 4c 6b 80 15 c4 0e d9 a2 4e 46 57
>6dc8	5d 95 4f 6d 78 45 c1 8d 4e 46 57 5d 80 14 ce 0e
>6dd8	d9 a2 90 49 5f 65 5d 94 90 62 7e 63 62 c1 8d 40
>6de8	80 14 d8 0e d9 a2 90 47 5a 6c 51 8a 90 5b 44 4e
>6df8	7d c1 8d 40 80 13 e2 0e d9 a2 5c 5e 55 41 8a 65
>6e08	7d 4b 43 c1 8d 90 41 80 18 ec 0e d9 a2 90 61 58
>6e18	68 6d 90 90 4c 64 7d 48 c1 8d 90 54 73 6b 65 80
>6e28	18 f6 0e d9 a2 90 5d 50 68 4d 86 90 48 4b 50 4c
>6e38	c1 8d 90 5d 5b 78 50 80 14 00 0f d9 a2 4a 56 49
>6e48	64 89 90 5e 4a 60 70 c1 8d 90 41 80 17 0a 0f d9
>6e58	a2 56 7c 61 7a 88 90 55 78 5f 51 c1 8d 90 43 44
>6e68	7e 6b 80 15 14 0f d9 a2 47 54 73 52 88 42 57 7c
>6e78	79 c1 8d 45 43 4f 6b 80 14 1e 0f d9 a2 90 47 74
>6e88	54 72 8c 90 62 49 41 49 c1 8d 40 80 14 28 0f d9
>6e98	a2 90 43 53 5d 4b 94 90 4e 6b 65 5e c1 8d 40 80
>6ea8	16 32 0f d9 a2 90 57 7e 5b 40 86 4a 67 6d 62 c1
>6eb8	8d 48 41 65 40 80 15 3c 0f d9 a2 77 45 43 90 90
>6ec8	44 41 53 72 c1 8d 44 78 58 75 80 15 46 0f d9 a2
>6ed8	51 76 73 5c 95 57 6b 76 4c c1 8d 51 76 73 5c 80
>6ee8	17 50 0f d9 a2 90 48 42 73 6c 87 55 49 7c 76 c1
>6ef8	8d 90 48 42 43 4a 80 12 5a 0f d9 a2 6c 61 45 8e
>6f08	5b 53 60 73 c1 8d 90 41 80 17 64 0f d9 a2 45 70
>6f18	4b 63 87 90 52 62 5a 6f c1 8d 90 52 42 50 4d 80
>6f28	13 6e 0f d9 a2 55 7e 75 47 8c 5d 45 71 53 c1 8d
>6f38	90 41 80 12 78 0f d9 a2 5e 7f 6e 4d 8a 5b 60 65
>6f48	6e c1 8d 40 80 12 82 0f d9 a2 59 6a 61 65 8a 58
>6f58	55 4c 4d c1 8d 40 80 15 8c 0f d9 a2 4a 49 6b 59
>6f68	95 47 56 6a 43 c1 8d 42 73 41 56 80 15 96 0f d9
>6f78	a2 43 75 7a 47 95 52 74 75 6f c1 8d 43 75 7a 47
>6f88	80 13 a0 0f d9 a2 5e 6b 47 7d 8b 48 62 79 67 c1
>6f98	8d 90 41 80 17 aa 0f d9 a2 90 49 5a 53 44 87 54
>6fa8	43 65 71 c1 8d 90 49 58 52 43 80 14 b4 0f d9 a2
>6fb8	90 45 74 58 64 8e 59 49 68 64 c1 8d 90 41 80 15
>6fc8	be 0f d9 a2 56 4d 76 43 95 4b 6f 7e 6d c1 8d 4a
>6fd8	5d 77 56 80 16 c8 0f d9 a2 5a 55 65 5b 90 90 4f
>6fe8	5f 56 6a c1 8d 69 74 7c 45 80 12 d2 0f d9 a2 49
>6ff8	47 46 71 8c 48 4a 60 53 c1 8d 40 80 14 dc 0f d9
>7008	a2 90 45 45 46 6f 8e 5c 47 6f 6a c1 8d 90 41 80
>7018	15 e6 0f d9 a2 90 49 41 72 5d 8c 90 41 64 6a 7f
>7028	c1 8d 90 41 80 14 f0 0f d9 a2 63 4c 49 65 89 90
>7038	62 75 5d 66 c1 8d 90 41 80 16 fa 0f d9 a2 57 74
>7048	58 5e 90 90 47 65 4e 60 c1 8d 5f 59 66 7e 80 13
>7058	04 10 d9 a2 51 63 5f 78 8b 42 6a 40 59 c1 8d 90
>7068	41 80 14 0e 10 d9 a2 56 5f 58 46 8e 90 59 60 7b
>7078	4a c1 8d 90 41 80 17 18 10 d9 a2 90 4b 6f 59 7c
>7088	90 90 4f 73 5a 64 c1 8d 44 44 40 68 80 17 22 10
>7098	d9 a2 4a 4e 42 6c 88 90 5f 4f 55 5a c1 8d 90 55
>70a8	41 57 76 80 15 2c 10 d9 a2 90 48 6b 77 49 89 90
>70b8	5f 7d 4c 43 c1 8d 90 41 80 18 36 10 d9 a2 90 4b
>70c8	7e 7d 79 8f 90 44 5e 44 54 c1 8d 90 50 5d 42 4d
>70d8	80 12 40 10 d9 a2 4b 54 6e 5c 8d 50 6a 5d 76 c1
>70e8	8d 40 80 12 4a 10 d9 a2 64 48 5a 7a 94 4f 7d 4f
>70f8	70 c1 8d 42 80 14 54 10 d9 a2 90 59 70 6a 5d 8d
>7108	90 47 57 71 76 c1 8d 40 80 17 5e 10 d9 a2 54 4d
>7118	63 67 87 90 4a 5d 54 64 c1 8d 90 4a 50 54 41 80
>7128	16 68 10 d9 a2 90 48 63 57 7e 86 5a 4f 6f 52 c1
>7138	8d 52 4c 68 42 80 14 72 10 d9 a2 57 76 4c 56 94
>7148	90 44 7f 4e 66 c1 8d 90 44 80 12 7c 10 d9 a2 41
>7158	50 69 53 8d 5b 4a 57 54 c1 8d 40 80 14 86 10 d9
>7168	a2 52 46 72 58 8e 90 50 48 5f 54 c1 8d 90 41 80
>7178	14 90 10 d9 a2 90 4a 77 70 55 8d 90 62 4b 56 7a
>7188	c1 8d 40 80 12 9a 10 d9 a2 41 4f 56 61 8d 53 4c
>7198	57 7f c1 8d 40 80 15 a4 10 d9 a2 5d 4e 70 4a 90
>71a8	58 7f 51 6a c1 8d 44 4f 5e 60 80 14 ae 10 d9 a2
>71b8	90 60 42 46 4b 8c 4a 5b 57 4e c1 8d 90 41 80 17
>71c8	b8 10 d9 a2 90 4d 79 73 6b 88 5f 42 5f 65 c1 8d
>71d8	90 52 7b 6c 50 80 18 c2 10 d9 a2 90 5b 65 44 5b
>71e8	87 90 65 43 6b 7d c1 8d 90 41 41 40 59 80 12 cc
>71f8	10 d9 a2 44 79 4c 72 8e 60 48 6b c1 8d 90 41 80
>7208	15 d6 10 d9 a2 58 51 4b 7f 95 5f 41 79 63 c1 8d
>7218	58 51 4b 7f 80 16 e0 10 d9 a2 49 55 61 51 90 90
>7228	43 54 47 66 c1 8d 4c 69 68 77 80 16 ea 10 d9 a2
>7238	90 61 4a 58 45 8f 60 64 45 44 c1 8d 90 66 53 41
>7248	80 15 f4 10 d9 a2 65 4b 7b 61 87 90 45 40 75 4e
>7258	c1 8d 90 44 4d 80 14 fe 10 d9 a2 90 44 45 64 7c
>7268	8c 90 50 41 46 56 c1 8d 40 80 17 08 11 d9 a2 90
>7278	49 6b 50 76 8f 90 7c 45 7c c1 8d 90 4a 67 56 72
>7288	80 13 12 11 d9 a2 90 55 53 6c 61 89 44 74 57 73
>7298	c1 8d 40 80 16 1c 11 d9 a2 90 54 52 6d 5d 86 4d
>72a8	6a 64 7e c1 8d 49 68 40 62 80 17 26 11 d9 a2 90
>72b8	63 40 4e 4b 88 90 5f 6d 67 6b c1 8d 7c 6d 69 60
>72c8	80 15 30 11 d9 a2 90 5b 7e 4e 47 8c 90 4a 51 66
>72d8	58 c1 8d 90 41 80 15 3a 11 d9 a2 43 45 45 55 95
>72e8	45 7d 5b 5f c1 8d 43 45 45 55 80 17 44 11 d9 a2
>72f8	59 50 5a 50 88 90 51 4b 65 4d c1 8d 90 48 5b 7f
>7308	5d 80 15 4e 11 d9 a2 90 5b 6d 54 5e 8a 90 48 53
>7318	5e 7b c1 8d 90 41 80 12 58 11 d9 a2 4e 76 54 4a
>7328	8c 4c 4b 67 50 c1 8d 40 80 17 62 11 d9 a2 90 5c
>7338	79 76 51 87 90 42 4a 52 5d c1 8d 90 48 52 51 80
>7348	13 6c 11 d9 a2 43 7b 58 6d 8c 90 60 6f 5f 7c c1
>7358	8d 40 80 16 76 11 d9 a2 65 56 6c 68 86 90 5a 43
>7368	6b 46 c1 8d 65 54 44 68 80 15 80 11 d9 a2 90 5f
>7378	75 50 56 8c 90 5e 63 69 43 c1 8d 90 41 80 17 8a
>7388	11 d9 a2 90 5e 4d 4d 5a 87 55 76 46 53 c1 8d 90
>7398	4a 49 49 49 80 15 94 11 d9 a2 90 52 53 45 49 8e
>73a8	90 42 50 69 75 c1 8d 90 41 80 13 9e 11 d9 a2 90
>73b8	50 47 6d 7d 8d 5e 69 63 6a c1 8d 40 80 14 a8 11
>73c8	d9 a2 56 6a 59 75 8e 90 44 56 6d 5f c1 8d 90 41
>73d8	80 14 b2 11 d9 a2 63 6a 79 51 94 90 46 6b 66 50
>73e8	c1 8d 90 45 80 13 bc 11 d9 a2 90 60 56 77 70 89
>73f8	5b 4a 7b 79 c1 8d 40 80 16 c6 11 d9 a2 63 7a 51
>7408	7d 8f 60 5c 64 5f c1 8d 41 44 56 76 5c 80 16 d0
>7418	11 d9 a2 4f 69 6b 4d 86 90 49 78 63 42 c1 8d 46
>7428	41 48 4c 80 13 da 11 d9 a2 90 54 56 79 7c 8b 65
>7438	46 79 53 c1 8d 40 80 14 e4 11 d9 a2 90 5d 63 63
>7448	63 94 4d 6f 75 6c c1 8d 90 42 80 15 ee 11 d9 a2
>7458	55 64 76 5a 86 90 5d 44 58 78 c1 8d 60 66 48 80
>7468	18 f8 11 d9 a2 90 5f 49 78 57 87 90 47 5b 7f 4d
>7478	c1 8d 90 47 49 78 45 80 12 02 12 d9 a2 4b 6e 46
>7488	63 94 43 51 6c 4b c1 8d 43 80 16 0c 12 d9 a2 52
>7498	70 50 51 87 90 52 58 4e 45 c1 8d 90 48 4e 45 80
>74a8	15 16 12 d9 a2 90 41 66 77 64 8b 90 45 62 4a 5f
>74b8	c1 8d 90 41 80 15 20 12 d9 a2 42 46 41 7c 87 4a
>74c8	6b 49 57 c1 8d 4a 6f 49 7f 80 13 2a 12 d9 a2 4e
>74d8	64 66 75 8a 90 45 57 63 5e c1 8d 40 80 15 34 12
>74e8	d9 a2 90 4d 4e 56 75 8e 90 54 46 43 62 c1 8d 90
>74f8	41 80 16 3e 12 d9 a2 50 4b 56 7f 90 90 54 6c 53
>7508	65 c1 8d 64 77 6a 64 80 13 48 12 d9 a2 90 53 55
>7518	70 8c 90 53 44 5a 54 c1 8d 40 80 14 52 12 d9 a2
>7528	54 44 69 5c 8b 90 4e 61 55 75 c1 8d 90 41 80 15
>7538	5c 12 d9 a2 90 57 5f 41 4e 8e 90 54 41 66 76 c1
>7548	8d 90 41 80 15 66 12 d9 a2 5a 70 67 54 86 57 6f
>7558	5e 73 c1 8d 52 60 46 50 80 13 70 12 d9 a2 46 43
>7568	67 6c 8c 4e 54 4f 70 c1 8d 90 41 80 17 7a 12 d9
>7578	a2 46 6c 5f 7b 8f 90 64 72 59 69 c1 8d 90 5e 45
>7588	79 6e 80 14 84 12 d9 a2 90 54 77 78 44 94 90 49
>7598	46 6e 7b c1 8d 42 80 14 8e 12 d9 a2 90 58 4c 77
>75a8	6c 8d 90 56 7b 4c 78 c1 8d 40 80 15 98 12 d9 a2
>75b8	64 78 5b 6d 8f 51 69 47 79 c1 8d 76 61 63 66 80
>75c8	13 a2 12 d9 a2 52 65 56 51 8c 90 5d 63 64 71 c1
>75d8	8d 40 80 12 ac 12 d9 a2 45 53 66 6f 94 4b 53 4b
>75e8	73 c1 8d 40 80 15 b6 12 d9 a2 5c 5b 5c 7f 88 47
>75f8	64 41 58 c1 8d 5b 7f 5d 67 80 14 c0 12 d9 a2 90
>7608	4b 61 63 4c 8c 5a 5a 5f 66 c1 8d 90 41 80 13 ca
>7618	12 d9 a2 45 77 7f 42 8e 5e 5d 51 46 c1 8d 90 41
>7628	80 14 d4 12 d9 a2 51 78 69 7f 95 51 74 79 4a c1
>7638	8d 43 70 75 80 15 de 12 d9 a2 90 5d 6a 72 4d 8c
>7648	90 45 49 7f 62 c1 8d 90 41 80 13 e8 12 d9 a2 90
>7658	4a 53 7b 40 8d 66 47 47 67 c1 8d 40 80 17 f2 12
>7668	d9 a2 90 47 7c 5d 76 88 90 63 70 64 5e c1 8d 64
>7678	4c 79 68 80 13 fc 12 d9 a2 48 67 57 42 8d 90 4d
>7688	74 7d 47 c1 8d 40 80 15 06 13 d9 a2 59 61 64 7f
>7698	95 42 6d 7f 41 c1 8d 41 43 6d 76 80 15 10 13 d9
>76a8	a2 52 5a 78 47 95 42 71 71 65 c1 8d 41 70 4e 69
>76b8	80 12 1a 13 d9 a2 4d 4e 7a 75 8a 44 75 73 7e c1
>76c8	8d 40 80 16 24 13 d9 a2 90 4c 52 6c 46 86 41 49
>76d8	54 47 c1 8d 41 49 50 42 80 17 2e 13 d9 a2 90 56
>76e8	6a 6f 54 8f 4d 69 44 69 c1 8d 90 49 41 6a 6b 80
>76f8	17 38 13 d9 a2 4d 63 57 60 88 90 4e 4c 65 59 c1
>7708	8d 90 43 6f 72 79 80 13 42 13 d9 a2 50 4e 79 78
>7718	8d 90 55 4d 76 4f c1 8d 40 80 17 4c 13 d9 a2 44
>7728	52 65 67 88 90 4a 6f 55 58 c1 8d 90 4e 7d 70 71
>7738	80 18 56 13 d9 a2 90 56 77 5d 40 90 90 43 73 42
>7748	6b c1 8d 90 53 44 5a 55 80 14 60 13 d9 a2 4a 63
>7758	47 59 8e 90 5e 57 55 72 c1 8d 90 41 80 12 6a 13
>7768	d9 a2 5c 61 77 4f 8c 4b 55 52 77 c1 8d 40 80 14
>7778	74 13 d9 a2 90 45 4e 7d 5d 8e 5e 4f 71 5f c1 8d
>7788	90 41 80 16 7e 13 d9 a2 4d 60 48 62 86 90 48 44
>7798	60 4c c1 8d 45 60 48 60 80 14 88 13 d9 a2 90 45
>77a8	49 6a 44 94 90 4d 58 73 6d c1 8d 40 80 12 92 13
>77b8	d9 a2 58 66 4f 45 8c 46 47 7f 59 c1 8d 40 80 15
>77c8	9c 13 d9 a2 4f 6b 41 64 87 42 5c 70 65 c1 8d 4f
>77d8	7f 71 65 80 18 a6 13 d9 a2 90 4a 5d 68 44 8f 90
>77e8	51 4a 48 4a c1 8d 90 5b 67 70 4e 80 17 b0 13 d9
>77f8	a2 90 46 7f 41 4c 88 90 41 45 58 45 c1 8d 47 7a
>7808	59 4f 80 18 ba 13 d9 a2 90 52 60 72 7b 86 90 56
>7818	43 44 77 c1 8d 90 56 63 76 7f 80 12 c4 13 d9 a2
>7828	48 5d 5f 6e 89 53 4a 54 5b c1 8d 40 80 12 ce 13
>7838	d9 a2 61 78 64 5e 8c 43 54 58 63 c1 8d 40 80 13
>7848	d8 13 d9 a2 90 52 52 7d 60 94 60 7c 65 7d c1 8d
>7858	40 80 13 e2 13 d9 a2 41 61 71 49 8c 90 44 72 50
>7868	72 c1 8d 40 80 05 ec 13 db 80 00

;******  Return to file: ..\source\main/00start.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/commands/assert.asm

.1010					Command_Assert:
.1010	20 79 14	jsr $1479			jsr 	EvaluateRoot 				; what is being asserted.
.1013	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; is it true ?
.1016	f0 01		beq $1019			beq 	_CAError
.1018	60		rts				rts
.1019					_CAError:
.1019	a2 03		ldx #$03			ldx 	#ErrorID_Assert
.101b	20 1a 19	jsr $191a			jsr 	ErrorHandler

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/commands/run.asm

.101e					Command_Run:
.101e	a2 ff		ldx #$ff			ldx 	#$FF
.1020	9a		txs				txs
.1021	20 40 10	jsr $1040			jsr 	ResetCodeAddress
.1024	a0 03		ldy #$03			ldy 	#3
.1026					CRNextInstruction:
.1026	b1 02		lda ($02),y			lda 	(codePtr),y 				; get next token.
.1028	10 14		bpl $103e			bpl 	_CRNotToken
.102a	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS 				; if in the tokens then do that token.
.102c	b0 04		bcs $1032			bcs 	_CRExecute
.102e	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; if one of the system tokens $80-$85 do that
.1030	b0 1b		bcs $104d			bcs 	Unimplemented 				; else not implemented.
.1032					_CRExecute:
.1032	c8		iny				iny 								; consume it.
.1033	0a		asl a				asl 	a 							; double it, losing most significant bit.
.1034	aa		tax				tax
.1035	20 3b 10	jsr $103b			jsr 	_CRRunRoutine 				; we want to do jsr (group0vectors,x)
.1038	4c 26 10	jmp $1026			jmp 	CRNextInstruction
.103b					_CRRunRoutine:
.103b	7c 51 10	jmp ($1051,x)			jmp 	(Group0Vectors,x)
.103e					_CRNotToken:
>103e	db						.byte 	$DB
.103f					CommandColon:
.103f	60		rts				rts
.1040					ResetCodeAddress:
.1040	ad 68 08	lda $0868			lda 	basePage 					; copy basePage to code Pointer
.1043	85 02		sta $02				sta 	codePtr
.1045	ad 69 08	lda $0869			lda 	basePage+1
.1048	85 03		sta $03				sta 	codePtr+1
.104a	a0 03		ldy #$03			ldy 	#3 							; offset after offset link and line#
.104c	60		rts				rts
.104d					Unimplemented:
>104d	db						.byte 	$DB
.104e	4c 4d 10	jmp $104d			jmp 	Unimplemented

;******  Processing file: ..\source\main/commands/../../generated/tokenvectors0.inc

.1051					Group0Vectors:
>1051	19 11					.word	AdvanceNextLine          ; $80 [[eol]]
>1053	4d 10					.word	Unimplemented            ; $81 [[sh1]]
>1055	4d 10					.word	Unimplemented            ; $82 [[sh2]]
>1057	4d 10					.word	Unimplemented            ; $83 [[sh3]]
>1059	4d 10					.word	Unimplemented            ; $84 [[fpc]]
>105b	4d 10					.word	Unimplemented            ; $85 [[str]]
>105d	ee 11					.word	AndHandler               ; $86 and
>105f	db 11					.word	OrHandler                ; $87 or
>1061	c8 11					.word	XorHandler               ; $88 xor
>1063	05 13					.word	CompareGreaterEq         ; $89 >=
>1065	0f 13					.word	CompareLessEq            ; $8a <=
>1067	f1 12					.word	CompareGreater           ; $8b >
>1069	e7 12					.word	CompareLess              ; $8c <
>106b	dd 12					.word	CompareEquals            ; $8d =
>106d	fb 12					.word	CompareNotEquals         ; $8e <>
>106f	59 11					.word	AddHandler               ; $8f +
>1071	7c 11					.word	SubHandler               ; $90 -
>1073	14 12					.word	ShrHandler               ; $91 >>
>1075	01 12					.word	ShlHandler               ; $92 <<
>1077	8f 11					.word	MulHandler               ; $93 *
>1079	a2 11					.word	DivHandler               ; $94 /
>107b	b5 11					.word	ModHandler               ; $95 mod
>107d	4d 12					.word	PowerHandler             ; $96 ^
>107f	27 12					.word	WordRefHandler           ; $97 !
>1081	3a 12					.word	ByteRefHandler           ; $98 ?
>1083	4d 10					.word	Unimplemented            ; $99 repeat
>1085	4d 10					.word	Unimplemented            ; $9a while
>1087	4d 10					.word	Unimplemented            ; $9b for
>1089	4d 10					.word	Unimplemented            ; $9c if
>108b	4d 10					.word	Unimplemented            ; $9d until
>108d	4d 10					.word	Unimplemented            ; $9e wend
>108f	4d 10					.word	Unimplemented            ; $9f next
>1091	4d 10					.word	Unimplemented            ; $a0 then
>1093	4d 10					.word	Unimplemented            ; $a1 endif
>1095	51 14					.word	UnaryParenthesis         ; $a2 (
>1097	fd 14					.word	UnaryLen                 ; $a3 len(
>1099	41 15					.word	UnarySgn                 ; $a4 sgn(
>109b	2a 15					.word	UnaryAbs                 ; $a5 abs(
>109d	9a 15					.word	Unary_Random             ; $a6 random(
>109f	e4 15					.word	Unary_Page               ; $a7 page
>10a1	8b 18					.word	MInt32True               ; $a8 true
>10a3	8f 18					.word	MInt32False              ; $a9 false
>10a5	af 15					.word	Unary_Min                ; $aa min(
>10a7	b3 15					.word	Unary_Max                ; $ab max(
>10a9	4d 10					.word	Unimplemented            ; $ac sys(
>10ab	4d 10					.word	Unimplemented            ; $ad timer(
>10ad	4d 10					.word	Unimplemented            ; $ae event(
>10af	4d 10					.word	Unimplemented            ; $af get(
>10b1	4d 10					.word	Unimplemented            ; $b0 inkey(
>10b3	4d 10					.word	Unimplemented            ; $b1 alloc(
>10b5	4d 10					.word	Unimplemented            ; $b2 chr$(
>10b7	4d 10					.word	Unimplemented            ; $b3 left$(
>10b9	4d 10					.word	Unimplemented            ; $b4 mid$(
>10bb	4d 10					.word	Unimplemented            ; $b5 right$(
>10bd	4d 10					.word	Unimplemented            ; $b6 str$(
>10bf	4d 10					.word	Unimplemented            ; $b7 val(
>10c1	58 15					.word	UnaryPeek                ; $b8 peek(
>10c3	5e 15					.word	UnaryDeek                ; $b9 deek(
>10c5	64 15					.word	UnaryLeek                ; $ba leek(
>10c7	1b 15					.word	UnaryAsc                 ; $bb asc(
>10c9	4d 10					.word	Unimplemented            ; $bc int(
>10cb	4d 10					.word	Unimplemented            ; $bd float(
>10cd	f2 15					.word	UnaryReference           ; $be @
>10cf	08 16					.word	UnaryComplement          ; $bf ~
>10d1	05 16					.word	UnaryHexMarker           ; $c0 &
>10d3	4d 10					.word	Unimplemented            ; $c1 )
>10d5	3f 10					.word	CommandColon             ; $c2 :
>10d7	4d 10					.word	Unimplemented            ; $c3 ,
>10d9	4d 10					.word	Unimplemented            ; $c4 ;
>10db	4d 10					.word	Unimplemented            ; $c5 ]
>10dd	4d 10					.word	Unimplemented            ; $c6 to
>10df	4d 10					.word	Unimplemented            ; $c7 step
>10e1	4d 10					.word	Unimplemented            ; $c8 proc
>10e3	4d 10					.word	Unimplemented            ; $c9 endproc
>10e5	4d 10					.word	Unimplemented            ; $ca local
>10e7	4d 10					.word	Unimplemented            ; $cb rem
>10e9	4d 10					.word	Unimplemented            ; $cc let
>10eb	4d 10					.word	Unimplemented            ; $cd '
>10ed	4d 10					.word	Unimplemented            ; $ce [
>10ef	4d 10					.word	Unimplemented            ; $cf input
>10f1	4d 10					.word	Unimplemented            ; $d0 else
>10f3	4d 10					.word	Unimplemented            ; $d1 vdu
>10f5	4d 10					.word	Unimplemented            ; $d2 read
>10f7	4d 10					.word	Unimplemented            ; $d3 data
>10f9	4d 10					.word	Unimplemented            ; $d4 restore
>10fb	4d 10					.word	Unimplemented            ; $d5 print
>10fd	4d 10					.word	Unimplemented            ; $d6 goto
>10ff	4d 10					.word	Unimplemented            ; $d7 gosub
>1101	4d 10					.word	Unimplemented            ; $d8 return
>1103	10 10					.word	Command_Assert           ; $d9 assert
>1105	11 11					.word	CommandStop              ; $da stop
>1107	16 11					.word	CommandEnd               ; $db end
>1109	4d 10					.word	Unimplemented            ; $dc dim
>110b	4d 10					.word	Unimplemented            ; $dd poke
>110d	4d 10					.word	Unimplemented            ; $de doke
>110f	4d 10					.word	Unimplemented            ; $df loke

;******  Return to file: ..\source\main/commands/run.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/commands/stopend.asm

.1111					CommandStop:
.1111	a2 05		ldx #$05			ldx 	#ErrorID_Stop
.1113	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1116					CommandEnd:
.1116	4c ff ff	jmp $ffff			jmp 	$FFFF 						; fudge to crash out of emulator
.1119					AdvanceNextLine:
.1119	a0 00		ldy #$00			ldy 	#0 							; get offset
.111b	b1 02		lda ($02),y			lda 	(codePtr),y
.111d	18		clc				clc 								; add to codePtr
.111e	65 02		adc $02				adc 	codePtr
.1120	85 02		sta $02				sta 	codePtr
.1122	90 02		bcc $1126			bcc 	_ANLNoCarry
.1124	e6 03		inc $03				inc 	codePtr+1
.1126					_ANLNoCarry:
.1126	b1 02		lda ($02),y			lda 	(codePtr),y 				; if end of program (or was just stand alone.
.1128	f0 ec		beq $1116			beq 	CommandEnd 					; execute END
.112a	a0 03		ldy #$03			ldy 	#3 							; start of tokens on line.
.112c	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/binary.asm

.112d					BinaryProcess:
.112d	b5 40		lda $40,x			lda 	esType,x 					; or type bytes together and check bit 6.
.112f	15 41		ora $41,x			ora 	esType+1,x
.1131	0a		asl a				asl 	a
.1132	30 0e		bmi $1142			bmi 	_BPStringType 				; if one is set, then string type.
.1134	18		clc				clc 								; return CC for integer
.1135	29 02		and #$02			and 	#$02 						; $02 because of ASL A.
.1137	f0 08		beq $1141			beq 	_BPExit 					; if both integer then return with CC.
.1139	20 47 11	jsr $1147			jsr 	BPMakeBothFloat 			; make both float
.113c	a9 01		lda #$01			lda 	#$01 						; set result type to float
.113e	95 40		sta $40,x			sta 	esType,x
.1140	38		sec				sec 								; and return with carry set.
.1141					_BPExit:
.1141	60		rts				rts
.1142					_BPStringType:
.1142	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1144	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1147					BPMakeBothFloat:
.1147	e8		inx				inx
.1148	20 4c 11	jsr $114c			jsr 	BPMakeFloat 				; one is a float, so we do both as floats.
.114b	ca		dex				dex
.114c					BPMakeFloat:
.114c	b5 40		lda $40,x			lda 	esType,x 					; get type bit.
.114e	4a		lsr a				lsr 	a
.114f	b0 07		bcs $1158			bcs 	_BPIsFloat
.1151	8a		txa				txa
.1152	a2 1a		ldx #$1a		ldx	#26
.1154	20 21 19	jsr $1921		jsr	floatingpointHandler
.1157	aa		tax				tax
.1158					_BPIsFloat:
.1158	60		rts				rts
.1159					AddHandler:
.1159	20 1f 13	jsr $131f			jsr 	DereferenceTwo 				; dereference top two on stack.
.115c	b5 40		lda $40,x			lda 	esType,x 					; check two strings.
.115e	35 41		and $41,x			and 	esType+1,x
.1160	29 40		and #$40			and 	#$40 						; if both have bit 6 set ...
.1162	d0 10		bne $1174			bne 	_AHStringConcat				; concatenate strings.
.1164	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1167	b0 03		bcs $116c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1169	4c 81 17	jmp $1781			jmp 	MInt32Add 							; else do it as integer.
.116c					_IsFPOperation:
.116c	8a		txa				txa 								; call the relevant fp routine
.116d	a2 04		ldx #$04		ldx	#4
.116f	20 21 19	jsr $1921		jsr	floatingpointHandler
.1172	aa		tax				tax
.1173	60		rts				rts
.1174					_AHStringConcat:
.1174	8a		txa				txa
.1175	a2 00		ldx #$00		ldx	#0
.1177	20 30 19	jsr $1930		jsr	stringHandler
.117a	aa		tax				tax
.117b	60		rts				rts
.117c					SubHandler:
.117c	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.117f	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1182	b0 03		bcs $1187			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1184	4c 9b 17	jmp $179b			jmp 	MInt32Sub 							; else do it as integer.
.1187					_IsFPOperation:
.1187	8a		txa				txa 								; call the relevant fp routine
.1188	a2 12		ldx #$12		ldx	#18
.118a	20 21 19	jsr $1921		jsr	floatingpointHandler
.118d	aa		tax				tax
.118e	60		rts				rts
.118f					MulHandler:
.118f	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1192	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1195	b0 03		bcs $119a			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1197	4c b5 17	jmp $17b5			jmp 	MInt32Multiply 							; else do it as integer.
.119a					_IsFPOperation:
.119a	8a		txa				txa 								; call the relevant fp routine
.119b	a2 0c		ldx #$0c		ldx	#12
.119d	20 21 19	jsr $1921		jsr	floatingpointHandler
.11a0	aa		tax				tax
.11a1	60		rts				rts
.11a2					DivHandler:
.11a2	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11a5	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11a8	b0 03		bcs $11ad			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11aa	4c 8f 16	jmp $168f			jmp 	MInt32SDivide 							; else do it as integer.
.11ad					_IsFPOperation:
.11ad	8a		txa				txa 								; call the relevant fp routine
.11ae	a2 08		ldx #$08		ldx	#8
.11b0	20 21 19	jsr $1921		jsr	floatingpointHandler
.11b3	aa		tax				tax
.11b4	60		rts				rts
.11b5					ModHandler:
.11b5	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11b8	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11bb	b0 03		bcs $11c0			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11bd	4c 0d 17	jmp $170d			jmp 	MInt32Modulus 							; else do it as integer.
.11c0					_IsFPOperation:
.11c0	8a		txa				txa 								; call the relevant fp routine
.11c1	a2 0a		ldx #$0a		ldx	#10
.11c3	20 21 19	jsr $1921		jsr	floatingpointHandler
.11c6	aa		tax				tax
.11c7	60		rts				rts
.11c8					XorHandler:
.11c8	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11cb	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11ce	b0 03		bcs $11d3			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11d0	4c 41 16	jmp $1641			jmp 	MInt32Xor 							; else do it as integer.
.11d3					_IsFPOperation:
.11d3	8a		txa				txa 								; call the relevant fp routine
.11d4	a2 0a		ldx #$0a		ldx	#10
.11d6	20 21 19	jsr $1921		jsr	floatingpointHandler
.11d9	aa		tax				tax
.11da	60		rts				rts
.11db					OrHandler:
.11db	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11de	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11e1	b0 03		bcs $11e6			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11e3	4c 28 16	jmp $1628			jmp 	MInt32Or 							; else do it as integer.
.11e6					_IsFPOperation:
.11e6	8a		txa				txa 								; call the relevant fp routine
.11e7	a2 0a		ldx #$0a		ldx	#10
.11e9	20 21 19	jsr $1921		jsr	floatingpointHandler
.11ec	aa		tax				tax
.11ed	60		rts				rts
.11ee					AndHandler:
.11ee	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.11f1	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.11f4	b0 03		bcs $11f9			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.11f6	4c 0f 16	jmp $160f			jmp 	MInt32And 							; else do it as integer.
.11f9					_IsFPOperation:
.11f9	8a		txa				txa 								; call the relevant fp routine
.11fa	a2 0a		ldx #$0a		ldx	#10
.11fc	20 21 19	jsr $1921		jsr	floatingpointHandler
.11ff	aa		tax				tax
.1200	60		rts				rts
.1201					ShlHandler:
.1201	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1204	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1207	b0 03		bcs $120c			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1209	4c 82 12	jmp $1282			jmp 	Mint32ShiftLeftX 							; else do it as integer.
.120c					_IsFPOperation:
.120c	8a		txa				txa 								; call the relevant fp routine
.120d	a2 0a		ldx #$0a		ldx	#10
.120f	20 21 19	jsr $1921		jsr	floatingpointHandler
.1212	aa		tax				tax
.1213	60		rts				rts
.1214					ShrHandler:
.1214	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1217	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.121a	b0 03		bcs $121f			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.121c	4c 85 12	jmp $1285			jmp 	MInt32ShiftRightX 							; else do it as integer.
.121f					_IsFPOperation:
.121f	8a		txa				txa 								; call the relevant fp routine
.1220	a2 0a		ldx #$0a		ldx	#10
.1222	20 21 19	jsr $1921		jsr	floatingpointHandler
.1225	aa		tax				tax
.1226	60		rts				rts
.1227					WordRefHandler:
.1227	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.122a	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.122d	b0 03		bcs $1232			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.122f	4c 74 12	jmp $1274			jmp 	MInt32WordIndirect 							; else do it as integer.
.1232					_IsFPOperation:
.1232	8a		txa				txa 								; call the relevant fp routine
.1233	a2 0a		ldx #$0a		ldx	#10
.1235	20 21 19	jsr $1921		jsr	floatingpointHandler
.1238	aa		tax				tax
.1239	60		rts				rts
.123a					ByteRefHandler:
.123a	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.123d	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1240	b0 03		bcs $1245			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1242	4c 78 12	jmp $1278			jmp 	MInt32ByteIndirect 							; else do it as integer.
.1245					_IsFPOperation:
.1245	8a		txa				txa 								; call the relevant fp routine
.1246	a2 0a		ldx #$0a		ldx	#10
.1248	20 21 19	jsr $1921		jsr	floatingpointHandler
.124b	aa		tax				tax
.124c	60		rts				rts
.124d					PowerHandler:
.124d	20 1f 13	jsr $131f			jsr 	DereferenceTwo
.1250	20 2d 11	jsr $112d			jsr 	BinaryProcess 				; check to see if either is float
.1253	b0 03		bcs $1258			bcs 	_IsFPOperation 				; if so do the whole thing as float.
.1255	4c 60 12	jmp $1260			jmp 	PowerInteger 							; else do it as integer.
.1258					_IsFPOperation:
.1258	8a		txa				txa 								; call the relevant fp routine
.1259	a2 16		ldx #$16		ldx	#22
.125b	20 21 19	jsr $1921		jsr	floatingpointHandler
.125e	aa		tax				tax
.125f	60		rts				rts
.1260					PowerInteger:
.1260	20 47 11	jsr $1147			jsr 	BPMakeBothFloat				; make them float.
.1263	8a		txa				txa
.1264	a2 16		ldx #$16		ldx	#22
.1266	20 21 19	jsr $1921		jsr	floatingpointHandler
.1269	a2 14		ldx #$14		ldx	#20
.126b	20 21 19	jsr $1921		jsr	floatingpointHandler
.126e	aa		tax				tax
.126f	a9 00		lda #$00			lda 	#0 							; make type integer
.1271	95 40		sta $40,x			sta 	esType,x
.1273	60		rts				rts
.1274					Mint32WordIndirect:
.1274	a9 80		lda #$80			lda 	#$80 				 		; word reference type
.1276	d0 02		bne $127a			bne 	Min32Indirect
.1278					Mint32ByteIndirect:
.1278	a9 a0		lda #$a0			lda 	#$A0 						; byte reference type
.127a					Min32Indirect:
.127a	48		pha				pha 								; save the indirection
.127b	20 81 17	jsr $1781			jsr 	MInt32Add 					; add a!b a?b
.127e	68		pla				pla 								; and set the type to reference.
.127f	95 40		sta $40,x			sta 	esType,x
.1281	60		rts				rts
.1282					Mint32ShiftLeftX:
.1282	18		clc				clc
.1283	90 01		bcc $1286			bcc 	Mint32Shift
.1285					Mint32ShiftRightX:
.1285	38		sec				sec
.1286					Mint32Shift:
.1286	08		php				php 								; save carry flag on stack.
.1287	b5 51		lda $51,x			lda 	esInt1+1,x 					; if shift >= 32 then it is zero.
.1289	15 59		ora $59,x			ora 	esInt2+1,x
.128b	15 61		ora $61,x			ora 	esInt3+1,x
.128d	d0 1e		bne $12ad			bne 	_MShiftZero
.128f	b5 49		lda $49,x			lda 	esInt0+1,x
.1291	c9 20		cmp #$20			cmp 	#32
.1293	b0 18		bcs $12ad			bcs 	_MShiftZero
.1295					_MShiftLoop:
.1295	b5 49		lda $49,x			lda 	esInt0+1,x 					; check count is zero
.1297	f0 12		beq $12ab			beq 	_MShiftExit
.1299	d6 49		dec $49,x			dec 	esInt0+1,x
.129b	28		plp				plp 								; restore and save carry
.129c	08		php				php
.129d	90 06		bcc $12a5			bcc 	_MShiftLeft
.129f	20 ad 18	jsr $18ad			jsr 	Mint32ShiftRight
.12a2	4c 95 12	jmp $1295			jmp 	_MShiftLoop
.12a5					_MShiftLeft:
.12a5	20 a4 18	jsr $18a4			jsr 	Mint32ShiftLeft
.12a8	4c 95 12	jmp $1295			jmp 	_MShiftLoop
.12ab					_MShiftExit:
.12ab	28		plp				plp	 								; throw saved carry and exit
.12ac	60		rts				rts
.12ad					_MShiftZero:
.12ad	4c 8f 18	jmp $188f			jmp 	MInt32False 				; return 0.

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/compare.asm

.12b0					PerformComparison:
.12b0	b5 40		lda $40,x			lda 	esType,x 					; check for two strings.
.12b2	35 41		and $41,x			and 	esType+1,x
.12b4	0a		asl a				asl 	a
.12b5	30 19		bmi $12d0			bmi 	_PCIsString
.12b7	b5 40		lda $40,x			lda 	esType,x 					; check either is floating point.
.12b9	15 41		ora $41,x			ora 	esType+1,x
.12bb	0a		asl a				asl 	a 							; shift bit 6 (string) to bit 7
.12bc	30 1a		bmi $12d8			bmi 	_PCError
.12be	29 02		and #$02			and 	#$02 						; because of ASL, check type in bit 0
.12c0	f0 0b		beq $12cd			beq 	_PCIsInteger 				; if not two integers
.12c2	20 47 11	jsr $1147			jsr 	BPMakeBothFloat 			; make both float
.12c5	8a		txa				txa
.12c6	a2 06		ldx #$06		ldx	#6
.12c8	20 21 19	jsr $1921		jsr	floatingpointHandler
.12cb	aa		tax				tax
.12cc	60		rts				rts
.12cd					_PCIsInteger:
.12cd	4c 5a 16	jmp $165a			jmp 	MInt32Compare
.12d0					_PCIsString:
.12d0	8a		txa				txa
.12d1	a2 02		ldx #$02		ldx	#2
.12d3	20 30 19	jsr $1930		jsr	stringHandler
.12d6	aa		tax				tax
.12d7	60		rts				rts
.12d8					_PCError:
.12d8	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.12da	20 1a 19	jsr $191a			jsr 	ErrorHandler
.12dd					CompareEquals:
.12dd	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12e0	c9 00		cmp #$00			cmp 	#$00
.12e2	f0 35		beq $1319			beq  	CompareTrue
.12e4	4c 1c 13	jmp $131c			jmp 	CompareFalse
.12e7					CompareLess:
.12e7	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12ea	c9 ff		cmp #$ff			cmp 	#$FF
.12ec	f0 2b		beq $1319			beq  	CompareTrue
.12ee	4c 1c 13	jmp $131c			jmp 	CompareFalse
.12f1					CompareGreater:
.12f1	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12f4	c9 01		cmp #$01			cmp 	#$01
.12f6	f0 21		beq $1319			beq  	CompareTrue
.12f8	4c 1c 13	jmp $131c			jmp 	CompareFalse
.12fb					CompareNotEquals:
.12fb	20 b0 12	jsr $12b0			jsr 	PerformComparison
.12fe	c9 00		cmp #$00			cmp 	#$00
.1300	d0 17		bne $1319			bne  	CompareTrue
.1302	4c 1c 13	jmp $131c			jmp 	CompareFalse
.1305					CompareGreaterEq:
.1305	20 b0 12	jsr $12b0			jsr 	PerformComparison
.1308	c9 ff		cmp #$ff			cmp 	#$FF
.130a	d0 0d		bne $1319			bne  	CompareTrue
.130c	4c 1c 13	jmp $131c			jmp 	CompareFalse
.130f					CompareLessEq:
.130f	20 b0 12	jsr $12b0			jsr 	PerformComparison
.1312	c9 01		cmp #$01			cmp 	#$01
.1314	d0 03		bne $1319			bne  	CompareTrue
.1316	4c 1c 13	jmp $131c			jmp 	CompareFalse
.1319					CompareTrue:
.1319	4c 8b 18	jmp $188b			jmp 	MInt32True
.131c					CompareFalse:
.131c	4c 8f 18	jmp $188f			jmp 	MInt32False

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/dereference.asm

.131f					DereferenceTwo:
.131f	e8		inx				inx
.1320	20 24 13	jsr $1324			jsr 	DereferenceOne
.1323	ca		dex				dex
.1324					DereferenceOne:
.1324	b5 40		lda $40,x			lda 	esType,x
.1326	10 3d		bpl $1365			bpl 	_DRNotReference 			; is it a reference ?
.1328	4a		lsr a				lsr 	a 							; do float dereference if bit 0 set.
.1329	b0 3b		bcs $1366			bcs 	_DRFloatDeReference
.132b	98		tya				tya
.132c	48		pha				pha
.132d	b5 48		lda $48,x			lda 	esInt0,x 					; copy address to temp0
.132f	85 04		sta $04				sta 	temp0
.1331	b5 50		lda $50,x			lda 	esInt1,x
.1333	85 05		sta $05				sta 	temp0+1
.1335	a9 00		lda #$00			lda 	#0 							; clear esInt1..3
.1337	95 50		sta $50,x			sta 	esInt1,x
.1339	95 58		sta $58,x			sta 	esInt2,x
.133b	95 60		sta $60,x			sta 	esInt3,x
.133d	b5 40		lda $40,x			lda 	esType,x 					; get the type byte.
.133f	29 60		and #$60			and 	#$60 						; get string flag ($40) and byte flag ($20)
.1341	0a		asl a				asl 	a 							; now string ($80) byte ($40)
.1342	30 0d		bmi $1351			bmi 	_DeRefString 				; string, 2 bytes only
.1344	d0 11		bne $1357			bne 	_DeRefByte 					; byte 1 byte only
.1346					_DeRefLong:
.1346	a0 03		ldy #$03			ldy 	#3
.1348	b1 04		lda ($04),y			lda 	(temp0),y
.134a	95 60		sta $60,x			sta 	esInt3,x
.134c	88		dey				dey
.134d	b1 04		lda ($04),y			lda 	(temp0),y
.134f	95 58		sta $58,x			sta 	esInt2,x
.1351					_DeRefString:
.1351	a0 01		ldy #$01			ldy 	#1
.1353	b1 04		lda ($04),y			lda 	(temp0),y
.1355	95 50		sta $50,x			sta 	esInt1,x
.1357					_DeRefByte:
.1357	a0 00		ldy #$00			ldy 	#0
.1359	b1 04		lda ($04),y			lda 	(temp0),y
.135b	95 48		sta $48,x			sta 	esInt0,x
.135d	b5 40		lda $40,x			lda 	esType,x 					; clear byte and deref bits.
.135f	29 40		and #$40			and 	#$40
.1361	95 40		sta $40,x			sta 	esType,x
.1363	68		pla				pla
.1364	a8		tay				tay
.1365					_DRNotReference
.1365	60		rts				rts
.1366					_DRFloatDereference:
.1366	8a		txa				txa
.1367	a2 00		ldx #$00		ldx	#0
.1369	20 21 19	jsr $1921		jsr	floatingpointHandler
.136c	aa		tax				tax
.136d	a9 01		lda #$01			lda 	#$01 						; type to FP (float)
.136f	95 40		sta $40,x			sta 	esType,x
.1371	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/evaluate.asm

.1372					EvaluateLevel:
.1372	48		pha				pha 								; save precedence level.
.1373	a9 00		lda #$00			lda 	#0 							; zero the current stack level.
.1375	95 48		sta $48,x			sta 	esInt0,x
.1377	95 50		sta $50,x			sta 	esInt1,x
.1379	95 58		sta $58,x			sta 	esInt2,x
.137b	95 60		sta $60,x			sta 	esInt3,x
.137d	95 40		sta $40,x			sta 	esType,x 					; zero the type (integer value)
.137f	b1 02		lda ($02),y			lda 	(codePtr),y	 				; look at first token/character
.1381	30 21		bmi $13a4			bmi 	_ELIsToken 					; if -ve could be string, float, or unary function.
.1383	0a		asl a				asl 	a 							; if 00-3F then will now be PL and it's a variable.
.1384	30 0a		bmi $1390			bmi 	_ELIsConstant 				; 40-7F will be -ve and that's an integer constant.
.1386	8a		txa				txa 								; stack level in X
.1387	a2 00		ldx #$00		ldx	#0
.1389	20 5a 19	jsr $195a		jsr	variableHandler
.138c	aa		tax				tax
.138d	4c cd 13	jmp $13cd			jmp		_ELHasTerm
.1390					_ELIsConstant:
.1390	4a		lsr a				lsr 	a 							; get the value back
.1391	29 3f		and #$3f			and 	#$3F 						; force into range 0-63
.1393	95 48		sta $48,x			sta 	esInt0,x 					; and put in LSB.
.1395					_ELCheckNext:
.1395	c8		iny				iny 								; look at next
.1396	b1 02		lda ($02),y			lda 	(codePtr),y
.1398	49 40		eor #$40			eor 	#$40 						; shift around so 40-7F => 00-3F
.139a	c9 40		cmp #$40			cmp 	#$40 						; out of range ?
.139c	b0 2f		bcs $13cd			bcs 	_ELHasTerm 					; done getting the constant.
.139e	20 b3 14	jsr $14b3			jsr 	ELShiftByteIn 				; shift byte into position.
.13a1	4c 95 13	jmp $1395			jmp 	_ELCheckNext
.13a4					_ELIsToken:
.13a4	c9 85		cmp #$85			cmp 	#TOK_STR 					; handle strings.
.13a6	f0 0f		beq $13b7			beq 	_ELIsString
.13a8	c9 84		cmp #$84			cmp 	#TOK_FPC 					; if no, then check unary.
.13aa	d0 5f		bne $140b			bne 	_ELCheckUnary
.13ac	8a		txa				txa 								; put X into A
.13ad	c8		iny				iny 								; skip over the float marker
.13ae	a2 18		ldx #$18		ldx	#24
.13b0	20 21 19	jsr $1921		jsr	floatingpointHandler
.13b3	aa		tax				tax 								; restore X
.13b4	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.13b7					_ELIsString:
.13b7	98		tya				tya 								; address of string is codePtr+y+1
.13b8	38		sec				sec
.13b9	65 02		adc $02				adc 	codePtr
.13bb	95 48		sta $48,x			sta 	esInt0,x
.13bd	a5 03		lda $03				lda 	codePtr+1
.13bf	69 00		adc #$00			adc 	#0
.13c1	95 50		sta $50,x			sta 	esInt1,x
.13c3	a9 40		lda #$40			lda 	#$40 						; set type to string value
.13c5	95 40		sta $40,x			sta 	esType,x
.13c7	c8		iny				iny 								; skip over string.
.13c8	98		tya				tya
.13c9	38		sec				sec									; +1 for the length itself.
.13ca	71 02		adc ($02),y			adc 	(codePtr),y
.13cc	a8		tay				tay 								; and fall through to term loop code.
.13cd					_ELHasTerm:
.13cd	b1 02		lda ($02),y			lda 	(codePtr),y
.13cf	c9 86		cmp #$86			cmp 	#TOK_BINARYST 				; check in the correct range for binary tokens.
.13d1	90 04		bcc $13d7			bcc 	_ELPopExit
.13d3	c9 9d		cmp #$9d			cmp 	#TOK_STRUCTST
.13d5	90 02		bcc $13d9			bcc 	_ELHasBinaryTerm
.13d7					_ELPopExit:
.13d7	68		pla				pla
.13d8					_ELExit:
.13d8	60		rts				rts
.13d9					_ELHasBinaryTerm:
.13d9	84 0a		sty $0a				sty 	tempShort 					; save position
.13db	a8		tay				tay 								; use token as an index and get the precedence.
.13dc	b9 5b 14	lda $145b,y			lda 	ELBinaryOperatorInfo-TOK_BINARYST,y
.13df	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.13e1	85 0a		sta $0a				sta 	tempShort 					; save precedence in memory.
.13e3	68		pla				pla 								; restore current level.
.13e4	c5 0a		cmp $0a				cmp 	tempShort 					; if current >= operator then exit
.13e6	b0 f0		bcs $13d8			bcs 	_ELExit
.13e8	48		pha				pha 								; save current level back on the stack.
.13e9	b1 02		lda ($02),y			lda 	(codePtr),y 				; save the binary operator on the stack and skip it.
.13eb	48		pha				pha
.13ec	c8		iny				iny
.13ed	e8		inx				inx 								; calculate the RHS at the operator precedence.
.13ee	a5 0a		lda $0a				lda 	tempShort
.13f0	20 72 13	jsr $1372			jsr 	EvaluateLevel
.13f3	ca		dex				dex
.13f4	68		pla				pla 								; get the operator back out.
.13f5					_ELExecuteA:
.13f5	86 0a		stx $0a				stx 	tempShort 					; upload the vectors. Would be nice to use jmp (aaaa,x)
.13f7	0a		asl a				asl 	a 							; but not practical. May use push/rts later.
.13f8	aa		tax				tax
.13f9	bd 51 10	lda $1051,x			lda 	Group0Vectors,x
.13fc	85 04		sta $04				sta 	temp0
.13fe	bd 52 10	lda $1052,x			lda 	Group0Vectors+1,x
.1401	85 05		sta $05				sta 	temp0+1
.1403	a6 0a		ldx $0a				ldx 	tempShort
.1405	20 4e 14	jsr $144e			jsr 	_ELCallTemp0
.1408	4c cd 13	jmp $13cd			jmp 	_ELHasTerm 					; and loop back round.
.140b					_ELCheckUnary:
.140b	c8		iny				iny 								; skip over token.
.140c	c9 90		cmp #$90			cmp 	#TKW_MINUS 					; is it - term
.140e	f0 15		beq $1425			beq 	_ELMinus
.1410	c9 97		cmp #$97			cmp 	#TKW_PLING 					; is it ! or ? term
.1412	f0 28		beq $143c			beq 	_ELIndirect
.1414	c9 98		cmp #$98			cmp 	#TKW_QMARK
.1416	f0 24		beq $143c			beq 	_ELIndirect
.1418	c9 a2		cmp #$a2			cmp 	#TOK_UNARYST 				; must be TOK_UNARYST ... TOK_TOKENS
.141a	90 04		bcc $1420			bcc 	_ELUSyntax
.141c	c9 c1		cmp #$c1			cmp 	#TOK_TOKENS
.141e	90 d5		bcc $13f5			bcc 	_ELExecuteA 				; if so do that token.
.1420					_ELUSyntax:
.1420	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.1422	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1425					_ELMinus:
.1425	20 63 14	jsr $1463			jsr 	EvaluateNumericTerm 		; get a number to negate.
.1428	b5 40		lda $40,x			lda 	esType,x 					; is it integer
.142a	f0 0a		beq $1436			beq 	_ELMinusInteger
.142c	8a		txa				txa
.142d	a2 0e		ldx #$0e		ldx	#14
.142f	20 21 19	jsr $1921		jsr	floatingpointHandler
.1432	aa		tax				tax
.1433	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.1436					_ELMinusInteger:
.1436	20 49 18	jsr $1849			jsr 	MInt32Negate 				; do int negate
.1439	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.143c					_ELIndirect:
.143c	48		pha				pha 								; save what we want (TKW_QMARK TWK_PLING)
.143d	20 6c 14	jsr $146c			jsr 	EvaluateIntegerTerm 		; integer address
.1440	68		pla				pla
.1441	49 97		eor #$97			eor 	#TKW_PLING 					; now $00 if !
.1443	f0 02		beq $1447			beq 	_ELHaveModifier
.1445	a9 20		lda #$20			lda 	#$20 						; now $00 if !, $20 if ?
.1447					_ELHaveModifier:
.1447	09 80		ora #$80			ora 	#$80						; make it the appropriate reference.
.1449	95 40		sta $40,x			sta 	esType,x
.144b	4c cd 13	jmp $13cd			jmp 	_ELHasTerm
.144e					_ELCallTemp0:
.144e	6c 04 00	jmp ($0004)			jmp 	(temp0)
.1451					UnaryParenthesis:
.1451	a9 00		lda #$00			lda 	#0 							; ( is a unary function ....
.1453	20 72 13	jsr $1372			jsr 	EvaluateLevel
.1456	20 f7 18	jsr $18f7			jsr 	CheckRightParen 			; check for )
.1459	60		rts				rts
.145a					EvaluateTerm:
.145a	a9 0f		lda #$0f			lda 	#15
.145c	20 72 13	jsr $1372			jsr 	EvaluateLevel
.145f	20 24 13	jsr $1324			jsr 	DereferenceOne
.1462	60		rts				rts
.1463					EvaluateNumericTerm:
.1463	20 5a 14	jsr $145a			jsr 	EvaluateTerm
.1466	b5 40		lda $40,x			lda 	esType,x
.1468	0a		asl a				asl 	a 							; see if it's a string.
.1469	30 09		bmi $1474			bmi 	ENTType
.146b	60		rts				rts
.146c					EvaluateIntegerTerm:
.146c	20 5a 14	jsr $145a			jsr 	EvaluateTerm
.146f	b5 40		lda $40,x			lda 	esType,x
.1471	d0 01		bne $1474			bne 	ENTType
.1473	60		rts				rts
.1474					ENTType:
.1474	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1476	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1479					EvaluateRoot:
.1479	a2 00		ldx #$00			ldx 	#0
.147b					Evaluate:
.147b	a9 00		lda #$00			lda 	#0
.147d	20 72 13	jsr $1372			jsr 	EvaluateLevel
.1480	20 24 13	jsr $1324			jsr 	DereferenceOne
.1483	60		rts				rts
.1484					EvaluateNumeric:
.1484	20 7b 14	jsr $147b			jsr 	Evaluate
.1487	b5 40		lda $40,x			lda 	esType,x
.1489	0a		asl a				asl 	a 							; see if it's a string.
.148a	30 e8		bmi $1474			bmi 	ENTType
.148c	4a		lsr a				lsr 	a 							; shift float flag into carry.
.148d	4a		lsr a				lsr 	a
.148e	60		rts				rts
.148f					EvaluateString:
.148f	20 7b 14	jsr $147b			jsr 	Evaluate
.1492	b5 40		lda $40,x			lda 	esType,x
.1494	0a		asl a				asl 	a 							; see if it's a string.
.1495	10 dd		bpl $1474			bpl 	ENTType
.1497	60		rts				rts
.1498					EvaluateInteger:
.1498	20 7b 14	jsr $147b			jsr 	Evaluate
.149b	b5 40		lda $40,x			lda 	esType,x
.149d	d0 d5		bne $1474			bne 	ENTType
.149f	60		rts				rts
.14a0					EvaluateSmallInteger:
.14a0	20 98 14	jsr $1498			jsr 	EvaluateInteger
.14a3	b5 41		lda $41,x			lda 	esType+1,x
.14a5	15 42		ora $42,x			ora 	esType+2,x
.14a7	15 43		ora $43,x			ora 	esType+3,x
.14a9	d0 03		bne $14ae			bne 	_ESIValue
.14ab	b5 40		lda $40,x			lda 	esType,x
.14ad	60		rts				rts
.14ae					_ESIValue:
.14ae	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.14b0	20 1a 19	jsr $191a			jsr 	ErrorHandler
.14b3					ELShiftByteIn:
.14b3	48		pha				pha 								; save bits to shift in.
.14b4	b5 60		lda $60,x			lda 	esInt3,x 					; save top most byte
.14b6	48		pha				pha
.14b7	b5 58		lda $58,x			lda 	esInt2,x 					; shift everything left 8 bits
.14b9	95 60		sta $60,x			sta 	esInt3,x
.14bb	b5 50		lda $50,x			lda 	esInt1,x
.14bd	95 58		sta $58,x			sta 	esInt2,x
.14bf	b5 48		lda $48,x			lda 	esInt0,x
.14c1	95 50		sta $50,x			sta 	esInt1,x
.14c3	a9 00		lda #$00			lda 	#0
.14c5	95 48		sta $48,x			sta 	esInt0,x
.14c7	68		pla				pla 								; now A:TOS is a 5 byte register, shift right twice.
.14c8	29 03		and #$03			and 	#3 							; only want lower 2 bits
.14ca	09 04		ora #$04			ora 	#4  						; set bit 2 - when 1 we are done
.14cc					_ELShiftLoop:
.14cc	4a		lsr a				lsr 	a
.14cd	76 60		ror $60,x			ror 	esInt3,x
.14cf	76 58		ror $58,x			ror 	esInt2,x
.14d1	76 50		ror $50,x			ror 	esInt1,x
.14d3	76 48		ror $48,x			ror 	esInt0,x
.14d5	c9 01		cmp #$01			cmp 	#1
.14d7	d0 f3		bne $14cc			bne 	_ELShiftLoop
.14d9	68		pla				pla 								; get original 6 bit value and OR in.
.14da	29 3f		and #$3f			and 	#$3F
.14dc	15 48		ora $48,x			ora 	esInt0,x
.14de	95 48		sta $48,x			sta 	esInt0,x
.14e0	60		rts				rts
.14e1					ELBinaryOperatorInfo:

;******  Processing file: ..\source\main/evaluate/../../generated/binarystructinfo.inc

>14e1	01					.byte	$01			; $86 and
>14e2	01					.byte	$01			; $87 or
>14e3	01					.byte	$01			; $88 xor
>14e4	02					.byte	$02			; $89 >=
>14e5	02					.byte	$02			; $8a <=
>14e6	02					.byte	$02			; $8b >
>14e7	02					.byte	$02			; $8c <
>14e8	02					.byte	$02			; $8d =
>14e9	02					.byte	$02			; $8e <>
>14ea	03					.byte	$03			; $8f +
>14eb	03					.byte	$03			; $90 -
>14ec	04					.byte	$04			; $91 >>
>14ed	04					.byte	$04			; $92 <<
>14ee	04					.byte	$04			; $93 *
>14ef	04					.byte	$04			; $94 /
>14f0	04					.byte	$04			; $95 mod
>14f1	05					.byte	$05			; $96 ^
>14f2	06					.byte	$06			; $97 !
>14f3	06					.byte	$06			; $98 ?
>14f4	82					.byte	$82			; $99 repeat
>14f5	82					.byte	$82			; $9a while
>14f6	82					.byte	$82			; $9b for
>14f7	82					.byte	$82			; $9c if
>14f8	80					.byte	$80			; $9d until
>14f9	80					.byte	$80			; $9e wend
>14fa	80					.byte	$80			; $9f next
>14fb	80					.byte	$80			; $a0 then
>14fc	80					.byte	$80			; $a1 endif

;******  Return to file: ..\source\main/evaluate/evaluate.asm


;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/evaluate/unary.asm

.14fd					UnaryLen:
.14fd	20 0b 15	jsr $150b			jsr 	ULStart
.1500					ULFinish:
.1500	b1 04		lda ($04),y			lda 	(temp0),y
.1502	a4 0a		ldy $0a				ldy 	tempShort
.1504	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.1507	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.150a	60		rts				rts
.150b	20 8f 14	jsr $148f	ULStart:jsr 	EvaluateString
.150e	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1510	85 04		sta $04				sta 	temp0
.1512	b5 50		lda $50,x			lda 	esInt1,x
.1514	85 05		sta $05				sta 	temp0+1
.1516	84 0a		sty $0a				sty 	tempShort 					; get length
.1518	a0 00		ldy #$00			ldy 	#0
.151a	60		rts				rts
.151b					UnaryAsc:
.151b	20 0b 15	jsr $150b			jsr 	ULStart 					; same as LEN() get string, save Y, point to length.
.151e	b1 04		lda ($04),y			lda 	(temp0),y
.1520	c8		iny				iny 		 						; point to first character, we can do LEN code after that
.1521	c9 00		cmp #$00			cmp 	#0
.1523	d0 db		bne $1500			bne 	ULFinish
.1525	a2 07		ldx #$07			ldx 	#ErrorID_BadValue
.1527	20 1a 19	jsr $191a			jsr 	ErrorHandler
.152a					UnaryAbs:
.152a	20 84 14	jsr $1484			jsr 	EvaluateNumeric
.152d	b0 07		bcs $1536			bcs 	_UAFloat
.152f	20 44 18	jsr $1844			jsr 	MInt32Absolute
.1532	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.1535	60		rts				rts
.1536					_UAFloat:
.1536	8a		txa				txa
.1537	a2 02		ldx #$02		ldx	#2
.1539	20 21 19	jsr $1921		jsr	floatingpointHandler
.153c	aa		tax				tax
.153d	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.1540	60		rts				rts
.1541					UnarySgn:
.1541	20 84 14	jsr $1484			jsr 	EvaluateNumeric
.1544	b0 07		bcs $154d			bcs 	_USFloat
.1546	20 7c 18	jsr $187c			jsr 	MInt32Sign
.1549	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.154c	60		rts				rts
.154d					_USFloat:
.154d	8a		txa				txa
.154e	a2 10		ldx #$10		ldx	#16
.1550	20 21 19	jsr $1921		jsr	floatingpointHandler
.1553	aa		tax				tax
.1554	20 f7 18	jsr $18f7			jsr 	CheckRightParen
.1557	60		rts				rts
.1558					UnaryPeek:
.1558	20 84 15	jsr $1584			jsr 	PDLCode
.155b	4c 78 15	jmp $1578			jmp 	PDLByte0
.155e					UnaryDeek:
.155e	20 84 15	jsr $1584			jsr 	PDLCode
.1561	4c 72 15	jmp $1572			jmp 	PDLByte1
.1564					UnaryLeek:
.1564	20 84 15	jsr $1584			jsr 	PDLCode
.1567	a0 03		ldy #$03			ldy 	#3
.1569	b1 04		lda ($04),y			lda 	(temp0),y
.156b	95 60		sta $60,x			sta 	esInt3,x
.156d	88		dey				dey
.156e	b1 04		lda ($04),y			lda 	(temp0),y
.1570	95 58		sta $58,x			sta 	esInt2,x
.1572					PDLByte1:
.1572	a0 01		ldy #$01			ldy 	#1
.1574	b1 04		lda ($04),y			lda 	(temp0),y
.1576	95 50		sta $50,x			sta 	esInt1,x
.1578					PDLByte0:
.1578	a0 00		ldy #$00			ldy 	#0
.157a	b1 04		lda ($04),y			lda 	(temp0),y
.157c	95 48		sta $48,x			sta 	esInt0,x
.157e	a4 0a		ldy $0a				ldy 	tempShort 					; restore Y
.1580	20 f7 18	jsr $18f7			jsr 	CheckRightParen 			; check right and return
.1583	60		rts				rts
.1584					PDLCode:
.1584	20 98 14	jsr $1498			jsr 	EvaluateInteger
.1587	b5 48		lda $48,x			lda 	esInt0,x 					; copy address of string to temp0
.1589	85 04		sta $04				sta 	temp0
.158b	b5 50		lda $50,x			lda 	esInt1,x
.158d	85 05		sta $05				sta 	temp0+1
.158f	a9 00		lda #$00			lda 	#0 							; zero upper 3 bytes of result, type okay.
.1591	95 50		sta $50,x			sta 	esInt1,x
.1593	95 58		sta $58,x			sta 	esInt2,x
.1595	95 60		sta $60,x			sta 	esInt3,x
.1597	84 0a		sty $0a				sty 	tempShort 					; save Y
.1599	60		rts				rts
.159a					Unary_Random:
.159a	20 bf 18	jsr $18bf			jsr 	MInt32Random 				; generate random number.
.159d	b1 02		lda ($02),y			lda 	(codePtr),y 				; check followed by )
.159f	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.15a1	f0 08		beq $15ab			beq 	_URExit
.15a3	e8		inx				inx 								; load range 0..r-1 into +1
.15a4	20 98 14	jsr $1498			jsr 	EvaluateInteger
.15a7	ca		dex				dex
.15a8	20 0d 17	jsr $170d			jsr 	MInt32Modulus 				; calculate random % modulus
.15ab					_URExit:
.15ab	20 f7 18	jsr $18f7			jsr 	CheckRightParen 			; check right and return
.15ae	60		rts				rts
.15af					Unary_Min:
.15af	a9 01		lda #$01			lda 	#1 							; c1 cmp c2 needs to be > e.g. c1 > c2
.15b1	d0 02		bne $15b5			bne 	UnaryMBody
.15b3					Unary_Max:
.15b3	a9 ff		lda #$ff			lda 	#$FF 						; c1 cmp c2 needs to be < e.g. c1 < c2
.15b5					UnaryMBody:
.15b5	48		pha				pha 								; save comparator on stack.
.15b6	20 7b 14	jsr $147b			jsr 	Evaluate 					; get the first thing to check
.15b9					_UnaryMLoop:
.15b9	b1 02		lda ($02),y			lda 	(codePtr),y 				; found ), indicates end.
.15bb	c8		iny				iny
.15bc	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.15be	f0 09		beq $15c9			beq 	_UnaryMExit
.15c0	c9 c3		cmp #$c3			cmp 	#TKW_COMMA 					; found , indicates more.
.15c2	f0 07		beq $15cb			beq 	_UnaryMCompare
.15c4	a2 01		ldx #$01			ldx 	#ErrorID_Syntax
.15c6	20 1a 19	jsr $191a			jsr 	ErrorHandler
.15c9					_UnaryMExit:
.15c9	68		pla				pla 								; throw comparator and return.
.15ca	60		rts				rts
.15cb					_UnaryMCompare:
.15cb	e8		inx				inx 								; get the 2nd thing to evaluate
.15cc	20 7b 14	jsr $147b			jsr 	Evaluate
.15cf	ca		dex				dex
.15d0	20 b0 12	jsr $12b0			jsr 	PerformComparison 			; this is part of evaluate/compare.asm
.15d3	85 0a		sta $0a				sta 	tempShort 					; save result
.15d5	68		pla				pla 								; get what we need
.15d6	48		pha				pha
.15d7	c5 0a		cmp $0a				cmp 	tempShort 					; did we get it
.15d9	d0 de		bne $15b9			bne 	_UnaryMLoop 				; no, try another value.
.15db	20 8f 18	jsr $188f			jsr 	MInt32False 				; promote 2nd to 1st.
.15de	20 81 17	jsr $1781			jsr 	MInt32Add
.15e1	4c b9 15	jmp $15b9			jmp 	_UnaryMLoop
.15e4					Unary_Page:
.15e4	20 8f 18	jsr $188f			jsr 	MInt32False 				; zero
.15e7	ad 68 08	lda $0868			lda 	basePage 					; copy base page address in.
.15ea	95 48		sta $48,x			sta 	esInt0,x
.15ec	ad 69 08	lda $0869			lda 	basePage+1
.15ef	95 50		sta $50,x			sta 	esInt1,x
.15f1	60		rts				rts
.15f2					UnaryReference:
.15f2	a9 0f		lda #$0f			lda 	#15
.15f4	20 72 13	jsr $1372			jsr 	EvaluateLevel 				; evaluate term and don't deference.
.15f7	b5 40		lda $40,x			lda 	esType,x 					; check it's a reference.
.15f9	10 05		bpl $1600			bpl 	UType
.15fb	a9 00		lda #$00			lda 	#0 							; make it an integer
.15fd	95 40		sta $40,x			sta 	esType,x
.15ff	60		rts				rts
.1600					UType:
.1600	a2 06		ldx #$06			ldx 	#ErrorID_BadType
.1602	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1605					UnaryHexMarker:
.1605	4c 6c 14	jmp $146c			jmp 	EvaluateIntegerTerm
.1608					UnaryComplement:
.1608	20 6c 14	jsr $146c			jsr 	EvaluateIntegerTerm
.160b	20 63 18	jsr $1863			jsr 	MInt32Not
.160e	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32binary.asm

.160f					MInt32And:
.160f	b5 48		lda $48,x			lda 	esInt0,x
.1611	35 49		and $49,x			and 	esInt0+1,x
.1613	95 48		sta $48,x			sta 	esInt0,x
.1615	b5 50		lda $50,x			lda 	esInt1,x
.1617	35 51		and $51,x			and 	esInt1+1,x
.1619	95 50		sta $50,x			sta 	esInt1,x
.161b	b5 58		lda $58,x			lda 	esInt2,x
.161d	35 59		and $59,x			and 	esInt2+1,x
.161f	95 58		sta $58,x			sta 	esInt2,x
.1621	b5 60		lda $60,x			lda 	esInt3,x
.1623	35 61		and $61,x			and 	esInt3+1,x
.1625	95 60		sta $60,x			sta 	esInt3,x
.1627	60		rts				rts
.1628					MInt32Or:
.1628	b5 48		lda $48,x			lda 	esInt0,x
.162a	15 49		ora $49,x			ora 	esInt0+1,x
.162c	95 48		sta $48,x			sta 	esInt0,x
.162e	b5 50		lda $50,x			lda 	esInt1,x
.1630	15 51		ora $51,x			ora 	esInt1+1,x
.1632	95 50		sta $50,x			sta 	esInt1,x
.1634	b5 58		lda $58,x			lda 	esInt2,x
.1636	15 59		ora $59,x			ora 	esInt2+1,x
.1638	95 58		sta $58,x			sta 	esInt2,x
.163a	b5 60		lda $60,x			lda 	esInt3,x
.163c	15 61		ora $61,x			ora 	esInt3+1,x
.163e	95 60		sta $60,x			sta 	esInt3,x
.1640	60		rts				rts
.1641					MInt32Xor:
.1641	b5 48		lda $48,x			lda 	esInt0,x
.1643	55 49		eor $49,x			eor 	esInt0+1,x
.1645	95 48		sta $48,x			sta 	esInt0,x
.1647	b5 50		lda $50,x			lda 	esInt1,x
.1649	55 51		eor $51,x			eor 	esInt1+1,x
.164b	95 50		sta $50,x			sta 	esInt1,x
.164d	b5 58		lda $58,x			lda 	esInt2,x
.164f	55 59		eor $59,x			eor 	esInt2+1,x
.1651	95 58		sta $58,x			sta 	esInt2,x
.1653	b5 60		lda $60,x			lda 	esInt3,x
.1655	55 61		eor $61,x			eor 	esInt3+1,x
.1657	95 60		sta $60,x			sta 	esInt3,x
.1659	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32compare.asm

.165a					MInt32Compare:
.165a	b5 48		lda $48,x			lda 	esInt0,x 					; equality check.
.165c	d5 49		cmp $49,x			cmp 	esInt0+1,x
.165e	d0 13		bne $1673			bne 	MInt32Compare2
.1660	b5 50		lda $50,x			lda 	esInt1,x
.1662	d5 51		cmp $51,x			cmp 	esInt1+1,x
.1664	d0 0d		bne $1673			bne 	MInt32Compare2
.1666	b5 58		lda $58,x			lda 	esInt2,x
.1668	d5 59		cmp $59,x			cmp 	esInt2+1,x
.166a	d0 07		bne $1673			bne 	MInt32Compare2
.166c	b5 60		lda $60,x			lda 	esInt3,x
.166e	55 61		eor $61,x			eor 	esInt3+1,x 					; will return 0 if the same.
.1670	d0 01		bne $1673			bne 	MInt32Compare2
.1672	60		rts				rts
.1673					MInt32Compare2:
.1673	b5 48		lda $48,x			lda		esInt0,x 					; unsigned 32 bit comparison.
.1675	d5 49		cmp $49,x			cmp 	esInt0+1,x
.1677	b5 50		lda $50,x			lda		esInt1,x
.1679	f5 51		sbc $51,x			sbc 	esInt1+1,x
.167b	b5 58		lda $58,x			lda		esInt2,x
.167d	f5 59		sbc $59,x			sbc 	esInt2+1,x
.167f	b5 60		lda $60,x			lda		esInt3,x
.1681	f5 61		sbc $61,x			sbc 	esInt3+1,x
.1683	50 02		bvc $1687			bvc 	_I32LNoOverflow 			; make it signed 32 bi comparison
.1685	49 80		eor #$80			eor 	#$80
.1687					_I32LNoOverflow
.1687	30 03		bmi $168c			bmi 	MInt32CLess					; if -ve then return $FF
.1689	a9 01		lda #$01			lda 	#$01						; else return $01
.168b	60		rts				rts
.168c					MInt32CLess:
.168c	a9 ff		lda #$ff			lda 	#$FF
.168e	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32divide.asm

.168f					MInt32SDivide:
.168f	98		tya				tya  								; save Y, which is the count of negations
.1690	48		pha				pha
.1691	a0 00		ldy #$00			ldy 	#0 							; zero count
.1693	20 ab 16	jsr $16ab			jsr 	_MInt32SRemSign 			; unsign TOS
.1696	e8		inx				inx 								; unsign TOS+1
.1697	20 ab 16	jsr $16ab			jsr 	_MInt32SRemSign
.169a	ca		dex				dex
.169b	98		tya				tya 								; save sign count on stack
.169c	48		pha				pha
.169d	20 b4 16	jsr $16b4			jsr 	MInt32UDivide 				; unsigned division
.16a0	68		pla				pla 								; get sign count back
.16a1	29 01		and #$01			and 	#1 							; if it is odd, then negate result
.16a3	f0 03		beq $16a8			beq 	_I32SNoNeg
.16a5	20 49 18	jsr $1849			jsr 	MInt32Negate
.16a8					_I32SNoNeg:
.16a8	68		pla				pla 								; restoe Y and exit
.16a9	a8		tay				tay
.16aa	60		rts				rts
.16ab					_MInt32SRemSign:
.16ab	b5 60		lda $60,x			lda 	esInt3,x 					; is it -ve
.16ad	10 04		bpl $16b3			bpl 	_MInt32SRSExit
.16af	c8		iny				iny 								; increment the sign count
.16b0	20 49 18	jsr $1849			jsr 	MInt32Negate 				; negate the value.
.16b3					_MInt32SRSExit:
.16b3	60		rts				rts
.16b4					MInt32UDivide:
.16b4	b5 49		lda $49,x			lda 	esInt0+1,x 					; check for division by zero
.16b6	15 51		ora $51,x			ora 	esInt1+1,x
.16b8	15 52		ora $52,x			ora 	esInt1+2,x
.16ba	15 53		ora $53,x			ora 	esInt1+3,x
.16bc	f0 4a		beq $1708			beq 	_MInt32DZero
.16be	e8		inx				inx 								; clear A
.16bf	e8		inx				inx
.16c0	20 8f 18	jsr $188f			jsr 	MInt32False
.16c3	ca		dex				dex
.16c4	ca		dex				dex
.16c5	98		tya				tya 								; save Y on the stack
.16c6	48		pha				pha
.16c7	a0 20		ldy #$20			ldy 	#32 						; number of division passes
.16c9					_MInt32UDLoop:
.16c9	16 48		asl $48,x			asl 	esInt0,x					; shift QA left. First Q
.16cb	36 50		rol $50,x			rol 	esInt1,x
.16cd	36 58		rol $58,x			rol 	esInt2,x
.16cf	36 60		rol $60,x			rol 	esInt3,x
.16d1	36 4a		rol $4a,x			rol 	esInt0+2,x 					; then A.
.16d3	36 52		rol $52,x			rol 	esInt1+2,x
.16d5	36 5a		rol $5a,x			rol 	esInt2+2,x
.16d7	36 62		rol $62,x			rol 	esInt3+2,x
.16d9	38		sec				sec 								; calculate A-M saving result on the stack
.16da	b5 4a		lda $4a,x			lda 	esInt0+2,x
.16dc	f5 49		sbc $49,x			sbc 	esInt0+1,x
.16de	48		pha				pha
.16df	b5 52		lda $52,x			lda 	esInt1+2,x
.16e1	f5 51		sbc $51,x			sbc 	esInt1+1,x
.16e3	48		pha				pha
.16e4	b5 5a		lda $5a,x			lda 	esInt2+2,x
.16e6	f5 59		sbc $59,x			sbc 	esInt2+1,x
.16e8	48		pha				pha
.16e9	b5 62		lda $62,x			lda 	esInt3+2,x
.16eb	f5 61		sbc $61,x			sbc 	esInt3+1,x
.16ed	90 10		bcc $16ff			bcc		_MInt32NoSubtract 			; if A < M (e.g. carry clear) then reject this.
.16ef	95 62		sta $62,x			sta 	esInt3+2,x 					; write result back to A
.16f1	68		pla				pla
.16f2	95 5a		sta $5a,x			sta 	esInt2+2,x
.16f4	68		pla				pla
.16f5	95 52		sta $52,x			sta 	esInt1+2,x
.16f7	68		pla				pla
.16f8	95 4a		sta $4a,x			sta 	esInt0+2,x
.16fa	f6 48		inc $48,x			inc 	esInt0,x 					; sets bit 0 of Q - it was shifted left previously.
.16fc	4c 02 17	jmp $1702			jmp 	_MInt32Next 					; do the next iteration
.16ff					_MInt32NoSubtract:
.16ff	68		pla				pla
.1700	68		pla				pla
.1701	68		pla				pla
.1702					_MInt32Next:
.1702	88		dey				dey 								; do this 32 times.
.1703	d0 c4		bne $16c9			bne 	_MInt32UDLoop
.1705	68		pla				pla 								; restore Y and exit
.1706	a8		tay				tay
.1707	60		rts				rts
.1708					_MInt32DZero:
.1708	a2 04		ldx #$04			ldx 	#ErrorID_DivZero
.170a	20 1a 19	jsr $191a			jsr 	ErrorHandler
.170d					MInt32Modulus:
.170d	20 b4 16	jsr $16b4			jsr 	MInt32UDivide 				; do the division.
.1710	b5 62		lda $62,x			lda 	esInt3+2,x 					; copy 2nd on stack (the remainder) to the top.
.1712	95 60		sta $60,x			sta 	esInt3,x
.1714	b5 5a		lda $5a,x			lda 	esInt2+2,x
.1716	95 58		sta $58,x			sta 	esInt2,x
.1718	b5 52		lda $52,x			lda 	esInt1+2,x
.171a	95 50		sta $50,x			sta 	esInt1,x
.171c	b5 4a		lda $4a,x			lda 	esInt0+2,x
.171e	95 48		sta $48,x			sta 	esInt0,x
.1720	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32fromstr.asm

.1721					MInt32FromString:
.1721	85 0a		sta $0a				sta 	tempShort 					; save base
.1723	98		tya				tya
.1724	48		pha				pha
.1725	a0 00		ldy #$00			ldy 	#0 							; set index into string being read
.1727	b1 04		lda ($04),y			lda 	(temp0),y 					; look at first character
.1729	c9 2d		cmp #$2d			cmp 	#"-"						; is it a - character
.172b	d0 01		bne $172e			bne 	_I32FSNotNegative
.172d	c8		iny				iny 								; if so consume it.
.172e					_I32FSNotNegative:
.172e	a5 0a		lda $0a				lda 	tempShort 					; get the base back.
.1730	c0 00		cpy #$00			cpy 	#0 							; if we read a -ve (e.g. Y != 0)
.1732	f0 02		beq $1736			beq 	_I32FSNN2
.1734	09 80		ora #$80			ora 	#$80						; set bit 7, this indicates a negated result.
.1736					_I32FSNN2:
.1736	48		pha				pha 								; save base + final sign on stack.
.1737	20 8f 18	jsr $188f			jsr 	MInt32False 					; zero the return value.
.173a					I32FSMainLoop:
.173a	68		pla				pla 								; get the base back into tempshort
.173b	48		pha				pha
.173c	29 7f		and #$7f			and 	#$7F
.173e	85 0a		sta $0a				sta 	tempShort
.1740	b1 04		lda ($04),y			lda 	(temp0),y 					; look at next character.
.1742	c9 61		cmp #$61			cmp 	#"a" 						; fix up case.
.1744	90 02		bcc $1748			bcc 	_I32FSNotLC
.1746	e9 20		sbc #$20			sbc 	#32
.1748					_I32FSNotLC:
.1748	38		sec				sec 								; subtract 48 (ASCII "0")
.1749	e9 30		sbc #$30			sbc 	#"0"
.174b	90 26		bcc $1773			bcc 	_I32FSDone 					; nothing more to do.
.174d	c9 0a		cmp #$0a			cmp 	#9+1 						; if it is 0-9 validate vs base.
.174f	90 06		bcc $1757			bcc 	_I32FSValidate
.1751	c9 11		cmp #$11			cmp 	#17 						; is it between 58 and 64 ? if so bad.
.1753	90 1e		bcc $1773			bcc 	_I32FSDone
.1755	e9 07		sbc #$07			sbc 	#7 							; adjust into range so now character is 0->nnn
.1757					_I32FSValidate:
.1757	c5 0a		cmp $0a				cmp 	tempShort 					; compare against the base.
.1759	b0 18		bcs $1773			bcs 	_I32FSDone 					; sorry, too large for this base.
.175b	48		pha				pha 								; save the new digit value.
.175c	e8		inx				inx 								; put base into next slot.
.175d	a5 0a		lda $0a				lda 	tempShort
.175f	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.1762	ca		dex				dex
.1763	20 b5 17	jsr $17b5			jsr 	MInt32Multiply 				; multiply current by the base
.1766	e8		inx				inx
.1767	68		pla				pla  								; put additive into next slot
.1768	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.176b	ca		dex				dex
.176c	20 81 17	jsr $1781			jsr 	MInt32Add 					; and add it
.176f	c8		iny				iny 								; look at next character
.1770	4c 3a 17	jmp $173a			jmp 	I32FSMainLoop 				; and go round again.
.1773					_I32FSDone:
.1773	68		pla				pla 								; get base/final sign back
.1774	10 04		bpl $177a			bpl 	_I32FSNN3
.1776	88		dey				dey 								; one fewer character to allow for the - prefix.
.1777	20 49 18	jsr $1849			jsr 	MInt32Negate 				; negate the result.
.177a					_I32FSNN3:
.177a	84 0a		sty $0a				sty 	tempShort 					; save the count of characters read
.177c	68		pla				pla
.177d	a8		tay				tay
.177e	a5 0a		lda $0a				lda 	tempShort 					; get the count of characters read into A and exit
.1780	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32math.asm

.1781					MInt32Add:
.1781	18		clc				clc
.1782	b5 48		lda $48,x			lda 	esInt0,x
.1784	75 49		adc $49,x			adc 	esInt0+1,x
.1786	95 48		sta $48,x			sta 	esInt0,x
.1788	b5 50		lda $50,x			lda 	esInt1,x
.178a	75 51		adc $51,x			adc 	esInt1+1,x
.178c	95 50		sta $50,x			sta 	esInt1,x
.178e	b5 58		lda $58,x			lda 	esInt2,x
.1790	75 59		adc $59,x			adc 	esInt2+1,x
.1792	95 58		sta $58,x			sta 	esInt2,x
.1794	b5 60		lda $60,x			lda 	esInt3,x
.1796	75 61		adc $61,x			adc 	esInt3+1,x
.1798	95 60		sta $60,x			sta 	esInt3,x
.179a	60		rts				rts
.179b					MInt32Sub:
.179b	38		sec				sec
.179c	b5 48		lda $48,x			lda 	esInt0,x
.179e	f5 49		sbc $49,x			sbc 	esInt0+1,x
.17a0	95 48		sta $48,x			sta 	esInt0,x
.17a2	b5 50		lda $50,x			lda 	esInt1,x
.17a4	f5 51		sbc $51,x			sbc 	esInt1+1,x
.17a6	95 50		sta $50,x			sta 	esInt1,x
.17a8	b5 58		lda $58,x			lda 	esInt2,x
.17aa	f5 59		sbc $59,x			sbc 	esInt2+1,x
.17ac	95 58		sta $58,x			sta 	esInt2,x
.17ae	b5 60		lda $60,x			lda 	esInt3,x
.17b0	f5 61		sbc $61,x			sbc 	esInt3+1,x
.17b2	95 60		sta $60,x			sta 	esInt3,x
.17b4	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32multiply.asm

.17b5					MInt32Multiply:
.17b5	e8		inx				inx 								; copy 2nd -> 3rd
.17b6	20 db 17	jsr $17db			jsr 	MInt32CopyUp
.17b9	ca		dex				dex
.17ba	20 db 17	jsr $17db			jsr 	MInt32CopyUp 				; copy 1st -> 2nd
.17bd	20 8f 18	jsr $188f			jsr 	MInt32False 					; zero 1st.
.17c0					_I32Loop:
.17c0	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get low bit of 3rd
.17c2	29 01		and #$01			and 	#1
.17c4	f0 03		beq $17c9			beq 	_I32NoAdd 					; if set
.17c6	20 81 17	jsr $1781			jsr 	MInt32Add 					; add 2nd to 1st.
.17c9					_I32NoAdd:
.17c9	e8		inx				inx 								; shift 2nd left
.17ca	20 a4 18	jsr $18a4			jsr 	MInt32ShiftLeft
.17cd	e8		inx				inx  								; shift 3rd right
.17ce	20 ad 18	jsr $18ad			jsr 	MInt32ShiftRight
.17d1	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; check if zero.
.17d4	08		php				php 								; save status bits
.17d5	ca		dex				dex 	 							; point back to 1st
.17d6	ca		dex				dex
.17d7	28		plp				plp 								; get status bits
.17d8	d0 e6		bne $17c0			bne 	_I32Loop 					; if non-zero keep going.
.17da	60		rts				rts
.17db					MInt32CopyUp:
.17db	b5 48		lda $48,x			lda 	esInt0,x
.17dd	95 49		sta $49,x			sta 	esInt0+1,x
.17df	b5 50		lda $50,x			lda 	esInt1,x
.17e1	95 51		sta $51,x			sta 	esInt1+1,x
.17e3	b5 58		lda $58,x			lda 	esInt2,x
.17e5	95 59		sta $59,x			sta 	esInt2+1,x
.17e7	b5 60		lda $60,x			lda 	esInt3,x
.17e9	95 61		sta $61,x			sta 	esInt3+1,x
.17eb	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32tostr.asm

>086a					MCharCount:	.fill 	1						; count of converted characters
.17ec					MInt32ToString:
.17ec	48		pha				pha 								; save base
.17ed	85 0a		sta $0a				sta 	tempShort 					; save target base.
.17ef	a9 00		lda #$00			lda 	#0
.17f1	8d 6a 08	sta $086a			sta 	MCharCount 					; clear character count.
.17f4	98		tya				tya
.17f5	48		pha				pha
.17f6	a5 0a		lda $0a				lda 	tempShort 					; check if we are signed conversion
.17f8	10 10		bpl $180a			bpl 	_I32TSUnsigned
.17fa	48		pha				pha 								; save base on stack.
.17fb	b5 60		lda $60,x			lda 	esInt3,x 					; is it actually negative
.17fd	10 08		bpl $1807			bpl 	_I32TSNoFlip
.17ff	a9 2d		lda #$2d			lda 	#"-" 						; write a '-' prefix out.
.1801	20 36 18	jsr $1836			jsr 	MI32WriteCharacter
.1804	20 49 18	jsr $1849			jsr 	MInt32Negate 				; negate the value.
.1807					_I32TSNoFlip:
.1807	68		pla				pla 								; get the base back
.1808	29 7f		and #$7f			and 	#$7F 						; clear the sign flag so it's just a base now.
.180a					_I32TSUnsigned:
.180a	20 11 18	jsr $1811			jsr 	MI32DivideWrite 				; recursive code to output string.
.180d	68		pla				pla
.180e	a8		tay				tay
.180f	68		pla				pla
.1810	60		rts				rts
.1811					MI32DivideWrite:
.1811	48		pha				pha 								; save the divisor/base
.1812	e8		inx				inx 								; write in the dividing position.
.1813	20 9e 18	jsr $189e			jsr 	MInt32Set8Bit
.1816	ca		dex				dex
.1817	20 b4 16	jsr $16b4			jsr 	MInt32UDivide 				; divide number by base.
.181a	68		pla				pla 								; get the base into Y
.181b	a8		tay				tay
.181c	b5 4a		lda $4a,x			lda 	esInt0+2,x 					; get the remainder and push on the stack.
.181e	48		pha				pha
.181f	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; is the result zero ?
.1822	f0 04		beq $1828			beq 	_I32NoRecurse 				; if so, don't recurse.
.1824	98		tya				tya 								; put base into A
.1825	20 11 18	jsr $1811			jsr 	MI32DivideWrite 				; and jsr the dividor recursively.
.1828					_I32NoRecurse:
.1828	68		pla				pla 								; get the remainder back
.1829	c9 0a		cmp #$0a			cmp 	#10  						; handle hexadecimals.
.182b	90 02		bcc $182f			bcc 	_I32NotHex
.182d	69 06		adc #$06			adc 	#7-1
.182f					_I32NotHex:
.182f	18		clc				clc 								; make it ASCII
.1830	69 30		adc #$30			adc 	#48
.1832	20 36 18	jsr $1836			jsr 	MI32WriteCharacter 			; write the character out
.1835	60		rts				rts 								; and exit.
.1836					MI32WriteCharacter:
.1836	ac 6a 08	ldy $086a			ldy 	MCharCount 					; get position
.1839	91 04		sta ($04),y			sta 	(temp0),y 					; write out with trailing 0
.183b	c8		iny				iny
.183c	a9 00		lda #$00			lda 	#0
.183e	91 04		sta ($04),y			sta 	(temp0),y
.1840	ee 6a 08	inc $086a			inc 	MCharCount 					; bump count
.1843	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/imath/int32unary.asm

>086b					MSeed32:	.fill 	4							; random number seed.
.1844					MInt32Absolute:
.1844	b5 60		lda $60,x			lda 	esInt3,x 					; use negate code if -ve.
.1846	30 01		bmi $1849			bmi 	MInt32Negate
.1848	60		rts				rts
.1849					MInt32Negate:
.1849	38		sec				sec
.184a	a9 00		lda #$00			lda 	#0
.184c	f5 48		sbc $48,x			sbc 	esInt0,x
.184e	95 48		sta $48,x			sta 	esInt0,x
.1850	a9 00		lda #$00			lda 	#0
.1852	f5 50		sbc $50,x			sbc 	esInt1,x
.1854	95 50		sta $50,x			sta 	esInt1,x
.1856	a9 00		lda #$00			lda 	#0
.1858	f5 58		sbc $58,x			sbc 	esInt2,x
.185a	95 58		sta $58,x			sta 	esInt2,x
.185c	a9 00		lda #$00			lda 	#0
.185e	f5 60		sbc $60,x			sbc 	esInt3,x
.1860	95 60		sta $60,x			sta 	esInt3,x
.1862	60		rts				rts
.1863					MInt32Not:
.1863	b5 48		lda $48,x			lda 	esInt0,x
.1865	49 ff		eor #$ff			eor 	#$FF
.1867	95 48		sta $48,x			sta 	esInt0,x
.1869	b5 50		lda $50,x			lda 	esInt1,x
.186b	49 ff		eor #$ff			eor 	#$FF
.186d	95 50		sta $50,x			sta 	esInt1,x
.186f	b5 58		lda $58,x			lda 	esInt2,x
.1871	49 ff		eor #$ff			eor 	#$FF
.1873	95 58		sta $58,x			sta 	esInt2,x
.1875	b5 60		lda $60,x			lda 	esInt3,x
.1877	49 ff		eor #$ff			eor 	#$FF
.1879	95 60		sta $60,x			sta 	esInt3,x
.187b	60		rts				rts
.187c					MInt32Sign:
.187c	b5 60		lda $60,x			lda 	esInt3,x					; look at MSB
.187e	30 0b		bmi $188b			bmi 	MInt32True 					; if set return -1 (true)
.1880	20 b6 18	jsr $18b6			jsr 	MInt32Zero 					; is it zero ?
.1883	f0 0a		beq $188f			beq 	MInt32False 					; if zero return 0 (false)
.1885	20 8f 18	jsr $188f			jsr 	MInt32False 					; > 0 return 1
.1888	f6 48		inc $48,x			inc 	esInt0,x
.188a	60		rts				rts
.188b					MInt32True:
.188b	a9 ff		lda #$ff			lda 	#$FF 						; set to $FFFFFFFF
.188d	d0 02		bne $1891			bne 	MInt32WriteAll
.188f					MInt32False:
.188f	a9 00		lda #$00			lda 	#0
.1891					MInt32WriteAll:
.1891	95 48		sta $48,x			sta 	esInt0,x
.1893					MInt32Write123:
.1893	95 50		sta $50,x			sta 	esInt1,x
.1895	95 58		sta $58,x			sta 	esInt2,x
.1897	95 60		sta $60,x			sta 	esInt3,x
.1899	a9 00		lda #$00			lda 	#$00						; and make it an integer
.189b	95 40		sta $40,x			sta 	esType,x
.189d	60		rts				rts
.189e					MInt32Set8Bit:
.189e	95 48		sta $48,x			sta 	esInt0,x
.18a0	a9 00		lda #$00			lda 	#0
.18a2	f0 ef		beq $1893			beq		MInt32Write123
.18a4					MInt32ShiftLeft:
.18a4	16 48		asl $48,x			asl 	esInt0,x
.18a6	36 50		rol $50,x			rol	 	esInt1,x
.18a8	36 58		rol $58,x			rol	 	esInt2,x
.18aa	36 60		rol $60,x			rol	 	esInt3,x
.18ac	60		rts				rts
.18ad					MInt32ShiftRight:
.18ad	56 60		lsr $60,x			lsr 	esInt3,x
.18af	76 58		ror $58,x			ror 	esInt2,x
.18b1	76 50		ror $50,x			ror 	esInt1,x
.18b3	76 48		ror $48,x			ror 	esInt0,x
.18b5	60		rts				rts
.18b6					MInt32Zero:
.18b6	b5 48		lda $48,x			lda 	esInt0,x
.18b8	15 50		ora $50,x			ora 	esInt1,x
.18ba	15 58		ora $58,x			ora 	esInt2,x
.18bc	15 60		ora $60,x			ora 	esInt3,x
.18be	60		rts				rts
.18bf					MInt32Random:
.18bf	98		tya				tya
.18c0	48		pha				pha
.18c1	a0 07		ldy #$07			ldy 	#7
.18c3	ad 6b 08	lda $086b			lda 	MSeed32+0
.18c6	d0 03		bne $18cb			bne 	_Random1
.18c8	a8		tay				tay
.18c9	a9 aa		lda #$aa			lda		#$AA
.18cb					_Random1:
.18cb	0a		asl a				asl 	a
.18cc	2e 6c 08	rol $086c			rol 	MSeed32+1
.18cf	2e 6d 08	rol $086d			rol 	MSeed32+2
.18d2	2e 6e 08	rol $086e			rol 	MSeed32+3
.18d5	90 02		bcc $18d9			bcc 	_Random2
.18d7	49 c5		eor #$c5			eor 	#$C5
.18d9					_Random2:
.18d9	88		dey				dey
.18da	d0 ef		bne $18cb			bne 	_Random1
.18dc	8d 6b 08	sta $086b			sta 	MSeed32+0
.18df	95 48		sta $48,x			sta 	esInt0,x
.18e1	ad 6c 08	lda $086c			lda 	MSeed32+1
.18e4	95 50		sta $50,x			sta 	esInt1,x
.18e6	ad 6d 08	lda $086d			lda 	MSeed32+2
.18e9	95 58		sta $58,x			sta 	esInt2,x
.18eb	ad 6e 08	lda $086e			lda 	MSeed32+3
.18ee	95 60		sta $60,x			sta 	esInt3,x
.18f0	68		pla				pla
.18f1	a8		tay				tay
.18f2	a9 00		lda #$00			lda 	#0
.18f4	95 40		sta $40,x			sta 	esType,x
.18f6	60		rts				rts

;******  Return to file: ..\source\main/main.asm


;******  Processing file: ..\source\main/utility/check.asm

.18f7					CheckRightParen:
.18f7	b1 02		lda ($02),y			lda 	(codePtr),y
.18f9	c8		iny				iny
.18fa	c9 c1		cmp #$c1			cmp 	#TKW_RPAREN
.18fc	d0 01		bne $18ff			bne 	_CRPError
.18fe	60		rts				rts
.18ff					_CRPError:
.18ff	a2 08		ldx #$08			ldx 	#ErrorID_MissingRP
.1901	20 1a 19	jsr $191a			jsr 	ErrorHandler
.1904					CheckComma:
.1904	b1 02		lda ($02),y			lda 	(codePtr),y
.1906	c8		iny				iny
.1907	c9 c3		cmp #$c3			cmp 	#TKW_COMMA
.1909	d0 01		bne $190c			bne 	_CCError
.190b	60		rts				rts
.190c					_CCError:
.190c	a2 09		ldx #$09			ldx 	#ErrorID_MissingComma
.190e	20 1a 19	jsr $191a			jsr 	ErrorHandler

;******  Return to file: ..\source\main/main.asm

.1911					mainHandler:
.1911	7c 14 19	jmp ($1914,x)			jmp 	(mainVectors,x)
.1914					mainVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\assembler/assembler.asm

.1914					assemblerHandler:
.1914	7c 17 19	jmp ($1917,x)			jmp 	(assemblerVectors,x)
.1917					assemblerVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\device/device.asm

.1917					deviceHandler:
.1917	7c 1a 19	jmp ($191a,x)			jmp 	(deviceVectors,x)
.191a					deviceVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\error/error.asm


;******  Processing file: ..\source\error/errorhandler.asm

.191a					ErrorHandler:
.191a	a9 ee		lda #$ee			lda 	#$EE
.191c	a8		tay				tay
>191d	db						.byte 	$DB
.191e	4c 1e 19	jmp $191e	_EHHalt:jmp 	_EHHalt

;******  Return to file: ..\source\error/error.asm


;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\floatingpoint/floatingpoint.asm

.1921					floatingpointHandler:
.1921	a2 02		ldx #$02			ldx 	#ErrorID_NoModule
.1923	20 1a 19	jsr $191a			jsr 	ErrorHandler

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\interaction/interaction.asm

.1926					interactionHandler:
.1926	7c 29 19	jmp ($1929,x)			jmp 	(interactionVectors,x)
.1929					interactionVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\string/string.asm


;******  Processing file: ..\source\string/compare.asm

.1929					STRCompare:
>1929	db						.byte 	$DB
.192a	4c 29 19	jmp $1929			jmp 	STRCompare

;******  Return to file: ..\source\string/string.asm


;******  Processing file: ..\source\string/concat.asm

.192d					StringConcat:
>192d	db						.byte 	$DB
.192e	80 fd		bra $192d			bra 	StringConcat

;******  Return to file: ..\source\string/string.asm

.1930					stringHandler:
.1930	7c 33 19	jmp ($1933,x)			jmp 	(stringVectors,x)
.1933					stringVectors:
>1933	2d 19					.word StringConcat         ; index 0
>1935	29 19					.word STRCompare           ; index 2

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\tokeniser/tokeniser.asm

.1937					tokeniserHandler:
.1937	7c 3a 19	jmp ($193a,x)			jmp 	(tokeniserVectors,x)
.193a					tokeniserVectors:

;******  Return to file: ..\source\basic.asm


;******  Processing file: ..\source\variable/variable.asm


;******  Processing file: ..\source\variable/access.asm

.193a					AccessVariable:
.193a	aa		tax				tax 								; stack in X
.193b	c8		iny				iny
.193c	b1 02		lda ($02),y			lda 	(codePtr),y
.193e	88		dey				dey
.193f	c9 3a		cmp #$3a			cmp 	#TYPE_INT 					; is it one of the end markers ?
.1941	d0 15		bne $1958			bne 	_AVLong
.1943	b1 02		lda ($02),y			lda 	(codePtr),y 				; this is the 6 bit ASCII of A-Z 1-26
.1945	38		sec				sec 	 							; make it 0-25
.1946	e9 01		sbc #$01			sbc 	#1
.1948	0a		asl a				asl 	a 							; x 4 is LSB of address
.1949	0a		asl a				asl 	a
.194a	95 48		sta $48,x			sta 	esInt0,x
.194c	a9 08		lda #$08			lda 	#SingleLetterVar >> 8 		; make it an address
.194e	95 50		sta $50,x			sta 	esInt1,x
.1950	a9 80		lda #$80			lda 	#$80 						; type is integer reference.
.1952	95 40		sta $40,x			sta 	esType,x
.1954	c8		iny				iny 								; skip over the variable reference in the code.
.1955	c8		iny				iny
.1956	8a		txa				txa 								; stack in A to return.
.1957	60		rts				rts
.1958					_AVLong:
.1958	80 fe		bra $1958			bra 	_AVLong

;******  Return to file: ..\source\variable/variable.asm

.195a					variableHandler:
.195a	7c 5d 19	jmp ($195d,x)			jmp 	(variableVectors,x)
.195d					variableVectors:
>195d	3a 19					.word AccessVariable       ; index 0

;******  Return to file: ..\source\basic.asm


;******  End of listing
