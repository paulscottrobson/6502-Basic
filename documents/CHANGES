Changes
=======
This is a list of changes made post release 0.14 (prior to that it was too fluid)

It is not practical yet to keep code in binary (e.g. tokenised) form because the token values
vary too much. Text source only.

12/3/2021
=========
- Uses .throw rather than error for error macro which behaved oddly in 64tass
- I/O added ASCII out, which is used by the interpreter and can convert to upper case (say)
  and normal out, which is used for PRINT, INPUT etc. Fix for default CBM character set issues.
- Add Get$() and Inkey$()
- Break now works on Get$(),Get() and Input (if it is turned on)
- Added Mem function
- Added out of memory checks.
- Added number stack overflow check.
- BUG: X1/X2 instructions were chewing up the stack (jump to execute rather than rts)

13/3/2021
=========
- LIST now indents structures/procedures.
- BUG: Structure Scanner moving forward to next line was using Y=0 not Y=3, causing spurious 
	   scanning and indenting.
- VLOAD very simple implementation no compression etc.

14/3/2021
=========
- Worked on analysis of 65C02 Opcodes
- Table and Token generators now produce tables/constants for Assembler.
- Put empty hooks in run to link to assembler module.

15/3/2021
=========
- VLOAD no longer defaults so VRAM files can be chunked if required, so VRAM addr/type etc. must be initialised
  initial load and data type.
- Assembler is complete and working, but obviously very alpha :)

16/3/2021
=========
- Assembler compiles all 65C02 instructions correctly
- More code reviews
- BUG: asl &34 lists and retokenises properly.
- tokenisers_tokenise does not use CS/CC to return success/fail.
- Version 0.16

17/3/2021
=========
- Reorganised the source files and added option for "unused"
- DIM works with multiple array indices, but you can't access them yet :)
- Tidied up array create. Had AZN vaccine today and it's made me a bit dozy.

18/3/2021
=========
- Written access code for multidimensional arrays & tested it.
- Added Mode which squeezes the screen set up into a 32 bit integer (which has simple versions)
- Added code to reset the mode back to zero when entering warm mode.

19/3/2021
=========
- Added MODE and PALETTE

20/3/2021
=========
- Coldstart forces correct mode as well

22/3/2021
=========
- Added ControlHandler to all autogenerated dispatchers for control/initialise purposes.
- VLOAD VRAM Loader creates the sprite image table.

25/3/2021
=========
- Resuming following Cov19 injections in family (minor side effects) and other personal stuff.
- BUG: CallCheck script wasn't checking in subdirectories - fixed several cross calls.
- Added SPRITE commands.

26/3/2021
=========
- VRAM file can now set palette.
- Reorganised table generators script

27/3/2021
=========
- Reorganised builder script
- Got Mario on screen using VRAM file and commands :)

28/3/2021
=========
- Fixed scaling so maintains aspect ratio
- Simple RLE compression used to store sprites in VRAM.
- Scripting format allows sprites from sprite sheets and individual graphics.
- vramc.py now exists as zipped standalone application.
- finished reorganisation of scripts directory.

29/3/2021
=========
- BUG: While calling evaluate with X = 4 not 0.
- Collision testing working.
- BUG: Fixed sprite pallete (r/b reversed)
- BUG: Fixed image encoder (using colour 240)
- Added Mode 1 (40x30) Mode 2 (20x15) Mode 3 (320x200x256 bitmap)

30/3/2021
=========
- Added Joystick Functions.
- CLOCK() reads the internal RTC

31/3/2021
=========
- Wrote first version graphics support driver. Added CLG.

1/4/2021
========
- Wrote general graphics handler  handling INK PAPER DIM and so on.
- Added RECT and FRAME

2/4/2021
========
- Added LINE and PLOT
- Redesigned driver & made everything else work.
- Optimised horizontal line driver
- CLG allows you to specify a colour via PAPER.
- Tested works okay with PHX/PLX/PHY/PLY 65C02

3/4/2021
========
- First builder control file.
- Converted tokens.py into one class plus two pure data classes.
